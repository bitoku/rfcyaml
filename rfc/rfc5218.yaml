- title: __initial_text__
  contents:
  - '                 What Makes for a Successful Protocol?

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet community has specified a large number of protocols\
    \ to\n   date, and these protocols have achieved varying degrees of success.\n\
    \   Based on case studies, this document attempts to ascertain factors\n   that\
    \ contribute to or hinder a protocol's success.  It is hoped that\n   these observations\
    \ can serve as guidance for future protocol work.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  What is Success? . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  Success Dimensions . . . . . . . . . . . . . . . .\
    \ . . . .  3\n       1.2.1.  Examples . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     1.3.  Effects of Wild Success  . . . . . . . . . . . . . . .\
    \ . .  5\n     1.4.  Failure  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n   2.  Initial Success Factors  . . . . . . . . . . . . . . . . . . .\
    \  7\n     2.1.  Basic Success Factors  . . . . . . . . . . . . . . . . . .  7\n\
    \       2.1.1.  Positive Net Value (Meet a Real Need)  . . . . . . . .  7\n  \
    \     2.1.2.  Incremental Deployability  . . . . . . . . . . . . . .  9\n    \
    \   2.1.3.  Open Code Availability . . . . . . . . . . . . . . . . 10\n      \
    \ 2.1.4.  Freedom from Usage Restrictions  . . . . . . . . . . . 10\n       2.1.5.\
    \  Open Specification Availability  . . . . . . . . . . . 10\n       2.1.6.  Open\
    \ Maintenance Processes . . . . . . . . . . . . . . 10\n       2.1.7.  Good Technical\
    \ Design  . . . . . . . . . . . . . . . . 11\n     2.2.  Wild Success Factors\
    \ . . . . . . . . . . . . . . . . . . . 11\n       2.2.1.  Extensible . . . .\
    \ . . . . . . . . . . . . . . . . . . 11\n       2.2.2.  No Hard Scalability Bound\
    \  . . . . . . . . . . . . . . 11\n       2.2.3.  Threats Sufficiently Mitigated\
    \ . . . . . . . . . . . . 11\n   3.  Conclusions  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 12\n   4.  Security Considerations  . . . . . . . . .\
    \ . . . . . . . . . . 13\n   5.  Informative References . . . . . . . . . . .\
    \ . . . . . . . . . 13\n   Appendix A.  Case Studies  . . . . . . . . . . . .\
    \ . . . . . . . . 17\n     A.1.  HTML/HTTP vs. Gopher and FTP . . . . . . . .\
    \ . . . . . . . 17\n       A.1.1.  Initial Success Factors  . . . . . . . . .\
    \ . . . . . . 17\n       A.1.2.  Wild Success Factors . . . . . . . . . . . .\
    \ . . . . . 18\n       A.1.3.  Discussion . . . . . . . . . . . . . . . . . .\
    \ . . . . 18\n     A.2.  IPv4 vs. IPX . . . . . . . . . . . . . . . . . . . .\
    \ . . . 18\n       A.2.1.  Initial Success Factors  . . . . . . . . . . . . .\
    \ . . 18\n       A.2.2.  Wild Success Factors . . . . . . . . . . . . . . . .\
    \ . 19\n       A.2.3.  Discussion . . . . . . . . . . . . . . . . . . . . . .\
    \ 19\n     A.3.  SSH  . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n\
    \       A.3.1.  Initial Success Factors  . . . . . . . . . . . . . . . 19\n  \
    \     A.3.2.  Wild Success Factors . . . . . . . . . . . . . . . . . 20\n    \
    \   A.3.3.  Discussion . . . . . . . . . . . . . . . . . . . . . . 20\n     A.4.\
    \  Inter-Domain IP Multicast vs. Application Overlays . . . 20\n       A.4.1.\
    \  Initial Success Factors  . . . . . . . . . . . . . . . 20\n       A.4.2.  Wild\
    \ Success Factors . . . . . . . . . . . . . . . . . 21\n       A.4.3.  Discussion\
    \ . . . . . . . . . . . . . . . . . . . . . . 22\n     A.5.  Wireless Application\
    \ Protocol (WAP)  . . . . . . . . . . . 22\n       A.5.1.  Initial Success Factors\
    \  . . . . . . . . . . . . . . . 22\n       A.5.2.  Wild Success Factors . . .\
    \ . . . . . . . . . . . . . . 22\n       A.5.3.  Discussion . . . . . . . . .\
    \ . . . . . . . . . . . . . 22\n     A.6.  Wired Equivalent Privacy (WEP) . .\
    \ . . . . . . . . . . . . 23\n       A.6.1.  Initial Success Factors  . . . .\
    \ . . . . . . . . . . . 23\n       A.6.2.  Wild Success Factors . . . . . . .\
    \ . . . . . . . . . . 23\n       A.6.3.  Discussion . . . . . . . . . . . . .\
    \ . . . . . . . . . 23\n     A.7.  RADIUS vs. TACACS+ . . . . . . . . . . . .\
    \ . . . . . . . . 24\n       A.7.1.  Initial Success Factors  . . . . . . . .\
    \ . . . . . . . 24\n       A.7.2.  Wild Success Factors . . . . . . . . . . .\
    \ . . . . . . 24\n       A.7.3.  Discussion . . . . . . . . . . . . . . . . .\
    \ . . . . . 24\n     A.8.  Network Address Translators (NATs) . . . . . . . .\
    \ . . . . 25\n       A.8.1.  Initial Success Factors  . . . . . . . . . . . .\
    \ . . . 25\n       A.8.2.  Wild Success Factors . . . . . . . . . . . . . . .\
    \ . . 25\n       A.8.3.  Discussion . . . . . . . . . . . . . . . . . . . . .\
    \ . 26\n   Appendix B.  IAB Members at the Time of This Writing . . . . . . .\
    \ 26\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   One of the goals of the Internet Engineering Task Force\
    \ (IETF) is to\n   define protocols that successfully meet their implementation\
    \ and\n   deployment goals.  Based on case studies, this document identifies\n\
    \   some of the factors influencing success and failure of protocol\n   designs.\
    \  It is hoped that this document will be of use to the\n   following audiences:\n\
    \   o  IESG members deciding whether to charter a Working Group to do\n      work\
    \ on a specific protocol;\n   o  Working Group participants selecting among protocol\
    \ proposals;\n   o  Document authors developing a new protocol specification;\n\
    \   o  Anyone evaluating the success of a protocol experiment.\n"
- title: 1.1.  What is Success?
  contents:
  - "1.1.  What is Success?\n   In discussing the factors that help or hinder the\
    \ success of a\n   protocol, we need to first define what we mean by \"success\"\
    .  A\n   protocol can be successful and still not be widely deployed, if it\n\
    \   meets its original goals.  However, in this document, we consider a\n   successful\
    \ protocol to be one that both meets its original goals and\n   is widely deployed.\
    \  Note that \"widely deployed\" does not mean\n   \"inter-domain\"; successful\
    \ protocols (e.g., DHCP [RFC2131]) may be\n   widely deployed solely for intra-domain\
    \ use.\n   The following are examples of successful protocols:\n      Inter-domain:\
    \ IPv4 [RFC0791], TCP [RFC0793], HTTP [RFC2616], DNS\n      [RFC1035], BGP [RFC4271],\
    \ UDP [RFC0768], SMTP [RFC2821], SIP\n      [RFC3261].\n      Intra-domain: ARP\
    \ [RFC0826], PPP [RFC1661], DHCP [RFC2131], RIP\n      [RFC1058], OSPF [RFC2328],\
    \ Kerberos [RFC4120], NAT [RFC3022].\n"
- title: 1.2.  Success Dimensions
  contents:
  - "1.2.  Success Dimensions\n   Two major dimensions on which a protocol can be\
    \ evaluated are scale\n   and purpose.  When designed, a protocol is intended\
    \ for some range of\n   purposes and was designed for use on a particular scale.\n\
    \   Figure 1 graphically depicts these concepts.\n          Scale ^\n        \
    \        |\n                |             +------------+\n                |  \
    \           |            |\n                |             |  Original  |\n   \
    \             |             |  Protocol  |\n                |             |  \
    \ Design   |\n                |             |   Space    |\n                |\
    \             |            |\n             <----------------------------------------------->\
    \ Purpose\n                                 Figure 1\n   According to these metrics,\
    \ a \"successful\" protocol is one that is\n   used for its original purpose and\
    \ at the originally intended scale.\n   A \"wildly successful\" protocol far exceeds\
    \ its original goals, in\n   terms of purpose (being used in scenarios far beyond\
    \ the initial\n   design), in terms of scale (being deployed on a scale much greater\n\
    \   than originally envisaged), or both.  That is, it has overgrown its\n   bounds\
    \ and has ventured out \"into the wild\".\n"
- title: 1.2.1.  Examples
  contents:
  - "1.2.1.  Examples\n   HTTP is an example of a \"wildly successful\" protocol that\
    \ exceeded\n   its design in both purpose and scale:\n       Scale ^  +---------------------------------------+\n\
    \             |  | Actual Deployment                     |\n             |  |\
    \                                       |\n             |  |                 \
    \                      |\n             |  |            +------------+        \
    \     |\n             |  |            |  Original  |             |\n         \
    \    |  | (Web       |   Design   | (Firewall   |\n             |  |  Services)\
    \ |   Space    |  Traversal) |\n             |  |            |   (Web)    |  \
    \           |\n          <-----------------------------------------------> Purpose\n\
    \   Another example of a wildly successful protocol is IPv4.  Although it\n  \
    \ was designed for all purposes (\"Everything over IP and IP over\n   Everything\"\
    ), it has been deployed on a far greater scale than that\n   for which it was\
    \ originally designed; the limited address space only\n   became an issue after\
    \ it had already vastly surpassed its original\n   design.\n   Another example\
    \ of a successful protocol is ARP.  Originally intended\n   for a more general\
    \ purpose (namely, resolving network layer addresses\n   to link layer addresses,\
    \ regardless of the media type or network\n   layer protocol), ARP was widely\
    \ deployed for a narrower scope of uses\n   (resolution of IPv4 addresses to Ethernet\
    \ MAC addresses), but then\n   was adopted for other uses such as detecting network\
    \ attachment\n   (Detecting Network Attachment in IPv4 (DNAv4) [RFC4436]).  Also,\
    \ like\n   IPv4, ARP is deployed on a much greater scale (in terms of number of\n\
    \   machines, but not number on the same subnet) than originally\n   expected.\n\
    \       Scale ^  +-------------------+\n             |  | Actual Deployment |\n\
    \             |  |                   |\n             |  |                   |\
    \   Original Design Space\n             |  |     +-------------+--------------+\n\
    \             |  |     |(IP/Ethernet)|(Non-IP)      |\n             |  |(DNA)|\
    \             |              |\n             |  |     |             |(Non-Ethernet)|\n\
    \             |  |     |             |              |\n          <----------------------------------------------->\
    \ Purpose\n"
- title: 1.3.  Effects of Wild Success
  contents:
  - "1.3.  Effects of Wild Success\n   Wild success can be both good and bad.  A wildly\
    \ successful protocol\n   is so useful that it can solve more problems or address\
    \ more\n   scenarios or devices.  This may indicate that it is time to revise\n\
    \   the protocol to better accommodate the new design space.\n   However, if a\
    \ protocol is used for a purpose other than what it was\n   designed for:\n  \
    \ o  There may be undesirable side effects because of design decisions\n     \
    \ that are appropriate for the originally intended purpose, but\n      inappropriate\
    \ for the new purpose.\n   o  There may be performance problems if the protocol\
    \ was not designed\n      to scale to the extent to which it was deployed.\n \
    \  o  Implementers may attempt to add or change functionality to work\n      around\
    \ the design limitations without complete understanding of\n      their effect\
    \ on the overall protocol behavior and invariants.\n   o  Wildly successful protocols\
    \ become high value targets for\n      attackers because of their popularity and\
    \ the potential for\n      exploitation of uses or extensions that are less well\
    \ understood\n      and tested than the original protocol.\n   A wildly successful\
    \ protocol is therefore vulnerable to \"death by\n   success\", collapsing as\
    \ a result of attacks or scaling limitations.\n"
- title: 1.4.  Failure
  contents:
  - "1.4.  Failure\n   Failure, or the lack of success, cannot be determined before\
    \ allowing\n   sufficient time to pass (e.g., 5-10 years for an average protocol).\n\
    \   Failure criteria include:\n   o  No mainstream implementations.  There is\
    \ little or no support in\n      hosts, routers, or other classes of relevant\
    \ devices.\n   o  No deployment.  Devices that support the protocol are not\n\
    \      deployed, or if they are, then the protocol is not enabled.\n   o  No use.\
    \  While the protocol may be deployed, there are no\n      applications or scenarios\
    \ that actually use the protocol.\n   At the time a protocol is first designed,\
    \ the three above conditions\n   hold, which is why it is important to allow sufficient\
    \ time to pass\n   before evaluating the success or failure of a protocol.\n \
    \  The lack of a value chain can make it difficult for a new protocol to\n   progress\
    \ from implementation to deployment to use.  While the term\n   \"chicken-and-egg\"\
    \ problem is sometimes used to describe the lack of a\n   value chain, the lack\
    \ of implementation, deployment, or use is not\n   the cause of failure, it is\
    \ merely a symptom.\n   There are many strategies that have been used in the past\
    \ for\n   overcoming the initial lack of implementations, deployment, and use,\n\
    \   although none of these guarantee success.  For example:\n   o  Address a critical\
    \ and imminent problem.  If the need is severe\n      enough, the industry is\
    \ incented to adopt it as soon as\n      implementations exist, and well-known\
    \ need is sufficient to\n      motivate implementations.  For example, NAT provided\
    \ an immediate\n      address sharing capability to the individual deploying it\n\
    \      (Appendix A.8).  Thus, when creating a protocol, consider whether\n   \
    \   it can be easily tailored or expanded to directly target a\n      critical\
    \ problem; if it only solves part of the problem, consider\n      what would be\
    \ needed in addition.\n   o  Provide a \"killer app\" with low deployment costs.\
    \  This strategy\n      can be used to generate demand where none existed before.\
    \  See the\n      HTTP case study in Appendix A.1 for an example.\n   o  Provide\
    \ value for existing unmodified applications.  This solves\n      the chicken-and-egg\
    \ problem by ensuring that use exists as soon as\n      the protocol is deployed,\
    \ and therefore, the benefit can be\n      realized immediately.  See the Wired\
    \ Equivalent Privacy (WEP) case\n      study in Appendix A.6 for an example.\n\
    \   o  Reduce complexity and cost by narrowing the intended purpose\n      and/or\
    \ scope to an area where it is easiest to succeed.  This may\n      allow removing\
    \ complexity that is not required for the narrow\n      purpose.  Removing complexity\
    \ reduces the cost of implementation\n      and deployment to where the resulting\
    \ cost may be very low\n      compared to the benefit.  For example, link-scoped\
    \ multicast is\n      far more successful than, say, inter-domain multicast (see\n\
    \      Appendix A.4).\n   o  A government or other entity may provide incentives\
    \ or\n      disincentives that motivate implementation and deployment.  For\n\
    \      example, specific cryptographic algorithms may be mandated.  As\n     \
    \ another example, Japan started an economic incentive program to\n      generate\
    \ IPv6 [RFC2460] implementations and deployment.\n   As we will see, such strategies\
    \ are often successful because they\n   directly target the top success factors.\n"
- title: 2.  Initial Success Factors
  contents:
  - "2.  Initial Success Factors\n   In this section, we identify factors that contribute\
    \ to success and\n   \"wild\" success.\n   Note that a successful protocol will\
    \ not necessarily include all the\n   success factors, and some success factors\
    \ may be present even in\n   failed designs.  Nevertheless, experience appears\
    \ to indicate that\n   the presence of success factors seems to improve the probability\
    \ of\n   success.\n   The success factors, and their relative importance, were\
    \ suggested by\n   a series of case studies (Appendix A).\n"
- title: 2.1.  Basic Success Factors
  contents:
  - '2.1.  Basic Success Factors

    '
- title: 2.1.1.  Positive Net Value (Meet a Real Need)
  contents:
  - "2.1.1.  Positive Net Value (Meet a Real Need)\n   It is critical to the success\
    \ of a protocol that the benefits of\n   deploying the protocol (monetary or otherwise)\
    \ outweigh the costs,\n   which include:\n   o  Hardware cost: Protocols that\
    \ don't require hardware changes are\n      easier to deploy than those that do.\
    \  Overlay networks are one way\n      to avoid requiring hardware changes.  However,\
    \ often hardware\n      updates are required even for protocols whose functionality\
    \ could\n      be provided solely in software.  Vendors often implement new\n\
    \      functionality only within later branches of the code tree, which\n    \
    \  may only run on new hardware.  As a result, the safest way to\n      avoid\
    \ hardware upgrade cost is to design for backward\n      compatibility with both\
    \ existing hardware and software.\n   o  Operational interference: Protocols that\
    \ don't require changes to\n      other operational processes and tools are easier\
    \ to deploy than\n      ones that do.  For example, IPsec [RFC4301] interferes\
    \ with\n      NetFlow [RFC3954] deep packet inspection, which can be important\n\
    \      to operators.\n   o  Retraining: Protocols that have no configuration,\
    \ or are very easy\n      to configure/manage, are cheaper to deploy.\n   o  Business\
    \ dependencies: Protocols that don't require changes to a\n      business model\
    \ (whether for implementers or deployers) are easier\n      to deploy than ones\
    \ that do.  There are costs associated with\n      changing billing and accounting\
    \ systems and retraining of\n      associated personnel, and in addition, the\
    \ assumptions on which\n      the previous business model was based may change.\
    \  For example,\n      some time ago many service providers had business models\
    \ built\n      around dial-up with an assumption that machines were not connected\n\
    \      all the time; protocols that desired always-on connectivity\n      required\
    \ the business model to change since the networks were not\n      optimized for\
    \ always-on.  Similarly, some service providers have\n      business models that\
    \ assume that upstream bandwidth is\n      underutilized; peer-to-peer protocols\
    \ may require this business\n      model to change.  Finally, many service providers\
    \ have business\n      models based on charging for the amount of bandwidth consumed\
    \ on\n      the link to a customer; multicast protocols interfere with this\n\
    \      business model since they provide a way for a customer to consume\n   \
    \   less bandwidth on the source link by sending multicast traffic, as\n     \
    \ opposed to paying more to source many unicast streams, without\n      having\
    \ some other mechanism to cover the cost of replication in\n      the network\
    \ (e.g., router CPU, downstream link bandwidth, extra\n      management).  Multicast\
    \ protocols also complicate business models\n      based on charging the source\
    \ of traffic based on the amount of\n      multicast replication, since the source\
    \ may not be able to predict\n      the cost until a bill is received.\n   Similarly,\
    \ there are many types of benefits, including:\n   o  Relieving pain: Protocols\
    \ that drastically lower costs (monetary\n      or otherwise) that exist prior\
    \ to deploying the protocol are\n      easier to show direct benefit from, since\
    \ they address a burning\n      need.\n   o  Enabling new scenarios: Protocols\
    \ that enable new capabilities,\n      scenarios, or user experiences can provide\
    \ significant value,\n      although the benefit may be harder to realize, as\
    \ there may be\n      more risk involved.\n   o  Incremental improvements: Protocols\
    \ that provide incremental\n      improvements (e.g., better video quality) generate\
    \ a small\n      benefit, and hence can be successful as long as the cost is small.\n\
    \   There are at least two example cases of cost/benefits tradeoffs.  In\n   the\
    \ first case, even upon initial deployment, the benefit outweighs\n   the cost.\
    \  In the second case, there is an upfront cost that\n   outweighs the initial\
    \ benefit, but the benefit grows over time (e.g.,\n   as more nodes or applications\
    \ support it).  The former model is much\n   easier to get initial deployment,\
    \ but over time both can be\n   successful.  The second model has a danger for\
    \ the initial\n   deployments, that if others don't deploy the protocol then the\n\
    \   initial deployers have lost value, and so they must take on some risk\n  \
    \ in deploying the protocol.\n   Success most easily comes when the natural incentive\
    \ structure is\n   aligned with the deployment requirements.  That is, those who\
    \ are\n   required to deploy, manage, or configure something are the same as\n\
    \   those who gain the most benefit.  In summary, it is best if there is\n   significant\
    \ positive net value at each organization where a change is\n   required.\n"
- title: 2.1.2.  Incremental Deployability
  contents:
  - "2.1.2.  Incremental Deployability\n   A protocol is incrementally deployable\
    \ if early adopters gain some\n   benefit even though the rest of the Internet\
    \ does not support the\n   protocol.  There are several aspects to this.\n   Protocols\
    \ that can be deployed by a single group or team (e.g.,\n   intra-domain) have\
    \ a greater chance of success than those that\n   require cooperation across organizations\
    \ (or, in the worst case\n   require a \"flag day\" where everyone has to change\
    \ simultaneously).\n   For example, protocols that don't require changes to infrastructure\n\
    \   (e.g., router changes, service provider support, etc.) have a greater\n  \
    \ chance of success than ones that do, since less coordination is\n   needed,\
    \ NAT being a canonical example.  Similarly, protocols that\n   provide benefit\
    \ when only one end changes have a greater chance of\n   success than ones that\
    \ require both ends of communication to support\n   the protocol.\n   Finally,\
    \ protocol updates that are backward compatible with older\n   implementations\
    \ have a greater chance of success than ones that\n   aren't.\n"
- title: 2.1.3.  Open Code Availability
  contents:
  - "2.1.3.  Open Code Availability\n   Protocols with freely available implementation\
    \ code have a greater\n   chance of success than protocols without.  Often, this\
    \ is more\n   important than any technical consideration.  For example, it can\
    \ be\n   argued that when deciding between IPv4 and Internetwork Packet\n   Exchange\
    \ (IPX) [IPX], this was the determining factor, even though,\n   in many ways,\
    \ IPX was technically superior to IPv4.  Similar\n   arguments have been made\
    \ for the success of RADIUS [RFC2865] over\n   TACACS+ [TACACS+].  See Appendix\
    \ A for further discussion.\n"
- title: 2.1.4.  Freedom from Usage Restrictions
  contents:
  - "2.1.4.  Freedom from Usage Restrictions\n   Freedom from usage restrictions means\
    \ that anyone who wishes to\n   implement or deploy can do so without legal or\
    \ financial hindrance.\n   Within the IETF, this point often comes up when evaluating\
    \ between\n   technologies, one of which has known Intellectual Property associated\n\
    \   with it.  Often the industry chooses the one with no known\n   Intellectual\
    \ Property, even if it is technically inferior.\n"
- title: 2.1.5.  Open Specification Availability
  contents:
  - "2.1.5.  Open Specification Availability\n   Open specification availability means\
    \ the protocol specification is\n   made available to anyone who wishes to use\
    \ it.  This is true for all\n   Internet Drafts and RFCs, and it has contributed\
    \ to the success of\n   protocol specifications developed within or contributed\
    \ to the IETF.\n   The various aspects of this factor include:\n   o  World-wide\
    \ distribution: Is the specification accessible from\n      anywhere in the world?\n\
    \   o  Unrestricted distribution: Are there no legal restrictions on\n      getting\
    \ the specification?\n   o  Permanence: Does the specification remain even after\
    \ the creator\n      is gone?\n   o  Stability: Is there a stable version of the\
    \ specification that\n      does not change?\n"
- title: 2.1.6.  Open Maintenance Processes
  contents:
  - "2.1.6.  Open Maintenance Processes\n   This factor means that the protocol is\
    \ maintained by open processes,\n   mechanisms exist for public comment on the\
    \ protocol, and the protocol\n   maintenance process allows the participation\
    \ of all constituencies\n   that are affected by the protocol.\n"
- title: 2.1.7.  Good Technical Design
  contents:
  - "2.1.7.  Good Technical Design\n   This factor means that the protocol follows\
    \ good design principles\n   that lead to ease of implementation and interoperability,\
    \ such as\n   those described in \"Architectural Principles of the Internet\"\n\
    \   [RFC1958].  For example, simplicity, modularity, and robustness to\n   failures\
    \ are all key design factors.  Similarly, clarity in\n   specifications is another\
    \ aspect of good technical design that\n   facilitates interoperability and ease\
    \ of implementation.  However,\n   experience shows that good technical design\
    \ has minimal impact on\n   initial success compared with other factors.\n"
- title: 2.2.  Wild Success Factors
  contents:
  - "2.2.  Wild Success Factors\n   The following factors do not seem to significantly\
    \ affect initial\n   success, but can affect whether a protocol becomes wildly\
    \ successful.\n"
- title: 2.2.1.  Extensible
  contents:
  - "2.2.1.  Extensible\n   Protocols that are extensible are more likely to be wildly\
    \ successful\n   in terms of being used for purposes outside their original design.\n\
    \   An extensible protocol may carry general purpose payloads/options, or\n  \
    \ may be easy to add a new payload/option type.  Such extensibility is\n   desirable\
    \ for protocols that intend to apply to all purposes (like\n   IP).  However,\
    \ for protocols designed for a specialized purpose,\n   extensibility should be\
    \ carefully considered before including it.\n"
- title: 2.2.2.  No Hard Scalability Bound
  contents:
  - "2.2.2.  No Hard Scalability Bound\n   Protocols that have no inherent limit near\
    \ the edge of the originally\n   envisioned scale are more likely to be wildly\
    \ successful in terms of\n   scale.  For example, IPv4 had no inherent limit near\
    \ its originally\n   envisioned scale; the address space limit was not hit until\
    \ it was\n   already wildly successful in terms of scale.  Another type of\n \
    \  inherent limit would be a performance \"knee\" that causes a meltdown\n   (e.g.,\
    \ a broadcast storm) once a scaling limit is passed.\n"
- title: 2.2.3.  Threats Sufficiently Mitigated
  contents:
  - "2.2.3.  Threats Sufficiently Mitigated\n   The more successful a protocol becomes,\
    \ the more attractive a target\n   it will be.  Protocols with security flaws\
    \ may still become wildly\n   successful provided that they are extensible enough\
    \ to allow the\n   flaws to be addressed in subsequent revisions.  Examples include\n\
    \   Secure SHell version 1 (SSHv1) and IEEE 802.11 with WEP.  However,\n   the\
    \ combination of security flaws and limited extensibility tends to\n   be deadly.\
    \  For example, some early server-based multiplayer games\n   ultimately failed\
    \ due to insufficient protections against cheating,\n   even though they were\
    \ initially successful.\n"
- title: 3.  Conclusions
  contents:
  - "3.  Conclusions\n   The case studies described in Appendix A indicate that the\
    \ most\n   important initial success factors are filling a real need and being\n\
    \   incrementally deployable.  When there are competing proposals of\n   comparable\
    \ benefit and deployability, open specifications and code\n   become significant\
    \ success factors.  Open source availability is\n   initially more important than\
    \ open specification maintenance.\n   In most cases, technical quality was not\
    \ a primary factor in initial\n   success.  Indeed, many successful protocols\
    \ would not pass IESG\n   review today.  Technically inferior proposals can win\
    \ if they are\n   openly available.  Factors that do not seem to be significant\
    \ in\n   determining initial success (but may affect wild success) include\n \
    \  good design, security, and having an open specification maintenance\n   process.\n\
    \   Many of the case studies concern protocols originally developed\n   outside\
    \ the IETF, which the IETF played a role in improving only\n   after initial success\
    \ was certain.  While the IETF focuses on design\n   quality, which is not a factor\
    \ in determining initial protocol\n   success, once a protocol succeeds, a good\
    \ technical design may be key\n   to it staying successful, or in dealing with\
    \ wild success.  Allowing\n   extensibility in an initial design enables initial\
    \ shortcomings to be\n   addressed.\n   Security vulnerabilities do not seem to\
    \ limit initial success, since\n   vulnerabilities often become interesting to\
    \ attackers only after the\n   protocol becomes widely deployed enough to become\
    \ a useful target.\n   Finally, open specification maintenance is not important\
    \ to initial\n   success since many successful protocols were initially developed\n\
    \   outside the IETF or other standards bodies, and were only\n   standardized\
    \ later.\n   In light of our conclusions, we recommend that the following\n  \
    \ questions be asked when evaluating protocol designs:\n   o  Does the protocol\
    \ exhibit one or more of the critical initial\n      success factors?\n   o  Are\
    \ there implementers who are ready to implement the technology\n      in ways\
    \ that are likely to be deployed?\n   o  Are there customers (especially high-profile\
    \ customers) who are\n      ready to deploy the technology?\n   o  Are there potential\
    \ niches where the technology is compelling?\n   o  If so, can complexity be removed\
    \ to reduce cost?\n   o  Is there a potential killer app?  Or can the technology\
    \ work\n      underneath existing unmodified applications?\n   o  Is the protocol\
    \ sufficiently extensible to allow potential\n      deficiencies to be addressed\
    \ in the future?\n   o  If it is not known whether the protocol will be successful,\
    \ should\n      the market decide first?  Or should the IETF work on multiple\n\
    \      alternatives and let the market decide among them?  Are there\n      factors\
    \ listed in this document that may predict which is more\n      likely to succeed?\n\
    \   In the early stages (e.g., BOFs, design of new protocols), evaluating\n  \
    \ the initial success factors is important in facilitating success.\n   Similarly,\
    \ efforts to revise unsuccessful protocols should evaluate\n   whether the initial\
    \ success factors (or enough of them) were present,\n   rather than focusing on\
    \ wild success, which is not yet a problem.\n   For a revision of a successful\
    \ protocol, on the other hand, focusing\n   on the wild success factors is more\
    \ appropriate.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document discusses attributes that affect\
    \ the success of\n   protocols.  It has no specific security implications.\n \
    \  Recommendations on security in protocol design can be found in\n   [RFC3552].\n"
- title: 5.  Informative References
  contents:
  - "5.  Informative References\n   [IEEE-802.11]  IEEE, \"Wireless LAN Medium Access\
    \ Control (MAC) and\n                  Physical Layer (PHY) Specifications\",\
    \ ANSI/IEEE\n                  Std 802.11, 2007.\n   [IMODE]        NTT DoCoMo,\
    \ \"i-mode\",\n                  <http://www.nttdocomo.com/services/imode/index.html>.\n\
    \   [IPX]          Novell, \"IPX Router Specification\", Novell Part\n       \
    \           Number 107-000029-001, 1992.\n   [ISO-8879]     ISO, \"Information\
    \ processing -- Text and office\n                  systems -- Standard Generalized\
    \ Markup Language\n                  (SGML)\", ISO 8879, 1986.\n   [RFC0768] \
    \     Postel, J., \"User Datagram Protocol\", STD 6, RFC 768,\n              \
    \    August 1980.\n   [RFC0791]      Postel, J., \"Internet Protocol\", STD 5,\
    \ RFC 791,\n                  September 1981.\n   [RFC0793]      Postel, J., \"\
    Transmission Control Protocol\", STD 7,\n                  RFC 793, September\
    \ 1981.\n   [RFC0826]      Plummer, D., \"Ethernet Address Resolution Protocol:\
    \ Or\n                  converting network protocol addresses to 48.bit\n    \
    \              Ethernet address for transmission on Ethernet\n               \
    \   hardware\", STD 37, RFC 826, November 1982.\n   [RFC0959]      Postel, J.\
    \ and J. Reynolds, \"File Transfer Protocol\",\n                  STD 9, RFC 959,\
    \ October 1985.\n   [RFC1035]      Mockapetris, P., \"Domain names - implementation\
    \ and\n                  specification\", STD 13, RFC 1035, November 1987.\n \
    \  [RFC1058]      Hedrick, C., \"Routing Information Protocol\", RFC 1058,\n \
    \                 June 1988.\n   [RFC1436]      Anklesaria, F., McCahill, M.,\
    \ Lindner, P., Johnson,\n                  D., Torrey, D., and B. Alberti, \"\
    The Internet Gopher\n                  Protocol (a distributed document search\
    \ and retrieval\n                  protocol)\", RFC 1436, March 1993.\n   [RFC1661]\
    \      Simpson, W., \"The Point-to-Point Protocol (PPP)\",\n                 \
    \ STD 51, RFC 1661, July 1994.\n   [RFC1866]      Berners-Lee, T. and D. Connolly,\
    \ \"Hypertext Markup\n                  Language - 2.0\", RFC 1866, November 1995.\n\
    \   [RFC1958]      Carpenter, B., \"Architectural Principles of the\n        \
    \          Internet\", RFC 1958, June 1996.\n   [RFC2131]      Droms, R., \"Dynamic\
    \ Host Configuration Protocol\",\n                  RFC 2131, March 1997.\n  \
    \ [RFC2328]      Moy, J., \"OSPF Version 2\", STD 54, RFC 2328,\n            \
    \      April 1998.\n   [RFC2460]      Deering, S. and R. Hinden, \"Internet Protocol,\
    \ Version\n                  6 (IPv6) Specification\", RFC 2460, December 1998.\n\
    \   [RFC2616]      Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n       \
    \           Masinter, L., Leach, P., and T. Berners-Lee,\n                  \"\
    Hypertext Transfer Protocol -- HTTP/1.1\", RFC 2616,\n                  June 1999.\n\
    \   [RFC2821]      Klensin, J., \"Simple Mail Transfer Protocol\",\n         \
    \         RFC 2821, April 2001.\n   [RFC2865]      Rigney, C., Willens, S., Rubens,\
    \ A., and W. Simpson,\n                  \"Remote Authentication Dial In User\
    \ Service (RADIUS)\",\n                  RFC 2865, June 2000.\n   [RFC3022]  \
    \    Srisuresh, P. and K. Egevang, \"Traditional IP Network\n                \
    \  Address Translator (Traditional NAT)\", RFC 3022,\n                  January\
    \ 2001.\n   [RFC3261]      Rosenberg, J., Schulzrinne, H., Camarillo, G.,\n  \
    \                Johnston, A., Peterson, J., Sparks, R., Handley, M.,\n      \
    \            and E. Schooler, \"SIP: Session Initiation Protocol\",\n        \
    \          RFC 3261, June 2002.\n   [RFC3552]      Rescorla, E. and B. Korver,\
    \ \"Guidelines for Writing\n                  RFC Text on Security Considerations\"\
    , BCP 72,\n                  RFC 3552, July 2003.\n   [RFC3954]      Claise, B.,\
    \ \"Cisco Systems NetFlow Services Export\n                  Version 9\", RFC\
    \ 3954, October 2004.\n   [RFC4120]      Neuman, C., Yu, T., Hartman, S., and\
    \ K. Raeburn, \"The\n                  Kerberos Network Authentication Service\
    \ (V5)\",\n                  RFC 4120, July 2005.\n   [RFC4251]      Ylonen, T.\
    \ and C. Lonvick, \"The Secure Shell (SSH)\n                  Protocol Architecture\"\
    , RFC 4251, January 2006.\n   [RFC4271]      Rekhter, Y., Li, T., and S. Hares,\
    \ \"A Border Gateway\n                  Protocol 4 (BGP-4)\", RFC 4271, January\
    \ 2006.\n   [RFC4301]      Kent, S. and K. Seo, \"Security Architecture for the\n\
    \                  Internet Protocol\", RFC 4301, December 2005.\n   [RFC4436]\
    \      Aboba, B., Carlson, J., and S. Cheshire, \"Detecting\n                \
    \  Network Attachment in IPv4 (DNAv4)\", RFC 4436,\n                  March 2006.\n\
    \   [RFC4864]      Van de Velde, G., Hain, T., Droms, R., Carpenter, B.,\n   \
    \               and E. Klein, \"Local Network Protection for IPv6\",\n       \
    \           RFC 4864, May 2007.\n   [TACACS+]      Carrel, D. and L. Grant, \"\
    The TACACS+ Protocol,\n                  Version 1.78\", Work in Progress, January\
    \ 1997.\n   [WAP]          Open Mobile Alliance, \"Wireless Application Protocol\n\
    \                  Architecture Specification\", <http://\n                  www.openmobilealliance.org/tech/affiliates/\n\
    \                  LicenseAgreement.asp?DocName=/wap/\n                  wap-210-waparch-20010712-a.pdf>.\n"
- title: Appendix A.  Case Studies
  contents:
  - "Appendix A.  Case Studies\n   In this Appendix, we include several case studies\
    \ to illustrate the\n   importance of potential success factors.  Many other equally\
    \ good\n   case studies could have been included, but, in the interests of\n \
    \  brevity, only a sampling is included here that is sufficient to\n   justify\
    \ the conclusions in the body of this document.\n"
- title: A.1.  HTML/HTTP vs. Gopher and FTP
  contents:
  - 'A.1.  HTML/HTTP vs. Gopher and FTP

    '
- title: A.1.1.  Initial Success Factors
  contents:
  - "A.1.1.  Initial Success Factors\n   Positive net value: HTTP [RFC2616] with HTML\
    \ [RFC1866] provided\n   substantially more value than Gopher [RFC1436] and FTP\
    \ [RFC0959].\n   Among other things, HTML/HTTP provided support for forms, which\n\
    \   opened the door for commercial uses of the technology.  In this\n   sense,\
    \ it enabled new scenarios.  Furthermore, it only required\n   changes by entities\
    \ that received benefits; hence, the cost and\n   benefits were aligned.\n   Incremental\
    \ deployability: Browsers and servers were incrementally\n   deployable, but initial\
    \ browsers were also backward compatible with\n   existing protocols such as FTP\
    \ and Gopher.\n   Open code availability: Server code was open.  Client source\
    \ code was\n   initially open to academic use only.\n   Restriction-free: Academic\
    \ use licenses were freely available.  HTML\n   encumbrance only surfaced later.\n\
    \   Open specification availability: Yes.\n   Open maintenance process: Not at\
    \ first, but eventually.  This\n   illustrates that it is not necessary to have\
    \ an open maintenance\n   process at first to achieve success.  The maintenance\
    \ process becomes\n   important after initial success.\n   Good technical design:\
    \ Fair.  Initially, there was no support for\n   graphics, HTML was missing many\
    \ SGML [ISO-8879] features, and HTTP\n   1.0 had issues with congestion control\
    \ and proxy support.  These\n   sorts of issues would typically prevent IESG approval\
    \ today.\n   However, they did not prevent the protocol from becoming successful.\n"
- title: A.1.2.  Wild Success Factors
  contents:
  - "A.1.2.  Wild Success Factors\n   Extensible: Extensibility was excellent along\
    \ multiple dimensions,\n   including HTTP, HTML, graphics, forms, Java, JavaScript,\
    \ etc.\n   No hard scalability bound: Excellent.  There was no registration\n\
    \   process, as there was with Gopher, which allowed it to scale much\n   better.\n\
    \   Threats sufficiently mitigated: No.  There was initially no support\n   for\
    \ confidentiality (e.g., protection of credit card numbers), and\n   HTTP 1.0\
    \ had cleartext passwords in Basic auth.\n"
- title: A.1.3.  Discussion
  contents:
  - "A.1.3.  Discussion\n   HTML/HTTP addressed scenarios that no other protocol addressed.\n\
    \   Since deployment was easy, the protocol quickly took off.  Only after\n  \
    \ HTML/HTTP became successful did security become an issue.  HTML/\n   HTTP's\
    \ initial success occurred outside the IETF, although HTTP was\n   later standardized\
    \ and refined, addressing some of the limitations.\n"
- title: A.2.  IPv4 vs. IPX
  contents:
  - 'A.2.  IPv4 vs. IPX

    '
- title: A.2.1.  Initial Success Factors
  contents:
  - "A.2.1.  Initial Success Factors\n   Positive net value: There were initially\
    \ many competitors, including\n   IPX, AppleTalk, NetBEUI, OSI, and DECNet.  All\
    \ of them had positive\n   net value.  However, NetBEUI and DECNet were not designed\
    \ for\n   internetworking, which limited scalability and eventually stunted\n\
    \   their growth.\n   Incremental deployability: None of the competitors (including\
    \ IPv4)\n   had incremental deployability, although there were few enough nodes\n\
    \   that a flag day was manageable at the time.\n   Open code availability: IPv4\
    \ had open code from BSD, whereas IPX did\n   not.  Many argue that this was the\
    \ primary reason for IPv4's success.\n   Restriction-free: Yes for IPv4; No for\
    \ IPX.\n   Open specification availability: Yes for IPv4; No for IPX.\n   Open\
    \ maintenance process: Yes for IPv4; No for IPX.\n   Good technical design: The\
    \ initial design of IPv4 was fair, but\n   arguably IPX was initially better.\
    \  Improvements to IPv4 such as DHCP\n   came much later.\n"
- title: A.2.2.  Wild Success Factors
  contents:
  - "A.2.2.  Wild Success Factors\n   Extensible: Both IPv4 and IPX were extensible\
    \ to new transports, new\n   link types, and new applications.\n   No hard scalability\
    \ bound: Neither had a hard scalability bound close\n   to the design goals. \
    \ IPX arguably scaled higher before hitting any\n   bound.\n   Threats sufficiently\
    \ mitigated: Neither IPv4 nor IPX had threats\n   sufficiently mitigated.\n"
- title: A.2.3.  Discussion
  contents:
  - "A.2.3.  Discussion\n   Initially, it wasn't clear that IPv4 would win.  There\
    \ were also\n   other competitors, such as OSI.  However, the Advanced Research\n\
    \   Projects Agency (ARPA) funded IPv4 implementation on BSD and this\n   open\
    \ source initiative led to many others picking up IPv4, which\n   ultimately made\
    \ a difference in IPv4 succeeding rather than its\n   competitors.  Even though\
    \ IPX initially had a technically superior\n   design, IPv4 succeeded because\
    \ of its openness.\n"
- title: A.3.  SSH
  contents:
  - 'A.3.  SSH

    '
- title: A.3.1.  Initial Success Factors
  contents:
  - "A.3.1.  Initial Success Factors\n   Positive net value: SSH [RFC4251] provided\
    \ greater value than\n   competitors.  Kerberized telnet required deployment of\
    \ a Kerberos\n   server.  IPsec required a public key infrastructure (PKI) or\
    \ pre-\n   shared key authentication.  While the benefits were comparable, the\n\
    \   overall costs of the alternatives were much higher, and they\n   potentially\
    \ required deployment by entities that did not directly\n   receive benefit. \
    \ Hence, unlike the alternatives, the cost and\n   benefits of SSH were aligned.\n\
    \   Incremental deployability: Yes, SSH required SSH clients and servers,\n  \
    \ but did not require a key distribution center (KDC) or credential\n   pre-configuration.\n\
    \   Open code availability: Yes\n   Restriction-free: It is unclear whether SSH\
    \ was truly restriction-\n   free or not.\n   Open specification availability:\
    \ Not at first, but eventually.\n   Open maintenance process: Not at first, but\
    \ eventually.\n   Good technical design: SSHv1 was fair.  It had a number of technical\n\
    \   issues that were addressed in SSHv2.\n"
- title: A.3.2.  Wild Success Factors
  contents:
  - "A.3.2.  Wild Success Factors\n   Extensibility: Good.  SSH allowed adding new\
    \ authentication\n   mechanisms.\n   No hard scalability bound: SSH had excellent\
    \ scalability properties.\n   Threats sufficiently mitigated: No.  SSHv1 was vulnerable\
    \ to man-in-\n   the-middle attacks.\n"
- title: A.3.3.  Discussion
  contents:
  - "A.3.3.  Discussion\n   The \"leap of faith\" trust model (accept an untrusted\
    \ certificate the\n   first time you connect) was initially criticized by \"experts\"\
    , but\n   was popular with users.  It provided vastly more functionality and\n\
    \   didn't require a KDC and so was easy to deploy.  These factors made\n   SSH\
    \ a clear winner.\n"
- title: A.4.  Inter-Domain IP Multicast vs. Application Overlays
  contents:
  - "A.4.  Inter-Domain IP Multicast vs. Application Overlays\n   We now look at a\
    \ protocol that has not been successful (i.e., has not\n   met its original design\
    \ goals) after a long period of time has\n   passed.  Note that this discussion\
    \ applies only to inter-domain\n   multicast, not intra-domain or intra-subnet\
    \ multicast.\n"
- title: A.4.1.  Initial Success Factors
  contents:
  - "A.4.1.  Initial Success Factors\n   Positive net value: Unclear.  When many receivers\
    \ of the same stream\n   exist, the benefit relieves pain near the sender, and\
    \ in some cases\n   enables new scenarios.  However, when few receivers exist,\
    \ the\n   benefits are only incremental improvements when compared with\n   multiple\
    \ streams.  While there was positive value in bandwidth\n   savings, this was\
    \ offset by the lack of viable business models, and\n   lack of tools.  Hence,\
    \ the costs generally outweighed the benefits.\n   Furthermore, the costs are\
    \ not necessarily aligned with the benefits.\n   Inter-domain Multicast requires\
    \ changes by (at least) applications,\n   hosts, and routers.  However, it is\
    \ the applications that get the\n   primary benefit.  For application layer overlaps,\
    \ on the other hand,\n   only the applications need to change, and hence the cost\
    \ is lower\n   (and so are the benefits), and cost and benefits are aligned.\n\
    \   Incremental deployability: Poor for inter-domain multicast, since it\n   required\
    \ every router in the end-to-end path between a source and any\n   receiver to\
    \ support multicast.  This severely limited the\n   deployability of native multicast.\
    \  Initially, the strategy was to\n   use an overlay network (the Multicast Backbone\
    \ (MBone)) to work\n   around this.  However, the overlay network eventually suffered\
    \ from\n   performance problems at high fan-out points, and so adding another\n\
    \   node required more coordination with other organizations to find\n   someone\
    \ that was not overloaded and agreed to forward traffic on\n   behalf of the new\
    \ node.\n   Incremental deployability was good for application-layer overlays,\n\
    \   since only the applications need to change.  However, benefit only\n   exists\
    \ when the sender(s) and receivers both support the overlay\n   mechanism.\n \
    \  Open code availability: Yes.\n   Restriction-free: Yes.\n   Open specification\
    \ availability: Yes for inter-domain multicast.\n   Application-layer overlays\
    \ are not standardized, but left to each\n   application.\n   Open maintenance\
    \ process: Yes for inter-domain multicast.\n   Application-layer overlays are\
    \ not standardized, but left to each\n   application.\n   Good technical design:\
    \ This is debatable for inter-domain multicast.\n   In many respects, the technical\
    \ design is very efficient.  In other\n   respects, it results in per-connection\
    \ state in all intermediate\n   routers, which is questionable at best.  Application-layer\
    \ overlays\n   do not have the disadvantage, but receive a smaller benefit.\n"
- title: A.4.2.  Wild Success Factors
  contents:
  - "A.4.2.  Wild Success Factors\n   Extensible: Yes.\n   No hard scalability bound:\
    \ Inter-domain multicast had scalability\n   issues in terms of number of groups,\
    \ and in terms of number of\n   sources.  It scaled extremely well in terms of\
    \ number of receivers.\n   Application-layer overlays scale well in all dimensions,\
    \ except that\n   they do not scale as well as inter-domain multicast in terms\
    \ of\n   bandwidth since they still result in multiple streams over the same\n\
    \   link.\n   Threats sufficiently mitigated: No for inter-domain-multicast, since\n\
    \   untrusted hosts can create state in intermediate routers along an\n   entire\
    \ path.  Better for application-layer multicast.\n"
- title: A.4.3.  Discussion
  contents:
  - "A.4.3.  Discussion\n   Because the benefits weren't enough to outweigh the costs\
    \ for\n   entities (service providers and application developers) to use it,\n\
    \   instead the industry has tended to choose application overlays with\n   replicated\
    \ unicast.\n"
- title: A.5.  Wireless Application Protocol (WAP)
  contents:
  - "A.5.  Wireless Application Protocol (WAP)\n   The Wireless Application Protocol\
    \ (WAP) [WAP] is another protocol\n   that has not been successful, but is worth\
    \ comparing against other\n   protocols.\n"
- title: A.5.1.  Initial Success Factors
  contents:
  - "A.5.1.  Initial Success Factors\n   Positive net value: Compared to competitors\
    \ such as HTTP/TCP/IP, and\n   NTT DoCoMo's i-mode [IMODE], the relative value\
    \ of WAP is unclear.\n   It suffered from a poor experience, and a lack of tools.\n\
    \   Incremental deployability: Poor.  WAP required a WAP-to-HTTP proxy in\n  \
    \ the service provider and WAP support in phones; adding a new site\n   often\
    \ required participation by the service provider.\n   Open code availability:\
    \ No.\n   Restriction-free: No.  WAP has two patents with royalties required.\n\
    \   Open specification availability: No.\n   Open maintenance process: No, there\
    \ was a US$27000 entrance fee.\n   Good technical design: No, a common complaint\
    \ was that WAP was\n   underspecified and hence interoperability was difficult.\n"
- title: A.5.2.  Wild Success Factors
  contents:
  - "A.5.2.  Wild Success Factors\n   Extensible: Unknown.\n   No hard scalability\
    \ bound: Excellent.\n   Threats sufficiently mitigated: Unknown.\n"
- title: A.5.3.  Discussion
  contents:
  - "A.5.3.  Discussion\n   There were a number of close competitors to WAP.  Incremental\n\
    \   deployability was easier with the competitors, and the restrictions\n   on\
    \ code and specification access were significant factors that\n   hindered its\
    \ ability to succeed.\n"
- title: A.6.  Wired Equivalent Privacy (WEP)
  contents:
  - "A.6.  Wired Equivalent Privacy (WEP)\n   WEP is a part of the IEEE 802.11 standard\
    \ [IEEE-802.11], which\n   succeeded in being widely deployed in spite of its\
    \ faults.\n"
- title: A.6.1.  Initial Success Factors
  contents:
  - "A.6.1.  Initial Success Factors\n   Positive net value: Yes.  WEP provided security\
    \ when there was no\n   alternative, and it only required changes by entities\
    \ that got\n   benefit.\n   Incremental deployability: Yes.  Although one needed\
    \ to configure\n   both the access point and stations, each wireless network could\n\
    \   independently deploy WEP.\n   Open code availability: Essentially no, because\
    \ of Rivest Cipher 4\n   (RC4).\n   Restriction-free: No for RC4, but otherwise\
    \ yes.\n   Open specification availability: No for RC4, but otherwise yes.\n \
    \  Open maintenance process: Yes.\n   Good technical design: No, WEP had an inappropriate\
    \ use of RC4.\n"
- title: A.6.2.  Wild Success Factors
  contents:
  - "A.6.2.  Wild Success Factors\n   Extensible: IEEE 802.11 was extensible enough\
    \ to enable development\n   of replacements for WEP.  However, WEP itself was\
    \ not extensible.\n   No hard scalability bound: No.\n   Threats sufficiently\
    \ mitigated: No.\n"
- title: A.6.3.  Discussion
  contents:
  - "A.6.3.  Discussion\n   Even though WEP was not completely open and restriction\
    \ free, and did\n   not have a good technical design, it still became successful\
    \ because\n   it was incrementally deployable and it provided significant value\n\
    \   when there was no alternative.  This again shows that value and\n   deployability\
    \ are more significant success factors than technical\n   design or openness,\
    \ particularly when no alternatives exist.\n"
- title: A.7.  RADIUS vs. TACACS+
  contents:
  - 'A.7.  RADIUS vs. TACACS+

    '
- title: A.7.1.  Initial Success Factors
  contents:
  - "A.7.1.  Initial Success Factors\n   Positive net value: Yes for both, and it\
    \ only required changes by\n   entities that got benefit.\n   Incremental deployability:\
    \ Yes for both (just change clients and\n   servers).\n   Open code availability:\
    \ Yes for RADIUS; initially no for TACACS+, but\n   eventually yes.\n   Restriction-free:\
    \ Yes for RADIUS; unclear for TACACS+.\n   Open specification availability: Yes\
    \ for RADIUS; initially no for\n   TACACS+, but eventually yes.\n   Open maintenance\
    \ process: Initially no for RADIUS, but eventually\n   yes.  No for TACACS+.\n\
    \   Good technical design: Fair for RADIUS (there was no confidentiality\n   support,\
    \ and no authentication of Access Requests; it had home grown\n   ciphersuites\
    \ based on MD5).  Good for TACACS+.\n"
- title: A.7.2.  Wild Success Factors
  contents:
  - "A.7.2.  Wild Success Factors\n   Extensible: Yes for both.\n   No hard scalability\
    \ bound: Excellent for RADIUS (UDP-based); good for\n   TACACS+ (TCP-based).\n\
    \   Threats sufficiently mitigated: No for RADIUS (no support for\n   confidentiality,\
    \ existing implementations are vulnerable to\n   dictionary attacks, use of MD5\
    \ now vulnerable to collisions).\n   TACACS+ was better since it supported encryption.\n"
- title: A.7.3.  Discussion
  contents:
  - "A.7.3.  Discussion\n   Since both provided positive net value and were incrementally\n\
    \   deployable, those factors were not significant.  Even though TACACS+\n   had\
    \ a better technical design in most respects, and eventually\n   provided openly\
    \ available specifications and source code, the fact\n   that RADIUS had an open\
    \ maintenance process as well as openly\n   available specifications and source\
    \ code early on was the determining\n   factor.  This again shows that having\
    \ a better technical design is\n   less important in determining success than\
    \ other factors.\n"
- title: A.8.  Network Address Translators (NATs)
  contents:
  - "A.8.  Network Address Translators (NATs)\n   Although NAT is not, strictly speaking,\
    \ a \"protocol\" per se, but\n   rather a \"mechanism\" or \"algorithm\", we include\
    \ a case study since\n   there are many mechanisms that only require a single\
    \ entity to change\n   to reap the benefit (TCP congestion control algorithms\
    \ are another\n   example in this class), and it is important to include this\
    \ class of\n   mechanisms in the discussion since it exemplifies a key point in\
    \ the\n   discussion of incremental deployability.\n"
- title: A.8.1.  Initial Success Factors
  contents:
  - "A.8.1.  Initial Success Factors\n   Positive net value: Yes.  NATs provided the\
    \ ability to connect\n   multiple devices when only a limited number of addresses\
    \ were\n   available, and also provided a (limited) security boundary as a side\n\
    \   effect.  Hence, it both relieved pain involved with acquiring\n   multiple\
    \ addresses, as well as enabled new scenarios.  Finally, it\n   only required\
    \ deployment by the entity that got the benefit.\n   Incremental deployability:\
    \ Yes.  One could deploy a NAT without\n   coordinating with anyone else, including\
    \ a service provider.\n   Open code availability: Yes.\n   Restriction-free: Yes\
    \ at first (patents subsequently surfaced).\n   Open specification availability:\
    \ Yes.\n   Open maintenance process: Yes.\n   Good technical design: Fair.  NAT\
    \ functionality was underspecified,\n   leading to unpredictable behavior in general.\
    \  In addition, NATs\n   caused problems for certain classes of applications.\n"
- title: A.8.2.  Wild Success Factors
  contents:
  - "A.8.2.  Wild Success Factors\n   Extensible: Fair.  NATs supported some but not\
    \ all UDP and TCP\n   applications.  Adding application layer gateway functionality\
    \ was\n   difficult.\n   No hard scalability bound: Good.  There is a scalability\
    \ bound\n   (number of ports available), but none near the original design goals.\n\
    \   Threats sufficiently mitigated: Yes.\n"
- title: A.8.3.  Discussion
  contents:
  - "A.8.3.  Discussion\n   The absence of an unambiguous specification was not a\
    \ hindrance to\n   initial success since the test cases weren't well defined;\
    \ therefore,\n   each implementation could decide for itself what scenarios it\
    \ would\n   handle correctly.\n   Even with its technical problems, NAT succeeded\
    \ because of the value\n   it provided.  Again, this shows that the industry is\
    \ willing to\n   accept technically problematic solutions when there is no alternative\n\
    \   and the technology is easy to deploy.\n   Indeed, NAT became wildly successful\
    \ by being used for additional\n   purposes [RFC4864], and to a large scale including\
    \ multiple levels of\n   NATs in places.\n"
- title: Appendix B.  IAB Members at the Time of This Writing
  contents:
  - "Appendix B.  IAB Members at the Time of This Writing\n   Loa Andersson\n   Leslie\
    \ Daigle\n   Elwyn Davies\n   Kevin Fall\n   Russ Housley\n   Olaf Kolkman\n \
    \  Barry Leiba\n   Kurtis Lindqvist\n   Danny McPherson\n   David Oran\n   Eric\
    \ Rescorla\n   Dave Thaler\n   Lixia Zhang\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dave Thaler\n   IAB\n   One Microsoft Way\n   Redmond,\
    \ WA  98052\n   USA\n   Phone: +1 425 703 8835\n   EMail: dthaler@microsoft.com\n\
    \   Bernard Aboba\n   IAB\n   One Microsoft Way\n   Redmond, WA  98052\n   USA\n\
    \   Phone: +1 425 706 6605\n   EMail: bernarda@microsoft.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
