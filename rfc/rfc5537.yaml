- title: __initial_text__
  contents:
  - '                   Netnews Architecture and Protocols

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines the architecture of Netnews systems and\n\
    \   specifies the correct manipulation and interpretation of Netnews\n   articles\
    \ by software that originates, distributes, stores, and\n   displays them.  It\
    \ also specifies the requirements that must be met\n   by any protocol used to\
    \ transport and serve Netnews articles.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Basic Concepts .............................................3\n  \
    \    1.2. Scope ......................................................3\n    \
    \  1.3. Requirements Notation ......................................3\n      1.4.\
    \ Syntax Notation ............................................3\n      1.5. Definitions\
    \ ................................................4\n   2. Transport .......................................................5\n\
    \   3. Duties of Agents ................................................6\n  \
    \    3.1. General Principles .........................................6\n    \
    \  3.2. The Path Header Field ......................................7\n      \
    \     3.2.1. Constructing the Path Header Field ..................8\n        \
    \   3.2.2. Path Header Field Example ...........................9\n      3.3.\
    \ Article History and Duplicate Suppression .................10\n      3.4. Duties\
    \ of a Posting Agent .................................11\n           3.4.1. Proto-Articles\
    \ .....................................12\n           3.4.2. Multiple Injection\
    \ of Articles .....................13\n           3.4.3. Followups ..........................................14\n\
    \           3.4.4. Construction of the References Header Field ........15\n  \
    \    3.5. Duties of an Injecting Agent ..............................15\n    \
    \       3.5.1. Forwarding Messages to a Moderator .................18\n      3.6.\
    \ Duties of a Relaying Agent ................................19\n      3.7. Duties\
    \ of a Serving Agent .................................21\n      3.8. Duties of\
    \ a Reading Agent .................................22\n      3.9. Duties of a\
    \ Moderator .....................................22\n      3.10. Duties of a Gateway\
    \ ......................................24\n           3.10.1. Duties of an Outgoing\
    \ Gateway .....................25\n           3.10.2. Duties of an Incoming Gateway\
    \ .....................25\n           3.10.3. Original-Sender Header Field ......................27\n\
    \           3.10.4. Gateway Example ...................................28\n  \
    \ 4. Media Types ....................................................29\n    \
    \  4.1. application/news-transmission .............................30\n      4.2.\
    \ application/news-groupinfo ................................31\n      4.3. application/news-checkgroups\
    \ ..............................33\n   5. Control Messages ...............................................35\n\
    \      5.1. Authentication and Authorization ..........................35\n  \
    \    5.2. Group Control Messages ....................................36\n    \
    \       5.2.1. The newgroup Control Message .......................36\n      \
    \            5.2.1.1. newgroup Control Message Example ..........37\n        \
    \   5.2.2. The rmgroup Control Message ........................38\n          \
    \ 5.2.3. The checkgroups Control Message ....................38\n      5.3. The\
    \ cancel Control Message ................................40\n      5.4. The Supersedes\
    \ Header Field ...............................40\n      5.5. The ihave and sendme\
    \ Control Messages .....................41\n      5.6. Obsolete Control Messages\
    \ .................................42\n   6. Security Considerations ........................................42\n\
    \      6.1. Compromise of System Integrity ............................42\n  \
    \    6.2. Denial of Service .........................................44\n    \
    \  6.3. Leakage ...................................................44\n   7. IANA\
    \ Considerations ............................................45\n   8. References\
    \ .....................................................45\n      8.1. Normative\
    \ References ......................................45\n      8.2. Informative\
    \ References ....................................46\n   Appendix A.  Changes to\
    \ the Existing Protocols ....................47\n   Appendix B.  Acknowledgements\
    \ .....................................48\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Basic Concepts
  contents:
  - "1.1.  Basic Concepts\n   \"Netnews\" is a set of protocols for generating, storing,\
    \ and\n   retrieving news \"articles\" whose format is defined in [RFC5536], and\n\
    \   for exchanging them amongst a readership that is potentially widely\n   distributed.\
    \  It is organized around \"newsgroups\", with the\n   expectation that each reader\
    \ will be able to see all articles posted\n   to each newsgroup in which he participates.\
    \  These protocols most\n   commonly use a flooding algorithm that propagates\
    \ copies throughout a\n   network of participating servers.  Typically, only one\
    \ copy is stored\n   per server, and each server makes it available on demand\
    \ to readers\n   able to access that server.\n   \"Usenet\" is a particular worldwide,\
    \ publicly accessible network based\n   on the Netnews protocols.  It is only\
    \ one such possible network;\n   there are deployments of the Netnews protocols\
    \ other than Usenet\n   (such as ones internal to particular organizations). \
    \ This document\n   discusses the more general Netnews architecture and protocols.\n"
- title: 1.2.  Scope
  contents:
  - "1.2.  Scope\n   This document defines the architecture of Netnews systems and\n\
    \   specifies the correct manipulation and interpretation of Netnews\n   articles\
    \ by software that originates, distributes, stores, and\n   displays them.  It\
    \ addresses protocol issues that are independent of\n   transport protocols such\
    \ as the Network News Transfer Protocol (NNTP)\n   [RFC3977], and specifies the\
    \ requirements Netnews places on those\n   underlying transport protocols.  It\
    \ also specifies the handling of\n   control messages.\n   The format and syntax\
    \ of Netnews articles are specified in [RFC5536],\n   which should be read in\
    \ conjunction with this document.\n"
- title: 1.3.  Requirements Notation
  contents:
  - "1.3.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.4.  Syntax Notation
  contents:
  - "1.4.  Syntax Notation\n   Syntax defined in this document uses the Augmented\
    \ Backus-Naur Form\n   (ABNF) notation (including the Core Rules) defined in [RFC5234]\
    \ and\n   constructs defined in [RFC5536] and [RFC5322].\n   The ABNF rules defined\
    \ elsewhere and used in this document are:\n         CRLF                = <see\
    \ [RFC5234] Appendix B.1>\n         DIGIT               = <see [RFC5234] Appendix\
    \ B.1>\n         HTAB                = <see [RFC5234] Appendix B.1>\n        \
    \ SP                  = <see [RFC5234] Appendix B.1>\n         WSP           \
    \      = <see [RFC5234] Appendix B.1>\n         VCHAR               = <see [RFC5234]\
    \ Appendix B.1>\n         argument            = <see [RFC5536] Section 3.2.3>\n\
    \         article-locator     = <see [RFC5536] Section 3.2.14>\n         component\
    \           = <see [RFC5536] Section 3.1.4>\n         control-command     = <see\
    \ [RFC5536] Section 3.2.3>\n         diag-keyword        = <see [RFC5536] Section\
    \ 3.1.5>\n         diag-match          = <see [RFC5536] Section 3.1.5>\n     \
    \    diag-other          = <see [RFC5536] Section 3.1.5>\n         dist-name \
    \          = <see [RFC5536] Section 3.2.4>\n         msg-id              = <see\
    \ [RFC5536] Section 3.1.3>\n         newsgroup-name      = <see [RFC5536] Section\
    \ 3.1.4>\n         path-diagnostic     = <see [RFC5536] Section 3.1.5>\n     \
    \    path-identity       = <see [RFC5536] Section 3.1.5>\n         path-nodot\
    \          = <see [RFC5536] Section 3.1.5>\n         tail-entry          = <see\
    \ [RFC5536] Section 3.1.5>\n         verb                = <see [RFC5536] Section\
    \ 3.2.3>\n         display-name        = <see [RFC5322] Section 3.4>\n       \
    \  local-part          = <see [RFC5322] Section 3.4.1>\n         mailbox     \
    \        = <see [RFC5322] Section 3.4>\n"
- title: 1.5.  Definitions
  contents:
  - "1.5.  Definitions\n   Any term used in this document that is defined in Section\
    \ 1.5 of\n   [RFC5536] is used with the definition given there.  In addition,\
    \ the\n   following terms will be used:\n   A \"hierarchy\" is the set of all\
    \ newsgroups whose names share a first\n   <component> (as defined in Section\
    \ 3.1.4 of [RFC5536]).  A \"sub-\n   hierarchy\" is the set of all newsgroups\
    \ whose names share several\n   initial components.\n   A \"news server\" is further\
    \ distinguished into the roles of \"injecting\n   agent\", \"relaying agent\"\
    , and \"serving agent\".  An \"injecting agent\"\n   accepts a proto-article with\
    \ the goal of distributing it to relaying\n   and serving agents and hence to\
    \ readers.  A \"relaying agent\" accepts\n   articles from other relaying agents\
    \ or injecting agents and\n   distributes them to other relaying agents or serving\
    \ agents.  A\n   \"serving agent\" receives an article from a relaying agent or\n\
    \   injecting agent and makes it available to readers.\n   A \"user agent\" is\
    \ further distinguished into the roles of \"posting\n   agent\" and \"reading\
    \ agent\".  A \"posting agent\" is software that\n   assists in the preparation\
    \ of a proto-article and then passes it to\n   an injecting agent.  A \"reading\
    \ agent\" is software that retrieves\n   articles from a serving agent for presentation\
    \ to a reader.\n   \"Injecting\" an article is the processing of a proto-article\
    \ by an\n   injecting agent.  Normally, this action is done once and only once\n\
    \   for a given article.  \"Multiple injection\" is passing the same\n   article\
    \ to multiple injecting agents, either serially or in parallel,\n   by one or\
    \ several posting agents.\n   A \"gateway\" is software that receives news articles\
    \ and converts them\n   to messages of some other kind (such as [RFC5322] mail\
    \ messages),\n   receives messages of some other kind and converts them to news\n\
    \   articles, or conveys articles between two separate Netnews networks.\n"
- title: 2.  Transport
  contents:
  - "2.  Transport\n   The exact means used to transmit articles from one agent to\
    \ another\n   is not specified.  NNTP [RFC3977] is the most common transport\n\
    \   mechanism for Netnews networks.  Other methods in use include the\n   Unix-to-Unix\
    \ Copy Protocol [UUCP] (extensively used in the early days\n   of Usenet) and\
    \ physically delivered magnetic and optical media.  Any\n   mechanism may be used\
    \ in conjunction with this protocol provided that\n   it can meet the requirements\
    \ specified here.\n   Transports for Netnews articles MUST treat news articles\
    \ as\n   uninterpreted sequences of octets, excluding the values %d00 (which\n\
    \   may not occur in Netnews articles), %d13, and %d10 (which MUST only\n   appear\
    \ in Netnews articles as a pair in that order and which,\n   together, denote\
    \ a line separator).  These octets are the US-ASCII\n   [ASCII] characters NUL,\
    \ CR, and LF respectively.\n      NOTE: This corresponds to the range of octets\
    \ permitted in MIME\n      8bit data [RFC2045].  Transports for Netnews are not\
    \ required to\n      support transmission of MIME binary data.\n   In particular,\
    \ transports MUST convey all header fields unmodified\n   (including header fields\
    \ within message/rfc822 objects in article\n   bodies), even if they contain octets\
    \ in the range of 128 to 255.\n   Furthermore, transports for relaying and serving\
    \ agents MUST, and\n   transports for other agents SHOULD, convey lines even if\
    \ they exceed\n   998 characters in length, especially in article bodies.  (This\n\
    \   requirement is stricter than MIME 8bit data.)  These requirements\n   include\
    \ the transport paths between posting agents, injecting agents,\n   serving agents,\
    \ and reading agents.\n"
- title: 3.  Duties of Agents
  contents:
  - "3.  Duties of Agents\n   The following section specifies the duties of the agents\
    \ involved in\n   the creation, relaying, and serving of Netnews articles.  This\n\
    \   protocol is described by following the life of a typical Usenet\n   article:\
    \ it is prepared by a posting agent, given to an injecting\n   agent, transferred\
    \ through one or more relaying agents, accepted by a\n   serving agent, and finally\
    \ retrieved by a reading agent.  Articles\n   submitted to moderated groups go\
    \ through an additional process, which\n   is described separately (see Section\
    \ 3.5.1 and Step 7 of\n   Section 3.5).  Finally, the additional duties and requirements\
    \ of a\n   gateway are discussed.\n   At each step, each agent has a set of checks\
    \ and transformations of\n   the article that it is required to perform.  These\
    \ are described as\n   sequences of steps to be followed, but it should be understood\
    \ that\n   it is the effect of these sequences that is important, and\n   implementations\
    \ may use any method that produces the same effect.\n   Many news servers combine\
    \ the functions of injecting agent, relaying\n   agent, and serving agent in a\
    \ single software package.  For the\n   purposes of this specification, such combined\
    \ agents should\n   conceptually be treated as an injecting agent that sends articles\
    \ to\n   a serving agent and, optionally, to a relaying agent.  The\n   requirements\
    \ of all three agents MUST still be met when the news\n   server is performing\
    \ the functions of those agents.\n   On news servers that accept them, control\
    \ messages may have\n   additional effects than those described below.  Those\
    \ effects are\n   described in Section 5.\n"
- title: 3.1.  General Principles
  contents:
  - "3.1.  General Principles\n   There are two important principles that news implementors\
    \ and\n   administrators need to keep in mind.  The first is the well-known\n\
    \   Internet Robustness Principle:\n      Be liberal in what you accept, and conservative\
    \ in what you send.\n   As applied to Netnews, this primarily means that unwanted\
    \ or non-\n   compliant articles SHOULD be rejected as early as possible, but\
    \ once\n   they are in general circulation, relaying and serving agents may wish\n\
    \   to accept them where possible rather than lose information.  Posting\n   agents\
    \ and injecting agents SHOULD therefore be maximally strict in\n   their application\
    \ of both this protocol and [RFC5536], and reading\n   agents SHOULD be robust\
    \ in the presence of violations of the Netnews\n   article format where possible.\n\
    \   In the case of Netnews, there is an even more important principle,\n   derived\
    \ from a much older code of practice, the Hippocratic Oath (we\n   may thus call\
    \ this the Hippocratic Principle):\n      First, do no harm.\n   It is vital to\
    \ realize that decisions that might be merely suboptimal\n   in a smaller context\
    \ can become devastating mistakes when amplified\n   by the actions of thousands\
    \ of hosts within a few minutes.\n   No Netnews agent is ever required to accept\
    \ any article.  It is\n   common for injecting, relaying, and serving agents to\
    \ reject well-\n   formed articles for reasons of local policy (such as not wishing\
    \ to\n   carry a particular newsgroup or attempting to filter out unwanted\n \
    \  articles).  This document specifies how articles are to be treated if\n   they\
    \ are accepted and specifies some cases where they must be\n   rejected, but an\
    \ agent MAY always reject any article for other\n   reasons than those stated\
    \ here.\n   A primary goal of the Netnews protocol is to ensure that all readers\n\
    \   receiving a particular article (as uniquely identified by the content\n  \
    \ of its Message-ID header field) see the identical article, apart from\n   allowable\
    \ divergence in trace headers and local metadata.\n   Accordingly, agents (other\
    \ than moderators) MUST NOT modify articles\n   in ways other than described here.\
    \  Unacceptable articles MUST be\n   rejected rather than corrected.\n"
- title: 3.2.  The Path Header Field
  contents:
  - "3.2.  The Path Header Field\n   All news server components (injecting agents,\
    \ relaying agents, and\n   serving agents) MUST identify themselves, when processing\
    \ an article,\n   by prepending their <path-identity> (defined in Section 3.1.5\
    \ of\n   [RFC5536]) to the Path header field.  Injecting agents MUST also use\n\
    \   the same identity in Injection-Info header fields that they add, and\n   serving\
    \ and relaying agents SHOULD use the same identity in any Xref\n   header fields\
    \ they add.\n   The <path-identity> used by an agent may be chosen via one of\
    \ the\n   following methods (in decreasing order of preference):\n   1.  The fully\
    \ qualified domain name (FQDN) of the system on which the\n       agent is running.\n\
    \   2.  A fully qualified domain name (FQDN) within a domain affiliated\n    \
    \   with the administrators of the agent and guaranteed to be unique\n       by\
    \ the administrators of that domain.  For example, the\n       uniqueness of server.example.org\
    \ could be guaranteed by the\n       administrator of example.org even if there\
    \ is no DNS record for\n       server.example.org itself.\n   3.  Some other (arbitrary)\
    \ name in the form of a <path-nodot>,\n       believed to be unique and registered\
    \ at least with all the other\n       news servers to which that relaying agent\
    \ or injecting agent\n       sends articles.  This option SHOULD NOT be used unless\
    \ the\n       earlier options are unavailable or unless the name is of\n     \
    \  longstanding usage.\n   Some existing implementations treat <path-identity>\
    \ as case-\n   sensitive, some as case-insensitive.  The <path-identity> therefore\n\
    \   SHOULD be all lowercase and implementations SHOULD compare identities\n  \
    \ case-insensitively.\n"
- title: 3.2.1.  Constructing the Path Header Field
  contents:
  - "3.2.1.  Constructing the Path Header Field\n   If a relaying or serving agent\
    \ receives an article from an injecting\n   or serving agent that is part of the\
    \ same news server, it MAY leave\n   the Path header field of the article unchanged.\
    \  Otherwise, every\n   injecting, relaying, or serving agent that accepts an\
    \ article MUST\n   update the Path header field as follows.  Note that the Path\
    \ header\n   field content is constructed from right to left by prepending\n \
    \  elements.\n   1.  The agent MUST prepend \"!\" to the Path header field content.\n\
    \   2.  An injecting agent SHOULD prepend the <path-diagnostic>\n       \"!.POSTED\"\
    , optionally followed by \".\" and the FQDN or IP address\n       of the source,\
    \ to the Path header field content.\n   3.  A relaying or serving agent SHOULD\
    \ prepend a <path-diagnostic> to\n       the Path header field content, where\
    \ the <path-diagnostic> is\n       chosen as follows:\n       *  If the expected\
    \ <path-identity> of the source of the article\n          matches the leftmost\
    \ <path-identity> of the Path header\n          field's content, use \"!\" (<diag-match>),\
    \ resulting in two\n          consecutive \"!\"s.\n       *  If the expected <path-identity>\
    \ of the source of the article\n          does not match, use \"!.MISMATCH.\"\
    \ followed by the expected\n          <path-identity> of the source or its IP\
    \ address.\n       *  If the relaying or serving agent is not willing or able\
    \ to\n          check the <path-identity>, use \"!.SEEN.\" followed by the FQDN,\n\
    \          IP address, or expected <path-identity> of the source.\n       The\
    \ \"expected <path-identity> of the source of the article\" is a\n       <path-identity>\
    \ for the injecting or relaying agent that passed\n       the article to this\
    \ relaying or serving agent, determined by\n       properties of the connection\
    \ via which the article was received\n       (for example, an authentication identity\
    \ or a peer IP address).\n       Be aware that [RFC1036] did not include <path-diagnostic>.\n\
    \       Implementations that predate this specification will add only\n      \
    \ single \"!\" characters between <path-identity> strings.\n   4.  The agent MAY\
    \ then prepend to the Path header field content \"!\"\n       or \"!!\" followed\
    \ by an additional <path-identity> for itself\n       other than its primary one.\
    \  Using \"!!\", and thereby adding a\n       <diag-match> since the <path-identity>\
    \ clearly is verified, is\n       RECOMMENDED.  This step may be repeated any\
    \ number of times.\n       This is permitted for agents that have multiple <path-identity>s\n\
    \       (such as during a transition from one to another).  Each of these\n  \
    \     <path-identity>s MUST meet the requirements set out in\n       Section 3.2.\n\
    \   5.  Finally, the agent MUST prepend its primary <path-identity> to\n     \
    \  the Path header field content.  The primary <path-identity> is\n       the\
    \ <path-identity> it normally advertises to its peers for their\n       use in\
    \ generating <path-diagnostic>s as described above.\n   Any agent that modifies\
    \ the Path header field MAY fold it by\n   inserting FWS (folding white space)\
    \ immediately after any <path-\n   identity> or <diag-other> it added (see Section\
    \ 3.1.5 of [RFC5536]\n   for allowable locations for FWS).\n"
- title: 3.2.2.  Path Header Field Example
  contents:
  - "3.2.2.  Path Header Field Example\n   Here is an example of a Path header field\
    \ created by following the\n   rules for injecting and relaying agents.\n    \
    \   Path: foo.isp.example!.SEEN.isp.example!foo-news\n         !.MISMATCH.2001:DB8:0:0:8:800:200C:417A!bar.isp.example\n\
    \         !!old.site.example!barbaz!!baz.isp.example\n         !.POSTED.dialup123.baz.isp.example!not-for-mail\n\
    \   This article was injected by baz.isp.example as indicated by the\n   <diag-keyword>\
    \ \"POSTED\".  The injector has recorded that it received\n   the article from\
    \ dialup123.baz.isp.example. \"not-for-mail\" is a\n   common <tail-entry>.\n\
    \   The article was relayed to the relaying agent known, at least to\n   old.site.example,\
    \ as \"barbaz\".  That relaying agent confirmed to its\n   satisfaction that \"\
    baz.isp.example\" was an expected <path-identity>\n   for the source of the article\
    \ and therefore used <diag-match> (\"!\")\n   for its <path-diagnostic>.\n   barbaz\
    \ relayed it to old.site.example, which does not support <diag-\n   keyword> and\
    \ therefore used the old \"!\" delimiter.  This indicates\n   that the identity\
    \ of \"barbaz\" was not verified and may have been\n   forged.\n   old.site.example\
    \ relayed it to a news server using the <path-\n   identity> of bar.isp.example\
    \ and claiming (by using the \"!\" <path-\n   diagnostic>) to have verified that\
    \ it came from old.site.example.\n   bar.isp.example relayed it to foo-news, which,\
    \ not being convinced\n   that it truly came from bar.isp.example, inserted the\
    \ <diag-keyword>\n   \"MISMATCH\" and then stated that it received the article\
    \ from the IPv6\n   address [2001:DB8:0:0:8:800:200C:417A].  (This is not to say\
    \ that\n   bar.isp.example was not a correct <path-identity> for that source but\n\
    \   simply that the identity did not match the expectations of foo-news.)\n  \
    \ foo-news then passed the article to foo.isp.example, which declined\n   to validate\
    \ its <path-identity> and instead appended the <diag-\n   keyword> \"SEEN\" to\
    \ indicate it knows the source of the article as\n   isp.example.  This may be\
    \ either an expected <path-identity> or the\n   FQDN of the system from which\
    \ it received the article.  Presumably,\n   foo.isp.example is a serving agent\
    \ that then delivered the article to\n   a reading agent.\n   baz.isp.example,\
    \ bar.isp.example, and foo-news folded the Path header\n   field.\n"
- title: 3.3.  Article History and Duplicate Suppression
  contents:
  - "3.3.  Article History and Duplicate Suppression\n   Netnews normally uses a flood-fill\
    \ algorithm for propagation of\n   articles in which each news server offers the\
    \ articles it accepts to\n   multiple peers, and each news server may be offered\
    \ the same article\n   from multiple other news servers.  Accordingly, duplicate\
    \ suppression\n   is key; if a news server accepted every article it was offered,\
    \ it\n   may needlessly accept (and then potentially retransmit) dozens of\n \
    \  copies of every article.\n   Relaying and serving agents therefore MUST keep\
    \ a record of articles\n   they have already seen and use that record to reject\
    \ additional\n   offers of the same article.  This record is called the \"history\"\
    \ file\n   or database.\n   Each article is uniquely identified by its message\
    \ identifier, so a\n   relaying or serving agent could satisfy this requirement\
    \ by storing a\n   record of every message identifier that agent has ever seen.\
    \  Such a\n   history database would grow without bound, however, so it is common\n\
    \   and permitted to optimize based on the Injection-Date or Date header\n   field\
    \ of an article as follows.  (In the following discussion, the\n   \"date\" of\
    \ an article is defined to be the date represented by its\n   Injection-Date header\
    \ field, if present; otherwise, by its Date\n   header field.)\n   o  Agents MAY\
    \ select a cutoff interval and reject any article with a\n      date farther in\
    \ the past than that cutoff interval.  If this\n      interval is shorter than\
    \ the time it takes for an article to\n      propagate through the network, the\
    \ agent might reject an article\n      it had not yet seen, so it ought not to\
    \ be aggressively short.\n      For Usenet, for example, a cutoff interval of\
    \ no less than seven\n      days is conventional.\n   o  Agents that enforce such\
    \ a cutoff MAY then drop records of\n      articles that had dates older than\
    \ the cutoff from their history\n      databases.  If such an article were offered\
    \ to the agent again, it\n      would be rejected due to the cutoff date, so the\
    \ history record is\n      no longer required to suppress the duplicate.\n   o\
    \  Alternatively, agents MAY drop history records according to the\n      date\
    \ when the article was first seen by that agent rather than the\n      date of\
    \ the article.  In this case, the history retention interval\n      MUST be at\
    \ least 24 hours longer than the cutoff interval to allow\n      for articles\
    \ dated in the future.  This interval matches the\n      allowable error in the\
    \ date of the article (see Section 3.5).\n   These are just two implementation\
    \ strategies for article history,\n   albeit the most common ones.  Relaying and\
    \ serving agents are not\n   required to use these strategies, only to meet the\
    \ requirement of not\n   accepting an article more than once.  However, these\
    \ strategies are\n   safe and widely deployed, and implementors are encouraged\
    \ to use one\n   of them, especially if they do not have extensive experience\
    \ with\n   Netnews and the subtle effects of its flood-fill algorithm.\n"
- title: 3.4.  Duties of a Posting Agent
  contents:
  - "3.4.  Duties of a Posting Agent\n   A posting agent is the component of a user\
    \ agent that assists a\n   poster in creating a valid proto-article and forwarding\
    \ it to an\n   injecting agent.\n   Posting agents SHOULD ensure that proto-articles\
    \ they create are\n   valid according to [RFC5536] and any other applicable policies.\
    \  They\n   MUST NOT create any Injection-Info header field; this header field\n\
    \   may only be added by the injecting agent.\n   If the proto-article already\
    \ contains both Message-ID and Date header\n   fields, posting agents MAY add\
    \ an Injection-Date header field to that\n   proto-article immediately before\
    \ passing that proto-article to an\n   injection agent.  They SHOULD do so if\
    \ the Date header field\n   (representing the composition time of the proto-article)\
    \ is more than\n   a day in the past at the time of injection.  They MUST do so\
    \ if the\n   proto-article is being submitted to more than one injecting agent;\n\
    \   see Section 3.4.2.\n   The Injection-Date header field is new in this revision\
    \ of the\n   Netnews protocol and is designed to allow the Date header field to\n\
    \   hold the composition date (as recommended in Section 3.6.1 of\n   [RFC5322]),\
    \ even if the proto-article is not to be injected for some\n   time after its\
    \ composition.  However, note that all implementations\n   predating this specification\
    \ ignore the Injection-Date header field\n   and use the Date header field in\
    \ its stead for rejecting articles\n   older than their cutoff (see Section 3.3),\
    \ and injecting agents\n   predating this specification do not add an Injection-Date\
    \ header.\n   Articles with a Date header field substantially in the past will\n\
    \   still be rejected by implementations predating this specification,\n   regardless\
    \ of the Injection-Date header field, and hence may suffer\n   poorer propagation.\n\
    \   Contrary to [RFC5322], which implies that the mailbox or mailboxes in\n  \
    \ the From header field should be that of the poster or posters, a\n   poster\
    \ who does not, for whatever reason, wish to use his own mailbox\n   MAY use any\
    \ mailbox ending in the top-level domain \".invalid\"\n   [RFC2606].\n   Posting\
    \ agents meant for use by ordinary posters SHOULD reject any\n   attempt to post\
    \ an article that cancels or supersedes (via the\n   Supersedes header field)\
    \ another article of which the poster is not\n   the author or sender.\n"
- title: 3.4.1.  Proto-Articles
  contents:
  - "3.4.1.  Proto-Articles\n   A proto-article is an article in the format used by\
    \ a posting agent\n   when offering that article to an injecting agent.  It may\
    \ omit\n   certain header fields that can be better supplied by the injecting\n\
    \   agent and will not contain header fields that are added by the\n   injecting\
    \ agent.  A proto-article is only for transmission to an\n   injecting agent and\
    \ SHOULD NOT be transmitted to any other agent.\n   A proto-article has the same\
    \ format as a normal article except that\n   the Injection-Info and Xref header\
    \ fields MUST NOT be present, the\n   Path header field SHOULD NOT contain a \"\
    POSTED\" <diag-keyword>, and\n   any of the following mandatory header fields\
    \ MAY be omitted:\n   Message-ID, Date, and Path.  In all other respects, a proto-article\n\
    \   MUST be a valid Netnews article.  In particular, the header fields\n   that\
    \ may be omitted MUST NOT be present with invalid content.\n   If a posting agent\
    \ intends to offer the same proto-article to\n   multiple injecting agents, the\
    \ header fields Message-ID, Date, and\n   Injection-Date MUST be present and identical\
    \ in all copies of the\n   proto-article.  See Section 3.4.2.\n"
- title: 3.4.2.  Multiple Injection of Articles
  contents:
  - "3.4.2.  Multiple Injection of Articles\n   Under some circumstances (for example,\
    \ when posting to multiple,\n   supposedly disjoint, networks, when using injecting\
    \ agents with\n   spotty connectivity, or when desiring additional redundancy),\
    \ a\n   posting agent may wish to offer the same article to multiple\n   injecting\
    \ agents.  In this unusual case, the goal is not to create\n   multiple independent\
    \ articles but rather to inject the same article\n   at multiple points and let\
    \ the normal duplicate suppression facility\n   of Netnews (see Section 3.3) ensure\
    \ that any given agent accepts the\n   article only once, even if supposedly disjoint\
    \ networks have\n   unexpected links.\n   Whenever possible, multiple injection\
    \ SHOULD be done by offering the\n   same proto-article to multiple injecting\
    \ agents.  The posting agent\n   MUST supply the Message-ID, Date, and Injection-Date\
    \ header fields,\n   and the proto-article as offered to each injecting agent\
    \ MUST be\n   identical.\n   In some cases, offering the same proto-article to\
    \ all injecting\n   agents may not be possible (such as when gatewaying, after\
    \ injection,\n   articles found on one Netnews network to another supposedly\n\
    \   unconnected one).  In this case, the posting agent MUST remove any\n   Xref\
    \ header field and rename or remove any Injection-Info, Path, and\n   other trace\
    \ header fields before passing it to another injecting\n   agent.  (This converts\
    \ the article back into a proto-article.)  It\n   MUST retain unmodified the Message-ID,\
    \ Date, and Injection-Date\n   header fields.  It MUST NOT add an Injection-Date\
    \ header field if it\n   is missing from the existing article.\n      NOTE: Multiple\
    \ injection inherently risks duplicating articles.\n      Multiple injection after\
    \ injection, by converting an article back\n      to a proto-article and injecting\
    \ it again, additionally risks\n      loops, loss of trace information, unintended\
    \ repeat injection into\n      the same network, and other problems.  It should\
    \ be done with care\n      and only when there is no alternative.  The requirement\
    \ to retain\n      Message-ID, Date, and Injection-Date header fields minimizes\
    \ the\n      possibility of a loop and ensures that the newly injected article\n\
    \      is not treated as a new, separate article.\n   Multiple injection of an\
    \ article that lists one or more moderated\n   newsgroups in its Newsgroups header\
    \ field SHOULD only be done by a\n   moderator and MUST only be done after the\
    \ proto-article has been\n   approved for all moderated groups to which it is\
    \ to be posted and\n   after an Approved header field has been added (see Section\
    \ 3.9).\n   Multiple injection of an unapproved article intended for moderated\n\
    \   newsgroups will normally only result in the moderator receiving\n   multiple\
    \ copies, and if the newsgroup status is not consistent across\n   all injecting\
    \ agents, may result in duplication of the article or\n   other problems.\n"
- title: 3.4.3.  Followups
  contents:
  - "3.4.3.  Followups\n   A followup is an article that contains a response to the\
    \ contents of\n   an earlier article, its precursor.  In addition to its normal\
    \ duties,\n   a posting agent preparing a followup is also subject to the following\n\
    \   requirements.  Wherever in the following it is stated that, by\n   default,\
    \ a header field is said to be inherited from one of those\n   header fields in\
    \ the precursor, it means that its initial content is\n   to be a copy of the\
    \ content of that precursor header field (with\n   changes in folding permitted).\
    \  However, posters MAY then override\n   that default before posting.\n   Despite\
    \ the historic practice of some posting agents, the Keywords\n   header field\
    \ SHOULD NOT be inherited by default from the precursor\n   article.\n   1.  If\
    \ the Followup-To header field of the precursor article consists\n       of \"\
    poster\", the followup MUST NOT be posted by default but, by\n       default,\
    \ is to be emailed to the address given in the precursor's\n       Reply-To or\
    \ From header field following the rules for an email\n       reply [RFC5322].\
    \  This action MAY be overridden by the poster, in\n       which case the posting\
    \ agent should continue as if the\n       Followup-To header field in the precursor\
    \ did not exist.\n   2.  The Newsgroups header field SHOULD, by default, be inherited\
    \ from\n       the precursor's Followup-To header field if present; otherwise,\n\
    \       it is inherited from the precursor's Newsgroups header field.\n   3. \
    \ The Subject header field SHOULD, by default, be inherited from\n       that\
    \ of the precursor.  The case-sensitive string \"Re: \"\n       (including the\
    \ space after the colon) MAY be prepended to the\n       content of its Subject\
    \ header field unless it already begins with\n       that string.\n          NOTE:\
    \ Prepending \"Re: \" serves no protocol function and hence\n          is not\
    \ required, but it is widely expected and not doing so\n          would be surprising.\n\
    \   4.  The Distribution header field SHOULD, by default, be inherited\n     \
    \  from the precursor's Distribution header field, if present.\n   5.  The followup\
    \ MUST have a References header field referring to its\n       precursor, constructed\
    \ in accordance with Section 3.4.4.\n"
- title: 3.4.4.  Construction of the References Header Field
  contents:
  - "3.4.4.  Construction of the References Header Field\n   The following procedure\
    \ is to be used whenever some previous article\n   (the \"parent\") is to be referred\
    \ to in the References header field of\n   a new article, whether because the\
    \ new article is a followup and the\n   parent is its precursor or for some other\
    \ reason.\n   The content of the new article's References header field MUST be\n\
    \   formed from the content of the parent's References header field if\n   present,\
    \ followed by the content of the Message-ID header field of\n   the parent.  If\
    \ the parent had a References header, FWS as defined in\n   [RFC5536] MUST be\
    \ added between its content and the Message-ID header\n   field content.\n   If\
    \ the resulting References header field would, after unfolding,\n   exceed 998\
    \ characters in length (including its field name but not the\n   final CRLF),\
    \ it MUST be trimmed (and otherwise MAY be trimmed).\n   Trimming means removing\
    \ any number of message identifiers from its\n   content, except that the first\
    \ message identifier and the last two\n   MUST NOT be removed.\n   An essential\
    \ property of the References header field, guaranteed by\n   the above procedure\
    \ and REQUIRED to be maintained by any extensions\n   to this protocol, is that\
    \ an article MUST NOT precede one of its\n   parents.\n"
- title: 3.5.  Duties of an Injecting Agent
  contents:
  - "3.5.  Duties of an Injecting Agent\n   An injecting agent takes a proto-article\
    \ from a posting agent and\n   either forwards it to a moderator or passes it\
    \ to a relaying or\n   serving agent or agents.  An injecting agent bears the\
    \ primary\n   responsibility for ensuring that any article it injects conforms\
    \ with\n   the rules of the Netnews standards.  The administrator of an\n   injecting\
    \ agent is also expected to bear some responsibility towards\n   the rest of the\
    \ Netnews network to which it is connected for the\n   articles the injecting\
    \ agent accepts.\n   Injecting agents, when rejecting articles, are encouraged\
    \ to\n   communicate the reason for rejection to the posting agent by using\n\
    \   whatever facility is provided by the underlying transport.  The\n   injecting\
    \ agent is in a unique position to communicate the reason for\n   rejection; relaying\
    \ agents and serving agents normally have to reject\n   messages silently.  The\
    \ injecting agent therefore bears much of the\n   burden of diagnosing broken\
    \ posting agents or communicating policy\n   violations to posters.\n   An injecting\
    \ agent MUST have available a list (possibly empty) of\n   moderated groups for\
    \ which it accepts articles and the corresponding\n   submission addresses.  It\
    \ SHOULD have available a list of valid\n   newsgroups to catch articles not posted\
    \ to a valid newsgroup and\n   therefore likely to be silently discarded by relaying\
    \ and serving\n   agents.  Usually, an injecting agent is deployed in conjunction\
    \ with\n   a serving agent and maintains these lists based on control messages\n\
    \   received by the serving agent.\n   An injecting agent processes proto-articles\
    \ as follows:\n   1.   It SHOULD verify that the article is from a trusted source\
    \ (for\n        example, by relying on the authorization capability of the\n \
    \       underlying transport used to talk to the posting agent).\n   2.   It MUST\
    \ reject any proto-article that does not have the proper\n        mandatory header\
    \ fields for a proto-article, that has Injection-\n        Info or Xref header\
    \ fields, that has a Path header field\n        containing the \"POSTED\" <diag-keyword>,\
    \ or that is not\n        syntactically valid as defined by [RFC5536].  It SHOULD\
    \ reject\n        any proto-article that contains a header field deprecated for\n\
    \        Netnews (see, for example, [RFC3798]).  It MAY reject any proto-\n  \
    \      article that contains trace header fields (e.g., NNTP-Posting-\n      \
    \  Host) indicating that it was already injected by an injecting\n        agent\
    \ that did not add Injection-Info or Injection-Date.\n   3.   It SHOULD reject\
    \ any article whose Injection-Date or Date header\n        field is more than\
    \ 24 hours into the future (and MAY use a\n        margin less than 24 hours).\
    \  It SHOULD reject any article whose\n        Injection-Date header field is\
    \ too far in the past (older than\n        the cutoff interval of a relaying agent\
    \ that the injecting agent\n        is using, for example).  It SHOULD similarly\
    \ reject any article\n        whose Date header field is too far in the past,\
    \ since not all\n        news servers support Injection-Date and only the injecting\
    \ agent\n        can provide a useful error message to the posting agent.  In\n\
    \        either case, this interval SHOULD NOT be any shorter than 72\n      \
    \  hours into the past.\n   4.   It SHOULD reject any proto-article whose Newsgroups\
    \ header field\n        does not contain at least one <newsgroup-name> for a valid\n\
    \        group, or that contains a <newsgroup-name> reserved for specific\n  \
    \      purposes by Section 3.1.4 of [RFC5536] unless that specific\n        purpose\
    \ or local agreement applies to the proto-article being\n        processed.  Crossposting\
    \ to unknown newsgroups is not precluded\n        provided that at least one of\
    \ the newsgroups in the Newsgroups\n        header is valid.\n   5.   The Message-ID\
    \ and Date header fields with appropriate contents\n        MUST be added when\
    \ not present in the proto-article.\n   6.   The injecting agent MUST NOT alter\
    \ the body of the article in\n        any way (including any change of Content-Transfer-Encoding).\
    \  It\n        MAY add other header fields not already provided by the poster,\n\
    \        but injecting agents are encouraged to use the Injection-Info\n     \
    \   header for such information and to minimize the addition of\n        other\
    \ headers.  It SHOULD NOT alter, delete, or reorder any\n        existing header\
    \ field except the Path header field.  It MUST NOT\n        alter or delete any\
    \ existing Message-ID header field.\n   7.   If the Newsgroups header contains\
    \ one or more moderated groups\n        and the proto-article does not contain\
    \ an Approved header field,\n        the injecting agent MUST either forward it\
    \ to a moderator as\n        specified in Section 3.5.1 or, if that is not possible,\
    \ reject\n        it.  This forwarding MUST be done after adding the Message-ID\n\
    \        and Date headers if required, and before adding the Injection-\n    \
    \    Info and Injection-Date headers.\n   8.   Otherwise, a Path header field\
    \ with a <tail-entry> MUST be added\n        if not already present.\n   9.  \
    \ The injecting agent MUST then update the Path header field as\n        described\
    \ in Section 3.2.1.\n   10.  An Injection-Info header field SHOULD be added that\
    \ identifies\n        the source of the article and possibly other trace information\n\
    \        as described in Section 3.2.8 of [RFC5536].\n   11.  If the proto-article\
    \ already had an Injection-Date header field,\n        it MUST NOT be modified\
    \ or replaced.  If the proto-article had\n        both a Message-ID header field\
    \ and a Date header field, an\n        Injection-Date header field MUST NOT be\
    \ added, since the proto-\n        article may have been multiply injected by\
    \ a posting agent that\n        predates this standard.  Otherwise, the injecting\
    \ agent MUST add\n        an Injection-Date header field containing the current\
    \ date and\n        time.\n   12.  Finally, the injecting agent forwards the article\
    \ to one or more\n        relaying agents, and the injection process is complete.\n"
- title: 3.5.1.  Forwarding Messages to a Moderator
  contents:
  - "3.5.1.  Forwarding Messages to a Moderator\n   An injecting agent MUST forward\
    \ the proto-article to the moderator of\n   the leftmost moderated group listed\
    \ in the Newsgroups header field,\n   customarily via email.  There are two standard\
    \ ways in which it may\n   do this:\n   1.  The complete proto-article is encapsulated,\
    \ header fields and\n       all, within the email.  This SHOULD be done by creating\
    \ an email\n       message with a Content-Type of application/news-transmission\
    \ with\n       the usage parameter set to \"moderate\".  The body SHOULD NOT\n\
    \       contain any content other than the message.  This method has the\n   \
    \    advantage of removing any possible conflict between Netnews and\n       email\
    \ header fields and any changes to those fields during\n       transport through\
    \ email.\n   2.  The proto-article is sent as an email with the addition of any\n\
    \       header fields required for an email as defined in [RFC5322], and\n   \
    \    possibly with the addition of other header fields conventional in\n     \
    \  email, such as To and Received.  The existing Message-ID header\n       field\
    \ SHOULD be retained.\n   Although both of these methods have been used in the\
    \ past and the\n   first has clear technical advantages, the second is in more\
    \ common\n   use and many moderators are not prepared to deal with messages in\
    \ the\n   first format.  Accordingly, the first method SHOULD NOT be used\n  \
    \ unless the moderator to which it is being forwarded is known to be\n   able\
    \ to handle this method.\n      NOTE: Deriving the email address of the moderator\
    \ of a group is\n      outside the scope of this document.  It is worth mentioning,\n\
    \      however, that a common method is to use a forwarding service that\n   \
    \   handles submissions for many moderated groups.  For maximum\n      compatibility\
    \ with existing news servers, such forwarding services\n      generally form the\
    \ submission address for a moderated group by\n      replacing each \".\" in the\
    \ <newsgroup-name> with \"-\" and then using\n      that value as the <local-part>\
    \ of a <mailbox> formed by appending\n      a set domain.\n   Forwarding proto-articles\
    \ to moderators via email is the most general\n   method and the most common in\
    \ large Netnews networks such as Usenet,\n   but any means of forwarding the article\
    \ that preserves it without\n   injecting it MAY be used.  For example, if the\
    \ injecting agent has\n   access to a database used by the moderator to store\
    \ proto-articles\n   awaiting processing, it may place the proto-article directly\
    \ into\n   that database.  Such methods may be more appropriate for smaller\n\
    \   Netnews networks.\n"
- title: 3.6.  Duties of a Relaying Agent
  contents:
  - "3.6.  Duties of a Relaying Agent\n   A relaying agent accepts injected articles\
    \ from injecting and other\n   relaying agents and passes them on to relaying\
    \ or serving agents.  To\n   avoid bypass of injecting agent policies and forgery\
    \ of Path and\n   Injection-Info headers, relaying agents SHOULD accept articles\
    \ only\n   from trusted agents.\n   An article SHOULD NOT be relayed unless the\
    \ sending agent has been\n   configured to supply, and the receiving agent to\
    \ receive, at least\n   one of the <newsgroup-name>s in its Newsgroups header\
    \ field and at\n   least one of the <dist-name>s in its Distribution header field\
    \ (if\n   present).  Exceptionally, control messages creating or removing\n  \
    \ newsgroups (newgroup or rmgroup control messages, for example) SHOULD\n   be\
    \ relayed if the affected group appears in its Newsgroups header\n   field and\
    \ both the sending and receiving relaying agents are\n   configured to relay a\
    \ newsgroup of that name (whether or not such a\n   newsgroup exists).\n   In\
    \ order to avoid unnecessary relaying attempts, an article SHOULD\n   NOT be relayed\
    \ if the <path-identity> of the receiving agent (or some\n   known alias thereof)\
    \ appears as a <path-identity> (excluding within\n   the <tail-entry> or following\
    \ a \"POSTED\" <diag-keyword>) in its Path\n   header field.\n   A relaying agent\
    \ processes an article as follows:\n   1.  It MUST reject any article without\
    \ a Newsgroups header field or\n       Message-ID header field, or without either\
    \ an Injection-Date or\n       Date header field.\n   2.  It MUST examine the\
    \ Injection-Date header field or, if absent,\n       the Date header field, and\
    \ reject the article if that date is\n       more than 24 hours into the future.\
    \  It MAY reject articles with\n       dates in the future with a smaller margin\
    \ than 24 hours.\n   3.  It MUST reject any article that has already been accepted.\
    \  If it\n       implements one of the mechanisms described in Section 3.3, this\n\
    \       means that it MUST reject any article whose date falls outside\n     \
    \  the cutoff interval since it won't know whether or not such\n       articles\
    \ had been accepted previously.\n   4.  It SHOULD reject any article that does\
    \ not include all the\n       mandatory header fields.  It MAY reject any article\
    \ that contains\n       header fields that do not have valid contents.\n   5.\
    \  It SHOULD reject any article that matches an already-received\n       cancel\
    \ control message or the contents of the Supersedes header\n       field of an\
    \ accepted article, provided that the relaying agent\n       has chosen (on the\
    \ basis of local site policy) to honor that\n       cancel control message or\
    \ Supersedes header field.\n   6.  It MAY reject any article without an Approved\
    \ header field posted\n       to a newsgroup known to be moderated.  This practice\
    \ is strongly\n       encouraged, but the information necessary to do so is not\n\
    \       required to be maintained by a relaying agent.\n   7.  It MUST update\
    \ the Path header field as described in\n       Section 3.2.1.\n   8.  It MAY\
    \ delete any Xref header field already present.  It MAY add\n       a new Xref\
    \ header field for its own use (but recall that\n       [RFC5536] permits at most\
    \ one such header field).\n   9.  Finally, it passes the article on to other relaying\
    \ and serving\n       agents to which it is configured to send articles.\n   Relaying\
    \ agents SHOULD, where possible in the underlying transport,\n   inform the agent\
    \ that passed the article to the relaying agent if the\n   article was rejected.\
    \  Relaying agents MUST NOT inform any other\n   external entity of the rejection\
    \ of an article unless that external\n   entity has explicitly requested that\
    \ it be informed of such errors.\n   Relaying agents MUST NOT alter, delete, or\
    \ rearrange any part of an\n   article except for the Path and Xref header fields.\
    \  They MUST NOT\n   modify the body of articles in any way.  If an article is\
    \ not\n   acceptable as is, the article MUST be rejected rather than modified.\n"
- title: 3.7.  Duties of a Serving Agent
  contents:
  - "3.7.  Duties of a Serving Agent\n   A serving agent accepts articles from a relaying\
    \ agent or injecting\n   agent, stores them, and makes them available to reading\
    \ agents.\n   Articles are normally indexed by newsgroup and <article-locator>\n\
    \   (Section 3.2.14 of [RFC5536]), usually in the form of a decimal\n   number.\n\
    \   If the serving agent stores articles by newsgroup, control messages\n   SHOULD\
    \ NOT be stored in the newsgroups listed in the control\n   message's Newsgroups\
    \ header field.  Instead, they SHOULD be stored in\n   a newsgroup in the hierarchy\
    \ \"control\", which is reserved for this\n   purpose.  Conventionally, control\
    \ messages are stored in newsgroups\n   named for the type of control message\
    \ (such as \"control.cancel\" for\n   cancel control messages).\n   A serving\
    \ agent MUST have available a list (possibly empty) of\n   moderated groups for\
    \ which it accepts articles so that it can reject\n   unapproved articles posted\
    \ to moderated groups.  Frequently, a\n   serving agent is deployed in combination\
    \ with an injecting agent and\n   can use the same list as the injecting agent.\n\
    \   A serving agent processes articles as follows:\n   1.  It MUST reject any\
    \ article that does not include all the\n       mandatory header fields or any\
    \ article that contains header\n       fields that do not have valid contents.\n\
    \   2.  It MUST examine the Injection-Date header field or, if absent,\n     \
    \  the Date header field, and reject the article if that date is\n       more\
    \ than 24 hours into the future.  It MAY reject articles with\n       dates in\
    \ the future with a smaller margin than 24 hours.\n   3.  It MUST reject any article\
    \ that has already been accepted.  If it\n       implements one of the mechanisms\
    \ described in Section 3.3, this\n       means that it MUST reject any article\
    \ whose date falls outside\n       the cutoff interval since it won't know whether\
    \ or not such\n       articles had been accepted previously.\n   4.  It SHOULD\
    \ reject any article that matches an already-received and\n       honored cancel\
    \ message or Supersedes header field, following the\n       same rules as a relaying\
    \ agent (Section 3.6).\n   5.  It MUST reject any article without an Approved\
    \ header field\n       posted to any newsgroup listed as moderated.\n   6.  It\
    \ MUST update the Path header field as described in\n       Section 3.2.1.\n \
    \  7.  It MUST remove any Xref header field from each article (except\n      \
    \ when specially configured to preserve the <article-locator>s set\n       by\
    \ the sending site).  It then MAY (and usually will) add a new\n       Xref header\
    \ field (but recall that [RFC5536] permits at most one\n       such header field).\n\
    \   8.  Finally, it stores the article and makes it available for reading\n  \
    \     agents.\n   Serving agents MUST NOT create new newsgroups simply because\
    \ an\n   unrecognized <newsgroup-name> occurs in a Newsgroups header field.\n\
    \   Newsgroups are normally created via control messages (Section 5.2.1).\n  \
    \ Serving agents MUST NOT alter, delete, or rearrange any part of an\n   article\
    \ except for the Path and Xref header fields.  They MUST NOT\n   modify the body\
    \ of the articles in any way.  If an article is not\n   acceptable as is, the\
    \ article MUST be rejected rather than modified.\n"
- title: 3.8.  Duties of a Reading Agent
  contents:
  - "3.8.  Duties of a Reading Agent\n   Since a reading agent is only a passive participant\
    \ in a Netnews\n   network, there are no specific protocol requirements placed\
    \ on it.\n   See [USEAGE] for best-practice recommendations.\n"
- title: 3.9.  Duties of a Moderator
  contents:
  - "3.9.  Duties of a Moderator\n   A moderator receives news articles, customarily\
    \ by email, decides\n   whether to approve them and, if so, either passes them\
    \ to an\n   injecting agent or forwards them to further moderators.\n   Articles\
    \ are normally received by the moderator in email, either\n   encapsulated as\
    \ an object of Content-Type application/\n   news-transmission (or possibly encapsulated\
    \ but without an explicit\n   Content-Type header field) or else directly as an\
    \ email already\n   containing all the header fields appropriate for a Netnews\
    \ article\n   (see Section 3.5.1).  Moderators who may receive articles via email\n\
    \   SHOULD be prepared to accept articles in either format.\n   There are no protocol\
    \ restrictions on what criteria are used for\n   accepting or rejecting messages\
    \ or on what modifications a moderator\n   may make to a message (both header\
    \ fields and body) before injecting\n   it.  Recommended best practice, however,\
    \ is to make the minimal\n   required changes.  Moderators need to be aware that\
    \ modifications\n   made to articles may invalidate signatures created by the\
    \ poster or\n   previous moderators.  See [USEAGE] for further best-practice\n\
    \   recommendations.\n   Moderators process articles as follows:\n   1.  They\
    \ decide whether to approve or reject a proto-article and, if\n       approved,\
    \ prepare the proto-article for injection.  If the proto-\n       article was\
    \ received as an unencapsulated email message, this\n       will require converting\
    \ it back to a valid Netnews proto-article.\n       If the article is rejected,\
    \ it is normally rejected for all\n       newsgroups to which it was posted and\
    \ nothing further is done.\n       If it is approved, the moderator proceeds with\
    \ the following\n       steps.\n   2.  If the Newsgroups header field contains\
    \ further moderated\n       newsgroups for which approval has not already been\
    \ given, they\n       may either reach some agreement with the other moderators\
    \ on the\n       disposition of the article or, more generally, add an indication\n\
    \       (identifying both the moderator and the name of the newsgroup)\n     \
    \  that they approve the article and then forward it to the\n       moderator\
    \ of the leftmost unapproved newsgroup.  This forwarding\n       SHOULD be done\
    \ following the procedure in Section 3.5.1.  It MAY\n       be done by rotating\
    \ the <newsgroup-name>s in the Newsgroups\n       header field so that the leftmost\
    \ unapproved newsgroup is the\n       leftmost moderated newsgroup in that field\
    \ and then posting it,\n       letting the injecting agent do the forwarding.\
    \  However, when\n       using this mechanism, they MUST first ensure that the\
    \ article\n       contains no Approved header field.\n   3.  If the Newsgroups\
    \ header field contains no further unapproved\n       moderated groups, they add\
    \ an Approved header field (see Section\n       3.2.1 of [RFC5536]) identifying\
    \ the moderator and, insofar as is\n       possible, all the other moderators\
    \ who have approved the article.\n       The moderator who takes this step assumes\
    \ responsibility for\n       ensuring that the article was approved by the moderators\
    \ of all\n       moderated newsgroups to which it was posted.\n   4.  Moderators\
    \ are encouraged to retain the Message-ID header field\n       unless it is invalid\
    \ or the article was significantly changed\n       from its original form.  Moderators\
    \ are also encouraged to retain\n       the Date header field unless it appears\
    \ to be stale (72 hours or\n       more in the past) for reasons understood by\
    \ the moderator (such\n       as delays in the moderation process), in which case\
    \ they MAY\n       substitute the current date.  Any Injection-Date, Injection-Info,\n\
    \       or Xref header fields already present MUST be removed.\n   5.  Any Path\
    \ header field MUST either be removed or truncated to only\n       those entries\
    \ following its \"POSTED\" <diag-keyword>, if any.\n   6.  The moderator then\
    \ passes the article to an injecting agent,\n       having first observed all\
    \ the duties of a posting agent.\n"
- title: 3.10.  Duties of a Gateway
  contents:
  - "3.10.  Duties of a Gateway\n   A gateway transforms an article into the native\
    \ message format of\n   another medium, or translates the messages of another\
    \ medium into\n   news articles, or transforms articles into proto-articles for\n\
    \   injection into a separate Netnews network.  Encapsulation of a news\n   article\
    \ into a message of MIME type application/news-transmission, or\n   the subsequent\
    \ undoing of that encapsulation, is not gatewaying since\n   it involves no transformation\
    \ of the article.\n   There are two basic types of gateway, the outgoing gateway\
    \ that\n   transforms a news article into a different type of message, and the\n\
    \   incoming gateway that transforms a message from another network into\n   a\
    \ news proto-article and injects it into a Netnews network.  These\n   are handled\
    \ separately below.\n   Transformation of an article into another medium stands\
    \ a very high\n   chance of discarding or interfering with the protection inherent\
    \ in\n   the news system against duplicate articles.  The most common problem\n\
    \   caused by gateways is loops that repeatedly reinject previously\n   posted\
    \ articles.  To prevent this, a gateway MUST take precautions\n   against loops,\
    \ as detailed below.\n   The transformations applied to the message SHOULD be\
    \ as minimal as\n   possible while still accomplishing the gatewaying.  Every\
    \ change made\n   by a gateway potentially breaks a property of one of the media\
    \ or\n   loses information, and therefore only those transformations made\n  \
    \ necessary by the differences between the media should be applied.\n   If bidirectional\
    \ gatewaying (both an incoming and an outgoing\n   gateway) is being set up between\
    \ Netnews and some other medium, the\n   incoming and outgoing gateways SHOULD\
    \ be coordinated to avoid\n   unintended reinjection of gated articles.  Circular\
    \ gatewaying\n   (gatewaying a message into another medium and then back into\
    \ Netnews)\n   SHOULD NOT be done; encapsulation of the article SHOULD be used\n\
    \   instead where this is necessary.\n   Safe bidirectional gatewaying between\
    \ a mailing list and a newsgroup\n   is far easier if the newsgroup is moderated.\
    \  Posts to the moderated\n   group and submissions to the mailing list can then\
    \ go through a\n   single point that does the necessary gatewaying and then sends\
    \ the\n   message out to both the newsgroup and the mailing list at the same\n\
    \   time, eliminating most of the possibility of loops.  Bidirectional\n   gatewaying\
    \ between a mailing list and an unmoderated newsgroup, in\n   contrast, is difficult\
    \ to do correctly and is far more fragile.\n   Newsgroups intended to be bidirectionally\
    \ gated to a mailing list\n   SHOULD therefore be moderated where possible, even\
    \ if the moderator\n   is a simple gateway and injecting agent that correctly\
    \ handles\n   crossposting to other moderated groups and otherwise passes all\n\
    \   traffic.\n"
- title: 3.10.1.  Duties of an Outgoing Gateway
  contents:
  - "3.10.1.  Duties of an Outgoing Gateway\n   From the perspective of Netnews, an\
    \ outgoing gateway is just a\n   special type of reading agent.  The exact nature\
    \ of what the outgoing\n   gateway will need to do to articles depends on the\
    \ medium to which\n   the articles are being gated.  Because it raises the danger\
    \ of loops\n   due to the possibility of one or more corresponding incoming gateways\n\
    \   back from that medium to Netnews, the operation of the outgoing\n   gateway\
    \ is subject to additional constraints.\n   The following practices are encouraged\
    \ for all outgoing gateways,\n   regardless of whether there is known to be a\
    \ related incoming\n   gateway, both as precautionary measures and as guidelines\
    \ to quality\n   of implementation:\n   1.  The message identifier of the news\
    \ article should be preserved if\n       at all possible, preferably as or within\
    \ the corresponding unique\n       identifier of the other medium.  However, if\
    \ it is not preserved\n       in this way, then at least it should be preserved\
    \ as a comment in\n       the message.  This helps greatly with preventing loops.\n\
    \   2.  The Date and Injection-Date of the news article should also be\n     \
    \  preserved if possible, for similar reasons.\n   3.  The message should be tagged\
    \ in some way so as to prevent its\n       reinjection into Netnews.  This may\
    \ be impossible to do without\n       knowledge of potential incoming gateways,\
    \ but it is better to try\n       to provide some indication even if not successful;\
    \ at the least,\n       a human-readable indication that the article should not\
    \ be gated\n       back to Netnews can help locate a human problem.\n   4.  Netnews\
    \ control messages should not be gated to another medium\n       unless they would\
    \ somehow be meaningful in that medium.\n"
- title: 3.10.2.  Duties of an Incoming Gateway
  contents:
  - "3.10.2.  Duties of an Incoming Gateway\n   The incoming gateway has the responsibility\
    \ of ensuring that all of\n   the requirements of this protocol are met by the\
    \ articles that it\n   forms.  In addition to its special duties as a gateway,\
    \ it bears all\n   of the duties and responsibilities of a posting agent, and\
    \ it has the\n   same responsibility of a relaying agent to reject articles that\
    \ it\n   has already gatewayed.\n   An incoming gateway MUST NOT gate the same\
    \ message twice.  It may not\n   be possible to ensure this in the face of mangling\
    \ or modification of\n   the message, but at the very least a gateway, when given\
    \ a copy of a\n   message that it has already gated and that is identical except\
    \ for\n   trace header fields (like Received in Email or Path in Netnews), MUST\n\
    \   NOT gate the message again.  An incoming gateway SHOULD take\n   precautions\
    \ against having this rule bypassed by modifications of the\n   message that can\
    \ be anticipated.\n   News articles prepared by gateways MUST be valid news proto-articles\n\
    \   (see Section 3.4.1).  This often requires the gateway to synthesize a\n  \
    \ conforming article from non-conforming input.  The gateway MUST then\n   pass\
    \ the article to an injecting agent, not directly to a relaying\n   agent.\n \
    \  Incoming gateways MUST NOT pass control messages (articles containing\n   a\
    \ Control or Supersedes header field) without removing or renaming\n   that header\
    \ field.  Gateways MAY, however, generate cancel control\n   messages for messages\
    \ they have gatewayed.  If a gateway receives a\n   message that it can determine\
    \ is a valid equivalent of a cancel\n   control message in the medium it is gatewaying,\
    \ it SHOULD discard\n   that message without gatewaying it, generate a corresponding\
    \ cancel\n   control message of its own, and inject that cancel control message.\n\
    \      NOTE: It is not unheard of for mail-to-news gateways to be used to\n  \
    \    post control messages, but encapsulation should be used for these\n     \
    \ cases instead.  Gateways by their very nature are particularly\n      prone\
    \ to loops.  Spews of normal articles are bad enough; spews of\n      control\
    \ messages with special significance to the news system,\n      possibly resulting\
    \ in high processing load or even in emails being\n      sent for every message\
    \ received, are catastrophic.  It is far\n      preferable to construct a system\
    \ specifically for posting control\n      messages that can do appropriate consistency\
    \ checks and\n      authentication of the originator of the message.\n   If there\
    \ is a message identifier that fills a role similar to that of\n   the Message-ID\
    \ header field in news, it SHOULD be used in the\n   formation of the message\
    \ identifier of the news article, perhaps with\n   transformations required to\
    \ meet the uniqueness requirement of\n   Netnews and with the removal of any comments\
    \ so as to comply with the\n   syntax in Section 3.1.3 of [RFC5536].  Such transformations\
    \ SHOULD be\n   designed so that two messages with the same identifier generate\
    \ the\n   same Message-ID header field.\n      NOTE: Message identifiers play\
    \ a central role in the prevention of\n      duplicates, and their correct use\
    \ by gateways will do much to\n      prevent loops.  Netnews does, however, require\
    \ that message\n      identifiers be unique, and therefore message identifiers\
    \ from\n      other media may not be suitable for use without modification.  A\n\
    \      balance must be struck by the gateway between preserving\n      information\
    \ used to prevent loops and generating unique message\n      identifiers.\n  \
    \ Exceptionally, if there are multiple incoming gateways for a\n   particular\
    \ set of messages, each to a different newsgroup(s), each\n   one SHOULD generate\
    \ a message identifier unique to that gateway.\n   Each incoming gateway nonetheless\
    \ MUST ensure that it does not gate\n   the same message twice.\n      NOTE: Consider\
    \ the example of two gateways of a given mailing list\n      into two separate\
    \ Usenet newsgroups, both of which preserve the\n      email message identifier.\
    \  Each newsgroup may then receive a\n      portion of the messages (different\
    \ sites seeing different\n      portions).  In these cases, where there is no\
    \ one \"official\"\n      gateway, some other method of generating message identifiers\
    \ has\n      to be used to avoid collisions.  It would obviously be preferable\n\
    \      for there to be only one gateway that crossposts, but this may not\n  \
    \    be possible to coordinate.\n   If no date information is available, the gateway\
    \ MAY supply a Date\n   header field with the gateway's current date.  If only\
    \ partial\n   information is available (such as date but not time), this SHOULD\
    \ be\n   fleshed out to a full Date by adding default values rather than by\n\
    \   discarding this information.  Only in very exceptional circumstances\n   should\
    \ Date information be discarded, as it plays an important role\n   in preventing\
    \ reinjection of old messages.\n   An incoming gateway MUST add a Sender header\
    \ field to the news\n   article it forms by containing the <mailbox> of the administrator\
    \ of\n   the gateway.  Problems with the gateway may be reported to this\n   <mailbox>.\
    \  The <display-name> portion of this <mailbox> SHOULD\n   indicate that the entity\
    \ responsible for injection of the message is\n   a gateway.  If the original\
    \ message already had a Sender header\n   field, it SHOULD be renamed to Original-Sender\
    \ so that its contents\n   can be preserved.  See Section 3.10.3 for the specification\
    \ of that\n   header field.\n"
- title: 3.10.3.  Original-Sender Header Field
  contents:
  - "3.10.3.  Original-Sender Header Field\n   The Original-Sender header field holds\
    \ the content of a Sender header\n   field in an original message received by\
    \ an incoming gateway,\n   preserving it while the incoming gateway adds its own\
    \ Sender header\n   field.  The content syntax makes use of syntax defined in\
    \ [RFC5536]\n   and [RFC5322].\n         header              =/ Original-Sender-header\n\
    \         Original-Sender-header\n                             = \"Original-Sender\"\
    \ \":\" SP\n                                  Original-Sender-content\n      \
    \   Original-Sender-content\n                             = mailbox\n   The Permanent\
    \ Message Header Field Repository entry for this header\n   field is:\n      Header\
    \ field name:          Original-Sender\n      Applicable protocol:        Netnews\n\
    \      Status:                     standard\n      Author/Change controller: \
    \  IETF\n      Specification document(s):  RFC 5537\n"
- title: 3.10.4.  Gateway Example
  contents:
  - "3.10.4.  Gateway Example\n   To illustrate the type of precautions that should\
    \ be taken against\n   loops, here is an example of the measures taken by one\
    \ particular\n   combination of mail-to-news and news-to-mail gateways designed\
    \ to\n   handle bidirectional gatewaying between mailing lists and unmoderated\n\
    \   groups:\n   1.  The news-to-mail gateway preserves the message identifier\
    \ of the\n       news article in the generated email message.  The mail-to-news\n\
    \       gateway likewise preserves the email message identifier, provided\n  \
    \     that it is syntactically valid for Netnews.  This allows the news\n    \
    \   system's built-in suppression of duplicates to serve as the first\n      \
    \ line of defense against loops.\n   2.  The news-to-mail gateway adds an X-*\
    \ header field to all messages\n       it generates.  The mail-to-news gateway\
    \ discards any incoming\n       messages containing this header field.  This is\
    \ robust against\n       mailing list managers that replace the message identifier\
    \ and\n       against any number of email hops, provided that the other message\n\
    \       header fields are preserved.\n   3.  The mail-to-news gateway prepends\
    \ the host name from which it\n       received the email message to the content\
    \ of the Path header\n       field.  The news-to-mail gateway refuses to gateway\
    \ any message\n       that contains the list server name in its Path header field\n\
    \       (including in the tail section).  This is robust against any\n       amount\
    \ of munging of the message header fields by the mailing\n       list, provided\
    \ that the email only goes through one hop.\n   4.  The mail-to-news gateway is\
    \ designed never to generate bounces to\n       the envelope sender.  Instead,\
    \ articles that are rejected by the\n       news server (for reasons not warranting\
    \ silent discarding of the\n       message) result in a bounce message sent to\
    \ an errors address\n       that is known not to forward to any mailing lists.\
    \  In this way,\n       they can be handled by the news administrators.\n   These\
    \ precautions have proven effective in practice at preventing\n   loops for this\
    \ particular application (bidirectional gatewaying\n   between mailing lists and\
    \ locally distributed newsgroups where both\n   gateways can be designed together).\
    \  General gatewaying to world-wide\n   newsgroups poses additional difficulties;\
    \ one must be very wary of\n   strange configurations, such as a newsgroup gated\
    \ to a mailing list\n   that is in turn gated to a different newsgroup.\n"
- title: 4.  Media Types
  contents:
  - "4.  Media Types\n   This document defines several media types, which have been\
    \ registered\n   with IANA as provided for in [RFC4288].\n   The media type message/news,\
    \ as previously registered with IANA, is\n   hereby declared obsolete.  The intent\
    \ of this media type was to\n   define a standard way of transmitting news articles\
    \ via mail for\n   human reading.  However, it was never widely implemented, and\
    \ its\n   default treatment as application/octet-stream by agents that did not\n\
    \   recognize it was counter-productive.  The media type message/rfc822\n   (defined\
    \ in Section 5.2.1 of [RFC2046]) SHOULD be used in its place.\n   The updated\
    \ MIME media type definition of message/news is:\n     MIME type name:       \
    \    message\n     MIME subtype name:        news\n     Required parameters: \
    \     none\n     Optional parameters:      none\n     Encoding considerations:\
    \  same as message/rfc822\n     Security considerations:  News articles may constitute\
    \ \"control\n                               messages\", which can have effects\
    \ on a\n                               host's news system beyond just addition\n\
    \                               of information.  Since control messages\n    \
    \                           may occur in normal news flow, most hosts\n      \
    \                         are suitably defended against undesired\n          \
    \                     effects already, but transmission of news\n            \
    \                   articles via mail may bypass\n                           \
    \    firewall-type defenses.  Reading a news\n                               article\
    \ transmitted by mail involves no\n                               hazards beyond\
    \ those of mail, but\n                               submitting it to news software\
    \ for\n                               processing should be done with care.\n \
    \    Interoperability considerations:\n                               Rarely used,\
    \ and therefore often\n                               handled as application/octet-stream.\n\
    \                               Disposition should by default be inline.\n   \
    \  Published specification:  RFC 5537\n     Applications that use this media type:\n\
    \                               Some old mail and news user agents.\n     Intended\
    \ usage:           OBSOLETE\n     Author:                   Henry Spencer\n  \
    \   Change controller:        IETF\n"
- title: 4.1.  application/news-transmission
  contents:
  - "4.1.  application/news-transmission\n   The media type application/news-transmission\
    \ is intended for the\n   encapsulation of complete news articles where the intention\
    \ is that\n   the recipient should then inject them into Netnews.  This application\n\
    \   type provides one of the methods for mailing articles to moderators\n   (see\
    \ Section 3.5.1) and may be used to convey messages to an\n   injecting agent.\
    \  This encapsulation removes the need to transform an\n   email message into\
    \ a Netnews proto-article and provides a way to send\n   a Netnews article using\
    \ MIME through a transport medium that does not\n   support 8bit data.\n   The\
    \ MIME media type definition of application/news-transmission is:\n     MIME type\
    \ name:           application\n     MIME subtype name:        news-transmission\n\
    \     Required parameters:      none\n     Optional parameters:      One and only\
    \ one of \"usage=moderate\",\n                               \"usage=inject\"\
    , or \"usage=relay\".\n     Encoding considerations:  A transfer-encoding different\
    \ from that\n                               of the article transmitted MAY be\n\
    \                               supplied to ensure correct transmission\n    \
    \                           over some 7bit transport medium.\n     Security considerations:\
    \  News articles may constitute \"control\n                               messages\"\
    , which can have effects on a\n                               host's news system\
    \ beyond just addition\n                               of information.  Since\
    \ control messages\n                               may occur in normal news flow,\
    \ most hosts\n                               are suitably defended against undesired\n\
    \                               effects already, but transmission of news\n  \
    \                             articles via mail may bypass\n                 \
    \              firewall-type defenses.\n     Published specification:  RFC 5537\n\
    \     Body part:                A complete proto-article ready for\n         \
    \                      injection into Netnews or an article\n                \
    \               being relayed to another agent.\n     Applications that use this\
    \ media type:\n                               Injecting agents, Netnews moderators.\n\
    \     Intended usage:           COMMON\n     Change controller:        IETF\n\
    \   usage=moderate indicates the article is intended for a moderator,\n   usage=inject\
    \ for an injecting agent, and usage=relay for a relaying\n   agent.  The entity\
    \ receiving the article may only implement one type\n   of agent, in which case\
    \ the parameter MAY be omitted.\n   Contrary to the prior registration of this\
    \ media type, article\n   batches are not permitted as a body part.  Multiple\
    \ messages or a\n   message with multiple application/news-transmission parts\
    \ may be used\n   instead.\n"
- title: 4.2.  application/news-groupinfo
  contents:
  - "4.2.  application/news-groupinfo\n   The application/news-groupinfo media type\
    \ is used in conjunction with\n   the newgroup control message (see Section 5.2.1).\
    \  Its body part\n   contains brief information about a newsgroup: the newsgroup\
    \ name, its\n   description, and its moderation status.\n   The MIME media type\
    \ definition of application/news-groupinfo is:\n      MIME type name:        \
    \   application\n      MIME subtype name:        news-groupinfo\n      Required\
    \ parameters:      none\n      Optional parameters:      charset, which MUST be\
    \ a charset\n                                registered for use with MIME text\
    \ types.\n                                It has the same syntax as the parameter\n\
    \                                defined for text/plain [RFC2046].\n         \
    \                       Specifies the charset of the body part.\n            \
    \                    If not given, the charset defaults to\n                 \
    \               US-ASCII [ASCII].\n      Encoding considerations:  7bit or 8bit\
    \ encoding MUST be used to\n                                maintain compatibility.\n\
    \      Security considerations:  None.\n      Interoperability considerations:\n\
    \                                Disposition should by default be inline.\n  \
    \    Applications that use this media type:\n                                Control\
    \ message issuers, relaying\n                                agents, serving agents.\n\
    \      Published specification:  RFC 5537\n      Intended usage:           COMMON\n\
    \      Change controller:        IETF\n   The content of the application/news-groupinfo\
    \ body part is defined\n   as:\n         groupinfo-body      = [ newsgroups-tag\
    \ CRLF ]\n                                  newsgroups-line CRLF\n         newsgroups-tag\
    \      = %x46.6F.72 SP %x79.6F.75.72 SP\n                                  %x6E.65.77.73.67.72.6F.75.70.73\
    \ SP\n                                  %x66.69.6C.65.3A\n                   \
    \               ; case sensitive\n                                  ; \"For your\
    \ newsgroups file:\"\n         newsgroups-line     = newsgroup-name\n        \
    \                          [ 1*HTAB newsgroup-description ]\n                \
    \                  [ *WSP moderation-flag ]\n         newsgroup-description\n\
    \                             = eightbit-utext *( *WSP eightbit-utext )\n    \
    \     moderation-flag     = SP \"(\" %x4D.6F.64.65.72.61.74.65.64 \")\"\n    \
    \                              ; SPACE + case sensitive \"(Moderated)\"\n    \
    \     eightbit-utext      = VCHAR / %d127-255\n   This unusual format is backward-compatible\
    \ with the scanning of the\n   body of newgroup control messages for descriptions\
    \ done by Netnews\n   implementations that predate this specification.  Although\
    \ optional,\n   the <newsgroups-tag> SHOULD be included for backward compatibility.\n\
    \   The <newsgroup-description> MUST NOT contain any occurrence of the\n   string\
    \ \"(Moderated)\" within it.  Moderated newsgroups MUST be marked\n   by appending\
    \ the case-sensitive text \" (Moderated)\" at the end.\n   While a charset parameter\
    \ is defined for this media type, most\n   existing software does not understand\
    \ MIME header fields or correctly\n   handle descriptions in a variety of charsets.\
    \  Using a charset of US-\n   ASCII where possible is therefore RECOMMENDED; if\
    \ not possible, UTF-8\n   [RFC3629] SHOULD be used.  Regardless of the charset\
    \ used, the\n   constraints of the above grammar MUST be met and the <newsgroup-name>\n\
    \   MUST be represented in that charset using the same octets as would be\n  \
    \ used with a charset of US-ASCII.\n"
- title: 4.3.  application/news-checkgroups
  contents:
  - "4.3.  application/news-checkgroups\n   The application/news-checkgroups media\
    \ type contains a list of\n   newsgroups within a hierarchy or hierarchies, including\
    \ their\n   descriptions and moderation status.  It is primarily for use with\
    \ the\n   checkgroups control message (see Section 5.2.3).\n   The MIME media\
    \ type definition of application/news-checkgroups is:\n      MIME type name: \
    \          application\n      MIME subtype name:        news-checkgroups\n   \
    \   Required parameters:      none\n      Optional parameters:      charset, which\
    \ MUST be a charset\n                                registered for use with MIME\
    \ text types.\n                                It has the same syntax as the parameter\n\
    \                                defined for text/plain [RFC2046].\n         \
    \                       Specifies the charset of the body part.\n            \
    \                    If not given, the charset defaults to\n                 \
    \               US-ASCII [ASCII].\n      Encoding considerations:  7bit or 8bit\
    \ encoding MUST be used to\n                                maintain compatibility.\n\
    \      Security considerations:  This media type provides only a means\n     \
    \                           for conveying a list of newsgroups and\n         \
    \                       does not provide any information\n                   \
    \             indicating whether the sender is\n                             \
    \   authorized to state which newsgroups\n                                should\
    \ exist within a hierarchy.  Such\n                                authorization\
    \ must be accomplished by\n                                other means.\n    \
    \  Interoperability considerations:\n                                Disposition\
    \ should by default be inline.\n      Applications that use this media type:\n\
    \                                Control message issuers, relaying\n         \
    \                       agents, serving agents.\n      Published specification:\
    \  RFC 5537\n      Intended usage:           COMMON\n      Change controller:\
    \        IETF\n   The content of the application/news-checkgroups body part is\
    \ defined\n   as:\n         checkgroups-body    = *( valid-group CRLF )\n    \
    \     valid-group         = newsgroups-line ; see Section 4.2\n   The same restrictions\
    \ on charset, <newsgroup-name>, and <newsgroup-\n   description> apply for this\
    \ media type as for application/\n   news-groupinfo.\n   One application/news-checkgroups\
    \ message may contain information for\n   one or more hierarchies and is considered\
    \ complete for any hierarchy\n   for which it contains a <valid-group> unless\
    \ accompanied by external\n   information limiting its scope (such as a <chkscope>\
    \ parameter to a\n   checkgroups control message, as described in Section 5.2.3).\
    \  In\n   other words, an application/news-checkgroups body part consisting of\n\
    \         example.moderated         A moderated newsgroup (Moderated)\n      \
    \   example.test              An unmoderated test group\n   is a statement that\
    \ the example.* hierarchy contains two newsgroups,\n   example.moderated and example.test,\
    \ and no others.  This media type\n   therefore MUST NOT be used for conveying\
    \ partial information about a\n   hierarchy; if a group from a given hierarchy\
    \ is present, all groups\n   that exist in that hierarchy MUST be listed unless\
    \ its scope is\n   limited by external information, in which case all groups SHOULD\
    \ be\n   listed.\n   Spaces are used in this example for formatting reasons. \
    \ In an actual\n   message, the newsgroup name and description MUST be separated\
    \ by one\n   or more tabs (HTAB, ASCII %d09), not spaces.\n"
- title: 5.  Control Messages
  contents:
  - "5.  Control Messages\n   A control message is an article that contains a Control\
    \ header field\n   and thereby indicates that some action should be taken by an\
    \ agent\n   other than distribution and display.  Any article containing a\n \
    \  Control header field (defined in Section 3.2.3 of [RFC5536]) is a\n   control\
    \ message.  Additionally, the action of an article containing a\n   Supersedes\
    \ header field is described here; while such an article is\n   not a control message,\
    \ it specifies an action similar to the cancel\n   control message.\n   The <control-command>\
    \ of a Control header field comprises a <verb>,\n   which indicates the action\
    \ to be taken, and one or more <argument>\n   values, which supply the details.\
    \  For some control messages, the\n   body of the article is also significant.\
    \  Each recognized <verb> (the\n   control message type) is described in a separate\
    \ section below.\n   Agents MAY accept other control message types than those\
    \ specified\n   below, and MUST either ignore or reject control messages with\n\
    \   unrecognized types.  Syntactic definitions of valid <argument> values\n  \
    \ and restrictions on control message bodies are given in the section\n   for\
    \ each control message type.\n   Contrary to [RFC1036], the presence of a Subject\
    \ header field\n   starting with the string \"cmsg \" MUST NOT cause an article\
    \ to be\n   interpreted as a control message.  Agents MAY reject an article that\n\
    \   has such a Subject header field and no Control header field as\n   ambiguous.\
    \  Likewise, the presence of a <newsgroup-name> ending in\n   \".ctl\" in the\
    \ Newsgroups header field or the presence of an Also-\n   Control header field\
    \ MUST NOT cause the article to be interpreted as\n   a control message.\n"
- title: 5.1.  Authentication and Authorization
  contents:
  - "5.1.  Authentication and Authorization\n   Control messages specify actions above\
    \ and beyond the normal\n   processing of an article and are therefore potential\
    \ vectors of abuse\n   and unauthorized action.  There is, at present, no standardized\
    \ means\n   of authenticating the sender of a control message or verifying that\n\
    \   the contents of a control message were sent by the claimed sender.\n   There\
    \ are, however, some unstandardized authentication mechanisms in\n   common use,\
    \ such as [PGPVERIFY].\n   Agents acting on control messages SHOULD take steps\
    \ to authenticate\n   control messages before acting on them, as determined by\
    \ local\n   authorization policy.  Whether this is done via the use of an\n  \
    \ unstandardized authentication protocol, by comparison with\n   information obtained\
    \ through another protocol, by human review, or by\n   some other means is left\
    \ unspecified by this document.  Further\n   extensions or revisions of this protocol\
    \ are expected to standardize\n   a digital signature mechanism.\n   Agents are\
    \ expected to have their own local authorization policies\n   for which control\
    \ messages will be honored.  No Netnews agent is ever\n   required to act on any\
    \ control message.  The following descriptions\n   specify the actions that a\
    \ control message requests, but an agent MAY\n   always decline to act on any\
    \ given control message.\n"
- title: 5.2.  Group Control Messages
  contents:
  - "5.2.  Group Control Messages\n   A group control message is any control message\
    \ type that requests\n   some update to the list of newsgroups known to a news\
    \ server.  The\n   standard group control message types are \"newgroup\", \"rmgroup\"\
    , and\n   \"checkgroups\".\n   Before honoring any group control message, an agent\
    \ MUST check the\n   newsgroup or newsgroups affected by that control message\
    \ and decline\n   to create any newsgroups not in conformance with the restrictions\
    \ in\n   Section 3.1.4 of [RFC5536].\n   All of the group control messages MUST\
    \ have an Approved header field\n   (Section 3.2.1 of [RFC5536]).  Group control\
    \ messages without an\n   Approved header field SHOULD NOT be honored.\n   Group\
    \ control messages affecting specific groups (newgroup and\n   rmgroup control\
    \ messages, for example) SHOULD include the <newsgroup-\n   name> for the group\
    \ or groups affected in their Newsgroups header\n   field.  Other newsgroups MAY\
    \ be included in the Newsgroups header\n   field so that the control message will\
    \ reach more news servers, but\n   due to the special relaying rules for group\
    \ control messages (see\n   Section 3.6) this is normally unnecessary and may\
    \ be excessive.\n"
- title: 5.2.1.  The newgroup Control Message
  contents:
  - "5.2.1.  The newgroup Control Message\n   The newgroup control message requests\
    \ that the specified group be\n   created or, if already existing, that its moderation\
    \ status or\n   description be changed.  The syntax of its Control header field\
    \ is:\n         control-command     =/ Newgroup-command\n         Newgroup-command\
    \    = \"newgroup\" Newgroup-arguments\n         Newgroup-arguments  = 1*WSP newsgroup-name\n\
    \                                  [ 1*WSP newgroup-flag ]\n         newgroup-flag\
    \       = \"moderated\"\n   If the request is honored, the moderation status of\
    \ the group SHOULD\n   be set in accordance with the presence or absence of the\
    \ <newgroup-\n   flag> \"moderated\". \"moderated\" is the only flag defined by\
    \ this\n   protocol.  Other flags MAY be defined by extensions to this protocol\n\
    \   and accepted by agents.  If an agent does not recognize the\n   <newgroup-flag>\
    \ of a newgroup control message, it SHOULD ignore that\n   control message.\n\
    \   The body of a newgroup message SHOULD contain an entity of type\n   application/news-groupinfo\
    \ specifying the description of the\n   newsgroup, either as the entire body or\
    \ as an entity within a\n   multipart/mixed object [RFC2046].  If such an entity\
    \ is present, the\n   moderation status specified therein MUST match the moderation\
    \ status\n   specified by the <newgroup-flag>.  The body of a newgroup message\
    \ MAY\n   contain other entities (encapsulated in multipart/mixed) that provide\n\
    \   additional information about the newsgroup or the circumstances of\n   the\
    \ control message.\n   In the absence of an application/news-groupinfo entity,\
    \ a news server\n   MAY search the body of the message for the line \"For your\
    \ newsgroups\n   file:\" and take the following line as a <newsgroups-line>. \
    \ Prior to\n   the standardization of application/news-groupinfo, this was the\n\
    \   convention for providing a newsgroup description.\n   If the request is honored\
    \ and contains a newsgroup description, and\n   if the news server honoring it\
    \ stores newsgroup descriptions, the\n   stored newsgroup description SHOULD be\
    \ updated to the description\n   specified in the control message, even if no\
    \ other property of the\n   group has changed.\n"
- title: 5.2.1.1.  newgroup Control Message Example
  contents:
  - "5.2.1.1.  newgroup Control Message Example\n   A newgroup control message requesting\
    \ creation of the moderated\n   newsgroup example.admin.info.\n         From:\
    \ \"example.* Administrator\" <admin@noc.example>\n         Newsgroups: example.admin.info\n\
    \         Date: 27 Feb 2002 12:50:22 +0200\n         Subject: cmsg newgroup example.admin.info\
    \ moderated\n         Approved: admin@noc.example\n         Control: newgroup\
    \ example.admin.info moderated\n         Message-ID: <ng-example.admin.info-20020227@noc.example>\n\
    \         MIME-Version: 1.0\n         Content-Type: multipart/mixed; boundary=\"\
    nxtprt\"\n         Content-Transfer-Encoding: 8bit\n         This is a MIME control\
    \ message.\n         --nxtprt\n         Content-Type: application/news-groupinfo;\
    \ charset=us-ascii\n         For your newsgroups file:\n         example.admin.info\
    \      About the example.* groups (Moderated)\n         --nxtprt\n         Content-Type:\
    \ text/plain; charset=us-ascii\n         A moderated newsgroup for announcements\
    \ about new newsgroups in\n         the example.* hierarchy.\n         --nxtprt--\n\
    \   Spaces are used in this example for formatting reasons.  In an actual\n  \
    \ message, the newsgroup name and description MUST be separated by one\n   or\
    \ more tabs (HTAB, ASCII %d09), not spaces.\n"
- title: 5.2.2.  The rmgroup Control Message
  contents:
  - "5.2.2.  The rmgroup Control Message\n   The rmgroup control message requests\
    \ that the specified group be\n   removed from a news server's list of valid groups.\
    \  The syntax of its\n   Control header field is:\n         control-command  \
    \   =/ Rmgroup-command\n         Rmgroup-command     = \"rmgroup\" Rmgroup-arguments\n\
    \         Rmgroup-arguments   = 1*WSP newsgroup-name\n   The body of the control\
    \ message MAY contain anything, usually an\n   explanatory text.\n"
- title: 5.2.3.  The checkgroups Control Message
  contents:
  - "5.2.3.  The checkgroups Control Message\n   The checkgroups control message contains\
    \ a list of all the valid\n   groups in a hierarchy with descriptions and moderation\
    \ status.  It\n   requests that a news server update its valid newsgroup list\
    \ for that\n   hierarchy to include the groups specified, remove any groups not\n\
    \   specified, and update group descriptions and moderation status to\n   match\
    \ those given in the checkgroups control message.  The syntax of\n   its Control\
    \ header field is:\n         control-command     =/ Checkgroup-command\n     \
    \    Checkgroup-command  = \"checkgroups\" Checkgroup-arguments\n         Checkgroup-arguments=\
    \ [ chkscope ] [ chksernr ]\n         chkscope            = 1*( 1*WSP [\"!\"]\
    \ newsgroup-name )\n         chksernr            = 1*WSP \"#\" 1*DIGIT\n   A checkgroups\
    \ message is interpreted as an exhaustive list of the\n   valid groups in all\
    \ hierarchies or sub-hierarchies with a prefix\n   listed in the <chkscope> argument,\
    \ excluding any sub-hierarchy where\n   the <chkscope> argument is prefixed by\
    \ \"!\".  For complex cases with\n   multiple <chkscope> arguments, start from\
    \ an empty list of groups,\n   include all groups in the checkgroups control message\
    \ matching\n   <chkscope> arguments without a \"!\" prefix, and then exclude all\n\
    \   groups matching <chkscope> arguments with a \"!\" prefix.  Follow this\n \
    \  method regardless of the order of the <chkscope> arguments in the\n   Control\
    \ header field.\n   If no <chkscope> argument is given, it applies to all hierarchies\
    \ for\n   which group statements appear in the body of the message.\n   Since\
    \ much existing software does not honor the <chkscope> argument,\n   the body\
    \ of the checkgroups control message MUST NOT contain group\n   statements for\
    \ newsgroups outside the intended scope and SHOULD\n   contain a correct newsgroup\
    \ list even for sub-hierarchies excluded\n   with \"!\" <chkscope> terms.  News\
    \ servers, however, MUST honor\n   <chkscope> as specified here.\n   The <chksernr>\
    \ argument may be any positive integer.  If present, it\n   MUST increase with\
    \ every change to the newsgroup list, MUST NOT ever\n   decrease, and MUST be\
    \ included in all subsequent checkgroups control\n   messages with the same scope.\
    \  If provided, news servers SHOULD\n   remember the <chksernr> value of the previous\
    \ checkgroups control\n   message honored for a particular hierarchy or sub-hierarchy\
    \ and\n   decline to honor any subsequent checkgroups control message for the\n\
    \   same hierarchy or sub-hierarchy with a smaller <chksernr> value or\n   with\
    \ no <chksernr> value.\n   There is no upper limit on the length of <chksernr>,\
    \ other than the\n   limitation on the length of header fields.  Implementations\
    \ may\n   therefore want to do comparisons by zero-padding the shorter of two\n\
    \   <chksernr> values on the left and then doing a string comparison,\n   rather\
    \ than assuming <chksernr> can be manipulated as a number.\n   For example, the\
    \ following Control header field\n         Control: checkgroups de !de.alt #2009021301\n\
    \   indicates that the body of the message will list every newsgroup in\n   the\
    \ de.* hierarchy, excepting the de.alt.* sub-hierarchy, and should\n   not be\
    \ honored if a checkgroups control message with a serial number\n   greater than\
    \ 2009021301 was previously honored.  The serial number in\n   this example was\
    \ formed from the date in YYYYMMDD format, followed by\n   a two-digit sequence\
    \ number within that date.\n   The body of the message is an entity of type application/\n\
    \   news-checkgroups.  It SHOULD be declared as such with appropriate\n   MIME\
    \ headers, but news servers SHOULD interpret checkgroups messages\n   that lack\
    \ the appropriate MIME headers as if the body were of type\n   application/news-checkgroups\
    \ for backward compatibility.\n"
- title: 5.3.  The cancel Control Message
  contents:
  - "5.3.  The cancel Control Message\n   The cancel control message requests that\
    \ a target article be\n   withdrawn from circulation and access.  The syntax of\
    \ its Control\n   header field is:\n         control-command     =/ Cancel-command\n\
    \         Cancel-command      = \"cancel\" Cancel-arguments\n         Cancel-arguments\
    \    = 1*WSP msg-id\n   The argument identifies the article to be cancelled by\
    \ its message\n   identifier.  The body of the control message MAY contain anything,\n\
    \   usually an explanatory text.\n   A serving agent that elects to honor a cancel\
    \ message SHOULD make the\n   article unavailable to reading agents (perhaps by\
    \ deleting it\n   completely).  If the cancel control message arrives before the\n\
    \   article it targets, news servers choosing to honor it SHOULD remember\n  \
    \ the message identifier that was cancelled and reject the cancelled\n   article\
    \ when it arrives.\n   To best ensure that it will be relayed to the same news\
    \ servers as\n   the original message, a cancel control message SHOULD have the\
    \ same\n   Newsgroups header field as the message it is cancelling.\n   Cancel\
    \ control messages listing moderated newsgroups in their\n   Newsgroups header\
    \ field MUST contain an Approved header field like\n   any other article in a\
    \ moderated newsgroup.  This means that cancels\n   posted to a moderated newsgroup\
    \ will normally be sent to the\n   moderator first for approval.  Outside of moderated\
    \ newsgroups,\n   cancel messages are not required to contain an Approved header\
    \ field.\n   Contrary to [RFC1036], cancel control messages are not required to\n\
    \   contain From and Sender header fields matching the target message.\n   This\
    \ requirement only encouraged cancel issuers to conceal their\n   identity and\
    \ provided no security.\n"
- title: 5.4.  The Supersedes Header Field
  contents:
  - "5.4.  The Supersedes Header Field\n   The presence of a Supersedes header field\
    \ in an article requests that\n   the message identifier given in that header\
    \ field be withdrawn in\n   exactly the same manner as if it were the target of\
    \ a cancel control\n   message.  Accordingly, news servers SHOULD apply to a Supersedes\n\
    \   header field the same authentication and authorization checks as they\n  \
    \ would apply to cancel control messages.  If the Supersedes header\n   field\
    \ is honored, the news server SHOULD take the same actions as it\n   would take\
    \ when honoring a cancel control message for the given\n   target article.\n \
    \  The article containing the Supersedes header field, whether or not\n   the\
    \ Supersedes header field is honored, SHOULD be handled as a normal\n   article\
    \ and SHOULD NOT receive the special treatment of control\n   messages described\
    \ in Section 3.7.\n"
- title: 5.5.  The ihave and sendme Control Messages
  contents:
  - "5.5.  The ihave and sendme Control Messages\n   The ihave and sendme control\
    \ messages implement a predecessor of the\n   NNTP [RFC3977] protocol.  They are\
    \ largely obsolete on the Internet\n   but still see use in conjunction with some\
    \ transport protocols such\n   as UUCP [UUCP].  News servers are not required\
    \ to support them.\n   ihave and sendme control messages share similar syntax\
    \ for their\n   Control header fields and bodies:\n         control-command  \
    \   =/ Ihave-command\n         Ihave-command       = \"ihave\" Ihave-arguments\n\
    \         Ihave-arguments     = 1*WSP *( msg-id 1*WSP ) relayer-name\n       \
    \  control-command     =/ Sendme-command\n         Sendme-command      = \"sendme\"\
    \ Sendme-arguments\n         Sendme-arguments    = Ihave-arguments\n         relayer-name\
    \        = path-identity  ; see 3.1.5 of [RFC5536]\n         ihave-body      \
    \    = *( msg-id CRLF )\n         sendme-body         = ihave-body\n   The body\
    \ of the article consists of a list of <msg-id>s, one per\n   line.  The message\
    \ identifiers SHOULD be put in the body of the\n   article, not in the Control\
    \ header field, but news servers MAY\n   recognize and process message identifiers\
    \ in the Control header field\n   for backward compatibility.  Message identifiers\
    \ MUST NOT be put in\n   the Control header field if they are present in the body\
    \ of the\n   control message.\n   The ihave message states that the named relaying\
    \ agent has received\n   articles with the specified message identifiers, which\
    \ may be of\n   interest to the relaying agents receiving the ihave message. \
    \ The\n   sendme message requests that the agent receiving it send the articles\n\
    \   having the specified message identifiers to the named relaying agent.\n  \
    \ Contrary to [RFC1036], the relayer-name MUST be given as the last\n   argument\
    \ in the Control header field.\n   Upon receipt of the sendme message (and a decision\
    \ to honor it), the\n   receiving agent sends the article or articles requested.\
    \  The\n   mechanism for this transmission is unspecified by this document and\n\
    \   is arranged between the sites involved.\n   These control messages are normally\
    \ sent as point-to-point articles\n   between two sites and not then sent on to\
    \ other sites.  Newsgroups\n   beginning with \"to.\" are reserved for such point-to-point\n\
    \   communications and are formed by prepending \"to.\" to a <relayer-name>\n\
    \   to form a <newsgroup-name>.  Articles with such a group in their\n   Newsgroups\
    \ header fields SHOULD NOT be sent to any news server other\n   than the one identified\
    \ by <relayer-name>.\n"
- title: 5.6.  Obsolete Control Messages
  contents:
  - "5.6.  Obsolete Control Messages\n   The following control message types are declared\
    \ obsolete by this\n   document and SHOULD NOT be sent or honored:\n      sendsys\n\
    \      version\n      whogets\n      senduuname\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Netnews is designed for broad dissemination of\
    \ public messages and\n   offers little in the way of security.  What protection\
    \ Netnews has\n   against abuse and impersonation is provided primarily by the\n\
    \   underlying transport layer.  In large Netnews networks where news\n   servers\
    \ cannot be relied upon to enforce authentication and\n   authorization requirements\
    \ at the transport layer, articles may be\n   trivially forged and widely read,\
    \ and the identities of article\n   senders and the privacy of articles cannot\
    \ be assured.\n   See Section 5 of [RFC5536] for further security considerations\n\
    \   related to the format of articles.\n"
- title: 6.1.  Compromise of System Integrity
  contents:
  - "6.1.  Compromise of System Integrity\n   Control messages pose a particular security\
    \ concern since acting on\n   unauthorized control messages may cause newsgroups\
    \ to be removed,\n   articles to be deleted, and unwanted newsgroups to be created.\n\
    \   Administrators of news servers SHOULD therefore take steps to verify\n   the\
    \ authenticity of control messages as discussed in Section 5.1.\n   Articles containing\
    \ Supersedes header fields are effectively cancel\n   control messages and SHOULD\
    \ be subject to the same checks as\n   discussed in Section 5.4.  Currently, many\
    \ sites are ignoring all\n   cancel control messages and Supersedes header fields\
    \ due to the\n   difficulty of authenticating them and their widespread abuse.\n\
    \   Cancel control messages are not required to have the same Newsgroups\n   header\
    \ field as the messages they are cancelling.  Since they are\n   sometimes processed\
    \ before the original message is received, it may\n   not be possible to check\
    \ that the Newsgroup header fields match.\n   This allows a malicious poster to\
    \ inject a cancel control message for\n   an article in a moderated newsgroup\
    \ without adding an Approved header\n   field to the control message, and to hide\
    \ malicious cancel control\n   messages from some reading agents by using a different\
    \ Newsgroups\n   header field so that the cancel control message is not accepted\
    \ by\n   all news servers that accepted the original message.\n   All agents should\
    \ be aware that all article content, most notably\n   including the content of\
    \ the Control header field, is potentially\n   untrustworthy and malicious.  Articles\
    \ may be constructed in\n   syntactically invalid ways to attempt to overflow\
    \ internal buffers,\n   violate hidden assumptions, or exploit implementation\
    \ weaknesses.\n   For example, some news server implementations have been successfully\n\
    \   attacked via inclusion of Unix shell code in the Control header\n   field.\
    \  All article contents, and particularly control message\n   contents, SHOULD\
    \ be handled with care and rigorously verified before\n   any action is taken\
    \ on the basis of the contents of the article.\n   A malicious poster may add\
    \ an Approved header field to bypass the\n   moderation process of a moderated\
    \ newsgroup.  Injecting agents SHOULD\n   verify that messages approved for a\
    \ moderated newsgroup are being\n   injected by the moderator using authentication\
    \ information from the\n   underlying transport or some other authentication mechanism\
    \ arranged\n   with the moderator.  There is, at present, no standardized method\
    \ of\n   authenticating approval of messages to moderated groups, although\n \
    \  some unstandardized authentication methods such as [PGPMOOSE] are in\n   common\
    \ use.\n   A malicious news server participating in a Netnews network may bypass\n\
    \   checks performed by injecting agents, forge Path header fields and\n   other\
    \ trace information (such as Injection-Info header fields), and\n   otherwise\
    \ compromise the authorization requirements of a Netnews\n   network.  News servers\
    \ SHOULD use the facilities of the underlying\n   transport to authenticate their\
    \ peers and reject articles from\n   injecting and relaying agents that do not\
    \ follow the requirements of\n   this protocol or the Netnews network.\n"
- title: 6.2.  Denial of Service
  contents:
  - "6.2.  Denial of Service\n   The proper functioning of individual newsgroups can\
    \ be disrupted by\n   the excessive posting of unwanted articles; by the repeated\
    \ posting\n   of identical or near identical articles; by posting followups that\n\
    \   either are unrelated to their precursors or that quote their\n   precursors\
    \ in full with the addition of minimal extra material\n   (especially if this\
    \ process is iterated); by crossposting to, or\n   requesting followups to, totally\
    \ unrelated newsgroups; and by abusing\n   control messages and the Supersedes\
    \ header field to delete articles\n   or newsgroups.\n   Such articles intended\
    \ to deny service, or other articles of an\n   inflammatory nature, may also have\
    \ their From or Reply-To addresses\n   set to valid but incorrect email addresses,\
    \ thus causing large\n   volumes of email to descend on the true owners of those\
    \ addresses.\n   Users and agents should always be aware that identifying information\n\
    \   in articles may be forged.\n   A malicious poster may prevent an article from\
    \ being seen at a\n   particular site by including in the Path header field of\
    \ the proto-\n   article the <path-identity> of that site.  Use of the <diag-keyword>\n\
    \   \"POSTED\" by injecting agents to mark the point of injection can\n   prevent\
    \ this attack.\n   Primary responsibility for preventing such attacks lies with\n\
    \   injecting agents, which can apply authentication and authorization\n   checks\
    \ via the underlying transport and prevent those attempting\n   denial-of-service\
    \ attacks from posting messages.  If specific\n   injecting agents fail to live\
    \ up to their responsibilities, they may\n   be excluded from the Netnews network\
    \ by configuring relaying agents\n   to reject articles originating from them.\n\
    \   A malicious complainer may submit a modified copy of an article (with\n  \
    \ an altered Injection-Info header field, for instance) to the\n   administrator\
    \ of an injecting agent in an attempt to discredit the\n   author of that article\
    \ and even to have his posting privileges\n   removed.  Administrators SHOULD\
    \ therefore obtain a genuine copy of\n   the article from their own serving agent\
    \ before taking action in\n   response to such a complaint.\n"
- title: 6.3.  Leakage
  contents:
  - "6.3.  Leakage\n   Articles that are intended to have restricted distribution\
    \ are\n   dependent on the goodwill of every site receiving them.  Restrictions\n\
    \   on dissemination and retention of articles may be requested via the\n   Archive\
    \ and Distribution header fields, but such requests cannot be\n   enforced by\
    \ the protocol.\n   The flooding algorithm used by Netnews transports such as\
    \ NNTP\n   [RFC3977] is extremely good at finding any path by which articles can\n\
    \   leave a subnet with supposedly restrictive boundaries, and\n   substantial\
    \ administrative effort is required to avoid this.\n   Organizations wishing to\
    \ control such leakage are advised to\n   designate a small number of gateways\
    \ to handle all news exchanges\n   with the outside world.\n   The sendme control\
    \ message (Section 5.5), insofar as it is still\n   used, can be used to request\
    \ articles that the requester should not\n   have access to.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has registered the following media types, described\
    \ elsewhere in\n   this document, for use with the Content-Type header field,\
    \ in the\n   IETF tree in accordance with the procedures set out in [RFC4288].\n\
    \         application/news-transmission  (4.1)\n         application/news-groupinfo\
    \     (4.2)\n         application/news-checkgroups   (4.3)\n   application/news-transmission\
    \ is a change to a previous registration.\n   IANA has registered the new header\
    \ field, Original-Sender, in the\n   Permanent Message Header Field Repository,\
    \ using the template in\n   Section 3.10.3.\n   IANA has changed the status of\
    \ the message/news media type to\n   \"OBSOLETE\". message/rfc822 should be used\
    \ instead.  An updated\n   template is included in Section 4.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [ASCII]        American National Standard for\
    \ Information Systems,\n                  \"Coded Character Sets - 7-Bit American\
    \ National\n                  Standard Code for Information Interchange (7-Bit\n\
    \                  ASCII)\", ANSI X3.4, 1986.\n   [RFC2046]      Freed, N. and\
    \ N. Borenstein, \"Multipurpose Internet\n                  Mail Extensions (MIME)\
    \ Part Two: Media Types\",\n                  RFC 2046, November 1996.\n   [RFC2119]\
    \      Bradner, S., \"Key words for use in RFCs to Indicate\n                \
    \  Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3629]      Yergeau,\
    \ F., \"UTF-8, a transformation format of ISO\n                  10646\", STD\
    \ 63, RFC 3629, November 2003.\n   [RFC4288]      Freed, N. and J. Klensin, \"\
    Media Type Specifications\n                  and Registration Procedures\", BCP\
    \ 13, RFC 4288,\n                  December 2005.\n   [RFC5234]      Crocker,\
    \ D. and P. Overell, \"Augmented BNF for Syntax\n                  Specifications:\
    \ ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5322]      Resnick, P., Ed.,\
    \ \"Internet Message Format\", RFC 5322,\n                  October 2008.\n  \
    \ [RFC5536]      Murchison, K., Ed., Lindsey, C., and D. Kohn, \"Netnews\n   \
    \               Article Format\", RFC 5536, November 2009.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [PGPMOOSE]     Rose, G., \"PGP Moose\", November\
    \ 1998.\n   [PGPVERIFY]    Lawrence, D., \"Signing Control Messages\", August\
    \ 2001,\n                  <ftp://ftp.isc.org/pub/pgpcontrol/FORMAT>.\n   [RFC1036]\
    \      Horton, M. and R. Adams, \"Standard for interchange of\n              \
    \    USENET messages\", RFC 1036, December 1987.\n   [RFC2045]      Freed, N.\
    \ and N. Borenstein, \"Multipurpose Internet\n                  Mail Extensions\
    \ (MIME) Part One: Format of Internet\n                  Message Bodies\", RFC\
    \ 2045, November 1996.\n   [RFC2606]      Eastlake, D. and A. Panitz, \"Reserved\
    \ Top Level DNS\n                  Names\", BCP 32, RFC 2606, June 1999.\n   [RFC3798]\
    \      Hansen, T. and G. Vaudreuil, \"Message Disposition\n                  Notification\"\
    , RFC 3798, May 2004.\n   [RFC3977]      Feather, C., \"Network News Transfer\
    \ Protocol (NNTP)\",\n                  RFC 3977, October 2006.\n   [SON-OF-1036]\
    \  Spencer, H., \"News Article Format and Transmission\",\n                  Work\
    \ in Progress, May 2009.\n   [USEAGE]       Lindsey, C., \"Usenet Best Practice\"\
    , Work in Progress,\n                  March 2005.\n   [UUCP]         O'Reilly,\
    \ T. and G. Todino, \"Managing UUCP and\n                  Usenet\", O'Reilly\
    \ & Associates Ltd., January 1992.\n"
- title: Appendix A.  Changes to the Existing Protocols
  contents:
  - "Appendix A.  Changes to the Existing Protocols\n   This document prescribes many\
    \ changes, clarifications, and new\n   features since the protocol described in\
    \ [RFC1036].  Most notably:\n   o  A new, backward-compatible Path header field\
    \ format that permits\n      standardized embedding of additional trace and authentication\n\
    \      information is now RECOMMENDED.  See Section 3.2.  Folding of the\n   \
    \   Path header is permitted.\n   o  Trimming of the References header field is\
    \ REQUIRED, and a\n      mechanism for doing so is defined.\n   o  Addition of\
    \ the new Injection-Date header field is required in\n      some circumstances\
    \ for posting agents (Section 3.4.2) and\n      injecting agents (Section 3.5),\
    \ and MUST be used by news servers\n      for date checks (Section 3.6).  Injecting\
    \ agents are also strongly\n      encouraged to put all local trace information\
    \ in the new\n      Injection-Info header field.\n   o  A new media type is defined\
    \ for transmitting Netnews articles\n      through other media (Section 4.1),\
    \ and moderators SHOULD prepare\n      to receive submissions in that format (Section\
    \ 3.5.1).\n   o  Certain control messages (Section 5.6) are declared obsolete,\
    \ and\n      the special significance of \"cmsg\" at the start of a Subject\n\
    \      header field is removed.\n   o  Additional media types are defined for\
    \ improved structuring,\n      specification, and automated processing of control\
    \ messages\n      (Sections 4.2 and 4.3).\n   o  Two new optional parameters are\
    \ added to the checkgroups control\n      message.\n   o  The message/news media\
    \ type is declared obsolete.\n   o  Cancel control messages are no longer required\
    \ to have From and\n      Sender header fields matching those of the target message,\
    \ as this\n      requirement added no real security.\n   o  The relayer-name parameter\
    \ in the Control header field of ihave\n      and sendme control messages is now\
    \ required.\n   In addition, many protocol steps and article verification\n  \
    \ requirements that are unmentioned or left ambiguous by [RFC1036] but\n   are\
    \ widely implemented by Netnews servers have been standardized and\n   specified\
    \ in detail.\n"
- title: Appendix B.  Acknowledgements
  contents:
  - "Appendix B.  Acknowledgements\n   This document is the result of a twelve-year\
    \ effort and the number of\n   people that have contributed to its content are\
    \ too numerous to\n   mention individually.  Many thanks go out to all past and\
    \ present\n   members of the USEFOR Working Group of the Internet Engineering\
    \ Task\n   Force (IETF) and the accompanying mailing list.\n   Special thanks\
    \ are due to Henry Spencer, whose [SON-OF-1036] draft\n   served as the initial\
    \ basis for this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Russ Allbery (editor)\n   Stanford University\n   P.O.\
    \ Box 20066\n   Stanford, CA  94309\n   US\n   EMail: rra@stanford.edu\n   URI:\
    \   http://www.eyrie.org/~eagle/\n   Charles H. Lindsey\n   5 Clerewood Avenue\n\
    \   Heald Green\n   Cheadle\n   Cheshire  SK8 3JU\n   United Kingdom\n   Phone:\
    \ +44 161 436 6131\n   EMail: chl@clerew.man.ac.uk\n"
