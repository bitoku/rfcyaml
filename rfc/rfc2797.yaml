- title: __initial_text__
  contents:
  - '                Certificate Management Messages over CMS

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a Certificate Management protocol using CMS\n\
    \   (CMC).  This protocol addresses two immediate needs within the\n   Internet\
    \ PKI community:\n   1. The need for an interface to public key certification\
    \ products and\n      services based on [CMS] and [PKCS10], and\n   2. The need\
    \ in [SMIMEV3] for a certificate enrollment protocol for\n      DSA-signed certificates\
    \ with Diffie-Hellman public keys.\n   A small number of additional services are\
    \ defined to supplement the\n   core certificate request service.\n   Throughout\
    \ this specification the term CMS is used to refer to both\n   [CMS] and [PKCS7].\
    \  For both signedData and envelopedData, CMS is a\n   superset of the PKCS7.\
    \ In general, the use of PKCS7 in this document\n   is aligned to the Cryptographic\
    \ Message Syntax [CMS] that provides a\n   superset of the PKCS7 syntax. The term\
    \ CMC refers to this\n   specification.\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    ,  \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC 2119].\n"
- title: 1.  Protocol Requirements
  contents:
  - "1.  Protocol Requirements\n   -  The protocol is to be based as much as possible\
    \ on the existing\n      CMS, PKCS#10 and CRMF specifications.\n   -  The protocol\
    \ must support the current industry practice of a\n      PKCS#10 request followed\
    \ by a PKCS#7 response as a subset of the\n      protocol.\n   -  The protocol\
    \ needs to easily support the multi-key enrollment\n      protocols required by\
    \ S/MIME and other groups.\n   -  The protocol must supply a way of doing all\
    \ operations in a\n      single-round trip.  When this is not possible the number\
    \ of round\n      trips is to be minimized.\n   -  The protocol will be designed\
    \ such that all key generation can\n      occur on the client.\n   -  The mandatory\
    \ algorithms must superset the required algorithms for\n      S/MIME.\n   -  The\
    \ protocol will contain POP methods. Optional provisions for\n      multiple-round\
    \ trip POP will be made if necessary.\n   -  The protocol will support deferred\
    \ and pending responses to\n      certificate request for cases where external\
    \ procedures are\n      required to issue a certificate.\n   -  The protocol needs\
    \ to support arbitrary chains of local\n      registration authorities as intermediaries\
    \ between certificate\n      requesters and issuers.\n"
- title: 2.  Protocol Overview
  contents:
  - "2.  Protocol Overview\n   An enrollment transaction in this specification is\
    \ generally composed\n   of a single round trip of messages.  In the simplest\
    \ case an\n   enrollment request is sent from the client to the server and an\n\
    \   enrollment response is then returned from the server to the client.\n   In\
    \ some more complicated cases, such as delayed certificate issuance\n   and polling\
    \ for responses, more than one round trip is required.\n   This specification\
    \ supports two different request messages and two\n   different response messages.\n\
    \   Public key certification requests can be based on either the PKCS10\n   or\
    \ CRMF object.  The two different request messages are (a) the bare\n   PKCS10\
    \ (in the event that no other services are needed), and (b) the\n   PKCS10 or\
    \ CRMF message wrapped in a CMS encapsulation as part of a\n   PKIData object.\n\
    \   Public key certification responses are based on the CMS signedData\n   object.\
    \  The response may be either (a) a degenerate CMS signedData\n   object (in the\
    \ event no other services are needed), or (b) a\n   ResponseBody object wrapped\
    \ in a CMS signedData object.\n   No special services are provided for doing either\
    \ renewal (new\n   certificates with the same key) or re-keying (new certificates\
    \ on new\n   keys) of clients.  Instead a renewal/re-key message looks the same\
    \ as\n   any enrollment message, with the identity proof being supplied by\n \
    \  existing certificates from the CA.\n   A provision exists for Local Registration\
    \ Authorities (LRAs) to\n   participate in the protocol by taking client enrollment\
    \ messages,\n   wrapping them in a second layer of enrollment message with additional\n\
    \   requirements or statements from the LRA and then passing this new\n   expanded\
    \ request on to the Certification Authority.\n   This specification makes no assumptions\
    \ about the underlying\n   transport mechanism.  The use of CMS is not meant to\
    \ imply an email-\n   based transport.\n   Optional services available through\
    \ this specification are\n   transaction management, replay detection (through\
    \ nonces), deferred\n   certificate issuance, certificate revocation requests\
    \ and\n   certificate/CRL retrieval.\n"
- title: 2.1  Terminology
  contents:
  - "2.1  Terminology\n   There are several different terms, abbreviations and acronyms\
    \ used in\n   this document that we define here for convenience and consistency\
    \ of\n   usage:\n   \"End-Entity\" (EE) refers to the entity that owns a key pair\
    \ and for\n      whom a certificate is issued.\n   \"LRA\" or \"RA\" refers to\
    \ a (Local) Registration Authority.  A\n      registration authority acts as an\
    \ intermediary between an End-\n      Entity and a Certification Authority.  Multiple\
    \ RAs can exist\n      between the End-Entity and the Certification Authority.\n\
    \   \"CA\" refers to a Certification Authority.  A Certification Authority\n \
    \     is the entity that performs the actual issuance of a certificate.\n   \"\
    Client\" refers to an entity that creates a PKI request.  In this\n      document\
    \ both RAs and End-Entities can be clients.\n   \"Server\" refers to the entities\
    \ that process PKI requests and create\n      PKI responses.  CAs and RAs can\
    \ be servers in this document.\n   \"PKCS#10\" refers the Public Key Cryptography\
    \ Standard #10.  This is\n      one of a set of standards defined by RSA Laboratories\
    \ in the\n      1980s.  PKCS#10 defines a Certificate Request Message syntax.\n\
    \   \"CRMF\" refers to the Certificate Request Message Format RFC [CRMF].\n  \
    \    We are using certificate request message format defined in this\n      document\
    \ as part of our management protocol.\n   \"CMS\" refers to the Cryptographic\
    \ Message Syntax RFC [CMS].  This\n      document provides for basic cryptographic\
    \ services including\n      encryption and signing with and without key management.\n\
    \   \"POP\" is an acronym for \"Proof of Possession\".  POP refers to a value\n\
    \      that can be used to prove that the private key corresponding to a\n   \
    \   public key is in the possession and can be used by an end-entity.\n   \"Transport\
    \ wrapper\" refers to the outermost CMS wrapping layer.\n"
- title: 2.2  Protocol Flow Charts
  contents:
  - "2.2  Protocol Flow Charts\n   Figure 1 shows the Simple Enrollment Request and\
    \ Response messages.\n   The contents of these messages are detailed in Sections\
    \ 4.1 and 4.3\n   below.\n    Simple PKI Request                      Simple PKI\
    \ Response\n    -------------------------               --------------------------\n\
    \    +----------+                            +------------------+\n    | PKCS\
    \ #10 |                            | CMS \"certs-only\" |\n    +----------+--------------+\
    \             |     message      |\n    |                         |          \
    \   +------------------+------+\n    | Certificate Request     |             |\
    \                         |\n    |                         |             | CMS\
    \ Signed Data,        |\n    | Subject Name            |             |   no signerInfo\
    \         |\n    | Subject Public Key Info |             |                   \
    \      |\n    |   (K_PUB)               |             | signedData contains one\
    \ |\n    | Attributes              |             | or more certificates in |\n\
    \    |                         |             | the \"certificates\"      |\n \
    \   +-----------+-------------+             | portion of the          |\n    \
    \            | signed with |             | signedData.             |\n       \
    \         | matching    |             |                         |\n          \
    \      | K_PRIV      |             | encapsulatedContentInfo |\n             \
    \   +-------------+             | is empty.               |\n                \
    \                            |                         |\n                   \
    \                         +--------------+----------+\n                      \
    \                                     | unsigned |\n                         \
    \                                  +----------+\n               Figure 1: Simple\
    \ PKI Request and Response Messages\n    Full PKI Request                    \
    \    Full PKI Response\n    -----------------------                 ------------------------\n\
    \    +----------------+                      +----------------+\n    | CMS signedData\
    \ |                      | CMS signedData |\n    |     object     |          \
    \            |     object     |\n    +----------------+--------+             +----------------+--------+\n\
    \    |                         |             |                         |\n   \
    \ | PKIData object          |             | ResponseBody object     |\n    | \
    \                        |             |                         |\n    | Sequence\
    \ of:            |             | Sequence of:            |\n    | <enrollment\
    \ attribute>* |             | <enrollment attribute>* |\n    | <certification\
    \ request>*|             | <CMS object>*           |\n    | <CMS objects>*   \
    \       |             | <other message>*        |\n    | <other message>*    \
    \    |             |                         |\n    |                        \
    \ |             | where * == zero or more |\n    | where * == zero or more | \
    \            |                         |\n    |                         |    \
    \         | All certificates issued |\n    | Certificate requests    |       \
    \      | as part of the response |\n    | are CRMF or PKCS#10     |          \
    \   | are included in the     |\n    | objects. Attributes are |             |\
    \ \"certificates\" portion  |\n    | (OID, ANY defined by    |             | of\
    \ the signedData.      |\n    | OID) pairs.             |             | Relevant\
    \ CA certs and   |\n    |                         |             | CRLs can be\
    \ included as |\n    +-------+-----------------+             | well.         \
    \          |\n            | signed (keypair |             |                  \
    \       |\n            | used may be pre-|             +---------+---------------+\n\
    \            | existing or     |                       | signed by the |\n   \
    \         | identified in   |                       | CA or an LRA  |\n      \
    \      | the request)    |                       +---------------+\n         \
    \   +-----------------+\n               Figure 2: Full PKI Request and Response\
    \ Messages\n   Figure 2 shows the Full Enrollment Request and Response messages.\n\
    \   The contents of these messages are detailed in Sections 4.2 and 4.4\n   below.\n"
- title: 3.  Protocol Elements
  contents:
  - "3.  Protocol Elements\n   This section covers each of the different elements\
    \ that may be used\n   to construct enrollment request and enrollment response\
    \ messages.\n   Section 4 will cover how to build the enrollment request and response\n\
    \   messages.\n"
- title: 3.1  PKIData Object
  contents:
  - "3.1  PKIData Object\n   The new content object PKIData has been defined for this\
    \ protocol.\n   This new object is used as the body of the full PKI request message.\n\
    \   The new body is identified by:\n     id-cct-PKIData  OBJECT IDENTIFIER ::=\
    \ { id-cct 2 }\n   The ASN.1 structure corresponding to this new content type\
    \ is:\n   PKIData ::= SEQUENCE {\n         controlSequence    SEQUENCE SIZE(0..MAX)\
    \ OF TaggedAttribute,\n         reqSequence        SEQUENCE SIZE(0..MAX) OF TaggedRequest,\n\
    \         cmsSequence        SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,\n   \
    \      otherMsgSequence   SEQUENCE SIZE(0..MAX) OF OtherMsg\n   }\n   -- controlSequence\
    \ consists of a sequence of control attributes.  The\n   control attributes defined\
    \ in this document are found in section 5.\n   As control sequences are defined\
    \ by OIDs, other parties can define\n   additional control attributes. Unrecognized\
    \ OIDs MUST result in no\n   part of the request being successfully processed.\n\
    \   -- reqSequence consists of a sequence of certificate requests.  The\n   certificate\
    \ requests can be either a CertificateRequest (PKCS10\n   request) or a CertReqMsg.\
    \  Details on each of these request types are\n   found in sections 3.3.1 and\
    \ 3.3.2 respectively.\n   -- cmsSequence consists of a sequence of [CMS] message\
    \ objects.  This\n   protocol only uses EnvelopedData, SignedData and EncryptedData.\
    \  See\n   section 3.6 for more details.\n   -- otherMsgSequence allows for other\
    \ arbitrary data items to be\n   placed into the enrollment protocol.  The {OID,\
    \ any} pair of values\n   allows for arbitrary definition of material.  Data objects\
    \ are placed\n   here while control objects are placed in the controlSequence\
    \ field.\n   See section 3.7 for more details.\n"
- title: 3.2  ResponseBody Object
  contents:
  - "3.2  ResponseBody Object\n   The new content object ResponseBody has been defined\
    \ for this\n   protocol.  This new object is used as the body of the full PKI\n\
    \   response message.  The new body is identified by:\n       id-cct-PKIResponse\
    \ OBJECT IDENTIFIER ::= { id-cct 3 }\n   The ASN.1 structure corresponding to\
    \ this body content type is:\n   ResponseBody ::= SEQUENCE {\n       controlSequence\
    \   SEQUENCE SIZE(0..MAX) OF TaggedAttribute,\n       cmsSequence       SEQUENCE\
    \ SIZE(0..MAX) OF TaggedContentInfo,\n       otherMsgSequence  SEQUENCE SIZE(0..MAX)\
    \ OF OtherMsg\n   }\n   -- controlSequence consists of a sequence of control attributes.\
    \  The\n   control attributes defined in this document are found in section 3.5.\n\
    \   Other parties can define additional control attributes.\n   -- cmsSequence\
    \ consists of a sequence of [CMS] message objects.  This\n   protocol only uses\
    \ EnvelopedData, SignedData and EncryptedData.  See\n   section 3.6 for more details.\n\
    \   -- otherMsgSequence allows for other arbitrary items to be placed\n   into\
    \ the enrollment protocol.  The {OID, any} pair of values allows\n   for arbitrary\
    \ definition of material.  Data objects are placed here\n   while control objects\
    \ are placed in the controlSequence field. See\n   section 3.7 for more details.\n"
- title: 3.3  Certification Requests (PKCS10/CRMF)
  contents:
  - "3.3  Certification Requests (PKCS10/CRMF)\n   Certification Requests are based\
    \ on either PKCS10 or CRMF messages.\n   Section 3.3.1 specifies mandatory and\
    \ optional requirements for\n   clients and servers dealing with PKCS10 request\
    \ messages.  Section\n   3.3.2 specifies mandatory and optional requirements for\
    \ clients and\n   servers dealing with CRMF request messages.\n"
- title: 3.3.1  PKCS10 Request Body
  contents:
  - "3.3.1  PKCS10 Request Body\n   Servers MUST be able to understand and process\
    \ PKCS10 request bodies.\n   Clients MUST produce a PKCS10 request body when using\
    \ the Simple\n   Enrollment Request message. Clients MAY produce a PKCS10 request\
    \ body\n   when using the Full Enrollment Request message.\n   When producing\
    \ a PKCS10 request body, clients MUST produce a PKCS10\n   message body containing\
    \ a subject name and public key.  Some\n   certification products are operated\
    \ using a central repository of\n   information to assign subject names upon receipt\
    \ of a public key for\n   certification.  To accommodate this mode of operation,\
    \ the subject\n   name in a CertificationRequest MAY be NULL, but MUST be present.\
    \  CAs\n   that receive a CertificationRequest with a NULL subject name MAY\n\
    \   reject such requests.  If rejected and a response is returned, the CA\n  \
    \ MUST respond with the failInfo attribute of badRequest.\n   The client MAY incorporate\
    \ one or more standard X.509 v3 extensions\n   in any PKCS10 request as an ExtensionReq\
    \ attribute. An ExtensionReq\n   attribute is defined as\n      ExtensionReq ::=\
    \ SEQUENCE OF Extension\n   where Extension is imported from [PKIXCERT] and ExtensionReq\
    \ is\n   identified by {pkcs-9 14}.\n   Servers MUST be able to process all extensions\
    \ defined in [PKIXCERT].\n   Servers are not required to be able to process other\
    \ V3 X.509\n   extensions transmitted using this protocol, nor are they required\
    \ to\n   be able to process other, private extensions. Servers are not\n   required\
    \ to put all client-requested extensions into a certificate.\n   Servers are permitted\
    \ to modify client-requested extensions. Servers\n   MUST NOT alter an extension\
    \ so as to invalidate the original intent\n   of a client-requested extension.\
    \  (For example changing key usage\n   from key exchange to signing.) If a certification\
    \ request is denied\n   due to the inability to handle a requested extension and\
    \ a response\n   is returned, the server MUST respond with the failInfo attribute\
    \ of\n   unsupportedExt.\n"
- title: 3.3.2  CRMF Request Body
  contents:
  - "3.3.2  CRMF Request Body\n   Servers MUST be able to understand and process CRMF\
    \ request body.\n   Clients MAY produce a CRMF message body when using the Full\n\
    \   Enrollment Request message.\n   This memo imposes the following additional\
    \ changes on the\n   construction and processing of CRMF messages:\n   -  When\
    \ CRMF message bodies are used in the Full Enrollment Request\n      message,\
    \ each CRMF message MUST include both the subject and\n      publicKey fields\
    \ in the CertTemplate.  As in the case of PKCS10\n      requests, the subject\
    \ may be encoded as NULL, but MUST be present.\n   -  In general, when both CRMF\
    \ and CMC controls exist with equivalent\n      functionality, the CMC control\
    \ SHOULD be used.  The CMC control\n      MUST override any CRMF control.\n  \
    \ -  The regInfo field MUST NOT be used on a CRMF message.  Equivalent\n     \
    \ functionality is provided in the regInfo control attribute\n      (section 5.12).\n\
    \   -  The indirect method of proving POP is not supported in this\n      protocol.\
    \  One of the other methods (including the direct method\n      described in this\
    \ document) MUST be used instead if POP is\n      desired.  The value of encrCert\
    \ in SubsequentMessage MUST NOT be\n      used.\n   -  Since the subject and publicKeyValues\
    \ are always present, the\n      POPOSigningKeyInput MUST NOT be used when computing\
    \ the value for\n      POPSigningKey.\n   A server is not required to use all\
    \ of the values suggested by the\n   client in the certificate template.  Servers\
    \ MUST be able to process\n   all extensions defined in [PXIXCERT].  Servers are\
    \ not required to be\n   able to process other V3 X.509 extension transmitted\
    \ using this\n   protocol, nor are they required to be able to process other,\
    \ private\n   extensions. Servers are permitted to modify client-requested\n \
    \  extensions.  Servers MUST NOT alter an extension so as to invalidate\n   the\
    \ original intent of a client-requested extension. (For example\n   change key\
    \ usage from key exchange to signing.)  If a certificate\n   request is denied\
    \ due to the inability to handle a requested\n   extension, the server MUST respond\
    \ with a failInfo attribute of\n   unsupportedExt.\n"
- title: 3.3.3  Production of Diffie-Hellman Public Key Certification Requests
  contents:
  - "3.3.3  Production of Diffie-Hellman Public Key Certification Requests\n   Part\
    \ of a certification request is a signature over the request;\n   Diffie-Hellman\
    \ is a key agreement algorithm and cannot be used to\n   directly produce the\
    \ required signature object.  [DH-POP] provides\n   two ways to produce the necessary\
    \ signature value.  This document\n   also defines a signature algorithm that\
    \ does not provide a POP value,\n   but can be used to produce the necessary signature\
    \ value.\n"
- title: 3.3.3.1   No-Signature Signature Mechanism
  contents:
  - "3.3.3.1   No-Signature Signature Mechanism\n   Key management (encryption/decryption)\
    \ private keys cannot always be\n   used to produce some type of signature value\
    \ as they can be in a\n   decrypt only device.  Certification requests require\
    \ that the\n   signature field be populated.  This section provides a signature\n\
    \   algorithm specifically for that purposes.  The following object\n   identifier\
    \ and signature value are used to identify this signature\n   type:\n      id-alg-noSignature\
    \ OBJECT IDENTIFIER ::= {id-pkix id-alg(6) 2}\n      NoSignatureValue ::= OCTET\
    \ STRING\n   The parameters for id-alg-noSignature MUST be present and MUST be\n\
    \   encoded as NULL.  NoSignatureValue contains the hash of the\n   certification\
    \ request.  It is important to realize that there is no\n   security associated\
    \ with this signature type.  If this signature type\n   is on a certification\
    \ request and the Certification Authority policy\n   requires proof-of-possession\
    \ of the private key, the POP mechanism\n   defined in section 5.7 MUST be used.\n"
- title: 3.3.3.2   Diffie-Hellman POP Signature
  contents:
  - "3.3.3.2   Diffie-Hellman POP Signature\n   CMC compliant implementations MUST\
    \ support section 5 of [DH-POP].\n"
- title: 3.3.3.3   Diffie-Hellman MAC signature
  contents:
  - "3.3.3.3   Diffie-Hellman MAC signature\n   CMC compliant implementations MAY\
    \ support section 4 of [DH-POP].\n"
- title: 3.4  Body Part Identifiers
  contents:
  - "3.4  Body Part Identifiers\n   Each element of a PKIData or PKIResponse message\
    \ has an associated\n   body part identifier.  The Body Part Identifier is a 4-octet\
    \ integer\n   encoded in the certReqIds field for CertReqMsg objects (in a\n \
    \  TaggedRequest) or in the bodyPartId field of the other objects.  The\n   Body\
    \ Part Identifier MUST be unique within a single PKIData or\n   PKIResponse object.\
    \  Body Part Identifiers can be duplicated in\n   different layers (for example\
    \ a CMC message embedded within another).\n   The Body Part Id of zero is reserved\
    \ to designate the current PKIData\n   object.  This value is used in control\
    \ attributes such as the Add\n   Extensions Control in the pkiDataReference field\
    \ to refer to a\n   request in the current PKIData object.\n   Some control attribute,\
    \ such as the CMC Status Info attribute, will\n   also use Body Part Identifiers\
    \ to refer to elements in the previous\n   message.  This allows an error to be\
    \ explicit about the attribute or\n   request to which the error applies.\n"
- title: 3.5  Control Attributes
  contents:
  - "3.5  Control Attributes\n   The overall control flow of how a message is processed\
    \ in this\n   document is based on the control attributes.  Each control attribute\n\
    \   consists of an object identifier and a value based on the object\n   identifier.\n\
    \   Servers MUST fail the processing of an entire PKIData message if any\n   included\
    \ control attribute is not recognized.  The response MUST be\n   the error badRequest\
    \ and bodyList MUST contain the bodyPartID of the\n   invalid or unrecognized\
    \ control attribute.\n   The syntax of a control attribute is\n      TaggedAttribute\
    \ ::= SEQUENCE {\n          bodyPartID         BodyPartId,\n          attrType\
    \           OBJECT IDENTIFIER,\n          attrValues         SET OF AttributeValue\n\
    \      }\n      -- bodyPartId is a unique integer that is used to reference this\n\
    \      control attribute. The id of 0 is reserved for use as the\n      reference\
    \ to the current PKIData object.\n      -- attrType is the OID defining the associated\
    \ data in attrValues\n      -- attrValues contains the set of data values used\
    \ in processing\n      the control attribute.\n   The set of control attributes\
    \ that are defined by this memo are found\n   in section 5.\n"
- title: 3.6  Content Info objects
  contents:
  - "3.6  Content Info objects\n   The cmsSequence field of the PKIRequest and PKIResponse\
    \ messages\n   contains zero or more tagged content info objects.  The syntax\
    \ for\n   this structure is\n     TaggedContentInfo ::= SEQUENCE {\n         bodyPartID\
    \              BodyPartId,\n         contentInfo             ContentInfo\n   \
    \  }\n      -- bodyPartId is a unique integer that is used to reference this\n\
    \      content info object. The id of 0 is reserved for use as the\n      reference\
    \ to the current PKIData object.\n      -- contentInfo contains a ContentInfo\
    \ object (defined in [CMS]).\n      The three contents used in this location are\
    \ SignedData,\n      EnvelopedData and Data.\n   EnvelopedData provides for shrouding\
    \ of data.  Data allows for\n   general transport of unstructured data.\n   The\
    \ SignedData object from [CMS] is also used in this specification\n   to provide\
    \ for authentication as well as serving as the general\n   transport wrapper of\
    \ requests and responses.\n"
- title: 3.6.1  Signed Data
  contents:
  - "3.6.1  Signed Data\n   The signedData object is used in two different locations\
    \ when\n   constructing enrollment messages.  The signedData object is used as\
    \ a\n   wrapper for a PKIData as part of the enrollment request message.  The\n\
    \   signedData object is also used as the outer part of an enrollment\n   response\
    \ message.\n   For the enrollment response the signedData wrapper allows the server\n\
    \   to sign the returning data, if any exists, and to carry the\n   certificates\
    \ and CRLs for the enrollment request.  If no data is\n   being returned beyond\
    \ the certificates, no signerInfo objects are\n   placed in the signedData object.\n"
- title: 3.6.2  Enveloped Data
  contents:
  - "3.6.2  Enveloped Data\n   EnvelopedData is the primary method of providing confidentiality\
    \ for\n   sensitive information in this protocol.  The protocol currently uses\n\
    \   EnvelopedData to provide encryption of an entire request (see section\n  \
    \ 4.5).  The envelopedData object would also be used to wrap private\n   key material\
    \ for key archival.\n   Servers MUST implement envelopedData according to [CMS].\
    \  There is an\n   ambiguity (about encrypting content types other than id-data)\
    \ in the\n   PKCS7 specification that has lead to non-interoperability.\n"
- title: 3.7  Other Message Bodies
  contents:
  - "3.7  Other Message Bodies\n   The other message body portion of the message allows\
    \ for arbitrary\n   data objects to be carried as part of a message.  This is\
    \ intended to\n   contain data that is not already wrapped in a CMS contentInfo\
    \ object.\n   The data is ignored unless a control attribute references the data\
    \ by\n   bodyPartId.\n     OtherMsg ::= SEQUENCE {\n         bodyPartID      \
    \  BodyPartID,\n         otherMsgType      OBJECT IDENTIFIER,\n         otherMsgValue\
    \     ANY DEFINED BY otherMsgType }\n   -- bodyPartID contains the unique id of\
    \ this object\n   -- otherMsgType contains the OID defining both the usage of\
    \ this body\n   part and the syntax of the value associated with this body part\n\
    \   -- otherMsgValue contains the data associated with the message body\n   part.\n"
- title: 4.  PKI Messages
  contents:
  - "4.  PKI Messages\n   This section discusses the details of putting together the\
    \ different\n   enrollment request and response messages.\n"
- title: 4.1  Simple Enrollment Request
  contents:
  - "4.1  Simple Enrollment Request\n   The simplest form of an enrollment request\
    \ is a plain PKCS10 message.\n   If this form of enrollment request is used for\
    \ a private key that is\n   capable of generating a signature, the PKCS10 MUST\
    \ be signed with\n   that private key.  If this form of the enrollment request\
    \ is used for\n   a D-H key, then the D-H POP mechanism described in [DH-POP]\
    \ MUST be\n   used.\n   Servers MUST support the Simple Enrollment Request message.\
    \ If the\n   Simple Enrollment Request message is used, servers MUST return the\n\
    \   Simple Enrollment Response message (see Section 4.3) if the\n   enrollment\
    \ request is granted.  If the enrollment request fails, the\n   Full Enrollment\
    \ Response MAY be returned or no response MAY be\n   returned.\n   Many advanced\
    \ services specified in this memo are not supported by\n   the Simple Enrollment\
    \ Request message.\n"
- title: 4.2  Full PKI Request
  contents:
  - "4.2  Full PKI Request\n   The Full Enrollment Request provides the most functionality\
    \ and\n   flexibility.  Clients SHOULD use the Full Enrollment Request message\n\
    \   when enrolling.  Servers MUST support the Full Enrollment Request\n   message.\
    \  An enrollment response (full or simple as appropriate) MUST\n   be returned\
    \ to all Full Enrollment Requests.\n   The Full Enrollment Request message consists\
    \ of a PKIData object\n   wrapped in a signedData CMS object. The objects in the\
    \ PKIData are\n   ordered as follows:\n   1. All Control Attributes,\n   2. All\
    \ certification requests,\n   3. All CMS objects,\n   4. All other messages.\n\
    \   Each element in a Full Enrollment Request is identified by a Body\n   Part\
    \ Identifier. If duplicate ids are found, the server MUST return\n   the error\
    \ badRequest with a bodyPartID of 0.\n   The signedData object wrapping the PKIData\
    \ may be signed either by\n   the private key material of the signature certification\
    \ request, or\n   by a previously certified signature key. If the private key\
    \ of a\n   signature certification request is being used, then:\n   a) the certification\
    \ request containing the corresponding public key\n      MUST include a Subject\
    \ Key Identifier extension request,\n   b) the subjectKeyIdentifier form of signerInfo\
    \ MUST be used, and\n   c) the value of the subjectKeyIdentifier form of signerInfo\
    \ MUST be\n      the Subject Key Identifier specified in the corresponding\n \
    \     certification request.\n   (The subjectKeyIdentifier form of signerInfo\
    \ is used here because no\n   certificates have yet been issued for the signing\
    \ key.) If the\n   request key is used for signing, there MUST be only one signerInfo\n\
    \   object in the signedData object.\n   When creating a message to renew a certificate,\
    \ the following should\n   be taken into consideration:\n   1. The identification\
    \ and identityProof control statements are not\n      required.  The same information\
    \ is provided by the use of an\n      existing certificate from the CA when signing\
    \ the enrollment\n      message.\n   2. CAs and LRAs may impose additional restrictions\
    \ on the signing\n      certificate used.  They may require that the most recently\
    \ issued\n      signing certificate for an entity be used.\n   3. A renewal message\
    \ may occur either by creating a new set of keys,\n      or by re-using an existing\
    \ set of keys.  Some CAs may prevent re-\n      use of keys by policy.  In this\
    \ case the CA MUST return NOKEYREUSE\n      as the failure code.\n"
- title: 4.3  Simple Enrollment Response
  contents:
  - "4.3  Simple Enrollment Response\n   Servers SHOULD use the simple enrollment\
    \ response message whenever\n   possible.  Clients MUST be able to process the\
    \ simple enrollment\n   response message.  The simple enrollment response message\
    \ consists of\n   a signedData object with no signerInfo objects on it.  The\n\
    \   certificates requested are returned in the certificate bag of the\n   signedData\
    \ object.\n   Clients MUST NOT assume the certificates are in any order. Servers\n\
    \   SHOULD include all intermediate certificates needed to form complete\n   chains\
    \ to one or more self-signed certificates, not just the newly\n   issued certificate(s).\
    \ The server MAY additionally return CRLs in the\n   CRL bag.  Servers MAY include\
    \ the self-signed certificates. Clients\n   MUST NOT implicitly trust included\
    \ self-signed certificate(s) merely\n   due to its presence in the certificate\
    \ bag. In the event clients\n   receive a new self-signed certificate from the\
    \ server, clients SHOULD\n   provide a mechanism to enable the user to explicitly\
    \ trust the\n   certificate.\n"
- title: 4.4  Full PKI Response
  contents:
  - "4.4  Full PKI Response\n   Servers MUST return full PKI response messages if\
    \ a) a full PKI\n   request message failed or b) additional services other than\
    \ returning\n   certificates are required.  Servers MAY return full PKI responses\n\
    \   with failure information for simple PKI requests. Following section\n   4.3\
    \ above, servers returning only certificates and a success status\n   to the client\
    \ SHOULD use the simple PKI response message.\n   Clients MUST be able to process\
    \ a full PKI response message.\n   The full enrollment response message consists\
    \ of a signedData object\n   encapsulating a responseBody object.  In a responseBody\
    \ object all\n   Control Attributes MUST precede all CMS objects.  The certificates\n\
    \   granted in an enrollment response are returned in the certificates\n   field\
    \ of the immediately encapsulating signedData object.\n   Clients MUST NOT assume\
    \ the certificates are in any order. Servers\n   SHOULD include all intermediate\
    \ certificates needed to form complete\n   chains one ore more self-signed certificates,\
    \ not just the newly\n   issued certificate(s). The server MAY additionally return\
    \ CRLs in the\n   CRL bag.  Servers MAY include the self-signed certificates.\
    \ Clients\n   MUST NOT implicitly trust included self-signed certificate(s) merely\n\
    \   due to its presence in the certificate bag. In the event clients\n   receive\
    \ a new self-signed certificate from the server, clients SHOULD\n   provide a\
    \ mechanism to enable the user to explicitly trust the\n   certificate.\n"
- title: 4.5  Application of Encryption to a PKI Message
  contents:
  - "4.5  Application of Encryption to a PKI Message\n   There are occasions where\
    \ a PKI request or response message must be\n   encrypted in order to prevent\
    \ any information about the enrollment\n   from being accessible to unauthorized\
    \ entities.  This section\n   describes the means used to encrypt a PKI message.\
    \  This section is\n   not applicable to a simple enrollment message.\n   Confidentiality\
    \ is provided by wrapping the PKI message (a signedData\n   object) in a CMS EnvelopedData\
    \ object.  The nested content type in\n   the EnvelopedData is id-signedData.\
    \  Note that this is different from\n   S/MIME where there is a MIME layer placed\
    \ between the encrypted and\n   signed data objects.  It is recommended that if\
    \ an enveloped data\n   layer is applied to a PKI message, a second signing layer\
    \ be placed\n   outside of the enveloped data layer.  The following figure shows\
    \ how\n   this nesting would be done:\n     Normal              Option 1     \
    \             Option 2\n     ------              --------                  --------\n\
    \     SignedData          EnvelopedData             SignedData\n      PKIData\
    \             SignedData                EnvelopedData\n                      \
    \     PKIData                   SignedData\n                                 \
    \                     PKIData\n   Options 1 and 2 provide the benefit of preventing\
    \ leakage of\n   sensitive data by encrypting the information.  LRAs can remove\
    \ the\n   enveloped data wrapping, and replace or forward without further\n  \
    \ processing. Section 6 contains more information about LRA processing.\n   PKI\
    \ Messages MAY be encrypted or transmitted in the clear.  Servers\n   MUST provided\
    \ support for all three versions.\n   Alternatively, an authenticated, secure\
    \ channel could exist between\n   the parties requiring encryption.  Clients and\
    \ servers MAY use such\n   channels instead of the technique described above to\
    \ provide secure,\n   private communication of PKI request and response messages.\n"
- title: 5.  Control Attributes
  contents:
  - "5.  Control Attributes\n   Control attributes are carried as part of both PKI\
    \ requests and\n   responses. Each control attribute is encoded as a unique Object\n\
    \   Identifier followed by that data for the control attribute.  The\n   encoding\
    \ of the data is based on the control attribute object\n   identifier.  Processing\
    \ systems would first detect the OID and\n   process the corresponding attribute\
    \ value prior to processing the\n   message body.\n   The following table lists\
    \ the names, OID and syntactic structure for\n   each of the control attributes\
    \ documented in this memo.\n   Control Attribute         OID            Syntax\n\
    \   -----------------       ----------     --------------\n   cMCStatusInfo  \
    \         id-cmc 1       CMCStatusInfo\n   identification          id-cmc 2  \
    \     UTF8String\n   identityProof           id-cmc 3       OCTET STRING\n   dataReturn\
    \              id-cmc 4       OCTET STRING\n   transactionId           id-cmc\
    \ 5       INTEGER\n   senderNonce             id-cmc 6       OCTET STRING\n  \
    \ recipientNonce          id-cmc 7       OCTET STRING\n   addExtensions      \
    \     id-cmc 8       AddExtensions\n   encryptedPOP            id-cmc 9      \
    \ EncryptedPOP\n   decryptedPOP            id-cmc 10      DecryptedPOP\n   lraPOPWitness\
    \           id-cmc 11      LraPOPWitness\n   getCert                 id-cmc 15\
    \      GetCert\n   getCRL                  id-cmc 16      GetCRL\n   revokeRequest\
    \           id-cmc 17      RevokeRequest\n   regInfo                 id-cmc 18\
    \      OCTET STRING\n   responseInfo            id-cmc 19      OCTET STRING\n\
    \   QueryPending            id-cmc 21      OCTET STRING\n   idPOPLinkRandom  \
    \       id-cmc 22      OCTET STRING\n   idPOPLinkWitness        id-cmc 23    \
    \  OCTET STRING\n   idConfirmCertAcceptance id-cmc 24      CMCCertId\n"
- title: 5.1  CMC Status Info Control Attribute
  contents:
  - "5.1  CMC Status Info Control Attribute\n   The CMC status info control is used\
    \ in full PKI Response messages to\n   return information on a client request.\
    \  Servers MAY emit multiple\n   CMC status info controls referring to a single\
    \ body part. Clients\n   MUST be able to deal with multiple CMC status info controls\
    \ in a\n   response message. This statement uses the following ASN.1 definition:\n\
    \      CMCStatusInfo ::= SEQUENCE {\n           cMCStatus           CMCStatus,\n\
    \           bodyList            SEQUENCE SIZE (1..MAX) OF BodyPartID,\n      \
    \     statusString        UTF8String OPTIONAL,\n           otherInfo         \
    \  CHOICE {\n             failInfo            CMCFailInfo,\n             pendInfo\
    \            PendInfo } OPTIONAL\n      }\n      PendInfo ::= SEQUENCE {\n   \
    \        pendToken           OCTET STRING,\n           pendTime            GeneralizedTime\n\
    \      }\n      -- cMCStatus is described in section 5.1.1\n      -- bodyList\
    \ contains the list of body parts in the request message\n      to which this\
    \ status information applies.  If an error is being\n      returned for a simple\
    \ enrollment message, body list will contain a\n      single integer of value\
    \ '1'.\n      -- statusString contains a string with additional description\n\
    \      information.  This string is human readable.\n      -- failInfo is described\
    \ in section 5.1.2. It provides a detailed\n      error on what the failure was.\
    \  This choice is present only if\n      cMCStatus is failed.\n      -- pendToken\
    \ is the token to be used in the queryPending control\n      attribute.\n    \
    \  -- pendTime contains the suggested time the server wants to be\n      queried\
    \ about the status of the request.\n   If the cMCStatus field is success, the\
    \ CMC Status Info Control MAY be\n   omitted unless it is only item in the response\
    \ message.  If no status\n   exists for a certificate request or other item requiring\
    \ processing,\n   then the value of success is to be assumed.\n"
- title: 5.1.1   CMCStatus values
  contents:
  - "5.1.1   CMCStatus values\n   CMCStatus is a field in the CMCStatusInfo structure.\
    \  This field\n   contains a code representing the success or failure of a specific\n\
    \   operation.  CMCStatus has the ASN.1 structure of:\n      CMCStatus ::= INTEGER\
    \ {\n           success                (0),\n           -- request was granted\n\
    \           -- reserved            (1),\n           -- not used, defined where\
    \ the original structure was defined\n           failed                 (2),\n\
    \           -- you don't get what you want, more information elsewhere in\n  \
    \    the message\n           pending                (3),\n           -- the request\
    \ body part has not yet been processed,\n           -- requester is responsible\
    \ to poll back on this\n           -- pending may only be return for certificate\
    \ request\n      operations.\n           noSupport              (4),\n       \
    \    -- the requested operation is not supported\n           confirmRequired \
    \       (5)\n           -- conformation using the idConfirmCertAcceptance control\
    \ is\n      required\n           -- before use of certificate\n      }\n"
- title: 5.1.2   CMCFailInfo
  contents:
  - "5.1.2   CMCFailInfo\n   CMCFailInfo conveys information relevant to the interpretation\
    \ of a\n   failure condition. The CMCFailInfo has the following ASN.1 structure:\n\
    \      CMCFailInfo ::= INTEGER {\n           badAlg            (0)\n         \
    \  -- Unrecognized or unsupported algorithm\n           badMessageCheck   (1)\n\
    \           -- integrity check failed\n           badRequest        (2)\n    \
    \       -- transaction not permitted or supported\n           badTime        \
    \   (3)\n           -- Message time field was not sufficiently close to the system\n\
    \      time\n           badCertId         (4)\n           -- No certificate could\
    \ be identified matching the provided\n      criteria\n           unsuportedExt\
    \     (5)\n           -- A requested X.509 extension is not supported by the\n\
    \      recipient CA.\n           mustArchiveKeys   (6)\n           -- Private\
    \ key material must be supplied\n           badIdentity       (7)\n          \
    \ -- Identification Attribute failed to verify\n           popRequired       (8)\n\
    \           -- Server requires a POP proof before issuing certificate\n      \
    \     popFailed         (9)\n           -- POP processing failed\n           noKeyReuse\
    \        (10)\n           -- Server policy does not allow key re-use\n       \
    \    internalCAError   (11)\n           tryLater          (12)\n      }\n   Additional\
    \ failure reasons MAY be defined for closed environments\n   with a need.\n"
- title: 5.2  Identification and IdentityProof Control Attributes
  contents:
  - "5.2  Identification and IdentityProof Control Attributes\n   Some CAs and LRAs\
    \ require that a proof of identity be included in a\n   certification request.\
    \  Many different ways of doing this exist with\n   different degrees of security\
    \ and reliability.  Most people are\n   familiar with the request of a bank to\
    \ provide your mother's maiden\n   name as a form of identity proof.\n   CMC provides\
    \ one method of proving the client's identity based on a\n   shared secret between\
    \ the certificate requestor and the verifying\n   authority.  If clients support\
    \ full request messages, clients MUST\n   implement this method of identity proof.\
    \  Servers MUST provide this\n   method and MAY also have a bilateral method of\
    \ similar strength\n   available.\n   The CMC method starts with an out-of-band\
    \ transfer of a token (the\n   shared secret).  The distribution of this token\
    \ is beyond the scope\n   of this document.  The client then uses this token for\
    \ an identity\n   proof as follows:\n   1. The reqSequence field of the PKIData\
    \ object (encoded exactly as it\n      appears in the request message including\
    \ the sequence type and\n      length) is the value to be validated.\n   2. A\
    \ SHA1 hash of the token is computed.\n   3. An HMAC-SHA1 value is then computed\
    \ over the value produced in\n      Step 1, as described in [HMAC], using the\
    \ hash of the token from\n      Step 2 as the shared secret value.\n   4. The\
    \ 160-bit HMAC-SHA1 result from Step 3 is then encoded as the\n      value of\
    \ the identityProof attribute.\n   When the server verifies the identityProof\
    \ attribute, it computes the\n   HMAC-SHA1 value in the same way and compares\
    \ it to the identityProof\n   attribute contained in the enrollment request.\n\
    \   If a server fails the verification of an identityProof attribute and\n   the\
    \ server returns a response message, the failInfo attribute MUST be\n   present\
    \ in the response and MUST have a value of badIdentity.\n   Optionally, servers\
    \ MAY require the inclusion of the unprotected\n   identification attribute with\
    \ an identification attribute.  The\n   identification attribute is intended to\
    \ contain either a text string\n   or a numeric quantity, such as a random number,\
    \ which assists the\n   server in locating the shared secret needed to validate\
    \ the contents\n   of the identityProof attribute.  Numeric values MUST be converted\
    \ to\n   text string representations prior to encoding as UTF8-STRINGs in this\n\
    \   attribute.  If the identification control attribute is included in\n   the\
    \ message, the derivation of the shared secret in step 2 is altered\n   so that\
    \ the hash of the concatenation of the token and the identity\n   value are hashed\
    \ rather than just the token.\n"
- title: 5.2.1  Hardware Shared Secret Token Generation
  contents:
  - "5.2.1  Hardware Shared Secret Token Generation\n   The shared secret between\
    \ the end-entity and the identity verify is\n   sometimes transferred using a\
    \ hardware device that generates a series\n   of tokens based on some shared secret\
    \ value.  The user can therefore\n   prove their identity by transferring this\
    \ token in plain text along\n   with a name string.  The above protocol can be\
    \ used with a hardware\n   shared-secret token generation device by the following\
    \ modifications:\n   1. The identification attribute MUST be included and MUST\
    \ contain the\n      hardware-generated token.\n   2. The shared secret value\
    \ used above is the same hardware-generated\n      token.\n   3. All certification\
    \ requests MUST have a subject name and the\n      subject name MUST contain the\
    \ fields required to identify the\n      holder of the hardware token device.\n"
- title: 5.3  Linking Identity and POP Information
  contents:
  - "5.3  Linking Identity and POP Information\n   In a PKI Full Request message identity\
    \ information about the\n   creator/author of the message is carried in the signature\
    \ of the CMS\n   SignedData object containing all of the certificate requests.\n\
    \   Proof-of-possession information for key pairs requesting\n   certification,\
    \ however, is carried separately for each PKCS#10 or\n   CRMF message.  (For keys\
    \ capable of generating a digital signature,\n   the POP is provided by the signature\
    \ on the PKCS#10 or CRMF request.\n   For encryption-only keys the controls described\
    \ in Section 5.7 below\n   are used.)  In order to prevent substitution-style\
    \ attacks we must\n   guarantee that the same entity generated both the POP and\
    \ proof-of-\n   identity information.\n   This section describes two mechanisms\
    \ for linking identity and POP\n   information: witness values cryptographically\
    \ derived from the\n   shared-secret (Section 5.3.1) and shared-secret/subject\
    \ DN matching\n   (Section 5.3.2).  Clients and servers MUST support the witness\
    \ value\n   technique.  Clients and servers MAY support shared-secret/subject\
    \ DN\n   matching or other bilateral techniques of similar strength.  The idea\n\
    \   behind both mechanisms is to force the client to sign some data into\n   each\
    \ certificate request that can be directly associated with the\n   shared-secret;\
    \ this will defeat attempts to include certificate\n   requests from different\
    \ entities in a single Full PKI Request\n   message.\n"
- title: 5.3.1  Witness values derived from the shared-secret
  contents:
  - "5.3.1  Witness values derived from the shared-secret\n   The first technique\
    \ for doing identity-POP linking works by forcing\n   the client to include a\
    \ piece of information cryptographically-\n   derived from the shared-secret token\
    \ as a signed extension within\n   each certificate request (PKCS#10 or CRMF)\
    \ message.  This technique\n   is useful if null subject DNs are used (because,\
    \ for example, the\n   server can generate the subject DN for the certificate\
    \ based only on\n   the shared secret).  Processing begins when the client receives\
    \ the\n   shared-secret token out-of-band from the server.  The client then\n\
    \   computes the following values:\n   1. The client generates a random byte-string,\
    \ R, which SHOULD be at\n      least 512 bits in length.\n   2. A SHA1 hash of\
    \ the token is computed.\n   3. An HMAC-SHA1 value is then computed over the random\
    \ value produced\n      in Step 1, as described in [HMAC], using the hash of the\
    \ token\n      from Step 2 as the shared secret.\n   4. The random value produced\
    \ in Step 1 is encoded as the value of an\n      idPOPLinkRandom control attribute.\
    \  This control attribute MUST be\n      included in the Full PKI Request message.\n\
    \   5. The 160-bit HMAC-SHA1 result from Step 3 is encoded as the value\n    \
    \  of an idPOPLinkWitness extension to the certificate request.\n      a. For\
    \ CRMF, idPOPLinkWitness is included in the controls section\n         of the\
    \ CertRequest structure.\n      b. For PKCS#10, idPOPLinkWitness is included in\
    \ the attributes\n         section of the CertificationRequest structure.\n  \
    \ Upon receipt, servers MUST verify that each certificate request\n   contains\
    \ a copy of the idPOPLinkWitness and that its value was\n   derived in the specified\
    \ manner from the shared secret and the random\n   string included in the idPOPLinkRandom\
    \ control attribute.\n"
- title: 5.3.2  Shared-secret/subject DN matching
  contents:
  - "5.3.2  Shared-secret/subject DN matching\n   The second technique for doing identity-POP\
    \ linking is to link a\n   particular subject distinguished name (subject DN)\
    \ to the shared-\n   secrets that are distributed out-of-band and to require that\
    \ clients\n   using the shared-secret to prove identity include that exact subject\n\
    \   DN in every certificate request.  It is expected that many client-\n   server\
    \ connections using shared-secret based proof-of-identity will\n   use this mechanism.\
    \ (It is common not to omit the subject DN\n   information from the certificate\
    \ request messages.)\n   When the shared secret is generated and transferred out-of-band\
    \ to\n   initiate the registration process (Section 5.2), a particular subject\n\
    \   DN is also associated with the shared secret and communicated to the\n   client.\
    \  (The subject DN generated MUST be unique per entity in\n   accordance with\
    \ CA policy; a null subject DN cannot be used.  A\n   common practice could be\
    \ to place the identification value as part of\n   the subject DN.)  When the\
    \ client generates the Full PKI Request\n   message, it MUST use these two pieces\
    \ of information as follows:\n   1. The client MUST include the specific subject\
    \ DN that it received\n      along with the shared secret as the subject name\
    \ in every\n      certificate request (PKCS#10 and/or CRMF) in the Full PKI Request.\n\
    \      The subject names in the requests MUST NOT be null.\n   2. The client MUST\
    \ include the identityProof control attribute\n      (Section 5.2), derived from\
    \ the shared secret, in the Full PKI\n      Request.\n   The server receiving\
    \ this message MUST (a) validate the identityProof\n   control attribute and then,\
    \ (b) check that the subject DN included in\n   each certificate request matches\
    \ that associated with the shared\n   secret.  If either of these checks fails\
    \ the certificate request MUST\n   be rejected.\n"
- title: 5.3.3  Renewal and Re-Key Messages
  contents:
  - "5.3.3  Renewal and Re-Key Messages\n   In a renewal or re-key message, the subject\
    \ DN in (a) the certificate\n   referenced by the CMS SignerInfo object, and (b)\
    \ all certificate\n   requests within the request message MUST match according\
    \ to the\n   standard name match rules described in [PKIXCERT].\n"
- title: 5.4  Data Return Control Attribute
  contents:
  - "5.4  Data Return Control Attribute\n   The data return control attribute allows\
    \ clients to send arbitrary\n   data (usually some type of internal state information)\
    \ to the server\n   and to have the data returned as part of the enrollment response\n\
    \   message.  Data placed in a data return statement is considered to be\n   opaque\
    \ to the server.  The same control is used for both requests and\n   responses.\
    \  If the data return statement appears in an enrollment\n   message, the server\
    \ MUST return it as part of the enrollment response\n   message.\n   In the event\
    \ that the information in the data return statement needs\n   to be confidential,\
    \ it is expected that the client would apply some\n   type of encryption to the\
    \ contained data, but the details of this are\n   outside the scope of this specification.\n\
    \   An example of using this feature is for a client to place an\n   identifier\
    \ marking the exact source of the private key material.\n   This might be the\
    \ identifier of a hardware device containing the\n   private key.\n"
- title: 5.5  Add Extensions Control Attribute
  contents:
  - "5.5  Add Extensions Control Attribute\n   The Add Extensions control attribute\
    \ is used by LRAs in order to\n   specify additional extensions that are to be\
    \ placed on certificates.\n   This attribute uses the following ASN.1 definition:\n\
    \     AddExtensions ::= SEQUENCE {\n         pkiDataReference             BodyPartID\n\
    \         certReferences               SEQUENCE OF BodyPartID,\n         extensions\
    \                   SEQUENCE OF Extension\n     }\n      -- pkiDataReference field\
    \ contains the body part id of the\n      embedded request message.\n      --\
    \ certReferences field is a list of references to one or more of\n      the payloads\
    \ contained within a PKIData.  Each element of the\n      certReferences sequence\
    \ MUST be equal to either the bodyPartID of\n      a TaggedCertificationRequest\
    \ or the certReqId of the CertRequest\n      within a CertReqMsg.   By definition,\
    \ the listed extensions are to\n      be applied to every element referenced in\
    \ the certReferences\n      sequence.  If a request corresponding to bodyPartID\
    \ cannot be\n      found, the error badRequest is returned referencing this control\n\
    \      attribute.\n      -- extensions field contains the sequence of extensions\
    \ to be\n      applied to the referenced certificate requests.\n   Servers MUST\
    \ be able to process all extensions defined in [PKIXCERT].\n   Servers are not\
    \ required to be able to process every V3 X.509\n   extension transmitted using\
    \ this protocol, nor are they required to\n   be able to process other, private\
    \ extensions.  Servers are not\n   required to put all LRA-requested extensions\
    \ into a certificate.\n   Servers are permitted to modify LRA-requested extensions.\
    \  Servers\n   MUST NOT alter an extension so as to reverse the meaning of a\n\
    \   client-requested extension If a certification request is denied due\n   to\
    \ the inability to handle a requested extension and a response is\n   returned,\
    \ the server MUST return a failInfo attribute with the value\n   of unsupportedExt.\n\
    \   If multiple Add Extensions statements exist in an enrollment message,\n  \
    \ the exact behavior is left up to the certificate issuer policy.\n   However\
    \ it is recommended that the following policy be used.  These\n   rules would\
    \ be applied to individual extensions within an Add\n   Extensions control attribute\
    \ (as opposed to an \"all or nothing\"\n   approach).\n   1. If the conflict is\
    \ within a single PKIData object, the certificate\n      request would be rejected\
    \ with an error of badRequest.\n   2. If the conflict is between different PKIData\
    \ objects, the\n      outermost version of the extension would be used (allowing\
    \ an LRA\n      to override the extension requested by the end-entyt).\n"
- title: 5.6  Transaction Management Control Attributes
  contents:
  - "5.6  Transaction Management Control Attributes\n   Transactions are identified\
    \ and tracked using a transaction\n   identifier.  If used, clients generate transaction\
    \ identifiers and\n   retain their value until the server responds with a message\
    \ that\n   completes the transaction.  Servers correspondingly include received\n\
    \   transaction identifiers in the response.\n   The transactionId attribute identifies\
    \ a given transaction.  It is\n   used between client and server to manage the\
    \ state of an operation.\n   Clients MAY include a transactionID attribute in\
    \ request messages.\n   If the original request contains a transactionID attribute,\
    \ all\n   subsequent request and response messages MUST include the same\n   transactionID\
    \ attribute.  A server MUST use only transactionIds in\n   the outermost PKIdata\
    \ object. TransactionIds on inner PKIdata objects\n   are for intermediate entities.\n\
    \   Replay protection can be supported through the use of sender and\n   recipient\
    \ nonces. If nonces are used, in the first message of a\n   transaction, no recipientNonce\
    \ is transmitted; a senderNonce is\n   instantiated by the message originator\
    \ and retained for later\n   reference.  The recipient of a sender nonce reflects\
    \ this value back\n   to the originator as a recipientNonce and includes it's\
    \ own\n   senderNonce.  Upon receipt by the transaction originator of this\n \
    \  message, the originator compares the value of recipientNonce to its\n   retained\
    \ value.  If the values match, the message can be accepted for\n   further security\
    \ processing.  The received value for senderNonce is\n   also retained for inclusion\
    \ in the next message associated with the\n   same transaction.\n   The senderNonce\
    \ and recipientNonce attribute can be used to provide\n   application-level replay\
    \ prevention. Clients MAY include a\n   senderNonce in the initial request message.\
    \  Originating messages\n   include only a value for senderNonce. If a message\
    \ includes a\n   senderNonce, the response MUST include the transmitted value\
    \ of the\n   previously received senderNonce as recipientNonce and include new\n\
    \   value for senderNonce. A server MUST use only nonces in the outermost\n  \
    \ PKIdata object. Nonces on inner PKIdata objects are for intermediate\n   entities.\n"
- title: 5.7  Proof-of-possession (POP) for encryption-only keys
  contents:
  - "5.7  Proof-of-possession (POP) for encryption-only keys\n   Everything described\
    \ in this section is optional to implement, for\n   both servers and clients.\
    \ Servers MAY require this POP method be used\n   only if another POP method is\
    \ unavailable. Servers SHOULD reject all\n   requests contained within a PKIData\
    \ if any required POP is missing\n   for any element within the PKIData.\n   Many\
    \ servers require proof that an entity requesting a certificate\n   for a public\
    \ key actually possesses the corresponding private\n   component of the key pair.\
    \  For keys that can be used as signature\n   keys, signing the certification\
    \ request with the private key serves\n   as a POP on that key pair.  With keys\
    \ that can only be used for\n   encryption operations, POP MUST be performed by\
    \ forcing the client to\n   decrypt a value.  See Section 5 of [CRMF] for a detailed\
    \ discussion\n   of POP.\n   By necessity, POP for encryption-only keys cannot\
    \ be done in one\n   round-trip, since there are four distinct phases:\n   1.\
    \ Client tells the server about the public component of a new\n      encryption\
    \ key pair.\n   2. Server sends the client a POP challenge, encrypted with the\n\
    \      presented public encryption key, which the client must decrypt.\n   3.\
    \ Client decrypts the POP challenge and sends it back to the server.\n   4. Server\
    \ validates the decrypted POP challenge and continues\n      processing the certificate\
    \ request.\n   CMC defines two different attributes.  The first deals with the\n\
    \   encrypted challenge sent from the server to the user in step 2.  The\n   second\
    \ deals with the decrypted challenge sent from the client to the\n   server in\
    \ step 3.\n   The encryptedPOP attribute is used to send the encrypted challenge\n\
    \   from the server to the client.  As such, it is encoded as a tagged\n   attribute\
    \ within the controlSequence of a ResponseBody.  (Note that\n   we assume that\
    \ the message sent in Step 1 above is an enrollment\n   request and that the response\
    \ in step 2 is a Full Enrollment Response\n   including a failureInfo specifying\
    \ that a POP is explicitly required,\n   and providing the POP challenge in the\
    \ encryptedPOP attribute.)\n      EncryptedPOP ::= SEQUENCE {\n           request\
    \        TaggedRequest,\n           cms            contentInfo,\n           thePOPAlgID\
    \    AlgorithmIdentifier,\n           witnessAlgID   AlgorithmIdentifier,\n  \
    \         witness        OCTET STRING\n      }\n      DecryptedPOP ::= SEQUENCE\
    \ {\n           bodyPartID     BodyPartID,\n           thePOPAlgID    AlgorithmIdentifier,\n\
    \           thePOP         OCTET STRING\n      }\n   The encrypted POP algorithm\
    \ works as follows:\n   1. The server generates a random value y and associates\
    \ it with the\n      request.\n   2. The server returns the encrypted pop with\
    \ the following fields\n      set:\n      a. request is the certificate request\
    \ in the original request\n         message (it is included here so the client\
    \ need not key a copy\n         of the request),\n      b. cms is an EnvelopedData\
    \ object, the content type being id-data\n         and the content being the value\
    \ y.  If the certificate request\n         contains a subject key identifier (SKI)\
    \ extension, then the\n         recipient identifier SHOULD be the SKI.  If the\n\
    \         issuerAndSerialNumber form is used, the IsserName MUST be\n        \
    \ encoded as NULL and the SerialNumber as the bodyPartId of the\n         certificate\
    \ request,\n      c. thePOPAlgID contains the algorithm to be used in computing\
    \ the\n         return POP value,\n      d. witnessAlgID contains the hash algorithm\
    \ used on y to create\n         the field witness,\n      e. witness contains\
    \ the hashed value of y.\n   3. The client decrypts the cms field to obtain the\
    \ value y.  The\n      client computes H(y) using the witnessAlgID and compares\
    \ to the\n      value of witness.  If the values do not compare or the decryption\n\
    \      is not successful, the client MUST abort the enrollment process.\n    \
    \  The client aborts the process by sending a request message\n      containing\
    \ a CMCStatusInfo control attribute with failInfo value\n      of popFailed.\n\
    \   4. The client creates the decryptedPOP as part of a new PKIData\n      message.\
    \  The fields in the decryptedPOP are:\n      a. bodyPartID refers to the certificate\
    \ request in the new\n         enrollment message,\n      b. thePOPAlgID is copied\
    \ from the encryptedPOP,\n      c. thePOP contains the possession proof.  This\
    \ value is computed\n         by thePOPAlgID using the value y and request referenced\
    \ in\n         (4a).\n   5. The server then re-computes the value of thePOP from\
    \ its cached\n      value of y and the request and compares to the value of thePOP.\n\
    \      If the values do not match, the server MUST NOT issue the\n      certificate.\
    \  The server MAY re-issue a new challenge or MAY fail\n      the request altogether.\n\
    \   When defining the algorithms for thePOPAlgID and witnessAlgID care\n   must\
    \ be taken to ensure that the result of witnessAlgID is not a\n   useful value\
    \ to shortcut the computation with thePOPAlgID.  Clients\n   MUST implement SHA-1\
    \ for witnessAlgID.  Clients MUST implement HMAC-\n   SHA1 for thePOPAlgID.  The\
    \ value of y is used as the secret value in\n   the HMAC algorithm and the request\
    \ referenced in (4a) is used as the\n   data.  If y is greater than 64 bytes,\
    \ only the first 64 bytes of y\n   are used as the secret.\n   One potential problem\
    \ with the algorithm above is the amount of state\n   that a CA needs to keep\
    \ in order to verify the returned POP value.\n   This describes one of many possible\
    \ ways of addressing the problem by\n   reducing the amount of state kept on the\
    \ CA to a single (or small\n   set) of values.\n   1. Server generates random\
    \ seed x, constant across all requests. (The\n      value of x would normally\
    \ be altered on a regular basis and kept\n      for a short time afterwards.)\n\
    \   2. For certificate request R, server computes y = F(x,R).  F can be,\n   \
    \   for example, HMAC-SHA1(x,R).  All that's important for\n      statelessness\
    \ is that y be consistently computable with only known\n      state constant x\
    \ and function F, other inputs coming from the cert\n      request structure.\
    \  y should not be predictable based on knowledge\n      of R, thus the use of\
    \ a OWF like HMAC-SHA1.\n"
- title: 5.8  LRA POP Witnesses Control Attribute
  contents:
  - "5.8  LRA POP Witnesses Control Attribute\n   In an enrollment scenario involving\
    \ an LRAs the CA may allow (or\n   require) the LRA to perform the POP protocol\
    \ with the entity\n   requesting certification.  In this case the LRA needs a\
    \ way to inform\n   the CA it has done the POP.  This control attribute has been\
    \ created\n   to address this issue.\n   The ASN.1 structure for the LRA POP witness\
    \ is as follows:\n      LraPopWitness ::= SEQUENCE {\n          pkiDataBodyid\
    \   BodyPartID,\n          bodyIds         SEQUENCE of BodyPartID\n      }\n \
    \     -- pkiDataBodyid field contains the body part id of the nested CMS\n   \
    \   body object containing the client's full request message.\n      pkiDataBodyid\
    \ is set to 0 if the request is in the current\n      PKIRequest body.\n     \
    \ -- bodyIds contains a list of certificate requests for which the\n      LRA\
    \ has performed an out-of-band authentication.  The method of\n      authentication\
    \ could be archival of private key material,\n      challenge-response or other\
    \ means.\n   If a certificate server does not allow for an LRA to do the POP\n\
    \   verification, it returns an error of POPFAILURE.  The CA MUST NOT\n   start\
    \ a challenge-response to re-verify the POP itself.\n"
- title: 5.9  Get Certificate Control Attribute
  contents:
  - "5.9  Get Certificate Control Attribute\n   Everything described in this section\
    \ is optional to implement.\n   The get certificate control attribute is used\
    \ to retrieve previously\n   issued certificates from a repository of certificates.\
    \  A Certificate\n   Authority, an LRA or an independent service may provide this\n\
    \   repository.  The clients expected to use this facility are those\n   operating\
    \ in a resource-constrained environment.  (An example of a\n   resource-constrained\
    \ client would be a low-end IP router that does\n   not retain its own certificate\
    \ in non-volatile memory.)\n   The get certificate control attribute has the following\
    \ ASN.1\n   structure:\n      GetCert ::= SEQUENCE {\n          issuerName   \
    \ GeneralName,\n          serialNumber  INTEGER }\n   The service responding to\
    \ the request will place the requested\n   certificate in the certificates field\
    \ of a SignedData object.  If the\n   get certificate attribute is the only control\
    \ in a Full PKI Request\n   message, the response would be a Simple Enrollment\
    \ Response.\n"
- title: 5.10 Get CRL Control Attribute
  contents:
  - "5.10 Get CRL Control Attribute\n   Everything described in this section is optional\
    \ to implement.\n   The get CRL control attribute is used to retrieve CRLs from\
    \ a\n   repository of CRLs.  A Certification Authority, an LRA or an\n   independent\
    \ service may provide this repository.  The clients\n   expected to use this facility\
    \ are those where a fully deployed\n   directory is either infeasible or undesirable.\n\
    \   The get CRL control attribute has the following ASN.1 structure:\n      GetCRL\
    \ ::= SEQUENCE {\n          issuerName    Name,\n          cRLName       GeneralName\
    \ OPTIONAL,\n          time          GeneralizedTime OPTIONAL,\n          reasons\
    \       ReasonFlags OPTIONAL }\n   The fields in a GetCRL have the following meanings:\n\
    \      -- issuerName is the name of the CRL issuer.\n      -- cRLName may be the\
    \ value of CRLDistributionPoints in the\n      subject certificate or equivalent\
    \ value in the event the\n      certificate does not contain such a value.\n \
    \     -- time is used by the client to specify from among potentially\n      several\
    \ issues of CRL that one whose thisUpdate value is less than\n      but nearest\
    \ to the specified time.  In the absence of a time\n      component, the CA always\
    \ returns with the most recent CRL.\n      -- reasons is used to specify from\
    \ among CRLs partitioned by\n      revocation reason.  Implementers should bear\
    \ in mind that while a\n      specific revocation request has a single CRLReason\
    \ code--and\n      consequently entries in the CRL would have a single CRLReason\
    \ code\n      value--a single CRL can aggregate information for one or more\n\
    \      reasonFlags.\n   A service responding to the request will place the requested\
    \ CRL in\n   the crls field of a SignedData object.  If the get CRL attribute\
    \ is\n   the only control in a full enrollment message, the response would be\n\
    \   a simple enrollment response.\n"
- title: 5.11 Revocation Request Control Attribute
  contents:
  - "5.11 Revocation Request Control Attribute\n   The revocation request control\
    \ attribute is used to request that a\n   certificate be revoked.\n   The revocation\
    \ request control attribute has the following ASN.1\n   syntax:\n      RevRequest\
    \ ::= SEQUENCE {\n          issuerName      Name,\n          serialNumber    INTEGER,\n\
    \          reason          CRLReason,\n          invalidityDate  GeneralizedTime\
    \ OPTIONAL,\n          sharedSecret    OCTET STRING OPTIONAL,\n          comment\
    \         UTF8string OPTIONAL }\n      -- issuerName contains the issuerName of\
    \ the certificate to be\n      revoked.\n      -- serialNumber contains the serial\
    \ number of the certificate to\n      be revoked\n      -- reason contains the\
    \ suggested CRLReason code for why the\n      certificate is being revoked.  The\
    \ CA can use this value at its\n      discretion in building the CRL.\n      --\
    \ invalidityDate contains the suggested value for the Invalidity\n      Date CRL\
    \ Extension.  The CA can use this value at its discretion\n      in building the\
    \ CRL.\n      -- sharedSecret contains a secret value registered by the EE when\n\
    \      the certificate was obtained to allow for revocation of a\n      certificate\
    \ in the event of key loss.\n      -- comment contains a human readable comment.\n\
    \   For a revocation request to become a reliable object in the event of\n   a\
    \ dispute, a strong proof of originator authenticity is required.\n   However,\
    \ in the instance when an end-entity has lost use of its\n   signature private\
    \ key, it is impossible for the end-entity to produce\n   a digital signature\
    \ (prior to the certification of a new signature\n   key pair). The RevRequest\
    \ provides for the optional transmission from\n   the end-entity to the CA of\
    \ a shared secret that may be used as an\n   alternative authenticator in the\
    \ instance of loss of use. The\n   acceptability of this practice is a matter\
    \ of local security policy.\n   (Note that in some situations a Registration Authority\
    \ may be\n   delegated authority to revoke certificates on behalf of some\n  \
    \ population within its scope control.  In these situations the CA\n   would accept\
    \ the LRA's digital signature on the request to revoke a\n   certificate, independent\
    \ of whether the end entity still had access\n   to the private component of the\
    \ key pair.)\n   Clients MUST provide the capability to produce a digitally signed\n\
    \   revocation request control attribute.  Clients SHOULD be capable of\n   producing\
    \ an unsigned revocation request containing the end-entity's\n   shared secret.\
    \  If a client provides shared secret based self-\n   revocation, the client MUST\
    \ be capable of producing a revocation\n   request containing the shared secret.\
    \ Servers MUST be capable of\n   accepting both forms of revocation requests.\n\
    \   The structure of an unsigned, shared secret based revocation request\n   is\
    \ a matter of local implementation.  The shared secret does not need\n   to be\
    \ encrypted when sent in a revocation request.  The shared secret\n   has a one-time\
    \ use, that of causing the certificate to be revoked,\n   and public knowledge\
    \ of the shared secret after the certificate has\n   been revoked is not a problem.\
    \  Clients need to inform users that the\n   same shared secret SHOULD NOT be\
    \ used for multiple certificates.\n   A full response message MUST be returned\
    \ for a revocation request.\n"
- title: 5.12 Registration and Response Information Control Attributes
  contents:
  - "5.12 Registration and Response Information Control Attributes\n   The regInfo\
    \ control attribute is for clients and LRAs to pass\n   additional information\
    \ as part a PKI request.  The regInfo control\n   attribute uses the ASN.1 structure:\n\
    \      RegInfo ::= OCTET STRING\n   The content of this data is based on bilateral\
    \ agreement between the\n   client and server.\n   If a server (or LRA) needs\
    \ to return information back to a requestor\n   in response to data submitted\
    \ in a regInfo attribute, then that data\n   is returned as a responseInfo control\
    \ attribute.  The content of the\n   OCTET STRING for response information is\
    \ based on bilateral agreement\n   between the client and server.\n"
- title: 5.13 Query Pending Control Attribute
  contents:
  - "5.13 Query Pending Control Attribute\n   In some environments, process requirements\
    \ for manual intervention or\n   other identity checking can cause a delay in\
    \ returning the\n   certificate related to a certificate request. The query pending\n\
    \   attribute allows for a client to query a server about the state of a\n   pending\
    \ certificate request.  The server returns a token as part of\n   the CMCStatusInfo\
    \ attribute (in the otherInfo field).  The client\n   puts the token into the\
    \ query pending attribute to identify the\n   correct request to the server. \
    \ The server can also return a\n   suggested time for the client to query for\
    \ the state of a pending\n   certificate request.\n   The ASN.1 structure used\
    \ by the query pending control attribute is:\n      QueryPending ::= OCTET STRING\n\
    \   If a server returns a pending state (the transaction is still\n   pending),\
    \ the otherInfo MAY be omitted.  If it is not omitted then\n   the same value\
    \ MUST be returned (the token MUST NOT change during the\n   request).\n"
- title: 5.14 Confirm Certificate Acceptance
  contents:
  - "5.14 Confirm Certificate Acceptance\n   Some Certification Authorities require\
    \ that clients give a positive\n   conformation that the certificates issued to\
    \ it are acceptable.  The\n   Confirm Certificate Acceptance control attribute\
    \ is used for that\n   purpose.  If the CMCStatusInfo on a certificate request\
    \ is\n   confirmRequired, then the client MUST return a Confirm Certificate\n\
    \   Acceptance prior to any usage of the certificate.  Clients SHOULD\n   wait\
    \ for the response from the server that the conformation has been\n   received.\n\
    \   The confirm certificate acceptance structure is:\n      CMCCertId ::= IssuerSerial\n\
    \      -- CMCCertId contains the issuer and serial number of the\n      certificate\
    \ being accepted.\n   Servers MUST return a full enrollment response for a confirm\n\
    \   certificate acceptance control.\n"
- title: 6.  Local Registration Authorities
  contents:
  - "6.  Local Registration Authorities\n   This specification permits the use of\
    \ Local Registration Authorities\n   (LRAs).  An LRA sits between the end-entity\
    \ and the Certification\n   Authority.  From the end-entity's perspective, the\
    \ LRA appears to be\n   the Certification Authority and from the server the LRA\
    \ appears to be\n   a client.  LRAs receive the enrollment messages, perform local\n\
    \   processing and then forward onto Certificate Authorities. Some of the\n  \
    \ types of local processing that an LRA can perform include:\n   -  batching multiple\
    \ enrollment messages together,\n   -  challenge/response POP proofs,\n   -  addition\
    \ of private or standardized certificate extensions to all\n      requests,\n\
    \   -  archival of private key material,\n   -  routing of requests to different\
    \ CAs.\n   When an LRA receives an enrollment message it has three options: it\n\
    \   may forward the message without modification, it may add a new\n   wrapping\
    \ layer to the message, or it may remove one or more existing\n   layers and add\
    \ a new wrapping layer.\n   When an LRA adds a new wrapping layer to a message\
    \ it creates a new\n   PKIData object.  The new layer contains any control attributes\n\
    \   required (for example if the LRA does the POP proof for an encryption\n  \
    \ key or the addExtension control attribute to modify an enrollment\n   request)\
    \ and the client enrollment message.  The client enrollment\n   message is placed\
    \ in the cmsSequence if it is a Full Enrollment\n   message and in the reqSequence\
    \ if it is a Simple Enrollment message.\n   If an LRA is batching multiple client\
    \ messages together, then each\n   client enrollment message is placed into the\
    \ appropriate location in\n   the LRA's PKIData object along with all relevant\
    \ control attributes.\n   (If multiple LRAs are in the path between the end-entity\
    \ and the\n   Certification Authority, this will lead to multiple wrapping layers\n\
    \   on the message.)\n   In processing an enrollment message, an LRA MUST NOT\
    \ alter any\n   certificate request body (PKCS #10 or CRMF) as any alteration\
    \ would\n   invalidate the signature on the request and thus the POP for the\n\
    \   private key.\n   An example of how this would look is illustrated by the following\n\
    \   figure:\n      SignedData (by LRA)\n        PKIData\n          controlSequence\n\
    \                  LRA added control statements\n          reqSequence\n     \
    \             Zero or more Simple CertificationRequests from clients\n       \
    \   cmsSequence\n                  Zero or more Full PKI messages from clients\n\
    \                     SignedData (by client)\n                         PKIData\n\
    \   Under some circumstances an LRA is required to remove wrapping\n   layers.\
    \  The following sections look at the processing required if\n   encryption layers\
    \ and signing layers need to be removed.\n"
- title: 6.1  Encryption Removal
  contents:
  - "6.1  Encryption Removal\n   There are two cases that require an LRA to remove\
    \ or change\n   encryption in an enrollment message.  In the first case the\n\
    \   encryption was applied for the purposes of protecting the entire\n   enrollment\
    \ request from unauthorized entities.  If the CA does not\n   have a recipient\
    \ info entry in the encryption layer, the LRA MUST\n   remove the encryption layer.\
    \  The LRA MAY add a new encryption layer\n   with or without adding a new signing\
    \ layer.\n   The second change of encryption that may be required is to change\
    \ the\n   encryption inside of a signing layer.  In this case the LRA MUST\n \
    \  remove all signing layers containing the encryption.  All control\n   statements\
    \ MUST be merged according to local policy rules as each\n   signing layer is\
    \ removed and the resulting merged controls MUST be\n   placed in a new signing\
    \ layer provided by the LRA.  If the signing\n   layer provided by the end-entity\
    \ needs to be removed to the LRA can\n   remove the layer.\n"
- title: 6.2  Signature Layer Removal
  contents:
  - "6.2  Signature Layer Removal\n   Only two instances exist where an LRA should\
    \ remove a signature layer\n   on a Full Enrollment message.  If an encryption\
    \ needs to be modified\n   within the message, or if a Certificate Authority will\
    \ not accept\n   secondary delegation (i.e. multiple LRA signatures).  In all\
    \ other\n   situations LRAs SHOULD NOT remove a signing layer from a message.\n\
    \   If an LRA removes a signing layer from a message, all control\n   statements\
    \ MUST be merged according to local policy rules.  The\n   resulting merged control\
    \ statements MUST be placed in a new signing\n   layer provided by the LRA.\n"
- title: 7.  Transport Wrapping
  contents:
  - "7.  Transport Wrapping\n   Not all methods of transporting data allow for sending\
    \ unlabeled raw\n   binary data, in may cases standard methods of encoding can\
    \ be used to\n   greatly ease this issue.  These methods normally consist of wrapping\n\
    \   some identification of the content around the binary data, possibly\n   applying\
    \ an encoding to the data and labeling the data.   We document\n   for use three\
    \ different wrapping methods.\n   -- MIME wrapping is for transports that are\
    \ natively MIME based such\n      as HTTP and E-mail.\n   -- Binary file transport\
    \ is defined since floppy disk transport is\n      still very common.  File transport\
    \ can be done either as MIME\n      wrapped (section 7.1) or bare (section 7.2).\n\
    \   -- Socket based transport uses the raw BER encoded object.\n"
- title: 7.1  MIME Wrapping
  contents:
  - "7.1  MIME Wrapping\n   MIME wrapping is defined for those environments that are\
    \ MIME native.\n   These include E-Mail based protocols as well as HTTP.\n   The\
    \ basic mime wrapping in this section is taken from [SMIMEV2] and\n   [SMIMEV3].\
    \  Simple enrollment requests are encoded using the\n   application/pkcs10 content\
    \ type.  A file name MUST be included either\n   in a content type or content\
    \ disposition statement.  The extension\n   for the file MUST be \".p10\".\n \
    \  Simple enrollment response messages MUST be encoded as content-type\n   application/pkcs7-mime.\
    \  An smime-type parameter MUST be on the\n   content-type statement with a value\
    \ of \"certs-only.\" A file name with\n   the \".p7c\" extension MUST be specified\
    \ as part of the content-type or\n   content-disposition.\n   Full enrollment\
    \ request messages MUST be encoded as content-type\n   application/pkcs7-mime.\
    \  The smime-type parameter MUST be included\n   with a value of \"CMC-enroll\"\
    .  A file name with the \".p7m\" extension\n   MUST be specified as part of the\
    \ content-type or content-disposition\n   statement.\n   Full enrollment response\
    \ messages MUST be encoded as content-type\n   application/pkcs7-mime.  The smime-type\
    \ parameter MUST be included\n   with a value of \"CMC-response.\"  A file name\
    \ with the \".p7m\"\n   extensions MUST be specified as part of the content-type\
    \ or content-\n   disposition.\n"
- title: MIME TYPE                       File Extension        SMIME-TYPE
  contents:
  - 'MIME TYPE                       File Extension        SMIME-TYPE

    '
- title: application/pkcs10                .p10                  N/A
  contents:
  - 'application/pkcs10                .p10                  N/A

    '
- title: (simple PKI request)
  contents:
  - '(simple PKI request)

    '
- title: application/pkcs7-mime            .p7m                  CMC-request
  contents:
  - 'application/pkcs7-mime            .p7m                  CMC-request

    '
- title: (full PKI request)
  contents:
  - '(full PKI request)

    '
- title: application/pkcs7-mime            .p7c                  certs-only
  contents:
  - 'application/pkcs7-mime            .p7c                  certs-only

    '
- title: (simple PKI response)
  contents:
  - '(simple PKI response)

    '
- title: application/pkcs7-mime            .p7m                  CMC-response
  contents:
  - 'application/pkcs7-mime            .p7m                  CMC-response

    '
- title: (full PKI response)
  contents:
  - '(full PKI response)

    '
- title: 7.2  File-Based Transport
  contents:
  - "7.2  File-Based Transport\n   Enrollment messages and responses may also be transferred\
    \ between\n   clients and servers using file system-based mechanisms, such as\
    \ when\n   enrollment is performed for an off-line client.  When files are used\n\
    \   to transport binary, BER-encoded Full Enrollment Request and Response\n  \
    \ messages, the following file type extensions SHOULD be used:\n   Message Type\
    \                   File Extension\n   Full PKI Request                 .crq\n\
    \   Full PKI Response                .crp\n"
- title: 7.3  Socket-Based Transport
  contents:
  - "7.3  Socket-Based Transport\n   When enrollment messages and responses are sent\
    \ over sockets, no\n   wrapping is required.  Messages SHOULD be sent in their\
    \ binary, BER-\n   encoded form.\n"
- title: 8.  Interoperability
  contents:
  - '8.  Interoperability

    '
- title: 8.1  Mandatory and Optional Algorithms
  contents:
  - "8.1  Mandatory and Optional Algorithms\n   CMC clients and servers MUST be capable\
    \ of producing and processing\n   message signatures using the Digital Signature\
    \ Algorithm [DSA].  DSA\n   signatures MUST be indicated by the DSA AlgorithmIdentifier\
    \ value (as\n   specified in section 7.2.2 of [PKIXCERT]).  PKI clients and servers\n\
    \   SHOULD also be capable of producing and processing RSA signatures (as\n  \
    \ specified in section 7.2.1 of [PKIXCERT]).\n   CMC clients and servers MUST\
    \ be capable of protecting and accessing\n   message encryption keys using the\
    \ Diffie-Hellman (D-H) key exchange\n   algorithm.  D-H/3DES protection MUST be\
    \ indicated by the D-H\n   AlgorithmIdentifier value specified in [CMS].  PKI\
    \ clients and\n   servers SHOULD also be capable of producing and processing RSA\
    \ key\n   transport.  When used for PKI messages, RSA key transport MUST be\n\
    \   indicated as specified in section 7.2.1 of [PKIXCERT].\n"
- title: 8.2  Minimum Conformance Requirements
  contents:
  - "8.2  Minimum Conformance Requirements\n   A minimally compliant CMC server:\n\
    \   a) MUST accept a Full PKI Request message\n      i) MUST accept CRMF Request\
    \ Bodies within a Full PKI Request\n      ii) MUST accept PKCS#10 Request Bodies\
    \ within a Full PKI Request\n   b) MUST accept a Simple Enrollment Request message\n\
    \   c) MUST be able to return a Full PKI Response.  (A Full PKI Response\n   \
    \   is always a valid response, but for interoperability with\n      downlevel\
    \ clients a compliant server SHOULD use the Simple\n      Enrollment Response\
    \ whenever possible.)\n   A minimally-complaint CMC client:\n   a) MAY use either\
    \ the Simple Enrollment Message or the Full PKI\n      Request.\n      i) clients\
    \ MUST use PKCS#10 with the Simple Enrollment Message\n      ii) clients MAY use\
    \ either PKCS#10 or CRMF with the Full PKI\n         Request\n   b) MUST understand\
    \ the Simple Enrollment Response.\n   c) MUST understand the Full PKI Response.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Initiation of a secure communications channel\
    \ between an end-entity\n   and a CA or LRA (and, similarly, between an LRA and\
    \ another LRA or\n   CA) necessarily requires an out-of-band trust initiation\
    \ mechanism.\n   For example, a secure channel may be constructed between the\
    \ end-\n   entity and the CA via IPSEC or TLS. Many such schemes exist and the\n\
    \   choice of any particular scheme for trust initiation is outside the\n   scope\
    \ of this document.  Implementers of this protocol are strongly\n   encouraged\
    \ to consider generally accepted principles of secure key\n   management when\
    \ integrating this capability within an overall\n   security architecture.\n \
    \  Mechanisms for thwarting replay attacks may be required in particular\n   implementations\
    \ of this protocol depending on the operational\n   environment. In cases where\
    \ the CA maintains significant state\n   information, replay attacks may be detectable\
    \ without the inclusion\n   of the optional nonce mechanisms. Implementers of\
    \ this protocol need\n   to carefully consider environmental conditions before\
    \ choosing\n   whether or not to implement the senderNonce and recipientNonce\n\
    \   attributes described in section 5.6.  Developers of state-constrained\n  \
    \ PKI clients are strongly encouraged to incorporate the use of these\n   attributes.\n\
    \   Under no circumstances should a signing key be archived.  Doing so\n   allows\
    \ the archiving entity to potentially use the key for forging\n   signatures.\n\
    \   Due care must be taken prior to archiving keys.  Once a key is given\n   to\
    \ an archiving entity, the archiving entity could use the keys in a\n   way not\
    \ conducive to the archiving entity.  Users should be made\n   especially aware\
    \ that proper verification is made of the certificate\n   used to encrypt the\
    \ private key material.\n   Clients and servers need to do some checks on cryptographic\n\
    \   parameters prior to issuing certificates to make sure that weak\n   parameters\
    \ are not used. A description of the small subgroup attack\n   is provided in\
    \ [X942].  CMC implementations ought to be aware of this\n   attack when doing\
    \ parameter validations.\n"
- title: 10. Acknowledgments
  contents:
  - "10. Acknowledgments\n   The authors would like to thank Brian LaMacchia for his\
    \ work in\n   developing and writing up many of the concepts presented in this\n\
    \   document.  The authors would also like to thank Alex Deacon and Barb\n   Fox\
    \ for their contributions.\n"
- title: 11. References
  contents:
  - "11. References\n   [CMS]      Housley, R., \"Cryptographic Message Syntax\",\
    \ RFC 2630,\n              June 1999.\n   [CRMF]     Myers, M., Adams, C., Solo,\
    \ D. and D. Kemp, \"Internet\n              X.509 Certificate Request Message\
    \ Format\", RFC 2511, March\n              1999.\n   [DH]       B. Kaliski, \"\
    PKCS 3: Diffie-Hellman Key Agreement v1.4\"\n   [DH-POP]   H. Prafullchandra,\
    \ J. Schaad, \"Diffie-Hellman Proof-of-\n              Possession Algorithms\"\
    , Work in Progress.\n   [HMAC]     Krawczyk, H., Bellare, M. and R. Canetti, \"\
    HMAC: Keyed-\n              Hashing for Message Authentication\", RFC 2104, February\n\
    \              1997.\n   [PKCS1]    Kaliski, B., \"PKCS #1: RSA Encryption, Version\
    \ 1.5\", RFC\n              2313, March 1998.\n   [PKCS7]    Kaliski, B., \"PKCS\
    \ #7: Cryptographic Message Syntax v1.5\",\n              RFC 2315, October 1997.\n\
    \   [PKCS8]    RSA Laboratories, \"PKCS#8: Private-Key Information Syntax\n  \
    \            Standard, Version 1.2\", November 1, 1993.\n   [PKCS10]   Kaliski,\
    \ B., \"PKCS #10: Certification Request Syntax\n              v1.5\", RFC 2314,\
    \ October 1997.\n   [PKIXCERT] Housley, R., Ford, W., Polk, W. and D. Solo \"\
    Internet\n              X.509 Public Key Infrastructure Certificate and CRL\n\
    \              Profile\", RFC 2459, January 1999.\n   [RFC 2119] Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [SMIMEV2]  Dusse, S., Hoffman, P., Ramsdell,\
    \ B., Lundblade, L. and L.\n              Repka, \"S/MIME Version 2 Message Specification\"\
    , RFC 2311,\n              March 1998.\n   [SMIMEV3]  Ramsdell, B., \"S/MIME Version\
    \ 3 Message Specification\",\n              RFC 2633, June 1999.\n   [X942]  \
    \   Rescorla, E., \"Diffie-Hellman Key Agreement Method\", RFC\n             \
    \ 2631, June 1999.\n"
- title: 12. Authors' Addresses
  contents:
  - "12. Authors' Addresses\n   Michael Myers\n   VeriSign Inc.\n   1350 Charleston\
    \ Road\n   Mountain View, CA, 94043\n   Phone: (650) 429-3402\n   EMail: mmyers@verisign.com\n\
    \   Xiaoyi Liu\n   Cisco Systems\n   170 West Tasman Drive\n   San Jose, CA 95134\n\
    \   Phone: (480) 526-7430\n   EMail: xliu@cisco.com\n   Jim Schaad\n   EMail:\
    \  jimsch@nwlink.com\n   Jeff Weinstein\n   EMail: jsw@meer.net\n"
- title: Appendix A  ASN.1 Module
  contents:
  - 'Appendix A  ASN.1 Module

    '
- title: EnrollmentMessageSyntax
  contents:
  - "EnrollmentMessageSyntax\n   { iso(1) identified-organization(3) dod(4) internet(1)\n\
    \   security(5) mechansims(5) pkix(7) id-mod(0) id-mod-cmc(6) }\n   DEFINITIONS\
    \ IMPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS All --\n   -- The types and values\
    \ defined in this module are exported for use\n   -- in the other ASN.1 modules.\
    \  Other applications may use them for\n   -- their own purposes.\n   IMPORTS\n\
    \     -- Information Directory Framework (X.501)\n           Name\n          \
    \    FROM InformationFramework { joint-iso-itu-t ds(5)\n                   modules(1)\
    \ informationFramework(1) 3 }\n     -- Directory Authentication Framework (X.509)\n\
    \           AlgorithmIdentifier, AttributeCertificate, Certificate,\n        \
    \   CertificateList, CertificateSerialNumber\n              FROM AuthenticationFramework\
    \ { joint-iso-itu-t ds(5)\n                   module(1) authenticationFramework(7)\
    \ 3 }\n     -- PKIX Part 1 - Implicit\n        GeneralName, CRLReason, ReasonFlags\n\
    \        FROM PKIX1Implicit88 {iso(1) identified-organization(3) dod(6)\n    \
    \            internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n       \
    \         id-pkix1-implicit-88(2)}\n     -- PKIX Part 1 - Explicit\n        SubjectPublicKeyInfo,\
    \ Extension\n        FROM PKIX1Explicit88 {iso(1) identified-organization(3) dod(6)\n\
    \                internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n   \
    \             id-pkix1-explicit-88(1)}\n     -- Cryptographic Message Syntax\n\
    \        ContentInfo, Attribute\n          FROM CryptographicMessageSyntax { 1\
    \ 2 840 113549 1 9 16 0 1}\n     -- CRMF\n        CertReqMsg\n        FROM CRMF\
    \ { 1 3 6 1 5 5 7 0 5 };\n    id-pkix OBJECT IDENTIFIER  ::= { iso(1) identified-organization(3)\n\
    \        dod(6) internet(1) security(5) mechanisms(5) pkix(7) }\n        id-cmc\
    \ OBJECT IDENTIFIER ::= {id-pkix 7}   -- CMC controls\n        id-cct OBJECT IDENTIFIER\
    \ ::= {id-pkix 12}  -- CMC content types\n    -- The following controls have simple\
    \ type content (usually OCTET\n"
- title: STRING)
  contents:
  - "STRING)\n    id-cmc-identification OBJECT IDENTIFIER ::= {id-cmc 2}\n    id-cmc-identityProof\
    \ OBJECT IDENTIFIER ::= {id-cmc 3}\n    id-cmc-dataReturn OBJECT IDENTIFIER ::=\
    \ {id-cmc 4}\n    id-cmc-transactionId OBJECT IDENTIFIER ::= {id-cmc 5}\n    id-cmc-senderNonce\
    \ OBJECT IDENTIFIER ::= {id-cmc 6}\n    id-cmc-recipientNonce OBJECT IDENTIFIER\
    \ ::= {id-cmc 7}\n    id-cmc-regInfo OBJECT IDENTIFIER ::= {id-cmc 18}\n    id-cmc-responseInfo\
    \ OBJECT IDENTIFIER ::= {id-cmc 19}\n    id-cmc-queryPending OBJECT IDENTIFIER\
    \ ::= {id-cmc 21}\n    id-cmc-popLinkRandom OBJECT IDENTIFIER ::= {id-cmc 22)\n\
    \    id-cmc-popLinkWitness OBJECT IDENTIFIER ::= (id-cmc 23)\n    -- This is the\
    \ content type used for a request message in the\n"
- title: protocol
  contents:
  - "protocol\n    id-cct-PKIData OBJECT IDENTIFIER ::= { id-cct 2 }\n    PKIData\
    \ ::= SEQUENCE {\n        controlSequence    SEQUENCE SIZE(0..MAX) OF TaggedAttribute,\n\
    \        reqSequence        SEQUENCE SIZE(0..MAX) OF TaggedRequest,\n        cmsSequence\
    \        SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,\n        otherMsgSequence\
    \   SEQUENCE SIZE(0..MAX) OF OtherMsg\n    }\n    bodyIdMax INTEGER ::= 4294967295\n\
    \    BodyPartID ::= INTEGER(0..bodyIdMax)\n    TaggedAttribute ::= SEQUENCE {\n\
    \        bodyPartID         BodyPartId,\n        attrType           OBJECT IDENTIFIER,\n\
    \        attrValues         SET OF AttributeValue\n    }\n    AttributeValue ::=\
    \ ANY\n    TaggedRequest ::= CHOICE {\n        tcr               [0] TaggedCertificationRequest,\n\
    \        crm               [1] CertReqMsg\n    }\n    TaggedCertificationRequest\
    \ ::= SEQUENCE {\n        bodyPartID            BodyPartID,\n        certificationRequest\
    \  CertificationRequest\n    }\n    CertificationRequest ::= SEQUENCE {\n    \
    \  certificationRequestInfo  SEQUENCE {\n        version                   INTEGER,\n\
    \        subject                   Name,\n        subjectPublicKeyInfo      SEQUENCE\
    \ {\n          algorithm                 AlgorithmIdentifier,\n          subjectPublicKey\
    \          BIT STRING },\n        attributes                [0] IMPLICIT SET OF\
    \ Attribute },\n      signatureAlgorithm        AlgorithmIdentifier,\n      signature\
    \                 BIT STRING\n    }\n    TaggedContentInfo ::= SEQUENCE {\n  \
    \      bodyPartID              BodyPartId,\n        contentInfo             ContentInfo\n\
    \    }\n    OtherMsg ::= SEQUENCE {\n        bodyPartID        BodyPartID,\n \
    \       otherMsgType      OBJECT IDENTIFIER,\n        otherMsgValue     ANY DEFINED\
    \ BY otherMsgType }\n    --  This defines the response message in the protocol\n\
    \    id-cct-PKIResponse OBJECT IDENTIFIER ::= { id-cct 3 }\n    ResponseBody ::=\
    \ SEQUENCE {\n        controlSequence   SEQUENCE SIZE(0..MAX) OF TaggedAttribute,\n\
    \        cmsSequence       SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,\n     \
    \   otherMsgSequence  SEQUENCE SIZE(0..MAX) OF OtherMsg\n    }\n    -- Used to\
    \ return status state in a response\n    id-cmc-cMCStatusInfo OBJECT IDENTIFIER\
    \ ::= {id-cmc 1}\n    CMCStatusInfo ::= SEQUENCE {\n        cMCStatus       CMCStatus,\n\
    \        bodyList        SEQUENCE SIZE (1..MAX) OF INTEGER,\n        statusString\
    \    UTF8String OPTIONAL,\n        otherInfo        CHOICE {\n          failInfo\
    \         CMCFailInfo,\n          pendInfo         PendInfo } OPTIONAL\n    }\n\
    \    PendInfo ::= SEQUENCE {\n        pendToken        INTEGER,\n        pendTime\
    \         GENERALIZEDTIME\n    }\n    CMCStatus ::= INTEGER {\n        success\
    \         (0),\n        -- you got exactly what you asked for\n        failed\
    \          (2),\n        -- you don't get it, more information elsewhere in the\
    \ message\n        pending         (3),\n        -- the request body part has\
    \ not yet been processed,\n        -- requester is responsible to poll back on\
    \ this\n        noSupport       (4)\n        -- the requested operation is not\
    \ supported\n    }\n    CMCFailInfo ::= INTEGER {\n        badAlg          (0),\n\
    \        -- Unrecognized or unsupported algorithm\n        badMessageCheck (1),\n\
    \        -- integrity check failed\n        badRequest      (2),\n        -- transaction\
    \ not permitted or supported\n        badTime         (3),\n        -- Message\
    \ time field was not sufficiently close to the system\n"
- title: time
  contents:
  - "time\n        badCertId       (4),\n        -- No certificate could be identified\
    \ matching the provided\n"
- title: criteria
  contents:
  - "criteria\n        unsuportedExt   (5),\n        -- A requested X.509 extension\
    \ is not supported by the recipient\n"
- title: CA.
  contents:
  - "CA.\n        mustArchiveKeys (6),\n        -- Private key material must be supplied\n\
    \        badIdentity     (7),\n        -- Identification Attribute failed to verify\n\
    \        popRequired     (8),\n        -- Server requires a POP proof before issuing\
    \ certificate\n        popFailed       (9),\n        -- Server failed to get an\
    \ acceptable POP for the request\n        noKeyReuse      (10)\n        -- Server\
    \ policy does not allow key re-use\n        internalCAError (11)\n        tryLater\
    \        (12)\n    }\n    -- Used for LRAs to add extensions to certificate requests\n\
    \    id-cmc-addExtensions OBJECT IDENTIFIER ::= {id-cmc 8}\n    AddExtensions\
    \ ::= SEQUENCE {\n        pkiDataReference    BodyPartID,\n        certReferences\
    \      SEQUENCE OF BodyPartID,\n        extensions          SEQUENCE OF Extension\n\
    \    }\n    id-cmc-encryptedPOP OBJECT IDENTIFIER ::= {id-cmc 9}\n    id-cmc-decryptedPOP\
    \ OBJECT IDENTIFIER ::= {id-cmc 10}\n    EncryptedPOP ::= SEQUENCE {\n       \
    \         request       TaggedRequest,\n        cms             ContentInfo,\n\
    \        thePOPAlgID     AlgorithmIdentifier,\n        witnessAlgID    AlgorithmIdentifier,\n\
    \        witness         OCTET STRING\n    }\n    DecryptedPOP ::= SEQUENCE {\n\
    \        bodyPartID      BodyPartID,\n        thePOPAlgID     AlgorithmIdentifier,\n\
    \        thePOP          OCTET STRING\n    }\n    id-cmc-lraPOPWitness OBJECT\
    \ IDENTIFIER ::= {id-cmc 11}\n    LraPopWitness ::= SEQUENCE {\n        pkiDataBodyid\
    \   BodyPartID,\n        bodyIds         SEQUENCE OF BodyPartID\n    }\n    --\n\
    \    id-cmc-getCert OBJECT IDENTIFIER ::= {id-cmc 15}\n    GetCert ::= SEQUENCE\
    \ {\n        issuerName      GeneralName,\n        serialNumber    INTEGER }\n\
    \    id-cmc-getCRL OBJECT IDENTIFIER ::= {id-cmc 16}\n    GetCRL ::= SEQUENCE\
    \ {\n        issuerName    Name,\n        cRLName       GeneralName OPTIONAL,\n\
    \        time          GeneralizedTime OPTIONAL,\n        reasons       ReasonFlags\
    \ OPTIONAL }\n    id-cmc-revokeRequest OBJECT IDENTIFIER ::= {id-cmc 17}\n   \
    \ RevRequest ::= SEQUENCE {\n        issuerName            Name,\n        serialNumber\
    \          INTEGER,\n        reason                CRLReason,\n       invalidityDate\
    \         GeneralizedTime OPTIONAL,\n        passphrase            OCTET STRING\
    \ OPTIONAL,\n        comment               UTF8String OPTIONAL }\n   id-cmc-confirmCertAcceptance\
    \ OBJECT IDENTIFIER ::= {pkix-cmc 24}\n   CMCCertId ::= IssuerSerial\n   -- The\
    \ following is used to request V3 extensions be added to a\n"
- title: certificate
  contents:
  - "certificate\n   id-ExtensionReq OBJECT IDENTIFIER ::= {iso(1) member-body(2)\
    \ us(840)\n        rsadsi(113549) pkcs(1) pkcs-9(9) 14}\n   ExtensionReq ::= SEQUENCE\
    \ OF Extension\n   -- The following exists to allow Diffie-Hellman Certificate\
    \ Requests\n"
- title: Messages to be
  contents:
  - "Messages to be\n   -- well-formed\n   id-alg-noSignature OBJECT IDENTIFIER ::=\
    \ {id-pkix id-alg(6) 2}\n   NoSignatureValue ::= OCTET STRING\n"
- title: END
  contents:
  - 'END

    '
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
