- title: __initial_text__
  contents:
  - "           Guidelines for Authors and Reviewers of Documents\n              \
    \        Containing YANG Data Models\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo provides guidelines for authors and reviewers of\n   specifications\
    \ containing YANG modules.  Recommendations and\n   procedures are defined, which\
    \ are intended to increase\n   interoperability and usability of Network Configuration\
    \ Protocol\n   (NETCONF) and RESTCONF protocol implementations that utilize YANG\n\
    \   modules.  This document obsoletes RFC 6087.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 7841.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8407.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Changes since RFC 6087  . . . . . . . . . . . . .\
    \ . . . .   5\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   6\n     2.1.  NETCONF Terms . . . . . . . . . . . . . . . . . . . .\
    \ . .   7\n     2.2.  YANG Terms  . . . . . . . . . . . . . . . . . . . . . .\
    \ .   7\n     2.3.  NMDA Terms  . . . . . . . . . . . . . . . . . . . . . . .\
    \   7\n     2.4.  Requirements Notation . . . . . . . . . . . . . . . . . .  \
    \ 8\n   3.  General Documentation Guidelines  . . . . . . . . . . . . . .   8\n\
    \     3.1.  Module Copyright  . . . . . . . . . . . . . . . . . . . .   9\n  \
    \   3.2.  Code Components . . . . . . . . . . . . . . . . . . . . .   9\n    \
    \   3.2.1.  Example Modules . . . . . . . . . . . . . . . . . . .   9\n     3.3.\
    \  Terminology Section . . . . . . . . . . . . . . . . . . .  10\n     3.4.  Tree\
    \ Diagrams . . . . . . . . . . . . . . . . . . . . . .  10\n     3.5.  Narrative\
    \ Sections  . . . . . . . . . . . . . . . . . . .  10\n     3.6.  Definitions\
    \ Section . . . . . . . . . . . . . . . . . . .  11\n     3.7.  Security Considerations\
    \ Section . . . . . . . . . . . . .  11\n       3.7.1.  Security Considerations\
    \ Section Template  . . . . . .  12\n     3.8.  IANA Considerations Section .\
    \ . . . . . . . . . . . . . .  13\n       3.8.1.  Documents That Create a New\
    \ Namespace . . . . . . . .  14\n       3.8.2.  Documents That Extend an Existing\
    \ Namespace . . . . .  14\n     3.9.  References Sections . . . . . . . . . .\
    \ . . . . . . . . .  14\n     3.10. Validation Tools  . . . . . . . . . . . .\
    \ . . . . . . . .  14\n     3.11. Module Extraction Tools . . . . . . . . . .\
    \ . . . . . . .  15\n     3.12. Module Usage Examples . . . . . . . . . . . .\
    \ . . . . . .  15\n   4.  YANG Usage Guidelines . . . . . . . . . . . . . . .\
    \ . . . . .  15\n     4.1.  Module Naming Conventions . . . . . . . . . . . .\
    \ . . . .  16\n     4.2.  Prefixes  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  17\n     4.3.  Identifiers . . . . . . . . . . . . . . . . . . . . .\
    \ . .  18\n       4.3.1.  Identifier Naming Conventions . . . . . . . . . . .\
    \ .  18\n     4.4.  Defaults  . . . . . . . . . . . . . . . . . . . . . . . .\
    \  19\n     4.5.  Conditional Statements  . . . . . . . . . . . . . . . . .  19\n\
    \     4.6.  XPath Usage . . . . . . . . . . . . . . . . . . . . . . .  20\n  \
    \     4.6.1.  XPath Evaluation Contexts . . . . . . . . . . . . . .  20\n    \
    \   4.6.2.  Function Library  . . . . . . . . . . . . . . . . . .  21\n      \
    \ 4.6.3.  Axes  . . . . . . . . . . . . . . . . . . . . . . . .  22\n       4.6.4.\
    \  Types . . . . . . . . . . . . . . . . . . . . . . . .  23\n       4.6.5.  Wildcards\
    \ . . . . . . . . . . . . . . . . . . . . . .  24\n       4.6.6.  Boolean Expressions\
    \ . . . . . . . . . . . . . . . . .  24\n     4.7.  YANG Definition Lifecycle\
    \ Management  . . . . . . . . . .  25\n     4.8.  Module Header, Meta, and Revision\
    \ Statements  . . . . . .  26\n     4.9.  Namespace Assignments . . . . . . .\
    \ . . . . . . . . . . .  28\n     4.10. Top-Level Data Definitions  . . . . .\
    \ . . . . . . . . . .  29\n     4.11. Data Types  . . . . . . . . . . . . . .\
    \ . . . . . . . . .  30\n       4.11.1.  Fixed-Value Extensibility  . . . . .\
    \ . . . . . . . .  30\n       4.11.2.  Patterns and Ranges  . . . . . . . . .\
    \ . . . . . . .  31\n       4.11.3.  Enumerations and Bits  . . . . . . . . .\
    \ . . . . . .  32\n       4.11.4.  Union Types  . . . . . . . . . . . . . . .\
    \ . . . . .  33\n       4.11.5.  Empty and Boolean  . . . . . . . . . . . . .\
    \ . . . .  34\n     4.12. Reusable Type Definitions . . . . . . . . . . . . .\
    \ . . .  35\n     4.13. Reusable Groupings  . . . . . . . . . . . . . . . . .\
    \ . .  35\n     4.14. Data Definitions  . . . . . . . . . . . . . . . . . . .\
    \ .  36\n       4.14.1.  Non-Presence Containers  . . . . . . . . . . . . . .\
    \  38\n       4.14.2.  Top-Level Data Nodes . . . . . . . . . . . . . . . .  38\n\
    \     4.15. Operation Definitions . . . . . . . . . . . . . . . . . .  39\n  \
    \   4.16. Notification Definitions  . . . . . . . . . . . . . . . .  39\n    \
    \ 4.17. Feature Definitions . . . . . . . . . . . . . . . . . . .  40\n     4.18.\
    \ YANG Data Node Constraints  . . . . . . . . . . . . . . .  41\n       4.18.1.\
    \  Controlling Quantity . . . . . . . . . . . . . . . .  41\n       4.18.2.  \"\
    must\" versus \"when\" . . . . . . . . . . . . . . . .  41\n     4.19. \"augment\"\
    \ Statements  . . . . . . . . . . . . . . . . . .  41\n       4.19.1.  Conditional\
    \ Augment Statements . . . . . . . . . . .  41\n       4.19.2.  Conditionally\
    \ Mandatory Data Definition Statements .  42\n     4.20. Deviation Statements\
    \  . . . . . . . . . . . . . . . . . .  43\n     4.21. Extension Statements  .\
    \ . . . . . . . . . . . . . . . . .  44\n     4.22. Data Correlation  . . . .\
    \ . . . . . . . . . . . . . . . .  45\n       4.22.1.  Use of \"leafref\" for\
    \ Key Correlation . . . . . . . .  46\n     4.23. Operational State . . . . .\
    \ . . . . . . . . . . . . . . .  47\n       4.23.1.  Combining Operational State\
    \ and Configuration Data .  47\n       4.23.2.  Representing Operational Values\
    \ of Configuration\n                Data . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  47\n       4.23.3.  NMDA Transition Guidelines . . . . . . . . .\
    \ . . . .  48\n     4.24. Performance Considerations  . . . . . . . . . . . .\
    \ . . .  52\n     4.25. Open Systems Considerations . . . . . . . . . . . . .\
    \ . .  52\n     4.26. Guidelines for Constructs Specific to YANG 1.1  . . . .\
    \ .  53\n       4.26.1.  Importing Multiple Revisions . . . . . . . . . . . .\
    \  53\n       4.26.2.  Using Feature Logic  . . . . . . . . . . . . . . . .  53\n\
    \       4.26.3.  \"anyxml\" versus \"anydata\"  . . . . . . . . . . . . .  53\n\
    \       4.26.4.  \"action\" versus \"rpc\"  . . . . . . . . . . . . . . .  53\n\
    \     4.27. Updating YANG Modules (Published versus Unpublished)  . .  54\n  \
    \ 5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  55\n   6.\
    \  Security Considerations . . . . . . . . . . . . . . . . . . .  55\n   7.  References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  56\n     7.1.  Normative\
    \ References  . . . . . . . . . . . . . . . . . .  56\n     7.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  57\n   Appendix A.  Module Review\
    \ Checklist  . . . . . . . . . . . . . .  59\n   Appendix B.  YANG Module Template\
    \ . . . . . . . . . . . . . . . .  61\n   Acknowledgments . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  62\n   Author's Address  . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  63\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The standardization of network configuration interfaces\
    \ for use with\n   network configuration management protocols, such as the Network\n\
    \   Configuration Protocol [RFC6241] and the RESTCONF protocol [RFC8040],\n  \
    \ requires a modular set of data models that can be reused and extended\n   over\
    \ time.\n   This document defines a set of usage guidelines for documents\n  \
    \ containing YANG 1.1 [RFC7950] and YANG 1.0 [RFC6020] data models.\n   YANG is\
    \ used to define the data structures, protocol operations, and\n   notification\
    \ content used within a NETCONF and/or RESTCONF server.  A\n   NETCONF or RESTCONF\
    \ server that supports a particular YANG module\n   will support client NETCONF\
    \ and/or RESTCONF operation requests, as\n   indicated by the specific content\
    \ defined in the YANG module.\n   Many YANG constructs are defined as optional\
    \ to use, such as the\n   \"description\" statement.  However, in order to make\
    \ YANG modules more\n   useful, it is desirable to define a set of usage guidelines\
    \ that\n   entails a higher level of compliance than the minimum level defined\n\
    \   in the YANG specification [RFC7950].\n   In addition, YANG allows constructs\
    \ such as infinite length\n   identifiers and string values, or top-level mandatory\
    \ nodes, that a\n   compliant server is not required to support.  Only constructs\
    \ that\n   all servers are required to support can be used in IETF YANG modules.\n\
    \   This document defines usage guidelines related to the NETCONF\n   operations\
    \ layer and NETCONF content layer, as defined in [RFC6241],\n   and the RESTCONF\
    \ methods and RESTCONF resources, as defined in\n   [RFC8040].\n   These guidelines\
    \ are intended to be used by authors and reviewers to\n   improve the readability\
    \ and interoperability of published YANG data\n   models.\n   Note that this document\
    \ is not a YANG tutorial, and the reader is\n   expected to know the YANG data\
    \ modeling language before implementing\n   the guidance in this document.\n"
- title: 1.1.  Changes since RFC 6087
  contents:
  - "1.1.  Changes since RFC 6087\n   The following changes have been made to the\
    \ guidelines published in\n   [RFC6087]:\n   o  Updated NETCONF reference from\
    \ RFC 4741 to RFC 6241\n   o  Updated NETCONF over the Secure Shell (SSH) citation\
    \ from RFC 4742\n      to RFC 6242\n   o  Updated YANG Types reference from RFC\
    \ 6021 to RFC 6991\n   o  Updated obsolete URLs for IETF resources\n   o  Changed\
    \ top-level data node guideline\n   o  Clarified XML Path Language (XPath) usage\
    \ for a literal value\n      representing a YANG identity\n   o  Clarified XPath\
    \ usage for a when-stmt\n   o  Clarified XPath usage for \"preceding-sibling\"\
    \ and\n      \"following-sibling\" axes\n   o  Added terminology guidelines\n\
    \   o  Added mention of RFC 8174, which updates RFC 2119 by clarifying\n     \
    \ the use of capitalized key words\n   o  Added YANG tree diagram guidelines\n\
    \   o  Updated XPath guidelines for type conversions and function library\n  \
    \    usage\n   o  Updated \"Data Types\" section\n   o  Updated \"Notification\
    \ Definitions\" section\n   o  Clarified conditional key leaf nodes\n   o  Clarified\
    \ usage of \"uint64\" and \"int64\" data types\n   o  Added text on YANG feature\
    \ usage\n   o  Added \"Identifier Naming Conventions\" section\n   o  Clarified\
    \ use of mandatory nodes with conditional augmentations\n   o  Clarified namespace\
    \ and domain conventions for example modules\n   o  Clarified conventions for\
    \ identifying code components\n   o  Added YANG 1.1 guidelines\n   o  Added \"\
    YANG Data Node Constraints\" section\n   o  Added mention of the RESTCONF protocol\n\
    \   o  Added guidelines for datastores revised by the Network Management\n   \
    \   Datastore Architecture (NMDA)\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The following terms are used throughout this document:\n\
    \   o  published: A stable release of a module or submodule.  For\n      example,\
    \ the \"Request for Comments\" described in Section 2.1 of\n      [RFC2026] is\
    \ considered a stable publication.\n   o  unpublished: An unstable release of\
    \ a module or submodule.  For\n      example the \"Internet-Draft\" described\
    \ in Section 2.2 of [RFC2026]\n      is considered an unstable publication that\
    \ is a work in progress,\n      subject to change at any time.\n   o  YANG fragment:\
    \ A set of YANG statements that are not intended to\n      represent a complete\
    \ YANG module or submodule.  These statements\n      are not intended for actual\
    \ use, except to provide an example of\n      YANG statement usage.  The invalid\
    \ syntax \"...\" is sometimes used\n      to indicate that additional YANG statements\
    \ would be present in a\n      real YANG module.\n   o  YANG tree diagram: A diagram\
    \ representing the contents of a YANG\n      module, as defined in [RFC8340].\
    \  It is also called a \"tree\n      diagram\".\n"
- title: 2.1.  NETCONF Terms
  contents:
  - "2.1.  NETCONF Terms\n   The following terms are defined in [RFC6241] and are\
    \ not redefined\n   here:\n   o  capabilities\n   o  client\n   o  operation\n\
    \   o  server\n"
- title: 2.2.  YANG Terms
  contents:
  - "2.2.  YANG Terms\n   The following terms are defined in [RFC7950] and are not\
    \ redefined\n   here:\n   o  data node\n   o  module\n   o  namespace\n   o  submodule\n\
    \   o  version\n   o  YANG\n   o  YIN\n   Note that the term 'module' may be used\
    \ as a generic term for a YANG\n   module or submodule.  When describing properties\
    \ that are specific to\n   submodules, the term 'submodule' is used instead.\n"
- title: 2.3.  NMDA Terms
  contents:
  - "2.3.  NMDA Terms\n   The following terms are defined in [RFC8342] and are not\
    \ redefined\n   here:\n   o  configuration\n   o  conventional configuration datastore\n\
    \   o  datastore\n   o  operational state\n   o  operational state datastore\n"
- title: 2.4.  Requirements Notation
  contents:
  - "2.4.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 3.  General Documentation Guidelines
  contents:
  - "3.  General Documentation Guidelines\n   YANG modules under review are likely\
    \ to be contained in Internet-\n   Drafts (I-Ds).  All guidelines for I-D authors\
    \ [ID-Guidelines] MUST\n   be followed.  The guidelines for RFCs should be followed\
    \ and are\n   defined in the following: [RFC7322] (and any future RFCs that\n\
    \   obsolete it), [RFC-STYLE], and [RFC7841].\n   The following sections MUST\
    \ be present in an I-D containing a module:\n   o  Narrative sections\n   o  Definition\
    \ sections\n   o  Security Considerations section\n   o  IANA Considerations section\n\
    \   o  References section\n   There are three usage scenarios for YANG that can\
    \ appear in an I-D or\n   RFC:\n   o  normative module or submodule\n   o  example\
    \ module or submodule\n   o  example YANG fragment not part of any module or submodule\n\
    \   The guidelines in this document refer mainly to a normative module or\n  \
    \ submodule but may be applicable to example modules and YANG fragments\n   as\
    \ well.\n"
- title: 3.1.  Module Copyright
  contents:
  - "3.1.  Module Copyright\n   The module \"description\" statement MUST contain\
    \ a reference to the\n   latest approved IETF Trust Copyright statement, which\
    \ is available\n   online at:\n       <https://trustee.ietf.org/license-info/>\n"
- title: 3.2.  Code Components
  contents:
  - "3.2.  Code Components\n   Each normative YANG module or submodule contained within\
    \ an I-D or\n   RFC is considered to be a code component.  The strings \"<CODE\n\
    \   BEGINS>\" and \"<CODE ENDS>\" MUST be used to identify each code\n   component.\n\
    \   The \"<CODE BEGINS>\" tag SHOULD be followed by a string identifying\n   the\
    \ file name specified in Section 5.2 of [RFC7950].  The name string\n   form that\
    \ includes the revision date SHOULD be used.  The revision\n   date MUST match\
    \ the date used in the most recent revision of the\n   module.\n   The following\
    \ example is for the \"2016-03-20\" revision of the\n   \"ietf-foo\" module:\n\
    \   <CODE BEGINS> file \"ietf-foo@2016-03-20.yang\"\n       module ietf-foo {\n\
    \         namespace \"urn:ietf:params:xml:ns:yang:ietf-foo\";\n         prefix\
    \ \"foo\";\n         organization \"...\";\n         contact \"...\";\n      \
    \   description \"...\";\n         revision 2016-03-20 {\n           description\
    \ \"Latest revision\";\n           reference \"RFC XXXX: Foo Protocol\";\n   \
    \      }\n         // ... more statements\n       }\n   <CODE ENDS>\n"
- title: 3.2.1.  Example Modules
  contents:
  - "3.2.1.  Example Modules\n   Example modules are not code components.  The <CODE\
    \ BEGINS>\n   convention MUST NOT be used for example modules.\n   An example\
    \ module SHOULD be named using the term \"example\", followed\n   by a hyphen,\
    \ followed by a descriptive name, e.g., \"example-toaster\".\n   See Section 4.9\
    \ regarding the namespace guidelines for example\n   modules.\n"
- title: 3.3.  Terminology Section
  contents:
  - "3.3.  Terminology Section\n   A terminology section MUST be present if any terms\
    \ are defined in the\n   document or if any terms are imported from other documents.\n"
- title: 3.4.  Tree Diagrams
  contents:
  - "3.4.  Tree Diagrams\n   YANG tree diagrams provide a concise representation of\
    \ a YANG module\n   and SHOULD be included to help readers understand YANG module\n\
    \   structure.  Guidelines on tree diagrams can be found in Section 3 of\n   [RFC8340].\n\
    \   If YANG tree diagrams are used, then an informative reference to the\n   YANG\
    \ tree diagrams specification MUST be included in the document.\n   Refer to Section\
    \ 2.2 of [RFC8349] for an example of such a reference.\n"
- title: 3.5.  Narrative Sections
  contents:
  - "3.5.  Narrative Sections\n   The narrative part MUST include an overview section\
    \ that describes\n   the scope and field of application of the module(s) defined\
    \ by the\n   specification and that specifies the relationship (if any) of these\n\
    \   modules to other standards, particularly to standards containing\n   other\
    \ YANG modules.  The narrative part SHOULD include one or more\n   sections to\
    \ briefly describe the structure of the modules defined in\n   the specification.\n\
    \   If the module or modules defined by the specification imports\n   definitions\
    \ from other modules (except for those defined in [RFC7950]\n   or [RFC6991])\
    \ or are always implemented in conjunction with other\n   modules, then those\
    \ facts MUST be noted in the overview section; any\n   special interpretations\
    \ of definitions in other modules MUST be noted\n   as well.  Refer to Section\
    \ 2.3 of [RFC8349] for an example of this\n   overview section.\n   If the document\
    \ contains a YANG module(s) that is compliant with NMDA\n   [RFC8342], then the\
    \ Introduction section should mention this fact.\n   Example:\n     The YANG data\
    \ model in this document conforms to the Network\n     Management Datastore Architecture\
    \ defined in\n     RFC 8342.\n   Consistent indentation SHOULD be used for all\
    \ examples, including\n   YANG fragments and protocol message instance data. \
    \ If line wrapping\n   is done for formatting purposes, then this SHOULD be noted,\
    \ as shown\n   in the following example:\n      [note: '\\' line wrapping for\
    \ formatting only]\n      <myleaf xmlns=\"tag:example.com,2017:example-two\">\\\
    \n        this is a long value so the line needs to wrap to stay\\\n        within\
    \ 72 characters\\\n      </myleaf>\n"
- title: 3.6.  Definitions Section
  contents:
  - "3.6.  Definitions Section\n   This section contains the module(s) defined by\
    \ the specification.\n   These modules SHOULD be written using the YANG 1.1 [RFC7950]\
    \ syntax.\n   YANG 1.0 [RFC6020] syntax MAY be used if no YANG 1.1 constructs\
    \ or\n   semantics are needed in the module.  If any of the imported YANG\n  \
    \ modules are written using YANG 1.1, then the module MUST be written\n   using\
    \ YANG 1.1.\n   A YIN syntax version of the module MAY also be present in the\n\
    \   document.  There MAY also be other types of modules present in the\n   document,\
    \ such as Structure of Management Information Version 2\n   (SMIv2), which are\
    \ not affected by these guidelines.\n   Note that if the module itself is considered\
    \ normative and not an\n   example module or example YANG fragment, then all YANG\
    \ statements\n   within a YANG module are considered normative.  The use of keywords\n\
    \   defined in [RFC2119] and [RFC8174] apply to YANG \"description\"\n   statements\
    \ in normative modules exactly as they would in any other\n   normative section.\n\
    \   Example YANG modules and example YANG fragments MUST NOT contain any\n   normative\
    \ text, including any all-uppercase reserved words from\n   [RFC2119] and [RFC8174].\n\
    \   Consistent indentation and formatting SHOULD be used in all YANG\n   statements\
    \ within a module.\n   See Section 4 for guidelines on YANG usage.\n"
- title: 3.7.  Security Considerations Section
  contents:
  - "3.7.  Security Considerations Section\n   Each specification that defines one\
    \ or more modules MUST contain a\n   section that discusses security considerations\
    \ relevant to those\n   modules.\n   This section MUST be patterned after the\
    \ latest approved template\n   (available at <https://trac.ietf.org/trac/ops/wiki/yang-security-\n\
    \   guidelines>).  Section 3.7.1 contains the security considerations\n   template\
    \ dated 2013-05-08 and last updated on 2018-07-02.  Authors\n   MUST check the\
    \ web page at the URL listed above in case there is a\n   more recent version\
    \ available.\n   In particular:\n   o  Writable data nodes that could be especially\
    \ disruptive if abused\n      MUST be explicitly listed by name, and the associated\
    \ security\n      risks MUST be explained.\n   o  Readable data nodes that contain\
    \ especially sensitive information\n      or that raise significant privacy concerns\
    \ MUST be explicitly\n      listed by name, and the reasons for the sensitivity/privacy\n\
    \      concerns MUST be explained.\n   o  Operations (i.e., YANG \"rpc\" statements)\
    \ that are potentially\n      harmful to system behavior or that raise significant\
    \ privacy\n      concerns MUST be explicitly listed by name, and the reasons for\n\
    \      the sensitivity/privacy concerns MUST be explained.\n"
- title: 3.7.1.  Security Considerations Section Template
  contents:
  - "3.7.1.  Security Considerations Section Template\n   X.  Security Considerations\n\
    \   The YANG module specified in this document defines a schema for data\n   that\
    \ is designed to be accessed via network management protocols such\n   as NETCONF\
    \ [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF layer\n   is the secure\
    \ transport layer, and the mandatory-to-implement secure\n   transport is Secure\
    \ Shell (SSH) [RFC6242].  The lowest RESTCONF layer\n   is HTTPS, and the mandatory-to-implement\
    \ secure transport is TLS\n   [RFC8446].\n   The NETCONF access control model\
    \ [RFC8341] provides the means to\n   restrict access for particular NETCONF or\
    \ RESTCONF users to a\n   preconfigured subset of all available NETCONF or RESTCONF\
    \ protocol\n   operations and content.\n    -- if you have any writable data nodes\
    \ (those are all the\n    -- \"config true\" nodes, and remember, that is the\
    \ default)\n    -- describe their specific sensitivity or vulnerability.\n   There\
    \ are a number of data nodes defined in this YANG module that are\n   writable/creatable/deletable\
    \ (i.e., \"config true\", which is the\n   default).  These data nodes may be\
    \ considered sensitive or vulnerable\n   in some network environments.  Write\
    \ operations (e.g., edit-config)\n   to these data nodes without proper protection\
    \ can have a negative\n   effect on network operations.  These are the subtrees\
    \ and data nodes\n   and their sensitivity/vulnerability:\n   <list subtrees and\
    \ data nodes and state why they are sensitive>\n    -- for all YANG modules you\
    \ must evaluate whether any readable data\n    -- nodes (those are all the \"\
    config false\" nodes, but also all other\n    -- nodes, because they can also\
    \ be read via operations like get or\n    -- get-config) are sensitive or vulnerable\
    \ (for instance, if they\n    -- might reveal customer information or violate\
    \ personal privacy\n    -- laws such as those of the European Union if exposed\
    \ to\n    -- unauthorized parties)\n   Some of the readable data nodes in this\
    \ YANG module may be considered\n   sensitive or vulnerable in some network environments.\
    \  It is thus\n   important to control read access (e.g., via get, get-config,\
    \ or\n   notification) to these data nodes.  These are the subtrees and data\n\
    \   nodes and their sensitivity/vulnerability:\n   <list subtrees and data nodes\
    \ and state why they are sensitive>\n    -- if your YANG module has defined any\
    \ RPC operations\n    -- describe their specific sensitivity or vulnerability.\n\
    \   Some of the RPC operations in this YANG module may be considered\n   sensitive\
    \ or vulnerable in some network environments.  It is thus\n   important to control\
    \ access to these operations.  These are the\n   operations and their sensitivity/vulnerability:\n\
    \   <list RPC operations and state why they are sensitive>\n"
- title: 3.8.  IANA Considerations Section
  contents:
  - "3.8.  IANA Considerations Section\n   In order to comply with IESG policy as\
    \ set forth in\n   <https://www.ietf.org/id-info/checklist.html>, every I-D that\
    \ is\n   submitted to the IESG for publication MUST contain an IANA\n   Considerations\
    \ section.  The requirements for this section vary\n   depending on what actions\
    \ are required of the IANA.  If there are no\n   IANA considerations applicable\
    \ to the document, then the IANA\n   Considerations section will state that \"\
    This document has no IANA\n   actions\".  Refer to the guidelines in [RFC8126]\
    \ for more details.\n   Each normative YANG module MUST be registered in both\
    \ the \"IETF XML\n   Registry\" [RFC3688] [IANA-XML] and the \"YANG Module Names\"\
    \ registry\n   [RFC6020] [IANA-MOD-NAMES].  This applies to new modules and updated\n\
    \   modules.  An example of an update registration for the\n   \"ietf-template\"\
    \ module can be found in Section 5.\n"
- title: 3.8.1.  Documents That Create a New Namespace
  contents:
  - "3.8.1.  Documents That Create a New Namespace\n   If an I-D defines a new namespace\
    \ that is to be administered by the\n   IANA, then the document MUST include an\
    \ IANA Considerations section\n   that specifies how the namespace is to be administered.\n\
    \   Specifically, if any YANG module namespace statement value contained\n   in\
    \ the document is not already registered with IANA, then a new entry\n   in the\
    \ \"ns\" subregistry within the \"IETF XML Registry\" MUST be\n   requested from\
    \ the IANA.\n"
- title: 3.8.2.  Documents That Extend an Existing Namespace
  contents:
  - "3.8.2.  Documents That Extend an Existing Namespace\n   It is possible to extend\
    \ an existing namespace using a YANG submodule\n   that belongs to an existing\
    \ module already administered by IANA.  In\n   this case, the document containing\
    \ the main module MUST be updated to\n   use the latest revision of the submodule.\n"
- title: 3.9.  References Sections
  contents:
  - "3.9.  References Sections\n   For every import or include statement that appears\
    \ in a module\n   contained in the specification that identifies a module in a\
    \ separate\n   document, a corresponding normative reference to that document\
    \ MUST\n   appear in the Normative References section.  The reference MUST\n \
    \  correspond to the specific module version actually used within the\n   specification.\n\
    \   For every normative reference statement that appears in a module\n   contained\
    \ in the specification that identifies a separate document, a\n   corresponding\
    \ normative reference to that document SHOULD appear in\n   the Normative References\
    \ section.  The reference SHOULD correspond to\n   the specific document version\
    \ actually used within the specification.\n   If the reference statement identifies\
    \ an informative reference that\n   identifies a separate document, a corresponding\
    \ informative reference\n   to that document MAY appear in the Informative References\
    \ section.\n"
- title: 3.10.  Validation Tools
  contents:
  - "3.10.  Validation Tools\n   All modules need to be validated before submission\
    \ in an I-D.  The\n   'pyang' YANG compiler is freely available from GitHub:\n\
    \     <https://github.com/mbj4668/pyang>\n   If the 'pyang' compiler is used to\
    \ validate a normative module, then\n   the \"--ietf\" command-line option MUST\
    \ be used to identify any IETF\n   guideline issues.\n   If the 'pyang' compiler\
    \ is used to validate an example module, then\n   the \"--ietf\" command-line\
    \ option MAY be used to identify any IETF\n   guideline issues.\n   The \"yanglint\"\
    \ program is also freely available from GitHub.\n      <https://github.com/CESNET/libyang>\n\
    \   This tool can be used to validate XPath statements within YANG\n   modules.\n"
- title: 3.11.  Module Extraction Tools
  contents:
  - "3.11.  Module Extraction Tools\n   A version of 'rfcstrip' that will extract\
    \ YANG modules from an I-D or\n   RFC is available.  The 'rfcstrip' tool that\
    \ supports YANG module\n   extraction is freely available at:\n     <https://github.com/mbj4668/rfcstrip>\n\
    \   This tool can be used to verify that the \"<CODE BEGINS>\" and \"<CODE\n \
    \  ENDS>\" tags are used correctly and that the normative YANG modules\n   can\
    \ be extracted correctly.\n   The \"xym\" tool is freely available on GitHub and\
    \ can be used to\n   extract YANG modules from a document.\n      <https://github.com/xym-tool/xym>\n"
- title: 3.12.  Module Usage Examples
  contents:
  - "3.12.  Module Usage Examples\n   Each specification that defines one or more\
    \ modules SHOULD contain\n   usage examples, either throughout the document or\
    \ in an appendix.\n   This includes example instance document snippets in an appropriate\n\
    \   encoding (e.g., XML and/or JSON) to demonstrate the intended usage of\n  \
    \ the YANG module(s).  Example modules MUST be validated.  Refer to\n   Section\
    \ 3.10 for tools that validate YANG modules.  If IP addresses\n   are used, then\
    \ a mix of either IPv4 and IPv6 addresses or IPv6\n   addresses exclusively SHOULD\
    \ be used in the examples.\n"
- title: 4.  YANG Usage Guidelines
  contents:
  - "4.  YANG Usage Guidelines\n   Modules in IETF Standards Track specifications\
    \ MUST comply with all\n   syntactic and semantic requirements of YANG 1.1 [RFC7950].\
    \  See the\n   exception for YANG 1.0 in Section 3.6.  The guidelines in this\n\
    \   section are intended to supplement the YANG specification [RFC7950],\n   which\
    \ is intended to define a minimum set of conformance\n   requirements.\n   In\
    \ order to promote interoperability and establish a set of practices\n   based\
    \ on previous experience, the following sections establish usage\n   guidelines\
    \ for specific YANG constructs.\n   Only guidelines that clarify or restrict the\
    \ minimum conformance\n   requirements are included here.\n"
- title: 4.1.  Module Naming Conventions
  contents:
  - "4.1.  Module Naming Conventions\n   Normative modules contained in Standards\
    \ Track documents MUST be\n   named according to the guidelines in the IANA Considerations\
    \ section\n   of [RFC7950].\n   A distinctive word or abbreviation (e.g., protocol\
    \ name or working\n   group abbreviation) SHOULD be used in the module name. \
    \ If new\n   definitions are being defined to extend one or more existing modules,\n\
    \   then the same word or abbreviation should be reused, instead of\n   creating\
    \ a new one.\n   All published module names MUST be unique.  For a YANG module\n\
    \   published in an RFC, this uniqueness is guaranteed by IANA.  For\n   unpublished\
    \ modules, the authors need to check that no other work in\n   progress is using\
    \ the same module name.\n   Example modules are non-normative and SHOULD be named\
    \ with the prefix\n   \"example-\".\n   It is suggested that a stable prefix be\
    \ selected that represents the\n   entire organization.  All normative YANG modules\
    \ published by the\n   IETF MUST begin with the prefix \"ietf-\".  Another standards\n\
    \   organization, such as the IEEE, might use the prefix \"ieee-\" for all\n \
    \  YANG modules.\n   Once a module name is published, it MUST NOT be reused, even\
    \ if the\n   RFC containing the module is reclassified to \"Historic\" status.\
    \  A\n   module name cannot be changed in YANG, and this would be treated as a\n\
    \   new module, not a name change.\n"
- title: 4.2.  Prefixes
  contents:
  - "4.2.  Prefixes\n   All YANG definitions are scoped by the module containing the\n\
    \   definition being referenced.  This allows definitions from multiple\n   modules\
    \ to be used, even if the names are not unique.  In the example\n   below, the\
    \ identifier \"foo\" is used in all three modules:\n       module example-foo\
    \ {\n         namespace \"tag:example.com,2017:example-foo\";\n         prefix\
    \ f;\n         container foo;\n       }\n       module example-bar {\n       \
    \  namespace \"tag:example.com,2017:example-bar\";\n         prefix b;\n     \
    \    typedef foo { type uint32; }\n       }\n       module example-one {\n   \
    \      namespace \"tag:example.com,2017:example-one\";\n         prefix one;\n\
    \         import example-foo { prefix f; }\n         import example-bar { prefix\
    \ b; }\n         augment \"/f:foo\" {\n            leaf foo { type b:foo; }\n\
    \         }\n       }\n   YANG defines the following rules for prefix usage:\n\
    \   o  Prefixes are never used for built-in data types and YANG keywords.\n  \
    \ o  A prefix MUST be used for any external statement (i.e., a\n      statement\
    \ defined with the YANG \"extension\" statement).\n   o  The proper module prefix\
    \ MUST be used for all identifiers imported\n      from other modules.\n   o \
    \ The proper module prefix MUST be used for all identifiers included\n      from\
    \ a submodule.\n   The following guidelines apply to prefix usage of the current\
    \ (local)\n   module:\n   o  The local module prefix SHOULD be used instead of\
    \ no prefix in all\n      path expressions.\n   o  The local module prefix MUST\
    \ be used instead of no prefix in all\n      \"default\" statements for an \"\
    identityref\" or \"instance-identifier\"\n      data type.\n   o  The local module\
    \ prefix MAY be used for references to typedefs,\n      groupings, extensions,\
    \ features, and identities defined in the\n      module.\n   Prefix values SHOULD\
    \ be short but are also likely to be unique.\n   Prefix values SHOULD NOT conflict\
    \ with known modules that have been\n   previously published.\n"
- title: 4.3.  Identifiers
  contents:
  - "4.3.  Identifiers\n   Identifiers for all YANG identifiers in published modules\
    \ MUST be\n   between 1 and 64 characters in length.  These include any construct\n\
    \   specified as an \"identifier-arg-str\" token in the ABNF in Section 14\n \
    \  of [RFC7950].\n"
- title: 4.3.1.  Identifier Naming Conventions
  contents:
  - "4.3.1.  Identifier Naming Conventions\n   Identifiers SHOULD follow a consistent\
    \ naming pattern throughout the\n   module.  Only lowercase letters, numbers,\
    \ and dashes SHOULD be used\n   in identifier names.  Uppercase characters, the\
    \ period character, and\n   the underscore character MAY be used if the identifier\
    \ represents a\n   well-known value that uses these characters.  YANG does not\
    \ permit\n   any other characters in YANG identifiers.\n   Identifiers SHOULD\
    \ include complete words and/or well-known acronyms\n   or abbreviations.  Child\
    \ nodes within a container or list SHOULD NOT\n   replicate the parent identifier.\
    \  YANG identifiers are hierarchical\n   and are only meant to be unique within\
    \ the set of sibling nodes\n   defined in the same module namespace.\n   It is\
    \ permissible to use common identifiers such as \"name\" or \"id\" in\n   data\
    \ definition statements, especially if these data nodes share a\n   common data\
    \ type.\n   Identifiers SHOULD NOT carry any special semantics that identify data\n\
    \   modeling properties.  Only YANG statements and YANG extension\n   statements\
    \ are designed to convey machine-readable data modeling\n   properties.  For example,\
    \ naming an object \"config\" or \"state\" does\n   not change whether it is configuration\
    \ data or state data.  Only\n   defined YANG statements or YANG extension statements\
    \ can be used to\n   assign semantics in a machine-readable format in YANG.\n"
- title: 4.4.  Defaults
  contents:
  - "4.4.  Defaults\n   In general, it is suggested that substatements containing\
    \ very common\n   default values SHOULD NOT be present.  The following substatements\n\
    \   are commonly used with the default value, which would make the module\n  \
    \ difficult to read if used everywhere they are allowed.\n                   \
    \  +--------------+---------------+\n                     | Statement    | Default\
    \ Value |\n                     +--------------+---------------+\n           \
    \          | config       | true          |\n                     | mandatory\
    \    | false         |\n                     | max-elements | unbounded     |\n\
    \                     | min-elements | 0             |\n                     |\
    \ ordered-by   | system        |\n                     | status       | current\
    \       |\n                     | yin-element  | false         |\n           \
    \          +--------------+---------------+\n                            Statement\
    \ Defaults\n"
- title: 4.5.  Conditional Statements
  contents:
  - "4.5.  Conditional Statements\n   A module may be conceptually partitioned in\
    \ several ways, using the\n   \"if-feature\" and/or \"when\" statements.\n   Data\
    \ model designers need to carefully consider all modularity\n   aspects, including\
    \ the use of YANG conditional statements.\n   If a data definition is optional,\
    \ depending on server support for a\n   NETCONF or RESTCONF protocol capability,\
    \ then a YANG \"feature\"\n   statement SHOULD be defined.  The defined \"feature\"\
    \ statement SHOULD\n   then be used in the conditional \"if-feature\" statement\
    \ referencing\n   the optional data definition.\n   If any notification data,\
    \ or any data definition, for a non-\n   configuration data node is not mandatory,\
    \ then the server may or may\n   not be required to return an instance of this\
    \ data node.  If any\n   conditional requirements exist for returning the data\
    \ node in a\n   notification payload or retrieval request, they MUST be documented\n\
    \   somewhere.  For example, a \"when\" or \"if-feature\" statement could\n  \
    \ apply to the data node, or the conditional requirements could be\n   explained\
    \ in a \"description\" statement within the data node or one of\n   its ancestors\
    \ (if any).\n   If any \"if-feature\" statements apply to a list node, then the\
    \ same\n   \"if-feature\" statements MUST apply to any key leaf nodes for the\n\
    \   list.  There MUST NOT be any \"if-feature\" statements applied to any\n  \
    \ key leafs that do not also apply to the parent list node.\n   There SHOULD NOT\
    \ be any \"when\" statements applied to a key leaf node.\n   It is possible that\
    \ a \"when\" statement for an ancestor node of a key\n   leaf will have the exact\
    \ node-set result as the key leaf.  In such a\n   case, the \"when\" statement\
    \ for the key leaf is redundant and SHOULD\n   be avoided.\n"
- title: 4.6.  XPath Usage
  contents:
  - "4.6.  XPath Usage\n   This section describes guidelines for using the XML Path\
    \ Language\n   (XPath) [W3C.REC-xpath] within YANG modules.\n"
- title: 4.6.1.  XPath Evaluation Contexts
  contents:
  - "4.6.1.  XPath Evaluation Contexts\n   YANG defines five separate contexts for\
    \ evaluation of XPath\n   statements:\n   1.  The \"running\" datastore: collection\
    \ of all YANG configuration\n       data nodes.  The document root is the conceptual\
    \ container (e.g.,\n       \"config\" in the \"edit-config\" operation), which\
    \ is the parent of\n       all top-level data definition statements with a \"\
    config\"\n       statement value of \"true\".\n   2.  State data + the \"running\"\
    \ datastore: collection of all YANG data\n       nodes.  The document root is\
    \ the conceptual container, parent of\n       all top-level data definition statements.\n\
    \   3.  Notification: an event notification document.  The document root\n   \
    \    is the notification element.\n   4.  RPC Input: The document root is the\
    \ conceptual \"input\" node,\n       which is the parent of all RPC input parameter\
    \ definitions.\n   5.  RPC Output: The document root is the conceptual \"output\"\
    \ node,\n       which is the parent of all RPC output parameter definitions.\n\
    \   Note that these XPath contexts cannot be mixed.  For example, a\n   \"when\"\
    \ statement in a notification context cannot reference\n   configuration data.\n\
    \       notification foo {\n         leaf mtu {\n           // NOT okay because\
    \ when-stmt context is this notification\n           when \"/if:interfaces/if:interface[name='eth0']\"\
    ;\n           type leafref {\n             // Okay because path-stmt has a different\
    \ context\n             path \"/if:interfaces/if:interface/if:mtu\";\n       \
    \    }\n         }\n       }\n   It is especially important to consider the XPath\
    \ evaluation context\n   for XPath expressions defined in groupings.  An XPath\
    \ expression\n   defined in a grouping may not be portable, meaning it cannot\
    \ be used\n   in multiple contexts and produce proper results.\n   If the XPath\
    \ expressions defined in a grouping are intended for a\n   particular context,\
    \ then this context SHOULD be identified in the\n   \"description\" statement\
    \ for the grouping.\n"
- title: 4.6.2.  Function Library
  contents:
  - "4.6.2.  Function Library\n   The \"position\" and \"last\" functions SHOULD NOT\
    \ be used.  This applies\n   to implicit use of the \"position\" function as well\
    \ (e.g.,\n   '//chapter[42]').  A server is only required to maintain the relative\n\
    \   XML document order of all instances of a particular user-ordered list\n  \
    \ or leaf-list.  The \"position\" and \"last\" functions MAY be used if\n   they\
    \ are evaluated in a context where the context node is a user-\n   ordered \"\
    list\" or \"leaf-list\".\n   The \"id\" function SHOULD NOT be used.  The \"ID\"\
    \ attribute is not\n   present in YANG documents, so this function has no meaning.\
    \  The YANG\n   compiler SHOULD return an empty string for this function.\n  \
    \ The \"namespace-uri\" and \"name\" functions SHOULD NOT be used.\n   Expanded\
    \ names in XPath are different than YANG.  A specific\n   canonical representation\
    \ of a YANG-expanded name does not exist.\n   The \"lang\" function SHOULD NOT\
    \ be used.  This function does not apply\n   to YANG because there is no \"lang\"\
    \ attribute set with the document.\n   The YANG compiler SHOULD return 'false'\
    \ for this function.\n   The \"local-name\", \"namespace-uri\", \"name\", \"string\"\
    , and \"number\"\n   functions SHOULD NOT be used if the argument is a node-set.\
    \  If so,\n   the function result will be determined by the document order of\
    \ the\n   node-set.  Since this order can be different on each server, the\n \
    \  function results can also be different.  Any function call that\n   implicitly\
    \ converts a node-set to a string will also have this issue.\n   The \"local-name\"\
    \ function SHOULD NOT be used to reference local names\n   outside of the YANG\
    \ module that defines the must or when expression\n   containing the \"local-name\"\
    \ function.  Example of a \"local-name\"\n   function that should not be used:\n\
    \      /*[local-name()='foo']\n   The \"derived-from-or-self\" function SHOULD\
    \ be used instead of an\n   equality expression for identityref values.  This\
    \ allows the\n   identities to be conceptually augmented.\n   Example:\n     \
    \ // do not use\n      when \"md-name-format = 'name-format-null'\";\n      //\
    \ this is preferred\n      when \"derived-from-or-self(md-name-format, 'name-format-null')\"\
    ;\n"
- title: 4.6.3.  Axes
  contents:
  - "4.6.3.  Axes\n   The \"attribute\" and \"namespace\" axes are not supported in\
    \ YANG and\n   MAY be empty in a NETCONF or RESTCONF server implementation.\n\
    \   The \"preceding\" and \"following\" axes SHOULD NOT be used.  These\n   constructs\
    \ rely on XML document order within a NETCONF or RESTCONF\n   server configuration\
    \ database, which may not be supported\n   consistently or produce reliable results\
    \ across implementations.\n   Predicate expressions based on static node properties\
    \ (e.g., element\n   name or value, and \"ancestor\" or \"descendant\" axes) SHOULD\
    \ be used\n   instead.  The \"preceding\" and \"following\" axes MAY be used if\n\
    \   document order is not relevant to the outcome of the expression\n   (e.g.,\
    \ check for global uniqueness of a parameter value).\n   The \"preceding-sibling\"\
    \ and \"following-sibling\" axes SHOULD NOT be\n   used; however, they MAY be\
    \ used if document order is not relevant to\n   the outcome of the expression.\n\
    \   A server is only required to maintain the relative XML document order\n  \
    \ of all instances of a particular user-ordered list or leaf-list.  The\n   \"\
    preceding-sibling\" and \"following-sibling\" axes MAY be used if they\n   are\
    \ evaluated in a context where the context node is a user-ordered\n   \"list\"\
    \ or \"leaf-list\".\n"
- title: 4.6.4.  Types
  contents:
  - "4.6.4.  Types\n   Data nodes that use the \"int64\" and \"uint64\" built-in type\
    \ SHOULD NOT\n   be used within numeric or boolean expressions.  There are boundary\n\
    \   conditions in which the translation from the YANG 64-bit type to an\n   XPath\
    \ number can cause incorrect results.  Specifically, an XPath\n   \"double\" precision\
    \ floating-point number cannot represent very large\n   positive or negative 64-bit\
    \ numbers because it only provides a total\n   precision of 53 bits.  The \"int64\"\
    \ and \"uint64\" data types MAY be\n   used in numeric expressions if the value\
    \ can be represented with no\n   more than 53 bits of precision.\n   Data modelers\
    \ need to be careful not to confuse the YANG value space\n   and the XPath value\
    \ space.  The data types are not the same in both,\n   and conversion between\
    \ YANG and XPath data types SHOULD be considered\n   carefully.\n   Explicit XPath\
    \ data type conversions MAY be used (e.g., \"string\",\n   \"boolean\", or \"\
    number\" functions), instead of implicit XPath data\n   type conversions.\n  \
    \ XPath expressions that contain a literal value representing a YANG\n   identity\
    \ SHOULD always include the declared prefix of the module\n   where the identity\
    \ is defined.\n   XPath expressions for \"when\" statements SHOULD NOT reference\
    \ the\n   context node or any descendant nodes of the context node.  They MAY\n\
    \   reference descendant nodes if the \"when\" statement is contained\n   within\
    \ an \"augment\" statement, and the referenced nodes are not\n   defined within\
    \ the \"augment\" statement.\n   Example:\n      augment \"/rt:active-route/rt:input/rt:destination-address\"\
    \ {\n         when \"rt:address-family='v4ur:ipv4-unicast'\" {\n           description\n\
    \             \"This augment is valid only for IPv4 unicast.\";\n         }\n\
    \         // nodes defined here within the augment-stmt\n         // cannot be\
    \ referenced in the when-stmt\n      }\n"
- title: 4.6.5.  Wildcards
  contents:
  - "4.6.5.  Wildcards\n   It is possible to construct XPath expressions that will\
    \ evaluate\n   differently when combined with several modules within a server\n\
    \   implementation rather than when evaluated within the single module.\n   This\
    \ is due to augmenting nodes from other modules.\n   Wildcard expansion is done\
    \ within a server against all the nodes from\n   all namespaces, so it is possible\
    \ for a \"must\" or \"when\" expression\n   that uses the '*' operator to always\
    \ evaluate to false if processed\n   within a single YANG module.  In such cases,\
    \ the \"description\"\n   statement SHOULD clarify that augmenting objects are\
    \ expected to\n   match the wildcard expansion.\n      when /foo/services/*/active\
    \ {\n        description\n          \"No services directly defined in this module.\n\
    \           Matches objects that have augmented the services container.\";\n \
    \     }\n"
- title: 4.6.6.  Boolean Expressions
  contents:
  - "4.6.6.  Boolean Expressions\n   The YANG \"must\" and \"when\" statements use\
    \ an XPath boolean expression\n   to define the test condition for the statement.\
    \  It is important to\n   specify these expressions in a way that will not cause\
    \ inadvertent\n   changes in the result if the objects referenced in the expression\
    \ are\n   updated in future revisions of the module.\n   For example, the leaf\
    \ \"foo2\" must exist if the leaf \"foo1\" is equal\n   to \"one\" or \"three\"\
    :\n        leaf foo1 {\n          type enumeration {\n             enum one;\n\
    \             enum two;\n             enum three;\n          }\n        }\n  \
    \      leaf foo2 {\n          // INCORRECT\n          must \"/f:foo1 != 'two'\"\
    ;\n          type string;\n        }\n        leaf foo2 {\n          // CORRECT\n\
    \          must \"/f:foo1 = 'one' or /f:foo1 = 'three'\";\n          type string;\n\
    \        }\n   In the next revision of the module, leaf \"foo1\" is extended with\
    \ a\n   new enum named \"four\":\n        leaf foo1 {\n          type enumeration\
    \ {\n             enum one;\n             enum two;\n             enum three;\n\
    \             enum four;\n          }\n        }\n   Now the first XPath expression\
    \ will allow the enum \"four\" to be\n   accepted in addition to the \"one\" and\
    \ \"three\" enum values.\n"
- title: 4.7.  YANG Definition Lifecycle Management
  contents:
  - "4.7.  YANG Definition Lifecycle Management\n   The YANG status statement MUST\
    \ be present within a definition if its\n   value is \"deprecated\" or \"obsolete\"\
    .  The status SHOULD NOT be\n   changed from \"current\" directly to \"obsolete\"\
    .  An object SHOULD be\n   available for at least one year with a \"deprecated\"\
    \ status before it\n   is changed to \"obsolete\".\n   The module or submodule\
    \ name MUST NOT be changed, once the document\n   containing the module or submodule\
    \ is published.\n   The module namespace URI value MUST NOT be changed, once the\
    \ document\n   containing the module is published.\n   The revision date substatement\
    \ within the import statement SHOULD be\n   present if any groupings are used\
    \ from the external module.\n   The revision date substatement within the include\
    \ statement SHOULD be\n   present if any groupings are used from the external\
    \ submodule.\n   If an import statement is for a module from a stable source (e.g.,\
    \ an\n   RFC for an IETF module), then a reference-stmt SHOULD be present\n  \
    \ within an import statement.\n        import ietf-yang-types {\n           prefix\
    \ yang;\n           reference \"RFC 6991: Common YANG Data Types\";\n        }\n\
    \   If submodules are used, then the document containing the main module\n   MUST\
    \ be updated so that the main module revision date is equal to or\n   more recent\
    \ than the revision date of any submodule that is (directly\n   or indirectly)\
    \ included by the main module.\n   Definitions for future use SHOULD NOT be specified\
    \ in a module.  Do\n   not specify placeholder objects like the \"reserved\" example\
    \ below:\n       leaf reserved {\n         type string;\n         description\n\
    \           \"This object has no purpose at this time, but a future\n        \
    \    revision of this module might define a purpose\n            for this object.\"\
    ;\n         }\n       }\n"
- title: 4.8.  Module Header, Meta, and Revision Statements
  contents:
  - "4.8.  Module Header, Meta, and Revision Statements\n   For published modules,\
    \ the namespace MUST be a globally unique URI,\n   as defined in [RFC3986].  This\
    \ value is usually assigned by the IANA.\n   The \"organization\" statement MUST\
    \ be present.  If the module is\n   contained in a document intended for IETF\
    \ Standards Track status,\n   then the organization SHOULD be the IETF working\
    \ group (WG) chartered\n   to write the document.  For other standards organizations,\
    \ a similar\n   approach is also suggested.\n   The \"contact\" statement MUST\
    \ be present.  If the module is contained\n   in a document intended for Standards\
    \ Track status, then the WG web\n   and mailing information SHOULD be present,\
    \ and the main document\n   author or editor contact information SHOULD be present.\
    \  If\n   additional authors or editors exist, their contact information MAY be\n\
    \   present.  There is no need to include the contact information for WG\n   Chairs.\n\
    \   The \"description\" statement MUST be present.  For modules published\n  \
    \ within IETF documents, the appropriate IETF Trust Copyright text MUST\n   be\
    \ present, as described in Section 3.1.\n   If the module relies on information\
    \ contained in other documents,\n   which are not the same documents implied by\
    \ the import statements\n   present in the module, then these documents MUST be\
    \ identified in the\n   reference statement.\n   A \"revision\" statement MUST\
    \ be present for each published version of\n   the module.  The \"revision\" statement\
    \ MUST have a \"reference\"\n   substatement.  It MUST identify the published\
    \ document that contains\n   the module.  Modules are often extracted from their\
    \ original\n   documents, and it is useful for developers and operators to know\
    \ how\n   to find the original source document in a consistent manner.  The\n\
    \   \"revision\" statement MAY have a \"description\" substatement.\n   The following\
    \ example shows the revision statement for a published\n   YANG module:\n    \
    \  revision \"2012-02-22\" {\n        description\n          \"Initial version\"\
    ;\n        reference\n          \"RFC 8341: Network Configuration\n          \
    \           Access Control Model\";\n      }\n   For an unpublished module, a\
    \ complete history of each unpublished\n   module revision is not required.  That\
    \ is, within a sequence of draft\n   versions, only the most recent revision need\
    \ be recorded in the\n   module.  Do not remove or reuse a revision statement\
    \ for a published\n   module.  A new revision date is not required unless the\
    \ module\n   contents have changed.  If the module contents have changed, then\
    \ the\n   revision date of that new module version MUST be updated to a date\n\
    \   later than that of the previous version.\n   The following example shows the\
    \ two revision statements for an\n   unpublished update to a published YANG module:\n\
    \      revision \"2017-12-11\" {\n        description\n          \"Added support\
    \ for YANG 1.1 actions and notifications tied to\n           data nodes.  Clarify\
    \ how NACM extensions can be used by other\n           data models.\";\n     \
    \   reference\n          \"RFC 8407: Network Configuration Protocol (NETCONF)\n\
    \                     Access Control Model\";\n      }\n      revision \"2012-02-22\"\
    \ {\n        description\n          \"Initial version\";\n        reference\n\
    \          \"RFC 8341: Network Configuration\n                     Access Control\
    \ Model\";\n      }\n"
- title: 4.9.  Namespace Assignments
  contents:
  - "4.9.  Namespace Assignments\n   It is RECOMMENDED that only valid YANG modules\
    \ be included in\n   documents, whether or not the modules are published yet.\
    \  This\n   allows:\n   o  the module to compile correctly instead of generating\
    \ disruptive\n      fatal errors.\n   o  early implementors to use the modules\
    \ without picking a random\n      value for the XML namespace.\n   o  early interoperability\
    \ testing since independent implementations\n      will use the same XML namespace\
    \ value.\n   Until a URI is assigned by the IANA, a proposed namespace URI MUST\
    \ be\n   provided for the namespace statement in a YANG module.  A value\n   SHOULD\
    \ be selected that is not likely to collide with other YANG\n   namespaces.  Standard\
    \ module names, prefixes, and URI strings already\n   listed in the \"YANG Module\
    \ Names\" registry MUST NOT be used.\n   A standard namespace statement value\
    \ SHOULD have the following form:\n       <URN prefix string>:<module-name>\n\
    \   The following URN prefix string SHOULD be used for published and\n   unpublished\
    \ YANG modules:\n       urn:ietf:params:xml:ns:yang:\n   The following example\
    \ URNs would be valid namespace statement values\n   for Standards Track modules:\n\
    \       urn:ietf:params:xml:ns:yang:ietf-netconf-partial-lock\n       urn:ietf:params:xml:ns:yang:ietf-netconf-state\n\
    \       urn:ietf:params:xml:ns:yang:ietf-netconf\n   Note that a different URN\
    \ prefix string SHOULD be used for modules\n   that are not Standards Track. \
    \ The string SHOULD be selected\n   according to the guidelines in [RFC7950].\n\
    \   The following URIs exemplify what might be used by modules that are\n   not\
    \ Standards Track.  Note that the domain \"example.com\" SHOULD be\n   used by\
    \ example modules in IETF I-Ds.  These URIs are not intended to\n   be dereferenced.\
    \  They are used for module namespace identification\n   only.\n   Example URIs\
    \ using URLs per [RFC3986]:\n       https://example.com/ns/example-interfaces\n\
    \       https://example.com/ns/example-system\n   Example URIs using tags per\
    \ [RFC4151]:\n       tag:example.com,2017:example-interfaces\n       tag:example.com,2017:example-system\n"
- title: 4.10.  Top-Level Data Definitions
  contents:
  - "4.10.  Top-Level Data Definitions\n   The top-level data organization SHOULD\
    \ be considered carefully, in\n   advance.  Data model designers need to consider\
    \ how the functionality\n   for a given protocol or protocol family will grow\
    \ over time.\n   The separation of configuration data and operational state SHOULD\
    \ be\n   considered carefully.  It is sometimes useful to define separate top-\n\
    \   level containers for configuration and non-configuration data.  For\n   some\
    \ existing top-level data nodes, configuration data was not in\n   scope, so only\
    \ one container representing operational state was\n   created.  Refer to NMDA\
    \ [RFC8342] for details.\n   The number of top-level data nodes within a module\
    \ SHOULD be\n   minimized.  It is often useful to retrieve related information\
    \ within\n   a single subtree.  If data is too distributed, it becomes difficult\n\
    \   to retrieve all at once.\n   The names and data organization SHOULD reflect\
    \ persistent\n   information, such as the name of a protocol.  The name of the\
    \ working\n   group SHOULD NOT be used because this may change over time.\n  \
    \ A mandatory database data definition is defined as a node that a\n   client\
    \ must provide for the database to be valid.  The server is not\n   required to\
    \ provide a value.\n   Top-level database data definitions MUST NOT be mandatory.\
    \  If a\n   mandatory node appears at the top level, it will immediately cause\n\
    \   the database to be invalid.  This can occur when the server boots or\n   when\
    \ a module is loaded dynamically at runtime.\n"
- title: 4.11.  Data Types
  contents:
  - "4.11.  Data Types\n   Selection of an appropriate data type (i.e., built-in type,\
    \ existing\n   derived type, or new derived type) is very subjective; therefore,\
    \ few\n   requirements can be specified on that subject.\n   Data model designers\
    \ SHOULD use the most appropriate built-in data\n   type for the particular application.\n\
    \   The signed numeric data types (i.e., \"int8\", \"int16\", \"int32\", and\n\
    \   \"int64\") SHOULD NOT be used unless negative values are allowed for\n   the\
    \ desired semantics.\n"
- title: 4.11.1.  Fixed-Value Extensibility
  contents:
  - "4.11.1.  Fixed-Value Extensibility\n   If the set of values is fixed and the\
    \ data type contents are\n   controlled by a single naming authority, then an\
    \ enumeration data\n   type SHOULD be used.\n       leaf foo {\n         type\
    \ enumeration {\n           enum one;\n           enum two;\n         }\n    \
    \   }\n   If extensibility of enumerated values is required, then the\n   \"identityref\"\
    \ data type SHOULD be used instead of an enumeration or\n   other built-in type.\n\
    \       identity foo-type {\n         description \"Base for the extensible type\"\
    ;\n       }\n       identity one {\n         base f:foo-type;\n       }\n    \
    \   identity two {\n         base f:foo-type;\n       }\n       leaf foo {\n \
    \        type identityref {\n           base f:foo-type;\n         }\n       }\n\
    \   Note that any module can declare an identity with base \"foo-type\"\n   that\
    \ is valid for the \"foo\" leaf.  Identityref values are considered\n   to be\
    \ qualified names.\n"
- title: 4.11.2.  Patterns and Ranges
  contents:
  - "4.11.2.  Patterns and Ranges\n   For string data types, if a machine-readable\
    \ pattern can be defined\n   for the desired semantics, then one or more pattern\
    \ statements SHOULD\n   be present.  A single-quoted string SHOULD be used to\
    \ specify the\n   pattern, since a double-quoted string can modify the content.\
    \  If the\n   patterns used in a type definition have known limitations such as\n\
    \   false negative or false positive matches, then these limitations\n   SHOULD\
    \ be documented within the typedef or data definition.\n   The following typedef\
    \ from [RFC6991] demonstrates the proper use of\n   the \"pattern\" statement:\n\
    \       typedef ipv4-address-no-zone {\n         type inet:ipv4-address {\n  \
    \         pattern '[0-9\\.]*';\n         }\n         ...\n       }\n   For string\
    \ data types, if the length of the string is required to be\n   bounded in all\
    \ implementations, then a length statement MUST be\n   present.\n   The following\
    \ typedef from [RFC6991] demonstrates the proper use of\n   the \"length\" statement:\n\
    \       typedef yang-identifier {\n         type string {\n           length \"\
    1..max\";\n           pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n           pattern\
    \ '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n         }\n         ...\n       }\n   For\
    \ numeric data types, if the values allowed by the intended\n   semantics are\
    \ different than those allowed by the unbounded intrinsic\n   data type (e.g.,\
    \ \"int32\"), then a range statement SHOULD be present.\n   The following typedef\
    \ from [RFC6991] demonstrates the proper use of\n   the \"range\" statement:\n\
    \       typedef dscp {\n         type uint8 {\n            range \"0..63\";\n\
    \         }\n         ...\n       }\n"
- title: 4.11.3.  Enumerations and Bits
  contents:
  - "4.11.3.  Enumerations and Bits\n   For \"enumeration\" or \"bits\" data types,\
    \ the semantics for each \"enum\"\n   or \"bit\" SHOULD be documented.  A separate\
    \ \"description\" statement\n   (within each \"enum\" or \"bit\" statement) SHOULD\
    \ be present.\n       leaf foo {\n         // INCORRECT\n         type enumeration\
    \ {\n           enum one;\n           enum two;\n         }\n         description\n\
    \           \"The foo enum...\n            one: The first enum\n            two:\
    \ The second enum\";\n       }\n       leaf foo {\n         // CORRECT\n     \
    \    type enumeration {\n           enum one {\n             description \"The\
    \ first enum\";\n           }\n           enum two {\n             description\
    \ \"The second enum\";\n           }\n         }\n         description\n     \
    \      \"The foo enum...  \";\n       }\n"
- title: 4.11.4.  Union Types
  contents:
  - "4.11.4.  Union Types\n   The YANG \"union\" type is evaluated by testing a value\
    \ against each\n   member type in the union.  The first type definition that accepts\
    \ a\n   value as valid is the member type used.  In general, member types\n  \
    \ SHOULD be ordered from most restrictive to least restrictive types.\n   In the\
    \ following example, the \"enumeration\" type will never be\n   matched because\
    \ the preceding \"string\" type will match everything.\n   Incorrect:\n      type\
    \ union {\n        type string;\n        type enumeration {\n          enum up;\n\
    \          enum down;\n        }\n      }\n   Correct:\n      type union {\n \
    \       type enumeration {\n          enum up;\n          enum down;\n       \
    \ }\n        type string;\n      }\n   It is possible for different member types\
    \ to match, depending on the\n   input encoding format.  In XML, all values are\
    \ passed as string\n   nodes; but in JSON, there are different value types for\
    \ numbers,\n   booleans, and strings.\n   In the following example, a JSON numeric\
    \ value will always be matched\n   by the \"int32\" type, but in XML the string\
    \ value representing a\n   number will be matched by the \"string\" type.  The\
    \ second version will\n   match the \"int32\" member type no matter how the input\
    \ is encoded.\n   Incorrect:\n      type union {\n        type string;\n     \
    \   type int32;\n      }\n   Correct:\n      type union {\n        type int32;\n\
    \        type string;\n      }\n"
- title: 4.11.5.  Empty and Boolean
  contents:
  - "4.11.5.  Empty and Boolean\n   YANG provides an \"empty\" data type, which has\
    \ one value (i.e.,\n   present).  The default is \"not present\", which is not\
    \ actually a\n   value.  When used within a list key, only one value can (and\
    \ must)\n   exist for this key leaf.  The type \"empty\" SHOULD NOT be used for\
    \ a\n   key leaf since it is pointless.\n   There is really no difference between\
    \ a leaf of type \"empty\" and a\n   leaf-list of type \"empty\".  Both are limited\
    \ to one instance.  The\n   type \"empty\" SHOULD NOT be used for a leaf-list.\n\
    \   The advantage of using type \"empty\" instead of type \"boolean\" is that\n\
    \   the default (not present) does not take up any bytes in a\n   representation.\
    \  The disadvantage is that the client may not be sure\n   if an empty leaf is\
    \ missing because it was filtered somehow or not\n   implemented.  The client\
    \ may not have a complete and accurate schema\n   for the data returned by the\
    \ server and may not be aware of the\n   missing leaf.\n   The YANG \"boolean\"\
    \ data type provides two values (\"true\" and\n   \"false\").  When used within\
    \ a list key, two entries can exist for\n   this key leaf.  Default values are\
    \ ignored for key leafs, but a\n   default statement is often used for plain boolean\
    \ leafs.  The\n   advantage of the \"boolean\" type is that the leaf or leaf-list\
    \ has a\n   clear representation for both values.  The default value is usually\n\
    \   not returned unless explicitly requested by the client, so no bytes\n   are\
    \ used in a typical representation.\n   In general, the \"boolean\" data type\
    \ SHOULD be used instead of the\n   \"empty\" data type, as shown in the example\
    \ below:\n   Incorrect:\n      leaf flag1 {\n        type empty;\n      }\n  \
    \ Correct:\n      leaf flag2 {\n        type boolean;\n        default false;\n\
    \      }\n"
- title: 4.12.  Reusable Type Definitions
  contents:
  - "4.12.  Reusable Type Definitions\n   If an appropriate derived type exists in\
    \ any standard module, such as\n   [RFC6991], then it SHOULD be used instead of\
    \ defining a new derived\n   type.\n   If an appropriate units identifier can\
    \ be associated with the desired\n   semantics, then a units statement SHOULD\
    \ be present.\n   If an appropriate default value can be associated with the desired\n\
    \   semantics, then a default statement SHOULD be present.\n   If a significant\
    \ number of derived types are defined, and it is\n   anticipated that these data\
    \ types will be reused by multiple modules,\n   then these derived types SHOULD\
    \ be contained in a separate module or\n   submodule, to allow easier reuse without\
    \ unnecessary coupling.\n   The \"description\" statement MUST be present.\n \
    \  If the type definition semantics are defined in an external document\n   (other\
    \ than another YANG module indicated by an import statement),\n   then the reference\
    \ statement MUST be present.\n"
- title: 4.13.  Reusable Groupings
  contents:
  - "4.13.  Reusable Groupings\n   A reusable grouping is a YANG grouping that can\
    \ be imported by\n   another module and is intended for use by other modules.\
    \  This is not\n   the same as a grouping that is used within the module in which\
    \ it is\n   defined, but it happens to be exportable to another module because\
    \ it\n   is defined at the top level of the YANG module.\n   The following guidelines\
    \ apply to reusable groupings, in order to\n   make them as robust as possible:\n\
    \   o  Clearly identify the purpose of the grouping in the \"description\"\n \
    \     statement.\n   o  There are five different XPath contexts in YANG (rpc/input,\
    \ rpc/\n      output, notification, \"config true\" data nodes, and all data\n\
    \      nodes).  Clearly identify which XPath contexts are applicable or\n    \
    \  excluded for the grouping.\n   o  Do not reference data outside the grouping\
    \ in any \"path\", \"must\",\n      or \"when\" statements.\n   o  Do not include\
    \ a \"default\" substatement on a leaf or choice unless\n      the value applies\
    \ on all possible contexts.\n   o  Do not include a \"config\" substatement on\
    \ a data node unless the\n      value applies on all possible contexts.\n   o\
    \  Clearly identify any external dependencies in the grouping\n      \"description\"\
    \ statement, such as nodes referenced by an absolute\n      path from a \"path\"\
    , \"must\", or \"when\" statement.\n"
- title: 4.14.  Data Definitions
  contents:
  - "4.14.  Data Definitions\n   The \"description\" statement MUST be present in\
    \ the following YANG\n   statements:\n   o  anyxml\n   o  augment\n   o  choice\n\
    \   o  container\n   o  extension\n   o  feature\n   o  grouping\n   o  identity\n\
    \   o  leaf\n   o  leaf-list\n   o  list\n   o  notification\n   o  rpc\n   o\
    \  typedef\n   If the data definition semantics are defined in an external document,\n\
    \   (other than another YANG module indicated by an import statement),\n   then\
    \ a reference statement MUST be present.\n   The \"anyxml\" construct may be useful\
    \ to represent an HTML banner\n   containing markup elements, such as \"<b>\"\
    \ and \"</b>\", and MAY be used\n   in such cases.  However, this construct SHOULD\
    \ NOT be used if other\n   YANG data node types can be used instead to represent\
    \ the desired\n   syntax and semantics.\n   It has been found that the \"anyxml\"\
    \ statement is not implemented\n   consistently across all servers.  It is possible\
    \ that mixed-mode XML\n   will not be supported or that configuration anyxml nodes\
    \ will not\n   supported.\n   If there are referential integrity constraints associated\
    \ with the\n   desired semantics that can be represented with XPath, then one\
    \ or\n   more \"must\" statements SHOULD be present.\n   For list and leaf-list\
    \ data definitions, if the number of possible\n   instances is required to be\
    \ bounded for all implementations, then the\n   max-elements statements SHOULD\
    \ be present.\n   If any \"must\" or \"when\" statements are used within the data\n\
    \   definition, then the data definition \"description\" statement SHOULD\n  \
    \ describe the purpose of each one.\n   The \"choice\" statement is allowed to\
    \ be directly present within a\n   \"case\" statement in YANG 1.1.  This needs\
    \ to be considered carefully.\n   Consider simply including the nested \"choice\"\
    \ as additional \"case\"\n   statements within the parent \"choice\" statement.\
    \  Note that the\n   \"mandatory\" and \"default\" statements within a nested\
    \ \"choice\"\n   statement only apply if the \"case\" containing the nested \"\
    choice\"\n   statement is first selected.\n   If a list defines any key leafs,\
    \ then these leafs SHOULD be defined\n   in order, as the first child nodes within\
    \ the list.  The key leafs\n   MAY be in a different order in some cases, e.g.,\
    \ they are defined in\n   a grouping, and not inline in the list statement.\n"
- title: 4.14.1.  Non-Presence Containers
  contents:
  - "4.14.1.  Non-Presence Containers\n   A non-presence container is used to organize\
    \ data into specific\n   subtrees.  It is not intended to have semantics within\
    \ the data model\n   beyond this purpose, although YANG allows it (e.g., a \"\
    must\"\n   statement within the non-presence container).\n   Example using container\
    \ wrappers:\n       container top {\n          container foos {\n            \
    \ list foo { ... }\n          }\n          container bars {\n             list\
    \ bar { ... }\n          }\n       }\n   Example without container wrappers:\n\
    \       container top {\n          list foo { ... }\n          list bar { ...\
    \ }\n       }\n   Use of non-presence containers to organize data is a subjective\n\
    \   matter similar to use of subdirectories in a file system.  Although\n   these\
    \ containers do not have any semantics, they can impact protocol\n   operations\
    \ for the descendant data nodes within a non-presence\n   container, so use of\
    \ these containers SHOULD be considered carefully.\n   The NETCONF and RESTCONF\
    \ protocols do not currently support the\n   ability to delete all list (or leaf-list)\
    \ entries at once.  This\n   deficiency is sometimes avoided by use of a parent\
    \ container (i.e.,\n   deleting the container also removes all child entries).\n"
- title: 4.14.2.  Top-Level Data Nodes
  contents:
  - "4.14.2.  Top-Level Data Nodes\n   Use of top-level objects needs to be considered\
    \ carefully:\n   o  top-level siblings are not ordered\n   o  top-level siblings\
    \ are not static and depend on the modules that\n      are loaded\n   o  for subtree\
    \ filtering, retrieval of a top-level leaf-list will be\n      treated as a content-match\
    \ node for all top-level-siblings\n   o  a top-level list with many instances\
    \ may impact performance\n"
- title: 4.15.  Operation Definitions
  contents:
  - "4.15.  Operation Definitions\n   If the operation semantics are defined in an\
    \ external document (other\n   than another YANG module indicated by an import\
    \ statement), then a\n   reference statement MUST be present.\n   If the operation\
    \ impacts system behavior in some way, it SHOULD be\n   mentioned in the \"description\"\
    \ statement.\n   If the operation is potentially harmful to system behavior in\
    \ some\n   way, it MUST be mentioned in the Security Considerations section of\n\
    \   the document.\n"
- title: 4.16.  Notification Definitions
  contents:
  - "4.16.  Notification Definitions\n   The \"description\" statement MUST be present.\n\
    \   If the notification semantics are defined in an external document\n   (other\
    \ than another YANG module indicated by an import statement),\n   then a reference\
    \ statement MUST be present.\n   If the notification refers to a specific resource\
    \ instance, then this\n   instance SHOULD be identified in the notification data.\
    \  This is\n   usually done by including \"leafref\" leaf nodes with the key leaf\n\
    \   values for the resource instance.  For example:\n     notification interface-up\
    \ {\n       description \"Sent when an interface is activated.\";\n       leaf\
    \ name {\n         type leafref {\n           path \"/if:interfaces/if:interface/if:name\"\
    ;\n         }\n       }\n     }\n   Note that there are no formal YANG statements\
    \ to identify any data\n   node resources associated with a notification.  The\
    \ \"description\"\n   statement for the notification SHOULD specify if and how\
    \ the\n   notification identifies any data node resources associated with the\n\
    \   specific event.\n"
- title: 4.17.  Feature Definitions
  contents:
  - "4.17.  Feature Definitions\n   The YANG \"feature\" statement is used to define\
    \ a label for a set of\n   optional functionality within a module.  The \"if-feature\"\
    \ statement\n   is used in the YANG statements associated with a feature.  The\n\
    \   description-stmt within a feature-stmt MUST specify any interactions\n   with\
    \ other features.\n   The set of YANG features defined in a module should be considered\n\
    \   carefully.  Very fine granular features increase interoperability\n   complexity\
    \ and should be avoided.  A likely misuse of the feature\n   mechanism is the\
    \ tagging of individual leafs (e.g., counters) with\n   separate features.\n \
    \  If there is a large set of objects associated with a YANG feature,\n   then\
    \ consider moving those objects to a separate module, instead of\n   using a YANG\
    \ feature.  Note that the set of features within a module\n   is easily discovered\
    \ by the reader, but the set of related modules\n   within the entire YANG library\
    \ is not as easy to identity.  Module\n   names with a common prefix can help\
    \ readers identity the set of\n   related modules, but this assumes the reader\
    \ will have discovered and\n   installed all the relevant modules.\n   Another\
    \ consideration for deciding whether to create a new module or\n   add a YANG\
    \ feature is the stability of the module in question.  It\n   may be desirable\
    \ to have a stable base module that is not changed\n   frequently.  If new functionality\
    \ is placed in a separate module,\n   then the base module does not need to be\
    \ republished.  If it is\n   designed as a YANG feature, then the module will\
    \ need to be\n   republished.\n   If one feature requires implementation of another\
    \ feature, then an\n   \"if-feature\" statement SHOULD be used in the dependent\
    \ \"feature\"\n   statement.\n   For example, feature2 requires implementation\
    \ of feature1:\n      feature feature1 {\n        description \"Some protocol\
    \ feature\";\n      }\n      feature feature2 {\n        if-feature \"feature1\"\
    ;\n        description \"Another protocol feature\";\n      }\n"
- title: 4.18.  YANG Data Node Constraints
  contents:
  - '4.18.  YANG Data Node Constraints

    '
- title: 4.18.1.  Controlling Quantity
  contents:
  - "4.18.1.  Controlling Quantity\n   The \"min-elements\" and \"max-elements\" statements\
    \ can be used to\n   control how many list or leaf-list instances are required\
    \ for a\n   particular data node.  YANG constraint statements SHOULD be used to\n\
    \   identify conditions that apply to all implementations of the data\n   model.\
    \  If platform-specific limitations (e.g., the \"max-elements\"\n   supported\
    \ for a particular list) are relevant to operations, then a\n   data model definition\
    \ statement (e.g., \"max-ports\" leaf) SHOULD be\n   used to identify the limit.\n"
- title: 4.18.2.  "must" versus "when"
  contents:
  - "4.18.2.  \"must\" versus \"when\"\n   \"must\" and \"when\" YANG statements are\
    \ used to provide cross-object\n   referential tests.  They have very different\
    \ behavior.  The \"when\"\n   statement causes data node instances to be silently\
    \ deleted as soon\n   as the condition becomes false.  A false \"when\" expression\
    \ is not\n   considered to be an error.\n   The \"when\" statement SHOULD be used\
    \ together with \"augment\" or \"uses\"\n   statements to achieve conditional\
    \ model composition.  The condition\n   SHOULD be based on static properties of\
    \ the augmented entry (e.g.,\n   list key leafs).\n   The \"must\" statement causes\
    \ a datastore validation error if the\n   condition is false.  This statement\
    \ SHOULD be used for enforcing\n   parameter value restrictions that involve more\
    \ than one data node\n   (e.g., end-time parameter must be after the start-time\
    \ parameter).\n"
- title: 4.19.  "augment" Statements
  contents:
  - "4.19.  \"augment\" Statements\n   The YANG \"augment\" statement is used to define\
    \ a set of data\n   definition statements that will be added as child nodes of\
    \ a target\n   data node.  The module namespace for these data nodes will be the\n\
    \   augmenting module, not the augmented module.\n   A top-level \"augment\" statement\
    \ SHOULD NOT be used if the target data\n   node is in the same module or submodule\
    \ as the evaluated \"augment\"\n   statement.  The data definition statements\
    \ SHOULD be added inline\n   instead.\n"
- title: 4.19.1.  Conditional Augment Statements
  contents:
  - "4.19.1.  Conditional Augment Statements\n   The \"augment\" statement is often\
    \ used together with the \"when\"\n   statement and/or \"if-feature\" statement\
    \ to make the augmentation\n   conditional on some portion of the data model.\n\
    \   The following example from [RFC7223] shows how a conditional\n   container\
    \ called \"ethernet\" is added to the \"interface\" list only for\n   entries\
    \ of the type \"ethernetCsmacd\".\n        augment \"/if:interfaces/if:interface\"\
    \ {\n            when \"if:type = 'ianaift:ethernetCsmacd'\";\n            container\
    \ ethernet {\n                leaf duplex {\n                    ...\n       \
    \         }\n            }\n        }\n"
- title: 4.19.2.  Conditionally Mandatory Data Definition Statements
  contents:
  - "4.19.2.  Conditionally Mandatory Data Definition Statements\n   YANG has very\
    \ specific rules about how configuration data can be\n   updated in new releases\
    \ of a module.  These rules allow an \"old\n   client\" to continue interoperating\
    \ with a \"new server\".\n   If data nodes are added to an existing entry, the\
    \ old client MUST NOT\n   be required to provide any mandatory parameters that\
    \ were not in the\n   original module definition.\n   It is possible to add conditional\
    \ \"augment\" statements such that the\n   old client would not know about the\
    \ new condition and would not\n   specify the new condition.  The conditional\
    \ \"augment\" statement can\n   contain mandatory objects only if the condition\
    \ is false, unless\n   explicitly requested by the client.\n   Only a conditional\
    \ \"augment\" statement that uses the \"when\" statement\n   form of a condition\
    \ can be used in this manner.  The YANG features\n   enabled on the server cannot\
    \ be controlled by the client in any way,\n   so it is not safe to add mandatory\
    \ augmenting data nodes based on the\n   \"if-feature\" statement.\n   The XPath\
    \ \"when\" statement condition MUST NOT reference data outside\n   of the target\
    \ data node because the client does not have any control\n   over this external\
    \ data.\n   In the following dummy example, it is okay to augment the \"interface\"\
    \n   entry with \"mandatory-leaf\" because the augmentation depends on\n   support\
    \ for \"some-new-iftype\".  The old client does not know about\n   this type,\
    \ so it would never select this type; therefore, it would\n   not add a mandatory\
    \ data node.\n     module example-module {\n       yang-version 1.1;\n       namespace\
    \ \"tag:example.com,2017:example-module\";\n       prefix mymod;\n       import\
    \ iana-if-type { prefix iana; }\n       import ietf-interfaces { prefix if; }\n\
    \       identity some-new-iftype {\n          base iana:iana-interface-type;\n\
    \       }\n       augment \"/if:interfaces/if:interface\" {\n          when \"\
    if:type = 'mymod:some-new-iftype'\";\n          leaf mandatory-leaf {\n      \
    \       type string;\n             mandatory true;\n          }\n       }\n  \
    \   }\n   Note that this practice is safe only for creating data resources.  It\n\
    \   is not safe for replacing or modifying resources if the client does\n   not\
    \ know about the new condition.  The YANG data model MUST be\n   packaged in a\
    \ way that requires the client to be aware of the\n   mandatory data nodes if\
    \ it is aware of the condition for this data.\n   In the example above, the \"\
    some-new-iftype\" identity is defined in\n   the same module as the \"mandatory-leaf\"\
    \ data definition statement.\n   This practice is not safe for identities defined\
    \ in a common module\n   such as \"iana-if-type\" because the client is not required\
    \ to know\n   about \"my-module\" just because it knows about the \"iana-if-type\"\
    \n   module.\n"
- title: 4.20.  Deviation Statements
  contents:
  - "4.20.  Deviation Statements\n   Per RFC 7950, Section 7.20.3, the YANG \"deviation\"\
    \ statement is not\n   allowed to appear in IETF YANG modules, but it can be useful\
    \ for\n   documenting server capabilities.  Deviation statements are not\n   reusable\
    \ and typically not shared across all platforms.\n   There are several reasons\
    \ that deviations might be needed in an\n   implementation, e.g., an object cannot\
    \ be supported on all platforms,\n   or feature delivery is done in multiple development\
    \ phases.\n   Deviation statements can also be used to add annotations to a module,\n\
    \   which does not affect the conformance requirements for the module.\n   It\
    \ is suggested that deviation statements be defined in separate\n   modules from\
    \ regular YANG definitions.  This allows the deviations to\n   be platform specific\
    \ and/or temporary.\n   The order that deviation statements are evaluated can\
    \ affect the\n   result.  Therefore, multiple deviation statements in the same\
    \ module,\n   for the same target object, SHOULD NOT be used.\n   The \"max-elements\"\
    \ statement is intended to describe an architectural\n   limit to the number of\
    \ list entries.  It is not intended to describe\n   platform limitations.  It\
    \ is better to use a \"deviation\" statement\n   for the platforms that have a\
    \ hard resource limit.\n   Example documenting platform resource limits:\n   \
    \  Wrong: (max-elements in the list itself)\n        container backups {\n   \
    \       list backup {\n             ...\n             max-elements  10;\n    \
    \         ...\n          }\n        }\n     Correct: (max-elements in a deviation)\n\
    \        deviation /bk:backups/bk:backup {\n          deviate add {\n        \
    \     max-elements  10;\n          }\n        }\n"
- title: 4.21.  Extension Statements
  contents:
  - "4.21.  Extension Statements\n   The YANG \"extension\" statement is used to specify\
    \ external\n   definitions.  This appears in the YANG syntax as an\n   \"unknown-statement\"\
    .  Usage of extension statements in a published\n   module needs to be considered\
    \ carefully.\n   The following guidelines apply to the usage of YANG extensions:\n\
    \   o  The semantics of the extension MUST NOT contradict any YANG\n      statements.\
    \  Extensions can add semantics not covered by the\n      normal YANG statements.\n\
    \   o  The module containing the extension statement MUST clearly\n      identify\
    \ the conformance requirements for the extension.  It\n      should be clear whether\
    \ all implementations of the YANG module\n      containing the extension need\
    \ to also implement the extension.  If\n      not, identify what conditions apply\
    \ that would require\n      implementation of the extension.\n   o  The extension\
    \ MUST clearly identify where it can be used within\n      other YANG statements.\n\
    \   o  The extension MUST clearly identify if YANG statements or other\n     \
    \ extensions are allowed or required within the extension as\n      substatements.\n"
- title: 4.22.  Data Correlation
  contents:
  - "4.22.  Data Correlation\n   Data can be correlated in various ways, using common\
    \ data types,\n   common data naming, and common data organization.  There are\
    \ several\n   ways to extend the functionality of a module, based on the degree\
    \ of\n   coupling between the old and new functionality:\n   o  inline: update\
    \ the module with new protocol-accessible objects.\n      The naming and data\
    \ organization of the original objects is used.\n      The new objects are in\
    \ the original module namespace.\n   o  augment: create a new module with new\
    \ protocol-accessible objects\n      that augment the original data structure.\
    \  The naming and data\n      organization of the original objects is used.  The\
    \ new objects are\n      in the new module namespace.\n   o  mirror: create new\
    \ objects in a new module or the original module,\n      except use a new naming\
    \ scheme and data location.  The naming can\n      be coupled in different ways.\
    \  Tight coupling is achieved with a\n      \"leafref\" data type, with the \"\
    require-instance\" substatement set\n      to \"true\".  This method SHOULD be\
    \ used.\n   If the new data instances are not limited to the values in use in\
    \ the\n   original data structure, then the \"require-instance\" substatement\n\
    \   MUST be set to \"false\".  Loose coupling is achieved by using key\n   leafs\
    \ with the same data type as the original data structure.  This\n   has the same\
    \ semantics as setting the \"require-instance\" substatement\n   to \"false\"\
    .\n   The relationship between configuration and operational state has been\n\
    \   clarified in NMDA [RFC8342].\n"
- title: 4.22.1.  Use of "leafref" for Key Correlation
  contents:
  - "4.22.1.  Use of \"leafref\" for Key Correlation\n   Sometimes it is not practical\
    \ to augment a data structure.  For\n   example, the correlated data could have\
    \ different keys or contain\n   mandatory nodes.\n   The following example shows\
    \ the use of the \"leafref\" data type for\n   data correlation purposes:\n  \
    \ Not preferred:\n      list foo {\n         key name;\n         leaf name {\n\
    \           type string;\n         }\n         ...\n      }\n      list foo-addon\
    \ {\n         key name;\n         config false;\n         leaf name {\n      \
    \     type string;\n         }\n         ...\n      }\n   Preferred:\n      list\
    \ foo {\n         key name;\n         leaf name {\n           type string;\n \
    \        }\n         ...\n      }\n      list foo-addon {\n         key name;\n\
    \         config false;\n         leaf name {\n           type leafref {\n   \
    \          path \"/foo/name\";\n             require-instance false;\n       \
    \    }\n         }\n         leaf addon {\n           type string;\n         \
    \  mandatory true;\n         }\n      }\n"
- title: 4.23.  Operational State
  contents:
  - "4.23.  Operational State\n   The modeling of operational state with YANG has\
    \ been refined over\n   time.  At first, only data that has a \"config\" statement\
    \ value of\n   \"false\" was considered to be operational state.  This data was\
    \ not\n   considered to be part of any datastore, which made the YANG XPath\n\
    \   definition much more complicated.\n   Operational state is now modeled using\
    \ YANG according to the new NMDA\n   [RFC8342] and conceptually contained in the\
    \ operational state\n   datastore, which also includes the operational values\
    \ of\n   configuration data.  There is no longer any need to duplicate data\n\
    \   structures to provide separate configuration and operational state\n   sections.\n\
    \   This section describes some data modeling issues related to\n   operational\
    \ state and guidelines for transitioning YANG data model\n   design to be NMDA\
    \ compatible.\n"
- title: 4.23.1.  Combining Operational State and Configuration Data
  contents:
  - "4.23.1.  Combining Operational State and Configuration Data\n   If possible,\
    \ operational state SHOULD be combined with its associated\n   configuration data.\
    \  This prevents duplication of key leafs and\n   ancestor nodes.  It also prevents\
    \ race conditions for retrieval of\n   dynamic entries and allows configuration\
    \ and operational state to be\n   retrieved together with minimal message overhead.\n\
    \      container foo {\n        ...\n        // contains \"config true\" and \"\
    config false\" nodes that have\n        // no corresponding \"config true\" object\
    \ (e.g., counters)\n      }\n"
- title: 4.23.2.  Representing Operational Values of Configuration Data
  contents:
  - "4.23.2.  Representing Operational Values of Configuration Data\n   If possible,\
    \ the same data type SHOULD be used to represent the\n   configured value and\
    \ the operational value, for a given leaf or leaf-\n   list object.\n   Sometimes\
    \ the configured value set is different than the operational\n   value set for\
    \ that object, for example, the \"admin-status\" and\n   \"oper-status\" leafs\
    \ in [RFC8343].  In this case, a separate object\n   MAY be used to represent\
    \ the configured and operational values.\n   Sometimes the list keys are not identical\
    \ for configuration data and\n   the corresponding operational state.  In this\
    \ case, separate lists\n   MAY be used to represent the configured and operational\
    \ values.\n   If it is not possible to combine configuration and operational state,\n\
    \   then the keys used to represent list entries SHOULD be the same type.\n  \
    \ The \"leafref\" data type SHOULD be used in operational state for key\n   leafs\
    \ that have corresponding configuration instances.  The\n   \"require-instance\"\
    \ statement MAY be set to \"false\" (in YANG 1.1\n   modules only) to indicate\
    \ instances are allowed in the operational\n   state that do not exist in the\
    \ associated configuration data.\n   The need to replicate objects or define different\
    \ operational state\n   objects depends on the data model.  It is not possible\
    \ to define one\n   approach that will be optimal for all data models.\n   Designers\
    \ SHOULD describe and justify any NMDA exceptions in detail,\n   such as the use\
    \ of separate subtrees and/or separate leafs.  The\n   \"description\" statements\
    \ for both the configuration and the\n   operational state SHOULD be used for\
    \ this purpose.\n"
- title: 4.23.3.  NMDA Transition Guidelines
  contents:
  - "4.23.3.  NMDA Transition Guidelines\n   YANG modules SHOULD be designed with\
    \ the assumption that they will be\n   used on servers supporting the operational\
    \ state datastore.  With\n   this in mind, YANG modules SHOULD define \"config\
    \ false\" nodes\n   wherever they make sense to the data model.  \"Config false\"\
    \ nodes\n   SHOULD NOT be defined to provide the operational value for\n   configuration\
    \ nodes, except when the value space of a configured and\n   operational value\
    \ may differ, in which case a distinct \"config false\"\n   node SHOULD be defined\
    \ to hold the operational value for the\n   configured node.\n   The following\
    \ guidelines are meant to help modelers develop YANG\n   modules that will maximize\
    \ the utility of the model with both current\n   and new implementations.\n  \
    \ New modules and modules that are not concerned with the operational\n   state\
    \ of configuration information SHOULD immediately be structured\n   to be NMDA\
    \ compatible, as described in Section 4.23.1.  This\n   transition MAY be deferred\
    \ if the module does not contain any\n   configuration datastore objects.\n  \
    \ The remaining are options that MAY be followed during the time that\n   NMDA\
    \ mechanisms are being defined.\n   (a)  Modules that require immediate support\
    \ for the NMDA features\n        SHOULD be structured for NMDA.  A temporary non-NMDA\
    \ version of\n        this type of module MAY exist, as either an existing model\
    \ or a\n        model created by hand or with suitable tools that mirror the\n\
    \        current modeling strategies.  Both the NMDA and the non-NMDA\n      \
    \  modules SHOULD be published in the same document, with NMDA\n        modules\
    \ in the document main body and the non-NMDA modules in a\n        non-normative\
    \ appendix.  The use of the non-NMDA module will\n        allow temporary bridging\
    \ of the time period until NMDA\n        implementations are available.\n   (b)\
    \  For published models, the model should be republished with an\n        NMDA-compatible\
    \ structure, deprecating non-NMDA constructs.  For\n        example, the \"ietf-interfaces\"\
    \ model in [RFC7223] has been\n        restructured as an NMDA-compatible model\
    \ in [RFC8343].  The\n        \"/interfaces-state\" hierarchy has been marked\
    \ \"status\n        deprecated\".  Models that mark their \"/foo-state\" hierarchy\
    \ with\n        \"status deprecated\" will allow NMDA-capable implementations\
    \ to\n        avoid the cost of duplicating the state nodes, while enabling\n\
    \        non-NMDA-capable implementations to utilize them for access to\n    \
    \    the operational values.\n   (c)  For models that augment models that have\
    \ not been structured\n        with the NMDA, the modeler will have to consider\
    \ the structure\n        of the base model and the guidelines listed above.  Where\n\
    \        possible, such models should move to new revisions of the base\n    \
    \    model that are NMDA compatible.  When that is not possible,\n        augmenting\
    \ \"state\" containers SHOULD be avoided, with the\n        expectation that the\
    \ base model will be re-released with the\n        state containers marked as\
    \ deprecated.  It is RECOMMENDED to\n        augment only the \"/foo\" hierarchy\
    \ of the base model.  Where this\n        recommendation cannot be followed, then\
    \ any new \"state\" elements\n        SHOULD be included in their own module.\n"
- title: 4.23.3.1.  Temporary Non-NMDA Modules
  contents:
  - "4.23.3.1.  Temporary Non-NMDA Modules\n   A temporary non-NMDA module allows\
    \ a non-NMDA-aware client to access\n   operational state from an NMDA-compliant\
    \ server.  It contains the\n   top-level \"config false\" data nodes that would\
    \ have been defined in a\n   legacy YANG module (before NMDA).\n   A server that\
    \ needs to support both NMDA and non-NMDA clients can\n   advertise both the new\
    \ NMDA module and the temporary non-NMDA module.\n   A non-NMDA client can use\
    \ separate \"foo\" and \"foo-state\" subtrees,\n   except the \"foo-state\" subtree\
    \ is located in a different (temporary)\n   module.  The NMDA module can be used\
    \ by a non-NMDA client to access\n   the conventional configuration datastores\
    \ and the deprecated <get>\n   operation to access nested \"config false\" data\
    \ nodes.\n   To create the temporary non-NMDA model from an NMDA model, the\n\
    \   following steps can be taken:\n   o  Change the module name by appending \"\
    -state\" to the original\n      module name\n   o  Change the namespace by appending\
    \ \"-state\" to the original\n      namespace value\n   o  Change the prefix by\
    \ appending \"-s\" to the original prefix value\n   o  Add an import to the original\
    \ module (e.g., for typedef\n      definitions)\n   o  Retain or create only the\
    \ top-level nodes that have a \"config\"\n      statement value \"false\".  These\
    \ subtrees represent \"config false\"\n      data nodes that were combined into\
    \ the configuration subtree;\n      therefore, they are not available to non-NMDA\
    \ aware clients.  Set\n      the \"status\" statement to \"deprecated\" for each\
    \ new node.\n   o  The module description SHOULD clearly identify the module as\
    \ a\n      temporary non-NMDA module\n"
- title: '4.23.3.2.  Example: Create a New NMDA Module'
  contents:
  - "4.23.3.2.  Example: Create a New NMDA Module\n   Create an NMDA-compliant module,\
    \ using combined configuration and\n   state subtrees, whenever possible.\n  \
    \   module example-foo {\n       namespace \"urn:example.com:params:xml:ns:yang:example-foo\"\
    ;\n       prefix \"foo\";\n       container foo {\n         // configuration data\
    \ child nodes\n         // operational value in operational state datastore only\n\
    \         // may contain \"config false\" nodes as needed\n       }\n    }\n"
- title: '4.23.3.3.  Example: Convert an Old Non-NMDA Module'
  contents:
  - "4.23.3.3.  Example: Convert an Old Non-NMDA Module\n   Do not remove non-compliant\
    \ objects from existing modules.  Instead,\n   change the status to \"deprecated\"\
    .  At some point, usually after 1\n   year, the status MAY be changed to \"obsolete\"\
    .\n   Old Module:\n     module example-foo {\n       namespace \"urn:example.com:params:xml:ns:yang:example-foo\"\
    ;\n       prefix \"foo\";\n       container foo {\n         // configuration data\
    \ child nodes\n       }\n       container foo-state {\n         config false;\n\
    \         // operational state child nodes\n       }\n    }\n   Converted NMDA\
    \ Module:\n     module example-foo {\n       namespace \"urn:example.com:params:xml:ns:yang:example-foo\"\
    ;\n       prefix \"foo\";\n       container foo {\n         // configuration data\
    \ child nodes\n         // operational value in operational state datastore only\n\
    \         // may contain \"config false\" nodes as needed\n         // will contain\
    \ any data nodes from old foo-state\n       }\n       // keep original foo-state\
    \ but change status to deprecated\n       container foo-state {\n         config\
    \ false;\n         status deprecated;\n         // operational state child nodes\n\
    \       }\n    }\n"
- title: '4.23.3.4.  Example: Create a Temporary NMDA Module'
  contents:
  - "4.23.3.4.  Example: Create a Temporary NMDA Module\n   Create a new module that\
    \ contains the top-level operational state\n   data nodes that would have been\
    \ available before they were combined\n   with configuration data nodes (to be\
    \ NMDA compliant).\n     module example-foo-state {\n       namespace \"urn:example.com:params:xml:ns:yang:example-foo-state\"\
    ;\n       prefix \"foo-s\";\n       // import new or converted module; not used\
    \ in this example\n       import example-foo { prefix foo; }\n       container\
    \ foo-state {\n         config false;\n         status deprecated;\n         //\
    \ operational state child nodes\n       }\n    }\n"
- title: 4.24.  Performance Considerations
  contents:
  - "4.24.  Performance Considerations\n   It is generally likely that certain YANG\
    \ statements require more\n   runtime resources than other statements.  Although\
    \ there are no\n   performance requirements for YANG validation, the following\n\
    \   information MAY be considered when designing YANG data models:\n   o  Lists\
    \ are generally more expensive than containers\n   o  \"when\" statement evaluation\
    \ is generally more expensive than\n      \"if-feature\" or \"choice\" statements\n\
    \   o  \"must\" statements are generally more expensive than \"min-entries\",\n\
    \      \"max-entries\", \"mandatory\", or \"unique\" statements\n   o  \"identityref\"\
    \ leafs are generally more expensive than\n      \"enumeration\" leafs\n   o \
    \ \"leafref\" and \"instance-identifier\" types with \"require-instance\"\n  \
    \    set to true are generally more expensive than if\n      \"require-instance\"\
    \ is set to false\n"
- title: 4.25.  Open Systems Considerations
  contents:
  - "4.25.  Open Systems Considerations\n   Only the modules imported by a particular\
    \ module can be assumed to be\n   present in an implementation.  An open system\
    \ MAY include any\n   combination of YANG modules.\n"
- title: 4.26.  Guidelines for Constructs Specific to YANG 1.1
  contents:
  - "4.26.  Guidelines for Constructs Specific to YANG 1.1\n   The set of guidelines\
    \ for YANG 1.1 will grow as operational\n   experience is gained with the new\
    \ language features.  This section\n   contains an initial set of guidelines for\
    \ new YANG 1.1 language\n   features.\n"
- title: 4.26.1.  Importing Multiple Revisions
  contents:
  - "4.26.1.  Importing Multiple Revisions\n   Standard modules SHOULD NOT import\
    \ multiple revisions of the same\n   module into a module.  This MAY be done if\
    \ independent definitions\n   (e.g., enumeration typedefs) from specific revisions\
    \ are needed in\n   the importing module.\n"
- title: 4.26.2.  Using Feature Logic
  contents:
  - "4.26.2.  Using Feature Logic\n   The YANG 1.1 feature logic is much more expressive\
    \ than YANG 1.0.  A\n   \"description\" statement SHOULD describe the \"if-feature\"\
    \ logic in\n   text, to help readers understand the module.\n   YANG features\
    \ SHOULD be used instead of the \"when\" statement, if\n   possible.  Features\
    \ are advertised by the server, and objects\n   conditional by the \"if-feature\"\
    \ statement are conceptually grouped\n   together.  There is no such commonality\
    \ supported for \"when\"\n   statements.\n   Features generally require less server\
    \ implementation complexity and\n   runtime resources than objects that use \"\
    when\" statements.  Features\n   are generally static (i.e., set when a module\
    \ is loaded and not\n   changed at runtime).  However, every client edit might\
    \ cause a \"when\"\n   statement result to change.\n"
- title: 4.26.3.  "anyxml" versus "anydata"
  contents:
  - "4.26.3.  \"anyxml\" versus \"anydata\"\n   The \"anyxml\" statement MUST NOT\
    \ be used to represent a conceptual\n   subtree of YANG data nodes.  The \"anydata\"\
    \ statement MUST be used for\n   this purpose.\n"
- title: 4.26.4.  "action" versus "rpc"
  contents:
  - "4.26.4.  \"action\" versus \"rpc\"\n   The use of \"action\" statements or \"\
    rpc\" statements is a subjective\n   design decision.  RPC operations are not\
    \ associated with any\n   particular data node.  Actions are associated with a\
    \ specific data\n   node definition.  An \"action\" statement SHOULD be used if\
    \ the\n   protocol operation is specific to a subset of all data nodes instead\n\
    \   of all possible data nodes.\n   The same action name MAY be used in different\
    \ definitions within\n   different data node.  For example, a \"reset\" action\
    \ defined with a\n   data node definition for an interface might have different\
    \ parameters\n   than for a power supply or a VLAN.  The same action name SHOULD\
    \ be\n   used to represent similar semantics.\n   The NETCONF Access Control Model\
    \ (NACM) [RFC8341] does not support\n   parameter-based access control for RPC\
    \ operations.  The user is given\n   permission (or not) to invoke the RPC operation\
    \ with any parameters.\n   For example, if each client is only allowed to reset\
    \ their own\n   interface, then NACM cannot be used.\n   For example, NACM cannot\
    \ enforce access control based on the value of\n   the \"interface\" parameter,\
    \ only the \"reset\" operation itself:\n      rpc reset {\n        input {\n \
    \         leaf interface {\n            type if:interface-ref;\n            mandatory\
    \ true;\n            description \"The interface to reset.\";\n          }\n \
    \       }\n      }\n   However, NACM can enforce access control for individual\
    \ interface\n   instances, using a \"reset\" action.  If the user does not have\
    \ read\n   access to the specific \"interface\" instance, then it cannot invoke\n\
    \   the \"reset\" action for that interface instance:\n      container interfaces\
    \ {\n        list interface {\n          ...\n          action reset { }\n   \
    \     }\n      }\n"
- title: 4.27.  Updating YANG Modules (Published versus Unpublished)
  contents:
  - "4.27.  Updating YANG Modules (Published versus Unpublished)\n   YANG modules\
    \ can change over time.  Typically, new data model\n   definitions are needed\
    \ to support new features.  YANG update rules\n   defined in Section 11 of [RFC7950]\
    \ MUST be followed for published\n   modules.  They MAY be followed for unpublished\
    \ modules.\n   The YANG update rules only apply to published module revisions.\
    \  Each\n   organization will have their own way to identify published work that\n\
    \   is considered to be stable and unpublished work that is considered to\n  \
    \ be unstable.  For example, in the IETF, the RFC document is used for\n   published\
    \ work, and the I-D is used for unpublished work.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   The following registration in the \"ns\" subregistry\
    \ of the \"IETF XML\n   Registry\" [RFC3688] was detailed in [RFC6087] and has\
    \ been updated by\n   IANA to reference this document.\n       URI: urn:ietf:params:xml:ns:yang:ietf-template\n\
    \       Registrant Contact: The IESG.\n       XML: N/A, the requested URI is an\
    \ XML namespace.\n   The following assignment was detailed in [RFC6087] and has\
    \ been\n   updated by IANA in the \"YANG Module Names\" registry.  This document\n\
    \   has also been added as a reference for the \"YANG Module Names\"\n   registry\
    \ itself as it contains the template necessary for\n   registration in Appendix\
    \ B.\n         +-----------+-------------------------------------------+\n   \
    \      | Field     | Value                                     |\n         +-----------+-------------------------------------------+\n\
    \         | Name      | ietf-template                             |\n        \
    \ | Namespace | urn:ietf:params:xml:ns:yang:ietf-template |\n         | Prefix\
    \    | temp                                      |\n         | Reference | RFC\
    \ 8407                                  |\n         +-----------+-------------------------------------------+\n\
    \                         YANG Registry Assignment\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document defines documentation guidelines\
    \ for NETCONF or\n   RESTCONF content defined with the YANG data modeling language;\n\
    \   therefore, it does not introduce any new or increased security risks\n   into\
    \ the management system.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [ID-Guidelines]\n              Housley, R., \"\
    Guidelines to Authors of Internet-Drafts\",\n              December 2010,\n  \
    \            <https://www.ietf.org/standards/ids/guidelines/>.\n   [RFC2119] \
    \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3688]  Mealling,\
    \ M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI 10.17487/RFC3688,\
    \ January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n  \
    \ [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n     \
    \         Resource Identifier (URI): Generic Syntax\", STD 66,\n             \
    \ RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC5378]  Bradner, S., Ed. and J. Contreras, Ed., \"Rights\n            \
    \  Contributors Provide to the IETF Trust\", BCP 78, RFC 5378,\n             \
    \ DOI 10.17487/RFC5378, November 2008,\n              <https://www.rfc-editor.org/info/rfc5378>.\n\
    \   [RFC6020]  Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n   \
    \           the Network Configuration Protocol (NETCONF)\", RFC 6020,\n      \
    \        DOI 10.17487/RFC6020, October 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n\
    \   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n  \
    \            and A. Bierman, Ed., \"Network Configuration Protocol\n         \
    \     (NETCONF)\", RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n     \
    \         Shell (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n        \
    \      <https://www.rfc-editor.org/info/rfc6242>.\n   [RFC7950]  Bjorklund, M.,\
    \ Ed., \"The YANG 1.1 Data Modeling Language\",\n              RFC 7950, DOI 10.17487/RFC7950,\
    \ August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n   [RFC8040]\
    \  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n              Protocol\"\
    , RFC 8040, DOI 10.17487/RFC8040, January 2017,\n              <https://www.rfc-editor.org/info/rfc8040>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8342]  Bjorklund,\
    \ M., Schoenwaelder, J., Shafer, P., Watsen, K.,\n              and R. Wilton,\
    \ \"Network Management Datastore Architecture\n              (NMDA)\", RFC 8342,\
    \ DOI 10.17487/RFC8342, March 2018,\n              <https://www.rfc-editor.org/info/rfc8342>.\n\
    \   [RFC8446]  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n \
    \             Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n  \
    \            <https://www.rfc-editor.org/info/rfc8446>.\n   [W3C.REC-xpath]\n\
    \              Clark, J. and S. DeRose, \"XML Path Language (XPath)\n        \
    \      Version 1.0\", W3C Recommendation REC-xpath-19991116,\n              November\
    \ 1999,\n              <http://www.w3.org/TR/1999/REC-xpath-19991116>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [IANA-MOD-NAMES]\n              IANA, \"YANG\
    \ Module Names\",\n              <https://www.iana.org/assignments/yang-parameters/>.\n\
    \   [IANA-XML] IANA, \"IETF XML Registry\",\n              <https://www.iana.org/assignments/xml-registry/>.\n\
    \   [RFC-STYLE]\n              RFC Editor, \"Style Guide\",\n              <http://www.rfc-editor.org/styleguide/>.\n\
    \   [RFC2026]  Bradner, S., \"The Internet Standards Process -- Revision\n   \
    \           3\", BCP 9, RFC 2026, DOI 10.17487/RFC2026, October 1996,\n      \
    \        <https://www.rfc-editor.org/info/rfc2026>.\n   [RFC4151]  Kindberg, T.\
    \ and S. Hawke, \"The 'tag' URI Scheme\",\n              RFC 4151, DOI 10.17487/RFC4151,\
    \ October 2005,\n              <https://www.rfc-editor.org/info/rfc4151>.\n  \
    \ [RFC4181]  Heard, C., Ed., \"Guidelines for Authors and Reviewers of\n     \
    \         MIB Documents\", BCP 111, RFC 4181, DOI 10.17487/RFC4181,\n        \
    \      September 2005, <https://www.rfc-editor.org/info/rfc4181>.\n   [RFC6087]\
    \  Bierman, A., \"Guidelines for Authors and Reviewers of YANG\n             \
    \ Data Model Documents\", RFC 6087, DOI 10.17487/RFC6087,\n              January\
    \ 2011, <https://www.rfc-editor.org/info/rfc6087>.\n   [RFC6991]  Schoenwaelder,\
    \ J., Ed., \"Common YANG Data Types\",\n              RFC 6991, DOI 10.17487/RFC6991,\
    \ July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n   [RFC7223]\
    \  Bjorklund, M., \"A YANG Data Model for Interface\n              Management\"\
    , RFC 7223, DOI 10.17487/RFC7223, May 2014,\n              <https://www.rfc-editor.org/info/rfc7223>.\n\
    \   [RFC7322]  Flanagan, H. and S. Ginoza, \"RFC Style Guide\", RFC 7322,\n  \
    \            DOI 10.17487/RFC7322, September 2014,\n              <https://www.rfc-editor.org/info/rfc7322>.\n\
    \   [RFC7841]  Halpern, J., Ed., Daigle, L., Ed., and O. Kolkman, Ed.,\n     \
    \         \"RFC Streams, Headers, and Boilerplates\", RFC 7841,\n            \
    \  DOI 10.17487/RFC7841, May 2016,\n              <https://www.rfc-editor.org/info/rfc7841>.\n\
    \   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n      \
    \        Writing an IANA Considerations Section in RFCs\", BCP 26,\n         \
    \     RFC 8126, DOI 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8340]  Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n   \
    \           BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n           \
    \   <https://www.rfc-editor.org/info/rfc8340>.\n   [RFC8341]  Bierman, A. and\
    \ M. Bjorklund, \"Network Configuration\n              Access Control Model\"\
    , STD 91, RFC 8341,\n              DOI 10.17487/RFC8341, March 2018,\n       \
    \       <https://www.rfc-editor.org/info/rfc8341>.\n   [RFC8343]  Bjorklund, M.,\
    \ \"A YANG Data Model for Interface\n              Management\", RFC 8343, DOI\
    \ 10.17487/RFC8343, March 2018,\n              <https://www.rfc-editor.org/info/rfc8343>.\n\
    \   [RFC8349]  Lhotka, L., Lindem, A., and Y. Qu, \"A YANG Data Model for\n  \
    \            Routing Management (NMDA Version)\", RFC 8349,\n              DOI\
    \ 10.17487/RFC8349, March 2018,\n              <https://www.rfc-editor.org/info/rfc8349>.\n"
- title: Appendix A.  Module Review Checklist
  contents:
  - "Appendix A.  Module Review Checklist\n   This section is adapted from RFC 4181.\n\
    \   The purpose of a YANG module review is to review the YANG module for\n   both\
    \ technical correctness and adherence to IETF documentation\n   requirements.\
    \  The following checklist may be helpful when reviewing\n   an I-D:\n   o  I-D\
    \ Boilerplate -- verify that the document contains the required\n      I-D boilerplate\
    \ (see <https://www.ietf.org/id-info/\n      guidelines.html>), including the\
    \ appropriate statement to permit\n      publication as an RFC, and that the I-D\
    \ boilerplate does not\n      contain references or section numbers.\n   o  Abstract\
    \ -- verify that the abstract does not contain references,\n      that it does\
    \ not have a section number, and that its content\n      follows the guidelines\
    \ in <https://www.ietf.org/id-info/\n      guidelines.html>.\n   o  Copyright\
    \ Notice -- verify that the document has the appropriate\n      text regarding\
    \ the rights that document contributors provide to\n      the IETF Trust [RFC5378].\
    \  Verify that it contains the full IETF\n      Trust copyright notice at the\
    \ beginning of the document.  The IETF\n      Trust Legal Provisions (TLP) can\
    \ be found at:\n      <https://trustee.ietf.org/license-info/>\n   o  Security\
    \ Considerations section -- verify that the document uses\n      the latest approved\
    \ template from the Operations and Management\n      (OPS) area website (see <https://trac.ietf.org/area/ops/trac/wiki/\n\
    \      yang-security-guidelines>) and that the guidelines therein have\n     \
    \ been followed.\n   o  IANA Considerations section -- this section must always\
    \ be\n      present.  For each module within the document, ensure that the\n \
    \     IANA Considerations section contains entries for the following\n      IANA\
    \ registries:\n         XML Namespace Registry: Register the YANG module namespace.\n\
    \         YANG Module Registry: Register the YANG module name, prefix,\n     \
    \    namespace, and RFC number, according to the rules specified in\n        \
    \ [RFC6020].\n   o  References -- verify that the references are properly divided\n\
    \      between normative and informative references, that RFCs 2119 and\n    \
    \  8174 are included as normative references if the terminology\n      defined\
    \ therein is used in the document, that all references\n      required by the\
    \ boilerplate are present, that all YANG modules\n      containing imported items\
    \ are cited as normative references, and\n      that all citations point to the\
    \ most current RFCs, unless there is\n      a valid reason to do otherwise (for\
    \ example, it is okay to include\n      an informative reference to a previous\
    \ version of a specification\n      to help explain a feature included for backward\
    \ compatibility).\n      Be sure citations for all imported modules are present\
    \ somewhere\n      in the document text (outside the YANG module).  If a YANG\
    \ module\n      contains reference or \"description\" statements that refer to\
    \ an\n      I-D, then the I-D is included as an informative reference.\n   o \
    \ License -- verify that the document contains the Simplified BSD\n      License\
    \ in each YANG module or submodule.  Some guidelines related\n      to this requirement\
    \ are described in Section 3.1.  Make sure that\n      the correct year is used\
    \ in all copyright dates.  Use the approved\n      text from the latest TLP document,\
    \ which can be found at:\n      <https://trustee.ietf.org/license-info/>\n   o\
    \  Other Issues -- check for any issues mentioned in\n      <https://www.ietf.org/id-info/checklist.html>\
    \ that are not covered\n      elsewhere.\n   o  Technical Content -- review the\
    \ actual technical content for\n      compliance with the guidelines in this document.\
    \  The use of a\n      YANG module compiler is recommended when checking for syntax\n\
    \      errors.  A list of freely available tools and other information,\n    \
    \  including formatting advice, can be found at:\n      <https://trac.ietf.org/trac/netconf/wiki>\n\
    \       and\n      <https://trac.ietf.org/trac/netmod/wiki>\n      Checking for\
    \ correct syntax, however, is only part of the job.\n      It is just as important\
    \ to actually read the YANG module document\n      from the point of view of a\
    \ potential implementor.  It is\n      particularly important to check that \"\
    description\" statements are\n      sufficiently clear and unambiguous to allow\
    \ interoperable\n      implementations to be created.\n"
- title: Appendix B.  YANG Module Template
  contents:
  - "Appendix B.  YANG Module Template\n   <CODE BEGINS> file \"ietf-template@2016-03-20.yang\"\
    \n   module ietf-template {\n     yang-version 1.1;\n     // replace this string\
    \ with a unique namespace URN value\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-template\"\
    ;\n     // replace this string, and try to pick a unique prefix\n     prefix temp;\n\
    \     // import statements here: e.g.,\n     // import ietf-yang-types { prefix\
    \ yang; }\n     // import ietf-inet-types { prefix inet; }\n     // identify the\
    \ IETF working group if applicable\n     organization\n       \"IETF NETMOD (NETCONF\
    \ Data Modeling Language) Working Group\";\n     // update this contact statement\
    \ with your info\n     contact\n       \"WG Web:   <http://datatracker.ietf.org/wg/your-wg-name/>\n\
    \        WG List:  <mailto:your-wg-name@ietf.org>\n        Editor:   your-name\n\
    \                  <mailto:your-email@example.com>\";\n     // replace the first\
    \ sentence in this description statement.\n     // replace the copyright notice\
    \ with the most recent\n     // version, if it has been updated since the publication\n\
    \     // of this document\n     description\n       \"This module defines a template\
    \ for other YANG modules.\n        Copyright (c) <insert year> IETF Trust and\
    \ the persons\n        identified as authors of the code.  All rights reserved.\n\
    \        Redistribution and use in source and binary forms, with or\n        without\
    \ modification, is permitted pursuant to, and subject\n        to the license\
    \ terms contained in, the Simplified BSD License\n        set forth in Section\
    \ 4.c of the IETF Trust's Legal Provisions\n        Relating to IETF Documents\n\
    \        (http://trustee.ietf.org/license-info).\n        This version of this\
    \ YANG module is part of RFC XXXX; see\n        the RFC itself for full legal\
    \ notices.\";\n     // RFC Ed.: replace XXXX with actual RFC number and remove\n\
    \     // this note\n     // replace '2016-03-20' with the module publication date\n\
    \     // the format is (year-month-day)\n     revision 2016-03-20 {\n       description\n\
    \         \"what changed in this revision\";\n       reference \"RFC XXXX: <Replace\
    \ With Document Title>\";\n     }\n     // extension statements\n     // feature\
    \ statements\n     // identity statements\n     // typedef statements\n     //\
    \ grouping statements\n     // data definition statements\n     // augment statements\n\
    \     // rpc statements\n     // notification statements\n     // DO NOT put deviation\
    \ statements in a published module\n   }\n   <CODE ENDS>\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The structure and contents of this document are adapted from\n\
    \   \"Guidelines for Authors and Reviewers of MIB Documents\" [RFC4181], by\n\
    \   C. M. Heard.\n   The working group thanks Martin Bjorklund, Juergen Schoenwaelder,\n\
    \   Ladislav Lhotka, Jernej Tuljak, Lou Berger, Robert Wilton, Kent\n   Watsen,\
    \ and William Lupton for their extensive reviews and\n   contributions to this\
    \ document.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Andy Bierman\n   YumaWorks\n   Email: andy@yumaworks.com\n"
