- title: __initial_text__
  contents:
  - "     Session Initiation Protocol (SIP) Event Notification Extension\n       \
    \              for Notification Rate Control\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies mechanisms for adjusting the rate of Session\n\
    \   Initiation Protocol (SIP) event notifications.  These mechanisms can\n   be\
    \ applied in subscriptions to all SIP event packages.  This document\n   updates\
    \ RFC 3265.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6446.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n   2.  Definitions and Document Conventions . . . . . . . .\
    \ . . . . .  5\n   3.  Overview . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n     3.1.  Use Case for Limiting the Maximum Rate of Notifications\
    \  .  5\n     3.2.  Use Case for Setting a Minimum Rate for Notifications  . .\
    \  6\n     3.3.  Use Case for Specifying an Adaptive Minimum Rate of\n       \
    \    Notifications  . . . . . . . . . . . . . . . . . . . . . .  6\n     3.4.\
    \  Requirements . . . . . . . . . . . . . . . . . . . . . . .  7\n   4.  Basic\
    \ Operations . . . . . . . . . . . . . . . . . . . . . . .  8\n     4.1.  Subscriber\
    \ Behavior  . . . . . . . . . . . . . . . . . . .  8\n     4.2.  Notifier Behavior\
    \  . . . . . . . . . . . . . . . . . . . .  9\n   5.  Operation of the Maximum\
    \ Rate Mechanism  . . . . . . . . . . .  9\n     5.1.  Subscriber Behavior  .\
    \ . . . . . . . . . . . . . . . . . .  9\n     5.2.  Notifier Behavior  . . .\
    \ . . . . . . . . . . . . . . . . . 10\n     5.3.  Selecting the Maximum Rate\
    \ . . . . . . . . . . . . . . . . 11\n     5.4.  The Maximum Rate Mechanism for\
    \ the Resource List Server  . 11\n     5.5.  Buffer Policy Description  . . .\
    \ . . . . . . . . . . . . . 13\n       5.5.1.  Partial-State Notifications  .\
    \ . . . . . . . . . . . . 13\n       5.5.2.  Full-State Notifications . . . .\
    \ . . . . . . . . . . . 13\n     5.6.  Estimated Bandwidth Savings  . . . . .\
    \ . . . . . . . . . . 14\n   6.  Operation of the Minimum Rate Mechanism  . .\
    \ . . . . . . . . . 14\n     6.1.  Subscriber Behavior  . . . . . . . . . . .\
    \ . . . . . . . . 14\n     6.2.  Notifier Behavior  . . . . . . . . . . . . .\
    \ . . . . . . . 15\n     6.3.  Selecting the Minimum Rate . . . . . . . . . .\
    \ . . . . . . 16\n   7.  Operation of the Adaptive Minimum Rate Mechanism . .\
    \ . . . . . 16\n     7.1.  Subscriber Behavior  . . . . . . . . . . . . . . .\
    \ . . . . 16\n     7.2.  Notifier Behavior  . . . . . . . . . . . . . . . . .\
    \ . . . 17\n     7.3.  Selecting the Adaptive Minimum Rate  . . . . . . . . .\
    \ . . 18\n     7.4.  Calculating the Timeout  . . . . . . . . . . . . . . . .\
    \ . 18\n   8.  Usage of the Maximum Rate, Minimum Rate, and Adaptive\n       Minimum\
    \ Rate Mechanisms in a Combination . . . . . . . . . . . 19\n   9.  Protocol Element\
    \ Definitions . . . . . . . . . . . . . . . . . 20\n     9.1.  \"max-rate\", \"\
    min-rate\", and \"adaptive-min-rate\" Header\n           Field Parameters . .\
    \ . . . . . . . . . . . . . . . . . . . 21\n     9.2.  Grammar  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . 21\n     9.3.  Event Header Field Usage\
    \ in Responses to the NOTIFY\n           Request  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 21\n   10. IANA Considerations  . . . . . . . . . . .\
    \ . . . . . . . . . . 22\n   11. Security Considerations  . . . . . . . . . .\
    \ . . . . . . . . . 22\n   12. Acknowledgments  . . . . . . . . . . . . . . .\
    \ . . . . . . . . 23\n   13. References . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 23\n     13.1. Normative References . . . . . . . . . . . . .\
    \ . . . . . . 23\n     13.2. Informative References . . . . . . . . . . . . .\
    \ . . . . . 24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The SIP events framework [RFC3265] defines a generic framework\
    \ for\n   subscriptions to and notifications of events related to SIP systems.\n\
    \   This framework defines the methods SUBSCRIBE and NOTIFY, and\n   introduces\
    \ the concept of an event package, which is a concrete\n   application of the\
    \ SIP events framework to a particular class of\n   events.\n   One of the things\
    \ the SIP events framework mandates is that each\n   event package specification\
    \ defines an absolute maximum on the rate\n   at which notifications are allowed\
    \ to be generated by a single\n   notifier.  Such a limit is provided in order\
    \ to reduce network load.\n   All of the existing event package specifications\
    \ include a\n   recommendation for the maximum notification rate, ranging from\
    \ once\n   in every five seconds [RFC3856], [RFC3680], [RFC3857] to once per\n\
    \   second [RFC3842].\n   Per the SIP events framework, each event package specification\
    \ is\n   allowed to define additional throttle mechanisms that allow the\n   subscriber\
    \ to further limit the rate of event notification.  So far,\n   none of the event\
    \ package specifications have defined such a\n   mechanism.\n   The resource list\
    \ extension [RFC4662] to the SIP events framework\n   also deals with rate limiting\
    \ of event notifications.  The extension\n   allows a subscriber to subscribe\
    \ to a heterogeneous list of resources\n   with a single SUBSCRIBE request, rather\
    \ than having to install a\n   subscription for each resource separately.  The\
    \ event list\n   subscription also allows rate limiting, or throttling of\n  \
    \ notifications, by means of the Resource List Server (RLS) buffering\n   notifications\
    \ of resource state changes, and sending them in batches.\n   However, the event\
    \ list mechanism provides no means for the\n   subscriber to set the interval\
    \ for the throttling.\n   Some event packages are also interested in specifying\
    \ an absolute or\n   an adaptive minimum rate at which notifications need to be\
    \ generated\n   by a notifier.  This helps the subscriber to effectively use\n\
    \   different trigger criteria within a subscription to eliminate\n   unnecessary\
    \ notifications but at the same time make sure that the\n   current event state\
    \ is periodically received.\n   This document defines an extension to the SIP\
    \ events framework by\n   defining the following three Event header field parameters\
    \ that allow\n   a subscriber to set a maximum, a minimum, and an adaptive minimum\n\
    \   rate of notifications generated by the notifier:\n   max-rate:  specifies\
    \ a maximum number of notifications per second.\n   min-rate:  specifies a minimum\
    \ number of notifications per second.\n   adaptive-min-rate:  specifies an adaptive\
    \ minimum number of\n      notifications per second.\n   These mechanisms are\
    \ applicable to any event subscription, both\n   single event subscription and\
    \ event list subscription.  A notifier\n   compliant to this specification will\
    \ adjust the rate at which it\n   generates notifications.\n"
- title: 2.  Definitions and Document Conventions
  contents:
  - "2.  Definitions and Document Conventions\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119] and\n   indicate requirement levels for compliant implementations.\n\
    \      Indented passages such as this one are used in this document to\n     \
    \ provide additional information and clarifying text.  They do not\n      contain\
    \ normative protocol behavior.\n"
- title: 3.  Overview
  contents:
  - '3.  Overview

    '
- title: 3.1.  Use Case for Limiting the Maximum Rate of Notifications
  contents:
  - "3.1.  Use Case for Limiting the Maximum Rate of Notifications\n   A presence\
    \ client in a mobile device contains a list of 100 buddies\n   or presentities.\
    \  In order to decrease the processing and network\n   load of watching 100 presentities,\
    \ the presence client has employed\n   an RLS with the list of buddies, and therefore\
    \ only needs a single\n   subscription to the RLS to receive notifications of\
    \ the presence\n   state of the resource list.\n   In order to control the buffer\
    \ policy of the RLS, the presence client\n   sets a maximum rate of notifications.\
    \  The RLS will buffer\n   notifications that are generated faster than they are\
    \ allowed to be\n   sent due to the maximum rate and batch all of the buffered\
    \ state\n   changes together in a single notification.  The maximum rate applies\n\
    \   to the overall resource list, which means that there is a hard cap\n   imposed\
    \ by the maximum rate to the number of notifications per second\n   that the presence\
    \ client can expect to receive.\n   The presence client can also modify the maximum\
    \ rate of notifications\n   during the lifetime of the subscription.  For example,\
    \ if the mobile\n   device detects inactivity from the user for a period of time,\
    \ the\n   presence client can simply pause notifications by choosing a \"max-\n\
    \   rate\" parameter that allows only a single notification for the\n   remainder\
    \ of the subscription lifetime.  When the user becomes active\n   again, the presence\
    \ client can resume the stream of notifications by\n   re-subscribing with a \"\
    max-rate\" parameter set to the earlier-used\n   value.  Application of the mechanism\
    \ defined by RFC 5839 [RFC5839]\n   can also eliminate the transmission of a (full-state)\
    \ notification\n   carrying the latest resource state to the presence client after\
    \ a\n   subscription refresh.\n"
- title: 3.2.  Use Case for Setting a Minimum Rate for Notifications
  contents:
  - "3.2.  Use Case for Setting a Minimum Rate for Notifications\n   A location application\
    \ is monitoring the movement of a target.  In\n   order to decrease the processing\
    \ and network load, the location\n   application has made a subscription to a\
    \ Location Server with a set\n   of location filters [RFC6447] that specify trigger\
    \ criteria, e.g., to\n   send an update only when the target has moved at least\
    \ n meters.\n   However, the application is also interested in receiving the current\n\
    \   state periodically, even if the state of the target has not changed\n   enough\
    \ to satisfy any of the trigger criteria, e.g., has not moved at\n   least n meters\
    \ within the period.\n   The location application sets a minimum rate of notifications\
    \ and\n   includes it in the subscription sent to the Location Server. The\n \
    \  \"min-rate\" parameter indicates the minimum number of notifications\n   per\
    \ second the notifier needs to generate.\n   The location application can modify\
    \ the minimum rate of notifications\n   during the lifetime of the subscription.\
    \  For example, when the\n   subscription to the movement of a target is made,\
    \ the notifier may\n   not have the location information available.  Thus, the\
    \ first\n   notification might be empty or certain values might be absent.  An\n\
    \   important use case is placing constraints on when complete state\n   should\
    \ be provided after creating the subscription.  Once state is\n   acquired and\
    \ the second notification is sent, the subscriber updates\n   or changes the \"\
    min-rate\" parameter to a more sensible value.  This\n   update can be performed\
    \ in the response to the notification that\n   contains the complete state information.\n"
- title: 3.3.  Use Case for Specifying an Adaptive Minimum Rate of Notifications
  contents:
  - "3.3.  Use Case for Specifying an Adaptive Minimum Rate of Notifications\n   The\
    \ minimum rate mechanism introduces a static and instantaneous rate\n   control\
    \ without the functionality to increase or decrease the\n   notification rate\
    \ adaptively.  However, there are some applications\n   that would work better\
    \ with an adaptive minimum rate control.\n   A location application is monitoring\
    \ the movement of a target.  In\n   order to decrease the processing in the application,\
    \ the location\n   application wants to make a subscription that dynamically decreases\n\
    \   the minimum rate of notifications if the target has sent out several\n   notifications\
    \ recently.  However, if there have been only few recent\n   notifications by\
    \ the target, the location application wants the\n   minimum rate of notifications\
    \ to increase.\n   The location application sets an adaptive minimum rate of\n\
    \   notifications and includes it in the subscription sent to the\n   Location\
    \ Server.  The \"adaptive-min-rate\" parameter value is used by\n   the notifier\
    \ to dynamically calculate the actual maximum time between\n   two notifications.\
    \  In order to dynamically calculate the maximum\n   time, the notifier takes\
    \ into consideration the rate at which\n   notifications have been sent recently.\
    \  In the adaptive minimum rate\n   mechanism, the notifier can increase or decrease\
    \ the notification\n   rate compared to the minimum rate mechanism based on the\
    \ recent\n   number of notifications sent out in the last period.\n   The location\
    \ application can also modify the \"adaptive-min-rate\"\n   parameter during the\
    \ lifetime of the subscription.\n"
- title: 3.4.  Requirements
  contents:
  - "3.4.  Requirements\n   REQ1:   The subscriber must be able to set a maximum rate\
    \ of\n           notifications in a specific subscription.\n   REQ2:   The subscriber\
    \ must be able to set a minimum rate of\n           notifications in a specific\
    \ subscription.\n   REQ3:   The subscriber must be able to set an adaptive minimum\
    \ rate\n           of notifications in a specific subscription, which adjusts\n\
    \           the minimum rate of notifications based on a moving average.\n   REQ4:\
    \   It must be possible to apply the maximum rate, the minimum\n           rate,\
    \ and the adaptive minimum rate mechanisms all together,\n           or in any\
    \ combination, in a specific subscription.\n   REQ5:   It must be possible to\
    \ use any of the different rate control\n           mechanisms in subscriptions\
    \ to any events.\n   REQ6:   It must be possible to use any of the different rate\
    \ control\n           mechanisms together with any other event filtering\n   \
    \        mechanisms.\n   REQ7:   The notifier must be allowed to use a policy\
    \ in which the\n           maximum rate, minimum rate, and adaptive minimum rate\n\
    \           parameters are adjusted from the value given by the\n           subscriber.\n\
    \              For example, due to congestion, local policy at the\n         \
    \     notifier could temporarily dictate a policy that in effect\n           \
    \   further decreases the maximum rate of notifications.  In\n              another\
    \ example, the notifier could increase the\n              subscriber-proposed\
    \ maximum rate so that at least one\n              notification is generated during\
    \ the remainder of the\n              subscription lifetime.\n   REQ8:   The different\
    \ rate control mechanisms must address corner\n           cases for setting the\
    \ notification rates appropriately.  At a\n           minimum, the mechanisms\
    \ must address the situation in which\n           the time between two notifications\
    \ exceeds the subscription\n           duration and should provide procedures\
    \ for avoiding this\n           situation.\n   REQ9:   It must be possible to\
    \ invoke, modify, or remove the\n           different rate control mechanisms\
    \ in the course of an active\n           subscription.\n   REQ10:  The different\
    \ rate control mechanisms must allow for the\n           application of authentication\
    \ and integrity protection\n           mechanisms to subscriptions invoking that\
    \ mechanism.\n"
- title: 4.  Basic Operations
  contents:
  - '4.  Basic Operations

    '
- title: 4.1.  Subscriber Behavior
  contents:
  - "4.1.  Subscriber Behavior\n   In general, a subscriber generates SUBSCRIBE requests\
    \ and processes\n   NOTIFY requests as described in RFC 3265 [RFC3265].\n   A\
    \ subscriber that wants to have a maximum, minimum, or adaptive\n   minimum rate\
    \ of event notifications in a specific event subscription\n   does so by including\
    \ a \"max-rate\", \"min-rate\", or \"adaptive-min-rate\"\n   Event header field\
    \ parameter(s) as part of the SUBSCRIBE request.\n   A subscriber that wants to\
    \ update a previously agreed event rate\n   control parameter does so by including\
    \ the updated \"max-rate\", \"min-\n   rate\", or \"adaptive-min-rate\" Event\
    \ header field parameter(s) as part\n   of a subsequent SUBSCRIBE request or a\
    \ 2xx response to the NOTIFY\n   request.  If the subscriber does not include\
    \ at least one of the\n   \"max-rate\", \"min-rate\", or \"adaptive-min-rate\"\
    \ header field\n   parameters in the most recent SUBSCRIBE request in a given\
    \ dialog,\n   the subscriber MUST NOT include an Event header field with any of\n\
    \   those parameters in a 2xx response to a NOTIFY request in that\n   dialog.\n"
- title: 4.2.  Notifier Behavior
  contents:
  - "4.2.  Notifier Behavior\n   In general, a notifier processes SUBSCRIBE requests\
    \ and generates\n   NOTIFY requests as described in RFC 3265 [RFC3265].\n   A\
    \ notifier that supports the different rate control mechanisms MUST\n   adjust\
    \ its rate of notification according to the rate control values\n   agreed with\
    \ the subscriber.  If the notifier needs to lower the\n   subscription expiration\
    \ value, or if a local policy or other\n   implementation-determined constraint\
    \ at the notifier cannot satisfy\n   the rate control request, then the notifier\
    \ can adjust (i.e.,\n   increase or decrease) appropriately the subscriber-requested\
    \ rate\n   control values.  The notifier MUST reflect back the possibly adjusted\n\
    \   rate control values in a \"max-rate\", \"min-rate\", or \"adaptive-min-\n\
    \   rate\" Subscription-State header field parameter of the subsequent\n   NOTIFY\
    \ requests.\n"
- title: 5.  Operation of the Maximum Rate Mechanism
  contents:
  - '5.  Operation of the Maximum Rate Mechanism

    '
- title: 5.1.  Subscriber Behavior
  contents:
  - "5.1.  Subscriber Behavior\n   A subscriber that wishes to apply a maximum rate\
    \ to notifications in\n   a subscription MUST construct a SUBSCRIBE request that\
    \ includes the\n   \"max-rate\" Event header field parameter.  This parameter\
    \ specifies\n   the requested maximum number of notifications per second.  The\
    \ value\n   of this parameter is a positive real number given by a finite decimal\n\
    \   representation.\n      Note that the grammar in section 9.2 constrains this\
    \ value to be\n      between 0.0000000001 and 99.9999999999.  Zero is not an allowed\n\
    \      value.\n      Note that the witnessed notification rate may not conform\
    \ to the\n      \"max-rate\" value for a number of reasons.  For example, network\n\
    \      jitter and retransmissions may result in the subscriber receiving\n   \
    \   the notifications more frequently than the \"max-rate\" value\n      recommends.\n\
    \   A subscriber that wishes to update the previously agreed maximum rate\n  \
    \ of notifications MUST include the updated \"max-rate\" Event header\n   field\
    \ parameter in a subsequent SUBSCRIBE request or a 2xx response\n   to the NOTIFY\
    \ request.\n   A subscriber that wishes to remove the maximum rate control from\n\
    \   notifications MUST indicate so by not including a \"max-rate\" Event\n   header\
    \ field parameter in a subsequent SUBSCRIBE request or a 2xx\n   response to the\
    \ NOTIFY request.\n   There are two main consequences for the subscriber when\
    \ applying the\n   maximum rate mechanism: state transitions may be lost and event\n\
    \   notifications may be delayed.  If either of these side effects\n   constitute\
    \ a problem to the application that utilizes the event\n   notifications, developers\
    \ are instructed not to use the mechanism.\n"
- title: 5.2.  Notifier Behavior
  contents:
  - "5.2.  Notifier Behavior\n   A notifier that supports the maximum rate mechanism\
    \ MUST extract the\n   value of the \"max-rate\" Event header parameter from a\
    \ SUBSCRIBE\n   request or a 2xx response to the NOTIFY request and use it as\
    \ the\n   suggested maximum number of notifications per second.  This value can\n\
    \   be adjusted by the notifier, as defined in Section 5.3.\n   A compliant notifier\
    \ MUST reflect back the possibly adjusted maximum\n   rate of notifications in\
    \ a \"max-rate\" Subscription-State header field\n   parameter of the subsequent\
    \ NOTIFY requests.  The indicated \"max-\n   rate\" value is adopted by the notifier,\
    \ and the notification rate is\n   adjusted accordingly.\n   A notifier that does\
    \ not understand this extension will not reflect\n   the \"max-rate\" Subscription-State\
    \ header field parameter in the\n   NOTIFY requests; the absence of this parameter\
    \ indicates to the\n   subscriber that no rate control is supported by the notifier.\n\
    \   A compliant notifier MUST NOT generate a notification if the interval\n  \
    \ since the most recent notification is less than the reciprocal value\n   of\
    \ the \"max-rate\" parameter, except when generating the notification\n   either\
    \ upon receipt of a SUBSCRIBE request, when the subscription\n   state is changing\
    \ from \"pending\" to \"active\" state, or upon\n   termination of the subscription\
    \ (the last notification).\n   When a local policy dictates a maximum rate for\
    \ notifications, a\n   notifier will not generate notifications more frequently\
    \ than the\n   local policy maximum rate, even if the subscriber is not asking\
    \ for\n   maximum rate control.  The notifier MAY inform the subscriber about\n\
    \   such a local policy maximum rate using the \"max-rate\" Subscription-\n  \
    \ State header field parameter included in subsequent NOTIFY requests.\n   Retransmissions\
    \ of NOTIFY requests are not affected by the maximum\n   rate mechanism, i.e.,\
    \ the maximum rate mechanism only applies to the\n   generation of new transactions.\
    \  In other words, the maximum rate\n   mechanism does not in any way break or\
    \ modify the normal\n   retransmission mechanism specified in RFC 3261 [RFC3261].\n"
- title: 5.3.  Selecting the Maximum Rate
  contents:
  - "5.3.  Selecting the Maximum Rate\n   Special care needs to be taken when selecting\
    \ the maximum rate.  For\n   example, the maximum rate could potentially set a\
    \ minimum time value\n   between notifications that exceeds the subscription expiration\
    \ value.\n   Such a configuration would effectively quench the notifier, resulting\n\
    \   in exactly two notifications being generated.  If the subscriber\n   requests\
    \ a maximum rate that would result in no notification before\n   the subscription\
    \ expiration, the notifier MUST increase the maximum\n   rate and set it to the\
    \ reciprocal value of the remaining subscription\n   expiration time.  According\
    \ to RFC 3265 [RFC3265], the notifier may\n   also shorten the subscription expiry\
    \ anytime during an active\n   subscription.  If the subscription expiry is shortened\
    \ during an\n   active subscription, the notifier MUST also increase the \"max-rate\"\
    \n   value and set it to the reciprocal value of the reduced subscription\n  \
    \ expiration time.\n   In some cases, it makes sense to temporarily pause the\
    \ notification\n   stream on an existing subscription dialog without terminating\
    \ the\n   subscription, e.g., due to inactivity on the application user\n   interface.\
    \  Whenever a subscriber discovers the need to perform the\n   notification pause\
    \ operation, it SHOULD set the maximum rate to the\n   reciprocal value of the\
    \ remaining subscription expiration value.\n   This results in receiving no further\
    \ notifications until the\n   subscription expires or the subscriber sends a SUBSCRIBE\
    \ request\n   resuming notifications.\n   The notifier MAY decide to increase\
    \ or decrease the proposed \"max-\n   rate\" value by the subscriber based on\
    \ its local policy, static\n   configuration, or other implementation-determined\
    \ constraints.  In\n   addition, different event packages MAY define other constraints\
    \ for\n   the allowed maximum rate ranges.  Such constraints are out of the\n\
    \   scope of this specification.\n"
- title: 5.4.  The Maximum Rate Mechanism for the Resource List Server
  contents:
  - "5.4.  The Maximum Rate Mechanism for the Resource List Server\n   When applied\
    \ to a list subscription [RFC4662], the maximum rate\n   mechanism has some additional\
    \ considerations.  Specifically, the\n   maximum rate applies to the aggregate\
    \ notification stream resulting\n   from the list subscription, rather than explicitly\
    \ controlling the\n   notification of each of the implied constituent events.\
    \  Moreover,\n   the RLS can use the maximum rate mechanism on its own to control\
    \ the\n   rate of the back-end subscriptions to avoid overflowing its buffer.\n\
    \   The notifier is responsible for sending event notifications upon\n   state\
    \ changes of the subscribed resource.  We can model the notifier\n   as consisting\
    \ of four components: the event state resource(s), the\n   RLS (or any other notifier),\
    \ a notification buffer, and finally the\n   subscriber, or watcher of the event\
    \ state, as shown in Figure 1.\n                       +--------+\n          \
    \             | Event  |\n        +--------+     |Resource|     +--------+\n \
    \       | Event  |     +--------+     | Event  |\n        |Resource|         |\
    \          |Resource|\n        +---.=---+         |          +---=----+\n    \
    \          `-..         |         _.--'\n                  ``-._    |    _.--'\n\
    \                       +'--'--'-+\n                       |Resource|\n      \
    \                 |  List  |\n                       | Server |\n            \
    \           +---.----+\n                           |\n                       \
    \    |\n                        )--+---(\n                        |      |   \
    \    .--------.\n                        |Buffer|<======'max-rate|\n         \
    \               |      |       `--------'\n                        )--.---(\n\
    \                           |\n                           |\n                \
    \       .---+---.\n                       | Event |\n                       |Watcher|\n\
    \                       `-------'\n         Figure 1: Model for the RLS Supporting\
    \ Event Rate Control\n   In short, the RLS reads event state changes from the\
    \ event state\n   resource, either by creating a back-end subscription or by other\n\
    \   means; it packages them into event notifications and submits them\n   into\
    \ the output buffer.  The rate at which this output buffer drains\n   is controlled\
    \ by the subscriber via the maximum rate mechanism.  When\n   a set of notifications\
    \ are batched together, the way in which\n   overlapping resource state is handled\
    \ depends on the type of the\n   resource state:\n      In theory, there are many\
    \ buffer policies that the notifier could\n      implement.  However, we only\
    \ concentrate on two practical buffer\n      policies in this specification, leaving\
    \ additional ones for\n      further study and out of the scope of this specification.\
    \  These\n      two buffer policies depend on the mode in which the notifier is\n\
    \      operating.\n   Full-state:  Last (most recent) full-state notification\
    \ of each\n      resource is sent out, and all others in the buffer are discarded.\n\
    \      This policy applies to those event packages that carry full-state\n   \
    \   notifications.\n   Partial-state:  The state deltas of each buffered partial\n\
    \      notification per resource are merged, and the resulting\n      notification\
    \ is sent out.  This policy applies to those event\n      packages that carry\
    \ partial-state notifications.\n"
- title: 5.5.  Buffer Policy Description
  contents:
  - '5.5.  Buffer Policy Description

    '
- title: 5.5.1.  Partial-State Notifications
  contents:
  - "5.5.1.  Partial-State Notifications\n   With partial notifications, the notifier\
    \ needs to maintain a separate\n   buffer for each subscriber since each subscriber\
    \ may have a different\n   value for the maximum rate of notifications.  The notifier\
    \ will\n   always need to keep both a copy of the current full state of the\n\
    \   resource F, as well as the last successfully communicated full state\n   view\
    \ F' of the resource in a specific subscription.  The construction\n   of a partial\
    \ notification then involves creating a difference of the\n   two states, and\
    \ generating a notification that contains that\n   difference.\n   When the maximum\
    \ rate mechanism is applied to the subscription, it is\n   important that F' be\
    \ replaced with F only when the difference of F\n   and F' is already included\
    \ in a partial-state notification to the\n   subscriber allowed by the maximum\
    \ rate mechanism.  Additionally, the\n   notifier implementation SHOULD check\
    \ to see that the size of an\n   accumulated partial state notification is smaller\
    \ than the full\n   state, and if not, the notifier SHOULD send the full-state\n\
    \   notification instead.\n"
- title: 5.5.2.  Full-State Notifications
  contents:
  - "5.5.2.  Full-State Notifications\n   With full-state notifications, the notifier\
    \ only needs to keep the\n   full state of the resource, and when that changes,\
    \ send the resulting\n   notification to the subscriber.\n   When the maximum\
    \ rate mechanism is applied to the subscription, the\n   notifier receives the\
    \ state changes of the resource and generates a\n   notification.  If there is\
    \ a pending notification, the notifier\n   simply replaces that notification with\
    \ the new notification,\n   discarding the older state.\n"
- title: 5.6.  Estimated Bandwidth Savings
  contents:
  - "5.6.  Estimated Bandwidth Savings\n   It is difficult to estimate the total bandwidth\
    \ savings accrued by\n   using the maximum rate mechanism over a subscription,\
    \ since such\n   estimates will vary depending on the usage scenarios.  However,\
    \ it is\n   easy to see that given a subscription where several full-state\n \
    \  notifications would have normally been sent in any given interval set\n   by\
    \ the \"max-rate\" parameter, only a single notification is sent\n   during the\
    \ same interval when using the maximum rate mechanism,\n   yielding bandwidth\
    \ savings of several times the notification size.\n   With partial-state notifications,\
    \ drawing estimates is further\n   complicated by the fact that the states of\
    \ consecutive updates may or\n   may not overlap.  However, even in the worst-case\
    \ scenario, where\n   each partial update is to a different part of the full state,\
    \ a rate\n   controlled notification merging all of these n partial states\n \
    \  together should at a maximum be the size of a full-state update.  In\n   this\
    \ case, the bandwidth savings are approximately n times the size\n   of the header\
    \ fields of the NOTIFY request.\n   It is also true that there are several compression\
    \ schemes available\n   that have been designed to save bandwidth in SIP, e.g.,\
    \ SigComp\n   [RFC3320] and TLS compression [RFC3943].  However, such compression\n\
    \   schemes are complementary rather than competing mechanisms to the\n   maximum\
    \ rate mechanism.  After all, they can both be applied\n   simultaneously.\n"
- title: 6.  Operation of the Minimum Rate Mechanism
  contents:
  - '6.  Operation of the Minimum Rate Mechanism

    '
- title: 6.1.  Subscriber Behavior
  contents:
  - "6.1.  Subscriber Behavior\n   A subscriber that wishes to apply a minimum rate\
    \ to notifications in\n   a subscription MUST construct a SUBSCRIBE request that\
    \ includes the\n   \"min-rate\" Event header field parameter.  This parameter\
    \ specifies\n   the requested minimum number of notifications per second.  The\
    \ value\n   of this parameter is a positive real number given by a finite decimal\n\
    \   representation.\n      Note that the grammar in section 9.2 constrains this\
    \ value to be\n      between 0.0000000001 and 99.9999999999.  Zero is not an allowed\n\
    \      value.\n   A subscriber that wishes to update the previously agreed minimum\
    \ rate\n   of notifications MUST include the updated \"min-rate\" Event header\n\
    \   field parameter in a subsequent SUBSCRIBE request or a 2xx response\n   to\
    \ the NOTIFY request.\n   A subscriber that wishes to remove the minimum rate\
    \ control from\n   notifications MUST indicate so by not including a \"min-rate\"\
    \ Event\n   header field parameter in a subsequent SUBSCRIBE request or a 2xx\n\
    \   response to the NOTIFY request.\n   The main consequence for the subscriber\
    \ when applying the minimum\n   rate mechanism is that it can receive a notification\
    \ even if nothing\n   has changed in the current state of the notifier.  However,\
    \ RFC 5839\n   [RFC5839] defines a mechanism that allows suppression of a NOTIFY\n\
    \   request or a NOTIFY request body if the state has not changed.\n"
- title: 6.2.  Notifier Behavior
  contents:
  - "6.2.  Notifier Behavior\n   A notifier that supports the minimum rate mechanism\
    \ MUST extract the\n   value of the \"min-rate\" Event header field parameter\
    \ from a SUBSCRIBE\n   request or a 2xx response to the NOTIFY request and use\
    \ it as the\n   suggested minimum number of notifications per second.  This value\
    \ can\n   be adjusted by the notifier, as defined in Section 6.3.\n   A compliant\
    \ notifier MUST reflect back the possibly adjusted minimum\n   rate of notifications\
    \ in a \"min-rate\" Subscription-State header field\n   parameter of the subsequent\
    \ NOTIFY requests.  The indicated \"min-\n   rate\" value is adopted by the notifier,\
    \ and the notification rate is\n   adjusted accordingly.\n   A notifier that does\
    \ not understand this extension will not reflect\n   the \"min-rate\" Subscription-State\
    \ header field parameter in the\n   NOTIFY requests; the absence of this parameter\
    \ indicates to the\n   subscriber that no rate control is supported by the notifier.\n\
    \   A compliant notifier MUST generate notifications when state changes\n   occur\
    \ or when the time since the most recent notification exceeds the\n   reciprocal\
    \ value of the \"min-rate\" parameter.  Depending on the event\n   package and\
    \ subscriber preferences indicated in the SUBSCRIBE\n   request, the NOTIFY request\
    \ sent as a result of a minimum rate\n   mechanism MUST contain either the current\
    \ full state or the partial\n   state showing the difference between the current\
    \ state and the last\n   successfully communicated state.  If the subscriber and\
    \ the notifier\n   support the procedures in RFC 5839 [RFC5839], the complete\
    \ NOTIFY\n   request or the NOTIFY request body can be suppressed if the state\
    \ has\n   not changed from the previous notification.\n   Retransmissions of NOTIFY\
    \ requests are not affected by the minimum\n   rate mechanism, i.e., the minimum\
    \ rate mechanism only applies to the\n   generation of new transactions.  In other\
    \ words, the minimum rate\n   mechanism does not in any way break or modify the\
    \ normal\n   retransmission mechanism.\n"
- title: 6.3.  Selecting the Minimum Rate
  contents:
  - "6.3.  Selecting the Minimum Rate\n   The minimum rate mechanism can be used to\
    \ generate a lot of\n   notifications, creating additional processing load for\
    \ the notifier.\n   Some of the notifications may also be unnecessary possibly\
    \ repeating\n   already known state information to the subscriber.  It is difficult\n\
    \   to provide generic guidelines for the acceptable minimum rate value\n   ranges;\
    \ however, the subscriber SHOULD request the lowest possible\n   minimum rate.\
    \  Different event packages MAY define other constraints\n   for the allowed minimum\
    \ rate values.  Such constraints are out of the\n   scope of this specification.\n\
    \   The notifier MAY decide to increase or decrease the proposed \"min-\n   rate\"\
    \ value by the subscriber based on its local policy, static\n   configuration,\
    \ or other implementation-determined constraints.\n"
- title: 7.  Operation of the Adaptive Minimum Rate Mechanism
  contents:
  - '7.  Operation of the Adaptive Minimum Rate Mechanism

    '
- title: 7.1.  Subscriber Behavior
  contents:
  - "7.1.  Subscriber Behavior\n   A subscriber that wishes to apply an adaptive minimum\
    \ rate to\n   notifications in a subscription MUST construct a SUBSCRIBE request\n\
    \   that includes the \"adaptive-min-rate\" Event header field parameter.\n  \
    \ This parameter specifies an adaptive minimum number of notifications\n   per\
    \ second.  The value of this parameter is a positive real number\n   given by\
    \ a finite decimal representation.\n      Note that the grammar in section 9.2\
    \ constrains this value to be\n      between 0.0000000001 and 99.9999999999. \
    \ Zero is not an allowed\n      value.\n   A subscriber that wishes to update\
    \ the previously agreed adaptive\n   minimum rate of notifications MUST include\
    \ the updated \"adaptive-min-\n   rate\" Event header field parameter in a subsequent\
    \ SUBSCRIBE request\n   or a 2xx response to the NOTIFY request.\n   A subscriber\
    \ that wishes to remove the adaptive minimum rate control\n   from notifications\
    \ MUST indicate so by not including an \"adaptive-\n   min-rate\" Event header\
    \ field parameter in a subsequent SUBSCRIBE\n   request or a 2xx response to the\
    \ NOTIFY request.\n   The main consequence for the subscriber when applying the\
    \ adaptive\n   minimum rate mechanism is that it can receive a notification, even\
    \ if\n   nothing has changed in the current state of the notifier.  However,\n\
    \   RFC 5839 [RFC5839] defines a mechanism that allows suppression of a\n   NOTIFY\
    \ request or a NOTIFY request body if the state has not changed.\n"
- title: 7.2.  Notifier Behavior
  contents:
  - "7.2.  Notifier Behavior\n   A notifier that supports the adaptive minimum rate\
    \ mechanism MUST\n   extract the value of the \"adaptive-min-rate\" Event header\
    \ parameter\n   from a SUBSCRIBE request or a 2xx response to the NOTIFY request\
    \ and\n   use it to calculate the actual maximum time between two\n   notifications,\
    \ as defined in Section 7.4.\n   The \"adaptive-min-rate\" value can be adjusted\
    \ by the notifier, as\n   defined in Section 7.3.\n   A compliant notifier MUST\
    \ reflect back the possibly adjusted adaptive\n   minimum rate of notifications\
    \ in an \"adaptive-min-rate\" Subscription-\n   State header field parameter of\
    \ the subsequent NOTIFY requests.  The\n   indicated \"adaptive-min-rate\" value\
    \ is adopted by the notifier, and\n   the notification rate is adjusted accordingly.\n\
    \   A notifier that does not understand this extension will not reflect\n   the\
    \ \"adaptive-min-rate\" Subscription-State header parameter in the\n   NOTIFY\
    \ requests; the absence of this parameter indicates to the\n   subscriber that\
    \ no rate control is supported by the notifier.\n   A compliant notifier MUST\
    \ generate notifications when state changes\n   occur or when the time since the\
    \ most recent notification exceeds the\n   value calculated using the formula\
    \ defined in Section 7.4.  Depending\n   on the event package and subscriber preferences\
    \ indicated in the\n   SUBSCRIBE request, the NOTIFY request sent as a result\
    \ of a minimum\n   rate mechanism MUST contain either the current full state or\
    \ the\n   partial state showing the difference between the current state and\n\
    \   the last successfully communicated state.  If the subscriber and the\n   notifier\
    \ support the procedures in RFC 5839 [RFC5839], the complete\n   NOTIFY request\
    \ or the NOTIFY request body can be suppressed if the\n   state has not changed\
    \ from the previous notification.\n   The adaptive minimum rate mechanism is implemented\
    \ as follows:\n   1)  When a subscription is first created, the notifier creates\
    \ a\n       record (\"count\" parameter) that keeps track of the number of\n \
    \      notifications that have been sent in the \"period\".  The \"count\"\n \
    \      parameter is initialized to contain a history of having sent a\n      \
    \ \"period * adaptive-min-rate\" number of notifications for the\n       \"period\"\
    .\n   2)  The \"timeout\" value is calculated according to the equation given\n\
    \       in Section 7.4.\n   3)  If the timeout period passes without a NOTIFY\
    \ request being sent\n       in the subscription, then the current resource state\
    \ is sent\n       (subject to any filtering associated with the subscription).\n\
    \   4)  Whenever a NOTIFY request is sent (regardless of whether due to a\n  \
    \     \"timeout\" event or a state change), the notifier updates the\n       notification\
    \ history record stored in the \"count\" parameter,\n       recalculates the value\
    \ of \"timeout\", and returns to step 3.\n   Retransmissions of NOTIFY requests\
    \ are not affected by the timeout,\n   i.e., the timeout only applies to the generation\
    \ of new transactions.\n   In other words, the timeout does not in any way break\
    \ or modify the\n   normal retransmission mechanism specified in RFC 3261 [RFC3261].\n"
- title: 7.3.  Selecting the Adaptive Minimum Rate
  contents:
  - "7.3.  Selecting the Adaptive Minimum Rate\n   The adaptive minimum rate mechanism\
    \ can be used to generate a lot of\n   notifications, creating additional processing\
    \ load for the notifier.\n   Some of the notifications may also be unnecessary,\
    \ possibly repeating\n   already known state information to the subscriber.  It\
    \ is difficult\n   to provide generic guidelines for the acceptable adaptive minimum\n\
    \   rate value ranges; however, the subscriber SHOULD request the lowest\n   possible\
    \ adaptive minimum rate value.  Different event packages MAY\n   define other\
    \ constraints for the allowed adaptive minimum rate\n   values.  Such constraints\
    \ are out of the scope of this specification.\n   The notifier MAY decide to increase\
    \ or decrease the proposed\n   \"adaptive-min-rate\" value based on its local\
    \ policy, static\n   configuration, or other implementation-determined constraints.\n"
- title: 7.4.  Calculating the Timeout
  contents:
  - "7.4.  Calculating the Timeout\n   The formula used to vary the absolute pacing\
    \ in a way that will meet\n   the adaptive minimum rate requested over the period\
    \ is given in\n   equation (1):\n   timeout = count / ((adaptive-min-rate ^ 2)\
    \ * period)              (1)\n   The output of the formula, \"timeout\", is the\
    \ time to the next\n   notification, expressed in seconds.  The formula has three\
    \ inputs:\n   adaptive-min-rate:  The value of the \"adaptive-min-rate\" parameter\n\
    \      conveyed in the Subscription-State header field.\n   period:  The rolling\
    \ average period, in seconds.  The granularity of\n      the values for the \"\
    period\" parameter is set by local policy at\n      the notifier; however, the\
    \ notifier MUST choose a value greater\n      than the reciprocal value of the\
    \ \"adaptive-min-rate\" parameter.\n      It is also RECOMMENDED that the notifier\
    \ choose a \"period\"\n      parameter several times larger than reciprocal value\
    \ of the\n      \"adaptive-min-rate\" parameter in order to maximize the\n   \
    \   effectiveness of equation (1).  It is an implementation decision\n      whether\
    \ the notifier uses the same value of the \"period\" parameter\n      for all\
    \ subscriptions or individual values for each subscription.\n   count:  The number\
    \ of notifications that have been sent during the\n      last \"period\" of seconds,\
    \ not including any retransmissions of\n      requests.\n   In case both the maximum\
    \ rate and the adaptive minimum rate\n   mechanisms are used in the same subscription,\
    \ the formula used to\n   dynamically calculate the timeout is given in equation\
    \ (2):\n timeout = MAX[(1/max-rate), count/((adaptive-min-rate ^ 2)*period)] (2)\n\
    \   max-rate:  The value of the \"max-rate\" parameter conveyed in the\n     \
    \ Subscription-State header field.\n   The formula in (2) makes sure that for\
    \ all the possible values of the\n   \"max-rate\" and \"adaptive-min-rate\" parameters,\
    \ with \"adaptive-min-\n   rate\" < \"max-rate\", the timeout never results in\
    \ a lower value than\n   the reciprocal value of the \"max-rate\" parameter.\n\
    \   In some situations, it may be beneficial for the notifier to achieve\n   an\
    \ adaptive minimum rate in a different way than the algorithm\n   detailed in\
    \ this document allows.  However, the notifier MUST comply\n   with any \"max-rate\"\
    \ or \"min-rate\" parameters that have been\n   negotiated.\n"
- title: 8.  Usage of the Maximum Rate, Minimum Rate, and Adaptive Minimum Rate
  contents:
  - "8.  Usage of the Maximum Rate, Minimum Rate, and Adaptive Minimum Rate\n    Mechanisms\
    \ in a Combination\n   Applications can subscribe to an event package using all\
    \ the rate\n   control mechanisms individually, or in combination; in fact there\
    \ is\n   no technical incompatibility among them.  However, there are some\n \
    \  combinations of the different rate control mechanisms that make\n   little\
    \ sense to be used together.  This section lists all the\n   combinations that\
    \ are possible to insert in a subscription; the\n   ability to use each combination\
    \ in a subscription is also analyzed.\n   maximum rate and minimum rate:  This\
    \ combination allows a reduced\n      notification rate, but at the same time\
    \ assures the reception of\n      periodic notifications.\n      A subscriber\
    \ SHOULD choose a \"min-rate\" value lower than the \"max-\n      rate\" value,\
    \ otherwise, the notifier MUST adjust the subscriber\n      provided \"min-rate\"\
    \ value to a value equal to or lower than the\n      \"max-rate\" value.\n   maximum\
    \ rate and adaptive minimum rate:  It works in a similar way as\n      the combination\
    \ above, but with the difference that the interval\n      at which notifications\
    \ are assured changes dynamically.\n      A subscriber SHOULD choose an \"adaptive-min-rate\"\
    \ value lower than\n      the \"max-rate\" value, otherwise, the notifier MUST\
    \ adjust the\n      subscriber provided \"adaptive-min-rate\" value to a value\
    \ equal to\n      or lower than the \"max-rate\" value.\n   minimum rate and adaptive\
    \ minimum rate:  When using the adaptive\n      minimum rate mechanism, frequent\
    \ state changes in a short period\n      can result in no notifications for a\
    \ longer period following the\n      short period.  The addition of the minimum\
    \ rate mechanism ensures\n      that the subscriber always receives notifications\
    \ after a\n      specified interval.\n      A subscriber SHOULD choose a \"min-rate\"\
    \ value lower than the\n      \"adaptive-min-rate\" value, otherwise, the notifier\
    \ MUST NOT\n      consider the \"min-rate\" value.\n   maximum rate, minimum rate,\
    \ and adaptive minimum rate:  This\n      combination makes little sense to be\
    \ used, although it is not\n      forbidden.\n      A subscriber SHOULD choose\
    \ a \"min-rate\" and \"adaptive-min-rate\"\n      values lower than the \"max-rate\"\
    \ value, otherwise, the notifier\n      MUST adjust the subscriber provided \"\
    min-rate\" and \"adaptive-min-\n      rate\" values to a value equal to or lower\
    \ than the \"max-rate\"\n      value.\n      A subscriber SHOULD choose a \"min-rate\"\
    \ value lower than the\n      \"adaptive-min-rate\" value, otherwise, the notifier\
    \ MUST NOT\n      consider the \"min-rate\" value.\n"
- title: 9.  Protocol Element Definitions
  contents:
  - "9.  Protocol Element Definitions\n   This section describes the protocol extensions\
    \ required for the\n   different rate control mechanisms.\n"
- title: 9.1.  "max-rate", "min-rate", and "adaptive-min-rate" Header Field
  contents:
  - "9.1.  \"max-rate\", \"min-rate\", and \"adaptive-min-rate\" Header Field\n  \
    \    Parameters\n   The \"max-rate\", \"min-rate\", and \"adaptive-min-rate\"\
    \ parameters are\n   added to the rule definitions of the Event header field and\
    \ the\n   Subscription-State header field in RFC 3265 [RFC3265] grammar.  Usage\n\
    \   of this parameter is described in Sections 5, 6, and 7.\n"
- title: 9.2.  Grammar
  contents:
  - "9.2.  Grammar\n   This section describes the Augmented BNF [RFC5234] definitions\
    \ for\n   the new header field parameters.  Note that we derive here from the\n\
    \   ruleset present in RFC 3265 [RFC3265], adding additional alternatives\n  \
    \ to the alternative sets of \"event-param\" and \"subexp-params\" defined\n \
    \  therein.\n      event-param     =  max-rate-param\n                       \
    \  / min-rate-param\n                         / amin-rate-param\n      subexp-params\
    \   =  max-rate-param\n                         / min-rate-param\n           \
    \              / amin-rate-param\n      max-rate-param  =  \"max-rate\" EQUAL\n\
    \                         (1*2DIGIT [\".\" 1*10DIGIT])\n      min-rate-param \
    \ =  \"min-rate\" EQUAL\n                         (1*2DIGIT [\".\" 1*10DIGIT])\n\
    \      amin-rate-param =  \"adaptive-min-rate\" EQUAL\n                      \
    \   (1*2DIGIT [\".\" 1*10DIGIT])\n"
- title: 9.3.  Event Header Field Usage in Responses to the NOTIFY Request
  contents:
  - "9.3.  Event Header Field Usage in Responses to the NOTIFY Request\n   This table\
    \ expands the table described in Section 7.2 of RFC 3265\n   [RFC3265], allowing\
    \ the Event header field to appear in a 2xx\n   response to a NOTIFY request.\
    \  The use of the Event header field in\n   responses other than 2xx to NOTIFY\
    \ requests is undefined and out of\n   scope of this specification.\n      Header\
    \ field      where proxy ACK BYE CAN INV OPT REG PRA SUB NOT\n      -----------------------------------------------------------------\n\
    \      Event             2xx          -   -   -   -   -   -   -   -   o\n   A\
    \ subscriber that wishes to update the previously agreed value for\n   maximum,\
    \ minimum, or adaptive minimum rate of notifications MUST\n   include all desired\
    \ values for the \"max-rate\", \"min-rate\", and\n   \"adaptive-min-rate\" parameters\
    \ in an Event header field of the 2xx\n   response to a NOTIFY request.  Any of\
    \ the other header field\n   parameters currently defined for the Event header\
    \ field by other\n   specifications do not have a meaning if the Event header\
    \ field is\n   included in the 2xx response to the NOTIFY request.  These header\n\
    \   field parameters MUST be ignored by the notifier, if present.\n   The event\
    \ type listed in the Event header field of the 2xx response\n   to the NOTIFY\
    \ request MUST match the event type of the Event header\n   field in the corresponding\
    \ NOTIFY request.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   This specification registers three new SIP header\
    \ field parameters in\n   the \"Header Field Parameters and Parameter Values\"\
    \ sub-registry of\n   the \"Session Initiation Protocol (SIP) Parameters\" registry.\n\
    \                                               Predefined\n      Header Field\
    \         Parameter Name        Values      Reference\n      --------------------\
    \ ---------------     ----------    ---------\n      Event                max-rate\
    \            No            [RFC6446]\n      Subscription-State   max-rate    \
    \        No            [RFC6446]\n      Event                min-rate        \
    \    No            [RFC6446]\n      Subscription-State   min-rate            No\
    \            [RFC6446]\n      Event                adaptive-min-rate   No    \
    \        [RFC6446]\n      Subscription-State   adaptive-min-rate   No        \
    \    [RFC6446]\n   This specification also updates the reference defining the\
    \ Event\n   header field in the \"Header Fields\" sub-registry of the \"Session\n\
    \   Initiation Protocol (SIP) Parameters\" registry.\n      Header Name  compact\
    \   Reference\n      -----------  -------   ------------------\n      Event  \
    \        o       [RFC3265][RFC6446]\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   Naturally, the security considerations listed\
    \ in RFC 3265 [RFC3265],\n   which the rate control mechanisms described in this\
    \ document extends,\n   apply in their entirety.  In particular, authentication\
    \ and message\n   integrity SHOULD be applied to subscriptions with this extension.\n\
    \   RFC 3265 [RFC3265] recommends the integrity protection of the Event\n   header\
    \ field of SUBSCRIBE requests.  Implementations of this\n   extension SHOULD also\
    \ provide integrity protection for the Event\n   header field included in the\
    \ 2xx response to the NOTIFY request.\n   Without integrity protection, an eavesdropper\
    \ could see and modify\n   the Event header field, or it could manipulate the\
    \ transmission of a\n   200 (OK) response to the NOTIFY request to suppress or\
    \ flood\n   notifications without the subscriber seeing what caused the problem.\n\
    \   When the maximum rate mechanism involves partial-state notifications,\n  \
    \ the security considerations listed in RFC 5263 [RFC5263] apply in\n   their\
    \ entirety.\n"
- title: 12.  Acknowledgments
  contents:
  - "12.  Acknowledgments\n   Thanks to Pekka Pessi, Dean Willis, Eric Burger, Alex\
    \ Audu, Alexander\n   Milinski, Jonathan Rosenberg, Cullen Jennings, Adam Roach,\
    \ Hisham\n   Khartabil, Dale Worley, Martin Thomson, Byron Campen, Alan Johnston,\n\
    \   Michael Procter, Janet Gunn, and Ari Keranen for support and/or\n   review\
    \ of this work.\n   Thanks to Brian Rosen for the idea of the minimum and adaptive\n\
    \   minimum rate mechanisms, and to Adam Roach for the work on the\n   algorithm\
    \ for the adaptive minimum rate mechanism and other feedback.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n\
    \              A., Peterson, J., Sparks, R., Handley, M., and E.\n           \
    \   Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n              June\
    \ 2002.\n   [RFC3265]  Roach, A., \"Session Initiation Protocol (SIP)-Specific\n\
    \              Event Notification\", RFC 3265, June 2002.\n   [RFC4662]  Roach,\
    \ A., Campbell, B., and J. Rosenberg, \"A Session\n              Initiation Protocol\
    \ (SIP) Event Notification Extension for\n              Resource Lists\", RFC\
    \ 4662, August 2006.\n   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented\
    \ BNF for Syntax\n              Specifications: ABNF\", STD 68, RFC 5234, January\
    \ 2008.\n   [RFC5263]  Lonnfors, M., Costa-Requena, J., Leppanen, E., and H.\n\
    \              Khartabil, \"Session Initiation Protocol (SIP) Extension\n    \
    \          for Partial Notification of Presence Information\",\n             \
    \ RFC 5263, September 2008.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [RFC3320]  Price, R., Bormann, C., Christoffersson,\
    \ J., Hannu, H.,\n              Liu, Z., and J. Rosenberg, \"Signaling Compression\n\
    \              (SigComp)\", RFC 3320, January 2003.\n   [RFC3680]  Rosenberg,\
    \ J., \"A Session Initiation Protocol (SIP) Event\n              Package for Registrations\"\
    , RFC 3680, March 2004.\n   [RFC3842]  Mahy, R., \"A Message Summary and Message\
    \ Waiting\n              Indication Event Package for the Session Initiation\n\
    \              Protocol (SIP)\", RFC 3842, August 2004.\n   [RFC3856]  Rosenberg,\
    \ J., \"A Presence Event Package for the Session\n              Initiation Protocol\
    \ (SIP)\", RFC 3856, August 2004.\n   [RFC3857]  Rosenberg, J., \"A Watcher Information\
    \ Event Template-\n              Package for the Session Initiation Protocol (SIP)\"\
    ,\n              RFC 3857, August 2004.\n   [RFC3943]  Friend, R., \"Transport\
    \ Layer Security (TLS) Protocol\n              Compression Using Lempel-Ziv-Stac\
    \ (LZS)\", RFC 3943,\n              November 2004.\n   [RFC5839]  Niemi, A. and\
    \ D. Willis, Ed., \"An Extension to Session\n              Initiation Protocol\
    \ (SIP) Events for Conditional Event\n              Notification\", RFC 5839,\
    \ May 2010.\n   [RFC6447]  Mahy, R., Rosen, B., and H. Tschofenig, \"Filtering\n\
    \              Location Notifications in the Session Initiation Protocol\n   \
    \           (SIP)\", RFC 6447, January 2012.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Aki Niemi\n   Nokia\n   P.O. Box 407\n   NOKIA GROUP,\
    \ FIN  00045\n   Finland\n   Phone: +358 50 389 1644\n   EMail: aki.niemi@nokia.com\n\
    \   Krisztian Kiss\n   Nokia\n   200 South Mathilda Ave\n   Sunnyvale, CA  94086\n\
    \   US\n   Phone: +1 650 391 5969\n   EMail: krisztian.kiss@nokia.com\n   Salvatore\
    \ Loreto\n   Ericsson\n   Hirsalantie 11\n   Jorvas  02420\n   Finland\n   EMail:\
    \ salvatore.loreto@ericsson.com\n"
