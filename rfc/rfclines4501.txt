Abstract This document defines Uniform Resource Identifiers for Domain Name System resources.
The Domain Name System (DNS)
[1] [2] is a widely deployed system used, among other things, to translate host names into IP addresses.
Several protocols use Uniform Resource Identifiers (URIs) to refer to data.
By defining a URI scheme for DNS data, the gap between these two worlds is bridged.
The DNS URI scheme defined here can be used to reference any data stored in the DNS.
Data browsers may support DNS URIs by forming DNS queries and rendering DNS responses using HTML [12], which is similar to what is commonly done for FTP [6] resources.
Applications that are Multipurpose Internet Mail Extensions (MIME) [7] aware may tag DNS data retrieved using this scheme with the text/dns or application/dns types as specified in [15].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [3].
Usage Model Refer to section 1 of [5] for an in depth discussion of URI classifications.
In particular, the reader is assumed to be familiar with the distinction between "name" and "locator".
This section describes how the DNS URI scheme is intended to be used and outlines future work that may be required to use URIs with the DNS for some applications.
The URI scheme described in this document focuses on the data stored in the DNS.
As such, there is no provision to specify any of the fields in the actual DNS protocol.
This is intended so that the URI may be used even in situations where the DNS protocol is not used directly.
Two examples for this are zone file editors and DNS  related configuration files, which may use this URI scheme to identify data.
The application would not use the DNS protocol to resolve the URIs.
A limitation of this design is that it does not accommodate all protocol parameters within the DNS protocol.
It is expected that, for certain applications, a more detailed URI syntax that maps more closely to the DNS protocol may be required.
However, such a URI definition is not included in this document.
This document specifies a URI that is primarily intended to name DNS resources, but it can also be used to locate said resources for simple, yet common, applications.
This section contains the registration template for the DNS URI scheme in accordance with [11].
A DNS URI designates a DNS resource record set, referenced by domain name, class, type, and, optionally, the authority.
The DNS URI follows the generic syntax from RFC 3986 [5] and is described using ABNF [4].
Strings are not case sensitive, and free insertion of linear white space is not permitted.
; See RFC 3986 for the ; definition of "pchar".
; The "dnsname" field may be a ; "relative" or "absolute" name, ; as per RFC 1034, section 3.1.
; Note further that an empty ; "dnsname" value is to be ; interpreted as the root itself.
; See below on relative dnsnames.
Each clause MUST NOT be used more ; than once.
Any IANA registered DNS type mnemonic
> Unless specified in the URI, the authority ("dnsauthority") is assumed to be locally known, the class ("dnsclassval") to be the Internet class ("IN"), and the type ("dnstypeval") to be the Address type ("A").
These default values match the typical use of DNS: to look up addresses for host names.
A dnsquery element MUST NOT contain more than one occurrence of the "CLASS" and "TYPE" fields.
For example, both "dns: example?TYPE
However, the fields may occur in any order, so that both "dns: example?TYPE
The digit representation of types and classes MAY be used when a mnemonic for the corresponding value is not well known (e.g., for newly introduced types or classes), but it SHOULD NOT be used for the types or classes defined in the DNS specification [2].
All implementations MUST recognize the mnemonics defined in [2].
For example, "dns: host.example" and "dns:host.example."
both refer to the same owner name; namely, "host.example.".
To resolve a DNS URI using the DNS protocol [2], a query is created, using as input the dnsname, dnsclassval, and dnstypeval from the URI string (or the appropriate default values).
If an authority ("dnsauthority") is given in the URI string, this indicates the server that should receive the DNS query.
Otherwise, the default DNS server should receive it.
Note that DNS URIs could be resolved by other protocols than the DNS protocol, or by using the DNS protocol in some other way than as described above (e.g., multicast DNS).
DNS URIs do not require the use of the DNS protocol, although it is expected to be the typical usage.
The previous paragraph only illustrates how DNS URIs are resolved using the DNS protocol.
A client MAY want to check that it understands the dnsclassval and dnstypeval before sending a query, so that it will be able to understand the response.
However, a typical example of a client that would not need to check dnsclassval and dnstypeval would be a proxy that would just treat the received answer as opaque data.
Character encoding considerations: Characters are encoded as per RFC 3986 [5].
The DNS protocol does not consider character sets; it simply transports opaque data.
In particular, the "dnsname" field of the DNS URI is to be considered an internationalized domain name (IDN) unaware domain name slot, in the terminology of RFC 3940 [14].
The considerations for "host" and "port" are discussed in [5].
" that is part of a DNS label.
The escaping mechanism is described in section 5.1 of RFC 1035 [2].
For example, a DNS label of "exa.mple" can be escaped as "exa\.mple" or "exa\046mple".
The single DNS label "exa.mple" is thus encoded as "exa% 5c.mple".
" and "%2e" are equivalent within dnsname and are interchangeable.
This URI specification allows all possible domain names to be encoded, provided the encoding rules are observed per [5]).
However, certain applications may restrict the set of valid characters.
Care should be taken so that invalid characters in these contexts do not cause harm.
In particular, host names in the DNS have certain restrictions.
It is up to these applications to limit this subset; this URI scheme places no restrictions.
Whenever it is useful for DNS resources to be referenced by protocol independent identifiers.
Often, this occurs when the data is more important than the access method.
Since software in general has coped without this so far, it is not anticipated to be implemented widely, nor migrated to by existing systems, but specific solutions (especially security related) may find this appropriate.
Applications and/or protocols that use this scheme include Security related software, DNS administration tools, and network programming packages.
Interoperability considerations: The data referenced by this URI scheme might be transferred by protocols that are not URI aware (such as the DNS protocol).
This is not anticipated to have any serious interoperability impact.
Interoperability problems may occur if one entity understands a new DNS class/type mnemonic that another entity does not.
This is an interoperability problem for DNS software in general, although it is not a major practical problem for current DNS deployments, as the DNS types and classes are fairly static.
To guarantee interoperability, implementations can use integers for all mnemonics not defined in [2].
Interaction with Binary Labels [10] or other extended label types has not been analyzed.
However, binary labels appear to be infrequently used in practice.
Examples A DNS URI is of the following general form.
This is intended to illustrate, not define, the scheme: dns:[//authority/]domain[?CLASS class;TYPE type]
The following illustrates a URI for a resource with the absolute name "www.example.org.
", the Internet (IN) class, and the Address (A) type:
Since the default class is IN and the default type is A, the same resource can be identified by a shorter URI using a relative name:
The following illustrates a URI for a resource with the name "simon.example.org" for the CERT type in the Internet (IN) class:
The following illustrates a URI for a resource with the name "ftp.example.org", in the Internet (IN) class and the address (A) type, but from the DNS authority 192.168.1.1 instead of the default authority: dns://192.168.1.1/ftp.example.org?type A
The following illustrates various escaping techniques.
The following illustrates a strange but valid DNS resource:
If a DNS URI references domains in the Internet DNS environment, both the URI itself and the information referenced by the URI is public information.
If a DNS URI is used within an "internal" DNS environment, both the DNS URI and the data referenced should be handled using the same considerations that apply to DNS data in the "internal" environment.
If information referenced by DNS URIs are used to make security decisions (such data includes, but is not limited to, certificates stored in the DNS [9]), implementations may need to employ security techniques such as Secure DNS [16], CMS [13], or OpenPGP [8], to protect the data during transport.
How to implement this will depend on the usage scenario, and it is not up to this URI scheme to define how the data referenced by DNS URIs should be protected.
If applications accept unknown dnsqueryelement values in a URI
(e.g., URI "dns:www.example.org?secret value") without knowing what the "secret value" dnsqueryelement means, a covert channel used to "leak" information may be enabled.
The implications of covert channels should be understood by applications that accept unknown dnsqueryelement values.
Slight variations, such as the difference between upper and lower case in the dnsname field, can be used as a covert channel to leak information.
The IANA has registered the DNS URI scheme, using the template in section 3, in accordance with RFC 2717 [11].
Copying Conditions Copyright (c) 2000, 2001, 2002, 2003, 2004, 2005, 2006
Simon Josefsson Regarding this entire document or any portion of it, the author makes no guarantees and is not responsible for any damage resulting from its use.
The author grants irrevocable permission to anyone to use, modify, and distribute it in any way that does not diminish the rights of anyone else to use, modify, and distribute it, provided that redistributed derivative works do not contain misleading author or version information.
Derivative works need not be licensed under similar terms.
