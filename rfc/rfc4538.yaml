- contents:
  - "          Request Authorization through Dialog Identification\n                in
    the Session Initiation Protocol (SIP)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This specification defines the Target-Dialog header field for the\n
    \  Session Initiation Protocol (SIP), and the corresponding option tag,\n   tdialog.
    \ This header field is used in requests that create SIP\n   dialogs.  It indicates
    to the recipient that the sender is aware of\n   an existing dialog with the recipient,
    either because the sender is\n   on the other side of that dialog, or because
    it has access to the\n   dialog identifiers.  The recipient can then authorize
    the request\n   based on this awareness.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Terminology ................................................4\n   2.
    Overview of Operation ...........................................4\n   3. User
    Agent Client (UAC) Behavior ................................5\n   4. User Agent
    Server Behavior ......................................7\n   5. Proxy Behavior
    ..................................................8\n   6. Extensibility Considerations
    ....................................8\n   7. Header Field Definition .........................................9\n
    \  8. Security Considerations .........................................9\n   9.
    Relationship with In-Reply-To ..................................10\n   10. Example
    Call Flow .............................................10\n   11. IANA Considerations
    ...........................................13\n      11.1. Header Field .............................................13\n
    \     11.2. Header Field Parameters ..................................13\n           11.2.1.
    local-tag .........................................13\n           11.2.2. remote-tag
    ........................................13\n      11.3. SIP Option Tag ...........................................14\n
    \  12. Acknowledgements ..............................................14\n   13.
    References ....................................................14\n      13.1.
    Normative References .....................................14\n      13.2. Informative
    References ...................................15\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Session Initiation Protocol (SIP) [2] defines the concept
    of a\n   dialog as a persistent relationship between a pair of user agents.\n
    \  Dialogs provide context, including sequence numbers, proxy routes,\n   and
    dialog identifiers.  Dialogs are established through the\n   transmission of SIP
    requests with particular methods.  Specifically,\n   the INVITE, REFER [8], and
    SUBSCRIBE [3] requests all create dialogs.\n   When a user agent receives a request
    that creates a dialog, it needs\n   to decide whether to authorize that request.
    \ For some requests,\n   authorization is a function of the identity of the sender,
    the\n   request method, and so on.  However, many situations have been\n   identified
    in which a user agent's authorization decision depends on\n   whether the sender
    of the request is currently in a dialog with that\n   user agent, or whether the
    sender of the request is aware of a dialog\n   the user agent has with another
    entity.\n   One such example is call transfer, accomplished through REFER.  If\n
    \  user agents A and B are in an INVITE dialog, and user agent A wishes\n   to
    transfer user agent B to user agent C, user agent A needs to send\n   a REFER
    request to user agent B, asking user agent B to send an\n   INVITE request to
    user agent C.  User agent B needs to authorize this\n   REFER.  The proper authorization
    decision is that user agent B should\n   accept the request if it came from a
    user with whom B currently has\n   an INVITE dialog relationship.  Current implementations
    deal with\n   this by sending the REFER on the same dialog as the one in place\n
    \  between user agents A and B.  However, this approach has numerous\n   problems
    [12].  These problems include difficulties in determining\n   the lifecycle of
    the dialog and its usages and in determining which\n   messages are associated
    with each application usage.  Instead, a\n   better approach is for user agent
    A to send the REFER request to user\n   agent B outside of the dialog.  In that
    case, a means is needed for\n   user agent B to authorize the REFER.\n   Another
    example is the application interaction framework [14].  In\n   that framework,
    proxy servers on the path of a SIP INVITE request can\n   place user interface
    components on the user agent that generated or\n   received the request.  To do
    this, the proxy server needs to send a\n   REFER request to the user agent, targeted
    to its Globally Routable\n   User Agent URI (GRUU) [13], asking the user agent
    to fetch an HTTP\n   resource containing the user interface component.  In such
    a case, a\n   means is needed for the user agent to authorize the REFER.  The\n
    \  application interaction framework recommends that the request be\n   authorized
    if it was sent from an entity on the path of the original\n   dialog.  This can
    be done by including the dialog identifiers in the\n   REFER, which prove that
    the user agent that sent the REFER is aware\n   of those dialog identifiers (this
    needs to be secured against\n   eavesdroppers through the sips mechanism, of course).\n
    \  Another example is if two user agents share an INVITE dialog, and an\n   element
    on the path of the INVITE request wishes to track the state\n   of the INVITE.
    \ In such a case, it sends a SUBSCRIBE request to the\n   GRUU of the user agent,
    asking for a subscription to the dialog event\n   package.  If the SUBSCRIBE request
    came from an element on the INVITE\n   request path, it should be authorized.\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
      2119 [1].\n"
    title: 1.1.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Overview of Operation\n                   +--------+            +--------+\n
    \                  |        |   INVITE   |        |\n                   | Server
    |----------->| Server |\n                   |   A    |            |   B    |\n
    \                  |        |...........>|        |\n                   +--------+
    \           +--------+\n                      ^          REFER     .   \\\n                     /
    \                     .   \\\n                    /                        .   \\\n
    \                  /                          .   \\\n                  /                            .
    \  \\\n                 /                              V   V\n           +--------+
    \                           +--------+\n           |        |                            |
    \       |\n           | User   |                            | User   |\n           |
    Agent  |                            | Agent  |\n           |   A    |                            |
    \  B    |\n           +--------+                            +--------+\n                                 Figure
    1\n   Figure 1 shows the basic model of operation.  User agent A sends an\n   INVITE
    to user agent B, traversing two servers, server A and server\n   B.  Both servers
    act as proxies for this transaction.  User B sends a\n   200 OK response to the
    INVITE.  This 200 OK includes a Supported\n   header field indicating support
    for this specification (through the\n   presence of the tdialog option tag).  The
    200 OK response establishes\n   a dialog between the two user agents.\n   Next,
    an entity that was present along the request path (server A,\n   for example)
    wishes to send a dialog-forming request (such as REFER)\n   to user agent A or
    B (user B for example).  So, the entity acts as a\n   user agent and sends the
    request to user agent B.  This request is\n   addressed to the URI of user agent
    B, which server A learned from\n   inspecting the Contact header field in the
    200 OK of the INVITE\n   request.  If this URI has the GRUU [11] property (it
    can be used by\n   any element on the Internet, such as server A, to reach the
    specific\n   user agent instance that generated that 200 OK to the INVITE), then\n
    \  the mechanism will work across NAT boundaries.\n   The request generated by
    server A will contain a Target-Dialog header\n   field.  This header field contains
    the dialog identifiers for the\n   INVITE dialog between user agents A and B,
    composed of the Call-ID,\n   local tag, and remote tag.  Server A knew to include
    the Target-\n   Dialog header field in the REFER request because it knows that
    user\n   agent B supports it.\n   When the request arrives at user agent B, it
    needs to make an\n   authorization decision.  Because the INVITE dialog was established\n
    \  using a sips URI, and because the dialog identifiers are\n   cryptographically
    random [2], no entity except for user agent A or\n   the proxies on the path of
    the initial INVITE request can know the\n   dialog identifiers.  Thus, because
    the request contains those dialog\n   identifiers, user agent B can be certain
    that the request came from\n   user agent A, the two proxies, or an entity to
    whom the user agent or\n   proxies gave the dialog identifiers.  As such, it authorizes
    the\n   request and performs the requested actions.\n"
  title: 2.  Overview of Operation
- contents:
  - "3.  User Agent Client (UAC) Behavior\n   A UAC SHOULD include a Target-Dialog
    header field in a request if the\n   following conditions are all true:\n   1.
    \ The request is to be sent outside of any existing dialog.\n   2.  The user agent
    client believes that the request may not be\n       authorized by the user agent
    server unless the user agent client\n       can prove that it is aware of the
    dialog identifiers for some\n       other dialog.  Call this dialog the target
    dialog.\n   3.  The request does not otherwise contain information that indicates\n
    \      that the UAC is aware of those dialog identifiers.\n   4.  The user agent
    client knows that the user agent server supports\n       the Target-Dialog header
    field.  It can know this if it has seen\n       a request or response from the
    user agent server within the\n       target dialog that contained a Supported
    header field that\n       included the tdialog option tag.\n   If the fourth condition
    is not met, the UAC SHOULD NOT use this\n   specification.  Instead, if it is
    currently within a dialog with the\n   User Agent Server (UAS), it SHOULD attempt
    to send the request within\n   the existing target dialog.\n   The following are
    examples of use cases in which these conditions are\n   met:\n   o  A REFER request
    is sent according to the principles of [14].\n      These REFER are sent outside
    of a dialog and do not contain any\n      other information that indicates awareness
    of the target dialog.\n      [14] also mandates that the REFER be sent only if
    the UA indicates\n      support for the target dialog specification.\n   o  User
    A is in separate calls with users B and C. User A decides to\n      start a three
    way call, and so morphs into a focus [17].  User B\n      would like to learn
    the other participants in the conference.  So,\n      it sends a SUBSCRIBE request
    to user A (who is now acting as the\n      focus) for the conference event package
    [16].  It is sent outside\n      of the existing dialog between user B and the
    focus, and it would\n      be authorized by A if user B could prove that it knows
    the dialog\n      identifiers for its existing dialog with the focus.  Thus, the\n
    \     Target-Dialog header field would be included in the SUBSCRIBE.\n   The following
    are examples of use cases in which these conditions are\n   not met:\n   o  A
    server acting as a proxy is a participant in an INVITE dialog\n      that establishes
    a session.  The server would like to use the\n      Keypad Markup Language (KPML)
    event package [18] to find out about\n      keypresses from the originating user
    agent.  To do this, it sends\n      a SUBSCRIBE request.  However, the Event header
    field of this\n      SUBSCRIBE contains event parameters that indicate the target\n
    \     dialog of the subscription.  As such, the request can be\n      authorized
    without additional information.\n   o  A server acting as a proxy is a participant
    in an INVITE dialog\n      that establishes a session.  The server would like
    to use the\n      dialog event package [15] to find out about dialogs at the\n
    \     originating user agent.  To do this, it sends a SUBSCRIBE request.\n      However,
    the Event header field of this SUBSCRIBE contains event\n      parameters that
    indicate the target dialog of the subscription.\n      As such, the request can
    be authorized without additional\n      information.\n   Specifications that intend
    to make use of the Target-Dialog header\n   field SHOULD discuss specific conditions
    in which it is to be\n   included.\n   Assuming it is to be included, the value
    of the callid production in\n   the Target-Dialog header field MUST be equal to
    the Call-ID of the\n   target dialog.  The \"remote-tag\" header field parameter
    MUST be\n   present and MUST contain the tag that would be viewed as the remote\n
    \  tag from the perspective of the recipient of the new request.  The\n   \"local-tag\"
    header field parameter MUST be present and MUST contain\n   the tag that would
    be viewed as the local tag from the perspective of\n   the recipient of the new
    request.\n   The request sent by the UAC SHOULD include a Require header field\n
    \  that includes the tdialog option tag.  This request should, in\n   principle,
    never fail with a 420 (Bad Extension) response, because\n   the UAC would not
    have sent the request unless it believed the UAS\n   supported the extension.
    \ If a Require header field was not included,\n   and the UAS didn't support the
    extension, it would normally reject\n   the request because it was unauthorized,
    probably with a 403.\n   However, without the Require header field, the UAC would
    not be able\n   to differentiate between the following:\n   o  a 403 that arrived
    because the UAS didn't actually understand the\n      Target-Dialog header field
    (in which case the client should send\n      the request within the target dialog
    if it can)\n   o  a 403 that arrived because the UAS understood the Target-Dialog\n
    \     header field, but elected not to authorize the request despite the\n      fact
    that the UAC proved its awareness of the target dialog (in\n      which case the
    client should not resend the request within the\n      target dialog, even if
    it could).\n"
  title: 3.  User Agent Client (UAC) Behavior
- contents:
  - "4.  User Agent Server Behavior\n   If a user agent server receives a dialog-creating
    request and wishes\n   to authorize the request, and if that authorization depends
    on\n   whether or not the sender has knowledge of an existing dialog with\n   the
    UAS, and information outside of the Target-Dialog header field\n   does not provide
    proof of this knowledge, the UAS SHOULD check the\n   request for the existence
    of the Target-Dialog header field.  If this\n   header field is not present, the
    UAS MAY still authorize the request\n   by other means.\n   If the header field
    is present, and the value of the callid\n   production, the \"remote-tag\", and
    \"local-tag\" values match the\n   Call-ID, remote tag, and local tag of an existing
    dialog, and the\n   dialog that they match was established using a sips URI, the
    UAS\n   SHOULD authorize the request if it would authorize any entity on the\n
    \  path of the request that created that dialog, or any entity trusted\n   by
    an entity on the path of the request that created that dialog.\n   If the dialog
    identifiers match, but they match a dialog not created\n   with a sips URI, the
    UAS MAY authorize the request if it would\n   authorize any entity on the path
    of the request that created that\n   dialog, or any entity trusted by an entity
    on the path of the request\n   that created that dialog.  However, in this case,
    any eavesdropper on\n   the original dialog path would have access to the dialog
    identifiers,\n   and thus the authorization is optional.\n   If the dialog identifiers
    don't match, or if they don't contain both\n   a \"remote-tag\" and \"local-tag\"
    parameter, the header field MUST be\n   ignored, and authorization MAY be determined
    by other means.\n"
  title: 4.  User Agent Server Behavior
- contents:
  - "5.  Proxy Behavior\n   Proxy behavior is unaffected by this specification.\n"
  title: 5.  Proxy Behavior
- contents:
  - "6.  Extensibility Considerations\n   This specification depends on a user agent
    client knowing, ahead of\n   sending a request to a user agent server, whether
    or not that user\n   agent server supports the Target-Dialog header field.  As
    discussed\n   in Section 3, the UAC can know this because it saw a request or\n
    \  response sent by that UAS within the target dialog that contained the\n   Supported
    header field whose value included the tdialog option tag.\n   Because of this
    requirement, it is especially important that user\n   agents compliant to this
    specification include a Supported header\n   field in all dialog forming requests
    and responses.  Inclusion of the\n   Supported header fields in requests is at
    SHOULD strength per RFC\n   3261.  This specification does not alter that requirement.
    \ However,\n   implementers should realize that, unless the tdialog option tag
    is\n   placed in the Supported header field of requests and responses, this\n
    \  extension is not likely to be used, and instead, the request is\n   likely
    to be re-sent within the existing target dialog (assuming the\n   sender is the
    UA on the other side of the target dialog).  As such,\n   the conditions in which
    the SHOULD would not be followed would be\n   those rare cases in which the UA
    does not want to enable usage of\n   this extension.\n"
  title: 6.  Extensibility Considerations
- contents:
  - "7.  Header Field Definition\n   The grammar for the Target-Dialog header field
    is defined as follows:\n   Target-Dialog      =     \"Target-Dialog\" HCOLON callid
    *(SEMI\n                                td-param)    ;callid from RFC 3261\n   td-param
    \          =     remote-param / local-param /\n                            generic-param\n
    \  remote-param       =     \"remote-tag\" EQUAL token\n   local-param        =
    \    \"local-tag\" EQUAL token\n                               ;token and generic-param
    from RFC 3261\n   Figures 3 and 4 are an extension of Tables 2 and 3 in RFC 3261
    [2]\n   for the Target-Dialog header field.  The column \"INF\" is for the INFO\n
    \  method [4], \"PRA\" is for the PRACK method [5], \"UPD\" is for the\n   UPDATE
    method [6], \"SUB\" is for the SUBSCRIBE method [3], \"NOT\" is\n   for the NOTIFY
    method [3], \"MSG\" is for the MESSAGE method [7], \"REF\"\n   is for the REFER
    method [8], and \"PUB\" is for the PUBLISH method [9].\n   Header field          where
    \ proxy  ACK BYE CAN INV OPT REG PUB\n   Target-Dialog           R      -     -
    \  -   -   o   -   -   -\n                Figure 3: Allowed Methods for Target-Dialog\n
    \  Header field          where  proxy  PRA UPD SUB NOT INF MSG REF\n   Target-Dialog
    \          R      -     -   -   o   -   -   -   o\n                Figure 4: Allowed
    Methods for Target-Dialog\n"
  title: 7.  Header Field Definition
- contents:
  - "8.  Security Considerations\n   The Target-Dialog header field is used to authorize
    requests based on\n   the fact that the sender of the request has access to information\n
    \  that only certain entities have access to.  In order for such an\n   authorization
    decision to be secure, two conditions have to be met.\n   Firstly, no eavesdroppers
    can have access to this information.  That\n   requires the original SIP dialog
    to be established using a sips URI,\n   which provides TLS on each hop.  With
    a sips URI, only the user\n   agents and proxies on the request path will be able
    to know the\n   dialog identifiers.  The second condition is that the dialog\n
    \  identifiers be sufficiently cryptographically random that they cannot\n   be
    guessed.  RFC 3261 requires global uniqueness for the Call-ID and\n   32 bits
    of cryptographic randomness for each tag (there are two tags\n   for a dialog).
    \ Given the short duration of a typical dialog (perhaps\n   as long as a day),
    this amount of randomness appears adequate for\n   preventing guessing attacks.
    \ However, it's important to note that\n   this specification requires true cryptographic
    randomness as set\n   forth in RFC 4086 [11].  Weaker pseudorandom identifiers
    reduce the\n   probability of collision, but because they are guessable, they
    are\n   not sufficient to prevent an attacker from observing a sequence of\n   identifiers,
    guessing the next one, and then using this specification\n   to launch an attack.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  Relationship with In-Reply-To\n   RFC 3261 defines the In-Reply-To header
    field.  It provides a list of\n   Call-IDs for calls that the current request
    references or returns.\n   It was meant to serve a similar purpose as the Reply-To
    in email: to\n   facilitate the construction of \"threads\" of conversations in
    a user\n   interface.  Target-Dialog is similar, in that it also references a\n
    \  previous session.  Due to their similarities, it is important to\n   understand
    the differences, as these two header fields are not\n   substitutes for each other.\n
    \  Firstly, In-Reply-To is meant for consumption by a human or a user\n   interface
    widget, for providing the user with a context that allows\n   them to decide what
    a call is about and whether they should take it.\n   Target-Dialog, on the other
    hand, is meant for consumption by the\n   user agent itself, to facilitate authorization
    of session requests in\n   specific cases where authorization is not a function
    of the user, but\n   rather the underlying protocols.  A UA will authorize a call\n
    \  containing Target-Dialog based on a correct value of the Target-\n   Dialog
    header field.\n   Secondly, Target-Dialog references a specific dialog that must
    be\n   currently in progress.  In-Reply-To references a previous call\n   attempt,
    most likely one that did not result in a dialog.  This is\n   why In-Reply-To
    uses a Call-ID, and Target-Dialog uses a set of\n   dialog identifiers.\n   Finally,
    In-Reply-To implies cause and effect.  When In-Reply-To is\n   present, it means
    that the request is being sent because of the\n   previous request that was delivered.
    \ Target-Dialog does not imply\n   cause and effect, merely awareness for the
    purposes of authorization.\n"
  title: 9.  Relationship with In-Reply-To
- contents:
  - "10.  Example Call Flow\n   In this example, user agent A and user agent B establish
    an INVITE-\n   initiated dialog through Server-A and Server-B, each of which acts
    as\n   a proxy for the INVITE.  Server B would then like to use the\n   application
    interaction framework [14] to request that user agent A\n   fetch an HTML user
    interface component.  To do that, it sends a REFER\n   request to A's URI.  The
    flow for this is shown in Figure 5.  The\n   conventions of [19] are used to describe
    representation of long\n   message lines.\n             A        Server-A     Server-B
    \        B\n             |(1) INVITE  |            |            |\n             |----------->|
    \           |            |\n             |            |(2) INVITE  |            |\n
    \            |            |----------->|            |\n             |            |
    \           |(3) INVITE  |\n             |            |            |----------->|\n
    \            |            |            |(4) 200 OK  |\n             |            |
    \           |<-----------|\n             |            |(5) 200 OK  |            |\n
    \            |            |<-----------|            |\n             |(6) 200 OK
    \ |            |            |\n             |<-----------|            |            |\n
    \            |(7) ACK     |            |            |\n             |------------------------------------->|\n
    \            |            |(8) REFER   |            |\n             |            |<-----------|
    \           |\n             |(9) REFER   |            |            |\n             |<-----------|
    \           |            |\n             |(10) 200 OK |            |            |\n
    \            |----------->|            |            |\n             |            |(11)
    200 OK |            |\n             |            |----------->|            |\n
    \                                Figure 5\n   First, the caller sends an INVITE,
    as shown in message 1.\n   INVITE sips:B@example.com SIP/2.0\n   Via: SIP/2.0/TLS
    host.example.com;branch=z9hG4bK9zz8\n   From: Caller <sip:A@example.com>;tag=kkaz-\n
    \  To: Callee <sip:B@example.org>\n   Call-ID: fa77as7dad8-sd98ajzz@host.example.com\n
    \  CSeq: 1 INVITE\n   Max-Forwards: 70\n   Supported: tdialog\n   Allow: INVITE,
    OPTIONS, BYE, CANCEL, ACK, REFER\n   Accept: application/sdp, text/html\n   <allOneLine>\n
    \  Contact: <sips:A@example.com;gruu;opaque=urn:uuid:f81d4f\n   ae-7dec-11d0-a765-00a0c91e6bf6;grid=99a>;schemes=\"http,sip,sips\"\n
    \  </allOneLine>\n   Content-Length: ...\n   Content-Type: application/sdp\n   --SDP
    not shown--\n   The INVITE indicates that the caller supports GRUU (note its presence\n
    \  in the Contact header field of the INVITE) and the Target-Dialog\n   header
    field.  This INVITE is forwarded to the callee (messages 2-3),\n   which generates
    a 200 OK response that is forwarded back to the\n   caller (message 4-5).  Message
    5 might look like:\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TLS host.example.com;branch=z9hG4bK9zz8\n
    \  From: Caller <sip:A@example.com>;tag=kkaz-\n   To: Callee <sip:B@example.org>;tag=6544\n
    \  Call-ID: fa77as7dad8-sd98ajzz@host.example.com\n   CSeq: 1 INVITE\n   Contact:
    <sips:B@pc.example.org>\n   Content-Length: ...\n   Content-Type: application/sdp\n
    \  --SDP not shown--\n   In this case, the called party does not support GRUU
    or the Target-\n   Dialog header field.  The caller generates an ACK (message
    7).\n   Server B then decides to send a REFER to user A:\n   <allOneLine>\n   REFER
    sips:A@example.com;gruu;opaque=urn:uuid:f81d4f\n   ae-7dec-11d0-a765-00a0c91e6bf6;grid=99a
    SIP/2.0\n   </allOneLine>\n   Via: SIP/2.0/TLS serverB.example.org;branch=z9hG4bK9zz10\n
    \  From: Server B <sip:serverB.example.org>;tag=mreysh\n   <allOneLine>\n   To:
    Caller <sips:A@example.com;gruu;opaque=urn:uuid:f81d4f\n   ae-7dec-11d0-a765-00a0c91e6bf6;grid=99a>\n
    \  </allOneLine>\n   Target-Dialog: fa77as7dad8-sd98ajzz@host.example.com\n     ;local-tag=kkaz-\n
    \    ;remote-tag=6544\n   Refer-To: http://serverB.example.org/ui-component.html\n
    \  Call-ID: 86d65asfklzll8f7asdr@host.example.com\n   CSeq: 1 REFER\n   Max-Forwards:
    70\n   Require: tdialog\n   Allow: INVITE, OPTIONS, BYE, CANCEL, ACK, NOTIFY\n
    \  Contact: <sips:serverB.example.org>\n   Content-Length: 0\n   This REFER will
    be delivered to server A because it was sent to the\n   GRUU.  From there, it
    is forwarded to user agent A (message 9) and\n   authorized because of the presence
    of the Target-Dialog header field.\n"
  title: 10.  Example Call Flow
- contents:
  - "11.  IANA Considerations\n   This specification registers a new SIP header field,
    a new option tag\n   according to the processes of RFC 3261 [2], and two new header
    field\n   parameters according to the processes of RFC 3968 [10].\n"
  - contents:
    - "11.1.  Header Field\n   RFC Number:  RFC 4538\n   Header Field Name:  Target-Dialog\n
      \  Compact Form:  none\n"
    title: 11.1.  Header Field
  - contents:
    - "11.2.  Header Field Parameters\n   This section registers two header field
      parameters according to the\n   processes of RFC 3968 [10].\n"
    - contents:
      - "11.2.1.  local-tag\n   Header Field:  Target-Dialog\n   Header Field Parameter:
        \ local-tag\n   Predefined Values:  None\n   RFC:  RFC 4538\n"
      title: 11.2.1.  local-tag
    - contents:
      - "11.2.2.  remote-tag\n   Header Field:  Target-Dialog\n   Header Field Parameter:
        \ remote-tag\n   Predefined Values:  None\n   RFC:  RFC 4538\n"
      title: 11.2.2.  remote-tag
    title: 11.2.  Header Field Parameters
  - contents:
    - "11.3.  SIP Option Tag\n   This specification registers a new SIP option tag
      per the guidelines\n   in Section 27.1 of RFC 3261.\n   Name:  tdialog\n   Description:
      \ This option tag is used to identify the target dialog\n      header field
      extension.  When used in a Require header field, it\n      implies that the
      recipient needs to support the Target-Dialog\n      header field.  When used
      in a Supported header field, it implies\n      that the sender of the message
      supports it.\n"
    title: 11.3.  SIP Option Tag
  title: 11.  IANA Considerations
- contents:
  - "12.  Acknowledgements\n   This specification is based on a header field first
    proposed by\n   Robert Sparks in the dialog usage draft [12].  John Elwell provided\n
    \  helpful comments.\n"
  title: 12.  Acknowledgements
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n
      \  [2]   Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n         Peterson,
      J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n         Session Initiation
      Protocol\", RFC 3261, June 2002.\n   [3]   Roach, A., \"Session Initiation Protocol
      (SIP)-Specific Event\n         Notification\", RFC 3265, June 2002.\n   [4]
      \  Donovan, S., \"The SIP INFO Method\", RFC 2976, October 2000.\n   [5]   Rosenberg,
      J. and H. Schulzrinne, \"Reliability of Provisional\n         Responses in Session
      Initiation Protocol (SIP)\", RFC 3262,\n         June 2002.\n   [6]   Rosenberg,
      J., \"The Session Initiation Protocol (SIP) UPDATE\n         Method\", RFC 3311,
      October 2002.\n   [7]   Campbell, B., Rosenberg, J., Schulzrinne, H., Huitema,
      C., and\n         D. Gurle, \"Session Initiation Protocol (SIP) Extension for\n
      \        Instant Messaging\", RFC 3428, December 2002.\n   [8]   Sparks, R.,
      \"The Session Initiation Protocol (SIP) Refer\n         Method\", RFC 3515,
      April 2003.\n   [9]   Niemi, A., \"Session Initiation Protocol (SIP) Extension
      for\n         Event State Publication\", RFC 3903, October 2004.\n   [10]  Camarillo,
      G., \"The Internet Assigned Number Authority (IANA)\n         Header Field Parameter
      Registry for the Session Initiation\n         Protocol (SIP)\", BCP 98, RFC
      3968, December 2004.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [11]  Eastlake, D., Schiller, J., and S.
      Crocker, \"Randomness\n         Requirements for Security\", BCP 106, RFC 4086,
      June 2005.\n   [12]  Sparks, R., \"Multiple Dialog Usages in the Session Initiation\n
      \        Protocol\", Work in Progress, March 2006.\n   [13]  Rosenberg, J.,
      \"Obtaining and Using Globally Routable User\n         Agent (UA) URIs (GRUU)
      in the Session Initiation Protocol\n         (SIP)\", Work in Progress, May
      2006.\n   [14]  Rosenberg, J., \"A Framework for Application Interaction in
      the\n         Session Initiation Protocol  (SIP)\", Work in Progress,\n         July
      2005.\n   [15]  Rosenberg, J., Schulzrinne, H., and R. Mahy, \"An INVITE-\n
      \        Initiated Dialog Event Package for the Session Initiation\n         Protocol
      (SIP)\", RFC 4235, November 2005.\n   [16]  Rosenberg, J., \"A Session Initiation
      Protocol (SIP) Event\n         Package for Conference State\", Work in Progress,
      July 2005.\n   [17]  Rosenberg, J., \"A Framework for Conferencing with the
      Session\n         Initiation Protocol (SIP)\", RFC 4353, February 2006.\n   [18]
      \ Burger, E., \"A Session Initiation Protocol (SIP) Event Package\n         for
      Key Press Stimulus  (KPML)\", Work in Progress,\n         December 2004.\n   [19]
      \ Sparks, R., Ed., Hawrylyshen, A., Johnston, A., Rosenberg, J.,\n         and
      H. Schulzrinne, \"Session Initiation Protocol (SIP) Torture\n         Test Messages\",
      RFC 4475, May 2006.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Author's Address\n   Jonathan Rosenberg\n   Cisco Systems\n   600 Lanidex Plaza\n
    \  Parsippany, NJ  07054\n   US\n   Phone: +1 973 952-5000\n   EMail: jdrosen@cisco.com\n
    \  URI:   http://www.jdrosen.net\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
