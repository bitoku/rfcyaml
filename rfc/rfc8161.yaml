- title: __initial_text__
  contents:
  - '              Benchmarking the Neighbor Discovery Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   This document provides benchmarking procedures for the Neighbor\n\
    \   Discovery Protocol (NDP).  It also proposes metrics by which an NDP\n   implementation's\
    \ scaling capabilities can be measured.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc8161.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Requirements Language ......................................4\n  \
    \ 2. Test Setup ......................................................4\n    \
    \  2.1. Device Under Test (DUT) ....................................4\n      \
    \     2.1.1. Interfaces ..........................................4\n        \
    \   2.1.2. Neighbor Discovery Protocol (NDP) ...................5\n          \
    \ 2.1.3. Routing .............................................5\n      2.2. Tester\
    \ .....................................................6\n           2.2.1. Interfaces\
    \ ..........................................6\n           2.2.2. Neighbor Discovery\
    \ Protocol (NDP) ...................6\n           2.2.3. Routing .............................................6\n\
    \           2.2.4. Test Traffic ........................................7\n  \
    \         2.2.5. Counters ............................................8\n   3.\
    \ Tests ...........................................................8\n      3.1.\
    \ Baseline Test ..............................................8\n           3.1.1.\
    \ Procedure ...........................................9\n           3.1.2. Baseline\
    \ Test Procedure Flow Chart ..................9\n           3.1.3. Results ............................................11\n\
    \      3.2. Scaling Test ..............................................11\n  \
    \         3.2.1. Procedure ..........................................11\n    \
    \       3.2.2. Scaling Test Procedure Flow Chart ..................13\n      \
    \     3.2.3. Results ............................................15\n   4. Measurements\
    \ Explicitly Excluded ...............................15\n      4.1. DUT CPU Utilization\
    \ .......................................15\n      4.2. Malformed Packets .........................................15\n\
    \   5. IANA Considerations ............................................16\n  \
    \ 6. Security Considerations ........................................16\n   7.\
    \ Normative References ...........................................16\n   Acknowledgments\
    \ ...................................................16\n   Authors' Addresses\
    \ ................................................17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   When an IPv6 node forwards a packet, it executes the following\n\
    \   procedure:\n   o  Identifies the outbound interface and IPv6 next hop.\n \
    \  o  Queries a local Neighbor Cache (NC) to determine the IPv6 next\n      hop's\
    \ link-layer address.\n   o  Encapsulates the packet in a link-layer header. \
    \ The link-layer\n      header includes the IPv6 next hop's link-layer address.\n\
    \   o  Forwards the packet to the IPv6 next hop.\n   IPv6 nodes use the Neighbor\
    \ Discovery Protocol (NDP) [RFC4861] to\n   maintain the NC.  Operational experience\
    \ [RFC6583] shows that when an\n   implementation cannot maintain a sufficiently\
    \ complete NC, its\n   ability to forward packets is impaired.\n   NDP, like any\
    \ other protocol, consumes processing, memory, and\n   bandwidth resources.  Its\
    \ ability to maintain a sufficiently complete\n   NC depends upon the availability\
    \ of the above-mentioned resources.\n   This document provides benchmarking procedures\
    \ for NDP.  Benchmarking\n   procedures include a Baseline Test and an NDP Scaling\
    \ Test.  In both\n   tests, the Device Under Test (DUT) is an IPv6 router.  Two\
    \ physical\n   links (A and B) connect the DUT to a Tester.  The Tester sends\n\
    \   traffic through Link A to the DUT.  The DUT forwards that traffic,\n   through\
    \ Link B, back to the Tester.\n   The above-mentioned traffic stream contains\
    \ one or more interleaved\n   flows.  An IPv6 Destination Address uniquely identifies\
    \ each flow.\n   Or, said another way, every packet within a flow has the same\
    \ IPv6\n   Destination Address.\n   In the Baseline Test, the traffic stream contains\
    \ exactly one flow.\n   Because every packet in the stream has the same IPv6 Destination\n\
    \   Address, the DUT can forward the entire stream using exactly one NC\n   entry.\
    \  NDP is exercised minimally, and no packet loss should be\n   observed.\n  \
    \ The NDP Scaling Test is identical to the Baseline Test, except that\n   the\
    \ traffic stream contains many flows.  In order to forward the\n   stream without\
    \ loss, the DUT must maintain one NC entry for each\n   flow.  If the DUT cannot\
    \ maintain one NC entry for each flow, packet\n   loss will be observed and attributed\
    \ to NDP scaling limitations.\n   This document proposes an NDP scaling metric,\
    \ called NDP-MAX-\n   NEIGHBORS.  NDP-MAX-NEIGHBORS is the maximum number of neighbors\
    \ to\n   which an IPv6 node can send traffic during periods of high NDP\n   activity.\n\
    \   The procedures described herein reveal how many IPv6 neighbors an NDP\n  \
    \ implementation can discover.  They also provide a rough estimate of\n   the\
    \ time required to discover those neighbors.  However, that\n   estimate does\
    \ not reflect the maximum rate at which the\n   implementation can discover neighbors.\
    \  Maximum rate discovery is a\n   topic for further exploration.\n   The test\
    \ procedures described herein assume that NDP does not compete\n   with other\
    \ applications for resources on the DUT.  When NDP competes\n   for resources,\
    \ its scaling characteristics may differ from those\n   reported by the benchmarks\
    \ described and may vary over time.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Test Setup
  contents:
  - "2.  Test Setup\n                +---------------+             +-----------+\n\
    \                |               |             |           |\n               \
    \ |               |   Link A    |   Device  |\n                |             \
    \  |------------>|   Under   |\n                |    Tester     |            \
    \ |   Test    |\n                |               |<------------|   (DUT)   |\n\
    \                |               |   Link B    |           |\n               \
    \ +---------------+             +-----------+\n                           Figure\
    \ 1: Test Setup\n   The DUT is an IPv6 router.  Two links (A and B) connect the\
    \ DUT to\n   the Tester.  Link A capabilities must be identical to Link B\n  \
    \ capabilities.  For example, if the interface to Link A is a 10\n   Gigabit Ethernet\
    \ port, the interface to Link B must also be a 10\n   Gigabit Ethernet port.\n"
- title: 2.1.  Device Under Test (DUT)
  contents:
  - '2.1.  Device Under Test (DUT)

    '
- title: 2.1.1.  Interfaces
  contents:
  - "2.1.1.  Interfaces\n   DUT interfaces are numbered as follows:\n   o  Link A\
    \ - 2001:2:0:0::2/64\n   o  Link B - 2001:2:0:1::1/64\n   Both DUT interfaces\
    \ should be configured with a 1500-byte MTU.\n   However, if they cannot support\
    \ a 1500-byte MTU, they may be\n   configured with a 1280-byte MTU.\n"
- title: 2.1.2.  Neighbor Discovery Protocol (NDP)
  contents:
  - "2.1.2.  Neighbor Discovery Protocol (NDP)\n   NDP is enabled on both DUT interfaces.\
    \  Therefore, the DUT emits both\n   solicited and unsolicited Router Advertisement\
    \ (RA) messages.  The\n   DUT emits an RA message at least once every 600 seconds\
    \ and no more\n   frequently than once every 200 seconds.\n   When the DUT sends\
    \ an RA message, it includes the following\n   information:\n   o  Router Lifetime\
    \ - 1800 seconds\n   o  Reachable Time - 0 seconds\n   o  Retrans Time - 0 seconds\n\
    \   o  Source Link-Layer Address - link-layer address of DUT interface\n   o \
    \ M-bit is clear (0)\n   o  O-bit is clear (0)\n   The above-mentioned values\
    \ are chosen because they are the default\n   values specified in RFC 4861.\n\
    \   NDP manages the NC.  Each NC entry represents an on-link neighbor and\n  \
    \ is identified by the neighbor's on-link unicast IP address.  As per\n   RFC\
    \ 4861, each NC entry needs to be refreshed periodically.  NDP\n   refreshes NC\
    \ entries by exchanging Neighbor Solicitation (NS) and\n   Neighbor Advertisement\
    \ (NA) messages.\n   No static NC entries are configured on the DUT.\n"
- title: 2.1.3.  Routing
  contents:
  - "2.1.3.  Routing\n   The DUT maintains a direct route to 2001:2:0:0/64 through\
    \ Link A.  It\n   also maintains a direct route to 2001:2:0:1/64 through Link\
    \ B.  No\n   static routes or dynamic routing protocols are configured on the\
    \ DUT.\n"
- title: 2.2.  Tester
  contents:
  - '2.2.  Tester

    '
- title: 2.2.1.  Interfaces
  contents:
  - "2.2.1.  Interfaces\n   Interfaces are numbered as follows:\n   o  Link A - 2001:2:0:0::1/64\n\
    \   o  Link B - Multiple addresses are configured on Link B.  These\n      addresses\
    \ are drawn sequentially from the 2001:2:0:1::/64 address\n      block.  The first\
    \ address is 2001:2:0:1::2/64.  Subsequent\n      addresses are 2001:2:0:1::3/64,\
    \ 2001:2:0:1::4/64,\n      2001:2:0:1::5/64, etc.  The number of configured addresses\
    \ should\n      be the expected value of NDP-MAX-NEIGHBORS times 1.1.\n   Both\
    \ Tester interfaces should be configured with a 1500-byte MTU.\n   However, if\
    \ they cannot support a 1500-byte MTU, they may be\n   configured with a 1280-byte\
    \ MTU.\n"
- title: 2.2.2.  Neighbor Discovery Protocol (NDP)
  contents:
  - "2.2.2.  Neighbor Discovery Protocol (NDP)\n   NDP is enabled on both Tester interfaces.\
    \  Therefore, upon\n   initiation, the Tester sends Router Solicitation (RS) messages\
    \ and\n   waits for Router Advertisement (RA) messages.  The Tester also\n   exchanges\
    \ Neighbor Solicitation (NS) and Neighbor Advertisement (NA)\n   messages with\
    \ the DUT.\n   No static NC entries are configured on the Tester.\n"
- title: 2.2.3.  Routing
  contents:
  - "2.2.3.  Routing\n   The Tester maintains a direct route to 2001:2:0:0/64 through\
    \ Link A.\n   It also maintains a direct route to 2001:2:0:1/64 through Link B.\
    \  No\n   static routes or dynamic routing protocols are configured on the\n \
    \  Tester.\n"
- title: 2.2.4.  Test Traffic
  contents:
  - "2.2.4.  Test Traffic\n   The Tester sends a stream of test traffic through Link\
    \ A to the DUT.\n   The test traffic stream contains one or more interleaved flows.\n\
    \   Flows are numbered 1 through N, sequentially.\n   Within each flow, each packet\
    \ contains an IPv6 header, and each IPv6\n   header contains the following information:\n\
    \   o  Version - 6\n   o  Traffic Class - 0\n   o  Flow Label - 0\n   o  Payload\
    \ Length - 0\n   o  Next Header - IPv6-NoNxt (59)\n   o  Hop Limit - 255\n   o\
    \  Source Address - 2001:2:0:0::1\n   o  Destination Address - The first 64 bits\
    \ of the Destination Address\n      are 2001:2:0:1::.  The next 64 are uniquely\
    \ associated with the\n      flow.  Every packet in the first flow carries the\
    \ Destination\n      Address 2001:2:0:1::2.  Every subsequent flow has an IP address\n\
    \      one greater than the last (i.e., 2001:2:0:1::3, 2001:2:0:1::4,\n      etc.).\n\
    \   In order to avoid link congestion, test traffic is offered at a rate\n   not\
    \ to exceed 50% of available link bandwidth.  In order to avoid\n   burstiness\
    \ and buffer occupancy, every packet in the stream is\n   exactly 40 bytes long\
    \ (i.e., the length of an IPv6 header with no\n   IPv6 payload).  Furthermore,\
    \ the gap between packets is identical.\n   During the course of a test, the number\
    \ of flows that the test stream\n   contains may increase.  When this occurs,\
    \ the rate at which test\n   traffic is offered remains constant.  For example,\
    \ assume that a test\n   stream is offered at a rate of 1,000 packets per second.\
    \  This stream\n   contains two flows, each contributing 500 packets per second\
    \ to the\n   1,000 packet per second aggregate.  When a third stream is added\
    \ to\n   the flow, all three streams must contribute 333 packets per second in\n\
    \   order to maintain the 1,000 packet per second limit.  (As in this\n   example,\
    \ rounding error is acceptable.)\n   The DUT attempts to forward every packet\
    \ in the test stream through\n   Link B to the Tester.  It does this because:\n\
    \   o  Every packet in the test stream has a Destination Address drawn\n     \
    \ from the 2001:2:0:1::/64 address block.\n   o  The DUT has a direct route to\
    \ 2001:2:0:1/64 through Link B.\n"
- title: 2.2.5.  Counters
  contents:
  - "2.2.5.  Counters\n   On the Tester, two counters are configured for each flow.\
    \  One\n   counter, configured on Link A, increments when the Tester sends a\n\
    \   packet belonging to the flow.  The other counter, configured on Link\n   B,\
    \ increments when the Tester receives a packet from the flow.  In\n   order for\
    \ a packet to be associated with a flow, the following\n   conditions must all\
    \ be true:\n   o  The IPv6 Destination Address must be that of the flow.\n   o\
    \  The IPv6 Next Header must be IPv6-NoNxt (59).\n   The following counters also\
    \ are configured on both Tester Interfaces:\n   o  RS packets sent\n   o  RA packets\
    \ received\n   o  NS packets sent\n   o  NS packets received\n   o  NA packets\
    \ sent\n   o  NA packets received\n   o  Total packets sent\n   o  Total packets\
    \ received\n"
- title: 3.  Tests
  contents:
  - '3.  Tests

    '
- title: 3.1.  Baseline Test
  contents:
  - "3.1.  Baseline Test\n   The purpose of the Baseline Test is to ensure that the\
    \ DUT can\n   forward every packet in the test stream, without loss, when NDP\
    \ is\n   minimally exercised and not operating near its scaling limit.\n"
- title: 3.1.1.  Procedure
  contents:
  - "3.1.1.  Procedure\n   o  On the DUT, clear the NC.\n   o  On the Tester, clear\
    \ all counters.\n   o  On the Tester, set a timer to expire in 60 seconds.\n \
    \  o  On the Tester, start the test stream with exactly one flow (i.e.,\n    \
    \  IPv6 Destination Address equals 2001:2:0:1::2).\n   o  Wait for either the\
    \ timer to expire or the packets-received\n      counter associated with the flow\
    \ to increment.\n   o  If the timer expires, stop the test stream and end the\
    \ test.\n   o  If the packets-received counter increments, pause the traffic\n\
    \      stream, log the initial counter values, clear the counters, reset\n   \
    \   the timer to expire in 1800 seconds, and restart the traffic\n      stream.\n\
    \   o  When the timer expires, stop the test stream, wait sufficient time\n  \
    \    for any queued packets to exit, log the final counter values, and\n     \
    \ end the test.\n"
- title: 3.1.2.  Baseline Test Procedure Flow Chart
  contents:
  - "3.1.2.  Baseline Test Procedure Flow Chart\n                      +--------------------------+\n\
    \                      | On the DUT, clear the NC |\n                      +-------------|------------+\n\
    \                                    |\n                 +------------------v------------------+\n\
    \                 |  On the Tester, clear all counters  |\n                 +------------------|------------------+\n\
    \                                    |\n                 +------------------v-----------------+\n\
    \                 |        On the Tester, set a        |\n                 | \
    \       timer to expire in          |\n                 |        60 seconds  \
    \                |\n                 +------------------|-----------------+\n\
    \                                    |\n                 +------------------v-----------------+\n\
    \                 |On the Tester, start the test stream|\n                 |with\
    \ exactly one flow (i.e., IPv6   |\n                 |Destination Address equals\
    \          |\n                 |2001:2:0:0:1::2)                    |\n      \
    \           +------------------|-----------------+\n                         \
    \           |\n                                    |\n                 +------------------v-----------------+\n\
    \                 |Wait for either the timer to expire |\n                 |or\
    \ packets-received counter         |\n                 |associated with the flow\
    \ to         |\n                 |increment                           |\n    \
    \             +------------------|-----------------+\n                       \
    \             |\n                            /-------v-------\\\n            \
    \               /                 \\  Yes  +--------------+\n                \
    \           |Did timer expire?|-------| End the test |\n                     \
    \      \\                 /       +--------------+\n                         \
    \   \\-------|-------/\n                                    | No\n           \
    \                         |\n                          /---------v--------\\\n\
    \                         /                    \\  No  +--------------+\n    \
    \                     |Did packets-received|------| End the test |\n         \
    \                |counter increment?  |      +--------------+\n              \
    \           \\                    /\n                          \\---------|--------/\n\
    \                                    | Yes\n                                 \
    \   |\n                 +------------------v-----------------+\n             \
    \    |Pause traffic stream, log initial   |\n                 |counter values,\
    \ clear the counters, |\n                 |reset the timer to expire in 1800 \
    \  |\n                 |seconds, and restart traffic stream |\n              \
    \   +------------------|-----------------+\n                                 \
    \   |\n                 +------------------v-----------------+\n             \
    \    |When timer expires, stop the test   |\n                 |stream, wait sufficient\
    \ time for    |\n                 |any queued packets to exit, log the |\n   \
    \              |final counter values                |\n                 +------------------|-----------------+\n\
    \                                    |\n                               +----v---+\n\
    \                               |End test|\n                               +--------+\n\
    \               Figure 2: Baseline Test Procedure Flow Chart\n"
- title: 3.1.3.  Results
  contents:
  - "3.1.3.  Results\n   The log contains initial and final values for the following\
    \ counters:\n   o  packets-sent\n   o  packets-received\n   The initial values\
    \ of packets-sent and packets-received may be equal\n   to one another.  If these\
    \ values are identical, none of the initial\n   packets belonging to the flow\
    \ were lost.  However, if the initial\n   value of packets-sent is greater than\
    \ the initial value of packets-\n   received, initial packets were lost.  This\
    \ loss of initial packets is\n   acceptable.\n   The final values of packets-sent\
    \ and packets-received should be equal\n   to one another.  If they are not, an\
    \ error has occurred.  Because\n   this error is likely to affect Scaling Test\
    \ results, the error must\n   be corrected before the Scaling Test is executed.\n"
- title: 3.2.  Scaling Test
  contents:
  - "3.2.  Scaling Test\n   The purpose of the Scaling Test is to discover the number\
    \ of\n   neighbors to which an IPv6 node can send traffic during periods of\n\
    \   high NDP activity.  We call this number NDP-MAX-NEIGHBORS.\n"
- title: 3.2.1.  Procedure
  contents:
  - "3.2.1.  Procedure\n   Execute the following procedure:\n   o  On the DUT, clear\
    \ the NC.\n   o  On the Tester, clear all counters.\n   o  On the Tester, set\
    \ a timer to expire in 60 seconds.\n   o  On the Tester, start the test stream\
    \ with exactly one flow (i.e.,\n      IPv6 Destination Address equals 2001:2:0:1::2).\n\
    \   o  Wait for either the timer to expire or the packets-received\n      counter\
    \ associated with the flow to increment.\n   o  If the timer expires, stop the\
    \ test stream and end the test.\n   o  If the packets-received counter increments,\
    \ execute the following\n      procedure N times, starting at 2 and ending at\
    \ the expected value\n      of NDP-MAX-NEIGHBORS times 1.1.\n      *  Pause the\
    \ test stream.\n      *  Log the time and the value of N minus one.\n      * \
    \ Clear the packets-sent and packets-received counters associated\n         with\
    \ the previous flow (i.e., N minus one).\n      *  Reset the timer to expire in\
    \ 60 seconds.\n      *  Add the next flow to the test stream (i.e., IPv6 Destination\n\
    \         Address is a function of N).\n      *  Restart the test stream.\n  \
    \    *  Wait for either the timer to expire or the packets-received\n        \
    \ counter associated with the new flow to increment.\n   After the procedure described\
    \ above has been executed N times, clear\n   the timer and reset it to expire\
    \ in 1800 seconds.  When the timer\n   expires, stop the stream, log all counters,\
    \ and end the test (after\n   waiting sufficient time for any queued packets to\
    \ exit).\n"
- title: 3.2.2.  Scaling Test Procedure Flow Chart
  contents:
  - "3.2.2.  Scaling Test Procedure Flow Chart\n                      +--------------------------+\n\
    \                      | On the DUT, clear the NC |\n                      +-------------|------------+\n\
    \                                    |\n                 +------------------v------------------+\n\
    \                 |  On the Tester, clear all counters  |\n                 +------------------|------------------+\n\
    \                                    |\n                 +------------------v-----------------+\n\
    \                 |        On the Tester, set a        |\n                 | \
    \       timer to expire in          |\n                 |        60 seconds  \
    \                |\n                 +------------------|-----------------+\n\
    \                                    |\n                 +------------------v-----------------+\n\
    \                 |On the Tester, start the test stream|\n                 |with\
    \ exactly one flow (i.e., IPv6   |\n                 |Destination Address equals\
    \          |\n                 |2001:2:0:0:1::2)                    |\n      \
    \           +------------------|-----------------+\n                         \
    \           |\n                 +------------------v-----------------+\n     \
    \            |Wait for either the timer to expire |\n                 |or packets-received\
    \ counter         |\n                 |associated with the flow to         |\n\
    \                 |increment                           |\n                 +------------------|-----------------+\n\
    \                                    |\n                            /-------v-------\\\
    \n                           /                 \\  Yes  +--------------+\n   \
    \                        |Did timer expire?|-------|   End test   |\n        \
    \                   \\                 /       |   and return |\n            \
    \                \\-------|-------/        +--------------+\n                \
    \                    | No\n                                    |\n           \
    \               /---------v--------\\\n                         /            \
    \        \\  No  +--------------+\n                         |Did packets-received|------|\
    \   End test   |\n                         |counter increment?  |      |   and\
    \ return |\n                         \\                    /      +--------------+\n\
    \                          \\---------|--------/\n                           \
    \         |  Yes\n                                    |\n                    \
    \         +------v------+\n                             |     N=2     |\n    \
    \                         +------|------+\n                                  \
    \  |\n                     /--------------v-------------\\\n                 \
    \   /              Is              \\ No +----------+\n                    | \
    \     N < NDP-MAX-NEIGHBORS   |----| End test |\n             -------|       \
    \  times 1.1            |    +----------+\n             |      \\            \
    \                  /\n             |       \\--------------|-------------/\n \
    \            |                      |    Yes\n             |          +-----------v----------+\n\
    \             |          |Pause the test stream |\n             |          +-----------|----------+\n\
    \             |                      |\n             |           +----------v----------+\n\
    \             |           |Log the time and the |\n             |           |value\
    \ of N minus one |\n             |           +----------|----------+\n       \
    \      |                      |\n             |          +-----------v-----------+\n\
    \             |          |Clear the packets-sent |\n             |          |and\
    \ packets-received   |\n             |          |counters associated    |\n  \
    \           |          |with the previous flow |\n             |          |(i.e.,\
    \ N minus one)    |\n             |          +-----------|-----------+\n     \
    \        |                      |\n             |           +----------v----------+\n\
    \             |           |Reset the timer to   |\n             |           |expire\
    \ in 60 seconds |\n             |           +----------|----------+\n        \
    \     |                      |\n             |       +--------------v---------------+\n\
    \             |       |Add the next flow to the test |\n             |       |stream\
    \ (i.e., IPv6 Destination|\n             |       |Address is a function of N)\
    \   |\n             |       +--------------|---------------+\n             | \
    \                     |\n             |               +------v------+\n      \
    \       |               |     N=N+1   |\n             |               +------|------+\n\
    \             |                      |\n             |           +----------v------------+\n\
    \             ------------|Restart the test stream|\n                        \
    \ +-----------------------+\n                Figure 3: Scaling Test Procedure\
    \ Flow Chart\n"
- title: 3.2.3.  Results
  contents:
  - "3.2.3.  Results\n   The test report includes the following:\n   o  A description\
    \ of the DUT (make, model, processor, memory, and\n      interfaces)\n   o  Rate\
    \ at which the Tester offers test traffic to the DUT (measured\n      in packets\
    \ per second)\n   o  A log that records the time at which each flow was introduced\
    \ to\n      the test stream and the final value of all counters\n   o  The expected\
    \ value of NDP-MAX-NEIGHBORS\n   o  The actual value of NDP-MAX-NEIGHBORS\n  \
    \ NDP-MAX-NEIGHBORS is equal to the number of counter pairs where\n   packets-sent\
    \ is equal to packets-received.  Two counters are members\n   of a pair if they\
    \ are both associated with the same flow.  If\n   packets-sent is equal to packets-received\
    \ for every counter pair, the\n   test should be repeated with a larger expected\
    \ value of NDP-MAX-\n   NEIGHBORS.\n   If an implementation abides by the recommendation\
    \ of Section 7.1 of\n   RFC 6583, for any given counter pair, packets-received\
    \ will either be\n   equal to zero or packets-sent.\n   The log documents the\
    \ time at which each flow was introduced to the\n   test stream.  This log reveals\
    \ the effect of NC size to the time\n   required to discover a new IPv6 neighbor.\n"
- title: 4.  Measurements Explicitly Excluded
  contents:
  - "4.  Measurements Explicitly Excluded\n   These measurements aren't recommended\
    \ because of the itemized reasons\n   below:\n"
- title: 4.1.  DUT CPU Utilization
  contents:
  - "4.1.  DUT CPU Utilization\n   This measurement relies on the DUT to provide utilization\n\
    \   information, which is not externally observable (not black-box).\n   However,\
    \ some testing organizations may find the CPU utilization is\n   useful auxiliary\
    \ information specific to the DUT model, etc.\n"
- title: 4.2.  Malformed Packets
  contents:
  - "4.2.  Malformed Packets\n   This benchmarking test is not intended to test DUT\
    \ behavior in the\n   presence of malformed packets.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Benchmarking activities as described in this\
    \ memo are limited to\n   technology characterization using controlled stimuli\
    \ in a laboratory\n   environment, with dedicated address space and the constraints\n\
    \   specified in the sections above.\n   The benchmarking network topology will\
    \ be an independent test setup\n   and MUST NOT be connected to devices that may\
    \ forward the test\n   traffic into a production network or misroute traffic to\
    \ the test\n   management network.\n   Further, benchmarking is performed on a\
    \ \"black-box\" basis, relying\n   solely on measurements observable external\
    \ to the DUT or System Under\n   Test (SUT).  Special capabilities SHOULD NOT\
    \ exist in the DUT/SUT\n   specifically for benchmarking purposes.\n   Any implications\
    \ for network security arising from the DUT/SUT SHOULD\n   be identical in the\
    \ lab and in production networks.\n"
- title: 7.  Normative References
  contents:
  - "7.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n       \
    \       DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n      \
    \        \"Neighbor Discovery for IP version 6 (IPv6)\", RFC 4861,\n         \
    \     DOI 10.17487/RFC4861, September 2007,\n              <http://www.rfc-editor.org/info/rfc4861>.\n\
    \   [RFC6583]  Gashinsky, I., Jaeggli, J., and W. Kumari, \"Operational\n    \
    \          Neighbor Discovery Problems\", RFC 6583,\n              DOI 10.17487/RFC6583,\
    \ March 2012,\n              <http://www.rfc-editor.org/info/rfc6583>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Helpful comments and suggestions were offered by Al Morton,\
    \ Joel\n   Jaeggli, Nalini Elkins, Scott Bradner, and Ram Krishnan on the BMWG\n\
    \   email list and at BMWG meetings.  Precise grammatical corrections and\n  \
    \ suggestions were offered by Ann Cerveny.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Bill Cerveny\n   Arbor Networks\n   2727 South State Street\n\
    \   Ann Arbor, MI  48104\n   United States of America\n   Email: wcerveny@arbor.net\n\
    \   Ron Bonica\n   Juniper Networks\n   2251 Corporate Park Drive\n   Herndon,\
    \ VA  20170\n   United States of America\n   Email: rbonica@juniper.net\n   Reji\
    \ Thomas\n   Juniper Networks\n   Elnath-Exora Business Park Survey\n   Bangalore,\
    \ KA  560103\n   India\n   Email: rejithomas@juniper.net\n"
