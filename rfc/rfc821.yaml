- title: __initial_text__
  contents:
  - "   RFC 821\n                     SIMPLE MAIL TRANSFER PROTOCOL\n            \
    \               Jonathan B. Postel\n                              August 1982\n\
    \                     Information Sciences Institute\n                   University\
    \ of Southern California\n                           4676 Admiralty Way\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \                       TABLE OF CONTENTS\n   1.  INTRODUCTION ..................................................\
    \ 1\n   2.  THE SMTP MODEL ................................................ 2\n\
    \   3.  THE SMTP PROCEDURE ............................................ 4\n  \
    \    3.1.  Mail ..................................................... 4\n    \
    \  3.2.  Forwarding ............................................... 7\n      3.3.\
    \  Verifying and Expanding .................................. 8\n      3.4.  Sending\
    \ and Mailing ..................................... 11\n      3.5.  Opening and\
    \ Closing ..................................... 13\n      3.6.  Relaying ................................................\
    \ 14\n      3.7.  Domains ................................................. 17\n\
    \      3.8.  Changing Roles .......................................... 18\n  \
    \ 4.  THE SMTP SPECIFICATIONS ...................................... 19\n    \
    \  4.1.  SMTP Commands ........................................... 19\n      4.1.1.\
    \  Command Semantics ..................................... 19\n      4.1.2.  Command\
    \ Syntax ........................................ 27\n      4.2.  SMTP Replies\
    \ ............................................ 34\n      4.2.1.  Reply Codes by\
    \ Function Group ......................... 35\n      4.2.2.  Reply Codes in Numeric\
    \ Order .......................... 36\n      4.3.  Sequencing of Commands and\
    \ Replies ...................... 37\n      4.4.  State Diagrams ..........................................\
    \ 39\n      4.5.  Details ................................................. 41\n\
    \      4.5.1.  Minimum Implementation ................................ 41\n  \
    \    4.5.2.  Transparency .......................................... 41\n    \
    \  4.5.3.  Sizes ................................................. 42\n   APPENDIX\
    \ A:  TCP ................................................. 44\n   APPENDIX B:\
    \  NCP ................................................. 45\n   APPENDIX C:  NITS\
    \ ................................................ 46\n   APPENDIX D:  X.25 ................................................\
    \ 47\n   APPENDIX E:  Theory of Reply Codes ............................... 48\n\
    \   APPENDIX F:  Scenarios ........................................... 51\n"
- title: Network Working Group                                          J. Postel
  contents:
  - 'Network Working Group                                          J. Postel

    '
- title: 'Request for Comments: DRAFT                                          ISI'
  contents:
  - 'Request for Comments: DRAFT                                          ISI

    '
- title: 'Replaces: RFC 788, 780, 772                                  August 1982'
  contents:
  - "Replaces: RFC 788, 780, 772                                  August 1982\n  \
    \                   SIMPLE MAIL TRANSFER PROTOCOL\n"
- title: 1.  INTRODUCTION
  contents:
  - "1.  INTRODUCTION\n   The objective of Simple Mail Transfer Protocol (SMTP) is\
    \ to transfer\n   mail reliably and efficiently.\n   SMTP is independent of the\
    \ particular transmission subsystem and\n   requires only a reliable ordered data\
    \ stream channel.  Appendices A,\n   B, C, and D describe the use of SMTP with\
    \ various transport services.\n   A Glossary provides the definitions of terms\
    \ as used in this\n   document.\n   An important feature of SMTP is its capability\
    \ to relay mail across\n   transport service environments.  A transport service\
    \ provides an\n   interprocess communication environment (IPCE).  An IPCE may\
    \ cover one\n   network, several networks, or a subset of a network.  It is important\n\
    \   to realize that transport systems (or IPCEs) are not one-to-one with\n   networks.\
    \  A process can communicate directly with another process\n   through any mutually\
    \ known IPCE.  Mail is an application or use of\n   interprocess communication.\
    \  Mail can be communicated between\n   processes in different IPCEs by relaying\
    \ through a process connected\n   to two (or more) IPCEs.  More specifically,\
    \ mail can be relayed\n   between hosts on different transport systems by a host\
    \ on both\n   transport systems.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n"
- title: 2.  THE SMTP MODEL
  contents:
  - "2.  THE SMTP MODEL\n   The SMTP design is based on the following model of communication:\
    \  as\n   the result of a user mail request, the sender-SMTP establishes a\n \
    \  two-way transmission channel to a receiver-SMTP.  The receiver-SMTP\n   may\
    \ be either the ultimate destination or an intermediate.  SMTP\n   commands are\
    \ generated by the sender-SMTP and sent to the\n   receiver-SMTP.  SMTP replies\
    \ are sent from the receiver-SMTP to the\n   sender-SMTP in response to the commands.\n\
    \   Once the transmission channel is established, the SMTP-sender sends a\n  \
    \ MAIL command indicating the sender of the mail.  If the SMTP-receiver\n   can\
    \ accept mail it responds with an OK reply.  The SMTP-sender then\n   sends a\
    \ RCPT command identifying a recipient of the mail.  If the\n   SMTP-receiver\
    \ can accept mail for that recipient it responds with an\n   OK reply; if not,\
    \ it responds with a reply rejecting that recipient\n   (but not the whole mail\
    \ transaction).  The SMTP-sender and\n   SMTP-receiver may negotiate several recipients.\
    \  When the recipients\n   have been negotiated the SMTP-sender sends the mail\
    \ data, terminating\n   with a special sequence.  If the SMTP-receiver successfully\
    \ processes\n   the mail data it responds with an OK reply.  The dialog is purposely\n\
    \   lock-step, one-at-a-time.\n     -------------------------------------------------------------\n\
    \               +----------+                +----------+\n   +------+    |   \
    \       |                |          |\n   | User |<-->|          |      SMTP \
    \     |          |\n   +------+    |  Sender- |Commands/Replies| Receiver-|\n\
    \   +------+    |   SMTP   |<-------------->|    SMTP  |    +------+\n   | File\
    \ |<-->|          |    and Mail    |          |<-->| File |\n   |System|    |\
    \          |                |          |    |System|\n   +------+    +----------+\
    \                +----------+    +------+\n                Sender-SMTP       \
    \         Receiver-SMTP\n                           Model for SMTP Use\n     \
    \                           Figure 1\n     -------------------------------------------------------------\n\
    \   The SMTP provides mechanisms for the transmission of mail; directly\n   from\
    \ the sending user's host to the receiving user's host when the\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n   two\
    \ host are connected to the same transport service, or via one or\n   more relay\
    \ SMTP-servers when the source and destination hosts are not\n   connected to\
    \ the same transport service.\n   To be able to provide the relay capability the\
    \ SMTP-server must be\n   supplied with the name of the ultimate destination host\
    \ as well as\n   the destination mailbox name.\n   The argument to the MAIL command\
    \ is a reverse-path, which specifies\n   who the mail is from.  The argument to\
    \ the RCPT command is a\n   forward-path, which specifies who the mail is to.\
    \  The forward-path\n   is a source route, while the reverse-path is a return\
    \ route (which\n   may be used to return a message to the sender when an error\
    \ occurs\n   with a relayed message).\n   When the same message is sent to multiple\
    \ recipients the SMTP\n   encourages the transmission of only one copy of the\
    \ data for all the\n   recipients at the same destination host.\n   The mail commands\
    \ and replies have a rigid syntax.  Replies also have\n   a numeric code.  In\
    \ the following, examples appear which use actual\n   commands and replies.  The\
    \ complete lists of commands and replies\n   appears in Section 4 on specifications.\n\
    \   Commands and replies are not case sensitive.  That is, a command or\n   reply\
    \ word may be upper case, lower case, or any mixture of upper and\n   lower case.\
    \  Note that this is not true of mailbox user names.  For\n   some hosts the user\
    \ name is case sensitive, and SMTP implementations\n   must take case to preserve\
    \ the case of user names as they appear in\n   mailbox arguments.  Host names\
    \ are not case sensitive.\n   Commands and replies are composed of characters\
    \ from the ASCII\n   character set [1].  When the transport service provides an\
    \ 8-bit byte\n   (octet) transmission channel, each 7-bit character is transmitted\n\
    \   right justified in an octet with the high order bit cleared to zero.\n   When\
    \ specifying the general form of a command or reply, an argument\n   (or special\
    \ symbol) will be denoted by a meta-linguistic variable (or\n   constant), for\
    \ example, \"<string>\" or \"<reverse-path>\".  Here the\n   angle brackets indicate\
    \ these are meta-linguistic variables.\n   However, some arguments use the angle\
    \ brackets literally.  For\n   example, an actual reverse-path is enclosed in\
    \ angle brackets, i.e.,\n   \"<John.Smith@USC-ISI.ARPA>\" is an instance of <reverse-path>\
    \ (the\n   angle brackets are actually transmitted in the command or reply).\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n"
- title: 3.  THE SMTP PROCEDURES
  contents:
  - "3.  THE SMTP PROCEDURES\n   This section presents the procedures used in SMTP\
    \ in several parts.\n   First comes the basic mail procedure defined as a mail\
    \ transaction.\n   Following this are descriptions of forwarding mail, verifying\
    \ mailbox\n   names and expanding mailing lists, sending to terminals instead\
    \ of or\n   in combination with mailboxes, and the opening and closing exchanges.\n\
    \   At the end of this section are comments on relaying, a note on mail\n   domains,\
    \ and a discussion of changing roles.  Throughout this section\n   are examples\
    \ of partial command and reply sequences, several complete\n   scenarios are presented\
    \ in Appendix F.\n   3.1.  MAIL\n      There are three steps to SMTP mail transactions.\
    \  The transaction\n      is started with a MAIL command which gives the sender\n\
    \      identification.  A series of one or more RCPT commands follows\n      giving\
    \ the receiver information.  Then a DATA command gives the\n      mail data. \
    \ And finally, the end of mail data indicator confirms\n      the transaction.\n\
    \         The first step in the procedure is the MAIL command.  The\n        \
    \ <reverse-path> contains the source mailbox.\n            MAIL <SP> FROM:<reverse-path>\
    \ <CRLF>\n         This command tells the SMTP-receiver that a new mail\n    \
    \     transaction is starting and to reset all its state tables and\n        \
    \ buffers, including any recipients or mail data.  It gives the\n         reverse-path\
    \ which can be used to report errors.  If accepted,\n         the receiver-SMTP\
    \ returns a 250 OK reply.\n         The <reverse-path> can contain more than just\
    \ a mailbox.  The\n         <reverse-path> is a reverse source routing list of\
    \ hosts and\n         source mailbox.  The first host in the <reverse-path> should\
    \ be\n         the host sending this command.\n         The second step in the\
    \ procedure is the RCPT command.\n            RCPT <SP> TO:<forward-path> <CRLF>\n\
    \         This command gives a forward-path identifying one recipient.\n     \
    \    If accepted, the receiver-SMTP returns a 250 OK reply, and\n         stores\
    \ the forward-path.  If the recipient is unknown the\n         receiver-SMTP returns\
    \ a 550 Failure reply.  This second step of\n         the procedure can be repeated\
    \ any number of times.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \     The <forward-path> can contain more than just a mailbox.  The\n        \
    \ <forward-path> is a source routing list of hosts and the\n         destination\
    \ mailbox.  The first host in the <forward-path>\n         should be the host\
    \ receiving this command.\n         The third step in the procedure is the DATA\
    \ command.\n            DATA <CRLF>\n         If accepted, the receiver-SMTP returns\
    \ a 354 Intermediate reply\n         and considers all succeeding lines to be\
    \ the message text.\n         When the end of text is received and stored the\
    \ SMTP-receiver\n         sends a 250 OK reply.\n         Since the mail data\
    \ is sent on the transmission channel the end\n         of the mail data must\
    \ be indicated so that the command and\n         reply dialog can be resumed.\
    \  SMTP indicates the end of the\n         mail data by sending a line containing\
    \ only a period.  A\n         transparency procedure is used to prevent this from\
    \ interfering\n         with the user's text (see Section 4.5.2).\n          \
    \  Please note that the mail data includes the memo header\n            items\
    \ such as Date, Subject, To, Cc, From [2].\n         The end of mail data indicator\
    \ also confirms the mail\n         transaction and tells the receiver-SMTP to\
    \ now process the\n         stored recipients and mail data.  If accepted, the\n\
    \         receiver-SMTP returns a 250 OK reply.  The DATA command should\n   \
    \      fail only if the mail transaction was incomplete (for example,\n      \
    \   no recipients), or if resources are not available.\n      The above procedure\
    \ is an example of a mail transaction.  These\n      commands must be used only\
    \ in the order discussed above.\n      Example 1 (below) illustrates the use of\
    \ these commands in a mail\n      transaction.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \    -------------------------------------------------------------\n         \
    \            Example of the SMTP Procedure\n         This SMTP example shows mail\
    \ sent by Smith at host Alpha.ARPA,\n         to Jones, Green, and Brown at host\
    \ Beta.ARPA.  Here we assume\n         that host Alpha contacts host Beta directly.\n\
    \            S: MAIL FROM:<Smith@Alpha.ARPA>\n            R: 250 OK\n        \
    \    S: RCPT TO:<Jones@Beta.ARPA>\n            R: 250 OK\n            S: RCPT\
    \ TO:<Green@Beta.ARPA>\n            R: 550 No such user here\n            S: RCPT\
    \ TO:<Brown@Beta.ARPA>\n            R: 250 OK\n            S: DATA\n         \
    \   R: 354 Start mail input; end with <CRLF>.<CRLF>\n            S: Blah blah\
    \ blah...\n            S: ...etc. etc. etc.\n            S: <CRLF>.<CRLF>\n  \
    \          R: 250 OK\n         The mail has now been accepted for Jones and Brown.\
    \  Green did\n         not have a mailbox at host Beta.\n                    \
    \           Example 1\n      -------------------------------------------------------------\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n   3.2.\
    \  FORWARDING\n      There are some cases where the destination information in\
    \ the\n      <forward-path> is incorrect, but the receiver-SMTP knows the\n  \
    \    correct destination.  In such cases, one of the following replies\n     \
    \ should be used to allow the sender to contact the correct\n      destination.\n\
    \         251 User not local; will forward to <forward-path>\n            This\
    \ reply indicates that the receiver-SMTP knows the user's\n            mailbox\
    \ is on another host and indicates the correct\n            forward-path to use\
    \ in the future.  Note that either the\n            host or user or both may be\
    \ different.  The receiver takes\n            responsibility for delivering the\
    \ message.\n         551 User not local; please try <forward-path>\n         \
    \   This reply indicates that the receiver-SMTP knows the user's\n           \
    \ mailbox is on another host and indicates the correct\n            forward-path\
    \ to use.  Note that either the host or user or\n            both may be different.\
    \  The receiver refuses to accept mail\n            for this user, and the sender\
    \ must either redirect the mail\n            according to the information provided\
    \ or return an error\n            response to the originating user.\n      Example\
    \ 2 illustrates the use of these responses.\n      -------------------------------------------------------------\n\
    \                         Example of Forwarding\n      Either\n      S: RCPT TO:<Postel@USC-ISI.ARPA>\n\
    \      R: 251 User not local; will forward to <Postel@USC-ISIF.ARPA>\n      Or\n\
    \      S: RCPT TO:<Paul@USC-ISIB.ARPA>\n      R: 551 User not local; please try\
    \ <Mockapetris@USC-ISIF.ARPA>\n                               Example 2\n    \
    \  -------------------------------------------------------------\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \ 3.3.  VERIFYING AND EXPANDING\n      SMTP provides as additional features, commands\
    \ to verify a user\n      name or expand a mailing list.  This is done with the\
    \ VRFY and\n      EXPN commands, which have character string arguments.  For the\n\
    \      VRFY command, the string is a user name, and the response may\n      include\
    \ the full name of the user and must include the mailbox of\n      the user. \
    \ For the EXPN command, the string identifies a mailing\n      list, and the multiline\
    \ response may include the full name of the\n      users and must give the mailboxes\
    \ on the mailing list.\n      \"User name\" is a fuzzy term and used purposely.\
    \  If a host\n      implements the VRFY or EXPN commands then at least local mailboxes\n\
    \      must be recognized as \"user names\".  If a host chooses to\n      recognize\
    \ other strings as \"user names\" that is allowed.\n      In some hosts the distinction\
    \ between a mailing list and an alias\n      for a single mailbox is a bit fuzzy,\
    \ since a common data structure\n      may hold both types of entries, and it\
    \ is possible to have mailing\n      lists of one mailbox.  If a request is made\
    \ to verify a mailing\n      list a positive response can be given if on receipt\
    \ of a message\n      so addressed it will be delivered to everyone on the list,\n\
    \      otherwise an error should be reported (e.g., \"550 That is a\n      mailing\
    \ list, not a user\").  If a request is made to expand a user\n      name a positive\
    \ response can be formed by returning a list\n      containing one name, or an\
    \ error can be reported (e.g., \"550 That\n      is a user name, not a mailing\
    \ list\").\n      In the case of a multiline reply (normal for EXPN) exactly one\n\
    \      mailbox is to be specified on each line of the reply.  In the case\n  \
    \    of an ambiguous request, for example, \"VRFY Smith\", where there\n     \
    \ are two Smith's the response must be \"553 User ambiguous\".\n      The case\
    \ of verifying a user name is straightforward as shown in\n      example 3.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \  -------------------------------------------------------------\n           \
    \         Example of Verifying a User Name\n         Either\n            S: VRFY\
    \ Smith\n            R: 250 Fred Smith <Smith@USC-ISIF.ARPA>\n         Or\n  \
    \          S: VRFY Smith\n            R: 251 User not local; will forward to <Smith@USC-ISIQ.ARPA>\n\
    \         Or\n            S: VRFY Jones\n            R: 550 String does not match\
    \ anything.\n         Or\n            S: VRFY Jones\n            R: 551 User not\
    \ local; please try <Jones@USC-ISIQ.ARPA>\n         Or\n            S: VRFY Gourzenkyinplatz\n\
    \            R: 553 User ambiguous.\n                               Example 3\n\
    \      -------------------------------------------------------------\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \    The case of expanding a mailbox list requires a multiline reply as\n    \
    \  shown in example 4.\n      -------------------------------------------------------------\n\
    \                  Example of Expanding a Mailing List\n         Either\n    \
    \        S: EXPN Example-People\n            R: 250-Jon Postel <Postel@USC-ISIF.ARPA>\n\
    \            R: 250-Fred Fonebone <Fonebone@USC-ISIQ.ARPA>\n            R: 250-Sam\
    \ Q. Smith <SQSmith@USC-ISIQ.ARPA>\n            R: 250-Quincy Smith <@USC-ISIF.ARPA:Q-Smith@ISI-VAXA.ARPA>\n\
    \            R: 250-<joe@foo-unix.ARPA>\n            R: 250 <xyz@bar-unix.ARPA>\n\
    \         Or\n            S: EXPN Executive-Washroom-List\n            R: 550\
    \ Access Denied to You.\n                               Example 4\n      -------------------------------------------------------------\n\
    \      The character string arguments of the VRFY and EXPN commands\n      cannot\
    \ be further restricted due to the variety of implementations\n      of the user\
    \ name and mailbox list concepts.  On some systems it\n      may be appropriate\
    \ for the argument of the EXPN command to be a\n      file name for a file containing\
    \ a mailing list, but again there is\n      a variety of file naming conventions\
    \ in the Internet.\n      The VRFY and EXPN commands are not included in the minimum\n\
    \      implementation (Section 4.5.1), and are not required to work\n      across\
    \ relays when they are implemented.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n   3.4.\
    \  SENDING AND MAILING\n      The main purpose of SMTP is to deliver messages\
    \ to user's\n      mailboxes.  A very similar service provided by some hosts is\
    \ to\n      deliver messages to user's terminals (provided the user is active\n\
    \      on the host).  The delivery to the user's mailbox is called\n      \"mailing\"\
    , the delivery to the user's terminal is called\n      \"sending\".  Because in\
    \ many hosts the implementation of sending is\n      nearly identical to the implementation\
    \ of mailing these two\n      functions are combined in SMTP.  However the sending\
    \ commands are\n      not included in the required minimum implementation\n  \
    \    (Section 4.5.1).  Users should have the ability to control the\n      writing\
    \ of messages on their terminals.  Most hosts permit the\n      users to accept\
    \ or refuse such messages.\n      The following three command are defined to support\
    \ the sending\n      options.  These are used in the mail transaction instead\
    \ of the\n      MAIL command and inform the receiver-SMTP of the special semantics\n\
    \      of this transaction:\n         SEND <SP> FROM:<reverse-path> <CRLF>\n \
    \           The SEND command requires that the mail data be delivered to\n   \
    \         the user's terminal.  If the user is not active (or not\n          \
    \  accepting terminal messages) on the host a 450 reply may\n            returned\
    \ to a RCPT command.  The mail transaction is\n            successful if the message\
    \ is delivered the terminal.\n         SOML <SP> FROM:<reverse-path> <CRLF>\n\
    \            The Send Or MaiL command requires that the mail data be\n       \
    \     delivered to the user's terminal if the user is active (and\n          \
    \  accepting terminal messages) on the host.  If the user is\n            not\
    \ active (or not accepting terminal messages) then the\n            mail data\
    \ is entered into the user's mailbox.  The mail\n            transaction is successful\
    \ if the message is delivered either\n            to the terminal or the mailbox.\n\
    \         SAML <SP> FROM:<reverse-path> <CRLF>\n            The Send And MaiL\
    \ command requires that the mail data be\n            delivered to the user's\
    \ terminal if the user is active (and\n            accepting terminal messages)\
    \ on the host.  In any case the\n            mail data is entered into the user's\
    \ mailbox.  The mail\n            transaction is successful if the message is\
    \ delivered the\n            mailbox.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \    The same reply codes that are used for the MAIL commands are used\n     \
    \ for these commands.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n   3.5.\
    \  OPENING AND CLOSING\n      At the time the transmission channel is opened there\
    \ is an\n      exchange to ensure that the hosts are communicating with the hosts\n\
    \      they think they are.\n      The following two commands are used in transmission\
    \ channel\n      opening and closing:\n         HELO <SP> <domain> <CRLF>\n  \
    \       QUIT <CRLF>\n      In the HELO command the host sending the command identifies\n\
    \      itself; the command may be interpreted as saying \"Hello, I am\n      <domain>\"\
    .\n      -------------------------------------------------------------\n     \
    \                Example of Connection Opening\n         R: 220 BBN-UNIX.ARPA\
    \ Simple Mail Transfer Service Ready\n         S: HELO USC-ISIF.ARPA\n       \
    \  R: 250 BBN-UNIX.ARPA\n                               Example 5\n      -------------------------------------------------------------\n\
    \      -------------------------------------------------------------\n       \
    \              Example of Connection Closing\n         S: QUIT\n         R: 221\
    \ BBN-UNIX.ARPA Service closing transmission channel\n                       \
    \        Example 6\n      -------------------------------------------------------------\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \ 3.6.  RELAYING\n      The forward-path may be a source route of the form\n \
    \     \"@ONE,@TWO:JOE@THREE\", where ONE, TWO, and THREE are hosts.  This\n  \
    \    form is used to emphasize the distinction between an address and a\n    \
    \  route.  The mailbox is an absolute address, and the route is\n      information\
    \ about how to get there.  The two concepts should not\n      be confused.\n \
    \     Conceptually the elements of the forward-path are moved to the\n      reverse-path\
    \ as the message is relayed from one server-SMTP to\n      another.  The reverse-path\
    \ is a reverse source route, (i.e., a\n      source route from the current location\
    \ of the message to the\n      originator of the message).  When a server-SMTP\
    \ deletes its\n      identifier from the forward-path and inserts it into the\n\
    \      reverse-path, it must use the name it is known by in the\n      environment\
    \ it is sending into, not the environment the mail came\n      from, in case the\
    \ server-SMTP is known by different names in\n      different environments.\n\
    \      If when the message arrives at an SMTP the first element of the\n     \
    \ forward-path is not the identifier of that SMTP the element is not\n      deleted\
    \ from the forward-path and is used to determine the next\n      SMTP to send\
    \ the message to.  In any case, the SMTP adds its own\n      identifier to the\
    \ reverse-path.\n      Using source routing the receiver-SMTP receives mail to\
    \ be relayed\n      to another server-SMTP  The receiver-SMTP may accept or reject\
    \ the\n      task of relaying the mail in the same way it accepts or rejects\n\
    \      mail for a local user.  The receiver-SMTP transforms the command\n    \
    \  arguments by moving its own identifier from the forward-path to\n      the\
    \ beginning of the reverse-path.  The receiver-SMTP then becomes\n      a sender-SMTP,\
    \ establishes a transmission channel to the next SMTP\n      in the forward-path,\
    \ and sends it the mail.\n      The first host in the reverse-path should be the\
    \ host sending the\n      SMTP commands, and the first host in the forward-path\
    \ should be\n      the host receiving the SMTP commands.\n      Notice that the\
    \ forward-path and reverse-path appear in the SMTP\n      commands and replies,\
    \ but not necessarily in the message.  That\n      is, there is no need for these\
    \ paths and especially this syntax to\n      appear in the \"To:\" , \"From:\"\
    , \"CC:\", etc. fields of the message\n      header.\n      If a server-SMTP has\
    \ accepted the task of relaying the mail and\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \  later finds that the forward-path is incorrect or that the mail\n      cannot\
    \ be delivered for whatever reason, then it must construct an\n      \"undeliverable\
    \ mail\" notification message and send it to the\n      originator of the undeliverable\
    \ mail (as indicated by the\n      reverse-path).\n      This notification message\
    \ must be from the server-SMTP at this\n      host.  Of course, server-SMTPs should\
    \ not send notification\n      messages about problems with notification messages.\
    \  One way to\n      prevent loops in error reporting is to specify a null reverse-path\n\
    \      in the MAIL command of a notification message.  When such a\n      message\
    \ is relayed it is permissible to leave the reverse-path\n      null.  A MAIL\
    \ command with a null reverse-path appears as follows:\n         MAIL FROM:<>\n\
    \      An undeliverable mail notification message is shown in example 7.\n   \
    \   This notification is in response to a message originated by JOE at\n     \
    \ HOSTW and sent via HOSTX to HOSTY with instructions to relay it on\n      to\
    \ HOSTZ.  What we see in the example is the transaction between\n      HOSTY and\
    \ HOSTX, which is the first step in the return of the\n      notification message.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \    -------------------------------------------------------------\n         \
    \   Example Undeliverable Mail Notification Message\n         S: MAIL FROM:<>\n\
    \         R: 250 ok\n         S: RCPT TO:<@HOSTX.ARPA:JOE@HOSTW.ARPA>\n      \
    \   R: 250 ok\n         S: DATA\n         R: 354 send the mail data, end with\
    \ .\n         S: Date: 23 Oct 81 11:22:33\n         S: From: SMTP@HOSTY.ARPA\n\
    \         S: To: JOE@HOSTW.ARPA\n         S: Subject: Mail System Problem\n  \
    \       S:\n         S:   Sorry JOE, your message to SAM@HOSTZ.ARPA lost.\n  \
    \       S:   HOSTZ.ARPA said this:\n         S:    \"550 No Such User\"\n    \
    \     S: .\n         R: 250 ok\n                               Example 7\n   \
    \   -------------------------------------------------------------\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n   3.7.\
    \  DOMAINS\n      Domains are a recently introduced concept in the ARPA Internet\n\
    \      mail system.  The use of domains changes the address space from a\n   \
    \   flat global space of simple character string host names to a\n      hierarchically\
    \ structured rooted tree of global addresses.  The\n      host name is replaced\
    \ by a domain and host designator which is a\n      sequence of domain element\
    \ strings separated by periods with the\n      understanding that the domain elements\
    \ are ordered from the most\n      specific to the most general.\n      For example,\
    \ \"USC-ISIF.ARPA\", \"Fred.Cambridge.UK\", and\n      \"PC7.LCS.MIT.ARPA\" might\
    \ be host-and-domain identifiers.\n      Whenever domain names are used in SMTP\
    \ only the official names are\n      used, the use of nicknames or aliases is\
    \ not allowed.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \ 3.8.  CHANGING ROLES\n      The TURN command may be used to reverse the roles\
    \ of the two\n      programs communicating over the transmission channel.\n  \
    \    If program-A is currently the sender-SMTP and it sends the TURN\n      command\
    \ and receives an ok reply (250) then program-A becomes the\n      receiver-SMTP.\n\
    \      If program-B is currently the receiver-SMTP and it receives the\n     \
    \ TURN command and sends an ok reply (250) then program-B becomes\n      the sender-SMTP.\n\
    \      To refuse to change roles the receiver sends the 502 reply.\n      Please\
    \ note that this command is optional.  It would not normally\n      be used in\
    \ situations where the transmission channel is TCP.\n      However, when the cost\
    \ of establishing the transmission channel is\n      high, this command may be\
    \ quite useful.  For example, this command\n      may be useful in supporting\
    \ be mail exchange using the public\n      switched telephone system as a transmission\
    \ channel, especially if\n      some hosts poll other hosts for mail exchanges.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n"
- title: 4.  THE SMTP SPECIFICATIONS
  contents:
  - "4.  THE SMTP SPECIFICATIONS\n   4.1.  SMTP COMMANDS\n      4.1.1.  COMMAND SEMANTICS\n\
    \         The SMTP commands define the mail transfer or the mail system\n    \
    \     function requested by the user.  SMTP commands are character\n         strings\
    \ terminated by <CRLF>.  The command codes themselves are\n         alphabetic\
    \ characters terminated by <SP> if parameters follow\n         and <CRLF> otherwise.\
    \  The syntax of mailboxes must conform to\n         receiver site conventions.\
    \  The SMTP commands are discussed\n         below.  The SMTP replies are discussed\
    \ in the Section 4.2.\n         A mail transaction involves several data objects\
    \ which are\n         communicated as arguments to different commands.  The\n\
    \         reverse-path is the argument of the MAIL command, the\n         forward-path\
    \ is the argument of the RCPT command, and the mail\n         data is the argument\
    \ of the DATA command.  These arguments or\n         data objects must be transmitted\
    \ and held pending the\n         confirmation communicated by the end of mail\
    \ data indication\n         which finalizes the transaction.  The model for this\
    \ is that\n         distinct buffers are provided to hold the types of data\n\
    \         objects, that is, there is a reverse-path buffer, a\n         forward-path\
    \ buffer, and a mail data buffer.  Specific commands\n         cause information\
    \ to be appended to a specific buffer, or cause\n         one or more buffers\
    \ to be cleared.\n         HELLO (HELO)\n            This command is used to identify\
    \ the sender-SMTP to the\n            receiver-SMTP.  The argument field contains\
    \ the host name of\n            the sender-SMTP.\n            The receiver-SMTP\
    \ identifies itself to the sender-SMTP in\n            the connection greeting\
    \ reply, and in the response to this\n            command.\n            This command\
    \ and an OK reply to it confirm that both the\n            sender-SMTP and the\
    \ receiver-SMTP are in the initial state,\n            that is, there is no transaction\
    \ in progress and all state\n            tables and buffers are cleared.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \       MAIL (MAIL)\n            This command is used to initiate a mail transaction\
    \ in which\n            the mail data is delivered to one or more mailboxes. \
    \ The\n            argument field contains a reverse-path.\n            The reverse-path\
    \ consists of an optional list of hosts and\n            the sender mailbox. \
    \ When the list of hosts is present, it\n            is a \"reverse\" source route\
    \ and indicates that the mail was\n            relayed through each host on the\
    \ list (the first host in the\n            list was the most recent relay).  This\
    \ list is used as a\n            source route to return non-delivery notices to\
    \ the sender.\n            As each relay host adds itself to the beginning of\
    \ the list,\n            it must use its name as known in the IPCE to which it\
    \ is\n            relaying the mail rather than the IPCE from which the mail\n\
    \            came (if they are different).  In some types of error\n         \
    \   reporting messages (for example, undeliverable mail\n            notifications)\
    \ the reverse-path may be null (see Example 7).\n            This command clears\
    \ the reverse-path buffer, the\n            forward-path buffer, and the mail\
    \ data buffer; and inserts\n            the reverse-path information from this\
    \ command into the\n            reverse-path buffer.\n         RECIPIENT (RCPT)\n\
    \            This command is used to identify an individual recipient of\n   \
    \         the mail data; multiple recipients are specified by multiple\n     \
    \       use of this command.\n            The forward-path consists of an optional\
    \ list of hosts and a\n            required destination mailbox.  When the list\
    \ of hosts is\n            present, it is a source route and indicates that the\
    \ mail\n            must be relayed to the next host on the list.  If the\n  \
    \          receiver-SMTP does not implement the relay function it may\n      \
    \      user the same reply it would for an unknown local user\n            (550).\n\
    \            When mail is relayed, the relay host must remove itself from\n  \
    \          the beginning forward-path and put itself at the beginning\n      \
    \      of the reverse-path.  When mail reaches its ultimate\n            destination\
    \ (the forward-path contains only a destination\n            mailbox), the receiver-SMTP\
    \ inserts it into the destination\n            mailbox in accordance with its\
    \ host mail conventions.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \           For example, mail received at relay host A with arguments\n      \
    \            FROM:<USERX@HOSTY.ARPA>\n                  TO:<@HOSTA.ARPA,@HOSTB.ARPA:USERC@HOSTD.ARPA>\n\
    \               will be relayed on to host B with arguments\n                \
    \  FROM:<@HOSTA.ARPA:USERX@HOSTY.ARPA>\n                  TO:<@HOSTB.ARPA:USERC@HOSTD.ARPA>.\n\
    \            This command causes its forward-path argument to be appended\n  \
    \          to the forward-path buffer.\n         DATA (DATA)\n            The\
    \ receiver treats the lines following the command as mail\n            data from\
    \ the sender.  This command causes the mail data\n            from this command\
    \ to be appended to the mail data buffer.\n            The mail data may contain\
    \ any of the 128 ASCII character\n            codes.\n            The mail data\
    \ is terminated by a line containing only a\n            period, that is the character\
    \ sequence \"<CRLF>.<CRLF>\" (see\n            Section 4.5.2 on Transparency).\
    \  This is the end of mail\n            data indication.\n            The end\
    \ of mail data indication requires that the receiver\n            must now process\
    \ the stored mail transaction information.\n            This processing consumes\
    \ the information in the reverse-path\n            buffer, the forward-path buffer,\
    \ and the mail data buffer,\n            and on the completion of this command\
    \ these buffers are\n            cleared.  If the processing is successful the\
    \ receiver must\n            send an OK reply.  If the processing fails completely\
    \ the\n            receiver must send a failure reply.\n            When the receiver-SMTP\
    \ accepts a message either for relaying\n            or for final delivery it\
    \ inserts at the beginning of the\n            mail data a time stamp line.  The\
    \ time stamp line indicates\n            the identity of the host that sent the\
    \ message, and the\n            identity of the host that received the message\
    \ (and is\n            inserting this time stamp), and the date and time the\n\
    \            message was received.  Relayed messages will have multiple\n    \
    \        time stamp lines.\n            When the receiver-SMTP makes the \"final\
    \ delivery\" of a\n            message it inserts at the beginning of the mail\
    \ data a\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \          return path line.  The return path line preserves the\n           \
    \ information in the <reverse-path> from the MAIL command.\n            Here,\
    \ final delivery means the message leaves the SMTP\n            world.  Normally,\
    \ this would mean it has been delivered to\n            the destination user,\
    \ but in some cases it may be further\n            processed and transmitted by\
    \ another mail system.\n               It is possible for the mailbox in the return\
    \ path be\n               different from the actual sender's mailbox, for example,\n\
    \               if error responses are to be delivered a special error\n     \
    \          handling mailbox rather than the message senders.\n            The\
    \ preceding two paragraphs imply that the final mail data\n            will begin\
    \ with a  return path line, followed by one or more\n            time stamp lines.\
    \  These lines will be followed by the mail\n            data header and body\
    \ [2].  See Example 8.\n            Special mention is needed of the response\
    \ and further action\n            required when the processing following the end\
    \ of mail data\n            indication is partially successful.  This could arise\
    \ if\n            after accepting several recipients and the mail data, the\n\
    \            receiver-SMTP finds that the mail data can be successfully\n    \
    \        delivered to some of the recipients, but it cannot be to\n          \
    \  others (for example, due to mailbox space allocation\n            problems).\
    \  In such a situation, the response to the DATA\n            command must be\
    \ an OK reply.  But, the receiver-SMTP must\n            compose and send an \"\
    undeliverable mail\" notification\n            message to the originator of the\
    \ message.  Either a single\n            notification which lists all of the recipients\
    \ that failed\n            to get the message, or separate notification messages\
    \ must\n            be sent for each failed recipient (see Example 7).  All\n\
    \            undeliverable mail notification messages are sent using the\n   \
    \         MAIL command (even if they result from processing a SEND,\n        \
    \    SOML, or SAML command).\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \ -------------------------------------------------------------\n            Example\
    \ of Return Path and Received Time Stamps\n      Return-Path: <@GHI.ARPA,@DEF.ARPA,@ABC.ARPA:JOE@ABC.ARPA>\
    \   \n      Received: from GHI.ARPA by JKL.ARPA ; 27 Oct 81 15:27:39 PST\n   \
    \   Received: from DEF.ARPA by GHI.ARPA ; 27 Oct 81 15:15:13 PST\n      Received:\
    \ from ABC.ARPA by DEF.ARPA ; 27 Oct 81 15:01:59 PST\n      Date: 27 Oct 81 15:01:01\
    \ PST                                \n      From: JOE@ABC.ARPA              \
    \                            \n      Subject: Improved Mailing System Installed\
    \                  \n      To: SAM@JKL.ARPA                                  \
    \          \n      This is to inform you that ...                            \
    \  \n                               Example 8\n     -------------------------------------------------------------\n\
    \         SEND (SEND)\n            This command is used to initiate a mail transaction\
    \ in which\n            the mail data is delivered to one or more terminals. \
    \ The\n            argument field contains a reverse-path.  This command is\n\
    \            successful if the message is delivered to a terminal.\n         \
    \   The reverse-path consists of an optional list of hosts and\n            the\
    \ sender mailbox.  When the list of hosts is present, it\n            is a \"\
    reverse\" source route and indicates that the mail was\n            relayed through\
    \ each host on the list (the first host in the\n            list was the most\
    \ recent relay).  This list is used as a\n            source route to return non-delivery\
    \ notices to the sender.\n            As each relay host adds itself to the beginning\
    \ of the list,\n            it must use its name as known in the IPCE to which\
    \ it is\n            relaying the mail rather than the IPCE from which the mail\n\
    \            came (if they are different).\n            This command clears the\
    \ reverse-path buffer, the\n            forward-path buffer, and the mail data\
    \ buffer; and inserts\n            the reverse-path information from this command\
    \ into the\n            reverse-path buffer.\n         SEND OR MAIL (SOML)\n \
    \           This command is used to initiate a mail transaction in which\n   \
    \         the mail data is delivered to one or more terminals or\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \          mailboxes. For each recipient the mail data is delivered to\n     \
    \       the recipient's terminal if the recipient is active on the\n         \
    \   host (and accepting terminal messages), otherwise to the\n            recipient's\
    \ mailbox.  The argument field contains a\n            reverse-path.  This command\
    \ is successful if the message is\n            delivered to a terminal or the\
    \ mailbox.\n            The reverse-path consists of an optional list of hosts\
    \ and\n            the sender mailbox.  When the list of hosts is present, it\n\
    \            is a \"reverse\" source route and indicates that the mail was\n \
    \           relayed through each host on the list (the first host in the\n   \
    \         list was the most recent relay).  This list is used as a\n         \
    \   source route to return non-delivery notices to the sender.\n            As\
    \ each relay host adds itself to the beginning of the list,\n            it must\
    \ use its name as known in the IPCE to which it is\n            relaying the mail\
    \ rather than the IPCE from which the mail\n            came (if they are different).\n\
    \            This command clears the reverse-path buffer, the\n            forward-path\
    \ buffer, and the mail data buffer; and inserts\n            the reverse-path\
    \ information from this command into the\n            reverse-path buffer.\n \
    \        SEND AND MAIL (SAML)\n            This command is used to initiate a\
    \ mail transaction in which\n            the mail data is delivered to one or\
    \ more terminals and\n            mailboxes. For each recipient the mail data\
    \ is delivered to\n            the recipient's terminal if the recipient is active\
    \ on the\n            host (and accepting terminal messages), and for all\n  \
    \          recipients to the recipient's mailbox.  The argument field\n      \
    \      contains a reverse-path.  This command is successful if the\n         \
    \   message is delivered to the mailbox.\n            The reverse-path consists\
    \ of an optional list of hosts and\n            the sender mailbox.  When the\
    \ list of hosts is present, it\n            is a \"reverse\" source route and\
    \ indicates that the mail was\n            relayed through each host on the list\
    \ (the first host in the\n            list was the most recent relay).  This list\
    \ is used as a\n            source route to return non-delivery notices to the\
    \ sender.\n            As each relay host adds itself to the beginning of the\
    \ list,\n            it must use its name as known in the IPCE to which it is\n\
    \            relaying the mail rather than the IPCE from which the mail\n    \
    \        came (if they are different).\n            This command clears the reverse-path\
    \ buffer, the\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \        forward-path buffer, and the mail data buffer; and inserts\n        \
    \    the reverse-path information from this command into the\n            reverse-path\
    \ buffer.\n         RESET (RSET)\n            This command specifies that the\
    \ current mail transaction is\n            to be aborted.  Any stored sender,\
    \ recipients, and mail data\n            must be discarded, and all buffers and\
    \ state tables cleared.\n            The receiver must send an OK reply.\n   \
    \      VERIFY (VRFY)\n            This command asks the receiver to confirm that\
    \ the argument\n            identifies a user.  If it is a user name, the full\
    \ name of\n            the user (if known) and the fully specified mailbox are\n\
    \            returned.\n            This command has no effect on any of the reverse-path\n\
    \            buffer, the forward-path buffer, or the mail data buffer.\n     \
    \    EXPAND (EXPN)\n            This command asks the receiver to confirm that\
    \ the argument\n            identifies a mailing list, and if so, to return the\n\
    \            membership of that list.  The full name of the users (if\n      \
    \      known) and the fully specified mailboxes are returned in a\n          \
    \  multiline reply.\n            This command has no effect on any of the reverse-path\n\
    \            buffer, the forward-path buffer, or the mail data buffer.\n     \
    \    HELP (HELP)\n            This command causes the receiver to send helpful\
    \ information\n            to the sender of the HELP command.  The command may\
    \ take an\n            argument (e.g., any command name) and return more specific\n\
    \            information as a response.\n            This command has no effect\
    \ on any of the reverse-path\n            buffer, the forward-path buffer, or\
    \ the mail data buffer.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \       NOOP (NOOP)\n            This command does not affect any parameters or\
    \ previously\n            entered commands.  It specifies no action other than\
    \ that\n            the receiver send an OK reply.\n            This command has\
    \ no effect on any of the reverse-path\n            buffer, the forward-path buffer,\
    \ or the mail data buffer.\n         QUIT (QUIT)\n            This command specifies\
    \ that the receiver must send an OK\n            reply, and then close the transmission\
    \ channel.\n            The receiver should not close the transmission channel\
    \ until\n            it receives and replies to a QUIT command (even if there\
    \ was\n            an error).  The sender should not close the transmission\n\
    \            channel until it send a QUIT command and receives the reply\n   \
    \         (even if there was an error response to a previous command).\n     \
    \       If the connection is closed prematurely the receiver should\n        \
    \    act as if a RSET command had been received (canceling any\n            pending\
    \ transaction, but not undoing any previously\n            completed transaction),\
    \ the sender should act as if the\n            command or transaction in progress\
    \ had received a temporary\n            error (4xx).\n         TURN (TURN)\n \
    \           This command specifies that the receiver must either (1)\n       \
    \     send an OK reply and then take on the role of the\n            sender-SMTP,\
    \ or (2) send a refusal reply and retain the role\n            of the receiver-SMTP.\n\
    \            If program-A is currently the sender-SMTP and it sends the\n    \
    \        TURN command and receives an OK reply (250) then program-A\n        \
    \    becomes the receiver-SMTP.  Program-A is then in the initial\n          \
    \  state as if the transmission channel just opened, and it\n            then\
    \ sends the 220 service ready greeting.\n            If program-B is currently\
    \ the receiver-SMTP and it receives\n            the TURN command and sends an\
    \ OK reply (250) then program-B\n            becomes the sender-SMTP.  Program-B\
    \ is then in the initial\n            state as if the transmission channel just\
    \ opened, and it\n            then expects to receive the 220 service ready greeting.\n\
    \            To refuse to change roles the receiver sends the 502 reply.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \     There are restrictions on the order in which these command may\n       \
    \  be used.\n            The first command in a session must be the HELO command.\n\
    \            The HELO command may be used later in a session as well.  If\n  \
    \          the HELO command argument is not acceptable a 501 failure\n       \
    \     reply must be returned and the receiver-SMTP must stay in\n            the\
    \ same state.\n            The NOOP, HELP, EXPN, and VRFY commands can be used\
    \ at any\n            time during a session.\n            The MAIL, SEND, SOML,\
    \ or SAML commands begin a mail\n            transaction.  Once started a mail\
    \ transaction consists of\n            one of the transaction beginning commands,\
    \ one or more RCPT\n            commands, and a DATA command, in that order. \
    \ A mail\n            transaction may be aborted by the RSET command.  There may\n\
    \            be zero or more transactions in a session.\n            If the transaction\
    \ beginning command argument is not\n            acceptable a 501 failure reply\
    \ must be returned and the\n            receiver-SMTP must stay in the same state.\
    \  If the commands\n            in a transaction are out of order a 503 failure\
    \ reply must\n            be returned and the receiver-SMTP must stay in the same\n\
    \            state.\n            The last command in a session must be the QUIT\
    \ command.  The\n            QUIT command can not be used at any other time in\
    \ a session.\n      4.1.2.  COMMAND SYNTAX\n         The commands consist of a\
    \ command code followed by an argument\n         field.  Command codes are four\
    \ alphabetic characters.  Upper\n         and lower case alphabetic characters\
    \ are to be treated\n         identically.  Thus, any of the following may represent\
    \ the mail\n         command:\n            MAIL    Mail    mail    MaIl    mAIl\n\
    \         This also applies to any symbols representing parameter values,\n  \
    \       such as \"TO\" or \"to\" for the forward-path.  Command codes and\n  \
    \       the argument fields are separated by one or more spaces.\n         However,\
    \ within the reverse-path and forward-path arguments\n         case is important.\
    \  In particular, in some hosts the user\n         \"smith\" is different from\
    \ the user \"Smith\".\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \       The argument field consists of a variable length character\n         string\
    \ ending with the character sequence <CRLF>.  The receiver\n         is to take\
    \ no action until this sequence is received.\n         Square brackets denote\
    \ an optional argument field.  If the\n         option is not taken, the appropriate\
    \ default is implied.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \     The following are the SMTP commands:\n            HELO <SP> <domain> <CRLF>\n\
    \            MAIL <SP> FROM:<reverse-path> <CRLF>\n            RCPT <SP> TO:<forward-path>\
    \ <CRLF>\n            DATA <CRLF>\n            RSET <CRLF>\n            SEND <SP>\
    \ FROM:<reverse-path> <CRLF>\n            SOML <SP> FROM:<reverse-path> <CRLF>\n\
    \            SAML <SP> FROM:<reverse-path> <CRLF>\n            VRFY <SP> <string>\
    \ <CRLF>\n            EXPN <SP> <string> <CRLF>\n            HELP [<SP> <string>]\
    \ <CRLF>\n            NOOP <CRLF>\n            QUIT <CRLF>\n            TURN <CRLF>\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \       The syntax of the above argument fields (using BNF notation\n        \
    \ where applicable) is given below.  The \"...\" notation indicates\n        \
    \ that a field may be repeated one or more times.\n            <reverse-path>\
    \ ::= <path>\n            <forward-path> ::= <path>\n            <path> ::= \"\
    <\" [ <a-d-l> \":\" ] <mailbox> \">\"\n            <a-d-l> ::= <at-domain> | <at-domain>\
    \ \",\" <a-d-l>\n            <at-domain> ::= \"@\" <domain>\n            <domain>\
    \ ::=  <element> | <element> \".\" <domain>\n            <element> ::= <name>\
    \ | \"#\" <number> | \"[\" <dotnum> \"]\"\n            <mailbox> ::= <local-part>\
    \ \"@\" <domain>\n            <local-part> ::= <dot-string> | <quoted-string>\n\
    \            <name> ::= <a> <ldh-str> <let-dig>\n            <ldh-str> ::= <let-dig-hyp>\
    \ | <let-dig-hyp> <ldh-str>\n            <let-dig> ::= <a> | <d>\n           \
    \ <let-dig-hyp> ::= <a> | <d> | \"-\"\n            <dot-string> ::= <string> |\
    \ <string> \".\" <dot-string>\n            <string> ::= <char> | <char> <string>\n\
    \            <quoted-string> ::=  \"\"\" <qtext> \"\"\"\n            <qtext> ::=\
    \  \"\\\" <x> | \"\\\" <x> <qtext> | <q> | <q> <qtext>\n            <char> ::=\
    \ <c> | \"\\\" <x>\n            <dotnum> ::= <snum> \".\" <snum> \".\" <snum>\
    \ \".\" <snum>\n            <number> ::= <d> | <d> <number>\n            <CRLF>\
    \ ::= <CR> <LF>\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \        <CR> ::= the carriage return character (ASCII code 13)\n            <LF>\
    \ ::= the line feed character (ASCII code 10)\n            <SP> ::= the space\
    \ character (ASCII code 32)\n            <snum> ::= one, two, or three digits\
    \ representing a decimal\n                      integer value in the range 0 through\
    \ 255\n            <a> ::= any one of the 52 alphabetic characters A through Z\n\
    \                      in upper case and a through z in lower case\n         \
    \   <c> ::= any one of the 128 ASCII characters, but not any\n               \
    \       <special> or <SP>\n            <d> ::= any one of the ten digits 0 through\
    \ 9\n            <q> ::= any one of the 128 ASCII characters except <CR>,\n  \
    \                    <LF>, quote (\"), or backslash (\\)\n            <x> ::=\
    \ any one of the 128 ASCII characters (no exceptions)\n            <special> ::=\
    \ \"<\" | \">\" | \"(\" | \")\" | \"[\" | \"]\" | \"\\\" | \".\"\n           \
    \           | \",\" | \";\" | \":\" | \"@\"  \"\"\" | the control\n          \
    \            characters (ASCII codes 0 through 31 inclusive and\n            \
    \          127)\n         Note that the backslash, \"\\\", is a quote character,\
    \ which is\n         used to indicate that the next character is to be used\n\
    \         literally (instead of its normal interpretation).  For example,\n  \
    \       \"Joe\\,Smith\" could be used to indicate a single nine character\n  \
    \       user field with comma being the fourth character of the field.\n     \
    \    Hosts are generally known by names which are translated to\n         addresses\
    \ in each host.  Note that the name elements of domains\n         are the official\
    \ names -- no use of nicknames or aliases is\n         allowed.\n         Sometimes\
    \ a host is not known to the translation function and\n         communication\
    \ is blocked.  To bypass this barrier two numeric\n         forms are also allowed\
    \ for host \"names\".  One form is a decimal\n         integer prefixed by a pound\
    \ sign, \"#\", which indicates the\n         number is the address of the host.\
    \  Another form is four small\n         decimal integers separated by dots and\
    \ enclosed by brackets,\n         e.g., \"[123.255.37.2]\", which indicates a\
    \ 32-bit ARPA Internet\n         Address in four 8-bit fields.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \       The time stamp line and the return path line are formally\n         defined\
    \ as follows:\n         <return-path-line> ::= \"Return-Path:\" <SP><reverse-path><CRLF>\n\
    \         <time-stamp-line> ::= \"Received:\" <SP> <stamp> <CRLF>\n          \
    \  <stamp> ::= <from-domain> <by-domain> <opt-info> \";\"\n                  \
    \    <daytime>\n            <from-domain> ::= \"FROM\" <SP> <domain> <SP>\n  \
    \          <by-domain> ::= \"BY\" <SP> <domain> <SP>\n            <opt-info> ::=\
    \ [<via>] [<with>] [<id>] [<for>]\n            <via> ::= \"VIA\" <SP> <link> <SP>\n\
    \            <with> ::= \"WITH\" <SP> <protocol> <SP>\n            <id> ::= \"\
    ID\" <SP> <string> <SP>\n            <for> ::= \"FOR\" <SP> <path> <SP>\n    \
    \        <link> ::= The standard names for links are registered with\n       \
    \               the Network Information Center.\n            <protocol> ::= The\
    \ standard names for protocols are\n                      registered with the\
    \ Network Information Center.\n            <daytime> ::= <SP> <date> <SP> <time>\n\
    \            <date> ::= <dd> <SP> <mon> <SP> <yy>\n            <time> ::= <hh>\
    \ \":\" <mm> \":\" <ss> <SP> <zone>\n            <dd> ::= the one or two decimal\
    \ integer day of the month in\n                      the range 1 to 31.\n    \
    \        <mon> ::= \"JAN\" | \"FEB\" | \"MAR\" | \"APR\" | \"MAY\" | \"JUN\" |\n\
    \                      \"JUL\" | \"AUG\" | \"SEP\" | \"OCT\" | \"NOV\" | \"DEC\"\
    \n            <yy> ::= the two decimal integer year of the century in the\n  \
    \                    range 00 to 99.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \        <hh> ::= the two decimal integer hour of the day in the\n           \
    \           range 00 to 24.\n            <mm> ::= the two decimal integer minute\
    \ of the hour in the\n                      range 00 to 59.\n            <ss>\
    \ ::= the two decimal integer second of the minute in the\n                  \
    \    range 00 to 59.\n            <zone> ::= \"UT\" for Universal Time (the default)\
    \ or other\n                      time zone designator (as in [2]).\n     -------------------------------------------------------------\n\
    \                          Return Path Example\n         Return-Path: <@CHARLIE.ARPA,@BAKER.ARPA:JOE@ABLE.ARPA>\n\
    \                               Example 9\n     -------------------------------------------------------------\n\
    \     -------------------------------------------------------------\n        \
    \                Time Stamp Line Example\n      Received: FROM ABC.ARPA BY XYZ.ARPA\
    \ ; 22 OCT 81 09:23:59 PDT\n         Received: from ABC.ARPA by XYZ.ARPA via TELENET\
    \ with X25\n                   id M12345 for Smith@PDQ.ARPA ; 22 OCT 81 09:23:59\
    \ PDT\n                               Example 10\n      -------------------------------------------------------------\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \ 4.2.  SMTP REPLIES\n      Replies to SMTP commands are devised to ensure the\
    \ synchronization\n      of requests and actions in the process of mail transfer,\
    \ and to\n      guarantee that the sender-SMTP always knows the state of the\n\
    \      receiver-SMTP.  Every command must generate exactly one reply.\n      \
    \   The details of the command-reply sequence are made explicit in\n         Section\
    \ 5.3 on Sequencing and Section 5.4 State Diagrams.\n      An SMTP reply consists\
    \ of a three digit number (transmitted as\n      three alphanumeric characters)\
    \ followed by some text.  The number\n      is intended for use by automata to\
    \ determine what state to enter\n      next; the text is meant for the human user.\
    \  It is intended that\n      the three digits contain enough encoded information\
    \ that the\n      sender-SMTP need not examine the text and may either discard\
    \ it or\n      pass it on to the user, as appropriate.  In particular, the text\n\
    \      may be receiver-dependent and context dependent, so there are\n      likely\
    \ to be varying texts for each reply code.  A discussion of\n      the theory\
    \ of reply codes is given in Appendix E.  Formally, a\n      reply is defined\
    \ to be the sequence:  a three-digit code, <SP>,\n      one line of text, and\
    \ <CRLF>, or a multiline reply (as defined in\n      Appendix E).  Only the EXPN\
    \ and HELP commands are expected to\n      result in multiline replies in normal\
    \ circumstances, however\n      multiline replies are allowed for any command.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \  4.2.1.  REPLY CODES BY FUNCTION GROUPS\n         500 Syntax error, command\
    \ unrecognized\n            [This may include errors such as command line too\
    \ long]\n         501 Syntax error in parameters or arguments\n         502 Command\
    \ not implemented\n         503 Bad sequence of commands\n         504 Command\
    \ parameter not implemented\n         211 System status, or system help reply\n\
    \         214 Help message\n            [Information on how to use the receiver\
    \ or the meaning of a\n            particular non-standard command; this reply\
    \ is useful only\n            to the human user]\n         220 <domain> Service\
    \ ready\n         221 <domain> Service closing transmission channel\n        \
    \ 421 <domain> Service not available,\n             closing transmission channel\n\
    \            [This may be a reply to any command if the service knows it\n   \
    \         must shut down]\n         250 Requested mail action okay, completed\n\
    \         251 User not local; will forward to <forward-path>\n         450 Requested\
    \ mail action not taken: mailbox unavailable\n            [E.g., mailbox busy]\n\
    \         550 Requested action not taken: mailbox unavailable\n            [E.g.,\
    \ mailbox not found, no access]\n         451 Requested action aborted: error\
    \ in processing\n         551 User not local; please try <forward-path>\n    \
    \     452 Requested action not taken: insufficient system storage\n         552\
    \ Requested mail action aborted: exceeded storage allocation\n         553 Requested\
    \ action not taken: mailbox name not allowed\n            [E.g., mailbox syntax\
    \ incorrect]\n         354 Start mail input; end with <CRLF>.<CRLF>\n        \
    \ 554 Transaction failed\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \    4.2.2.  NUMERIC ORDER LIST OF REPLY CODES\n         211 System status, or\
    \ system help reply\n         214 Help message\n            [Information on how\
    \ to use the receiver or the meaning of a\n            particular non-standard\
    \ command; this reply is useful only\n            to the human user]\n       \
    \  220 <domain> Service ready\n         221 <domain> Service closing transmission\
    \ channel\n         250 Requested mail action okay, completed\n         251 User\
    \ not local; will forward to <forward-path>\n         354 Start mail input; end\
    \ with <CRLF>.<CRLF>\n         421 <domain> Service not available,\n         \
    \    closing transmission channel\n            [This may be a reply to any command\
    \ if the service knows it\n            must shut down]\n         450 Requested\
    \ mail action not taken: mailbox unavailable\n            [E.g., mailbox busy]\n\
    \         451 Requested action aborted: local error in processing\n         452\
    \ Requested action not taken: insufficient system storage\n         500 Syntax\
    \ error, command unrecognized\n            [This may include errors such as command\
    \ line too long]\n         501 Syntax error in parameters or arguments\n     \
    \    502 Command not implemented\n         503 Bad sequence of commands\n    \
    \     504 Command parameter not implemented\n         550 Requested action not\
    \ taken: mailbox unavailable\n            [E.g., mailbox not found, no access]\n\
    \         551 User not local; please try <forward-path>\n         552 Requested\
    \ mail action aborted: exceeded storage allocation\n         553 Requested action\
    \ not taken: mailbox name not allowed\n            [E.g., mailbox syntax incorrect]\n\
    \         554 Transaction failed\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n   4.3.\
    \  SEQUENCING OF COMMANDS AND REPLIES\n      The communication between the sender\
    \ and receiver is intended to\n      be an alternating dialogue, controlled by\
    \ the sender.  As such,\n      the sender issues a command and the receiver responds\
    \ with a\n      reply.  The sender must wait for this response before sending\n\
    \      further commands.\n      One important reply is the connection greeting.\
    \  Normally, a\n      receiver will send a 220 \"Service ready\" reply when the\
    \ connection\n      is completed.  The sender should wait for this greeting message\n\
    \      before sending any commands.\n         Note: all the greeting type replies\
    \ have the official name of\n         the server host as the first word following\
    \ the reply code.\n            For example,\n               220 <SP> USC-ISIF.ARPA\
    \ <SP> Service ready <CRLF>\n      The table below lists alternative success and\
    \ failure replies for\n      each command.  These must be strictly adhered to;\
    \ a receiver may\n      substitute text in the replies, but the meaning and action\
    \ implied\n      by the code numbers and by the specific command reply sequence\n\
    \      cannot be altered.\n      COMMAND-REPLY SEQUENCES\n         Each command\
    \ is listed with its possible replies.  The prefixes\n         used before the\
    \ possible replies are \"P\" for preliminary (not\n         used in SMTP), \"\
    I\" for intermediate, \"S\" for success, \"F\" for\n         failure, and \"E\"\
    \ for error.  The 421 reply (service not\n         available, closing transmission\
    \ channel) may be given to any\n         command if the SMTP-receiver knows it\
    \ must shut down.  This\n         listing forms the basis for the State Diagrams\
    \ in Section 4.4.\n            CONNECTION ESTABLISHMENT\n               S: 220\n\
    \               F: 421\n            HELO\n               S: 250\n            \
    \   E: 500, 501, 504, 421\n            MAIL\n               S: 250\n         \
    \      F: 552, 451, 452\n               E: 500, 501, 421\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \          RCPT\n               S: 250, 251\n               F: 550, 551, 552,\
    \ 553, 450, 451, 452\n               E: 500, 501, 503, 421\n            DATA\n\
    \               I: 354 -> data -> S: 250\n                                 F:\
    \ 552, 554, 451, 452\n               F: 451, 554\n               E: 500, 501,\
    \ 503, 421\n            RSET\n               S: 250\n               E: 500, 501,\
    \ 504, 421\n            SEND\n               S: 250\n               F: 552, 451,\
    \ 452\n               E: 500, 501, 502, 421\n            SOML\n              \
    \ S: 250\n               F: 552, 451, 452\n               E: 500, 501, 502, 421\n\
    \            SAML\n               S: 250\n               F: 552, 451, 452\n  \
    \             E: 500, 501, 502, 421\n            VRFY\n               S: 250,\
    \ 251\n               F: 550, 551, 553\n               E: 500, 501, 502, 504,\
    \ 421\n            EXPN\n               S: 250\n               F: 550\n      \
    \         E: 500, 501, 502, 504, 421\n            HELP\n               S: 211,\
    \ 214\n               E: 500, 501, 502, 504, 421\n            NOOP\n         \
    \      S: 250\n               E: 500, 421\n            QUIT\n               S:\
    \ 221\n               E: 500\n            TURN\n               S: 250\n      \
    \         F: 502\n               E: 500, 503\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n   4.4.\
    \  STATE DIAGRAMS\n      Following are state diagrams for a simple-minded SMTP\n\
    \      implementation.  Only the first digit of the reply codes is used.\n   \
    \   There is one state diagram for each group of SMTP commands.  The\n      command\
    \ groupings were determined by constructing a model for each\n      command and\
    \ then collecting together the commands with\n      structurally identical models.\n\
    \      For each command there are three possible outcomes:  \"success\"\n    \
    \  (S), \"failure\" (F), and \"error\" (E). In the state diagrams below\n    \
    \  we use the symbol B for \"begin\", and the symbol W for \"wait for\n      reply\"\
    .\n      First, the diagram that represents most of the SMTP commands:\n     \
    \                             1,3    +---+\n                             ----------->|\
    \ E |\n                            |            +---+\n                      \
    \      |\n         +---+    cmd    +---+    2      +---+\n         | B |---------->|\
    \ W |---------->| S |\n         +---+           +---+           +---+\n      \
    \                      |\n                            |     4,5    +---+\n   \
    \                          ----------->| F |\n                               \
    \          +---+\n         This diagram models the commands:\n            HELO,\
    \ MAIL, RCPT, RSET, SEND, SOML, SAML, VRFY, EXPN, HELP,\n            NOOP, QUIT,\
    \ TURN.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \    A more complex diagram models the DATA command:\n         +---+   DATA  \
    \  +---+ 1,2                 +---+\n         | B |---------->| W |-------------------->|\
    \ E |\n         +---+           +---+        ------------>+---+\n            \
    \             3| |4,5     |\n                          | |        |\n        \
    \    --------------   -----   |\n           |                      |  |      \
    \       +---+\n           |               ----------     -------->| S |\n    \
    \       |              |       |      |         +---+\n           |          \
    \    |  ------------\n           |              | |     |\n           V      \
    \     1,3| |2    |\n         +---+   data    +---+     --------------->+---+\n\
    \         |   |---------->| W |                     | F |\n         +---+    \
    \       +---+-------------------->+---+\n                              4,5\n \
    \        Note that the \"data\" here is a series of lines sent from the\n    \
    \     sender to the receiver with no response expected until the last\n      \
    \   line is sent.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n   4.5.\
    \  DETAILS\n      4.5.1.  MINIMUM IMPLEMENTATION\n         In order to make SMTP\
    \ workable, the following minimum\n         implementation is required for all\
    \ receivers:\n            COMMANDS -- HELO\n                        MAIL\n   \
    \                     RCPT\n                        DATA\n                   \
    \     RSET\n                        NOOP\n                        QUIT\n     \
    \ 4.5.2.  TRANSPARENCY\n         Without some provision for data transparency\
    \ the character\n         sequence \"<CRLF>.<CRLF>\" ends the mail text and cannot\
    \ be sent\n         by the user.  In general, users are not aware of such\n  \
    \       \"forbidden\" sequences.  To allow all user composed text to be\n    \
    \     transmitted transparently the following procedures are used.\n         \
    \   1. Before sending a line of mail text the sender-SMTP checks\n           \
    \ the first character of the line.  If it is a period, one\n            additional\
    \ period is inserted at the beginning of the line.\n            2. When a line\
    \ of mail text is received by the receiver-SMTP\n            it checks the line.\
    \  If the line is composed of a single\n            period it is the end of mail.\
    \  If the first character is a\n            period and there are other characters\
    \ on the line, the first\n            character is deleted.\n         The mail\
    \ data may contain any of the 128 ASCII characters.  All\n         characters\
    \ are to be delivered to the recipient's mailbox\n         including format effectors\
    \ and other control characters.  If\n         the transmission channel provides\
    \ an 8-bit byte (octets) data\n         stream, the 7-bit ASCII codes are transmitted\
    \ right justified\n         in the octets with the high order bits cleared to\
    \ zero.\n            In some systems it may be necessary to transform the data\
    \ as\n            it is received and stored.  This may be necessary for hosts\n\
    \            that use a different character set than ASCII as their local\n  \
    \          character set, or that store data in records rather than\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \          strings.  If such transforms are necessary, they must be\n        \
    \    reversible -- especially if such transforms are applied to\n            mail\
    \ being relayed.\n      4.5.3.  SIZES\n         There are several objects that\
    \ have required minimum maximum\n         sizes.  That is, every implementation\
    \ must be able to receive\n         objects of at least these sizes, but must\
    \ not send objects\n         larger than these sizes.\n          ****************************************************\n\
    \          *                                                  *\n          * \
    \ TO THE MAXIMUM EXTENT POSSIBLE, IMPLEMENTATION  *\n          *  TECHNIQUES WHICH\
    \ IMPOSE NO LIMITS ON THE LENGTH *\n          *  OF THESE OBJECTS SHOULD BE USED.\
    \                *\n          *                                              \
    \    *\n          ****************************************************\n     \
    \       user\n               The maximum total length of a user name is 64 characters.\n\
    \            domain\n               The maximum total length of a domain name\
    \ or number is 64\n               characters.\n            path\n            \
    \   The maximum total length of a reverse-path or\n               forward-path\
    \ is 256 characters (including the punctuation\n               and element separators).\n\
    \            command line\n               The maximum total length of a command\
    \ line including the\n               command word and the <CRLF> is 512 characters.\n\
    \            reply line\n               The maximum total length of a reply line\
    \ including the\n               reply code and the <CRLF> is 512 characters.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \        text line\n               The maximum total length of a text line including\
    \ the\n               <CRLF> is 1000 characters (but not counting the leading\n\
    \               dot duplicated for transparency).\n            recipients buffer\n\
    \               The maximum total number of recipients that must be\n        \
    \       buffered is 100 recipients.\n          ****************************************************\n\
    \          *                                                  *\n          * \
    \ TO THE MAXIMUM EXTENT POSSIBLE, IMPLEMENTATION  *\n          *  TECHNIQUES WHICH\
    \ IMPOSE NO LIMITS ON THE LENGTH *\n          *  OF THESE OBJECTS SHOULD BE USED.\
    \                *\n          *                                              \
    \    *\n          ****************************************************\n     \
    \    Errors due to exceeding these limits may be reported by using\n         the\
    \ reply codes, for example:\n            500 Line too long.\n            501 Path\
    \ too long\n            552 Too many recipients.\n            552 Too much mail\
    \ data.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n"
- title: APPENDIX A
  contents:
  - "APPENDIX A\n   TCP Transport service\n      The Transmission Control Protocol\
    \ [3] is used in the ARPA\n      Internet, and in any network following the US\
    \ DoD standards for\n      internetwork protocols.\n      Connection Establishment\n\
    \         The SMTP transmission channel is a TCP connection established\n    \
    \     between the sender process port U and the receiver process port\n      \
    \   L.  This single full duplex connection is used as the\n         transmission\
    \ channel.  This protocol is assigned the service\n         port 25 (31 octal),\
    \ that is L=25.\n      Data Transfer\n         The TCP connection supports the\
    \ transmission of 8-bit bytes.\n         The SMTP data is 7-bit ASCII characters.\
    \  Each character is\n         transmitted as an 8-bit byte with the high-order\
    \ bit cleared to\n         zero.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n"
- title: APPENDIX B
  contents:
  - "APPENDIX B\n   NCP Transport service\n      The ARPANET Host-to-Host Protocol\
    \ [4] (implemented by the Network\n      Control Program) may be used in the ARPANET.\n\
    \      Connection Establishment\n         The SMTP transmission channel is established\
    \ via NCP between\n         the sender process socket U and receiver process socket\
    \ L.  The\n         Initial Connection Protocol [5] is followed resulting in a\
    \ pair\n         of simplex connections.  This pair of connections is used as\n\
    \         the transmission channel.  This protocol is assigned the\n         contact\
    \ socket 25 (31 octal), that is L=25.\n      Data Transfer\n         The NCP data\
    \ connections are established in 8-bit byte mode.\n         The SMTP data is 7-bit\
    \ ASCII characters.  Each character is\n         transmitted as an 8-bit byte\
    \ with the high-order bit cleared to\n         zero.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n"
- title: APPENDIX C
  contents:
  - "APPENDIX C\n   NITS\n      The Network Independent Transport Service [6] may\
    \ be used.\n      Connection Establishment\n         The SMTP transmission channel\
    \ is established via NITS between\n         the sender process and receiver process.\
    \  The sender process\n         executes the CONNECT primitive, and the waiting\
    \ receiver\n         process executes the ACCEPT primitive.\n      Data Transfer\n\
    \         The NITS connection supports the transmission of 8-bit bytes.\n    \
    \     The SMTP data is 7-bit ASCII characters.  Each character is\n         transmitted\
    \ as an 8-bit byte with the high-order bit cleared to\n         zero.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n"
- title: APPENDIX D
  contents:
  - "APPENDIX D\n   X.25 Transport service\n      It may be possible to use the X.25\
    \ service [7] as provided by the\n      Public Data Networks directly, however,\
    \ it is suggested that a\n      reliable end-to-end protocol such as TCP be used\
    \ on top of X.25\n      connections.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n"
- title: APPENDIX E
  contents:
  - "APPENDIX E\n   Theory of Reply Codes\n      The three digits of the reply each\
    \ have a special significance.\n      The first digit denotes whether the response\
    \ is good, bad or\n      incomplete.  An unsophisticated sender-SMTP will be able\
    \ to\n      determine its next action (proceed as planned, redo, retrench,\n \
    \     etc.) by simply examining this first digit.  A sender-SMTP that\n      wants\
    \ to know approximately what kind of error occurred (e.g.,\n      mail system\
    \ error, command syntax error) may examine the second\n      digit, reserving\
    \ the third digit for the finest gradation of\n      information.\n         There\
    \ are five values for the first digit of the reply code:\n            1yz   Positive\
    \ Preliminary reply\n               The command has been accepted, but the requested\
    \ action\n               is being held in abeyance, pending confirmation of the\n\
    \               information in this reply.  The sender-SMTP should send\n    \
    \           another command specifying whether to continue or abort\n        \
    \       the action.\n                  [Note: SMTP does not have any commands\
    \ that allow this\n                  type of reply, and so does not have the continue\
    \ or\n                  abort commands.]\n            2yz   Positive Completion\
    \ reply\n               The requested action has been successfully completed.\
    \  A\n               new request may be initiated.\n            3yz   Positive\
    \ Intermediate reply\n               The command has been accepted, but the requested\
    \ action\n               is being held in abeyance, pending receipt of further\n\
    \               information.  The sender-SMTP should send another command\n  \
    \             specifying this information.  This reply is used in\n          \
    \     command sequence groups.\n            4yz   Transient Negative Completion\
    \ reply\n               The command was not accepted and the requested action\
    \ did\n               not occur.  However, the error condition is temporary and\n\
    \               the action may be requested again.  The sender should\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \           return to the beginning of the command sequence (if any).\n      \
    \         It is difficult to assign a meaning to \"transient\" when\n        \
    \       two different sites (receiver- and sender- SMTPs) must\n             \
    \  agree on the interpretation.  Each reply in this category\n               might\
    \ have a different time value, but the sender-SMTP is\n               encouraged\
    \ to try again.  A rule of thumb to determine if\n               a reply fits\
    \ into the 4yz or the 5yz category (see below)\n               is that replies\
    \ are 4yz if they can be repeated without\n               any change in command\
    \ form or in properties of the sender\n               or receiver.  (E.g., the\
    \ command is repeated identically\n               and the receiver does not put\
    \ up a new implementation.)\n            5yz   Permanent Negative Completion reply\n\
    \               The command was not accepted and the requested action did\n  \
    \             not occur.  The sender-SMTP is discouraged from repeating\n    \
    \           the exact request (in the same sequence).  Even some\n           \
    \    \"permanent\" error conditions can be corrected, so the\n               human\
    \ user may want to direct the sender-SMTP to\n               reinitiate the command\
    \ sequence by direct action at some\n               point in the future (e.g.,\
    \ after the spelling has been\n               changed, or the user has altered\
    \ the account status).\n         The second digit encodes responses in specific\
    \ categories:\n            x0z   Syntax -- These replies refer to syntax errors,\n\
    \                  syntactically correct commands that don't fit any\n       \
    \           functional category, and unimplemented or superfluous\n          \
    \        commands.\n            x1z   Information --  These are replies to requests\
    \ for\n                  information, such as status or help.\n            x2z\
    \   Connections -- These are replies referring to the\n                  transmission\
    \ channel.\n            x3z   Unspecified as yet.\n            x4z   Unspecified\
    \ as yet.\n            x5z   Mail system -- These replies indicate the status\
    \ of\n                  the receiver mail system vis-a-vis the requested\n   \
    \               transfer or other mail system action.\n         The third digit\
    \ gives a finer gradation of meaning in each\n         category specified by the\
    \ second digit.  The list of replies\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \       illustrates this.  Each reply text is recommended rather than\n      \
    \   mandatory, and may even change according to the command with\n         which\
    \ it is associated.  On the other hand, the reply codes\n         must strictly\
    \ follow the specifications in this section.\n         Receiver implementations\
    \ should not invent new codes for\n         slightly different situations from\
    \ the ones described here, but\n         rather adapt codes already defined.\n\
    \         For example, a command such as NOOP whose successful execution\n   \
    \      does not offer the sender-SMTP any new information will return\n      \
    \   a 250 reply.  The response is 502 when the command requests an\n         unimplemented\
    \ non-site-specific action.  A refinement of that\n         is the 504 reply for\
    \ a command that is implemented, but that\n         requests an unimplemented\
    \ parameter.\n      The reply text may be longer than a single line; in these\
    \ cases\n      the complete text must be marked so the sender-SMTP knows when\
    \ it\n      can stop reading the reply.  This requires a special format to\n \
    \     indicate a multiple line reply.\n         The format for multiline replies\
    \ requires that every line,\n         except the last, begin with the reply code,\
    \ followed\n         immediately by a hyphen, \"-\" (also known as minus), followed\
    \ by\n         text.  The last line will begin with the reply code, followed\n\
    \         immediately by <SP>, optionally some text, and <CRLF>.\n           \
    \ For example:\n                                123-First line\n             \
    \                   123-Second line\n                                123-234 text\
    \ beginning with numbers\n                                123 The last line\n\
    \         In many cases the sender-SMTP then simply needs to search for\n    \
    \     the reply code followed by <SP> at the beginning of a line, and\n      \
    \   ignore all preceding lines.  In a few cases, there is important\n        \
    \ data for the sender in the reply \"text\".  The sender will know\n         these\
    \ cases from the current context.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n"
- title: APPENDIX F
  contents:
  - "APPENDIX F\n   Scenarios\n      This section presents complete scenarios of several\
    \ types of SMTP\n      sessions.\n   A Typical SMTP Transaction Scenario\n   \
    \   This SMTP example shows mail sent by Smith at host USC-ISIF, to\n      Jones,\
    \ Green, and Brown at host BBN-UNIX.  Here we assume that\n      host USC-ISIF\
    \ contacts host BBN-UNIX directly.  The mail is\n      accepted for Jones and\
    \ Brown.  Green does not have a mailbox at\n      host BBN-UNIX.\n      -------------------------------------------------------------\n\
    \         R: 220 BBN-UNIX.ARPA Simple Mail Transfer Service Ready\n         S:\
    \ HELO USC-ISIF.ARPA\n         R: 250 BBN-UNIX.ARPA\n         S: MAIL FROM:<Smith@USC-ISIF.ARPA>\n\
    \         R: 250 OK\n         S: RCPT TO:<Jones@BBN-UNIX.ARPA>\n         R: 250\
    \ OK\n         S: RCPT TO:<Green@BBN-UNIX.ARPA>\n         R: 550 No such user\
    \ here\n         S: RCPT TO:<Brown@BBN-UNIX.ARPA>\n         R: 250 OK\n      \
    \   S: DATA\n         R: 354 Start mail input; end with <CRLF>.<CRLF>\n      \
    \   S: Blah blah blah...\n         S: ...etc. etc. etc.\n         S: .\n     \
    \    R: 250 OK\n         S: QUIT\n         R: 221 BBN-UNIX.ARPA Service closing\
    \ transmission channel\n                               Scenario 1\n      -------------------------------------------------------------\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \ Aborted SMTP Transaction Scenario\n      -------------------------------------------------------------\n\
    \         R: 220 MIT-Multics.ARPA Simple Mail Transfer Service Ready\n       \
    \  S: HELO ISI-VAXA.ARPA\n         R: 250 MIT-Multics.ARPA\n         S: MAIL FROM:<Smith@ISI-VAXA.ARPA>\n\
    \         R: 250 OK\n         S: RCPT TO:<Jones@MIT-Multics.ARPA>\n         R:\
    \ 250 OK\n         S: RCPT TO:<Green@MIT-Multics.ARPA>\n         R: 550 No such\
    \ user here\n         S: RSET\n         R: 250 OK\n         S: QUIT\n        \
    \ R: 221 MIT-Multics.ARPA Service closing transmission channel\n             \
    \                  Scenario 2\n      -------------------------------------------------------------\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n   Relayed\
    \ Mail Scenario\n      -------------------------------------------------------------\n\
    \         Step 1  --  Source Host to Relay Host\n            R: 220 USC-ISIE.ARPA\
    \ Simple Mail Transfer Service Ready\n            S: HELO MIT-AI.ARPA\n      \
    \      R: 250 USC-ISIE.ARPA\n            S: MAIL FROM:<JQP@MIT-AI.ARPA>\n    \
    \        R: 250 OK\n            S: RCPT TO:<@USC-ISIE.ARPA:Jones@BBN-VAX.ARPA>\n\
    \            R: 250 OK\n            S: DATA\n            R: 354 Start mail input;\
    \ end with <CRLF>.<CRLF>\n            S: Date: 2 Nov 81 22:33:44\n           \
    \ S: From: John Q. Public <JQP@MIT-AI.ARPA>\n            S: Subject:  The Next\
    \ Meeting of the Board\n            S: To: Jones@BBN-Vax.ARPA\n            S:\n\
    \            S: Bill:\n            S: The next meeting of the board of directors\
    \ will be\n            S: on Tuesday.\n            S:                        \
    \                      John.\n            S: .\n            R: 250 OK\n      \
    \      S: QUIT\n            R: 221 USC-ISIE.ARPA Service closing transmission\
    \ channel\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \       Step 2  --  Relay Host to Destination Host\n            R: 220 BBN-VAX.ARPA\
    \ Simple Mail Transfer Service Ready\n            S: HELO USC-ISIE.ARPA\n    \
    \        R: 250 BBN-VAX.ARPA\n            S: MAIL FROM:<@USC-ISIE.ARPA:JQP@MIT-AI.ARPA>\n\
    \            R: 250 OK\n            S: RCPT TO:<Jones@BBN-VAX.ARPA>\n        \
    \    R: 250 OK\n            S: DATA\n            R: 354 Start mail input; end\
    \ with <CRLF>.<CRLF>\n            S: Received: from MIT-AI.ARPA by USC-ISIE.ARPA\
    \ ;\n               2 Nov 81 22:40:10 UT\n            S: Date: 2 Nov 81 22:33:44\n\
    \            S: From: John Q. Public <JQP@MIT-AI.ARPA>\n            S: Subject:\
    \  The Next Meeting of the Board\n            S: To: Jones@BBN-Vax.ARPA\n    \
    \        S:\n            S: Bill:\n            S: The next meeting of the board\
    \ of directors will be\n            S: on Tuesday.\n            S:           \
    \                                   John.\n            S: .\n            R: 250\
    \ OK\n            S: QUIT\n            R: 221 USC-ISIE.ARPA Service closing transmission\
    \ channel\n                               Scenario 3\n      -------------------------------------------------------------\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n   Verifying\
    \ and Sending Scenario\n      -------------------------------------------------------------\n\
    \         R: 220 SU-SCORE.ARPA Simple Mail Transfer Service Ready\n         S:\
    \ HELO MIT-MC.ARPA\n         R: 250 SU-SCORE.ARPA\n         S: VRFY Crispin\n\
    \         R: 250 Mark Crispin <Admin.MRC@SU-SCORE.ARPA>\n         S: SEND FROM:<EAK@MIT-MC.ARPA>\n\
    \         R: 250 OK\n         S: RCPT TO:<Admin.MRC@SU-SCORE.ARPA>\n         R:\
    \ 250 OK\n         S: DATA\n         R: 354 Start mail input; end with <CRLF>.<CRLF>\n\
    \         S: Blah blah blah...\n         S: ...etc. etc. etc.\n         S: .\n\
    \         R: 250 OK\n         S: QUIT\n         R: 221 SU-SCORE.ARPA Service closing\
    \ transmission channel\n                               Scenario 4\n      -------------------------------------------------------------\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \ Sending and Mailing Scenarios\n      First the user's name is verified, then\
    \  an attempt is made to\n      send to the user's terminal.  When that fails,\
    \ the messages is\n      mailed to the user's mailbox.\n      -------------------------------------------------------------\n\
    \         R: 220 SU-SCORE.ARPA Simple Mail Transfer Service Ready\n         S:\
    \ HELO MIT-MC.ARPA\n         R: 250 SU-SCORE.ARPA\n         S: VRFY Crispin\n\
    \         R: 250 Mark Crispin <Admin.MRC@SU-SCORE.ARPA>\n         S: SEND FROM:<EAK@MIT-MC.ARPA>\n\
    \         R: 250 OK\n         S: RCPT TO:<Admin.MRC@SU-SCORE.ARPA>\n         R:\
    \ 450 User not active now\n         S: RSET\n         R: 250 OK\n         S: MAIL\
    \ FROM:<EAK@MIT-MC.ARPA>\n         R: 250 OK\n         S: RCPT TO:<Admin.MRC@SU-SCORE.ARPA>\n\
    \         R: 250 OK\n         S: DATA\n         R: 354 Start mail input; end with\
    \ <CRLF>.<CRLF>\n         S: Blah blah blah...\n         S: ...etc. etc. etc.\n\
    \         S: .\n         R: 250 OK\n         S: QUIT\n         R: 221 SU-SCORE.ARPA\
    \ Service closing transmission channel\n                               Scenario\
    \ 5\n      -------------------------------------------------------------\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \  Doing the preceding scenario more efficiently.\n      -------------------------------------------------------------\n\
    \         R: 220 SU-SCORE.ARPA Simple Mail Transfer Service Ready\n         S:\
    \ HELO MIT-MC.ARPA\n         R: 250 SU-SCORE.ARPA\n         S: VRFY Crispin\n\
    \         R: 250 Mark Crispin <Admin.MRC@SU-SCORE.ARPA>\n         S: SOML FROM:<EAK@MIT-MC.ARPA>\n\
    \         R: 250 OK\n         S: RCPT TO:<Admin.MRC@SU-SCORE.ARPA>\n         R:\
    \ 250 User not active now, so will do mail.\n         S: DATA\n         R: 354\
    \ Start mail input; end with <CRLF>.<CRLF>\n         S: Blah blah blah...\n  \
    \       S: ...etc. etc. etc.\n         S: .\n         R: 250 OK\n         S: QUIT\n\
    \         R: 221 SU-SCORE.ARPA Service closing transmission channel\n        \
    \                       Scenario 6\n      -------------------------------------------------------------\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \ Mailing List Scenario\n      First each of two mailing lists are expanded in\
    \ separate sessions\n      with different hosts.  Then the message is sent to\
    \ everyone that\n      appeared on either list (but no duplicates) via a relay\
    \ host.\n      -------------------------------------------------------------\n\
    \         Step 1  --  Expanding the First List\n            R: 220 MIT-AI.ARPA\
    \ Simple Mail Transfer Service Ready\n            S: HELO SU-SCORE.ARPA\n    \
    \        R: 250 MIT-AI.ARPA\n            S: EXPN Example-People\n            R:\
    \ 250-<ABC@MIT-MC.ARPA>\n            R: 250-Fred Fonebone <Fonebone@USC-ISIQ.ARPA>\n\
    \            R: 250-Xenon Y. Zither <XYZ@MIT-AI.ARPA>\n            R: 250-Quincy\
    \ Smith <@USC-ISIF.ARPA:Q-Smith@ISI-VAXA.ARPA>\n            R: 250-<joe@foo-unix.ARPA>\n\
    \            R: 250 <xyz@bar-unix.ARPA>\n            S: QUIT\n            R: 221\
    \ MIT-AI.ARPA Service closing transmission channel\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n    \
    \     Step 2  --  Expanding the Second List\n            R: 220 MIT-MC.ARPA Simple\
    \ Mail Transfer Service Ready\n            S: HELO SU-SCORE.ARPA\n           \
    \ R: 250 MIT-MC.ARPA\n            S: EXPN Interested-Parties\n            R: 250-Al\
    \ Calico <ABC@MIT-MC.ARPA>\n            R: 250-<XYZ@MIT-AI.ARPA>\n           \
    \ R: 250-Quincy Smith <@USC-ISIF.ARPA:Q-Smith@ISI-VAXA.ARPA>\n            R: 250-<fred@BBN-UNIX.ARPA>\n\
    \            R: 250 <xyz@bar-unix.ARPA>\n            S: QUIT\n            R: 221\
    \ MIT-MC.ARPA Service closing transmission channel\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \       Step 3  --  Mailing to All via a Relay Host\n            R: 220 USC-ISIE.ARPA\
    \ Simple Mail Transfer Service Ready\n            S: HELO SU-SCORE.ARPA\n    \
    \        R: 250 USC-ISIE.ARPA\n            S: MAIL FROM:<Account.Person@SU-SCORE.ARPA>\n\
    \            R: 250 OK\n            S: RCPT TO:<@USC-ISIE.ARPA:ABC@MIT-MC.ARPA>\n\
    \            R: 250 OK\n            S: RCPT TO:<@USC-ISIE.ARPA:Fonebone@USC-ISIQA.ARPA>\n\
    \            R: 250 OK\n            S: RCPT TO:<@USC-ISIE.ARPA:XYZ@MIT-AI.ARPA>\n\
    \            R: 250 OK\n            S: RCPT\n                TO:<@USC-ISIE.ARPA,@USC-ISIF.ARPA:Q-Smith@ISI-VAXA.ARPA>\n\
    \            R: 250 OK\n            S: RCPT TO:<@USC-ISIE.ARPA:joe@FOO-UNIX.ARPA>\n\
    \            R: 250 OK\n            S: RCPT TO:<@USC-ISIE.ARPA:xyz@BAR-UNIX.ARPA>\n\
    \            R: 250 OK\n            S: RCPT TO:<@USC-ISIE.ARPA:fred@BBN-UNIX.ARPA>\n\
    \            R: 250 OK\n            S: DATA\n            R: 354 Start mail input;\
    \ end with <CRLF>.<CRLF>\n            S: Blah blah blah...\n            S: ...etc.\
    \ etc. etc.\n            S: .\n            R: 250 OK\n            S: QUIT\n  \
    \          R: 221 USC-ISIE.ARPA Service closing transmission channel\n       \
    \                        Scenario 7\n      -------------------------------------------------------------\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n   Forwarding\
    \ Scenarios\n      -------------------------------------------------------------\n\
    \         R: 220 USC-ISIF.ARPA Simple Mail Transfer Service Ready\n         S:\
    \ HELO LBL-UNIX.ARPA\n         R: 250 USC-ISIF.ARPA\n         S: MAIL FROM:<mo@LBL-UNIX.ARPA>\n\
    \         R: 250 OK\n         S: RCPT TO:<fred@USC-ISIF.ARPA>\n         R: 251\
    \ User not local; will forward to <Jones@USC-ISI.ARPA>\n         S: DATA\n   \
    \      R: 354 Start mail input; end with <CRLF>.<CRLF>\n         S: Blah blah\
    \ blah...\n         S: ...etc. etc. etc.\n         S: .\n         R: 250 OK\n\
    \         S: QUIT\n         R: 221 USC-ISIF.ARPA Service closing transmission\
    \ channel\n                               Scenario 8\n      -------------------------------------------------------------\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \    -------------------------------------------------------------\n         Step\
    \ 1  --  Trying the Mailbox at the First Host\n            R: 220 USC-ISIF.ARPA\
    \ Simple Mail Transfer Service Ready\n            S: HELO LBL-UNIX.ARPA\n    \
    \        R: 250 USC-ISIF.ARPA\n            S: MAIL FROM:<mo@LBL-UNIX.ARPA>\n \
    \           R: 250 OK\n            S: RCPT TO:<fred@USC-ISIF.ARPA>\n         \
    \   R: 251 User not local; will forward to <Jones@USC-ISI.ARPA>\n            S:\
    \ RSET\n            R: 250 OK\n            S: QUIT\n            R: 221 USC-ISIF.ARPA\
    \ Service closing transmission channel\n         Step 2  --  Delivering the Mail\
    \ at the Second Host\n            R: 220 USC-ISI.ARPA Simple Mail Transfer Service\
    \ Ready\n            S: HELO LBL-UNIX.ARPA\n            R: 250 USC-ISI.ARPA\n\
    \            S: MAIL FROM:<mo@LBL-UNIX.ARPA>\n            R: 250 OK\n        \
    \    S: RCPT TO:<Jones@USC-ISI.ARPA>\n            R: OK\n            S: DATA\n\
    \            R: 354 Start mail input; end with <CRLF>.<CRLF>\n            S: Blah\
    \ blah blah...\n            S: ...etc. etc. etc.\n            S: .\n         \
    \   R: 250 OK\n            S: QUIT\n            R: 221 USC-ISI.ARPA Service closing\
    \ transmission channel\n                               Scenario 9\n      -------------------------------------------------------------\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n   Too\
    \ Many Recipients Scenario\n      -------------------------------------------------------------\n\
    \         R: 220 BERKELEY.ARPA Simple Mail Transfer Service Ready\n         S:\
    \ HELO USC-ISIF.ARPA\n         R: 250 BERKELEY.ARPA\n         S: MAIL FROM:<Postel@USC-ISIF.ARPA>\n\
    \         R: 250 OK\n         S: RCPT TO:<fabry@BERKELEY.ARPA>\n         R: 250\
    \ OK\n         S: RCPT TO:<eric@BERKELEY.ARPA>\n         R: 552 Recipient storage\
    \ full, try again in another transaction\n         S: DATA\n         R: 354 Start\
    \ mail input; end with <CRLF>.<CRLF>\n         S: Blah blah blah...\n        \
    \ S: ...etc. etc. etc.\n         S: .\n         R: 250 OK\n         S: MAIL FROM:<Postel@USC-ISIF.ARPA>\n\
    \         R: 250 OK\n         S: RCPT TO:<eric@BERKELEY.ARPA>\n         R: 250\
    \ OK\n         S: DATA\n         R: 354 Start mail input; end with <CRLF>.<CRLF>\n\
    \         S: Blah blah blah...\n         S: ...etc. etc. etc.\n         S: .\n\
    \         R: 250 OK\n         S: QUIT\n         R: 221 BERKELEY.ARPA Service closing\
    \ transmission channel\n                              Scenario 10\n      -------------------------------------------------------------\n\
    \      Note that a real implementation must handle many recipients as\n      specified\
    \ in Section 4.5.3.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n"
- title: GLOSSARY
  contents:
  - "GLOSSARY\n   ASCII\n      American Standard Code for Information Interchange\
    \ [1].\n   command\n      A request for a mail service action sent by the sender-SMTP\
    \ to the\n      receiver-SMTP.\n   domain\n      The hierarchially structured\
    \ global character string address of a\n      host computer in the mail system.\n\
    \   end of mail data indication\n      A special sequence of characters that indicates\
    \ the end of the\n      mail data.  In particular, the five characters carriage\
    \ return,\n      line feed, period, carriage return, line feed, in that order.\n\
    \   host\n      A computer in the internetwork environment on which mailboxes\
    \ or\n      SMTP processes reside.\n   line\n      A a sequence of ASCII characters\
    \ ending with a <CRLF>.\n   mail data\n      A sequence of ASCII characters of\
    \ arbitrary length, which conforms\n      to the standard set in the Standard\
    \ for the Format of ARPA\n      Internet Text Messages (RFC 822 [2]).\n   mailbox\n\
    \      A character string (address) which identifies a user to whom mail\n   \
    \   is to be sent.  Mailbox normally consists of the host and user\n      specifications.\
    \  The standard mailbox naming convention is defined\n      to be \"user@domain\"\
    .  Additionally, the \"container\" in which mail\n      is stored.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n   receiver-SMTP\
    \ process\n      A process which transfers mail in cooperation with a sender-SMTP\n\
    \      process.  It waits for a connection to be established via the\n      transport\
    \ service.  It receives SMTP commands from the\n      sender-SMTP, sends replies,\
    \ and performs the specified operations.\n   reply\n      A reply is an acknowledgment\
    \ (positive or negative) sent from\n      receiver to sender via the transmission\
    \ channel in response to a\n      command.  The general form of a reply is a completion\
    \ code\n      (including error codes) followed by a text string.  The codes are\n\
    \      for use by programs and the text is usually intended for human\n      users.\n\
    \   sender-SMTP process\n      A process which transfers mail in cooperation with\
    \ a receiver-SMTP\n      process.  A local language may be used in the user interface\n\
    \      command/reply dialogue.  The sender-SMTP initiates the transport\n    \
    \  service connection.  It initiates SMTP commands, receives replies,\n      and\
    \ governs the transfer of mail.\n   session\n      The set of exchanges that occur\
    \ while the transmission channel is\n      open.\n   transaction\n      The set\
    \ of exchanges required for one message to be transmitted\n      for one or more\
    \ recipients.\n   transmission channel\n      A full-duplex communication path\
    \ between a sender-SMTP and a\n      receiver-SMTP for the exchange of commands,\
    \ replies, and mail\n      text.\n   transport service\n      Any reliable stream-oriented\
    \ data communication services.  For\n      example, NCP, TCP, NITS.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \ user\n      A human being (or a process on behalf of a human being) wishing\
    \ to\n      obtain mail transfer service.  In addition, a recipient of\n     \
    \ computer mail.\n   word\n      A sequence of printing characters.\n   <CRLF>\n\
    \      The characters carriage return and line feed (in that order).\n   <SP>\n\
    \      The space character.\n"
- title: RFC 821                                                      August 1982
  contents:
  - "RFC 821                                                      August 1982\n  \
    \                                         Simple Mail Transfer Protocol\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n   [1]  ASCII\n      ASCII, \"USA Code for Information Interchange\"\
    , United States of\n      America Standards Institute, X3.4, 1968.  Also in: \
    \ Feinler, E.\n      and J. Postel, eds., \"ARPANET Protocol Handbook\", NIC 7104,\
    \ for\n      the Defense Communications Agency by SRI International, Menlo\n \
    \     Park, California, Revised January 1978.\n   [2]  RFC 822\n      Crocker,\
    \ D., \"Standard for the Format of ARPA Internet Text\n      Messages,\" RFC 822,\
    \ Department of Electrical Engineering,\n      University of Delaware, August\
    \ 1982.\n   [3]  TCP\n      Postel, J., ed., \"Transmission Control Protocol -\
    \ DARPA Internet\n      Program Protocol Specification\", RFC 793, USC/Information\
    \ Sciences\n      Institute, NTIS AD Number A111091, September 1981.  Also in:\n\
    \      Feinler, E. and J. Postel, eds., \"Internet Protocol Transition\n     \
    \ Workbook\", SRI International, Menlo Park, California, March 1982.\n   [4] \
    \ NCP\n      McKenzie,A., \"Host/Host Protocol for the ARPA Network\", NIC 8246,\n\
    \      January 1972.  Also in:  Feinler, E. and J. Postel, eds., \"ARPANET\n \
    \     Protocol Handbook\", NIC 7104, for the Defense Communications\n      Agency\
    \ by SRI International, Menlo Park, California, Revised\n      January 1978.\n\
    \   [5]  Initial Connection Protocol\n      Postel, J., \"Official Initial Connection\
    \ Protocol\", NIC 7101,\n      11 June 1971.  Also in:  Feinler, E. and J. Postel,\
    \ eds., \"ARPANET\n      Protocol Handbook\", NIC 7104, for the Defense Communications\n\
    \      Agency by SRI International, Menlo Park, California, Revised\n      January\
    \ 1978.\n   [6]  NITS\n      PSS/SG3, \"A Network Independent Transport Service\"\
    , Study Group 3,\n      The Post Office PSS Users Group, February 1980.  Available\
    \ from\n      the DCPU, National Physical Laboratory, Teddington, UK.\n"
- title: August 1982                                                      RFC 821
  contents:
  - 'August 1982                                                      RFC 821

    '
- title: Simple Mail Transfer Protocol
  contents:
  - "Simple Mail Transfer Protocol                                           \n  \
    \ [7]  X.25\n      CCITT, \"Recommendation X.25 - Interface Between Data Terminal\n\
    \      Equipment (DTE) and Data Circuit-terminating Equipment (DCE) for\n    \
    \  Terminals Operating in the Packet Mode on Public Data Networks,\"\n      CCITT\
    \ Orange Book, Vol. VIII.2, International Telephone and\n      Telegraph Consultative\
    \ Committee, Geneva, 1976.\n"
