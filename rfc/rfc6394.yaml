- title: __initial_text__
  contents:
  - "        Use Cases and Requirements for DNS-Based Authentication\n           \
    \             of Named Entities (DANE)\n"
- title: Abstract
  contents:
  - "Abstract\n   Many current applications use the certificate-based authentication\n\
    \   features in Transport Layer Security (TLS) to allow clients to verify\n  \
    \ that a connected server properly represents a desired domain name.\n   Typically,\
    \ this authentication has been based on PKIX certificate\n   chains rooted in\
    \ well-known certificate authorities (CAs), but\n   additional information can\
    \ be provided via the DNS itself.  This\n   document describes a set of use cases\
    \ in which the DNS and DNS\n   Security Extensions (DNSSEC) could be used to make\
    \ assertions that\n   support the TLS authentication process.  The main focus\
    \ of this\n   document is TLS server authentication, but it also covers TLS client\n\
    \   authentication for applications where TLS clients are identified by\n   domain\
    \ names.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6394.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Definitions .....................................................4\n  \
    \ 3. Use Cases .......................................................4\n    \
    \  3.1. CA Constraints .............................................5\n      3.2.\
    \ Service Certificate Constraints ............................6\n      3.3. Trust\
    \ Anchor Assertion and Domain-Issued Certificates ......7\n      3.4. Delegated\
    \ Services .........................................9\n   4. Other Requirements\
    \ .............................................10\n   5. Acknowledgements ...............................................11\n\
    \   6. Security Considerations ........................................11\n  \
    \ 7. References .....................................................11\n    \
    \  7.1. Normative References ......................................11\n      7.2.\
    \ Informative References ....................................12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Transport Layer Security (TLS) is used as the basis for\
    \ security\n   features in many modern Internet application service protocols\
    \ to\n   provide secure client-server connections [RFC5246].  It underlies\n \
    \  secure HTTP and secure email [RFC2818] [RFC2595] [RFC3207], and\n   provides\
    \ hop-by-hop security in real-time multimedia and instant-\n   messaging protocols\
    \ [RFC3261] [RFC6120].\n   Application service clients typically establish TLS\
    \ connections to\n   application servers identified by DNS domain names.  The\
    \ process of\n   obtaining this \"source\" domain is application specific [RFC6125].\n\
    \   The name could be entered by a user or found through an automated\n   discovery\
    \ process such as an SRV or NAPTR record.  After obtaining\n   the address of\
    \ the server via an A or AAAA DNS record, the client\n   conducts a TLS handshake\
    \ with the server, during which the server\n   presents a PKIX certificate [RFC5280].\
    \  The TLS layer performs PKIX\n   validation of the certificate, including verification\
    \ that the\n   certificate chains to one of the client's trust anchors.  If this\n\
    \   validation is successful, then the application layer determines\n   whether\
    \ the DNS name for the application service presented in the\n   certificate matches\
    \ the source domain name [RFC6125].  Typically, if\n   the name matches, then\
    \ the client proceeds with the TLS connection.\n   The certificate authorities\
    \ (CAs) that issue PKIX certificates are\n   asserting bindings between domain\
    \ names and the public keys they\n   certify.  Application service clients are\
    \ verifying these bindings\n   and making authorization decisions -- whether to\
    \ proceed with\n   connections -- based on them.\n   Clients thus rely on CAs\
    \ to correctly assert bindings between public\n   keys and domain names, in the\
    \ sense that the holder of the\n   corresponding private key should be the domain\
    \ holder.  Today, an\n   attacker can successfully authenticate as a given application\
    \ service\n   domain if he can obtain a \"mis-issued\" certificate from one of\
    \ the\n   widely used CAs -- a certificate containing the victim application\n\
    \   service's domain name and a public key whose corresponding private\n   key\
    \ is held by the attacker.  If the attacker can additionally insert\n   himself\
    \ as a \"man in the middle\" between a client and server (e.g.,\n   through DNS\
    \ cache poisoning of an A or AAAA record), then the\n   attacker can convince\
    \ the client that a server of the attacker's\n   choice legitimately represents\
    \ the victim's application service.\n   With the advent of DNSSEC [RFC4033], it\
    \ is now possible for DNS name\n   resolution to provide its information securely,\
    \ in the sense that\n   clients can verify that DNS information was provided by\
    \ the domain\n   operator and not tampered with in transit.  The goal of technologies\n\
    \   for DNS-based Authentication of Named Entities (DANE) is to use the\n   DNS\
    \ and DNSSEC to provide additional information about the\n   cryptographic credentials\
    \ associated with a domain, so that clients\n   can use this information to increase\
    \ the level of assurance they\n   receive from the TLS handshake process.  This\
    \ document describes a\n   set of use cases that capture specific goals for using\
    \ the DNS in\n   this way, and a set of requirements that the ultimate DANE mechanism\n\
    \   should satisfy.\n   Finally, it should be noted that although this document\
    \ will\n   frequently use HTTPS as an example application service, DANE is\n \
    \  intended to apply equally to all applications that make use of TLS to\n   connect\
    \ to application services identified by domain names.\n"
- title: 2.  Definitions
  contents:
  - "2.  Definitions\n   This document also makes use of standard PKIX, DNSSEC, and\
    \ TLS\n   terminology.  See RFC 5280 [RFC5280], RFC 4033 [RFC4033], and\n   RFC\
    \ 5246 [RFC5246], respectively, for these terms.  In addition,\n   terms related\
    \ to TLS-protected application services and DNS names are\n   taken from RFC 6125\
    \ [RFC6125].\n   Note in particular that the term \"server\" in this document\
    \ refers to\n   the server role in TLS, rather than to a host.  Multiple servers\
    \ of\n   this type may be co-located on a single physical host, often using\n\
    \   different ports, and each of these can use different certificates.\n   This\
    \ document refers several times to the notion of a \"domain\n   holder\".  This\
    \ term is understood to mean the entity that is\n   authorized to control the\
    \ contents of a particular zone.  For\n   example, the registrants of 2nd- or\
    \ 3rd-level domains are the holders\n   of those domains.  The holder of a particular\
    \ domain is not\n   necessarily the entity that operates the zone.\n   It should\
    \ be noted that the presence of a valid DNSSEC signature in a\n   DNS reply does\
    \ not necessarily imply that the records protected by\n   that signature were\
    \ authorized by the domain holder.  The distinction\n   between the holder of\
    \ a domain and the operator of the corresponding\n   zone has several security\
    \ implications, which are discussed in the\n   individual use cases below.\n"
- title: 3.  Use Cases
  contents:
  - "3.  Use Cases\n   In this section, we describe the major use cases that the DANE\n\
    \   mechanism should support.  This list is not intended to represent all\n  \
    \ possible ways that the DNS can be used to support TLS authentication.\n   Rather,\
    \ it represents the specific cases that comprise the initial\n   goals for DANE.\n\
    \   In the use cases below, we will refer to the following dramatis\n   personae:\n\
    \   Alice:  The operator of a TLS-protected application service on the\n     \
    \ host alice.example.com, and administrator of the corresponding\n      DNS zone.\n\
    \   Bob:  A client connecting to alice.example.com.\n   Charlie:  A well-known\
    \ CA that issues certificates with domain names\n      as identifiers.\n   Oscar:\
    \  An outsourcing provider that operates TLS-protected\n      application services\
    \ on behalf of customers.\n   Trent:  A CA that issues certificates with domain\
    \ names as\n      identifiers, but is not generally well-known.\n   These use\
    \ cases are framed in terms of adding verification steps to\n   TLS server identity\
    \ checking on the part of application service\n   clients.  In application services\
    \ where the clients are also\n   identified by domain names (e.g., Extensible\
    \ Messaging and Presence\n   Protocol (XMPP) server-to-server connections), the\
    \ same\n   considerations and use cases are applicable to the application\n  \
    \ server's checking of identities in TLS client certificates.\n"
- title: 3.1.  CA Constraints
  contents:
  - "3.1.  CA Constraints\n   Alice runs a website on alice.example.com and has obtained\
    \ a\n   certificate from the well-known CA Charlie.  She is concerned that\n \
    \  other well-known CAs might issue certificates for alice.example.com\n   without\
    \ her authorization, which clients would accept.  Alice would\n   like to provide\
    \ a mechanism for visitors to her site to know that\n   they should expect alice.example.com\
    \ to use a certificate issued\n   under the CA that she uses (Charlie) and not\
    \ another CA.  That is,\n   Alice is recommending that the client verify that\
    \ there is a valid\n   certificate chain from the server certificate to Charlie\
    \ before\n   accepting the server certificate.  (For example, in the TLS\n   handshake,\
    \ the server might include Charlie's certificate in the\n   server Certificate\
    \ message's certificate_list structure [RFC5246]).\n   When Bob connects to alice.example.com,\
    \ he uses this mechanism to\n   verify that the certificate presented by the server\
    \ was issued under\n   the proper CA, Charlie.  Bob also performs the normal PKIX\
    \ validation\n   procedure for this certificate, in particular verifying that\
    \ the\n   certificate chains to a trust anchor (possibly Charlie's CA, if Bob\n\
    \   accepts Charlie's CA as a trust anchor).\n   Alice may wish to provide similar\
    \ information to an external CA\n   operator, Charlie.  Prior to issuing a certificate\
    \ for\n   alice.example.com to someone claiming to be Alice, Charlie needs to\n\
    \   verify that Alice is actually requesting a certificate.  Alice could\n   indicate\
    \ her preferred CA using DANE to CAs as well as relying\n   parties.  Charlie\
    \ could then check to see whether Alice said that her\n   certificates should\
    \ be issued by Charlie or another CA.  Note that\n   this check does not guarantee\
    \ that the precise entity requesting a\n   certification from Charlie actually\
    \ represents Alice -- only that\n   Alice has authorized Charlie to issue certificates\
    \ for her domain to\n   properly authorized individuals.\n   In principle, DANE\
    \ information expressing CA constraints can be\n   presented with or without DNSSEC\
    \ protection.  Presenting DANE\n   information without DNSSEC protection does\
    \ not introduce any new\n   vulnerabilities, but neither does it add much assurance.\
    \  Deletion of\n   records removes the protection provided by this constraint,\
    \ but the\n   client is still protected by CA practices (as now).  Injected or\n\
    \   modified false records are not useful unless the attacker can also\n   obtain\
    \ a certificate for the target domain.  Thus, in the worst case,\n   tampering\
    \ with these constraints increases the risk of false\n   authentication to the\
    \ level that is now standard.\n   Using DANE information for CA constraints without\
    \ DNSSEC provides a\n   very small incremental security feature.  Many common\
    \ attacks against\n   TLS connections already require the attacker to inject false\
    \ A or\n   AAAA records in order to steer the victim client to the attacker's\n\
    \   server.  An attacker that can already inject false DNS records can\n   also\
    \ provide fake DANE information (without DNSSEC) by simply\n   spoofing the additional\
    \ records required to carry the DANE\n   information.\n   Injected or modified\
    \ false DANE information of this type can be used\n   for denial of service, even\
    \ if the attacker does not have a\n   certificate for the target domain.  If an\
    \ attacker can modify DNS\n   responses that a target host receives, however,\
    \ there are already\n   much simpler ways of denying service, such as providing\
    \ a false A or\n   AAAA record.  In this case, DNSSEC is not helpful, since an\
    \ attacker\n   could still cause a denial of service by blocking all DNS responses\n\
    \   for the target domain.\n   Continuing to require PKIX validation also limits\
    \ the degree to which\n   DNS operators (as distinct from the holders of domains)\
    \ can interfere\n   with TLS authentication through this mechanism.  As above,\
    \ even if a\n   DNS operator falsifies DANE records, it cannot masquerade as the\n\
    \   target server unless it can also obtain a certificate for the target\n   domain.\n"
- title: 3.2.  Service Certificate Constraints
  contents:
  - "3.2.  Service Certificate Constraints\n   Alice runs a website on alice.example.com\
    \ and has obtained a\n   certificate from the well-known CA Charlie.  She is concerned\
    \ about\n   additional, unauthorized certificates being issued by Charlie as well\n\
    \   as by other CAs.  She would like to provide a way for visitors to her\n  \
    \ site to know that they should expect alice.example.com to present a\n   specific\
    \ certificate.  In TLS terms, Alice is letting Bob know that\n   this specific\
    \ certificate must be the first certificate in the server\n   Certificate message's\
    \ certificate_list structure [RFC5246].\n   When Bob connects to alice.example.com,\
    \ he uses this mechanism to\n   verify that the certificate presented by the server\
    \ is the correct\n   certificate.  Bob also performs the normal PKIX validation\
    \ procedure\n   for this certificate, in particular verifying that the certificate\n\
    \   chains to a trust anchor.\n   The security implications for this case are\
    \ the same as for the \"CA\n   Constraints\" case above.\n"
- title: 3.3.  Trust Anchor Assertion and Domain-Issued Certificates
  contents:
  - "3.3.  Trust Anchor Assertion and Domain-Issued Certificates\n   Alice would like\
    \ to be able to generate and use certificates for her\n   website on alice.example.com\
    \ without involving an external CA at all.\n   Alice can generate her own certificates\
    \ today, making self-signed\n   certificates and possibly certificates subordinate\
    \ to those\n   certificates.  When Bob receives such a certificate in a TLS\n\
    \   handshake, however, he doesn't automatically have a way to verify\n   that\
    \ the issuer of the certificate is actually Alice, because he\n   doesn't necessarily\
    \ possess Alice's corresponding trust anchor.  This\n   concerns him because an\
    \ attacker could present a different\n   certificate and perform a man-in-the-middle\
    \ attack.  Bob would like\n   to protect against this.\n   Alice would thus like\
    \ to publish information so that visitors to her\n   site can know that the certificates\
    \ presented by her application\n   services are legitimately hers.  When Bob connects\
    \ to\n   alice.example.com, he uses this information to verify that the\n   certificate\
    \ presented by the server has been issued by Alice.  Since\n   Bob can bind certificates\
    \ to Alice in this way, he can use Alice's CA\n   as a trust anchor for purposes\
    \ of validating certificates for\n   alice.example.com.  Alice can additionally\
    \ recommend that clients\n   accept only her certificates using the CA constraints\
    \ described\n   above.\n   As in Section 3.1 above, Alice may wish to represent\
    \ this information\n   to potential third-party CAs (Charlie) as well as to relying\
    \ parties\n   (Bob).  Since publishing a certificate in a DANE record of this\
    \ form\n   authorizes the holder of the corresponding private key to represent\n\
    \   alice.example.com, a CA that has received a request to issue a\n   certificate\
    \ from alice.example.com could use the DANE information to\n   verify the requestor's\
    \ authorization to receive a certificate for\n   that domain.  For example, a\
    \ CA might choose to issue a certificate\n   for a given domain name and public\
    \ key only when the holder of the\n   domain name has provisioned DANE information\
    \ with a certificate\n   containing the public key.\n   Note that this use case\
    \ is functionally equivalent to the case where\n   Alice doesn't issue her own\
    \ certificates, but uses Trent's CA, which\n   is not well-known.  In this case,\
    \ Alice would be advising Bob that he\n   should treat Trent as a trust anchor\
    \ for purposes of validating\n   Alice's certificates, rather than a CA operated\
    \ by Alice herself.\n   Bob would thus need a way to securely obtain Trent's trust\
    \ anchor\n   information, namely through DANE information.\n   Alice's advertising\
    \ of trust anchor material in this way does not\n   guarantee that Bob will accept\
    \ the advertised trust anchor.  For\n   example, Bob might have out-of-band information\
    \ (such as a\n   pre-existing local policy) that indicates that the CA advertised\
    \ by\n   Alice (Trent's CA) is not trustworthy, which would lead him to decide\n\
    \   not to accept Trent as a trust anchor, and thus to reject Alice's\n   certificate\
    \ if it is issued under Trent's CA.\n   Providing trust anchor material in this\
    \ way clearly requires DNSSEC,\n   since corrupted or injected records could be\
    \ used by an attacker to\n   cause clients to trust an attacker's certificate\
    \ (assuming that the\n   attacker's certificate is not rejected by some other\
    \ local policy).\n   Deleted records will only result in connection failure and\
    \ denial of\n   service, although this could result in clients re-connecting without\n\
    \   TLS (a downgrade attack), depending on the application.  Therefore,\n   in\
    \ order for this use case to be safe, applications must forbid\n   clients from\
    \ falling back to unsecured channels when records appear\n   to have been deleted\
    \ (e.g., when a missing record has no NSEC or\n   NSEC3 record).\n   By the same\
    \ token, this use case puts the most power in the hands of\n   DNS operators.\
    \  Since the operator of the appropriate DNS zone has\n   de facto control over\
    \ the content and signing of the zone, he can\n   create false DANE records that\
    \ bind a malicious party's certificate\n   to a domain.  This risk is especially\
    \ important to keep in mind in\n   cases where the operator of a DNS zone is a\
    \ different entity than the\n   holder of the domain, as in DNS hosting/outsourcing\
    \ arrangements,\n   since in these cases the DNS operator might be able to make\
    \ changes\n   to a domain that are not authorized by the holder of the domain.\n\
    \   It should be noted that DNS operators already have the ability to\n   obtain\
    \ certificates for domains under their control, under certain CA\n   policies.\
    \  In the current system, CAs need to verify that an entity\n   requesting a certificate\
    \ for a domain is actually the legitimate\n   holder of that domain.  Typically,\
    \ this is done using information\n   published about that domain, such as WHOIS\
    \ email addresses or special\n   records inserted into a domain.  By manipulating\
    \ these values, it is\n   possible for DNS operators to obtain certificates from\
    \ some well-\n   known certificate authorities today without authorization from\
    \ the\n   true domain holder.\n"
- title: 3.4.  Delegated Services
  contents:
  - "3.4.  Delegated Services\n   In addition to guarding against CA mis-issue, CA\
    \ constraints and\n   certificate constraints can also be used to constrain the\
    \ set of\n   certificates that can be used by an outsourcing provider.  Suppose\n\
    \   that Oscar operates alice.example.com on behalf of Alice.  In\n   particular,\
    \ Oscar then has de facto control over what certificates to\n   present in TLS\
    \ handshakes for alice.example.com.  In such cases,\n   there are a few ways that\
    \ DNS-based information about TLS\n   certificates could be configured; for example:\n\
    \   1.  Alice has the A/AAAA records in her DNS and can sign them along\n    \
    \   with the DANE record, but Oscar and Alice now need to have tight\n       coordination\
    \ if the addresses and/or the certificates change.\n   2.  Alice refers to Oscar's\
    \ DNS by delegating a sub-domain name to\n       Oscar, and has no control over\
    \ the A/AAAA, DANE, or any other\n       pieces under Oscar's control.\n   3.\
    \  Alice can put DANE records into her DNS server but delegate the\n       address\
    \ records to Oscar's DNS server.  This means that Alice can\n       control the\
    \ usage of certificates, but Oscar is free to move the\n       servers around\
    \ as needed.  The only coordination needed is when\n       the certificates change,\
    \ and then it would depend on how the DANE\n       record is set up (i.e., a CA\
    \ or an end-entity certificate\n       pointer).\n   Which of these deployment\
    \ patterns is used in a given deployment will\n   determine what sort of constraints\
    \ can be expressed by which actors.\n   In cases where Alice controls DANE records\
    \ (1 and 3), she can use CA\n   and certificate constraints to control what certificates\
    \ Oscar\n   presents for Alice's application services.  For instance, Alice might\n\
    \   require Oscar to use certificates under a given set of CAs.  This\n   control,\
    \ however, requires that Alice update DANE records when Oscar\n   needs to change\
    \ certificates.  Cases where Oscar controls DANE\n   records allow Oscar to maintain\
    \ more autonomy from Alice, but by the\n   same token, Alice cannot enforce any\
    \ requirements on the certificates\n   that Oscar presents in TLS handshakes.\n"
- title: 4.  Other Requirements
  contents:
  - "4.  Other Requirements\n   In addition to supporting the above use cases, the\
    \ DANE mechanism\n   must satisfy several lower-level operational and protocol\n\
    \   requirements and goals.\n   Multiple Ports:  DANE should be able to support\
    \ multiple application\n      services with different credentials on the same\
    \ named host,\n      distinguished by port number.\n   No Downgrade:  An attacker\
    \ who can tamper with DNS responses must not\n      be able to make a DANE-compliant\
    \ client treat a site that has\n      deployed DANE and DNSSEC like a site that\
    \ has deployed neither.\n   Encapsulation:  If there is DANE information for the\
    \ name\n      alice.example.com, it must only affect application services hosted\n\
    \      at alice.example.com.\n   Predictability:  Client behavior in response\
    \ to DANE information must\n      be defined in the DANE specification as precisely\
    \ as possible,\n      especially for cases where DANE information might conflict\
    \ with\n      PKIX information.\n   Opportunistic Security:  The DANE mechanism\
    \ must allow a client to\n      determine whether DANE information is available\
    \ for a site, so\n      that a client can provide the highest level of security\
    \ possible\n      for a given application service.  Clients that do not support\
    \ DANE\n      should continue to work as specified, regardless of whether DANE\n\
    \      information is present or not.\n   Combination:  The DANE mechanism must\
    \ allow multiple DANE statements\n      of the above forms to be combined.  For\
    \ example, a domain holder\n      should be able to specify that clients should\
    \ accept a particular\n      certificate (Section 3.2) as well as any certificate\
    \ issued by its\n      own CA (Section 3.3).  The precise types of combination\
    \ allowed\n      will be defined by the DANE protocol.\n   Roll-over:  The DANE\
    \ mechanism must allow a site to transition from\n      using one DANE mechanism\
    \ to another.  For example, a domain holder\n      should be able to migrate from\
    \ using DANE to assert a domain-\n      issued certificate (Section 3.3) to using\
    \ DANE to require an\n      external CA (Section 3.1), or vice versa.  The DANE\
    \ mechanism must\n      also allow roll-over between records of the same type,\
    \ e.g., when\n      changing CAs.\n   Simple Key Management:  DANE should have\
    \ a mode in which the domain\n      holder only needs to maintain a single long-lived\
    \ public/private\n      key pair.\n   Minimal Dependencies:  It should be possible\
    \ for a site to deploy\n      DANE without also deploying anything else, except\
    \ DNSSEC.\n   Minimal Options:  Ideally, DANE should have only one operating mode.\n\
    \      Practically, DANE should have as few operating modes as possible.\n   Wildcards:\
    \  The mechanism for distributing DANE information should\n      allow the use\
    \ of DNS wildcard labels (*) for setting DANE\n      information for all names\
    \ within a wildcard expansion.\n   Redirection:  The mechanism for distributing\
    \ DANE information should\n      work when the application service name is the\
    \ result of following\n      a DNS redirection chain (e.g., via CNAME or DNAME).\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   Thanks to Eric Rescorla for the initial formulation\
    \ of the use cases,\n   Zack Weinberg and Phillip Hallam-Baker for contributing\
    \ other\n   requirements, and the whole DANE working group for helpful comments\n\
    \   on the mailing list.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The primary focus of this document is the enhancement\
    \ of TLS\n   authentication procedures using the DNS.  The general effect of such\n\
    \   mechanisms is to increase the role of DNS operators in authentication\n  \
    \ processes, either in place of or in addition to traditional third-\n   party\
    \ actors such as commercial certificate authorities.  The\n   specific security\
    \ implications of the respective use cases are\n   discussed in their respective\
    \ sections above.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC4033]  Arends, R., Austein, R., Larson, M.,\
    \ Massey, D., and S.\n              Rose, \"DNS Security Introduction and Requirements\"\
    ,\n              RFC 4033, March 2005.\n   [RFC5246]  Dierks, T. and E. Rescorla,\
    \ \"The Transport Layer Security\n              (TLS) Protocol Version 1.2\",\
    \ RFC 5246, August 2008.\n   [RFC5280]  Cooper, D., Santesson, S., Farrell, S.,\
    \ Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet X.509 Public\
    \ Key\n              Infrastructure Certificate and Certificate Revocation List\n\
    \              (CRL) Profile\", RFC 5280, May 2008.\n   [RFC6125]  Saint-Andre,\
    \ P. and J. Hodges, \"Representation and\n              Verification of Domain-Based\
    \ Application Service Identity\n              within Internet Public Key Infrastructure\
    \ Using X.509\n              (PKIX) Certificates in the Context of Transport Layer\n\
    \              Security (TLS)\", RFC 6125, March 2011.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC2595]  Newman, C., \"Using TLS with IMAP,\
    \ POP3 and ACAP\",\n              RFC 2595, June 1999.\n   [RFC2818]  Rescorla,\
    \ E., \"HTTP Over TLS\", RFC 2818, May 2000.\n   [RFC3207]  Hoffman, P., \"SMTP\
    \ Service Extension for Secure SMTP over\n              Transport Layer Security\"\
    , RFC 3207, February 2002.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston,\n              A., Peterson, J., Sparks, R., Handley, M., and\
    \ E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n\
    \              June 2002.\n   [RFC6120]  Saint-Andre, P., \"Extensible Messaging\
    \ and Presence\n              Protocol (XMPP): Core\", RFC 6120, March 2011.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Richard Barnes\n   BBN Technologies\n   9861 Broken Land\
    \ Parkway\n   Columbia, MD  21046\n   US\n   Phone: +1 410 290 6169\n   EMail:\
    \ rbarnes@bbn.com\n"
