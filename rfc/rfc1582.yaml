- contents:
  - '              Extensions to RIP to Support Demand Circuits

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   Running routing protocols on connection oriented Public Data\n   Networks,
    for example X.25 packet switched networks or ISDN, can be\n   expensive if the
    standard form of periodic broadcasting of routing\n   information is adhered to.
    \ The high cost arises because a connection\n   has to all practical intents and
    purposes be kept open to every\n   destination to which routing information is
    to be sent, whether or\n   not it is being used to carry user data.\n   Routing
    information may also fail to be propagated if the number of\n   destinations to
    which the routing information is to be sent exceeds\n   the number of channels
    available to the router on the Wide Area\n   Network (WAN).\n   This memo defines
    a generalized modification which can be applied to\n   Bellman-Ford (or distance
    vector) algorithm information broadcasting\n   protocols, for example IP RIP,
    Netware RIP or Netware SAP, which\n   overcomes the limitations of the traditional
    methods described above.\n   The routing protocols support a purely triggered
    update mechanism on\n   demand circuits on WANs.  The protocols run UNMODIFIED
    on LANs or\n   fixed point-to-point links.\n   Routing information is sent on
    the WAN when the routing database is\n   modified by new routing information received
    from another interface.\n   When this happens a (triggered) update is sent to
    a list of\n   destinations on other WAN interfaces.  Because routing protocols
    are\n   datagram based they are not guaranteed to be received by the peer\n   router
    on the WAN.  An acknowledgement and retransmission mechanism\n   is provided to
    ensure that routing updates are received.\n   The WAN circuit manager advises
    the routing applications on the\n   reachability and non-reachability of destinations
    on the WAN.\n"
  title: Abstract
- contents:
  - "Acknowledgements\n   I would like to thank colleagues at Spider, in particular
    Richard\n   Edmonstone, Tom Daniel and Alam Turland, Yakov Rekhter (IBM), Martha\n
    \  Steenstrup (BBN), and members of the RIP-2 working group of the IETF\n   for
    stimulating discussions and comments which helped to clarify this\n   memo.\n"
  title: Acknowledgements
- contents:
  - "Conventions\n   The following language conventions are used in the items of\n
    \  specification in this document:\n      o  MUST -- the item is an absolute requirement
    of the specification.\n         MUST is only used where it is actually required
    for interoperation,\n         not to try to impose a particular method on implementors\n
    \        where not required for interoperability.\n      o  SHOULD -- the item
    should be followed for all but exceptional cir-\n         cumstances.\n      o
    \ MAY or optional -- the item is truly optional and may be followed\n         or
    ignored according to the needs of the implementor.\n   The words \"should\" and
    \"may\" are also used, in lower case, in their\n   more ordinary senses.\n"
  title: Conventions
- contents:
  - "Table of Contents\n      1. Introduction ...........................................
    \ 3\n      2. Running a routing Protocol on the WAN ..................  4\n          2.1.
    Overview .........................................  4\n          2.2. Presumption
    of Reachability ......................  6\n          2.3. WAN Router list ..................................
    \ 7\n          2.4. Triggered Updates and Unreliable Delivery ........  8\n          2.5.
    Guaranteeing delivery of Routing Updates .........  8\n          2.6. The Routing
    Database .............................  9\n          2.7. New Packet Types .................................
    10\n          2.8. Fragmentation .................................... 12\n          2.9.
    Preventing Queue Overload ........................ 13\n      3. IP Routing Information
    Protocol Version 1 .............. 13\n      4. IP Routing Information Protocol
    Version 2 .............. 16\n      5. Netware Routing Information Protocol ...................
    17\n      6. Netware Service Advertising Protocol ................... 20\n      7.
    Timers ................................................. 24\n          7.1. Database
    Timer ................................... 24\n          7.2. Retransmission Timer
    ............................. 25\n          7.3. Reassembly Timer .................................
    26\n      8. Implementation Considerations ...........................27\n      9.
    Security Considerations ................................ 27\n     10. References
    ............................................. 28\n     11. Author's Address .......................................
    29\n"
  title: Table of Contents
- contents:
  - "1. Introduction\n   Routers are used on connection oriented networks, such as
    X.25 packet\n   switched networks and ISDN networks, to allow potential connectivity\n
    \  to a large number of remote destinations.  Circuits on the Wide Area\n   Network
    (WAN) are established on demand and are relinquished when the\n   traffic subsides.
    \ Depending on the application, the connection\n   between any two sites for user
    data might actually be short and\n   relatively infrequent.\n   Practical experience
    of routing shows that periodic 'broadcasting' of\n   routing updates on the WAN
    is unsatisfactory on several counts:\n   o  Running a routing protocol like RIP
    is expensive if the standard\n      form of transmitting routing information to
    every next hop router\n      every 30 seconds is adhered to.  The more routers
    there are\n      wishing to exchange information the worse the problem.  If there\n
    \     are N routers on the WAN, N * (N - 1) routing updates are sent over\n      N
    * (N - 1)/2 connections every broadcast period.\n      The expense arises because
    a circuit has to be kept open to each\n      destination to which routing information
    is to be sent.  Routing\n      updates are sufficiently frequent that little benefit
    is obtainable\n      on most networks by attempting to set up a call purely for\n
    \     the duration of the routing update. (There are often minimum call\n      charges,
    or there is a charge to set up a call irrespective of\n      what data is sent.)\n
    \     The option of reducing the 'broadcast' frequency, while reducing\n      the
    cost, would make the system less responsive.\n   o  The number of networks to
    be connected (N) on the WAN can easily\n      exceed the number of simultaneous
    calls (M) which the interface\n      can support.  If this happens the routing
    'broadcast' will only\n      reach M next hop routers, and (N - M) next hop routers
    will not\n      receive the routing update.\n      A basic rate ISDN interface
    can support 2 simultaneous calls, and\n      even the number of logical channels
    most users subscribe to on an\n      X.25 network is not large.  There is no fundamental
    reason why\n      routing protocols should restrict the user to routing between
    so\n      few sites.\n   o  Since there is no broadcast facility on the WAN, 'broadcasting'
    of\n      routing information actually consists of sending the updates\n      separately
    to all known locations.  This means that N routing\n      updates are queued for
    transmission on the WAN link (in addition\n      to any data which might be queued).\n
    \     Routers take a pragmatic view on queuing datagrams for the WAN.\n      If
    the queue length gets too long, so that datagrams at the end of\n      the queue
    would take too long be transmitted in a reasonable time\n      (say 1 to 2 seconds)
    the router may start discarding them.  On an\n      X.25 network, with slow line
    speeds (perhaps 9600 baud), it may\n      not take too many routing updates to
    fulfill this condition if the\n      link is also actively being used to carry
    user data.\n   This memo addresses all the above problems.\n   The approach taken
    is to modify the routing protocols so as to send\n   information on the WAN only
    when there has been an update to the\n   routing database OR a change in the reachability
    of a next hop router\n   is indicated by the task which manages connections on
    the WAN.\n   Because datagrams are not guaranteed to get through on all WAN media,\n
    \  an acknowledgement and retransmission system is required to provide\n   reliability.\n
    \  This memo describes the modifications required for Bellman-Ford (or\n   distance
    vector) algorithm information broadcasting protocols, such\n   as IP RIP [1,2]
    or Netware RIP and SAP [3] on the WAN.  The protocols\n   run unmodified on Local
    Area Networks (LANs) or fixed point-to-point\n   links, and so interoperate transparently
    with implementations\n   adhering to the original specifications.\n"
  title: 1. Introduction
- contents:
  - '2. Running Routing Protocols on the WAN

    '
  title: 2. Running Routing Protocols on the WAN
- contents:
  - "2.1 Overview\n   Multiprotocol routers are used on connection oriented Wide Area\n
    \  Networks (WANs), such as X.25 packet switched networks and ISDN\n   networks,
    to interconnect LANs.  By using the multiplexing properties\n   of the underlying
    WAN technology, several LANs can be interconnected\n   simultaneously through
    a single physical interface on the router.\n   A circuit manager provides an interface
    between the connectionless\n   network layers (IP, IPX, CLNP etc) and the connection
    oriented WAN\n   (X.25 or ISDN).  Figure 1 shows a schematic representative stack\n
    \  showing the relationship between routing protocols, the network\n   layers,
    the circuit manager and the connection oriented WAN.\n             --------------
    \          ---------  ---------\n             |    RIP     |           |  RIP
    \ |  |  SAP  |\n             --------------           ---------  ---------\n                   |
    \                     |          |\n             --------------               |
    \         |\n             |    UDP     |               |          |\n             --------------
    \              |          |\n                   |                      |          |\n
    \            --------------             ----------------\n             |    IP
    \     |             |     IPX      |\n             --------------             ----------------\n
    \                  |                           |\n             -------------------------------------------\n
    \            |             Circuit Manager             |\n             -------------------------------------------\n
    \                             ||||||||||\n                              ||||||||||\n
    \                     ---------------------------\n                      |   Connection
    Oriented   |\n                      |        WAN stack        |\n                      ---------------------------\n
    \    A WAN circuit manager will support a variety of network layer\n     protocols,
    on its upper interface.  On its lower interface, it\n     may support one or more
    subnetworks.  A subnetwork may support a\n     number of Virtual Circuits.\n            Figure
    1.   Representative Multiprotocol Router stack\n   The router has a translation
    table which relates the network layer\n   address of the next hop router to the
    physical address used to\n   establish a Virtual Circuit (VC) to it.  Datagrams
    may be\n   encapsulated in a header to distinguish the network layer protocol\n
    \  [5].\n   The circuit manager takes datagrams from the connectionless network\n
    \  layer protocols and (if one is not currently available) opens a VC to\n   the
    next hop router.  A VC can carry all traffic between two end-\n   point routers
    for a given network layer protocol (or with appropriate\n   encapsulation all
    network layer protocols).  An idle timer is used to\n   close the VC when the
    datagrams stop arriving at the circuit manager.\n   Running routing protocols
    on the WAN has traditionally consisted of\n   making small modifications to the
    methods used on LANs.  Where\n   routing information would be broadcast periodically
    on a LAN\n   interface, it is converted to a series of periodic updates sent to
    a\n   list of addresses on the WAN.\n   This memo targets two areas:\n   o  Eliminating
    the overkill inherent in periodic transmission of\n      routing updates.\n   o
    \ Overcoming the bandwidth limitations on the WAN: the number of\n      simultaneous
    VCs to next hop routers and restricted data\n      throughput which the WAN link
    can support.\n   The first of these is overcome by transmitting routing updates\n
    \  (called routing responses) only when required:\n   o  Firstly, when a specific
    request for a routing update has been\n      received.\n   o  Secondly, when the
    routing database is modified by new\n      information from another interface.\n
    \     Update information received in this way is not normally\n      propagated
    on other interfaces immediately, but is delayed for a\n      few seconds to allow
    information from several updates to be\n      grouped.\n   o  Thirdly, when the
    circuit manager indicates that a destination\n      has changed from an unreachable
    (circuit down) to a reachable\n      (circuit up) state.\n   Because of the inherent
    unreliability of a datagram based system,\n   both routing requests and routing
    responses require acknowledgement,\n   and retransmission in the event of NOT
    receiving an acknowledgement.\n   To overcome the bandwidth limitations the routing
    application can\n   perform a form of self-imposed flow control, to spread routing\n
    \  updates out over a period of time.\n"
  title: 2.1 Overview
- contents:
  - "2.2 Presumption of Reachability\n   If a routing update is received from a next
    hop router on the WAN,\n   entries in the update are thereafter always considered
    to be\n   reachable, unless proven otherwise:\n   o  If in the normal course of
    routing datagrams, the circuit manager\n      fails to establish a connection
    to the next hop router, it\n      notifies the routing application that the next
    hop router is not\n      reachable through an internal circuit down message.\n
    \     The routing application then goes through a process of timing out\n      database
    entries to make them unreachable in the routing sense.\n   o  If the circuit manager
    is subsequently able to establish a\n      connec tion to the next hop router,
    it will notify the routing\n      applica tion that the next hop router is reachable
    through an\n      internal circuit up message.\n      The routing application
    will then exchange messages with the next\n      hop router so as to re-prime
    their respective routing databases\n      with up-to-date information.\n   Handling
    of circuit up and circuit down messages requires that the\n   circuit manager
    takes responsibility for establishing (or\n   reestablishing) the connection in
    the event of a next hop router\n   becoming unreachable.  A description of the
    processes the circuit\n   manager adopts to perform this task is outside the scope
    of this\n   memo.\n"
  title: 2.2 Presumption of Reachability
- contents:
  - "2.3 WAN Router list\n   The routing task MAY be provided with a list of routers
    to send\n   routing updates to on the WAN.  It will comprise of the logical\n
    \  addresses of next hop routers for which the router has a logical to\n   physical
    address mapping.  Entries in the list SHOULD be categorized\n   (on a per-peer
    basis) as follows:\n   o  Running the standard routing protocol, namely transmitting\n
    \     updates periodically with the packet formats used in LAN\n      broadcasts.\n
    \     This option is supported to allow interoperability with existing\n      routing
    implementations, and might also be appropriate if some\n      of the destinations
    are using Permanent Virtual Circuits (PVCs)\n      rather than SVCs.\n   o  Running
    the triggered update routing protocol proposed in this\n      memo.\n   Omitting
    an address from both of these categories is equivalent to\n   not running the
    routing protocols.\n   If routing packets arrive from a destination not supporting
    the\n   appropriate variant they MUST be discarded.\n"
  title: 2.3 WAN Router list
- contents:
  - "2.4 Triggered Updates and Unreliable Delivery\n   If triggered update information
    is sent to next hop routers on the\n   WAN only once it can fail to arrive for
    one of the following reasons:\n   o  A free VC resource might not be available,
    because of a\n      restricted number of X.25 logical channels or ISDN B-channels.\n
    \  o  The transmit queue might be full - requiring the datagram to be\n      discarded.\n
    \  o  The VC might be pre-empted (in favour of establishing a VC to\n      another
    next hop router) while the datagram is in a queue,\n      resulting in the queue
    being flushed and the datagram\n      discarded.\n   o  In cases where the method
    of transport is not guaranteed, for\n      example with PPP where there is no
    acknowledgement and\n      retransmission of HDLC frames, a corrupted frame will
    result in\n      the loss of the datagram.\n"
  title: 2.4 Triggered Updates and Unreliable Delivery
- contents:
  - "2.5 Guaranteeing delivery of Routing Updates\n   To guarantee delivery of routing
    updates on the WAN an\n   acknowledgement and retransmission scheme MUST be used:\n
    \  o  Send a routing update to a next hop router on the WAN.\n   o  The other
    router responds with an acknowledgement packet.\n      The original router receives
    the acknowledgement.\n   o  Otherwise the original router retransmits the update
    until an\n      acknowledgement is received.\n      Retransmission timer values
    are covered in section 7.\n      In cases where the routing database is modified
    before an\n      acknowledgement is received a new routing update with an\n      updated
    sequence number is sent out.  If an acknowledgement for\n      the old routing
    update is received it is ignored.\n   o  A router only updates its routing database
    when it receives a\n      complete update, which may consist of several fragments.
    \ Each\n      fragment is individually acknowledged.\n   The above mechanism caters
    for cases where the datagram is lost\n   because of a frame error or is discarded
    because of an over-full\n   queue.  The routing update and acknowledgement will
    eventually both\n   get through.\n   In cases where the circuit manager cannot
    establish a connection, a\n   mechanism is provided to allow the circuit manager
    to inform the\n   routing task of the failure to make a connection so that it
    can\n   suppress retransmissions until a circuit becomes available.\n"
  title: 2.5 Guaranteeing delivery of Routing Updates
- contents:
  - "2.6 The Routing Database\n   A requirement of using triggered updates for propagating
    routing\n   information is that NO routing information ever gets LOST or\n   DISCARDED.\n
    \  The routing database MUST adopt one of the following strategies:\n   o  It
    must keep ALL alternative routing information it learns from\n      any routing
    updates from the LAN and the WAN, so that if the\n      best route disappears
    an alternative route (if available) can\n      replace it as the new best route.\n
    \  o  If the amount of memory this consumes is problematic the routing\n      application
    must keep SOME alternative routing information - say\n      a best route and two
    alternatives.\n      If the router ever has to discard routing information about
    a\n      route it should note the fact.  If the routes that have been\n      kept
    disappear because they have become unreachable, the router\n      MUST issue a
    request on all interfaces to try and obtain\n      discarded alternatives.\n      It
    is recommended that the request is issued BEFORE all routes\n      to a destination
    have been lost.\n   Entries in the routing database can either be permanent or
    temporary.\n   Entries learned from broadcasts on LANs are temporary. They will\n
    \  expire if not periodically refreshed by further broadcasts.\n   Entries learned
    from a triggered response on the WAN are 'permanent'.\n   They MUST not time out
    in the normal course of events.  The entries\n   state MUST be changed to 'temporary'
    by the following events:\n   o  The arrival of a routing update containing the
    entry set to\n      unreachable.\n      The normal hold down timer MUST be started,
    after which the\n      entry disappears from the routing database.\n   o  The
    arrival of a routing update with the entry absent.\n      If the hold down timer
    is not already running, the entry MUST be\n      set to unreachable and the hold
    down timer started.\n   o  A message sent from the circuit manager, to indicate
    that it\n      failed to make a connection in normal running.\n      The routing
    table MUST be scanned for all routes via that next\n      hop router.  Aging of
    these routing entries MUST commence.  If\n      the aging timer expires the entry
    MUST be set to unreachable and\n      the hold down timer started.  If the hold
    down timer expires the\n      entry disappears from the routing database.\n   o
    \ If the interface goes down, the circuit manager should indicate\n      that
    all circuits on that interface have gone down.\n   Database timer values are covered
    in section 7.\n"
  title: 2.6 The Routing Database
- contents:
  - "2.7 New Packet Types\n   To support triggered updates, three new packet types
    MUST be\n   supported:\n   TRIGGERED REQUEST\n             A request to the responding
    system to send all\n             appropriate elements in its routing database.\n
    \            A triggered request is retransmitted at periodic\n             intervals
    until a triggered response is received.\n             Routing requests are transmitted
    in the following\n             circumstances:\n             o  Firstly when the
    router is powered on.\n             o  Secondly when the circuit manager indicates
    a\n                destination has been in an unreachable (circuit down)\n                state
    for an extended period and changes to a\n                reachable (circuit up)
    state.\n             o  Thirdly in the event of all routing update fragments\n
    \               failing to arrive within a set period.\n             o  It may
    also send triggered requests at other times to\n                compensate for
    discarding non-optimal routing\n                information.\n   TRIGGERED RESPONSE\n
    \            A message containing all appropriate elements of the\n             routing
    database.  An appropriate element is an entry\n             NOT learned from the
    interface to which the routing\n             information is being sent out.  This
    is known as \"split\n             horizon\".\n             Stability is improved
    by adding \"poisoned reverse\" on\n             routes learned from a destination.
    \ This consists of also\n             including some routes learned from a destination
    in\n             routing updates sent back to that destination, but\n             setting
    the routes as unreachable.  A route is only\n             poisoned if it is the
    best route (rather than an inferior\n             alternative route) in the database.\n
    \            A triggered response message may be sent in response to a\n             triggered
    request, or it may be an update message issued\n             because of a change
    in the routing database.\n             A triggered response message MUST be sent
    in response to\n             a triggered request message even if there are no
    routes\n             to propagate.  This would be the case for a host which\n
    \            had a WAN interface only, but which wished to run the\n             triggered
    update protocol.\n             A triggered response is retransmitted at periodic\n
    \            intervals until a triggered acknowledgement is received.\n   TRIGGERED
    ACKNOWLEDGEMENT\n             A message sent in response to every triggered response\n
    \            packet received.\n   Triggered response and triggered acknowledgement
    packets MUST contain\n   additional fields for a sequence number, fragment number
    and number\n   of fragments.\n   If a triggered request or response is not acknowledged
    after 10\n   retransmissions, routes to the destination should be marked as\n
    \  unreachable for the duration of a hold down timer before being\n   deleted.\n
    \  The destination should then be polled at a lower frequency using\n   triggered
    request packets.  When a triggered response is received,\n   the router should
    prime the next hop router my sending its routing\n   database through triggered
    response packets.\n   Strictly speaking polling should occur indefinitely to guarantee\n
    \  database integrity.  However the administrator MAY wish the router to\n   cease
    polling after a few attempts believing that the lack of\n   response is due to
    a mis-configuration of the next hop router.  The\n   destination should be marked
    as NOT supporting the mechanism and no\n   further routing messages should be
    sent to that destination.\n   Before marking the destination as not supporting
    the mechanism, at\n   least 5 triggered request polls (without acknowledgement)
    should be\n   sent.\n   If a destination marked as not supporting the mechanism,
    subsequently\n   sends a valid 'triggered' message, the destination should be
    marked\n   as supporting the mechanism once more (to allow for the next hop\n
    \  router's configuration being changed).  It should be sent a triggered\n   request
    and a triggered response to obtain and propagate up-to-date\n   routing information.\n"
  title: 2.7 New Packet Types
- contents:
  - "2.8 Fragmentation\n   If a routing update is sufficiently large, the information
    MUST be\n   fragmented over several triggered response packets:\n   o  Each fragment
    MUST be individually acknowledged with a triggered\n      acknowledgement packet.\n
    \     The sender of the routing update MUST periodically retransmit\n      fragments
    which have not been acknowledged (or until the\n      destination is marked as
    not supporting the mechanism).\n   o  A router receiving fragments MUST re-assemble
    them before\n      updating its routing database.\n   o  If all fragments are
    not received within four times the\n      retransmit period, they MUST be discarded.\n
    \     A triggered request packet MUST then be sent to the originator\n      of
    the routing update.\n      On receiving the triggered request packet, the originator
    of the\n      routing update MUST retransmit ALL fragments.\n   o  If a fragment
    with an updated sequence number is received, ALL\n      fragments with the earlier
    sequence number MUST be discarded.\n      An updated sequence number is defined
    as any sequence number\n      that is different.  There is no concept of the value
    of the\n      sequence number conveying its age.\n   Fragmentation timer values
    are covered in section 7.\n"
  title: 2.8 Fragmentation
- contents:
  - "2.9 Preventing Queue Overload\n   In order to prevent too many routing messages
    being queued at a WAN\n   interface, the routing task MAY operate a scheme whereby\n
    \  'broadcasting' of a triggered request or triggered response to a WAN\n   interface
    is staggered.  All routing requests or routing responses\n   are not sent to ALL
    next hop routers on the interface in a single\n   batch:\n   o  The routing task
    should limit the number of outstanding triggered\n      request messages for which
    a triggered response has not been\n      received.\n   o  The routing task should
    limit the number of outstanding triggered\n      response messages for which a
    triggered acknowledgement has not\n      been received.\n   As outstanding messages
    are appropriately acknowledged, further\n   messages can be sent out to other
    next hop routers, until all next\n   hop routers have been sent the message and
    have acknowledged it.\n   The maximum number of outstanding messages transmitted
    without\n   acknowledgement is a function of the link speed and the number of\n
    \  other routing protocols operating the triggered update mechanism.\n   Messages
    should always be acknowledged immediately (even if it causes\n   the limit to
    be exceeded), since a connection is almost certainly\n   available.  This has
    the potential benefit of allowing the VC to\n   close sooner (on its idle timer).\n
    \  Sending all triggered request fragments to a destination at once is\n   also
    beneficial.\n"
  title: 2.9 Preventing Queue Overload
- contents:
  - "3. IP Routing Information Protocol Version 1\n   This section should be read
    in conjunction with reference [1].\n   IP RIP is a UDP-based protocol which generally
    sends and receives\n   datagrams on UDP port number 520.\n   To support the mechanism
    outlined in this proposal the packet format\n   for RIP version 1 [1] is modified
    as shown in Figure 2.\n   Every Routing Information Protocol datagram contains
    the following:\n   COMMAND   Commands supported in RIP Version 1 are: request
    (1),\n             response (2), traceon (3), traceoff (4), SUN reserved (5).\n
    \            The fields sequence number, fragment number and number of\n             fragments
    MUST NOT be included in packets with these\n             command values.\n             The
    following new commands (with values in brackets) are\n             required:\n
    \      TRIGGERED REQUEST (6)\n                 A request for the responding system
    to send all of its\n                 routing database.\n                 Only
    the first 4 octets of the packet format shown in\n                 figure 2 are
    sent, since all routing information is\n                 implied by this request
    type.\n       TRIGGERED RESPONSE (7)\n                 A message containing all
    of the sender's routing\n                 database, excluding those entries learned
    from the\n                 interface to which the routing information is being\n
    \                sent.\n                 This message may be sent in response
    to a triggered\n                 request, or it may be an update message resulting\n
    \                from a change in the routing database.\n                 A triggered
    response message MUST be sent in response\n                 to a triggered request
    message even if there are no\n                 routes to propagate.  This would
    be the case for a\n                 host which had a WAN interface only, but which
    wished\n                 to run the triggered update protocol.\n     0                   1
    \                  2                   3 3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    | command (1)   | version (1)   |      must be zero (2)         |\n     +---------------+---------------+-------------------------------+\n
    \       The following new fields are inserted for some commands\n     0                   1
    \                  2                   3 3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |    sequence number (2)        | fragment (1)  |no of frags (1)|\n     +-------------------------------+-------------------------------+\n
    \         Followed by up to 25 routing entries (each 20 octets)\n     0                   1
    \                  2                   3 3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    | address family identifier (2) |      must be zero (2)         |\n     +-------------------------------+-------------------------------+\n
    \    |                         IP address (4)                        |\n     +---------------------------------------------------------------+\n
    \    |                        must be zero (4)                       |\n     +---------------------------------------------------------------+\n
    \    |                        must be zero (4)                       |\n     +---------------------------------------------------------------+\n
    \    |                          metric (4)                           |\n     +---------------------------------------------------------------+\n
    \                                    .\n                                     .\n
    \    The format of an IP RIP datagram in octets, with each tick mark\n     representing
    one bit.    All fields are in network order.\n     The four octets: sequence number
    (2), fragment number (1) and\n     number of fragments (1) are not present in
    the original RIP\n     specification.  They are only present if command takes
    the\n     values 7 or 8.\n          Figure 2.   IP Routing Information Protocol
    packet format\n       TRIGGERED ACKNOWLEDGEMENT (8)\n                 A message
    sent in response to every triggered response\n                 packet received.\n
    \                Only the first 8 octets of the packet format shown in\n                 figure
    2 are sent.\n   VERSION   In this instance Version 1.\n   SEQUENCE NUMBER\n             This
    is a new field inserted if command takes the values 7\n             or 8.\n             The
    sequence number MUST be incremented every time updated\n             information
    is sent out on a WAN.  The sequence number\n             wraps round at 65535.\n
    \            When a triggered acknowledgement is sent the sequence\n             number
    is set to the same value as the triggered response\n             packet being
    acknowledged.\n             The sequence number MUST be identical over fragments.
    \ If a\n             fragment is retransmitted the sequence number MUST not\n
    \            change.\n   FRAGMENT NUMBER\n             The fragment number is
    one for the first fragment of a\n             routing update, and is incremented
    for each subsequent\n             fragment.  A fragment can contain up to 25 routing
    entries.\n             When a triggered acknowledgement is sent the fragment\n
    \            number is set to the same value as the triggered response\n             packet
    being acknowledged.\n   NUMBER OF FRAGMENTS\n             In a triggered response
    packet this indicates the number of\n             packets required to complete
    the routing update.\n             This field has no relevance for triggered acknowledgement\n
    \            packets so should be set to zero.\n   For triggered response packets
    the rest of the datagram contains a\n   list of destinations, with information
    about each.  Each entry in\n   this list contains the address family identifier
    (2 for IP), a\n   destination network or host, and the metric for it.  The packet\n
    \  format is intended to allow RIP to carry routing information for\n   several
    different protocols, identifiable by the family identifier.\n   The IP address
    is the usual Internet address, stored as 4 octets in\n   network order.  The metric
    field contains a value between 1 and 15\n   inclusive, specifying the current
    metric for the destination, or the\n   value 16 (representing 'infinity'), which
    indicates that the\n   destination is not reachable.  Each route sent by a router
    supersedes\n   any previous route to the same destination from the same router.\n
    \  The maximum datagram size is 508 octets, excluding UDP and IP\n   headers.\n"
  title: 3. IP Routing Information Protocol Version 1
- contents:
  - "4. IP Routing Information Protocol Version 2\n   An enhancement to IP RIP to
    include subnetting has recently become\n   available [2].  This section only describes
    differences from that\n   RFC.\n   The triggered update mechanism can be supported
    by including the\n   triggered request (6), triggered response (7) and triggered\n
    \  acknowledgement (8) commands described in the previous section.\n   The sequence
    number, fragment number and number of fragments fields\n   are included in triggered
    response and triggered acknowledgement\n   commands.\n   The triggered request
    packet should also contain the 4 extra octets\n   corresponding to the sequence
    number, fragment number and number of\n   fragments fields - but set to zero.\n
    \  Because additional security information is included in RIP Version 2\n   packets,
    this MUST be appended to the triggered request and triggered\n   acknowledgement
    packets, as well as being present in the triggered\n   response packet.\n   The
    version number becomes 2.  Other aspects of packet layout follow\n   reference
    [2].\n"
  title: 4. IP Routing Information Protocol Version 2
- contents:
  - "5. Netware Routing Information Protocol\n   This section should be read in conjunction
    with references [3], since\n   it only describes differences from the specification.\n
    \  Netware [3] is the trade name of Novell Research's protocols for\n   computer
    communication which are derived and extended from Xerox\n   Network System's (XNS)
    protocols [4].\n   Netware supports a mechanism that allows routers on an internetwork\n
    \  to exchange routing information using the Routing Information\n   Protocol
    (RIP) which runs over the Internetwork Packet Exchange (IPX)\n   protocol using
    socket number 453h.\n   Netware RIP and IP RIP share a common heritage, in that
    they are both\n   based on XNS RIP, but there is some divergence, mostly at the
    packet\n   format level to reflect the differing addressing schemes.\n   The triggered
    update mechanism can be applied to Netware RIP.  To\n   support the mechanism
    outlined in this proposal the packet format for\n   Netware RIP is modified as
    shown in Figure 3.\n   Every datagram contains the following:\n   RIP OPERATION\n
    \            Operations supported in standard Netware RIP are: request\n             (1)
    and response (2).\n             The fields sequence number, fragment number and
    number of\n             fragments MUST NOT be included in packets with these\n
    \            operation values.\n             The following new operations are
    required (with values\n             chosen to be the same as for IP RIP commands):\n
    \    0                   1         1\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |       operation (2)           |\n     +---------------+---------------+\n
    \       The following new fields are inserted for some operations\n     0                   1
    \                  2                   3 3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |      sequence number (2)      | fragment (1)  |no of frags (1)|\n     +-------------------------------+-------------------------------+\n
    \          Followed by up to 50 routing entries (each 8 octets)\n     0                   1
    \                  2                   3 3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |                       network number (4)                      |\n     +---------------------------------------------------------------+\n
    \    |       number of hops (2)      |      number of ticks (2)      |\n     +---------------------------------------------------------------+\n
    \                                    .\n                                     .\n
    \    The format of a Netware RIP datagram in octets, with each tick\n     mark
    representing one bit.  All fields are in network order.\n     The four octets:
    sequence number (2), fragment number (1) and\n     number of fragments (1) are
    not present in the original RIP\n     specification.  They are only present if
    operation takes the\n     values 7 or 8.\n        Figure 3.   Netware Routing
    Information Protocol packet format\n       TRIGGERED REQUEST (6)\n                 A
    request for the responding system to send all of its\n                 routing
    database.\n                 Only the first 2 octets of the packet format shown
    in\n                 figure 3 are sent, since all routing information is\n                 implied
    by this request type.\n       TRIGGERED RESPONSE (7)\n                 A message
    containing all of the sender's routing\n                 database, excluding those
    entries learned from the\n                 interface to which the routing information
    is being\n                 sent.\n                 This message may be sent in
    response to a triggered\n                 request, or it may be an update message
    resulting\n                 from a change in the routing database.\n                 A
    triggered response message MUST be sent in response\n                 to a triggered
    request message even if there are no\n                 routes to propagate.  This
    would be the case for a\n                 host which had a WAN interface only,
    but which wished\n                 to run the triggered update protocol.\n       TRIGGERED
    ACKNOWLEDGEMENT (8)\n                 A message sent in response to every triggered\n
    \                response packet received.\n                 Only the first 6
    octets of the packet format shown in\n                 figure 3 are sent.\n   SEQUENCE
    NUMBER\n             This is a new field inserted if operation takes the\n             values
    7 or 8.\n             The sequence number MUST be incremented every time\n             updated
    information is sent out on a WAN.  The sequence\n             number wraps round
    at 65535.\n             When a triggered acknowledgement is sent the sequence\n
    \            number is set to the same value as the triggered response\n             packet
    being acknowledged.\n             The sequence number MUST be identical over fragments.
    \ If\n             a fragment is retransmitted the sequence number MUST not\n
    \            change.\n   FRAGMENT NUMBER\n             The fragment number is
    one for the first fragment of a\n             routing update, and is incremented
    for each subsequent\n             fragment.  A fragment can contain up to 50 routing
    entries.\n             When a triggered acknowledgement is sent the fragment\n
    \            number is set to the same value as the triggered response\n             packet
    being acknowledged.\n   NUMBER OF FRAGMENTS\n             In a triggered response
    packet this indicates the number\n             of packets required to complete
    the routing update.\n             This field has no relevance for triggered acknowledgement\n
    \            packets so should be set to zero.\n   For triggered response packets
    the rest of the datagram contains a\n   list of networks, with information about
    each.  Each entry in this\n   list contains a destination network, and the number
    of hops and\n   number of ticks for each.\n   The maximum datagram size is 406
    octets, excluding the IPX header (a\n   further 30 octets).\n"
  title: 5. Netware Routing Information Protocol
- contents:
  - "6. Netware Service Advertising Protocol\n   This section should be read in conjunction
    with references [3], since\n   it only describes differences from the specification.\n
    \  Netware [3] also supports a mechanism that allows servers on an\n   internetwork
    to advertise their services by name and type using the\n   Service Advertising
    Protocol (SAP) which runs over the Internetwork\n   Packet Exchange (IPX) protocol
    using socket number 452h.\n   SAP operates on similar principals to running RIP.
    \ Routers act as\n   SAP agents, collecting service information from different
    networks\n   and relay it to interested parties.\n   To support the triggered
    update mechanism outlined in this proposal\n   the packet format for Netware SAP
    is modified as shown in Figure 4.\n   Every Service Advertising Protocol datagram
    contains the following:\n   SAP OPERATION\n             Operations supported in
    standard Netware SAP are: general\n             service query (1), general service
    response (2), nearest\n             service query (3) and nearest service response
    (4).\n             The fields sequence number, fragment number and number of\n
    \            fragments MUST NOT be included in packets with these\n             operation
    values.\n             The following new operations are required:\n       TRIGGERED
    GENERAL SERVICE QUERY (6)\n                 A request for the responding system
    to send the\n                 identities of all servers of all types.\n                 Only
    the first 2 octets of the packet format shown in\n                 figure 4 are
    sent, since all service types are\n                 implied by this request type.\n
    \    0                   1         1\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |       operation (2)           |\n     +---------------+---------------+\n
    \       The following new fields are inserted for some operations\n     0                   1
    \                  2                   3 3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |      sequence number (2)      | fragment (1)  |no of frags (1)|\n     +-------------------------------+-------------------------------+\n
    \          Followed by up to 8 service entries (each 66 octets)\n     0                   1
    \                  2                   3 3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    |                       Service Type (4)                        |\n     +---------------------------------------------------------------+\n
    \    |                       Service Name (48)                       |\n     +
    \                                                              +\n                                  .\n
    \    |                            .                                  |\n     +---------------------------------------------------------------+\n
    \    |                       Network Address (4)                     |\n     +---------------------------------------------------------------+\n
    \    |                        Node Address (6)                       |\n     +
    \                              +-------------------------------+\n     |                               |
    \     Socket Address (2)       |\n     +---------------------------------------------------------------+\n
    \    |       Hops to Server (2)      |\n     +-------------------------------+\n
    \                                    .\n                                     .\n
    \    The format of a Netware SAP datagram in octets, with each tick\n     mark
    representing one bit.  All fields are in network order.\n     The four octets:
    sequence number (2), fragment number (1) and\n     number of fragments (1) are
    not present in the original SAP\n     specification.  They are only present if
    operation takes the\n     values 7 or 8.\n        Figure 4.   Netware Service
    Advertising Protocol packet format\n       TRIGGERED GENERAL SERVICE RESPONSE
    (7)\n                 A message containing all of the sender's services\n                 table,
    excluding those entries learned from the\n                 interface to which
    the service advertising\n                 information is being sent out.\n                 This
    message may be sent in response to a triggered\n                 general service
    query, or it may be an update message\n                 resulting from a change
    in the service advertising\n                 database.\n                 A triggered
    general service response message MUST be\n                 sent in response to
    a triggered general request\n                 message even if there are no services
    to advertise.\n                 This would be the case for a router with a LAN\n
    \                network which had work stations but no servers on it.\n       TRIGGERED
    GENERAL SERVICE ACKNOWLEDGEMENT (8)\n                 A message sent in response
    to every triggered general\n                 service response packet received.\n
    \                Only the first 6 octets of the packet format shown in\n                 figure
    4 are sent.\n   SEQUENCE NUMBER\n             This is a new field inserted if
    operation takes the values\n             7 or 8.\n             The sequence number
    MUST be incremented every time updated\n             information is sent out on
    a WAN.  The sequence number\n             wraps round at 65535.\n             When
    a triggered general service acknowledgement is sent\n             the sequence
    number is set to the same value as the\n             triggered general service
    response packet being\n             acknowledged.\n             The sequence number
    MUST be identical over fragments.  If\n             a fragment is retransmitted
    the sequence number MUST not\n             change.\n   FRAGMENT NUMBER\n             The
    fragment number is one for the first fragment of a\n             triggered general
    service response update, and is\n             incremented for each subsequent
    fragment.  A fragment can\n             contain up to 8 service entries.\n             When
    a triggered general service acknowledgement is sent,\n             the fragment
    number is set to the same value as the\n             triggered general service
    response packet being\n             acknowledged.\n   NUMBER OF FRAGMENTS\n             In
    a triggered response packet this indicates the number of\n             packets
    required to complete the service update.\n             This field has no relevance
    for triggered acknowledgement\n             packets so should be set to zero.\n
    \  For triggered general service response packets the rest of the\n   datagram
    contains a list of services, with information about each.\n   Each entry in this
    list contains the service type, service name, full\n   address (network, node
    and socket), and the number of hops to the\n   server.\n   The maximum datagram
    size is 534 octets, excluding the IPX header (a\n   further 30 octets).\n"
  title: 6. Netware Service Advertising Protocol
- contents:
  - "7. Timers\n   A number of timers are supported to handle the triggered update\n
    \  mechanism:\n   o  Database timers.\n   o  Retransmission timer.\n   o  Reassembly
    timer.\n   In this section appropriate timer values for IP RIP are suggested.\n
    \  For other routing protocols, only the database timer should need to\n   take
    different values.  The database timer values are chosen to match\n   equivalent
    timer operation for using the protocol on a LAN.  The\n   behaviour of a routing
    entry when a timer is running becomes\n   indistinguishable from a routing entry
    learned from a broadcast\n   update.\n   Implementations MAY make timer values
    configurable - and hence\n   different from the values suggested here - but interoperability\n
    \  requires that all timers on a sub-network should be the same in all\n   routers.\n"
  title: 7. Timers
- contents:
  - "7.1 Database Timers\n   Routes learned by a triggered response command (7) are
    normally\n   considered to be permanent - that is they do NOT time out unless\n
    \  activated by one of the following events:\n   o  If the circuit manager indicates
    that a next hop router cannot be\n      contacted, all routes learned from that
    next hop router should\n      start timing out as if they had (just) been learned
    from a\n      conventional response command (2).\n      Namely each route exists
    while the database entry timer is\n      running and is advertised on other interfaces
    as if still\n      present.  The route is then advertised as unreachable while
    a\n      further hold down timer is allowed to expire, at which point the\n      entry
    is deleted.\n      If the circuit manager indicates that the next hop router can
    be\n      contacted while the database entry timer is running, the routes\n      are
    reinstated as permanent entries.\n      If the database entry timer has expired
    and the circuit manager\n      indicates that the next hop router is reachable,
    the routing\n      application MUST issue a triggered request.  The routes will
    be\n      reinstated on the basis of any triggered response packet(s)\n      received.\n
    \  o  If a triggered response packet is received in which a route is\n      marked
    unreachable, the hold down timer MUST be started and the\n      entry is advertised
    as unreachable on other interfaces.  On\n      expiry of the hold down timer the
    entry is deleted.\n      If a triggered response packet is received in which an
    existing\n      route is ABSENT, the hold down timer MUST also be started and\n
    \     the entry is advertised as unreachable on other interfaces.  On\n      expiry
    of the hold down timer the entry is deleted.\n   For IP RIP the hold down timer
    should always run for 120 seconds, to\n   be consistent with RIP usage on broadcast
    networks.  The database\n   entry timer should by default run for 180 seconds.
    \ The network can\n   be made more responsive by reducing the database entry timer
    value.\n   However, making this timer too short can lead to network\n   instabilities.
    \ The duration of the database entry timer allows a\n   period of grace in which
    contention for network resources can be\n   resolved by the circuit manager.\n"
  title: 7.1 Database Timers
- contents:
  - "7.2 Retransmission Timer\n   The routing task runs a retransmission timer:\n
    \  o  When a triggered request is sent it will be retransmitted\n      periodically
    while a triggered response packet is not received.\n   o  When a triggered response
    is sent a note of the sequence number\n      and fragment number(s) of the routing
    update is kept.\n      Fragments will be retransmitted at periodic intervals while
    a\n      triggered acknowledgement packet is not received for the\n      appropriate
    fragment.\n   With call set up time on the WAN being of the order of a second,
    a\n   value of 5 seconds for the retransmission timer is appropriate.\n   If no
    response is received after 10 retransmissions, routes via the\n   next hop router
    are marked as unreachable, the hold down timer MUST\n   be started and the entry
    is advertised as unreachable on other\n   interfaces.  On expiry of the hold down
    timer the entry is deleted.\n   The next hop router is then polled using a triggered
    request packet\n   at 60 second intervals.  If a response is received the routers
    should\n   exchange routing information using triggered response packets.\n   It
    may not be desirable to poll indefinitely, since a lack of\n   response (when
    a circuit is up) is most likely caused by incorrect\n   configuration of the next
    hop router.  An administrator definable\n   number of polls (5 or greater) should
    be provided.\n   If the circuit manager indicates that the next hop router is\n
    \  unreachable, the retransmission is suppressed until the circuit\n   manager
    indicates that the next hop router is reachable once more.\n   Counting of the
    number of retransmissions continues from where it\n   left off prior to the circuit
    down indication.\n"
  title: 7.2 Retransmission Timer
- contents:
  - "7.3 Reassembly Timer\n   When a router receives a triggered response update it
    MUST\n   acknowledge each fragment.  If the routing update is fragmented over\n
    \  more than one packet, the receiving router MUST store the fragments\n   until
    ALL fragments are received.\n   On receiving the first fragment a timer should
    be started.  If all\n   fragments of the routing update are not received within
    that period\n   they are discarded - and a triggered request is sent back to the\n
    \  originator (with retransmissions if necessary).  The originator MUST\n   then
    resend ALL triggered response fragments.\n   The reassembly timer should be set
    to four times the value of the\n   retransmission timer.  With a suggested retransmission
    timer value of\n   5 seconds, the suggested reassembly timer value SHOULD be 20
    seconds.\n   Implementations MAY allow the reassembly timer and retransmission\n
    \  timer to be configurable (in the 1:4 ratio), but interoperability\n   will
    be compromised on WANs where all participating routers DO NOT\n   support the
    same values for these timers.\n   Fragments MUST also be discarded if a new fragment
    with a different\n   sequence number is received.  A triggered request MUST not
    be sent in\n   this instance.\n"
  title: 7.3 Reassembly Timer
- contents:
  - "8. Implementation Considerations\n   In the implementation described in this
    memo, it is assumed that\n   there is a close binding between the circuit manager
    and the routing\n   applications - that they are in some way the same 'program'.
    \ This is\n   not necessarily true of all products which are routers.\n   In particular
    there are UNIX host implementations in which the\n   routing application is distinct
    from the kernel, where the circuit\n   manager is likely to be installed.  In
    such systems it is possible to\n   stop (or crash) the routing applications independently
    of what is\n   happening in the kernel.\n   Other implementations might have the
    circuit manager on a separate\n   card which again may give the circuit manager
    a life of its own.\n   In implementations where the applications and circuit manager
    have\n   independent lives, a keep-alive mechanism MUST be provided between\n
    \  the applications and the circuit manager, so that if the application\n   or
    network layer dies and is subsequently re-started they can\n   resynchronize their
    state tables.\n   Ideally, when an application dies, the circuit manager should
    close\n   all existing VCs appropriate to the application and make no further\n
    \  outgoing calls and reject incoming calls until the application is\n   running
    again.\n   If the circuit manager is using some form of encapsulation, several\n
    \  applications may be sharing the same VC.  If this is the case the\n   circuit
    manager may wish to filter out datagrams for the appropriate\n   network layer
    if only one of the applications is affected.  But this\n   is not an ideal solution.\n
    \  Conversely if the application believes the circuit manager has died,\n   it
    should mark all routes via the circuit manager as unreachable and\n   advertise
    them on other interfaces for the duration of the hold down\n   timer before deleting
    them.\n"
  title: 8. Implementation Considerations
- contents:
  - "9. Security Considerations\n   Security is provided my a number of aspects:\n
    \  o  The circuit manager is required to be provided with a list of\n      physical
    addresses to enable it to establish a call to the next\n      hop router on an
    X.25 SVC or ISDN B-channel.\n      The circuit manager SHOULD only allow incoming
    calls to be\n      accepted from the same well defined list of routers.\n      Elsewhere
    in the system there will be a set of logical address\n      and physical address
    tuples to enable the network protocols to\n      run over the correct circuit.
    \ This may be a lookup table, or in\n      some instances there may be an algorithmic
    conversion between\n      the two addresses.\n   o  The routing (or service advertising)
    task MUST be provided with a\n      list of logical addresses to which triggered
    updates are to be\n      sent on the WAN.  The list MAY be a subset of the list
    of next\n      hop routers maintained by the circuit manager.\n      There MAY
    also be a separate list of next hop routers to which\n      traditional broadcasts
    of routing (or service advertising)\n      updates should be sent.  Next hop routers
    omitted from either\n      list are assumed to be not participating in routing
    (or service\n      advertising) updates.\n      The list (or lists) doubles as
    a list of routers from which\n      routing updates are allowed to be received
    from the WAN.  Any\n      routing information received from a router not in the\n
    \     appropriate list MUST be discarded.\n"
  title: 9. Security Considerations
- contents:
  - "10. References\n   [1] Hedrick. C., \"Routing Information Protocol\", STD 34,
    RFC 1058,\n       Rutgers University, June 1988.\n   [2] Malkin. G., \"RIP Version
    2 - Carrying Additional Information\",\n       RFC 1388, Xylogics, January 1993.\n
    \  [3] Novell Incorporated., \"IPX Router Specification\", Version 1.10,\n       October
    1992.\n   [4] Xerox Corporation., \"Internet Transport Protocols\", Xerox System\n
    \      Integration Standard XSIS 028112, December 1981.\n   [5] Malis. A., Robinson.
    D., and R. Ullmann, \"Multiprotocol\n       Interconnect on X.25 and ISDN in the
    Packet Mode\", RFC 1356, BBN\n       Communications, Computervision Systems Integration,
    Process\n       Software Corporation, August 1992.\n"
  title: 10. References
- contents:
  - "11. Author's Address\n       Gerry Meyer\n       Spider Systems\n       Stanwell
    Street\n       Edinburgh EH6 5NG\n       Scotland, UK\n       Phone: (UK) 31 554
    9424\n       Fax:   (UK) 31 554 0649\n       EMail: gerry@spider.co.uk\n"
  title: 11. Author's Address
