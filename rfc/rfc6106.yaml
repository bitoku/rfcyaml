- title: __initial_text__
  contents:
  - '        IPv6 Router Advertisement Options for DNS Configuration

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies IPv6 Router Advertisement options to allow\n\
    \   IPv6 routers to advertise a list of DNS recursive server addresses\n   and\
    \ a DNS Search List to IPv6 hosts.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6106.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Applicability Statements ...................................3\n  \
    \    1.2. Coexistence of RA Options and DHCP Options for DNS\n           Configuration\
    \ ..............................................4\n   2. Requirements Language\
    \ ...........................................4\n   3. Terminology .....................................................4\n\
    \   4. Overview ........................................................5\n  \
    \ 5. Neighbor Discovery Extension ....................................5\n    \
    \  5.1. Recursive DNS Server Option ................................6\n      5.2.\
    \ DNS Search List Option .....................................7\n      5.3. Procedure\
    \ of DNS Configuration .............................8\n           5.3.1. Procedure\
    \ in IPv6 Host ..............................8\n           5.3.2. Warnings for\
    \ DNS Options Configuration .............10\n   6. Implementation Considerations\
    \ ..................................10\n      6.1. DNS Repository Management .................................10\n\
    \      6.2. Synchronization between DNS Server List and\n           Resolver Repository\
    \ .......................................11\n      6.3. Synchronization between\
    \ DNS Search List and\n           Resolver Repository .......................................12\n\
    \   7. Security Considerations ........................................13\n  \
    \    7.1. Security Threats ..........................................13\n    \
    \  7.2. Recommendations ...........................................14\n   8. IANA\
    \ Considerations ............................................15\n   9. Acknowledgements\
    \ ...............................................15\n   10. References ....................................................16\n\
    \      10.1. Normative References .....................................16\n  \
    \    10.2. Informative References ...................................16\n   Appendix\
    \ A.  Changes from RFC 5006 ................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The purpose of this document is to standardize an IPv6 Router\n\
    \   Advertisement (RA) option for DNS Recursive Server Addresses used for\n  \
    \ the DNS name resolution in IPv6 hosts.  This RA option was specified\n   in\
    \ an earlier Experimental specification [RFC5006].  This document is\n   also\
    \ to define a new RA option for Domain Name Search Lists for an\n   enhanced DNS\
    \ configuration.  Thus, this document obsoletes [RFC5006],\n   which only defines\
    \ the RA option for DNS Recursive Server Addresses.\n   Neighbor Discovery (ND)\
    \ for IP version 6 and IPv6 stateless address\n   autoconfiguration provide ways\
    \ to configure either fixed or mobile\n   nodes with one or more IPv6 addresses,\
    \ default routers, and some\n   other parameters [RFC4861][RFC4862].  Most Internet\
    \ services are\n   identified by using a DNS name.  The two RA options defined\
    \ in this\n   document provide the DNS information needed for an IPv6 host to\
    \ reach\n   Internet services.\n   It is infeasible to manually configure nomadic\
    \ hosts each time they\n   connect to a different network.  While a one-time static\n\
    \   configuration is possible, it is generally not desirable on general-\n   purpose\
    \ hosts such as laptops.  For instance, locally defined name\n   spaces would\
    \ not be available to the host if it were to run its own\n   name server software\
    \ directly connected to the global DNS.\n   The DNS information can also be provided\
    \ through DHCP\n   [RFC3315][RFC3736][RFC3646].  However, the access to DNS is\
    \ a\n   fundamental requirement for almost all hosts, so IPv6 stateless\n   autoconfiguration\
    \ cannot stand on its own as an alternative\n   deployment model in any practical\
    \ network without any support for DNS\n   configuration.\n   These issues are\
    \ not pressing in dual-stack networks as long as a DNS\n   server is available\
    \ on the IPv4 side, but they become more critical\n   with the deployment of IPv6-only\
    \ networks.  As a result, this\n   document defines a mechanism based on IPv6\
    \ RA options to allow IPv6\n   hosts to perform the automatic DNS configuration.\n"
- title: 1.1.  Applicability Statements
  contents:
  - "1.1.  Applicability Statements\n   RA-based DNS configuration is a useful alternative\
    \ in networks where\n   an IPv6 host's address is autoconfigured through IPv6\
    \ stateless\n   address autoconfiguration and where there is either no DHCPv6\n\
    \   infrastructure at all or some hosts do not have a DHCPv6 client.  The\n  \
    \ intention is to enable the full configuration of basic networking\n   information\
    \ for hosts without requiring DHCPv6.  However, when in\n   many networks some\
    \ additional information needs to be distributed,\n   those networks are likely\
    \ to employ DHCPv6.  In these networks, RA-\n   based DNS configuration may not\
    \ be needed.\n   RA-based DNS configuration allows an IPv6 host to acquire the\
    \ DNS\n   configuration (i.e., DNS recursive server addresses and DNS Search\n\
    \   List) for the link(s) to which the host is connected.  Furthermore,\n   the\
    \ host learns this DNS configuration from the same RA message that\n   provides\
    \ configuration information for the link, thereby avoiding\n   also running DHCPv6.\n\
    \   The advantages and disadvantages of the RA-based approach are\n   discussed\
    \ in [RFC4339] along with other approaches, such as the DHCP\n   and well-known\
    \ anycast address approaches.\n"
- title: 1.2.  Coexistence of RA Options and DHCP Options for DNS Configuration
  contents:
  - "1.2.  Coexistence of RA Options and DHCP Options for DNS Configuration\n   Two\
    \ protocols exist to configure the DNS information on a host, the\n   Router Advertisement\
    \ options described in this document and the\n   DHCPv6 options described in [RFC3646].\
    \  They can be used together.\n   The rules governing the decision to use stateful\
    \ configuration\n   mechanisms are specified in [RFC4861].  Hosts conforming to\
    \ this\n   specification MUST extract DNS information from Router Advertisement\n\
    \   messages, unless static DNS configuration has been specified by the\n   user.\
    \  If there is DNS information available from multiple Router\n   Advertisements\
    \ and/or from DHCP, the host MUST maintain an ordered\n   list of this information\
    \ as specified in Section 5.3.1.\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   This document uses the terminology described in [RFC4861]\
    \ and\n   [RFC4862].  In addition, four new terms are defined below:\n   o  Recursive\
    \ DNS Server (RDNSS): Server that provides a recursive DNS\n      resolution service\
    \ for translating domain names into IP addresses\n      as defined in [RFC1034]\
    \ and [RFC1035].\n   o  RDNSS Option: IPv6 RA option to deliver the RDNSS information\
    \ to\n      IPv6 hosts [RFC4861].\n   o  DNS Search List (DNSSL): The list of\
    \ DNS suffix domain names used\n      by IPv6 hosts when they perform DNS query\
    \ searches for short,\n      unqualified domain names.\n   o  DNSSL Option: IPv6\
    \ RA option to deliver the DNSSL information to\n      IPv6 hosts.\n   o  DNS\
    \ Repository: Two data structures for managing DNS Configuration\n      Information\
    \ in the IPv6 protocol stack in addition to Neighbor\n      Cache and Destination\
    \ Cache for Neighbor Discovery [RFC4861].  The\n      first data structure is\
    \ the DNS Server List for RDNSS addresses\n      and the second is the DNS Search\
    \ List for DNS search domain names.\n   o  Resolver Repository: Configuration\
    \ repository with RDNSS addresses\n      and a DNS Search List that a DNS resolver\
    \ on the host uses for DNS\n      name resolution; for example, the Unix resolver\
    \ file (i.e., /etc/\n      resolv.conf) and Windows registry.\n"
- title: 4.  Overview
  contents:
  - "4.  Overview\n   This document standardizes the ND option called the RDNSS option\n\
    \   defined in [RFC5006] that contains the addresses of recursive DNS\n   servers.\
    \  This document also defines a new ND option called the DNSSL\n   option for\
    \ the Domain Search List.  This is to maintain parity with\n   the DHCPv6 options\
    \ and to ensure that there is necessary\n   functionality to determine the search\
    \ domains.\n   The existing ND message (i.e., Router Advertisement) is used to\
    \ carry\n   this information.  An IPv6 host can configure the IPv6 addresses of\n\
    \   one or more RDNSSes via RA messages.  Through the RDNSS and DNSSL\n   options,\
    \ along with the prefix information option based on the ND\n   protocol ([RFC4861]\
    \ and [RFC4862]), an IPv6 host can perform the\n   network configuration of its\
    \ IPv6 address and the DNS information\n   simultaneously without needing DHCPv6\
    \ for the DNS configuration.  The\n   RA options for RDNSS and DNSSL can be used\
    \ on any network that\n   supports the use of ND.\n   This approach requires the\
    \ manual configuration or other automatic\n   mechanisms (e.g., DHCPv6 or vendor\
    \ proprietary configuration\n   mechanisms) to configure the DNS information in\
    \ routers sending the\n   advertisements.  The automatic configuration of RDNSS\
    \ addresses and a\n   DNS Search List in routers is out of scope for this document.\n"
- title: 5.  Neighbor Discovery Extension
  contents:
  - "5.  Neighbor Discovery Extension\n   The IPv6 DNS configuration mechanism in\
    \ this document needs two new\n   ND options in Neighbor Discovery: (i) the Recursive\
    \ DNS Server\n   (RDNSS) option and (ii) the DNS Search List (DNSSL) option.\n"
- title: 5.1.  Recursive DNS Server Option
  contents:
  - "5.1.  Recursive DNS Server Option\n   The RDNSS option contains one or more IPv6\
    \ addresses of recursive DNS\n   servers.  All of the addresses share the same\
    \ Lifetime value.  If it\n   is desirable to have different Lifetime values, multiple\
    \ RDNSS\n   options can be used.  Figure 1 shows the format of the RDNSS option.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Type      |     Length    |           Reserved            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                         Lifetime                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ :            Addresses of IPv6 Recursive DNS Servers            :\n     |  \
    \                                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           Figure 1: Recursive DNS Server (RDNSS) Option Format\n   Fields:\n\
    \     Type          8-bit identifier of the RDNSS option type as assigned\n  \
    \                 by the IANA: 25\n     Length        8-bit unsigned integer.\
    \  The length of the option\n                   (including the Type and Length\
    \ fields) is in units of\n                   8 octets.  The minimum value is 3\
    \ if one IPv6 address\n                   is contained in the option.  Every additional\
    \ RDNSS\n                   address increases the length by 2.  The Length field\n\
    \                   is used by the receiver to determine the number of\n     \
    \              IPv6 addresses in the option.\n     Lifetime      32-bit unsigned\
    \ integer.  The maximum time, in\n                   seconds (relative to the\
    \ time the packet is sent),\n                   over which this RDNSS address\
    \ MAY be used for name\n                   resolution.  Hosts MAY send a Router\
    \ Solicitation to\n                   ensure the RDNSS information is fresh before\
    \ the\n                   interval expires.  In order to provide fixed hosts\n\
    \                   with stable DNS service and allow mobile hosts to\n      \
    \             prefer local RDNSSes to remote RDNSSes, the value of\n         \
    \          Lifetime SHOULD be bounded as\n                   MaxRtrAdvInterval\
    \ <= Lifetime <= 2*MaxRtrAdvInterval\n                   where MaxRtrAdvInterval\
    \ is the Maximum RA Interval\n                   defined in [RFC4861].  A value\
    \ of all one bits\n                   (0xffffffff) represents infinity.  A value\
    \ of zero\n                   means that the RDNSS address MUST no longer be used.\n\
    \     Addresses of IPv6 Recursive DNS Servers\n                   One or more\
    \ 128-bit IPv6 addresses of the recursive\n                   DNS servers.  The\
    \ number of addresses is determined\n                   by the Length field. \
    \ That is, the number of\n                   addresses is equal to (Length - 1)\
    \ / 2.\n"
- title: 5.2.  DNS Search List Option
  contents:
  - "5.2.  DNS Search List Option\n   The DNSSL option contains one or more domain\
    \ names of DNS suffixes.\n   All of the domain names share the same Lifetime value.\
    \  If it is\n   desirable to have different Lifetime values, multiple DNSSL options\n\
    \   can be used.  Figure 2 shows the format of the DNSSL option.\n      0    \
    \               1                   2                   3\n      0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Type      |     Length    |           Reserved            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                         Lifetime                            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ :                Domain Names of DNS Search List                :\n     |  \
    \                                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 2: DNS Search List (DNSSL) Option Format\n  Fields:\n  \
    \  Type          8-bit identifier of the DNSSL option type as assigned\n     \
    \             by the IANA: 31\n    Length        8-bit unsigned integer.  The\
    \ length of the option\n                  (including the Type and Length fields)\
    \ is in units of\n                  8 octets.  The minimum value is 2 if at least\
    \ one\n                  domain name is contained in the option.  The Length\n\
    \                  field is set to a multiple of 8 octets to accommodate\n   \
    \               all the domain names in the field of Domain Names of\n       \
    \           DNS Search List.\n    Lifetime      32-bit unsigned integer.  The\
    \ maximum time, in\n                  seconds (relative to the time the packet\
    \ is sent),\n                  over which this DNSSL domain name MAY be used for\n\
    \                  name resolution.  The Lifetime value has the same\n       \
    \           semantics as with the RDNSS option.  That is, Lifetime\n         \
    \         SHOULD be bounded as follows:\n                  MaxRtrAdvInterval <=\
    \ Lifetime <= 2*MaxRtrAdvInterval.\n                  A value of all one bits\
    \ (0xffffffff) represents\n                  infinity.  A value of zero means\
    \ that the DNSSL\n                  domain name MUST no longer be used.\n    Domain\
    \ Names of DNS Search List\n                  One or more domain names of DNS\
    \ Search List that MUST\n                  be encoded using the technique described\
    \ in Section\n                  3.1 of [RFC1035].  By this technique, each domain\n\
    \                  name is represented as a sequence of labels ending in\n   \
    \               a zero octet, defined as domain name representation.\n       \
    \           For more than one domain name, the corresponding\n               \
    \   domain name representations are concatenated as they\n                  are.\
    \  Note that for the simple decoding, the domain\n                  names MUST\
    \ NOT be encoded in a compressed form, as\n                  described in Section\
    \ 4.1.4 of [RFC1035].  Because the\n                  size of this field MUST\
    \ be a multiple of 8 octets,\n                  for the minimum multiple including\
    \ the domain name\n                  representations, the remaining octets other\
    \ than the\n                  encoding parts of the domain name representations\n\
    \                  MUST be padded with zeros.\n   Note:  An RDNSS address or a\
    \ DNSSL domain name MUST be used only as\n      long as both the RA router Lifetime\
    \ (advertised by a Router\n      Advertisement message [RFC4861]) and the corresponding\
    \ option\n      Lifetime have not expired.  The reason is that in the current\n\
    \      network to which an IPv6 host is connected, the RDNSS may not be\n    \
    \  currently reachable, that the DNSSL domain name is not valid any\n      more,\
    \ or that these options do not provide service to the host's\n      current address\
    \ (e.g., due to network ingress filtering\n      [RFC2827][RFC5358]).\n"
- title: 5.3.  Procedure of DNS Configuration
  contents:
  - "5.3.  Procedure of DNS Configuration\n   The procedure of DNS configuration through\
    \ the RDNSS and DNSSL\n   options is the same as with any other ND option [RFC4861].\n"
- title: 5.3.1.  Procedure in IPv6 Host
  contents:
  - "5.3.1.  Procedure in IPv6 Host\n   When an IPv6 host receives DNS options (i.e.,\
    \ RDNSS option and DNSSL\n   option) through RA messages, it processes the options\
    \ as follows:\n   o  The validity of DNS options is checked with the Length field;\
    \ that\n      is, the value of the Length field in the RDNSS option is greater\n\
    \      than or equal to the minimum value (3), and the value of the\n      Length\
    \ field in the DNSSL option is greater than or equal to the\n      minimum value\
    \ (2).\n   o  If the DNS options are valid, the host SHOULD copy the values of\n\
    \      the options into the DNS Repository and the Resolver Repository in\n  \
    \    order.  Otherwise, the host MUST discard the options.  Refer to\n      Section\
    \ 6 for the detailed procedure.\n   When the IPv6 host has gathered a sufficient\
    \ number (e.g., three) of\n   RDNSS addresses (or DNS search domain names), it\
    \ SHOULD maintain\n   RDNSS addresses (or DNS search domain names) by the sufficient\
    \ number\n   such that the latest received RDNSS or DNSSL is more preferred to\
    \ the\n   old ones; that is, when the number of RDNSS addresses (or DNS search\n\
    \   domain names) is already the sufficient number, the new one replaces\n   the\
    \ old one that will expire first in terms of Lifetime.  As an\n   exceptional\
    \ case, if the received RDNSS addresses (or DNS search\n   domain names) already\
    \ exist in the IPv6 host, their Lifetime fields\n   update their Expiration-time,\
    \ that is, when the corresponding DNS\n   information expires in the IPv6 host;\
    \ note that when the Lifetime\n   field has zero, the corresponding RDNSS (or\
    \ DNS search domain name)\n   is deleted from the IPv6 host.  Except for this\
    \ update, the IPv6 host\n   SHOULD ignore other RDNSS addresses (or DNS search\
    \ domain names)\n   within an RDNSS (or a DNSSL) option and/or additional RDNSS\
    \ (or\n   DNSSL) options within an RA.  Refer to Section 6 for the detailed\n\
    \   procedure.  Note that the sufficient number is a system parameter, so\n  \
    \ it can be determined by a local policy.  Also, separate parameters\n   can be\
    \ specified for the sufficient number of RDNSS addresses and\n   that of DNS search\
    \ domain names, respectively.  In this document,\n   three is RECOMMENDED as a\
    \ sufficient number considering both the\n   robust DNS query and the reasonably\
    \ time-bounded recognition of the\n   unreachability of DNS servers.\n   In the\
    \ case where the DNS options of RDNSS and DNSSL can be obtained\n   from multiple\
    \ sources, such as RA and DHCP, the IPv6 host SHOULD keep\n   some DNS options\
    \ from all sources.  Unless explicitly specified for\n   the discovery mechanism,\
    \ the exact number of addresses and domain\n   names to keep is a matter of local\
    \ policy and implementation choice.\n   However, the ability to store at least\
    \ three RDNSS addresses (or\n   DNSSL domain names) from at least two different\
    \ sources is\n   RECOMMENDED.  The DNS options from Router Advertisements and\
    \ DHCP\n   SHOULD be stored into the DNS Repository and Resolver Repository so\n\
    \   that information from DHCP appears there first and therefore takes\n   precedence.\
    \  Thus, the DNS information from DHCP takes precedence\n   over that from RA\
    \ for DNS queries.  On the other hand, for DNS\n   options announced by RA, if\
    \ some RAs use the Secure Neighbor\n   Discovery (SEND) protocol [RFC3971] for\
    \ RA security, they MUST be\n   preferred over those that do not use SEND.  Refer\
    \ to Section 7 for\n   the detailed discussion on SEND for RA DNS options.\n"
- title: 5.3.2.  Warnings for DNS Options Configuration
  contents:
  - "5.3.2.  Warnings for DNS Options Configuration\n   There are two warnings for\
    \ DNS options configuration: (i) warning for\n   multiple sources of DNS options\
    \ and (ii) warning for multiple network\n   interfaces.  First, in the case of\
    \ multiple sources for DNS options\n   (e.g., RA and DHCP), an IPv6 host can configure\
    \ its IP addresses from\n   these sources.  In this case, it is not possible to\
    \ control how the\n   host uses DNS information and what source addresses it uses\
    \ to send\n   DNS queries.  As a result, configurations where different information\n\
    \   is provided by different sources may lead to problems.  Therefore,\n   the\
    \ network administrator needs to configure DNS options in multiple\n   sources\
    \ in order to prevent such problems from happening.\n   Second, if different DNS\
    \ information is provided on different network\n   interfaces, this can lead to\
    \ inconsistent behavior.  The IETF is\n   working on solving this problem for\
    \ both DNS and other information\n   obtained by multiple interfaces [MIF-PROBLEM][MIF-PRACTICE].\n"
- title: 6.  Implementation Considerations
  contents:
  - "6.  Implementation Considerations\n   Note:  This non-normative section gives\
    \ some hints for implementing\n      the processing of the RDNSS and DNSSL options\
    \ in an IPv6 host.\n   For the configuration and management of DNS information,\
    \ the\n   advertised DNS configuration information can be stored and managed in\n\
    \   both the DNS Repository and the Resolver Repository.\n   In environments where\
    \ the DNS information is stored in user space and\n   ND runs in the kernel, it\
    \ is necessary to synchronize the DNS\n   information (i.e., RDNSS addresses and\
    \ DNS search domain names) in\n   kernel space and the Resolver Repository in\
    \ user space.  For the\n   synchronization, an implementation where ND works in\
    \ the kernel\n   should provide a write operation for updating DNS information\
    \ from\n   the kernel to the Resolver Repository.  One simple approach is to\n\
    \   have a daemon (or a program that is called at defined intervals) that\n  \
    \ keeps monitoring the Lifetimes of RDNSS addresses and DNS search\n   domain\
    \ names all the time.  Whenever there is an expired entry in the\n   DNS Repository,\
    \ the daemon can delete the corresponding entry from\n   the Resolver Repository.\n"
- title: 6.1.  DNS Repository Management
  contents:
  - "6.1.  DNS Repository Management\n   For DNS repository management, the kernel\
    \ or user-space process\n   (depending on where RAs are processed) should maintain\
    \ two data\n   structures: (i) DNS Server List that keeps the list of RDNSS\n\
    \   addresses and (ii) DNS Search List that keeps the list of DNS search\n   domain\
    \ names.  Each entry in these two lists consists of a pair of an\n   RDNSS address\
    \ (or DNSSL domain name) and Expiration-time as follows:\n   o  RDNSS address\
    \ for DNS Server List: IPv6 address of the Recursive\n      DNS Server, which\
    \ is available for recursive DNS resolution\n      service in the network advertising\
    \ the RDNSS option.\n   o  DNSSL domain name for DNS Search List: DNS suffix domain\
    \ names,\n      which are used to perform DNS query searches for short,\n    \
    \  unqualified domain names in the network advertising the DNSSL\n      option.\n\
    \   o  Expiration-time for DNS Server List or DNS Search List: The time\n    \
    \  when this entry becomes invalid.  Expiration-time is set to the\n      value\
    \ of the Lifetime field of the RDNSS option or DNSSL option\n      plus the current\
    \ system time.  Whenever a new RDNSS option with\n      the same address (or DNSSL\
    \ option with the same domain name) is\n      received on the same interface as\
    \ a previous RDNSS option (or\n      DNSSL option), this field is updated to have\
    \ a new Expiration-\n      time.  When Expiration-time becomes less than the current\
    \ system\n      time, this entry is regarded as expired.\n"
- title: 6.2.  Synchronization between DNS Server List and Resolver Repository
  contents:
  - "6.2.  Synchronization between DNS Server List and Resolver Repository\n   When\
    \ an IPv6 host receives the information of multiple RDNSS\n   addresses within\
    \ a network (e.g., campus network and company network)\n   through an RA message\
    \ with RDNSS option(s), it stores the RDNSS\n   addresses (in order) into both\
    \ the DNS Server List and the Resolver\n   Repository.  The processing of the\
    \ RDNSS consists of (i) the\n   processing of RDNSS option(s) included in an RA\
    \ message and (ii) the\n   handling of expired RDNSSes.  The processing of RDNSS\
    \ option(s) is as\n   follows:\n      Step (a): Receive and parse the RDNSS option(s).\
    \  For the RDNSS\n      addresses in each RDNSS option, perform Steps (b) through\
    \ (d).\n      Step (b): For each RDNSS address, check the following: If the\n\
    \      RDNSS address already exists in the DNS Server List and the RDNSS\n   \
    \   option's Lifetime field is set to zero, delete the corresponding\n      RDNSS\
    \ entry from both the DNS Server List and the Resolver\n      Repository in order\
    \ to prevent the RDNSS address from being used\n      any more for certain reasons\
    \ in network management, e.g., the\n      termination of the RDNSS or a renumbering\
    \ situation.  That is, the\n      RDNSS can resign from its DNS service because\
    \ the machine running\n      the RDNSS is out of service intentionally or unintentionally.\n\
    \      Also, under the renumbering situation, the RDNSS's IPv6 address\n     \
    \ will be changed, so the previous RDNSS address should not be used\n      any\
    \ more.  The processing of this RDNSS address is finished here.\n      Otherwise,\
    \ go to Step (c).\n      Step (c): For each RDNSS address, if it already exists\
    \ in the DNS\n      Server List, then just update the value of the Expiration-time\n\
    \      field according to the procedure specified in the third bullet of\n   \
    \   Section 6.1.  Otherwise, go to Step (d).\n      Step (d): For each RDNSS address,\
    \ if it does not exist in the DNS\n      Server List, register the RDNSS address\
    \ and Lifetime with the DNS\n      Server List and then insert the RDNSS address\
    \ in front of the\n      Resolver Repository.  In the case where the data structure\
    \ for the\n      DNS Server List is full of RDNSS entries (that is, has more\n\
    \      RDNSSes than the sufficient number discussed in Section 5.3.1),\n     \
    \ delete from the DNS Server List the entry with the shortest\n      Expiration-time\
    \ (i.e., the entry that will expire first).  The\n      corresponding RDNSS address\
    \ is also deleted from the Resolver\n      Repository.  For the ordering of RDNSS\
    \ addresses in an RDNSS\n      option, position the first RDNSS address in the\
    \ RDNSS option as\n      the first one in the Resolver Repository, the second\
    \ RDNSS address\n      in the option as the second one in the repository, and\
    \ so on.\n      This ordering allows the RDNSS addresses in the RDNSS option to\
    \ be\n      preferred according to their order in the RDNSS option for the DNS\n\
    \      name resolution.  The processing of these RDNSS addresses is\n      finished\
    \ here.\n   The handling of expired RDNSSes is as follows: Whenever an entry\n\
    \   expires in the DNS Server List, the expired entry is deleted from the\n  \
    \ DNS Server List, and also the RDNSS address corresponding to the\n   entry is\
    \ deleted from the Resolver Repository.\n"
- title: 6.3.  Synchronization between DNS Search List and Resolver Repository
  contents:
  - "6.3.  Synchronization between DNS Search List and Resolver Repository\n   When\
    \ an IPv6 host receives the information of multiple DNSSL domain\n   names within\
    \ a network (e.g., campus network and company network)\n   through an RA message\
    \ with DNSSL option(s), it stores the DNSSL\n   domain names (in order) into both\
    \ the DNS Search List and the\n   Resolver Repository.  The processing of the\
    \ DNSSL consists of (i) the\n   processing of DNSSL option(s) included in an RA\
    \ message and (ii) the\n   handling of expired DNSSLs.  The processing of DNSSL\
    \ option(s) is as\n   follows:\n      Step (a): Receive and parse the DNSSL option(s).\
    \  For the DNSSL\n      domain names in each DNSSL option, perform Steps (b) through\
    \ (d).\n      Step (b): For each DNSSL domain name, check the following: If the\n\
    \      DNSSL domain name already exists in the DNS Search List and the\n     \
    \ DNSSL option's Lifetime field is set to zero, delete the\n      corresponding\
    \ DNSSL entry from both the DNS Search List and the\n      Resolver Repository\
    \ in order to prevent the DNSSL domain name from\n      being used any more for\
    \ certain reasons in network management,\n      e.g., the termination of the RDNSS\
    \ or a renaming situation.  That\n      is, the RDNSS can resign from its DNS\
    \ service because the machine\n      running the RDNSS is out of service intentionally\
    \ or\n      unintentionally.  Also, under the renaming situation, the DNSSL\n\
    \      domain names will be changed, so the previous domain names should\n   \
    \   not be used any more.  The processing of this DNSSL domain name is\n     \
    \ finished here.  Otherwise, go to Step (c).\n      Step (c): For each DNSSL domain\
    \ name, if it already exists in the\n      DNS Server List, then just update the\
    \ value of the Expiration-time\n      field according to the procedure specified\
    \ in the third bullet of\n      Section 6.1.  Otherwise, go to Step (d).\n   \
    \   Step (d): For each DNSSL domain name, if it does not exist in the\n      DNS\
    \ Search List, register the DNSSL domain name and Lifetime with\n      the DNS\
    \ Search List and then insert the DNSSL domain name in front\n      of the Resolver\
    \ Repository.  In the case where the data structure\n      for the DNS Search\
    \ List is full of DNSSL domain name entries (that\n      is, has more DNSSL domain\
    \ names than the sufficient number\n      discussed in Section 5.3.1), delete\
    \ from the DNS Server List the\n      entry with the shortest Expiration-time\
    \ (i.e., the entry that will\n      expire first).  The corresponding DNSSL domain\
    \ name is also\n      deleted from the Resolver Repository.  For the ordering\
    \ of DNSSL\n      domain names in a DNSSL option, position the first DNSSL domain\n\
    \      name in the DNSSL option as the first one in the Resolver\n      Repository,\
    \ the second DNSSL domain name in the option as the\n      second one in the repository,\
    \ and so on.  This ordering allows the\n      DNSSL domain names in the DNSSL\
    \ option to be preferred according\n      to their order in the DNSSL option for\
    \ the DNS domain name used by\n      the DNS query.  The processing of these DNSSL\
    \ domain name is\n      finished here.\n      The handling of expired DNSSLs is\
    \ as follows: Whenever an entry\n      expires in the DNS Search List, the expired\
    \ entry is deleted from\n      the DNS Search List, and also the DNSSL domain\
    \ name corresponding\n      to the entry is deleted from the Resolver Repository.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   In this section, we analyze security threats\
    \ related to DNS options\n   and then suggest recommendations to cope with such\
    \ security threats.\n"
- title: 7.1.  Security Threats
  contents:
  - "7.1.  Security Threats\n   For the RDNSS option, an attacker could send an RA\
    \ with a fraudulent\n   RDNSS address, misleading IPv6 hosts into contacting an\
    \ unintended\n   DNS server for DNS name resolution.  Also, for the DNSSL option,\
    \ an\n   attacker can let IPv6 hosts resolve a host name without a DNS suffix\n\
    \   into an unintended host's IP address with a fraudulent DNS Search\n   List.\n\
    \   These attacks are similar to Neighbor Discovery attacks that use\n   Redirect\
    \ or Neighbor Advertisement messages to redirect traffic to\n   individual addresses\
    \ of malicious parties.  That is, as a rogue\n   router, a malicious node on a\
    \ LAN can promiscuously receive packets\n   for any router's Media Access Control\
    \ (MAC) address and send packets\n   with the router's MAC address as the source\
    \ MAC address in the Layer\n   2 (L2) header.  As a result, L2 switches send packets\
    \ addressed to\n   the router to the malicious node.  Also, this attack can send\n\
    \   redirects that tell the hosts to send their traffic somewhere else.\n   The\
    \ malicious node can send unsolicited RA or Neighbor Advertisement\n   (NA) replies,\
    \ answer RS or Neighbor Solicitation (NS) requests, etc.\n   Thus, the attacks\
    \ related to RDNSS and DNSSL are similar to both\n   Neighbor Discovery attacks\
    \ and attacks against unauthenticated DHCP,\n   as both can be used for both \"\
    wholesale\" traffic redirection and more\n   specific attacks.\n   However, the\
    \ security of these RA options for DNS configuration does\n   not affect ND protocol\
    \ security [RFC4861].  This is because learning\n   DNS information via the RA\
    \ options cannot be worse than learning bad\n   router information via the RA\
    \ options.  Therefore, the vulnerability\n   of ND is not worse and is a subset\
    \ of the attacks that any node\n   attached to a LAN can do independently of ND.\n"
- title: 7.2.  Recommendations
  contents:
  - "7.2.  Recommendations\n   The Secure Neighbor Discovery (SEND) protocol [RFC3971]\
    \ is used as a\n   security mechanism for ND.  It is RECOMMENDED that ND use SEND\
    \ to\n   allow all the ND options including the RDNSS and DNSSL options to be\n\
    \   automatically included in the signatures.  Through SEND, the\n   transport\
    \ for the RA options is integrity protected; that is, SEND\n   can prevent the\
    \ spoofing of these DNS options with signatures.  Also,\n   SEND enables an IPv6\
    \ host to verify that the sender of an RA is\n   actually a router authorized\
    \ to act as a router.  However, since any\n   valid SEND router can still insert\
    \ RDNSS and DNSSL options, the\n   current SEND cannot verify which one is or\
    \ is not authorized to send\n   the options.  Thus, this verification of the authorized\
    \ routers for\n   ND options will be required.  [CSI-SEND-CERT] specifies the\
    \ usage of\n   extended key for the certificate deployed in SEND.  This document\n\
    \   defines the roles of routers (i.e., routers acting as proxy and\n   address\
    \ owner) and explains the authorization of the roles.  The\n   mechanism in this\
    \ document can be extended to verify which routers\n   are authorized to insert\
    \ RDNSS and DNSSL options.\n   It is common for network devices such as switches\
    \ to include\n   mechanisms to block unauthorized ports from running a DHCPv6\
    \ server\n   to provide protection from rogue DHCP servers.  That means that an\n\
    \   attacker on other ports cannot insert bogus DNS servers using DHCPv6.\n  \
    \ The corresponding technique for network devices is RECOMMENDED to\n   block\
    \ rogue Router Advertisement messages including the RDNSS and\n   DNSSL options\
    \ from unauthorized nodes.\n   An attacker may provide a bogus DNS Search List\
    \ option in order to\n   cause the victim to send DNS queries to a specific DNS\
    \ server when\n   the victim queries non-FQDNs (fully qualified domain names).\
    \  For\n   this attack, the DNS resolver in IPv6 hosts can mitigate the\n   vulnerability\
    \ with the recommendations mentioned in [RFC1535],\n   [RFC1536], and [RFC3646].\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   The RDNSS option defined in this document uses the\
    \ IPv6 Neighbor\n   Discovery Option type defined in RFC 5006 [RFC5006], which\
    \ was\n   assigned by the IANA as follows:\n                 Option Name     \
    \              Type\n                 Recursive DNS Server Option   25\n   The\
    \ IANA has assigned a new IPv6 Neighbor Discovery Option type for\n   the DNSSL\
    \ option defined in this document:\n                 Option Name             \
    \      Type\n                 DNS Search List Option        31\n   These options\
    \ have been registered in the \"Internet Control Message\n   Protocol version\
    \ 6 (ICMPv6) Parameters\" registry\n   (http://www.iana.org).\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   This document has greatly benefited from inputs by Robert\
    \ Hinden,\n   Pekka Savola, Iljitsch van Beijnum, Brian Haberman, Tim Chown, Erik\n\
    \   Nordmark, Dan Wing, Jari Arkko, Ben Campbell, Vincent Roca, and Tony\n   Cheneau.\
    \  The authors sincerely appreciate their contributions.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]        Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n                    Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC4861]        Narten, T., Nordmark, E., Simpson, W.,\
    \ and H.\n                    Soliman, \"Neighbor Discovery for IP version 6\n\
    \                    (IPv6)\", RFC 4861, September 2007.\n   [RFC4862]       \
    \ Thomson, S., Narten, T., and T. Jinmei, \"IPv6\n                    Stateless\
    \ Address Autoconfiguration\", RFC 4862,\n                    September 2007.\n\
    \   [RFC1035]        Mockapetris, P., \"Domain names - implementation and\n  \
    \                  specification\", STD 13, RFC 1035, November 1987.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC1034]        Mockapetris, P., \"Domain\
    \ names - concepts and\n                    facilities\", STD 13, RFC 1034, November\
    \ 1987.\n   [RFC3315]        Droms, R., Bound, J., Volz, B., Lemon, T., Perkins,\n\
    \                    C., and M. Carney, \"Dynamic Host Configuration\n       \
    \             Protocol for IPv6 (DHCPv6)\", RFC 3315, July 2003.\n   [RFC3736]\
    \        Droms, R., \"Stateless Dynamic Host Configuration\n                 \
    \   Protocol (DHCP) Service for IPv6\", RFC 3736,\n                    April 2004.\n\
    \   [RFC3646]        Droms, R., \"DNS Configuration options for Dynamic\n    \
    \                Host Configuration Protocol for IPv6 (DHCPv6)\",\n          \
    \          RFC 3646, December 2003.\n   [RFC5006]        Jeong, J., Park, S.,\
    \ Beloeil, L., and S.\n                    Madanapalli, \"IPv6 Router Advertisement\
    \ Option for\n                    DNS Configuration\", RFC 5006, September 2007.\n\
    \   [RFC4339]        Jeong, J., \"IPv6 Host Configuration of DNS Server\n    \
    \                Information Approaches\", RFC 4339, February 2006.\n   [RFC3971]\
    \        Arkko, J., Kempf, J., Zill, B., and P. Nikander,\n                  \
    \  \"SEcure Neighbor Discovery (SEND)\", RFC 3971,\n                    March\
    \ 2005.\n   [RFC5358]        Damas, J. and F. Neves, \"Preventing Use of Recursive\n\
    \                    Nameservers in Reflector Attacks\", BCP 140,\n          \
    \          RFC 5358, October 2008.\n   [RFC2827]        Ferguson, P. and D. Senie,\
    \ \"Network Ingress\n                    Filtering: Defeating Denial of Service\
    \ Attacks which\n                    employ IP Source Address Spoofing\", BCP\
    \ 38,\n                    RFC 2827, May 2000.\n   [RFC1535]        Gavron, E.,\
    \ \"A Security Problem and Proposed\n                    Correction With Widely\
    \ Deployed DNS Software\",\n                    RFC 1535, October 1993.\n   [RFC1536]\
    \        Kumar, A., Postel, J., Neuman, C., Danzig, P., and\n                \
    \    S. Miller, \"Common DNS Implementation Errors and\n                    Suggested\
    \ Fixes\", RFC 1536, October 1993.\n   [MIF-PROBLEM]    Blanchet, M. and P. Seite,\
    \ \"Multiple Interfaces\n                    Problem Statement\", Work in Progress,\
    \ August 2010.\n   [MIF-PRACTICE]   Wasserman, M. and P. Seite, \"Current Practices\
    \ for\n                    Multiple Interface Hosts\", Work in Progress,\n   \
    \                 August 2010.\n   [CSI-SEND-CERT]  Gagliano, R., Krishnan, S.,\
    \ and A. Kukec,\n                    \"Certificate profile and certificate management\
    \ for\n                    SEND\", Work in Progress, October 2010.\n"
- title: Appendix A.  Changes from RFC 5006
  contents:
  - "Appendix A.  Changes from RFC 5006\n   The following changes were made from RFC\
    \ 5006 \"IPv6 Router\n   Advertisement Option for DNS Configuration\":\n   o \
    \ Added the DNS Search List (DNSSL) option to support the\n      advertisement\
    \ of DNS suffixes used in the DNS search along with\n      RDNSS option in RFC\
    \ 5006.\n   o  Clarified the coexistence of RA options and DHCP options for DNS\n\
    \      configuration.\n   o  Modified the procedure in IPv6 host:\n      *  Clarified\
    \ the procedure for DNS options in an IPv6 host.\n      *  Specified a sufficient\
    \ number of RDNSS addresses or DNS search\n         domain names as three.\n \
    \     *  Specified a way to deal with DNS options from multiple sources,\n   \
    \      such as RA and DHCP.\n   o  Modified the implementation considerations\
    \ for DNSSL option\n      handling.\n   o  Modified the security considerations\
    \ to consider more attack\n      scenarios and the corresponding possible solutions.\n\
    \   o  Modified the IANA considerations to require another IPv6 Neighbor\n   \
    \   Discovery Option type for the DNSSL option.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jaehoon Paul Jeong\n   Brocade Communications Systems/ETRI\n\
    \   6000 Nathan Ln N\n   Plymouth, MN  55442\n   USA\n   Phone: +1 763 268 7173\n\
    \   Fax:   +1 763 268 6800\n   EMail: pjeong@brocade.com\n   URI:   http://www.cs.umn.edu/~jjeong/\n\
    \   Soohong Daniel Park\n   Digital Media & Communications R&D Center\n   SAMSUNG\
    \ Electronics\n   416 Maetan-3dong, Yeongtong-Gu\n   Suwon, Gyeonggi-Do  443-742\n\
    \   Korea\n   Phone: +82 31 279 8876\n   EMail: soohong.park@samsung.com\n   Luc\
    \ Beloeil\n   France Telecom R&D\n   42, rue des coutures\n   BP 6243\n   14066\
    \ CAEN Cedex 4\n   France\n   Phone: +33 2 40 44 97 40\n   EMail: luc.beloeil@orange-ftgroup.com\n\
    \   Syam Madanapalli\n   iRam Technologies\n   #H304, Shriram Samruddhi, Thubarahalli\n\
    \   Bangalore - 560066\n   India\n   EMail: smadanapalli@gmail.com\n"
