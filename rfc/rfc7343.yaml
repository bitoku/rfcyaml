- title: __initial_text__
  contents:
  - "                           An IPv6 Prefix for\n  Overlay Routable Cryptographic\
    \ Hash Identifiers Version 2 (ORCHIDv2)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an updated Overlay Routable Cryptographic\n\
    \   Hash Identifiers (ORCHID) format that obsoletes that in RFC 4843.\n   These\
    \ identifiers are intended to be used as endpoint identifiers at\n   applications\
    \ and Application Programming Interfaces (APIs) and not as\n   identifiers for\
    \ network location at the IP layer, i.e., locators.\n   They are designed to appear\
    \ as application-layer entities and at the\n   existing IPv6 APIs, but they should\
    \ not appear in actual IPv6\n   headers.  To make them more like regular IPv6\
    \ addresses, they are\n   expected to be routable at an overlay level.  Consequently,\
    \ while\n   they are considered non-routable addresses from the IPv6-layer\n \
    \  perspective, all existing IPv6 applications are expected to be able\n   to\
    \ use them in a manner compatible with current IPv6 addresses.\n   The Overlay\
    \ Routable Cryptographic Hash Identifiers originally\n   defined in RFC 4843 lacked\
    \ a mechanism for cryptographic algorithm\n   agility.  The updated ORCHID format\
    \ specified in this document\n   removes this limitation by encoding, in the identifier\
    \ itself, an\n   index to the suite of cryptographic algorithms in use.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7343.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Rationale and Intent  . . . . . . . . . . . . . .\
    \ . . . .   3\n     1.2.  ORCHID Properties . . . . . . . . . . . . . . . . .\
    \ . . .   4\n     1.3.  Expected Use of ORCHIDs . . . . . . . . . . . . . . .\
    \ . .   5\n     1.4.  Action Plan . . . . . . . . . . . . . . . . . . . . . .\
    \ .   5\n     1.5.  Terminology . . . . . . . . . . . . . . . . . . . . . . .\
    \   5\n   2.  Cryptographic Hash Identifier Construction  . . . . . . . . .  \
    \ 5\n   3.  Routing and Forwarding Considerations . . . . . . . . . . . .   7\n\
    \   4.  Design Choices  . . . . . . . . . . . . . . . . . . . . . . .   8\n  \
    \ 5.  Security Considerations . . . . . . . . . . . . . . . . . . .   8\n   6.\
    \  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  10\n   7.  Contributors\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  11\n   8.  Acknowledgments\
    \ . . . . . . . . . . . . . . . . . . . . . . .  11\n   9.  References  . . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  11\n     9.1.  Normative References\
    \  . . . . . . . . . . . . . . . . . .  11\n     9.2.  Informative References\
    \  . . . . . . . . . . . . . . . . .  11\n   Appendix A.  Collision Considerations\
    \ . . . . . . . . . . . . . .  13\n   Appendix B.  Changes from RFC 4843  . .\
    \ . . . . . . . . . . . . .  13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document introduces Overlay Routable Cryptographic\
    \ Hash\n   Identifiers (ORCHID), a new class of identifiers that are like IP\n\
    \   addresses.  These identifiers are intended to be globally unique in a\n  \
    \ statistical sense (see Appendix A), non-routable at the IP layer, and\n   routable\
    \ at some overlay layer.  The identifiers are securely bound,\n   via a secure\
    \ hash function, to the concatenation of an input\n   bitstring and a context\
    \ tag.  Typically, but not necessarily, the\n   input bitstring will include a\
    \ suitably encoded public cryptographic\n   key.\n"
- title: 1.1.  Rationale and Intent
  contents:
  - "1.1.  Rationale and Intent\n   These identifiers are expected to be used at the\
    \ existing IPv6\n   Application Programming Interfaces (APIs) and application\
    \ protocols\n   between consenting hosts.  They may be defined and used in different\n\
    \   contexts, suitable for different overlay protocols.  Examples of\n   these\
    \ include Host Identity Tags (HITs) in the Host Identity Protocol\n   (HIP) [HIPv2]\
    \ and Temporary Mobile Identifiers (TMIs) for Mobile IPv6\n   Privacy Extension\
    \ [PRIVACYTEXT].\n   As these identifiers are expected to be used along with IPv6\n\
    \   addresses at both applications and APIs, coordination is desired to\n   make\
    \ sure that an ORCHID is not inappropriately taken for a regular\n   IPv6 address\
    \ and vice versa.  In practice, allocation of a separate\n   prefix for ORCHIDs\
    \ seems to suffice, making them compatible with IPv6\n   addresses at the upper\
    \ layers while simultaneously making it trivial\n   to prevent their use at the\
    \ IP layer.\n   While being technically possible to use ORCHIDs between consenting\n\
    \   hosts without any coordination with the IETF and the IANA, the IETF\n   would\
    \ consider such practice potentially dangerous.  A specific\n   danger would be\
    \ realized if the IETF community later decided to use\n   the ORCHID prefix for\
    \ some different purpose.  In that case, hosts\n   using the ORCHID prefix would\
    \ be, for practical purposes, unable to\n   use the prefix for the other new purpose.\
    \  That would lead to partial\n   balkanization of the Internet, similar to what\
    \ has happened as a\n   result of historical hijackings of IPv4 addresses that\
    \ are not RFC\n   1918 [RFC1918] for private use.\n   The whole need for the proposed\
    \ allocation grows from the desire to\n   be able to use ORCHIDs with existing\
    \ applications and APIs.  This\n   desire leads to the potential conflict, mentioned\
    \ above.  Resolving\n   the conflict requires the proposed allocation.\n   One\
    \ can argue that the desire to use these kinds of identifiers via\n   existing\
    \ APIs is architecturally wrong, and there is some truth in\n   that argument.\
    \  Indeed, it would be more desirable to introduce a new\n   API and update all\
    \ applications to use identifiers, rather than\n   locators, via that new API.\
    \  That is exactly what we expect to happen\n   in the long run.\n   However,\
    \ given the current state of the Internet, we do not consider\n   it viable to\
    \ introduce any changes that, at once, require\n   applications to be rewritten\
    \ and host stacks to be updated.  Rather\n   than that, we believe in piece-wise\
    \ architectural changes that\n   require only one of the existing assets to be\
    \ touched.  ORCHIDs are\n   designed to address this situation: to allow people\
    \ to implement with\n   protocol stack extensions, such as secure overlay routing,\
    \ HIP, or\n   Mobile IP privacy extensions, without requiring them to update their\n\
    \   applications.  The goal is to facilitate large-scale deployments with\n  \
    \ minimum user effort.\n   For example, at the time of this writing, there already\
    \ exist HIP\n   implementations that run fully in user space, using the operating\n\
    \   system to divert a certain part of the IPv6 address space to a user-\n   level\
    \ daemon for HIP processing.  In practical terms, these\n   implementations are\
    \ already using a certain IPv6 prefix for\n   differentiating HIP identifiers\
    \ from IPv6 addresses, allowing them\n   both to be used by the existing applications\
    \ via the existing APIs.\n   The Overlay Routable Cryptographic Hash Identifiers\
    \ originally\n   defined in [RFC4843] lacked a mechanism for cryptographic algorithm\n\
    \   agility.  The updated ORCHID format specified in this document\n   removes\
    \ this limitation by encoding, in the identifier itself, an\n   index to the suite\
    \ of cryptographic algorithms in use.\n   Because the updated ORCHIDv2 format\
    \ is not backward compatible, IANA\n   has allocated a new 28-bit prefix out of\
    \ the IANA IPv6 Special\n   Purpose Address Block, namely 2001:0000::/23, as per\
    \ [RFC6890].  The\n   prefix that was temporarily allocated for the experimental\
    \ ORCHID was\n   returned to IANA in March 2014 [RFC4843].\n"
- title: 1.2.  ORCHID Properties
  contents:
  - "1.2.  ORCHID Properties\n   ORCHIDs are designed to have the following properties:\n\
    \   o  Statistical uniqueness (see also Appendix A).\n   o  Secure binding to\
    \ the input parameters used in their generation\n      (i.e., the Context Identifier\
    \ and a bitstring).\n   o  Aggregation under a single IPv6 prefix.  Note that\
    \ this is only\n      needed due to the coordination need as indicated above.\
    \  Without\n      such coordination need, the ORCHID namespace could potentially\
    \ be\n      completely flat.\n   o  Non-routability at the IP layer, by design.\n\
    \   o  Routability at some overlay layer, making them, from an\n      application\
    \ point of view, semantically similar to IPv6 addresses.\n   As mentioned above,\
    \ ORCHIDs are intended to be generated and used in\n   different contexts, as\
    \ suitable for different mechanisms and\n   protocols.  The Context Identifier\
    \ is meant to be used to\n   differentiate between the different contexts; see\
    \ Appendix A for a\n   discussion of the related API issues implementation issues\
    \ and\n   Section 4 for the design choices explaining why the Context\n   Identifiers\
    \ are used.\n"
- title: 1.3.  Expected Use of ORCHIDs
  contents:
  - "1.3.  Expected Use of ORCHIDs\n   Examples of identifiers and protocols that\
    \ are expected to adopt the\n   ORCHID format include Host Identity Tags (HITs)\
    \ in the Host Identity\n   Protocol [HIPv2] and the Temporary Mobile Identifiers\
    \ (TMIs) in the\n   Simple Privacy Extension for Mobile IPv6 [PRIVACYTEXT].  The\
    \ format\n   is designed to be extensible to allow other experimental proposals\
    \ to\n   share the same namespace.\n"
- title: 1.4.  Action Plan
  contents:
  - "1.4.  Action Plan\n   This document requests IANA to allocate a prefix out of\
    \ the IPv6\n   addressing space for Overlay Routable Cryptographic Hash Identifiers.\n"
- title: 1.5.  Terminology
  contents:
  - "1.5.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 2.  Cryptographic Hash Identifier Construction
  contents:
  - "2.  Cryptographic Hash Identifier Construction\n   An ORCHID is generated using\
    \ the ORCHID Generation Algorithm (OGA).\n   The algorithm takes a bitstring and\
    \ a Context Identifier as input and\n   produces an ORCHID as output.  The hash\
    \ function used in the ORCHID\n   Generation Algorithm is defined for each OGA\
    \ identifier by the\n   specification for the respective usage context (e.g.,\
    \ HIPv2).\n Input      :=  any bitstring\n OGA ID     :=  4-bit Orchid Generation\
    \ Algorithm identifier\n Hash Input :=  Context ID | Input\n Hash       :=  Hash_function(\
    \ Hash Input )\n ORCHID     :=  Prefix | OGA ID | Encode_96( Hash )\n where:\n\
    \ |               : Denotes concatenation of bitstrings\n Input           : A\
    \ bitstring that is unique or statistically unique\n                   within\
    \ a given context.  The bitstring is intended\n                   to be associated\
    \ with the to-be-created ORCHID in\n                   the given context.\n Context\
    \ ID      : A randomly generated value defining the expected\n               \
    \    usage context for the particular ORCHID and the\n                   hash\
    \ function to be used for generation of ORCHIDs\n                   in this context.\
    \  These values are allocated out of\n                   the namespace introduced\
    \ for Cryptographically\n                   Generated Addresses (CGA) Type Tags\
    \ (see RFC 3972 and\n                   http://www.iana.org/assignments/cga-message-types).\n\
    \ OGA ID          : A 4-bit-long identifier for the Hash_function\n          \
    \         in use within the specific usage context.\n Hash_function   : The one-way\
    \ hash function (i.e., hash function\n                   with preimage resistance\
    \ and second-preimage\n                   resistance) to be used as identified\
    \ by the\n                   value for the OGA ID according document\n       \
    \            defining the context usage identified by the\n                  \
    \ Context ID.  For example, version 2 of the\n                   HIP specification\
    \ defines truncated SHA1 [RFC3174] as\n                   the hash function to\
    \ be used to generate\n                   ORCHIDv2 in the HIPv2 protocol when\
    \ the\n                   OGA ID is 3 [HIPv2].\n Encode_96( )    : An extraction\
    \ function in which output is obtained\n                   by extracting the middle\
    \ 96-bit-long bitstring\n                   from the argument bitstring.\n Prefix\
    \          : A constant 28-bit-long bitstring value\n                   (2001:20::/28).\n\
    \   To form an ORCHID, two pieces of input data are needed.  The first\n   piece\
    \ can be any bitstring, but it is typically expected to contain a\n   public cryptographic\
    \ key and some other data.  The second piece is a\n   Context Identifier, which\
    \ is a 128-bit-long datum, allocated as\n   specified in Section 6.  Each specific\
    \ ORCHIDv2 application (such as\n   HIP HITs or MIP6 TMIs) is expected to allocate\
    \ their own, specific\n   Context Identifier.\n   The input bitstring and Context\
    \ Identifier are concatenated to form\n   an input datum, which is then fed to\
    \ the cryptographic hash function\n   to be used for the value of the OGA identifier\
    \ according to the\n   document defining the context usage identified by the Context\
    \ ID.\n   The result of the hash function is processed by an encoding function,\n\
    \   resulting in a 96-bit-long value.  This value is prepended with the\n   concatenation\
    \ of the 28-bit ORCHID prefix and the 4-bit OGA ID.  The\n   result is the ORCHID,\
    \ a 128-bit-long bitstring that can be used at\n   the IPv6 APIs in hosts participating\
    \ to the particular experiment.\n   The ORCHID prefix is allocated under the IPv6\
    \ global unicast address\n   block.  Hence, ORCHIDs are indistinguishable from\
    \ IPv6 global unicast\n   addresses.  However, it should be noted that ORCHIDs\
    \ do not conform\n   with the IPv6 global unicast address format defined in Section\
    \ 2.5.4\n   of [RFC4291] since they do not have a 64-bit Interface ID formatted\n\
    \   as described in Section 2.5.1. of [RFC4291].\n"
- title: 3.  Routing and Forwarding Considerations
  contents:
  - "3.  Routing and Forwarding Considerations\n   ORCHIDs are designed to serve as\
    \ location-independent endpoint\n   identifiers rather than IP-layer locators.\
    \  Therefore, routers MAY be\n   configured not to forward any packets containing\
    \ an ORCHID as a\n   source or a destination address.  If the destination address\
    \ is an\n   ORCHID but the source address is a valid unicast source address,\n\
    \   routers MAY be configured to generate an ICMP Destination\n   Unreachable,\
    \ Administratively Prohibited message.\n   ORCHIDs are not designed for use in\
    \ IPv6 routing protocols, since\n   such routing protocols are based on the architectural\
    \ definition of\n   IPv6 addresses.  Future non-IPv6 routing systems, such as\
    \ overlay\n   routing systems, may be designed based on ORCHIDs.  Any such ORCHID-\n\
    \   based routing system is out of scope of this document.\n   Router software\
    \ MUST NOT include any special handling code for\n   ORCHIDs.  In other words,\
    \ the non-routability property of ORCHIDs, if\n   implemented, is to be implemented\
    \ via configuration rather than by\n   hardwired software code, e.g., the ORCHID\
    \ prefix can be blocked by a\n   simple configuration rule such as an Access Control\
    \ List entry.\n"
- title: 4.  Design Choices
  contents:
  - "4.  Design Choices\n   The design of this namespace faces two competing forces:\n\
    \   o  As many bits as possible should be preserved for the hash result.\n   o\
    \  It should be possible to share the namespace between multiple\n      mechanisms.\n\
    \   The desire to have a long hash result requires that the prefix be as\n   short\
    \ as possible and use few (if any) bits for additional encoding.\n   The present\
    \ design takes this desire to the maximum: all the bits\n   beyond the prefix\
    \ and the ORCHID Generation Algorithm Identifier are\n   used as hash output.\
    \  This leaves no bits in the ORCHID itself\n   available for identifying the\
    \ context; however, the 4 bits used to\n   encode the ORCHID Generation Algorithm\
    \ Identifier provides\n   cryptographic agility with respect to the hash function\
    \ in use for a\n   given context (see Section 5).\n   The desire to allow multiple\
    \ mechanisms to share the namespace has\n   been resolved by including the Context\
    \ Identifier in the hash\n   function input.  While this does not allow the mechanism\
    \ to be\n   directly inferred from an ORCHID, it allows one to verify that a\n\
    \   given input bitstring and ORCHID belong to a given context, with high\n  \
    \ probability (but also see Section 5).\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   ORCHIDs are designed to be securely bound to\
    \ the Context ID and the\n   bitstring used as the input parameters during their\
    \ generation.  To\n   provide this property, the ORCHID Generation Algorithm relies\
    \ on the\n   second-preimage resistance (a.k.a. one-way) property of the hash\n\
    \   function used in the generation [RFC4270].  To have this property and\n  \
    \ to avoid collisions, it is important that the allocated prefix is as\n   short\
    \ as possible, leaving as many bits as possible for the hash\n   output.\n   For\
    \ a given Context ID, all mechanisms using ORCHIDs MUST use exactly\n   the same\
    \ mechanism for generating an ORCHID from the input bitstring.\n   Allowing different\
    \ mechanisms, without explicitly encoding the\n   mechanism in the Context ID\
    \ or the ORCHID itself, would allow\n   so-called bidding-down attacks.  That\
    \ is, if multiple different hash\n   functions were allowed to construct ORCHIDs\
    \ valid for the same\n   Context ID, and if one of the hash functions became insecure,\
    \ that\n   would allow attacks against even those ORCHIDs valid for the same\n\
    \   Context ID that had been constructed using the other, still secure\n   hash\
    \ functions.\n   An identifier for the hash function to be used for the ORCHID\n\
    \   generation is encoded in the ORCHID itself, while the semantic for\n   the\
    \ values taken by this identifier are defined separately for each\n   Context\
    \ ID.  Therefore, the present design allows the use of\n   different hash functions\
    \ per given Context ID for constructing\n   ORCHIDs from input bitstrings.  The\
    \ intent is that the protocol or\n   application using an ORCHIDv2 allocates a\
    \ Context ID for that use and\n   defines, within the scope of that Context ID,\
    \ the registry for the\n   ORCHID Generation Algorithm (OGA) ID.  The rationale\
    \ for this is to\n   allow different applications to use different hash functions\
    \ that\n   best satisfy their specific requirements, such that the relatively\n\
    \   small OGA ID namespace (4 bits wide, i.e., 16 different values) does\n   not\
    \ get exhausted too quickly.  If more secure hash functions are\n   later needed,\
    \ newer values for the ORCHID Generation Algorithm can be\n   defined for the\
    \ given Context ID.\n   In order to preserve a low enough probability of collisions\
    \ (see\n   Appendix A), each method MUST utilize a mechanism that makes sure\n\
    \   that the distinct input bitstrings are either unique or statistically\n  \
    \ unique within that context.  There are several possible methods to\n   ensure\
    \ this; for example, one can include into the input bitstring a\n   globally maintained\
    \ counter value, a pseudorandom number of\n   sufficient entropy (minimum 96 bits),\
    \ or a randomly generated public\n   cryptographic key.  The Context ID makes\
    \ sure that input bitstrings\n   from different contexts never overlap.  These\
    \ together make sure that\n   the probability of collisions is determined only\
    \ by the probability\n   of natural collisions in the hash space and is not increased\
    \ by a\n   possibility of colliding input bitstrings.\n   The generation of an\
    \ ORCHIDv2 identifier from an input bitstring\n   involves truncation of a hash\
    \ output to construct a fixed-size\n   identifier in a fashion similar to the\
    \ scheme specified in \"Naming\n   Things with Hashes\" [RFC6920].  Accordingly,\
    \ the Security\n   Considerations of [RFC6920] pertaining to truncation of the\
    \ hash\n   output during identifier generation are also applicable to ORCHIDv2\n\
    \   generation.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   Because the updated ORCHIDv2 format is not backward\
    \ compatible with\n   the earlier one, IANA has allocated a new 28-bit prefix\
    \ out of the\n   IANA IPv6 Special Purpose Address Block, namely 2001:0000::/23,\
    \ as\n   per [RFC6890].  The prefix that was temporarily allocated for the\n \
    \  experimental ORCHID was returned to IANA in March 2014 [RFC4843].\n   The registry\
    \ information for the allocation is as follows:\n   o  Address Block: 2001:20::/28\n\
    \   o  Name: ORCHIDv2\n   o  RFC: RFC 7343\n   o  Allocation Date: 2014-07\n \
    \  o  Termination Date: N/A\n   o  Source: True\n   o  Destination: True\n   o\
    \  Forwardable: True\n   o  Global: True\n   o  Reserved-by-Protocol: False\n\
    \   The Context Identifier (or Context ID) is a randomly generated value\n   defining\
    \ the usage context of an ORCHID and the hash function to be\n   used for generation\
    \ of ORCHIDs in this context.  This document\n   defines no specific value.  The\
    \ Context ID shares the namespace\n   introduced for CGA Type Tags.  Hence, defining\
    \ new values follows the\n   rules of Section 8 of [RFC3972], i.e., First Come,\
    \ First Served.\n   However, no IANA actions are required.\n"
- title: 7.  Contributors
  contents:
  - "7.  Contributors\n   Pekka Nikander (pekka.nikander@nomadiclab.com) co-authored\
    \ an\n   earlier, experimental version of this specification [RFC4843].\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   Special thanks to Geoff Huston for his sharp but constructive\n\
    \   critique during the development of this memo.  Tom Henderson helped\n   to\
    \ clarify a number of issues.  This document has also been improved\n   by reviews,\
    \ comments, and discussions originating from the IPv6,\n   Internet Area, and\
    \ IETF communities.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3972]  Aura, T., \"Cryptographically Generated Addresses (CGA)\"\
    ,\n              RFC 3972, March 2005.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [HIPv2]    Moskowitz, R., Heer, T., Jokela,\
    \ P., and T. Henderson,\n              \"Host Identity Protocol Version 2 (HIPv2)\"\
    , Work in\n              Progress, July 2014.\n   [PRIVACYTEXT]\n            \
    \  Dupont, F., \"A Simple Privacy Extension for Mobile IPv6\",\n             \
    \ Work in Progress, July 2006.\n   [RFC1918]  Rekhter, Y., Moskowitz, R., Karrenberg,\
    \ D., Groot, G., and\n              E. Lear, \"Address Allocation for Private\
    \ Internets\", BCP\n              5, RFC 1918, February 1996.\n   [RFC3174]  Eastlake,\
    \ D. and P. Jones, \"US Secure Hash Algorithm 1\n              (SHA1)\", RFC 3174,\
    \ September 2001.\n   [RFC4270]  Hoffman, P. and B. Schneier, \"Attacks on Cryptographic\n\
    \              Hashes in Internet Protocols\", RFC 4270, November 2005.\n   [RFC4291]\
    \  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n              Architecture\"\
    , RFC 4291, February 2006.\n   [RFC4843]  Nikander, P., Laganier, J., and F. Dupont,\
    \ \"An IPv6 Prefix\n              for Overlay Routable Cryptographic Hash Identifiers\n\
    \              (ORCHID)\", RFC 4843, April 2007.\n   [RFC6890]  Cotton, M., Vegoda,\
    \ L., Bonica, R., and B. Haberman,\n              \"Special-Purpose IP Address\
    \ Registries\", BCP 153, RFC\n              6890, April 2013.\n   [RFC6920]  Farrell,\
    \ S., Kutscher, D., Dannewitz, C., Ohlman, B.,\n              Keranen, A., and\
    \ P. Hallam-Baker, \"Naming Things with\n              Hashes\", RFC 6920, April\
    \ 2013.\n"
- title: Appendix A.  Collision Considerations
  contents:
  - "Appendix A.  Collision Considerations\n   As noted earlier, the aim is that so\
    \ long as keys are not reused,\n   ORCHIDs be globally unique in a statistical\
    \ sense.  That is, given\n   the ORCHID referring to a given entity, the probability\
    \ of the same\n   ORCHID being used to refer to another entity elsewhere in the\n\
    \   Internet must be sufficiently low so that it can be ignored for most\n   practical\
    \ purposes.  We believe that the presented design meets this\n   goal (see Section\
    \ 4).\n   As mentioned above, ORCHIDs are expected to be used at the legacy\n\
    \   IPv6 APIs between consenting hosts.  The Context ID is intended to\n   differentiate\
    \ between the various experiments, or contexts, sharing\n   the ORCHID namespace.\
    \  However, the Context ID is not present in the\n   ORCHID itself but is only\
    \ in front of the input bitstring as an input\n   to the hash function.  While\
    \ this may lead to certain implementation-\n   related complications, we believe\
    \ that the trade-off of allowing the\n   hash result part of an ORCHID being longer\
    \ more than pays off the\n   cost.\n   Because ORCHIDs are not routable at the\
    \ IP layer, in order to send\n   packets using ORCHIDs at the API level, the sending\
    \ host must have\n   additional overlay state within the stack to determine which\n\
    \   parameters (e.g., what locators) to use in the outgoing packet.  An\n   underlying\
    \ assumption here, and a matter of fact in the proposals\n   that the authors\
    \ are aware of, is that there is an overlay protocol\n   for setting up and maintaining\
    \ this additional state.  It is assumed\n   that the state-setup protocol carries\
    \ the input bitstring and that\n   the resulting ORCHID-related state in the stack\
    \ can be associated\n   back with the appropriate context and state-setup protocol.\n"
- title: Appendix B.  Changes from RFC 4843
  contents:
  - "Appendix B.  Changes from RFC 4843\n   o  Updated HIP references to revised HIP\
    \ specifications.\n   o  The Overlay Routable Cryptographic Hash Identifiers originally\n\
    \      defined in [RFC4843] lacked a mechanism for cryptographic\n      algorithm\
    \ agility.  The updated ORCHID format specified in this\n      document removes\
    \ this limitation by encoding, in the identifier\n      itself, an index to the\
    \ suite of cryptographic algorithms in use.\n   o  Moved the \"Collision Considerations\"\
    \ section into an appendix and\n      removed unnecessary discussions.\n   o \
    \ Removed the discussion on overlay routing.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Julien Laganier\n   Luminate Wireless, Inc.\n   Cupertino,\
    \ CA\n   USA\n   EMail: julien.ietf@gmail.com\n   Francis Dupont\n   Internet\
    \ Systems Consortium\n   EMail: fdupont@isc.org\n"
