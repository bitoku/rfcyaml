- title: __initial_text__
  contents:
  - ''
- title: '---------'
  contents:
  - "---------\f     < INC-PROJECT, MAP-PERSPECTIVE.NLS.14, >, 12-Aug-83 11:34 AMW\n\
    \     ;;;;\f     RFC 871                                            September\
    \ 1982\n               A PERSPECTIVE ON THE ARPANET REFERENCE MODEL\n        \
    \                      M.A. PADLIPSKY\n                           THE MITRE CORPORATION\n\
    \                          Bedford, Massachusetts\f          The paper, by one\
    \ of its developers, describes the\n     conceptual framework in which the ARPANET\
    \ intercomputer\n     networking protocol suite, including the DoD standard\n\
    \     Transmission Control Protocol (TCP) and Internet Protocol (IP),\n     were\
    \ designed.  It also compares and contrasts several aspects of\n     the ARPANET\
    \ Reference Model (ARM) with the more widely publicized\n     International Standards\
    \ Organization's Reference Model for Open\n     System Interconnection (ISORM).\n\
    \              \"A PERSPECTIVE ON THE ARPANET REFERENCE MODEL\"\n            \
    \                  M. A. Padlipsky\n                               Introduction\n\
    \          Despite the fact that \"the ARPANET\" stands as the\n     proof-of-concept\
    \ of intercomputer networking and, as discussed in\n     more detail below, introduced\
    \ such fundamental notions as\n     Layering and Virtualizing to the literature,\
    \ the wide\n     availability of material which appeals to the International\n\
    \     Standards Organization's Reference Model for Open System\n     Interconnection\
    \ (ISORM) has prompted many new- comers to the\n     field to overlook the fact\
    \ that, even though it was largely\n     tacit, the designers of the ARPANET protocol\
    \ suite have had a\n     reference model of their own all the long.  That is,\
    \ since well\n     before ISO even took an interest in \"networking\", workers\
    \ in the\n     ARPA-sponsored research community have been going about their\n\
    \     business of doing research and development in intercomputer\n     networking\
    \ with a particular frame of reference in mind.  They\n     have, unfortunately,\
    \ either been so busy with their work or were\n     perhaps somehow unsuited temperamentally\
    \ to do learned papers on\n     abstract topics when there are interesting things\
    \ to be said on\n     specific topics, that it is only in very recent times that\
    \ there\n     has been much awareness in the research community of the impact\n\
    \     of the ISORM on the lay mind.  When the author is asked to review\n    \
    \ solemn memoranda comparing such things as the ARPANET treatment\n     of \"\
    internetting\" with that of CCITT employing the ISORM \"as the\n     frame of\
    \ reference,\" however, the time has clearly come to\n     attempt to enunciate\
    \ the ARPANET Reference Model (ARM)\n     publicly--for such comparisons are painfully\
    \ close to comparing\n     an orange with an apple using redness and smoothness\
    \ as the\n     dominant criteria, given the philosophical closeness of the CCITT\n\
    \     and ISO models and their mutual disparities from the ARPANET\n     model.\n\
    \          This paper, then, is primarily intended as a perspective on\n     the\
    \ ARM.  (Secondarily, it is intended to point out some of the\n     differences\
    \ between the ARM and the ISORM. For a perspective on\n     this subtheme, please\
    \ see Note [1])  It can't be \"the official\"\n     version because the ARPANET\
    \ Network Working Group (NWG), which\n     was the collective source of the ARM,\
    \ hasn't had an official\n     general meeting since October, 1971, and can scarcely\
    \ be\n     resurrected to haggle over it.  It does, at least, represent with\n\
    \     some degree of fidelity the views of a number of NWG members as\n     those\
    \ views were expressed in NWG general meetings, NWG protocol\n     design committee\
    \ meetings, and private conversations over the\n     intervening years. (Members\
    \ of the current ARPA Internet Working\n     Group, which applied\n     RFC 871\
    \                                            September 1982\n     and adapted\
    \ the original model to a broader arena than had\n     initially been contemplated,\
    \ were also consulted.)  That might\n     not sound so impressive as a pronunciamento\
    \ from an international\n     standards organization, but the reader should be\
    \ somewhat\n     consoled by the consideration that not only are the views\n \
    \    expressed here purported to be those of the primary workers in\n     the\
    \ field, but also at least one Englishman helped out in the\n     review process.\n\
    \                     Historical/Philosophical Context\n          Although rigorous\
    \ historians of science might quibble as to\n     whether they were \"invented\"\
    \ by a particular group, it is  an\n     historical fact that many now widely-accepted,\
    \ fundamental\n     concepts of intercomputer networking were original to the\
    \ ARPANET\n     Network Working Group. [2]  Before attempting to appreciate the\n\
    \     implications of that assertion, let's attempt to define its two\n     key\
    \ terms and then cite the concepts it alludes to:\n          By \"intercomputer\
    \ networking\"  we mean the attachment of\n     multiple, usually general-purpose\
    \ computer systems--in the sense\n     of Operating Systems of potentially different\
    \ manufacture (i.e.,\n     \"Heterogeneous Operating Systems\")--to some communications\n\
    \     network, or communications networks somehow interconnected, for\n     the\
    \ purpose of achieving resource sharing amongst the\n     participating operating\
    \ systems, usually called Hosts.  (By\n     \"resource sharing\" we mean the \
    \ potential ability for programs on\n     each of the Hosts to interoperate with\
    \ programs on the other\n     Hosts and for data housed on each of the Hosts to\
    \ be made\n     available to the other Hosts in a more general and flexible\n\
    \     fashion than merely enabling users on each of the Hosts to be\n     able\
    \ to login to the other Hosts as if they were local; that is,\n     we expect\
    \ to do more than mere \"remote access\" to intercomputer\n     networked Hosts.)\
    \  By \"the ARPANET Network Working Group,\" we\n     mean those system programmers\
    \ and computer scientists from\n     numerous Defense Advanced Research Projects\
    \ Agency-sponsored\n     installations whose home operating systems were intended\
    \ to\n     become early Hosts on the ARPANET.  (By \"the ARPANET\" we mean,\n\
    \     depending on context, either that communications network\n     sponsored\
    \ by DARPA which served as proof-of-concept for the\n     communications technology\
    \ known as \"packet switching,\" or,\n     consistent with common usage, the intercomputer\
    \ network which was\n     evolved by the NWG that uses that communications network--or\n\
    \     \"comm subnet\"--as its inter-Host data transmission medium.)\n        \
    \  The concepts of particular interest are as follows:  By\n     analogy to the\
    \ use of the term in traditional communications, the\n     NWG decided that the\
    \ key to the mechanization of the\n     resource-sharing goal (which in turn had\
    \ been posited in their\n     informal charter)\n     RFC 871                \
    \                            September 1982\n     would be \"protocols\" that\
    \ Hosts would interpret both in\n     communicating with the comm subnet and in\
    \ communicating with each\n     other.  Because the active entities in Hosts (the\
    \ programs in\n     execution) were widely referred to in Computer Science as\n\
    \     \"processes,\" it seemed clear that the mechanization of resource\n    \
    \ sharing had to involve interprocess communication; protocols that\n     enabled\
    \ and employed interprocess communication became, almost\n     axiomatically,\
    \ the path to the goal.  Perhaps because the\n     limitations of mere remote\
    \ access were perceived early on, or\n     perhaps simply by analogy to the similar\
    \ usage with regard to\n     distinguishing between physical tape drives and tape\
    \ drives\n     associated with some conventionally-defined function like the\n\
    \     System Input stream or the System Output stream in batch\n     operating\
    \ systems, the discernible communications paths (or\n     \"channels\") through\
    \ the desired interprocess communication\n     mechanism became known as \"logical\
    \ connections\"--the intent of\n     the term being to indicate that the physical\
    \ path didn't matter\n     but the designator (number) of the logical connection\
    \ could have\n     an assigned meaning, just like logical tape drive numbers.\n\
    \     Because \"modularity\" was an important issue in Computer Science\n    \
    \ at the time, and because the separation of Hosts and Interface\n     Message\
    \ Processors (IMP's) was a given, the NWG realized that the\n     protocols it\
    \ designed should be \"layered,\" in the sense that a\n     given set of related\
    \ functions (e.g., the interprocess\n     communication mechanism, or \"primitives,\"\
    \ as realized in a\n     Host-to-Host protocol) should not take special cognizance\
    \ of the\n     detailed internal mechanics of another set of related functions\n\
    \     (e.g., the comm subnet attachment mechanism, as realized in a\n     Host-Comm\
    \ Subnet Processor protocol), and that, indeed, protocols\n     may be viewed\
    \ as existing in a hierarchy.\n          With the notion of achieving resource\
    \ sharing via layered\n     protocols for interprocess communication over logical\
    \ connections\n     fairly firmly in place, the NWG turned to how best to achieve\
    \ the\n     first step of intercomputer networking:  allowing a distant user\n\
    \     to login to a Host as if local--but with the clear understanding\n     that\
    \ the mechanisms employed were to be generalizable to other\n     types of resource\
    \ sharing.  Here we come to the final fundamental\n     concept contributed by\
    \ the NWG, for it was observed that if n\n     different types of Host (i.e.,\
    \ different operating systems) had\n     to be made aware of the physical characteristics\
    \ of m different\n     types of terminal in order to exercise physical control\
    \ over\n     them--or even if n different kinds of Host had to become aware of\n\
    \     the native terminals supported by m other kinds of Hosts if\n     physical\
    \ control were to remain local--there would be an\n     administratively intractable\
    \ \"n x m problem.\"  So the notion of\n     creating a \"virtual terminal\" arose,\
    \ probably by analogy to\n     \"virtual memory\" in the sense of something that\
    \ \"wasn't really\n     there\" but could be used as if it\n     RFC 871     \
    \                                       September 1982\n     were; that is, a\
    \ common intermediate representation (CIR) of\n     terminal characteristics was\
    \ defined in order to allow the Host\n     to which a terminal was physically\
    \ attached to map the particular\n     characteristics of the terminal into a\
    \ CIR, so that the Host\n     being logged into, knowing the CIR as part of the\
    \ relevant\n     protocol, could map out of it into a form already acceptable\
    \ to\n     the native operating system.  And when it came time to develop a\n\
    \     File Transfer Protocol, the same virtualizing or CIR trick was\n     clearly\
    \ just as useful as for a terminal oriented protocol, so\n     virtualizing became\
    \ part of the axiom set too.\n          The NWG, then, at least pioneered and\
    \ probably invented the\n     notion of doing intercomputer networking/resource\
    \ sharing via\n     hierarchical, layered protocols for interprocess communication\n\
    \     over logical connections of common intermediate representations/\n     virtualizations.\
    \  Meanwhile, outside of the ARPA research\n     community, \"the ARPANET\" was\
    \ perceived to be a major\n     technological advance. \"Networking\" became the\
    \ \"in\" thing.  And\n     along with popular success came the call for standards;\
    \ in\n     particular, standards based on a widely-publicized \"Reference\n  \
    \   Model for Open System Interconnection\" promulgated by the\n     International\
    \ Standards Organization.  Not too surprisingly, Open\n     System Interconnection\
    \ looks a lot like resource sharing, the\n     ISORM posits a layered protocol\
    \ hierarchy, \"connections\" occur\n     frequently, and emerging higher level\
    \ protocols tend to\n     virtualize; after all, one expects standards to reflect\
    \ the state\n     of the art in question.  But even if the ISORM, suitably refined,\n\
    \     does prove to be the wave of the future, this author feels that\n     the\
    \ ARM is by no means a whitecap, and deserves explication--both\n     in its role\
    \ as the ISORM's \"roots\" and as the basis of a\n     still-viable alternative\
    \ protocol suite.\n                              Axiomatization\n          Let's\
    \ begin with the axioms of the ARPANET Reference Model.\n     Indeed, let's begin\
    \ by recalling what an axiom is, in common\n     usage: a principle the truth\
    \ of which is deemed self-evident.\n     Given that definition, it's not too surprising\
    \ that axioms rarely\n     get stated or examined in non-mathematical discourse.\
    \  It turns\n     out, however, that the axiomatization of the ARM--as best we\
    \ can\n     recall and reconstruct it--is not only germane to the enunciation\n\
    \     of the ARM, but is also a source of instructive contrasts with\n     our\
    \ view of the axiomatization of the ISORM.  (See [1] again.)\n     Resource Sharing\n\
    \          The fundamental axiom of the ARM is that intercomputer\n     networking\
    \ protocols (as distinct from communications network\n     RFC 871           \
    \                                 September 1982\n     protocols) are to enable\
    \ heterogeneous computer operating systems\n     (\"Hosts\") to achieve resource\
    \ sharing.  Indeed, the session at\n     the 1970 SJCC in which the ARPANET entered\
    \ the open literature\n     was entitled \"Resource Sharing Computer Networks\"\
    .\n          Of course, as self-evident truths, axioms rarely receive\n     much\
    \ scrutiny.  Just what resource sharing is isn't easy to pin\n     down--nor,\
    \ for that matter, is just what Open System\n     Interconnection is. But it must\
    \ have something to do with the\n     ability of the programs and data of the\
    \ several Hosts to be used\n     by and with programs and data on other of the\
    \ Hosts in some sort\n     of cooperative fashion.  It must, that is, confer more\n\
    \     functionality upon the human user than merely the ability to log\n     in/on\
    \ to a Host miles away (\"remote access\").\n          A striking property of\
    \ this axiom is that it renders\n     protocol suites such as \"X.25\"/\"X.28\"\
    / \"X.29\" rather\n     uninteresting for our purposes, for they appear to have\
    \ as their\n     fundamental axiom the ability to achieve remote access only.\
    \  (It\n     might even be a valid rule of thumb that any \"network\" which\n\
    \     physically interfaces to Hosts via devices that resemble milking\n     machines--that\
    \ is, which attach as if they were just a group of\n     locally-known types of\
    \ terminals--isn't a resource sharing\n     network.)\n          Reference [3]\
    \ addresses the resource sharing vs. remote\n     access topic in more detail.\n\
    \     Interprocess Communication\n          The second axiom of the ARM is that\
    \ resource sharing will be\n     achieved via an interprocess communication mechanism\
    \ of some\n     sort.  Again, the concept isn't particularly well-defined in the\n\
    \     \"networking\" literature.  Here, however, there's some\n     justification,\
    \ for the concept is fairly well known in the\n     Operating Systems branch of\
    \ the Computer Science literature,\n     which was the field most of the NWG members\
    \ came from.\n     Unfortunately, because intercomputer networking involves\n\
    \     communications devices of several sorts, many whose primary field\n    \
    \ is Communications became involved with \"networking\" but were not\n     in\
    \ a position to appreciate the implications of the axiom.\n          A process\
    \ may be viewed as the active element of a Host, or\n     as an address space\
    \ in execution, or as a \"job\", or as a \"task\",\n     or as a \"control point\"\
    --or, actually, as any one (or more) of at\n     least 29 definitions from at\
    \ least 28 reputable computer\n     scientists.  What's important for present\
    \ purposes isn't the\n     precise definition (even if there were one), but the\
    \ fact that\n     the axiom's presence dictates the absence of at least one other\n\
    \     axiom at the same level of\n     RFC 871                               \
    \             September 1982\n     abstraction.  That is, we might have chosen\
    \ to attempt to achieve\n     resource sharing through an explicitly interprocedure\n\
    \     communication oriented mechanism of some sort--wherein the\n     entities\
    \ being enabled to communicate were subroutines, or pieces\n     of address spaces--but\
    \ we didn't.  Whether this was because\n     somebody realized that you could\
    \ do interprocedure communication\n     (or achieve a \"virtual address space\"\
    \ or \"distributed operating\n     system\" or some such formulation) on top of\
    \ an interprocess\n     communication mechanism (IPC), or whether \"it just seemed\n\
    \     obvious\" to do IPC doesn't matter very much.  What matters is\n     that\
    \ the axiom was chosen, assumes a fair degree of familiarity\n     with Operating\
    \ Systems, doesn't assume extremely close coupling\n     of Hosts, and has led\
    \ to a working protocol suite which does\n     achieve resource sharing--and certainly\
    \ does appear to be an\n     axiom the ISORM tacitly accepted, along with resource\
    \ sharing.\n     Logical Connections\n          The next axiom has to do with\
    \ whether and how to demultiplex\n     IPC \"channels\", \"routes\", \"paths\"\
    , \"ports\", or \"sockets\".  That\n     is, if you're doing interprocess communication\
    \ (IPC), you still\n     have to decide whether a process can communicate with\
    \ more than\n     one other process, and, if so, how to distinguish between the\
    \ bit\n     streams. (Indeed, even choosing streams rather than blocks is a\n\
    \     decision.) Although it isn't treated particularly explicitly in\n     the\
    \ literature, it seems clear that the ARM axiom is to do IPC\n     over logical\
    \ connections, in the following sense:  Just as batch\n     oriented operating\
    \ systems found it useful to allow processes\n     (usually thought of as jobs--or\
    \ even \"programs\") to be insulated\n     from the details of which particular\
    \ physical tape drives were\n     working well enough at a particular moment to\
    \ spin the System\n     Input and Output reels, and created the view that a reference\
    \ to\n     a \"logical tape number\" would always get to the right physical\n\
    \     drive for the defined purpose, so too the ARM's IPC mechanism\n     creates\
    \ logical connections between processes.  That is, the IPC\n     addressing mechanism\
    \ has semantics as well as syntax.\n          \"Socket\" n on any participating\
    \ Host will be defined as the\n     \"Well-Known Socket\" (W-KS) where a particular\
    \ service (as\n     mechanized by a program which follows, or \"interprets\",\
    \ a\n     particular  protocol [4]) is found.  (Note that the W-KS is\n     defined\
    \ for the \"side\" of a connection where a given service\n     resides; the user\
    \ side will, in  order to be able to demultiplex\n     its network-using processes,\
    \ of course assign different numbers\n     to its \"sides\" of connections to\
    \ a given W-KS.  Also, the serving\n     side takes cognizance of the using side's\
    \ Host designation as\n     well as the proferred socket, so it too can demultiplex.)\n\
    \     Clearly, you want free sockets as well as Well-Known ones, and we\n    \
    \ have them.  Indeed, at each level of the ARM\n     RFC 871                 \
    \                           September 1982\n     hierarchy the addressing entities\
    \ are divided into assigned and\n     unassigned sets, and the distinction has\
    \ proven to be quite\n     useful to networking researchers in that it confers\
    \ upon them the\n     ability to experiment with new functions without interfering\
    \ with\n     running mechanisms.\n          On this axiom, the ISORM differs from\
    \ the ARM.  ISORM\n     \"peer-peer\" connections (or \"associations\") appear\
    \ to be used\n     only for demultiplexing, with the number assigned by the receive\n\
    \     side rather than the send side.  That is, a separate protocol is\n     intro-\
    \ duced to establish that a particular \"transport\"\n     connection will be\
    \ used in the present \"session\" for some\n     particular service.  At the risk\
    \ of editorializing, logical\n     connections seem much cleaner than \"virtual\"\
    \ connections (using\n     virtual in the sense of something that \"isn't really\
    \ there\" but\n     can be used as if it were, by analogy to virtual memory, as\
    \ noted\n     above, and in deference to the X.25 term \"virtual circuit\", which\n\
    \     appears to have dictated the receiver-assigned posture the ISORM\n     takes\
    \ at its higher levels.) Although the ISORM view \"works\", the\n     W-KS approach\
    \ avoids the introduction of an extra protocol.\n     Layering\n          The\
    \ next axiom is perhaps the best-known, and almost\n     certainly the worst-understood.\
    \  As best we can reconstruct\n     things, the NWG was much taken with the Computer\
    \ Science buzzword\n     of the times, \"modularity\".  \"Everybody knew\" modularity\
    \ was a\n     Good Thing.  In addition, we were given a head start because the\n\
    \     IMP's weren't under our direct control anyway, but could possibly\n    \
    \ change at some future date, and we didn't want to be \"locked in\"\n     to\
    \ the then-current IMP-Host protocol.  So it was enunciated that\n     protocols\
    \ which were to be members of the ARM suite (ARMS, for\n     future reference,\
    \ although at the time nobody used \"ARM\", much\n     less \"ARMS\") were to\
    \ be layered.  It was widely agreed that this\n     meant a given protocol's control\
    \ information (i.e., the control\n     information exchanged by counterpart protocol\
    \ interpreters, or\n     \"peer entities\" in ISORM terms) should be treated strictly\
    \ as\n     data by a protocol \"below\" it, so that you could invoke a\n     protocol\
    \ interpreter (PI) through a known interface, but if\n     either protocol changed\
    \ there would not be any dependencies in\n     the other on the former details\
    \ of the one, and as long as the\n     interface didn't change you wouldn't have\
    \ to change the PI of the\n     protocol which hadn't changed.\n          All\
    \ well and good, if somewhat cryptic.  The important point\n     for present purposes,\
    \ however, isn't a seemingly-rigorous\n     definition of Layering, but an appreciation\
    \ of what the axiom\n     meant in the evolution of the ARM.  What it meant was\
    \ that we\n     tried to come up\n     RFC 871                               \
    \             September 1982\n     with protocols that represented reasonable\
    \ \"packagings\" of\n     functionality.  For reasons that are probably unknowable,\
    \ but\n     about which some conjectures will be offered subsequently, the\n \
    \    ARM and the ISORM agree strongly on the presence of Layering in\n     their\
    \ respective axiomatizations but differ strikingly as to what\n     packagings\
    \ of functionality are considered appropriate.  To\n     anticipate a bit, the\
    \ ARM concerns itself with three layers and\n     only one of them is mandatorily\
    \ traversed;  whereas the ISORM,\n     again as everybody knows, has, because\
    \ of emerging \"sub-layers\",\n     what must be viewed as at least seven layers,\
    \ and many who have\n     studied it believe that all of the layers must be traversed\
    \ on\n     each transmission/reception of data.\n          Perhaps the most significant\
    \ point of all about Layering is\n     that the most frequently-voiced charge\
    \ at NWG protocol committee\n     design meetings was, \"That violates Layering!\"\
    \ even though nobody\n     had an appreciably-clearer view of what Layering meant\
    \ than has\n     been presented here, yet the ARMS exists.  We can only guess\
    \ what\n     goes on in the design meetings for protocols to become members of\n\
    \     the ISORM suite (ISORMS), but it doesn't seem likely that having\n     more\
    \ layers could possibly decrease the number of arguments....\n          Indeed,\
    \ it's probably fair to say that the ARM view of\n     Layering is to treat layers\
    \ as quite broad functional groupings\n     (Network Interface, Host-Host, and\
    \ Process-Level, or\n     Applications), the constituents of which are to be modular.\n\
    \     E.g., in the Host-Host layer of the current ARMS, the Internet\n     Protocol,\
    \ IP, packages internet addressing--among other\n     things--for both the Transmission\
    \ Control Protocol, TCP, which\n     packages reliable interprocess communication,\
    \ and UDP--the less\n     well-known User Datagram Protocol--which packages only\n\
    \     demultiplexable interprocess communication ... and for any other\n     IPC\
    \ packaging which should prove desirable.  The ISORM view, on\n     the other\
    \ hand, fundamentally treats layers as rather narrow\n     functional groupings,\
    \ attempting to force modularity by requiring\n     additional layers for additional\
    \ functions (although the\n     \"classes\" view of the proposed ECMA-sponsored\
    \ ISORM Transport\n     protocol tends to mimic the relations between TCP, UDP,\
    \ and IP).\n          It is, by the way, forcing this view of modularity by\n\
    \     multiplying layers rather than by trusting the designers of a\n     given\
    \ protocol to make it usable by other protocols within its\n     own layer that\
    \ we suspect to be a major cause of the divergence\n     between the ISORM and\
    \ the ARM, but, as indicated, the issue\n     almost certainly is not susceptible\
    \ of proof.  (The less\n     structured view of modularity will be returned to\
    \ in the next\n     major section.)  At any rate, the notion that \"N-entities\"\
    \ must\n     communicate with one another by means of \"N-1 entities\" does seem\n\
    \     to us to take the ISORM out of its\n     RFC 871                       \
    \                     September 1982\n     intended sphere of description into\
    \ the realm of prescription,\n     where we believe it should not be, if for no\
    \ other reason than\n     that for a reference model to serve a prescriptive role\
    \ levies\n     unrealizable requirements of precision, and of familiarity with\n\
    \     all styles of operating systems, on its expositors.  In other\n     words,\
    \ as it is currently presented, the ISORM hierarchy of\n     protocols turns out\
    \ to be a rather strict hierarchy, with\n     required, \"chain of command\" implications\
    \ akin to the Elizabethan\n     World Picture's Great Chain of Being some readers\
    \ might recall if\n     they've studied Shakespeare, whereas in the ARM a cat\
    \ can even\n     invoke a king, much less look at one.\n     Common Intermediate\
    \ Representations\n          The next axiom to be considered might well not be\
    \ an axiom\n     in a strict sense of the term, for it is susceptible of \"proof\"\
    \n     in some sense.  That is, when it came time to design the first\n     Process-Level\
    \ (roughly equivalent to ISORM Level 5.3 [5] through\n     7) ARMS protocol, it\
    \ did seem self-evident that a \"virtual\n     terminal\" was a sound conceptual\
    \ model--but it can also be\n     demonstrated that it is.  The argument, customarily\
    \ shorthanded\n     as \"the N X M Problem\", was sketched above; it goes as follows:\n\
    \     If you want to let users at remote terminals log in/on to Hosts\n     (and\
    \ you do--resource sharing doesn't preclude remote access, it\n     subsumes it),\
    \ you have a problem with Hosts' native terminal\n     control software or \"\
    access methods\", which only \"know about\"\n     certain kinds/brands/types of\
    \ terminals, but there are many more\n     terminals out there than any Host has\
    \ internalized (even those\n     whose operating systems take a generic view of\
    \ I/O and don't\n     allow applications programs to \"expect\" particular terminals).\n\
    \          You don't want to make N different types of Host/Operating\n     System\
    \ have to become aware of M different types of terminal.\n     You don't want\
    \ to limit access to users who are at one particular\n     type of terminal even\
    \ if all your Hosts happen to have one in\n     common.  Therefore, you define\
    \ a common intermediate\n     representation (CIR) of the properties of terminals--or\
    \ create a\n     Network Virtual Terminal (NVT), where \"virtual\" is used by\n\
    \     analogy to \"virtual memory\" in the sense of something that isn't\n   \
    \  necessarily really present physically but can be used as if it\n     were.\
    \  Each Host adds one terminal to its set of supported types,\n     the NVT--where\
    \ adding means translating/mapping from the CIR to\n     something acceptable\
    \ to the rest of the programs on your system\n     when receiving terminal-oriented\
    \ traffic \"from the net\", and\n     translating/mapping to the CIR from whatever\
    \ your acceptable\n     native representation was when sending terminal-oriented\
    \ traffic\n     \"to the net\".  (And the system to  which the terminal is\n \
    \    physically attached does the same things.)\n     RFC 871                \
    \                            September 1982\n          \"Virtualizing\" worked\
    \ so well for the protocol in question\n     (\"Telnet\", for TELetypewriter NETwork)\
    \ that when it came time to\n     design a File Transfer Protocol (FTP), it was\
    \ employed again--in\n     two ways, as it happens.  (It also worked so well that\
    \ in some\n     circles, \"Telnet\" is used as a generic term for \"Virtual Terminal\n\
    \     Protocol\", just like \"Kleenex\" for \"disposable handkerchief\".)\n  \
    \   The second way in which FTP (another generic-specific) used\n     Common Intermediate\
    \ Representations is well-known: you can make\n     your FTP protocol interpreters\
    \ (PI's) use certain \"virtual\" file\n     types in ARMS FTP's and in proposed\
    \ ISORMS FTP's.  The first way\n     a CIR was used deserved more publicity, though:\
    \  We decided to\n     have a command-oriented FTP, in the sense of making it\
    \ possible\n     for users to cause files to be deleted from remote directories,\n\
    \     for example, as well as simply getting a file added to a remote\n     directory.\
    \  (We also wanted to be able to designate some files to\n     be treated as input\
    \ to the receiving Hosts' native \"mail\" system,\n     if it had one.)  Therefore,\
    \ we needed an agreed-upon\n     representation of the commands--not only spelling\
    \ the names, but\n     also defining the character set, indicating the ends of\
    \ lines,\n     and so on.  In less time than it takes to write about, we\n   \
    \  realized we already had such a CIR: \"Telnet\".\n          So we \"used Telnet\"\
    , or at any rate the NVT aspects of that\n     protocol, as the \"Presentation\"\
    \ protocol for the control aspects\n     of FTP--but we didn't conclude from that\
    \ that Telnet was a lower\n     layer than FTP.  Rather, we applied the principles\
    \ of modularity\n     to make use of a mechanism for more than one purpose--and\
    \ we\n     didn't presume to know enough about the internals of everybody\n  \
    \   else's Host to dictate how the program(s) that conferred the FTP\n     functionality\
    \ interfaced with the program(s) that conferred the\n     Telnet functionality.\
    \  That is, on some operating systems it\n     makes sense to let FTP get at the\
    \ NVT CIR by means of closed\n     subroutine calls, on others through native\
    \ IPC, and on still\n     others by open subroutine calls (in the sense of replicating\
    \ the\n     code that does the NVT mapping within the FTP PI).  Such\n     decisions\
    \ are best left to the system programmers of the several\n     Hosts.  Although\
    \ the ISORM takes a similar view in principle, in\n     practice many ISORM advocates\
    \ take the model prescriptively\n     rather than descriptively and construe it\
    \ to require that PI's at\n     a given level must communicate with each other\
    \ via an \"N-1\n     entity\" even within the same Host.  (Still other ISORMites\n\
    \     construe the model as dictating \"monolithic\" layers--i.e., single\n  \
    \   protocols per level--but this view seems to be abating.)\n          One other\
    \ consideration about virtualizing bears mention:\n     it's a good servant but\
    \ a bad master.  That is, when you're\n     dealing with the amount of traffic\
    \ that traverses a\n     terminal-oriented logical (or even virtual) connection,\
    \ you don't\n     worry much about how many CPU cycles you're \"wasting\" on mapping\n\
    \     into and out of the NVT CIR; but\n     RFC 871                         \
    \                   September 1982\n     when you're dealing with files that can\
    \ be millions of bits long,\n     you probably should worry--for those CPU cycles\
    \ are in a fairly\n     real sense the resources you're making sharable.  Therefore,\
    \ when\n     it comes to (generic) FTP's, even though we've seen it in one or\n\
    \     two ISORM L6 proposals, having only a virtual file conceptual\n     model\
    \ is not wise.  You'd rather let one side or the other map\n     directly between\
    \ native representations where possible, to\n     eliminate the overhead for going\
    \ into and out of the CIR--for\n     long enough files, anyway, and provided one\
    \ side or the other is\n     both willing and able to do the mapping to the intended\n\
    \     recipient's native representation.\n     Efficiency\n          The last\
    \ point leads nicely into an axiom that is rarely\n     acknowledged explicitly,\
    \ but does belong in the ARM list of\n     axioms: Efficiency is a concern, in\
    \ several ways.  In the first\n     place, protocol mechanisms are meant to follow\
    \ the design\n     principle of Parsimony, or Least Mechanism; witness the argument\n\
    \     immediately above about making FTP's be able to avoid the double\n     mapping\
    \ of a Virtual File approach when they can.  In the second\n     place, witness\
    \ the argument further above about leaving\n     implementation decisions to implementers.\
    \  In the author's\n     opinion, the worst mistake in the ISORM isn't defining\
    \ seven (or\n     more) layers, but decreeing that \"N-entities\" must communicate\n\
    \     via \"N-1 entities\" in a fashion which supports the interpretation\n  \
    \   that it applies intra-Host as well as inter-Host.  If you picture\n     the\
    \ ISORM as a highrise apartment building, you are constrained\n     to climb down\
    \ the stairs and then back up to visit a neighbor\n     whose apartment is on\
    \ your own floor.  This might be good\n     exercise, but CPU's don't need aerobics\
    \ as far as we know.\n          Recalling that this paper is only secondarily\
    \ about ARM\n     \"vs.\" ISORM, let's duly note that in the ARM there is a concern\n\
    \     for efficiency from the perspective of participating Hosts'\n     resources\
    \ (e.g., CPU cycles and, it shouldn't be overlooked,\n     \"core\") expended\
    \ on interpreting protocols, and pass on to the\n     final axiom without digressing\
    \ to one or two proposed specific\n     ISORM mechanisms which seem to be extremely\
    \ inefficient.\n     Equity\n          The least known of the ARM axioms has to\
    \ do with a concern\n     over whether particular protocol mechanisms would entail\
    \ undue\n     perturbation of native mechanisms if implemented in particular\n\
    \     Hosts.  That is, however reluctantly, the ARMS designers were\n     willing\
    \ to listen to claims that \"you can't implement that in my\n     system\" when\
    \ particular tactics were proposed and, however\n     RFC 871                \
    \                            September 1982\n     grudgingly, retreat from a mechanism\
    \ that seemed perfectly\n     natural on their home systems to one which didn't\
    \ seriously\n     discommode a colleague's home system.  A tacit design principle\n\
    \     based on equity was employed.  The classic example had to do with\n    \
    \ \"electronic mail\", where a desire to avoid charging for incoming\n     mail\
    \ led some FTP designers to think that the optionally\n     mandatory \"login\"\
    \ commands of the protocol shouldn't be mandatory\n     after all.  But the commands\
    \ were needed by some operating\n     systems to actuate not only accounting mechanisms\
    \ but\n     authentication mechanisms as well, and the process which\n     \"\
    fielded\" FTP connections was too privileged (and too busy) to\n     contain the\
    \ FTP PI as well.  So (to make a complex story\n     cryptic), a common name and\
    \ password were advertised for a \"free\"\n     account for incoming mail, and\
    \ the login commands remained\n     mandatory (in the sense that any Host could\
    \ require their\n     issuance before it participated in FTP).\n          Rather\
    \ than attempt to clarify the example, let's get to its\n     moral:  The point\
    \ is that how well protocol mechanisms integrate\n     with particular operating\
    \ systems can be extremely subtle, so in\n     order to be equitable to participating\
    \ systems, you must either\n     have your designers be sophisticated implementers\
    \ or subject your\n     designs to review by sophisticated implementers (and grant\
    \ veto\n     power to them in some sense).\n          It is important to note\
    \ that, in the author's view, the\n     ISORM not only does not reflect application\
    \ of the Principle of\n     Equity, but it also fails to take any explicit cognizance\
    \ of the\n     necessity of properly integrating its protocol interpreters into\n\
    \     continuing operating systems.  Probably motivated by Equity\n     considerations,\
    \ ARMS protocols, on the other hand, represent the\n     result of intense implementation\
    \ discussion and testing.\n                               Articulation\n     \
    \     Given the foregoing discussion of its axioms, and a reminder\n     that\
    \ we find it impossible in light of the existence of dozens of\n     definitions\
    \ of so fundamental a notion as \"process\" to believe in\n     rigorous definitions,\
    \ the ARPANET Reference Model is not going to\n     require much space to articulate.\
    \  Indeed, given further the\n     observation that we believe reference models\
    \ are supposed to be\n     descriptive rather than prescriptive, the articulation\
    \ of the ARM\n     can be almost terse.\n          In order to achieve efficient,\
    \ equitable resource sharing\n     among dissimilar operating systems, a layered\
    \ set of interprocess\n     communication oriented protocols is posited which\
    \ typically\n     employ common intermediate representations over logical\n  \
    \   connections.  Three\n     RFC 871                                        \
    \    September 1982\n     layers are distinguished, each of which may contain\
    \ a number of\n     protocols.\n          The Network Interface layer contains\
    \ those protocols which\n     are presented as interfaces by communications subnetwork\n\
    \     processors (\"CSNP\"; e.g., packet switches, bus interface units,\n    \
    \ etc.)  The CSNP's are assumed to have their own protocol or\n     protocols\
    \ among themselves, which are not directly germane to the\n     model.  In particular,\
    \ no assumption is made that CSNP's of\n     different types can be directly interfaced\
    \ to one another; that\n     is, \"internetting\" will be accomplished by Gateways,\
    \ which are\n     special purpose systems that attach to CSNP's as if they were\n\
    \     Hosts (see also \"Gateways\" below). The most significant property\n   \
    \  of the Network Interface layer is that bits presented to it by an\n     attached\
    \ Host will probably be transported by the underlying\n     CSNP's to an addressed\
    \ Host (or Hosts) (i.e., \"reliable\" comm\n     subnets are not posited--although\
    \ they are, of course, allowed).\n     A Network layer protocol interpreter (\"\
    module\") is normally\n     invoked by a Host-Host protocol PI, but may be invoked\
    \ by a\n     Process Level/Applications protocol PI, or even by a Host process\n\
    \     interpreting no formal protocol whatsoever.\n          The Host-Host layer\
    \ contains those protocols which confer\n     interprocess communication functionality.\
    \  In the current\n     \"internet\" version of the ARM, the most significant\
    \ property of\n     such protocols is the ability to direct such IPC to processes\
    \ on\n     Hosts attached to \"proximate networks\" (i.e., to CSNP's of\n    \
    \ various autonomous communications subnetworks) other than that of\n     the\
    \ Host at hand, in addition to those on a given proximate net.\n     (You can,\
    \ by the way, get into some marvelous technicoaesthetic\n     arguments over whether\
    \ there should be a separate Internet layer;\n     for present purposes, we assume\
    \ that the Principle of Parsimony\n     dominates.)  Another significant property\
    \ of Host-Host protocols,\n     although not a required one, is the ability to\
    \ do such IPC over\n     logical connections. Reliability, flow control, and the\
    \ ability\n     to deal with \"out-of-band signals\" are other properties of\n\
    \     Host-Host protocols which may be present.  (See also \"TCP/IP\n     Design\
    \ Goals and Constraints\", below.) A Host-Host PI is normally\n     invoked by\
    \ a Process Level/Applications PI, but may also be\n     invoked by a Host process\
    \ interpreting no formal protocol\n     whatsoever.  Also, a Host need not support\
    \ more than a single,\n     possibly notional, process (that is, the code running\
    \ in an\n     \"intelligent terminal\" might not be viewed by its user--or even\n\
    \     its creator--as a formal \"process\", but it stands as a de facto\n    \
    \ one).\n          The Process Level/Applications layer contains those\n     protocols\
    \ which perform specific resource sharing and remote\n     access functions such\
    \ as allowing users to log in/on to foreign\n     Hosts, transferring files, exchanging\
    \ messages, and the like.\n     Protocols in this layer\n     RFC 871        \
    \                                    September 1982\n     will often employ common\
    \ intermediate representations, or\n     \"virtual- izations\", to perform their\
    \ functions, but this is not\n     a necessary condition.  They are also at liberty\
    \ to use the\n     functions performed by other protocols within the same layer,\n\
    \     invoked in whatever fashion is appropriate within a given\n     operating\
    \ system context.\n          Orthogonal to the layering, but consistent with it,\
    \ is the\n     notion that a \"Host-Front End\" protocol (H-FP), or \"Host-Outboard\n\
    \     Processing Environment\" protocol, may be employed to offload\n     Network\
    \ and Host-Host layer PI's from Hosts, to Outboard\n     Processing Environments\
    \ (e.g., to \"Network Front Ends\", or to\n     BIU's, where the actual PI's reside,\
    \ to be invoked by the H-FP as\n     a distributed processing mechanism), as well\
    \ as portions of\n     Process Level/Applications protocols' functionality.  The\
    \ most\n     significant property of an H-FP attached Host is that it be\n   \
    \  functionally identical to a Host with inboard PI's in operation,\n     when\
    \ viewed from another Host. (That is, Hosts which outboard\n     PI's will be\
    \ attached to in a flexible fashion via an explicit\n     protocol, rather than\
    \ in a rigid fashion via the emulation of\n     devices already known to the operating\
    \ system in question.)\n          Whether inboard or outboard of the Host, it\
    \ is explicitly\n     assumed that PI's will be appropriately integrated into\
    \ the\n     containing operating systems.  The Network and Host-Host layers\n\
    \     are, that is, effectively system programs (although this\n     observation\
    \ should not be construed as implying that any of their\n     PI's must of necessity\
    \ be implemented in a particular operating\n     system's \"hard-core supervisor\"\
    \ or equivalent) and their PI's\n     must be able to behave as such.\n      \
    \                         Visualization\n          Figures 1 and 2 (adapted from\
    \ [6]) present, respectively, an\n     abstract rendition of the ARPANET Reference\
    \ Model and a\n     particular version of a protocol suite designed to that model.\n\
    \     Just as one learns in Geometry that one cannot \"prove\" anything\n    \
    \ from the figures in the text, they are intended only to\n     supplement the\
    \ prose description above.  (At least they bear no\n     resemblance to highrise\
    \ apartment houses.)\n                    TCP/IP Design Goals and Constraints\n\
    \          The foregoing description of the ARM, in the interests of\n     conciseness,\
    \ deferred detailed discussion of two rather relevant\n     topics:  just what\
    \ TCP and IP (the Transmission Control Protocol\n     and the Internet Protocol)\
    \ are \"about\", and just what role\n     Gateways are\n     RFC 871         \
    \                                   September 1982\n     expected to play in the\
    \ model.  We turn to those topics now,\n     under separate headings.\n      \
    \    As has been stated, with the success of the ARPANET [7] as\n     both a proof-of-concept\
    \ of intercomputer resource sharing via a\n     packet-switched communications\
    \ subnetwork and a (still)\n     functional resource sharing network, a number\
    \ of other bodies,\n     research and commercial, developed \"their own networks.\"\
    \  Often\n     just the communications subnetwork was intended, with the goal\n\
    \     being to achieve remote access to attached Hosts rather than\n     resource\
    \ sharing among them, but nonetheless new networks\n     abounded.  Hosts attached\
    \ to the original ARPANET or to DoD nets\n     meant to be transferences of ARPANET\
    \ technology should, it was\n     perceived in the research community, be able\
    \ to do resource\n     sharing (i.e., interpret common high level protocols) with\
    \ Hosts\n     attached to these other networks. Thus, the first discernible\n\
    \     goal of what was to become TCP/IP was to develop a protocol to\n     achieve\
    \ \"internetting\".\n          At roughly the same time--actually probably chronologically\n\
    \     prior, but not logically prior--the research community came to\n     understand\
    \ that the original ARPANET Host-Host Protocol or AH-HP\n     (often miscalled\
    \ NCP because it was the most visible component of\n     the Network Control Program\
    \ of the early literature) was somewhat\n     flawed, particularly in the area\
    \ of \"robustness.\"  The comm\n     subnet was not only relied upon to deliver\
    \ messages accurately\n     and in order, but it was even expected to manage the\
    \ transfer of\n     bits from Hosts to and from its nodal processors over a hardware\n\
    \     interface and \"link protocol\" that did no error checking.  So,\n     although\
    \ the ARPANET-as-subnet has proven to be quite good in\n     managing those sorts\
    \ of things, surely if internetting were to be\n     achieved over subnets potentially\
    \ much less robust than the\n     ARPANET subnet, the second discernible goal\
    \ must be the\n     reliability of the Host-to-Host protocol.  That is, irrespective\n\
    \     of the properties of the communications subnetworks involved in\n     internetting,\
    \ TCP is to furnish its users--whether they be\n     processes interpreting formal\
    \ protocols or simply processes\n     communicating in an ad hoc fashion--with\
    \ the ability to\n     communicate as if their respective containing Hosts were\
    \ attached\n     to the best comm subnet possible (e.g., a hardwired connection).\n\
    \          The mechanizations considered to achieve reliability and\n     even\
    \ those for internetting were alien enough to AH-HP's style,\n     though, and\
    \ the efficiency of several of AH-HP's native\n     mechanisms (particularly Flow\
    \ Control and the notion of a Control\n     Link) had been questioned often enough,\
    \ that a good Host-Host\n     protocol could not be a simple extension of AH-HP.\
    \  Thus, along\n     with the desire for reliability came a necessity to furnish\
    \ a\n     good Host-Host protocol, a\n     RFC 871                           \
    \                 September 1982\n     design goal easy to overlook.  This is\
    \ a rather subtle issue in\n     that it brings into play a wealth of prior art.\
    \  For present\n     purposes, in practical terms it means that the \"good\" ideas\n\
    \     (according to the technical intuition of the designers) of\n     AH-HP--such\
    \ as sockets, logical connections, Well-Known Sockets,\n     and in general the\
    \ interprocess communication premise--are\n     retained in TCP without much discussion,\
    \ while the \"bad\" ideas\n     are equally tacitly jettisoned in favor of ones\
    \ deemed either\n     more appropriate in their own right or more consistent with\
    \ the\n     other two goals.\n          It could be argued that other goals are\
    \ discernible, but the\n     three cited--which may be restated and compressed\
    \ as a desire to\n     offer a good Host-Host protocol to achieve reliable\n \
    \    internetting--are challenging enough, when thought about hard for\n     a\
    \ few years, to justify a document of even more than this one's\n     length.\
    \  What of the implied and/or accepted design constraints,\n     though?\n   \
    \       The first discernible design constraint borders on the\n     obvious:\
    \ Just as the original ARPANET popularized\n     packet-switching (and, unfortunately\
    \ to a lesser extent, resource\n     sharing), its literature popularized the\
    \ notion of \"Layering.\"\n     Mechanistically, layering is easy to describe:\
    \  the control\n     information of a given protocol must be treated strictly\
    \ as data\n     by the next \"lower\" protocol (with processes \"at the top,\"\
    \ and\n     the/a transmission medium \"at the bottom\"), as discussed earlier.\n\
    \     Philosophically, the notion is sufficiently subtle that even\n     today\
    \ researchers of good will still argue over what \"proper\"\n     layering implies,\
    \ also as discussed earlier.  For present\n     purposes, however, it suffices\
    \ to observe the following:\n     Layering is a useful concept.  The precise set\
    \ of functions\n     offered by a given layer is open to debate, as is the precise\n\
    \     number of layers necessary for a complete protocol suite to\n     achieve\
    \ resource sharing.  (Most researchers from the ARPANET\n     \"world\" tend to\
    \ think of only three layers--the process,\n     applications, or user level;\
    \ the Host-Host level; and the network\n     level--though if pressed they acknowledge\
    \ that \"the IMPs must\n     have a protocol too.\"  Adherents of the International\
    \ Standards\n     Organization's \"Open System Interconnection\" program--which\n\
    \     appears to be how they spell resource sharing--claim that seven\n     is\
    \ the right number of levels--though if pressed they acknowledge\n     that \"\
    one or two of them have sublevels.\"  And adherents of the\n     Consultative\
    \ Committee for International Telephony and Telegraphy\n     don't seem particularly\
    \ concerned with resource sharing to begin\n     with.)  At any rate, TCP and\
    \ IP are constrained to operate in a\n     (or possibly in more than one) layered\
    \ protocol hierarchy.\n     Indeed, although it is not the sole reason, this fact\
    \ is the\n     primary rationale for separating the internetting mechanization\n\
    \     into a discrete protocol (the Internet Protocol: IP).  In other\n     words,\
    \ although designed\n     RFC 871                                            September\
    \ 1982\n     \"for\" the ARM, TCP and IP are actually so layered as to be useful\n\
    \     even outside the ARM.\n          It should be noted that as a direct consequence\
    \ of the\n     Layering constraint, TCP must be capable of operating \"above\"\
    \ a\n     functionally- equivalent protocol other than IP (e.g., an\n     interface\
    \ protocol directly into a proximate comm subnet, if\n     internetting is not\
    \ being done), and IP must be capable of\n     supporting user protocols other\
    \ than TCP (e.g., a non-reliable\n     \"Real-Time\" protocol).\n          Resisting\
    \ the temptation to attempt to do justice to the\n     complexities of Layering,\
    \ we move on to a second design\n     constraint, which also borders on the obvious:\
    \  Only minimal\n     assumptions can be made about the properties of the various\n\
    \     communications subnetworks in play.  (The \"network\" composed of\n    \
    \ the concatenation of such subnets is sometimes called \"a\n     catenet,\" though\
    \ more often--and less picturesquely--merely \"an\n     internet.\")  After all,\
    \ the main goal is to let processes on\n     Hosts attached to, essentially, \"\
    any old (or new) net\"\n     communicate, and to limit that communication to processes\
    \ on\n     Hosts attached to comm subnets that, say, do positive\n     acknowledgments\
    \ of message delivery would be remiss. [8]\n          Given this constraint, by\
    \ the way, it is quite natural to\n     see the more clearly Host-to-Host functions\
    \ vested in TCP and the\n     more clearly Host-to-catenet functions vested in\
    \ IP.  It is,\n     however, a misconception to believe that IP was designed in\
    \ the\n     expectation that comm subnets \"should\" present only the \"lowest\n\
    \     common denominator\" of functionality; rather, IP furnishes TCP\n     with\
    \ what amounts to an abstraction (some would say a\n     virtualization--in the\
    \ ARPANET Telnet Protocol sense of\n     virtualizing as meaning mapping from/to\
    \ a common intermediate\n     representation to/from a given native representation)\
    \ of the\n     properties of \"any\" comm subnet including, it should be noted,\n\
    \     even one which presents an X.25 interface.  That is, IP allows\n     for\
    \ the application to a given transmission of whatever generic\n     properties\
    \ its proximate subnet offers equivalents for; its\n     design neither depends\
    \ upon nor ignores the presence of any\n     property other than the ability to\
    \ try to get some packet of bits\n     to some destination, which surely is an\
    \ irreducible minimum for\n     the functionality of anything one would be willing\
    \ to call a\n     network.\n          Finally, we take note of a design constraint\
    \ rarely\n     enunciated in the literature, but still a potent factor in the\n\
    \     design process: Probably again stemming from the popularity of\n     the\
    \ original ARPANET, as manifested in the number of types of\n     Hosts (i.e.,\
    \ operating systems) attached to it, minimal\n     assumptions are made about\
    \ the nature or even the \"power\" of the\n     Hosts which could implement TCP/IP.\
    \  Clearly, some notion of\n     process is necessary if there is to\n     RFC\
    \ 871                                            September 1982\n     be interprocess\
    \ communication, but even here the entire Host\n     might constitute a single\
    \ process from the perspective of the\n     catenet. Less clearly, but rather\
    \ importantly, Hosts must either\n     \"be able to tell time\" or at least be\
    \ able to \"fake\" that\n     ability; this is in order to achieve the reliability\
    \ goal, which\n     leads to a necessity for Hosts to retransmit messages (which\
    \ may\n     have gotten lost or damaged in the catenet), which in turn leads\n\
    \     to a necessity to know when to retransmit.  It should be noted,\n     however,\
    \ that this does not preclude a (presumably quite modestly\n     endowed) Host's\
    \ simply going into a controlled loop between\n     transmissions and retransmitting\
    \ after enough megapasses through\n     the loop have been made--if, of course,\
    \ the acknowledgment of\n     receipt of the transmission in question has not\
    \ already arrived\n     \"in the meantime.\"\n          To conclude with a formulation\
    \ somewhere between the concise\n     and the terse, TCP/IP are to constitute\
    \ a means for processes on\n     Hosts about which minimal assumptions are made\
    \ to do reliable\n     interprocess communication in a layered protocol suite\
    \ over a\n     catenet consisting of communications subnetworks about which\n\
    \     minimal assumptions are made.  Though it nearly goes without\n     saying,\
    \ we would probably be remiss not to conclude by observing\n     that that's a\
    \ lot harder to do than to say.\n          One other aspect of the ARPANET Reference\
    \ Model bears\n     separate mention.  Even though it is an exceedingly fine point\
    \ as\n     to whether it's actually \"part\" of the Model or merely a sine qua\n\
    \     non contextual assumption, the role of Gateways is of\n     considerable\
    \ importance to the functioning of the Internet\n     Protocol, IP.\n        \
    \  As noted, the defining characteristic of a Gateway is that\n     it attaches\
    \ to two or more proximate comm subnets as if it were a\n     Host. That is, from\
    \ \"the network's\" point of view, Gateways are\n     not distinguished from Hosts;\
    \ rather, \"normal\" traffic will go to\n     them, addressed according to the\
    \ proximate net's interface\n     protocol. However, the most important property\
    \ of Gateways is\n     that they interpret a full version of IP which deals with\n\
    \     internet routing (Host IP interpreters are permitted to take a\n     static\
    \ view of routing, sending datagrams which are destined for\n     Hosts not directly\
    \ attached to the proximate net to a known\n     Gateway, or Gateways, addressed\
    \ on the proximate net), as well of\n     course, as with fragmentation of datagrams\
    \ which, although of\n     permissible size on one of their proximate nets, are\
    \ too large\n     for the next proximate net (which contains either the target\
    \ Host\n     or still another Gateway).\n     RFC 871                        \
    \                    September 1982\n          Aside from their role in routing,\
    \ another property of\n     Gateways is also of significance:  Gateways do not\
    \ deal with\n     protocols above IP.  That is, it is an explicit assumption of\
    \ the\n     ARM that the catenet will be \"protocol compatible\", in the sense\n\
    \     that no attempt will be made to translate or map between\n     dissimilar\
    \ Host-Host protocols (e.g., TCP and AH-HP) or\n     dissimilar Process-level\
    \ protocols (e.g., ARPANET FTP and EDN\n     FTP) at the Gateways.  The justifications\
    \ for this position are\n     somewhat complex; the interested reader is encouraged\
    \ to see\n     Reference [10].  For present purposes, however, it should suffice\n\
    \     to note that the case against translating/mapping Gateways is a\n     sound\
    \ one, and that, as with the ARMS protocols, the great\n     practical virtue\
    \ of what are sometimes called \"IP Gateways\" is\n     that they are in place\
    \ and running.\n                        \"Architectural\" Highlights\n       \
    \   As was implied earlier, one of the problems with viewing a\n     reference\
    \ model prescriptively rather than descriptively is that\n     the articulation\
    \ of the model must be more precise than appears\n     to be humanly possible.\
    \  That the ISORM, in striving for\n     superhuman precision, fails to achieve\
    \ it is not grounds for\n     censure.  However, by reaching a degree of apparent\
    \ precision\n     that has enticed at least some of its readers to attempt to\
    \ use\n     it in a prescriptive fashion, the ISORM has introduced a number\n\
    \     of ambiguities which have been attributed as well to the ARM by\n     relative\
    \ laymen in intercomputer networking whose initial\n     exposure to the field\
    \ was the ISORM. Therefore, we conclude this\n     not-very-rigorous paper with\
    \ a highly informal treatment of\n     various points of confusion stemming from\
    \ attempting to apply the\n     ISORM to the ARM.\n          (It should be noted,\
    \ by the way, that one of the most\n     striking ambiguities about the ISORM\
    \ is just what role X.25 plays\n     in it:  We have been informed by a few ISORMites\
    \ that X.25 \"is\"\n     Levels 1-3, and we accepted that as factual until we\
    \ were told\n     during the review process of the present paper that \"that's\
    \ not\n     what we believe in the U.K.\"  What follows, then, is predicated\n\
    \     on the assumption that the earlier reports were probably but not\n     definitely\
    \ accurate--and if it turns out to be in time to help\n     prevent ISO from embracing\
    \ X.25 exclusively by pointing out some\n     of the problems entailed, so much\
    \ the better.)\n     \"Customized Parking Garages\"\n          The typical picture\
    \ of the ISORM shows what looks like two\n     highrises with what looks like\
    \ two parking garages between them.\n     (That is, seven layers of protocol per\
    \ \"Data Terminal Equipment\",\n     three layers per \"Data Circuit Terminating\
    \ Equipment\".)  The\n     problem\n     RFC 871                             \
    \               September 1982\n     is that only one \"style\" of parking garage--i.e.,\
    \ one which\n     presents an X.25 interface--is commonly understood to be\n \
    \    available to stand beside an ISORM DTE by those who believe that\n     ISO\
    \ has adopted X.25 as its L1-3.  In the ARM, on the other hand,\n     no constraints\
    \ are levied on the Communications Subnetwork\n     Processors.  Thus, satellite\
    \ communications, \"Packet Radios\",\n     \"Ethernets\" and the like are all\
    \ accommodated by the ARM.\n          Also, the sort of Outboard Processing Environment\
    \ mentioned\n     earlier in which networking protocols are interpreted on behalf\n\
    \     of the Host in a distributed processing fashion is quite\n     comfortably\
    \ accommodated by the ARM.  This is not to say that one\n     couldn't develop\
    \ an OPE for/to the ISORM, but rather that doing\n     so does not appear to us\
    \ to be natural to it, for at least two\n     reasons:  1. The Session Level associates\
    \ sockets with processes,\n     hence it belongs \"inboard\".  The Presentation\
    \ Level involves\n     considerable bit-diddling, hence it belongs \"outboard\"\
    .  The\n     Presentation Level is, unfortunately, above the Session Level.\n\
    \     This seems to indicate that outboard processing wasn't taken into\n    \
    \ account by the formulators of the ISORM.  2. Although some\n     ISORMites have\
    \ claimed that \"X.25 can be used as a Host-Front End\n     Protocol\", it doesn't\
    \ look like one to us, even if the ability to\n     do end-to-end things via what\
    \ is nominally the Network interface\n     is somewhat suggestive. (Those who\
    \ believe that you need a\n     protocol as strong as TCP below X.25 to support\
    \ the virtual\n     circuit illusion might argue that you've actually outboarded\
    \ the\n     Host-Host layer, but both the X.25 spec and the ISORM appeal to\n\
    \     protocols above X.25 for full L II functionality.)  Perhaps, with\n    \
    \ sufficient ingenuity, one might use X.25 to convey an H-FP, but\n     it seems\
    \ clear it isn't meant to be one in and of itself.\n     \"Plenty of Roads\"\n\
    \          Based upon several pictures presented at conferences and in\n     articles,\
    \ DCE's in the X.25-based ISORM appear to many to be\n     required to present\
    \ X.25 interfaces to each other as well as to\n     their DTE's.  Metaphorically,\
    \ the parking garages have single\n     bridges between them.  In the ARM, the\
    \ CSNP-CSNP protocol is\n     explicitly outside the model, thus there can be\
    \ as many \"roads\"\n     as needed between the ARM equivalent to ISORM parking\
    \ garages.\n     This also allays fears about the ability to take advantage of\n\
    \     alternate routing in X.25 subnets or in X.75 internets (because\n     both\
    \ X.25 and X.75 are \"hop-by-hop\" oriented, and would not seem\n     to allow\
    \ for alternate routing without revision).\n     RFC 871                     \
    \                       September 1982\n     \"Multiple Apartments Per Floor\"\
    \n          As noted, the ISORM's strictures on inter-entity\n     communication\
    \ within each \"highrise\" are equivalent to having to\n     climb downstairs\
    \ and then back up to visit another apartment on\n     your own floor.  The ARM\
    \ explicitly expects PI's within a layer\n     to interface directly with one\
    \ another when appropriate,\n     metaphorically giving the effect of multiple\
    \ apartments on each\n     floor off a common hallway.  (Also, for those who believe\
    \ the\n     ISORM implies only one protocol/apartment per layer/story, again\n\
    \     the ARM is more flexible.)\n     \"Elevators\"\n          The ISORM is widely\
    \ construed as requiring each layer to be\n     traversed on every transmission\
    \ (although there are rumors of the\n     forthcoming introduction of \"null layers\"\
    ), giving the effect of\n     having to climb all seven stories' worth of stairs\
    \ every time you\n     enter the highrise.  In the ARM, only Layer I, the Network\n\
    \     Interface layer, must be traversed; protocols in Layers II and/or\n    \
    \ III need not come into play, giving the effect of being able to\n     take an\
    \ elevator rather than climb the stairs.\n     \"Straight Clotheslines\"\n   \
    \       Because they appear to have to go down to L3 for their\n     initiation,\
    \ the ISORM's Session and Transport connections are, to\n     us, metaphorically\
    \ tangled clotheslines; the ARM's logical\n     connections are straight (and\
    \ go from the second floor to the\n     second floor without needing a pole that\
    \ gets in the way of the\n     folks on the third floor--if that doesn't make\
    \ a weak metaphor\n     totally feeble.)\n     \"Townhouse Styles Available\"\n\
    \          Should ISORM Level 6 and 7 protocols eventuate which are\n     desirable,\
    \ the \"two-story townhouse style apartments\" they\n     represent can be erected\
    \ on an ARM L I - L II (Network Interface\n     and Host-Host Layers) \"foundation\"\
    .  With some clever carpentry,\n     even ISORM L5 might be cobbled in.\n    \
    \ \"Manned Customs Sheds\"\n          Although it's straining the architectural\
    \ metaphor quite\n     hard, one of the unfortunate implications of the ISORM's\
    \ failure\n     to address operating system integration issues is that the notion\n\
    \     of \"Expedited Data\" exchanges between \"peer entities\" might only\n \
    \    amount to an SST flight to a foreign land where there's no one on\n     duty\
    \ at\n     RFC 871                                            September 1982\n\
    \     the Customs Shed (and the door to the rest of the airport is\n     locked\
    \ from the other side).  By clearly designating the\n     Host-Host (L II) mechanism(s)\
    \ which are to be used by Layer III\n     (Process-Level/ Applications) protocols\
    \ to convey \"out-of-band\n     signals\", the ARM gives the effect of keeping\
    \ the Customs Sheds\n     manned at all times. (It should be noted, by the way,\
    \ that we\n     acknowledge the difficulty of addressing system integration\n\
    \     issues without biasing the discussion toward particular systems;\n     we\
    \ feel, however, that not trying to do so is far worse than\n     trying and failing\
    \ to avoid all parochialism.)\n     \"Ready For Immediate Occupancy\"\n      \
    \    The ARM protocol suite has been implemented on a number of\n     different\
    \ operating systems.  The ISORM protocol suite\n     \"officially\" offers at\
    \ most (and not in the U.K., it should be\n     recalled) only the highly constraining\
    \ functionality of X.25 as\n     L1-L3; L4-L7 are still in the design and agreement\
    \ processes,\n     after which they must presumably be subjected to stringent\n\
    \     checkout in multiple implementations before becoming useful\n     standards.\
    \  The metaphorical highrises, then, are years away from\n     being fit for occupancy,\
    \ even if one is willing to accept the\n     taste of the interior decorators\
    \ who seem to insist on building\n     in numerous features of dubious utility\
    \ and making you take fully\n     furnished apartments whether you like it or\
    \ not; the ARM\n     buildings, on the other hand, offer stoves and refrigerators,\
    \ but\n     there's plenty of room for your own furniture-- and they're ready\n\
    \     for immediate occupancy.\n          The architectural metaphor might have\
    \ been overly extended\n     as it was, but it could have been drawn out even\
    \ further to point\n     up more issues on which the ARM appears to us to be superior\
    \ to\n     the ISORM, if our primary concern were which is \"better\".  In\n \
    \    fairness, the one issue it omitted which many would take to be in\n     the\
    \ ISORM's favor is that \"vendor support\" of interpreters of the\n     ISORM\
    \ protocols will eventually amount to a desirable\n     \"prefabrication\", while\
    \ the building of the ARM PI's is believed\n     to be labor-intensive.  That\
    \ would indeed be a good point, if it\n     were well-founded. Unfortunately for\
    \ its proponents, however,\n     close scrutiny of the vendor support idea suggests\
    \ that it is\n     largely illusory (vide [11]), especially in light of the amount\n\
    \     of time it will take for the international standardization\n     process\
    \ to run its course, and the likelihood that specification\n     ambiguities and\
    \ optional features will handicap interoperability.\n     Rather than extend the\
    \ present paper even further, then, it seems\n     fair to conclude that with\
    \ the possible exception of \"vendor\n     support\" (with which exception we\
    \ take\n     RFC 871                                            September 1982\n\
    \     exception, for it should be noted that a number of vendors are\n     already\
    \ offering support for TCP/IP), the ARPANET Reference Model\n     and the protocols\
    \ designed in conformance with it are at least\n     worthy of consideration by\
    \ anybody who's planning to do real\n     inter- computer networking in the next\
    \ several years--especially\n     if they have operating systems with counterparts\
    \ on the present\n     ARPANET, so that most if not all of the labor intensive\
    \ part has\n     been taken care of already--irrespective of one's views on how\n\
    \     good the ISORM protocols eventually will be.\n                         \
    \     Acknowledgments\n          Although it has seldom been more germane to observe\
    \ that\n     \"any remaining shortcomings are the author's responsibility\",\n\
    \     this paper has benefited tremendously from the close scrutiny and\n    \
    \ constructive comments of several distinguished members of both\n     the research\
    \ community and the (DoD) Protocol Standards Technical\n     Panel.  The author\
    \ is not only extremely grateful to, but is also\n     extremely pleased to acknowledge\
    \ his indebtedness to the\n     following individuals (cited in alphabetical order):\
    \  Mr. Trevor\n     Benjamin, Royal Signals and Radar Establishment (U.K.); Mr.\n\
    \     Edward Cain, Chairman of the PSTP; Dr. Vinton Cerf, DARPA/IPTO\n     (at\
    \ the time this was written); Dr. David Clark, M.I.T.\n     Laboratory for Computer\
    \ Science (formerly Project MAC); and Dr.\n     Jonathan Postel, U.S.C. Information\
    \ Sciences Institute.\n     Posterity may or may not thank them for their role\
    \ in turning an\n     act of personal catharsis into a fair semblance of a \"\
    real\"\n     paper, but the author emphatically does.\n     Notes and References\n\
    \     [1]  It almost goes without saying that the subtheme is certainly\n    \
    \      not intended to be a definitive statement of the relative\n          merits\
    \ of the two approaches, although, as will be seen, the\n          ARM comes out\
    \ ahead, in our view.  But then, the reader\n          might well say, what else\
    \ should I expect from a paper\n          written by one of the developers of\
    \ the ARM?  To attempt to\n          dispel thoughts of prejudgment, the author\
    \ would observe\n          that although he is indeed an Old Network Boy of the\n\
    \          ARPANET, he was not a member of the TCP/IP (the keystone of\n     \
    \     the current ARM) design team, and that he began looking into\n         \
    \ ARM \"vs.\" ISORM from the position of \"a plague on both your\n          houses\"\
    .  That he has concluded that the differences between\n          TCP/IP-based\
    \ ARM intercomputer networking and X.25-based\n          ISORM intercomputer networking\
    \ are like day and night may be\n          taken as indicative of something, but\
    \ that he also holds\n          that the day is at least partly cloudy and the\
    \ night is not\n          altogether moonless should at least meliorate fears\
    \ of\n          prejudice.  That is, of course the\n     RFC 871             \
    \                               September 1982\n          ISORM has its merits\
    \ and the ARM its demerits neither of\n          which are dealt with here.  But\
    \ \"A Perspective\" really means\n          \"My Perspective\", and the author\
    \ really is more concerned in\n          this context with exposition of the ARM\
    \ than with twitting\n          the ISORM, even if he couldn't resist including\
    \ the\n          comparisons subtheme because of the one-sidedness of the\n  \
    \        ISORM publicity he has perceived of late.\n     [2]  Source material\
    \ for this section was primarily drawn from\n          the author's personal experience\
    \ as a member the NWG and\n          from numerous conversations with Dr. Jonathan\
    \ B. Postel,\n          long-time Chairman of the NWG and participant in the design\n\
    \          meetings prior to the author's involvement.  (See also\n          Acknowledgments.)\n\
    \     [3]  Padlipsky, M. A. \"The Elements of Networking Style\", M81-41,\n  \
    \        The MITRE Corporation, Bedford, MA, October 1981\n     [4]  Yes, the\
    \ notion of using \"protocols\" might well count as an\n          axiom in its\
    \ own right, but, no, we're not going to pretend\n          to be that rigorous.\n\
    \     [5]  That is, about three tenths of the possible span of\n          \"Session\"\
    \ functionality, which has to do with making up for\n          the lack of Well-Known\
    \ Sockets, isn't subsumed by the ARM\n          Process-Level protocols, but the\
    \ rest is, or could be.\n     [6]  Davidson, J., et al., \"The ARPANET Telnet\
    \ Protocol: Its\n          Purpose, Principles, Implementation, and Impact on\
    \ Host\n          Operating System Design,\"  Proc Fifth Data Communications\n\
    \          Symposium, ACM/IEEE, Snowbird, Utah, September, 1977.\n     [7]  See\
    \ Proceedings of the 1970 SJCC, \"Resource Sharing Computer\n          Networks\"\
    \ session, and Proceedings of the 1972 SJCC, \"The\n          ARPA Network\" session\
    \ for the standard open literature\n          references to the early ARPANET.\
    \  Other source material for\n          this chapter is drawn from the author's\
    \ personal\n          conversations with TCP/IP's principal developers; see also\n\
    \          Acknowledgments.\n     [8]  A strong case can be made for desiring\
    \ that the comm subnets\n          make a \"datagram\" (or \"connectionless\"\
    ) mode of interface\n          available, based upon the desire to support such\n\
    \          functionality as Packetized Speech, broadcast addressing,\n       \
    \   and mobile subscribers, among other things.  For a more\n          complete\
    \ description of this point of view, see [9].  For\n          present\n     RFC\
    \ 871                                            September 1982\n          purposes,\
    \ we do not cite the presentation of a datagram mode\n          interface as a\
    \ design constraint because it is\n          possible--albeit undesirable--to\
    \ operate IP \"on top of\" a\n          comm subnet which does not present such\
    \ an interface.\n     [9]  Cerf, V. G. and R. E. Lyons, \"Military Requirements\
    \ for\n          Packet-Switched Networks and for Their Protocol\n          Standardization\"\
    \ Proc EASCON 1982.\n     [10] Padlipsky, M. A., \"Gateways, Architectures and\
    \ Heffalumps\",\n          M82-51, The MITRE Corporation, Bedford, MA, September\
    \ 1982.\n     [11] ---------- \"The Illusion of Vendor Support\", M82-49, The\n\
    \          MITRE Corporation, Bedford, MA, September 1982.\n     NOTE:  Figure\
    \ 1: ARM in the Abstract, and Figure 2: ARMS,\n     Somewhat Particularized, may\
    \ be obtained by writing to:  Mike\n     Padlipsky, MITRE Corporation, P.O. Box\
    \ 208, Bedford,\n     Massachusetts 01730, or sending computer mail to\n     Padlipsky@USC-ISIA.\n"
