- contents:
  - "              Routing Metrics Used for Path Calculation in\n                      Low-Power
    and Lossy Networks\n"
  title: __initial_text__
- contents:
  - "Abstract\n   Low-Power and Lossy Networks (LLNs) have unique characteristics\n
    \  compared with traditional wired and ad hoc networks that require the\n   specification
    of new routing metrics and constraints.  By contrast,\n   with typical Interior
    Gateway Protocol (IGP) routing metrics using\n   hop counts or link metrics, this
    document specifies a set of link and\n   node routing metrics and constraints
    suitable to LLNs to be used by\n   the Routing Protocol for Low-Power and Lossy
    Networks (RPL).\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6551.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Requirements Language ......................................6\n   2.
    Object Formats ..................................................7\n      2.1.
    DAG Metric Container Format ................................7\n      2.2. Use
    of Multiple DAG Metric Containers .....................10\n      2.3. Metric Usage
    ..............................................10\n   3. Node Metric/Constraint
    Objects .................................11\n      3.1. Node State and Attribute
    Object ...........................11\n      3.2. Node Energy Object ........................................12\n
    \     3.3. Hop Count Object ..........................................16\n   4.
    Link Metric/Constraint Objects .................................17\n      4.1.
    Throughput ................................................17\n      4.2. Latency
    ...................................................18\n      4.3. Link Reliability
    ..........................................19\n           4.3.1. The Link Quality
    Level Reliability Metric ..........19\n           4.3.2. The ETX Reliability Object
    .........................21\n      4.4. Link Color Object .........................................22\n
    \          4.4.1. Link Color Object Description ......................22\n           4.4.2.
    Mode of Operation ..................................24\n   5. Computation of Dynamic
    Metrics and Attributes ..................24\n   6. IANA Considerations ............................................25\n
    \     6.1. Routing Metric/Constraint Type ............................25\n      6.2.
    Routing Metric/Constraint TLVs ............................25\n      6.3. Routing
    Metric/Constraint Common Header Flag Field ........26\n      6.4. Routing Metric/Constraint
    Common Header A Field ...........26\n      6.5. NSA Object Flags Field ....................................26\n
    \     6.6. Hop-Count Object Flags Field ..............................27\n      6.7.
    Node Type Field ...........................................27\n   7. Security
    Considerations ........................................27\n   8. Acknowledgements
    ...............................................28\n   9. References .....................................................28\n
    \     9.1. Normative References ......................................28\n      9.2.
    Informative References ....................................28\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document makes use of the terminology defined in [ROLL-TERMS].\n
    \  Low-power and Lossy Networks (LLNs) have specific routing\n   characteristics
    compared with traditional wired or ad hoc networks\n   that have been spelled
    out in [RFC5548], [RFC5673], [RFC5826], and\n   [RFC5867].\n   Historically, IGP,
    such as OSPF ([RFC2328]) and IS-IS ([RFC1195]),\n   has used quantitative static
    link metrics.  Other mechanisms, such as\n   Multiprotocol Label Switching (MPLS)
    Traffic Engineering (TE) (see\n   [RFC2702] and [RFC3209]), make use of other
    link attributes such as\n   the available reserved bandwidth (dynamic) or link
    affinities (most\n   of the time static) to compute constrained shortest paths
    for Traffic\n   Engineering Label Switched Paths (TE LSPs).\n   This document
    specifies routing metrics and constraints to be used in\n   path calculation by
    the Routing Protocol for Low-Power and Lossy\n   Networks (RPL) specified in [RFC6550].\n
    \  One of the prime objectives of this document is to define a flexible\n   mechanism
    for the advertisement of routing metrics and constraints\n   used by RPL.  Some
    RPL implementations may elect to adopt an\n   extremely simple approach based
    on the use of a single metric with no\n   constraint, whereas other implementations
    may use a larger set of\n   link and node routing metrics and constraints.  This
    specification\n   provides a high degree of flexibility and a set of routing metrics\n
    \  and constraints.  New routing metrics and constraints could be\n   defined
    in the future, as needed.\n   The metrics and constraints defined in this document
    are carried in\n   objects that are OPTIONAL from the point of view of a RPL\n
    \  implementation.  This means that implementations are free to include\n   different
    subsets of the functions (metric, constraint) defined in\n   this document.  Specific
    sets of metrics/constraints and other\n   optional RPL parameters for use in key
    environments will be specified\n   as compliance profiles in applicability profile
    documents produced by\n   the ROLL working group.  Note that RPL can even make
    use of no\n   metric, for example, using the Objective Function defined in\n   [RFC6552].\n
    \  RPL is a distance vector routing protocol variant that builds\n   Directed
    Acyclic Graphs (DAGs) based on routing metrics and\n   constraints.  DAG formation
    rules are defined in [RFC6550]:\n   o  The Destination-Oriented Directed Acyclic
    Graph (DODAG) root, as\n      defined in [RFC6550], may advertise a routing constraint
    used as a\n      \"filter\" to prune links and nodes that do not satisfy specific\n
    \     properties.  For example, it may be required for a path only to\n      traverse
    nodes that are mains-powered or links that have at least\n      a minimum reliability
    or a specific \"color\" reflecting a user-\n      defined link characteristic
    (e.g., the link layer supports\n      encryption).\n   o  A routing metric is
    a quantitative value that is used to evaluate\n      the path cost.  Link and
    node metrics are usually (but not always)\n      additive.\n   The best path is
    the path that satisfies all supplied constraints (if\n   any) and that has the
    lowest cost with respect to some specified\n   metrics.  It is also called the
    shortest constrained path (in the\n   presence of constraints).\n   Routing metrics
    may be categorized according to the following\n   characteristics:\n   o  Link
    versus node metrics\n   o  Qualitative versus quantitative\n   o  Dynamic versus
    static\n   Routing requirements documents (see [RFC5673], [RFC5826], [RFC5548],\n
    \  and [RFC5867]) observe that it must be possible to take into account\n   a
    variety of node constraints/metrics during path computation.\n   Some link or
    node characteristics (e.g., link reliability, remaining\n   energy on the node)
    may be used by RPL either as routing constraints\n   or as metrics (or sometimes
    both).  For example, the path may be\n   computed to avoid links that do not provide
    a sufficient level of\n   reliability (use as a constraint) or as the path offering
    most links\n   with a specified reliability level (use as a metric).  This document\n
    \  provides the flexibility to use link and node characteristics as\n   constraints
    and/or metrics.\n   The use of link and node routing metrics and constraints is
    not\n   exclusive (e.g., it is possible to advertise a \"hop count\" both as a\n
    \  metric to optimize the computed path and as a constraint (e.g., \"Path\n   should
    not exceed n hops\")).\n   Links in LLN commonly have rapidly changing node and
    link\n   characteristics; thus, routing metrics must be dynamic and techniques\n
    \  must be used to smooth out the dynamicity of these metrics so as to\n   avoid
    routing oscillations.  For instance, in addition to the dynamic\n   nature of
    some links (e.g., wireless but also Power Line\n   Communication (PLC) links),
    nodes' resources, such as residual\n   energy, are changing continuously and may
    have to be taken into\n   account during the path computation.\n   It must be
    noted that the use of dynamic metrics is not new and has\n   been experimented
    in ARPANET 2 (see [Zinky1989]).  The use of dynamic\n   metrics is not trivial
    and great care must be given to the use of\n   dynamic metrics since it may lead
    to potential routing instabilities.\n   That being said, a lot of experience has
    been gained over the years\n   on the use of dynamic routing metrics, which have
    been deployed in a\n   number of (non-IP) networks.\n   Very careful attention
    must be given to the pace at which routing\n   metrics and attributes values change
    in order to preserve routing\n   stability.  When using a dynamic routing metric,
    a RPL implementation\n   should make use of a multi-threshold scheme rather than
    fine granular\n   metric updates reflecting each individual change to avoid spurious\n
    \  and unnecessary routing changes.\n   The requirements on reporting frequency
    may differ among metrics;\n   thus, different reporting rates may be used for
    each metric.\n   The set of routing metrics and constraints used by a RPL deployment\n
    \  is signaled along the DAG that is built according to the Objective\n   Function
    (rules governing how to build a DAG) and the routing metrics\n   and constraints
    are advertised in the DODAG Information Object (DIO)\n   message specified in
    [RFC6550].  RPL may be used to build DAGs with\n   different characteristics.
    \ For example, it may be desirable to build\n   a DAG with the goal to maximize
    reliability by using the link\n   reliability metric to compute the \"best\" path.
    \ Another example might\n   be to use the energy node characteristic (e.g., mains-powered
    versus\n   battery-operated) as a node constraint when building the DAG so as
    to\n   avoid battery-powered nodes in the DAG while optimizing the link\n   throughput.\n
    \  The specification of Objective Functions used to compute the DAG\n   built
    by RPL is out of the scope of this document.  This document\n   defines routing
    metrics and constraints that are decoupled from the\n   Objective Function.  So
    a generic Objective Function could, for\n   example, specify the rules to select
    the best parents in the DAG, the\n   number of backup parents, etc., and it could
    be used with any routing\n   metrics and/or constraints such as the ones specified
    in this\n   document.\n   Some metrics are either aggregated or recorded.  An
    aggregated metric\n   is adjusted as the DIO message travels along the DAG.  For
    example,\n   if the metric is the number of hops, each node updates the path cost\n
    \  that reflects the number of traversed hops along the DAG.  By\n   contrast,
    for a recorded metric, each node adds a sub-object\n   reflecting the local valuation
    of the metric.  For example, it might\n   be desirable to record the link quality
    level along a path.  In this\n   case, each visited node adds a sub-object recording
    the local link\n   quality level.  In order to limit the number of sub-objects,
    the use\n   of a counter may be desirable (e.g., record the number of links with\n
    \  a certain link quality level), thus, compressing the information to\n   reduce
    the message length.  Upon receiving the DIO message from a set\n   of parents,
    a node might decide, according to the OF and local\n   policy, which node to choose
    as a parent based on the maximum number\n   of links with a specific link reliability
    level, for example.\n   Note that the routing metrics and constraints specified
    in this\n   document are not specific to any particular link layer.  An internal\n
    \  API between the Medium Access Control (MAC) layer and RPL may be used\n   to
    accurately reflect the metrics values of the link (wireless,\n   wired, PLC).\n
    \  Since a set of metrics and constraints will be used for links and\n   nodes
    in a LLN, it is critical to ensure the use of consistent metric\n   calculation
    mechanisms for all links and nodes in the network,\n   similar to the case of
    inter-domain IP routing.\n   There are many different permutations of options
    that may be\n   appropriate in different deployments.  Implementations must clearly\n
    \  state which options they include, and they must state which are\n   default
    and which are configurable as options within the\n   implementation.  Applicability
    statements will be developed within\n   the ROLL working group to clarify which
    options are applicable to the\n   specific deployment scenarios indicated by [RFC5673],
    [RFC5826],\n   [RFC5548], and [RFC5867].\n"
  - contents:
    - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      RFC 2119 [RFC2119].\n"
    title: 1.1.  Requirements Language
  title: 1.  Introduction
- contents:
  - '2.  Object Formats

    '
  - contents:
    - "2.1.  DAG Metric Container Format\n   Routing metrics and constraints are carried
      within the DAG Metric\n   Container object defined in [RFC6550].  Should multiple
      metrics\n   and/or constraints be present in the DAG Metric Container, their
      use\n   to determine the \"best\" path can be defined by an Objective Function.\n
      \  The Routing Metric/Constraint objects represent a metric or a\n   constraint
      of a particular type.  They may appear in any order in the\n   DAG Metric Container
      (specified in [RFC6550]).  They have a common\n   format consisting of one or
      more bytes with a common header.\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |Routing-MC-Type|Res Flags|P|C|O|R| A   |  Prec | Length (bytes)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   //
      \                       (object body)                        //\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    Figure
      1: Routing Metric/Constraint Object Generic Format\n   The object body carries
      one or more sub-objects defined later in this\n   document.  Note that an object
      may carry a TLV, which may itself\n   comprise other TLVs.  A TLV carried within
      a TLV is called a TLV in\n   this specification.\n   Routing-MC-Type (Routing
      Metric/Constraint Type - 8 bits): the\n   Routing Metric/Constraint Type field
      uniquely identifies each Routing\n   Metric/Constraint object and is managed
      by IANA.\n   Length (8 bits): this field defines the length of the object body,\n
      \  expressed in bytes.  It ranges from 0 to 255.\n   Res Flags field (16 bits).
      \ The Flag field of the Routing Metric/\n   Constraint object is managed by
      IANA.  Unassigned bits are considered\n   as reserved.  They MUST be set to
      zero on transmission and MUST be\n   ignored on receipt.\n   The following bits
      of the Routing Metric/Constraint Flag field object\n   are currently defined:\n
      \  o  'P' flag: the P field is only used for recorded metrics.  When\n      cleared,
      all nodes along the path successfully recorded the\n      corresponding metric.
      \ When set, this indicates that one or\n      several nodes along the path could
      not record the metric of\n      interest (either because of lack of knowledge
      or because this was\n      prevented by policy).\n   o  'C' flag.  When set,
      this indicates that the Routing Metric/\n      Constraint object refers to a
      routing constraint.  When cleared,\n      the routing object refers to a routing
      metric.\n   o  'O' flag: The 'O' flag is used exclusively for routing constraints\n
      \     ('C' flag is set).  When set, this indicates that the constraint\n      specified
      in the body of the object is optional.  When cleared,\n      the constraint
      is mandatory.  If the 'C' flag is zero, the 'O'\n      flag MUST be set to zero
      on transmission and ignored on reception.\n   o  'R' flag: The 'R' flag is only
      relevant for a routing metric (C=0)\n      and MUST be cleared for C=1.  When
      set, this indicates that the\n      routing metric is recorded along the path.
      \ Conversely, when\n      cleared, the routing metric is aggregated.\n   A Field
      (3 bits): The A field is only relevant for metrics and is\n   used to indicate
      whether the aggregated routing metric is additive,\n   is multiplicative, reports
      a maximum, or reports a minimum.\n   o  A=0: The routing metric is additive\n
      \  o  A=1: The routing metric reports a maximum\n   o  A=2: The routing metric
      reports a minimum\n   o  A=3: The routing metric is multiplicative\n   The A
      field has no meaning when the 'C' flag is set (i.e., when the\n   Routing Metric/Constraint
      object refers to a routing constraint) and\n   is only valid when the 'R' bit
      is cleared.  Otherwise, the A field\n   MUST be set to 0 and MUST be ignored
      on receipt.\n   Prec field (4 bits): The Prec field indicates the precedence
      of this\n   Routing Metric/Constraint object relative to other objects in the\n
      \  container.  This is useful when a DAG Metric Container contains\n   several
      Routing Metric objects.  Its value ranges from 0 to 15.  The\n   value 0 means
      the highest precedence.\n   Example 1: A DAG formed by RPL where all nodes must
      be mains-powered\n   and the best path is the one with lower aggregated expected\n
      \  transmission count (ETX).  In this case, the DAG Metric Container\n   carries
      two Routing Metric/Constraint objects: one is an ETX metric\n   object with
      header (C=0, O=0, A=00, R=0) and the second one is a Node\n   Energy constraint
      object with header (C=1, O=0, A=00, R=0).  Note\n   that a RPL Instance may
      use the metric object to report a maximum\n   (A=1) or a minimum (A=2).  If,
      for example, the best path is\n   characterized by the path avoiding low quality
      links, then the path\n   metric reports a maximum (A=1) (the higher the ETX,
      the lower the\n   link quality): when the DIO message reporting the link quality
      metric\n   (ETX) is processed by a node, each node selecting the advertising\n
      \  node as a parent updates the value carried in the metric object by\n   replacing
      it with its local link ETX value if and only if the latter\n   is higher.  As
      far as the constraint is concerned, the object body\n   will carry a Node Energy
      constraint object defined in Section 3.1\n   indicating that nodes must be mains-powered:
      if the constraint\n   signaled in the DIO message is not satisfied, the advertising
      node is\n   just not selected as a parent by the node that processes the DIO\n
      \  message.\n   Example 2: A DAG formed by RPL where the link metric is the
      link\n   quality level (defined in Section 4) and link quality levels must be\n
      \  recorded along the path.  In this case, the DAG Metric Container\n   carries
      a Routing Metric/Constraint object: link quality level metric\n   (C=0, O=0,
      A=00, R=1) containing multiple sub-objects.\n   A Routing Metric/Constraint
      object may also include one or more\n   additional type-length-value (TLV) encoded
      data sets.  Each Routing\n   Metric/Constraint TLV has the same structure:\n
      \  Type: 1 byte\n   Length: 1 byte\n   Value: variable\n   A Routing Metric/Constraint
      TLV is comprised of 1 byte for the type,\n   1 byte specifying the TLV length,
      and a value field.  The TLV length\n   field defines the length of the value
      field in bytes (from 0 to 255).\n   Unrecognized TLVs MUST be silently ignored
      while still being\n   propagated in DIOs generated by the receiving node.\n
      \  IANA manages the codepoints for all TLVs carried in routing\n   constraint/metric
      objects.\n   IANA management of the Routing Metric/Constraint objects identifier\n
      \  codespace is described in Section 6.\n"
    title: 2.1.  DAG Metric Container Format
  - contents:
    - "2.2.  Use of Multiple DAG Metric Containers\n   Since the length of RPL options
      is encoded using 1 octet, they cannot\n   exceed 255 bytes, which also applies
      to the DAG Metric Container.  In\n   the vast majority of cases, the advertised
      routing metrics and\n   constraints will not require that much space.  However,
      there might\n   be circumstances where larger space is required, should, for
      example,\n   a set of routing metrics be recorded along a long path.  In this\n
      \  case, in order to avoid overflow, as specified in [RFC6550], routing\n   metrics
      will be carried using multiple DAG Metric Container objects.\n   In the rest
      of this document, this use of multiple DAG Metric\n   Container objects will
      be considered as if they were actually just\n   one long DAG Metric Container
      object.\n"
    title: 2.2.  Use of Multiple DAG Metric Containers
  - contents:
    - "2.3.  Metric Usage\n   When the DAG Metric Container contains a single aggregated
      metric\n   (scalar value), the order relation to select the best path is\n   implicitly
      derived from the metric type.  For example, lower is\n   better for Hop Count,
      Link Latency, and ETX.  Conversely, for Node\n   Energy or Throughput, higher
      is better.\n   An example of using such a single aggregated metric is optimizing\n
      \  routing for node energy.  The Node Energy metric (E_E field) defined\n   in
      Section 3.2 is aggregated along paths with an explicit min\n   function (A field),
      and the best path is selected through an implied\n   Max function because the
      metric is Energy.\n   When the DAG Metric Container contains several aggregated
      metrics,\n   they are to be used as tiebreakers according to their precedence\n
      \  defined by their Prec field values.\n   An example of such use of multiple
      aggregated metrics is the\n   following: Hop Count as the primary criterion,
      Link Quality Level\n   (LQL) as the secondary criterion, and Node Energy as
      the ultimate\n   tiebreaker.  In such a case, the Hop Count, LQL, and Node Energy\n
      \  metric objects' Prec fields should bear strictly increasing values\n   such
      as 0, 1, and 2, respectively.\n   If several aggregated metrics happen to bear
      the same Prec value, the\n   behavior is implementation dependent.\n"
    title: 2.3.  Metric Usage
  title: 2.  Object Formats
- contents:
  - "3.  Node Metric/Constraint Objects\n   Sections 3 and 4 specify several link
    and node metric/constraint\n   objects.  In some cases, it is stated that there
    must not be more\n   than one object of a specific type.  In that case, if a RPL\n
    \  implementation receives more than one object of that type, the second\n   object
    MUST silently be ignored.\n   In the presence of a constraint, a node MUST include
    a metric of the\n   same type.  That metric is used to check whether or not the\n
    \  constraint is met.  In all cases, a node MUST not change the content\n   of
    the constraint.\n"
  - contents:
    - "3.1.  Node State and Attribute Object\n   The Node State and Attribute (NSA)
      object is used to provide\n   information on node characteristics.\n   The NSA
      object MAY be present in the DAG Metric Container.  There\n   MUST NOT be more
      than one NSA object as a constraint per DAG Metric\n   Container, and there
      MUST NOT be more than one NSA object as a metric\n   per DAG Metric Container.\n
      \  The NSA object may also contain a set of TLVs used to convey various\n   node
      characteristics.  No TLV is currently defined.\n   The NSA Routing Metric/Constraint
      Type has been assigned value 1 by\n   IANA.\n   The format of the NSA object
      body is as follows:\n     0                   1                   2\n     0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ...\n    |     Res       |  Flags    |A|O|  Optional TLVs\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ...\n                Figure 2: NSA Object Body Format\n   Res flags (8 bits):
      Reserved field.  This field MUST be set to zero\n   on transmission and MUST
      be ignored on receipt.\n   Flags field (8 bits).  The following two bits of
      the NSA object are\n   currently defined:\n   o  'A' flag: data Aggregation
      Attribute.  Data aggregation is listed\n      as a requirement in Section 6.2
      of [RFC5548].  Some applications\n      may make use of the aggregation node
      attribute in their routing\n      decision so as to minimize the amount of traffic
      on the network,\n      thus, potentially increasing its lifetime in battery
      operated\n      environments.  Applications where highly directional data flow
      is\n      expected on a regular basis may take advantage of data aggregation\n
      \     supported routing.  When set, this indicates that the node can act\n      as
      a traffic aggregator.  Further documents MAY define optional\n      TLVs to
      describe the node traffic aggregator functionality.\n   o  'O' flag: node workload
      may be hard to determine and express in\n      some scalar form.  However, node
      workload could be a useful metric\n      to consider during path calculation,
      in particular when queuing\n      delays must be minimized for highly sensitive
      traffic considering\n      Medium Access Control (MAC) layer delay.  Node workload
      MAY be set\n      upon CPU overload, lack of memory, or any other node related\n
      \     conditions.  Using a simple 1-bit flag to characterize the node\n      workload
      provides a sufficient level of granularity, similar to\n      the \"overload\"
      bit used in routing protocols such as IS-IS.\n      Algorithms used to set the
      overload bit and to compute paths to\n      potentially avoid nodes with their
      overload bit set are outside\n      the scope of this document, but it is RECOMMENDED
      to avoid\n      frequent changes of this bit to avoid routing oscillations.
      \ When\n      set, this indicates that the node is overloaded and may not be\n
      \     able to process traffic.\n   The unspecified flag fields MUST be set to
      zero on transmission and\n   MUST be ignored on receipt.\n   The Flags field
      of the NSA Routing Metric/Constraint object is\n   managed by IANA.  Unassigned
      bits are considered as reserved.\n"
    title: 3.1.  Node State and Attribute Object
  - contents:
    - "3.2.  Node Energy Object\n   It may sometimes be desirable to avoid selecting
      a node with low\n   residual energy as a router; thus, the support for constraint-based\n
      \  routing is needed.  In such cases, the routing protocol engine may\n   compute
      a longer path (constraint based) for some traffic in order to\n   increase the
      network life duration.\n   Power and energy are clearly critical resources in
      most LLNs.  As\n   yet, there is no simple abstraction that adequately covers
      the broad\n   range of power sources and energy storage devices used in existing\n
      \  LLN nodes.  These include mains-powered, primary batteries, energy\n   scavengers,
      and a variety of secondary storage mechanisms.\n   Scavengers may provide a
      reliable low level of power, such as might\n   be available from a 4-20 mA loop;
      a reliable but periodic stream of\n   power, such as provided by a well-positioned
      solar cell; or\n   unpredictable power, such as might be provided by a vibrational\n
      \  energy scavenger on an intermittently powered pump.  Routes that are\n   viable
      when the sun is shining may disappear at night.  A pump\n   turning on may connect
      two previously disconnected sections of a\n   network.\n   Storage systems,
      such as rechargeable batteries, often suffer\n   substantial degradation if
      regularly used to full discharge, leading\n   to different residual energy numbers
      for regular versus emergency\n   operation.  A route for emergency traffic may
      have a different\n   optimum than one for regular reporting.\n   Batteries used
      in LLNs often degrade substantially if their average\n   current consumption
      exceeds a small fraction of the peak current that\n   they can deliver.  It
      is not uncommon for self-supporting nodes to\n   have a combination of primary
      storage, energy scavenging, and\n   secondary storage, leading to three different
      values for acceptable\n   average current depending on the time frame being
      considered, e.g.,\n   milliseconds, seconds, and hours/years.\n   Raw power
      and energy values are meaningless without knowledge of the\n   energy cost of
      sending and receiving packets, and lifetime estimates\n   have no value without
      some higher-level constraint on the lifetime\n   required of a device.  In some
      cases, the path that exhausts the\n   battery of a node on the bed table in
      a month may be preferable to a\n   route that reduces the lifetime of a node
      in the wall to a decade.\n   Given the complexity of trying to address such
      a broad collection of\n   constraints, this document defines two levels of fidelity
      in the\n   solution.\n   The simplest solution relies on a 2-bit field encoding
      three types of\n   power sources: \"powered\", \"battery\", and \"scavenger\".
      \ This simple\n   approach may be sufficient for many applications.\n   The
      mid-complexity solution is a single parameter that can be used to\n   encode
      the energetic happiness of both battery-powered and scavenging\n   nodes.  For
      scavenging nodes, the 8-bit quantity is the power\n   provided by the scavenger
      divided by the power consumed by the\n   application, E_E=P_in/P_out, in units
      of percent.  Nodes that are\n   scavenging more power than they are consuming
      will register above\n   100.  A good time period for averaging power in this
      calculation may\n   be related to the discharge time of the energy storage device
      on the\n   node, but specifying this is out of the scope of this document.  For\n
      \  battery-powered devices, E_E is the current expected lifetime divided\n   by
      the desired minimum lifetime, in units of percent.  The estimation\n   of remaining
      battery energy and actual power consumption can be\n   difficult, and the specifics
      of this calculation are out of scope of\n   this document, but two examples
      are presented.  If the node can\n   measure its average power consumption, then
      E_E can be calculated as\n   the ratio of desired max power (initial energy
      E_0 divided by desired\n   lifetime T) to actual power, E_E=P_max/P_now.  Alternatively,
      if the\n   energy in the battery E_bat can be estimated, and the total elapsed\n
      \  lifetime, t, is available, then E_E can be calculated as the total\n   stored
      energy remaining versus the target energy remaining: E_E=\n   E_bat / [E_0 (T-t)/T].\n
      \  An example of an optimized route is max(min(E_E)) for all battery-\n   operated
      nodes along the route, subject to the constraint that\n   E_E>=100 for all scavengers
      along the route.\n   Note that the estimated percentage of remaining energy
      indicated in\n   the E_E field may not be useful in the presence of nodes powered
      by\n   battery or energy scavengers when the amount of energy accumulated by\n
      \  the device significantly differ.  Indeed, X% of remaining energy on a\n   node
      that can store a large amount of energy cannot be easily\n   compared to the
      same percentage of remaining energy on a node powered\n   by a tiny source of
      energy.  That being said, in networks where nodes\n   have similar energy storage,
      such a percentage of remaining energy is\n   useful.\n   The Node Energy (NE)
      object is used to provide information related to\n   node energy and may be
      used as a metric or as constraint.\n   The NE object MAY be present in the DAG
      Metric Container.  There MUST\n   NOT be more than one NE object as a constraint
      per DAG Metric\n   Container, and there MUST NOT be more than one NE object
      as a metric\n   per DAG Metric Container.\n   The NE object Type has been assigned
      value 2 by IANA.\n   The format of the NE object body is as follows:\n     0
      \                  1                   2\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ...\n    |     NE Sub-objects\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ...\n      Figure 3: NE Sub-Object Format\n   The format of the NE sub-object
      body is as follows:\n     0                   1                   2\n     0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ...\n    | Flags |I| T |E|      E_E      |   Optional TLVs\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ...\n            Figure 4: NE Sub-Object Format\n   The NE sub-object may also
      contain a set of TLVs used to convey\n   various nodes' characteristics.\n   Flags
      field (8 bits).  The following flags are currently defined:\n   o  I (Included):
      the 'I' bit is only relevant when the node type is\n      used as a constraint.
      \ For example, the path must only traverse\n      mains-powered nodes.  Conversely,
      battery-operated nodes must be\n      excluded.  The 'I' bit is used to stipulate
      inclusion versus\n      exclusion.  When set, this indicates that nodes of the
      type\n      specified in the node type field MUST be included.  Conversely,\n
      \     when cleared, this indicates that nodes of type specified in the\n      node
      type field MUST be excluded.\n   o  T (node Type): 2-bit field indicating the
      node type.  T=0\n      designates a mains-powered node, T=1 a battery-powered
      node, and\n      T=2 a node powered by an energy scavenger.\n   o  E (Estimation):
      when the 'E' bit is set for a metric, the\n      estimated percentage of remaining
      energy on the node is indicated\n      in the E_E 8-bit field.  When cleared,
      the estimated percentage of\n      remaining energy is not provided.  When the
      'E' bit is set for a\n      constraint, the E_E field defines a threshold for
      the inclusion/\n      exclusion: if an inclusion, nodes with values higher than
      the\n      threshold are to be included; if an exclusion, nodes with values\n
      \     lower than the threshold are to be excluded.\n   E_E (Estimated-Energy):
      8-bit unsigned integer field indicating an\n   estimated percentage of remaining
      energy.  The E_E field is only\n   relevant when the 'E' flag is set, and it
      MUST be set to 0 when the\n   'E' flag is cleared.\n   If the NE object comprises
      several sub-objects when used as a\n   constraint, each sub-object adds or subtracts
      node subsets as the\n   sub-objects are parsed in order.  The initial set (full
      or empty) is\n   defined by the 'I' bit of the first sub-object: full if that
      'I' bit\n   is an exclusion, empty if that 'I' bit is an inclusion.\n   No TLV
      is currently defined.\n   Future documents may define more complex solutions
      involving TLV\n   parameters representing energy storage, consumption, and generation\n
      \  capabilities of the node, as well as desired lifetime.\n"
    title: 3.2.  Node Energy Object
  - contents:
    - "3.3.  Hop Count Object\n   The Hop Count (HP) object is used to report the
      number of traversed\n   nodes along the path.\n   The HP object MAY be present
      in the DAG Metric Container.  There MUST\n   NOT be more than one HP object
      as a constraint per DAG Metric\n   Container, and there MUST NOT be more than
      one HP object as a metric\n   per DAG Metric Container.\n   The HP object may
      also contain a set of TLVs used to convey various\n   node characteristics.
      \ No TLV is currently defined.\n   The HP routing metric object Type has been
      assigned value 3 by IANA.\n   The format of the Hop Count object body is as
      follows:\n     0                   1                   2\n     0 1 2 3 4 5 6
      7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ...\n    |  Res  | Flags |   Hop Count   |  Optional TLVs\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ...\n           Figure 5: Hop Count Object Body Format\n   Res flags (4 bits):
      Reserved field.  This field MUST be set to zero\n   on transmission and MUST
      be ignored on receipt.\n   No Flag is currently defined.  Unassigned bits are
      considered\n   reserved.  They MUST be set to zero on transmission and MUST
      be\n   ignored on receipt.\n   The HP object may be used as a constraint or
      a metric.  When used as\n   a constraint, the DAG root indicates the maximum
      number of hops that\n   a path may traverse.  When that number is reached, no
      other node can\n   join that path.  When used as a metric, each visited node
      simply\n   increments the Hop Count field.\n   Note that the first node along
      a path inserting a Hop Count metric\n   object MUST set the Hop Count field
      value to 1.\n"
    title: 3.3.  Hop Count Object
  title: 3.  Node Metric/Constraint Objects
- contents:
  - '4.  Link Metric/Constraint Objects

    '
  - contents:
    - "4.1.  Throughput\n   Many LLNs support a wide range of throughputs.  For some
      links, this\n   may be due to variable coding.  For the deeply duty-cycled links\n
      \  found in many LLNs, the variability comes as a result of trading\n   power
      consumption for bit rate.  There are several MAC layer\n   protocols that allow
      for the effective bit rate of a link to vary\n   over more than three orders
      of magnitude with a corresponding change\n   in power consumption.  For efficient
      operation, it may be desirable\n   for nodes to report the range of throughput
      that their links can\n   handle in addition to the currently available throughput.\n
      \  The Throughput object MAY be present in the DAG Metric Container.\n   There
      MUST NOT be more than one Throughput object as a constraint per\n   DAG Metric
      Container, and there MUST NOT be more than one Throughput\n   object as a metric
      per DAG Metric Container.\n   The Throughput object is made of throughput sub-objects
      and MUST at\n   least comprise one Throughput sub-object.  The first Throughput
      sub-\n   object MUST be the most recently estimated actual throughput.  The\n
      \  actual estimation of the throughput is outside the scope of this\n   document.\n
      \  Each Throughput sub-object has a fixed length of 4 bytes.\n   The Throughput
      object does not contain any additional TLVs.\n   The Throughput object Type
      has been assigned value 4 by IANA.\n   The format of the Throughput object body
      is as follows:\n    0                   1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  (sub-object) .....\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Figure 6: Throughput Object Body Format\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                       Throughput                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Figure 7: Throughput Sub-Object Format\n   Throughput: 32 bits.  The Throughput
      is encoded in 32 bits in\n   unsigned integer format, expressed in bytes per
      second.\n"
    title: 4.1.  Throughput
  - contents:
    - "4.2.  Latency\n   Similar to throughput, the latency of many LLN MAC sub-layers
      can\n   vary over many orders of magnitude, again with a corresponding change\n
      \  in power consumption.  Some LLN MAC link layers will allow the\n   latency
      to be adjusted globally on the subnet, on a link-by-link\n   basis, or not at
      all.  Some will insist that it be fixed for a given\n   link, but allow it to
      be variable from link to link.\n   The Latency object MAY be present in the
      DAG Metric Container.  There\n   MUST NOT be more than one Latency object as
      a constraint per DAG\n   Metric Container, and there MUST NOT be more than one
      Latency object\n   as a metric per DAG Metric Container.\n   The Latency object
      is made of Latency sub-objects and MUST at least\n   comprise one Latency sub-object.
      \ Each Latency sub-object has a fixed\n   length of 4 bytes.\n   The Latency
      object does not contain any additional TLVs.\n   The Latency object Type has
      been assigned value 5 by IANA.\n   The Latency object is a metric or constraint.\n
      \  The format of the Latency object body is as follows:\n    0                   1\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  (sub-object)
      .....\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Figure 8: Latency Object Body Format\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         Latency                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Figure 9: Latency Sub-Object Format\n   Latency: 32 bits.  The Latency is
      encoded in 32 bits in unsigned\n   integer format, expressed in microseconds.\n
      \  The Latency object may be used as a constraint or a path metric.  For\n   example,
      one may want the latency not to exceed some value.  In this\n   case, the Latency
      object common header indicates that the provided\n   value relates to a constraint.
      \ In another example, the Latency\n   object may be used as an aggregated additive
      metric where the value\n   is updated along the path to reflect the path latency.\n"
    title: 4.2.  Latency
  - contents:
    - "4.3.  Link Reliability\n   In LLNs, link reliability could be degraded for
      a number of reasons:\n   signal attenuation, interferences of various forms,
      etc.  Time scales\n   vary from milliseconds to days, and are often periodic
      and linked to\n   human activity.  Packet error rates can generally be measured\n
      \  directly, and other metrics (e.g., bit error rate, mean time between\n   failures)
      are typically derived from that.  Note that such\n   variability is not specific
      to wireless link but also applies to PLC\n   links.\n   A change in link quality
      can affect network connectivity; thus, link\n   quality may be taken into account
      as a critical routing metric.\n   A number of link reliability metrics could
      be defined reflecting\n   several reliability aspects.  Two link reliability
      metrics are\n   defined in this document: the Link Quality Level (LQL) and the
      ETX\n   Metric.\n   Note that a RPL deployment MAY use the LQL, the ETX, or
      both.\n"
    - contents:
      - "4.3.1.  The Link Quality Level Reliability Metric\n   The Link Quality Level
        (LQL) object is used to quantify the link\n   reliability using a discrete
        value, from 0 to 7, where 0 indicates\n   that the link quality level is unknown
        and 1 reports the highest link\n   quality level.  The mechanisms and algorithms
        used to compute the LQL\n   are implementation specific and outside of the
        scope of this\n   document.\n   The LQL can be used either as a metric or
        a constraint.  When used as\n   a metric, the LQL metric can only be recorded.
        \ For example, the DAG\n   Metric object may request all traversed nodes to
        record the LQL of\n   their incoming link into the LQL object.  Each node
        can then use the\n   LQL record to select its parent based on some user defined
        rules\n   (e.g., something like \"select the path with most links reporting
        a\n   LQL value of 3 or less\").\n   Counters are used to compress the information:
        for each encountered\n   LQL value, only the number of matching links is reported.\n
        \  The LQL object MAY be present in the DAG Metric Container.  There\n   MUST
        NOT be more than one LQL object as a constraint per DAG Metric\n   Container,
        and there MUST NOT be more than one LQL object as a metric\n   per DAG Metric
        Container.\n   The LQL object MUST contain one or more sub-object used to
        report the\n   number of links along with their LQL.\n   The LQL object Type
        has been assigned value 6 by IANA.\n   The format of the LQL object body is
        as follows:\n     0                   1                   2\n     0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        ...\n    |       Res     | LQL sub-object\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        ...\n      Figure 10: LQL Object Body Format\n   Res flags (8 bits): Reserved
        field.  This field MUST be set to zero\n   on transmission and MUST be ignored
        on receipt.\n   When the LQL metric is recorded, the LQL object body comprises
        one or\n   more LQL Type 1 sub-object.\n   The format of the LQL Type 1 sub-object
        is as follows\n     0\n     0 1 2 3 4 5 6 7\n    +-+-+-+-+-+-+-+-+\n    |
        Val | Counter |\n    +-+-+-+-+-+-+-+-+\n    Figure 11: LQL Type 1 Sub-Object
        Format\n   Val: LQL value from 0 to 7 where 0 means undetermined and 1 indicates\n
        \  the highest link quality.\n   Counter: number of links with that value.\n"
      title: 4.3.1.  The Link Quality Level Reliability Metric
    - contents:
      - "4.3.2.  The ETX Reliability Object\n   The ETX metric is the number of transmissions
        a node expects to make\n   to a destination in order to successfully deliver
        a packet.  In\n   contrast with the LQL routing metric, the ETX provides a
        discrete\n   value (which may not be an integer) computed according to a specific\n
        \  formula: for example, an implementation may use the following\n   formula:
        ETX= 1 / (Df * Dr) where Df is the measured probability that\n   a packet
        is received by the neighbor and Dr is the measured\n   probability that the
        acknowledgment packet is successfully received.\n   This document does not
        mandate the use of a specific formula to\n   compute the ETX value.\n   The
        ETX object MAY be present in the DAG Metric Container.  There\n   MUST NOT
        be more than one ETX object as a constraint per DAG Metric\n   Container,
        and there MUST NOT be more than one ETX object as a metric\n   per DAG Metric
        Container.\n   The ETX object is made of ETX sub-objects and MUST at least
        comprise\n   one ETX sub-object.  Each ETX sub-object has a fixed length of
        16\n   bits.\n   The ETX object does not contain any additional TLVs.\n   The
        ETX object Type has been assigned value 7 by IANA.\n   The format of the ETX
        object body is as follows:\n    0                   1\n    0 1 2 3 4 5 6 7
        8 9 0 1 2 3\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  (sub-object) .....\n
        \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Figure 12: ETX Object Body Format\n    0
        \                  1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |              ETX              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Figure 13: ETX Sub-Object Format\n   ETX: 16 bits.  The ETX * 128 is encoded
        using 16 bits in unsigned\n   integer format, rounded off to the nearest whole
        number.  For\n   example, if ETX = 3.569, the object value will be 457.  If
        ETX >\n   511.9921875, the object value will be the maximum, which is 65535.\n
        \  The ETX object may be used as a constraint or a path metric.  For\n   example,
        it may be required that the ETX must not exceed some\n   specified value.
        \ In this case, the ETX object common header\n   indicates that the value
        relates to a constraint.  In another\n   example, the ETX object may be used
        as an aggregated additive metric\n   where the value is updated along the
        path to reflect the path\n   quality: when a node receives the aggregated
        additive ETX value of\n   the path (cumulative path ETX calculated as the
        sum of the link ETX\n   of all of the traversed links from the advertising
        node to the DAG\n   root), if it selects that node as its preferred parent,
        the node\n   updates the path ETX by adding the ETX of the local link between\n
        \  itself and the preferred parent to the received path cost (path ETX)\n
        \  before potentially advertising itself the new path ETX.\n"
      title: 4.3.2.  The ETX Reliability Object
    title: 4.3.  Link Reliability
  - contents:
    - '4.4.  Link Color Object

      '
    - contents:
      - "4.4.1.  Link Color Object Description\n   The Link Color (LC) object is an
        administrative 10-bit link\n   constraint (which may be either static or dynamically
        adjusted) used\n   to avoid or attract specific links for specific traffic
        types.\n   The LC object can be used either as a metric or as a constraint.\n
        \  When used as a metric, the LC metric can only be recorded.  For\n   example,
        the DAG may require recording the link colors for all\n   traversed links.
        \ A color is defined as a specific set of bit values:\n   in other words,
        that 10-bit field is a flag field, and not a scalar\n   value.  Each node
        can then use the LC to select the parent based on\n   user defined rules (e.g.,
        \"select the path with the maximum number of\n   links having their first
        bit set 1 (e.g., encrypted links)\").  The LC\n   object may also be used
        as a constraint.\n   When used as a recorded metric, a counter is used to
        compress the\n   information where the number of links for each Link Color
        is\n   reported.\n   The Link Color (LC) object MAY be present in the DAG
        Metric\n   Container.  There MUST NOT be more than one LC object as a constraint\n
        \  per DAG Metric Container, and there MUST NOT be more than one LC\n   object
        as a metric per DAG Metric Container.\n   There MUST be a at least one LC
        sub-object per LC object.\n   The LC object does not contain any additional
        TLVs.\n   The LC object Type has been assigned value 8 by IANA.\n   The format
        of the LC object body is as follows:\n     0                   1                   2\n
        \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        ...\n    |      Res      | LC sub-objects\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        ...\n      Figure 14: LC Object Format\n   Res flags (8 bits): Reserved field.
        \ This field MUST be set to zero\n   on transmission and MUST be ignored on
        receipt.\n   When the LC object is used as a recorded metric, the LC object
        body\n   comprises one or more LC Type 1 sub-objects.\n   The format of the
        LC Type 1 sub-object body is as follows:\n    0                   1\n    0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |
        \   Link Color     |  Counter  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     Figure
        15: LC Type 1 Sub-Object Format\n   When the LC object is used as a constraint,
        the LC object body\n   comprises one or more LC Type 2 sub-objects.\n   The
        format of the LC Type 2 sub-object body is as follows:\n    0                   1\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Link Color    |Reserved |I|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    Figure 16: LC Type 2 Sub-Object Format\n   Reserved (5 bits): Reserved
        field.  This field MUST be set to zero on\n   transmission and MUST be ignored
        on receipt.\n   'I' Bit: The 'I' bit is only relevant when the Link Color
        is used as\n   a constraint.  When set, this indicates that links with the
        specified\n   color must be included.  When cleared, this indicates that links
        with\n   the specified color must be excluded.\n   It is left to the implementer
        to define the meaning of each bit of\n   the 10-bit Link Color Flag field.\n"
      title: 4.4.1.  Link Color Object Description
    - contents:
      - "4.4.2.  Mode of Operation\n   The link color may be used as a constraint
        or a metric.\n   o  When used as constraint, the LC object may be inserted
        in the DAG\n      Metric Container to indicate that links with a specific
        color\n      should be included or excluded from the computed path.\n   o
        \ When used as recorded metric, each node along the path may insert\n      an
        LC object in the DAG Metric Container to report the color of\n      the local
        link.  If there is already an LC object reporting a\n      similar color,
        the node MUST NOT add another identical LC sub-\n      object and MUST increment
        the counter field.\n"
      title: 4.4.2.  Mode of Operation
    title: 4.4.  Link Color Object
  title: 4.  Link Metric/Constraint Objects
- contents:
  - "5.  Computation of Dynamic Metrics and Attributes\n   As already pointed out,
    dynamically calculated metrics are of the\n   utmost importance in many circumstances
    in LLNs.  This is mainly\n   because a variety of metrics change on a frequent
    basis, thus,\n   implying the need to adapt the routing decisions.  That being
    said,\n   care must be given to the pace at which changes are reported in the\n
    \  network.  The attributes will change according to their own time\n   scales.
    \ RPL controls the reporting rate.\n   To minimize metric updates, multi-threshold
    algorithms MAY be used to\n   determine when updates should be sent.  When practical,
    low-pass\n   filtering and/or hysteresis should be used to avoid rapid\n   fluctuations
    of these values.  Finally, although the specification of\n   path computation
    algorithms using dynamic metrics is out of the scope\n   of this document, it
    is RECOMMENDED to carefully design the route\n   optimization algorithm to avoid
    too frequent computation of new\n   routes upon metric values changes.\n   Controlled
    adaptation of the routing metrics and rate at which paths\n   are computed are
    critical to avoid undesirable routing instabilities\n   resulting in increased
    latencies and packet loss because of temporary\n   micro-loops.  Furthermore,
    excessive route changes will adversely\n   impact the traffic and power consumption
    in the network, thus,\n   potentially impacting its scalability.\n"
  title: 5.  Computation of Dynamic Metrics and Attributes
- contents:
  - "6.  IANA Considerations\n   IANA has established a new top-level registry, called
    \"RPL Routing\n   Metric/Constraint\", to contain all Routing Metric/Constraint
    objects\n   codepoints and sub-registries.\n   The allocation policy for each
    new registry is by IETF review: new\n   values are assigned through the IETF review
    process (see [RFC5226]).\n   Specifically, new assignments are made via RFCs approved
    by the IESG.\n   Typically, the IESG will seek input on prospective assignments
    from\n   appropriate persons (e.g., a relevant working group if one exists).\n
    \  New bit numbers may be allocated only by an IETF Review action.  Each\n   bit
    should be tracked with the following qualities:\n   o  Bit number\n   o  Capability
    Description\n   o  Defining RFC\n"
  - contents:
    - "6.1.  Routing Metric/Constraint Type\n   IANA has created a sub-registry, called
      \"Routing Metric/Constraint\n   Type\", for Routing Metric/Constraint object
      types, which range from 0\n   to 255.  Value 0 is unassigned.\n   Value     Meaning
      \                        Reference\n     1       Node State and Attribute      This
      document\n     2       Node Energy                   This document\n     3       Hop
      Count                     This document\n     4       Link Throughput               This
      document\n     5       Link Latency                  This document\n     6       Link
      Quality Level            This document\n     7       Link ETX                      This
      document\n     8       Link Color                    This document\n"
    title: 6.1.  Routing Metric/Constraint Type
  - contents:
    - "6.2.  Routing Metric/Constraint TLVs\n   IANA has created a sub-registry, called
      \"Routing Metric/Constraint\n   TLVs\", used for all TLVs carried within Routing
      Metric/Constraint\n   objects.  The Type field is an 8-bit field whose value
      is comprised\n   between 0 and 255.  Value 0 is unassigned.  The Length field
      is an\n   8-bit field whose value ranges from 0 to 255.  The Value field has\n
      \  value ranges depending on the Type; therefore, they are not defined\n   here,
      since no Type is registered at this time.\n"
    title: 6.2.  Routing Metric/Constraint TLVs
  - contents:
    - "6.3.  Routing Metric/Constraint Common Header Flag Field\n   IANA has created
      a sub-registry, called \"Routing Metric/Constraint\n   Common Header Flag field\",
      to manage the 9-bit Flag field of the\n   Routing Metric/Constraint common header.\n
      \  Several bits are defined for the Routing Metric/Constraint common\n   header
      Flag field in this document.  The following values have been\n   assigned:\n
      \  Codespace of the Flag field (Routing Metric/Constraint common header)\n     Bit
      \     Description              Reference\n      8       Recorded/Aggregated
      \     This document\n      7       Optional Constraint      This document\n
      \     6       Constraint/Metric        This document\n      5       P (Partial)
      \             This document\n   Bits 0-4 are currently reserved.\n"
    title: 6.3.  Routing Metric/Constraint Common Header Flag Field
  - contents:
    - "6.4.  Routing Metric/Constraint Common Header A Field\n   IANA has created
      a sub-registry, called \"Routing Metric/Constraint\n   Common Header A field\",
      to manage the codespace of the A field of the\n   Routing Metric/Constraint
      common header.\n   The A field is 3 bits in length, and it has values ranging
      from 0 to\n   7.\n   Codespace of the A field (Routing Metric/Constraint common
      header)\n    Value  Meaning                              Reference\n      0
      \   Routing metric is additive           This document\n      1    Routing metric
      reports a maximum     This document\n      2    Routing metric reports a minimum
      \    This document\n      3    Routing metric is multiplicative     This document\n"
    title: 6.4.  Routing Metric/Constraint Common Header A Field
  - contents:
    - "6.5.  NSA Object Flags Field\n   IANA has created a sub-registry, called \"NSA
      Object Flag field\", to\n   manage the codespace of the 8-bit Flag field of
      the NSA object.\n   Several bits are defined for the NSA Object Flag field in
      this\n   document.  The following values have been assigned:\n   Codespace of
      the Flag field (NSA object)\n     Bit      Description              Reference\n
      \     6      Aggregator               This document\n      7      Overloaded
      \              This document\n   Bits 0-5 are reserved.\n"
    title: 6.5.  NSA Object Flags Field
  - contents:
    - "6.6.  Hop-Count Object Flags Field\n   IANA has created a sub-registry, called
      \"Hop-Count Object Flag\n   field\", to manage the codespace of the 4-bit Flag
      field of the Hop\n   Count object.\n   No Flag is currently defined.\n"
    title: 6.6.  Hop-Count Object Flags Field
  - contents:
    - "6.7.  Node Type Field\n   IANA has created a sub-registry, called \"Node Type
      Field\", to manage\n   the codespace of the field of the Routing Metric/Constraint
      common\n   header.\n   The T field is 2 bits in length, and it has values ranging
      from 0 to\n   3.\n   Codespace of the T field (Routing Metric/Constraint common
      header)\n   Value      Description                                    Reference\n
      \   0         a mains-powered node                         This document\n    1
      \        a battery-powered node                       This document\n    2         a
      node powered by an energy scavenger        This document\n"
    title: 6.7.  Node Type Field
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   Routing metrics should be handled in a secure
    and trustful manner.\n   For instance, RPL should not allow a malicious node to
    falsely\n   advertise that it has good metrics for routing so as to be selected\n
    \  as preferred next-hop router for other nodes' traffic and intercept\n   packets.
    \ Another attack may consist of making intermittent attacks\n   on a link in an
    attempt to constantly modify the link quality and\n   consequently the associated
    routing metric, thus, leading to\n   potential fluctuation in the DODAG.  Thus,
    it is RECOMMENDED for a\n   RPL implementation to put in place mechanisms so as
    to stop\n   advertising routing metrics for highly unstable links that may be\n
    \  subject to attacks.\n   Some routing metrics may also be used to identify some
    areas of\n   weaknesses in the network (a highly unreliable link, a node running\n
    \  low in terms of energy, etc.).  Such information may be used by a\n   potential
    attacker.  Thus, it is RECOMMENDED to carefully consider\n   which metrics should
    be used by RPL and the level of visibility that\n   they provide about the network
    state or to use appropriate the\n   security measures as specified in [RFC6550]
    to protect that\n   information.\n   Since the routing metrics/constraints are
    carried within RPL message,\n   the security routing mechanisms defined in [RFC6550]
    apply here.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgements\n   The authors would like to acknowledge the contributions
    of Young Jae\n   Kim, Hakjin Chong, David Meyer, Mischa Dohler, Anders Brandt,
    Philip\n   Levis, Pascal Thubert, Richard Kelsey, Jonathan Hui, Alexandru\n   Petrescu,
    Richard Kelsey, Mathilde Durvy, Phoebus Chen, Tim Winter,\n   Yoav Ben-Yehezkel,
    Matteo Paris, Omprakash Gnawali, Mads Westergreen,\n   Mukul Goyal, Joseph Saloway,
    David Culler, and Jari Arkko for their\n   review and valuable comments.  Special
    thanks to Adrian Farrel for\n   his thorough review.\n"
  title: 8.  Acknowledgements
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use
      in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC5226]     Narten, T. and H. Alvestrand, \"Guidelines for
      Writing\n                 an IANA Considerations Section in RFCs\", BCP 26,\n
      \                RFC 5226, May 2008.\n   [RFC6550]     Winter, T., Ed., Thubert,
      P., Ed., Brandt, A., Hui, J.,\n                 Kelsey, R., Levis, P., Pister,
      K., Struik, R., Vasseur,\n                 JP., and R. Alexander, \"RPL: IPv6
      Routing Protocol for\n                 Low-Power and Lossy Networks\", RFC 6550,
      March 2012.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC1195]     Callon, R., \"Use of OSI IS-IS
      for routing in TCP/IP and\n                 dual environments\", RFC 1195, December
      1990.\n   [RFC2328]     Moy, J., \"OSPF Version 2\", STD 54, RFC 2328,\n                 April
      1998.\n   [RFC2702]     Awduche, D., Malcolm, J., Agogbua, J., O'Dell, M., and\n
      \                J. McManus, \"Requirements for Traffic Engineering Over\n                 MPLS\",
      RFC 2702, September 1999.\n   [RFC3209]     Awduche, D., Berger, L., Gan, D.,
      Li, T., Srinivasan,\n                 V., and G. Swallow, \"RSVP-TE: Extensions
      to RSVP for\n                 LSP Tunnels\", RFC 3209, December 2001.\n   [RFC5548]
      \    Dohler, M., Watteyne, T., Winter, T., and D. Barthel,\n                 \"Routing
      Requirements for Urban Low-Power and Lossy\n                 Networks\", RFC
      5548, May 2009.\n   [RFC5673]     Pister, K., Thubert, P., Dwars, S., and T.
      Phinney,\n                 \"Industrial Routing Requirements in Low-Power and
      Lossy\n                 Networks\", RFC 5673, October 2009.\n   [RFC5826]     Brandt,
      A., Buron, J., and G. Porcu, \"Home Automation\n                 Routing Requirements
      in Low-Power and Lossy Networks\",\n                 RFC 5826, April 2010.\n
      \  [RFC5867]     Martocci, J., De Mil, P., Riou, N., and W. Vermeylen,\n                 \"Building
      Automation Routing Requirements in Low-Power\n                 and Lossy Networks\",
      RFC 5867, June 2010.\n   [RFC6552]     Thubert, P., Ed., \"Objective Function
      Zero for the\n                 Routing Protocol for Low-Power and Lossy Networks\n
      \                (RPL)\", RFC 6552, March 2012.\n   [ROLL-TERMS]  Vasseur, JP.,
      \"Terminology in Low power And Lossy\n                 Networks\", Work in Progress,
      September 2011.\n   [Zinky1989]   Zinky, J., Vichniac, G., and A. Khanna, \"Performance
      of\n                 the Revised Routing Metric for ARPANET and MILNET\",\n
      \                Military Communications Conference, MILCOM '89,\n                 March
      1989.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   JP. Vasseur (editor)\n   Cisco Systems\n   11, Rue Camille
    Desmoulins\n   Issy Les Moulineaux  92782\n   France\n   EMail: jpv@cisco.com\n
    \  Mijeom Kim (editor)\n   Corporate Technology Group, KT\n   17 Woomyeon-dong,
    Seocho-gu\n   Seoul  137-792\n   Korea\n   EMail: mjkim@kt.com\n   Kris Pister\n
    \  Dust Networks\n   30695 Huntwood Ave.\n   Hayward, CA  95544\n   USA\n   EMail:
    kpister@dustnetworks.com\n   Nicolas Dejean\n   Elster SAS\n   Espace Concorde,
    120 impasse JB Say\n   Perols  34470\n   France\n   EMail: nicolas.dejean@coronis.com\n
    \  Dominique Barthel\n   France Telecom Orange\n   28 chemin du Vieux Chene, BP
    98\n   Meylan  38243\n   France\n   EMail: dominique.barthel@orange.com\n"
  title: Authors' Addresses
