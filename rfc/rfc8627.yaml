- title: __initial_text__
  contents:
  - '     RTP Payload Format for Flexible Forward Error Correction (FEC)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines new RTP payload formats for the Forward Error\n\
    \   Correction (FEC) packets that are generated by the non-interleaved\n   and\
    \ interleaved parity codes from source media encapsulated in RTP.\n   These parity\
    \ codes are systematic codes (Flexible FEC, or \"FLEX\n   FEC\"), where a number\
    \ of FEC repair packets are generated from a set\n   of source packets from one\
    \ or more source RTP streams.  These FEC\n   repair packets are sent in a redundancy\
    \ RTP stream separate from the\n   source RTP stream(s) that carries the source\
    \ packets.  RTP source\n   packets that were lost in transmission can be reconstructed\
    \ using the\n   source and repair packets that were received.  The non-interleaved\n\
    \   and interleaved parity codes that are defined in this specification\n   offer\
    \ a good protection against random and bursty packet losses,\n   respectively,\
    \ at a cost of complexity.  The RTP payload formats that\n   are defined in this\
    \ document address scalability issues experienced\n   with the earlier specifications\
    \ and offer several improvements.  Due\n   to these changes, the new payload formats\
    \ are not backward compatible\n   with earlier specifications; however, endpoints\
    \ that do not implement\n   this specification can still work by simply ignoring\
    \ the FEC repair\n   packets.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8627.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Parity Codes  . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n       1.1.1.  One-Dimensional (1-D) Non-interleaved (Row) FEC\n\
    \               Protection  . . . . . . . . . . . . . . . . . . . . .   5\n  \
    \     1.1.2.  1-D Interleaved (Column) FEC Protection . . . . . . .   6\n    \
    \   1.1.3.  Use Cases for 1-D FEC Protection  . . . . . . . . . .   7\n      \
    \ 1.1.4.  Two-Dimensional (2-D) (Row and Column) FEC Protection   8\n       1.1.5.\
    \  FEC Protection with Flexible Mask . . . . . . . . . .  10\n       1.1.6.  FEC\
    \ Overhead Considerations . . . . . . . . . . . . .  10\n       1.1.7.  FEC Protection\
    \ with Retransmission  . . . . . . . . .  10\n       1.1.8.  Repair Window Considerations\
    \  . . . . . . . . . . . .  11\n   2.  Requirements Notation . . . . . . . . .\
    \ . . . . . . . . . . .  11\n   3.  Definitions and Notations . . . . . . . .\
    \ . . . . . . . . . .  11\n     3.1.  Definitions . . . . . . . . . . . . . .\
    \ . . . . . . . . .  11\n     3.2.  Notations . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  12\n   4.  Packet Formats  . . . . . . . . . . . . . . . .\
    \ . . . . . . .  12\n     4.1.  Source Packets  . . . . . . . . . . . . . . .\
    \ . . . . . .  12\n     4.2.  FEC Repair Packets  . . . . . . . . . . . . . .\
    \ . . . . .  13\n       4.2.1.  RTP Header of FEC Repair Packets  . . . . . .\
    \ . . . .  13\n       4.2.2.  FEC Header of FEC Repair Packets  . . . . . . .\
    \ . . .  15\n   5.  Payload Format Parameters . . . . . . . . . . . . . . . .\
    \ . .  20\n     5.1.  Media Type Registration -- Parity Codes . . . . . . . .\
    \ .  20\n       5.1.1.  Registration of audio/flexfec . . . . . . . . . . . .\
    \  21\n       5.1.2.  Registration of video/flexfec . . . . . . . . . . . .  22\n\
    \       5.1.3.  Registration of text/flexfec  . . . . . . . . . . . .  23\n  \
    \     5.1.4.  Registration of application/flexfec . . . . . . . . .  24\n    \
    \ 5.2.  Mapping to SDP Parameters . . . . . . . . . . . . . . . .  25\n      \
    \ 5.2.1.  Offer/Answer Model Considerations . . . . . . . . . .  25\n       5.2.2.\
    \  Declarative Considerations  . . . . . . . . . . . . .  26\n   6.  Protection\
    \ and Recovery Procedures -- Parity Codes  . . . . .  26\n     6.1.  Overview\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  26\n     6.2.  Repair Packet\
    \ Construction  . . . . . . . . . . . . . . .  26\n     6.3.  Source Packet Reconstruction\
    \  . . . . . . . . . . . . . .  28\n       6.3.1.  Associating the Source and\
    \ Repair Packets . . . . . .  28\n       6.3.2.  Recovering the RTP Header . .\
    \ . . . . . . . . . . . .  30\n       6.3.3.  Recovering the RTP Payload  . .\
    \ . . . . . . . . . . .  31\n       6.3.4.  Iterative Decoding Algorithm for the\
    \ 2-D Parity FEC\n               Protection  . . . . . . . . . . . . . . . . .\
    \ . . . .  31\n   7.  Signaling Requirements  . . . . . . . . . . . . . . . .\
    \ . . .  34\n     7.1.  SDP Examples  . . . . . . . . . . . . . . . . . . . .\
    \ . .  35\n       7.1.1.  Example SDP for Flexible FEC Protection with In-Band\n\
    \               SSRC Mapping  . . . . . . . . . . . . . . . . . . . .  35\n  \
    \     7.1.2.  Example SDP for Flexible FEC Protection with Explicit\n        \
    \       Signaling in the SDP  . . . . . . . . . . . . . . . .  35\n     7.2. \
    \ On the Use of the RTP Stream Identifier Source\n           Description . . .\
    \ . . . . . . . . . . . . . . . . . . . .  36\n   8.  Congestion Control Considerations\
    \ . . . . . . . . . . . . . .  36\n   9.  Security Considerations . . . . . .\
    \ . . . . . . . . . . . . .  37\n   10. IANA Considerations . . . . . . . . .\
    \ . . . . . . . . . . . .  37\n   11. References  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  38\n     11.1.  Normative References . . . . . . . .\
    \ . . . . . . . . . .  38\n     11.2.  Informative References . . . . . . . .\
    \ . . . . . . . . .  39\n   Acknowledgments . . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  40\n   Authors' Addresses  . . . . . . . . . . . . . . . .\
    \ . . . . . . .  41\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines new RTP payload formats for the Forward\
    \ Error\n   Correction (FEC) that is generated by the non-interleaved and\n  \
    \ interleaved parity codes from a source media encapsulated in RTP\n   [RFC3550].\
    \  The type of the source media protected by these parity\n   codes can be audio,\
    \ video, text, or application.  The FEC data are\n   generated according to the\
    \ media type parameters, which are\n   communicated out of band (e.g., in the\
    \ Session Description Protocol\n   (SDP)).  Furthermore, the associations or relationships\
    \ between the\n   source and repair RTP streams may be communicated in or out\
    \ of band.\n   The in-band mechanism is advantageous when the endpoint is adapting\n\
    \   the FEC parameters.  The out-of-band mechanism may be preferable when\n  \
    \ the FEC parameters are fixed.  While this document fully defines the\n   use\
    \ of FEC to protect RTP streams, it also leverages several\n   definitions along\
    \ with the basic source/repair header description\n   from [RFC6363] in their\
    \ application to the parity codes defined here.\n   The Redundancy RTP Stream\
    \ [RFC7656] repair packets proposed in this\n   document protect the Source RTP\
    \ Stream packets that belong to the\n   same RTP session.\n   The RTP payload\
    \ formats that are defined in this document address the\n   scalability issues\
    \ experienced with the formats defined in earlier\n   specifications including\
    \ [RFC2733], [RFC5109], and [SMPTE2022-1].\n"
- title: 1.1.  Parity Codes
  contents:
  - "1.1.  Parity Codes\n   Both the non-interleaved and interleaved parity codes\
    \ use the\n   eXclusive OR (XOR) operation to generate the repair packets.  The\n\
    \   following steps take place:\n   1.  The sender determines a set of source\
    \ packets to be protected by\n       FEC based on the media type parameters.\n\
    \   2.  The sender applies the XOR operation on the source packets to\n      \
    \ generate the required number of repair packets.\n   3.  The sender sends the\
    \ repair packet(s) along with the source\n       packets, in different RTP streams,\
    \ to the receiver(s).  The\n       repair packets may be sent proactively or on\
    \ demand based on RTCP\n       feedback messages such as NACK [RFC4585].\n   At\
    \ the receiver side, if all of the source packets are successfully\n   received,\
    \ there is no need for FEC recovery and the repair packets\n   are discarded.\
    \  However, if there are missing source packets, the\n   repair packets can be\
    \ used to recover the missing information.\n   Figures 1 and 2 describe example\
    \ block diagrams for the systematic\n   parity FEC encoder and decoder, respectively.\n\
    \                              +------------+\n   +--+  +--+  +--+  +--+ --> |\
    \ Systematic | --> +--+  +--+  +--+  +--+\n   +--+  +--+  +--+  +--+     | Parity\
    \ FEC |     +--+  +--+  +--+  +--+\n                              |  Encoder \
    \  |\n                              |  (Sender)  | --> +==+  +==+\n          \
    \                    +------------+     +==+  +==+\n   Source Packet: +--+   \
    \ Repair Packet: +==+\n                  +--+                   +==+\n       \
    \  Figure 1: Block Diagram for Systematic Parity FEC Encoder\n               \
    \               +------------+\n   +--+    X    X    +--+ --> | Systematic | -->\
    \ +--+  +--+  +--+  +--+\n   +--+              +--+     | Parity FEC |     +--+\
    \  +--+  +--+  +--+\n                              |  Decoder   |\n          \
    \     +==+  +==+ --> | (Receiver) |\n               +==+  +==+     +------------+\n\
    \   Source Packet: +--+    Repair Packet: +==+    Lost Packet: X\n           \
    \       +--+                   +==+\n         Figure 2: Block Diagram for Systematic\
    \ Parity FEC Decoder\n   In Figure 2, it is clear that the FEC repair packets\
    \ have to be\n   received by the endpoint within a certain amount of time for\
    \ the FEC\n   recovery process to be useful.  The repair window is defined as\
    \ the\n   time that spans a FEC block, which consists of the source packets and\n\
    \   the corresponding repair packets.  At the receiver side, the FEC\n   decoder\
    \ SHOULD buffer source and repair packets at least for the\n   duration of the\
    \ repair window to allow all the repair packets to\n   arrive.  The FEC decoder\
    \ can start decoding the already-received\n   packets sooner; however, it should\
    \ not register a FEC decoding\n   failure until it waits at least for the duration\
    \ of the repair\n   window.\n"
- title: 1.1.1.  One-Dimensional (1-D) Non-interleaved (Row) FEC Protection
  contents:
  - "1.1.1.  One-Dimensional (1-D) Non-interleaved (Row) FEC Protection\n   Consider\
    \ a group of D x L source packets that have Sequence Numbers\n   starting from\
    \ 1 running to D x L (where D and L are as defined in\n   Section 3.2) and a repair\
    \ packet is generated by applying the XOR\n   operation to every L consecutive\
    \ packets as sketched in Figure 3.\n   This process is referred to as \"1-D non-interleaved\
    \ FEC protection\".\n   As a result of this process, D repair packets are generated,\
    \ which\n   are referred to as non-interleaved (or row) FEC repair packets.  In\n\
    \   general, D and L represent values that describe how packets are\n   grouped\
    \ together from a depth and length perspective (respectively)\n   when interleaving\
    \ all D x L source packets.\n   +--------------------------------------------------+\
    \    ---    +===+\n   | S_1          S_2          S3          ...  S_L   | + |XOR|\
    \ = |R_1|\n   +--------------------------------------------------+    ---    +===+\n\
    \   +--------------------------------------------------+    ---    +===+\n   |\
    \ S_L+1        S_L+2        S_L+3       ...  S_2xL | + |XOR| = |R_2|\n   +--------------------------------------------------+\
    \    ---    +===+\n     .            .            .                .         \
    \  .       .\n     .            .            .                .           .  \
    \     .\n     .            .            .                .           .       .\n\
    \   +--------------------------------------------------+    ---    +===+\n   |\
    \ S_(D-1)xL+1  S_(D-1)xL+2  S_(D-1)xL+3 ...  S_DxL | + |XOR| = |R_D|\n   +--------------------------------------------------+\
    \    ---    +===+\n       Figure 3: Generating Non-interleaved (Row) FEC Repair\
    \ Packets\n"
- title: 1.1.2.  1-D Interleaved (Column) FEC Protection
  contents:
  - "1.1.2.  1-D Interleaved (Column) FEC Protection\n   Consider the case where the\
    \ XOR operation is applied to the group of\n   the source packets whose Sequence\
    \ Numbers are L apart from each\n   other, as sketched in Figure 4.  In this case,\
    \ the endpoint generates\n   L repair packets.  This process is referred to as\
    \ \"1-D interleaved\n   FEC protection\", and the resulting L repair packets are\
    \ referred to\n   as \"interleaved (or column) FEC repair packets\".\n       +-------------+\
    \ +-------------+ +-------------+     +-------+\n       | S_1         | | S_2\
    \         | | S3          | ... | S_L   |\n       | S_L+1       | | S_L+2    \
    \   | | S_L+3       | ... | S_2xL |\n       | .           | | .           | |\
    \             |     |       |\n       | .           | | .           | |      \
    \       |     |       |\n       | .           | | .           | |            \
    \ |     |       |\n       | S_(D-1)xL+1 | | S_(D-1)xL+2 | | S_(D-1)xL+3 | ...\
    \ | S_DxL |\n       +-------------+ +-------------+ +-------------+     +-------+\n\
    \              +               +               +                +\n        -------------\
    \   -------------   -------------       -------\n       |     XOR     | |    \
    \ XOR     | |     XOR     | ... |  XOR  |\n        -------------   -------------\
    \   -------------       -------\n              =               =             \
    \  =                =\n            +===+           +===+           +===+     \
    \       +===+\n            |C_1|           |C_2|           |C_3|      ...   |C_L|\n\
    \            +===+           +===+           +===+            +===+\n       Figure\
    \ 4: Generating Interleaved (Column) FEC Repair Packets\n"
- title: 1.1.3.  Use Cases for 1-D FEC Protection
  contents:
  - "1.1.3.  Use Cases for 1-D FEC Protection\n   A sender may generate one non-interleaved\
    \ repair packet out of L\n   consecutive source packets or one interleaved repair\
    \ packet out of D\n   nonconsecutive source packets.  Regardless of whether the\
    \ repair\n   packet is a non-interleaved or an interleaved one, it can provide\
    \ a\n   full recovery of the missing information if there is only one packet\n\
    \   missing among the corresponding source packets.  This implies that\n   1-D\
    \ non-interleaved FEC protection performs better when the source\n   packets are\
    \ randomly lost.  However, if the packet losses occur in\n   bursts, 1-D interleaved\
    \ FEC protection performs better provided that\n   L is chosen to be large enough,\
    \ i.e., L-packet duration is not\n   shorter than the observed burst duration.\
    \  If the sender generates\n   non-interleaved FEC repair packets and a burst\
    \ loss hits the source\n   packets, the repair operation fails.  This is illustrated\
    \ in\n   Figure 5.\n                     +---+                +---+  +===+\n \
    \                    | 1 |    X      X    | 4 |  |R_1|\n                     +---+\
    \                +---+  +===+\n                     +---+  +---+  +---+  +---+\
    \  +===+\n                     | 5 |  | 6 |  | 7 |  | 8 |  |R_2|\n           \
    \          +---+  +---+  +---+  +---+  +===+\n                     +---+  +---+\
    \  +---+  +---+  +===+\n                     | 9 |  | 10|  | 11|  | 12|  |R_3|\n\
    \                     +---+  +---+  +---+  +---+  +===+\n                    \
    \    Figure 5: Example Scenario:\n   1-D Non-interleaved FEC Protection Fails\
    \ Error Recovery (Burst Loss)\n   The sender may generate interleaved FEC repair\
    \ packets to combat the\n   bursty packet losses.  However, two or more random\
    \ packet losses may\n   hit the source and repair packets in the same column.\
    \  In that case,\n   the repair operation fails as well.  This is illustrated\
    \ in Figure 6.\n   Note that it is possible that two burst losses occur back-to-back,\
    \ in\n   which case, interleaved FEC repair packets may still fail to recover\n\
    \   the lost data.\n                        +---+         +---+  +---+\n     \
    \                   | 1 |    X    | 3 |  | 4 |\n                        +---+\
    \         +---+  +---+\n                        +---+         +---+  +---+\n \
    \                       | 5 |    X    | 7 |  | 8 |\n                        +---+\
    \         +---+  +---+\n                        +---+  +---+  +---+  +---+\n \
    \                       | 9 |  | 10|  | 11|  | 12|\n                        +---+\
    \  +---+  +---+  +---+\n                        +===+  +===+  +===+  +===+\n \
    \                       |C_1|  |C_2|  |C_3|  |C_4|\n                        +===+\
    \  +===+  +===+  +===+\n                        Figure 6: Example Scenario:\n\
    \    1-D Interleaved FEC Protection Fails Error Recovery (Periodic Loss)\n"
- title: 1.1.4.  Two-Dimensional (2-D) (Row and Column) FEC Protection
  contents:
  - "1.1.4.  Two-Dimensional (2-D) (Row and Column) FEC Protection\n   In networks\
    \ where the source packets are lost both randomly and in\n   bursts, the sender\
    \ ought to generate both non-interleaved and\n   interleaved FEC repair packets.\
    \  This type of FEC protection is known\n   as \"2-D parity FEC protection\".\
    \  At the expense of generating more\n   FEC repair packets, thus increasing the\
    \ FEC overhead, 2-D FEC\n   provides superior protection against mixed loss patterns.\
    \  However,\n   it is still possible for 2-D parity FEC protection to fail to\
    \ recover\n   all of the lost source packets if a particular loss pattern occurs.\n\
    \   An example scenario is illustrated in Figure 7.\n                     +---+\
    \                +---+  +===+\n                     | 1 |    X      X    | 4 |\
    \  |R_1|\n                     +---+                +---+  +===+\n           \
    \          +---+  +---+  +---+  +---+  +===+\n                     | 5 |  | 6\
    \ |  | 7 |  | 8 |  |R_2|\n                     +---+  +---+  +---+  +---+  +===+\n\
    \                     +---+                +---+  +===+\n                    \
    \ | 9 |    X      X    | 12|  |R_3|\n                     +---+              \
    \  +---+  +===+\n                     +===+  +===+  +===+  +===+\n           \
    \          |C_1|  |C_2|  |C_3|  |C_4|\n                     +===+  +===+  +===+\
    \  +===+\n                      Figure 7: Example Scenario #1:\n             \
    \ 2-D Parity FEC Protection Fails Error Recovery\n   2-D parity FEC protection\
    \ also fails when at least two rows are\n   missing a source and the FEC packet\
    \ and the missing source packets\n   (in at least two rows) are aligned in the\
    \ same column.  An example\n   loss pattern is sketched in Figure 8.  Similarly,\
    \ 2-D parity FEC\n   protection cannot repair all missing source packets when\
    \ at least two\n   columns are missing a source and the FEC packet and the missing\n\
    \   source packets (in at least two columns) are aligned in the same row.\n  \
    \                   +---+  +---+         +---+\n                     | 1 |  |\
    \ 2 |    X    | 4 |    X\n                     +---+  +---+         +---+\n  \
    \                   +---+  +---+  +---+  +---+  +===+\n                     |\
    \ 5 |  | 6 |  | 7 |  | 8 |  |R_2|\n                     +---+  +---+  +---+  +---+\
    \  +===+\n                     +---+  +---+         +---+\n                  \
    \   | 9 |  | 10|    X    | 12|    X\n                     +---+  +---+       \
    \  +---+\n                     +===+  +===+  +===+  +===+\n                  \
    \   |C_1|  |C_2|  |C_3|  |C_4|\n                     +===+  +===+  +===+  +===+\n\
    \                      Figure 8: Example Scenario #2:\n              2-D Parity\
    \ FEC Protection Fails Error Recovery\n"
- title: 1.1.5.  FEC Protection with Flexible Mask
  contents:
  - "1.1.5.  FEC Protection with Flexible Mask\n   It is possible to define FEC protection\
    \ for selected packets in the\n   source stream.  This would enable differential\
    \ protection, i.e.,\n   application of FEC selectively to packets that require\
    \ a higher level\n   of reliability than the other packets in the source stream.\
    \  The\n   sender will be required to send a bitmap indicating the packets to\
    \ be\n   protected, i.e., a \"mask\", to the receiver.  Since the mask can be\n\
    \   modified during an RTP session (\"flexible mask\"), this kind of FEC\n   protection\
    \ can also be used to implement FEC dynamically (e.g., for\n   adaptation to different\
    \ types of traffic during the RTP session).\n"
- title: 1.1.6.  FEC Overhead Considerations
  contents:
  - "1.1.6.  FEC Overhead Considerations\n   The overhead is defined as the ratio\
    \ of the number of bytes belonging\n   to the repair packets to the number of\
    \ bytes belonging to the\n   protected source packets.\n   Generally, repair packets\
    \ are larger in size than the source packets.\n   Also, not all the source packets\
    \ are necessarily equal in size.\n   However, assuming that each repair packet\
    \ carries an equal number of\n   bytes as carried by a source packet, the overhead\
    \ for different FEC\n   protection methods can be computed as follows:\n     \
    \ 1-D Non-interleaved FEC Protection: Overhead = 1/L\n      1-D Interleaved FEC\
    \ Protection: Overhead = 1/D\n      2-D Parity FEC Protection: Overhead = 1/L\
    \ + 1/D\n   where L and D are the number of columns and rows in the source block,\n\
    \   respectively.\n"
- title: 1.1.7.  FEC Protection with Retransmission
  contents:
  - "1.1.7.  FEC Protection with Retransmission\n   This specification supports both\
    \ forward error correction, i.e.,\n   before any loss is reported, as well as\
    \ retransmission of source\n   packets after the loss is reported.  The retransmission\
    \ includes the\n   RTP header of the source packet in addition to the payload.\
    \  If a\n   peer supporting both FLEX FEC and other RTP retransmission methods\n\
    \   (see [RFC4588]) receives an Offer including both FLEX FEC and another\n  \
    \ RTP retransmission method, it MUST respond with an Answer containing\n   only\
    \ FLEX FEC.\n"
- title: 1.1.8.  Repair Window Considerations
  contents:
  - "1.1.8.  Repair Window Considerations\n   The value for the repair window duration\
    \ is related to the maximum L\n   and D values that are expected during a FLEX\
    \ FEC session; therefore,\n   it cannot be chosen arbitrarily.  Repair packets\
    \ that include L and D\n   values larger than the repair window MUST NOT be sent.\
    \  The rate of\n   the source streams should also be considered, as the repair\
    \ window\n   duration should ideally span several packetization intervals in order\n\
    \   to leverage the error correction capabilities of the parity code.\n   Because\
    \ the FEC configuration can change with each repair packet (see\n   Section 4.2.2),\
    \ for any given repair packet, the FLEX FEC receiver\n   MUST support all possible\
    \ L and D combinations (both 1-D and 2-D\n   interleaved over all source flows)\
    \ and all flexible mask\n   configurations (over all source flows) within the\
    \ repair window to\n   which it has agreed (e.g., through SDP or out-of-band signaling)\
    \ for\n   a FLEX FEC RTP session.  In addition, the FLEX FEC receiver MUST\n \
    \  support receipt of a retransmission of any source flow packet within\n   the\
    \ repair window to which it has agreed.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 3.  Definitions and Notations
  contents:
  - '3.  Definitions and Notations

    '
- title: 3.1.  Definitions
  contents:
  - "3.1.  Definitions\n   This document uses a number of definitions from [RFC6363].\n\
    \   Additionally, it defines the following and/or updates their\n   definitions\
    \ from [RFC6363].\n   1-D Non-interleaved Row FEC:  A protection scheme that operates\
    \ on\n      consecutive source packets in the source block, able to recover a\n\
    \      single lost source packet per row of the source block.\n   1-D Interleaved\
    \ Column FEC:  A protection scheme that operates on\n      interleaved source\
    \ packets in the source block, able to recover a\n      single lost source packet\
    \ per column of the source block.\n   2-D FEC:  A protection scheme that combines\
    \ row and column FEC.\n   Source Block:  A set of source packets that are protected\
    \ by a set of\n      1-D or 2-D FEC repair packets.\n   FEC Block:  A source block\
    \ and its corresponding FEC repair packets.\n   Repair Window:  The time that\
    \ spans a FEC block, which consists of\n      the source packets and the corresponding\
    \ FEC repair packets.\n   XOR Parity Codes:  A FEC code that uses the eXclusive\
    \ OR (XOR) parity\n      operation to encode a set of source packets to form a\
    \ FEC repair\n      packet.\n"
- title: 3.2.  Notations
  contents:
  - "3.2.  Notations\n   L: Number of columns of the source block (length of each\
    \ row).\n   D: Number of rows of the source block (depth of each column).\n  \
    \ bitmask:  A 15-bit, 46-bit, or 110-bit mask indicating which source\n      packets\
    \ are protected by a FEC repair packet.  If the bit i in the\n      mask is set\
    \ to 1, the source packet number N + i is protected by\n      this FEC repair\
    \ packet, where N is the Sequence Number base\n      indicated in the FEC repair\
    \ packet.  The most significant bit of\n      the mask corresponds to i=0.  The\
    \ least significant bit of the\n      mask corresponds to i=14 in the 15-bit mask,\
    \ i=45 in the 46-bit\n      mask, or i=109 in the 110-bit mask.\n"
- title: 4.  Packet Formats
  contents:
  - "4.  Packet Formats\n   This section describes the formats of the source packets\
    \ and defines\n   the formats of the FEC repair packets.\n"
- title: 4.1.  Source Packets
  contents:
  - "4.1.  Source Packets\n   The source packets contain the information that identifies\
    \ the source\n   block and the position within the source block occupied by the\n\
    \   packet.  Since the source packets that are carried within an RTP\n   stream\
    \ already contain unique Sequence Numbers in their RTP headers\n   [RFC3550],\
    \ the source packets can be identified in a straightforward\n   manner and there\
    \ is no need to append any additional fields.  The\n   primary advantage of not\
    \ modifying the source packets in any way is\n   that it provides backward compatibility\
    \ for the receivers that do not\n   support FEC at all.  In multicast scenarios,\
    \ this backward\n   compatibility becomes quite useful as it allows the non-FEC-capable\n\
    \   and FEC-capable receivers to receive and interpret the same source\n   packets\
    \ sent in the same multicast session.\n   The source packets are transmitted as\
    \ usual without altering them.\n   They are used along with the FEC repair packets\
    \ to recover any\n   missing source packets, making this scheme a systematic code.\n\
    \   The source packets are full RTP packets with optional contributing\n   source\
    \ (CSRC) list, RTP header extension, and padding.  If any of\n   these optional\
    \ elements are present in the source RTP packet, and\n   that source packet is\
    \ lost, they are recovered by the FEC repair\n   operation, which recovers the\
    \ full source RTP packet including these\n   optional elements.\n"
- title: 4.2.  FEC Repair Packets
  contents:
  - "4.2.  FEC Repair Packets\n   The FEC repair packets will contain information\
    \ that identifies the\n   source block they pertain to and the relationship between\
    \ the\n   contained repair packets and the original source block.  For this\n\
    \   purpose, the RTP header of the repair packets is used, as well as\n   another\
    \ header within the RTP payload, called the \"FEC header\", as\n   shown in Figure\
    \ 9.\n   Note that all the source stream packets that are protected by a\n   particular\
    \ FEC packet need to be in the same RTP session.\n             +------------------------------+\n\
    \             |          IP Header           |\n             +------------------------------+\n\
    \             |       Transport Header       |\n             +------------------------------+\n\
    \             |          RTP Header          |\n             +------------------------------+\
    \ ---+\n             |          FEC Header          |    |\n             +------------------------------+\
    \    | RTP Payload\n             |         Repair Payload       |    |\n     \
    \        +------------------------------+ ---+\n                  Figure 9: Format\
    \ of FEC Repair Packets\n   The Repair Payload, which follows the FEC header,\
    \ includes repair of\n   everything following the fixed 12-byte RTP header of\
    \ each source\n   packet, including any CSRC identifier list and header extensions\
    \ if\n   present.\n"
- title: 4.2.1.  RTP Header of FEC Repair Packets
  contents:
  - "4.2.1.  RTP Header of FEC Repair Packets\n   The RTP header is formatted according\
    \ to [RFC3550] with some further\n   clarifications listed below:\n   Version\
    \ (V) 2 bits:  This MUST be set to 2 (binary 10), as this\n      specification\
    \ requires all source RTP packets and all FEC repair\n      packets to use RTP\
    \ version 2.\n   Padding (P) bit:  Source packets can have optional RTP padding,\
    \ which\n      can be recovered.  FEC repair packets can have optional RTP\n \
    \     padding, which is independent of the RTP padding of the source\n      packets.\n\
    \   Extension (X) bit:  Source packets can have optional RTP header\n      extensions,\
    \ which can be recovered.  FEC repair packets can have\n      optional RTP header\
    \ extensions, which are independent of the RTP\n      header extensions of the\
    \ source packets.\n   CSRC Count (CC) 4 bits, and CSRC List (CSRC_i) 32 bits each:\
    \  Source\n      packets can have an optional CSRC list and count, which can be\n\
    \      recovered.  FEC repair packets MUST use the CSRC list and count to\n  \
    \    specify the synchronization sources (SSRCs) of the source RTP\n      stream(s)\
    \ protected by this FEC repair packet.\n   Marker (M) bit:  This bit is not used\
    \ for this payload type, SHALL be\n      set to 0 by senders, and SHALL be ignored\
    \ by receivers.\n   Payload Type:  The (dynamic) payload type for the FEC repair\
    \ packets\n      is determined through out-of-band means (e.g., SDP).  Note that\n\
    \      this document registers new payload formats for the repair packets\n  \
    \    (refer to Section 5 for details).  According to [RFC3550], an RTP\n     \
    \ receiver that cannot recognize a payload type must discard it.\n      This provides\
    \ backward compatibility.  If a non-FEC-capable\n      receiver receives a repair\
    \ packet, it will not recognize the\n      payload type; hence, it will discard\
    \ the repair packet.\n   Sequence Number (SN):  The Sequence Number follows the\
    \ standard\n      definition provided in [RFC3550].  Therefore, it must be one\n\
    \      higher than the Sequence Number in the previously transmitted\n      repair\
    \ packet, and the initial value of the Sequence Number should\n      be random\
    \ (i.e., unpredictable).\n   Timestamp (TS):  The timestamp SHALL be set to a\
    \ time corresponding\n      to the repair packet's transmission time.  Note that\
    \ the timestamp\n      value has no use in the actual FEC protection process and\
    \ is\n      usually useful for jitter calculations.\n   Synchronization Source\
    \ (SSRC):  The SSRC value for each repair stream\n      SHALL be randomly assigned\
    \ as per the guidelines provided in\n      Section 8 of [RFC3550].  This allows\
    \ the sender to multiplex the\n      source and repair RTP streams in the same\
    \ RTP session, or\n      multiplex multiple repair streams in an RTP session.\
    \  The repair\n      stream's SSRC's CNAME SHOULD be identical to the CNAME of\
    \ the\n      source RTP stream(s) that this repair stream protects.  A FEC\n \
    \     stream that protects multiple source RTP streams with different\n      CNAME's\
    \ uses the CNAME associated with the entity generating the\n      FEC stream or\
    \ the CNAME of the entity on whose behalf it performs\n      the protection operation.\
    \  In cases when the repair stream covers\n      packets from multiple source\
    \ RTP streams with different CNAME\n      values and none of these CNAME values\
    \ can be associated with the\n      entity generating the FEC stream, any of these\
    \ CNAME values MAY be\n      used.\n      In some networks, the RTP Source, which\
    \ produces the source\n      packets, and the FEC Source, which generates the\
    \ repair packets\n      from the source packets, may not be the same host.  In\
    \ such\n      scenarios, using the same CNAME for the source and repair RTP\n\
    \      streams means that the RTP Source and the FEC Source will share\n     \
    \ the same CNAME (for this specific source-repair stream\n      association).\
    \  A common CNAME may be produced based on an\n      algorithm that is known both\
    \ to the RTP and FEC Source [RFC7022].\n      This usage is compliant with [RFC3550].\n\
    \      Note that due to the randomness of the SSRC assignments, there is\n   \
    \   a possibility of SSRC collision.  In such cases, the collisions\n      must\
    \ be resolved as described in [RFC3550].\n"
- title: 4.2.2.  FEC Header of FEC Repair Packets
  contents:
  - "4.2.2.  FEC Header of FEC Repair Packets\n   The format of the FEC header has\
    \ three variants, depending on the\n   values in the first two bits (R and F bits)\
    \ as shown in Figure 10.\n   Note that R and F stand for \"retransmit\" and \"\
    fixed block\",\n   respectively.  Two of these variants are meant to describe\
    \ different\n   methods for deriving the source data from a source packet for\
    \ a\n   repair packet.  This allows for customizing the FEC method to allow\n\
    \   for robustness against different levels of burst errors and random\n   packet\
    \ losses.  The third variant is for a straight retransmission of\n   the source\
    \ packet.\n      0                   1                   2                   3\n\
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |R|F|P|X|  CC   |M| PT recovery | ...varies depending on R/F... |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                                                             |\n     |      \
    \           ...varies depending on R/F...                 |\n     |          \
    \                                                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     :                Repair Payload follows FEC header              :\n    \
    \ :                                                               :\n        \
    \                   Figure 10: FEC header\n   The Repair Payload, which follows\
    \ the FEC header, includes repair of\n   everything following the fixed 12-byte\
    \ RTP header of each source\n   packet, including any CSRC identifier list and\
    \ header extensions if\n   present.  An overview on how the Repair Payload can\
    \ be used to\n   recover source packets is provided in Section 6.\n      +---+---+-----------------------------------------------------+\n\
    \      | R | F | FEC header variant                                  |\n     \
    \ +---+---+-----------------------------------------------------+\n      | 0 |\
    \ 0 | Flexible FEC Mask fields indicate source packets    |\n      | 0 | 1 | Fixed\
    \ FEC L/D (cols/rows) indicate source packets   |\n      | 1 | 0 | Retransmission\
    \ of a single source packet            |\n      | 1 | 1 | Reserved for future\
    \ use, MUST NOT send, MUST ignore |\n      +---+---+-----------------------------------------------------+\n\
    \           Figure 11: R and F Bit Values for FEC Header Variants\n   The first\
    \ variant, when R=0 and F=0, has a mask to signal protected\n   source packets,\
    \ as shown in Figure 12.\n   The second variant, when R=0 and F=1, has a number\
    \ of columns (L) and\n   rows (D) to signal protected source packets, as shown\
    \ in Figure 13.\n   The final variant, when R=1 and F=0, is a retransmission format\
    \ as\n   shown in Figure 15.\n   No variant presently uses R=1 and F=1, which\
    \ is reserved for future\n   use.  Current FLEX FEC implementations MUST NOT send\
    \ packets with\n   this variant, and receivers MUST ignore these packets.  Future\
    \ FLEX\n   FEC implementations may use this by updating the media type\n   registration.\n\
    \   The FEC header for all variants consists of the following common\n   fields:\n\
    \   o  The R bit MUST be set to 1 to indicate a retransmission packet,\n     \
    \ and MUST be set to 0 for FEC repair packets.\n   o  The F bit indicates the\
    \ type of FEC repair packets, as shown in\n      Figure 11, when the R bit is\
    \ 0.  The F bit MUST be set to 0 when\n      the R bit is 1 for retransmission\
    \ packets.\n   o  The P, X, CC, M, and PT recovery fields are used to determine\
    \ the\n      corresponding fields of the recovered packets (see also\n      Section\
    \ 6.3.2).\n"
- title: 4.2.2.1.  FEC Header with Flexible Mask
  contents:
  - "4.2.2.1.  FEC Header with Flexible Mask\n   When R=0 and F=0, the FEC header\
    \ includes flexible Mask fields.\n      0                   1                \
    \   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0|0|P|X|  CC   |M| PT recovery |        length recovery        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                        TS recovery                          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |           SN base_i           |k|          Mask [0-14]        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |k|\
    \                   Mask [15-45] (optional)                   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                     Mask [46-109] (optional)                  |\n    \
    \ |                                                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   ... next SN base and Mask for CSRC_i in CSRC list ...       |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     :  \
    \              Repair Payload follows FEC header              :\n     :      \
    \                                                         :\n                \
    \       Figure 12: FEC Header for F=0\n   o  The Length recovery (16 bits) field\
    \ is used to determine the\n      length of the recovered packets.  This length\
    \ includes all octets\n      following the fixed 12-byte RTP header of source\
    \ packets,\n      including CSRC list and optional header extension(s) if present.\n\
    \      It excludes the fixed 12-byte RTP header of source packets.\n   o  The\
    \ TS recovery (32 bits) field is used to determine the timestamp\n      of the\
    \ recovered packets.\n   o  The CSRC_i (32 bits) field in the RTP header (not\
    \ FEC header)\n      describes the SSRC of the source packets protected by this\n\
    \      particular FEC packet.  If a FEC packet protects multiple SSRCs\n     \
    \ (indicated by the CSRC Count > 1 in the RTP header), there will be\n      multiple\
    \ blocks of data containing the SN base and Mask fields.\n   o  The SN base_i\
    \ (16 bits) field indicates the lowest sequence\n      number, taking wrap around\
    \ into account, of the source packets for\n      a particular SSRC (indicated\
    \ in CSRC_i) protected by this repair\n      packet.\n   o  The Mask fields indicate\
    \ a bitmask of which source packets are\n      protected by this FEC repair packet,\
    \ where bit j of the mask set\n      to 1 indicates that the source packet with\
    \ Sequence Number (SN\n      base_i + j) is protected by this FEC repair packet,\
    \ where j=0 is\n      the most significant bit in the mask.\n   o  The k-bit in\
    \ the bitmasks indicates if the mask is 15, 46, or 110\n      bits.  k=1 denotes\
    \ that another mask follows, and k=0 denotes that\n      it is the last block\
    \ of mask.\n   o  The Repair Payload, which follows the FEC header, includes repair\n\
    \      of everything following the fixed 12-byte RTP header of each\n      source\
    \ packet, including any CSRC identifier list and header\n      extensions if present.\n"
- title: 4.2.2.2.  FEC Header with Fixed L Columns and D Rows
  contents:
  - "4.2.2.2.  FEC Header with Fixed L Columns and D Rows\n   When R=0 and F=1, the\
    \ FEC header includes L and D fields for fixed\n   columns and rows.  The other\
    \ fields are the same as the prior\n   section.  As in the previous section, the\
    \ CSRC_i (32 bits) field in\n   the RTP header (not FEC Header) describes the\
    \ SSRC of the source\n   packets protected by this particular FEC packet.  If\
    \ there are\n   multiple SSRC's protected by the FEC packet, then there will be\n\
    \   multiple blocks of data containing an SN base along with L and D\n   fields.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0|1|P|X|  CC   |M| PT recovery |         length recovery       |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                        TS recovery                          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |           SN base_i           |  L (columns)  |    D (rows)   |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \  ... next SN base and L/D for CSRC_i in CSRC list ...       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     :                Repair Payload follows FEC header              :\n    \
    \ :                                                               :\n        \
    \               Figure 13: FEC Header for F=1\n   Consequently, the following\
    \ conditions occur for L and D values:\n   If L=0, D=0, reserved for future use,\n\
    \                MUST NOT send, MUST ignore if received.\n   If L>0, D=0, indicates\
    \ row FEC, and no column FEC will follow (1D).\n                Source packets\
    \ for each row: SN, SN+1, ..., SN+(L-1)\n   If L>0, D=1, indicates row FEC, and\
    \ column FEC will follow (2D).\n                Source packets for each row: SN,\
    \ SN+1, ..., SN+(L-1)\n                Source packets for each col: SN, SN+L,\
    \ ..., SN+(D-1)*L\n                After all row FEC packets have been sent,\n\
    \                the column FEC packets will be sent.\n   If L>0, D>1, indicates\
    \ column FEC of every L packet, D times.\n                Source packets for each\
    \ col: SN, SN+L, ..., SN+(D-1)*L\n             Figure 14: Interpreting the L and\
    \ D Field Values\n   Given the 8-bit limit on L and D (as depicted in Figure 13),\
    \ the\n   maximum value of either parameter is 255.  If L=0 and D=0 are in a\n\
    \   packet, then the repair packet MUST be ignored by the receiver.  In\n   addition,\
    \ when L=1 and D=0, the repair packet becomes a\n   retransmission of a corresponding\
    \ source packet.\n   The values of L and D for a given block of recovery data\
    \ will\n   correspond to the type of recovery in use for that block of data. \
    \ In\n   particular, for 2-D repair, the (L,D) values may not be constant\n  \
    \ across all packets for a given SSRC being repaired.  Similarly, the L\n   and\
    \ D values can differ across different blocks of repair data\n   (repairing different\
    \ SSRCs) in a single packet.  If the values of L\n   and D result in a repair\
    \ packet that exceed the repair window of the\n   FLEX FEC session, then the repair\
    \ packet MUST be ignored.\n   It should be noted that the flexible mask-based\
    \ approach may be\n   inefficient for protecting a large number of source packets,\
    \ or\n   impossible to signal if larger than the largest mask size.  In such\n\
    \   cases, the fixed columns and rows variant may be more useful.\n"
- title: 4.2.2.3.  FEC Header for Retransmissions
  contents:
  - "4.2.2.3.  FEC Header for Retransmissions\n   When R=1 and F=0, the FEC packet\
    \ is a retransmission of a single\n   source packet.  Note that the layout of\
    \ this retransmission packet is\n   different from other FEC repair packets. \
    \ The Sequence Number (SN\n   base_i) replaces the length recovery in the FEC\
    \ header, since the\n   length is already known for a single packet.  There are\
    \ no L, D, or\n   Mask fields, since only a single packet is retransmitted, identified\n\
    \   by the Sequence Number in the FEC header.  The source packet SSRC is\n   included\
    \ in the FEC header for retransmissions, not in the RTP header\n   CSRC list as\
    \ in the FEC header variants with R=0.  When performing\n   retransmissions, a\
    \ single repair packet stream (SSRC) MAY be used for\n   retransmitting packets\
    \ from multiple source packet streams (SSRCs),\n   as well as transmitting FEC\
    \ repair packets that protect multiple\n   source packet streams (SSRCs).\n  \
    \ This FEC header layout is identical to the source RTP (version 2)\n   packet,\
    \ starting with its RTP header, where the retransmission\n   \"payload\" is everything\
    \ following the fixed 12-byte RTP header of the\n   source packet, including the\
    \ CSRC list and extensions if present.\n   Therefore, the only operation needed\
    \ for sending retransmissions is\n   to prepend a new RTP header to the source\
    \ packet.\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1|0|P|X|  CC   |M| Payload Type|        Sequence Number        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Timestamp                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              SSRC                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :           Retransmission Payload follows FEC header           :\n   :  \
    \                                                             :\n            \
    \     Figure 15: FEC Header for Retransmission\n"
- title: 5.  Payload Format Parameters
  contents:
  - "5.  Payload Format Parameters\n   This section provides the media subtype registration\
    \ for the non-\n   interleaved and interleaved parity FEC.  The parameters that\
    \ are\n   required to configure the FEC encoding and decoding operations are\n\
    \   also defined in this section.  If no specific FEC code is specified\n   in\
    \ the subtype, then the FEC code defaults to the parity code defined\n   in this\
    \ specification.\n"
- title: 5.1.  Media Type Registration -- Parity Codes
  contents:
  - "5.1.  Media Type Registration -- Parity Codes\n   This registration is done using\
    \ the template defined in [RFC6838] and\n   following the guidance provided in\
    \ [RFC4855] along with [RFC4856].\n"
- title: 5.1.1.  Registration of audio/flexfec
  contents:
  - "5.1.1.  Registration of audio/flexfec\n   Type name: audio\n   Subtype name:\
    \ flexfec\n   Required parameters:\n   o  rate: The RTP timestamp (clock) rate.\
    \  The rate SHALL be larger\n      than 1000 Hz to provide sufficient resolution\
    \ to RTCP operations.\n      However, it is RECOMMENDED to select the rate that\
    \ matches the\n      rate of the protected source RTP stream.\n   o  repair-window:\
    \ The time that spans the source packets and the\n      corresponding repair packets.\
    \  The size of the repair window is\n      specified in microseconds.\n   Encoding\
    \ considerations: This media type is framed (see Section 4.8\n   in the template\
    \ document [RFC6838]) and contains binary data.\n   Security considerations: See\
    \ Section 9 of [RFC8627].\n   Interoperability considerations: None.\n   Published\
    \ specification: [RFC8627].\n   Applications that use this media type: Multimedia\
    \ applications that\n   want to improve resiliency against packet loss by sending\
    \ redundant\n   data in addition to the source media.\n   Fragment identifier\
    \ considerations: None.\n   Additional information: None.\n   Person & email address\
    \ to contact for further information:\n   IESG <iesg@ietf.org> and IETF Audio/Video\
    \ Transport Payloads Working\n   Group (or its successor as delegated by the IESG).\n\
    \   Intended usage: COMMON.\n   Restrictions on usage: This media type depends\
    \ on RTP framing; hence,\n   it is only defined for transport via RTP [RFC3550].\n\
    \   Author: Varun Singh <varun@callstats.io>.\n   Change controller: IETF Audio/Video\
    \ Transport Payloads Working Group\n   delegated from the IESG (or its successor\
    \ as delegated by the IESG).\n"
- title: 5.1.2.  Registration of video/flexfec
  contents:
  - "5.1.2.  Registration of video/flexfec\n   Type name: video\n   Subtype name:\
    \ flexfec\n   Required parameters:\n   o  rate: The RTP timestamp (clock) rate.\
    \  The rate SHALL be larger\n      than 1000 Hz to provide sufficient resolution\
    \ to RTCP operations.\n      However, it is RECOMMENDED to select the rate that\
    \ matches the\n      rate of the protected source RTP stream.\n   o  repair-window:\
    \ The time that spans the source packets and the\n      corresponding repair packets.\
    \  The size of the repair window is\n      specified in microseconds.\n   Encoding\
    \ considerations: This media type is framed (see Section 4.8\n   in the template\
    \ document [RFC6838]) and contains binary data.\n   Security considerations: See\
    \ Section 9 of [RFC8627].\n   Interoperability considerations: None.\n   Published\
    \ specification: [RFC8627].\n   Applications that use this media type: Multimedia\
    \ applications that\n   want to improve resiliency against packet loss by sending\
    \ redundant\n   data in addition to the source media.\n   Fragment identifier\
    \ considerations: None.\n   Additional information: None.\n   Person & email address\
    \ to contact for further information:\n   IESG <iesg@ietf.org> and IETF Audio/Video\
    \ Transport Payloads Working\n   Group (or its successor as delegated by the IESG).\n\
    \   Intended usage: COMMON.\n   Restrictions on usage: This media type depends\
    \ on RTP framing; hence,\n   it is only defined for transport via RTP [RFC3550].\n\
    \   Author: Varun Singh <varun@callstats.io>.\n   Change controller: IETF Audio/Video\
    \ Transport Payloads Working Group\n   delegated from the IESG (or its successor\
    \ as delegated by the IESG).\n"
- title: 5.1.3.  Registration of text/flexfec
  contents:
  - "5.1.3.  Registration of text/flexfec\n   Type name: text\n   Subtype name: flexfec\n\
    \   Required parameters:\n   o  rate: The RTP timestamp (clock) rate.  The rate\
    \ SHALL be larger\n      than 1000 Hz to provide sufficient resolution to RTCP\
    \ operations.\n      However, it is RECOMMENDED to select the rate that matches\
    \ the\n      rate of the protected source RTP stream.\n   o  repair-window: The\
    \ time that spans the source packets and the\n      corresponding repair packets.\
    \  The size of the repair window is\n      specified in microseconds.\n   Encoding\
    \ considerations: This media type is framed (see Section 4.8\n   in the template\
    \ document [RFC6838]) and contains binary data.\n   Security considerations: See\
    \ Section 9 of [RFC8627].\n   Interoperability considerations: None.\n   Published\
    \ specification: [RFC8627].\n   Applications that use this media type: Multimedia\
    \ applications that\n   want to improve resiliency against packet loss by sending\
    \ redundant\n   data in addition to the source media.\n   Fragment identifier\
    \ considerations: None.\n   Additional information: None.\n   Person & email address\
    \ to contact for further information:\n   IESG <iesg@ietf.org> and IETF Audio/Video\
    \ Transport Payloads Working\n   Group (or its successor as delegated by the IESG).\n\
    \   Intended usage: COMMON.\n   Restrictions on usage: This media type depends\
    \ on RTP framing; hence,\n   it is only defined for transport via RTP [RFC3550].\n\
    \   Author: Varun Singh <varun@callstats.io>.\n   Change controller: IETF Audio/Video\
    \ Transport Payloads Working Group\n   delegated from the IESG (or its successor\
    \ as delegated by the IESG).\n"
- title: 5.1.4.  Registration of application/flexfec
  contents:
  - "5.1.4.  Registration of application/flexfec\n   Type name: application\n   Subtype\
    \ name: flexfec\n   Required parameters:\n   o  rate: The RTP timestamp (clock)\
    \ rate.  The rate SHALL be larger\n      than 1000 Hz to provide sufficient resolution\
    \ to RTCP operations.\n      However, it is RECOMMENDED to select the rate that\
    \ matches the\n      rate of the protected source RTP stream.\n   o  repair-window:\
    \ The time that spans the source packets and the\n      corresponding repair packets.\
    \  The size of the repair window is\n      specified in microseconds.\n   Encoding\
    \ considerations: This media type is framed (see Section 4.8\n   in the template\
    \ document [RFC6838]) and contains binary data.\n   Security considerations: See\
    \ Section 9 of [RFC8627].\n   Interoperability considerations: None.\n   Published\
    \ specification: [RFC8627].\n   Applications that use this media type: Multimedia\
    \ applications that\n   want to improve resiliency against packet loss by sending\
    \ redundant\n   data in addition to the source media.\n   Fragment identifier\
    \ considerations: None.\n   Additional information: None.\n   Person & email address\
    \ to contact for further information:\n   IESG <iesg@ietf.org> and IETF Audio/Video\
    \ Transport Payloads Working\n   Group (or its successor as delegated by the IESG).\n\
    \   Intended usage: COMMON.\n   Restrictions on usage: This media type depends\
    \ on RTP framing; hence,\n   it is only defined for transport via RTP [RFC3550].\n\
    \   Author: Varun Singh <varun@callstats.io>.\n   Change controller: IETF Audio/Video\
    \ Transport Payloads Working Group\n   delegated from the IESG (or its successor\
    \ as delegated by the IESG).\n"
- title: 5.2.  Mapping to SDP Parameters
  contents:
  - "5.2.  Mapping to SDP Parameters\n   Applications that use the RTP transport commonly\
    \ use the Session\n   Description Protocol (SDP) [RFC4566] to describe their RTP\
    \ sessions.\n   The information that is used to specify the media types in an\
    \ RTP\n   session has specific mappings to the fields in an SDP description.\n\
    \   This section provides these mappings for the media subtypes\n   registered\
    \ by this document.  Note that if an application does not\n   use SDP to describe\
    \ the RTP sessions, an appropriate mapping must be\n   defined and used to specify\
    \ the media types and their parameters for\n   the control/description protocol\
    \ employed by the application.\n   The mapping of the media type specification\
    \ for \"flexfec\" and its\n   associated parameters in SDP is as follows:\n  \
    \ o  The media type (e.g., \"application\") goes into the \"m=\" line as\n   \
    \   the media name.\n   o  The media subtype goes into the \"a=rtpmap\" line as\
    \ the encoding\n      name.  The RTP clock rate parameter (\"rate\") also goes\
    \ into the\n      \"a=rtpmap\" line as the clock rate.\n   o  The remaining required\
    \ payload-format-specific parameters go into\n      the \"a=fmtp\" line by copying\
    \ them directly from the media type\n      string as a semicolon-separated list\
    \ of parameter=value pairs.\n   SDP examples are provided in Section 7.1.\n"
- title: 5.2.1.  Offer/Answer Model Considerations
  contents:
  - "5.2.1.  Offer/Answer Model Considerations\n   When offering parity FEC over RTP\
    \ using SDP in an Offer/Answer model\n   [RFC3264], the following considerations\
    \ apply:\n   o  A sender application will indicate a repair window consistent\
    \ with\n      the desired amount of protection.  Since the sender can change the\n\
    \      FEC configuration on a packet-by-packet basis, note that the\n      receiver\
    \ must support any valid FLEX FEC configuration within the\n      repair window\
    \ associated with the offer (see Section 4.2.2).  If\n      the receiver cannot\
    \ support the offered repair window it MUST\n      reject the offer.\n   o  The\
    \ size of the repair-window is related to the maximum delay\n      between the\
    \ transmission of a source packet and the associated\n      repair packet.  This\
    \ directly impacts the buffering requirement on\n      the receiver side and the\
    \ receiver must consider this when\n      choosing an offer.\n   o  Any unknown\
    \ option in the offer must be ignored and deleted from\n      the answer (see\
    \ Section 6 of [RFC3264]).  If FEC is not desired by\n      the receiver, it can\
    \ be deleted from the answer.\n"
- title: 5.2.2.  Declarative Considerations
  contents:
  - "5.2.2.  Declarative Considerations\n   In declarative usage, like SDP in the\
    \ Real-time Streaming Protocol\n   (RTSP, for RTSP 1.0 see [RFC2326] and for RTSP\
    \ 2.0 see [RFC7826]) or\n   the Session Announcement Protocol (SAP) [RFC2974],\
    \ the following\n   considerations apply:\n   o  The payload format configuration\
    \ parameters are all declarative\n      and a participant MUST use the configuration\
    \ that is provided for\n      the session.\n   o  More than one configuration\
    \ may be provided (if desired) by\n      declaring multiple RTP payload types.\
    \  In that case, the receivers\n      should choose the repair stream that is\
    \ best for them.\n"
- title: 6.  Protection and Recovery Procedures -- Parity Codes
  contents:
  - "6.  Protection and Recovery Procedures -- Parity Codes\n   This section provides\
    \ a complete specification of the 1-D and 2-D\n   parity codes and their RTP payload\
    \ formats.  It does not apply to the\n   single packet retransmission format (R=1\
    \ in the FEC header).\n"
- title: 6.1.  Overview
  contents:
  - "6.1.  Overview\n   The following sections specify the steps involved in generating\
    \ the\n   repair packets and reconstructing the missing source packets from the\n\
    \   repair packets.\n"
- title: 6.2.  Repair Packet Construction
  contents:
  - "6.2.  Repair Packet Construction\n   The RTP header of a repair packet is formed\
    \ based on the guidelines\n   given in Section 4.2.\n   The FEC header and Repair\
    \ Payload of repair packets are formed by\n   applying the XOR operation on the\
    \ bit strings that are generated from\n   the individual source packets protected\
    \ by this particular repair\n   packet.  The set of the source packets that are\
    \ associated with a\n   given repair packet can be computed by the formula given\
    \ in\n   Section 6.3.1.\n   The bit string is formed for each source packet by\
    \ concatenating the\n   following fields together in the order specified:\n  \
    \ o  The first 16 bits of the RTP header (16 bits), though the first\n      two\
    \ (version) bits will be ignored by the recovery procedure.\n   o  Unsigned network-ordered\
    \ 16-bit representation of the source\n      packet length in bytes minus 12 (for\
    \ the fixed RTP header), i.e.,\n      the sum of the lengths of all the following\
    \ if present: the CSRC\n      list, extension header, RTP payload, and RTP padding\
    \ (16 bits).\n   o  The timestamp of the RTP header (32 bits).\n   o  All octets\
    \ after the fixed 12-byte RTP header.  (Note the SSRC\n      field is skipped.)\n\
    \   The FEC bit string is generated by applying the parity operation on\n   the\
    \ bit strings produced from the source packets.  The FEC header is\n   generated\
    \ from the FEC bit string as follows:\n   o  The first (most significant) 2 bits\
    \ in the FEC bit string, which\n      contain the RTP version field, are skipped.\
    \  The R and F bits in\n      the FEC header are set to the appropriate value,\
    \ i.e., it depends\n      on the chosen format variant.  As a consequence of overwriting\
    \ the\n      RTP version field with the R and F bits, this payload format only\n\
    \      supports RTP version 2.\n   o  The next bit in the FEC bit string is written\
    \ into the P recovery\n      bit in the FEC header.\n   o  The next bit in the\
    \ FEC bit string is written into the X recovery\n      bit in the FEC header.\n\
    \   o  The next 4 bits of the FEC bit string are written into the CC\n      recovery\
    \ field in the FEC header.\n   o  The next bit is written into the M recovery\
    \ bit in the FEC header.\n   o  The next 7 bits of the FEC bit string are written\
    \ into the PT\n      recovery field in the FEC header.\n   o  The next 16 bits\
    \ are written into the length recovery field in the\n      FEC header.\n   o \
    \ The next 32 bits of the FEC bit string are written into the TS\n      recovery\
    \ field in the FEC header.\n   o  The lowest Sequence Number of the source packets\
    \ protected by this\n      repair packet is written into the Sequence Number Base\
    \ field in\n      the FEC header.  This needs to be repeated for each SSRC that\
    \ has\n      packets included in the source block.\n   o  Depending on the chosen\
    \ FEC header variant, the mask(s) is set\n      when F=0 or the L and D values\
    \ are set when F=1.  This needs to be\n      repeated for each SSRC that has packets\
    \ included in the source\n      block.\n   o  The rest of the FEC bit string,\
    \ which contains everything after\n      the fixed 12-byte RTP header of the source\
    \ packet, is written into\n      the Repair Payload following the FEC header,\
    \ where \"Payload\"\n      refers to everything after the fixed 12-byte RTP header,\
    \ including\n      extensions, CSRC list, true payloads, and padding.\n   If the\
    \ lengths of the source packets are not equal, each shorter\n   packet MUST be\
    \ padded to the length of the longest packet by adding\n   octet zeros at the\
    \ end.\n   Due to this possible padding and mandatory FEC header, a repair\n \
    \  packet has a larger size than the source packets it protects.  This\n   may\
    \ cause problems if the resulting repair packet size exceeds the\n   Maximum Transmission\
    \ Unit (MTU) size of the path over which the\n   repair stream is sent.\n"
- title: 6.3.  Source Packet Reconstruction
  contents:
  - "6.3.  Source Packet Reconstruction\n   This section describes the recovery procedures\
    \ that are required to\n   reconstruct the missing source packets.  The recovery\
    \ process has two\n   steps.  In the first step, the FEC decoder determines which\
    \ source\n   and repair packets should be used in order to recover a missing\n\
    \   packet.  In the second step, the decoder recovers the missing packet,\n  \
    \ which consists of an RTP header and RTP payload.\n   The following describes\
    \ the RECOMMENDED algorithms for the first and\n   second steps.  Based on the\
    \ implementation, different algorithms MAY\n   be adopted.  However, the end result\
    \ MUST be identical to the one\n   produced by the algorithms described below.\n\
    \   Note that the same algorithms are used by the 1-D parity codes,\n   regardless\
    \ of whether the FEC protection is applied over a column or\n   a row.  The 2-D\
    \ parity codes, on the other hand, usually require\n   multiple iterations of\
    \ the procedures described here.  This iterative\n   decoding algorithm is further\
    \ explained in Section 6.3.4.\n"
- title: 6.3.1.  Associating the Source and Repair Packets
  contents:
  - "6.3.1.  Associating the Source and Repair Packets\n   Before associating source\
    \ and repair packets, the receiver must know\n   in which RTP sessions the source\
    \ and repair, respectively, are being\n   sent.  After this is established by\
    \ the receiver, the first step is\n   associating the source and repair packets.\
    \  This association can be\n   via flexible bitmasks or fixed L and D offsets,\
    \ which can be in the\n   FEC header or signaled in SDP in optional payload format\
    \ parameters\n   when L=D=0 in the FEC header.\n"
- title: 6.3.1.1.  Using Bitmasks
  contents:
  - "6.3.1.1.  Using Bitmasks\n   To use flexible bitmasks, the first two FEC header\
    \ bits MUST have R=0\n   and F=0.  A 15-bit, 46-bit, or 110-bit mask indicates\
    \ which source\n   packets are protected by a FEC repair packet.  If the bit i\
    \ in the\n   mask is set to 1, the source packet number N + i is protected by\
    \ this\n   FEC repair packet, where N is the Sequence Number base indicated in\n\
    \   the FEC header.  The most significant bit of the mask corresponds to\n   i=0.\
    \  The least significant bit of the mask corresponds to i=14 in\n   the 15-bit\
    \ mask, i=45 in the 46-bit mask, or i=109 in the 110-bit\n   mask.\n   The bitmasks\
    \ are able to represent arbitrary protection patterns, for\n   example, 1-D interleaved,\
    \ 1-D non-interleaved, 2-D.\n"
- title: 6.3.1.2.  Using L and D Offsets
  contents:
  - "6.3.1.2.  Using L and D Offsets\n   Denote the set of the source packets associated\
    \ with repair packet p*\n   by set T(p*).  Note that in a source block whose size\
    \ is L columns by\n   D rows, set T includes D source packets plus one repair\
    \ packet for\n   the FEC protection applied over a column, and it includes L source\n\
    \   packets plus one repair packet for the FEC protection applied over a\n   row.\
    \  Recall that 1-D interleaved and non-interleaved FEC protection\n   can fully\
    \ recover the missing information if there is only one source\n   packet missing\
    \ per column or row in set T.  If more than one source\n   packet is missing per\
    \ column or row in set T, 1-D FEC protection may\n   fail to recover all the missing\
    \ information.\n   When the value of L is non-zero, the 8-bit fields indicate\
    \ the offset\n   of packets protected by an interleaved (D>0) or non-interleaved\
    \ (D=0)\n   FEC packet.  Using a combination of interleaved and non-interleaved\n\
    \   FEC repair packets can form 2-D protection patterns.\n   Mathematically, for\
    \ any received repair packet, p*, the sequence\n   numbers of the source packets\
    \ that are protected by this repair\n   packet are determined as follows, where\
    \ SN is the Sequence Number\n   base in the FEC header:\n    For each SSRC (in\
    \ CSRC list):\n    When D <= 1: Source packets for each row: SN, SN+1, ..., SN+(L-1)\n\
    \    When D >  1: Source packets for each col: SN, SN+L, ..., SN+(D-1)*L\n"
- title: 6.3.2.  Recovering the RTP Header
  contents:
  - "6.3.2.  Recovering the RTP Header\n   For a given set T, the procedure for the\
    \ recovery of the RTP header\n   of the missing packet, whose Sequence Number\
    \ is denoted by SEQNUM, is\n   as follows:\n   1.   For each of the source packets\
    \ that are successfully received in\n        T, compute the 80-bit string by concatenating\
    \ the first 64 bits\n        of their RTP header and the unsigned network-ordered\
    \ 16-bit\n        representation of their length in bytes minus 12.\n   2.   For\
    \ the repair packet in T, extract the FEC bit string as the\n        first 80\
    \ bits of the FEC header.\n   3.   Calculate the recovered bit string as the XOR\
    \ of the bit strings\n        generated from all source packets in T and the FEC\
    \ bit string\n        generated from the repair packet in T.\n   4.   Create a\
    \ new packet with the standard 12-byte RTP header and no\n        payload.\n \
    \  5.   Set the version of the new packet to 2.  Skip the first 2 bits\n     \
    \   in the recovered bit string.\n   6.   Set the Padding bit in the new packet\
    \ to the next bit in the\n        recovered bit string.\n   7.   Set the Extension\
    \ bit in the new packet to the next bit in the\n        recovered bit string.\n\
    \   8.   Set the CC field to the next 4 bits in the recovered bit string.\n  \
    \ 9.   Set the Marker bit in the new packet to the next bit in the\n        recovered\
    \ bit string.\n   10.  Set the Payload type in the new packet to the next 7 bits\
    \ in the\n        recovered bit string.\n   11.  Set the SN field in the new packet\
    \ to SEQNUM.\n   12.  Take the next 16 bits of the recovered bit string and set\
    \ the\n        new variable Y to whatever unsigned integer this represents\n \
    \       (assuming network order).  Convert Y to host order.  Y\n        represents\
    \ the length of the new packet in bytes minus 12 (for\n        the fixed RTP header),\
    \ i.e., the sum of the lengths of all the\n        following if present: the CSRC\
    \ list, header extension, RTP\n        payload, and RTP padding.\n   13.  Set\
    \ the TS field in the new packet to the next 32 bits in the\n        recovered\
    \ bit string.\n   14.  Set the SSRC of the new packet to the SSRC of the missing\
    \ source\n        RTP stream.\n   This procedure recovers the header of an RTP\
    \ packet up to (and\n   including) the SSRC field.\n"
- title: 6.3.3.  Recovering the RTP Payload
  contents:
  - "6.3.3.  Recovering the RTP Payload\n   Following the recovery of the RTP header,\
    \ the procedure for the\n   recovery of the RTP \"payload\" is as follows, where\
    \ \"payload\" refers\n   to everything following the fixed 12-byte RTP header,\
    \ including\n   extensions, CSRC list, true payload, and padding.\n   1.  Allocate\
    \ Y additional bytes for the new packet generated in\n       Section 6.3.2.\n\
    \   2.  For each of the source packets that are successfully received in\n   \
    \    T, compute the bit string from the Y octets of data starting with\n     \
    \  the 13th octet of the packet.  If any of the bit strings\n       generated\
    \ from the source packets has a length shorter than Y,\n       pad them to that\
    \ length.  The zero-padding octets MUST be added\n       at the end of the bit\
    \ string.  Note that the information of the\n       first 8 octets are protected\
    \ by the FEC header.\n   3.  For the repair packet in T, compute the FEC bit string\
    \ from the\n       repair packet payload, i.e., the Y octets of data following\
    \ the\n       FEC header.  Note that the FEC header may be different sizes\n \
    \      depending on the variant and bitmask size.\n   4.  Calculate the recovered\
    \ bit string as the XOR of the bit strings\n       generated from all source packets\
    \ in T and the FEC bit string\n       generated from the repair packet in T.\n\
    \   5.  Set the last Y octets in the new packet to the recovered bit\n       string.\n"
- title: 6.3.4.  Iterative Decoding Algorithm for the 2-D Parity FEC Protection
  contents:
  - "6.3.4.  Iterative Decoding Algorithm for the 2-D Parity FEC Protection\n   In\
    \ 2-D parity FEC protection, the sender generates both non-\n   interleaved and\
    \ interleaved FEC repair packets to combat with the\n   mixed loss patterns (random\
    \ and bursty).  At the receiver side, these\n   FEC packets are used iteratively\
    \ to overcome the shortcomings of the\n   1-D non-interleaved/interleaved FEC\
    \ protection and improve the\n   chances of full error recovery.\n   The iterative\
    \ decoding algorithm runs as follows:\n   1.  Set num_recovered_until_this_iteration\
    \ to zero\n   2.  Set num_recovered_so_far to zero\n   3.  Recover as many source\
    \ packets as possible by using the non-\n       interleaved FEC repair packets\
    \ as outlined in Sections 6.3.2 and\n       6.3.3 and increase the value of num_recovered_so_far\
    \ by the\n       number of recovered source packets.\n   4.  Recover as many source\
    \ packets as possible by using the\n       interleaved FEC repair packets as outlined\
    \ in Sections 6.3.2 and\n       6.3.3 and increase the value of num_recovered_so_far\
    \ by the\n       number of recovered source packets.\n   5.  If num_recovered_so_far\
    \ > num_recovered_until_this_iteration\n       ---num_recovered_until_this_iteration\
    \ = num_recovered_so_far\n       ---Go to step 3\n       Else\n       ---Terminate\n\
    \   The algorithm terminates either when all missing source packets are\n   fully\
    \ recovered or when there are still remaining missing source\n   packets but the\
    \ FEC repair packets are not able to recover any more\n   source packets.  For\
    \ the example scenarios when the 2-D parity FEC\n   protection fails full recovery,\
    \ refer to Section 1.1.4.  Upon\n   termination, variable num_recovered_so_far\
    \ has a value equal to the\n   total number of recovered source packets.\n   Example:\n\
    \   Suppose that the receiver experienced the loss pattern sketched in\n   Figure\
    \ 16.\n                                   +---+  +---+  +===+\n              \
    \         X      X    | 3 |  | 4 |  |R_1|\n                                  \
    \ +---+  +---+  +===+\n                     +---+  +---+  +---+  +---+  +===+\n\
    \                     | 5 |  | 6 |  | 7 |  | 8 |  |R_2|\n                    \
    \ +---+  +---+  +---+  +---+  +===+\n                     +---+              \
    \  +---+  +===+\n                     | 9 |    X      X    | 12|  |R_3|\n    \
    \                 +---+                +---+  +===+\n                     +===+\
    \  +===+  +===+  +===+\n                     |C_1|  |C_2|  |C_3|  |C_4|\n    \
    \                 +===+  +===+  +===+  +===+\n   Figure 16: Example: Loss Pattern\
    \ for the Iterative Decoding Algorithm\n   The receiver executes the iterative\
    \ decoding algorithm and recovers\n   source packets #1 and #11 in the first iteration.\
    \  The resulting\n   pattern is sketched in Figure 17.\n                     +---+\
    \         +---+  +---+  +===+\n                     | 1 |    X    | 3 |  | 4 |\
    \  |R_1|\n                     +---+         +---+  +---+  +===+\n           \
    \          +---+  +---+  +---+  +---+  +===+\n                     | 5 |  | 6\
    \ |  | 7 |  | 8 |  |R_2|\n                     +---+  +---+  +---+  +---+  +===+\n\
    \                     +---+         +---+  +---+  +===+\n                    \
    \ | 9 |    X    | 11|  | 12|  |R_3|\n                     +---+         +---+\
    \  +---+  +===+\n                     +===+  +===+  +===+  +===+\n           \
    \          |C_1|  |C_2|  |C_3|  |C_4|\n                     +===+  +===+  +===+\
    \  +===+\n        Figure 17: The Resulting Pattern after the First Iteration\n\
    \   Since the if condition holds true, the receiver runs a new iteration.\n  \
    \ In the second iteration, source packets #2 and #10 are recovered,\n   resulting\
    \ in a full recovery as sketched in Figure 18.\n                     +---+  +---+\
    \  +---+  +---+  +===+\n                     | 1 |  | 2 |  | 3 |  | 4 |  |R_1|\n\
    \                     +---+  +---+  +---+  +---+  +===+\n                    \
    \ +---+  +---+  +---+  +---+  +===+\n                     | 5 |  | 6 |  | 7 |\
    \  | 8 |  |R_2|\n                     +---+  +---+  +---+  +---+  +===+\n    \
    \                 +---+  +---+  +---+  +---+  +===+\n                     | 9\
    \ |  | 10|  | 11|  | 12|  |R_3|\n                     +---+  +---+  +---+  +---+\
    \  +===+\n                     +===+  +===+  +===+  +===+\n                  \
    \   |C_1|  |C_2|  |C_3|  |C_4|\n                     +===+  +===+  +===+  +===+\n\
    \        Figure 18: The Resulting Pattern after the Second Iteration\n"
- title: 7.  Signaling Requirements
  contents:
  - "7.  Signaling Requirements\n   Out-of-band signaling should be designed to enable\
    \ the receiver to\n   identify the RTP streams associated with source packets\
    \ and repair\n   packets, respectively.  At a minimum, the signaling must be designed\n\
    \   to allow the receiver to:\n   o  Determine whether one or more source RTP\
    \ streams will be sent.\n   o  Determine whether one or more repair RTP streams\
    \ will be sent.\n   o  Associate the appropriate SSRC's to both source and repair\n\
    \      streams.\n   o  Clearly identify which SSRC's are associated with each\
    \ source\n      block.\n   o  Clearly identify which repair packets correspond\
    \ to which source\n      blocks.\n   o  Make use of repair packets to recover\
    \ source data associated with\n      specific SSRC's.\n   This section provides\
    \ several Session Description Protocol (SDP)\n   examples to demonstrate how these\
    \ requirements can be met.\n"
- title: 7.1.  SDP Examples
  contents:
  - "7.1.  SDP Examples\n   This section provides two SDP [RFC4566] examples.  The\
    \ examples use\n   the FEC grouping semantics defined in [RFC5956].\n"
- title: 7.1.1.  Example SDP for Flexible FEC Protection with In-Band SSRC
  contents:
  - "7.1.1.  Example SDP for Flexible FEC Protection with In-Band SSRC\n        Mapping\n\
    \   In this example, we have one source video stream and one FEC repair\n   stream.\
    \  The source and repair streams are multiplexed on different\n   SSRCs.  The\
    \ repair window is set to 200 ms.\n        v=0\n        o=mo 1122334455 1122334466\
    \ IN IP4 fec.example.com\n        s=FlexFEC minimal SDP signaling Example\n  \
    \      t=0 0\n        m=video 30000 RTP/AVP 96 98\n        c=IN IP4 233.252.0.1/127\n\
    \        a=rtpmap:96 VP8/90000\n        a=rtpmap:98 flexfec/90000\n        a=fmtp:98;\
    \ repair-window=200000\n"
- title: 7.1.2.  Example SDP for Flexible FEC Protection with Explicit Signaling
  contents:
  - "7.1.2.  Example SDP for Flexible FEC Protection with Explicit Signaling\n   \
    \     in the SDP\n   This example shows one source video stream (ssrc:1234) and\
    \ one FEC\n   repair streams (ssrc:2345).  One FEC group is formed with the\n\
    \   \"a=ssrc-group:FEC-FR 1234 2345\" line.  The source and repair streams\n \
    \  are multiplexed on different SSRCs.  The repair window is set to 200\n   ms.\n\
    \        v=0\n        o=ali 1122334455 1122334466 IN IP4 fec.example.com\n   \
    \     s=2-D Parity FEC with no in band signaling Example\n        t=0 0\n    \
    \    m=video 30000 RTP/AVP 100 110\n        c=IN IP4 192.0.2.0/24\n        a=rtpmap:100\
    \ MP2T/90000\n        a=rtpmap:110 flexfec/90000\n        a=fmtp:110; repair-window:200000\n\
    \        a=ssrc:1234\n        a=ssrc:2345\n        a=ssrc-group:FEC-FR 1234 2345\n"
- title: 7.2.  On the Use of the RTP Stream Identifier Source Description
  contents:
  - "7.2.  On the Use of the RTP Stream Identifier Source Description\n   The RTP\
    \ Stream Identifier Source Description [RTP-SDES] is a format\n   that can be\
    \ used to identify a single RTP source stream along with an\n   associated repair\
    \ stream.  However, this specification already\n   defines a method of source\
    \ and repair stream identification that can\n   enable protection of multiple\
    \ source streams with a single repair\n   stream.  Therefore, the RTP Stream Identifier\
    \ Source Description\n   SHOULD NOT be used for the Flexible FEC payload format.\n"
- title: 8.  Congestion Control Considerations
  contents:
  - "8.  Congestion Control Considerations\n   FEC is an effective approach to provide\
    \ applications resiliency\n   against packet losses.  However, in networks where\
    \ the congestion is\n   a major contributor to the packet loss, the potential\
    \ impacts of\n   using FEC should be considered carefully before injecting the\
    \ repair\n   streams into the network.  In particular, in bandwidth-limited\n\
    \   networks, FEC repair streams may consume a significant part of the\n   available\
    \ bandwidth and, consequently, may congest the network.  In\n   such cases, the\
    \ applications MUST NOT arbitrarily increase the amount\n   of FEC protection\
    \ since doing so may lead to a congestion collapse.\n   If desired, stronger FEC\
    \ protection MAY be applied only after the\n   source rate has been reduced.\n\
    \   In a network-friendly implementation, an application should avoid\n   sending/receiving\
    \ FEC repair streams if it knows that sending/\n   receiving those FEC repair\
    \ streams would not help at all in\n   recovering the missing packets.  Examples\
    \ of where FEC would not be\n   beneficial are (1) if the successful recovery\
    \ rate as determined by\n   RTCP feedback is low (see [RFC5725] and [RFC7509]\
    \ and (2) the\n   application has a smaller latency requirement than the repair\
    \ window\n   adopted by the FEC configuration based on the expected burst loss\n\
    \   duration and the target FEC overhead.  It is RECOMMENDED that the\n   amount\
    \ and type (row, column, or both) of FEC protection is adjusted\n   dynamically\
    \ based on the packet loss rate and burst loss length\n   observed by the applications.\n\
    \   In multicast scenarios, it may be difficult to optimize the FEC\n   protection\
    \ per receiver.  If there is a large variation among the\n   levels of FEC protection\
    \ needed by different receivers, it is\n   RECOMMENDED that the sender offer multiple\
    \ repair streams with\n   different levels of FEC protection and the receivers\
    \ join the\n   corresponding multicast sessions to receive the repair stream(s)\
    \ that\n   is best for them.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   RTP packets using the payload format defined\
    \ in this specification\n   are subject to the security considerations discussed\
    \ in the RTP\n   specification [RFC3550] and in any applicable RTP profile.  The\
    \ main\n   security considerations for the RTP packet carrying the RTP payload\n\
    \   format defined within this memo are confidentiality, integrity, and\n   source\
    \ authenticity.  Confidentiality can be provided by encrypting\n   the RTP payload.\
    \  Integrity of the RTP packets is achieved through a\n   suitable cryptographic\
    \ integrity protection mechanism.  Such a\n   cryptographic system may also allow\
    \ the authentication of the source\n   of the payload.  A suitable security mechanism\
    \ for this RTP payload\n   format should provide confidentiality, integrity protection,\
    \ and at\n   least source authentication capable of determining if an RTP packet\n\
    \   is from a member of the RTP session.\n   Note that the appropriate mechanism\
    \ to provide security to RTP and\n   payloads following this memo may vary.  It\
    \ is dependent on the\n   application, transport, and signaling protocol employed.\
    \  Therefore,\n   a single mechanism is not sufficient; although, if suitable,\
    \ using\n   the Secure Real-time Transport Protocol (SRTP) [RFC3711] is\n   recommended.\
    \  Other mechanisms that may be used are IPsec [RFC4301],\n   and Datagram Transport\
    \ Layer Security (DTLS, see [RFC6347]) when used\n   along with RTP-over-UDP;\
    \ other alternatives may exist.\n   Given that FLEX FEC enables the protection\
    \ of multiple source\n   streams, there exists the possibility that multiple source\
    \ buffers\n   may be created that may not be used.  An attacker could leverage\n\
    \   unused source buffers as a means of occupying memory in a FLEX FEC\n   endpoint.\
    \  In addition, an attack against the FEC parameters\n   themselves (e.g., repair\
    \ window or D or L values) can result in a\n   receiver having to allocate source\
    \ buffer space that may also lead to\n   excessive consumption of resources. \
    \ Similarly, a network attacker\n   could modify the recovery fields corresponding\
    \ to packet lengths\n   (assuming there are no message integrity mechanisms),\
    \ which, in turn,\n   could force unnecessarily large memory allocations at the\
    \ receiver.\n   Moreover, the application source data may not be perfectly matched\n\
    \   with FLEX FEC Source partitioning.  If this is the case, there is a\n   possibility\
    \ for unprotected source data if, for instance, the FLEX\n   FEC implementation\
    \ discards data that does not fit perfectly into its\n   source processing requirements.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   New media subtypes are subject to IANA registration.\
    \  For the\n   registration of the payload formats and their parameters introduced\n\
    \   in this document, refer to Section 5.1.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n   \
    \           with Session Description Protocol (SDP)\", RFC 3264,\n           \
    \   DOI 10.17487/RFC3264, June 2002,\n              <https://www.rfc-editor.org/info/rfc3264>.\n\
    \   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n          \
    \    Jacobson, \"RTP: A Transport Protocol for Real-Time\n              Applications\"\
    , STD 64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <https://www.rfc-editor.org/info/rfc3550>.\n\
    \   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n   \
    \           Description Protocol\", RFC 4566, DOI 10.17487/RFC4566,\n        \
    \      July 2006, <https://www.rfc-editor.org/info/rfc4566>.\n   [RFC4855]  Casner,\
    \ S., \"Media Type Registration of RTP Payload\n              Formats\", RFC 4855,\
    \ DOI 10.17487/RFC4855, February 2007,\n              <https://www.rfc-editor.org/info/rfc4855>.\n\
    \   [RFC4856]  Casner, S., \"Media Type Registration of Payload Formats in\n \
    \             the RTP Profile for Audio and Video Conferences\",\n           \
    \   RFC 4856, DOI 10.17487/RFC4856, February 2007,\n              <https://www.rfc-editor.org/info/rfc4856>.\n\
    \   [RFC5956]  Begen, A., \"Forward Error Correction Grouping Semantics in\n \
    \             the Session Description Protocol\", RFC 5956,\n              DOI\
    \ 10.17487/RFC5956, September 2010,\n              <https://www.rfc-editor.org/info/rfc5956>.\n\
    \   [RFC6363]  Watson, M., Begen, A., and V. Roca, \"Forward Error\n         \
    \     Correction (FEC) Framework\", RFC 6363,\n              DOI 10.17487/RFC6363,\
    \ October 2011,\n              <https://www.rfc-editor.org/info/rfc6363>.\n  \
    \ [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n           \
    \   Specifications and Registration Procedures\", BCP 13,\n              RFC 6838,\
    \ DOI 10.17487/RFC6838, January 2013,\n              <https://www.rfc-editor.org/info/rfc6838>.\n\
    \   [RFC7022]  Begen, A., Perkins, C., Wing, D., and E. Rescorla,\n          \
    \    \"Guidelines for Choosing RTP Control Protocol (RTCP)\n              Canonical\
    \ Names (CNAMEs)\", RFC 7022, DOI 10.17487/RFC7022,\n              September 2013,\
    \ <https://www.rfc-editor.org/info/rfc7022>.\n   [RFC8174]  Leiba, B., \"Ambiguity\
    \ of Uppercase vs Lowercase in RFC\n              2119 Key Words\", BCP 14, RFC\
    \ 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC2326]  Schulzrinne, H., Rao, A., and R.\
    \ Lanphier, \"Real Time\n              Streaming Protocol (RTSP)\", RFC 2326,\n\
    \              DOI 10.17487/RFC2326, April 1998,\n              <https://www.rfc-editor.org/info/rfc2326>.\n\
    \   [RFC2733]  Rosenberg, J. and H. Schulzrinne, \"An RTP Payload Format\n   \
    \           for Generic Forward Error Correction\", RFC 2733,\n              DOI\
    \ 10.17487/RFC2733, December 1999,\n              <https://www.rfc-editor.org/info/rfc2733>.\n\
    \   [RFC2974]  Handley, M., Perkins, C., and E. Whelan, \"Session\n          \
    \    Announcement Protocol\", RFC 2974, DOI 10.17487/RFC2974,\n              October\
    \ 2000, <https://www.rfc-editor.org/info/rfc2974>.\n   [RFC3711]  Baugher, M.,\
    \ McGrew, D., Naslund, M., Carrara, E., and K.\n              Norrman, \"The Secure\
    \ Real-time Transport Protocol (SRTP)\",\n              RFC 3711, DOI 10.17487/RFC3711,\
    \ March 2004,\n              <https://www.rfc-editor.org/info/rfc3711>.\n   [RFC4301]\
    \  Kent, S. and K. Seo, \"Security Architecture for the\n              Internet\
    \ Protocol\", RFC 4301, DOI 10.17487/RFC4301,\n              December 2005, <https://www.rfc-editor.org/info/rfc4301>.\n\
    \   [RFC4585]  Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n  \
    \            \"Extended RTP Profile for Real-time Transport Control\n        \
    \      Protocol (RTCP)-Based Feedback (RTP/AVPF)\", RFC 4585,\n              DOI\
    \ 10.17487/RFC4585, July 2006,\n              <https://www.rfc-editor.org/info/rfc4585>.\n\
    \   [RFC4588]  Rey, J., Leon, D., Miyazaki, A., Varsa, V., and R.\n          \
    \    Hakenberg, \"RTP Retransmission Payload Format\", RFC 4588,\n           \
    \   DOI 10.17487/RFC4588, July 2006,\n              <https://www.rfc-editor.org/info/rfc4588>.\n\
    \   [RFC5109]  Li, A., Ed., \"RTP Payload Format for Generic Forward Error\n \
    \             Correction\", RFC 5109, DOI 10.17487/RFC5109, December\n       \
    \       2007, <https://www.rfc-editor.org/info/rfc5109>.\n   [RFC5725]  Begen,\
    \ A., Hsu, D., and M. Lague, \"Post-Repair Loss RLE\n              Report Block\
    \ Type for RTP Control Protocol (RTCP) Extended\n              Reports (XRs)\"\
    , RFC 5725, DOI 10.17487/RFC5725, February\n              2010, <https://www.rfc-editor.org/info/rfc5725>.\n\
    \   [RFC6347]  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n    \
    \          Security Version 1.2\", RFC 6347, DOI 10.17487/RFC6347,\n         \
    \     January 2012, <https://www.rfc-editor.org/info/rfc6347>.\n   [RFC7509] \
    \ Huang, R. and V. Singh, \"RTP Control Protocol (RTCP)\n              Extended\
    \ Report (XR) for Post-Repair Loss Count Metrics\",\n              RFC 7509, DOI\
    \ 10.17487/RFC7509, May 2015,\n              <https://www.rfc-editor.org/info/rfc7509>.\n\
    \   [RFC7656]  Lennox, J., Gross, K., Nandakumar, S., Salgueiro, G., and\n   \
    \           B. Burman, Ed., \"A Taxonomy of Semantics and Mechanisms\n       \
    \       for Real-Time Transport Protocol (RTP) Sources\", RFC 7656,\n        \
    \      DOI 10.17487/RFC7656, November 2015,\n              <https://www.rfc-editor.org/info/rfc7656>.\n\
    \   [RFC7826]  Schulzrinne, H., Rao, A., Lanphier, R., Westerlund, M.,\n     \
    \         and M. Stiemerling, Ed., \"Real-Time Streaming Protocol\n          \
    \    Version 2.0\", RFC 7826, DOI 10.17487/RFC7826, December\n              2016,\
    \ <https://www.rfc-editor.org/info/rfc7826>.\n   [RTP-SDES]\n              Roach,\
    \ A., Nandakumar, S., and P. Thatcher, \"RTP Stream\n              Identifier\
    \ Source Description (SDES)\", Work in Progress,\n              draft-ietf-avtext-rid-09,\
    \ October 2016.\n   [SMPTE2022-1]\n              SMPTE, \"Forward Error Correction\
    \ for Real-Time Video/Audio\n              Transport over IP Networks\", ST 2022-1:2007,\
    \ SMPTE\n              Standard, DOI 10.5594/SMPTE.ST2022-1.2007, May 2007.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Some parts of this document are borrowed from [RFC5109].\
    \  Thus, the\n   author would like to thank the editor of [RFC5109] and those\
    \ who\n   contributed to [RFC5109].\n   Thanks to Stephen Botzko, Bernard Aboba,\
    \ Rasmus Brandt, Brian\n   Baldino, Roni Even, Stefan Holmer, Jonathan Lennox,\
    \ and Magnus\n   Westerlund for providing valuable feedback on earlier draft versions\n\
    \   of this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mo Zanaty\n   Cisco\n   Raleigh, NC\n   United States\
    \ of America\n   Email: mzanaty@cisco.com\n   Varun Singh\n   CALLSTATS I/O Oy\n\
    \   Annankatu 31-33 C 42\n   Helsinki  00101\n   Finland\n   Email: varun.singh@iki.fi\n\
    \   URI:   http://www.callstats.io/\n   Ali Begen\n   Networked Media\n   Konya\n\
    \   Turkey\n   Email: ali.begen@networked.media\n   Giridhar Mandyam\n   Qualcomm\
    \ Inc.\n   5775 Morehouse Drive\n   San Diego, CA  92121\n   United States of\
    \ America\n   Phone: +1 858 651 7200\n   Email: mandyam@qti.qualcomm.com\n"
