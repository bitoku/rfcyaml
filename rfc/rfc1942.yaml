- title: __initial_text__
  contents:
  - '                              HTML Tables

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The HyperText Markup Language (HTML) is a simple markup language\
    \ used\n   to create hypertext documents that are portable from one platform to\n\
    \   another. HTML documents are SGML documents with generic semantics\n   that\
    \ are appropriate for representing information from a wide range\n   of applications.\
    \ This specification extends HTML to support a wide\n   variety of tables. The\
    \ model is designed to work well with associated\n   style sheets, but does not\
    \ require them. It also supports rendering\n   to braille, or speech, and exchange\
    \ of tabular data with databases\n   and spreadsheets. The HTML table model embodies\
    \ certain aspects of\n   the CALS table model, e.g. the ability to group table\
    \ rows into\n   thead, tbody and tfoot sections, plus the ability to specify cell\n\
    \   alignment compactly for sets of cells according to the context.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   Recent Changes  .................................................\
    \ 1\n   Brief Introduction  ............................................. 2\n\
    \   Design Rationale  ............................................... 5\n   Walkthrough\
    \ of the Table DTD  ................................... 8\n   Recommended Layout\
    \ Algorithms  ................................. 23\n   HTML Table DTD  ................................................\
    \ 26\n   References  .................................................... 29\n\
    \   Security Considerations  ....................................... 30\n   Author's\
    \ Address  .............................................. 30\n"
- title: Recent Changes
  contents:
  - "Recent Changes\n   This specification extends HTML to support tables. The table\
    \ model\n   has grown out of early work on HTML+ and the initial draft of HTML3.\n\
    \   The earlier model has been been extended in response to requests from\n  \
    \ information providers for improved control over the presentation of\n   tabular\
    \ information:\n   *   alignment on designated characters such as \".\" and \"\
    :\"\n       e.g. aligning a column of numbers on the decimal point\n   *   more\
    \ flexibility in specifying table frames and rules\n   *   incremental display\
    \ for large tables as data is received\n   *   the ability to support scrollable\
    \ tables with fixed headers plus\n       better support for breaking tables across\
    \ pages for printing\n   *   optional column based defaults for alignment properties\n\
    \   In addition, a major goal has been to provide backwards compatibility\n  \
    \ with the widely deployed Netscape implementation of tables. A\n   subsidiary\
    \ goal has been to simplify importing tables conforming to\n   the SGML CALS model.\
    \ The latest draft makes the ALIGN attribute\n   compatible with the latest Netscape\
    \ and Microsoft browsers. Some\n   clarifications have been made to the role of\
    \ the DIR attribute and\n   recommended behaviour when absolute and relative column\
    \ widths are\n   mixed.\n   A new element COLGROUP has been introduced to allow\
    \ sets of columns\n   be grouped with different width and alignment properties\
    \ specified by\n   one or more COL elements. The semantics of COLGROUP have been\n\
    \   clarified over previous drafts, and RULES=BASIC replaced by\n   RULES=GROUPS.\n\
    \   The FRAME and RULES attributes have been modified to avoid SGML name\n   clashes\
    \ with each other, and to avoid clashes with the ALIGN and\n   VALIGN attributes.\
    \ These changes were additionally motivated by the\n   desire to avoid future\
    \ problems if this specification is extended to\n   allow FRAME and RULES attributes\
    \ with other table elements.\n"
- title: A Brief Introduction to HTML Tables
  contents:
  - "A Brief Introduction to HTML Tables\n   Tables start with an optional caption\
    \ followed by one or more rows.\n   Each row is formed by one or more cells, which\
    \ are differentiated\n   into header and data cells. Cells can be merged across\
    \ rows and\n   columns, and include attributes assisting rendering to speech and\n\
    \   braille, or for exporting table data into databases. The model\n   provides\
    \ limited support for control over appearence, for example\n   horizontal and\
    \ vertical alignment of cell contents, border styles and\n   cell margins. You\
    \ can further affect this by grouping rows and\n   columns together. Tables can\
    \ contain a wide range of content, such as\n   headers, lists, paragraphs, forms,\
    \ figures, preformatted text and\n   even nested tables.\n"
- title: Example
  contents:
  - "Example\n   <TABLE BORDER>\n     <CAPTION>A test table with merged cells</CAPTION>\n\
    \     <TR><TH ROWSPAN=2><TH COLSPAN=2>Average\n         <TH ROWSPAN=2>other<BR>category<TH>Misc\n\
    \     <TR><TH>height<TH>weight\n     <TR><TH ALIGN=LEFT>males<TD>1.9<TD>0.003\n\
    \     <TR><TH ALIGN=LEFT ROWSPAN=2>females<TD>1.7<TD>0.002\n   </TABLE>\n   On\
    \ a dumb terminal, this would be rendered something like:\n                 A\
    \ test table with merged cells\n       /--------------------------------------------------\\\
    \n       |          |      Average      |  other   |  Misc  |\n       |      \
    \    |-------------------| category |--------|\n       |          |  height |\
    \  weight |          |        |\n       |-----------------------------------------|--------|\n\
    \       | males    | 1.9     | 0.003   |          |        |\n       |-----------------------------------------|--------|\n\
    \       | females  | 1.7     | 0.002   |          |        |\n       \\--------------------------------------------------/\n\
    \   Next, a richer example with grouped rows and columns (adapted from\n   \"\
    Developing International Software\" by Nadine Kano). First here is\n   what the\
    \ table looks like on paper:\n                     CODE-PAGE SUPPORT IN MICROSOFT\
    \ WINDOWS\n"
- title: ========================================================================
  contents:
  - '========================================================================

    '
- title: Code-Page| Name                      |ACP OEMCP| Windows Windows Windows
  contents:
  - "Code-Page| Name                      |ACP OEMCP| Windows Windows Windows\n  \
    \  ID   |                           |         |  NT 3.1 NT 3.51    95\n"
- title: '------------------------------------------------------------------------'
  contents:
  - "------------------------------------------------------------------------\n  \
    \ 1200  |Unicode (BMP of ISO 10646) |         |     X       X       *\n   1250\
    \  |Windows 3.1 East. Europe   |  X      |     X       X       X\n   1251  |Windows\
    \ 3.1 Cyrillic       |  X      |     X       X       X\n   1252  |Windows 3.1\
    \ US (ANSI)      |  X      |     X       X       X\n   1253  |Windows 3.1 Greek\
    \          |  X      |     X       X       X\n   1254  |Windows 3.1 Turkish  \
    \      |  X      |     X       X       X\n   1255  |Hebrew                   \
    \  |  X      |                     X\n   1256  |Arabic                     | \
    \ X      |                     X\n   1257  |Baltic                     |  X  \
    \    |                     X\n   1361  |Korean (Johab)             |  X      |\
    \             **      X\n"
- title: '------------------------------------------------------------------------'
  contents:
  - "------------------------------------------------------------------------\n  \
    \  437  |MS-DOS United States       |     X   |     X       X       X\n    708\
    \  |Arabic (ASMO 708)          |     X   |                     X\n    709  |Arabic\
    \ (ASMO 449+, BCON V4)|     X   |                     X\n    710  |Arabic (Transparent\
    \ Arabic)|     X   |                     X\n    720  |Arabic (Transparent ASMO)\
    \  |     X   |                     X\n"
- title: ========================================================================
  contents:
  - "========================================================================\n  \
    \ The markup for this uses COLGROUP elements to group columns and to\n   set default\
    \ column alignment. TBODY elements are used to group rows.\n   The FRAME and RULES\
    \ attributes are used to select which borders to\n   render.\n   <table border=2\
    \ frame=hsides rules=groups>\n   <caption>CODE-PAGE SUPPORT IN MICROSOFT WINDOWS</caption>\n\
    \   <colgroup align=center>\n   <colgroup align=left>\n   <colgroup align=center\
    \ span=2>\n   <colgroup align=center span=3>\n   <thead valign=top>\n   <tr>\n\
    \   <th>Code-Page<br>ID\n   <th>Name\n   <th>ACP\n   <th>OEMCP\n   <th>Windows<br>NT\
    \ 3.1\n   <th>Windows<br>NT 3.51\n   <th>Windows<br>95\n   <tbody>\n   <tr><td>1200<td>Unicode\
    \ (BMP of ISO 10646)<td><td><td>X<td>X<TD>*\n   <tr><td>1250<td>Windows 3.1 Eastern\
    \ European<td>X<td><td>X<td>X<TD>X\n   <tr><td>1251<td>Windows 3.1 Cyrillic<td>X<td><td>X<td>X<TD>X\n\
    \   <tr><td>1252<td>Windows 3.1 US (ANSI)<td>X<td><td>X<td>X<TD>X\n   <tr><td>1253<td>Windows\
    \ 3.1 Greek<td>X<td><td>X<td>X<TD>X\n   <tr><td>1254<td>Windows 3.1 Turkish<td>X<td><td>X<td>X<TD>X\n\
    \   <tr><td>1255<td>Hebrew<td>X<td><td><td><td>X\n   <tr><td>1256<td>Arabic<td>X<td><td><td><td>X\n\
    \   <tr><td>1257<td>Baltic<td>X<td><td><td><td>X\n   <tr><td>1361<td>Korean (Johab)<td>X<td><td><td>**<td>X\n\
    \   <tbody>\n   <tr><td>437<td>MS-DOS United States<td><td>X<td>X<td>X<TD>X\n\
    \   <tr><td>708<td>Arabic (ASMO 708)<td><td>X<td><td><td>X\n   <tr><td>709<td>Arabic\
    \ (ASMO 449+, BCON V4)<td><td>X<td><td><td>X\n   <tr><td>710<td>Arabic (Transparent\
    \ Arabic)<td><td>X<td><td><td>X\n   <tr><td>720<td>Arabic (Transparent ASMO)<td><td>X<td><td><td>X\n\
    \   </table>\n"
- title: Design Rationale
  contents:
  - "Design Rationale\n   The HTML table model has evolved from studies of existing\
    \ SGML tables\n   models, the treatment of tables in common word processing packages,\n\
    \   and looking at a wide range of tabular layout in magazines, books and\n  \
    \ other paper-based documents. The model was chosen to allow simple\n   tables\
    \ to be expressed simply with extra complexity only when needed.\n   This makes\
    \ it practical to create the markup for HTML tables with\n   everyday text editors\
    \ and reduces the learning curve for getting\n   started. This feature has been\
    \ very important to the success of HTML\n   to date.\n   Increasingly people are\
    \ using filters from other document formats or\n   direct wysiwyg editors for\
    \ HTML. It is important that the HTML table\n   model fits well with these routes\
    \ for authoring HTML. This affects\n   how the representation handles cells which\
    \ span multiple rows or\n   columns, and how alignment and other presentation\
    \ properties are\n   associated with groups of cells.\n   A major consideration\
    \ for the HTML table model is that the fonts and\n   window sizes etc. in use\
    \ with browsers are not under the author's\n   control. This makes it risky to\
    \ rely on column widths specified in\n   terms of absolute units such as picas\
    \ or pixels. Instead, tables can\n   be dynamically sized to match the current\
    \ window size and fonts.\n   Authors can provide guidance as to the relative widths\
    \ of columns,\n   but user agents should to ensure that columns are wide enough\
    \ to\n   render the width of the largest single element of the cell's content.\n\
    \   If the author's specification must be overridden, it is preferred\n   that\
    \ the relative widths of individual columns are not changed\n   drastically.\n\
    \   For large tables or slow network connections, it is desirable to be\n   able\
    \ to start displaying the table before all of the data has been\n   received.\
    \ The default window width for most user agents shows about\n   80 characters,\
    \ and the graphics for many HTML pages are designed with\n   these defaults in\
    \ mind. Authors can provide a hint to user agents to\n   activate incremental\
    \ display of table contents. This feature requires\n   the author to specify the\
    \ number of columns, and includes provision\n   for control of table width and\
    \ the widths of different columns in\n   relative or absolute terms.\n   For incremental\
    \ display, the browser needs the number of columns and\n   their widths. The default\
    \ width of the table is the current window\n   size (width=\"100%\"). This can\
    \ be altered by including a WIDTH\n   attribute in the TABLE start tag. By default\
    \ all columns have the\n   same width, but you can specify column widths with\
    \ one or more COL\n   elements before the table data starts.\n   The remaining\
    \ issue is the number of columns. Some people have\n   suggested waiting until\
    \ the first row of the table has been received,\n   but this could take a long\
    \ time if the cells have a lot of content.\n   On the whole it makes more sense,\
    \ when incremental display is\n   desired, to get authors to explicitly specify\
    \ the number of columns\n   in the TABLE start tag.\n   Authors still need a way\
    \ of informing the browser whether to use\n   incremental display or to automatically\
    \ size the table to match the\n   cell contents. For the two pass auto sizing\
    \ mode, the number of\n   columns is determined by the first pass, while for the\
    \ incremental\n   mode, the number of columns needs to be stated up front. So\
    \ it seems\n   to that COLS=_nn_ would be better for this purpose than a LAYOUT\n\
    \   attribute such as LAYOUT=FIXED or LAYOUT=AUTO.\n   It is generally held useful\
    \ to consider documents from two\n   perspectives: Structural idioms such as headers,\
    \ paragraphs, lists,\n   tables, and figures; and rendering idioms such as margins,\
    \ leading,\n   font names and sizes. The wisdom of past experience encourages\
    \ us to\n   separate the structural information in documents from rendering\n\
    \   information. Mixing them together ends up causing increased cost of\n   ownership\
    \ for maintaining documents, and reduced portability between\n   applications\
    \ and media.\n   For tables, the alignment of text within table cells, and the\
    \ borders\n   between cells are, from the purist's point of view, rendering\n\
    \   information. In practice, though, it is useful to group these with\n   the\
    \ structural information, as these features are highly portable\n   from one application\
    \ to the next. The HTML table model leaves most\n   rendering information to associated\
    \ style sheets. The model is\n   designed to take advantage of such style sheets\
    \ but not to require\n   them.\n   This specification provides a superset of the\
    \ simpler model presented\n   in earlier work on HTML+. Tables are considered\
    \ as being formed from\n   an optional caption together with a sequence of rows,\
    \ which in turn\n   consist of a sequence of table cells. The model further\n\
    \   differentiates header and data cells, and allows cells to span\n   multiple\
    \ rows and columns.\n   Following the CALS table model, this specification allows\
    \ table rows\n   to be grouped into head and body and foot sections. This simplifies\n\
    \   the representation of rendering information and can be used to repeat\n  \
    \ table head and foot rows when breaking tables across page boundaries,\n   or\
    \ to provide fixed headers above a scrollable body panel. In the\n   markup, the\
    \ foot section is placed before the body sections. This is\n   an optimization\
    \ shared with CALS for dealing with very long tables.\n   It allows the foot to\
    \ be rendered without having to wait for the\n   entire table to be processed.\n\
    \   For the visually impaired, HTML offers the hope of setting to rights\n   the\
    \ damage caused by the adoption of windows based graphical user\n   interfaces.\
    \ The HTML table model includes attributes for labeling\n   each cell, to support\
    \ high quality text to speech conversion. The\n   same attributes can also be\
    \ used to support automated import and\n   export of table data to databases or\
    \ spreadsheets.\n   Current desktop publishing packages provide very rich control\
    \ over\n   the rendering of tables, and it would be impractical to reproduce\n\
    \   this in HTML, without making HTML into a bulky rich text format like\n   RTF\
    \ or MIF. This specification does, however, offer authors the\n   ability to choose\
    \ from a set of commonly used classes of border\n   styles. The FRAME attribute\
    \ controls the appearence of the border\n   frame around the table while the RULES\
    \ attribute determines the\n   choice of rulings within the table.\n   During\
    \ the development of this specification, a number of avenues\n   were investigated\
    \ for specifying the ruling patterns for tables. One\n   issue concerns the kinds\
    \ of statements that can be made. Including\n   support for edge subtraction as\
    \ well as edge addition leads to\n   relatively complex algorithms. For instance\
    \ work on allowing the full\n   set of table elements to include the FRAME and\
    \ RULES attributes led\n   to an algorithm involving some 24 steps to determine\
    \ whether a\n   particular edge of a cell should be ruled or not. Even this\n\
    \   additional complexity doesn't provide enough rendering control to\n   meet\
    \ the full range of needs for tables. The current specification\n   deliberately\
    \ sticks to a simple intuitive model, sufficient for most\n   purposes. Further\
    \ experimental work is needed before a more complex\n   approach is standardized.\n"
- title: A walk through the table DTD
  contents:
  - "A walk through the table DTD\n   The table document type definition provides\
    \ the formal definition of\n   the allowed syntax for html tables. The following\
    \ is an annotated\n   listing of the DTD. The complete listing appears at the\
    \ end of this\n   document.\n   Note that the TABLE element is a block-like element\
    \ rather a\n   character-level element. As such it is a peer of other HTML block-\n\
    \   like elements such as paragraphs, lists and headers.\n"
- title: Common Attributes
  contents:
  - "Common Attributes\n   The following attributes occur in several of the elements\
    \ and are\n   defined here for brevity. In general, all attribute names and values\n\
    \   in this specification are case insensitive, except where noted\n   otherwise.\
    \ The ID, CLASS and attributes are required for use with\n   style sheets, while\
    \ LANG and DIR are needed for internationalization.\n   <!ENTITY % attrs\n   \
    \       \"id      ID       #IMPLIED  -- element identifier --\n           class\
    \   NAMES    #IMPLIED  -- for subclassing elements --\n           lang    NAME\
    \     #IMPLIED  -- as per RFC 1766 --\n           dir   (ltr|rtl)  #IMPLIED  --\
    \ I18N text direction --\">\n   ID\n       Used to define a document-wide identifier.\
    \ This can be used for\n       naming positions within documents as the destination\
    \ of a\n       hypertext link. It may also be used by style sheets for\n     \
    \  rendering an element in a unique style. An ID attribute value is\n       an\
    \ SGML NAME token. NAME tokens are formed by an initial letter\n       followed\
    \ by letters, digits, \"-\" and \".\" characters. The letters\n       are restricted\
    \ to A-Z and a-z.\n   CLASS\n       A space separated list of SGML NAME tokens.\
    \ CLASS names specify\n       that the element belongs to the corresponding named\
    \ classes. It\n       allows authors to distinguish different roles played by\
    \ the same\n       tag. The classes may be used by style sheets to provide\n \
    \      different renderings as appropriate to these roles.\n   LANG\n       A\
    \ LANG attribute identifies the natural language used by the\n       content of\
    \ the associated element.The syntax and registry of\n       language values are\
    \ defined by RFC 1766. In summary the language\n       is given as a primary tag\
    \ followed by zero or more subtags,\n       separated by \"-\". White space is\
    \ not allowed and all tags are\n       case insensitive. The name space of tags\
    \ is administered by\n       IANA. The two letter primary tag is an ISO 639 language\n\
    \       abbreviation, while the initial subtag is a two letter ISO 3166\n    \
    \   country code. Example values for LANG include:\n             en, en-US, en-uk,\
    \ i-cherokee, x-pig-latin.\n   DIR\n       Human writing systems are grouped into\
    \ scripts, which determine\n       amongst other things, the direction the characters\
    \ are written.\n       Elements of the Latin script are nominally left to right,\
    \ while\n       those of the Arabic script are nominally right to left. These\n\
    \       characters have what is called strong directionality. Other\n       characters\
    \ can be directionally neutral (spaces) or weak\n       (punctuation).\n     \
    \  The DIR attribute specifies an encapsulation boundary which\n       governs\
    \ the interpretation of neutral and weakly directional\n       characters. It\
    \ does not override the directionality of strongly\n       directional characters.\
    \ The DIR attribute value is one of LTR\n       for left to right, or RTL for\
    \ right to left, e.g. DIR=RTL.\n       When applied to TABLE, it indicates the\
    \ geometric layout of rows\n       (i.e. row 1 is on right if DIR=RTL, but on\
    \ the left if DIR=LTR)\n       and it indicates a default base directionality\
    \ for any text in\n       the table's content if no other DIR attribute applies\
    \ to that\n       text.\n"
- title: Horizontal and Vertical Alignment Attributes
  contents:
  - "Horizontal and Vertical Alignment Attributes\n   The alignment of cell contents\
    \ can be specified on a cell by cell\n   basis, or inherited from enclosing elements,\
    \ such as the row, column\n   or the table element itself.\n   ALIGN\n       This\
    \ specifies the horizontal alignment of cell contents.\n   <!-- horizontal alignment\
    \ attributes for cell contents -->\n   <!ENTITY % cell.halign\n           \"align\
    \  (left|center|right|justify|char) #IMPLIED\n            char    CDATA   #IMPLIED\
    \ -- alignment char, e.g. char=':' --\n            charoff CDATA   #IMPLIED --\
    \ offset for alignment char --\"\n           >\n       The attribute value should\
    \ be one of LEFT, CENTER, RIGHT,\n       JUSTIFY and CHAR. User agents may treat\
    \ JUSTIFY as left\n       alignment if they lack support for text justification.\n\
    \       ALIGN=CHAR is used for aligning cell contents on a particular\n      \
    \ character.\n       For cells spanning multiple rows or columns, where the alignment\n\
    \       property is inherited from the row or column, the initial row\n      \
    \ and column for the cell determines the appropriate alignment\n       property\
    \ to use.\n       Note that an alignment attribute on elements within the cell,\n\
    \       e.g. on a P element, overrides the normal alignment value for\n      \
    \ the cell.\n   CHAR\n       This is used to specify an alignment character for\
    \ use with\n       align=char, e.g. char=\":\". The default character is the decimal\n\
    \       point for the current language, as set by the LANG attribute.\n      \
    \ The CHAR attribute value is case sensitive.\n   CHAROFF\n       Specifies the\
    \ offset to the first occurrence of the alignment\n       character on each line.\
    \ If a line doesn't include the alignment\n       character, it should be horizontally\
    \ shifted to end at the\n       alignment position. The resolved direction of\
    \ the cell, as\n       determined by the inheritance of the DIR attribute, is\
    \ used to\n       set whether the offset is from the left or right margin of the\n\
    \       cell. For Latin scripts, the offset will be from the left\n       margin,\
    \ while for Arabic scripts, it will be from the right\n       margin. In addition\
    \ to standard units, the \"%\" sign may be used\n       to indicate that the value\
    \ specifies the alignment position as a\n       percentage offset of the current\
    \ cell, e.g. CHAROFF=\"30%\"\n       indicates the alignment character should\
    \ be positioned 30%\n       through the cell.\n       When using the two pass\
    \ layout algorithm, the default alignment\n       position in the absence of an\
    \ explicit or inherited CHAROFF\n       attribute can be determined by choosing\
    \ the position that would\n       center lines for which the width before and\
    \ after the alignment\n       character are at the maximum values for any of the\
    \ lines in the\n       column for which ALIGN=CHAR. For incremental table layout\
    \ the\n       suggested default is CHAROFF=\"50%\". If several cells in\n    \
    \   different rows for the same column use character alignment, then\n       by\
    \ default, all such cells should line up, regardless of which\n       character\
    \ is used for alignment. Rules for handling objects too\n       large for column\
    \ apply when the explicit or implied alignment\n       results in a situation\
    \ where the data exceeds the assigned width\n       of the column.\n   VALIGN\n\
    \       Defines whether the cell contents are aligned with the top,\n       middle\
    \ or bottom of the cell.\n       <!-- vertical alignment attributes for cell contents\
    \ -->\n       <!ENTITY % cell.valign\n               \"valign  (top|middle|bottom|baseline)\
    \  #IMPLIED\"\n               >\n       If present, the value of the attribute\
    \ should be one of: TOP,\n       MIDDLE, BOTTOM or BASELINE. All cells in the\
    \ same row with\n       valign=baseline should be vertically positioned so that\
    \ the\n       first text line in each such cell occur on a common baseline.\n\
    \       This constraint does not apply to subsequent text lines in these\n   \
    \    cells.\n"
- title: Inheritance Order
  contents:
  - "Inheritance Order\n   Alignment properties can be included with most of the table\
    \ elements:\n   COL, THEAD, TBODY, TFOOT, TR, TH and TD. When rendering cells,\n\
    \   horizontal alignment is determined by columns in preference to rows,\n   while\
    \ for vertical alignment, the rows are more important than the\n   columns. The\
    \ following table gives the detailed precedence order for\n   each attribute,\
    \ where X > Y denotes that X takes precedence over Y:\n   ALIGN, CHAR and CHAROFF:\n\
    \   cells > columns > column groups > rows > row groups > default\n   VALIGN,\
    \ LANG, and DIR:\n   cells > rows > row groups > columns > column groups > table\
    \ > default\n   Where cells are defined by TH and TD elements; rows by TR elements;\n\
    \   row groups by THEAD, TBODY and TFOOT elements, columns by COL\n   elements;\
    \ and column groups by COLGROUP and COL elements. Note that\n   there is no inheritance\
    \ mechanism for the CLASS attribute.\n   Properties defined on cells take precedence\
    \ over inherited\n   properties, but are in turn over-ridden by alignment properties\
    \ on\n   elements within cells. In the absence of an ALIGN attribute along the\n\
    \   inheritance path, the recommended default alignment for table cell\n   contents\
    \ is ALIGN=LEFT for table data and ALIGN=CENTER for table\n   headers. The recommended\
    \ default for vertical alignment is\n   VALIGN=MIDDLE. These defaults are chosen\
    \ to match the behaviour of\n   the widely deployed Netscape implementation.\n"
- title: Standard Units for Widths
  contents:
  - "Standard Units for Widths\n   Several attributes specify widths as a number followed\
    \ by an optional\n   suffix. The units for widths are specified by the suffix:\
    \ pt denotes\n   points, pi denotes picas, in denotes inches, cm denotes centimeters,\n\
    \   mm denotes millimeters, em denotes em units (equal to the height of\n   the\
    \ default font), and px denotes screen pixels. The default units\n   are screen\
    \ pixels (chosen for backwards compatibility). The number is\n   an integer value\
    \ or a real valued number such as \"2.5\". Exponents, as\n   in \"1.2e2\", are\
    \ not allowed.  White space is not allowed between the\n   number and the suffix.\n\
    \   The above set of suffices is augmented for certain elements: \"%\" is\n  \
    \ used for the WIDTH attribute for the TABLE element. It indicates that\n   the\
    \ attribute specifies the percentage width of the space between the\n   current\
    \ left and right margins, e.g. width=\"50%\". For the COL\n   element, \"*\" is\
    \ used with the WIDTH attribute to specify relative\n   column widths, e.g. width=\"\
    3*\", using the same representation as the\n   CALS table model.\n"
- title: The TABLE element
  contents:
  - 'The TABLE element

    '
- title: <!ENTITY % Where "(left|center|right)">
  contents:
  - '<!ENTITY % Where "(left|center|right)">

    '
- title: <!ELEMENT table - - (caption?, (col*|colgroup*), thead?, tfoot?, tbody+)>
  contents:
  - '<!ELEMENT table - - (caption?, (col*|colgroup*), thead?, tfoot?, tbody+)>

    '
- title: <!ATTLIST table                    -- table element --
  contents:
  - "<!ATTLIST table                    -- table element --\n        %attrs;     \
    \               -- id, lang, dir and class --\n        align   %Where;  #IMPLIED\
    \  -- table position relative to --\n                                   -- window\
    \ --\n        width   CDATA    #IMPLIED  -- table width relative to window --\n\
    \        cols    NUMBER   #IMPLIED  -- used for immediate display mode --\n  \
    \      border  CDATA    #IMPLIED  -- controls frame width around --\n        \
    \                           -- table --\n        frame   %Frame;  #IMPLIED  --\
    \ which parts of table frame to --\n                                   -- include\
    \ --\n        rules   %Rules;  #IMPLIED  -- controls rules between cells --\n\
    \        cellspacing CDATA #IMPLIED -- spacing between cells --\n        cellpadding\
    \ CDATA #IMPLIED -- spacing within cells --\n        >\n   The TABLE element requires\
    \ both start and end tags. Table elements\n   start with an optional CAPTION element,\
    \ optionally followed by either\n   one or more COL elements, or one or more COLGROUP\
    \ elements, then an\n   optional THEAD, an optional TFOOT, and finally one or\
    \ more TBODY\n   elements.\n   ID, CLASS, LANG and DIR\n       See earlier description\
    \ of common attributes.\n   ALIGN\n       Defines the horizontal position of the\
    \ table relative to the\n       current left and right margins. ALIGN=CENTER centers\
    \ the table\n       midway between the left and right margins. ALIGN=LEFT positions\n\
    \       the table at the left margin, while ALIGN=RIGHT positions the\n      \
    \ table at the right margin. User agents may flow text around the\n       right\
    \ handside of the table for ALIGN=LEFT, or the left handside\n       for ALIGN=RIGHT.\n\
    \       Note you can use <BR CLEAR=LEFT> after the table element if you\n    \
    \   want to avoid text flowing along side the table when you have\n       specified\
    \ ALIGN=LEFT, or <BR CLEAR=RIGHT> for a right aligned\n       table. To prevent\
    \ a right aligned table flowing around something\n       else, use <BR CLEAR=RIGHT>\
    \ before the table etc. Greater control\n       over textflow is possible using\
    \ style sheets.\n   WIDTH\n       Specifies the desired width of the table. In\
    \ addition to the\n       standard units, the \"%\" sign may used to indicate\
    \ that the width\n       specifies the percentage width of the space between the\
    \ current\n       left and right margins, e.g. width=\"50%\". In the absence of\
    \ this\n       attribute, the table width can be determined by the layout\n  \
    \     algorithm given later on.\n       It is recommended that the table width\
    \ be increased beyond the\n       value indicated by the WIDTH attribute as needed\
    \ to avoid any\n       overflow of cell contents. Such increases should try to\
    \ avoid\n       drastic changes to relative column widths specified by the\n \
    \      author. To avoid the need for excessive horizontal scrolling, or\n    \
    \   when such scrolling is impractical or undesired, it may be\n       appropriate\
    \ to split words across lines.\n   COLS\n       Specifies the number of columns\
    \ for the table. If present the\n       user agent may render the table dynamically\
    \ as data is received\n       from the network without waiting for the complete\
    \ table to be\n       received. If the WIDTH attribute is missing, a default of\
    \ \"100%\"\n       may be assumed for this purpose. If the COLS attribute is\n\
    \       absent, a prepass through the table's contents is needed to\n       determine\
    \ the number of columns together with suitable values\n       for the widths of\
    \ each column.\n   BORDER\n       Specifies the width of the border framing the\
    \ table, see\n       standard units.\n   FRAME\n       Specifies which sides of\
    \ the frame to render.\n       <!ENTITY % Frame\n          \"(void|above|below|hsides|lhs|rhs|vsides|box|border)\"\
    >\n       VOID\n           Don't render any sides of the frame.\n       ABOVE\n\
    \           The top side of the frame\n       BELOW\n           The bottom side\
    \ of the frame\n       HSIDES\n           The top and bottom sides of the frame\n\
    \       LHS\n           The left hand side of the frame\n       RHS\n        \
    \   The right hand side of the frame\n       VSIDES\n           The left and right\
    \ sides of the frame\n       BOX\n           All four sides of the frame\n   \
    \    BORDER\n           All four sides of the frame\n       The value \"Border\"\
    \ is included for backwards compatibility with\n       deployed browsers. If a\
    \ document includes <TABLE BORDER> the\n       user agent will see FRAME=BORDER\
    \ and BORDER=_implied_. If the\n       document includes <TABLE BORDER=_n_> then\
    \ the user agent should\n       treat this as FRAME=BORDER except if _n=0_ for\
    \ which FRAME=VOID\n       is appropriate.\n       Note: it would have been preferable\
    \ to choose values for FRAME\n       consistent with the RULES attribute and the\
    \ values used for\n       alignment. For instance: none, top, bottom, topbot,\
    \ left, right,\n       leftright, all. Unfortunately, SGML requires enumerated\n\
    \       attribute values to be unique for each element, independent of\n     \
    \  the attribute name. This causes immediate problems for \"none\",\n       \"\
    left\", \"right\" and \"all\". The values for FRAME have been chosen\n       to\
    \ avoid clashes with the RULES, ALIGN and VALIGN attributes.\n       This provides\
    \ a measure of future proofing, as it is anticipated\n       that that the FRAME\
    \ and RULES attributes will be added to other\n       table elements in future\
    \ revisions to this specification. An\n       alternative would be to make FRAME\
    \ a CDATA attribute. The\n       consensus of the HTML-WG was that the benefits\
    \ of being able to\n       use SGML validation tools to check attributes based\
    \ on\n       enumerated values outweighs the need for consistent names.\n   RULES\n\
    \       Specifies where to draw rules within the table interior.\n       <!ENTITY\
    \ % Rules \"(none | groups | rows | cols | all)\">\n       NONE\n           Suppresses\
    \ internal rulings.\n       GROUPS\n           The THEAD, TFOOT and TBODY elements\
    \ divide the table into\n           groups of rows, while COLGROUP elements divide\
    \ the table\n           into groups of columns. This choice places a horizontal\
    \ rule\n           between each row group and a vertical rule between each\n \
    \          column group. Note that every table has at least one row and\n    \
    \       one column group.\n       ROWS\n           As RULES=GROUPS plus horizontal\
    \ rules between all rows. User\n           agents may choose to use a heavier\
    \ rule between groups of\n           rows and columns for emphasis.\n       COLS\n\
    \           As RULES=GROUPS plus vertical rules between all columns.\n       \
    \    User agents may choose to use a heavier rule between groups\n           of\
    \ rows and columns for emphasis.\n       ALL\n           Place rules between all\
    \ rows and all columns. User agents\n           may choose to use a heavier rule\
    \ between groups of rows and\n           columns for emphasis.\n       If a document\
    \ includes <TABLE BORDER> or <TABLE BORDER=_n_> then\n       the default for the\
    \ table element is RULES=ALL, except if _n=0_\n       for which RULES=NONE is\
    \ appropriate.\n   CELLSPACING\n       This attribute is intended for backwards\
    \ compatibility with\n       deployed user agents. It specifies the space between\
    \ the table\n       frame and the first or last cell border for each row or column,\n\
    \       and between other cells in the table. See standard units.\n       Greater\
    \ control will be possible using style sheet languages.\n   CELLPADDING\n    \
    \   This attribute is intended for backwards compatibility with\n       deployed\
    \ user agents. It specifies the amount of space between\n       the border of\
    \ the cell and its contents both above/below, and\n       left//right. See standard\
    \ units. Greater control will be\n       possible using style sheet languages.\n\
    \   If a fixed width is set for the table or column, the CELLSPACING and\n   CELLPADDING\
    \ may demand more space than assigned. Current practice is\n   for the latter\
    \ to take precedence over WIDTH attributes when a\n   conflict occurs, although\
    \ this isn't required by this specification.\n"
- title: Table Captions
  contents:
  - "Table Captions\n   <!ELEMENT caption - - (%text;)+>\n   <!ENTITY % Caption \"\
    (top|bottom|left|right)\">\n   <!ATTLIST caption                  -- table caption\
    \ --\n           %attrs;                    -- id, lang, dir and class --\n  \
    \         align   %Caption; #IMPLIED -- relative to table --\n           >\n \
    \  The optional CAPTION element is used to provide a caption for the\n   table.\
    \ Both start and end tags are required.\n   ID, CLASS, LANG and DIR\n       See\
    \ earlier description of common attributes.\n   ALIGN\n       This may be used\
    \ to control the placement of captions relative\n       to the table. When present,\
    \ the ALIGN attribute should have one\n       of the values: TOP, BOTTOM, LEFT\
    \ and RIGHT. It is recommended\n       that the caption is made to fit within\
    \ the width or height of\n       the table as appropriate. The default position\
    \ of the caption is\n       deliberately unspecified.\n       Note the ALIGN attribute\
    \ is overused in HTML, but is retained\n       here for compatibility with currently\
    \ deployed browsers.\n"
- title: The COLGROUP Element
  contents:
  - "The COLGROUP Element\n   <!ELEMENT colgroup - O (col*)>\n   <!ATTLIST colgroup\n\
    \           %attrs;                    -- id, lang, dir and class --\n       \
    \    span    NUMBER   1         -- default number of columns in --\n         \
    \                             -- group --\n           width   CDATA    #IMPLIED\
    \  -- default width for enclosed --\n                                      --\
    \ COLs --\n           %cell.halign;              -- horizontal alignment in --\n\
    \                                      -- cells --\n           %cell.valign; \
    \             -- vertical alignment in cells --\n           >\n   The COLGROUP\
    \ element acts as a container for a group of columns, and\n   allows you to set\
    \ default properties for these columns. In the\n   absence of a COLGROUP element,\
    \ all columns in the table are assumed\n   to belong to a single column group.\
    \ Each COLGROUP element can\n   contain zero or more COL elements. COLGROUP requires\
    \ a start tag,\n   but the end tag may be omitted. This is useful when defining\
    \ a\n   sequence of COLGROUP elements, e.g.\n       <TABLE FRAME=BOX RULES=COLS>\n\
    \         <COLGROUP>\n           <COL WIDTH=\"1*\">\n           <COL WIDTH=\"\
    2*\">\n         <COLGROUP>\n           <COL WIDTH=\"1*\">\n           <COL WIDTH=\"\
    3*\">\n         <THEAD>\n           <TR> ...\n       </TABLE>\n   COLGROUP elements\
    \ can be used with the following attributes:\n   ID, CLASS, LANG and DIR\n   \
    \    See earlier description of common attributes.\n   SPAN\n       A positive\
    \ integer value that specifies a default for how many\n       columns are in this\
    \ group. This attribute should be ignored if\n       the COLGROUP element contains\
    \ one or more COL elements. It\n       provides a convenient way of grouping columns\
    \ without the need\n       to supply COL elements.\n   WIDTH\n       Specifies\
    \ a default width for each of the grouped columns, see\n       standard units.\
    \ In addition, the \"*\" suffix denotes relative\n       widths, e.g.\n      \
    \      width=64        width in screen pixels\n            width=0.5*      a relative\
    \ width of 0.5\n       Relative widths act as constraints on the relative widths\
    \ of\n       different columns. If a COLGROUP element specifies a relative\n \
    \      width of zero, all of the columns in the group should be set to\n     \
    \  their minimum widths, unless they are associated with a COL\n       element\
    \ with an overriding WIDTH attribute. When widths are\n       given in absolute\
    \ units, the user agent can use these to\n       constrain the width of the table.\
    \ The \"*\" suffix is used to\n       simplify importing tables from the CALS\
    \ representation.\n   ALIGN, CHAR, CHAROFF and VALIGN\n       Specify values for\
    \ horizontal and vertical alignment within\n       table cells. See inheritance\
    \ order of alignment properties.\n"
- title: The COL Element
  contents:
  - "The COL Element\n   <!ELEMENT col - O EMPTY>\n   <!ATTLIST col              \
    \        -- column groups and --\n                                      -- properties\
    \ --\n           %attrs;                    -- id, lang, dir and class --\n  \
    \         span    NUMBER   1         -- number of columns spanned --\n       \
    \                               -- by group --\n           width   CDATA    #IMPLIED\
    \  -- column width specification --\n           %cell.halign;              --\
    \ horizontal alignment in --\n                                      -- cells --\n\
    \           %cell.valign;              -- vertical alignment in cells --\n   \
    \        >\n   This optional element is used to specify column based defaults\
    \ for\n   table properties. It is an empty element, and as such has no\n   content,\
    \ and shouldn't be given an end tag. Several COL elements may\n   be given in\
    \ succession. COL attributes override those of the parent\n   COLGROUP element.\n\
    \   ID, CLASS, LANG and DIR\n       See earlier description of common attributes.\n\
    \   SPAN\n       A positive integer value that specifies how many columns this\n\
    \       element applies to, defaulting to one. In the absence of SPAN\n      \
    \ attributes the first COL element applies to the first column,\n       the second\
    \ COL element to the second column and so on. If the\n       second COL element\
    \ had SPAN=2, it would apply to the second and\n       third column. The next\
    \ COL element would then apply to the\n       fourth column and so on. SPAN=0\
    \ has a special significance and\n       implies that the COL element spans all\
    \ columns from the current\n       column up to and including the last column.\
    \ Note that a COL SPAN\n       does not define a group. It is merely a way to\
    \ share attribute\n       definitions.\n   WIDTH\n       Specifies the width of\
    \ the columns, see standard units. If the\n       element spans several columns\
    \ then the WIDTH attribute specifies\n       the width for each of the individual\
    \ columns - not the width of\n       the span. In addition, the \"*\" suffix denotes\
    \ relative widths,\n       e.g.\n            width=64        width in screen pixels\n\
    \            width=0.5*      a relative width of 0.5\n       Relative widths act\
    \ as constraints on the relative widths of\n       different columns. If a COL\
    \ element specifies a relative width\n       of zero, the column should always\
    \ be set to its minimum width.\n       When widths are given in absolute units,\
    \ the user agent can use\n       these to constrain the width of the table. The\
    \ \"*\" suffix is\n       used to simplify importing tables from the CALS representation.\n\
    \   ALIGN, CHAR, CHAROFF and VALIGN\n       Specify values for horizontal and\
    \ vertical alignment within\n       table cells. See inheritance order of alignment\
    \ properties.\n"
- title: Table Head, Foot and Body Elements
  contents:
  - "Table Head, Foot and Body Elements\n   <!ELEMENT thead - O tr+>\n   <!ELEMENT\
    \ tfoot - O tr+>\n   <!ELEMENT tbody O O tr+>\n   <!ATTLIST (thead|tbody|tfoot)\
    \      -- table section --\n           %attrs;                    -- id, lang,\
    \ dir and class --\n           %cell.halign;              -- horizontal alignment\
    \ in --\n                                      -- cells --\n           %cell.valign;\
    \              -- vertical alignment in cells --\n           >\n   Tables may\
    \ be divided up into head and body sections. The THEAD and\n   TFOOT elements\
    \ are optional, but one or more TBODY elements are\n   always required. If the\
    \ table only consists of a TBODY section, the\n   TBODY start and end tags may\
    \ be omitted, as the parser can infer\n   them. If a THEAD element is present,\
    \ the THEAD start tag is\n   required, but the end tag can be omitted, provided\
    \ a TFOOT or TBODY\n   start tag follows. The same applies to TFOOT.\n   Note:\
    \ This definition provides compatibility with tables created\n   for the older\
    \ model, as well as allowing the end tags for THEAD,\n   TFOOT and TBODY to be\
    \ omitted.\n   The THEAD, TFOOT and TBODY elements provide a convenient means\
    \ for\n   controlling rendering. If the table has a large number of rows in\n\
    \   the body, user agents may choose to use a scrolling region for the\n   table\
    \ body sections. When rendering to a paged device, tables will\n   often have\
    \ to be broken across page boundaries. The THEAD, TFOOT and\n   TBODY elements\
    \ allow the user agent to repeat the table foot at the\n   bottom of the current\
    \ page, and then the table head at the top of\n   the new page before continuing\
    \ on with the table body.\n   TFOOT is placed before the TBODY in the markup sequence,\
    \ so that\n   browsers can render the foot before receiving all of the table data.\n\
    \   This is useful when very long tables are rendered with scrolling\n   body\
    \ sections, or for paged output, involving breaking the table\n   over many pages.\n\
    \   Each THEAD, TFOOT and TBODY element must contain one or more TR\n   elements.\n\
    \   ID, CLASS, LANG and DIR\n       See earlier description of common attributes.\n\
    \   ALIGN, CHAR, CHAROFF and VALIGN\n       Specify values for horizontal and\
    \ vertical alignment within\n       table cells. See inheritance order of alignment\
    \ properties.\n"
- title: Table Row (TR) elements
  contents:
  - "Table Row (TR) elements\n   <!ELEMENT tr - O (th|td)+>\n   <!ATTLIST tr     \
    \                  -- table row --\n           %attrs;                    -- id,\
    \ lang, dir and class --\n           %cell.halign;              -- horizontal\
    \ alignment in --\n                                      -- cells --\n       \
    \    %cell.valign;              -- vertical alignment in cells --\n          \
    \ >\n   The TR or table row element acts as a container for a row of table\n \
    \  cells. The end tag may be omitted.\n   ID, CLASS, LANG and DIR\n       See\
    \ earlier description of common attributes.\n   ALIGN, CHAR, CHAROFF and VALIGN\n\
    \       Specify values for horizontal and vertical alignment within\n       table\
    \ cells. See inheritance order of alignment properties.\n"
- title: 'Table Cells: TH and TD'
  contents:
  - "Table Cells: TH and TD\n   <!ELEMENT (th|td) - O %body.content>\n   <!ATTLIST\
    \ (th|td)                  -- header or data cell --\n           %attrs;     \
    \               -- id, lang, dir and class --\n           axis    CDATA    #IMPLIED\
    \  -- defaults to cell content --\n           axes    CDATA    #IMPLIED  -- list\
    \ of axis names --\n           nowrap (nowrap)  #IMPLIED  -- suppress word wrap\
    \ --\n           rowspan NUMBER   1         -- number of rows spanned by --\n\
    \                                      -- cell --\n           colspan NUMBER \
    \  1         -- number of cols spanned by --\n                               \
    \       -- cell --\n           %cell.halign;              -- horizontal alignment\
    \ in --\n                                      -- cells --\n           %cell.valign;\
    \              -- vertical alignment in cells --\n           >\n   TH elements\
    \ are used to represent header cells, while TD elements\n   are used to represent\
    \ data cells. This allows user agents to render\n   header and data cells distinctly,\
    \ even in the absence of style\n   sheets.\n   Cells can span multiple rows and\
    \ columns, and may be empty. Cells\n   spanning rows contribute to the column\
    \ count on each of the spanned\n   rows, but only appear in the markup once (in\
    \ the first row spanned).\n   The row count is determined by the number of TR\
    \ elements. Any rows\n   implied by cells spanning rows beyond this should be\
    \ ignored.\n   If the column count for the table is greater than the number of\n\
    \   cells for a given row (after including cells for spanned rows), the\n   missing\
    \ cells are treated as occurring on the right hand side of the\n   table and rendered\
    \ as empty cells. If the language context indicates\n   a right to left writing\
    \ order, then the missing cells should be\n   placed on the left hand side.\n\
    \   It is possible to create tables with overlapping cells, for\n   instance:\n\
    \       <table border>\n       <tr><td rowspan=2>1<td>2<td>3\n       <tr><td rowspan=2>4\n\
    \       <tr><td colspan=2>5<td>6\n       </table>\n   which might look something\
    \ like:\n       /-----------\\\n       | 1 | 2 | 3 |\n       |   |-------|\n \
    \      |   | 4 |   |\n       |---|...|---|\n       | 5 :   | 6 |\n       \\-----------/\n\
    \   In this example, the cells labelled 4 and 5 overlap. In such cases,\n   the\
    \ rendering is implementation dependent.\n   The AXIS and AXES attributes for\
    \ cells provide a means for defining\n   concise labels for cells. When rendering\
    \ to speech, these attributes\n   may be used to provide abbreviated names for\
    \ the headers relevant to\n   each cell. Another application is when you want\
    \ to be able to later\n   process table contents to enter them into a database.\
    \ These\n   attributes are then used to give database field names. The table's\n\
    \   class attribute should be used to let the software recognize which\n   tables\
    \ can be treated in this way.\n   ID, CLASS, LANG and DIR\n       See earlier\
    \ description of common attributes.\n   AXIS\n       This defines an abbreviated\
    \ name for a header cell, e.g. which\n       can be used when rendering to speech.\
    \ It defaults to the cell's\n       content.\n   AXES\n       This is a comma\
    \ separated list of axis names which together\n       identify the row and column\
    \ headers that pertain to this cell.\n       It is used for example when rendering\
    \ to speech to identify the\n       cell's position in the table. If missing the\
    \ user agent can try\n       to follow up columns and left along rows (right for\
    \ some\n       languages) to find the corresponding header cells.\n   NOWRAP,\
    \ e.g. <TD NOWRAP>\n       The presence of this attribute disables automatic wrapping\
    \ of\n       text lines for this cell. If used uncautiously, it may result in\n\
    \       excessively wide cells. This attribute is defined for backwards\n    \
    \   compatibility with deployed user agents. Greater control is\n       possible\
    \ with associated style sheet languages (for example for\n       control over\
    \ overflow handling).\n   ROWSPAN, e.g. <TD ROWSPAN=2>\n       A positive integer\
    \ value that defines how may rows this cell\n       spans. The default ROWSPAN\
    \ is 1. ROWSPAN=0 has a special\n       significance and implies that the cell\
    \ spans all rows from the\n       current row up to the last row of the table.\n\
    \   COLSPAN, e.g. <TD COLSPAN=2>\n       A positive integer value that defines\
    \ how may columns this cell\n       spans. The default COLSPAN is 1. COLSPAN=0\
    \ has a special\n       significance and implies that the cell spans all columns\
    \ from\n       the current column up to the last column of the table.\n   ALIGN,\
    \ CHAR, CHAROFF and VALIGN\n       Specify values for horizontal and vertical\
    \ alignment within\n       table cells. See inheritance order of alignment properties.\n\
    \   Note: It is recommended that implementors provide support for the\n   Netscape\
    \ 1.1 WIDTH attribute for TH and TD, although this isn't part\n   of the current\
    \ specification. Document authors are advised to use\n   the width attribute for\
    \ the COL element instead.\n"
- title: Recommended Layout Algorithms
  contents:
  - "Recommended Layout Algorithms\n   If the COLS attribute on the TABLE element\
    \ specifies the number of\n   columns, then the table may be rendered using a\
    \ fixed layout,\n   otherwise the autolayout algorithm described below should\
    \ be used.\n"
- title: Fixed Layout Algorithm
  contents:
  - "Fixed Layout Algorithm\n   For this algorithm, it is assumed that the number\
    \ of columns is\n   known. The column widths by default should be set to the same\
    \ size.\n   Authors may override this by specifying relative or absolute column\n\
    \   widths, using the COLGROUP or COL elements. The default table width\n   is\
    \ the space between the current left and right margins, but may be\n   overridden\
    \ by the WIDTH attribute on the TABLE element, or determined\n   from absolute\
    \ column widths. To deal with mixtures of absolute and\n   relative column widths,\
    \ the first step is to allocate space from the\n   table width to columns with\
    \ absolute widths. After this, the space\n   remaining is divided up between the\
    \ columns with relative widths.\n   The table syntax alone is insufficient to\
    \ guarantee the consistency\n   of attribute values. For instance, the number\
    \ of columns specified by\n   the COLS attribute may be inconsistent with the\
    \ number of columns\n   implied by the COL elements. This in turn, may be inconsistent\
    \ with\n   the number of columns implied by the table cells. A further problem\n\
    \   occurs when the columns are too narrow to avoid overflow of cell\n   contents.\
    \ The width of the table as specified by the TABLE element or\n   COL elements\
    \ may result in overflow of cell contents. It is\n   recommended that user agents\
    \ attempt to recover gracefully from these\n   situations, e.g. by hyphenating\
    \ words and resorting to splitting\n   words if hyphenation points are unknown.\n\
    \   In the event that an indivisible element causes cell overflow, the\n   user\
    \ agent may consider adjusting column widths and re-rendering the\n   table. In\
    \ the worst case clipping may be considered if column width\n   adjustments and/or\
    \ scrollable cell content are not feasible. In any\n   case if cell content is\
    \ split or clipped this should be indicated to\n   the user in an appropriate\
    \ manner.\n"
- title: Autolayout Algorithm
  contents:
  - "Autolayout Algorithm\n   If the COLS attribute is missing from the table start\
    \ tag, then the\n   user agent should use the following autolayout algorithm.\
    \ It uses two\n   passes through the table data and scales linearly with the size\
    \ of\n   the table.\n   In the first pass, line wrapping is disabled, and the\
    \ user agent\n   keeps track of the minimum and maximum width of each cell. The\n\
    \   maximum width is given by the widest line. As line wrap has been\n   disabled,\
    \ paragraphs are treated as long lines unless broken by <BR>\n   elements. The\
    \ minimum width is given by the widest word or image etc.\n   taking into account\
    \ leading indents and list bullets etc. In other\n   words, if you were to format\
    \ the cell's content in a window of its\n   own, determine the minimum width you\
    \ could make the window before the\n   cell begins to overflow. Allowing user\
    \ agents to split words will\n   minimize the need for horizontal scrolling or\
    \ in the worst case\n   clipping of cell contents.\n   This process also applies\
    \ to any nested tables occuring in cell\n   content. The minimum and maximum widths\
    \ for cells in nested tables\n   are used to determine the minimum and maximum\
    \ widths for these tables\n   and hence for the parent table cell itself. The\
    \ algorithm is linear\n   with aggregate cell content, and broadly speaking independent\
    \ of the\n   depth of nesting.\n   To cope with character alignment of cell contents,\
    \ the algorithm\n   keeps three running min/max totals for each column: Left of\
    \ align\n   char, right of align char and un-aligned. The minimum width for a\n\
    \   column is then: max(min_left + min_right, min_non-aligned).\n   The minimum\
    \ and maximum cell widths are then used to determine the\n   corresponding minimum\
    \ and maximum widths for the columns. These in\n   turn, are used to find the\
    \ minimum and maximum width for the table.\n   Note that cells can contain nested\
    \ tables, but this doesn't\n   complicate the code significantly. The next step\
    \ is to assign column\n   widths according to the available space (i.e. the space\
    \ between the\n   current left and right margins).\n   For cells which span multiple\
    \ columns, a simple approach, as used by\n   Arena, is to evenly apportion the\
    \ min/max widths to each of the\n   constituent columns. A slightly more complex\
    \ approach is to use the\n   min/max widths of unspanned cells to weight how spanned\
    \ widths are\n   apportioned. Experimental study suggests a blend of the two\n\
    \   approaches will give good results for a wide range of tables.\n   The table\
    \ borders and intercell margins need to be included in\n   assigning column widths.\
    \ There are three cases:\n   1.  The minimum table width is equal to or wider\
    \ than the available\n       space. In this case, assign the minimum widths and\
    \ allow the\n       user to scroll horizontally. For conversion to braille, it\
    \ will\n       be necessary to replace the cells by references to notes\n    \
    \   containing their full content. By convention these appear before\n       the\
    \ table.\n   2.  The maximum table width fits within the available space. In this\n\
    \       case, set the columns to their maximum widths.\n   3.  The maximum width\
    \ of the table is greater than the available\n       space, but the minimum table\
    \ width is smaller. In this case,\n       find the difference between the available\
    \ space and the minimum\n       table width, lets call it W. Lets also call D\
    \ the difference\n       between maximum and minimum width of the table.\n   \
    \    For each column, let d be the difference between maximum and\n       minimum\
    \ width of that column. Now set the column's width to the\n       minimum width\
    \ plus d times W over D. This makes columns with\n       large differences between\
    \ minimum and maximum widths wider than\n       columns with smaller differences.\n\
    \   This assignment step is then repeated for nested tables using the\n   minimum\
    \ and maximum widths derived for all such tables in the first\n   pass. In this\
    \ case, the width of the parent (i.e. enclosing) table\n   cell plays the role\
    \ of the current window size in the above\n   description. This process is repeated\
    \ recursively for all nested\n   tables. The topmost table is then rendered using\
    \ the assigned widths.\n   Nested tables are subsequently rendered as part of\
    \ the parent table's\n   cell contents.\n   If the table width is specified with\
    \ the WIDTH attribute, the user\n   agent attempts to set column widths to match.\
    \ The WIDTH attribute is\n   not binding if this results in columns having less\
    \ than their minimum\n   (i.e. indivisible) widths.\n   If relative widths are\
    \ specified with the COL element, the algorithm\n   is modified to increase column\
    \ widths over the minimum width to meet\n   the relative width constraints. The\
    \ COL elements should be taken as\n   hints only, so columns shouldn't be set\
    \ to less than their minimum\n   width. Similarly, columns shouldn't be made so\
    \ wide that the table\n   stretches well beyond the extent of the window. If a\
    \ COL element\n   specifies a relative width of zero, the column should always\
    \ be set\n   to its minimum width.\n"
- title: HTML Table DTD
  contents:
  - "HTML Table DTD\n   The DTD or document type definition provides the formal definition\
    \ of\n   the allowed syntax for HTML tables.\n"
- title: '<!-- Content model entities imported from parent DTD:'
  contents:
  - "<!-- Content model entities imported from parent DTD:\n  %body.content; allows\
    \ table cells to contain headers, paras,\n  lists, form elements and even arbitrarily\
    \ nested tables.\n  %text; is text characters, including character entities and\n\
    \  character emphasis elements, IMG and anchors\n"
- title: -->
  contents:
  - '-->

    '
- title: <!ENTITY % attrs
  contents:
  - "<!ENTITY % attrs\n       \"id      ID       #IMPLIED  -- element identifier --\n\
    \        class   NAMES    #IMPLIED  -- for subclassing elements --\n        lang\
    \    NAME     #IMPLIED  -- as per RFC 1766 --\n        dir   (ltr|rtl)  #IMPLIED\
    \  -- I18N text direction --\">\n"
- title: <!--
  contents:
  - "<!--\n The BORDER attribute sets the thickness of the frame around the\n table.\
    \ The default units are screen pixels.\n The FRAME attribute specifies which parts\
    \ of the frame around\n the table should be rendered. The values are not the same\
    \ as\n CALS to avoid a name clash with the VALIGN attribute.\n The value \"border\"\
    \ is included for backwards compatibility with\n  <TABLE BORDER> which yields\
    \ frame=border and border=implied\n  For <TABLE BORDER=1> you get border=1 and\
    \ frame=implied. In this\n case, its appropriate to treat this as frame=border\
    \ for backwards\n compatibility with deployed browsers.\n"
- title: -->
  contents:
  - '-->

    '
- title: <!ENTITY % Frame "(void|above|below|hsides|lhs|rhs|vsides|box|border)">
  contents:
  - '<!ENTITY % Frame "(void|above|below|hsides|lhs|rhs|vsides|box|border)">

    '
- title: <!--
  contents:
  - "<!--\n The RULES attribute defines which rules to draw between cells:\n If RULES\
    \ is absent then assume:\n     \"none\" if BORDER is absent or BORDER=0 otherwise\
    \ \"all\"\n"
- title: -->
  contents:
  - '-->

    '
- title: <!ENTITY % Rules "(none | groups | rows | cols | all)">
  contents:
  - '<!ENTITY % Rules "(none | groups | rows | cols | all)">

    '
- title: <!-- horizontal placement of table relative to window -->
  contents:
  - '<!-- horizontal placement of table relative to window -->

    '
- title: <!ENTITY % Where "(left|center|right)">
  contents:
  - '<!ENTITY % Where "(left|center|right)">

    '
- title: <!-- horizontal alignment attributes for cell contents -->
  contents:
  - '<!-- horizontal alignment attributes for cell contents -->

    '
- title: <!ENTITY % cell.halign
  contents:
  - "<!ENTITY % cell.halign\n        \"align  (left|center|right|justify|char) #IMPLIED\n\
    \         char    CDATA   #IMPLIED -- alignment char, e.g. char=':' --\n     \
    \    charoff CDATA   #IMPLIED -- offset for alignment char --\"\n        >\n"
- title: <!-- vertical alignment attributes for cell contents -->
  contents:
  - '<!-- vertical alignment attributes for cell contents -->

    '
- title: <!ENTITY % cell.valign
  contents:
  - "<!ENTITY % cell.valign\n        \"valign  (top|middle|bottom|baseline)  #IMPLIED\"\
    \n        >\n"
- title: <!ELEMENT table - - (caption?, (col*|colgroup*), thead?, tfoot?, t
  contents:
  - "<!ELEMENT table - - (caption?, (col*|colgroup*), thead?, tfoot?, t\n        \
    \            body+)>\n"
- title: <!ELEMENT caption - - (%text;)+>
  contents:
  - '<!ELEMENT caption - - (%text;)+>

    '
- title: <!ELEMENT thead - O (tr+)>
  contents:
  - '<!ELEMENT thead - O (tr+)>

    '
- title: <!ELEMENT tfoot - O (tr+)>
  contents:
  - '<!ELEMENT tfoot - O (tr+)>

    '
- title: <!ELEMENT tbody O O (tr+)>
  contents:
  - '<!ELEMENT tbody O O (tr+)>

    '
- title: <!ELEMENT colgroup - O (col*)>
  contents:
  - '<!ELEMENT colgroup - O (col*)>

    '
- title: <!ELEMENT col - O EMPTY>
  contents:
  - '<!ELEMENT col - O EMPTY>

    '
- title: <!ELEMENT tr - O (th|td)+>
  contents:
  - '<!ELEMENT tr - O (th|td)+>

    '
- title: <!ELEMENT (th|td) - O %body.content>
  contents:
  - '<!ELEMENT (th|td) - O %body.content>

    '
- title: <!ATTLIST table                    -- table element --
  contents:
  - "<!ATTLIST table                    -- table element --\n        %attrs;     \
    \               -- id, lang, dir and class --\n        align   %Where;  #IMPLIED\
    \  -- table position relative to --\n                                   -- window\
    \ --\n        width   CDATA    #IMPLIED  -- table width relative to window --\n\
    \        cols    NUMBER   #IMPLIED  -- used for immediate display mode --\n  \
    \      border  CDATA    #IMPLIED  -- controls frame width around --\n        \
    \                           -- table --\n        frame   %Frame;  #IMPLIED  --\
    \ which parts of table frame to --\n                                   -- include\
    \ --\n        rules   %Rules;  #IMPLIED  -- rulings between rows and cols --\n\
    \        cellspacing CDATA #IMPLIED -- spacing between cells --\n        cellpadding\
    \ CDATA #IMPLIED -- spacing within cells --\n        >\n"
- title: <!-- ALIGN is used here for compatibility with deployed browsers -->
  contents:
  - '<!-- ALIGN is used here for compatibility with deployed browsers -->

    '
- title: <!ENTITY % Caption "(top|bottom|left|right)">
  contents:
  - '<!ENTITY % Caption "(top|bottom|left|right)">

    '
- title: <!ATTLIST caption                  -- table caption --
  contents:
  - "<!ATTLIST caption                  -- table caption --\n        %attrs;     \
    \               -- id, lang, dir and class --\n        align  %Caption; #IMPLIED\
    \  -- relative to table --\n        >\n"
- title: <!--
  contents:
  - '<!--

    '
- title: COLGROUP groups a set of COL elements. It allows you to group
  contents:
  - 'COLGROUP groups a set of COL elements. It allows you to group

    '
- title: several columns together.
  contents:
  - 'several columns together.

    '
- title: -->
  contents:
  - '-->

    '
- title: <!ATTLIST colgroup
  contents:
  - "<!ATTLIST colgroup\n        %attrs;                    -- id, lang, dir and class\
    \ --\n        span    NUMBER   1         -- default number of columns in --\n\
    \                                   -- group --\n        width   CDATA    #IMPLIED\
    \  -- default width for enclosed COLs --\n        %cell.halign;              --\
    \ horizontal alignment in cells --\n        %cell.valign;              -- vertical\
    \ alignment in cells --\n        >\n"
- title: <!--
  contents:
  - "<!--\n COL elements define the alignment properties for cells in a given\n column\
    \ or spanned columns. The WIDTH attribute specifies the\n width of the columns,\
    \ e.g.\n     width=64        width in screen pixels\n     width=0.5*      relative\
    \ width of 0.5\n"
- title: -->
  contents:
  - '-->

    '
- title: <!ATTLIST col                      -- column groups and properties --
  contents:
  - "<!ATTLIST col                      -- column groups and properties --\n     \
    \   %attrs;                    -- id, lang, dir and class --\n        span   \
    \ NUMBER   1         -- number of columns spanned by --\n                    \
    \               -- group --\n        width   CDATA    #IMPLIED  -- column width\
    \ specification --\n        %cell.halign;              -- horizontal alignment\
    \ in cells --\n        %cell.valign;              -- vertical alignment in cells\
    \ --\n        >\n"
- title: <!--
  contents:
  - "<!--\n    Use THEAD to duplicate headers when breaking table\n    across page\
    \ boundaries, or for static headers when\n    body sections are rendered in scrolling\
    \ panel.\n    Use TFOOT to duplicate footers when breaking table\n    across page\
    \ boundaries, or for static footers when\n    body sections are rendered in scrolling\
    \ panel.\n    Use multiple TBODY sections when rules are needed\n    between groups\
    \ of table rows.\n"
- title: -->
  contents:
  - '-->

    '
- title: <!ATTLIST (thead|tbody|tfoot)      -- table section --
  contents:
  - "<!ATTLIST (thead|tbody|tfoot)      -- table section --\n        %attrs;     \
    \               -- id, lang, dir and class --\n        %cell.halign;         \
    \     -- horizontal alignment in cells --\n        %cell.valign;             \
    \ -- vertical alignment in cells --\n        >\n"
- title: <!ATTLIST tr                       -- table row --
  contents:
  - "<!ATTLIST tr                       -- table row --\n        %attrs;         \
    \           -- id, lang, dir and class --\n        %cell.halign;             \
    \ -- horizontal alignment in cells --\n        %cell.valign;              -- vertical\
    \ alignment in cells --\n        >\n"
- title: <!ATTLIST (th|td)                  -- header or data cell --
  contents:
  - "<!ATTLIST (th|td)                  -- header or data cell --\n        %attrs;\
    \                    -- id, lang, dir and class --\n        axis    CDATA    #IMPLIED\
    \  -- defaults to cell content --\n        axes    CDATA    #IMPLIED  -- list\
    \ of axis names --\n        nowrap (nowrap)  #IMPLIED  -- suppress word wrap --\n\
    \        rowspan NUMBER   1         -- number of rows spanned by cell --\n   \
    \     colspan NUMBER   1         -- number of cols spanned by cell --\n      \
    \  %cell.halign;              -- horizontal alignment in cells --\n        %cell.valign;\
    \              -- vertical alignment in cells --\n        >\n"
- title: References
  contents:
  - "References\n   Arena\n       W3C's HTML3 browser, see http://www.w3.org/pub/WWW/Arena/.\n\
    \       Arena was originally created as a proof of concept demo for\n       ideas\
    \ in the HTML+ specification that preceded HTML3. The\n       browser is now being\
    \ re-implemented to provide a reference\n       implementation of HTML3 along\
    \ with support for style sheets and\n       client-side scripting.\n   CALS\n\
    \       Continuous Acquisition and Life-Cycle Support (formerly\n       Computer-aided\
    \ Acquisition and Logistics Support) (CALS) is a\n       Department of Defense\
    \ (DoD) strategy for achieving effective\n       creation, exchange, and use of\
    \ digital data for weapon systems\n       and equipment. More information can\
    \ be found from the US Navy\n       CALS home page at http://navysgml.dt.navy.mil/cals.html\n\
    \   HTML 2.0 (RFC1866)\n       Hypertext Markup Language Specification Version\
    \ 2.0 by T.\n       Berners-Lee and D. Connolly, November 1995. Further information\n\
    \       can be found at http://www.w3.org/pub/WWW/MarkUp/ or at\n       ftp://ds.internic.net/rfc/rfc1866.txt\n\
    \   HTML 3.0\n       Hypertext Markup Language Specification Version 3.0. The\
    \ initial\n       draft specification as published in March 1995. Work on refining\n\
    \       HTML3 is proceeding piecemeal with the new table specification\n     \
    \  as one of the pieces. For W3C related work on HTML, see\n       http://www.w3.org/pub/WWW/MarkUp/.\n\
    \   RFC 1766\n       \"Tags for the Identification of Languages\", by H. Alvestrand,\n\
    \       UNINETT, March 1995. This document can be downloaded from\n       ftp://ds.internic.net/rfc/rfc1766.txt.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Dave Raggett W3C\n   EMail: dsr@w3.org\n   The World Wide\
    \ Web Consortium: http://www.w3.org/\n"
