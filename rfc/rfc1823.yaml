- title: __initial_text__
  contents:
  - '                 The LDAP Application Program Interface

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines a C language application program interface\
    \ to\n   the lightweight directory access protocol (LDAP). The LDAP API is\n \
    \  designed to be powerful, yet simple to use. It defines compatible\n   synchronous\
    \ and asynchronous interfaces to LDAP to suit a wide\n   variety of applications.\
    \  This document gives a brief overview of the\n   LDAP model, then an overview\
    \ of how the API is used by an application\n   program to obtain LDAP information.\
    \  The API calls are described in\n   detail, followed by an appendix that provides\
    \ some example code\n   demonstrating the use of the API.\n"
- title: 2.  Overview of the LDAP Model
  contents:
  - "2.  Overview of the LDAP Model\n   LDAP is the lightweight directory access protocol,\
    \ described in [2]\n   and [7]. It can provide a lightweight frontend to the X.500\
    \ directory\n   [1], or a stand-alone service. In either mode, LDAP is based on\
    \ a\n   client-server model in which a client makes a TCP connection to an\n \
    \  LDAP server, over which it sends requests and receives responses.\n   The LDAP\
    \ information model is based on the entry, which contains\n   information about\
    \ some object (e.g., a person).  Entries are composed\n   of attributes, which\
    \ have a type and one or more values. Each\n   attribute has a syntax that determines\
    \ what kinds of values are\n   allowed in the attribute (e.g., ASCII characters,\
    \ a jpeg photograph,\n   etc.) and how those values behave during directory operations\
    \ (e.g.,\n   is case significant during comparisons).\n   Entries are organized\
    \ in a tree structure, usually based on\n   political, geographical, and organizational\
    \ boundaries. Each entry is\n   uniquely named relative to its sibling entries\
    \ by its relative\n   distinguished name (RDN) consisting of one or more distinguished\n\
    \   attribute values from the entry.  At most one value from each\n   attribute\
    \ may be used in the RDN.  For example, the entry for the\n   person Babs Jensen\
    \ might be named with the \"Barbara Jensen\" value\n   from the commonName attribute.\
    \ A globally unique name for an entry,\n   called a distinguished name or DN,\
    \ is constructed by concatenating\n   the sequence of RDNs from the root of the\
    \ tree down to the entry. For\n   example, if Babs worked for the University of\
    \ Michigan, the DN of her\n   U-M entry might be \"cn=Barbara Jensen, o=University\
    \ of Michigan,\n   c=US\". The DN format used by LDAP is defined in [4].\n   Operations\
    \ are provided to authenticate, search for and retrieve\n   information, modify\
    \ information, and add and delete entries from the\n   tree.  The next sections\
    \ give an overview of how the API is used and\n   detailed descriptions of the\
    \ LDAP API calls that implement all of\n   these functions.\n"
- title: 3.  Overview of LDAP API Use
  contents:
  - "3.  Overview of LDAP API Use\n   An application generally uses the LDAP API in\
    \ four simple steps.\n   o    Open a connection to an LDAP server. The ldap_open()\
    \ call\n        returns a handle to the connection, allowing multiple\n      \
    \  connections to be open at once.\n   o    Authenticate to the LDAP server and/or\
    \ the X.500 DSA. The\n        ldap_bind() call and friends support a variety of\n\
    \        authentication methods.\n   o    Perform some LDAP operations and obtain\
    \ some results.\n        ldap_search() and friends return results which can be\
    \ parsed\n        by ldap_result2error(), ldap_first_entry(), ldap_next_entry(),\n\
    \        etc.\n   o    Close the connection. The ldap_unbind() call closes the\n\
    \        connection.\n   Operations can be performed either synchronously or asynchronously.\n\
    \   Synchronous calls end in _s. For example, a synchronous search can be\n  \
    \ completed by calling ldap_search_s(). An asynchronous search can be\n   initiated\
    \ by calling ldap_search(). All synchronous routines return\n   an indication\
    \ of the outcome of the operation (e.g, the constant\n   LDAP_SUCCESS or some\
    \ other error code).  The asynchronous routines\n   return the message id of the\
    \ operation initiated. This id can be used\n   in subsequent calls to ldap_result()\
    \ to obtain the result(s) of the\n   operation.  An asynchronous operation can\
    \ be abandoned by calling\n   ldap_abandon().\n   Results and errors are returned\
    \ in an opaque structure called\n   LDAPMessage.  Routines are provided to parse\
    \ this structure, step\n   through entries and attributes returned, etc. Routines\
    \ are also\n   provided to interpret errors. The next sections describe these\n\
    \   routines in more detail.\n"
- title: 4.  Calls for performing LDAP operations
  contents:
  - "4.  Calls for performing LDAP operations\n   This section describes each LDAP\
    \ operation API call in detail. All\n   calls take a \"connection handle\", a\
    \ pointer to an LDAP structure\n   containing per-connection information.  Many\
    \ routines return results\n   in an LDAPMessage structure. These structures and\
    \ others are\n   described as needed below.\n"
- title: 4.1.  Opening a connection
  contents:
  - "4.1.  Opening a connection\n   ldap_open() opens a connection to the LDAP server.\n\
    \              typedef struct ldap {\n                      /* ... opaque parameters\
    \ ... */\n                      int     ld_deref;\n                      int \
    \    ld_timelimit;\n                      int     ld_sizelimit;\n            \
    \          int     ld_errno;\n                      char    *ld_matched;\n   \
    \                   char    *ld_error;\n                      /* ... opaque parameters\
    \ ... */\n              } LDAP;\n              LDAP *ldap_open( char *hostname,\
    \ int portno );\n      Parameters are:\n      hostname Contains a space-separated\
    \ list of hostnames or dotted\n               strings representing the IP address\
    \ of hosts running an\n               LDAP server to connect to. The hosts are\
    \ tried in the\n               order listed, stopping with the first one to which\
    \ a\n               successful connection is made;\n      portno   contains the\
    \ TCP port number to which to connect. The\n               default LDAP port can\
    \ be obtained by supplying the\n               constant LDAP_PORT.\n   ldap_open()\
    \ returns a \"connection handle\", a pointer to an LDAP\n   structure that should\
    \ be passed to subsequent calls pertaining to the\n   connection. It returns NULL\
    \ if the connection cannot be opened. One\n   of the ldap_bind calls described\
    \ below must be completed before other\n   operations can be performed on the\
    \ connection.\n   The calling program should assume nothing about the order of\
    \ the\n   fields in the LDAP structure. There may be other fields in the\n   structure\
    \ for internal library use. The fields shown above are\n   described as needed\
    \ in the description of other calls below.\n"
- title: 4.2.  Authenticating to the directory
  contents:
  - "4.2.  Authenticating to the directory\n   ldap_bind() and friends are used to\
    \ authenticate to the directory.\n           int ldap_bind( LDAP *ld, char *dn,\
    \ char *cred, int method );\n           int ldap_bind_s( LDAP *ld, char *dn, char\
    \ *cred, int method );\n           int ldap_simple_bind( LDAP *ld, char *dn, char\
    \ *passwd );\n           int ldap_simple_bind_s( LDAP *ld, char *dn, char *passwd\
    \ );\n           int ldap_kerberos_bind( LDAP *ld, char *dn );\n           int\
    \ ldap_kerberos_bind_s( LDAP *ld, char *dn );\n   Parameters are:\n   ld     The\
    \ connection handle;\n   dn     The name of the entry to bind as;\n   cred   The\
    \ credentials with which to authenticate;\n   method One of LDAP_AUTH_SIMPLE,\
    \ LDAP_AUTH_KRBV41, or\n          LDAP_AUTH_KRBV42, indicating the authentication\
    \ method to use;\n   passwd For ldap_simple_bind(), the password to compare to\
    \ the entry's\n          userPassword attribute;\n   There are three types of\
    \ bind calls, providing simple authentication,\n   kerberos authentication, and\
    \ general routines to do either one. In\n   the case of Kerberos version 4 authentication\
    \ using the general\n   ldap_bind() routines, the credentials are ignored, as\
    \ the routines\n   assume a valid ticket granting ticket already exists which\
    \ can be\n   used to retrieve the appropriate service tickets.\n   Synchronous\
    \ versions of the routines have names that end in _s.\n   These routines return\
    \ the result of the bind operation, either the\n   constant LDAP_SUCCESS if the\
    \ operation was successful, or another\n   LDAP error code if it was not. See\
    \ the section below on error\n   handling for more information about possible\
    \ errors and how to\n   interpret them.\n   Asynchronous versions of these routines\
    \ return the message id of the\n   bind operation initiated. A subsequent call\
    \ to ldap_result(),\n   described below, can be used to obtain the result of the\
    \ bind. In\n   case of error, these routines will return -1, setting the ld_errno\n\
    \   field in the LDAP structure appropriately.\n   Note that no other operations\
    \ over the connection should be attempted\n   before a bind call has successfully\
    \ completed. Subsequent bind calls\n   can be used to re-authenticate over the\
    \ same connection.\n"
- title: 4.3.  Closing the connection
  contents:
  - "4.3.  Closing the connection\n   ldap_unbind() is used to unbind from the directory\
    \ and close the\n   connection.\n           int ldap_unbind( LDAP *ld );\n   Parameters\
    \ are:\n      ld   The connection handle.\n   ldap_unbind() works synchronously,\
    \ unbinding from the directory,\n   closing the connection, and freeing up the\
    \ ld structure before\n   returning. ldap_unbind() returns LDAP_SUCCESS (or another\
    \ LDAP error\n   code if the request cannot be sent to the LDAP server).  After\
    \ a call\n   to ldap_unbind(), the ld connection handle is invalid.\n"
- title: 4.4.  Searching
  contents:
  - "4.4.  Searching\n   ldap_search() and friends are used to search the LDAP directory,\n\
    \   returning a requested set of attributes for each entry matched.\n   There\
    \ are three variations.\n           struct timeval {\n                   long\
    \    tv_sec;\n                   long    tv_usec;\n           };\n           int\
    \ ldap_search(\n                   LDAP    *ld,\n                   char    *base,\n\
    \                   int     scope,\n                   char    *filter,\n    \
    \               char    *attrs[],\n                   int     attrsonly\n    \
    \       );\n           int ldap_search_s(\n                   LDAP           \
    \ *ld,\n                   char            *base,\n                   int    \
    \         scope,\n                   char            *filter,\n              \
    \     char            *attrs[],\n                   int             attrsonly,\n\
    \                   LDAPMessage     **res\n           );\n           int ldap_search_st(\n\
    \                   LDAP            *ld,\n                   char            *base,\n\
    \                   int             scope,\n                   char          \
    \  *filter,\n                   char            *attrs[],\n                  \
    \ int             attrsonly,\n                   struct timeval  *timeout,\n \
    \                  LDAPMessage     **res\n           );\n   Parameters are:\n\
    \   ld        The connection handle;\n   base      The dn of the entry at which\
    \ to start the search;\n   scope     One of LDAP_SCOPE_BASE, LDAP_SCOPE_ONELEVEL,\
    \ or\n             LDAP_SCOPE_SUBTREE, indicating the scope of the search;\n \
    \  filter    A character string as described in RFC 1558 [3],\n             representing\
    \ the search filter;\n   attrs     A NULL-terminated array of strings indicating\
    \ which\n             attributes to return for each matching entry. Passing\n\
    \             NULL for this parameter causes all available attributes\n      \
    \       to be retrieved;\n   attrsonly A boolean value that should be zero if\
    \ both attribute\n             types and values are to be returned, non-zero if\
    \ only\n             types are wanted;\n   timeout   For the ldap_search_st()\
    \ call, this specifies the local\n             search timeout value;\n   res \
    \      For the synchronous calls, this is a result parameter\n             which\
    \ will contain the results of the search upon\n             completion of the\
    \ call.\n   There are three fields in the ld connection handle which control how\n\
    \   the search is performed. They are:\n   ld_sizelimit A limit on the number\
    \ of entries to return from the\n                search. A value of zero means\
    \ no limit;\n   ld_timelimit A limit on the number of seconds to spend on the\
    \ search.\n                A value of zero means no limit;\n   ld_deref     One\
    \ of LDAP_DEREF_NEVER, LDAP_DEREF_SEARCHING,\n                LDAP_DEREF_FINDING,\
    \ or LDAP_DEREF_ALWAYS, specifying\n                how aliases should be handled\
    \ during the search. The\n                LDAP_DEREF_SEARCHING value means aliases\
    \ should be\n                dereferenced during the search but not when locating\n\
    \                the base object of the search. The LDAP_DEREF_FINDING\n     \
    \           value means aliases should be dereferenced when\n                locating\
    \ the base object but not during the search.\n   An asynchronous search is initiated\
    \ by calling ldap_search(). It\n   returns the message id of the initiated search.\
    \ The results of the\n   search can be obtained by a subsequent call to ldap_result().\
    \  The\n   results can be parsed by the result parsing routines described in\n\
    \   detail later.  In case of error, -1 is returned and the ld_errno\n   field\
    \ in the LDAP structure is set appropriately.\n   A synchronous search is performed\
    \ by calling ldap_search_s() or\n   ldap_search_st(). The routines are identical,\
    \ except that\n   ldap_search_st() takes an additional parameter specifying a\
    \ timeout\n   for the search.  Both routines return an indication of the result\
    \ of\n   the search, either LDAP_SUCCESS or some error indication (see Error\n\
    \   Handling below).  The entries returned from the search (if any) are\n   contained\
    \ in the res parameter. This parameter is opaque to the\n   caller.  Entries,\
    \ attributes, values, etc., should be extracted by\n   calling the parsing routines\
    \ described below. The results contained\n   in res should be freed when no longer\
    \ in use by calling\n   ldap_msgfree(), described later.\n"
- title: 4.5.  Reading an entry
  contents:
  - "4.5.  Reading an entry\n   LDAP does not support a read operation directly. Instead,\
    \ this\n   operation is emulated by a search with base set to the DN of the\n\
    \   entry to read, scope set to LDAP_SCOPE_BASE, and filter set to\n   \"(objectclass=*)\"\
    . attrs contains the list of attributes to return.\n"
- title: 4.6.  Listing the children of an entry
  contents:
  - "4.6.  Listing the children of an entry\n   LDAP does not support a list operation\
    \ directly. Instead, this\n   operation is emulated by a search with base set\
    \ to the DN of the\n   entry to list, scope set to LDAP_SCOPE_ONELEVEL, and filter\
    \ set to\n   \"(objectclass=*)\". attrs contains the list of attributes to return\n\
    \   for each child entry.\n"
- title: 4.7.  Modifying an entry
  contents:
  - "4.7.  Modifying an entry\n   The ldap_modify() and ldap_modify_s() routines are\
    \ used to modify an\n   existing LDAP entry.\n           typedef struct ldapmod\
    \ {\n                   int             mod_op;\n                   char     \
    \       *mod_type;\n                   union {\n                           char\
    \            **modv_strvals;\n                           struct berval   **modv_bvals;\n\
    \                   } mod_vals;\n           } LDAPMod;\n           #define mod_values\
    \      mod_vals.modv_strvals\n           #define mod_bvalues     mod_vals.modv_bvals\n\
    \           int ldap_modify( LDAP *ld, char *dn, LDAPMod *mods[] );\n        \
    \   int ldap_modify_s( LDAP *ld, char *dn, LDAPMod *mods[] );\n   Parameters are:\n\
    \   ld       The connection handle;\n   dn       The name of the entry to modify;\n\
    \   mods     A NULL-terminated array of modifications to make to the\n       \
    \     entry.\n   The fields in the LDAPMod structure have the following meanings:\n\
    \   mod_op   The modification operation to perform. It should be one of\n    \
    \        LDAP_MOD_ADD, LDAP_MOD_DELETE, or LDAP_MOD_REPLACE. This\n          \
    \  field also indicates the type of values included in the\n            mod_vals\
    \ union. It is ORed with LDAP_MOD_BVALUES to select\n            the mod_bvalues\
    \ form. Otherwise, the mod_values form is\n            used;\n   mod_type The\
    \ type of the attribute to modify;\n   mod_vals The values (if any) to add, delete,\
    \ or replace. Only one of\n            the mod_values or mod_bvalues variants\
    \ should be used,\n            selected by ORing the mod_op field with the constant\n\
    \            LDAP_MOD_BVALUES. mod_values is a NULL-terminated array of\n    \
    \        zero-terminated strings and mod_bvalues is a NULL-terminated\n      \
    \      array of berval structures that can be used to pass binary\n          \
    \  values such as images.\n   For LDAP_MOD_ADD modifications, the given values\
    \ are added to the\n   entry, creating the attribute if necessary.  For LDAP_MOD_DELETE\n\
    \   modifications, the given values are deleted from the entry, removing\n   the\
    \ attribute if no values remain.  If the entire attribute is to be\n   deleted,\
    \ the mod_vals field should be set to NULL.  For\n   LDAP_MOD_REPLACE modifications,\
    \ the attribute will have the listed\n   values after the modification, having\
    \ been created if necessary.  All\n   modifications are performed in the order\
    \ in which they are listed.\n   ldap_modify_s() returns the LDAP error code  resulting\
    \  from the\n   modify  operation.   This  code  can  be interpreted by ldap_perror()\n\
    \   and friends.\n   ldap_modify() returns the message id of the request it initiates,\
    \ or\n   -1 on error.  The result of the operation can be obtained by calling\n\
    \   ldap_result().\n"
- title: 4.8.  Modifying the RDN of an entry
  contents:
  - "4.8.  Modifying the RDN of an entry\n   The ldap_modrdn() and ldap_modrdn_s()\
    \ routines are used to change the\n   name of an LDAP entry.\n           int ldap_modrdn(\n\
    \                   LDAP    *ld,\n                   char    *dn,\n          \
    \         char    *newrdn,\n                   int     deleteoldrdn\n        \
    \   );\n           int ldap_modrdn_s(\n                   LDAP    *ld,\n     \
    \              char    *dn,\n                   char    *newrdn,\n           \
    \        int     deleteoldrdn\n           );\n   Parameters are:\n   ld      \
    \      The connection handle;\n   dn            The name of the entry whose RDN\
    \ is to be changed;\n   newrdn        The new RDN to give the entry;\n   deleteoldrdn\
    \  A boolean value, if non-zero indicating that the old\n                 RDN\
    \ value(s) should be removed, if zero indicating that\n                 the old\
    \ RDN value(s) should be retained as non-\n                 distinguished values\
    \ of the entry.\n   The ldap_modrdn_s() routine is synchronous, returning the\
    \ LDAP error\n   code indicating the outcome of the operation.\n   The ldap_modrdn()\
    \ routine is asynchronous, returning the message id\n   of the operation it initiates,\
    \ or -1 in case of trouble. The result\n   of the operation can be obtained by\
    \ calling ldap_result().\n"
- title: 4.9.  Adding an entry
  contents:
  - "4.9.  Adding an entry\n   ldap_add() and ldap_add_s() are used to add entries\
    \ to the LDAP\n   directory.\n           int ldap_add( LDAP *ld, char *dn, LDAPMod\
    \ *attrs[] );\n           int ldap_add_s( LDAP *ld, char *dn, LDAPMod *attrs[]\
    \ );\n   Parameters are:\n   ld    The connection handle;\n   dn    The name of\
    \ the entry to add;\n   attrs The entry's attributes, specified using the LDAPMod\
    \ structure\n         defined for ldap_modify(). The mod_type and mod_vals fields\n\
    \         should be filled in.  The mod_op field is ignored unless ORed\n    \
    \     with the constant LDAP_MOD_BVALUES, used to select the\n         mod_bvalues\
    \ case of the mod_vals union.\n   Note that the parent of the entry must already\
    \ exist.\n   ldap_add_s() is synchronous, returning the LDAP error code indicating\n\
    \   the outcome of the operation.\n   ldap_add() is asynchronous, returning the\
    \ message id of the operation\n   it initiates, or -1 in case of trouble. The\
    \ result of the operation\n   can be obtained by calling ldap_result().\n"
- title: 4.10.  Deleting an entry
  contents:
  - "4.10.  Deleting an entry\n   ldap_delete() and ldap_delete_s() are used to delete\
    \ entries from the\n   LDAP directory.\n           int ldap_delete( LDAP *ld,\
    \ char *dn );\n           int ldap_delete_s( LDAP *ld, char *dn );\n   Parameters\
    \ are:\n   ld       The connection handle;\n   dn       The name of the entry\
    \ to delete.\n   Note that the entry to delete must be a leaf entry (i.e., it\
    \ must\n   have no children). Deletion of entire subtrees is not supported by\n\
    \   LDAP.\n   ldap_delete_s() is synchronous, returning the LDAP error code\n\
    \   indicating the outcome of the operation.\n   ldap_delete() is asynchronous,\
    \ returning the message id of the\n   operation it initiates, or -1 in case of\
    \ trouble. The result of the\n   operation can be obtained by calling ldap_result().\n"
- title: 5.  Calls for abandoning an operation
  contents:
  - "5.  Calls for abandoning an operation\n   ldap_abandon() is used to abandon an\
    \ operation in progress.\n           int ldap_abandon( LDAP *ld, int msgid );\n\
    \   ldap_abandon() abandons the operation with message id msgid. It\n   returns\
    \ zero if the abandon was successful, -1 otherwise. After a\n   successful call\
    \ to ldap_abandon(), results with the given message id\n   are never returned\
    \ from a call to ldap_result().\n"
- title: 6.  Calls for obtaining results
  contents:
  - "6.  Calls for obtaining results\n   ldap_result() is used to obtain the result\
    \ of a previous\n   asynchronously initiated operation. ldap_msgfree() frees the\
    \ results\n   obtained from a previous call to ldap_result(), or a synchronous\n\
    \   search routine.\n           int ldap_result(\n                   LDAP    \
    \        *ld,\n                   int             msgid,\n                   int\
    \             all,\n                   struct timeval  *timeout,\n           \
    \        LDAPMessage     **res\n           );\n           int ldap_msgfree( LDAPMessage\
    \ *res );\n   Parameters are:\n   ld       The connection handle;\n   msgid  \
    \  The message id of the operation whose results are to be\n            returned,\
    \ or the constant LDAP_RES_ANY if any result is\n            desired;\n   all\
    \      A boolean parameter that only has meaning for search\n            results.\
    \ If non-zero it indicates that all results of a\n            search should be\
    \ retrieved before any are returned. If zero,\n            search results (entries)\
    \ will be returned one at a time as\n            they arrive;\n   timeout  A timeout\
    \ specifying how long to wait for results to be\n            returned.  A NULL\
    \ value causes ldap_result() to block until\n            results are available.\
    \  A timeout value of zero second\n            specifies a polling behavior;\n\
    \   res      For ldap_result(), a result parameter that will contain the\n   \
    \         result(s) of the operation. For ldap_msgfree(), the result\n       \
    \     chain to be freed, obtained from a previous call to\n            ldap_result()\
    \ or ldap_search_s() or ldap_search_st().\n   Upon successful completion, ldap_result()\
    \ returns the type of the\n   result returned in the res parameter. This will\
    \ be one of the\n   following constants.\n             LDAP_RES_BIND\n       \
    \      LDAP_RES_SEARCH_ENTRY\n             LDAP_RES_SEARCH_RESULT\n          \
    \   LDAP_RES_MODIFY\n             LDAP_RES_ADD\n             LDAP_RES_DELETE\n\
    \             LDAP_RES_MODRDN\n             LDAP_RES_COMPARE\n   ldap_result()\
    \ returns 0 if the timeout expired and -1 if an error\n   occurs, in which case\
    \ the ld_errno field of the ld structure will be\n   set accordingly.\n   ldap_msgfree()\
    \ frees the result structure pointed to be res and\n   returns the type of the\
    \ message it freed.\n"
- title: 7.  Calls for error handling
  contents:
  - "7.  Calls for error handling\n   The following calls are used to interpret errors\
    \ returned by other\n   LDAP API routines.\n           int ldap_result2error(\n\
    \                   LDAP            *ld,\n                   LDAPMessage     *res,\n\
    \                   int             freeit\n           );\n           char *ldap_err2string(\
    \ int err );\n           void ldap_perror( LDAP *ld, char *msg );\n   Parameters\
    \ are:\n   ld       The connection handle;\n   res      The result of an LDAP\
    \ operation as returned by ldap_result()\n            or one of the synchronous\
    \ API operation calls;\n   freeit   A boolean parameter indicating whether the\
    \ res parameter\n            should be freed (non-zero) or not (zero);\n   err\
    \      An LDAP error code, as returned by ldap_result2error() or\n           \
    \ one of the synchronous API operation calls;\n   msg      A message to be displayed\
    \ before the LDAP error message.\n   ldap_result2error() is used to convert the\
    \ LDAP result message\n   obtained from ldap_result(), or the res parameter returned\
    \ by one of\n   the synchronous API operation calls, into a numeric LDAP error\
    \ code.\n   It also parses the ld_matched and ld_error portions of the result\n\
    \   message and puts them into the connection handle information. All the\n  \
    \ synchronous operation routines call ldap_result2error() before\n   returning,\
    \ ensuring that these fields are set correctly. The relevant\n   fields in the\
    \ connection structue are:\n   ld_matched In the event of an LDAP_NO_SUCH_OBJECT\
    \ error return, this\n              parameter contains the extent of the DN matched;\n\
    \   ld_error   This parameter contains the error message sent in the\n       \
    \       result by the LDAP server.\n   ld_errno   The LDAP error code indicating\
    \ the outcome of the\n              operation. It is one of the following constants:\n\
    \           LDAP_SUCCESS\n           LDAP_OPERATIONS_ERROR\n           LDAP_PROTOCOL_ERROR\n\
    \           LDAP_TIMELIMIT_EXCEEDED\n           LDAP_SIZELIMIT_EXCEEDED\n    \
    \       LDAP_COMPARE_FALSE\n           LDAP_COMPARE_TRUE\n           LDAP_STRONG_AUTH_NOT_SUPPORTED\n\
    \           LDAP_STRONG_AUTH_REQUIRED\n           LDAP_NO_SUCH_ATTRIBUTE\n   \
    \        LDAP_UNDEFINED_TYPE\n           LDAP_INAPPROPRIATE_MATCHING\n       \
    \    LDAP_CONSTRAINT_VIOLATION\n           LDAP_TYPE_OR_VALUE_EXISTS\n       \
    \    LDAP_INVALID_SYNTAX\n           LDAP_NO_SUCH_OBJECT\n           LDAP_ALIAS_PROBLEM\n\
    \           LDAP_INVALID_DN_SYNTAX\n           LDAP_IS_LEAF\n           LDAP_ALIAS_DEREF_PROBLEM\n\
    \           LDAP_INAPPROPRIATE_AUTH\n           LDAP_INVALID_CREDENTIALS\n   \
    \        LDAP_INSUFFICIENT_ACCESS\n           LDAP_BUSY\n           LDAP_UNAVAILABLE\n\
    \           LDAP_UNWILLING_TO_PERFORM\n           LDAP_LOOP_DETECT\n         \
    \  LDAP_NAMING_VIOLATION\n           LDAP_OBJECT_CLASS_VIOLATION\n           LDAP_NOT_ALLOWED_ON_NONLEAF\n\
    \           LDAP_NOT_ALLOWED_ON_RDN\n           LDAP_ALREADY_EXISTS\n        \
    \   LDAP_NO_OBJECT_CLASS_MODS\n           LDAP_RESULTS_TOO_LARGE\n           LDAP_OTHER\n\
    \           LDAP_SERVER_DOWN\n           LDAP_LOCAL_ERROR\n           LDAP_ENCODING_ERROR\n\
    \           LDAP_DECODING_ERROR\n           LDAP_TIMEOUT\n           LDAP_AUTH_UNKNOWN\n\
    \           LDAP_FILTER_ERROR\n           LDAP_USER_CANCELLED\n           LDAP_PARAM_ERROR\n\
    \           LDAP_NO_MEMORY\n   ldap_err2string() is used to convert a numeric\
    \ LDAP error code, as\n   returned by ldap_result2error() or one of the synchronous\
    \ API\n   operation calls, into an informative NULL-terminated character string\n\
    \   message describing the error.  It returns a pointer to static data.\n   ldap_perror()\
    \ is used to print the message supplied in msg, followed\n   by an indication\
    \ of the error contained in the ld_errno field of the\n   ld connection handle,\
    \ to standard error.\n"
- title: 8.  Calls for parsing search entries
  contents:
  - "8.  Calls for parsing search entries\n   The following calls are used to parse\
    \ the entries returned by\n   ldap_search() and friends. These entries are returned\
    \ in an opaque\n   structure that should only be accessed by calling the routines\n\
    \   described below. Routines are provided to step through the entries\n   returned,\
    \ step through the attributes of an entry, retrieve the name\n   of an entry,\
    \ and retrieve the values associated with a given\n   attribute in an entry.\n"
- title: 8.1.  Stepping through a set of entries
  contents:
  - "8.1.  Stepping through a set of entries\n   The ldap_first_entry() and ldap_next_entry()\
    \ routines are used to\n   step through a set of entries in a search result.\n\
    \   ldap_count_entries() is used to count the number of entries returned.\n  \
    \         LDAPMesage *ldap_first_entry( LDAP *ld, LDAPMessage *res );\n      \
    \     LDAPMesage *ldap_next_entry( LDAP *ld, LDAPMessage *entry );\n         \
    \  int ldap_count_entries( LDAP *ld, LDAPMessage *res );\n   Parameters are:\n\
    \   ld     The connection handle;\n   res    The search result, as obtained by\
    \ a call to one of the syn-\n          chronous search routines or ldap_result();\n\
    \   entry  The entry returned by a previous call to ldap_first_entry() or\n  \
    \        ldap_next_entry().\n   ldap_first_entry() and ldap_next_entry() will\
    \ return NULL when no\n   more entries exist to be returned. NULL is also returned\
    \ if an error\n   occurs while stepping through the entries, in which case the\
    \ ld_errno\n   field of the ld connection handle will be set to indicate the error.\n\
    \   ldap_count_entries() returns the number of entries contained in a\n   chain\
    \ of entries. It can also be used to count the number of entries\n   that remain\
    \ in a chain if called with an entry returned by\n   ldap_first_entry() or ldap_next_entry().\n"
- title: 8.2.  Stepping through the attributes of an entry
  contents:
  - "8.2.  Stepping through the attributes of an entry\n   The ldap_first_attribute()\
    \ and ldap_next_attribute() calls are used\n   to step through the list of attribute\
    \ types returned with an entry.\n           char *ldap_first_attribute(\n    \
    \               LDAP            *ld,\n                   LDAPMessage     *entry,\n\
    \                   void            **ptr\n           );\n           char *ldap_next_attribute(\n\
    \                   LDAP            *ld,\n                   LDAPMessage     *entry,\n\
    \                   void            *ptr\n           );\n   Parameters are:\n\
    \   ld     The connection handle;\n   entry  The entry whose attributes are to\
    \ be stepped through, as\n          returned by ldap_first_entry() or ldap_next_entry();\n\
    \   ptr    In ldap_first_attribute(), the address of a pointer used\n        \
    \  internally to keep track of the current position in the entry.\n          In\
    \ ldap_next_attribute(), the pointer returned by a previous\n          call to\
    \ ldap_first_attribute().\n   ldap_first_attribute() and ldap_next_attribute()\
    \ will return NULL\n   when the end of the attributes is reached, or if there\
    \ is an error,\n   in which case the ld_errno field in the ld connection handle\
    \ will be\n   set to indicate the error.\n   Both routines return a pointer to\
    \ a per-connection buffer containing\n   the current attribute name. This should\
    \ be treated like static data.\n   ldap_first_attribute() will allocate and return\
    \ in ptr a pointer to a\n   BerElement used to keep track of the current position.\
    \ This pointer\n   should be passed in subsequent calls to ldap_next_attribute()\
    \ to step\n   through the entry's attributes.\n   The attribute names returned\
    \ are suitable for passing in a call to\n   ldap_get_values() and friends to retrieve\
    \ the associated values.\n"
- title: 8.3.  Retrieving the values of an attribute
  contents:
  - "8.3.  Retrieving the values of an attribute\n   ldap_get_values() and ldap_get_values_len()\
    \ are used to retrieve the\n   values of a given attribute from an entry. ldap_count_values()\
    \ and\n   ldap_count_values_len() are used to count the returned values.\n   ldap_value_free()\
    \ and ldap_value_free_len() are used to free the\n   values.\n           typedef\
    \ struct berval {\n                   unsigned long   bv_len;\n              \
    \     char            *bv_val;\n           };\n           char **ldap_get_values(\n\
    \                   LDAP            *ld,\n                   LDAPMessage     *entry,\n\
    \                   char            *attr\n           );\n           struct berval\
    \ **ldap_get_values_len(\n                   LDAP            *ld,\n          \
    \         LDAPMessage     *entry,\n                   char            *attr\n\
    \           );\n           int ldap_count_values( char **vals );\n           int\
    \ ldap_count_values_len( struct berval **vals );\n           int ldap_value_free(\
    \ char **vals );\n           int ldap_value_free_len( struct berval **vals );\n\
    \   Parameters are:\n   ld     The connection handle;\n   entry  The entry from\
    \ which to retrieve values, as returned by\n          ldap_first_entry() or ldap_next_entry();\n\
    \   attr   The attribute whose values are to be retrieved, as returned by\n  \
    \        ldap_first_attribute() or ldap_next_attribute(), or a caller-\n     \
    \     supplied string (e.g., \"mail\");\n   vals   The values returned by a previous\
    \ call to ldap_get_values() or\n          ldap_get_values_len().\n   Two forms\
    \ of the various calls are provided. The first form is only\n   suitable for use\
    \ with non-binary character string data only. The\n   second _len form is used\
    \ with any kind of data.\n   Note that the values returned are malloc'ed and should\
    \ be freed by\n   calling either ldap_value_free() or ldap_value_free_len() when\
    \ no\n   longer in use.\n"
- title: 8.4.  Retrieving the name of an entry
  contents:
  - "8.4.  Retrieving the name of an entry\n   ldap_get_dn() is used to retrieve the\
    \ name of an entry.\n   ldap_explode_dn() is used to break up the name into its\
    \ component\n   parts. ldap_dn2ufn() is used to convert the name into a more \"\
    user\n   friendly\" format.\n           char *ldap_get_dn( LDAP *ld, LDAPMessage\
    \ *entry );\n           char **ldap_explode_dn( char *dn, int notypes );\n   \
    \        char *ldap_dn2ufn( char *dn );\n   Parameters are:\n   ld      The connection\
    \ handle;\n   entry   The entry whose name is to be retrieved, as returned by\n\
    \           ldap_first_entry() or ldap_next_entry();\n   dn      The dn to explode,\
    \ as returned by ldap_get_dn();\n   notypes A boolean parameter, if non-zero indicating\
    \ that the dn com-\n           ponents should have their type information stripped\
    \ off\n           (i.e., \"cn=Babs\" would become \"Babs\").\n   ldap_get_dn()\
    \ will return NULL if there is some error parsing the dn,\n   setting ld_errno\
    \ in the ld connection handle to indicate the error.\n   It returns a pointer\
    \ to malloc'ed space that the caller should free\n   by calling free() when it\
    \ is no longer in use.  Note the format of\n   the DNs returned is given by [4].\n\
    \   ldap_explode_dn() returns a char * array containing the RDN\n   components\
    \ of the DN supplied, with or without types as indicated by\n   the notypes parameter.\
    \ The array returned should be freed when it is\n   no longer in use by calling\
    \ ldap_value_free().\n   ldap_dn2ufn() converts the DN into the user friendly\
    \ format described\n   in [5]. The UFN returned is malloc'ed space that should\
    \ be freed by a\n   call to free() when no longer in use.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   LDAP supports minimal security during connection\
    \ authentication.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   This material is based upon work supported by the National\
    \ Science\n   Foundation under Grant No. NCR-9416667.\n"
- title: 11.  Bibliography
  contents:
  - "11.  Bibliography\n   [1] The Directory: Selected Attribute Syntaxes.  CCITT,\n\
    \       Recommendation X.520.\n   [2] Howes, T., Kille, S., Yeong, W., and C.\
    \ Robbins, \"The String\n       Representation of Standard Attribute Syntaxes\"\
    , University of\n       Michigan, ISODE Consortium, Performance Systems International,\n\
    \       NeXor Ltd., RFC 1778, March 1995.\n   [3] Howes, T., \"A String Representation\
    \ of LDAP Search Filters\", RFC\n       1558, University of Michigan, December\
    \ 1993.\n   [4] Kille, S., \"A String Representation of Distinguished Names\"\
    , RFC\n       1779, ISODE Consortium, March 1995.\n   [5] Kille, S., \"Using the\
    \ OSI Directory to Achieve User Friendly\n       Naming\",  RFC 1781, ISODE Consortium,\
    \ March 1995.\n   [6] S.P. Miller, B.C. Neuman, J.I. Schiller, J.H. Saltzer, \"\
    Kerberos\n       Authentication and Authorization System\", MIT Project Athena\n\
    \       Documentation Section  E.2.1, December 1987\n   [7] Yeong, W., Howes,\
    \ T., and S. Kille, \"Lightweight Directory Access\n       Protocol,\" RFC 1777,\
    \ Performance Systems International,\n       University of Michigan, ISODE Consortium,\
    \ March 1995.\n"
- title: 12.  Authors' Addresses
  contents:
  - "12.  Authors' Addresses\n       Tim Howes\n       University of Michigan\n  \
    \     ITD Research Systems\n       535 W William St.\n       Ann Arbor, MI 48103-4943\n\
    \       USA\n       Phone: +1 313 747-4454\n       EMail: tim@umich.edu\n    \
    \   Mark Smith\n       University of Michigan\n       ITD Research Systems\n \
    \      535 W William St.\n       Ann Arbor, MI 48103-4943\n       USA\n      \
    \ Phone: +1 313 764-2277\n       EMail: mcs@umich.edu\n"
- title: 13.  Appendix A - Sample LDAP API Code
  contents:
  - "13.  Appendix A - Sample LDAP API Code\n   #include <ldap.h>\n   main()\n   {\n\
    \           LDAP            *ld;\n           LDAPMessage     *res, *e;\n     \
    \      int             i;\n           char            *a, *dn;\n           void\
    \            *ptr;\n           char            **vals;\n           /* open a connection\
    \ */\n           if ( (ld = ldap_open( \"dotted.host.name\", LDAP_PORT ))\n  \
    \                 == NULL )\n                   exit( 1 );\n           /* authenticate\
    \ as nobody */\n           if ( ldap_simple_bind_s( ld, NULL, NULL ) != LDAP_SUCCESS\
    \ ) {\n                   ldap_perror( ld, \"ldap_simple_bind_s\" );\n       \
    \            exit( 1 );\n           }\n           /* search for entries with cn\
    \ of \"Babs Jensen\",\n                   return all attrs  */\n           if\
    \ ( ldap_search_s( ld, \"o=University of Michigan, c=US\",\n               LDAP_SCOPE_SUBTREE,\
    \ \"(cn=Babs Jensen)\", NULL, 0, &res )\n               != LDAP_SUCCESS ) {\n\
    \                   ldap_perror( ld, \"ldap_search_s\" );\n                  \
    \ exit( 1 );\n           }\n           /* step through each entry returned */\n\
    \           for ( e = ldap_first_entry( ld, res ); e != NULL;\n              \
    \ e = ldap_next_entry( ld, e ) ) {\n                   /* print its name */\n\
    \                   dn = ldap_get_dn( ld, e );\n                   printf( \"\
    dn: %s0, dn );\n                   free( dn );\n                   /* print each\
    \ attribute */\n                   for ( a = ldap_first_attribute( ld, e, &ptr\
    \ );\n                           a != NULL;\n                       a = ldap_next_attribute(\
    \ ld, e, ptr ) ) {\n                           printf( \"attribute: %s0, a );\n\
    \                           /* print each value */\n                         \
    \  vals = ldap_get_values( ld, e, a );\n                           for ( i = 0;\
    \ vals[i] != NULL; i++ ) {\n                                   printf( \"value:\
    \ %s0, vals[i] );\n                           }\n                           ldap_value_free(\
    \ vals );\n                   }\n           }\n           /* free the search results\
    \ */\n           ldap_msgfree( res );\n           /* close and free connection\
    \ resources */\n           ldap_unbind( ld );\n   }\n"
