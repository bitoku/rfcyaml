- title: __initial_text__
  contents:
  - "             Use of Label Switching on Frame Relay Networks\n               \
    \              Specification\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the model and generic mechanisms for\n   Multiprotocol\
    \ Label Switching on Frame Relay networks.  Furthermore,\n   it extends and clarifies\
    \ portions of the Multiprotocol Label\n   Switching Architecture described in\
    \ [ARCH] and the Label Distribution\n   Protocol (LDP) described in [LDP] relative\
    \ to Frame Relay Networks.\n   MPLS enables the use of Frame Relay Switches as\
    \ Label Switching\n   Routers (LSRs).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   5.4  Frame Relay Label Switching Loop Prevention and Control...7\n\
    \   5.6  Label Processing by Core FR-LSRs.........................12\n   5.7 \
    \ Label Processing by Egress FR-LSRs.......................13\n   6.  Label Switching\
    \ Control Component for Frame Relay.........13\n   6.1  Hybrid Switches (Ships\
    \ in the Night)  ...................14\n   7.  Label Allocation and Maintenance\
    \ Procedures ..............15\n   7.1  Edge LSR Behavior........................................15\n\
    \   7.2  Efficient use of label space-Merging FR-LSRs.............18\n   7.3 \
    \ LDP message fields specific to Frame Relay...............19\n   8.  Security\
    \ Considerations  .................................21\n   9.  Acknowledgments\
    \  .........................................21\n   10. References  ..............................................22\n\
    \   11. Authors' Addresses  ......................................23\n   12. Full\
    \ Copyright Statement  ................................24\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Multiprotocol Label Switching Architecture is described\
    \ in\n   [ARCH].  It is possible to use Frame Relay switches as Label\n   Switching\
    \ Routers.  Such Frame Relay switches run network layer\n   routing algorithms\
    \ (such as OSPF, IS-IS, etc.), and their forwarding\n   is based on the results\
    \ of these routing algorithms.  No specific\n   Frame Relay routing is needed.\n\
    \   When a Frame Relay switch is used for label switching, the top\n   (current)\
    \ label, on which forwarding decisions are based, is carried\n   in the DLCI field\
    \ of the Frame Relay data link layer header of a\n   frame.  Additional information\
    \ carried along with the top (current)\n   label, but not processed by Frame Relay\
    \ switching, along with other\n   labels, if the packet is multiply labeled, are\
    \ carried in the generic\n   MPLS encapsulation defined in [STACK].\n   Frame\
    \ Relay permanent virtual circuits (PVCs) could be configured to\n   carry label\
    \ switching based traffic.  The DLCIs would be used as MPLS\n   Labels and the\
    \ Frame Relay switches would become Frame Relay Label\n   Switching Routers, while\
    \ the MPLS traffic would be encapsulated\n   according to this specification,\
    \ and would be forwarded based on\n   network layer routing information.\n   The\
    \ keywords MUST, MUST NOT, MAY, OPTIONAL, REQUIRED, RECOMMENDED,\n   SHALL, SHALL\
    \ NOT, SHOULD, SHOULD NOT are to be interpreted as defined\n   in RFC 2119.\n\
    \   This document is a companion document to [STACK] and [ATM].\n"
- title: 2. Terminology
  contents:
  - "2. Terminology\n   LSR\n      A Label Switching Router (LSR) is a device which\
    \ implements the\n      label switching control and forwarding components described\
    \ in\n      [ARCH].\n   LC-FR\n      A label switching controlled Frame Relay\
    \ (LC-FR) interface is a\n      Frame Relay interface controlled by the label\
    \ switching control\n      component.  Packets traversing such an interface carry\
    \ labels in\n      the DLCI field.\n   FR-LSR\n      A FR-LSR is an LSR with one\
    \ or more LC-FR interfaces which\n      forwards frames between two such interfaces\
    \ using labels carried\n      in the DLCI field.\n   FR-LSR domain\n      A FR-LSR\
    \ domain is a set of FR-LSRs, which are mutually\n      interconnected by LC-FR\
    \ interfaces.\n   Edge Set\n      The Edge Set of an FR-LSR domain is the set\
    \ of LSRs, which are\n      connected to the domain by LC-FR interfaces.\n   Forwarding\
    \ Encapsulation\n      The Forwarding Encapsulation is the type of MPLS encapsulation\n\
    \      (Frame Relay, ATM, Generic) of a packet that determines the\n      packet's\
    \ MPLS forwarding, or the network layer encapsulation if\n      that packet is\
    \ forwarded based on the network layer (IP,\n      etc...)header.\n   Input Encapsulation\n\
    \      The Input Encapsulation is the type of MPLS encapsulation (Frame\n    \
    \  Relay, ATM, Generic) of a packet when that packet is received on\n      an\
    \ LSR's interface, or the network layer (IP, etc...)encapsulation\n      if that\
    \ packet has no MPLS encapsulation.\n   Output Encapsulation\n      The Output\
    \ Encapsulation is the type of MPLS encapsulation (Frame\n      Relay, ATM, Generic)\
    \ of a packet when that packet is transmitted\n      on an LSR's interface, or\
    \ the network layer (IP,\n      etc...)encapsulation if that packet has no MPLS\
    \ encapsulation.\n   Input TTL\n      The Input TTL is the MPLS TTL of the top\
    \ of the stack when a\n      labeled packet is received on an LSR interface, or\
    \ the network\n      layer (IP) TTL if the packet is not labeled.\n   Output TTL\n\
    \      The Output TTL is the MPLS TTL of the top of the stack when a\n      labeled\
    \ packet is transmitted on an LSR interface, or the network\n      layer (IP)\
    \ TTL if the packet is not labeled.\n   Additionally, this document uses terminology\
    \ from [ARCH].\n"
- title: 3. Special characteristics of Frame Relay Switches
  contents:
  - "3. Special characteristics of Frame Relay Switches\n   While the label switching\
    \ architecture permits considerable\n   flexibility in LSR implementation, a FR-LSR\
    \ is constrained by the\n   capabilities of the (possibly pre-existing) hardware\
    \ and the\n   restrictions on such matters as frame format imposed by the\n  \
    \ Multiprotocol Interconnect over Frame Relay [MIFR], or Frame Relay\n   standards\
    \ [FRF], etc.... Because of these constraints, some special\n   procedures are\
    \ required for FR-LSRs.\n   Some of the key features of Frame Relay switches that\
    \ affect their\n   behavior as LSRs are:\n   -  the label swapping function is\
    \ performed on fields (DLCI) in the\n      frame's Frame Relay data link header;\
    \ this dictates the size and\n      placement of the label(s) in a packet.  The\
    \ size of the DLCI field\n      can be 10 (default) or 23 bits, and it can span\
    \ two or four bytes\n      in the header.\n   -  there is generally no capability\
    \ to perform a 'TTL-decrement'\n      function as is performed on IP headers in\
    \ routers.\n   -  congestion control is performed by each node based on parameters\n\
    \      that are passed at circuit creation.  Flags in the frame headers\n    \
    \  may be set as a consequence of congestion, or exceeding the\n      contractual\
    \ parameters of the circuit.\n   -  although in a standard switch it may be possible\
    \ to configure\n      multiple input DLCIs to one output DLCI resulting in a\n\
    \      multipoint-to-point circuit, multipoint-to-multipoint VCs are\n      generally\
    \ not fully supported.\n   This document describes ways of applying label switching\
    \ to Frame\n   Relay switches, which work within these constraints.\n"
- title: 4. Label Encapsulation
  contents:
  - "4. Label Encapsulation\n   By default, all labeled packets should be transmitted\
    \ with the\n   generic label encapsulation as defined in [STACK], using the frame\n\
    \   relay null encapsulation mechanism:\n               0                    \
    \   1                       (Octets)\n              +-----------------------+-----------------------+\n\
    \   (Octets)0  |                                               |\n           \
    \   /                 Q.922 Address                 /\n              /       \
    \      (length 'n' equals 2 or 4)        /\n              |                  \
    \                             |\n              +-----------------------+-----------------------+\n\
    \           n  |                       .                       |\n           \
    \   /                       .                       /\n              /       \
    \           MPLS packet                  /\n              |                  \
    \     .                       |\n              +-----------------------+-----------------------+\n\
    \      \"n\" is the length of the Q.922 Address which can be 2 or 4 octets.\n\
    \      The Q.922 [ITU] representation of a DLCI (in canonical order  -\n     \
    \ the first bit is stored in the least significant, i.e., the\n      right-most\
    \ bit of a byte in memory) [CANON] is the following:\n            7     6    \
    \ 5     4     3     2     1     0      (bit order)\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: (octet) 0  |            DLCI(high order)       |  0  |  0  |
  contents:
  - "(octet) 0  |            DLCI(high order)       |  0  |  0  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        1  |  DLCI(low order)      |  0  |  0  |  0  |  1  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \              10 bits DLCI\n            7     6     5     4     3     2     1\
    \     0      (bit order)\n           +-----+-----+-----+-----+-----+-----+-----+-----00\n"
- title: (octet) 0  |            DLCI(high order)       |  0  |  0  |
  contents:
  - "(octet) 0  |            DLCI(high order)       |  0  |  0  |\n           +-----+-----+-----+-----+-----+-----+-----+-----\n\
    \        1  |  DLCI                 |  0  |  0  |  0  |  0  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        2  |             DLCI                        |  0  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        3  |       DLCI (low order)            |  0  |  1  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \              23 bits DLCI\n   The use of the frame relay null encapsulation\
    \ implies that labels\n   implicitly encode the network protocol type.\n   Rules\
    \ regarding the construction of the label stack, and error\n   messages returned\
    \ to the frame source are also described in [STACK].\n   The generic encapsulation\
    \ contains \"n\" labels for a label stack of\n   depth \"n\" [STACK], where the\
    \ top stack entry carries significant\n   values for the EXP, S , and TTL fields\
    \ [STACK] but not for the label,\n   which is rather carried in the DLCI field\
    \ of the Frame Relay data\n   link header encoded in Q.922 [ITU] address format.\n"
- title: 5. Frame Relay Label Switching Processing
  contents:
  - '5. Frame Relay Label Switching Processing

    '
- title: 5.1  Use of DLCIs
  contents:
  - "5.1  Use of DLCIs\n   Label switching is accomplished by associating labels with\
    \ routes and\n   using the label value to forward packets, including determining\
    \ the\n   value of any replacement label.  See [ARCH] for further details.  In\n\
    \   a FR-LSR, the top (current) MPLS label is carried in the DLCI field\n   of\
    \ the Frame Relay data link layer header of the frame.  The top\n   label carries\
    \ implicitly information about the network protocol type.\n   For two connected\
    \ FR-LSRs, a full-duplex connection must be available\n   for LDP.  The DLCI for\
    \ the LDP VC is assigned a value by way of\n   configuration, similar to configuring\
    \ the DLCI used to run IP routing\n   protocols between the switches.\n   With\
    \ the exception of this configured value, the DLCI values used for\n   MPLS in\
    \ the two directions of the link may be treated as belonging to\n   two independent\
    \ spaces, i.e., VCs may be half-duplex, each direction\n   with its own DLCI.\n\
    \   The allowable ranges of DLCIs, the size of DLCIs, and the support for\n  \
    \ VC merging MUST be communicated through LDP messages.  Note that the\n   range\
    \ of DLCIs used for labels depends on the size of the DLCI field.\n"
- title: 5.2  Homogeneous LSPs
  contents:
  - "5.2  Homogeneous LSPs\n   If <LSR1, LSR2, LSR3> is an LSP, it is possible that\
    \ LSR1, LSR2, and\n   LSR3 will use the same encoding of the label stack when\
    \ transmitting\n   packet P from LSR1, to LSR2, and then to LSR3.  Such an LSP\
    \ is\n   homogeneous.\n"
- title: 5.3  Heterogeneous LSPs
  contents:
  - "5.3  Heterogeneous LSPs\n   If <LSR1, LSR2, LSR3> is an LSP, it is possible that\
    \ LSR1 will use\n   one encoding of the label stack when transmitting packet P\
    \ to LSR2,\n   but LSR2 will use a different encoding when transmitting a packet\
    \ P\n   to LSR3.  In general, the MPLS architecture supports LSPs with\n   different\
    \ label stack encodings on different hops.  When a labeled\n   packet is received,\
    \ the LSR must decode it to determine the current\n   value of the label stack,\
    \ then must operate on the label stack to\n   determine the new label value of\
    \ the stack, and then encode the new\n   value appropriately before transmitting\
    \ the labeled packet to its\n   next hop.\n   Naturally there will be MPLS networks\
    \ which contain a combination of\n   Frame Relay switches operating as LSRs, and\
    \ other LSRs, which operate\n   using other MPLS encapsulations, such as the Generic\
    \ (MPLS shim\n   header), or ATM encapsulation.  In such networks there may be\
    \ some\n   LSRs, which have Frame Relay interfaces as well as MPLS Generic\n \
    \  (\"MPLS Shim\") interfaces.  This is one example of an LSR with\n   different\
    \ label stack encodings on different hops of the same LSP.\n   Such an LSR may\
    \ swap off a Frame Relay encoded label on an incoming\n   interface and replace\
    \ it with a label encoded into a Generic MPLS\n   (MPLS shim) header on the outgoing\
    \ interface.\n"
- title: 5.4  Frame Relay Label Switching Loop Prevention and Control
  contents:
  - "5.4  Frame Relay Label Switching Loop Prevention and Control\n   FR-LSRs SHOULD\
    \ operate on loop free FR-LSPs or LSP Frame Relay\n   segments.  Therefore, FR-LSRs\
    \ SHOULD use loop detection and MAY use\n   loop prevention mechanisms as described\
    \ in [ARCH], and [LDP].\n"
- title: 5.4.1  FR-LSRs Loop Control - MPLS TTL processing
  contents:
  - "5.4.1  FR-LSRs Loop Control - MPLS TTL processing\n   The MPLS TTL encoded in\
    \ the MPLS label stack is a mechanism used to:\n   (a) suppress loops;\n   (b)\
    \ limit the scope of a packet.\n   When a packet travels along an LSP, it should\
    \ emerge with the same\n   TTL value that it would have had if it had traversed\
    \ the same\n   sequence of routers without having been label switched.  If the\n\
    \   packet travels along a hierarchy of LSPs, the total number of LSR-\n   hops\
    \ traversed should be reflected in its TTL value when it emerges\n   from the\
    \ hierarchy of LSPs [ARCH].\n   The initial value of the MPLS TTL is loaded into\
    \ a newly pushed label\n   stack entry from the previous TTL value, whether that\
    \ is from the\n   network layer header when no previous label stack existed, or\
    \ from a\n   pre-existent lower level label stack entry.\n   A FR-LSR switching\
    \ same level labeled packets does not decrement the\n   MPLS TTL.  A sequence\
    \ of such FR-LSR is a \"non-TTL segment\".\n   When a packet emerges from a \"\
    non-TTL LSP segment\", it should however\n   reflect in the TTL the number of\
    \ LSR-hops it traversed.  In the\n   unicast case, this can be achieved by propagating\
    \ a meaningful LSP\n   length or LSP Frame Relay segment length to the FR-LSR\
    \ ingress nodes,\n   enabling the ingress to decrement the TTL value before forwarding\n\
    \   packets into a non-TTL LSP segment [ARCH].\n   When an ingress FR-LSR determines\
    \ upon decrementing the MPLS TTL that\n   a particular packet's TTL will expire\
    \ before the packet reaches the\n   egress of the \"non-TTL LSP segment\", the\
    \ FR-LSR MUST not label switch\n   the packet, but rather follow the specifications\
    \ in [STACK] in an\n   attempt to return an error message to the packet's source:\n\
    \      -  it treats the packet as an expired packet and return an ICMP\n     \
    \    message to its source.\n      -  it forwards the packet, as an unlabeled\
    \ packet, with a TTL that\n         reflects the IP (network layer) forwarding.\n\
    \   If the incoming TTL is 1, only the first option applies.\n   In the multicast\
    \ case, a meaningful LSP length or LSP segment length\n   is propagated to the\
    \ FR-LSR egress node, enabling the egress to\n   decrement the TTL value before\
    \ forwarding packets out of the non-TTL\n   LSP segment.\n"
- title: 5.4.2  Performing MPLS TTL calculations
  contents:
  - "5.4.2  Performing MPLS TTL calculations\n   The calculation applied to the \"\
    input TTL\" that yields the \"output\n   TTL\" depends on (i)the \"input encapsulation\"\
    , (ii)the \"forwarding\n   encapsulation\", and (iii)the \"output encapsulation\"\
    .  The\n   relationship among (i),(ii), and (iii), can be defined as a function\n\
    \   \"D\" of \"input encapsulation\" (ie), \"forwarding encapsulation\" (fe),\n\
    \   and \"output encapsulation\" (oe).  Subsequently the calculation\n   applied\
    \ to the \"input TTL\" to yield the \"output TTL\" can be described\n   as:\n\
    \     output TTL = input TTL - D(ie, fe, oe)\n   or in a brief notation:\n   \
    \  output TTL = input TTL - d\n   where \"d\" has three possible values: \"0\"\
    ,\"1\", or \"the number of hops\n   of the LSP segment\":\n   For unicast transmission:\n"
- title: +================+=================+=================+=================+
  contents:
  - '+================+=================+=================+=================+

    '
- title: '|                |     Type of     |     Type of     |     Type of     |'
  contents:
  - '|                |     Type of     |     Type of     |     Type of     |

    '
- title: '|       d        |      Input      |    Forwarding   |     Output      |'
  contents:
  - '|       d        |      Input      |    Forwarding   |     Output      |

    '
- title: '|                |  Encapsulation  |  Encapsulation  |  Encapsulation  |'
  contents:
  - '|                |  Encapsulation  |  Encapsulation  |  Encapsulation  |

    '
- title: +================+=================+=================+=================+
  contents:
  - '+================+=================+=================+=================+

    '
- title: '|       0        |   Frame Relay   |   Frame Relay   |   Frame Relay   |'
  contents:
  - '|       0        |   Frame Relay   |   Frame Relay   |   Frame Relay   |

    '
- title: +----------------+-----------------+-----------------+-----------------+
  contents:
  - '+----------------+-----------------+-----------------+-----------------+

    '
- title: '|       1        |       any       |  Generic MPLS   |  Generic MPLS   |'
  contents:
  - '|       1        |       any       |  Generic MPLS   |  Generic MPLS   |

    '
- title: +----------------+-----------------+-----------------+-----------------+
  contents:
  - '+----------------+-----------------+-----------------+-----------------+

    '
- title: '| number of hops |                 |  Generic MPLS   |                 |'
  contents:
  - '| number of hops |                 |  Generic MPLS   |                 |

    '
- title: '|      of        |       any       |      or         |   Frame Relay   |'
  contents:
  - '|      of        |       any       |      or         |   Frame Relay   |

    '
- title: '|  LSP segment   |                 |IP(network layer)|                 |'
  contents:
  - '|  LSP segment   |                 |IP(network layer)|                 |

    '
- title: +================+=================+=================+=================+
  contents:
  - "+================+=================+=================+=================+\n  \
    \ The \"number of hops of the LSP segment\" is the value of the \"hop\n   count\"\
    \ that is attached with the label used when the packet is\n   forwarded, if LDP\
    \ [LDP] has provided such a \"hop count\" value when it\n   distributed the label\
    \ for the LSP, that is the LDP message had a \"hop\n   count object\".  If LDP\
    \ didn't provide a \"hop count\", or it provided\n   an \"unknown\" value, the\
    \ default value of the \"number of hops of the\n   segment\" is 1.\n   When sending\
    \ a label binding upstream, the \"hop count\" associated\n   with the corresponding\
    \ binding from downstream, if different than the\n   \"unknown\" value, MUST be\
    \ incremented by 1, and the result transmitted\n   upstream as the hop count associated\
    \ with the new binding (the\n   \"unknown\" value is transmitted unchanged). \
    \ If the new \"hop count\"\n   value exceeds the \"maximum\" value, the FR-LSR\
    \ MUST NOT pass the\n   binding upstream, but instead MUST send an error upstream\n\
    \   [LDP][ARCH].\n   For multicast transmission:\n"
- title: +================+=================+=================+=================+
  contents:
  - '+================+=================+=================+=================+

    '
- title: '|                |     Type of     |     Type of     |     Type of     |'
  contents:
  - '|                |     Type of     |     Type of     |     Type of     |

    '
- title: '|       d        |      Input      |    Forwarding   |     Output      |'
  contents:
  - '|       d        |      Input      |    Forwarding   |     Output      |

    '
- title: '|                |  Encapsulation  |  Encapsulation  |  Encapsulation  |'
  contents:
  - '|                |  Encapsulation  |  Encapsulation  |  Encapsulation  |

    '
- title: +================+=================+=================+=================+
  contents:
  - '+================+=================+=================+=================+

    '
- title: '|       0        |   Frame Relay   |   Frame Relay   |   Frame Relay   |'
  contents:
  - '|       0        |   Frame Relay   |   Frame Relay   |   Frame Relay   |

    '
- title: +----------------+-----------------+-----------------+-----------------+
  contents:
  - '+----------------+-----------------+-----------------+-----------------+

    '
- title: '|                |                 |  Generic MPLS   |                 |'
  contents:
  - '|                |                 |  Generic MPLS   |                 |

    '
- title: '|       1        |       any       |      or         |   Frame Relay   |'
  contents:
  - '|       1        |       any       |      or         |   Frame Relay   |

    '
- title: '|                |                 |IP(network layer)|                 |'
  contents:
  - '|                |                 |IP(network layer)|                 |

    '
- title: +----------------+-----------------+-----------------+-----------------+
  contents:
  - '+----------------+-----------------+-----------------+-----------------+

    '
- title: '| number of hops |                 |  Generic MPLS   |                 |'
  contents:
  - '| number of hops |                 |  Generic MPLS   |                 |

    '
- title: '|      of        |  Frame Relay    |      or         |       any       |'
  contents:
  - '|      of        |  Frame Relay    |      or         |       any       |

    '
- title: '|  LSP segment   |                 |IP(network layer)|                 |'
  contents:
  - '|  LSP segment   |                 |IP(network layer)|                 |

    '
- title: +================+=================+=================+=================+
  contents:
  - "+================+=================+=================+=================+\n  \
    \ Referring to the \"forwarding encapsulation\" with the abbreviation \"I\"\n\
    \   for IP (network layer), \"G\" for Generic MPLS, and \"F\" for Frame Relay\n\
    \   MPLS, referring to an LSR interface with the abbreviation \"i\" if the\n \
    \  input or output encapsulation is IP and no MPLS encapsulation, \"g\"\n   when\
    \ the input or output MPLS encapsulation is Generic MPLS, \"f\" when\n   it is\
    \ Frame Relay, \"a\" when it is ATM, and furthermore considering\n   the symbols\
    \ \"iIf\", \"gGf\", \"fFf\", etc... as LSRs with input,\n   forwarding and output\
    \ encapsulations as referred above, the following\n   describes examples of TTL\
    \ calculations for the Homogeneous and\n   Heterogeneous LSPs discussed in previous\
    \ sections:\n                         Homogeneous LSP\n                      \
    \   ---------------\n        IP_ttl = n                             IP_ttl=mpls_ttl-1\
    \ = n-6\n        --------->iIf                      fIi--------->\n          \
    \          | mpls_ttl = n-5       ^\n                    |                   \
    \   |\n"
- title: number of hops     1|     Frame Relay      |5
  contents:
  - "number of hops     1|     Frame Relay      |5\n                    |        \
    \              |\n                    V   2      3      4    |\n             \
    \       fFf--->fFf--->fFf--->fFf\n \"iIf\" is \"ingress LSR\" in Frame Relay LSP\
    \ and\n        calculates: mpls_ttl = IP_TTL - number of hops = n-5\n \"fIi\"\
    \ is \"egress LSR\" from Frame Relay LSP, and\n        calculates: IP_ttl = mpls_ttl-1\
    \ = n-6\n                          Heterogeneous LSP\n                       \
    \   -----------------\n"
- title: ingress LSR                                                  egress LSR
  contents:
  - 'ingress LSR                                                  egress LSR

    '
- title: IP_ttl = n                                               IP_ttl = n - 15
  contents:
  - 'IP_ttl = n                                               IP_ttl = n - 15

    '
- title: links   LAN   PPP        FR          ATM    PPP    FR     LAN
  contents:
  - "links   LAN   PPP        FR          ATM    PPP    FR     LAN\n --->iIg-->gGg-->gGf\
    \            fGa       aGg-->gGf       fGg-->gIi--->\n"
- title: hops     1     2   |     6      | |   9   |  10   |  13   ^  14    15
  contents:
  - "hops     1     2   |     6      | |   9   |  10   |  13   ^  14    15\n     \
    \              |1          4| |1     3|       |1     3|\n                   V\
    \  2     3   | V   2   |       V   2   |\n                  fFf-->fFf-->fFf aAa-->aAa\
    \       fFf-->fFf\n"
- title: mpls_ttl
  contents:
  - "mpls_ttl\n       n-1   n-2  (n-2)-4=n-6  (n-6)-3=n-9  n-10  n-13     n-14\n"
- title: '"iIg" is "ingress LSR" in LSP; it calculates: mpls_ttl=n-1'
  contents:
  - '"iIg" is "ingress LSR" in LSP; it calculates: mpls_ttl=n-1

    '
- title: '"gGf" is "egress LSR" from Generic MPLS segment, and'
  contents:
  - "\"gGf\" is \"egress LSR\" from Generic MPLS segment, and\n      \"ingress LSR\"\
    \ in Frame Relay segment and calculates: mpls_ttl=n-6\n"
- title: '"fGa" "egress LSR" from Frame Relay segment, and'
  contents:
  - "\"fGa\" \"egress LSR\" from Frame Relay segment, and\n      \"ingress LSR\" in\
    \ ATM segment and calculates: mpls_ttl=n-9\n"
- title: '"gGf" is "egress LSR" from Generic MPLS segment, and'
  contents:
  - "\"gGf\" is \"egress LSR\" from Generic MPLS segment, and\n      \"ingress LSR\"\
    \ in Frame Relay segment and calculates: mpls_ttl=n-13\n"
- title: '"fGg" is "egress LSR" from Frame Relay segment, and'
  contents:
  - "\"fGg\" is \"egress LSR\" from Frame Relay segment, and\n      ingress LSR\"\
    \ in Generic MPLS segment and calculates: mpls_ttl=n-14\n"
- title: '"gIi" is "egress LSR" from  LSP and calculates: IP_ttl=n-15'
  contents:
  - "\"gIi\" is \"egress LSR\" from  LSP and calculates: IP_ttl=n-15\n      And further\
    \ examples:\n                Frame Relay Unicast -- TTL calculated at ingress\n\
    \   (ingress LSR)  1     2        3      4\n            x--->---+--->---+--->>--+-->>---x\
    \ (egress LSR)\n      o.ttl=i.ttl-4         |     2      3\n                 \
    \           ^\n    hops                   1|\n                            |\n\
    \                            x (ingress LSR)\n                              o.ttl=i.ttl-3\n\
    \          Frame Relay Multicast -- TTL calculated at egress\n               \
    \ (egress LSR)x  o.ttl=i.ttl-3\n    hops                    |\n              \
    \              ^3\n     (ingress LSR)          |            o.ttl=i.ttl-4\n  \
    \          x--->---+--->---+--->---+--->---x (egress LSR)\n                1 \
    \      2       3       4\n"
- title: 5.5  Label Processing by Ingress FR-LSRs
  contents:
  - "5.5  Label Processing by Ingress FR-LSRs\n   When a packet first enters an MPLS\
    \ domain, the packet is forwarded by\n   normal  network  layer  forwarding operations\
    \ with the exception that\n   the outgoing encapsulation will include an MPLS\
    \ label stack [STACK]\n   with at least one entry.  The frame relay null encapsulation\
    \ will\n   carry information about the network layer protocol implicitly in the\n\
    \   label, which MUST be associated only with that network protocol.  The\n  \
    \ TTL field in the top label stack entry is filled with the network\n   layer\
    \ TTL (or hop limit) resulted after network layer forwarding\n   [STACK].  The\
    \ further FR-LSR processing is similar in both possible\n   cases:\n   (a) the\
    \ LSP is homogeneous -- Frame Relay only -- and the FR-LSR is\n   the ingress.\n\
    \   (b) the LSP is heterogeneous -- Frame Relay, PPP, Ethernet, ATM,\n   etc...\
    \ segments form the LSP -- and the FR-LSR is the ingress into a\n   Frame Relay\
    \ segment.\n   For unicast packets, the MPLS TTL SHOULD be decremented with the\n\
    \   number of hops of the Frame Relay LSP (homogeneous), or Frame Relay\n   segment\
    \ of the LSP (heterogeneous).  An LDP constructing the LSP\n   SHOULD pass meaningful\
    \ information to the ingress FR-LSR regarding\n   the number of hops of the \"\
    non-TTL segment\".\n   For multicast packets, the MPLS TTL SHOULD be decremented\
    \ by 1.  An\n   LDP constructing the LSP SHOULD pass meaningful information to\
    \ the\n   egress FR-LSR regarding the number of hops of the \"non-TTL segment\"\
    .\n   Next, the MPLS encapsulated packet is passed down to the Frame Relay\n \
    \  data link driver with the top label as output DLCI.  The Frame Relay\n   frame\
    \ carrying the MPLS encapsulated packet is forwarded onto the\n   Frame Relay\
    \ VC to the next LSR.\n"
- title: 5.6  Label Processing by Core FR-LSRs
  contents:
  - "5.6  Label Processing by Core FR-LSRs\n   In a FR-LSR, the current (top) MPLS\
    \ label is carried in the DLCI\n   field of the Frame Relay data link layer header\
    \ of the frame.  Just\n   as in conventional Frame Relay, for a frame arriving\
    \ at an interface,\n   the DLCI carried by the Frame Relay data link header is\
    \ looked up in\n   the DLCI Information Base, replaced with the correspondent\
    \ output\n   DLCI, and transmitted on the outgoing interface (forwarded to the\n\
    \   next hop node).\n   The current label information is also carried in the top\
    \ of the label\n   stack.  In the top-level entry, all fields except the label\n\
    \   information, which is carried and switched in the Frame Relay frame\n   data\
    \ link-layer header, are of current significance.\n"
- title: 5.7  Label Processing by Egress FR-LSRs
  contents:
  - "5.7  Label Processing by Egress FR-LSRs\n   When reaching the end of a Frame\
    \ Relay LSP, the FR-LSR pops the label\n   stack [ARCH].  If the label popped\
    \ is the last label, it is necessary\n   to determine the particular network layer\
    \ protocol which is being\n   carried.  The label stack carries no explicit information\
    \ to identify\n   the network layer protocol.  This must be inferred from the\
    \ value of\n   the label which is popped from the stack.\n   If the label popped\
    \ is not the last label, the previous top level\n   MPLS TTL is propagated to\
    \ the new top label stack entry.\n   If the FR-LSR is the egress switch of a Frame\
    \ Relay segment of a\n   hybrid LSP, and the end of the Frame Relay segment is\
    \ not the end of\n   the LSP, the MPLS packet will be processed for forwarding\
    \ onto the\n   next segment of the LSP based on the information held in the Next\
    \ Hop\n   Label Forwarding Entry (NHLFE) [ARCH].  The output label is set to\n\
    \   the value from the NHLFE, and the MPLS TTL is decremented by the\n   appropriate\
    \ value depending the type of the output interface and the\n   type of transmit\
    \ operation (see section 6.3).  Further, the MPLS\n   packet is forwarded according\
    \ to the MPLS specifications for the\n   particular link of the next segment of\
    \ the LSP.\n   For unicast packets, the MPLS TTL SHOULD be decremented by one\
    \ if the\n   output interface is a generic one, or with the number of hops of\
    \ the\n   next ATM segment of the LSP (heterogeneous), if the output interface\n\
    \   is an ATM (non-TTL) interface.\n   For multicast packets, the MPLS TTL SHOULD\
    \ be decremented by the\n   number of hops of the FR segment being exited.  An\
    \ LDP constructing\n   the LSP SHOULD pass meaningful information to the egress\
    \ FR-LSR\n   regarding the number of hops of the FR \"non-TTL segment\".\n"
- title: 6.  Label Switching Control Component for Frame Relay
  contents:
  - "6.  Label Switching Control Component for Frame Relay\n   To support label switching\
    \ a Frame Relay Switch MUST implement the\n   control component of label switching,\
    \ which consists primarily of\n   label allocation and maintenance procedures.\
    \  Label binding\n   information MAY be communicated by several mechanisms, one\
    \ of which\n   is the Label Distribution Protocol (LDP) [LDP].\n   Since the label\
    \ switching control component uses information learned\n   directly from network\
    \ layer routing protocols, this implies that the\n   switch MUST participate as\
    \ a peer in these protocols (e.g., OSPF,\n   IS-IS).\n   In some cases, LSRs may\
    \ use other protocols (e.g., RSVP, PIM, BGP) to\n   distribute label bindings.\
    \  In these cases, a Frame Relay LSR should\n   participate in these protocols.\n\
    \   In the case where Frame Relay circuits are established via LDP, or\n   RSVP,\
    \ or others, with no involvement from traditional Frame Relay\n   mechanisms,\
    \ it is assumed that circuit establishing contractual\n   information such as\
    \ input/output maximum frame size,\n   incoming/outgoing requested/agreed throughput,\
    \ incoming/outgoing\n   acceptable throughput, incoming/outgoing burst size,\n\
    \   incoming/outgoing frame rate, used in transmitting, and congestion\n   control\
    \ MAY be passed to the FR-LSRs through RSVP, or can be\n   statically configured.\
    \  It is also assumed that congestion control\n   and frame header flagging as\
    \ a consequence of congestion, would be\n   done by the FR-LSRs in a similar fashion\
    \ as for traditional Frame\n   Relay circuits.  With the goal of emulating a best-effort\
    \ router as\n   default, the default VC parameters, in the absence of LDP, RSVP,\
    \ or\n   other mechanisms participation to setting such parameters, should be\n\
    \   zero CIR, so that input policing will set the DE bit in incoming\n   frames,\
    \ but no frames are dropped.\n   Control and state information for the circuits\
    \ based on MPLS MAY be\n   communicated through LDP.\n   Support of label switching\
    \ on a Frame Relay switch requires\n   conformance only to [FRF] (framing, bit-stuffing,\
    \ headers, FCS)\n   except for section 2.3 (PVC control signaling procedures,\
    \ aka LMI).\n   Q.933 signaling for PVCs and/or SVCs is not required.  PVC and/or\
    \ SVC\n   signaling may be used for non-MPLS (standard Frame Relay) PVCs and/or\n\
    \   SVCs when both are running on the same interface as MPLS, as\n   discussed\
    \ in the next section.\n"
- title: 6.1  Hybrid Switches (Ships in the Night)
  contents:
  - "6.1  Hybrid Switches (Ships in the Night)\n   The existence of the label switching\
    \ control component on a Frame\n   Relay switch does not preclude the ability\
    \ to support the Frame Relay\n   control component defined by the ITU and Frame\
    \ Relay Forum on the\n   same switch and the same interfaces (NICs).  The two\
    \ control\n   components, label switching and those defined by ITU/Frame Relay\n\
    \   Forum, would operate independently.\n   Definition of how such a device operates\
    \ is beyond the scope of this\n   document.  However, only a small amount of information\
    \ needs to be\n   consistent between the two control components, such as the portions\n\
    \   of the DLCI space which are available to each component.\n"
- title: 7.  Label Allocation and Maintenance Procedures
  contents:
  - "7.  Label Allocation and Maintenance Procedures\n   The mechanisms and message\
    \ formats of a Label Distribution Protocol\n   are documented in [ARCH] and [LDP].\
    \  The \"downstream-on-demand\" label\n   allocation and maintenance mechanism\
    \ discussed in this section MUST\n   be used by FR-LSRs that do not support VC\
    \ merging, and it MAY also be\n   used by FR-LSRs that do support VC merging (note\
    \ that this mechanism\n   applies to hop-by-hop routed traffic):\n"
- title: 7.1   Edge LSR Behavior
  contents:
  - "7.1   Edge LSR Behavior\n   Consider a member of the Edge Set of a FR-LSR domain.\
    \  Assume that,\n   as a result of its routing calculations, it selects a FR-LSR\
    \ as the\n   next hop of a certain route (FEC), and that the next hop is reachable\n\
    \   via a LC-Frame Relay interface.  Assume that the next-hop FR-LSR is\n   an\
    \ \"LDP-peer\" [ARCH][LDP].  The Edge LSR sends an LDP \"request\"\n   message\
    \ for a label binding from the next hop, downstream LSR.  When\n   the Edge LSR\
    \ receives in response from the downstream LSR the label\n   binding information\
    \ in an LDP \"mapping\" message, the label is stored\n   in the Label Information\
    \ Base (LIB) as an outgoing label for that\n   FEC.  The \"mapping\" message may\
    \ contain the \"hop count\" object, which\n   represents the number of hops a\
    \ packet will take to cross the FR-LSR\n   domain to the Egress FR-LSR when using\
    \ this label.  This information\n   may be stored for TTL calculation.  Once this\
    \ is done, the LSR may\n   use MPLS forwarding to transmit packets in that FEC.\n\
    \   When a member of the Edge Set of the FR-LSR domain receives an LDP\n   \"\
    request\" message from a FR-LSR for a FEC, it means it is the\n   Egress-FR-LSR.\
    \  It allocates a label, creates a new entry in its\n   Label Information Base\
    \ (LIB), places that label in the incoming label\n   component of the entry, and\
    \ returns (via LDP) a \"mapping\" message\n   containing the allocated label back\
    \ upstream to the LDP peer that\n   originated the request.  The \"mapping\" message\
    \ contains the \"hop\n   count\" object value set to 1.\n   When a routing calculation\
    \ causes an Edge LSR to change the next hop\n   for a route, and the former next\
    \ hop was in the FR-LSR domain, the\n   Edge LSR should notify the former next\
    \ hop (via an LDP \"release\"\n   message) that the label binding associated with\
    \ the route is no\n   longer needed.\n   When a Frame Relay-LSR receives an LDP\
    \ \"request\" message for a\n   certain route (FEC) from an LDP peer connected\
    \ to the FR-LSR over a\n   LC-FR interface, the FR-LSR takes the following actions:\n\
    \      -  it allocates a label, creates a new entry in its Label\n         Information\
    \ Base (LIB), and places that label in the incoming\n         label component\
    \ of the entry;\n      -  it propagates the \"request\", by sending an LDP \"\
    request\"\n         message to the next hop LSR, downstream for that route (FEC);\n\
    \   In the \"ordered control\" mode [ARCH], the FR-LSR will wait for its\n   \"\
    request\" to be responded from downstream with a \"mapping\" message\n   before\
    \ returning the \"mapping\" upstream in response to a \"request\"\n   (\"ordered\
    \ control\" approach [ARCH]).  In this case, the FR-LSR\n   increments the hop\
    \ count it received from downstream and uses this\n   value in the \"mapping\"\
    \ it returns upstream.\n   Alternatively, the FR-LSR may return the binding upstream\
    \ without\n   waiting for a binding from downstream (\"independent control\" approach\n\
    \   [ARCH]).  In this case, it uses a reserved value for hop count in the\n  \
    \ \"mapping\", indicating that it is 'unknown'.  The correct value for\n   hop\
    \ count will be returned later, as described below.\n   Since both the \"ordered\"\
    \ and \"independent\" control has advantages and\n   disadvantages, this is left\
    \ as an implementation, or configuration\n   choice.\n   Once the FR-LSR receives\
    \ in response the label binding in an LDP\n   \"mapping\" message from the next\
    \ hop, it places the label into the\n   outgoing label component of the LIB entry.\n\
    \   Note that a FR-LSR, or a member of the edge set of a FR-LSR domain,\n   may\
    \ receive multiple binding requests for the same route (FEC) from\n   the same\
    \ FR-LSR.  It must generate a new \"mapping\" for each \"request\"\n   (assuming\
    \ adequate resources to do so), and retain any existing\n   mapping(s).  For each\
    \ \"request\" received, a FR-LSR should also\n   generate a new binding \"request\"\
    \ toward the next hop for the route\n   (FEC).\n   When a routing calculation\
    \ causes a FR-LSR to change the next hop for\n   a route (FEC), the FR-LSR should\
    \ notify the former next hop (via an\n   LDP \"release\" message) that the label\
    \ binding associated with the\n   route is no longer needed.\n   When a LSR receives\
    \ a notification that a particular label binding is\n   no longer needed, the\
    \ LSR may deallocate the label associated with\n   the binding, and destroy the\
    \ binding.  This mode is the \"conservative\n   label retention mode\" [ARCH].\
    \  In the case where a FR-LSR receives\n   such notification and destroys the\
    \ binding, it should notify the next\n   hop for the route that the label binding\
    \ is no longer needed.  If a\n   LSR does not destroy the binding (the FR-LSR\
    \ is configured in\n   \"liberal label retention mode\" [ARCH]), it may re-use\
    \ the binding\n   only if it receives a request for the same route with the same\
    \ hop\n   count as the request that originally caused the binding to be\n   created.\n\
    \   When a route changes, the label bindings are re-established from the\n   point\
    \ where the route diverges from the previous route.  LSRs\n   upstream of that\
    \ point are (with one exception, noted below)\n   oblivious to the change.  Whenever\
    \ a LSR changes its next hop for a\n   particular route, if the new next hop is\
    \ a FR-LSR or a member of the\n   edge set reachable via a LC-FR interface, then\
    \ for each entry in its\n   LIB associated with the route the LSR should request\
    \ (via LDP) a\n   binding from the new next hop.\n   When a FR-LSR receives a\
    \ label binding from a downstream neighbor, it\n   may already have provided a\
    \ corresponding label binding for this\n   route to an upstream neighbor, either\
    \ because it is using\n   \"independent control\" or because the new binding from\
    \ downstream is\n   the result of a routing change.  In this case, it should extract\
    \ the\n   hop count from the new binding and increment it by one.  If the new\n\
    \   hop count is different from that which was previously conveyed to the\n  \
    \ upstream neighbor (including the case where the upstream neighbor was\n   given\
    \ the value 'unknown') the FR-LSR must notify the upstream\n   neighbor of the\
    \ change.  Each FR-LSR in turn increments the hop count\n   and passes it upstream\
    \ until it reaches the ingress Edge LSR.\n   Whenever a FR-LSR originates a label\
    \ binding request to its next hop\n   LSR as a result of receiving a label binding\
    \ request from another\n   (upstream) LSR, and the request to the next hop LSR\
    \ is not satisfied,\n   the FR-LSR should destroy the binding created in response\
    \ to the\n   received request, and notify the requester (via an LDP \"withdraw\"\
    \n   message).\n   When an LSR determines that it has lost its LDP session with\
    \ another\n   LSR, the following actions are taken:\n      -  MUST discard any\
    \ binding information learned via this\n         connection;\n      -  For any\
    \ label bindings that were created as a result of\n         receiving label binding\
    \ requests from the peer, the LSR may\n         destroy these bindings (and deallocate\
    \ labels associated with\n         these binding).\n"
- title: 7.2   Efficient use of label space - Merging FR-LSRs
  contents:
  - "7.2   Efficient use of label space - Merging FR-LSRs\n   The above discussion\
    \ assumes that an edge LSR will request one label\n   for each prefix in its routing\
    \ table that has a next hop in the FR-\n   LSR domain. In fact, it is possible\
    \ to significantly reduce the\n   number of labels needed by having the edge LSR\
    \ request instead one\n   label for several routes.  Use of many-to-one mappings\
    \ between routes\n   (address  prefixes) and labels using the notion of Forwarding\n\
    \   Equivalence Classes (as described in [ARCH]) provides a mechanism to\n   conserve\
    \ the number of labels.\n   Note that conserving label space (VC merging) may\
    \ be restricted in\n   case the frame traffic requires Frame Relay fragmentation.\
    \  The issue\n   is that Frame Relay fragments must be transmitted in sequence,\
    \ i.e.,\n   fragments of distinct frames must not be interleaved.  If the\n  \
    \ fragmenting FR-LSR ensures the transmission in sequence of all\n   fragments\
    \ of a frame, without interleaving with fragments of other\n   frames, then label\
    \ conservation (VC merging) can be performed.\n   When label conservation is used,\
    \ when a FR-LSR receives a binding\n   request from an upstream LSR for a certain\
    \ FEC, and it does already\n   have an outgoing label binding for that FEC, it\
    \ does not need to\n   issue a downstream binding request.  Instead, it may allocate\
    \ an\n   incoming label, and return that label in a binding to the upstream\n\
    \   requester.  Packets received from the requester, with that label as\n   top\
    \ label, will be forwarded after replacing the label with the\n   existing outgoing\
    \ label for that FEC.  If the FR-LSR does not have an\n   outgoing label binding\
    \ for that FEC, but does have an outstanding\n   request for one, it need not\
    \ issue another request.  This means that\n   in a label conservation case, a\
    \ FR-LSR must respond with a new\n   binding for every upstream request, but it\
    \ may need to send one\n   binding request downstream.\n   In case of label conservation,\
    \ if a change in the routing table\n   causes FR-LSR to select a new next hop\
    \ for one of its FECs, it MAY\n   release the binding for that route from the\
    \ former next hop.  If it\n   doesn't already have a corresponding binding for\
    \ the new next hop, it\n   must request one (note that the choice depends on the\
    \ label retention\n   mode [ARCH]).\n   If a new binding is obtained, which contain\
    \ a hop count that differs\n   from that of the old binding, the FR-LSR must process\
    \ the new hop\n   count: increment by 1, if different than \"unknown\", and notify\
    \ the\n   upstream neighbors who have label bindings for this FEC of the new\n\
    \   value.  To ensure that loops will be detected, if the new hop count\n   exceeds\
    \ the \"maximum\" value, the label values for this FEC must be\n   withdrawn from\
    \ all upstream neighbors to whom a binding was\n   previously sent.\n"
- title: 7.3   LDP messages specific to Frame Relay
  contents:
  - "7.3   LDP messages specific to Frame Relay\n   The Label Distribution Protocol\
    \ [LDP] messages exchanged between two\n   Frame Relay \"LDP-peer\" LSRs may contain\
    \ Frame Relay specific\n   information such as:\n   \"Frame Relay Label Range\"\
    :\n       0                   1                   2                   3\n    \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Reserved    |Len|               Minimum DLCI                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Reserved        |               Maximum DLCI                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   with the following fields:\n   Reserved\n      This fields are reserved. \
    \ They must be set to zero on\n      transmission and must be ignored on receipt.\n\
    \   Len\n      This field specifies the number of bits of the DLCI.  The\n   \
    \   following values are supported:\n          Len  DLCI bits\n          0   \
    \  10\n          2     23\n      Len values 1 and 3 are reserved for future use.\n\
    \   Minimum DLCI\n      This 23 bit field is the binary value of the lower bound\
    \ of a\n      block of Data Link Connection Identifiers (DLCIs) that is\n    \
    \  supported by the originating FR-LSR.  The Minimum DLCI should be\n      right\
    \ justified in this field and the preceding bits should be set\n      to 0.\n\
    \   Maximum DLCI\n      This 23 bit field is the binary value of the upper bound\
    \ of a\n      block of Data Link Connection Identifiers (DLCIs) that is\n    \
    \  supported by the originating FR-LSR.  The Maximum DLCI should be\n      right\
    \ justified in this field and the preceding bits should be set\n      to 0.\n\
    \   \"Frame Relay Merge\":\n          0 1 2 3 4 5 6 7\n         +-+-+-+-+-+-+-+-+\n\
    \         | Reserved    |M|\n         +-+-+-+-+-+-+-+-+\n      with the following\
    \ fields:\n   Merge\n      One bit field that specifies the merge capabilities\
    \ of the FR-LSR:\n      Value                  Meaning\n        0            \
    \        Merge NOT supported\n        1                    Merge supported\n \
    \     A FR-LSR that supports VC merging MUST ensure that fragmented\n      frames\
    \ from distinct incoming DLCIs are not interleaved on the\n      outgoing DLCI.\n\
    \   Reserved\n      This field is reserved.  It must be set to zero on transmission\n\
    \      and must be ignored on receipt.\n   and \"Frame Relay Label\":\n      \
    \ 0                   1                   2                   3\n       0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Reserved    |Len|                       DLCI                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   with\
    \ the following fields:\n   Reserved\n      This field is reserved.  It must be\
    \ set to zero on transmission and\n      must be ignored on receipt.\n   Len\n\
    \      This field specifies the number of bits of the DLCI.  The following\n \
    \     values are supported:\n          Len  DLCI bits\n          0     10\n  \
    \        2     23\n      Len values 1 and 3 are reserved for future use.\n   DLCI\n\
    \      The binary value of the Frame Relay Label.  The significant number\n  \
    \    of bits (10 or 23) of the label value are to be encoded into the\n      Data\
    \ Link Connection Identifier (DLCI) field when part of the\n      Frame Relay\
    \ data link header (see Section 4.).\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This section looks at the security aspects of:\n\
    \      (a) frame traffic,\n      (b) label distribution.\n   MPLS encapsulation\
    \ has no effect on authenticated or encrypted\n   network layer packets, that\
    \ is IP packets that are authenticated or\n   encrypted will incur no change.\n\
    \   The MPLS protocol has no mechanisms of its own to protect against\n   misdirection\
    \ of packets or the impersonation of an LSR by accident or\n   malicious intent.\n\
    \   Altering by accident or forgery an existent label in the DLCI field\n   of\
    \ the Frame Relay data link layer header of a frame or one or more\n   fields\
    \ in a potentially following label stack affects the forwarding\n   of that frame.\n\
    \   The label distribution mechanism can be secured by applying the\n   appropriate\
    \ level of security to the underlying protocol carrying\n   label information\
    \ - authentication or encryption - see [LDP].\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   The initial version of this document was derived from\
    \ the Label\n   Switching over ATM document [ATM].\n   Thanks for the extensive\
    \ reviewing and constructive comments from (in\n   alphabetical order) Dan Harrington,\
    \ Milan Merhar, Martin Mueller,\n   Eric Rosen.  Also thanks to George Swallow\
    \ for the suggestion to use\n   null encapsulation, and to Eric Gray for his reviewing.\n\
    \   Also thanks to Nancy Feldman and Bob Thomas for their collaboration\n   in\
    \ including the LDP messages specific to Frame Relay LSRs.\n"
- title: 10.  References
  contents:
  - "10.  References\n   [MIFR]  Bradley, T., Brown, C. and A. Malis, \"Multiprotocol\n\
    \           Interconnect over Frame Relay\", RFC 2427, September 1998.\n   [ARCH]\
    \  Rosen, E., Callon, R. and A. Vishwanathan, \"Multi-Protocol\n           Label\
    \ Switching Architecture\", RFC 3031, January 2001.\n   [LDP]   Andersson, L.,\
    \ Doolan, P., Feldman, N., Fredette, A. and R.\n           Thomas, \"Label Distribution\
    \ Protocol\", RFC 3036, January\n           2001.\n   [STACK] Rosen, E., Rehter,\
    \ Y., Tappan, D., Farinacci, D., Fedorkow,\n           G., Li, T. and A. Conta,\
    \ \"MPLS Label Stack Encoding\", RFC\n           3032, January 2001.\n   [ATM]\
    \   Davie, B., Lawrence, J., McCloghrie, M., Rosen, E., Swallow,\n           G.,\
    \ Rekhter, Y., and P. Doolan, \"Use of Label Switching with\n           ATM\"\
    , RFC 3035, January 2001.\n   [ITU]   International Telecommunications Union,\
    \ \"ISDN Data Link Layer\n           Specification for Frame Mode Bearer Services\"\
    , ITU-T\n           Recommendation Q.922, 1992.\n   [FRF]   Frame Relay Forum,\
    \ User-to-Network Implementation Agreement\n           (UNI), FRF 1.1, January\
    \ 19, 1996.\n"
- title: 11.  Authors' Addresses
  contents:
  - "11.  Authors' Addresses\n   Alex Conta\n   Transwitch Corporation\n   3 Enterprise\
    \ Drive\n   Shelton, CT 06484\n   Phone: 1-203-929-8810\n   EMail: aconta@txc.com\n\
    \   Paul Doolan\n   Ennovate Networks\n   60 Codman Hill Rd\n   Boxborough MA\
    \ 01719\n   Phone: 1-978-263-2002\n   EMail: pdoolan@ennovatenetworks.com\n  \
    \ Andrew G. Malis\n   Vivace Networks, Inc.\n   2730 Orchard Parkway\n   San Jose,\
    \ CA 95134\n   USA\n   Phone: 1-408-383-7223\n   Fax:   1-408-904-4748\n   EMail:\
    \ Andy.Malis@vivacenetworks.com\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2001).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
