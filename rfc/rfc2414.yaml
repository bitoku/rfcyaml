- title: __initial_text__
  contents:
  - '                    Increasing TCP''s Initial Window

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an increase in the permitted initial window\n\
    \   for TCP from one segment to roughly 4K bytes.  This document\n   discusses\
    \ the advantages and disadvantages of such a change,\n   outlining experimental\
    \ results that indicate the costs and benefits\n   of such a change to TCP.\n"
- title: Terminology
  contents:
  - "Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 1.  TCP Modification
  contents:
  - "1.  TCP Modification\n   This document specifies an increase in the permitted\
    \ upper bound for\n   TCP's initial window from one segment to between two and\
    \ four\n   segments.  In most cases, this change results in an upper bound on\n\
    \   the initial window of roughly 4K bytes (although given a large\n   segment\
    \ size, the permitted initial window of two segments could be\n   significantly\
    \ larger than 4K bytes).  The upper bound for the initial\n   window is given\
    \ more precisely in (1):\n          min (4*MSS, max (2*MSS, 4380 bytes))     \
    \          (1)\n   Equivalently, the upper bound for the initial window size is\
    \ based on\n   the maximum segment size (MSS), as follows:\n        If (MSS <=\
    \ 1095 bytes)\n            then win <= 4 * MSS;\n        If (1095 bytes < MSS\
    \ < 2190 bytes)\n            then win <= 4380;\n        If (2190 bytes <= MSS)\n\
    \            then win <= 2 * MSS;\n   This increased initial window is optional:\
    \ that a TCP MAY start with\n   a larger initial window, not that it SHOULD.\n\
    \   This upper bound for the initial window size represents a change from\n  \
    \ RFC 2001 [S97], which specifies that the congestion window be\n   initialized\
    \ to one segment.  If implementation experience proves\n   successful, then the\
    \ intent is for this change to be incorporated\n   into a revision to RFC 2001.\n\
    \   This change applies to the initial window of the connection in the\n   first\
    \ round trip time (RTT) of transmission following the TCP three-\n   way handshake.\
    \  Neither the SYN/ACK nor its acknowledgment (ACK) in\n   the three-way handshake\
    \ should increase the initial window size above\n   that outlined in equation\
    \ (1).  If the SYN or SYN/ACK is lost, the\n   initial window used by a sender\
    \ after a correctly transmitted SYN\n   MUST be one segment.\n   TCP implementations\
    \ use slow start in as many as three different\n   ways: (1) to start a new connection\
    \ (the initial window); (2) to\n   restart a transmission after a long idle period\
    \ (the restart window);\n   and (3) to restart after a retransmit timeout (the\
    \ loss window).  The\n   change proposed in this document affects the value of\
    \ the initial\n   window.  Optionally, a TCP MAY set the restart window to the\
    \ minimum\n   of the value used for the initial window and the current value of\n\
    \   cwnd (in other words, using a larger value for the restart window\n   should\
    \ never increase the size of cwnd).  These changes do NOT change\n   the loss\
    \ window, which must remain 1 segment (to permit the lowest\n   possible window\
    \ size in the case of severe congestion).\n"
- title: 2.  Implementation Issues
  contents:
  - "2.  Implementation Issues\n   When larger initial windows are implemented along\
    \ with Path MTU\n   Discovery [MD90], and the MSS being used is found to be too\
    \ large,\n   the congestion window `cwnd' SHOULD be reduced to prevent large\n\
    \   bursts of smaller segments.  Specifically, `cwnd' SHOULD be reduced\n   by\
    \ the ratio of the old segment size to the new segment size.\n   When larger initial\
    \ windows are implemented along with Path MTU\n   Discovery [MD90], alternatives\
    \ are to set the \"Don't Fragment\" (DF)\n   bit in all segments in the initial\
    \ window, or to set the \"Don't\n   Fragment\" (DF) bit in one of the segments.\
    \  It is an open question\n   which of these two alternatives is best; we would\
    \ hope that\n   implementation experiences will shed light on this.  In the first\n\
    \   case of setting the DF bit in all segments, if the initial packets\n   are\
    \ too large, then all of the initial packets will be dropped in the\n   network.\
    \  In the second case of setting the DF bit in only one\n   segment, if the initial\
    \ packets are too large, then all but one of\n   the initial packets will be fragmented\
    \ in the network.  When the\n   second case is followed, setting the DF bit in\
    \ the last segment in\n   the initial window provides the least chance for needless\n\
    \   retransmissions when the initial segment size is found to be too\n   large,\
    \ because it minimizes the chances of duplicate ACKs triggering\n   a Fast Retransmit.\
    \  However, more attention needs to be paid to the\n   interaction between larger\
    \ initial windows and Path MTU Discovery.\n   The larger initial window proposed\
    \ in this document is not intended\n   as an encouragement for web browsers to\
    \ open multiple simultaneous\n   TCP connections all with large initial windows.\
    \  When web browsers\n   open simultaneous TCP connections to the same destination,\
    \ this works\n   against TCP's congestion control mechanisms [FF98], regardless\
    \ of the\n   size of the initial window.  Combining this behavior with larger\n\
    \   initial windows further increases the unfairness to other traffic in\n   the\
    \ network.\n"
- title: 3.  Advantages of Larger Initial Windows
  contents:
  - "3.  Advantages of Larger Initial Windows\n   1.  When the initial window is one\
    \ segment, a receiver employing\n       delayed ACKs [Bra89] is forced to wait\
    \ for a timeout before\n       generating an ACK.  With an initial window of at\
    \ least two\n       segments, the receiver will generate an ACK after the second\
    \ data\n       segment arrives.  This eliminates the wait on the timeout (often\n\
    \       up to 200 msec).\n   2.  For connections transmitting only a small amount\
    \ of data, a\n       larger initial window reduces the transmission time (assuming\
    \ at\n       most moderate segment drop rates).  For many email (SMTP [Pos82])\n\
    \       and web page (HTTP [BLFN96, FJGFBL97]) transfers that are less\n     \
    \  than 4K bytes, the larger initial window would reduce the data\n       transfer\
    \ time to a single RTT.\n   3.  For connections that will be able to use large\
    \ congestion\n       windows, this modification eliminates up to three RTTs and\
    \ a\n       delayed ACK timeout during the initial slow-start phase.  This\n \
    \      would be of particular benefit for high-bandwidth large-\n       propagation-delay\
    \ TCP connections, such as those over satellite\n       links.\n"
- title: 4.  Disadvantages of Larger Initial Windows for the Individual
  contents:
  - "4.  Disadvantages of Larger Initial Windows for the Individual\n    Connection\n\
    \   In high-congestion environments, particularly for routers that have a\n  \
    \ bias against bursty traffic (as in the typical Drop Tail router\n   queues),\
    \ a TCP connection can sometimes be better off starting with\n   an initial window\
    \ of one segment.  There are scenarios where a TCP\n   connection slow-starting\
    \ from an initial window of one segment might\n   not have segments dropped, while\
    \ a TCP connection starting with an\n   initial window of four segments might\
    \ experience unnecessary\n   retransmits due to the inability of the router to\
    \ handle small\n   bursts.  This could result in an unnecessary retransmit timeout.\
    \  For\n   a large-window connection that is able to recover without a\n   retransmit\
    \ timeout, this could result in an unnecessarily-early\n   transition from the\
    \ slow-start to the congestion-avoidance phase of\n   the window increase algorithm.\
    \  These premature segment drops are\n   unlikely to occur in uncongested networks\
    \ with sufficient buffering\n   or in moderately-congested networks where the\
    \ congested router uses\n   active queue management (such as Random Early Detection\
    \ [FJ93,\n   RFC2309]).\n   Some TCP connections will receive better performance\
    \ with the higher\n   initial window even if the burstiness of the initial window\
    \ results\n   in premature segment drops.  This will be true if (1) the TCP\n\
    \   connection recovers from the segment drop without a retransmit\n   timeout,\
    \ and (2) the TCP connection is ultimately limited to a small\n   congestion window\
    \ by either network congestion or by the receiver's\n   advertised window.\n"
- title: 5.  Disadvantages of Larger Initial Windows for the Network
  contents:
  - "5.  Disadvantages of Larger Initial Windows for the Network\n   In terms of the\
    \ potential for congestion collapse, we consider two\n   separate potential dangers\
    \ for the network.  The first danger would\n   be a scenario where a large number\
    \ of segments on congested links\n   were duplicate segments that had already\
    \ been received at the\n   receiver.  The second danger would be a scenario where\
    \ a large number\n   of segments on congested links were segments that would be\
    \ dropped\n   later in the network before reaching their final destination.\n\
    \   In terms of the negative effect on other traffic in the network, a\n   potential\
    \ disadvantage of larger initial windows would be that they\n   increase the general\
    \ packet drop rate in the network.  We discuss\n   these three issues below.\n\
    \   Duplicate segments:\n       As described in the previous section, the larger\
    \ initial window\n       could occasionally result in a segment dropped from the\
    \ initial\n       window, when that segment might not have been dropped if the\n\
    \       sender had slow-started from an initial window of one segment.\n     \
    \  However, Appendix A shows that even in this case, the larger\n       initial\
    \ window would not result in the transmission of a large\n       number of duplicate\
    \ segments.\n   Segments dropped later in the network:\n       How much would\
    \ the larger initial window for TCP increase the\n       number of segments on\
    \ congested links that would be dropped\n       before reaching their final destination?\
    \  This is a problem that\n       can only occur for connections with multiple\
    \ congested links,\n       where some segments might use scarce bandwidth on the\
    \ first\n       congested link along the path, only to be dropped later along\
    \ the\n       path.\n       First, many of the TCP connections will have only\
    \ one congested\n       link along the path.  Segments dropped from these connections\
    \ do\n       not \"waste\" scarce bandwidth, and do not contribute to congestion\n\
    \       collapse.\n       However, some network paths will have multiple congested\
    \ links,\n       and segments dropped from the initial window could use scarce\n\
    \       bandwidth along the earlier congested links before ultimately\n      \
    \ being dropped on subsequent congested links.  To the extent that\n       the\
    \ drop rate is independent of the initial window used by TCP\n       segments,\
    \ the problem of congested links carrying segments that\n       will be dropped\
    \ before reaching their destination will be similar\n       for TCP connections\
    \ that start by sending four segments or one\n       segment.\n   An increased\
    \ packet drop rate:\n       For a network with a high segment drop rate, increasing\
    \ the TCP\n       initial window could increase the segment drop rate even further.\n\
    \       This is in part because routers with Drop Tail queue management\n    \
    \   have difficulties with bursty traffic in times of congestion.\n       However,\
    \ given uncorrelated arrivals for TCP connections, the\n       larger TCP initial\
    \ window should not significantly increase the\n       segment drop rate.  Simulation-based\
    \ explorations of these issues\n       are discussed in Section 7.2.\n   These\
    \ potential dangers for the network are explored in simulations\n   and experiments\
    \ described in the section below.  Our judgement would\n   be, while there are\
    \ dangers of congestion collapse in the current\n   Internet (see [FF98] for a\
    \ discussion of the dangers of congestion\n   collapse from an increased deployment\
    \ of UDP connections without\n   end-to-end congestion control), there is no such\
    \ danger to the\n   network from increasing the TCP initial window to 4K bytes.\n"
- title: 6.  Typical Levels of Burstiness for TCP Traffic.
  contents:
  - "6.  Typical Levels of Burstiness for TCP Traffic.\n   Larger TCP initial windows\
    \ would not dramatically increase the\n   burstiness of TCP traffic in the Internet\
    \ today, because such traffic\n   is already fairly bursty.  Bursts of two and\
    \ three segments are\n   already typical of TCP [Flo97]; A delayed ACK (covering\
    \ two\n   previously unacknowledged segments) received during congestion\n   avoidance\
    \ causes the congestion window to slide and two segments to\n   be sent.  The\
    \ same delayed ACK received during slow start causes the\n   window to slide by\
    \ two segments and then be incremented by one\n   segment, resulting in a three-segment\
    \ burst.  While not necessarily\n   typical, bursts of four and five segments\
    \ for TCP are not rare.\n   Assuming delayed ACKs, a single dropped ACK causes\
    \ the subsequent ACK\n   to cover four previously unacknowledged segments.  During\
    \ congestion\n   avoidance this leads to a four-segment burst and during slow\
    \ start a\n   five-segment burst is generated.\n   There are also changes in progress\
    \ that reduce the performance\n   problems posed by moderate traffic bursts. \
    \ One such change is the\n   deployment of higher-speed links in some parts of\
    \ the network, where\n   a burst of 4K bytes can represent a small quantity of\
    \ data.  A second\n   change, for routers with sufficient buffering, is the deployment\
    \ of\n   queue management mechanisms such as RED, which is designed to be\n  \
    \ tolerant of transient traffic bursts.\n"
- title: 7.  Simulations and Experimental Results
  contents:
  - '7.  Simulations and Experimental Results

    '
- title: 7.1 Studies of TCP Connections using that Larger Initial Window
  contents:
  - "7.1 Studies of TCP Connections using that Larger Initial Window\n   This section\
    \ surveys simulations and experiments that have been used\n   to explore the effect\
    \ of larger initial windows on the TCP connection\n   using that larger window.\
    \  The first set of experiments explores\n   performance over satellite links.\
    \  Larger initial windows have been\n   shown to improve performance of TCP connections\
    \ over satellite\n   channels [All97b].  In this study, an initial window of four\
    \ segments\n   (512 byte MSS) resulted in throughput improvements of up to 30%\n\
    \   (depending upon transfer size).  [KAGT98] shows that the use of\n   larger\
    \ initial windows results in a decrease in transfer time in HTTP\n   tests over\
    \ the ACTS satellite system.  A study involving simulations\n   of a large number\
    \ of HTTP transactions over hybrid fiber coax (HFC)\n   indicates that the use\
    \ of larger initial windows decreases the time\n   required to load WWW pages\
    \ [Nic97].\n   A second set of experiments has explored TCP performance over dialup\n\
    \   modem links.  In experiments over a 28.8 bps dialup channel [All97a,\n   AHO98],\
    \ a four-segment initial window decreased the transfer time of\n   a 16KB file\
    \ by roughly 10%, with no accompanying increase in the drop\n   rate.  A particular\
    \ area of concern has been TCP performance over low\n   speed tail circuits (e.g.,\
    \ dialup modem links) with routers with\n   small buffers.  A simulation study\
    \ [SP97] investigated the effects of\n   using a larger initial window on a host\
    \ connected by a slow modem\n   link and a router with a 3 packet buffer.  The\
    \ study concluded that\n   for the scenario investigated, the use of larger initial\
    \ windows was\n   not harmful to TCP performance.  Questions have been raised\n\
    \   concerning the effects of larger initial windows on the transfer time\n  \
    \ for short transfers in this environment, but these effects have not\n   been\
    \ quantified.  A question has also been raised concerning the\n   possible effect\
    \ on existing TCP connections sharing the link.\n"
- title: 7.2 Studies of Networks using Larger Initial Windows
  contents:
  - "7.2 Studies of Networks using Larger Initial Windows\n   This section surveys\
    \ simulations and experiments investigating the\n   impact of the larger window\
    \ on other TCP connections sharing the\n   path.  Experiments in [All97a, AHO98]\
    \ show that for 16 KB transfers\n   to 100 Internet hosts, four-segment initial\
    \ windows resulted in a\n   small increase in the drop rate of 0.04 segments/transfer.\
    \  While the\n   drop rate increased slightly, the transfer time was reduced by\n\
    \   roughly 25% for transfers using the four-segment (512 byte MSS)\n   initial\
    \ window when compared to an initial window of one segment.\n   One scenario of\
    \ concern is heavily loaded links.  For instance, a\n   couple of years ago, one\
    \ of the trans-Atlantic links was so heavily\n   loaded that the correct congestion\
    \ window size for a connection was\n   about one segment.  In this environment,\
    \ new connections using larger\n   initial windows would be starting with windows\
    \ that were four times\n   too big.  What would the effects be?  Do connections\
    \ thrash?\n   A simulation study in [PN98] explores the impact of a larger initial\n\
    \   window on competing network traffic.  In this investigation, HTTP and\n  \
    \ FTP flows share a single congested gateway (where the number of HTTP\n   and\
    \ FTP flows varies from one simulation set to another).  For each\n   simulation\
    \ set, the paper examines aggregate link utilization and\n   packet drop rates,\
    \ median web page delay, and network power for the\n   FTP transfers.  The larger\
    \ initial window generally resulted in\n   increased throughput, slightly-increased\
    \ packet drop rates, and an\n   increase in overall network power.  With the exception\
    \ of one\n   scenario, the larger initial window resulted in an increase in the\n\
    \   drop rate of less than 1% above the loss rate experienced when using\n   a\
    \ one-segment initial window; in this scenario, the drop rate\n   increased from\
    \ 3.5% with one-segment initial windows, to 4.5% with\n   four-segment initial\
    \ windows.  The overall conclusions were that\n   increasing the TCP initial window\
    \ to three packets (or 4380 bytes)\n   helps to improve perceived performance.\n\
    \   Morris [Mor97] investigated larger initial windows in a very\n   congested\
    \ network with transfers of size 20K.  The loss rate in\n   networks where all\
    \ TCP connections use an initial window of four\n   segments is shown to be 1-2%\
    \ greater than in a network where all\n   connections use an initial window of\
    \ one segment.  This relationship\n   held in scenarios where the loss rates with\
    \ one-segment initial\n   windows ranged from 1% to 11%.  In addition, in networks\
    \ where\n   connections used an initial window of four segments, TCP connections\n\
    \   spent more time waiting for the retransmit timer (RTO) to expire to\n   resend\
    \ a segment than was spent when using an initial window of one\n   segment.  The\
    \ time spent waiting for the RTO timer to expire\n   represents idle time when\
    \ no useful work was being accomplished for\n   that connection.  These results\
    \ show that in a very congested\n   environment, where each connection's share\
    \ of the bottleneck\n   bandwidth is close to one segment, using a larger initial\
    \ window can\n   cause a perceptible increase in both loss rates and retransmit\n\
    \   timeouts.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document discusses the initial congestion\
    \ window permitted for\n   TCP connections.  Changing this value does not raise\
    \ any known new\n   security issues with TCP.\n"
- title: 9.  Conclusion
  contents:
  - "9.  Conclusion\n   This document proposes a small change to TCP that may be beneficial\n\
    \   to short-lived TCP connections and those over links with long RTTs\n   (saving\
    \ several RTTs during the initial slow-start phase).\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   We would like to acknowledge Vern Paxson, Tim Shepard,\
    \ members of the\n   End-to-End-Interest Mailing List, and members of the IETF\
    \ TCP\n   Implementation Working Group for continuing discussions of these\n \
    \  issues for discussions and feedback on this document.\n"
- title: 11.  References
  contents:
  - "11.  References\n   [All97a]    Mark Allman.  An Evaluation of TCP with Larger\
    \ Initial\n               Windows.  40th IETF Meeting -- TCP Implementations WG.\n\
    \               December, 1997.  Washington, DC.\n   [AHO98]     Mark Allman,\
    \ Chris Hayes, and Shawn Ostermann, An\n               Evaluation of TCP with\
    \ Larger Initial Windows, March\n               1998.  Submitted to ACM Computer\
    \ Communication Review.\n               URL: \"http://gigahertz.lerc.nasa.gov/~mallman/papers/\n\
    \               initwin.ps\".\n   [All97b]    Mark Allman.  Improving TCP Performance\
    \ Over Satellite\n               Channels.  Master's thesis, Ohio University,\
    \ June 1997.\n   [BLFN96]    Berners-Lee, T., Fielding, R., and H. Nielsen, \"\
    Hypertext\n               Transfer Protocol -- HTTP/1.0\", RFC 1945, May 1996.\n\
    \   [Bra89]     Braden, R., \"Requirements for Internet Hosts --\n           \
    \    Communication Layers\", STD 3, RFC 1122, October 1989.\n   [FF96]      Fall,\
    \ K., and Floyd, S., Simulation-based Comparisons of\n               Tahoe, Reno,\
    \ and SACK TCP.  Computer Communication\n               Review, 26(3), July 1996.\n\
    \   [FF98]      Sally Floyd, Kevin Fall.  Promoting the Use of End-to-End\n  \
    \             Congestion Control in the Internet.  Submitted to IEEE\n       \
    \        Transactions on Networking.  URL \"http://www-\n               nrg.ee.lbl.gov/floyd/end2end-paper.html\"\
    .\n   [FJGFBL97]  Fielding, R., Mogul, J., Gettys, J., Frystyk, H., and T.\n \
    \              Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\",\n   \
    \            RFC 2068, January 1997.\n   [FJ93]      Floyd, S., and Jacobson,\
    \ V., Random Early Detection\n               gateways for Congestion Avoidance.\
    \ IEEE/ACM Transactions\n               on Networking, V.1 N.4, August 1993, p.\
    \ 397-413.\n   [Flo94]     Floyd, S., TCP and Explicit Congestion Notification.\n\
    \               Computer Communication Review, 24(5):10-23, October 1994.\n  \
    \ [Flo96]     Floyd, S., Issues of TCP with SACK. Technical report,\n        \
    \       January 1996.  Available from http://www-\n               nrg.ee.lbl.gov/floyd/.\n\
    \   [Flo97]     Floyd, S., Increasing TCP's Initial Window.  Viewgraphs,\n   \
    \            40th IETF Meeting - TCP Implementations WG. December,\n         \
    \      1997.  URL \"ftp://ftp.ee.lbl.gov/talks/sf-tcp-ietf97.ps\".\n   [KAGT98]\
    \    Hans Kruse, Mark Allman, Jim Griner, Diepchi Tran.  HTTP\n              \
    \ Page Transfer Rates Over Geo-Stationary Satellite Links.\n               March\
    \ 1998.  Proceedings of the Sixth International\n               Conference on\
    \ Telecommunication Systems.  URL\n               \"http://gigahertz.lerc.nasa.gov/~mallman/papers/nash98.ps\"\
    .\n   [MD90]      Mogul, J., and S. Deering, \"Path MTU Discovery\", RFC\n   \
    \            1191, November 1990.\n   [MMFR96]    Mathis, M., Mahdavi, J., Floyd,\
    \ S., and A. Romanow, \"TCP\n               Selective Acknowledgment Options\"\
    , RFC 2018, October\n               1996.\n   [Mor97]     Robert Morris.  Private\
    \ communication, 1997.  Cited for\n               acknowledgement purposes only.\n\
    \   [Nic97]     Kathleen Nichols.  Improving Network Simulation with\n       \
    \        Feedback.  Com21, Inc. Technical Report.  Available from\n          \
    \     http://www.com21.com/pages/papers/068.pdf.\n   [PN98]      Poduri, K., and\
    \ K. Nichols, \"Simulation Studies of\n               Increased Initial TCP Window\
    \ Size\", RFC 2415, September\n               1998.\n   [Pos82]     Postel, J.,\
    \ \"Simple Mail Transfer Protocol\", STD 10, RFC\n               821, August 1982.\n\
    \   [RF97]      Ramakrishnan, K., and S. Floyd, \"A Proposal to Add\n        \
    \       Explicit Congestion Notification (ECN) to IPv6 and to\n              \
    \ TCP\", Work in Progress.\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2309]   Braden, B., Clark, D., Crowcroft, J., Davie, B., Deering,\n\
    \               S., Estrin, D., Floyd, S., Jacobson, V., Minshall, G.,\n     \
    \          Partridge, C., Peterson, L., Ramakrishnan, K., Shenker,\n         \
    \      S., Wroclawski, J., and L.  Zhang, \"Recommendations on\n             \
    \  Queue Management and Congestion Avoidance in the\n               Internet\"\
    , RFC 2309, April 1998.\n   [S97]       Stevens, W., \"TCP Slow Start, Congestion\
    \ Avoidance, Fast\n               Retransmit, and Fast Recovery Algorithms\",\
    \ RFC 2001,\n               January 1997.\n   [SP97]      Shepard, T., and C.\
    \ Partridge, \"When TCP Starts Up With\n               Four Packets Into Only\
    \ Three Buffers\", RFC 2416,\n               September 1998.\n"
- title: 12.  Author's Addresses
  contents:
  - "12.  Author's Addresses\n   Mark Allman\n   NASA Lewis Research Center/Sterling\
    \ Software\n   21000 Brookpark Road\n   MS 54-2\n   Cleveland, OH 44135\n   EMail:\
    \ mallman@lerc.nasa.gov\n   http://gigahertz.lerc.nasa.gov/~mallman/\n   Sally\
    \ Floyd\n   Lawrence Berkeley National Laboratory\n   One Cyclotron Road\n   Berkeley,\
    \ CA 94720\n   EMail: floyd@ee.lbl.gov\n   Craig Partridge\n   BBN Technologies\n\
    \   10 Moulton Street\n   Cambridge, MA 02138\n   EMail: craig@bbn.com\n"
- title: 13.  Appendix - Duplicate Segments
  contents:
  - "13.  Appendix - Duplicate Segments\n   In the current environment (without Explicit\
    \ Congestion Notification\n   [Flo94] [RF97]), all TCPs use segment drops as indications\
    \ from the\n   network about the limits of available bandwidth.  We argue here\
    \ that\n   the change to a larger initial window should not result in the sender\n\
    \   retransmitting a large number of duplicate segments that have already\n  \
    \ been received at the receiver.\n   If one segment is dropped from the initial\
    \ window, there are three\n   different ways for TCP to recover: (1) Slow-starting\
    \ from a window of\n   one segment, as is done after a retransmit timeout, or\
    \ after Fast\n   Retransmit in Tahoe TCP; (2) Fast Recovery without selective\n\
    \   acknowledgments (SACK), as is done after three duplicate ACKs in Reno\n  \
    \ TCP; and (3) Fast Recovery with SACK, for TCP where both the sender\n   and\
    \ the receiver support the SACK option [MMFR96].  In all three\n   cases, if a\
    \ single segment is dropped from the initial window, no\n   duplicate segments\
    \ (i.e., segments that have already been received at\n   the receiver) are transmitted.\
    \  Note that for a TCP sending four\n   512-byte segments in the initial window,\
    \ a single segment drop will\n   not require a retransmit timeout, but can be\
    \ recovered from using the\n   Fast Retransmit algorithm (unless the retransmit\
    \ timer expires\n   prematurely).  In addition, a single segment dropped from\
    \ an initial\n   window of three segments might be repaired using the fast retransmit\n\
    \   algorithm, depending on which segment is dropped and whether or not\n   delayed\
    \ ACKs are used.  For example, dropping the first segment of a\n   three segment\
    \ initial window will always require waiting for a\n   timeout.  However, dropping\
    \ the third segment will always allow\n   recovery via the fast retransmit algorithm,\
    \ as long as no ACKs are\n   lost.\n   Next we consider scenarios where the initial\
    \ window contains two to\n   four segments, and at least two of those segments\
    \ are dropped.  If\n   all segments in the initial window are dropped, then clearly\
    \ no\n   duplicate segments are retransmitted, as the receiver has not yet\n \
    \  received any segments.  (It is still a possibility that these dropped\n   segments\
    \ used scarce bandwidth on the way to their drop point; this\n   issue was discussed\
    \ in Section 5.)\n   When two segments are dropped from an initial window of three\n\
    \   segments, the sender will only send a duplicate segment if the first\n   two\
    \ of the three segments were dropped, and the sender does not\n   receive a packet\
    \ with the SACK option acknowledging the third\n   segment.\n   When two segments\
    \ are dropped from an initial window of four\n   segments, an examination of the\
    \ six possible scenarios (which we\n   don't go through here) shows that, depending\
    \ on the position of the\n   dropped packets, in the absence of SACK the sender\
    \ might send one\n   duplicate segment.  There are no scenarios in which the sender\
    \ sends\n   two duplicate segments.\n   When three segments are dropped from an\
    \ initial window of four\n   segments, then, in the absence of SACK, it is possible\
    \ that one\n   duplicate segment will be sent, depending on the position of the\n\
    \   dropped segments.\n   The summary is that in the absence of SACK, there are\
    \ some scenarios\n   with multiple segment drops from the initial window where\
    \ one\n   duplicate segment will be transmitted.  There are no scenarios where\n\
    \   more that one duplicate segment will be transmitted.  Our conclusion\n   is\
    \ that the number of duplicate segments transmitted as a result of a\n   larger\
    \ initial window should be small.\n"
- title: 14.  Full Copyright Statement
  contents:
  - "14.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
