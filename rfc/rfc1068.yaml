- title: __initial_text__
  contents:
  - '                Background File Transfer Program (BFTP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo describes an Internet background file transfer\
    \ service that\n   is built upon the third-party transfer model of FTP.  No new\n\
    \   protocols are involved.  The purpose of this memo is to stimulate\n   discussion\
    \ on new Internet service modes.  Distribution of this memo\n   is unlimited.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   For a variety of reasons, file transfer in the Internet has\
    \ generally\n   been implemented as an interactive or \"foreground\" service.\
    \  That is,\n   a user runs the appropriate local FTP user interface program as\
    \ an\n   interactive command and requests a file transfer to occur in real\n \
    \  time.  If the transfer should fail to complete for any reason, the\n   user\
    \ must reissue the transfer request.  Foreground file transfer is\n   relatively\
    \ simple to implement -- no subtleties of queuing or stable\n   storage -- and\
    \ in the early days of networking it provided excellent\n   service, because the\
    \ Internet/ARPANET was lightly loaded and\n   reasonably reliable.\n   More recently,\
    \ the Internet has become increasingly subject to\n   congestion and long delays,\
    \ particularly during times of peak usage.\n   In addition, as more of the world\
    \ becomes interconnected, planned and\n   unplanned outages of hosts, gateways,\
    \ and networks sometimes make it\n   difficult for users to successfully transfer\
    \ files in foreground.\n   Performing file transfer asynchronously (i.e., in \"\
    background\"),\n   provides a solution to some of these problems, by eliminating\
    \ the\n   requirement for a human user to be directly involved at the time that\n\
    \   a file transfer takes place.  A background file transfer service\n   requires\
    \ two components: a user interface program to collect the\n   parameters describing\
    \ the required transfer(s), and a file transfer\n   control (FTC) daemon to carry\
    \ them out.\n   Background file transfer has a number of potential advantages\
    \ for a\n   user:\n   o    No Waiting\n        The user can request a large transfer\
    \ and ignore it until a\n        notification message arrives through some common\
    \ channel (e.g.,\n        electronic mail).\n   o    End-to-end Reliability\n\
    \        The FTC daemon can try a transfer repeatedly until it either\n      \
    \  succeeds or fails permanently.  This provides reliable end-to-\n        end\
    \ delivery of a file, in spite of the source or destination\n        host being\
    \ down or poor Internet connectivity during some time\n        period.\n   o \
    \   Multiple File Delivery\n        In order for background file transfer to be\
    \ accepted in the\n        Internet, it may have to include some \"value-added\"\
    \ services.\n        One such service would be an implementation of a multiple\
    \ file\n        transfer capability for all hosts.  Such a facility is suggested\n\
    \        in RFC-959 (see the description of \"NLST\") and implemented in\n   \
    \     some User-FTP programs.\n   o    Deferred Delivery\n        The user may\
    \ wish to defer a large transfer until an off-peak\n        period.  This may\
    \ become important when parts of the Internet\n        adopt accounting and traffic-based\
    \ cost-recovery mechanisms.\n   There is a serious human-engineering problem with\
    \ background file\n   transfer: if the user makes a mistake in entering parameters,\
    \ this\n   mistake may not become apparent until much later.  This can be the\n\
    \   cause of severe user frustration.  To avoid this problem, the user\n   interface\
    \ program ought to verify the correctness of as many of the\n   parameters as\
    \ possible when they are entered.  Of course, such\n   foreground verification\
    \ of parameters is not possible if the remote\n   host to which the parameters\
    \ apply is currently unreachable.\n   To explore the usefulness of background\
    \ file transfer in the present\n   Internet, we have implemented a file-mover\
    \ service which we call the\n   Background File Transfer Program or BFTP.\n  \
    \ Section 2 describes BFTP and Section 3 presents our experience and\n   conclusions.\
    \  The appendices contain detailed information about the\n   user interface language\
    \ for BFTP, a description of the program\n   organization, and sample execution\
    \ scripts.\n"
- title: 2. Background File Transfer Program
  contents:
  - "2. Background File Transfer Program\n   2.1 General Model\n      In the present\
    \ BFTP design, its user interface program and its FTC\n      daemon program must\
    \ execute on the same host, which we call the\n      BFTP control host.\n    \
    \  Through the user interface program, a BFTP user will supply all of\n      the\
    \ parameters needed to transfer a file from source host S to\n      destination\
    \ host D, where S and D may be different from the BFTP\n      control host.  These\
    \ parameters include:\n      o    S and D host names,\n      o    login names\
    \ and passwords on S and D hosts, and\n      o    S and D file names (and optionally,\
    \ directories).\n      The user may also specify a number of optional control\
    \ parameters:\n      *    Source file disposition -- Copy, move (i.e., copy and\n\
    \           delete), or simply delete the source file.  The default is\n     \
    \      copy.\n      *    Destination file operation -- Create/Replace, append\
    \ to, or\n           create a unique destination file.  The default is\n     \
    \      create/replace (\"STOR\").\n      *    FTP Parameters -- Explicitly set\
    \ any of the FTP type, mode,\n           or structure parameters at S and D hosts.\n\
    \      *    Multiple Transfers -- Enable \"wildcard\" matching to perform\n  \
    \         multiple transfers.\n      *    Start Time -- Set the time of day for\
    \ the first attempt of\n           the transfer. The default is \"now\" (i.e.,\
    \ make the first\n           attempt as soon as the request has been queued for\
    \ the FTC\n           daemon).\n      Finally, the user specifies a mailbox to\
    \ which a completion\n      notification message will be sent, and \"submits\"\
    \ the request to\n      the FTC daemon queue.  The user can then exit the BFTP\
    \ user\n      interface program.\n      If the transfer should fail permanently,\
    \ the FTC daemon will send\n      a notification message to the user's mailbox.\
    \  In the event of a\n      temporary failure (e.g., a broken TCP connection),\
    \ the FTC daemon\n      will log the failure and retry the transfer after some\
    \ timeout\n      period.  The retry cycles will be repeated until the transfer\n\
    \      succeeds or until some maximum number of tries specified has been\n   \
    \   reached.  In either case, a notification message will then be sent\n     \
    \ to the user's mailbox.\n      The user can check on the progress of the transfer\
    \ by reentering\n      the BFTP user interface program, supplying a key that was\
    \ defined\n      with the request, and displaying the current status of the\n\
    \      request.  The user may then cancel the request or leave it in the\n   \
    \   queue.\n      The BFTP program includes a server-Telnet module, so it can\
    \ be\n      executed as a remotely-accessible service that can be reached via\n\
    \      a Telnet connection to the BFTP well-known port (152).  This\n      allows\
    \ a user on any Internet host to perform background file\n      transfers without\
    \ running BFTP locally, but instead opening a\n      Telnet connection to port\
    \ 152 on a BFTP service host.  Of course,\n      a user can also run the local\
    \ BFTP user interface program directly\n      on any host that supports it and\
    \ for which the user has login\n      privileges.\n      The next section discusses\
    \ how BFTP uses standard FTP servers to\n      perform the transfers, while the\
    \ following section covers the user\n      interface of BFTP.\n   2.2 File Transfer\
    \ Mechanics for BFTP\n      The BFTP makes use of the \"third party\" or \"Server-Server\"\
    \ model\n      incorporated in the Internet File Transfer Protocol [RFC-959].\n\
    \      Thus, the FTC daemon opens FTP control connections to the existing\n  \
    \    FTP servers on source host S and destination host D and instructs\n     \
    \ them to transfer the desired file(s) from S to D.  The S and D\n      hosts\
    \ may be any two Internet hosts supporting FTP servers (but at\n      least one\
    \ of them must support the FTP \"PASV\" command).  This\n      approach allows\
    \ the implementation of a background file transfer\n      capability for the entire\
    \ Internet at a very low cost.\n      Figure 1 illustrates the BFTP model of operation.\
    \  Note that the\n      BFTP control host is not necessarily the same as S or\
    \ D.  Figure 2\n      illustrates the FTP command interchange used in a typical\
    \ Server-\n      Server file transfer operation; this may be compared with the\n\
    \      User-Server FTP scenario illustrated in Section 7 of RFC-959.\n      Since\
    \ BFTP may be asked to transfer files between any two hosts in\n      the Internet,\
    \ it must support all the file types and transfer\n      modes that are defined\
    \ in RFC-959, not just a subset implemented\n      by particular hosts.\n    \
    \  BFTP supports the transfer of a set of files in a single request,\n      using\
    \ the standard technique:\n      (1)  Send an NLST command to the source host\
    \ S, specifying a\n           pathname containing \"wildcard\" characters.  The\
    \ reply will\n           contain a list of matching source file names.\n     \
    \ (2)  Execute a separate transfer operation for each file in this\n         \
    \  list.  The destination file name in each case is assumed to\n           be\
    \ the same as the source file name; this requires that these\n           names\
    \ be compatible with the naming conventions of D.\n      It will typically be\
    \ necessary to specify working directories for\n      the transfers at S and D,\
    \ so the file names will be simple,\n      unstructured names on each system.\n\
    \      This approach depends upon the wildcard matching capability of the\n  \
    \    source host S.  A more general implementation would acquire a\n      complete\
    \ list of the file names from the source host and do the\n      matching in the\
    \ FTC daemon, for example using a regular-expression\n      matcher.  Another\
    \ useful extension would be a general pattern-\n      matching file name transformation\
    \ capability (e.g., like the one\n      included in the 4.3BSD version of FTP)\
    \ to generate appropriate\n      destination pathnames for multiple requests.\n\
    \                    Figure 1 -- BFTP Model of Operation\n                   \
    \         ---------                        Remote\n                          \
    \ |  BFTP   |      (telnet)      o    User\n             Local         | Network\
    \ | <---------------- -|-\n             User  o       | Server  |            \
    \       / \\\n                  -|-       ---------\n                  / \\  |\
    \       |\n                       |       |\n                       |       |\n\
    \                       v       v\n                      -----------  (Submit\
    \    +---+\n                     | BFTP User |  request)  |---| Request\n    \
    \                 | Interface | ---------> |---| Queue\n                     \
    \ -----------             |---|\n                              .             \
    \  +---+\n                               .              /\n                  \
    \              .            /\n                    (foreground  .          / (try/retry\n\
    \                      request--   .        /   request)\n                   \
    \   see 2.3)     v      v\n                                   --------       \
    \          +---+\n                                  |  FTC   | ------------->\
    \ |   |  User\n                                  | Daemon |     Notify     | \
    \  | Mailbox\n                                   --------      Message    +---+\n\
    \                                  /        \\\n                             \
    \    /   FTP    \\\n                                /   Control  \\\n        \
    \                       /  Connections \\\n                      HOST S  v   \
    \             v  HOST D\n                       --------                --------\n\
    \                      |  FTP   | ===========> |  FTP   |\n                  \
    \    | Server |  file        | Server |\n                       --------    transfer\
    \    --------\n             Figure 2 -- Server-Server File Transfer\n        \
    \  Server FTP            BFTP Daemon             Server FTP\n            HOST\
    \ S                HOST C                  HOST D\n           ----------     \
    \      -----------             ----------\n                      <-------- Open\
    \ TCP Ctrl conn\n                           Open TCP Ctrl conn -------->\n   \
    \                   <-------- (log in)\n      (login confirm.) -------->\n   \
    \                                  (log in) -------->\n                      \
    \                       <-------- (login confirm.)\n                      <--------\
    \ TYPE, STRU, MODE, CWD\n       (confirmations) -------->\n                  \
    \      TYPE, STRU, MODE, CWD -------->\n                                     \
    \        <-------- (confirmations)\n                      <--------  PASV command\n\
    \          PASV confirm -------->\n                                 PORT command\
    \ -------->\n                                             <-------- PORT confirm\n\
    \                                  RETR file   -------->\n                   \
    \   <--------   STOR file\n                      <------------------------------\
    \ Open TCP Data conn\n                      <------------------------------ Send\
    \ file\n                      <------------------------------ Close Data conn\n\
    \                                            <-------- RETR confirm\n        \
    \  STOR confirm -------->\n                      <-------- QUIT command\n    \
    \                            QUIT command -------->\n       Close Ctrl conn -------->\n\
    \                                            <-------- Close Ctrl conn\n     \
    \ BFTP currently utilizes the following Server-FTP commands [RFC-\n      959]:\
    \ USER, PASS, ACCT, PASV, PORT, RETR, STOR, STOU, CWD, NLST,\n      MODE, STRU,\
    \ TYPE, and QUIT.\n      The FTC daemon attempts to work around FTP servers that\
    \ fail to\n      support certain commands.  For example, if a server does not\n\
    \      support the optional command \"CWD\", the FTC daemon will attempt to\n\
    \      construct a complete path name using the source directory name and\n  \
    \    the source file name.  However, it is necessary that at least one\n     \
    \ of the two hosts support the FTP passive (PASV) command.  While\n      many\
    \ FTP server implementations support do this command, some (in\n      particular,\
    \ the 4.2BSD FTP) do not.  The PASV command was\n      officially listed as being\
    \ optional in RFC-959.\n   2.3 Reliable Delivery\n      The reliable delivery\
    \ function of BFTP is analogous to reliable\n      delivery in a transport protocol\
    \ like TCP.  Both depend upon\n      repeated delivery attempts until success\
    \ is achieved, and in both\n      cases the choice of the retry interval requires\
    \ some care to\n      balance overhead against unresponsiveness.\n      Humans\
    \ are impatient, but even their impatience has a limit.  If\n      the file cannot\
    \ be transferred \"soon\", a human will turn to\n      another project; typically,\
    \ there is a tendency for the transfer\n      to become less urgent the longer\
    \ the wait.  The FTC daemon of BFTP\n      therefore starts each transfer request\
    \ with a very short retry\n      interval -- e.g., 10 minutes -- and then doubles\
    \ this interval for\n      successive retries, until a maximum interval -- e.g.,\
    \ 4 hours --\n      is reached.  This is essentially the exponential backoff algorithm\n\
    \      of the Ethernet, which is also used by transport protocols such as\n  \
    \    TCP, although BFTP and TCP have quite different rationales for the\n    \
    \  algorithm.\n      We must also define the meaning of reliable transmission\
    \ for a\n      multiple-transfer request.  For example, the set of files selected\n\
    \      by wildcard characters in a pathname is not well defined; the set\n   \
    \   may change while the request is pending, as files are created and\n      deleted.\
    \  Furthermore, it is unreasonable to regard the entire\n      multiple transfer\
    \ as a single atomic operation.  Suppose that\n      transferring a set of files\
    \ fails part way through; for an atomic\n      operation, the files which had\
    \ been successfully transferred would\n      have to be deleted pending the next\
    \ retry of the entire set.  This\n      would be ridiculously inefficient and\
    \ may be impossible (since the\n      communication path may be broken when it\
    \ is time to issue the\n      deletion requests).\n      BFTP addresses these\
    \ issues in the following manner:\n      *    For a multiple file operation, the\
    \ FTC daemon saves the file\n           name list returned by the first successful\
    \ NLST command in\n           the request queue entry.  This name list determines\
    \ the set\n           of source files for the transfer; there can be no later\n\
    \           additions to the set.\n      *    The FTC daemon maintains a transfer\
    \ status pointer.  On each\n           retry cycle, it tries to transfer only\
    \ those files that have\n           not already been successfully transferred.\n\
    \      *    The request is complete when all the individual file\n           transfers\
    \ have been successful, a permanent failure has\n           occured, or when the\
    \ retry limit is reached.\n      *    The notification message to the user lists\
    \ the status of each\n           of the multiple files.\n   2.4 BFTP User Interface\n\
    \      The purpose of BFTP is to simplify the file transfer process and\n    \
    \  to place the burden of reliability on the BFTP control host.  We\n      have\
    \ attempted to provide a \"user friendly\" command interface to\n      BFTP, similar\
    \ in flavor to the user interface of the TOPS-20\n      operating system.  This\
    \ interface provides extensive prompting,\n      defaulting, and help facilities\
    \ for every command.\n      For a list of all BFTP commands, the user may enter\
    \ \"?<Return>\" at\n      the main BFTP prompt (\"BFTP>\").  Entering \"help<Return>\"\
    \ and\n      \"explain<Return>\" will provide increasing levels of explanatory\n\
    \      material.  To obtain information on a particular command, \"help\n    \
    \  <command name><Return>\" may be entered.  The 'quit' or 'exit'\n      command\
    \ will exit from BFTP.  Command and subcommand names may be\n      abbreviated\
    \ to the shortest unique sequence for that context;\n      alternatively, a partial\
    \ name can be automatically completed by\n      typing <Return>.\n      The normal\
    \ procedure for a BFTP user is to set up a set of\n      parameters defining the\
    \ desired transfer and then submit the\n      request to the FTC daemon.  To give\
    \ the user the maximum\n      flexibility, BFTP supports three modes of submission:\n\
    \      o    Background Operation\n           To request a reliable background\
    \ file transfer, the user will\n           issue the BFTP 'submit' command to\
    \ the FTC daemon.\n      o    Foreground Verification, Background Operation\n\
    \           The BFTP 'verify' command may be used to ascertain that file\n   \
    \        transfer parameters are valid.  It causes BFTP to connect to\n      \
    \     the FTP servers on both the source and the destination hosts\n         \
    \  (if possible), log into both, verify the FTP parameters, and\n           verify\
    \ that the specified source file is present.\n           Once the 'verify' command\
    \ has successfully completed, the\n           user can issue the 'submit' command\
    \ to schedule the actual\n           file transfer.\n      o    Foreground Operation\n\
    \           The BFTP 'transfer' command will perform the specified\n         \
    \  third-party transfer in foreground mode.  This is illustrated\n           by\
    \ the dotted path bypassing the queue in Figure 1.\n      The easiest way to set\
    \ up the parameters is to issue the 'prompt'\n      command, which will prompt\
    \ the user for all of the basic\n      parameters required for most transfers.\
    \  Certain unusual\n      parameters must be set with the 'set' command (see Appendix\
    \ B for\n      details).\n      When entering any parameter, the following control\
    \ characters may\n      be used:\n      ?    will display help text for the parameter,\
    \ indicating its\n           meaning, the choices, and the default, and then reprompt\
    \ for\n           the parameter.\n      <ESC> will display the default value (or\
    \ the last value set) for\n           this parameter.  The user can accept this\
    \ default by entering\n           <Return>, or else erase it with Control-W and\
    \ enter a\n           different value for the parameter, followed by <Return>\
    \ to\n           accept the entered value.\n      <Control-W>\n           will\
    \ erase the value typed or displayed for current\n           parameter.\n    \
    \  <Return>\n           will accept the value displayed for this parameter, and\n\
    \           continue to the next parameter, if any.  If the user has not\n   \
    \        typed a value or used <ESC> to display the default, <Return>\n      \
    \     will display the default and then accept it.\n      It is important to provide\
    \ a means for a user to obtain status\n      information about an earlier request\
    \ or even to cancel an earlier\n      request.  However, these functions, especially\
    \ cancellation, must\n      be controlled by some user authentication.  We did\
    \ not want to\n      build a user authentication database with each BFTP instance\
    \ or\n      require login to BFTP itself, and there is no Internet-wide user\n\
    \      authentication mechanism.  We adopted the following weak\n      authentication\
    \ mechanism as a compromise:\n      *    When the 'submit' command is issued,\
    \ it prompts the user for\n           a character string called a \"keyword\"\
    , which recorded with\n           the request.\n      *    This keyword can be\
    \ entered later as the argument to a 'find'\n           command, which will display\
    \ the status of all requests with\n           matching keywords.\n      *    Similarly,\
    \ the keyword may be used to cancel the\n           corresponding request.\n \
    \     If two different users happen to choose the same keywords, of\n      course,\
    \ this scheme will not protect each other's requests from\n      accidental or\
    \ malicious cancellation.  However, a notification\n      message will be sent\
    \ at the time that a cancellation occurs.\n      To make a series of similar requests,\
    \ the user needs only to\n      change the individual parameters that differ from\
    \ the preceding\n      request and then issue a new 'submit' command, for each\
    \ request.\n      There are commands for individually setting each of the parameters\n\
    \      that 'prompt' sets -- and 'time' -- to provide a shortcut for BFTP\n  \
    \    experts.  A simpler but lengthier procedure is to use the 'prompt'\n    \
    \  command to run through the current set of parameters, reentering\n      the\
    \ parameters that must change and using the sequence\n      <ESC><return> to retain\
    \ the previous value for each of the others.\n      The same procedures may be\
    \ used to correct a mistake made in\n      entering a particular parameter.\n\
    \      The current settings of all the BFTP parameters can be displayed\n    \
    \  at any time with the 'status' command, while the 'clear' command\n      will\
    \ return all parameters to their initial values.  Finally, the\n      'request'\
    \ command allows the user to save the current set of\n      parameters in a file\
    \ or to restore the parameters from a\n      previously-saved file.\n      There\
    \ is also a window-based BFTP user interface for use on a Sun\n      Workstation,\
    \ described in Appendix A.  The complete list of BFTP\n      commands is presented\
    \ in Appendix B.\n"
- title: 3. Experience and Conclusions
  contents:
  - "3. Experience and Conclusions\n   BFTP has been available to users at ISI for\
    \ some months.  Users have\n   reported a number of advantages of using BFTP:\n\
    \   (a)  Some users prefer the prompting style of BFTP to the user\n        interface\
    \ of the foreground FTP they normally use.\n   (b)  The BFTP \"verify\" command\
    \ allows the user to verify that host\n        names, passwords, and filenames\
    \ are correct without having to\n        wait for the entire transfer to take\
    \ place.\n   (c)  Since results are returned through the mail system, a transfer\n\
    \        can occur without tying up a terminal line, a phone line, or\n      \
    \  even a window.\n   BFTP must be able to communicate with a variety of Server-FTP\n\
    \   implementations, and we have observed much variation in the commands\n   supported,\
    \ error handling, and the timing in these servers.  Some of\n   the problems we\
    \ have encountered are:\n   (1)  Some systems (e.g., 4.2BSD) do not support the\
    \ PASV command.\n   (2)  4.2/3BSD systems return a non-standard response to the\
    \ NLST\n        command.  Instead of returning a list of complete path-names,\n\
    \        they use an ad hoc format consisting of a directory name\n        followed\
    \ by a list of files.\n   (3)  4.2/3BSD systems may return a \"permanent negative\
    \ completion\n        reply\" (a 5xx FTP reply code) as a result of a communications\n\
    \        failure such as a broken TCP connection.  According to RFC-959,\n   \
    \     the appropriate response is a \"transient negative completion\n        reply\"\
    \ (a 4xx FTP reply code), which would inform the BFTP that\n        the transfer\
    \ should be retried.\n   (4)  A number of servers return badly formatted responses.\
    \  An\n        example of this is the 4.2/3BSD response to an NLST command for\n\
    \        a non-existent file name: an error string which is not preceded\n   \
    \     by a numerical response code.\n   To diagnose problems that do occur, we\
    \ have found it very useful to\n   have a complete record of the interchange between\
    \ the FTC daemon and\n   the two FTP servers.  This record is saved and is currently\
    \ always\n   included in the notification message mailed to the user (see Appendix\n\
    \   D for an example).  As we get more experience with this program, some\n  \
    \ of the details of the transfer may be omitted from this log.\n   The use of\
    \ library routines shared between modules makes it\n   relatively easy to implement\
    \ additional user interface programs.  We\n   are currently experimenting with\
    \ a window version of BFTP, the\n   \"bftptool\", which runs in the SunView environment,\
    \ and is described\n   in Appendix A.  Some additional interfaces that might be\
    \ useful are:\n   o    A command line interface for use in shell scripts and\n\
    \        \"Makefiles\".\n   o    A more general library interface which would\
    \ make it easy to\n        invoke BFTP from a variety of programs.\n   o    Additional\
    \ full-screen form based interfaces, for example a tool\n        running in X-Window\
    \ system environment.\n   Lastly, BFTP would benefit from the resolution of the\
    \ following open\n   protocol issues:\n   o    There currently exist no provisions\
    \ for Internet-wide user\n        authentication.  In the BFTP context, this means\
    \ that passwords\n        required for a file transfer must be present in BFTP\
    \ request\n        files.  The security of these passwords is subject to the\n\
    \        limitations of the file system security on the BFTP control\n       \
    \ host.  Anonymous file transfer provides a partial solution, but\n        a more\
    \ general, long term solution is needed.\n   o    Better mechanisms are needed\
    \ to cope with the diversity of real\n        file systems in the Internet.\n\
    \        For example, an extension could be made to the FTP protocol to\n    \
    \    allow the daemon to learn the delimiter conventions of each host\n      \
    \  file system.  This could allow a more flexible and powerful\n        multiple-file\
    \ facility in BFTP.  This could include the\n        automatic transfer of directory\
    \ subtrees, for example.\n"
- title: 4. References
  contents:
  - "4. References\n   [RFC-959] Postel, J., and J. Reynolds, \"File Transfer Protocol\n\
    \             (FTP)\", RFC-959, USC/Information Sciences Institute,\n        \
    \     October 1985.\n"
- title: Appendix A -- BFTP Implementation Structure
  contents:
  - "Appendix A -- BFTP Implementation Structure\n   BFTP has been implemented on\
    \ both a Sun workstation running Sun OS\n   3.4 (based on 4.2BSD) and a VAX running\
    \ 4.3BSD.  The program modules\n   are: the local user interface programs \"bftp\"\
    , the Internet server\n   program \"bftpd\", and the FTC daemon \"fts\".  BFTP\
    \ makes use of the\n   \"at\" command, a UNIX batch job facility, to submit requests\
    \ and\n   execute the daemon.  An additional user interface program, the\n   \"\
    bftptool\", is available for Sun OS 3.4, and runs in the SunView\n   environment.\n\
    \   BFTP keeps its state in a set of control files: request files,\n   command\
    \ files, and message files.  These files are stored in the home\n   directory\
    \ specified for the environment of the process running\n   \"bftp\".  If a user\
    \ is running \"bftp\" directly, this will typically be\n   the user's home directory.\
    \  In the case where a user has made a\n   Telnet connection to the well-known\
    \ port 152 on a BFTP service host,\n   \"bftp\" is started by \"bftpd\" (or \"\
    inetd\", indirectly).  As a result,\n   the control files will be owned by the\
    \ user-id under which \"inetd\"\n   was started, normally \"root\", and stored\
    \ in the top level directory\n   \"/\".  Note, however, that under BFTP all user\
    \ files are written by\n   the FTP servers, which are presumed to enforce the\
    \ operating systems'\n   access control conventions.  Hence, BFTP does not constitute\
    \ a system\n   integrity exposure.\n   A.1  User Interface Program\n      The\
    \ BFTP user interface program \"bftp\" may be run directly via a\n      UNIX shell.\
    \  Once the program has been started, the prompt \"BFTP>\"\n      will appear\
    \ and commands may be entered.  These commands are\n      described in detail\
    \ in Appendix B.\n   A.2  Tool-Style User Interface Program\n      The BFTP user\
    \ interface program \"bftptool\" may be started from a\n      shell window in\
    \ the SunView environment on a Sun workstation.  The\n      BFTP commands may\
    \ be selected via the left mouse button.  The\n      various file transfer parameters\
    \ appear in a form-style interface;\n      defaults and multiple-choice style\
    \ parameter values can be filled\n      in via menus.  An advantage of this form-style\
    \ interface program\n      is that it is possible to view all of the file transfer\
    \ parameters\n      simultaneously, providing the user with a sense for which\n\
    \      parameter values might be mutually exclusive.\n      Help information can\
    \ be displayed in a text subwindow by\n      positioning the on-screen mouse pointer\
    \ over a command or a\n      parameter, and clicking the center mouse button.\
    \  (No standard\n      mechanism for displaying help information is currently\
    \ included in\n      the SunView package.)\n      The commands used in the \"\
    bftptool\" are for the most part very\n      similar to the commands described\
    \ in Appendix B.  Request\n      submittal and the execution of the FTC daemon\
    \ are identical for\n      the \"bftp\" and the \"bftptool\" interface programs.\n\
    \   A.3  Internet Server\n      The Internet server program \"bftpd\" can be invoked\
    \ by opening a\n      Telnet connection to a well-known port, and does not require\n\
    \      login.  The \"bftpd\" program runs under \"inetd\", the standard\n    \
    \  BSD4.x well-known port dispatcher.  When a SYN arrives for the\n      BFTP\
    \ well-known port, \"bftpd\" opens the TCP connection and\n      performs Telnet\
    \ negotiations.  It then passes control to the user\n      interface \"bftp\"\
    \ which allows the user to enter file transfer\n      requests.\n   A.4  BFTP\
    \ Server Daemon\n      The BFTP file transfer control daemon program is named\
    \ \"fts\" (for\n      \"File Transfer Service\").  This module contains code to\
    \ actually\n      cause a single file transfer operation using the FTP server-server\n\
    \      model as shown in Figures 1 and 2.  It is invoked with the command\n  \
    \    \"fts <request-file>\".  The <request-file> contains the necessary\n    \
    \  parameters for the file transfer, in ASCII format, separated by\n      linefeeds.\
    \  Such a request file may be created by the user\n      interface program, \"\
    bftp\".\n      As a byproduct of the development of BFTP, \"fts\" represents a\n\
    \      server-server FTP driver that can be run independent of the \"bftp\"\n\
    \      program.  Parameters used in the file transfer are read from a\n      request\
    \ file, which is created and accessed via library routines\n      which can be\
    \ shared between modules.  This could be used to\n      perform FTP's under program\
    \ control.\n"
- title: 'Appendix B: BFTP Command Summary'
  contents:
  - "Appendix B: BFTP Command Summary\n   B.1 Special Editing Characters\n      In\
    \ the \"bftp\" program, the special editing characters for command\n      words,\
    \ subcommands, and parameter fields are as follows:\n        <return>    Accept\
    \ current command/field.\n        <escape>    Complete current command/field,\
    \ or display default.\n        <space>     Complete and delimit current command.\n\
    \        <delete>    Erase last character.\n        control-L   Refresh screen.\n\
    \        control-R   Refresh line.\n        control-U   Erase line.\n        control-W\
    \   Erase current token.\n        ?           List legal options.\n   B.2 BFTP\
    \ Commands\n      The remainder of Appendix B consists of a list of the BFTP\n\
    \      commands.  Each command should be followed by a carriage-return.\n    \
    \  In the description of the syntax for each command, square brackets\n      \"\
    []\" are used to indicate a ssubcommand, or a list of possible\n      subcommands,\
    \ which are separated by the \"|\" character.  Angle\n      brackets \"<>\" are\
    \ used to indicate a description of a parameter\n      where the choices would\
    \ be too numerous to list, for example\n      \"<host name/number>\".\n   B.2.1\
    \ Clear Command\n      Return all parameters to their default values.\n      \
    \      clear\n   B.2.2 Destination Commands\n      Set the destination directory.\n\
    \            ddir <directory name>\n      Set the destination file name.\n   \
    \         dfile <file name>\n      Set the destination host, user, and password.\n\
    \            dhost <host name/number> <login> <password>\n   B.2.3 Explain Command\n\
    \      Display a short explanation of how to use BFTP.\n            explain\n\
    \   B.2.4 Find Command\n      Find and display a previous request.\n         \
    \   find\n      BFTP will prompt for the request id, which is printed when the\n\
    \      request is first submitted.  An example of a request id is\n      \"bftp583101774\"\
    .  BFTP also prompts for the request keyword, which\n      was determined by the\
    \ user when the request was first submitted.\n      If no keyword was specified,\
    \ a <CR> should be typed.  If no\n      request id is entered, BFTP will display\
    \ all requests which\n      contain a matching keyword.\n            RequestID\
    \ (optional): <bftp-request-id>\n            RequestKeyword: <keyword>\n     \
    \ After BFTP has displayed a summary of a matching request, it asks\n      whether\
    \ the request is to be changed, or canceled.\n            Do you wish to change\
    \ this request? [yes | no]\n            Do you wish to cancel this request? [yes\
    \ | no]\n      If the user indicates that the request is to be changed, BFTP will\n\
    \      read in the parameters and cancel the existing request.  At this\n    \
    \  point the user may make any desired changes and use the \"submit\"\n      command\
    \ to requeue the request.  At this point a new request id\n      will be assigned\
    \ and displayed.\n      Although this may happen extremely rarely, if at all,\
    \ it is\n      possible that a system crash (or the interruption of the BFTP\n\
    \      program) at a particularly inopportune moment may leave a request\n   \
    \   which is not queued.  When the \"find\" command locates such a\n      request,\
    \ it displays the warning:\n            Your request is NOT currently queued.\n\
    \      If this happens, the request may be read in and resubmitted using\n   \
    \   the following procedure:\n            Your request is NOT currently queued.\n\
    \            Do you wish to change this request? yes\n              (BFTP displays\
    \ the parameters that have been read in.)\n            Previous request canceled.\n\
    \            Use the 'submit' command to submit a new request.\n   B.2.5 Help\
    \ Command\n      Print local help information.\n            help\n           \
    \ help <command>\n   B.2.6 Quit Command\n      Clear parameters and exit the BFTP\
    \ program.\n            quit\n   B.2.7 Prompt Command\n      Prompt for commonly-used\
    \ parameters.\n            prompt\n      The following are the parameters that\
    \ BFTP prompts for:\n            copy/move/delete: [copy | move | delete]\n  \
    \          ascii/ebcdic/image/local:\n                  [ascii|ebcdic] [nonprint|telnet|carriage-control]\n\
    \      or\n                  [image]\n      or\n                  [local] <byte\
    \ size>\n      (see \"set type\" for additional information)\n            Source\
    \ --\n                Host: <host name/number>\n                User: <login>\n\
    \                Password: <password>\n                Dir: <directory including\
    \ a delimiter, e.g., \"/\" or \">\">\n                     (either an absolute\
    \ path, or relative to the login)\n                File: <file name>\n       \
    \     Destination --\n                Host: <host name/number>\n             \
    \   User: <login>\n                Password: <password>\n                Dir:\
    \ <directory>\n                File: <file name>\n      Once the prompting has\
    \ been completed, the current values of all\n      parameters will be displayed.\
    \  Parameters not mentioned in the\n      prompting will be initialized with default\
    \ values, and may be\n      changed via the \"set\" commands.\n   B.2.8 Request\
    \ Commands\n      The request commands enable the user to save a set of BFTP\n\
    \      parameters in a \"request-file\" for future use.  Subcommands are\n   \
    \   provided to to list all available request-files, or to read,\n      write,\
    \ or delete a request-file.  All request-files are stored in\n      the user's\
    \ home directory.  Therefore, this facility is not\n      available when the user\
    \ is accessing BFTP by telneting to port\n      152.\n      Delete request file\
    \ \"bftp-save.name\".\n            request delete <name>\n      List all bftp-save\
    \ files.\n            request list\n      Read a request file in as the current\
    \ request.\n            request load <name>\n      Save the current request in\
    \ a file named \"bftp-save.name\".\n            request store <name>\n   B.2.9\
    \ Set Commands\n      The \"set\" commands have complex subcommand structures\
    \ and are used\n      to set many of the less commonly used FTP parameters. The\n\
    \      subcommands of \"set\" are as follows:\n      Set the account for the source/destination\
    \ login.\n            set account [source | destination] <account string>\n  \
    \    Set to true to append to destination file.\n            set append [true\
    \ | false]\n      The source file will be copied to the destination file name.\n\
    \            set copy\n      The source file will be deleted after the file has\
    \ been moved or\n      copied.\n            set delete\n      Set the mailbox\
    \ to which the results will be returned.  The\n      mailbox should be in standard\
    \ internet format, for example:\n      \"deschon@isi.edu\".\n            set mailbox\
    \ <mailbox string>\n      Set the FTP transfer mode.\n            set mode [stream\
    \ | block | compress]\n      The source file will be deleted after it has been\
    \ copied.\n            set move\n      Set to true to transfer multiple files.\n\
    \            set multiple [true | false]\n      Set the port for the source/destination\
    \ FTP connection.\n            set port [source | destination] <port number>\n\
    \      Set the FTP structure.\n            set structure [file | record | page]\n\
    \      Set the FTP type and format / byte size parameters.  Note that a\n    \
    \  normal text file is usually \"ascii\", and a \"binary\" file is often\n   \
    \   the same as an \"image\" file.\n            set type [ascii|ebcdic] [nonprint|telnet|carriage-control]\n\
    \      or\n            set type [image]\n      or\n            set type [local]\
    \ <byte size>\n      Set to true if the STOU command is to be used.  If the STOU\n\
    \      command is supported by the destination host, the file will be\n      stored\
    \ into a file having a unique file name.\n            set unique [true | false]\n\
    \      Set to true to display full FTP conversations for \"verify\" and\n    \
    \  \"transfer\" commands.\n            set verbose [true | false]\n   B.2.10 Source\
    \ Commands\n      Set the source directory.\n            sdir <directory name>\n\
    \      Set the source file name.\n            sfile <file name>\n      Set the\
    \ source host, user, and password.\n            shost <host name/number> <login>\
    \ <password>\n   B.2.11 Status Command\n      Display the current parameter values.\n\
    \            status\n   B.2.12 Submit Command\n      Submit the current request\
    \ for background FTP.\n            submit\n      BFTP prompts for the following\
    \ information:\n            StartTime: <date and/or time>\n            ReturnMailbox:\
    \ <internet mailbox>\n            RequestKeyword: <made-up keyword>\n   B.2.13\
    \ Time Command\n      Set the start time, the starting retry interval, and the\
    \ maximum\n      number of tries.\n            time <date and/or time> <minutes\
    \ between tries>\n                 <maximum number of tries>\n   B.2.14 Transfer\
    \ Command\n      Perform the current request in the foreground.\n            transfer\n\
    \   B.2.15 Verify Command\n      Make the connections now to check parameters.\n\
    \            verify\n"
- title: 'Appendix C: Example BFTP User Script'
  contents:
  - "Appendix C: Example BFTP User Script\n   deschon.isi.edu 1% telnet hobgoblin.isi.edu\
    \ 152\n   Trying 128.9.0.42 ...\n   Connected to hobgoblin.isi.edu.\n   Escape\
    \ character is '^]'.\n   BFTP Server (hobgoblin.isi.edu)\n   Background File Transfer:\
    \ For help, type '?', 'help', or 'explain'.\n   BFTP> prompt\n   Copy/Move/Delete:\
    \ copy\n   Source --\n       Host: deschon.isi.edu\n       User: deschon\n   \
    \    Password:\n       Dir: ./\n       File: foo*\n   Destination --\n       Host:\
    \ venera.isi.edu\n       User: deschon\n       Password:\n       Dir: ./temp/\n\
    \       File: foo*\n   StartTime: Tue Oct  6 10:14:43 1987 (interval) 60 (tries)\
    \ 5\n   ReturnMailbox: deschon@isi.edu\n   RequestPassword:\n   BFTP> set multiple\
    \ true\n   BFTP> status\n       Request type: COPY\n       Source --\n       \
    \    Host: 'deschon.isi.edu'\n           User: 'deschon'\n           Pass: SET\n\
    \           Acct: ''\n           Dir: './'\n           File: 'foo*'\n        \
    \   Port: 21\n       Destination --\n           Host: 'venera.isi.edu'\n     \
    \      User: 'deschon'\n           Pass: SET\n           Acct: ''\n          \
    \ Dir: './temp/'\n           File:'foo*'\n           Port: 21\n       Structure:\
    \ file, Mode: stream, Type: ascii, Format: nonprint\n       Multiple matching:\
    \ TRUE\n       Return mailbox: 'deschon@isi.edu', Password: SET\n       Remaining\
    \ tries: 5, Retry interval: 60 minutes\n       Start after Tue Oct  6 10:14:43\
    \ 1987.\n   BFTP> submit\n   Checking parameters...\n   Request bftp560538880\
    \ submitted to run at 10:14 Oct 6.\n   BFTP> quit\n   bye\n   Connection closed\
    \ by foreign host.\n   deschon.isi.edu 2%\n"
- title: 'Appendix D: Sample BFTP Notification Message'
  contents:
  - "Appendix D: Sample BFTP Notification Message\n   Received-Date: Tue, 6 Oct 87\
    \ 10:15:52 PDT\n   Date: Tue, 6 Oct 87 10:15:47 PDT\n   From: root (Operator)\n\
    \   Posted-Date: Tue, 6 Oct 87 10:15:47 PDT\n   To: deschon\n   Subject: BFTP\
    \ Results: bftp560538880\n   Request bftp560538880 submitted to run at 10:14 Oct\
    \ 6.\n     Tue Oct  6 10:15:22 1987: starting...\n       Request type: COPY\n\
    \       Source: deschon.isi.edu-deschon-XXX--21-./-foo*\n       Destination: venera.isi.edu-deschon-XXX--21-./temp/-\n\
    \       Stru: F, Mode: S, Type: A N, Creation: STOR\n       Multiple matching:\
    \ TRUE\n       Return mailbox: 'deschon@isi.edu', Password: SET\n       Remaining\
    \ tries: 5, Retry interval: 60 minutes\n   Connect to: deschon.isi.edu, 21\n \
    \  deschon.isi.edu ==> 220 deschon.isi.edu FTP server (Version 4.7\n         \
    \                  Sun Sep 14 12:44:57 PDT 1986) ready.\n   Connect to: venera.isi.edu,\
    \ 21\n   venera.isi.edu ==> 220 venera.isi.edu FTP server (Version 4.107\n   \
    \                        Thu Mar 19 20:54:37 PST 1987) ready.\n   deschon.isi.edu\
    \ <== USER deschon\n   deschon.isi.edu ==> 331 Password required for deschon.\n\
    \   deschon.isi.edu <== PASS XXX\n   deschon.isi.edu ==> 230 User deschon logged\
    \ in.\n   venera.isi.edu <== USER deschon\n   venera.isi.edu ==> 331 Password\
    \ required for deschon.\n   venera.isi.edu <== PASS XXX\n   venera.isi.edu ==>\
    \ 230 User deschon logged in.\n   deschon.isi.edu <== CWD ./\n   deschon.isi.edu\
    \ ==> 200 CWD command okay.\n   venera.isi.edu <== CWD ./temp/\n   venera.isi.edu\
    \ ==> 250 CWD command successful.\n   deschon.isi.edu <== PORT 128,9,1,56,4,106\n\
    \   deschon.isi.edu ==> 200 PORT command okay.\n   deschon.isi.edu <== NLST foo*\n\
    \   deschon.isi.edu ==> 150 Opening data connection for /bin/ls\n            \
    \               (128.9.1.56,1130) (0 bytes).\n   deschon.isi.edu ==> 226 Transfer\
    \ complete.\n   deschon.isi.edu <== PASV\n   deschon.isi.edu ==> 502 PASV command\
    \ not implemented.\n   venera.isi.edu <== PASV\n   venera.isi.edu ==> 227 Entering\
    \ Passive Mode (128,9,0,32,6,200)\n   deschon.isi.edu <== PORT 128,9,0,32,6,200\n\
    \   deschon.isi.edu ==> 200 PORT command okay.\n   deschon.isi.edu <== RETR foo\n\
    \   venera.isi.edu <== STOR foo\n   deschon.isi.edu ==> 150 Opening data connection\
    \ for foo\n                           (128.9.0.32,1736) (0 bytes).\n   deschon.isi.edu\
    \ ==> 226 Transfer complete.\n   venera.isi.edu ==> 150 Openning data connection\
    \ for foo\n                           (128.9.1.56,20).\n   venera.isi.edu ==>\
    \ 226 Transfer complete.\n   venera.isi.edu <== PASV\n   venera.isi.edu ==> 227\
    \ Entering Passive Mode (128,9,0,32,6,201)\n   deschon.isi.edu <== PORT 128,9,0,32,6,201\n\
    \   deschon.isi.edu ==> 200 PORT command okay.\n   deschon.isi.edu <== RETR foo1\n\
    \   venera.isi.edu <== STOR foo1\n   deschon.isi.edu ==> 150 Opening data connection\
    \ for foo1\n                           (128.9.0.32,1737) (4 bytes).\n   deschon.isi.edu\
    \ ==> 226 Transfer complete.\n   venera.isi.edu ==> 150 Openning data connection\
    \ for foo1\n                           (128.9.1.56,20).\n   venera.isi.edu ==>\
    \ 226 Transfer complete.\n   deschon.isi.edu <== QUIT\n   venera.isi.edu <== QUIT\n\
    \     Tue Oct  6 10:15:39 1987: completed successfully.\n"
