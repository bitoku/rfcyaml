Abstract This document describes data structures and API support for Mobile IPv6 as an extension to the Advanced Socket API for IPv6.
Just as the Advanced Sockets API for IPv6 gives access to various extension headers and the ICMPv6 protocol, this document specifies the same level of access for Mobile IPv6 components.
It specifies a mechanism for applications to retrieve and set information for Mobility Header messages, Home Address destination options, and Routing Header Type 2 extension headers.
It also specifies the common data structures and definitions that might be used by certain advanced Mobile IPv6 socket applications.
Introduction Mobility Support in IPv6 [2] defines a new Mobility Protocol header, a Home Address destination option and a new Routing Header type.
It is expected that Mobile IPv6 user level implementations and some special applications will need to access and process these IPv6 extension headers.
This document is an extension to the existing Advanced Sockets API document [1]; it addresses the Advanced IPv6 Sockets API for these new protocol elements defined by Mobile IPv6.
The applicability of this API mainly targets user level applications.
However, it has also been shown to be useful within some Mobile IPv6 implementations; for instance, where part of the Mobile IPv6 protocol is implemented at user level and part in the kernel.
It is up to any such implementations to architect which part of the Mobile IPv6 and IP Security (IPSec) packet processing should be done at the user  level in order to meet the design needs of the particular platform and operating system.
The target user level applications for this socket API are believed to be debugging and diagnostic applications and some policy applications that would like to receive copies of protocol information at the application layer.
The packet information and access to the extension headers (Routing header and Destination options) are specified using the "ancillary data" fields that were added to the 4.3BSD Reno sockets API in 1990.
The reason is that these ancillary data fields are part of the Posix.1g standard and should therefore be adopted by most vendors.
This document is consistent with Advanced Sockets API for IPv6 [1] in structure definitions, header files, and function definitions.
Thus, the implementors of this API document are assumed to be familiar with the data structures, data sending and receiving procedures, and the IPv6 extension header access functions described in the Advanced Sockets API for IPv6 [1].
This document does not address application access to either the Authentication Header or the Encapsulating Security Payload header.
This document also does not address any API that might be necessary for Mobile Network [4] specific needs.
Furthermore, note that this API document excludes discussion on application level API.
It assumes that address selection socket API [5] takes care of selection of care of address or home address as the source address by the application, when source address selection is required due to the nature of the application.
Providing mobility "awareness" to applications, such as applications' being able to tell whether the host is at home or not, is out of scope for this API.
This API document can be applied in the following cases: 1.  User level debugging and monitoring tools:
This socket API is useful for accessing Mobility Headers, Home Address destination options and Type 2 Routing Headers .
For example, mh ping might be a monitoring tool that can process mobility headers on the receiving side to check binding status.
Partial user level implementation of Mobile IPv6
: We assume that some implementations may choose to do the Mobility header processing at user level.
In that case, this document recommends implementing at least the handling of Home Address destination options and Type 2 Routing Header in the main IP processing paths in the kernel.
The API can then be used to send and receive the Mobility Header packets used for Mobile IPv6 signaling.
Complete header processing at the kernel level:
Many implementations of Mobile IPv6 [2] perform processing of Home Address destination options, Type 2 Routing Headers, and Mobility headers at the kernel level.
However, the kernel keeps a copy of the received extension headers and passes them up to the API, which is used by the user level applications purely for monitoring and debugging Mobile IPv6 packets.
On an IPv6 host that does not implement Mobile IPv6, the IPv6 specification [3] requires that packets with the Home Address option or Type 2 Routing Header (where segments left is non zero) be dropped on receipt.
This means that it is not possible to implement Mobile IPv6 as an application on such a system.
Thus, on such a system, the applicability of this API is limited to the first case above, enabling debugging and monitoring applications (such as tcpdump) to parse and interpret Mobile IPv6 packets.
This document can be divided into the following parts: 1.
Definitions of constants and structures for C programs that capture the Mobile IPv6 packet formats on the wire.
A common definition of these is useful at least for packet snooping applications.
This is captured in Section 4.
In addition, Section 4 also defines data structures for Home Address destination option, Type 2 Routing Header, and new ICMPv6 messages related to Mobile IPv6. 2.
Notes on how to use the IPv6 Advanced API to access Home Address options and Type 2 Routing Headers.
This is captured in Section 5.
Notes on how user level applications can observe MH (Mobility Header) packets using raw sockets (in Section 6).
The IPv6 RAW socket interface described in this document allows applications to receive  MH packets whether or not the system's MH processing takes place in the "kernel" or at the "user space".
A name is suggested for IPv6 Mobility Header protocol in /etc/ protocols (in Section 7).
All examples in this document omit error checking in favor of brevity, as it is following the same style as the Advanced Socket API [1].
Note that many of the functions and socket options defined in this document may have error returns that are not defined in this document.
Data types in this document follow the Posix.1g format: intN t means a signed integer of exactly N bits (e.g., int16 t), and uintN t means an unsigned integer of exactly N bits (e.g., uint32 t).
Once the API specification becomes mature and is deployed, it may be formally standardized by a more appropriate body, as has been done with the Basic API [6].
However, since this specification largely builds upon the Advanced Socket API [1], such standardization would make sense only if the Advanced Socket API [1] were also standardized.
In this section, the structures are specified in a way so that they maximize the probability that the compiler layout of data structures are identical to the packet formats on the wire.
However, ANSI C provides few guarantees about the size and alignment of data structures.
The assumption is that the Advanced Socket API [1] will pass up the actual packet content (the wire format) in the buffer and in the ancillary data objects.
Thus, if an implementor has to handle a system where the ANSI C compiler does not and can not lay out these structures to match the wire formats in RFC 3775 [2], the structures defined by this API can not be supported on such a system.
The constants and structures shown below are in network byte order, so an application needs to perform the appropriate byte order conversion (ntohs(), etc) when necessary.
The structures and constants below will be included when the (new) header file is included :
The Mobility Header Data Structures 4.1.1.
The following structure is defined as a result of including <netinet/ip6mh.h>.
This is the fixed part of the Mobility Header.
Different Mobility message types are defined in Mobile IPv6 [2].
For portability and alignment reasons, each mobility message type includes the mobility header fields instead of including the ip6 mh structure, followed by the message specific fields.
Binding Refresh Request Mobility Message struct  ip6 mh binding request { uint8 t    ip6mhbr
ip6 mh home test init { uint8 t    ip6mhhti
Care of Address Test Init
ip6 mh careof test init { uint8 t    ip6mhcti
Home Address Test (HOT) Message struct  ip6 mh home test { uint8 t    ip6mhht
uint8 t    ip6mhht type; uint8 t
uint16 t   ip6mhht nonce index; uint32 t   ip6mhht
Cookie from HOTI msg  / uint32 t   ip6mhht
(COT) Message struct  ip6 mh careof test { uint8 t    ip6mhct
uint16 t   ip6mhct nonce index; uint32 t   ip6mhct
/  Request a binding ack  /
define IP6 MH BU HOME
define IP6 MH BU LLOCAL 0x2000
/  Link local compatibility  /
Binding Acknowledgement Mobility Message struct  ip6 mh binding ack { uint8 t   ip6mhba
#define IP6 MH BA KEYM
/  Key management mobility  / 4.1.9.
Binding Error Mobility Message struct   ip6 mh binding error { uint8 t   ip6mhbe
reserved2; struct in6 addr ip6mhbe
Mobility Option TLV data structure struct
ip6 mh opt { uint8 t    ip6mhopt
Mobility Option Data Structures 4.1.11.1.
Binding Refresh Advice struct ip6 mh opt refresh advice { uint8 t  ip6mora
Alternate Care of Address struct ip6 mh opt altcoa { uint8 t ip6moa type; uint8 t ip6moa len;
Nonce Indices struct ip6 mh opt nonce index { uint8 t ip6moni type; uint8 t ip6moni
uint16 t ip6moni home nonce;
Binding Authorization Data struct ip6 mh opt auth data { uint8 t ip6moad
Next Header Value for Mobility: <netinet/in.h> #
IANA  / Mobility Header Message Types: <netinet/ip6mh.h
define IP6 MH TYPE BERROR
Binding Error  / Mobility Header Message Option Types: <netinet/ip6mh.h
/  Binding Auth Data  / Status values accompanied with Mobility Binding Acknowledgement: <netinet/ip6mh.h
> #define IP6 MH BAS ACCEPTED
Accepted, but prefix discovery Required  /
129 /  Administratively prohibited  /
define IP6 MH BAS INSUFFICIENT
130 /  Insufficient resources  /
define IP6 MH BAS HA NOT SUPPORTED
131 /  HA registration not supported  /
#define IP6 MH BAS NOT HOME SUBNET
/  Not HA for this mobile node  /
IP6 MH BAS DAD FAILED
define IP6 MH BAS SEQNO
define IP6 MH BAS HOME NI EXPIRED
/  Expired Home nonce index
/ #define IP6 MH BAS COA
/  Expired Care of nonce index  /
define IP6 MH BAS NI EXPIRED
define IP6 MH BAS REG
/  Registration type change disallowed  / Status values for the Binding Error mobility messages:
> #define IP6 MH BES UNKNOWN
HAO    1 /  Unknown binding for HOA  /
Unknown MH Type  / 4.3.
IPv6 Home Address Destination Option
Due to alignment issues in the compiler, and the alignment requirements for this option, the included IPv6 address must be specified as an array of 16 octets.
New ICMP Messages for Mobile IPv6 ICMP message types and definitions for Mobile IPv6 are defined in <netinet/icmp6.h>.
define MIP6 HA DISCOVERY REQUEST    144
The following data structures can be used for the ICMP message types discussed in Sections 6.5 through 6.8 in the base Mobile IPv6 [2] specification.
mip6 dhreq hdr.icmp6 type #define  mip6 dhreq code
Discovery Reply  / struct icmp6 hdr
; #define  mip6 dhrep type
mip6 dhrep hdr.icmp6 type #define
mip6 ps hdr.icmp6 code #define  mip6
pa hdr.icmp6 type #define  mip6
pa hdr.icmp6 code #define  mip6
pa hdr.icmp6 cksum #define  mip6
MIP6 PA FLAG MANAGED    0x8000
Prefix options are defined in IPv6 Advanced Socket API [1].
The Mobile IPv6 Base specification [2] describes the modified behavior in the 'Modifications to IPv6 Neighbor Discovery' section.
Prefix Options for Mobile IP are defined in the following section.
IPv6 Neighbor Discovery changes are also defined in <netinet/icmp6.h
New 'Home Agent' flag in router advertisement:  #
/  Home Agent flag in RA  / New Router flag with prefix information of the home agent:
As per the Mobile IPv6 specification [2], Section 7.2, a Home Agent MUST include at least one prefix option with the Router Address (R) bit set.
nd opt pi type; uint8 t   nd opt pi len; uint8 t
nd opt pi prefix len; uint8 t   nd opt pi flags reserved;
uint32 t  nd opt pi valid time;
uint32 t  nd opt pi preferred time;
/  Adv Interval Option   /
Routing Header information can do so by setting the appropriate setsockopt option and using ancillary data objects.
The order of extension headers is defined in Mobile IPv6 [2] when an IPv6 packet with a Home Address Destination Option is sent with other possible extension headers.
Section 5.3 elaborates on the extension header order when all possible cases are present.
This document does not recommend that the user level program set the Home Address destination option or Type 2 Routing Header option; however, for clarity it defines the order of extension headers.
See Section 2 of this document for appropriate usage of sending and receiving of Home Address destination options and Type 2 Routing Header extension headers.
This document defines a new socket option, IPV6 MIPDSTOPTS for sending Home Address destination options.
In order to receive a Home Address destination option or Type 2 Route Header, applications must call setsockopt() to turn on the corresponding flag as described in IPv6 Advanced Socket API [1] ( for brevity, error checking is not performed in the examples):
Receiving the above information for TCP applications is not defined in this document (see Section 4.1 of Advanced Sockets API for IPv6 [1]).
Note that if the IP implementation on the host does not implement the handling of Type 2 Routing Headers or Home Address options, per RFC 2460
[3] the IP stack is required to drop the packet.
Thus, receiving Home Address destination option and Type 2 Routing Header at the application layer requires implementation of respective extension headers at the IP layer in the kernel, as defined in RFC3775 [2].
For receiving the Home Address destination option header, the Mobile IPv6 implementation SHOULD follow the initial processing rules of the Home Address destination option (Section 9.3.1 of Mobile IPv6 [2]) before passing the information to the API level.
This includes initial processing of IPSec authentication data in a packet when it exists.
Each Destination options header is returned as one ancillary data object described by a cmsghdr structure with cmsg level set to IPPROTO IPV6 and cmsg type set to IPV6 DSTOPTS.
For sending the Home Address destination option, ancillary data can be used to specify the option content for a single datagram.
This applies only to datagram and raw sockets, not to TCP sockets.
The Advanced API [1] document restricts one IPV6 xxx ancillary data object for a particular extension header in the control buffer.
Thus, there would be a single ancillary data object for the Home address destination option in an ancillary data buffer.
If multiple destination options are present, then the header order should be in compliance with Section 6.3 and 9.3.2 of the Mobile IPv6 [2] base specification.
For TCP data packets with the Home Address destination option, the "sticky" option may be used for all transmitted packets.
The application can remove the sticky Home Destination option header by calling setsockopt() for IPV6 MIPDSTOPTS with a zero option length.
Note that Section 2 of this document does not encourage setting the Home Address destination option at the user level.
A Mobile IPv6 implementation should set and process the Home Address destination option and Routing Header Type 2 at the kernel level.
The setting of Routing Header Type 2 and the Home Address destination option are described in this document for completeness and flexibility to use them in the future, if there is a need.
The following socket option parameters and cmsghdr fields may be used for sending (although not a recommended usage):
Some IPv6 implementations may support "sticky" options [1] for the IPv6 destination option for datagram and RAW sockets.
Behavior of Legacy IPv6 Socket Applications:
Legacy IPv6 applications/implementations using the Advanced Socket API [1] mechanisms, upon receiving Home Address destination options or Routing headers(Type 2), will discard the packet as per Sections 4.2 and 4.4 of IPV6 Protocol [3] specification, respectively; otherwise, they should properly handle the Home Address destination option and the Routing Header Type 2 specified in this document.
Routing Header Access Functions IPV6 Protocol [3] defines a Routing header extension header for Type 0.
Thus, in order to access the IPv6 Routing header Type 2 extension header, one MUST use type   2 and segment   1.
The following existing functions defined in Advanced API for IPv6 Sockets [1] are supported for Mobile IPv6 applications for sending and receiving Routing Header Type 2 headers: For Sending: size t inet6 rth space(int type, int segments); void  inet6
bp, int bp len, int type, int segments); int inet6 rth add(void
bp, const struct in6 addr  addr);
void  bp); struct in6 addr  inet6 rth
Reversing operation is not possible using the Route Header Type 2 extension header.
Thus, inet6 rth reverse() is not used.
Detailed descriptions and examples of accessing an IPv6 Routing Header are discussed in the Advanced Sockets API for IPv6 [1].
However, Section 7 of Advanced API for IPv6 Sockets [1] indicates that multiple types of routing headers can be received as multiple ancillary data objects to the application (with cmsg type set to IPV6 RTHDR).
Currently, there are no API functions defined to return the routing header type.
However, this document does not define a helper function, since it is easy to access the Routing Header Type field just as easily as the ip6r segleft field.
An excerpt of a code sample is provided for extracting the type of the received routing header: if (msg.msg controllen !
0 && cmsgptr cmsg level
IPPROTO IPV6 && cmsgptr cmsg type
{ struct in6 addr  in6; char asciiname[INET6 ADDRSTRLEN]; struct ip6 rthdr  rthdr; int    segments, route type; rthdr   (struct ip6 rthdr  )extptr; segments   inet6 rth
It is recommended that no portable applications send Type 2 Routing Header ancillary data from the application layer, since many implementations take care of that at the kernel layer and may not support the API for sending Type 2 Routing Header.
Mobile IPv6 [2] defines the Type 2 Routing Header to allow the packet to be routed directly from a correspondent to the mobile node's care of address.
The mobile node's care of address is inserted into the IPv6 Destination Address field.
Once the packet arrives at the care of address, the mobile node retrieves its home address from the routing header, and this is used as the final destination address for the received IPv6 packet.
For user level applications that receive Type 2 Routing Header, inet6 rth getaddr() returns the care of address or on the wire destination address of the received packet.
This complies with the existing Routing header Type 0 processing for IPv6 [1].
Thus, on the receive side, the socket application will always receive data packets at its original home address.
The implementations are responsible for processing the Type 2 Routing Header packet as per Mobile IPv6 RFC [2] before passing the Type 2 Routing Header information to the Socket API.
If a pure IPv6 [3] system receives the Routing Header Type 2 packets, it will follow the process described in Section 4.4 of the IPv6 [3] base specification.
Order of Extension Headers for Home Address Destination Options Section 6.3 of Mobile IPV6
[2] defines the extension header order for the Home address destination option.
Routing Header Home Address Destination Option Fragment Header AH/ESP Header IPv6 [3] specifies that the destination header can be either before the Routing header or after the AH/ESP header if they are all present.
Thus, when the Home Address destination option is present along with other extension headers, the order will be: Hop by Hop Options header Destination Options header Routing
header Destination Options [Home Address Option] Fragment header Authentication header Encapsulating Security Payload header Destination Options header upper layer header Any user level implementation or application that sends the Home address destination option through ancillary data objects
should follow the order extension header defined in this document when using IPV6 MIPDSTOPTS socket options.
Home Address Destination Option Access Functions
The application must enable the IPV6 RECVDSTOPTS socket option in order to receive the Home Address destination option (error checking is not performed in the example for brevity):
int  on   1; setsockopt(fd, IPPROTO IPV6, IPV6 RECVDSTOPTS, &on, sizeof(on)); Each Destination option header is returned as one ancillary data object described by a cmsghdr structure, with cmsg level set to IPPROTO IPV6 and cmsg type set to IPV6 DSTOPTS.
The received side Home Address destination option is further processed by calling the inet6 opt next(), inet6 opt find(), and
value() functions as defined in Advanced API for IPv6 sockets [1].
This document assumes that portable Mobile IPv6 applications will not send a Home Address Destination Option from the application level, as the Mobile IPv6 implementation underneath takes care of sending the Home Address option and the routing header type 2 at the kernel.
However, some embedded software implementations may implement the IPv6 packet processing/sending at the user level; those implementations may choose to provide the API support for sending a home address option at the application layer.
In this case, the Home Address destination options are normally constructed by using the inet6 opt init(), inet6 opt append(), inet6 opt finish(), and inet6 opt set val() functions, described in Section 10 of the Advanced sockets API for IPv6 [1].
Content of Home Address Destination Option
The received ancillary data object for the Home Address destination option SHOULD contain the care of address of the mobile node.
It is assumed that the initial processing of the Home Address destination option will verify the validity of the home address, as described in Sections 6.3 and 9.5 of the Mobile IPv6 Specification [2], and swap the source address of the packet (COA) with the contents of Home Address destination option.
Note that whether or not these new APIs are used, the sender's home address is contained in the source address (which is passed to the application using the socket level functions recvfrom(), recvmsg(), accept(), and getpeername()).
This is necessary for: maintaining consistency between simple user level applications running between mobile nodes and the diagnostic applications on the home agent or correspondent node that use this API; obtaining the COA address of the mobile node when the Home Address destination option is used; and maintaining consistency of existing IPv6 Socket APIs and processing of the Home Address destination option.
If an implementation supports send side Home Address destination API, then it must follow the same rule for data content as specified in Mobile IPv6 RFC [2] for sending a home address option.
Thus, the home address option will contain the home address, and the implementation will use the care of address as the source address of the outgoing packet.
If the implementation uses IPSec, then it should use the content of Home Address destination option as the source address of the packet for security association.
Note that regular user applications must not set the home address destination option.
Mobility Protocol Headers Mobile IPv6 [2] defines a new IPv6 protocol header to carry mobility messages between Mobile Nodes, Home Agents and Correspondent Nodes.
These protocol headers carry Mobile IPv6 Binding messages as well as Return Routability [2] messages.
Currently the specification [2] does not allow transport packets (piggybacking) along with the mobility messages.
Thus the mobility protocol header can be accessed through an IPv6 RAW socket.
An IPv6 RAW socket that is opened for protocol IPPROTO MH should always be able to see all the MH (Mobility Header) packets.
It is possible that future applications may implement part of Mobile IPv6 signal processing at the application level.
Having a RAW socket interface may also enable an application to execute the Return Routability protocol or other future authentication protocol involving the mobility header at the user  level.
Receiving and Sending Mobility Header Messages
This specification recommends that the IPv6 RAW sockets mechanism send and receive Mobility Header (MH) packets.
The behavior is similar to ICMPV6 processing, where the kernel passes a copy of the mobility header packet to the receiving socket.
Depending on the implementation, the kernel may process the mobility header in addition to passing the mobility header to the application.
In order to comply with the restriction in the Advanced Sockets API for IPv6 [1], applications should set the IPV6 CHECKSUM socket option with IPPROTO MH protocol RAW Sockets.
A Mobile IPv6 implementation that supports the Mobile IPv6 API must implement Mobility Header API checksum calculations by default at the kernel for both incoming and outbound paths.
A Mobile IPv6 implementation must not return error on the IPV6 CHECKSUM socket option setting, even if the socket option is a NO OP function for that implementation because it verifies the checksum at the kernel level.
The Mobility Header checksum procedure is described in the Mobile IPv6 Protocol [2] specification.
Again, for application portability it is recommended that the applications set the IPV6 CHECKSUM socket option along with the RAW sockets for IPPROTO MH protocol.
As an example, a program that wants to send or receive a mobility header protocol(MH) could open a socket as follows (for brevity, the error checking is not performed in the example below):
fd   socket(AF INET6, SOCK RAW, IPPROTO MH);
int offset   4; setsockopt(fd, IPPROTO IPV6, IPV6 CHECKSUM, &offset, sizeof(offset)); For example, if an implementation likes to handle HOTI/HOT and COTI/ COT message processing, it can do so by using IPv6 RAW Sockets for IPPROTO MH at the application layer.
The same application may also set the IPV6 RECVDSTOPTS socket option for receiving Home Address destination option in a binding update [2] from the mobile node.
IPv6 RAW sockets are described in Section 3 of the IPv6 Advanced Socket API [1] specification.
All data sent and received via raw sockets must be in network byte order.
The data structures that are defined in this document are in network byte order, and they are believed to be supported by most compilers to hold packet formats directly for transmission on the wire.
The usual send/recv functions for datagram should be used for the Mobile IPv6 RAW sockets in order to send and receive data, respectively.
Many hosts provide the file /etc/protocols, which contains the names of the various IP protocols and their protocol numbers.
The protocol numbers are obtained through function getprotoXXX() functions.
The following addition should be made to the /etc/protocols file, in addition to what is defined in Section 2.4 of the Advanced Sockets API for IPv6 [1].
The protocol number for Mobility Header: (http://www.iana.org/assignments/protocol numbers)
# Mobility Protocol Header 8.
IPv4 Mapped IPv6 Addresses The various socket options and ancillary data specifications defined in this document apply only to true IPv6 sockets.
It is possible to create an IPv6 socket that actually sends and receives IPv4 packets, using IPv4 mapped IPv6 addresses, but the mapping of the options defined in this document to an IPv4 datagram is beyond the scope of this document.
The above statement is in compliance with Section 13 of the IPv6 Socket API [1].
The setting of the Home Address Destination option and Route Header Type 2 IPV6 RTHDR socket option may not be allowed at the application level in order to prevent denial of service attacks or man in the  middle attacks by hackers.
Sending and receiving of mobility header messages are possible by IPv6 RAW sockets.
Thus, it is assumed that this operation is only possible by privileged users.
However, this API does not prevent the existing security threat from a hacker sending a bogus mobility header or other IPv6 packets using the Home Address option and Type 2 Routing Header extensions.
This document does not define a new protocol.
However, it uses the Mobility Header Protocol for IPv6 to define an API for the /etc/protocols file.
