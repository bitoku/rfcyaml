- title: __initial_text__
  contents:
  - '                     Diameter Overload Rate Control

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification documents an extension to the Diameter Overload\n\
    \   Indication Conveyance (DOIC) base solution, which is defined in RFC\n   7683.\
    \  This extension adds a new overload-control abatement\n   algorithm.  This abatement\
    \ algorithm allows for a DOIC reporting node\n   to specify a maximum rate at\
    \ which a DOIC reacting node sends\n   Diameter requests to the DOIC reporting\
    \ node.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8582.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Requirements  . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n   3.  Terminology . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   4.  Interaction with DOIC Report Types  . . . . . . . . . . .\
    \ . .   5\n   5.  Capability Announcement . . . . . . . . . . . . . . . . . .\
    \ .   6\n   6.  Overload-Report Handling  . . . . . . . . . . . . . . . . . .\
    \   7\n     6.1.  Reporting-Node OCS  . . . . . . . . . . . . . . . . . . .  \
    \ 7\n     6.2.  Reacting-Node OCS . . . . . . . . . . . . . . . . . . . .   7\n\
    \     6.3.  Reporting-Node Maintenance of OCS . . . . . . . . . . . .   8\n  \
    \   6.4.  Reacting-Node Maintenance of OCS  . . . . . . . . . . . .   8\n    \
    \ 6.5.  Reporting-Node Behavior for Rate Abatement Algorithm  . .   9\n     6.6.\
    \  Reacting-Node Behavior for Rate Abatement Algorithm . . .   9\n   7.  Rate\
    \ Abatement Algorithm AVPs . . . . . . . . . . . . . . . .   9\n     7.1.  OC-Supported-Features\
    \ AVP . . . . . . . . . . . . . . . .   9\n       7.1.1.  OC-Feature-Vector AVP\
    \ . . . . . . . . . . . . . . . .  10\n     7.2.  OC-OLR AVP  . . . . . . . .\
    \ . . . . . . . . . . . . . . .  10\n       7.2.1.  OC-Maximum-Rate AVP . . .\
    \ . . . . . . . . . . . . . .  10\n     7.3.  Attribute-Value Pair Flag Rules\
    \ . . . . . . . . . . . . .  11\n   8.  Rate Abatement Algorithm  . . . . . .\
    \ . . . . . . . . . . . .  11\n     8.1.  Overview  . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  11\n     8.2.  Reporting-Node Behavior . . . . . . .\
    \ . . . . . . . . . .  11\n     8.3.  Reacting-Node Behavior  . . . . . . . .\
    \ . . . . . . . . .  13\n       8.3.1.  Default Algorithm for Rate-Based Control\
    \  . . . . . .  13\n       8.3.2.  Priority Treatment  . . . . . . . . . . . .\
    \ . . . . .  16\n       8.3.3.  Optional Enhancement: Avoidance of Resonance \
    \ . . . .  17\n   9.  IANA Considerations . . . . . . . . . . . . . . . . . .\
    \ . . .  19\n     9.1.  OC-Supported-Features . . . . . . . . . . . . . . . .\
    \ . .  19\n   10. Security Considerations . . . . . . . . . . . . . . . . . .\
    \ .  19\n   11. References  . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  19\n     11.1.  Normative References . . . . . . . . . . . . . . . . . .  19\n\
    \     11.2.  Informative References . . . . . . . . . . . . . . . . .  20\n  \
    \ Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  20\n   Authors'\
    \ Addresses  . . . . . . . . . . . . . . . . . . . . . . .  20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines a new Diameter overload-control abatement\n\
    \   algorithm, the \"rate\" algorithm.\n   The base Diameter overload specification\
    \ [RFC7683] defines the \"loss\n   algorithm\" as the default Diameter overload\
    \ loss abatement algorithm.\n   The loss algorithm allows a reporting node (see\
    \ Section 3) to\n   instruct a reacting node (see Section 3) to reduce the amount\
    \ of\n   traffic sent to the reporting node by abating (diverting or\n   throttling)\
    \ a percentage of requests sent to the server.  While this\n   can effectively\
    \ decrease the load handled by the server, it does not\n   directly address cases\
    \ where the rate of arrival of service requests\n   changes quickly.  For instance,\
    \ if the service requests that result\n   in Diameter transactions increase quickly,\
    \ then the loss algorithm\n   cannot guarantee the load presented to the server\
    \ remains below a\n   specific rate level.  The loss algorithm can be slow to\
    \ ensure the\n   stability of reporting nodes when subjected to rapidly-changing\n\
    \   loads.  The \"loss\" algorithm errs both in throttling too much when\n   there\
    \ is a dip in offered load, and throttling not enough when there\n   is a spike\
    \ in offered load.\n   Consider the case where a reacting node is handling 100\
    \ service\n   requests per second, where each of these service requests results\
    \ in\n   one Diameter transaction being sent to a reporting node.  If the\n  \
    \ reporting node is approaching an overload state, or is already in an\n   overload\
    \ state, it will send a Diameter Overload report requesting a\n   percentage reduction\
    \ in traffic sent when the loss algorithm is used\n   as a Diameter overload abatement\
    \ algorithm.  Assume for this\n   discussion that the reporting node requests\
    \ a 10% reduction.  The\n   reacting node will then abate (diverting or throttling)\
    \ ten Diameter\n   transactions a second, sending the remaining 90 transactions\
    \ per\n   second to the reporting node.\n   Now assume that the reacting node's\
    \ service requests spike to 1000\n   requests per second.  The reacting node will\
    \ continue to honor the\n   reporting node's request for a 10% reduction in traffic.\
    \  This\n   results, in this example, in the reacting node sending 900 Diameter\n\
    \   transactions per second, abating the remaining 100 transactions per\n   second.\
    \  This spike in traffic is significantly higher than the\n   reporting node is\
    \ expecting to handle and can result in negative\n   impacts to the stability\
    \ of the reporting node.\n   The reporting node can, and likely would, send another\
    \ Overload\n   report requesting that the reacting node abate 91% of requests\
    \ to get\n   back to the desired 90 transactions per second.  However, once the\n\
    \   spike has abated and the rate at which the reacting node handles\n   requests\
    \ has returned to 100 per second, this will result in just 9\n   transactions\
    \ per second being sent to the reporting node, requiring a\n   new Overload report\
    \ setting the reduction percentage back to 10%.\n   This control feedback loop\
    \ has the potential to make the situation\n   worse by causing wide fluctuations\
    \ in traffic on multiple nodes in\n   the Diameter network.\n   One of the benefits\
    \ of a rate-based algorithm over the loss algorithm\n   is that it better handles\
    \ spikes in traffic.  Instead of sending a\n   request to reduce traffic by a\
    \ percentage, the rate approach allows\n   the reporting node to specify the maximum\
    \ number of Diameter requests\n   per second that can be sent to the reporting\
    \ node.  For instance, in\n   this example, the reporting node could send a rate-based\
    \ request\n   specifying the maximum transactions per second to be 90.  The\n\
    \   reacting node will send the 90 regardless of whether it is receiving\n   100\
    \ or 1000 service requests per second.\n   It should be noted that one of the\
    \ implications of the rate-based\n   algorithm is that the reporting node needs\
    \ to determine how it wants\n   to distribute its load over the set of reacting\
    \ nodes from which it\n   is receiving traffic.  For instance, if the reporting\
    \ node is\n   receiving Diameter traffic from 10 reacting nodes and has a capacity\n\
    \   of 100 transactions per second, then the reporting node could choose\n   to\
    \ set the rate for each of the reacting nodes to 10 transactions per\n   second.\
    \  This, of course, is assuming that each of the reacting nodes\n   has equal\
    \ performance characteristics.  The reporting node could also\n   choose to have\
    \ a high-capacity reacting node send 55 transactions per\n   second and the remaining\
    \ 9 low-capacity reacting nodes send 5\n   transactions per second.  The ability\
    \ of the reporting node to\n   specify the amount of traffic on a per-reacting-node\
    \ basis implies\n   that the reporting node must maintain state for each of the\
    \ reacting\n   nodes.  This state includes the current allocation of Diameter\n\
    \   traffic to that reacting node.  If the number of reacting nodes\n   changes,\
    \ either because new nodes are added, nodes are removed from\n   service, or nodes\
    \ fail, then the reporting node will need to\n   redistribute the maximum Diameter\
    \ transactions over the new set of\n   reacting nodes.\n   This document extends\
    \ the base Diameter Overload Indication\n   Conveyance (DOIC) solution [RFC7683]\
    \ to add support for the rate\n   abatement algorithm.\n   This document draws\
    \ heavily on work in the SIP Overload Control\n   Working Group.  The definition\
    \ of the rate abatement algorithm is\n   copied almost verbatim from the SIP Overload\
    \ Control (SOC) document\n   [RFC7415], with changes focused on making the wording\
    \ consistent with\n   the DOIC solution and the Diameter protocol.\n"
- title: 2.  Requirements
  contents:
  - "2.  Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   Diameter Node\n      A Diameter Client, Diameter Server,\
    \ or Diameter Agent [RFC6733]\n   Diameter Endpoint\n      A Diameter Client or\
    \ Diameter Server [RFC6733]\n   DOIC Node\n      A Diameter node that supports\
    \ the DOIC solution defined in\n      [RFC7683]\n   Reporting Node\n      A DOIC\
    \ node that sends an Overload report in a Diameter answer\n      message\n   Reacting\
    \ Node\n      A DOIC node that receives and acts on a DOIC Overload report\n"
- title: 4.  Interaction with DOIC Report Types
  contents:
  - "4.  Interaction with DOIC Report Types\n   As of the publication of this specification,\
    \ there are three DOIC\n   report types:\n   HOST_REPORT 0:\n      Overload of\
    \ a specific Diameter application at a specific Diameter\n      node as defined\
    \ in [RFC7683]\n   REALM_REPORT 1:\n      Overload of a specific Diameter application\
    \ at a specific Diameter\n      realm as defined in [RFC7683]\n   PEER_REPORT\
    \ 2:\n      Overload of a specific Diameter peer as defined in [RFC8581]\n   The\
    \ rate algorithm MAY be selected by reporting nodes for any of\n   these report\
    \ types.\n   It is expected that all report types defined in the future will\n\
    \   indicate whether or not the rate algorithm can be used with that\n   report\
    \ type.\n"
- title: 5.  Capability Announcement
  contents:
  - "5.  Capability Announcement\n   This document defines the rate abatement algorithm\
    \ (referred to as\n   \"rate\" in this document) feature.  Support for the rate\
    \ feature by a\n   DOIC node will be indicated by a new value of the OC-Feature-Vector\n\
    \   attribute-value pair (AVP), as described in Section 7.1.1, per the\n   rules\
    \ defined in [RFC7683].\n   Since all nodes that support DOIC are required to\
    \ support the loss\n   algorithm, DOIC nodes supporting the rate feature will\
    \ support both\n   the loss and rate abatement algorithms.\n   DOIC reacting nodes\
    \ supporting the rate feature MUST indicate support\n   for both the loss and\
    \ rate algorithms in the OC-Feature-Vector AVP\n   and MAY indicate support for\
    \ other algorithms.\n   As defined in [RFC7683], a DOIC reporting node supporting\
    \ the rate\n   feature selects a single abatement algorithm in the OC-Feature-Vector\n\
    \   AVP and OC-Peer-Algo AVP in the answer message sent to the DOIC\n   reacting\
    \ nodes.\n   A reporting node can select one abatement algorithm to apply to Host\n\
    \   and Realm reports, and a different algorithm to apply to peer\n   reports.\n\
    \   For Host or Realm reports, the selected algorithm is reflected in the\n  \
    \ OC-Feature-Vector AVP sent as part of the OC-Supported-Features AVP\n   included\
    \ in answer messages for transactions where the request\n   contained an OC-Supported-Features\
    \ AVP.  This is per the procedures\n   defined in [RFC7683].\n   For Peer reports,\
    \ the selected algorithm is reflected in the OC-Peer-\n   Algo AVP sent as part\
    \ of the OC-Supported-Features AVP included in\n   answer messages for transactions\
    \ where the request contained an\n   OC-Supported-Features AVP.  This is per the\
    \ procedures defined in\n   [RFC8581].\n"
- title: 6.  Overload-Report Handling
  contents:
  - "6.  Overload-Report Handling\n   This section describes any changes to the behavior\
    \ defined in\n   [RFC7683] for the handling of Overload reports when the rate\n\
    \   abatement algorithm is used.\n"
- title: 6.1.  Reporting-Node OCS
  contents:
  - "6.1.  Reporting-Node OCS\n   A reporting node that uses the rate abatement algorithm\
    \ SHOULD\n   maintain reporting-node Overload Control State (OCS) for each\n \
    \  reacting node to which it sends a rate Overload Report (OLR).\n      Note:\
    \ This is different from the behavior defined in [RFC7683]\n      where a reporting\
    \ node sends a single loss percentage to all\n      reacting nodes.\n   A reporting\
    \ node SHOULD maintain OCS entries when using the rate\n   abatement algorithm\
    \ per supported Diameter application, per targeted\n   reacting node and per report\
    \ type.\n   A rate OCS entry is identified by the tuple of Application-ID, report\n\
    \   type, and DiameterIdentity of the target of the rate OLR.\n   The rate OCS\
    \ entry SHOULD include the rate allocated to the reacting\n   node.\n   A reporting\
    \ node that has selected the rate abatement algorithm MUST\n   indicate the rate\
    \ requested to be applied by DOIC reacting nodes in\n   the OC-Maximum-Rate AVP\
    \ included in the OC-OLR AVP.\n   All other elements for the OCS defined in [RFC7683]\
    \ and [RFC8581]\n   also apply to the reporting node's OCS when using the rate\
    \ abatement\n   algorithm.\n"
- title: 6.2.  Reacting-Node OCS
  contents:
  - "6.2.  Reacting-Node OCS\n   A reacting node that supports the rate abatement\
    \ algorithm MUST\n   indicate rate as the selected abatement algorithm in the\
    \ reacting-\n   node OCS based on the OC-Feature-Vector AVP or the OC-Peer-Algo\
    \ AVP\n   in the received OC-Supported-Features AVP.\n   A reacting node that\
    \ supports the rate abatement algorithm MUST\n   include the rate specified in\
    \ the OC-Maximum-Rate AVP included in the\n   OC-OLR AVP as an element of the\
    \ abatement-algorithm-specific portion\n   of reacting-node OCS entries.\n   All\
    \ other elements for the OCS defined in [RFC7683] and [RFC8581]\n   also apply\
    \ to the reporting nodes OCS when using the rate abatement\n   algorithm.\n"
- title: 6.3.  Reporting-Node Maintenance of OCS
  contents:
  - "6.3.  Reporting-Node Maintenance of OCS\n   A reporting node that has selected\
    \ the rate abatement algorithm and\n   enters an overload condition MUST indicate\
    \ rate as the abatement\n   algorithm and MUST indicate the selected rate in the\
    \ resulting\n   reporting-node OCS entries.\n   When selecting the rate algorithm\
    \ in the response to a request that\n   contained an OC-Supporting-Features AVP\
    \ with an OC-Feature-Vector AVP\n   indicating support for the rate feature, a\
    \ reporting node MUST ensure\n   that a reporting-node OCS entry exists for the\
    \ target of the Overload\n   report.  The target is defined as follows:\n   o\
    \  For Host reports, the target is the DiameterIdentity contained in\n      the\
    \ Origin-Host AVP received in the request.\n   o  For Realm reports, the target\
    \ is the DiameterIdentity contained in\n      the Origin-Realm AVP received in\
    \ the request.\n   o  For Peer reports, the target is the DiameterIdentity of\
    \ the\n      Diameter peer from which the request was received.\n   A reporting\
    \ node that receives a capability announcement from a new\n   reacting node, meaning\
    \ a reacting node for which it does not have an\n   OCS entry, and the reporting\
    \ node that chooses the rate algorithm for\n   that reacting node may need to\
    \ recalculate the rate to be allocated\n   to all reacting nodes.  Any changed\
    \ rate values will be communicated\n   in the next OLR sent to each reacting node.\n"
- title: 6.4.  Reacting-Node Maintenance of OCS
  contents:
  - "6.4.  Reacting-Node Maintenance of OCS\n   When receiving an answer message indicating\
    \ that the reporting node\n   has selected the rate algorithm, a reacting node\
    \ MUST indicate the\n   rate abatement algorithm in the reacting-node OCS entry\
    \ for the\n   reporting node.\n   A reacting node receiving an Overload report\
    \ for the rate abatement\n   algorithm MUST save the rate received in the OC-Maximum-Rate\
    \ AVP\n   contained in the OC-OLR AVP in the reacting-node OCS entry.\n"
- title: 6.5.  Reporting-Node Behavior for Rate Abatement Algorithm
  contents:
  - "6.5.  Reporting-Node Behavior for Rate Abatement Algorithm\n   When in an overload\
    \ condition with rate selected as the overload\n   abatement algorithm and when\
    \ handling a request that contained an\n   OC-Supported-Features AVP that indicated\
    \ support for the rate\n   abatement algorithm, a reporting node SHOULD include\
    \ an OC-OLR AVP\n   for the rate algorithm using the parameters stored in the\n\
    \   reporting-node OCS for the target of the Overload report.\n      Note: It\
    \ is also possible for the reporting node to send Overload\n      reports with\
    \ the rate algorithm indicated even when the reporting\n      node is not in an\
    \ overloaded state.  This could be a strategy to\n      proactively avoid entering\
    \ into an overloaded state.  Whether or\n      not to do so is up to local policy.\n\
    \   When sending an Overload report for the rate algorithm, the\n   OC-Maximum-Rate\
    \ AVP MUST be included in the OC-OLR AVP and the\n   OC-Reduction-Percentage AVP\
    \ MUST NOT be included.\n"
- title: 6.6.  Reacting-Node Behavior for Rate Abatement Algorithm
  contents:
  - "6.6.  Reacting-Node Behavior for Rate Abatement Algorithm\n   When determining\
    \ if abatement treatment should be applied to a\n   request being sent to a reporting\
    \ node that has selected the rate\n   abatement algorithm, the reacting node can\
    \ choose to use the\n   algorithm detailed in Section 8.\n   Other algorithms\
    \ for controlling the rate MAY be implemented by the\n   reacting node.  Any algorithm\
    \ implemented MUST correctly limit the\n   maximum rate of traffic being sent\
    \ to the reporting node.\n   Once a determination is made by the reacting node\
    \ that an individual\n   Diameter request is to be subjected to abatement treatment,\
    \ then the\n   procedures for throttling and diversion defined in [RFC7683] and\n\
    \   [RFC8581] apply.\n"
- title: 7.  Rate Abatement Algorithm AVPs
  contents:
  - '7.  Rate Abatement Algorithm AVPs

    '
- title: 7.1.  OC-Supported-Features AVP
  contents:
  - "7.1.  OC-Supported-Features AVP\n   The rate algorithm does not add any new AVPs\
    \ to the OC-Supported-\n   Features AVP.\n   The rate algorithm does add a new\
    \ feature bit to be carried in the\n   OC-Feature-Vector AVP.\n"
- title: 7.1.1.  OC-Feature-Vector AVP
  contents:
  - "7.1.1.  OC-Feature-Vector AVP\n   This extension adds the following capability\
    \ to the OC-Feature-Vector\n   AVP.\n   OLR_RATE_ALGORITHM (0x0000000000000004)\n\
    \      This bit is assigned to the rate abatement algorithm.  When this\n    \
    \  flag is set by the overload-control endpoint, it indicates that\n      the\
    \ DOIC node supports the rate abatement algorithm.\n"
- title: 7.2.  OC-OLR AVP
  contents:
  - "7.2.  OC-OLR AVP\n   This extension defines the OC-Maximum-Rate AVP to be an\
    \ optional part\n   of the OC-OLR AVP.\n      OC-OLR ::= < AVP Header: 623 >\n\
    \                 < OC-Sequence-Number >\n                 < OC-Report-Type >\n\
    \                 [ OC-Reduction-Percentage ]\n                 [ OC-Validity-Duration\
    \ ]\n                 [ SourceID ]\n                 [ OC-Maximum-Rate ]\n   \
    \            * [ AVP ]\n   This extension makes no changes to the other AVPs that\
    \ are part of\n   the OC-OLR AVP.\n   This extension does not define new Overload\
    \ report types.  The\n   existing report types of HOST_REPORT and REALM_REPORT\
    \ defined in\n   [RFC7683] apply to the rate control algorithm.  The report type\
    \ of\n   PEER_REPORT defined in [RFC8581] also applies to the rate control\n \
    \  algorithm.\n"
- title: 7.2.1.  OC-Maximum-Rate AVP
  contents:
  - "7.2.1.  OC-Maximum-Rate AVP\n   The OC-Maximum-Rate AVP (AVP code 670) is of\
    \ type Unsigned32 and\n   describes the maximum rate that the sender is requested\
    \ to send\n   traffic.  This is specified in terms of requests per second.\n \
    \  A value of zero indicates that no traffic is to be sent.\n"
- title: 7.3.  Attribute-Value Pair Flag Rules
  contents:
  - "7.3.  Attribute-Value Pair Flag Rules\n                                     \
    \                        +---------+\n                                       \
    \                      |AVP flag |\n                                         \
    \                    |rules    |\n                                           \
    \                  +----+----+\n                            AVP   Section    \
    \                |    |MUST|\n    Attribute Name          Code  Defined  Value\
    \ Type        |MUST| NOT|\n   +---------------------------------------------------------+----+----+\n\
    \   |OC-Maximum-Rate         670    7.2.1   Unsigned32        |    | V  |\n  \
    \ +---------------------------------------------------------+----+----+\n"
- title: 8.  Rate Abatement Algorithm
  contents:
  - "8.  Rate Abatement Algorithm\n   This section is pulled from [RFC7415] with minor\
    \ changes needed to\n   make it apply to the Diameter protocol.\n"
- title: 8.1.  Overview
  contents:
  - "8.1.  Overview\n   The reporting node is the one protected by the overload control\n\
    \   algorithm defined here.  The reacting node is the one that abates\n   traffic\
    \ towards the server.\n   Following the procedures defined in [RFC7683], the reacting\
    \ node and\n   reporting node signal their support for rate-based overload control.\n\
    \   Then, periodically, the reporting node relies on internal\n   measurements\
    \ (e.g., CPU utilization or queuing delay) to evaluate its\n   overload state\
    \ and estimate a target maximum Diameter request rate in\n   number of requests\
    \ per second (as opposed to target percent reduction\n   in the case of loss-based\
    \ abatement).\n   When in an overloaded state, the reporting node uses the OC-OLR\
    \ AVP\n   to inform reacting nodes of its overload state and of the target\n \
    \  Diameter request rate.\n   Upon receiving the Overload report with a target\
    \ maximum Diameter\n   request rate, each reacting node applies overload abatement\
    \ for new\n   Diameter requests towards the reporting node.\n"
- title: 8.2.  Reporting-Node Behavior
  contents:
  - "8.2.  Reporting-Node Behavior\n   The actual algorithm used by the reporting\
    \ node to determine its\n   overload state and estimate a target maximum Diameter\
    \ request rate is\n   beyond the scope of this document.\n   However, the reporting\
    \ node MUST periodically evaluate its overload\n   state and estimate a target\
    \ Diameter request rate beyond which it\n   would become overloaded.  The reporting\
    \ node must allocate a portion\n   of the target Diameter request rate to each\
    \ of its reacting nodes.\n   The reporting node may set the same rate for every\
    \ reacting node, or\n   may set different rates for different reacting nodes.\n\
    \   The maximum rate determined by the reporting node for a reacting node\n  \
    \ applies to the entire stream of Diameter requests, even though\n   abatement\
    \ may only affect a particular subset of the requests, since\n   the reacting\
    \ node might apply priority as part of its decision of\n   which requests to abate.\n\
    \   When setting the maximum rate for a particular reacting node, the\n   reporting\
    \ node may need to take into account the workload (e.g., CPU\n   load per request)\
    \ of the distribution of message types from that\n   reacting node.  Furthermore,\
    \ because the reacting node may prioritize\n   the specific types of messages\
    \ it sends while under overload\n   restriction, this distribution of message\
    \ types may be different from\n   the message distribution for that reacting node\
    \ under non-overload\n   conditions (e.g., either higher or lower CPU load).\n\
    \   Note that the value of OC-Maximum-Rate AVP (in request messages per\n   second)\
    \ for the rate algorithm provides a loose upper bound on the\n   traffic sent\
    \ by the reacting node to the reporting node.\n   In other words, when multiple\
    \ reacting nodes are being controlled by\n   an overloaded reporting node, at\
    \ any given time, some reporting nodes\n   may receive requests at a rate below\
    \ its target maximum Diameter\n   request rate while receiving others above that\
    \ target rate.  But, the\n   resulting request rate presented to the overloaded\
    \ reporting node\n   will converge towards the target Diameter request rate or\
    \ a lower\n   rate.\n   Upon detection of overload, and the determination to invoke\
    \ overload\n   controls, the reporting node follows the specifications in [RFC7683]\n\
    \   to notify its reacting nodes of the allocated target maximum Diameter\n  \
    \ request rate, and to notify them that the rate abatement is in\n   effect.\n\
    \   The reporting node uses the OC-Maximum-Rate AVP defined in this\n   specification\
    \ to communicate a target maximum Diameter request rate\n   to each of its clients.\n"
- title: 8.3.  Reacting-Node Behavior
  contents:
  - '8.3.  Reacting-Node Behavior

    '
- title: 8.3.1.  Default Algorithm for Rate-Based Control
  contents:
  - "8.3.1.  Default Algorithm for Rate-Based Control\n   A reference algorithm is\
    \ shown below.\n   Note that use of \"//\" below indicates a comment.\n   No priority\
    \ case:\n        // T: inter-transmission interval, set to 1 / OC-Maximum-Rate\n\
    \        // TAU: tolerance parameter\n        // ta: arrival time of the most\
    \ recent arrival\n        // LCT: arrival time of last Diameter request that\n\
    \        //      was sent to the server\n        //      (initialized to the first\
    \ arrival time)\n        // X: current value of the leaky bucket counter (initialized\
    \ to\n        //    TAU0)\n        // After most recent arrival, calculate auxiliary\
    \ variable Xp\n        Xp = X - (ta - LCT);\n        if (Xp <= TAU) {\n      \
    \    // Transmit Diameter request\n          // Update X and LCT\n          X\
    \ = max (0, Xp) + T;\n          LCT = ta;\n        } else {\n          // Reject\
    \ Diameter request\n          // Do not update X and LCT\n        }\n   In determining\
    \ whether or not to transmit a specific message, the\n   reacting node can use\
    \ any algorithm that limits the message rate to\n   the OC-Maximum-Rate AVP value\
    \ in units of messages per second.  For\n   ease of discussion, we define T =\
    \ 1/[OC-Maximum-Rate] as the target\n   inter-Diameter request interval.  It may\
    \ be strictly deterministic,\n   or it may be probabilistic.  It may or may not\
    \ have a tolerance\n   factor, to allow for short bursts, as long as the long-term\
    \ rate\n   remains below 1/T.\n   The algorithm may have provisions for prioritizing\
    \ traffic.\n   If the algorithm requires other parameters (in addition to \"T\"\
    , which\n   is 1/OC-Maximum-Rate), they may be set autonomously by the reacting\n\
    \   node, or they may be negotiated independently between the reacting\n   node\
    \ and the reporting node.\n   In either case, the coordination is out of the scope\
    \ of this\n   document.  The default algorithms presented here (one with and one\n\
    \   without provisions for prioritizing traffic) are only examples.\n   To apply\
    \ abatement treatment to new Diameter requests at the rate\n   specified in the\
    \ OC-Maximum-Rate AVP value sent by the reporting node\n   to its reacting nodes,\
    \ the reacting node MAY use the proposed default\n   algorithm for rate-based\
    \ control or any other equivalent algorithm\n   that forward messages in conformance\
    \ with the upper bound of 1/T\n   messages per second.\n   The default leaky bucket\
    \ algorithm presented here is based on\n   Appendix A.2 of [ITU-T-I.371].  The\
    \ algorithm makes it possible for\n   reacting nodes to deliver Diameter requests\
    \ at a rate specified in\n   the OC-Maximum-Rate value with tolerance parameter\
    \ TAU (preferably\n   configurable).\n   Conceptually, the leaky bucket algorithm\
    \ can be viewed as a finite\n   capacity bucket whose real-valued content drains\
    \ out at a continuous\n   rate of 1 unit of content per time unit and whose content\
    \ increases\n   by the increment T for each forwarded Diameter request.  T is\n\
    \   computed as the inverse of the rate specified in the OC-Maximum-Rate\n   AVP\
    \ value, namely T = 1 / OC-Maximum-Rate.\n   Note that when the OC-Maximum-Rate\
    \ value is 0 with a non-zero\n   OC-Validity-Duration, then the reacting node\
    \ should apply abatement\n   treatment to 100% of Diameter requests destined to\
    \ the overloaded\n   reporting node.  However, when the OC-Validity-Duration value\
    \ is 0,\n   the reacting node should stop applying abatement treatment.\n   If,\
    \ at a new Diameter request arrival, the content of the bucket is\n   less than\
    \ or equal to the limit value TAU, then the Diameter request\n   is forwarded\
    \ to the server; otherwise, the abatement treatment is\n   applied to the Diameter\
    \ request.\n   Note that the capacity of the bucket (the upper bound of the counter)\n\
    \   is (T + TAU).\n   The tolerance parameter TAU determines how close the long-term\n\
    \   admitted rate is to an ideal control that would admit all Diameter\n   requests\
    \ for arrival rates less than 1/T and then admit Diameter\n   requests precisely\
    \ at the rate of 1/T for arrival rates above 1/T.\n   In particular, at mean arrival\
    \ rates close to 1/T, it determines the\n   tolerance to deviation of the inter-arrival\
    \ time from T.  (The larger\n   TAU, the more tolerance to deviations from the\
    \ inter-departure\n   interval T.)\n   This deviation from the inter-departure\
    \ interval influences the\n   admitted rate burstiness or the number of consecutive\
    \ Diameter\n   requests forwarded to the reporting node (burst size proportional\
    \ to\n   TAU over the difference between 1/T and the arrival rate).\n   In situations\
    \ where reacting nodes are configured with some knowledge\n   about the reporting\
    \ node and other traffic sources (e.g., operator\n   pre-provisioning), it can\
    \ be beneficial to choose a value of TAU\n   based on how many reacting nodes\
    \ will be sending requests to the\n   reporting node.\n   Reporting nodes with\
    \ a very large number of reacting nodes, each with\n   a relatively small arrival\
    \ rate, will generally benefit from a\n   smaller value for TAU in order to limit\
    \ queuing (and hence response\n   times) at the reporting node when subjected\
    \ to a sudden surge of\n   traffic from all reacting nodes.  Conversely, a reporting\
    \ node with a\n   relatively small number of reacting nodes, each with a proportionally\n\
    \   larger arrival rate, will benefit from a larger value of TAU.\n   Once the\
    \ control has been activated, at the arrival time of the k-th\n   new Diameter\
    \ request, ta(k), the content of the bucket is\n   provisionally updated to the\
    \ value\n   X' = X - (ta(k) - LCT)\n   where X is the value of the leaky bucket\
    \ counter after arrival of the\n   last forwarded Diameter request, and LCT is\
    \ the time at which the\n   last Diameter request was forwarded.\n   If X' is\
    \ less than or equal to the limit value TAU, then the new\n   Diameter request\
    \ is forwarded and the leaky bucket counter X is set\n   to X' (or to 0 if X'\
    \ is negative) plus the increment T, and LCT is\n   set to the current time ta(k).\
    \  If X' is greater than the limit value\n   TAU, then the abatement treatment\
    \ is applied to the new Diameter\n   request, and the values of X and LCT are\
    \ unchanged.\n   When the first response from the reporting node has been received,\n\
    \   indicating control activation (OC-Validity-Duration>0), LCT is set to\n  \
    \ the time of activation, and the leaky bucket counter is initialized\n   to the\
    \ parameter TAU0 (preferably configurable), which is 0 or larger\n   but less\
    \ than or equal to TAU.\n   TAU can assume any positive real number value and\
    \ is not necessarily\n   bounded by T.\n   TAU=4*T is a reasonable compromise\
    \ between burst size and abatement\n   rate adaptation at low offered rate.\n\
    \   Note that specification of a value for TAU, and any communication or\n   coordination\
    \ between servers, is beyond the scope of this document.\n"
- title: 8.3.2.  Priority Treatment
  contents:
  - "8.3.2.  Priority Treatment\n   A reference algorithm is shown below.\n   Priority\
    \ case:\n     // T: inter-transmission interval, set to 1 / OC-Maximum-Rate\n\
    \     // TAU1: tolerance parameter of no priority Diameter requests\n     // TAU2:\
    \ tolerance parameter of priority Diameter requests\n     // ta: arrival time\
    \ of the most recent arrival\n     // LCT: arrival time of last Diameter request\
    \ that\n     //      was sent to the server\n     //      (initialized to the\
    \ first arrival time)\n     // X: current value of the leaky bucket counter (initialized\
    \ to\n     //    TAU0)\n     // After most recent arrival, calculate auxiliary\
    \ variable Xp\n     Xp = X - (ta - LCT);\n    if (AnyRequestReceived && Xp <=\
    \ TAU1) || (PriorityRequestReceived &&\n     Xp <= TAU2 && Xp > TAU1) {\n    \
    \   // Transmit Diameter request\n       // Update X and LCT\n       X = max (0,\
    \ Xp) + T;\n       LCT = ta;\n     } else {\n       // Apply abatement treatment\
    \ to Diameter request\n       // Do not update X and LCT\n     }\n   The reacting\
    \ node is responsible for applying message priority and\n   for maintaining two\
    \ categories of requests: request candidates for\n   reduction, and requests not\
    \ subject to reduction (except under\n   extenuating circumstances when there\
    \ aren't any messages in the first\n   category that can be reduced).\n   Accordingly,\
    \ the proposed leaky bucket implementation is modified to\n   support priority\
    \ using two thresholds for Diameter requests in the\n   set of request candidates\
    \ for reduction.  With two priorities, the\n   proposed leaky bucket requires\
    \ two thresholds TAU1 < TAU2:\n   o  All new requests would be admitted when the\
    \ leaky bucket counter\n      is at or below TAU1.\n   o  Only higher priority\
    \ requests would be admitted when the leaky\n      bucket counter is between TAU1\
    \ and TAU2.\n   o  All requests would be rejected when the bucket counter is above\n\
    \      TAU2.\n   This can be generalized to n priorities using n thresholds for\
    \ n>2.\n   With a priority scheme that relies on two tolerance parameters (TAU2\n\
    \   influences the priority traffic, and TAU1 influences the non-priority\n  \
    \ traffic), always set TAU1 <= TAU2 (TAU is replaced by TAU1 and TAU2).\n   Setting\
    \ both tolerance parameters to the same value is equivalent to\n   having no priority.\
    \  TAU1 influences the admitted rate the same way\n   as TAU does when no priority\
    \ is set, and the larger the difference\n   between TAU1 and TAU2, the closer\
    \ the control is to strict priority\n   queuing.\n   TAU1 and TAU2 can assume\
    \ any positive real number value and is not\n   necessarily bounded by T.\n  \
    \ Reasonable values for TAU0, TAU1, and TAU2 are:\n   o  TAU0 = 0,\n   o  TAU1\
    \ = 1/2 * TAU2, and\n   o  TAU2 = 10 * T.\n   Note that specification of a value\
    \ for TAU1 and TAU2, and any\n   communication or coordination between servers,\
    \ is beyond the scope of\n   this document.\n"
- title: '8.3.3.  Optional Enhancement: Avoidance of Resonance'
  contents:
  - "8.3.3.  Optional Enhancement: Avoidance of Resonance\n   As the number of reacting-node\
    \ sources of traffic increases and the\n   throughput of the reporting node decreases,\
    \ the maximum rate admitted\n   by each reacting node needs to decrease, and therefore\
    \ the value of T\n   becomes larger.  Under some circumstances, e.g., if the traffic\n\
    \   arises very quickly simultaneously at many sources, the occupancies\n   of\
    \ each bucket can become synchronized, resulting in both the\n   admissions from\
    \ each source being close in time and batched, or very\n   \"peaky\" arrivals\
    \ at the reporting node.  This gives rise not only to\n   control instability,\
    \ but also very poor delays and even lost\n   messages.  An appropriate term for\
    \ this is \"resonance\" [Erramilli].\n   If the network topology is such that\
    \ resonance can occur, then a\n   simple way to avoid resonance is to randomize\
    \ the bucket occupancy at\n   two appropriate points: at the activation of control,\
    \ and whenever\n   the bucket empties, as described below:\n   After updating\
    \ the value of the leaky bucket to X', generate a value\n   u as follows:\n  \
    \ if X' > 0, then u=0\n   else, if X' <= 0, then let u be set to a random value\
    \ uniformly\n   distributed between -1/2 and +1/2\n   Then, (only) if the arrival\
    \ is admitted, increase the bucket content\n   by an amount T + uT, which will\
    \ therefore be just T if the bucket\n   hadn't emptied, or lie between T/2 and\
    \ 3T/2 if it had.\n   This randomization should also be done when control is activated,\n\
    \   i.e., instead of simply initializing the leaky bucket counter to\n   TAU0,\
    \ initialize it to TAU0 + uT, where u is uniformly distributed as\n   above. \
    \ Since activation would have been a result of the response to\n   a request sent\
    \ by the reacting node, the second term in this\n   expression can be interpreted\
    \ as being the bucket increment following\n   that admission.\n   This method\
    \ has the following characteristics:\n   o  If TAU0 is chosen to be equal to TAU\
    \ and all sources activate\n      control at the same time due to an extremely\
    \ high request rate,\n      then the time until the first request admitted by\
    \ each reacting\n      node would be uniformly distributed over [0,T];\n   o \
    \ The maximum occupancy is TAU + (3/2)T, rather than TAU + T without\n      randomization;\n\
    \   o  For the special case of \"classic gapping\", where TAU=0, then the\n  \
    \    minimum time between admissions is uniformly distributed over\n      [T/2,\
    \ 3T/2], and the mean time between admissions is the same,\n      i.e., T+1/R\
    \ where R is the request arrival rate.\n   o  At high load, randomization rarely\
    \ occurs.  Therefore, there is no\n      loss of precision of the admitted rate,\
    \ even though the randomized\n      \"phasing\" of the buckets remains.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   IANA has registered the following values in the \"\
    Authentication,\n   Authorization, and Accounting (AAA) Parameters\" registry:\n\
    \      One new AVP code is defined in Section 7.2.1.\n      One new OC-Feature-Vector\
    \ AVP value is defined in Section 7.1.1.\n"
- title: 9.1.  OC-Supported-Features
  contents:
  - "9.1.  OC-Supported-Features\n   As indicated in Section 7.1.1, a new allocation\
    \ has been made for the\n   OC-Feature-Vector AVP.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   The rate abatement mechanism is an extension\
    \ to the base Diameter\n   Overload mechanism.  As such, all of the security considerations\n\
    \   outlined in [RFC7683] apply to the rate abatement mechanism.\n   In addition,\
    \ the rate algorithm could be used to handle denial-of-\n   service (DoS) attacks\
    \ more effectively than the loss algorithm.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC6733]  Fajardo, V., Ed., Arkko, J., Loughney, J., and G. Zorn,\n     \
    \         Ed., \"Diameter Base Protocol\", RFC 6733,\n              DOI 10.17487/RFC6733,\
    \ October 2012,\n              <https://www.rfc-editor.org/info/rfc6733>.\n  \
    \ [RFC7683]  Korhonen, J., Ed., Donovan, S., Ed., Campbell, B., and L.\n     \
    \         Morand, \"Diameter Overload Indication Conveyance\",\n             \
    \ RFC 7683, DOI 10.17487/RFC7683, October 2015,\n              <https://www.rfc-editor.org/info/rfc7683>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8581]  Donovan,\
    \ S., \"Diameter Agent Overload and the Peer\n              Overload Report\"\
    , RFC 8581, DOI 10.17487/RFC8581, August\n              2019, <https://www.rfc-editor.org/info/rfc8581>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [Erramilli]\n              Erramilli, A. and\
    \ L. Forys, \"Traffic Synchronization\n              Effects In Teletraffic Systems\"\
    , 1991.\n   [ITU-T-I.371]\n              ITU-T, \"Traffic control and congestion\
    \ control in B-ISDN\",\n              ITU-T Recommendation I.371, March 2004.\n\
    \   [RFC7415]  Noel, E. and P. Williams, \"Session Initiation Protocol\n     \
    \         (SIP) Rate Control\", RFC 7415, DOI 10.17487/RFC7415,\n            \
    \  February 2015, <https://www.rfc-editor.org/info/rfc7415>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Lionel Morand for his contributions\n\
    \   to this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Steve Donovan (editor)\n   Oracle\n   7460 Warren Parkway,\
    \ Suite 300\n   Frisco, Texas  75034\n   United States of America\n   Email: srdonovan@usdonovans.com\n\
    \   Eric Noel\n   AT&T Labs\n   200s Laurel Avenue\n   Middletown, NJ  07747\n\
    \   United States of America\n   Email: ecnoel@research.att.com\n"
