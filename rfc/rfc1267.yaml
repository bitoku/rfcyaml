- title: __initial_text__
  contents:
  - '                  A Border Gateway Protocol 3 (BGP-3)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo, together with its companion document, \"Application\
    \ of the\n   Border Gateway Protocol in the Internet\", define an inter-autonomous\n\
    \   system routing protocol for the Internet.  This RFC specifies an IAB\n   standards\
    \ track protocol for the Internet community, and requests\n   discussion and suggestions\
    \ for improvements.  Please refer to the\n   current edition of the \"IAB Official\
    \ Protocol Standards\" for the\n   standardization state and status of this protocol.\
    \  Distribution of\n   this memo is unlimited.\n"
- title: 1.  Acknowledgements
  contents:
  - "1.  Acknowledgements\n   We would like to express our thanks to Guy Almes (Rice\
    \ University),\n   Len Bosack (cisco Systems), Jeffrey C. Honig (Cornell Theory\
    \ Center)\n   and all members of the Interconnectivity Working Group of the\n\
    \   Internet Engineering Task Force, chaired by Guy Almes, for their\n   contributions\
    \ to this document.\n   We like to explicitly thank Bob Braden (ISI) for the review\
    \ of this\n   document as well as his constructive and valuable comments.\n  \
    \ We would also like to thank Bob Hinden, Director for Routing of the\n   Internet\
    \ Engineering Steering Group, and the team of reviewers he\n   assembled to review\
    \ earlier versions of this document.  This team,\n   consisting of Deborah Estrin,\
    \ Milo Medin, John Moy, Radia Perlman,\n   Martha Steenstrup, Mike St. Johns,\
    \ and Paul Tsuchiya, acted with a\n   strong combination of toughness, professionalism,\
    \ and courtesy.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   The Border Gateway Protocol (BGP) is an inter-Autonomous\
    \ System\n   routing protocol.  It is built on experience gained with EGP as\n\
    \   defined in RFC 904 [1] and EGP usage in the NSFNET Backbone as\n   described\
    \ in RFC 1092 [2] and RFC 1093 [3].\n   The primary function of a BGP speaking\
    \ system is to exchange network\n   reachability information with other BGP systems.\
    \  This network\n   reachability information includes information on the full\
    \ path of\n   Autonomous Systems (ASs) that traffic must transit to reach these\n\
    \   networks.  This information is sufficient to construct a graph of AS\n   connectivity\
    \ from which routing loops may be pruned and some policy\n   decisions at the\
    \ AS level may be enforced.\n   To characterize the set of policy decisions that\
    \ can be enforced\n   using BGP, one must focus on the rule that an AS advertize\
    \ to its\n   neighbor ASs only those routes that it itself uses.  This rule\n\
    \   reflects the \"hop-by-hop\" routing paradigm generally used throughout\n \
    \  the current Internet.  Note that some policies cannot be supported by\n   the\
    \ \"hop-by-hop\" routing paradigm and thus require techniques such as\n   source\
    \ routing to enforce.  For example, BGP does not enable one AS\n   to send traffic\
    \ to a neighbor AS intending that that traffic take a\n   different route from\
    \ that taken by traffic originating in the\n   neighbor AS.  On the other hand,\
    \ BGP can support any policy\n   conforming to the \"hop-by-hop\" routing paradigm.\
    \  Since the current\n   Internet uses only the \"hop-by-hop\" routing paradigm\
    \ and since BGP\n   can support any policy that conforms to that paradigm, BGP\
    \ is highly\n   applicable as an inter-AS routing protocol for the current Internet.\n\
    \   A more complete discussion of what policies can and cannot be\n   enforced\
    \ with BGP is outside the scope of this document (but refer to\n   the companion\
    \ document discussing BGP usage [5]).\n   BGP runs over a reliable transport protocol.\
    \  This eliminates the\n   need to implement explicit update fragmentation, retransmission,\n\
    \   acknowledgement, and sequencing.  Any authentication scheme used by\n   the\
    \ transport protocol may be used in addition to BGP's own\n   authentication mechanisms.\
    \  The error notification mechanism used in\n   BGP assumes that the transport\
    \ protocol supports a \"graceful\" close,\n   i.e., that all outstanding data\
    \ will be delivered before the\n   connection is closed.\n   BGP uses TCP [4]\
    \ as its transport protocol.  TCP meets BGP's\n   transport requirements and is\
    \ present in virtually all commercial\n   routers and hosts.  In the following\
    \ descriptions the phrase\n   \"transport protocol connection\" can be understood\
    \ to refer to a TCP\n   connection.  BGP uses TCP port 179 for establishing its\
    \ connections.\n   This memo uses the term `Autonomous System' (AS) throughout.\
    \  The\n   classic definition of an Autonomous System is a set of routers under\n\
    \   a single technical administration, using an interior gateway protocol\n  \
    \ and common metrics to route packets within the AS, and using an\n   exterior\
    \ gateway protocol to route packets to other ASs.  Since this\n   classic definition\
    \ was developed, it has become common for a single\n   AS to use several interior\
    \ gateway protocols and sometimes several\n   sets of metrics within an AS.  The\
    \ use of the term Autonomous System\n   here stresses the fact that, even when\
    \ multiple IGPs and metrics are\n   used, the administration of an AS appears\
    \ to other ASs to have a\n   single coherent interior routing plan and presents\
    \ a consistent\n   picture of what networks are reachable through it.  From the\n\
    \   standpoint of exterior routing, an AS can be viewed as monolithic:\n   reachability\
    \ to networks directly connected to the AS must be\n   equivalent from all border\
    \ gateways of the AS.\n   The planned use of BGP in the Internet environment,\
    \ including such\n   issues as topology, the interaction between BGP and IGPs,\
    \ and the\n   enforcement of routing policy rules is presented in a companion\n\
    \   document [5].  This document is the first of a series of documents\n   planned\
    \ to explore various aspects of BGP application.\n   Please send comments to the\
    \ BGP mailing list (iwg@rice.edu).\n"
- title: 3.  Summary of Operation
  contents:
  - "3.  Summary of Operation\n   Two systems form a transport protocol connection\
    \ between one another.\n   They exchange messages to open and confirm the connection\
    \ parameters.\n   The initial data flow is the entire BGP routing table.  Incremental\n\
    \   updates are sent as the routing tables change.  BGP does not require\n   periodic\
    \ refresh of the entire BGP routing table.  Therefore, a BGP\n   speaker must\
    \ retain the current version of the entire BGP routing\n   tables of all of its\
    \ peers for the duration of the connection.\n   KeepAlive messages are sent periodically\
    \ to ensure the liveness of\n   the connection.  Notification messages are sent\
    \ in response to errors\n   or special conditions.  If a connection encounters\
    \ an error\n   condition, a notification message is sent and the connection is\n\
    \   closed.\n   The hosts executing the Border Gateway Protocol need not be routers.\n\
    \   A non-routing host could exchange routing information with routers\n   via\
    \ EGP or even an interior routing protocol.  That non-routing host\n   could then\
    \ use BGP to exchange routing information with a border\n   router in another\
    \ Autonomous System.  The implications and\n   applications of this architecture\
    \ are for further study.\n   If a particular AS has multiple BGP speakers and\
    \ is providing transit\n   service for other ASs, then care must be taken to ensure\
    \ a consistent\n   view of routing within the AS.  A consistent view of the interior\n\
    \   routes of the AS is provided by the interior routing protocol.  A\n   consistent\
    \ view of the routes exterior to the AS can be provided by\n   having all BGP\
    \ speakers within the AS maintain direct BGP connections\n   with each other.\
    \  Using a common set of policies, the BGP speakers\n   arrive at an agreement\
    \ as to which border routers will serve as\n   exit/entry points for particular\
    \ networks outside the AS.  This\n   information is communicated to the AS's internal\
    \ routers, possibly\n   via the interior routing protocol.  Care must be taken\
    \ to ensure that\n   the interior routers have all been updated with transit information\n\
    \   before the BGP speakers announce to other ASs that transit service is\n  \
    \ being provided.\n   Connections between BGP speakers of different ASs are referred\
    \ to as\n   \"external\" links.  BGP connections between BGP speakers within the\n\
    \   same AS are referred to as \"internal\" links.\n"
- title: 4.  Message Formats
  contents:
  - "4.  Message Formats\n   This section describes message formats used by BGP.\n\
    \   Messages are sent over a reliable transport protocol connection.  A\n   message\
    \ is processed only after it is entirely received.  The maximum\n   message size\
    \ is 4096 octets.  All implementations are required to\n   support this maximum\
    \ message size.  The smallest message that may be\n   sent consists of a BGP header\
    \ without a data portion, or 19 octets.\n   4.1 Message Header Format\n   Each\
    \ message has a fixed-size header.  There may or may not be a data\n   portion\
    \ following the header, depending on the message type.  The\n   layout of these\
    \ fields is shown below:\n    0                   1                   2      \
    \             3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                                                             +\n   |        \
    \                                                       |\n   +              \
    \                                                 +\n   |                    \
    \       Marker                              |\n   +                          \
    \                                     +\n   |                                \
    \                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Length               |      Type     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Marker:\n      This 16-octet field contains a value that the receiver of the\n\
    \      message can predict.  If the Type of the message is OPEN, or if\n     \
    \ the Authentication Code used in the OPEN message of the connection\n      is\
    \ zero, then the Marker must be all ones.  Otherwise, the value\n      of the\
    \ marker can be predicted by some a computation specified as\n      part of the\
    \ authentication mechanism used.  The Marker can be used\n      to detect loss\
    \ of synchronization between a pair of BGP peers, and\n      to authenticate incoming\
    \ BGP messages.\n   Length:\n      This 2-octet unsigned integer indicates the\
    \ total length of the\n      message, including the header, in octets.  Thus,\
    \ e.g., it allows\n      one to locate in the transport-level stream the (Marker\
    \ field of\n      the) next message.  The value of the Length field must always\
    \ be\n      at least 19 and no greater than 4096, and may be further\n      constrained,\
    \ depending on the message type.  No \"padding\" of extra\n      data after the\
    \ message is allowed, so the Length field must have\n      the smallest value\
    \ required given the rest of the message.\n   Type:\n      This 1-octet unsigned\
    \ integer indicates the type code of the\n      message.  The following type codes\
    \ are defined:\n                           1 - OPEN\n                        \
    \   2 - UPDATE\n                           3 - NOTIFICATION\n                \
    \           4 - KEEPALIVE\n"
- title: 4.2 OPEN Message Format
  contents:
  - "4.2 OPEN Message Format\n   After a transport protocol connection is established,\
    \ the first\n   message sent by each side is an OPEN message.  If the OPEN message\
    \ is\n   acceptable, a KEEPALIVE message confirming the OPEN is sent back.\n \
    \  Once the OPEN is confirmed, UPDATE, KEEPALIVE, and NOTIFICATION\n   messages\
    \ may be exchanged.\n   In addition to the fixed-size BGP header, the OPEN message\
    \ contains\n   the following fields:\n     0                   1             \
    \      2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+\n    |    Version    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |     My Autonomous System      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |           Hold Time           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                         BGP Identifier                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Auth. Code   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    |\
    \                       Authentication Data                     |\n    |     \
    \                                                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version:\n      This 1-octet unsigned integer indicates the protocol version\n\
    \      number of the message.  The current BGP version number is 3.\n   My Autonomous\
    \ System:\n      This 2-octet unsigned integer indicates the Autonomous System\n\
    \      number of the sender.\n   Hold Time:\n      This 2-octet unsigned integer\
    \ indicates the maximum number of\n      seconds that may elapse between the receipt\
    \ of successive\n      KEEPALIVE and/or UPDATE and/or NOTIFICATION messages.\n\
    \   BGP Identifier:\n      This 4-octet unsigned integer indicates the BGP Identifier\
    \ of\n      the sender. A given BGP speaker sets the value of its BGP\n      Identifier\
    \ to the IP address of one of its interfaces.\n      The value of the BGP Identifier\
    \ is determined on startup\n      and is the same for every local interface and\
    \ every BGP peer.\n   Authentication Code:\n      This 1-octet unsigned integer\
    \ indicates the authentication\n      mechanism being used.  Whenever an authentication\
    \ mechanism is\n      specified for use within BGP, three things must be included\
    \ in the\n      specification:\n         - the value of the Authentication Code\
    \ which indicates use of\n         the mechanism,\n         - the form and meaning\
    \ of the Authentication Data, and\n         - the algorithm for computing values\
    \ of Marker fields.\n      Only one authentication mechanism is specified as part\
    \ of this\n      memo:\n         - its Authentication Code is zero,\n        \
    \ - its Authentication Data must be empty (of zero length), and\n         - the\
    \ Marker fields of all messages must be all ones.\n      The semantics of non-zero\
    \ Authentication Codes lies outside the\n      scope of this memo.\n      Note\
    \ that a separate authentication mechanism may be used in\n      establishing\
    \ the transport level connection.\n   Authentication Data:\n      The form and\
    \ meaning of this field is a variable-length field\n      depend on the Authentication\
    \ Code.  If the value of Authentication\n      Code field is zero, the Authentication\
    \ Data field must have zero\n      length.  The semantics of the non-zero length\
    \ Authentication Data\n      field is outside the scope of this memo.\n      Note\
    \ that the length of the Authentication Data field can be\n      determined from\
    \ the message Length field by the formula:\n         Message Length = 29 + Authentication\
    \ Data Length\n      The minimum length of the OPEN message is 29 octets (including\n\
    \      message header).\n"
- title: 4.3 UPDATE Message Format
  contents:
  - "4.3 UPDATE Message Format\n   UPDATE messages are used to transfer routing information\
    \ between BGP\n   peers.  The information in the UPDATE packet can be used to\
    \ construct\n   a graph describing the relationships of the various Autonomous\n\
    \   Systems.  By applying rules to be discussed, routing information\n   loops\
    \ and some other anomalies may be detected and removed from\n   inter-AS routing.\n\
    \   In addition to the fixed-size BGP header, the UPDATE message contains\n  \
    \ the following fields (note that all fields may have arbitrary\n   alignment):\n\
    \     0                   1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Total Path Attributes Length |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                                                               |\n    /\
    \                      Path Attributes                          /\n    /     \
    \                                                          /\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                       Network 1                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    /                                                               /\n    /\
    \                                                               /\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                       Network n                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Total Path Attribute Length:\n      This 2-octet unsigned integer indicates\
    \ the total length of the\n      Path Attributes field in octets.  Its value must\
    \ allow the (non-\n      negative integer) number of Network fields to be determined\
    \ as\n      specified below.\n   Path Attributes:\n      A variable length sequence\
    \ of path attributes is present in every\n      UPDATE.  Each path attribute is\
    \ a triple <attribute type,\n      attribute length, attribute value> of variable\
    \ length.\n      Attribute Type is a two-octet field that consists of the Attribute\n\
    \      Flags octet followed by the Attribute Type Code octet.\n       0      \
    \             1\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Attr. Flags  |Attr. Type Code|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The high-order bit (bit 0) of the Attribute Flags octet is the\n      Optional\
    \ bit.  It defines whether the attribute is optional (if\n      set to 1) or well-known\
    \ (if set to 0).\n      The second high-order bit (bit 1) of the Attribute Flags\
    \ octet is\n      the Transitive bit.  It defines whether an optional attribute\
    \ is\n      transitive (if set to 1) or non-transitive (if set to 0).  For\n \
    \     well-known attributes, the Transitive bit must be set to 1.  (See\n    \
    \  Section 5 for a discussion of transitive attributes.)\n      The third high-order\
    \ bit (bit 2) of the Attribute Flags octet is\n      the Partial bit.  It defines\
    \ whether the information contained in\n      the optional transitive attribute\
    \ is partial (if set to 1) or\n      complete (if set to 0).  For well-known attributes\
    \ and for\n      optional non-transitive attributes the Partial bit must be set\
    \ to\n      0.\n      The fourth high-order bit (bit 3) of the Attribute Flags\
    \ octet is\n      the Extended Length bit.  It defines whether the Attribute Length\n\
    \      is one octet (if set to 0) or two octets (if set to 1).  Extended\n   \
    \   Length may be used only if the length of the attribute value is\n      greater\
    \ than 255 octets.\n      The lower-order four bits of the Attribute Flags octet\
    \ are unused.\n      They must be zero (and must be ignored when received).\n\
    \      The Attribute Type Code octet contains the Attribute Type Code.\n     \
    \ Currently defined Attribute Type Codes are discussed in Section 5.\n      If\
    \ the Extended Length bit of the Attribute Flags octet is set to\n      0, the\
    \ third octet of the Path Attribute contains the length of\n      the attribute\
    \ data in octets.\n      If the Extended Length bit of the Attribute Flags octet\
    \ is set to\n      1, then the third and the fourth octets of the path attribute\n\
    \      contain the length of the attribute data in octets.\n      The remaining\
    \ octets of the Path Attribute represent the attribute\n      value and are interpreted\
    \ according to the Attribute Flags and the\n      Attribute Type Code.\n     \
    \ The meaning and handling of Path Attributes is discussed in\n      Section 5.\n\
    \   Network:\n      Each 4-octet Internet network number indicates one network\
    \ whose\n      Inter-Autonomous System routing is described by the Path\n    \
    \  Attributes.  Subnets and host addresses are specifically not\n      allowed.\
    \  The total number of Network fields in the UPDATE message\n      can be determined\
    \ by the formula:\n         Message Length = 19 + Total Path Attribute Length\
    \ + 4 * #Nets\n      The message Length field of the message header and the Path\n\
    \      Attributes Length field of the UPDATE message must be such that\n     \
    \ the formula results in a non-negative integer number of Network\n      fields.\n\
    \   The minimum length of the UPDATE message is 37 octets (including\n   message\
    \ header).\n"
- title: 4.4 KEEPALIVE Message Format
  contents:
  - "4.4 KEEPALIVE Message Format\n   BGP does not use any transport protocol-based\
    \ keep-alive mechanism to\n   determine if peers are reachable.  Instead, KEEPALIVE\
    \ messages are\n   exchanged between peers often enough as not to cause the hold\
    \ time\n   (as advertised in the OPEN message) to expire.  A reasonable maximum\n\
    \   time between KEEPALIVE messages would be one third of the Hold Time\n   interval.\n\
    \   KEEPALIVE message consists of only message header and has a length of\n  \
    \ 19 octets.\n"
- title: 4.5 NOTIFICATION Message Format
  contents:
  - "4.5 NOTIFICATION Message Format\n   A NOTIFICATION message is sent when an error\
    \ condition is detected.\n   The BGP connection is closed immediately after sending\
    \ it.\n   In addition to the fixed-size BGP header, the NOTIFICATION message\n\
    \   contains the following fields:\n     0                   1               \
    \    2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | Error code    | Error subcode |           Data                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n    |                                     \
    \                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Error Code:\n      This 1-octet unsigned integer indicates the type of NOTIFICATION.\n\
    \      The following Error Codes have been defined:\n           Error Code   \
    \    Symbolic Name               Reference\n             1         Message Header\
    \ Error             Section 6.1\n             2         OPEN Message Error   \
    \            Section 6.2\n             3         UPDATE Message Error        \
    \     Section 6.3\n             4         Hold Timer Expired               Section\
    \ 6.5\n             5         Finite State Machine Error       Section 6.6\n \
    \            6         Cease                            Section 6.7\n   Error\
    \ subcode:\n      This 1-octet unsigned integer provides more specific information\n\
    \      about the nature of the reported error.  Each Error Code may have\n   \
    \   one or more Error Subcodes associated with it.  If no appropriate\n      Error\
    \ Subcode is defined, then a zero (Unspecific) value is used\n      for the Error\
    \ Subcode field.\n      Message Header Error subcodes:\n                     \
    \ 1  - Connection Not Synchronized.\n                      2  - Bad Message Length.\n\
    \                      3  - Bad Message Type.\n      OPEN Message Error subcodes:\n\
    \                      1  - Unsupported Version Number.\n                    \
    \  2  - Bad Peer AS.\n                      3  - Bad BGP Identifier.\n       \
    \               4  - Unsupported Authentication Code.\n                      5\
    \  - Authentication Failure.\n      UPDATE Message Error subcodes:\n         \
    \             1 - Malformed Attribute List.\n                      2 - Unrecognized\
    \ Well-known Attribute.\n                      3 - Missing Well-known Attribute.\n\
    \                      4 - Attribute Flags Error.\n                      5 - Attribute\
    \ Length Error.\n                      6 - Invalid ORIGIN Attribute\n        \
    \              7 - AS Routing Loop.\n                      8 - Invalid NEXT_HOP\
    \ Attribute.\n                      9 - Optional Attribute Error.\n          \
    \           10 - Invalid Network Field.\n   Data:\n      This variable-length\
    \ field is used to diagnose the reason for the\n      NOTIFICATION.  The contents\
    \ of the Data field depend upon the\n      Error Code and Error Subcode.  See\
    \ Section 6 below for more\n      details.\n      Note that the length of the\
    \ Data field can be determined from the\n      message Length field by the formula:\n\
    \         Message Length = 21 + Data Length\n   The minimum length of the NOTIFICATION\
    \ message is 21 octets\n   (including message header).\n"
- title: 5.  Path Attributes
  contents:
  - "5.  Path Attributes\n   This section discusses the path attributes of the UPDATE\
    \ message.\n   Path attributes fall into four separate categories:\n         \
    \   1. Well-known mandatory.\n            2. Well-known discretionary.\n     \
    \       3. Optional transitive.\n            4. Optional non-transitive.\n   Well-known\
    \ attributes must be recognized by all BGP implementations.\n   Some of these\
    \ attributes are mandatory and must be included in every\n   UPDATE message. \
    \ Others are discretionary and may or may not be sent\n   in a particular UPDATE\
    \ message.  Which well-known attributes are\n   mandatory or discretionary is\
    \ noted in the table below.\n   All well-known attributes must be passed along\
    \ (after proper\n   updating, if necessary) to other BGP peers.\n   In addition\
    \ to well-known attributes, each path may contain one or\n   more optional attributes.\
    \  It is not required or expected that all\n   BGP implementations support all\
    \ optional attributes.  The handling of\n   an unrecognized optional attribute\
    \ is determined by the setting of\n   the Transitive bit in the attribute flags\
    \ octet.  Paths with\n   unrecognized transitive optional attributes should be\
    \ accepted. If a\n   path with unrecognized transitive optional attribute is accepted\
    \ and\n   passed along to other BGP peers, then the unrecognized transitive\n\
    \   optional attribute of that path must be passed along with the path to\n  \
    \ other BGP peers with the Partial bit in the Attribute Flags octet set\n   to\
    \ 1. If a path with recognized transitive optional attribute is\n   accepted and\
    \ passed along to other BGP peers and the Partial bit in\n   the Attribute Flags\
    \ octet is set to 1 by some previous AS, it is not\n   set back to 0 by the current\
    \ AS. Unrecognized non-transitive optional\n   attributes must be quietly ignored\
    \ and not passed along to other BGP\n   peers.\n   New transitive optional attributes\
    \ may be attached to the path by the\n   originator or by any other AS in the\
    \ path.  If they are not attached\n   by the originator, the Partial bit in the\
    \ Attribute Flags octet is\n   set to 1.  The rules for attaching new non-transitive\
    \ optional\n   attributes will depend on the nature of the specific attribute.\
    \  The\n   documentation of each new non-transitive optional attribute will be\n\
    \   expected to include such rules.  (The description of the INTER-AS\n   METRIC\
    \ attribute gives an example.)  All optional attributes (both\n   transitive and\
    \ non-transitive) may be updated (if appropriate) by ASs\n   in the path.\n  \
    \ The sender of an UPDATE message should order path attributes within\n   the\
    \ UPDATE message in ascending order of attribute type.  The\n   receiver of an\
    \ UPDATE message must be prepared to handle path\n   attributes within the UPDATE\
    \ message that are out of order.\n   The same attribute cannot appear more than\
    \ once within the Path\n   Attributes field of a particular UPDATE message.\n\
    \   Following table specifies attribute type code, attribute length, and\n   attribute\
    \ category for path attributes defined in this document:\n   Attribute Name  \
    \   Type Code    Length     Attribute category\n      ORIGIN              1  \
    \        1        well-known, mandatory\n      AS_PATH             2       variable\
    \    well-known, mandatory\n      NEXT_HOP            3          4        well-known,\
    \ mandatory\n      UNREACHABLE         4          0        well-known, discretionary\n\
    \      INTER-AS METRIC     5          2        optional, non-transitive\n   ORIGIN:\n\
    \      The ORIGIN path attribute defines the origin of the path\n      information.\
    \  The data octet can assume the following values:\n         Value    Meaning\n\
    \           0       IGP - network(s) are interior to the originating AS\n    \
    \       1       EGP - network(s) learned via EGP\n           2       INCOMPLETE\
    \ - network(s) learned by some other means\n   AS_PATH:\n      The AS_PATH attribute\
    \ enumerates the ASs that must be traversed to\n      reach the networks listed\
    \ in the UPDATE message.  Since an AS\n      identifier is 2 octets, the length\
    \ of an AS_PATH attribute is\n      twice the number of ASs in the path.  Rules\
    \ for constructing an\n      AS_PATH attribute are discussed in Section 9.\n \
    \     If a previously advertised route has become unreachable, then\n      the\
    \ AS_PATH path attribute of the unreachable route may be\n      truncated when\
    \ passed in the UPDATE message. Truncation is\n      achieved by constructing\
    \ the AS_PATH path attribute that consists\n      of only the autonomous system\
    \ of the sender of the UPDATE message.\n      To make the truncated AS_PATH semantically\
    \ correct, the sender\n      also sends the ORIGIN path attribute with the value\
    \ INCOMPLETE.\n      Note that truncation may be done only over external BGP links.\n\
    \   NEXT_HOP:\n      The NEXT_HOP path attribute defines the IP address of the\
    \ border\n      router that should be used as the next hop to the networks listed\n\
    \      in the UPDATE message.  If this border router belongs to the same\n   \
    \   AS as the BGP peer that advertises it, it is called an internal\n      border\
    \ router. If this border router belongs to a different AS\n      than the one\
    \ that the BGP peer that advertises it, it is called an\n      external border\
    \ router. A BGP speaker can advertise any internal\n      border router as the\
    \ next hop provided that the interface\n      associated with the IP address of\
    \ this border router (as\n      specified in the NEXT_HOP path attribute) shares\
    \ a common subnet\n      with both the local and remote BGP speakers. A BGP speaker\
    \ can\n      advertise any external border router as the next hop, provided\n\
    \      that the IP address of this border router was learned from one\n      of\
    \ the BGP speaker's peers, and the interface associated with\n      the IP address\
    \ of this border router (as specified in the\n      NEXT_HOP path attribute) shares\
    \ a common subnet with the local\n      and remote BGP speakers.  A BGP speaker\
    \ needs to be able to\n      support disabling advertisement of external border\
    \ routers.\n      The NEXT_HOP path attribute has meaning only on external BGP\n\
    \      links.  However, presence of the NEXT_HOP path attribute in the\n     \
    \ UPDATE message received via an internal BGP link does not\n      constitute\
    \ an error.\n   UNREACHABLE:\n      The UNREACHABLE attribute is used to notify\
    \ a BGP peer that some\n      of the previously advertised routes have become\
    \ unreachable.\n   INTER-AS METRIC:\n      The INTER-AS METRIC attribute may be\
    \ used on external (inter-AS)\n      links to discriminate between multiple exit\
    \ or entry points to the\n      same neighboring AS.  The value of the INTER-AS\
    \ METRIC attribute\n      is a 2-octet unsigned number which is called a metric.\
    \  All other\n      factors being equal, the exit or entry point with lower metric\n\
    \      should be preferred.  If received over external links, the INTER-\n   \
    \   AS METRIC attribute may be propagated over internal links to other\n     \
    \ BGP speaker within the same AS.  The INTER-AS METRIC attribute is\n      never\
    \ propagated to other BGP speakers in neighboring AS's.\n      If a previously\
    \ advertised route has become unreachable, then\n      the INTER-AS METRIC path\
    \ attribute may be omitted from the UPDATE\n      message.\n"
- title: 6.  BGP Error Handling.
  contents:
  - "6.  BGP Error Handling.\n   This section describes actions to be taken when errors\
    \ are detected\n   while processing BGP messages.\n   When any of the conditions\
    \ described here are detected, a\n   NOTIFICATION message with the indicated Error\
    \ Code, Error Subcode,\n   and Data fields is sent, and the BGP connection is\
    \ closed.  If no\n   Error Subcode is specified, then a zero must be used.\n \
    \  The phrase \"the BGP connection is closed\" means that the transport\n   protocol\
    \ connection has been closed and that all resources for that\n   BGP connection\
    \ have been deallocated.  Routing table entries\n   associated with the remote\
    \ peer are marked as invalid.  The fact that\n   the routes have become invalid\
    \ is passed to other BGP peers before\n   the routes are deleted from the system.\n\
    \   Unless specified explicitly, the Data field of the NOTIFICATION\n   message\
    \ that is sent to indicate an error is empty.\n"
- title: 6.1 Message Header error handling.
  contents:
  - "6.1 Message Header error handling.\n   All errors detected while processing the\
    \ Message Header are indicated\n   by sending the NOTIFICATION message with Error\
    \ Code Message Header\n   Error.  The Error Subcode elaborates on the specific\
    \ nature of the\n   error.\n   The expected value of the Marker field of the message\
    \ header is all\n   ones if the message type is OPEN.  The expected value of the\
    \ Marker\n   field for all other types of BGP messages determined based on the\n\
    \   Authentication Code in the BGP OPEN message and the actual\n   authentication\
    \ mechanism (if the Authentication Code in the BGP OPEN\n   message is non-zero).\
    \ If the Marker field of the message header is\n   not the expected one, then\
    \ a synchronization error has occurred and\n   the Error Subcode is set to Connection\
    \ Not Synchronized.\n   If the Length field of the message header is less than\
    \ 19 or greater\n   than 4096, or if the Length field of an OPEN message is less\
    \  than\n   the minimum length of the OPEN message, or if the Length field of\
    \ an\n   UPDATE message is less than the minimum length of the UPDATE message,\n\
    \   or if the Length field of a KEEPALIVE message is not equal to 19, or\n   if\
    \ the Length field of a NOTIFICATION message is less than the\n   minimum length\
    \ of the NOTIFICATION message, then the Error Subcode is\n   set to Bad Message\
    \ Length.  The Data field contains the erroneous\n   Length field.\n   If the\
    \ Type field of the message header is not recognized, then the\n   Error Subcode\
    \ is set to Bad Message Type.  The Data field contains\n   the erroneous Type\
    \ field.\n"
- title: 6.2 OPEN message error handling.
  contents:
  - "6.2 OPEN message error handling.\n   All errors detected while processing the\
    \ OPEN message are indicated\n   by sending the NOTIFICATION message with Error\
    \ Code OPEN Message\n   Error.  The Error Subcode elaborates on the specific nature\
    \ of the\n   error.\n   If the version number contained in the Version field of\
    \ the received\n   OPEN message is not supported, then the Error Subcode is set\
    \ to\n   Unsupported Version Number.  The Data field is a 2-octet unsigned\n \
    \  integer, which indicates the largest locally supported version number\n   less\
    \ than the version the remote BGP peer bid (as indicated in the\n   received OPEN\
    \ message).\n   If the Autonomous System field of the OPEN message is unacceptable,\n\
    \   then the Error Subcode is set to Bad Peer AS.  The determination of\n   acceptable\
    \ Autonomous System numbers is outside the scope of this\n   protocol.\n   If\
    \ the BGP Identifier field of the OPEN message is syntactically\n   incorrect,\
    \ then the Error Subcode is set to Bad BGP Identifier.\n   Syntactic correctness\
    \ means that the BGP Identifier field represents\n   a valid IP host address.\n\
    \   If the Authentication Code of the OPEN message is not recognized,\n   then\
    \ the Error Subcode is set to Unsupported Authentication Code.  If\n   the Authentication\
    \ Code is zero, then the Authentication Data must be\n   of zero length.  Otherwise,\
    \ the Error Subcode is set to\n   Authentication Failure.\n   If the Authentication\
    \ Code is non-zero, then the corresponding\n   authentication procedure is invoked.\
    \  If the authentication procedure\n   (based on Authentication Code and Authentication\
    \ Data) fails, then\n   the Error Subcode is set to Authentication Failure.\n"
- title: 6.3 UPDATE message error handling.
  contents:
  - "6.3 UPDATE message error handling.\n   All errors detected while processing the\
    \ UPDATE message are indicated\n   by sending the NOTIFICATION message with Error\
    \ Code UPDATE Message\n   Error.  The error subcode elaborates on the specific\
    \ nature of the\n   error.\n   Error checking of an UPDATE message begins by examining\
    \ the path\n   attributes.  If the Total Attribute Length is too large (i.e.,\
    \ if\n   Total Attribute Length + 21 exceeds the message Length), or if the\n\
    \   (non-negative integer) Number of Network fields cannot be computed as\n  \
    \ in Section 4.3, then the Error Subcode is set to Malformed Attribute\n   List.\n\
    \   If any recognized attribute has Attribute Flags that conflict with\n   the\
    \ Attribute Type Code, then the Error Subcode is set to Attribute\n   Flags Error.\
    \  The Data field contains the erroneous attribute (type,\n   length and value).\n\
    \   If any recognized attribute has Attribute Length that conflicts with\n   the\
    \ expected length (based on the attribute type code), then the\n   Error Subcode\
    \ is set to Attribute Length Error.  The Data field\n   contains the erroneous\
    \ attribute (type, length and value).\n   If any of the mandatory well-known attributes\
    \ are not present, then\n   the Error Subcode is set to Missing Well-known Attribute.\
    \  The Data\n   field contains the Attribute Type Code of the missing well-known\n\
    \   attribute.\n   If any of the mandatory well-known attributes are not recognized,\n\
    \   then the Error Subcode is set to Unrecognized Well-known Attribute.\n   The\
    \ Data field contains the unrecognized attribute (type, length and\n   value).\n\
    \   If the ORIGIN attribute has an undefined value, then the Error\n   Subcode\
    \ is set to Invalid Origin Attribute.  The Data field contains\n   the unrecognized\
    \ attribute (type, length and value).\n   If the NEXT_HOP attribute field is syntactically\
    \ or semantically\n   incorrect, then the Error Subcode is set to Invalid NEXT_HOP\n\
    \   Attribute.\n   The Data field contains the incorrect attribute (type, length\
    \ and\n   value).  Syntactic correctness means that the NEXT_HOP attribute\n \
    \  represents a valid IP host address.  Semantic correctness applies\n   only\
    \ to the external BGP links. It means that the interface\n   associated with the\
    \ IP address, as specified in the NEXT_HOP\n   attribute, shares a common subnet\
    \ with the receiving BGP speaker.\n   The AS route specified by the AS_PATH attribute\
    \ is checked for AS\n   loops.  AS loop detection is done by scanning the full\
    \ AS route (as\n   specified in the AS_PATH attribute) and checking that each\
    \ AS occurs\n   at most once.  If a loop is detected, then the Error Subcode is\
    \ set\n   to AS Routing Loop.  The Data field contains the incorrect attribute\n\
    \   (type, length and value).\n   If an optional attribute is recognized, then\
    \ the value of this\n   attribute is checked.  If an error is detected, the attribute\
    \ is\n   discarded, and the Error Subcode is set to Optional Attribute Error.\n\
    \   The Data field contains the attribute (type, length and value).\n   If any\
    \ attribute appears more than once in the UPDATE message, then\n   the Error Subcode\
    \ is set to Malformed Attribute List.\n   Each Network field in the UPDATE message\
    \ is checked for syntactic\n   validity.  If the Network field is syntactically\
    \ incorrect, or\n   contains a subnet or a host address, then the Error Subcode\
    \ is set to\n   Invalid Network Field.\n"
- title: 6.4 NOTIFICATION message error handling.
  contents:
  - "6.4 NOTIFICATION message error handling.\n   If a peer sends a NOTIFICATION message,\
    \ and there is an error in that\n   message, there is unfortunately no means of\
    \ reporting this error via\n   a subsequent NOTIFICATION message.  Any such error,\
    \ such as an\n   unrecognized Error Code or Error Subcode, should be noticed,\
    \ logged\n   locally, and brought to the attention of the administration of the\n\
    \   peer.  The means to do this, however, lies outside the scope of this\n   document.\n"
- title: 6.5 Hold Timer Expired error handling.
  contents:
  - "6.5 Hold Timer Expired error handling.\n   If a system does not receive successive\
    \ KEEPALIVE and/or UPDATE\n   and/or NOTIFICATION messages within the period specified\
    \ in the Hold\n   Time field of the OPEN message, then the NOTIFICATION message\
    \ with\n   Hold Timer Expired Error Code must be sent and the BGP connection\n\
    \   closed.\n"
- title: 6.6 Finite State Machine error handling.
  contents:
  - "6.6 Finite State Machine error handling.\n   Any error detected by the BGP Finite\
    \ State Machine (e.g., receipt of\n   an unexpected event) is indicated by sending\
    \ the NOTIFICATION message\n   with Error Code Finite State Machine Error.\n"
- title: 6.7 Cease.
  contents:
  - "6.7 Cease.\n   In absence of any fatal errors (that are indicated in this section),\n\
    \   a BGP peer may choose at any given time to close its BGP connection\n   by\
    \ sending the NOTIFICATION message with Error Code Cease.  However,\n   the Cease\
    \ NOTIFICATION message must not be used when a fatal error\n   indicated by this\
    \ section does exist.\n"
- title: 6.8 Connection collision detection.
  contents:
  - "6.8 Connection collision detection.\n   If a pair of BGP speakers try simultaneously\
    \ to establish a TCP\n   connection to each other, then two parallel connections\
    \ between this\n   pair of speakers might well be formed.  We refer to this situation\
    \ as\n   connection collision.  Clearly, one of these connections must be\n  \
    \ closed.\n   Based on the value of the BGP Identifier a convention is established\n\
    \   for detecting which BGP connection is to be preserved when a\n   collision\
    \ does occur. The convention is to compare the BGP\n   Identifiers of the peers\
    \ involved in the collision and to retain only\n   the connection initiated by\
    \ the BGP speaker with the higher-valued\n   BGP Identifier.\n   Upon receipt\
    \ of an OPEN message, the local system must examine all of\n   its connections\
    \ that are in the OpenSent state.  If among them there\n   is a connection to\
    \ a remote BGP speaker whose BGP Identifier equals\n   the one in the OPEN message,\
    \ then the local system performs the\n   following collision resolution procedure:\n\
    \          1. The BGP Identifier of the local system is compared to the\n    \
    \      BGP Identifier of the remote system (as specified in the\n          OPEN\
    \ message).\n          2. If the value of the local BGP Identifier is less than\
    \ the\n          remote one, the local system closes BGP connection that\n   \
    \       already exists (the one that is already in the OpenSent\n          state),\
    \ and accepts BGP connection initiated by the remote\n          system.\n    \
    \      3. Otherwise, the local system closes newly created BGP\n          connection\
    \ (the one associated with the newly received OPEN\n          message), and continues\
    \ to use the existing one (the one\n          that is already in the OpenSent\
    \ state).\n          Comparing BGP Identifiers is done by treating them as\n \
    \         (4-octet long) unsigned integers.\n          A connection collision\
    \ with existing BGP connections that\n          are either in OpenConfirm or Established\
    \ states causes\n          unconditional closing of the newly created connection.\
    \  Note\n          that a connection collision cannot be detected with\n     \
    \     connections that are in Idle, or Connect, or Active states.\n          Closing\
    \ the BGP connection (that results from the collision\n          resolution procedure)\
    \ is accomplished by sending the\n          NOTIFICATION message with the Error\
    \ Code Cease.\n"
- title: 7.  BGP Version Negotiation.
  contents:
  - "7.  BGP Version Negotiation.\n   BGP speakers may negotiate the version of the\
    \ protocol by making\n   multiple attempts to open a BGP connection, starting\
    \ with the highest\n   version number each supports.  If an open attempt fails\
    \ with an Error\n   Code OPEN Message Error, and an Error Subcode Unsupported\
    \ Version\n   Number, then the BGP speaker has available the version number it\n\
    \   tried, the version number its peer tried, the version number passed\n   by\
    \ its peer in the NOTIFICATION message, and the version numbers that\n   it supports.\
    \  If the two peers do support one or more common\n   versions, then this will\
    \ allow them to rapidly determine the highest\n   common version. In order to\
    \ support BGP version negotiation, future\n   versions of BGP must retain the\
    \ format of the OPEN and NOTIFICATION\n   messages.\n"
- title: 8.  BGP Finite State machine.
  contents:
  - "8.  BGP Finite State machine.\n   This section specifies BGP operation in terms\
    \ of a Finite State\n   Machine (FSM).  Following is a brief summary and overview\
    \ of BGP\n   operations by state as determined by this FSM.  A condensed version\n\
    \   of the BGP FSM is found in Appendix 1.\n   Initially BGP is in the Idle state.\n\
    \      Idle state:\n         In this state BGP refuses all incoming BGP connections.\
    \  No\n         resources are allocated to the BGP neighbor.  In response to\n\
    \         the Start event (initiated by either system or operator) the\n     \
    \    local system initializes all BGP resources, starts the\n         ConnectRetry\
    \ timer, initiates a transport connection to other\n         BGP peer, while listening\
    \ for connection that may be initiated\n         by the remote BGP peer, and changes\
    \ its state to Connect.\n         The exact value of the ConnectRetry timer is\
    \ a local matter,\n         but should be sufficiently large to allow TCP initialization.\n\
    \         Any other event received in the Idle state is ignored.\n      Connect\
    \ state:\n         In this state BGP is waiting for the transport protocol\n \
    \        connection to be completed.\n         If the transport protocol connection\
    \ succeeds, the local system\n         clears the ConnectRetry timer, completes\
    \ initialization, sends\n         an OPEN message to its peer, and changes its\
    \ state to OpenSent.\n         If the transport protocol connect fails (e.g.,\
    \ retransmission\n         timeout), the local system restarts the ConnectRetry\
    \ timer,\n         continues to listen for a connection that may be initiated\
    \ by\n         the remote BGP peer, and changes its state to Active state.\n \
    \        In response to the ConnectRetry timer expired event, the local\n    \
    \     system restarts the ConnectRetry timer, initiates a transport\n        \
    \ connection to other BGP peer, continues to listen for a\n         connection\
    \ that may be initiated by the remote BGP peer, and\n         stays in the Connect\
    \ state.\n         Start event is ignored in the Active state.\n         In response\
    \ to any other event (initiated by either system or\n         operator), the local\
    \ system releases all BGP resources\n         associated with this connection\
    \ and changes its state to Idle.\n      Active state:\n         In this state\
    \ BGP is trying to acquire a BGP neighbor by\n         initiating a transport\
    \ protocol connection.\n         If the transport protocol connection succeeds,\
    \ the local system\n         clears the ConnectRetry timer, completes initialization,\
    \ sends\n         an OPEN message to its peer, sets its hold timer to a large\n\
    \         value, and changes its state to OpenSent.\n         In response to the\
    \ ConnectRetry timer expired event, the local\n         system restarts the ConnectRetry\
    \ timer, initiates a transport\n         connection to other BGP peer, continues\
    \ to listen for a\n         connection that may be be initiated by the remote\
    \ BGP peer, and\n         changes its state to Connect.\n         If the local\
    \ system detects that a remote peer is trying to\n         establish BGP connection\
    \ to it, and the IP address of the\n         remote peer is not an expected one,\
    \ the local system restarts\n         the ConnectRetry timer, rejects the attempted\
    \ connection,\n         continues to listen for a connection that may be initiated\
    \ by\n         the remote BGP peer, and stays in the Active state.\n         Start\
    \ event is ignored in the Active state.\n         In response to any other event\
    \ (initiated by either system or\n         operator), the local system releases\
    \ all BGP resources\n         associated with this connection and changes its\
    \ state to Idle.\n      OpenSent state:\n         In this state BGP waits for\
    \ an OPEN message from its peer.\n         When an OPEN message is received, all\
    \ fields are checked for\n         correctness.  If the BGP message header checking\
    \ or OPEN\n         message checking detects an error (see Section 6.2), or\n\
    \         a connection collision (see Section 6.8) the local\n         system\
    \ sends a NOTIFICATION message and changes its state to\n         Idle.\n    \
    \     If there are no errors in the OPEN message, BGP sends a\n         KEEPALIVE\
    \ message and sets a KeepAlive timer.  The hold timer,\n         which was originally\
    \ set to an arbitrary large value (see\n         above), is replaced with the\
    \ value indicated in the OPEN\n         message.  If the value of the Autonomous\
    \ System field is the\n         same as our own, then the connection is \"internal\"\
    \ connection;\n         otherwise, it is \"external\".  (This will effect UPDATE\n\
    \         processing as described below.)  Finally, the state is changed\n   \
    \      to OpenConfirm.\n         If a disconnect notification is received from\
    \ the underlying\n         transport protocol, the local system closes the BGP\
    \ connection,\n         restarts the ConnectRetry timer, while continue listening\
    \ for\n         connection that may be initiated by the remote BGP peer, and\n\
    \         goes into the Active state.\n         If the hold time expires, the\
    \ local system sends NOTIFICATION\n         message with error code Hold Timer\
    \ Expired and changes its\n         state to Idle.\n         In response to the\
    \ Stop event (initiated by either system or\n         operator) the local system\
    \ sends NOTIFICATION message with\n         Error Code Cease and changes its state\
    \ to Idle.\n         Start event is ignored in the OpenSent state.\n         In\
    \ response to any other event the local system sends\n         NOTIFICATION message\
    \ with Error Code Finite State Machine Error\n         and changes its state to\
    \ Idle.\n         Whenever BGP changes its state from OpenSent to Idle, it closes\n\
    \         the BGP (and transport-level) connection and releases all\n        \
    \ resources associated with that connection.\n      OpenConfirm state:\n     \
    \    In this state BGP waits for a KEEPALIVE or NOTIFICATION\n         message.\n\
    \         If the local system receives a KEEPALIVE message, it changes\n     \
    \    its state to Established.\n         If the hold timer expires before a KEEPALIVE\
    \ message is\n         received, the local system sends NOTIFICATION message with\n\
    \         error code Hold Timer expired and changes its state to Idle.\n     \
    \    If the local system receives a NOTIFICATION message, it changes\n       \
    \  its state to Idle.\n         If the KeepAlive timer expires, the local system\
    \ sends a\n         KEEPALIVE message and restarts its KeepAlive timer.\n    \
    \     If a disconnect notification is received from the underlying\n         transport\
    \ protocol, the local system changes its state to Idle.\n         In response\
    \ to the Stop event (initiated by either system or\n         operator) the local\
    \ system sends NOTIFICATION message with\n         Error Code Cease and changes\
    \ its state to Idle.\n         Start event is ignored in the OpenConfirm state.\n\
    \         In response to any other event the local system sends\n         NOTIFICATION\
    \ message with Error Code Finite State Machine Error\n         and changes its\
    \ state to Idle.\n         Whenever BGP changes its state from OpenConfirm to\
    \ Idle, it\n         closes the BGP (and transport-level) connection and releases\n\
    \         all resources associated with that connection.\n      Established state:\n\
    \         In the Established state BGP can exchange UPDATE, NOTIFICATION,\n  \
    \       and KEEPALIVE messages with its peer.\n         If the local system receives\
    \ an UPDATE or KEEPALIVE message, it\n         restarts its Holdtime timer.\n\
    \         If the local system receives a NOTIFICATION message, it changes\n  \
    \       its state to Idle.\n         If the local system receives an UPDATE message\
    \ and the UPDATE\n         message error handling procedure (see Section 6.3)\
    \ detects an\n         error, the local system sends a NOTIFICATION message and\n\
    \         changes its state to Idle.\n         If a disconnect notification is\
    \ received from the underlying\n         transport protocol, the local system\
    \  changes its state to\n         Idle.\n         If the Holdtime timer expires,\
    \ the local system sends a\n         NOTIFICATION message with Error Code Hold\
    \ Timer Expired and\n         changes its state to Idle.\n         If the KeepAlive\
    \ timer expires, the local system sends a\n         KEEPALIVE message and restarts\
    \ its KeepAlive timer.\n         Each time the local system sends a KEEPALIVE\
    \ or UPDATE message,\n         it restarts its KeepAlive timer.\n         In response\
    \ to the Stop event (initiated by either system or\n         operator), the local\
    \ system sends a NOTIFICATION message with\n         Error Code Cease and changes\
    \ its state to Idle.\n         Start event is ignored in the Established state.\n\
    \         In response to any other event, the local system sends\n         NOTIFICATION\
    \ message with Error Code Finite State Machine Error\n         and changes its\
    \ state to Idle.\n         Whenever BGP changes its state from Established to\
    \ Idle, it\n         closes the BGP (and transport-level) connection, releases\
    \ all\n         resources associated with that connection, and deletes all\n \
    \        routes derived from that connection.\n"
- title: 9.  UPDATE Message Handling
  contents:
  - "9.  UPDATE Message Handling\n   An UPDATE message may be received only in the\
    \ Established state.\n   When an UPDATE message is received, each field is checked\
    \ for\n   validity as specified in Section 6.3.\n   If an optional non-transitive\
    \ attribute is unrecognized, it is\n   quietly ignored.  If an optional transitive\
    \ attribute is\n   unrecognized, the Partial bit (the third high-order bit) in\
    \ the\n   attribute flags octet is set to 1, and the attribute is retained for\n\
    \   propagation to other BGP speakers.\n   If an optional attribute is recognized,\
    \ and has a valid value, then,\n   depending on the type of the optional attribute,\
    \ it is processed\n   locally, retained, and updated, if necessary, for possible\n\
    \   propagation to other BGP speakers.\n   If the network and the path attributes\
    \ associated with a route to\n   that network are correct, then the route is compared\
    \ with other\n   routes to the same network.\n   When a BGP speaker receives a\
    \ new route from a peer over external BGP\n   link, it shall advertise that route\
    \ to other BGP speakers in its\n   autonomous system by means of an UPDATE message\
    \ if either of the\n   following conditions occur:\n      a) the newly received\
    \ route is considered to be better\n         than the other routes to the same\
    \ network (as listed\n         in the UPDATE message) that have been received\
    \ over\n         external BGP links, or\n      b) there are no other acceptable\
    \ routes to the network\n         (as listed in the UPDATE message) that have\
    \ been\n         received over external BGP links.\n   When a BGP speaker receives\
    \ an unreachable route from a BGP peer over\n   external BGP link, it shall advertise\
    \ that route to all other BGP\n   speakers in its autonomous system, indicating\
    \ that it has become\n   unreachable, if the following condition occur:\n    \
    \  a) a corresponding acceptable route to the same destination\n         was considered\
    \ to be the best one among all routes to that\n         destination that have\
    \ been received over external BGP links\n         (that is the local system has\
    \ been advertising the\n         route to all other BGP speakers in its autonomous\
    \ system\n         before it received the UPDATE message that reported it\n  \
    \       as unreachable).\n   Whenever a BGP speaker selects a new route (among\
    \ all the routes\n   received from external and internal BGP peers), or determines\
    \ that\n   the reachable destinations within its own autonomous system have\n\
    \   changed, it shall generate an UPDATE message and forward it to each\n   of\
    \ its external peers (peers connected via external BGP links).\n   If a route\
    \ in the UPDATE was received over an internal link, it is\n   not propagated over\
    \ any other internal link.  This restriction is due\n   to the fact that all BGP\
    \ speakers within a single AS form a\n   completely connected graph (see above).\n\
    \   If the UPDATE message is propagated over an external link, then the\n   local\
    \ AS number is prepended to the AS_PATH attribute, and the\n   NEXT_HOP attribute\
    \ is updated with an IP address of the router that\n   should be used as a next\
    \ hop to the network.  If the UPDATE message\n   is propagated over an internal\
    \ link, then the AS_PATH attribute and\n   the NEXT_HOP attribute are passed unmodified.\n\
    \   Generally speaking, the rules for comparing routes among several\n   alternatives\
    \ are outside the scope of this document.  There are two\n   exceptions:\n   \
    \   - If the local AS appears in the AS path of the new route being\n        considered,\
    \ then that new route cannot be viewed as better than\n        any other route.\
    \  If such a route were ever used, a routing loop\n        would result.\n   \
    \   - In order to achieve successful distributed operation, only routes\n    \
    \    with a likelihood of stability can be chosen.  Thus, an AS must\n       \
    \ avoid using unstable routes, and it must not make rapid\n        spontaneous\
    \ changes to its choice of route.  Quantifying the terms\n        \"unstable\"\
    \ and \"rapid\" in the previous sentence will require\n        experience, but\
    \ the principle is clear.\n"
- title: 10. Detection of Inter-AS Policy Contradictions
  contents:
  - "10. Detection of Inter-AS Policy Contradictions\n   Since BGP requires no central\
    \ authority for coordinating routing\n   policies among ASs, and since routing\
    \ policies are not exchanged via\n   the protocol itself, it is possible for a\
    \ group of ASs to have a set\n   of routing policies that cannot simultaneously\
    \ be satisfied.  This\n   may cause an indefinite oscillation of the routes in\
    \ this group of\n   ASs.\n   To help detect such a situation, all BGP speakers\
    \ must observe the\n   following rule.  If a route to a destination that is currently\
    \ used\n   by the local system is determined to be unreachable (e.g., as a\n \
    \  result of receiving an UPDATE message for this route with the\n   UNREACHABLE\
    \ attribute), then, before switching to another route, this\n   local system must\
    \ advertize this route as unreachable to all the BGP\n   neighbors to which it\
    \ previously advertized this route.\n   This rule will allow other ASs to distinguish\
    \ between two different\n   situations:\n      - The local system has chosen to\
    \ use a new route because the old\n        route become unreachable.\n      -\
    \ The local system has chosen to use a new route because it\n        preferred\
    \ it over the old route.  The old route is still\n        viable.\n   In the former\
    \ case, an UPDATE message with the UNREACHABLE attribute\n   will be received\
    \ for the old route.  In the latter case it will not.\n   In some cases, this\
    \ may allow a BGP speaker to detect the fact that\n   its policies, taken together\
    \ with the policies of some other AS,\n   cannot simultaneously be satisfied.\
    \  For example, consider the\n   following situation involving AS A and its neighbor\
    \ AS B.  B\n   advertises a route with a path of the form <B,...>, where A is\
    \ not\n   present in the path.  A then decides to use this path, and advertises\n\
    \   <A,B,...> to all its neighbors.  B later advertises <B,...,A,...>\n   back\
    \ to A, without ever declaring its previous path <B,...> to be\n   unreachable.\
    \  Evidently, A prefers routes via B and B prefers routes\n   via A.  The combined\
    \ policies of A and B, taken together, cannot be\n   satisfied.  Such an event\
    \ should be noticed, logged locally, and\n   brought to the attention of AS A's\
    \ administration.  The means to do\n   this, however, lies outside the scope of\
    \ this document.  Also outside\n   the document is a more complete procedure for\
    \ detecting such\n   contradictions of policy.\n   While the above rules provide\
    \ a mechanism to detect a set of routing\n   policies that cannot be satisfied\
    \ simultaneously, the protocol itself\n   does not provide any mechanism for suppressing\
    \ the route oscillation\n   that may result from these unsatisfiable policies.\
    \  The reason for\n   doing this is that routing policies are viewed as external\
    \ to the\n   protocol and as determined by the local AS administrator.\n"
- title: Appendix 1.  BGP FSM State Transitions and Actions.
  contents:
  - "Appendix 1.  BGP FSM State Transitions and Actions.\n   This Appendix discusses\
    \ the transitions between states in the BGP FSM\n   in response to BGP events.\
    \  The following is the list of these states\n   and events.\n    BGP States:\n\
    \             1 - Idle\n             2 - Connect\n             3 - Active\n  \
    \           4 - OpenSent\n             5 - OpenConfirm\n             6 - Established\n\
    \    BGP Events:\n             1 - BGP Start\n             2 - BGP Stop\n    \
    \         3 - BGP Transport connection open\n             4 - BGP Transport connection\
    \ closed\n             5 - BGP Transport connection open failed\n            \
    \ 6 - BGP Transport fatal error\n             7 - ConnectRetry timer expired\n\
    \             8 - Holdtime timer expired\n             9 - KeepAlive timer expired\n\
    \            10 - Receive OPEN message\n            11 - Receive KEEPALIVE message\n\
    \            12 - Receive UPDATE messages\n            13 - Receive NOTIFICATION\
    \ message\n   The following table describes the state transitions of the BGP FSM\n\
    \   and the actions triggered by these transitions.\n    Event               \
    \ Actions               Message Sent   Next State\n    --------------------------------------------------------------------\n\
    \    Idle (1)\n     1            Initialize resources            none        \
    \     2\n                  Start ConnectRetry timer\n                  Initiate\
    \ a transport connection\n     others               none                    none\
    \             1\n    Connect(2)\n     1                    none              \
    \      none             2\n     3            Complete initialization         OPEN\
    \             4\n                  Clear ConnectRetry timer\n     5          \
    \  Restart ConnectRetry timer      none             3\n     7            Restart\
    \ ConnectRetry timer      none             2\n                  Initiate a transport\
    \ connection\n     others       Release resources               none         \
    \    1\n    Active (3)\n     1                    none                    none\
    \             3\n     3            Complete initialization         OPEN      \
    \       4\n                  Clear ConnectRetry timer\n     5            Close\
    \ connection                                 3\n                  Restart ConnectRetry\
    \ timer\n     7            Restart ConnectRetry timer      none             2\n\
    \                  Initiate a transport connection\n     others       Release\
    \ resources               none             1\n    OpenSent(4)\n     1        \
    \            none                    none             4\n     4            Close\
    \ transport connection      none             3\n                  Restart ConnectRetry\
    \ timer\n     6            Release resources               none             1\n\
    \    10            Process OPEN is OK            KEEPALIVE          5\n      \
    \            Process OPEN failed           NOTIFICATION       1\n    others  \
    \      Close transport connection    NOTIFICATION       1\n                  Release\
    \ resources\n    OpenConfirm (5)\n     1                   none              \
    \       none             5\n     4            Release resources              \
    \ none             1\n     6            Release resources               none \
    \            1\n     9            Restart KeepAlive timer       KEEPALIVE    \
    \      5\n    11            Complete initialization         none             6\n\
    \                  Restart Holdtime timer\n    13            Close transport connection\
    \                       1\n                  Release resources\n    others   \
    \     Close transport connection    NOTIFICATION       1\n                  Release\
    \ resources\n    Established (6)\n     1                   none              \
    \       none             6\n     4            Release resources              \
    \ none             1\n     6            Release resources               none \
    \            1\n     9            Restart KeepAlive timer       KEEPALIVE    \
    \      6\n    11            Restart Holdtime timer        KEEPALIVE          6\n\
    \    12            Process UPDATE is OK          UPDATE             6\n      \
    \            Process UPDATE failed         NOTIFICATION       1\n    13      \
    \      Close transport connection                       1\n                  Release\
    \ resources\n    others        Close transport connection    NOTIFICATION    \
    \   1\n                  Release resources\n   ---------------------------------------------------------------------\n\
    \   The following is a condensed version of the above state transition\n   table.\n"
- title: Events| Idle | Active | Connect | OpenSent | OpenConfirm | Estab
  contents:
  - "Events| Idle | Active | Connect | OpenSent | OpenConfirm | Estab\n      | (1)\
    \  |   (2)  |  (3)    |    (4)   |     (5)     |   (6)\n      |--------------------------------------------------------------\n\
    \ 1    |  2   |    2   |   3     |     4    |      5      |    6\n      |    \
    \  |        |         |          |             |\n 2    |  1   |    1   |   1\
    \     |     1    |      1      |    1\n      |      |        |         |     \
    \     |             |\n 3    |  1   |    4   |   4     |     1    |      1   \
    \   |    1\n      |      |        |         |          |             |\n 4   \
    \ |  1   |    1   |   1     |     3    |      1      |    1\n      |      |  \
    \      |         |          |             |\n 5    |  1   |    3   |   3     |\
    \     1    |      1      |    1\n      |      |        |         |          |\
    \             |\n 6    |  1   |    1   |   1     |     1    |      1      |  \
    \  1\n      |      |        |         |          |             |\n 7    |  1 \
    \  |    2   |   2     |     1    |      1      |    1\n      |      |        |\
    \         |          |             |\n 8    |  1   |    1   |   1     |     1\
    \    |      1      |    1\n      |      |        |         |          |      \
    \       |\n 9    |  1   |    1   |   1     |     1    |      5      |    6\n \
    \     |      |        |         |          |             |\n"
- title: 10    |  1   |    1   |   1     |  1 or 5  |      1      |    1
  contents:
  - "10    |  1   |    1   |   1     |  1 or 5  |      1      |    1\n      |    \
    \  |        |         |          |             |\n"
- title: 11    |  1   |    1   |   1     |     1    |      6      |    6
  contents:
  - "11    |  1   |    1   |   1     |     1    |      6      |    6\n      |    \
    \  |        |         |          |             |\n"
- title: 12    |  1   |    1   |   1     |     1    |      1      | 1 or 6
  contents:
  - "12    |  1   |    1   |   1     |     1    |      1      | 1 or 6\n      |  \
    \    |        |         |          |             |\n"
- title: 13    |  1   |    1   |   1     |     1    |      1      |    1
  contents:
  - "13    |  1   |    1   |   1     |     1    |      1      |    1\n      |    \
    \  |        |         |          |             |\n      ---------------------------------------------------------------\n"
- title: Appendix 2.  Comparison with RFC 1163
  contents:
  - "Appendix 2.  Comparison with RFC 1163\n   To detect and recover from BGP connection\
    \ collision, a new field (BGP\n   Identifier) has been added to the OPEN message.\
    \ New text (Section\n   6.8) has been added to specify the procedure for detecting\
    \ and\n   recovering from collision.\n   The new document no longer restricts\
    \ the border router that is passed\n   in the NEXT_HOP path attribute to be part\
    \ of the same Autonomous\n   System as the BGP Speaker.\n   New document optimizes\
    \ and simplifies the exchange of the information\n   about previously reachable\
    \ routes.\n"
- title: Appendix 3.  Comparison with RFC 1105
  contents:
  - "Appendix 3.  Comparison with RFC 1105\n   All of the changes listed in Appendix\
    \ 2, plus the following.\n   Minor changes to the RFC1105 Finite State Machine\
    \ were necessary to\n   accommodate the TCP user interface provided by 4.3 BSD.\n\
    \   The notion of Up/Down/Horizontal relations present in RFC1105 has\n   been\
    \ removed from the protocol.\n   The changes in the message format from RFC1105\
    \ are as follows:\n      1.  The Hold Time field has been removed from the BGP\
    \ header and\n          added to the OPEN message.\n      2.  The version field\
    \ has been removed from the BGP header and\n          added to the OPEN message.\n\
    \      3.  The Link Type field has been removed from the OPEN message.\n     \
    \ 4.  The OPEN CONFIRM message has been eliminated and replaced\n          with\
    \ implicit confirmation provided by the KEEPALIVE message.\n      5.  The format\
    \ of the UPDATE message has been changed\n          significantly.  New fields\
    \ were added to the UPDATE message\n          to support multiple path attributes.\n\
    \      6.  The Marker field has been expanded and its role broadened to\n    \
    \      support authentication.\n   Note that quite often BGP, as specified in\
    \ RFC 1105, is referred to\n   as BGP-1, BGP, as specified in RFC 1163, is referred\
    \ to as BGP-2, and\n   BGP, as specified in this document is referred to as BGP-3.\n"
- title: Appendix 4.  TCP options that may be used with BGP
  contents:
  - "Appendix 4.  TCP options that may be used with BGP\n   If a local system TCP\
    \ user interface supports TCP PUSH function, then\n   each BGP message should\
    \ be transmitted with PUSH flag set.  Setting\n   PUSH flag forces BGP messages\
    \ to be transmitted promptly to the\n   receiver.\n   If a local system TCP user\
    \ interface supports setting precedence for\n   TCP connection, then the BGP transport\
    \ connection should be opened\n   with precedence set to Internetwork Control\
    \ (110) value (see also\n   [6]).\n"
- title: Appendix 5.  Implementation Recommendations
  contents:
  - "Appendix 5.  Implementation Recommendations\n   This section presents some implementation\
    \ recommendations.\n"
- title: 5.1 Multiple Networks Per Message
  contents:
  - "5.1 Multiple Networks Per Message\n   The BGP protocol allows for multiple networks\
    \ with the same AS path\n   and next-hop gateway to be specified in one message.\
    \ Making use of\n   this capability is highly recommended. With one network per\
    \ message\n   there is a substantial increase in overhead in the receiver. Not\
    \ only\n   does the system overhead increase due to the reception of multiple\n\
    \   messages, but the overhead of scanning the routing table for flash\n   updates\
    \ to BGP peers and other routing protocols (and sending the\n   associated messages)\
    \ is incurred multiple times as well. One method\n   of building messages containing\
    \ many networks per AS path and gateway\n   from a routing table that is not organized\
    \ per AS path is to build\n   many messages as the routing table is scanned. As\
    \ each network is\n   processed, a message for the associated AS path and gateway\
    \ is\n   allocated, if it does not exist, and the new network is added to it.\n\
    \   If such a message exists, the new network is just appended to it. If\n   the\
    \ message lacks the space to hold the new network, it is\n   transmitted, a new\
    \ message is allocated, and the new network is\n   inserted into the new message.\
    \ When the entire routing table has been\n   scanned, all allocated messages are\
    \ sent and their resources\n   released.  Maximum compression is achieved when\
    \ all networks share a\n   gateway and common path attributes, making it possible\
    \ to send many\n   networks in one 4096-byte message.\n   When peering with a\
    \ BGP implementation that does not compress\n   multiple networks into one message,\
    \ it may be necessary to take steps\n   to reduce the overhead from the flood\
    \ of data received when a peer is\n   acquired or a significant network topology\
    \ change occurs. One method\n   of doing this is to limit the rate of flash updates.\
    \ This will\n   eliminate the redundant scanning of the routing table to provide\n\
    \   flash updates for BGP peers and other routing protocols. A\n   disadvantage\
    \ of this approach is that it increases the propagation\n   latency of routing\
    \ information.  By choosing a minimum flash update\n   interval that is not much\
    \ greater than the time it takes to process\n   the multiple messages this latency\
    \ should be minimized. A better\n   method would be to read all received messages\
    \ before sending updates.\n"
- title: 5.2  Processing Messages on a Stream Protocol
  contents:
  - "5.2  Processing Messages on a Stream Protocol\n   BGP uses TCP as a transport\
    \ mechanism.  Due to the stream nature of\n   TCP, all the data for received messages\
    \ does not necessarily arrive\n   at the same time. This can make it difficult\
    \ to process the data as\n   messages, especially on systems such as BSD Unix\
    \ where it is not\n   possible to determine how much data has been received but\
    \ not yet\n   processed.\n   One method that can be used in this situation is\
    \ to first try to read\n   just the message header. For the KEEPALIVE message\
    \ type, this is a\n   complete message; for other message types, the header should\
    \ first be\n   verified, in particular the total length. If all checks are\n \
    \  successful, the specified length, minus the size of the message\n   header\
    \ is the amount of data left to read. An implementation that\n   would \"hang\"\
    \ the routing information process while trying to read\n   from a peer could set\
    \ up a message buffer (4096 bytes) per peer and\n   fill it with data as available\
    \ until a complete message has been\n   received.\n"
- title: 5.3 Processing Update Messages
  contents:
  - "5.3 Processing Update Messages\n   In BGP, all UPDATE messages are incremental.\
    \ Once a particular\n   network is listed in an Update message as being reachable\
    \ through an\n   AS path and gateway, that piece of information is expected to\
    \ be\n   retained indefinitely.\n   In order for a route to a network to be removed,\
    \ it must be\n   explicitly listed in an Update message as being unreachable or\
    \ with\n   new routing information to replace the old. Note that a BGP peer will\n\
    \   only advertise one route to a given network, so any announcement of\n   that\
    \ network by a particular peer replaces any previous information\n   about that\
    \ network received from the same peer.\n   One useful optimization is that unreachable\
    \ networks need not be\n   advertised with their original attributes.  Instead,\
    \ all unreachable\n   networks could be sent in a single message, perhaps with\
    \ an AS path\n   consisting of the local AS only and with an origin set to INCOMPLETE.\n\
    \   This approach has the obvious advantage of low overhead; if all\n   routes\
    \ are stable, only KEEPALIVE messages will be sent. There is no\n   periodic flood\
    \ of route information.\n   However, this means that a consistent view of routing\
    \ information\n   between BGP peers is only possible over the course of a single\n\
    \   transport connection, since there is no mechanism for a complete\n   update.\
    \ This requirement is accommodated by specifying that BGP peers\n   must transition\
    \ to the Idle state upon the failure of a transport\n   connection.\n"
- title: 5.4 BGP Timers
  contents:
  - "5.4 BGP Timers\n      BGP employs three timers: ConnectRetry, Holdtime, and KeepAlive.\n\
    \      Suggested value for the ConnectRetry timer is 120 seconds.\n      Suggested\
    \ value for the Holdtime timer is 90 seconds.\n      Suggested value for the KeepAlive\
    \ timer is 30 seconds.\n      An implementation of BGP shall allow any of these\
    \ timers to be\n      configurable.\n"
- title: 5.5 Frequency of Route Selection
  contents:
  - "5.5 Frequency of Route Selection\n   An implementation of BGP shall allow a border\
    \ router to set up the\n   minimum amount of time that must elapse between selection\
    \ and\n   subsequent advertisement of better routes received by a given BGP\n\
    \   speaker from BGP speakers located in adjacent ASs.\n   Since fast convergence\
    \ is needed within an AS, deferring selection\n   does not apply to selection\
    \ of better routes chosen as a result of\n   UPDATEs from BGP speakers located\
    \ in the advertising speaker's own\n   AS.  To avoid long-lived black holes, it\
    \ does not apply to\n   advertisement of previously selected routes which have\
    \ become\n   unreachable. In both of these situations, the local BGP speaker must\n\
    \   select and advertise such routes immediately.\n   If a BGP speaker received\
    \ better routes from BGP speakers in adjacent\n   ASs, but have not yet advertised\
    \ them because the time has not yet\n   elapsed, the reception of any routes from\
    \ other BGP speakers in its\n   own AS shall trigger a new route selection process\
    \ that will be based\n   on both updates from BGP speakers in the same AS and\
    \ in adjacent ASs.\n"
- title: References
  contents:
  - "References\n   [1] Mills, D., \"Exterior Gateway Protocol Formal Specification\"\
    , RFC\n       904, BBN, April 1984.\n   [2] Rekhter, Y., \"EGP and Policy Based\
    \ Routing in the New NSFNET\n       Backbone\", RFC 1092, T.J. Watson Research\
    \ Center, February 1989.\n   [3] Braun, H-W., \"The NSFNET Routing Architecture\"\
    , RFC 1093,\n       MERIT/NSFNET Project, February 1989.\n   [4] Postel, J., \"\
    Transmission Control Protocol - DARPA Internet\n       Program Protocol Specification\"\
    , RFC 793, DARPA, September 1981.\n   [5] Rekhter, Y., and P. Gross, \"Application\
    \ of the Border Gateway\n       Protocol in the Internet\", RFC 1268, T.J. Watson\
    \ Research Center,\n       IBM Corp., ANS, October 1991.\n   [6] Postel, J., \"\
    Internet Protocol - DARPA Internet Program Protocol\n       Specification\", RFC\
    \ 791, DARPA, September 1981.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kirk Lougheed\n   cisco Systems, Inc.\n   1525 O'Brien\
    \ Drive\n   Menlo Park, CA 94025\n   Phone:  (415) 326-1941\n   Email:  LOUGHEED@CISCO.COM\n\
    \   Yakov Rekhter\n   T.J. Watson Research Center IBM Corporation\n   P.O. Box\
    \ 218\n   Yorktown Heights, NY 10598\n   Phone:  (914) 945-3896\n   Email:  YAKOV@WATSON.IBM.COM\n"
