Abstract This memo defines a portion of the Management Information Base (MIB) module for use with network management protocols in the Internet community.
In particular, it describes a set of managed objects that are used to manage Telephony Routing over IP (TRIP) devices.
The Internet Standard Management Framework
For a detailed overview of the documents that describe the current Internet Standard Management Framework, please refer to section 7 of RFC 3410 [RFC3410].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
MIB module objects are generally accessed through the Simple Network Management Protocol (SNMP).
Objects in this MIB module are defined using the mechanisms defined in the Structure of Management Information (SMI).
This memo specifies a MIB module that is compliant to the SMIv2, which is described in STD 58, RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579], and
This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes a set of managed objects that are used to schedule management operations periodically or at specified dates and times.
Since TRIP [RFC3219] is modeled after the Border Gateway Protocol (BGP 4) [RFC1771], the managed objects for TRIP are also modeled after RFC1657 Definitions of Managed Objects for the Fourth Version of the Border Gateway Protocol (BGP 4) using
Conventions used in this document The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "
SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14, RFC 2119
This MIB module provides managed objects for TRIP devices defined in Telephony Routing over IP [RFC3219].
TRIP is an inter domain application layer control protocol that exchanges information between TRIP location servers (LS) to provide efficient IP telephony routing.
This MIB module utilizes the framework described in RFC 2788
[RFC2788] for management of multiple instances of TRIP from a single entity.
The Network Services Monitoring MIB module applTable will be populated with entries corresponding to each TRIP Location Server in the system.
Each TRIP Location Server will then have an applIndex associated with it.
The value assigned to applIndex will represent the distinct instance of TRIP.
The TRIP MIB module contains the following groups of objects with each group as part of the management of a singular TRIP entity.
Each group covers a section of functionality of TRIP:
The tripConfigGroup contains the common configuration objects applicable to all TRIP applications referenced by the applIndex.
The tripPeerTableConfigGroup contains the configuration objects applicable to all TRIP peers of the Location Server referenced by the applIndex.
The tripRouteGroup contains the configuration objects related to the routes of all TRIBs of this Location Server.
The tripItadTopologyGroup contains information about the topology of the TRIP ITADs concerning this Location Server.
The tripPeerTableStatsGroup contains the statistical objects applicable to all TRIP peers of the Location Server referenced by the applIndex.
The tripNotificationGroup contains notifications that the TRIP application can generate.
The tripNotifObjectGroup contains the objects needed by one or more of the notifications.
The data types TripItad and TripId are used as textual conventions in this document.
A TRIP ITAD (IP Telephony Administrative Domain) is described in [RFC3219].
A TRIP ID is used as a distinct identifier for a TRIP Location Server.
A TripAppProtocol is used to identify an application protocol.
A TripAddressFamily is used to define an address family.
TripCommunityId is used as a distinct identifier for a TRIP community.
TripProtocolVersion depicts the version number of the TRIP protocol.
TripSendReceiveMode describes the operational mode of the TRIP application.
TRIP Textual Conventions TRIP TC MIB DEFINITIONS ::
BEGIN IMPORTS MODULE IDENTITY, Unsigned32,
TEXTUAL CONVENTION FROM SNMPv2 TC;
tripTC MODULE IDENTITY LAST UPDATED
Mailing list: iptel@lists.bell labs.com" CONTACT INFO "
Toronto ON, M5M 4N8 Canada email:
ON K2K 3G1 Canada email:
1 905 886 7818 x2515 " DESCRIPTION "Initial version of TRIP (
MIB Textual Conventions module used by other TRIP related MIB Modules.
This version of this MIB module is part of RFC 3872, see the RFC itself for full legal notices."
"The values for identifying the IP Telephony Administrative Domain (ITAD)."
"The TRIP Identifier uniquely identifies a LS within its ITAD.
It is a 4 octet unsigned integer that may, but not necessarily, represent the IPv4 address of a Location Server.
Where bytes 1 4 of the Unsigned32 represent 1 4 bytes of the IPv4 address in network byte order.
For an IPv6 network, TripId will not represent the IPv6 address."
TEXTUAL CONVENTION STATUS current DESCRIPTION
"A type of address for a TRIP route.
An other type of address family
" SYNTAX INTEGER { decimal(1), pentadecimal(2), e164(3), other(255) } TripAppProtocol ::
TEXTUAL CONVENTION STATUS current DESCRIPTION
"The application protocol used for communication with TRIP Location Servers.
An other type of application protocol" SYNTAX INTEGER { sip(1), q931(2), ras(3), annexG(4), other(255)
TEXTUAL CONVENTION STATUS current DESCRIPTION
"The range of legal values for a TRIP Community Identifier."
TEXTUAL CONVENTION STATUS current DESCRIPTION
"The version number of the TRIP protocol.
"The operational mode of the TRIP application.
Possible values are: 1 Send Receive mode
2 Send only mode 3 Receive Only mode" SYNTAX INTEGER { sendReceive(1), sendOnly(2), receiveOnly(3) } END 6.2.
MIB TRIP MIB DEFINITIONS ::
IMPORTS MODULE IDENTITY, OBJECT TYPE, NOTIFICATION TYPE, Unsigned32, Integer32,
[RFC2579] OBJECT GROUP, MODULE COMPLIANCE, NOTIFICATION GROUP FROM SNMPv2
[RFC2580] InetAddressType, InetAddress, InetPortNumber FROM INET ADDRESS
[RFC3291] applIndex, applRFC2788Group FROM NETWORK SERVICES
tripMIB MODULE IDENTITY LAST UPDATED "200409020000Z"
Sep 02, 2004 ORGANIZATION "IETF IPTel Working Group.
Mailing list: iptel@lists.bell labs.com" CONTACT INFO "
Toronto ON, M5M 4N8 Canada email:
ON K2K 3G1 Canada email:
1 905 886 7818 x2515 " DESCRIPTION "The MIB module describing Telephony Routing over IP (TRIP).
TRIP is a policy driven inter administrative domain protocol for advertising the reachability of telephony destinations between location servers (LS), and for advertising attributes of the routes to those destinations.
This version of this MIB module is part of RFC 3872, see the RFC itself for full legal notices."
SEQUENCE OF TripCfgEntry MAX ACCESS
"This table contains the common configuration objects applicable to all TRIP applications referenced by the applIndex.
Each row represents those objects for a particular TRIP LS present in this system.
The instances of TRIP LS's are uniquely identified by the applIndex.
The objects in this table SHOULD be nonVolatile and survive a reboot."
current DESCRIPTION "A row of common configuration.
"This object will reflect the version of TRIP supported by this system.
It follows the same format as TRIP version information contained in the TRIP messages generated by this TRIP entity.
REFERENCE "RFC 3219, section 4.2."
Internet Telephony Administrative domain (ITAD) of this LS."
: Set the application to normal operation.
: Set the application to a state where it will not process TRIP messages.
Setting this object should be reflected in tripCfgOperStatus.
If an unknown error occurs tripCfgOperStatus will return unknown(0)."
The current operational state of the TRIP protocol.
unknown(0): The operating status of the application is unknown.
The application is operating normally, and is ready to process (receive and issue)
The application is currently not processing TRIP messages.
This occurs if the TRIP application is in an initialization state or if tripCfgAdminStatus is set to down(2).
The application is not operating normally due to a fault in the system.
If tripCfgAdminStatus is down(2) then tripOperStatus SHOULD be down(2).
If tripAdminStatus is changed to up(1)
then tripOperStatus SHOULD change to up(1)
if there is no fault that prevents the TRIP protocol from moving to the up(1) state."
REFERENCE "RFC 3291, section 3."
The network address of the local LS that the peer connects to.
The type of address depends on the object tripCfgAddrIAddrType.
The type of this address is determined by the value of the tripCfgAddrIAddrType object.
REFERENCE "RFC 3291, section 3."
"The local tcp/udp port on the local LS that the peer connects to."
The minimum amount of time that MUST elapse between advertisement of the update message that reports changes within the LS's own ITAD."
"Specifies minimal interval between successive advertisements to a particular destination from an LS."
10 } tripCfgMaxPurgeTime OBJECT TYPE
"Indicates the interval that the LS MUST maintain routes marked as withdrawn in its database."
"Indicates the interval that the TRIP module of the LS MUST be disabled while routes originated by this LS with high sequence numbers can be removed."
The operational mode of the TRIP entity running on this system."
Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row."
"The TRIP peer Route Type table contains one entry per supported protocol address family pair.
The objects in this table are volatile and are refreshed after a reboot."
An entry containing information about the route type that a particular TRIP entity supports.
Each entry represents information about either the local or a remote LS peer.
The object tripRouteTypePeer is used to distinguish this.
In the case of a local LS, the address/port information will reflect the values configured in tripCfgTable.
In the case of a remote peer, the address/port information will reflect the values of an entry in the tripPeerTable.
Implementation need to be aware that if the size of tripRouteTypeAddr exceeds 111 sub IDs, then OIDs of column instances in this table will have more than 128 sub IDs and cannot be accessed using SNMPv1, SNMPv2c, or snmpv3.
INTEGER } tripRouteTypeAddrInetType OBJECT TYPE SYNTAX
"The type of Inet Address of the tripRouteTypeAddr."
REFERENCE "RFC 3291, section 3."
The network address of this entry's TRIP peer LS.
The type of this address is determined by the value of the tripRouteTypeAddrInetType object.
REFERENCE "RFC 3291, section 3."
The port for the TCP connection between this and an associated TRIP peer."
"The object identifier of a protocol that the associated peer is using.
"This object identifies whether this entry is associated with a 'local' or 'remote' LS peer."
SEQUENCE OF TripSupportedCommunityEntry MAX ACCESS
"The list of TRIP communities that this LS supports.
A TRIP community is a group of destinations that share common properties.
The TRIP Supported Communities entry is used to group destinations so that the routing decision can be based on the identity of the group.
current DESCRIPTION "Entry containing information about a community.
A TRIP community is a group of destinations that share some common property.
This attribute is used so that routing decisions can be based on the identity of the group.
"The storage type for this conceptual row.
Conceptual rows having the value 'permanent' need not allow write  access to any columnar objects in the row.
It is not a requirement that this storage be non volatile."
This object is REQUIRED to create or delete rows by a manager.
A value for tripSupportedCommunityItad MUST be set for row creation to be successful.
If the instance already exists for a particular applIndex, the row create operation will fail.
The value of this object has no effect on whether other objects in this conceptual row can be modified."
This table contains one entry per TRIP peer, and information about the connection with the peer."
current DESCRIPTION "Entry containing information about the connection with a TRIP peer.
Implementation need to be aware that if the size of tripPeerRemoteAddr exceeds 113 sub IDs, then OIDs of column instances in this table will have more than 128 sub IDs and cannot be accessed using SNMPv1, SNMPv2c, or snmpv3.
"The type of Inet Address of the tripPeerRemoteAddr." REFERENCE "RFC 3291, section 3."
The IP address of this entry's TRIP peer LS.
The type of this address is determined by the value of the tripPeerRemoteAddrInetType object.
REFERENCE "RFC 3291, section 3."
The remote port for the TCP connection between the TRIP peers."
Local LS refuses all incoming connections.
No application resources are allocated to processing information about the remote peer.
Local LS waiting for a transport protocol connection to be completed to the peer, and is listening for inbound transport connections from the peer.
Local LS has sent an OPEN message to its peer and is waiting for an OPEN message from the remote peer.
: Local LS has sent an OPEN message to the remote peer, received an OPEN message from the remote peer, and sent a KEEPALIVE message in response to the OPEN.
The local LS is now waiting for a KEEPALIVE message or a NOTIFICATION message in response to its OPEN message.
established(6): LS can exchange UPDATE, NOTIFICATION, and KEEPALIVE messages with its peer."
"This object is used to affect the TRIP connection state.
: Allow a connection with the peer LS.
: disconnect the connection from the peer LS and do not allow any further connections to this peer.
If this value is set to down(2)
then tripPeerState will have the value of idle(1).
The operational mode of this peer."
{ tripPeerEntry 8 } tripPeerRemoteItad OBJECT TYPE
The Internet Telephony Administrative domain of this peer."
"Specifies the initial amount of time that will elapse between connection retry.
This value SHOULD double after each attempt up to the value of tripPeerMaxRetryInterval.
This value MUST always be less than or equal to the value of tripPeerMaxRetryInterval.
Attempts to set this value higher than the max retry will not be allowed.
"Specifies the maximum amount of time that will elapse between connection retries.
Once the value of tripPeerConnectRetryInterval has reached this value, no more retries will be attempted.
Attempts to set this value lower than the retry interval SHOULD not be allowed."
"The time interval in seconds for the hold timer that is established with the peer.
The value of this object is the smaller of the values in tripPeerHoldTimeConfigured and the hold time received in the open message."
"Specifies the amount of time that MUST elapse between keep alive messages.
This value is negotiated with the remote when a connection is established."
"Specifies the maximum time that MAY elapse between the receipt of successive keepalive or update message.
A value of 0 means that keepalive or update messages will not be sent."
"Specifies the amount of time that MUST elapse between keep alive messages."
"Indicates the interval that the LS MUST maintain routes marked as withdrawn in its database."
"Indicate the interval that the TRIP module of the remote peer LS MUST be disabled while routes originated by the local LS with high sequence numbers can be removed."
"Indicates whether this entry was learned or configured.
} tripPeerStorage OBJECT TYPE SYNTAX
"The storage type for this conceptual row.
Conceptual rows having the value 'permanent' need not allow write  access to any columnar objects in the row.
It is not a requirement that this storage be non volatile."
This object is REQUIRED to create or delete rows remotely by a manager.
If the instance already exists for a particular applIndex, the row create operation will fail.
The value of this object has no effect on whether other objects in this conceptual row can be modified.
Entries in this table can be learned by the TRIP application, or provisioned through this table."
"The TRIP peer stats table.
This table contains one entry per remote TRIP peer, and statistics related to the connection with the remote peer.
The objects in this table are volatile."
current DESCRIPTION "Entry containing information about the connection with a TRIP peer."
"The total number of TRIP messages received from the remote peer on this connection since the last restart of this LS."
"The total number of outgoing TRIP messages sent to the remote peer since the last restart of this LS."
"The number of times the remote peer has transitioned into the established state since the last restart of this LS."
"Indicates the time and date that this remote peer entered the 'established' state."
Elapsed time in hundredths of seconds since the last TRIP update message was received from this remote peer."
The value of sysUpTime when the last state change of tripPeerState took place."
This table contains   all routes from all sources.
Each entry consists   of a route and its associated path attributes.
SEQUENCE OF TripRouteEntry MAX ACCESS
"The TRIP route table containing information about reachable routes that are to be added to service by the receiving LS.
The objects in this table are volatile and are refreshed when this LS rediscovers its route table."
current DESCRIPTION "Information about a route to a called destination.
The protocol for which this entry of the routing table is maintained."
"Specifies the type of address for the destination route."
"This is the address (prefix) of the family type given by Address Family of the destination.
It is the prefix of addresses reachable from this gateway via the next hop server.
The SIZE value of 105 has been assigned due to the sub identifier of object types length limitation as defined in SMIv2."
REFERENCE "RFC 3219, section 5.1.1.1."
"The identifier of the peer where the route information was learned."
"Indicates which Telephony Routing Information Base (TRIB)
This is a bit map of possible types.
If the bit has a value of 1, then the entry is a member of the corresponding TRIB type.
If the bit has a value of 0 then the entry is not a member of the TRIP type.
The various bit positions are: 0    adjTribIns
The entry is of type adj TRIBs ins, stores routing information that has been learned from inbound UPDATE messages.
The entry is of type ext TRIB, the best route for a given destination.
The entry is of type loc TRIB contains the local TRIP routing information that the LS has selected.
The entry is of type adj TRIBs out, stores the information that the local LS has selected for advertisement to its external peers.
REFERENCE "RFC 3291, section 3.5."
"Indicates the version of the destination route originated by the LS identified by tripRouteAddressOriginatorId intra domain attribute."
"This is an intra domain attribute indicating the internal LS that originated the route into the ITAD."
REFERENCE "RFC 3291, section 3."
"Indicates the next hop that messages of a given protocol destined for tripRouteAddress SHOULD be sent to.
The type of this address is determined by the value of the tripRouteNextHopServerIAddrType object."
The port of the next hop server that this route will use."
"Indicates the domain of the next hop."
The Multiple Exit Discriminator allows an LS to discriminate between, and indicate preference for, otherwise similar routes to a neighbouring domain.
A higher value represents a more preferred routing object.
"Indicated the local LS's degree of preference for an advertised route destination."
Identifies the sequence of domains through which this advertisement has passed.
This object is probably best represented as sequence of TripItads.
For SMI compatibility, though, it is represented as an OCTET STRING.
This object is a sequence of ITADs where each set of 4 octets corresponds to a TRIP ITAD in network byte order."
Identifies the ITADs through which messages sent using this route would pass.
These are a subset of tripRouteAdvertisementPath.
This object is probably best represented as sequence of TripItads.
For SMI compatibility, though, it is represented as OCTET STRING.
This object is a sequence of ITADs where each set of 4 octets corresponds to a TRIP ITAD in network byte order."
"Indicates that a route MAY traverse domains not listed in tripRouteRoutedPath.
If an LS selects the less specific route from a set of overlapping routes, then this value returns TRUE."
"This object contains one or more attributes that were not understood, and because they were transitive, were dropped during aggregation.
They take the format of a triple <attribute type, attribute length, attribute value>, of variable length.
If no attributes were dropped, this returns an OCTET STRING of size 0."
"Indicates if this route is to be removed from service by the receiving LS."
"Indicates if this route has been converted to a different application protocol than it had originally."
The value of sysUpTime when this route was received."
"A table containing a list of TRIP communities associated with a route.
Each instance of tripRouteTypeEntry that has the tripRouteTypePeer object set to remote(2) has an instance in the tripRouteTable as a parent.
The objects in this table are volatile and are refreshed after a reboot."
REFERENCE "RFC 3219, section 5.9."
current DESCRIPTION "Information about communities associated with a route.
An entry with a tripRouteAddress of 00 and a tripRoutePeer of 0 refers to the local LS.
"The ITAD associated with this community."
"The sequence of link connections between peers within an ITAD.
The objects in this table are volatile and are refreshed after a reboot."
current DESCRIPTION "Information about a peer of the LS identified by tripItadTopologyOrigId.
tripItadTopologySeqNum    Unsigned32 } tripItadTopologyOrigId OBJECT
"Indicates the internal LS that originated the ITAD topology information into the ITAD."
"Indicates the version of the ITAD topology originated by the LS identified by tripItadTopologyOrigId."
"The list of other LS's within the ITAD domain that the LS identified by tripItadTopologyOrigId is currently peering.
Each instance of tripItadTopologyIdEntry has an instance in the tripItadTopologyTable as a parent.
The objects in this table are volatile and are refreshed after a reboot."
current DESCRIPTION "Information about a peer to the LS identified by tripItadTopologyOrigId.
The index into this entry.
Indicates the other location servers within the ITAD domain that this LS identified by tripItadTopologyOrigId is currently peering."
"This object contains the application Index.
It is used to bind this notification with a specific instance of TRIP entity.
REFERENCE "RFC 2788, section 3."
The type of Inet Address of the tripNotifPeerAddr."
REFERENCE "RFC 3291, section 3."
The IP address of this entry's TRIP peer LS.
This object contains the value of tripPeerRemoteAddr.
The type of this address is determined by the value of the tripNotifPeerAddrInetType object."
REFERENCE "RFC 3291, section 3."
The meaning of this value is applicable to the following functions:
All errors detected while processing the TRIP message header.
All errors detected while processing the OPEN message.
All errors detected while processing the UPDATE message.
A notification generated when the hold timer expires.
All errors detected by the TRIP Finite State Machine.
Any fatal error condition that the rest of the values do not cover.
Any error encountered while sending a notification message."
The sub error code associated with error code.
The meaning of this value is dependent on the value of tripNotifPeerErrCode.
Error Subcodes: 1 Bad Message Length.
Error Subcodes: 1 Unsupported Version Number.
Error Subcodes: 1 Malformed Attribute List.
NOTIFICATION TYPE OBJECTS { tripNotifApplIndex, tripNotifPeerAddrInetType, tripNotifPeerAddr } STATUS  current DESCRIPTION
The TRIP Connection Established event is generated when the TRIP finite state machine enters the ESTABLISHED state."
{ tripMIBNotifications 1 } tripConnectionDropped NOTIFICATION TYPE OBJECTS { tripNotifApplIndex, tripNotifPeerAddrInetType, tripNotifPeerAddr } STATUS  current DESCRIPTION
The TRIP Connection Dropped event is generated when the TRIP finite state machine leaves the ESTABLISHED state."
"The trip FSM Event is generated when any error is detected by the TRIP Finite State Machine."
"Errors detected while processing the OPEN message."
"Errors detected while processing the UPDATE message."
"The system does not receive successive messages within the period specified by the negotiated Hold Time."
{ tripMIBNotifications 6 } tripConnectionCollision NOTIFICATION TYPE OBJECTS { tripNotifApplIndex } STATUS  current DESCRIPTION "A pair of LSs tried to simultaneously to establish a transport connection to each other."
{ tripMIBNotifications 7 } tripCease NOTIFICATION TYPE OBJECTS { tripNotifApplIndex, tripNotifPeerAddrInetType, tripNotifPeerAddr, tripNotifPeerErrCode, tripNotifPeerErrSubcode, tripPeerState } STATUS  current DESCRIPTION
"A TRIP peer MAY choose at any given time to close its TRIP connection by sending this notification message.
However, the Cease notification message MUST NOT be used when a fatal error occurs."
{ tripMIBNotifications 8 } tripNotificationErr
NOTIFICATION TYPE OBJECTS { tripNotifApplIndex } STATUS  current DESCRIPTION
"Generated if there is an error detected in a TRIP notification message sent with another cause.
Note that the TRIP notification referred to in this object is not an SNMP notification
, it is a specific message described in the TRIP specification.
REFERENCE "RFC 3219, section  6.4."
"The compliance statement for TRIP entities that implement this MIB module in read write mode, such that it can be used for both monitoring and configuring the TRIP entity.
There is one INDEX object that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there is a compliance requirement, expressed in OBJECT clause form in this description:   OBJECT
this module MANDATORY GROUPS { tripConfigGroup, tripPeerTableConfigGroup, tripRouteGroup, tripItadTopologyGroup, tripPeerTableStatsGroup } GROUP tripNotificationGroup DESCRIPTION "
A TRIP entity can choose not to send any notifications.
If this group is implemented, the tripNotifObjectGroup MUST also be implemented."
A TRIP entity can choose not to send any notifications.
If this group is implemented, the tripNotificationGroup MUST also be implemented."
WRITE SYNTAX RowStatus { createAndGo(4), destroy(6
) } DESCRIPTION "Support for createAndWait and notInService is not required.
WRITE SYNTAX RowStatus { createAndGo(4), destroy(6
) } DESCRIPTION "Support for createAndWait and notInService is not required.
"The compliance statement for TRIP entities that implement this MIB module in read only mode.
Such TRIP entities can then only be monitored, but not be configured via this MIB module.
In read only mode, the manager will not be able to add, remove or modify rows to any table, however the TRIP application may modify, remove or add rows to a table.
There is one INDEX object that cannot be represented in the form of OBJECT clauses in SMIv2, but for which there is a compliance requirement, expressed in OBJECT clause form in this description:   OBJECT
this module MANDATORY GROUPS { tripConfigGroup, tripPeerTableConfigGroup, tripRouteGroup, tripItadTopologyGroup, tripPeerTableStatsGroup } GROUP tripNotificationGroup DESCRIPTION "
A TRIP entity can choose not to send any notifications.
If this group is implemented, the tripNotifObjectGroup MUST also be implemented."
A TRIP entity can choose not to send any notifications.
If this group is implemented, the tripNotificationGroup MUST also be implemented."
"Write access is not required."
"Object is not needed when implemented in read only mode."
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION "Write access is not required, and active is the only status that needs to be supported."
"Object is not needed when implemented in read only mode."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS   read only DESCRIPTION
"Write access is not required."
MIN ACCESS  read only DESCRIPTION "Write access is not required, and active is the only status that needs to be supported.
Object and event conformance groups
OBJECT GROUP OBJECTS { tripCfgProtocolVersion, tripCfgItad, tripCfgIdentifier, tripCfgOperStatus, tripCfgAdminStatus, tripCfgAddrIAddrType, tripCfgAddr, tripCfgPort, tripCfgMinItadOriginationInterval, tripCfgMinRouteAdvertisementInterval, tripCfgMaxPurgeTime, tripCfgDisableTime, tripCfgSendReceiveMode, tripCfgStorage, tripSupportedCommunityItad, tripSupportedCommunityStorage, tripRouteTypePeer, tripSupportedCommunityRowStatus } STATUS current DESCRIPTION
"The global objects for configuring trip."
"The global objects for configuring the TRIP peer table."
"The global statistics the TRIP peer table."
"The global objects for configuring route attribute."
Security Considerations The managed objects in this MIB module contain sensitive information since, collectively, they allow tracing and influencing of connections in TRIP devices and provide information of their connection characteristics.
As such, improper manipulation of the objects represented by this MIB module MAY result in denial of service to a large number of available routes.
There are a number of management objects defined in this MIB module that have a MAX ACCESS clause of read write and/or read create.
Such objects MAY be considered sensitive or vulnerable in some network environments.
The support for SET operations in a non secure environment without proper protection can have a negative effect on network operations.
Improper setting of tripCfgItad value can make all peer connections drop and not be re established.
Improper setting of tripCfgAdminStatus from up to down will cause the TRIP Location Server stop processing TRIP messages.
tripCfgPort: Improper setting of tripCfgPort can cause the failure of a peer establishing a connection.
Improper configuration of these values MAY adversely affect local and global convergence of the routes advertised by this TRIP Location Server.
tripPeerAdminStatus: Improper setting of tripPeerAdminStatus from up to down can cause significant disruption of the connectivity to the destination via the applicable remote TRIP Location Server peer.
Improper configuration of these values can cause connections to be disrupted for extremely long time periods when otherwise they would be restored in a relatively short period of time.
tripPeerHoldTimeConfigured, tripPeerKeepAliveConfigured: Improper configuration of these value can make TRIP peer sessions more fragile and less resilient to denial of service attacks.
There are a number of managed objects in this MIB module that contain sensitive information regarding the operation of a network.
For example, a TRIP Location Server peer's local and remote addresses might be sensitive for ISPs who want to keep interface addresses on TRIP Location Server confidential so as to prevent TRIP Location Server addresses used for a denial of service attack or address spoofing.
Therefore, it is thus important to control even GET access to these objects and possibly to even encrypt the values of these object when sending them over the network via SNMP.
Not all versions of SNMP provide features for such a secure environment.
by itself is not a secure environment.
Even if the network itself is secure (for example by using IPSec), even then, there is no control as to who on the secure network is allowed to access and
the objects in this MIB module.
It is RECOMMENDED that the implementers consider the security features as provided by the SNMPv3 framework (see [RFC3410], section 8), including full support for the SNMPv3 cryptographic mechanisms (for authentication and privacy).
Further, deployment of SNMP versions prior to SNMPv3 is NOT RECOMMENDED.
Instead, it is RECOMMENDED to deploy SNMPv3 and to enable cryptographic security.
It is then a customer/operator responsibility to ensure that the SNMP entity giving access to an instance of this MIB module is properly configured to give access to the objects only to those principals (users) that have legitimate rights to indeed GET or SET
