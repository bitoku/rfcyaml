Abstract The Resource ReserVation Protocol (RSVP) defines an ERROR SPEC object for communicating errors.
That object has a defined format that permits the definition of 256 error codes.
As RSVP has been developed and extended, the convention has been to be conservative in defining new error codes.
Further, no provision for user defined errors exists in RSVP.
This document defines a USER ERROR SPEC to be used in addition to the ERROR SPEC to carry additional user information related to errors.
The Resource ReserVation Protocol (RSVP)
[RFC2205] defines an ERROR SPEC object for communicating errors.
That object has a defined format that permits the definition of 256 error codes.
As RSVP has been developed and extended, the convention has been to be conservative in communicating errors.
Further, no provision for user defined errors exists in RSVP.
When developing extensions to RSVP, it is often useful for those implementing to define error messages to aid both in the initial debugging and in testing against older versions or other implementations.
This document defines a new RSVP object to permit user defined errors to be communicated.
This will enable organizations to define errors that they can use for internal development.
These error values could also be shared with the community at large to aid in promoting interoperability between diverse implementations.
RSVP PathErr and ResvErr messages require the presence of an ERROR SPEC object ([RFC2205]).
[RFC3473] defines the Notify message that also requires the presence of an ERROR SPEC object.
In order to not change the mandatory contents of these messages, this document defines a new error code value that indicates that the new object is present and carries a user defined error code.
Note that the ResvConf message defined in [RFC2205] also carries an ERROR SPEC object.
But this usage of the object does not carry meaningful Error Codes or Error Values
and so the extensions defined in this document are not applicable to that message.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
A new Error Code is defined for use in an ERROR SPEC object.
Error Code   33: User Error Spec
This error code is used to signal the presence of a USER ERROR SPEC.
One Error Value is defined as follows.
Further details in User Error Spec Further error values may be defined in future specifications.
When sending this error code, a USER ERROR SPEC object MUST be included in the PathErr, ResvErr, or Notify message.
Class A new RSVP object class called USER ERROR SPEC is defined.
To support backwards compatibility, its class number is in the range 192 247.
As defined in [RFC2205], implementations that do not understand such an object will forward it unmodified.
A unique identifier of an organization encoded as a 32 bit integer.
Enterprise Numbers (sometimes known as Private Enterprise Numbers) are assigned by IANA and managed on a first come first served basis through the IANA registry named "Enterprise Numbers" [RFC2578].
Sub Org A unique identifier of an organization encoded as an 8 bit integer.
An organization MAY use this field to create independent Error Value spaces.
This is intended to facilitate teams that are doing parallel development.
If independent spaces are not required, this field SHOULD be set to zero.
The length of the error description in the Error Description field in bytes excluding any padding.
Zero is a valid length if no error description is supplied.
The meaning is specified by the (sub )organization indicated by the Enterprise Number and Sub Org fields.
A string of characters padded with nulls (0x00) to a multiple of 4 bytes.
According to the guidance in [RFC2277], this string MUST use UTF
Furthermore, it is RECOMMENDED that implementations limit the strings that they generate to single line printable US ASCII [ASCII]
whenever feasible to improve the likelihood of easy use by the recipient.
If the Err Desc Len is zero, then no bytes are supplied.
Note that the content of this field is implementation specific.
It is typically printable, but might not be shown to all users in all implementations (because of character set choice).
Therefore, the content of the field SHOULD be limited to supplementary information and SHOULD NOT contain information critical to operating the network.
Critical information is present in the User Error Value field.
User defined subobjects MAY be included.
The generic format of subobjects is specified in Section 3.1.
The semantics of a subobject is indicated by the Type field, but the semantics, format, and contents of the Value field are specified by the (sub )organization indicated by the Enterprise Number and Sub Org fields of this object.
Subobjects Each subobject is encoded as a TLV in the following format:
An 8 bit number assigned by the (sub )organization indicated by the Enterprise Number and Sub Org fields of the USER ERROR SPEC object.
Length The Length contains the total length of the subobject in bytes, including the Type and Length fields.
The Length MUST be at least 4, and MUST be a multiple of 4. 4.
Procedures for Using the User Error Spec 4.1.
Procedures for Sending the User Error Spec A USER ERROR SPEC object MAY be included in any PathErr, ResvErr, or Notify message for any defined error code.
The Enterprise Number MUST be a valid value assigned by IANA from the "Enterprise Numbers" registry.
As specified in [RFC2205] and [RFC3473], an ERROR SPEC object with a valid error code MUST be included in all PathErr, ResvErr, and Notify messages.
This rule is not changed by these procedures even when a USER ERROR SPEC object is included.
If no other error code applies, the Error Code in the ERROR SPEC object MUST be set to "User Error Spec" as defined in Section 2 of this document.
When the Error Code in the ERROR SPEC object is set to "User Error Spec", the Error Value sub code SHOULD be set to "Further details in User Error Spec" as defined in Section 2, but further Error Value sub codes may be defined in future specifications.
Procedures for Receiving the User Error Spec
It is RECOMMENDED that implementations that receive a PathErr, ResvErr, or Notify message carrying a USER ERROR SPEC object log (at a minimum)
the Enterprise Number, Sub organization, User Error Value, and Error Description.
Note that the character set used for the Error Description may mean that it might not be suitable for display of logging in all systems.
Implementations capable of interpreting the contents of the USER ERROR SPEC object SHOULD take further action based on the reported error.
Implementations that are not UTF 8 capable and that receive a USER ERROR SPEC object
SHOULD handle the Error Description according to the procedures set out in [RFC5137].
If a message is received containing an ERROR SPEC object using the "User Error Spec" error code, but not containing a USER ERROR SPEC object, the message MUST be treated as malformed and handled according to [RFC2205].
Implementations SHOULD ignore repeated occurrences of USER ERROR SPEC objects, and SHOULD forward them unchanged on any messages that they forward.
This provides for forward compatibility.
Implementations receiving a USER ERROR SPEC object on some message other than a PathErr, ResvErr, or Notify message MUST treat the error as a malformed message and process according to [RFC2205].
This document makes the following assignments from the RSVP Error Codes and Globally Defined Error Value Sub Codes registry: Error Code
Further details in User Error Spec 5.2.
This document makes no changes to the basic message exchanges of [RFC2205] and [RFC3473].
It will result in a small increase in the number of error messages sent in cases where messages were previously silently dropped due to the lack of an appropriate error code.
The mechanisms defined in this document may be used by implementations to report additional error conditions and information arising from security issues and attacks on the RSVP network.
Note that the use of a character string that will be displayed or logged opens the potential for certain security attacks through the use of overruns or embedded control characters.
Implementations SHOULD take precautions against overruns, and (especially where the full character set of [RFC5198] is not supported, SHOULD use the procedures set out in [RFC5137] to handle unexpected or unknown control characters.
