- contents:
  - '  A Session Initiation Protocol (SIP) Response Code for Rejected Calls

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines the 608 (Rejected) Session Initiation Protocol\n
    \  (SIP) response code.  This response code enables calling parties to\n   learn
    that an intermediary rejected their call attempt.  No one will\n   deliver, and
    thus answer, the call.  As a 6xx code, the caller will\n   be aware that future
    attempts to contact the same User Agent Server\n   will likely fail.  The initial
    use case driving the need for the 608\n   response code is when the intermediary
    is an analytics engine.  In\n   this case, the rejection is by a machine or other
    process.  This\n   contrasts with the 607 (Unwanted) SIP response code in which
    a human\n   at the target User Agent Server indicates the user did not want the\n
    \  call.  In some jurisdictions, this distinction is important.  This\n   document
    also defines the use of the Call-Info header field in 608\n   responses to enable
    rejected callers to contact entities that blocked\n   their calls in error.  This
    provides a remediation mechanism for\n   legal callers that find their calls blocked.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8688.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  Protocol Operation\n
    \    3.1.  Intermediary Operation\n     3.2.  JWS Construction\n       3.2.1.
    \ JOSE Header\n       3.2.2.  JWT Payload\n       3.2.3.  JWS Signature\n     3.3.
    \ UAC Operation\n     3.4.  Legacy Interoperation\n     3.5.  Announcement Requirements\n
    \  4.  Examples\n     4.1.  Full Exchange\n     4.2.  Web Site jCard\n     4.3.
    \ Multi-modal jCard\n     4.4.  Legacy Interoperability\n   5.  IANA Considerations\n
    \    5.1.  SIP Response Code\n     5.2.  SIP Feature-Capability Indicator\n     5.3.
    \ JSON Web Token Claim\n     5.4.  Call-Info Purpose\n   6.  Security Considerations\n
    \  7.  References\n     7.1.  Normative References\n     7.2.  Informative References\n
    \  Acknowledgements\n   Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The IETF has been addressing numerous issues surrounding
    how to\n   handle unwanted and, depending on the jurisdiction, illegal calls\n
    \  [RFC5039].  Secure Telephone Identity Revisited (STIR) [RFC7340] and\n   Signature-based
    Handling of Asserted information using toKENs\n   (SHAKEN) [SHAKEN] address the
    cryptographic signing and attestation,\n   respectively, of signaling to ensure
    the integrity and authenticity\n   of the asserted caller identity.\n   This document
    describes a new Session Initiation Protocol (SIP)\n   [RFC3261] response code,
    608, which allows calling parties to learn\n   that an intermediary rejected their
    call.  As described below, we\n   need a distinct indicator to differentiate between
    a user rejection\n   and an intermediary's rejection of a call.  In some jurisdictions,\n
    \  service providers may not be permitted to block calls, even if\n   unwanted
    by the user, unless there is an explicit user request.\n   Moreover, users may
    misidentify the nature of a caller.\n   For example, a legitimate caller may call
    a user who finds the call\n   to be unwanted.  However, instead of marking the
    call as unwanted,\n   the user may mark the call as illegal.  With that information,
    an\n   analytics engine may determine to block all calls from that source.\n   However,
    in some jurisdictions, blocking calls from that source for\n   other users may
    not be legal.  Likewise, one can envision\n   jurisdictions that allow an operator
    to block such calls, but only if\n   there is a remediation mechanism in place
    to address false positives.\n   Some call-blocking services may return responses
    such as 604 (Does\n   Not Exist Anywhere).  This might be a strategy to try to
    get a\n   destination's address removed from a calling database.  However,\n   other
    network elements might also interpret this to mean the user\n   truly does not
    exist, which might result in the user not being able\n   to receive calls from
    anyone, even if they wanted to receive the\n   calls.  In many jurisdictions,
    providing such false signaling is also\n   illegal.\n   The 608 response code
    addresses this need of remediating falsely\n   blocked calls.  Specifically, this
    code informs the SIP User Agent\n   Client (UAC) that an intermediary blocked
    the call and provides a\n   redress mechanism that allows callers to contact the
    operator of the\n   intermediary.\n   In the current call handling ecosystem,
    users can explicitly reject a\n   call or later mark a call as being unwanted
    by issuing a 607 SIP\n   response code (Unwanted) [RFC8197].  Figures 1 and 2
    show the\n   operation of the 607 SIP response code.  The User Agent Server (UAS)\n
    \  indicates the call was unwanted.  As [RFC8197] explains, not only\n   does
    the called party desire to reject that call, they can let their\n   proxy know
    that they consider future calls from that source unwanted.\n   Upon receipt of
    the 607 response from the UAS, the proxy may send\n   unwanted call indicators,
    such as the value of the From header field\n   and other information elements,
    to a call analytics engine.  For\n   various reasons described in [RFC8197], if
    a network operator\n   receives multiple reports of unwanted calls, that may indicate
    that\n   the entity placing the calls is likely to be a source of unwanted\n   calls
    for many people.  As such, other customers of the service\n   provider may want
    the service provider to automatically reject calls\n   on their behalf.\n   There
    is another value of the 607 rejection code.  Presuming the\n   proxy forwards
    the response code to the UAC, the calling UAC or\n   intervening proxies will
    also learn the user is not interested in\n   receiving calls from that sender.\n
    \           +-----+    607     |  Called   |    607    +-----+\n            |
    UAC | <--------- |  Party    | <-------- | UAS |\n                     Figure
    1: Unwanted (607) Call Flow\n   For calls rejected with a 607 from a legitimate
    caller, receiving a\n   607 response code can inform the caller to stop attempting
    to call\n   the user.  Moreover, if a legitimate caller believes the user is\n
    \  rejecting their calls in error, they can use other channels to\n   contact
    the user.  For example, if a pharmacy calls a user to let\n   them know their
    prescription is available for pickup and the user\n   mistakenly thinks the call
    is unwanted and issues a 607 response\n   code, the pharmacy, having an existing
    relationship with the\n   customer, can send the user an email or push a note
    to the pharmacist\n   to ask the customer to consider not rejecting their calls
    in the\n   future.\n   Many systems that allow the user to mark the call unwanted
    (e.g.,\n   with the 607 response code) also allow the user to change their mind\n
    \  and unmark such calls.  This mechanism is relatively easy to\n   implement
    as the user usually has a direct relationship with the\n   service provider that
    is blocking calls.\n   However, things become more complicated if an intermediary,
    such as a\n   third-party provider of call management services that classifies\n
    \  calls based on the relative likelihood that the call is unwanted,\n   misidentifies
    the call as unwanted.  Figure 3 shows this case.  Note\n   that the UAS typically
    does not receive an INVITE since the called\n   party proxy rejects the call on
    behalf of the user.  In this\n   situation, it would be beneficial for the caller
    to learn who\n   rejected the call so they can correct the misidentification.\n
    \                        | Called |         |   Call    |\n        +-----+          |
    Party  |         | Analytics |   +-----+\n        | UAC |          | Proxy  |
    \        |  Engine   |   | UAS |\n           |  INVITE         |                    |
    \           |\n           |                 | INVITE             |            |\n
    \          |            607  | -----------------> |            |\n                  Figure
    2: Unwanted (607) Ladder Diagram\n              +-----+    608     |  Called   |
    \          +-----+\n              | UAC | <--------- |  Party    |           |
    UAS |\n                     Figure 3: Rejected (608) Call Flow\n   In this situation,
    one might consider having the intermediary use the\n   607 response code. 607
    indicates to the caller that the subscriber\n   does not want the call.  However,
    [RFC8197] specifies that one of the\n   uses of 607 is to inform analytics engines
    that a user (human) has\n   rejected a call.  The problem here is that network
    elements\n   downstream from the intermediary might interpret the 607 as coming\n
    \  from a user (human) who has marked the call as unwanted, as opposed\n   to
    coming from an algorithm using statistics or machine learning to\n   reject the
    call.  An algorithm can be vulnerable to the base-rate\n   fallacy [BaseRate]
    rejecting the call.  In other words, those\n   downstream entities should not
    rely on another entity \"deciding\" the\n   call is unwanted.  By distinguishing
    between a (human) user rejection\n   and an intermediary engine's statistical
    rejection, a downstream\n   network element that sees a 607 response code can
    weigh it as a human\n   rejection in its call analytics, versus deciding whether
    to consider\n   a 608 at all, and if so, weighing it appropriately.\n   It is
    useful for blocked callers to have a redress mechanism.  One\n   can imagine that
    some jurisdictions will require it.  However, we\n   must be mindful that most
    of the calls that intermediaries block\n   will, in fact, be illegal and eligible
    for blocking.  Thus, providing\n   alternate contact information for a user would
    be counterproductive\n   to protecting that user from illegal communications.
    \ This is another\n   reason we do not propose to simply allow alternate contact\n
    \  information in a 607 response message.\n   Why do we not use the same mechanism
    an analytics service provider\n   offers their customers?  Specifically, why not
    have the analytics\n   service provider allow the called party to correct a call
    blocked in\n   error?  The reason is that while there is an existing relationship\n
    \  between the customer (called party) and the analytics service\n   provider,
    it is unlikely there is a relationship between the caller\n   and the analytics
    service provider.  Moreover, there are numerous\n   call blocking providers in
    the ecosystem.  Therefore, we need a\n   mechanism for indicating an intermediary
    rejected a call that also\n   provides contact information for the operator of
    that intermediary\n   without exposing the target user's contact information.\n
    \  The protocol described in this document uses existing SIP protocol\n   mechanisms
    for specifying the redress mechanism.  In the Call-Info\n   header field passed
    back to the UAC, we send additional information\n   specifying a redress address.
    \ We choose to encode the redress\n   address using jCard [RFC7095].  As we will
    see later in this\n   document, this information needs to have its own application-layer\n
    \  integrity protection.  Thus, we use jCard rather than vCard\n   [RFC6350],
    as we have a marshaling mechanism for creating a\n   JavaScript Object Notation
    (JSON) [RFC8259] object, such as a jCard,\n   and a standard integrity format
    for such an object, namely, JSON Web\n   Signature (JWS) [RFC7515].  The SIP community
    is familiar with this\n   concept as it is the mechanism used by STIR [RFC8224].\n
    \  Integrity protecting the jCard with a cryptographic signature might\n   seem
    unnecessary at first, but it is essential to preventing\n   potential network
    attacks.  Section 6 describes the attack and why we\n   sign the jCard in more
    detail.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n   capitals,
    as shown here.\n"
  title: 2.  Terminology
- contents:
  - "3.  Protocol Operation\n   This section uses the term \"intermediary\" to mean
    the entity that\n   acts as a SIP UAS on behalf of the user in the network as
    opposed to\n   the user's UAS (usually, but not necessarily, their phone).  The\n
    \  intermediary could be a back-to-back user agent (B2BUA) or a SIP\n   Proxy.\n
    \  Figure 4 shows an overview of the call flow for a rejected call.\n                         |
    Called |         |   Call    |\n        +-----+          | Party  |         |
    Analytics |   +-----+\n        | UAC |          | Proxy  |         |  Engine   |
    \  | UAS |\n           |  INVITE         |                    |            |\n
    \          |                 | INVITE             |            |\n           |
    \           607  | -----------------> |            |\n                  Figure
    4: Rejected (608) Ladder Diagram\n"
  - contents:
    - "3.1.  Intermediary Operation\n   An intermediary MAY issue the 608 response
      code in a failure response\n   for an INVITE, MESSAGE, SUBSCRIBE, or other out-of-dialog
      SIP\n   [RFC3261] request to indicate that an intermediary rejected the\n   offered
      communication as unwanted by the user.  An intermediary MAY\n   issue the 608
      as the value of the \"cause\" parameter of a SIP reason-\n   value in a Reason
      header field [RFC3326].\n   If an intermediary issues a 608 code and there are
      no indicators the\n   calling party will use the contents of the Call-Info header
      field for\n   malicious purposes (see Section 6), the intermediary MUST include
      a\n   Call-Info header field in the response.\n   If there is a Call-Info header
      field, it MUST have the \"purpose\"\n   parameter of \"jwscard\".  The value
      of the Call-Info header field MUST\n   refer to a valid JSON Web Signature (JWS)
      [RFC7515] encoding of a\n   jCard [RFC7095] object.  The following section describes
      the\n   construction of the JWS.\n   Proxies need to be mindful that a downstream
      intermediary may reject\n   the attempt with a 608 while other paths may still
      be in progress.\n   In this situation, the requirements stated in Section 16.7
      of\n   [RFC3261] apply.  Specifically, the proxy should cancel pending\n   transactions
      and must not create any new branches.  Note this is not\n   a new requirement
      but simply pointing out the existing 6xx protocol\n   mechanism in SIP.\n"
    title: 3.1.  Intermediary Operation
  - contents:
    - "3.2.  JWS Construction\n   The intermediary constructs the JWS of the jCard
      as follows.\n"
    - contents:
      - "3.2.1.  JOSE Header\n   The Javascript Object Signing and Encryption (JOSE)
        header MUST\n   include the typ, alg, and x5u parameters from JWS [RFC7515].
        \ The typ\n   parameter MUST have the value \"vcard+json\".  Implementations
        MUST\n   support ES256 as JSON Web Algorithms (JWA) [RFC7518] defines it and\n
        \  MAY support other registered signature algorithms.  Finally, the x5u\n
        \  parameter MUST be a URI that resolves to the public key certificate\n   corresponding
        to the key used to digitally sign the JWS.\n"
      title: 3.2.1.  JOSE Header
    - contents:
      - "3.2.2.  JWT Payload\n   The payload contains two JSON values.  The first
        JSON Web Token (JWT)\n   claim that MUST be present is the \"iat\" (issued
        at) claim [RFC7519].\n   The \"iat\" MUST be set to the date and time of the
        issuance of the 608\n   response.  This mandatory component protects the response
        from replay\n   attacks.\n   The second JWT claim that MUST be present is
        the \"jcard\" claim.  The\n   value of the jcard [RFC7095] claim is a JSON
        array conforming to the\n   JSON jCard data format defined in [RFC7095].  Section
        5.3 describes\n   the registration.  In the construction of the jcard claim,
        the\n   \"jcard\" MUST include at least one of the URL, EMAIL, TEL, or ADR\n
        \  properties.  UACs supporting this specification MUST be prepared to\n   receive
        a full jCard.  Call originators (at the UAC) can use the\n   information returned
        by the jCard to contact the intermediary that\n   rejected the call to appeal
        the intermediary's blocking of the call\n   attempt.  What the intermediary
        does if the blocked caller contacts\n   the intermediary is outside the scope
        of this document.\n"
      title: 3.2.2.  JWT Payload
    - contents:
      - "3.2.3.  JWS Signature\n   JWS [RFC7515] specifies the procedure for calculating
        the signature\n   over the jCard JWT.  Section 4 of this document has a detailed\n
        \  example on constructing the JWS, including the signature.\n"
      title: 3.2.3.  JWS Signature
    title: 3.2.  JWS Construction
  - contents:
    - "3.3.  UAC Operation\n   A UAC conforming to this specification MUST include
      the sip.608\n   feature-capability indicator in the Feature-Caps header field
      of the\n   INVITE request.\n   Upon receiving a 608 response, UACs perform normal
      SIP processing for\n   6xx responses.\n   As for the disposition of the jCard
      itself, the UAC MUST check the\n   \"iat\" claim in the JWT.  As noted in Section
      3.2.2, we are concerned\n   about replay attacks.  Therefore, the UAC MUST reject
      jCards that\n   come with an expired \"iat\".  The definition of \"expired\"
      is a matter\n   of local policy.  A reasonable value would be on the order of
      a\n   minute due to clock drift and the possibility of the playing of an\n   audio
      announcement before the delivery of the 608 response.\n"
    title: 3.3.  UAC Operation
  - contents:
    - "3.4.  Legacy Interoperation\n   If the UAC indicates support for 608 and the
      intermediary issues a\n   608, life is good, as the UAC will receive all the
      information it\n   needs to remediate an erroneous block by an intermediary.
      \ However,\n   what if the UAC does not understand 608?  For example, how can
      we\n   support callers from a legacy, non-SIP, public-switched network\n   connecting
      to the SIP network via a media gateway?\n   We address this situation by having
      the first network element that\n   conforms with this specification play an
      announcement.  See\n   Section 3.5 for requirements on the announcement.  The
      simple rule is\n   a network element that inserts the sip.608 feature capability
      MUST be\n   able to convey at a minimum how to contact the operator of the\n
      \  intermediary that rejected the call attempt.\n   The degenerate case is the
      intermediary is the only element that\n   understands the semantics of the 608
      response code.  Obviously, any\n   SIP device will understand that a 608 response
      code is a 6xx error.\n   However, there are no other elements in the call path
      that understand\n   the meaning of the value of the Call-Info header field.
      \ The\n   intermediary knows this is the case as the INVITE request will not\n
      \  have the sip.608 feature capability.  In this case, one can consider\n   the
      intermediary to be the element \"inserting\" a virtual sip.608\n   feature capability.
      \ If the caveats described in Sections 3.5 and 6\n   do not hold, the intermediary
      MUST play the announcement.\n   Now we take the case where a network element
      that understands the 608\n   response code receives an INVITE for further processing.
      \ A network\n   element conforming with this specification MUST insert the sip.608\n
      \  feature capability per the behaviors described in Section 4.2 of\n   [RFC6809].\n
      \  Do note that even if a network element plays an announcement\n   describing
      the contents of the 608 response message, the network\n   element MUST forward
      the 608 response code message as the final\n   response to the INVITE.\n   One
      aspect of using a feature capability is that only the network\n   elements that
      will either consume (UAC) or play an announcement\n   (media gateway, session
      border controller (SBC) [RFC7092], or proxy)\n   need to understand the sip.608
      feature capability.  If the other\n   network elements conform to Section 16.6
      of [RFC3261], they will pass\n   header fields such as \"Feature-Caps: *;+sip.608\"
      unmodified and\n   without need for upgrade.\n   Because the ultimate disposition
      of the call attempt will be a\n   600-class response, the network element conveying
      the announcement in\n   the legacy direction MUST use the 183 Session Progress
      response to\n   establish the media session.  Because of the small chance the
      UAC is\n   an extremely old legacy device and is using UDP, the UAC MUST include\n
      \  support for 100rel [RFC3262] in its INVITE, the network element\n   conveying
      the announcement MUST Require 100rel in the 183, and the\n   UAC MUST issue
      a Provisional Response ACKnowledgement (PRACK) to\n   which the network element
      MUST respond 200 OK PRACK.\n"
    title: 3.4.  Legacy Interoperation
  - contents:
    - "3.5.  Announcement Requirements\n   There are a few requirements on the element
      that handles the\n   announcement for legacy interoperation.\n   As noted above,
      the element that inserts the sip.608 feature\n   capability is responsible for
      conveying the information referenced by\n   the Call-Info header field in the
      608 response message.  However,\n   this specification does not mandate how
      to convey that information.\n   Let us take the case where a telecommunications
      service provider\n   controls the element inserting the sip.608 feature capability.
      \ It\n   would be reasonable to expect the service provider would play an\n
      \  announcement in the media path towards the UAC (caller).  It is\n   important
      to note the network element should be mindful of the media\n   type requested
      by the UAC as it formulates the announcement.  For\n   example, it would make
      sense for an INVITE that only indicated audio\n   codecs in the Session Description
      Protocol (SDP) [RFC4566] to result\n   in an audio announcement.  Likewise,
      if the INVITE only indicated\n   real-time text [RFC4103] and the network element
      can render the\n   information in the requested media format, the network element
      should\n   send the information in a text format.\n   It is also possible for
      the network element inserting the sip.608\n   feature capability to be under
      the control of the same entity that\n   controls the UAC.  For example, a large
      call center might have legacy\n   UACs, but have a modern outbound calling proxy
      that understands the\n   full semantics of the 608 response code.  In this case,
      it is enough\n   for the outbound calling proxy to digest the Call-Info information\n
      \  and handle the information digitally rather than \"transcoding\" the\n   Call-Info
      information for presentation to the caller.\n"
    title: 3.5.  Announcement Requirements
  title: 3.  Protocol Operation
- contents:
  - "4.  Examples\n   These examples are not normative, do not include all protocol\n
    \  elements, and may have errors.  Review the protocol documents for\n   actual
    syntax and semantics of the protocol elements.\n"
  - contents:
    - "4.1.  Full Exchange\n   Given an INVITE, shamelessly taken from [SHAKEN], with
      the line\n   breaks in the Identity header field for display purposes only:\n
      \  INVITE sip:+12155550113@tel.one.example.net SIP/2.0\n   Max-Forwards: 69\n
      \  Contact: <sip:+12155550112@[2001:db8::12]:50207;rinstance=9da3088f3>\n   To:
      <sip:+12155550113@tel.one.example.net>\n   From: \"Alice\" <sip:+12155550112@tel.two.example.net>;tag=614bdb40\n
      \  Call-ID: 79048YzkxNDA5NTI1MzA0OWFjOTFkMmFlODhiNTI2OWQ1ZTI\n   P-Asserted-Identity:
      \"Alice\"<sip:+12155550112@tel.two.example.net>,\n       <tel:+12155550112>\n
      \  CSeq: 2 INVITE\n   Allow: SUBSCRIBE, NOTIFY, INVITE, ACK, CANCEL, BYE, REFER,
      INFO,\n       MESSAGE, OPTIONS\n   Content-Type: application/sdp\n   Date: Tue,
      16 Aug 2016 19:23:38 GMT\n   Feature-Caps: *;+sip.608\n   Identity: eyJhbGciOiJFUzI1NiIsInR5cCI6InBhc3Nwb3J0IiwicHB0Ijoic2hha2V\n
      \  uIiwieDV1IjoiaHR0cDovL2NlcnQuZXhhbXBsZTIubmV0L2V4YW1wbGUuY2VydCJ9.eyJ\n   hdHRlc3QiOiJBIiwiZGVzdCI6eyJ0biI6IisxMjE1NTU1MDExMyJ9LCJpYXQiOiIxNDcx\n
      \  Mzc1NDE4Iiwib3JpZyI6eyJ0biI6IisxMjE1NTU1MDExMiJ9LCJvcmlnaWQiOiIxMjNlN\n   DU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2NTU0NDAwMCJ9.QAht_eFqQlaoVrnEV56Qly-OU\n
      \  tsDGifyCcpYjWcaR661Cz1hutFH2BzIlDswTahO7ujjqsWjeoOb4h97whTQJg;info=\n   <http://cert.example2.net/example.cert>;alg=ES256\n
      \  Content-Length: 153\n   v=0\n   o=- 13103070023943130 1 IN IP6 2001:db8::177\n
      \  c=IN IP6 2001:db8::177\n   t=0 0\n   m=audio 54242 RTP/AVP 0\n   a=sendrecv\n
      \  An intermediary could reply:\n   SIP/2.0 608 Rejected\n   Via: SIP/2.0/UDP
      [2001:db8::177]:60012;branch=z9hG4bK-524287-1\n   From: \"Alice\" <sip:+12155550112@tel.two.example.net>;tag=614bdb40\n
      \  To: <sip:+12155550113@tel.one.example.net>\n   Call-ID: 79048YzkxNDA5NTI1MzA0OWFjOTFkMmFlODhiNTI2OWQ1ZTI\n
      \  CSeq: 2 INVITE\n   Call-Info: <https://block.example.net/complaint-jws>;purpose=jwscard\n
      \  The location https://block.example.net/complaint-jws resolves to a\n   JWS.
      \ One would construct the JWS as follows.\n   The JWS header of this example
      jCard could be:\n   { \"alg\":\"ES256\",\n     \"typ\":\"vcard+json\",\n     \"x5u\":\"https://certs.example.net/reject_key.cer\"\n
      \  }\n   Now, let us construct a minimal jCard.  For this example, the jCard\n
      \  refers the caller to an email address,\n   remediation@blocker.example.net:\n
      \  [\"vcard\",\n     [\n       [\"version\", {}, \"text\", \"4.0\"],\n       [\"fn\",
      {}, \"text\", \"Robocall Adjudication\"],\n       [\"email\", {\"type\":\"work\"},
      \"text\",\n        \"remediation@blocker.example.net\"]\n     ]\n   ]\n   With
      this jCard, we can now construct the JWT:\n   {\n     \"iat\":1546008698,\n
      \    \"jcard\":[\"vcard\",\n       [\n         [\"version\", {}, \"text\", \"4.0\"],\n
      \        [\"fn\", {}, \"text\", \"Robocall Adjudication\"],\n         [\"email\",
      {\"type\":\"work\"},\n          \"text\", \"remediation@blocker.example.net\"]\n
      \      ]\n     ]\n   }\n   To calculate the signature, we need to encode the
      JSON Object Signing\n   and Encryption (JOSE) header and JWT into base64url.
      \ As an\n   implementation note, one can trim whitespace in the JSON objects
      to\n   save a few bytes.  UACs MUST be prepared to receive pretty-printed,\n
      \  compact, or bizarrely formatted JSON.  For the purposes of this\n   example,
      we leave the objects with pretty whitespace.  Speaking of\n   pretty vs. machine
      formatting, these examples have line breaks in the\n   base64url encodings for
      ease of publication in the RFC format.  The\n   specification of base64url allows
      for these line breaks, and the\n   decoded text works just fine.  However, those
      extra line-break octets\n   would affect the calculation of the signature.  Implementations
      MUST\n   NOT insert line breaks into the base64url encodings of the JOSE\n   header
      or JWT.  This also means UACs MUST be prepared to receive\n   arbitrarily long
      octet streams from the URI referenced by the Call-\n   Info header field.\n
      \  base64url of JOSE header:\n   eyJhbGciOiJFUzI1NiIsInR5cCI6InZjYXJkK2pzb24iLCJ4NXUiOiJodHRwczov\n
      \  L2NlcnRzLmV4YW1wbGUubmV0L3JlamVjdF9rZXkuY2VyIn0=\n   base64url of JWT:\n
      \  eyJpYXQiOjE1NDYwMDg2OTgsImpjYXJkIjpbInZjYXJkIixbWyJ2ZXJzaW9uIix7\n   fSwidGV4dCIsIjQuMCJdLFsiZm4iLHt9LCJ0ZXh0IiwiUm9ib2NhbGwgQWRqdWRp\n
      \  Y2F0aW9uIl0sWyJlbWFpbCIseyJ0eXBlIjoid29yayJ9LCJ0ZXh0IiwicmVtZWRp\n   YXRpb25AYmxvY2tlci5leGFtcGxlLm5ldCJdXV19\n
      \  In this case, the object to sign (remembering this is just a single\n   long
      line; the line breaks are for ease of review but do not appear\n   in the actual
      object) is as follows:\n   eyJhbGciOiJFUzI1NiIsInR5cCI6InZjYXJk\n   K2pzb24iLCJ4NXUiOiJodHRwczovL2NlcnRzLmV4YW1wbGUubmV0L3JlamVjdF9r\n
      \  ZXkuY2VyIn0.eyJpYXQiOjE1NDYwMDg2OTgsImpjYXJkIjpbInZjYXJkIixbWyJ2\n   ZXJzaW9uIix7fSwidGV4dCIsIjQuMCJdLFsiZm4iLHt9LCJ0ZXh0IiwiUm9ib2Nh\n
      \  bGwgQWRqdWRpY2F0aW9uIl0sWyJlbWFpbCIseyJ0eXBlIjoid29yayJ9LCJ0ZXh0\n   IiwicmVtZWRpYXRpb25AYmxvY2tlci5leGFtcGxlLm5ldCJdXV19\n
      \  We use the following X.509 PKCS #8-encoded Elliptic Curve Digital\n   Signature
      Algorithm (ECDSA) key, also shamelessly taken from\n   [SHAKEN], as an example
      key for signing the hash of the above text.\n   Do NOT use this key in real
      life!  It is for example purposes only.\n   At the very least, we would strongly
      recommend encrypting the key at\n   rest.\n   -----BEGIN PRIVATE KEY-----\n
      \  MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgi7q2TZvN9VDFg8Vy\n   qCP06bETrR2v8MRvr89rn4i+UAahRANCAAQWfaj1HUETpoNCrOtp9KA8o0V79IuW\n
      \  ARKt9C1cFPkyd3FBP4SeiNZxQhDrD0tdBHls3/wFe8++K2FrPyQF9vuh\n   -----END PRIVATE
      KEY-----\n   -----BEGIN PUBLIC KEY-----\n   MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE8HNbQd/TmvCKwPKHkMF9fScavGeH\n
      \  78YTU8qLS8I5HLHSSmlATLcslQMhNC/OhlWBYC626nIlo7XeebYS7Sb37g==\n   -----END
      PUBLIC KEY-----\n   The resulting JWS, using the above key on the above object,
      renders\n   the following ECDSA P-256 SHA-256 digital signature.\n   7uz2SADRvPFOQOO_UgF2ZTUjPlDTegtPrYB04UHBMwBD6g9AmL\n
      \  5harLJdTKDSTtH-LOV1jwJaGRUOUJiwP27ag\n   Thus, the JWS stored at https://blocker.example.net/complaints-jws\n
      \  would contain:\n   eyJhbGciOiJFUzI1NiIsInR5cCI6InZjYXJkK2pzb24iLCJ4NXUiOiJodHRwczovL\n
      \  2NlcnRzLmV4YW1wbGUubmV0L3JlamVjdF9rZXkuY2VyIn0.eyJpYXQiOjE1NDYwMD\n   g2OTgsImpjYXJkIjpbInZjYXJkIixbWyJ2ZXJzaW9uIix7fSwidGV4dCIsIjQuMCJ\n
      \  dLFsiZm4iLHt9LCJ0ZXh0IiwiUm9ib2NhbGwgQWRqdWRpY2F0aW9uIl0sWyJlbWFp\n   bCIseyJ0eXBlIjoid29yayJ9LCJ0ZXh0IiwicmVtZWRpYXRpb25AYmxvY2tlci5le\n
      \  GFtcGxlLm5ldCJdXV19.7uz2SADRvPFOQOO_UgF2ZTUjPlDTegtPrYB04UHBMwBD6\n   g9AmL5harLJdTKDSTtH-LOV1jwJaGRUOUJiwP27ag\n"
    title: 4.1.  Full Exchange
  - contents:
    - "4.2.  Web Site jCard\n   For an intermediary that provides a Web site for adjudication,
      the\n   jCard could contain the following.  Note that we do not show the\n   calculation
      of the JWS; the URI reference in the Call-Info header\n   field would be to
      the JWS of the signed jCard.\n   [\"vcard\",\n     [\n       [\"version\", {},
      \"text\", \"4.0\"],\n       [\"fn\", {}, \"text\", \"Robocall Adjudication\"],\n
      \      [\"url\", {\"type\":\"work\"},\n        \"text\", \"https://blocker.example.net/adjudication-form\"]\n
      \    ]\n   ]\n"
    title: 4.2.  Web Site jCard
  - contents:
    - "4.3.  Multi-modal jCard\n   For an intermediary that provides a telephone number
      and a postal\n   address, the jCard could contain the following.  Note that
      we do not\n   show the calculation of the JWS; the URI reference in the Call-Info\n
      \  header field would be to the JWS of the signed jCard.\n   [\"vcard\",\n     [\n
      \      [\"version\", {}, \"text\", \"4.0\"],\n       [\"fn\", {}, \"text\",
      \"Robocall Adjudication\"],\n       [\"adr\", {\"type\":\"work\"}, \"text\",\n
      \        [\"Argument Clinic\",\n          \"12 Main St\",\"Anytown\",\"AP\",\"000000\",\"Somecountry\"]\n
      \      ]\n       [\"tel\", {\"type\":\"work\"}, \"uri\", \"tel:+1-555-555-0112\"]\n
      \    ]\n   ]\n   Note that it is up to the UAC to decide which jCard contact
      modality,\n   if any, it will use.\n"
    title: 4.3.  Multi-modal jCard
  - contents:
    - "4.4.  Legacy Interoperability\n   Figure 5 depicts a call flow illustrating
      legacy interoperability.\n   In this non-normative example, we see a UAC that
      does not support the\n   full semantics for 608.  However, there is an SBC that
      does support\n   608.  Per [RFC6809], the SBC can insert \"*;+sip.608\" into
      the\n   Feature-Caps header field for the INVITE.  When the intermediary,\n
      \  labeled \"Called Party Proxy\" in the figure, rejects the call, it\n   knows
      it can simply perform the processing described in this\n   document.  Since
      the intermediary saw the sip.608 feature capability,\n   it knows it does not
      need to send any media describing whom to\n   contact in the event of an erroneous
      rejection.  For illustrative\n   purposes, the figure shows generic SIP Proxies
      in the flow.  Their\n   presence or absence or the number of proxies is not
      relevant to the\n   operation of the protocol.  They are in the figure to show
      that\n   proxies that do not understand the sip.608 feature capability can\n
      \  still participate in a network offering 608 services.\n         |UAC+----+Proxy+----+SBC+----+Proxy+----+Proxy+----+Party
      |\n           | INVITE            |                               |\n           |
      \              183 |              Call-Info: <...> |\n           |     SDP for
      media |     for illustration purposes]|\n           | PRACK             |                               |\n
      \          |      200 OK PRACK |                               |\n           |<==
      Announcement ==|                               |\n           |      608 Rejected
      |                               |\n           |  Call-Info: <...> |                               |\n
      \                        Figure 5: Legacy Operation\n   When the SBC receives
      the 608 response code, it correlates that with\n   the original INVITE from
      the UAC.  The SBC remembers that it inserted\n   the sip.608 feature capability,
      which means it is responsible for\n   somehow alerting the UAC the call failed
      and disclosing whom to\n   contact.  At this point, the SBC can play a prompt,
      either natively\n   or through a mechanism such as NETANN [RFC4240], that sends
      the\n   relevant information in the appropriate media to the UAC.  Since this\n
      \  is a potentially long transaction and there is a chance the UAC is\n   using
      an unreliable transport protocol, the UAC will have indicated\n   support for
      provisional responses, the SBC will indicate it requires\n   a PRACK from the
      UAC in the 183 response, the UAC will provide the\n   PRACK, and the SBC will
      acknowledge receipt of the PRACK before\n   playing the announcement.\n   As
      an example, the SBC could extract the FN and TEL jCard fields and\n   play something
      like a special information tone (see Section 6.21.2.1\n   of Telcordia [SR-2275]
      or Section 7 of ITU-T E.180 [ITU.E.180.1998]),\n   followed by \"Your call has
      been rejected by...\", followed by a text-\n   to-speech translation of the
      FN text, followed by \"You can reach them\n   on...\", followed by a text-to-speech
      translation of the telephone\n   number in the TEL field.\n   Note that the
      SBC also still sends the full 608 response code,\n   including the Call-Info
      header field, towards the UAC.\n"
    title: 4.4.  Legacy Interoperability
  title: 4.  Examples
- contents:
  - '5.  IANA Considerations

    '
  - contents:
    - "5.1.  SIP Response Code\n   This document defines a new SIP response code,
      608, in the \"Response\n   Codes\" subregistry of the \"Session Initiation Protocol
      (SIP)\n   Parameters\" registry defined in [RFC3261].\n   Response code:    608\n
      \  Description:      Rejected\n   Reference:        RFC 8688\n"
    title: 5.1.  SIP Response Code
  - contents:
    - "5.2.  SIP Feature-Capability Indicator\n   This document defines the feature
      capability, sip.608, in the \"SIP\n   Feature-Capability Indicator Registration
      Tree\" registry defined in\n   [RFC6809].\n   Name:         sip.608\n   Description:
      \ This feature-capability indicator, when included in a\n                 Feature-Caps
      header field of an INVITE request,\n                 indicates that the entity
      associated with the indicator\n                 will be responsible for indicating
      to the caller any\n                 information contained in the 608 SIP response
      code,\n                 specifically, the value referenced by the Call-Info\n
      \                header field.\n   Reference:    RFC 8688\n"
    title: 5.2.  SIP Feature-Capability Indicator
  - contents:
    - "5.3.  JSON Web Token Claim\n   This document defines the new JSON Web Token
      claim in the \"JSON Web\n   Token Claims\" subregistry created by [RFC7519].
      \ Section 3.2.2\n   defines the syntax.  The required information is:\n   Claim
      Name:         jcard\n   Claim Description:  jCard data\n   Change Controller:
      \ IESG\n   Reference:          RFC 8688, [RFC7095]\n"
    title: 5.3.  JSON Web Token Claim
  - contents:
    - "5.4.  Call-Info Purpose\n   This document defines the new predefined value
      \"jwscard\" for the\n   \"purpose\" header field parameter of the Call-Info
      header field.  This\n   modifies the \"Header Field Parameters and Parameter
      Values\"\n   subregistry of the \"Session Initiation Protocol (SIP) Parameters\"\n
      \  registry by adding this RFC as a reference to the line for the header\n   field
      \"Call-Info\" and parameter name \"purpose\":\n   Header Field:       Call-Info\n
      \  Parameter Name:     purpose\n   Predefined Values:  Yes\n   Reference:          RFC
      8688\n"
    title: 5.4.  Call-Info Purpose
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   Intermediary operators need to be mindful to
    whom they are sending\n   the 608 response.  The intermediary could be rejecting
    a truly\n   malicious caller.  This raises two issues.  The first is the caller,\n
    \  now alerted that an intermediary is automatically rejecting their\n   call
    attempts, may change their call behavior to defeat call-blocking\n   systems.
    \ The second, and more significant risk, is that by providing\n   a contact in
    the Call-Info header field, the intermediary may be\n   giving the malicious caller
    a vector for attack.  In other words, the\n   intermediary will be publishing
    an address that a malicious actor may\n   use to launch an attack on the intermediary.
    \ Because of this,\n   intermediary operators may wish to configure their response
    to only\n   include a Call-Info header field for INVITE, or other signed\n   initiating
    methods, that pass validation by STIR [RFC8224].\n   Another risk is as follows.
    \ Consider an attacker that floods a proxy\n   that supports the sip.608 feature.
    \ However, the SDP in the INVITE\n   request refers to a victim device.  Moreover,
    the attacker somehow\n   knows there is a 608-aware gateway connecting to the
    victim who is on\n   a segment that lacks the sip.608 feature capability.  Because
    the\n   mechanism described here can result in sending an audio file to the\n
    \  target of the SDP, an attacker could use the mechanism described by\n   this
    document as an amplification attack, given a SIP INVITE can be\n   under 1 kilobyte
    and an audio file can be hundreds of kilobytes.  One\n   remediation for this
    is for devices that insert a sip.608 feature\n   capability to only transmit media
    to what is highly likely to be the\n   actual source of the call attempt.  A method
    for this is to only play\n   media in response to a STIR-signed INVITE that passes
    validation.\n   Beyond requiring a valid STIR signature on the INVITE, the\n   intermediary
    can also use remediation procedures such as doing the\n   connectivity checks
    specified by Interactive Connectivity\n   Establishment [RFC8445].  If the target
    did not request the media,\n   the check will fail.\n   Yet another risk is a
    malicious intermediary that generates a\n   malicious 608 response with a jCard
    referring to a malicious agent.\n   For example, the recipient of a 608 may receive
    a TEL URI in the\n   vCard.  When the recipient calls that address, the malicious
    agent\n   could ask for personally identifying information.  However, instead\n
    \  of using that information to verify the recipient's identity, they\n   are
    phishing the information for nefarious ends.  A similar scenario\n   can unfold
    if the malicious agent inserts a URI that points to a\n   phishing or other site.
    \ As such, we strongly recommend the recipient\n   validates to whom they are
    communicating with if asking to adjudicate\n   an erroneously rejected call attempt.
    \ Since we may also be concerned\n   about intermediate nodes modifying contact
    information, we can\n   address both issues with a single solution.  The remediation
    is to\n   require the intermediary to sign the jCard.  Signing the jCard\n   provides
    integrity protection.  In addition, one can imagine\n   mechanisms such as used
    by [SHAKEN].\n   Similarly, one can imagine an adverse agent that maliciously
    spoofs a\n   608 response with a victim's contact address to many active callers\n
    \  who may then all send redress requests to the specified address (the\n   basis
    for a denial-of-service attack).  The process would occur as\n   follows: (1)
    a malicious agent senses INVITE requests from a variety\n   of UACs and (2) spoofs
    608 responses with an unsigned redress address\n   before the intended receivers
    can respond, causing (3) the UACs to\n   all contact the redress address at once.
    \ The jCard encoding allows\n   the UAC to verify the blocking intermediary's
    identity before\n   contacting the redress address.  Specifically, because the
    sender\n   signs the jCard, we can cryptographically trace the sender of the\n
    \  jCard.  Given the protocol machinery of having a signature, one can\n   apply
    local policy to decide whether to believe that the sender of\n   the jCard represents
    the owner of the contact information found in\n   the jCard.  This guards against
    a malicious agent spoofing 608\n   responses.\n   Specifically, one could use
    policies around signing certificate\n   issuance as a mechanism for traceback
    to the entity issuing the\n   jCard.  One check could be verifying that the identity
    of the subject\n   of the certificate relates to the To header field of the initial
    SIP\n   request, similar to validating that the intermediary was vouching for\n
    \  the From header field of a SIP request with that identity.  Note that\n   we
    are only protecting against a malicious intermediary and not a\n   hidden intermediary
    attack (formerly known as a \"man-in-the-middle\n   attack\").  Thus, we only
    need to ensure the signature is fresh, which\n   is why we include \"iat\".  For
    most implementations, we assume that\n   the intermediary has a single set of
    contact points and will generate\n   the jCard on demand.  As such, there is no
    need to directly correlate\n   HTTPS fetches to specific calls.  However, since
    the intermediary is\n   in control of the jCard and Call-Info response, an intermediary
    may\n   choose to encode per-call information in the URI returned in a given\n
    \  608 response.  However, if the intermediary does go that route, the\n   intermediary
    MUST use a non-deterministic URI reference mechanism and\n   be prepared to return
    dummy responses to URI requests referencing\n   calls that do not exist so that
    attackers attempting to glean call\n   metadata by guessing URIs (and thus calls)
    will not get any\n   actionable information from the HTTPS GET.\n   Since the
    decision of whether to include Call-Info in the 608\n   response is a matter of
    policy, one thing to consider is whether a\n   legitimate caller can ascertain
    whom to contact without including\n   such information in the 608.  For example,
    in some jurisdictions, if\n   only the terminating service provider can be the
    intermediary, the\n   caller can look up who the terminating service provider
    is based on\n   the routing information for the dialed number.  Thus, the Call-Info\n
    \  jCard could be redundant information.  However, the factors going\n   into
    a particular service provider's or jurisdiction's choice of\n   whether to include
    Call-Info is outside the scope of this document.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,
      Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:
      Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,
      June 2002,\n              <https://www.rfc-editor.org/info/rfc3261>.\n   [RFC3262]
      \ Rosenberg, J. and H. Schulzrinne, \"Reliability of\n              Provisional
      Responses in Session Initiation Protocol\n              (SIP)\", RFC 3262, DOI
      10.17487/RFC3262, June 2002,\n              <https://www.rfc-editor.org/info/rfc3262>.\n
      \  [RFC3326]  Schulzrinne, H., Oran, D., and G. Camarillo, \"The Reason\n              Header
      Field for the Session Initiation Protocol (SIP)\",\n              RFC 3326,
      DOI 10.17487/RFC3326, December 2002,\n              <https://www.rfc-editor.org/info/rfc3326>.\n
      \  [RFC6809]  Holmberg, C., Sedlacek, I., and H. Kaplan, \"Mechanism to\n              Indicate
      Support of Features and Capabilities in the\n              Session Initiation
      Protocol (SIP)\", RFC 6809,\n              DOI 10.17487/RFC6809, November 2012,\n
      \             <https://www.rfc-editor.org/info/rfc6809>.\n   [RFC7095]  Kewisch,
      P., \"jCard: The JSON Format for vCard\", RFC 7095,\n              DOI 10.17487/RFC7095,
      January 2014,\n              <https://www.rfc-editor.org/info/rfc7095>.\n   [RFC7515]
      \ Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n              Signature
      (JWS)\", RFC 7515, DOI 10.17487/RFC7515, May\n              2015, <https://www.rfc-editor.org/info/rfc7515>.\n
      \  [RFC7518]  Jones, M., \"JSON Web Algorithms (JWA)\", RFC 7518,\n              DOI
      10.17487/RFC7518, May 2015,\n              <https://www.rfc-editor.org/info/rfc7518>.\n
      \  [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n              (JWT)\",
      RFC 7519, DOI 10.17487/RFC7519, May 2015,\n              <https://www.rfc-editor.org/info/rfc7519>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [BaseRate] Bar-Hillel, M., \"The Base-Rate
      Fallacy in Probability\n              Judgements\", April 1977,\n              <https://apps.dtic.mil/docs/citations/ADA045772>.\n
      \  [ITU.E.180.1998]\n              ITU-T, \"Technical characteristics of tones
      for the\n              telephone service\", ITU-T Recommendation E.180/Q.35,
      March\n              1998.\n   [RFC4103]  Hellstrom, G. and P. Jones, \"RTP
      Payload for Text\n              Conversation\", RFC 4103, DOI 10.17487/RFC4103,
      June 2005,\n              <https://www.rfc-editor.org/info/rfc4103>.\n   [RFC4240]
      \ Burger, E., Ed., Van Dyke, J., and A. Spitzer, \"Basic\n              Network
      Media Services with SIP\", RFC 4240,\n              DOI 10.17487/RFC4240, December
      2005,\n              <https://www.rfc-editor.org/info/rfc4240>.\n   [RFC4566]
      \ Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description
      Protocol\", RFC 4566, DOI 10.17487/RFC4566,\n              July 2006, <https://www.rfc-editor.org/info/rfc4566>.\n
      \  [RFC5039]  Rosenberg, J. and C. Jennings, \"The Session Initiation\n              Protocol
      (SIP) and Spam\", RFC 5039, DOI 10.17487/RFC5039,\n              January 2008,
      <https://www.rfc-editor.org/info/rfc5039>.\n   [RFC6350]  Perreault, S., \"vCard
      Format Specification\", RFC 6350,\n              DOI 10.17487/RFC6350, August
      2011,\n              <https://www.rfc-editor.org/info/rfc6350>.\n   [RFC7092]
      \ Kaplan, H. and V. Pascual, \"A Taxonomy of Session\n              Initiation
      Protocol (SIP) Back-to-Back User Agents\",\n              RFC 7092, DOI 10.17487/RFC7092,
      December 2013,\n              <https://www.rfc-editor.org/info/rfc7092>.\n   [RFC7340]
      \ Peterson, J., Schulzrinne, H., and H. Tschofenig, \"Secure\n              Telephone
      Identity Problem Statement and Requirements\",\n              RFC 7340, DOI
      10.17487/RFC7340, September 2014,\n              <https://www.rfc-editor.org/info/rfc7340>.\n
      \  [RFC8197]  Schulzrinne, H., \"A SIP Response Code for Unwanted Calls\",\n
      \             RFC 8197, DOI 10.17487/RFC8197, July 2017,\n              <https://www.rfc-editor.org/info/rfc8197>.\n
      \  [RFC8224]  Peterson, J., Jennings, C., Rescorla, E., and C. Wendt,\n              \"Authenticated
      Identity Management in the Session\n              Initiation Protocol (SIP)\",
      RFC 8224,\n              DOI 10.17487/RFC8224, February 2018,\n              <https://www.rfc-editor.org/info/rfc8224>.\n
      \  [RFC8259]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n
      \             Interchange Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259,
      December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n   [RFC8445]
      \ Keranen, A., Holmberg, C., and J. Rosenberg, \"Interactive\n              Connectivity
      Establishment (ICE): A Protocol for Network\n              Address Translator
      (NAT) Traversal\", RFC 8445,\n              DOI 10.17487/RFC8445, July 2018,\n
      \             <https://www.rfc-editor.org/info/rfc8445>.\n   [SHAKEN]   ATIS/SIP
      Forum IP-INNI Task Group, \"Signature-based\n              Handling of Asserted
      information using toKENs (SHAKEN)\",\n              ATIS 1000074, January 2017,\n
      \             <https://www.sipforum.org/download/sip-forum-twg-10-\n              signature-based-handling-of-asserted-information-using-\n
      \             tokens-shaken-pdf/?wpdmdl=2813>.\n   [SR-2275]  Telcordia, \"Telcordia
      Notes on the Networks\", Telcordia \n              SR-2275, October 2000.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgements\n   This document liberally lifts from [RFC8197] in its text
    and\n   structure.  However, the mechanism and purpose of 608 is quite\n   different
    than 607.  Any errors are the current editor's and not the\n   editor of RFC 8197.
    \ Thanks also go to Ken Carlberg of the FCC, Russ\n   Housley, Paul Kyzivat, and
    Tolga Asveren for their suggestions on\n   improving the document.  Tolga's suggestion
    to provide a mechanism\n   for legacy interoperability served to expand the document
    by 50%. In\n   addition, Tolga came up with the jCard attack.  Finally, Christer\n
    \  Holmberg, as always, provided a close reading and fixed a SIP\n   feature-capability
    bug found by Yehoshua Gev.\n   Of course, we appreciated the close read and five
    pages of comments\n   from our estimable Area Director, Adam Roach.  In addition,
    we\n   received valuable comments during IETF Last Call and JWT review from\n
    \  Ines Robles, Mike Jones, and Brian Campbell, and IESG review from\n   Alissa
    Cooper, Eric Vyncke, Alexey Melnikov, Benjamin Kaduk, Barry\n   Leiba, and with
    most glee, Warren Kumari.\n   Finally, Bhavik Nagda provided clarifying edits
    as well and, more\n   especially, wrote and tested an implementation of the 608
    response\n   code in Kamailio.  Code is available at https://github.com/\n   nagdab/608_Implementation.
    \ Grace Chuan from MIT regenerated and\n   verified the JWT while working at the
    FCC.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Eric W. Burger\n   Georgetown University\n   37th & O
    St, NW\n   Washington, DC 20057\n   United States of America\n   Email: eburger@standardstrack.com\n
    \  Bhavik Nagda\n   Massachusetts Institute of Technology\n   77 Massachusetts
    Avenue\n   Cambridge, MA 02139\n"
  title: Authors' Addresses
