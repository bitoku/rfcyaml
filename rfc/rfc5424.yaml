- contents:
  - '                          The Syslog Protocol

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n   This document may contain material
    from IETF Documents or IETF\n   Contributions published or made publicly available
    before November\n   10, 2008.  The person(s) controlling the copyright in some
    of this\n   material may not have granted the IETF Trust the right to allow\n
    \  modifications of such material outside the IETF Standards Process.\n   Without
    obtaining an adequate license from the person(s) controlling\n   the copyright
    in such materials, this document may not be modified\n   outside the IETF Standards
    Process, and derivative works of it may\n   not be created outside the IETF Standards
    Process, except to format\n   it for publication as an RFC or to translate it
    into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes the syslog protocol, which is used to convey\n
    \  event notification messages.  This protocol utilizes a layered\n   architecture,
    which allows the use of any number of transport\n   protocols for transmission
    of syslog messages.  It also provides a\n   message format that allows vendor-specific
    extensions to be provided\n   in a structured way.\n   This document has been
    written with the original design goals for\n   traditional syslog in mind.  The
    need for a new layered specification\n   has arisen because standardization efforts
    for reliable and secure\n   syslog extensions suffer from the lack of a Standards-Track
    and\n   transport-independent RFC.  Without this document, each other\n   standard
    needs to define its own syslog packet format and transport\n   mechanism, which
    over time will introduce subtle compatibility\n   issues.  This document tries
    to provide a foundation that syslog\n   extensions can build on.  This layered
    architecture approach also\n   provides a solid basis that allows code to be written
    once for each\n   syslog feature rather than once for each transport.\n   This
    document obsoletes RFC 3164.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \  2. Conventions Used in This Document ...............................4\n   3.
    Definitions .....................................................4\n   4. Basic
    Principles ................................................5\n      4.1. Example
    Deployment Scenarios ...............................6\n   5. Transport Layer Protocol
    ........................................7\n      5.1. Minimum Required Transport
    Mapping .........................7\n   6. Syslog Message Format ...........................................8\n
    \     6.1. Message Length .............................................9\n      6.2.
    HEADER .....................................................9\n           6.2.1.
    PRI .................................................9\n           6.2.2. VERSION
    ............................................11\n           6.2.3. TIMESTAMP ..........................................11\n
    \          6.2.4. HOSTNAME ...........................................13\n           6.2.5.
    APP-NAME ...........................................14\n           6.2.6. PROCID
    .............................................14\n           6.2.7. MSGID ..............................................14\n
    \     6.3. STRUCTURED-DATA ...........................................15\n           6.3.1.
    SD-ELEMENT .........................................15\n           6.3.2. SD-ID
    ..............................................15\n           6.3.3. SD-PARAM ...........................................16\n
    \          6.3.4. Change Control .....................................17\n           6.3.5.
    Examples ...........................................17\n      6.4. MSG .......................................................18\n
    \     6.5. Examples ..................................................19\n   7.
    Structured Data IDs ............................................20\n      7.1.
    timeQuality ...............................................20\n           7.1.1.
    tzKnown ............................................21\n           7.1.2. isSynced
    ...........................................21\n           7.1.3. syncAccuracy
    .......................................21\n           7.1.4. Examples ...........................................21\n
    \     7.2. origin ....................................................22\n           7.2.1.
    ip .................................................22\n           7.2.2. enterpriseId
    .......................................22\n           7.2.3. software ...........................................23\n
    \          7.2.4. swVersion ..........................................23\n           7.2.5.
    Example ............................................23\n      7.3. meta ......................................................24\n
    \          7.3.1. sequenceId .........................................24\n           7.3.2.
    sysUpTime ..........................................24\n           7.3.3. language
    ...........................................24\n   8. Security Considerations ........................................24\n
    \     8.1. UNICODE ...................................................24\n      8.2.
    Control Characters ........................................25\n      8.3. Message
    Truncation ........................................26\n      8.4. Replay ....................................................26\n
    \     8.5. Reliable Delivery .........................................26\n      8.6.
    Congestion Control ........................................27\n      8.7. Message
    Integrity .........................................28\n      8.8. Message Observation
    .......................................28\n      8.9. Inappropriate Configuration
    ...............................28\n      8.10. Forwarding Loop ..........................................29\n
    \     8.11. Load Considerations ......................................29\n      8.12.
    Denial of Service ........................................29\n   9. IANA Considerations
    ............................................30\n      9.1. VERSION ...................................................30\n
    \     9.2. SD-IDs ....................................................30\n   10.
    Working Group .................................................31\n   11. Acknowledgments
    ...............................................31\n   12. References ....................................................32\n
    \     12.1. Normative References .....................................32\n      12.2.
    Informative References ...................................33\n   Appendix A.  Implementer
    Guidelines ...............................34\n     A.1.  Relationship with BSD
    Syslog ..............................34\n     A.2.  Message Length ............................................35\n
    \    A.3.  Severity Values  ..........................................36\n     A.4.
    \ TIME-SECFRAC Precision ....................................36\n     A.5.  Case
    Convention for Names  ................................36\n     A.6.  Syslog Applications
    Without Knowledge of Time  ............37\n     A.7.  Notes on the timeQuality
    SD-ID ............................37\n     A.8.  UTF-8 Encoding and the BOM ................................37\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes a layered architecture for syslog.
    \ The goal\n   of this architecture is to separate message content from message\n
    \  transport while enabling easy extensibility for each layer.\n   This document
    describes the standard format for syslog messages and\n   outlines the concept
    of transport mappings.  It also describes\n   structured data elements, which
    can be used to transmit easily\n   parseable, structured information, and allows
    for vendor extensions.\n   This document does not describe any storage format
    for syslog\n   messages.  It is beyond of the scope of the syslog protocol and
    is\n   unnecessary for system interoperability.\n   This document has been written
    with the original design goals for\n   traditional syslog in mind.  The need for
    a new layered specification\n   has arisen because standardization efforts for
    reliable and secure\n   syslog extensions suffer from the lack of a Standards-Track
    and\n   transport-independent RFC.  Without this document, each other\n   standard
    would need to define its own syslog packet format and\n   transport mechanism,
    which over time will introduce subtle\n   compatibility issues.  This document
    tries to provide a foundation\n   that syslog extensions can build on.  This layered
    architecture\n   approach also provides a solid basis that allows code to be written\n
    \  once for each syslog feature instead of once for each transport.\n   This document
    obsoletes RFC 3164, which is an Informational document\n   describing some implementations
    found in the field.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in RFC 2119 [RFC2119].\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Definitions\n   Syslog utilizes three layers:\n   o  \"syslog content\" is
    the management information contained in a\n      syslog message.\n   o  The \"syslog
    application\" layer handles generation, interpretation,\n      routing, and storage
    of syslog messages.\n   o  The \"syslog transport\" layer puts messages on the
    wire and takes\n      them off the wire.\n   Certain types of functions are performed
    at each conceptual layer:\n   o  An \"originator\" generates syslog content to
    be carried in a\n      message.\n   o  A \"collector\" gathers syslog content
    for further analysis.\n   o  A \"relay\" forwards messages, accepting messages
    from originators\n      or other relays and sending them to collectors or other
    relays.\n   o  A \"transport sender\" passes syslog messages to a specific\n      transport
    protocol.\n   o  A \"transport receiver\" takes syslog messages from a specific\n
    \     transport protocol.\n   Diagram 1 shows the different entities separated
    by layer.\n +---------------------+    +---------------------+\n |  content            |
    \   |  content            |\n |---------------------|    |---------------------|\n
    |  syslog application |    |  syslog application | (originator,\n |                     |
    \   |                     |  collector, relay)\n |---------------------|    |---------------------|\n
    |  syslog transport   |    |  syslog transport   | (transport sender,\n |                     |
    \   |                     | (transport receiver)\n +---------------------+    +---------------------+\n
    \          ^                          ^\n           |                          |\n
    \           --------------------------\n   Diagram 1.  Syslog Layers\n"
  title: 3.  Definitions
- contents:
  - "4.  Basic Principles\n   The following principles apply to syslog communication:\n
    \  o  The syslog protocol does not provide acknowledgment of message\n      delivery.
    \ Though some transports may provide status information,\n      conceptually,
    syslog is a pure simplex communications protocol.\n   o  Originators and relays
    may be configured to send the same message\n      to multiple collectors and relays.\n
    \  o  Originator, relay, and collector functionality may reside on the\n      same
    system.\n"
  - contents:
    - "4.1.  Example Deployment Scenarios\n   Sample deployment scenarios are shown
      in Diagram 2.  Other\n   arrangements of these examples are also acceptable.
      \ As noted, in the\n   following diagram, relays may send all or some of the
      messages that\n   they receive and also send messages that they generate internally.\n
      \  The boxes represent syslog-enabled applications.\n            +----------+
      \        +---------+\n            |Originator|---->----|Collector|\n            +----------+
      \        +---------+\n            +----------+         +-----+         +---------+\n
      \           |Originator|---->----|Relay|---->----|Collector|\n            +----------+
      \        +-----+         +---------+\n            +----------+     +-----+            +-----+
      \    +---------+\n            |Originator|-->--|Relay|-->--..-->--|Relay|-->--|Collector|\n
      \           +----------+     +-----+            +-----+     +---------+\n            +----------+
      \        +-----+         +---------+\n            |Originator|---->----|Relay|---->----|Collector|\n
      \           |          |-+       +-----+         +---------+\n            +----------+
      \ \\\n                           \\     +-----+         +---------+\n                            +->--|Relay|---->----|Collector|\n
      \                                +-----+         +---------+\n            +----------+
      \        +---------+\n            |Originator|---->----|Collector|\n            |
      \         |-+       +---------+\n            +----------+  \\\n                           \\
      \    +-----+         +---------+\n                            +->--|Relay|---->----|Collector|\n
      \                                +-----+         +---------+\n            +----------+
      \        +-----+            +---------+\n            |Originator|---->----|Relay|---->-------|Collector|\n
      \           |          |-+       +-----+        +---|         |\n            +----------+
      \ \\                    /    +---------+\n                           \\     +-----+
      \     /\n                            +->--|Relay|-->--/\n                                 +-----+\n
      \           +----------+         +-----+                   +---------+\n            |Originator|---->----|Relay|---->--------------|Collector|\n
      \           |          |-+       +-----+                +--|         |\n            +----------+
      \ \\                            /   +---------+\n                           \\
      \    +------------+       /\n                            \\    |+----------+|
      \     /\n                             +->-||Relay     ||->---/\n                                 |+----------||
      \   /\n                                 ||Originator||->-/\n                                 |+----------+|\n
      \                                +------------+\n   Diagram 2.  Some Possible
      Syslog Deployment Scenarios\n"
    title: 4.1.  Example Deployment Scenarios
  title: 4.  Basic Principles
- contents:
  - "5.  Transport Layer Protocol\n   This document does not specify any transport
    layer protocol.\n   Instead, it describes the format of a syslog message in a
    transport\n   layer independent way.  Syslog transports are defined in other\n
    \  documents.  One such transport is defined in [RFC5426] and is\n   consistent
    with the traditional UDP transport.  This transport is\n   needed to maintain
    interoperability as the UDP transport has\n   historically been used for the transmission
    of syslog messages.\n   Any syslog transport protocol MUST NOT deliberately alter
    the syslog\n   message.  If the transport protocol needs to perform temporary\n
    \  transformations at the transport sender, these transformations MUST\n   be
    reversed by the transport protocol at the transport receiver so\n   that the relay
    or collector will see an exact copy of the message\n   generated by the originator
    or relay.  Otherwise, end-to-end\n   cryptographic verifiers (such as signatures)
    will be broken.  Of\n   course, message alteration might occur due to transmission
    errors or\n   other problems.  Guarding against such alterations is not within
    the\n   scope of this document.\n"
  - contents:
    - "5.1.  Minimum Required Transport Mapping\n   All implementations of this specification
      MUST support a TLS-based\n   transport as described in [RFC5425].\n   All implementations
      of this specification SHOULD also support a\n   UDP-based transport as described
      in [RFC5426].\n   It is RECOMMENDED that deployments of this specification use
      the TLS-\n   based transport.\n"
    title: 5.1.  Minimum Required Transport Mapping
  title: 5.  Transport Layer Protocol
- contents:
  - "6.  Syslog Message Format\n   The syslog message has the following ABNF [RFC5234]
    definition:\n      SYSLOG-MSG      = HEADER SP STRUCTURED-DATA [SP MSG]\n      HEADER
    \         = PRI VERSION SP TIMESTAMP SP HOSTNAME\n                        SP APP-NAME
    SP PROCID SP MSGID\n      PRI             = \"<\" PRIVAL \">\"\n      PRIVAL          =
    1*3DIGIT ; range 0 .. 191\n      VERSION         = NONZERO-DIGIT 0*2DIGIT\n      HOSTNAME
    \       = NILVALUE / 1*255PRINTUSASCII\n      APP-NAME        = NILVALUE / 1*48PRINTUSASCII\n
    \     PROCID          = NILVALUE / 1*128PRINTUSASCII\n      MSGID           =
    NILVALUE / 1*32PRINTUSASCII\n      TIMESTAMP       = NILVALUE / FULL-DATE \"T\"
    FULL-TIME\n      FULL-DATE       = DATE-FULLYEAR \"-\" DATE-MONTH \"-\" DATE-MDAY\n
    \     DATE-FULLYEAR   = 4DIGIT\n      DATE-MONTH      = 2DIGIT  ; 01-12\n      DATE-MDAY
    \      = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n                                ;
    month/year\n      FULL-TIME       = PARTIAL-TIME TIME-OFFSET\n      PARTIAL-TIME
    \   = TIME-HOUR \":\" TIME-MINUTE \":\" TIME-SECOND\n                        [TIME-SECFRAC]\n
    \     TIME-HOUR       = 2DIGIT  ; 00-23\n      TIME-MINUTE     = 2DIGIT  ; 00-59\n
    \     TIME-SECOND     = 2DIGIT  ; 00-59\n      TIME-SECFRAC    = \".\" 1*6DIGIT\n
    \     TIME-OFFSET     = \"Z\" / TIME-NUMOFFSET\n      TIME-NUMOFFSET  = (\"+\"
    / \"-\") TIME-HOUR \":\" TIME-MINUTE\n      STRUCTURED-DATA = NILVALUE / 1*SD-ELEMENT\n
    \     SD-ELEMENT      = \"[\" SD-ID *(SP SD-PARAM) \"]\"\n      SD-PARAM        =
    PARAM-NAME \"=\" %d34 PARAM-VALUE %d34\n      SD-ID           = SD-NAME\n      PARAM-NAME
    \     = SD-NAME\n      PARAM-VALUE     = UTF-8-STRING ; characters '\"', '\\'
    and\n                                     ; ']' MUST be escaped.\n      SD-NAME
    \        = 1*32PRINTUSASCII\n                        ; except '=', SP, ']', %d34
    (\")\n      MSG             = MSG-ANY / MSG-UTF8\n      MSG-ANY         = *OCTET
    ; not starting with BOM\n      MSG-UTF8        = BOM UTF-8-STRING\n      BOM             =
    %xEF.BB.BF\n      UTF-8-STRING    = *OCTET ; UTF-8 string as specified\n                        ;
    in RFC 3629\n      OCTET           = %d00-255\n      SP              = %d32\n
    \     PRINTUSASCII    = %d33-126\n      NONZERO-DIGIT   = %d49-57\n      DIGIT
    \          = %d48 / NONZERO-DIGIT\n      NILVALUE        = \"-\"\n"
  - contents:
    - "6.1.  Message Length\n   Syslog message size limits are dictated by the syslog
      transport\n   mapping in use.  There is no upper limit per se.  Each transport\n
      \  mapping defines the minimum maximum required message length support,\n   and
      the minimum maximum MUST be at least 480 octets in length.\n   Any transport
      receiver MUST be able to accept messages of up to and\n   including 480 octets
      in length.  All transport receiver\n   implementations SHOULD be able to accept
      messages of up to and\n   including 2048 octets in length.  Transport receivers
      MAY receive\n   messages larger than 2048 octets in length.  If a transport
      receiver\n   receives a message with a length larger than it supports, the\n
      \  transport receiver SHOULD truncate the payload.  Alternatively, it\n   MAY
      discard the message.\n   If a transport receiver truncates messages, the truncation
      MUST occur\n   at the end of the message.  After truncation, the message MAY
      contain\n   invalid UTF-8 encoding or invalid STRUCTURED-DATA.  The transport\n
      \  receiver MAY discard the message or MAY try to process as much as\n   possible
      in this case.\n"
    title: 6.1.  Message Length
  - contents:
    - "6.2.  HEADER\n   The character set used in the HEADER MUST be seven-bit ASCII
      in an\n   eight-bit field as described in [RFC5234].  These are the ASCII codes\n
      \  as defined in \"USA Standard Code for Information Interchange\"\n   [ANSI.X3-4.1968].\n
      \  The header format is designed to provide some interoperability with\n   older
      BSD-based syslog.  For details on this, see Appendix A.1.\n"
    - contents:
      - "6.2.1.  PRI\n   The PRI part MUST have three, four, or five characters and
        will be\n   bound with angle brackets as the first and last characters.  The
        PRI\n   part starts with a leading \"<\" ('less-than' character, %d60),\n
        \  followed by a number, which is followed by a \">\" ('greater-than'\n   character,
        %d62).  The number contained within these angle brackets\n   is known as the
        Priority value (PRIVAL) and represents both the\n   Facility and Severity.
        \ The Priority value consists of one, two, or\n   three decimal integers (ABNF
        DIGITS) using values of %d48 (for \"0\")\n   through %d57 (for \"9\").\n   Facility
        and Severity values are not normative but often used.  They\n   are described
        in the following tables for purely informational\n   purposes.  Facility values
        MUST be in the range of 0 to 23 inclusive.\n          Numerical             Facility\n
        \            Code\n              0             kernel messages\n              1
        \            user-level messages\n              2             mail system\n
        \             3             system daemons\n              4             security/authorization
        messages\n              5             messages generated internally by syslogd\n
        \             6             line printer subsystem\n              7             network
        news subsystem\n              8             UUCP subsystem\n              9
        \            clock daemon\n             10             security/authorization
        messages\n             11             FTP daemon\n             12             NTP
        subsystem\n             13             log audit\n             14             log
        alert\n             15             clock daemon (note 2)\n             16
        \            local use 0  (local0)\n             17             local use
        1  (local1)\n             18             local use 2  (local2)\n             19
        \            local use 3  (local3)\n             20             local use
        4  (local4)\n             21             local use 5  (local5)\n             22
        \            local use 6  (local6)\n             23             local use
        7  (local7)\n              Table 1.  Syslog Message Facilities\n   Each message
        Priority also has a decimal Severity level indicator.\n   These are described
        in the following table along with their numerical\n   values.  Severity values
        MUST be in the range of 0 to 7 inclusive.\n           Numerical         Severity\n
        \            Code\n              0       Emergency: system is unusable\n              1
        \      Alert: action must be taken immediately\n              2       Critical:
        critical conditions\n              3       Error: error conditions\n              4
        \      Warning: warning conditions\n              5       Notice: normal but
        significant condition\n              6       Informational: informational
        messages\n              7       Debug: debug-level messages\n              Table
        2. Syslog Message Severities\n   The Priority value is calculated by first
        multiplying the Facility\n   number by 8 and then adding the numerical value
        of the Severity.  For\n   example, a kernel message (Facility=0) with a Severity
        of Emergency\n   (Severity=0) would have a Priority value of 0.  Also, a \"local
        use 4\"\n   message (Facility=20) with a Severity of Notice (Severity=5) would\n
        \  have a Priority value of 165.  In the PRI of a syslog message, these\n
        \  values would be placed between the angle brackets as <0> and <165>\n   respectively.
        \ The only time a value of \"0\" follows the \"<\" is for\n   the Priority
        value of \"0\".  Otherwise, leading \"0\"s MUST NOT be used.\n"
      title: 6.2.1.  PRI
    - contents:
      - "6.2.2.  VERSION\n   The VERSION field denotes the version of the syslog protocol\n
        \  specification.  The version number MUST be incremented for any new\n   syslog
        protocol specification that changes any part of the HEADER\n   format.  Changes
        include the addition or removal of fields, or a\n   change of syntax or semantics
        of existing fields.  This document uses\n   a VERSION value of \"1\".  The
        VERSION values are IANA-assigned\n   (Section 9.1) via the Standards Action
        method as described in\n   [RFC5226].\n"
      title: 6.2.2.  VERSION
    - contents:
      - "6.2.3.  TIMESTAMP\n   The TIMESTAMP field is a formalized timestamp derived
        from [RFC3339].\n   Whereas [RFC3339] makes allowances for multiple syntaxes,
        this\n   document imposes further restrictions.  The TIMESTAMP value MUST\n
        \  follow these restrictions:\n   o  The \"T\" and \"Z\" characters in this
        syntax MUST be upper case.\n   o  Usage of the \"T\" character is REQUIRED.\n
        \  o  Leap seconds MUST NOT be used.\n   The originator SHOULD include TIME-SECFRAC
        if its clock accuracy and\n   performance permit.  The \"timeQuality\" SD-ID
        described in Section 7.1\n   allows the originator to specify the accuracy
        and trustworthiness of\n   the timestamp.\n   A syslog application MUST use
        the NILVALUE as TIMESTAMP if the syslog\n   application is incapable of obtaining
        system time.\n"
      - contents:
        - "6.2.3.1.  Examples\n   Example 1\n        1985-04-12T23:20:50.52Z\n   This
          represents 20 minutes and 50.52 seconds after the 23rd hour of\n   12 April
          1985 in UTC.\n   Example 2\n        1985-04-12T19:20:50.52-04:00\n   This
          represents the same time as in example 1, but expressed in US\n   Eastern
          Standard Time (observing daylight savings time).\n   Example 3\n        2003-10-11T22:14:15.003Z\n
          \  This represents 11 October 2003 at 10:14:15pm, 3 milliseconds into\n
          \  the next second.  The timestamp is in UTC.  The timestamp provides\n
          \  millisecond resolution.  The creator may have actually had a better\n
          \  resolution, but providing just three digits for the fractional part\n
          \  of a second does not tell us.\n   Example 4\n         2003-08-24T05:14:15.000003-07:00\n
          \  This represents 24 August 2003 at 05:14:15am, 3 microseconds into the\n
          \  next second.  The microsecond resolution is indicated by the\n   additional
          digits in TIME-SECFRAC.  The timestamp indicates that its\n   local time
          is -7 hours from UTC.  This timestamp might be created in\n   the US Pacific
          time zone during daylight savings time.\n   Example 5 - An Invalid TIMESTAMP\n
          \        2003-08-24T05:14:15.000000003-07:00\n   This example is nearly
          the same as Example 4, but it is specifying\n   TIME-SECFRAC in nanoseconds.
          \ This results in TIME-SECFRAC being\n   longer than the allowed 6 digits,
          which invalidates it.\n"
        title: 6.2.3.1.  Examples
      title: 6.2.3.  TIMESTAMP
    - contents:
      - "6.2.4.  HOSTNAME\n   The HOSTNAME field identifies the machine that originally
        sent the\n   syslog message.\n   The HOSTNAME field SHOULD contain the hostname
        and the domain name of\n   the originator in the format specified in STD 13
        [RFC1034].  This\n   format is called a Fully Qualified Domain Name (FQDN)
        in this\n   document.\n   In practice, not all syslog applications are able
        to provide an FQDN.\n   As such, other values MAY also be present in HOSTNAME.
        \ This document\n   makes provisions for using other values in such situations.
        \ A syslog\n   application SHOULD provide the most specific available value
        first.\n   The order of preference for the contents of the HOSTNAME field
        is as\n   follows:\n   1.  FQDN\n   2.  Static IP address\n   3.  hostname\n
        \  4.  Dynamic IP address\n   5.  the NILVALUE\n   If an IPv4 address is used,
        it MUST be in the format of the dotted\n   decimal notation as used in STD
        13 [RFC1035].  If an IPv6 address is\n   used, a valid textual representation
        as described in [RFC4291],\n   Section 2.2, MUST be used.\n   Syslog applications
        SHOULD consistently use the same value in the\n   HOSTNAME field for as long
        as possible.\n   The NILVALUE SHOULD only be used when the syslog application
        has no\n   way to obtain its real hostname.  This situation is considered
        highly\n   unlikely.\n"
      title: 6.2.4.  HOSTNAME
    - contents:
      - "6.2.5.  APP-NAME\n   The APP-NAME field SHOULD identify the device or application
        that\n   originated the message.  It is a string without further semantics.\n
        \  It is intended for filtering messages on a relay or collector.\n   The
        NILVALUE MAY be used when the syslog application has no idea of\n   its APP-NAME
        or cannot provide that information.  It may be that a\n   device is unable
        to provide that information either because of a\n   local policy decision,
        or because the information is not available,\n   or not applicable, on the
        device.\n   This field MAY be operator-assigned.\n"
      title: 6.2.5.  APP-NAME
    - contents:
      - "6.2.6.  PROCID\n   PROCID is a value that is included in the message, having
        no\n   interoperable meaning, except that a change in the value indicates\n
        \  there has been a discontinuity in syslog reporting.  The field does\n   not
        have any specific syntax or semantics; the value is\n   implementation-dependent
        and/or operator-assigned.  The NILVALUE MAY\n   be used when no value is provided.\n
        \  The PROCID field is often used to provide the process name or process\n
        \  ID associated with a syslog system.  The NILVALUE might be used when\n
        \  a process ID is not available.  On an embedded system without any\n   operating
        system process ID, PROCID might be a reboot ID.\n   PROCID can enable log
        analyzers to detect discontinuities in syslog\n   reporting by detecting a
        change in the syslog process ID.  However,\n   PROCID is not a reliable identification
        of a restarted process since\n   the restarted syslog process might be assigned
        the same process ID as\n   the previous syslog process.\n   PROCID can also
        be used to identify which messages belong to a group\n   of messages.  For
        example, an SMTP mail transfer agent might put its\n   SMTP transaction ID
        into PROCID, which would allow the collector or\n   relay to group messages
        based on the SMTP transaction.\n"
      title: 6.2.6.  PROCID
    - contents:
      - "6.2.7.  MSGID\n   The MSGID SHOULD identify the type of message.  For example,
        a\n   firewall might use the MSGID \"TCPIN\" for incoming TCP traffic and
        the\n   MSGID \"TCPOUT\" for outgoing TCP traffic.  Messages with the same\n
        \  MSGID should reflect events of the same semantics.  The MSGID itself\n
        \  is a string without further semantics.  It is intended for filtering\n
        \  messages on a relay or collector.\n   The NILVALUE SHOULD be used when
        the syslog application does not, or\n   cannot, provide any value.\n   This
        field MAY be operator-assigned.\n"
      title: 6.2.7.  MSGID
    title: 6.2.  HEADER
  - contents:
    - "6.3.  STRUCTURED-DATA\n   STRUCTURED-DATA provides a mechanism to express information
      in a well\n   defined, easily parseable and interpretable data format.  There
      are\n   multiple usage scenarios.  For example, it may express meta-\n   information
      about the syslog message or application-specific\n   information such as traffic
      counters or IP addresses.\n   STRUCTURED-DATA can contain zero, one, or multiple
      structured data\n   elements, which are referred to as \"SD-ELEMENT\" in this
      document.\n   In case of zero structured data elements, the STRUCTURED-DATA
      field\n   MUST contain the NILVALUE.\n   The character set used in STRUCTURED-DATA
      MUST be seven-bit ASCII in\n   an eight-bit field as described in [RFC5234].
      \ These are the ASCII\n   codes as defined in \"USA Standard Code for Information
      Interchange\"\n   [ANSI.X3-4.1968].  An exception is the PARAM-VALUE field (see\n
      \  Section 6.3.3), in which UTF-8 encoding MUST be used.\n   A collector MAY
      ignore malformed STRUCTURED-DATA elements.  A relay\n   MUST forward malformed
      STRUCTURED-DATA without any alteration.\n"
    - contents:
      - "6.3.1.  SD-ELEMENT\n   An SD-ELEMENT consists of a name and parameter name-value
        pairs.  The\n   name is referred to as SD-ID.  The name-value pairs are referred
        to\n   as \"SD-PARAM\".\n"
      title: 6.3.1.  SD-ELEMENT
    - contents:
      - "6.3.2.  SD-ID\n   SD-IDs are case-sensitive and uniquely identify the type
        and purpose\n   of the SD-ELEMENT.  The same SD-ID MUST NOT exist more than
        once in a\n   message.\n   There are two formats for SD-ID names:\n   o  Names
        that do not contain an at-sign (\"@\", ABNF %d64) are reserved\n      to be
        assigned by IETF Review as described in BCP26 [RFC5226].\n      Currently,
        these are the names defined in Section 7.  Names of\n      this format are
        only valid if they are first registered with the\n      IANA.  Registered
        names MUST NOT contain an at-sign ('@', ABNF\n      %d64), an equal-sign ('=',
        ABNF %d61), a closing brace (']', ABNF\n      %d93), a quote-character ('\"',
        ABNF %d34), whitespace, or control\n      characters (ASCII code 127 and codes
        32 or less).\n   o  Anyone can define additional SD-IDs using names in the
        format\n      name@<private enterprise number>, e.g., \"ourSDID@32473\".  The\n
        \     format of the part preceding the at-sign is not specified;\n      however,
        these names MUST be printable US-ASCII strings, and MUST\n      NOT contain
        an at-sign ('@', ABNF %d64), an equal-sign ('=', ABNF\n      %d61), a closing
        brace (']', ABNF %d93), a quote-character ('\"',\n      ABNF %d34), whitespace,
        or control characters.  The part following\n      the at-sign MUST be a private
        enterprise number as specified in\n      Section 7.2.2.  Please note that
        throughout this document the\n      value of 32473 is used for all private
        enterprise numbers.  This\n      value has been reserved by IANA to be used
        as an example number in\n      documentation.  Implementors will need to use
        their own private\n      enterprise number for the enterpriseId parameter,
        and when\n      creating locally extensible SD-ID names.\n"
      title: 6.3.2.  SD-ID
    - contents:
      - "6.3.3.  SD-PARAM\n   Each SD-PARAM consists of a name, referred to as PARAM-NAME,
        and a\n   value, referred to as PARAM-VALUE.\n   PARAM-NAME is case-sensitive.
        \ IANA controls all PARAM-NAMEs, with\n   the exception of those in SD-IDs
        whose names contain an at-sign.  The\n   PARAM-NAME scope is within a specific
        SD-ID.  Thus, equally named\n   PARAM-NAME values contained in two different
        SD-IDs are not the same.\n   To support international characters, the PARAM-VALUE
        field MUST be\n   encoded using UTF-8.  A syslog application MAY issue any
        valid UTF-8\n   sequence.  A syslog application MUST accept any valid UTF-8
        sequence\n   in the \"shortest form\".  It MUST NOT fail if control characters
        are\n   present in PARAM-VALUE.  The syslog application MAY modify messages\n
        \  containing control characters (e.g., by changing an octet with value\n
        \  0 (USASCII NUL) to the four characters \"#000\").  For the reasons\n   outlined
        in UNICODE TR36 [UNICODE-TR36], section 3.1, an originator\n   MUST encode
        messages in the \"shortest form\" and a collector or relay\n   MUST NOT interpret
        messages in the \"non-shortest form\".\n   Inside PARAM-VALUE, the characters
        '\"' (ABNF %d34), '\\' (ABNF %d92),\n   and ']' (ABNF %d93) MUST be escaped.
        \ This is necessary to avoid\n   parsing errors.  Escaping ']' would not strictly
        be necessary but is\n   REQUIRED by this specification to avoid syslog application\n
        \  implementation errors.  Each of these three characters MUST be\n   escaped
        as '\\\"', '\\\\', and '\\]' respectively.  The backslash is used\n   for
        control character escaping for consistency with its use for\n   escaping in
        other parts of the syslog message as well as in\n   traditional syslog.\n
        \  A backslash ('\\') followed by none of the three described characters\n
        \  is considered an invalid escape sequence.  In this case, the\n   backslash
        MUST be treated as a regular backslash and the following\n   character as
        a regular character.  Thus, the invalid sequence MUST\n   not be altered.\n
        \  An SD-PARAM MAY be repeated multiple times inside an SD-ELEMENT.\n"
      title: 6.3.3.  SD-PARAM
    - contents:
      - "6.3.4.  Change Control\n   Once SD-IDs and PARAM-NAMEs are defined, syntax
        and semantics of\n   these objects MUST NOT be altered.  Should a change to
        an existing\n   object be desired, a new SD-ID or PARAM-NAME MUST be created
        and the\n   old one remain unchanged.  OPTIONAL PARAM-NAMEs MAY be added to
        an\n   existing SD-ID.\n"
      title: 6.3.4.  Change Control
    - contents:
      - "6.3.5.  Examples\n   All examples in this section show only the structured
        data part of\n   the message.  Examples should be considered to be on one
        line.  They\n   are wrapped on multiple lines in this document for readability\n
        \  purposes.  A description is given after each example.\n   Example 1 - Valid\n
        \          [exampleSDID@32473 iut=\"3\" eventSource=\"Application\"\n           eventID=\"1011\"]\n
        \  This example is a structured data element with a non-IANA controlled\n
        \  SD-ID of type \"exampleSDID@32473\", which has three parameters.\n   Example
        2 - Valid\n           [exampleSDID@32473 iut=\"3\" eventSource=\"Application\"\n
        \          eventID=\"1011\"][examplePriority@32473 class=\"high\"]\n   This
        is the same example as in 1, but with a second structured data\n   element.
        \ Please note that the structured data element immediately\n   follows the
        first one (there is no SP between them).\n   Example 3 - Invalid\n           [exampleSDID@32473
        iut=\"3\" eventSource=\"Application\"\n           eventID=\"1011\"] [examplePriority@32473
        class=\"high\"]\n   This is nearly the same example as 2, but it has a subtle
        error --\n   there is an SP character between the two structured data elements\n
        \  (\"]SP[\").  This is invalid.  It will cause the STRUCTURED-DATA field\n
        \  to end after the first element.  The second element will be\n   interpreted
        as part of the MSG field.\n   Example 4 - Invalid\n           [ exampleSDID@32473
        iut=\"3\" eventSource=\"Application\"\n           eventID=\"1011\"][examplePriority@32473
        class=\"high\"]\n   This example is nearly the same as 2.  It has another
        subtle error --\n   the SP character occurs after the initial bracket.  A
        structured data\n   element SD-ID MUST immediately follow the beginning bracket,
        so the\n   SP character invalidates the STRUCTURED-DATA.  A syslog application\n
        \  MAY discard this message.\n   Example 5 - Valid\n           [sigSig ver=\"1\"
        rsID=\"1234\" ... signature=\"...\"]\n   Example 5 is a valid example.  It
        shows a hypothetical IANA-assigned\n   SD-ID.  The ellipses denote missing
        content, which has been left out\n   of this example for brevity.\n"
      title: 6.3.5.  Examples
    title: 6.3.  STRUCTURED-DATA
  - contents:
    - "6.4.  MSG\n   The MSG part contains a free-form message that provides information\n
      \  about the event.\n   The character set used in MSG SHOULD be UNICODE, encoded
      using UTF-8\n   as specified in [RFC3629].  If the syslog application cannot
      encode\n   the MSG in Unicode, it MAY use any other encoding.\n   The syslog
      application SHOULD avoid octet values below 32 (the\n   traditional US-ASCII
      control character range except DEL).  These\n   values are legal, but a syslog
      application MAY modify these\n   characters upon reception.  For example, it
      might change them into an\n   escape sequence (e.g., value 0 may be changed
      to \"\\0\").  A syslog\n   application SHOULD NOT modify any other octet values.\n
      \  If a syslog application encodes MSG in UTF-8, the string MUST start\n   with
      the Unicode byte order mask (BOM), which for UTF-8 is ABNF\n   %xEF.BB.BF.  The
      syslog application MUST encode in the \"shortest\n   form\" and MAY use any
      valid UTF-8 sequence.\n   If a syslog application is processing an MSG starting
      with a BOM and\n   the MSG contains UTF-8 that is not shortest form, the MSG
      MUST NOT be\n   interpreted as being encoded in UTF-8, for the reasons outlined
      in\n   [UNICODE-TR36], Section 3.1.  Guidance about this is given in\n   Appendix
      A.8.\n   Also, according to UNICODE TR36 [UNICODE-TR36], a syslog application\n
      \  MUST NOT interpret messages in the \"non-shortest form\".  It MUST NOT\n
      \  interpret invalid UTF-8 sequences.\n"
    title: 6.4.  MSG
  - contents:
    - "6.5.  Examples\n   The following are examples of valid syslog messages.  A
      description\n   of each example can be found below it.  The examples are based
      on\n   similar examples from [RFC3164] and may be familiar to readers.  The\n
      \  otherwise-unprintable Unicode BOM is represented as \"BOM\" in the\n   examples.\n
      \  Example 1 - with no STRUCTURED-DATA\n        <34>1 2003-10-11T22:14:15.003Z
      mymachine.example.com su - ID47\n        - BOM'su root' failed for lonvick on
      /dev/pts/8\n   In this example, the VERSION is 1 and the Facility has the value
      of\n   4.  The Severity is 2.  The message was created on 11 October 2003 at\n
      \  10:14:15pm UTC, 3 milliseconds into the next second.  The message\n   originated
      from a host that identifies itself as\n   \"mymachine.example.com\".  The APP-NAME
      is \"su\" and the PROCID is\n   unknown.  The MSGID is \"ID47\".  The MSG is
      \"'su root' failed for\n   lonvick...\", encoded in UTF-8.  The encoding is
      defined by the BOM.\n   There is no STRUCTURED-DATA present in the message;
      this is indicated\n   by \"-\" in the STRUCTURED-DATA field.\n   Example 2 -
      with no STRUCTURED-DATA\n         <165>1 2003-08-24T05:14:15.000003-07:00 192.0.2.1\n
      \        myproc 8710 - - %% It's time to make the do-nuts.\n   In this example,
      the VERSION is again 1.  The Facility is 20, the\n   Severity 5.  The message
      was created on 24 August 2003 at 5:14:15am,\n   with a -7 hour offset from UTC,
      3 microseconds into the next second.\n   The HOSTNAME is \"192.0.2.1\", so the
      syslog application did not know\n   its FQDN and used one of its IPv4 addresses
      instead.  The APP-NAME is\n   \"myproc\" and the PROCID is \"8710\" (for example,
      this could be the\n   UNIX PID).  There is no STRUCTURED-DATA present in the
      message; this\n   is indicated by \"-\" in the STRUCTURED-DATA field.  There
      is no\n   specific MSGID and this is indicated by the \"-\" in the MSGID field.\n
      \  The message is \"%% It's time to make the do-nuts.\".  As the Unicode\n   BOM
      is missing, the syslog application does not know the encoding of\n   the MSG
      part.\n   Example 3 - with STRUCTURED-DATA\n           <165>1 2003-10-11T22:14:15.003Z
      mymachine.example.com\n           evntslog - ID47 [exampleSDID@32473 iut=\"3\"
      eventSource=\n           \"Application\" eventID=\"1011\"] BOMAn application\n
      \          event log entry...\n   This example is modeled after Example 1.  However,
      this time it\n   contains STRUCTURED-DATA, a single element with the value\n
      \  \"[exampleSDID@32473 iut=\"3\" eventSource=\"Application\"\n   eventID=\"1011\"]\".
      \ The MSG itself is \"An application event log\n   entry...\"  The BOM at the
      beginning of MSG indicates UTF-8 encoding.\n   Example 4 - STRUCTURED-DATA Only\n
      \          <165>1 2003-10-11T22:14:15.003Z mymachine.example.com\n           evntslog
      - ID47 [exampleSDID@32473 iut=\"3\" eventSource=\n           \"Application\"
      eventID=\"1011\"][examplePriority@32473\n           class=\"high\"]\n   This
      example shows a message with only STRUCTURED-DATA and no MSG\n   part.  This
      is a valid message.\n"
    title: 6.5.  Examples
  title: 6.  Syslog Message Format
- contents:
  - "7.  Structured Data IDs\n   This section defines the initial IANA-registered
    SD-IDs.  See\n   Section 6.3 for a definition of structured data elements.  All
    SD-IDs\n   defined here are OPTIONAL.\n   In some of the following, a maximum
    length is quantified for the\n   parameter values.  In each of those cases, the
    syslog application\n   MUST be prepared to receive the number of defined characters
    in any\n   valid UTF-8 code point.  Since each character may be up to 6 octets,\n
    \  it is RECOMMENDED that each syslog application be prepared to receive\n   up
    to 6 octets per character.\n"
  - contents:
    - "7.1.  timeQuality\n   The SD-ID \"timeQuality\" MAY be used by the originator
      to describe its\n   notion of system time.  This SD-ID SHOULD be written if
      the\n   originator is not properly synchronized with a reliable external time\n
      \  source or if it does not know whether its time zone information is\n   correct.
      \ The main use of this structured data element is to provide\n   some information
      on the level of trust it has in the TIMESTAMP\n   described in Section 6.2.3.
      \ All parameters are OPTIONAL.\n"
    - contents:
      - "7.1.1.  tzKnown\n   The \"tzKnown\" parameter indicates whether the originator
        knows its\n   time zone.  If it does, the value \"1\" MUST be used.  If the
        time zone\n   information is in doubt, the value \"0\" MUST be used.  If the\n
        \  originator knows its time zone but decides to emit time in UTC, the\n   value
        \"1\" MUST be used (because the time zone is known).\n"
      title: 7.1.1.  tzKnown
    - contents:
      - "7.1.2.  isSynced\n   The \"isSynced\" parameter indicates whether the originator
        is\n   synchronized to a reliable external time source, e.g., via NTP.  If\n
        \  the originator is time synchronized, the value \"1\" MUST be used.  If\n
        \  not, the value \"0\" MUST be used.\n"
      title: 7.1.2.  isSynced
    - contents:
      - "7.1.3.  syncAccuracy\n   The \"syncAccuracy\" parameter indicates how accurate
        the originator\n   thinks its time synchronization is.  It is an integer describing
        the\n   maximum number of microseconds that its clock may be off between\n
        \  synchronization intervals.\n   If the value \"0\" is used for \"isSynced\",
        this parameter MUST NOT be\n   specified.  If the value \"1\" is used for
        \"isSynced\" but the\n   \"syncAccuracy\" parameter is absent, a collector
        or relay can assume\n   that the time information provided is accurate enough
        to be\n   considered correct.  The \"syncAccuracy\" parameter MUST be written\n
        \  only if the originator actually has knowledge of the reliability of\n   the
        external time source.  In most cases, it will gain this in-depth\n   knowledge
        through operator configuration.\n"
      title: 7.1.3.  syncAccuracy
    - contents:
      - "7.1.4.  Examples\n   The following is an example of an originator that does
        not know its\n   time zone or whether it is being synchronized:\n   [timeQuality
        tzKnown=\"0\" isSynced=\"0\"]\n   With this information, the originator indicates
        that its time\n   information is unreliable.  This may be a hint for the collector
        or\n   relay to use its local time instead of the message-provided TIMESTAMP\n
        \  for correlation of multiple messages from different originators.\n   The
        following is an example of an originator that knows its time zone\n   and
        knows that it is properly synchronized to a reliable external\n   source:\n
        \  [timeQuality tzKnown=\"1\" isSynced=\"1\"]\n   The following is an example
        of an originator that knows both its time\n   zone and that it is externally
        synchronized.  It also knows the\n   accuracy of the external synchronization:\n
        \  [timeQuality tzKnown=\"1\" isSynced=\"1\" syncAccuracy=\"60000000\"]\n
        \  The difference between this and the previous example is that the\n   originator
        expects that its clock will be kept within 60 seconds of\n   the official
        time.  Thus, if the originator reports it is 9:00:00, it\n   is no earlier
        than 8:59:00 and no later then 9:01:00.\n"
      title: 7.1.4.  Examples
    title: 7.1.  timeQuality
  - contents:
    - "7.2.  origin\n   The SD-ID \"origin\" MAY be used to indicate the origin of
      a syslog\n   message.  The following parameters can be used.  All parameters
      are\n   OPTIONAL.\n   Specifying any of these parameters is primarily an aid
      to log\n   analyzers and similar applications.\n"
    - contents:
      - "7.2.1.  ip\n   The \"ip\" parameter denotes an IP address that the originator
        knows it\n   had at the time of originating the message.  It MUST contain
        the\n   textual representation of an IP address as outlined in Section 6.2.4.\n
        \  This parameter can be used to provide identifying information in\n   addition
        to what is present in the HOSTNAME field.  It might be\n   especially useful
        if the host's IP address is included in the message\n   while the HOSTNAME
        field still contains the FQDN.  It is also useful\n   for describing all IP
        addresses of a multihomed host.\n   If an originator has multiple IP addresses,
        it MAY either list one of\n   its IP addresses in the \"ip\" parameter or
        it MAY include multiple\n   \"ip\" parameters in a single \"origin\" structured
        data element.\n"
      title: 7.2.1.  ip
    - contents:
      - "7.2.2.  enterpriseId\n   The \"enterpriseId\" parameter MUST be a 'SMI Network
        Management\n   Private Enterprise Code', maintained by IANA, whose prefix
        is\n   iso.org.dod.internet.private.enterprise (1.3.6.1.4.1).  The number\n
        \  that follows MUST be unique and MUST be registered with IANA as per\n   RFC
        2578 [RFC2578].  An enterprise is only authorized to assign\n   values within
        the iso.org.dod.internet.private.enterprise.<private\n   enterprise number>
        subtree assigned by IANA to that enterprise.  The\n   enterpriseId MUST contain
        only a value from the\n   iso.org.dod.internet.private.enterprise.<private
        enterprise number>\n   subtree.  In general, only the IANA-assigned private
        enterprise\n   number is needed (a single number).  An enterprise might decide
        to\n   use sub-identifiers below its private enterprise number.  If sub-\n
        \  identifiers are used, they MUST be separated by periods and be\n   represented
        as decimal numbers.  An example for that would be\n   \"32473.1.2\".  Please
        note that the ID \"32473.1.2\" is just an example\n   and MUST NOT be used.
        \ The complete up-to-date list of Private\n   Enterprise Numbers (PEN) is
        maintained by IANA.\n   By specifying a private enterprise number, the vendor
        allows more\n   specific processing of the message.\n"
      title: 7.2.2.  enterpriseId
    - contents:
      - "7.2.3.  software\n   The \"software\" parameter uniquely identifies the software
        that\n   generated the message.  If it is used, \"enterpriseId\" SHOULD also
        be\n   specified, so that a specific vendor's software can be identified.\n
        \  The \"software\" parameter is not the same as the APP-NAME header\n   field.
        \ It MUST always contain the name of the generating software,\n   whereas
        APP-NAME can contain anything else, including an operator-\n   configured
        value.\n   The \"software\" parameter is a string.  It MUST NOT be longer
        than 48\n   characters.\n"
      title: 7.2.3.  software
    - contents:
      - "7.2.4.  swVersion\n   The \"swVersion\" parameter uniquely identifies the
        version of the\n   software that generated the message.  If it is used, the
        \"software\"\n   and \"enterpriseId\" parameters SHOULD be provided, too.\n
        \  The \"swVersion\" parameter is a string.  It MUST NOT be longer than 32\n
        \  characters.\n"
      title: 7.2.4.  swVersion
    - contents:
      - "7.2.5.  Example\n   The following is an example with multiple IP addresses:\n
        \  [origin ip=\"192.0.2.1\" ip=\"192.0.2.129\"]\n   In this example, the originator
        indicates that it has two IP\n   addresses, one being 192.0.2.1 and the other
        one being 192.0.2.129.\n"
      title: 7.2.5.  Example
    title: 7.2.  origin
  - contents:
    - "7.3.  meta\n   The SD-ID \"meta\" MAY be used to provide meta-information about
      the\n   message.  The following parameters can be used.  All parameters are\n
      \  OPTIONAL.  If the \"meta\" SD-ID is used, at least one parameter SHOULD\n
      \  be specified.\n"
    - contents:
      - "7.3.1.  sequenceId\n   The \"sequenceId\" parameter tracks the sequence in
        which the\n   originator submits messages to the syslog transport for sending.
        \ It\n   is an integer that MUST be set to 1 when the syslog function is\n
        \  started and MUST be increased with every message up to a maximum\n   value
        of 2147483647.  If that value is reached, the next message MUST\n   be sent
        with a sequenceId of 1.\n"
      title: 7.3.1.  sequenceId
    - contents:
      - "7.3.2.  sysUpTime\n   The \"sysUpTime\" parameter MAY be used to include
        the SNMP \"sysUpTime\"\n   parameter in the message.  Its syntax and semantics
        are as defined in\n   [RFC3418].\n   As syslog does not support the SNMP \"INTEGER\"
        syntax directly, the\n   value MUST be represented as a decimal integer (no
        decimal point)\n   using only the characters \"0\", \"1\", \"2\", \"3\", \"4\",
        \"5\", \"6\", \"7\",\n   \"8\", and \"9\".\n   Note that the semantics in
        RFC 3418 are \"The time (in hundredths of a\n   second) since the network
        management portion of the system was last\n   re-initialized.\"  This of course
        relates to the SNMP-related\n   management portion of the system, which MAY
        be different than the\n   syslog-related management portion of the system.\n"
      title: 7.3.2.  sysUpTime
    - contents:
      - "7.3.3.  language\n   The \"language\" parameter MAY be specified by the originator
        to convey\n   information about the natural language used inside MSG.  If
        it is\n   specified, it MUST contain a language identifier as defined in BCP
        47\n   [RFC4646].\n"
      title: 7.3.3.  language
    title: 7.3.  meta
  title: 7.  Structured Data IDs
- contents:
  - '8.  Security Considerations

    '
  - contents:
    - "8.1.  UNICODE\n   This document uses UTF-8 encoding for the PARAM-VALUE and
      MSG fields.\n   There are a number of security issues with UNICODE.  Any implementer\n
      \  and operator is advised to review UNICODE TR36 [UNICODE-TR36] (UTR36)\n   to
      learn about these issues.  This document guards against the\n   technical issues
      outlined in UTR36 by REQUIRING \"shortest form\"\n   encoding for syslog applications.
      \ However, the visual spoofing due\n   to character confusion still persists.
      \ This document tries to\n   minimize the effects of visual spoofing by allowing
      UNICODE only\n   where local script is expected and needed.  In all other fields,\n
      \  US-ASCII is REQUIRED.  Also, the PARAM-VALUE and MSG fields should\n   not
      be the primary source for identifying information, further\n   reducing the
      risks associated with visual spoofing.\n"
    title: 8.1.  UNICODE
  - contents:
    - "8.2.  Control Characters\n   This document does not impose any mandatory restrictions
      on the MSG\n   or PARAM-VALUE content.  As such, they MAY contain control\n
      \  characters, including the NUL character.\n   In some programming languages
      (most notably C and C++), the NUL\n   character (ABNF %d00) traditionally has
      a special significance as\n   string terminator.  Most implementations of these
      languages assume\n   that a string will not extend beyond the first NUL character.
      \ This\n   is primarily a restriction of the supporting run-time libraries.\n
      \  This restriction is often carried over to programs and script\n   languages
      written in those languages.  As such, NUL characters must\n   be considered
      with great care and be properly handled.  An attacker\n   may deliberately include
      NUL characters to hide information after\n   them.  Incorrect handling of the
      NUL character may also invalidate\n   cryptographic checksums that are transmitted
      inside the message.\n   Many popular text editors are also written in languages
      with this\n   restriction.  Encoding NUL characters when writing to text files
      is\n   advisable.  If they are stored without encoding, the file can become\n
      \  unreadable.\n   Other control characters may also be problematic.  For example,
      an\n   attacker may deliberately include backspace characters to render\n   parts
      of the log message unreadable.  Similar issues exist for almost\n   all control
      characters.\n   Finally, invalid UTF-8 sequences may be used by an attacker
      to inject\n   ASCII control characters.\n   This specification permits a syslog
      application to reformat control\n   characters received.  Among others, the
      security risks associated\n   with control characters were an important driving
      force behind this\n   restriction.  Originators are advised that if any encoding
      other than\n   ASCII and UTF8 are used, the receiver may corrupt the message
      in an\n   attempt to filter ASCII control characters.\n"
    title: 8.2.  Control Characters
  - contents:
    - "8.3.  Message Truncation\n   Message truncation can be misused by an attacker
      to hide vital log\n   information.  Messages over the minimum supported size
      may be\n   discarded or truncated by the transport receiver.  As such, vital
      log\n   information may be lost.\n   In order to prevent information loss, messages
      should not be longer\n   than the minimum maximum size required by Section 6.1.
      \ For best\n   performance and reliability, messages should be as small as possible.\n
      \  Important information should be placed as early in the message as\n   possible
      because information at the beginning of the message is less\n   likely to be
      discarded by a size-limited transport receiver.\n   An originator should limit
      the size of any user-supplied data within\n   a syslog message.  If it does
      not, an attacker may provide large data\n   in hopes of exploiting a potential
      weakness.\n"
    title: 8.3.  Message Truncation
  - contents:
    - "8.4.  Replay\n   There is no mechanism in the syslog protocol to detect message\n
      \  replay.  An attacker may record a set of messages that indicate\n   normal
      activity of a machine.  At a later time, that attacker may\n   remove that machine
      from the network and replay the syslog messages\n   to the relay or collector.
      \ Even with the TIMESTAMP field in the\n   HEADER part, an attacker may record
      the packets and could simply\n   modify them to reflect the current time before
      retransmitting them.\n   The administrators may find nothing unusual in the
      received messages,\n   and their receipt would falsely indicate normal activity
      of the\n   machine.\n   Cryptographically signing messages could prevent the
      alteration of\n   TIMESTAMPs and thus the replay attack.\n"
    title: 8.4.  Replay
  - contents:
    - "8.5.  Reliable Delivery\n   Because there is no mechanism described within
      this document to\n   ensure delivery, and the underlying transport may be unreliable\n
      \  (e.g., UDP), some messages may be lost.  They may either be dropped\n   through
      network congestion, or they may be maliciously intercepted\n   and discarded.
      \ The consequences of dropping one or more syslog\n   messages cannot be determined.
      \ If the messages are simple status\n   updates, then their non-receipt may
      not be noticed or may cause an\n   annoyance for the system operators.  On the
      other hand, if the\n   messages are more critical, then the administrators may
      not become\n   aware of a developing and potentially serious problem.  Messages
      may\n   also be intercepted and discarded by an attacker as a way to hide\n
      \  unauthorized activities.\n   It may also be desirable to include rate-limiting
      features in syslog\n   originators and relays.  This can reduce potential congestion\n
      \  problems when message bursts happen.\n   Reliable delivery may not always
      be desirable.  Reliable delivery\n   means that the syslog originator or relay
      must block when the relay\n   or collector is not able to accept any more messages.
      \ In some\n   operating systems, namely Unix/Linux, the syslog originator or
      relay\n   runs inside a high-priority system process (syslogd).  If that\n   process
      blocks, the system at large comes to a stand-still.  The same\n   occurs if
      there is a deadlock situation between syslogd and e.g., the\n   DNS server.\n
      \  To prevent these problems, reliable delivery can be implemented in a\n   way
      that intentionally discards messages when the syslog application\n   would otherwise
      block.  The advantage of reliable delivery in this\n   case is that the syslog
      originator or relay knowingly discards the\n   message and is able to notify
      the relay or collector about that fact.\n   So the relay or collector receives
      the information that something is\n   lost.  With unreliable delivery, the message
      would simply be lost\n   without any indication that loss occurred.\n"
    title: 8.5.  Reliable Delivery
  - contents:
    - "8.6.  Congestion Control\n   Because syslog can generate unlimited amounts
      of data, transferring\n   this data over UDP is generally problematic, because
      UDP lacks\n   congestion control mechanisms.  Congestion control mechanisms
      that\n   respond to congestion by reducing traffic rates and establish a\n   degree
      of fairness between flows that share the same path are vital\n   to the stable
      operation of the Internet [RFC2914].  This is why the\n   syslog TLS transport
      is REQUIRED to implement and RECOMMENDED for\n   general use.\n   The only environments
      where the syslog UDP transport MAY be used as\n   an alternative to the TLS
      transport are managed networks, where the\n   network path has been explicitly
      provisioned for UDP syslog traffic\n   through traffic engineering mechanisms,
      such as rate limiting or\n   capacity reservations.  In all other environments,
      the TLS transport\n   SHOULD be used.\n   In any implementation, the situation
      may arise in which an originator\n   or relay would need to block sending messages.
      \ A common case is when\n   an internal queue is full.  This might happen due
      to rate-limiting or\n   slow performance of the syslog application.  In any
      event, it is\n   highly RECOMMENDED that no messages be dropped but that they
      should\n   be temporarily stored until they can be transmitted.  However, if\n
      \  they must be dropped, it is RECOMMENDED that the originator or relay\n   drop
      messages of lower severity in favor of higher severity messages.\n   Messages
      with a lower numerical SEVERITY value have a higher\n   practical severity than
      those with a numerically higher value.  In\n   that situation, the messages
      that are to be dropped SHOULD simply be\n   discarded.  The syslog application
      may notify a collector or relay\n   about the fact that it has dropped messages.\n"
    title: 8.6.  Congestion Control
  - contents:
    - "8.7.  Message Integrity\n   Besides being discarded, syslog messages may be
      damaged in transit,\n   or an attacker may maliciously modify them.  In such
      cases, the\n   original contents of the message will not be delivered to the\n
      \  collector or relay.  Additionally, if an attacker is positioned\n   between
      the transport sender and transport receiver of syslog\n   messages, they may
      be able to intercept and modify those messages\n   while in-transit to hide
      unauthorized activities.\n"
    title: 8.7.  Message Integrity
  - contents:
    - "8.8.  Message Observation\n   While there are no strict guidelines pertaining
      to the MSG format,\n   most syslog messages are generated in human-readable
      form with the\n   assumption that capable administrators should be able to read
      them\n   and understand their meaning.  The syslog protocol does not have\n
      \  mechanisms to provide confidentiality for the messages in transit.\n   In
      most cases, passing clear-text messages is a benefit to the\n   operations staff
      if they are sniffing the packets from the wire.  The\n   operations staff may
      be able to read the messages and associate them\n   with other events seen from
      other packets crossing the wire to track\n   down and correct problems.  Unfortunately,
      an attacker may also be\n   able to observe the human-readable contents of syslog
      messages.  The\n   attacker may then use the knowledge gained from those messages
      to\n   compromise a machine or do other damage.\n   Operators are advised to
      use a secure transport mapping to avoid this\n   problem.\n"
    title: 8.8.  Message Observation
  - contents:
    - "8.9.  Inappropriate Configuration\n   Because there is no control information
      distributed about any\n   messages or configurations, it is wholly the responsibility
      of the\n   network administrator to ensure that the messages are actually going\n
      \  to the intended recipients.  Cases have been noted where syslog\n   applications
      were inadvertently configured to send syslog messages to\n   the wrong relays
      or collectors.  In many cases, the inadvertent\n   relays or collectors may
      not be configured to receive syslog messages\n   and will probably discard them.
      \ In certain other cases, the receipt\n   of syslog messages has been known
      to cause problems for the\n   unintended recipient.  If messages are not going
      to the intended\n   recipient, then they cannot be reviewed or processed.\n
      \  Using a reliable transport mapping can help identify some of these\n   problems.
      \ For example, it can identify a problem where a message is\n   being sent to
      a system that is not configured to receive messages.\n   It cannot identify
      sending messages to a wrong machine that is\n   accepting messages.\n"
    title: 8.9.  Inappropriate Configuration
  - contents:
    - "8.10.  Forwarding Loop\n   As shown in Diagram 2, machines may be configured
      to relay syslog\n   messages to subsequent relays before reaching a collector.
      \ In one\n   particular case, an administrator found that he had mistakenly\n
      \  configured two relays to forward messages with certain SEVERITY\n   values
      to each other.  When either of these machines either received\n   or generated
      that type of message, it would forward it to the other\n   relay.  That relay
      would, in turn, forward it back.  This cycle did\n   cause degradation to the
      intervening network as well as to the\n   processing availability on the two
      devices.  Network administrators\n   must take care not to cause such a death
      spiral.\n"
    title: 8.10.  Forwarding Loop
  - contents:
    - "8.11.  Load Considerations\n   Network administrators must take the time to
      estimate the appropriate\n   capacity of the syslog collector.  An attacker
      may perform a Denial\n   of Service attack by filling the disk of the collector
      with false\n   messages.  Placing the records in a circular file may alleviate
      this\n   but has the consequence of not ensuring that an administrator will
      be\n   able to review the records in the future.  Along this line, a\n   transport
      receiver must have a network interface capable of receiving\n   the messages
      sent to it.\n   Administrators and network planners must also critically review
      the\n   network paths between the originators, the relays, and the\n   collectors.
      \ Generated syslog messages should not overwhelm any of\n   the network links.\n
      \  In order to reduce the impact of this issue, using transports with\n   guaranteed
      delivery is recommended.\n"
    title: 8.11.  Load Considerations
  - contents:
    - "8.12.  Denial of Service\n   As with any system, an attacker may just overwhelm
      a transport\n   receiver by sending more messages to it than can be handled
      by the\n   infrastructure or the device itself.  Implementers should attempt
      to\n   provide features that minimize this threat, such as only accepting\n
      \  syslog messages from known IP addresses.\n"
    title: 8.12.  Denial of Service
  title: 8.  Security Considerations
- contents:
  - '9.  IANA Considerations

    '
  - contents:
    - "9.1.  VERSION\n   IANA has created a registry entitled \"syslog Version Values\"
      of\n   VERSION values as described in Section 6.2.2.  Version numbers MUST\n
      \  be incremented for any new syslog protocol specification that changes\n   any
      part of the HEADER.  Changes include addition or removal of\n   fields or a
      change of syntax or semantics of existing fields.\n   VERSION numbers must be
      registered via the Standards Action method as\n   described in [RFC5226].  IANA
      has registered the VERSIONs shown in\n   Table 3 below.\n       VERSION     FORMAT\n
      \      1           Defined in [RFC5424]\n        Table 3.  IANA-Registered VERSIONs\n"
    title: 9.1.  VERSION
  - contents:
    - "9.2.  SD-IDs\n   IANA has created a registry entitled \"syslog Structured Data
      ID\n   Values\" of Structured Data ID (SD-ID) values together with their\n   associated
      PARAM-NAME values as described in Section 7.\n   New SD-ID and new PARAM-NAME
      values must be registered through the\n   IETF Review method as described in
      [RFC5226].\n   Once SD-IDs and SD-PARAMs are defined, syntax and semantics of
      these\n   objects MUST NOT be altered.  Should a change to an existing object\n
      \  be desired, a new SD-ID or SD-PARAM MUST be created and the old one\n   remain
      unchanged.\n   A provision is made here for locally extensible names.  The IANA
      will\n   not register, and will not control names with the at-sign (ABNF %d64)\n
      \  in them.\n   IANA has registered the SD-IDs and PARAM-NAMEs shown in Table
      4\n   below.\n       SD-ID              PARAM-NAME\n       timeQuality                           OPTIONAL\n
      \                         tzKnown            OPTIONAL\n                          isSynced
      \          OPTIONAL\n                          syncAccuracy       OPTIONAL\n
      \      origin                                OPTIONAL\n                          ip
      \                OPTIONAL\n                          enterpriseId       OPTIONAL\n
      \                         software           OPTIONAL\n                          swVersion
      \         OPTIONAL\n       meta                                  OPTIONAL\n
      \                         sequenceId         OPTIONAL\n                          sysUpTime
      \         OPTIONAL\n                          language           OPTIONAL\n
      \         Table 4.  IANA-Registered SD-IDs and their PARAM-NAMEs\n"
    title: 9.2.  SD-IDs
  title: 9.  IANA Considerations
- contents:
  - "10.  Working Group\n   The working group can be contacted via the mailing list:\n
    \        syslog@ietf.org\n   The current Chairs of the Working Group may be contacted
    at:\n         Chris Lonvick\n         Cisco Systems\n         EMail: clonvick@cisco.com\n
    \        David Harrington\n         Huawei Technologies USA\n         EMail: dbharrington@comcast.net\n"
  title: 10.  Working Group
- contents:
  - "11.  Acknowledgments\n   The authors wish to thank Chris Lonvick, Jon Callas,
    Andrew Ross,\n   Albert Mietus, Anton Okmianski, Tina Bird, Devin Kowatch, David\n
    \  Harrington, Sharon Chisholm, Richard Graveman, Tom Petch, Dado\n   Colussi,
    Clement Mathieu, Didier Dalmasso, and all the other people\n   who commented on
    various versions of this proposal.\n"
  title: 11.  Acknowledgments
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [ANSI.X3-4.1968]  American National Standards
      Institute, \"USA Code\n                     for Information Interchange\", ANSI
      X3.4, 1968.\n   [RFC1034]         Mockapetris, P., \"Domain names - concepts
      and\n                     facilities\", STD 13, RFC 1034, November 1987.\n   [RFC1035]
      \        Mockapetris, P., \"Domain names - implementation and\n                     specification\",
      STD 13, RFC 1035, November 1987.\n   [RFC2119]         Bradner, S., \"Key words
      for use in RFCs to Indicate\n                     Requirement Levels\", BCP
      14, RFC 2119, March 1997.\n   [RFC2578]         McCloghrie, K., Ed., Perkins,
      D., Ed., and J.\n                     Schoenwaelder, Ed., \"Structure of Management\n
      \                    Information Version 2 (SMIv2)\", STD 58, RFC 2578,\n                     April
      1999.\n   [RFC2914]         Floyd, S., \"Congestion Control Principles\", BCP
      41,\n                     RFC 2914, September 2000.\n   [RFC3339]         Klyne,
      G., Ed. and C. Newman, \"Date and Time on the\n                     Internet:
      Timestamps\", RFC 3339, July 2002.\n   [RFC3418]         Presuhn, R., \"Management
      Information Base (MIB) for\n                     the Simple Network Management
      Protocol (SNMP)\",\n                     STD 62, RFC 3418, December 2002.\n
      \  [RFC3629]         Yergeau, F., \"UTF-8, a transformation format of ISO\n
      \                    10646\", STD 63, RFC 3629, November 2003.\n   [RFC4291]
      \        Hinden, R. and S. Deering, \"IP Version 6 Addressing\n                     Architecture\",
      RFC 4291, February 2006.\n   [RFC4646]         Phillips, A. and M. Davis, \"Tags
      for Identifying\n                     Languages\", BCP 47, RFC 4646, September
      2006.\n   [RFC5226]         Narten, T. and H. Alvestrand, \"Guidelines for\n
      \                    Writing an IANA Considerations Section in RFCs\",\n                     BCP
      26, RFC 5226, May 2008.\n   [RFC5234]         Crocker, D. and P. Overell, \"Augmented
      BNF for\n                     Syntax Specifications: ABNF\", STD 68, RFC 5234,\n
      \                    January 2008.\n   [RFC5425]         Fuyou, M., Yuzhi, M.,
      and J. Salowey, \"TLS\n                     Transport Mapping for Syslog\",
      RFC 5425, March\n                     2009.\n   [RFC5426]         Okmianski,
      A., \"Transmission of Syslog Messages\n                     over UDP\", RFC
      5426, March 2009.\n   [UNICODE-TR36]    Davis, M. and M. Suignard, \"UNICODE
      Security\n                     Considerations\", July 2005.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [RFC3164]         Lonvick, C., \"The BSD
      Syslog Protocol\", RFC 3164,\n                     August 2001.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Appendix A.  Implementer Guidelines\n   Information in this section is given
    as an aid to implementers.\n   While this information is considered to be helpful,
    it is not\n   normative.  As such, an implementation is NOT REQUIRED to follow
    it\n   in order to claim compliance to this specification.\n"
  - contents:
    - "A.1.  Relationship with BSD Syslog\n   While BSD syslog is in widespread use,
      its format has never been\n   formally standardized.  [RFC3164] describes observed
      formats.  It is\n   an Informational RFC, and practice shows that there are
      many\n   different implementations.  Research during creation of this document\n
      \  showed that there is very little in common between different syslog\n   implementations
      on different platforms.  The only thing that all of\n   them agree upon is that
      messages start with \"<\" PRIVAL \">\".  Other\n   than that, legacy syslog
      messages are not formatted in a consistent\n   way.  Consequently, RFC 3164
      describes no specific elements inside a\n   syslog message.  It states that
      any message destined to the syslog\n   UDP port must be treated as a syslog
      message, no matter what its\n   format or content is.\n   This document retains
      the PRI value syntax and semantics.  This will\n   allow legacy syslog implementations
      to put messages generated by\n   syslog applications compliant to this specification
      into the right\n   bins.\n   Most existing implementations support UDP as the
      transport protocol\n   for syslog.  This specification supports UDP transport,
      but does not\n   recommend it.  Deployment of the required TLS support is recommended.\n
      \  Additional transport protocols may be used.\n   RFC 3164 describes relay
      behavior.  This document does not specify\n   relay behavior.  This might be
      done in a separate document.\n   The TIMESTAMP described in RFC 3164 offers
      less precision than the\n   timestamp specified in this document.  It also lacks
      the year and\n   time zone information.  If a message formatted according to
      this\n   document needs to be reformatted to be in RFC 3164 format, it is\n
      \  suggested that the originator's local time zone be used, and the time\n   zone
      information and the year be dropped.  If an RFC 3164 formatted\n   message is
      received and must be transformed to be compliant to this\n   document, the current
      year should be added and the time zone of the\n   relay or collector MAY be
      used.\n   The HOSTNAME in RFC 3164 is less specific, but this format is still\n
      \  supported in this document as one of the alternate HOSTNAME\n   representations.\n
      \  The MSG part of the message is described as TAG and CONTENT in RFC\n   3164.
      \ In this document, MSG is what was called CONTENT in RFC 3164.\n   The TAG
      is now part of the header, but not as a single field.  The\n   TAG has been
      split into APP-NAME, PROCID, and MSGID.  This does not\n   totally resemble
      the usage of TAG, but provides the same\n   functionality for most of the cases.\n
      \  In RFC 3164, STRUCTURED-DATA was not described.  If a message\n   compliant
      with this document contains STRUCTURED-DATA and must be\n   reformatted according
      to RFC 3164, the STRUCTURED-DATA simply becomes\n   part of the RFC 3164 CONTENT
      free-form text.\n   In general, this document tries to provide an easily parseable
      header\n   with clear field separations, whereas traditional BSD syslog suffers\n
      \  from some historically developed, hard to parse field separation\n   rules.\n"
    title: A.1.  Relationship with BSD Syslog
  - contents:
    - "A.2.  Message Length\n   Implementers should note the message size limitations
      outlined in\n   Section 6.1 and try to keep the most important data early in
      the\n   message (within the minimum guaranteed length).  This ensures the\n
      \  data will be seen by the collector or relay even if a transport\n   receiver
      at a relay on the message path truncates the message.\n   The reason syslog
      transport receivers need only support receiving up\n   to and including 480
      octets has, among other things, to do with\n   difficult delivery problems in
      a broken network.  Syslog messages may\n   use a UDP transport mapping with
      this 480 octet restriction to avoid\n   session overhead and message fragmentation.
      \ In a network with\n   problems, the likelihood of getting one single-packet
      message\n   delivered successfully is higher than getting two message fragments\n
      \  delivered successfully.  Therefore, using a larger size may prevent\n   the
      operator from getting some critical information about the\n   problem, whereas
      using small messages might get that information to\n   the operator.  It is
      recommended that messages intended for\n   troubleshooting purposes should not
      be larger than 480 octets.  To\n   further strengthen this point, it has also
      been observed that some\n   UDP implementations generally do not support message
      sizes of more\n   than 480 octets.  This behavior is very rare and may no longer
      be an\n   issue.\n   There are other use cases where syslog messages are used
      to transmit\n   inherently lengthy information, e.g., audit data.  By not enforcing\n
      \  any upper limit on the message size, syslog applications can be\n   implemented
      with any size needed and still be compliant with this\n   document.  In such
      cases, it is the operator's responsibility to\n   ensure that all components
      in a syslog infrastructure support the\n   required message sizes.  Transport
      mappings may recommend specific\n   message size limits that must be implemented
      to be compliant.\n   Implementers are reminded that the message length is specified
      in\n   octets.  There is a potentially large difference between the length\n
      \  in characters and the length in octets for UTF-8 strings.\n   It must be
      noted that the IPv6 MTU is about 2.5 times 480.  An\n   implementation targeted
      towards an IPv6-only environment might thus\n   assume this as a larger minimum
      size.\n"
    title: A.2.  Message Length
  - contents:
    - "A.3.  Severity Values\n   This section describes guidelines for using Severity
      as outlined in\n   Section 6.2.1.\n   All implementations should try to assign
      the most appropriate\n   severity to their message.  Most importantly, messages
      designed to\n   enable debugging or testing of software should be assigned Severity\n
      \  7.  Severity 0 should be reserved for messages of very high\n   importance
      (like serious hardware failures or imminent power\n   failure).  An implementation
      may use Severities 0 and 7 for other\n   purposes if this is configured by the
      administrator.\n   Because severities are very subjective, a relay or collector
      should\n   not assume that all originators have the same definition of severity.\n"
    title: A.3.  Severity Values
  - contents:
    - "A.4.  TIME-SECFRAC Precision\n   The TIMESTAMP described in Section 6.2.3 supports
      fractional seconds.\n   This provides grounds for a very common coding error,
      where leading\n   zeros are removed from the fractional seconds.  For example,
      the\n   TIMESTAMP \"2003-10-11T22:13:14.003\" may be erroneously written as\n
      \  \"2003-10-11T22:13:14.3\".  This would indicate 300 milliseconds\n   instead
      of the 3 milliseconds actually meant.\n"
    title: A.4.  TIME-SECFRAC Precision
  - contents:
    - "A.5.  Case Convention for Names\n   Names are used at various places in this
      document, for example for\n   SD-IDs and PARAM-NAMEs.  This document uses \"lower
      camel case\"\n   consistently.  With that, each name begins with a lower case
      letter\n   and each new embedded word starts with an upper case letter, with
      no\n   hyphen or other delimiter.  An example of this is \"timeQuality\".\n
      \  While an implementation is free to use any other case convention for\n   experimental
      names, it is suggested that the case convention outlined\n   above is followed.\n"
    title: A.5.  Case Convention for Names
  - contents:
    - "A.6.  Syslog Applications Without Knowledge of Time\n   In Section 6.2.3, the
      NILVALUE has been allowed for usage by\n   originators without knowledge of
      time.  This is done to support a\n   special case when a syslog application
      is not aware of time at all.\n   It can be argued whether such a syslog application
      can actually be\n   found in today's IT infrastructure.  However, discussion
      has\n   indicated that those things may exist in practice and as such there\n
      \  should be a guideline established for this case.\n   However, an implementation
      SHOULD emit a valid TIMESTAMP if the\n   underlying operating system, programming
      system, and hardware\n   supports a clock function.  A proper TIMESTAMP should
      be emitted even\n   if it is difficult to obtain the system time.  The NILVALUE
      should\n   only be used when it is actually impossible to obtain time\n   information.
      \ This rule should not be used as an excuse for lazy\n   implementations.\n"
    title: A.6.  Syslog Applications Without Knowledge of Time
  - contents:
    - "A.7.  Notes on the timeQuality SD-ID\n   It is recommended that the value of
      \"0\" be the default for the\n   \"tzKnown\" (Section 7.1.1) parameter.  It
      should only be changed to\n   \"1\" after the administrator has specifically
      configured the time\n   zone.  The value \"1\" may be used as the default if
      the underlying\n   operating system provides accurate time zone information.
      \ It is\n   still advised that the administrator consider the correctness of
      the\n   time zone information.\n   It is important not to create a false impression
      of accuracy with the\n   timeQuality SD-ID (Section 7.1).  An originator should
      only indicate\n   a given accuracy if it actually knows it is within these bounds.
      \ It\n   is generally assumed that the originator gains this in-depth\n   knowledge
      through operator configuration.  By default, an accuracy\n   should not be provided.\n"
    title: A.7.  Notes on the timeQuality SD-ID
  - contents:
    - "A.8.  UTF-8 Encoding and the BOM\n   This document specifies that SD-PARAMS
      must always be encoded in\n   UTF-8.  Other encodings of the message in the
      MSG portion, including\n   ASCIIPRINT, are not permitted by a device conforming
      to this\n   specification.  There are two cases that need to be addressed here.\n
      \  First, a syslog application conforming to this specification may not\n   be
      able to ascertain that the information given to it from an\n   originator is
      encoded in UTF-8.  If it cannot determine that with\n   certainty, the syslog
      application may choose to not incorporate the\n   BOM in the MSG.  If the syslog
      application has a good indication that\n   the content of the message is encoded
      in UTF-8, then it should\n   include the BOM.  In the second case, a syslog
      relay may be\n   forwarding a message from a device that does not conform to
      this\n   specification.  In that case, the device would likely not include the\n
      \  BOM unless it has ascertained that the received message was encoded\n   in
      UTF-8.\n"
    title: A.8.  UTF-8 Encoding and the BOM
  title: Appendix A.  Implementer Guidelines
- contents:
  - "Author's Address\n   Rainer Gerhards\n   Adiscon GmbH\n   Mozartstrasse 21\n
    \  Grossrinderfeld, BW  97950\n   Germany\n   EMail: rgerhards@adiscon.com\n"
  title: Author's Address
