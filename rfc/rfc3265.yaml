- title: __initial_text__
  contents:
  - '     Session Initiation Protocol (SIP)-Specific Event Notification

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an extension to the Session Initiation\n\
    \   Protocol (SIP).  The purpose of this extension is to provide an\n   extensible\
    \ framework by which SIP nodes can request notification from\n   remote nodes\
    \ indicating that certain events have occurred.\n   Concrete uses of the mechanism\
    \ described in this document may be\n   standardized in the future.\n   Note that\
    \ the event notification mechanisms defined herein are NOT\n   intended to be\
    \ a general-purpose infrastructure for all classes of\n   event subscription and\
    \ notification.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   3.1.2.   Identification of Subscribed Events and Event\
    \ Classes..  6\n   3.2.     Description of NOTIFY Behavior.........................\
    \ 13\n   3.2.1.   Identification of Reported Events, Event Classes, and\n    \
    \        Current State.......................................... 13\n   3.2.2.\
    \   Notifier NOTIFY Behavior............................... 14\n   3.2.3.   Proxy\
    \ NOTIFY Behavior.................................. 15\n   3.2.4.   Subscriber\
    \ NOTIFY Behavior............................. 16\n   3.3.     General................................................\
    \ 18\n   3.3.1.   Detecting support for SUBSCRIBE and NOTIFY............. 18\n\
    \   3.3.2.   CANCEL requests........................................ 18\n   3.3.3.\
    \   Forking................................................ 18\n   3.3.4.   Dialog\
    \ creation and termination........................ 18\n   3.3.5.   State Agents\
    \ and Notifier Migration.................... 19\n   3.3.6.   Polling Resource\
    \ State................................. 20\n   3.3.7.   Allow-Events header usage..............................\
    \ 21\n   3.3.8.   PINT Compatibility..................................... 21\n\
    \   4.       Event Packages......................................... 21\n   4.1.\
    \     Appropriateness of Usage............................... 21\n   4.2.    \
    \ Event Template-packages................................ 22\n   4.3.     Amount\
    \ of State to be Conveyed......................... 22\n   4.3.1.   Complete State\
    \ Information............................. 23\n   4.3.2.   State Deltas...........................................\
    \ 23\n   4.4.     Event Package Responsibilities......................... 24\n\
    \   4.4.1.   Event Package Name..................................... 24\n   4.4.2.\
    \   Event Package Parameters............................... 24\n   4.4.3.   SUBSCRIBE\
    \ Bodies....................................... 24\n   4.4.4.   Subscription Duration..................................\
    \ 25\n   4.4.5.   NOTIFY Bodies.......................................... 25\n\
    \   4.4.6.   Notifier processing of SUBSCRIBE requests.............. 25\n   4.4.7.\
    \   Notifier generation of NOTIFY requests................. 25\n   4.4.8.   Subscriber\
    \ processing of NOTIFY requests............... 26\n   4.4.9.   Handling of forked\
    \ requests............................ 26\n   4.4.10.  Rate of notifications..................................\
    \ 26\n   4.4.11.  State Agents........................................... 27\n\
    \   4.4.12.  Examples............................................... 27\n   4.4.13.\
    \  Use of URIs to Retrieve State.......................... 27\n   5.       Security\
    \ Considerations................................ 28\n   5.1.     Access Control.........................................\
    \ 28\n   5.2.     Notifier Privacy Mechanism............................. 28\n\
    \   5.3.     Denial-of-Service attacks.............................. 28\n   5.4.\
    \     Replay Attacks......................................... 29\n   5.5.    \
    \ Man-in-the middle attacks.............................. 29\n   5.6.     Confidentiality........................................\
    \ 29\n   6.       IANA Considerations.................................... 30\n\
    \   6.1.     Registration Information............................... 30\n   6.2.\
    \     Registration Template.................................. 31\n   6.3.    \
    \ Header Field Names..................................... 31\n   6.4.     Response\
    \ Codes......................................... 32\n   7.       Syntax.................................................\
    \ 32\n   7.1.     New Methods............................................ 32\n\
    \   7.1.1.   SUBSCRIBE method....................................... 34\n   7.1.2.\
    \   NOTIFY method.......................................... 34\n   7.2.     New\
    \ Headers............................................ 34\n   7.2.1.   \"Event\"\
    \ header......................................... 34\n   7.2.2.   \"Allow-Events\"\
    \ Header.................................. 35\n   7.2.3.   \"Subscription-State\"\
    \ Header............................ 35\n   7.3.     New Response Codes.....................................\
    \ 35\n   7.3.1.   \"202 Accepted\" Response Code........................... 35\n\
    \   7.3.2.   \"489 Bad Event\" Response Code.......................... 35\n  \
    \ 7.4.     Augmented BNF Definitions.............................. 35\n   8. \
    \      Normative References................................... 36\n   9.     \
    \  Informative References................................. 37\n   10.      Acknowledgements.......................................\
    \ 37\n   11.      Notice Regarding Intellectual Property Rights.......... 37\n\
    \   12.      Author's Address....................................... 37\n   13.\
    \      Full Copyright Statement............................... 38\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The ability to request asynchronous notification of events\
    \ proves\n   useful in many types of SIP services for which cooperation between\n\
    \   end-nodes is required.  Examples of such services include automatic\n   callback\
    \ services (based on terminal state events), buddy lists\n   (based on user presence\
    \ events), message waiting indications (based\n   on mailbox state change events),\
    \ and PSTN and Internet\n   Internetworking (PINT) [2] status (based on call state\
    \ events).\n   The methods described in this document provide a framework by which\n\
    \   notification of these events can be ordered.\n   The event notification mechanisms\
    \ defined herein are NOT intended to\n   be a general-purpose infrastructure for\
    \ all classes of event\n   subscription and notification.  Meeting requirements\
    \ for the general\n   problem set of subscription and notification is far too\
    \ complex for a\n   single protocol.  Our goal is to provide a SIP-specific framework\
    \ for\n   event notification which is not so complex as to be unusable for\n \
    \  simple features, but which is still flexible enough to provide\n   powerful\
    \ services.  Note, however, that event packages based on this\n   framework may\
    \ define arbitrarily elaborate rules which govern the\n   subscription and notification\
    \ for the events or classes of events\n   they describe.\n   This document does\
    \ not describe an extension which may be used\n   directly; it must be extended\
    \ by other documents (herein referred to\n   as \"event packages\").  In object-oriented\
    \ design terminology, it may\n   be thought of as an abstract base class which\
    \ must be derived into an\n   instantiatable class by further extensions.  Guidelines\
    \ for creating\n   these extensions are described in section 4.\n"
- title: 1.1. Overview of Operation
  contents:
  - "1.1. Overview of Operation\n   The general concept is that entities in the network\
    \ can subscribe to\n   resource or call state for various resources or calls in\
    \ the network,\n   and those entities (or entities acting on their behalf) can\
    \ send\n   notifications when those states change.\n   A typical flow of messages\
    \ would be:\n   Subscriber          Notifier\n       |-----SUBSCRIBE---->|   \
    \  Request state subscription\n       |<-------200--------|     Acknowledge subscription\n\
    \       |<------NOTIFY----- |     Return current state information\n       |--------200------->|\n\
    \       |<------NOTIFY----- |     Return current state information\n       |--------200------->|\n\
    \   Subscriptions are expired and must be refreshed by subsequent\n   SUBSCRIBE\
    \ messages.\n"
- title: 1.2. Documentation Conventions
  contents:
  - "1.2. Documentation Conventions\n   There are several paragraphs throughout this\
    \ document which provide\n   motivational or clarifying text.  Such passages are\
    \ non-normative,\n   and are provided only to assist with reader comprehension.\
    \  These\n   passages are set off from the remainder of the text by being indented\n\
    \   thus:\n      This is an example of non-normative explanatory text.  It does\
    \ not\n      form part of the specification, and is used only for\n      clarification.\n\
    \   Numbers in square brackets (e.g., [1]) denote a reference to one of\n   the\
    \ entries in the reference sections; see sections 8 and 9.\n   The all-capital\
    \ terms \"MUST\", \"SHOULD\", \"MAY\", \"SHOULD NOT\", \"MUST\n   NOT\", and \"\
    RECOMMENDED\" are used as defined in RFC 2119 [5].\n   The use of quotation marks\
    \ next to periods and commas follows the\n   convention used by the American Mathematical\
    \ Society; although\n   contrary to traditional American English convention, this\
    \ usage lends\n   clarity to certain passages.\n"
- title: 2. Definitions
  contents:
  - "2. Definitions\n   Event Package: An event package is an additional specification\
    \ which\n      defines a set of state information to be reported by a notifier\
    \ to\n      a subscriber.  Event packages also define further syntax and\n   \
    \   semantics based on the framework defined by this document required\n     \
    \ to convey such state information.\n   Event Template-Package: An event template-package\
    \ is a special kind\n      of event package which defines a set of states which\
    \ may be\n      applied to all possible event packages, including itself.\n  \
    \ Notification: Notification is the act of a notifier sending a NOTIFY\n     \
    \ message to a subscriber to inform the subscriber of the state of a\n      resource.\n\
    \   Notifier: A notifier is a user agent which generates NOTIFY requests\n   \
    \   for the purpose of notifying subscribers of the state of a\n      resource.\
    \  Notifiers typically also accept SUBSCRIBE requests to\n      create subscriptions.\n\
    \   State Agent: A state agent is a notifier which publishes state\n      information\
    \ on behalf of a resource; in order to do so, it may\n      need to gather such\
    \ state information from multiple sources.\n      State agents always have complete\
    \ state information for the\n      resource for which they are creating notifications.\n\
    \   Subscriber: A subscriber is a user agent which receives NOTIFY\n      requests\
    \ from notifiers; these NOTIFY requests contain information\n      about the state\
    \ of a resource in which the subscriber is\n      interested.  Subscribers typically\
    \ also generate SUBSCRIBE\n      requests and send them to notifiers to create\
    \ subscriptions.\n   Subscription: A subscription is a set of application state\
    \ associated\n      with a dialog.  This application state includes a pointer\
    \ to the\n      associated dialog, the event package name, and possibly an\n \
    \     identification token.  Event packages will define additional\n      subscription\
    \ state information.  By definition, subscriptions\n      exist in both a subscriber\
    \ and a notifier.\n   Subscription Migration: Subscription migration is the act\
    \ of moving a\n      subscription from one notifier to another notifier.\n"
- title: 3. Node Behavior
  contents:
  - '3. Node Behavior

    '
- title: 3.1. Description of SUBSCRIBE Behavior
  contents:
  - "3.1. Description of SUBSCRIBE Behavior\n   The SUBSCRIBE method is used to request\
    \ current state and state\n   updates from a remote node.\n"
- title: 3.1.1. Subscription Duration
  contents:
  - "3.1.1. Subscription Duration\n   SUBSCRIBE requests SHOULD contain an \"Expires\"\
    \ header (defined in SIP\n   [1]).  This expires value indicates the duration\
    \ of the subscription.\n   In order to keep subscriptions effective beyond the\
    \ duration\n   communicated in the \"Expires\" header, subscribers need to refresh\n\
    \   subscriptions on a periodic basis using a new SUBSCRIBE message on\n   the\
    \ same dialog as defined in SIP [1].\n   If no \"Expires\" header is present in\
    \ a SUBSCRIBE request, the implied\n   default is defined by the event package\
    \ being used.\n   200-class responses to SUBSCRIBE requests also MUST contain\
    \ an\n   \"Expires\" header.  The period of time in the response MAY be shorter\n\
    \   but MUST NOT be longer than specified in the request.  The period of\n   time\
    \ in the response is the one which defines the duration of the\n   subscription.\n\
    \   An \"expires\" parameter on the \"Contact\" header has no semantics for\n\
    \   SUBSCRIBE and is explicitly not equivalent to an \"Expires\" header in\n \
    \  a SUBSCRIBE request or response.\n   A natural consequence of this scheme is\
    \ that a SUBSCRIBE with an\n   \"Expires\" of 0 constitutes a request to unsubscribe\
    \ from an event.\n      In addition to being a request to unsubscribe, a SUBSCRIBE\
    \ message\n      with \"Expires\" of 0 also causes a fetch of state; see section\n\
    \      3.3.6.\n   Notifiers may also wish to cancel subscriptions to events; this\
    \ is\n   useful, for example, when the resource to which a subscription refers\n\
    \   is no longer available.  Further details on this mechanism are\n   discussed\
    \ in section 3.2.2.\n"
- title: 3.1.2. Identification of Subscribed Events and Event Classes
  contents:
  - "3.1.2. Identification of Subscribed Events and Event Classes\n   Identification\
    \ of events is provided by three pieces of information:\n   Request URI, Event\
    \ Type, and (optionally) message body.\n   The Request URI of a SUBSCRIBE request,\
    \ most importantly, contains\n   enough information to route the request to the\
    \ appropriate entity per\n   the request routing procedures outlined in SIP [1].\
    \  It also contains\n   enough information to identify the resource for which\
    \ event\n   notification is desired, but not necessarily enough information to\n\
    \   uniquely identify the nature of the event (e.g.,\n   \"sip:adam@dynamicsoft.com\"\
    \ would be an appropriate URI to subscribe\n   to for my presence state; it would\
    \ also be an appropriate URI to\n   subscribe to the state of my voice mailbox).\n\
    \   Subscribers MUST include exactly one \"Event\" header in SUBSCRIBE\n   requests,\
    \ indicating to which event or class of events they are\n   subscribing.  The\
    \ \"Event\" header will contain a token which indicates\n   the type of state\
    \ for which a subscription is being requested.  This\n   token will be registered\
    \ with the IANA and will correspond to an\n   event package which further describes\
    \ the semantics of the event or\n   event class.  The \"Event\" header MAY also\
    \ contain an \"id\" parameter.\n   This \"id\" parameter, if present, contains\
    \ an opaque token which\n   identifies the specific subscription within a dialog.\
    \  An \"id\"\n   parameter is only valid within the scope of a single dialog.\n\
    \   If the event package to which the event token corresponds defines\n   behavior\
    \ associated with the body of its SUBSCRIBE requests, those\n   semantics apply.\n\
    \   Event packages may also define parameters for the Event header; if\n   they\
    \ do so, they must define the semantics for such parameters.\n"
- title: 3.1.3. Additional SUBSCRIBE Header Values
  contents:
  - "3.1.3. Additional SUBSCRIBE Header Values\n   Because SUBSCRIBE requests create\
    \ a dialog as defined in SIP [1],\n   they MAY contain an \"Accept\" header. \
    \ This header, if present,\n   indicates the body formats allowed in subsequent\
    \ NOTIFY requests.\n   Event packages MUST define the behavior for SUBSCRIBE requests\n\
    \   without \"Accept\" headers; usually, this will connote a single,\n   default\
    \ body type.\n   Header values not described in this document are to be interpreted\
    \ as\n   described in SIP [1].\n"
- title: 3.1.4. Subscriber SUBSCRIBE Behavior
  contents:
  - '3.1.4. Subscriber SUBSCRIBE Behavior

    '
- title: 3.1.4.1. Requesting a Subscription
  contents:
  - "3.1.4.1. Requesting a Subscription\n   SUBSCRIBE is a dialog-creating method,\
    \ as described in SIP [1].\n   When a subscriber wishes to subscribe to a particular\
    \ state for a\n   resource, it forms a SUBSCRIBE message.  If the initial SUBSCRIBE\n\
    \   represents a request outside of a dialog (as it typically will), its\n   construction\
    \ follows the procedures outlined in SIP [1] for UAC\n   request generation outside\
    \ of a dialog.\n   This SUBSCRIBE request will be confirmed with a final response.\n\
    \   200-class responses indicate that the subscription has been accepted,\n  \
    \ and that a NOTIFY will be sent immediately.  A 200 response indicates\n   that\
    \ the subscription has been accepted and that the user is\n   authorized to subscribe\
    \ to the requested resource.  A 202 response\n   merely indicates that the subscription\
    \ has been understood, and that\n   authorization may or may not have been granted.\n\
    \   The \"Expires\" header in a 200-class response to SUBSCRIBE indicates\n  \
    \ the actual duration for which the subscription will remain active\n   (unless\
    \ refreshed).\n   Non-200 class final responses indicate that no subscription\
    \ or dialog\n   has been created, and no subsequent NOTIFY message will be sent.\
    \  All\n   non-200 class responses (with the exception of \"489\", described\n\
    \   herein) have the same meanings and handling as described in SIP [1].\n   A\
    \ SUBSCRIBE request MAY include an \"id\" parameter in its \"Event\"\n   header\
    \ to allow differentiation between multiple subscriptions in the\n   same dialog.\n"
- title: 3.1.4.2. Refreshing of Subscriptions
  contents:
  - "3.1.4.2. Refreshing of Subscriptions\n   At any time before a subscription expires,\
    \ the subscriber may refresh\n   the timer on such a subscription by sending another\
    \ SUBSCRIBE request\n   on the same dialog as the existing subscription, and with\
    \ the same\n   \"Event\" header \"id\" parameter (if one was present in the initial\n\
    \   subscription).  The handling for such a request is the same as for\n   the\
    \ initial creation of a subscription except as described below.\n      If the\
    \ initial SUBSCRIBE message contained an \"id\" parameter on\n      the \"Event\"\
    \ header, then refreshes of the subscription must also\n      contain an identical\
    \ \"id\" parameter; they will otherwise be\n      considered new subscriptions\
    \ in an existing dialog.\n   If a SUBSCRIBE request to refresh a subscription\
    \ receives a \"481\"\n   response, this indicates that the subscription has been\
    \ terminated\n   and that the subscriber did not receive notification of this\
    \ fact.\n   In this case, the subscriber should consider the subscription\n  \
    \ invalid.  If the subscriber wishes to re-subscribe to the state, he\n   does\
    \ so by composing an unrelated initial SUBSCRIBE request with a\n   freshly-generated\
    \ Call-ID and a new, unique \"From\" tag (see section\n   3.1.4.1.)\n   If a SUBSCRIBE\
    \ request to refresh a subscription fails with a non-481\n   response, the original\
    \ subscription is still considered valid for the\n   duration of the most recently\
    \ known \"Expires\" value as negotiated by\n   SUBSCRIBE and its response, or\
    \ as communicated by NOTIFY in the\n   \"Subscription-State\" header \"expires\"\
    \ parameter.\n      Note that many such errors indicate that there may be a problem\n\
    \      with the network or the notifier such that no further NOTIFY\n      messages\
    \ will be received.\n"
- title: 3.1.4.3. Unsubscribing
  contents:
  - "3.1.4.3. Unsubscribing\n   Unsubscribing is handled in the same way as refreshing\
    \ of a\n   subscription, with the \"Expires\" header set to \"0\".  Note that\
    \ a\n   successful unsubscription will also trigger a final NOTIFY message.\n"
- title: 3.1.4.4. Confirmation of Subscription Creation
  contents:
  - "3.1.4.4. Confirmation of Subscription Creation\n   The subscriber can expect\
    \ to receive a NOTIFY message from each node\n   which has processed a successful\
    \ subscription or subscription\n   refresh.  Until the first NOTIFY message arrives,\
    \ the subscriber\n   should consider the state of the subscribed resource to be\
    \ in a\n   neutral state.  Documents which define new event packages MUST define\n\
    \   this \"neutral state\" in such a way that makes sense for their\n   application\
    \ (see section 4.4.7.).\n   Due to the potential for both out-of-order messages\
    \ and forking, the\n   subscriber MUST be prepared to receive NOTIFY messages\
    \ before the\n   SUBSCRIBE transaction has completed.\n   Except as noted above,\
    \ processing of this NOTIFY is the same as in\n   section 3.2.4.\n"
- title: 3.1.5. Proxy SUBSCRIBE Behavior
  contents:
  - "3.1.5. Proxy SUBSCRIBE Behavior\n   Proxies need no additional behavior beyond\
    \ that described in SIP [1]\n   to support SUBSCRIBE.  If a proxy wishes to see\
    \ all of the SUBSCRIBE\n   and NOTIFY requests for a given dialog, it MUST record-route\
    \ the\n   initial SUBSCRIBE and any dialog-establishing NOTIFY requests.  Such\n\
    \   proxies SHOULD also record-route all other SUBSCRIBE and NOTIFY\n   requests.\n\
    \      Note that subscribers and notifiers may elect to use S/MIME\n      encryption\
    \ of SUBSCRIBE and NOTIFY requests; consequently, proxies\n      cannot rely on\
    \ being able to access any information that is not\n      explicitly required\
    \ to be proxy-readable by SIP [1].\n"
- title: 3.1.6. Notifier SUBSCRIBE Behavior
  contents:
  - '3.1.6. Notifier SUBSCRIBE Behavior

    '
- title: 3.1.6.1. Initial SUBSCRIBE Transaction Processing
  contents:
  - "3.1.6.1. Initial SUBSCRIBE Transaction Processing\n   In no case should a SUBSCRIBE\
    \ transaction extend for any longer than\n   the time necessary for automated\
    \ processing.  In particular,\n   notifiers MUST NOT wait for a user response\
    \ before returning a final\n   response to a SUBSCRIBE request.\n      This requirement\
    \ is imposed primarily to prevent the non-INVITE\n      transaction timeout timer\
    \ F (see [1]) from firing during the\n      SUBSCRIBE transaction, since interaction\
    \ with a user would often\n      exceed 64*T1 seconds.\n   The notifier SHOULD\
    \ check that the event package specified in the\n   \"Event\" header is understood.\
    \  If not, the notifier SHOULD return a\n   \"489 Bad Event\" response to indicate\
    \ that the specified event/event\n   class is not understood.\n   The notifier\
    \ SHOULD also perform any necessary authentication and\n   authorization per its\
    \ local policy.  See section 3.1.6.3.\n   The notifier MAY also check that the\
    \ duration in the \"Expires\" header\n   is not too small.  If and only if the\
    \ expiration interval is greater\n   than zero AND smaller than one hour AND less\
    \ than a notifier-\n   configured minimum, the notifier MAY return a \"423 Interval\
    \ too\n   small\" error which contains a \"Min-Expires\" header field.  The \"\
    Min-\n   Expires\" header field is described in SIP [1].\n   If the notifier is\
    \ able to immediately determine that it understands\n   the event package, that\
    \ the authenticated subscriber is authorized to\n   subscribe, and that there\
    \ are no other barriers to creating the\n   subscription, it creates the subscription\
    \ and a dialog (if\n   necessary), and returns a \"200 OK\" response (unless doing\
    \ so would\n   reveal authorization policy in an undesirable fashion; see section\n\
    \   5.2.).\n   If the notifier cannot immediately create the subscription (e.g.,\
    \ it\n   needs to wait for user input for authorization, or is acting for\n  \
    \ another node which is not currently reachable), or wishes to mask\n   authorization\
    \ policy, it will return a \"202 Accepted\" response.  This\n   response indicates\
    \ that the request has been received and understood,\n   but does not necessarily\
    \ imply that the subscription has been\n   authorized yet.\n   When a subscription\
    \ is created in the notifier, it stores the event\n   package name and the \"\
    Event\" header \"id\" parameter (if present) as\n   part of the subscription information.\n\
    \   The \"Expires\" values present in SUBSCRIBE 200-class responses behave\n \
    \  in the same way as they do in REGISTER responses: the server MAY\n   shorten\
    \ the interval, but MUST NOT lengthen it.\n      If the duration specified in\
    \ a SUBSCRIBE message is unacceptably\n      short, the notifier may be able to\
    \ send a 423 response, as\n      described earlier in this section.\n   200-class\
    \ responses to SUBSCRIBE requests will not generally contain\n   any useful information\
    \ beyond subscription duration; their primary\n   purpose is to serve as a reliability\
    \ mechanism.  State information\n   will be communicated via a subsequent NOTIFY\
    \ request from the\n   notifier.\n   The other response codes defined in SIP [1]\
    \ may be used in response\n   to SUBSCRIBE requests, as appropriate.\n"
- title: 3.1.6.2. Confirmation of Subscription Creation/Refreshing
  contents:
  - "3.1.6.2. Confirmation of Subscription Creation/Refreshing\n   Upon successfully\
    \ accepting or refreshing a subscription, notifiers\n   MUST send a NOTIFY message\
    \ immediately to communicate the current\n   resource state to the subscriber.\
    \  This NOTIFY message is sent on the\n   same dialog as created by the SUBSCRIBE\
    \ response.  If the resource\n   has no meaningful state at the time that the\
    \ SUBSCRIBE message is\n   processed, this NOTIFY message MAY contain an empty\
    \ or neutral body.\n   See section 3.2.2. for further details on NOTIFY message\
    \ generation.\n   Note that a NOTIFY message is always sent immediately after\
    \ any 200-\n   class response to a SUBSCRIBE request, regardless of whether the\n\
    \   subscription has already been authorized.\n"
- title: 3.1.6.3. Authentication/Authorization of SUBSCRIBE requests
  contents:
  - "3.1.6.3. Authentication/Authorization of SUBSCRIBE requests\n   Privacy concerns\
    \ may require that notifiers apply policy to determine\n   whether a particular\
    \ subscriber is authorized to subscribe to a\n   certain set of events.  Such\
    \ policy may be defined by mechanisms such\n   as access control lists or real-time\
    \ interaction with a user.  In\n   general, authorization of subscribers prior\
    \ to authentication is not\n   particularly useful.\n   SIP authentication mechanisms\
    \ are discussed in SIP [1].  Note that,\n   even if the notifier node typically\
    \ acts as a proxy, authentication\n   for SUBSCRIBE requests will always be performed\
    \ via a \"401\" response,\n   not a \"407;\" notifiers always act as a user agents\
    \ when accepting\n   subscriptions and sending notifications.\n      Of course,\
    \ when acting as a proxy, a node will perform normal\n      proxy authentication\
    \ (using 407).  The foregoing explanation is a\n      reminder that notifiers\
    \ are always UAs, and as such perform UA\n      authentication.\n   If authorization\
    \ fails based on an access list or some other\n   automated mechanism (i.e., it\
    \ can be automatically authoritatively\n   determined that the subscriber is not\
    \ authorized to subscribe), the\n   notifier SHOULD reply to the request with\
    \ a \"403 Forbidden\" or \"603\n   Decline\" response, unless doing so might reveal\
    \ information that\n   should stay private; see section 5.2.\n   If the notifier\
    \ owner is interactively queried to determine whether a\n   subscription is allowed,\
    \ a \"202 Accept\" response is returned\n   immediately.  Note that a NOTIFY message\
    \ is still formed and sent\n   under these circumstances, as described in the\
    \ previous section.\n   If subscription authorization was delayed and the notifier\
    \ wishes to\n   convey that such authorization has been declined, it may do so\
    \ by\n   sending a NOTIFY message containing a \"Subscription-State\" header\n\
    \   with a value of \"terminated\" and a reason parameter of \"rejected\".\n"
- title: 3.1.6.4. Refreshing of Subscriptions
  contents:
  - "3.1.6.4. Refreshing of Subscriptions\n   When a notifier receives a subscription\
    \ refresh, assuming that the\n   subscriber is still authorized, the notifier\
    \ updates the expiration\n   time for the subscription.  As with the initial subscription,\
    \ the\n   server MAY shorten the amount of time until expiration, but MUST NOT\n\
    \   increase it.  The final expiration time is placed in the \"Expires\"\n   header\
    \ in the response.  If the duration specified in a SUBSCRIBE\n   message is unacceptably\
    \ short, the notifier SHOULD respond with a\n   \"423 Subscription Too Brief\"\
    \ message.\n   If no refresh for a notification address is received before its\n\
    \   expiration time, the subscription is removed.  When removing a\n   subscription,\
    \ the notifier SHOULD send a NOTIFY message with a\n   \"Subscription-State\"\
    \ value of \"terminated\" to inform it that the\n   subscription is being removed.\
    \  If such a message is sent, the\n   \"Subscription-State\" header SHOULD contain\
    \ a \"reason=timeout\"\n   parameter.\n      The sending of a NOTIFY when a subscription\
    \ expires allows the\n      corresponding dialog to be terminated, if appropriate.\n"
- title: 3.2. Description of NOTIFY Behavior
  contents:
  - "3.2. Description of NOTIFY Behavior\n   NOTIFY messages are sent to inform subscribers\
    \ of changes in state to\n   which the subscriber has a subscription.  Subscriptions\
    \ are typically\n   put in place using the SUBSCRIBE method; however, it is possible\
    \ that\n   other means have been used.\n   If any non-SUBSCRIBE mechanisms are\
    \ defined to create subscriptions,\n   it is the responsibility of the parties\
    \ defining those mechanisms to\n   ensure that correlation of a NOTIFY message\
    \ to the corresponding\n   subscription is possible.  Designers of such mechanisms\
    \ are also\n   warned to make a distinction between sending a NOTIFY message to\
    \ a\n   subscriber who is aware of the subscription, and sending a NOTIFY\n  \
    \ message to an unsuspecting node.  The latter behavior is invalid, and\n   MUST\
    \ receive a \"481 Subscription does not exist\" response (unless\n   some other\
    \ 400- or 500-class error code is more applicable), as\n   described in section\
    \ 3.2.4.  In other words, knowledge of a\n   subscription must exist in both the\
    \ subscriber and the notifier to be\n   valid, even if installed via a non-SUBSCRIBE\
    \ mechanism.\n   A NOTIFY does not terminate its corresponding subscription; in\
    \ other\n   words, a single SUBSCRIBE request may trigger several NOTIFY\n   requests.\n"
- title: 3.2.1. Identification of Reported Events, Event Classes, and Current
  contents:
  - "3.2.1. Identification of Reported Events, Event Classes, and Current\n      \
    \ State\n   Identification of events being reported in a notification is very\n\
    \   similar to that described for subscription to events (see section\n   3.1.2.).\n\
    \   As in SUBSCRIBE requests, NOTIFY \"Event\" headers will contain a\n   single\
    \ event package name for which a notification is being\n   generated.  The package\
    \ name in the \"Event\" header MUST match the\n   \"Event\" header in the corresponding\
    \ SUBSCRIBE message.  If an \"id\"\n   parameter was present in the SUBSCRIBE\
    \ message, that \"id\" parameter\n   MUST also be present in the corresponding\
    \ NOTIFY messages.\n   Event packages may define semantics associated with the\
    \ body of their\n   NOTIFY requests; if they do so, those semantics apply.  NOTIFY\
    \ bodies\n   are expected to provide additional details about the nature of the\n\
    \   event which has occurred and the resultant resource state.\n   When present,\
    \ the body of the NOTIFY request MUST be formatted into\n   one of the body formats\
    \ specified in the \"Accept\" header of the\n   corresponding SUBSCRIBE request.\
    \  This body will contain either the\n   state of the subscribed resource or a\
    \ pointer to such state in the\n   form of a URI (see section 4.4.13).\n"
- title: 3.2.2. Notifier NOTIFY Behavior
  contents:
  - "3.2.2. Notifier NOTIFY Behavior\n   When a SUBSCRIBE request is answered with\
    \ a 200-class response, the\n   notifier MUST immediately construct and send a\
    \ NOTIFY request to the\n   subscriber.  When a change in the subscribed state\
    \ occurs, the\n   notifier SHOULD immediately construct and send a NOTIFY request,\n\
    \   subject to authorization, local policy, and throttling\n   considerations.\n\
    \   A NOTIFY request is considered failed if the response times out, or a\n  \
    \ non-200 class response code is received which has no \"Retry-After\"\n   header\
    \ and no implied further action which can be taken to retry the\n   request (e.g.,\
    \ \"401 Authorization Required\".)\n   If the NOTIFY request fails (as defined\
    \ above) due to a timeout\n   condition, and the subscription was installed using\
    \ a soft-state\n   mechanism (such as SUBSCRIBE), the notifier SHOULD remove the\n\
    \   subscription.\n      This behavior prevents unnecessary transmission of state\n\
    \      information for subscribers who have crashed or disappeared from\n    \
    \  the network.  Because such transmissions will be sent multiple\n      times,\
    \ per the retransmission algorithm defined in SIP [1]\n      (instead of the typical\
    \ single transmission for functioning\n      clients), continuing to service them\
    \ when no client is available\n      to acknowledge them could place undue strain\
    \ on a network.  Upon\n      client restart or reestablishment of a network connection,\
    \ it is\n      expected that clients will send SUBSCRIBE messages to refresh\n\
    \      potentially stale state information; such messages will re-install\n  \
    \    subscriptions in all relevant nodes.\n   If the NOTIFY request fails (as\
    \ defined above) due to an error\n   response, and the subscription was installed\
    \ using a soft-state\n   mechanism, the notifier MUST remove the corresponding\
    \ subscription.\n      A notify error response would generally indicate that something\n\
    \      has gone wrong with the subscriber or with some proxy on the way\n    \
    \  to the subscriber.  If the subscriber is in error, it makes the\n      most\
    \ sense to allow the subscriber to rectify the situation (by\n      re-subscribing)\
    \ once the error condition has been handled.  If a\n      proxy is in error, the\
    \ periodic SUBSCRIBE refreshes will re-\n      install subscription state once\
    \ the network problem has been\n      resolved.\n   If a NOTIFY request receives\
    \ a 481 response, the notifier MUST remove\n   the corresponding subscription\
    \ even if such subscription was\n   installed by non-SUBSCRIBE means (such as\
    \ an administrative\n   interface).\n      If the above behavior were not required,\
    \ subscribers receiving a\n      notify for an unknown subscription would need\
    \ to send an error\n      status code in response to the NOTIFY and also send\
    \ a SUBSCRIBE\n      request to remove the subscription.  Since this behavior\
    \ would\n      make subscribers available for use as amplifiers in denial of\n\
    \      service attacks, we have instead elected to give the 481 response\n   \
    \   special meaning: it is used to indicate that a subscription must\n      be\
    \ cancelled under all circumstances.\n   NOTIFY requests MUST contain a \"Subscription-State\"\
    \ header with a\n   value of \"active\", \"pending\", or \"terminated\".  The\
    \ \"active\" value\n   indicates that the subscription has been accepted and has\
    \ been\n   authorized (in most cases; see section 5.2.).  The \"pending\" value\n\
    \   indicates that the subscription has been received, but that policy\n   information\
    \ is insufficient to accept or deny the subscription at\n   this time.  The \"\
    terminated\" value indicates that the subscription is\n   not active.\n   If the\
    \ value of the \"Subscription-State\" header is \"active\" or\n   \"pending\"\
    , the notifier SHOULD also include in the \"Subscription-\n   State\" header an\
    \ \"expires\" parameter which indicates the time\n   remaining on the subscription.\
    \  The notifier MAY use this mechanism\n   to shorten a subscription; however,\
    \ this mechanism MUST NOT be used\n   to lengthen a subscription.\n      Including\
    \ expiration information for active and pending\n      subscriptions is useful\
    \ in case the SUBSCRIBE request forks, since\n      the response to a forked SUBSCRIBE\
    \ may not be received by the\n      subscriber.  Note well that this \"expires\"\
    \ value is a parameter on\n      the \"Subscription-State\" header, NOT an \"\
    Expires\" header.\n   If the value of the \"Subscription-State\" header is \"\
    terminated\", the\n   notifier SHOULD also include a \"reason\" parameter.  The\
    \ notifier MAY\n   also include a \"retry-after\" parameter, where appropriate.\
    \  For\n   details on the value and semantics of the \"reason\" and \"retry-after\"\
    \n   parameters, see section 3.2.4.\n"
- title: 3.2.3. Proxy NOTIFY Behavior
  contents:
  - "3.2.3. Proxy NOTIFY Behavior\n   Proxies need no additional behavior beyond that\
    \ described in SIP [1]\n   to support NOTIFY.  If a proxy wishes to see all of\
    \ the SUBSCRIBE and\n   NOTIFY requests for a given dialog, it MUST record-route\
    \ the initial\n   SUBSCRIBE and any dialog-establishing NOTIFY requests.  Such\
    \ proxies\n   SHOULD also record-route all other SUBSCRIBE and NOTIFY requests.\n\
    \      Note that subscribers and notifiers may elect to use S/MIME\n      encryption\
    \ of SUBSCRIBE and NOTIFY requests; consequently, proxies\n      cannot rely on\
    \ being able to access any information that is not\n      explicitly required\
    \ to be proxy-readable by SIP [1].\n"
- title: 3.2.4. Subscriber NOTIFY Behavior
  contents:
  - "3.2.4. Subscriber NOTIFY Behavior\n   Upon receiving a NOTIFY request, the subscriber\
    \ should check that it\n   matches at least one of its outstanding subscriptions;\
    \ if not, it\n   MUST return a \"481 Subscription does not exist\" response unless\n\
    \   another 400- or 500-class response is more appropriate.  The rules\n   for\
    \ matching NOTIFY requests with subscriptions that create a new\n   dialog are\
    \ described in section 3.3.4.  Notifications for\n   subscriptions which were\
    \ created inside an existing dialog match if\n   they are in the same dialog and\
    \ the \"Event\" headers match (as\n   described in section 7.2.1.)\n   If, for\
    \ some reason, the event package designated in the \"Event\"\n   header of the\
    \ NOTIFY request is not supported, the subscriber will\n   respond with a \"489\
    \ Bad Event\" response.\n   To prevent spoofing of events, NOTIFY requests SHOULD\
    \ be\n   authenticated, using any defined SIP authentication mechanism.\n   NOTIFY\
    \ requests MUST contain \"Subscription-State\" headers which\n   indicate the\
    \ status of the subscription.\n   If the \"Subscription-State\" header value is\
    \ \"active\", it means that\n   the subscription has been accepted and (in general)\
    \ has been\n   authorized.  If the header also contains an \"expires\" parameter,\
    \ the\n   subscriber SHOULD take it as the authoritative subscription duration\n\
    \   and adjust accordingly.  The \"retry-after\" and \"reason\" parameters\n \
    \  have no semantics for \"active\".\n   If the \"Subscription-State\" value is\
    \ \"pending\", the subscription has\n   been received by the notifier, but there\
    \ is insufficient policy\n   information to grant or deny the subscription yet.\
    \  If the header\n   also contains an \"expires\" parameter, the subscriber SHOULD\
    \ take it\n   as the authoritative subscription duration and adjust accordingly.\n\
    \   No further action is necessary on the part of the subscriber.  The\n   \"\
    retry-after\" and \"reason\" parameters have no semantics for\n   \"pending\"\
    .\n   If the \"Subscription-State\" value is \"terminated\", the subscriber\n\
    \   should consider the subscription terminated.  The \"expires\" parameter\n\
    \   has no semantics for \"terminated\".  If a reason code is present, the\n \
    \  client should behave as described below.  If no reason code or an\n   unknown\
    \ reason code is present, the client MAY attempt to re-\n   subscribe at any time\
    \ (unless a \"retry-after\" parameter is present,\n   in which case the client\
    \ SHOULD NOT attempt re-subscription until\n   after the number of seconds specified\
    \ by the \"retry-after\"\n   parameter).  The defined reason codes are:\n   deactivated:\
    \ The subscription has been terminated, but the subscriber\n      SHOULD retry\
    \ immediately with a new subscription.  One primary use\n      of such a status\
    \ code is to allow migration of subscriptions\n      between nodes.  The \"retry-after\"\
    \ parameter has no semantics for\n      \"deactivated\".\n   probation: The subscription\
    \ has been terminated, but the client\n      SHOULD retry at some later time.\
    \  If a \"retry-after\" parameter is\n      also present, the client SHOULD wait\
    \ at least the number of\n      seconds specified by that parameter before attempting\
    \ to re-\n      subscribe.\n   rejected: The subscription has been terminated\
    \ due to change in\n      authorization policy.  Clients SHOULD NOT attempt to\
    \ re-subscribe.\n      The \"retry-after\" parameter has no semantics for \"rejected\"\
    .\n   timeout: The subscription has been terminated because it was not\n     \
    \ refreshed before it expired.  Clients MAY re-subscribe\n      immediately. \
    \ The \"retry-after\" parameter has no semantics for\n      \"timeout\".\n   giveup:\
    \ The subscription has been terminated because the notifier\n      could not obtain\
    \ authorization in a timely fashion.  If a \"retry-\n      after\" parameter is\
    \ also present, the client SHOULD wait at least\n      the number of seconds specified\
    \ by that parameter before\n      attempting to re-subscribe; otherwise, the client\
    \ MAY retry\n      immediately, but will likely get put back into pending state.\n\
    \   noresource: The subscription has been terminated because the resource\n  \
    \    state which was being monitored no longer exists.  Clients SHOULD\n     \
    \ NOT attempt to re-subscribe.  The \"retry-after\" parameter has no\n      semantics\
    \ for \"noresource\".\n   Once the notification is deemed acceptable to the subscriber,\
    \ the\n   subscriber SHOULD return a 200 response.  In general, it is not\n  \
    \ expected that NOTIFY responses will contain bodies; however, they\n   MAY, if\
    \ the NOTIFY request contained an \"Accept\" header.\n   Other responses defined\
    \ in SIP [1] may also be returned, as\n   appropriate.  In no case should a NOTIFY\
    \ transaction extend for any\n   longer than the time necessary for automated\
    \ processing.  In\n   particular, subscribers MUST NOT wait for a user response\
    \ before\n   returning a final response to a NOTIFY request.\n"
- title: 3.3. General
  contents:
  - '3.3. General

    '
- title: 3.3.1. Detecting support for SUBSCRIBE and NOTIFY
  contents:
  - "3.3.1. Detecting support for SUBSCRIBE and NOTIFY\n   Neither SUBSCRIBE nor NOTIFY\
    \ necessitate the use of \"Require\" or\n   \"Proxy-Require\" headers; similarly,\
    \ there is no token defined for\n   \"Supported\" headers.  If necessary, clients\
    \ may probe for the support\n   of SUBSCRIBE and NOTIFY using the OPTIONS request\
    \ defined in SIP [1].\n   The presence of the \"Allow-Events\" header in a message\
    \ is sufficient\n   to indicate support for SUBSCRIBE and NOTIFY.\n      The \"\
    methods\" parameter for Contact may also be used to\n      specifically announce\
    \ support for SUBSCRIBE and NOTIFY messages\n      when registering. (See reference\
    \ [8] for details on the \"methods\"\n      parameter).\n"
- title: 3.3.2. CANCEL requests
  contents:
  - "3.3.2. CANCEL requests\n   No semantics are associated with cancelling SUBSCRIBE\
    \ or NOTIFY.\n"
- title: 3.3.3. Forking
  contents:
  - "3.3.3. Forking\n   In accordance with the rules for proxying non-INVITE requests\
    \ as\n   defined in SIP [1], successful SUBSCRIBE requests will receive only\n\
    \   one 200-class response; however, due to forking, the subscription may\n  \
    \ have been accepted by multiple nodes.  The subscriber MUST therefore\n   be\
    \ prepared to receive NOTIFY requests with \"From:\" tags which differ\n   from\
    \ the \"To:\" tag received in the SUBSCRIBE 200-class response.\n   If multiple\
    \ NOTIFY messages are received in different dialogs in\n   response to a single\
    \ SUBSCRIBE message, each dialog represents a\n   different destination to which\
    \ the SUBSCRIBE request was forked.  For\n   information on subscriber handling\
    \ in such situations, see section\n   4.4.9.\n"
- title: 3.3.4. Dialog creation and termination
  contents:
  - "3.3.4. Dialog creation and termination\n   If an initial SUBSCRIBE request is\
    \ not sent on a pre-existing dialog,\n   the subscriber will wait for a response\
    \ to the SUBSCRIBE request or a\n   matching NOTIFY.\n   Responses are matched\
    \ to such SUBSCRIBE requests if they contain the\n   same the same \"Call-ID\"\
    , the same \"From\" header \"tag\", and the same\n   \"CSeq\".  Rules for the\
    \ comparison of these headers are described in\n   SIP [1].  If a 200-class response\
    \ matches such a SUBSCRIBE request,\n   it creates a new subscription and a new\
    \ dialog (unless they have\n   already been created by a matching NOTIFY request;\
    \ see below).\n   NOTIFY requests are matched to such SUBSCRIBE requests if they\n\
    \   contain the same \"Call-ID\", a \"To\" header \"tag\" parameter which\n  \
    \ matches the \"From\" header \"tag\" parameter of the SUBSCRIBE, and the\n  \
    \ same \"Event\" header field.  Rules for comparisons of the \"Event\"\n   headers\
    \ are described in section 7.2.1.  If a matching NOTIFY request\n   contains a\
    \ \"Subscription-State\" of \"active\" or \"pending\", it creates\n   a new subscription\
    \ and a new dialog (unless they have already been\n   created by a matching response,\
    \ as described above).\n   If an initial SUBSCRIBE is sent on a pre-existing dialog,\
    \ a matching\n   200-class response or successful NOTIFY request merely creates\
    \ a new\n   subscription associated with that dialog.\n   Multiple subscriptions\
    \ can be associated with a single dialog.\n   Subscriptions may also exist in\
    \ dialogs associated with INVITE-\n   created application state and other application\
    \ state created by\n   mechanisms defined in other specifications.  These sets\
    \ of\n   application state do not interact beyond the behavior described for a\n\
    \   dialog (e.g., route set handling).\n   A subscription is destroyed when a\
    \ notifier sends a NOTIFY request\n   with a \"Subscription-State\" of \"terminated\"\
    .\n      A subscriber may send a SUBSCRIBE request with an \"Expires\" header\n\
    \      of 0 in order to trigger the sending of such a NOTIFY request;\n      however,\
    \ for the purposes of subscription and dialog lifetime, the\n      subscription\
    \ is not considered terminated until the NOTIFY with a\n      \"Subscription-State\"\
    \ of \"terminated\" is sent.\n   If a subscription's destruction leaves no other\
    \ application state\n   associated with the dialog, the dialog terminates.  The\
    \ destruction\n   of other application state (such as that created by an INVITE)\
    \ will\n   not terminate the dialog if a subscription is still associated with\n\
    \   that dialog.\n      Note that the above behavior means that a dialog created\
    \ with an\n      INVITE does not necessarily terminate upon receipt of a BYE.\n\
    \      Similarly, in the case that several subscriptions are associated\n    \
    \  with a single dialog, the dialog does not terminate until all the\n      subscriptions\
    \ in it are destroyed.\n"
- title: 3.3.5. State Agents and Notifier Migration
  contents:
  - "3.3.5. State Agents and Notifier Migration\n   When state agents (see section\
    \ 4.4.11.) are used, it is often useful\n   to allow migration of subscriptions\
    \ between state agents and the\n   nodes for which they are providing state aggregation\
    \ (or even among\n   various state agents).  Such migration may be effected by\
    \ sending a\n   NOTIFY message with a \"Subscription-State\" header of \"terminated\"\
    ,\n   and a reason parameter of \"deactivated\".  This NOTIFY request is\n   otherwise\
    \ normal, and is formed as described in section 3.2.2.\n   Upon receipt of this\
    \ NOTIFY message, the subscriber SHOULD attempt to\n   re-subscribe (as described\
    \ in the preceding sections).  Note that\n   this subscription is established\
    \ on a new dialog, and does not re-use\n   the route set from the previous subscription\
    \ dialog.\n   The actual migration is effected by making a change to the policy\n\
    \   (such as routing decisions) of one or more servers to which the\n   SUBSCRIBE\
    \ request will be sent in such a way that a different node\n   ends up responding\
    \ to the SUBSCRIBE request.  This may be as simple\n   as a change in the local\
    \ policy in the notifier from which the\n   subscription is migrating so that\
    \ it serves as a proxy or redirect\n   server instead of a notifier.\n   Whether,\
    \ when, and why to perform notifier migrations may be\n   described in individual\
    \ event packages; otherwise, such decisions are\n   a matter of local notifier\
    \ policy, and are left up to individual\n   implementations.\n"
- title: 3.3.6. Polling Resource State
  contents:
  - "3.3.6. Polling Resource State\n   A natural consequence of the behavior described\
    \ in the preceding\n   sections is that an immediate fetch without a persistent\
    \ subscription\n   may be effected by sending a SUBSCRIBE with an \"Expires\"\
    \ of 0.\n   Of course, an immediate fetch while a subscription is active may be\n\
    \   effected by sending a SUBSCRIBE with an \"Expires\" equal to the number\n\
    \   of seconds remaining in the subscription.\n   Upon receipt of this SUBSCRIBE\
    \ request, the notifier (or notifiers,\n   if the SUBSCRIBE request was forked)\
    \ will send a NOTIFY request\n   containing resource state in the same dialog.\n\
    \   Note that the NOTIFY messages triggered by SUBSCRIBE messages with\n   \"\
    Expires\" headers of 0 will contain a \"Subscription-State\" value of\n   \"terminated\"\
    , and a \"reason\" parameter of \"timeout\".\n   Polling of event state can cause\
    \ significant increases in load on the\n   network and notifiers; as such, it\
    \ should be used only sparingly.  In\n   particular, polling SHOULD NOT be used\
    \ in circumstances in which it\n   will typically result in more network messages\
    \ than long-running\n   subscriptions.\n   When polling is used, subscribers SHOULD\
    \ attempt to cache\n   authentication credentials between polls so as to reduce\
    \ the number\n   of messages sent.\n"
- title: 3.3.7. Allow-Events header usage
  contents:
  - "3.3.7. Allow-Events header usage\n   The \"Allow-Events\" header, if present,\
    \ includes a list of tokens\n   which indicates the event packages supported by\
    \ the client (if sent\n   in a request) or server (if sent in a response).  In\
    \ other words, a\n   node sending an \"Allow-Events\" header is advertising that\
    \ it can\n   process SUBSCRIBE requests and generate NOTIFY requests for all of\n\
    \   the event packages listed in that header.\n   Any node implementing one or\
    \ more event packages SHOULD include an\n   appropriate \"Allow-Events\" header\
    \ indicating all supported events in\n   all methods which initiate dialogs and\
    \ their responses (such as\n   INVITE) and OPTIONS responses.\n   This information\
    \ is very useful, for example, in allowing user agents\n   to render particular\
    \ interface elements appropriately according to\n   whether the events required\
    \ to implement the features they represent\n   are supported by the appropriate\
    \ nodes.\n   Note that \"Allow-Events\" headers MUST NOT be inserted by proxies.\n"
- title: 3.3.8. PINT Compatibility
  contents:
  - "3.3.8. PINT Compatibility\n   The \"Event\" header is considered mandatory for\
    \ the purposes of this\n   document.  However, to maintain compatibility with\
    \ PINT (see [2]),\n   servers MAY interpret a SUBSCRIBE request with no \"Event\"\
    \ header as\n   requesting a subscription to PINT events.  If a server does not\n\
    \   support PINT, it SHOULD return \"489 Bad Event\" to any SUBSCRIBE\n   messages\
    \ without an \"Event\" header.\n"
- title: 4. Event Packages
  contents:
  - "4. Event Packages\n   This section covers several issues which should be taken\
    \ into\n   consideration when event packages based on SUBSCRIBE and NOTIFY are\n\
    \   proposed.\n"
- title: 4.1. Appropriateness of Usage
  contents:
  - "4.1. Appropriateness of Usage\n   When designing an event package using the methods\
    \ described in this\n   document for event notification, it is important to consider:\
    \  is SIP\n   an appropriate mechanism for the problem set?  Is SIP being selected\n\
    \   because of some unique feature provided by the protocol (e.g., user\n   mobility),\
    \ or merely because \"it can be done?\"  If you find yourself\n   defining event\
    \ packages for notifications related to, for example,\n   network management or\
    \ the temperature inside your car's engine, you\n   may want to reconsider your\
    \ selection of protocols.\n      Those interested in extending the mechanism defined\
    \ in this\n      document are urged to follow the development of \"Guidelines\
    \ for\n      Authors of SIP Extensions\" [7] for further guidance regarding\n\
    \      appropriate uses of SIP.\n   Further, it is expected that this mechanism\
    \ is not to be used in\n   applications where the frequency of reportable events\
    \ is excessively\n   rapid (e.g., more than about once per second).  A SIP network\
    \ is\n   generally going to be provisioned for a reasonable signalling volume;\n\
    \   sending a notification every time a user's GPS position changes by\n   one\
    \ hundredth of a second could easily overload such a network.\n"
- title: 4.2. Event Template-packages
  contents:
  - "4.2. Event Template-packages\n   Normal event packages define a set of state\
    \ applied to a specific\n   type of resource, such as user presence, call state,\
    \ and messaging\n   mailbox state.\n   Event template-packages are a special type\
    \ of package which define a\n   set of state applied to other packages, such as\
    \ statistics, access\n   policy, and subscriber lists.  Event template-packages\
    \ may even be\n   applied to other event template-packages.\n   To extend the\
    \ object-oriented analogy made earlier, event template-\n   packages can be thought\
    \ of as templatized C++ packages which must be\n   applied to other packages to\
    \ be useful.\n   The name of an event template-package as applied to a package\
    \ is\n   formed by appending a period followed by the event template-package\n\
    \   name to the end of the package.  For example, if a template-package\n   called\
    \ \"winfo\" were being applied to a package called \"presence\", the\n   event\
    \ token used in \"Event\" and \"Allow-Events\" would be\n   \"presence.winfo\"\
    .\n   Event template-packages must be defined so that they can be applied\n  \
    \ to any arbitrary package.  In other words, event template-packages\n   cannot\
    \ be specifically tied to one or a few \"parent\" packages in such\n   a way that\
    \ they will not work with other packages.\n"
- title: 4.3. Amount of State to be Conveyed
  contents:
  - "4.3. Amount of State to be Conveyed\n   When designing event packages, it is\
    \ important to consider the type\n   of information which will be conveyed during\
    \ a notification.\n   A natural temptation is to convey merely the event (e.g.,\
    \ \"a new\n   voice message just arrived\") without accompanying state (e.g.,\
    \ \"7\n   total voice messages\").  This complicates implementation of\n   subscribing\
    \ entities (since they have to maintain complete state for\n   the entity to which\
    \ they have subscribed), and also is particularly\n   susceptible to synchronization\
    \ problems.\n   There are two possible solutions to this problem that event packages\n\
    \   may choose to implement.\n"
- title: 4.3.1. Complete State Information
  contents:
  - "4.3.1. Complete State Information\n   For packages which typically convey state\
    \ information that is\n   reasonably small (on the order of 1 kb or so), it is\
    \ suggested that\n   event packages are designed so as to send complete state\
    \ information\n   when an event occurs.\n   In some circumstances, conveying the\
    \ current state alone may be\n   insufficient for a particular class of events.\
    \  In these cases, the\n   event packages should include complete state information\
    \ along with\n   the event that occurred.  For example, conveying \"no customer\
    \ service\n   representatives available\" may not be as useful as conveying \"\
    no\n   customer service representatives available; representative\n   sip:46@cs.xyz.int\
    \ just logged off\".\n"
- title: 4.3.2. State Deltas
  contents:
  - "4.3.2. State Deltas\n   In the case that the state information to be conveyed\
    \ is large, the\n   event package may choose to detail a scheme by which NOTIFY\
    \ messages\n   contain state deltas instead of complete state.\n   Such a scheme\
    \ would work as follows: any NOTIFY sent in immediate\n   response to a SUBSCRIBE\
    \ contains full state information.  NOTIFY\n   messages sent because of a state\
    \ change will contain only the state\n   information that has changed; the subscriber\
    \ will then merge this\n   information into its current knowledge about the state\
    \ of the\n   resource.\n   Any event package that supports delta changes to states\
    \ MUST include\n   a version number that increases by exactly one for each NOTIFY\n\
    \   transaction in a subscription.  Note that the state version number\n   appears\
    \ in the body of the message, not in a SIP header.\n   If a NOTIFY arrives that\
    \ has a version number that is incremented by\n   more than one, the subscriber\
    \ knows that a state delta has been\n   missed; it ignores the NOTIFY message\
    \ containing the state delta\n   (except for the version number, which it retains\
    \ to detect message\n   loss), and re-sends a SUBSCRIBE to force a NOTIFY containing\
    \ a\n   complete state snapshot.\n"
- title: 4.4. Event Package Responsibilities
  contents:
  - "4.4. Event Package Responsibilities\n    Event packages are not required to reiterate\
    \ any of the behavior\n    described in this document, although they may choose\
    \ to do so for\n    clarity or emphasis.  In general, though, such packages are\n\
    \    expected to describe only the behavior that extends or modifies\n    the\
    \ behavior described in this document.\n    Note that any behavior designated\
    \ with \"SHOULD\" or \"MUST\" in this\n    document is not allowed to be weakened\
    \ by extension documents;\n    however, such documents may elect to strengthen\
    \ \"SHOULD\"\n    requirements to \"MUST\" strength if required by their application.\n\
    \      In addition to the normal sections expected in standards-track\n      RFCs\
    \ and SIP extension documents, authors of event packages need\n      to address\
    \ each of the issues detailed in the following\n      subsections, whenever applicable.\n"
- title: 4.4.1. Event Package Name
  contents:
  - "4.4.1. Event Package Name\n   This section, which MUST be present, defines the\
    \ token name to be\n   used to designate the event package.  It MUST include the\
    \ information\n   which appears in the IANA registration of the token.  For information\n\
    \   on registering such types, see section 6.\n"
- title: 4.4.2. Event Package Parameters
  contents:
  - "4.4.2. Event Package Parameters\n   If parameters are to be used on the \"Event\"\
    \ header to modify the\n   behavior of the event package, the syntax and semantics\
    \ of such\n   headers MUST be clearly defined.\n"
- title: 4.4.3. SUBSCRIBE Bodies
  contents:
  - "4.4.3. SUBSCRIBE Bodies\n   It is expected that most, but not all, event packages\
    \ will define\n   syntax and semantics for SUBSCRIBE method bodies; these bodies\
    \ will\n   typically modify, expand, filter, throttle, and/or set thresholds for\n\
    \   the class of events being requested.  Designers of event packages are\n  \
    \ strongly encouraged to re-use existing MIME types for message bodies\n   where\
    \ practical.\n   This mandatory section of an event package defines what type\
    \ or types\n   of event bodies are expected in SUBSCRIBE requests (or specify\
    \ that\n   no event bodies are expected).  It should point to detailed\n   definitions\
    \ of syntax and semantics for all referenced body types.\n"
- title: 4.4.4. Subscription Duration
  contents:
  - "4.4.4. Subscription Duration\n   It is RECOMMENDED that event packages give a\
    \ suggested range of times\n   considered reasonable for the duration of a subscription.\
    \  Such\n   packages MUST also define a default \"Expires\" value to be used if\n\
    \   none is specified.\n"
- title: 4.4.5. NOTIFY Bodies
  contents:
  - "4.4.5. NOTIFY Bodies\n   The NOTIFY body is used to report state on the resource\
    \ being\n   monitored.  Each package MUST define what type or types of event\n\
    \   bodies are expected in NOTIFY requests.  Such packages MUST specify\n   or\
    \ cite detailed specifications for the syntax and semantics\n   associated with\
    \ such event body.\n   Event packages also MUST define which MIME type is to be\
    \ assumed if\n   none are specified in the \"Accept\" header of the SUBSCRIBE\
    \ request.\n"
- title: 4.4.6. Notifier processing of SUBSCRIBE requests
  contents:
  - "4.4.6. Notifier processing of SUBSCRIBE requests\n   This section describes the\
    \ processing to be performed by the notifier\n   upon receipt of a SUBSCRIBE request.\
    \  Such a section is required.\n   Information in this section includes details\
    \ of how to authenticate\n   subscribers and authorization issues for the package.\
    \  Such\n   authorization issues may include, for example, whether all SUBSCRIBE\n\
    \   requests for this package are answered with 202 responses (see\n   section\
    \ 5.2.).\n"
- title: 4.4.7. Notifier generation of NOTIFY requests
  contents:
  - "4.4.7. Notifier generation of NOTIFY requests\n   This section of an event package\
    \ describes the process by which the\n   notifier generates and sends a NOTIFY\
    \ request.  This includes\n   detailed information about what events cause a NOTIFY\
    \ to be sent, how\n   to compute the state information in the NOTIFY, how to generate\n\
    \   neutral or fake state information to hide authorization delays and\n   decisions\
    \ from users, and whether state information is complete or\n   deltas for notifications;\
    \ see section 4.3.  Such a section is\n   required.\n   This section may optionally\
    \ describe the behavior used to process the\n   subsequent response.\n"
- title: 4.4.8. Subscriber processing of NOTIFY requests
  contents:
  - "4.4.8. Subscriber processing of NOTIFY requests\n   This section of an event\
    \ package describes the process followed by\n   the subscriber upon receipt of\
    \ a NOTIFY request, including any logic\n   required to form a coherent resource\
    \ state (if applicable).\n"
- title: 4.4.9. Handling of forked requests
  contents:
  - "4.4.9. Handling of forked requests\n   Each event package MUST specify whether\
    \ forked SUBSCRIBE requests are\n   allowed to install multiple subscriptions.\n\
    \   If such behavior is not allowed, the first potential dialog-\n   establishing\
    \ message will create a dialog.  All subsequent NOTIFY\n   messages which correspond\
    \ to the SUBSCRIBE message (i.e., match \"To\",\n   \"From\", \"From\" header\
    \ \"tag\" parameter, \"Call-ID\", \"CSeq\", \"Event\",\n   and \"Event\" header\
    \ \"id\" parameter) but which do not match the dialog\n   would be rejected with\
    \ a 481 response.  Note that the 200-class\n   response to the SUBSCRIBE can arrive\
    \ after a matching NOTIFY has been\n   received; such responses might not correlate\
    \ to the same dialog\n   established by the NOTIFY.  Except as required to complete\
    \ the\n   SUBSCRIBE transaction, such non-matching 200-class responses are\n \
    \  ignored.\n   If installing of multiple subscriptions by way of a single forked\n\
    \   SUBSCRIBE is allowed, the subscriber establishes a new dialog towards\n  \
    \ each notifier by returning a 200-class response to each NOTIFY.  Each\n   dialog\
    \ is then handled as its own entity, and is refreshed\n   independent of the other\
    \ dialogs.\n   In the case that multiple subscriptions are allowed, the event\n\
    \   package MUST specify whether merging of the notifications to form a\n   single\
    \ state is required, and how such merging is to be performed.\n   Note that it\
    \ is possible that some event packages may be defined in\n   such a way that each\
    \ dialog is tied to a mutually exclusive state\n   which is unaffected by the\
    \ other dialogs; this MUST be clearly stated\n   if it is the case.\n"
- title: 4.4.10.  Rate of notifications
  contents:
  - "4.4.10.  Rate of notifications\n   Each event package is expected to define a\
    \ requirement (SHOULD or\n   MUST strength) which defines an absolute maximum\
    \ on the rate at which\n   notifications are allowed to be generated by a single\
    \ notifier.\n   Each package MAY further define a throttle mechanism which allows\n\
    \   subscribers to further limit the rate of notification.\n"
- title: 4.4.11.  State Agents
  contents:
  - "4.4.11.  State Agents\n   Designers of event packages should consider whether\
    \ their package can\n   benefit from network aggregation points (state agents)\
    \ and/or nodes\n   which act on behalf of other nodes.  (For example, nodes which\n\
    \   provide state information about a resource when such a resource is\n   unable\
    \ or unwilling to provide such state information itself).  An\n   example of such\
    \ an application is a node which tracks the presence\n   and availability of a\
    \ user in the network.\n   If state agents are to be used by the package, the\
    \ package MUST\n   specify how such state agents aggregate information and how\
    \ they\n   provide authentication and authorization.\n   Event packages MAY also\
    \ outline specific scenarios under which\n   notifier migrations take place.\n"
- title: 4.4.12.  Examples
  contents:
  - "4.4.12.  Examples\n   Event packages SHOULD include several demonstrative message\
    \ flow\n   diagrams paired with several typical, syntactically correct, and\n\
    \   complete messages.\n   It is RECOMMENDED that documents describing event packages\
    \ clearly\n   indicate that such examples are informative and not normative, with\n\
    \   instructions that implementors refer to the main text of the document\n  \
    \ for exact protocol details.\n"
- title: 4.4.13.  Use of URIs to Retrieve State
  contents:
  - "4.4.13.  Use of URIs to Retrieve State\n   Some types of event packages may define\
    \ state information which is\n   potentially too large to reasonably send in a\
    \ SIP message.  To\n   alleviate this problem, event packages may include the\
    \ ability to\n   convey a URI instead of state information; this URI will then\
    \ be used\n   to retrieve the actual state information.\n   The precise mechanisms\
    \ for conveying such URIs are out of the scope\n   of this document.\n"
- title: 5. Security Considerations
  contents:
  - '5. Security Considerations

    '
- title: 5.1. Access Control
  contents:
  - "5.1. Access Control\n   The ability to accept subscriptions should be under the\
    \ direct\n   control of the notifier's user, since many types of events may be\n\
    \   considered sensitive for the purposes of privacy.  Similarly, the\n   notifier\
    \ should have the ability to selectively reject subscriptions\n   based on the\
    \ subscriber identity (based on access control lists),\n   using standard SIP\
    \ authentication mechanisms.  The methods for\n   creation and distribution of\
    \ such access control lists is outside the\n   scope of this document.\n"
- title: 5.2. Notifier Privacy Mechanism
  contents:
  - "5.2. Notifier Privacy Mechanism\n   The mere act of returning a 200 or certain\
    \ 4xx and 6xx responses to\n   SUBSCRIBE requests may, under certain circumstances,\
    \ create privacy\n   concerns by revealing sensitive policy information.  In these\
    \ cases,\n   the notifier SHOULD always return a 202 response.  While the\n  \
    \ subsequent NOTIFY message may not convey true state, it MUST appear\n   to contain\
    \ a potentially correct piece of data from the point of view\n   of the subscriber,\
    \ indistinguishable from a valid response.\n   Information about whether a user\
    \ is authorized to subscribe to the\n   requested state is never conveyed back\
    \ to the original user under\n   these circumstances.\n   Individual packages\
    \ and their related documents for which such a mode\n   of operation makes sense\
    \ can further describe how and why to generate\n   such potentially correct data.\
    \  For example, such a mode of operation\n   is mandated by RFC 2779 [6] for user\
    \ presence information.\n"
- title: 5.3. Denial-of-Service attacks
  contents:
  - "5.3. Denial-of-Service attacks\n   The current model (one SUBSCRIBE request triggers\
    \ a SUBSCRIBE\n   response and one or more NOTIFY requests) is a classic setup\
    \ for an\n   amplifier node to be used in a smurf attack.\n   Also, the creation\
    \ of state upon receipt of a SUBSCRIBE request can\n   be used by attackers to\
    \ consume resources on a victim's machine,\n   rendering it unusable.\n   To reduce\
    \ the chances of such an attack, implementations of notifiers\n   SHOULD require\
    \ authentication.  Authentication issues are discussed\n   in SIP [1].\n"
- title: 5.4. Replay Attacks
  contents:
  - "5.4. Replay Attacks\n   Replaying of either SUBSCRIBE or NOTIFY can have detrimental\
    \ effects.\n   In the case of SUBSCRIBE messages, attackers may be able to install\n\
    \   any arbitrary subscription which it witnessed being installed at some\n  \
    \ point in the past.  Replaying of NOTIFY messages may be used to spoof\n   old\
    \ state information (although a good versioning mechanism in the\n   body of the\
    \ NOTIFY messages may help mitigate such an attack).  Note\n   that the prohibition\
    \ on sending NOTIFY messages to nodes which have\n   not subscribed to an event\
    \ also aids in mitigating the effects of\n   such an attack.\n   To prevent such\
    \ attacks, implementations SHOULD require\n   authentication with anti-replay\
    \ protection.  Authentication issues\n   are discussed in SIP [1].\n"
- title: 5.5. Man-in-the middle attacks
  contents:
  - "5.5. Man-in-the middle attacks\n   Even with authentication, man-in-the-middle\
    \ attacks using SUBSCRIBE\n   may be used to install arbitrary subscriptions,\
    \ hijack existing\n   subscriptions, terminate outstanding subscriptions, or modify\
    \ the\n   resource to which a subscription is being made.  To prevent such\n \
    \  attacks, implementations SHOULD provide integrity protection across\n   \"\
    Contact\", \"Route\", \"Expires\", \"Event\", and \"To\" headers of SUBSCRIBE\n\
    \   messages, at a minimum.  If SUBSCRIBE bodies are used to define\n   further\
    \ information about the state of the call, they SHOULD be\n   included in the\
    \ integrity protection scheme.\n   Man-in-the-middle attacks may also attempt\
    \ to use NOTIFY messages to\n   spoof arbitrary state information and/or terminate\
    \ outstanding\n   subscriptions.  To prevent such attacks, implementations SHOULD\n\
    \   provide integrity protection across the \"Call-ID\", \"CSeq\", and\n   \"\
    Subscription-State\" headers and the bodies of NOTIFY messages.\n   Integrity\
    \ protection of message headers and bodies is discussed in\n   SIP [1].\n"
- title: 5.6. Confidentiality
  contents:
  - "5.6. Confidentiality\n   The state information contained in a NOTIFY message\
    \ has the potential\n   to contain sensitive information.  Implementations MAY\
    \ encrypt such\n   information to ensure confidentiality.\n   While less likely,\
    \ it is also possible that the information contained\n   in a SUBSCRIBE message\
    \ contains information that users might not want\n   to have revealed.  Implementations\
    \ MAY encrypt such information to\n   ensure confidentiality.\n   To allow the\
    \ remote party to hide information it considers sensitive,\n   all implementations\
    \ SHOULD be able to handle encrypted SUBSCRIBE and\n   NOTIFY messages.\n   The\
    \ mechanisms for providing confidentiality are detailed in SIP [1].\n"
- title: 6. IANA Considerations
  contents:
  - "6. IANA Considerations\n   This document defines an event-type namespace which\
    \ requires a\n   central coordinating body.  The body chosen for this coordination\
    \ is\n   the Internet Assigned Numbers Authority (IANA).\n   There are two different\
    \ types of event-types: normal event packages,\n   and event template-packages;\
    \ see section 4.2.  To avoid confusion,\n   template-package names and package\
    \ names share the same namespace; in\n   other words, an event template-package\
    \ MUST NOT share a name with a\n   package.\n   Following the policies outlined\
    \ in \"Guidelines for Writing an IANA\n   Considerations Section in RFCs\" [4],\
    \ normal event package\n   identification tokens are allocated as First Come First\
    \ Served, and\n   event template-package identification tokens are allocated on\
    \ a IETF\n   Consensus basis.\n   Registrations with the IANA MUST include the\
    \ token being registered\n   and whether the token is a package or a template-package.\
    \  Further,\n   packages MUST include contact information for the party responsible\n\
    \   for the registration and/or a published document which describes the\n   event\
    \ package.  Event template-package token registrations MUST\n   include a pointer\
    \ to the published RFC which defines the event\n   template-package.\n   Registered\
    \ tokens to designate packages and template-packages MUST\n   NOT contain the\
    \ character \".\", which is used to separate template-\n   packages from packages.\n"
- title: 6.1. Registration Information
  contents:
  - "6.1. Registration Information\n   As this document specifies no package or template-package\
    \ names, the\n   initial IANA registration for event types will be empty.  The\n\
    \   remainder of the text in this section gives an example of the type of\n  \
    \ information to be maintained by the IANA; it also demonstrates all\n   five\
    \ possible permutations of package type, contact, and reference.\n   The table\
    \ below lists the event packages and template-packages\n   defined in \"SIP-Specific\
    \ Event Notification\" [RFC3265].  Each name is\n   designated as a package or\
    \ a template-package under \"Type\".\n   Package Name      Type         Contact\
    \      Reference\n   ------------      ----         -------      ---------\n \
    \  example1          package      [Roach]\n   example2          package      [Roach]\
    \      [RFC3265]\n   example3          package                   [RFC3265]\n \
    \  example4          template     [Roach]      [RFC3265]\n   example5        \
    \  template                  [RFC3265]\n   PEOPLE\n   ------\n   [Roach] Adam\
    \ Roach <adam@dynamicsoft.com>\n   REFERENCES\n   ----------\n   [RFC3265] Roach,\
    \ A., \"SIP-Specific Event Notification\", RFC 3265,\n             June 2002.\n"
- title: 6.2. Registration Template
  contents:
  - "6.2. Registration Template\n   To: ietf-sip-events@iana.org\n   Subject: Registration\
    \ of new SIP event package\n   Package Name:\n       (Package names must conform\
    \ to the syntax described in\n       section 7.2.1.)\n   Is this registration\
    \ for a Template Package:\n       (indicate yes or no)\n   Published Specification(s):\n\
    \       (Template packages require a published RFC. Other packages\n       may\
    \ reference a specification when appropriate).\n   Person & email address to contact\
    \ for further information:\n"
- title: 6.3. Header Field Names
  contents:
  - "6.3. Header Field Names\n   This document registers three new header field names,\
    \ described\n   elsewhere in this document. These headers are defined by the\n\
    \   following information, which is to be added to the header sub-\n   registry\
    \ under http://www.iana.org/assignments/sip-parameters.\n   Header Name:   Allow-Events\n\
    \   Compact Form:  u\n   Header Name:   Subscription-State\n   Compact Form: \
    \ (none)\n   Header Name:   Event\n   Compact Form:  o\n"
- title: 6.4. Response Codes
  contents:
  - "6.4. Response Codes\n   This document registers two new response codes. These\
    \ response codes\n   are defined by the following information, which is to be\
    \ added to the\n   method and response-code sub-registry under\n   http://www.iana.org/assignments/sip-parameters.\n\
    \   Response Code Number:   202\n   Default Reason Phrase:  Accepted\n   Response\
    \ Code Number:   489\n   Default Reason Phrase:  Bad Event\n"
- title: 7. Syntax
  contents:
  - "7. Syntax\n   This section describes the syntax extensions required for event\n\
    \   notification in SIP.  Semantics are described in section 3.  Note\n   that\
    \ the formal syntax definitions described in this document are\n   expressed in\
    \ the ABNF format used in SIP [1], and contain references\n   to elements defined\
    \ therein.\n"
- title: 7.1. New Methods
  contents:
  - "7.1. New Methods\n   This document describes two new SIP methods: SUBSCRIBE and\n\
    \   NOTIFY.\n   This table expands on tables 2 and 3 in SIP [1].\n   Header  \
    \                  Where    SUB NOT\n   ------                    -----    ---\
    \ ---\n   Accept                      R       o   o\n   Accept               \
    \      2xx      -   -\n   Accept                     415      o   o\n   Accept-Encoding\
    \             R       o   o\n   Accept-Encoding            2xx      -   -\n  \
    \ Accept-Encoding            415      o   o\n   Accept-Language             R\
    \       o   o\n   Accept-Language            2xx      -   -\n   Accept-Language\
    \            415      o   o\n   Alert-Info                  R       -   -\n  \
    \ Alert-Info                 180      -   -\n   Allow                       R\
    \       o   o\n   Allow                      2xx      o   o\n   Allow        \
    \               r       o   o\n   Allow                      405      m   m\n\
    \   Authentication-Info        2xx      o   o\n   Authorization              \
    \ R       o   o\n   Call-ID                     c       m   m\n   Contact    \
    \                 R       m   m\n   Contact                    1xx      o   o\n\
    \   Contact                    2xx      m   o\n   Contact                    3xx\
    \      m   m\n   Contact                    485      o   o\n   Content-Disposition\
    \                 o   o\n   Content-Encoding                    o   o\n   Content-Language\
    \                    o   o\n   Content-Length                      t   t\n   Content-Type\
    \                        *   *\n   CSeq                        c       m   m\n\
    \   Date                                o   o\n   Error-Info               300-699\
    \    o   o\n   Expires                             o   -\n   Expires         \
    \           2xx      m   -\n   From                        c       m   m\n   In-Reply-To\
    \                 R       -   -\n   Max-Forwards                R       m   m\n\
    \   Min-Expires                423      m   -\n   MIME-Version               \
    \         o   o\n   Organization                        o   -\n   Priority   \
    \                 R       o   -\n   Proxy-Authenticate         407      m   m\n\
    \   Proxy-Authorization         R       o   o\n   Proxy-Require              \
    \ R       o   o\n   RAck                        R       -   -\n   Record-Route\
    \                R       o   o\n   Record-Route           2xx,401,484  o   o\n\
    \   Reply-To                            -   -\n   Require                    \
    \         o   o\n   Retry-After        404,413,480,486  o   o\n   Retry-After\
    \              500,503    o   o\n   Retry-After              600,603    o   o\n\
    \   Route                       R       c   c\n   RSeq                       1xx\
    \      o   o\n   Server                      r       o   o\n   Subject       \
    \              R       -   -\n   Supported                   R       o   o\n \
    \  Supported                  2xx      o   o\n   Timestamp                   \
    \        o   o\n   To                         c(1)     m   m\n   Unsupported \
    \               420      o   o\n   User-Agent                          o   o\n\
    \   Via                         c       m   m\n   Warning                    \
    \ R       -   o\n   Warning                     r       o   o\n   WWW-Authenticate\
    \           401      m   m\n"
- title: 7.1.1. SUBSCRIBE method
  contents:
  - "7.1.1. SUBSCRIBE method\n   \"SUBSCRIBE\" is added to the definition of the element\
    \ \"Method\" in the\n   SIP message grammar.\n   Like all SIP method names, the\
    \ SUBSCRIBE method name is case\n   sensitive.  The SUBSCRIBE method is used to\
    \ request asynchronous\n   notification of an event or set of events at a later\
    \ time.\n"
- title: 7.1.2. NOTIFY method
  contents:
  - "7.1.2. NOTIFY method\n   \"NOTIFY\" is added to the definition of the element\
    \ \"Method\" in the\n   SIP message grammar.\n   The NOTIFY method is used to\
    \ notify a SIP node that an event which\n   has been requested by an earlier SUBSCRIBE\
    \ method has occurred.  It\n   may also provide further details about the event.\n"
- title: 7.2. New Headers
  contents:
  - "7.2. New Headers\n   This table expands on tables 2 and 3 in SIP [1], as amended\
    \ by the\n   changes described in section 7.1.\n   Header field      where proxy\
    \ ACK BYE CAN INV OPT REG PRA SUB NOT\n   -----------------------------------------------------------------\n\
    \   Allow-Events        R          o   o   -   o   o   o   o   o   o\n   Allow-Events\
    \       2xx         -   o   -   o   o   o   o   o   o\n   Allow-Events       489\
    \         -   -   -   -   -   -   -   m   m\n   Event               R        \
    \  -   -   -   -   -   -   -   m   m\n   Subscription-State  R          -   -\
    \   -   -   -   -   -   -   m\n"
- title: 7.2.1. "Event" header
  contents:
  - "7.2.1. \"Event\" header\n   Event is added to the definition of the element \"\
    message-header\" in\n   the SIP message grammar.\n   For the purposes of matching\
    \ responses and NOTIFY messages with\n   SUBSCRIBE messages, the event-type portion\
    \ of the \"Event\" header is\n   compared byte-by-byte, and the \"id\" parameter\
    \ token (if present) is\n   compared byte-by-byte.  An \"Event\" header containing\
    \ an \"id\"\n   parameter never matches an \"Event\" header without an \"id\"\
    \ parameter.\n   No other parameters are considered when performing a comparison.\n\
    \      Note that the forgoing text means that \"Event: foo; id=1234\" would\n\
    \      match \"Event: foo; param=abcd; id=1234\", but not \"Event: foo\" (id\n\
    \      does not match) or \"Event: Foo; id=1234\" (event portion does not\n  \
    \    match).\n   This document does not define values for event-types.  These\
    \ values\n   will be defined by individual event packages, and MUST be registered\n\
    \   with the IANA.\n   There MUST be exactly one event type listed per event header.\n\
    \   Multiple events per message are disallowed.\n"
- title: 7.2.2. "Allow-Events" Header
  contents:
  - "7.2.2. \"Allow-Events\" Header\n   Allow-Events is added to the definition of\
    \ the element \"general-\n   header\" in the SIP message grammar.  Its usage is\
    \ described in\n   section 3.3.7.\n"
- title: 7.2.3. "Subscription-State" Header
  contents:
  - "7.2.3. \"Subscription-State\" Header\n   Subscription-State is added to the definition\
    \ of the element\n   \"request-header\" in the SIP message grammar.  Its usage\
    \ is described\n   in section 3.2.4.\n"
- title: 7.3. New Response Codes
  contents:
  - '7.3. New Response Codes

    '
- title: 7.3.1. "202 Accepted" Response Code
  contents:
  - "7.3.1. \"202 Accepted\" Response Code\n   The 202 response is added to the \"\
    Success\" header field definition.\n   \"202 Accepted\" has the same meaning as\
    \ that defined in HTTP/1.1 [3].\n"
- title: 7.3.2. "489 Bad Event" Response Code
  contents:
  - "7.3.2. \"489 Bad Event\" Response Code\n   The 489 event response is added to\
    \ the \"Client-Error\" header field\n   definition. \"489 Bad Event\" is used\
    \ to indicate that the server did\n   not understand the event package specified\
    \ in a \"Event\" header field.\n"
- title: 7.4. Augmented BNF Definitions
  contents:
  - "7.4. Augmented BNF Definitions\n   The Augmented BNF definitions for the various\
    \ new and modified syntax\n   elements follows.  The notation is as used in SIP\
    \ [1], and any\n   elements not defined in this section are as defined in SIP\
    \ and the\n   documents to which it refers.\n   SUBSCRIBEm        = %x53.55.42.53.43.52.49.42.45\
    \ ; SUBSCRIBE in caps\n   NOTIFYm           = %x4E.4F.54.49.46.59 ; NOTIFY in\
    \ caps\n   extension-method  = SUBSCRIBEm / NOTIFYm / token\n   Event        \
    \     =  ( \"Event\" / \"o\" ) HCOLON event-type\n                        *( SEMI\
    \ event-param )\n   event-type        =  event-package *( \".\" event-template\
    \ )\n   event-package     =  token-nodot\n   event-template    =  token-nodot\n\
    \   token-nodot       =  1*( alphanum / \"-\"  / \"!\" / \"%\" / \"*\"\n     \
    \                       / \"_\" / \"+\" / \"`\" / \"'\" / \"~\" )\n   event-param\
    \       =  generic-param / ( \"id\" EQUAL token )\n   Allow-Events =  ( \"Allow-Events\"\
    \ / \"u\" ) HCOLON event-type\n                   *(COMMA event-type)\n   Subscription-State\
    \   = \"Subscription-State\" HCOLON substate-value\n                         \
    \ *( SEMI subexp-params )\n   substate-value       = \"active\" / \"pending\"\
    \ / \"terminated\"\n                          / extension-substate\n   extension-substate\
    \   = token\n   subexp-params        =   (\"reason\" EQUAL event-reason-value)\n\
    \                          / (\"expires\" EQUAL delta-seconds)\n             \
    \             / (\"retry-after\" EQUAL delta-seconds)\n                      \
    \    / generic-param\n   event-reason-value   =   \"deactivated\"\n          \
    \                / \"probation\"\n                          / \"rejected\"\n \
    \                         / \"timeout\"\n                          / \"giveup\"\
    \n                          / \"noresource\"\n                          / event-reason-extension\n\
    \   event-reason-extension = token\n"
- title: 8. Normative References
  contents:
  - "8. Normative References\n   [1]   Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M. and E. Schooler,\
    \ \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \   Petrack, S. and L. Conroy, \"The PINT Service Protocol\", RFC\n         2848,\
    \ June 2000.\n   [3]   Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter,\
    \ L.,\n         Leach, P. and T. Berners-Lee, \"Hypertext Transfer Protocol --\n\
    \         HTTP/1.1\", RFC 2616, June 1999.\n   [4]   Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing an IANA\n         Considerations Section in RFCs\"\
    , BCP 26, RFC 2434, October\n         1998.\n   [5]   Bradner, S., \"Key Words\
    \ for Use in RFCs to Indicate Requirement\n         Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [6]   Day, M., Aggarwal, S., Mohr, G. and J. Vincent, \"Instant\n\
    \         Messaging/Presence Protocol Requirements\", RFC 2779, February\n   \
    \      2000.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [7]   Rosenberg, J. and H. Schulzrinne, \"Guidelines\
    \ for Authors of\n         SIP Extensions\", Work in Progress.\n   [8]   Schulzrinne,\
    \ H. and J. Rosenberg, \"SIP Caller Preferences and\n         Callee Capabilities\"\
    , Work in Progress.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   Thanks to the participants in the Events BOF at the\
    \ 48th IETF meeting\n   in Pittsburgh, as well as those who gave ideas and suggestions\
    \ on the\n   SIP Events mailing list.  In particular, I wish to thank Henning\n\
    \   Schulzrinne of Columbia University for coming up with the final\n   three-tiered\
    \ event identification scheme, Sean Olson for\n   miscellaneous guidance, Jonathan\
    \ Rosenberg for a thorough scrubbing\n   of the -00 draft, and the authors of\
    \ the \"SIP Extensions for\n   Presence\" document for their input to SUBSCRIBE\
    \ and NOTIFY request\n   semantics.\n"
- title: 11.  Notice Regarding Intellectual Property Rights
  contents:
  - "11.  Notice Regarding Intellectual Property Rights\n   The IETF has been notified\
    \ of intellectual property rights claimed in\n   regard to some or all of the\
    \ specification contained in this\n   document.  For more information, consult\
    \ the online list of claimed\n   rights at http://www.ietf.org/ipr.html\n"
- title: 12.  Author's Address
  contents:
  - "12.  Author's Address\n   Adam Roach\n   dynamicsoft\n   5100 Tennyson Parkway\n\
    \   Suite 1200\n   Plano, TX 75024\n   USA\n   EMail: adam@dynamicsoft.com\n \
    \  Voice: sip:adam@dynamicsoft.com\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
