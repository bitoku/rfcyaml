- contents:
  - '                           YANG Schema Mount

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a mechanism that adds the schema trees defined\n
    \  by a set of YANG modules onto a mount point defined in the schema\n   tree
    in another YANG module.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8528.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Terminology and Notation ........................................6\n      2.1.
    Tree Diagrams ..............................................7\n      2.2. Namespace
    Prefixes .........................................7\n   3. Schema Mount ....................................................8\n
    \     3.1. Mount Point Definition .....................................8\n      3.2.
    Data Model .................................................9\n      3.3. Specification
    of the Mounted Schema ........................9\n      3.4. Multiple Levels of
    Schema Mount ...........................10\n   4. Referring to Data Nodes in the
    Parent Schema ...................10\n   5. RPC Operations and Notifications ...............................11\n
    \  6. NMDA Considerations ............................................12\n   7.
    Interaction with NACM ..........................................12\n   8. Implementation
    Notes ...........................................13\n   9. Schema Mount YANG Module
    .......................................13\n   10. IANA Considerations ...........................................18\n
    \  11. Security Considerations .......................................18\n   12.
    References ....................................................19\n      12.1.
    Normative References .....................................19\n      12.2. Informative
    References ...................................21\n   Appendix A.  Example: Device
    Model with LNEs and NIs ..............22\n     A.1.  Physical Device ...........................................22\n
    \    A.2.  Logical Network Elements ..................................24\n     A.3.
    \ Network Instances .........................................27\n     A.4.  Invoking
    an RPC Operation .................................28\n   Contributors ......................................................28\n
    \  Authors' Addresses ................................................28\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Modularity and extensibility are among the leading design
    principles\n   of the YANG data modeling language.  As a result, the same YANG\n
    \  module can be combined with various sets of other modules to form a\n   data
    model that is tailored to meet the requirements of a specific\n   use case.  Server
    implementors are only required to specify all YANG\n   modules comprising the
    data model (together with their revisions and\n   other optional choices) in the
    YANG library data ([RFC7895],\n   [RFC8525], and Section 5.6.4 of [RFC7950]) implemented
    by the server.\n   Such YANG modules appear in the data model \"side by side\",
    i.e., top-\n   level data nodes of each module (if there are any) are also top-level\n
    \  nodes of the overall data model.\n   YANG has two mechanisms for contributing
    a schema hierarchy defined\n   elsewhere to the contents of an internal node of
    the schema tree.\n   These mechanisms are realized through the following YANG
    statements:\n   o  The \"uses\" statement explicitly incorporates the contents
    of a\n      grouping defined in the same or another module.  See Section 4.2.6\n
    \     of [RFC7950] for more details.\n   o  The \"augment\" statement explicitly
    adds contents to a target node\n      defined in the same or another module.  See
    Section 4.2.8 of\n      [RFC7950] for more details.\n   With both mechanisms,
    the YANG module with the \"uses\" or \"augment\"\n   statement explicitly defines
    the exact location in the schema tree\n   where the new nodes are placed.\n   In
    some cases, these mechanisms are not sufficient; it is sometimes\n   necessary
    for an existing module (or a set of modules) to be added to\n   the data model
    starting at locations other than the root.  For\n   example, YANG modules such
    as \"ietf-interfaces\" [RFC8343] are defined\n   so as to be used in a data model
    of a physical device.  Now suppose\n   we want to model a device that supports
    multiple logical devices\n   [RFC8530], each of which has its own instantiation
    of\n   \"ietf-interfaces\", and possibly other modules; at the same time, we\n
    \  want to be able to manage all these logical devices from the master\n   device.
    \ Hence, we would like to have a schema tree like this:\n     +--rw interfaces\n
    \    |  +--rw interface* [name]\n     |     ...\n     +--rw logical-network-element*
    [name]\n        +--rw name\n        |   ...\n        +--rw interfaces\n          +--rw
    interface* [name]\n             ...\n   With the \"uses\" approach, the complete
    schema tree of\n   \"ietf-interfaces\" would have to be wrapped in a grouping,
    and then\n   this grouping would have to be used at the top level (for the master\n
    \  device) and then also in the \"logical-network-element\" list (for the\n   logical
    devices).  This approach has several disadvantages:\n   o  It is not scalable
    because every time there is a new YANG module\n      that needs to be added to
    the logical device model, we have to\n      update the model for logical devices
    with another \"uses\" statement\n      pulling in contents of the new module.\n
    \  o  Absolute references to nodes defined inside a grouping may break\n      if
    the grouping is used in different locations.\n   o  Nodes defined inside a grouping
    belong to the namespace of the\n      module where it is used, which makes references
    to such nodes from\n      other modules difficult or even impossible.\n   o  It
    would be difficult for vendors to add proprietary modules when\n      the \"uses\"
    statements are defined in a standard module.\n   With the \"augment\" approach,
    \"ietf-interfaces\" would have to augment\n   the \"logical-network-element\"
    list with all its nodes and, at the\n   same time, define all its nodes at the
    top level.  The same hierarchy\n   of nodes would thus have to be defined twice,
    which is clearly not\n   scalable either.\n   This document introduces a new mechanism,
    denoted as \"schema mount\",\n   that allows for mounting one data model consisting
    of any number of\n   YANG modules at a specified location of another (parent)
    schema.\n   Unlike the \"uses\" and \"augment\" approaches discussed above, the\n
    \  mounted modules needn't be specially prepared for mounting;\n   consequently,
    existing modules such as \"ietf-interfaces\" can be\n   mounted without any modifications.\n
    \  The basic idea of schema mount is to label a data node in the parent\n   schema
    as the mount point and then define a complete data model to be\n   attached to
    the mount point so that the labeled data node effectively\n   becomes the root
    node of the mounted data model.\n   In principle, the mounted schema can be specified
    at three different\n   phases of the data model life cycle:\n   1.  Design time:
    The mounted schema is defined along with the mount\n       point in the parent
    YANG module.  In this case, the mounted\n       schema has to be the same for
    every implementation of the parent\n       module.\n   2.  Implementation time:
    The mounted schema is defined by a server\n       implementor and is as stable
    as the YANG library information of\n       the server.\n   3.  Run time: The mounted
    schema is defined by instance data that is\n       part of the mounted data model.
    \ If there are multiple instances\n       of the same mount point (e.g., in multiple
    entries of a list),\n       the mounted data model may be different for each instance.\n
    \  The schema mount mechanism defined in this document provides support\n   only
    for the latter two cases.  Design-time mounts are outside the\n   scope of this
    document and could be possibly dealt with in a future\n   revision of the YANG
    data modeling language.\n   Schema mount applies to the data model and specifically
    does not\n   assume anything about the source of instance data for the mounted\n
    \  schemas.  It may be implemented using the same instrumentation as the\n   rest
    of the system, or it may be implemented by querying some other\n   system.  Future
    specifications may define mechanisms to control or\n   monitor the implementation
    of specific mount points.\n   How and when specific mount points are instantiated
    by the server is\n   out of scope for this document.  Such mechanisms may be defined
    in\n   future specifications.\n   This document allows mounting of complete data
    models only.  Other\n   specifications may extend this model by defining additional\n
    \  mechanisms such as mounting sub-hierarchies of a module.\n   The YANG modules
    in this document conform to the Network Management\n   Datastore Architecture
    (NMDA) [RFC8342].\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology and Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
    RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
    as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
    in all\n   capitals, as shown here.\n   The following terms are defined in [RFC7950]
    and are not redefined\n   here:\n   o  action\n   o  container\n   o  data node\n
    \  o  list\n   o  RPC operation\n   o  schema node\n   o  schema tree\n   The
    following terms are defined in [RFC8342] and are not redefined\n   here:\n   o
    \ client\n   o  notification\n   o  operational state\n   o  server\n   The following
    term is defined in [RFC8343] and is not redefined here:\n   o  system-controlled
    interface\n   The following term is defined in [RFC8525] and is not redefined
    here:\n   o  YANG library content identifier\n   The following additional terms
    are used in this document:\n   o  mount point: A container or a list node whose
    definition contains\n      the \"mount-point\" extension statement.  The argument
    of the\n      \"mount-point\" extension statement defines a label for the mount\n
    \     point.\n   o  schema: A collection of schema trees with a common root.\n
    \  o  top-level schema: A schema rooted at the root node.\n   o  mounted schema:
    A schema rooted at a mount point.\n   o  parent schema (of a mounted schema):
    A schema containing the mount\n      point.\n   o  schema mount: The mechanism
    to combine data models defined in this\n      document.\n"
  - contents:
    - "2.1.  Tree Diagrams\n   Tree diagrams used in this document follow the notation
      defined in\n   [RFC8340].\n"
    title: 2.1.  Tree Diagrams
  - contents:
    - "2.2.  Namespace Prefixes\n   In this document, names of data nodes, YANG extensions,
      actions, and\n   other data model objects are often used without a prefix when
      the\n   YANG module in which they are defined is clear from the context.\n   Otherwise,
      names are prefixed using the standard prefix associated\n   with the corresponding
      YANG module, as shown in Table 1.\n        +---------+------------------------+----------------------+\n
      \       | Prefix  | YANG module            | Reference            |\n        +---------+------------------------+----------------------+\n
      \       | yangmnt | ietf-yang-schema-mount | Section 9            |\n        |
      inet    | ietf-inet-types        | [RFC6991]            |\n        | yang    |
      ietf-yang-types        | [RFC6991]            |\n        | yanglib | ietf-yang-library
      \     | [RFC7895], [RFC8525] |\n        +---------+------------------------+----------------------+\n
      \                       Table 1: Namespace Prefixes\n"
    title: 2.2.  Namespace Prefixes
  title: 2.  Terminology and Notation
- contents:
  - "3.  Schema Mount\n   The schema mount mechanism defined in this document provides
    a new\n   extensibility mechanism for use with YANG 1.1 [RFC7950].  In contrast\n
    \  to the existing mechanisms described in Section 1, schema mount\n   defines
    the relationship between the source and target YANG modules\n   outside these
    modules.\n"
  - contents:
    - "3.1.  Mount Point Definition\n   A container or list node becomes a mount point
      if the \"mount-point\"\n   extension statement (defined in the \"ietf-yang-schema-mount\"
      module)\n   is used in its definition.  This extension can appear only as a\n
      \  substatement of \"container\" and \"list\" statements.\n   The argument of
      the \"mount-point\" extension statement is a YANG\n   identifier that defines
      a label for the mount point.  A module MAY\n   contain multiple \"mount-point\"
      extension statements having the same\n   argument.\n   It is therefore up to
      the designer of the parent schema to decide\n   about the placement of mount
      points.  A mount point can also be made\n   conditional by placing \"if-feature\"
      and/or \"when\" as substatements of\n   the \"container\" or \"list\" statement
      that represents the mount point.\n   The \"mount-point\" extension statement
      MUST NOT be used in a YANG\n   version 1 module [RFC6020].  If used in a YANG
      version 1 module, it\n   would not be possible to invoke mounted RPC operations
      and receive\n   mounted notifications.  See Section 5 for details.  Note, however,\n
      \  that modules written in any YANG version, including version 1, can be\n   mounted
      under a mount point.\n   Note that the \"mount-point\" extension statement does
      not define a new\n   data node.\n"
    title: 3.1.  Mount Point Definition
  - contents:
    - "3.2.  Data Model\n   This document defines the YANG 1.1 module [RFC7950]\n
      \  \"ietf-yang-schema-mount\", which has the following structure:\n   module:
      ietf-yang-schema-mount\n     +--ro schema-mounts\n        +--ro namespace* [prefix]\n
      \       |  +--ro prefix    yang:yang-identifier\n        |  +--ro uri?      inet:uri\n
      \       +--ro mount-point* [module label]\n           +--ro module                 yang:yang-identifier\n
      \          +--ro label                  yang:yang-identifier\n           +--ro
      config?                boolean\n           +--ro (schema-ref)\n              +--:(inline)\n
      \             |  +--ro inline!\n              +--:(shared-schema)\n                 +--ro
      shared-schema!\n                    +--ro parent-reference*   yang:xpath1.0\n"
    title: 3.2.  Data Model
  - contents:
    - "3.3.  Specification of the Mounted Schema\n   Mounted schemas for all mount
      points in the parent schema are\n   determined from state data in the \"/schema-mounts\"
      container.\n   Generally, the modules that are mounted under a mount point have
      no\n   relation to the modules in the parent schema; specifically, if a\n   module
      is mounted, it may or may not be present in the parent schema;\n   if present,
      its data will generally have no relationship to the data\n   of the parent.
      \ Exceptions are possible and need to be defined in the\n   model itself.  For
      example, [RFC8530] defines a mechanism to bind\n   interfaces to mounted logical
      network elements.\n   The \"/schema-mounts\" container has the \"mount-point\"
      list as one of\n   its children.  Every entry of this list refers (through its
      key) to a\n   mount point and specifies the mounted schema.\n   If a mount point
      is defined in the parent schema but does not have an\n   entry in the \"mount-point\"
      list, then the mounted schema is void,\n   i.e., instances of that mount point
      MUST NOT contain any data except\n   those that are defined in the parent schema.\n
      \  If multiple mount points with the same name are defined in the same\n   module
      -- either directly or because the mount point is defined in a\n   grouping and
      the grouping is used multiple times -- then the\n   corresponding \"mount-point\"
      entry applies equally to all such mount\n   points.\n   The \"config\" property
      of mounted schema nodes is overridden and all\n   nodes in the mounted schema
      are read-only (\"config false\") if at\n   least one of the following conditions
      is satisfied for a mount point:\n   o  The mount point is itself defined as
      \"config false\".\n   o  The \"config\" leaf in the corresponding entry of the
      \"mount-point\"\n      list is set to \"false\".\n   An entry of the \"mount-point\"
      list can specify the mounted schema in\n   two different ways: \"inline\" or
      \"shared-schema\".\n   The mounted schema is determined at run time: every instance
      of the\n   mount point that exists in the operational state MUST contain a copy\n
      \  of YANG library data that defines the mounted schema in exactly the\n   same
      way as a top-level schema.  A client is expected to retrieve\n   this data from
      the instance tree.  In the \"inline\" case, instances of\n   the same mount
      point MAY use different mounted schemas, whereas in\n   the \"shared-schema\"
      case, all instances MUST use the same mounted\n   schema.  This means that in
      the \"shared-schema\" case, all instances\n   of the same mount point MUST have
      the same YANG library content\n   identifier.  In the \"inline\" case, if two
      instances have the same\n   YANG library content identifier, it is not guaranteed
      that the YANG\n   library contents are equal for these instances.\n   Examples
      of \"inline\" and \"shared-schema\" can be found in Appendix A.2\n   and Appendix
      A.3, respectively.\n"
    title: 3.3.  Specification of the Mounted Schema
  - contents:
    - "3.4.  Multiple Levels of Schema Mount\n   YANG modules in a mounted schema
      MAY again contain mount points under\n   which other schemas can be mounted.
      \ Consequently, it is possible to\n   construct data models with an arbitrary
      number of mounted schemas.  A\n   schema for a mount point contained in a mounted
      module can be\n   specified by implementing the \"ietf-yang-library\" and\n
      \  \"ietf-yang-schema-mount\" modules in the mounted schema and specifying\n
      \  the schemas in exactly the same way as the top-level schema.\n"
    title: 3.4.  Multiple Levels of Schema Mount
  title: 3.  Schema Mount
- contents:
  - "4.  Referring to Data Nodes in the Parent Schema\n   A fundamental design principle
    of schema mount is that the mounted\n   schema works exactly as a top-level schema,
    i.e., it is confined to\n   the \"mount jail\".  This means that all paths in
    the mounted schema\n   (in leafrefs, instance-identifiers, XPath [XPATH] expressions,
    and\n   target nodes of \"augment\" statements) are interpreted with the mount\n
    \  point as the root node.  YANG modules of the mounted schema as well\n   as
    corresponding instance data thus cannot refer to schema nodes or\n   instance
    data outside the \"mount jail\".\n   However, this restriction is sometimes too
    severe.  A typical example\n   is network instances (NIs) [RFC8529] in which each
    NI has its own\n   routing engine but the list of interfaces is global and shared
    by all\n   NIs.  If we want to model this organization with the NI schema\n   mounted
    using schema mount, the overall schema tree would look\n   schematically as follows:\n
    \    +--rw interfaces\n     |  +--rw interface* [name]\n     |     ...\n     +--rw
    network-instances\n        +--rw network-instance* [name]\n           +--rw name\n
    \          +--mp root\n              +--rw routing\n                 ...\n   Here,
    the \"root\" container is the mount point for the NI schema.\n   Routing configuration
    inside an NI often needs to refer to interfaces\n   (at least those that are assigned
    to the NI), which is impossible\n   unless such a reference can point to a node
    in the parent schema\n   (interface name).\n   Therefore, schema mount also allows
    for such references.  For every\n   mount point in the \"shared-schema\" case,
    it is possible to specify a\n   leaf-list named \"parent-reference\" that contains
    zero or more XPath\n   1.0 expressions.  Each expression is evaluated with the
    node in the\n   parent data tree where the mount point is defined as the context\n
    \  node.  The result of this evaluation MUST be a node-set (see the\n   description
    of the \"parent-reference\" node for a complete definition\n   of the evaluation
    context).  For the purposes of evaluating XPath\n   expressions within the mounted
    data tree, the union of all such node-\n   sets is added to the accessible data
    tree.\n   It is worth emphasizing that the nodes specified in the\n   \"parent-reference\"
    leaf-list are available in the mounted schema only\n   for XPath evaluations.
    \ In particular, they cannot be accessed in the\n   mounted schema via network
    management protocols such as NETCONF\n   [RFC6241] or RESTCONF [RFC8040].\n"
  title: 4.  Referring to Data Nodes in the Parent Schema
- contents:
  - "5.  RPC Operations and Notifications\n   If a mounted YANG module defines an
    RPC operation, clients can invoke\n   this operation as if it were defined as
    an action for the\n   corresponding mount point; see Section 7.15 of [RFC7950].
    \ An example\n   of this is given in Appendix A.4.\n   Similarly, if the server
    emits a notification defined at the top\n   level of any mounted module, it MUST
    be represented as if the\n   notification was connected to the mount point; see
    Section 7.16 of\n   [RFC7950].\n   Note that inline actions and notifications
    will not work when they\n   are contained within a list node without a \"key\"
    statement (see\n   Sections 7.15 and 7.16 of [RFC7950]).  Therefore, to be useful,
    mount\n   points that contain modules with RPCs, actions, and notifications\n
    \  SHOULD NOT have any ancestor node that is a list node without a \"key\"\n   statement.
    \ This requirement applies to the definition of modules\n   using the \"mount-point\"
    extension statement.\n"
  title: 5.  RPC Operations and Notifications
- contents:
  - "6.  NMDA Considerations\n   The schema mount solution presented in this document
    is designed to\n   work with both servers that implement the NMDA [RFC8342] and
    old\n   servers that don't implement the NMDA.\n   Specifically, a server that
    doesn't support the NMDA MAY implement\n   revision 2016-06-21 of \"ietf-yang-library\"
    [RFC7895] under a mount\n   point.  A server that supports the NMDA MUST implement
    at least\n   revision 2019-01-04 of \"ietf-yang-library\" [RFC8525] under a mount\n
    \  point.\n"
  title: 6.  NMDA Considerations
- contents:
  - "7.  Interaction with NACM\n   If the Network Configuration Access Control Model
    (NACM) [RFC8341] is\n   implemented on a server, it is used to control access
    to nodes\n   defined by the mounted schema in the same way as for nodes defined
    by\n   the top-level schema.\n   For example, suppose the module \"ietf-interfaces\"
    is mounted in the\n   \"root\" container in the \"logical-network-element\" list
    defined in\n   [RFC8530].  Then, the following NACM path can be used to control\n
    \  access to the \"interfaces\" container (where the character '\\' is used\n
    \  where a line break has been inserted for formatting reasons):\n     <path xmlns:lne=\n
    \            \"urn:ietf:params:xml:ns:yang:ietf-logical-network-element\"\n           xmlns:if=\"urn:ietf:params:xml:ns:yang:ietf-interfaces\">\n
    \      /lne:logical-network-elements\\\n         /lne:logical-network-element/lne:root/if:interfaces\n
    \    </path>\n"
  title: 7.  Interaction with NACM
- contents:
  - "8.  Implementation Notes\n   Network management of devices that use a data model
    with schema mount\n   can be implemented in different ways.  However, the following\n
    \  implementation options are envisioned as typical:\n   o  shared management:
    Instance data of both parent and mounted\n      schemas are accessible within
    the same management session.\n   o  split management: One (master) management
    session has access to\n      instance data of both parent and mounted schemas;
    in addition, an\n      extra session that has access only to the mounted data
    tree exists\n      for every instance of the mount point.\n"
  title: 8.  Implementation Notes
- contents:
  - "9.  Schema Mount YANG Module\n   This module references [RFC6991] and [RFC7950].\n
    \  <CODE BEGINS> file \"ietf-yang-schema-mount@2019-01-14.yang\"\n   module ietf-yang-schema-mount
    {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount\";\n
    \    prefix yangmnt;\n     import ietf-inet-types {\n       prefix inet;\n       reference\n
    \        \"RFC 6991: Common YANG Data Types\";\n     }\n     import ietf-yang-types
    {\n       prefix yang;\n       reference\n         \"RFC 6991: Common YANG Data
    Types\";\n     }\n     organization\n       \"IETF NETMOD (NETCONF Data Modeling
    Language) Working Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n
    \       WG List:  <mailto:netmod@ietf.org>\n        Editor:   Martin Bjorklund\n
    \                 <mailto:mbj@tail-f.com>\n        Editor:   Ladislav Lhotka\n
    \                 <mailto:lhotka@nic.cz>\";\n     description\n       \"This module
    defines a YANG extension statement that can be used\n        to incorporate data
    models defined in other YANG modules in a\n        module.  It also defines operational
    state data that specify the\n        overall structure of the data model.\n        The
    key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n        NOT', 'SHOULD',
    'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n        'MAY', and 'OPTIONAL'
    in this document are to be interpreted as\n        described in BCP 14 (RFC 2119)
    (RFC 8174) when, and only when,\n        they appear in all capitals, as shown
    here.\n        Copyright (c) 2019 IETF Trust and the persons identified as\n        authors
    of the code.  All rights reserved.\n        Redistribution and use in source and
    binary forms, with or\n        without modification, is permitted pursuant to,
    and subject to\n        the license terms contained in, the Simplified BSD License
    set\n        forth in Section 4.c of the IETF Trust's Legal Provisions\n        Relating
    to IETF Documents\n        (https://trustee.ietf.org/license-info).\n        This
    version of this YANG module is part of RFC 8528;\n        see the RFC itself for
    full legal notices.\";\n     revision 2019-01-14 {\n       description\n         \"Initial
    revision.\";\n       reference\n         \"RFC 8528: YANG Schema Mount\";\n     }\n
    \    /*\n      * Extensions\n      */\n     extension mount-point {\n       argument
    label;\n       description\n         \"The argument 'label' is a YANG identifier,
    i.e., it is of the\n          type 'yang:yang-identifier'.\n          The 'mount-point'
    statement MUST NOT be used in a YANG\n          version 1 module, neither explicitly
    nor via a 'uses'\n          statement.\n          The 'mount-point' statement
    MAY be present as a substatement\n          of 'container' and 'list' and MUST
    NOT be present elsewhere.\n          There MUST NOT be more than one 'mount-point'
    statement in a\n          given 'container' or 'list' statement.\n          If
    a mount point is defined within a grouping, its label is\n          bound to the
    module where the grouping is used.\n          A mount point defines a place in
    the node hierarchy where\n          other data models may be attached.  A server
    that implements a\n          module with a mount point populates the\n          '/schema-mounts/mount-point'
    list with detailed information on\n          which data models are mounted at
    each mount point.\n          Note that the 'mount-point' statement does not define
    a new\n          data node.\";\n     }\n     /*\n      * State data nodes\n      */\n
    \    container schema-mounts {\n       config false;\n       description\n         \"Contains
    information about the structure of the overall\n          mounted data model implemented
    in the server.\";\n       list namespace {\n         key \"prefix\";\n         description\n
    \          \"This list provides a mapping of namespace prefixes that are\n            used
    in XPath expressions of 'parent-reference' leafs to the\n            corresponding
    namespace URI references.\";\n         leaf prefix {\n           type yang:yang-identifier;\n
    \          description\n             \"Namespace prefix.\";\n         }\n         leaf
    uri {\n           type inet:uri;\n           description\n             \"Namespace
    URI reference.\";\n         }\n       }\n       list mount-point {\n         key
    \"module label\";\n         description\n           \"Each entry of this list
    specifies a schema for a particular\n            mount point.\n            Each
    mount point MUST be defined using the 'mount-point'\n            extension in
    one of the modules listed in the server's\n            YANG library instance with
    conformance type 'implement'.\";\n         leaf module {\n           type yang:yang-identifier;\n
    \          description\n             \"Name of a module containing the mount point.\";\n
    \        }\n         leaf label {\n           type yang:yang-identifier;\n           description\n
    \            \"Label of the mount point defined using the 'mount-point'\n              extension.\";\n
    \        }\n         leaf config {\n           type boolean;\n           default
    \"true\";\n           description\n             \"If this leaf is set to 'false',
    then all data nodes in the\n              mounted schema are read-only ('config
    false'), regardless\n              of their 'config' property.\";\n         }\n
    \        choice schema-ref {\n           mandatory true;\n           description\n
    \            \"Alternatives for specifying the schema.\";\n           container
    inline {\n             presence\n               \"A complete self-contained schema
    is mounted at the\n                mount point.\";\n             description\n
    \              \"This node indicates that the server has mounted at least\n                the
    module 'ietf-yang-library' at the mount point, and\n                its instantiation
    provides the information about the\n                mounted schema.\n                Different
    instances of the mount point may have\n                different schemas mounted.\";\n
    \          }\n           container shared-schema {\n             presence\n               \"The
    mounted schema together with the 'parent-reference'\n                make up the
    schema for this mount point.\";\n             description\n               \"This
    node indicates that the server has mounted at least\n                the module
    'ietf-yang-library' at the mount point, and\n                its instantiation
    provides the information about the\n                mounted schema.  When XPath
    expressions in the mounted\n                schema are evaluated, the 'parent-reference'
    leaf-list\n                is taken into account.\n                Different instances
    of the mount point MUST have the\n                same schema mounted.\";\n             leaf-list
    parent-reference {\n               type yang:xpath1.0;\n               description\n
    \                \"Entries of this leaf-list are XPath 1.0 expressions\n                  that
    are evaluated in the following context:\n                  - The context node
    is the node in the parent data tree\n                    where the mount-point
    is defined.\n                  - The accessible tree is the parent data tree\n
    \                   *without* any nodes defined in modules that are\n                    mounted
    inside the parent schema.\n                  - The context position and context
    size are both equal\n                    to 1.\n                  - The set of
    variable bindings is empty.\n                  - The function library is the core
    function library\n                    defined in the W3C XPath 1.0 document\n
    \                   (http://www.w3.org/TR/1999/REC-xpath-19991116) and\n                    the
    functions defined in Section 10 of RFC 7950.\n                  - The set of namespace
    declarations is defined by the\n                    'namespace' list under 'schema-mounts'.\n
    \                 Each XPath expression MUST evaluate to a node-set\n                  (possibly
    empty).  For the purposes of evaluating\n                  XPath expressions whose
    context nodes are defined in\n                  the mounted schema, the union
    of all these node-sets\n                  together with ancestor nodes are added
    to the\n                  accessible data tree.\n                  Note that in
    the case 'ietf-yang-schema-mount' is\n                  itself mounted, a 'parent-reference'
    in the mounted\n                  module may refer to nodes that were brought
    into the\n                  accessible tree through a 'parent-reference' in the\n
    \                 parent schema.\";\n             }\n           }\n         }\n
    \      }\n     }\n   }\n   <CODE ENDS>\n"
  title: 9.  Schema Mount YANG Module
- contents:
  - "10.  IANA Considerations\n   This document registers a URI in the \"IETF XML
    Registry\" [RFC3688].\n        URI: urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount\n
    \       Registrant Contact: The IESG.\n        XML: N/A, the requested URI is
    an XML namespace.\n   This document registers a YANG module in the \"YANG Module
    Names\"\n   registry [RFC6020].\n     name:        ietf-yang-schema-mount\n     namespace:
    \  urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount\n     prefix:      yangmnt\n
    \    reference:   RFC 8528\n"
  title: 10.  IANA Considerations
- contents:
  - "11.  Security Considerations\n   The YANG module specified in this document defines
    a schema for data\n   that is designed to be accessed via network management protocols
    such\n   as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF layer\n
    \  is the secure transport layer, and the mandatory-to-implement secure\n   transport
    is Secure Shell (SSH) [RFC6242].  The lowest RESTCONF layer\n   is HTTPS, and
    the mandatory-to-implement secure transport is TLS\n   [RFC8446].\n   The Network
    Configuration Access Control Model (NACM) [RFC8341]\n   provides the means to
    restrict access for particular NETCONF or\n   RESTCONF users to a preconfigured
    subset of all available NETCONF or\n   RESTCONF protocol operations and content.\n
    \  Some of the readable data nodes in this YANG module may be considered\n   sensitive
    or vulnerable in some network environments.  It is thus\n   important to control
    read access (e.g., via get, get-config, or\n   notification) to these data nodes.
    \ These are the subtrees and data\n   nodes and their sensitivity/vulnerability:\n
    \  o  /schema-mounts: The schema defined by this state data provides\n      detailed
    information about a server implementation that may help\n      an attacker identify
    the server capabilities and server\n      implementations with known bugs.  Server
    vulnerabilities may be\n      specific to particular modules included in the schema,
    module\n      revisions, module features, or even module deviations.  For\n      example,
    if a particular operation on a particular data node is\n      known to cause a
    server to crash or significantly degrade device\n      performance, then the schema
    information will help an attacker\n      identify server implementations with
    such a defect, in order to\n      launch a denial-of-service attack on the device.\n
    \  It is important to take into account the security considerations for\n   all
    nodes in the mounted schemas and to control access to these nodes\n   by using
    the mechanism described in Section 7.\n   Care must be taken when the \"parent-reference\"
    XPath expressions are\n   constructed, since the result of the evaluation of these
    expressions\n   is added to the accessible tree for any XPath expression found
    in the\n   mounted schema.\n"
  title: 11.  Security Considerations
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI
      10.17487/RFC3688, January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n
      \  [RFC6020]  Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n              the
      Network Configuration Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020,
      October 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n   [RFC6241]
      \ Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and
      A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\",
      RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n
      \  [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n              Shell
      (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n              <https://www.rfc-editor.org/info/rfc6242>.\n
      \  [RFC6991]  Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n              RFC
      6991, DOI 10.17487/RFC6991, July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n
      \  [RFC7895]  Bierman, A., Bjorklund, M., and K. Watsen, \"YANG Module\n              Library\",
      RFC 7895, DOI 10.17487/RFC7895, June 2016,\n              <https://www.rfc-editor.org/info/rfc7895>.\n
      \  [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n
      \             RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n
      \  [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n              Protocol\",
      RFC 8040, DOI 10.17487/RFC8040, January 2017,\n              <https://www.rfc-editor.org/info/rfc8040>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8341]  Bierman, A. and M.
      Bjorklund, \"Network Configuration\n              Access Control Model\", STD
      91, RFC 8341,\n              DOI 10.17487/RFC8341, March 2018,\n              <https://www.rfc-editor.org/info/rfc8341>.\n
      \  [RFC8342]  Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,\n              and
      R. Wilton, \"Network Management Datastore Architecture\n              (NMDA)\",
      RFC 8342, DOI 10.17487/RFC8342, March 2018,\n              <https://www.rfc-editor.org/info/rfc8342>.\n
      \  [RFC8446]  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n
      \             Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n
      \             <https://www.rfc-editor.org/info/rfc8446>.\n   [RFC8525]  Bierman,
      A., Bjorklund, M., Schoenwaelder, J., Watsen, K.,\n              and R. Wilton,
      \"YANG Library\", RFC 8525,\n              DOI 10.17487/RFC8525, March 2019,\n
      \             <https://www.rfc-editor.org/info/rfc8525>.\n   [XPATH]    Clark,
      J. and S. DeRose, \"XML Path Language (XPath)\n              Version 1.0\",
      World Wide Web Consortium Recommendation\n              REC-xpath-19991116,
      November 1999,\n              <http://www.w3.org/TR/1999/REC-xpath-19991116>.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [DEVICE-YANG]\n              Lindem, A.,
      Ed., Berger, L., Ed., Bogdanovic, D., and C.\n              Hopps, \"Network
      Device YANG Logical Organization\", Work in\n              Progress, draft-ietf-rtgwg-device-model-02,
      March 2017.\n   [IS-IS-YANG]\n              Litkowski, S., Yeung, D., Lindem,
      A., Zhang, J., and L.\n              Lhotka, \"YANG Data Model for IS-IS protocol\",
      Work in\n              Progress, draft-ietf-isis-yang-isis-cfg-34, January 2019.\n
      \  [RFC8340]  Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n              BCP
      215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n              <https://www.rfc-editor.org/info/rfc8340>.\n
      \  [RFC8343]  Bjorklund, M., \"A YANG Data Model for Interface\n              Management\",
      RFC 8343, DOI 10.17487/RFC8343, March 2018,\n              <https://www.rfc-editor.org/info/rfc8343>.\n
      \  [RFC8529]  Berger, L., Hopps, C., Lindem, A., Bogdanovic, D., and\n              X.
      Liu, \"YANG Data Model for Network Instances\", RFC 8529,\n              DOI
      10.17487/RFC8529, March 2019,\n              <https://www.rfc-editor.org/info/rfc8529>.\n
      \  [RFC8530]  Berger, L., Hopps, C., Lindem, A., Bogdanovic, D., and\n              X.
      Liu, \"YANG Model for Logical Network Elements\",\n              RFC 8530, DOI
      10.17487/RFC8530, March 2019,\n              <https://www.rfc-editor.org/info/rfc8530>.\n
      \  [YANG-MOUNT]\n              Clemm, A., Voit, E., and J. Medved, \"Mounting
      YANG-Defined\n              Information from Remote Datastores\", Work in Progress,\n
      \             draft-clemm-netmod-mount-06, March 2017.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Appendix A.  Example: Device Model with LNEs and NIs\n   This non-normative example
    demonstrates an implementation of the\n   device model as specified in Section
    2 of [DEVICE-YANG], using both\n   logical network elements (LNEs) and network
    instances (NIs).\n   In these examples, the character '\\' is used where a line
    break has\n   been inserted for formatting reasons.\n"
  - contents:
    - "A.1.  Physical Device\n   The data model for the physical device may be described
      by this YANG\n   library content, assuming the server supports the NMDA:\n   {\n
      \     \"ietf-yang-library:yang-library\": {\n        \"content-id\": \"14e2ab5dc325f6d86f743e8d3ade233f1a61a899\",\n
      \       \"module-set\": [\n          {\n            \"name\": \"physical-device-modules\",\n
      \           \"module\": [\n              {\n                \"name\": \"ietf-datastores\",\n
      \               \"revision\": \"2018-02-14\",\n                \"namespace\":\n
      \                 \"urn:ietf:params:xml:ns:yang:ietf-datastores\"\n              },\n
      \             {\n                \"name\": \"iana-if-type\",\n                \"revision\":
      \"2015-06-12\",\n                \"namespace\": \"urn:ietf:params:xml:ns:yang:iana-if-type\"\n
      \             },\n              {\n                \"name\": \"ietf-interfaces\",\n
      \               \"revision\": \"2018-02-20\",\n                \"feature\":
      [\"arbitrary-names\", \"pre-provisioning\" ],\n                \"namespace\":\n
      \                 \"urn:ietf:params:xml:ns:yang:ietf-interfaces\"\n              },\n
      \             {\n                \"name\": \"ietf-ip\",\n                \"revision\":
      \"2018-02-22\",\n                \"namespace\": \"urn:ietf:params:xml:ns:yang:ietf-ip\"\n
      \             },\n              {\n                \"name\": \"ietf-logical-network-element\",\n
      \               \"revision\": \"2018-03-20\",\n                \"feature\":
      [ \"bind-lne-name\" ],\n                \"namespace\":\n                  \"urn:ietf:params:xml:ns:yang:\\\n
      \                 ietf-logical-network-element\"\n              },\n              {\n
      \               \"name\": \"ietf-yang-library\",\n                \"revision\":
      \"2019-01-04\",\n                \"namespace\":\n                  \"urn:ietf:params:xml:ns:yang:ietf-yang-library\"\n
      \             },\n              {\n                \"name\": \"ietf-yang-schema-mount\",\n
      \               \"revision\": \"2019-01-14\",\n                \"namespace\":\n
      \                 \"urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount\"\n              }\n
      \           ],\n            \"import-only-module\": [\n              {\n                \"name\":
      \"ietf-inet-types\",\n                \"revision\": \"2013-07-15\",\n                \"namespace\":\n
      \                 \"urn:ietf:params:xml:ns:yang:ietf-inet-types\"\n              },\n
      \             {\n                \"name\": \"ietf-yang-types\",\n                \"revision\":
      \"2013-07-15\",\n                \"namespace\":\n                  \"urn:ietf:params:xml:ns:yang:ietf-yang-types\"\n
      \             }\n            ]\n          }\n        ],\n        \"schema\":
      [\n          {\n            \"name\": \"physical-device-schema\",\n            \"module-set\":
      [ \"physical-device-modules\" ]\n          }\n        ],\n        \"datastore\":
      [\n          {\n            \"name\": \"ietf-datastores:running\",\n            \"schema\":
      \"physical-device-schema\"\n          },\n          {\n            \"name\":
      \"ietf-datastores:operational\",\n            \"schema\": \"physical-device-schema\"\n
      \         }\n        ]\n      }\n   }\n"
    title: A.1.  Physical Device
  - contents:
    - "A.2.  Logical Network Elements\n   Each LNE can have a specific data model
      that is determined at run\n   time, so it is appropriate to mount it using the
      \"inline\" method.\n   Hence, the following \"schema-mounts\" data is used:\n
      \  {\n     \"ietf-yang-schema-mount:schema-mounts\": {\n       \"mount-point\":
      [\n         {\n           \"module\": \"ietf-logical-network-element\",\n           \"label\":
      \"root\",\n           \"inline\": {}\n         }\n       ]\n     }\n   }\n   An
      administrator of the host device has to configure an entry for\n   each LNE
      instance, for example:\n   {\n     \"ietf-interfaces:interfaces\": {\n       \"interface\":
      [\n         {\n           \"name\": \"eth0\",\n           \"type\": \"iana-if-type:ethernetCsmacd\",\n
      \          \"enabled\": true,\n           \"ietf-logical-network-element:bind-lne-name\":
      \"eth0\"\n         }\n       ]\n     },\n     \"ietf-logical-network-element:logical-network-elements\":
      {\n       \"logical-network-element\": [\n         {\n           \"name\": \"lne-1\",\n
      \          \"managed\": true,\n           \"description\": \"LNE with NIs\",\n
      \          \"root\": {\n             ...\n           }\n         }\n         ...\n
      \      ]\n     }\n   }\n   and then also place necessary state data as the contents
      of the\n   \"root\" instance, which should include at least:\n   o  YANG library
      data specifying the LNE's data model, for example,\n      assuming the server
      does not implement the NMDA:\n   {\n     \"ietf-yang-library:modules-state\":
      {\n       \"module-set-id\": \"9358e11874068c8be06562089e94a89e0a392019\",\n
      \      \"module\": [\n         {\n           \"name\": \"iana-if-type\",\n           \"revision\":
      \"2014-05-08\",\n           \"namespace\": \"urn:ietf:params:xml:ns:yang:iana-if-type\",\n
      \          \"conformance-type\": \"implement\"\n         },\n         {\n           \"name\":
      \"ietf-inet-types\",\n           \"revision\": \"2013-07-15\",\n           \"namespace\":
      \"urn:ietf:params:xml:ns:yang:ietf-inet-types\",\n           \"conformance-type\":
      \"import\"\n         },\n         {\n           \"name\": \"ietf-interfaces\",\n
      \          \"revision\": \"2014-05-08\",\n           \"feature\": [\n             \"arbitrary-names\",\n
      \            \"pre-provisioning\"\n           ],\n           \"namespace\":
      \"urn:ietf:params:xml:ns:yang:ietf-interfaces\",\n           \"conformance-type\":
      \"implement\"\n         },\n         {\n           \"name\": \"ietf-ip\",\n
      \          \"revision\": \"2014-06-16\",\n           \"feature\": [\n             \"ipv6-privacy-autoconf\"\n
      \          ],\n           \"namespace\": \"urn:ietf:params:xml:ns:yang:ietf-ip\",\n
      \          \"conformance-type\": \"implement\"\n         },\n         {\n           \"name\":
      \"ietf-network-instance\",\n           \"revision\": \"2018-03-20\",\n           \"feature\":
      [\n             \"bind-network-instance-name\"\n           ],\n           \"namespace\":\n
      \            \"urn:ietf:params:xml:ns:yang:ietf-network-instance\",\n           \"conformance-type\":
      \"implement\"\n         },\n         {\n           \"name\": \"ietf-yang-library\",\n
      \          \"revision\": \"2016-06-21\",\n           \"namespace\": \"urn:ietf:params:xml:ns:yang:ietf-yang-library\",\n
      \          \"conformance-type\": \"implement\"\n         },\n         {\n           \"name\":
      \"ietf-yang-schema-mount\",\n           \"revision\": \"2019-01-14\",\n           \"namespace\":\n
      \            \"urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount\",\n           \"conformance-type\":
      \"implement\"\n         },\n         {\n           \"name\": \"ietf-yang-types\",\n
      \          \"revision\": \"2013-07-15\",\n           \"namespace\": \"urn:ietf:params:xml:ns:yang:ietf-yang-types\",\n
      \          \"conformance-type\": \"import\"\n         }\n       ]\n     }\n
      \  }\n   o  state data for interfaces assigned to the LNE instance (that\n      effectively
      become system-controlled interfaces for the LNE), for\n      example:\n   {\n
      \    \"ietf-interfaces:interfaces\": {\n       \"interface\": [\n         {\n
      \          \"name\": \"eth0\",\n           \"type\": \"iana-if-type:ethernetCsmacd\",\n
      \          \"oper-status\": \"up\",\n           \"statistics\": {\n             \"discontinuity-time\":
      \"2016-12-16T17:11:27+02:00\"\n           },\n           \"ietf-ip:ipv6\": {\n
      \            \"address\": [\n               {\n                 \"ip\": \"fe80::42a8:f0ff:fea8:24fe\",\n
      \                \"origin\": \"link-layer\",\n                 \"prefix-length\":
      64\n               }\n             ]\n           }\n         }\n       ]\n     }\n
      \  }\n"
    title: A.2.  Logical Network Elements
  - contents:
    - "A.3.  Network Instances\n   Assuming that network instances share the same
      data model, it can be\n   mounted using the \"shared-schema\" method as follows:\n
      \  {\n     \"ietf-yang-schema-mount:schema-mounts\": {\n       \"namespace\":
      [\n         {\n             \"prefix\": \"if\",\n             \"uri\": \"urn:ietf:params:xml:ns:yang:ietf-interfaces\"\n
      \        },\n         {\n             \"prefix\": \"ni\",\n             \"uri\":
      \"urn:ietf:params:xml:ns:yang:ietf-network-instance\"\n         }\n       ],\n
      \      \"mount-point\": [\n         {\n           \"module\": \"ietf-network-instance\",\n
      \          \"label\": \"root\",\n             \"shared-schema\": {\n               \"parent-reference\":
      [\n                 \"/if:interfaces/if:interface[\\\n                 ni:bind-network-instance-name
      = current()/../ni:name]\"\n               ]\n             }\n         }\n       ]\n
      \    }\n   }\n   Note also that the \"ietf-interfaces\" module appears in the\n
      \  \"parent-reference\" leaf-list for the mounted NI schema.  This means\n   that
      references to LNE interfaces, such as \"outgoing-interface\" in\n   static routes,
      are valid despite the fact that \"ietf-interfaces\"\n   isn't part of the NI
      schema.\n"
    title: A.3.  Network Instances
  - contents:
    - "A.4.  Invoking an RPC Operation\n   Assume that the mounted NI data model also
      implements the \"ietf-isis\"\n   module [IS-IS-YANG].  An RPC operation defined
      in this module, such\n   as \"clear-adjacency\", can be invoked by a client
      session of an LNE's\n   RESTCONF server as an action tied to the mount point
      of a particular\n   network instance using a request URI like this (all on one
      line):\n     POST /restconf/data/ietf-network-instance:network-instances/\n
      \        network-instance=rtrA/root/ietf-isis:clear-adjacency HTTP/1.1\n"
    title: A.4.  Invoking an RPC Operation
  title: 'Appendix A.  Example: Device Model with LNEs and NIs'
- contents:
  - "Contributors\n   The idea of having some way to combine schemas from different
    YANG\n   modules into one has been proposed independently by others:\n   o  Authors
    of [YANG-MOUNT]:\n      *  Lou Berger, LabN Consulting, L.L.C., <lberger@labn.net>\n
    \     *  Alexander Clemm, Huawei, <alexander.clemm@huawei.com>\n      *  Christian
    Hopps, Deutsche Telekom, <chopps@chopps.org>\n   o  Jan Medved, Cisco, <jmedved@cisco.com>\n
    \  o  Eric Voit, Cisco, <evoit@cisco.com>\n"
  title: Contributors
- contents:
  - "Authors' Addresses\n   Martin Bjorklund\n   Tail-f Systems\n   Email: mbj@tail-f.com\n
    \  Ladislav Lhotka\n   CZ.NIC\n   Email: lhotka@nic.cz\n"
  title: Authors' Addresses
