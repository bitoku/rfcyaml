- title: __initial_text__
  contents:
  - "                   TCP Friendly Rate Control (TFRC):\n                     The\
    \ Small-Packet (SP) Variant\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document proposes a mechanism for further experimentation,\
    \ but\n   not for widespread deployment at this time in the global Internet.\n\
    \   TCP-Friendly Rate Control (TFRC) is a congestion control mechanism\n   for\
    \ unicast flows operating in a best-effort Internet environment\n   (RFC 3448).\
    \  TFRC was intended for applications that use a fixed\n   packet size, and was\
    \ designed to be reasonably fair when competing\n   for bandwidth with TCP connections\
    \ using the same packet size.  This\n   document proposes TFRC-SP, a Small-Packet\
    \ (SP) variant of TFRC, that\n   is designed for applications that send small\
    \ packets.  The design\n   goal for TFRC-SP is to achieve the same bandwidth in\
    \ bps (bits per\n   second) as a TCP flow using packets of up to 1500 bytes. \
    \ TFRC-SP\n   enforces a minimum interval of 10 ms between data packets to prevent\n\
    \   a single flow from sending small packets arbitrarily frequently.\n   Flows\
    \ using TFRC-SP compete reasonably fairly with large-packet TCP\n   and TFRC flows\
    \ in environments where large-packet flows and small-\n   packet flows experience\
    \ similar packet drop rates.  However, in\n   environments where small-packet\
    \ flows experience lower packet drop\n   rates than large-packet flows (e.g.,\
    \ with Drop-Tail queues in units\n   of bytes), TFRC-SP can receive considerably\
    \ more than its share of\n   the bandwidth.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Conventions .....................................................5\n  \
    \ 3. TFRC-SP Congestion Control ......................................5\n   4.\
    \ TFRC-SP Discussion ..............................................9\n      4.1.\
    \ Response Functions and Throughput Equations ................9\n      4.2. Accounting\
    \ for Header Size ................................12\n      4.3. The TFRC-SP Min\
    \ Interval ..................................13\n      4.4. Counting Packet Losses\
    \ ....................................14\n      4.5. The Nominal Packet Size ...................................15\n\
    \           4.5.1. Packet Size and Packet Drop Rates ..................15\n  \
    \         4.5.2. Fragmentation and the Path MTU .....................17\n    \
    \       4.5.3. The Nominal Segment Size and the Path MTU ..........17\n      4.6.\
    \ The Loss Interval Length for Short Loss Intervals .........18\n   5. A Comparison\
    \ with RFC 3714 .....................................19\n   6. TFRC-SP with Applications\
    \ that Modify the Packet Size ..........19\n   7. Simulations ....................................................20\n\
    \   8. General Discussion .............................................21\n  \
    \ 9. Security Considerations ........................................22\n   10.\
    \ Conclusions ...................................................23\n   11. Acknowledgements\
    \ ..............................................24\n   Appendix A. Related Work\
    \ on Small-Packet Variants of TFRC .........25\n   Appendix B. Simulation Results\
    \ ....................................26\n      B.1. Simulations with Configured\
    \ Packet Drop Rates .............26\n      B.2. Simulations with Configured Byte\
    \ Drop Rates ...............30\n      B.3. Packet Dropping Behavior at Routers\
    \ with Drop-Tail\n           Queues ....................................................32\n\
    \      B.4. Packet Dropping Behavior at Routers with AQM ..............37\n  \
    \ Appendix C. Exploring Possible Oscillations in the Loss Event\n      Rate ...........................................................42\n\
    \   Appendix D. A Discussion of Packet Size and Packet Dropping .......43\n  \
    \ Normative References ..............................................44\n   Informative\
    \ References ............................................44\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies TFRC-SP, an experimental, Small-Packet\n\
    \   variant of TCP-friendly Rate Control (TFRC) [RFC3448].\n   TFRC was designed\
    \ to be reasonably fair when competing for bandwidth\n   with TCP flows, but to\
    \ avoid the abrupt changes in the sending rate\n   characteristic of TCP's congestion\
    \ control mechanisms.  TFRC is\n   intended for applications such as streaming\
    \ media applications where\n   a relatively smooth sending rate is of importance.\
    \  Conventional TFRC\n   measures loss rates by estimating the loss event ratio\
    \ as described\n   in [RFC3448], and uses this loss event rate to determine the\
    \ sending\n   rate in packets per round-trip time.  This has consequences for\
    \ the\n   rate that a TFRC flow can achieve when sharing a bottleneck with\n \
    \  large-packet TCP flows.  In particular, a low-bandwidth, small-packet\n   TFRC\
    \ flow sharing a bottleneck with high-bandwidth, large-packet TCP\n   flows may\
    \ be forced to slow down, even though the TFRC application's\n   nominal rate\
    \ in bytes per second is less than the rate achieved by\n   the TCP flows.  Intuitively,\
    \ this would be \"fair\" only if the network\n   limitation was in packets per\
    \ second (such as a routing lookup),\n   rather than bytes per second (such as\
    \ link bandwidth).  Conventional\n   wisdom is that many of the network limitations\
    \ in today's Internet\n   are in bytes per second, even though the network limitations\
    \ of the\n   future might move back towards limitations in packets per second.\n\
    \   TFRC-SP is intended for flows that need to send frequent small\n   packets,\
    \ with less than 1500 bytes per packet, limited by a minimum\n   interval between\
    \ packets of 10 ms.  It will better support\n   applications that do not want\
    \ their sending rates in bytes per second\n   to suffer from their use of small\
    \ packets.  This variant is\n   restricted to applications that send packets no\
    \ more than once every\n   10 ms (the Min Interval or minimum interval).  Given\
    \ this\n   restriction, TFRC-SP effectively calculates the TFRC fair rate as if\n\
    \   the bottleneck restriction was in bytes per second.  Applications\n   using\
    \ TFRC-SP could have a fixed or naturally-varying packet size, or\n   could vary\
    \ their packet size in response to congestion.  Applications\n   that are not\
    \ willing to be limited by a minimum interval of 10 ms\n   between packets, or\
    \ that want to send packets larger than 1500 bytes,\n   should not use TFRC-SP.\
    \  However, for applications with a minimum\n   interval of at least 10 ms between\
    \ packets and with data packets of\n   at most 1500 bytes, the performance of\
    \ TFRC-SP should be at least as\n   good as that from TFRC.\n   RFC 3448, the\
    \ protocol specification for TFRC, stated that TFRC-PS\n   (for TFRC-PacketSize),\
    \ a variant of TFRC for applications that have a\n   fixed sending rate but vary\
    \ their packet size in response to\n   congestion, would be specified in a later\
    \ document.  This document\n   instead specifies TFRC-SP, a variant of TFRC designed\
    \ for\n   applications that send small packets, where applications could either\n\
    \   have a fixed or varying packet size or could adapt their packet size\n   in\
    \ response to congestion.  However, as discussed in Section 6 of\n   this document,\
    \ there are many questions about how such an adaptive\n   application would use\
    \ TFRC-SP that are beyond the scope of this\n   document, and that would need\
    \ to be addressed in documents that are\n   more application-specific.\n   TFRC-SP\
    \ is motivated in part by the approach in RFC 3714, which\n   argues that it is\
    \ acceptable for VoIP flows to assume that the\n   network limitation is in bytes\
    \ per second (Bps) rather in packets per\n   second (pps), and to have the same\
    \ sending rate in bytes per second\n   as a TCP flow with 1500-byte packets and\
    \ the same packet drop rate.\n   RFC 3714 states the following:\n      \"While\
    \ the ideal would be to have a transport protocol that is\n      able to detect\
    \ whether the bottleneck links along the path are\n      limited in Bps or in\
    \ pps, and to respond appropriately when the\n      limitation is in pps, such\
    \ an ideal is hard to achieve.  We would\n      not want to delay the deployment\
    \ of congestion control for\n      telephony traffic until such an ideal could\
    \ be accomplished.  In\n      addition, we note that the current TCP congestion\
    \ control\n      mechanisms are themselves not very effective in an environment\n\
    \      where there is a limitation along the reverse path in pps.  While\n   \
    \   the TCP mechanisms do provide an incentive to use large data\n      packets,\
    \ TCP does not include any effective congestion control\n      mechanisms for\
    \ the stream of small acknowledgement packets on the\n      reverse path.  Given\
    \ the arguments above, it seems acceptable to\n      us to assume a network limitation\
    \ in Bps rather than in pps in\n      considering the minimum sending rate of\
    \ telephony traffic.\"\n   Translating the discussion in [RFC3714] to the congestion\
    \ control\n   mechanisms of TFRC, it seems acceptable to standardize a variant\
    \ of\n   TFRC that allows low-bandwidth flows sending small packets to achieve\n\
    \   a rough fairness with TCP flows in terms of the sending rate in Bps,\n   rather\
    \ than in terms of the sending rate in pps.  This is\n   accomplished by TFRC-SP,\
    \ a small modification to TFRC, as described\n   below.\n   Maintaining incentives\
    \ for large packets: Because the bottlenecks in\n   the network in fact can include\
    \ limitations in pps as well as in Bps,\n   we pay special attention to the potential\
    \ dangers of encouraging a\n   large deployment of best-effort traffic in the\
    \ Internet consisting\n   entirely of small packets.  This is discussed in more\
    \ detail in\n   Section 4.3. In addition, as again discussed in Section 4.3, TFRC-SP\n\
    \   includes the limitation of the Min Interval between packets of 10 ms.\n  \
    \ Packet drop rates as a function of packet size: TFRC-SP essentially\n   assumes\
    \ that the small-packet TFRC-SP flow receives roughly the same\n   packet drop\
    \ rate as a large-packet TFRC or TCP flow.  As we show,\n   this assumption is\
    \ not necessarily correct for all environments in\n   the Internet.\n   Initializing\
    \ the Loss History after the First Loss Event: Section\n   6.3.1 of RFC 3448 specifies\
    \ that the TFRC receiver initializes the\n   loss history after the first loss\
    \ event by calculating the loss\n   interval that would be required to produce\
    \ the receive rate measured\n   over the most recent round-trip time.  In calculating\
    \ this loss\n   interval, TFRC-SP uses the segment size of 1460 bytes, rather\
    \ than\n   the actual segment size used in the connection.\n   Calculating the\
    \ loss event rate for TFRC-SP: TFRC-SP requires a\n   modification in TFRC's calculation\
    \ of the loss event rate, because a\n   TFRC-SP connection can send many small\
    \ packets when a standard TFRC\n   or TCP connection would send a single large\
    \ packet.  It is not\n   possible for a standard TFRC or TCP connection to repeatedly\
    \ send\n   multiple packets per round-trip time in the face of a high packet\n\
    \   drop rate.  As a result, TCP and standard TFRC only respond to a\n   single\
    \ loss event per round-trip time, and are still able to detect\n   and respond\
    \ to increasingly heavy packet loss rates.  However, in a\n   highly-congested\
    \ environment, when a TCP connection might be sending,\n   on average, one large\
    \ packet per round-trip time, a corresponding\n   TFRC-SP connection might be\
    \ sending many small packets per round-trip\n   time.  As a result, in order to\
    \ maintain fairness with TCP, and to be\n   able to detect changes in the degree\
    \ of congestion, TFRC-SP needs to\n   be sensitive to the actual packet drop rate\
    \ during periods of high\n   congestion.  This is discussed in more detail in\
    \ the section below.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  TFRC-SP Congestion Control
  contents:
  - "3.  TFRC-SP Congestion Control\n   TFRC uses the TCP throughput equation given\
    \ in Section 3.1 of\n   [RFC3448], which gives the allowed sending rate X in bytes\
    \ per second\n   as a function of the loss event rate, segment size, and round-trip\n\
    \   time.  [RFC3448] specifies that the segment size s used in the\n   throughput\
    \ equation should be the segment size used by the\n   application, or the estimated\
    \ mean segment size if there are\n   variations in the segment size depending\
    \ on the data.  This gives\n   rough fairness with TCP flows using the same segment\
    \ size.\n   TFRC-SP changes this behavior in the following ways.\n   o  The nominal\
    \ segment size: The nominal segment size s defaults to\n      1460 bytes.  Following\
    \ [RFC3714], this provides a goal of\n      fairness, in terms of the sending\
    \ rate in bytes per second, with a\n      TCP flow with 1460 bytes of application\
    \ data per packet but with\n      the same packet drop rate.  If the endpoint\
    \ knows the MTU (Maximum\n      Transmission Unit) of the path and the derived\
    \ MSS (Maximum\n      Segment Size) is less than 1460 bytes, then the endpoint\
    \ SHOULD\n      set the nominal segment size s to MSS bytes.  In addition, if\
    \ the\n      endpoint knows the MTU of the path and the resulting MSS is less\n\
    \      than 536 bytes, then the endpoint MUST set the nominal segment\n      size\
    \ s to MSS bytes.\n      However, this document does not require that TFRC-SP\
    \ endpoints\n      determine the path MTU.  While most paths allow an MSS of 1460\n\
    \      bytes, some paths have a slightly smaller MSS due to tunnels\n      (e.g.,\
    \ IPv6 over IPv4).  In some specific cases, IPv4 paths may\n      experience a\
    \ much smaller path MTU.  Due to the complications of\n      estimating the path\
    \ MTU, and to the fact that most paths support\n      an MSS of at least 536 bytes,\
    \ TFRC-SP as a default uses a nominal\n      segment size of 1460 bytes.  The\
    \ nominal segment size is discussed\n      in more detail in Section 4.5.3.\n\
    \   o  Taking packet headers into account: The allowed transmit rate X in\n  \
    \    bytes per second is reduced by a factor that accounts for packet\n      header\
    \ size.  This gives the application some incentive, beyond\n      the Min Interval,\
    \ not to use unnecessarily small packets.  In\n      particular, we introduce\
    \ a new parameter H, which represents the\n      expected size in bytes of network\
    \ and transport headers to be used\n      on the TFRC connection's packets.  This\
    \ is used to reduce the\n      allowed transmit rate X as follows:\n      X :=\
    \ X * s_true / (s_true + H),\n      where s_true is the true average data segment\
    \ size for the\n      connection in bytes, excluding the transport and network\
    \ headers.\n      Section 4.1 of RFC 3448 states that where the packet size varies\n\
    \      naturally with the data, an estimate of the mean segment size can\n   \
    \   be used for s_true.  As suggested in Section 4.1 of [RFC3448bis],\n      when\
    \ an estimate of the mean segment size is used for s_true, the\n      estimate\
    \ SHOULD be calculated over at least the last four loss\n      intervals.  However,\
    \ this document does not specify a specific\n      algorithm for estimating the\
    \ mean segment size.\n      The H parameter is set to the constant 40 bytes. \
    \ Thus, if the\n      TFRC-SP application used 40-byte data segments, the allowed\n\
    \      transmit rate X would be halved to account for the fact that half\n   \
    \   of the sending rate would be used by the headers.  Section 4.2\n      justifies\
    \ this definition.  However, a connection using TFRC-SP\n      MAY instead use\
    \ a more precise estimate of H, based on the actual\n      network and transport\
    \ headers to be used on the connection's\n      packets.  For example, a Datagram\
    \ Congestion Control Protocol\n      (DCCP) connection [RFC4340] over IPv4, where\
    \ data packets use the\n      DCCP-Data packet type, and there are no IP or DCCP\
    \ options, could\n      set H to 20 + 12 = 32 bytes.  However, if the TFRC implementation\n\
    \      knows that the IP layer is using IPv6 instead of IPv4, then the\n     \
    \ connection using TFRC-SP MAY still use the default estimate of 40\n      bytes\
    \ for H instead of the actual size of 60 bytes, for simplicity\n      of implementation.\n\
    \   o  Measuring the loss event rate in times of high loss: During short\n   \
    \   loss intervals (those at most two round-trip times), the loss rate\n     \
    \ is computed by counting the actual number of packets lost or\n      marked,\
    \ not by counting at most one loss event per loss interval.\n      Without this\
    \ change, TFRC-SP could send multiple packets per\n      round-trip time even\
    \ in the face of heavy congestion, for a\n      steady-state behavior of multiple\
    \ packets dropped each round-trip\n      time.\n      In standard TFRC, the TFRC\
    \ receiver estimates the loss event rate\n      by calculating the average loss\
    \ interval in packets, and inverting\n      to get the loss event rate.  Thus,\
    \ for a short loss interval with\n      N packets and K losses, standard TFRC\
    \ calculates the size of that\n      loss interval as N packets, contributing\
    \ to a loss event rate of\n      1/N.  However, for TFRC-SP, for small loss intervals\
    \ of at most\n      two round-trip times, if the loss interval consists of N packets\n\
    \      including K losses, the size of the loss interval is calculated as\n  \
    \    N/K, contributing to a loss event rate of K/N instead of 1/N.\n      Section\
    \ 5.4 of RFC 3448 specifies that the calculation of the\n      average loss interval\
    \ includes the most recent loss interval only\n      if this increases the calculated\
    \ average loss interval, as in the\n      pseudocode below.  However, in TFRC-SP\
    \ the calculated loss\n      interval size for a short loss interval varies as\
    \ a function of\n      the number of packet losses that have been detected, allowing\n\
    \      either increases or decreases in the calculated loss interval size\n  \
    \    for the current short loss interval as new packets are received.\n      Therefore,\
    \ TFRC-SP adds the restriction that the calculation of\n      the average loss\
    \ interval can include the most recent loss\n      interval only if more than\
    \ two round-trip times have passed since\n      the beginning of that loss interval.\n\
    \      Let the most recent loss intervals be I_0 to I_n, with I_0 being\n    \
    \  the interval including the most recent loss event, with the\n      corresponding\
    \ weights w_i as defined in RFC 3448.  In RFC 3448\n      (Section 5.4), the average\
    \ loss interval I_mean is calculated as\n      follows:\n                  I_tot0\
    \ = 0;\n                  I_tot1 = 0;\n                  W_tot = 0;\n        \
    \          for (i = 0 to n-1) {\n                    I_tot0 = I_tot0 + (I_i *\
    \ w_i);\n                    W_tot = W_tot + w_i;\n                  }\n     \
    \             for (i = 1 to n) {\n                    I_tot1 = I_tot1 + (I_i *\
    \ w_(i-1));\n                  }\n                  I_tot = max(I_tot0, I_tot1);\n\
    \                  I_mean = I_tot/W_tot;\n   In TFRC-SP, the average loss interval\
    \ I_mean is instead calculated as\n   follows:\n                  I_tot0 = 0;\n\
    \                  I_tot1 = 0;\n                  W_tot = 0;\n               \
    \   for (i = 0 to n-1) {\n                    I_tot0 = I_tot0 + (I_i * w_i);\n\
    \                    W_tot = W_tot + w_i;\n                  }\n             \
    \     for (i = 1 to n) {\n                    I_tot1 = I_tot1 + (I_i * w_(i-1));\n\
    \                  }\n                  If the current loss interval I_0 is \"\
    short\"\n                    then I_tot = I_tot1;\n                    else I_tot\
    \ = max(I_tot0, I_tot1);\n                  I_mean = I_tot/W_tot;\n   o  A minimum\
    \ interval between packets: TFRC-SP enforces a Min\n      Interval between packets\
    \ of 10 ms.  A flow that wishes its\n      transport protocol to exceed this Min\
    \ Interval MUST use the\n      conventional TFRC equations, rather than TFRC-SP.\
    \  The motivation\n      for this is discussed below.\n"
- title: 4.  TFRC-SP Discussion
  contents:
  - '4.  TFRC-SP Discussion

    '
- title: 4.1.  Response Functions and Throughput Equations
  contents:
  - "4.1.  Response Functions and Throughput Equations\n   TFRC uses the TCP throughput\
    \ equation given in [RFC3448], with the\n   sending rate X in bytes per second\
    \ as follows:\n                                   s\n         X = -------------------------------------------------------\
    \ ,\n             R*sqrt(2*p/3) + (4*R* (3*sqrt(3*p/8) * p * (1+32*p^2)))\n  \
    \ where:\n      s is the packet size in bytes;\n      R is the round-trip time\
    \ in seconds;\n      p is the loss event rate, between 0 and 1.0, of the number\
    \ of loss\n      events as a fraction of the number of packets transmitted.\n\
    \   This equation uses a retransmission timeout (RTO) of 4*R, and assumes\n  \
    \ that the TCP connection sends an acknowledgement for every data\n   packet.\n\
    \   This equation essentially gives the response function for TCP as well\n  \
    \ as for standard TFRC (modulo TCP's range of sender algorithms for\n   setting\
    \ the RTO).  As shown in Table 1 of [RFC3714], for high packet\n   drop rates,\
    \ this throughput equation gives rough fairness with the\n   most aggressive possible\
    \ current TCP: a SACK TCP flow using\n   timestamps and Explicit Congestion Notification\
    \ (ECN).  Because it is\n   not recommended for routers to use ECN-marking in\
    \ highly-congested\n   environments with high packet dropping/marking rates (Section\
    \ 7 of\n   [RFC3168]), we note that it would be useful to have a throughput\n\
    \   equation with a somewhat more moderate sending rate for packet drop\n   rates\
    \ of 40% and above.\n   The effective response function of TFRC-SP can be derived\
    \ from the\n   TFRC response function by using a segment size s of 1460 bytes,\
    \ and\n   using the loss event rate actually experienced by the TFRC-SP flow.\n\
    \   In addition, for loss intervals of at most two round-trip times, the\n   loss\
    \ event rate for TFRC-SP is estimated by counting the actual\n   number of lost\
    \ or marked packets, rather than by counting loss\n   events.  In addition, the\
    \ sending rate for TFRC-SP is constrained to\n   be at most 100 packets per second.\n\
    \   For an environment with a fixed packet drop rate p, regardless of\n   packet\
    \ size, the response functions of TCP, TFRC, and TFRC-SP are\n   illustrated as\
    \ follows, given in KBps (kilobytes per second), for a\n   flow with a round-trip\
    \ time of 100 ms:\n                          <--  TCP and Standard TFRC  -->\n\
    \               Packet     14-byte    536-byte   1460-byte\n               DropRate\
    \   Segments   Segments   Segments\n               --------   --------   --------\
    \   --------\n               0.00001       209.25    2232.00    5812.49\n    \
    \           0.00003       120.79    1288.41    3355.24\n               0.00010\
    \        66.12     705.25    1836.58\n               0.00030        38.10    \
    \ 406.44    1058.45\n               0.00100        20.74     221.23     576.12\n\
    \               0.00300        11.76     125.49     326.79\n               0.01000\
    \         6.07      64.75     168.61\n               0.03000         2.99    \
    \  31.90      83.07\n               0.10000         0.96      10.21      26.58\n\
    \               0.20000         0.29       3.09       8.06\n               0.30000\
    \         0.11       1.12       2.93\n               0.40000         0.05    \
    \   0.48       1.26\n               0.50000         0.02       0.24       0.63\n\
    \              Table 1: Response Function for TCP and TFRC.\n        Sending Rate\
    \ in KBps, as a Function of Packet Drop Rate.\n                          <----------\
    \  TFRC-SP  -------->\n               Packet     14-byte    536-byte   1460-byte\n\
    \               DropRate   Segments   Segments   Segments\n               --------\
    \   --------   --------   --------\n               0.00001       5.40      57.60\
    \     150.00\n               0.00003       5.40      57.60     150.00\n      \
    \         0.00010       5.40      57.60     150.00\n               0.00030   \
    \    5.40      57.60     150.00\n               0.00100       5.40      57.60\
    \     150.00\n               0.00300       5.40      57.60     150.00\n      \
    \         0.01000       5.40      57.60     150.00\n               0.03000   \
    \    5.40      57.60      83.07\n               0.10000       5.40      26.58\
    \      26.58\n               0.20000       5.40       8.06       8.06\n      \
    \         0.30000       2.93       2.93       2.93\n               0.40000   \
    \    1.26       1.26       1.26\n               0.50000       0.63       0.63\
    \       0.63\n                Table 2: Response Function for TFRC-SP.\n      \
    \  Sending Rate in KBps, as a Function of Packet Drop Rate.\n            Maximum\
    \ Sending Rate of 100 Packets per Second.\n   The calculations for Tables 1 and\
    \ 2 use the packet loss rate for an\n   approximation for the loss event rate\
    \ p.  Scripts and graphs for the\n   tables are available from [VOIPSIMS].  As\
    \ the well-known TCP response\n   function in Table 1 shows, the sending rate\
    \ for TCP and standard TFRC\n   varies linearly with segment size.  The TFRC-SP\
    \ response function\n   shown in Table 2 reflects the maximum sending rate of\
    \ a hundred\n   packets per second; when not limited by this maximum sending rate,\n\
    \   the TFRC-SP flow receives the same sending rate in KBps as the TCP\n   flow\
    \ with 1460-byte segments, given the same packet drop rate.\n   Simulations showing\
    \ the TCP, standard TFRC, and TFRC-SP sending rates\n   in response to a configured\
    \ packet drop rate are given in Tables 7,\n   8, and 9, and are consistent with\
    \ the response functions shown here.\n                            <--  TCP and\
    \ Standard TFRC  -->\n               Byte         14-byte    536-byte   1460-byte\n\
    \               DropRate     Segments   Segments   Segments\n               --------\
    \     --------   --------   --------\n               0.0000001     284.76    \
    \ 929.61    1498.95\n               0.0000003     164.39     536.17     863.16\n\
    \               0.0000010      90.01     292.64     468.49\n               0.0000030\
    \      51.92     167.28     263.68\n               0.0000100      28.34      88.56\
    \     132.75\n               0.0000300      16.21      46.67      61.70\n    \
    \           0.0001000       8.60      19.20      16.25\n               0.0003000\
    \       4.56       4.95       1.70\n               0.0010000       1.90      \
    \ 0.37       0.15\n               0.0030000       0.52       0.05       0.06\n\
    \               0.0100000       0.04       0.02       0.06\n               0.0300000\
    \       0.00       0.02       0.06\n               Table 3: Response Function\
    \ for TCP and TFRC.\n         Sending Rate in KBps, as a Function of Byte Drop\
    \ Rate.\n                            <----------  TFRC-SP  -------->\n       \
    \        Byte         14-byte    536-byte   1460-byte\n               DropRate\
    \     Segments   Segments   Segments\n               --------     --------   --------\
    \   --------\n               0.0000001       5.40      57.60     150.00\n    \
    \           0.0000003       5.40      57.60     150.00\n               0.0000010\
    \       5.40      57.60     150.00\n               0.0000030       5.40      57.60\
    \     150.00\n               0.0000100       5.40      57.60     132.75\n    \
    \           0.0000300       5.40      57.60      61.70\n               0.0001000\
    \       5.40      50.00      16.25\n               0.0003000       5.40      12.89\
    \       1.70\n               0.0010000       5.40       0.95       0.15\n    \
    \           0.0030000       5.40       0.12       0.06\n               0.0100000\
    \       1.10       0.06       0.06\n               0.0300000       0.13      \
    \ 0.06       0.06\n                 Table 4: Response Function for TFRC-SP.\n\
    \         Sending Rate in KBps, as a Function of Byte Drop Rate.\n           \
    \ Maximum Sending Rate of 100 Packets per Second.\n   For Tables 3 and 4, the\
    \ packet drop rate is calculated as 1-(1-b)^N,\n   for a byte drop rate of b,\
    \ and a packet size of N bytes.  These\n   tables use the packet loss rate as\
    \ an approximation for the loss\n   event rate p.  The TCP response functions\
    \ shown in Table 3 for fixed\n   byte drop rates are rather different from the\
    \ response functions\n   shown in Table 1 for fixed packet drop rates; with higher\
    \ byte drop\n   rates, a TCP connection can have a higher sending rate using\n\
    \   *smaller* packets.  Table 4 also shows that with fixed byte drop\n   rates,\
    \ the sending rate for TFRC-SP can be significantly higher than\n   that for TCP\
    \ or standard TFRC, regardless of the TCP segment size.\n   This is because in\
    \ this environment, with small packets, TFRC-SP\n   receives a small packet drop\
    \ rate, but is allowed to send at the\n   sending rate of a TCP or standard TFRC\
    \ flow using larger packets but\n   receiving the same packet drop rate.\n   Simulations\
    \ showing TCP, standard TFRC, and TFRC-SP sending rates in\n   response to a configured\
    \ byte drop rate are given in Appendix B.2.\n"
- title: 4.2.  Accounting for Header Size
  contents:
  - "4.2.  Accounting for Header Size\n   [RFC3714] makes the optimistic assumption\
    \ that the limitation of the\n   network is in bandwidth in bytes per second (Bps),\
    \ and not in CPU\n   cycles or in packets per second (pps).  However, some attention\
    \ must\n   be paid to the load in pps as well as to the load in Bps.  Even aside\n\
    \   from the Min Interval, TFRC-SP gives the application some incentive\n   to\
    \ use fewer but larger packets, when larger packets would suffice,\n   by including\
    \ the bandwidth used by the packet header in the allowed\n   sending rate.\n \
    \  As an example, a sender using 120-byte packets needs a TCP-friendly\n   rate\
    \ of 128 Kbps to send 96 Kbps of application data.  This is\n   because the TCP-friendly\
    \ rate is reduced by a factor of\n   s_true/(s_true + H) = 120/160, to account\
    \ for the effect of packet\n   headers.  If the sender suddenly switched to 40-byte\
    \ data segments,\n   the allowed sending rate would reduce to 64 Kbps of application\
    \ data;\n   and the use of one-byte data segments would reduce the allowed\n \
    \  sending rate to 3.12 Kbps of application data.  (In fact, the Min\n   Interval\
    \ would prevent senders from achieving these rates, since\n   applications using\
    \ TFRC-SP cannot send more than 100 packets per\n   second.)\n   Unless it has\
    \ a more precise estimate of the header size, TFRC-SP\n   assumes 40 bytes for\
    \ the header size, although the header could be\n   larger (due to IP options,\
    \ IPv6, IP tunnels, and the like) or smaller\n   (due to header compression) on\
    \ the wire.  Requiring the use of the\n   exact header size in bytes would require\
    \ significant additional\n   complexity, and would have little additional benefit.\
    \  TFRC-SP's\n   default assumption of a 40-byte header is sufficient to get a\
    \ rough\n   estimate of the throughput, and to give the application some\n   incentive\
    \ not to use an excessive amount of small packets.  Because\n   we are only aiming\
    \ at rough fairness, and at a rough incentive for\n   applications, the default\
    \ use of a 40-byte header in the calculations\n   of the header bandwidth is sufficient\
    \ for both IPv4 and IPv6.\n"
- title: 4.3.  The TFRC-SP Min Interval
  contents:
  - "4.3.  The TFRC-SP Min Interval\n   The header size calculation provides an incentive\
    \ for applications to\n   use fewer, but larger, packets.  Another incentive is\
    \ that when the\n   path limitation is in pps, the application using more small\
    \ packets\n   is likely to cause higher packet drop rates, and to have to reduce\n\
    \   its sending rate accordingly.  That is, if the congestion is in terms\n  \
    \ of pps, then the flow sending more pps will increase the packet drop\n   rate,\
    \ and have to adjust its sending rate accordingly.  However, the\n   increased\
    \ congestion caused by the use of small packets in an\n   environment limited\
    \ by pps is experienced not only by the flow using\n   the small packets, but\
    \ by all of the competing traffic on that\n   congested link.  These incentives\
    \ are therefore insufficient to\n   provide sufficient protection for pps network\
    \ limitations.\n   TFRC-SP, then, includes a Min Interval of 10 ms.  This provides\n\
    \   additional restrictions on the amount of small packets used.\n   One practical\
    \ justification for the Min Interval is that the\n   applications that currently\
    \ want to send small packets are the VoIP\n   applications that send at most one\
    \ packet every 10 ms, so this\n   restriction does not affect current traffic.\
    \  A second justification\n   is that there is no pressing need for best-effort\
    \ traffic in the\n   current Internet to send small packets more frequently than\
    \ once\n   every 10 ms (rather than taking the 10 ms delay at the sender, and\n\
    \   merging the two small packets into one larger one).  This 10 ms delay\n  \
    \ for merging small packets is likely to be dominated by the network\n   propagation,\
    \ transmission, and queueing delays of best-effort traffic\n   in the current\
    \ Internet.  As a result, our judgment would be that the\n   benefit to the user\
    \ of having less than 10 ms between packets is\n   outweighed by the benefit to\
    \ the network of avoiding an excessive\n   amount of small packets.\n   The Min\
    \ Interval causes TFRC-SP not to support applications sending\n   small packets\
    \ very frequently.  Consider a TFRC flow with a fixed\n   packet size of 100 bytes,\
    \ but with a variable sending rate and a\n   fairly uncongested path.  When this\
    \ flow is sending at most 100 pps,\n   it would be able to use TFRC-SP.  If the\
    \ flow wishes to increase its\n   sending rate to more than 100 pps, but keep\
    \ the same packet size, it\n   would no longer be able to achieve this with TFRC-SP,\
    \ and would have\n   to switch to the default TFRC, receiving a dramatic, discontinuous\n\
    \   decrease in its allowed sending rate.  This seems not only\n   acceptable,\
    \ but desirable for the global Internet.\n   What is to prevent flows from opening\
    \ multiple connections, each with\n   a 10 ms Min Interval, thereby getting around\
    \ the limitation of the\n   Min Interval?  Obviously, there is nothing to prevent\
    \ flows from\n   doing this, just as there is currently nothing to prevent flows\
    \ from\n   using UDP, or from opening multiple parallel TCP connections, or from\n\
    \   using their own congestion control mechanism.  Of course,\n   implementations\
    \ or middleboxes are also free to limit the number of\n   parallel TFRC connections\
    \ opened to the same destination in times of\n   congestion, if that seems desirable.\
    \  And flows that open multiple\n   parallel connections are subject to the inconveniences\
    \ of reordering\n   and the like.\n"
- title: 4.4.  Counting Packet Losses
  contents:
  - "4.4.  Counting Packet Losses\n   It is not possible for a TCP connection to persistently\
    \ send multiple\n   packets per round-trip time in the face of high congestion,\
    \ with a\n   steady-state with multiple packets dropped per round-trip time. \
    \ For\n   TCP, when one or more packets are dropped each round-trip time, the\n\
    \   sending rate is quickly dropped to less than one packet per round-\n   trip\
    \ time.  In addition, for TCP with Tahoe, NewReno, or SACK\n   congestion control\
    \ mechanisms, the response to congestion is largely\n   independent of the number\
    \ of packets dropped per round-trip time.\n   As a result, standard TFRC can best\
    \ achieve fairness with TCP, even\n   in highly congested environments, by calculating\
    \ the loss event rate\n   rather than the packet drop rate, where a loss event\
    \ is one or more\n   packets dropped or marked from a window of data.\n   However,\
    \ with TFRC-SP, it is no longer possible to achieve fairness\n   with TCP or with\
    \ standard TFRC by counting only the loss event rate\n   [WBL04].  Instead of\
    \ sending one large packet per round-trip time,\n   TFRC-SP could be sending N\
    \ small packets (where N small packets equal\n   one large 1500-byte packet).\
    \  The loss measurement used with TFRC-SP\n   has to be able to detect a connection\
    \ that is consistently receiving\n   multiple packet losses or marks per round-trip\
    \ time, to allow TFRC-SP\n   to respond appropriately.\n   In TFRC-SP, the loss\
    \ event rate is calculated by counting at most one\n   loss event in loss intervals\
    \ longer than two round-trip times, and by\n   counting each packet lost or marked\
    \ in shorter loss intervals.  In\n   particular, for a short loss interval with\
    \ N packets, including K\n   lost or marked packets, the loss interval length\
    \ is calculated as\n   N/K, instead of as N.  The average loss interval I_mean\
    \ is still\n   averaged over the eight most recent loss intervals, as specified\
    \ in\n   Section 5.4 of RFC 3448.  Thus, if eight successive loss intervals\n\
    \   are short loss intervals with N packets and K losses, the loss event\n   rate\
    \ is calculated as K/N, rather than as 1/N.\n"
- title: 4.5.  The Nominal Packet Size
  contents:
  - '4.5.  The Nominal Packet Size

    '
- title: 4.5.1.  Packet Size and Packet Drop Rates
  contents:
  - "4.5.1.  Packet Size and Packet Drop Rates\n   The guidelines in Section 3 above\
    \ say that the nominal segment size s\n   is set to 1460 bytes, providing a goal\
    \ of fairness, in terms of the\n   sending rate in bytes per second, with a TCP\
    \ flow with 1460 bytes of\n   application data per packet but with the same packet\
    \ drop rate.  This\n   follows the assumption that a TCP flow with 1460-byte segments\
    \ will\n   have a higher sending rate than a TCP flow with smaller segments.\n\
    \   While this assumption holds in an environment where the packet drop\n   rate\
    \ is independent of packet size, this assumption does not\n   necessarily hold\
    \ in an environment where larger packets are more\n   likely to be dropped than\
    \ are small packets.\n   The table below shows the results of simulations with\
    \ standard (SACK)\n   TCP flows, where, for each *byte*, the packet containing\
    \ that byte is\n   dropped with probability p.  Consider the approximation for\
    \ the TCP\n   response function for packet drop rates up to 10% or so; for these\n\
    \   environments, the sending rate in bytes per RTT is roughly\n   1.2 s/sqrt(p),\
    \ for a packet size of s bytes and packet drop rate p.\n   Given a fixed *byte*\
    \ drop rate p1, and a TCP packet size of s bytes,\n   the packet drop rate is\
    \ roughly s*p1, producing a sending rate in\n   bytes per RTT of roughly 1.2 sqrt(s)/sqrt(p1).\
    \  Thus, for TCP in an\n   environment with a fixed byte drop rate, the sending\
    \ rate should grow\n   roughly as sqrt(s), for packet drop rates up to 10% or\
    \ so.\n   Each row of Table 5 below shows a separate simulation with ten TCP\n\
    \   connections and a fixed byte drop rate of 0.0001, with each\n   simulation\
    \ using a different segment size.  For each simulation, the\n   TCP sending rate\
    \ and goodput are averaged over the ten flows.  As one\n   would expect from the\
    \ paragraph above, the TCP sending rate grows\n   somewhat less than linearly\
    \ with an increase in packet size, up to a\n   packet size of 1460 bytes, corresponding\
    \ to a packet drop rate of\n   13%.  After that, further increases in the packet\
    \ size result in a\n   *decrease* in the TCP sending rate, as the TCP connection\
    \ enters the\n   regime of exponential backoff of the retransmit timer.\n    \
    \              Segment   Packet      TCP Rates (Kbps)\n                  Size\
    \ (B)  DropRate   SendRate    Goodput\n                  --------  --------  \
    \ --------    -------\n                      14      0.005       6.37       6.34\n\
    \                     128      0.016      30.78      30.30\n                 \
    \    256      0.028      46.54      44.96\n                     512      0.053\
    \      62.43      58.37\n                    1460      0.134      94.15      80.02\n\
    \                    4000      0.324      35.20      21.44\n                 \
    \   8000      0.531      15.36       5.76\n               Table 5: TCP Median\
    \ Send Rate vs. Packet Size I:\n                            Byte Drop Rate 0.0001\n\
    \   Table 6 below shows similar results for a byte drop rate of 0.001.\n   In\
    \ this case, the TCP sending rate grows with increasing packet size\n   up to\
    \ a packet size of 128 bytes, corresponding to a packet drop rate\n   of 16%.\
    \  After that, the TCP sending rate decreases and then\n   increases again, as\
    \ the TCP connection enters the regime of\n   exponential backoff of the retransmit\
    \ timer.  Note that with this\n   byte drop rate, with packet sizes of 4000 and\
    \ 8000 bytes, the TCP\n   sending rate increases but the TCP goodput rate remains\
    \ essentially\n   zero.  This makes sense, as almost all packets that are sent\
    \ are\n   dropped.\n                  Segment   Packet      TCP Rates (Kbps)\n\
    \                  Size (B)  DropRate   SendRate    Goodput\n                \
    \  --------  --------   --------    -------\n                      14      0.053\
    \       1.68       1.56\n                     128      0.159       7.66      \
    \ 6.13\n                     256      0.248       6.21       4.32\n          \
    \           512      0.402       1.84       1.11\n                    1460   \
    \   0.712       1.87       0.47\n                    4000      0.870       3.20\
    \       0.00\n                    8000      0.890       5.76       0.00\n    \
    \           Table 6: TCP Median Send Rate vs. Packet Size II:\n              \
    \              Byte Drop Rate 0.001\n   The TCP behavior in the presence of a\
    \ fixed byte drop rate suggests\n   that instead of the goal of a TFRC-SP flow\
    \ achieving the same sending\n   rate in bytes per second as a TCP flow using\
    \ 1500-byte packets, it\n   makes more sense to consider an ideal goal of a TFRC-SP\
    \ flow\n   achieving the same sending rate as a TCP flow with the optimal packet\n\
    \   size, given that the packet size is at most 1500 bytes.  This does\n   not\
    \ mean that we need to change the TFRC-SP mechanisms for computing\n   the allowed\
    \ transmit rate;  this means simply that in evaluating the\n   fairness of TFRC-SP,\
    \ we should consider fairness relative to the TCP\n   flow using the optimal packet\
    \ size (though still at most 1500 bytes)\n   for that environment.\n"
- title: 4.5.2.  Fragmentation and the Path MTU
  contents:
  - "4.5.2.  Fragmentation and the Path MTU\n   This document doesn't specify TFRC-SP\
    \ behavior in terms of packet\n   fragmentation and Path MTU Discovery (PMTUD).\
    \  That is, should the\n   transport protocol using TFRC-SP use PMTUD information\
    \ to set an\n   upper bound on the segment size?  Should the transport protocol\
    \ allow\n   packets to be fragmented in the network?  We leave these as questions\n\
    \   for the transport protocol.  As an example, we note that DCCP\n   requires\
    \ that endpoints keep track of the current PMTU, and says that\n   fragmentation\
    \ should not be the default (Section 14 of [RFC4340]).\n"
- title: 4.5.3.  The Nominal Segment Size and the Path MTU
  contents:
  - "4.5.3.  The Nominal Segment Size and the Path MTU\n   When TFRC-SP is used with\
    \ a nominal segment size s of 1460 bytes on a\n   path where the TCP MSS is in\
    \ fact only 536 bytes, the TFRC-SP flow\n   could receive almost three times the\
    \ bandwidth, in bytes per second,\n   as that of a TCP flow using an MSS of 536\
    \ bytes.  Similarly, in an\n   environment with an MSS close to 4000 bytes, a\
    \ TCP flow could receive\n   almost three times the bandwidth of a TFRC-SP flow\
    \ with its nominal\n   segment size s of 1460 bytes.  In both cases, we feel that\
    \ these\n   levels of \"unfairness\" with factors of two or three are acceptable;\n\
    \   in particular, they won't result in one flow grabbing all of the\n   available\
    \ bandwidth, to the exclusion of the competing TCP or TFRC-SP\n   flow.\n   All\
    \ IPv4 *end hosts* are required to accept and reassemble IP packets\n   of size\
    \ 576 bytes [RFC791], but IPv4 *links* do not necessarily have\n   to support\
    \ this packet size.  In slow networks, the largest possible\n   packet may take\
    \ a considerable amount of time to send [RFC3819], and\n   a smaller MTU may be\
    \ desirable, e.g., hundreds of bytes.  If the\n   first-hop link had a small MTU,\
    \ then TCP would choose an\n   appropriately small MSS [RFC879].  [RFC1144] quotes\
    \ cases of very low\n   link speeds where the MSS may be tens of bytes (and notes\
    \ this is an\n   extreme case).  We note that if TFRC-SP is used over a path with\
    \ an\n   MTU considerably smaller than 576 bytes, and the TFRC-SP flow uses a\n\
    \   nominal segment size s of 1460 bytes, then the TFRC-SP flow could\n   receive\
    \ considerably more than three times the bandwidth of competing\n   TCP flows.\n\
    \   If TFRC-SP is used with a nominal segment size s of less than 536\n   bytes\
    \ (because the path MTU is known to be less than 576 bytes), then\n   TFRC-SP\
    \ is likely to be of minimal benefit to applications.  If\n   TFRC-SP was to be\
    \ used on paths that have a path MTU of considerably\n   less than 576 bytes,\
    \ and the transport protocol was not required to\n   keep track of the path MTU,\
    \ this could result in the TFRC-SP flow\n   using the default nominal segment\
    \ size of 1460 bytes, and as a result\n   receiving considerably more bandwidth\
    \ than competing TCP flows.  As a\n   result, TFRC-SP is not recommended for use\
    \ with transport protocols\n   that don't maintain some knowledge of the path\
    \ MTU.\n"
- title: 4.6.  The Loss Interval Length for Short Loss Intervals
  contents:
  - "4.6.  The Loss Interval Length for Short Loss Intervals\n   For a TFRC-SP receiver,\
    \ the guidelines from Section 6 of RFC 3448\n   govern when the receiver should\
    \ send feedback messages.  In\n   particular, from [RFC3448], \"a feedback packet\
    \ should ... be sent\n   whenever a new loss event is detected without waiting\
    \ for the end of\n   an RTT\".  In addition, feedback packets are sent at least\
    \ once per\n   RTT.\n   For a TFRC-SP connection with a short current loss interval\
    \ (less\n   than two round-trip times), it is possible for the loss interval\n\
    \   length calculated for that loss interval to change in odd ways as\n   additional\
    \ packet losses in that loss interval are detected.  To\n   prevent unnecessary\
    \ oscillations in the average loss interval,\n   Section 3 specifies that the\
    \ current loss interval can be included in\n   the calculation of the average\
    \ loss interval only if the current loss\n   interval is longer than two round-trip\
    \ times.\n"
- title: 5.  A Comparison with RFC 3714
  contents:
  - "5.  A Comparison with RFC 3714\n   RFC 3714 considers the problems of fairness,\
    \ potential congestion\n   collapse, and poor user quality that could occur with\
    \ the deployment\n   of non-congestion-controlled IP telephony over congested\
    \ best-effort\n   networks.  The March 2004 document cites ongoing efforts in\
    \ the IETF,\n   including work on TFRC and DCCP.  RFC 3714 recommends that for\
    \ best-\n   effort traffic with applications that have a fixed or minimum sending\n\
    \   rate, the application or transport protocol should monitor the packet\n  \
    \ drop rate, and discontinue sending for a period if the steady-state\n   packet\
    \ drop rate significantly exceeds the allowed threshold for that\n   minimum sending\
    \ rate.\n   In determining the allowed packet drop rate for a fixed sending rate,\n\
    \   RFC 3714 assumes that an IP telephony flow should be allowed to use\n   the\
    \ same sending rate in bytes per second as a 1500-byte packet TCP\n   flow experiencing\
    \ the same packet drop rate as that of the IP\n   telephony flow.  As an example,\
    \ following this guideline, a VoIP\n   connection with a round-trip time of 0.1\
    \ sec and a minimum sending\n   rate of 64 Kbps would be required to terminate\
    \ or suspend when the\n   persistent packet drop rate significantly exceeded 25%.\n\
    \   One limitation of the lack of fine-grained control in the minimal\n   mechanism\
    \ described in RFC 3714 is that an IP telephony flow would\n   not adapt its sending\
    \ rate in response to congestion.  In contrast,\n   with TFRC-SP, a small-packet\
    \ flow would reduce its sending rate\n   somewhat in response to moderate packet\
    \ drop rates, possibly avoiding\n   a period with unnecessarily-heavy packet drop\
    \ rates.\n   Because RFC 3714 assumes that the allowed packet drop rate for an\
    \ IP\n   telephony flow is determined by the sending rate that a TCP flow\n  \
    \ would use *with the same packet drop rate*, the minimal mechanism in\n   RFC\
    \ 3714 would not provide fairness between TCP and IP telephony\n   traffic in\
    \ an environment where small packets are less likely to be\n   dropped than large\
    \ packets.  In such an environment, the small-\n   packet IP telephony flow would\
    \ make the optimistic assumption that a\n   large-packet TCP flow would receive\
    \ the same packet drop rate as the\n   IP telephony flow, and as a result the\
    \ small-packet IP telephony flow\n   would receive a larger fraction of the link\
    \ bandwidth than a\n   competing large-packet TCP flow.\n"
- title: 6.  TFRC-SP with Applications that Modify the Packet Size
  contents:
  - "6.  TFRC-SP with Applications that Modify the Packet Size\n   One possible use\
    \ for TFRC-SP would be with applications that maintain\n   a fixed sending rate\
    \ in packets per second, but modify their packet\n   size in response to congestion.\
    \  TFRC-SP monitors the connection's\n   packet drop rate, and determines the\
    \ allowed sending rate in bytes\n   per second.  Given an application with a fixed\
    \ sending rate in\n   packets per second, the TFRC-SP sender could determine the\
    \ data\n   packet size that would be needed for the sending rate in bytes per\n\
    \   second not to exceed the allowed sending rate.  In environments where\n  \
    \ the packet drop rate is affected by the packet size, decreasing the\n   packet\
    \ size could also result in a decrease in the packet drop rate\n   experienced\
    \ by the flow.\n   There are many questions about how an adaptive application\
    \ would use\n   TFRC-SP that are beyond the scope of this document.  In particular,\n\
    \   an application might wish to avoid unnecessary reductions in the\n   packet\
    \ size.  In this case, an application might wait for some period\n   of time before\
    \ reducing the packet size, to avoid an unnecessary\n   reduction in the packet\
    \ size.  The details of how long an application\n   might wait before reducing\
    \ the packet size can be addressed in\n   documents that are more application-specific.\n\
    \   Similarly, an application using TFRC-SP might only have a few packet\n   sizes\
    \ that it is able to use.  In this case, the application might\n   not reduce\
    \ the packet size until the current packet drop rate has\n   significantly exceeded\
    \ the packet drop rate threshold for the current\n   sending rate, to avoid unnecessary\
    \ oscillations between two packet\n   sizes and two sending rates.  Again, the\
    \ details will have to be\n   addressed in documents that are more application-specific.\n\
    \   Because the allowed sending rate in TFRC-SP is in bytes per second\n   rather\
    \ than in packets per second, there is little opportunity for\n   applications\
    \ to manipulate the packet size in order to \"game\" the\n   system.  This differs\
    \ from TFRC in CCID 3 (Section 5.3 of [RFC4342]),\n   where the allowed sending\
    \ rate is in packets per second.  In\n   particular, a TFRC-SP application that\
    \ sends small packets for a\n   while, building up a fast sending rate, and then\
    \ switches to large\n   packets, would not increase its overall sending rate by\
    \ the change of\n   packet size.\n"
- title: 7.  Simulations
  contents:
  - "7.  Simulations\n   This section describes the performance of TFRC-SP in simulation\n\
    \   scenarios with configured packet or byte drop rates, and in scenarios\n  \
    \ with a range of queue management mechanisms at the congested link.\n   The simulations,\
    \ described in detail in Appendix B, explore\n   environments where standard TFRC\
    \ significantly limits the throughput\n   of small-packet flows, and TFRC-SP gives\
    \ the desired throughput.  The\n   simulations also explore environments where\
    \ standard TFRC allows\n   small-packet flows to receive good performance, while\
    \ TFRC-SP is\n   overly aggressive.\n   The general lessons from the simulations\
    \ are as follows.\n   o  In scenarios where large and small packets receive similar\
    \ packet\n      drop rates, TFRC-SP gives roughly the desired sending rate\n \
    \     (Appendix B.1, B.2).\n   o  In scenarios where each *byte* is equally likely\
    \ to be dropped,\n      standard TFRC gives reasonable fairness between small-packet\
    \ TFRC\n      flows and large-packet TCP flows (Appendix B.2).\n   o  In scenarios\
    \ where small packets are less likely to be dropped\n      than large packets,\
    \ TFRC-SP does not give reasonable fairness\n      between small-packet TFRC-SP\
    \ flows and large-packet TCP flows;\n      small-packet TFRC-SP flows can receive\
    \ considerably more bandwidth\n      than competing large-packet TCP flows, and\
    \ in some cases large-\n      packet TCP flows can be essentially starved by competing\
    \ small-\n      packet TFRC-SP flows (Appendix B.2, B.3, B.4).\n   o  Scenarios\
    \ where small packets are less likely to be dropped than\n      large packets\
    \ include those with Drop-Tail queues in bytes, and\n      with AQM mechanisms\
    \ in byte mode (Appendix B.3, B.4).  It has also\n      been reported that wireless\
    \ links are sometimes good enough to let\n      small packets through, while larger\
    \ packets have a much higher\n      error rate, and hence a higher drop probability\
    \ [S05].\n"
- title: 8.  General Discussion
  contents:
  - "8.  General Discussion\n   Dropping rates for small packets: The goal of TFRC-SP\
    \ is for small-\n   packet TFRC-SP flows to have rough fairness with large-packet\
    \ TCP\n   flows in the sending rate in bps, in a scenario where each packet\n\
    \   receives roughly the same probability of being dropped.  In a\n   scenario\
    \ where large packets are more likely to be dropped than small\n   packets, or\
    \ where flows with a bursty sending rate are more likely to\n   have packets dropped\
    \ than are flows with a smooth sending rate,\n   small-packet TFRC-SP flows can\
    \ receive significantly more bandwidth\n   than competing large-packet TCP flows.\n\
    \   The accuracy of the TCP response function used in TFRC: For\n   applications\
    \ with a maximum sending rate of 96 Kbps or less (i.e.,\n   packets of at most\
    \ 120 bytes), TFRC-SP only restricts the sending\n   rate when the packet drop\
    \ rate is fairly high, e.g., greater than\n   10%.  [Derivation: A TFRC-SP flow\
    \ with a 200 ms round-trip time and a\n   maximum sending rate with packet headers\
    \ of 128 Kbps would have a\n   sending rate in bytes per second equivalent to\
    \ a TCP flow with 1460-\n   byte segments sending 2.2 packets per round-trip time.\
    \  From Table 1\n   of RFC 3714, this sending rate can be sustained with a packet\
    \ drop\n   rate slightly greater than 10%.]  In this high-packet-drop regime,\n\
    \   the performance of TFRC-SP is determined in part by the accuracy of\n   the\
    \ TCP response function in representing the actual sending rate of\n   a TCP connection.\n\
    \   In the regime of high packet drop rates, TCP performance is also\n   affected\
    \ by the TCP algorithm (e.g., SACK or not), the minimum RTO,\n   the use of Limited\
    \ Transmit (or lack thereof), the use of ECN, and\n   the like.  It is good to\
    \ ensure that simulations or experiments\n   exploring fairness include the exploration\
    \ of fairness with the most\n   aggressive TCP mechanisms conformant with the\
    \ current standards.  Our\n   simulations use SACK TCP with Limited Transmit and\
    \ with a minimum RTO\n   of 200 ms.  The simulation results are largely the same\
    \ with or\n   without timestamps; timestamps were not used for simulations reported\n\
    \   in this paper.  We didn't use TCP with ECN in setting the target\n   sending\
    \ rate for TFRC, because, as explained in Appendix B.1, our\n   expectation is\
    \ that in high packet drop regimes, routers will drop\n   rather than mark packets,\
    \ either from policy or from buffer overflow.\n   Fairness with different packet\
    \ header sizes: In an environment with\n   IPv6 and/or several layers of network-layer\
    \ tunnels (e.g., IPsec,\n   Generic Routing Encapsulation (GRE)), the packet header\
    \ could be 60,\n   80, or 100 bytes instead of the default 40 bytes assumed in\
    \ Section\n   3.  For an application with small ten-byte data segments, this means\n\
    \   that the actual packet size could be 70, 90, or 110 bytes, instead of\n  \
    \ the 50 bytes assumed by TFRC-SP in calculating the allowed sending\n   rate.\
    \  Thus, a TFRC-SP application with large headers could receive\n   more than\
    \ twice the bandwidth (including the bandwidth used by\n   headers) than a TFRC-SP\
    \ application with small headers.  We do not\n   expect this to be a problem;\
    \ in particular, TFRC-SP applications with\n   large headers will not significantly\
    \ degrade the performance of\n   competing TCP applications, or of competing TFRC-SP\
    \ applications with\n   small headers.\n   General issues for TFRC: The congestion\
    \ control mechanisms in TFRC\n   and TFRC-SP limit a flow's sending rate in packets\
    \ per second.\n   Simulations by Tom Phelan [P04] explore how such a limitation\
    \ in\n   sending rate can lead to unfairness for the TFRC flow in some\n   scenarios,\
    \ e.g., when competing with bursty TCP web traffic, in\n   scenarios with low\
    \ levels of statistical multiplexing at the\n   congested link.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   There are no new security considerations introduced\
    \ in this document.\n   The issues of the fairness of TFRC-SP with standard TFRC\
    \ and TCP in a\n   range of environments, including those with byte-based queue\n\
    \   management at the congested routers, are discussed extensively in the\n  \
    \ main body of this document.\n   General security considerations for TFRC are\
    \ discussed in RFC 3448.\n   As with TFRC in RFC 3448, TFRC-SP is not a transport\
    \ protocol in its\n   own right, but a congestion control mechanism that is intended\
    \ to be\n   used in conjunction with a transport protocol.  Therefore, security\n\
    \   primarily needs to be considered in the context of a specific\n   transport\
    \ protocol and its authentication mechanisms.  As discussed\n   for TFRC in RFC\
    \ 3448, any transport protocol that uses TFRC-SP needs\n   to protect against\
    \ spoofed feedback, and to protect the congestion\n   control mechanisms against\
    \ incorrect information from the receiver.\n   Again as discussed for TFRC in\
    \ RFC 3448, we expect that protocols\n   incorporating ECN with TFRC-SP will want\
    \ to use the ECN nonce\n   [RFC3540] to protect the sender from the accidental\
    \ or malicious\n   concealment of marked packets\n   Security considerations for\
    \ DCCP's Congestion Control ID 3, TFRC\n   Congestion Control, the transport protocol\
    \ that uses TFRC, are\n   discussed in [RFC4342].  That document extensively discussed\
    \ the\n   mechanisms the sender can use to verify the information sent by the\n\
    \   receiver, including the use of the ECN nonce.\n"
- title: 10.  Conclusions
  contents:
  - "10.  Conclusions\n   This document has specified TFRC-SP, a Small-Packet (SP)\
    \ variant of\n   TFRC, designed for applications that send small packets, with\
    \ at most\n   a hundred packets per second, but that desire the same sending rate\n\
    \   in bps as a TCP connection experiencing the same packet drop rate but\n  \
    \ sending packets of 1500 bytes.  TFRC-SP competes reasonably well with\n   large-packet\
    \ TCP and TFRC flows in environments where large-packet\n   flows and small-packet\
    \ flows experience similar packet drop rates,\n   but receives more than its share\
    \ of the bandwidth in bps in\n   environments where small packets are less likely\
    \ to be dropped or\n   marked than are large packets.  As a result, TFRC-SP is\
    \ experimental,\n   and is not intended for widespread deployment at this time\
    \ in the\n   global Internet.\n   In order to allow experimentation with TFRC-SP\
    \ in the Datagram\n   Congestion Control Protocol (DCCP), an experimental Congestion\n\
    \   Control IDentifier (CCID) will be used, based on TFRC-SP but\n   specified\
    \ in a separate document.\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   We thank Tom Phelan for discussions of TFRC-SP and\
    \ for his paper\n   exploring the fairness between TCP and TFRC-SP flows.  We\
    \ thank Lars\n   Eggert, Gorry Fairhurst, Mark Handley, Miguel Garcia, Ladan Gharai,\n\
    \   Richard Nelson, Colin Perkins, Juergen Quittek, Pete Sholander,\n   Magnus\
    \ Westerlund, and Joerg Widmer for feedback on earlier versions\n   of this document.\
    \  We also thank the DCCP Working Group for feedback\n   and discussions.\n"
- title: Appendix A.  Related Work on Small-Packet Variants of TFRC
  contents:
  - "Appendix A.  Related Work on Small-Packet Variants of TFRC\n   Other proposals\
    \ for variants of TFRC for applications with variable\n   packet sizes include\
    \ [WBL04] and [V00]. [V00] proposed that TFRC\n   should be modified so that flows\
    \ are not penalized by sending smaller\n   packets.  In particular, [V00] proposes\
    \ using the path MTU in the\n   TCP-friendly equation, instead of the actual packet\
    \ size used by\n   TFRC, and counting the packet drop rate by using an estimation\n\
    \   algorithm that aggregates both packet drops and received packets into\n  \
    \ MTU-sized units.\n   [WBL04] also argues that adapting TFRC for variable packet\
    \ sizes by\n   just using the packet size of a reference TCP flow in the TFRC\n\
    \   equation would not suffice in the high-packet-loss regime; such a\n   modified\
    \ TFRC would have a strong bias in favor of smaller packets,\n   because multiple\
    \ lost packets in a single round-trip time would be\n   aggregated into a single\
    \ packet loss.  [WBL04] proposes modifying the\n   loss measurement process to\
    \ account for the bias in favor of smaller\n   packets.\n   The TFRC-SP variant\
    \ of TFRC proposed in our document differs from\n   [WBL04] in restricting its\
    \ attention to flows that send at most 100\n   packets per second.  The TFRC-SP\
    \ variant proposed in our document\n   also differs from the straw proposal discussed\
    \ in [WBL04] in that the\n   allowed bandwidth includes the bandwidth used by\
    \ packet headers.\n   [WBL04] discusses four methods for modifying the loss measurement\n\
    \   process, \"unbiasing\", \"virtual packets\", \"random sampling\", and \"Loss\n\
    \   Insensitive Period (LIP) scaling\".  [WBL04] finds only the second and\n \
    \  third methods sufficiently robust when the network drops packets\n   independently\
    \ of packet size.  They find only the second method\n   sufficiently robust when\
    \ the network is more likely to drop large\n   packets than small packets.  Our\
    \ method for calculating the loss\n   event rate is somewhat similar to the random\
    \ sampling method proposed\n   in [WBL04], except that randomization is not used;\
    \ instead of\n   randomization, the exact packet loss rate is computed for short\
    \ loss\n   intervals, and the standard loss event rate calculation is used for\n\
    \   longer loss intervals.  [WBL04] includes simulations with a Bernoulli\n  \
    \ loss model, a Bernoulli loss model with a drop rate varying over\n   time, and\
    \ a Gilbert loss model, as well as more realistic simulations\n   with a range\
    \ of TCP and TFRC flows.\n   [WBL04] produces both a byte-mode and a packet-mode\
    \ variant of the\n   TFRC transport protocol, for connections over paths with\
    \ per-byte and\n   per-packet dropping respectively.  We would argue that in the\
    \ absence\n   of transport-level mechanisms for determining whether the packet\n\
    \   dropping in the network is per-packet, per-byte, or somewhere in\n   between,\
    \ a single TFRC implementation is needed, independently of the\n   packet-dropping\
    \ behaviors of the routers along the path.  It would of\n   course be preferable\
    \ to have a mechanism that gives roughly\n   acceptable behavior, to the connection\
    \ and to the network as a whole,\n   on paths with both per-byte and per-packet\
    \ dropping (and on paths\n   with multiple congested routers, some with per-byte\
    \ dropping\n   mechanisms, some with per-packet dropping mechanisms, and some\
    \ with\n   dropping mechanisms that lie somewhere between per-byte and per-\n\
    \   packet).\n   An important contribution would be to investigate the range of\n\
    \   behaviors actually present in today's networks, in terms of packet\n   dropping\
    \ as a function of packet size.\n"
- title: Appendix B.  Simulation Results
  contents:
  - "Appendix B.  Simulation Results\n   This appendix reports on the simulation results\
    \ outlined in\n   Section 7.  TFRC-SP has been added to the NS simulator, and\
    \ is\n   illustrated in the validation test \"./test-all-friendly\" in the\n \
    \  directory tcl/tests.  The simulation scripts and graphs for the\n   simulations\
    \ in this document are available at [VOIPSIMS].\n"
- title: B.1.  Simulations with Configured Packet Drop Rates
  contents:
  - "B.1.  Simulations with Configured Packet Drop Rates\n   In this section we describe\
    \ simulation results from simulations\n   comparing the throughput of standard\
    \ (SACK) TCP flows, TCP flows with\n   timestamps and ECN, TFRC-SP flows, and\
    \ standard TFRC (Stnd TFRC)\n   flows.  In these simulations we configure the\
    \ router to randomly drop\n   or mark packets at a specified rate, independently\
    \ of the packet\n   size.  For each specified packet drop rate, we give a flow's\
    \ average\n   sending rate in Kbps over the second half of a 100-second simulation,\n\
    \   averaged over ten flows.\n                Packet       Send Rates (Kbps, 1460B\
    \ seg)\n                DropRate      TCP      ECN TCP      TFRC\n           \
    \     --------    --------   --------   --------\n                   0.001   \
    \ 2020.85    1904.61     982.09\n                   0.005     811.10     792.11\
    \     878.08\n                   0.01      515.45     533.19     598.90\n    \
    \               0.02      362.93     382.67     431.41\n                   0.04\
    \      250.06     252.64     284.82\n                   0.05      204.48     218.16\
    \     268.51\n                   0.1       143.30     148.41     146.03\n    \
    \               0.2        78.65      93.23*     55.14\n                   0.3\
    \        26.26      59.65*     32.87\n                   0.4         9.87    \
    \  47.79*     25.45\n                   0.5         3.53      32.01*     18.52\n\
    \         * ECN scenarios marked with an asterisk are not realistic,\n       \
    \    as routers are not recommended to mark packets when packet\n           drop/mark\
    \ rates are 20% or higher.\n                Table 7: Send Rate vs. Packet Drop\
    \ Rate I:\n                              1460B TFRC Segments\n               \
    \   (1.184 Kbps Maximum TFRC Data Sending Rate)\n   Table 7 shows the sending\
    \ rate for a TCP and a standard TFRC flow for\n   a range of configured packet\
    \ drop rates, when both flows have 1460-\n   byte data segments, in order to illustrate\
    \ the relative fairness of\n   TCP and TFRC when both flows use the same packet\
    \ size.  For example,\n   a packet drop rate of 0.1 means that 10% of the TCP\
    \ and TFRC packets\n   are dropped.  The TFRC flow is configured to send at most\
    \ 100 packets\n   per second.  There is good relative fairness until the packet\
    \ drop\n   percentages reach 40 and 50%, when the TFRC flow receives three to\n\
    \   five times more bandwidth than the standard TCP flow.  We note that\n   an\
    \ ECN TCP flow would receive a higher throughput than the TFRC flow\n   at these\
    \ high packet drop rates, if ECN-marking was still being used\n   instead of packet\
    \ dropping.  However, we don't use the ECN TCP\n   sending rate in these high-packet-drop\
    \ scenarios as the target\n   sending rate for TFRC, as routers are advised to\
    \ drop rather than\n   mark packets during high levels of congestion (Section\
    \ 7 of\n   [RFC3168]).  In addition, there is likely to be buffer overflow in\n\
    \   scenarios with such high packet dropping/marking rates, forcing\n   routers\
    \ to drop packets instead of ECN-marking them.\n                    < - - - -\
    \ - - Send Rates (Kbps) - - - - - >\n           Packet       TCP       ECN TCP\
    \     TFRC-SP   Stnd TFRC\n          DropRate  (1460B seg) (1460B seg)  (14B seg)\
    \  (14B seg)\n          --------  ----------- -----------  ---------  ---------\n\
    \             0.001    1787.54     1993.03      17.71      17.69\n           \
    \  0.005     785.11      823.75      18.11      17.69\n             0.01     \
    \ 533.38      529.01      17.69      17.80\n             0.02      317.16    \
    \  399.62      17.69      13.41\n             0.04      245.42      260.57   \
    \   17.69       8.84\n             0.05      216.38      223.75      17.69   \
    \    7.63\n             0.1       142.75      138.36      17.69       4.29\n \
    \            0.2        58.61       91.54*     17.80       1.94\n            \
    \ 0.3        21.62       63.96*     10.26       1.00\n             0.4       \
    \ 10.51       41.74*      4.78       0.77\n             0.5         1.92     \
    \  19.03*      2.41       0.56\n         * ECN scenarios marked with an asterisk\
    \ are not realistic,\n           as routers are not recommended to mark packets\
    \ when packet\n           drop/mark rates are 20% or higher.\n               \
    \ Table 8: Send Rate vs. Packet Drop Rate II:\n                              \
    \ 14B TFRC Segments\n                   (5.6 Kbps Maximum TFRC Data Sending Rate)\n\
    \   Table 8 shows the results of simulations where each TFRC-SP flow has\n   a\
    \ maximum data sending rate of 5.6 Kbps, with 14-byte data packets\n   and a 32-byte\
    \ packet header for DCCP and IP.  Each TCP flow has a\n   receive window of 100\
    \ packets and a data packet size of 1460 bytes,\n   with a 40-byte packet header\
    \ for TCP and IP.  The TCP flow uses SACK\n   TCP with Limited Transmit, but without\
    \ timestamps or ECN.  Each flow\n   has a round-trip time of 240 ms in the absence\
    \ of queueing delay.\n   The TFRC sending rate in Table 8 is the sending rate\
    \ for the 14-byte\n   data packet with the 32-byte packet header.  Thus, only\
    \ 30% of the\n   TFRC sending rate is for data, and with a packet drop rate of\
    \ p, only\n   a fraction 1-p of that data makes it to the receiver.  Thus, the\
    \ TFRC\n   data receive rate can be considerably less than the TFRC sending rate\n\
    \   in the table.  Because TCP uses large packets, 97% of the TCP sending\n  \
    \ rate is for data, and the same fraction 1-p of that data makes it to\n   the\
    \ receiver.\n   Table 8 shows that for the 5.6 Kbps data stream with TFRC, Standard\n\
    \   TFRC (Stnd TFRC) gives a very poor sending rate in bps, relative to\n   the\
    \ sending rate for the large-packet TCP connection.  In contrast,\n   the sending\
    \ rate for the TFRC-SP flow is relatively close to the\n   desired goal of fairness\
    \ in bps with TCP.\n   Table 8 shows that with TFRC-SP, the 5.6 Kbps data stream\
    \ doesn't\n   reduce its sending rate until packet drop rates are greater than\
    \ 20%,\n   as desired.  With packet drop rates of 30-40%, the sending rate for\n\
    \   the TFRC-SP flow is somewhat less than that of the average large-\n   packet\
    \ TCP flow, while for packet drop rates of 50% the sending rate\n   for the TFRC-SP\
    \ flow is somewhat greater than that of the average\n   large- packet TCP flow.\n\
    \                    < - - - - - - Send Rates (Kbps) - - - - - >\n           Packet\
    \       TCP       ECN TCP    TFRC-SP   Stnd TFRC\n          DropRate  (1460B seg)\
    \ (1460B seg) (200B seg) (200B seg)\n          --------  ----------- -----------\
    \ ---------- ----------\n             0.001    1908.98     1869.24     183.45\
    \     178.35\n             0.005     854.69      835.10     185.06     138.06\n\
    \             0.01      564.10      531.10     185.33      92.43\n           \
    \  0.02      365.38      369.10     185.57      62.18\n             0.04     \
    \ 220.80      257.81     185.14      45.43\n             0.05      208.97    \
    \  219.41     180.08      39.44\n             0.1       141.67      143.88   \
    \  127.33      21.96\n             0.2        62.66       91.87*     54.66   \
    \    9.40\n             0.3        16.63       65.52*     24.50       4.73\n \
    \            0.4         6.62       42.00*     13.47       3.35\n            \
    \ 0.5         1.01       21.34*     10.51       2.92\n         * ECN scenarios\
    \ marked with an asterisk are not realistic,\n           as routers are not recommended\
    \ to mark packets when packet\n           drop/mark rates are 20% or higher.\n\
    \                Table 9: Sending Rate vs. Packet Drop Rate III:\n           \
    \                  200B TFRC Segments\n                 (160 Kbps Maximum TFRC\
    \ Data Sending Rate)\n   Table 9 shows results with configured packet drop rates\
    \ when the TFRC\n   flow uses 200-byte data packets, with a maximum data sending\
    \ rate of\n   160 Kbps.  As in Table 8, the performance of Standard TFRC is quite\n\
    \   poor, while the performance of TFRC-SP is essentially as desired for\n   packet\
    \ drop rates up to 30%.  Again as expected, with packet drop\n   rates of 40-50%\
    \ the TFRC-SP sending rate is somewhat higher than\n   desired.\n   For these\
    \ simulations, the sending rate of a TCP connection using\n   timestamps is similar\
    \ to the sending rate shown for a standard TCP\n   connection without timestamps.\n"
- title: B.2.  Simulations with Configured Byte Drop Rates
  contents:
  - "B.2.  Simulations with Configured Byte Drop Rates\n   In this section we explore\
    \ simulations where the router is configured\n   to drop or mark each *byte* at\
    \ a specified rate.  When a byte is\n   chosen to be dropped (or marked), the\
    \ entire packet containing that\n   byte is dropped (or marked).\n           \
    \                 < - - - - - Send Rates (Kbps) - - - - - >\n         Byte   \
    \    TCP                           TFRC-SP    Stnd TFRC\n       DropRate   SegSize\
    \     TCP      ECN TCP    (14B seg)  (14B seg)\n       --------   -------   --------\
    \   --------   ---------  ---------\n        0.00001     1460     423.02     431.26\
    \      17.69      17.69\n        0.0001      1460     117.41     114.34      17.69\
    \      17.69\n        0.001        128      10.78      11.50      17.69      \
    \ 8.37\n        0.005         14       1.75       2.89      18.39       1.91\n\
    \        0.010       1460       0.31       0.26       7.07       0.84\n      \
    \  0.020       1460       0.29       0.26       1.61       0.43\n        0.040\
    \       1460       0.12       0.26*      0.17       0.12\n        0.050      \
    \ 1460       0.15       0.26*      0.08       0.06\n         * ECN scenarios marked\
    \ with an asterisk are not realistic,\n           as routers are not recommended\
    \ to mark packets when packet\n           drop/mark rates are 20% or higher.\n\
    \           TFRC's maximum data sending rate is 5.6 Kbps.\n            Table 10:\
    \ Sending Rate vs. Byte Drop Rate\n   Table 10 shows the TCP and TFRC send rates\
    \ for various byte drop\n   rates.  For each byte drop rate, Table 10 shows the\
    \ TCP sending rate,\n   with and without ECN, for the TCP segment size that gives\
    \ the highest\n   TCP sending rate.  Simulations were run with TCP segments of\
    \ 14, 128,\n   256, 512, and 1460 bytes.  Thus, for a byte drop rate of 0.00001,\
    \ the\n   table shows the TCP sending rate with 1460-byte data segments, but\n\
    \   with a byte drop rate of 0.001, the table shows the TCP sending rate\n   with\
    \ 128-byte data segments.  For each byte drop rate, Table 10 also\n   shows the\
    \ TFRC-SP and Standard TFRC sending rates.  With configured\n   byte drop rates,\
    \ TFRC-SP gives an unfair advantage to the TFRC-SP\n   flow, while Standard TFRC\
    \ gives essentially the desired performance.\n                        TCP Pkt\
    \     TFRC Pkt\n               Byte     DropRate    DropRate       TCP/TFRC\n\
    \             DropRate  (1460B seg)  (14B seg)   Pkt Drop Ratio\n            \
    \ --------  -----------  ---------   --------------\n              0.00001   \
    \  0.015       0.0006        26.59\n              0.0001      0.13        0.0056\
    \        24.94\n              0.001       0.77        0.054         14.26\n  \
    \            0.005       0.99        0.24           4.08\n              0.01 \
    \       1.00        0.43           2.32\n              0.05        1.00      \
    \  0.94           1.05\n            Table 11: Packet Drop Rate Ratio vs. Byte\
    \ Drop Rate\n   Table 11 converts the byte drop rate p to packet drop rates for\
    \ the\n   TCP and TFRC packets, where the packet drop rate for an N-byte packet\n\
    \   is 1-(1-p)^N.  Thus, a byte drop rate of 0.001, with each byte being\n   dropped\
    \ with probability 0.001, converts to a packet drop rate of\n   0.77, or 77%,\
    \ for the 1500-byte TCP packets, and a packet drop rate\n   of 0.054, or 5.4%,\
    \ for the 56-byte TFRC packets.\n   The right column of Table 11 shows the ratio\
    \ between the TCP packet\n   drop rate and the TFRC packet drop rate.  For low\
    \ byte drop rates,\n   this ratio is close to 26.8, the ratio between the TCP\
    \ and TFRC\n   packet sizes.  For high byte drop rates, where even most small\
    \ TFRC\n   packets are likely to be dropped, this drop ratio approaches 1.  As\n\
    \   Table 10 shows, with byte drop rates, the Standard TFRC sending rate\n   is\
    \ close to optimal, competing fairly with a TCP connection using the\n   optimal\
    \ packet size within the allowed range.  In contrast, the\n   TFRC-SP connection\
    \ gets more than its share of the bandwidth, though\n   it does reduce its sending\
    \ rate for a byte drop rate of 0.01 or more\n   (corresponding to a TFRC-SP *packet*\
    \ drop rate of 0.43.\n   Table 10 essentially shows three separate regions.  In\
    \ the low-\n   congestion region, with byte drop rates less than 0.0001, the TFRC-SP\n\
    \   connection is sending at its maximum sending rate.  In this region\n   the\
    \ optimal TCP connection is the one with 1460-byte segments, and\n   the TCP sending\
    \ rate goes as 1/sqrt(p), for packet drop rate p.  This\n   low-congestion region\
    \ holds for packet drop rates up to 10-15%.\n   In the middle region of Table\
    \ 10, with byte drop rates from 0.0001 to\n   0.005, the optimal TCP segment size\
    \ is a function of the byte drop\n   rate.  In particular, the optimal TCP segment\
    \ size seems to be the\n   one that keeps the packet drop rate at most 15%, keeping\
    \ the TCP\n   connection in the regime controlled by a 1/sqrt(p) sending rate,\
    \ for\n   packet drop rate p.  For a TCP packet size of S bytes (including\n \
    \  headers), and a *byte* drop rate of B, the packet drop rate is\n   roughly\
    \ B*S.  For a given byte drop rate in this regime, if the\n   optimal TCP performance\
    \ occurs with a packet size chosen to give a\n   packet drop rate of at most 15%,\
    \ keeping the TCP connection out of\n   the regime of exponential backoffs of\
    \ the retransmit timer, then this\n   requires B*S = 0.15, or S = 0.15/B.\n  \
    \ In the high-congestion regime of Table 10, with high congestion and\n   with\
    \ byte drop rates of 0.01 and higher, the TCP performance is\n   dominated by\
    \ the exponential backoff of the retransmit timer\n   regardless of the segment\
    \ size.  Even a 40-byte packet with a zero-\n   byte data segment would have a\
    \ packet drop rate of at least 33%.  In\n   this regime, the optimal TCP *sending*\
    \ rate comes with a large,\n   1460-byte data segment, but the TCP sending rate\
    \ is low with any\n   segment size, considerably less than one packet per round-trip\
    \ time.\n   We note that in this regime, while a larger packet gives a higher\
    \ TCP\n   *sending* rate, a smaller packet gives a better *goodput* rate.\n  \
    \ In general, Tables 8 and 9 show good performance for TFRC-SP in\n   environments\
    \ with stable packet drop rates, where the decision to\n   drop a packet is independent\
    \ of the packet size.  However, in some\n   environments the packet size might\
    \ affect the likelihood that a\n   packet is dropped.  For example, with heavy\
    \ congestion and a Drop\n   Tail queue with a fixed number of bytes rather than\
    \ a fixed number of\n   packet-sized buffers, small packets might be more likely\
    \ than large\n   packets to find room at the end of an almost-full queue.  As\
    \ a\n   further complication, in a scenario with Active Queue Management, the\n\
    \   AQM mechanism could either be in packet mode, dropping each packet\n   with\
    \ equal probability, or in byte mode, dropping each byte with\n   equal probability.\
    \  Sections B.3 and B.4 show simulations with\n   packets dropped at Drop-Tail\
    \ or AQM queues, rather that from a\n   probabilistic process.\n"
- title: B.3.  Packet Dropping Behavior at Routers with Drop-Tail Queues
  contents:
  - "B.3.  Packet Dropping Behavior at Routers with Drop-Tail Queues\n   One of the\
    \ problems with comparing the throughput of two flows using\n   different packet\
    \ sizes is that the packet size itself can influence\n   the packet drop rate\
    \ [V00, WBL04].\n   The default TFRC was designed for rough fairness with TCP,\
    \ for TFRC\n   and TCP flows with the same packet size and experiencing the same\n\
    \   packet drop rate.  When the issue of fairness between flows with\n   different\
    \ packets sizes is addressed, it matters whether the packet\n   drop rates experienced\
    \ by the flows is related to the packet size.\n   That is, are small packets just\
    \ as likely to be dropped as large TCP\n   packets, or are the smaller packets\
    \ less likely to be dropped\n   [WBL04]?  And what is the relationship between\
    \ the packet-dropping\n   behavior of the path, and the loss event measurements\
    \ of TFRC?\n                     < - - - - - Send Rates in Kbps - - - - >\n  \
    \          Web        TCP (1460B seg)     TFRC-SP (200B seg)\n          Sessions\
    \   DropRate  SendRate    DropRate  SendRate\n          --------   --------  --------\
    \    --------  --------\n              10       0.04     316.18       0.05   \
    \  183.05\n              25       0.07     227.47       0.07     181.23\n    \
    \          50       0.08     181.10       0.08     178.32\n             100  \
    \     0.14      85.97       0.12     151.42\n             200       0.17     \
    \ 61.20       0.14      73.88\n             400       0.20      27.79       0.18\
    \      36.81\n             800       0.29       3.50       0.27      16.33\n \
    \           1600       0.37       0.63       0.33       6.29\n        Table 12:\
    \ Drop and Send Rates for Drop-Tail Queues in Packets\n   Table 12 shows the results\
    \ of the second half of 100-second\n   simulations, with five TCP connections\
    \ and five TFRC-SP connections\n   competing with web traffic in a topology with\
    \ a 3 Mbps shared link.\n   The TFRC-SP application generates 200-byte data packets\
    \ every 10 ms,\n   for a maximum data rate of 160 Kbps.  The five long-lived TCP\n\
    \   connections use a data packet size of 1460 bytes, and the web traffic\n  \
    \ uses a data packet size of 512 bytes.  The five TCP connections have\n   round-trip\
    \ times from 40 to 240 ms, and the five TFRC connections\n   have the same set\
    \ of round-trip times.  The SACK TCP connections in\n   these simulations use\
    \ the default parameters in the NS simulator,\n   with Limited Transmit, and a\
    \ minimum RTO of 200 ms.  Adding\n   timestamps to the TCP connection didn't change\
    \ the results\n   appreciably.  The simulations include reverse-path traffic,\
    \ to add\n   some small control packets to the forward path, and some queueing\n\
    \   delay to the reverse path.  The number of web sessions is varied to\n   create\
    \ different levels of congestion.  The Drop-Tail queue is in\n   units of packets,\
    \ which each packet arriving to the queue requires a\n   single buffer, regardless\
    \ of the packet size.\n   Table 12 shows the average TCP and TFRC sending rates,\
    \ each averaged\n   over the five flows.  As expected, the TFRC-SP flows see similar\n\
    \   packet drop rates as the TCP flows, though the TFRC-SP flows receives\n  \
    \ higher throughput than the TCP flows with packet drop rates of 25% or\n   higher.\n\
    \                       < - - - - - Send Rates in Kbps - - - - >\n           \
    \   Web       TCP (1460B seg)      TFRC-SP (200B seg)\n            Sessions  \
    \ DropRate  SendRate    DropRate  SendRate\n            --------   --------  --------\
    \    --------  --------\n                10      0.061     239.81      0.004 \
    \    185.19\n                25      0.089     189.02      0.006     184.95\n\
    \                50      0.141      99.46      0.013     185.07\n            \
    \   100      0.196      16.42      0.022     183.77\n               200      0.256\
    \       4.46      0.032     181.98\n               400      0.291       4.61 \
    \     0.051     151.88\n               800      0.487       1.01      0.078  \
    \   113.10\n              1600      0.648       0.67      0.121      65.17\n \
    \    Table 13: Drop and Send Rates for Drop-Tail Queues in Bytes I:\n        \
    \                      1460B TCP Segments\n   However, the fairness results can\
    \ change significantly if the Drop-\n   Tail queue at the congested output link\
    \ is in units of bytes rather\n   than packets.  For a queue in packets, the queue\
    \ has a fixed number\n   of buffers, and each buffer can hold exactly one packet,\
    \ regardless\n   of its size in bytes.  For a queue in bytes, the queue has a\
    \ fixed\n   number of *bytes*, and an almost-full queue might have room for a\n\
    \   small packet but not for a large one.  Thus, for a simulation with a\n   Drop-Tail\
    \ queue in bytes, large packets are more likely to be dropped\n   than are small\
    \ ones.  The NS simulator doesn't yet have a more\n   realistic intermediate model,\
    \ where the queue has a fixed number of\n   buffers, each buffer has a fixed number\
    \ of bytes, and each packet\n   would require one or more free buffers.  In this\
    \ model, a small\n   packet would use one buffer, while a larger packet would\
    \ require\n   several buffers.\n   The scenarios in Table 13 are identical to\
    \ those in Table 12, except\n   that the Drop-Tail queue is in units of bytes\
    \ instead of packets.\n   Thus, five TCP connections and five TFRC-SP connections\
    \ compete with\n   web traffic in a topology with a 3 Mbps shared link, with each\
    \ TFRC-\n   SP application generating 200-byte data packets every 10 ms, for a\n\
    \   maximum data rate of 160 Kbps.  The number of web sessions is varied\n   to\
    \ create different levels of congestion.  However, instead of Drop-\n   Tail queues\
    \ able to accommodate at most a hundred packets, the\n   routers' Drop-Tail queues\
    \ are each able to accommodate at most 50,000\n   bytes (computed in NS as a hundred\
    \ packets times the mean packet size\n   of 500 bytes).\n   As Table 13 shows,\
    \ with a Drop-Tail queue in bytes, the TFRC-SP flow\n   sees a much smaller packet\
    \ drop rate than the TCP flow, and as a\n   consequence receives a much larger\
    \ sending rate.  For the simulations\n   in Table 13, the TFRC-SP flows use 200-byte\
    \ data segments, while the\n   long-lived TCP flows use 1460-byte data segments.\
    \  For example, when\n   the five TCP flows and five TFRC-SP flows share the link\
    \ with 800 web\n   sessions, the five TCP flows see an average drop rate of 49%\
    \ in the\n   second half of the simulation, while the five TFRC-SP flows receive\n\
    \   an average drop rate of 8%, and as a consequence receive more than\n   100\
    \ times the throughput of the TCP flows.  This raises serious\n   questions about\
    \ making the assumption that flows with small packets\n   see the same packet\
    \ drop rate as flows with larger packets.  Further\n   work will have to include\
    \ an investigation into the range of\n   realistic Internet scenarios, in terms\
    \ of whether large packets are\n   considerably more likely to be dropped than\
    \ are small ones.\n                       < - - - - - Send Rates in Kbps - - -\
    \ - >\n              Web        TCP (512B seg)      TFRC-SP (200B seg)\n     \
    \       Sessions   DropRate  SendRate    DropRate  SendRate\n            --------\
    \   --------  --------    --------  --------\n                10       0.02  \
    \   335.05       0.00     185.16\n                25       0.02     289.94   \
    \    0.00     185.36\n                50       0.04     139.99       0.01    \
    \ 184.98\n               100       0.06      53.50       0.01     184.66\n   \
    \            200       0.10      16.14       0.04     167.87\n               400\
    \       0.16       6.36       0.07     114.85\n               800       0.24 \
    \      0.90       0.11      67.23\n              1600       0.42       0.35  \
    \     0.18      39.32\n     Table 14: Drop and Send Rates for Drop-Tail Queues\
    \ in Bytes II:\n                               512B TCP Segments\n   Table 14\
    \ shows that, in these scenarios, the long-lived TCP flows\n   receive a higher\
    \ packet drop rate than the TFRC-SP flows, and receive\n   considerably less throughput,\
    \ even when the long-lived TCP flows use\n   512-byte segments.\n   To show the\
    \ potential negative effect of TFRC-SP in such an\n   environment, we consider\
    \ a simulation with N TCP flows, N TFRC-SP\n   flows, and 10*N web sessions, for\
    \ N ranging from 1 to 50, so that the\n   demand increases from all types of traffic,\
    \ with routers with Drop-\n   Tail queues in bytes.\n                       <\
    \ - - - - - Send Rates in Kbps - - - - >\n              Web       TCP (1460B seg)\
    \      TFRC-SP (200B seg)\n            Sessions   DropRate  SendRate    DropRate\
    \  SendRate\n            --------   --------  --------    --------  --------\n\
    \                10      0.014    2085.36      0.001     180.29\n            \
    \    20      0.040     788.88      0.004     183.87\n                30      0.074\
    \     248.80      0.006     182.94\n                40      0.113     163.20 \
    \     0.008     185.33\n                50      0.127      94.70      0.011  \
    \   185.14\n                60      0.177      53.24      0.015     185.30\n \
    \               70      0.174      35.31      0.016     185.07\n             \
    \   80      0.221      19.38      0.019     183.91\n                90      0.188\
    \      15.63      0.019     180.42\n               100      0.265       7.08 \
    \     0.023     176.71\n               200      0.324       0.38      0.042  \
    \   139.48\n               300      0.397       0.32      0.076      93.53\n \
    \              400      0.529       0.40      0.100      70.40\n             \
    \  500      0.610       0.37      0.121      57.59\n     Table 15: Drop and Send\
    \ Rates for Drop-Tail Queues in Bytes III:\n                      TFRC-SP, 1460B\
    \ TCP Segments\n                       < - - - - - Send Rates in Kbps - - - -\
    \ >\n              Web       TCP (1460B seg)       TFRC (200B seg)\n         \
    \   Sessions   DropRate  SendRate    DropRate  SendRate\n            --------\
    \   --------  --------    --------  --------\n                10      0.016  \
    \  1926.00      0.002     178.47\n                20      0.030     805.20   \
    \   0.003     178.23\n                30      0.062     346.24      0.005    \
    \ 161.19\n                40      0.093     219.18      0.007     136.28\n   \
    \             50      0.110     132.77      0.010      83.02\n               \
    \ 60      0.170      88.88      0.014      69.75\n                70      0.149\
    \      70.73      0.015      55.59\n                80      0.213      43.17 \
    \     0.020      42.82\n                90      0.188      36.19      0.017  \
    \    43.61\n               100      0.233      24.77      0.026      35.17\n \
    \              200      0.311       5.46      0.034      24.85\n             \
    \  300      0.367       3.74      0.049      20.19\n               400      0.421\
    \       2.59      0.055      17.71\n               500      0.459       1.10 \
    \     0.069      15.95\n     Table 16: Drop and Send Rates for Drop-Tail Queues\
    \ in Bytes IV:\n                   Standard TFRC, 1460B TCP Segments\n   Table\
    \ 15 shows simulations using TFRC-SP, while Table 16 shows\n   simulations using\
    \ TFRC instead of TFRC-SP.  This is the only\n   difference between the simulations\
    \ in the two tables.  Note that when\n   TFRC-SP is used, the TCP flows and web\
    \ traffic are essentially\n   starved, while the TFRC-SP flows each continue to\
    \ send 57 Kbps.  In\n   contrast, when standard TFRC is used instead of TFRC-SP\
    \ for the flows\n   sending 200-byte segments, the TCP flows are not starved (although\n\
    \   they still don't receive their \"share\" of the link bandwidth when\n   their\
    \ packet drop rates are 30% or higher).  These two sets of\n   simulations illustrate\
    \ the dangers of a widespread deployment of\n   TFRC-SP in an environment where\
    \ small packets are less likely to be\n   dropped than large ones.\n"
- title: B.4.  Packet-dropping Behavior at Routers with AQM
  contents:
  - "B.4.  Packet-dropping Behavior at Routers with AQM\n   As expected, the packet-dropping\
    \ behavior also can be varied by\n   varying the Active Queue Management (AQM)\
    \ mechanism in the router.\n   When the routers use RED (Random Early Detection),\
    \ there are several\n   parameters than can affect the packet-dropping or marking\
    \ behavior as\n   a function of the packet size.\n   First, as with Drop-Tail,\
    \ the RED queue can be in units of either\n   packets or bytes.  This can affect\
    \ the packet-dropping behavior when\n   RED is unable to control the average queue\
    \ size, and the queue\n   overflows.\n   Second, and orthogonally, RED can be\
    \ configured to be either in\n   packet mode or in byte mode.  In packet mode,\
    \ each *packet* has the\n   same probability of being dropped by RED, while in\
    \ byte mode, each\n   *byte* has the same probability of being dropped.  In packet\
    \ mode,\n   large-packet and small-packet flows receive roughly the same packet\n\
    \   drop rate, while in byte mode, large-packet and small-packet flows\n   with\
    \ the same throughput in bps receive roughly the same *number* of\n   packet drops.\
    \  [EA03] assessed the impact of byte vs. packet modes on\n   RED performance.\n\
    \   The simulations reported below show that for RED in packet mode, the\n   packet\
    \ drop rates for the TFRC-SP flows are similar to those for the\n   TCP flows,\
    \ with a resulting acceptable throughput for the TFRC-SP\n   flows.  This is true\
    \ with the queue in packets or in bytes, and with\n   or without Adaptive RED\
    \ (discussed below).  As we show below, this\n   fairness between TCP and TFRC-SP\
    \ flows does not hold for RED in byte\n   mode.\n   The third RED parameter that\
    \ affects the packet-dropping or marking\n   behavior as a function of packet\
    \ size is whether the RED mechanism is\n   using Standard RED or Adaptive RED;\
    \  Adaptive RED tries to maintain\n   the same average queue size, regardless\
    \ of the packet drop rate.  The\n   use of Adaptive RED allows the RED mechanism\
    \ to function more\n   effectively in the presence of high packet drop rates (e.g.,\
    \ greater\n   than 10%).  Without Adaptive RED, there is a fixed dropping\n  \
    \ threshold, and all arriving packets are dropped when the dropping or\n   marking\
    \ rate exceeds this threshold.  In contrast, with Adaptive RED,\n   the dropping\
    \ function is adapted to accommodate high-drop-rate\n   regimes.  One consequence\
    \ is that when byte mode is used with\n   Adaptive RED, the byte mode extends\
    \ even to high-drop-rate regimes.\n   When byte mode is used with standard RED,\
    \ however, the byte mode is\n   no longer in use when the drop rate exceeds the\
    \ fixed dropping\n   threshold (set by default to 10% in the NS simulator).\n\
    \   In the simulations in this section, we explore the TFRC-SP behavior\n   over\
    \ some of this range of scenarios.  In these simulations, as in\n   Section B.3\
    \ above, the application for the TFRC-SP flow uses 200-byte\n   data packets,\
    \ generating 100 packets per second.\n                       < - - - - - Send\
    \ Rates in Kbps - - - - >\n              Web        TCP (1460B seg)     TFRC-SP\
    \ (200B seg)\n            Sessions   DropRate  SendRate    DropRate  SendRate\n\
    \            --------   --------  --------    --------  --------\n           \
    \     10       0.05     305.76       0.04     182.82\n                25     \
    \  0.06     224.16       0.06     175.91\n                50       0.09     159.12\
    \       0.08     152.51\n               100       0.13      90.77       0.11 \
    \    106.13\n               200       0.14      48.53       0.14      70.25\n\
    \               400       0.20      22.08       0.19      41.50\n            \
    \   800       0.27       3.55       0.25      17.50\n              1600      \
    \ 0.42       1.87       0.34       8.81\n      Table 17: Drop and Send Rates for\
    \ RED Queues in Packet Mode\n   For the simulations in Table 17, with a congested\
    \ router with a RED\n   queue in packet mode, the results are similar to those\
    \ with a Drop-\n   Tail queue in packets, as in Table 12 above.  The TFRC-SP flow\n\
    \   receives similar packet drop rates as the TCP flow, though it\n   receives\
    \ higher throughput in the more congested environments.  The\n   simulations are\
    \ similar with a RED queue in packet mode with the\n   queue in bytes, and with\
    \ or without Adaptive RED.  In these\n   simulations, TFRC-SP gives roughly the\
    \ desired performance.\n                       < - - - - - Send Rates in Kbps\
    \ - - - - >\n              Web       TCP (1460B seg)      TFRC-SP (200B seg)\n\
    \            Sessions   DropRate  SendRate    DropRate  SendRate\n           \
    \ --------   --------  --------    --------  --------\n                10    \
    \   0.06     272.16       0.02     184.37\n                25       0.07     175.82\
    \       0.02     184.06\n                50       0.10      75.65       0.04 \
    \    180.56\n               100       0.14      38.98       0.07     151.65\n\
    \               200       0.19      16.66       0.11     106.80\n            \
    \   400       0.26       4.85       0.15      69.41\n               800      \
    \ 0.35       3.12       0.20      27.07\n              1600       0.42       0.67\
    \       0.29      10.68\n        Table 18: Drop and Send Rates for RED Queues\
    \ in Byte Mode\n   Table 18 shows that with a standard RED queue in byte mode\
    \ instead of\n   packet mode, there is a somewhat greater difference between the\n\
    \   packet drop rates of the TCP and TFRC-SP flows, particularly for\n   lower\
    \ packet drop rates.  For the simulation in Table 18, the packet\n   drop rates\
    \ for the TCP flows can range from 1 1/2 to four times\n   greater than the packet\
    \ drop rates for the TFRC-SP flows.  However,\n   because the TFRC-SP flow has\
    \ an upper bound on the sending rate, its\n   sending rate is not affected in\
    \ the lower packet-drop-rate regimes;\n   its sending rate is only affected in\
    \ the regimes with packet drop\n   rates of 10% or more.  The sending rate for\
    \ TFRC-SP in the scenarios\n   in Table 18 with higher packet drop rates are greater\
    \ than desired,\n   e.g., for the scenarios with 400 web sessions or greater.\
    \  However,\n   the results with TFRC-SP are at least better than that of small-\n\
    \   packet flows with no congestion control at all.\n                       <\
    \ - - - - - Send Rates in Kbps - - - - >\n              Web        TCP (512B seg)\
    \      TFRC-SP (200B seg)\n            Sessions   DropRate  SendRate    DropRate\
    \  SendRate\n            --------   --------  --------    --------  --------\n\
    \                10       0.01     337.86       0.01     184.06\n            \
    \    25       0.02     258.71       0.01     184.03\n                50      \
    \ 0.02     184.71       0.01     183.99\n               100       0.04      63.63\
    \       0.03     184.43\n               200       0.08      28.95       0.06 \
    \    149.80\n               400       0.12      17.03       0.10      88.21\n\
    \               800       0.24       5.94       0.15      36.80\n            \
    \  1600       0.32       3.37       0.21      19.45\n        Table 19: Drop and\
    \ Send Rates for RED Queues in Byte Mode\n   Table 19 shows that with a standard\
    \ RED queue in byte mode and with\n   long-lived TCP flows with 512-byte data\
    \ segments, there is only a\n   moderate difference between the packet drop rate\
    \ for the 552-byte TCP\n   packets and the 240-byte TFRC-SP packets.  However,\
    \ the sending rates\n   for TFRC-SP in the scenarios in Table 19 with higher packet\
    \ drop\n   rates are still greater than desired, even given the goal of fairness\n\
    \   with TCP flows with 1500-byte data segments instead of 512-byte data\n   segments.\n\
    \                       < - - - - - Send Rates in Kbps - - - - >\n           \
    \   Web       TCP (1460B seg)      TFRC-SP (200B seg)\n            Sessions  \
    \ DropRate  SendRate    DropRate  SendRate\n            --------   --------  --------\
    \    --------  --------\n                10       0.04     318.10       0.02 \
    \    185.34\n                25       0.08     175.34       0.03     184.38\n\
    \                50       0.10      81.60       0.04     181.95\n            \
    \   100       0.12      28.51       0.05     178.79\n               200      \
    \ 0.20       3.65       0.06     173.78\n               400       0.27       1.44\
    \       0.08     161.41\n               800       0.40       0.58       0.06 \
    \    159.62\n              1600       0.55       0.29       0.02     180.92\n\
    \    Table 20: Drop and Send Rates with Adaptive RED Queues in Byte Mode\n   For\
    \ the simulations in Table 20, the congested router uses an\n   Adaptive RED queue\
    \ in byte mode.\n   For this router, the output queue is in units of bytes rather\
    \ than of\n   packets, and each *byte* is dropped with the same probability. \
    \ Also,\n   because of the use of Adaptive RED, this byte-dropping mode extends\n\
    \   even for the high-packet-drop-rate regime.\n   As Table 20 shows, for a scenario\
    \ with Adaptive RED in byte mode, the\n   packet drop rate for the TFRC-SP traffic\
    \ is *much* lower than that\n   for the TCP traffic, and as a consequence, the\
    \ sending rate for the\n   TFRC-SP traffic in a highly congested environment is\
    \ *much* higher\n   than that of the TCP traffic.  In fact, in these scenarios\
    \ the TFRC-\n   SP congestion control mechanisms are largely ineffective for the\n\
    \   small-packet traffic.\n   The simulation with 1600 web servers is of particular\
    \ concern,\n   because the TCP packet drop rate increases, while the TFRC-SP packet\n\
    \   drop rate decreases significantly.  This is due to a detail of the\n   Adaptive\
    \ RED implementation in the NS simulator, and not about the\n   dynamics of TFRC-SP.\
    \  In particular, Adaptive RED is configured not\n   to \"adapt\" to packet drop\
    \ rates over 50%.  When the packet drop rate\n   is at most 50%, Adaptive RED\
    \ is moderately successful in keeping the\n   packet drop rate proportional to\
    \ the packet size.  TCP packets are\n   six times larger than the TFRC-SP packets\
    \ (including headers), so the\n   TCP packets should see a packet drop rate roughly\
    \ six times larger.\n   But for packet drop rates over 50%, Adaptive RED is no\
    \ longer in this\n   regime, so it is no longer successful in keeping the drop\
    \ rate for\n   TCP packets at most six times the drop rate of the TFRC-SP packets.\n\
    \   We note that the unfairness in these simulations, in favor of TFRC-\n   SP,\
    \ is even more severe than the unfairness shown in Table 13 for a\n   Drop-Tail\
    \ queue in bytes.  At the same time, it is not known if there\n   is any deployment\
    \ in the Internet of any routers with Adaptive RED in\n   byte mode, or of any\
    \ AQM mechanisms with similar behavior; we don't\n   know the extent of the deployment\
    \ of standard RED, or of any of the\n   proposed AQM mechanisms.\n           \
    \            < - - - - - Send Rates in Kbps - - - - >\n              Web     \
    \   TCP (512B seg)      TFRC-SP (200B seg)\n            Sessions   DropRate  SendRate\
    \    DropRate  SendRate\n            --------   --------  --------    --------\
    \  --------\n                10       0.01     306.56       0.01     185.11\n\
    \                25       0.02     261.41       0.01     184.41\n            \
    \    50       0.02     185.07       0.01     184.54\n               100      \
    \ 0.04      59.25       0.03     181.58\n               200       0.08      16.32\
    \       0.06     150.87\n               400       0.12      11.53       0.10 \
    \     98.10\n               800       0.25       5.85       0.15      46.59\n\
    \              1600       0.32       1.43       0.22      19.40\n    Table 21:\
    \ Drop and Send Rates for Adaptive RED Queues in Byte Mode\n   Table 21 shows\
    \ that when TFRC-SP with 240-byte packets competes with\n   TCP with 552-byte\
    \ packets in a scenario with Adaptive RED in byte\n   mode, the TFRC-SP flows\
    \ still receive more bandwidth than the TCP\n   flows, but the level of unfairness\
    \ is less severe, and the packet\n   drop rates of the TCP flows are at most twice\
    \ that of the TFRC-SP\n   flows.  That is, the TFRC-SP flows still receive more\
    \ than their\n   share of the bandwidth, but the TFRC-SP congestion control is\
    \ more\n   effective than that in Table 20 above.\n"
- title: Appendix C.  Exploring Possible Oscillations in the Loss Event Rate
  contents:
  - "Appendix C.  Exploring Possible Oscillations in the Loss Event Rate\n   TFRC-SP\
    \ estimates the loss interval size differently for short and\n   long loss intervals,\
    \ counting only one loss event for long loss\n   intervals, but counting all packet\
    \ losses as loss events for the\n   short loss intervals.  One question that has\
    \ been raised is whether\n   this can lead to oscillations in the average loss\
    \ event rate in\n   environments where there are many packet drops in a single\
    \ loss\n   event, and loss events switch from short to long and vice versa.  As\n\
    \   an example, consider a loss interval with N packets, including N/4\n   losses.\
    \  If this loss interval is short (at most two round-trip\n   times), the loss\
    \ interval length is measured as 4 packets.  If this\n   loss interval is long,\
    \ then the loss interval length is measured as N\n   packets.\n   If the loss\
    \ interval switching from short to long and back leads to\n   severe oscillations\
    \ in the average packet drop rate, and therefore in\n   the allowed sending rate,\
    \ one solution would be to have a more\n   gradual transition between the calculation\
    \ of the loss interval\n   length for short and long loss intervals.  For example,\
    \ one\n   possibility would be to use all of the packet losses for a loss\n  \
    \ interval of one round-trip time in calculating the loss interval\n   length,\
    \ to use 2/3 of the packet losses from a loss interval of two\n   round-trip times,\
    \ to use 1/3 of the packet losses from a loss\n   interval of three round-trip\
    \ time, and to use only one packet loss\n   from a loss interval of four or more\
    \ round-trip times.  This more\n   gradual mechanism would give a transition to\
    \ counting all losses for\n   a loss interval of only one round-trip time, and\
    \ counting only one\n   loss event for a loss interval of four or more round-trip\
    \ times.\n   However, our simulations so far have not shown a great difference\
    \ in\n   oscillations in the estimate loss event rate between the default\n  \
    \ mechanism for estimating the loss interval length for short loss\n   interval\
    \ and the gradual mechanism described above.  Simulation\n   scripts are available\
    \ from [VOIPSIMS].  Therefore, for now we are\n   staying with the simple default\
    \ mechanism for estimating the loss\n   event rate for short loss intervals described\
    \ in this document.\n"
- title: Appendix D.  A Discussion of Packet Size and Packet Dropping
  contents:
  - "Appendix D.  A Discussion of Packet Size and Packet Dropping\n   The lists below\
    \ give a general summary of the relative advantages of\n   packet-dropping behavior\
    \ at routers independent of packet size,\n   versus packet-dropping behavior where\
    \ large packets are more likely\n   to be dropped than small ones.\n   Advantages\
    \ of Packet Dropping Independent of Packet Size:\n   1.  Adds another incentive\
    \ for end nodes to use large packets.\n   2.  Matches an environment with a limitation\
    \ in pps rather than bps.\n   Advantages of Packet Dropping as a Function of Packet\
    \ Size:\n   1.  Small control packets are less likely to be dropped than are\n\
    \       large data packets, improving TCP performance.\n   2.  Matches an environment\
    \ with a limitation in bps rather than pps.\n   3.  Reduces the penalty of TCP\
    \ and other transport protocols against\n       flows with small packets (where\
    \ the allowed sending rate is\n       roughly a linear function of packet size).\n\
    \   4.  A queue limited in bytes is better than a queue limited in\n       packets\
    \ for matching the worst-case queue size to the worst-case\n       queueing delay\
    \ in seconds.\n"
- title: Normative References
  contents:
  - "Normative References\n   [RFC2119]      Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3448]      Handley, M., Floyd, S., Padhye, J., and J. Widmer,\n\
    \                  \"TCP Friendly Rate Control (TFRC): Protocol\n            \
    \      Specification\", RFC 3448, January 2003.\n"
- title: Informative References
  contents:
  - "Informative References\n   [EA03]         W. Eddy and M. Allman.  A Comparison\
    \ of RED's Byte and\n                  Packet Modes, Computer Networks, 42(2),\
    \ June 2003.\n   [P04]          T. Phelan, TFRC with Self-Limiting Sources, October\n\
    \                  2004, <http://www.phelan-4.com/dccp/>.\n   [RFC791]       Postel,\
    \ J., \"Internet Protocol\", STD 5, RFC 791,\n                  September 1981.\n\
    \   [RFC879]       Postel, J., \"TCP maximum segment size and related\n      \
    \            topics\", RFC 879, November 1983.\n   [RFC1144]      Jacobson, V.,\
    \ \"Compressing TCP/IP headers for low-\n                  speed serial links\"\
    , RFC 1144, February 1990.\n   [RFC3168]      Ramakrishnan, K., Floyd, S., and\
    \ D. Black, \"The\n                  Addition of Explicit Congestion Notification\
    \ (ECN) to\n                  IP\", RFC 3168, September 2001.\n   [RFC3540]  \
    \    Spring, N., Wetherall, D., and D. Ely, \"Robust\n                  Explicit\
    \ Congestion Notification (ECN) Signaling with\n                  Nonces\", RFC\
    \ 3540, June 2003.\n   [RFC3714]      Floyd, S. and J. Kempf, \"IAB Concerns Regarding\n\
    \                  Congestion Control for Voice Traffic in the Internet\",\n \
    \                 RFC 3714, March 2004.\n   [RFC3819]      Karn, P., Bormann,\
    \ C., Fairhurst, G., Grossman, D.,\n                  Ludwig, R., Mahdavi, J.,\
    \ Montenegro, G., Touch, J.,\n                  and L. Wood, \"Advice for Internet\
    \ Subnetwork\n                  Designers\", BCP 89, RFC 3819, July 2004.\n  \
    \ [RFC4340]      Kohler, E., Handley, M., and S. Floyd, \"Datagram\n         \
    \         Congestion Control Protocol (DCCP)\", RFC 4340, March\n            \
    \      2006.\n   [RFC4342]      Floyd, S., Kohler, E., and J. Padhye, \"Profile\
    \ for\n                  Datagram Congestion Control Protocol (DCCP) Congestion\n\
    \                  Control ID 3: TCP-Friendly Rate Control (TFRC)\", RFC\n   \
    \               4342, March 2006.\n   [RFC3448bis]   Handley, M., Floyd, S., Padhye,\
    \ J., and J. Widmer,\n                  \"TCP Friendly Rate Control (TFRC): Protocol\n\
    \                  Specification\", Work in Progress, March 2007.\n   [S05]  \
    \        Peter Sholander, private communications, August 2005.\n             \
    \     Citation for acknowledgement purposes only.\n   [V00]          P. Vasallo.\
    \  Variable Packet Size Equation-Based\n                  Congestion Control.\
    \  ICSI Technical Report TR-00-008,\n                  April 2000, <http://www.icsi.berkeley.edu/cgi-bin/\n\
    \                  pubs/publication.pl?ID=001183>\n   [VOIPSIMS]     Web page\
    \ <http://www.icir.org/tfrc/voipsims.html>.\n   [WBL04]        J. Widmer, C. Boutremans,\
    \ and Jean-Yves Le Boudec.\n                  Congestion Control for Flows with\
    \ Variable Packet\n                  Size, ACM CCR, 34(2), 2004.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sally Floyd\n   ICSI Center for Internet Research\n  \
    \ 1947 Center Street, Suite 600\n   Berkeley, CA 94704\n   USA\n   EMail: floyd@icir.org\n\
    \   Eddie Kohler\n   4531C Boelter Hall\n   UCLA Computer Science Department\n\
    \   Los Angeles, CA 90095\n   USA\n   EMail: kohler@cs.ucla.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
