- title: __initial_text__
  contents:
  - '         i;unicode-casemap - Simple Unicode Collation Algorithm

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes \"i;unicode-casemap\", a simple case-\n\
    \   insensitive collation for Unicode strings.  It provides equality,\n   substring,\
    \ and ordering operations.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The \"i;ascii-casemap\" collation described in [COMPARATOR]\
    \ is quite\n   simple to implement and provides case-independent comparisons for\
    \ the\n   26 Latin alphabetics.  It is specified as the default and/or baseline\n\
    \   comparator in some application protocols, e.g., [IMAP-SORT].\n   However,\
    \ the \"i;ascii-casemap\" collation does not produce\n   satisfactory results\
    \ with non-ASCII characters.  It is possible, with\n   a modest extension, to\
    \ provide a more sophisticated collation with\n   greater multilingual applicability\
    \ than \"i;ascii-casemap\".  This\n   extension provides case-independent comparisons\
    \ for a much greater\n   number of characters.  It also collates characters with\
    \ diacriticals\n   with the non-diacritical character forms.\n   This collation,\
    \ \"i;unicode-casemap\", is intended to be an alternative\n   to, and preferred\
    \ over, \"i;ascii-casemap\".  It does not replace the\n   \"i;basic\" collation\
    \ described in [BASIC].\n"
- title: 2.  Unicode Casemap Collation Description
  contents:
  - "2.  Unicode Casemap Collation Description\n   The \"i;unicode-casemap\" collation\
    \ is a simple collation which is\n   case-insensitive in its treatment of characters.\
    \  It provides\n   equality, substring, and ordering operations.  The validity\
    \ test\n   operation returns \"valid\" for any input.\n   This collation allows\
    \ strings in arbitrary (and mixed) character\n   sets, as long as the character\
    \ set for each string is identified and\n   it is possible to convert the string\
    \ to Unicode.  Strings which have\n   an unidentified character set and/or cannot\
    \ be converted to Unicode\n   are not rejected, but are treated as binary.\n \
    \  Each input string is prepared by converting it to a \"titlecased\n   canonicalized\
    \ UTF-8\" string according to the following steps, using\n   UnicodeData.txt ([UNICODE-DATA]):\n\
    \      (1) A Unicode codepoint is obtained from the input string.\n          (a)\
    \ If the input string is in a known charset that can be\n              converted\
    \ to Unicode, a sequence in the string's charset\n              is read and checked\
    \ for validity according to the rules of\n              that charset.  If the\
    \ sequence is valid, it is converted\n              to a Unicode codepoint.  Note\
    \ that for input strings in\n              UTF-8, the UTF-8 sequence must be valid\
    \ according to the\n              rules of [UTF-8]; e.g., overlong UTF-8 sequences\
    \ are\n              invalid.\n          (b) If the input string is in an unknown\
    \ charset, or an\n              invalid sequence occurs in step (1)(a), conversion\
    \ ceases.\n              No further preparation is performed, and any partial\n\
    \              preparation results are discarded.  The original string is\n  \
    \            used unchanged with the i;octet comparator.\n      (2) The following\
    \ steps, using UnicodeData.txt ([UNICODE-DATA]),\n          are performed on the\
    \ resulting codepoint from step (1)(a).\n          (a) If the codepoint has a\
    \ titlecase property in\n              UnicodeData.txt (this is normally the same\
    \ as the\n              uppercase property), the codepoint is converted to the\n\
    \              codepoints in the titlecase property.\n          (b) If the resulting\
    \ codepoint from (2)(a) has a decomposition\n              property of any type\
    \ in UnicodeData.txt, the codepoint is\n              converted to the codepoints\
    \ in the decomposition property.\n              This step is recursively applied\
    \ to each of the resulting\n              codepoints until no more decomposition\
    \ is possible\n              (effectively Normalization Form KD).\n          Example:\
    \ codepoint U+01C4 (LATIN CAPITAL LETTER DZ WITH CARON)\n          has a titlecase\
    \ property of U+01C5 (LATIN CAPITAL LETTER D\n          WITH SMALL LETTER Z WITH\
    \ CARON).  Codepoint U+01C5 has a\n          decomposition property of U+0044\
    \ (LATIN CAPITAL LETTER D)\n          U+017E (LATIN SMALL LETTER Z WITH CARON).\
    \  U+017E has a\n          decomposition property of U+007A (LATIN SMALL LETTER\
    \ Z) U+030c\n          (COMBINING CARON).  Neither U+0044, U+007A, nor U+030C\
    \ have\n          any decomposition properties.  Therefore, U+01C4 is converted\n\
    \          to U+0044 U+007A U+030C by this step.\n      (3) The resulting codepoint(s)\
    \ from step (2) is/are appended, in\n          UTF-8 format, to the \"titlecased\
    \ canonicalized UTF-8\" string.\n      (4) Repeat from step (1) until there is\
    \ no more data in the input\n          string.\n   Following the above preparation\
    \ process on each string, the equality,\n   ordering, and substring operations\
    \ are as for i;octet.\n   It is permitted to use an alternative implementation\
    \ of the above\n   preparation process if it produces the same results.  For example,\
    \ it\n   may be more convenient for an implementation to convert all input\n \
    \  strings to a sequence of UTF-16 or UTF-32 values prior to performing\n   any\
    \ of the step (2) actions.  Similarly, if all input strings are (or\n   are convertible\
    \ to) Unicode, it may be possible to use UTF-32 as an\n   alternative to UTF-8\
    \ in step (3).\n      Note: UTF-16 is unsuitable as an alternative to UTF-8 in\
    \ step (3),\n      because UTF-16 surrogates will cause i;octet to collate codepoints\n\
    \      U+E0000 through U+FFFF after non-BMP codepoints.\n   This collation is\
    \ not locale sensitive.  Consequently, care should be\n   taken when using OS-supplied\
    \ functions to implement this collation.\n   Functions such as strcasecmp and\
    \ toupper are sometimes locale\n   sensitive and may inconsistently casemap letters.\n\
    \   The i;unicode-casemap collation is well suited to use with many\n   Internet\
    \ protocols and computer languages.  Use with natural language\n   is often inappropriate;\
    \ even though the collation apparently supports\n   languages such as Swahili\
    \ and English, in real-world use it tends to\n   mis-sort a number of types of\
    \ string:\n   o  people and place names containing scripts that are not collated\n\
    \      according to \"alphabetical order\".\n   o  words with characters that\
    \ have diacriticals.  However,\n      i;unicode-casemap generally does a better\
    \ job than i;ascii-casemap\n      for most (but not all) languages.  For example,\
    \ German umlaut\n      letters will sort correctly, but some Scandinavian letters\
    \ will\n      not.\n   o  names such as \"Lloyd\" (which in Welsh sorts after\
    \ \"Lyon\", unlike\n      in English),\n   o  strings containing other non-letter\
    \ symbols; e.g., euro and pound\n      sterling symbols, quotation marks other\
    \ than '\"', dashes/hyphens,\n      etc.\n"
- title: 3.  Unicode Casemap Collation Registration
  contents:
  - "3.  Unicode Casemap Collation Registration\n   <?xml version='1.0'?>\n   <!DOCTYPE\
    \ collation SYSTEM 'collationreg.dtd'>\n   <collation rfc=\"5051\" scope=\"global\"\
    \ intendedUse=\"common\">\n   <identifier>i;unicode-casemap</identifier>\n   <title>Unicode\
    \ Casemap</title>\n   <operations>equality order substring</operations>\n   <specification>RFC\
    \ 5051</specification>\n   <owner>IETF</owner>\n   <submitter>mrc@cac.washington.edu</submitter>\n\
    \   </collation>\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   The security considerations for [UTF-8], [STRINGPREP],\
    \ and [UNICODE-\n   SECURITY] apply and are normative to this specification.\n\
    \   The results from this comparator will vary depending upon the\n   implementation\
    \ for several reasons.  Implementations MUST consider\n   whether these possibilities\
    \ are a problem for their use case:\n   1) New characters added in Unicode may\
    \ have decomposition or\n      titlecase properties that will not be known to\
    \ an implementation\n      based upon an older revision of Unicode.  This impacts\
    \ step (2).\n   2) Step (2)(b) defines a subset of Normalization Form KD (NFKD)\
    \ that\n      does not require normalization of out-of-order diacriticals.\n \
    \     However, an implementation MAY use an NFKD library routine that\n      does\
    \ such normalization.  This impacts step (2)(b) and possibly\n      also step\
    \ (1)(a), and is an issue only with ill-formed UTF-8\n      input.\n   3) The\
    \ set of charsets handled in step (1)(a) is open-ended.  UTF-8\n      (and, by\
    \ extension, US-ASCII) are the only mandatory-to-implement\n      charsets.  This\
    \ impacts step (1)(a).\n      Implementations SHOULD, as far as feasible, support\
    \ all the\n      charsets they are likely to encounter in the input data, in order\n\
    \      to avoid poor collation caused by the fall through to the (1)(b)\n    \
    \  rule.\n   4) Other charsets may have revisions which add new characters that\n\
    \      are not known to an implementation based upon an older revision.\n    \
    \  This impacts step (1)(a) and possibly also step (1)(b).\n   An attacker may\
    \ create input that is ill-formed or in an unknown\n   charset, with the intention\
    \ of impacting the results of this\n   comparator or exploiting other parts of\
    \ the system which process this\n   input in different ways.  Note, however, that\
    \ even well-formed data\n   in a known charset can impact the result of this comparator\
    \ in\n   unexpected ways.  For example, an attacker can substitute U+0041\n  \
    \ (LATIN CAPITAL LETTER A) with U+0391 (GREEK CAPITAL LETTER ALPHA) or\n   U+0410\
    \ (CYRILLIC CAPITAL LETTER A) in the intention of causing a\n   non-match of strings\
    \ which visually appear the same and/or causing\n   the string to appear elsewhere\
    \ in a sort.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   The i;unicode-casemap collation defined in section\
    \ 2 has been added\n   to the registry of collations defined in [COMPARATOR].\n"
- title: 6.  Normative References
  contents:
  - "6.  Normative References\n   [COMPARATOR]          Newman, C., Duerst, M., and\
    \ A. Gulbrandsen,\n                         \"Internet Application Protocol Collation\n\
    \                         Registry\", RFC 4790, February 2007.\n   [STRINGPREP]\
    \          Hoffman, P. and M. Blanchet, \"Preparation of\n                   \
    \      Internationalized Strings (\"stringprep\")\", RFC\n                   \
    \      3454, December 2002.\n   [UTF-8]               Yergeau, F., \"UTF-8, a\
    \ transformation format of\n                         ISO 10646\", STD 63, RFC\
    \ 3629, November 2003.\n   [UNICODE-DATA]        <http://www.unicode.org/Public/UNIDATA/\n\
    \                         UnicodeData.txt>\n                         Although\
    \ the UnicodeData.txt file referenced\n                         here is part of\
    \ the Unicode standard, it is\n                         subject to change as new\
    \ characters are added\n                         to Unicode and errors are corrected\
    \ in Unicode\n                         revisions.  As a result, it may be less\
    \ stable\n                         than might otherwise be implied by the\n  \
    \                       standards status of this specification.\n   [UNICODE-SECURITY]\
    \    Davis, M. and M. Suignard, \"Unicode Security\n                         Considerations\"\
    , February 2006,\n                         <http://www.unicode.org/reports/tr36/>.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [BASIC]               Newman, C., Duerst, M.,\
    \ and A. Gulbrandsen,\n                         \"i;basic - the Unicode Collation\
    \ Algorithm\",\n                         Work in Progress, March 2007.\n   [IMAP-SORT]\
    \           Crispin, M. and K. Murchison, \"Internet Message\n               \
    \          Access Protocol - SORT and THREAD Extensions\",\n                 \
    \        Work in Progress, September 2007.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Mark R. Crispin\n   Networks and Distributed Computing\n\
    \   University of Washington\n   4545 15th Avenue NE\n   Seattle, WA  98105-4527\n\
    \   Phone: +1 (206) 543-5762\n   EMail: MRC@CAC.Washington.EDU\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
