Abstract When scheduling a calendar entity, such as an event, it is a prerequisite that an organizer has the calendar address of each attendee that will be invited to the event.
Additionally, access to an attendee's current "busy time" provides an a priori indication of whether the attendee will be free to participate in the event.
In order to meet these challenges, a calendar user agent (CUA) needs a mechanism to locate (URI) individual user's calendar and free/busy time.
This memo defines three mechanisms for obtaining a URI to a user's calendar and free/busy time.
These include: Manual transfer of the information; Personal data exchange using the vCard format; and Directory lookup using the LDAP protocol.
1  Calendaring and Scheduling URIs
This memo defines four classes of URIs.
URIs are more useful if it is understood what the URIs point to.
Here is a brief description: 1.1 Free/Busy URI (FBURL)
The free/busy URI is defined to be a transport independent location where a client can obtain information about when a user is busy.
At the present time, this URI only points to busy time data.
Future revisions of this specification may provide for the extended capability of publishing free time data.
If a calendaring and scheduling client (i.e., CUA) were to retrieve data from this location using FTP or HTTP, it would get back an iCalendar object [4] containing one or more "VFREEBUSY" calendar components.
If a MIME transport is being used, the response will be contained within a "text/calendar" MIME body part as specified in the iCalendar specification [4].
The amount of busy time data pointed to by the FBURL will generally be pre determined; for example one month of busy time data.
As a guideline, it is recommended that the previous six weeks of busy time data be published at the location associated with the FBURL.
If this URI points to a file resource, it is recommended that the file extension be "ifb" to distinguish it from an arbitrary iCalendar object (e.g., with the "ics" file extension).
1.2 Calendar Access URI (CAPURI)
The Calendar Access URI is defined to be a protocol independent location from which a calendaring and scheduling client (i.e., CUA) can communicate with a user's entire calendar.
The semantics for using this URI as an access protocol locator are yet to be defined by the IETF CALSCH Working Group.
This will be addressed in the "Calendar Access Protocol" specification.
The Calendar URI is defined to be a protocol independent location from which a calendaring and scheduling client (i.e. CUA) can retrieve an entire copy of a user's calendar.
Retrieving data from this URI obtains a published "snapshot" of the user's calendar.
If the URI is an HTTP URI, then the content returned with a GET should be a "text/calendar" MIME body part containing one or more iCalendar object.
If the URI is an FTP URI, then the resource pointed to should be a file with an "ics" file extension containing one or more iCalendar objects.
There are many cases where a user may have more than one calendar.
In these cases, a user may have multiple URIs, each URI pointing to a calendar or free/busy data.
To make the case of multiple calendars simpler for clients, the concept of the "default" calendar is introduced.
A "default" calendar is one that the user has designated as the calendar that other users should look at when accessing the user's calendar, or retrieving the user's free/busy time.
The default calendar may, in fact, include rolled up information from all the user's other calendars.
The other calendars may only exist for organizational purposes.
These four URIs provide valuable pointers to calendaring and scheduling data that other users need in order to know when to schedule meetings, etc.
There are several possibilities on how users can communicate these URIs to other users.
The following section outlines how these URIs can be distributed to other users.
The simplest way to obtain these URIs is for a user to communicate the URIs using some out of band mechanism such as verbally, or in an e mail message, or by printing these URIs on a paper business card.
When using this mechanism, the user obtains these URIs using an out  of band mechanism and then enters these URIs into their calendaring software manually.
2.2 Personal Data Exchange Using A vCard A more sophisticated way to obtain these URIs is for users to publish vCards containing these URIs.
The vCard object can be transferred between one another.
Since many e mail clients allow a user to automatically include a vCard with every message that the user sends, this provides a simple, transparent way for a user to distribute their calendaring and scheduling URIs.
On the receiving end, an e mail client that provides an integrated vCard database can provide a way to lookup calendaring URIs for users whose vCards are stored locally.
[3] specification doesn't specify how to encode calendaring URIs in a vCard, this section is provided as an extension to vCard which specifies how to encode calendaring URIs within a vCard.
Inside a vCard object, four new properties are defined: "CALURI", "CAPURI", "CALADRURI", and "FBURL", as defined above.
Any vCard can have one or more of these properties, each representing a calendar or free/busy time that is associated with the user.
One of these properties can be designated as the "default" by adding the "PREF" parameter.
Here is a simple example of a vCard containing a "FBURL" and a "CALURI".
Alec Dun ORG:Microsoft Corporation ADR;WORK;POSTAL;PARCEL:;;One Microsoft Way; Redmond;WA;98052 6399;USA
1 206 936 7329 EMAIL;INTERNET:user@host1.com
VCARD 2.3.1 FBURL Property IANA Registration
Subject: Registration of FBURL type for text/directory MIME type vCard profile.
FBURL Type purpose: To specify the URI for a user's busy time in a vCard object.
Type encoding: 8bit Type value: A single URI value.
Where multiple FBURL properties are specified, the default FBURL property is indicated with the PREF parameter.
The FTP or HTTP type of URI points to an iCalendar object associated with a snapshot of the last six weeks of the user's busy time data.
If the iCalendar object is represented as a file or document, it's file type should be "ifb".
Registration of CALADRURI type for application/directory MIME type vCard profile.
CALADRURI Type purpose: To specify the location to which an event request should be sent for the user.
Type encoding: 8bit Type value: A single URI value.
Where multiple CALADRURI properties are specified, the default CALADRURI property is indicated with the PREF parameter.
Registration of CAPURI type for application/directory MIME type vCard profile.
CAPURI Type purpose: To specify a protocol independent location from which a calendaring and scheduling client (i.e., CUA) can communicate with a user's entire calendar.
Type encoding: 8bit Type value: A single URI value.
Where multiple CAPURI properties are specified, the default CAPURI property is indicated with the PREF parameter.
Registration of CALURI type for text/directory MIME type vCard profile.
CALURI Type purpose: To specify the URI for a user's calendar in a vCard object.
Type encoding: 8bit Type value type:
Where multiple CALURI properties are specified, the default CALURI property is indicated with the PREF parameter.
The property should contain a URI pointing to an iCalendar object associated with a snapshot of the user's calendar store.
If the iCalendar object is represented as a file or document, it's file type should be "ics".
Directory Lookup Using The LDAP v3 Protocol
Another way to obtain these URIs is to look them up in a directory using the LDAP protocol [1].
If a user's URIs can be found using directory lookup (i.e., searching for one of the LDAP schema extensions defined below), they should, in general, be considered "more up to date" than URIs in any vCards that are stored locally.
In order to encode the calendaring URIs in the directory, the following are defined: One object class: calEntry
The calCalURI contains the URI to a snapshot of the user's entire default calendar.
The calFBURL contains the URI to the user's default busy time data.
The calCAPURI represents contains a URI that can be used to communicate with the user's calendar.
The calCalAdrURI contains a URI that points to the location to which event requests should be sent for that user.
The calOtherCalURIs is a multi valued property containing URIs to snapshots of other calendars that the user may have.
The calOtherFBURLs is a multi valued property containing URIs to other free/busy data that the user may have.
The calOtherCAPURIs attribute is a multi valued property containing URIs to other calendars that the user may have.
The calOtherCalAdrURIs attribute is a multi valued property containing URIs to other locations that a user may want event requests sent to.
There is no predetermined order to the values in either multi valued property.
The notation used in this memo is the same as that used in [2].
2.4.3  Object Definitions 2.4.3.1  calEntry
The Calendar Entry is a class derived from "TOP" [2], which contains the four calendaring attributes.
(1.2.840.113556.1.5.87 NAME 'calEntry' TOP AUXILIARY MAY (
SYNTAX 'IA5String' USAGE userApplications )
calFBURL (1.2.840.113556.1.4.479 NAME 'calFBURL' EQUALITY
SYNTAX 'IA5String' USAGE userApplications )
SYNTAX 'IA5String' USAGE userApplications )
SYNTAX 'IA5String' USAGE userApplications )
2.4.4.5  calOtherCalURIs (1.2.840.113556.1.4.482 NAME 'calOtherCalURIs' EQUALITY
caseIgnoreMatch SYNTAX 'IA5String' MULTI VALUE USAGE userApplications )
calOtherFBURLs (1.2.840.113556.1.4.483 NAME 'calOtherFBURLs' EQUALITY
caseIgnoreMatch SYNTAX 'IA5String' MULTI VALUE USAGE userApplications )
2.4.4.7  calOtherCAPURIs (1.2.840.113556.1.4.484 NAME 'calOtherCAPURIs' EQUALITY
caseIgnoreMatch SYNTAX 'IA5String' MULTI VALUE USAGE userApplications )
caseIgnoreMatch SYNTAX 'IA5String' MULTI VALUE USAGE userApplications )
This memo defines IANA registered extensions to the attributes defined by LDAP [1] and vCard [3].
IANA registration proposals for vCard are to be emailed to the registration agent for the "text/directory" MIME content type,
using the format defined in [3].
4  Security Considerations Standard vCard and LDAP security rules and support apply for the extensions described in this document, and there are no special security issues for these extensions.
Please note, though, that LDAP servers may permit anonymous clients to refresh entries which they did not create.
Servers are also permitted to control a refresh access to an entry by requiring clients to bind before issuing a RefreshRequest.
This will have implications on the server performance and scalability.
Please also note, though, that vCard objects may have been created by an entity other than that represented by the vCard.
Recipients should be certain of the source that generated the vCard.
Also, care should be taken in making use of information obtained from directory servers that has been supplied by client, as it may now be out of date.
In many networks, for example, IP addresses are automatically assigned when a host connects to the network, and may be reassigned if that host later disconnects.
An IP address obtained from the directory may no longer be assigned to the host that placed the address in the directory.
This issue is not specific to LDAP or dynamic directories.
Bibliography [1] Wahl, M., Howes, T. and S. Kille, "Lightweight Directory Access Protocol (v3)", RFC 2251, December 1997.
[2] Wahl, M., Coulbeck, A., Howes, T. and  S. Kille, "Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions", RFC 2252, December 1997.
[3] Dawson, F. and  T. Howes, "vCard MIME Directory Profile", RFC 2426, September 1998.
[4] Dawson, F. and D. Stenerson, "Internet Calendaring and Scheduling Core
Object Specification (iCalendar)", RFC 2445, November 1997.
[5] Dawson, F. and S. Mansour, "iCalendar Message Based Interopability Protocal (iMIP)", RFC 2447, November 1997.
