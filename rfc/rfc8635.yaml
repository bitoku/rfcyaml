- title: __initial_text__
  contents:
  - '                        Router Keying for BGPsec

    '
- title: Abstract
  contents:
  - "Abstract\n   BGPsec-speaking routers are provisioned with private keys in order\
    \ to\n   sign BGPsec announcements.  The corresponding public keys are\n   published\
    \ in the Global Resource Public Key Infrastructure (RPKI),\n   enabling verification\
    \ of BGPsec messages.  This document describes\n   two methods of generating the\
    \ public-private key pairs: router-driven\n   and operator-driven.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8635.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Requirements Language . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Management/Router Communication . . . . . . . . . . . .\
    \ . . .   3\n   4.  Exchange Certificates . . . . . . . . . . . . . . . . . .\
    \ . .   4\n   5.  Setup . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   5\n   6.  Generate PKCS#10  . . . . . . . . . . . . . . . . . . . . . .\
    \   5\n     6.1.  Router-Driven Keys  . . . . . . . . . . . . . . . . . . .  \
    \ 5\n     6.2.  Operator-Driven Keys  . . . . . . . . . . . . . . . . . .   6\n\
    \       6.2.1.  Using PKCS#8 to Transfer Private Keys . . . . . . . .   6\n  \
    \ 7.  Send PKCS#10 and Receive PKCS#7 . . . . . . . . . . . . . . .   7\n   8.\
    \  Install Certificate . . . . . . . . . . . . . . . . . . . . .   7\n   9.  Advanced\
    \ Deployment Scenarios . . . . . . . . . . . . . . . .   8\n   10. Key Management\
    \  . . . . . . . . . . . . . . . . . . . . . . .   9\n     10.1.  Key Validity\
    \ . . . . . . . . . . . . . . . . . . . . . .  10\n     10.2.  Key Rollover .\
    \ . . . . . . . . . . . . . . . . . . . . .  10\n     10.3.  Key Revocation .\
    \ . . . . . . . . . . . . . . . . . . . .  11\n     10.4.  Router Replacement\
    \ . . . . . . . . . . . . . . . . . . .  11\n   11. Security Considerations .\
    \ . . . . . . . . . . . . . . . . . .  12\n   12. IANA Considerations . . . .\
    \ . . . . . . . . . . . . . . . . .  13\n   13. References  . . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  13\n     13.1.  Normative References . . .\
    \ . . . . . . . . . . . . . . .  13\n     13.2.  Informative References . . .\
    \ . . . . . . . . . . . . . .  14\n   Appendix A.  Management/Router Channel Security\
    \ . . . . . . . . .  17\n   Appendix B.  An Introduction to BGPsec Key Management\
    \ . . . . . .  18\n   Authors' Addresses  . . . . . . . . . . . . . . . . . .\
    \ . . . . .  21\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   BGPsec-speaking routers are provisioned with private keys,\
    \ which\n   allow them to digitally sign BGPsec announcements.  To verify the\n\
    \   signature, the public key, in the form of a certificate [RFC8209], is\n  \
    \ published in the Resource Public Key Infrastructure (RPKI).  This\n   document\
    \ describes provisioning of BGPsec-speaking routers with the\n   appropriate public-private\
    \ key pairs.  There are two methods: router-\n   driven and operator-driven.\n\
    \   These two methods differ in where the keys are generated: on the\n   router\
    \ in the router-driven method, and elsewhere in the operator-\n   driven method.\n\
    \   The two methods also differ in who generates the private/public key\n   pair:\
    \ the operator generates the pair and sends it to the router in\n   the operator-driven\
    \ method, and the router generates its own pair in\n   the router-driven method.\n\
    \   The router-driven method mirrors the model used by traditional PKI\n   subscribers;\
    \ the private key never leaves trusted storage (e.g.,\n   Hardware Security Module\
    \ (HSM)).  This is by design and supports\n   classic PKI Certification Policies\
    \ for (often human) subscribers that\n   require the private key only ever be\
    \ controlled by the subscriber to\n   ensure that no one can impersonate the subscriber.\
    \  For non-humans,\n   this method does not always work.  The operator-driven\
    \ method is\n   motivated by the extreme importance placed on ensuring the continued\n\
    \   operation of the network.  In some deployments, the same private key\n   needs\
    \ to be installed in the soon-to-be online router that was used\n   by the soon-to-be\
    \ offline router, since this \"hot-swapping\" behavior\n   can result in minimal\
    \ downtime, especially compared with the normal\n   RPKI procedures to propagate\
    \ a new key, which can take a day or\n   longer to converge.\n   For example,\
    \ when an operator wants to support hot-swappable routers,\n   the same private\
    \ key needs to be installed in the soon-to-be online\n   router that was used\
    \ by the soon-to-be offline router.  This\n   motivated the operator-driven method.\n\
    \   Sections 3 through 8 describe the various steps involved for an\n   operator\
    \ to use the two methods to provision new and existing\n   routers.  The methods\
    \ described involve the operator configuring the\n   two endpoints (i.e., the\
    \ management station and the router) and\n   acting as the intermediary.  Section\
    \ 9 describes another method that\n   requires more-capable routers.\n   Useful\
    \ References: [RFC8205] describes the details of BGPsec,\n   [RFC8209] specifies\
    \ the format for the PKCS#10 certification request,\n   and [RFC8608] specifies\
    \ the algorithms used to generate the PKCS#10\n   signature.\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 3.  Management/Router Communication
  contents:
  - "3.  Management/Router Communication\n   Operators are free to use either the\
    \ router-driven or the operator-\n   driven method as supported by the platform.\
    \  Prudent security\n   practice recommends router-generated keying, if the delay\
    \ in\n   replacing a router (or router engine) is acceptable to the operator.\n\
    \   Regardless of the method chosen, operators first establish a\n   protected\
    \ channel between the management system and the router; this\n   protected channel\
    \ prevents eavesdropping, tampering, and message\n   forgery.  It also provides\
    \ mutual authentication.  How this protected\n   channel is established is router-specific\
    \ and is beyond scope of this\n   document.  Though other configuration mechanisms\
    \ might be used, e.g.,\n   the Network Configuration Protocol (NETCONF) (see [RFC6470]),\
    \ the\n   protected channel used between the management platform and the router\n\
    \   is assumed to be an SSH-protected CLI.  See Appendix A for security\n   considerations\
    \ for this protected channel.\n   The previous paragraph assumes the management-system-to-router\n\
    \   communications are over a network.  When the management system has a\n   direct\
    \ physical connection to the router, e.g., via the craft port,\n   there is no\
    \ assumption that there is a protected channel between the\n   two.\n   To be\
    \ clear, for both of these methods, an initial leap of faith is\n   required because\
    \ the router has no keying material that it can use to\n   protect communications\
    \ with anyone or anything.  Because of this\n   initial leap of faith, a direct\
    \ physical connection is safer than a\n   network connection because there is\
    \ less chance of a monkey in the\n   middle.  Once keying material is established\
    \ on the router, the\n   communications channel must prevent eavesdropping, tampering,\
    \ and\n   message forgery.  This initial leap of faith will no longer be\n   required\
    \ once routers are delivered to operators with operator-\n   trusted keying material.\n"
- title: 4.  Exchange Certificates
  contents:
  - "4.  Exchange Certificates\n   A number of options exist for the operator's management\
    \ station to\n   exchange PKI-related information with routers and with the RPKI\n\
    \   including:\n   o  Using application/pkcs10 media type [RFC5967] to extract\n\
    \      certificate requests and application/pkcs7-mime [RFC8551] to\n      return\
    \ the issued certificate,\n   o  Using FTP or HTTP per [RFC2585], and\n   o  Using\
    \ the Enrollment over Secure Transport (EST) protocol per\n      [RFC7030].\n\
    \   Despite the fact that certificates are integrity-protected and do not\n  \
    \ necessarily need additional protection, transports that also provide\n   integrity\
    \ protection are RECOMMENDED.\n"
- title: 5.  Setup
  contents:
  - "5.  Setup\n   To start, the operator uses the protected channel to install the\n\
    \   appropriate RPKI Trust Anchor's Certificate (TA Certificate) in the\n   router.\
    \  This will later enable the router to validate the router\n   certificate returned\
    \ in the PKCS#7 certs-only message [RFC8551].\n   The operator configures the\
    \ Autonomous System (AS) number to be used\n   in the generated router certificate.\
    \  This may be the sole AS\n   configured on the router or an operator choice\
    \ if the router is\n   configured with multiple ASes.  A router with multiple\
    \ ASes can\n   generate multiple router certificates by following the process\n\
    \   described in this document for each desired certificate.  This\n   configured\
    \ AS number is also used during verification of keys, if\n   generated by the\
    \ operator (see Section 6.2), as well as during\n   certificate verification steps\
    \ (see Sections 7, 8, and 9).\n   The operator configures or extracts from the\
    \ router the BGP\n   Identifier [RFC6286] to be used in the generated router certificate.\n\
    \   In the case where the operator has chosen not to use unique per-\n   router\
    \ certificates, a BGP Identifier of 0 MAY be used.\n   The operator configures\
    \ the router's access control mechanism to\n   ensure that only authorized users\
    \ are able to later access the\n   router's configuration.\n"
- title: 6.  Generate PKCS#10
  contents:
  - "6.  Generate PKCS#10\n   The private key, and hence the PKCS#10 certification\
    \ request, which\n   is sometimes referred to as a Certificate Signing Request\
    \ (CSR), may\n   be generated by the router or by the operator.\n   Retaining\
    \ the CSR allows for verifying that the returned public key\n   in the certificate\
    \ corresponds to the private key used to generate\n   the signature on the CSR.\n\
    \   NOTE: The PKCS#10 certification request does not include the AS\n   number\
    \ or the BGP Identifier for the router certificate.  Therefore,\n   the operator\
    \ transmits the AS it has chosen on the router as well as\n   the BGP Identifier\
    \ when it sends the CSR to the CA.\n"
- title: 6.1.  Router-Driven Keys
  contents:
  - "6.1.  Router-Driven Keys\n   In the router-driven method, once the protected\
    \ channel is\n   established and the initial setup (Section 5) performed, the\
    \ operator\n   issues a command or commands for the router to generate the public-\n\
    \   private key pair, to generate the PKCS#10 certification request, and\n   to\
    \ sign the PKCS#10 certification request with the private key.  Once\n   the router\
    \ has generated the PKCS#10 certification request, it\n   returns it to the operator\
    \ over the protected channel.\n   The operator includes the chosen AS number and\
    \ the BGP Identifier\n   when it sends the CSR to the CA.\n   Even if the operator\
    \ cannot extract the private key from the router,\n   this signature still provides\
    \ a link between a private key and a\n   router.  That is, the operator can verify\
    \ the proof of possession\n   (POP), as required by [RFC6484].\n   NOTE: The CA\
    \ needs to know that the router-driven CSR is authorized.\n   The easiest way\
    \ to accomplish this is for the operator to mediate the\n   communication with\
    \ the CA.  Other workflows are possible, e.g., where\n   the router sends the\
    \ CSR to the CA but the operator logs in to the CA\n   independently and is presented\
    \ with a list of pending requests to\n   approve.  See Section 9 for an additional\
    \ workflow.\n   If a router was to communicate directly with a CA to have the\
    \ CA\n   certify the PKCS#10 certification request, there would be no way for\n\
    \   the CA to authenticate the router.  As the operator knows the\n   authenticity\
    \ of the router, the operator mediates the communication\n   with the CA.\n"
- title: 6.2.  Operator-Driven Keys
  contents:
  - "6.2.  Operator-Driven Keys\n   In the operator-driven method, the operator generates\
    \ the public-\n   private key pair on a management station and installs the private\
    \ key\n   into the router over the protected channel.  Beware that experience\n\
    \   has shown that copy-and-paste from a management station to a router\n   can\
    \ be unreliable for long texts.\n   The operator then creates and signs the PKCS#10\
    \ certification request\n   with the private key; the operator includes the chosen\
    \ AS number and\n   the BGP Identifier when it sends the CSR to the CA.\n"
- title: 6.2.1.  Using PKCS#8 to Transfer Private Keys
  contents:
  - "6.2.1.  Using PKCS#8 to Transfer Private Keys\n   A private key can be encapsulated\
    \ in a PKCS#8 Asymmetric Key Package\n   [RFC5958] and SHOULD be further encapsulated\
    \ in Cryptographic Message\n   Syntax (CMS) SignedData [RFC5652] and signed with\
    \ the operator's End\n   Entity (EE) private key.\n   The router SHOULD verify\
    \ the signature of the encapsulated PKCS#8 to\n   ensure the returned private\
    \ key did in fact come from the operator,\n   but this requires that the operator\
    \ also provision via the CLI or\n   include in the SignedData the RPKI CA certificate\
    \ and relevant\n   operators' EE certificate(s).  The router SHOULD inform the\
    \ operator\n   whether or not the signature validates to a trust anchor; this\n\
    \   notification mechanism is out of scope.\n"
- title: 7.  Send PKCS#10 and Receive PKCS#7
  contents:
  - "7.  Send PKCS#10 and Receive PKCS#7\n   The operator uses RPKI management tools\
    \ to communicate with the\n   Global RPKI system to have the appropriate CA validate\
    \ the PKCS#10\n   certification request, sign the key in the PKCS#10 (i.e., certify\n\
    \   it), generate a PKCS#7 certs-only message, and publish the\n   certificate\
    \ in the Global RPKI.  External network connectivity may be\n   needed if the\
    \ certificate is to be published in the Global RPKI.\n   After the CA certifies\
    \ the key, it does two things:\n   1.  Publishes the certificate in the Global\
    \ RPKI.  The CA must have\n       connectivity to the relevant publication point,\
    \ which, in turn,\n       must have external network connectivity as it is part\
    \ of the\n       Global RPKI.\n   2.  Returns the certificate to the operator's\
    \ management station,\n       packaged in a PKCS#7 certs-only message, using the\
    \ corresponding\n       method by which it received the certificate request. \
    \ It SHOULD\n       include the certificate chain below the TA Certificate so\
    \ that\n       the router can validate the router certificate.\n   In the operator-driven\
    \ method, the operator SHOULD extract the\n   certificate from the PKCS#7 certs-only\
    \ message and verify that the\n   public key the operator holds corresponds to\
    \ the returned public key\n   in the PKCS#7 certs-only message.  If the operator\
    \ saved the PKCS#10,\n   it can check this correspondence by comparing the public\
    \ key in the\n   CSR to the public key in the returned certificate.  If the operator\n\
    \   has not saved the PKCS#10, it can check this correspondence by\n   regenerating\
    \ the public key from the private key and then verifying\n   that the regenerated\
    \ public key matches the public key returned in\n   the certificate.\n   In the\
    \ operator-driven method, the operator has already installed the\n   private key\
    \ in the router (see Section 6.2).\n"
- title: 8.  Install Certificate
  contents:
  - "8.  Install Certificate\n   The operator provisions the PKCS#7 certs-only message\
    \ into the router\n   over the protected channel.\n   The router SHOULD extract\
    \ the certificate from the PKCS#7 certs-only\n   message and verify that the public\
    \ key corresponds to the stored\n   private key.  If the router stored the PKCS#10,\
    \ it can check this\n   correspondence by comparing the public key in the CSR\
    \ to the public\n   key in the returned certificate.  If the router did not store\
    \ the\n   PKCS#10, it can check this correspondence by generating a signature\n\
    \   on any data and then verifying the signature using the returned\n   certificate.\
    \  The router SHOULD inform the operator whether it\n   successfully received\
    \ the certificate and whether or not the keys\n   correspond; the mechanism is\
    \ out of scope.\n   The router SHOULD also verify that the returned certificate\
    \ validates\n   back to the installed TA Certificate, i.e., the entire chain from\
    \ the\n   installed TA Certificate through subordinate CAs to the BGPsec\n   certificate\
    \ validate.  To perform this verification, the CA\n   certificate chain needs\
    \ to be returned along with the router's\n   certificate in the PKCS#7 certs-only\
    \ message.  The router SHOULD\n   inform the operator whether or not the signature\
    \ validates to a trust\n   anchor; this notification mechanism is out of scope.\n\
    \   NOTE: The signature on the PKCS#8 and Certificate need not be made by\n  \
    \ the same entity.  Signing the PKCS#8 permits more-advanced\n   configurations\
    \ where the entity that generates the keys is not the\n   direct CA.\n"
- title: 9.  Advanced Deployment Scenarios
  contents:
  - "9.  Advanced Deployment Scenarios\n   More PKI-capable routers can take advantage\
    \ of increased\n   functionality and lighten the operator's burden.  Typically,\
    \ these\n   routers include either preinstalled manufacturer-driven certificates\n\
    \   (e.g., IEEE 802.1 AR [IEEE802-1AR]) or preinstalled manufacturer-\n   driven\
    \ Pre-Shared Keys (PSKs) as well as PKI-enrollment functionality\n   and transport\
    \ protocol, e.g., CMC's \"Secure Transport\" [RFC7030] or\n   the original CMC\
    \ transport protocols [RFC5273].  When the operator\n   first establishes a protected\
    \ channel between the management system\n   and the router, this preinstalled\
    \ key material is used to\n   authenticate the router.\n   The operator's burden\
    \ shifts here to include:\n   1.  Securely communicating the router's authentication\
    \ material to\n       the CA prior to the operator initiating the router's CSR.\
    \  CAs\n       use authentication material to determine whether the router is\n\
    \       eligible to receive a certificate.  At a minimum, authentication\n   \
    \    material includes the router's AS number and BGP Identifier as\n       well\
    \ as the router's key material, but it can also include\n       additional information.\
    \  Authentication material can be\n       communicated to the CA (i.e., CSRs signed\
    \ by this key material\n       are issued certificates with this AS and BGP Identifier)\
    \ or to\n       the router (i.e., the operator uses the vendor-supplied\n    \
    \   management interface to include the AS number and BGP Identifier\n       in\
    \ the router-driven CSR).  The CA stores this authentication\n       material\
    \ in an account entry for the router so that it can later\n       be compared\
    \ against the CSR prior to the CA issuing a certificate\n       to the router.\n\
    \   2.  Enabling the router to communicate with the CA.  While the\n       router-to-CA\
    \ communications are operator-initiated, the\n       operator's management interface\
    \ need not be involved in the\n       communications path.  Enabling the router-to-CA\
    \ connectivity may\n       require connections to external networks (i.e., through\n\
    \       firewalls, NATs, etc.).\n   3.  Ensuring the cryptographic chain of custody\
    \ from the\n       manufacturer.  For the preinstalled key material, the operator\n\
    \       needs guarantees that either no one has accessed the private key\n   \
    \    or an authenticated log of those who have accessed it MUST be\n       provided\
    \ to the operator.\n   Once configured, the operator can begin the process of\
    \ enrolling the\n   router.  Because the router is communicating directly with\
    \ the CA,\n   there is no need for the operator to retrieve the PKCS#10\n   certification\
    \ request from the router as in Section 6 or return the\n   PKCS#7 certs-only\
    \ message to the router as in Section 7.  Note that\n   the checks performed by\
    \ the router in Section 8 (namely, extracting\n   the certificate from the PKCS#7\
    \ certs-only message, verifying that\n   the public key corresponds to the private\
    \ key, and verifying that the\n   returned certificate validated back to an installed\
    \ trust anchor)\n   SHOULD be performed.  Likewise, the router SHOULD notify the\
    \ operator\n   if any of these fail, but this notification mechanism is out of\n\
    \   scope.\n   When a router is so configured, the communication with the CA SHOULD\n\
    \   be automatically re-established by the router at future times to\n   renew\
    \ the certificate automatically when necessary (see Section 10).\n   This further\
    \ reduces the tasks required of the operator.\n"
- title: 10.  Key Management
  contents:
  - "10.  Key Management\n   Key management not only includes key generation, key\
    \ provisioning,\n   certificate issuance, and certificate distribution, it also\
    \ includes\n   assurance of key validity, key rollover, and key preservation during\n\
    \   router replacement.  All of these responsibilities persist for as\n   long\
    \ as the operator wishes to operate the BGPsec-speaking router.\n"
- title: 10.1.  Key Validity
  contents:
  - "10.1.  Key Validity\n   It is critical that a BGPsec-speaking router is signing\
    \ with a valid\n   private key at all times.  To this end, the operator needs\
    \ to ensure\n   the router always has an unexpired certificate.  That is, the\
    \ key\n   used to sign BGPsec announcements always has an associated\n   certificate\
    \ whose expiry time is after the current time.\n   Ensuring this is not terribly\
    \ difficult but requires that either:\n   1.  The router has a mechanism to notify\
    \ the operator that the\n       certificate has an impending expiration, and/or\n\
    \   2.  The operator notes the expiry time of the certificate and uses a\n   \
    \    calendaring program to remind them of the expiry time, and/or\n   3.  The\
    \ RPKI CA warns the operator of pending expiration, and/or\n   4.  The operator\
    \ uses some other kind of automated process to search\n       for and track the\
    \ expiry times of router certificates.\n   It is advisable that expiration warnings\
    \ happen well in advance of\n   the actual expiry time.\n   Regardless of the\
    \ technique used to track router certificate expiry\n   times, additional operators\
    \ in the same organization should be\n   notified as the expiry time approaches,\
    \ thereby ensuring that the\n   forgetfulness of one operator does not affect\
    \ the entire\n   organization.\n   Depending on inter-operator relationships,\
    \ it may be helpful to\n   notify a peer operator that one or more of their certificates\
    \ are\n   about to expire.\n"
- title: 10.2.  Key Rollover
  contents:
  - "10.2.  Key Rollover\n   Routers that support multiple private keys also greatly\
    \ increase the\n   chance that routers can continuously speak BGPsec because the\
    \ new\n   private key and certificate can be obtained and distributed prior to\n\
    \   expiration of the operational key.  Obviously, the router needs to\n   know\
    \ when to start using the new key.  Once the new key is being\n   used, having\
    \ the already-distributed certificate ensures continuous\n   operation.\n   More\
    \ information on how to proceed with a key rollover is described\n   in [RFC8634].\n"
- title: 10.3.  Key Revocation
  contents:
  - "10.3.  Key Revocation\n   In certain circumstances, a router's BGPsec certificate\
    \ may need to\n   be revoked.  When this occurs, the operator needs to use the\
    \ RPKI CA\n   system to revoke the certificate by placing the router's BGPsec\n\
    \   certificate on the Certificate Revocation List (CRL) as well as re-\n   keying\
    \ the router's certificate.\n   The process of revoking an active router key consists\
    \ of requesting\n   the revocation from the CA, the CA actually revoking the router's\n\
    \   certificate, the re-keying/renewing of the router's certificate\n   (possibly)\
    \ distributing a new key and certificate to the router, and\n   distributing the\
    \ status.  During the time this process takes, the\n   operator must decide how\
    \ they wish to maintain continuity of\n   operation (with or without the compromised\
    \ private key) or whether\n   they wish to bring the router offline to address\
    \ the compromise.\n   Keeping the router operational and BGPsec-speaking is the\
    \ ideal goal;\n   but, if operational practices do not allow this, then reconfiguring\n\
    \   the router to disable BGPsec is likely preferred to bringing the\n   router\
    \ offline.\n   Routers that support more than one private key, where one is\n\
    \   operational and other(s) are soon-to-be-operational, facilitate\n   revocation\
    \ events because the operator can configure the router to\n   make a soon-to-be-operational\
    \ key operational, request revocation of\n   the compromised key, and then make\
    \ a next generation soon-to-be-\n   operational key.  Hopefully, all this can\
    \ be done without needing to\n   take the router offline or reboot it.  For routers\
    \ that support only\n   one operational key, the operators should create or install\
    \ the new\n   private key and then request revocation of the certificate\n   corresponding\
    \ to the compromised private key.\n"
- title: 10.4.  Router Replacement
  contents:
  - "10.4.  Router Replacement\n   At the time of writing, routers often generate\
    \ private keys for uses\n   such as Secure Shell (SSH), and the private keys may\
    \ not be seen or\n   exported from the router.  While this is good security, it\
    \ creates\n   difficulties when a routing engine or whole router must be replaced\n\
    \   in the field and all software that accesses the router must be\n   updated\
    \ with the new keys.  Also, any network-based initial contact\n   with a new routing\
    \ engine requires trust in the public key presented\n   on first contact.\n  \
    \ To allow operators to quickly replace routers without requiring\n   update and\
    \ distribution of the corresponding public keys in the RPKI,\n   routers SHOULD\
    \ allow the private BGPsec key to be inserted via a\n   protected channel, e.g.,\
    \ SSH, NETCONF (see [RFC6470]), and SNMP.\n   This lets the operator escrow the\
    \ old private key via the mechanism\n   used for operator-driven keys (see Section\
    \ 6.2), such that it can be\n   reinserted into a replacement router.  The router\
    \ MAY allow the\n   private key to be exported via the protected channel after\
    \ key\n   generation, but this SHOULD be paired with functionality that sets\n\
    \   the newly generated key into a permanent non-exportable state to\n   ensure\
    \ that it is not exported at a future time by unauthorized\n   operations.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   The router's manual will describe which of the\
    \ key-generation options\n   discussed in the earlier sections of this document\
    \ a router supports\n   or if it supports both of them.  The manual will also\
    \ describe other\n   important security-related information (e.g., how to SSH\
    \ to the\n   router).  After becoming familiar with the capabilities of the\n\
    \   router, an operator is encouraged to ensure that the router is\n   patched\
    \ with the latest software updates available from the\n   manufacturer.\n   This\
    \ document defines no protocols.  So, in some sense, it introduces\n   no new\
    \ security considerations.  However, it relies on many other\n   protocols, and\
    \ the security considerations in the referenced\n   documents should be consulted;\
    \ notably, the documents listed in\n   Section 1 should be consulted first.  PKI-relying\
    \ protocols, of which\n   BGPsec is one, have many issues to consider -- so many,\
    \ in fact,\n   entire books have been written to address them -- so listing all\
    \ PKI-\n   related security considerations is neither useful nor helpful.\n  \
    \ Regardless, some bootstrapping-related issues that are worth\n   repeating are\
    \ listed here:\n   o  Public-private key pair generation: Mistakes here are, for\
    \ all\n      practical purposes, catastrophic because PKIs rely on the pairing\n\
    \      of a difficult-to-generate public-private key pair with a signer;\n   \
    \   all key pairs MUST be generated from a good source of non-\n      deterministic\
    \ random input [RFC4086].\n   o  Private key protection at rest: Mistakes here\
    \ are, for all,\n      practical purposes, catastrophic because disclosure of\
    \ the private\n      key allows another entity to masquerade as (i.e., impersonate)\
    \ the\n      signer; all private keys MUST be protected when at rest in a\n  \
    \    secure fashion.  Obviously, how each router protects private keys\n     \
    \ is implementation specific.  Likewise, the local storage format\n      for the\
    \ private key is just that: a local matter.\n   o  Private key protection in transit:\
    \ Mistakes here are, for all\n      practical purposes, catastrophic because disclosure\
    \ of the private\n      key allows another entity to masquerade as (i.e., impersonate)\
    \ the\n      signer; therefore, transport security is strongly RECOMMENDED.\n\
    \      The level of security provided by the transport layer's security\n    \
    \  mechanism SHOULD be at least as good as the strength of the BGPsec\n      key;\
    \ there's no point in spending time and energy to generate an\n      excellent\
    \ public-private key pair and then transmit the private\n      key in the clear\
    \ or with a known-to-be-broken algorithm, as it\n      just undermines trust that\
    \ the private key has been kept private.\n      Additionally, operators SHOULD\
    \ ensure the transport security\n      mechanism is up to date, in order to address\
    \ all known\n      implementation bugs.\n   Though the CA's certificate is installed\
    \ on the router and used to\n   verify that the returned certificate is in fact\
    \ signed by the CA, the\n   revocation status of the CA's certificate is rarely\
    \ checked as the\n   router may not have global connectivity or CRL-aware software.\
    \  The\n   operator MUST ensure that the installed CA certificate is valid.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [IEEE802-1AR]\n              IEEE, \"IEEE Standard\
    \ for Local and Metropolitan Area\n              Networks - Secure Device Identity\"\
    , IEEE Std 802.1AR,\n              <https://standards.ieee.org/standard/802_1AR-2018.html>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC4086]\
    \  Eastlake 3rd, D., Schiller, J., and S. Crocker,\n              \"Randomness\
    \ Requirements for Security\", BCP 106, RFC 4086,\n              DOI 10.17487/RFC4086,\
    \ June 2005,\n              <https://www.rfc-editor.org/info/rfc4086>.\n   [RFC4253]\
    \  Ylonen, T. and C. Lonvick, Ed., \"The Secure Shell (SSH)\n              Transport\
    \ Layer Protocol\", RFC 4253, DOI 10.17487/RFC4253,\n              January 2006,\
    \ <https://www.rfc-editor.org/info/rfc4253>.\n   [RFC5652]  Housley, R., \"Cryptographic\
    \ Message Syntax (CMS)\", STD 70,\n              RFC 5652, DOI 10.17487/RFC5652,\
    \ September 2009,\n              <https://www.rfc-editor.org/info/rfc5652>.\n\
    \   [RFC5958]  Turner, S., \"Asymmetric Key Packages\", RFC 5958,\n          \
    \    DOI 10.17487/RFC5958, August 2010,\n              <https://www.rfc-editor.org/info/rfc5958>.\n\
    \   [RFC6286]  Chen, E. and J. Yuan, \"Autonomous-System-Wide Unique BGP\n   \
    \           Identifier for BGP-4\", RFC 6286, DOI 10.17487/RFC6286,\n        \
    \      June 2011, <https://www.rfc-editor.org/info/rfc6286>.\n   [RFC8174]  Leiba,\
    \ B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119 Key Words\"\
    , BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n\
    \   [RFC8608]  Turner, S. and O. Borchert, \"BGPsec Algorithms, Key\n        \
    \      Formats, and Signature Formats\", RFC 8608,\n              DOI 10.17487/RFC8608,\
    \ June 2019,\n              <https://www.rfc-editor.org/info/rfc8608>.\n   [RFC8209]\
    \  Reynolds, M., Turner, S., and S. Kent, \"A Profile for\n              BGPsec\
    \ Router Certificates, Certificate Revocation Lists,\n              and Certification\
    \ Requests\", RFC 8209,\n              DOI 10.17487/RFC8209, September 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8209>.\n   [RFC8551]  Schaad,\
    \ J., Ramsdell, B., and S. Turner, \"Secure/\n              Multipurpose Internet\
    \ Mail Extensions (S/MIME) Version 4.0\n              Message Specification\"\
    , RFC 8551, DOI 10.17487/RFC8551,\n              April 2019, <https://www.rfc-editor.org/info/rfc8551>.\n\
    \   [RFC8634]  Weis, B., Gagliano, R., and K. Patel, \"BGPsec Router\n       \
    \       Certificate Rollover\", BCP 224, RFC 8634,\n              DOI 10.17487/RFC8634,\
    \ August 2019,\n              <https://www.rfc-editor.org/info/rfc8634>.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [RFC2585]  Housley, R. and P. Hoffman, \"Internet\
    \ X.509 Public Key\n              Infrastructure Operational Protocols: FTP and\
    \ HTTP\",\n              RFC 2585, DOI 10.17487/RFC2585, May 1999,\n         \
    \     <https://www.rfc-editor.org/info/rfc2585>.\n   [RFC3766]  Orman, H. and\
    \ P. Hoffman, \"Determining Strengths For\n              Public Keys Used For\
    \ Exchanging Symmetric Keys\", BCP 86,\n              RFC 3766, DOI 10.17487/RFC3766,\
    \ April 2004,\n              <https://www.rfc-editor.org/info/rfc3766>.\n   [RFC5273]\
    \  Schaad, J. and M. Myers, \"Certificate Management over CMS\n              (CMC):\
    \ Transport Protocols\", RFC 5273,\n              DOI 10.17487/RFC5273, June 2008,\n\
    \              <https://www.rfc-editor.org/info/rfc5273>.\n   [RFC5480]  Turner,\
    \ S., Brown, D., Yiu, K., Housley, R., and T. Polk,\n              \"Elliptic\
    \ Curve Cryptography Subject Public Key\n              Information\", RFC 5480,\
    \ DOI 10.17487/RFC5480, March 2009,\n              <https://www.rfc-editor.org/info/rfc5480>.\n\
    \   [RFC5647]  Igoe, K. and J. Solinas, \"AES Galois Counter Mode for the\n  \
    \            Secure Shell Transport Layer Protocol\", RFC 5647,\n            \
    \  DOI 10.17487/RFC5647, August 2009,\n              <https://www.rfc-editor.org/info/rfc5647>.\n\
    \   [RFC5656]  Stebila, D. and J. Green, \"Elliptic Curve Algorithm\n        \
    \      Integration in the Secure Shell Transport Layer\",\n              RFC 5656,\
    \ DOI 10.17487/RFC5656, December 2009,\n              <https://www.rfc-editor.org/info/rfc5656>.\n\
    \   [RFC5967]  Turner, S., \"The application/pkcs10 Media Type\", RFC 5967,\n\
    \              DOI 10.17487/RFC5967, August 2010,\n              <https://www.rfc-editor.org/info/rfc5967>.\n\
    \   [RFC6187]  Igoe, K. and D. Stebila, \"X.509v3 Certificates for Secure\n  \
    \            Shell Authentication\", RFC 6187, DOI 10.17487/RFC6187,\n       \
    \       March 2011, <https://www.rfc-editor.org/info/rfc6187>.\n   [RFC6470] \
    \ Bierman, A., \"Network Configuration Protocol (NETCONF)\n              Base\
    \ Notifications\", RFC 6470, DOI 10.17487/RFC6470,\n              February 2012,\
    \ <https://www.rfc-editor.org/info/rfc6470>.\n   [RFC6484]  Kent, S., Kong, D.,\
    \ Seo, K., and R. Watro, \"Certificate\n              Policy (CP) for the Resource\
    \ Public Key Infrastructure\n              (RPKI)\", BCP 173, RFC 6484, DOI 10.17487/RFC6484,\
    \ February\n              2012, <https://www.rfc-editor.org/info/rfc6484>.\n \
    \  [RFC6668]  Bider, D. and M. Baushke, \"SHA-2 Data Integrity\n             \
    \ Verification for the Secure Shell (SSH) Transport Layer\n              Protocol\"\
    , RFC 6668, DOI 10.17487/RFC6668, July 2012,\n              <https://www.rfc-editor.org/info/rfc6668>.\n\
    \   [RFC7030]  Pritikin, M., Ed., Yee, P., Ed., and D. Harkins, Ed.,\n       \
    \       \"Enrollment over Secure Transport\", RFC 7030,\n              DOI 10.17487/RFC7030,\
    \ October 2013,\n              <https://www.rfc-editor.org/info/rfc7030>.\n  \
    \ [RFC8205]  Lepinski, M., Ed. and K. Sriram, Ed., \"BGPsec Protocol\n       \
    \       Specification\", RFC 8205, DOI 10.17487/RFC8205, September\n         \
    \     2017, <https://www.rfc-editor.org/info/rfc8205>.\n   [SP800-57]\n      \
    \        National Institute of Standards and Technology (NIST),\n            \
    \  \"Recommendation for Key Management - Part 1: General\",\n              NIST\
    \ Special Publication 800-57 Revision 4,\n              DOI 10.6028/NIST.SP.800-57pt1r4,\
    \ January 2016,\n              <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n\
    \              NIST.SP.800-57pt1r4.pdf>.\n"
- title: Appendix A.  Management/Router Channel Security
  contents:
  - "Appendix A.  Management/Router Channel Security\n   Encryption, integrity, authentication,\
    \ and key-exchange algorithms\n   used by the protected channel should be of equal\
    \ or greater strength\n   than the BGPsec keys they protect, which for the algorithm\
    \ specified\n   in [RFC8608] is 128 bits; see [RFC5480] and [SP800-57] for\n \
    \  information about this strength claim as well as [RFC3766] for \"how\n   to\
    \ determine the length of an asymmetric key as a function of a\n   symmetric key\
    \ strength requirement\".  In other words, for the\n   encryption algorithm, do\
    \ not use export grade crypto (40-56 bits of\n   security), and do not use Triple-DES\
    \ (112 bits of security).\n   Suggested minimum algorithms would be AES-128, specifically\
    \ the\n   following:\n   o  aes128-cbc [RFC4253] and AEAD_AES_128_GCM [RFC5647]\
    \ for\n      encryption,\n   o  hmac-sha2-256 [RFC6668] or AESAD_AES_128_GCM [RFC5647]\
    \ for\n      integrity,\n   o  ecdsa-sha2-nistp256 [RFC5656] for authentication,\
    \ and\n   o  ecdh-sha2-nistp256 [RFC5656] for key exchange.\n   Some routers support\
    \ the use of public key certificates and SSH.  The\n   certificates used for the\
    \ SSH session are different than the\n   certificates used for BGPsec.  The certificates\
    \ used with SSH should\n   also enable a level of security at least as good as\
    \ the security\n   offered by the BGPsec keys; x509v3-ecdsa-sha2-nistp256 [RFC6187]\n\
    \   could be used for authentication.\n   The protected channel must provide confidentiality,\
    \ authentication,\n   and integrity and replay protection.\n"
- title: Appendix B.  An Introduction to BGPsec Key Management
  contents:
  - "Appendix B.  An Introduction to BGPsec Key Management\n   This appendix is informative.\
    \  It attempts to explain some of the PKI\n   jargon.\n   BGPsec speakers send\
    \ signed BGPsec updates that are verified by other\n   BGPsec speakers.  In PKI\
    \ parlance, the senders are referred to as\n   \"signers\", and the receivers\
    \ are referred to as \"relying parties\".\n   The signers with which we are concerned\
    \ here are routers signing\n   BGPsec updates.  Signers use private keys to sign,\
    \ and relying\n   parties use the corresponding public keys, in the form of X.509\n\
    \   public key certificates, to verify signatures.  The third party\n   involved\
    \ is the entity that issues the X.509 public key certificate,\n   the Certification\
    \ Authority (CA).  Key management is all about making\n   these key pairs and\
    \ the certificates, as well as ensuring that the\n   relying parties trust that\
    \ the certified public keys in fact\n   correspond to the signers' private keys.\n\
    \   The specifics of key management greatly depend on the routers as well\n  \
    \ as management interfaces provided by the routers' vendor.  Because of\n   these\
    \ differences, it is hard to write a definitive \"how to\", but\n   this guide\
    \ is intended to arm operators with enough information to\n   ask the right questions.\
    \  The other aspect that makes this guide\n   informative is that the steps for\
    \ the do-it-yourself (DIY) approach\n   involve arcane commands while the GUI-based\
    \ vendor-assisted\n   management console approach will likely hide all of those\
    \ commands\n   behind some button clicks.  Regardless, the operator will end up\
    \ with\n   a BGPsec-enabled router.  Initially, we focus on the DIY approach and\n\
    \   then follow up with some information about the GUI-based approach.\n   The\
    \ first step in the DIY approach is to generate a private key.\n   However, in\
    \ fact, what you do is create a key pair: one part (the\n   private key) is kept\
    \ very private, and the other part (the public\n   key) is given out to verify\
    \ whatever is signed.  The two methods for\n   how to create the key pair are\
    \ the subject of this document, but it\n   boils down to either doing it on-router\
    \ (router-driven) or off-router\n   (operator-driven).\n   If you are generating\
    \ keys on the router (router-driven), then you\n   will need to access the router.\
    \  Again, how you access the router is\n   router-specific, but generally the\
    \ DIY approach involves using the\n   CLI and accessing the router either directly\
    \ via the router's craft\n   port or over the network on an administrative interface.\
    \  If\n   accessing the router over the network, be sure to do it securely\n \
    \  (i.e., use SSHv2).  Once logged into the router, issue a command or a\n   series\
    \ of commands that will generate the key pair for the algorithms\n   referenced\
    \ in the main body of this document; consult your router's\n   documentation for\
    \ the specific commands.  The key-generation process\n   will yield one or more\
    \ files containing the private key and the\n   public key; the file format varies\
    \ depending on, among other things,\n   the arcane command the operator issued;\
    \ however, the files are\n   generally DER- or PEM-encoded.\n   The second step\
    \ is to generate the certification request, which is\n   often referred to as\
    \ a Certificate Signing Request (CSR) or PKCS#10\n   certification request, and\
    \ to send it to the CA to be signed.  To\n   generate the CSR, the operator issues\
    \ some more arcane commands while\n   logged into the router; using the private\
    \ key just generated to sign\n   the certification request with the algorithms\
    \ referenced in the main\n   body of this document; the CSR is signed to prove\
    \ to the CA that the\n   router has possession of the private key (i.e., the signature\
    \ is the\n   proof-of-possession).  The output of the command is the CSR file;\
    \ the\n   file format varies depending on the arcane command you issued, but\n\
    \   generally the files are DER- or PEM-encoded.\n   The third step is to retrieve\
    \ the signed CSR from the router and send\n   it to the CA.  But before sending\
    \ it, you need to also send the CA\n   the subject name (i.e., \"ROUTER-\" followed\
    \ by the AS number) and\n   serial number (i.e., the 32-bit BGP Identifier) for\
    \ the router.  The\n   CA needs this information to issue the certificate.  How\
    \ you get the\n   CSR to the CA is beyond the scope of this document.  While you\
    \ are\n   still connected to the router, install the trust anchor for the root\n\
    \   of the PKI.  At this point, you no longer need access to the router\n   for\
    \ BGPsec-related initiation purposes.\n   The fourth step is for the CA to issue\
    \ the certificate based on the\n   CSR you sent.  The certificate will include\
    \ the subject name, serial\n   number, public key, and other fields; it will also\
    \ be signed by the\n   CA.  After the CA issues the certificate, the CA returns\
    \ the\n   certificate and posts the certificate to the RPKI repository.  Check\n\
    \   that the certificate corresponds to the public key contained in the\n   certificate\
    \ by verifying the signature on the CSR sent to the CA;\n   this is just a check\
    \ to make sure that the CA issued a certificate\n   that includes a public key\
    \ that is the pair of the private key (i.e.,\n   the math will work when verifying\
    \ a signature generated by the\n   private key with the returned certificate).\n\
    \   If generating the keys off-router (operator-driven), then the same\n   steps\
    \ are used as with on-router key generation (possibly with the\n   same arcane\
    \ commands as those used in the on-router approach).\n   However, no access to\
    \ the router is needed, and the first three steps\n   are done on an administrative\
    \ workstation:\n   Step 1:  Generate key pair.\n   Step 2:  Create CSR and sign\
    \ CSR with private key.\n   Step 3:  Send CSR file with the subject name and serial\
    \ number to CA.\n   After the CA has returned the certificate and you have checked\
    \ the\n   certificate, you need to put the private key and trust anchor in the\n\
    \   router.  Assuming the DIY approach, you will be using the CLI and\n   accessing\
    \ the router either directly via the router's craft port or\n   over the network\
    \ on an admin interface; if accessing the router over\n   the network, make doubly\
    \ sure it is done securely (i.e., use SSHv2)\n   because the private key is being\
    \ moved over the network.  At this\n   point, access to the router is no longer\
    \ needed for BGPsec-related\n   initiation purposes.\n   NOTE: Regardless of the\
    \ approach taken, the first three steps could\n   trivially be collapsed by a\
    \ vendor-provided script to yield the\n   private key and the signed CSR.\n  \
    \ Given a GUI-based vendor-assisted management console, all of these\n   steps\
    \ will likely be hidden behind pointing and clicking the way\n   through BGPsec-enabling\
    \ the router.\n   The scenarios described above require the operator to access\
    \ each\n   router, which does not scale well to large networks.  An alternative\n\
    \   would be to create an image, perform the necessary steps to get the\n   private\
    \ key and trust anchor on the image, and then install the image\n   via a management\
    \ protocol.\n   One final word of advice: certificates include a notAfter field\
    \ that\n   unsurprisingly indicates when relying parties should no longer trust\n\
    \   the certificate.  To avoid having routers with expired certificates,\n   follow\
    \ the recommendations in the Certification Policy (CP) [RFC6484]\n   and make\
    \ sure to renew the certificate at least one week prior to the\n   notAfter date.\
    \  Set a calendar reminder in order not to forget!\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Randy Bush\n   IIJ & Arrcus\n   5147 Crystal Springs\n\
    \   Bainbridge Island, Washington  98110\n   United States of America\n   Email:\
    \ randy@psg.com\n   Sean Turner\n   sn3rd\n   Email: sean@sn3rd.com\n   Keyur\
    \ Patel\n   Arrcus, Inc.\n   Email: keyur@arrcus.com\n"
