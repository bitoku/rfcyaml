- title: __initial_text__
  contents:
  - '                    Digest Values for DOM (DOMHASH)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a clear and unambiguous definition of digest (hash)\n\
    \   values of the XML objects regardless of the surface string variation\n   of\
    \ XML. This definition can be used for XML digital signature as well\n   efficient\
    \ replication of XML objects.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The purpose of this document is to give a clear and unambiguous\n\
    \   definition of digest (hash) values of the XML objects [XML].  Two\n   subtrees\
    \ are considered identical if their hash values are the same,\n   and different\
    \ if their hash values are different.\n   There are at least two usage scenarios\
    \ of DOMHASH. One is as a basis\n   for digital signatures for XML. Digital signature\
    \ algorithms normally\n   require hashing a signed content before signing.  DOMHASH\
    \ provides a\n   concrete definition of the hash value calculation.\n   The other\
    \ is to use DOMHASH when synchronizing two DOM structures\n   [DOM]. Suppose that\
    \ a server program generates a DOM structure which\n   is to be rendered by clients.\
    \ If the server makes frequent small\n   changes on a large DOM tree, it is desirable\
    \ that only the modified\n   parts are sent over to the client. A client can initiate\
    \ a request by\n   sending the root hash value of the structure in the cache memory.\
    \ If\n   it matches with the root hash value of the current server structure,\n\
    \   nothing needs be sent. If not, then the server compares the client\n   hash\
    \ with the older versions in the server's cache. If it finds one\n   that matches\
    \ the client's version of the structure, then it locates\n   differences with\
    \ the current version by recursively comparing the\n   hash values of each node.\
    \ This way, the client can receive only an\n   updated portion of a large structure\
    \ without requesting the whole\n   thing.\n   One way of defining digest values\
    \ is to take a surface string as the\n   input for a digest algorithm. However,\
    \ this approach has several\n   drawbacks. The same internal DOM structure may\
    \ be represented in may\n   different ways as surface strings even if they strictly\
    \ conform to\n   the XML specification.  Treatment of white spaces, selection\
    \ of\n   character encodings, entity references (i.e., use of ampersands), and\n\
    \   so on have impact on the generation of a surface string. If the\n   implementations\
    \ of surface string generation are different, the hash\n   values would be different,\
    \ resulting in unvalidatable digital\n   signatures and unsuccessful detection\
    \ of identical DOM structures.\n   Therefore, it is desirable that digest of DOM\
    \ is defined in the DOM\n   terms -- that is, as an unambiguous algorithm operating\
    \ on a DOM\n   tree.  This is the approach we take in this specification.\n  \
    \ Introduction of namespace is another source of variation of surface\n   string\
    \ because different namespace prefixes can be used for\n   representing the same\
    \ namespace URI [URI]. In the following example,\n   the namespace prefix \"edi\"\
    \ is bound to the URI\n   \"http://ecommerce.org/schema\" but this prefix can\
    \ be arbitrary chosen\n   without changing the logical contents as shown in the\
    \ second example.\n    <?xml version=\"1.0\"?>\n    <root xmlns:edi='http://ecommerce.org/schema'>\n\
    \        <edi:order>\n            :\n        </edi:order>\n    </root>\n    <?xml\
    \ version=\"1.0\"?>\n    <root xmlns:ec='http://ecommerce.org/schema'>\n     \
    \   <ec:order>\n            :\n        </ec:order>\n    </root>\n   The DOMHASH\
    \ defined in this document is designed so that the choice\n   of the namespace\
    \ prefix does not affect the digest value. In the\n   above example, both the\
    \ \"root\" elements will get the same digest\n   value.\n"
- title: 2. Digest Calculation
  contents:
  - '2. Digest Calculation

    '
- title: 2.1. Overview
  contents:
  - "2.1. Overview\n   Hash values are defined on the DOM type Node. We consider the\n\
    \   following five node types that are used for representing a DOM\n   document\
    \ structure:\n      - Text\n      - ProcessingInstruction\n      - Attr\n    \
    \  - Element\n      - Document\n   Comment nodes and Document Type Definitions\
    \ (DTDs) do not participate\n   in the digest value calculation.  This is because\
    \ DOM does not\n   require a conformant processor to create data structures for\
    \ these.\n   DOMHASH is designed so that it can be computed with any XML processor\n\
    \   conformant to the DOM or SAX [SAX] specification.\n   Nodes with the node\
    \ type EntityReference must be expanded prior to\n   digest calculation.\n   The\
    \ digest values are defined recursively on each level of the DOM\n   tree so that\
    \ only a relevant part needs to be recalculated when a\n   small portion of the\
    \ tree is changed.\n   Below, we give the precise definitions of digest for these\
    \ types. We\n   describe the format of the data to be supplied to a hash algorithm\n\
    \   using a figure and a simple description, followed by a Java code\n   fragment\
    \ using the DOM API and the JDK 1.1 Platform Core API only.\n   Therefore, the\
    \ semantics should be unambiguous.\n   As the rule of thumb, all strings are to\
    \ be in UTF-16BE [UTF16].  If\n   there is a sequence of text nodes without any\
    \ element nodes in\n   between, these text nodes are merged into one by concatenating\
    \ them.\n   A zero-length text node is always ignored.\n   Note that validating\
    \ and non-validating XML processors may generate\n   different DOM trees from\
    \ the same XML document, due to attribute\n   normalization and default attributes.\
    \  If DOMHASH is to be used for\n   testing logical equivalence between two XML\
    \ documents (as opposed to\n   DOM trees), it may be necessary to normalize attributes\
    \ and supply\n   default attributes prior to DOMHASH calculation.\n   Some legacy\
    \ character encodings (such as ISO-2022-JP) have certain\n   ambiguity in translating\
    \ into Unicode.  This is again dependent on\n   XML processors.  Treatment of\
    \ such processor dependencies is out of\n   scope of this document.\n"
- title: 2.2. Namespace Considerations
  contents:
  - "2.2. Namespace Considerations\n   To avoid the dependence on the namespace prefix,\
    \ we use \"expanded\n   names\" to do digest calculation. If an element name or\
    \ an attribute\n   name is qualified either by a explicit namespace prefix or\
    \ by a\n   default namespace, the name's LocalPart is prepended by the URI of\n\
    \   the namespace (the namespace name as defined in the Namespace\n   specification\
    \ [NAM]) and a colon before digest calculation. In the\n   following example,\
    \ the default qualified name \"order\" is expanded\n   into \"http://ecommerce.org/schema:order\"\
    \ while the explicit qualified\n   name \"book:title\" is expanded into \"urn:loc.gov:books:title\"\
    \ before\n   digest calculation.\n   <?xml version=\"1.0\"?>\n   <root xmlns='http://ecommerce.org/schema'\n\
    \            xmlns:book='urn:loc.gov:books'>\n       <order>\n          <book:title>\
    \ ... </book:title>\n           :\n       </order>\n   </root>\n   We define an\
    \ expanded name (either for element or attribute) as\n   follows:\n      If a\
    \ name is not qualified, the expanded name is the name itself.\n      If a name\
    \ is qualified with the prefix \"xmlns\", the expanded name\n      is undefined.\n\
    \      If a name is qualified either by default or by an explicit\n      namespace\
    \ prefix, the expanded name is URI bound to the namespace\n      + \":\" + LocalPart\n\
    \   In the following example code, we assume that the getExpandedName()\n   method\
    \ (which returns the expanded name as defined above) is defined\n   in both Element\
    \ and Attr interfaces of DOM.\n   Note that the digest values are not defined\
    \ on namespace\n   declarations. In other words, the digest value is not defined\
    \ for an\n   attribute when\n      - the attribute name is \"xmlns\", or\n   \
    \   - the namespace prefix is \"xmlns\".\n   In the above example, the two attributes\
    \ which are namespace\n   declarations do not have digest values and therefore\
    \ will not\n   participate in the calculation of the digest value of the \"root\"\
    \n   element.\n"
- title: 2.3. Definition with Code Fragments
  contents:
  - "2.3. Definition with Code Fragments\n   The code fragments in the definitions\
    \ below assume that they are in\n   implementation classes of Node. Therefore,\
    \ a methods call without an\n   explicit object reference is for the Node itself.\
    \ For example,\n   getData() returns the text data of the current node if it is\
    \ a Text\n   node. The parameter digestAlgorithm is to be replaced by an\n   identifier\
    \ of the digest algorithm, such as \"MD5\" [MD5] and \"SHA-1\"\n   [SHA].\n  \
    \ The computation should begin with a four byte integer that represents\n   the\
    \ type of the node, such as TEXT_NODE or ELEMENT_NODE.\n"
- title: 2.3.1. Text Nodes
  contents:
  - "2.3.1. Text Nodes\n   The hash value of a Text node is computed on the four byte\
    \ header\n   followed by the UTF-16BE encoded text string.\n   - TEXT_NODE (3)\
    \ in 32 bit network-byte-ordered integer\n   - Text data in UTF-16BE stream (variable\
    \ length)\n   public byte[] getDigest(String digestAlgorithm) {\n       MessageDigest\
    \ md = MessageDigest.getInstance(digestAlgorithm);\n       md.update((byte)0);\n\
    \       md.update((byte)0);\n       md.update((byte)0);\n       md.update((byte)3);\n\
    \       md.update(getData().getBytes(\"UnicodeBigUnmarked\"));\n       return\
    \ md.digest();\n   }\n   Here, MessageDigest is in the package java.security.*,\
    \ one of the\n   built-in packages of JDK 1.1.\n"
- title: 2.3.2. ProcessingInstruction Nodes
  contents:
  - "2.3.2. ProcessingInstruction Nodes\n   A ProcessingInstruction (PI) node has\
    \ two components: the target and\n   the data. Accordingly, the hash is computed\
    \ on the concatenation of\n   both, separated by  'x0000'. PI data is from the\
    \ first non white\n   space character after the target to the character immediately\n\
    \   preceding the \"?>\".\n   - PROCESSING_INSTRUCTION_NODE (7) in 32 bit network-byte-ordered\n\
    \     integer\n   - PI target in UTF-16BE stream (variable length)\n   - 0x00\
    \  0x00\n   - PI data in UTF-16BE stream (variable length)\n   public byte[] getDigest(String\
    \ digestAlgorithm) {\n       MessageDigest md = MessageDigest.getInstance(digestAlgorithm);\n\
    \       md.update((byte)0);\n       md.update((byte)0);\n       md.update((byte)0);\n\
    \       md.update((byte)7);\n       md.update(getName().getBytes(\"UnicodeBigUnmarked\"\
    ));\n       md.update((byte)0);\n       md.update((byte)0);\n       md.update(getData().getBytes(\"\
    UnicodeBigUnmarked\"));\n       return md.digest();\n   }\n"
- title: 2.3.3. Attr Nodes
  contents:
  - "2.3.3. Attr Nodes\n   The digest value of Attr nodes are defined similarly to\
    \ PI nodes,\n   except that we need a separator between the expanded attribute\
    \ name\n   and the attribute value. The '0x0000' value in UTF-16BE is allowed\n\
    \   nowhere in an XML document, so it can serve as an unambiguous\n   separator.\
    \ The expanded name must be used as the attribute name\n   because it may be qualified.\
    \ Note that if the attribute is a\n   namespace declaration (either the attribute\
    \ name is \"xmlns\" or its\n   prefix is \"xmlns\"), the digest value is undefined\
    \ and the getDigest()\n   method should return null.\n   - ATTRIBUTE_NODE (2)\
    \ in 32 bit network-byte-ordered integer\n   - Expanded attribute name in UTF-16BE\
    \ stream (variable length)\n   - 0x00  0x00\n   - Attribute value in UTF-16BE\
    \ stream (variable length)\n   public byte[] getDigest(String digestAlgorithm)\
    \ {\n       if (getNodeName().equals(\"xmlns\")\n               || getNodeName().startsWith(\"\
    xmlns:\"))\n           return null;\n       MessageDigest md = MessageDigest.getInstance(digestAlgorithm);\n\
    \       md.update((byte)0);\n       md.update((byte)0);\n       md.update((byte)0);\n\
    \       md.update((byte)2);\n       md.update(getExpandedName().getBytes(\"UnicodeBigUnmarked\"\
    ));\n       md.update((byte)0);\n       md.update((byte)0);\n       md.update(getValue().getBytes(\"\
    UnicodeBigUnmarked\"));\n       return md.digest();\n   }\n"
- title: 2.3.4. Element Nodes
  contents:
  - "2.3.4. Element Nodes\n   Element nodes are the most complex because they consist\
    \ of other\n   nodes recursively. Hash values of these component nodes are used\
    \ to\n   calculate the node's digest so that we can save computation when the\n\
    \   structure is partially changed.\n   First, all the attributes except for namespace\
    \ declarations must be\n   collected. This list is sorted lexicographically by\
    \ the expanded\n   attribute names (based on Unicode character code points). When\
    \ no\n   surrogate characters are involved, this is the same as sorting in\n \
    \  ascending order in terms of the UTF-16BE encoded expanded attribute\n   names,\
    \ using the string comparison operator String.compareTo() in\n   Java.\n   - ELEMENT_NODE\
    \ (1) in 32 bit network-byte-ordered integer\n   - Expanded element name in UTF-16BE\
    \ stream (variable length)\n   - 0x00  0x00\n   - A number of non-namespace-declaration\
    \ attributes in 32 bit\n     network-byte-ordered unsigned integer\n   - Sequence\
    \ of digest values of non-namespace-declaration attributes,\n     sorted lexicographically\
    \ by expanded attribute names\n   - A number of child nodes (except for Comment\
    \ nodes) in 32bit\n     network-byte-ordered unsigned integer\n   - Sequence of\
    \ digest values of each child node except for Comment\n     nodes (variable length)\
    \ (A sequence of child texts is merged to one\n     text. A zero-length text and\
    \ Comment nodes are not counted as\n     child)\n   public byte[] getDigest(String\
    \ digestAlgorithm) {\n       MessageDigest md = MessageDigest.getInstance(digestAlgorithm);\n\
    \       ByteArrayOutputStream baos = new ByteArrayOutputStream();\n       DataOutputStream\
    \ dos = new DataOutputStream(baos);\n       dos.writeInt(ELEMENT_NODE);//This\
    \ is stored in network byte order\n       dos.write(getExpandedName().getBytes(\"\
    UnicodeBigUnmarked\"));\n       dos.write((byte)0);\n       dos.write((byte)0);\n\
    \       // Collect all attributes except for namespace declarations\n       NamedNodeMap\
    \ nnm = this.getAttributes();\n       int len = nnm.getLength()\n            \
    \   // Find \"xmlns\" or \"xmlns:foo\" in nnm and omit it.\n       ...\n     \
    \  dos.writeInt(len);    // This is sorted in the network byte order\n       //\
    \ Sort attributes lexicographically by expanded attribute\n       // names.\n\
    \       ...\n       // Assume that `Attr[] aattr' has sorted Attribute instances.\n\
    \       for (int i = 0;  i < len;  i ++)\n           dos.write(aattr[i].getDigest(digestAlgorithm));\n\
    \       Node n = this.getFirstChild();\n       // Assume that adjoining Texts\
    \ are merged,\n       // there is  no 0-length Text, and\n       // comment nodes\
    \ are removed.\n       len = this.getChildNodes().getLength();\n       dos.writeInt(len);\
    \    // This is stored in the network byte order\n       while (n != null) {\n\
    \           dos.write(n.getDigest(digestAlgorithm));\n           n = n.getNextSibling();\n\
    \       }\n       dos.close();\n       md.update(baos.toByteArray());\n      \
    \ return md.digest();\n   }\n"
- title: 2.3.5. Document Nodes
  contents:
  - "2.3.5. Document Nodes\n   A Document node may have PI nodes before and after\
    \ the root Element\n   node.  The digest value of a Document node is computed\
    \ based on the\n   sequence of the digest values of the pre-root PI nodes, the\
    \ root\n   Element node, and the post-root PI nodes in this order.  Comment\n\
    \   nodes and DocumentType nodes, if any, are ignored.\n   - DOCUMENT_NODE (9)\
    \ in 32 bit network-byte-ordered integer\n   - A number of child nodes (except\
    \ for Comment and DocumentType nodes)\n     in 32bit network-byte-ordered unsigned\
    \ integer\n   - Sequence of digest values of each child node except for Comment\
    \ and\n     DocumentType nodes (variable length)\n     public byte[] getDigest(String\
    \ digestAlgorithm) {\n         MessageDigest md = MessageDigest.getInstance(digestAlgorithm);\n\
    \         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        \
    \ DataOutputStream dos = new DataOutputStream(baos);\n         dos.writeInt(DOCUMENT_NODE);//This\
    \ is stored in network byte order\n         // Assume that Comment and DocumentType\
    \ nodes are removed and this\n         // node has only an Element node and PI\
    \ nodes.\n         len = this.getChildNodes().getLength();\n         dos.writeInt(len);\
    \    // This is stored in the network byte order\n         Node n = this.getFirstChild();\n\
    \         while (n != null) {\n             dos.write(n.getDigest(digestAlgorithm));\n\
    \             n = n.getNextSibling();\n         }\n         dos.close();\n   \
    \      md.update(baos.toByteArray());\n         return md.digest();\n     }\n"
- title: 3. Discussion
  contents:
  - "3. Discussion\n     The definition described above can be efficiently implemented\
    \ with\n     any XML processor that is conformant to either DOM and SAX\n    \
    \ specification.  Reference implementations are available on request.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n     DOMHASH is expected to be used as the basis\
    \ for digital signatures\n     and other security and integrity uses.  It's appropriateness\
    \ for\n     such uses depends on the security of the hash algorithm used and\n\
    \     inclusion of the fundamental characteristics it is desired to check\n  \
    \   in parts of the DOM model incorporated in the digest by DOMHASH.\n"
- title: References
  contents:
  - "References\n   [DOM]   \"Document Object Model (DOM), Level 1 Specification\"\
    , October\n         1998, http://www.w3.org/TR/REC-DOM-Level-1/\n   [MD5]   Rivest,\
    \ R., \"The MD5 Message-Digest Algorithm\", RFC 1321,\n         April 1992.\n\
    \   [NAM]   Tim Bray, Dave Hollander, Andrew Layman, \"Namespaces in XML\",\n\
    \         http://www.w3.org/TR/1999/REC-xml-names-19990114.\n   [SAX]   David\
    \ Megginson, \"SAX 1.0: The Simple API for XML\",\n         http://www.megginson.com/SAX/,\
    \ May 1998.\n   [SHA]   (US) National Institute of Standards and Technology, \"\
    Federal\n         Information Processing Standards Publication 180-1: Secure Hash\n\
    \         Standard\", 17 April 1995.\n   [URI]   Berners-Lee, T., Fielding, R.\
    \ and  L. Masinter, \"Uniform\n         Resource Identifiers (URI): Generic Syntax\"\
    , RFC 2396, August\n         1998.\n   [UTF16] Hoffman, P., Yergeau, F., \"UTF-16,\
    \ an encoding of ISO 10646\",\n         RFC 2781, February 2000.\n   [XML]   Tim\
    \ Bray, Jean Paoli, C. M. Sperber-McQueen, \"Extensible\n         Markup Language\
    \ (XML) 1.0\", http://www.w3.org/TR/1998/REC-xml-\n         19980210\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Hiroshi Maruyama,\n   IBM Research, Tokyo Research Laboratory\n\
    \   EMail: maruyama@jp.ibm.com\n   Kent Tamura,\n   IBM Research, Tokyo Research\
    \ Laboratory\n   EMail: kent@trl.ibm.co.jp\n   Naohiko Uramoto,\n   IBM Research,\
    \ Tokyo Research Laboratory\n   EMail: uramoto@jp.ibm.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgment
  contents:
  - "Acknowledgment\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
