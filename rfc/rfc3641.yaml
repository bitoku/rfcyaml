- contents:
  - '          Generic String Encoding Rules (GSER) for ASN.1 Types

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines a set of Abstract Syntax Notation One (ASN.1)\n
    \  encoding rules, called the Generic String Encoding Rules (GSER), that\n   produce
    a human readable text encoding for values of any given ASN.1\n   data type.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.  Conventions. . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  Generic String Encoding Rules. . . . . . . . . . . . . . .
    . .  3\n       3.1.  Type Referencing Notations . . . . . . . . . . . . . . .
    \ 3\n       3.2.  Restricted Character String Types. . . . . . . . . . . .  4\n
    \      3.3.  ChoiceOfStrings Types. . . . . . . . . . . . . . . . . .  5\n       3.4.
    \ Identifiers. . . . . . . . . . . . . . . . . . . . . . .  6\n       3.5.  BIT
    STRING . . . . . . . . . . . . . . . . . . . . . . .  7\n       3.6.  BOOLEAN.
    . . . . . . . . . . . . . . . . . . . . . . . .  7\n       3.7.  ENUMERATED .
    . . . . . . . . . . . . . . . . . . . . . .  8\n       3.8.  INTEGER. . . . .
    . . . . . . . . . . . . . . . . . . . .  8\n       3.9.  NULL . . . . . . . .
    . . . . . . . . . . . . . . . . . .  8\n       3.10. OBJECT IDENTIFIER and RELATIVE-OID
    . . . . . . . . . . .  8\n       3.11. OCTET STRING . . . . . . . . . . . . .
    . . . . . . . . .  9\n       3.12. CHOICE . . . . . . . . . . . . . . . . . .
    . . . . . . .  9\n       3.13. SEQUENCE and SET . . . . . . . . . . . . . . .
    . . . . . 10\n       3.14. SEQUENCE OF and SET OF . . . . . . . . . . . . . .
    . . . 10\n       3.15. CHARACTER STRING . . . . . . . . . . . . . . . . . . .
    . 11\n       3.16. EMBEDDED PDV . . . . . . . . . . . . . . . . . . . . . . 11\n
    \      3.17. EXTERNAL . . . . . . . . . . . . . . . . . . . . . . . . 11\n       3.18.
    INSTANCE OF. . . . . . . . . . . . . . . . . . . . . . . 11\n       3.19. REAL
    . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n       3.20. Variant Encodings.
    . . . . . . . . . . . . . . . . . . . 12\n   4.  GSER Transfer Syntax . . . .
    . . . . . . . . . . . . . . . . . 13\n   5.  Security Considerations. . . . .
    . . . . . . . . . . . . . . . 13\n   6.  References . . . . . . . . . . . . .
    . . . . . . . . . . . . . 13\n       6.1.  Normative References . . . . . . .
    . . . . . . . . . . . 13\n       6.2.  Informative References . . . . . . . .
    . . . . . . . . . 14\n   7.  Intellectual Property Notice . . . . . . . . . .
    . . . . . . . 15\n   8.  Author's Address . . . . . . . . . . . . . . . . . .
    . . . . . 15\n   9.  Full Copyright Statement . . . . . . . . . . . . . . . .
    . . . 16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines a set of ASN.1 [8] encoding rules,
    called the\n   Generic String Encoding Rules or GSER, that produce a human readable\n
    \  UTF-8 [6] character string encoding of ASN.1 values of any given\n   arbitrary
    ASN.1 type.\n   Note that \"ASN.1 value\" does not mean a Basic Encoding Rules
    (BER)\n   [12] encoded value.  The ASN.1 value is an abstract concept that is\n
    \  independent of any particular encoding.  BER is just one possible\n   encoding
    of an ASN.1 value.\n   GSER is based on ASN.1 value notation [8], with changes
    to\n   accommodate the notation's use as a transfer syntax, and to support\n   well
    established ad-hoc string encodings for Lightweight Directory\n   Access Protocol
    (LDAP) [14] directory data types.\n   Though primarily intended for defining the
    LDAP-specific encoding of\n   new LDAP attribute syntaxes and assertion syntaxes,
    these encoding\n   rules could also be used in other domains where human readable\n
    \  renderings of ASN.1 values would be useful.\n   Referencing GSER is sufficient
    to define a human readable text\n   encoding for values of a specific ASN.1 type,
    however other\n   specifications may wish to provide a customized Augmented Backus-Naur\n
    \  Form (ABNF) [3] description, independent of the ASN.1, as a\n   convenience
    for the implementor (equivalent ABNF for the GSER\n   encodings for ASN.1 types
    commonly occurring in LDAP syntaxes is\n   provided in a separate document [15]).
    \ Such a specification SHOULD\n   state that if there is a discrepancy between
    the customized ABNF and\n   the GSER encoding defined by this document, that the
    GSER encoding\n   takes precedence.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions\n   Throughout this document, \"type\" shall be taken to mean
    an ASN.1\n   type, and \"value\" shall be taken to mean an ASN.1 value.\n   The
    key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document
    are to be interpreted as described in BCP 14, RFC 2119 [1].\n"
  title: 2.  Conventions
- contents:
  - "3.  Generic String Encoding Rules\n   The GSER encoding of a value of any ASN.1
    type is described by the\n   following ABNF [3]:\n      Value = BitStringValue
    /\n              BooleanValue /\n              CharacterStringValue /\n              ChoiceValue
    /\n              EmbeddedPDVValue /\n              EnumeratedValue /\n              ExternalValue
    /\n              GeneralizedTimeValue /\n              IntegerValue /\n              InstanceOfValue
    /\n              NullValue /\n              ObjectDescriptorValue /\n              ObjectIdentifierValue
    /\n              OctetStringValue /\n              RealValue /\n              RelativeOIDValue
    /\n              SequenceOfValue /\n              SequenceValue /\n              SetOfValue
    /\n              SetValue /\n              StringValue /\n              UTCTimeValue
    /\n              VariantEncoding\n   The ABNF for each of the above rules is given
    in the following\n   sections.\n"
  - contents:
    - "3.1 Type Referencing Notations\n   A value of a type with a defined type name
      is encoded according to\n   the type definition on the right hand side of the
      type assignment for\n   the type name.\n   A value of a type denoted by the
      use of a parameterized type with\n   actual parameters is encoded according
      to the parameterized type with\n   the DummyReferences [11] substituted with
      the actual parameters.\n   A value of a tagged or constrained type is encoded
      as a value of the\n   type without the tag or constraint, respectively.  Tags
      do not appear\n   in the string encodings defined by this document.  See X.680
      [8] and\n   X.682 [10] for the details of ASN.1 constraint notation.\n   A value
      of an open type denoted by an ObjectClassFieldType (Clause 14\n   of X.681 [9])
      is encoded according to the specific type of the value.\n   A value of a fixed
      type denoted by an ObjectClassFieldType is encoded\n   according to that fixed
      type.\n   A value of a selection type is encoded according to the type\n   referenced
      by the selection type.\n   A value of a type described by TypeFromObject notation
      (Clause 15 of\n   X.681 [9]) is encoded according to the denoted type.\n   A
      value of a type described by ValueSetFromObjects notation (Clause\n   15 of
      X.681 [9]) is encoded according to the governing type.\n"
    title: 3.1 Type Referencing Notations
  - contents:
    - "3.2.  Restricted Character String Types\n   The contents of a string value
      are encoded as a UTF-8 character\n   string between double quotes, regardless
      of the ASN.1 string type.\n   Depending on the ASN.1 string type and an application's
      internal\n   representation of that string type, a translation to or from the\n
      \  UTF-8 character encoding may be required.  NumericString,\n   PrintableString,
      IA5String, and VisibleString (ISO646String) are\n   compatible with UTF-8 and
      do not require any translation.  BMPString\n   (UCS-2) and UniversalString (UCS-4)
      have a direct mapping to and from\n   UTF-8 [6].  For the remaining string types
      see X.680 [8].  Any\n   embedded double quotes in the resulting UTF-8 character
      string are\n   escaped by repeating the double quote characters.\n   A value
      of the NumericString, PrintableString, TeletexString\n   (T61String), VideotexString,
      IA5String, GraphicString, VisibleString\n   (ISO646String), GeneralString, BMPString,
      UniversalString or\n   UTF8String type is encoded according to the <StringValue>
      rule.\n      StringValue       = dquote *SafeUTF8Character dquote\n      dquote
      \           = %x22 ; \" (double quote)\n      SafeUTF8Character = %x00-21 /
      %x23-7F /   ; ASCII minus dquote\n                          dquote dquote /
      \      ; escaped double quote\n                          %xC0-DF %x80-BF /     ;
      2 byte UTF-8 character\n                          %xE0-EF 2(%x80-BF) /  ; 3
      byte UTF-8 character\n                          %xF0-F7 3(%x80-BF)    ; 4 byte
      UTF-8 character\n   A value of the GeneralizedTime type, UTCTime type or ObjectDescriptor\n
      \  type is encoded as a string value.  GeneralizedTime and UTCTime use\n   the
      VisibleString character set so the conversion to UTF-8 is\n   trivial.  ObjectDescriptor
      uses the GraphicString type.\n      GeneralizedTimeValue  = StringValue\n      UTCTimeValue
      \         = StringValue\n      ObjectDescriptorValue = StringValue\n"
    title: 3.2.  Restricted Character String Types
  - contents:
    - "3.3.  ChoiceOfStrings Types\n   It is not uncommon for ASN.1 specifications
      to define types that\n   offer a CHOICE between two or more alternative ASN.1
      string types,\n   where the particular alternative chosen carries no semantic\n
      \  significance (DirectoryString [7] being a prime example).  Such types\n   are
      defined to avoid having to use a complicated character encoding\n   for all
      values when most values could use a simpler string type, or\n   to deal with
      evolving requirements that compel the use of a broader\n   character set while
      still maintaining backward compatibility.\n   GSER encodes values of all the
      ASN.1 string types as UTF-8 character\n   strings so the particular alternative
      that is chosen from a purely\n   syntactic CHOICE of string types makes no material
      difference to the\n   final encoding of the string value.\n   While there are
      certain ASN.1 constructs that betray the semantic\n   significance of the alternatives
      within a CHOICE type, the absence of\n   those constructs does not necessarily
      mean that a CHOICE type is\n   purely syntactic.  Therefore, it is necessary
      for specifications to\n   declare the purely syntactic CHOICE types so that
      they may be more\n   compactly encoded (see Section 3.12).  These declared CHOICE
      types\n   are referred to as ChoiceOfStrings types.\n   To be eligible to be
      declared a ChoiceOfStrings type, an ASN.1 type\n   MUST satisfy the following
      conditions.\n   a) The type is a CHOICE type.\n   b) The component type of each
      alternative is one of the following\n      ASN.1 restricted string types: NumericString,
      PrintableString,\n      TeletexString (T61String), VideotexString, IA5String,\n
      \     GraphicString, VisibleString (ISO646String), GeneralString,\n      BMPString,
      UniversalString or UTF8String.\n   c) All the alternatives are of different
      restricted string types,\n      i.e., no two alternatives have the same ASN.1
      restricted string\n      type.\n   d) Either none of the alternatives has a
      constraint, or all of the\n      alternatives have exactly the same constraint.\n
      \  Tagging on the alternative types is ignored.\n   Consider the ASN.1 parameterized
      type definition of DirectoryString.\n      DirectoryString { INTEGER : maxSize
      } ::= CHOICE {\n          teletexString     TeletexString (SIZE (1..maxSize)),\n
      \         printableString   PrintableString (SIZE (1..maxSize)),\n          bmpString
      \        BMPString (SIZE (1..maxSize)),\n          universalString   UniversalString
      (SIZE (1..maxSize)),\n          uTF8String        UTF8String (SIZE (1..maxSize))
      }\n   Any use of the DirectoryString parameterized type with an actual\n   parameter
      defines an ASN.1 type that satisfies the above conditions.\n   Recognising that
      the alternative within a DirectoryString carries no\n   semantic significance,
      this document declares (each and every use of)\n   DirectoryString{} to be a
      ChoiceOfStrings type.\n   Other specifications MAY declare other types satisfying
      the above\n   conditions to be ChoiceOfStrings types.  The declaration SHOULD
      be\n   made at the point where the ASN.1 type is defined, otherwise it\n   SHOULD
      be made at the point where it is introduced as, or in, an LDAP\n   attribute
      or assertion syntax.\n"
    title: 3.3.  ChoiceOfStrings Types
  - contents:
    - "3.4.  Identifiers\n   An <identifier> conforms to the definition of an identifier
      in ASN.1\n   notation (Clause 11.3 of X.680 [8]).  It begins with a lowercase\n
      \  letter and is followed by zero or more letters, digits, and hyphens.\n   A
      hyphen is not permitted to be the last character, nor is it to be\n   followed
      by another hyphen.  The case of letters in an identifier is\n   always significant.\n
      \     identifier    = lowercase *alphanumeric *(hyphen 1*alphanumeric)\n      alphanumeric
      \ = uppercase / lowercase / decimal-digit\n      uppercase     = %x41-5A  ;
      \"A\" to \"Z\"\n      lowercase     = %x61-7A  ; \"a\" to \"z\"\n      decimal-digit
      = %x30-39  ; \"0\" to \"9\"\n      hyphen        = \"-\"\n"
    title: 3.4.  Identifiers
  - contents:
    - "3.5.  BIT STRING\n   A value of the BIT STRING type is encoded according to
      the\n   <BitStringValue> rule.  If the definition of the BIT STRING type\n   includes
      a named bit list, the <bit-list> form of <BitStringValue>\n   MAY be used.  If
      the number of bits in a BIT STRING value is a\n   multiple of four, the <hstring>
      form of <BitStringValue> MAY be used.\n   Otherwise, the <bstring> form of <BitStringValue>
      is used.\n      BitStringValue = bstring / hstring / bit-list\n   The <bit-list>
      rule encodes the one bits in the bit string value as a\n   comma separated list
      of identifiers.  Each <identifier> MUST be one\n   of the identifiers in the
      named bit list, and MUST NOT appear more\n   than once in the same <bit-list>.
      \ The <bstring> rule encodes each\n   bit as the character \"0\" or \"1\" in
      order from the first bit to the\n   last bit.  The <hstring> rule encodes each
      group of four bits as a\n   hexadecimal number where the first bit is the most
      significant.  An\n   odd number of hexadecimal digits is permitted.\n      bit-list
      \         = \"{\" [ sp identifier\n                             *( \",\" sp
      identifier ) ] sp \"}\"\n      hstring           = squote *hexadecimal-digit
      squote %x48 ; '...'H\n      hexadecimal-digit = %x30-39 /  ; \"0\" to \"9\"\n
      \                         %x41-46    ; \"A\" to \"F\"\n      bstring           =
      squote *binary-digit squote %x42  ; '...'B\n      binary-digit      = \"0\"
      / \"1\"\n      sp                = *%x20  ; zero, one or more space characters\n
      \     squote            =  %x27  ; ' (single quote)\n"
    title: 3.5.  BIT STRING
  - contents:
    - "3.6.  BOOLEAN\n   A value of the BOOLEAN type is encoded according to the\n
      \  <BooleanValue> rule.\n      BooleanValue = %x54.52.55.45 /   ; \"TRUE\"\n
      \                    %x46.41.4C.53.45  ; \"FALSE\"\n"
    title: 3.6.  BOOLEAN
  - contents:
    - "3.7.  ENUMERATED\n   A value of the ENUMERATED type is encoded according to
      the\n   <EnumeratedValue> rule.  The <identifier> MUST be one of those in the\n
      \  list of enumerations in the definition of the ENUMERATED type.\n      EnumeratedValue
      = identifier\n"
    title: 3.7.  ENUMERATED
  - contents:
    - "3.8.  INTEGER\n   A value of the INTEGER type is encoded according to the\n
      \  <IntegerValue> rule.  If the definition of the INTEGER type includes\n   a
      named number list, the <identifier> form of <IntegerValue> MAY be\n   used,
      in which case the <identifier> MUST be one of the identifiers\n   in the named
      number list.\n      IntegerValue    = \"0\" /\n                        positive-number
      /\n                        (\"-\" positive-number) /\n                        identifier\n
      \     positive-number = non-zero-digit *decimal-digit\n      non-zero-digit
      \ = %x31-39  ; \"1\" to \"9\"\n"
    title: 3.8.  INTEGER
  - contents:
    - "3.9.  NULL\n   A value of the NULL type is encoded according to the <NullValue>\n
      \  rule.\n      NullValue = %x4E.55.4C.4C  ; \"NULL\"\n"
    title: 3.9.  NULL
  - contents:
    - "3.10.  OBJECT IDENTIFIER and RELATIVE-OID\n   A value of the OBJECT IDENTIFIER
      type is encoded according to the\n   <ObjectIdentifierValue> rule.  The <ObjectIdentifierValue>
      rule\n   allows either a dotted decimal representation of the OBJECT\n   IDENTIFIER
      value or an object descriptor name, i.e., <descr>.  The\n   <descr> rule is
      described in RFC 2252 [4].  An object descriptor name\n   is potentially ambiguous
      and should be used with care.\n      ObjectIdentifierValue = numeric-oid / descr\n
      \     numeric-oid           = oid-component 1*( \".\" oid-component )\n      oid-component
      \        = \"0\" / positive-number\n   A value of the RELATIVE-OID type is encoded
      according to the\n   <RelativeOIDValue> rule.\n      RelativeOIDValue = oid-component
      *( \".\" oid-component )\n"
    title: 3.10.  OBJECT IDENTIFIER and RELATIVE-OID
  - contents:
    - "3.11.  OCTET STRING\n   A value of the OCTET STRING type is encoded according
      to the\n   <OctetStringValue> rule.  The octets are encoded in order from the\n
      \  first octet to the last octet.  Each octet is encoded as a pair of\n   hexadecimal
      digits where the first digit corresponds to the four most\n   significant bits
      of the octet.  If the hexadecimal string does not\n   have an even number of
      digits, the four least significant bits in the\n   last octet are assumed to
      be zero.\n      OctetStringValue = hstring\n"
    title: 3.11.  OCTET STRING
  - contents:
    - "3.12.  CHOICE\n   A value of a CHOICE type is encoded according to the <ChoiceValue>\n
      \  rule.  The <ChoiceOfStringsValue> encoding MAY be used if the\n   corresponding
      CHOICE type has been declared a ChoiceOfStrings type.\n   This document declares
      DirectoryString to be a ChoiceOfStrings type\n   (see Section 3.3).  Otherwise,
      the <IdentifiedChoiceValue> form of\n   <ChoiceValue> is used.\n      ChoiceValue
      \          = IdentifiedChoiceValue /\n                              ChoiceOfStringsValue\n
      \     IdentifiedChoiceValue = identifier \":\" Value\n      ChoiceOfStringsValue
      \ = StringValue\n   For implementations that recognise the internal structure
      of the\n   DirectoryString CHOICE type (e.g., X.500 directories [16]), if the\n
      \  character string between the quotes in a <StringValue> contains only\n   characters
      that are permitted in a PrintableString, the\n   DirectoryString is assumed
      to use the printableString alternative,\n   otherwise it is assumed to use the
      uTF8String alternative.  The\n   <IdentifiedChoiceValue> rule MAY be used for
      a value of type\n   DirectoryString to indicate an alternative other than the
      one that\n   would be assumed from the string contents.  No matter what\n   alternative
      is chosen, the <Value> will still be a UTF-8 encoded\n   character string.  However,
      it is a syntax error if the characters in\n   the UTF-8 string cannot be represented
      in the string type of the\n   chosen alternative.\n   Implementations that do
      not care about the internal structure of a\n   DirectoryString value MUST be
      able to parse the\n   <IdentifiedChoiceValue> form for a DirectoryString value,
      though the\n   particular identifier found will be of no interest.\n"
    title: 3.12.  CHOICE
  - contents:
    - "3.13.  SEQUENCE and SET\n   A value of a SEQUENCE type is encoded according
      to the\n   <SequenceValue> rule.  The <ComponentList> rule encodes a comma\n
      \  separated list of the particular component values present in the\n   SEQUENCE
      value, where each component value is preceded by the\n   corresponding identifier
      from the SEQUENCE type definition.  The\n   components are encoded in the order
      of their definition in the\n   SEQUENCE type.\n      SequenceValue = ComponentList\n
      \     ComponentList = \"{\" [ sp NamedValue *( \",\" sp NamedValue) ] sp \"}\"\n
      \     NamedValue    = identifier msp Value\n      msp           = 1*%x20  ;
      one or more space characters\n   A value of a SET type is encoded according
      to the <SetValue> rule.\n   The components are encoded in the order of their
      definition in the\n   SET type (i.e., just like a SEQUENCE value).  This is
      a deliberate\n   departure from ASN.1 value notation where the components of
      a SET can\n   be written in any order.\n      SetValue = ComponentList\n   SEQUENCE
      and SET type definitions are sometimes extended by the\n   inclusion of additional
      component types, so an implementation SHOULD\n   be capable of skipping over
      any <NamedValue> encoding with an\n   identifier that is not recognised, on
      the assumption that the sender\n   is using a more recent definition of the
      SEQUENCE or SET type.\n"
    title: 3.13.  SEQUENCE and SET
  - contents:
    - "3.14.  SEQUENCE OF and SET OF\n   A value of a SEQUENCE OF type is encoded
      according to the\n   <SequenceOfValue> rule, as a comma separated list of the
      instances in\n   the value.  Each instance is encoded according to the component
      type\n   of the SEQUENCE OF type.\n      SequenceOfValue = \"{\" [ sp Value
      *( \",\" sp Value) ] sp \"}\"\n   A value of a SET OF type is encoded according
      to the <SetOfValue>\n   rule, as a list of the instances in the value.  Each
      instance is\n   encoded according to the component type of the SET OF type.\n
      \     SetOfValue      = \"{\" [ sp Value *( \",\" sp Value) ] sp \"}\"\n"
    title: 3.14.  SEQUENCE OF and SET OF
  - contents:
    - "3.15.  CHARACTER STRING\n   A value of the unrestricted CHARACTER STRING type
      is encoded\n   according to the corresponding SEQUENCE type defined in Clause
      40.5\n   of X.680 [8] (see [15] for equivalent ABNF).\n      CharacterStringValue
      = SequenceValue\n"
    title: 3.15.  CHARACTER STRING
  - contents:
    - "3.16.  EMBEDDED PDV\n   A value of the EMBEDDED PDV type is encoded according
      to the\n   corresponding SEQUENCE type defined in Clause 33.5 of X.680 [8] (see\n
      \  [15] for equivalent ABNF).\n      EmbeddedPDVValue = SequenceValue\n"
    title: 3.16.  EMBEDDED PDV
  - contents:
    - "3.17.  EXTERNAL\n   A value of the EXTERNAL type is encoded according to the\n
      \  corresponding SEQUENCE type defined in Clause 8.18.1 of X.690 [12]\n   (see
      [15] for equivalent ABNF).\n      ExternalValue = SequenceValue\n"
    title: 3.17.  EXTERNAL
  - contents:
    - "3.18.  INSTANCE OF\n   A value of the INSTANCE OF type is encoded according
      to the\n   corresponding SEQUENCE type defined in Annex C of X.681 [9].\n      InstanceOfValue
      = SequenceValue\n"
    title: 3.18.  INSTANCE OF
  - contents:
    - "3.19.  REAL\n   A value of the REAL type MUST be encoded as \"0\" if it is
      zero,\n   otherwise it is encoded as the special value <PLUS-INFINITY>, the\n
      \  special value <MINUS-INFINITY>, an optionally signed <realnumber>, or\n   as
      a value of the corresponding SEQUENCE type for REAL defined in\n   Clause 20.5
      of X.680 [8] (see [15] for equivalent ABNF).\n      RealValue  = \"0\"               ;
      zero REAL value\n                   / PLUS-INFINITY   ; positive infinity\n
      \                  / MINUS-INFINITY  ; negative infinity\n                   /
      realnumber      ; positive base 10 REAL value\n                   / \"-\" realnumber
      \ ; negative base 10 REAL value\n                   / SequenceValue   ; non-zero
      REAL value, base 2 or 10\n      realnumber = mantissa exponent\n      mantissa
      \  = (positive-number [ \".\" *decimal-digit ])\n                   / ( \"0.\"
      *(\"0\") positive-number )\n      exponent   = \"E\" ( \"0\" / ([ \"-\" ] positive-number))\n
      \     PLUS-INFINITY  = %x50.4C.55.53.2D.49.4E.46.49.4E.49.54.59\n                          ;
      \"PLUS-INFINITY\"\n      MINUS-INFINITY = %x4D.49.4E.55.53.2D.49.4E.46.49.4E.49.54.59\n
      \                         ; \"MINUS-INFINITY\"\n"
    title: 3.19.  REAL
  - contents:
    - "3.20.  Variant Encodings\n   The values of some named complex ASN.1 types have
      special string\n   encodings.  These special encodings are always used instead
      of the\n   encoding that would otherwise apply based on the ASN.1 type\n   definition.\n
      \     VariantEncoding = RDNSequenceValue /\n                        RelativeDistinguishedNameValue
      /\n                        ORAddressValue\n   A value of the RDNSequence type,
      i.e., a distinguished name, is\n   encoded according to the <RDNSequenceValue>
      rule, as a quoted LDAPDN\n   character string.  The character string is first
      derived according to\n   the <distinguishedName> rule in Section 3 of RFC 2253
      [5], and then\n   encoded as if it were a UTF8String value, i.e., between double
      quotes\n   with any embedded double quotes escaped by being repeated.\n      RDNSequenceValue
      = StringValue\n   A RelativeDistinguishedName value that is not part of an RDNSequence\n
      \  value is encoded according to the <RelativeDistinguishedNameValue>\n   rule
      as a quoted character string.  The character string is first\n   derived according
      to the <name-component> rule in Section 3 of RFC\n   2253 [5], and then encoded
      as if it were a UTF8String value.\n      RelativeDistinguishedNameValue = StringValue\n
      \  A value of the ORAddress type is encoded according to the\n   <ORAddressValue>
      rule as a quoted character string.  The character\n   string is first derived
      according to the textual representation of\n   MTS.ORAddress from RFC 2156 [2],
      and then encoded as if it were an\n   IA5String value.\n      ORAddressValue
      = StringValue\n"
    title: 3.20.  Variant Encodings
  title: 3.  Generic String Encoding Rules
- contents:
  - "4.  GSER Transfer Syntax\n   The following OBJECT IDENTIFIER has been assigned
    by Adacel\n   Technologies, under an arc assigned to Adacel by Standards Australia,\n
    \  to identify the Generic String Encoding Rules:\n      { 1 2 36 79672281 0 0
    }\n   This OBJECT IDENTIFIER would be used, for example, to describe the\n   transfer
    syntax for a GSER encoded data-value in an EMBEDDED PDV\n   value.\n"
  title: 4.  GSER Transfer Syntax
- contents:
  - "5.  Security Considerations\n   The Generic String Encoding Rules do not define
    a canonical encoding.\n   That is, a transformation from a GSER encoding into
    some other\n   encoding (e.g., BER) and back into GSER will not necessarily\n
    \  reproduce the original GSER octet encoding.  Therefore, GSER MUST NOT\n   be
    used where a canonical encoding is needed.\n   Furthermore, GSER does not necessarily
    enable the exact octet\n   encoding of values of the TeletexString, VideotexString,\n
    \  GraphicString or GeneralString types to be reconstructed, so a\n   transformation
    from a Distinguished Encoding Rules (DER) [12]\n   encoding to GSER and back to
    DER may not reproduce the original DER\n   encoding.  Therefore, GSER MUST NOT
    be used to re-encode, whether for\n   storage or transmission, ASN.1 abstract
    values whose original binary\n   encoding must be recoverable.  Such recovery
    is needed for the\n   verification of digital signatures.  In such cases, protocols
    ought\n   to use DER or a DER-reversible encoding.\n   When interpreting security-sensitive
    fields, and in particular fields\n   used to grant or deny access, implementations
    MUST ensure that any\n   comparisons are done on the underlying abstract value,
    regardless of\n   the particular encoding used.\n"
  title: 5.  Security Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [2]
      \ Kille, S., \"MIXER (Mime Internet X.400 Enhanced Relay): Mapping\n        between
      X.400 and RFC 822/MIME\", RFC 2156, January 1998.\n   [3]  Crocker, D. and P.
      Overell, \"Augmented BNF for Syntax\n        Specifications: ABNF\", RFC 2234,
      November 1997.\n   [4]  Wahl, M., Coulbeck, A., Howes, T. and S. Kille, \"Lightweight\n
      \       Directory Access Protocol (v3): Attribute Syntax Definitions\",\n        RFC
      2252, December 1997.\n   [5]  Wahl, M., Kille S. and T. Howes. \"Lightweight
      Directory Access\n        Protocol (v3): UTF-8 String Representation of Distinguished\n
      \       Names\", RFC 2253, December 1997.\n   [6]  Yergeau, F., \"UTF-8, a transformation
      format of ISO 10646\", RFC\n        2279, January 1998.\n   [7]  ITU-T Recommendation
      X.520 (1993) | ISO/IEC 9594-6:1994,\n        Information Technology - Open Systems
      Interconnection - The\n        Directory: Selected attribute types\n   [8]  ITU-T
      Recommendation X.680 (07/02) | ISO/IEC 8824-1:2002\n        Information technology
      - Abstract Syntax Notation One (ASN.1):\n        Specification of basic notation\n
      \  [9]  ITU-T Recommendation X.681 (07/02) | ISO/IEC 8824-2:2002\n        Information
      technology - Abstract Syntax Notation One (ASN.1):\n        Information object
      specification\n   [10] ITU-T Recommendation X.682 (07/02) | ISO/IEC 8824-3:2002\n
      \       Information technology - Abstract Syntax Notation One (ASN.1):\n        Constraint
      specification\n   [11] ITU-T Recommendation X.683 (07/02) | ISO/IEC 8824-4:2002\n
      \       Information technology - Abstract Syntax Notation One (ASN.1):\n        Parameterization
      of ASN.1 specifications\n   [12] ITU-T Recommendation X.690 (07/02) | ISO/IEC
      8825-1:2002\n        Information technology - ASN.1 encoding rules: Specification
      of\n        Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and\n
      \       Distinguished Encoding Rules (DER)\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [13] Hovey, R. and S. Bradner, \"The Organizations
      Involved in the\n        IETF Standards Process\", BCP 11, RFC 2028, October
      1996.\n   [14] Hodges, J. and R. Morgan, \"Lightweight Directory Access Protocol\n
      \       (v3): Technical Specification\", RFC 3377, September 2002.\n   [15]
      Legg, S., \"Common Elements of Generic String Encoding Rules\n        (GSER)
      Encodings\", RFC 3642, October 2003.\n   [16] ITU-T Recommendation X.500 (1993)
      | ISO/IEC 9594-1:1994,\n        Information Technology - Open Systems Interconnection
      - The\n        Directory: Overview of concepts, models and services\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "7.  Intellectual Property Notice\n   The IETF takes no position regarding the
    validity or scope of any\n   intellectual property or other rights that might
    be claimed to\n   pertain to the implementation or use of the technology described
    in\n   this document or the extent to which any license under such rights\n   might
    or might not be available; neither does it represent that it\n   has made any
    effort to identify any such rights.  Information on the\n   IETF's procedures
    with respect to rights in standards-track and\n   standards-related documentation
    can be found in BCP-11.  Copies of\n   claims of rights made available for publication
    and any assurances of\n   licenses to be made available, or the result of an attempt
    made to\n   obtain a general license or permission for the use of such\n   proprietary
    rights by implementors or users of this specification can\n   be obtained from
    the IETF Secretariat.\n   The IETF invites any interested party to bring to its
    attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights which may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n"
  title: 7.  Intellectual Property Notice
- contents:
  - "8.  Author's Address\n   Steven Legg\n   Adacel Technologies Ltd.\n   250 Bay
    Street\n   Brighton, Victoria 3186\n   AUSTRALIA\n   Phone: +61 3 8530 7710\n
    \  Fax:   +61 3 8530 7888\n   EMail: steven.legg@adacel.com.au\n"
  title: 8.  Author's Address
- contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assignees.\n   This document and the
    information contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET
    SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES,
    EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE
    OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 9.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
