- title: __initial_text__
  contents:
  - '        HTTP Adaptation with Open Pluggable Edge Services (OPES)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   Open Pluggable Edge Services (OPES) framework documents several\n\
    \   application-agnostic mechanisms such as OPES tracing, OPES bypass,\n   and\
    \ OPES callout protocol.  This document extends those generic\n   mechanisms for\
    \ Hypertext Transfer Protocol (HTTP) adaptation.\n   Together, application-agnostic\
    \ OPES documents and this HTTP profile\n   constitute a complete specification\
    \ for HTTP adaptation with OPES.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Scope ...........................................................3\n\
    \   2. OPES Document Map ...............................................3\n  \
    \ 3. Callout Protocol ................................................4\n    \
    \  3.1. Application Message Parts ..................................5\n      3.2.\
    \ Application Profile Features ...............................6\n           3.2.1.\
    \ Profile Parts .......................................6\n           3.2.2. Profile\
    \ Structure ...................................8\n           3.2.3. Aux-Parts\
    \ ...........................................8\n           3.2.4. Pause-At-Body\
    \ .......................................9\n           3.2.5. Stop-Receiving-Body\
    \ ................................10\n           3.2.6. Preservation-Interest-Body\
    \ .........................10\n           3.2.7. Content-Encodings ..................................11\n\
    \           3.2.8. Profile Negotiation Example ........................12\n  \
    \    3.3. Application Message Start Message .........................13\n    \
    \  3.4. DUM Message ...............................................13\n      3.5.\
    \ Selective Adaptation ......................................14\n      3.6. Hop-by-hop\
    \ Headers ........................................15\n      3.7. Transfer Encodings\
    \ ........................................15\n      3.8. HTTP Header Correctness\
    \ ...................................16\n           3.8.1. Message Size Recalculation\
    \ .........................16\n           3.8.2. Content-MD5 Header .................................17\n\
    \      3.9. Examples ..................................................18\n  \
    \ 4. Tracing ........................................................22\n   5.\
    \ Bypass .........................................................24\n   6. IAB\
    \ Considerations .............................................24\n   7. Security\
    \ Considerations ........................................24\n   8. IANA Considerations\
    \ ............................................24\n   9. Compliance .....................................................25\n\
    \   10. References ....................................................25\n  \
    \    10.1. Normative References .....................................25\n    \
    \  10.2. Informative References ...................................25\n"
- title: 1.  Scope
  contents:
  - "1.  Scope\n   The Open Pluggable Edge Services (OPES) framework documents several\n\
    \   application-agnostic mechanisms such as OPES processor and endpoints\n   communications\
    \ [RFC3897] or OPES callout protocol [RFC4037].  This\n   document extends those\
    \ generic mechanisms for adaptation of a\n   specific application protocol, HTTP\
    \ [RFC2616].  Together,\n   application-agnostic OPES documents and this HTTP\
    \ profile constitute\n   a complete specification for HTTP adaptation with OPES.\n\
    \   The primary sections of this document specify HTTP-specific\n   extensions\
    \ for the corresponding application-agnostic mechanisms\n   documented elsewhere.\n"
- title: 2.  OPES Document Map
  contents:
  - "2.  OPES Document Map\n   This document belongs to a large set of OPES specifications\
    \ produced\n   by the IETF OPES Working Group.  Familiarity with the overall OPES\n\
    \   approach and typical scenarios is often essential when trying to\n   comprehend\
    \ isolated OPES documents.  This section provides an index\n   of OPES documents\
    \ to assist the reader with finding \"missing\"\n   information.\n   o  The document\
    \ on \"OPES Use Cases and Deployment Scenarios\"\n      [RFC3752] describes a\
    \ set of services and applications that are\n      considered in scope for OPES\
    \ and have been used as a motivation\n      and guidance in designing the OPES\
    \ architecture.\n   o  The OPES architecture and common terminology are described\
    \ in \"An\n      Architecture for Open Pluggable Edge Services (OPES)\" [RFC3835].\n\
    \   o  \"Policy, Authorization and Enforcement Requirements of OPES\"\n      [RFC3838]\
    \ outlines requirements and assumptions on the policy\n      framework, without\
    \ specifying concrete authorization and\n      enforcement methods.\n   o  \"\
    Security Threats and Risks for OPES\" [RFC3837] provides OPES risk\n      analysis,\
    \ without recommending specific solutions.\n   o  \"OPES Treatment of IAB Considerations\"\
    \ [RFC3914] addresses all\n      architecture-level considerations expressed by\
    \ the IETF Internet\n      Architecture Board (IAB) when the OPES WG was chartered.\n\
    \   o  At the core of the OPES architecture are the OPES processor and\n     \
    \ the callout server, two network elements that communicate with\n      each other\
    \ via an OPES Callout Protocol (OCP).  The requirements\n      for such protocol\
    \ are discussed in \"Requirements for OPES Callout\n      Protocols\" [RFC3836].\n\
    \   o  \"OPES Callout Protocol Core\" [RFC4037] specifies an application\n   \
    \   agnostic protocol core to be used for the communication between\n      OPES\
    \ processor and callout server.\n   o  \"OPES entities and end points communications\"\
    \ [RFC3897] specifies\n      generic tracing and bypass mechanisms for OPES.\n\
    \   o  The OCP Core and Communications documents are independent from the\n  \
    \    application protocol being adapted by OPES entities.  Their\n      generic\
    \ mechanisms have to be complemented by application-specific\n      profiles.\
    \  This document, HTTP adaptation with OPES, is such an\n      application profile\
    \ for HTTP.  It specifies how application-\n      agnostic OPES mechanisms are\
    \ to be used and augmented in order to\n      support adaptation of HTTP messages.\n\
    \   o  Finally, \"P: Message Processing Language\" [rules-p] defines a\n     \
    \ language for specifying what OPES adaptations (e.g., translation)\n      must\
    \ be applied to what application messages (e.g., e-mail from\n      bob@example.com).\
    \  P language is meant for configuring application\n      proxies (OPES processors).\n"
- title: 3.  Callout Protocol
  contents:
  - "3.  Callout Protocol\n   This section documents the HTTP profile for the OPES\
    \ Callout Protocol\n   (OCP) Core [RFC4037].  Familiarity with OCP Core is required\
    \ to\n   understand the HTTP profile.  This section uses OCP Core conventions,\n\
    \   terminology, and mechanisms.\n   OPES processor communicates its desire to\
    \ adapt HTTP messages via a\n   Negotiation Offer (NO) message with HTTP-specific\
    \ feature identifiers\n   documented in Section 3.2.  HTTP-specific OCP optimization\
    \ mechanisms\n   can be negotiated at the same time.  A callout server that supports\n\
    \   adaptation of HTTP messages has a chance to negotiate what HTTP\n   message\
    \ parts will participate in adaptation, including negotiation\n   of HTTP request\
    \ parts as metadata for HTTP response adaptation.\n   Negotiable HTTP message\
    \ parts are documented in Section 3.1.\n   HTTP profile introduces a new parameter\
    \ for the Application Message\n   Start (AMS) message to communicate known HTTP\
    \ message length (HTTP\n   headers often do not convey length information reliably\
    \ or at all).\n   This parameter is documented in Section 3.3.  Section 3.4 documents\
    \ a\n   mechanism to report HTTP message parts with Data Use Mine (DUM)\n   messages.\n\
    \   The remaining OCP sections document various OCP marshaling corner\n   cases\
    \ such as handling of HTTP transfer encodings and 100 Continue\n   responses.\n"
- title: 3.1.  Application Message Parts
  contents:
  - "3.1.  Application Message Parts\n   An HTTP message may have several well-known\
    \ parts: headers, body, and\n   trailers.  HTTP OPES processors are likely to\
    \ have information about\n   HTTP message parts because they have to isolate and\
    \ interpret HTTP\n   headers and find HTTP message boundaries.  Callout servers\
    \ may either\n   not care about certain parts or may benefit from reusing HTTP\
    \ OPES\n   processor work on isolating and categorizing interesting parts.\n \
    \  The following is the declaration of am-part (application message\n   part)\
    \ type using OCP Core Protocol Element Type Declaration Mnemonic\n   (PETDM):\n\
    \   am-part:  extends atom;\n   am-parts: extends list of am-part;\n         \
    \                        Figure 1\n   The following six \"am-part\" atoms are\
    \ valid values:\n   request-header: The start-line of an HTTP request message,\
    \ all\n      request message headers, and the CRLF separator at the end of HTTP\n\
    \      headers (compare with section 4.1 of [RFC2616]).\n   request-body: The\
    \ message body of an HTTP request message as defined\n      in section 4.3 of\
    \ [RFC2616] but not including the trailer.\n   request-trailer: The entity headers\
    \ of the trailer of an HTTP request\n      message in chunked transfer encoding.\
    \  This part follows the same\n      syntax as the trailer defined in section\
    \ 3.6.1 of [RFC2616].\n   response-header: The start-line of an HTTP response\
    \ message, all\n      response message headers, and the CRLF separator at the\
    \ end of\n      HTTP headers (compare with section 4.1 of [RFC2616]).\n   response-body:\
    \ The message body of an HTTP response message as\n      defined in section 4.3\
    \ of [RFC2616] but not including the trailer.\n   response-trailer: The entity\
    \ headers of the trailer of an HTTP\n      response message in chunked transfer\
    \ encoding.  This part follows\n      the same syntax as the trailer defined in\
    \ section 3.6.1 of\n      [RFC2616].\n"
- title: 3.2.  Application Profile Features
  contents:
  - "3.2.  Application Profile Features\n   This document defines two HTTP profiles\
    \ for OCP: request and response\n   profiles.  These two profiles are described\
    \ below.  Each profile has\n   a unique feature identifier, a list of original\
    \ application message\n   parts, and a list of adapted application message parts:\n\
    \   profile ID: http://www.iana.org/assignments/opes/ocp/http/request\n      original\
    \ request parts: request-header, request-body, request-\n         trailer\n  \
    \    adapted request parts: request-header, request-body, request-\n         trailer\n\
    \      adapted response parts: response-header, response-body, response-\n   \
    \      trailer\n   profile ID: http://www.iana.org/assignments/opes/ocp/http/response\n\
    \      original transaction parts: request-header (aux), request-body\n      \
    \   (aux), request-trailer (aux), response-header, response-body,\n         response-trailer\n\
    \      adapted response parts: response-header, response-body, response-\n   \
    \      trailer\n   The request profile contains two variants of adapted part lists:\
    \ HTTP\n   request parts and HTTP response parts.  Parts marked with an \"(aux)\"\
    \n   suffix are auxiliary parts that can only be used if explicitly\n   negotiated\
    \ for a profile.  See Section 3.2.1 for specific rules\n   governing negotiation\
    \ and use of am-parts.\n   The scope of a negotiated profile is the OCP connection\
    \ (default) or\n   the service group specified via the SG parameter.\n"
- title: 3.2.1.  Profile Parts
  contents:
  - "3.2.1.  Profile Parts\n   An OCP agent MUST send application message parts in\
    \ the order implied\n   by the profile parts lists above.  An OCP agent receiving\
    \ an out-of-\n   order part MAY terminate the transaction with an error.\n   An\
    \ OPES processor MUST NOT send parts that are not listed as\n   \"original\" in\
    \ the negotiated profile.  A callout server MUST NOT send\n   parts that are not\
    \ listed as \"adapted\" in the negotiated profile.  An\n   OCP agent receiving\
    \ an not-listed part MUST terminate the transaction\n   with an error.  The informal\
    \ rationale for the last requirement is to\n   reduce the number of subtle interoperability\
    \ problems where an agent\n   thinks that the parts it is sending are understood/used\
    \ by the other\n   agent when, in fact, they are being ignored or skipped because\
    \ they\n   are not expected.\n   Some HTTP messages lack certain parts.  For example,\
    \ many HTTP\n   requests do not have bodies, and most HTTP messages do not have\n\
    \   trailers.  An OCP agent MUST NOT send (i.e., must skip) absent\n   application\
    \ message parts.\n   An OCP agent MUST send present non-auxiliary parts and it\
    \ MUST send\n   those present auxiliary parts that were negotiated via the Aux-Parts\n\
    \   (Section 3.2.3) parameter.  OCP agents MUST NOT send auxiliary parts\n   that\
    \ were not negotiated via the Aux-Parts (Section 3.2.3) parameter.\n   An OCP\
    \ agent receiving a message part in violation of the above\n   requirements MAY\
    \ terminate the corresponding transaction with an\n   error.\n   By design, original\
    \ parts not included in the adapted parts list\n   cannot be adapted.  In other\
    \ words, a callout service can only adapt\n   parts in the adapted parts list\
    \ even though it may have access to\n   other parts.\n   In the request profile,\
    \ the callout server MUST send either adapted\n   request parts or adapted response\
    \ parts.  An OPES processor receiving\n   adapted flow with application message\
    \ parts from both lists (in\n   violation of the previous rule) MUST terminate\
    \ the OCP transaction\n   with an error.  Informally, the callout server sends\
    \ adapted response\n   parts to \"short-circuit\" the HTTP transaction, forcing\
    \ the OPES\n   processor to return an HTTP response without forwarding an adapted\n\
    \   HTTP request.  This short-circuiting is useful for responding, for\n   example,\
    \ to an HTTP request that the callout service defines as\n   forbidden.\n   Unless\
    \ explicitly configured to do otherwise, an OPES processor MUST\n   offer all\
    \ non-auxiliary original parts in Negotiation Offer (NO)\n   messages.  See Section\
    \ 3.5 for this rule rationale and examples of\n   harmful side-effects from selective\
    \ adaptation.\n"
- title: 3.2.2.  Profile Structure
  contents:
  - "3.2.2.  Profile Structure\n   An HTTP application profile feature extends semantics\
    \ of the feature\n   type of OCP Core while adding the following named parameters\
    \ to that\n   type:\n   o  Aux-Parts (Section 3.2.3)\n   o  Pause-At-Body (Section\
    \ 3.2.4)\n   o  Stop-Receiving-Body (Section 3.2.5)\n   o  Preservation-Interest-Body\
    \ (Section 3.2.6)\n   o  Content-Encodings (Section 3.2.7)\n   The definition\
    \ of the HTTP profile feature structure using PETDM\n   follows:\n   HTTP-Profile:\
    \ extends Feature with {\n       [Aux-Parts: am-parts];\n       [Pause-At-Body:\
    \ size];\n       [Stop-Receiving-Body: size];\n       [Preservation-Interest-Body:\
    \ size];\n       [Content-Encodings: codings];\n   };\n                      \
    \           Figure 2\n   An HTTP profile structure can be used in feature lists\
    \ of Negotiation\n   Offer (NO) messages and as an anonymous parameter of a Negotiation\n\
    \   Response (NR) message.  All profile parameters apply to any OCP\n   transaction\
    \ within profile scope.\n"
- title: 3.2.3.  Aux-Parts
  contents:
  - "3.2.3.  Aux-Parts\n   The Aux-Parts parameter of an HTTP response profile can\
    \ be used to\n   negotiate the inclusion of auxiliary application message parts\
    \ into\n   the original data flow.  The parameter is a possibly empty list of\n\
    \   am-part tokens.  An OPES processor MAY send an Aux-Parts parameter to\n  \
    \ advertise availability of auxiliary application message parts.  A\n   callout\
    \ server MAY respond with a possibly empty subset of the parts\n   it needs. \
    \ The callout server response defines the subset of\n   successfully negotiated\
    \ auxiliary message parts.\n   When receiving a Negotiation Offer (NO) message,\
    \ the callout server\n   MUST ignore any non-auxiliary part listed in the Aux-Parts\
    \ parameter.\n   When sending a Negotiation Response (NR) message, the callout\
    \ server\n   MUST NOT select any application message part that was not explicitly\n\
    \   listed in the negotiation offer.  In case of a violation of the last\n   rule,\
    \ the OPES processor MUST terminate the transaction.\n   An OPES processor MUST\
    \ send each negotiated auxiliary part to the\n   callout server, unless the part\
    \ is absent.\n   Example:\n        Aux-Parts: (request-header,request-body)\n\
    \                                 Figure 3\n"
- title: 3.2.4.  Pause-At-Body
  contents:
  - "3.2.4.  Pause-At-Body\n   A callout server MAY use the Pause-At-Body parameter\
    \ to request a\n   pause in original application message body transmission before\n\
    \   original dataflow starts.  The parameter's value is of type \"offset\".\n\
    \   The parameter specifies the start of the non-auxiliary application\n   message\
    \ body suffix that the sender is temporarily not interested in\n   seeing.\n \
    \  [headers][ body prefix | body suffix ][trailer]\n   <-- ? --><-- offset  --><--\
    \ ? ---------------->\n   <-- equiv. DWP offset ->\n                         \
    \        Figure 4\n   When an OPES processor receives a Pause-At-Body parameter,\
    \ it MUST\n   behave as if it has received a Want Data Paused (DWP) message with\n\
    \   the corresponding org-offset.  Note that the latter offset is\n   different\
    \ from the Pause-At-Body offset and is unknown until the size\n   of the HTTP\
    \ message headers is known.\n   For example, if the Pause-At-Body value is zero,\
    \ the OPES processor\n   should send a Paused My Data (DPM) message just before\
    \ it sends the\n   first Data Use Mine (DUM) message with the response-body part\
    \ in the\n   HTTP response profile.  If the Pause-At-Body value is 300, the OPES\n\
    \   processor should send a DPM message after transmitting 300 OCTETs for\n  \
    \ that application message part.\n   Example:\n        Pause-At-Body: 0\n    \
    \                             Figure 5\n"
- title: 3.2.5.  Stop-Receiving-Body
  contents:
  - "3.2.5.  Stop-Receiving-Body\n   A callout server MAY use the Stop-Receiving-Body\
    \ parameter to imply a\n   Want Stop Receiving Data (DWSR) message behavior before\
    \ the original\n   dataflow starts.  The parameter's value is of type \"offset\"\
    .  The\n   parameter specifies an offset into the original, non-auxiliary\n  \
    \ message body part (request-body in request profile and response-body\n   in\
    \ response profile).\n   A callout service MAY send a Stop-Receiving-Body parameter\
    \ with its\n   negotiation response if there is a fixed offset into the message\
    \ body\n   for all transactions of a profile for which a Want Stop Receiving\n\
    \   Data (DWSR) message would be sent.  An OPES processor MUST behave as\n   if\
    \ it has received a DWSR message with the corresponding offset.\n   Note that\
    \ the latter offset is different from the Stop-Receiving-Body\n   offset and is\
    \ unknown until the size of the HTTP message headers is\n   known.\n   For example,\
    \ if the Stop-Receiving-Body value is zero in an HTTP\n   response profile, the\
    \ OPES processor should send an Application\n   Message End (AME) message with\
    \ result code 206 immediately after\n   sending the response-header message part\
    \ and before starting with the\n   response-body message part.\n   Example:\n\
    \       Stop-Receiving-Body: 0\n                                 Figure 6\n"
- title: 3.2.6.  Preservation-Interest-Body
  contents:
  - "3.2.6.  Preservation-Interest-Body\n   The Preservation-Interest-Body parameter\
    \ can be used to optimize data\n   preservation at the OPES processor.  The parameter's\
    \ value is of type\n   \"size\" and denominates a prefix size of the original,\
    \ non-auxiliary\n   message body part (request-body in HTTP request profile and\n\
    \   response-body in response profile).\n   A callout service MAY send a Preservation-Interest-Body\
    \ parameter\n   with its negotiation response if there is a fixed-size prefix\
    \ of the\n   application message body for which a Data Preservation Interest (DPI)\n\
    \   message would be sent.  An OPES processor MUST behave as if it\n   receives\
    \ a DPI message with org-offset zero and org-size equal to the\n   value of the\
    \ Preservation-Interest-Body parameter.\n   For example, if the Preservation-Interest-Body\
    \ value is zero in an\n   HTTP response profile, the callout server must not send\
    \ any Data Use\n   Yours (DUY) message for the response-body part; the OPES processor\n\
    \   may use this information to optimize its data preservation behavior\n   even\
    \ before it makes the decision to preserve data.\n   Example:\n        Preservation-Interest-Body:\
    \ 0\n                                 Figure 7\n"
- title: 3.2.7.  Content-Encodings
  contents:
  - "3.2.7.  Content-Encodings\n   A callout server MAY send a Content-Encodings list\
    \ to indicate its\n   preferences in content encodings.  Encodings listed first\
    \ are\n   preferred to other encodings.  An OPES processor MAY use any content\n\
    \   encoding when sending application messages to a callout server.\n   The list\
    \ of preferred content encodings does not imply lack of\n   support for other\
    \ encodings.  The OPES processor MUST NOT bypass a\n   service just because the\
    \ actual content encoding does not match the\n   service's preferences.\n   If\
    \ an OCP agent receives an application message that it cannot handle\n   due to\
    \ specific content encoding, the usual transaction termination\n   rules apply.\n\
    \   content-coding: extends atom;\n   content-codings: extends list of content-coding;\n\
    \   Example:\n       Content-Encodings: (gzip)\n                             \
    \    Figure 8\n   The semantics of content-coding is defined in section 3.5 of\n\
    \   [RFC2616].\n"
- title: 3.2.8.  Profile Negotiation Example
  contents:
  - "3.2.8.  Profile Negotiation Example\n   Example:\n     P: NO ({\"54:http://www.iana.org/assignments/opes/ocp/http/response\"\
    \n        Aux-Parts: (request-header,request-body)\n        })\n        SG: 5\n\
    \        ;\n     S: NR {\"54:http://www.iana.org/assignments/opes/ocp/http/response\"\
    \n        Aux-Parts: (request-header)\n        Pause-At-Body: 30\n        Preservation-Interest-Body:\
    \ 0\n        Content-Encodings: (gzip)\n        }\n        SG: 5\n        ;\n\
    \                                 Figure 9\n   This example shows a negotiation\
    \ offer made by an OPES processor for\n   a service group (id 5) that has already\
    \ been created; the callout\n   server sends an adequate negotiation response.\n\
    \   The OPES processor offers one profile feature for HTTP response\n   messages.\
    \  Besides the standard message parts, the OPES processor is\n   able to add the\
    \ header and body of the original HTTP request as\n   auxiliary message parts.\n\
    \   The callout server requests the auxiliary request-header part, but is\n  \
    \ not interested in receiving the request-body part.\n   The OPES processor sends\
    \ at most the following message parts, in the\n   specified order, for all transactions\
    \ in service group 5: request-\n   header, response-header, response-body, response-trailer.\
    \  Note that\n   the request-body part is not included (because it is an auxiliary\n\
    \   part that was not explicitly requested).  Some of the response parts\n   may\
    \ not be sent if the original message lacks them.\n   The callout server indicates\
    \ through the Preservation-Interest-Body\n   parameter with size zero that it\
    \ will not send any DUY messages.  The\n   OPES processor may therefore preserve\
    \ no preservation for any\n   transaction of this profile.\n   By sending a Pause-At-Body\
    \ value of 30, the callout server requests a\n   data pause.  The OPES processor\
    \ sends a Paused My Data (DPM) message\n   immediately after sending at least\
    \ 30 OCTETs of the response-body\n   part.  Thereafter, the OPES processor waits\
    \ for a Want More Data\n   (DWM) message from the callout service.\n"
- title: 3.3.  Application Message Start Message
  contents:
  - "3.3.  Application Message Start Message\n   A new named parameter for Application\
    \ Message Start (AMS) messages is\n   introduced.\n   AM-EL: size\n          \
    \                       Figure 10\n   AM-EL value is the size of the request-body\
    \ part in the HTTP request\n   profile, and is the size of the response-body part\
    \ in the HTTP\n   response profile, before any transfer codings have been applied\
    \ (or\n   after all transfer codings have been removed).  This definition is\n\
    \   consistent with the HTTP entity length definition.\n   An OCP agent that knows\
    \ the exact length of the HTTP message entity\n   (see Section 7.2.2 \"Entity\
    \ Length\" in [RFC2616]) at the time it sends\n   the AMS message, SHOULD announce\
    \ this length using the AM-EL named\n   parameter of an AMS message.  If the exact\
    \ entity length is not\n   known, an OCP agent MUST NOT send an AM-EL parameter.\
    \  Relaying\n   correct entity length can have significant performance advantages\
    \ for\n   the recipient, and implementations are strongly encouraged to relay\n\
    \   known entity lengths.  Similarly, relaying incorrect entity length\n   can\
    \ have drastic correctness consequences for the recipient, and\n   implementations\
    \ are urged to exercise great care when relaying entity\n   length.\n   An OPES\
    \ processor receiving an AM-EL parameter SHOULD use the\n   parameter's value\
    \ in a Content-Length HTTP entity header when\n   constructing an HTTP message,\
    \ provided a Content-Length HTTP entity\n   header is allowed for the given application\
    \ message by HTTP (see\n   Section 3.8.1).\n"
- title: 3.4.  DUM Message
  contents:
  - "3.4.  DUM Message\n   A new named parameter for Data Use Mine (DUM) messages\
    \ is introduced.\n   AM-Part: am-part\n                                 Figure\
    \ 11\n   An OCP agent MUST send an AM-Part parameter with every DUM message\n\
    \   that is a part of an OCP transaction with an HTTP profile.  The AM-\n   Part\
    \ parameter value is a single am-part token.  As implied by the\n   syntax, a\
    \ DUM message can only contain data of a single application\n   message part.\
    \  One message part can be fragmented into any number of\n   DUM messages with\
    \ the same AM-Part parameter.\n   The following example shows three DUM messages\
    \ containing an abridged\n   HTTP response message.  The response-body part is\
    \ fragmented and sent\n   within two DUM messages.\n   Example:\n       P: DUM\
    \ 88 1 0\n          Kept: 0\n          AM-Part: response-header\n          64:HTTP/1.1\
    \ 200 OK\n          Content-Type: text/html\n          Content-Length: 51\n  \
    \        ;\n       P: DUM 88 1 64\n          Kept: 64\n          AM-Part: response-body\n\
    \          19:<html><body>This is\n          ;\n       P: DUM 88 1 83\n      \
    \    Kept: 83\n          AM-Part: response-body\n          32: a simple message.</body></html>\n\
    \          ;\n                                    Figure 12\n"
- title: 3.5.  Selective Adaptation
  contents:
  - "3.5.  Selective Adaptation\n   The HTTP profile for OCP applies to all HTTP messages.\
    \  That scope\n   includes HTTP messages such as 1xx (Informational) responses,\
    \ POST,\n   CONNECT, and OPTIONS requests, as well as responses with extension\n\
    \   status codes and requests with extension methods.  Unless\n   specifically\
    \ configured to do otherwise, an OPES processor MUST\n   forward all HTTP messages\
    \ for adaptation at callout servers.  OPES\n   bypass instructions, configured\
    \ HTTP message handling rules, and\n   OCP-negotiation with a callout server are\
    \ all examples of an\n   acceptable \"specific configuration\" that provides an\
    \ exception to\n   this rule.\n   While it may seem useless to attempt to adapt\
    \ \"control\" messages such\n   as a 100 (Continue) response, skipping such messages\
    \ by default may\n   lead to serious security flaws and interoperability problems.\
    \  For\n   example, sensitive company information might be relayed via a\n   carefully\
    \ crafted 100 Continue response; or a malicious CONNECT\n   request may not get\
    \ logged if OPES processor does not forward these\n   messages to a callout service\
    \ that is supposed to handle them.\n   By design, OPES processor implementation\
    \ cannot unilaterally decide\n   that an HTTP message is not worth adapting. \
    \ It needs a callout\n   server opinion, a configuration setting, or another external\n\
    \   information to make the decision.\n"
- title: 3.6.  Hop-by-hop Headers
  contents:
  - "3.6.  Hop-by-hop Headers\n   HTTP defines several hop-by-hop headers (e.g., Connection)\
    \ and allows\n   for extension headers to be specified as hop-by-hop ones (via\
    \ the\n   Connection header mechanism).  Depending on the environment and\n  \
    \ configuration, an OPES processor MAY forward hop-by-hop headers to\n   callout\
    \ servers and MAY use hop-by-hop headers returned by callout\n   servers to build\
    \ an HTTP message for the next application hop.\n   However, see Section 3.7 for\
    \ requirements specific to the Transfer-\n   Encoding header.\n   For example,\
    \ a logging or statistics collection service may want to\n   see hop-by-hop headers\
    \ sent by the previous application hop to the\n   OPES processor and/or hop-by-hop\
    \ headers sent by the OPES processor\n   to the next application hop.  Another\
    \ service may actually handle\n   HTTP logic of removing and adding hop-by-hop\
    \ headers.  Many services\n   will ignore hop-by-hop headers.  This specification\
    \ does not define a\n   mechanism for distinguishing these use cases.\n"
- title: 3.7.  Transfer Encodings
  contents:
  - "3.7.  Transfer Encodings\n   HTTP messages may use transfer encodings, a hop-by-hop\
    \ encoding\n   feature of HTTP.  Adaptations that use HTTP transfer encodings\
    \ have\n   to be explicitly negotiated.  This specification does not document\n\
    \   such negotiations.  In the absence of explicit transfer-encoding\n   negotiations,\
    \ an OCP agent MUST NOT send transfer-encoded application\n   message bodies.\n\
    \   Informally, the above rule means that the agent or its environment\n   have\
    \ to make sure that all transfer encodings are stripped from an\n   HTTP message\
    \ body before it enters OCP scope.  An agent MUST\n   terminate the OCP transaction\
    \ if it has to send an application\n   message body but cannot remove all transfer\
    \ encodings.  Violations of\n   these rules lead to interoperability problems.\n\
    \   If an OCP agent receives transfer-encoded application data in\n   violation\
    \ of the above requirement, the agent MAY terminate the\n   corresponding OCP\
    \ transaction.\n   An OPES processor removing transfer encodings MUST remove the\n\
    \   Transfer-Encoding header before sending the header part to the\n   callout\
    \ service.  A callout server receiving a Transfer-Encoding\n   header MAY assume\
    \ that original application data is still transfer-\n   encoded (and terminate\
    \ the transaction).  The OPES processor MUST\n   send a correct Transfer-Encoding\
    \ header to the next HTTP recipient,\n   independent of what header (if any) the\
    \ callout server returned.\n   Logging and wiretapping are the examples where\
    \ negotiating acceptable\n   transfer encodings may be worthwhile.  While a callout\
    \ server may not\n   be able to strip an encoding, it may still want to log the\
    \ entire\n   message \"as is\".  In most cases, however, the callout server would\n\
    \   not be able to meaningfully handle unknown transfer encodings.\n"
- title: 3.8.  HTTP Header Correctness
  contents:
  - "3.8.  HTTP Header Correctness\n   When communicating with HTTP applications,\
    \ OPES processors MUST\n   ensure correctness of all computable HTTP headers documented\
    \ in\n   specifications that the processors intend to be compliant with.  A\n\
    \   computable header is defined as a header whose value can be computed\n   based\
    \ on the message body alone.  For example, the correctness of\n   Content-Length\
    \ and Content-MD5 headers has to be ensured by\n   processors claiming compliance\
    \ with HTTP/1.1 ([RFC2616]).\n   Informally and by default, the OPES processor\
    \ has to validate and\n   eventually recalculate, add, or remove computable HTTP\
    \ headers in\n   order to build a compliant HTTP message from an adapted application\n\
    \   message returned by the callout server.  If a particular OPES\n   processor\
    \ trusts certain HTTP headers that a callout service sends,\n   it can use those\
    \ headers \"as is\".\n   An OPES processor MAY forward a partially adapted HTTP\
    \ message from a\n   callout server to the next callout server, without verifying\
    \ HTTP\n   header correctness.  Consequently, a callout service cannot assume\n\
    \   that the HTTP headers it receives are correct or final from an HTTP\n   point\
    \ of view.\n   The following subsections present guidelines for the recalculation\
    \ of\n   some HTTP headers.\n"
- title: 3.8.1.  Message Size Recalculation
  contents:
  - "3.8.1.  Message Size Recalculation\n   By default, an OCP agent MUST NOT trust\
    \ the Content-Length header\n   that is sent within an HTTP header message part.\
    \  The message length\n   could be modified by a callout service without adaptation\
    \ of the HTTP\n   message headers.\n   Before sending the HTTP message to the\
    \ HTTP peer, the OPES processor\n   has to ensure correctness of the message length\
    \ indication according\n   to section 4.4 of [RFC2616].\n   Besides ensuring HTTP\
    \ message correctness, good OPES processors set\n   up the message to optimize\
    \ performance, including minimizing delivery\n   latency.  Specifically, indicating\
    \ the end of a message by closing\n   the HTTP connection ought to be the last\
    \ resort:\n   o  If the callout server sends an AM-EL parameter with its AMS\n\
    \      message, the OPES processor SHOULD use this value to create a\n      Content-Length\
    \ header to be able to keep a persistent HTTP\n      connection.  Note that HTTP\
    \ rules prohibit a Content-Length header\n      to be used in transfer-encoded\
    \ messages.\n   o  If AM-EL parameter or equivalent entity length information\
    \ is not\n      available, and HTTP rules allow for chunked transfer encoding,\
    \ the\n      OPES processor SHOULD use chunked transfer encoding.  Note that\n\
    \      any Content-Length header has to be removed in this case.\n   o  If the\
    \ message size is not known a priori and chunked transfer\n      coding cannot\
    \ be used, but the OPES processor can wait for the OCP\n      transaction to finish\
    \ before forwarding the adapted HTTP message\n      on a persistent HTTP connection,\
    \ then the processor SHOULD compute\n      and add a Content-Length header.\n\
    \   o  Finally, if all optimizations are not applicable, the OPES\n      processor\
    \ SHOULD delete any Content-Length header and forward\n      adapted data immediately,\
    \ while indicating the message end by\n      closing the HTTP connection.\n"
- title: 3.8.2.  Content-MD5 Header
  contents:
  - "3.8.2.  Content-MD5 Header\n   By default, the OPES processor MUST assume that\
    \ the callout service\n   modifies the content in a way that the MD5 checksum\
    \ of the message\n   body becomes invalid.\n   According to section 14.15 of [RFC2616],\
    \ HTTP intermediaries must not\n   generate Content-MD5 headers.  A recalculation\
    \ is therefore possible\n   only if the OPES processor is considered authoritative\
    \ for the entity\n   being adapted.  An un-authoritative OPES processor MUST remove\
    \ the\n   Content-MD5 header unless it detects that the HTTP message was not\n\
    \   modified; in this case, it MAY leave the Content-MD5 header in the\n   message.\
    \  When such detection significantly increases message\n   latency, deleting the\
    \ Content-MD5 header may be a better option.\n"
- title: 3.9.  Examples
  contents:
  - "3.9.  Examples\n   This is a possible OCP message flow using an HTTP request\
    \ profile.\n   An end-user wants to access the home page of\n   www.restricted.example.com,\
    \ through the proxy, but access is denied\n   by a URL blocking service running\
    \ on the callout server used by the\n   proxy.\n   OCP messages from the OPES\
    \ processor are marked with \"P:\" and OCP\n   messages from the callout server\
    \ are marked with \"S:\".  The OCP\n   connection is not closed at the end but\
    \ kept open for the next OCP\n   transaction.\n   Example:\n    P: CS;\n    S:\
    \ CS;\n    P: SGC 11 ({\"31:ocp-test.example.com/url-filter\"});\n    P: NO ({\"\
    53:http://www.iana.org/assignments/opes/ocp/http/request\"})\n       SG: 11\n\
    \       ;\n    S: NR {\"53:http://www.iana.org/assignments/opes/ocp/http/request\"\
    }\n       SG: 11\n       ;\n    P: TS 55 11;\n    P: AMS 55\n       AM-EL: 0\n\
    \       ;\n    P: DUM 55 0\n       Kept: 0\n       AM-Part: request-header\n \
    \      235:GET http://www.restricted.example.com/ HTTP/1.1\n       Accept: */*\n\
    \       Accept-Language: de\n       Accept-Encoding: gzip, deflate\n       User-Agent:\
    \ Mozilla/4.0 (compatible; Windows NT 5.0)\n       Host: www.restricted.example.com\n\
    \       Proxy-Connection: Keep-Alive\n       ;\n    P: AME 55;\n    S: AMS 55;\n\
    \    S: DUM 55 0\n       AM-Part: response-header\n       76:HTTP/1.1 403 Forbidden\n\
    \       Content-Type: text/html\n       Proxy-Connection: close\n       ;\n  \
    \  S: DUM 55 0\n       AM-Part: response-body\n       67:<html><body>You are not\
    \ allowed to\n       access this page.</body></html>\n       ;\n    S: AME 55;\n\
    \    P: TE 55;\n    S: TE 55;\n                                 Figure 13\n  \
    \ The next example is a language translation of a small plain text file\n   that\
    \ gets transferred in an HTTP response.  In this example, OCP\n   agents negotiate\
    \ a profile for the whole OCP connection.  The OCP\n   connection remains open\
    \ in the end of the OCP transaction.  (Note\n   that NO and NR messages were rendered\
    \ with an extra new line to\n   satisfy RFC formatting requirements.)\n   Example:\n\
    \    P: CS;\n    S: CS;\n    P: NO\n       ({\"54:http://www.iana.org/assignments/opes/ocp/http/response\"\
    });\n    S: NR\n       {\"54:http://www.iana.org/assignments/opes/ocp/http/response\"\
    };\n    P: SGC 12 ({\"44:ocp-test.example.com/translate?from=EN&to=DE\"});\n \
    \   P: TS 89 12;\n    P: AMS 89\n       AM-EL: 86\n       ;\n    P: DUM 89 0\n\
    \       AM-Part: response-header\n       65:HTTP/1.1 200 OK\n       Content-Type:\
    \ text/plain\n       Content-Length: 86\n       ;\n    P: DUM 89 65\n       AM-Part:\
    \ response-body\n       86:Whether 'tis nobler in the mind to suffer\n       The\
    \ slings and arrows of outrageous fortune\n       ;\n    P: AME 89;\n    S: AMS\
    \ 89\n       AM-EL: 78\n       ;\n    P: TE 89;\n    S: DUM 89 0\n       AM-Part:\
    \ response-header\n       65:HTTP/1.1 200 OK\n       Content-Type: text/plain\n\
    \       Content-Length: 78\n       ;\n    S: DUM 89 63\n       AM-Part: response-body\n\
    \       80:Ob's edler im Gemuet, die Pfeil und Schleudern\n       des wuetenden\
    \ Geschicks erdulden\n       ;\n    S: AME 89;\n    S: TE 89;\n              \
    \                   Figure 14\n   The following example shows modification of\
    \ an HTML resource and\n   demonstrates data preservation optimization.  The callout\
    \ server uses\n   a DUY message to send back an unchanged response header part,\
    \ but\n   because it does not know the size of the altered HTML resource at the\n\
    \   time it sends the AMS message, the callout server omits the AM-EL\n   parameter;\
    \ the OPES processor is responsible for adjusting the\n   Content-Length header.\n\
    \   Example:\n    P: CS;\n    S: CS;\n    P: SGC 10 ({\"30:ocp-test.example.com/ad-filter\"\
    });\n    P: NO ({\"54:http://www.iana.org/assignments/opes/ocp/http/response\"\
    \n       Aux-Parts: (request-header,request-body)\n       },{\"45:http://www.iana.org/assignments/opes/ocp/MIME\"\
    })\n       SG: 10\n       ;\n    S: NR {\"54:http://www.iana.org/assignments/opes/ocp/http/response\"\
    \n       Aux-Parts: (request-header)\n       Content-Encodings: (gzip)\n     \
    \  }\n       SG: 10\n       ;\n    P: TS 88 10;\n    P: AMS 88\n       AM-EL:\
    \ 95\n       ;\n    P: DUM 88 0\n       AM-Part: request-header\n       65:GET\
    \ /opes/adsample.html HTTP/1.1\n       Host: www.martin-stecher.de\n       ;\n\
    \    P: DUM 88 65\n       Kept: 65 64\n       AM-Part: response-header\n     \
    \  64:HTTP/1.1 200 OK\n       Content-Type: text/html\n       Content-Length:\
    \ 95\n       ;\n    P: DUM 88 129\n       Kept: 65 90\n       AM-Part: response-body\n\
    \       26:<html>\n       <body>\n       This is my\n       ;\n    S: AMS 88;\n\
    \    P: DUM 88 155\n       Kept: 65 158\n       AM-Part: response-body\n     \
    \  68: new ad: <img src=\"my_ad.gif\"\n       width=88 height=31>\n       </body>\n\
    \       </html>\n       ;\n    S: DUY 88 65 64\n    S: DPI 88 129 2147483647;\n\
    \    P: AME 88;\n    S: DUM 88 0\n       AM-Part: response-body\n       52:<html>\n\
    \       <body>\n       This is my new ad:\n       </body>\n       </html>\n  \
    \     ;\n    S: DPI 88 129 0;\n    P: TE 88;\n    S: AME 88;\n    S: TE 88;\n\
    \                                 Figure 15\n"
- title: 4.  Tracing
  contents:
  - "4.  Tracing\n   [RFC3897] defines application-agnostic tracing facilities in\
    \ OPES.\n   Compliance with this specification requires compliance with\n   [RFC3897].\
    \  When adapting HTTP, trace entries are supplied using HTTP\n   message headers.\
    \  The following HTTP extension headers are defined to\n   carry trace entries.\
    \  Their definitions are given using BNF notation\n   and elements defined in\
    \ [RFC2616].\n        OPES-System = \"OPES-System\" \":\" #trace-entry\n     \
    \   OPES-Via    = \"OPES-Via\" \":\" #trace-entry\n        trace-entry = opes-agent-id\
    \ *( \";\" parameter )\n        opes-agent-id = absoluteURI\n                \
    \                   Figure 16\n   An OPES System MUST add its trace entry to the\
    \ OPES-System header.\n   Other OPES agents MUST use the OPES-Via header if they\
    \ add their\n   tracing entries.  All OPES agents MUST append their entries.\n\
    \   Informally, OPES-System is the only required OPES tracing header\n   while\
    \ OPES-Via provides optional tracing details; both headers\n   reflect the order\
    \ of trace entry additions.\n   If an OPES-Via header is used in the original\
    \ application message, an\n   OPES System MUST append its entry to the OPES-Via\
    \ header.  Otherwise,\n   an OPES System MAY append its entry to the OPES-Via\
    \ header.  If an\n   OPES System is using both headers, it MUST add identical\
    \ trace\n   entries except it MAY omit some or all trace-entry parameters from\n\
    \   the OPES-Via header.  Informally, the OPES System entries in the\n   OPES-Via\
    \ header are used to delimit and group OPES-Via entries from\n   different OPES\
    \ Systems without having a priory knowledge about OPES\n   System identifiers.\n\
    \   Note that all of these headers are defined using #list constructs\n   and,\
    \ hence, a valid HTTP message may contain multiple trace entries\n   per header.\
    \  OPES agents SHOULD use a single header-field rather than\n   using multiple\
    \ equally-named fields to record a long trace.  Using\n   multiple equally-named\
    \ extension header-fields is illegal from HTTP's\n   point of view and may not\
    \ work with some of the OPES-unaware HTTP\n   proxies.\n   For example, here is\
    \ an HTTP response message header after OPES\n   adaptations have been applied\
    \ by a single OPES processor executing 10\n   OPES services:\n   Example:\n  \
    \  HTTP/1.1 200 OK\n    Date: Thu, 18 Sep 2003 06:25:24 GMT\n    Last-Modified:\
    \ Wed, 17 Sep 2003 18:24:25 GMT\n    Content-type: application/octet-stream\n\
    \    OPES-System: http://www.cdn.example.com/opes?session=ac79a749f56\n    OPES-Via:\
    \ http://www.cdn.example.com/opes?session=ac79a749f56,\n        http://www.srvcs-4u.example.com/cat/?sid=123,\n\
    \        http://www.srvcs-4u.example.com/cat/?sid=124,\n        http://www.srvcs-4u.example.com/cat/?sid=125\
    \ ; mode=A\n                                 Figure 17\n   In the above example,\
    \ the OPES processor has not included its trace\n   entry or its trace entry was\
    \ replaced by an OPES system trace entry.\n   Only 3 out of 10 services are traced.\
    \  The remaining services did not\n   include their entries or their entries were\
    \ removed by OPES system or\n   processor.  The last traced service included a\
    \ \"mode\" parameter.\n   Various identifiers in trace entries will probably have\
    \ no meaning to\n   the recipient of the message, but may be decoded by OPES System\n\
    \   software.\n   OPES entities MAY place optional tracing entries in a message\
    \ trailer\n   (i.e., entity-headers at the end of a Chunked-Body of a chunked-\n\
    \   encoded message), provided trailer presence does not violate HTTP\n   protocol.\
    \  See [RFC3897] for a definition of what tracing entries are\n   optional.  OPES\
    \ entities MUST NOT place required tracing entries in a\n   message trailer.\n"
- title: 5.  Bypass
  contents:
  - "5.  Bypass\n   An HTTP extension header is introduced to allow for OPES system\n\
    \   bypass as defined in [RFC3897].\n    OPES-Bypass  = \"OPES-Bypass\" \":\"\
    \ ( \"*\" | 1#bypass-entry )\n    bypass-entry = opes-agent-id\n             \
    \                    Figure 18\n   This header can be added to HTTP requests to\
    \ request OPES system\n   bypass for the listed OPES agents.  The asterisk \"\
    *\" character is\n   used to represent all possible OPES agents.\n   See [RFC3897]\
    \ for what can be bypassed and for bypass requirements.\n"
- title: 6.  IAB Considerations
  contents:
  - "6.  IAB Considerations\n   OPES treatment of IETF Internet Architecture Board\
    \ (IAB)\n   considerations [RFC3238] are documented in \"OPES Treatment of IAB\n\
    \   Considerations\" [RFC3914].\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Application-independent security considerations\
    \ are documented in\n   application-agnostic OPES specifications.  HTTP profiles\
    \ do not\n   introduce any HTTP-specific security considerations.  However, that\n\
    \   does not imply that HTTP adaptations are immune from security\n   threats.\n\
    \   Specific threat examples include such adaptations as rewriting the\n   Request-URI\
    \ of an HTTP CONNECT request or removing an HTTP hop-by-hop\n   Upgrade header\
    \ before the HTTP proxy can act on it.  As with any\n   adaptation, the OPES agents\
    \ MUST NOT perform such actions without\n   HTTP client or server consent.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   The IANA registers request and response profile features\
    \ (Section\n   3.2) using the registration procedure outlined in the \"IANA\n\
    \   Considerations\" Section of OCP Core [RFC4037].  The corresponding\n   \"\
    uri\" parameters for the two features are:\n   o  http://www.iana.org/assignments/opes/ocp/http/request\n\
    \   o  http://www.iana.org/assignments/opes/ocp/http/response\n"
- title: 9.  Compliance
  contents:
  - "9.  Compliance\n   Compliance with OPES mechanisms is defined in corresponding\n\
    \   application-agnostic specifications.  HTTP profiles for these\n   mechanisms\
    \ use corresponding compliance definitions from these\n   specifications, as if\
    \ each profile were incorporated into the\n   application-agnostic specification\
    \ it profiles.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2616]  Fielding,  R., Gettys, J., Mogul,\
    \ J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee,\
    \ \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n\
    \   [RFC3897]  Barbir, A., \"Open Pluggable Edge Services (OPES) Entities\n  \
    \            and End Points Communication\", RFC 3897, September 2004.\n   [RFC4037]\
    \  Rousskov, A., \"Open Pluggable Edge Services (OPES) Callout\n             \
    \ Protocol (OCP) Core\", RFC 4037, March 2005.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC3835]  Barbir, A., Penno, R., Chen, R.,\
    \ Hofmann, M., and H.\n              Orman, \"An Architecture for Open Pluggable\
    \ Edge Services\n              (OPES)\", RFC 3835, August 2004.\n   [RFC3836]\
    \  Beck, A., Hofmann, M., Orman, H., Penno, R., and A.\n              Terzis,\
    \ \"Requirements for Open Pluggable Edge Services\n              (OPES) Callout\
    \ Protocols\", RFC 3836, August 2004.\n   [RFC3837]  Barbir, A., Batuner, O.,\
    \ Srinivas, B., Hofmann, M., and H.\n              Orman, \"Security Threats and\
    \ Risks for Open Pluggable Edge\n              Services (OPES)\", RFC 3837, August\
    \ 2004.\n   [RFC3752]  Barbir, A., Burger, E., Chen, R., McHenry, S., Orman, H.,\n\
    \              and R. Penno, \"Open Pluggable Edge Services (OPES) Use\n     \
    \         Cases and Deployment Scenarios\", RFC 3752, April 2004.\n   [RFC3838]\
    \  Barbir, A., Batuner, O., Beck, A., Chan, T., and H. Orman,\n              \"\
    Policy, Authorization, and Enforcement Requirements of\n              the Open\
    \ Pluggable Edge Services (OPES)\", RFC 3838, August\n              2004.\n  \
    \ [rules-p]  Beck, A. and A. Rousskov, \"P: Message Processing\n             \
    \ Language\", work in progress, October 2003.\n   [RFC3914]  Barbir, A. and A.\
    \ Rousskov, \"Open Pluggable Edge Services\n              (OPES) Treatment of\
    \ IAB Considerations\", RFC 3914, October\n              2004.\n   [RFC3238] \
    \ Floyd, S. and L. Daigle, \"IAB Architectural and Policy\n              Considerations\
    \ for Open Pluggable Edge Services\", RFC\n              3238, January 2002.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors gratefully acknowledge the contributions of\
    \ Robert\n   Collins (Syncretize) and Larry Masinter (Adobe).  Larry Masinter\n\
    \   provided an early review of this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alex Rousskov\n   The Measurement Factory\n   EMail: rousskov@measurement-factory.com\n\
    \   URI:   http://www.measurement-factory.com/\n   Martin Stecher\n   CyberGuard\
    \ Corporation\n   Vattmannstr. 3\n   Paderborn  33100\n   DE\n   EMail: martin.stecher@webwasher.com\n\
    \   URI:   http://www.webwasher.com/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
