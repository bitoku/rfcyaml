- title: __initial_text__
  contents:
  - "RFC 636                                    J. Burchfiel  - BBN-TENEX\n      \
    \                                     B. Cosell     - BBN-NET\nNIC 30490     \
    \                             R. Tomlinson  - BBN-TENEX\n                    \
    \                       D. Walden     - BBN-NET\n                            \
    \                                10 June 1974\n                   TIP/TENEX Reliability\
    \ Improvements\nDuring the past months we have felt strong pressure to improve\
    \ the\nreliability of TIP/TENEX network connection as improvement in the\nreliability\
    \ of users' connections between TENEXs and TIPs would have\nmajor impact on the\
    \ appearance of overall network reliability due to the\nlarge number and high\
    \ visibility of TENEXs and TIPs.  Despite the\nemphasis on TIP/TENEX interaction,\
    \ all work done applies equally well to\ninteractions between Hosts of any type.\
    \                                \nThe remainder of this RFC gives a sketch of\
    \ our plan for improving the\nreliability of connections bettween TIPs and TENEXs.\
    \  Major portions of\nthis plan have already been implemented (TIP version 322;\
    \ TENEX version\n1.32) and are now undergoing final test prior to release throughout\
    \ the\nnetwork.  Completion of the implementation of the plan is expected in\n\
    the next quarter.                                                      \nOur plan\
    \ for improving the reliability of TIP/TENEX connections is\nconcerned with obtaining\
    \ and maintaining TIP/TENEX connections,\ngracefully recovering from lost connections,\
    \ and providing clear\nmessages to the user whenever the state of his connection\
    \ changes.     \nWhen a TIP user attempts to open a connection to any Host, the\
    \ Host may\nbe down.  In this case it would be helpful to provide the user with\n\
    information about the extent of the Host's unavailability. To facilitate\nthis,\
    \ we modified the IMP program to accept and utilize information from\na Host about\
    \ when the Host will be back up and for what reason it is\ndown.  TENEX is to\
    \ be modified to supply such information before it goes\ndown, or through manual\
    \ means, after it has gone down.  When the TIP\nuser then attempts to connect\
    \ to the down TENEX, the IMP local to the\nTENEX returns the information about\
    \ why and for how long TENEX will be\ndown.  The TIP is to be modified to report\
    \ this sort of information to\nthe user; e.g., \"Host unavailable because of hardware\
    \ maintenance --\nexpected available Tuesday at 16:30 GMT\".                 \
    \             \nThe TIP's logger is presently not reentrant.  Thus, no single\
    \ TIP user\ncan be allowed to tie up the logger for too long at a time; and the\
    \ TIP\fNWG/RFC# 636                 JDB BPC RST DCW3 MLK 23-OCT-75 22:27  30490\n\
    TIP/TENEX Reliability Improvements\ntherefore enforces a timeout of arbitrary\
    \ length (about 60 seconds) on\nlogger use.  However, a heavily loaded Host cannot\
    \ be guaranteed always\nto respond within 60 seconds to a TIP login request, and\
    \ at present TIP\nusers sometimes cannot get connected to a heavily loaded TENEX.\
    \  To\ncorrect this problem, the TIP logger will be made reentrant and the\ntimeout\
    \ on logger use will be eliminated.                              \nOne notorious\
    \ soft spot in the Host/Host protocol which degrades the\nreliability of connections\
    \ is the Host/Host protocol incremental\nallocate mechanism.  Low frequency software\
    \ bugs, intermittant hardware\nbugs, etc., can lead to the incremental allocates\
    \ associated with a\nconnection getting out of synchronization.  When this happens\
    \ it usually\nappears to the user as if the connection just \"hung up\".  A slight\n\
    addiition to the Host/Host protocol to allow connection allocates to be\nresynchronized\
    \ has been designed and implemented for both the TIP and\nTENEX.             \
    \                                                    \nTENEX has a number of internal\
    \ consistency checks (called \"bughalts\")\nwhich occasionally cause TENEX to\
    \ halt.  Frequently, after diagnosis by\nsystem personnel, TENEX can be made to\
    \ proceed without loss from the\nviewpoint of local users.  A mechanism is being\
    \ provided which allows\nTENEX to proceed in this case from the point of view\
    \ of TIP users of\nTENEX.                                                    \
    \             \nThe appropriate mechanism entails the following:  TENEX will not\
    \ drop\nits ready line during a bughalt (from which TENEX can usually proceed\n\
    successfully), nor will it clear its NCP tables and abort all\nconnections.  Instead,\
    \ after a bughalt TENEX will:  discard the message\nit is currently receiving,\
    \ as the IMP has returned an Incomplete\nTransmission to the source for this message;\
    \ reinitialize the interface\nto the IMP; and resynchronize, on all connections\
    \ possible, Host/Host\nprotocol allocate inconsistencies due to lost messages,\
    \ RFNMs etc.  The\nlatter is done with the same mechanism described above.  This\
    \ procedure\nis not guaranteed to save all data -- a tiny bit may be lost -- but\
    \ this\nis of secondary importance to maintaining the connection over the TENEX\n\
    bughalt.                                                              \nThe TIP\
    \ user must be kept fully informed as TENEX halts and then\ncontinues.  Therefore,\
    \ the TIP has been modified to report \"Host not\nresponding -- connection suspended\"\
    \ when it senses that TENEX has halted\n(it does this by properly interpreting\
    \ messages returned by the\ndestination IMP).  When TENEX resumes service after\
    \ proceeding from a\nbughalt, the above procedure notifies the TIP that service\
    \ is restored,\nand the TIP has been modified to report \"Service resumed\" to\
    \ all users\nof that Host.                                                   \
    \      \nOn the other hand, the service interruption may not be proceedable and\n\
    \                                   1\fNWG/RFC# 636                 JDB BPC RST\
    \ DCW3 MLK 23-OCT-75 22:27  30490\nTIP/TENEX Reliability Improvements\nTENEX may\
    \ have to do a total system reload and restart.  In this case\nTENEX will clear\
    \ its NCP connection tables and send a Host/Host protocol\nreset command to all\
    \ other Hosts.  On receiving this reset command, the\nTIP will report \"Host reset\
    \ -- connection closed\" to all users of that\nHost with suspended connections.\
    \  The TIP user can then re-login to the\nTENEX or to some other Host.       \
    \                                   \nOf couse, the user may not have the patience\
    \ to wait for service to\nresume after a TENEX bughalt.  Instead, he may unilaterally\
    \ choose to\nconnect to some other Host, ignoring the previously suspended\nconnection.\
    \  If TENEX is then able to proceed, its NCP will still think\nits connection\
    \ to the TIP is good and suitable for use.  Thus, we have a\nconnection which\
    \ the TIP thinks is closed and TENEX thinks is open, a\nphenomenon known as the\
    \ \"half-closed connection\".  An automatic\nprocedure for cleanly completing\
    \ the closing of such a connection has\nbeen specified and implemented for the\
    \ TIP and TENEX.                 \nSince TENEX will maintain connections across\
    \ service interruptions, the\nTIP user will be required to take the security procedure\
    \ telling the TIP\nto \"forget\" his suspended connection before abandoning his\
    \ terminal.\nThe command @H 0 (for example) will guarantee that his connection\
    \ will\nnot be reestablished on resumpption of service.  Otherwise, his job\n\
    would be left at the mercy of anyone who acquires that terminal.      \nAn appendix\
    \ follows which describes the Host/Host protocol changes made.\nThese changes\
    \ are backward compatible (with the exception that Hosts\nwhich have not implemented\
    \ these changes will sometimes receive\nunrecognizable Host/Host protocol commands\
    \ which they presumably discard\nwithout suffering harm).  These protocol changes\
    \ are ad hoc in nature\nbut in light of their backward compatibility and potential\
    \ utility, ARPA\nokayed their addition to the TIP and TENEX NCPs without (we believe)\
    \ any\nimplication that other Hosts have to implement them (although we would\n\
    encourage their widespread implementation).                           \n     \
    \                              2\fNWG/RFC# 636                 JDB BPC RST DCW3\
    \ MLK 23-OCT-75 22:27  30490\nTIP/TENEX Reliability Improvements\n           \
    \  Appendix - Ad Hoc Change to Host-Host Protocol           \n   A.1  Introduction\
    \                                                 \n      The current Host-Host\
    \ protocol (NIC #8246) contains no provisions\n      for resynchronizing the status\
    \ information kept at the two ends of\n      each connection.  In particular,\
    \ if either host suffers a service\n      interruption, or if a control message\
    \ is lost or corrupted in an\n      interface or in the subnet, the status information\
    \ at the two ends\n      of the connection will be inconsistent.             \
    \          \n      Since the current protocol provides no way to correct this\n\
    \      condition, the NCPs at the two ends stay \"confused\" forever.  An\n  \
    \    occasional frustrating symptom of this effect is the \"lost\n      allocate\"\
    \ phenomenon, where the receiving NCP believes that it has\n      bit and message\
    \ allocations outstanding, while the sending NCP\n      believes that it does\
    \ not have any allocation.  As a result,\n      information flow over that connection\
    \ can never be restarted. \n      Use of the Host-Host RST (reset) command is\
    \ inappropriate here, as\n      it destroys all connections between the two hosts.\
    \  What is needed\n      is a way to resynchronize only the affected connection\
    \ without\n      disturbing any others.                                      \
    \  \n      A second troublesome symptom of inconsistency in status\n      information\
    \ is the \"half-closed\" connection:  after a service\n      interruption or network\
    \ partitioning, one NCP may believe that a\n      connection is still open, while\
    \ the other believes that the\n      connection is closed (does not exist).  When\
    \ such an inconsistency\n      is discovered, the \"open\" end of the connection\
    \ should be closed.\n   A.2  The RAR, RAS and RAP commands                   \
    \            \n      To achieve resynchronization of allocation, we add the following\n\
    \      three commands to the host-host protocol.                     \n      \
    \        8 bits   8 bits\n            -------------------\n            !     \
    \   !        !\n         16 !  RAR   !  link  !\n            !        !      \
    \  !\n            -------------------\n         Reset Allocation by Receiver\n\
    \              8 bits   8 bits\n            -------------------\n            !\
    \        !        !\n                                   3\fNWG/RFC# 636      \
    \           JDB BPC RST DCW3 MLK 23-OCT-75 22:27  30490\nTIP/TENEX Reliability\
    \ Improvements\n         17 !  RAS   !  link  !\n            !        !      \
    \  !\n            -------------------\n         Reset Allocation by Sender\n \
    \             8 bits   8 bits\n            -------------------\n            !\
    \        !        !\n         20 !  RAP   !  link  !\n            !        ! \
    \       !\n            -------------------\n         Reset Allocation Please\n\
    \      The RAS command is sent from the Host sending on \"link\" to the\n    \
    \  Host receiving on \"link\".  This command may be sent whenever the\n      sending\
    \ Host desires to resynch the status information associated\n      with the connection\
    \ (and doesn't have a message in transit through\n      the network).  Some circumstances\
    \ in which the sending Host may\n      choose to do this are:                \
    \                        \n         1)  After a timeout when there is traffic\
    \ to move but no\n         allocation (assumes that an allocation has been lost);\n\
    \         2)  When an inconsistent event occurs associated with that\n       \
    \  connection (e.g. an outstanding allocation in excess of 2^32\n         bits\
    \ or 2^16 messages);\n         3)  After the sending host has suffered an interruption\
    \ of\n         network service;\n         4)  In response to a RAP (see below).\n\
    \      The RAR command is sent from the Host receiving on \"link\" to the\n  \
    \    Host sending on \"link\" in response to an RAS.  It marks the\n      completion\
    \ of the connection resynchronization.  When the RAR is\n      returned the connection\
    \ is in the known state of having no\n      messages in transit in either direction\
    \ and the allocations are\n      zero.  The receiving Host may then start afresh\
    \ with a new\n      allocation and normal message transmission can proceed.  Since\
    \ the\n      RAR may be sent ONLY in response to an RAS, there are no races in\n\
    \      the resynchronization.  All of the initiative lies with the\n      sending\
    \ Host.                                                 \n      If the receiving\
    \ Host detects an anomalous situation, however,\n      there is no way to inform\
    \ the sending Host that a\n      resynchronization is desirable.  For this purpose,\
    \ the RAP command\n      is provided.  It constitutes a \"suggestion\" on the\
    \ part of the\n                                   4\fNWG/RFC# 636            \
    \     JDB BPC RST DCW3 MLK 23-OCT-75 22:27  30490\nTIP/TENEX Reliability Improvements\n\
    \      receiving Host that the sending Host resynchronize; the sending\n     \
    \ Host is free to honor it or not as it sees fit.  Since there is no\n      obligatory\
    \ response to a RAP, the receiving Host may send them as\n      frequently as\
    \ it chooses and no harm can occur.  For example, if a\n      message in excess\
    \ of the allocate arrives, the receiving Host\n      might send RAPs every few\
    \ seconds until the sending Host replies\n      with no fears of races if one\
    \ or more RAPs pass a RAS in the\n      network.                             \
    \                         \n   A.3  Resynchronization Procedure              \
    \                   \n      The resynchronization sequence below may be initiated\
    \ only by the\n      sender either for internally generated reasons or upon the\
    \ receipt\n      of a RAP.                                                   \
    \  \n         a)  Sender - decision to resynch\n            1)  Set state to \"\
    Wait-for-RAR\" (Defer transmission of\n            message.)\n            2) \
    \ Wait until no RFNM outstanding\n            3)  Send RAS\n            4)  Zero\
    \ allocation\n            5)  Ignore allocates until RAR received\n          \
    \  6)  Set state to \"Open\" (Resume normal message transmission\n           \
    \ subject to flow control.)\n         b)  Receiver - receipt of RAS\n        \
    \    1)  Send RAR\n            2)  Zero allocation\n            3)  Send a new\
    \ allocation\n      When the sender is in the \"Wait-for-RAR\" state it is not\
    \ permitted\n      to send new regular messages.  (Note that steps 4 and 5 will\n\
    \      insure this in the normal course of events.)  With the return of\n    \
    \  the RAR the pipeline contains no messages and no allocates, the\n      outstanding\
    \ allocation variables at both ends are forced into\n      agreement by setting\
    \ them both to zero.  The receiver will then\n      reconsider bit and message\
    \ allocation, and send an ALL command for\n      any allocation it cares to do.\
    \                                \n   A.4  The Problem of Half-closed Connections\
    \                      \n      The above procedures provide a way to resynchronize\
    \ a connection\n      after a brief lapse by a communications component, which\
    \ results\n      in lost messages or allocates for an open connection.       \
    \  \n                                   5\fNWG/RFC# 636                 JDB BPC\
    \ RST DCW3 MLK 23-OCT-75 22:27  30490\nTIP/TENEX Reliability Improvements\n  \
    \    A longer and more severe interruption of communication may result\n     \
    \ from a partitioning of the subnet or from a service interruption\n      on one\
    \ of the communicating hosts.  It is undesirable to tie up\n      resources indefinitely\
    \ under such circumstances, so the user is\n      provided with the option of\
    \ freeing up these resources (including\n      himself) by unilaterally dissolving\
    \ the connection.  Here\n      \"unilaterally\" means sending the CLS command\
    \ and closing the\n      connection without receiving the CLS acknowledgement.\
    \  Note that\n      this is legal only if the subnet indicates that the destination\
    \ is\n      dead.                                                         \n \
    \     When service is restored ater such an interruption, the status\n      information\
    \ at the two ends of the connection is out of\n      synchronization.  One end\
    \ believes that the connection is open,\n      and may proceed to use the connection.\
    \  The disconnecting end\n      believes that the connection is closed (does not\
    \ exist), and may\n      proceed to re-initialize communication by opening a new\
    \ connection\n      (RTS or STR command) using the same socket pair or same link.\
    \ \n      The resynchronization needed here is to properly close the open\n  \
    \    end of the connection when the inconsistency is detected.  We will\n    \
    \  accomplish this by specifying consistency checks and adding a new\n      pair\
    \ of commands.                                             \n   A.5  The NXS and\
    \ NXR Commands                                    \n      The \"missing CLS\"\
    \ situation described above can manifest itself in\n      two ways.  The first\
    \ way involves action taken by the NCP at the\n      \"open\" end of the connection.\
    \  It may continue to send regular\n      messages on the link of the half-closed\
    \ connection, or control\n      messages referencing its link.  The closed end\
    \ should respond with\n      an NXS if the message referred to a non-existent\
    \ transmit link\n      (e.g. was an ALL) or NXR if the message referred to a non-existent\n\
    \      receive link (e.g. a data message).  On receipt of such an NXS or\n   \
    \   NXR message, the NCP at the \"open\" end should close the connection\n   \
    \   by modifying its tables (without sending any CLS command) thereby\n      bringing\
    \ both ends into agreement.                            \n              8 bits\
    \   8 bits\n            -------------------\n            !        !        !\n\
    \         21 !  NXR   !  link  !\n            !        !        !\n          \
    \  -------------------\n         Non-existent Receive Link\n              8 bits\
    \   8 bits\n                                   6\fNWG/RFC# 636               \
    \  JDB BPC RST DCW3 MLK 23-OCT-75 22:27  30490\nTIP/TENEX Reliability Improvements\n\
    \            -------------------\n            !        !        !\n         22\
    \ !  NXS   !  link  !\n            !        !        !\n            -------------------\n\
    \         Non-existent Send Link\n   A.6  Consistency Checks                 \
    \                         \n      A second way this inconsistency can show up\
    \ involves actions\n      initiated by the NCP at the \"closed\" end.  It may\
    \ (thinking the\n      connection is closed) send an STR or RTS to reopen the\
    \ connection.\n      The NCP at the \"open\" end should detect the inconsistency\
    \ when it\n      receives such an RTS or STR command, because it specifies the\
    \ same\n      socket pair as an existing open connection, or, in the case of an\n\
    \      RTS, the same link.  In this case, the NCP at the \"open\" end\n      should\
    \ close the connection (without sending any CLS command) to\n      bring the two\
    \ ends into agreement before responding to the\n      RTS/STR.               \
    \                                       \n   A.7  Conclusion                 \
    \                                 \n      The scheme presented in Section A.2\
    \ to resynchronize allocation\n      has one very important property:  the data\
    \ stream is preserved\n      through the exchange.  Since no data is lost, it\
    \ is safe to\n      initiate resynchronization from either end at any time.  When\
    \ in\n      doubt, resynchronize.                                         \n \
    \     The consistency checks for RTS and STR, and the NXR and NXS\n      commands\
    \ provide the synchronization needed to complete the\n"
