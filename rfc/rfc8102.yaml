- contents:
  - '              Remote-LFA Node Protection and Manageability

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The loop-free alternates (LFAs) computed following the current\n
    \  remote-LFA specification guarantees only link protection.  The\n   resulting
    remote-LFA next hops (also called \"PQ-nodes\") may not\n   guarantee node protection
    for all destinations being protected by it.\n   This document describes an extension
    to the remote-loop-free-based IP\n   fast reroute mechanisms that specifies procedures
    for determining\n   whether or not a given PQ-node provides node protection for
    a\n   specific destination.  The document also shows how the same procedure\n
    \  can be utilized for the collection of complete characteristics for\n   alternate
    paths.  Knowledge about the characteristics of all\n   alternate paths is a precursor
    to applying the operator-defined\n   policy for eliminating paths not fitting
    the constraints.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8102.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   4\n     1.1.  Abbreviations . . . . . . . . . . . . . . . . . . .
    . . .   4\n     1.2.  Requirements Language . . . . . . . . . . . . . . . . .
    .   5\n   2.  Node Protection with Remote-LFA . . . . . . . . . . . . . . .   5\n
    \    2.1.  The Problem . . . . . . . . . . . . . . . . . . . . . . .   5\n     2.2.
    \ Additional Definitions  . . . . . . . . . . . . . . . . .   7\n       2.2.1.
    \ Link-Protecting Extended P-Space  . . . . . . . . . .   7\n       2.2.2.  Node-Protecting
    Extended P-Space  . . . . . . . . . .   7\n       2.2.3.  Q-Space . . . . . .
    . . . . . . . . . . . . . . . . .   8\n       2.2.4.  Link-Protecting PQ-Space
    \ . . . . . . . . . . . . . .   8\n       2.2.5.  Candidate Node-Protecting PQ-Space
    \ . . . . . . . . .   8\n       2.2.6.  Cost-Based Definitions  . . . . . . .
    . . . . . . . .   8\n         2.2.6.1.  Link-Protecting Extended P-Space  . .
    . . . . . .   9\n         2.2.6.2.  Node-Protecting Extended P-Space  . . . .
    . . . .   9\n         2.2.6.3.  Q-Space . . . . . . . . . . . . . . . . . . .
    . .  10\n     2.3.  Computing Node-Protecting R-LFA Path  . . . . . . . . . .
    \ 10\n       2.3.1.  Computing Candidate Node-Protecting PQ-Nodes for\n               Primary
    Next Hops . . . . . . . . . . . . . . . . . .  10\n       2.3.2.  Computing Node-Protecting
    Paths from PQ-Nodes to\n               Destinations  . . . . . . . . . . . . .
    . . . . . . .  12\n       2.3.3.  Computing Node-Protecting R-LFA Paths for\n
    \              Destinations with Multiple Primary Next-Hop Nodes . .  14\n       2.3.4.
    \ Limiting Extra Computational Overhead . . . . . . . .  18\n   3.  Manageability
    of Remote-LFA Alternate Paths . . . . . . . . .  19\n     3.1.  The Problem .
    . . . . . . . . . . . . . . . . . . . . . .  19\n     3.2.  The Solution  . .
    . . . . . . . . . . . . . . . . . . . .  20\n   4.  IANA Considerations . . .
    . . . . . . . . . . . . . . . . . .  20\n   5.  Security Considerations . . .
    . . . . . . . . . . . . . . . .  20\n   6.  References  . . . . . . . . . . .
    . . . . . . . . . . . . . .  21\n     6.1.  Normative References  . . . . . .
    . . . . . . . . . . . .  21\n     6.2.  Informative References  . . . . . . .
    . . . . . . . . . .  21\n   Acknowledgements  . . . . . . . . . . . . . . . .
    . . . . . . . .  21\n   Authors' Addresses  . . . . . . . . . . . . . . . . .
    . . . . . .  22\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Remote-LFA specification [RFC7490] provides loop-free
    alternates\n   that guarantee only link protection.  The resulting remote-LFA\n
    \  alternate next hops (also referred to as the \"PQ-nodes\") may not\n   provide
    node protection for all destinations covered by the same\n   remote-LFA alternate,
    in case of failure of the primary next-hop\n   node, and it does not provide a
    means to determine the same.\n   Also, the LFA Manageability document [RFC7916]
    requires a computing\n   router to find all possible alternate next hops (including
    all\n   possible remote-LFA), collect the complete set of path\n   characteristics
    for each alternate path, run an alternate-selection\n   policy (configured by
    the operator), and find the best alternate\n   path.  This will require that the
    remote-LFA implementation gathers\n   all the required path characteristics along
    each link on the entire\n   remote-LFA alternate path.\n   With current LFA [RFC5286]
    and remote-LFA implementations, the\n   forward SPF (and reverse SPF) is run with
    the computing router and\n   its immediate one-hop routers as the roots.  While
    that enables\n   computation of path attributes (e.g., Shared Risk Link Group
    (SRLG)\n   and Admin-groups) for the first alternate path segment from the\n   computing
    router to the PQ-node, there is no means for the computing\n   router to gather
    any path attributes for the path segment from the\n   PQ-node to the destination.
    \ Consequently, any policy-based selection\n   of alternate paths will consider
    only the path attributes from the\n   computing router up until the PQ-node.\n
    \  This document describes a procedure for determining node protection\n   with
    remote-LFA.  The same procedure is also extended for the\n   collection of a complete
    set of path attributes, enabling more\n   accurate policy-based selection for
    alternate paths obtained with\n   remote-LFA.\n"
  - contents:
    - "1.1.  Abbreviations\n   This document uses the following list of abbreviations:\n
      \     LFA: Loop-Free Alternates\n      RLFA or R-LFA: Remote Loop-Free Alternates\n
      \     ECMP: Equal-Cost Multiple Path\n      SPF: Shortest Path First graph computations\n
      \     NH: Next-Hop node\n"
    title: 1.1.  Abbreviations
  - contents:
    - "1.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      RFC 2119 [RFC2119].\n"
    title: 1.2.  Requirements Language
  title: 1.  Introduction
- contents:
  - "2.  Node Protection with Remote-LFA\n   Node protection is required to provide
    protection of traffic on a\n   given forwarding node against the failure of the
    first-hop node on\n   the primary forwarding path.  Such protection becomes more
    critical\n   in the absence of mechanisms like non-stop routing in the network.\n
    \  Certain operators refrain from deploying non-stop-routing in their\n   network,
    due to the required complex state synchronization between\n   redundant control
    plane hardwares it requires, and the significant\n   additional computation and
    performance overheads it comes along with.\n   In such cases, node protection
    is essential to guarantee\n   uninterrupted flow of traffic, even in the case
    of an entire\n   forwarding node going down.\n   The following sections discuss
    the node-protection problem in the\n   context of remote-LFA and propose a solution.\n"
  - contents:
    - "2.1.  The Problem\n   To better illustrate the problem and the solution proposed
      in this\n   document, the following topology diagram from the remote-LFA document\n
      \  [RFC7490] is being re-used with slight modification.\n                                             D1\n
      \                                           /\n                                       S-x-E\n
      \                                     /     \\\n                                     N
      \      R3--D2\n                                      \\     /\n                                      R1---R2\n
      \                          Figure 1: Topology 1\n   In the above topology, for
      all (non-ECMP) destinations reachable via\n   the S-E link, there is no standard
      LFA alternate.  As per the remote-\n   LFA [RFC7490] alternate specifications,
      node R2 being the only PQ-\n   node for the S-E link provides the next hop for
      all of the above\n   destinations.  Table 1 shows all possible primary and remote-LFA\n
      \  alternate paths for each destination.\n    +-------------+--------------+---------+-------------------------+\n
      \   | Destination | Primary Path | PQ-node | Remote-LFA Backup Path  |\n    +-------------+--------------+---------+-------------------------+\n
      \   | R3          | S->E->R3     | R2      | S=>N=>R1=>R2->R3        |\n    |
      E           | S->E         | R2      | S=>N=>R1=>R2->R3->E     |\n    | D1          |
      S->E->D1     | R2      | S=>N=>R1=>R2->R3->E->D1 |\n    | D2          | S->E->R3->D2
      | R2      | S=>N=>R1=>R2->R3->D2    |\n    +-------------+--------------+---------+-------------------------+\n
      \             Table 1: Remote-LFA Backup Paths via PQ-Node R2\n   A closer look
      at Table 1 shows that, while the PQ-node R2 provides\n   link protection for
      all the destinations, it does not provide node\n   protection for destinations
      E and D1.  In the event of the node-\n   failure on primary next hop E, the
      alternate path from the remote-LFA\n   next hop R2 to E and D1 also becomes
      unavailable.  So, for a remote-\n   LFA next hop to provide node protection
      for a given destination, the\n   shortest path from the given PQ-node to the
      given destination MUST\n   NOT traverse the primary next hop.\n   In another
      extension of the topology in Figure 1, let us consider an\n   additional link
      between N and E with the same cost as the other\n   links.\n                                             D1\n
      \                                           /\n                                       S-x-E\n
      \                                     /   / \\\n                                     N---+
      \  R3--D2\n                                      \\     /\n                                      R1---R2\n
      \                          Figure 2: Topology 2\n   In the above topology, the
      S-E link is no longer on any of the\n   shortest paths from N to R3, E, and
      D1.  Hence, R3, E, and D1 are\n   also included in both the extended P-space
      and the Q-space of E (with\n   respect to the S-E link).  Table 2 shows all
      possible primary and\n   R-LFA alternate paths via PQ-node R3 for each destination
      reachable\n   through the S-E link in the above topology.  The R-LFA alternate\n
      \  paths via PQ-node R2 remain the same as in Table 1.\n     +-------------+--------------+---------+------------------------+\n
      \    | Destination | Primary Path | PQ-node | Remote-LFA Backup Path |\n     +-------------+--------------+---------+------------------------+\n
      \    | R3          | S->E->R3     | R3      | S=>N=>E=>R3            |\n     |
      E           | S->E         | R3      | S=>N=>E=>R3->E         |\n     | D1          |
      S->E->D1     | R3      | S=>N=>E=>R3->E->D1     |\n     | D2          | S->E->R3->D2
      | R3      | S=>N=>E=>R3->D2        |\n     +-------------+--------------+---------+------------------------+\n
      \             Table 2: Remote-LFA Backup Paths via PQ-Node R3\n   Again, a closer
      look at Table 2 shows that, unlike Table 1 where the\n   single PQ-node R2 provided
      node protection for destinations R3 and\n   D2, if we choose R3 as the R-LFA
      next hop, it no longer provides node\n   protection for R3 and D2.  If S chooses
      R3 as the R-LFA next hop and\n   if there is a node-failure on primary next
      hop E, then one of the\n   parallel ECMP paths between N and R3 also becomes
      unavailable on the\n   alternate path from S to R-LFA next hop R3.  So, for
      a remote-LFA\n   next hop to provide node protection for a given destination,
      the\n   shortest paths from S to the chosen PQ-node MUST NOT traverse the\n
      \  primary next-hop node.\n"
    title: 2.1.  The Problem
  - contents:
    - "2.2.  Additional Definitions\n   This document adds and enhances the following
      definitions, extending\n   the ones mentioned in the Remote-LFA specification
      [RFC7490].\n"
    - contents:
      - "2.2.1.  Link-Protecting Extended P-Space\n   The Remote-LFA specification
        [RFC7490] already defines this.  The\n   link-protecting extended P-space
        for a link S-E being protected is\n   the set of routers that are reachable
        from one or more direct\n   neighbors of S, except primary node E, without
        traversing the S-E\n   link on any of the shortest paths from the direct neighbor
        to the\n   router.  This MUST exclude any direct neighbor for which there
        is at\n   least one ECMP path from the direct neighbor traversing the link\n
        \  (S-E) being protected.\n   For a cost-based definition for link-protecting
        extended P-space,\n   refer to Section 2.2.6.1.\n"
      title: 2.2.1.  Link-Protecting Extended P-Space
    - contents:
      - "2.2.2.  Node-Protecting Extended P-Space\n   The node-protecting extended
        P-space for a primary next-hop node E\n   being protected is the set of routers
        that are reachable from one or\n   more direct neighbors of S, except primary
        node E, without traversing\n   node E.  This MUST exclude any direct neighbors
        for which there is at\n   least one ECMP path from the direct neighbor traversing
        the node E\n   being protected.\n   For a cost-based definition for node-protecting
        extended P-space,\n   refer to Section 2.2.6.2.\n"
      title: 2.2.2.  Node-Protecting Extended P-Space
    - contents:
      - "2.2.3.  Q-Space\n   The Remote-LFA document [RFC7490] already defines this.
        \ The Q-space\n   for a link S-E being protected is the set of nodes that
        can reach\n   primary node E, without traversing the S-E link on any of the\n
        \  shortest paths from the node itself to primary next hop E.  This MUST\n
        \  exclude any node for which there is at least one ECMP path from the\n   node
        to the primary next hop E traversing the link (S-E) being\n   protected.\n
        \  For a cost-based definition for Q-Space, refer to Section 2.2.6.3.\n"
      title: 2.2.3.  Q-Space
    - contents:
      - "2.2.4.  Link-Protecting PQ-Space\n   A node Y is in a link-protecting PQ-space
        with respect to the link\n   (S-E) being protected if and only if Y is present
        in both link-\n   protecting extended P-space and the Q-space for the link
        being\n   protected.\n"
      title: 2.2.4.  Link-Protecting PQ-Space
    - contents:
      - "2.2.5.  Candidate Node-Protecting PQ-Space\n   A node Y is in a candidate
        node-protecting PQ-space with respect to\n   the node (E) being protected
        if and only if Y is present in both the\n   node-protecting extended P-space
        and the Q-space for the link being\n   protected.\n   Please note that a node
        Y being in a candidate node-protecting PQ-\n   space does not guarantee that
        the R-LFA alternate path via the same,\n   in entirety, is unaffected in the
        event of a node failure of primary\n   next-hop node E.  It only guarantees
        that the path segment from S to\n   PQ-node Y is unaffected by the same failure
        event.  The PQ-nodes in\n   the candidate node-protecting PQ-space may provide
        node protection\n   for only a subset of destinations that are reachable through
        the\n   corresponding primary link.\n"
      title: 2.2.5.  Candidate Node-Protecting PQ-Space
    - contents:
      - "2.2.6.  Cost-Based Definitions\n   This section provides cost-based definitions
        for some of the terms\n   introduced in Section 2.2 of this document.\n"
      - contents:
        - "2.2.6.1.  Link-Protecting Extended P-Space\n   Please refer to Section
          2.2.1 for a formal definition of link-\n   protecting extended P-space.\n
          \  A node Y is in a link-protecting extended P-space with respect to the\n
          \  link (S-E) being protected if and only if there exists at least one\n
          \  direct neighbor of S (Ni) other than primary next hop E that\n   satisfies
          the following condition.\n   D_opt(Ni,Y) < D_opt(Ni,S) + D_opt(S,Y)\n   Where,\n
          \    D_opt(A,B) : Distance on the most optimum path from A to B.\n            Ni
          \ : A direct neighbor of S other than primary\n                  next hop
          E.\n             Y  : The node being evaluated for link-protecting\n                  extended
          P-Space.\n              Figure 3: Link-Protecting Ext-P-Space Condition\n"
        title: 2.2.6.1.  Link-Protecting Extended P-Space
      - contents:
        - "2.2.6.2.  Node-Protecting Extended P-Space\n   Please refer to Section
          2.2.2 for a formal definition of node-\n   protecting extended P-space.\n
          \  A node Y is in a node-protecting extended P-space with respect to the\n
          \  node E being protected if and only if there exists at least one\n   direct
          neighbor of S (Ni) other than primary next hop E, that\n   satisfies the
          following condition.\n   D_opt(Ni,Y) < D_opt(Ni,E) + D_opt(E,Y)\n   Where,\n
          \    D_opt(A,B) : Distance on the most optimum path from A to B.\n             E
          \ : The primary next hop on the shortest path from S\n                  to
          destination.\n             Ni : A direct neighbor of S other than primary\n
          \                 next hop E.\n              Y : The node being evaluated
          for node-protecting\n                  extended P-Space.\n              Figure
          4: Node-Protecting Ext-P-Space Condition\n   Please note that a node Y satisfying
          the condition in Figure 4 above\n   only guarantees that the R-LFA alternate
          path segment from S via\n   direct neighbor Ni to the node Y is not affected
          in the event of a\n   node failure of E.  It does not yet guarantee that
          the path segment\n   from node Y to the destination is also unaffected by
          the same failure\n   event.\n"
        title: 2.2.6.2.  Node-Protecting Extended P-Space
      - contents:
        - "2.2.6.3.  Q-Space\n   Please refer to Section 2.2.3 for a formal definition
          of Q-Space.\n   A node Y is in Q-space with respect to the link (S-E) being
          protected\n   if and only if the following condition is satisfied:\n   D_opt(Y,E)
          < D_opt(S,E) + D_opt(Y,S)\n   Where,\n     D_opt(A,B) : Distance on the
          most optimum path from A to B.\n             E  : The primary next hop on
          the shortest path from S\n                  to destination.\n             Y
          \ : The node being evaluated for Q-Space.\n                        Figure
          5: Q-Space Condition\n"
        title: 2.2.6.3.  Q-Space
      title: 2.2.6.  Cost-Based Definitions
    title: 2.2.  Additional Definitions
  - contents:
    - "2.3.  Computing Node-Protecting R-LFA Path\n   The R-LFA alternate path through
      a given PQ-node to a given\n   destination is comprised of two path segments
      as follows:\n   1.  Path segment from the computing router to the PQ-node (Remote-LFA\n
      \      alternate next hop), and\n   2.  Path segment from the PQ-node to the
      destination being protected.\n   So, to ensure that an R-LFA alternate path
      for a given destination\n   provides node protection, we need to ensure that
      none of the above\n   path segments are affected in the event of failure of
      the primary\n   next-hop node.  Sections 2.3.1 and 2.3.2 show how this can be\n
      \  ensured.\n"
    - contents:
      - "2.3.1.  Computing Candidate Node-Protecting PQ-Nodes for Primary Next\n        Hops\n
        \  To choose a node-protecting R-LFA next hop for a destination R3,\n   router
        S needs to consider a PQ-node from the candidate node-\n   protecting PQ-space
        for the primary next hop E on the shortest path\n   from S to R3.  As mentioned
        in Section 2.2.2, to consider a PQ-node\n   as a candidate node-protecting
        PQ-node, there must be at least one\n   direct neighbor Ni of S, such that
        all shortest paths from Ni to the\n   PQ-node do not traverse primary next-hop
        node E.\n   Implementations SHOULD run the inequality in Section 2.2.6.2,\n
        \  Figure 4 for all direct neighbors, other than primary next-hop node\n   E,
        to determine whether a node Y is a candidate node-protecting PQ-\n   node.
        \ All of the metrics needed by this inequality would have been\n   already
        collected from the forward SPFs rooted at each of direct\n   neighbor S, computed
        as part of standard LFA [RFC5286]\n   implementation.  With reference to the
        topology in Figure 2, Table 3\n   shows how the above condition can be used
        to determine the candidate\n   node-protecting PQ-space for S-E link (primary
        next hop E).\n   +------------+----------+----------+----------+---------+-----------+\n
        \  | Candidate  |  Direct  |  D_opt   |  D_opt   |  D_opt  | Condition |\n
        \  |  PQ-node   | Nbr (Ni) |  (Ni,Y)  |  (Ni,E)  |  (E,Y)  |    Met    |\n
        \  |    (Y)     |          |          |          |         |           |\n
        \  +------------+----------+----------+----------+---------+-----------+\n
        \  |     R2     |    N     | 2 (N,R2) | 1 (N,E)  |    2    |    Yes    |\n
        \  |            |          |          |          |  (E,R2) |           |\n
        \  |     R3     |    N     | 2 (N,R3) | 1 (N,E)  |    1    |     No    |\n
        \  |            |          |          |          |  (E,R3) |           |\n
        \  +------------+----------+----------+----------+---------+-----------+\n
        \   Table 3: Node-Protection Evaluation for R-LFA Repair Tunnel to PQ-\n                                   Node\n
        \  As seen in the above Table 3, R3 does not meet the node-protecting\n   extended
        p-space inequality; so, while R2 is in candidate node-\n   protecting PQ-space,
        R3 is not.\n   Some SPF implementations may also produce a list of links and
        nodes\n   traversed on the shortest path(s) from a given root to others.  In\n
        \  such implementations, router S may have executed a forward SPF with\n   each
        of its direct neighbors as the SPF root, executed as part of the\n   standard
        LFA computations [RFC5286].  So, S may re-use the list of\n   links and nodes
        collected from the same SPF computations to decide\n   whether or not a node
        Y is a candidate node-protecting PQ-node.  A\n   node Y shall be considered
        as a node-protecting PQ-node if and only\n   if there is at least one direct
        neighbor of S, other than the primary\n   next hop E for which the primary
        next-hop node E does not exist on\n   the list of nodes traversed on any of
        the shortest paths from the\n   direct neighbor to the PQ-node.  Table 4 is
        an illustration of the\n   mechanism with the topology in Figure 2.\n   +-------------+---------------------------+------------+------------+\n
        \  | Candidate   | Repair Tunnel Path        | Link       | Node       |\n
        \  | PQ-node     | (Repairing router to PQ-  | Protection | Protection |\n
        \  |             | node)                     |            |            |\n
        \  +-------------+---------------------------+------------+------------+\n
        \  | R2          | S->N->R1->R2              | Yes        | Yes        |\n
        \  | R2          | S->E->R3->R2              | No         | No         |\n
        \  | R3          | S->N->E->R3               | Yes        | No         |\n
        \  +-------------+---------------------------+------------+------------+\n
        \         Table 4: Protection of Remote-LFA Tunnel to the PQ-Node\n   As seen
        in the above Table 4, while R2 is a candidate node-protecting\n   remote-LFA
        next hop for R3 and D2, it is not so for E and D1, since\n   the primary next
        hop E is on the shortest path from R2 to E and D1.\n"
      title: 2.3.1.  Computing Candidate Node-Protecting PQ-Nodes for Primary Next
    - contents:
      - "2.3.2.  Computing Node-Protecting Paths from PQ-Nodes to Destinations\n   Once
        a computing router finds all the candidate node-protecting PQ-\n   nodes for
        a given directly attached primary link, it shall follow the\n   procedure
        as proposed in this section to choose one or more node-\n   protecting R-LFA
        paths for destinations reachable through the same\n   primary link in the
        primary SPF graph.\n   To find a node-protecting R-LFA path for a given destination,
        the\n   computing router needs to pick a subset of PQ-nodes from the\n   candidate
        node-protecting PQ-space for the corresponding primary next\n   hop, such
        that all the path(s) from the PQ-node(s) to the given\n   destination remain
        unaffected in the event of a node failure of the\n   primary next-hop node.
        \ To determine whether a given PQ-node belongs\n   to such a subset of PQ-nodes,
        the computing router MUST ensure that\n   none of the primary next-hop nodes
        are found on any of the shortest\n   paths from the PQ-node to the given destination.\n
        \  This document proposes an additional forward SPF computation for each\n
        \  of the PQ-nodes to discover all shortest paths from the PQ-nodes to\n   the
        destination.  This will help determine whether or not a given\n   primary
        next-hop node is on the shortest paths from the PQ-node to\n   the given destination.
        \ To determine whether or not a given candidate\n   node-protecting PQ-node
        provides node-protecting alternate for a\n   given destination, all the shortest
        paths from the PQ-node to the\n   given destination have to be inspected to
        check if the primary next-\n   hop node is found on any of these shortest
        paths.  To compute all the\n   shortest paths from a candidate node-protecting
        PQ-node to one or\n   more destinations, the computing router MUST run the
        forward SPF on\n   the candidate node-protecting PQ-node.  Soon after running
        the\n   forward SPF, the computer router SHOULD run the inequality in\n   Figure
        6 below, once for each destination.  A PQ-node that does not\n   qualify the
        condition for a given destination does not guarantee node\n   protection for
        the path segment from the PQ-node to the specific\n   destination.\n   D_opt(Y,D)
        < D_opt(Y,E) + Distance_opt(E,D)\n   Where,\n     D_opt(A,B) : Distance on
        the most optimum path from A to B.\n             D  : The destination node.\n
        \            E  : The primary next hop on the shortest path from S\n                  to
        destination.\n             Y  : The node-protecting PQ-node being evaluated\n
        \     Figure 6: Node-Protecting Condition for PQ-Node to Destination\n   All
        of the above metric costs, except D_opt(Y, D), can be obtained\n   with forward
        and reverse SPFs with E (the primary next hop) as the\n   root, run as part
        of the regular LFA and remote-LFA implementation.\n   The Distance_opt(Y,
        D) metric can only be determined by the\n   additional forward SPF run with
        PQ-node Y as the root.  With\n   reference to the topology in Figure 2, Table
        5 shows that the above\n   condition can be used to determine node protection
        with a node-\n   protecting PQ-node R2.\n   +-------------+------------+---------+--------+---------+-----------+\n
        \  | Destination | Primary-NH |  D_opt  | D_opt  |  D_opt  | Condition |\n
        \  |     (D)     |    (E)     |  (Y, D) | (Y, E) |  (E, D) |    Met    |\n
        \  +-------------+------------+---------+--------+---------+-----------+\n
        \  |      R3     |     E      |    1    |   2    |    1    |    Yes    |\n
        \  |             |            | (R2,R3) | (R2,E) |  (E,R3) |           |\n
        \  |      E      |     E      |    2    |   2    | 0 (E,E) |     No    |\n
        \  |             |            |  (R2,E) | (R2,E) |         |           |\n
        \  |      D1     |     E      |    3    |   2    |    1    |     No    |\n
        \  |             |            | (R2,D1) | (R2,E) |  (E,D1) |           |\n
        \  |      D2     |     E      |    2    |   2    |    1    |    Yes    |\n
        \  |             |            | (R2,D2) | (R2,E) |  (E,D2) |           |\n
        \  +-------------+------------+---------+--------+---------+-----------+\n
        \   Table 5: Node-Protection Evaluation for R-LFA Path Segment between\n                          PQ-Node
        and Destination\n   As seen in the example above, R2 does not meet the node-protecting\n
        \  inequality for destination E and D1.  And so, once again, while R2 is\n
        \  a node-protecting remote-LFA next hop for R3 and D2, it is not so for\n
        \  E and D1.\n   In SPF implementations that also produce a list of links
        and nodes\n   traversed on the shortest path(s) from a given root to others,
        the\n   inequality in Figure 6 above need not be evaluated.  Instead, to\n
        \  determine whether or not a PQ-node provides node protection for a\n   given
        destination, the list of nodes computed from forward SPF that\n   run on the
        PQ-node for the given destination SHOULD be inspected.  In\n   case the list
        contains the primary next-hop node, the PQ-node does\n   not provide node
        protection.  Else, the PQ-node guarantees the node-\n   protecting alternate
        for the given destination.  Below is an\n   illustration of the mechanism
        with candidate node-protecting PQ-node\n   R2 in the topology in Figure 2.\n
        \  +-------------+---------------------------+------------+------------+\n
        \  | Destination | Shortest Path (Repairing  | Link       | Node       |\n
        \  |             | router to PQ-node)        | Protection | Protection |\n
        \  +-------------+---------------------------+------------+------------+\n
        \  | R3          | R2->R3                    | Yes        | Yes        |\n
        \  | E           | R2->R3->E                 | Yes        | No         |\n
        \  | D1          | R2->R3->E->D1             | Yes        | No         |\n
        \  | D2          | R2->R3->D2                | Yes        | Yes        |\n
        \  +-------------+---------------------------+------------+------------+\n
        \       Table 6: Protection of Remote-LFA Path between PQ-node and\n                                Destination\n
        \  As seen in the above example, while R2 is a candidate node-protecting\n
        \  R-LFA next hop for R3 and D2, it is not so for E and D1, since the\n   primary
        next hop E is on the shortest path from R2 to E and D1.\n   The procedure
        described in this document helps no more than to\n   determine whether or
        not a given remote-LFA alternate provides node\n   protection for a given
        destination.  It does not find out any new\n   remote-LFA alternate next hops,
        outside the ones already computed by\n   the standard remote-LFA procedure.
        \ However, in the case of\n   availability of more than one PQ-node (remote-LFA
        alternates) for a\n   destination where node protection is required for the
        given primary\n   next hop, this procedure will eliminate the PQ-nodes that
        do not\n   provide node protection and choose only the ones that do.\n"
      title: 2.3.2.  Computing Node-Protecting Paths from PQ-Nodes to Destinations
    - contents:
      - "2.3.3.  Computing Node-Protecting R-LFA Paths for Destinations with\n        Multiple
        Primary Next-Hop Nodes\n   In certain scenarios, when one or more destinations
        may be reachable\n   via multiple ECMP (equal-cost-multi-path) next-hop nodes
        and only\n   link protection is required, there is no need to compute any\n
        \  alternate paths for such destinations.  In the event of failure of\n   one
        of the next-hop links, the remaining primary next hops shall\n   always provide
        link protection.  However, if node protection is\n   required, the rest of
        the primary next hops may not guarantee node\n   protection.  Figure 7 below
        shows one such example topology.\n                                    D1\n
        \                             2    /\n                          S---x---E1\n
        \                        / \\     / \\\n                        /   x   /
        \  \\\n                       /     \\ /     \\\n                      N-------E2
        \     R3--D2\n                       \\  2          /\n                        \\
        \          /\n                         \\         /\n                         R1-------R2\n
        \                             2\n   Primary Next hops:\n     Destination D1
        = [{ S-E1, E1}, {S-E2, E2}]\n     Destination D2 = [{ S-E1, E1}, {S-E2, E2}]\n
        \         Figure 7: Topology with Multiple ECMP Primary Next Hops\n   In the
        above example topology, costs of all links are 1, except the\n   following
        links:\n      Link: S-E1, Cost: 2\n      Link: N-E2: Cost: 2\n      Link:
        R1-R2: Cost: 2\n   In the above topology, on computing router S, destinations
        D1 and D2\n   are reachable via two ECMP next-hop nodes E1 and E2.  However,
        the\n   primary paths via next-hop node E2 also traverse via the next-hop\n
        \  node E1.  So, in the event of node failure of next-hop node E1, both\n
        \  primary paths (via E1 and E2) become unavailable.  Hence, if node\n   protection
        is desired for destinations D1 and D2, alternate paths\n   that do not traverse
        any of the primary next-hop nodes E1 and E2 need\n   to be computed.  In the
        above topology, the only alternate neighbor N\n   does not provide such an
        LFA alternate path.  Hence, one or more\n   R-LFA node-protecting alternate
        paths for destinations D1 and D2,\n   needs to be computed.\n   In the above
        topology, the link-protecting PQ-nodes are as follows:\n      Primary Next
        Hop: E1, Link-Protecting PQ-Node: { R2 }\n      Primary Next Hop: E2, Link-Protecting
        PQ-Node: { R2 }\n   To find one (or more) node-protecting R-LFA paths for
        destinations D1\n   and D2, one (or more) node-protecting PQ-node(s) need
        to be\n   determined first.  Inequalities specified in Sections 2.2.6.2 and\n
        \  2.2.6.3 can be evaluated to compute the node-protecting PQ-space for\n
        \  each of the next-hop nodes E1 and E2, as shown in Table 7 below.  To\n
        \  select a PQ-node as a node-protecting PQ-node for a destination with\n
        \  multiple primary next-hop nodes, the PQ-node MUST satisfy the\n   inequality
        for all primary next-hop nodes.  Any PQ-node that is NOT a\n   node-protecting
        PQ-node for all the primary next-hop nodes MUST NOT\n   be chosen as the node-protecting
        PQ-node for the destination.\n   +--------+----------+-------+--------+--------+---------+-----------+\n
        \  | Primary| Candidate| Direct| D_opt  | D_opt  |  D_opt  | Condition |\n
        \  |  Next  |   PQ-    |  Nbr  | (Ni,Y) | (Ni,E) |  (E,Y)  |    Met    |\n
        \  |  Hop   | node (Y) |  (Ni) |        |        |         |           |\n
        \  |  (E)   |          |       |        |        |         |           |\n
        \  +--------+----------+-------+--------+--------+---------+-----------+\n
        \  |   E1   |    R2    |   N   |   3    |   3    |    2    |    Yes    |\n
        \  |        |          |       | (N,R2) | (N,E1) | (E1,R2) |           |\n
        \  |   E2   |    R2    |   N   |   3    |   2    |    3    |    Yes    |\n
        \  |        |          |       | (N,R2) | (N,E2) | (E2,R2) |           |\n
        \  +--------+----------+-------+--------+--------+---------+-----------+\n
        \    Table 7: Computing Node-Protected PQ-Nodes for Next Hop E1 and E2\n   In
        SPF implementations that also produce a list of links and nodes\n   traversed
        on the shortest path(s) from a given root to others, the\n   tunnel-repair
        paths from the computing router to candidate PQ-node\n   can be examined to
        ensure that none of the primary next-hop nodes are\n   traversed.  PQ-nodes
        that provide one or more Tunnel-repair paths\n   that do not traverse any
        of the primary next-hop nodes are to be\n   considered as node-protecting
        PQ-nodes.  Table 8 below shows the\n   possible tunnel-repair paths to PQ-node
        R2.\n   +--------------+------------+-------------------+-------------------+\n
        \  |  Primary-NH  |  PQ-Node   |   Tunnel-Repair   |    Exclude All    |\n
        \  |     (E)      |    (Y)     |       Paths       |     Primary-NH    |\n
        \  +--------------+------------+-------------------+-------------------+\n
        \  |    E1, E2    |     R2     |  S==>N==>R1==>R2  |        Yes        |\n
        \  +--------------+------------+-------------------+-------------------+\n
        \               Table 8: Tunnel-Repair Paths to PQ-Node R2\n   From Tables
        7 and 8 in the example above, R2 is a node-protecting PQ-\n   node for both
        primary next hops E1 and E2 and should be chosen as the\n   node-protecting
        PQ-node for destinations D1 and D2 that are both\n   reachable via the primary
        next-hop nodes E1 and E2.\n   Next, to find a node-protecting R-LFA path from
        a node-protecting PQ-\n   node to destinations D1 and D2, inequalities specified
        in Figure 6\n   should be evaluated to ensure that R2 provides a node-protecting\n
        \  R-LFA path for each of these destinations, as shown below in Table 9.\n
        \  For an R-LFA path to qualify as a node-protecting R-LFA path for a\n   destination
        with multiple ECMP primary next-hop nodes, the R-LFA path\n   from the PQ-node
        to the destination MUST satisfy the inequality for\n   all primary next-hop
        nodes.\n   +----------+----------+-------+--------+--------+--------+----------+\n
        \  | Destinat | Primary- |  PQ-  | D_opt  | D_opt  | D_opt  | Condition|\n
        \  | ion (D)  |  NH (E)  |  Node | (Y, D) | (Y, E) | (E, D) |   Met    |\n
        \  |          |          |  (Y)  |        |        |        |          |\n
        \  +----------+----------+-------+--------+--------+--------+----------+\n
        \  |    D1    |    E1    |   R2  | 3 (R2, | 2 (R2, | 1 (E1, |    No    |\n
        \  |          |          |       |  D1)   |  E1)   |  D1)   |          |\n
        \  |    D1    |    E2    |   R2  | 3 (R2, | 3 (R2, | 2 (E2, |   Yes    |\n
        \  |          |          |       |  D1)   |  E2)   |  D1)   |          |\n
        \  |    D2    |    E1    |   R2  | 2 (R2, | 2 (R2, | 2 (E1, |   Yes    |\n
        \  |          |          |       |  D2)   |  E1)   |  D2)   |          |\n
        \  |    D2    |    E2    |   R2  | 2 (R2, | 2 (R2, | 3 (E2, |   Yes    |\n
        \  |          |          |       |  D2)   |  E2)   |  D2)   |          |\n
        \  +----------+----------+-------+--------+--------+--------+----------+\n
        \             Table 9: Finding Node-Protecting R-LFA Path for\n                          Destinations
        D1 and D2\n   In SPF implementations that also produce a list of links and
        nodes\n   traversed on the shortest path(s) from a given root to others, the\n
        \  R-LFA paths via a node-protecting PQ-node to the final destination\n   can
        be examined to ensure that none of the primary next-hop nodes are\n   traversed.
        \ One or more R-LFA paths that do not traverse any of the\n   primary next-hop
        nodes guarantees node protection in the event of\n   failure of any of the
        primary next-hop nodes.  Table 10 shows the\n   possible R-LFA-paths for destinations
        D1 and D2 via the node-\n   protecting PQ-node R2.\n   +-------------+------------+---------+-----------------+------------+\n
        \  | Destination | Primary-NH | PQ-Node |   R-LFA Paths   |  Exclude   |\n
        \  |     (D)     |    (E)     |   (Y)   |                 |    All     |\n
        \  |             |            |         |                 | Primary-NH |\n
        \  +-------------+------------+---------+-----------------+------------+\n
        \  |      D1     |   E1, E2   |    R2   | S==>N==>R1==>R2 |     No     |\n
        \  |             |            |         | -->R3-->E1-->D1 |            |\n
        \  |             |            |         |                 |            |\n
        \  |      D2     |   E1, E2   |    R2   | S==>N==>R1==>R2 |    Yes     |\n
        \  |             |            |         |    -->R3-->D2   |            |\n
        \  +-------------+------------+---------+-----------------+------------+\n
        \            Table 10: R-LFA Paths for Destinations D1 and D2\n   From Tables
        9 and 10 in the example above, the R-LFA path from R2\n   does not meet the
        node-protecting inequality for destination D1,\n   while it does meet the
        same inequality for destination D2.  So, while\n   R2 provides a node-protecting
        R-LFA alternate for D2, it fails to\n   provide node protection for destination
        D1.  Finally, while it is\n   possible to get a node-protecting R-LFA path
        for D2, no such node-\n   protecting R-LFA path can be found for D1.\n"
      title: 2.3.3.  Computing Node-Protecting R-LFA Paths for Destinations with
    - contents:
      - "2.3.4.  Limiting Extra Computational Overhead\n   In addition to the extra
        reverse SPF computations suggested by the\n   Remote-LFA document [RFC7490]
        (one reverse SPF for each of the\n   directly connected neighbors), this document
        proposes a forward SPF\n   computation for each PQ-node discovered in the
        network.  Since the\n   average number of PQ-nodes found in any network is
        considerably more\n   than the number of direct neighbors of the computing
        router, the\n   proposal of running one forward SPF per PQ-node may add considerably\n
        \  to the overall SPF computation time.\n   To limit the computational overhead
        of the approach proposed, this\n   document specifies that implementations
        MUST choose a subset from the\n   entire set of PQ-nodes computed in the network,
        with a finite limit\n   on the number of PQ-nodes in the subset.  Implementations
        MUST choose\n   a default value for this limit and may provide the user with
        a\n   configuration knob to override the default limit.  This document\n   suggests
        16 as a default value for this limit.  Implementations MUST\n   also evaluate
        some default preference criteria while considering a\n   PQ-node in this subset.
        \ The exact default preference criteria to be\n   used is outside the scope
        of this document and is a matter of\n   implementation.  Finally, implementations
        MAY also allow the user to\n   override the default preference criteria, by
        providing a policy\n   configuration for the same.\n   This document proposes
        that implementations SHOULD use a default\n   preference criteria for PQ-node
        selection that will put a score on\n   each PQ-node, proportional to the number
        of primary interfaces for\n   which it provides coverage, its distance from
        the computing router,\n   and its router-id (or system-id in case of IS-IS).
        \ PQ-nodes that\n   cover more primary interfaces SHOULD be preferred over
        PQ-nodes that\n   cover fewer primary interfaces.  When two or more PQ-nodes
        cover the\n   same number of primary interfaces, PQ-nodes that are closer
        (based on\n   metric) to the computing router SHOULD be preferred over PQ-nodes\n
        \  farther away from it.  For PQ-nodes that cover the same number of\n   primary
        interfaces and are the same distance from the computing\n   router, the PQ-node
        with smaller router-id (or system-id in case of\n   IS-IS) SHOULD be preferred.\n
        \  Once a subset of PQ-nodes is found, a computing router shall run a\n   forward
        SPF on each of the PQ-nodes in the subset to continue with\n   procedures
        proposed in Section 2.3.2.\n"
      title: 2.3.4.  Limiting Extra Computational Overhead
    title: 2.3.  Computing Node-Protecting R-LFA Path
  title: 2.  Node Protection with Remote-LFA
- contents:
  - '3.  Manageability of Remote-LFA Alternate Paths

    '
  - contents:
    - "3.1.  The Problem\n   With the regular remote-LFA [RFC7490] functionality,
      the computing\n   router may compute more than one PQ-node as usable remote-LFA\n
      \  alternate next hops.  Additionally, [RFC7916] specifies an LFA (and a\n   remote-LFA)
      manageability framework, in which an alternate selection\n   policy may be configured
      to let the network operator choose one of\n   them as the most appropriate remote-LFA
      alternates.  For such a\n   policy-based alternate selection to run, the computing
      router needs\n   to collect all the relevant path characteristics (as specified
      in\n   Section 6.2.4 of [RFC7916]) for each of the alternate paths (one\n   through
      each of the PQ-nodes).  As mentioned before in Section 2.3,\n   the R-LFA alternate
      path through a given PQ-node to a given\n   destination is comprised of two
      path segments.  Section 6.2.4 of\n   [RFC7916] specifies that any kind of alternate
      selection policy must\n   consider path characteristics for both path segments
      while evaluating\n   one or more RLFA alternate paths.\n   The first path segment
      (i.e., from the computing router to the PQ-\n   node) can be calculated from
      the regular forward SPF done as part of\n   standard and remote LFA computations.
      \ However, without the mechanism\n   proposed in Section 2.3.2 of this document,
      there is no way to\n   determine the path characteristics for the second path
      segment (i.e.,\n   from the PQ-node to the destination).  In the absence of
      the path\n   characteristics for the second path segment, two remote-LFA alternate\n
      \  paths may be equally preferred based on the first path segment\n   characteristics
      only, although the second path segment attributes may\n   be different.\n"
    title: 3.1.  The Problem
  - contents:
    - "3.2.  The Solution\n   The additional forward SPF computation proposed in Section
      2.3.2\n   shall also collect links, nodes, and path characteristics along the\n
      \  second path segment.  This shall enable the collection of complete\n   path
      characteristics for a given remote-LFA alternate path to a given\n   destination.
      \ The complete alternate path characteristics shall then\n   facilitate more
      accurate alternate path selection while running the\n   alternate selection
      policy.\n   As already specified in Section 2.3.4, to limit the computational\n
      \  overhead of the proposed approach, forward SPF computations must be\n   run
      on a selected subset from the entire set of PQ-nodes computed in\n   the network,
      with a finite limit on the number of PQ-nodes in the\n   subset.  The detailed
      suggestion on how to select this subset is\n   specified in the same section.
      \ While this limits the number of\n   possible alternate paths provided to the
      alternate-selection policy,\n   this is needed to keep the computational complexity
      within affordable\n   limits.  However, if the alternate-selection policy is
      very\n   restrictive, this may leave few destinations in the entire topology\n
      \  without protection.  Yet this limitation provides a necessary\n   tradeoff
      between extensive coverage and immense computational\n   overhead.\n   The mechanism
      proposed in this section does not modify or invalidate\n   any part of [RFC7916].
      \ This document specifies a mechanism to meet\n   the requirements specified
      in Section 6.2.5.4 of [RFC7916].\n"
    title: 3.2.  The Solution
  title: 3.  Manageability of Remote-LFA Alternate Paths
- contents:
  - "4.  IANA Considerations\n   This document does not require any IANA actions.\n"
  title: 4.  IANA Considerations
- contents:
  - "5.  Security Considerations\n   This document does not introduce any change in
    any of the protocol\n   specifications.  It simply proposes to run an extra SPF
    rooted on\n   each PQ-node discovered in the whole network.\n"
  title: 5.  Security Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5286]  Atlas, A., Ed. and A. Zinin, Ed., \"Basic Specification for\n
      \             IP Fast Reroute: Loop-Free Alternates\", RFC 5286,\n              DOI
      10.17487/RFC5286, September 2008,\n              <http://www.rfc-editor.org/info/rfc5286>.\n
      \  [RFC7490]  Bryant, S., Filsfils, C., Previdi, S., Shand, M., and N.\n              So,
      \"Remote Loop-Free Alternate (LFA) Fast Reroute (FRR)\",\n              RFC
      7490, DOI 10.17487/RFC7490, April 2015,\n              <http://www.rfc-editor.org/info/rfc7490>.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [RFC7916]  Litkowski, S., Ed., Decraene, B.,
      Filsfils, C., Raza, K.,\n              Horneffer, M., and P. Sarkar, \"Operational
      Management of\n              Loop-Free Alternates\", RFC 7916, DOI 10.17487/RFC7916,\n
      \             July 2016, <http://www.rfc-editor.org/info/rfc7916>.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Acknowledgements\n   Many thanks to Bruno Decraene for providing his useful comments.
    \ We\n   would also like to thank Uma Chunduri for reviewing this document and\n
    \  providing valuable feedback.  Also, many thanks to Harish Raghuveer\n   for
    his review and comments on the initial draft versions of this\n   document.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Pushpasis Sarkar (editor)\n   Arrcus, Inc.\n   Email:
    pushpasis.ietf@gmail.com\n   Shraddha Hegde\n   Juniper Networks, Inc.\n   Electra,
    Exora Business Park\n   Bangalore, KA  560103\n   India\n   Email: shraddha@juniper.net\n
    \  Chris Bowers\n   Juniper Networks, Inc.\n   1194 N. Mathilda Ave.\n   Sunnyvale,
    CA  94089\n   United States of America\n   Email: cbowers@juniper.net\n   Hannes
    Gredler\n   RtBrick, Inc.\n   Email: hannes@rtbrick.com\n   Stephane Litkowski\n
    \  Orange\n   Email: stephane.litkowski@orange.com\n"
  title: Authors' Addresses
