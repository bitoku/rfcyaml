- contents:
  - '     Micro-loop Prevention by Introducing a Local Convergence Delay

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes a mechanism for link-state routing protocols\n
    \  that prevents local transient forwarding loops in case of link\n   failure.
    \ This mechanism proposes a two-step convergence by\n   introducing a delay between
    the convergence of the node adjacent to\n   the topology change and the network-wide
    convergence.\n   Because this mechanism delays the IGP convergence, it may only
    be\n   used for planned maintenance or when Fast Reroute (FRR) protects the\n
    \  traffic during the time between the link failure and the IGP\n   convergence.\n
    \  The mechanism is limited to the link-down event in order to keep the\n   mechanism
    simple.\n   Simulations using real network topologies have been performed and\n
    \  show that local loops are a significant portion (>50%) of the total\n   forwarding
    loops.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8333.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \  2. Terminology .....................................................4\n      2.1.
    Acronyms ...................................................4\n      2.2. Requirements
    Language ......................................5\n   3. Side Effects of Transient
    Forwarding Loops ......................5\n      3.1. FRR Inefficiency ...........................................5\n
    \     3.2. Network Congestion .........................................8\n   4.
    Overview of the Solution ........................................9\n   5. Specification
    ...................................................9\n      5.1. Definitions ................................................9\n
    \     5.2. Regular IGP Reaction ......................................10\n      5.3.
    Local Events ..............................................10\n      5.4. Local
    Delay for Link-Down Events ..........................11\n   6. Applicability ..................................................11\n
    \     6.1. Applicable Case: Local Loops ..............................12\n      6.2.
    Non-applicable Case: Remote Loops .........................12\n   7. Simulations
    ....................................................13\n   8. Deployment Considerations
    ......................................14\n   9. Examples .......................................................15\n
    \     9.1. Local Link-Down Event .....................................15\n      9.2.
    Local and Remote Event ....................................19\n      9.3. Aborting
    Local Delay ......................................21\n   10. Comparison with Other
    Solutions ...............................23\n      10.1. PLSN .....................................................23\n
    \     10.2. oFIB .....................................................24\n   11.
    IANA Considerations ...........................................24\n   12. Security
    Considerations .......................................24\n   13. References ....................................................25\n
    \     13.1. Normative References .....................................25\n      13.2.
    Informative References ...................................25\n   Acknowledgements
    ..................................................26\n   Authors' Addresses ................................................26\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Micro-loops and some potential solutions are described in
    [RFC5715].\n   This document describes a simple targeted mechanism that prevents\n
    \  micro-loops that are local to the failure.  Based on network\n   analysis,
    local micro-loops make up a significant portion of the\n   micro-loops.  A simple
    and easily deployable solution for these local\n   micro-loops is critical because
    these local loops cause some traffic\n   loss after an FRR alternate has been
    used (see Section 3.1).\n   Consider the case in Figure 1 where S does not have
    an LFA (Loop-Free\n   Alternate) to protect its traffic to D when the S-D link
    fails.  That\n   means that all non-D neighbors of S on the topology will send
    to S\n   any traffic destined to D; if a neighbor did not, then that neighbor\n
    \  would be loop-free.  Regardless of the advanced FRR technique used,\n   when
    S converges to the new topology, it will send its traffic to a\n   neighbor that
    is not loop-free and will thus cause a local micro-\n   loop.  The deployment
    of advanced FRR techniques motivates this\n   simple router-local mechanism to
    solve this targeted problem.  This\n   solution can work with the various techniques
    described in [RFC5715].\n                                  D ------ C\n                                  |
    \       |\n                                  |        | 5\n                                  |
    \       |\n                                  S ------ B\n                                 Figure
    1\n   In Figure 1, all links have a metric of 1 except the B-C link, which\n   has
    a metric of 5.  When the S-D link fails, a transient forwarding\n   loop may appear
    between S and B if S updates its forwarding entry to\n   D before B does.\n"
  title: 1.  Introduction
- contents:
  - '2.  Terminology

    '
  - contents:
    - "2.1.  Acronyms\n   FIB: Forwarding Information Base\n   FRR: Fast Reroute\n
      \  IGP: Interior Gateway Protocol\n   LFA: Loop-Free Alternate\n   LSA: Link
      State Advertisement\n   LSP: Link State Packet\n   MRT: Maximally Redundant
      Tree\n   oFIB: Ordered FIB\n   PLR: Point of Local Repair\n   PLSN: Path Locking
      via Safe Neighbors\n   RIB: Routing Information Base\n   RLFA: Remote Loop-Free
      Alternate\n   SPF: Shortest Path First\n   TTL: Time to Live\n"
    title: 2.1.  Acronyms
  - contents:
    - "2.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n"
    title: 2.2.  Requirements Language
  title: 2.  Terminology
- contents:
  - "3.  Side Effects of Transient Forwarding Loops\n   Even if they are very limited
    in duration, transient forwarding loops\n   may cause significant network damage.\n"
  - contents:
    - "3.1.  FRR Inefficiency\n   In Figure 2, we consider an IP/LDP routed network.\n
      \                                D\n                               1 |\n                                 |
      \   1\n                                 A ------ B\n                                 |
      \       |    ^\n                              10 |        | 5  | T\n                                 |
      \       |    |\n                                 E--------C\n                                 |
      \   1\n                               1 |\n                                 S\n
      \                                Figure 2\n   An RSVP-TE tunnel T, provisioned
      on C and terminating on B, is used\n   to protect the traffic against C-B link
      failure (the IGP shortcut\n   feature, defined in [RFC3906], is activated on
      C).  The primary path\n   of T is C->B and FRR is activated on T, providing
      an FRR bypass or\n   detour using path C->E->A->B.  On router C, the next hop
      to D is the\n   tunnel T, thanks to the IGP shortcut.  When the C-B link fails:\n
      \  1.  C detects the failure and updates the tunnel path using a\n       preprogrammed
      FRR path.  The traffic path from S to D becomes\n       S->E->C->E->A->B->A->D.\n
      \  2.  In parallel, on router C, both the IGP convergence and the TE\n       tunnel
      convergence (tunnel path recomputation) are occurring:\n       *  The tunnel
      T path is recomputed and now uses C->E->A->B.\n       *  The IGP path to D is
      recomputed and now uses C->E->A->D.\n   3.  On C, the tail-end of the TE tunnel
      (router B) is no longer on\n       the shortest-path tree (SPT) to D, so C does
      not continue to\n       encapsulate the traffic to D using the tunnel T and
      updates its\n       forwarding entry to D using the next-hop E.\n   If C updates
      its forwarding entry to D before router E, there would\n   be a transient forwarding
      loop between C and E until E has converged.\n   Table 1 describes a theoretical
      sequence of events happening when the\n   B-C link fails.  This theoretical
      sequence of events should only be\n   read as an example.\n   +------------+--------+---------------------+-----------------------+\n
      \  |  Network   |  Time  |   Router C Events   |    Router E Events    |\n   |
      Condition  |        |                     |                       |\n   +------------+--------+---------------------+-----------------------+\n
      \  |    S->D    |        |                     |                       |\n   |
      Traffic OK |        |                     |                       |\n   |            |
      \       |                     |                       |\n   |    S->D    |   t0
      \  |    Link B-C fails   |     Link B-C fails    |\n   |  Traffic   |        |
      \                    |                       |\n   |    lost    |        |                     |
      \                      |\n   |            |        |                     |                       |\n
      \  |            | t0+20  |    C detects the    |                       |\n   |
      \           |   ms   |       failure       |                       |\n   |            |
      \       |                     |                       |\n   |    S->D    | t0+40
      \ |   C activates FRR   |                       |\n   | Traffic OK |   ms   |
      \                    |                       |\n   |            |        |                     |
      \                      |\n   |            | t0+50  | C updates its local |                       |\n
      \  |            |   ms   |       LSP/LSA       |                       |\n   |
      \           |        |                     |                       |\n   |            |
      t0+60  |  C floods its local |                       |\n   |            |   ms
      \  |   updated LSP/LSA   |                       |\n   |            |        |
      \                    |                       |\n   |            | t0+62  |   C
      schedules SPF   |                       |\n   |            |   ms   |       (100
      ms)      |                       |\n   |            |        |                     |
      \                      |\n   |            | t0+87  |                     |   E
      receives LSP/LSA  |\n   |            |   ms   |                     |  from
      C and floods it |\n   |            |        |                     |                       |\n
      \  |            | t0+92  |                     |  E schedules SPF (100 |\n   |
      \           |   ms   |                     |          ms)          |\n   |            |
      \       |                     |                       |\n   |            | t0+163
      |    C computes SPF   |                       |\n   |            |   ms   |
      \                    |                       |\n   |            |        |                     |
      \                      |\n   |            | t0+165 |  C starts updating  |                       |\n
      \  |            |   ms   |     its RIB/FIB     |                       |\n   |
      \           |        |                     |                       |\n   |            |
      t0+193 |                     |     E computes SPF    |\n   |            |   ms
      \  |                     |                       |\n   |            |        |
      \                    |                       |\n   |            | t0+199 |                     |
      E starts updating its |\n   |            |   ms   |                     |        RIB/FIB
      \       |\n   |            |        |                     |                       |\n
      \  |    S->D    | t0+255 |    C updates its    |                       |\n   |
      \ Traffic   |   ms   |    RIB/FIB for D    |                       |\n   |    lost
      \   |        |                     |                       |\n   |            |
      \       |                     |                       |\n   |            | t0+340
      |  C convergence ends |                       |\n   |            |   ms   |
      \                    |                       |\n   |            |        |                     |
      \                      |\n   |    S->D    | t0+443 |                     | E
      updates its RIB/FIB |\n   | Traffic OK |   ms   |                     |         for
      D         |\n   |            |        |                     |                       |\n
      \  |            | t0+470 |                     |   E convergence ends  |\n   |
      \           |   ms   |                     |                       |\n   +------------+--------+---------------------+-----------------------+\n
      \                                 Table 1\n   The issue described here is completely
      independent of the FRR\n   mechanism involved (e.g., TE FRR, LFA/RLFA, MRT,
      etc.) when the\n   primary path uses hop-by-hop routing.  The protection enabled
      by FRR\n   works perfectly but only ensures protection until the PLR has\n   converged
      (as soon as the PLR has converged, it replaces its FRR path\n   with a new primary
      path).  When implementing FRR, a service provider\n   wants to guarantee a very
      limited loss of connectivity time.  The\n   example described in this section
      shows that the benefit of FRR may\n   be completely lost due to a transient
      forwarding loop appearing when\n   PLR has converged.  Delaying FIB updates
      after the IGP convergence\n   (1) may allow the FRR path to be kept until the
      neighbors have\n   converged and (2) preserves the customer traffic.\n"
    title: 3.1.  FRR Inefficiency
  - contents:
    - "3.2.  Network Congestion\n   In Figure 3, when the S-D link fails, a transient
      forwarding loop may\n   appear between S and B for destination D.  The traffic
      on the S-B\n   link will constantly increase due to the looping traffic to D.\n
      \  Depending on the TTL of the packets, the traffic rate destined to D,\n   and
      the bandwidth of the link, the S-B link may become congested in a\n   few hundreds
      of milliseconds and will stay congested until the loop\n   is eliminated.\n
      \                                      1\n                                  D
      ------ C\n                                  |        |\n                                1
      |        | 5\n                                  |        |\n                             A
      -- S ------ B\n                                / |    1\n                               F
      \ E\n                                 Figure 3\n   The congestion introduced
      by transient forwarding loops is\n   problematic as it can affect traffic that
      is not directly affected by\n   the failing network component.  In Figure 3,
      the congestion of the\n   S-B link will impact some customer traffic that is
      not directly\n   affected by the failure, e.g., traffic from A to B, F to B,
      and E to\n   B.  Class of service may mitigate the congestion for some traffic.\n
      \  However, some traffic not directly affected by the failure will still\n   be
      dropped as a router is not able to distinguish the looping traffic\n   from
      the normally forwarded traffic.\n"
    title: 3.2.  Network Congestion
  title: 3.  Side Effects of Transient Forwarding Loops
- contents:
  - "4.  Overview of the Solution\n   This document defines a two-step convergence
    initiated by the router\n   detecting a failure and advertising the topological
    change in the\n   IGP.  This introduces a delay between network-wide convergence
    and\n   the convergence of the local router.\n   The solution described in this
    document is limited to local link-down\n   events in order to keep the solution
    simple.\n   This ordered convergence is similar to the ordered FIB (oFIB)\n   approach
    defined in [RFC6976], but it is limited to only a \"one-hop\"\n   distance.  As
    a consequence, it is more simple and becomes a local-\n   only feature that does
    not require interoperability.  This benefit\n   comes with the limitation of eliminating
    transient forwarding loops\n   involving the local router only.  The mechanism
    also reuses some\n   concepts described in [PLSN].\n"
  title: 4.  Overview of the Solution
- contents:
  - '5.  Specification

    '
  - contents:
    - "5.1.  Definitions\n   This document refers to the following existing IGP timers.
      \ These\n   timers may be standardized or implemented as a vendor-specific local\n
      \  feature.\n   o  LSP_GEN_TIMER: The delay between the consecutive generation
      of two\n      local LSPs/LSAs.  From an operational point of view, this delay
      is\n      usually tuned to batch multiple local events in a single local\n      LSP/LSA
      update.  In IS-IS, this timer is defined as\n      minimumLSPGenerationInterval
      [ISO10589].  In OSPF version 2, this\n      timer is defined as MinLSInterval
      [RFC2328].  It is often\n      associated with a vendor-specific damping mechanism
      to slow down\n      reactions by incrementing the timer when multiple consecutive\n
      \     events are detected.\n   o  SPF_DELAY: The delay between the first IGP
      event triggering a new\n      routing table computation and the start of that
      routing table\n      computation.  It is often associated with a damping mechanism
      to\n      slow down reactions by incrementing the timer when the IGP becomes\n
      \     unstable.  As an example, [BACKOFF] defines a standard SPF delay\n      algorithm.\n
      \  This document introduces the following new timer:\n   o  ULOOP_DELAY_DOWN_TIMER:
      Used to slow down the local node\n      convergence in case of link-down events.\n"
    title: 5.1.  Definitions
  - contents:
    - "5.2.  Regular IGP Reaction\n   When the status of an adjacency or link changes,
      the regular IGP\n   convergence behavior of the router advertising the event
      involves the\n   following main steps:\n   1.  IGP is notified of the up/down
      event.\n   2.  The IGP processes the notification and postpones the reaction
      for\n       LSP_GEN_TIMER ms.\n   3.  Upon LSP_GEN_TIMER expiration, the IGP
      updates its LSP/LSA and\n       floods it.\n   4.  The SPF computation is scheduled
      in SPF_DELAY ms.\n   5.  Upon SPF_DELAY timer expiration, the SPF is computed,
      and then\n       the RIB and FIB are updated.\n"
    title: 5.2.  Regular IGP Reaction
  - contents:
    - "5.3.  Local Events\n   The mechanism described in this document assumes that
      there has been\n   a single link failure as seen by the IGP area/level.  If
      this\n   assumption is violated (e.g., multiple links or nodes failed), then\n
      \  regular IP convergence must be applied (as described in Section 5.2).\n   To
      determine if the mechanism is applicable or not, an implementation\n   SHOULD
      implement logic to correlate the protocol messages (LSP/LSA)\n   received during
      the SPF scheduling period in order to determine the\n   topology changes that
      occurred.  This is necessary as multiple\n   protocol messages may describe
      the same topology change, and a single\n   protocol message may describe multiple
      topology changes.  As a\n   consequence, determining a particular topology change
      MUST be\n   independent of the order of reception of those protocol messages.\n
      \  How the logic works is left to the implementation.\n   Using this logic,
      if an implementation determines that the associated\n   topology change is a
      single local link failure, then the router MAY\n   use the mechanism described
      in this document; otherwise, the regular\n   IP convergence MUST be used.\n
      \  In Figure 4, let router B be the computing router when the link B-C\n   fails.
      \ B updates its local LSP/LSA describing the link B-C as down,\n   C does the
      same, and both start flooding their updated LSPs/LSAs.\n   During the SPF_DELAY
      period, B and C learn all the LSPs/LSAs to\n   consider.  B sees that C is flooding
      an advertisement that indicates\n   that a link is down, and B is the other
      end of that link.  B\n   determines that B and C are describing the same single
      event.  Since\n   B receives no other changes, B can determine that this is
      a local\n   link failure and may decide to activate the mechanism described
      in\n   this document.\n                              +--- E ----+--------+\n
      \                             |          |        |\n                       A
      ---- B -------- C ------ D\n                                 Figure 4\n"
    title: 5.3.  Local Events
  - contents:
    - "5.4.  Local Delay for Link-Down Events\n   This document introduces a change
      in step 5 (see list in Section 5.2)\n   so that, upon an adjacency or link-down
      event, the local convergence\n   is delayed compared to the network-wide convergence.
      \ The new step 5\n   is described below:\n   5.  Upon SPF_DELAY timer expiration,
      the SPF is computed.  If the\n       condition of a single local link-down event
      has been met, then an\n       update of the RIB and the FIB MUST be delayed
      for\n       ULOOP_DELAY_DOWN_TIMER ms.  Otherwise, the RIB and FIB SHOULD be\n
      \      updated immediately.\n   If a new convergence occurs while ULOOP_DELAY_DOWN_TIMER
      is running,\n   ULOOP_DELAY_DOWN_TIMER is stopped, and the RIB/FIB SHOULD be
      updated\n   as part of the new convergence event.\n   As a result of this addition,
      routers local to the failure will\n   converge slower than remote routers.  Hence,
      it SHOULD only be done\n   for a non-urgent convergence, such as administrative
      deactivation\n   (maintenance) or when the traffic is protected by FRR.\n"
    title: 5.4.  Local Delay for Link-Down Events
  title: 5.  Specification
- contents:
  - "6.  Applicability\n   As previously stated, this mechanism only avoids the forwarding
    loops\n   on the links between the node local to the failure and its neighbors.\n
    \  Forwarding loops may still occur on other links.\n"
  - contents:
    - "6.1.  Applicable Case: Local Loops\n   In Figure 5, let us consider the traffic
      from G to F.  The primary\n   path is G->D->C->E->F.  When the link C-E fails,
      if C updates its\n   forwarding entry for F before D, a transient loop occurs.
      \ This is\n   sub-optimal as it breaks C's FRR forwarding even though upstream\n
      \  routers are still forwarding the traffic to C.\n                          A
      ------ B ----- E\n                          |              / |\n                          |
      \            /  |\n                      G---D------------C   F\n                      All
      the links have a metric of 1\n                                 Figure 5\n   By
      implementing the mechanism defined in this document on C, when the\n   C-E link
      fails, C delays the update of its forwarding entry to F, in\n   order to allow
      some time for D to converge.  FRR on C keeps\n   protecting the traffic during
      this period.  When\n   ULOOP_DELAY_DOWN_TIMER expires on C, its forwarding entry
      to F is\n   updated.  There is no transient forwarding loop on the link C-D.\n"
    title: '6.1.  Applicable Case: Local Loops'
  - contents:
    - "6.2.  Non-applicable Case: Remote Loops\n   In Figure 6, let us consider the
      traffic from G to K.  The primary\n   path is G->D->C->F->J->K.  When the C-F
      link fails, if C updates its\n   forwarding entry to K before D, a transient
      loop occurs between C and\n   D.\n                   A ------ B ----- E ---
      H\n                   |                      |\n                   |                      |\n
      \              G---D--------C ------F --- J ---- K\n               All the links
      have a metric of 1 except B-E=15\n                                 Figure 6\n
      \  By implementing the mechanism defined in this document on C, when the\n   link
      C-F fails, C delays the update of its forwarding entry to K,\n   allowing time
      for D to converge.  When ULOOP_DELAY_DOWN_TIMER expires\n   on C, its forwarding
      entry to F is updated.  There is no transient\n   forwarding loop between C
      and D.  However, a transient forwarding\n   loop may still occur between D and
      A.  In this scenario, this\n   mechanism is not enough to address all the possible
      forwarding loops.\n   However, it does not create additional traffic loss.  Besides,
      in\n   some cases -- such as when the nodes update their FIB in the order C,\n
      \  A, D because the router A is quicker than D to converge -- the\n   mechanism
      may still avoid the forwarding loop that would have\n   otherwise occurred.\n"
    title: '6.2.  Non-applicable Case: Remote Loops'
  title: 6.  Applicability
- contents:
  - "7.  Simulations\n   Simulations have been run on multiple service-provider topologies.\n
    \  We evaluated the efficiency of the mechanism on eight different\n   service-provider
    topologies (different network size and design).\n   Table 2 displays the gain
    for each topology.\n                            +----------+------+\n                            |
    Topology | Gain |\n                            +----------+------+\n                            |
    \   T1    | 71%  |\n                            |    T2    | 81%  |\n                            |
    \   T3    | 62%  |\n                            |    T4    | 50%  |\n                            |
    \   T5    | 70%  |\n                            |    T6    | 70%  |\n                            |
    \   T7    | 59%  |\n                            |    T8    | 77%  |\n                            +----------+------+\n
    \                                 Table 2\n   We evaluated the gain as follows:\n
    \  o  We considered a tuple (link A-B, destination D, PLR S, backup\n      next-hop
    N) as a loop if, upon link A-B failure, the flow from a\n      router S upstream
    from A (A could be considered as PLR also) to D\n      may loop due to convergence
    time difference between S and one of\n      its neighbors N.\n   o  We evaluated
    the number of potential loop tuples in normal\n      conditions.\n   o  We evaluated
    the number of potential loop tuples using the same\n      topological input but
    taking into account that S converges after\n      N.\n   o  The gain is the relative
    number of loops (both remote and local)\n      we succeed in suppressing.\n   For
    topology 1, implementing the local delay prevented 71% of the\n   transient forwarding
    loops created by the failure of any link.  The\n   analysis shows that all local
    loops are prevented and only remote\n   loops remain.\n"
  title: 7.  Simulations
- contents:
  - "8.  Deployment Considerations\n   Transient forwarding loops have the following
    drawbacks:\n   o  They limit FRR efficiency.  Even if FRR is activated within
    50 ms,\n      as soon as the PLR has converged, the traffic may be affected by
    a\n      transient loop.\n   o  They may impact traffic not directly affected
    by the failure (due\n      to link congestion).\n   The local delay mechanism
    is a transient forwarding loop avoidance\n   mechanism (like oFIB).  Even if it
    only addresses local transient\n   loops, the efficiency versus complexity comparison
    of the mechanism\n   makes it a good solution.  It is also incrementally deployable
    with\n   incremental benefits, which makes it an attractive option for both\n
    \  vendors to implement and service providers to deploy.  Delaying the\n   convergence
    time is not an issue if we consider that the traffic is\n   protected during the
    convergence.\n   The ULOOP_DELAY_DOWN_TIMER value should be set according to the\n
    \  maximum IGP convergence time observed in the network (usually\n   observed
    in the slowest node).\n   This mechanism is limited to link-down events.  When
    a link goes\n   down, it eventually goes back up.  As a consequence, with this\n
    \  mechanism deployed, only the link-down event will be protected\n   against
    transient forwarding loops while the link-up event will not.\n   If the operator
    wants to limit the impact of transient forwarding\n   loops during the link-up
    event, it should make sure to use specific\n   procedures to bring the link back
    online.  As examples, the operator\n   can decide to put the link back online
    outside of business hours, or\n   it can use some incremental metric changes to
    prevent loops (as\n   proposed in [RFC5715]).\n"
  title: 8.  Deployment Considerations
- contents:
  - "9.  Examples\n   We consider the following figure for the examples in this section:\n
    \                                 D\n                                1 |        F----X\n
    \                                 |    1   |\n                                  A
    ------ B\n                                  |        |\n                               10
    |        | 5\n                                  |        |\n                                  E--------C\n
    \                                 |    1\n                                1 |\n
    \                                 S\n                                 Figure 7\n
    \  The network above is considered to have a convergence time of about 1\n   second,
    so ULOOP_DELAY_DOWN_TIMER will be adjusted to this value.  We\n   also consider
    that FRR is running on each node.\n"
  - contents:
    - "9.1.  Local Link-Down Event\n   Table 3 describes the events and their timing
      on routers C and E when\n   the link B-C goes down.  It is based on a theoretical
      sequence of\n   events that should only been read as an example.  As C detects
      a\n   single local event corresponding to a link-down event (its LSP + LSP\n
      \  from B received), it applies the local delay down behavior, and no\n   micro-loop
      is formed.\n   +------------+---------+---------------------+----------------------+\n
      \  |  Network   |   Time  |   Router C Events   |   Router E Events    |\n   |
      Condition  |         |                     |                      |\n   +------------+---------+---------------------+----------------------+\n
      \  |    S->D    |         |                     |                      |\n   |
      Traffic OK |         |                     |                      |\n   |            |
      \        |                     |                      |\n   |    S->D    |    t0
      \  |    Link B-C fails   |    Link B-C fails    |\n   |  Traffic   |         |
      \                    |                      |\n   |    lost    |         |                     |
      \                     |\n   |            |         |                     |                      |\n
      \  |            |  t0+20  |    C detects the    |                      |\n   |
      \           |    ms   |       failure       |                      |\n   |            |
      \        |                     |                      |\n   |    S->D    |  t0+40
      \ |   C activates FRR   |                      |\n   | Traffic OK |    ms   |
      \                    |                      |\n   |            |         |                     |
      \                     |\n   |            |  t0+50  | C updates its local |                      |\n
      \  |            |    ms   |       LSP/LSA       |                      |\n   |
      \           |         |                     |                      |\n   |            |
      \ t0+53  |  C floods its local |                      |\n   |            |    ms
      \  |   updated LSP/LSA   |                      |\n   |            |         |
      \                    |                      |\n   |            |  t0+60  |   C
      schedules SPF   |                      |\n   |            |    ms   |       (100
      ms)      |                      |\n   |            |         |                     |
      \                     |\n   |            |  t0+67  |  C receives LSP/LSA |                      |\n
      \  |            |    ms   |  from B and floods  |                      |\n   |
      \           |         |          it         |                      |\n   |            |
      \        |                     |                      |\n   |            |  t0+87
      \ |                     |  E receives LSP/LSA  |\n   |            |    ms   |
      \                    | from C and floods it |\n   |            |         |                     |
      \                     |\n   |            |  t0+90  |                     | E
      schedules SPF (100 |\n   |            |    ms   |                     |         ms)
      \         |\n   |            |         |                     |                      |\n
      \  |            |  t0+161 |    C computes SPF   |                      |\n   |
      \           |    ms   |                     |                      |\n   |            |
      \        |                     |                      |\n   |            |  t0+165
      |     C delays its    |                      |\n   |            |    ms   |
      \ RIB/FIB update (1  |                      |\n   |            |         |         sec)
      \       |                      |\n   |            |         |                     |
      \                     |\n   |            |  t0+193 |                     |    E
      computes SPF    |\n   |            |    ms   |                     |                      |\n
      \  |            |         |                     |                      |\n   |
      \           |  t0+199 |                     |  E starts updating   |\n   |            |
      \   ms   |                     |     its RIB/FIB      |\n   |            |         |
      \                    |                      |\n   |            |  t0+443 |                     |
      \   E updates its     |\n   |            |    ms   |                     |    RIB/FIB
      for D     |\n   |            |         |                     |                      |\n
      \  |            |  t0+470 |                     |  E convergence ends  |\n   |
      \           |    ms   |                     |                      |\n   |            |
      \        |                     |                      |\n   |            | t0+1165
      |  C starts updating  |                      |\n   |            |    ms   |
      \    its RIB/FIB     |                      |\n   |            |         |                     |
      \                     |\n   |            | t0+1255 |    C updates its    |                      |\n
      \  |            |    ms   |    RIB/FIB for D    |                      |\n   |
      \           |         |                     |                      |\n   |            |
      t0+1340 |  C convergence ends |                      |\n   |            |    ms
      \  |                     |                      |\n   +------------+---------+---------------------+----------------------+\n
      \                                 Table 3\n   Similarly, upon B-C link-down
      event, if LSP/LSA from B is received\n   before C detects the link failure,
      C will apply the route update\n   delay if the local detection is part of the
      same SPF run.  Table 4\n   describes the associated theoretical sequence of
      events.  It should\n   only been read as an example.\n   +------------+---------+---------------------+----------------------+\n
      \  |  Network   |   Time  |   Router C Events   |   Router E Events    |\n   |
      Condition  |         |                     |                      |\n   +------------+---------+---------------------+----------------------+\n
      \  |    S->D    |         |                     |                      |\n   |
      Traffic OK |         |                     |                      |\n   |            |
      \        |                     |                      |\n   |    S->D    |    t0
      \  |    Link B-C fails   |    Link B-C fails    |\n   |  Traffic   |         |
      \                    |                      |\n   |    lost    |         |                     |
      \                     |\n   |            |         |                     |                      |\n
      \  |            |  t0+32  |  C receives LSP/LSA |                      |\n   |
      \           |    ms   |  from B and floods  |                      |\n   |            |
      \        |          it         |                      |\n   |            |         |
      \                    |                      |\n   |            |  t0+33  |   C
      schedules SPF   |                      |\n   |            |    ms   |       (100
      ms)      |                      |\n   |            |         |                     |
      \                     |\n   |            |  t0+50  |    C detects the    |                      |\n
      \  |            |    ms   |       failure       |                      |\n   |
      \           |         |                     |                      |\n   |    S->D
      \   |  t0+55  |   C activates FRR   |                      |\n   | Traffic OK
      |    ms   |                     |                      |\n   |            |
      \        |                     |                      |\n   |            |  t0+55
      \ | C updates its local |                      |\n   |            |    ms   |
      \      LSP/LSA       |                      |\n   |            |         |                     |
      \                     |\n   |            |  t0+70  |  C floods its local |                      |\n
      \  |            |    ms   |   updated LSP/LSA   |                      |\n   |
      \           |         |                     |                      |\n   |            |
      \ t0+87  |                     |  E receives LSP/LSA  |\n   |            |    ms
      \  |                     | from C and floods it |\n   |            |         |
      \                    |                      |\n   |            |  t0+90  |                     |
      E schedules SPF (100 |\n   |            |    ms   |                     |         ms)
      \         |\n   |            |         |                     |                      |\n
      \  |            |  t0+135 |    C computes SPF   |                      |\n   |
      \           |    ms   |                     |                      |\n   |            |
      \        |                     |                      |\n   |            |  t0+140
      |     C delays its    |                      |\n   |            |    ms   |
      \ RIB/FIB update (1  |                      |\n   |            |         |         sec)
      \       |                      |\n   |            |         |                     |
      \                     |\n   |            |  t0+193 |                     |    E
      computes SPF    |\n   |            |    ms   |                     |                      |\n
      \  |            |         |                     |                      |\n   |
      \           |  t0+199 |                     |  E starts updating   |\n   |            |
      \   ms   |                     |     its RIB/FIB      |\n   |            |         |
      \                    |                      |\n   |            |  t0+443 |                     |
      \   E updates its     |\n   |            |    ms   |                     |    RIB/FIB
      for D     |\n   |            |         |                     |                      |\n
      \  |            |  t0+470 |                     |  E convergence ends  |\n   |
      \           |    ms   |                     |                      |\n   |            |
      \        |                     |                      |\n   |            | t0+1145
      |  C starts updating  |                      |\n   |            |    ms   |
      \    its RIB/FIB     |                      |\n   |            |         |                     |
      \                     |\n   |            | t0+1255 |    C updates its    |                      |\n
      \  |            |    ms   |    RIB/FIB for D    |                      |\n   |
      \           |         |                     |                      |\n   |            |
      t0+1340 |  C convergence ends |                      |\n   |            |    ms
      \  |                     |                      |\n   +------------+---------+---------------------+----------------------+\n
      \                                 Table 4\n"
    title: 9.1.  Local Link-Down Event
  - contents:
    - "9.2.  Local and Remote Event\n   Table 5 describes the events and their timing
      on router C and E when\n   the link B-C goes down and when the link F-X fails
      in the same time\n   window.  C will not apply the local delay because a non-local\n
      \  topology change is also received.  Table 5 is based on a theoretical\n   sequence
      of events that should only been read as an example.\n   +-----------+--------+-------------------+--------------------------+\n
      \  |  Network  |  Time  |  Router C Events  |     Router E Events      |\n   |
      Condition |        |                   |                          |\n   +-----------+--------+-------------------+--------------------------+\n
      \  |    S->D   |        |                   |                          |\n   |
      \ Traffic  |        |                   |                          |\n   |     OK
      \   |        |                   |                          |\n   |           |
      \       |                   |                          |\n   |    S->D   |   t0
      \  |   Link B-C fails  |      Link B-C fails      |\n   |  Traffic  |        |
      \                  |                          |\n   |    lost   |        |                   |
      \                         |\n   |           |        |                   |                          |\n
      \  |           | t0+20  |   C detects the   |                          |\n   |
      \          |   ms   |      failure      |                          |\n   |           |
      \       |                   |                          |\n   |           | t0+36
      \ |   Link F-X fails  |      Link F-X fails      |\n   |           |   ms   |
      \                  |                          |\n   |           |        |                   |
      \                         |\n   |    S->D   | t0+40  |  C activates FRR  |                          |\n
      \  |  Traffic  |   ms   |                   |                          |\n   |
      \    OK    |        |                   |                          |\n   |           |
      \       |                   |                          |\n   |           | t0+50
      \ |   C updates its   |                          |\n   |           |   ms   |
      \  local LSP/LSA   |                          |\n   |           |        |                   |
      \                         |\n   |           | t0+54  |     C receives    |                          |\n
      \  |           |   ms   |   LSP/LSA from F  |                          |\n   |
      \          |        |   and floods it   |                          |\n   |           |
      \       |                   |                          |\n   |           | t0+60
      \ |  C schedules SPF  |                          |\n   |           |   ms   |
      \     (100 ms)     |                          |\n   |           |        |                   |
      \                         |\n   |           | t0+67  |     C receives    |                          |\n
      \  |           |   ms   |   LSP/LSA from B  |                          |\n   |
      \          |        |   and floods it   |                          |\n   |           |
      \       |                   |                          |\n   |           | t0+69
      \ |                   | E receives LSP/LSA from  |\n   |           |   ms   |
      \                  |     F, floods it and     |\n   |           |        |                   |
      \ schedules SPF (100 ms)  |\n   |           |        |                   |                          |\n
      \  |           | t0+70  |    C floods its   |                          |\n   |
      \          |   ms   |   local updated   |                          |\n   |           |
      \       |      LSP/LSA      |                          |\n   |           |        |
      \                  |                          |\n   |           | t0+87  |                   |
      E receives LSP/LSA from  |\n   |           |   ms   |                   |            C
      \            |\n   |           |        |                   |                          |\n
      \  |           | t0+117 |                   | E floods LSP/LSA from C  |\n   |
      \          |   ms   |                   |                          |\n   |           |
      \       |                   |                          |\n   |           | t0+160
      |   C computes SPF  |                          |\n   |           |   ms   |
      \                  |                          |\n   |           |        |                   |
      \                         |\n   |           | t0+165 | C starts updating |                          |\n
      \  |           |   ms   |  its RIB/FIB (NO  |                          |\n   |
      \          |        |       DELAY)      |                          |\n   |           |
      \       |                   |                          |\n   |           | t0+170
      |                   |      E computes SPF      |\n   |           |   ms   |
      \                  |                          |\n   |           |        |                   |
      \                         |\n   |           | t0+173 |                   |  E
      starts updating its   |\n   |           |   ms   |                   |         RIB/FIB
      \         |\n   |           |        |                   |                          |\n
      \  |    S->D   | t0+365 |   C updates its   |                          |\n   |
      \ Traffic  |   ms   |   RIB/FIB for D   |                          |\n   |    lost
      \  |        |                   |                          |\n   |           |
      \       |                   |                          |\n   |    S->D   | t0+443
      |                   |  E updates its RIB/FIB   |\n   |  Traffic  |   ms   |
      \                  |          for D           |\n   |     OK    |        |                   |
      \                         |\n   |           |        |                   |                          |\n
      \  |           | t0+450 |   C convergence   |                          |\n   |
      \          |   ms   |        ends       |                          |\n   |           |
      \       |                   |                          |\n   |           | t0+470
      |                   |    E convergence ends    |\n   |           |   ms   |
      \                  |                          |\n   |           |        |                   |
      \                         |\n   +-----------+--------+-------------------+--------------------------+\n
      \                                 Table 5\n"
    title: 9.2.  Local and Remote Event
  - contents:
    - "9.3.  Aborting Local Delay\n   Table 6 describes the events and their timing
      on routers C and E when\n   the link B-C goes down.  In addition, we consider
      what happens when\n   the F-X link fails during local delay of the FIB update.
      \ C will\n   first apply the local delay, but when the new event happens, it
      will\n   fall back to the standard convergence mechanism without further\n   delaying
      route insertion.  In this example, we consider a\n   ULOOP_DELAY_DOWN_TIMER
      configured to 2 seconds.  Table 6 is based on\n   a theoretical sequence of
      events that should only been read as an\n   example.\n   +------------+--------+----------------------+----------------------+\n
      \  |  Network   |  Time  |   Router C Events    |   Router E Events    |\n   |
      Condition  |        |                      |                      |\n   +------------+--------+----------------------+----------------------+\n
      \  |    S->D    |        |                      |                      |\n   |
      Traffic OK |        |                      |                      |\n   |            |
      \       |                      |                      |\n   |    S->D    |   t0
      \  |    Link B-C fails    |    Link B-C fails    |\n   |  Traffic   |        |
      \                     |                      |\n   |    lost    |        |                      |
      \                     |\n   |            |        |                      |                      |\n
      \  |            | t0+20  |    C detects the     |                      |\n   |
      \           |   ms   |       failure        |                      |\n   |            |
      \       |                      |                      |\n   |    S->D    | t0+40
      \ |   C activates FRR    |                      |\n   | Traffic OK |   ms   |
      \                     |                      |\n   |            |        |                      |
      \                     |\n   |            | t0+50  | C updates its local  |                      |\n
      \  |            |   ms   |       LSP/LSA        |                      |\n   |
      \           |        |                      |                      |\n   |            |
      t0+55  |  C floods its local  |                      |\n   |            |   ms
      \  |   updated LSP/LSA    |                      |\n   |            |        |
      \                     |                      |\n   |            | t0+57  | C
      schedules SPF (100 |                      |\n   |            |   ms   |         ms)
      \         |                      |\n   |            |        |                      |
      \                     |\n   |            | t0+67  |  C receives LSP/LSA  |                      |\n
      \  |            |   ms   | from B and floods it |                      |\n   |
      \           |        |                      |                      |\n   |            |
      t0+87  |                      |  E receives LSP/LSA  |\n   |            |   ms
      \  |                      | from C and floods it |\n   |            |        |
      \                     |                      |\n   |            | t0+90  |                      |
      E schedules SPF (100 |\n   |            |   ms   |                      |         ms)
      \         |\n   |            |        |                      |                      |\n
      \  |            | t0+160 |    C computes SPF    |                      |\n   |
      \           |   ms   |                      |                      |\n   |            |
      \       |                      |                      |\n   |            | t0+165
      | C delays its RIB/FIB |                      |\n   |            |   ms   |
      \   update (2 sec)    |                      |\n   |            |        |                      |
      \                     |\n   |            | t0+193 |                      |    E
      computes SPF    |\n   |            |   ms   |                      |                      |\n
      \  |            |        |                      |                      |\n   |
      \           | t0+199 |                      |  E starts updating   |\n   |            |
      \  ms   |                      |     its RIB/FIB      |\n   |            |        |
      \                     |                      |\n   |            | t0+254 |    Link
      F-X fails    |    Link F-X fails    |\n   |            |   ms   |                      |
      \                     |\n   |            |        |                      |                      |\n
      \  |            | t0+300 |  C receives LSP/LSA  |                      |\n   |
      \           |   ms   | from F and floods it |                      |\n   |            |
      \       |                      |                      |\n   |            | t0+303
      | C schedules SPF (200 |                      |\n   |            |   ms   |
      \        ms)          |                      |\n   |            |        |                      |
      \                     |\n   |            | t0+312 |  E receives LSP/LSA  |                      |\n
      \  |            |   ms   | from F and floods it |                      |\n   |
      \           |        |                      |                      |\n   |            |
      t0+313 | E schedules SPF (200 |                      |\n   |            |   ms
      \  |         ms)          |                      |\n   |            |        |
      \                     |                      |\n   |            | t0+502 |    C
      computes SPF    |                      |\n   |            |   ms   |                      |
      \                     |\n   |            |        |                      |                      |\n
      \  |            | t0+505 |  C starts updating   |                      |\n   |
      \           |   ms   |   its RIB/FIB (NO    |                      |\n   |            |
      \       |        DELAY)        |                      |\n   |            |        |
      \                     |                      |\n   |            | t0+514 |                      |
      \   E computes SPF    |\n   |            |   ms   |                      |                      |\n
      \  |            |        |                      |                      |\n   |
      \           | t0+519 |                      |  E starts updating   |\n   |            |
      \  ms   |                      |     its RIB/FIB      |\n   |            |        |
      \                     |                      |\n   |    S->D    | t0+659 |    C
      updates its     |                      |\n   |  Traffic   |   ms   |    RIB/FIB
      for D     |                      |\n   |    lost    |        |                      |
      \                     |\n   |            |        |                      |                      |\n
      \  |    S->D    | t0+778 |                      |    E updates its     |\n   |
      Traffic OK |   ms   |                      |    RIB/FIB for D     |\n   |            |
      \       |                      |                      |\n   |            | t0+781
      |  C convergence ends  |                      |\n   |            |   ms   |
      \                     |                      |\n   |            |        |                      |
      \                     |\n   |            | t0+810 |                      |  E
      convergence ends  |\n   |            |   ms   |                      |                      |\n
      \  +------------+--------+----------------------+----------------------+\n                                  Table
      6\n"
    title: 9.3.  Aborting Local Delay
  title: 9.  Examples
- contents:
  - "10.  Comparison with Other Solutions\n   As stated in Section 4, the local delay
    solution reuses some concepts\n   already introduced by other IETF proposals but
    tries to find a trade-\n   off between efficiency and simplicity.  This section
    tries to compare\n   behaviors of the solutions.\n"
  - contents:
    - "10.1.  PLSN\n   PLSN [PLSN] describes a mechanism where each node in the network\n
      \  tries to avoid transient forwarding loops upon a topology change by\n   always
      keeping traffic on a loop-free path for a defined duration\n   (locked path
      to a safe neighbor).  The locked path may be the new\n   primary next hop, another
      neighbor, or the old primary next hop\n   depending on how the safety condition
      is satisfied.\n   PLSN does not solve all transient forwarding loops (see Section
      4 of\n   [PLSN] for more details).\n   The solution defined in this document
      reuses some concepts of PLSN\n   but in a more simple fashion:\n   o  PLSN has
      three different behaviors: (1) keep using the old next\n      hop, (2) use the
      new primary next hop if it is safe, or (3) use\n      another safe next hop.
      \ The local delay solution, however, only\n      has one: keep using the current
      next hop (i.e., the old primary\n      next hop or an already-activated FRR
      path).\n   o  PLSN may cause some damage while using a safe next hop that is
      not\n      the new primary next hop if the new safe next hop does not provide\n
      \     enough bandwidth (see [RFC7916]).  The solution defined in this\n      document
      may not experience this issue as the service provider may\n      have control
      on the FRR path being used, preventing network\n      congestion.\n   o  PLSN
      applies to all nodes in a network (remote or local changes),\n      while the
      mechanism defined in this document applies only to the\n      nodes connected
      to the topology change.\n"
    title: 10.1.  PLSN
  - contents:
    - "10.2.  oFIB\n   oFIB [RFC6976] describes a mechanism where the convergence
      of the\n   network upon a topology change is ordered in order to prevent\n   transient
      forwarding loops.  Each router in the network deduces the\n   failure type from
      the LSA/LSP received and computes/applies a\n   specific FIB update timer based
      on the failure type and its rank in\n   the network, considering the failure
      point as root.\n   The oFIB mechanism solves all the transient forwarding loops
      in a\n   network at the price of introducing complexity in the convergence\n
      \  process that may require careful monitoring by the service provider.\n   The
      solution defined in this document reuses the oFIB concept but\n   limits it
      to the first hop that experiences the topology change.  As\n   demonstrated,
      the mechanism defined in this document allows all the\n   local transient forwarding
      loops to be solved; these represent a high\n   percentage of all the loops.
      \ Moreover, limiting to one hop allows\n   network-wide convergence behavior
      to be kept.\n"
    title: 10.2.  oFIB
  title: 10.  Comparison with Other Solutions
- contents:
  - "11.  IANA Considerations\n   This document has no IANA actions.\n"
  title: 11.  IANA Considerations
- contents:
  - "12.  Security Considerations\n   This document does not introduce any change
    in terms of IGP security.\n   The operation is internal to the router.  The local
    delay does not\n   increase the number of attack vectors as an attacker could
    only\n   trigger this mechanism if it already has the ability to disable or\n
    \  enable an IGP link.  The local delay does not increase the negative\n   consequences.
    \ If an attacker has the ability to disable or enable an\n   IGP link, it can
    already harm the network by creating instability and\n   harm the traffic by creating
    forwarding packet loss and forwarding\n   loss for the traffic crossing that link.\n"
  title: 12.  Security Considerations
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [ISO10589] International Organization for Standardization,\n
      \             \"Information technology -- Telecommunications and\n              information
      exchange between systems -- Intermediate\n              System to Intermediate
      System intra-domain routeing\n              information exchange protocol for
      use in conjunction with\n              the protocol for providing the connectionless-mode
      network\n              service (ISO 8473)\", ISO/IEC 10589:2002, Second Edition,\n
      \             November 2002.\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2328]  Moy, J., \"OSPF Version 2\", STD 54, RFC 2328,\n              DOI
      10.17487/RFC2328, April 1998,\n              <https://www.rfc-editor.org/info/rfc2328>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [BACKOFF]  Decraene, B., Litkowski, S., Gredler,
      H., Lindem, A.,\n              Francois, P., and C. Bowers, \"SPF Back-off Delay
      algorithm\n              for link state IGPs\", Work in Progress, draft-ietf-rtgwg-\n
      \             backoff-algo-10, March 2018.\n   [PLSN]     Zinin, A., \"Analysis
      and Minimization of Microloops in\n              Link-state Routing Protocols\",
      Work in Progress,\n              draft-ietf-rtgwg-microloop-analysis-01, October
      2005.\n   [RFC3906]  Shen, N. and H. Smit, \"Calculating Interior Gateway\n
      \             Protocol (IGP) Routes Over Traffic Engineering Tunnels\",\n              RFC
      3906, DOI 10.17487/RFC3906, October 2004,\n              <https://www.rfc-editor.org/info/rfc3906>.\n
      \  [RFC5715]  Shand, M. and S. Bryant, \"A Framework for Loop-Free\n              Convergence\",
      RFC 5715, DOI 10.17487/RFC5715, January\n              2010, <https://www.rfc-editor.org/info/rfc5715>.\n
      \  [RFC6976]  Shand, M., Bryant, S., Previdi, S., Filsfils, C.,\n              Francois,
      P., and O. Bonaventure, \"Framework for Loop-Free\n              Convergence
      Using the Ordered Forwarding Information Base\n              (oFIB) Approach\",
      RFC 6976, DOI 10.17487/RFC6976, July\n              2013, <https://www.rfc-editor.org/info/rfc6976>.\n
      \  [RFC7916]  Litkowski, S., Ed., Decraene, B., Filsfils, C., Raza, K.,\n              Horneffer,
      M., and P. Sarkar, \"Operational Management of\n              Loop-Free Alternates\",
      RFC 7916, DOI 10.17487/RFC7916,\n              July 2016, <https://www.rfc-editor.org/info/rfc7916>.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Acknowledgements\n   We would like to thank the authors of [RFC6976] for introducing
    the\n   concept of ordered convergence: Mike Shand, Stewart Bryant, Stefano\n
    \  Previdi, and Olivier Bonaventure.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Stephane Litkowski\n   Orange\n   Email: stephane.litkowski@orange.com\n
    \  Bruno Decraene\n   Orange\n   Email: bruno.decraene@orange.com\n   Clarence
    Filsfils\n   Cisco Systems\n   Email: cfilsfil@cisco.com\n   Pierre Francois\n
    \  Individual Contributor\n   Email: pfrpfr@gmail.com\n"
  title: Authors' Addresses
