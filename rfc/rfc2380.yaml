- title: __initial_text__
  contents:
  - '               RSVP over ATM Implementation Requirements

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo presents specific implementation requirements for running\n\
    \   RSVP over ATM switched virtual circuits (SVCs).  It presents\n   requirements\
    \ that ensure interoperability between multiple\n   implementations and conformance\
    \ to the RSVP and Integrated Services\n   specifications.  A separate document\
    \ [5] provides specific guidelines\n   for running over today's ATM networks.\
    \  The general problem is\n   discussed in [9].   Integrated Services to ATM service\
    \ mappings are\n   covered in [6].  The full set of documents present the background\
    \ and\n   information needed to implement Integrated Services and RSVP over\n\
    \   ATM.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction .................................................\
    \  2\n      1.1 Terms ....................................................  2\n\
    \      1.2 Assumptions ..............................................  3\n   2.\
    \ General RSVP Session Support .................................  4\n      2.1\
    \ RSVP Message VC Usage ....................................  4\n      2.2 VC\
    \ Initiation ............................................  4\n      2.3 VC Teardown\
    \ ..............................................  5\n      2.4 Dynamic QoS ..............................................\
    \  6\n      2.5 Encapsulation ............................................  6\n\
    \   3. Multicast RSVP Session Support ...............................  7\n   \
    \   3.1 Data VC Management for Heterogeneous Sessions ............  7\n      3.2\
    \ Multicast End-Point Identification .......................  8\n      3.3 Multicast\
    \ Data Distribution ..............................  9\n      3.4 Receiver Transitions\
    \ ..................................... 11\n   4. Security Considerations ......................................\
    \ 11\n   5. Acknowledgments .............................................. 11\n\
    \   6. Author's Address ............................................. 12\n   REFERENCES\
    \ ...................................................... 13\n   FULL COPYRIGHT\
    \ STATEMENT ........................................ 14\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This memo discusses running IP over ATM in an environment\
    \ where SVCs\n   are used to support QoS flows and RSVP is used as the internet\
    \ level\n   QoS signaling protocol.  It applies when using CLIP/ION, LANE2.0 and\n\
    \   MPOA [4] methods for supporting IP over ATM.  The general issues\n   related\
    \ to running RSVP [8] over ATM have been covered in several\n   papers including\
    \ [9] and other earlier work.  This document is\n   intended as a companion to\
    \ [9,5].  The reader should be familiar with\n   both documents.\n   This document\
    \ defines the specific requirements for implementations\n   using ATM UNI3.x and\
    \ 4.0.  These requirements must be adhered to by\n   all RSVP over ATM implementations\
    \ to ensure interoperability.\n   Further recommendations to guide implementers\
    \ of RSVP over ATM are\n   provided in [5].\n   The rest of this section will\
    \ define terms and assumptions. Section 2\n   will cover implementation guidelines\
    \ common to all RSVP session.\n   Section 3 will cover implementation guidelines\
    \ specific to multicast\n   sessions.\n"
- title: 1.1 Terms
  contents:
  - "1.1 Terms\n   The terms \"reservation\" and \"flow\" are used in many contexts,\
    \ often\n   with different meaning.  These terms are used in this document with\n\
    \   the following meaning:\n   o    Reservation is used in this document to refer\
    \ to an RSVP\n        initiated request for resources.  RSVP initiates requests\
    \ for\n        resources based on RESV message processing.  RESV messages that\n\
    \        simply refresh state do not trigger resource requests.  Resource\n  \
    \      requests may be made based on RSVP sessions and RSVP reservation\n    \
    \    styles. RSVP styles dictate whether the reserved resources are\n        used\
    \ by one sender or shared by multiple senders.  See [8] for\n        details of\
    \ each. Each new request is referred to in this\n        document as an RSVP reservation,\
    \ or simply reservation.\n   o    Flow is used to refer to the data traffic associated\
    \ with a\n        particular reservation.  The specific meaning of flow is RSVP\n\
    \        style dependent.  For shared style reservations, there is one\n     \
    \   flow per session.  For distinct style reservations, there is one\n       \
    \ flow per sender (per session).\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [7].\n"
- title: 1.2 Assumptions
  contents:
  - "1.2 Assumptions\n   The following assumptions are made:\n   o    RSVP\n     \
    \   We assume RSVP as the internet signaling protocol which is\n        described\
    \ in [8].  The reader is assumed to be familiar with\n        [8].\n   o    IPv4\
    \ and IPv6\n        RSVP support has been defined for both IPv4 and IPv6.  The\n\
    \        guidelines in this document are intended to be used to support\n    \
    \    RSVP with either IPv4 or IPv6.  This document does not require\n        one\
    \ version over the other.\n   o    Best effort service model\n        The current\
    \ Internet only supports best effort service.  We\n        assume that as additional\
    \ components of the Integrated Services\n        model are defined, best effort\
    \ service must continue to be\n        supported.\n   o    ATM UNI 3.x and 4.0\n\
    \        We assume ATM service as defined by UNI 3.x and 4.0.  ATM\n        provides\
    \ both point-to-point and point-to-multipoint Virtual\n        Circuits (VCs)\
    \ with a specified Quality of Service (QoS).  ATM\n        provides both Permanent\
    \ Virtual Circuits (PVCs) and Switched\n        Virtual Circuits (SVCs).  In the\
    \ Permanent Virtual Circuit (PVC)\n        environment, PVCs are typically used\
    \ as point-to-point link\n        replacements.  So the support issues are similar\
    \ to point-to-\n        point links.  This memo assumes that SVCs are used to\
    \ support\n        RSVP over ATM.\n"
- title: 2. General RSVP Session Support
  contents:
  - "2. General RSVP Session Support\n   This section provides implementation requirements\
    \ that are common for\n   all (both unicast and multicast) RSVP sessions.  The\
    \ section covers\n   VC usage, QoS VC initiation, VC teardown, handling requested\
    \ changes\n   in QoS, and encapsulation.\n"
- title: 2.1 RSVP Message VC Usage
  contents:
  - "2.1 RSVP Message VC Usage\n   There are several RSVP Message VC Usage options\
    \ available to\n   implementers.  Implementers must select which VC to use for\
    \ RSVP\n   messages and how to aggregate RSVP sessions over QoS VCs.  These\n\
    \   options have been covered in [9] and some specific implementation\n   guidelines\
    \ are stated in [5].  In order to ensure interoperability\n   between implementations\
    \ that follow different options, RSVP over ATM\n   implementations MUST NOT send\
    \ RSVP (control) messages on the same QoS\n   VC as RSVP associated data packets.\
    \  RSVP over ATM implementations\n   MAY send RSVP messages on either the best\
    \ effort data path or on a\n   separate control VC.\n   Since RSVP (control) messages\
    \ and RSVP associated data packets are\n   not sent on the same VCs, it is possible\
    \ for a VC supporting one type\n   of traffic to fail while the other remains\
    \ in place.  When the VC\n   associated with data packets fails and cannot be\
    \ reestablished, RSVP\n   SHOULD treat this as an allocation failure.  When the\
    \ VC used to\n   forward RSVP control messages is abnormally released and cannot\
    \ be\n   reestablished, the RSVP associated QoS VCs MUST also be released.\n \
    \  The release of the associated data VCs is required to maintain the\n   synchronization\
    \ between forwarding and reservation states for the\n   associated data flows.\n"
- title: 2.2 VC Initiation
  contents:
  - "2.2 VC Initiation\n   There is an apparent mismatch between RSVP and ATM. Specifically,\n\
    \   RSVP control is receiver oriented and ATM control is sender oriented.\n  \
    \ This initially may seem like a major issue but really is not.  While\n   RSVP\
    \ reservation (RESV) requests are generated at the receiver,\n   actual allocation\
    \ of resources takes place at the subnet sender.\n   For data flows, this means\
    \ that subnet senders MUST establish all QoS\n   VCs and the RSVP enabled subnet\
    \ receiver MUST be able to accept\n   incoming QoS VCs.  These restrictions are\
    \ consistent with RSVP\n   version 1 processing rules and allow senders to use\
    \ different flow to\n   VC mappings and even different QoS renegotiation techniques\
    \ without\n   interoperability problems.  All RSVP over ATM approaches that have\n\
    \   VCs initiated and controlled by the subnet senders will interoperate.\n  \
    \ Figure 1 shows this model of data flow VC initiation.\n                    \
    \          Data Flow ==========>\n                      +-----+\n            \
    \          |     |      -------------->  +----+\n                      | Src |\
    \    -------------->    | R1 |\n                      |    *|  -------------->\
    \      +----+\n                      +-----+       QoS VCs\n                 \
    \          /\\\n                           ||\n                       VC  ||\n\
    \                       Initiator\n                     Figure 1: Data Flow VC\
    \ Initiation\n   RSVP over ATM implementations MAY send data in the backwards\n\
    \   direction on an RSVP initiated QoS point-to-point VC.  When sending\n   in\
    \ the backwards data path, the sender MUST ensure that the data\n   conforms to\
    \ the backwards direction traffic parameters.  Since the\n   traffic parameters\
    \ are set by the VC initiator, it is quite likely\n   that no resources will be\
    \ requested for traffic originating at the\n   called party.  It should be noted\
    \ that the backwards data path is not\n   available with point-to-multipoint VCs.\n"
- title: 2.3 VC Teardown
  contents:
  - "2.3 VC Teardown\n   VCs supporting IP over ATM data are typically torndown based\
    \ on\n   inactivity timers.  This mechanism is used since IP is connectionless\n\
    \   and there is therefore no way to know when a VC is no longer needed.\n   Since\
    \ RSVP provides explicit mechanisms (messages and timeouts) to\n   determine when\
    \ an associated data VC is no longer needed, the\n   traditional VC timeout mechanisms\
    \ are not needed. Additionally, under\n   normal operations RSVP implementations\
    \ expect to be able to allocate\n   resources and have those resources remain\
    \ allocated until released at\n   the direction of RSVP.  Therefore, data VCs\
    \ set up to support RSVP\n   controlled flows should only be released at the direction\
    \ of RSVP.\n   Such VCs must not be timed out due to inactivity by either the\
    \ VC\n   initiator or the VC receiver.  This conflicts with VCs timing out as\n\
    \   described in RFC 1755 [11], section 3.4 on VC Teardown.  RFC 1755\n   recommends\
    \ tearing down a VC that is inactive for a certain length of\n   time. Twenty\
    \ minutes is recommended.  This timeout is typically\n   implemented at both the\
    \ VC initiator and the VC receiver.  Although,\n   section 3.1 of the update to\
    \ RFC 1755 [12] states that inactivity\n   timers must not be used at the VC receiver.\n\
    \   In RSVP over ATM implementations, the configurable inactivity timer\n   mentioned\
    \ in [11] MUST be set to \"infinite\" for VCs initiated at the\n   request of\
    \ RSVP.  Setting the inactivity timer value at the VC\n   initiator should not\
    \ be problematic since the proper value can be\n   relayed internally at the originator.\
    \  Setting the inactivity timer\n   at the VC receiver is more difficult, and\
    \ would require some\n   mechanism to signal that an incoming VC was RSVP initiated.\
    \  To avoid\n   this complexity and to conform to [12], RSVP over ATM implementations\n\
    \   MUST not use an inactivity timer to clear any received connections.\n"
- title: 2.4 Dynamic QoS
  contents:
  - "2.4 Dynamic QoS\n   As stated in [9], there is a mismatch in the service provided\
    \ by RSVP\n   and that provided by ATM UNI3.x and 4.0.  RSVP allows modifications\n\
    \   to QoS parameters at any time while ATM does not support any\n   modifications\
    \ to QoS parameters post VC setup.  See [9] for more\n   detail.\n   The method\
    \ for supporting changes in RSVP reservations is to attempt\n   to replace an\
    \ existing VC with a new appropriately sized VC. During\n   setup of the replacement\
    \ VC, the old VC MUST be left in place\n   unmodified. The old VC is left unmodified\
    \ to minimize interruption of\n   QoS data delivery.  Once the replacement VC\
    \ is established, data\n   transmission is shifted to the new VC, and only then\
    \ is the old VC\n   closed.\n   If setup of the replacement VC fails, then the\
    \ old QoS VC MUST\n   continue to be used.  When the new reservation is greater\
    \ than the\n   old reservation, the reservation request MUST be answered with\
    \ an\n   error. When the new reservation is less than the old reservation, the\n\
    \   request MUST be treated as if the modification was successful.  While\n  \
    \ leaving the larger allocation in place is suboptimal, it maximizes\n   delivery\
    \ of service to the user.  The behavior is also required in\n   order to conform\
    \ to RSVP error handling as defined in sections 2.5,\n   3.1.8 and 3.11.2 of [8].\
    \  Implementations SHOULD retry replacing a\n   too large VC after some appropriate\
    \ elapsed time.\n   One additional issue is that only one QoS change can be processed\
    \ at\n   one time per reservation. If the (RSVP) requested QoS is changed\n  \
    \ while the first replacement VC is still being setup, then the\n   replacement\
    \ VC SHOULD BE released and the whole VC replacement\n   process is restarted.\
    \  Implementations MAY also limit number of\n   changes processed in a time period\
    \ per [9].\n"
- title: 2.5 Encapsulation
  contents:
  - "2.5 Encapsulation\n   There are multiple encapsulation options for data sent\
    \ over RSVP\n   triggered QoS VCs.  All RSVP over ATM implementations MUST be\
    \ able to\n   support LLC encapsulation per RFC 1483 [10] on such QoS VCs.\n \
    \  Implementations MAY negotiate alternative encapsulations using the\n   B-LLI\
    \ negotiation procedures defined in ATM Signalling, see [11] for\n   details.\
    \  When a QoS VC is only being used to carry IP packets,\n   implementations SHOULD\
    \ negotiate VC based multiplexing to avoid\n   incurring the overhead of the LLC\
    \ header.\n"
- title: 3. Multicast RSVP Session Support
  contents:
  - "3. Multicast RSVP Session Support\n   There are several aspects to running RSVP\
    \ over ATM that are unique to\n   multicast sessions.  This section addresses\
    \ multicast end-point\n   identification, multicast data distribution, multicast\
    \ receiver\n   transitions and next-hops requesting different QoS values\n   (heterogeneity)\
    \ which includes the handling of multicast best effort\n   receivers.  Handling\
    \ of best effort receivers is not strictly an RSVP\n   issue, but needs to be\
    \ addressed by any RSVP over ATM implementation\n   in order to maintain expected\
    \ best effort internet service.\n"
- title: 3.1 Data VC Management for Heterogeneous Sessions
  contents:
  - "3.1 Data VC Management for Heterogeneous Sessions\n   The issues relating to\
    \ data VC management of heterogeneous sessions\n   are covered in detail in [9].\
    \  In summary, heterogeneity occurs when\n   receivers request different levels\
    \ of QoS within a single session,\n   and also when some receivers do not request\
    \ any QoS.  Both types of\n   heterogeneity are shown in figure 2.\n         \
    \                        +----+\n                        +------> | R1 |\n   \
    \                     |        +----+\n                        |\n           \
    \             |        +----+\n           +-----+ -----+   +--> | R2 |\n     \
    \      |     | ---------+    +----+        Receiver Request Types:\n         \
    \  | Src |                             ---->  QoS 1 and QoS 2\n           |  \
    \   | .........+    +----+        ....>  Best-Effort\n           +-----+ .....+\
    \   +..> | R3 |\n                        :        +----+\n                   \
    \ /\\  :\n                    ||  :        +----+\n                    ||  +......>\
    \ | R4 |\n                    ||           +----+\n                  Single\n\
    \               IP Mulicast\n                  Group\n                 Figure\
    \ 2: Types of Multicast Receivers\n   [9] provides four models for dealing with\
    \ heterogeneity: full\n   heterogeneity, limited heterogeneity, homogeneous, and\
    \ modified\n   homogeneous models.  No matter which model or combination of models\n\
    \   is used by an implementation, implementations MUST NOT normally send\n   more\
    \ than one copy of a particular data packet to a particular next-\n   hop (ATM\
    \ end-point).  Some transient duplicate transmission is\n   acceptable, but only\
    \ during VC setup and transition.\n   Implementations MUST also ensure that data\
    \ traffic is sent to best\n   effort receivers.  Data traffic MAY be sent to best\
    \ effort receivers\n   via best effort or QoS VCs as is appropriate for the implemented\n\
    \   model.  In all cases, implementations MUST NOT create VCs in such a\n   way\
    \ that data cannot be sent to best effort receivers.  This includes\n   the case\
    \ of not being able to add a best effort receiver to a QoS VC,\n   but does not\
    \ include the case where best effort VCs cannot be setup.\n   The failure to establish\
    \ best effort VCs is considered to be a\n   general IP over ATM failure and is\
    \ therefore beyond the scope of this\n   document.\n   There is an interesting\
    \ interaction between dynamic QoS and\n   heterogeneous requests when using the\
    \ limited heterogeneity,\n   homogeneous, or modified homogeneous models.  In\
    \ the case where a\n   RESV message is received from a new next-hop and the requested\n\
    \   resources are larger than any existing reservation, both dynamic QoS\n   and\
    \ heterogeneity need to be addressed.  A key issue is whether to\n   first add\
    \ the new next-hop or to change to the new QoS.  This is a\n   fairly straight\
    \ forward special case.  Since the older, smaller\n   reservation does not support\
    \ the new next-hop, the dynamic QoS\n   process SHOULD be initiated first. Since\
    \ the new QoS is only needed\n   by the new next-hop, it SHOULD be the first end-point\
    \ of the new VC.\n   This way signaling is minimized when the setup to the new\
    \ next-hop\n   fails.\n"
- title: 3.2 Multicast End-Point Identification
  contents:
  - "3.2 Multicast End-Point Identification\n   Implementations must be able to identify\
    \ ATM end-points participating\n   in an IP multicast group.  The ATM end-points\
    \ will be IP multicast\n   receivers and/or next-hops.  Both QoS and best effort\
    \ end-points must\n   be identified.  RSVP next-hop information will usually provide\
    \ QoS\n   end-points, but not best effort end-points.\n   There is a special case\
    \ where RSVP next-hop information will not\n   provide the appropriate end-points.\
    \  This occurs when a next-hop is\n   not RSVP capable and RSVP is being automatically\
    \ tunneled. In this\n   case a PATH message travels through a non-RSVP egress\
    \ router on the\n   way to the next-hop RSVP node.  When the next-hop RSVP node\
    \ sends a\n   RESV message it may arrive at the source via a different route than\n\
    \   used by the PATH message.  The source will get the RESV message, but\n   will\
    \ not know which ATM end-point should be associated with the\n   reservation.\
    \ For unicast sessions, there is no problem since the ATM\n   end-point will be\
    \ the IP next-hop router.  There is a problem with\n   multicast, since multicast\
    \ routing may not be able to uniquely\n   identify the IP next-hop router.  It\
    \ is therefore possible for a\n   multicast end-point to not be properly identified.\n\
    \   In certain cases it is also possible to identify the list of all best\n  \
    \ effort end-points.  Some multicast over ATM control mechanisms, such\n   as\
    \ MARS in mesh mode, can be used to identify all end-points of a\n   multicast\
    \ group.  Also, some multicast routing protocols can  provide\n   all next-hops\
    \ for a particular multicast group.  In both cases, RSVP\n   over ATM implementations\
    \ can obtain a full list of end-points, both\n   QoS and non-QoS, using the appropriate\
    \ mechanisms.  The full list can\n   then be compared against the RSVP identified\
    \ end-points to determine\n   the list of best effort receivers.\n   While there\
    \ are cases where QoS and best effort end-points can be\n   identified, there\
    \ is no straightforward solution to uniquely\n   identifying end-points of multicast\
    \ traffic handled by non-RSVP\n   next-hops.  The preferred solution is to use\
    \ multicast control\n   mechanisms and routing protocols that support unique end-point\n\
    \   identification.  In cases where such mechanisms and routing protocols\n  \
    \ are unavailable, all IP routers that will be used to support RSVP\n   over ATM\
    \ should support RSVP. To ensure proper behavior, baseline\n   RSVP over ATM implementations\
    \ MUST only establish RSVP-initiated VCs\n   to RSVP capable end-points.  It is\
    \ permissible to allow a user to\n   override this behavior.\n"
- title: 3.3 Multicast Data Distribution
  contents:
  - "3.3 Multicast Data Distribution\n   Two basic models exist for IP multicast data\
    \ distribution over ATM.\n   In one model, senders establish point-to-multipoint\
    \ VCs to all ATM\n   attached destinations, and data is then sent over these VCs.\
    \  This\n   model is often called \"multicast mesh\" or \"VC mesh\" mode\n   distribution.\
    \  In the second model, senders send data over point-to-\n   point VCs to a central\
    \ point and the central point relays the data\n   onto point-to-multipoint VCs\
    \ that have been established to all\n   receivers of the IP multicast group. \
    \ This model is often referred to\n   as \"multicast server\" mode distribution.\
    \ Figure 3 shows data flow for\n   both modes of IP multicast data distribution.\n\
    \                            _________\n                           /         \\\
    \n                          / Multicast \\\n                          \\   Server\
    \  /\n                           \\_________/\n                             ^\
    \  |  |\n                             |  |  +--------+\n              +-----+\
    \        |  |           |\n              |     | -------+  |           |     \
    \    Data Flow:\n              | Src | ...+......|....+      V         ----> \
    \ Server\n              |     |    :      |    :    +----+      ....>  Mesh\n\
    \              +-----+    :      |    +...>| R1 |\n                         :\
    \      |         +----+\n                         :      V\n                 \
    \        :    +----+\n                         +..> | R2 |\n                 \
    \             +----+\n             Figure 3: IP Multicast Data Distribution Over\
    \ ATM\n   The goal of RSVP over ATM solutions is to ensure that IP multicast\n\
    \   data is distributed with appropriate QoS.  Current multicast servers\n   [1,2]\
    \ do not support any mechanisms for communicating QoS\n   requirements to a multicast\
    \ server.  For this reason, RSVP over ATM\n   implementations SHOULD support \"\
    mesh-mode\" distribution for RSVP\n   controlled multicast flows.  When using\
    \ multicast servers that do not\n   support QoS requests, a sender MUST set the\
    \ service, not global,\n   break bit(s). Use of the service-specific break bit\
    \ tells the\n   receiver(s) that RSVP and Integrated Services are supported by\
    \ the\n   router but that the service cannot be delivered over the ATM network\n\
    \   for the specific request.\n   In the case of MARS [1], the selection of distribution\
    \ modes is\n   administratively controlled.  Therefore network administrators\
    \ that\n   desire proper RSVP over ATM operation MUST appropriately configure\n\
    \   their network to support mesh mode distribution for multicast groups\n   that\
    \ will be used in RSVP sessions.  For LANE1.0 networks the only\n   multicast\
    \ distribution option is over the LANE Broadcast and Unknown\n   Server which\
    \ means that the break bit MUST always be set.  For\n   LANE2.0 [3] there are\
    \ provisions that allow for non-server solutions\n   with which it may be possible\
    \ to ensure proper QoS delivery.\n"
- title: 3.4 Receiver Transitions
  contents:
  - "3.4 Receiver Transitions\n   When setting up a point-to-multipoint VCs there\
    \ will be a time when\n   some receivers have been added to a QoS VC and some\
    \ have not.\n   During such transition times it is possible to start sending data\
    \ on\n   the newly established VC. If data is sent both on the new VC and the\n\
    \   old VC, then data will be delivered with proper QoS to some receivers\n  \
    \ and with the old QoS to all receivers.  Additionally, the QoS\n   receivers\
    \ would get duplicate data.  If data is sent just on the new\n   QoS VC, the receivers\
    \ that have not yet been added will miss data.\n   So, the issue comes down to\
    \ whether to send to both the old and new\n   VCs, or to just send to one of the\
    \ VCs.  In one case duplicate data\n   will be received, in the other some data\
    \ may not be received.  This\n   issue needs to be considered for three cases:\
    \ when establishing the\n   first QoS VC, when establishing a VC to support a\
    \ QoS change, and\n   when adding a new end-point to an already established QoS\
    \ VC.\n   The first two cases are essentially the same.  In both, it is\n   possible\
    \ to send data on the partially completed new VC.  In both,\n   there is the option\
    \ of duplicate or lost data.  In order to ensure\n   predictable behavior and\
    \ to conform to the requirement to deliver\n   data to all receivers, data MUST\
    \ NOT be sent on new VCs until all\n   parties have been added.  This will ensure\
    \ that all data is only\n   delivered once to all receivers.\n   The last case\
    \ differs from the others and occurs when an end-point\n   must be added to an\
    \ existing QoS VC.  In this case the end-point must\n   be both added to the QoS\
    \ VC and dropped from a best effort VC.  The\n   issue is which to do first. \
    \ If the add is first requested, then the\n   end-point may get duplicate data.\
    \  If the drop is requested first,\n   then the end-point may miss data.  In order\
    \ to avoid loss of data,\n   the add MUST be completed first and then followed\
    \ by the drop.  This\n   behavior requires receivers to be prepared to receive\
    \ some duplicate\n   packets at times of QoS setup.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   The same considerations stated in [8] and [11]\
    \ apply to this\n   document.  There are no additional security issues raised\
    \ in this\n   document.\n"
- title: 5. Acknowledgments
  contents:
  - "5. Acknowledgments\n   This work is based on earlier drafts and comments from\
    \ the ISSLL\n   working group.  The author would like to acknowledge their\n \
    \  contribution, most notably Steve Berson who coauthored one of the\n   drafts.\n"
- title: 6. Author's Address
  contents:
  - "6. Author's Address\n   Lou Berger\n   FORE Systems\n   1595 Spring Hill Road\n\
    \   5th Floor\n   Vienna, VA 22182\n   Phone: +1 703-245-4527\n   EMail: lberger@fore.com\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n   [1] Armitage, G., \"Support for Multicast over UNI 3.0/3.1 based\
    \ ATM\n       Networks,\" RFC 2022, November 1996.\n   [2] The ATM Forum, \"LAN\
    \ Emulation Over ATM Specification\", Version\n       1.0.\n   [3] The ATM Forum,\
    \ \"LAN Emulation over ATM Version 2 - LUNI\n       Specification\", April 1997.\n\
    \   [4] The ATM Forum, \"MPOA Baseline Version 1\", May 1997.\n   [5] Berger,\
    \ L., \"RSVP over ATM Implementation Guidelines\", BCP 24,\n       RFC 2379, August\
    \ 1998.\n   [6] Borden, M., and M. Garrett, \"Interoperation of Controlled-Load\n\
    \       and Guaranteed-Service with ATM\", RFC 2381, August 1998.\n   [7] Bradner,\
    \ S., \"Key words for use in RFCs to Indicate Requirement\n       Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [8] Braden, R., Zhang, L., Berson, S., Herzog,\
    \ S., and S. Jamin,\n       \"Resource ReSerVation Protocol (RSVP) -- Version\
    \ 1 Functional\n       Specification\", RFC 2205, September 1997.\n   [9] Crawley,\
    \ E., Berger, L., Berson, S., Baker, F., Borden, M., and\n       J. Krawczyk,\
    \ \"A Framework for Integrated Services and RSVP over\n       ATM\", RFC 2382,\
    \ August 1998.\n   [10] Heinanen, J., \"Multiprotocol Encapsulation over ATM Adaptation\n\
    \        Layer 5\", RFC 1483, July 1993.\n   [11] Perez, M., Liaw, F., Grossman,\
    \ D., Mankin, A., Hoffman, E., and\n        A. Malis, \"ATM Signalling Support\
    \ for IP over ATM\", RFC 1755,\n        February 1995.\n   [12] Maher, M., \"\
    ATM Signalling Support for IP over ATM - UNI 4.0\n        Update\", RFC 2331,\
    \ April 1998.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
