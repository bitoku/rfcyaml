- title: __initial_text__
  contents:
  - '                    The MD4 Message Digest Algorithm

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC is the specification of the MD4 Digest Algorithm.\
    \  If you\n   are going to implement MD4, it is suggested you do it this way.\
    \  This\n   memo is for informational use and does not constitute a standard.\n\
    \   Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1. Abstract
  contents:
  - "1. Abstract\n   This note describes the MD4 message digest algorithm.  The algorithm\n\
    \   takes as input an input message of arbitrary length and produces as\n   output\
    \ a 128-bit \"fingerprint\" or \"message digest\" of the input.  It\n   is conjectured\
    \ that it is computationally infeasible to produce two\n   messages having the\
    \ same message digest, or to produce any message\n   having a given prespecified\
    \ target message digest.  The MD4 algorithm\n   is thus ideal for digital signature\
    \ applications, where a large file\n   must be \"compressed\" in a secure manner\
    \ before being signed with the\n   RSA public-key cryptosystem.\n   The MD4 algorithm\
    \ is designed to be quite fast on 32-bit machines.\n   On a SUN Sparc station,\
    \ MD4 runs at 1,450,000 bytes/second.  On a DEC\n   MicroVax II, MD4 runs at approximately\
    \ 70,000 bytes/second.  On a\n   20MHz 80286, MD4 runs at approximately 32,000\
    \ bytes/second.  In\n   addition, the MD4 algorithm does not require any large\
    \ substitution\n   tables; the algorithm can be coded quite compactly.\n   The\
    \ MD4 algorithm is being placed in the public domain for review and\n   possible\
    \ adoption as a standard.\n   (Note: The document supersedes an earlier draft.\
    \  The algorithm\n   described here is a slight modification of the one described\
    \ in the\n   draft.)\n"
- title: 2.  Terminology and Notation
  contents:
  - "2.  Terminology and Notation\n   In this note a \"word\" is a 32-bit quantity\
    \ and a byte is an 8-bit\n   quantity.  A sequence of bits can be interpreted\
    \ in a natural manner\n   as a sequence of bytes, where each consecutive group\
    \ of 8 bits is\n   interpreted as a byte with the high-order (most significant)\
    \ bit of\n   each byte listed first.  Similarly, a sequence of bytes can be\n\
    \   interpreted as a sequence of 32-bit words, where each consecutive\n   group\
    \ of 4 bytes is interpreted as a word with the low-order (least\n   significant)\
    \ byte given first.\n   Let x_i denote \"x sub i\".  If the subscript is an expression,\
    \ we\n   surround it in braces, as in x_{i+1}.  Similarly, we use ^ for\n   superscripts\
    \ (exponentiation), so that x^i denotes x to the i-th\n   power.\n   Let the symbol\
    \ \"+\" denote addition of words (i.e., modulo- 2^32\n   addition). Let X <<<\
    \ s denote the 32-bit value obtained by circularly\n   shifting (rotating) X left\
    \ by s bit positions.  Let not(X) denote the\n   bit-wise complement of X, and\
    \ let X v Y denote the bit-wise OR of X\n   and Y.  Let X xor Y denote the bit-wise\
    \ XOR of X and Y, and let XY\n   denote the bit-wise AND of X and Y.\n"
- title: 3.  MD4 Algorithm Description
  contents:
  - "3.  MD4 Algorithm Description\n   We begin by supposing that we have a b-bit\
    \ message as input, and that\n   we wish to find its message digest.  Here b is\
    \ an arbitrary\n   nonnegative integer; b may be zero, it need not be a multiple\
    \ of 8,\n   and it may be arbitrarily large.  We imagine the bits of the message\n\
    \   written down as follows:\n                m_0 m_1 ... m_{b-1} .\n   The following\
    \ five steps are performed to compute the message digest\n   of the message.\n\
    \      Step 1. Append padding bits\n         The message is \"padded\" (extended)\
    \ so that its length (in bits)\n         is congruent to 448, modulo 512.  That\
    \ is, the message is\n         extended so that it is just 64 bits shy of being\
    \ a multiple of\n         512 bits long.  Padding is always performed, even if\
    \ the length\n         of the message is already congruent to 448, modulo 512\
    \ (in\n         which case 512 bits of padding are added).\n         Padding is\
    \ performed as follows: a single \"1\" bit is appended\n         to the message,\
    \ and then enough zero bits are appended so that\n         the length in bits\
    \ of the padded message becomes congruent to\n         448, modulo 512.\n    \
    \  Step 2. Append length\n         A 64-bit representation of b (the length of\
    \ the message before\n         the padding bits were added) is appended to the\
    \ result of the\n         previous step.  In the unlikely event that b is greater\
    \ than\n         2^64, then only the low-order 64 bits of b are used.  (These\n\
    \         bits are appended as two 32-bit words and appended low-order\n     \
    \    word first in accordance with the previous conventions.)\n         At this\
    \ point the resulting message (after padding with bits\n         and with b) has\
    \ a length that is an exact multiple of 512 bits.\n         Equivalently, this\
    \ message has a length that is an exact\n         multiple of 16 (32-bit) words.\
    \  Let M[0 ... N-1] denote the\n         words of the resulting message, where\
    \ N is a multiple of 16.\n      Step 3. Initialize MD buffer\n         A 4-word\
    \ buffer (A,B,C,D) is used to compute the message\n         digest.  Here each\
    \ of A,B,C,D are 32-bit registers.  These\n         registers are initialized\
    \ to the following values in\n         hexadecimal, low-order bytes first):\n\
    \            word A:    01 23 45 67\n            word B:    89 ab cd ef\n    \
    \        word C:    fe dc ba 98\n            word D:    76 54 32 10\n      Step\
    \ 4. Process message in 16-word blocks\n         We first define three auxiliary\
    \ functions that each take\n         as input three 32-bit words and produce as\
    \ output one\n         32-bit word.\n            f(X,Y,Z)  =  XY v not(X)Z\n \
    \           g(X,Y,Z)  =  XY v XZ v YZ\n            h(X,Y,Z)  =  X xor Y xor Z\n\
    \         In each bit position f acts as a conditional: if x then y else\n   \
    \      z.  (The function f could have been defined using + instead of\n      \
    \   v since XY and not(X)Z will never have 1's in the same bit\n         position.)\
    \  In each bit position g acts as a majority function:\n         if at least two\
    \ of x, y, z are on, then g has a one in that bit\n         position, else g has\
    \ a zero. It is interesting to note that if\n         the bits of X, Y, and Z\
    \ are independent and unbiased, the each\n         bit of f(X,Y,Z) will be independent\
    \ and unbiased, and similarly\n         each bit of g(X,Y,Z) will be independent\
    \ and unbiased.  The\n         function h is the bit-wise \"xor\" or \"parity\"\
    \ function; it has\n         properties similar to those of f and g.\n       \
    \  Do the following:\n         For i = 0 to N/16-1 do  /* process each 16-word\
    \ block */\n                 For j = 0 to 15 do: /* copy block i into X */\n \
    \                  Set X[j] to M[i*16+j].\n                 end /* of loop on\
    \ j */\n                 Save A as AA, B as BB, C as CC, and D as DD.\n      \
    \           [Round 1]\n                   Let [A B C D i s] denote the operation\n\
    \                         A = (A + f(B,C,D) + X[i]) <<< s  .\n               \
    \    Do the following 16 operations:\n                         [A B C D 0 3]\n\
    \                         [D A B C 1 7]\n                         [C D A B 2 11]\n\
    \                         [B C D A 3 19]\n                         [A B C D 4\
    \ 3]\n                         [D A B C 5 7]\n                         [C D A\
    \ B 6 11]\n                         [B C D A 7 19]\n                         [A\
    \ B C D 8 3]\n                         [D A B C 9 7]\n                       \
    \  [C D A B 10 11]\n                         [B C D A 11 19]\n               \
    \          [A B C D 12 3]\n                         [D A B C 13 7]\n         \
    \                [C D A B 14 11]\n                         [B C D A 15 19]\n \
    \                [Round 2]\n                   Let [A B C D i s] denote the operation\n\
    \                         A = (A + g(B,C,D) + X[i] + 5A827999) <<< s .\n     \
    \              (The value 5A..99 is a hexadecimal 32-bit\n                   constant,\
    \ written with the high-order digit\n                   first. This constant represents\
    \ the square\n                   root of 2.  The octal value of this constant\n\
    \                   is 013240474631.  See Knuth, The Art of\n                \
    \   Programming, Volume 2 (Seminumerical\n                   Algorithms), Second\
    \ Edition (1981),\n                   Addison-Wesley.  Table 2, page 660.)\n \
    \                  Do the following 16 operations:\n                         [A\
    \ B C D 0  3]\n                         [D A B C 4  5]\n                     \
    \    [C D A B 8  9]\n                         [B C D A 12 13]\n              \
    \           [A B C D 1  3]\n                         [D A B C 5  5]\n        \
    \                 [C D A B 9  9]\n                         [B C D A 13 13]\n \
    \                        [A B C D 2  3]\n                         [D A B C 6 \
    \ 5]\n                         [C D A B 10 9]\n                         [B C D\
    \ A 14 13]\n                         [A B C D 3  3]\n                        \
    \ [D A B C 7  5]\n                         [C D A B 11 9]\n                  \
    \       [B C D A 15 13]\n                 [Round 3]\n                   Let [A\
    \ B C D i s] denote the operation\n                         A = (A + h(B,C,D)\
    \ + X[i] + 6ED9EBA1) <<< s .\n                   (The value 6E..A1 is a hexadecimal\
    \ 32-bit\n                   constant, written with the high-order digit\n   \
    \                first.  This constant represents the square\n               \
    \    root of 3.  The octal value of this constant\n                   is 015666365641.\
    \  See Knuth, The Art of\n                   Programming, Volume 2 (Seminumerical\n\
    \                   Algorithms), Second Edition (1981),\n                   Addison-Wesley.\
    \  Table 2, page 660.)\n                   Do the following 16 operations:\n \
    \                        [A B C D 0  3]\n                         [D A B C 8 \
    \ 9]\n                         [C D A B 4  11]\n                         [B C\
    \ D A 12 15]\n                         [A B C D 2  3]\n                      \
    \   [D A B C 10 9]\n                         [C D A B 6  11]\n               \
    \          [B C D A 14 15]\n                         [A B C D 1  3]\n        \
    \                 [D A B C 9  9]\n                         [C D A B 5  11]\n \
    \                        [B C D A 13 15]\n                         [A B C D 3\
    \  3]\n                         [D A B C 11 9]\n                         [C D\
    \ A B 7  11]\n                         [B C D A 15 15]\n         Then perform\
    \ the following additions:\n                         A = A + AA\n            \
    \             B = B + BB\n                         C = C + CC\n              \
    \           D = D + DD\n         (That is, each of the four registers is incremented\
    \ by\n         the value it had before this block was started.)\n         end\
    \ /* of loop on i */\n      Step 5. Output\n         The message digest produced\
    \ as output is A,B,C,D.  That is, we\n         begin with the low-order byte of\
    \ A, and end with the high-order\n         byte of D.\n         This completes\
    \ the description of MD4.  A reference\n         implementation in C is given\
    \ in the Appendix.\n"
- title: 4.  Extensions
  contents:
  - "4.  Extensions\n   If more than 128 bits of output are required, then the following\n\
    \   procedure is recommended to obtain a 256-bit output.  (There is no\n   provision\
    \ made for obtaining more than 256 bits.)\n   Two copies of MD4 are run in parallel\
    \ over the input.  The first copy\n   is standard as described above.  The second\
    \ copy is modified as\n   follows.\n   The initial state of the second copy is:\n\
    \                    word A:    00 11 22 33\n                    word B:    44\
    \ 55 66 77\n                    word C:    88 99 aa bb\n                    word\
    \ D:    cc dd ee ff\n   The magic constants in rounds 2 and 3 for the second copy\
    \ of MD4 are\n   changed from sqrt(2) and sqrt(3) to cuberoot(2) and cuberoot(3):\n\
    \                                    Octal           Hex\n            Round 2\
    \ constant        012050505746    50a28be6\n            Round 3 constant     \
    \   013423350444    5c4dd124\n   Finally, after every 16-word block is processed\
    \ (including the last\n   block), the values of the A registers in the two copies\
    \ are\n   exchanged.\n   The final message digest is obtaining by appending the\
    \ result of the\n   second copy of MD4 to the end of the result of the first copy\
    \ of MD4.\n"
- title: 5.  Summary
  contents:
  - "5.  Summary\n   The MD4 message digest algorithm is simple to implement, and\
    \ provides\n   a \"fingerprint\" or message digest of a message of arbitrary length.\n\
    \   It is conjectured that the difficulty of coming up with two messages\n   having\
    \ the same message digest is on the order of 2^64 operations,\n   and that the\
    \ difficulty of coming up with any message having a given\n   message digest is\
    \ on the order of 2^128 operations.  The MD4\n   algorithm has been carefully\
    \ scrutinized for weaknesses.  It is,\n   however, a relatively new algorithm\
    \ and further security analysis is\n   of course justified, as is the case with\
    \ any new proposal of this\n   sort.  The level of security provided by MD4 should\
    \ be sufficient for\n   implementing very high security hybrid digital signature\
    \ schemes\n   based on MD4 and the RSA public-key cryptosystem.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   I'd like to thank Don Coppersmith, Burt Kaliski, Ralph\
    \ Merkle, and\n   Noam Nisan for numerous helpful comments and suggestions.\n"
- title: APPENDIX - Reference Implementation
  contents:
  - 'APPENDIX - Reference Implementation

    '
- title: 'This appendix contains the following files:'
  contents:
  - "This appendix contains the following files:\n         md4.h        -- header\
    \ file for using MD4 implementation\n         md4.c        -- the source code\
    \ for MD4 routines\n         md4driver.c  -- a sample \"user\" routine\n     \
    \    session      -- sample results of running md4driver\n /*\n ** ********************************************************************\n\
    \ ** md4.h -- Header file for implementation of                        **\n **\
    \ MD4 Message Digest Algorithm                                      **\n ** Updated:\
    \ 2/13/90 by Ronald L. Rivest                              **\n ** (C) 1990 RSA\
    \ Data Security, Inc.                                  **\n ** ********************************************************************\n\
    \ */\n /* MDstruct is the data structure for a message digest computation.\n */\n\
    \ typedef struct {\n   unsigned int buffer[4]; /* Holds 4-word result of MD computation\
    \ */\n   unsigned char count[8]; /* Number of bits processed so far */\n   unsigned\
    \ int done;      /* Nonzero means MD computation finished */\n } MDstruct, *MDptr;\n\
    \ /* MDbegin(MD)\n ** Input: MD -- an MDptr\n ** Initialize the MDstruct prepatory\
    \ to doing a message digest\n ** computation.\n */\n extern void MDbegin();\n\
    \ /* MDupdate(MD,X,count)\n ** Input: MD -- an MDptr\n **        X -- a pointer\
    \ to an array of unsigned characters.\n **        count -- the number of bits\
    \ of X to use (an unsigned int).\n ** Updates MD using the first \"count\" bits\
    \ of X.\n ** The array pointed to by X is not modified.\n ** If count is not a\
    \ multiple of 8, MDupdate uses high bits of\n ** last byte.\n ** This is the basic\
    \ input routine for a user.\n ** The routine terminates the MD computation when\
    \ count < 512, so\n ** every MD computation should end with one call to MDupdate\
    \ with a\n ** count less than 512.  Zero is OK for a count.\n */\n extern void\
    \ MDupdate();\n /* MDprint(MD)\n ** Input: MD -- an MDptr\n ** Prints message\
    \ digest buffer MD as 32 hexadecimal digits.\n ** Order is from low-order byte\
    \ of buffer[0] to high-order byte\n ** of buffer[3].\n ** Each byte is printed\
    \ with high-order hexadecimal digit first.\n */\n extern void MDprint();\n /*\n\
    \ ** End of md4.h\n ****************************(cut)***********************************/\n\
    \ /*\n ** ********************************************************************\n\
    \ ** md4.c -- Implementation of MD4 Message Digest Algorithm           **\n **\
    \ Updated: 2/16/90 by Ronald L. Rivest                              **\n ** (C)\
    \ 1990 RSA Data Security, Inc.                                  **\n ** ********************************************************************\n\
    \ */\n /*\n ** To use MD4:\n **   -- Include md4.h in your program\n **   -- Declare\
    \ an MDstruct MD to hold the state of the digest\n **          computation.\n\
    \ **   -- Initialize MD using MDbegin(&MD)\n **   -- For each full block (64 bytes)\
    \ X you wish to process, call\n **          MDupdate(&MD,X,512)\n **      (512\
    \ is the number of bits in a full block.)\n **   -- For the last block (less than\
    \ 64 bytes) you wish to process,\n **          MDupdate(&MD,X,n)\n **      where\
    \ n is the number of bits in the partial block. A partial\n **      block terminates\
    \ the computation, so every MD computation\n **      should terminate by processing\
    \ a partial block, even if it\n **      has n = 0.\n **   -- The message digest\
    \ is available in MD.buffer[0] ...\n **      MD.buffer[3].  (Least-significant\
    \ byte of each word\n **      should be output first.)\n **   -- You can print\
    \ out the digest using MDprint(&MD)\n */\n /* Implementation notes:\n ** This\
    \ implementation assumes that ints are 32-bit quantities.\n ** If the machine\
    \ stores the least-significant byte of an int in the\n ** least-addressed byte\
    \ (e.g., VAX and 8086), then LOWBYTEFIRST\n ** should be set to TRUE.  Otherwise\
    \ (e.g., SUNS), LOWBYTEFIRST\n ** should be set to FALSE.  Note that on machines\
    \ with LOWBYTEFIRST\n ** FALSE the routine MDupdate modifies has a side-effect\
    \ on its input\n ** array (the order of bytes in each word are reversed).  If\
    \ this is\n ** undesired a call to MDreverse(X) can reverse the bytes of X back\n\
    \ ** into order after each call to MDupdate.\n */\n #define TRUE  1\n #define\
    \ FALSE 0\n #define LOWBYTEFIRST FALSE\n /* Compile-time includes\n */\n #include\
    \ <stdio.h>\n #include \"md4.h\"\n /* Compile-time declarations of MD4 \"magic\
    \ constants\".\n */\n #define I0  0x67452301       /* Initial values for MD buffer\
    \ */\n #define I1  0xefcdab89\n #define I2  0x98badcfe\n #define I3  0x10325476\n\
    \ #define C2  013240474631     /* round 2 constant = sqrt(2) in octal */\n #define\
    \ C3  015666365641     /* round 3 constant = sqrt(3) in octal */\n /* C2 and C3\
    \ are from Knuth, The Art of Programming, Volume 2\n ** (Seminumerical Algorithms),\
    \ Second Edition (1981), Addison-Wesley.\n ** Table 2, page 660.\n */\n #define\
    \ fs1  3               /* round 1 shift amounts */\n #define fs2  7\n #define\
    \ fs3 11\n #define fs4 19\n #define gs1  3               /* round 2 shift amounts\
    \ */\n #define gs2  5\n #define gs3  9\n #define gs4 13\n #define hs1  3     \
    \          /* round 3 shift amounts */\n #define hs2  9\n #define hs3 11\n #define\
    \ hs4 15\n /* Compile-time macro declarations for MD4.\n ** Note: The \"rot\"\
    \ operator uses the variable \"tmp\".\n ** It assumes tmp is declared as unsigned\
    \ int, so that the >>\n ** operator will shift in zeros rather than extending\
    \ the sign bit.\n */\n #define f(X,Y,Z)             ((X&Y) | ((~X)&Z))\n #define\
    \ g(X,Y,Z)             ((X&Y) | (X&Z) | (Y&Z))\n #define h(X,Y,Z)            \
    \ (X^Y^Z)\n #define rot(X,S)             (tmp=X,(tmp<<S) | (tmp>>(32-S)))\n #define\
    \ ff(A,B,C,D,i,s)      A = rot((A + f(B,C,D) + X[i]),s)\n #define gg(A,B,C,D,i,s)\
    \      A = rot((A + g(B,C,D) + X[i] + C2),s)\n #define hh(A,B,C,D,i,s)      A\
    \ = rot((A + h(B,C,D) + X[i] + C3),s)\n /* MDprint(MDp)\n ** Print message digest\
    \ buffer MDp as 32 hexadecimal digits.\n ** Order is from low-order byte of buffer[0]\
    \ to high-order byte of\n ** buffer[3].\n ** Each byte is printed with high-order\
    \ hexadecimal digit first.\n ** This is a user-callable routine.\n */\n void\n\
    \ MDprint(MDp)\n MDptr MDp;\n { int i,j;\n   for (i=0;i<4;i++)\n     for (j=0;j<32;j=j+8)\n\
    \       printf(\"%02x\",(MDp->buffer[i]>>j) & 0xFF);\n }\n /* MDbegin(MDp)\n **\
    \ Initialize message digest buffer MDp.\n ** This is a user-callable routine.\n\
    \ */\n void\n MDbegin(MDp)\n MDptr MDp;\n { int i;\n   MDp->buffer[0] = I0;\n\
    \   MDp->buffer[1] = I1;\n   MDp->buffer[2] = I2;\n   MDp->buffer[3] = I3;\n \
    \  for (i=0;i<8;i++) MDp->count[i] = 0;\n   MDp->done = 0;\n }\n /* MDreverse(X)\n\
    \ ** Reverse the byte-ordering of every int in X.\n ** Assumes X is an array of\
    \ 16 ints.\n ** The macro revx reverses the byte-ordering of the next word of\
    \ X.\n */\n #define revx { t = (*X << 16) | (*X >> 16); \\\n      *X++ = ((t &\
    \ 0xFF00FF00) >> 8) | ((t & 0x00FF00FF) << 8); }\n MDreverse(X)\n unsigned int\
    \ *X;\n { register unsigned int t;\n   revx; revx; revx; revx; revx; revx; revx;\
    \ revx;\n   revx; revx; revx; revx; revx; revx; revx; revx;\n }\n /* MDblock(MDp,X)\n\
    \ ** Update message digest buffer MDp->buffer using 16-word data block X.\n **\
    \ Assumes all 16 words of X are full of data.\n ** Does not update MDp->count.\n\
    \ ** This routine is not user-callable.\n */\n static void\n MDblock(MDp,X)\n\
    \ MDptr MDp;\n unsigned int *X;\n {\n   register unsigned int tmp, A, B, C, D;\n\
    \ #if LOWBYTEFIRST == FALSE\n   MDreverse(X);\n #endif\n   A = MDp->buffer[0];\n\
    \   B = MDp->buffer[1];\n   C = MDp->buffer[2];\n   D = MDp->buffer[3];\n   /*\
    \ Update the message digest buffer */\n   ff(A , B , C , D ,  0 , fs1); /* Round\
    \ 1 */\n   ff(D , A , B , C ,  1 , fs2);\n   ff(C , D , A , B ,  2 , fs3);\n \
    \  ff(B , C , D , A ,  3 , fs4);\n   ff(A , B , C , D ,  4 , fs1);\n   ff(D ,\
    \ A , B , C ,  5 , fs2);\n   ff(C , D , A , B ,  6 , fs3);\n   ff(B , C , D ,\
    \ A ,  7 , fs4);\n   ff(A , B , C , D ,  8 , fs1);\n   ff(D , A , B , C ,  9 ,\
    \ fs2);\n   ff(C , D , A , B , 10 , fs3);\n   ff(B , C , D , A , 11 , fs4);\n\
    \   ff(A , B , C , D , 12 , fs1);\n   ff(D , A , B , C , 13 , fs2);\n   ff(C ,\
    \ D , A , B , 14 , fs3);\n   ff(B , C , D , A , 15 , fs4);\n   gg(A , B , C ,\
    \ D ,  0 , gs1); /* Round 2 */\n   gg(D , A , B , C ,  4 , gs2);\n   gg(C , D\
    \ , A , B ,  8 , gs3);\n   gg(B , C , D , A , 12 , gs4);\n   gg(A , B , C , D\
    \ ,  1 , gs1);\n   gg(D , A , B , C ,  5 , gs2);\n   gg(C , D , A , B ,  9 , gs3);\n\
    \   gg(B , C , D , A , 13 , gs4);\n   gg(A , B , C , D ,  2 , gs1);\n   gg(D ,\
    \ A , B , C ,  6 , gs2);\n   gg(C , D , A , B , 10 , gs3);\n   gg(B , C , D ,\
    \ A , 14 , gs4);\n   gg(A , B , C , D ,  3 , gs1);\n   gg(D , A , B , C ,  7 ,\
    \ gs2);\n   gg(C , D , A , B , 11 , gs3);\n   gg(B , C , D , A , 15 , gs4);\n\
    \   hh(A , B , C , D ,  0 , hs1); /* Round 3 */\n   hh(D , A , B , C ,  8 , hs2);\n\
    \   hh(C , D , A , B ,  4 , hs3);\n   hh(B , C , D , A , 12 , hs4);\n   hh(A ,\
    \ B , C , D ,  2 , hs1);\n   hh(D , A , B , C , 10 , hs2);\n   hh(C , D , A ,\
    \ B ,  6 , hs3);\n   hh(B , C , D , A , 14 , hs4);\n   hh(A , B , C , D ,  1 ,\
    \ hs1);\n   hh(D , A , B , C ,  9 , hs2);\n   hh(C , D , A , B ,  5 , hs3);\n\
    \   hh(B , C , D , A , 13 , hs4);\n   hh(A , B , C , D ,  3 , hs1);\n   hh(D ,\
    \ A , B , C , 11 , hs2);\n   hh(C , D , A , B ,  7 , hs3);\n   hh(B , C , D ,\
    \ A , 15 , hs4);\n   MDp->buffer[0] += A;\n   MDp->buffer[1] += B;\n   MDp->buffer[2]\
    \ += C;\n   MDp->buffer[3] += D;\n }\n /* MDupdate(MDp,X,count)\n ** Input: MDp\
    \ -- an MDptr\n **        X -- a pointer to an array of unsigned characters.\n\
    \ **        count -- the number of bits of X to use.\n **          (if not a multiple\
    \ of 8, uses high bits of last byte.)\n ** Update MDp using the number of bits\
    \ of X given by count.\n ** This is the basic input routine for an MD4 user.\n\
    \ ** The routine completes the MD computation when count < 512, so\n ** every\
    \ MD computation should end with one call to MDupdate with a\n ** count less than\
    \ 512.  A call with count 0 will be ignored if the\n ** MD has already been terminated\
    \ (done != 0), so an extra call with\n ** count 0 can be given as a \"courtesy\
    \ close\" to force termination\n ** if desired.\n */\n void\n MDupdate(MDp,X,count)\n\
    \ MDptr MDp;\n unsigned char *X;\n unsigned int count;\n { unsigned int i, tmp,\
    \ bit, byte, mask;\n   unsigned char XX[64];\n   unsigned char *p;\n   /* return\
    \ with no error if this is a courtesy close with count\n   ** zero and MDp->done\
    \ is true.\n   */\n   if (count == 0 && MDp->done) return;\n   /* check to see\
    \ if MD is already done and report error */\n   if (MDp->done)\n          { printf(\"\
    \\nError: MDupdate MD already done.\"); return; }\n   /* Add count to MDp->count\
    \ */\n   tmp = count;\n   p = MDp->count;\n   while (tmp)\n     { tmp += *p;\n\
    \       *p++ = tmp;\n       tmp = tmp >> 8;\n     }\n   /* Process data */\n \
    \  if (count == 512)\n     { /* Full block of data to handle */\n       MDblock(MDp,(unsigned\
    \ int *)X);\n     }\n   else if (count > 512) /* Check for count too large */\n\
    \     { printf(\"\\nError: MDupdate called with illegal count value %d.\"\n  \
    \            ,count);\n       return;\n     }\n   else /* partial block -- must\
    \ be last block so finish up */\n     { /* Find out how many bytes and residual\
    \ bits there are */\n       byte = count >> 3;\n       bit =  count & 7;\n   \
    \    /* Copy X into XX since we need to modify it */\n       for (i=0;i<=byte;i++)\
    \   XX[i] = X[i];\n       for (i=byte+1;i<64;i++) XX[i] = 0;\n       /* Add padding\
    \ '1' bit and low-order zeros in last byte */\n       mask = 1 << (7 - bit);\n\
    \       XX[byte] = (XX[byte] | mask) & ~( mask - 1);\n       /* If room for bit\
    \ count, finish up with this block */\n       if (byte <= 55)\n         { for\
    \ (i=0;i<8;i++) XX[56+i] = MDp->count[i];\n           MDblock(MDp,(unsigned int\
    \ *)XX);\n         }\n       else /* need to do two blocks to finish up */\n \
    \        { MDblock(MDp,(unsigned int *)XX);\n           for (i=0;i<56;i++) XX[i]\
    \ = 0;\n           for (i=0;i<8;i++)  XX[56+i] = MDp->count[i];\n           MDblock(MDp,(unsigned\
    \ int *)XX);\n         }\n       /* Set flag saying we're done with MD computation\
    \ */\n       MDp->done = 1;\n     }\n }\n /*\n ** End of md4.c\n ****************************(cut)***********************************/\n\
    \ /*\n ** ********************************************************************\n\
    \ ** md4driver.c -- sample routines to test                            **\n **\
    \ MD4 message digest algorithm.                                     **\n ** Updated:\
    \ 2/16/90 by Ronald L. Rivest                              **\n ** (C) 1990 RSA\
    \ Data Security, Inc.                                  **\n ** ********************************************************************\n\
    \ */\n #include <stdio.h>\n #include \"md4.h\"\n /* MDtimetrial()\n ** A time\
    \ trial routine, to measure the speed of MD4.\n ** Measures speed for 1M blocks\
    \ = 64M bytes.\n */\n MDtimetrial()\n { unsigned int X[16];\n   MDstruct MD;\n\
    \   int i;\n   double t;\n   for (i=0;i<16;i++) X[i] = 0x01234567 + i;\n   printf\n\
    \   (\"MD4 time trial. Processing 1 million 64-character blocks...\\n\");\n  \
    \ clock();\n   MDbegin(&MD);\n   for (i=0;i<1000000;i++) MDupdate(&MD,X,512);\n\
    \   MDupdate(&MD,X,0);\n   t = (double) clock(); /* in microseconds */\n   MDprint(&MD);\
    \ printf(\" is digest of 64M byte test input.\\n\");\n   printf(\"Seconds to process\
    \ test input:   %g\\n,t/1e6);\n   printf(\"Characters processed per second: %ld.\\\
    n,(int)(64e12/t));\n }\n /* MDstring(s)\n ** Computes the message digest for string\
    \ s.\n ** Prints out message digest, a space, the string (in quotes) and a\n **\
    \ carriage return.\n */\n MDstring(s)\n unsigned char *s;\n { unsigned int i,\
    \ len = strlen(s);\n   MDstruct MD;\n   MDbegin(&MD);\n   for (i=0;i+64<=len;i=i+64)\
    \ MDupdate(&MD,s+i,512);\n   MDupdate(&MD,s+i,(len-i)*8);\n   MDprint(&MD);\n\
    \   printf(\" \\\"%s\\\"\\n\",s);\n }\n /* MDfile(filename)\n ** Computes the\
    \ message digest for a specified file.\n ** Prints out message digest, a space,\
    \ the file name, and a\n ** carriage return.\n */\n MDfile(filename)\n char *filename;\n\
    \ { FILE *f = fopen(filename,\"rb\");\n   unsigned char X[64];\n   MDstruct MD;\n\
    \   int b;\n   if (f == NULL)\n      { printf(\"%s can't be opened.\\n\",filename);\
    \ return; }\n   MDbegin(&MD);\n   while ((b=fread(X,1,64,f))!=0) MDupdate(&MD,X,b*8);\n\
    \   MDupdate(&MD,X,0);\n   MDprint(&MD);\n   printf(\" %s\\n\",filename);\n  \
    \ fclose(f);\n }\n /* MDfilter()\n ** Writes the message digest of the data from\
    \ stdin onto stdout,\n ** followed by a carriage return.\n */\n MDfilter()\n {\
    \ unsigned char X[64];\n   MDstruct MD;\n   int b;\n   MDbegin(&MD);\n   while\
    \ ((b=fread(X,1,64,stdin))!=0) MDupdate(&MD,X,b*8);\n   MDupdate(&MD,X,0);\n \
    \  MDprint(&MD);\n   printf(\"\\n\");\n }\n /* MDtestsuite()\n ** Run a standard\
    \ suite of test data.\n */\n MDtestsuite()\n {\n   printf(\"MD4 test suite results:\\\
    n\");\n   MDstring(\"\");\n   MDstring(\"a\");\n   MDstring(\"abc\");\n   MDstring(\"\
    message digest\");\n   MDstring(\"abcdefghijklmnopqrstuvwxyz\");\n   MDstring\n\
    \   (\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\");\n  \
    \ MDfile(\"foo\"); /* Contents of file foo are \"abc\" */\n }\n main(argc,argv)\n\
    \ int argc;\n char *argv[];\n { int i;\n   /* For each command line argument in\
    \ turn:\n   ** filename          -- prints message digest and name of file\n \
    \  ** -sstring          -- prints message digest and contents of string\n   **\
    \ -t                -- prints time trial statistics for 64M bytes\n   ** -x  \
    \              -- execute a standard suite of test data\n   ** (no args)     \
    \    -- writes messages digest of stdin onto stdout\n   */\n   if (argc==1) MDfilter();\n\
    \   else\n     for (i=1;i<argc;i++)\n       if (argv[i][0]=='-' && argv[i][1]=='s')\
    \ MDstring(argv[i]+2);\n       else if (strcmp(argv[i],\"-t\")==0)       MDtimetrial();\n\
    \       else if (strcmp(argv[i],\"-x\")==0)       MDtestsuite();\n       else\
    \                                    MDfile(argv[i]);\n }\n /*\n ** end of md4driver.c\n\
    \ ****************************(cut)***********************************/\n --------------------------------------------------------------------\n\
    \ --- Sample session.  Compiling and using MD4 on SUN Sparcstation ---\n --------------------------------------------------------------------\n\
    \ >ls\n total 66\n -rw-rw-r--  1 rivest          3 Feb 14 17:40 abcfile\n -rwxrwxr-x\
    \  1 rivest      24576 Feb 17 12:28 md4\n -rw-rw-r--  1 rivest       9347 Feb\
    \ 17 00:37 md4.c\n -rw-rw-r--  1 rivest      25150 Feb 17 12:25 md4.doc\n -rw-rw-r--\
    \  1 rivest       1844 Feb 16 21:21 md4.h\n -rw-rw-r--  1 rivest       3497 Feb\
    \ 17 12:27 md4driver.c\n >\n >cc -o md4 -O4 md4.c md4driver.c\n md4.c:\n md4driver.c:\n\
    \ Linking:\n >\n >md4 -x\n MD4 test suite results:\n 31d6cfe0d16ae931b73c59d7e0c089c0\
    \ \"\"\n bde52cb31de33e46245e05fbdbd6fb24 \"a\"\n a448017aaf21d8525fc10ae87aa6729d\
    \ \"abc\"\n d9130a8164549fe818874806e1c7014b \"message digest\"\n d79e1c308aa5bbcdeea8ed63df412da9\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n 043f8582f241db351ce627e153e7f0e4\n      \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n a448017aaf21d8525fc10ae87aa6729d\
    \ abcfile\n >\n >md4 -sabc -shi\n a448017aaf21d8525fc10ae87aa6729d \"abc\"\n cfaee2512bd25eb033236f0cd054e308\
    \ \"hi\"\n >\n >md4 *\n a448017aaf21d8525fc10ae87aa6729d abcfile\n d316f994da0e951cf9502928a1f73300\
    \ md4\n 379adb39eada0dfdbbdfdcd0d9def8c4 md4.c\n 9a3f73327c65954198b1f45a3aa12665\
    \ md4.doc\n 37fe165ac177b461ff78b86d10e4ff33 md4.h\n 7dcba2e2dc4d8f1408d08beb17dabb2a\
    \ md4.o\n 08790161bfddc6f5788b4353875cb1c3 md4driver.c\n 1f84a7f690b0545d2d0480d5d3c26eea\
    \ md4driver.o\n >\n >cat abcfile | md4\n a448017aaf21d8525fc10ae87aa6729d\n >\n\
    \ >md4 -t\n MD4 time trial. Processing 1 million 64-character blocks...\n 6325bf77e5891c7c0d8104b64cc6e9ef\
    \ is digest of 64M byte test input.\n Seconds to process test input:   44.0982\n\
    \ Characters processed per second: 1451305.\n >\n >\n ------------------------\
    \ end of sample session --------------------\n      Note:  A version of this document\
    \ including the C source code is\n      available for FTP from THEORY.LSC.MIT.EDU\
    \ in the file \"md4.doc\".\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   The level of security discussed in this memo by MD4\
    \ is considered to\n   be sufficient for implementing very high security hybrid\
    \ digital\n   signature schemes based on MD4 and the RSA public-key cryptosystem.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Ronald L. Rivest\n   Massachusetts Institute of Technology\n\
    \   Laboratory for Computer Science\n   NE43-324\n   545 Technology Square\n \
    \  Cambridge, MA 02139-1986\n   Phone: (617) 253-5880\n   EMail: rivest@theory.lcs.mit.edu\n"
