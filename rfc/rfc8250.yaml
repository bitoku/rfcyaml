- title: __initial_text__
  contents:
  - '    IPv6 Performance and Diagnostic Metrics (PDM) Destination Option

    '
- title: Abstract
  contents:
  - "Abstract\n   To assess performance problems, this document describes optional\n\
    \   headers embedded in each packet that provide sequence numbers and\n   timing\
    \ information as a basis for measurements.  Such measurements\n   may be interpreted\
    \ in real time or after the fact.  This document\n   specifies the Performance\
    \ and Diagnostic Metrics (PDM) Destination\n   Options header.  The field limits,\
    \ calculations, and usage in\n   measurement of PDM are included in this document.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8250.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Background ......................................................3\n\
    \      1.1. Terminology ................................................3\n  \
    \    1.2. Rationale for Defined Solution .............................4\n    \
    \  1.3. IPv6 Transition Technologies ...............................4\n   2. Measurement\
    \ Information Derived from PDM ........................5\n      2.1. Round-Trip\
    \ Delay ...........................................5\n      2.2. Server Delay\
    \ ...............................................5\n   3. Performance and Diagnostic\
    \ Metrics Destination Option Layout ....6\n      3.1. Destination Options Header\
    \ .................................6\n      3.2. Performance and Diagnostic Metrics\
    \ Destination Option ......6\n           3.2.1. PDM Layout ..........................................6\n\
    \           3.2.2. Base Unit for Time Measurement ......................8\n  \
    \    3.3. Header Placement ...........................................9\n    \
    \  3.4. Header Placement Using IPsec ESP Mode ......................9\n      \
    \     3.4.1. Using ESP Transport Mode ...........................10\n        \
    \   3.4.2. Using ESP Tunnel Mode ..............................10\n      3.5.\
    \ Implementation Considerations .............................10\n           3.5.1.\
    \ PDM Activation .....................................10\n           3.5.2. PDM\
    \ Timestamps .....................................10\n      3.6. Dynamic Configuration\
    \ Options .............................11\n      3.7. Information Access and Storage\
    \ ............................11\n   4. Security Considerations ........................................11\n\
    \      4.1. Resource Consumption and Resource Consumption Attacks .....11\n  \
    \    4.2. Pervasive Monitoring ......................................12\n    \
    \  4.3. PDM as a Covert Channel ...................................12\n      4.4.\
    \ Timing Attacks ............................................13\n   5. IANA Considerations\
    \ ............................................13\n   6. References .....................................................14\n\
    \      6.1. Normative References ......................................14\n  \
    \    6.2. Informative References ....................................14\n   Appendix\
    \ A. Context for PDM .......................................15\n     A.1. End-User\
    \ Quality of Service (QoS) ..........................15\n     A.2. Need for a\
    \ Packet Sequence Number (PSN) ....................15\n     A.3. Rationale for\
    \ Defined Solution .............................15\n     A.4. Use PDM with Other\
    \ Headers .................................16\n   Appendix B. Timing Considerations\
    \ .................................16\n     B.1. Calculations of Time Differentials\
    \ .........................16\n     B.2. Considerations of This Time-Differential\
    \ Representation ....18\n       B.2.1. Limitations with This Encoding Method ..................18\n\
    \       B.2.2. Loss of Precision Induced by Timer Value Truncation ....19\n  \
    \ Appendix C. Sample Packet Flows ...................................20\n    \
    \ C.1. PDM Flow - Simple Client-Server Traffic ....................20\n      \
    \ C.1.1. Step 1 .................................................20\n       C.1.2.\
    \ Step 2 .................................................21\n       C.1.3. Step\
    \ 3 .................................................21\n       C.1.4. Step 4\
    \ .................................................23\n       C.1.5. Step 5 .................................................24\n\
    \     C.2. Other Flows ................................................24\n  \
    \     C.2.1. PDM Flow - One-Way Traffic .............................24\n    \
    \   C.2.2. PDM Flow - Multiple-Send Traffic .......................25\n      \
    \ C.2.3. PDM Flow - Multiple-Send Traffic with Errors ...........26\n   Appendix\
    \ D. Potential Overhead Considerations .....................28\n   Acknowledgments\
    \ ...................................................30\n   Authors' Addresses\
    \ ................................................30\n"
- title: 1.  Background
  contents:
  - "1.  Background\n   To assess performance problems, measurements based on optional\n\
    \   sequence numbers and timing may be embedded in each packet.  Such\n   measurements\
    \ may be interpreted in real time or after the fact.\n   As defined in RFC 8200\
    \ [RFC8200], destination options are carried by\n   the IPv6 Destination Options\
    \ extension header.  Destination options\n   include optional information that\
    \ need be examined only by the IPv6\n   node given as the destination address\
    \ in the IPv6 header, not by\n   routers or other \"middleboxes\".  This document\
    \ specifies the\n   Performance and Diagnostic Metrics (PDM) destination option.\
    \  The\n   field limits, calculations, and usage in measurement of the PDM\n \
    \  Destination Options header are included in this document.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 1.2.  Rationale for Defined Solution
  contents:
  - "1.2.  Rationale for Defined Solution\n   The current IPv6 specification does\
    \ not provide timing, nor does it\n   provide a similar field in the IPv6 main\
    \ header or in any extension\n   header.  The IPv6 PDM destination option provides\
    \ such fields.\n   Advantages include:\n   1. Real measure of actual transactions.\n\
    \   2. Ability to span organizational boundaries with consistent\n      instrumentation.\n\
    \   3. No time synchronization needed between session partners.\n   4. Ability\
    \ to handle all transport protocols (TCP, UDP, the Stream\n      Control Transmission\
    \ Protocol (SCTP), etc.) in a uniform way.\n   PDM provides the ability to determine\
    \ quickly if the (latency)\n   problem is in the network or in the server (application).\
    \  That is,\n   it is a fast way to do triage.  For more information on the\n\
    \   background and usage of PDM, see Appendix A.\n"
- title: 1.3.  IPv6 Transition Technologies
  contents:
  - "1.3.  IPv6 Transition Technologies\n   In the path to full implementation of\
    \ IPv6, transition technologies\n   such as translation or tunneling may be employed.\
    \  It is possible\n   that an IPv6 packet containing PDM may be dropped if using\
    \ IPv6\n   transition technologies.  For example, an implementation using a\n\
    \   translation technique (IPv6 to IPv4) that does not support or\n   recognize\
    \ the IPv6 Destination Options extension header may simply\n   drop the packet\
    \ rather than translating it without the extension\n   header.\n   It is also\
    \ possible that some devices in the network may not\n   correctly handle multiple\
    \ IPv6 extension headers, including the IPv6\n   Destination Option.  For example,\
    \ adding the PDM header to a packet\n   may push the Layer 4 information to a\
    \ point in the packet where it\n   is not visible to filtering logic, and the\
    \ packet may be dropped.\n   This kind of situation is expected to become rare\
    \ over time.\n"
- title: 2.  Measurement Information Derived from PDM
  contents:
  - "2.  Measurement Information Derived from PDM\n   Each packet contains information\
    \ about the sender and receiver.  In\n   IP, the identifying information is called\
    \ a \"5-tuple\".\n   The 5-tuple consists of:\n      SADDR: IP address of the\
    \ sender\n      SPORT: Port for the sender\n      DADDR: IP address of the destination\n\
    \      DPORT: Port for the destination\n      PROTC: Upper-layer protocol (TCP,\
    \ UDP, ICMP, etc.)\n   PDM contains the following base fields (scale fields intentionally\n\
    \   left out):\n      PSNTP   : Packet Sequence Number This Packet\n      PSNLR\
    \   : Packet Sequence Number Last Received\n      DELTATLR: Delta Time Last Received\n\
    \      DELTATLS: Delta Time Last Sent\n   Other fields for storing time scaling\
    \ factors are also in PDM and\n   will be described in Section 3.\n   This information,\
    \ combined with the 5-tuple, allows the measurement\n   of the following metrics:\n\
    \   1. Round-trip delay\n   2. Server delay\n"
- title: 2.1.  Round-Trip Delay
  contents:
  - "2.1.  Round-Trip Delay\n   Round-trip *network* delay is the delay for packet\
    \ transfer from a\n   source host to a destination host and then back to the source\
    \ host.\n   This measurement has been defined, and its advantages and\n   disadvantages\
    \ are discussed in \"A Round-trip Delay Metric for IPPM\"\n   [RFC2681].\n"
- title: 2.2.  Server Delay
  contents:
  - "2.2.  Server Delay\n   Server delay is the interval between when a packet is\
    \ received by a\n   device and the first corresponding packet is sent back in\
    \ response.\n   This may be \"server processing time\".  It may also be a delay\
    \ caused\n   by acknowledgments.  Server processing time includes the time taken\n\
    \   by the combination of the stack and application to return the\n   response.\
    \  The stack delay may be related to network performance.  If\n   this aggregate\
    \ time is seen as a problem and there is a need to make\n   a clear distinction\
    \ between application processing time and stack\n   delay, including that caused\
    \ by the network, then more client-based\n   measurements are needed.\n"
- title: 3.  Performance and Diagnostic Metrics Destination Option Layout
  contents:
  - '3.  Performance and Diagnostic Metrics Destination Option Layout

    '
- title: 3.1.  Destination Options Header
  contents:
  - "3.1.  Destination Options Header\n   The IPv6 Destination Options extension header\
    \ [RFC8200] is used to\n   carry optional information that needs to be examined\
    \ only by a\n   packet's destination node(s).  The Destination Options header\
    \ is\n   identified by a Next Header value of 60 in the immediately preceding\n\
    \   header and is defined in RFC 8200 [RFC8200].  The IPv6 Performance\n   and\
    \ Diagnostic Metrics (PDM) destination option is implemented as an\n   IPv6 Option\
    \ carried in the Destination Options header.  PDM does not\n   require time synchronization.\n"
- title: 3.2.  Performance and Diagnostic Metrics Destination Option
  contents:
  - '3.2.  Performance and Diagnostic Metrics Destination Option

    '
- title: 3.2.1.  PDM Layout
  contents:
  - "3.2.1.  PDM Layout\n   The IPv6 PDM destination option contains the following\
    \ fields:\n      SCALEDTLR: Scale for Delta Time Last Received\n      SCALEDTLS:\
    \ Scale for Delta Time Last Sent\n      PSNTP    : Packet Sequence Number This\
    \ Packet\n      PSNLR    : Packet Sequence Number Last Received\n      DELTATLR\
    \ : Delta Time Last Received\n      DELTATLS : Delta Time Last Sent\n   PDM has\
    \ alignment requirements.  Following the convention in IPv6,\n   these options\
    \ are aligned in a packet so that multi-octet values\n   within the Option Data\
    \ field of each option fall on natural\n   boundaries (i.e., fields of width n\
    \ octets are placed at an integer\n   multiple of n octets from the start of the\
    \ header, for n = 1, 2, 4,\n   or 8) [RFC8200].\n   The PDM destination option\
    \ is encoded in type-length-value (TLV)\n   format as follows:\n       0     \
    \              1                   2                   3\n       0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Option Type  | Option Length |    ScaleDTLR  |     ScaleDTLS |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \   PSN This Packet             |  PSN Last Received            |\n      |-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Delta Time Last Received    |  Delta Time Last Sent         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Option\
    \ Type\n         0x0F\n         In keeping with RFC 8200 [RFC8200], the two high-order\
    \ bits of\n         the Option Type field are encoded to indicate specific\n \
    \        processing of the option; for the PDM destination option, these\n   \
    \      two bits MUST be set to 00.\n         The third high-order bit of the Option\
    \ Type field specifies\n         whether or not the Option Data of that option\
    \ can change\n         en route to the packet's final destination.\n         In\
    \ PDM, the value of the third high-order bit MUST be 0.\n      Option Length\n\
    \         8-bit unsigned integer.  Length of the option, in octets,\n        \
    \ excluding the Option Type and Option Length fields.  This field\n         MUST\
    \ be set to 10.\n      Scale Delta Time Last Received (SCALEDTLR)\n         8-bit\
    \ unsigned integer.  This is the scaling value for the\n         Delta Time Last\
    \ Received (DELTATLR) field.  The possible values\n         are from 0 to 255.\
    \  See Appendix B for further discussion on\n         timing considerations and\
    \ formatting of the scaling values.\n      Scale Delta Time Last Sent (SCALEDTLS)\n\
    \         8-bit signed integer.  This is the scaling value for the Delta\n   \
    \      Time Last Sent (DELTATLS) field.  The possible values are from\n      \
    \   0 to 255.\n      Packet Sequence Number This Packet (PSNTP)\n         16-bit\
    \ unsigned integer.  This field will wrap.  It is intended\n         for use while\
    \ analyzing packet traces.\n         This field is initialized at a random number\
    \ and incremented\n         monotonically for each packet of the session flow\
    \ of the\n         5-tuple.  The random-number initialization is intended to make\n\
    \         it harder to spoof and insert such packets.\n         Operating systems\
    \ MUST implement a separate packet sequence\n         number counter per 5-tuple.\n\
    \      Packet Sequence Number Last Received (PSNLR)\n         16-bit unsigned\
    \ integer.  This is the PSNTP of the packet last\n         received on the 5-tuple.\n\
    \         This field is initialized to 0.\n      Delta Time Last Received (DELTATLR)\n\
    \         16-bit unsigned integer.  The value is set according to the\n      \
    \   scale in SCALEDTLR.\n         Delta Time Last Received =\n            (send\
    \ time packet n - receive time packet (n - 1))\n      Delta Time Last Sent (DELTATLS)\n\
    \         16-bit unsigned integer.  The value is set according to the\n      \
    \   scale in SCALEDTLS.\n         Delta Time Last Sent =\n            (receive\
    \ time packet n - send time packet (n - 1))\n"
- title: 3.2.2.  Base Unit for Time Measurement
  contents:
  - "3.2.2.  Base Unit for Time Measurement\n   A time differential is always a whole\
    \ number in a CPU; it is the unit\n   specification -- hours, seconds, nanoseconds\
    \ -- that determines what\n   the numeric value means.  For PDM, the base time\
    \ unit is 1 attosecond\n   (asec).  This allows for a common unit and scaling\
    \ of the time\n   differential among all IP stacks and hardware implementations.\n\
    \   Note that PDM provides the ability to measure both time differentials\n  \
    \ that are extremely small and time differentials in a Delay/Disruption\n   Tolerant\
    \ Networking (DTN) environment where the delays may be very\n   great.  To store\
    \ a time differential in just 16 bits that must range\n   in this way will require\
    \ some scaling of the time-differential value.\n   One issue is the conversion\
    \ from the native time base in the CPU\n   hardware of whatever device is in use\
    \ to some number of attoseconds.\n   It might seem that this will be an astronomical\
    \ number, but the\n   conversion is straightforward.  It involves multiplication\
    \ by an\n   appropriate power of 10 to change the value into a number of\n   attoseconds.\
    \  Then, to scale the value so that it fits into DELTATLR\n   or DELTATLS, the\
    \ value is shifted by a number of bits, retaining the\n   16 high-order or most\
    \ significant bits.  The number of bits shifted\n   becomes the scaling factor,\
    \ stored as SCALEDTLR or SCALEDTLS,\n   respectively.  For additional information\
    \ on this process, see\n   Appendix B.\n"
- title: 3.3.  Header Placement
  contents:
  - "3.3.  Header Placement\n   The PDM destination option is placed as defined in\
    \ RFC 8200\n   [RFC8200].  There may be a choice of where to place the Destination\n\
    \   Options header.  If using Encapsulating Security Payload (ESP) mode,\n   please\
    \ see Section 3.4 of this document regarding the placement of\n   the PDM Destination\
    \ Options header.\n   For each IPv6 packet header, PDM MUST NOT appear more than\
    \ once.\n   However, an encapsulated packet MAY contain a separate PDM associated\n\
    \   with each encapsulated IPv6 header.\n"
- title: 3.4.  Header Placement Using IPsec ESP Mode
  contents:
  - "3.4.  Header Placement Using IPsec ESP Mode\n   IPsec ESP is defined in [RFC4303]\
    \ and is widely used.  Section 3.1.1\n   of [RFC4303] discusses the placement\
    \ of Destination Options headers.\n   The placement of PDM is different, depending\
    \ on whether ESP is used\n   in tunnel mode or transport mode.\n   In the ESP\
    \ case, no 5-tuple is available, as there are no port\n   numbers.  ESP flow should\
    \ be identified only by using SADDR, DADDR,\n   and PROTC.  The Security Parameter\
    \ Index (SPI) numbers SHOULD be\n   ignored when considering the flow over which\
    \ PDM information is\n   measured.\n"
- title: 3.4.1.  Using ESP Transport Mode
  contents:
  - "3.4.1.  Using ESP Transport Mode\n   Note that destination options may be placed\
    \ before or after ESP, or\n   both.  If using PDM in ESP transport mode, PDM MUST\
    \ be placed after\n   the ESP header so as not to leak information.\n"
- title: 3.4.2.  Using ESP Tunnel Mode
  contents:
  - "3.4.2.  Using ESP Tunnel Mode\n   Note that in both the outer set of IP headers\
    \ and the inner set of IP\n   headers, destination options may be placed before\
    \ or after ESP, or\n   both.  A tunnel endpoint that creates a new packet may\
    \ decide to use\n   PDM independently of the use of PDM of the original packet\
    \ to enable\n   delay measurements between the two tunnel endpoints.\n"
- title: 3.5.  Implementation Considerations
  contents:
  - '3.5.  Implementation Considerations

    '
- title: 3.5.1.  PDM Activation
  contents:
  - "3.5.1.  PDM Activation\n   An implementation should provide an interface to enable\
    \ or disable\n   the use of PDM.  This specification recommends having PDM off\
    \ by\n   default.\n   PDM MUST NOT be turned on merely if a packet is received\
    \ with a PDM\n   header.  The received packet could be spoofed by another device.\n"
- title: 3.5.2.  PDM Timestamps
  contents:
  - "3.5.2.  PDM Timestamps\n   The PDM timestamps are intended to isolate wire time\
    \ from server or\n   host time but may necessarily attribute some host processing\
    \ time to\n   network latency.\n   Section 10.2 of RFC 2330 [RFC2330] (\"Framework\
    \ for IP Performance\n   Metrics\") describes two notions of \"wire time\".  These\
    \ notions are\n   only defined in terms of an Internet host H observing an Internet\n\
    \   link L at a particular location:\n   +  For a given IP packet P, the \"wire\
    \ arrival time\" of P at H on L is\n      the first time T at which any bit of\
    \ P has appeared at H's\n      observational position on L.\n   +  For a given\
    \ IP packet P, the \"wire exit time\" of P at H on L is\n      the first time\
    \ T at which all the bits of P have appeared at H's\n      observational position\
    \ on L.\n   This specification does not define H's exact observational position\n\
    \   on L.  That is left for the deployment setups to define.  However,\n   the\
    \ position where PDM timestamps are taken SHOULD be as close to the\n   physical\
    \ network interface as possible.  Not all implementations will\n   be able to\
    \ achieve the ideal level of measurement.\n"
- title: 3.6.  Dynamic Configuration Options
  contents:
  - "3.6.  Dynamic Configuration Options\n   If the PDM Destination Options header\
    \ is used, then it MAY be turned\n   on for all packets flowing through the host,\
    \ applied to an upper-\n   layer protocol (TCP, UDP, SCTP, etc.), a local port,\
    \ or IP address\n   only.  These are at the discretion of the implementation.\n"
- title: 3.7.  Information Access and Storage
  contents:
  - "3.7.  Information Access and Storage\n   Measurement information provided by\
    \ PDM may be made accessible for\n   higher layers or the user itself.  Similar\
    \ to activating the use of\n   PDM, the implementation may also provide an interface\
    \ to indicate if\n   received.\n   PDM information may be stored, if desired.\
    \  If a packet with PDM\n   information is received and the information should\
    \ be stored, the\n   upper layers may be notified.  Furthermore, the implementation\
    \ should\n   define a configurable maximum lifetime after which the information\n\
    \   can be removed as well as a configurable maximum amount of memory\n   that\
    \ should be allocated for PDM information.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   PDM may introduce some new security weaknesses.\n"
- title: 4.1.  Resource Consumption and Resource Consumption Attacks
  contents:
  - "4.1.  Resource Consumption and Resource Consumption Attacks\n   PDM needs to\
    \ calculate the deltas for time and keep track of the\n   sequence numbers.  This\
    \ means that control blocks that reside in\n   memory may be kept at the end hosts\
    \ per 5-tuple.\n   A limit on how much memory is being used SHOULD be implemented.\n\
    \   Without a memory limit, any time that a control block is kept in\n   memory,\
    \ an attacker can try to misuse the control blocks to cause\n   excessive resource\
    \ consumption.  This could be used to compromise the\n   end host.\n   PDM is\
    \ used only at the end hosts, and memory is used only at the end\n   host and\
    \ not at routers or middleboxes.\n"
- title: 4.2.  Pervasive Monitoring
  contents:
  - "4.2.  Pervasive Monitoring\n   Since PDM passes in the clear, a concern arises\
    \ as to whether the\n   data can be used to fingerprint the system or somehow\
    \ obtain\n   information about the contents of the payload.\n   Let us discuss\
    \ fingerprinting of the end host first.  It is possible\n   that seeing the pattern\
    \ of deltas or the absolute values could give\n   some information as to the speed\
    \ of the end host -- that is, if it is\n   a very fast system or an older, slow\
    \ device.  This may be useful to\n   the attacker.  However, if the attacker has\
    \ access to PDM, the\n   attacker also has access to the entire packet and could\
    \ make such a\n   deduction based merely on the time frames elapsed between packets\n\
    \   WITHOUT PDM.\n   As far as deducing the content of the payload, in terms of\
    \ the\n   application-level information such as web page, user name, user\n  \
    \ password, and so on, it appears to us that PDM is quite unhelpful in\n   this\
    \ regard.  Having said that, the ability to separate wire time\n   from processing\
    \ time may potentially provide an attacker with\n   additional information.  It\
    \ is conceivable that an attacker could\n   attempt to deduce the type of application\
    \ in use by noting the server\n   time and payload length.  Some encryption algorithms\
    \ attempt to\n   obfuscate the packet length to avoid just such vulnerabilities.\
    \  In\n   the future, encryption algorithms may wish to obfuscate the server\n\
    \   time as well.\n"
- title: 4.3.  PDM as a Covert Channel
  contents:
  - "4.3.  PDM as a Covert Channel\n   PDM provides a set of fields in the packet\
    \ that could be used to leak\n   data.  But there is no real reason to suspect\
    \ that PDM would be\n   chosen rather than another part of the payload or another\
    \ extension\n   header.\n   A firewall or another device could sanity-check the\
    \ fields within\n   PDM, but randomly assigned sequence numbers and delta times\
    \ might be\n   expected to vary widely.  The biggest problem, though, is how an\n\
    \   attacker would get access to PDM in the first place to leak data.\n   The\
    \ attacker would have to either compromise the end host or have a\n   Man in the\
    \ Middle (MitM).  It is possible that either one could\n   change the fields,\
    \ but the other end host would then get sequence\n   numbers and deltas that don't\
    \ make any sense.\n   It is conceivable that someone could compromise an end host\
    \ and make\n   it start sending packets with PDM without the knowledge of the\
    \ host.\n   But, again, the bigger problem is the compromise of the end host.\n\
    \   Once that is done, the attacker probably has better ways to\n   leak data.\n\
    \   Having said that, if a PDM-aware middlebox or an implementation\n   (destination\
    \ host) detects some number of \"nonsensical\" sequence\n   numbers or timing\
    \ information, it could take action to block this\n   traffic, discard it, or\
    \ send an alert.\n"
- title: 4.4.  Timing Attacks
  contents:
  - "4.4.  Timing Attacks\n   The fact that PDM can help in the separation of node\
    \ processing time\n   from network latency brings value to performance monitoring.\
    \  Yet, it\n   is this very characteristic of PDM that may be misused to make\n\
    \   certain new types of timing attacks against protocols and\n   implementations\
    \ possible.\n   Depending on the nature of the cryptographic protocol used, it\
    \ may be\n   possible to leak the credentials of the device.  For example, if\
    \ an\n   attacker can see that PDM is being used, then the attacker might use\n\
    \   PDM to launch a timing attack against the keying material used by the\n  \
    \ cryptographic protocol.\n   An implementation may want to be sure that PDM is\
    \ enabled only for\n   certain IP addresses or only for some ports.  Additionally,\
    \ the\n   implementation SHOULD require an explicit restart of monitoring after\n\
    \   a certain time period (for example, after 1 hour) to make sure that\n   PDM\
    \ is not accidentally left on (for example, after debugging has\n   been done).\n\
    \   Even so, if using PDM, a user \"Consent to be Measured\" SHOULD be a\n   prerequisite\
    \ for using PDM.  Consent is common in enterprises and\n   with some subscription\
    \ services.  The actual content of \"Consent to\n   be Measured\" will differ\
    \ by site, but it SHOULD make clear that the\n   traffic is being measured for\
    \ Quality of Service (QoS) and to assist\n   in diagnostics, as well as to make\
    \ clear that there may be potential\n   risks of certain vulnerabilities if the\
    \ traffic is captured during a\n   diagnostic session.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   IANA has registered a Destination Option Type assignment\
    \ with the act\n   bits set to 00 and the chg bit set to 0 from the \"Destination\
    \ Options\n   and Hop-by-Hop Options\" sub-registry of the \"Internet Protocol\n\
    \   Version 6 (IPv6) Parameters\" registry [RFC2780] at\n   <https://www.iana.org/assignments/ipv6-parameters/>.\n\
    \   Hex Value     Binary Value      Description                 Reference\n  \
    \               act  chg  rest\n   ---------------------------------------------------------------------\n\
    \   0x0F          00   0    01111   Performance and             RFC 8250\n   \
    \                                Diagnostic Metrics (PDM)\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC1122]  Braden, R., Ed., \"Requirements for\
    \ Internet Hosts -\n              Communication Layers\", STD 3, RFC 1122,\n \
    \             DOI 10.17487/RFC1122, October 1989,\n              <https://www.rfc-editor.org/info/rfc1122>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2681]\
    \  Almes, G., Kalidindi, S., and M. Zekauskas, \"A Round-trip\n              Delay\
    \ Metric for IPPM\", RFC 2681, DOI 10.17487/RFC2681,\n              September\
    \ 1999, <https://www.rfc-editor.org/info/rfc2681>.\n   [RFC2780]  Bradner, S.\
    \ and V. Paxson, \"IANA Allocation Guidelines For\n              Values In the\
    \ Internet Protocol and Related Headers\",\n              BCP 37, RFC 2780, DOI\
    \ 10.17487/RFC2780, March 2000,\n              <https://www.rfc-editor.org/info/rfc2780>.\n\
    \   [RFC4303]  Kent, S., \"IP Encapsulating Security Payload (ESP)\",\n      \
    \        RFC 4303, DOI 10.17487/RFC4303, December 2005,\n              <https://www.rfc-editor.org/info/rfc4303>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n         \
    \     RFC 2119 Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174,\
    \ May 2017,\n              <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8200]\
    \  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6)\
    \ Specification\", STD 86, RFC 8200,\n              DOI 10.17487/RFC8200, July\
    \ 2017,\n              <https://www.rfc-editor.org/info/rfc8200>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC2330]  Paxson, V., Almes, G., Mahdavi, J.,\
    \ and M. Mathis,\n              \"Framework for IP Performance Metrics\", RFC\
    \ 2330,\n              DOI 10.17487/RFC2330, May 1998,\n              <https://www.rfc-editor.org/info/rfc2330>.\n\
    \   [TCPM]     Scheffenegger, R., Kuehlewind, M., and B. Trammell,\n         \
    \     \"Encoding of Time Intervals for the TCP Timestamp Option\",\n         \
    \     Work in Progress, draft-trammell-tcpm-timestamp-\n              interval-01,\
    \ July 2013.\n"
- title: Appendix A.  Context for PDM
  contents:
  - 'Appendix A.  Context for PDM

    '
- title: A.1.  End-User Quality of Service (QoS)
  contents:
  - "A.1.  End-User Quality of Service (QoS)\n   The timing values in PDM embedded\
    \ in the packet will be used to\n   estimate QoS as experienced by an end-user\
    \ device.\n   For many applications, the key user performance indicator is response\n\
    \   time.  When the end user is an individual, he is generally\n   indifferent\
    \ to what is happening along the network; what he really\n   cares about is how\
    \ long it takes to get a response back.  But this is\n   not just a matter of\
    \ individuals' personal convenience.  In many\n   cases, rapid response is critical\
    \ to the business being conducted.\n   Low, reliable, and acceptable response\
    \ times are not just \"nice to\n   have\".  On many networks, the impact can be\
    \ financial hardship or can\n   endanger human life.  In some cities, the emergency\
    \ police contact\n   system operates over IP; all levels of law enforcement use\
    \ IP\n   networks; transactions on our stock exchanges are settled using IP\n\
    \   networks.  The critical nature of such activities to our daily lives\n   and\
    \ financial well-being demands a simple solution to support\n   response-time\
    \ measurements.\n"
- title: A.2.  Need for a Packet Sequence Number (PSN)
  contents:
  - "A.2.  Need for a Packet Sequence Number (PSN)\n   While performing network diagnostics\
    \ on an end-to-end connection, it\n   often becomes necessary to isolate the factors\
    \ along the network path\n   responsible for problems.  Diagnostic data may be\
    \ collected at\n   multiple places along the path (if possible), or at the source\
    \ and\n   destination.  Then, in post-collection processing, the diagnostic\n\
    \   data corresponding to each packet at different observation points\n   must\
    \ be matched for proper measurements.  A sequence number in each\n   packet provides\
    \ a sufficient basis for the matching process.  If\n   need be, the timing fields\
    \ may be used along with the sequence number\n   to ensure uniqueness.\n   This\
    \ method of data collection along the path is of special use for\n   determining\
    \ where packet loss or packet corruption is happening.\n   The packet sequence\
    \ number needs to be unique in the context of the\n   session (5-tuple).\n"
- title: A.3.  Rationale for Defined Solution
  contents:
  - "A.3.  Rationale for Defined Solution\n   One of the important functions of PDM\
    \ is to allow you to quickly\n   dispatch the right set of diagnosticians.  Within\
    \ network or server\n   latency, there may be many components.  The job of the\
    \ diagnostician\n   is to rule each one out until the culprit is found.\n   PDM\
    \ will fit into this diagnostic picture by quickly telling you how\n   to escalate.\
    \  PDM will point to either the network area or the server\n   area.  Within the\
    \ server latency, PDM does not tell you whether the\n   bottleneck is in the IP\
    \ stack, the application, or buffer allocation.\n   Within the network latency,\
    \ PDM does not tell you which of the\n   network segments or middleboxes is at\
    \ fault.\n   What PDM does tell you is whether the problem is in the network or\n\
    \   the server.\n"
- title: A.4.  Use PDM with Other Headers
  contents:
  - "A.4.  Use PDM with Other Headers\n   For diagnostics, one may want to use PDM\
    \ with other headers (Layer 2,\n   Layer 3, etc).  For example, if PDM is used\
    \ by a technician (or tool)\n   looking at a packet capture, within the packet\
    \ capture, they would\n   have available to them the Layer 2 header, IP header\
    \ (v6 or v4), TCP\n   header, UDP header, ICMP header, SCTP header, or other headers.\
    \  All\n   information would be looked at together to make sense of the packet\n\
    \   flow.  The technician or processing tool could analyze, report, or\n   ignore\
    \ the data from PDM, as necessary.\n   For an example of how PDM can help with\
    \ TCP retransmission problems,\n   please look at Appendix C.\n"
- title: Appendix B.  Timing Considerations
  contents:
  - 'Appendix B.  Timing Considerations

    '
- title: B.1.  Calculations of Time Differentials
  contents:
  - "B.1.  Calculations of Time Differentials\n   When SCALEDTLR or SCALEDTLS is used,\
    \ it means that the description of\n   the processing applies equally to SCALEDTLR\
    \ and SCALEDTLS.\n   The time counter in a CPU is a binary whole number representing\
    \ a\n   number of milliseconds (msec), microseconds (usec), or even\n   picoseconds\
    \ (psec).  Representing one of these values as attoseconds\n   (asec) means multiplying\
    \ by 10 raised to some exponent.  Refer to\n   this table of equalities:\n   \
    \   Base value        = # of sec      = # of asec     1000s of asec\n      ---------------\
    \   -------------   -------------   -------------\n      1 second          1 sec\
    \           10**18 asec     1000**6 asec\n      1 millisecond     10**-3  sec\
    \     10**15 asec     1000**5 asec\n      1 microsecond     10**-6  sec     10**12\
    \ asec     1000**4 asec\n      1 nanosecond      10**-9  sec     10**9  asec \
    \    1000**3 asec\n      1 picosecond      10**-12 sec     10**6  asec     1000**2\
    \ asec\n      1 femtosecond     10**-15 sec     10**3  asec     1000**1 asec\n\
    \   For example, if you have a time differential expressed in\n   microseconds,\
    \ since each microsecond is 10**12 asec, you would\n   multiply your time value\
    \ by 10**12 to obtain the number of\n   attoseconds.  If your time differential\
    \ is expressed in nanoseconds,\n   you would multiply by 10**9 to get the number\
    \ of attoseconds.\n   The result is a binary value that will need to be shortened\
    \ by a\n   number of bits so it will fit into the 16-bit PDM delta field.\n  \
    \ The next step is to divide by 2 until the value is contained in just\n   16\
    \ significant bits.  The exponent of the value in the last column of\n   the table\
    \ is useful here; the initial scaling factor is that exponent\n   multiplied by\
    \ 10.  This is the minimum number of low-order bits to be\n   shifted out or discarded.\
    \  It represents dividing the time value by\n   1024 raised to that exponent.\n\
    \   The resulting value may still be too large to fit into 16 bits but\n   can\
    \ be normalized by shifting out more bits (dividing by 2) until the\n   value\
    \ fits into the 16-bit delta field.  The number of extra bits\n   shifted out\
    \ is then added to the scaling factor.  The scaling factor\n   -- the total number\
    \ of low-order bits dropped -- is the SCALEDTLR or\n   SCALEDTLS value.\n   For\
    \ example, say an application has these start and finish timer\n   values (hexadecimal\
    \ values, in microseconds):\n      Finish:      27C849234 usec    (02:57:58.997556)\n\
    \      -Start:      27C83F696 usec    (02:57:58.957718)\n      ==========   ==============\
    \    ==========================\n      Difference   9B9E usec         0.039838\
    \ sec or 39838 usec\n   To convert this differential value to binary attoseconds,\
    \ multiply\n   the number of microseconds by 10**12.  Divide by 1024**4, or simply\n\
    \   discard 40 bits from the right.  The result is 36232, or 8D88 in hex,\n  \
    \ with a scaling factor or SCALEDTLR/SCALEDTLS value of 40.\n   For another example,\
    \ presume the time differential is larger, say\n   32.311072 seconds, which is\
    \ 32311072 usec.  Each microsecond is\n   10**12 asec, so multiply by 10**12,\
    \ giving the hexadecimal value\n   1C067FCCAE8120000.  Using the initial scaling\
    \ factor of 40, drop the\n   last 10 characters (40 bits) from that string, giving\
    \ 1C067FC.  This\n   will not fit into a delta field, as it is 25 bits long. \
    \ Shifting the\n   value to the right another 9 bits results in a delta value\
    \ of E033,\n   with a resulting scaling factor of 49.\n   When the time-differential\
    \ value is a small number, regardless of the\n   time unit, the exponent trick\
    \ given above is not useful in\n   determining the proper scaling value.  For\
    \ example, if the time\n   differential is 3 seconds and you want to convert that\
    \ directly, you\n   would follow this path:\n     3 seconds = 3*10**18 asec (decimal)\n\
    \               = 29A2241AF62C0000 asec (hexadecimal)\n   If you just truncate\
    \ the last 60 bits, you end up with a delta value\n   of 2 and a scaling factor\
    \ of 60, when what you really wanted was a\n   delta value with more significant\
    \ digits.  The most precision with\n   which you can store this value in 16 bits\
    \ is A688, with a scaling\n   factor of 46.\n"
- title: B.2.  Considerations of This Time-Differential Representation
  contents:
  - "B.2.  Considerations of This Time-Differential Representation\n   There are two\
    \ considerations to be taken into account with this\n   representation of a time\
    \ differential.  The first is whether there\n   are any limitations on the maximum\
    \ or minimum time differential that\n   can be expressed using the method of a\
    \ delta value and a scaling\n   factor.  The second is the amount of imprecision\
    \ introduced by this\n   method.\n"
- title: B.2.1.  Limitations with This Encoding Method
  contents:
  - "B.2.1.  Limitations with This Encoding Method\n   The DELTATLS and DELTATLR fields\
    \ store only the 16 most significant\n   bits of the time-differential value.\
    \  Thus, the range, excluding the\n   scaling factor, is from 0 to 65535, or a\
    \ maximum of 2**16 - 1.  This\n   method is further described in [TCPM].\n   The\
    \ actual magnitude of the time differential is determined by the\n   scaling factor.\
    \  SCALEDTLR and SCALEDTLS are 8-bit unsigned integers,\n   so the scaling factor\
    \ ranges from 0 to 255.  The smallest number that\n   can be represented would\
    \ have a value of 1 in the delta field and a\n   value of 0 in the associated\
    \ scale field.  This is the representation\n   for 1 attosecond.  Clearly, this\
    \ allows PDM to measure extremely\n   small time differentials.\n   On the other\
    \ end of the scale, the maximum delta value is 65535, or\n   FFFF in hexadecimal.\
    \  If the maximum scale value of 255 is used, the\n   time differential represented\
    \ is 65535*2**255, which is over\n   3*10**55 years -- essentially, forever. \
    \ So, there appears to be no\n   real limitation to the time differential that\
    \ can be represented.\n"
- title: B.2.2.  Loss of Precision Induced by Timer Value Truncation
  contents:
  - "B.2.2.  Loss of Precision Induced by Timer Value Truncation\n   As PDM specifies\
    \ the DELTATLR and DELTATLS values as 16-bit unsigned\n   integers, any time that\
    \ the precision is greater than those 16 bits,\n   there will be truncation of\
    \ the trailing bits, with an accompanying\n   loss of precision in the value.\n\
    \   Any time-differential value smaller than 65536 asec can be stored\n   exactly\
    \ in DELTATLR or DELTATLS, because the representation of this\n   value requires\
    \ at most 16 bits.\n   Since the time-differential values in PDM are measured\
    \ in\n   attoseconds, the range of values that would be truncated to the same\n\
    \   encoded value is 2**((Scale) - 1) asec.\n   For example, the smallest time\
    \ differential that would be truncated\n   to fit into a delta field is\n    \
    \  1 0000 0000 0000 0000 = 65536 asec\n   This value would be encoded as a delta\
    \ value of 8000 (hexadecimal)\n   with a scaling factor of 1.  The value\n   \
    \   1 0000 0000 0000 0001 = 65537 asec\n   would also be encoded as a delta value\
    \ of 8000 with a scaling factor\n   of 1.  This actually is the largest value\
    \ that would be truncated to\n   that same encoded value.  When the scale value\
    \ is 1, the value range\n   is calculated as 2**1 - 1, or 1 asec, which you can\
    \ see is the\n   difference between these minimum and maximum values.\n   The\
    \ scaling factor is defined as the number of low-order bits\n   truncated to reduce\
    \ the size of the resulting value so it fits into a\n   16-bit delta field.  If,\
    \ for example, you had to truncate 12 bits,\n   the loss of precision would depend\
    \ on the bits you truncated.  The\n   range of these values would be\n      0000\
    \ 0000 0000 = 0 asec\n         to\n      1111 1111 1111 = 4095 asec\n   So, the\
    \ minimum loss of precision would be 0 asec, where the delta\n   value exactly\
    \ represents the time differential, and the maximum loss\n   of precision would\
    \ be 4095 asec.  As stated above, the scaling factor\n   of 12 means that the\
    \ maximum loss of precision is 2**12 - 1 asec, or\n   4095 asec.\n   Compare this\
    \ loss of precision to the actual time differential.  The\n   range of actual\
    \ time-differential values that would incur this loss\n   of precision is from\n\
    \   1000 0000 0000 0000 0000 0000 0000 = 2**27 asec or 134217728 asec\n      to\n\
    \   1111 1111 1111 1111 1111 1111 1111 = 2**28 - 1 asec or 268435455 asec\n  \
    \ Granted, these are small values, but the point is that any value\n   between\
    \ these two values will have a maximum loss of precision of\n   4095 asec, or\
    \ about 0.00305% for the first value, as encoded, and at\n   most 0.001526% for\
    \ the second.  These maximum-loss percentages are\n   consistent for all scaling\
    \ values.\n"
- title: Appendix C.  Sample Packet Flows
  contents:
  - 'Appendix C.  Sample Packet Flows

    '
- title: C.1.  PDM Flow - Simple Client-Server Traffic
  contents:
  - "C.1.  PDM Flow - Simple Client-Server Traffic\n   Below is a sample simple flow\
    \ for PDM with one packet sent from\n   Host A and one packet received by Host\
    \ B.  PDM does not require time\n   synchronization between Host A and Host B.\
    \  The calculations to\n   derive meaningful metrics for network diagnostics are\
    \ shown below\n   each packet sent or received.\n"
- title: C.1.1.  Step 1
  contents:
  - "C.1.1.  Step 1\n   Packet 1 is sent from Host A to Host B.  The time for Host\
    \ A is set\n   initially to 10:00AM.\n   The time and packet sequence number are\
    \ saved by the sender\n   internally.  The packet sequence number and delta times\
    \ are sent in\n   the packet.\n      Packet 1\n                 +----------+ \
    \            +----------+\n                 |          |             |       \
    \   |\n                 |   Host   | ----------> |   Host   |\n              \
    \   |    A     |             |    B     |\n                 |          |     \
    \        |          |\n                 +----------+             +----------+\n\
    \      PDM Contents:\n      PSNTP    : Packet Sequence Number This Packet:   \
    \  25\n      PSNLR    : Packet Sequence Number Last Received:   -\n      DELTATLR\
    \ : Delta Time Last Received:               -\n      SCALEDTLR: Scale of Delta\
    \ Time Last Received:      0\n      DELTATLS : Delta Time Last Sent:         \
    \          -\n      SCALEDTLS: Scale of Delta Time Last Sent:          0\n   \
    \   Internally, within the sender, Host A, it must keep:\n      Packet Sequence\
    \ Number of the last packet sent:     25\n      Time the last packet was sent:\
    \                10:00:00\n   Note: The initial PSNTP from Host A starts at a\
    \ random number -- in\n   this case, 25.  The time in these examples is shown\
    \ in seconds for\n   the sake of simplicity.\n"
- title: C.1.2.  Step 2
  contents:
  - "C.1.2.  Step 2\n   Packet 1 is received at Host B.  Its time is set to 1 hour\
    \ later than\n   Host A -- in this case, 11:00AM.\n   Internally, within the receiver,\
    \ Host B, it must note the following:\n      Packet Sequence Number of the last\
    \ packet received:    25\n      Time the last packet was received            \
    \     :    11:00:03\n   Note: This timestamp is in Host B time.  It has nothing\
    \ whatsoever to\n   do with Host A time.  The packet sequence number of the last\
    \ packet\n   received will become PSNLR, which will be sent out in the packet\
    \ sent\n   by Host B in the next step.  The timestamp of the packet last\n   received\
    \ (as noted above) will be used as input to calculate the\n   DELTATLR value to\
    \ be sent out in the packet sent by Host B in the\n   next step.\n"
- title: C.1.3.  Step 3
  contents:
  - "C.1.3.  Step 3\n   Packet 2 is sent by Host B to Host A.  Note that the initial\
    \ packet\n   sequence number (PSNTP) from Host B starts at a random number --\
    \ in\n   this case, 12.  Before sending the packet, Host B does a calculation\n\
    \   of deltas.  Since Host B knows when it is sending the packet and it\n   knows\
    \ when it received the previous packet, it can do the following\n   calculation:\n\
    \      DELTATLR = send time (packet 2) - receive time (packet 1)\n   Note: Both\
    \ the send time and the receive time are saved internally in\n   Host B.  They\
    \ do not travel in the packet.  Only the change in values\n   (delta) is in the\
    \ packet.  This is the DELTATLR value.\n   Assume that within Host B we have the\
    \ following:\n      Packet Sequence Number of the last packet received:     25\n\
    \      Time the last packet was received:                      11:00:03\n    \
    \  Packet Sequence Number of this packet:                  12\n      Time this\
    \ packet is being sent:                         11:00:07\n   A delta value to\
    \ be sent out in the packet can now be calculated.\n   DELTATLR becomes:\n   \
    \   4 seconds = 11:00:07 - 11:00:03 = 3782DACE9D900000 asec\n   This is the derived\
    \ metric: server delay.  The time scaling factors\n   must be converted; in this\
    \ case, the time differential is DE0B, and\n   the scaling factor is 2E, or 46\
    \ in decimal.  Then, these values,\n   along with the packet sequence numbers,\
    \ will be sent to Host A as\n   follows:\n      Packet 2\n                 +----------+\
    \             +----------+\n                 |          |             |      \
    \    |\n                 |   Host   | <---------- |   Host   |\n             \
    \    |    A     |             |    B     |\n                 |          |    \
    \         |          |\n                 +----------+             +----------+\n\
    \      PDM Contents:\n      PSNTP    : Packet Sequence Number This Packet:   \
    \ 12\n      PSNLR    : Packet Sequence Number Last Received:  25\n      DELTATLR\
    \ : Delta Time Last Received:              DE0B (4 seconds)\n      SCALEDTLR:\
    \ Scale of Delta Time Last Received:     2E (46 decimal)\n      DELTATLS : Delta\
    \ Time Last Sent:                   -\n      SCALEDTLS: Scale of Delta Time Last\
    \ Sent:          0\n   The metric left to be calculated is the round-trip delay.\
    \  This will\n   be calculated by Host A when it receives packet 2.\n"
- title: C.1.4.  Step 4
  contents:
  - "C.1.4.  Step 4\n   Packet 2 is received at Host A.  Remember that its time is\
    \ set to\n   1 hour earlier than Host B.  Internally, it must note the following:\n\
    \      Packet Sequence Number of the last packet received: 12\n      Time the\
    \ last packet was received                 : 10:00:12\n   Note: This timestamp\
    \ is in Host A time.  It has nothing whatsoever to\n   do with Host B time.\n\
    \   So, Host A can now calculate total end-to-end time.  That is:\n      End-to-End\
    \ Time = Time Last Received - Time Last Sent\n   For example, packet 25 was sent\
    \ by Host A at 10:00:00.  Packet 12 was\n   received by Host A at 10:00:12, so:\n\
    \      End-to-End time = 10:00:12 - 10:00:00 or 12 (server and network\n     \
    \ round-trip delay combined).\n      This time may also be called \"total overall\
    \ Round-Trip Time\n      (RTT)\", which includes network RTT and host response\
    \ time.\n   We will call this derived metric \"Delta Time Last Sent\" (DELTATLS).\n\
    \   Round-trip delay can now be calculated.  The formula is:\n      Round-trip\
    \ delay =\n         (Delta Time Last Sent - Delta Time Last Received)\n   Or:\n\
    \      Round-trip delay = 12 - 4 or 8\n   At this point, the only problem is that\
    \ all metrics are in Host A\n   only and not exposed in a packet.  To do that,\
    \ we need a third\n   packet.\n   Note: This simple example assumes one send and\
    \ one receive.  That is\n   done only for purposes of explaining the function\
    \ of PDM.  In cases\n   where there are multiple packets returned, one would take\
    \ the time in\n   the last packet in the sequence.  The calculations of such timings\n\
    \   and intelligent processing are the function of post-processing of\n   the\
    \ data.\n"
- title: C.1.5.  Step 5
  contents:
  - "C.1.5.  Step 5\n   Packet 3 is sent from Host A to Host B.\n                \
    \ +----------+             +----------+\n                 |          |       \
    \      |          |\n                 |   Host   | ----------> |   Host   |\n\
    \                 |    A     |             |    B     |\n                 |  \
    \        |             |          |\n                 +----------+           \
    \  +----------+\n      PDM Contents:\n      PSNTP    : Packet Sequence Number\
    \ This Packet:   26\n      PSNLR    : Packet Sequence Number Last Received: 12\n\
    \      DELTATLR : Delta Time Last Received:              0\n      SCALEDTLS: Scale\
    \ of Delta Time Last Received      0\n      DELTATLS : Delta Time Last Sent: \
    \              A688 (scaled value)\n      SCALEDTLR: Scale of Delta Time Last\
    \ Received:    30 (48 decimal)\n   To calculate two-way delay, any packet-capture\
    \ device may look at\n   these packets and do what is necessary.\n"
- title: C.2.  Other Flows
  contents:
  - "C.2.  Other Flows\n   What has been discussed so far is a simple flow with one\
    \ packet sent\n   and one returned.  Let's look at how PDM may be useful in other\
    \ types\n   of flows.\n"
- title: C.2.1.  PDM Flow - One-Way Traffic
  contents:
  - "C.2.1.  PDM Flow - One-Way Traffic\n   The flow on a particular session may not\
    \ be a send-receive paradigm.\n   Let us consider some other situations.  In the\
    \ case of a one-way\n   flow, one might see the following.\n   Note: The time\
    \ is expressed in generic units for simplicity.  That\n   is, these values do\
    \ not represent a number of attoseconds,\n   microseconds, or any other real units\
    \ of time.\n   Packet   Sender      PSN            PSN        Delta Time  Delta\
    \ Time\n                     This Packet    Last Recvd    Last Recvd  Last Sent\n\
    \   =====================================================================\n  \
    \ 1        Server       1              0              0            0\n   2   \
    \     Server       2              0              0            5\n   3        Server\
    \       3              0              0           12\n   4        Server     \
    \  4              0              0           20\n   What does this mean, and how\
    \ is it useful?\n   In a one-way flow, only the Delta Time Last Sent will be seen\
    \ as\n   used.  Recall that Delta Time Last Sent is the difference between the\n\
    \   send of one packet from a device and the next.  This is a measure of\n   throughput\
    \ for the sender -- according to the sender's point of view.\n   That is, it is\
    \ a measure of how fast the application itself (with\n   stack time included)\
    \ is able to send packets.\n   How might this be useful?  If one is having a performance\
    \ issue at\n   the client and sees that packet 2, for example, is sent after 5\
    \ time\n   units from the server but takes 10 times that long to arrive at the\n\
    \   destination, then one may safely conclude that there are delays in\n   the\
    \ path, other than at the server, that may be causing the delivery\n   issue for\
    \ that packet.  Such delays may include the network links,\n   middleboxes, etc.\n\
    \   True one-way traffic is quite rare.  What people often mean by\n   \"one-way\"\
    \ traffic is an application such as FTP where a group of\n   packets (for example,\
    \ a TCP window size worth) is sent and the sender\n   then waits for acknowledgment.\
    \  This type of flow would actually fall\n   into the \"multiple-send\" traffic\
    \ model.\n"
- title: C.2.2.  PDM Flow - Multiple-Send Traffic
  contents:
  - "C.2.2.  PDM Flow - Multiple-Send Traffic\n   Assume that two packets are sent\
    \ from the server and then an ACK is\n   sent from the client.  For example, a\
    \ TCP flow will do this, per\n   RFC 1122 [RFC1122], Section 4.2.3.  Packets 1\
    \ and 2 are sent from the\n   server, and then an ACK is sent from the client.\
    \  Packet 4 starts a\n   second sequence from the server.\n   Packet   Sender\
    \      PSN            PSN       Delta Time  Delta Time\n                    This\
    \ Packet    Last Recvd    Last Recvd  Last Sent\n   =====================================================================\n\
    \   1        Server       1              0              0           0\n   2  \
    \      Server       2              0              0           5\n   3        Client\
    \       1              2             20           0\n   4        Server      \
    \ 3              1             10          15\n   How might this be used?\n  \
    \ Notice that in packet 3, the client has a Delta Time Last Received\n   value\
    \ of 20.  Recall that:\n      DELTATLR = send time (packet 3) - receive time (packet\
    \ 2)\n   So, what does one know now?  In this case, Delta Time Last Received\n\
    \   is the processing time for the client to send the next packet.\n   How to\
    \ interpret this depends on what is actually being sent.\n   Remember that PDM\
    \ is not being used in isolation; rather, it is used\n   to supplement the fields\
    \ found in other headers.  Let's take two\n   examples:\n   1. The client is sending\
    \ a standalone TCP ACK.  One would find this\n      by looking at the payload\
    \ length in the IPv6 header and the TCP\n      Acknowledgment field in the TCP\
    \ header.  So, in this case, the\n      client is taking 20 time units to send\
    \ back the ACK.  This may or\n      may not be interesting.\n   2. The client\
    \ is sending data with the packet.  Again, one would find\n      this by looking\
    \ at the payload length in the IPv6 header and the\n      TCP Acknowledgment field\
    \ in the TCP header.  So, in this case, the\n      client is taking 20 time units\
    \ to send back data.  This may\n      represent \"User Think Time\".  Again, this\
    \ may or may not be\n      interesting in isolation.  But if there is a performance\
    \ problem\n      receiving data at the server, then, taken in conjunction with\
    \ RTT\n      or other packet timing information, this information may be quite\n\
    \      interesting.\n   Of course, one also needs to look at the PSN Last Received\
    \ field to\n   make sure of the interpretation of this data -- that is, to make\
    \ sure\n   that the Delta Time Last Received corresponds to the packet of\n  \
    \ interest.\n   The benefits of PDM are that such information is now available\
    \ in a\n   uniform manner for all applications and all protocols without\n   extensive\
    \ changes required to applications.\n"
- title: C.2.3.  PDM Flow - Multiple-Send Traffic with Errors
  contents:
  - "C.2.3.  PDM Flow - Multiple-Send Traffic with Errors\n   Let us now look at a\
    \ case of how PDM may be able to help in a case of\n   TCP retransmission and\
    \ add to the information that is sent in the TCP\n   header.\n   Assume that three\
    \ packets are sent with each send from the server.\n   From the server, this is\
    \ what is seen:\n   Pkt Sender    PSN        PSN      Delta Time  Delta Time \
    \ TCP   Data\n               This Pkt  Last Recvd  Last Recvd  Last Sent   SEQ\
    \   Bytes\n   =====================================================================\n\
    \   1   Server      1        0           0           0        123   100\n   2\
    \   Server      2        0           0           5        223   100\n   3   Server\
    \      3        0           0           5        333   100\n   The client, however,\
    \ does not receive all the packets.  From the\n   client, this is what is seen\
    \ for the packets sent from the server:\n   Pkt Sender    PSN        PSN     \
    \ Delta Time  Delta Time  TCP   Data\n               This Pkt  Last Recvd  Last\
    \ Recvd  Last Sent   SEQ   Bytes\n   =====================================================================\n\
    \   1   Server     1         0           0           0        123   100\n   2\
    \   Server     3         0           0           5        333   100\n   Let's\
    \ assume that the server now retransmits the packet.  (Obviously,\n   a duplicate\
    \ acknowledgment sequence for fast retransmit or a\n   retransmit timeout would\
    \ occur.  To illustrate the point, these\n   packets are being left out.)\n  \
    \ So, if a TCP retransmission is done, then from the client, this is\n   what\
    \ is seen for the packets sent from the server:\n   Pkt Sender    PSN        PSN\
    \      Delta Time  Delta Time  TCP   Data\n              This Pkt   Last Recvd\
    \  Last Recvd  Last Sent   SEQ   Bytes\n   =====================================================================\n\
    \   1   Server    4          0           0           30       223   100\n   The\
    \ server has resent the old packet 2 with a TCP sequence number\n   of 223.  The\
    \ retransmitted packet now has a PSN This Packet\n   value of 4.\n   The Delta\
    \ Time Last Sent is 30 -- in other words, the time between\n   sending the packet\
    \ with a PSN of 3 and this current packet.\n   Let's say that packet 4 is lost\
    \ again.  Then, after some amount of\n   time (RTO), the packet with a TCP sequence\
    \ number of 223 is resent.\n   From the client, this is what is seen for the packets\
    \ sent from the\n   server:\n   Pkt Sender    PSN        PSN     Delta Time  Delta\
    \ Time  TCP   Data\n              This Pkt  Last Recvd  Last Recvd  Last Sent\
    \   SEQ   Bytes\n   ====================================================================\n\
    \   1   Server    5         0           0           60       223   100\n   If\
    \ this packet now arrives at the destination, one has a very good\n   idea that\
    \ packets exist that are being sent from the server as\n   retransmissions and\
    \ not arriving at the client.  This is because the\n   PSN of the resent packet\
    \ from the server is 5 rather than 4.  If we\n   had used the TCP sequence number\
    \ alone, we would never have seen this\n   situation.  The TCP sequence number\
    \ in all situations is 223.\n   This situation would be experienced by the user\
    \ of the application\n   (the human being actually sitting somewhere) as \"hangs\"\
    \ or long\n   delays between packets.  On large networks, to diagnose problems\
    \ such\n   as these where packets are lost somewhere on the network, one has to\n\
    \   take multiple traces to find out exactly where.\n   The first thing to do\
    \ is to start with doing a trace at the client\n   and the server, so that we\
    \ can see if the server sent a particular\n   packet and the client received it.\
    \  If the client did not receive it,\n   then we start tracking back to trace\
    \ points at the router right after\n   the server and the router right before\
    \ the client.  Did they get\n   these packets that the server has sent?  This\
    \ is a time-consuming\n   activity.\n   With PDM, we can speed up the diagnostic\
    \ time because we may be able\n   to use only the trace taken at the client to\
    \ see what the server is\n   sending.\n"
- title: Appendix D.  Potential Overhead Considerations
  contents:
  - "Appendix D.  Potential Overhead Considerations\n   One might wonder about the\
    \ potential overhead of PDM.  First, PDM is\n   entirely optional.  That is, a\
    \ site may choose to implement PDM or\n   not, as they wish.  If they are happy\
    \ with the costs of PDM versus\n   the benefits, then the choice should be theirs.\n\
    \   Below is a table outlining the potential overhead in terms of\n   additional\
    \ time to deliver the response to the end user for various\n   assumed RTTs:\n\
    \   Bytes         RTT         Bytes        Bytes      New     Overhead\n   in\
    \ Packet                Per Millisec  in PDM     RTT\n   ====================================================================\n\
    \   1000       1000 milli         1        16     1016.000  16.000 milli\n   1000\
    \        100 milli        10        16      101.600   1.600 milli\n   1000   \
    \      10 milli       100        16       10.160   0.160 milli\n   1000      \
    \    1 milli      1000        16        1.016   0.016 milli\n   Below are two\
    \ examples of actual RTTs for packets traversing large\n   enterprise networks.\n\
    \   The first example is for packets going to multiple business partners:\n  \
    \ Bytes         RTT         Bytes        Bytes      New     Overhead\n   in Packet\
    \                Per Millisec  in PDM     RTT\n   ====================================================================\n\
    \   1000        17 milli        58         16       17.360   0.360 milli\n   The\
    \ second example is for packets at a large enterprise customer\n   within a data\
    \ center.  Notice that the scale is now in microseconds\n   rather than milliseconds:\n\
    \   Bytes        RTT          Bytes        Bytes      New     Overhead\n   in\
    \ Packet                Per Microsec  in PDM     RTT\n   ====================================================================\n\
    \   1000       20 micro         50         16       20.320   0.320 micro\n   As\
    \ with other diagnostic tools, such as packet traces, a certain\n   amount of\
    \ processing time will be required to create and process PDM.\n   Since PDM is\
    \ lightweight (has only a few variables), we expect the\n   processing time to\
    \ be minimal.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to thank Keven Haining, Al Morton,\
    \ Brian\n   Trammell, David Boyes, Bill Jouris, Richard Scheffenegger, and Rick\n\
    \   Troth for their comments and assistance.  We would also like to thank\n  \
    \ Tero Kivinen and Jouni Korhonen for their detailed and perceptive\n   reviews.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Nalini Elkins\n   Inside Products, Inc.\n   36A Upper\
    \ Circle\n   Carmel Valley, CA  93924\n   United States of America\n   Phone:\
    \ +1 831 659 8360\n   Email: nalini.elkins@insidethestack.com\n   URI:   http://www.insidethestack.com\n\
    \   Robert M. Hamilton\n   Chemical Abstracts Service\n   A Division of the American\
    \ Chemical Society\n   2540 Olentangy River Road\n   Columbus, Ohio  43202\n \
    \  United States of America\n   Phone: +1 614 447 3600 x2517\n   Email: rhamilton@cas.org\n\
    \   URI:   http://www.cas.org\n   Michael S. Ackermann\n   Blue Cross Blue Shield\
    \ of Michigan\n   P.O. Box 2888\n   Detroit, Michigan  48231\n   United States\
    \ of America\n   Phone: +1 310 460 4080\n   Email: mackermann@bcbsm.com\n   URI:\
    \   http://www.bcbsm.com\n"
