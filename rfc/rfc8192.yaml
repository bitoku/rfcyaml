- title: __initial_text__
  contents:
  - "            Interface to Network Security Functions (I2NSF):\n              \
    \      Problem Statement and Use Cases\n"
- title: Abstract
  contents:
  - "Abstract\n   This document sets out the problem statement for Interface to Network\n\
    \   Security Functions (I2NSF) and outlines some companion use cases.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc8192.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n   3.  Problem Space . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   6\n     3.1.  Challenges Facing Security Service Providers  . . . .\
    \ . .   6\n       3.1.1.  Diverse Types of Security Functions . . . . . . . .\
    \ .   6\n       3.1.2.  Diverse Interfaces to Control and Monitor NSFs  . . .\
    \   8\n       3.1.3.  More Distributed NSFs and vNSFs . . . . . . . . . . .  \
    \ 8\n       3.1.4.  More Demand to Control NSFs Dynamically . . . . . . .   9\n\
    \       3.1.5.  Demand for Multi-tenancy to Control and Monitor NSFs    9\n  \
    \     3.1.6.  Lack of Characterization of NSFs and Capability\n              \
    \ Exchange  . . . . . . . . . . . . . . . . . . . . . .   9\n       3.1.7.  Lack\
    \ of Mechanism for NSFs to Utilize External\n               Profiles  . . . .\
    \ . . . . . . . . . . . . . . . . . .  10\n       3.1.8.  Lack of Mechanisms to\
    \ Accept External Alerts to\n               Trigger Automatic Rule and Configuration\
    \ Changes  . .  10\n       3.1.9.  Lack of Mechanism for Dynamic Key Distribution\
    \ to\n               NSFs  . . . . . . . . . . . . . . . . . . . . . . . .  10\n\
    \     3.2.  Challenges Facing Customers . . . . . . . . . . . . . . .  12\n  \
    \     3.2.1.  NSFs from Heterogeneous Administrative Domains  . . .  12\n    \
    \   3.2.2.  Today's Vendor-Specific Control Requests  . . . . . .  13\n      \
    \ 3.2.3.  Difficulty for Customers to Monitor the Execution of\n             \
    \  Desired Policies  . . . . . . . . . . . . . . . . . .  14\n     3.3.  Lack\
    \ of Standard Interface to Inject Feedback to NSF  . .  15\n     3.4.  Lack of\
    \ Standard Interface for Capability Negotiation . .  15\n     3.5.  Difficulty\
    \ in Validating Policies across Multiple Domains  15\n     3.6.  Software-Defined\
    \ Networks . . . . . . . . . . . . . . . .  16\n   4.  Use Cases . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . .  17\n     4.1.  Basic Framework . . .\
    \ . . . . . . . . . . . . . . . . . .  17\n     4.2.  Access Networks . . . .\
    \ . . . . . . . . . . . . . . . . .  18\n     4.3.  Cloud Data Center Scenario\
    \  . . . . . . . . . . . . . . .  21\n       4.3.1.  On-Demand Virtual Firewall\
    \ Deployment . . . . . . . .  21\n       4.3.2.  Firewall Policy Deployment Automation\
    \ . . . . . . . .  22\n       4.3.3.  Client-Specific Security Policy in Cloud\
    \ VPNs . . . .  22\n       4.3.4.  Internal Network Monitoring . . . . . . . .\
    \ . . . . .  23\n     4.4.  Preventing DDoS, Malware, and Botnet Attacks  . .\
    \ . . . .  23\n     4.5.  Regulatory and Compliance Security Policies . . . .\
    \ . . .  24\n   5.  Management Considerations . . . . . . . . . . . . . . . .\
    \ . .  24\n   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . .\
    \ .  24\n   7.  Security Considerations . . . . . . . . . . . . . . . . . . .\
    \  24\n   8.  Informative References  . . . . . . . . . . . . . . . . . . .  25\n\
    \   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  27\n  \
    \ Contributors  . . . . . . . . . . . . . . . . . . . . . . . . . .  28\n   Authors'\
    \ Addresses  . . . . . . . . . . . . . . . . . . . . . . .  28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document sets out the problem statement for Interface\
    \ to Network\n   Security Functions (I2NSF) and outlines some use cases.  A summary\
    \ of\n   the state of the art in the industry and IETF that is relevant to\n \
    \  I2NSF work is documented in [I2NSF-ANALYSIS].\n   The growing challenges and\
    \ complexity in maintaining a secure\n   infrastructure, complying with regulatory\
    \ requirements, and\n   controlling costs are enticing enterprises into consuming\
    \ network\n   security functions hosted by service providers.  The hosted security\n\
    \   service is especially attractive to small- and medium-size\n   enterprises\
    \ which suffer from a lack of security experts to\n   continuously monitor networks,\
    \ acquire new skills, and propose\n   immediate mitigations to ever increasing\
    \ sets of security attacks.\n   According to [Gartner], the demand for hosted\
    \ (or cloud-based)\n   security services is growing.  Small- and medium-size businesses\n\
    \   (SMBs) are increasingly adopting cloud-based security services to\n   replace\
    \ on-premises security tools, while larger enterprises are\n   deploying a mix\
    \ of traditional and cloud-based security services.\n   To meet the demand, more\
    \ and more service providers are providing\n   hosted security solutions to deliver\
    \ cost-effective managed security\n   services to enterprise customers.  The hosted\
    \ security services are\n   primarily targeted at enterprises (especially small\
    \ and medium ones)\n   but could also be provided to any kind of mass-market customer.\
    \  As a\n   result, the Network Security Functions (NSFs) are provided and\n \
    \  consumed in a large variety of environments.  Users of NSFs may\n   consume\
    \ network security services hosted by one or more providers,\n   which may be\
    \ their own enterprise, service providers, or a\n   combination of both.\n   This\
    \ document also briefly describes the following use cases\n   summarized by [I2NSF-USECASES]:\n\
    \   o  I2NSF Access Use Cases [OAM-USECASE],\n   o  I2NSF Data Center Use Cases\
    \ [DC-USECASE], and\n   o  Integrated Security with Access Network Use Case [ACCESS-USECASE].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   AAA:  Authentication, Authorization, and Accounting [RFC2904]\n\
    \   ACL:  Access Control List\n   Bespoke security management:  Security management\
    \ that is made to fit\n      a particular customer.\n   DC:  Data Center\n   FW:\
    \  Firewall\n   IDS:  Intrusion Detection System\n   IPS:  Intrusion Protection\
    \ System\n   I2NSF:  Interface to Network Security Functions\n   NSF:  Network\
    \ Security Function.  An NSF is a function that is used\n      to ensure integrity,\
    \ confidentiality, or availability of network\n      communication; to detect\
    \ unwanted network activity; or to block,\n      or at least mitigate, the effects\
    \ of unwanted activity.\n   Flow-based NSF:  An NSF that inspects network flows\
    \ according to a\n      security policy.  Flow-based security also means that\
    \ packets are\n      inspected in the order they are received and without altering\n\
    \      packets due to the inspection process (e.g., Medium Access Control\n  \
    \    (MAC) rewrites, TTL decrement action, or NAT inspection or\n      changes).\
    \  (Note: Some existing firewalls store packets and look\n      at the packets\
    \ in logical order, which is not the order these are\n      received in time.\
    \  This document restricts flow-based NSF to this\n      definition.)\n   Security\
    \ service provider:  A provider of security services to the\n      customers (end\
    \ users or enterprises) using NSF equipment purchased\n      from vendors or created\
    \ by the service provider.\n   SDN:  Software-Defined Networking.  (See [RFC7426]\
    \ for architecture\n      and terminology or [RFC7149] for a service provider\
    \ view.)\n   vCPE:  virtual Customer Premises Equipment\n   vEPC:  virtual Evolved\
    \ Packet Core [EPC-3GPP]\n   vNSF:  Virtual NSF.  An NSF that is deployed as a\
    \ distributed virtual\n      resource.\n   vPE:  virtual Provider Edge\n   VPN:\
    \  Virtual Private Network\n"
- title: 3.  Problem Space
  contents:
  - "3.  Problem Space\n   The following sub-sections describe the problems and challenges\n\
    \   facing customers and security service providers when some or all of\n   the\
    \ security functions are no longer physically hosted by the\n   customer's administrative\
    \ domain.\n   Security service providers can be internal or external to the\n\
    \   company.  For example, an internal IT security group within a large\n   enterprise\
    \ could act as a security service provider for the\n   enterprise.  In contrast,\
    \ an enterprise could outsource all security\n   services to an external security\
    \ service provider.  In this document,\n   the security service provider function,\
    \ whether it is internal or\n   external, will be denoted as \"service provider\"\
    .\n   The \"Customer-Provider\" relationship may be between any two parties.\n\
    \   The parties can be in different organizations or different domains of\n  \
    \ the same organization.  Contractual agreements may be required in\n   such contexts\
    \ to formally document the customer's security\n   requirements and the provider's\
    \ guarantees to fulfill those\n   requirements.  Such agreements may detail protection\
    \ levels,\n   escalation procedures, alarms reporting, etc.  There is currently\
    \ no\n   standard mechanism to capture those requirements.\n   A service provider\
    \ may be a customer of another service provider.\n   It is the objective of the\
    \ I2NSF work to address these problems and\n   challenges.\n"
- title: 3.1.  Challenges Facing Security Service Providers
  contents:
  - '3.1.  Challenges Facing Security Service Providers

    '
- title: 3.1.1.  Diverse Types of Security Functions
  contents:
  - "3.1.1.  Diverse Types of Security Functions\n   There are many types of NSFs.\
    \  NSFs by different vendors can have\n   different features and interfaces. \
    \ NSFs can be deployed in multiple\n   locations in a given network and perhaps\
    \ have different roles.\n   Below are a few examples of security functions and\
    \ locations or\n   contexts in which they are often deployed:\n   External Intrusion\
    \ and Attack Protection:  Examples of this function\n      are firewall/ACL authentication,\
    \ IPS, IDS, and endpoint\n      protection.\n   Security Functions in a Demilitarized\
    \ Zone (DMZ):  Examples of this\n      function are firewall/ACLs, IDS/IPS, one\
    \ or all of AAA services,\n      NAT, forwarding proxies, and application filtering.\
    \  These\n      functions may be physically on-premise in a server provider's\n\
    \      network at the DMZ spots or located in a \"virtual\" DMZ.\n   Centralized\
    \ or Distributed Security Functions:  The security\n      functions could be deployed\
    \ in a centralized fashion for ease of\n      management and network design or\
    \ in a distributed fashion for\n      scaled requirement.  No matter how a security\
    \ function is deployed\n      and provisioned, it is desirable to have the same\
    \ interface to\n      provision security policies; otherwise, the job of security\n\
    \      administration is more complex, requiring knowledge of firewall\n     \
    \ and network design.\n   Internal Security Analysis and Reporting:  Examples\
    \ of this function\n      are security logs, event correlation, and forensic analysis.\n\
    \   Internal Data and Content Protection:  Examples of this function are\n   \
    \   encryption, authorization, and public/private key management for\n      internal\
    \ databases.\n   Security Gateways and VPN Concentrators:  Examples of these functions\n\
    \      are IPsec gateways, secure VPN concentrators that handle bridging\n   \
    \   secure VPNs, and secure VPN controllers for data flows.\n   Given the diversity\
    \ of security functions, the contexts in which\n   these functions can be deployed,\
    \ and the constant evolution of these\n   functions, standardizing all aspects\
    \ of security functions is\n   challenging and probably not feasible.  Fortunately,\
    \ it is not\n   necessary to standardize all aspects.  For example, from an I2NSF\n\
    \   perspective, there is no need to standardize how every firewall's\n   filtering\
    \ is created or applied.  Some features in a specific\n   vendor's filtering may\
    \ be unique to the vendor's product, so it is\n   not necessary to standardize\
    \ these features.\n   What is needed is a standardized interface to control and\
    \ monitor the\n   rule sets that NSFs use to treat packets traversing through\
    \ these\n   NSFs.  Thus, standardizing interfaces will provide an impetus for\n\
    \   standardizing established security functions.\n   I2NSF may specify some filters,\
    \ but these filters will be linked to\n   specific common functionality developed\
    \ by I2NSF in information\n   models or data models.\n"
- title: 3.1.2.  Diverse Interfaces to Control and Monitor NSFs
  contents:
  - "3.1.2.  Diverse Interfaces to Control and Monitor NSFs\n   To provide effective\
    \ and competitive solutions and services, security\n   service providers may need\
    \ to utilize multiple security functions\n   from various vendors to enforce the\
    \ security policies desired by\n   their customers.\n   Since no widely accepted\
    \ industry standard interface to NSFs exists\n   today, management of NSFs (device\
    \ and policy provisioning,\n   monitoring, etc.) tends to be custom-made security\
    \ management offered\n   by product vendors.  As a result, automation of such\
    \ services, if it\n   exists at all, is also custom made.  Thus, even in the traditional\n\
    \   way of deploying security features, there is a gap that needs to be\n   filled;\
    \ this would require coordination among implementations from\n   distinct vendors.\n\
    \   A challenge for monitoring prior to mitigation of a security\n   intrusion\
    \ is that an NSF cannot monitor what it cannot view.  For\n   example, enabling\
    \ a security function to mitigate an intrusion (e.g.,\n   firewall [FIREWALLS])\
    \ must include a mechanism to provide monitoring\n   feedback in order to determine\
    \ the intrusion has been stopped.\n   Therefore, it is necessary to have a mechanism\
    \ to monitor and provide\n   execution status of NSFs to security and compliance\
    \ management tools.\n   Such mechanisms exist in vendor-specific network security\
    \ interfaces\n   for forensics and troubleshooting, but an industry standard interface\n\
    \   could provide monitoring across a variety of NSFs.\n"
- title: 3.1.3.  More Distributed NSFs and vNSFs
  contents:
  - "3.1.3.  More Distributed NSFs and vNSFs\n   The security functions that are invoked\
    \ to enforce a security policy\n   can be located in different equipment and network\
    \ locations.\n   The European Telecommunications Standards Institute (ETSI) Network\n\
    \   Functions Virtualization (NFV) initiative [ETSI-NFV] creates new\n   management\
    \ challenges for security policies to be enforced by\n   distributed vNSFs.\n\
    \   A vNSF has higher risk of changes to the state of network connection,\n  \
    \ interfaces, or traffic, as their hosting Virtual Machines (VMs) are\n   being\
    \ created, moved, or decommissioned.\n"
- title: 3.1.4.  More Demand to Control NSFs Dynamically
  contents:
  - "3.1.4.  More Demand to Control NSFs Dynamically\n   In the advent of Software-Defined\
    \ Networking (SDN) (see\n   [SDN-SECURITY]), more clients, applications, or application\n\
    \   controllers need to dynamically update their security policies that\n   are\
    \ enforced by NSFs.  The security service providers have to\n   dynamically update\
    \ their decision-making process (e.g., in terms of\n   NSF resource allocation\
    \ and invocation) upon receiving security-\n   related requests from their clients.\n"
- title: 3.1.5.  Demand for Multi-tenancy to Control and Monitor NSFs
  contents:
  - "3.1.5.  Demand for Multi-tenancy to Control and Monitor NSFs\n   Service providers\
    \ may need to deploy several NSF controllers to\n   control and monitor the NSFs,\
    \ especially when NSFs become distributed\n   and virtualized.\n"
- title: 3.1.6.  Lack of Characterization of NSFs and Capability Exchange
  contents:
  - "3.1.6.  Lack of Characterization of NSFs and Capability Exchange\n   To offer\
    \ effective security services, service providers need to\n   activate various\
    \ security functions in NSFs or vNSFs manufactured by\n   multiple vendors.  Even\
    \ within one product category (e.g., firewall),\n   security functions provided\
    \ by different vendors can have different\n   features and capabilities.  For\
    \ example, filters that can be designed\n   and activated by a firewall may or\
    \ may not support IPv6 depending on\n   the firewall technology.\n   The service\
    \ provider's management system (or controller) needs a way\n   to retrieve the\
    \ capabilities of service functions by different\n   vendors so that it can build\
    \ an effective security solution.  These\n   service function capabilities can\
    \ be documented in a static manner\n   (e.g., a file) or via an interface that\
    \ accesses a repository of\n   security function capabilities that the NSF vendors\
    \ dynamically\n   update.\n   A dynamic capability registration is useful for\
    \ automation because\n   security functions may be subject to software and hardware\
    \ updates.\n   These updates may have implications on the policies enforced by\
    \ the\n   NSFs.\n   Today, there is no standard method for vendors to describe\
    \ the\n   capabilities of their security functions.  Without a common technical\n\
    \   framework to describe the capabilities of security functions, service\n  \
    \ providers cannot automate the process of selecting NSFs by different\n   vendors\
    \ to accommodate customers' security requirements.\n   The I2NSF work will focus\
    \ on developing a standard method to describe\n   capabilities of security functions.\n"
- title: 3.1.7.  Lack of Mechanism for NSFs to Utilize External Profiles
  contents:
  - "3.1.7.  Lack of Mechanism for NSFs to Utilize External Profiles\n   Many security\
    \ functions depend on signature files or profiles (e.g.,\n   IPS/IDS signatures\
    \ and DDoS Open Threat Signaling (DOTS) filters).\n   Different policies might\
    \ need different signatures or profiles.\n   Today, blacklist databases can be\
    \ a beneficial strategy for all\n   parties involved (except the attackers), but\
    \ in the future, there\n   might be open-source signatures and profiles distributed\
    \ as part of\n   IDS systems (e.g., by Snort, Suricata, Bro, and Kismet).\n  \
    \ There is a need to have a standard envelope (i.e., a message format)\n   to\
    \ allow NSFs to use external profiles.\n"
- title: 3.1.8.  Lack of Mechanisms to Accept External Alerts to Trigger
  contents:
  - "3.1.8.  Lack of Mechanisms to Accept External Alerts to Trigger\n        Automatic\
    \ Rule and Configuration Changes\n   NSFs can ask the I2NSF security controller\
    \ to alter specific rules\n   and/or configurations.  For example, a Distributed\
    \ Denial of Service\n   (DDoS) alert could trigger a change to the routing system\
    \ to send\n   traffic to a traffic scrubbing service to mitigate the DDoS.\n \
    \  The DDoS protection has two parts: a) the configuration of signaling\n   of\
    \ open threats and b) DDoS mitigation.  The DOTS controller manages\n   the signaling\
    \ part of DDoS.  I2NSF controller(s) would control any\n   changes to affected\
    \ policies (e.g., forwarding and routing,\n   filtering, etc.).  By monitoring\
    \ the network alerts regarding DDoS\n   attacks (e.g., from DOTS servers or clients),\
    \ the I2NSF controller(s)\n   can feed an alerts analytics engine that could recognize\
    \ attacks so\n   the I2NSF can enforce the appropriate policies.\n   DDoS mitigation\
    \ is enhanced if the provider's network security\n   controller can monitor, analyze,\
    \ and investigate the abnormal events\n   and provide information to the customer\
    \ or change the network\n   configuration automatically.\n   [CAP-INTERFACE] provides\
    \ details on how monitoring aspects of the\n   flow-based Network Security Functions\
    \ (NSFs) can use the I2NSF\n   interfaces to receive traffic reports and enforce\
    \ appropriate\n   policies.\n"
- title: 3.1.9.  Lack of Mechanism for Dynamic Key Distribution to NSFs
  contents:
  - "3.1.9.  Lack of Mechanism for Dynamic Key Distribution to NSFs\n   There is a\
    \ need for a controller to create, manage, and distribute\n   various keys to\
    \ distributed NSFs.  While there are many key\n   management methods and cryptographic\
    \ suites (e.g., encryption\n   algorithms, key derivation functions, etc.) and\
    \ other functions,\n   there is a lack of a standard interface to provision and\
    \ manage\n   security associations.\n   The keys may be used for message authentication\
    \ and integrity in\n   order to protect data flows.  In addition, keys may be\
    \ used to secure\n   the protocols and messages in the core routing infrastructure\
    \ (see\n   [RFC4948]).\n   As of now, there is not much focus on an abstraction\
    \ for keying\n   information that describes the interface between protocols,\n\
    \   operators, and automated key management.\n   An example of a solution may\
    \ provide some insight into why the lack\n   of a mechanism is a problem.  If\
    \ a device had an abstract key table\n   maintained by security services, it could\
    \ use these keys for routing\n   and security devices.\n   What does this take?\n\
    \   Conceptually, there must be an interface defined for routing/\n   signaling\
    \ protocols that can a) make requests for automated key\n   management when it\
    \ is being used and b) notify the protocols when\n   keys become available in\
    \ the key table.  One potential use of such an\n   interface is to manage IPsec\
    \ security associations on Software-\n   Defined Networks.\n   An abstract key\
    \ service will work under the following conditions:\n   1.  I2NSF needs to design\
    \ the key table abstraction, the interface\n       between key management protocols\
    \ and routing/other protocols, and\n       possibly security protocols at other\
    \ layers.\n   2.  For each routing/other protocol, I2NSF needs to define the\n\
    \       mapping between how the protocol represents key material and the\n   \
    \    protocol-independent key table abstraction.  If several protocols\n     \
    \  share common mechanisms for authentication (e.g., TCP\n       Authentication\
    \ Option [RFC5925]), then the same mapping may be\n       used for all usages\
    \ of that mechanism.\n   3.  Automated key management needs to support both pairwise\
    \ keys and\n       group keys via the abstract key service provided by items 1\
    \ and\n       2.  I2NSF controllers within the NSF that are required to\n    \
    \   exchange data with NSFs may exchange data with individual NSFs\n       using\
    \ individual pairwise keys or with a group of NSFs\n       simultaneously using\
    \ an IP group address secured by a group\n       security key(s).\n"
- title: 3.2.  Challenges Facing Customers
  contents:
  - "3.2.  Challenges Facing Customers\n   When customers invoke hosted security services,\
    \ their security\n   policies may be enforced by a collection of security functions\
    \ hosted\n   in different domains.  Customers may not have the security skills\
    \ to\n   express sufficiently precise requirements or security policies.\n   Usually,\
    \ these customers express the expectations of their security\n   requirements\
    \ or the intent of their security policies.  These\n   expectations can be considered\
    \ customer-level security expectations.\n   Customers may also desire to express\
    \ guidelines for security\n   management.  Examples of such guidelines include:\n\
    \   o  which critical communications are to be preserved during critical\n   \
    \   events and which hosts will continue services over the network,\n   o  what\
    \ signaling information is passed to a controller during a DDoS\n      in order\
    \ to ask for mitigation services (within the scope of the\n      DOTS Working\
    \ Group),\n   o  reporting of attacks to CERT (within the scope of the MILE Working\n\
    \      Group), and\n   o  managing network connectivity of systems out of compliance\
    \ (within\n      the scope of the SACM Working Group).\n"
- title: 3.2.1.  NSFs from Heterogeneous Administrative Domains
  contents:
  - "3.2.1.  NSFs from Heterogeneous Administrative Domains\n   Many medium and large\
    \ enterprises have deployed various on-premises\n   security functions that they\
    \ want to continue to use.  These\n   enterprises want to combine local security\
    \ functions with remote\n   hosted security functions to achieve more efficient\
    \ and immediate\n   countermeasures to attacks originating on both the Internet\
    \ and\n   enterprise networks.\n   Some enterprises may only need the hosted security\
    \ services for their\n   remote branch offices where minimal security infrastructures/\n\
    \   capabilities exist.  The security solution will consist of deploying\n   NSFs\
    \ on customer networks and on service provider networks.\n"
- title: 3.2.2.  Today's Vendor-Specific Control Requests
  contents:
  - "3.2.2.  Today's Vendor-Specific Control Requests\n   Customers may utilize NSFs\
    \ provided by multiple service providers.\n   Customers need to express their\
    \ security requirements, guidelines,\n   and expectations to the service providers.\
    \  In turn, the service\n   providers must translate this customer information\
    \ into customer\n   security policies and associated configuration tasks for the\
    \ set of\n   security functions in their network.  Without a standardized\n  \
    \ interface that provides a clear technical characterization, the\n   service\
    \ provider faces many challenges:\n   No standard technical characterization,\
    \ APIs, or interface(s):\n      Even for the most common security services, there\
    \ is no standard\n      technical characterization, APIs, or interface(s).  Most\
    \ security\n      services are accessible only through disparate, proprietary\n\
    \      interfaces (e.g., portals or APIs) in whatever format vendors\n      choose\
    \ to offer.  The service provider must process the customer's\n      input with\
    \ these widely varying interfaces and differing\n      configuration models for\
    \ security devices and security policy.\n      Without a standard interface, new\
    \ innovative security products\n      find a large barrier to entry into the market.\n\
    \   Lack of immediate feedback:  Customers may also require a mechanism\n    \
    \  to easily update/modify their security requirements with immediate\n      effect\
    \ in the underlying involved NSFs.\n   Lack of explicit invocation request:  While\
    \ security agreements are\n      in place, security functions may be solicited\
    \ without requiring an\n      explicit invocation means.  Nevertheless, some explicit\
    \ invocation\n      means may be required to interact with a service function.\n\
    \   Managing by scripts du jour:  The current practices rely upon the use\n  \
    \    of scripts that generate other scripts, which automatically run to\n    \
    \  upload or download configuration changes, log information, and\n      other\
    \ things.  These scripts have to be adjusted each time an\n      implementation\
    \ from a different vendor technology is enabled by a\n      provider.\n   To see\
    \ how standard interfaces could help achieve faster\n   implementation time cycles,\
    \ let us consider a customer who would like\n   to dynamically allow an encrypted\
    \ flow with a specific port, src/dst\n   addresses, or protocol type through the\
    \ firewall/IPS to enable an\n   encrypted video conferencing call only during\
    \ the time of the call.\n   With no commonly accepted interface in place, as shown\
    \ in Figure 1,\n   the customer would have to learn about the particular provider's\n\
    \   firewall/IPS interface and send the request in the provider's\n   required\
    \ format.\n           +------------+\n           | Security   |\n           |\
    \ Management |\n           | System     |\n           +----||------+\n       \
    \         ||   Proprietary\n                ||   or I2NSF Standard\n   Video:\
    \       ||\n   Port 10   +--------+\n     --------| FW/IPS |-------------\n  \
    \ Encrypted +--------+\n   Video Flow\n         Figure 1: Example of Non-standard\
    \ vs. Standard Interface\n   In contrast, as Figure 1 shows, if a firewall/IPS\
    \ interface standard\n   exists, the customer would be able to send the request\
    \ to a security\n   management system, and the security management would send\
    \ it via a\n   I2NSF standard interface.  Service providers could now utilize\
    \ the\n   same standard interface to represent firewall/IPS services\n   implemented\
    \ using products from many vendors.\n"
- title: 3.2.3.  Difficulty for Customers to Monitor the Execution of Desired
  contents:
  - "3.2.3.  Difficulty for Customers to Monitor the Execution of Desired\n      \
    \  Policies\n   How a policy is translated into technology-specific actions is\
    \ hidden\n   from the customers.  However, customers still need ways to monitor\n\
    \   the delivered security service that results from the execution of\n   their\
    \ desired security requirements, guidelines, and expectations.\n   Customers want\
    \ to monitor existing policies to determine such things\n   as which policies\
    \ are in effect, how many security attacks are being\n   prevented, and how much\
    \ bandwidth efficiency does security\n   enforcement cost.\n   Today, there is\
    \ no standard way for customers to get these details\n   from the security service.\
    \  As a consequence, there is no way to\n   assure customers that their specified\
    \ security policies are properly\n   enforced by the security functions located\
    \ in the provider domain.\n   Customers also want this monitoring information\
    \ from the security\n   system in order to plan for the future using \"what-if\"\
    \ scenarios with\n   real data.  A tight loop between the data gathered from security\n\
    \   systems and the \"what-if\" scenario planning can reduce the time to\n   design\
    \ and deploy workable security policies that deal with new\n   threats.\n   It\
    \ is the objective of the I2NSF work to provide a standard way to\n   get the\
    \ information that security service assurance systems need to\n   provide customers\
    \ an evaluation about the current security systems\n   and to quickly plan for\
    \ future security policies using \"what-if\"\n   scenarios based on today's information.\n"
- title: 3.3.  Lack of Standard Interface to Inject Feedback to NSF
  contents:
  - "3.3.  Lack of Standard Interface to Inject Feedback to NSF\n   Today, many security\
    \ functions in the NSF, such as IPS, IDS, DDoS\n   mitigation, and antivirus,\
    \ depend heavily on the associated profiles.\n   NSF devices can perform more\
    \ effective protection if these NSF\n   devices have the up-to-date profiles for\
    \ these functions.  Today,\n   there is no standard interface to provide these\
    \ security profiles for\n   the NSF.\n   As more sophisticated threats arise,\
    \ protection will depend on\n   enterprises, vendors, and service providers being\
    \ able to cooperate\n   to develop optimal profiles; one example of this cooperation\
    \ is the\n   Cyber Threat Alliance [CTA].  The standard interface to provide\n\
    \   security profiles to the NSF should interwork with the formats that\n   exchange\
    \ security profiles between organizations.\n   One objective of the I2NSF work\
    \ is to provide this type of standard\n   interface to security profiles.\n"
- title: 3.4.  Lack of Standard Interface for Capability Negotiation
  contents:
  - "3.4.  Lack of Standard Interface for Capability Negotiation\n   There could be\
    \ situations when the selected NSFs cannot perform the\n   policies requested\
    \ by the security controller due to resource\n   constraints.  The customer and\
    \ security service provider should\n   negotiate the appropriate resource constraints\
    \ before the security\n   service begins.  However, unexpected events may happen\
    \ that cause the\n   NSF to exhaust those negotiated resources.  At this point,\
    \ the NSF\n   should inform the security controller that the allotted resources\n\
    \   have been exhausted.  To support the automatic control in the SDN\n   era,\
    \ it is necessary to have a set of messages for proper\n   notification (and a\
    \ response to that notification) between the\n   security controller and the NSFs.\n"
- title: 3.5.  Difficulty in Validating Policies across Multiple Domains
  contents:
  - "3.5.  Difficulty in Validating Policies across Multiple Domains\n   As discussed\
    \ in the previous four sub-sections, both service\n   providers and customers\
    \ have need to express policies and profiles,\n   monitor systems, verify security\
    \ policy has been installed in NSFs\n   within a security domain, and establish\
    \ limits for services NSFs can\n   safely perform.  This sub-section and the next\
    \ sub-section\n   (Section 3.6) examine what happens in two specific network scenarios:\n\
    \   a) multi-domain control of security devices hosted on virtual and\n   non-virtual\
    \ NSFs and b) Software-Defined Networking.\n   Hosted security service may instantiate\
    \ NSFs in virtual machines that\n   are sometimes widely distributed in the network\
    \ and sometimes are\n   combined together in one device to perform a set of tasks\
    \ for\n   delivering a service.  Hosted security services may be connected\n \
    \  within a single service provider or via multiple service providers.\n   Ensuring\
    \ that the security service purchased by the customer adheres\n   to customer\
    \ policy requires that the central controller(s) for this\n   service monitor\
    \ and validate this service across multiple networks on\n   NSFs (some of which\
    \ may be virtual networks on virtual machines).  To\n   set up this cross-domain\
    \ service, the security controller must be\n   able to communicate with NSFs and/or\
    \ controllers within its domain\n   and across domains to negotiate for the services\
    \ needed.\n   Without standard interfaces and security policy data models, the\n\
    \   enforcement of a customer-driven security policy remains challenging\n   because\
    \ of the inherent complexity created by combining the\n   invocation of several\
    \ vendor-specific security functions into a\n   multi-vendor, heterogeneous environment\
    \ across multiple domains.\n   Each vendor-specific function may require specific\
    \ configuration\n   procedures and operational tasks.\n   Ensuring the consistent\
    \ enforcement of the policies at various\n   domains is also challenging.  Standard\
    \ data models are likely to\n   contribute to solving that issue.\n"
- title: 3.6.  Software-Defined Networks
  contents:
  - "3.6.  Software-Defined Networks\n   Software-Defined Networks have changed the\
    \ landscape of data-center\n   designs by introducing overlay networks deployed\
    \ over Top-of-Rack\n   (ToR) switches that connect to a hypervisor.  SDN techniques\
    \ are\n   meant to improve the flexibility of workload management without\n  \
    \ affecting applications and how they work.  Workload can thus be\n   easily and\
    \ seamlessly managed across private and public clouds.  SDN\n   techniques optimize\
    \ resource usage and are now being deployed in\n   various networking environments\
    \ besides cloud infrastructures.  Yet,\n   such SDN-conferred agility may raise\
    \ specific security issues.  For\n   example, a security administrator must make\
    \ sure that a security\n   policy can be enforced regardless of the location of\
    \ the workload,\n   thereby raising concerns about the ability of SDN computation\
    \ logic\n   to send security policy-provisioning information to the participating\n\
    \   NSFs.  A second example is workload migration to a public cloud\n   infrastructure,\
    \ which may raise additional security requirements\n   during the migration.\n"
- title: 4.  Use Cases
  contents:
  - "4.  Use Cases\n   Standard interfaces for monitoring and controlling the behavior\
    \ of\n   NSFs are essential building blocks for security service providers and\n\
    \   enterprises to automate the use of different NSFs from multiple\n   vendors\
    \ by their security management entities.  I2NSF may be invoked\n   by any (authorized)\
    \ client.  Examples of authorized clients are\n   upstream applications (controllers),\
    \ orchestration systems, and\n   security portals.\n"
- title: 4.1.  Basic Framework
  contents:
  - "4.1.  Basic Framework\n   Users request security services through specific clients\
    \ (e.g., a\n   customer application, the Business Support Systems / Operations\n\
    \   Support Systems (BSSs/OSSs) of Network Service Providers (NSPs), or a\n  \
    \ management platform), and the appropriate NSP network entity will\n   invoke\
    \ the (v)NSFs according to the user service request.  This\n   network entity\
    \ is denoted as the security controller in this\n   document.  The interaction\
    \ between the entities discussed above\n   (client, security controller, and NSF)\
    \ is shown in Figure 2:\n                                +----------+\n      \
    \   +-------+              |          |                  +-------+\n         |\
    \       |  Interface 1 |Security  |   Interface 2    | NSF(s)|\n         |Client\
    \ <-------------->          <------------------>       |\n         |       | \
    \             |Controller|                  |       |\n         +-------+    \
    \          |          |                  +-------+\n                         \
    \       +----------+\n                  Figure 2: Interaction between Entities\n\
    \   Interface 1 is used for receiving security requirements from a client\n  \
    \ and translating them into commands that NSFs can understand and\n   execute.\
    \  The security controller also passes back NSF security\n   reports (e.g., statistics)\
    \ to the client that the security controller\n   has gathered from NSFs.  Interface\
    \ 2 is used for interacting with\n   NSFs according to commands (e.g., enact/revoke\
    \ a security policy or\n   distribute a policy) and collecting status information\
    \ about NSFs.\n   Client devices or applications can require the security controller\
    \ to\n   add, delete, or update rules in the security service function for\n \
    \  their specific traffic.\n   When users want to get the executing status of\
    \ a security service,\n   they can request NSF status from the client.  The security\
    \ controller\n   will collect NSF information through Interface 2, consolidate\
    \ it, and\n   give feedback to the client through Interface 1.  This interface\
    \ can\n   be used to collect not only individual service information, but also\n\
    \   aggregated data suitable for tasks like infrastructure security\n   assessment.\n\
    \   Customers may require validating NSF availability, provenance, and\n   execution.\
    \  This validation process, especially relevant to vNSFs,\n   includes at least:\n\
    \   Integrity of the NSF:  Ensuring that the NSF is not compromised;\n   Isolation:\
    \  Ensuring the execution of the NSF is self-contained for\n      privacy requirements\
    \ in multi-tenancy scenarios; and\n   Provenance of the NSF:  Customers may need\
    \ to be provided with strict\n      guarantees about the origin of the NSF, its\
    \ status (e.g.,\n      available, idle, down, and others), and feedback mechanisms\
    \ so\n      that a customer may be able to check that a given NSF or set of\n\
    \      NSFs properly conform to the customer's requirements and\n      subsequent\
    \ configuration tasks.\n   In order to achieve this, the security controller may\
    \ collect\n   security measurements and share them with an independent and trusted\n\
    \   third party (via Interface 1) in order to allow for attestation of\n   NSF\
    \ functions using the third-party added information.\n   This implies that there\
    \ may be the following two types of clients\n   using Interface 1: the end user\
    \ and the trusted, independent third\n   party.  The I2NSF work may determine\
    \ that Interface 1 creates two\n   sub-interfaces to support these two types of\
    \ clients.\n"
- title: 4.2.  Access Networks
  contents:
  - "4.2.  Access Networks\n   This scenario describes use cases for users (e.g.,\
    \ residential user,\n   enterprise user, mobile user, and management system) that\
    \ request and\n   manage security services hosted in the NSP infrastructure. \
    \ Given\n   that NSP customers are essentially users of their access networks,\n\
    \   the scenario is essentially associated with their characteristics as\n   well\
    \ as with the use of vNSFs.  Figure 3 shows how different types of\n   customers\
    \ connect through virtual access nodes (vCPE, vPE, and vEPC)\n   to an NSF.\n\
    \   The vCPE described in use case #7 in [NFVUC] requires a model of\n   access\
    \ virtualization that includes mobile and residential access\n   networks where\
    \ the operator may offload security services from the\n   customer's local environment\
    \ (e.g., device or terminal) to its own\n   infrastructure.\n   These use cases\
    \ define the interaction between the operator and the\n   vNSFs through automated\
    \ interfaces that support the business\n   communications between customer and\
    \ provider or between two business\n   entities.\n            Customer   +   \
    \  Access     +     PoP / Data Center\n                       |              \
    \  |     +--------+\n                       |          ,-----+--.  |Network |\n\
    \                       |        ,'      |   `-|Operator|\n       +-------------+\
    \ |       /+----+  |     |Mgmt Sys|\n       | Residential |-+------/-+vCPE+----+\
    \   +--------+\n       +-------------+ |     /  +----+  |  \\     |     :\n  \
    \                     |    /           |   \\    |     |\n        +----------+\
    \   |   ;    +----+  |    +----+    |\n        |Enterprise|---+---+----+ vPE+--+----+\
    \ NSF|    |\n        +----------+   |   :    +----+  |    +----+    |\n      \
    \                 |    :           |   /          |\n            +--------+ |\
    \    :   +----+  |  /           ;\n            | Mobile |-+-----\\--+vEPC+----+\
    \           /\n            +--------+ |      \\ +----+  | Service    /\n     \
    \                  |       `--.     | Provider  /\n                       |  \
    \         `----+---------..\n                       +                +   ^^\n\
    \                                            ||\n                            \
    \          Service Provider\n                                         encompasses\n\
    \                                         everything\n                       \
    \                  in circle\n   vCPE - virtual customer premises equipment\n\
    \   vPE  - virtual provider edge\n   vEPC - virtual evolved packet core\n   PoP\
    \  - point of presence\n                         Figure 3: NSF and Actors\n  \
    \ Different access clients may have different service requests:\n   Residential:\
    \  service requests for parental control, content\n      management, and threat\
    \ management.\n      Threat content management may include identifying and blocking\n\
    \      malicious activities from web contents, mail, or files downloaded.\n  \
    \    Threat management may include identifying and blocking botnets or\n     \
    \ malware.\n   Enterprise:  service requests for enterprise flow security policies\n\
    \      and managed security services.\n      Flow security policies identify and\
    \ block malicious activities\n      during access to (or isolation from) web sites\
    \ or social media\n      applications.  Managed security services for an enterprise\
    \ may\n      include detection and mitigation of external and internal threats.\n\
    \      External threats can include application or phishing attacks,\n      malware,\
    \ botnet, DDoS, and others.\n   Service Provider:  service requests for policies\
    \ that protect service\n      provider networks against various threats (including\
    \ DDoS,\n      botnets, and malware).  Such policies are meant to securely and\n\
    \      reliably deliver contents (e.g., data, voice, and video) to\n      various\
    \ customers, including residential, mobile, and corporate\n      customers.  These\
    \ security policies are also enforced to guarantee\n      isolation between multiple\
    \ tenants, regardless of the nature of\n      the corresponding connectivity services.\n\
    \   Mobile:  service requests from interfaces that monitor and ensure\n      user\
    \ quality of experience, content management, parental controls,\n      and external\
    \ threat management.\n      Content management for the mobile device includes\
    \ identifying and\n      blocking malicious activities from web contents, mail,\
    \ and files\n      uploaded/downloaded.  Threat management for infrastructure\n\
    \      includes detecting and removing malicious programs such as botnet,\n  \
    \    malware, and other programs that create DDoS attacks).\n   Some access customers\
    \ may not care about which NSFs are utilized to\n   achieve the services they\
    \ requested.  In this case, provider network\n   orchestration systems can internally\
    \ select the NSFs (or vNSFs) to\n   enforce the security policies requested by\
    \ the clients.\n   Other access customers, especially some enterprise customers,\
    \ may\n   want to contract separately for dedicated NSFs (most likely vNSFs)\n\
    \   for direct control purposes.  In this case, here are the steps to\n   associate\
    \ vNSFs to specific customers:\n   vNSF Deployment:  The deployment process consists\
    \ of instantiating an\n      NSF on an NFV Infrastructure (NFVI), within the NSP\
    \ administrative\n      domain(s) or with other external domain(s).  This is a\
    \ required\n      step before a customer can subscribe to a security service\n\
    \      supported in the vNSF.\n   vNSF Customer Provisioning:  Once a vNSF is\
    \ deployed, any customer\n      can subscribe to it.  The provisioning life cycle\
    \ includes the\n      following:\n      *  Customer enrollment and cancellation\
    \ of the subscription to a\n         vNSF.\n      *  Configuration of the vNSF,\
    \ based on specific configurations or\n         derived from common security policies\
    \ defined by the NSP.\n      *  Retrieval of the vNSF functionalities, extracted\
    \ from a\n         manifest or a descriptor.  The NSP management systems can\n\
    \         demand this information to offer detailed information through\n    \
    \     the commercial channels to the customer.\n"
- title: 4.3.  Cloud Data Center Scenario
  contents:
  - "4.3.  Cloud Data Center Scenario\n   In a data center, network security mechanisms\
    \ such as firewalls may\n   need to be dynamically added or removed for a number\
    \ of reasons.\n   These changes may be explicitly requested by the user or triggered\
    \ by\n   a pre-agreed-upon demand level in the Service Level Agreement (SLA)\n\
    \   between the user and the provider of the service.  For example, the\n   service\
    \ provider may be required to add more firewall capacity within\n   a set of time\
    \ frames whenever the bandwidth utilization hits a\n   certain threshold for a\
    \ specified period.  This capacity expansion\n   could result in adding new instances\
    \ of firewalls on existing\n   machines or provisioning a completely new firewall\
    \ instance in a\n   different machine.\n   The on-demand, dynamic nature of security\
    \ service delivery\n   essentially encourages that the network security \"devices\"\
    \ be in\n   software or virtual forms rather than in a physical appliance form.\n\
    \   This requirement is a provider-side concern.  Users of the firewall\n   service\
    \ are agnostic (as they should be) as to whether or not the\n   firewall service\
    \ is run on a VM or any other form factor.  Indeed,\n   they may not even be aware\
    \ that their traffic traverses firewalls.\n   Furthermore, new firewall instances\
    \ need to be placed in the \"right\n   zone\" (domain).  The issue applies not\
    \ only to multi-tenant\n   environments where getting the tenant in the right\
    \ domain is of\n   paramount importance, but also in environments owned and operated\
    \ by\n   a single organization with its own service segregation policies.  For\n\
    \   example, an enterprise may mandate that firewalls serving Internet\n   traffic\
    \ within the organization be separated from inter-organization\n   traffic.  Another\
    \ example is IPS/IDS services that split investment\n   banking traffic from other\
    \ data traffic to comply with regulatory\n   restrictions for transfer of investment\
    \ banking information.\n"
- title: 4.3.1.  On-Demand Virtual Firewall Deployment
  contents:
  - "4.3.1.  On-Demand Virtual Firewall Deployment\n   A cloud data center operated\
    \ by a service provider could serve tens\n   of thousands of clients.  Clients'\
    \ compute servers are typically\n   hosted on VMs, which could be deployed across\
    \ different server racks\n   located in different parts of the data center.  It\
    \ is often not\n   technically and/or financially feasible to deploy dedicated\
    \ physical\n   firewalls to suit each client's security policy requirements, which\n\
    \   can be numerous.  What is needed is the ability to dynamically deploy\n  \
    \ virtual firewalls for each client's set of servers based on\n   established\
    \ security policies and underlying network topologies.\n   Figure 4 shows an example\
    \ topology of virtual firewalls within a data\n   center.\n           ---+-----------------------------+-----\n\
    \              |                             |\n             +---+           \
    \              +-+-+\n             |vFW|                         |vFW|\n     \
    \        +---+                         +-+-+\n               |    Client #1  \
    \              |  Client #2\n            ---+-------+---               ---+-------+---\n\
    \             +-+-+   +-+-+                 +-+-+   +-+-+\n             |VM |\
    \   |VM |                 |VM |   |VM |\n             +---+   +---+          \
    \       +---+   +---+\n                       Figure 4: NSF in Data Centers\n"
- title: 4.3.2.  Firewall Policy Deployment Automation
  contents:
  - "4.3.2.  Firewall Policy Deployment Automation\n   Firewall rules apply to traffic\
    \ usually identified with addresses and\n   ports.  It becomes far more complex\
    \ in provider-owned cloud networks\n   that serve myriads of customers.\n   Firewall\
    \ rules today are highly tied with ports and addresses that\n   identify traffic.\
    \  This makes it very difficult for clients of cloud\n   data centers to construct\
    \ rules for their own traffic, as the clients\n   only see the virtual networks\
    \ and the virtual addresses.  The\n   customer-visible virtual networks and addresses\
    \ may be different from\n   the actual packets traversing the firewalls.\n   Even\
    \ though most vendors support similar firewall features, the\n   specific rule\
    \ configuration keywords are different from vendor to\n   vendor, making it difficult\
    \ for automation.  Automation works best\n   when it can leverage a common set\
    \ of standards that will work across\n   NSFs by multiple vendors and utilize\
    \ dynamic key management.\n"
- title: 4.3.3.  Client-Specific Security Policy in Cloud VPNs
  contents:
  - "4.3.3.  Client-Specific Security Policy in Cloud VPNs\n   Clients of cloud data\
    \ centers operated by a service provider need to\n   secure Virtual Private Networks\
    \ (VPNs) and virtual security functions\n   that apply the clients' security policies.\
    \  The security policies may\n   govern communication within the clients' own\
    \ virtual networks as well\n   as communication with external networks.  For example,\
    \ VPN service\n   providers may need to provide firewall and other security services\
    \ to\n   their VPN clients.  Today, it is generally not possible for clients\n\
    \   to dynamically view (let alone change) what, where, and how security\n   policies\
    \ are implemented on their provider-operated clouds.  Indeed,\n   no standards-based\
    \ framework exists to allow clients to retrieve/\n   manage security policies\
    \ in a consistent manner across different\n   providers.\n   As described above,\
    \ the dynamic key management is critical for\n   securing the VPN and the distribution\
    \ of policies.\n"
- title: 4.3.4.  Internal Network Monitoring
  contents:
  - "4.3.4.  Internal Network Monitoring\n   There are many types of internal traffic\
    \ monitors that may be managed\n   by a security controller.  This includes the\
    \ class of services\n   referred to as Data Loss Prevention (DLP) or Reputation\
    \ Protection\n   Services (RPS).  Depending on the class of event, alerts may\
    \ go to\n   internal administrators or external services.\n"
- title: 4.4.  Preventing DDoS, Malware, and Botnet Attacks
  contents:
  - "4.4.  Preventing DDoS, Malware, and Botnet Attacks\n   On the Internet, where\
    \ everything is connected, preventing unwanted\n   traffic that may cause a DoS\
    \ attack or a DDoS attack has become a\n   challenge.  Similarly, a network could\
    \ be exposed to malware attacks\n   and become an attack vector that may jeopardize\
    \ the operation of\n   other networks, by means of remote commands for example.\
    \  Many\n   networks that carry groups of information (such as Internet of Things\n\
    \   (IoT) networks, Information-Centric Networks (ICNs), Content Delivery\n  \
    \ Networks (CDNs), Voice over IP (VoIP) packet networks, and Voice over\n   LTE\
    \ (VoLTE)) are also exposed to such remote attacks.  There are many\n   examples\
    \ of remote attacks on these networks, but the following\n   examples will illustrate\
    \ the issues.  A malware attack on an IoT\n   network that carries sensor readings\
    \ and instructions may attempt to\n   alter the sensor instructions in order to\
    \ disable a key sensor.  A\n   malware attack on VoIP or VoLTE networks involves\
    \ software that\n   attempts to place unauthorized long-distance calls.  Botnets\
    \ may\n   overwhelm nodes in ICNs and CDNs so that the networks cannot pass\n\
    \   critical data.\n   In order for organizations to better secure their networks\
    \ against\n   these kind of attacks, the I2NSF framework should provide a client-\n\
    \   side interface that is use case independent and technology agnostic.\n   Technology\
    \ agnostic is defined to be generic, technology independent,\n   and able to support\
    \ multiple protocols and data models.  For example,\n   such an I2NSF interface\
    \ could be used to provision security policy\n   configuration information that\
    \ looks for specific malware signatures.\n   Similarly, botnet attacks could be\
    \ easily prevented by provisioning\n   security policies using the I2NSF client-side\
    \ interface that prevents\n   access to botnet command and control servers.\n"
- title: 4.5.  Regulatory and Compliance Security Policies
  contents:
  - "4.5.  Regulatory and Compliance Security Policies\n   Organizations must protect\
    \ their networks against attacks and must\n   also adhere to various industry\
    \ regulations: any organization that\n   falls under a specific regulation, like\
    \ the Payment Card Industry -\n   Data Security Standard (PCI-DSS) [PCI-DSS] for\
    \ the payment industry\n   or the Health Insurance Portability and Accountability\
    \ Act [HIPAA]\n   for the healthcare industry, must be able to isolate various\
    \ kinds of\n   traffic.  They must also show records of their security policies\n\
    \   whenever audited.\n   The I2NSF client-side interface could be used to provision\
    \ regulatory\n   and compliance-related security policies.  The security controller\n\
    \   would keep track of when and where a specific policy is applied and\n   if\
    \ there is any policy violation; this information can be provided in\n   the event\
    \ of an audit as proof that traffic is isolated between\n   specific endpoints,\
    \ in full compliance with the required regulations.\n"
- title: 5.  Management Considerations
  contents:
  - "5.  Management Considerations\n   Management of NSFs usually include the following:\n\
    \   o  Life-cycle management and resource management of NSFs,\n   o  Device configuration,\
    \ such as address configuration, device\n      internal attributes configuration,\
    \ etc.,\n   o  Signaling of events, notifications, and changes, and\n   o  Policy\
    \ rule provisioning.\n   I2NSF will only focus on the policy provisioning part\
    \ of NSF\n   management.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Having secure access to control and monitor NSFs\
    \ is crucial for\n   hosted security services.  An I2NSF security controller raises\
    \ new\n   security threats.  It needs to be resilient to attacks and quickly\n\
    \   recover from them.  Therefore, proper secure communication channels\n   have\
    \ to be carefully specified for carrying, controlling, and\n   monitoring traffic\
    \ between the NSFs and their management entity (or\n   entities).\n   The traffic\
    \ flow security policies specified by customers can\n   conflict with providers'\
    \ internal traffic flow security policies.\n   This conflict can be resolved in\
    \ one of two ways: a) installed\n   policies can restrict traffic if either the\
    \ customer traffic flow\n   security policies or the provider's internal security\
    \ policies\n   restrict traffic, or b) installed policies can only restrict traffic\n\
    \   if both the customer traffic flow security policies and the\n   provider's\
    \ internal traffic flow security policies restrict data.\n   Either choice could\
    \ cause potential problems.  It is crucial for the\n   management system to flag\
    \ these conflicts to the customers and to the\n   service provider.\n   It is\
    \ important to proper AAA [RFC2904] to authorize access to the\n   network and\
    \ access to the I2NSF management stream.\n   Enforcing the appropriate privacy\
    \ is key to all IETF protocols (see\n   [RFC6973]) and is especially important\
    \ for IETF security management\n   protocols since they are deployed to protect\
    \ the network.  In some\n   circumstances, security management protocols may be\
    \ utilized to\n   protect an individual's home, phone, or other personal data.\
    \  In this\n   case, any solution should carefully consider whether combining\n\
    \   management streams abides by the recommendations of [RFC6973] for\n   data\
    \ minimization, user participation, and security.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [ACCESS-USECASE]\n              Wang, K. and X.\
    \ Zhuang, \"Integrated Security with Access\n              Network Use Case\"\
    , Work in Progress,\n              draft-qi-i2nsf-access-network-usecase-02, March\
    \ 2015.\n   [CAP-INTERFACE]\n              Zhou, C., Xia, L., Boucadair, M., and\
    \ J. Xiong, \"The\n              Capability Interface for Monitoring Network Security\n\
    \              Functions (NSF) in I2NSF\", Work in Progress,\n              draft-zhou-i2nsf-capability-interface-monitoring-00,\n\
    \              October 2015.\n   [CTA]      \"Cyber Threat Alliance\", <http://cyberthreatalliance.org>.\n\
    \   [DC-USECASE]\n              Zarny, M., Majee, S., Leymann, N., and L. Dunbar,\
    \ \"I2NSF\n              Data Center Use Cases\", Work in Progress,\n        \
    \      draft-zarny-i2nsf-data-center-use-cases-00, October 2014.\n   [EPC-3GPP]\
    \ Firmin, F., \"The Evolved Packet Core\", January 2017.\n   [ETSI-NFV] ETSI,\
    \ \"Network Functions Virtualisation (NFV);\n              Architectural Framework\"\
    , ETSI GS NFV 002 V1.2.1, December\n              2014.\n   [FIREWALLS]\n    \
    \          Baker, F. and P. Hoffman, \"On Firewalls in Internet\n            \
    \  Security\", Work in Progress,\n              draft-ietf-opsawg-firewalls-01,\
    \ October 2012.\n   [Gartner]  Messmer, E., \"Gartner: Cloud-based security as\
    \ a service\n              set to take off\", October 2013.\n   [HIPAA]    US\
    \ Congress, \"Health Insurance Portability and\n              Accountability Act\
    \ of 1996 (Public Law 104-191)\", August\n              1996, <https://www.hhs.gov/hipaa/>.\n\
    \   [I2NSF-ANALYSIS]\n              Hares, S., Moskowitz, R., and D. Zhang, \"\
    Analysis of\n              Existing work for I2NSF\", Work in Progress,\n    \
    \          draft-ietf-i2nsf-gap-analysis-03, March 2017.\n   [I2NSF-USECASES]\n\
    \              Pastor, A., Lopez, D., Wang, K., Zhuang, X., Qi, M.,\n        \
    \      Zarny, M., Majee, S., Leymann, N., Dunbar, L., and M.\n              Georgiades,\
    \ \"Use Cases and Requirements for an Interface\n              to Network Security\
    \ Functions\", Work in Progress,\n              draft-pastor-i2nsf-merged-use-cases-00,\
    \ June 2015.\n   [NFVUC]    ETSI, \"Network Functions Virtualization (NFV); Use\
    \ Cases\",\n              ETSI GR NFV 001 V1.2.1, May 2017.\n   [OAM-USECASE]\n\
    \              Pastor, A. and D. Lopez, \"Access Use Cases for an Open OAM\n \
    \             Interface to Virtualized Security Services\", Work in\n        \
    \      Progress, draft-pastor-i2nsf-access-usecases-00, October\n            \
    \  2014.\n   [PCI-DSS]  PCI Security Standards Council, \"Payment Card Industry\n\
    \              (PCI) Data Security Standard -- Requirements and Security\n   \
    \           Assessment Procedures\", PCS DSS v3.2, April 2016,\n             \
    \ <https://www.pcisecuritystandards.org/pci_security/>.\n   [RFC2904]  Vollbrecht,\
    \ J., Calhoun, P., Farrell, S., Gommans, L.,\n              Gross, G., de Bruijn,\
    \ B., de Laat, C., Holdrege, M., and\n              D. Spence, \"AAA Authorization\
    \ Framework\", RFC 2904,\n              DOI 10.17487/RFC2904, August 2000,\n \
    \             <http://www.rfc-editor.org/info/rfc2904>.\n   [RFC4948]  Andersson,\
    \ L., Davies, E., and L. Zhang, \"Report from the\n              IAB workshop\
    \ on Unwanted Traffic March 9-10, 2006\",\n              RFC 4948, DOI 10.17487/RFC4948,\
    \ August 2007,\n              <http://www.rfc-editor.org/info/rfc4948>.\n   [RFC5925]\
    \  Touch, J., Mankin, A., and R. Bonica, \"The TCP\n              Authentication\
    \ Option\", RFC 5925, DOI 10.17487/RFC5925,\n              June 2010, <http://www.rfc-editor.org/info/rfc5925>.\n\
    \   [RFC6973]  Cooper, A., Tschofenig, H., Aboba, B., Peterson, J.,\n        \
    \      Morris, J., Hansen, M., and R. Smith, \"Privacy\n              Considerations\
    \ for Internet Protocols\", RFC 6973,\n              DOI 10.17487/RFC6973, July\
    \ 2013,\n              <http://www.rfc-editor.org/info/rfc6973>.\n   [RFC7149]\
    \  Boucadair, M. and C. Jacquenet, \"Software-Defined\n              Networking:\
    \ A Perspective from within a Service Provider\n              Environment\", RFC\
    \ 7149, DOI 10.17487/RFC7149, March 2014,\n              <http://www.rfc-editor.org/info/rfc7149>.\n\
    \   [RFC7426]  Haleplidis, E., Ed., Pentikousis, K., Ed., Denazis, S.,\n     \
    \         Hadi Salim, J., Meyer, D., and O. Koufopavlou, \"Software-\n       \
    \       Defined Networking (SDN): Layers and Architecture\n              Terminology\"\
    , RFC 7426, DOI 10.17487/RFC7426, January\n              2015, <http://www.rfc-editor.org/info/rfc7426>.\n\
    \   [SDN-SECURITY]\n              Jeong, J., Kim, H., Park, J., Ahn, T., and S.\
    \ Lee,\n              \"Software-Defined Networking Based Security Services using\n\
    \              Interface to Network Security Functions\", Work in\n          \
    \    Progress, draft-jeong-i2nsf-sdn-security-services-05, July\n            \
    \  2016.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This document was supported by the Institute for Information\
    \ &\n   Communications Technology Promotion (IITP), which is funded by the\n \
    \  Ministry of Science, ICT & Future Planning (MSIP) (R0166-15-1041,\n   Standard\
    \ Development of Network Security based SDN).\n"
- title: Contributors
  contents:
  - "Contributors\n   I2NSF is a group effort.  The following people actively contributed\n\
    \   to the initial use case text: Xiaojun Zhuang (China Mobile), Sumandra\n  \
    \ Majee (F5), Ed Lopez (Curveball Networks), and Robert Moskowitz\n   (Huawei).\n\
    \   I2NSF has had a number of contributing authors.  The following are\n   considered\
    \ co-authors:\n   o  Linda Dunbar (Huawei)\n   o  Antonio Pastur (Telefonica I+D)\n\
    \   o  Mohamed Boucadair (France Telecom)\n   o  Michael Georgiades (Prime Tel)\n\
    \   o  Minpeng Qi (China Mobile)\n   o  Shaibal Chakrabarty (US Ignite)\n   o\
    \  Nic Leymann (Deutsche Telekom)\n   o  Anil Lohiya (Juniper)\n   o  David Qi\
    \ (Bloomberg)\n   o  Hyoungshick Kim (Sungkyunkwan University)\n   o  Jung-Soo\
    \ Park (ETRI)\n   o  Tae-Jin Ahn (Korea Telecom)\n   o  Se-Hui Lee (Korea Telecom)\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Susan Hares\n   Huawei\n   7453 Hickory Hill\n   Saline,\
    \ MI  48176\n   United States of America\n   Phone: +1-734-604-0332\n   Email:\
    \ shares@ndzh.com\n   Diego R. Lopez\n   Telefonica I+D\n   Don Ramon de la Cruz,\
    \ 82\n   Madrid  28006\n   Spain\n   Email: diego.r.lopez@telefonica.com\n   Myo\
    \ Zarny\n   vArmour\n   800 El Camino Real, Suite 3000\n   Mountain View, CA \
    \ 94040\n   United States of America\n   Email: myo@varmour.com\n   Christian\
    \ Jacquenet\n   France Telecom\n   Rennes, 35000\n   France\n   Email: Christian.jacquenet@orange.com\n\
    \   Rakesh Kumar\n   Juniper Networks\n   1133 Innovation Way\n   Sunnyvale, CA\
    \  94089\n   United States of America\n   Email: rakeshkumarcloud@gmail.com\n\
    \   Jaehoon Paul Jeong\n   Department of Software\n   Sungkyunkwan University\n\
    \   2066 Seobu-Ro, Jangan-Gu\n   Suwon, Gyeonggi-Do  16419\n   Republic of Korea\n\
    \   Phone: +82 31 299 4957\n   Fax:   +82 31 290 7996\n   Email: pauljeong@skku.edu\n\
    \   URI:   http://iotlab.skku.edu/people-jaehoon-jeong.php\n"
