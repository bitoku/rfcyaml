- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                  V. Dolmatov, Ed.
  contents:
  - "Independent Submission                                  V. Dolmatov, Ed.\n  \
    \              GOST R 34.11-94: Hash Function Algorithm\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is intended to be a source of information about the\n\
    \   Russian Federal standard hash function (GOST R 34.11-94), which is\n   one\
    \ of the Russian cryptographic standard algorithms (called GOST\n   algorithms).\
    \  Recently, Russian cryptography is being used in\n   Internet applications,\
    \ and this document has been created as\n   information for developers and users\
    \ of GOST R 34.11-94 for hash\n   computation.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5831.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n   This document\
    \ may not be modified, and derivative works of it may not\n   be created, except\
    \ to format it for publication as an RFC or to\n   translate it into languages\
    \ other than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. General Information ........................................3\n  \
    \    1.2. The Purpose of GOST R 34.11-94 .............................3\n   2.\
    \ Applicability ...................................................3\n   3. Conventions\
    \ Used in This Document ...............................4\n   4. General Statements\
    \ ..............................................5\n   5. Step-by-Step Hash Function\
    \ ......................................5\n      5.1. Key Generation .............................................5\n\
    \      5.2. Encryption Transformation ..................................7\n  \
    \    5.3. Mixing Transformation ......................................7\n   6.\
    \ The Calculation Procedure for a Hash Function ...................8\n   7. Test\
    \ Examples (Informative) .....................................9\n      7.1. Usage\
    \ of the Algorithm GOST 28147-89 ......................10\n      7.2. Representation\
    \ of Vectors .................................11\n      7.3. Examples of the Hash\
    \ Value Calculation ....................11\n           7.3.1. Hash Calculation\
    \ for the Sample Message M ..........11\n           7.3.2. Hash Calculation for\
    \ the Sample Message M ..........14\n   8. Security Considerations ........................................16\n\
    \   9. Normative References ...........................................16\n  \
    \ 10. Contributors ..................................................17\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  General Information
  contents:
  - "1.1.  General Information\n   1. GOST R 34.11-94  [GOST3411] was developed by\
    \ the Federal Agency\n      for Government Communication and Information and by\
    \ the All-Russia\n      Scientific and Research Institute of Standardization.\n\
    \   2. GOST R 34.11-94 was accepted and activated by Act 154 of\n      23.05.1994\
    \ issued by the Russian Federal committee for standards.\n"
- title: 1.2.  The Purpose of GOST R 34.11-94
  contents:
  - "1.2.  The Purpose of GOST R 34.11-94\n   Expanding the application of information\
    \ technologies when creating,\n   processing, and storing documents requires,\
    \ in some cases,\n   confidentiality of their contents, maintenance of completeness,\
    \ and\n   authenticity.\n   Cryptography (cryptographic security) is one of the\
    \ effective\n   approaches for data security.  It is widely applied in different\n\
    \   areas of government and commercial activity.\n   Cryptographic data security\
    \ methods are under serious scientific\n   research and standardization efforts\
    \ at national, regional, and\n   international levels.\n   GOST R 34.11-94 defines\
    \ a hash function calculation procedure for an\n   arbitrary sequence of binary\
    \ symbols.\n   The hash function maps an arbitrary set of data represented as\
    \ a\n   sequence of binary symbols onto its image of a fixed small length.\n \
    \  Thus, hash functions can be used in procedures related to the\n   electronic\
    \ digital signature, resulting in considerable reduction of\n   elapsed time for\
    \ the sign and verify stages.  The effect of the\n   reduction of time is due\
    \ to the fact that only a short image of\n   initial data is actually signed.\n"
- title: 2.  Applicability
  contents:
  - "2.  Applicability\n   GOST R 34.11-94 defines an algorithm and procedure for\
    \ the\n   calculation of a hash function for an arbitrary sequence of binary\n\
    \   symbols.  These algorithms and procedures should be applied in\n   cryptographic\
    \ methods of data processing and securing, including\n   digital signature procedures\
    \ employed for data transfer and data\n   storage in computer-aided systems.\n\
    \   The hash function, defined in GOST R 34.11-94, is used for digital\n   signature\
    \ systems based on the asymmetric cryptographic algorithm\n   according to GOST\
    \ R 34.10-2001 (see section 3).\n"
- title: 3.  Conventions Used in This Document
  contents:
  - "3.  Conventions Used in This Document\n   The following notations are used in\
    \ GOST R 34.11-94:\n   V_all is a set of all finite words in the alphabet V =\
    \ {0,1}.  The\n   words are read from right to left and the alphabet symbols are\n\
    \   numbered from right to left (i.e., the rightmost symbol of the word\n   has\
    \ the number one, the second rightmost symbol has number two,\n   etc.).\n   Vk\
    \ is a set of all words in alphabet V = {0,1} of length k bits\n   (k=16,64,256).\n\
    \   |A| is the length of a word A belonging to V_all.\n   A||B is a concatenation\
    \ of words A, B belonging to V_all.  Its length\n   is |A| + |B|, where the left\
    \ |A| symbols come from the word A, and\n   the right |B| symbols come from the\
    \ word B.  One can also use the\n   notation A||B = A * B.\n   A^k is a concatenation\
    \ of k copies of the word A (A belongs to\n   V_all).\n   <N>_k is a word of length\
    \ k, containing a binary representation of\n   N(mod 2^k) residue, with a non-negative\
    \ integer N.\n   A^$ is a non-negative integer with A as its binary representation.\n\
    \   (xor) is the bitwise modulo 2 addition of the words of the same\n   length.\n\
    \   (+)' is the addition according to the rule A (+)' B = <A^$+ B^$>_k,\n   where\
    \ k = |A| = |B|.\n   M is a binary sequence to be hashed, M belongs to V_all.\
    \  M is a\n   message in digital signature systems.\n   h is a hash function that\
    \ maps the sequence M belonging to V_all onto\n   the word h(M) belonging to V_256.\n\
    \   E(k,A) is a result of the encryption of the word A using key K with\n   the\
    \ encryption algorithm according to [GOST28147] in the electronic\n   codebook\
    \ (ECB) mode (K belongs to V256, A belongs to V64).\n   h0 is an initial hash\
    \ value.\n   e := g is the assignment of the value g to the parameter e.\n   ^\
    \ is the power operator.\n   i = 1..8 is an interval with i being all the values\
    \ from 1 to 8.\n   hUZ is the S-boxes described in [GOST28147].\n"
- title: 4.  General Statements
  contents:
  - "4.  General Statements\n   A hash function h is the mapping h :  V_all -> V256,\
    \ depending on the\n   parameter (which is the initial hash value H, H is a word\
    \ from V256).\n   To define the hash function, it is necessary to have:\n    \
    \  - a calculation algorithm for the step-by-step hash function\n        chi :\
    \ V256 x V256 ->  V256\n      - a description of an iterative procedure for calculating\
    \ the hash\n        value h\n   A hash function h depends on two parameters, h0\
    \ and hUZ.\n"
- title: 5.  Step-by-Step Hash Function
  contents:
  - "5.  Step-by-Step Hash Function\n   A calculation algorithm for the step-by-step\
    \ hash function contains\n   three parts, which successively do:\n      - key\
    \ generation, here keys are 256-bit words;\n      - an encryption transformation,\
    \ that is encryption of 64-bit\n        subwords of word H using keys K[i], (i\
    \ = 1, 2, 3, 4) with the\n        algorithm according to [GOST28147] in ECB mode;\
    \ and\n      - a mixing transformation for the result of the encryption.\n"
- title: 5.1  Key Generation
  contents:
  - "5.1  Key Generation\n   Consider X = (b[256], b[255], ..., b[1]) belongs to V256.\n\
    \   Let:\n      X = x[4]||x[3]||x[2]||x[1] = eta[16]||[eta15]||...||eta[1]\n \
    \       = xi[32]||xi[31]||...||xi[1], where\n        x[i] = (b[i*64],...,b[(i-1)*64+1])\
    \ belongs to V64, i = 1..4,\n      eta[j] = (b[j*16],...,b[(j-1)*16+1]) belongs\
    \ to V16, j = 1..16,\n       xi[k] = (b[k*8],..., b[(k-1)*8+1]) belongs to V8,\
    \ k = 1..32.\n   Yet, another notation: A(X) = (x[1](xor)x[2])||x[4]||x[3]||x[2].\n\
    \   The transformation P : V256 -> V256 maps the word xi32||...||xi1\n   onto\
    \ the word xi[phi(32)] || ... || xi[phi(1)],\n   where phi(i + 1 + 4 ( k - 1)\
    \ ) = 8i + k , i = 0..3, k = 1..8.\n   For the key generation, one should use\
    \ the following initial data:\n      - words H, M belonging to V256,\n      -\
    \ parameters: words C[i] (i = 2, 3, 4), with values:\n        C[2] = C[4] = 0^256;\n\
    \        C[3] = 1^8||0^8||1^16||0^24||1^16||0^8||(0^8||1^8)^2||1^8||0^8\n    \
    \           ||(0^8||1^8)^4||(1^8||0^8 )^4.\n   The following algorithm is used\
    \ for the key calculation:\n   1. Assign values:\n      i := 1, U := H , V :=\
    \ M.\n   2. Calculate:\n      W = U (xor) V , K[i] = P(W).\n   3. Assign:\n  \
    \    i := i + 1.\n   4. Verify condition:\n      i = 5.\n   If it is true, go\
    \ to step 7.  If not, go to step 5.\n   5. Calculate:\n      U := A(U)(xor)C[i],\
    \ V := A(A(V)),\n      W := U(xor)V, K[i] = P(W).\n   6. Go to step 3.\n   7.\
    \ End.\n"
- title: 5.2.  Encryption Transformation
  contents:
  - "5.2.  Encryption Transformation\n   At this stage, 64-bit subwords of the word\
    \ H are encrypted using keys\n   K[i] (i = 1, 2, 3, 4).\n   For the encryption\
    \ transformation, one should use the following\n   initial data:\n      H = h[4]||h[3]||h[2]||h[1],\n\
    \   where h[i] belongs to V64, i = 1,2,3,4, and a key set is K[1], K[2],\n   K[3],\
    \ K[4].\n   The encryption algorithm is applied and the following words are\n\
    \   obtained:\n      s[i] = E(K[i],h[i]), where: i = 1,2,3,4\n   As a result of\
    \ the stage, the following sequence is formed:\n      S = s[4]||s[3]||s[2]||s[1].\n"
- title: 5.3.  Mixing Transformation
  contents:
  - "5.3.  Mixing Transformation\n   At this stage, the obtained sequence is mixed\
    \ using a shift register.\n   The initial data includes words H, M belonging to\
    \ V256 and a word S\n   belonging to V256 .\n   Let a mapping PSI(X) : V256(2)\
    \ -> V256(2) transform the word:\n      eta[16]||eta[15]||...||eta[1], eta[i]\
    \ belongs to V16, i = 1..16\n   into the word:\n      eta[1](xor)eta[2](xor)eta[3](xor)eta[4](xor)eta[13](xor)eta[16]\n\
    \      ||eta[16]||...||eta[2].\n   Then, the value of the step-by-step hash function\
    \ value is the word:\n      chi(M, H) =  PSI^61(H(xor)PSI(M(xor)PSI^12(S))),\n\
    \   where PSI^i(X) is the transformation PSI applied i times to X.\n"
- title: 6.  The Calculation Procedure for a Hash Function
  contents:
  - "6.  The Calculation Procedure for a Hash Function\n   The calculation procedure\
    \ for a hash function h is assumed to be\n   applied to a sequence M belonging\
    \ to V_all.  Its parameter is an\n   initial hash value h0, which is an arbitrarily\
    \ fixed word from V256.\n   The calculation procedure for the function h uses\
    \ the following\n   quantities at each step of iteration:\n   _M_ belonging to\
    \ V_all - a part of the sequence M, which was not\n   hashed at previous iterations;\n\
    \   H belonging to V256 - the current hash value;\n   SIGMA belonging to V256\
    \ - the current check sum value;\n   L belonging to V256 - the length of the partial\
    \ sequence M processed\n   at the previous iteration step.\n   The calculation\
    \ algorithm for function h consists of the following\n   steps:\n   Step 1. Assign\
    \ initial values to current quantities:\n      1.1 _M_ := M.\n      1.2 H := h0.\n\
    \      1.3 SIGMA := 0^256.\n      1.4 L := 0^256.\n      1.5 Go to step 2.\n \
    \  Step 2.\n      2.1 Verify the condition |_M_|>256.\n   If it is true, go to\
    \ step 3.\n   Else, make the following calculations:\n      2.2 L := <L^$ + |M|>_256\n\
    \      2.3 M' := 0^(256 -|M|)||M\n      2.4 SIGMA := SIGMA (+)' M'\n      2.5\
    \ H := chi (M', H)\n      2.6 H := chi (L, H)\n      2.7 H := chi (SIGMA, H)\n\
    \      2.8 End.\n   Step 3.\n      3.1 Calculate a subword M_s belonging to V256\
    \ of the word _M_\n          (_M_ = M_p||M_s).  Then make the following calculations:\n\
    \      3.2 H := chi (M_s, H)\n      3.3 L := <L^$ + 256>_256\n      3.4 SIGMA\
    \ := SIGMA (+)' M[s]\n      3.5 _M_ = M_p\n      3.6 Go to step 2.\n   The quantity\
    \ H obtained at step 2.7 is the value of the hash function\n   h(M).\n"
- title: 7.  Test Examples (Informative)
  contents:
  - "7.  Test Examples (Informative)\n   It is recommended to use the values for substitution\
    \ units pi[1],\n   pi[2],..., pi[8] and the initial hash value H described in\
    \ this\n   appendix for the GOST R 34.11-94 test examples only.\n"
- title: 7.1.  Usage of the Algorithm GOST 28147-89
  contents:
  - "7.1.  Usage of the Algorithm GOST 28147-89\n   The algorithm GOST 28147-89 [GOST28147]\
    \ in ECB mode is used as an\n   encryption transformation in the following examples.\
    \  The following\n   values of the substitution units pi[1], pi[2],..., pi[8]\
    \ have been\n   chosen:\n           8 7 6 5 4 3 2 1\n       0   1 D 4 6 7 5 E\
    \ 4\n       1   F B B C D 8 B A\n       2   D 4 A 7 A 1 4 9\n       3   0 1 0\
    \ 1 1 D C 2\n       4   5 3 7 5 0 A 6 D\n       5   7 F 2 F 8 3 D 8\n       6\
    \   A 5 1 D 9 4 F 0\n       7   4 9 D 8 F 2 A E\n       8   9 0 3 4 E E 2 6\n\
    \       9   2 A 6 A 4 F 3 B\n      10   3 E 8 9 6 C 8 1\n      11   E 7 5 E C\
    \ 7 1 C\n      12   6 6 9 0 B 6 0 7\n      13   B 8 C 3 2 0 7 F\n      14   8\
    \ 2 F B 5 9 5 5\n      15   C C E 2 3 B 9 3\n   The hexadecimal value of pi[j](i)\
    \ is given in a column number j,\n      j = 1..8, and in a row number i, i = 0..15.\n"
- title: 7.2.  Representation of Vectors
  contents:
  - "7.2.  Representation of Vectors\n   We will put down binary symbol sequences\
    \ as hexadecimal digits\n   strings, where each digit corresponds to four signs\
    \ of its binary\n   representation.\n"
- title: 7.3 Examples of the Hash Value Calculation
  contents:
  - "7.3 Examples of the Hash Value Calculation\n   A zero vector, for example, can\
    \ be taken as an initial hash value:\n   h0 = 00000000 00000000 00000000 00000000\n\
    \        00000000 00000000 00000000 00000000\n"
- title: 7.3.1.  Hash Calculation for the Sample Message M
  contents:
  - "7.3.1.  Hash Calculation for the Sample Message M\n   M = 73657479 62203233 3D687467\
    \ 6E656C20\n       2C656761 7373656D 20736920 73696854\n   Initial values are\
    \ assigned for the text:\n   _M_   = 73657479 62203233 3D687467 6E656C20\n   \
    \        2C656761 7373656D 20736920 73696854\n   for the hash function:\n   H\
    \   = 00000000 00000000 00000000 00000000\n         00000000 00000000 00000000\
    \ 00000000\n   for the sum of text blocks:\n   SIGMA = 00000000 00000000 00000000\
    \ 00000000\n           00000000 00000000 00000000 00000000\n   for the length\
    \ of the text:\n   L = 00000000 00000000 00000000 00000000\n       00000000 00000000\
    \ 00000000 00000000\n   If the length of the message to be hashed equals 256 bits\
    \ (32 bytes),\n   then:\n   L = 00000000 00000000 00000000 00000000\n       00000000\
    \ 00000000 00000000 00000100\n   M' = _M_ = 73657479 62203233 3D687467 6E656C20\n\
    \              2C656761 7373656D 20736920 73696854\n   and there is no need to\
    \ pad the current block with zeroes:\n   SIGMA=M' = 73657479 62203233 3D687467\
    \ 6E656C20\n               2C656761 7373656D 20736920 73696854\n   The step-by-step\
    \ hash function chi(M, N) values are calculated.\n   The keys are generated:\n\
    \   K[1] = 733D2C20 65686573 74746769 326C6568\n          626E7373 20657369 79676120\
    \ 33206D54\n   K[2] = 110C733D 0D166568 130E7474 06417967\n          1D00626E\
    \ 161A2065 090D326C 4D393320\n   K[3] = 80B111F3 730DF216 850013F1 C7E1F941\n\
    \          620C1DFF 3ABAE91A 3FA109F2 F513B239\n   K[4] = A0E2804E FF1B73F2 ECE27A00\
    \ E7B8C7E1\n          EE1D620C AC0CC5BA A804C05E A18B0AEC\n   The 64-bit subwords\
    \ of block H are encrypted by the algorithm\n   according to GOST 28147.\n   Block\
    \ h[1] = 00000000 00000000 is encrypted using key K[1] and\n   s[1] = 42ABBCCE\
    \ 32BC0B1B is obtained.\n   Block h[2] = 00000000 00000000 is encrypted using\
    \ key K[2] and\n   s[2] = 5203EBC8 5D9BCFFD is obtained.\n   Block h[3] = 00000000\
    \ 00000000 is encrypted using key K[3] and\n   s[3] = 8D345899 00FF0E28 is obtained.\n\
    \   Block h[4] = 00000000 00000000 is encrypted using key K[4] and\n   s[4] =\
    \ E7860419 0D2A562D is obtained.\n   So S = E7860419 0D2A562D 8D345899 00FF0E28\n\
    \          5203EBC8 5D9BCFFD 42ABBCCE 32BC0B1B\n   is obtained.\n   The mixing\
    \ transformation using a shift register is performed and\n   KSI = chi(M, H) =\
    \ CF9A8C65 505967A4 68A03B8C 42DE7624\n                     D99C4124 883DA687\
    \ 561C7DE3 3315C034\n   is obtained.\n   Assign H = KSI and calculate chi(L, H):\n\
    \   K[1] = CF68D956 9AA09C1C 8C3B417D 658C24E3\n          50428833 59DE3D15 6776A6C1\
    \ A4248734\n   K[2] = 8FCF68D9 809AA09C 3C8C3B41 C7658C24\n          BB504288\
    \ 2859DE3D 666676A6 B3A42487\n   K[3] = 4E70CF97 3C8065A0 853C8CC4 57389A8C\n\
    \          CABB50BD E3D7A6DE D1996788 5CB35B24\n   K[4] = 584E70CF C53C8065 48853C8C\
    \ 1657389A\n          EDCABB50 78E3D7A6 EED19867 7F5CB35B\n   S    = 66B70F5E\
    \ F163F461 468A9528 61D60593\n          E5EC8A37 3FD42279 3CD1602D DD783E86\n\
    \   KSI  = 2B6EC233 C7BC89E4 2ABC2692 5FEA7285\n          DD3848D1 C6AC997A 24F74E2B\
    \ 09A3AEF7\n   Now assign H = KSI again and calculate chi( SIGMA, H):\n   K[1]\
    \ = 5817F104 0BD45D84 B6522F27 4AF5B00B\n          A531B57A 9C8FDFCA BB1EFCC6\
    \ D7A517A3\n   K[2] = E82759E0 C278D950 15CC523C FC72EBB6\n          D2C73DA8\
    \ 19A6CAC9 3E8440F5 C0DDB65A\n   K[3] = 77483AD9 F7C29CAA EB06D1D7 841BCAD3\n\
    \          FBC3DAA0 7CB555F0 D4968080 0A9E56BC\n   K[4] = A1157965 2D9FBC9C 088C7CC2\
    \ 46FB3DD2\n          7684ADCB FA4ACA06 53EFF7D7 C0748708\n   S    = 2AEBFA76\
    \ A85FB57D 6F164DE9 2951A581\n          C31E7435 4930FD05 1F8A4942 550A582D\n\
    \   KSI  = FAFF37A6 15A81669 1CFF3EF8 B68CA247\n          E09525F3 9F811983 2EB81975\
    \ D366C4B1\n   Then, the hash result is:\n   H    = FAFF37A6 15A81669 1CFF3EF8\
    \ B68CA247\n          E09525F3 9F811983 2EB81975 D366C4B1\n"
- title: 7.3.2.  Hash Calculation for the Sample Message M
  contents:
  - "7.3.2.  Hash Calculation for the Sample Message M\n   Let M = 7365 74796220 3035203D\
    \ 20687467 6E656C20\n                73616820 65676173 73656D20 6C616E69\n   \
    \             6769726F 20656874 2065736F 70707553\n   As the length of the message\
    \ to be hashed equals 400 bits (50 bytes),\n   the message is divided into two\
    \ blocks, and the second (high-order)\n   one is padded with zeroes.  During the\
    \ calculations the following\n   numbers are obtained:\n   STEP 1.\n   H    =\
    \ 00000000 00000000 00000000 00000000\n          00000000 00000000 00000000 00000000\n\
    \   M_s = 73616820 65676173 73656D20 6C616E69\n         6769726F 20656874 2065736F\
    \ 70707553\n   K[1] = 73736720 61656965 686D7273 20206F6F\n          656C2070\
    \ 67616570 616E6875 73697453\n   K[2] = 14477373 0C0C6165 1F01686D 4F002020\n\
    \          4C50656C 04156761 061D616E 1D277369\n   K[3] = CBFF14B8 6D04F30C 96051FFE\
    \ DFFFB000\n          35094CAF 72F9FB15 7CF006E2 AB1AE227\n   K[4] = EBACCB00\
    \ F7006DFB E5E16905 B0B0DFFF\n          BA1C3509 FD118DF9 F61B830F F8C554E5\n\
    \   S    = FF41797C EEAADAC2 43C9B1DF 2E14681C\n          EDDC2210 1EE1ADF9 FA67E757\
    \ DAFE3AD9\n   KSI  = F0CEEA4E 368B5A60 C63D96C1 E5B51CD2\n          A93BEFBD\
    \ 2634F0AD CBBB69CE ED2D5D9A\n   STEP 2.\n   H    = F0CEEA4E 368B5A60 C63D96C1\
    \ E5B51CD2\n          A93BEFBD 2634F0AD CBBB69CE ED2D5D9A\n   M'   = 00000000\
    \ 00000000 00000000 00007365\n          74796220 3035203D 20687467 6E656C20\n\
    \   K[1] = F0C6DDEB CE3D42D3 EA968D1D 4EC19DA9\n          36E51683 8BB50148 5A6FD031\
    \ 60B790BA\n   K[2] = 16A4C6A9 F9DF3D3B E4FC96EF 5309C1BD\n          FB68E526\
    \ 2CDBB534 FE161C83 6F7DD2C8\n   K[3] = C49D846D 1780482C 9086887F C48C9186\n\
    \          9DCB0644 D1E641E5 A02109AF 9D52C7CF\n   K[4] = BDB0C9F0 756E9131 E1F290EA\
    \ 50E4CBB1\n          1CAD9536 F4E4B674 99F31E29 70C52AFA\n   S    = 62A07EA5\
    \ EF3C3309 2CE1B076 173D48CC\n          6881EB66 F5C7959F 63FCA1F1 D33C31B8\n\
    \   KSI  = 95BEA0BE 88D5AA02 FE3C9D45 436CE821\n          B8287CB6 2CBC135B 3E339EFE\
    \ F6576CA9\n   STEP 3.\n   H    = 95BEA0BE 88D5AA02 FE3C9D45 436CE821\n      \
    \    B8287CB6 2CBC135B 3E339EFE F6576CA9\n   L    = 00000000 00000000 00000000\
    \ 00000000\n          00000000 00000000 00000000 00000190\n   K[1] = 95FEB83E\
    \ BE3C2833 A09D7C9E BE45B6FE\n          88432CF6 D56CBC57 AAE8136D 02215B39\n\
    \   K[2] = 8695FEB8 1BBE3C28 E2A09D7C 48BE45B6\n          DA88432C EBD56CBC 7FABE813\
    \ F292215B\n   K[2] = 8695FEB8 1BBE3C28 E2A09D7C 48BE45B6\n          DA88432C\
    \ EBD56CBC 7FABE813 F292215B\n   K[3] = B9799501 141B413C 1EE2A062 0CB74145\n\
    \          6FDA88BC D0142A6C FA80AA16 15F2FDB1\n   K[4] = 94B97995 7D141B41 C21EE2A0\
    \ 040CB741\n          346FDA88 46D0142A BDFA81AA DC1562FD\n   S    = D42336E0\
    \ 2A0A6998 6C65478A 3D08A1B9\n          9FDDFF20 4808E863 94FD9D6D F776A7AD\n\
    \   KSI  = 47E26AFD 3E7278A1 7D473785 06140773\n          A3D97E7E A744CB43 08AA4C24\
    \ 3352C745\n   STEP 4.\n   H    = 47E26AFD 3E7278A1 7D473785 06140773\n      \
    \    A3D97E7E A744CB43 08AA4C24 3352C745\n   SIGMA = 73616820 65676173 73656D20\
    \ 6C61E1CE\n           DBE2D48F 509A88B1 40CDE7D6 DED5E173\n   K[1] = 340E7848\
    \ 83223B67 025AAAAB DDA5F1F2\n          5B6AF7ED 1575DE87 19E64326 D2BDF236\n\
    \   K[2] = 03DC0ED0 F4CD26BC 8B595F13 F5A4A55E\n          A8B063CB ED3D7325 6511662A\
    \ 7963008D\n   K[3] = C954EF19 D0779A68 ED37D3FB 7DA5ADDC\n          4A9D0277\
    \ 78EF765B C4731191 7EBB21B1\n   K[4] = 6D12BC47 D9363D19 1E3C696F 28F2DC02\n\
    \          F2137F37 64E4C18B 69CCFBF8 EF72B7E3\n   S    = 790DD7A1 066544EA 2829563C\
    \ 3C39D781\n          25EF9645 EE2C05DD A5ECAD92 2511A4D1\n   KSI  = 0852F562\
    \ 3B89DD57 AEB4781F E54DF14E\n          EAFBC135 0613763A 0D770AA6 57BA1A47\n\
    \   Then, the hash result is:\n   H    = 0852F562 3B89DD57 AEB4781F E54DF14E\n\
    \          EAFBC135 0613763A 0D770AA6 57BA1A47\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This entire document is about security considerations.\n\
    \   Current cryptographic resistance of GOST R 34.11-94 hash algorithm is\n  \
    \ estimated as 2^128 operations of computations of step hash functions.\n   (There\
    \ is a known method to reduce this estimate to 2^105 operations,\n   but it demands\
    \ padding the colliding message with 1024 random bit\n   blocks each of 256-bit\
    \ length; thus, it cannot be used in any\n   practical implementation).\n"
- title: 9.  Normative References
  contents:
  - "9.  Normative References\n   [GOST28147] \"Cryptographic Protection for Data\
    \ Processing System\",\n               GOST 28147-89, Gosudarstvennyi Standard\
    \ of USSR,\n               Government Committee of the USSR for Standards, 1989.\n\
    \               (In Russian)\n   [GOST3411]  \"Information technology.  Cryptographic\
    \ Data Security.\n               Hashing function.\", GOST R 34.10-94, Gosudarstvennyi\n\
    \               Standard of Russian Federation, Government Committee of\n    \
    \           the Russia for Standards, 1994. (In Russian)\n"
- title: 10.  Contributors
  contents:
  - "10.  Contributors\n   Dmitry Kabelev\n   Cryptocom, Ltd.\n   14 Kedrova St.,\
    \ Bldg. 2\n   Moscow, 117218\n   Russian Federation\n   EMail: kdb@cryptocom.ru\n\
    \   Igor Ustinov\n   Cryptocom, Ltd.\n   14 Kedrova St., Bldg. 2\n   Moscow, 117218\n\
    \   Russian Federation\n   EMail: igus@cryptocom.ru\n   Sergey Vyshensky\n   Moscow\
    \ State University\n   Leninskie gory, 1\n   Moscow, 119991\n   Russian Federation\n\
    \   EMail: svysh@pn.sinp.msu.ru\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Vasily Dolmatov, Ed.\n   Cryptocom, Ltd.\n   14 Kedrova\
    \ St., Bldg. 2\n   Moscow, 117218\n   Russian Federation\n   EMail: dol@cryptocom.ru\n"
