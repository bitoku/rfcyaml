- title: __initial_text__
  contents:
  - "                    Definitions of Managed Objects\n           for Remote Ping,\
    \ Traceroute, and Lookup Operations\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines Management Information Bases (MIBs) for performing\n\
    \   ping, traceroute, and lookup operations at a host.  When managing a\n   network,\
    \ it is useful to be able to initiate and retrieve the results\n   of ping or\
    \ traceroute operations when they are performed at a remote\n   host.  A lookup\
    \ capability is defined in order to enable resolution\n   of either an IP address\
    \ to an DNS name or a DNS name to an IP address\n   at a remote host.\n   Currently,\
    \ there are several enterprise-specific MIBs for performing\n   remote ping or\
    \ traceroute operations.  The purpose of this memo is to\n   define a standards-based\
    \ solution to enable interoperability.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Ping .......................................................3\n  \
    \    1.2. Traceroute .................................................4\n    \
    \  1.3. Lookup .....................................................5\n      1.4.\
    \ Remote Operations ..........................................5\n   2. The Internet-Standard\
    \ Management Framework ......................5\n   3. Structure of the MIBs ...........................................6\n\
    \      3.1. Ping MIB ...................................................6\n  \
    \         3.1.1. pingMaxConcurrentRequests ...........................7\n    \
    \       3.1.2. pingCtlTable ........................................7\n      \
    \     3.1.3. pingResultsTable ....................................7\n        \
    \   3.1.4. pingProbeHistoryTable ...............................8\n      3.2.\
    \ Traceroute MIB .............................................8\n           3.2.1.\
    \ traceRouteMaxConcurrentRequests .....................8\n           3.2.2. traceRouteCtlTable\
    \ ..................................8\n           3.2.3. traceRouteResultsTable\
    \ ..............................9\n           3.2.4. traceRouteProbeHistoryTable\
    \ ........................10\n           3.2.5. traceRouteHopsTable ................................10\n\
    \      3.3. Lookup MIB ................................................10\n  \
    \         3.3.1. lookupMaxConcurrentRequests and lookupPurgeTime ....11\n    \
    \       3.3.2. lookupCtlTable .....................................11\n      \
    \     3.3.3. lookupResultsTable .................................12\n      3.4.\
    \ Conformance ...............................................12\n   4. Definitions\
    \ ....................................................13\n      4.1. DISMAN-PING-MIB\
    \ ...........................................13\n      4.2. DISMAN-TRACEROUTE-MIB\
    \ .....................................46\n      4.3. DISMAN-NSLOOKUP-MIB .......................................84\n\
    \   5. Security Considerations ........................................95\n  \
    \ 6. Acknowledgements ...............................................97\n   7.\
    \ References .....................................................97\n      7.1.\
    \ Normative References ......................................97\n      7.2. Informative\
    \ References ....................................98\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines standards-based MIB modules for performing\n\
    \   specific remote operations.  The remote operations defined by this\n   document\
    \ consist of the ping, traceroute, and lookup functions.\n   Ping and traceroute\
    \ are two very useful functions for managing\n   networks.  Ping is typically\
    \ used to determine whether a path exists\n   between two hosts, whereas traceroute\
    \ shows an actual path.\n   Both ping and traceroute yield round-trip times measured\
    \ in\n   milliseconds.  These times can be used as a rough approximation for\n\
    \   network transit time.\n   The lookup functions considered in this document\
    \ are the equivalents\n   of name to address conversion functions such as\n  \
    \ gethostbyname()/gethostbyaddr() and getaddrinfo()/getnameinfo().\n   The key\
    \ words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"\
    SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n\
    \   document are to be interpreted as described in RFC 2119 [RFC2119].\n"
- title: 1.1.  Ping
  contents:
  - "1.1.  Ping\n   Ping is usually implemented using the Internet Control Message\n\
    \   Protocol (ICMP) \"ECHO\" facility.  It is also possible to implement a\n \
    \  ping capability using alternate methods, including the following:\n      o\
    \   Using the UDP echo port (7), if supported.\n          This is defined by RFC\
    \ 862 [RFC862].\n      o   Timing a Simple Network Management Protocol (SNMP)\
    \ query.\n      o   Timing a TCP connect attempt.\n   In general, almost any request/response\
    \ flow can be used to generate\n   a round-trip time.  Often, many of the non-ICMP\
    \ ECHO facility methods\n   stand a better chance of yielding a good response\
    \ (not timing out,\n   for example) since some routers don't honor Echo Requests\
    \ (timeout\n   situation) or are handled at lower priority, thus possibly giving\n\
    \   false indications of round trip times.\n   Note that almost any of the various\
    \ methods used for generating a\n   round-trip time can be considered a form of\
    \ system attack when used\n   excessively.  Sending a system request too often\
    \ can negatively\n   effect its performance.  Attempting to connect to what is\
    \ supposed to\n   be an unused port can be very unpredictable.  There are tools\
    \ that\n   attempt to connect to a range of TCP ports to test that any receiving\n\
    \   server can handle erroneous connection attempts.\n   It is also important\
    \ to a management application using a remote ping\n   capability to know which\
    \ method is being used.  Different methods\n   will yield different response times,\
    \ since the protocol and resulting\n   processing will be different.  It is RECOMMENDED\
    \ that the ping\n   capability defined within this memo be implemented using the\
    \ ICMP\n   Echo Facility.\n"
- title: 1.2.  Traceroute
  contents:
  - "1.2.  Traceroute\n   Traceroute is usually implemented by transmitting a series\
    \ of probe\n   packets with increasing time-to-live values.  A probe packet is\
    \ a UDP\n   datagram encapsulated into an IP packet.  Each hop in a path to the\n\
    \   target (destination) host rejects the probe packet (probe's TTL too\n   small)\
    \ until its time-to-live value becomes large enough for the\n   probe to be forwarded.\
    \  Each hop in a traceroute path returns an ICMP\n   message that is used to discover\
    \ the hop and to calculate a round\n   trip time.  Some systems use ICMP probes\
    \ (ICMP Echo request packets)\n   instead of UDP ones to implement traceroute.\
    \  In both cases\n   traceroute relies on the probes being rejected via an ICMP\
    \ message to\n   discover the hops taken along a path to the final destination.\
    \  Both\n   probe types, UDP and ICMP, are encapsulated into an IP packet and\n\
    \   thus have a TTL field that can be used to cause a path rejection.\n   Implementations\
    \ of the remote traceroute capability as defined within\n   this memo SHOULD be\
    \ done using UDP packets to a (hopefully) unused\n   port.  ICMP probes (ICMP\
    \ Echo Request packets) SHOULD NOT be used.\n   Many PC implementations of traceroute\
    \ use the ICMP probe method,\n   which they should not, since this implementation\
    \ method has been\n   known to have a high probability of failure.  Intermediate\
    \ hops\n   become invisible when a router either refuses to send an ICMP TTL\n\
    \   expired message in response to an incoming ICMP packet or simply\n   tosses\
    \ ICMP echo requests altogether.\n   The behavior of some routers not to return\
    \ a TTL expired message in\n   response to an ICMP Echo request is due in part\
    \ to the following text\n   extracted from RFC 792 [RFC792]:\n   \"The ICMP messages\
    \ typically report errors in the processing of\n   datagrams.  To avoid the infinite\
    \ regress of messages about messages\n   etc., no ICMP messages are sent about\
    \ ICMP messages.\"\n"
- title: 1.3.  Lookup
  contents:
  - "1.3.  Lookup\n   The Lookup operation enables remote lookup of addresses for\
    \ a\n   symbolic name as it is, for example, performed by functions\n   getnameinfo()\
    \ or gethostbyaddr() and lookup of symbolic names for an\n   address as it is,\
    \ for example, performed by functions getaddrinfo()\n   or gethostbyname().  Note\
    \ that whatever lookup function is chosen,\n   results are not necessarily consistent\
    \ with the results of a pure\n   Domain Name Service (DNS) lookup, but may be\
    \ influenced by local\n   lookup tables or other sources of information.  The\
    \ lookup capability\n   can be used to determine the symbolic name of a hop in\
    \ a traceroute\n   path.  Also, the reverse lookup can be used, for example, for\n\
    \   analyzing name lookup problems.\n"
- title: 1.4.  Remote Operations
  contents:
  - "1.4.  Remote Operations\n   The MIB modules defined in this document allow a\
    \ management station\n   to initiate ping, traceroute, and lookup operations remotely.\
    \  The\n   basic scenario is illustrated by the following diagram.\n         +-------+\
    \           +-------+           +-------+\n         |       |---------->|    \
    \   |           |       |\n         |       | initiate  |       |---------->|\
    \       |\n         | Mgmt. | operation |Managed|  perform  |Target |\n      \
    \   |Station| remotely  | Node  | operation | Host  |\n         |       |    \
    \       |       |           |       |\n         |       |<----------|       |\
    \           |       |\n         +-------+  receive  +-------+           +-------+\n\
    \                   result of\n                   operation\n   A management station\
    \ is the local host from which the remote ping,\n   traceroute, or Lookup operation\
    \ is initiated using an SNMP request.\n   The managed node is a remote host where\
    \ the MIBs defined by this memo\n   are implemented.  It receives the remote operation\
    \ via SNMP and\n   performs the actual ping, traceroute, or lookup function.\n"
- title: 2.  The Internet-Standard Management Framework
  contents:
  - "2.  The Internet-Standard Management Framework\n   For a detailed overview of\
    \ the documents that describe the current\n   Internet-Standard Management Framework,\
    \ please refer to section 7 of\n   RFC 3410 [RFC3410].\n   Managed objects are\
    \ accessed via a virtual information store, termed\n   the Management Information\
    \ Base or MIB.  MIB objects are generally\n   accessed through the Simple Network\
    \ Management Protocol (SNMP).\n   Objects in the MIB are defined using the mechanisms\
    \ defined in the\n   Structure of Management Information (SMI).  This memo specifies\
    \ a MIB\n   module that is compliant to the SMIv2, which is described in STD 58,\n\
    \   RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC 2580\n   [RFC2580].\n"
- title: 3.  Structure of the MIBs
  contents:
  - "3.  Structure of the MIBs\n   This document defines three MIB modules:\n    \
    \  o   DISMAN-PING-MIB\n          Defines a ping MIB.\n      o   DISMAN-TRACEROUTE-MIB\n\
    \          Defines a traceroute MIB.\n      o   DISMAN-NSLOOKUP-MIB\n   Provides\
    \ access to lookup functions for symbolic names and addresses\n   at a remote\
    \ host provided, for example, by functions\n   getaddrinfo()/getnameinfo() and\
    \ gethostbyname()/gethostbyaddr().\n   The ping and traceroute MIBs are structured\
    \ to allow creation of ping\n   or traceroute tests that can be set up to issue\
    \ a series of\n   operations periodically and to generate NOTIFICATIONs to report\
    \ on\n   test results.  Many network administrators have in the past written\n\
    \   UNIX shell scripts or command batch files to operate in a fashion\n   similar\
    \ to the functionality provided by the ping and traceroute MIBs\n   defined within\
    \ this memo.  The intent of this document is to\n   acknowledge the importance\
    \ of these functions and to provide a\n   standards-based solution.\n"
- title: 3.1.  Ping MIB
  contents:
  - "3.1.  Ping MIB\n   The DISMAN-PING-MIB consists of the following components:\n\
    \      o   pingMaxConcurrentRequests\n      o   pingCtlTable\n      o   pingResultsTable\n\
    \      o   pingProbeHistoryTable\n"
- title: 3.1.1.  pingMaxConcurrentRequests
  contents:
  - "3.1.1.  pingMaxConcurrentRequests\n   The object pingMaxConcurrentRequests enables\
    \ control of the maximum\n   number of concurrent active requests that an agent\
    \ implementation\n   supports.  It is permissible for an agent either to limit\
    \ the maximum\n   upper range allowed for this object or to implement this object\
    \ as\n   read-only with an implementation limit expressed as its value.\n"
- title: 3.1.2.  pingCtlTable
  contents:
  - "3.1.2.  pingCtlTable\n   A remote ping test is started by setting pingCtlAdminStatus\
    \ to\n   enabled(1).  The corresponding pingCtlEntry MUST have been created,\n\
    \   and its pingCtlRowStatus set to active(1), prior to starting the\n   test.\
    \  A single SNMP PDU can be used to create and start a remote\n   ping test. \
    \ Within the PDU, pingCtlTargetAddress should be set to the\n   target host's\
    \ address (pingCtlTargetAddressType will default to\n   ipv4(1)), pingCtlAdminStatus\
    \ to enabled(1), and pingCtlRowStatus to\n   createAndGo(4).\n   The first index\
    \ element, pingCtlOwnerIndex, is of type\n   SnmpAdminString, a textual convention\
    \ that allows for use of the\n   SNMPv3 View-Based Access Control Model (RFC 3415\
    \ [RFC3415], VACM) and\n   that allows a management application to identify its\
    \ entries.  The\n   second index, pingCtlTestName (also an SnmpAdminString), enables\
    \ the\n   same management application to have multiple requests outstanding.\n\
    \   Using the maximum value for the parameters defined within a pingEntry\n  \
    \ can result in a single remote ping test's taking at most 15 minutes\n   (pingCtlTimeOut\
    \ times pingCtlProbeCount), plus whatever time it takes\n   to send the ping request\
    \ and to receive its response over the network\n   from the target host.  Use\
    \ of the defaults for pingCtlTimeOut and\n   pingCtlProbeCount yields a maximum\
    \ of 3 seconds to perform a \"normal\"\n   ping test.\n   A management application\
    \ can delete an active remote ping request by\n   setting the corresponding pingCtlRowStatus\
    \ object to destroy(6).\n   The contents of the pingCtlTable are preserved across\
    \ reIPLs (Initial\n   Program Loads) of its agent according the values of each\
    \ of the\n   pingCtlStorageType objects.\n"
- title: 3.1.3.  pingResultsTable
  contents:
  - "3.1.3.  pingResultsTable\n   An entry in the pingResultsTable is created for\
    \ a corresponding\n   pingCtlEntry once the test defined by this entry is started.\n"
- title: 3.1.4.  pingProbeHistoryTable
  contents:
  - "3.1.4.  pingProbeHistoryTable\n   The results of past ping probes are stored\
    \ in this table on a per-\n   pingCtlEntry basis.  This table is initially indexed\
    \ by\n   pingCtlOwnerIndex and pingCtlTestName so that the results of a probe\n\
    \   relate to the pingCtlEntry that caused it.  The maximum number of\n   entries\
    \ stored in this table per pingCtlEntry is determined by the\n   value of pingCtlMaxRows.\n\
    \   An implementation of this MIB will remove the oldest entry in the\n   pingProbeHistoryTable\
    \ of the corresponding entry in the pingCtlTable\n   to allow the addition of\
    \ a new entry once the number of rows in the\n   pingProbeHistoryTable reaches\
    \ the value specified by pingCtlMaxRows\n   for the corresponding entry in the\
    \ pingCtlTable.  An implementation\n   MUST start assigning pingProbeHistoryIndex\
    \ values at 1 and wrap after\n   exceeding the maximum possible value, as defined\
    \ by the limit of this\n   object ('ffffffff'h).\n"
- title: 3.2.  Traceroute MIB
  contents:
  - "3.2.  Traceroute MIB\n   The DISMAN-TRACEROUTE-MIB consists of the following\
    \ components:\n      o   traceRouteMaxConcurrentRequests\n      o   traceRouteCtlTable\n\
    \      o   traceRouteResultsTable\n      o   traceRouteProbeHistoryTable\n   \
    \   o   traceRouteHopsTable\n"
- title: 3.2.1.  traceRouteMaxConcurrentRequests
  contents:
  - "3.2.1.  traceRouteMaxConcurrentRequests\n   The object traceRouteMaxConcurrentRequests\
    \ enables control of the\n   maximum number of concurrent active requests that\
    \ an agent\n   implementation supports.  It is permissible for an agent either\
    \ to\n   limit the maximum upper range allowed for this object or to implement\n\
    \   this object as read-only with an implementation limit expressed as\n   its\
    \ value.\n"
- title: 3.2.2.  traceRouteCtlTable
  contents:
  - "3.2.2.  traceRouteCtlTable\n   A remote traceroute test is started by setting\n\
    \   traceRouteCtlAdminStatus to enabled(1).  The corresponding\n   traceRouteCtlEntry\
    \ MUST have been created, and its\n   traceRouteCtlRowStatus set to active(1),\
    \ prior to starting the test.\n   A single SNMP PDU can be used to create and\
    \ start a remote traceroute\n   test.  Within the PDU, traceRouteCtlTargetAddress\
    \ should be set to\n   the target host's address (traceRouteCtlTargetAddressType\
    \ will\n   default to ipv4(1)), traceRouteCtlAdminStatus to enabled(1), and\n\
    \   traceRouteCtlRowStatus to createAndGo(4).\n   The first index element, traceRouteCtlOwnerIndex,\
    \ is of type\n   SnmpAdminString, a textual convention that allows for use of\
    \ the\n   SNMPv3 View-Based Access Control Model (RFC 3415 [RFC3415], VACM) and\n\
    \   that allows a management application to identify its entries.  The\n   second\
    \ index, traceRouteCtlTestName (also an SnmpAdminString),\n   enables the same\
    \ management application to have multiple requests\n   outstanding.\n   Traceroute\
    \ has a much longer theoretical maximum time for completion\n   than ping: basically,\
    \ 42 hours and 30 minutes (the product of\n   traceRouteCtlTimeOut, traceRouteCtlProbesPerHop,\
    \ and\n   traceRouteCtlMaxTtl) plus some network transit time!  Use of the\n \
    \  defaults defined within an traceRouteCtlEntry yields a maximum of 4\n   minutes\
    \ and 30 seconds for a default traceroute operation.  Clearly,\n   42 plus hours\
    \ is too long to wait for a traceroute operation to be\n   completed.\n   The\
    \ maximum Time to Live (TTL) value in effect for traceroute\n   determines how\
    \ long the traceroute function will keep increasing the\n   TTL value in the probe\
    \ it transmits, hoping to reach the target host.\n   The function ends whenever\
    \ the maximum TTL is exceeded or the target\n   host is reached.  The object traceRouteCtlMaxFailures\
    \ was created in\n   order to impose a throttle for how long traceroute continues\
    \ to\n   increase the TTL field in a probe without receiving any kind of\n   response\
    \ (timeouts).  It is RECOMMENDED that agent implementations\n   impose a time\
    \ limit for how long it allows a traceroute operation to\n   take, relative to\
    \ how the function is implemented.  For example, an\n   implementation that can't\
    \ process multiple traceroute operations at\n   the same time SHOULD impose a\
    \ shorter maximum allowed time period.\n   A management application can delete\
    \ an active remote traceroute\n   request by setting the corresponding traceRouteCtlRowStatus\
    \ object to\n   destroy(6).\n   The contents of the traceRouteCtlTable are preserved\
    \ across reIPLs\n   (Initial Program Loads) of its agent according to the values\
    \ of each\n   of the traceRouteCtlStorageType objects.\n"
- title: 3.2.3.  traceRouteResultsTable
  contents:
  - "3.2.3.  traceRouteResultsTable\n   An entry in the traceRouteResultsTable is\
    \ created upon determining\n   the results of a specific traceroute operation.\
    \  Entries in this\n   table relate back to the traceRouteCtlEntry that caused\
    \ the\n   corresponding traceroute operation to occur.  The objects\n   traceRouteResultsCurHopCount\
    \ and traceRouteResultsCurProbeCount can\n   be examined to determine how far\
    \ the current remote traceroute\n   operation has reached.\n"
- title: 3.2.4.  traceRouteProbeHistoryTable
  contents:
  - "3.2.4.  traceRouteProbeHistoryTable\n   The results of past traceroute probes\
    \ can be stored in this table on\n   a per-traceRouteCtlEntry basis.  This table\
    \ is initially indexed by\n   traceRouteCtlOwnerIndex and traceRouteCtlTestName\
    \ so that the results\n   of a probe relate to the traceRouteCtlEntry that caused\
    \ it.  The\n   number of entries stored in this table per traceRouteCtlEntry is\n\
    \   determined by the value of traceRouteCtlMaxRows.\n   An implementation of\
    \ this MIB will remove the oldest entry in the\n   traceRouteProbeHistoryTable\
    \ of the corresponding entry in the\n   traceRouteCtlTable to allow the addition\
    \ of an new entry once the\n   number of rows in the traceRouteProbeHistoryTable\
    \ reaches the value\n   of traceRouteCtlMaxRows for the corresponding entry in\
    \ the\n   traceRouteCtlTable.  An implementation MUST start assigning\n   traceRouteProbeHistoryIndex\
    \ values at 1 and wrap after exceeding the\n   maximum possible value, as defined\
    \ by the limit of this object\n   ('ffffffff'h).\n"
- title: 3.2.5.  traceRouteHopsTable
  contents:
  - "3.2.5.  traceRouteHopsTable\n   The current traceroute path can be stored in\
    \ this table on a per-\n   traceRouteCtlEntry basis.  This table is initially\
    \ indexed by\n   traceRouteCtlOwnerIndex and traceRouteCtlTestName so that a\n\
    \   traceroute path relates to the traceRouteCtlEntry that caused it.  A\n   third\
    \ index, traceRouteHopsHopIndex, enables keeping one\n   traceRouteHopsEntry per\
    \ traceroute hop.  Creation of\n   traceRouteHopsTable entries is enabled by setting\
    \ the corresponding\n   traceRouteCtlCreateHopsEntries object to true(1).\n"
- title: 3.3.  Lookup MIB
  contents:
  - "3.3.  Lookup MIB\n   The DISMAN-NSLOOKUP-MIB consists of the following components:\n\
    \      o   lookupMaxConcurrentRequests and lookupPurgeTime\n      o   lookupCtlTable\n\
    \      o   lookupResultsTable\n"
- title: 3.3.1.  lookupMaxConcurrentRequests and lookupPurgeTime
  contents:
  - "3.3.1.  lookupMaxConcurrentRequests and lookupPurgeTime\n   The object lookupMaxConcurrentRequests\
    \ enables control of the maximum\n   number of concurrent active requests that\
    \ an agent implementation is\n   structured to support.  It is permissible for\
    \ an agent either to\n   limit the maximum upper range allowed for this object\
    \ or to implement\n   this object as read-only with an implementation limit expressed\
    \ as\n   its value.\n   The object lookupPurgeTime provides a method for entries\
    \ in the\n   lookupCtlTable and lookupResultsTable to be automatically deleted\n\
    \   after the corresponding operation is completed.\n"
- title: 3.3.2.  lookupCtlTable
  contents:
  - "3.3.2.  lookupCtlTable\n   A remote lookup operation is initiated by performing\
    \ an SNMP SET\n   request on lookupCtlRowStatus.  A single SNMP PDU can be used\
    \ to\n   create and start a remote lookup operation.  Within the PDU,\n   lookupCtlTargetAddress\
    \ should be set to the entity to be resolved\n   (lookupCtlTargetAddressType will\
    \ default to ipv4(1)) and\n   lookupCtlRowStatus to createAndGo(4).  The object\
    \ lookupCtlOperStatus\n   can be examined to determine the state of a lookup operation.\
    \  A\n   management application can delete an active remote lookup request by\n\
    \   setting the corresponding lookupCtlRowStatus object to destroy(6).\n   An\
    \ lookupCtlEntry is initially indexed by lookupCtlOwnerIndex, which\n   is a type\
    \ of SnmpAdminString, a textual convention that allows for\n   use of the SNMPv3\
    \ View-Based Access Control Model (RFC 3415\n   [RFC3415],\n   VACM) and that\
    \ also allows for a management application to identify\n   its entries.  The lookupCtlOwnerIndex\
    \ portion of the index is then\n   followed by lookupCtlOperationName.  The lookupCtlOperationName\
    \ index\n   enables the same lookupCtlOwnerIndex entity to have multiple\n   outstanding\
    \ requests.\n   The value of lookupCtlTargetAddressType determines which lookup\n\
    \   function to perform.  Specification of dns(16) as the value of this\n   index\
    \ implies that a function such as getaddrinfo() or\n   gethostbyname() should\
    \ be performed to determine the numeric\n   addresses associated with a symbolic\
    \ name via lookupResultsTable\n   entries.  Use of a value of either ipv4(1) or\
    \ ipv6(2) implies that a\n   function such as getnameinfo() or gethostbyaddr()\
    \ should be performed\n   to determine the symbolic name(s) associated with a\
    \ numeric address\n   at a remote host.\n"
- title: 3.3.3.  lookupResultsTable
  contents:
  - "3.3.3.  lookupResultsTable\n   The lookupResultsTable is used to store the results\
    \ of lookup\n   operations.  Results to be reported here SHOULD be results of\
    \ a\n   lookup function that is commonly used by applications at the managed\n\
    \   node.  This implies that results are not necessarily consistent with\n   the\
    \ results of a pure DNS lookup at the managed node, but may be\n   influenced\
    \ by local lookup tables or other sources of information,\n   depending on the\
    \ configuration of the managed node.\n   The lookupResultsTable is initially indexed\
    \ by the same index\n   elements that the lookupCtlTable contains (lookupCtlOwnerIndex\
    \ and\n   lookupCtlOperationName) but has a third index element,\n   lookupResultsIndex\
    \ (Unsigned32 textual convention), in order to\n   associate multiple results\
    \ with the same lookupCtlEntry.\n   A remote host can be multi-homed and can have\
    \ multiple symbolic (DNS)\n   names.  Therefore, a lookup operation can return\
    \ multiple IP\n   addresses and multiple symbolic names.\n   If the lookup operation\
    \ was performed for a certain address by using\n   getnameinfo() or gethostbyaddr(),\
    \ for example, then entries in the\n   lookupResultsTable MUST be made for each\
    \ host name returned.  If the\n   lookup operation identifies one hostname as\
    \ the host's 'official host\n   name', then this name MUST be assigned a lookupResultsIndex\
    \ of 1.\n   If a lookup operation was performed for a certain symbolic name by\n\
    \   using getaddrinfo() or gethostbyname(), for example, then entries in\n   the\
    \ lookupResultsTable MUST be made for each address returned.  The\n   entries\
    \ MUST be stored in the order that they are retrieved.  Values\n   assigned to\
    \ lookupResultsIndex MUST start at 1 and increase in order.\n   An implementation\
    \ SHOULD NOT retain SNMP-created entries in the\n   lookupResultsTable across\
    \ reIPLs (Initial Program Loads) of its\n   agent, since management applications\
    \ need to see consistent behavior\n   with respect to the persistence of the table\
    \ entries that they\n   create.\n"
- title: 3.4.  Conformance
  contents:
  - "3.4.  Conformance\n   Each of the three MIB modules defined in this document\
    \ has two\n   current compliance statements, one for full compliance and one for\n\
    \   minimum compliance.  The minimum compliance statements are intended\n   to\
    \ be applied to implementation for devices with very limited\n   resources.  The\
    \ main difference between full and minimum compliance\n   is that for minimum\
    \ compliance, dynamic creation and deletion of\n   table entries is not required,\
    \ whereas it is required for full\n   compliance.\n   In addition, the DISMAN-PING-MIB\
    \ module and the DISMAN-TRACEROUTE-MIB\n   modules each have a deprecated compliance\
    \ statement that was current\n   in RFC 2925.  Semantically, the new full compliance\
    \ statements are\n   identical to the deprecated ones.  But some of the object\
    \ groups used\n   in the old compliance statements needed to be split in order\
    \ to\n   support the new minimal compliance statements.\n"
- title: 4.  Definitions
  contents:
  - "4.  Definitions\n   The following MIB modules import from [RFC2863], [RFC3411],\
    \ and\n   [RFC4001].  They also use the REFERENCE clause to reference\n   [RFC1812],\
    \ [RFC2474], and [RFC3260].\n"
- title: 4.1.  DISMAN-PING-MIB
  contents:
  - "4.1.  DISMAN-PING-MIB\n   DISMAN-PING-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n\
    \       MODULE-IDENTITY, OBJECT-TYPE, Integer32,\n       Unsigned32, Gauge32,\
    \ mib-2,\n       NOTIFICATION-TYPE, OBJECT-IDENTITY\n           FROM SNMPv2-SMI\
    \                  -- RFC2578\n       TEXTUAL-CONVENTION, RowStatus,\n       StorageType,\
    \ DateAndTime, TruthValue\n           FROM SNMPv2-TC                   -- RFC2579\n\
    \       MODULE-COMPLIANCE, OBJECT-GROUP,\n       NOTIFICATION-GROUP\n        \
    \   FROM SNMPv2-CONF                 -- RFC2580\n       InterfaceIndexOrZero \
    \                -- RFC2863\n           FROM IF-MIB\n       SnmpAdminString\n\
    \           FROM SNMP-FRAMEWORK-MIB          -- RFC3411\n       InetAddressType,\
    \ InetAddress\n           FROM INET-ADDRESS-MIB;           -- RFC4001\n    pingMIB\
    \ MODULE-IDENTITY\n       LAST-UPDATED \"200606130000Z\"         -- 13 June 2006\n\
    \       ORGANIZATION \"IETF Distributed Management Working Group\"\n       CONTACT-INFO\n\
    \           \"Juergen Quittek\n           NEC Europe Ltd.\n           Network\
    \ Laboratories\n           Kurfuersten-Anlage 36\n           69115 Heidelberg\n\
    \           Germany\n           Phone: +49 6221 4342-115\n           Email: quittek@netlab.nec.de\"\
    \n       DESCRIPTION\n           \"The Ping MIB (DISMAN-PING-MIB) provides the\
    \ capability of\n           controlling the use of the ping function at a remote\n\
    \           host.\n           Copyright (C) The Internet Society (2006).  This\
    \ version of\n           this MIB module is part of RFC 4560; see the RFC itself\
    \ for\n           full legal notices.\"\n        --  Revision history\n      \
    \  REVISION     \"200606130000Z\"         -- 13 June 2006\n        DESCRIPTION\n\
    \            \"Updated version, published as RFC 4560.\n                - Correctly\
    \ considered IPv6 in DESCRIPTION\n                  clause of pingCtlDataSize\n\
    \                - Replaced references to RFC 2575 by RFC 3415\n             \
    \   - Replaced references to RFC 2571 by RFC 3411\n                - Replaced\
    \ references to RFC 2851 by RFC 4001\n                - Added DEFVAL { {} } to\
    \ definition of\n                  pingCtlTrapGeneration\n                - Changed\
    \ DEFVAL of object pingCtlDescr from\n                  DEFVAL { '00'H } to DEFVAL\
    \ { ''H }\n                - Changed DEFVAL of object pingCtlSourceAddressType\n\
    \                  from DEFVAL { ipv4 } to DEFVAL { unknown }\n              \
    \  - Extended DESCRIPTION clause of pingResultsTable\n                  describing\
    \ re-initialization of entries\n                - Changed SYNTAX of pingResultsProbeResponses\
    \ and\n                  pingResultsSentProbes from Unsigned32 to Gauge32\n  \
    \              - Changed status of pingCompliance to deprecated\n            \
    \    - Added pingFullCompliance and pingMinimumCompliance\n                - Changed\
    \ status of pingGroup and pingTimeStampGroup\n                  to deprecated\n\
    \                - Added pingMinimumGroup, pingCtlRowStatusGroup,\n          \
    \        and pingHistoryGroup\"\n        REVISION     \"200009210000Z\"      \
    \   -- 21 September 2000\n        DESCRIPTION\n            \"Initial version,\
    \ published as RFC 2925.\"\n       ::= { mib-2 80 }\n    -- Textual Conventions\n\
    \     OperationResponseStatus ::= TEXTUAL-CONVENTION\n       STATUS  current\n\
    \       DESCRIPTION\n           \"Used to report the result of an operation:\n\
    \            responseReceived(1) - Operation is completed successfully.\n    \
    \        unknown(2) - Operation failed due to unknown error.\n            internalError(3)\
    \ - An implementation detected an error\n                 in its own processing\
    \ that caused an operation\n                 to fail.\n            requestTimedOut(4)\
    \ - Operation failed to receive a\n                 valid reply within the time\
    \ limit imposed on it.\n            unknownDestinationAddress(5) - Invalid destination\n\
    \                 address.\n            noRouteToTarget(6) - Could not find a\
    \ route to target.\n            interfaceInactiveToTarget(7) - The interface to\
    \ be\n                 used in sending a probe is inactive, and an\n         \
    \        alternate route does not exist.\n            arpFailure(8) - Unable to\
    \ resolve a target address to a\n                 media-specific address.\n  \
    \          maxConcurrentLimitReached(9) - The maximum number of\n            \
    \     concurrent active operations would have been exceeded\n                \
    \ if the corresponding operation was allowed.\n            unableToResolveDnsName(10)\
    \ - The DNS name specified was\n                 unable to be mapped to an IP\
    \ address.\n            invalidHostAddress(11) - The IP address for a host\n \
    \                has been determined to be invalid.  Examples of this\n      \
    \           are broadcast or multicast addresses.\"\n       SYNTAX INTEGER {\n\
    \                    responseReceived(1),\n                    unknown(2),\n \
    \                   internalError(3),\n                    requestTimedOut(4),\n\
    \                    unknownDestinationAddress(5),\n                    noRouteToTarget(6),\n\
    \                    interfaceInactiveToTarget(7),\n                    arpFailure(8),\n\
    \                    maxConcurrentLimitReached(9),\n                    unableToResolveDnsName(10),\n\
    \                    invalidHostAddress(11)\n                 }\n    -- Top level\
    \ structure of the MIB\n    pingNotifications              OBJECT IDENTIFIER ::=\
    \ { pingMIB 0 }\n    pingObjects                    OBJECT IDENTIFIER ::= { pingMIB\
    \ 1 }\n    pingConformance                OBJECT IDENTIFIER ::= { pingMIB 2 }\n\
    \    -- The registration node (point) for ping implementation types\n    pingImplementationTypeDomains\
    \  OBJECT IDENTIFIER ::= { pingMIB 3 }\n    pingIcmpEcho OBJECT-IDENTITY\n   \
    \    STATUS      current\n       DESCRIPTION\n           \"Indicates that an implementation\
    \ is using the Internet\n           Control Message Protocol (ICMP) 'ECHO' facility.\"\
    \n       ::= { pingImplementationTypeDomains 1 }\n    pingUdpEcho OBJECT-IDENTITY\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Indicates that an\
    \ implementation is using the UDP echo\n           port (7).\"\n       REFERENCE\n\
    \           \"RFC 862, 'Echo Protocol'.\"\n       ::= { pingImplementationTypeDomains\
    \ 2 }\n    pingSnmpQuery OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Indicates that an implementation is using an SNMP query\n      \
    \      to calculate a round trip time.\"\n       ::= { pingImplementationTypeDomains\
    \ 3 }\n    pingTcpConnectionAttempt OBJECT-IDENTITY\n       STATUS      current\n\
    \       DESCRIPTION\n           \"Indicates that an implementation is attempting\
    \ to\n           connect to a TCP port in order to calculate a round\n       \
    \    trip time.\"\n       ::= { pingImplementationTypeDomains 4 }\n    -- Simple\
    \ Object Definitions\n    pingMaxConcurrentRequests OBJECT-TYPE\n       SYNTAX\
    \      Unsigned32\n       UNITS       \"requests\"\n       MAX-ACCESS  read-write\n\
    \       STATUS      current\n       DESCRIPTION\n          \"The maximum number\
    \ of concurrent active ping requests\n          that are allowed within an agent\
    \ implementation.  A value\n          of 0 for this object implies that there\
    \ is no limit for\n          the number of concurrent active requests in effect.\n\
    \          The limit applies only to new requests being activated.\n         \
    \ When a new value is set, the agent will continue processing\n          all the\
    \ requests already active, even if their number\n          exceeds the limit just\
    \ imposed.\"\n       DEFVAL { 10 }\n       ::= { pingObjects 1 }\n    -- Ping\
    \ Control Table\n    pingCtlTable OBJECT-TYPE\n       SYNTAX      SEQUENCE OF\
    \ PingCtlEntry\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n           \"Defines the ping Control Table for providing,\
    \ via SNMP,\n           the capability of performing ping operations at\n    \
    \       a remote host.  The results of these operations are\n           stored\
    \ in the pingResultsTable and the\n           pingProbeHistoryTable.\"\n     \
    \ ::= { pingObjects 2 }\n    pingCtlEntry OBJECT-TYPE\n       SYNTAX      PingCtlEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Defines an entry in the pingCtlTable.  The first index\n       \
    \    element, pingCtlOwnerIndex, is of type SnmpAdminString,\n           a textual\
    \ convention that allows for use of the SNMPv3\n           View-Based Access Control\
    \ Model (RFC 3415, VACM)\n           and that allows a management application\
    \ to identify its\n           entries.  The second index, pingCtlTestName (also\
    \ an\n           SnmpAdminString), enables the same management\n           application\
    \ to have multiple outstanding requests.\"\n       INDEX {\n                pingCtlOwnerIndex,\n\
    \                pingCtlTestName\n             }\n       ::= { pingCtlTable 1\
    \ }\n    PingCtlEntry ::=\n       SEQUENCE {\n           pingCtlOwnerIndex   \
    \          SnmpAdminString,\n           pingCtlTestName               SnmpAdminString,\n\
    \           pingCtlTargetAddressType      InetAddressType,\n           pingCtlTargetAddress\
    \          InetAddress,\n           pingCtlDataSize               Unsigned32,\n\
    \           pingCtlTimeOut                Unsigned32,\n           pingCtlProbeCount\
    \             Unsigned32,\n           pingCtlAdminStatus            INTEGER,\n\
    \           pingCtlDataFill               OCTET STRING,\n           pingCtlFrequency\
    \              Unsigned32,\n           pingCtlMaxRows                Unsigned32,\n\
    \           pingCtlStorageType            StorageType,\n           pingCtlTrapGeneration\
    \         BITS,\n           pingCtlTrapProbeFailureFilter Unsigned32,\n      \
    \     pingCtlTrapTestFailureFilter  Unsigned32,\n           pingCtlType      \
    \             OBJECT IDENTIFIER,\n           pingCtlDescr                  SnmpAdminString,\n\
    \           pingCtlSourceAddressType      InetAddressType,\n           pingCtlSourceAddress\
    \          InetAddress,\n           pingCtlIfIndex                InterfaceIndexOrZero,\n\
    \           pingCtlByPassRouteTable       TruthValue,\n           pingCtlDSField\
    \                Unsigned32,\n           pingCtlRowStatus              RowStatus\n\
    \       }\n    pingCtlOwnerIndex OBJECT-TYPE\n       SYNTAX      SnmpAdminString\
    \ (SIZE(0..32))\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n          \"To facilitate the provisioning of access control\
    \ by a\n          security administrator using the View-Based Access\n       \
    \   Control Model (RFC 2575, VACM) for tables in which\n          multiple users\
    \ may need to create or\n          modify entries independently, the initial index\
    \ is used\n          as an 'owner index'.  Such an initial index has a syntax\n\
    \          of SnmpAdminString and can thus be trivially mapped to a\n        \
    \  securityName or groupName defined in VACM, in\n          accordance with a\
    \ security policy.\n          When used in conjunction with such a security policy,\
    \ all\n          entries in the table belonging to a particular user (or\n   \
    \       group) will have the same value for this initial index.\n          For\
    \ a given user's entries in a particular table, the\n          object identifiers\
    \ for the information in these entries\n          will have the same subidentifiers\
    \ (except for the 'column'\n          subidentifier) up to the end of the encoded\
    \ owner index.\n          To configure VACM to permit access to this portion of\
    \ the\n          table, one would create vacmViewTreeFamilyTable entries\n   \
    \       with the value of vacmViewTreeFamilySubtree including\n          the owner\
    \ index portion, and vacmViewTreeFamilyMask\n          'wildcarding' the column\
    \ subidentifier.  More elaborate\n          configurations are possible.\"\n \
    \      ::= { pingCtlEntry 1 }\n    pingCtlTestName OBJECT-TYPE\n       SYNTAX\
    \      SnmpAdminString (SIZE(0..32))\n       MAX-ACCESS  not-accessible\n    \
    \   STATUS      current\n       DESCRIPTION\n           \"The name of the ping\
    \ test.  This is locally unique, within\n           the scope of a pingCtlOwnerIndex.\"\
    \n       ::= { pingCtlEntry 2 }\n    pingCtlTargetAddressType OBJECT-TYPE\n  \
    \     SYNTAX      InetAddressType\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"Specifies the type of host address\
    \ to be used at a remote\n           host for performing a ping operation.\"\n\
    \       DEFVAL { unknown }\n       ::= { pingCtlEntry 3 }\n    pingCtlTargetAddress\
    \ OBJECT-TYPE\n       SYNTAX      InetAddress\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Specifies the host\
    \ address to be used at a remote host for\n           performing a ping operation.\
    \  The host address type is\n           determined by the value of the corresponding\n\
    \           pingCtlTargetAddressType.\n           A value for this object MUST\
    \ be set prior to transitioning\n           its corresponding pingCtlEntry to\
    \ active(1) via\n           pingCtlRowStatus.\"\n       DEFVAL { ''H }\n     \
    \  ::= { pingCtlEntry 4 }\n    pingCtlDataSize OBJECT-TYPE\n       SYNTAX    \
    \  Unsigned32 (0..65507)\n       UNITS       \"octets\"\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Specifies the size\
    \ of the data portion to be\n           transmitted in a ping operation, in octets.\
    \  Whether this\n           value can be applied depends on the selected\n   \
    \        implementation method for performing a ping operation,\n           indicated\
    \ by pingCtlType in the same conceptual row.\n           If the method used allows\
    \ applying the value contained\n           in this object, then it MUST be applied.\
    \  If the specified\n           size is not appropriate for the chosen ping method,\
    \ the\n           implementation SHOULD use whatever size (appropriate to\n  \
    \         the method) is closest to the specified size.\n           The maximum\
    \ value for this object was computed by\n           subtracting the smallest possible\
    \ IP header size of\n           20 octets (IPv4 header with no options) and the\
    \ UDP\n           header size of 8 octets from the maximum IP packet size.\n \
    \          An IP packet has a maximum size of 65535 octets\n           (excluding\
    \ IPv6 Jumbograms).\"\n       DEFVAL { 0 }\n       ::= { pingCtlEntry 5 }\n  \
    \  pingCtlTimeOut OBJECT-TYPE\n       SYNTAX      Unsigned32 (1..60)\n       UNITS\
    \       \"seconds\"\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"Specifies the time-out value, in seconds, for\
    \ a\n           remote ping operation.\"\n       DEFVAL { 3 }\n       ::= { pingCtlEntry\
    \ 6 }\n    pingCtlProbeCount OBJECT-TYPE\n       SYNTAX      Unsigned32 (1..15)\n\
    \       UNITS       \"probes\"\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"Specifies the number of times\
    \ to perform a ping\n           operation at a remote host as part of a single\
    \ ping test.\"\n       DEFVAL { 1 }\n       ::= { pingCtlEntry 7 }\n    pingCtlAdminStatus\
    \ OBJECT-TYPE\n       SYNTAX      INTEGER {\n                             enabled(1),\
    \ -- test should be started\n                             disabled(2) -- test\
    \ should be stopped\n                           }\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Reflects the desired\
    \ state that a pingCtlEntry should be\n           in:\n              enabled(1)\
    \  - Attempt to activate the test as defined by\n                            this\
    \ pingCtlEntry.\n              disabled(2) - Deactivate the test as defined by\
    \ this\n                            pingCtlEntry.\n           Refer to the corresponding\
    \ pingResultsOperStatus to\n           determine the operational state of the\
    \ test defined by\n           this entry.\"\n        DEFVAL { disabled }\n   \
    \    ::= { pingCtlEntry 8 }\n    pingCtlDataFill  OBJECT-TYPE\n       SYNTAX \
    \     OCTET STRING (SIZE(0..1024))\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The content of this object is\
    \ used together with the\n           corresponding pingCtlDataSize value to determine\
    \ how to\n           fill the data portion of a probe packet.  The option of\n\
    \           selecting a data fill pattern can be useful when links\n         \
    \  are compressed or have data pattern sensitivities.  The\n           contents\
    \ of pingCtlDataFill should be repeated in a ping\n           packet when the\
    \ size of the data portion of the ping\n           packet is greater than the\
    \ size of pingCtlDataFill.\"\n       DEFVAL { '00'H }\n       ::= { pingCtlEntry\
    \ 9 }\n    pingCtlFrequency  OBJECT-TYPE\n       SYNTAX      Unsigned32\n    \
    \   UNITS       \"seconds\"\n       MAX-ACCESS  read-create\n       STATUS   \
    \   current\n       DESCRIPTION\n           \"The number of seconds to wait before\
    \ repeating a ping test\n           as defined by the value of the various objects\
    \ in the\n           corresponding row.\n           A single ping test consists\
    \ of a series of ping probes.\n           The number of probes is determined by\
    \ the value of the\n           corresponding pingCtlProbeCount object.  After\
    \ a single\n           test is completed the number of seconds as defined by the\n\
    \           value of pingCtlFrequency MUST elapse before the\n           next\
    \ ping test is started.\n           A value of 0 for this object implies that\
    \ the test\n           as defined by the corresponding entry will not be\n   \
    \        repeated.\"\n       DEFVAL { 0 }\n       ::= { pingCtlEntry 10 }\n  \
    \  pingCtlMaxRows OBJECT-TYPE\n       SYNTAX      Unsigned32\n       UNITS   \
    \    \"rows\"\n       MAX-ACCESS  read-create\n       STATUS      current\n  \
    \     DESCRIPTION\n           \"The maximum number of corresponding entries allowed\n\
    \           in the pingProbeHistoryTable.  An implementation of this\n       \
    \    MIB will remove the oldest corresponding entry in the\n           pingProbeHistoryTable\
    \ to allow the addition of an\n           new entry once the number of corresponding\
    \ rows in the\n           pingProbeHistoryTable reaches this value.\n        \
    \   Old entries are not removed when a new test is\n           started.  Entries\
    \ are added to the pingProbeHistoryTable\n           until pingCtlMaxRows is reached\
    \ before entries begin to\n           be removed.\n           A value of 0 for\
    \ this object disables creation of\n           pingProbeHistoryTable entries.\"\
    \n       DEFVAL      { 50 }\n       ::= { pingCtlEntry 11 }\n    pingCtlStorageType\
    \ OBJECT-TYPE\n       SYNTAX      StorageType\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The storage type\
    \ for this conceptual row.\n           Conceptual rows having the value 'permanent'\
    \ need not\n           allow write-access to any columnar objects in the row.\"\
    \n       DEFVAL { nonVolatile }\n       ::= { pingCtlEntry 12 }\n    pingCtlTrapGeneration\
    \ OBJECT-TYPE\n       SYNTAX      BITS {\n                      probeFailure(0),\n\
    \                      testFailure(1),\n                      testCompletion(2)\n\
    \                     }\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The value of this object determines when and\
    \ whether\n           to generate a notification for this entry:\n           probeFailure(0)\
    \   - Generate a pingProbeFailed\n               notification subject to the value\
    \ of\n               pingCtlTrapProbeFailureFilter.  The object\n            \
    \   pingCtlTrapProbeFailureFilter can be used\n               to specify the number\
    \ of consecutive probe\n               failures that are required before a\n \
    \              pingProbeFailed notification can be generated.\n           testFailure(1)\
    \    - Generate a pingTestFailed\n               notification.  In this instance\
    \ the object\n               pingCtlTrapTestFailureFilter can be used to\n   \
    \            determine the number of probe failures that\n               signal\
    \ when a test fails.\n           testCompletion(2) - Generate a pingTestCompleted\n\
    \               notification.\n           By default, no bits are set, indicating\
    \ that\n           none of the above options is selected.\"\n       DEFVAL { {}\
    \ }  -- no bits set.\n       ::= { pingCtlEntry 13 }\n    pingCtlTrapProbeFailureFilter\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32 (0..15)\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The value of this\
    \ object is used to determine when\n           to generate a pingProbeFailed NOTIFICATION.\n\
    \           Setting BIT probeFailure(0) of object\n           pingCtlTrapGeneration\
    \ to '1' implies that a\n           pingProbeFailed NOTIFICATION is generated\
    \ only when\n           a number of consecutive ping probes equal to the\n   \
    \        value of pingCtlTrapProbeFailureFilter fail within\n           a given\
    \ ping test.  After triggering the notification,\n           the probe failure\
    \ counter is reset to zero.\"\n       DEFVAL { 1 }\n       ::= { pingCtlEntry\
    \ 14 }\n    pingCtlTrapTestFailureFilter OBJECT-TYPE\n       SYNTAX      Unsigned32\
    \ (0..15)\n       MAX-ACCESS  read-create\n       STATUS      current\n      \
    \ DESCRIPTION\n           \"The value of this object is used to determine when\n\
    \           to generate a pingTestFailed NOTIFICATION.\n           Setting BIT\
    \ testFailure(1) of object\n           pingCtlTrapGeneration to '1' implies that\
    \ a\n           pingTestFailed NOTIFICATION is generated only when\n         \
    \  a number of consecutive ping tests equal to the\n           value of pingCtlTrapProbeFailureFilter\
    \ fail.\n           After triggering the notification, the test failure\n    \
    \       counter is reset to zero.\"\n       DEFVAL { 1 }\n       ::= { pingCtlEntry\
    \ 15 }\n    pingCtlType OBJECT-TYPE\n       SYNTAX      OBJECT IDENTIFIER\n  \
    \     MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The value of this object is used either to report or\n         \
    \  to select the implementation method to be used for\n           calculating\
    \ a ping response time.  The value of this\n           object MAY be selected\
    \ from pingImplementationTypeDomains.\n           Additional implementation types\
    \ SHOULD be allocated as\n           required by implementers of the DISMAN-PING-MIB\
    \ under\n           their enterprise-specific registration point and not\n   \
    \        beneath pingImplementationTypeDomains.\"\n       DEFVAL { pingIcmpEcho\
    \ }\n       ::= { pingCtlEntry 16 }\n    pingCtlDescr OBJECT-TYPE\n       SYNTAX\
    \      SnmpAdminString\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The purpose of this object is to provide a\n\
    \           descriptive name of the remote ping test.\"\n       DEFVAL { ''H }\n\
    \       ::= { pingCtlEntry 17 }\n    pingCtlSourceAddressType OBJECT-TYPE\n  \
    \     SYNTAX      InetAddressType\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"Specifies the type of the source\
    \ address,\n           pingCtlSourceAddress, to be used at a remote host\n   \
    \        when a ping operation is performed.\"\n       DEFVAL { unknown }\n  \
    \     ::= { pingCtlEntry 18 }\n     pingCtlSourceAddress OBJECT-TYPE\n       SYNTAX\
    \      InetAddress\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"Use the specified IP address (which must be\
    \ given in\n           numeric form, not as a hostname) as the source address\n\
    \           in outgoing probe packets.  On hosts with more than one\n        \
    \   IP address, this option can be used to select the address\n           to be\
    \ used.  If the IP address is not one of this\n           machine's interface\
    \ addresses, an error is returned and\n           nothing is sent.  A zero-length\
    \ octet string value for\n           this object disables source address specification.\n\
    \           The address type (InetAddressType) that relates to\n           this\
    \ object is specified by the corresponding value\n           of pingCtlSourceAddressType.\"\
    \n       DEFVAL { ''H }\n       ::= { pingCtlEntry 19 }\n    pingCtlIfIndex OBJECT-TYPE\n\
    \       SYNTAX      InterfaceIndexOrZero\n       MAX-ACCESS  read-create\n   \
    \    STATUS      current\n       DESCRIPTION\n           \"Setting this object\
    \ to an interface's ifIndex prior\n           to starting a remote ping operation\
    \ directs\n           the ping probes to be transmitted over the\n           specified\
    \ interface.  A value of zero for this object\n           means that this option\
    \ is not enabled.\"\n       DEFVAL { 0 }\n       ::= { pingCtlEntry 20 }\n   \
    \ pingCtlByPassRouteTable OBJECT-TYPE\n       SYNTAX      TruthValue\n       MAX-ACCESS\
    \  read-create\n       STATUS      current\n       DESCRIPTION\n          \"The\
    \ purpose of this object is to enable optional\n          bypassing the route\
    \ table.  If enabled, the remote\n          host will bypass the normal routing\
    \ tables and send\n          directly to a host on an attached network.  If the\n\
    \          host is not on a directly attached network, an\n          error is\
    \ returned.  This option can be used to perform\n          the ping operation\
    \ to a local host through an\n          interface that has no route defined (e.g.,\
    \ after the\n          interface was dropped by the routing daemon at the host).\"\
    \n       DEFVAL { false }\n       ::= { pingCtlEntry 21 }\n    pingCtlDSField\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32 (0..255)\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Specifies the value\
    \ to store in the Type of Service\n           (TOS) octet in the IPv4 header or\
    \ in the Traffic\n           Class octet in the IPv6 header, respectively, of\
    \ the\n           IP packet used to encapsulate the ping probe.\n           The\
    \ octet to be set in the IP header contains the\n           Differentiated Services\
    \ (DS) Field in the six most\n           significant bits.\n           This option\
    \ can be used to determine what effect an\n           explicit DS Field setting\
    \ has on a ping response.\n           Not all values are legal or meaningful.\
    \  A value of 0\n           means that the function represented by this option\
    \ is\n           not supported.  DS Field usage is often not supported\n     \
    \      by IP implementations, and not all values are supported.\n           Refer\
    \ to RFC 2474 and RFC 3260 for guidance on usage of\n           this field.\"\n\
    \       REFERENCE\n           \"Refer to RFC 1812 for the definition of the IPv4\
    \ TOS\n           octet and to RFC 2460 for the definition of the IPv6\n     \
    \      Traffic Class octet.  Refer to RFC 2474 and RFC 3260\n           for the\
    \ definition of the Differentiated Services Field.\"\n       DEFVAL { 0 }\n  \
    \     ::= { pingCtlEntry 22 }\n    pingCtlRowStatus OBJECT-TYPE\n       SYNTAX\
    \      RowStatus\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"This object allows entries to be created and\
    \ deleted\n           in the pingCtlTable.  Deletion of an entry in this\n   \
    \        table results in the deletion of all corresponding (same\n          \
    \ pingCtlOwnerIndex and pingCtlTestName index values)\n           pingResultsTable\
    \ and pingProbeHistoryTable entries.\n           A value MUST be specified for\
    \ pingCtlTargetAddress\n           prior to acceptance of a transition to active(1)\
    \ state.\n           When a value for pingCtlTargetAddress is set,\n         \
    \  the value of object pingCtlRowStatus changes\n           from notReady(3) to\
    \ notInService(2).\n           Activation of a remote ping operation is controlled\n\
    \           via pingCtlAdminStatus, not by changing\n           this object's\
    \ value to active(1).\n           Transitions in and out of active(1) state are\
    \ not\n           allowed while an entry's pingResultsOperStatus is\n        \
    \   active(1), with the exception that deletion of\n           an entry in this\
    \ table by setting its RowStatus\n           object to destroy(6) will stop an\
    \ active\n           ping operation.\n           The operational state of a ping\
    \ operation\n           can be determined by examination of its\n           pingResultsOperStatus\
    \ object.\"\n       REFERENCE\n           \"See definition of RowStatus in RFC\
    \ 2579, 'Textual\n           Conventions for SMIv2.'\"\n       ::= { pingCtlEntry\
    \ 23 }\n   -- Ping Results Table\n    pingResultsTable OBJECT-TYPE\n       SYNTAX\
    \      SEQUENCE OF PingResultsEntry\n       MAX-ACCESS  not-accessible\n     \
    \  STATUS      current\n       DESCRIPTION\n           \"Defines the Ping Results\
    \ Table for providing\n           the capability of performing ping operations\
    \ at\n           a remote host.  The results of these operations are\n       \
    \    stored in the pingResultsTable and the pingProbeHistoryTable.\n         \
    \  An entry is added to the pingResultsTable when an\n           pingCtlEntry\
    \ is started by successful transition\n           of its pingCtlAdminStatus object\
    \ to enabled(1).\n           If the object pingCtlAdminStatus already has the\
    \ value\n           enabled(1), and if the corresponding pingResultsOperStatus\n\
    \           object has the value completed(3), then successfully writing\n   \
    \        enabled(1) to object pingCtlAdminStatus re-initializes the\n        \
    \   already existing entry in the pingResultsTable.  The values\n           of\
    \ objects in the re-initialized entry are the same as the\n           values of\
    \ objects in a new entry would be.\n           An entry is removed from the pingResultsTable\
    \ when\n           its corresponding pingCtlEntry is deleted.\"\n      ::= { pingObjects\
    \ 3 }\n    pingResultsEntry OBJECT-TYPE\n       SYNTAX      PingResultsEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Defines an entry in the pingResultsTable.  The\n           pingResultsTable\
    \ has the same indexing as the\n           pingCtlTable so that a pingResultsEntry\n\
    \           corresponds to the pingCtlEntry that caused it to\n           be created.\"\
    \n       INDEX {\n                pingCtlOwnerIndex,\n                pingCtlTestName\n\
    \             }\n       ::= { pingResultsTable 1 }\n    PingResultsEntry ::=\n\
    \       SEQUENCE {\n           pingResultsOperStatus          INTEGER,\n     \
    \      pingResultsIpTargetAddressType InetAddressType,\n           pingResultsIpTargetAddress\
    \     InetAddress,\n           pingResultsMinRtt              Unsigned32,\n  \
    \         pingResultsMaxRtt              Unsigned32,\n           pingResultsAverageRtt\
    \          Unsigned32,\n           pingResultsProbeResponses      Gauge32,\n \
    \          pingResultsSentProbes          Gauge32,\n           pingResultsRttSumOfSquares\
    \     Unsigned32,\n           pingResultsLastGoodProbe       DateAndTime\n   \
    \     }\n    pingResultsOperStatus OBJECT-TYPE\n       SYNTAX      INTEGER {\n\
    \                             enabled(1),   -- test is in progress\n         \
    \                    disabled(2),  -- test has stopped\n                     \
    \        completed(3)  -- test is completed\n                           }\n  \
    \     MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Reflects the operational state of a pingCtlEntry:\n            \
    \  enabled(1)    - Test is active.\n              disabled(2)   - Test has stopped.\n\
    \              completed(3)  - Test is completed.\"\n       ::= { pingResultsEntry\
    \ 1 }\n    pingResultsIpTargetAddressType OBJECT-TYPE\n       SYNTAX      InetAddressType\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This object indicates the type of address stored\n           in\
    \ the corresponding pingResultsIpTargetAddress\n           object.\"\n       DEFVAL\
    \ { unknown }\n       ::= { pingResultsEntry 2 }\n    pingResultsIpTargetAddress\
    \ OBJECT-TYPE\n       SYNTAX      InetAddress\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object reports\
    \ the IP address associated\n           with a pingCtlTargetAddress value when\
    \ the destination\n           address is specified as a DNS name.  The value of\n\
    \           this object should be a zero-length octet string\n           when\
    \ a DNS name is not specified or when a\n           specified DNS name fails to\
    \ resolve.\n           The address type (InetAddressType) that relates to\n  \
    \         this object is specified by the corresponding value\n           of pingResultsIpTargetAddressType.\"\
    \n       DEFVAL { ''H }\n       ::= { pingResultsEntry 3 }\n    pingResultsMinRtt\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32\n       UNITS       \"milliseconds\"\
    \n       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The minimum ping round-trip-time (RTT) received.  A value\n    \
    \       of 0 for this object implies that no RTT has been received.\"\n      \
    \ ::= { pingResultsEntry 4 }\n    pingResultsMaxRtt OBJECT-TYPE\n       SYNTAX\
    \      Unsigned32\n       UNITS       \"milliseconds\"\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The maximum ping\
    \ round-trip-time (RTT) received.  A value\n           of 0 for this object implies\
    \ that no RTT has been received.\"\n       ::= { pingResultsEntry 5 }\n     pingResultsAverageRtt\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32\n       UNITS       \"milliseconds\"\
    \n       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The current average ping round-trip-time (RTT).\"\n       ::= {\
    \ pingResultsEntry 6 }\n     pingResultsProbeResponses OBJECT-TYPE\n       SYNTAX\
    \      Gauge32\n       UNITS       \"responses\"\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Number of responses\
    \ received for the corresponding\n           pingCtlEntry and pingResultsEntry.\
    \  The value of this object\n           MUST be reported as 0 when no probe responses\
    \ have been\n           received.\"\n       ::= { pingResultsEntry 7 }\n     pingResultsSentProbes\
    \ OBJECT-TYPE\n       SYNTAX      Gauge32\n       UNITS       \"probes\"\n   \
    \    MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n \
    \          \"The value of this object reflects the number of probes sent\n   \
    \        for the corresponding pingCtlEntry and pingResultsEntry.\n          \
    \ The value of this object MUST be reported as 0 when no probes\n           have\
    \ been sent.\"\n       ::= { pingResultsEntry 8 }\n     pingResultsRttSumOfSquares\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32\n       UNITS       \"milliseconds\"\
    \n       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This object contains the sum of the squares for all ping\n     \
    \      responses received.  Its purpose is to enable standard\n           deviation\
    \ calculation.  The value of this object MUST\n           be reported as 0 when\
    \ no ping responses have been\n           received.\"\n       ::= { pingResultsEntry\
    \ 9 }\n    pingResultsLastGoodProbe OBJECT-TYPE\n       SYNTAX      DateAndTime\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Date and time when the last response was received for\n        \
    \   a probe.\"\n       ::= { pingResultsEntry 10 }\n    -- Ping Probe History\
    \ Table\n    pingProbeHistoryTable OBJECT-TYPE\n       SYNTAX      SEQUENCE OF\
    \ PingProbeHistoryEntry\n       MAX-ACCESS  not-accessible\n       STATUS    \
    \  current\n       DESCRIPTION\n           \"Defines a table for storing the results\
    \ of ping\n           operations.  The number of entries in this table is\n  \
    \         limited per entry in the pingCtlTable by the value\n           of the\
    \ corresponding pingCtlMaxRows object.\n           An entry in this table is created\
    \ when the result of\n           a ping probe is determined.  The initial 2 instance\n\
    \           identifier index values identify the pingCtlEntry\n           that\
    \ a probe result (pingProbeHistoryEntry) belongs\n           to.  An entry is\
    \ removed from this table when\n           its corresponding pingCtlEntry is deleted.\n\
    \           An implementation of this MIB will remove the oldest\n           entry\
    \ in the pingProbeHistoryTable of the\n           corresponding entry in the pingCtlTable\
    \ to allow\n           the addition of an new entry once the number of rows\n\
    \           in the pingProbeHistoryTable reaches the value\n           specified\
    \ by pingCtlMaxRows for the corresponding\n           entry in the pingCtlTable.\"\
    \n      ::= { pingObjects 4 }\n    pingProbeHistoryEntry OBJECT-TYPE\n       SYNTAX\
    \      PingProbeHistoryEntry\n       MAX-ACCESS  not-accessible\n       STATUS\
    \      current\n       DESCRIPTION\n           \"Defines an entry in the pingProbeHistoryTable.\n\
    \           The first two index elements identify the\n           pingCtlEntry\
    \ that a pingProbeHistoryEntry belongs\n           to.  The third index element\
    \ selects a single\n           probe result.\"\n       INDEX {\n             \
    \   pingCtlOwnerIndex,\n                pingCtlTestName,\n                pingProbeHistoryIndex\n\
    \              }\n       ::= { pingProbeHistoryTable 1 }\n    PingProbeHistoryEntry\
    \ ::=\n       SEQUENCE {\n           pingProbeHistoryIndex         Unsigned32,\n\
    \           pingProbeHistoryResponse      Unsigned32,\n           pingProbeHistoryStatus\
    \        OperationResponseStatus,\n           pingProbeHistoryLastRC        Integer32,\n\
    \           pingProbeHistoryTime          DateAndTime\n       }\n    pingProbeHistoryIndex\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32 (1..'ffffffff'h)\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"An entry in this table is created when the result of\n           a ping probe\
    \ is determined.  The initial 2 instance\n           identifier index values identify\
    \ the pingCtlEntry\n           that a probe result (pingProbeHistoryEntry) belongs\n\
    \           to.\n           An implementation MUST start assigning\n         \
    \  pingProbeHistoryIndex values at 1 and wrap after\n           exceeding the\
    \ maximum possible value as defined by\n           the limit of this object ('ffffffff'h).\"\
    \n       ::= { pingProbeHistoryEntry 1 }\n    pingProbeHistoryResponse OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32\n       UNITS       \"milliseconds\"\n       MAX-ACCESS\
    \  read-only\n       STATUS      current\n       DESCRIPTION\n           \"The\
    \ amount of time measured in milliseconds from when\n           a probe was sent\
    \ to when its response was received or\n           when it timed out.  The value\
    \ of this object is reported\n           as 0 when it is not possible to transmit\
    \ a probe.\"\n       ::= { pingProbeHistoryEntry 2 }\n    pingProbeHistoryStatus\
    \ OBJECT-TYPE\n       SYNTAX      OperationResponseStatus\n       MAX-ACCESS \
    \ read-only\n       STATUS      current\n       DESCRIPTION\n           \"The\
    \ result of a particular probe done by a remote host.\"\n       ::= { pingProbeHistoryEntry\
    \ 3 }\n    pingProbeHistoryLastRC        OBJECT-TYPE\n       SYNTAX      Integer32\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The last implementation-method-specific reply code received.\n \
    \          If the ICMP Echo capability is being used, then a successful\n    \
    \       probe ends when an ICMP response is received that contains\n         \
    \  the code ICMP_ECHOREPLY(0).  The ICMP codes are maintained\n           by IANA.\
    \  Standardized ICMP codes are listed at\n           http://www.iana.org/assignments/icmp-parameters.\n\
    \           The ICMPv6 codes are listed at\n           http://www.iana.org/assignments/icmpv6-parameters.\"\
    \n       ::= { pingProbeHistoryEntry 4 }\n    pingProbeHistoryTime OBJECT-TYPE\n\
    \       SYNTAX      DateAndTime\n       MAX-ACCESS  read-only\n       STATUS \
    \     current\n       DESCRIPTION\n           \"Timestamp for when this probe\
    \ result was determined.\"\n       ::= { pingProbeHistoryEntry 5 }\n    -- Notification\
    \ Definition section\n    pingProbeFailed NOTIFICATION-TYPE\n         OBJECTS\
    \ {\n           pingCtlTargetAddressType,\n           pingCtlTargetAddress,\n\
    \           pingResultsOperStatus,\n           pingResultsIpTargetAddressType,\n\
    \           pingResultsIpTargetAddress,\n           pingResultsMinRtt,\n     \
    \      pingResultsMaxRtt,\n           pingResultsAverageRtt,\n           pingResultsProbeResponses,\n\
    \           pingResultsSentProbes,\n           pingResultsRttSumOfSquares,\n \
    \          pingResultsLastGoodProbe\n         }\n         STATUS  current\n  \
    \       DESCRIPTION\n             \"Generated when a probe failure is detected,\
    \ when the\n             corresponding pingCtlTrapGeneration object is set to\n\
    \             probeFailure(0), subject to the value of\n             pingCtlTrapProbeFailureFilter.\
    \  The object\n             pingCtlTrapProbeFailureFilter can be used to specify\
    \ the\n             number of consecutive probe failures that are required\n \
    \            before this notification can be generated.\"\n         ::= { pingNotifications\
    \ 1 }\n    pingTestFailed NOTIFICATION-TYPE\n         OBJECTS {\n           pingCtlTargetAddressType,\n\
    \           pingCtlTargetAddress,\n           pingResultsOperStatus,\n       \
    \    pingResultsIpTargetAddressType,\n           pingResultsIpTargetAddress,\n\
    \           pingResultsMinRtt,\n           pingResultsMaxRtt,\n           pingResultsAverageRtt,\n\
    \           pingResultsProbeResponses,\n           pingResultsSentProbes,\n  \
    \         pingResultsRttSumOfSquares,\n           pingResultsLastGoodProbe\n \
    \        }\n         STATUS  current\n         DESCRIPTION\n             \"Generated\
    \ when a ping test is determined to have failed,\n             when the corresponding\
    \ pingCtlTrapGeneration object is\n             set to testFailure(1).  In this\
    \ instance,\n             pingCtlTrapTestFailureFilter should specify the number\
    \ of\n             probes in a test required to have failed in order to\n    \
    \         consider the test failed.\"\n         ::= { pingNotifications 2 }\n\
    \    pingTestCompleted NOTIFICATION-TYPE\n         OBJECTS {\n           pingCtlTargetAddressType,\n\
    \           pingCtlTargetAddress,\n           pingResultsOperStatus,\n       \
    \    pingResultsIpTargetAddressType,\n           pingResultsIpTargetAddress,\n\
    \           pingResultsMinRtt,\n           pingResultsMaxRtt,\n           pingResultsAverageRtt,\n\
    \           pingResultsProbeResponses,\n           pingResultsSentProbes,\n  \
    \         pingResultsRttSumOfSquares,\n           pingResultsLastGoodProbe\n \
    \        }\n         STATUS  current\n         DESCRIPTION\n             \"Generated\
    \ at the completion of a ping test when the\n             corresponding pingCtlTrapGeneration\
    \ object has the\n             testCompletion(2) bit set.\"\n         ::= { pingNotifications\
    \ 3 }\n    -- Conformance information\n    -- Compliance statements\n    pingCompliances\
    \ OBJECT IDENTIFIER ::= { pingConformance 1 }\n    pingGroups      OBJECT IDENTIFIER\
    \ ::= { pingConformance 2 }\n    -- Compliance statements\n    pingFullCompliance\
    \ MODULE-COMPLIANCE\n       STATUS  current\n       DESCRIPTION\n            \
    \   \"The compliance statement for SNMP entities that\n               fully implement\
    \ the DISMAN-PING-MIB.\"\n       MODULE  -- this module\n           MANDATORY-GROUPS\
    \ {\n                               pingMinimumGroup,\n                      \
    \         pingCtlRowStatusGroup,\n                               pingHistoryGroup,\n\
    \                               pingNotificationsGroup\n                     \
    \        }\n           OBJECT pingMaxConcurrentRequests\n           MIN-ACCESS\
    \  read-only\n           DESCRIPTION\n               \"The agent is not required\
    \ to support set\n               operations to this object.\"\n           OBJECT\
    \ pingCtlStorageType\n           MIN-ACCESS  read-only\n           DESCRIPTION\n\
    \               \"Write access is not required.\"\n           OBJECT pingCtlType\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  In addition, the only\n               value that MUST\
    \ be supported by an implementation is\n               pingIcmpEcho.\"\n     \
    \      OBJECT pingCtlSourceAddressType\n           SYNTAX  InetAddressType { unknown(0),\
    \ ipv4(1), ipv6(2) }\n           MIN-ACCESS  read-only\n           DESCRIPTION\n\
    \               \"Write access to this object is not required by\n           \
    \    implementations that are not capable of binding the\n               send\
    \ socket with a source address.  An implementation\n               is only required\
    \ to support IPv4 and IPv6 addresses.\"\n           OBJECT pingCtlSourceAddress\n\
    \           SYNTAX  InetAddress (SIZE(0|4|16))\n           MIN-ACCESS  read-only\n\
    \           DESCRIPTION\n               \"Write access to this object is not required\
    \ by\n               implementations that are not capable of binding the\n   \
    \            send socket with a source address.  An implementation\n         \
    \      is only required to support IPv4 and IPv6 addresses.\"\n           OBJECT\
    \ pingCtlIfIndex\n           MIN-ACCESS  read-only\n           DESCRIPTION\n \
    \              \"Write access is not required.  If write access is\n         \
    \      not supported, return a 0 as the value of this object.\n              \
    \ A value of 0 means that the function represented by\n               this option\
    \ is not supported.\"\n           OBJECT pingCtlByPassRouteTable\n           MIN-ACCESS\
    \  read-only\n           DESCRIPTION\n               \"Write access to this object\
    \ is not required by\n               implementations that are not capable of its\n\
    \               implementation.  The function represented by this\n          \
    \     object is implementable if the setsockopt\n               SOL_SOCKET SO_DONTROUTE\
    \ option is supported.\"\n           OBJECT pingCtlDSField\n           MIN-ACCESS\
    \  read-only\n           DESCRIPTION\n               \"Write access is not required.\
    \  If write access is\n               not supported, return a 0 as the value of\
    \ this object.\n               A value of 0 means that the function represented\
    \ by\n               this option is not supported.\"\n           OBJECT pingResultsIpTargetAddressType\n\
    \           SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n       \
    \    DESCRIPTION\n               \"An implementation is only required to\n   \
    \            support IPv4 and IPv6 addresses.\"\n           OBJECT pingResultsIpTargetAddress\n\
    \           SYNTAX  InetAddress (SIZE(0|4|16))\n           DESCRIPTION\n     \
    \          \"An implementation is only required to\n               support IPv4\
    \ and globally unique IPv6 addresses.\"\n           OBJECT pingResultsLastGoodProbe\n\
    \           DESCRIPTION\n               \"This object is mandatory for implementations\
    \ that have\n               access to a system clock and that are capable of setting\n\
    \               the values for DateAndTime objects.  It is RECOMMENDED\n     \
    \          that when this object is not supported its values\n               be\
    \ reported as '0000000000000000'H.\"\n           OBJECT pingProbeHistoryTime\n\
    \           DESCRIPTION\n               \"This object is mandatory for implementations\
    \ that have\n               access to a system clock and that are capable of setting\n\
    \               the values for DateAndTime objects.  It is RECOMMENDED\n     \
    \          that when this object is not supported its values\n               be\
    \ reported as '0000000000000000'H.\"\n       ::= { pingCompliances 2 }\n    pingMinimumCompliance\
    \ MODULE-COMPLIANCE\n       STATUS  current\n       DESCRIPTION\n            \
    \   \"The minimum compliance statement for SNMP entities\n               that\
    \ implement the minimal subset of the\n               DISMAN-PING-MIB.  Implementors\
    \ might choose this\n               subset for small devices with limited resources.\"\
    \n       MODULE  -- this module\n           MANDATORY-GROUPS { pingMinimumGroup\
    \ }\n           GROUP pingCtlRowStatusGroup\n           DESCRIPTION\n        \
    \       \"A compliant implementation does not have to implement\n            \
    \   the pingCtlRowStatusGroup.\"\n           GROUP pingHistoryGroup\n        \
    \   DESCRIPTION\n               \"A compliant implementation does not have to\
    \ implement\n               the pingHistoryGroup.\"\n           GROUP pingNotificationsGroup\n\
    \           DESCRIPTION\n               \"A compliant implementation does not\
    \ have to implement\n               the pingNotificationsGroup.\"\n          \
    \ OBJECT pingMaxConcurrentRequests\n           MIN-ACCESS  read-only\n       \
    \    DESCRIPTION\n               \"The agent is not required to support set\n\
    \               operations to this object.\"\n           OBJECT pingCtlDataFill\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"The\
    \ agent is not required to support set\n               operations to this object.\"\
    \n           OBJECT pingCtlFrequency\n           MIN-ACCESS  read-only\n     \
    \      DESCRIPTION\n               \"Write access is not required.  If write access\
    \ is\n               not supported, return a 0 as the value of this object.\n\
    \               A value of 0 means that the function represented by\n        \
    \       this option is not supported.\"\n           OBJECT pingCtlMaxRows\n  \
    \         MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  If the\n               pingHistoryGroup is not implemented,\
    \ then write\n               access to this object MUST be disabled, and the object\n\
    \               MUST return a value of 0 when retrieved.\"\n           OBJECT\
    \ pingCtlStorageType\n           MIN-ACCESS  read-only\n           DESCRIPTION\n\
    \               \"Write access is not required.\"\n           OBJECT pingCtlTrapGeneration\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  If the\n               pingNotificationsGroup is not\
    \ implemented, then write\n               access to this object MUST be disabled,\
    \ and the object\n               MUST return a value with no bit set when retrieved.\n\
    \               No bit set indicates that not notification is\n              \
    \ generated.\"\n           OBJECT pingCtlTrapProbeFailureFilter\n           MIN-ACCESS\
    \  read-only\n           DESCRIPTION\n               \"If write access to pingCtlTrapGeneration\
    \ is not\n               supported, then write access to this object must also\n\
    \               not be supported.  In this case, return 0 as the value\n     \
    \          of this object.\"\n           OBJECT pingCtlTrapTestFailureFilter\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"If\
    \ write access to pingCtlTrapGeneration is not\n               supported, then\
    \ write access to this object must also\n               not be supported.  In\
    \ this case, return 0 as the value\n               of this object.\"\n       \
    \    OBJECT pingCtlType\n           MIN-ACCESS  read-only\n           DESCRIPTION\n\
    \               \"Write access is not required.  In addition, the only\n     \
    \          value that MUST be supported by an implementation is\n            \
    \   pingIcmpEcho.\"\n           OBJECT pingCtlDescr\n           MIN-ACCESS  read-only\n\
    \           DESCRIPTION\n               \"The agent is not required to support\
    \ set\n               operations to this object.\"\n           OBJECT pingCtlSourceAddressType\n\
    \           SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n       \
    \    MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write access\
    \ to this object is not required by\n               implementations that are not\
    \ capable of binding the\n               send socket with a source address.  An\
    \ implementation\n               is only required to support IPv4 and IPv6 addresses.\"\
    \n           OBJECT pingCtlSourceAddress\n           SYNTAX  InetAddress (SIZE(0|4|16))\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access to this object is not required by\n               implementations that\
    \ are not capable of binding the\n               send socket with a source address.\
    \  An implementation\n               is only required to support IPv4 and IPv6\
    \ addresses.\"\n           OBJECT pingCtlIfIndex\n           MIN-ACCESS  read-only\n\
    \           DESCRIPTION\n               \"Write access is not required.  If write\
    \ access is\n               not supported, return a 0 as the value of this object.\n\
    \               A value of 0 means that the function represented by\n        \
    \       this option is not supported.\"\n           OBJECT pingCtlByPassRouteTable\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  If write access is\n               not supported, return\
    \ false(2) as the value of this\n               object.  A value of false(2) means\
    \ that the function\n               represented by this option is not supported.\"\
    \n           OBJECT pingCtlDSField\n           MIN-ACCESS  read-only\n       \
    \    DESCRIPTION\n               \"Write access is not required.  If write access\
    \ is\n               not supported, return a 0 as the value of this object.\n\
    \               A value of 0 means that the function represented by\n        \
    \       this option is not supported.\"\n           OBJECT pingResultsIpTargetAddressType\n\
    \           SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n       \
    \    DESCRIPTION\n               \"An implementation is only required to\n   \
    \            support IPv4 and IPv6 addresses.\"\n           OBJECT pingResultsIpTargetAddress\n\
    \           SYNTAX  InetAddress (SIZE(0|4|16))\n           DESCRIPTION\n     \
    \          \"An implementation is only required to\n               support IPv4\
    \ and globally unique IPv6 addresses.\"\n           OBJECT pingResultsLastGoodProbe\n\
    \           DESCRIPTION\n               \"This object is mandatory for implementations\
    \ that have\n               access to a system clock and that are capable of setting\n\
    \               the values for DateAndTime objects.  It is RECOMMENDED\n     \
    \          that when this object is not supported its values\n               be\
    \ reported as '0000000000000000'H.\"\n           OBJECT pingProbeHistoryTime\n\
    \           DESCRIPTION\n               \"If the pingHistoryGroup is implemented,\
    \ then this\n               object is mandatory for implementations that have\n\
    \               access to a system clock and that are capable of setting\n   \
    \            the values for DateAndTime objects.  It is RECOMMENDED\n        \
    \       that when this object is not supported its values\n               be reported\
    \ as '0000000000000000'H.\"\n       ::= { pingCompliances 3 }\n    pingCompliance\
    \ MODULE-COMPLIANCE\n       STATUS  deprecated\n       DESCRIPTION\n         \
    \      \"The compliance statement for the DISMAN-PING-MIB.  This\n           \
    \    compliance statement has been deprecated because the\n               group\
    \ pingGroup and the pingTimeStampGroup have been\n               split and deprecated.\
    \  The pingFullCompliance statement\n               is semantically identical\
    \ to the deprecated\n               pingCompliance statement.\"\n       MODULE\
    \  -- this module\n           MANDATORY-GROUPS {\n                           \
    \    pingGroup,\n                               pingNotificationsGroup\n     \
    \                        }\n           GROUP pingTimeStampGroup\n           DESCRIPTION\n\
    \               \"This group is mandatory for implementations that have\n    \
    \           access to a system clock and that are capable of setting\n       \
    \        the values for DateAndTime objects.  It is RECOMMENDED\n            \
    \   that when this group is not supported the values\n               for the objects\
    \ in this group be reported as\n               '0000000000000000'H.\"\n      \
    \     OBJECT pingMaxConcurrentRequests\n           MIN-ACCESS  read-only\n   \
    \        DESCRIPTION\n               \"The agent is not required to support set\n\
    \               operations to this object.\"\n           OBJECT pingCtlStorageType\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  It is also allowed\n               that implementations\
    \ support only the volatile\n               StorageType enumeration.\"\n     \
    \      OBJECT pingCtlType\n           MIN-ACCESS  read-only\n           DESCRIPTION\n\
    \               \"Write access is not required.  In addition, the only\n     \
    \          value that MUST be supported by an implementation is\n            \
    \   pingIcmpEcho.\"\n           OBJECT pingCtlByPassRouteTable\n           MIN-ACCESS\
    \  read-only\n           DESCRIPTION\n               \"This object is not required\
    \ by implementations that\n               are not capable of its implementation.\
    \  The function\n               represented by this object is implementable if\
    \ the\n               setsockopt SOL_SOCKET SO_DONTROUTE option is\n         \
    \      supported.\"\n           OBJECT pingCtlSourceAddressType\n           SYNTAX\
    \  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n           MIN-ACCESS  read-only\n\
    \           DESCRIPTION\n               \"This object is not required by implementations\
    \ that\n               are not capable of binding the send socket with a\n   \
    \            source address.  An implementation is only required to\n        \
    \       support IPv4 and IPv6 addresses.\"\n           OBJECT pingCtlSourceAddress\n\
    \           SYNTAX  InetAddress (SIZE(0|4|16))\n           MIN-ACCESS  read-only\n\
    \           DESCRIPTION\n               \"This object is not required by implementations\
    \ that\n               are not capable of binding the send socket with a\n   \
    \            source address.  An implementation is only required to\n        \
    \       support IPv4 and globally unique IPv6 addresses.\"\n           OBJECT\
    \ pingCtlIfIndex\n           MIN-ACCESS  read-only\n           DESCRIPTION\n \
    \              \"Write access is not required.  When write access is\n       \
    \        not supported, return a 0 as the value of this object.\n            \
    \   A value of 0 means that the function represented by\n               this option\
    \ is not supported.\"\n           OBJECT pingCtlDSField\n           MIN-ACCESS\
    \  read-only\n           DESCRIPTION\n               \"Write access is not required.\
    \  When write access is\n               not supported, return a 0 as the value\
    \ of this object.\n               A value of 0 means that the function represented\
    \ by\n               this option is not supported.\"\n           OBJECT pingResultsIpTargetAddressType\n\
    \           SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n       \
    \    DESCRIPTION\n               \"An implementation is only required to\n   \
    \            support IPv4 and IPv6 addresses.\"\n           OBJECT pingResultsIpTargetAddress\n\
    \           SYNTAX  InetAddress (SIZE(0|4|16))\n           DESCRIPTION\n     \
    \          \"An implementation is only required to\n               support IPv4\
    \ and globally unique IPv6 addresses.\"\n       ::= { pingCompliances 1 }\n  \
    \  -- MIB groupings\n    pingMinimumGroup OBJECT-GROUP\n      OBJECTS {\n    \
    \            pingMaxConcurrentRequests,\n                pingCtlTargetAddressType,\n\
    \                pingCtlTargetAddress,\n                pingCtlDataSize,\n   \
    \             pingCtlTimeOut,\n                pingCtlProbeCount,\n          \
    \      pingCtlAdminStatus,\n                pingCtlDataFill,\n               \
    \ pingCtlFrequency,\n                pingCtlMaxRows,\n                pingCtlStorageType,\n\
    \                pingCtlTrapGeneration,\n                pingCtlTrapProbeFailureFilter,\n\
    \                pingCtlTrapTestFailureFilter,\n                pingCtlType,\n\
    \                pingCtlDescr,\n                pingCtlByPassRouteTable,\n   \
    \             pingCtlSourceAddressType,\n                pingCtlSourceAddress,\n\
    \                pingCtlIfIndex,\n                pingCtlDSField,\n          \
    \      pingResultsOperStatus,\n                pingResultsIpTargetAddressType,\n\
    \                pingResultsIpTargetAddress,\n                pingResultsMinRtt,\n\
    \                pingResultsMaxRtt,\n                pingResultsAverageRtt,\n\
    \                pingResultsProbeResponses,\n                pingResultsSentProbes,\n\
    \                pingResultsRttSumOfSquares,\n                pingResultsLastGoodProbe\n\
    \              }\n      STATUS  current\n      DESCRIPTION\n          \"The group\
    \ of objects that constitute the remote ping\n          capability.\"\n      \
    \ ::= { pingGroups 4 }\n    pingCtlRowStatusGroup OBJECT-GROUP\n      OBJECTS\
    \ {\n                pingCtlRowStatus\n              }\n      STATUS  current\n\
    \      DESCRIPTION\n          \"The RowStatus object of the pingCtlTable.\"\n\
    \       ::= { pingGroups 5 }\n    pingHistoryGroup OBJECT-GROUP\n      OBJECTS\
    \ {\n                pingProbeHistoryResponse,\n                pingProbeHistoryStatus,\n\
    \                pingProbeHistoryLastRC,\n                pingProbeHistoryTime\n\
    \              }\n      STATUS  current\n      DESCRIPTION\n          \"The group\
    \ of objects that constitute the history\n          capability.\"\n       ::=\
    \ { pingGroups 6 }\n    pingNotificationsGroup NOTIFICATION-GROUP\n      NOTIFICATIONS\
    \ {\n                pingProbeFailed,\n                pingTestFailed,\n     \
    \           pingTestCompleted\n             }\n      STATUS        current\n \
    \     DESCRIPTION\n          \"The notification that are required to be supported\
    \ by\n          implementations of this MIB.\"\n      ::= { pingGroups 3 }\n \
    \   pingGroup OBJECT-GROUP\n      OBJECTS {\n                pingMaxConcurrentRequests,\n\
    \                pingCtlTargetAddressType,\n                pingCtlTargetAddress,\n\
    \                pingCtlDataSize,\n                pingCtlTimeOut,\n         \
    \       pingCtlProbeCount,\n                pingCtlAdminStatus,\n            \
    \    pingCtlDataFill,\n                pingCtlFrequency,\n                pingCtlMaxRows,\n\
    \                pingCtlStorageType,\n                pingCtlTrapGeneration,\n\
    \                pingCtlTrapProbeFailureFilter,\n                pingCtlTrapTestFailureFilter,\n\
    \                pingCtlType,\n                pingCtlDescr,\n               \
    \ pingCtlByPassRouteTable,\n                pingCtlSourceAddressType,\n      \
    \          pingCtlSourceAddress,\n                pingCtlIfIndex,\n          \
    \      pingCtlDSField,\n                pingCtlRowStatus,\n                pingResultsOperStatus,\n\
    \                pingResultsIpTargetAddressType,\n                pingResultsIpTargetAddress,\n\
    \                pingResultsMinRtt,\n                pingResultsMaxRtt,\n    \
    \            pingResultsAverageRtt,\n                pingResultsProbeResponses,\n\
    \                pingResultsSentProbes,\n                pingResultsRttSumOfSquares,\n\
    \                pingProbeHistoryResponse,\n                pingProbeHistoryStatus,\n\
    \                pingProbeHistoryLastRC\n              }\n      STATUS  deprecated\n\
    \      DESCRIPTION\n          \"The group of objects that constitute the remote\
    \ ping\n          capability.\"\n       ::= { pingGroups 1 }\n    pingTimeStampGroup\
    \ OBJECT-GROUP\n      OBJECTS {\n                pingResultsLastGoodProbe,\n \
    \               pingProbeHistoryTime\n              }\n      STATUS  deprecated\n\
    \      DESCRIPTION\n          \"The group of DateAndTime objects.\"\n       ::=\
    \ { pingGroups 2 }\n   END\n"
- title: 4.2.  DISMAN-TRACEROUTE-MIB
  contents:
  - "4.2.  DISMAN-TRACEROUTE-MIB\n   DISMAN-TRACEROUTE-MIB DEFINITIONS ::= BEGIN\n\
    \   IMPORTS\n       MODULE-IDENTITY, OBJECT-TYPE, Integer32,\n       Gauge32,\
    \ Unsigned32, mib-2,\n       NOTIFICATION-TYPE,\n       OBJECT-IDENTITY\n    \
    \       FROM SNMPv2-SMI                  -- RFC2578\n       RowStatus, StorageType,\n\
    \       TruthValue, DateAndTime\n           FROM SNMPv2-TC                   --\
    \ RFC2579\n       MODULE-COMPLIANCE, OBJECT-GROUP,\n       NOTIFICATION-GROUP\n\
    \           FROM SNMPv2-CONF                 -- RFC2580\n       SnmpAdminString\n\
    \           FROM SNMP-FRAMEWORK-MIB          -- RFC3411\n       InterfaceIndexOrZero\
    \                 -- RFC2863\n           FROM IF-MIB\n       InetAddressType,\
    \ InetAddress\n           FROM INET-ADDRESS-MIB            -- RFC4001\n      \
    \ OperationResponseStatus\n           FROM DISMAN-PING-MIB;            -- RFC4560\n\
    \    traceRouteMIB MODULE-IDENTITY\n       LAST-UPDATED \"200606130000Z\"    \
    \     -- 13 June 2006\n       ORGANIZATION \"IETF Distributed Management Working\
    \ Group\"\n       CONTACT-INFO\n           \"Juergen Quittek\n           NEC Europe\
    \ Ltd.\n           Network Laboratories\n           Kurfuersten-Anlage 36\n  \
    \         69115 Heidelberg\n           Germany\n           Phone: +49 6221 4342-115\n\
    \           Email: quittek@netlab.nec.de\"\n       DESCRIPTION\n           \"\
    The Traceroute MIB (DISMAN-TRACEROUTE-MIB) provides\n           access to the\
    \ traceroute capability at a remote host.\n           Copyright (C) The Internet\
    \ Society (2006). This version of\n           this MIB module is part of RFC 4560;\
    \ see the RFC itself for\n           full legal notices.\"\n        --  Revision\
    \ history\n        REVISION     \"200606130000Z\"         -- 13 June 2006\n  \
    \      DESCRIPTION\n            \"Updated version, published as RFC 4560.\n  \
    \              - Correctly considered IPv6 in DESCRIPTION clause of\n        \
    \          object traceRouteCtlDataSize\n                - Replaced references\
    \ to RFC 2575 by RFC 3415\n                - Replaced references to RFC 2571 by\
    \ RFC 3411\n                - Replaced references to RFC 2851 by RFC 4001\n  \
    \              - Clarified DESCRIPTION clause of object\n                  traceRouteResultsLastGoodPath\n\
    \                - Changed range of object traceRouteCtlInitialTtl\n         \
    \         from (0..255) to (1..255)\n                - Extended DESCRIPTION clause\
    \ of traceRouteResultsTable\n                  describing re-initialization of\
    \ entries\n                - Changed SYNTAX of traceRouteResultsTestAttempts and\n\
    \                  traceRouteResultsTestSuccesses from Unsigned32 to\n       \
    \           Gauge32\n                - Changed status of traceRouteCompliance\
    \ to deprecated\n                - Added traceRouteFullCompliance and\n      \
    \            traceRouteMinimumCompliance\n                - Changed status of\
    \ traceRouteGroup and\n                  traceRouteTimeStampGroup to deprecated\n\
    \                - Added traceRouteMinimumGroup,\n                  traceRouteCtlRowStatusGroup,\
    \ and\n                  traceRouteHistoryGroup\n                - Changed DEFVAL\
    \ of object\n                  traceRouteCtlTargetAddressType from { ipv4 }\n\
    \                  to { unknown }\n                - Changed DEFVAL of object\
    \ traceRouteCtlDescr\n                  from { '00'H } to { ''H }\n          \
    \      - Added DEFVAL for object traceRouteCtlTrapGeneration\n               \
    \   of DEFVAL { { } }\"\n        REVISION     \"200009210000Z\"         -- 21\
    \ September 2000\n        DESCRIPTION\n            \"Initial version, published\
    \ as RFC 2925.\"\n       ::= { mib-2 81 }\n    -- Top level structure of the MIB\n\
    \    traceRouteNotifications  OBJECT IDENTIFIER ::= { traceRouteMIB 0 }\n    traceRouteObjects\
    \        OBJECT IDENTIFIER ::= { traceRouteMIB 1 }\n    traceRouteConformance\
    \    OBJECT IDENTIFIER ::= { traceRouteMIB 2 }\n    -- The registration node (point)\
    \ for traceroute implementation types\n    traceRouteImplementationTypeDomains\
    \ OBJECT IDENTIFIER\n    ::= { traceRouteMIB 3 }\n    traceRouteUsingUdpProbes\
    \ OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"Indicates that an implementation is using UDP probes to\n           perform\
    \ the traceroute operation.\"\n       ::= { traceRouteImplementationTypeDomains\
    \ 1 }\n    -- Simple Object Definitions\n    traceRouteMaxConcurrentRequests OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32\n       UNITS       \"requests\"\n       MAX-ACCESS\
    \  read-write\n       STATUS      current\n       DESCRIPTION\n          \"The\
    \ maximum number of concurrent active traceroute requests\n          that are\
    \ allowed within an agent implementation.  A value\n          of 0 for this object\
    \ implies that there is no limit for\n          the number of concurrent active\
    \ requests in effect.\n          The limit applies only to new requests being\
    \ activated.\n          When a new value is set, the agent will continue processing\n\
    \          all the requests already active, even if their number\n          exceeds\
    \ the limit just imposed.\"\n       DEFVAL { 10 }\n       ::= { traceRouteObjects\
    \ 1 }\n     -- Traceroute Control Table\n    traceRouteCtlTable OBJECT-TYPE\n\
    \       SYNTAX      SEQUENCE OF TraceRouteCtlEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Defines the Remote\
    \ Operations Traceroute Control Table for\n           providing the capability\
    \ of invoking traceroute from a remote\n           host.  The results of traceroute\
    \ operations can be stored in\n           the traceRouteResultsTable, traceRouteProbeHistoryTable,\
    \ and\n           the traceRouteHopsTable.\"\n      ::= { traceRouteObjects 2\
    \ }\n    traceRouteCtlEntry OBJECT-TYPE\n       SYNTAX      TraceRouteCtlEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Defines an entry in the traceRouteCtlTable.  The first\n       \
    \    index element, traceRouteCtlOwnerIndex, is of type\n           SnmpAdminString,\
    \ a textual convention that allows for\n           use of the SNMPv3 View-Based\
    \ Access Control Model\n           (RFC 3415, VACM) and that allows a management\n\
    \           application to identify its entries.  The second index,\n        \
    \   traceRouteCtlTestName (also an SnmpAdminString),\n           enables the same\
    \ management application to have\n           multiple requests outstanding.\"\n\
    \       INDEX {\n               traceRouteCtlOwnerIndex,\n               traceRouteCtlTestName\n\
    \             }\n       ::= { traceRouteCtlTable 1 }\n    TraceRouteCtlEntry ::=\n\
    \       SEQUENCE {\n         traceRouteCtlOwnerIndex         SnmpAdminString,\n\
    \         traceRouteCtlTestName           SnmpAdminString,\n         traceRouteCtlTargetAddressType\
    \  InetAddressType,\n         traceRouteCtlTargetAddress      InetAddress,\n \
    \        traceRouteCtlByPassRouteTable   TruthValue,\n         traceRouteCtlDataSize\
    \           Unsigned32,\n         traceRouteCtlTimeOut            Unsigned32,\n\
    \         traceRouteCtlProbesPerHop       Unsigned32,\n         traceRouteCtlPort\
    \               Unsigned32,\n         traceRouteCtlMaxTtl             Unsigned32,\n\
    \         traceRouteCtlDSField            Unsigned32,\n         traceRouteCtlSourceAddressType\
    \  InetAddressType,\n         traceRouteCtlSourceAddress      InetAddress,\n \
    \        traceRouteCtlIfIndex            InterfaceIndexOrZero,\n         traceRouteCtlMiscOptions\
    \        SnmpAdminString,\n         traceRouteCtlMaxFailures        Unsigned32,\n\
    \         traceRouteCtlDontFragment       TruthValue,\n         traceRouteCtlInitialTtl\
    \         Unsigned32,\n         traceRouteCtlFrequency          Unsigned32,\n\
    \         traceRouteCtlStorageType        StorageType,\n         traceRouteCtlAdminStatus\
    \        INTEGER,\n         traceRouteCtlDescr              SnmpAdminString,\n\
    \         traceRouteCtlMaxRows            Unsigned32,\n         traceRouteCtlTrapGeneration\
    \     BITS,\n         traceRouteCtlCreateHopsEntries  TruthValue,\n         traceRouteCtlType\
    \               OBJECT IDENTIFIER,\n         traceRouteCtlRowStatus          RowStatus\n\
    \       }\n    traceRouteCtlOwnerIndex OBJECT-TYPE\n       SYNTAX      SnmpAdminString\
    \ (SIZE(0..32))\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n          \"To facilitate the provisioning of access control\
    \ by a\n          security administrator using the View-Based Access\n       \
    \   Control Model (RFC 3415, VACM) for tables in which\n          multiple users\
    \ may need to create or\n          modify entries independently, the initial index\
    \ is used as\n          an 'owner index'.  Such an initial index has a syntax\
    \ of\n          SnmpAdminString and can thus be trivially mapped to a\n      \
    \    securityName or groupName defined in VACM, in\n          accordance with\
    \ a security policy.\n          When used in conjunction with such a security\
    \ policy,\n          all entries in the table belonging to a particular user\n\
    \          (or group) will have the same value for this initial\n          index.\
    \  For a given user's entries in a particular\n          table, the object identifiers\
    \ for the information in\n          these entries will have the same subidentifiers\
    \ (except\n          for the 'column' subidentifier) up to the end of the\n  \
    \        encoded owner index. To configure VACM to permit access\n          to\
    \ this portion of the table, one would create\n          vacmViewTreeFamilyTable\
    \ entries with the value of\n          vacmViewTreeFamilySubtree including the\
    \ owner index\n          portion, and vacmViewTreeFamilyMask 'wildcarding' the\n\
    \          column subidentifier.  More elaborate configurations\n          are\
    \ possible.\"\n       ::= { traceRouteCtlEntry 1 }\n     traceRouteCtlTestName\
    \ OBJECT-TYPE\n       SYNTAX      SnmpAdminString (SIZE(0..32))\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"The name of a traceroute test.  This is locally unique,\n           within\
    \ the scope of a traceRouteCtlOwnerIndex.\"\n       ::= { traceRouteCtlEntry 2\
    \ }\n    traceRouteCtlTargetAddressType OBJECT-TYPE\n       SYNTAX      InetAddressType\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Specifies the type of host address to be used on the\n         \
    \  traceroute request at the remote host.\"\n       DEFVAL { unknown }\n     \
    \  ::= { traceRouteCtlEntry 3 }\n    traceRouteCtlTargetAddress OBJECT-TYPE\n\
    \       SYNTAX      InetAddress\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"Specifies the host address used\
    \ on the\n           traceroute request at the remote host.  The\n           host\
    \ address type can be determined by\n           examining the value of the corresponding\n\
    \           traceRouteCtlTargetAddressType.\n           A value for this object\
    \ MUST be set prior to\n           transitioning its corresponding traceRouteCtlEntry\
    \ to\n           active(1) via traceRouteCtlRowStatus.\"\n       ::= { traceRouteCtlEntry\
    \ 4 }\n    traceRouteCtlByPassRouteTable OBJECT-TYPE\n       SYNTAX TruthValue\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \          \"The purpose of this object is to enable optional\n          bypassing\
    \ the route table.  If enabled, the remote\n          host will bypass the normal\
    \ routing tables and send\n          directly to a host on an attached network.\
    \  If the\n          host is not on a directly attached network, an\n        \
    \  error is returned.  This option can be used to perform\n          the traceroute\
    \ operation to a local host through an\n          interface that has no route\
    \ defined (e.g., after the\n          interface was dropped by the routing daemon\
    \ at the host).\"\n       DEFVAL { false }\n       ::= { traceRouteCtlEntry 5\
    \ }\n    traceRouteCtlDataSize OBJECT-TYPE\n       SYNTAX      Unsigned32 (0..65507)\n\
    \       UNITS       \"octets\"\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"Specifies the size of the data\
    \ portion of a traceroute\n           request, in octets.  If the RECOMMENDED\
    \ traceroute method\n           (UDP datagrams as probes) is used, then the value\n\
    \           contained in this object MUST be applied.  If another\n          \
    \ traceroute method is used for which the specified size\n           is not appropriate,\
    \ then the implementation SHOULD use\n           whatever size (appropriate to\
    \ the method) is closest to\n           the specified size.\n           The maximum\
    \ value for this object was computed by\n           subtracting the smallest possible\
    \ IP header size of\n           20 octets (IPv4 header with no options) and the\
    \ UDP\n           header size of 8 octets from the maximum IP packet size.\n \
    \          An IP packet has a maximum size of 65535 octets\n           (excluding\
    \ IPv6 Jumbograms).\"\n       DEFVAL { 0 }\n       ::= { traceRouteCtlEntry 6\
    \ }\n    traceRouteCtlTimeOut OBJECT-TYPE\n       SYNTAX      Unsigned32 (1..60)\n\
    \       UNITS       \"seconds\"\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"Specifies the time-out value,\
    \ in seconds, for\n           a traceroute request.\"\n       DEFVAL { 3 }\n \
    \      ::= { traceRouteCtlEntry 7 }\n    traceRouteCtlProbesPerHop OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32 (1..10)\n       UNITS       \"probes\"\n      \
    \ MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n  \
    \         \"Specifies the number of times to reissue a traceroute\n          \
    \ request with the same time-to-live (TTL) value.\"\n       DEFVAL { 3 }\n   \
    \    ::= { traceRouteCtlEntry 8 }\n    traceRouteCtlPort OBJECT-TYPE\n       SYNTAX\
    \      Unsigned32 (1..65535)\n       UNITS       \"UDP Port\"\n       MAX-ACCESS\
    \  read-create\n       STATUS      current\n       DESCRIPTION\n           \"\
    Specifies the (initial) UDP port to send the traceroute\n           request to.\
    \  A port needs to be specified that is not in\n           use at the destination\
    \ (target) host.  The default\n           value for this object is the IANA assigned\
    \ port,\n           33434, for the traceroute function.\"\n       DEFVAL { 33434\
    \ }\n       ::= { traceRouteCtlEntry 9 }\n    traceRouteCtlMaxTtl OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32 (1..255)\n       UNITS       \"time-to-live value\"\
    \n       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Specifies the maximum time-to-live value.\"\n       DEFVAL { 30\
    \ }\n       ::= { traceRouteCtlEntry 10 }\n    traceRouteCtlDSField OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32 (0..255)\n       MAX-ACCESS  read-create\n    \
    \   STATUS      current\n       DESCRIPTION\n           \"Specifies the value\
    \ to store in the Type of Service\n           (TOS) octet in the IPv4 header or\
    \ in the Traffic\n           Class octet in the IPv6 header, respectively, of\
    \ the\n           IP packet used to encapsulate the traceroute probe.\n      \
    \     The octet to be set in the IP header contains the\n           Differentiated\
    \ Services (DS) Field in the six most\n           significant bits.\n        \
    \   This option can be used to determine what effect an\n           explicit DS\
    \ Field setting has on a traceroute response.\n           Not all values are legal\
    \ or meaningful.  A value of 0\n           means that the function represented\
    \ by this option is\n           not supported.  DS Field usage is often not supported\n\
    \           by IP implementations, and not all values are supported.\n       \
    \    Refer to RFC 2474 and RFC 3260 for guidance on usage of\n           this\
    \ field.\"\n       REFERENCE\n           \"Refer to RFC 1812 for the definition\
    \ of the IPv4 TOS\n           octet and to RFC 2460 for the definition of the\
    \ IPv6\n           Traffic Class octet.  Refer to RFC 2474 and RFC 3260\n    \
    \       for the definition of the Differentiated Services Field.\"\n       DEFVAL\
    \ { 0 }\n       ::= { traceRouteCtlEntry 11 }\n    traceRouteCtlSourceAddressType\
    \ OBJECT-TYPE\n       SYNTAX      InetAddressType\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Specifies the type\
    \ of the source address,\n           traceRouteCtlSourceAddress, to be used at\
    \ a remote host\n           when a traceroute operation is performed.\"\n    \
    \   DEFVAL { unknown }\n       ::= { traceRouteCtlEntry 12 }\n    traceRouteCtlSourceAddress\
    \ OBJECT-TYPE\n       SYNTAX      InetAddress\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Use the specified\
    \ IP address (which must be given as an\n           IP number, not a hostname)\
    \ as the source address in\n           outgoing probe packets.  On hosts with\
    \ more than one IP\n           address, this option can be used to select the\
    \ address\n           to be used.  If the IP address is not one of this\n    \
    \       machine's interface addresses, an error is returned, and\n           nothing\
    \ is sent.  A zero-length octet string value for\n           this object disables\
    \ source address specification.\n           The address type (InetAddressType)\
    \ that relates to\n           this object is specified by the corresponding value\n\
    \           of traceRouteCtlSourceAddressType.\"\n       DEFVAL { ''H }\n    \
    \   ::= { traceRouteCtlEntry 13 }\n    traceRouteCtlIfIndex OBJECT-TYPE\n    \
    \   SYNTAX      InterfaceIndexOrZero\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"Setting this object to an interface's\
    \ ifIndex prior\n           to starting a remote traceroute operation directs\n\
    \           the traceroute probes to be transmitted over the\n           specified\
    \ interface.  A value of zero for this object\n           implies that this option\
    \ is not enabled.\"\n       DEFVAL { 0 }\n       ::= { traceRouteCtlEntry 14 }\n\
    \    traceRouteCtlMiscOptions OBJECT-TYPE\n       SYNTAX      SnmpAdminString\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Enables an application to specify implementation-dependent\n   \
    \        options.\"\n       DEFVAL { ''H }\n       ::= { traceRouteCtlEntry 15\
    \ }\n    traceRouteCtlMaxFailures OBJECT-TYPE\n       SYNTAX      Unsigned32 (0..255)\n\
    \       UNITS       \"timeouts\"\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The value of this object indicates\
    \ the maximum number\n           of consecutive timeouts allowed before a remote\
    \ traceroute\n           request is terminated.  A value of either 255 (maximum\n\
    \           hop count/possible TTL value) or 0 indicates that the\n          \
    \ function of terminating a remote traceroute request when a\n           specific\
    \ number of consecutive timeouts are detected is\n           disabled.\"\n   \
    \    DEFVAL { 5 }\n       ::= { traceRouteCtlEntry 16 }\n    traceRouteCtlDontFragment\
    \ OBJECT-TYPE\n       SYNTAX         TruthValue\n       MAX-ACCESS     read-create\n\
    \       STATUS         current\n       DESCRIPTION\n           \"This object enables\
    \ setting of the don't fragment flag (DF)\n           in the IP header for a probe.\
    \  Use of this object enables\n           a manual PATH MTU test is performed.\"\
    \n       DEFVAL  { false }\n       ::= { traceRouteCtlEntry 17 }\n    traceRouteCtlInitialTtl\
    \ OBJECT-TYPE\n       SYNTAX         Unsigned32 (1..255)\n       MAX-ACCESS  \
    \   read-create\n       STATUS         current\n       DESCRIPTION\n         \
    \  \"The value of this object specifies the initial TTL value to\n           use.\
    \  This enables bypassing the initial (often well known)\n           portion of\
    \ a path.\"\n       DEFVAL { 1 }\n       ::= { traceRouteCtlEntry 18 }\n    traceRouteCtlFrequency\
    \  OBJECT-TYPE\n       SYNTAX      Unsigned32\n       UNITS       \"seconds\"\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The number of seconds to wait before repeating a\n           traceroute\
    \ test, as defined by the value of the\n           various objects in the corresponding\
    \ row.\n           After a single test is completed the number of seconds\n  \
    \         as defined by the value of traceRouteCtlFrequency MUST\n           elapse\
    \ before the next traceroute test is started.\n           A value of 0 for this\
    \ object implies that the test\n           as defined by the corresponding entry\
    \ will not be\n           repeated.\"\n       DEFVAL { 0 }\n       ::= { traceRouteCtlEntry\
    \ 19 }\n    traceRouteCtlStorageType OBJECT-TYPE\n       SYNTAX      StorageType\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The storage type for this conceptual row.\n           Conceptual\
    \ rows having the value 'permanent' need not\n           allow write-access to\
    \ any columnar objects in the row.\"\n       DEFVAL { nonVolatile }\n       ::=\
    \ { traceRouteCtlEntry 20 }\n    traceRouteCtlAdminStatus OBJECT-TYPE\n      \
    \ SYNTAX      INTEGER {\n                             enabled(1), -- operation\
    \ should be started\n                             disabled(2) -- operation should\
    \ be stopped\n                           }\n       MAX-ACCESS  read-create\n \
    \      STATUS      current\n       DESCRIPTION\n           \"Reflects the desired\
    \ state that an traceRouteCtlEntry\n           should be in:\n              enabled(1)\
    \  - Attempt to activate the test as defined by\n                            this\
    \ traceRouteCtlEntry.\n              disabled(2) - Deactivate the test as defined\
    \ by this\n                            traceRouteCtlEntry.\n           Refer to\
    \ the corresponding traceRouteResultsOperStatus to\n           determine the operational\
    \ state of the test defined by\n           this entry.\"\n        DEFVAL { disabled\
    \ }\n       ::= { traceRouteCtlEntry 21 }\n    traceRouteCtlDescr OBJECT-TYPE\n\
    \       SYNTAX      SnmpAdminString\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The purpose of this object is\
    \ to provide a\n           descriptive name of the remote traceroute\n       \
    \    test.\"\n       DEFVAL { ''H }\n       ::= { traceRouteCtlEntry 22 }\n  \
    \  traceRouteCtlMaxRows OBJECT-TYPE\n       SYNTAX      Unsigned32\n       UNITS\
    \       \"rows\"\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The maximum number of corresponding entries\
    \ allowed\n           in the traceRouteProbeHistoryTable.  An implementation\n\
    \           of this MIB will remove the oldest corresponding entry\n         \
    \  in the traceRouteProbeHistoryTable to allow the\n           addition of an\
    \ new entry once the number of\n           corresponding rows in the traceRouteProbeHistoryTable\n\
    \           reaches this value.\n           Old entries are not removed when a\
    \ new test is\n           started.  Entries are added to the\n           traceRouteProbeHistoryTable\
    \ until traceRouteCtlMaxRows\n           is reached before entries begin to be\
    \ removed.\n           A value of 0 for this object disables creation of\n   \
    \        traceRouteProbeHistoryTable entries.\"\n       DEFVAL      { 50 }\n \
    \      ::= { traceRouteCtlEntry 23 }\n    traceRouteCtlTrapGeneration OBJECT-TYPE\n\
    \       SYNTAX      BITS {\n                     pathChange(0),\n            \
    \         testFailure(1),\n                     testCompletion(2)\n          \
    \         }\n       MAX-ACCESS  read-create\n       STATUS      current\n    \
    \   DESCRIPTION\n           \"The value of this object determines when and whether\
    \ to\n           generate a notification for this entry:\n           pathChange(0)\
    \     - Generate a traceRoutePathChange\n               notification when the\
    \ current path varies from a\n               previously determined path.\n   \
    \        testFailure(1)    - Generate a traceRouteTestFailed\n               notification\
    \ when the full path to a target\n               can't be determined.\n      \
    \     testCompletion(2) - Generate a traceRouteTestCompleted\n               notification\
    \ when the path to a target has been\n               determined.\n           The\
    \ value of this object defaults to an empty set,\n           indicating that none\
    \ of the above options has been\n           selected.\"\n       DEFVAL { { } }\n\
    \       ::= { traceRouteCtlEntry 24 }\n    traceRouteCtlCreateHopsEntries OBJECT-TYPE\n\
    \       SYNTAX      TruthValue\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The current path for a traceroute\
    \ test is kept in the\n           traceRouteHopsTable on a per-hop basis when\
    \ the value of\n           this object is true(1).\"\n       DEFVAL { false }\n\
    \       ::= { traceRouteCtlEntry 25 }\n    traceRouteCtlType OBJECT-TYPE\n   \
    \    SYNTAX      OBJECT IDENTIFIER\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The value of this object is used\
    \ either to report or to\n           select the implementation method to be used\
    \ for\n           performing a traceroute operation.  The value of this\n    \
    \       object may be selected from\n           traceRouteImplementationTypeDomains.\n\
    \           Additional implementation types should be allocated as\n         \
    \  required by implementers of the DISMAN-TRACEROUTE-MIB\n           under their\
    \ enterprise specific registration point,\n           not beneath traceRouteImplementationTypeDomains.\"\
    \n       DEFVAL { traceRouteUsingUdpProbes }\n       ::= { traceRouteCtlEntry\
    \ 26 }\n    traceRouteCtlRowStatus OBJECT-TYPE\n       SYNTAX      RowStatus\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This object allows entries to be created and deleted\n         \
    \  in the traceRouteCtlTable.  Deletion of an entry in\n           this table\
    \ results in a deletion of all corresponding (same\n           traceRouteCtlOwnerIndex\
    \ and traceRouteCtlTestName\n           index values) traceRouteResultsTable,\n\
    \           traceRouteProbeHistoryTable, and traceRouteHopsTable\n           entries.\n\
    \           A value MUST be specified for traceRouteCtlTargetAddress\n       \
    \    prior to acceptance of a transition to active(1) state.\n           When\
    \ a value for pingCtlTargetAddress is set,\n           the value of object pingCtlRowStatus\
    \ changes\n           from notReady(3) to notInService(2).\n           Activation\
    \ of a remote traceroute operation is\n           controlled via traceRouteCtlAdminStatus,\
    \ and not\n           by transitioning of this object's value to active(1).\n\
    \           Transitions in and out of active(1) state are not\n           allowed\
    \ while an entry's traceRouteResultsOperStatus\n           is active(1), with\
    \ the exception that deletion of\n           an entry in this table by setting\
    \ its RowStatus\n           object to destroy(6) will stop an active\n       \
    \    traceroute operation.\n           The operational state of an traceroute\
    \ operation\n           can be determined by examination of the corresponding\n\
    \           traceRouteResultsOperStatus object.\"\n       REFERENCE\n        \
    \   \"See definition of RowStatus in RFC 2579, 'Textual\n           Conventions\
    \ for SMIv2.'\"\n       ::= { traceRouteCtlEntry 27 }\n    -- Traceroute Results\
    \ Table\n    traceRouteResultsTable OBJECT-TYPE\n       SYNTAX      SEQUENCE OF\
    \ TraceRouteResultsEntry\n       MAX-ACCESS  not-accessible\n       STATUS   \
    \   current\n       DESCRIPTION\n           \"Defines the Remote Operations Traceroute\
    \ Results Table for\n           keeping track of the status of a traceRouteCtlEntry.\n\
    \           An entry is added to the traceRouteResultsTable when an\n        \
    \   traceRouteCtlEntry is started by successful transition\n           of its\
    \ traceRouteCtlAdminStatus object to enabled(1).\n           If the object traceRouteCtlAdminStatus\
    \ already has the value\n           enabled(1), and if the corresponding\n   \
    \        traceRouteResultsOperStatus object has the value\n           completed(3),\
    \ then successfully writing enabled(1) to the\n           object traceRouteCtlAdminStatus\
    \ re-initializes the already\n           existing entry in the traceRouteResultsTable.\
    \  The values of\n           objects in the re-initialized entry are the same\
    \ as\n           the values of objects in a new entry would be.\n           An\
    \ entry is removed from the traceRouteResultsTable when\n           its corresponding\
    \ traceRouteCtlEntry is deleted.\"\n      ::= { traceRouteObjects 3 }\n    traceRouteResultsEntry\
    \ OBJECT-TYPE\n       SYNTAX      TraceRouteResultsEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Defines an entry\
    \ in the traceRouteResultsTable.  The\n           traceRouteResultsTable has the\
    \ same indexing as the\n           traceRouteCtlTable so that a traceRouteResultsEntry\n\
    \           corresponds to the traceRouteCtlEntry that caused it to\n        \
    \   be created.\"\n       INDEX {\n               traceRouteCtlOwnerIndex,\n \
    \              traceRouteCtlTestName\n             }\n       ::= { traceRouteResultsTable\
    \ 1 }\n    TraceRouteResultsEntry ::=\n       SEQUENCE {\n         traceRouteResultsOperStatus\
    \       INTEGER,\n         traceRouteResultsCurHopCount      Gauge32,\n      \
    \   traceRouteResultsCurProbeCount    Gauge32,\n         traceRouteResultsIpTgtAddrType\
    \    InetAddressType,\n         traceRouteResultsIpTgtAddr        InetAddress,\n\
    \         traceRouteResultsTestAttempts     Gauge32,\n         traceRouteResultsTestSuccesses\
    \    Gauge32,\n         traceRouteResultsLastGoodPath     DateAndTime\n      \
    \ }\n    traceRouteResultsOperStatus OBJECT-TYPE\n       SYNTAX      INTEGER {\n\
    \                             enabled(1),  -- test is in progress\n          \
    \                   disabled(2), -- test has stopped\n                       \
    \      completed(3) -- test is completed\n                           }\n     \
    \  MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n   \
    \        \"Reflects the operational state of an traceRouteCtlEntry:\n        \
    \      enabled(1)   - Test is active.\n              disabled(2)  - Test has stopped.\n\
    \              completed(3) - Test is completed.\"\n       ::= { traceRouteResultsEntry\
    \ 1 }\n    traceRouteResultsCurHopCount OBJECT-TYPE\n       SYNTAX      Gauge32\n\
    \       UNITS       \"hops\"\n       MAX-ACCESS  read-only\n       STATUS    \
    \  current\n       DESCRIPTION\n           \"Reflects the current TTL value (from\
    \ 1 to\n           255) for a remote traceroute operation.\n           Maximum\
    \ TTL value is determined by\n           traceRouteCtlMaxTtl.\"\n       ::= {\
    \ traceRouteResultsEntry 2 }\n    traceRouteResultsCurProbeCount OBJECT-TYPE\n\
    \       SYNTAX      Gauge32\n       UNITS       \"probes\"\n       MAX-ACCESS\
    \  read-only\n       STATUS      current\n       DESCRIPTION\n           \"Reflects\
    \ the current probe count (1..10) for\n           a remote traceroute operation.\
    \  The maximum\n           probe count is determined by\n           traceRouteCtlProbesPerHop.\"\
    \n       ::= { traceRouteResultsEntry 3 }\n    traceRouteResultsIpTgtAddrType\
    \ OBJECT-TYPE\n       SYNTAX      InetAddressType\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object indicates\
    \ the type of address stored\n           in the corresponding traceRouteResultsIpTgtAddr\n\
    \           object.\"\n       ::= { traceRouteResultsEntry 4 }\n    traceRouteResultsIpTgtAddr\
    \ OBJECT-TYPE\n       SYNTAX      InetAddress\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object reports\
    \ the IP address associated\n           with a traceRouteCtlTargetAddress value\
    \ when the\n           destination address is specified as a DNS name.\n     \
    \      The value of this object should be a zero-length\n           octet string\
    \ when a DNS name is not specified or\n           when a specified DNS name fails\
    \ to resolve.\"\n       ::= { traceRouteResultsEntry 5 }\n    traceRouteResultsTestAttempts\
    \ OBJECT-TYPE\n       SYNTAX      Gauge32\n       UNITS       \"tests\"\n    \
    \   MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n  \
    \         \"The current number of attempts to determine a path\n           to\
    \ a target.  The value of this object MUST be started\n           at 0.\"\n  \
    \     ::= { traceRouteResultsEntry 6 }\n    traceRouteResultsTestSuccesses OBJECT-TYPE\n\
    \       SYNTAX      Gauge32\n       UNITS       \"tests\"\n       MAX-ACCESS \
    \ read-only\n       STATUS      current\n       DESCRIPTION\n           \"The\
    \ current number of attempts to determine a path\n           to a target that\
    \ have succeeded.  The value of this\n           object MUST be reported as 0\
    \ when no attempts have\n           succeeded.\"\n       ::= { traceRouteResultsEntry\
    \ 7 }\n    traceRouteResultsLastGoodPath OBJECT-TYPE\n       SYNTAX      DateAndTime\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The date and time when the last complete path\n           was determined.\
    \  A path is complete if responses\n           were received or timeout occurred\
    \ for each hop on\n           the path; i.e., for each TTL value from the value\n\
    \           of the corresponding traceRouteCtlInitialTtl object\n           up\
    \ to the end of the path or (if no reply from the\n           target IP address\
    \ was received) up to the value of\n           the corresponding traceRouteCtlMaxTtl\
    \ object.\"\n       ::= { traceRouteResultsEntry 8 }\n    -- Trace Route Probe\
    \ History Table\n    traceRouteProbeHistoryTable OBJECT-TYPE\n       SYNTAX  \
    \    SEQUENCE OF TraceRouteProbeHistoryEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Defines the Remote\
    \ Operations Traceroute Results Table\n           for storing the results of a\
    \ traceroute operation.\n           An implementation of this MIB will remove\
    \ the oldest\n           entry in the traceRouteProbeHistoryTable of the\n   \
    \        corresponding entry in the traceRouteCtlTable to allow\n           the\
    \ addition of a new entry once the number of rows in\n           the traceRouteProbeHistoryTable\
    \ reaches the value specified\n           by traceRouteCtlMaxRows for the corresponding\
    \ entry in the\n           traceRouteCtlTable.\"\n      ::= { traceRouteObjects\
    \ 4 }\n    traceRouteProbeHistoryEntry OBJECT-TYPE\n       SYNTAX      TraceRouteProbeHistoryEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Defines a table for storing the results of a traceroute\n      \
    \     operation.  Entries in this table are limited by\n           the value of\
    \ the corresponding traceRouteCtlMaxRows\n           object.\n           The first\
    \ two index elements identify the\n           traceRouteCtlEntry that a traceRouteProbeHistoryEntry\n\
    \           belongs to.  The third index element selects a single\n          \
    \ traceroute operation result.  The fourth and fifth indexes\n           select\
    \ the hop and the probe for a particular\n           traceroute operation.\"\n\
    \       INDEX {\n                traceRouteCtlOwnerIndex,\n                traceRouteCtlTestName,\n\
    \                traceRouteProbeHistoryIndex,\n                traceRouteProbeHistoryHopIndex,\n\
    \                traceRouteProbeHistoryProbeIndex\n             }\n       ::=\
    \ { traceRouteProbeHistoryTable 1 }\n    TraceRouteProbeHistoryEntry ::=\n   \
    \    SEQUENCE {\n         traceRouteProbeHistoryIndex         Unsigned32,\n  \
    \       traceRouteProbeHistoryHopIndex      Unsigned32,\n         traceRouteProbeHistoryProbeIndex\
    \    Unsigned32,\n         traceRouteProbeHistoryHAddrType     InetAddressType,\n\
    \         traceRouteProbeHistoryHAddr         InetAddress,\n         traceRouteProbeHistoryResponse\
    \      Unsigned32,\n         traceRouteProbeHistoryStatus        OperationResponseStatus,\n\
    \         traceRouteProbeHistoryLastRC        Integer32,\n         traceRouteProbeHistoryTime\
    \          DateAndTime\n       }\n    traceRouteProbeHistoryIndex OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32 (1..'ffffffff'h)\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"An entry in this\
    \ table is created when the result of\n           a traceroute probe is determined.\
    \  The initial 2 instance\n           identifier index values identify the traceRouteCtlEntry\n\
    \           that a probe result (traceRouteProbeHistoryEntry) belongs\n      \
    \     to.  An entry is removed from this table when\n           its corresponding\
    \ traceRouteCtlEntry is deleted.\n           An implementation MUST start assigning\n\
    \           traceRouteProbeHistoryIndex values at 1 and wrap after\n         \
    \  exceeding the maximum possible value, as defined by the\n           limit of\
    \ this object ('ffffffff'h).\"\n       ::= { traceRouteProbeHistoryEntry 1 }\n\
    \    traceRouteProbeHistoryHopIndex OBJECT-TYPE\n       SYNTAX      Unsigned32\
    \ (1..255)\n       MAX-ACCESS  not-accessible\n       STATUS      current\n  \
    \     DESCRIPTION\n          \"Indicates which hop in a traceroute path the probe's\n\
    \          results are for.  The value of this object is initially\n         \
    \ determined by the value of traceRouteCtlInitialTtl.\"\n       ::= { traceRouteProbeHistoryEntry\
    \ 2 }\n    traceRouteProbeHistoryProbeIndex OBJECT-TYPE\n       SYNTAX      Unsigned32\
    \ (1..10)\n       MAX-ACCESS  not-accessible\n       STATUS      current\n   \
    \    DESCRIPTION\n          \"Indicates the index of a probe for a particular\n\
    \          hop in a traceroute path.  The number of probes per\n          hop\
    \ is determined by the value of the corresponding\n          traceRouteCtlProbesPerHop\
    \ object.\"\n       ::= { traceRouteProbeHistoryEntry 3 }\n    traceRouteProbeHistoryHAddrType\
    \ OBJECT-TYPE\n       SYNTAX      InetAddressType\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This objects indicates\
    \ the type of address stored\n           in the corresponding traceRouteProbeHistoryHAddr\n\
    \           object.\"\n       ::= { traceRouteProbeHistoryEntry 4 }\n    traceRouteProbeHistoryHAddr\
    \ OBJECT-TYPE\n       SYNTAX      InetAddress\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n          \"The address of a\
    \ hop in a traceroute path.  This object\n          is not allowed to be a DNS\
    \ name.  The value of the\n          corresponding object, traceRouteProbeHistoryHAddrType,\n\
    \          indicates this object's IP address type.\"\n       ::= { traceRouteProbeHistoryEntry\
    \ 5 }\n    traceRouteProbeHistoryResponse OBJECT-TYPE\n       SYNTAX      Unsigned32\n\
    \       UNITS       \"milliseconds\"\n       MAX-ACCESS  read-only\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The amount of time measured in\
    \ milliseconds from when\n           a probe was sent to when its response was\
    \ received or\n           when it timed out.  The value of this object is reported\n\
    \           as 0 when it is not possible to transmit a probe.\"\n       ::= {\
    \ traceRouteProbeHistoryEntry 6 }\n    traceRouteProbeHistoryStatus OBJECT-TYPE\n\
    \       SYNTAX      OperationResponseStatus\n       MAX-ACCESS  read-only\n  \
    \     STATUS      current\n       DESCRIPTION\n           \"The result of a traceroute\
    \ operation made by a remote\n           host for a particular probe.\"\n    \
    \   ::= { traceRouteProbeHistoryEntry 7 }\n    traceRouteProbeHistoryLastRC OBJECT-TYPE\n\
    \       SYNTAX      Integer32\n       MAX-ACCESS  read-only\n       STATUS   \
    \   current\n       DESCRIPTION\n           \"The last implementation-method-specific\
    \ reply code received.\n           Traceroute is usually implemented by transmitting\
    \ a series of\n           probe packets with increasing time-to-live values. \
    \ A probe\n           packet is a UDP datagram encapsulated into an IP packet.\n\
    \           Each hop in a path to the target (destination) host rejects\n    \
    \       the probe packets (probe's TTL too small, ICMP reply) until\n        \
    \   either the maximum TTL is exceeded or the target host is\n           received.\"\
    \n       ::= { traceRouteProbeHistoryEntry 8 }\n    traceRouteProbeHistoryTime\
    \ OBJECT-TYPE\n       SYNTAX      DateAndTime\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Timestamp for when\
    \ this probe's results were determined.\"\n       ::= { traceRouteProbeHistoryEntry\
    \ 9 }\n    -- Traceroute Hop Results Table\n    traceRouteHopsTable OBJECT-TYPE\n\
    \       SYNTAX      SEQUENCE OF TraceRouteHopsEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Defines the Remote\
    \ Operations Traceroute Hop Table for\n           keeping track of the results\
    \ of traceroute tests on a\n           per-hop basis.\"\n       ::= { traceRouteObjects\
    \ 5 }\n    traceRouteHopsEntry OBJECT-TYPE\n       SYNTAX      TraceRouteHopsEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Defines an entry in the traceRouteHopsTable.\n           The first\
    \ two index elements identify the\n           traceRouteCtlEntry that a traceRouteHopsEntry\n\
    \           belongs to.  The third index element,\n           traceRouteHopsHopIndex,\
    \ selects a\n           hop in a traceroute path.\"\n       INDEX {\n        \
    \       traceRouteCtlOwnerIndex,\n               traceRouteCtlTestName,\n    \
    \           traceRouteHopsHopIndex\n             }\n       ::= { traceRouteHopsTable\
    \ 1 }\n    TraceRouteHopsEntry ::=\n       SEQUENCE {\n           traceRouteHopsHopIndex\
    \         Unsigned32,\n           traceRouteHopsIpTgtAddressType InetAddressType,\n\
    \           traceRouteHopsIpTgtAddress     InetAddress,\n           traceRouteHopsMinRtt\
    \           Unsigned32,\n           traceRouteHopsMaxRtt           Unsigned32,\n\
    \           traceRouteHopsAverageRtt       Unsigned32,\n           traceRouteHopsRttSumOfSquares\
    \  Unsigned32,\n           traceRouteHopsSentProbes       Unsigned32,\n      \
    \     traceRouteHopsProbeResponses   Unsigned32,\n           traceRouteHopsLastGoodProbe\
    \    DateAndTime\n         }\n    traceRouteHopsHopIndex OBJECT-TYPE\n       SYNTAX\
    \      Unsigned32 (1..'ffffffff'h)\n       MAX-ACCESS  not-accessible\n      \
    \ STATUS      current\n       DESCRIPTION\n           \"Specifies the hop index\
    \ for a traceroute hop.  Values\n           for this object with respect to the\
    \ same\n           traceRouteCtlOwnerIndex and traceRouteCtlTestName\n       \
    \    MUST start at 1 and be given increasing values for\n           subsequent\
    \ hops.  The value of traceRouteHopsHopIndex is not\n           necessarily the\
    \ number of the hop on the traced path.\n           The traceRouteHopsTable keeps\
    \ the current traceroute\n           path per traceRouteCtlEntry if enabled by\n\
    \           setting the corresponding traceRouteCtlCreateHopsEntries\n       \
    \    to true(1).\n           All hops (traceRouteHopsTable entries) in a traceroute\n\
    \           path MUST be updated at the same time when a traceroute\n        \
    \   operation is completed.  Care needs to be applied when a path\n          \
    \ either changes or can't be determined.  The initial portion\n           of the\
    \ path, up to the first hop change, MUST retain the\n           same traceRouteHopsHopIndex\
    \ values.  The remaining portion\n           of the path SHOULD be assigned new\
    \ traceRouteHopsHopIndex\n           values.\"\n       ::= { traceRouteHopsEntry\
    \ 1 }\n    traceRouteHopsIpTgtAddressType OBJECT-TYPE\n       SYNTAX      InetAddressType\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This object indicates the type of address stored\n           in\
    \ the corresponding traceRouteHopsIpTgtAddress\n           object.\"\n       ::=\
    \ { traceRouteHopsEntry 2 }\n    traceRouteHopsIpTgtAddress OBJECT-TYPE\n    \
    \   SYNTAX      InetAddress\n       MAX-ACCESS  read-only\n       STATUS     \
    \ current\n       DESCRIPTION\n           \"This object reports the IP address\
    \ associated with\n           the hop.  A value for this object should be reported\n\
    \           as a numeric IP address, not as a DNS name.\n           The address\
    \ type (InetAddressType) that relates to\n           this object is specified\
    \ by the corresponding value\n           of pingCtlSourceAddressType.\"\n    \
    \   ::= { traceRouteHopsEntry 3 }\n    traceRouteHopsMinRtt OBJECT-TYPE\n    \
    \   SYNTAX      Unsigned32\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The minimum traceroute round-trip-time (RTT)\
    \ received for\n           this hop.  A value of 0 for this object implies that\
    \ no\n           RTT has been received.\"\n       ::= { traceRouteHopsEntry 4\
    \ }\n    traceRouteHopsMaxRtt OBJECT-TYPE\n       SYNTAX      Unsigned32\n   \
    \    MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n \
    \          \"The maximum traceroute round-trip-time (RTT) received for\n     \
    \      this hop.  A value of 0 for this object implies that no\n           RTT\
    \ has been received.\"\n       ::= { traceRouteHopsEntry 5 }\n    traceRouteHopsAverageRtt\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32\n       MAX-ACCESS  read-only\n \
    \      STATUS      current\n       DESCRIPTION\n           \"The current average\
    \ traceroute round-trip-time (RTT) for\n           this hop.\"\n       ::= { traceRouteHopsEntry\
    \ 6 }\n    traceRouteHopsRttSumOfSquares OBJECT-TYPE\n       SYNTAX      Unsigned32\n\
    \       MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This object contains the sum of the squares of all\n           round-trip-times\
    \ received for this hop.  Its purpose is\n           to enable standard deviation\
    \ calculation.\"\n       ::= { traceRouteHopsEntry 7 }\n    traceRouteHopsSentProbes\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32\n       MAX-ACCESS  read-only\n \
    \      STATUS      current\n       DESCRIPTION\n           \"The value of this\
    \ object reflects the number of probes sent\n           for this hop during this\
    \ traceroute test.  The value of this\n           object should start at 0.\"\n\
    \       ::= { traceRouteHopsEntry 8 }\n    traceRouteHopsProbeResponses OBJECT-TYPE\n\
    \       SYNTAX      Unsigned32\n       MAX-ACCESS  read-only\n       STATUS  \
    \    current\n       DESCRIPTION\n           \"Number of responses received for\
    \ this hop during this\n           traceroute test.  This value of this object\
    \ should start\n           at 0.\"\n       ::= { traceRouteHopsEntry 9 }\n   \
    \ traceRouteHopsLastGoodProbe OBJECT-TYPE\n       SYNTAX      DateAndTime\n  \
    \     MAX-ACCESS  read-only\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Date and time at which the last response was received for a\n  \
    \          probe for this hop during this traceroute test.\"\n       ::= { traceRouteHopsEntry\
    \ 10 }\n    -- Notification Definition section\n    traceRoutePathChange NOTIFICATION-TYPE\n\
    \         OBJECTS {\n           traceRouteCtlTargetAddressType,\n           traceRouteCtlTargetAddress,\n\
    \           traceRouteResultsIpTgtAddrType,\n           traceRouteResultsIpTgtAddr\n\
    \         }\n         STATUS  current\n         DESCRIPTION\n             \"The\
    \ path to a target has changed.\"\n         ::= { traceRouteNotifications 1 }\n\
    \    traceRouteTestFailed NOTIFICATION-TYPE\n         OBJECTS {\n           traceRouteCtlTargetAddressType,\n\
    \           traceRouteCtlTargetAddress,\n           traceRouteResultsIpTgtAddrType,\n\
    \           traceRouteResultsIpTgtAddr\n         }\n         STATUS  current\n\
    \         DESCRIPTION\n             \"Could not determine the path to a target.\"\
    \n         ::= { traceRouteNotifications 2 }\n    traceRouteTestCompleted NOTIFICATION-TYPE\n\
    \         OBJECTS {\n           traceRouteCtlTargetAddressType,\n           traceRouteCtlTargetAddress,\n\
    \           traceRouteResultsIpTgtAddrType,\n           traceRouteResultsIpTgtAddr\n\
    \         }\n         STATUS  current\n         DESCRIPTION\n             \"The\
    \ path to a target has just been determined.\"\n         ::= { traceRouteNotifications\
    \ 3 }\n    -- Conformance information\n    -- Compliance statements\n    traceRouteCompliances\
    \ OBJECT IDENTIFIER\n         ::= { traceRouteConformance 1 }\n    traceRouteGroups\
    \      OBJECT IDENTIFIER\n         ::= { traceRouteConformance 2 }\n    -- Compliance\
    \ statements\n    traceRouteFullCompliance MODULE-COMPLIANCE\n       STATUS  current\n\
    \       DESCRIPTION\n               \"The compliance statement for SNMP entities\
    \ that\n               fully implement the DISMAN-TRACEROUTE-MIB.\"\n       MODULE\
    \  -- this module\n           MANDATORY-GROUPS {\n                           \
    \    traceRouteMinimumGroup,\n                               traceRouteCtlRowStatusGroup,\n\
    \                               traceRouteHistoryGroup\n                     \
    \       }\n           GROUP traceRouteHopsTableGroup\n           DESCRIPTION\n\
    \               \"This group lists the objects that make up a\n              \
    \ traceRouteHopsEntry.  Support of the traceRouteHopsTable\n               is\
    \ optional.\"\n           GROUP traceRouteNotificationsGroup\n           DESCRIPTION\n\
    \               \"This group defines a collection of optional\n              \
    \ notifications.\"\n           OBJECT traceRouteMaxConcurrentRequests\n      \
    \     MIN-ACCESS  read-only\n           DESCRIPTION\n               \"The agent\
    \ is not required to support SET\n               operations to this object.\"\n\
    \           OBJECT traceRouteCtlByPassRouteTable\n           MIN-ACCESS  read-only\n\
    \           DESCRIPTION\n               \"Write access to this object is not required\
    \ by\n               implementations that are not capable of its\n           \
    \    implementation.  The function represented by this\n               object\
    \ is implementable if the setsockopt\n               SOL_SOCKET SO_DONTROUTE option\
    \ is supported.\"\n           OBJECT traceRouteCtlDSField\n           MIN-ACCESS\
    \  read-only\n           DESCRIPTION\n               \"Write access is not required.\
    \  If write access is\n               not supported, return a 0 as the value of\
    \ this object.\n               A value of 0 implies that the function represented\
    \ by\n               this option is not supported.\"\n           OBJECT traceRouteCtlSourceAddressType\n\
    \           SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n       \
    \    MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write access\
    \ to this object is not required by\n               implementations that are not\
    \ capable of binding the\n               send socket with a source address.  An\
    \ implementation\n               is only required to support IPv4 and IPv6 addresses.\"\
    \n           OBJECT traceRouteCtlSourceAddress\n           SYNTAX  InetAddress\
    \ (SIZE(0|4|16))\n           MIN-ACCESS  read-only\n           DESCRIPTION\n \
    \              \"Write access to this object is not required by\n            \
    \   implementations that are not capable of binding the\n               send socket\
    \ with a source address.  An implementation\n               is only required to\
    \ support IPv4 and IPv6 addresses.\"\n           OBJECT traceRouteCtlIfIndex\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  If write access is\n               not supported, return\
    \ a 0 as the value of this object.\n               A value of 0 implies that the\
    \ function represented by\n               this option is not supported.\"\n  \
    \         OBJECT traceRouteCtlMiscOptions\n           MIN-ACCESS  read-only\n\
    \           DESCRIPTION\n               \"Support of this object is optional.\
    \  If not\n               supporting, do not allow write access and return a\n\
    \               zero-length octet string as the value of the object.\"\n     \
    \      OBJECT traceRouteCtlStorageType\n           MIN-ACCESS  read-only\n   \
    \        DESCRIPTION\n               \"Write access is not required.  It is also\
    \ allowed\n               that implementations support only the volatile(2)\n\
    \               StorageType enumeration.\"\n           OBJECT traceRouteCtlType\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  In addition, the only\n               value that is\
    \ RECOMMENDED to be supported by an\n               implementation is traceRouteUsingUdpProbes.\"\
    \n           OBJECT traceRouteResultsIpTgtAddrType\n           SYNTAX  InetAddressType\
    \ { unknown(0), ipv4(1), ipv6(2) }\n           DESCRIPTION\n               \"\
    An implementation should only support IPv4 and\n               globally unique\
    \ IPv6 address values for this object.\"\n           OBJECT traceRouteResultsIpTgtAddr\n\
    \           SYNTAX  InetAddress (SIZE(0|4|16))\n           DESCRIPTION\n     \
    \          \"An implementation should only support IPv4 and\n               globally\
    \ unique IPv6 address values for this object.\"\n           OBJECT traceRouteResultsLastGoodPath\n\
    \           DESCRIPTION\n               \"If the traceRouteHopsTableGroup is implemented,\
    \ then\n               this object is mandatory for implementations that have\n\
    \               access to a system clock and that are capable of setting\n   \
    \            the values for DateAndTime objects.  It is RECOMMENDED\n        \
    \       that when this object is not supported its values\n               be reported\
    \ as '0000000000000000'H.\"\n           OBJECT traceRouteProbeHistoryHAddrType\n\
    \           SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n       \
    \    DESCRIPTION\n               \"An implementation should only support IPv4\
    \ and\n               globally unique IPv6 address values for this object.\"\n\
    \           OBJECT traceRouteProbeHistoryHAddr\n           SYNTAX  InetAddress\
    \ (SIZE(0|4|16))\n           DESCRIPTION\n               \"An implementation should\
    \ only support IPv4 and\n               globally unique IPv6 address values for\
    \ this object.\"\n           OBJECT traceRouteProbeHistoryTime\n           DESCRIPTION\n\
    \               \"This object is mandatory for implementations that have\n   \
    \            access to a system clock and that are capable of setting\n      \
    \         the values for DateAndTime objects.  It is RECOMMENDED\n           \
    \    that when this object is not supported its values\n               be reported\
    \ as '0000000000000000'H.\"\n           OBJECT traceRouteHopsIpTgtAddressType\n\
    \           SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n       \
    \    DESCRIPTION\n               \"An implementation should only support IPv4\
    \ and\n               globally unique IPv6 address values for this object.\"\n\
    \           OBJECT traceRouteHopsIpTgtAddress\n           SYNTAX  InetAddress\
    \ (SIZE(0|4|16))\n           DESCRIPTION\n               \"An implementation should\
    \ only support IPv4 and\n               globally unique IPv6 address values for\
    \ this object.\"\n           OBJECT traceRouteHopsLastGoodProbe\n           DESCRIPTION\n\
    \               \"This object is mandatory for implementations that have\n   \
    \            access to a system clock and that are capable of setting\n      \
    \         the values for DateAndTime objects.  It is RECOMMENDED\n           \
    \    that when this object is not supported its values\n               be reported\
    \ as '0000000000000000'H.\"\n       ::= { traceRouteCompliances 2 }\n    traceRouteMinimumCompliance\
    \ MODULE-COMPLIANCE\n       STATUS  current\n       DESCRIPTION\n            \
    \   \"The minimum compliance statement for SNMP entities\n               which\
    \ implement the minimal subset of the\n               DISMAN-TRACEROUTE-MIB. \
    \ Implementors might choose this\n               subset for small devices with\
    \ limited resources.\"\n       MODULE  -- this module\n           MANDATORY-GROUPS\
    \ { traceRouteMinimumGroup }\n           GROUP traceRouteCtlRowStatusGroup\n \
    \          DESCRIPTION\n               \"A compliant implementation does not have\
    \ to implement\n               the traceRouteCtlRowStatusGroup.\"\n          \
    \ GROUP traceRouteHistoryGroup\n           DESCRIPTION\n               \"A compliant\
    \ implementation does not have to implement\n               the traceRouteHistoryGroup.\"\
    \n           GROUP traceRouteHopsTableGroup\n           DESCRIPTION\n        \
    \       \"This group lists the objects that make up a\n               traceRouteHopsEntry.\
    \  Support of the traceRouteHopsTable\n               is optional.\"\n       \
    \    GROUP traceRouteNotificationsGroup\n           DESCRIPTION\n            \
    \   \"This group defines a collection of optional\n               notifications.\"\
    \n           OBJECT traceRouteMaxConcurrentRequests\n           MIN-ACCESS  read-only\n\
    \           DESCRIPTION\n               \"The agent is not required to support\
    \ SET\n               operations to this object.\"\n           OBJECT traceRouteCtlByPassRouteTable\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  If write access is\n               not supported, return\
    \ a false(2) as the value of this\n               object.  A value of false(2)\
    \ means that the function\n               represented by this option is not supported.\"\
    \n           OBJECT traceRouteCtlDSField\n           MIN-ACCESS  read-only\n \
    \          DESCRIPTION\n               \"Write access is not required.  If write\
    \ access is\n               not supported, return a 0 as the value of this object.\n\
    \               A value of 0 implies that the function represented by\n      \
    \         this option is not supported.\"\n           OBJECT traceRouteCtlSourceAddressType\n\
    \           SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n       \
    \    MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write access\
    \ to this object is not required by\n               implementations that are not\
    \ capable of binding the\n               send socket with a source address.  An\
    \ implementation\n               is only required to support IPv4 and IPv6 addresses.\"\
    \n           OBJECT traceRouteCtlSourceAddress\n           SYNTAX  InetAddress\
    \ (SIZE(0|4|16))\n           MIN-ACCESS  read-only\n           DESCRIPTION\n \
    \              \"Write access to this object is not required by\n            \
    \   implementations that are not capable of binding the\n               send socket\
    \ with a source address.  An implementation\n               is only required to\
    \ support IPv4 and IPv6 addresses.\"\n           OBJECT traceRouteCtlIfIndex\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  If write access is\n               not supported, return\
    \ a 0 as the value of this object.\n               A value of 0 implies that the\
    \ function represented by\n               this option is not supported.\"\n  \
    \         OBJECT traceRouteCtlMiscOptions\n           MIN-ACCESS  read-only\n\
    \           DESCRIPTION\n               \"Support of this object is optional.\
    \  If not\n               supporting, do not allow write access, and return a\n\
    \               zero-length octet string as the value of the object.\"\n     \
    \      OBJECT traceRouteCtlDontFragment\n           MIN-ACCESS  read-only\n  \
    \         DESCRIPTION\n               \"Write access is not required.  If write\
    \ access is\n               not supported, return a false(2) as the value of this\n\
    \               object.  A value of false(2) means that the function\n       \
    \        represented by this option is not supported.\"\n           OBJECT traceRouteCtlInitialTtl\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  If write access is\n               not supported, return\
    \ a 1 as the value of this object.\"\n           OBJECT traceRouteCtlFrequency\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  If write access is\n               not supported, return\
    \ a 0 as the value of this object.\n               A value of 0 implies that the\
    \ function represented by\n               this option is not supported.\"\n  \
    \         OBJECT traceRouteCtlStorageType\n           MIN-ACCESS  read-only\n\
    \           DESCRIPTION\n               \"Write access is not required.  It is\
    \ also allowed\n               that implementations support only the volatile(2)\n\
    \               StorageType enumeration.\"\n           OBJECT traceRouteCtlDescr\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"The\
    \ agent is not required to support set\n               operations to this object.\"\
    \n           OBJECT traceRouteCtlMaxRows\n           MIN-ACCESS  read-only\n \
    \          DESCRIPTION\n               \"Write access is not required.  If the\n\
    \               traceRouteHistoryGroup is not implemented, then write\n      \
    \         access to this object MUST be disabled, and the object\n           \
    \    MUST return a value of 0 when retrieved.\"\n           OBJECT traceRouteCtlTrapGeneration\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  If the\n               traceRouteNotificationsGroup\
    \ is not implemented, then\n               write access to this object MUST be\
    \ disabled, and the\n               object MUST return a value with no bit set\
    \ when\n               retrieved.  No bit set indicates that no notification\n\
    \               is generated.\"\n           OBJECT traceRouteCtlCreateHopsEntries\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  If the\n               traceRouteHopsTableGroup is\
    \ not implemented, then\n               write access to this object MUST be disabled,\
    \ and the\n               object MUST return a value of false(2) when retrieved.\"\
    \n           OBJECT traceRouteCtlType\n           MIN-ACCESS  read-only\n    \
    \       DESCRIPTION\n               \"Write access is not required.  In addition,\
    \ the only\n               value that is RECOMMENDED to be supported by an\n \
    \              implementation is traceRouteUsingUdpProbes.\"\n           OBJECT\
    \ traceRouteResultsIpTgtAddrType\n           SYNTAX  InetAddressType { unknown(0),\
    \ ipv4(1), ipv6(2) }\n           DESCRIPTION\n               \"An implementation\
    \ should only support IPv4 and\n               globally unique IPv6 address values\
    \ for this object.\"\n           OBJECT traceRouteResultsIpTgtAddr\n         \
    \  SYNTAX  InetAddress (SIZE(0|4|16))\n           DESCRIPTION\n              \
    \ \"An implementation should only support IPv4 and\n               globally unique\
    \ IPv6 address values for this object.\"\n           OBJECT traceRouteResultsLastGoodPath\n\
    \           DESCRIPTION\n               \"This object is mandatory for implementations\
    \ that have\n               access to a system clock and that are capable of setting\n\
    \               the values for DateAndTime objects.  It is RECOMMENDED\n     \
    \          that when this object is not supported its values\n               be\
    \ reported as '0000000000000000'H.\"\n           OBJECT traceRouteProbeHistoryHAddrType\n\
    \           SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n       \
    \    DESCRIPTION\n               \"An implementation should only support IPv4\
    \ and\n               globally unique IPv6 address values for this object.\"\n\
    \           OBJECT traceRouteProbeHistoryHAddr\n           SYNTAX  InetAddress\
    \ (SIZE(0|4|16))\n           DESCRIPTION\n               \"An implementation should\
    \ only support IPv4 and\n               globally unique IPv6 address values for\
    \ this object.\"\n           OBJECT traceRouteProbeHistoryTime\n           DESCRIPTION\n\
    \               \"If the traceRouteHistoryGroup is implemented, then\n       \
    \        this object is mandatory for implementations that have\n            \
    \   access to a system clock and that are capable of setting\n               the\
    \ values for DateAndTime objects.  It is RECOMMENDED\n               that when\
    \ this object is not supported its values\n               be reported as '0000000000000000'H.\"\
    \n           OBJECT traceRouteHopsIpTgtAddressType\n           SYNTAX  InetAddressType\
    \ { unknown(0), ipv4(1), ipv6(2) }\n           DESCRIPTION\n               \"\
    An implementation should only support IPv4 and\n               globally unique\
    \ IPv6 address values for this object.\"\n           OBJECT traceRouteHopsIpTgtAddress\n\
    \           SYNTAX  InetAddress (SIZE(0|4|16))\n           DESCRIPTION\n     \
    \          \"An implementation should only support IPv4 and\n               globally\
    \ unique IPv6 address values for this object.\"\n           OBJECT traceRouteHopsLastGoodProbe\n\
    \           DESCRIPTION\n               \"If the traceRouteHopsTableGroup is implemented,\
    \ then\n               this object is mandatory for implementations that have\n\
    \               access to a system clock and that are capable of setting\n   \
    \            the values for DateAndTime objects.  It is RECOMMENDED\n        \
    \       that when this object is not supported its values\n               be reported\
    \ as '0000000000000000'H.\"\n       ::= { traceRouteCompliances 3 }\n    traceRouteCompliance\
    \ MODULE-COMPLIANCE\n       STATUS  deprecated\n       DESCRIPTION\n         \
    \      \"The compliance statement for the DISMAN-TRACEROUTE-MIB.\n           \
    \    This compliance statement has been deprecated because\n               the\
    \ traceRouteGroup and the traceRouteTimeStampGroup\n               have been split\
    \ and deprecated. The\n               traceRouteFullCompliance is semantically\
    \ identical to the\n               deprecated traceRouteCompliance statement.\"\
    \n       MODULE  -- this module\n           MANDATORY-GROUPS {\n             \
    \                  traceRouteGroup\n                             }\n         \
    \  GROUP traceRouteTimeStampGroup\n           DESCRIPTION\n               \"This\
    \ group is mandatory for implementations that have\n               access to a\
    \ system clock and that are capable of setting\n               the values for\
    \ DateAndTime objects.\"\n           GROUP traceRouteNotificationsGroup\n    \
    \       DESCRIPTION\n               \"This group defines a collection of optional\n\
    \               notifications.\"\n           GROUP traceRouteHopsTableGroup\n\
    \           DESCRIPTION\n               \"This group lists the objects that make\
    \ up a\n               traceRouteHopsEntry.  Support of the traceRouteHopsTable\n\
    \               is optional.\"\n           OBJECT traceRouteMaxConcurrentRequests\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"The\
    \ agent is not required to support SET\n               operations to this object.\"\
    \n           OBJECT traceRouteCtlByPassRouteTable\n           MIN-ACCESS  read-only\n\
    \           DESCRIPTION\n               \"This object is not required by implementations\
    \ that\n               are not capable of its implementation.  The function\n\
    \               represented by this object is implementable if the\n         \
    \      setsockopt SOL_SOCKET SO_DONTROUTE option is\n               supported.\"\
    \n           OBJECT traceRouteCtlSourceAddressType\n           SYNTAX  InetAddressType\
    \ { unknown(0), ipv4(1), ipv6(2) }\n           MIN-ACCESS  read-only\n       \
    \    DESCRIPTION\n               \"This object is not required by implementations\
    \ that\n               are not capable of binding the send socket with a\n   \
    \            source address.  An implementation is only required to\n        \
    \       support IPv4 and IPv6 addresses.\"\n           OBJECT traceRouteCtlSourceAddress\n\
    \           SYNTAX  InetAddress (SIZE(0|4|16))\n           MIN-ACCESS  read-only\n\
    \           DESCRIPTION\n               \"This object is not required by implementations\
    \ that\n               are not capable of binding the send socket with a\n   \
    \            source address.  An implementation is only required to\n        \
    \       support IPv4 and globally unique IPv6 addresses.\"\n           OBJECT\
    \ traceRouteCtlIfIndex\n           MIN-ACCESS  read-only\n           DESCRIPTION\n\
    \               \"Write access is not required.  When write access is\n      \
    \         not supported, return a 0 as the value of this object.\n           \
    \    A value of 0 implies that the function represented by\n               this\
    \ option is not supported.\"\n           OBJECT traceRouteCtlMiscOptions\n   \
    \        MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Support\
    \ of this object is optional.  When not\n               supporting, do not allow\
    \ write access, and return a\n               zero-length octet string as the value\
    \ of the object.\"\n           OBJECT traceRouteCtlStorageType\n           MIN-ACCESS\
    \  read-only\n           DESCRIPTION\n               \"Write access is not required.\
    \  It is also allowed\n              that implementations support only the volatile\n\
    \               StorageType enumeration.\"\n           OBJECT traceRouteCtlDSField\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"Write\
    \ access is not required.  When write access is\n               not supported,\
    \ return a 0 as the value of this object.\n               A value of 0 implies\
    \ that the function represented by\n               this option is not supported.\"\
    \n           OBJECT traceRouteCtlType\n           MIN-ACCESS  read-only\n    \
    \       DESCRIPTION\n               \"Write access is not required.  In addition,\
    \ the only\n               value that is RECOMMENDED to be supported by an\n \
    \              implementation is traceRouteUsingUdpProbes.\"\n           OBJECT\
    \ traceRouteResultsIpTgtAddrType\n           SYNTAX  InetAddressType { unknown(0),\
    \ ipv4(1), ipv6(2) }\n           DESCRIPTION\n               \"An implementation\
    \ should only support IPv4 and\n               globally unique IPv6 address values\
    \ for this object.\"\n           OBJECT traceRouteResultsIpTgtAddr\n         \
    \  SYNTAX  InetAddress (SIZE(0|4|16))\n           DESCRIPTION\n              \
    \ \"An implementation should only support IPv4 and\n               globally unique\
    \ IPv6 address values for this object.\"\n           OBJECT traceRouteProbeHistoryHAddrType\n\
    \           SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n       \
    \    DESCRIPTION\n               \"An implementation should only support IPv4\
    \ and\n               globally unique IPv6 address values for this object.\"\n\
    \           OBJECT traceRouteProbeHistoryHAddr\n           SYNTAX  InetAddress\
    \ (SIZE(0|4|16))\n           DESCRIPTION\n               \"An implementation should\
    \ only support IPv4 and\n               globally unique IPv6 address values for\
    \ this object.\"\n           OBJECT traceRouteHopsIpTgtAddressType\n         \
    \  SYNTAX  InetAddressType { unknown(0), ipv4(1), ipv6(2) }\n           DESCRIPTION\n\
    \               \"An implementation should only support IPv4 and\n           \
    \    globally unique IPv6 address values for this object.\"\n           OBJECT\
    \ traceRouteHopsIpTgtAddress\n           SYNTAX  InetAddress (SIZE(0|4|16))\n\
    \           DESCRIPTION\n               \"An implementation should only support\
    \ IPv4 and\n               globally unique IPv6 address values for this object.\"\
    \n       ::= { traceRouteCompliances 1 }\n    -- MIB groupings\n    traceRouteMinimumGroup\
    \ OBJECT-GROUP\n      OBJECTS {\n                traceRouteMaxConcurrentRequests,\n\
    \                traceRouteCtlTargetAddressType,\n                traceRouteCtlTargetAddress,\n\
    \                traceRouteCtlByPassRouteTable,\n                traceRouteCtlDataSize,\n\
    \                traceRouteCtlTimeOut,\n                traceRouteCtlProbesPerHop,\n\
    \                traceRouteCtlPort,\n                traceRouteCtlMaxTtl,\n  \
    \              traceRouteCtlDSField,\n                traceRouteCtlSourceAddressType,\n\
    \                traceRouteCtlSourceAddress,\n                traceRouteCtlIfIndex,\n\
    \                traceRouteCtlMiscOptions,\n                traceRouteCtlMaxFailures,\n\
    \                traceRouteCtlDontFragment,\n                traceRouteCtlInitialTtl,\n\
    \                traceRouteCtlFrequency,\n                traceRouteCtlStorageType,\n\
    \                traceRouteCtlAdminStatus,\n                traceRouteCtlMaxRows,\n\
    \                traceRouteCtlTrapGeneration,\n                traceRouteCtlDescr,\n\
    \                traceRouteCtlCreateHopsEntries,\n                traceRouteCtlType,\n\
    \                traceRouteResultsOperStatus,\n                traceRouteResultsCurHopCount,\n\
    \                traceRouteResultsCurProbeCount,\n                traceRouteResultsIpTgtAddrType,\n\
    \                traceRouteResultsIpTgtAddr,\n                traceRouteResultsTestAttempts,\n\
    \                traceRouteResultsTestSuccesses,\n                traceRouteResultsLastGoodPath\n\
    \             }\n      STATUS  current\n      DESCRIPTION\n          \"The group\
    \ of objects that constitute the remote traceroute\n          operation.\"\n \
    \     ::= { traceRouteGroups 5 }\n    traceRouteCtlRowStatusGroup OBJECT-GROUP\n\
    \      OBJECTS {\n                traceRouteCtlRowStatus\n             }\n   \
    \   STATUS  current\n      DESCRIPTION\n          \"The RowStatus object of the\
    \ traceRouteCtlTable.\"\n      ::= { traceRouteGroups 6 }\n    traceRouteHistoryGroup\
    \ OBJECT-GROUP\n      OBJECTS {\n                traceRouteProbeHistoryHAddrType,\n\
    \                traceRouteProbeHistoryHAddr,\n                traceRouteProbeHistoryResponse,\n\
    \                traceRouteProbeHistoryStatus,\n                traceRouteProbeHistoryLastRC,\n\
    \                traceRouteProbeHistoryTime\n              }\n      STATUS  current\n\
    \      DESCRIPTION\n          \"The group of objects that constitute the history\n\
    \          capability.\"\n       ::= { traceRouteGroups 7 }\n    traceRouteNotificationsGroup\
    \ NOTIFICATION-GROUP\n      NOTIFICATIONS {\n                traceRoutePathChange,\n\
    \                traceRouteTestFailed,\n                traceRouteTestCompleted\n\
    \             }\n      STATUS   current\n      DESCRIPTION\n          \"The notifications\
    \ that are required to be supported by\n          implementations of this MIB.\"\
    \n      ::= { traceRouteGroups 3 }\n    traceRouteHopsTableGroup OBJECT-GROUP\n\
    \      OBJECTS {\n                traceRouteHopsIpTgtAddressType,\n          \
    \      traceRouteHopsIpTgtAddress,\n                traceRouteHopsMinRtt,\n  \
    \              traceRouteHopsMaxRtt,\n                traceRouteHopsAverageRtt,\n\
    \                traceRouteHopsRttSumOfSquares,\n                traceRouteHopsSentProbes,\n\
    \                traceRouteHopsProbeResponses,\n                traceRouteHopsLastGoodProbe\n\
    \              }\n       STATUS   current\n       DESCRIPTION\n           \"The\
    \ group of objects that constitute the\n           traceRouteHopsTable.\"\n  \
    \   ::= { traceRouteGroups 4 }\n    traceRouteGroup OBJECT-GROUP\n      OBJECTS\
    \ {\n                traceRouteMaxConcurrentRequests,\n                traceRouteCtlTargetAddressType,\n\
    \                traceRouteCtlTargetAddress,\n                traceRouteCtlByPassRouteTable,\n\
    \                traceRouteCtlDataSize,\n                traceRouteCtlTimeOut,\n\
    \                traceRouteCtlProbesPerHop,\n                traceRouteCtlPort,\n\
    \                traceRouteCtlMaxTtl,\n                traceRouteCtlDSField,\n\
    \                traceRouteCtlSourceAddressType,\n                traceRouteCtlSourceAddress,\n\
    \                traceRouteCtlIfIndex,\n                traceRouteCtlMiscOptions,\n\
    \                traceRouteCtlMaxFailures,\n                traceRouteCtlDontFragment,\n\
    \                traceRouteCtlInitialTtl,\n                traceRouteCtlFrequency,\n\
    \                traceRouteCtlStorageType,\n                traceRouteCtlAdminStatus,\n\
    \                traceRouteCtlMaxRows,\n                traceRouteCtlTrapGeneration,\n\
    \                traceRouteCtlDescr,\n                traceRouteCtlCreateHopsEntries,\n\
    \                traceRouteCtlType,\n                traceRouteCtlRowStatus,\n\
    \                traceRouteResultsOperStatus,\n                traceRouteResultsCurHopCount,\n\
    \                traceRouteResultsCurProbeCount,\n                traceRouteResultsIpTgtAddrType,\n\
    \                traceRouteResultsIpTgtAddr,\n                traceRouteResultsTestAttempts,\n\
    \                traceRouteResultsTestSuccesses,\n                traceRouteProbeHistoryHAddrType,\n\
    \                traceRouteProbeHistoryHAddr,\n                traceRouteProbeHistoryResponse,\n\
    \                traceRouteProbeHistoryStatus,\n                traceRouteProbeHistoryLastRC\n\
    \             }\n      STATUS  deprecated\n      DESCRIPTION\n          \"The\
    \ group of objects that constitute the remote traceroute\n          operation.\"\
    \n      ::= { traceRouteGroups 1 }\n    traceRouteTimeStampGroup OBJECT-GROUP\n\
    \      OBJECTS {\n                traceRouteResultsLastGoodPath,\n           \
    \     traceRouteProbeHistoryTime\n              }\n      STATUS  deprecated\n\
    \      DESCRIPTION\n          \"The group of DateAndTime objects.\"\n       ::=\
    \ { traceRouteGroups 2 }\n   END\n"
- title: 4.3.  DISMAN-NSLOOKUP-MIB
  contents:
  - "4.3.  DISMAN-NSLOOKUP-MIB\n   DISMAN-NSLOOKUP-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n\
    \       MODULE-IDENTITY, OBJECT-TYPE,\n       Unsigned32, mib-2, Integer32\n \
    \          FROM SNMPv2-SMI                  -- RFC2578\n       RowStatus\n   \
    \        FROM SNMPv2-TC                   -- RFC2579\n       MODULE-COMPLIANCE,\
    \ OBJECT-GROUP\n           FROM SNMPv2-CONF                 -- RFC2580\n     \
    \  SnmpAdminString\n           FROM SNMP-FRAMEWORK-MIB          -- RFC3411\n \
    \      InetAddressType, InetAddress\n           FROM INET-ADDRESS-MIB;       \
    \    -- RFC4001\n    lookupMIB MODULE-IDENTITY\n       LAST-UPDATED \"200606130000Z\"\
    \         -- 13 June 2006\n       ORGANIZATION \"IETF Distributed Management Working\
    \ Group\"\n       CONTACT-INFO\n           \"Juergen Quittek\n           NEC Europe\
    \ Ltd.\n           Network Laboratories\n           Kurfuersten-Anlage 36\n  \
    \         69115 Heidelberg\n           Germany\n           Phone: +49 6221 4342-115\n\
    \           Email: quittek@netlab.nec.de\"\n       DESCRIPTION\n           \"\
    The Lookup MIB (DISMAN-NSLOOKUP-MIB) enables determination\n           of either\
    \ the name(s) corresponding to a host address or of\n           the address(es)\
    \ associated with a host name at a remote\n           host.\n           Copyright\
    \ (C) The Internet Society (2006).  This version of\n           this MIB module\
    \ is part of RFC 4560; see the RFC itself for\n           full legal notices.\"\
    \n        --  Revision history\n        REVISION     \"200606130000Z\"       \
    \  -- 13 June 2006\n        DESCRIPTION\n            \"Updated version, published\
    \ as RFC 4560.\n                - Replaced references to RFC 2575 by RFC 3415\n\
    \                - Replaced references to RFC 2571 by RFC 3411\n             \
    \   - Replaced references to RFC 2851 by RFC 4001\n                - Added value\
    \ enabled(1) to SYNTAX clause of\n                  lookupCtlOperStatus\n    \
    \            - Added lookupMinimumCompliance\n                - Defined semantics\
    \ of value 0 for object\n                  lookupPurgeTime\n                -\
    \ Added DEFVAL { unknown } to object\n                  lookupCtlTargetAddressType\
    \ OBJECT-TYPE\"\n        REVISION     \"200009210000Z\"         -- 21 September\
    \ 2000\n        DESCRIPTION\n            \"Initial version, published as RFC 2925.\"\
    \n       ::= { mib-2 82 }\n    -- Top level structure of the MIB\n    lookupObjects\
    \        OBJECT IDENTIFIER ::= { lookupMIB 1 }\n    lookupConformance    OBJECT\
    \ IDENTIFIER ::= { lookupMIB 2 }\n    -- Simple Object Definitions\n    lookupMaxConcurrentRequests\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32\n       UNITS       \"requests\"\n\
    \       MAX-ACCESS  read-write\n       STATUS      current\n       DESCRIPTION\n\
    \          \"The maximum number of concurrent active lookup requests\n       \
    \   that are allowed within an agent implementation.  A value\n          of 0\
    \ for this object implies that there is no limit for\n          the number of\
    \ concurrent active requests in effect.\n          The limit applies only to new\
    \ requests being activated.\n          When a new value is set, the agent will\
    \ continue processing\n          all the requests already active, even if their\
    \ number\n          exceed the limit just imposed.\"\n       DEFVAL { 10 }\n \
    \      ::= { lookupObjects 1 }\n    lookupPurgeTime OBJECT-TYPE\n       SYNTAX\
    \      Unsigned32 (0..86400)\n       UNITS       \"seconds\"\n       MAX-ACCESS\
    \  read-write\n       STATUS      current\n       DESCRIPTION\n          \"The\
    \ amount of time to wait before automatically\n          deleting an entry in\
    \ the lookupCtlTable and any\n          dependent lookupResultsTable entries\n\
    \          after the lookup operation represented by a\n          lookupCtlEntry\
    \ has been completed.\n          A lookupCtEntry is considered complete\n    \
    \      when its lookupCtlOperStatus object has a\n          value of completed(3).\n\
    \          A value of 0 indicates that automatic deletion\n          of entries\
    \ is disabled.\"\n       DEFVAL { 900 }  -- 15 minutes as default\n       ::=\
    \ { lookupObjects 2 }\n    -- Lookup Control Table\n    lookupCtlTable OBJECT-TYPE\n\
    \       SYNTAX      SEQUENCE OF LookupCtlEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Defines the Lookup\
    \ Control Table for providing\n           the capability of performing a lookup\
    \ operation\n           for a symbolic host name or for a host address\n     \
    \      from a remote host.\"\n      ::= { lookupObjects 3 }\n    lookupCtlEntry\
    \ OBJECT-TYPE\n       SYNTAX      LookupCtlEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Defines an entry\
    \ in the lookupCtlTable.  A\n           lookupCtlEntry is initially indexed by\n\
    \           lookupCtlOwnerIndex, which is a type of SnmpAdminString,\n       \
    \    a textual convention that allows for the use of the SNMPv3\n           View-Based\
    \ Access Control Model (RFC 3415, VACM)\n           and that also allows a management\
    \ application to identify\n           its entries.  The second index element,\n\
    \           lookupCtlOperationName, enables the same\n           lookupCtlOwnerIndex\
    \ entity to have multiple outstanding\n           requests.  The value of lookupCtlTargetAddressType\n\
    \           determines which lookup function to perform.\"\n       INDEX {\n \
    \               lookupCtlOwnerIndex,\n                lookupCtlOperationName\n\
    \             }\n       ::= { lookupCtlTable 1 }\n    LookupCtlEntry ::=\n   \
    \    SEQUENCE {\n           lookupCtlOwnerIndex         SnmpAdminString,\n   \
    \        lookupCtlOperationName      SnmpAdminString,\n           lookupCtlTargetAddressType\
    \  InetAddressType,\n           lookupCtlTargetAddress      InetAddress,\n   \
    \        lookupCtlOperStatus         INTEGER,\n           lookupCtlTime      \
    \         Unsigned32,\n           lookupCtlRc                 Integer32,\n   \
    \        lookupCtlRowStatus          RowStatus\n       }\n    lookupCtlOwnerIndex\
    \ OBJECT-TYPE\n       SYNTAX      SnmpAdminString (SIZE(0..32))\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \"\
    To facilitate the provisioning of access control by a\n          security administrator\
    \ using the View-Based Access\n          Control Model (RFC 2575, VACM) for tables\
    \ in which\n          multiple users may need to create or\n          modify entries\
    \ independently, the initial index is used as\n          an 'owner index'.  Such\
    \ an initial index has a syntax of\n          SnmpAdminString and can thus be\
    \ trivially mapped to a\n          securityName or groupName defined in VACM,\
    \ in\n          accordance with a security policy.\n          When used in conjunction\
    \ with such a security policy all\n          entries in the table belonging to\
    \ a particular user (or\n          group) will have the same value for this initial\
    \ index.\n          For a given user's entries in a particular table, the\n  \
    \        object identifiers for the information in these entries\n          will\
    \ have the same subidentifiers (except for the\n          'column' subidentifier)\
    \ up to the end of the encoded\n          owner index.  To configure VACM to permit\
    \ access to this\n          portion of the table, one would create\n         \
    \ vacmViewTreeFamilyTable entries with the value of\n          vacmViewTreeFamilySubtree\
    \ including the owner index\n          portion, and vacmViewTreeFamilyMask 'wildcarding'\
    \ the\n          column subidentifier.  More elaborate configurations\n      \
    \    are possible.\"\n       ::= { lookupCtlEntry 1 }\n    lookupCtlOperationName\
    \ OBJECT-TYPE\n       SYNTAX      SnmpAdminString (SIZE(0..32))\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"The name of a lookup operation.  This is locally unique,\n           within\
    \ the scope of an lookupCtlOwnerIndex.\"\n       ::= { lookupCtlEntry 2 }\n  \
    \  lookupCtlTargetAddressType OBJECT-TYPE\n       SYNTAX      InetAddressType\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"Specifies the type of address for performing a\n           lookup\
    \ operation for a symbolic host name or for a host\n           address from a\
    \ remote host.\n           Specification of dns(16) as the value for this object\n\
    \           means that a function such as, for example, getaddrinfo()\n      \
    \     or gethostbyname() should be performed to return one or\n           more\
    \ numeric addresses.  Use of a value of either ipv4(1)\n           or ipv6(2)\
    \ means that a functions such as, for example,\n           getnameinfo() or gethostbyaddr()\
    \ should be used to return\n           the symbolic names associated with a host.\"\
    \n       DEFVAL { unknown }\n       ::= { lookupCtlEntry 3 }\n    lookupCtlTargetAddress\
    \ OBJECT-TYPE\n       SYNTAX      InetAddress\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Specifies the address\
    \ used for a resolver lookup at a\n           remote host.  The corresponding\
    \ lookupCtlTargetAddressType\n           objects determines its type, as well\
    \ as the function\n           that can be requested.\n           A value for this\
    \ object MUST be set prior to\n           transitioning its corresponding lookupCtlEntry\
    \ to\n           active(1) via lookupCtlRowStatus.\"\n       ::= { lookupCtlEntry\
    \ 4 }\n    lookupCtlOperStatus OBJECT-TYPE\n       SYNTAX      INTEGER {\n   \
    \                   enabled(1),    -- operation is active\n                  \
    \    notStarted(2), -- operation has not started\n                      completed(3)\
    \   -- operation is done\n                   }\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Reflects the operational\
    \ state of an lookupCtlEntry:\n              enabled(1)    - Operation is active.\n\
    \              notStarted(2) - Operation has not been enabled.\n             \
    \ completed(3)  - Operation has been completed.\n            An operation is automatically\
    \ enabled(1) when its\n            lookupCtlRowStatus object is transitioned to\
    \ active(1)\n            status.  Until this occurs, lookupCtlOperStatus MUST\n\
    \            report a value of notStarted(2).  After the lookup\n            operation\
    \ is completed (success or failure), the value\n            for lookupCtlOperStatus\
    \ MUST be transitioned to\n            completed(3).\"\n       ::= { lookupCtlEntry\
    \ 5 }\n    lookupCtlTime OBJECT-TYPE\n       SYNTAX      Unsigned32\n       UNITS\
    \       \"milliseconds\"\n       MAX-ACCESS  read-only\n       STATUS      current\n\
    \       DESCRIPTION\n           \"Reports the number of milliseconds that a lookup\n\
    \           operation required to be completed at a remote host.\n           Completed\
    \ means operation failure as well as\n           success.\"\n       ::= { lookupCtlEntry\
    \ 6 }\n    lookupCtlRc OBJECT-TYPE\n       SYNTAX      Integer32\n       MAX-ACCESS\
    \  read-only\n       STATUS      current\n       DESCRIPTION\n           \"The\
    \ system-specific return code from a lookup\n           operation.  All implementations\
    \ MUST return a value\n           of 0 for this object when the remote lookup\n\
    \           operation succeeds.  A non-zero value for this\n           objects\
    \ indicates failure.  It is recommended that\n           implementations return\
    \ the error codes that are\n           generated by the lookup function used.\"\
    \n       ::= { lookupCtlEntry 7 }\n    lookupCtlRowStatus OBJECT-TYPE\n      \
    \ SYNTAX      RowStatus\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"This object allows entries to be created and\
    \ deleted\n           in the lookupCtlTable.\n           A remote lookup operation\
    \ is started when an\n           entry in this table is created via an SNMP set\n\
    \           request and the entry is activated.  This\n           occurs by setting\
    \ the value of this object\n           to CreateAndGo(4) during row creation or\n\
    \           by setting this object to active(1) after\n           the row is created.\n\
    \           A value MUST be specified for lookupCtlTargetAddress\n           prior\
    \ to the acceptance of a transition to active(1) state.\n           A remote lookup\
    \ operation starts when its entry\n           first becomes active(1).  Transitions\
    \ in and\n           out of active(1) state have no effect on the\n          \
    \ operational behavior of a remote lookup\n           operation, with the exception\
    \ that deletion of\n           an entry in this table by setting its RowStatus\n\
    \           object to destroy(6) will stop an active\n           remote lookup\
    \ operation.\n           The operational state of a remote lookup operation\n\
    \           can be determined by examination of its\n           lookupCtlOperStatus\
    \ object.\"\n       REFERENCE\n           \"See definition of RowStatus in RFC\
    \ 2579,\n           'Textual Conventions for SMIv2.'\"\n       ::= { lookupCtlEntry\
    \ 8 }\n   -- Lookup Results Table\n    lookupResultsTable OBJECT-TYPE\n      \
    \ SYNTAX      SEQUENCE OF LookupResultsEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Defines the Lookup\
    \ Results Table for providing\n           the capability of determining the results\
    \ of a\n           operation at a remote host.\n           One or more entries\
    \ are added to the\n           lookupResultsTable when a lookup operation,\n \
    \          as reflected by an lookupCtlEntry, is completed\n           successfully.\
    \  All entries related to a\n           successful lookup operation MUST be added\n\
    \           to the lookupResultsTable at the same time\n           that the associating\
    \ lookupCtlOperStatus\n           object is transitioned to completed(2).\n  \
    \         The number of entries added depends on the\n           results determined\
    \ for a particular lookup\n           operation.  All entries associated with\
    \ an\n           lookupCtlEntry are removed when the\n           lookupCtlEntry\
    \ is deleted.\n           A remote host can be multi-homed and have more than\
    \ one IP\n           address associated with it (returned by lookup function),\n\
    \           or it can have more than one symbolic name (returned\n           by\
    \ lookup function).\n           A function such as, for example, getnameinfo()\
    \ or\n           gethostbyaddr() is called with a host address as its\n      \
    \     parameter and is used primarily to determine a symbolic\n           name\
    \ to associate with the host address.  Entries in the\n           lookupResultsTable\
    \ MUST be made for each host name\n           returned.  If the function identifies\
    \ an 'official host\n           name,' then this symbolic name MUST be assigned\
    \ a\n           lookupResultsIndex of 1.\n           A function such as, for example,\
    \ getaddrinfo() or\n           gethostbyname() is called with a symbolic host\
    \ name and is\n           used primarily to retrieve a host address.  The entries\n\
    \           MUST be stored in the order that they are retrieved from\n       \
    \    the lookup function.  lookupResultsIndex 1 MUST be\n           assigned to\
    \ the first entry.\"\n      ::= { lookupObjects 4 }\n    lookupResultsEntry OBJECT-TYPE\n\
    \       SYNTAX      LookupResultsEntry\n       MAX-ACCESS  not-accessible\n  \
    \     STATUS      current\n       DESCRIPTION\n           \"Defines an entry in\
    \ the lookupResultsTable.  The\n           first two index elements identify the\n\
    \           lookupCtlEntry that a lookupResultsEntry belongs\n           to. \
    \ The third index element selects a single\n           lookup operation result.\"\
    \n       INDEX {\n                lookupCtlOwnerIndex,\n                lookupCtlOperationName,\n\
    \                lookupResultsIndex\n             }\n       ::= { lookupResultsTable\
    \ 1 }\n    LookupResultsEntry ::=\n       SEQUENCE {\n           lookupResultsIndex\
    \        Unsigned32,\n           lookupResultsAddressType  InetAddressType,\n\
    \           lookupResultsAddress      InetAddress\n        }\n    lookupResultsIndex\
    \ OBJECT-TYPE\n       SYNTAX      Unsigned32 (1..'ffffffff'h)\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"Entries in the lookupResultsTable are created when\n           the result\
    \ of a lookup operation is determined.\n           Entries MUST be stored in the\
    \ lookupResultsTable in\n           the order that they are retrieved.  Values\
    \ assigned\n           to lookupResultsIndex MUST start at 1 and increase\n  \
    \         consecutively.\"\n       ::= { lookupResultsEntry 1 }\n    lookupResultsAddressType\
    \ OBJECT-TYPE\n       SYNTAX      InetAddressType\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Indicates the type\
    \ of result of a remote lookup\n           operation.  A value of unknown(0) implies\
    \ either that\n           the operation hasn't been started or that\n        \
    \   it has failed.\"\n       ::= { lookupResultsEntry 2 }\n    lookupResultsAddress\
    \ OBJECT-TYPE\n       SYNTAX      InetAddress\n       MAX-ACCESS  read-only\n\
    \       STATUS      current\n       DESCRIPTION\n           \"Reflects a result\
    \ for a remote lookup operation\n           as per the value of lookupResultsAddressType.\n\
    \           The address type (InetAddressType) that relates to\n           this\
    \ object is specified by the corresponding value\n           of lookupResultsAddress.\"\
    \n       ::= { lookupResultsEntry 3 }\n    -- Conformance information\n    --\
    \ Compliance statements\n    lookupCompliances OBJECT IDENTIFIER ::= { lookupConformance\
    \ 1 }\n    lookupGroups      OBJECT IDENTIFIER ::= { lookupConformance 2 }\n \
    \   -- Compliance statements\n    lookupCompliance MODULE-COMPLIANCE\n       STATUS\
    \  current\n       DESCRIPTION\n               \"The compliance statement for\
    \ SNMP entities that\n               fully implement the DISMAN-NSLOOKUP-MIB.\"\
    \n       MODULE  -- this module\n           MANDATORY-GROUPS { lookupGroup }\n\
    \           OBJECT lookupMaxConcurrentRequests\n           MIN-ACCESS  read-only\n\
    \           DESCRIPTION\n               \"The agent is not required to support\
    \ set\n               operations to this object.\"\n           OBJECT lookupPurgeTime\n\
    \           MIN-ACCESS  read-only\n           DESCRIPTION\n               \"The\
    \ agent is not required to support a set\n               operation to this object.\"\
    \n       ::= { lookupCompliances 1 }\n    lookupMinimumCompliance MODULE-COMPLIANCE\n\
    \       STATUS  current\n       DESCRIPTION\n               \"The minimum compliance\
    \ statement for SNMP entities\n               that implement the minimal subset\
    \ of the\n               DISMAN-NSLOOKUP-MIB.  Implementors might choose this\n\
    \               subset for small devices with limited resources.\"\n       MODULE\
    \  -- this module\n           MANDATORY-GROUPS { lookupGroup }\n           OBJECT\
    \ lookupMaxConcurrentRequests\n           MIN-ACCESS  read-only\n           DESCRIPTION\n\
    \               \"The agent is not required to support set\n               operations\
    \ to this object.\"\n           OBJECT lookupPurgeTime\n           MIN-ACCESS\
    \  read-only\n           DESCRIPTION\n               \"The agent is not required\
    \ to support a set\n               operation to this object.\"\n           OBJECT\
    \ lookupCtlRowStatus\n           MIN-ACCESS  read-only\n           DESCRIPTION\n\
    \               \"Write access is not required.  If write access is\n        \
    \       not supported, then at least one entry in the\n               lookupCtlTable\
    \ MUST be established already when the SNMP\n               agent starts offering\
    \ access to the NSLOOKUP-MIB module.\n               If, in such a case, only\
    \ a single entry is offered, then\n               it is RECOMMENDED that this\
    \ entry use strings with a\n               length of 0 for both of its two index\
    \ objects.\"\n       ::= { lookupCompliances 2 }\n    -- MIB groupings\n    lookupGroup\
    \ OBJECT-GROUP\n      OBJECTS {\n                lookupMaxConcurrentRequests,\n\
    \                lookupPurgeTime,\n                lookupCtlOperStatus,\n    \
    \            lookupCtlTargetAddressType,\n                lookupCtlTargetAddress,\n\
    \                lookupCtlTime,\n                lookupCtlRc,\n              \
    \  lookupCtlRowStatus,\n                lookupResultsAddressType,\n          \
    \      lookupResultsAddress\n              }\n      STATUS  current\n      DESCRIPTION\n\
    \          \"The group of objects that constitute the remote\n          Lookup\
    \ operation.\"\n       ::= { lookupGroups 1 }\n   END\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   There are a number of management objects defined\
    \ in the three MIB\n   modules with a MAX-ACCESS clause of read-write and/or read-create.\n\
    \   Such objects may be considered sensitive or vulnerable in some\n   network\
    \ environments.  The support for SET operations in a non-secure\n   environment\
    \ without proper protection can have a negative effect on\n   network operations.\
    \  These are the tables and objects and their\n   sensitivity/vulnerability:\n\
    \   o  pingMaxConcurrentRequests\n   o  traceRouteMaxConcurrentRequests\n   o\
    \  lookupMaxConcurrentRequests\n      The MIB modules limit their maximum numbers\
    \ of concurrent requests\n      by the values of these objects.  Unauthorized\
    \ access to them may\n      lead to an overload of the managed node and to a disruption\
    \ of\n      other functions of the managed node.\n   o  pingCtlTable\n   o  traceRouteCtlTable\n\
    \   o  lookupCtlTable\n      All objects in entries of these tables (except index\
    \ objects) have\n      a MAX-ACCESS clause of read-create.  Unauthorized access\
    \ to these\n      objects can disturb the measurements controlled by the tables.\n\
    \      Also, the functions offered by the MIB modules can be misused for\n   \
    \   illegal data retrieval and for attacking other systems by floods\n      of\
    \ ping probes, traceroute probes or lookup requests,\n      respectively.\n  \
    \ In general, all three, the ping, traceroute, and lookup functions,\n   when\
    \ used excessively are considered a form of system attack.  In the\n   case of\
    \ ping, sending a system request too often can negatively\n   effect its performance\
    \ and attempting to connect to what is supposed\n   to be an unused port can be\
    \ very unpredictable.  Excessive use of the\n   traceroute capability can, like\
    \ ping, negatively affect system\n   performance.  The same applies to excessive\
    \ use of the lookup\n   service, particularly if the lookup cannot be resolved\
    \ locally.  In\n   insecure environments, it is RECOMMENDED that the MIBs defined\
    \ within\n   this memo not be supported.\n   o  lookupPurgeTime\n      Unauthorized\
    \ access to this object can lead to the deletion of\n      results of lookup operations\
    \ before they are read by a management\n      system, if the object is set to\
    \ 0 or small values close to 0.  If\n      the object is set to very high values,\
    \ unauthorized access can\n      lead to a high consumption of resources for storing\
    \ lookup\n      results.\n   Some of the readable objects in this MIB module (i.e.,\
    \ objects with a\n   MAX-ACCESS other than not-accessible) may be considered sensitive\
    \ or\n   vulnerable in some network environments.  It is thus important to\n \
    \  control even GET and/or NOTIFY access to these objects and possibly\n   to\
    \ even encrypt the values of these objects when sending them over\n   the network\
    \ via SNMP.  However, the only information that can be\n   disclosed without encryption\
    \ is the configuration and results of\n   measurements that are performed by implementations\
    \ of the MIB\n   modules.\n   To facilitate the provisioning of access control\
    \ by a security\n   administrator using the View-Based Access Control Model (VACM),\n\
    \   defined in RFC 3415 [RFC3415], for tables in which multiple users may\n  \
    \ need to create or modify entries independently, the initial index is\n   used\
    \ as an \"owner index.\"  Such an initial index has a syntax of\n   SnmpAdminString\
    \ and can thus be trivially mapped to a securityName or\n   groupName defined\
    \ in VACM, in accordance with a security policy.\n   All entries in related tables\
    \ belonging to a particular user will\n   have the same value for this initial\
    \ index.  For a given user's\n   entries in a particular table, the object identifiers\
    \ for the\n   information in these entries will have the same subidentifiers\n\
    \   (except for the \"column\" subidentifier) up to the end of the encoded\n \
    \  owner index.  To configure VACM to permit access to this portion of\n   the\
    \ table, one would create vacmViewTreeFamilyTable entries with the\n   value of\
    \ vacmViewTreeFamilySubtree including the owner index portion,\n   and vacmViewTreeFamilyMask\
    \ 'wildcarding' the column subidentifier.\n   More elaborate configurations are\
    \ possible.  The VACM access control\n   mechanism described above provides control.\n\
    \   SNMP versions prior to SNMPv3 did not include adequate security.\n   Even\
    \ if the network itself is secure (for example by using IPSec),\n   even then,\
    \ there is no control as to who on the secure network is\n   allowed to access\
    \ and GET/SET (read/change/create/delete) the objects\n   in this MIB module.\n\
    \   It is RECOMMENDED that implementers consider the security features as\n  \
    \ provided by the SNMPv3 framework (see [RFC3410], section 8),\n   including full\
    \ support for the SNMPv3 cryptographic mechanisms (for\n   authentication and\
    \ privacy).\n   Further, deployment of SNMP versions prior to SNMPv3 is NOT\n\
    \   RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to\n   enable\
    \ cryptographic security.  It is then a customer/operator\n   responsibility to\
    \ ensure that the SNMP entity giving access to an\n   instance of this MIB module\
    \ is properly configured to give access to\n   the objects only to those principals\
    \ (users) that have legitimate\n   rights to indeed GET or SET (change/create/delete)\
    \ them.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   This document is a product of the DISMAN Working Group.\
    \  Thanks to\n   Eduardo Cardona for suggesting the minimum compliance statements\
    \ and\n   to Juergen Schoenwaelder for the very detailed and constructive MIB\n\
    \   review.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2578]   McCloghrie, K., Perkins, D., Schoenwaelder, J., Case,\
    \ J.,\n               Rose, M., and S. Waldbusser, \"Structure of Management\n\
    \               Information Version 2 (SMIv2)\", STD 58, RFC 2578, April\n   \
    \            1999.\n   [RFC2579]   McCloghrie, K., Perkins, D., Schoenwaelder,\
    \ J., Case, J.,\n               Rose, M., and S. Waldbusser, \"Textual Conventions\
    \ for\n               SMIv2\", STD 58, RFC 2579, April 1999.\n   [RFC2580]   McCloghrie,\
    \ K., Perkins, D., Schoenwaelder, J., Case, J.,\n               Rose, M., and\
    \ S. Waldbusser, \"Conformance Statements for\n               SMIv2\", STD 58,\
    \ RFC 2580, April 1999.\n   [RFC2863]   McCloghrie, K. and F. Kastenholz, \"The\
    \ Interfaces Group\n               MIB\", RFC 2863, June 2000.\n   [RFC3411] \
    \  Harrington, D., Presuhn, R., and B. Wijnen, \"An\n               Architecture\
    \ for Describing Simple Network Management\n               Protocol (SNMP) Management\
    \ Frameworks\", STD 62, RFC 3411,\n               December 2002.\n   [RFC4001]\
    \   Daniele, M., Haberman, B., Routhier, S., and J.\n               Schoenwaelder,\
    \ \"Textual Conventions for Internet Network\n               Addresses\", RFC\
    \ 4001, February 2005.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC792]    Postel, J., \"Internet Control Message\
    \ Protocol\", STD 5,\n               RFC 792, September 1981.\n   [RFC862]   \
    \ Postel, J., \"Echo Protocol\", STD 20, RFC 862, May 1983.\n   [RFC1812]   Baker,\
    \ F., \"Requirements for IP Version 4 Routers\", RFC\n               1812, June\
    \ 1995.\n   [RFC2474]   Nichols, K., Blake, S., Baker, F., and D. Black,\n   \
    \            \"Definition of the Differentiated Services Field (DS\n         \
    \      Field) in the IPv4 and IPv6 Headers\", RFC 2474, December\n           \
    \    1998.\n   [RFC3260]   Grossman, D., \"New Terminology and Clarifications\
    \ for\n               Diffserv\", RFC 3260, April 2002.\n   [RFC3410]   Case,\
    \ J., Mundy, R., Partain, D. and B. Stewart,\n               \"Introduction and\
    \ Applicability Statements for Internet-\n               Standard Management Framework\"\
    , RFC 3410, December 2002.\n   [RFC3415]   Wijnen, B., Presuhn, R., and K. McCloghrie,\
    \ \"View-based\n               Access Control Model (VACM) for the Simple Network\n\
    \               Management Protocol (SNMP)\", STD 62, RFC 3415, December\n   \
    \            2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Juergen Quittek\n   NEC Europe Ltd.\n   Network Laboratories\n\
    \   Kurfuersten-Anlage 36\n   69115 Heidelberg\n   Germany\n   Phone: +49 6221\
    \ 4342-115\n   EMail: quittek@netlab.nec.de\n   Kenneth D. White\n   Dept. BRQA/Bldg.\
    \ 501/G114\n   IBM Corporation\n   P.O.Box 12195\n   3039 Cornwallis\n   Research\
    \ Triangle Park, NC 27709, USA\n   EMail: wkenneth@us.ibm.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
