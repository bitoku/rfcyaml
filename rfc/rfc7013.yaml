- title: __initial_text__
  contents:
  - "                Guidelines for Authors and Reviewers of\n        IP Flow Information\
    \ Export (IPFIX) Information Elements\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides guidelines for how to write definitions of\
    \ new\n   Information Elements for the IP Flow Information Export (IPFIX)\n  \
    \ protocol.  It provides instructions on using the proper conventions\n   for\
    \ Information Elements to be registered in the IANA IPFIX\n   Information Element\
    \ registry, and provides guidelines for expert\n   reviewers to evaluate new registrations.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 5741.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7013.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Intended Audience and Usage ................................3\n  \
    \    1.2. Overview of Relevant IPFIX Documents .......................4\n   2.\
    \ Terminology .....................................................4\n   3. How\
    \ to Apply IPFIX ..............................................5\n   4. Defining\
    \ New Information Elements ...............................6\n      4.1. Information\
    \ Element Naming .................................7\n      4.2. Information Element\
    \ Data Types .............................7\n      4.3. Information Element Numbering\
    \ ..............................8\n      4.4. Ancillary Information Element Properties\
    \ ...................9\n      4.5. Internal Structure in Information Elements\
    \ .................9\n      4.6. Information Element Multiplicity ..........................10\n\
    \      4.7. Enumerated Values and Subregistries .......................11\n  \
    \    4.8. Reversibility as per RFC 5103 .............................11\n    \
    \  4.9. Avoiding Bad Ideas in Information Element Design ..........11\n   5. The\
    \ Information Element Life Cycle .............................13\n      5.1. The\
    \ Process for Review by the IE-DOCTORS ..................13\n      5.2. Revising\
    \ Information Elements .............................14\n      5.3. Deprecating\
    \ Information Elements ..........................15\n   6. When Not to Define\
    \ New Information Elements ....................16\n      6.1. Maximizing Reuse\
    \ of Existing Information Elements .........16\n      6.2. Applying Enterprise-Specific\
    \ Information Elements .........18\n   7. Information Element Definition Checklist\
    \ .......................18\n   8. Applying IPFIX to Non-Flow Applications ........................21\n\
    \   9. Writing Internet-Drafts for IPFIX Applications .................21\n  \
    \    9.1. Example Information Element Definition ....................22\n    \
    \  9.2. Defining Recommended Templates ............................22\n   10.\
    \ A Textual Format for Specifying Information Elements\n       and Templates .................................................23\n\
    \      10.1. Information Element Specifiers ...........................24\n  \
    \    10.2. Specifying Templates .....................................26\n    \
    \  10.3. Specifying IPFIX Structured Data .........................27\n   11.\
    \ Security Considerations .......................................27\n   12. Acknowledgments\
    \ ...............................................28\n   13. References ....................................................29\n\
    \      13.1. Normative References .....................................29\n  \
    \    13.2. Informative References ...................................29\n   Appendix\
    \ A. Example Information Element Definitions ...............31\n     A.1. sipResponseStatus\
    \ ..........................................31\n     A.2. duplicatePacketDeltaCount\
    \ ..................................31\n     A.3. ambientTemperature .........................................32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides guidelines for the definition of\
    \ new IPFIX\n   Information Elements beyond those currently in the IANA IPFIX\n\
    \   Information Element Registry [IANA-IPFIX].  Given the self-describing\n  \
    \ nature of the data export format used by IPFIX, the definition of new\n   Information\
    \ Elements is often sufficient to allow the application of\n   IPFIX to new network\
    \ measurement and management use cases.\n   We intend this document to enable\
    \ the application of IPFIX to new\n   areas by experts in the IETF Working Group\
    \ or Area Directorate, the\n   IETF community, or organization external to the\
    \ IETF, concerned with\n   the technical details of the protocol or application\
    \ to be measured\n   or managed using IPFIX.  This expansion occurs with the consultation\n\
    \   of IPFIX experts informally called IE-DOCTORS.  It provides\n   guidelines\
    \ both for those defining new Information Elements as well\n   as the IE-DOCTORS\
    \ reviewing them.\n   This document essentially codifies two meta-guidelines:\
    \ (1) \"define\n   new Information Elements that look like existing Information\n\
    \   Elements\" and (2) \"don't define Information Elements unless you need\n \
    \  to\".\n"
- title: 1.1.  Intended Audience and Usage
  contents:
  - "1.1.  Intended Audience and Usage\n   This document is meant for two separate\
    \ audiences.  For those\n   defining new Information Elements, it provides specifications\
    \ and\n   best practices to be used in deciding which Information Elements are\n\
    \   necessary for a given existing or new application, instructions for\n   writing\
    \ the definitions for these Information Elements, and\n   information on the supporting\
    \ documentation required for the new\n   application (up to and including the\
    \ publication of one or more RFCs\n   describing it).  For the IPFIX experts appointed\
    \ as IE-DOCTORS, and\n   for IANA personnel changing the IANA IPFIX Information\
    \ Element\n   Registry [IANA-IPFIX], it defines a set of acceptance criteria\n\
    \   against which these proposed Information Elements should be\n   evaluated.\n\
    \   This document is not intended to guide the extension of the IPFIX\n   protocol\
    \ itself, e.g., through new export mechanisms, data types, or\n   the like; these\
    \ activities should be pursued through the publication\n   of Standards Track\
    \ RFCs within the IPFIX Working Group.\n   This document, together with [RFC7012],\
    \ defines the procedures for\n   management of the IANA IPFIX Information Element\
    \ Registry\n   [IANA-IPFIX].  The practices outlined in this document are intended\n\
    \   to guide experts when reviewing additions or changes to the\n   Information\
    \ Elements in the registry under Expert Review (as defined\n   in [RFC5226]).\n"
- title: 1.2.  Overview of Relevant IPFIX Documents
  contents:
  - "1.2.  Overview of Relevant IPFIX Documents\n   [RFC7011] defines the IPFIX protocol,\
    \ the IPFIX-specific terminology\n   used by this document, and the data type\
    \ encodings for each of the\n   data types supported by IPFIX.\n   [RFC7012] defines\
    \ the basis of the IPFIX Information Model, referring\n   to [IANA-IPFIX] for\
    \ the specific Information Element definitions.  It\n   states that new Information\
    \ Elements may be added to the Information\n   Model on the basis of Expert Review,\
    \ delegates the appointment of\n   experts to an IESG Area Director, and refers\
    \ to this document for\n   details on the extension process.  This document is\
    \ intended to\n   further codify the best practices to be followed by these experts,\
    \ in\n   order to improve the efficiency of this process.\n   [RFC5103] defines\
    \ a method for exporting bidirectional Flow\n   information using IPFIX; this\
    \ document should be followed when\n   extending IPFIX to represent information\
    \ about bidirectional network\n   interactions in general.  Additionally, new\
    \ Information Elements\n   should be annotated for their reversibility or lack\
    \ thereof as per\n   this document.\n   [RFC5610] defines a method for exporting\
    \ information about\n   Information Elements inline within IPFIX.  In doing so,\
    \ it explicitly\n   defines a set of restrictions, implied in [RFC7011] and [RFC7012],\
    \ on\n   the use of data types and semantic; these restrictions must be\n   observed\
    \ in the definition of new Information Elements, as in\n   Section 4.4.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   Capitalized terms used in this document that are defined\
    \ in the\n   Terminology section of [RFC7011] are to be interpreted as defined\n\
    \   there.\n   An \"application\", as used in this document, refers to a candidate\n\
    \   protocol, task, or domain to which IPFIX export, collection, and/or\n   storage\
    \ is applied.  By this definition, the IPFIX applicability\n   statement [RFC5472]\
    \ defined the initial applications of IPFIX, and\n   Packet Sampling (PSAMP) [RFC5476]\
    \ was the first new IPFIX application\n   after the publication of the IPFIX protocol\
    \ itself.\n   \"IANA IE registry\", as used in this document, unless otherwise\
    \ noted,\n   refers to the IANA IPFIX Information Element Registry [IANA-IPFIX].\n"
- title: 3.  How to Apply IPFIX
  contents:
  - "3.  How to Apply IPFIX\n   Though originally specified for the export of IP Flow\
    \ information,\n   the message format, template mechanism, and data model specified\
    \ by\n   IPFIX led to it being applicable to a wide variety of network\n   management\
    \ situations.  In addition to Flow information export, for\n   which it was designed,\
    \ and packet information export as specified by\n   PSAMP [RFC5476], any application\
    \ with the following characteristics\n   is a good candidate for an IPFIX application:\n\
    \   o  The application's data Flow is fundamentally unidirectional.\n      IPFIX\
    \ is a \"push\" protocol, supporting only the export of\n      information from\
    \ a sender (an Exporting Process) to a receiver (a\n      Collecting Process).\
    \  Request-response interactions are not\n      supported by IPFIX.\n   o  The\
    \ application handles discrete event information, or information\n      to be\
    \ periodically reported.  IPFIX is particularly well suited to\n      representing\
    \ events, which can be scoped in time.\n   o  The application handles information\
    \ about network entities.\n      IPFIX's information model is network-oriented,\
    \ so network\n      management applications have many opportunities for information\n\
    \      model reuse.\n   o  The application requires a small number of arrangements\
    \ of data\n      structures relative to the number of records it handles.  The\n\
    \      template-driven self-description mechanism used by IPFIX excels at\n  \
    \    handling large volumes of identically structured data, compared to\n    \
    \  representations that define structure inline with data (such as\n      XML).\n\
    \   Most applications meeting these criteria can be supported over IPFIX.\n  \
    \ Once it has been determined that IPFIX is a good fit, the next step\n   is determining\
    \ which Information Elements are necessary to represent\n   the information required\
    \ by the application.  Especially for network-\n   centric applications, the IANA\
    \ IE registry may already contain all\n   the necessary Information Elements (see\
    \ Section 6.1 for guidelines on\n   maximizing Information Element reuse).  In\
    \ this case, no work within\n   the IETF is necessary: simply define Templates\
    \ and start exporting.\n   It is expected, however, that most applications will\
    \ be able to reuse\n   some existing Information Elements, but may need to define\
    \ some\n   additional Information Elements to support all their requirements.\n\
    \   In this case, see Section 4 for best practices to be followed in\n   defining\
    \ Information Elements.\n   Optionally, a Working Group or individual contributor\
    \ may choose to\n   write an Internet-Draft for publication as an RFC, detailing\
    \ the new\n   IPFIX application.  Such an RFC should contain discussion of the\
    \ new\n   application, the Information Element definitions as in Section 4, as\n\
    \   well as suggested Templates and examples of the use of those\n   Templates\
    \ within the new application as in Section 9.2.  Section 10\n   defines a compact\
    \ textual Information Element notation to be used in\n   describing these suggested\
    \ Templates and/or the use of IPFIX\n   Structured Data [RFC6313] within the new\
    \ application.\n"
- title: 4.  Defining New Information Elements
  contents:
  - "4.  Defining New Information Elements\n   In many cases, a new application will\
    \ require nothing more than a new\n   Information Element or set of Information\
    \ Elements to be exportable\n   using IPFIX.  An Information Element meeting the\
    \ following criteria,\n   as evaluated by the IE-DOCTORS, is eligible for inclusion\
    \ in the IANA\n   IE registry:\n   o  The Information Element must be unique within\
    \ the registry, and\n      its description must represent a substantially different\
    \ meaning\n      from that of any existing Information Element.  An existing\n\
    \      Information Element that can be reused for a given purpose should\n   \
    \   be reused.\n   o  The Information Element should contain as little internal\n\
    \      structure as possible.  Instead of representing complex\n      information\
    \ by overlaying internal structure on a simple data type\n      such as octetArray,\
    \ such information should be represented with\n      multiple simple Information\
    \ Elements to be exported in parallel or\n      using IPFIX Structured Data [RFC6313],\
    \ as in Section 4.5.  The\n      internal structure of a proposed IE may be evaluated\
    \ by the IE-\n      DOCTORS with an eye toward interoperability and/or backward\n\
    \      compatibility with existing methods of exporting similar data on a\n  \
    \    case-by-case basis.\n   o  Information Elements representing information\
    \ about proprietary or\n      nonstandard applications should not be registered\
    \ in the IANA IE\n      registry.  These can be represented using enterprise-specific\n\
    \      Information Elements as detailed in Section 3.2 of [RFC7011],\n      instead.\n\
    \   The definition of new Information Elements requires a descriptive\n   name,\
    \ a specification of the data type from the IPFIX Data Type\n   subregistry in\
    \ the IANA IE registry (defined in [RFC7012] as itself\n   extensible via Standards\
    \ Action as per [RFC5226]), and a human-\n   readable description written in English.\
    \  This section provides\n   guidelines on each of these components of an Information\
    \ Element\n   definition, referring to existing documentation such as [RFC7012]\
    \ as\n   appropriate.\n"
- title: 4.1.  Information Element Naming
  contents:
  - "4.1.  Information Element Naming\n   As the name of an Information Element is\
    \ the first thing a potential\n   implementor will use when determining whether\
    \ it is suitable for a\n   given application, it is important to be as precise\
    \ and descriptive\n   as possible.  Names of Information Elements:\n   o  must\
    \ be chosen carefully to describe the use of the Information\n      Element within\
    \ the context in which it will be used.\n   o  must be unique within the IANA\
    \ IE registry.\n   o  start with lowercase letters.\n   o  use capital letters\
    \ for the first letter of each component except\n      for the first one (aka\
    \ \"camel case\").  All other letters are\n      lowercase, even for acronyms.\
    \  Exceptions are made for acronyms\n      containing a mixture of lowercase and\
    \ capital letters, such as\n      'IPv4' and 'IPv6'.  Examples are \"sourceMacAddress\"\
    \ and\n      \"destinationIPv4Address\".\n   In addition, new Information Elements\
    \ pertaining to a specific\n   protocol should name the protocol in the first\
    \ word in order to ease\n   searching by name (e.g., \"sipMethod\" for a SIP method,\
    \ as would be\n   used in a logging format for SIP based on IPFIX).  Similarly,\
    \ new\n   Information Elements pertaining to a specific application should name\n\
    \   the application in the first word.\n"
- title: 4.2.  Information Element Data Types
  contents:
  - "4.2.  Information Element Data Types\n   IPFIX provides a set of data types covering\
    \ most primitives used in\n   network measurement and management applications.\
    \  The most\n   appropriate data type should be chosen for the Information Element\n\
    \   type, IPFIX informationElementDataTypes subregistry at [IANA-IPFIX].\n   This\
    \ subregistry may be extended from time to time by a Standards\n   Action [RFC5226],\
    \ as defined in [RFC5610].\n   Information Elements representing an integral value\
    \ with a natural\n   width should be defined with the appropriate integral data\
    \ type.\n   This applies especially to values taken directly from fixed-width\n\
    \   fields in a measured protocol.  For example, tcpControlBits, the TCP\n   flags\
    \ byte, is an unsigned8, and tcpSequenceNumber is an unsigned32.\n   Information\
    \ Elements representing counters or identifiers should be\n   defined as signed64\
    \ or unsigned64, as appropriate, to maximize the\n   range of values available;\
    \ applications can use reduced-size encoding\n   as defined in Section 6.2 of\
    \ [RFC7011] in cases where fewer than 2^64\n   values are necessary.\n   Information\
    \ Elements representing time values must be defined with\n   appropriate precision.\
    \  For example, an Information Element for a\n   time measured at second-level\
    \ precision should be defined as having a\n   dateTimeSeconds data type, instead\
    \ of dateTimeMilliseconds.\n   Information Elements of type string or octetArray\
    \ that have length\n   constraints (fixed length, minimum and/or maximum length)\
    \ must note\n   these constraints in their description.\n   The type of an Information\
    \ Element must match the type of the data it\n   represents.  More specifically,\
    \ information that could be represented\n   as a string but that better matches\
    \ one of the other data types\n   (e.g., an integral type for a number or enumerated\
    \ type, an address\n   type for an address) must be represented by the best-matching\
    \ type,\n   even if the data was represented using a different type in the\n \
    \  source.  For example, an IPFIX application that exports Options\n   Template\
    \ Records mapping IP addresses to additional information about\n   each host from\
    \ an external database must use Information Elements of\n   an address type to\
    \ represent the addresses, even if the source\n   database represented these as\
    \ strings.\n   Strings and octetArrays must not be used to encode data that would\
    \ be\n   more properly represented using multiple Information Elements and/or\n\
    \   IPFIX Structured Data [RFC6313]; see Section 4.5 for more.\n   This document\
    \ does not cover the addition of new Data Types or Data\n   Type Semantics to\
    \ the IPFIX protocol.  As such changes have important\n   interoperability considerations\
    \ and require implementation on both\n   Collecting and Exporting Processes, they\
    \ require a Standards Action\n   as per [RFC5610].  However, note that the set\
    \ of primitive types\n   provided by IPFIX are applicable to almost any appropriate\n\
    \   application, so extending the type system is generally not necessary.\n"
- title: 4.3.  Information Element Numbering
  contents:
  - "4.3.  Information Element Numbering\n   Each Information Element has a unique\
    \ identifier in the IANA\n   registry.\n   When adding newly registered Information\
    \ Elements to the IANA IE\n   registry, IANA should assign the lowest available\
    \ Information Element\n   identifier (the value column in [IANA-IPFIX]) in the\
    \ range 128-32767.\n   Information Elements with identifiers in the range 1-127\
    \ are reserved\n   for compatibility with corresponding fields in NetFlow version\
    \ 9, as\n   described in [RFC3954].\n"
- title: 4.4.  Ancillary Information Element Properties
  contents:
  - "4.4.  Ancillary Information Element Properties\n   Information Elements to which\
    \ special semantics apply should refer to\n   one of the values in the Information\
    \ Element Semantics subregistry of\n   the IANA IE registry, as described in Section\
    \ 3.2 of [RFC7012],\n   subject to the restrictions given in Section 3.10 of [RFC5610];\
    \ in\n   other words, the semantics and the type must be consistent.\n   When\
    \ defining Information Elements representing a dimensioned\n   quantity or entity\
    \ count, the units of that quantity should be\n   defined in the units field.\
    \  This field takes its values from the\n   IANA Information Element Units subregistry\
    \ of the IANA IE registry.\n   If an Information Element expresses a quantity\
    \ in units not yet in\n   this subregistry, then the unit must be added to the\
    \ Units\n   subregistry at the same time the Information Element is added to the\n\
    \   IANA IE registry.  Note that the Units subregistry as defined in\n   [RFC5610]\
    \ is maintained on an Expert Review basis.\n   Additionally, when the range of\
    \ values an Information Element can\n   take is smaller than the range implied\
    \ by its data type, the range\n   should be defined within the Information Element's\
    \ entry in the IANA\n   IE registry.\n"
- title: 4.5.  Internal Structure in Information Elements
  contents:
  - "4.5.  Internal Structure in Information Elements\n   The definition of Information\
    \ Elements with an internal structure\n   that is defined in the Description field\
    \ is not recommended, except\n   in the following cases:\n   1.  The Information\
    \ Element is a direct copy of a structured entity\n       in a measured protocol\
    \ (e.g., the tcpControlBits Information\n       Element for the flags byte from\
    \ the TCP header).\n   2.  The Information Element represents a section of a packet\
    \ of\n       protocol entity, in raw form as captured from the wire (e.g., the\n\
    \       mplsLabelStackSection Information Element for the MPLS label\n       stack).\n\
    \   3.  The Information Element represents a set of flags that are\n       tightly\
    \ semantically related, where representing the flags as\n       separate one-byte\
    \ booleans would be inefficient, and that should\n       always appear together\
    \ in a data record (e.g., the\n       anonymizationFlags Information Element for\
    \ specifying optional\n       features of anonymization techniques).\n   4.  The\
    \ Information Element contains internal structure by reference\n       to an external\
    \ data type or specification containing internal\n       structure (e.g., a MIME\
    \ type or URL), for interoperability and\n       backward-compatibility purposes.\n\
    \   Additional exceptions to the above list should be made through\n   publication\
    \ of an RFC.\n   In other cases, candidate Information Elements with internal\n\
    \   structure should be decomposed into multiple primitive Information\n   Elements\
    \ to be used in parallel.  For more complicated semantics,\n   where the structure\
    \ is not identical from Data Record to Data Record,\n   or where there is semantic\
    \ dependency between multiple decomposed\n   primitive Information Elements, use\
    \ the IPFIX Structured Data\n   [RFC6313] extension instead.\n   As an example\
    \ of Information Element decomposition, consider an\n   application-level identifier\
    \ called an \"endpoint\", which represents a\n   {host, port, protocol} tuple.\
    \  Instead of allocating an opaque,\n   structured \"source endpoint\" Information\
    \ Element, the source endpoint\n   should be represented by three separate Information\
    \ Elements: \"source\n   address\", \"source port\", \"transport protocol\". \
    \ In this example, the\n   required Information Elements already exist in the\
    \ IANA IE registry:\n   sourceIPv4Address or sourceIPv6Address, sourceTransportPort,\n\
    \   protocolIdentifier.  Indeed, as well as being good practice, this\n   normalization\
    \ down to non-structured Information Elements also\n   increases opportunities\
    \ for reuse as in Section 6.1.\n   The decomposition of data with internal structure\
    \ should avoid the\n   definition of Information Elements that have a meaning\
    \ too specific\n   to be generally useful or that would result in a multitude\
    \ of\n   templates to handle different multiplicities.  More information on\n\
    \   multiplicities is given in the following section.\n"
- title: 4.6.  Information Element Multiplicity
  contents:
  - "4.6.  Information Element Multiplicity\n   Some Information Elements may represent\
    \ information with a\n   multiplicity other than one, i.e., items that may occur\
    \ multiple\n   times within the data to be represented in a single IPFIX record.\
    \  In\n   this case, there are several options, depending on the circumstances:\n\
    \   1.  As specified in Section 8 of [RFC7011]: \"if an Information\n       Element\
    \ is required more than once in a Template, the different\n       occurrences\
    \ of this Information Element should follow the logical\n       order of their\
    \ treatments by the Metering Process.\"  In other\n       words, in cases where\
    \ the items have a natural order (e.g., the\n       order in which they occur\
    \ in the packet), and the multiplicity is\n       the same for each record, the\
    \ information can be modeled by\n       containing multiple instances of the Information\
    \ Element\n       representing a single item within the Template Record describing\n\
    \       the Data Records.\n   2.  In cases where the items have a variable multiplicity,\
    \ a\n       basicList of the Information Element representing a single item\n\
    \       can be used as in the IPFIX Structured Data [RFC6313] extension.\n   3.\
    \  If the multiple-item structure is taken directly from bytes\n       observed\
    \ on the wire by the Metering Process or otherwise taken\n       from the application\
    \ being measured (e.g., a TCP options stack),\n       the multiple-item structure\
    \ can be exported as a variable-length\n       octetArray Information Element\
    \ holding the raw content.\n   Specifically, a new Information Element should\
    \ not encode any\n   multiplicity or ordinality information into the definition\
    \ of the\n   Information Element itself.\n"
- title: 4.7.  Enumerated Values and Subregistries
  contents:
  - "4.7.  Enumerated Values and Subregistries\n   When defining an Information Element\
    \ that takes an enumerated value\n   from a set of values that may change in the\
    \ future, this enumeration\n   must be defined by an IANA IE registry or subregistry.\
    \  For\n   situations where an existing registry defines the enumeration (e.g.,\n\
    \   the IANA Protocol Numbers registry for the protocolIdentifier\n   Information\
    \ Element), that registry must be used.  Otherwise, a new\n   subregistry of the\
    \ IANA IPFIX registry must be defined for the\n   enumerated value, to be modified\
    \ subject to Expert Review [RFC5226].\n"
- title: 4.8.  Reversibility as per RFC 5103
  contents:
  - "4.8.  Reversibility as per RFC 5103\n   [RFC5103] defines a method for exporting\
    \ bidirectional Flows using a\n   special Private Enterprise Number to define\
    \ reverse-direction\n   variants of IANA Information Elements, and a set of criteria\
    \ for\n   determining whether an Information Element may be reversed using this\n\
    \   method.  Since almost all Information Elements are reversible,\n   [RFC5103]\
    \ enumerates those Information Elements that were defined at\n   the time of its\
    \ publication that are NOT reversible.\n   New non-reversible Information Elements\
    \ must contain a note in the\n   description stating that they are not reversible.\n"
- title: 4.9.  Avoiding Bad Ideas in Information Element Design
  contents:
  - "4.9.  Avoiding Bad Ideas in Information Element Design\n   In general, the existence\
    \ of a similarly defined Information Element\n   in the IANA IE registry sets\
    \ a precedent that may be followed to\n   determine whether a given proposed Information\
    \ Element \"fits\" within\n   the registry.  Indeed, the rules specified by this\
    \ document could be\n   interpreted to mean \"make new Information Elements that\
    \ look like\n   existing Information Elements\".  However, for reasons of history,\n\
    \   there are several Information Elements within the IANA IE registry\n   that\
    \ do not follow best practices in Information Element design.\n   These Information\
    \ Elements are not necessarily so flawed so as to\n   require deprecation, but\
    \ they should be explicitly ignored when\n   looking for guidance as to whether\
    \ a new Information Element should\n   be added.  Here we provide a set of representative\
    \ examples taken\n   from the IANA IE registry; in general, entries in the IANA\
    \ IE\n   registry that do not follow the guidelines in this document should\n\
    \   not be used as examples for new Information Element definitions.\n   Before\
    \ registering a new Information Element, it must be determined\n   that it would\
    \ be sufficiently unique within the IANA IE registry.\n   This evaluation has\
    \ not always been done in the past, and the\n   existence of the Information Elements\
    \ defined without this evaluation\n   should not be taken as an example that such\
    \ Information Element\n   definition practices should be followed in the future.\
    \  Specific\n   examples of such Information Elements include initiatorOctets\
    \ and\n   responderOctets (which duplicate octetDeltaCount and its reverse per\n\
    \   [RFC5103]) and initiatorPackets and responderPackets (the same, for\n   packetDeltaCount).\n\
    \   As mentioned in Section 4.2, the type of an Information Element\n   should\
    \ match the type of data the Information Element represents.  An\n   example of\
    \ how not to do this is presented by the p2pTechnology,\n   tunnelTechnology,\
    \ and encryptedTechnology Information Elements: these\n   represent a three-state\
    \ enumeration using a String.  The example set\n   by these Information Elements\
    \ should not be followed in the\n   definition of new Information Elements.\n\
    \   As mentioned in Section 4.6, an Information Element definition should\n  \
    \ not include any ordinality or multiplicity information.  The only\n   example\
    \ of this within the IANA IE registry the following list of\n   assigned IPFIX\
    \ Information Elements: mplsTopLabelStackSection,\n   mplsLabelStackSection2,\
    \ mplsLabelStackSection3,\n   mplsLabelStackSection4, mplsLabelStackSection5,\n\
    \   mplsLabelStackSection6 mplsLabelStackSection7,\n   mplsLabelStackSection8,\
    \ mplsLabelStackSection9, and\n   mplsLabelStackSection10.  The only distinction\
    \ between those almost-\n   identical Information Elements is the position within\
    \ the MPLS stack.\n   This Information Element design pattern met an early requirement\
    \ of\n   the definition of IPFIX that was not carried forward into the final\n\
    \   specification -- namely, that no semantic dependency was allowed\n   between\
    \ Information Elements in the same Record -- and as such should\n   not be followed\
    \ in the definition of new Information Elements.  In\n   this case, since the\
    \ size of the MPLS stack will vary from Flow to\n   Flow, it should be exported\
    \ using IPFIX Structured Data [RFC6313]\n   where supported, as a basicList of\
    \ MPLS label entries, or as a raw\n   MPLS label stack using the variable-length\n\
    \   mplsLabelStackSection Information Element.\n"
- title: 5.  The Information Element Life Cycle
  contents:
  - "5.  The Information Element Life Cycle\n   Once an Information Element or set\
    \ of Information Elements has been\n   identified for a given application, Information\
    \ Element\n   specifications in accordance with Section 4 are submitted to IANA\
    \ to\n   follow the process for review by the IE-DOCTORS, as defined below.\n\
    \   This process is also used for other changes to the IANA IE registry,\n   such\
    \ as deprecation or revision, as described later in this section.\n"
- title: 5.1.  The Process for Review by the IE-DOCTORS
  contents:
  - "5.1.  The Process for Review by the IE-DOCTORS\n   Requests to change the IANA\
    \ IE registry or a linked subregistry are\n   submitted to IANA, which forwards\
    \ the request to a designated group\n   of experts (IE-DOCTORS) appointed by the\
    \ IESG; these are the\n   reviewers called for by the Expert Review [RFC5226]\
    \ policy defined\n   for the IANA IE registry by [RFC7012].  The IE-DOCTORS review\
    \ the\n   request for such things as compliance with this document, compliance\n\
    \   with other applicable IPFIX-related RFCs, and consistency with the\n   currently\
    \ defined set of Information Elements.\n   Authors are expected to review compliance\
    \ with the specifications in\n   this document to check their submissions before\
    \ sending them to IANA.\n   The IE-DOCTORS should endeavor to complete referred\
    \ reviews in a\n   timely manner.  If the request is acceptable, the IE-DOCTORS\
    \ signify\n   their approval to IANA, which changes the IANA IE registry.  If\
    \ the\n   request is not acceptable, the IE-DOCTORS can coordinate with the\n\
    \   requestor to change the request to be compliant.  The IE-DOCTORS may\n   also\
    \ choose in exceptional circumstances to reject clearly frivolous\n   or inappropriate\
    \ change requests outright.\n   This process should not in any way be construed\
    \ as allowing the IE-\n   DOCTORS to overrule IETF consensus.  Specifically, Information\n\
    \   Elements in the IANA IE registry that were added with IETF consensus\n   require\
    \ IETF consensus for revision or deprecation.\n   Decisions by the IE-DOCTORS\
    \ may be appealed as in Section 7 of\n   [RFC5226].\n"
- title: 5.2.  Revising Information Elements
  contents:
  - "5.2.  Revising Information Elements\n   The Information Element status field\
    \ in the IANA IE registry is\n   defined in [RFC7012] to allow Information Elements\
    \ to be 'current' or\n   'deprecated'.  No Information Elements are as of this\
    \ writing\n   deprecated.  [RFC5102] additionally specified an 'obsolete' status;\n\
    \   however, this has been removed on revision as it served no\n   operational\
    \ purpose.\n   In addition, no policy is defined for revising IANA IE registry\n\
    \   entries or addressing errors therein.  To be certain, changes and\n   deprecations\
    \ within the IANA IE registry are not encouraged, and\n   should be avoided to\
    \ the extent possible.  However, in recognition\n   that change is inevitable,\
    \ this section is intended to remedy this\n   situation.\n   Changes are initiated\
    \ by sending a new Information Element definition\n   to IANA, as in Section 5.1,\
    \ for an already-existing Information\n   Element.\n   The primary requirement\
    \ in the definition of a policy for managing\n   changes to existing Information\
    \ Elements is avoidance of\n   interoperability problems; IE-DOCTORS must work\
    \ to maintain\n   interoperability above all else.  Changes to Information Elements\n\
    \   already in use may only be done in an interoperable way; necessary\n   changes\
    \ that cannot be done in a way to allow interoperability with\n   unchanged implementations\
    \ must result in deprecation.\n   A change to an Information Element is held to\
    \ be interoperable only\n   when:\n   1.  it involves the correction of an error\
    \ that is obviously only\n       editorial; or\n   2.  it corrects an ambiguity\
    \ in the Information Element's definition,\n       which itself leads to non-interoperability\
    \ severe enough to\n       prevent the Information Element's usage as originally\
    \ defined\n       (e.g., a prior change to ipv6ExtensionHeaders); or\n   3.  it\
    \ expands the Information Element's data type without changing\n       how it\
    \ is represented (e.g., changing unsigned32 to unsigned64,\n       as with a prior\
    \ change to selectorId); or\n   4.  it corrects missing information in the Information\
    \ Element's\n       definition without changing its meaning (e.g., the explicit\n\
    \       definition of 'quantity' semantics for numeric Information\n       Elements\
    \ without a Data Type Semantics value); or\n   5.  it defines a previously undefined\
    \ or reserved enumerated value,\n       or one or more previously reserved bits\
    \ in an Information Element\n       with flag semantics; or\n   6.  it expands\
    \ the set of permissible values in the Information\n       Element's range; or\n\
    \   7.  it harmonizes with an external reference that was itself\n       corrected.\n\
    \   If a change is deemed permissible by the IE-DOCTORS, IANA makes the\n   change\
    \ in the IANA IE registry.  The requestor of the change is\n   appended to the\
    \ requestor in the registry.\n   Each Information Element in the IANA IE registry\
    \ has a revision\n   number, starting at zero.  Each change to an Information\
    \ Element\n   following this process increments the revision number by one.  Since\n\
    \   any revision must be interoperable according to the criteria above,\n   there\
    \ is no need for the IANA IE registry to store information about\n   old revisions.\n\
    \   When a revised Information Element is accepted into the registry, the\n  \
    \ date of acceptance of the most recent revision is placed into the\n   revision\
    \ Date column of the registry for that Information Element.\n"
- title: 5.3.  Deprecating Information Elements
  contents:
  - "5.3.  Deprecating Information Elements\n   Changes that are not permissible by\
    \ these criteria may only be\n   handled by deprecation.  An Information Element\
    \ MAY be deprecated and\n   replaced when:\n   1.  the Information Element definition\
    \ has an error or shortcoming\n       that cannot be permissibly changed as in\
    \ Section 5.2; or\n   2.  the deprecation harmonizes with an external reference\
    \ that was\n       itself deprecated through that reference's accepted deprecation\n\
    \       method; or\n   3.  changes in the IPFIX protocol or its extensions, or\
    \ in community\n       understanding thereof, allow the information represented\
    \ by the\n       Information Element to be represented in a more efficient or\n\
    \       convenient way.  Deprecation in this circumstance requires a\n       Standards\
    \ Action.\n   A request for deprecation is sent to IANA, which passes it to the\
    \ IE-\n   DOCTORS for review, as in Section 5.1.  When deprecating an\n   Information\
    \ Element, the Information Element description in the IANA\n   IE registry must\
    \ be updated to explain the deprecation, as well as to\n   refer to any new Information\
    \ Elements created to replace the\n   deprecated Information Element.\n   The\
    \ revision number of an Information Element is incremented upon\n   deprecation,\
    \ and the revision Date updated, as with any revision.\n   Deprecated Information\
    \ Elements should continue to be supported by\n   Collecting Processes, but should\
    \ not be exported by Exporting\n   Processes.  The use of deprecated Information\
    \ Elements should result\n   in a log entry or human-readable warning at the Exporting\
    \ and\n   Collecting Processes.\n   Names and elementIDs of deprecated Information\
    \ Elements must not be\n   reused.\n"
- title: 6.  When Not to Define New Information Elements
  contents:
  - "6.  When Not to Define New Information Elements\n   Due to the relatively limited\
    \ number space of Information Elements in\n   the IANA IE registry, and the fact\
    \ that the difficulty of managing\n   and understanding the registry increases\
    \ with its size, avoiding\n   redundancy and clutter in the registry is important\
    \ in defining new\n   applications.  New Information Elements should not be added\
    \ to the\n   IANA IE registry unless there is an intent to implement and deploy\n\
    \   applications using them; research or experimental applications should\n  \
    \ use enterprise-specific Information Elements as in Section 6.2\n   instead.\n\
    \   The subsections below provide guidelines for reuse of existing\n   Information\
    \ Elements, as well as guidelines on using enterprise-\n   specific Information\
    \ Elements instead of adding Information Elements\n   in the IANA IE registry.\n"
- title: 6.1.  Maximizing Reuse of Existing Information Elements
  contents:
  - "6.1.  Maximizing Reuse of Existing Information Elements\n   Whenever possible,\
    \ new applications should prefer usage of existing\n   IPFIX Information Elements\
    \ to the creation of new Information\n   Elements.  IPFIX already provides Information\
    \ Elements for every\n   common Layer 4 and Layer 3 packet header field in the\
    \ IETF protocol\n   suite, basic Layer 2 information, basic counters, timestamps\
    \ and time\n   ranges, and so on.  When defining a new Information Element similar\n\
    \   to an existing one, reviewers should ensure that the existing one is\n   not\
    \ applicable.\n   Note that this guideline to maximize reuse does not imply that\
    \ an\n   Information Element that represents the same information from a\n   packet\
    \ as an existing Information Element should not be added to the\n   IANA IE registry.\
    \  For example, consider the ipClassOfService\n   (Element ID 5), ipDiffServCodePoint\
    \ (Element ID 98), and ipPrecedence\n   (Element ID 196) Information Elements.\
    \  These all represent subsets\n   of the same field in an IP version 4 packet\
    \ header, but different\n   uses of these bits.  The representation in one or\
    \ another of these\n   Information Elements contains information in itself as\
    \ to how the\n   bits were interpreted by the Metering Process.\n   On the other\
    \ hand, simply changing the context in which an\n   Information Element will be\
    \ used is insufficient reason for the\n   definition of a new Information Element.\
    \  For example, an extension\n   of IPFIX to log detailed information about HTTP\
    \ transactions\n   alongside network-level information should not define\n   httpClientAddress\
    \ and httpServerAddress Information Elements,\n   preferring instead the use of\
    \ sourceIPv[46]Address and\n   destinationIPv[46]Address.\n   Applications dealing\
    \ with bidirectional interactions should use\n   Bidirectional Flow Support for\
    \ IPFIX [RFC5103] to represent these\n   interactions.\n   Existing timestamp\
    \ and time range Information Elements should be\n   reused for any situation requiring\
    \ simple time stamping of an event:\n   for single observations, the observationTime*\
    \ Information Elements\n   from PSAMP are provided, and for events with a duration,\
    \ the\n   flowStart* and flowEnd* Information Elements suffice.  This\n   arrangement\
    \ allows minimal generic time handling by existing\n   Collecting Processes and\
    \ analysis workflows.  New timestamp\n   Information Elements should ONLY be defined\
    \ for semantically distinct\n   timing information (e.g., an IPFIX-exported record\
    \ containing\n   information about an event to be scheduled in the future).\n\
    \   In all cases, the use of absolute timestamp Information Elements\n   (e.g.,\
    \ flowStartMilliseconds) is recommended, as these Information\n   Elements allow\
    \ for maximum flexibility in processing with minimal\n   overhead.  Timestamps\
    \ based on the Export Time header in the\n   enclosing IPFIX Message (e.g., flowStartTimeDeltaMicroseconds)\
    \ MAY be\n   used if high-precision timing is important, export bandwidth or\n\
    \   storage space is limited, timestamps comprise a relatively large\n   fraction\
    \ of record size, and the application naturally groups records\n   into IPFIX\
    \ Messages.  Timestamps based on information that must be\n   exported in a separate\
    \ Data Record defined by an Options Template\n   (e.g., flowStartSysUpTime) MAY\
    \ be used only in the context of an\n   existing practice of using runtime-defined\
    \ epochs for the given\n   application.  New applications should avoid these structures\
    \ when\n   possible.\n"
- title: 6.2.  Applying Enterprise-Specific Information Elements
  contents:
  - "6.2.  Applying Enterprise-Specific Information Elements\n   IPFIX provides a\
    \ mechanism for defining enterprise-specific\n   Information Elements, as in Section\
    \ 3.2 of [RFC7011].  These are\n   scoped to a vendor's or organization's Structure\
    \ of Management\n   Information (SMI) Private Enterprise Number, and are under\
    \ complete\n   control of the organization assigning them.\n   For situations\
    \ in which interoperability is unimportant, new\n   information should be exported\
    \ using enterprise-specific Information\n   Elements instead of adding new Information\
    \ Elements to the IANA IE\n   registry.  These situations include:\n   o  export\
    \ of implementation-specific information, or\n   o  export of information supporting\
    \ research or experiments within a\n      single organization or closed community,\
    \ or\n   o  export of information derived in a commercially sensitive or\n   \
    \   proprietary method, or\n   o  export of information or meta-information specific\
    \ to a\n      commercially sensitive or proprietary application.\n   While work\
    \ within the IETF generally does not fall into these\n   categories, enterprise-specific\
    \ Information Elements are also useful\n   for pre-standardization testing of\
    \ a new IPFIX application.  While\n   performing initial development and interoperability\
    \ testing of a new\n   application, the Information Elements used by the application\
    \ should\n   not be submitted to IANA for inclusion in the IANA IE registry.\n\
    \   Instead, these experimental Information Elements should be\n   represented\
    \ as enterprise-specific until their definitions are\n   finalized.\n   As this\
    \ document contains best practices for defining new Information\n   Elements,\
    \ organizations using enterprise-specific Information\n   Elements are advised\
    \ to follow the guidelines set forth here even if\n   not submitting Information\
    \ Elements for inclusion in the IANA IE\n   registry.\n"
- title: 7.  Information Element Definition Checklist
  contents:
  - "7.  Information Element Definition Checklist\n   The following three checklists,\
    \ condensed from the rest of this\n   document, can be used when defining and\
    \ reviewing Information\n   Elements; they refer back to the section of this document\
    \ from which\n   they are taken.  These checklists are intended for the definition\
    \ of\n   new Information Elements; revision should follow the process defined\n\
    \   in Section 5.2, and deprecation should follow the process defined in\n   Section\
    \ 5.3.\n   Though many of the considerations in this document require the\n  \
    \ subjective judgement of Information Element authors, reviewers, and\n   IANA,\
    \ certain parts of the process may be made simpler through tool\n   support. \
    \ Items on these checklists that could be easily automated or\n   assisted by\
    \ tools are annotated with \"(tool support)\".  Other items\n   on these checklists\
    \ require some level of subjective judgement;\n   checks for semantic uniqueness\
    \ may additionally be supported by\n   textual analysis of descriptions in the\
    \ future.\n   Checklist 1 contains conditions that must be met by all proposed\n\
    \   Information Elements:\n   1.  The name must be unique within the IANA IE registry,\
    \ and the name\n       of any current or deprecated Information Element must not\
    \ be\n       reused. (Section 4.1) (tool support)\n   2.  The description must\
    \ be sufficiently semantically unique within\n       the IANA IE registry, representing\
    \ a substantially different\n       meaning from any current or deprecated Information\
    \ Element.\n       (Section 4)\n   3.  The name must start with a lowercase letter.\
    \ (Section 4.1) (tool\n       support)\n   4.  Names composed of more than one\
    \ word must use capital letters for\n       the first letter of each component\
    \ except for the first one; all\n       other letters are lowercase, even for\
    \ acronyms.  Exceptions are\n       made for acronyms containing a mixture of\
    \ lowercase and capital\n       letters, such as 'IPv4' and 'IPv6'. (Section 4.1)\
    \ (tool support)\n   5.  The data type must match the type of the data being represented.\n\
    \       (Section 4.2)\n   6.  Data type semantics must be appropriate for the\
    \ data type.\n       (Section 4.4) (tool support)\n   7.  The Information Element\
    \ identifier assigned by IANA must be\n       unique. (Section 4.3) (tool support)\n\
    \   8.  The Information Element must be reviewed for the potential of\n      \
    \ information leakage or other misuse that could reduce the\n       security of\
    \ the measured system; security considerations specific\n       to the Information\
    \ Element must be discussed in the description\n       or in a supporting RFC.\
    \  (Section 11)\n   Checklist 2 contains conditions that must be met by proposed\n\
    \   Information Elements with certain properties, as noted:\n   1.  Time values\
    \ must be defined with appropriate precision.\n       (Section 4.2)\n   2.  Strings\
    \ and octet arrays with length restrictions must note those\n       length restrictions\
    \ in their descriptions. (Section 4.2)\n   3.  Enumerations must refer to an IANA\
    \ IE registry or subregistry, or\n       a registry maintained by an external\
    \ standards organization.  If\n       no suitable registry or subregistry exists,\
    \ a new subregistry of\n       the IPFIX Information Element registry must be\
    \ created for the\n       enumeration, to be modified subject to Expert Review\
    \ [RFC5226].\n       (Section 4.7)\n   Checklist 3 contains conditions that should\
    \ be met by proposed\n   Information Elements:\n   1.   The name of an Information\
    \ Element pertaining to a specific\n        protocol or application should contain\
    \ the name of the protocol\n        or application as the first word. (Section\
    \ 4.1)\n   2.   Information Elements representing integral values should use a\n\
    \        data type for the appropriate width for the value.\n        (Section\
    \ 4.2)\n   3.   Information Elements representing counters or identifiers should\n\
    \        be represented as signed64 or unsigned64, unless they are\n        naturally\
    \ represented with narrower integral types, as\n        appropriate. (Section\
    \ 4.2)\n   4.   An Information Element should not contain internal structure,\n\
    \        subject to the exceptions in Section 4.5; candidate Information\n   \
    \     Elements with internal structure should be decomposed into\n        multiple\
    \ Information Elements. (Section 4.5)\n   5.   An Information Element should not\
    \ contain multiplicity or\n        ordinality information within the definition\
    \ of the Information\n        Element itself. (Section 4.6)\n   6.   Data type\
    \ semantics should be defined, if appropriate.\n        (Section 4.4) (tool support)\n\
    \   7.   Units should be defined, if appropriate, with new units added to\n  \
    \      the Information Element Units subregistry if necessary.\n        (Section\
    \ 4.4) (tool support)\n   8.   Ranges should be defined, if appropriate. (Section\
    \ 4.4) (tool\n        support)\n   9.   Non-reversible Information Elements (see\
    \ [RFC5103]) should note\n        non-reversibility in the description. (Section\
    \ 4.8)\n   10.  Information Elements to be registered with IANA should be\n  \
    \      intended for implementation and deployment on production\n        networks.\n"
- title: 8.  Applying IPFIX to Non-Flow Applications
  contents:
  - "8.  Applying IPFIX to Non-Flow Applications\n   At the core of IPFIX is its definition\
    \ of a Flow, a set of packets\n   sharing some common properties crossing an Observation\
    \ Point within a\n   certain time window.  However, the reliance on this definition\
    \ does\n   not preclude the application of IPFIX to domains that are not\n   obviously\
    \ handling Flow data according to this definition.  Most\n   network management\
    \ data collection tasks, those to which IPFIX is\n   most applicable, have at\
    \ their core the movement of packets from one\n   place to another; by a liberal\
    \ interpretation of the common\n   properties defining the Flow, then, almost\
    \ any event handled by these\n   can be held to concern data records conforming\
    \ to the IPFIX\n   definition of a Flow.\n   Non-Flow information defining associations\
    \ or key-value pairs, on the\n   other hand, are defined by IPFIX Options Templates.\
    \  Here, the\n   Information Elements within an Options Template Record are divided\n\
    \   into Scope Information Elements that define the key and non-scope\n   Information\
    \ Elements that define the values associated with that key.\n   Unlike Flows,\
    \ Data Records defined by Options Templates are not\n   necessarily scoped in\
    \ time; these Data Records are generally held to\n   be in effect until a new\
    \ set of values for a specific set of keys is\n   exported.  While this mechanism\
    \ is often used by IPFIX to export\n   metadata about the collection infrastructure,\
    \ it is applicable to any\n   association information.\n   An IPFIX application\
    \ can mix Data Records described either type of\n   template in an IPFIX Message\
    \ or Message stream, and exploit\n   relationships among the Flow Keys, values,\
    \ and Scopes to create\n   interrelated data structures.  See [RFC5473] for an\
    \ example\n   application of this.\n"
- title: 9.  Writing Internet-Drafts for IPFIX Applications
  contents:
  - "9.  Writing Internet-Drafts for IPFIX Applications\n   When a new application\
    \ is complex enough to require additional\n   clarification or specification as\
    \ to the use of the defined\n   Information Elements, this may be given in an\
    \ Internet-Draft.\n   Internet-Drafts for new IPFIX applications are best submitted\
    \ to a\n   Working Group with expertise in the area of the new application, or\n\
    \   to the Independent Submission stream.\n   When defining new Information Elements\
    \ in an Internet-Draft, the\n   Internet-Draft should contain a section (or subsection)\
    \ for each\n   Information Element, which contains the attributes in Section 4\
    \ in\n   human-readable form.  An example subsection is given below.  These\n\
    \   Information Element descriptions should not assign Information\n   Element\
    \ numbers, instead using placeholder identifiers for these\n   numbers (e.g.,\
    \ \"TBD1\", \"TBD2\", \"TBD3\") and a note to IANA in the IANA\n   Considerations\
    \ section to replace those placeholders in the document\n   with Information Element\
    \ numbers when the numbers are assigned.  The\n   use of these placeholder definitions\
    \ allows references to the numbers\n   in, e.g., box-and-line diagrams or template\
    \ definitions as in\n   Section 10.\n"
- title: 9.1.  Example Information Element Definition
  contents:
  - "9.1.  Example Information Element Definition\n   This is an example of an Information\
    \ Element definition that would\n   appear in an Internet-Draft.  The name appears\
    \ in the section title.\n   Description:   Description goes here.; obligatory\n\
    \   Data Type:   Data type goes here; obligatory\n   Data Type Semantics:   Data\
    \ type semantics, if any, go here; optional\n   Units:   Units, if any, go here;\
    \ optional\n   Range:   Range, if not implied by the data type, goes here; optional\n\
    \   References:   References to other RFCs or documents outside the IETF,\n  \
    \    in which additional information is given, or which are referenced\n     \
    \ by the description, go here; optional\n   ElementId:   ElementId, if known,\
    \ or \"TBD\" if it will be assigned by\n      IANA and filled in at publication\
    \ time.\n"
- title: 9.2.  Defining Recommended Templates
  contents:
  - "9.2.  Defining Recommended Templates\n   New IPFIX applications should not, in\
    \ the general case, define fixed\n   templates for export, as this throws away\
    \ much of the flexibility\n   afforded by IPFIX.  However, fixed template export\
    \ is permissible in\n   the case that the export implementation must operate in\
    \ a resource-\n   constrained environment, and/or that the application is replacing\
    \ an\n   existing fixed-format binary export format in a maximally compatible\n\
    \   way.  In any case, Collecting Processes for such applications should\n   support\
    \ the collection Templates with Information Elements in any\n   order, or Templates\
    \ with additional Information Elements.\n   An Internet-Draft clarifying the use\
    \ of new Information Elements\n   should include any recommended Template or Options\
    \ Template Records\n   necessary for supporting the application, as well as examples\
    \ of\n   records exported using these Template Records.  In defining these\n \
    \  Template Records, such Internet-Drafts should mention, subject to\n   rare\
    \ exceptions:\n   1.  that the order of different Information Elements within\
    \ a\n       Template is not significant;\n   2.  that Templates on the wire for\
    \ the application may also contain\n       additional Information Elements beyond\
    \ those specified in the\n       recommended Template;\n   3.  that a stream of\
    \ IPFIX Messages supporting the application may\n       also contain Data Records\
    \ not described by the recommended\n       Templates; and\n   4.  that any reader\
    \ of IPFIX Messages supporting the application must\n       accept these conditions.\n\
    \   Definitions of recommended Template Records for Flow-like\n   information,\
    \ where the Flow Key is well-defined, should indicate\n   which of the Information\
    \ Elements in the recommended Template are\n   Flow Keys.\n   Recommended Templates\
    \ are defined, for example, in [RFC5476] for\n   PSAMP packet reports (Section\
    \ 6.4.1) and extended packet reports\n   (Section 6.4.2).  Recommended Options\
    \ Templates are defined\n   extensively throughout the IPFIX documents, including\
    \ in the protocol\n   document itself [RFC7011] for exporting export statistics;\
    \ in the\n   file format [RFC5655] for exporting file metadata; and in\n   intermediate\
    \ process definitions such as [RFC6235] for intermediate\n   process metadata.\
    \  The discussion in these examples is a good model\n   for recommended template\
    \ definitions.\n"
- title: 10.  A Textual Format for Specifying Information Elements and Templates
  contents:
  - "10.  A Textual Format for Specifying Information Elements and Templates\n   Example\
    \ Templates given in existing IPFIX documents are generally\n   expressed using\
    \ bitmap diagrams of the respective Templates.  These\n   are illustrative of\
    \ the wire representation of simple Templates, but\n   not particularly readable\
    \ for more complicated recommended Templates,\n   provide no support for rapid\
    \ implementation of new Templates, and do\n   not adequately convey the optional\
    \ nature of ordering and additional\n   Information Elements.  Therefore, we define\
    \ a recommended textual\n   format for specifying Information Elements and Templates\
    \ in Internet-\n   Drafts in this section.\n   Here we define a simple textual\
    \ syntax for describing IPFIX\n   Information Elements and IPFIX Templates, with\
    \ human readability,\n   human writability, compactness, and ease of parser/generator\n\
    \   implementation without requiring external XML support as design\n   goals.\
    \  It is intended for use both in human communication (e.g., in\n   new Internet-Drafts\
    \ containing higher-level descriptions of IPFIX\n   Templates, or describing sets\
    \ of new IPFIX Information Elements for\n   supporting new applications of the\
    \ protocol) as well as at runtime by\n   IPFIX implementations.\n"
- title: 10.1.  Information Element Specifiers
  contents:
  - "10.1.  Information Element Specifiers\n   The basis of this format is the textual\
    \ Information Element\n   Specifier, or IESpec.  An IESpec contains each of the\
    \ four important\n   aspects of an Information Element: its name, its number,\
    \ its type,\n   and its size, separated by simple markup based on various types\
    \ of\n   brackets.  Fully qualified IESpecs may be used to specify existing or\n\
    \   new Information Elements within an Information Model, while either\n   fully\
    \ qualified or partial IESpecs may be used to define fields in a\n   Template.\n\
    \   Bare words are used for Information Element names, and each aspect of\n  \
    \ information associated with an Information Element is associated with\n   a\
    \ type of brackets:\n   o  () parentheses for Information Element numbers,\n \
    \  o  <> angle brackets for Information Element data types, and\n   o  [] square\
    \ brackets for Information Element sizes.\n   o  {} curly braces contain an optional\
    \ space-separated list of\n      context identifiers to be associated with an\
    \ Information Element,\n      as described in more detail in Section 10.2\n  \
    \ The symbol + is reserved for Information Elements nesting within\n   structured\
    \ data elements; these are described in Section 10.3.\n   Whitespace in IESpecs\
    \ is insignificant; spaces can be added after\n   each element in order, e.g.,\
    \ to align columns for better readability.\n   The basic form of a fully qualified\
    \ IESpec for an IANA-registered\n   Information Element is as follows:\n   name(number)<type>[size]\n\
    \   where 'name' is the name of the Information Element in UTF-8,\n   'number'\
    \ is the Information Element as a decimal integer, 'type' is\n   the name of the\
    \ data type as in the IANA informationElementDataTypes\n   registry, and 'size'\
    \ is the length of the Information Element in\n   octets as a decimal integer,\
    \ where 65535 or the string 'v' signifies\n   a variable-length Information Element.\
    \ [size] may be omitted.  In\n   this case, the data type's native or default\
    \ size is assumed.\n   The basic form of a fully qualified IESpec for an enterprise-specific\n\
    \   Information Element is as follows:\n   name(pen/number)<type>[size]\n   where\
    \ 'pen' is the Private Enterprise Number as a decimal integer.\n   A fully qualified\
    \ IESpec is intended to express enough information\n   about an Information Element\
    \ to decode and display Data Records\n   defined by Templates containing that\
    \ Information Element.  Range,\n   unit, semantic, and description information,\
    \ as in [RFC5610], is not\n   supported by this syntax.\n   Example fully qualified\
    \ IESpecs follow:\n      octetDeltaCount(1)<unsigned64>[8]\n      octetDeltaCount(1)<unsigned64>\
    \ (unsigned64 is natively 8 octets\n      long)\n      sourceIPv4Address(8)<ipv4Address>\n\
    \      wlanSSID(146)<string>[v]\n      sipRequestURI(35566/403)<string>[65535]\n\
    \   A partial IESpec is any IESpec that is not fully qualified; these are\n  \
    \ useful when defining templates.  A partial IESpec is assumed to take\n   missing\
    \ values from its canonical definition in the IANA IE registry.\n   At minimum,\
    \ a partial IESpec must contain a name, or a number.  Any\n   name, number, or\
    \ type information given with a partial IESpec must\n   match the values given\
    \ in the Information Model; however, size\n   information in a partial IESpec\
    \ overrides size information in the\n   Information Model; in this way, IESpecs\
    \ can be used to express\n   reduced-size encoding for Information Elements.\n\
    \   Example partial IESpecs follow:\n   o  octetDeltaCount\n   o  octetDeltaCount[4]\
    \ (reduced-size encoding)\n   o  (1)\n   o  (1)[4] (reduced-size encoding; note\
    \ that this is exactly\n      equivalent to an Information Element specifier in\
    \ a Template)\n"
- title: 10.2.  Specifying Templates
  contents:
  - "10.2.  Specifying Templates\n   A Template can then be defined simply as an ordered,\
    \ newline-\n   separated sequence of IESpecs.  IESpecs in example Templates\n\
    \   illustrating a new application of IPFIX should be fully qualified.\n   Flow\
    \ Keys may be optionally annotated by appending the {key} context\n   to the end\
    \ of each Flow Key specifier.  A template counting packets\n   and octets per\
    \ 5-tuple with millisecond precision in IESpec syntax is\n   shown in Figure 1.\n\
    \   flowStartMilliseconds(152)<dateTimeMilliseconds>[8]\n   flowEndMilliseconds(153)<dateTimeMilliseconds>[8]\n\
    \   octetDeltaCount(1)<unsigned64>[8]\n   packetDeltaCount(2)<unsigned64>[8]\n\
    \   sourceIPv4Address(8)<ipv4Address>[4]{key}\n   destinationIPv4Address(12)<ipv4Address>[4]{key}\n\
    \   sourceTransportPort(7)<unsigned16>[2]{key}\n   destinationTransportPort(11)<unsigned16>[2]{key}\n\
    \   protocolIdentifier(4)<unsigned8>[1]{key}\n      Figure 1: Sample Flow Template\
    \ in IESpec Syntax\n   An Options Template is specified similarly.  Scope is specified\n\
    \   appending the {scope} context to the end of each IESpec for a Scope\n   IE.\
    \  Due to the way Information Elements are represented in Options\n   Templates,\
    \ all {scope} IESpecs must appear before any non-scope\n   IESpec.  The Flow Key\
    \ Options Template defined in Section 4.4 of\n   [RFC7011] in IESpec syntax is\
    \ shown in Figure 2.\n   templateId(145)<unsigned16>[2]{scope}\n   flowKeyIndicator(173)<unsigned64>[8]\n\
    \      Figure 2: Flow Key Options Template in IESpec Syntax\n"
- title: 10.3.  Specifying IPFIX Structured Data
  contents:
  - "10.3.  Specifying IPFIX Structured Data\n   IESpecs can also be used to illustrate\
    \ the structure of the\n   information exported using the IPFIX Structured Data\
    \ extension\n   [RFC6313].  Here, the semantics of the structured data elements\
    \ are\n   specified using contexts, and the Information Elements within each\n\
    \   structured data element follow the structured data element, prefixed\n   with\
    \ + to show they are contained therein.  Arbitrary nesting of\n   structured data\
    \ elements is possible by using multiple + signs in the\n   prefix.  For example,\
    \ a basic list of IP addresses with \"one or more\"\n   semantics would be expressed\
    \ using partially qualified IESpecs as\n   shown in Figure 3.\n   basicList{oneOrMoreOf}\n\
    \   +sourceIPv4Address(8)[4]\n      Figure 3: Sample basicList in IESpec Syntax\n\
    \   And an example subTemplateList itself containing a basicList is shown\n  \
    \ in Figure 4.\n   subTemplateList{allOf}\n   +basicList{oneOrMoreOf}\n   ++sourceIPv4Address(8)[4]\n\
    \   +destinationIPv4Address(12)[4]\n      Figure 4: Sample subTemplateList in\
    \ IESpec Syntax\n   This describes a subTemplateMultilist containing all of the\
    \ expressed\n   set of source-destination pairs, where the source address itself\n\
    \   could be one of any number in a basicList (e.g., in the case of SCTP\n   multihoming).\n\
    \   The contexts associable with structured data Information Elements are\n  \
    \ the semantics, as defined in Section 4.4 of [RFC6313]; a structured\n   data\
    \ Information Element without any context is taken to have\n   undefined semantics.\
    \  More information on the application of\n   structured data is available in\
    \ [RFC6313].\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   The IE-DOCTORS must evaluate the security aspects\
    \ of new Information\n   Elements in light of the information they could provide\
    \ to support\n   potential attacks against the measured network or entities about\n\
    \   which information is exported.  Specific security aspects to evaluate\n  \
    \ include whether the exported information contains personally\n   identifiable\
    \ information, or information that should be kept\n   confidential about the described\
    \ entities (e.g., partial payload, or\n   configuration information that could\
    \ be exploited).  This is not to\n   say that such Information Elements should\
    \ not be defined, but there\n   must be an evaluation of the security risk versus\
    \ the utility of the\n   exported information for the intended application.  For\
    \ example, \"A\n   Framework for Packet Selection and Reporting\" [RFC5474] concluded\
    \ in\n   Section 12.3.2 that the hash function's private parameters should not\n\
    \   be exported within IPFIX.\n   Security considerations specific to an Information\
    \ Element must be\n   addressed in the Security Considerations section of the\
    \ Internet-\n   Draft describing the Information Element, or in the Information\n\
    \   Element description itself in case the Information Element is not\n   defined\
    \ in an Internet-Draft.  Information Elements with specific\n   security considerations\
    \ should be described in an Internet-Draft.\n   For example, the ipHeaderPacketSection\
    \ in the IPFIX IE registry\n   mentions: \"This Information Element, which may\
    \ have a variable\n   length, carries a series of octets from the start of the\
    \ IP header of\n   a sampled packet.  With sufficient length, this element also\
    \ reports\n   octets from the IP payload, subject to [RFC2804].  See the Security\n\
    \   Considerations section\".  Another example can be seen in the \"Packet\n \
    \  Sampling (PSAMP) Protocols Specification\" [RFC5476]: \"In the basic\n   Packet\
    \ Report, a PSAMP Device exports some number of contiguous bytes\n   from the\
    \ start of the packet, including the packet header (which\n   includes link layer,\
    \ network layer, and other encapsulation headers)\n   and some subsequent bytes\
    \ of the packet payload.  The PSAMP Device\n   SHOULD NOT export the full payload\
    \ of conversations, as this would\n   mean wiretapping [RFC2804].  The PSAMP Device\
    \ MUST respect local\n   privacy laws.\"\n"
- title: 12.  Acknowledgments
  contents:
  - "12.  Acknowledgments\n   Thanks to Paul Aitken, Andrew Feren, Dan Romascanu,\
    \ and David\n   Harrington for their reviews and feedback.  Thanks as well to\
    \ Roni\n   Even and Yoav Nir for their area reviews; and to Pete Resnick, Adrian\n\
    \   Farrel, Stephen Farrell, Stewart Bryant, and Barry Leiba for their\n   contributions\
    \ during IESG discussions.  This work is materially\n   supported by the European\
    \ Union Seventh Framework Programme under\n   grant agreement 257315 (DEMONS).\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC5103]  Trammell, B. and E. Boschi, \"Bidirectional\
    \ Flow Export\n              Using IP Flow Information Export (IPFIX)\", RFC 5103,\n\
    \              January 2008.\n   [RFC5610]  Boschi, E., Trammell, B., Mark, L.,\
    \ and T. Zseby,\n              \"Exporting Type Information for IP Flow Information\
    \ Export\n              (IPFIX) Information Elements\", RFC 5610, July 2009.\n\
    \   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \       May 2008.\n   [RFC6313]  Claise, B., Dhandapani, G., Aitken, P., and S.\
    \ Yates,\n              \"Export of Structured Data in IP Flow Information Export\n\
    \              (IPFIX)\", RFC 6313, July 2011.\n   [RFC7011]  Claise, B., Ed.,\
    \ Trammell, B., Ed., and P. Aitken,\n              \"Specification of the IP Flow\
    \ Information Export (IPFIX)\n              Protocol for the Exchange of Flow\
    \ Information\", STD 77,\n              RFC 7011, September 2013.\n   [RFC7012]\
    \  Claise, B., Ed. and B. Trammell, Ed., \"Information Model\n              for\
    \ IP Flow Information Export (IPFIX)\", RFC 7012,\n              September 2013.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [RFC2804]  IAB IESG, \"IETF Policy on Wiretapping\"\
    , RFC 2804, May\n              2000.\n   [RFC3261]  Rosenberg, J., Schulzrinne,\
    \ H., Camarillo, G., Johnston,\n              A., Peterson, J., Sparks, R., Handley,\
    \ M., and E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC\
    \ 3261,\n              June 2002.\n   [RFC3954]  Claise, B., \"Cisco Systems NetFlow\
    \ Services Export Version\n              9\", RFC 3954, October 2004.\n   [RFC5102]\
    \  Quittek, J., Bryant, S., Claise, B., Aitken, P., and J.\n              Meyer,\
    \ \"Information Model for IP Flow Information Export\",\n              RFC 5102,\
    \ January 2008.\n   [RFC5472]  Zseby, T., Boschi, E., Brownlee, N., and B. Claise,\
    \ \"IP\n              Flow Information Export (IPFIX) Applicability\", RFC 5472,\n\
    \              March 2009.\n   [RFC5473]  Boschi, E., Mark, L., and B. Claise,\
    \ \"Reducing Redundancy\n              in IP Flow Information Export (IPFIX) and\
    \ Packet Sampling\n              (PSAMP) Reports\", RFC 5473, March 2009.\n  \
    \ [RFC5474]  Duffield, N., Chiou, D., Claise, B., Greenberg, A.,\n           \
    \   Grossglauser, M., and J. Rexford, \"A Framework for Packet\n             \
    \ Selection and Reporting\", RFC 5474, March 2009.\n   [RFC5476]  Claise, B.,\
    \ Johnson, A., and J. Quittek, \"Packet Sampling\n              (PSAMP) Protocol\
    \ Specifications\", RFC 5476, March 2009.\n   [RFC5560]  Uijterwaal, H., \"A One-Way\
    \ Packet Duplication Metric\", RFC\n              5560, May 2009.\n   [RFC5655]\
    \  Trammell, B., Boschi, E., Mark, L., Zseby, T., and A.\n              Wagner,\
    \ \"Specification of the IP Flow Information Export\n              (IPFIX) File\
    \ Format\", RFC 5655, October 2009.\n   [RFC6235]  Boschi, E. and B. Trammell,\
    \ \"IP Flow Anonymization\n              Support\", RFC 6235, May 2011.\n   [IANA-IPFIX]\n\
    \              IANA, \"IP Flow Information Export (IPFIX) Entities\",\n      \
    \        <http://www.iana.org/assignments/ipfix>.\n"
- title: Appendix A.  Example Information Element Definitions
  contents:
  - "Appendix A.  Example Information Element Definitions\n   This section contains\
    \ a few example Information Element definitions\n   as they would appear in an\
    \ Internet-Draft.  Note the conformance of\n   these examples to the guidelines\
    \ in Section 4.\n   The sipResponseStatus Information Element (Appendix A.1) illustrates\n\
    \   the addition of an Information Element representing Layer 7\n   application\
    \ information, with a reference to the registry containing\n   the allowable values.\
    \  The duplicatePacketDeltaCount Information\n   Element (Appendix A.2) illustrates\
    \ the addition of a new metric, with\n   a reference to the RFC defining the metric.\
    \  The ambientTemperature\n   Information Element (Appendix A.3) illustrates the\
    \ addition of a new\n   measured value outside the area of traditional networking\n\
    \   applications.\n"
- title: A.1.  sipResponseStatus
  contents:
  - "A.1.  sipResponseStatus\n   Description:   The SIP Response code as an integer,\
    \ as in the\n      Response Codes registry at http://www.iana.org/assignments/sip-\n\
    \      parameters defined in [RFC3261] and amended in subsequent RFCs.\n     \
    \ The presence of this Information Element in a SIP Message record\n      marks\
    \ it as describing a SIP response; if absent, the record\n      describes a SIP\
    \ request.\n   Data Type:   unsigned16\n   Data Type Semantics:   identifier\n\
    \   References:   [RFC3261]\n   ElementId:   TBD1\n   Replaces Enterprise-Specific\
    \ Element:  35566 / 412\n"
- title: A.2.  duplicatePacketDeltaCount
  contents:
  - "A.2.  duplicatePacketDeltaCount\n   Description:   The number of uncorrupted\
    \ and identical additional\n      copies of each individual packet in the Flow\
    \ arriving at the\n      destination since the previous Data Record for this Flow\
    \ (if any),\n      as measured at the Observation Point.  This is measured as\
    \ the\n      Type-P-one-way-packet-duplication metric defined in Section 3 of\n\
    \      [RFC5560].\n   Data Type:   unsigned64\n   Data Type Semantics:   deltaCounter\n\
    \   Units:   packets\n   References:   [RFC5560]\n   ElementId:   TBD2\n"
- title: A.3.  ambientTemperature
  contents:
  - "A.3.  ambientTemperature\n   Description:   An ambient temperature observed by\
    \ measurement\n      equipment at an Observation Point, positioned such that it\n\
    \      measures the temperature of the surroundings (i.e., not including\n   \
    \   any heat generated by the measuring or measured equipment),\n      expressed\
    \ in degrees Celsius.\n   Data Type:   float\n   Units:   degrees Celsius\n  \
    \ Range:   -273.15 - +inf\n   ElementId:   TBD3\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Brian Trammell\n   Swiss Federal Institute of Technology\
    \ Zurich\n   Gloriastrasse 35\n   8092 Zurich\n   Switzerland\n   Phone: +41 44\
    \ 632 70 13\n   EMail: trammell@tik.ee.ethz.ch\n   Benoit Claise\n   Cisco Systems,\
    \ Inc.\n   De Kleetlaan 6a b1\n   1831 Diegem\n   Belgium\n   Phone: +32 2 704\
    \ 5622\n   EMail: bclaise@cisco.com\n"
