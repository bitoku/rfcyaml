- title: __initial_text__
  contents:
  - '              Experience of Implementing NETCONF over SOAP

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document discusses implementation experience of NETCONF over\n\
    \   SOAP.  Note that Section 2.4 of RFC 4741 states, \"A NETCONF\n   implementation\
    \ MUST support the SSH transport protocol mapping\".\n   Therefore, a NETCONF\
    \ implementation that only supports the SOAP\n   transport described in this document\
    \ and not (at least) also SSH is\n   not in compliance with the NETCONF standards.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes how the authors developed a SOAP (Simple\n\
    \   Object Access Protocol)-based NETCONF (Network Configuration\n   Protocol)\
    \ client and server.  It describes an alternative SOAP\n   binding for NETCONF\
    \ that does not interoperate with an RFC 4743\n   conformant implementation making\
    \ use of cookies on top of the\n   persistent transport connections of HTTP. \
    \ When SOAP is used as a\n   transport protocol for NETCONF, various kinds of\
    \ development tools\n   are available.  By making full use of these tools, developers\
    \ can\n   significantly reduce their workload.  The authors developed an NMS\n\
    \   (Network Management System) and network equipment that can deal with\n   NETCONF\
    \ messages sent over SOAP.  This document aims to provide\n   NETCONF development\
    \ guidelines gained from the experience of\n   implementing a SOAP-based NETCONF\
    \ client and server.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. NETCONF over SOAP ..........................................3\n  \
    \    1.2. Motivation .................................................3\n   2.\
    \ NETCONF Development on Web Services Framework ...................4\n      2.1.\
    \ WSDL as an Interface Description Language ..................5\n      2.2. Generation\
    \ of APIs .........................................5\n   3. Architecture of the\
    \ NETCONF over SOAP Implementation ............5\n      3.1. SOAP Implementation\
    \ in NMS .................................6\n           3.1.1. SOAP Parser in\
    \ NMS ..................................7\n           3.1.2. Session Maintenance\
    \ in NMS ..........................7\n      3.2. SOAP Implementation in the Network\
    \ Equipment ...............8\n           3.2.1. SOAP Parser in the Network Equipment\
    \ ................8\n           3.2.2. Session Maintenance in the Network Equipment\
    \ ........8\n   4. Guidelines for Developing NETCONF Clients and Servers ...........8\n\
    \      4.1. Procedures of Development of NETCONF Clients ...............9\n  \
    \         4.1.1. Developing NETCONF Clients without Eclipse .........10\n    \
    \       4.1.2. Developing NETCONF Clients Using Eclipse ...........11\n      4.2.\
    \ Procedures of Development of NETCONF Servers ..............13\n           4.2.1.\
    \ Developing NETCONF Servers without Eclipse .........14\n           4.2.2. Developing\
    \ NETCONF Servers Using Eclipse ...........15\n           4.2.3. Developing NETCONF\
    \ Servers with C\n                  Programming Language ...............................18\n\
    \   5. Security Considerations ........................................18\n  \
    \ 6. Acknowledgements ...............................................18\n   7.\
    \ References .....................................................19\n      7.1.\
    \ Normative References ......................................19\n      7.2. Informative\
    \ References ....................................19\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  NETCONF over SOAP
  contents:
  - "1.1.  NETCONF over SOAP\n   This document is not a product from the NETCONF WG\
    \ but a report on\n   the experience acquired by individual developers.\n   SOAP\
    \ (Simple Object Access Protocol) was specified in [RFC4743] as\n   one of the\
    \ transport protocols for NETCONF.  It is designed to use\n   XML (eXtensible\
    \ Markup Language) as its description language, which\n   is a fundamental messaging\
    \ technology for Web Services.  For this\n   reason, SOAP is well suited to the\
    \ NETCONF protocol and can be\n   deployed widely.\n   To develop a SOAP-based\
    \ NETCONF client and server, several\n   development tools are available as open-source\
    \ software.  The authors\n   developed a SOAP-based NETCONF client and server\
    \ by using available\n   development tools.  The SOAP-based NETCONF client was\
    \ developed by\n   utilizing Java APIs (Application Programming Interfaces) that\
    \ are\n   automatically generated from the XSD (XML Schema Definition) file and\n\
    \   WSDL (Web Services Description Language) file obtained from [RFC4741]\n  \
    \ and [RFC4743], respectively.  The SOAP-based NETCONF client that the\n   authors\
    \ developed acts as an NMS (Network Management System).  The\n   SOAP-based NETCONF\
    \ server that the authors developed runs on network\n   equipment and accepts\
    \ NETCONF messages sent from the NETCONF client.\n"
- title: 1.2.  Motivation
  contents:
  - "1.2.  Motivation\n   The aim of this document is to describe why the authors\
    \ believe SOAP\n   is practical as a transport protocol for NETCONF when an NMS\
    \ is\n   developed.  When developing an NMS that uses SOAP as its transport\n\
    \   protocol, development tools and procedures can be used according to\n   the\
    \ Web Services framework.  This document also describes the\n   experience of\
    \ implementing NETCONF over SOAP so that even those who\n   have little knowledge\
    \ of SOAP can start developing a SOAP-based\n   NETCONF client and server.\n \
    \  This document describes an alternative SOAP binding for NETCONF that\n   does\
    \ not interoperate with an RFC 4743 conformant implementation as\n   it relies\
    \ on cookies used on top of the persistent transport\n   connections of HTTP.\
    \  This is provided for information purposes only\n   based on the implementation\
    \ experience of the authors.\n"
- title: 2.  NETCONF Development on Web Services Framework
  contents:
  - "2.  NETCONF Development on Web Services Framework\n   SOAP is a fundamental messaging\
    \ technology for Web Services.\n   Therefore, if SOAP is used as a transport protocol\
    \ for NETCONF, a\n   network configuration performed by NETCONF is achieved on\
    \ the Web\n   Services framework.  In this section, the overall architecture of\
    \ Web\n   Services is described.\n    +----------------+ +----------------------------+\n\
    \    |     Format     | |     Register / Search      |\n    |                |\
    \ |                            |\n    |      XML       | |           UDDI    \
    \         |\n    |                | |  (Universal Description,   |\n    |    \
    \            | | Discovery and Integration) |\n    |                | +----------------------------+\n\
    \    |                | +----------------------------+ +----------------+\n  \
    \  |                | |    Service Description     | |      API       |\n    |\
    \                | |                            | |                |\n    |  \
    \              | |           WSDL             | |      JAXM      |\n    |    \
    \            | +----------------------------+ | (Java API for  |\n    |      \
    \          | +----------------------------+ | XML Messaging) |\n    |        \
    \        | |   Fundamental Messaging    | |    JAX-RPC     |\n    |          \
    \      | |                            | | (Java API for  |\n    |            \
    \    | |           SOAP             | |   XML / RPC)   |\n    +----------------+\
    \ +----------------------------+ +----------------+\n                       +----------------------------+\n\
    \                       |        Transport           |\n                     \
    \  |                            |\n                       |       HTTP, HTTPS...\
    \       |\n                       +----------------------------+\n           \
    \   Figure 1: Overall Architecture of Web Services\n   As depicted in Figure 1,\
    \ peripheral technologies around SOAP/HTTP are\n   well developed.  Therefore,\
    \ if SOAP/HTTP is chosen as a transport\n   layer for the NETCONF protocol, the\
    \ NMS development based on the Web\n   Services framework can choose from different\
    \ optional services and\n   might be less expensive based on the use of already\
    \ available\n   services.\n"
- title: 2.1.  WSDL as an Interface Description Language
  contents:
  - "2.1.  WSDL as an Interface Description Language\n   WSDL [WSDL] defines how SOAP\
    \ messages are exchanged between Web\n   Services entities.  Interfaces of Web\
    \ Services entities are\n   automatically generated by development tools when\
    \ importing a WSDL\n   file.  Interfaces generated in this manner act as APIs.\
    \  For the\n   development of an NMS, only these APIs are necessary; there is\
    \ no\n   need to use SOAP directly.\n   Useful tools that can import a WSDL file\
    \ are available with SOAP.\n   For instance, Apache Axis [Axis] generates an interface\
    \ from a WSDL\n   file and is a widely used SOAP implementation middleware.\n"
- title: 2.2.  Generation of APIs
  contents:
  - "2.2.  Generation of APIs\n   As described in the previous section, APIs are generated\
    \ from a WSDL\n   file by development tools such as Apache Axis.  Such APIs are\
    \ in the\n   form of a Java library and act as programming interfaces for an NMS.\n\
    \   By using these APIs, an NMS can send SOAP messages to Web Services\n   entities.\n"
- title: 3.  Architecture of the NETCONF over SOAP Implementation
  contents:
  - "3.  Architecture of the NETCONF over SOAP Implementation\n   The architecture\
    \ of the NETCONF over SOAP implementation is shown in\n   Figure 2.  A NETCONF\
    \ implementation residing in an NMS works as a\n   NETCONF client while network\
    \ equipment acts as a NETCONF server.  In\n   this document, we call NETCONF-client\
    \ and NETCONF-server\n   implementations a NETCONF application and a NETCONF service\
    \ provider,\n   respectively.  A SOAP implementation may be installed on both\
    \ the NMS\n   and the network equipment.  Each instance of the SOAP implementations\n\
    \   exchanges SOAP messages based on WSDL, as described in [RFC4743].  If\n  \
    \ Java libraries generated from the WSDL are provided in the NMS,\n   engineers\
    \ can develop a NETCONF application, which configures network\n   equipment via\
    \ the NETCONF protocol, by utilizing the Java library.\n   There is no need for\
    \ engineers to use XML or SOAP directly.\n    +---------------------------+  \
    \ +---------------------------+\n    |      NETCONF Client       |   |       NETCONF\
    \ Server      |\n    |           (NMS)           |   |     (Network Equipment)\
    \   |\n    |  +---------------------+  |   |  +---------------------+  |\n   \
    \ |  | NETCONF application |  |   |  |    NETCONF service  |  |\n    |  |    \
    \                 |  |   |  |       provider      |  |\n    |  +---------------------+\
    \  |   |  +---------------------+  |\n    |  +---------------------+  |   |  \
    \                         |\n    |  |    Java library     |  |   |           \
    \                |\n    |  +---------------------+  |   |                    \
    \       |\n    |  +---------------------+  |   |  +---------------------+  |\n\
    \    |  | SOAP Implementation |  |   |  | SOAP Implementation |  |\n    |  | \
    \   (Apache Axis)    |  |   |  |                     |  |\n    |  +---------------------+\
    \  |   |  +---------------------+  |\n    +-------^----------|--------+   +-------^----------|--------+\n\
    \            |          |     rpc-request    |          |\n            |     \
    \     +-----  /SOAP    ----+          |\n            |                  / HTTP(S)\
    \               |\n            |                                          |\n\
    \            |                 rpc-reply                |\n            +----------------\
    \  /SOAP    ---------------+\n                               / HTTP(S)\n     \
    \   Figure 2: Architecture of NETCONF Implementation Using SOAP\n   The SOAP implementation\
    \ in both the NMS and network equipment is\n   explained in detail in the following\
    \ sections.\n"
- title: 3.1.  SOAP Implementation in NMS
  contents:
  - "3.1.  SOAP Implementation in NMS\n   Several SOAP implementations appropriate\
    \ for use in an NMS are\n   available today.  Apache Axis is one such widely used\
    \ implementation.\n   Axis works as a SOAP implementation and an NMS-development\
    \ tool.  For\n   instance, WSDL2Java, one of Axis' tools, generates Java-class\
    \ files\n   from a WSDL file.  Another tool called Java2WSDL does the opposite:\n\
    \   it generates a WSDL file from Java-class files.  Consequently,\n   various\
    \ benefits can be obtained if Axis is introduced as a SOAP\n   implementation.\n\
    \   To develop a NETCONF application that is capable of various functions\n  \
    \ such as releasing log messages, Java-class files generated by the\n   Axis tool\
    \ may be extended by adding more functions.  By utilizing\n   these Java libraries,\
    \ engineers can easily develop NETCONF\n   applications.\n"
- title: 3.1.1.  SOAP Parser in NMS
  contents:
  - "3.1.1.  SOAP Parser in NMS\n   The SOAP Parser function is performed entirely\
    \ by a SOAP\n   implementation such as Apache Axis.\n"
- title: 3.1.2.  Session Maintenance in NMS
  contents:
  - "3.1.2.  Session Maintenance in NMS\n   When exchanging NETCONF messages between\
    \ an NMS and network\n   equipment, a NETCONF session has to be maintained on\
    \ both sides, as\n   described in [RFC4741].\n   In [RFC4743], HTTP is specified\
    \ as an option of an underlying\n   protocol for NETCONF over SOAP.  When HTTP\
    \ is used for that purpose,\n   it is also specified that a NETCONF session state\
    \ is tied to the\n   state of the underlying transport (TCP) connection (just\
    \ like in\n   NETCONF over SSH [RFC4742] and NETCONF over BEEP [RFC4744]).\n \
    \  However, HTTP itself is a stateless protocol, and many server\n   implementations\
    \ process user requests independently of previous\n   requests received over the\
    \ same transport connection.  To simplify\n   implementation of the NETCONF service\
    \ provider, we used the cookie\n   field inside the HTTP header to map incoming\
    \ requests to NETCONF\n   sessions.  Note that this means our implementation actually\
    \ uses an\n   alternative SOAP binding for NETCONF, which does not interoperate\n\
    \   with RFC 4743 compliant implementations.\n   For example, the implemented\
    \ NETCONF-session maintenance in the NMS\n   works as follows.  After the NMS\
    \ sends a NETCONF hello message to the\n   network equipment, the NETCONF service\
    \ provider in the network\n   equipment allocates a session identifier for the\
    \ NETCONF application\n   in the NMS and writes it inside the <session> element\
    \ of a replying\n   NETCONF hello message, as described in [RFC4741].  At the\
    \ same time,\n   the network equipment writes the same value in the cookie field\n\
    \   inside an HTTP header.  After that, a SOAP message encompassing the\n   replying\
    \ NETCONF hello message is added.  When the NMS receives the\n   newly allocated\
    \ session identifier from the replying NETCONF hello\n   message, the NETCONF\
    \ application stores it and writes it inside a\n   <session> element for subsequent\
    \ NETCONF request messages and in a\n   cookie field for subsequent HTTP headers.\
    \  By recognizing the session\n   identifier in NETCONF request messages and the\
    \ cookie field in HTTP\n   headers, the network equipment can maintain both a\
    \ NETCONF session\n   and the state of an HTTP connection.  The NETCONF session\
    \ is\n   maintained over the maintained state of the HTTP connection.  The\n \
    \  stored session identifier is erased when the NMS sends a NETCONF\n   close-session\
    \ message and receives a NETCONF response message from\n   the network equipment.\n"
- title: 3.2.  SOAP Implementation in the Network Equipment
  contents:
  - "3.2.  SOAP Implementation in the Network Equipment\n   To accept SOAP messages\
    \ sent from the NMS, it is also necessary to\n   provide SOAP in the network equipment.\
    \  As in the case of NMS, some\n   free SOAP implementations are available today\
    \ for installation on\n   network equipment.  However, the memory capacity of\
    \ the network\n   equipment might be limited.  Therefore, the SOAP implementation\
    \ may\n   be chosen taking memory capacity into consideration.  In some cases,\n\
    \   a memory-saving method will be required when implementing SOAP in the\n  \
    \ network equipment.\n"
- title: 3.2.1.  SOAP Parser in the Network Equipment
  contents:
  - "3.2.1.  SOAP Parser in the Network Equipment\n   A SOAP header inside the SOAP\
    \ envelope is defined as optional.\n   Therefore, the module that processes the\
    \ SOAP header can be omitted\n   if the memory capacity in the network equipment\
    \ is insufficient.  In\n   this case, a SOAP parser in the network equipment is\
    \ allowed to parse\n   only mandatory parts of a SOAP envelope.\n"
- title: 3.2.2.  Session Maintenance in the Network Equipment
  contents:
  - "3.2.2.  Session Maintenance in the Network Equipment\n   To maintain NETCONF\
    \ sessions with the NMS, the NETCONF service\n   provider in the network equipment\
    \ has to provide a session identifier\n   to the NMS, as described in [RFC4741].\n\
    \   For example, the implemented NETCONF-session maintenance in the\n   network\
    \ equipment works as follows.  When the network equipment\n   receives a NETCONF\
    \ hello message from the NMS, the NETCONF service\n   provider in the network\
    \ equipment sets a session identifier inside\n   the <session> element of a replying\
    \ NETCONF hello message, as\n   described in [RFC4741].  At the same time, the\
    \ network equipment also\n   sets the same value in the cookie field inside an\
    \ HTTP header.  After\n   that, a SOAP message encompassing the replying NETCONF\
    \ hello message\n   is added.  The cookie field inside the HTTP header is used\
    \ for\n   maintaining the state of the HTTP connection over which the NETCONF-\n\
    \   session maintenance is ensured.  The network equipment then sends an\n   HTTP\
    \ response message to the NMS.  When the network equipment\n   receives a NETCONF\
    \ close-session message from the NMS, it erases the\n   stored session identifier.\n"
- title: 4.  Guidelines for Developing NETCONF Clients and Servers
  contents:
  - "4.  Guidelines for Developing NETCONF Clients and Servers\n   In the case of\
    \ SOAP transport mapping, sharing information on the\n   kinds of development\
    \ tools that are available would help developers\n   start developing SOAP-based\
    \ NETCONF clients and servers.  That would\n   contribute to the rapid deployment\
    \ of SOAP-based NETCONF clients and\n   servers.\n"
- title: 4.1.  Procedures of Development of NETCONF Clients
  contents:
  - "4.1.  Procedures of Development of NETCONF Clients\n   To develop a SOAP-based\
    \ NETCONF client, a stub code may be generated.\n   A stub is a library that is\
    \ generated automatically from WSDL by a\n   Web Services tool and that acts as\
    \ a group of APIs.  When using\n   Apache Axis as a Web Services tool, a generated\
    \ stub is in the form\n   of Java APIs.  These Java APIs display interfaces of\
    \ a Web Service as\n   if they are methods capable of configuring a local machine.\n\
    \   The WSDL file named \"netconf-soap_1.0.wsdl\", which is selected from\n  \
    \ [RFC4743], specifies NETCONF messages to be exchanged between the\n   NETCONF\
    \ client and server.  These NETCONF messages are the \"hello\"\n   message and\
    \ \"rpc\" message.  Therefore, stub codes for creating the\n   \"hello\" message\
    \ and \"rpc\" message are generated from \"netconf-\n   soap_1.0.wsdl\".  However,\
    \ the file \"netconf-soap_1.0.wsdl\" is not\n   sufficient because no service\
    \ element is specified.\n   In \"myNetconfService.wsdl\", which is also selected\
    \ from [RFC4743], a\n   service element is specified and \"netconf-soap_1.0.wsdl\"\
    \ is imported.\n   Stub codes generated from those WSDL files are found in files\
    \ such as\n   \"Netconf.java\", \"NetconfLocator.java\", and \"NetconfBindingStub.java\"\
    .\n   When interfaces are used to operate the NETCONF protocol in the\n   manner\
    \ of \"get-config\" and \"edit-config\", for example, an XML schema\n   file named\
    \ \"netconf.xsd\", which is selected from [RFC4741], is used\n   by being imported\
    \ into \"netconf-soap_1.0.wsdl\".  Using the XML\n   schema, methods of operating\
    \ the NETCONF protocol are generated in\n   files such as \"GetConfigType.java\"\
    \ and \"EditConfigType.java\".\n   When interfaces are used to configure network\
    \ functions at the\n   network equipment, a data model of each network function\
    \ has to be\n   defined in the style of an XML schema.  The XML schema may be\n\
    \   imported into \"netconf-soap_1.0.wsdl\" in the same manner as that of\n  \
    \ the XML schema in [RFC4741].\n   The connection between the NETCONF schema and\
    \ a data model should be\n   made by inserting the following attribute into elements\
    \ of each data\n   model.  This attribute is defined in the XML schema in [RFC4741].\n\
    \   <xs:attribute name=\"operation\" type=\"editOperationType\"\n   default=\"\
    merge\"/>\n   Consequently, using \"myNetconfService.wsdl\" to import \"netconf-\n\
    \   soap_1.0.wsdl\", NETCONF schema, and the data model makes it possible\n  \
    \ to generate stub files containing interfaces to configure network\n   equipment.\n\
    \   When stub codes are generated, the development environment may be\n   arranged\
    \ as well.  The development of a Java-based NETCONF client may\n   use JDK (Java\
    \ Development Kit) [JDK] and Apache Axis.  In addition,\n   using some IDE (Integrated\
    \ Development Environment) such as Eclipse\n   [Eclipse] with Apache Ant [Ant]\
    \ and NetBeans [NetBeans] would reduce\n   the developer workload significantly.\
    \  When Eclipse is used as an\n   IDE, first, the library (*.jar files) of Axis\
    \ has to be added to the\n   development project's build path as an external library.\
    \  The library\n   of Axis acts as a SOAP library, so there is no need to be concerned\n\
    \   about SOAP messaging when programming a NETCONF client using the\n   library\
    \ of Axis.\n"
- title: 4.1.1.  Developing NETCONF Clients without Eclipse
  contents:
  - "4.1.1.  Developing NETCONF Clients without Eclipse\n   Given that development\
    \ of a NETCONF client is carried out in the\n   environment of a Windows computer\
    \ without Eclipse, and that\n   \"myNetconfService.wsdl\" is placed in the \"\
    C:\\NetconfClient\"\n   directory, a stub is generated by executing the following\
    \ command in\n   the command prompt.\n   C:\\NetconfClient>java -classpath .;%AXIS_HOME%\\\
    lib\\axis.jar;%\n   AXIS_HOME%\\lib\\jaxrpc.jar;%AXIS_HOME%\\lib\\saaj.jar;%AXIS_HOME%\n\
    \   \\lib\\commons-logging-1.0.4.jar;%AXIS_HOME%\\lib\\commons-discovery-\n  \
    \ 0.2.jar;%AXIS_HOME%\\lib\\wsdl4j-1.5.1.jar\n   org.apache.axis.wsdl.WSDL2Java\
    \ -p stub myNetconfService.wsdl\n   In the directory where the WSDL file is located,\
    \ the WSDL2Java\n   command is executed.  Locations of each Axis library have\
    \ to be\n   specified.  The environment variable of \"AXIS_HOME\" is the directory\n\
    \   where Axis is installed.  By executing the above command, files with\n   an\
    \ extension of \"*.java\" are generated in the \"stub\" directory, which\n   is\
    \ specified by the above command.  Inside the stub directory, we can\n   find\
    \ files such as \"NetconfBindingStub.java\", \"Hello.java\", and\n   \"GetConfigType.java\"\
    .\n   Next, it is necessary to compile these files by executing the\n   following\
    \ command in the command prompt.\n   C:\\NetconfClient>javac -classpath .;%AXIS_HOME%\\\
    lib\\axis.jar;%\n   AXIS_HOME%\\lib\\jaxrpc.jar stub/*.java\n   After the compilation\
    \ of those java files, \"*.class\" files are\n   generated.  After the compiling\
    \ is done, the source code of the\n   NETCONF client has to be written.  Sample\
    \ source code of the NETCONF\n   client is shown in Figure 3.  This NETCONF client\
    \ is written by\n   utilizing stub classes and interfaces, which are imported\
    \ into the\n   local package and referenced.\n   import org.apache.axis.types.UnsignedInt;\n\
    \   import org.apache.axis.types.*;\n   public class NetconfClient {\n       \
    \    /**\n            * @param args\n            */\n           public static\
    \ void main(String[] args) {\n                   // TODO Auto-generated method\
    \ stub\n                   try{\n                           NetconfClient client\
    \ = new NetconfClient();\n                           java.net.URL url = new java.net.URL(args[0]);\n\
    \                           stub.Netconf netconf =\n                         \
    \          new stub.NetconfLocator();\n                           stub.NetconfPortType\
    \ stubNetconf =\n                                   netconf.getnetconfPort(url);\n\
    \                           URI[] uri = new URI[1];\n                        \
    \   stub.holders.HelloCapabilitiesHolder\n                           capability\
    \ = new\n                           stub.holders.HelloCapabilitiesHolder(uri);\n\
    \                           UnsignedInt id = new UnsignedInt();\n            \
    \               id.setValue(1);\n                           org.apache.axis.holders.UnsignedIntHolder\n\
    \                           holder = new\n                           org.apache.axis.holders.UnsignedIntHolder(id)\n\
    \                           ;\n                           stubNetconf.hello(capability,\
    \ holder);\n                   }catch(Exception e){\n                        \
    \   e.printStackTrace();\n                   }\n           }\n   }\n         \
    \     Figure 3: Sample Source Code of NETCONF Clients\n   To add functions such\
    \ as the release of log messages, these functions\n   have to be incorporated\
    \ at this stage.  Again, the NETCONF client is\n   developed by compiling its\
    \ source codes.\n"
- title: 4.1.2.  Developing NETCONF Clients Using Eclipse
  contents:
  - "4.1.2.  Developing NETCONF Clients Using Eclipse\n   When we use Eclipse and\
    \ Apache Ant, the procedures described in the\n   previous section are significantly\
    \ simplified and executed at one\n   time.  In this case, files named \"build.xml\"\
    \ and \"build.properties\"\n   are required for Apache Ant.\n   The file named\
    \ \"build.xml\" is written in XML and seen by Apache Ant\n   when Apache Ant is\
    \ running on Eclipse.  The file specifies how Apache\n   Ant behaves.  According\
    \ to the descriptions of the file, Apache Ant\n   compiles source codes, generates\
    \ JAR (Java ARchive) file, and so on.\n   On the other hand, the file named \"\
    build.properties\" specifies\n   properties of the development environment where\
    \ Apache Ant runs.\n   This file is referred to by the \"build.xml\" file.\n \
    \  Examples of \"build.xml\" and \"build.properties\" are shown in Figure 4\n\
    \   and Figure 5, respectively.\n   <?xml version=\"1.0\"?>\n   <project name=\"\
    NetconfClient\" default=\"all\" basedir=\".\">\n           <property file=\"build.properties\"\
    />\n           <path id=\"axis-classpath\">\n                   <fileset dir=\"\
    ${axis.libdir}\">\n                           <include name=\"*.jar\"/>\n    \
    \               </fileset>\n           </path>\n           <target name=\"prepare\"\
    >\n                   <mkdir dir=\"${destdir}\"/>\n           </target>\n    \
    \       <target name=\"stub\" depends=\"prepare\">\n                   <java classname=\"\
    org.apache.axis.wsdl.WSDL2Java\" fork\n                           =\"Yes\">\n\
    \                           <arg value=\"-o\"/>\n                           <arg\
    \ value=\"${srcdir}\"/>\n                           <arg value=\"-p\"/>\n    \
    \                       <arg value=\"${stub.stubdir}\"/>\n                   \
    \        <arg value=\"${stub.wsdlpath}\"/>\n                           <classpath\
    \ refid=\"axis-classpath\"/>\n                   </java>\n           </target>\n\
    \           <target name=\"compile\" depends=\"stub\">\n                   <javac\
    \ srcdir=\"${srcdir}\" destdir=\"${destdir}\"\n                           encoding=\"\
    UTF-8\">\n                           <classpath refid=\"axis-classpath\"/>\n \
    \                  </javac>\n           </target>\n           <target name=\"\
    stub-jar\" depends=\"compile\">\n                   <jar jarfile=\"${stub.jar}\"\
    \ basedir=\"${destdir}\"/>\n           </target>\n           <target name=\"all\"\
    \ depends=\"stub-jar\"/>\n   </project>\n                  Figure 4: build.xml\
    \ of NETCONF Clients\n   axis.libdir=C:/axis-1_4/lib\n   srcdir=src\n   destdir=classes\n\
    \   stub.stubdir=stub\n   stub.wsdlpath=myNetconfService.wsdl\n   stub.jar=NETCONF.jar\n\
    \               Figure 5: build.properties of NETCONF Clients\n   The location\
    \ of the WSDL file should be specified in the\n   \"build.properties\" file. \
    \ In the case shown in Figure 5, the location\n   of the WSDL file is specified\
    \ as being under the current directory.\n   By running Apache Ant on Eclipse,\
    \ the steps specified in Figure 4 are\n   taken.  First, stub codes are generated.\
    \  Then, compiling of those\n   stub codes is executed.  We were careful about\
    \ the encoding style\n   used for the compiling.  After the compilation, Apache\
    \ Ant will\n   generate a JAR file, which is the output that compresses all stub\n\
    \   files (*.class) and acts as a library.  In this example, the name\n   \"NETCONF.jar\"\
    \ is specified in Figure 5.  The \"NETCONF.jar\" file also\n   has to be added\
    \ to the build path of the development project as an\n   external library.\n \
    \  After the \"NETCONF.jar\" file is added to the build path of the\n   development\
    \ project, source codes of the NETCONF client can be\n   written by utilizing\
    \ stub classes and interfaces.  Source codes like\n   the one shown in Figure\
    \ 3 can be written.  By running Apache Ant\n   again, the source code of the NETCONF\
    \ client is compiled.  The\n   NETCONF client is developed in this manner.\n"
- title: 4.2.  Procedures of Development of NETCONF Servers
  contents:
  - "4.2.  Procedures of Development of NETCONF Servers\n   In the Web Services framework,\
    \ there are two approaches for\n   developing a Web Services provider, namely\
    \ a NETCONF server.  One is\n   called the top-down approach, and the other is\
    \ called the bottom-up\n   approach.  The top-down approach is carried out by\
    \ first designing a\n   WSDL file.  A skeleton source code from the WSDL file\
    \ is then\n   generated by using a Web Services tool such as Apache Axis.  The\n\
    \   generated skeleton code is just a template of the Web Services\n   provider's\
    \ source code.  Therefore, even though the Web Services\n   provider's skeleton\
    \ code works on its own, if additional functions\n   were necessary, the generated\
    \ skeleton code would require additional\n   source codes.  This approach is superior\
    \ to the bottom-up approach in\n   terms of interoperability because the specification\
    \ is already\n   defined in the WSDL file.  All vendors have to be in compliance\
    \ with\n   the WSDL file.\n   In contrast, the bottom-up approach is carried out\
    \ by first creating\n   Web Services from source code (e.g., Java bean) and then\
    \ generating a\n   WSDL file from the source code by using a Web Services tool\
    \ such as\n   Axis.  This approach is faster and easier than the top-down approach.\n\
    \   However, in the bottom-up approach, it is difficult to ensure\n   interoperability\
    \ since implementation of a Web Services becomes\n   vendor-specific.\n   When\
    \ developing a NETCONF server, the WSDL file is already defined in\n   [RFC4743],\
    \ so there is no choice but to develop the NETCONF server\n   using the top-down\
    \ approach.  The remainder of this section describes\n   the top-down approach\
    \ for developing a NETCONF server.\n   To develop a SOAP-based NETCONF server\
    \ using the top-down approach, a\n   skeleton code is necessary.  A skeleton is\
    \ a library, which is also\n   generated automatically from WSDL by a Web Services\
    \ tool.  When using\n   Axis as a Web Services tool, the generated skeleton is\
    \ in the form of\n   a Java library.  From the same WSDL file as that used for\
    \ generating\n   the stub code, skeleton codes are generated in files such as\n\
    \   \"NetconfBindingSkeleton.java\", \"Hello.java\", and\n   \"GetConfigType.java\"\
    .\n   When skeleton codes are being generated, the development environment\n \
    \  may be arranged as well.  Moreover, when a Java-based NETCONF server\n   is\
    \ being developed, in addition to JDK and Axis, a servlet container\n   such as\
    \ Apache Tomcat [Tomcat] is necessary.  The \"webapps\\axis\"\n   directory under\
    \ the Axis directory has to be copied to the \"webapps\"\n   directory under the\
    \ Tomcat directory.\n"
- title: 4.2.1.  Developing NETCONF Servers without Eclipse
  contents:
  - "4.2.1.  Developing NETCONF Servers without Eclipse\n   Given that the development\
    \ environment of a NETCONF server is created\n   in the environment of a Windows\
    \ computer without Eclipse and\n   \"myNetconfService.wsdl\" is placed in the\
    \ \"C:\\NetconfServer\"\n   directory, a skeleton is generated by executing the\
    \ following command\n   in the command prompt.\n   C:\\NetconfServer>java -classpath\
    \ .;%AXIS_HOME%\\lib\\axis.jar;%\n   AXIS_HOME%\\lib\\jaxrpc.jar;%AXIS_HOME%\\\
    lib\\saaj.jar;%AXIS_HOME%\n   \\lib\\commons-logging-1.0.4.jar;%AXIS_HOME%\\lib\\\
    commons-discovery-\n   0.2.jar;%AXIS_HOME%\\lib\\wsdl4j-1.5.1.jar\n   org.apache.axis.wsdl.WSDL2Java\
    \ -p skeleton -s -S true -d Session\n   myNetconfService.wsdl\n   In the directory\
    \ where the WSDL file is located, a WSDL2Java command\n   is executed.  Locations\
    \ of each Axis library should be specified.\n   The environment variable of \"\
    AXIS_HOME\" is a directory where Axis is\n   installed.  By executing the above\
    \ command, files with an extension\n   of \"*.java\" are generated in the \"skeleton\"\
    \ directory, which is\n   specified in the above command.  Inside the skeleton\
    \ directory, files\n   such as \"NetconfBindingSkeleton.java\", \"Hello.java\"\
    , and\n   \"GetConfigType.java\" exist.  Furthermore, files named \"deploy.wsdd\"\
    \n   and \"undeploy.wsdd\" are found.  \"Deploy.wsdd\" and \"undeploy.wsdd\" are\n\
    \   used when deploying a NETCONF server in a servlet container and when\n   undeploying\
    \ a NETCONF server from a servlet container, respectively.\n   Adding source codes\
    \ of NETCONF server functions to skeleton codes\n   such as \"NetconfBindingImpl.java\"\
    \ is required as the need arises.\n   Functions such as the release of log messages\
    \ have to be added at\n   this stage.  After that, by executing the following\
    \ command in the\n   command prompt, compilation of java files is carried out.\
    \  Doing so\n   will generate \"*.class\" files.\n   C:\\NetconfServer>javac -classpath\
    \ .;%AXIS_HOME%\\lib\\axis.jar;%\n   AXIS_HOME%\\lib\\jaxrpc.jar skeleton/*.java\n\
    \   A NETCONF server can be developed by following the above-described\n   procedures.\
    \  These class files should be copied into the directory\n   \"webapps\\axis\\\
    WEB-INFO\\classes\" of the Apache Tomcat directory.\n   Finally, the NETCONF server\
    \ is deployed by executing the following\n   command.\n   C:\\NetconfServer>java\
    \ -classpath .;%AXIS_HOME%\\lib\\axis.jar;%\n   AXIS_HOME%\\lib\\jaxrpc.jar;%AXIS_HOME%\\\
    lib\\saaj.jar;%AXIS_HOME%\n   \\lib\\commons-logging-1.0.4.jar;%AXIS_HOME%\\lib\\\
    commons-discovery-\n   0.2.jar org.apache.axis.client.AdminClient -p 832 depoy.wsdd\n\
    \   The command is executed in the directory where \"deploy.wsdd\" is\n   located.\
    \  The file \"deploy.wsdd\" is generated at the same time the\n   skeleton code\
    \ is generated.  After deployment, the NETCONF server\n   receives NETCONF messages\
    \ sent from the NETCONF client.\n"
- title: 4.2.2.  Developing NETCONF Servers Using Eclipse
  contents:
  - "4.2.2.  Developing NETCONF Servers Using Eclipse\n   When Eclipse and Apache\
    \ Ant are used, the procedures described in the\n   previous section are significantly\
    \ simplified and executed at one\n   time.  Files named \"build.xml\" and \"build.properties\"\
    \ are required\n   for Apache Ant.  Examples of \"build.xml\" and \"build.properties\"\
    \ are\n   shown in Figure 6 and Figure 7, respectively.\n   <?xml version=\"1.0\"\
    ?>\n   <project name=\"NetconfService\" default=\"all\" basedir=\".\">\n     \
    \      <property file=\"build.properties\"/>\n           <path id=\"axis-classpath\"\
    >\n                   <fileset dir=\"${axis.libdir}\">\n                     \
    \      <include name=\"*.jar\"/>\n                   </fileset>\n           </path>\n\
    \           <target name=\"prepare\">\n                   <mkdir dir=\"${srcdir}\"\
    />\n                   <mkdir dir=\"${destdir}\"/>\n           </target>\n   \
    \        <target name=\"skeleton\" depends=\"prepare\">\n                   <java\
    \ classname=\"org.apache.axis.wsdl.WSDL2Java\" fork\n                        \
    \   =\"Yes\">\n                           <arg value=\"-p\"/>\n              \
    \             <arg value=\"${skeletondir}\"/>\n                           <arg\
    \ value=\"-o\"/>\n                           <arg value=\"${srcdir}\"/>\n    \
    \                       <arg value=\"-s\"/>\n                           <arg value=\"\
    -S\"/>\n                           <arg value=\"true\"/>\n                   \
    \        <arg value=\"-d\"/>\n                           <arg value=\"Session\"\
    />\n                           <arg value=\"${wsdlpath}\"/>\n                \
    \           <classpath refid=\"axis-classpath\"/>\n                   </java>\n\
    \           </target>\n           <target name=\"compile\" depends=\"skeleton\"\
    >\n                   <javac srcdir=\"${srcdir}\" destdir=\"${destdir}\"\n   \
    \                        encoding=\"UTF-8\">\n                           <classpath\
    \ refid=\"axis-classpath\"/>\n                   </javac>\n           </target>\n\
    \           <target name=\"copy2axis\" depends=\"compile\">\n                \
    \   <copy todir=\"${tomcat.axis.classesdir}\" overwrite=\n                   \
    \        \"true\">\n                           <fileset dir=\"${destdir}\">\n\
    \                                   <include name=\"*.class\"/>\n            \
    \                       <include name=\"*/*.class\"/>\n                      \
    \             <include name=\"*/*/*.class\"/>\n                           </fileset>\n\
    \                   </copy>\n           </target>\n           <target name=\"\
    deploy\" depends=\"copy2axis\">\n                   <java classname=\"org.apache.axis.client.AdminClient\"\
    \n                           fork=\"Yes\">\n                           <arg value=\"\
    -p\"/>\n                           <arg value=\"${deploy.port}\"/>\n         \
    \                  <arg value=\"${deploy.ddname}\"/>\n                       \
    \    <classpath refid=\"axis-classpath\"/>\n                   </java>\n     \
    \      </target>\n           <target name=\"all\" depends=\"deploy\"/>\n   </project>\n\
    \                  Figure 6: build.xml of NETCONF Servers\n   axis.libdir=C:/axis-1_4/lib\n\
    \   tomcat.axis.classesdir=\n   C:/Program Files/Apache Software Foundation/Tomcat\
    \ 6.0/\n   webapps/axis/WEB-INF/classes\n   srcdir=src\n   destdir=classes\n \
    \  skeletondir=skeleton\n   wsdlpath=myNetconfService.wsdl\n   deploy.port=832\n\
    \   deploy.ddname=src/skeleton/deploy.wsdd\n               Figure 7: build.properties\
    \ of NETCONF Servers\n   The locations of the WSDL file and \"deploy.wsdd\" file\
    \ have to be\n   specified in the \"build.properties\" file.  In Figure 7, the\
    \ location\n   of the WSDL file and \"deploy.wsdd\" file are specified as being\
    \ under\n   the current directory.\n   By running Apache Ant on Eclipse, the steps\
    \ shown in Figure 6 are\n   followed.  First, skeleton codes have to be generated.\
    \  After the\n   skeleton codes are generated, source codes of the NETCONF server\n\
    \   functions may be added to the skeleton codes according to the\n   functions\
    \ that developers intend to add.\n   Then, by running Apache Ant again, compiling\
    \ of the skeleton codes is\n   executed.  As a result, class files of the NETCONF\
    \ server are\n   generated.  Apache Ant copies these class files to the directory\
    \ of\n   Tomcat and deploys the NETCONF server.  After that, the NETCONF\n   server\
    \ becomes accessible by the NETCONF client.\n"
- title: 4.2.3.  Developing NETCONF Servers with C Programming Language
  contents:
  - "4.2.3.  Developing NETCONF Servers with C Programming Language\n   When the NETCONF\
    \ server for network equipment is being implemented,\n   memory capacity might\
    \ be limited, so it might not be possible to\n   install a Java environment on\
    \ the network equipment.  The network-\n   equipment platform might not support\
    \ a Web Services tool.  In that\n   case, it may be necessary to implement SOAP\
    \ as well as the NETCONF\n   server by using C programming language on the network\
    \ equipment.\n   To develop a NETCONF server capable of receiving NETCONF messages\n\
    \   sent over SOAP/HTTP, the network equipment may have an HTTP daemon\n   and\
    \ a NETCONF service provider.  A commonly used HTTP daemon can be\n   used.  A\
    \ SOAP module may be added to the HTTP daemon as a connector\n   between the HTTP\
    \ daemon and the NETCONF service provider.  The\n   NETCONF service provider for\
    \ parsing NETCONF messages sent from the\n   NETCONF client and sending reply\
    \ NETCONF messages toward the NETCONF\n   client may be developed.\n   When an\
    \ HTTP daemon receives a SOAP message that is sent over HTTP,\n   the message\
    \ is handed over to the SOAP module incorporated in the\n   HTTP daemon.  Then,\
    \ the SOAP module removes the SOAP header and\n   passes NETCONF messages to the\
    \ NETCONF service provider.  After that,\n   the NETCONF service provider parses\
    \ the NETCONF messages and\n   configures the network equipment accordingly.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The security considerations of [RFC4741] and\
    \ [RFC4743] are applicable\n   in this document.  Implementers or users of SOAP-based\
    \ NETCONF\n   clients and servers should take these considerations into account.\n\
    \   As specified in the security considerations section of [RFC4743],\n   transport-level\
    \ security, such as authentication of users and\n   encryption of transport protocol,\
    \ has to be ensured by TLS (Transport\n   Layer Security) in the case of NETCONF\
    \ SOAP binding.  That is,\n   security has to be provided in the form of NETCONF/SOAP/HTTPS.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   Extensive input was received from the members of the\
    \ NETCONF design\n   team, including: Andy Bierman, Simon Leinen, Bert Wijnen,\
    \ Mehmet\n   Ersue, Ted Goddard, Ray Atarashi, Ron Bonica, and Dan Romascanu.\
    \  The\n   following people have also reviewed this document and provided\n  \
    \ valuable input: Jari Arkko, Pasi Eronen, Chris Newman, Tim Polk,\n   David Ward,\
    \ Magnus Westerlund, and Christian Vogt.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC4741]   Enns, R., \"NETCONF Configuration\
    \ Protocol\", RFC 4741,\n               December 2006.\n   [RFC4743]   Goddard,\
    \ T., \"Using NETCONF over the Simple Object Access\n               Protocol (SOAP)\"\
    , RFC 4743, December 2006.\n"
- title: 7.2.    Informative References
  contents:
  - "7.2.    Informative References\n   [Ant]       \"Apache Ant\".\n            \
    \   <http://ant.apache.org/>\n   [Axis]      \"Web Services - Axis\".\n      \
    \         <http://ws.apache.org/axis/>\n   [Eclipse]   \"Eclipse\".\n        \
    \       <http://www.eclipse.org/>\n   [JDK]       \"Java SE\".\n             \
    \  <http://java.sun.com/javase/index.jsp>\n   [NetBeans]  \"NetBeans\".\n    \
    \           <http://www.netbeans.org/index.html>\n   [RFC4742]   Wasserman, M.\
    \ and T. Goddard, \"Using the NETCONF\n               Configuration Protocol over\
    \ Secure SHell (SSH)\",\n               RFC 4742, December 2006.\n   [RFC4744]\
    \   Lear, E. and K. Crozier, \"Using the NETCONF Protocol over\n             \
    \  the Blocks Extensible Exchange Protocol (BEEP)\",\n               RFC 4744,\
    \ December 2006.\n   [Tomcat]    \"Apache Tomcat\".\n               <http://tomcat.apache.org/>\n\
    \   [WSDL]      \"Web Service Description Language (WSDL) 1.1\".\n           \
    \    <http://www.w3.org/TR/wsdl>\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Iijima Tomoyuki\n   Alaxala Networks Corp.\n   Shin-Kawasaki\
    \ Mitsui Bldg.\n   890 Saiwai-ku Kashimada\n   Kawasaki, Kanagawa  212-0058\n\
    \   Japan\n   Phone: +81-44-549-1735\n   Fax:   +81-44-549-1272\n   EMail: tomoyuki.iijima@alaxala.com\n\
    \   Yoshifumi Atarashi\n   Alaxala Networks Corp.\n   Shin-Kawasaki Mitsui Bldg.\n\
    \   890 Saiwai-ku Kashimada\n   Kawasaki, Kanagawa  212-0058\n   Japan\n   Phone:\
    \ +81-44-549-1735\n   Fax:   +81-44-549-1272\n   EMail: atarashi@alaxala.net\n\
    \   Hiroyasu Kimura\n   Alaxala Networks Corp.\n   Shin-Kawasaki Mitsui Bldg.\n\
    \   890 Saiwai-ku Kashimada\n   Kawasaki, Kanagawa  212-0058\n   Japan\n   Phone:\
    \ +81-44-549-1735\n   Fax:   +81-44-549-1272\n   EMail: h-kimura@alaxala.net\n\
    \   Makoto Kitani\n   Alaxala Networks Corp.\n   Shin-Kawasaki Mitsui Bldg.\n\
    \   890 Saiwai-ku Kashimada\n   Kawasaki, Kanagawa  212-0058\n   Japan\n   Phone:\
    \ +81-44-549-1735\n   Fax:   +81-44-549-1272\n   EMail: makoto.kitani@alaxala.com\n\
    \   Hideki Okita\n   Hitachi, Ltd.\n   1-280 Higashi-Koigakubo\n   Kokubunji,\
    \ Tokyo  185-8601\n   Japan\n   Phone: +81-42-323-1111\n   Fax:   +81-42-327-7868\n\
    \   EMail: hideki.okita.pf@hitachi.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
