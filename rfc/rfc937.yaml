- title: __initial_text__
  contents:
  - '                    POST OFFICE PROTOCOL - VERSION 2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC suggests a simple method for workstations to\
    \ dynamically\n   access mail from a mailbox server.  This RFC specifies a proposed\n\
    \   protocol for the ARPA-Internet community, and requests discussion and\n  \
    \ suggestions for improvement.  This memo is a revision of RFC 918.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   The intent of the Post Office Protocol Version 2 (POP2) is to\
    \ allow a\n   user's workstation to access mail from a mailbox server.  It is\n\
    \   expected that mail will be posted from the workstation to the mailbox\n  \
    \ server via the Simple Mail Transfer Protocol (SMTP).  For further\n   information\
    \ see RFC-821 [1] and RFC-822 [2].\n   This protocol assumes a reliable data stream\
    \ such as provided by TCP\n   or any similar protocol.  When TCP is used, the\
    \ POP2 server listens\n   on port 109 [4].\n"
- title: System Model and Philosophy
  contents:
  - "System Model and Philosophy\n   While we view the workstation as an Internet\
    \ host in the sense that\n   it implements IP, we do not expect the workstation\
    \ to contain the\n   user's mailbox.  We expect the mailbox to be on a server\
    \ machine.\n   We believe it is important for the mailbox to be on an \"always\
    \ up\"\n   machine and that a workstation may be frequently powered down, or\n\
    \   otherwise unavailable as an SMTP server.\n   POP2 is designed for an environment\
    \ of workstations and servers on a\n   low-delay, high-throughput, local networks\
    \ (such as Ethernets).  POP2\n   may be useful in other environments as well,\
    \ but if the environment\n   is substantially different, a different division\
    \ of labor between the\n   client and server may be appropriate, and a different\
    \ protocol\n   required.\n   Suppose the user's real name is John Smith, the user's\
    \ machine is\n   called FIDO, and that the mailbox server is called DOG-HOUSE.\
    \  Then\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n   we expect the user's mail to be addressed to JSmith@DOG-HOUSE.ARPA\n\
    \   (not JSmith@FIDO.ARPA).\n   That is, the destination of the mail is the mailbox\
    \ on the server\n   machine.  The POP2 protocol and the workstation are merely\
    \ a\n   mechanism for viewing the messages in the mailbox.\n   The user is not\
    \ tied to any particular workstation for accessing his\n   mail.  The workstation\
    \ does not appear as any part of the mailbox\n   address.\n   This is a very simple\
    \ protocol.  This is not a user interface.  We\n   expect that there is a program\
    \ in the workstation that is friendly to\n   the user.  This protocol is not \"\
    user friendly\".  One basic rule of\n   this protocol is \"if anything goes wrong\
    \ close the connection\".\n   Another basic rule is to have few options.\n   POP2\
    \ does not parse messages in any way.  It does not analyze message\n   headers\
    \ (Date:, From:, To:, Cc:, or Subject:).  POP2 simply transmits\n   whole messages\
    \ from a mailbox server to a client workstation.\n"
- title: The Protocol
  contents:
  - "The Protocol\n   The POP2 protocol is a sequence of commands and replies.  The\
    \ design\n   draws from many previous protocols of the ARPA-Internet community.\n\
    \      The server must be listening for a connection.  When a connection\n   \
    \   is opened the server sends a greeting message and waits for\n      commands.\
    \  When commands are received the server acts on them and\n      responds with\
    \ replies.\n      The client opens a connection, waits for the greeting, then\
    \ sends\n      the HELO command with the user name and password arguments to\n\
    \      establish authorization to access mailboxes.  The server returns\n    \
    \  the number of messages in the default mailbox.\n      The client may read the\
    \ default mailbox associated with the user\n      name or may select another mailbox\
    \ by using the FOLD command.  The\n      server returns the number of messages\
    \ in the mailbox selected.\n      The client begins a message reading transaction\
    \ with a READ\n      command.  The read command may optionally indicate which\
    \ message\n      number to read, the default is the current message (incremented\n\
    \      when a message is read and set to one when a new folder is\n      selected).\
    \  The server returns the number of characters in the\n      message.\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n      The client asks for the content of the message to\
    \ be sent with the\n      RETR command.  The server sends the message data.\n\
    \      When all the data has been received the client sends an\n      acknowledgment\
    \ command.  This is one of ACKS, ACKD, and NACK.\n         ACKS means \"I've received\
    \ the message successfully and please\n         keep it in the mailbox\".\n  \
    \       ACKD means \"I've received the message successfully and please\n     \
    \    delete it from the mailbox\".\n         NACK means \"I did not receive the\
    \ message and please keep it in\n         the mailbox\".\n      In the case of\
    \ ACKS or ACKD the server increments the current\n      message indicator.  In\
    \ the case of NACK the current message\n      indicator stays the same.\n    \
    \  In all cases the server returns the number of characters in the\n      (now)\
    \ current message.\n      The client terminates the session with the QUIT command.\
    \  The\n      server returns an ok.\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n   The Normal Scenario\n           Client             \
    \       Server\n           ------                    ------\n                \
    \                Wait for Connection\n      Open Connection  -->\n           \
    \                <--  + POP2 Server Ready\n                                Wait\
    \ for Command\n      HELO Fred Secret -->\n                           <--  #13\
    \ messages for you\n                                Wait for Command\n      READ\
    \ 13          -->   \n                           <--  =537 characters in that\
    \ message\n                                Wait for Command\n      RETR      \
    \       -->   \n                           <--  (send the message data)\n    \
    \                            Wait for Command\n      ACKS             -->   \n\
    \                           <--  =0 no more messages\n                       \
    \         Wait for Command\n      QUIT             -->\n                     \
    \      <--  + OK\n      Close connection --> <--  Close connection\n         \
    \                       Wait for Connection (go back to start)\n"
- title: Conventions
  contents:
  - "Conventions\n   Arguments\n      These arguments have system specific definitions.\n\
    \         user - A login account name.\n         password - The password for the\
    \ login account.\n         mailbox - A mailbox name (also called a mail folder).\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n   Default Mailboxes\n      TOPS-20\n         MAIL.TXT.1\
    \ - from login directory\n      UNIX\n         both\n            /usr/spool/mail/user\n\
    \         and\n            /usr/user/Mail/inbox/*\n            where \"user\"\
    \ is the user value supplied in the HELO command.\n   End of Line\n      End of\
    \ Line is Carriage Return (CR) followed by Line Feed (LF).\n      This sequence\
    \ is indicated by \"CRLF\" in this document.  This end\n      of line convention\
    \ must be used for commands and replies.\n   Message Length\n      The reply to\
    \ the READ command or an acknowledgment command (ACKS,\n      ACKD, NACK) is the\
    \ length (a character count) of the next message\n      to be transmitted.  This\
    \ includes all the characters in the data\n      transmitted.  CRLF counts as\
    \ two characters.  A length of zero\n      means the message does not exist or\
    \ is empty.  A request to\n      transmit a message of zero length will result\
    \ in the server\n      closing the connection.  The message is transmitted in\
    \ the\n      standard internet format described in RFC-822 [2] and NVT-ASCII.\n\
    \      This may be different from the storage format and may make\n      computing\
    \ the message length from the stored message non-trivial.\n   Message Numbers\n\
    \      The reply to the HELO and FOLD commands is a count of the number\n    \
    \  of messages in a the selected mailbox.  The READ command has a\n      message\
    \ number as an optional argument.  These numbers are\n      decimal, start at\
    \ one, and computed with respect to the current\n      mailbox.  That is, the\
    \ first message in a mailbox is message\n      number 1.\n   Numbers\n      All\
    \ numbers in this memo and protocol are decimal.\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n   Quoting\n      In a few cases, there may be a need to\
    \ have a special character in\n      an argument (user, password, or mailbox)\
    \ that is not allowed by\n      the syntax.  For example, a space in a password.\
    \ To allow for\n      this, a quoting convention is defined.  Unfortunately, such\n\
    \      quoting conventions \"use up\" another otherwise uninteresting\n      character.\
    \  In this protocol the back slash \"\\\" is used as the\n      quote character.\
    \  To include a space in an argument the two\n      character sequence \"back-slash,\
    \ space\" is transmitted.  To include\n      a back-slash in an argument the two\
    \ character sequence\n      \"back-slash, back-slash\" is transmitted.  This quoting\
    \ convention\n      is used in the command arguments only, it is not used in the\
    \ mail\n      data transmitted in response to a RETR command.\n   Reply Strings\n\
    \      The first character is required to be as specified (i.e.,\n      \"+\"\
    , \"-\", \"=\", \"#\").  The optional strings that follow can be\n      whatever\
    \ the implementer thinks is appropriate.\n"
- title: Definitions of Commands and Replies
  contents:
  - "Definitions of Commands and Replies\n   Summary of Commands and Replies\n   \
    \   Commands                          Replies\n      --------                \
    \          -------\n      HELO user password                + OK\n      FOLD mailbox\
    \                      - Error\n      READ [n]                          #xxx\n\
    \      RETR                              =yyy\n      ACKS\n      ACKD\n      NACK\n\
    \      QUIT\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n   Commands\n      HELO user password\n         The Hello\
    \ command identifies the user to the server and carries\n         the password\
    \ authenticating this user.  This information is\n         used by the server\
    \ to control access to the mailboxes.  The\n         Hello command is the \"HELO\"\
    \ keyword, followed by the user\n         argument, followed by the password argument,\
    \ followed by CRLF.\n            Possible responses:\n               \"#nnn\"\n\
    \                  where nnn is the number of messages in the default\n      \
    \            mailbox,\"\n               \"- error report\" and Close the connection.\n\
    \      FOLD mailbox\n         The Folder command selects another mailbox or mail\
    \ folder.  The\n         server must check that the user is permitted read access\
    \ to\n         this mailbox.  If the mailbox is empty or does not exist, the\n\
    \         number of messages reported is zero.  The Folder command is the\n  \
    \       \"FOLD\" keyword, followed by the mailbox argument, followed by\n    \
    \     CRLF.\n            Possible responses:\n               \"#nnn\"\n      \
    \            where nnn is the number of messages in this mailbox.\n      READ\
    \ [nnn]\n         The Read command begins a message reading transaction.  If the\n\
    \         Read command is given without an argument the current message\n    \
    \     is  implied (the current message indicator is incremented  by\n        \
    \ the ACKS or ACKD commands).  If an argument is used with the\n         Read\
    \ command it is the message number to be read, and this\n         command sets\
    \ the current message indicator to that value.  The\n         server returns the\
    \ count of characters in the message to be\n         transmitted.  If there is\
    \ no message to be read, the count of\n         zero is returned.  If the message\
    \ was previously deleted with\n         the ACKD command, the count of zero is\
    \ returned.  The Read\n         command is followed by the RETR command, the READ\
    \ command, the\n         FOLD command, or the QUIT command.  Do not attempt to\
    \ RETR a\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n         message of zero characters.  The Read command\
    \ is the \"READ\"\n         keyword, optionally followed by the message number\
    \ argument,\n         followed by CRLF.\n            Possible responses:\n   \
    \            \"=ccc\"\n                  where ccc is the number of characters\
    \ in this message.\n      RETR\n         The Retrieve command confirms that the\
    \ client is ready to\n         receive the mail data.  It must be followed by\
    \ an\n         acknowledgment command.  The server will close the connection\n\
    \         if asked to transmit a message of zero characters (i.e.,\n         transmit\
    \ a non-existent message).  The message is transmitted\n         according to\
    \ the Internet mail format standard RFC-822 [2] in\n         NVT-ASCII.  The Retrieve\
    \ command is the \"RETR\" keyword,\n         followed by CRLF.\n            Possible\
    \ responses:\n               the message data\n               Close the connection\n\
    \      ACKS\n         The Acknowledge and Save command confirms that the client\
    \ has\n         received and accepted the message.  The ACKS command ends the\n\
    \         message reading transaction.  The message is kept in the\n         mailbox.\
    \  The current message indicator is incremented.  The\n         server returns\
    \ the count of characters in the now current\n         message to be transmitted.\
    \  If there is no message to be read\n         or the message is marked deleted,\
    \ the count of zero is\n         returned.  The Acknowledge and Save command is\
    \ the \"ACKS\"\n         keyword, followed by CRLF.\n            Possible responses:\n\
    \               \"=ccc\"\n                  where ccc is the number of characters\
    \ in the next\n                  message.\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n      ACKD\n         The Acknowledge and Delete command\
    \ confirms that the client has\n         received and accepted the message.  The\
    \ ACKD command ends the\n         message reading transaction.  If the user is\
    \ authorized to have\n         write access to the mailbox, the message is deleted\
    \ from the\n         mailbox.  Actually, the message is only marked for deletion.\n\
    \         The actual change is made  when the mailbox is released at the\n   \
    \      end of the session or when the client selects another mailbox\n       \
    \  with the FOLD command.  The messages are not renumbered until\n         the\
    \ mailbox is released.  If the user does not have write\n         access to the\
    \ mailbox no change is made to the mailbox.  The\n         response is the same\
    \ whether or not the message was actually\n         deleted.  The current message\
    \ indicator is incremented.  The\n         server returns the count of characters\
    \ in the now current\n         message to be transmitted.  If there is no message\
    \ to be read\n         or the message is marked deleted, the count of zero is\n\
    \         returned.  The Acknowledge and Delete command is the \"ACKD\"\n    \
    \     keyword, followed by CRLF.\n            Possible responses:\n          \
    \     \"=ccc\"\n                  where ccc is the number of characters in the\
    \ next\n                  message.\n      NACK\n         The Negative Acknowledge\
    \ command reports that the client did\n         not receive the message.  The\
    \ NACK command ends the message\n         reading transaction.  The message is\
    \ kept in the mailbox.  The\n         current message indicator remains the same.\
    \  The server returns\n         the count of characters in the current message.\
    \  Since the\n         count to be returned is for the message just transmitted\
    \ it the\n         message must exist and not be marked deleted, and the count\n\
    \         must be positive (non-zero).  The Negative Acknowledge command\n   \
    \      is the \"NACK\" keyword, followed by CRLF.\n            Possible responses:\n\
    \               \"=ccc\"\n                  where ccc is the number of characters\
    \ in this message.\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n      QUIT\n         The Quit command indicates the client\
    \ is done with the session.\n         The server sends an OK response and then\
    \ closes the connection.\n         The Quit command is the \"QUIT\" keyword, followed\
    \ by CRLF.\n            Possible responses:\n               \"+ OK\" and Close\
    \ the connection\n   Replies\n      Greeting\n         The greeting is sent by\
    \ the server as soon as the connection is\n         established.  The greeting\
    \ is a plus sign, followed by the\n         protocol name (\"POP2\"), followed\
    \ by the server host name,\n         optionally followed by text, and ending with\
    \ a CRLF.\n      +\n         The success or plus sign response indicates successful\n\
    \         completion of the operation specified in the command.  The\n       \
    \  success response is a plus sign, optionally followed by text,\n         and\
    \ ending with a CRLF.\n      -\n         The failure or minus sign response indicates\
    \ the failure of the\n         operation specified in the command.  The failure\
    \ response is a\n         minus sign, optionally followed by text, and ending\
    \ with a\n         CRLF.\n      =\n         The length or equal sign response\
    \ tells the length in\n         characters of the message referenced by the command.\
    \  The\n         length response is a equal sign, followed by a number,\n    \
    \     optionally followed by text, and ending with a CRLF.\n      #\n        \
    \ The count or number sign response tells the number of messages\n         in\
    \ a folder or mailbox referenced by the command.  The count\n         response\
    \ is a number sign, followed by a number, optionally\n         followed by text,\
    \ and ending with a CRLF.\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n   Timeouts\n      In any protocol of this type there have\
    \ to be timeouts.  Neither\n      side wants to get stuck waiting forever for\
    \ the other side\n      (particularly is the other side has gone crazy or crashed).\n\
    \      The client expects a reply to a command fairly quickly and so\n      should\
    \ have a short timeout for this.  This timeout is called T1.\n         For some\
    \ servers, it may take some processing to compute the\n         number of messages\
    \ in a mailbox, or the length of a message, or\n         to reformat a stored\
    \ message for transmission, so this time out\n         has to allow for such processing\
    \ time.  Also care must be taken\n         not to timeout waiting for the completion\
    \ of a RETR reply while\n         a long message is in fact being transfered.\n\
    \      The server expects the session to progress with some but not\n      excessive\
    \ delay between commands and so should have a long timeout\n      waiting for\
    \ the next command.  This time out is T2.\n         One model of use of this protocol\
    \ is that any number of\n         different types of clients can be built with\
    \ different ways of\n         interacting with the human user and the server,\
    \ but still\n         expecting the client to open the connection to the server,\n\
    \         present a sequence of commands, and close the connection,\n        \
    \ without waiting for intervention by the human user.  With such\n         client\
    \ implementations, it is reasonable for the server to have\n         a fairly\
    \ small value for timeout T2.\n         On the other hand, one could easily have\
    \ the client be very\n         human user directed with the user making decisions\
    \ between\n         commands.  This would cause arbitrary delays between client\n\
    \         commands to the server, and require the value of timeout T2 to\n   \
    \      be quite large.\n"
- title: Implementation Discussion
  contents:
  - "Implementation Discussion\n   Comments on a Server on TOPS-20\n      On TOPS-20,\
    \ a mailbox is a single file.  New messages are appended\n      to the file. \
    \ There is a separator line between messages.\n      The tricky part of implementing\
    \ a POP2 server on TOPS-20 is to\n      provide for deleting messages.  This only\
    \ has to be done for the\n      mailboxes (files) for which the user has write\
    \ access.  The\n      problem is to avoid both (1) preventing other users from\
    \ accessing\n      or updating the mailbox for long periods, and (2) accidentally\n\
    \      deleting a message the user has not seen.\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n      One suggestion is as follows:\n         When a mailbox\
    \ is first selected, if the user has write access,\n         rename the mailbox\
    \ file to some temporary name.  Thus new\n         messages will be placed in\
    \ a new instance of the mailbox file.\n         Conduct all POP2 operation on\
    \ the temporary mailbox file\n         (including deleting messages).  When the\
    \ POP2 session is over\n         or another mailbox is selected, prepend any messages\
    \ left\n         undeleted in the temporary file to the new instance of the\n\
    \         mailbox file.\n   Sizes\n      The maximum length of a command line\
    \ is 512 characters (including\n      the command word and the CRLF).\n      The\
    \ maximum length of a reply line is 512 characters (including\n      the success\
    \ indicator (+, -, =, #) and the CRLF).\n      The maximum length of a text line\
    \ is 1000 characters (including\n      CRLF).\n   ISI has developed a POP2 server\
    \ for TOPS-20 and for Berkeley 4.2\n   Unix, and a POP2 client for an IBM-PC and\
    \ for Berkeley 4.2 Unix.\n"
- title: Extensions Not Supported
  contents:
  - "Extensions Not Supported\n   POP2 does not examine the internal data of messages.\
    \  In particular,\n   the server does not parse message headers.\n   The server\
    \ doesn't have any state information (i.e., it doesn't know\n   from one session\
    \ to the next what has happened).  For example, the\n   server doesn't know which\
    \ messages were received since the last time\n   the user used POP2, so it can't\
    \ send just the \"new\" messages.\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - 'Post Office Protocol

    '
- title: Examples
  contents:
  - "Examples\n   Example 1:\n           Client                    Server\n      \
    \     ------                    ------\n                                Wait for\
    \ connection\n      Open connection  -->\n                           <--  + POP2\
    \ USC-ISIF.ARPA Server\n      HELO POSTEL SECRET -->\n                       \
    \    <--  #2 messages in your mailbox\n      READ             -->   \n       \
    \                    <--  =537 characters in message 1\n      RETR           \
    \  -->   \n                           <--  [data of message 1]\n      ACKD   \
    \          -->   \n                           <--  =234 characters in message\
    \ 2\n      RETR             -->   \n                           <--  [data of message\
    \ 2]\n      ACKD             -->   \n                           <--  =0 no more\
    \ messages\n      QUIT             -->\n                           <--  + OK,\
    \ bye, bye\n      Close connection --> <--  Close connection\n               \
    \                 Go back to start\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n   Example 2:\n           Client                    Server\n\
    \           ------                    ------\n                               \
    \ Wait for connection\n      Open connection  -->\n                          \
    \ <--  + POP2 ISI-VAXA.ARPA server here\n      HELO smith secret -->\n       \
    \                    <--  #35 messages\n      FOLD /usr/spool/mail/smith -->\n\
    \                           <--  #27 messages\n      READ  27         -->   \n\
    \                           <--  =10123 characters in that message\n      RETR\
    \             -->   \n                           <--  [data of message 27]\n \
    \     ACKS             -->   \n                           <--  =0 no more messages\n\
    \      QUIT             -->\n                           <--  + bye, call again\
    \ sometime.\n      Close connection --> <--  Close connection\n              \
    \                  Go back to start\n   Example 3:\n           Client        \
    \            Server\n           ------                    ------\n           \
    \                     Wait for connection\n      Open connection  -->\n      \
    \                     <--  + POP2 ISI-VAXA.ARPA server here\n      HELO Jones\
    \ secret -->\n                           <--  #0 messages\n      READ        \
    \     -->   \n                           <--  Close connection\n      Close connection\
    \ -->\n                                Go back to start\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - 'Post Office Protocol

    '
- title: Formal Syntax
  contents:
  - "Formal Syntax\n   <digit>    = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n   <letter>\
    \   = A | B | C | ... | Z\n                a | b | c | ... | z\n   <punct>   \
    \ = ! | \" | # | $ | % | & | ' | ( | ) | * |\n                + | , | - | / |\
    \ : | < | = | > | ? | @ |\n                [ | ] | ^ | _ | ` | { | | | } | ~\n\
    \   <quote>    = \\\n   <any>      = any one of the 128 ASCII codes\n   <CR> \
    \      = carriage return, code 10\n   <LF>       = line feed, code 13\n   <SP>\
    \       = space, code 32\n   <CRLF>     = <CR> <LF>\n   <print>    = <letter>\
    \ | <digit> | <punct> | <quote> <any>\n   <char>     = <print> | <SP>\n   <word>\
    \     = <print> | <print> <word>\n   <string>   = <char> | <char> <string>\n \
    \  <ld>       = <letter> | <digit>\n   <ldh>      = <letter> | <digit> | -\n \
    \  <ldhs>     = <ldh> | <ldh> <ldhs>\n   <name>     = <letter> [ [ <ldhs> ] <ld>\
    \ ]\n   <host>     =  <name> | <name> . <host>\n   <user>     = <word>\n   <password>\
    \ = <word>\n   <mailbox>  = <string>\n   <number>   = <digit> | <digit> <number>\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n   <helo>     = HELO <SP> <user> <SP> <password> <CRLF>\n\
    \   <fold>     = FOLD <SP> <mailbox> <CRLF>\n   <read>     = READ [<SP> <number>]\
    \ <CRLF>\n   <retr>     = RETR <CRLF>\n   <acks>     = ACKS <CRLF>\n   <ackd>\
    \     = ACKD <CRLF>\n   <nack>     = NACK <CRLF>\n   <quit>     = QUIT <CRLF>\n\
    \   <ok>       = + [<SP> <string>] <CRLF>\n   <err>      = - [<SP> <string>] <CRLF>\n\
    \   <count>    = # <number> [<SP> <string>] <CRLF>\n   <greet>    = + <SP> POP2\
    \ <SP> <host> [<SP> <string>] <CRLF>\n   <length>   = = <number> [<SP> <string>]\
    \ <CRLF>\n   <command>  = <helo> | <fold> | <read> | <retr> |\n              \
    \  <acks> | <ackd> | <nack> | <quit>\n   <reply>    = <ok> | <err> | <count> |\
    \ <length> | <greet>\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - 'Post Office Protocol

    '
- title: Client State Diagram
  contents:
  - "Client State Diagram\n                          |                    ^  + BYE\
    \  \n                          |  Open              |  -----  \n             \
    \             |           Greet    |  Close  \n                          V   \
    \        -----    |         \n                      +-------+       QUIT    +-------+\
    \  \n                      | CALL  |-------------->| EXIT  |  \n             \
    \         +-------+               +-------+  \n                          |   \
    \                    ^      \n                          |  Greet             \
    \   |      \n                          |  -----                |      \n     \
    \                     |  HELO                 |      \n              +---->+ \
    \    |                       |      \n        #NNN  ^     |     |        #NNN\
    \           |      \n        ----  |     V     V        ----           |     \
    \ \n        FOLD  |    +-------+       QUIT           |      \n              +<---|\
    \ NMBR  |--------------------->+      \n                   +-------+         \
    \             ^      \n                    ^     |                       |   \
    \   \n                    |     |  #NNN                 |      \n            \
    \        |     |  ----                 |      \n              =CCC  |     |  READ\
    \                 |      \n              ----  |     |                       |\
    \      \n              FOLD  |     |        =CCC           |      \n         \
    \           |     V        ----           |      \n        =CCC  +--->+-------+\
    \       QUIT           |      \n        ----  ^    | SIZE  |--------------------->+\
    \      \n        READ  +<---+-------+                             \n         \
    \           ^     |                              \n                    |     |\
    \  =CCC                        \n              data  |     |  ----           \
    \             \n              ----  |     |  RETR                        \n  \
    \            ack   |     |                              \n                   \
    \ |     V                              \n                   +-------+        \
    \                     \n                   | XFER  |                         \
    \    \n                   +-------+                             \n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - 'Post Office Protocol

    '
- title: Server State Diagram
  contents:
  - "Server State Diagram\n                       +<----------------------+  Close\
    \  \n                       |                       |  -----  \n             \
    \  Listen  |                       |  Close  \n                       V      \
    \                 |         \n                   +-------+                  +-------+\
    \  \n                   | LSTN  |                  | DONE  |  \n             \
    \      +-------+                  +-------+  \n                       |      \
    \                    ^      \n                       |  Open                 \
    \   |      \n                       |  -----                   |      \n     \
    \                  |  Greet                   |      \n                      \
    \ |                          |      \n                       |           QUIT\
    \           |      \n                       V           -----          |     \
    \ \n                   +-------+       + BYE          |      \n              \
    \     | AUTH  |--------------------->+      \n                   +-------+   \
    \                   ^      \n                       |                        \
    \  |      \n                       |  HELO                    |      \n      \
    \                 |  ----                    |      \n                       |\
    \  #NNN                    |      \n                       |                 \
    \         |      \n                       |           QUIT           |      \n\
    \                       V           -----          |      \n        FOLD  +--->+-------+\
    \       + BYE          |      \n        ----  ^    | MBOX  |--------------------->+\
    \      \n        #NNN  +<---+-------+                      ^      \n         \
    \           ^     |                       |      \n                    |     |\
    \  READ                 |      \n              FOLD  |     |  ----           \
    \      |      \n              ----  |     |  =CCC                 |      \n  \
    \            #NNN  |     |        QUIT           |      \n                   \
    \ |     V        -----          |      \n        READ  +--->+-------+       +\
    \ BYE          |      \n        ----  ^    | ITEM  |--------------------->+  \
    \    \n        =CCC  +<---+-------+                             \n           \
    \         ^     |                              \n                    |     | \
    \ RETR                        \n              ack   |     |  ----            \
    \            \n              ----  |     |  data                        \n   \
    \           =CCC  |     |                              \n                    |\
    \     V                              \n                   +-------+          \
    \                   \n                   | NEXT  |                           \
    \  \n                   +-------+                             \n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - 'Post Office Protocol

    '
- title: Combined Flow Diagram
  contents:
  - "Combined Flow Diagram\n   +----+                                            \
    \                  \n   |CALL|<------------------------------------------------------------+\n\
    \   |LSTN|                                                             ^\n   +----+\
    \                                                             |\n    | Greet \
    \                                                          |\n    |          \
    \                                                       |\n    |  +----------------------------------------------------->+\
    \       |\n    |  ^ QUIT                                                 |   \
    \    |\n    V  |                                                      V      \
    \ |\n   +----+        +----+                                      +----+   |\n\
    \   |CALL| HELO   |NMBR|                                      |EXIT|   |\n   |AUTH|------->|AUTH|\
    \                                      |AUTH|   |\n   +----+        +----+   \
    \                                   +----+   |\n                  | #NNN     \
    \                              + Bye |    |\n                  |             \
    \                                 |    |\n                  |  +------------------------------------>+\
    \     |    |\n                  |  ^ QUIT                                |   \
    \  |    |\n                  V  |                                     V     |\
    \    |\n            +--->+----+        +----+                     +----+ |   \
    \ |\n       FOLD ^    |NMBR| READ   |SIZE|                     |EXIT| |    |\n\
    \       ---- |    |MBOX|------->|MBOX|                     |MBOX| |    |\n   \
    \    #NNN +<---+----+        +----+                     +----+ |    |\n      \
    \               ^           | =CCC                 + Bye |  |    |\n         \
    \            |           |                            |  |    |\n            \
    \    FOLD +<--------+ | +------------------->+     |  |    |\n               \
    \ ----           ^ | ^ QUIT               |     |  |    |\n                #NNN\
    \           | V |                    V     |  |    |\n                       \
    \  +--->+-----+        +----+    +----+ |  |    |\n                    READ ^\
    \    |SIZE | RETR   |XFER|    |EXIT| |  |    |\n                    ---- |   \
    \ | ITEM|------->|ITEM|    |ITEM| |  |    |\n                    =CCC +<---+-----+\
    \        +----+    +----+ |  |    |\n                                 ^      \
    \       | data      |  |  |    |\n                                 |         \
    \    |           |  |  |    |\n                            =CCC |            \
    \ V     + Bye |  |  |    |\n                               +----+        +----+\
    \        |  |  |    |\n                               |SIZE|    Ack |XFER|   \
    \     |  |  |    |\n                               |NEXT|<-------|NEXT|      \
    \  |  |  |    |\n                               +----+        +----+        |\
    \  |  |    |\n                                                           |  |\
    \  |    |\n                                                           |  |  |\
    \    |\n                                                           V  V  V   \
    \ |\n                                                          +-------+   |\n\
    \                                                          | EXIT  |-->+\n   \
    \                                                       | DONE  |    \n      \
    \                                                    +-------+    \n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - 'Post Office Protocol

    '
- title: Client Decision Table
  contents:
  - "Client Decision Table\n          |            STATE                 |\n   -------+----------------------------------|\n\
    \   INPUT  | CALL | NMBR | SIZE | XFER | EXIT |\n   -------+----------------------------------|\n\
    \   Greet  |  2   |  1   |  1   |  1   |  6   |\n   -------+----------------------------------|\n\
    \   #NNN   |  1   |  3   |  1   |  1   |  6   |\n   -------+----------------------------------|\n\
    \   =CCC   |  1   |  1   |  4   |  1   |  6   |\n   -------+----------------------------------|\n\
    \   data   |  1   |  1   |  1   |  5   |  6   |\n   -------+----------------------------------|\n\
    \   + Bye  |  1   |  1   |  1   |  1   |  6   |\n   -------+----------------------------------|\n\
    \   Close  |  1   |  1   |  1   |  1   |  6   |\n   -------+----------------------------------|\n\
    \   other  |  1   |  1   |  1   |  1   |  6   |\n   -------+----------------------------------|\n\
    \   Timeout|  1   |  1   |  1   |  1   |  6   |\n   -------+----------------------------------|\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n   Actions:\n      1.  This is garbage.  Send \"QUIT\"\
    , and go to EXIT state.\n      2.  (a) If the greeting is right then send \"HELO\"\
    \n              and go to NMBR state,\n          (b) Else send \"QUIT\" and go\
    \ to EXIT state.\n      3.  (a) If user wants this folder and NNN > 0\n      \
    \        then send \"READ\" and go to SIZE state,\n          (b) If user wants\
    \ a this folder and NNN = 0\n              then send \"QUIT\" and go to EXIT state,\n\
    \          (c) If user wants a different folder\n              then send \"FOLD\"\
    \ and go to NMBR state.\n      4.  (a) If user wants this message and CCC > 0\n\
    \              then send \"RETR\" and go to XFER state,\n          (b) If user\
    \ wants a this message and CCC = 0\n              then send \"QUIT\" and go to\
    \ EXIT state,\n          (c) If user wants a different message\n             \
    \ then send \"READ\" and go to SIZE state.\n      5.  (a) If user wants this message\
    \ kept\n              then send \"ACKS\" and go to SIZE state,\n          (b)\
    \ If user wants a this message deleted\n              then send \"ACKD\" and go\
    \ to SIZE state,\n          (c) If user wants a this message again\n         \
    \     then send \"NACK\" and go to SIZE state.\n      6.  Close the connection.\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - 'Post Office Protocol

    '
- title: Server Decision Table
  contents:
  - "Server Decision Table\n          |              STATE                       \n\
    \   -------+----------------------------------------- \n   INPUT  | LSTN | AUTH\
    \ | MBOX | ITEM | NEXT | DONE |\n   -------+-----------------------------------------|\n\
    \   Open   |  2   |  1   |  1   |  1   |  1   |  1   |\n   -------+-----------------------------------------|\n\
    \   HELO   |  1   |  3   |  1   |  1   |  1   |  1   |\n   -------+-----------------------------------------|\n\
    \   FOLD   |  1   |  1   |  5   |  5   |  1   |  1   |\n   -------+-----------------------------------------|\n\
    \   READ   |  1   |  1   |  6   |  6   |  1   |  1   |\n   -------+-----------------------------------------|\n\
    \   RETR   |  1   |  1   |  1   |  7   |  1   |  1   |\n   -------+-----------------------------------------|\n\
    \   ACKS   |  1   |  1   |  1   |  1   |  8   |  1   |\n   -------+-----------------------------------------|\n\
    \   ACKD   |  1   |  1   |  1   |  1   |  8   |  1   |\n   -------+-----------------------------------------|\n\
    \   NACK   |  1   |  1   |  1   |  1   |  8   |  1   |\n   -------+-----------------------------------------|\n\
    \   QUIT   |  1   |  4   |  4   |  4   |  1   |  1   |\n   -------+-----------------------------------------|\n\
    \   Close  |  1   |  1   |  1   |  1   |  1   |  9   |\n   -------+-----------------------------------------|\n\
    \   other  |  1   |  1   |  1   |  1   |  1   |  1   |\n   -------+-----------------------------------------|\n\
    \   Timeout|      |  1   |  1   |  1   |  1   |  1   |\n   -------+-----------------------------------------|\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - "Post Office Protocol\n   Actions:\n      1.  This is garbage.  Send \"- error\"\
    , and Close the connection.\n      2.  Send the greeting. Go to AUTH state.\n\
    \      3.  (a) If authorized user then send \"#NNN\" and go tp MBOX state,\n \
    \         (b) Else send \"- error\" and Close the connection.\n      4.  Send\
    \ \"+ Bye\" and go to DONE state.\n      5.  Send \"+NNN\" and go to MBOX state.\n\
    \      6.  Send \"=CCC\" and go to ITEM state.\n      7.  If message exists then\
    \ send the data and got to NEXT state,\n          Else Close the connection.\n\
    \      8.  Do what ACKS/ACKD/NACK require and go to ITEM state.\n      9.  Close\
    \ the connection.\n"
- title: RFC 937                                                    February 1985
  contents:
  - 'RFC 937                                                    February 1985

    '
- title: Post Office Protocol
  contents:
  - 'Post Office Protocol

    '
- title: Acknowledgment
  contents:
  - "Acknowledgment\n   We would like to acknowledge the helpful comments that we\
    \ received on\n   the first version of POP described in RFC 918, and the draft\
    \ of POP2\n   distributed to interested parties.\n"
- title: References
  contents:
  - "References\n   [1]  Postel, J., \"Simple Mail Transfer Protocol\", RFC 821,\n\
    \   USC/Information Sciences Institute, August 1982.\n   [2]  Crocker, D., \"\
    Standard for the Format of ARPA-Internet Text\n   Messages\", RFC 822, University\
    \ of Delaware, August 1982.\n   [3]  Reynolds, J.K., \"Post Office Protocol\"\
    , RFC 918, USC/Information\n   Sciences Institute, October 1984.\n   [4]  Reynolds,\
    \ J.K., and J. Postel, \"Assigned Numbers\", RFC 923,\n   USC/Information Sciences\
    \ Institute, October 1984.\n"
