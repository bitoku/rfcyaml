- title: __initial_text__
  contents:
  - "      Next Generation Structure of Management Information (SMIng)\n       Mappings\
    \ to the Simple Network Management Protocol (SNMP)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   SMIng (Structure of Management Information, Next Generation)\n \
    \  (RFC3780), is a protocol-independent data definition language for\n   management\
    \ information.  This memo defines an SMIng language\n   extension that specifies\
    \ the mapping of SMIng definitions of\n   identities, classes, and their attributes\
    \ and events to dedicated\n   definitions of nodes, scalar objects, tables and\
    \ columnar objects,\n   and notifications, for application to the SNMP management\
    \ framework.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  SNMP Based Internet Management . . . . . . . . . . .\
    \ . . . . .  3\n       2.1.   Kinds of Nodes. . . . . . . . . . . . . . . . .\
    \ . . . .  4\n       2.2.   Scalar and Columnar Object Instances. . . . . . .\
    \ . . .  5\n       2.3.   Object Identifier Hierarchy . . . . . . . . . . . .\
    \ . .  7\n   3.  SMIng Data Type Mappings . . . . . . . . . . . . . . . . . .\
    \ .  8\n       3.1.   ASN.1 Definitions . . . . . . . . . . . . . . . . . . .\
    \  9\n   4.  The snmp Extension Statement . . . . . . . . . . . . . . . . . 10\n\
    \       4.1.   The oid Statement . . . . . . . . . . . . . . . . . . . 10\n  \
    \     4.2.   The node Statement. . . . . . . . . . . . . . . . . . . 10\n    \
    \          4.2.1. The node's oid Statement . . . . . . . . . . . . 10\n      \
    \        4.2.2. The node's represents Statement. . . . . . . . . 10\n        \
    \      4.2.3. The node's status Statement. . . . . . . . . . . 11\n          \
    \    4.2.4. The node's description Statement . . . . . . . . 11\n            \
    \  4.2.5. The node's reference Statement . . . . . . . . . 11\n              4.2.6.\
    \ Usage Examples . . . . . . . . . . . . . . . . . 11\n       4.3.   The scalars\
    \ Statement . . . . . . . . . . . . . . . . . 11\n              4.3.1. The scalars'\
    \ oid Statement . . . . . . . . . . . 12\n              4.3.2. The scalars' object\
    \ Statement  . . . . . . . . . 12\n              4.3.3. The scalars' status Statement\
    \  . . . . . . . . . 13\n              4.3.4. The scalars' description Statement\
    \ . . . . . . . 14\n              4.3.5. The scalars' reference Statement . .\
    \ . . . . . . 14\n              4.3.6. Usage Example. . . . . . . . . . . . .\
    \ . . . . . 14\n       4.4.   The table Statement . . . . . . . . . . . . . .\
    \ . . . . 14\n              4.4.1. The table's oid Statement. . . . . . . . .\
    \ . . . 15\n              4.4.2. Table Indexing Statements. . . . . . . . . .\
    \ . . 15\n              4.4.3. The table's create Statement . . . . . . . . .\
    \ . 17\n              4.4.4. The table's object Statement . . . . . . . . . .\
    \ 17\n              4.4.5. The table's status Statement . . . . . . . . . . 19\n\
    \              4.4.6. The table's description Statement  . . . . . . . 19\n  \
    \            4.4.7. The table's reference Statement  . . . . . . . . 19\n    \
    \          4.4.8. Usage Example  . . . . . . . . . . . . . . . . . 19\n      \
    \ 4.5.   The notification Statement  . . . . . . . . . . . . . . 20\n        \
    \      4.5.1. The notification's oid Statement . . . . . . . . 20\n          \
    \    4.5.2. The notification's signals Statement . . . . . . 20\n            \
    \  4.5.3. The notification's status Statement  . . . . . . 20\n              4.5.4.\
    \ The notification's description Statement . . . . 21\n              4.5.5. The\
    \ notification's reference Statement . . . . . 21\n              4.5.6. Usage\
    \ Example. . . . . . . . . . . . . . . . . . 21\n       4.6.   The group Statement\
    \ . . . . . . . . . . . . . . . . . . 21\n              4.6.1. The group's oid\
    \ Statement  . . . . . . . . . . . 22\n              4.6.2. The group's members\
    \ Statement  . . . . . . . . . 22\n              4.6.3. The group's status Statement\
    \ . . . . . . . . . . 22\n              4.6.4. The group's description Statement\
    \  . . . . . . . 22\n              4.6.5. The group's reference Statement  . .\
    \ . . . . . . 22\n              4.6.6. Usage Example  . . . . . . . . . . . .\
    \ . . . . . 22\n       4.7.   The compliance Statement. . . . . . . . . . . .\
    \ . . . . 23\n              4.7.1. The compliance's oid Statement . . . . . .\
    \ . . . 23\n              4.7.2. The compliance's status Statement  . . . . .\
    \ . . 23\n              4.7.3. The compliance's description Statement . . . .\
    \ . 23\n              4.7.4. The compliance's reference Statement . . . . . .\
    \ 23\n              4.7.5. The compliance's mandatory Statement . . . . . . 24\n\
    \              4.7.6. The compliance's optional Statement. . . . . . . 24\n  \
    \            4.7.7. The compliance's refine Statement  . . . . . . . 24\n    \
    \          4.7.8. Usage Example  . . . . . . . . . . . . . . . . . 26\n   5. \
    \ NMRG-SMING-SNMP-EXT  . . . . . . . . . . . . . . . . . . . . . 26\n   6.  NMRG-SMING-SNMP\
    \  . . . . . . . . . . . . . . . . . . . . . . . 33\n   7.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 46\n   8.  Acknowledgements . . . . .\
    \ . . . . . . . . . . . . . . . . . . 46\n   9.  References . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 47\n       9.1.   Normative References. .\
    \ . . . . . . . . . . . . . . . . 47\n       9.2.   Informative References. .\
    \ . . . . . . . . . . . . . . . 47\n   Authors' Addresses . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 48\n   Full Copyright Statement . . . . . . . .\
    \ . . . . . . . . . . . . . 49\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   SMIng (Structure of Management Information, Next Generation)\n\
    \   [RFC3780] is a protocol-independent data definition language for\n   management\
    \ information.  This memo defines an SMIng language\n   extension that specifies\
    \ the mapping of SMIng definitions of\n   identities, classes, and their attributes\
    \ and events to dedicated\n   definitions of nodes, scalar objects, tables and\
    \ columnar objects,\n   and notifications for application in the SNMP management\
    \ framework.\n   Section 2 introduces basics of the SNMP management framework.\n\
    \   Section 3 defines how SMIng data types are mapped to the data types\n   supported\
    \ by the SNMP protocol.  It introduces some new ASN.1 [ASN1]\n   definitions which\
    \ are used to represent new SMIng base types such as\n   floats in the SNMP protocol.\n\
    \   Section 4 describes the semantics of the SNMP mapping extensions for\n   SMIng.\
    \  The formal SMIng specification of the extension is provided\n   in Section\
    \ 5.\n   Section 6 contains an SMIng module which defines derived types (such\n\
    \   as RowStatus) that are specific to the SNMP mapping.\n   The key words \"\
    MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",\
    \ \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document\
    \ are to be interpreted as described in [RFC2119].\n"
- title: 2.  SNMP-Based Internet Management
  contents:
  - "2.  SNMP-Based Internet Management\n   The SNMP network management framework\
    \ [RFC3410] is based on the\n   concept of \"managed objects\".  Managed objects\
    \ represent real or\n   synthesized variables of systems that are to be managed.\
    \  Note that\n   in spite of these terms this model is not object-oriented.  For\n\
    \   naming purposes, the managed objects are organized hierarchically in\n   an\
    \ \"object identifier tree\", where only leaf nodes may represent\n   objects.\n\
    \   Nodes in the object identifier tree may also identify conceptual\n   tables,\
    \ rows of conceptual tables, notifications, groups of objects\n   and/or notifications,\
    \ compliance statements, modules or other\n   information.  Each node is identified\
    \ by an unique \"object\n   identifier\" value which is a sequence of non-negative\
    \ numbers, named\n   \"sub-identifiers\", where the left-most sub-identifier refers\
    \ to the\n   node next to the root of the tree and the right-most sub-identifier\n\
    \   refers to the node that is identified by the complete object\n   identifier\
    \ value.  Each sub-identifier has a value between 0 and\n   2^32-1 (4294967295).\n\
    \   The SMIng extensions described in this document are used to map SMIng\n  \
    \ data definitions to SNMP compliant managed objects.  This mapping is\n   designed\
    \ to be readable to computer programs, named MIB compilers, as\n   well as to\
    \ human readers.\n"
- title: 2.1.  Kinds of Nodes
  contents:
  - "2.1.  Kinds of Nodes\n   Each node in the object identifier tree is of a certain\
    \ kind and may\n   represent management information or not:\n   o  Simple nodes,\
    \ that do not represent management information, but\n      may be used for grouping\
    \ nodes in a subtree.  Those nodes are\n      defined by the `node' statement.\
    \  This statement can also be used\n      to map an SMIng `identity' to a node.\n\
    \   o  Nodes representing the identity of a module to allow references to\n  \
    \    a module in other objects of type `ObjectIdentifier'.  Those nodes\n    \
    \  are defined by the `snmp' statement,\n   o  Scalar objects, which have exactly\
    \ one object instance and no\n      child nodes.  See Section 2.2 for scalar objects'\
    \ instances.  A\n      set of scalar objects is mapped from one or more SMIng\
    \ classes\n      using the `scalars' statement.  The statement block of the\n\
    \      `scalars' statement contains one `implements' statement for each\n    \
    \  class.  The associated statement blocks in turn contain `object'\n      statements\
    \ that specify the mapping of attributes to scalar\n      objects.  Scalar objects\
    \ MUST not have any child node.\n   o  Tables, which represent the root node of\
    \ a collection of\n      information structured in table rows.  Table nodes are\
    \ defined by\n      the `table' statement.  A table object identifier SHOULD not\
    \ have\n      any other child node than the implicitly defined row node (see\n\
    \      below).\n   o  Rows, which belong to a table (that is, row's object identifier\n\
    \      consists of the table's full object identifier plus a single `1'\n    \
    \  sub-identifier) and represent a sequence of one or more columnar\n      objects.\
    \  A row node is implicitly defined for each table node.\n   o  Columnar objects,\
    \ which belong to a row (that is, the columnar\n      objects' object identifier\
    \ consists of the row's full object\n      identifier plus a single column-identifying\
    \ sub-identifier) and\n      have zero or more object instances and no child nodes.\
    \  They are\n      defined as follows: The classes that are implemented by a `table'\n\
    \      statement are identified by `implements' statements.  The\n      statement\
    \ block of each `implements' statement contains `object'\n      statements that\
    \ specify the mapping of attributes to columnar\n      objects of this table.\
    \  Columnar objects MUST not have any child\n      node.\n   o  Notifications,\
    \ which represent information that is sent by agents\n      within unsolicited\
    \ transmissions.  The `notification' statement is\n      used to map an SMIng\
    \ event to a notification.  A notification's\n      object identifier SHOULD not\
    \ have any child node.\n   o  Groups of objects and notifications, which may be\
    \ used for\n      compliance statements.  They are defined using the `group'\n\
    \      statement.\n   o  Compliance statements which define requirements for MIB\
    \ module\n      implementations.  They are defined using the `compliance'\n  \
    \    statement.\n"
- title: 2.2.  Scalar and Columnar Object Instances
  contents:
  - "2.2.  Scalar and Columnar Object Instances\n   Instances of managed objects are\
    \ identified by appending an\n   instance-identifier to the object's object identifier.\
    \  Scalar\n   objects and columnar objects use different ways to construct the\n\
    \   instance-identifier.\n   Scalar objects have exactly one object instance.\
    \  It is identified by\n   appending a single `0' sub-identifier to the object\
    \ identifier of the\n   scalar object.\n   Within tables, different instances\
    \ of the same columnar object are\n   identified by appending a sequence of one\
    \ or more sub-identifiers to\n   the object identifier of the columnar object\
    \ which consists of the\n   values of object instances that unambiguously distinguish\
    \ a table\n   row.  These indexing objects can be columnar objects of the same\n\
    \   and/or another table, but MUST NOT be scalar objects.  Multiple\n   applications\
    \ of the same object in a single table indexing\n   specification are strongly\
    \ discouraged.\n   The base types of the indexing objects indicate how to form\
    \ the\n   instance-identifier:\n   o  integer-valued or enumeration-valued: a\
    \ single sub-identifier\n      taking the integer value (this works only for non-negative\n\
    \      integers and integers of a size of up to 32 bits),\n   o  string-valued,\
    \ fixed-length strings (or variable-length with\n      compact encoding): `n'\
    \ sub-identifiers, where `n' is the length of\n      the string (each octet of\
    \ the string is encoded in a separate\n      sub-identifier),\n   o  string-valued,\
    \ variable-length strings or bits-valued: `n+1' sub-\n      identifiers, where\
    \ `n' is the length of the string or bits\n      encoding (the first sub-identifier\
    \ is `n' itself, following this,\n      each octet of the string or bits is encoded\
    \ in a separate sub-\n      identifier),\n   o  object identifier-valued (with\
    \ compact encoding): `n' sub-\n      identifiers, where `n' is the number of sub-identifiers\
    \ in the\n      value (each sub-identifier of the value is copied into a separate\n\
    \      sub-identifier),\n   o  object identifier-valued: `n+1' sub-identifiers,\
    \ where `n' is the\n      number of sub-identifiers in the value (the first sub-identifier\n\
    \      is `n' itself, following this, each sub-identifier in the value is\n  \
    \    copied),\n   Note that compact encoding can only be applied to an object\
    \ having a\n   variable-length syntax (e.g., variable-length strings, bits objects\n\
    \   or object identifier-valued objects).  Further, compact encoding can\n   only\
    \ be associated with the last object in a list of indexing\n   objects.  Finally,\
    \ compact encoding MUST NOT be used on a variable-\n   length string object if\
    \ that string might have a value of zero-\n   length.\n   Instances identified\
    \ by use of integer-valued or enumeration-valued\n   objects are RECOMMENDED to\
    \ be numbered starting from one (i.e., not\n   from zero).  Integer objects that\
    \ allow negative values, Unsigned64\n   objects, Integer64 objects and floating\
    \ point objects MUST NOT be\n   used for table indexing.\n   Objects which are\
    \ both specified for indexing in a row and also\n   columnar objects of the same\
    \ row are termed auxiliary objects.\n   Auxiliary objects SHOULD be non-accessible,\
    \ except in the following\n   circumstances:\n   o  within a module originally\
    \ written to conform to SMIv1, or\n   o  a row must contain at least one columnar\
    \ object which is not an\n      auxiliary object.  In the event that all of a\
    \ row's columnar\n      objects are also specified to be indexing objects then\
    \ one of them\n      MUST be accessible.\n"
- title: 2.3.  Object Identifier Hierarchy
  contents:
  - "2.3.  Object Identifier Hierarchy\n   The layers of the object identifier tree\
    \ near the root are well\n   defined and organized by standardization bodies.\
    \  The first level\n   next to the root has three nodes:\n      0: ccitt\n   \
    \   1: iso\n      2: joint-iso-ccitt\n   Note that the renaming of the Commite\
    \ Consultatif International de\n   Telegraphique et Telephonique (CCITT) to International\n\
    \   Telecommunications Union (ITU) had no consequence on the names used\n   in\
    \ the object identifier tree.\n   The root of the subtree administered by the\
    \ Internet Assigned Numbers\n   Authority (IANA) for the Internet is `1.3.6.1'\
    \ which is assigned with\n   the identifier `internet'.  That is, the Internet\
    \ subtree of object\n   identifiers starts with the prefix `1.3.6.1.'.\n   Several\
    \ branches underneath this subtree are used for network\n   management:\n   The\
    \ `mgmt' (internet.2) subtree is used to identify \"standard\"\n   definitions.\
    \  An information module produced by an IETF working group\n   becomes a \"standard\"\
    \ information module when the document is first\n   approved by the IESG and enters\
    \ the Internet standards track.\n   The `experimental' (internet.3) subtree is\
    \ used to identify\n   experimental definitions being designed by working groups\
    \ of the IETF\n   or IRTF.  If an information module produced by a working group\n\
    \   becomes a \"standard\" module, then at the very beginning of its entry\n \
    \  onto the Internet standards track, the definitions are moved under\n   the\
    \ mgmt subtree.\n   The `private' (internet.4) subtree is used to identify definitions\n\
    \   defined unilaterally.  The `enterprises' (private.1) subtree beneath\n   private\
    \ is used, among other things, to permit providers of\n   networking subsystems\
    \ to register information modules of their\n   products.\n   These and some other\
    \ nodes are defined in the SMIng module NMRG-\n   SMING-SNMP-EXT (Section 5).\n"
- title: 3.  SMIng Data Type Mappings
  contents:
  - "3.  SMIng Data Type Mappings\n   SMIng [RFC3780] supports the following set of\
    \ base types:\n   OctetString, Pointer, Integer32, Integer64, Unsigned32, Unsigned64,\n\
    \   Float32, Float64, Float128, Enumeration, Bits, and ObjectIdentifier.\n   The\
    \ SMIng core module NMRG-SMING ([RFC3780], Appendix A) defines\n   additional\
    \ derived types, among them Counter32 (derived from\n   Unsigned32), Counter64\
    \ (derived from Unsigned64), TimeTicks32 and\n   TimeTicks64 (derived from Unsigned32\
    \ and Unsigned64), IpAddress\n   (derived from OctetString), and Opaque (derived\
    \ from OctetString).\n   The version 2 of the protocol operations for SNMP document\
    \ [RFC3416]\n   defines the following 9 data types which are distinguished by\
    \ the\n   protocol: INTEGER, OCTET STRING, OBJECT IDENTIFIER, IpAddress,\n   Counter32,\
    \ TimeTicks, Opaque, Counter64, and Unsigned32.\n   The SMIng base types and their\
    \ derived types are mapped to SNMP data\n   types according to the following table:\n\
    \         SMIng Data Type    SNMP Data Type         Comment\n         ---------------\
    \    -------------------    -------\n         OctetString        OCTET STRING\
    \           (1)\n         Pointer            OBJECT IDENTIFIER\n         Integer32\
    \          INTEGER\n         Integer64          Opaque (Integer64)     (2)\n \
    \        Unsigned32         Unsigned32             (3)\n         Unsigned64  \
    \       Opaque (Unsigned64)    (2) (4)\n         Float32            Opaque (Float32)\
    \       (2)\n         Float64            Opaque (Float64)       (2)\n        \
    \ Float128           Opaque (Float128)      (2)\n         Enumeration        INTEGER\n\
    \         Bits               OCTET STRING\n         ObjectIdentifier   OBJECT\
    \ IDENTIFIER\n         Counter32          Counter32\n         Counter64      \
    \    Counter64\n         TimeTicks32        TimeTicks\n         TimeTicks64  \
    \      Opaque (Unsigned64)    (2)\n         IpAddress          IpAddress\n   \
    \      Opaque             Opaque\n      (1) This mapping includes all types derived\
    \ from the OctetString\n          type except those types derived from the IpAddress\
    \ and Opaque\n          SMIng types defined in the module NMRG-SMING.\n      (2)\
    \ This type is encoded according to the ASN.1 type with the same\n          name\
    \ defined in Section 3.1.  The resulting BER encoded value\n          is then\
    \ wrapped in an Opaque value.\n      (3) This mapping includes all types derived\
    \ from the Unsigned32\n          type except those types derived from the Counter32\
    \ and\n          TimeTicks32 SMIng types defined in the module NMRG-SMING.\n \
    \     (4) This mapping includes all types derived from the Unsigned64\n      \
    \    type except those types derived from the Counter64 SMIng type\n         \
    \ defined in the module NMRG-SMING.\n"
- title: 3.1.  ASN.1 Definitions
  contents:
  - "3.1.  ASN.1 Definitions\n   The ASN.1 [ASN1] type definitions below introduce\
    \ data types which\n   are used to map the new SMIng base types into the set of\
    \ ASN.1 types\n   supported by the second version of SNMP protocol operations\n\
    \   [RFC3416].\n   NMRG-SMING-SNMP-MAPPING DEFINITIONS ::= BEGIN\n   Integer64\
    \ ::=\n       [APPLICATION 10]\n           IMPLICIT INTEGER (-9223372036854775808..9223372036854775807)\n\
    \   Unsigned64\n       [APPLICATION 11]\n           IMPLICIT INTEGER (0..18446744073709551615)\n\
    \   Float32\n       [APPLICATION 12]\n           IMPLICIT OCTET STRING (SIZE (4))\n\
    \   Float64\n       [APPLICATION 13]\n           IMPLICIT OCTET STRING (SIZE (8))\n\
    \   Float128\n       [APPLICATION 14]\n           IMPLICIT OCTET STRING (SIZE\
    \ (16))\n   END\n   The definitions of Integer64 and Unsigned64 are consistent\
    \ with the\n   same definitions in the SPPI [RFC3159].  The floating point types\n\
    \   Float32, Float64 and Float128 support single, double and quadruple\n   IEEE\
    \ floating point values.  The encoding of the values follows the\n   \"IEEE Standard\
    \ for Binary Floating-Point Arithmetic\" as defined in\n   ANSI/IEEE Standard\
    \ 754-1985 [IEEE754].\n"
- title: 4.  The snmp Extension Statement
  contents:
  - "4.  The snmp Extension Statement\n   The `snmp' statement is the main statement\
    \ of the SNMP mapping\n   specification.  It gets one or two arguments: an optional\
    \ lower-case\n   identifier that specifies a node that represents the module's\n\
    \   identity, and a mandatory statement block that contains all details\n   of\
    \ the SNMP mapping.  All information of an SNMP mapping are mapped\n   to an SNMP\
    \ conformant module of the same name as the containing SMIng\n   module.  A single\
    \ SMIng module must not contain more than one `snmp'\n   statement.\n"
- title: 4.1.  The oid Statement
  contents:
  - "4.1.  The oid Statement\n   The snmp's `oid' statement, which must be present,\
    \ if the snmp\n   statement contains a module identifier and must be absent otherwise,\n\
    \   gets one argument which specifies the object identifier value that is\n  \
    \ assigned to this module's identity node.\n"
- title: 4.2.  The node Statement
  contents:
  - "4.2.  The node Statement\n   The `node' statement is used to name and describe\
    \ a node in the\n   object identifier tree, without associating any class or attribute\n\
    \   information with this node.  This may be useful to group definitions\n   in\
    \ a subtree of related management information, or to uniquely define\n   an SMIng\
    \ `identity' to be referenced in attributes of type Pointer.\n   The `node' statement\
    \ gets two arguments: a lower-case node identifier\n   and a statement block that\
    \ holds detailed node information in an\n   obligatory order.\n   See the `nodeStatement'\
    \ rule of the grammar (Section 5) for the\n   formal syntax of the `node' statement.\n"
- title: 4.2.1.  The node's oid Statement
  contents:
  - "4.2.1.  The node's oid Statement\n   The node's `oid' statement, which must be\
    \ present, gets one argument\n   which specifies the object identifier value that\
    \ is assigned to this\n   node.\n"
- title: 4.2.2.  The node's represents Statement
  contents:
  - "4.2.2.  The node's represents Statement\n   The node's `represents' statement,\
    \ which need not be present, makes\n   this node represent an SMIng identity,\
    \ so that objects of type\n   Pointer can reference that identity.  The statement\
    \ gets one argument\n   which specifies the identity name.\n"
- title: 4.2.3 The node's status Statement
  contents:
  - "4.2.3 The node's status Statement\n   The node's `status' statement, which must\
    \ be present, gets one\n   argument which is used to specify whether this node\
    \ definition is\n   current or historic.  The value `current' means that the definition\n\
    \   is current and valid.  The value `obsolete' means the definition is\n   obsolete\
    \ and should not be implemented and/or can be removed if\n   previously implemented.\
    \  While the value `deprecated' also indicates\n   an obsolete definition, it\
    \ permits new/continued implementation in\n   order to foster interoperability\
    \ with older/existing implementations.\n"
- title: 4.2.4.  The node's description Statement
  contents:
  - "4.2.4.  The node's description Statement\n   The node's `description' statement,\
    \ which need not be present, gets\n   one argument which is used to specify a\
    \ high-level textual\n   description of this node.\n   It is RECOMMENDED to include\
    \ all semantics and purposes of this node.\n"
- title: 4.2.5.  The node's reference Statement
  contents:
  - "4.2.5.  The node's reference Statement\n   The node's `reference' statement,\
    \ which need not be present, gets one\n   argument which is used to specify a\
    \ textual cross-reference to some\n   other document, either another module which\
    \ defines related\n   definitions, or some other document which provides additional\n\
    \   information relevant to this node.\n"
- title: 4.2.6.  Usage Examples
  contents:
  - "4.2.6.  Usage Examples\n   node iso                            { oid 1;     status\
    \ current; };\n   node   org                          { oid iso.3; status current;\
    \ };\n   node     dod                        { oid org.6; status current; };\n\
    \   node       internet                 { oid dod.1; status current; };\n   node\
    \   zeroDotZero {\n       oid         0.0;\n       represents  NMRG-SMING::null;\n\
    \       status      current;\n       description \"A null value used for pointers.\"\
    ;\n   };\n"
- title: 4.3.  The scalars Statement
  contents:
  - "4.3.  The scalars Statement\n   The `scalars' statement is used to define the\
    \ mapping of one or more\n   classes to a group of SNMP scalar managed objects\
    \ organized under a\n   common parent node.  The `scalars' statement gets two\
    \ arguments: a\n   lower-case scalar group identifier and a statement block that\
    \ holds\n   detailed mapping information of this scalar group in an obligatory\n\
    \   order.\n   See the `scalarsStatement' rule of the grammar (Section 5) for\
    \ the\n   formal syntax of the `scalars' statement.\n"
- title: 4.3.1.  The scalars' oid Statement
  contents:
  - "4.3.1.  The scalars' oid Statement\n   The scalars' `oid' statement, which must\
    \ be present, gets one\n   argument which specifies the object identifier value\
    \ that is assigned\n   to the common parent node of this scalar group.\n"
- title: 4.3.2.  The scalars' object Statement
  contents:
  - "4.3.2.  The scalars' object Statement\n   The scalars' `object' statement, which\
    \ must be present at least once,\n   makes this scalar group contain a given scalar\
    \ object.  It gets two\n   arguments: the name of the scalar object to be defined\
    \ and a\n   statement block that holds additional detailed information in an\n\
    \   obligatory order.\n"
- title: 4.3.2.1.  The object's implements Statement
  contents:
  - "4.3.2.1.  The object's implements Statement\n   The `implements' statement, which\
    \ must be present, is used to specify\n   a single leaf attribute of a class that\
    \ is implemented by this scalar\n   object.  The type of this attribute must be\
    \ a simple type, i.e., not\n   a class.\n"
- title: 4.3.2.2.  The object's subid Statement
  contents:
  - "4.3.2.2.  The object's subid Statement\n   The `subid' statement, which need\
    \ not be present, is used to specify\n   the sub-identifier that identifies the\
    \ scalar object within this\n   scalar group, i.e., the object identifier of the\
    \ scalar object is the\n   concatenation of the values of this scalar group's\
    \ oid statement and\n   of this subid statement.\n   If this statement is omitted,\
    \ the sub-identifier is the one of the\n   previous object statement within this\
    \ scalar group plus 1.  If the\n   containing object statement is the first one\
    \ within the containing\n   scalar group and the subid statement is omitted, the\
    \ sub-identifier\n   is 1.\n"
- title: 4.3.2.3.  The object's status Statement
  contents:
  - "4.3.2.3.  The object's status Statement\n   The object's `status' statement,\
    \ which need not be present, gets one\n   argument which is used to specify whether\
    \ this scalar object\n   definition is current or historic.  The value `current'\
    \ means that\n   the definition is current and valid.  The value `obsolete' means\
    \ the\n   definition is obsolete and should not be implemented and/or can be\n\
    \   removed if previously implemented.  While the value `deprecated' also\n  \
    \ indicates an obsolete definition, it permits new/continued\n   implementation\
    \ in order to foster interoperability with\n   older/existing implementations.\n\
    \   Scalar objects SHOULD NOT be defined as `current' if the implemented\n   attribute\
    \ definition is `deprecated' or `obsolete'.  Similarly, they\n   SHOULD NOT be\
    \ defined as `deprecated' if the implemented attribute is\n   `obsolete'.  Nevertheless,\
    \ subsequent revisions of used class\n   definitions cannot be avoided, but SHOULD\
    \ be taken into account in\n   subsequent revisions of the local module.\n   Note\
    \ that it is RECOMMENDED to omit the status statement which means\n   that the\
    \ status is inherited from the containing scalars statement.\n   However, if the\
    \ status of a scalar object varies from the containing\n   scalar group, it has\
    \ to be expressed explicitly, e.g., if the\n   implemented attribute has been\
    \ deprecated or obsoleted.\n"
- title: 4.3.2.4.  The object's description Statement
  contents:
  - "4.3.2.4.  The object's description Statement\n   The object's `description' statement,\
    \ which need not be present, gets\n   one argument which is used to specify a\
    \ high-level textual\n   description of this scalar object.\n   Note that in contrast\
    \ to other definitions this description statement\n   is not mandatory and it\
    \ is RECOMMENDED to omit it, if the object is\n   fully described by the description\
    \ of the implemented attribute.\n"
- title: 4.3.2.5.  The object's reference Statement
  contents:
  - "4.3.2.5.  The object's reference Statement\n   The object's `reference' statement,\
    \ which need not be present, gets\n   one argument which is used to specify a\
    \ textual cross-reference to\n   some other document, either another module which\
    \ defines related\n   definitions, or some other document which provides additional\n\
    \   information relevant to this scalar object.\n   It is RECOMMENDED to omit\
    \ this statement, if the object's references\n   are fully described by the implemented\
    \ attribute.\n"
- title: 4.3.3.  The scalars' status Statement
  contents:
  - "4.3.3.  The scalars' status Statement\n   The scalars' `status' statement, which\
    \ must be present, gets one\n   argument which is used to specify whether this\
    \ scalar group\n   definition is current or historic.  The value `current' means\
    \ that\n   the definition is current and valid.  The value `obsolete' means the\n\
    \   definition is obsolete and should not be implemented and/or can be\n   removed\
    \ if previously implemented.  While the value `deprecated' also\n   indicates\
    \ an obsolete definition, it permits new/continued\n   implementation in order\
    \ to foster interoperability with\n   older/existing implementations.\n"
- title: 4.3.4.  The scalars' description Statement
  contents:
  - "4.3.4.  The scalars' description Statement\n   The scalars' `description' statement,\
    \ which must be present, gets one\n   argument which is used to specify a high-level\
    \ textual description of\n   this scalar group.\n   It is RECOMMENDED to include\
    \ all semantic definitions necessary for\n   the implementation of this scalar\
    \ group.\n"
- title: 4.3.5.  The scalars' reference Statement
  contents:
  - "4.3.5.  The scalars' reference Statement\n   The scalars' `reference' statement,\
    \ which need not be present, gets\n   one argument which is used to specify a\
    \ textual cross-reference to\n   some other document, either another module which\
    \ defines related\n   definitions, or some other document which provides additional\n\
    \   information relevant to this scalars statement.\n"
- title: 4.3.6.  Usage Example
  contents:
  - "4.3.6.  Usage Example\n   scalars ip {\n     oid             mib-2.4;\n     object\
    \ ipForwarding { implements Ip.forwarding; };\n     object ipDefaultTTL { implements\
    \ Ip.defaultTTL; };\n     // ...\n     status          current;\n     description\n\
    \             \"This scalar group implements the Ip class.\";\n   };\n"
- title: 4.4.  The table Statement
  contents:
  - "4.4.  The table Statement\n   The `table' statement is used to define the mapping\
    \ of one or more\n   classes to a single SNMP table of columnar managed objects.\
    \  The\n   `table' statement gets two arguments: a lower-case table identifier\n\
    \   and a statement block that holds detailed mapping information of this\n  \
    \ table in an obligatory order.\n   See the `tableStatement' rule of the grammar\
    \ (Section 5) for the\n   formal syntax of the `table' statement.\n"
- title: 4.4.1.  The table's oid Statement
  contents:
  - "4.4.1.  The table's oid Statement\n   The table's `oid' statement, which must\
    \ be present, gets one argument\n   which specifies the object identifier value\
    \ that is assigned to this\n   table's node.\n"
- title: 4.4.2.  Table Indexing Statements
  contents:
  - "4.4.2.  Table Indexing Statements\n   SNMP table mappings offers five methods\
    \ to supply table indexing\n   information: ordinary tables, table augmentations,\
    \ sparse table\n   augmentations, table expansions, and reordered tables use different\n\
    \   statements to denote their indexing information.  Each table\n   definition\
    \ must contain exactly one of the following indexing\n   statements.\n"
- title: 4.4.2.1.  The table's index Statement for Table Indexing
  contents:
  - "4.4.2.1.  The table's index Statement for Table Indexing\n   The table's `index'\
    \ statement, which is used to supply table indexing\n   information of base tables,\
    \ gets one argument that specifies a\n   comma-separated list of objects, that\
    \ are used for table indexing,\n   enclosed in parenthesis.\n   The elements of\
    \ the `unique' statement of the implemented class(es)\n   and their order should\
    \ be regarded as a hint for the index elements\n   of the table.\n   In case of\
    \ modules that should be compatible on the SNMP protocol\n   level to SMIv2 versions\
    \ of the module, an optional `implied' keyword\n   may be added in front of the\
    \ list to indicate a compact encoding of\n   the last object in the list.  See\
    \ Section 2.2 for details.\n"
- title: 4.4.2.2.  The table's augments Statement for Table Indexing
  contents:
  - "4.4.2.2.  The table's augments Statement for Table Indexing\n   The table's `augments'\
    \ statement, which is used to supply table\n   indexing information of tables\
    \ that augment a base table, gets one\n   argument that specifies the identifier\
    \ of the table to be augmented.\n   Note that a table augmentation cannot itself\
    \ be augmented.  Anyhow, a\n   base table may be augmented by multiple table augmentations.\n\
    \   A table augmentation makes instances of subordinate columnar objects\n   identified\
    \ according to the index specification of the base table\n   corresponding to\
    \ the table named in the `augments' statement.\n   Further, instances of subordinate\
    \ columnar objects of a table\n   augmentation exist according to the same semantics\
    \ as instances of\n   subordinate columnar objects of the base table being augmented.\
    \  As\n   such, note that creation of a base table row implies the\n   correspondent\
    \ creation of any table row augmentations.  Table\n   augmentations MUST NOT be\
    \ used in table row creation and deletion\n   operations.\n"
- title: 4.4.2.3.  The table's extends Statement for Table Indexing
  contents:
  - "4.4.2.3.  The table's extends Statement for Table Indexing\n   The table's `extends'\
    \ statement, which is used to supply table\n   indexing information of tables\
    \ that sparsely augment a base table,\n   gets one argument that specifies the\
    \ identifier of the table to be\n   sparsely augmented.  Note that a sparse table\
    \ augmentation cannot\n   itself be augmented.  Anyhow, a base table may be augmented\
    \ by\n   multiple table augmentations, sparsely or not.\n   A sparse table augmentation\
    \ makes instances of subordinate columnar\n   objects identified, if present,\
    \ according to the index specification\n   of the base table corresponding to\
    \ the table named in the `extends'\n   statement.  Further, instances of subordinate\
    \ columnar objects of a\n   sparse table augmentation exist according to the semantics\
    \ as\n   instances of subordinate columnar objects of the base table and the\n\
    \   (non-formal) rules that confine the sparse relationship.  As such,\n   note\
    \ that creation of a sparse table row augmentation may be implied\n   by the creation\
    \ of a base table row as well as done by an explicit\n   creation.  However, if\
    \ a base table row gets deleted, any dependent\n   sparse table row augmentations\
    \ get also deleted implicitly.\n"
- title: 4.4.2.4.  The table's reorders Statement for Table Indexing
  contents:
  - "4.4.2.4.  The table's reorders Statement for Table Indexing\n   The table's `reorders'\
    \ statement is used to supply table indexing\n   information of tables, that contain\
    \ exactly the same index objects of\n   a base table but in a different order.\
    \  It gets at least two\n   arguments.  The first one specifies the identifier\
    \ of the base table.\n   The second one specifies a comma-separated list of exactly\
    \ those\n   object identifiers of the base table's `index' statement, but in the\n\
    \   order to be used in this table.  Note that a reordered table cannot\n   itself\
    \ be reordered.  Anyhow, a base table may be used for multiple\n   reordered tables.\n\
    \   Under some circumstances, an optional `implied' keyword may be added\n   in\
    \ front of the list to indicate a compact encoding of the last\n   object in the\
    \ list.  See Section 2.2 for details.\n   Instances of subordinate columnar objects\
    \ of a reordered table exist\n   according to the same semantics as instances\
    \ of subordinate columnar\n   objects of the base table.  As such, note that creation\
    \ of a base\n   table row implies the correspondent creation of any related reordered\n\
    \   table row.  Reordered tables MUST NOT be used in table row creation\n   and\
    \ deletion operations.\n"
- title: 4.4.2.5.  The table's expands Statement for Table Indexing
  contents:
  - "4.4.2.5.  The table's expands Statement for Table Indexing\n   The table's `expands'\
    \ statement is used to supply table indexing\n   information of table expansions.\
    \  Table expansions use exactly the\n   same index objects of another table together\
    \ with additional indexing\n   objects.  Thus, the `expands' statement gets at\
    \ least two arguments.\n   The first one specifies the identifier of the base\
    \ table.  The second\n   one specifies a comma-separated list of the additional\
    \ object\n   identifiers used for indexing.  Note that an expanded table may\n\
    \   itself be expanded, and base tables may be used for multiple table\n   expansions.\n\
    \   Under some circumstances, an optional `implied' keyword may be added\n   in\
    \ front of the list to indicate a compact encoding of the last\n   object in the\
    \ list.  See Section 2.2 for details.\n"
- title: 4.4.3.  The table's create Statement
  contents:
  - "4.4.3.  The table's create Statement\n   The table's `create' statement, which\
    \ need not be present, gets no\n   argument.  If the `create' statement is present,\
    \ table row creation\n   (and deletion) is possible.\n"
- title: 4.4.4.  The table's object Statement
  contents:
  - "4.4.4.  The table's object Statement\n   The table's `object' statement, which\
    \ must be present at least once,\n   makes this table contain a given columnar\
    \ object.  It gets two\n   arguments: the name of the columnar object to be defined\
    \ and a\n   statement block that holds additional detailed information in an\n\
    \   obligatory order.\n"
- title: 4.4.4.1.  The object's implements Statement
  contents:
  - "4.4.4.1.  The object's implements Statement\n   The `implements' statement, which\
    \ must be present, is used to specify\n   a single leaf attribute of a class that\
    \ is implemented by this\n   columnar object.  The type of this attribute must\
    \ be a simple type,\n   i.e., not a class.\n"
- title: 4.4.4.2.  The object's subid Statement
  contents:
  - "4.4.4.2.  The object's subid Statement\n   The `subid' statement, which need\
    \ not be present, is used to specify\n   the sub-identifier that identifies the\
    \ columnar object within this\n   table, i.e., the object identifier of the columnar\
    \ object is the\n   concatenation of the values of this table's oid statement\
    \ and of this\n   subid statement.\n   If this statement is omitted, the sub-identifier\
    \ is the one of the\n   previous object statement within this table plus 1.  If\
    \ the\n   containing object statement is the first one within the containing\n\
    \   table and the subid statement is omitted, the sub-identifier is 1.\n"
- title: 4.4.4.3.  The object's status Statement
  contents:
  - "4.4.4.3.  The object's status Statement\n   The object's `status' statement,\
    \ which need not be present, gets one\n   argument which is used to specify whether\
    \ this columnar object\n   definition is current or historic.  The value `current'\
    \ means that\n   the definition is current and valid.  The value `obsolete' means\
    \ the\n   definition is obsolete and should not be implemented and/or can be\n\
    \   removed if previously implemented.  While the value `deprecated' also\n  \
    \ indicates an obsolete definition, it permits new/continued\n   implementation\
    \ in order to foster interoperability with\n   older/existing implementations.\n\
    \   Columnar objects SHOULD NOT be defined as `current' if the\n   implemented\
    \ attribute definition is `deprecated' or `obsolete'.\n   Similarly, they SHOULD\
    \ NOT be defined as `deprecated' if the\n   implemented attribute is `obsolete'.\
    \  Nevertheless, subsequent\n   revisions of used class definitions cannot be\
    \ avoided, but SHOULD be\n   taken into account in subsequent revisions of the\
    \ local module.\n   Note that it is RECOMMENDED to omit the status statement which\
    \ means\n   that the status is inherited from the containing table statement.\n\
    \   However, if the status of a columnar object varies from the\n   containing\
    \ table, it has to be expressed explicitly, e.g., if the\n   implemented attribute\
    \ has been deprecated or obsoleted.\n"
- title: 4.4.4.4.  The object's description Statement
  contents:
  - "4.4.4.4.  The object's description Statement\n   The object's `description' statement,\
    \ which need not be present, gets\n   one argument which is used to specify a\
    \ high-level textual\n   description of this columnar object.\n   Note that in\
    \ contrast to other definitions this description statement\n   is not mandatory\
    \ and it is RECOMMENDED to omit it, if the object is\n   fully described by the\
    \ description of the implemented attribute.\n"
- title: 4.4.4.5.  The object's reference Statement
  contents:
  - "4.4.4.5.  The object's reference Statement\n   The object's `reference' statement,\
    \ which need not be present, gets\n   one argument which is used to specify a\
    \ textual cross-reference to\n   some other document, either another module which\
    \ defines related\n   definitions, or some other document which provides additional\n\
    \   information relevant to this columnar object.\n   It is RECOMMENDED to omit\
    \ this statement, if the object's references\n   are fully described by the implemented\
    \ attribute.\n"
- title: 4.4.5.  The table's status Statement
  contents:
  - "4.4.5.  The table's status Statement\n   The table's `status' statement, which\
    \ must be present, gets one\n   argument which is used to specify whether this\
    \ table definition is\n   current or historic.  The value `current' means that\
    \ the definition\n   is current and valid.  The value `obsolete' means the definition\
    \ is\n   obsolete and should not be implemented and/or can be removed if\n   previously\
    \ implemented.  While the value `deprecated' also indicates\n   an obsolete definition,\
    \ it permits new/continued implementation in\n   order to foster interoperability\
    \ with older/existing implementations.\n"
- title: 4.4.6.  The table's description Statement
  contents:
  - "4.4.6.  The table's description Statement\n   The table's `description' statement,\
    \ which must be present, gets one\n   argument which is used to specify a high-level\
    \ textual description of\n   this table.\n   It is RECOMMENDED to include all\
    \ semantic definitions necessary for\n   the implementation of this table.\n"
- title: 4.4.7.  The table's reference Statement
  contents:
  - "4.4.7.  The table's reference Statement\n   The table's `reference' statement,\
    \ which need not be present, gets\n   one argument which is used to specify a\
    \ textual cross-reference to\n   some other document, either another module which\
    \ defines related\n   definitions, or some other document which provides additional\n\
    \   information relevant to this table statement.\n"
- title: 4.4.8.  Usage Example
  contents:
  - "4.4.8.  Usage Example\n   table ifTable {\n     oid             interfaces.2;\n\
    \     index           (ifIndex);\n     object ifIndex { implements Interface.index;\
    \       };\n     object ifDescr { implements Interface.description; };\n     //\
    \ ...\n     status          current;\n     description\n             \"This table\
    \ implements the Interface class.\";\n   };\n"
- title: 4.5.  The notification Statement
  contents:
  - "4.5.  The notification Statement\n   The `notification' statement is used to\
    \ map events defined within\n   classes to SNMP notifications.  The `notification'\
    \ statement gets two\n   arguments: a lower-case notification identifier and a\
    \ statement block\n   that holds detailed notification information in an obligatory\
    \ order.\n   See the `notificationStatement' rule of the grammar (Section 5) for\n\
    \   the formal syntax of the `notification' statement.\n"
- title: 4.5.1.  The notification's oid Statement
  contents:
  - "4.5.1.  The notification's oid Statement\n   The notification's `oid' statement,\
    \ which must be present, gets one\n   argument which specifies the object identifier\
    \ value that is assigned\n   to this notification.\n"
- title: 4.5.2.  The notification's signals Statement
  contents:
  - "4.5.2.  The notification's signals Statement\n   The notification's `signals'\
    \ statement, which must be present,\n   denotes the event that is signaled by\
    \ this notification.  The\n   statement gets two arguments: the event to be signaled\
    \ (in the\n   qualified form `Class.event') and a statement block that holds\n\
    \   detailed information on the objects transmitted with this\n   notification\
    \ in an obligatory order.\n"
- title: 4.5.2.1.  The signals' object Statement
  contents:
  - "4.5.2.1.  The signals' object Statement\n   The signals' `object' statement,\
    \ which can be present zero, one or\n   multiple times, makes a single instance\
    \ of a class attribute be\n   contained in this notification.  It gets one argument:\
    \ the specific\n   class attribute.  The namespace of attributes not specified\
    \ by\n   qualified names is the namespace of the event's class specified in\n\
    \   the `signals' statement.\n"
- title: 4.5.3.  The notification's status Statement
  contents:
  - "4.5.3.  The notification's status Statement\n   The notification's `status' statement,\
    \ which must be present, gets\n   one argument which is used to specify whether\
    \ this notification\n   definition is current or historic.  The value `current'\
    \ means that\n   the definition is current and valid.  The value `obsolete' means\
    \ the\n   definition is obsolete and should not be implemented and/or can be\n\
    \   removed if previously implemented.  While the value `deprecated' also\n  \
    \ indicates an obsolete definition, it permits new/continued\n   implementation\
    \ in order to foster interoperability with\n   older/existing implementations.\n"
- title: 4.5.4.  The notification's description Statement
  contents:
  - "4.5.4.  The notification's description Statement\n   The notification's `description'\
    \ statement, which need not be\n   present, gets one argument which is used to\
    \ specify a high-level\n   textual description of this notification.\n   It is\
    \ RECOMMENDED to include all semantics and purposes of this\n   notification.\n"
- title: 4.5.5.  The notification's reference Statement
  contents:
  - "4.5.5.  The notification's reference Statement\n   The notification's `reference'\
    \ statement, which need not be present,\n   gets one argument which is used to\
    \ specify a textual cross-reference\n   to some other document, either another\
    \ module which defines related\n   definitions, or some other document which provides\
    \ additional\n   information relevant to this notification statement.\n"
- title: 4.5.6.  Usage Example
  contents:
  - "4.5.6.  Usage Example\n   notification linkDown {\n       oid         snmpTraps.3;\n\
    \       signals     Interface.linkDown {\n           object      ifIndex;\n  \
    \         object      ifAdminStatus;\n           object      ifOperStatus;\n \
    \      };\n       status      current;\n       description\n             \"This\
    \ notification signals the linkDown event\n              of the Interface class.\"\
    ;\n   };\n"
- title: 4.6.  The group Statement
  contents:
  - "4.6.  The group Statement\n   The `group' statement is used to define a group\
    \ of arbitrary nodes in\n   the object identifier tree.  It gets two arguments:\
    \ a lower-case\n   group identifier and a statement block that holds detailed\
    \ group\n   information in an obligatory order.\n   Note that the primary application\
    \ of groups are compliance\n   statements, although they might be referred in\
    \ other formal or\n   informal documents.\n   See the `groupStatement' rule of\
    \ the grammar (Section 5) for the\n   formal syntax of the `group' statement.\n"
- title: 4.6.1.  The group's oid Statement
  contents:
  - "4.6.1.  The group's oid Statement\n   The group's `oid' statement, which must\
    \ be present, gets one argument\n   which specifies the object identifier value\
    \ that is assigned to this\n   group.\n"
- title: 4.6.2.  The group's members Statement
  contents:
  - "4.6.2.  The group's members Statement\n   The group's `members' statement, which\
    \ must be present, gets one\n   argument which specifies the list of nodes by\
    \ their identifiers to be\n   contained in this group.  The list of nodes has\
    \ to be comma-separated\n   and enclosed in parenthesis.\n"
- title: 4.6.3.  The group's status Statement
  contents:
  - "4.6.3.  The group's status Statement\n   The group's `status' statement, which\
    \ must be present, gets one\n   argument which is used to specify whether this\
    \ group definition is\n   current or historic.  The value `current' means that\
    \ the definition\n   is current and valid.  The value `obsolete' means the definition\
    \ is\n   obsolete and the group should no longer be used.  While the value\n \
    \  `deprecated' also indicates an obsolete definition, it permits\n   new/continued\
    \ use of this group.\n"
- title: 4.6.4.  The group's description Statement
  contents:
  - "4.6.4.  The group's description Statement\n   The group's `description' statement,\
    \ which must be present, gets one\n   argument which is used to specify a high-level\
    \ textual description of\n   this group.  It is RECOMMENDED to include any relation\
    \ to other\n   groups.\n"
- title: 4.6.5.  The group's reference Statement
  contents:
  - "4.6.5.  The group's reference Statement\n   The group's `reference' statement,\
    \ which need not be present, gets\n   one argument which is used to specify a\
    \ textual cross-reference to\n   some other document, either another module which\
    \ defines related\n   groups, or some other document which provides additional\
    \ information\n   relevant to this group.\n"
- title: 4.6.6.  Usage Example
  contents:
  - "4.6.6.  Usage Example\n   The snmpGroup, originally defined in [RFC3418], may\
    \ be described as\n   follows:\n   group snmpGroup {\n     oid             snmpMIBGroups.8;\n\
    \     objects         (snmpInPkts, snmpInBadVersions,\n                      snmpInASNParseErrs,\n\
    \                      snmpSilentDrops, snmpProxyDrops,\n                    \
    \  snmpEnableAuthenTraps);\n     status          current;\n     description\n\
    \             \"A collection of objects providing basic\n              instrumentation\
    \ and control of an agent.\";\n   };\n"
- title: 4.7.  The compliance Statement
  contents:
  - "4.7.  The compliance Statement\n   The `compliance' statement is used to define\
    \ a set of conformance\n   requirements, named a `compliance statement'.  It gets\
    \ two arguments:\n   a lower-case compliance identifier and a statement block\
    \ that holds\n   detailed compliance information in an obligatory order.\n   See\
    \ the `complianceStatement' rule of the grammar (Section 5) for the\n   formal\
    \ syntax of the `compliance' statement.\n"
- title: 4.7.1.  The compliance's oid Statement
  contents:
  - "4.7.1.  The compliance's oid Statement\n   The compliance's `oid' statement,\
    \ which must be present, gets one\n   argument which specifies the object identifier\
    \ value that is assigned\n   to this compliance statement.\n"
- title: 4.7.2.  The compliance's status Statement
  contents:
  - "4.7.2.  The compliance's status Statement\n   The compliance's `status' statement,\
    \ which must be present, gets one\n   argument which is used to specify whether\
    \ this compliance statement\n   is current or historic.  The value `current' means\
    \ that the\n   definition is current and valid.  The value `obsolete' means the\n\
    \   definition is obsolete and no longer specifies a valid definition of\n   conformance.\
    \  While the value `deprecated' also indicates an obsolete\n   definition, it\
    \ permits new/continued use of the compliance\n   specification.\n"
- title: 4.7.3.  The compliance's description Statement
  contents:
  - "4.7.3.  The compliance's description Statement\n   The compliance's `description'\
    \ statement, which must be present, gets\n   one argument which is used to specify\
    \ a high-level textual\n   description of this compliance statement.\n"
- title: 4.7.4.  The compliance's reference Statement
  contents:
  - "4.7.4.  The compliance's reference Statement\n   The compliance's `reference'\
    \ statement, which need not be present,\n   gets one argument which is used to\
    \ specify a textual cross-reference\n   to some other document, either another\
    \ module which defines related\n   compliance statements, or some other document\
    \ which provides\n   additional information relevant to this compliance statement.\n"
- title: 4.7.5.  The compliance's mandatory Statement
  contents:
  - "4.7.5.  The compliance's mandatory Statement\n   The compliance's `mandatory'\
    \ statement, which need not be present,\n   gets one argument which is used to\
    \ specify a comma-separated list of\n   one or more groups (Section 4.6) of objects\
    \ and/or notifications\n   enclosed in parenthesis.  These groups are unconditionally\
    \ mandatory\n   for implementation.\n   If an agent claims compliance to a MIB\
    \ module then it must implement\n   each and every object and notification within\
    \ each group listed in\n   the `mandatory' statement(s) of the compliance statement(s)\
    \ of that\n   module.\n"
- title: 4.7.6.  The compliance's optional Statement
  contents:
  - "4.7.6.  The compliance's optional Statement\n   The compliance's `optional' statement,\
    \ which need not be present, is\n   repeatedly used to name each group which is\
    \ conditionally mandatory\n   for compliance to the compliance statement.  It\
    \ can also be used to\n   name unconditionally optional groups.  A group named\
    \ in an `optional'\n   statement MUST be absent from the correspondent `mandatory'\n\
    \   statement.  The `optional' statement gets two arguments: a lower-case\n  \
    \ group identifier and a statement block that holds detailed compliance\n   information\
    \ on that group.\n   Conditionally mandatory groups include those groups which\
    \ are\n   mandatory only if a particular protocol is implemented, or only if\n\
    \   another group is implemented.  The `description' statement specifies\n   the\
    \ conditions under which the group is conditionally mandatory.\n   A group which\
    \ is named in neither a `mandatory' statement nor an\n   `optional' statement,\
    \ is unconditionally optional for compliance to\n   the module.\n   See the `optionalStatement'\
    \ rule of the grammar (Section 5) for the\n   formal syntax of the `optional'\
    \ statement.\n"
- title: 4.7.6.1.  The optional's description Statement
  contents:
  - "4.7.6.1.  The optional's description Statement\n   The optional's `description'\
    \ statement, which must be present, gets\n   one argument which is used to specify\
    \ a high-level textual\n   description of the conditions under which this group\
    \ is conditionally\n   mandatory or unconditionally optional.\n"
- title: 4.7.7.  The compliance's refine Statement
  contents:
  - "4.7.7.  The compliance's refine Statement\n   The compliance's `refine' statement,\
    \ which need not be present, is\n   repeatedly used to specify each object for\
    \ which compliance has a\n   refined requirement with respect to the module definition.\
    \  The\n   object must be present in one of the conformance groups named in the\n\
    \   correspondent `mandatory' or `optional' statements.  The `refine'\n   statement\
    \ gets two arguments: a lower-case identifier of a scalar or\n   columnar object\
    \ and a statement block that holds detailed refinement\n   information on that\
    \ object.\n   See the `refineStatement' rule of the grammar (Section 5) for the\n\
    \   formal syntax of the `refine' statement.\n"
- title: 4.7.7.1. The refine's type Statement
  contents:
  - "4.7.7.1. The refine's type Statement\n   The refine's `type' statement, which\
    \ need not be present, gets one\n   argument that is used to provide a refined\
    \ type for the correspondent\n   object.  Type restrictions may be applied by\
    \ appending subtyping\n   information according to the rules of the base type.\
    \  See [RFC3780]\n   for SMIng base types and their type restrictions.  In case\
    \ of\n   enumeration or bitset types the order of named numbers is not\n   significant.\n\
    \   Note that if a `type' and a `writetype' statement are both present\n   then\
    \ this type only applies when instances of the correspondent\n   object are read.\n"
- title: 4.7.7.2.  The refine's writetype Statement
  contents:
  - "4.7.7.2.  The refine's writetype Statement\n   The refine's `writetype' statement,\
    \ which need not be present, gets\n   one argument that is used to provide a refined\
    \ type for the\n   correspondent object, only when instances of that object are\
    \ written.\n   Type restrictions may be applied by appending subtyping information\n\
    \   according to the rules of the base type.  See [RFC3780] for SMIng\n   base\
    \ types and their type restrictions.  In case of enumeration or\n   bitset types\
    \ the order of named numbers is not significant.\n"
- title: 4.7.7.3.  The refine's access Statement
  contents:
  - "4.7.7.3.  The refine's access Statement\n   The refine's `access' statement,\
    \ which need not be present, gets one\n   argument that is used to specify the\
    \ minimal level of access that the\n   correspondent object must implement in\
    \ the sense of its original\n   `access' statement.  Hence, the refine's `access'\
    \ statement MUST NOT\n   specify a greater level of access than is specified in\
    \ the\n   correspondent object definition.\n   An implementation is compliant\
    \ if the level of access it provides is\n   greater or equal to the minimal level\
    \ in the refine's `access'\n   statement and less or equal to the maximal level\
    \ in the object's\n   `access' statement.\n"
- title: 4.7.7.4.  The refine's description Statement
  contents:
  - "4.7.7.4.  The refine's description Statement\n   The refine's `description' statement,\
    \ which must be present, gets one\n   argument which is used to specify a high-level\
    \ textual description of\n   the refined compliance requirement.\n"
- title: 4.7.8.  Usage Example
  contents:
  - "4.7.8.  Usage Example\n   The compliance statement contained in the SNMPv2-MIB\
    \ [RFC3418],\n   converted to SMIng:\n      compliance snmpBasicComplianceRev2\
    \ {\n        oid             snmpMIBCompliances.3;\n        status          current;\n\
    \        description\n                \"The compliance statement for SNMP entities\
    \ which\n                 implement this MIB module.\";\n        mandatory   \
    \    (snmpGroup, snmpSetGroup, systemGroup,\n                         snmpBasicNotificationsGroup);\n\
    \        optional snmpCommunityGroup {\n          description\n              \
    \  \"This group is mandatory for SNMP entities which\n                 support\
    \ community-based authentication.\";\n        };\n        optional snmpWarmStartNotificationGroup\
    \ {\n          description\n                \"This group is mandatory for an SNMP\
    \ entity which\n                 supports command responder applications, and\
    \ is\n                 able to reinitialize itself such that its\n           \
    \      configuration is unaltered.\";\n        };\n      };\n"
- title: 5. NMRG-SMING-SNMP-EXT
  contents:
  - "5. NMRG-SMING-SNMP-EXT\n   The grammar of the snmp statement (including all its\
    \ contained\n   statements) conforms to the Augmented Backus-Naur Form (ABNF)\n\
    \   [RFC2234].  It is included in the abnf statement of the snmp SMIng\n   extension\
    \ definition in the NMRG-SMING-SNMP-EXT module below.\n   module NMRG-SMING-SNMP-EXT\
    \ {\n      organization    \"IRTF Network Management Research Group (NMRG)\";\n\
    \      contact         \"IRTF Network Management Research Group (NMRG)\n     \
    \                  http://www.ibr.cs.tu-bs.de/projects/nmrg/\n               \
    \        Frank Strauss\n                       TU Braunschweig\n             \
    \          Muehlenpfordtstrasse 23\n                       38106 Braunschweig\n\
    \                       Germany\n                       Phone: +49 531 391 3266\n\
    \                       EMail: strauss@ibr.cs.tu-bs.de\n                     \
    \  Juergen Schoenwaelder\n                       International University Bremen\n\
    \                       P.O. Box 750 561\n                       28725 Bremen\n\
    \                       Germany\n                       Phone: +49 421 200 3587\n\
    \                       EMail: j.schoenwaelder@iu-bremen.de\";\n      description\
    \     \"This module defines a SMIng extension to define\n                    \
    \   the mapping of SMIng definitions of class and\n                       their\
    \ attributes and events to SNMP compatible\n                       definitions\
    \ of modules, node, scalars, tables,\n                       and notifications,\
    \ and additional information on\n                       module compliances.\n\
    \                       Copyright (C) The Internet Society (2004).\n         \
    \              All Rights Reserved.\n                       This version of this\
    \ module is part of\n                       RFC 3781, see the RFC itself for full\n\
    \                       legal notices.\";\n      revision {\n          date  \
    \      \"2003-12-16\";\n          description \"Initial revision, published as\
    \ RFC 3781.\";\n      };\n      //\n      //\n      //\n      extension snmp {\n\
    \          status          current;\n          description\n             \"The\
    \ snmp statement maps SMIng definitions to SNMP\n              conformant definitions.\"\
    ;\n          abnf \"\n ;;\n ;; sming-snmp.abnf -- Grammar of SNMP mappings in\
    \ ABNF\n ;;                    notation (RFC 2234).\n ;;\n ;; @(#) $Id: sming-snmp.abnf,v\
    \ 1.14 2003/10/23 19:31:55 strauss Exp $\n ;;\n ;; Copyright (C) The Internet\
    \ Society (2004). All Rights Reserved.\n ;;\n ;;\n ;; Statement rules.\n ;;\n\
    \ snmpStatement           = snmpKeyword *1(sep lcIdentifier) optsep\n        \
    \                       \\\"{\\\" stmtsep\n                               *1(oidStatement\
    \ stmtsep)\n                               *(nodeStatement stmtsep)\n        \
    \                       *(scalarsStatement stmtsep)\n                        \
    \       *(tableStatement stmtsep)\n                               *(notificationStatement\
    \ stmtsep)\n                               *(groupStatement stmtsep)\n       \
    \                        *(complianceStatement stmtsep)\n                    \
    \           statusStatement stmtsep\n                               descriptionStatement\
    \ stmtsep\n                               *1(referenceStatement stmtsep)\n   \
    \                        \\\"}\\\" optsep \\\";\\\"\n nodeStatement          \
    \ = nodeKeyword sep lcIdentifier optsep\n                               \\\"{\\\
    \" stmtsep\n                               oidStatement stmtsep\n            \
    \                   *1(representsStatement stmtsep)\n                        \
    \       statusStatement stmtsep\n                               *1(descriptionStatement\
    \ stmtsep)\n                               *1(referenceStatement stmtsep)\n  \
    \                         \\\"}\\\" optsep \\\";\\\"\n representsStatement   \
    \  = representsKeyword sep\n                               qucIdentifier optsep\
    \ \\\";\\\"\n scalarsStatement        = scalarsKeyword sep lcIdentifier optsep\n\
    \                               \\\"{\\\" stmtsep\n                          \
    \     oidStatement stmtsep\n                               1*(objectStatement\
    \ stmtsep)\n                               statusStatement stmtsep\n         \
    \                      descriptionStatement stmtsep\n                        \
    \       *1(referenceStatement stmtsep)\n                           \\\"}\\\" optsep\
    \ \\\";\\\"\n tableStatement          = tableKeyword sep lcIdentifier optsep\n\
    \                               \\\"{\\\" stmtsep\n                          \
    \     oidStatement stmtsep\n                               anyIndexStatement stmtsep\n\
    \                               *1(createStatement stmtsep)\n                \
    \               1*(objectStatement stmtsep)\n                               statusStatement\
    \ stmtsep\n                               descriptionStatement stmtsep\n     \
    \                          *1(referenceStatement stmtsep)\n                  \
    \         \\\"}\\\" optsep \\\";\\\"\n objectStatement         = objectKeyword\
    \ sep lcIdentifier optsep\n                               \\\"{\\\" stmtsep\n\
    \                               implementsStatement stmtsep\n                \
    \               *1(subidStatement stmtsep)\n                               *1(statusStatement\
    \ stmtsep)\n                               *1(descriptionStatement stmtsep)\n\
    \                               *1(referenceStatement stmtsep)\n             \
    \              \\\"}\\\" optsep \\\";\\\"\n implementsStatement     = implementsKeyword\
    \ sep qcattrIdentifier\n                               optsep \\\";\\\"\n notificationStatement\
    \   = notificationKeyword sep lcIdentifier\n                               optsep\
    \ \\\"{\\\" stmtsep\n                               oidStatement stmtsep\n   \
    \                            signalsStatement stmtsep\n                      \
    \         statusStatement stmtsep\n                               descriptionStatement\
    \ stmtsep\n                               *1(referenceStatement stmtsep)\n   \
    \                        \\\"}\\\" optsep \\\";\\\"\n signalsStatement       \
    \ = signalsKeyword sep qattrIdentifier\n                               optsep\
    \ \\\"{\\\" stmtsep\n                               *(signalsObjectStatement)\n\
    \                           \\\"}\\\" optsep \\\";\\\"\n signalsObjectStatement\
    \  = objectKeyword sep\n                               qattrIdentifier optsep\
    \ \\\";\\\"\n groupStatement          = groupKeyword sep lcIdentifier optsep\n\
    \                               \\\"{\\\" stmtsep\n                          \
    \     oidStatement stmtsep\n                               membersStatement stmtsep\n\
    \                               statusStatement stmtsep\n                    \
    \           descriptionStatement stmtsep\n                               *1(referenceStatement\
    \ stmtsep)\n                           \\\"}\\\" optsep \\\";\\\"\n complianceStatement\
    \     = complianceKeyword sep lcIdentifier optsep\n                          \
    \     \\\"{\\\" stmtsep\n                               oidStatement stmtsep\n\
    \                               statusStatement stmtsep\n                    \
    \           descriptionStatement stmtsep\n                               *1(referenceStatement\
    \ stmtsep)\n                               *1(mandatoryStatement stmtsep)\n  \
    \                             *(optionalStatement stmtsep)\n                 \
    \              *(refineStatement stmtsep)\n                           \\\"}\\\"\
    \ optsep \\\";\\\"\n anyIndexStatement       = indexStatement /\n            \
    \               augmentsStatement /\n                           reordersStatement\
    \ /\n                           extendsStatement /\n                         \
    \  expandsStatement\n indexStatement          = indexKeyword *1(sep impliedKeyword)\
    \ optsep\n                               \\\"(\\\" optsep qlcIdentifierList\n\
    \                               optsep \\\")\\\" optsep \\\";\\\"\n augmentsStatement\
    \       = augmentsKeyword sep qlcIdentifier\n                               optsep\
    \ \\\";\\\"\n reordersStatement       = reordersKeyword sep qlcIdentifier\n  \
    \                             *1(sep impliedKeyword)\n                       \
    \        optsep \\\"(\\\" optsep\n                               qlcIdentifierList\
    \ optsep \\\")\\\"\n                               optsep \\\";\\\"\n extendsStatement\
    \        = extendsKeyword sep qlcIdentifier optsep \\\";\\\"\n expandsStatement\
    \        = expandsKeyword sep qlcIdentifier\n                               *1(sep\
    \ impliedKeyword)\n                               optsep \\\"(\\\" optsep\n  \
    \                             qlcIdentifierList optsep \\\")\\\"\n           \
    \                    optsep \\\";\\\"\n createStatement         = createKeyword\
    \ optsep \\\";\\\"\n membersStatement        = membersKeyword optsep \\\"(\\\"\
    \ optsep\n                               qlcIdentifierList optsep\n          \
    \                     \\\")\\\" optsep \\\";\\\"\n mandatoryStatement      = mandatoryKeyword\
    \ optsep \\\"(\\\" optsep\n                               qlcIdentifierList optsep\n\
    \                               \\\")\\\" optsep \\\";\\\"\n optionalStatement\
    \       = optionalKeyword sep qlcIdentifier optsep\n                         \
    \      \\\"{\\\" descriptionStatement stmtsep\n                           \\\"\
    }\\\" optsep \\\";\\\"\n refineStatement         = refineKeyword sep qlcIdentifier\
    \ optsep \\\"{\\\"\n                               *1(typeStatement stmtsep)\n\
    \                               *1(writetypeStatement stmtsep)\n             \
    \                  *1(accessStatement stmtsep)\n                             \
    \  descriptionStatement stmtsep\n                           \\\"}\\\" optsep \\\
    \";\\\"\n typeStatement           = typeKeyword sep\n                        \
    \       (refinedBaseType / refinedType)\n                               optsep\
    \ \\\";\\\"\n writetypeStatement      = writetypeKeyword sep\n               \
    \                (refinedBaseType / refinedType)\n                           \
    \    optsep \\\";\\\"\n oidStatement            = oidKeyword sep objectIdentifier\
    \ optsep \\\";\\\"\n subidStatement          = subidKeyword sep subid optsep \\\
    \";\\\"\n ;;\n ;; Statement keywords.\n ;;\n snmpKeyword         =  %x73 %x6E\
    \ %x6D %x70\n nodeKeyword         =  %x6E %x6F %x64 %x65\n representsKeyword \
    \  =  %x72 %x65 %x70 %x72 %x65 %x73 %x65 %x6E %x74\n                        %x73\n\
    \ scalarsKeyword      =  %x73 %x63 %x61 %x6C %x61 %x72 %x73\n tableKeyword   \
    \     =  %x74 %x61 %x62 %x6C %x65\n implementsKeyword   =  %x69 %x6D %x70 %x6C\
    \ %x65 %x6D %x65 %x6E %x74\n                        %x73\n subidKeyword      \
    \  =  %x73 %x75 %x62 %x69 %x64\n objectKeyword       =  %x6F %x62 %x6A %x65 %x63\
    \ %x74\n notificationKeyword =  %x6E %x6F %x74 %x69 %x66 %x69 %x63 %x61 %x74\n\
    \                        %x69 %x6F %x6E\n signalsKeyword      =  %x73 %x69 %x67\
    \ %x6E %x61 %x6C %x73\n oidKeyword          =  %x6F %x69 %x64\n groupKeyword \
    \       =  %x67 %x72 %x6F %x75 %x70\n complianceKeyword   =  %x63 %x6F %x6D %x70\
    \ %x6C %x69 %x61 %x6E %x63\n                        %x65\n impliedKeyword    \
    \  =  %x69 %x6D %x70 %x6C %x69 %x65 %x64\n indexKeyword        =  %x69 %x6E %x64\
    \ %x65 %x78\n augmentsKeyword     =  %x61 %x75 %x67 %x6D %x65 %x6E %x74 %x73\n\
    \ reordersKeyword     =  %x72 %x65 %x6F %x72 %x64 %x65 %x72 %x73\n extendsKeyword\
    \      =  %x65 %x78 %x74 %x65 %x6E %x64 %x73\n expandsKeyword      =  %x65 %x78\
    \ %x70 %x61 %x6E %x64 %x73\n createKeyword       =  %x63 %x72 %x65 %x61 %x74 %x65\n\
    \ membersKeyword      =  %x6D %x65 %x6D %x62 %x65 %x72 %x73\n mandatoryKeyword\
    \    =  %x6D %x61 %x6E %x64 %x61 %x74 %x6F %x72 %x79\n optionalKeyword     = \
    \ %x6F %x70 %x74 %x69 %x6F %x6E %x61 %x6C\n refineKeyword       =  %x72 %x65 %x66\
    \ %x69 %x6E %x65\n writetypeKeyword    =  %x77 %x72 %x69 %x74 %x65 %x74 %x79 %x70\
    \ %x65\n ;; End of ABNF\n               \";\n     };\n     //\n     //\n     //\n\
    \     snmp {\n         node ccitt                       { oid 0;          };\n\
    \         node   zeroDotZero {\n             oid         0.0;\n             description\
    \ \"A null value used for pointers.\";\n         };\n         node iso       \
    \                  { oid 1;          };\n         node   org                 \
    \      { oid iso.3;      };\n         node     dod                     { oid org.6;\
    \      };\n         node       internet              { oid dod.1;      };\n  \
    \       node         directory           { oid internet.1; };\n         node \
    \        mgmt                { oid internet.2; };\n         node           mib-2\
    \             { oid mgmt.1;     };\n         node             transmission   \
    \ { oid mib-2.10;   };\n         node         experimental        { oid internet.3;\
    \ };\n         node         private             { oid internet.4; };\n       \
    \  node           enterprises       { oid private.1;  };\n         node      \
    \   security            { oid internet.5; };\n         node         snmpV2   \
    \           { oid internet.6; };\n         node           snmpDomains       {\
    \ oid snmpV2.1;   };\n         node           snmpProxys        { oid snmpV2.2;\
    \   };\n         node           snmpModules       { oid snmpV2.3;   };\n     \
    \    node joint-iso-ccitt             { oid 2;          };\n         status  \
    \        current;\n         description\n            \"This set of nodes defines\
    \ the core object\n             identifier hierarchy\";\n         reference\n\
    \            \"RFC 2578, Section 2.\";\n     };\n };\n"
- title: 6.  NMRG-SMING-SNMP
  contents:
  - "6.  NMRG-SMING-SNMP\n   The module NMRG-SMING-SNMP specified below defines derived\
    \ types that\n   are specific to the SNMP mapping.\n"
- title: module NMRG-SMING-SNMP {
  contents:
  - "module NMRG-SMING-SNMP {\n    organization    \"IRTF Network Management Research\
    \ Group (NMRG)\";\n    contact         \"IRTF Network Management Research Group\
    \ (NMRG)\n                     http://www.ibr.cs.tu-bs.de/projects/nmrg/\n   \
    \                  Frank Strauss\n                     TU Braunschweig\n     \
    \                Muehlenpfordtstrasse 23\n                     38106 Braunschweig\n\
    \                     Germany\n                     Phone: +49 531 391 3266\n\
    \                     EMail: strauss@ibr.cs.tu-bs.de\n                     Juergen\
    \ Schoenwaelder\n                     International University Bremen\n      \
    \               P.O. Box 750 561\n                     28725 Bremen\n        \
    \             Germany\n                     Phone: +49 421 200 3587\n        \
    \             EMail: j.schoenwaelder@iu-bremen.de\";\n    description     \"Core\
    \ type definitions for the SMIng SNMP mapping.\n                     These definitions\
    \ are based on RFC 2579 definitions\n                     that are specific to\
    \ the SNMP protocol and its\n                     naming system.\n           \
    \          Copyright (C) The Internet Society (2004).\n                     All\
    \ Rights Reserved.\n                     This version of this module is part of\n\
    \                     RFC 3781, see the RFC itself for full\n                \
    \     legal notices.\";\n    revision {\n        date        \"2003-12-16\";\n\
    \        description \"Initial version, published as RFC 3781.\";\n    };\n  \
    \  typedef TestAndIncr {\n        type        Integer32 (0..2147483647);\n   \
    \     description\n            \"Represents integer-valued information used for\
    \ atomic\n             operations.  When the management protocol is used to\n\
    \             specify that an object instance having this type is to\n       \
    \      be modified, the new value supplied via the management\n             protocol\
    \ must precisely match the value presently held by\n             the instance.\
    \  If not, the management protocol set\n             operation fails with an error\
    \ of `inconsistentValue'.\n             Otherwise, if the current value is the\
    \ maximum value of\n             2^31-1 (2147483647 decimal), then the value held\
    \ by the\n             instance is wrapped to zero; otherwise, the value held\
    \ by\n             the instance is incremented by one.  (Note that\n         \
    \    regardless of whether the management protocol set\n             operation\
    \ succeeds, the variable-binding in the request\n             and response PDUs\
    \ are identical.)\n             The value of the SNMP access clause for objects\
    \ having\n             this type has to be `readwrite'.  When an instance of a\n\
    \             columnar object having this type is created, any value\n       \
    \      may be supplied via the management protocol.\n             When the network\
    \ management portion of the system is re-\n             initialized, the value\
    \ of every object instance having\n             this type must either be incremented\
    \ from its value prior\n             to the re-initialization, or (if the value\
    \ prior to the\n             re-initialization is unknown) be set to a\n     \
    \        pseudo-randomly generated value.\"; };\n    typedef AutonomousType {\n\
    \        type        Pointer;\n        description\n            \"Represents an\
    \ independently extensible type\n             identification value.  It may, for\
    \ example, indicate a\n             particular OID sub-tree with further MIB definitions,\
    \ or\n             define a particular type of protocol or hardware.\";\n    };\n\
    \    typedef VariablePointer {\n        type        Pointer;\n        description\n\
    \            \"A pointer to a specific object instance.  For example,\n      \
    \       sysContact.0 or ifInOctets.3.\";\n    };\n    typedef RowPointer {\n \
    \       type        Pointer;\n        description\n            \"Represents a\
    \ pointer to a conceptual row.  The value is\n             the name of the instance\
    \ of the first accessible columnar\n             object in the conceptual row.\n\
    \             For example, ifIndex.3 would point to the 3rd row in the\n     \
    \        ifTable (note that if ifIndex were not-accessible, then\n           \
    \  ifDescr.3 would be used instead).\";\n    };\n    typedef RowStatus {\n   \
    \     type        Enumeration (active(1), notInService(2),\n                 \
    \       notReady(3), createAndGo(4),\n                        createAndWait(5),\
    \ destroy(6));\n        description\n        \"The RowStatus type is used to manage\
    \ the creation and\n         deletion of conceptual rows, and is used as the type\
    \ for the\n         row status column of a conceptual row.\n         The status\
    \ column has six defined values:\n             - `active', which indicates that\
    \ the conceptual row is\n             available for use by the managed device;\n\
    \             - `notInService', which indicates that the conceptual\n        \
    \     row exists in the agent, but is unavailable for use by\n             the\
    \ managed device (see NOTE below);\n             - `notReady', which indicates\
    \ that the conceptual row\n             exists in the agent, but is missing information\n\
    \             necessary in order to be available for use by the\n            \
    \ managed device;\n             - `createAndGo', which is supplied by a management\n\
    \             station wishing to create a new instance of a\n             conceptual\
    \ row and to have its status automatically set\n             to active, making\
    \ it available for use by the managed\n             device;\n             - `createAndWait',\
    \ which is supplied by a management\n             station wishing to create a\
    \ new instance of a\n             conceptual row (but not make it available for\
    \ use by\n             the managed device); and,\n             - `destroy', which\
    \ is supplied by a management station\n             wishing to delete all of the\
    \ instances associated with\n             an existing conceptual row.\n      \
    \   Whereas five of the six values (all except `notReady') may\n         be specified\
    \ in a management protocol set operation, only\n         three values will be\
    \ returned in response to a management\n         protocol retrieval operation:\
    \ `notReady', `notInService' or\n         `active'.  That is, when queried, an\
    \ existing conceptual row\n         has only three states: it is either available\
    \ for use by the\n         managed device (the status column has value `active');\
    \ it is\n         not available for use by the managed device, though the\n  \
    \       agent has sufficient information to make it so (the status\n         column\
    \ has value `notInService'); or, it is not available\n         for use by the\
    \ managed device, and an attempt to make it so\n         would fail because the\
    \ agent has insufficient information\n         (the state column has value `notReady').\n\
    \                                 NOTE WELL\n             This textual convention\
    \ may be used for a MIB table,\n             irrespective of whether the values\
    \ of that table's\n             conceptual rows are able to be modified while\
    \ it is\n             active, or whether its conceptual rows must be taken\n \
    \            out of service in order to be modified.  That is, it is\n       \
    \      the responsibility of the DESCRIPTION clause of the\n             status\
    \ column to specify whether the status column must\n             not be `active'\
    \ in order for the value of some other\n             column of the same conceptual\
    \ row to be modified.  If\n             such a specification is made, affected\
    \ columns may be\n             changed by an SNMP set PDU if the RowStatus would\
    \ not\n             be equal to `active' either immediately before or after\n\
    \             processing the PDU.  In other words, if the PDU also\n         \
    \    contained a varbind that would change the RowStatus\n             value,\
    \ the column in question may be changed if the\n             RowStatus was not\
    \ equal to `active' as the PDU was\n             received, or if the varbind sets\
    \ the status to a value\n             other than 'active'.\n         Also note\
    \ that whenever any elements of a row exist, the\n         RowStatus column must\
    \ also exist.\n         To summarize the effect of having a conceptual row with\
    \ a\n         column having a type of RowStatus, consider the following\n    \
    \     state diagram:\n                                         STATE\n       \
    \       +--------------+-----------+-------------+-------------\n            \
    \  |      A       |     B     |      C      |      D\n              |        \
    \      |status col.|status column|\n              |status column |    is     |\
    \      is     |status column\n    ACTION    |does not exist|  notReady | notInService|\
    \  is active\n"
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - '--------------+--------------+-----------+-------------+-------------

    '
- title: set status    |noError    ->D|inconsist- |inconsistent-|inconsistent-
  contents:
  - 'set status    |noError    ->D|inconsist- |inconsistent-|inconsistent-

    '
- title: column to     |       or     |   entValue|        Value|        Value
  contents:
  - 'column to     |       or     |   entValue|        Value|        Value

    '
- title: createAndGo   |inconsistent- |           |             |
  contents:
  - "createAndGo   |inconsistent- |           |             |\n              |   \
    \      Value|           |             |\n"
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - '--------------+--------------+-----------+-------------+-------------

    '
- title: set status    |noError  see 1|inconsist- |inconsistent-|inconsistent-
  contents:
  - 'set status    |noError  see 1|inconsist- |inconsistent-|inconsistent-

    '
- title: column to     |       or     |   entValue|        Value|        Value
  contents:
  - 'column to     |       or     |   entValue|        Value|        Value

    '
- title: createAndWait |wrongValue    |           |             |
  contents:
  - 'createAndWait |wrongValue    |           |             |

    '
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - '--------------+--------------+-----------+-------------+-------------

    '
- title: set status    |inconsistent- |inconsist- |noError      |noError
  contents:
  - 'set status    |inconsistent- |inconsist- |noError      |noError

    '
- title: column to     |         Value|   entValue|             |
  contents:
  - 'column to     |         Value|   entValue|             |

    '
- title: active        |              |           |             |
  contents:
  - "active        |              |           |             |\n              |   \
    \           |     or    |             |\n              |              |      \
    \     |             |\n              |              |see 2   ->D|see 8     ->D|\
    \          ->D\n"
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - '--------------+--------------+-----------+-------------+-------------

    '
- title: set status    |inconsistent- |inconsist- |noError      |noError   ->C
  contents:
  - 'set status    |inconsistent- |inconsist- |noError      |noError   ->C

    '
- title: column to     |         Value|   entValue|             |
  contents:
  - 'column to     |         Value|   entValue|             |

    '
- title: notInService  |              |           |             |
  contents:
  - "notInService  |              |           |             |\n              |   \
    \           |     or    |             |      or\n              |             \
    \ |           |             |\n              |              |see 3   ->C|    \
    \      ->C|see 6\n"
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - '--------------+--------------+-----------+-------------+-------------

    '
- title: set status    |noError       |noError    |noError      |noError   ->A
  contents:
  - 'set status    |noError       |noError    |noError      |noError   ->A

    '
- title: column to     |              |           |             |      or
  contents:
  - 'column to     |              |           |             |      or

    '
- title: destroy       |           ->A|        ->A|          ->A|see 7
  contents:
  - 'destroy       |           ->A|        ->A|          ->A|see 7

    '
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - '--------------+--------------+-----------+-------------+-------------

    '
- title: set any other |see 4         |noError    |noError      |see 5
  contents:
  - 'set any other |see 4         |noError    |noError      |see 5

    '
- title: column to some|              |           |             |
  contents:
  - 'column to some|              |           |             |

    '
- title: value         |              |      see 1|          ->C|          ->D
  contents:
  - 'value         |              |      see 1|          ->C|          ->D

    '
- title: '--------------+--------------+-----------+-------------+-------------'
  contents:
  - "--------------+--------------+-----------+-------------+-------------\n     \
    \    (1) go to B or C, depending on information available to the\n         agent.\n\
    \         (2) if other variable bindings included in the same PDU,\n         provide\
    \ values for all columns which are missing but\n         required, then return\
    \ noError and goto D.\n         (3) if other variable bindings included in the\
    \ same PDU,\n         provide values for all columns which are missing but\n \
    \        required, then return noError and goto C.\n         (4) at the discretion\
    \ of the agent, the return value may be\n         either:\n             inconsistentName:\
    \ because the agent does not choose to\n             create such an instance when\
    \ the corresponding\n             RowStatus instance does not exist, or\n    \
    \         inconsistentValue: if the supplied value is\n             inconsistent\
    \ with the state of some other MIB object's\n             value, or\n        \
    \     noError: because the agent chooses to create the\n             instance.\n\
    \         If noError is returned, then the instance of the status\n         column\
    \ must also be created, and the new state is B or C,\n         depending on the\
    \ information available to the agent.  If\n         inconsistentName or inconsistentValue\
    \ is returned, the row\n         remains in state A.\n         (5) depending on\
    \ the MIB definition for the column/table,\n         either noError or inconsistentValue\
    \ may be returned.\n         (6) the return value can indicate one of the following\n\
    \         errors:\n             wrongValue: because the agent does not support\n\
    \             createAndWait, or\n             inconsistentValue: because the agent\
    \ is unable to take\n             the row out of service at this time, perhaps\
    \ because it\n             is in use and cannot be de-activated.\n         (7)\
    \ the return value can indicate the following error:\n             inconsistentValue:\
    \ because the agent is unable to\n             remove the row at this time, perhaps\
    \ because it is in\n             use and cannot be de-activated.\n         NOTE:\
    \ Other processing of the set request may result in a\n         response other\
    \ than noError being returned, e.g.,\n         wrongValue, noCreation, etc.\n\
    \                          Conceptual Row Creation\n         There are four potential\
    \ interactions when creating a\n         conceptual row: selecting an instance-identifier\
    \ which is\n         not in use; creating the conceptual row; initializing any\n\
    \         objects for which the agent does not supply a default; and,\n      \
    \   making the conceptual row available for use by the managed\n         device.\n\
    \         Interaction 1: Selecting an Instance-Identifier\n         The algorithm\
    \ used to select an instance-identifier varies\n         for each conceptual row.\
    \  In some cases, the instance-\n         identifier is semantically significant,\
    \ e.g., the\n         destination address of a route, and a management station\n\
    \         selects the instance-identifier according to the semantics.\n      \
    \   In other cases, the instance-identifier is used solely to\n         distinguish\
    \ conceptual rows, and a management station\n         without specific knowledge\
    \ of the conceptual row might\n         examine the instances present in order\
    \ to determine an\n         unused instance-identifier.  (This approach may be\
    \ used, but\n         it is often highly sub-optimal; however, it is also a\n\
    \         questionable practice for a naive management station to\n         attempt\
    \ conceptual row creation.)\n         Alternately, the MIB module which defines\
    \ the conceptual row\n         might provide one or more objects which provide\
    \ assistance\n         in determining an unused instance-identifier.  For example,\n\
    \         if the conceptual row is indexed by an integer-value, then\n       \
    \  an object having an integer-valued SYNTAX clause might be\n         defined\
    \ for such a purpose, allowing a management station to\n         issue a management\
    \ protocol retrieval operation.  In order\n         to avoid unnecessary collisions\
    \ between competing management\n         stations, `adjacent' retrievals of this\
    \ object should be\n         different.\n         Finally, the management station\
    \ could select a pseudo-random\n         number to use as the index.  In the event\
    \ that this index\n         was already in use and an inconsistentValue was returned\
    \ in\n         response to the management protocol set operation, the\n      \
    \   management station should simply select a new pseudo-random\n         number\
    \ and retry the operation.\n         A MIB designer should choose between the\
    \ two latter\n         algorithms based on the size of the table (and therefore\
    \ the\n         efficiency of each algorithm).  For tables in which a large\n\
    \         number of entries are expected, it is recommended that a MIB\n     \
    \    object be defined that returns an acceptable index for\n         creation.\
    \  For tables with small numbers of entries, it is\n         recommended that\
    \ the latter pseudo-random index mechanism be\n         used.\n         Interaction\
    \ 2: Creating the Conceptual Row\n         Once an unused instance-identifier\
    \ has been selected, the\n         management station determines if it wishes\
    \ to create and\n         activate the conceptual row in one transaction or in\
    \ a\n         negotiated set of interactions.\n         Interaction 2a: Creating\
    \ and Activating the Conceptual Row\n         The management station must first\
    \ determine the column\n         requirements, i.e., it must determine those columns\
    \ for\n         which it must or must not provide values.  Depending on the\n\
    \         complexity of the table and the management station's\n         knowledge\
    \ of the agent's capabilities, this determination\n         can be made locally\
    \ by the management station.  Alternately,\n         the management station issues\
    \ a management protocol get\n         operation to examine all columns in the\
    \ conceptual row that\n         it wishes to create.  In response, for each column,\
    \ there\n         are three possible outcomes:\n             - a value is returned,\
    \ indicating that some other\n             management station has already created\
    \ this conceptual\n             row.  We return to interaction 1.\n          \
    \   - the exception `noSuchInstance' is returned,\n             indicating that\
    \ the agent implements the object-type\n             associated with this column,\
    \ and that this column in at\n             least one conceptual row would be accessible\
    \ in the MIB\n             view used by the retrieval were it to exist. For those\n\
    \             columns to which the agent provides read-create access,\n      \
    \       the `noSuchInstance' exception tells the management\n             station\
    \ that it should supply a value for this column\n             when the conceptual\
    \ row is to be created.\n             - the exception `noSuchObject' is returned,\
    \ indicating\n             that the agent does not implement the object-type\n\
    \             associated with this column or that there is no\n             conceptual\
    \ row for which this column would be\n             accessible in the MIB view\
    \ used by the retrieval.  As\n             such, the management station can not\
    \ issue any\n             management protocol set operations to create an\n  \
    \           instance of this column.\n         Once the column requirements have\
    \ been determined, a\n         management protocol set operation is accordingly\
    \ issued.\n         This operation also sets the new instance of the status\n\
    \         column to `createAndGo'.\n         When the agent processes the set\
    \ operation, it verifies that\n         it has sufficient information to make\
    \ the conceptual row\n         available for use by the managed device.  The information\n\
    \         available to the agent is provided by two sources: the\n         management\
    \ protocol set operation which creates the\n         conceptual row, and, implementation-specific\
    \ defaults\n         supplied by the agent (note that an agent must provide\n\
    \         implementation-specific defaults for at least those objects\n      \
    \   which it implements as read-only).  If there is sufficient\n         information\
    \ available, then the conceptual row is created, a\n         `noError' response\
    \ is returned, the status column is set to\n         `active', and no further\
    \ interactions are necessary (i.e.,\n         interactions 3 and 4 are skipped).\
    \  If there is insufficient\n         information, then the conceptual row is\
    \ not created, and the\n         set operation fails with an error of `inconsistentValue'.\n\
    \         On this error, the management station can issue a management\n     \
    \    protocol retrieval operation to determine if this was\n         because it\
    \ failed to specify a value for a required column,\n         or, because the selected\
    \ instance of the status column\n         already existed.  In the latter case,\
    \ we return to\n         interaction 1.  In the former case, the management station\n\
    \         can re-issue the set operation with the additional\n         information,\
    \ or begin interaction 2 again using\n         `createAndWait' in order to negotiate\
    \ creation of the\n         conceptual row.\n                                \
    \ NOTE WELL\n             Regardless of the method used to determine the column\n\
    \             requirements, it is possible that the management\n             station\
    \ might deem a column necessary when, in fact,\n             the agent will not\
    \ allow that particular columnar\n             instance to be created or written.\
    \  In this case, the\n             management protocol set operation will fail\
    \ with an\n             error such as `noCreation' or `notWritable'.  In this\n\
    \             case, the management station decides whether it needs\n        \
    \     to be able to set a value for that particular columnar\n             instance.\
    \  If not, the management station re-issues the\n             management protocol\
    \ set operation, but without setting\n             a value for that particular\
    \ columnar instance;\n             otherwise, the management station aborts the\
    \ row\n             creation algorithm.\n         Interaction 2b: Negotiating\
    \ the Creation of the Conceptual\n         Row\n         The management station\
    \ issues a management protocol set\n         operation which sets the desired\
    \ instance of the status\n         column to `createAndWait'.  If the agent is\
    \ unwilling to\n         process a request of this sort, the set operation fails\
    \ with\n         an error of `wrongValue'.  (As a consequence, such an agent\n\
    \         must be prepared to accept a single management protocol set\n      \
    \   operation, i.e., interaction 2a above, containing all of the\n         columns\
    \ indicated by its column requirements.) Otherwise,\n         the conceptual row\
    \ is created, a `noError' response is\n         returned, and the status column\
    \ is immediately set to either\n         `notInService' or `notReady', depending\
    \ on whether it has\n         sufficient information to make the conceptual row\
    \ available\n         for use by the managed device.  If there is sufficient\n\
    \         information available, then the status column is set to\n         `notInService';\
    \ otherwise, if there is insufficient\n         information, then the status column\
    \ is set to `notReady'.\n         Regardless, we proceed to interaction 3.\n \
    \        Interaction 3: Initializing non-defaulted Objects\n         The management\
    \ station must now determine the column\n         requirements.  It issues a management\
    \ protocol get operation\n         to examine all columns in the created conceptual\
    \ row.  In\n         the response, for each column, there are three possible\n\
    \         outcomes:\n             - a value is returned, indicating that the agent\n\
    \             implements the object-type associated with this column\n       \
    \      and had sufficient information to provide a value.  For\n             those\
    \ columns to which the agent provides read-create\n             access (and for\
    \ which the agent allows their values to\n             be changed after their\
    \ creation), a value return tells\n             the management station that it\
    \ may issue additional\n             management protocol set operations, if it\
    \ desires, in\n             order to change the value associated with this column.\n\
    \             - the exception `noSuchInstance' is returned,\n             indicating\
    \ that the agent implements the object-type\n             associated with this\
    \ column, and that this column in at\n             least one conceptual row would\
    \ be accessible in the MIB\n             view used by the retrieval were it to\
    \ exist. However,\n             the agent does not have sufficient information\
    \ to\n             provide a value, and until a value is provided, the\n     \
    \        conceptual row may not be made available for use by the\n           \
    \  managed device.  For those columns to which the agent\n             provides\
    \ read-create access, the `noSuchInstance'\n             exception tells the management\
    \ station that it must\n             issue additional management protocol set\
    \ operations, in\n             order to provide a value associated with this column.\n\
    \             - the exception `noSuchObject' is returned, indicating\n       \
    \      that the agent does not implement the object-type\n             associated\
    \ with this column or that there is no\n             conceptual row for which\
    \ this column would be\n             accessible in the MIB view used by the retrieval.\
    \  As\n             such, the management station can not issue any\n         \
    \    management protocol set operations to create an\n             instance of\
    \ this column.\n         If the value associated with the status column is\n \
    \        `notReady', then the management station must first deal with\n      \
    \   all `noSuchInstance' columns, if any.  Having done so, the\n         value\
    \ of the status column becomes `notInService', and we\n         proceed to interaction\
    \ 4.\n         Interaction 4: Making the Conceptual Row Available\n         Once\
    \ the management station is satisfied with the values\n         associated with\
    \ the columns of the conceptual row, it issues\n         a management protocol\
    \ set operation to set the status column\n         to `active'.  If the agent\
    \ has sufficient information to\n         make the conceptual row available for\
    \ use by the managed\n         device, the management protocol set operation succeeds\
    \ (a\n         `noError' response is returned).  Otherwise, the management\n \
    \        protocol set operation fails with an error of\n         `inconsistentValue'.\n\
    \                                 NOTE WELL\n             A conceptual row having\
    \ a status column with value\n             `notInService' or `notReady' is unavailable\
    \ to the\n             managed device.  As such, it is possible for the\n    \
    \         managed device to create its own instances during the\n            \
    \ time between the management protocol set operation\n             which sets\
    \ the status column to `createAndWait' and the\n             management protocol\
    \ set operation which sets the status\n             column to `active'.  In this\
    \ case, when the management\n             protocol set operation is issued to\
    \ set the status\n             column to `active', the values held in the agent\n\
    \             supersede those used by the managed device.\n         If the management\
    \ station is prevented from setting the\n         status column to `active' (e.g.,\
    \ due to management station or\n         network failure) the conceptual row will\
    \ be left in the\n         `notInService' or `notReady' state, consuming resources\n\
    \         indefinitely.  The agent must detect conceptual rows that\n        \
    \ have been in either state for an abnormally long period of\n         time and\
    \ remove them.  It is the responsibility of the\n         DESCRIPTION clause of\
    \ the status column to indicate what an\n         abnormally long period of time\
    \ would be.  This period of time\n         should be long enough to allow for\
    \ human response time\n         (including `think time') between the creation\
    \ of the\n         conceptual row and the setting of the status to `active'. \
    \ In\n         the absence of such information in the DESCRIPTION clause, it\n\
    \         is suggested that this period be approximately 5 minutes in\n      \
    \   length.  This removal action applies not only to newly-\n         created\
    \ rows, but also to previously active rows which are\n         set to, and left\
    \ in, the notInService state for a prolonged\n         period exceeding that which\
    \ is considered normal for such a\n         conceptual row.\n                \
    \         Conceptual Row Suspension\n         When a conceptual row is `active',\
    \ the management station\n         may issue a management protocol set operation\
    \ which sets the\n         instance of the status column to `notInService'.  If\
    \ the\n         agent is unwilling to do so, the set operation fails with an\n\
    \         error of `wrongValue' or `inconsistentValue'.\n         Otherwise, the\
    \ conceptual row is taken out of service, and a\n         `noError' response is\
    \ returned.  It is the responsibility of\n         the DESCRIPTION clause of the\
    \ status column to indicate\n         under what circumstances the status column\
    \ should be taken\n         out of service (e.g., in order for the value of some\
    \ other\n         column of the same conceptual row to be modified).\n       \
    \                   Conceptual Row Deletion\n         For deletion of conceptual\
    \ rows, a management protocol set\n         operation is issued which sets the\
    \ instance of the status\n         column to `destroy'.  This request may be made\
    \ regardless of\n         the current value of the status column (e.g., it is\
    \ possible\n         to delete conceptual rows which are either `notReady',\n\
    \         `notInService' or `active'.) If the operation succeeds, then\n     \
    \    all instances associated with the conceptual row are\n         immediately\
    \ removed.\";\n    };\n    typedef StorageType {\n        type        Enumeration\
    \ (other(1), volatile(2),\n                        nonVolatile(3), permanent(4),\n\
    \                        readOnly(5));\n        description\n            \"Describes\
    \ the memory realization of a conceptual row.  A\n             row which is volatile(2)\
    \ is lost upon reboot.  A row\n             which is either nonVolatile(3), permanent(4)\
    \ or\n             readOnly(5), is backed up by stable storage.  A row which\n\
    \             is permanent(4) can be changed but not deleted.  A row\n       \
    \      which is readOnly(5) cannot be changed nor deleted.\n             If the\
    \ value of an object with this syntax is either\n             permanent(4) or\
    \ readOnly(5), it cannot be modified.\n             Conversely, if the value is\
    \ either other(1), volatile(2)\n             or nonVolatile(3), it cannot be modified\
    \ to be\n             permanent(4) or readOnly(5).  (All illegal modifications\n\
    \             result in a 'wrongValue' error.)\n             Every usage of this\
    \ textual convention is required to\n             specify the columnar objects\
    \ which a permanent(4) row\n             must at a minimum allow to be writable.\"\
    ;\n    };\n    typedef TDomain {\n        type        Pointer;\n        description\n\
    \            \"Denotes a kind of transport service.\n             Some possible\
    \ values, such as snmpUDPDomain, are defined\n             in the SNMPv2-TM MIB\
    \ module.  Other possible values are\n             defined in other MIB modules.\"\
    \n        reference\n            \"The SNMPv2-TM MIB module is defined in RFC\
    \ 3417.\"\n    };\n    typedef TAddressOrZero {\n        type        OctetString\
    \ (0..255);\n        description\n            \"Denotes a transport service address.\n\
    \             A TAddress value is always interpreted within the context\n    \
    \         of a TDomain value.  Thus, each definition of a TDomain\n          \
    \   value must be accompanied by a definition of a textual\n             convention\
    \ for use with that TDomain.  Some possible\n             textual conventions,\
    \ such as SnmpUDPAddress for\n             snmpUDPDomain, are defined in the SNMPv2-TM\
    \ MIB module.\n             Other possible textual conventions are defined in\
    \ other\n             MIB modules.\n             A zero-length TAddress value\
    \ denotes an unknown transport\n             service address.\"\n        reference\n\
    \            \"The SNMPv2-TM MIB module is defined in RFC 3417.\"\n    };\n  \
    \  typedef TAddress {\n        type        TAddressOrZero (1..255);\n        description\n\
    \            \"Denotes a transport service address.\n             This type does\
    \ not allow a zero-length TAddress value.\"\n    };\n"
- title: '};'
  contents:
  - '};

    '
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document presents an extension of the SMIng\
    \ data definition\n   language which supports the mapping of SMIng data definitions\
    \ so that\n   they can be used with the SNMP management framework.  The language\n\
    \   extension and the mapping itself has no security impact on the\n   Internet.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Since SMIng started as a close successor of SMIv2, some\
    \ paragraphs\n   and phrases are directly taken from the SMIv2 specifications\n\
    \   [RFC2578], [RFC2579], [RFC2580] written by Jeff Case, Keith\n   McCloghrie,\
    \ David Perkins, Marshall T.  Rose, Juergen Schoenwaelder,\n   and Steven L. Waldbusser.\n\
    \   The authors would like to thank all participants of the 7th NMRG\n   meeting\
    \ held in Schloss Kleinheubach from 6-8 September 2000, which\n   was a major\
    \ step towards the current status of this memo, namely\n   Heiko Dassow, David\
    \ Durham, Keith McCloghrie, and Bert Wijnen.\n   Furthermore, several discussions\
    \ within the SMING Working Group\n   reflected experience with SMIv2 and influenced\
    \ this specification at\n   some points.\n"
- title: 9. References
  contents:
  - '9. References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC3780]  Strauss, F. and J. Schoenwaelder, \"\
    SMIng - Next Generation\n              Structure of Management Information\",\
    \ RFC 3780, May 2004.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC2234]  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n      \
    \        Specifications: ABNF\", RFC 2234, November 1997.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC3410]  Case, J., Mundy, R., Partain, D.\
    \ and B. Stewart,\n              \"Introduction and Applicability Statements for\
    \ Internet\n              Standard Management Framework\", RFC 3410, December\
    \ 2002.\n   [RFC2578]  McCloghrie, K., Perkins, D. and J. Schoenwaelder,\n   \
    \           \"Structure of Management Information Version 2 (SMIv2)\",\n     \
    \         STD 58, RFC 2578, April 1999.\n   [RFC2579]  McCloghrie, K., Perkins,\
    \ D. and J. Schoenwaelder, \"Textual\n              Conventions for SMIv2\", STD\
    \ 59, RFC 2579, April 1999.\n   [RFC2580]  McCloghrie, K., Perkins, D. and J.\
    \ Schoenwaelder,\n              \"Conformance Statements for SMIv2\", STD 60,\
    \ RFC 2580,\n              April 1999.\n   [ASN1]     International Organization\
    \ for Standardization,\n              \"Specification of Abstract Syntax Notation\
    \ One (ASN.1)\",\n              International Standard 8824, December 1987.\n\
    \   [RFC3159]  McCloghrie, K., Fine, M., Seligson, J., Chan, K., Hahn,\n     \
    \         S., Sahita, R., Smith, A. and F. Reichmeyer, \"Structure of\n      \
    \        Policy Provisioning Information (SPPI)\", RFC 3159, August\n        \
    \      2001.\n   [IEEE754]  Institute of Electrical and Electronics Engineers,\
    \ \"IEEE\n              Standard for Binary Floating-Point Arithmetic\", ANSI/IEEE\n\
    \              Standard 754-1985, August 1985.\n   [RFC3418]  Presuhn, R., Case,\
    \ J., McCloghrie, K., Rose, M. and S.\n              Waldbusser, \"Management\
    \ Information Base (MIB) for the\n              Simple Network Management Protocol\
    \ (SNMP)\", STD 62, RFC\n              3418, December 2002.\n   [RFC3416]  Presuhn,\
    \ R., Case, J., McCloghrie, K., Rose, M. and S.\n              Waldbusser, \"\
    Version 2 of the Protocol Operations for the\n              Simple  Network Management\
    \ Protocol (SNMP)\", STD 62, RFC\n              3416, December 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Frank Strauss\n   TU Braunschweig\n   Muehlenpfordtstrasse\
    \ 23\n   38106 Braunschweig\n   Germany\n   Phone: +49 531 391 3266\n   EMail:\
    \ strauss@ibr.cs.tu-bs.de\n   URI:   http://www.ibr.cs.tu-bs.de/\n   Juergen Schoenwaelder\n\
    \   International University Bremen\n   P.O. Box 750 561\n   28725 Bremen\n  \
    \ Germany\n   Phone: +49 421 200 3587\n   EMail: j.schoenwaelder@iu-bremen.de\n\
    \   URI:   http://www.eecs.iu-bremen.de/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This\
    \ document is subject\n   to the rights, licenses and restrictions contained in\
    \ BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
