Abstract The Incident Object Description Exchange Format (IODEF) defined in RFC 7970 provides an information model and a corresponding XML data model for exchanging incident and indicator information.
This document gives implementers and operators an alternative format to exchange the same information by defining an alternative data model implementation in JSON and its encoding in Concise Binary Object Representation (CBOR).
The Incident Object Description Exchange Format (IODEF)
[RFC7970] defines a data representation for security incident reports and indicators commonly exchanged by operational security teams.
It facilitates the automated exchange of this information to enable mitigation and watch and warning.
An information model using Unified Modeling Language (UML) is defined in Section 3 of [RFC7970] and a corresponding Extensible Markup Language (XML) schema data model is defined in Section 8 of [RFC7970].
This UML based information model and XML based data model are referred to as IODEF UML and IODEF XML, respectively, in this document.
IODEF documents are structured and thus suitable for machine processing.
They will streamline incident response operations.
Another well used and structured format that is suitable for machine processing is JavaScript Object Notation (JSON) [RFC8259].
To facilitate the automation of incident response operations, IODEF documents and implementations should support JSON representation and its encoding in Concise Binary Object Representation (CBOR) [RFC7049].
This document defines an alternate implementation of the IODEF UML information model by specifying a JSON data model using Concise Data Definition Language (CDDL) [RFC8610] and a JSON Schema [JSON SCHEMA].
This JSON data model is referred to as IODEF JSON in this document.
IODEF JSON provides all of the expressivity of IODEF XML.
It gives implementers and operators an alternative format to exchange the same information.
The normative IODEF JSON data model is found in Section 6.
Sections 2 and 3 describe the data types and elements of this data model.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
IODEF JSON implements the abstract data types specified in Section 2 of [RFC7970].
Abstract Data Type to JSON Data Type Mapping
IODEF JSON uses native and derived JSON data types.
Table 1 describes the mapping between the abstract data types in Section 2 of [RFC7970] and their corresponding implementations in IODEF JSON.
IODEF Data Type   CBOR Data Type   CDDL Prelude [RFC8610]
An integer is a subset of the "number" type of JSON, which represents signed digits encoded in Base 10.
The definition of this integer is "[ minus ] int" per [RFC8259], Section 6.
A string that needs to be represented in a human readable language different from the default encoding of the document is represented in the information model by the ML STRING data type.
This data type is implemented as either an object with "value", "lang", and "translation id" elements or a text string as defined in Section 6.
An example is shown below.
Enum Enum is an ordered list of acceptable string values.
Each value has a representative keyword.
Within the data model, the enumerated type keywords are used as attribute values.
Structured Information Information provided in the form of a structured string, such as an ID, or structured information, such as XML documents, is represented in the information model by the STRUCTUREDINFO data type.
Note that this type was originally specified in Section 4.4 of [RFC7203] as a basic structure of its extension classes.
The STRUCTUREDINFO data type is implemented as an object with "SpecID", "ext SpecID", "ContentID", "RawData", and "Reference" elements.
An example for embedding a structured ID is shown below.
EXTENSION Information not otherwise represented in the IODEF can be added using the EXTENSION data type.
This data type is a generic extension mechanism.
The EXTENSION data type is implemented as an ExtensionType object with "value", "name", "dtype", "ext dtype", "meaning", "formatid", "restriction", "ext restriction", and "observable id" elements.
An example for embedding a structured ID is shown below.
If a data item has internal structure that is intended to be processed outside of the IODEF framework, one may consider using the STRUCTUREDINFO data type mentioned in Section 2.2.5.
IODEF JSON Data Model 3.1.
The following table shows the list of IODEF classes and their elements and the corresponding sections in [RFC7970].
Note that the complete JSON schema is defined in Section 6 using CDDL.
Mapping between JSON and XML IODEF    Attributes and elements of each class in the XML IODEF document are both presented as JSON attributes in the JSON IODEF document, and the order of their appearances is ignored.
Flow class is deleted, and classes with its instances now directly have instances of the EventData class that used to belong to the Flow class.
ApplicationHeader class is deleted, and classes with its instances now directly have instances of the ApplicationHeaderField class that used to belong to the ApplicationHeader class.
SignatureData class is deleted, and classes with its instances now directly have instances of the Signature class that used to belong to the SignatureData class.
IndicatorData class is deleted, and classes with its instances now directly have instances of the Indicator class that used to belong to the IndicatorData class.
ObservableReference class is deleted, and classes with its instances now directly have uid ref as an element.
Record class is deleted, and classes with its instances now directly have instances of the RecordData class that used to belong to the Record class.
The MLStringType was modified to support simple string by allowing the type to have not only a predefined object type but also a text type, in order to allow simple descriptions of elements of the type.
Implementations need to be capable of parsing an MLStringType that could take the form of both text and an object.
The elements of the ML STRING type in the XML IODEF document are presented as either STRING type or ML STRING type in the JSON IODEF document.
When converting from the XML IODEF document to the JSON IODEF document, or vice versa, the information contained in the original data of the ML STRING type must be preserved.
When STRING is used instead of ML STRING, parsers can assume that its "xml:lang" is set to "en".
Data models of the extension classes defined by [RFC7203] and referenced by [RFC7970] are represented by the STRUCTUREDINFO class defined in this document.
Signature, X509Data, and RawData are encoded using base64 encoding for JSON IODEF and binary representation for CBOR IODEF to represent them as BYTE objects.
EmailBody represents a whole message body including MIME structure in the same manner defined in [RFC7970].
In case of an email composed of a MIME multipart, the EmailBody contains multiple body parts separated by boundary strings.
The "ipv6 net mask" type attribute of the BulkObservable class remains available for the purpose of backward compatibility, but the use of this attribute is not recommended because IPv6 does not use netmask any more.
ENUM values in this document are extensible and managed by IANA, which is also the case in [RFC7970].
The values in the table are used both by [RFC7970] implementations and by their JSON (and CBOR) bindings as specified by this document.
This document uses JSON's "number" type to represent integers that only have full precision for integer values between  2^(53) and 2^(53).
When dealing with integers outside the range, this issue needs to be considered.
Binaries are encoded in bytes.
Note that XML IODEF in [RFC7970] uses HEXBIN due to the incapability of XML for embedding binaries as they are.
This section provides examples of IODEF documents.
These examples do not represent the full capabilities of the data model or the only way to encode particular information.
A document containing only the mandatory elements and attributes is shown below in JSON and CBOR, respectively.
6F7267616E697A6174696F6E # "organization" 18 1A
A Minimal Example in CBOR 4.2.
An example of C2 domains from a given campaign is shown below in JSON and CBOR, respectively.
Figure 4: Indicators from a Campaign in CBOR 5.
The mapkeys are provided in Table 4 for minimizing the CBOR size.
The IODEF Data Model (CDDL)
This section provides the IODEF data model.
Note that mapkeys are described at the beginning of the CDDL data model for better readability.
; iodef.json: IODEF Document iodef version    24 iodef lang    23 iodef format id    22 iodef private enum name    21 iodef private enum id    20 iodef Incident    19 iodef AdditionalData
18 iodef value    17 iodef translation
16 iodef name    15 iodef dtype    14 iodef ext dtype    13 iodef meaning
12 iodef formatid    11 iodef restriction    10 iodef ext restriction
8 iodef SoftwareReference    7 iodef URL    6 iodef Description
5 iodef spec name    4 iodef ext spec name    3 iodef purpose    2 iodef ext purpose    1 iodef status   0 iodef ext status   1 iodef IncidentID
5 iodef StartTime   6 iodef EndTime   7 iodef RecoveryTime
8 iodef ReportTime   9 iodef GenerationTime
10 iodef Discovery   11 iodef Assessment
12 iodef Method   13 iodef Contact   14 iodef EventData   15 iodef Indicator   16 iodef History   17 iodef
24 iodef CampaignID   25 iodef role   26 iodef ext role   27 iodef type   28 iodef ext type   29 iodef ContactName
30 iodef ContactTitle   31 iodef RegistryHandle   32 iodef PostalAddress   33 iodef Email   34 iodef Telephone   35 iodef
36 iodef handle   37 iodef registry   38 iodef ext registry
42 iodef source   43 iodef ext source   44 iodef DetectionPattern   45 iodef DetectionConfiguration   46 iodef Application   47 iodef Reference   48 iodef AttackPattern   49 iodef Vulnerability   50 iodef Weakness   51 iodef SpecID   52 iodef ext
SpecID   53 iodef ContentID   54 iodef RawData   55 iodef Platform   56 iodef
Scoring   57 iodef ReferenceName   58 iodef specIndex   59 iodef ID   60 iodef occurrence   61 iodef
63 iodef SystemImpact   64 iodef BusinessImpact   65 iodef TimeImpact   66
70 iodef Cause   71 iodef severity   72 iodef completion   73 iodef ext severity   74 iodef metric
76 iodef duration   77 iodef ext duration   78 iodef currency   79 iodef rating   80 iodef ext rating   81 iodef HistoryItem   82 iodef action   83 iodef ext action   84 iodef DateTime
86 iodef System   87 iodef Expectation   88
iodef RecordData   89 iodef category   90 iodef ext category   91 iodef interface   92 iodef spoofed
93 iodef virtual   94 iodef ownership   95 iodef ext ownership   96 iodef
iodef NodeRole   98 iodef Service
100 iodef AssetID   101 iodef DomainData   102 iodef Address   103 iodef Location   104 iodef vlan name   105 iodef vlan
num   106 iodef unit   107 iodef ext unit   108 iodef system status   109 iodef ext system status   110 iodef domain status   111 iodef ext domain status   112 iodef Name   113 iodef DateDomainWasChecked   114 iodef RegistrationDate   115 iodef ExpirationDate   116 iodef
117 iodef NameServers   118 iodef DomainContacts   119 iodef Server   120 iodef SameDomainContact   121 iodef ip protocol   122 iodef ServiceName   123 iodef Port   124 iodef Portlist   125 iodef ProtoCode   126 iodef ProtoType   127 iodef ProtoField   128 iodef
129 iodef EmailData   130 iodef IANAService
135 iodef EmailHeaders   136 iodef EmailBody
iodef HashData   139 iodef Signature   140 iodef RecordPattern   141 iodef RecordItem   142 iodef FileData   143 iodef
145 iodef offset   146 iodef offsetunit   147 iodef ext offsetunit   148 iodef Key   149 iodef registryaction   150 iodef ext registryaction
153 iodef Certificate   154 iodef X509Data   155 iodef File   156 iodef FileName
161 iodef scope   162 iodef HashTargetID   163
164 iodef FuzzyHash   165 iodef
DigestMethod   166 iodef DigestValue   167 iodef CanonicalizationMethod   168 iodef FuzzyHashValue
171 iodef uid ref   172 iodef IndicatorExpression   173
174 iodef AttackPhase   175 iodef BulkObservable   176 iodef BulkObservableFormat   177 iodef BulkObservableList   178 iodef operator   179 iodef ext operator   180 iodef euid ref   181 iodef
{ iodef version  > text, ?
[a zA Z0 9 . ]
iodef ext restriction  > text, ?
iodef ext dtype  > text } Incident
iodef ext status  > text, ?
iodef ext restriction  > text, ?
> text, iodef name  > text, ?
iodef ext restriction  > text, iodef IncidentID
iodef ext restriction  > text, ?
iodef ext restriction  > text, ?
iodef ext restriction  > text, ?
iodef ext restriction  > text, ?
iodef ext registry  > text }
iodef ext source  > text, ?
iodef ext restriction  > text, ?
iodef ext restriction  > text, ?
iodef ext restriction  > text, ?
integer, iodef ID  > IDtype
iodef ext restriction  > text, ?
> duration .default "hour", ?
iodef ext restriction  > text, ?
iodef ext restriction  > text, ?
iodef restriction  > restriction .default "default", ?
iodef ext restriction  > text, ?
iodef ext restriction  > text, ?
"ext value" .default "ipv6 addr", ?
iodef ext unit  > text, ?
> duration .default "hour", ?
iodef ext duration  > text }
iodef ext domain status  > text, ?
iodef DateDomainWasChecked  > DATETIME, ?
iodef Portlist  > PortlistType, ?
iodef ext restriction  > text, ?
> IDtype, iodef KeyName  > text, ?
iodef ext restriction  > text, ?
iodef ext restriction  > text, ?
> BYTE, iodef DigestValue  > BYTE, ?
iodef CanonicalizationMethod  > BYTE, ?
iodef ext restriction  > text, iodef IndicatorID
Observable // iodef uid ref  > IDREFType //
text, iodef version  > text }
iodef ext restriction  > text, iodef IndicatorID
iodef ext restriction  > text, ?
> EmailData // iodef Service  >
Service // iodef WindowsRegistryKeysModified  >
iodef BulkObservable  > BulkObservable //
iodef BulkObservableFormat  > BulkObservableFormat, iodef BulkObservableList  > text, ?
iodef euid ref  > text), ?
This document has no IANA actions.
This document provides a mapping from XML IODEF defined in [RFC7970] to JSON, and Section 3.2 describes several issues that arise when converting XML IODEF and JSON IODEF.
Though it does not provide any further security considerations other than the one described in [RFC7970], implementers of this document should be aware of those issues to avoid any unintended outcome.
Appendix A.  Data Types Used in This Document
The CDDL prelude used in this document is mapped to JSON as shown in the table below.
This section provides a JSON schema [JSON SCHEMA]
that defines the IODEF data model defined in this document.
Note that this section is informative.
