- title: __initial_text__
  contents:
  - '      Video Traffic Models for RTP Congestion Control Evaluations

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes two reference video traffic models for\n\
    \   evaluating RTP congestion control algorithms.  The first model\n   statistically\
    \ characterizes the behavior of a live video encoder in\n   response to changing\
    \ requests on the target video rate.  The second\n   model is trace-driven and\
    \ emulates the output of actual encoded video\n   frame sizes from a high-resolution\
    \ test sequence.  Both models are\n   designed to strike a balance between simplicity,\
    \ repeatability, and\n   authenticity in modeling the interactions between a live\
    \ video\n   traffic source and the congestion control module.  Finally, the\n\
    \   document describes how both approaches can be combined into a hybrid\n   model.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8593.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Desired Behavior of a Synthetic Video Traffic Model . .\
    \ . . .   4\n   4.  Interactions between Synthetic Video Traffic Source and\n\
    \       Other Components at the Sender  . . . . . . . . . . . . . . .   5\n  \
    \ 5.  A Statistical Reference Model . . . . . . . . . . . . . . . .   7\n    \
    \ 5.1.  Time-Damped Response to Target-Rate Update  . . . . . . .   9\n     5.2.\
    \  Temporary Burst and Oscillation during the Transient\n           Period  .\
    \ . . . . . . . . . . . . . . . . . . . . . . . .   9\n     5.3.  Output-Rate\
    \ Fluctuation at Steady State . . . . . . . . .   9\n     5.4.  Rate Range Limit\
    \ Imposed by Video Content . . . . . . . .  10\n   6.  A Trace-Driven Model  .\
    \ . . . . . . . . . . . . . . . . . . .  10\n     6.1.  Choosing the Video Sequence\
    \ and Generating the Traces . .  11\n     6.2.  Using the Traces in the Synthetic\
    \ Codec . . . . . . . . .  13\n       6.2.1.  Main Algorithm  . . . . . . . .\
    \ . . . . . . . . . . .  13\n       6.2.2.  Notes to the Main Algorithm . . .\
    \ . . . . . . . . . .  14\n     6.3.  Varying Frame Rate and Resolution . . .\
    \ . . . . . . . . .  15\n   7.  Combining the Two Models  . . . . . . . . . .\
    \ . . . . . . . .  16\n   8.  Reference Implementation  . . . . . . . . . . .\
    \ . . . . . . .  17\n   9.  IANA Considerations . . . . . . . . . . . . . . .\
    \ . . . . . .  17\n   10. Security Considerations . . . . . . . . . . . . . .\
    \ . . . . .  17\n   11. References  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  17\n     11.1.  Normative References . . . . . . . . . . . . . . .\
    \ . . .  17\n     11.2.  Informative References . . . . . . . . . . . . . . .\
    \ . .  18\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   When evaluating candidate congestion control algorithms\
    \ designed for\n   real-time interactive media, it is important to account for\
    \ the\n   characteristics of traffic patterns generated from a live video\n  \
    \ encoder.  Unlike synthetic traffic sources that can conform perfectly\n   to\
    \ the rate-changing requests from the congestion control module, a\n   live video\
    \ encoder can be sluggish in reacting to such changes.  The\n   output rate of\
    \ a live video encoder also typically deviates from the\n   target rate due to\
    \ uncertainties in the encoder rate-control process.\n   Consequently, end-to-end\
    \ delay and loss performance of a real-time\n   media flow can be further impacted\
    \ by rate variations introduced by\n   the live encoder.\n   On the other hand,\
    \ evaluation results of a candidate RTP congestion\n   control algorithm should\
    \ mostly reflect the performance of the\n   congestion control module and somewhat\
    \ decouple from peculiarities of\n   any specific video codec.  It is also desirable\
    \ that evaluation tests\n   are repeatable and easily duplicated across different\
    \ candidate\n   algorithms.\n   One way to strike a balance between the above\
    \ considerations is to\n   evaluate congestion control algorithms using a synthetic\
    \ video\n   traffic source model that captures key characteristics of the\n  \
    \ behavior of a live video encoder.  The synthetic traffic model should\n   also\
    \ contain tunable parameters so that it can be flexibly adjusted\n   to reflect\
    \ the wide variations in real-world live video encoder\n   behaviors.  To this\
    \ end, this document presents two reference models.\n   The first is based on\
    \ statistical modeling.  The second is driven by\n   frame size and interval traces\
    \ recorded from a real-world encoder.\n   This document also discusses the pros\
    \ and cons of each approach, as\n   well as how both approaches can be combined\
    \ into a hybrid model.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n"
- title: 3.  Desired Behavior of a Synthetic Video Traffic Model
  contents:
  - "3.  Desired Behavior of a Synthetic Video Traffic Model\n   A live video encoder\
    \ employs encoder rate control to meet a target\n   rate by varying its encoding\
    \ parameters, such as quantization step\n   size, frame rate, and picture resolution,\
    \ based on its estimate of\n   the video content (e.g., motion and scene complexity).\
    \  In practice,\n   however, several factors prevent the output video rate from\
    \ perfectly\n   conforming to the input target rate.\n   Due to uncertainties\
    \ in the captured video scene, the output rate\n   typically deviates from the\
    \ specified target.  In the presence of a\n   significant change in target rate,\
    \ the encoder's output frame sizes\n   sometimes fluctuate for a short, transient\
    \ period of time before the\n   output rate converges to the new target.  Finally,\
    \ while most of the\n   frames in a live session are encoded in predictive mode\
    \ (i.e.,\n   P-frames in [H264]), the encoder can occasionally generate a large\n\
    \   intra-coded frame (i.e., I-frame as defined in [H264]) or a frame\n   partially\
    \ containing intra-coded blocks in an attempt to recover from\n   losses, to re-sync\
    \ with the receiver, or during the transient period\n   of responding to target\
    \ rate or spatial resolution changes.\n   Hence, a synthetic video source should\
    \ have the following\n   capabilities:\n   o  To change bitrate.  This includes\
    \ the ability to change frame rate\n      and/or spatial resolution or to skip\
    \ frames upon request.\n   o  To fluctuate around the target bitrate specified\
    \ by the congestion\n      control module.\n   o  To show a delay in convergence\
    \ to the target bitrate.\n   o  To generate intra-coded or repair frames on demand.\n\
    \   While there exist many different approaches in developing a synthetic\n  \
    \ video traffic model, it is desirable that the outcome follows a few\n   common\
    \ characteristics, as outlined below.\n   o  Low computational complexity: The\
    \ model should be computationally\n      lightweight, otherwise, it defeats the\
    \ whole purpose of serving as\n      a substitute for a live video encoder.\n\
    \   o  Temporal pattern similarity: The individual traffic trace\n      instances\
    \ generated by the model should mimic the temporal pattern\n      of those from\
    \ a real video encoder.\n   o  Statistical resemblance: The synthetic traffic\
    \ source should match\n      the outcome of the real video encoder in terms of\
    \ statistical\n      characteristics, such as the mean, variance, peak, and\n\
    \      autocorrelation coefficients of the bitrate.  It is also important\n  \
    \    that the statistical resemblance should hold across different time\n    \
    \  scales ranging from tens of milliseconds to sub-seconds.\n   o  A wide range\
    \ of coverage: The model should be easily configurable\n      to cover a wide\
    \ range of codec behaviors (e.g., with either fast\n      or slow reaction time\
    \ in live encoder rate control) and video\n      content variations (e.g., ranging\
    \ from high to low motion).\n   These distinct behavior features can be characterized\
    \ via simple\n   statistical modeling or a trace-driven approach.  Sections 5\
    \ and 6\n   provide an example of each approach, respectively.  Section 7\n  \
    \ discusses how both models can be combined together.\n"
- title: 4.  Interactions between Synthetic Video Traffic Source and Other
  contents:
  - "4.  Interactions between Synthetic Video Traffic Source and Other\n    Components\
    \ at the Sender\n   Figure 1 depicts the interactions of the synthetic video traffic\n\
    \   source with other components at the sender, such as the application,\n   the\
    \ congestion control module, the media packet transport module,\n   etc.  Both\
    \ reference models, as described later in Sections 5 and 6,\n   follow the same\
    \ set of interactions.\n   The synthetic video source dynamically generates a\
    \ sequence of dummy\n   video frames with varying size and interval.  These dummy\
    \ frames are\n   processed by other modules in order to transmit the video stream\
    \ over\n   the network.  During the lifetime of a video transmission session,\n\
    \   the synthetic video source will typically be required to adapt its\n   encoding\
    \ bitrate and sometimes the spatial resolution and frame rate.\n   In this model,\
    \ the synthetic video source module has a group of\n   incoming and outgoing interface\
    \ calls that allow for interaction with\n   other modules.  The following are\
    \ some of the possible incoming\n   interface calls, marked as (a) in Figure 1,\
    \ that the synthetic video\n   traffic source may accept.  The list is not exhaustive\
    \ and can be\n   complemented by other interface calls if necessary.\n   o  Target\
    \ bitrate R_v: Target bitrate request measured in bits per\n      second (bps).\
    \  Typically, the congestion control module calculates\n      the target bitrate\
    \ and updates it dynamically over time.\n      Depending on the congestion control\
    \ algorithm in use, the update\n      requests can either be periodic (e.g., once\
    \ per second), or\n      on-demand (e.g., only when a drastic bandwidth change\
    \ over the\n      network is observed).\n   o  Target frame rate FPS: The instantaneous\
    \ frame rate measured in\n      frames per second at a given time.  This depends\
    \ on the native\n      camera-capture frame rate as well as the target/preferred\
    \ frame\n      rate configured by the application or user.\n   o  Target frame\
    \ resolution XY: The 2-dimensional vector indicating\n      the preferred frame\
    \ resolution in pixels.  Several factors govern\n      the resolution requested\
    \ to the synthetic video source over time.\n      Examples of such factors include\
    \ the capturing resolution of the\n      native camera and the display size of\
    \ the destination screen.  The\n      target frame resolution also depends on\
    \ the current target bitrate\n      R_v, since it does not make sense to pair\
    \ very low spatial\n      resolutions with very high bitrates, and vice-versa.\n\
    \   o  Instant frame skipping: The request to skip the encoding of one or\n  \
    \    several captured video frames, for instance, when a drastic\n      decrease\
    \ in available network bandwidth is detected.\n   o  On-demand generation of intra\
    \ (I) frame: The request to encode\n      another I-frame to avoid further error\
    \ propagation at the receiver\n      when severe packet losses are observed. \
    \ This request typically\n      comes from the error control module.  It can be\
    \ initiated either\n      by the sender or by the receiver via Full Intra Request\
    \ (FIR)\n      messages as defined in [RFC5104].\n   An example of an outgoing\
    \ interface call, marked as (b) in Figure 1,\n   is the rate range [R_min, R_max].\
    \  Here, R_min and R_max are meant to\n   capture the dynamic rate range the actual\
    \ live video encoder is\n   capable of generating given the input video content.\
    \  This typically\n   depends on the video content complexity and/or display type\
    \ (e.g.,\n   higher R_max for video content with higher motion complexity or for\n\
    \   displays of higher resolution).  Therefore, these values will not\n   change\
    \ with R_v but may change over time if the content is changing.\n            \
    \                +-------------+\n                            |             |\
    \  dummy encoded\n                            |  Synthetic  |   video frames\n\
    \                            |    Video    | -------------->\n               \
    \             |   Source    |\n                            |             |\n \
    \                           +--------+----+\n                                /|\\\
    \   |\n                                 |    |\n              -------------------+\
    \    +-------------------->\n                 interface from          interface\
    \ to\n                other modules (a)       other modules (b)\n           Figure\
    \ 1: Interaction between Synthetic Video Encoder\n                      and Other\
    \ Modules at the Sender\n"
- title: 5.  A Statistical Reference Model
  contents:
  - "5.  A Statistical Reference Model\n   This section describes one simple statistical\
    \ model of the live video\n   traffic source.  Figure 2 summarizes the list of\
    \ tunable parameters\n   in this statistical model.  A more comprehensive survey\
    \ of popular\n   methods for modeling the behavior of video traffic sources can\
    \ be\n   found in [Tanwir2013].\n     +===========+====================================+================+\n\
    \     | Notation  | Parameter Name                     | Example Value  |\n  \
    \   +===========+====================================+================+\n    \
    \ | R_v       | Target bitrate request             |      1 Mbps    |\n     +-----------+------------------------------------+----------------+\n\
    \     | FPS       | Target frame rate                  |     30 Hz      |\n  \
    \   +-----------+------------------------------------+----------------+\n    \
    \ | tau_v     | Encoder reaction latency           |    0.2 s       |\n     +-----------+------------------------------------+----------------+\n\
    \     | K_d       | Burst duration of the transient    |    8 frames    |\n  \
    \   |           | period                             |                |\n    \
    \ +-----------+------------------------------------+----------------+\n     |\
    \ K_B       | Burst frame size during the        |   13.5 KB*     |\n     |  \
    \         | transient period                   |                |\n     +-----------+------------------------------------+----------------+\n\
    \     | t0        | Reference frame interval  1/FPS    |     33 ms      |\n  \
    \   +-----------+------------------------------------+----------------+\n    \
    \ | B0        | Reference frame size  R_v/8/FPS    |    4.17 KB     |\n     +-----------+------------------------------------+----------------+\n\
    \     |           | Scaling parameter of the zero-mean |                |\n  \
    \   |           | Laplacian distribution describing  |                |\n    \
    \ | SCALE_t   | deviations in normalized frame     |    0.15        |\n     |\
    \           | interval (t-t0)/t0                 |                |\n     +-----------+------------------------------------+----------------+\n\
    \     |           | Scaling parameter of the zero-mean |                |\n  \
    \   |           | Laplacian distribution describing  |                |\n    \
    \ | SCALE_B   | deviations in normalized frame     |    0.15        |\n     |\
    \           | size (B-B0)/B0                     |                |\n     +-----------+------------------------------------+----------------+\n\
    \     | R_min     | Minimum rate supported by video    |    150 kbps    |\n  \
    \   |           | encoder type or content activity   |                |\n    \
    \ +-----------+------------------------------------+----------------+\n     |\
    \ R_max     | Maximum rate supported by video    |    1.5 Mbps    |\n     |  \
    \         | encoder type or content activity   |                |\n     +===========+====================================+================+\n\
    \     * Example value of K_B for a video stream encoded at 720p and\n       30\
    \ frames per second using H.264/AVC encoder\n    Figure 2: List of Tunable Parameters\
    \ in a Statistical Video Traffic\n                               Source Model\n"
- title: 5.1.  Time-Damped Response to Target-Rate Update
  contents:
  - "5.1.  Time-Damped Response to Target-Rate Update\n   While the congestion control\
    \ module can update its target bitrate\n   request R_v at any time, the statistical\
    \ model dictates that the\n   encoder will only react to such changes tau_v seconds\
    \ after a\n   previous rate transition.  In other words, when the encoder has\n\
    \   reacted to a rate-change request at time t, it will simply ignore all\n  \
    \ subsequent rate-change requests until time t+tau_v.\n"
- title: 5.2.  Temporary Burst and Oscillation during the Transient Period
  contents:
  - "5.2.  Temporary Burst and Oscillation during the Transient Period\n   The output\
    \ bitrate R_o during the period [t, t+tau_v] is considered\n   to be in a transient\
    \ state when reacting to abrupt changes in target\n   rate.  Based on observations\
    \ from video encoder output, the encoder\n   reaction to a new target bitrate\
    \ request can be characterized by high\n   variations in output frame sizes. \
    \ It is assumed in the model that\n   the overall average output bitrate R_o during\
    \ this transient period\n   matches the target bitrate R_v.  Consequently, the\
    \ occasional burst\n   of large frames is followed by smaller-than-average encoded\
    \ frames.\n   This temporary burst is characterized by two parameters:\n   o \
    \ burst duration K_d: Number of frames in the burst event, and\n   o  burst frame\
    \ size K_B: Size of the initial burst frame, which is\n      typically significantly\
    \ larger than the average frame size at\n      steady state.\n   It can be noted\
    \ that these burst parameters can also be used to mimic\n   the insertion of a\
    \ large on-demand I-frame in the presence of severe\n   packet losses.  The values\
    \ of K_d and K_B typically depend on the\n   type of video codec, spatial and\
    \ temporal resolution of the encoded\n   stream, as well as the activity level\
    \ in the video content.\n"
- title: 5.3.  Output-Rate Fluctuation at Steady State
  contents:
  - "5.3.  Output-Rate Fluctuation at Steady State\n   The output bitrate R_o during\
    \ steady state is modeled as randomly\n   fluctuating around the target bitrate\
    \ R_v.  The output traffic can be\n   characterized as the combination of two\
    \ random processes that denote\n   the frame interval t and output frame size\
    \ B over time, which are the\n   two major sources of variations in the encoder\
    \ output.  For\n   simplicity, the deviations of t and B from their respective\
    \ reference\n   levels are modeled as independent and identically distributed\
    \ (i.i.d)\n   random variables following the Laplacian distribution [Papoulis].\n\
    \   More specifically:\n   o  Fluctuations in frame interval: The intervals between\
    \ adjacent\n      frames have been observed to fluctuate around the reference\n\
    \      interval of t0 = 1/FPS.  Deviations in normalized frame interval\n    \
    \  DELTA_t = (t-t0)/t0 can be modeled by a zero-mean Laplacian\n      distribution\
    \ with scaling parameter SCALE_t.  The value of SCALE_t\n      dictates the \"\
    width\" of the Laplacian distribution and therefore\n      the amount of fluctuation\
    \ in actual frame intervals (t) with\n      respect to the reference frame interval\
    \ t0.\n   o  Fluctuations in frame size: The output-encoded frame sizes also\n\
    \      tend to fluctuate around the reference frame size B0=R_v/8/FPS.\n     \
    \ Likewise, deviations in the normalized frame size DELTA_B =\n      (B-B0)/B0\
    \ can be modeled by a zero-mean Laplacian distribution\n      with scaling parameter\
    \ SCALE_B.  The value of SCALE_B dictates the\n      \"width\" of this second\
    \ Laplacian distribution and correspondingly\n      the amount of fluctuations\
    \ in output frame sizes (B) with respect\n      to the reference target B0.\n\
    \   Both values of SCALE_t and SCALE_B can be obtained via parameter\n   fitting\
    \ from empirical data captured for a given video encoder.\n   Example values are\
    \ listed in Figure 2 based on empirical data\n   presented in [IETF-Interim].\n"
- title: 5.4.  Rate Range Limit Imposed by Video Content
  contents:
  - "5.4.  Rate Range Limit Imposed by Video Content\n   The output bitrate R_o is\
    \ further clipped within the dynamic range\n   [R_min, R_max], which in reality\
    \ are dictated by scene and motion\n   complexity of the captured video content.\
    \  In the proposed\n   statistical model, these parameters are specified by the\
    \ application.\n"
- title: 6.  A Trace-Driven Model
  contents:
  - "6.  A Trace-Driven Model\n   The second approach for modeling a video traffic\
    \ source is trace-\n   driven.  This can be achieved by running an actual live\
    \ video encoder\n   on a set of chosen raw video sequences and using the encoder's\
    \ output\n   traces for constructing a synthetic video source.  With this\n  \
    \ approach, the recorded video traces naturally exhibit temporal\n   fluctuations\
    \ around a given target bitrate request R_v from the\n   congestion control module.\n\
    \   The following list summarizes the main steps of this approach:\n   1.  Choose\
    \ one or more representative raw video sequences.\n   2.  Encode the sequence(s)\
    \ using an actual live video encoder.\n       Repeat the process for a number\
    \ of bitrates.  Keep only the\n       sequence of frame sizes for each bitrate.\n\
    \   3.  Construct a data structure that contains the output of the\n       previous\
    \ step.  The data structure should allow for easy bitrate\n       lookup.\n  \
    \ 4.  Upon a target bitrate request R_v from the controller, look up\n       the\
    \ closest bitrates among those previously stored.  Use the\n       frame-size\
    \ sequences stored for those bitrates to approximate the\n       frame sizes to\
    \ output.\n   5.  The output of the synthetic video traffic source contains\n\
    \       \"encoded\" frames with dummy contents but with realistic sizes.\n   Section\
    \ 6.1 explains the first three steps (1-3), and Section 6.2\n   elaborates on\
    \ the remaining two steps (4-5).  Finally, Section 6.3\n   briefly discusses the\
    \ possibility to extend the trace-driven model\n   for supporting time-varying\
    \ frame rate and/or time-varying frame\n   resolution.\n"
- title: 6.1.  Choosing the Video Sequence and Generating the Traces
  contents:
  - "6.1.  Choosing the Video Sequence and Generating the Traces\n   The first step\
    \ is a careful choice of a set of video sequences that\n   are representative\
    \ of the target use cases for the video traffic\n   model.  For the example use\
    \ case of interactive video conferencing,\n   it is recommended to choose a sequence\
    \ with content that resembles a\n   \"talking head\", e.g., from a news broadcast\
    \ or recording of an actual\n   video conferencing call.\n   The length of the\
    \ chosen video sequence is a tradeoff.  If it is too\n   long, it will be difficult\
    \ to manage the data structures containing\n   the traces.  If it is too short,\
    \ there will be an obvious periodic\n   pattern in the output frame sizes, leading\
    \ to biased results when\n   evaluating congestion control performance.  It has\
    \ been empirically\n   determined that a sequence 2 to 4 minutes in length sufficiently\n\
    \   avoids the periodic pattern.\n   Given the chosen raw video sequence, denoted\
    \ \"S\", one can use a live\n   encoder, e.g., some implementation of [H264] or\
    \ [H265], to produce a\n   set of encoded sequences.  As discussed in Section\
    \ 3, the output\n   bitrate of the live encoder can be achieved by tuning three\
    \ input\n   parameters: quantization step size, frame rate, and picture\n   resolution.\
    \  In order to simplify the choice of these parameters for\n   a given target\
    \ rate, one can typically assume a fixed frame rate\n   (e.g., 30 fps) and a fixed\
    \ resolution (e.g., 720p) when configuring\n   the live encoder.  See Section\
    \ 6.3 for a discussion on how to relax\n   these assumptions.\n   Following these\
    \ simplifications, the chosen encoder can be configured\n   to start at a constant\
    \ target bitrate, then vary the quantization\n   step size (internally via the\
    \ video encoder rate controller) to meet\n   various externally specified target\
    \ rates.  It can be further assumed\n   the first frame is encoded as an I-frame\
    \ and the rest are P-frames\n   (see, e.g., [H264] for definitions of I-frames\
    \ and P-frames).  For\n   live encoding, the encoder rate-control algorithm typically\
    \ does not\n   use knowledge of frames in the future when encoding a given frame.\n\
    \   Given the minimum and maximum bitrates at which the synthetic codec\n   is\
    \ to operate (denoted as \"R_min\" and \"R_max\", see Section 4), the\n   entire\
    \ range of target bitrates can be divided into n_s steps.  This\n   leads to an\
    \ encoding bitrate ladder of (n_s + 1) choices equally\n   spaced apart by the\
    \ step length l = (R_max - R_min)/n_s.  The\n   following simple algorithm is\
    \ used to encode the raw video sequence.\n                r = R_min\n        \
    \        while r <= R_max do\n                    Traces[r] = encode_sequence(S,\
    \ r, e)\n                    r = r + l\n   The function encode_sequence takes\
    \ as input parameters, respectively,\n   a raw video sequence (S), a constant\
    \ target rate (r), and an encoder\n   rate-control algorithm (e); it returns a\
    \ vector with the sizes of\n   frames in the order they were encoded.  The output\
    \ vector is stored\n   in a map structure called \"Traces\", whose keys are bitrates\
    \ and whose\n   values are vectors of frame sizes.\n   The choice of a value for\
    \ the number of bitrate steps n_s is\n   important, since it determines the number\
    \ of vectors of frame sizes\n   stored in the map Traces.  The minimum value one\
    \ can choose for n_s\n   is 1; the maximum value depends on the amount of memory\
    \ available for\n   holding the map Traces.  A reasonable value for n_s is one\
    \ that\n   results in steps of length l = 200 kbps.  Section 6.2.2 will discuss\n\
    \   further the choice of step length l.\n   Finally, note that, as mentioned\
    \ in previous sections, R_min and\n   R_max may be modified after the initial\
    \ sequences are encoded.\n   Henceforth, for notational clarity, we refer to the\
    \ bitrate range of\n   the trace file as [Rf_min, Rf_max].  The algorithm described\
    \ in\n   Section 6.2.1 also covers the cases when the current target bitrate\n\
    \   is less than Rf_min or greater than Rf_max.\n"
- title: 6.2.  Using the Traces in the Synthetic Codec
  contents:
  - "6.2.  Using the Traces in the Synthetic Codec\n   The main idea behind the trace-driven\
    \ synthetic codec is that it\n   mimics the rate-adaptation behavior of a real\
    \ live codec upon dynamic\n   updates of the target bitrate request R_v by the\
    \ congestion control\n   module.  It does so by switching to a different frame-size\
    \ vector\n   stored in the map Traces when needed.\n"
- title: 6.2.1.  Main Algorithm
  contents:
  - "6.2.1.  Main Algorithm\n   The main algorithm for rate adaptation in the synthetic\
    \ codec\n   maintains two variables: r_current and t_current.\n   o  The variable\
    \ r_current points to one of the keys of map Traces.\n      Upon a change in the\
    \ value of R_v, typically because the\n      congestion controller detects that\
    \ the network conditions have\n      changed, r_current is updated based on R_v\
    \ as follows:\n           R_ref = min (Rf_max, max(Rf_min, R_v))\n           r_current\
    \ = r\n           such that\n               (r in keys(Traces)  and\n        \
    \        r <= R_ref  and\n               (not(exists) r' in keys(Traces) such\
    \ that r <r'<= R_ref))\n   o  The variable t_current is an index to the frame-size\
    \ vector stored\n      in Traces[r_current].  It is updated every time a new frame\
    \ is\n      due.  It is assumed that all vectors stored in Traces have the\n \
    \     same size, denoted as \"size_traces\".  The following equation\n      governs\
    \ the update of t_current:\n              if t_current < SkipFrames then\n   \
    \               t_current = t_current + 1\n              else\n              \
    \    t_current = ((t_current + 1 - SkipFrames)\n                             \
    \  % (size_traces-SkipFrames)) + SkipFrames\n   where operator \"%\" denotes modulo,\
    \ and SkipFrames is a predefined\n   constant that denotes the number of frames\
    \ to be skipped at the\n   beginning of frame-size vectors after t_current has\
    \ wrapped around.\n   The point of constant SkipFrames is avoiding the effect\
    \ of\n   periodically sending a large I-frame followed by several smaller-\n \
    \  than-average P-frames.  A typical value of SkipFrames is 20, although\n   it\
    \ could be set to 0 if one is interested in studying the effect of\n   sending\
    \ I-frames periodically.\n   The initial value of r_current is set to R_min, and\
    \ the initial value\n   of t_current is set to 0.\n   When a new frame is due,\
    \ its size can be calculated following one of\n   the three cases below:\n   a)\
    \ Rf_min <= R_v < Rf_max:  The output frame size is calculated via\n      linear\
    \ interpolation of the frame sizes appearing in\n      Traces[r_current] and Traces[r_current\
    \ + l].  The interpolation is\n      done as follows:\n               size_lo\
    \ = Traces[r_current][t_current]\n               size_hi = Traces[r_current +\
    \ l][t_current]\n               distance_lo = (R_v - r_current) / l\n        \
    \       framesize = size_hi*distance_lo + size_lo*(1-distance_lo)\n   b) R_v <\
    \ Rf_min:  The output frame size is calculated via scaling\n      with respect\
    \ to the lowest bitrate Rf_min in the trace file, as\n      follows:\n       \
    \      w = R_v / Rf_min\n             framesize = max(fs_min, factor * Traces[Rf_min][t_current])\n\
    \   c) R_v >= Rf_max:  The output frame size is calculated by scaling\n      with\
    \ respect to the highest bitrate Rf_max in the trace file, as\n      follows:\n\
    \                  w = R_v / Rf_max\n                  framesize = min(fs_max,\
    \ w * Traces[Rf_max][t_current])\n   In cases b) and c), floating-point arithmetic\
    \ is used for computing\n   the scaling factor \"w\".  The resulting value of\
    \ the instantaneous\n   frame size (framesize) is further clipped within a reasonable\
    \ range\n   between fs_min (e.g., 10 bytes) and fs_max (e.g., 1 MB).\n"
- title: 6.2.2.  Notes to the Main Algorithm
  contents:
  - "6.2.2.  Notes to the Main Algorithm\n   Note that the main algorithm as described\
    \ above can be further\n   extended to mimic some additional typical behaviors\
    \ of a live video\n   encoder.  Two examples are given below:\n   o  I-frames\
    \ on demand: The synthetic codec can be extended to\n      simulate the sending\
    \ of I-frames on demand, e.g., as a reaction to\n      losses.  To implement this\
    \ extension, the codec's incoming\n      interface (see (a) in Figure 1) is augmented\
    \ with a new function\n      to request a new I-frame.  Upon calling such function,\
    \ t_current\n      is reset to 0.\n   o  Variable step length l between R_min\
    \ and R_max: In the main\n      algorithm, the step length l is fixed for ease\
    \ of explanation.\n      However, if the range [R_min, R_max] is very wide, it\
    \ is also\n      possible to define a set of intermediate encoding rates with\n\
    \      variable step length.  The rationale behind this modification is\n    \
    \  that the difference between 400 and 600 kbps as target bitrate is\n      much\
    \ more significant than the difference between 4400 kbps and\n      4600 kbps.\
    \  For example, one could define steps of length 200 kbps\n      under 1 Mbps,\
    \ then steps of length 300 kbps between 1 Mbps and 2\n      Mbps, then 400 kbps\
    \ between 2 Mbps and 3 Mbps, and so on.\n"
- title: 6.3.  Varying Frame Rate and Resolution
  contents:
  - "6.3.  Varying Frame Rate and Resolution\n   The trace-driven synthetic codec\
    \ model explained in this section is\n   relatively simple due to the choice of\
    \ fixed frame rate and frame\n   resolution.  The model can be extended further\
    \ to accommodate\n   variable frame rate and/or variable spatial resolution.\n\
    \   When the encoded picture quality at a given bitrate is low, one can\n   potentially\
    \ decrease either the frame rate (if the video sequence is\n   currently in low\
    \ motion) or the spatial resolution in order to\n   improve quality of experience\
    \ (QoE) in the overall encoded video.  On\n   the other hand, if target bitrate\
    \ increases to a point where there is\n   no longer a perceptible improvement\
    \ in the picture quality of\n   individual frames, then one might afford to increase\
    \ the spatial\n   resolution or the frame rate (useful if the video is currently\
    \ in\n   high motion).\n   Many techniques have been proposed to choose over time\
    \ the best\n   combination of encoder-quantization step size, frame rate, and\n\
    \   spatial resolution in order to maximize the quality of live video\n   codecs\
    \ [Ozer2011] [Hu2012].  Future work may consider extending the\n   trace-driven\
    \ codec to accommodate variable frame rate and/or\n   resolution.\n   From the\
    \ perspective of congestion control, varying the spatial\n   resolution typically\
    \ requires a new intra-coded frame to be\n   generated, thereby incurring a temporary\
    \ burst in the output traffic\n   pattern.  The impact of frame-rate change tends\
    \ to be more subtle:\n   reducing frame rate from high to low leads to sparsely\
    \ spaced larger\n   encoded packets instead of many densely spaced smaller packets.\
    \  Such\n   difference in traffic profiles may still affect the performance of\n\
    \   congestion control, especially when outgoing packets are not paced by\n  \
    \ the media transport module.  Investigation of varying frame rate and\n   resolution\
    \ are left for future work.\n"
- title: 7.  Combining the Two Models
  contents:
  - "7.  Combining the Two Models\n   It is worthwhile noting that the statistical\
    \ and trace-driven models\n   each have their own advantages and drawbacks.  Both\
    \ models are fairly\n   simple to implement.  It takes significantly greater effort\
    \ to fit\n   the parameters of a statistical model to actual encoder output data.\n\
    \   In contrast, it is straightforward for a trace-driven model to obtain\n  \
    \ encoded frame-size data.  Once validated, the statistical model is\n   more\
    \ flexible in mimicking a wide range of encoder/content behaviors\n   by simply\
    \ varying the corresponding parameters in the model.  In this\n   regard, a trace-driven\
    \ model relies, by definition, on additional\n   data-collection efforts for accommodating\
    \ new codecs or video\n   contents.\n   In general, the trace-driven model is\
    \ more realistic for mimicking\n   the ongoing steady-state behavior of a video\
    \ traffic source with\n   fluctuations around a constant target rate.  In contrast,\
    \ the\n   statistical model is more versatile for simulating the behavior of a\n\
    \   video stream in transient, such as when encountering sudden rate\n   changes.\
    \  It is also possible to combine both methods into a hybrid\n   model.  In this\
    \ case, the steady-state behavior is driven by traces\n   during steady state\
    \ and the transient-state behavior is driven by the\n   statistical model.\n \
    \                                  transient +---------------+\n             \
    \                        state   | Generate next |\n                         \
    \            +------>| K_d transient |\n               +-----------------+  /\
    \        |    frames     |\n          R_v  | Compare against | /         +---------------+\n\
    \        ------>|   previous      |/\n               | target bitrate  |\\\n \
    \              +-----------------+ \\         +---------------+\n            \
    \                        \\        | Generate next |\n                       \
    \              +------>|  frame from   |\n                                   \
    \   steady |    trace      |\n                                       state +---------------+\n\
    \                  Figure 3: A Hybrid Video Traffic Model\n   As shown in Figure\
    \ 3, the video traffic model operates in a transient\n   state if the requested\
    \ target rate R_v is substantially different\n   from the previous target; otherwise,\
    \ it operates in a steady state.\n   During the transient state, a total of K_d\
    \ frames are generated by\n   the statistical model, resulting in one (1) big\
    \ burst frame with size\n   K_B followed by K_d-1 smaller frames.  When operating\
    \ at steady\n   state, the video traffic model simply generates a frame according\
    \ to\n   the trace-driven model given the target rate while modulating the\n \
    \  frame interval according to the distribution specified by the\n   statistical\
    \ model.  One example criterion for determining whether the\n   traffic model\
    \ should operate in a transient state is whether the rate\n   change exceeds 10%\
    \ of the previous target rate.  Finally, as this\n   model follows transient-state\
    \ behavior dictated by the statistical\n   model, upon a substantial rate change,\
    \ the model will follow the\n   time-damping mechanism as defined in Section 5.1,\
    \ which is governed\n   by parameter tau_v.\n"
- title: 8.  Reference Implementation
  contents:
  - "8.  Reference Implementation\n   The statistical, trace-driven, and hybrid models\
    \ as described in this\n   document have been implemented as a stand-alone, platform-independent\n\
    \   synthetic traffic source module.  It can be easily integrated into\n   network\
    \ simulation platforms such as [ns-2] and [ns-3], as well as\n   testbeds using\
    \ a real network.  The stand-alone traffic source module\n   is available as an\
    \ open-source implementation at [Syncodecs].\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   The synthetic video traffic models as described\
    \ in this document do\n   not impose any security threats.  They are designed\
    \ to mimic\n   realistic traffic patterns for evaluating candidate RTP-based\n\
    \   congestion control algorithms so as to ensure stable operations of\n   the\
    \ network.  It is RECOMMENDED that candidate algorithms be tested\n   using the\
    \ video traffic models presented in this document before wide\n   deployment over\
    \ the Internet.  If the generated synthetic traffic\n   flows are sent over the\
    \ Internet, they also need to be congestion\n   controlled.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [H264]     ITU-T, \"Advanced video coding for\
    \ generic audiovisual\n              services\", Recommendation H.264, April 2017,\n\
    \              <https://www.itu.int/rec/T-REC-H.264>.\n   [H265]     ITU-T, \"\
    High efficiency video coding\",\n              Recommendation H.265, February\
    \ 2018,\n              <https://www.itu.int/rec/T-REC-H.265>.\n   [Hu2012]   Hu,\
    \ H., Ma, Z., and Y. Wang, \"Optimization of Spatial,\n              Temporal\
    \ and Amplitude Resolution for Rate-Constrained\n              Video Coding and\
    \ Scalable Video Adaptation\", Proc. 19th\n              IEEE International Conference\
    \ on Image Processing (ICIP),\n              DOI 10.1109/ICIP.2012.6466960, September\
    \ 2012.\n   [IETF-Interim]\n              Zhu, X., Mena, S., and Z. Sarker, \"\
    Update on RMCAT Video\n              Traffic Model: Trace Analysis and Model Update\"\
    , IETF\n              RMCAT Virtual Interim, April 2017,\n              <https://www.ietf.org/proceedings/interim-2017-rmcat-\n\
    \              01/slides/slides-interim-2017-rmcat-01-sessa-update-on-\n     \
    \         video-traffic-model-draft-00.pdf>.\n   [ns-2]     \"The Network Simulator\
    \ - ns-2\", December 2015,\n              <https://nsnam.sourceforge.net/wiki/index.php/\n\
    \              User_Information>.\n   [ns-3]     \"NS-3 Network Simulator\", <https://www.nsnam.org/>.\n\
    \   [Ozer2011] Ozer, J., \"Video Compression for Flash, Apple Devices and\n  \
    \            HTML5\", Galax: Doceo Publishing, ISBN-13: 978-0976259503,\n    \
    \          2011.\n   [Papoulis] Papoulis, A. and S. Pillai, \"Probability, Random\
    \ Variables\n              and Stochastic Processes\", London: McGraw-Hill Europe,\n\
    \              ISBN-13: 978-0071226615, 2002.\n   [RFC5104]  Wenger, S., Chandra,\
    \ U., Westerlund, M., and B. Burman,\n              \"Codec Control Messages in\
    \ the RTP Audio-Visual Profile\n              with Feedback (AVPF)\", RFC 5104,\
    \ DOI 10.17487/RFC5104,\n              February 2008, <https://www.rfc-editor.org/info/rfc5104>.\n\
    \   [Syncodecs]\n              \"Syncodecs: Synthetic codecs for evaluation of\
    \ RMCAT\n              work\", commit a92d6c8, May 2018,\n              <https://github.com/cisco/syncodecs>.\n\
    \   [Tanwir2013]\n              Tanwir, S. and H. Perros, \"A Survey of VBR Video\
    \ Traffic\n              Models\", IEEE Communications Surveys and Tutorials,\
    \ Volume\n              15, Issue 4, p. 1778-1802,\n              DOI 10.1109/SURV.2013.010413.00071,\
    \ January 2013.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Xiaoqing Zhu\n   Cisco Systems\n   12515 Research Blvd.,\
    \ Building 4\n   Austin, TX  78759\n   United States of America\n   Email: xiaoqzhu@cisco.com\n\
    \   Sergio Mena\n   Cisco Systems\n   EPFL, Quartier de l'Innovation, Batiment\
    \ E\n   Ecublens, Vaud  1015\n   Switzerland\n   Email: semena@cisco.com\n   Zaheduzzaman\
    \ Sarker\n   Ericsson AB\n   Torshamnsgatan 23\n   Stockholm, SE  164 83\n   Sweden\n\
    \   Phone: +46 10 717 37 43\n   Email: zaheduzzaman.sarker@ericsson.com\n"
