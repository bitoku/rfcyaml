- title: __initial_text__
  contents:
  - '          X.509 Extensions for IP Addresses and AS Identifiers

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines two X.509 v3 certificate extensions.  The\
    \ first\n   binds a list of IP address blocks, or prefixes, to the subject of\
    \ a\n   certificate.  The second binds a list of autonomous system\n   identifiers\
    \ to the subject of a certificate.  These extensions may be\n   used to convey\
    \ the authorization of the subject to use the IP\n   addresses and autonomous\
    \ system identifiers contained in the\n   extensions.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n       1.1.  Terminology. . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   2.  IP Address Delegation Extension. . . . . . . . . . . .\
    \ . . . .  5\n       2.1.  Context. . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  5\n             2.1.1.  Encoding of an IP Address or Prefix. . . . .\
    \ . .  5\n             2.1.2.  Encoding of a Range of IP Addresses. . . . . .\
    \ .  7\n       2.2.  Specification. . . . . . . . . . . . . . . . . . . . . .\
    \  8\n             2.2.1.  OID. . . . . . . . . . . . . . . . . . . . . . .  8\n\
    \             2.2.2.  Criticality. . . . . . . . . . . . . . . . . . .  9\n  \
    \           2.2.3.  Syntax . . . . . . . . . . . . . . . . . . . . .  9\n    \
    \                 2.2.3.1.  Type IPAddrBlocks. . . . . . . . . . .  9\n      \
    \               2.2.3.2.  Type IPAddressFamily . . . . . . . . .  9\n        \
    \             2.2.3.3.  Element addressFamily. . . . . . . . . 10\n          \
    \           2.2.3.4.  Element ipAddressChoice and Type\n                     \
    \          IPAddressChoice. . . . . . . . . . . . 10\n                     2.2.3.5.\
    \  Element inherit. . . . . . . . . . . . 10\n                     2.2.3.6.  Element\
    \ addressesOrRanges. . . . . . . 10\n                     2.2.3.7.  Type IPAddressOrRange.\
    \ . . . . . . . . 11\n                     2.2.3.8.  Element addressPrefix and\
    \ Type\n                               IPAddress. . . . . . . . . . . . . . .\
    \ 11\n                     2.2.3.9.  Element addressRange and Type\n         \
    \                      IPAddressRange . . . . . . . . . . . . 12\n       2.3.\
    \  IP Address Delegation Extension Certification Path\n             Validation\
    \ . . . . . . . . . . . . . . . . . . . . . . . 12\n   3.  Autonomous System Identifier\
    \ Delegation Extension. . . . . . . 13\n       3.1.  Context  . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 13\n       3.2.  Specification. . . . . . .\
    \ . . . . . . . . . . . . . . . 13\n             3.2.1.  OID. . . . . . . . .\
    \ . . . . . . . . . . . . . . 13\n             3.2.2.  Criticality. . . . . .\
    \ . . . . . . . . . . . . . 14\n             3.2.3.  Syntax . . . . . . . . .\
    \ . . . . . . . . . . . . 14\n                     3.2.3.1.  Type ASIdentifiers\
    \ . . . . . . . . . . 14\n                     3.2.3.2.  Elements asnum, rdi,\
    \ and Type\n                               ASIdentifierChoice . . . . . . . .\
    \ . . 14\n                     3.2.3.3.  Element inherit. . . . . . . . . . .\
    \ . 15\n                     3.2.3.4.  Element asIdsOrRanges. . . . . . . . .\
    \ 15\n                     3.2.3.5.  Type ASIdOrRange . . . . . . . . . . . 15\n\
    \                     3.2.3.6.  Element id . . . . . . . . . . . . . . 15\n  \
    \                   3.2.3.7.  Element range. . . . . . . . . . . . . 15\n    \
    \                 3.2.3.8.  Type ASRange . . . . . . . . . . . . . 15\n      \
    \               3.2.3.9.  Elements min and max . . . . . . . . . 15\n        \
    \             3.2.3.10. Type ASId. . . . . . . . . . . . . . . 15\n   3.3.  Autonomous\
    \ System Identifier Delegation Extension\n         Certification Path Validation.\
    \ . . . . . . . . . . . . . . . 16\n   4.  Security Considerations. . . . . .\
    \ . . . . . . . . . . . . . . 16\n   5.  Acknowledgments. . . . . . . . . . .\
    \ . . . . . . . . . . . . . 16\n   Appendix A -- ASN.1 Module . . . . . . . .\
    \ . . . . . . . . . . . . 17\n   Appendix B -- Examples of IP Address Delegation\
    \ Extensions . . . . 18\n   Appendix C -- Example of an AS Identifier Delegation\
    \ Extension . . 21\n   Appendix D -- Use of X.509 Attribute Certificates. . .\
    \ . . . . . . 21\n   References . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . 24\n   Normative References . . . . . . . . . . . . . . . . . . .\
    \ . . . . 24\n   Informative References . . . . . . . . . . . . . . . . . . .\
    \ . . . 25\n   Authors' Address . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 26\n   Full Copyright Statement . . . . . . . . . . . . . . . . . . . .\
    \ . 27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines two X.509 v3 certificate extensions\
    \ that\n   authorize the transfer of the right-to-use for a set of IP addresses\n\
    \   and autonomous system identifiers from IANA through the regional\n   Internet\
    \ registries (RIRs) to Internet service providers (ISPs) and\n   user organizations.\
    \  The first binds a list of IP address blocks,\n   often represented as IP address\
    \ prefixes, to the subject (private key\n   holder) of a certificate.  The second\
    \ binds a list of autonomous\n   system (AS) identifiers to the subject (private\
    \ key holder) of a\n   certificate.  The issuer of the certificate is an entity\
    \ (e.g., the\n   IANA, a regional Internet registry, or an ISP) that has the authority\n\
    \   to transfer custodianship of (\"allocate\") the set of IP address\n   blocks\
    \ and AS identifiers to the subject of the certificate.  These\n   certificates\
    \ provide a scalable means of verifying the right-to-use\n   for a set of IP address\
    \ prefixes and AS identifiers.  They may be\n   used by routing protocols, such\
    \ as Secure BGP [S-BGP], to verify\n   legitimacy and correctness of routing information,\
    \ or by Internet\n   routing registries to verify data that they receive.\n  \
    \ Sections 2 and 3 specify several rules about the encoding of the\n   extensions\
    \ defined in this specification that MUST be followed.\n   These encoding rules\
    \ serve the following purposes.  First, they\n   result in a unique encoding of\
    \ the extension's value; two instances\n   of an extension can be compared for\
    \ equality octet-by-octet.  Second,\n   they achieve the minimal size encoding\
    \ of the information.  Third,\n   they allow relying parties to use one-pass algorithms\
    \ when performing\n   certification path validation; in particular, the relying\
    \ parties do\n   not need to sort the information, or to implement extra code\
    \ in the\n   subset checking algorithms to handle several boundary cases\n   (adjacent,\
    \ overlapping, or subsumed ranges).\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   It is assumed that the reader is familiar with the terms\
    \ and concepts\n   described in \"Internet X.509 Public Key Infrastructure Certificate\n\
    \   and Certificate Revocation List (CRL) Profile\" [RFC3280], \"INTERNET\n  \
    \ PROTOCOL\" [RFC791], \"Internet Protocol Version 6 (IPv6) Addressing\n   Architecture\"\
    \ [RFC3513], \"INTERNET REGISTRY IP ALLOCATION GUIDELINES\"\n   [RFC2050], and\
    \ related regional Internet registry address management\n   policy documents.\
    \  Some relevant terms include:\n   allocate - the transfer of custodianship of\
    \ a resource to an\n      intermediate organization (see [RFC2050]).\n   assign\
    \ - the transfer of custodianship of a resource to an end\n      organization\
    \ (see [RFC2050]).\n   Autonomous System (AS) - a set of routers under a single\
    \ technical\n      administration with a uniform policy, using one or more interior\n\
    \      gateway protocols and metrics to determine how to route packets\n     \
    \ within the autonomous system, and using an exterior gateway\n      protocol\
    \ to determine how to route packets to other autonomous\n      systems.\n   Autonomous\
    \ System number - a 32-bit number that identifies an\n      autonomous system.\n\
    \   delegate - transfer of custodianship (that is, the right-to-use) of\n    \
    \  an IP address block or AS identifier through issuance of a\n      certificate\
    \ to an entity.\n   initial octet - the first octet in the value of a DER encoded\
    \ BIT\n      STRING [X.690].\n   IP v4 address - a 32-bit identifier written as\
    \ four decimal numbers,\n      each in the range 0 to 255, separated by a \".\"\
    .  10.5.0.5 is an\n      example of an IPv4 address.\n   IP v6 address - a 128-bit\
    \ identifier written as eight hexadecimal\n      quantities, each in the range\
    \ 0 to ffff, separated by a \":\".\n      2001:0:200:3:0:0:0:1 is an example of\
    \ an IPv6 address.  One string\n      of :0: fields may be replaced by \"::\"\
    , thus 2001:0:200:3::1\n      represents the same address as the immediately preceding\
    \ example.\n      (See [RFC3513]).\n   prefix - a bit string that consists of\
    \ some number of initial bits of\n      an address, written as an address followed\
    \ by a \"/\", and the\n      number of initial bits.  10.5.0.0/16 and 2001:0:200:3:0:0:0:0/64\n\
    \      (or 2001:0:200:3::/64) are examples of prefixes.  A prefix is\n      often\
    \ abbreviated by omitting the less-significant zero fields,\n      but there should\
    \ be enough fields to contain the indicated number\n      of initial bits.  10.5/16\
    \ and 2001:0:200:3/64 are examples of\n      abbreviated prefixes.\n   Regional\
    \ Internet Registry (RIR) - any of the bodies recognized by\n      IANA as the\
    \ regional authorities for management of IP addresses\n      and AS identifiers.\
    \  At the time of writing, these include\n      AfriNIC, APNIC, ARIN, LACNIC,\
    \ and RIPE NCC.\n   right-to-use - for an IP address prefix, being authorized\
    \ to specify\n      the AS that may originate advertisements of the prefix throughout\n\
    \      the Internet.  For an autonomous system identifier, being\n      authorized\
    \ to operate a network(s) that identifies itself to other\n      network operators\
    \ using that autonomous system identifier.\n   subsequent octets - the second\
    \ through last octets in the value of a\n      DER encoded BIT STRING [X.690].\n\
    \   trust anchor - a certificate that is to be trusted when performing\n     \
    \ certification path validation (see [RFC3280]).\n   The keywords MUST, MUST NOT,\
    \ REQUIRED, SHALL, SHALL NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED, and MAY, and\
    \ OPTIONAL, when they appear in\n   this document, are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  IP Address Delegation Extension
  contents:
  - "2.  IP Address Delegation Extension\n   This extension conveys the allocation\
    \ of IP addresses to an entity by\n   binding those addresses to a public key\
    \ belonging to the entity.\n"
- title: 2.1.  Context
  contents:
  - "2.1.  Context\n   IP address space is currently managed by a hierarchy nominally\
    \ rooted\n   at IANA, but managed by the RIRs.  IANA allocates IP address space\
    \ to\n   the RIRs, who in turn allocate IP address space to Internet service\n\
    \   providers (ISPs), who may allocate IP address space to down stream\n   providers,\
    \ customers, etc.  The RIRs also may assign IP address space\n   to organizations\
    \ who are end entities, i.e., organizations who will\n   not be reassigning any\
    \ of their space to other organizations.  (See\n   [RFC2050] and related RIR policy\
    \ documents for the guidelines on the\n   allocation and assignment process).\n\
    \   The IP address delegation extension is intended to enable\n   verification\
    \ of the proper delegation of IP address blocks, i.e., of\n   the authorization\
    \ of an entity to use or sub-allocate IP address\n   space.  Accordingly, it makes\
    \ sense to take advantage of the inherent\n   authoritativeness of the existing\
    \ administrative framework for\n   allocating IP address space.  As described\
    \ in Section 1 above, this\n   will be achieved by issuing certificates carrying\
    \ the extension\n   described in this section.  An example of one use of the information\n\
    \   in this extension is an entity using it to verify the authorization\n   of\
    \ an organization to originate a BGP UPDATE advertising a path to a\n   particular\
    \ IP address block; see, e.g., [RFC1771], [S-BGP].\n"
- title: 2.1.1.  Encoding of an IP Address or Prefix
  contents:
  - "2.1.1.  Encoding of an IP Address or Prefix\n   There are two families of IP\
    \ addresses: IPv4 and IPv6.\n   An IPv4 address is a 32-bit quantity that is written\
    \ as four decimal\n   numbers, each in the range 0 through 255, separated by a\
    \ dot (\".\").\n   10.5.0.5 is an example of an IPv4 address.\n   An IPv6 address\
    \ is a 128-bit quantity that is written as eight\n   hexadecimal numbers, each\
    \ in the range 0 through ffff, separated by a\n   semicolon (\":\"); 2001:0:200:3:0:0:0:1\
    \ is an example of an IPv6\n   address.  IPv6 addresses frequently have adjacent\
    \ fields whose value\n   is 0.  One such group of 0 fields may be abbreviated\
    \ by two\n   semicolons (\"::\").  The previous example may thus be represented\
    \ by\n   2001:0:200:3::1.\n   An address prefix is a set of 2^k continuous addresses\
    \ whose most-\n   significant bits are identical.  For example, the set of 512\
    \ IPv4\n   addresses from 10.5.0.0 through 10.5.1.255 all have the same 23\n \
    \  most-significant bits.  The set of addresses is written by appending\n   a\
    \ slash (\"/\") and the number of constant bits to the lowest address\n   in the\
    \ set.  The prefix for the example set is 10.5.0.0/23, and\n   contains 2^(32-23)\
    \ = 2^9 addresses.  The set of IPv6 addresses\n   2001:0:200:0:0:0:0:0 through\
    \ 2001:0:3ff:ffff:ffff:ffff:ffff:ffff\n   (2^89 addresses) is represented by 2001:0:200:0:0:0:0:0/39\
    \ or\n   equivalently 2001:0:200::/39.  A prefix may be abbreviated by\n   omitting\
    \ the least-significant zero fields, but there should be\n   enough fields to\
    \ contain the indicated number of constant bits.  The\n   abbreviated forms of\
    \ the example IPv4 prefix is 10.5.0/23, and of the\n   example IPv6 prefix is\
    \ 2001:0:200/39.\n   An IP address or prefix is encoded in the IP address delegation\n\
    \   extension as a DER-encoded ASN.1 BIT STRING containing the constant\n   most-significant\
    \ bits.  Recall [X.690] that the DER encoding of a BIT\n   STRING consists of\
    \ the BIT STRING type (0x03), followed by (an\n   encoding of) the number of value\
    \ octets, followed by the value.  The\n   value consists of an \"initial octet\"\
    \ that specifies the number of\n   unused bits in the last value octet, followed\
    \ by the \"subsequent\n   octets\" that contain the octets of the bit string.\
    \  (For IP\n   addresses, the encoding of the length will be just the length.)\n\
    \   In the case of a single address, all the bits are constant, so the\n   bit\
    \ string for an IPv4 address contains 32 bits.  The subsequent\n   octets in the\
    \ DER-encoding of the address 10.5.0.4 are 0x0a 0x05 0x00\n   0x04.  Since all\
    \ the bits in the last octet are used, the initial\n   octet is 0x00.  The octets\
    \ in the DER-encoded BIT STRING is thus:\n         Type Len  Unused Bits ...\n\
    \         0x03 0x05  0x00  0x0a 0x05 0x00 0x04\n   Similarly, the DER-encoding\
    \ of the prefix 10.5.0/23 is:\n         Type Len  Unused Bits ...\n         0x03\
    \ 0x04  0x01  0x0a 0x05 0x00\n   In this case, the three subsequent octets contain\
    \ 24 bits, but the\n   prefix only uses 23, so there is one unused bit in the\
    \ last octet,\n   thus the initial octet is 1 (the DER require that all unused\
    \ bits\n   MUST be set to zero-bits).\n   The DER-encoding of the IPv6 address\
    \ 2001:0:200:3:0:0:0:1 is:\n         Type Len  Unused Bits ...\n         0x03\
    \ 0x11  0x00  0x20 0x01 0x00 0x00 0x02 0x00 0x00 0x03\n                      \
    \    0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01\n   and the DER-encoding of the prefix\
    \ 2001:0:200/39, which has one\n   unused bit in the last octet, is:\n       \
    \  Type Len  Unused Bits ...\n         0x03 0x06  0x01  0x20 0x01 0x00 0x00 0x02\n"
- title: 2.1.2.  Encoding of a Range of IP Addresses
  contents:
  - "2.1.2.  Encoding of a Range of IP Addresses\n   While any contiguous range of\
    \ IP addresses can be represented by a\n   set of contiguous prefixes, a more\
    \ concise representation is achieved\n   by encoding the range as a SEQUENCE containing\
    \ the lowest address and\n   the highest address, where each address is encoded\
    \ as a BIT STRING.\n   Within the SEQUENCE, the bit string representing the lowest\
    \ address\n   in the range is formed by removing all the least-significant zero-\n\
    \   bits from the address, and the bit string representing the highest\n   address\
    \ in the range is formed by removing all the least-significant\n   one-bits. \
    \ The DER BIT STRING encoding requires that all the unused\n   bits in the last\
    \ octet MUST be set to zero-bits.  Note that a prefix\n   can always be expressed\
    \ as a range, but a range cannot always be\n   expressed as a prefix.\n   The\
    \ range of addresses represented by the prefix 10.5.0/23 is\n   10.5.0.0 through\
    \ 10.5.1.255.  The lowest address ends in sixteen\n   zero-bits that are removed.\
    \  The DER-encoding of the resulting\n   sixteen-bit string is:\n         Type\
    \ Len  Unused Bits ...\n         0x03 0x03  0x00  0x0a 0x05\n   The highest address\
    \ ends in nine one-bits that are removed.  The DER-\n   encoding of the resulting\
    \ twenty-three-bit string is:\n         Type Len  Unused Bits ...\n         0x03\
    \ 0x04  0x01  0x0a 0x05 0x00\n   The prefix 2001:0:200/39 can be encoded as a\
    \ range where the DER-\n   encoding of the lowest address (2001:0:200::) is:\n\
    \         Type Len  Unused Bits ...\n         0x03 0x06  0x01  0x20 0x01 0x00\
    \ 0x00 0x02\n   and the largest address (2001:0:3ff:ffff:ffff:ffff:ffff:ffff),\
    \ which,\n   after removal of the ninety least-significant one-bits leaves a\n\
    \   thirty-eight bit string, is encoded as:\n         Type Len  Unused Bits ...\n\
    \         0x03 0x06  0x02  0x20 0x01 0x00 0x00 0x00\n   The special case of all\
    \ IP address blocks, i.e., a prefix of all\n   zero-bits -- \"0/0\", MUST be encoded\
    \ per the DER with a length octet\n   of one, an initial octet of zero, and no\
    \ subsequent octets:\n         Type Len  Unused Bits ...\n         0x03 0x01 \
    \ 0x00\n   Note that for IP addresses the number of trailing zero-bits is\n  \
    \ significant.  For example, the DER-encoding of 10.64/12:\n         Type Len\
    \  Unused Bits ...\n         0x03 0x03  0x04  0x0a 0x40\n   is different than\
    \ the DER-encoding of 10.64.0/20:\n         Type Len  Unused Bits ...\n      \
    \   0x03 0x04  0x04  0x0a 0x40 0x00\n"
- title: 2.2.  Specification
  contents:
  - '2.2.  Specification

    '
- title: 2.2.1.  OID
  contents:
  - "2.2.1.  OID\n   The OID for this extension is id-pe-ipAddrBlocks.\n      id-pe-ipAddrBlocks\
    \  OBJECT IDENTIFIER ::= { id-pe 7 }\n   where [RFC3280] defines:\n      id-pkix\
    \  OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n               dod(6)\
    \ internet(1) security(5) mechanisms(5) pkix(7) }\n      id-pe    OBJECT IDENTIFIER\
    \ ::= { id-pkix 1 }\n"
- title: 2.2.2.  Criticality
  contents:
  - "2.2.2.  Criticality\n   This extension SHOULD be CRITICAL.  The intended use\
    \ of this\n   extension is to connote a right-to-use for the block(s) of IP\n\
    \   addresses identified in the extension.  A CA marks the extension as\n   CRITICAL\
    \ to convey the notion that a relying party MUST understand\n   the semantics\
    \ of the extension to make use of the certificate for the\n   purpose it was issued.\
    \  Newly created applications that use\n   certificates containing this extension\
    \ are expected to recognize the\n   extension.\n"
- title: 2.2.3.  Syntax
  contents:
  - "2.2.3.  Syntax\n   id-pe-ipAddrBlocks      OBJECT IDENTIFIER ::= { id-pe 7 }\n\
    \   IPAddrBlocks        ::= SEQUENCE OF IPAddressFamily\n   IPAddressFamily  \
    \   ::= SEQUENCE {    -- AFI & optional SAFI --\n      addressFamily        OCTET\
    \ STRING (SIZE (2..3)),\n      ipAddressChoice      IPAddressChoice }\n   IPAddressChoice\
    \     ::= CHOICE {\n      inherit              NULL, -- inherit from issuer --\n\
    \      addressesOrRanges    SEQUENCE OF IPAddressOrRange }\n   IPAddressOrRange\
    \    ::= CHOICE {\n      addressPrefix        IPAddress,\n      addressRange \
    \        IPAddressRange }\n   IPAddressRange      ::= SEQUENCE {\n      min  \
    \                IPAddress,\n      max                  IPAddress }\n   IPAddress\
    \           ::= BIT STRING\n"
- title: 2.2.3.1.  Type IPAddrBlocks
  contents:
  - "2.2.3.1.  Type IPAddrBlocks\n   The IPAddrBlocks type is a SEQUENCE OF IPAddressFamily\
    \ types.\n"
- title: 2.2.3.2.  Type IPAddressFamily
  contents:
  - "2.2.3.2.  Type IPAddressFamily\n   The IPAddressFamily type is a SEQUENCE containing\
    \ an addressFamily\n   and ipAddressChoice element.\n"
- title: 2.2.3.3.  Element addressFamily
  contents:
  - "2.2.3.3.  Element addressFamily\n   The addressFamily element is an OCTET STRING\
    \ containing a two-octet\n   Address Family Identifier (AFI), in network byte\
    \ order, optionally\n   followed by a one-octet Subsequent Address Family Identifier\
    \ (SAFI).\n   AFIs and SAFIs are specified in [IANA-AFI] and [IANA-SAFI],\n  \
    \ respectively.\n   If no authorization is being granted for a particular AFI\
    \ and\n   optional SAFI, then there MUST NOT be an IPAddressFamily member for\n\
    \   that AFI/SAFI in the IPAddrBlocks SEQUENCE.\n   There MUST be only one IPAddressFamily\
    \ SEQUENCE per unique\n   combination of AFI and SAFI.  Each SEQUENCE MUST be\
    \ ordered by\n   ascending addressFamily values (treating the octets as unsigned\n\
    \   quantities).  An addressFamily without a SAFI MUST precede one that\n   contains\
    \ an SAFI.  When both IPv4 and IPv6 addresses are specified,\n   the IPv4 addresses\
    \ MUST precede the IPv6 addresses (since the IPv4\n   AFI of 0001 is less than\
    \ the IPv6 AFI of 0002).\n"
- title: 2.2.3.4.  Element ipAddressChoice and Type IPAddressChoice
  contents:
  - "2.2.3.4.  Element ipAddressChoice and Type IPAddressChoice\n   The ipAddressChoice\
    \ element is of type IPAddressChoice.  The\n   IPAddressChoice type is a CHOICE\
    \ of either an inherit or\n   addressesOrRanges element.\n"
- title: 2.2.3.5.  Element inherit
  contents:
  - "2.2.3.5.  Element inherit\n   If the IPAddressChoice CHOICE contains the inherit\
    \ element, then the\n   set of authorized IP addresses for the specified AFI and\
    \ optional\n   SAFI is taken from the issuer's certificate, or from the issuer's\n\
    \   issuer's certificate, recursively, until a certificate containing an\n   IPAddressChoice\
    \ containing an addressesOrRanges element is located.\n"
- title: 2.2.3.6.  Element addressesOrRanges
  contents:
  - "2.2.3.6.  Element addressesOrRanges\n   The addressesOrRanges element is a SEQUENCE\
    \ OF IPAddressOrRange\n   types.  The addressPrefix and addressRange elements\
    \ MUST be sorted\n   using the binary representation of:\n      <lowest IP address\
    \ in range> | <prefix length>\n   where \"|\" represents concatenation.  Note\
    \ that the octets in this\n   representation (a.b.c.d | length for IPv4 or s:t:u:v:w:x:y:z\
    \ | length\n   for IPv6) are not the octets that are in the DER-encoded BIT STRING\n\
    \   value.  For example, given two addressPrefix:\n      IP addr | length  DER\
    \ encoding\n      ----------------  ------------------------\n               \
    \         Type Len  Unused Bits...\n      10.32.0.0 | 12     03   03    04   0a\
    \ 20\n      10.64.0.0 | 16     03   03    00   0a 40\n   the prefix 10.32.0.0/12\
    \ MUST come before the prefix 10.64.0.0/16\n   since 32 is less than 64; whereas\
    \ if one were to sort by the DER BIT\n   STRINGs, the order would be reversed\
    \ as the unused bits octet would\n   sort in the opposite order.  Any pair of\
    \ IPAddressOrRange choices in\n   an extension MUST NOT overlap each other.  Any\
    \ contiguous address\n   prefixes or ranges MUST be combined into a single range\
    \ or, whenever\n   possible, a single prefix.\n"
- title: 2.2.3.7.  Type IPAddressOrRange
  contents:
  - "2.2.3.7.  Type IPAddressOrRange\n   The IPAddressOrRange type is a CHOICE of\
    \ either an addressPrefix (an\n   IP prefix or address) or an addressRange (an\
    \ IP address range)\n   element.\n   This specification requires that any range\
    \ of addresses that can be\n   encoded as a prefix MUST be encoded using an IPAddress\
    \ element (a BIT\n   STRING), and any range that cannot be encoded as a prefix\
    \ MUST be\n   encoded using an IPAddressRange (a SEQUENCE containing two BIT\n\
    \   STRINGs).  The following pseudo code illustrates how to select the\n   encoding\
    \ of a given range of addresses.\n         LET  N = the number of matching most-significant\
    \ bits in the\n                  lowest and highest addresses of the range\n \
    \        IF   all the remaining bits in the lowest address are zero-bits\n   \
    \       AND all the remaining bits in the highest address are one-bits\n     \
    \    THEN the range MUST be encoded as an N-bit IPAddress\n         ELSE the range\
    \ MUST be encoded as an IPAddressRange\n"
- title: 2.2.3.8.  Element addressPrefix and Type IPAddress
  contents:
  - "2.2.3.8.  Element addressPrefix and Type IPAddress\n   The addressPrefix element\
    \ is an IPAddress type.  The IPAddress type\n   defines a range of IP addresses\
    \ in which the most-significant (left-\n   most) N bits of the address remain\
    \ constant, while the remaining bits\n   (32 - N bits for IPv4, or 128 - N bits\
    \ for IPv6) may be either zero\n   or one.  For example, the IPv4 prefix 10.64/12\
    \ corresponds to the\n   addresses 10.64.0.0 to 10.79.255.255, while 10.64/11\
    \ corresponds to\n   10.64.0.0 to 10.95.255.255.  The IPv6 prefix 2001:0:2/48\
    \ represents\n   addresses 2001:0:2:: to 2001:0:2:ffff:ffff:ffff:ffff:ffff.\n\
    \   An IP address prefix is encoded as a BIT STRING.  The DER encoding of\n  \
    \ a BIT STRING uses the initial octet of the string to specify how many\n   of\
    \ the least-significant bits of the last subsequent octet are\n   unused.  The\
    \ DER encoding specifies that these unused bits MUST be\n   set to zero-bits.\n\
    \   Example:\n             128.0.0.0       = 1000 0000.0000 0000.0000 0000.0000\
    \ 0000\n          to 143.255 255 255 = 1000 1111.1111 1111.1111 1111.1111 1111\n\
    \        bit string to encode = 1000\n              Type Len  Unused Bits ...\n\
    \   Encoding = 0x03 0x02  0x04  0x80\n"
- title: 2.2.3.9.  Element addressRange and Type IPAddressRange
  contents:
  - "2.2.3.9.  Element addressRange and Type IPAddressRange\n   The addressRange element\
    \ is of type IPAddressRange.  The\n   IPAddressRange type consists of a SEQUENCE\
    \ containing a minimum\n   (element min) and maximum (element max) IP address.\
    \  Each IP address\n   is encoded as a BIT STRING.  The semantic interpretation\
    \ of the\n   minimum address in an IPAddressRange is that all the unspecified\
    \ bits\n   (for the full length of the IP address) are zero-bits.  The semantic\n\
    \   interpretation of the maximum address is that all the unspecified\n   bits\
    \ are one-bits.  The BIT STRING for the minimum address results\n   from removing\
    \ all the least-significant zero-bits from the minimum\n   address.  The BIT STRING\
    \ for the maximum address results from\n   removing all the least-significant\
    \ one-bits from the maximum address.\n   Example:\n             129.64.0.0   \
    \    = 1000 0001.0100 0000.0000 0000.0000 0000\n          to 143.255.255.255 \
    \ = 1000 1111.1111 1111.1111 1111.1111 1111\n           minimum bit string = 1000\
    \ 0001.01\n           maximum bit string = 1000\n   Encoding = SEQUENCE {\n  \
    \             Type Len  Unused Bits ...\n        min    0x03 0x03  0x06  0x81\
    \      0x40\n        max    0x03 0x02  0x04  0x80\n              }\n   To simplify\
    \ the comparison of IP address blocks when performing\n   certification path validation,\
    \ a maximum IP address MUST contain at\n   least one bit whose value is 1, i.e.,\
    \ the subsequent octets may not\n   be omitted nor all zero.\n"
- title: 2.3.  IP Address Delegation Extension Certification Path Validation
  contents:
  - "2.3.  IP Address Delegation Extension Certification Path Validation\n   Certification\
    \ path validation of a certificate containing the IP\n   address delegation extension\
    \ requires additional processing.  As each\n   certificate in a path is validated,\
    \ the IP addresses in the IP\n   address delegation extension of that certificate\
    \ MUST be subsumed by\n   IP addresses in the IP address delegation extension\
    \ in the issuer's\n   certificate.  Validation MUST fail when this is not the\
    \ case.  A\n   certificate that is a trust anchor for certification path validation\n\
    \   of certificates containing the IP address delegation extension, as\n   well\
    \ as all certificates along the path, MUST each contain the IP\n   address delegation\
    \ extension.  The initial set of allowed address\n   ranges is taken from the\
    \ trust anchor certificate.\n"
- title: 3.  Autonomous System Identifier Delegation Extension
  contents:
  - "3.  Autonomous System Identifier Delegation Extension\n   This extension conveys\
    \ the allocation of autonomous system (AS)\n   identifiers to an entity by binding\
    \ those AS identifiers to a public\n   key belonging to the entity.\n"
- title: 3.1.  Context
  contents:
  - "3.1.  Context\n   AS identifier delegation is currently managed by a hierarchy\n\
    \   nominally rooted at IANA, but managed by the RIRs.  IANA allocates AS\n  \
    \ identifiers to the RIRs, who in turn assign AS identifiers to\n   organizations\
    \ who are end entities, i.e., will not be re-allocating\n   any of their AS identifiers\
    \ to other organizations.  The AS\n   identifier delegation extension is intended\
    \ to enable verification of\n   the proper delegation of AS identifiers, i.e.,\
    \ of the authorization\n   of an entity to use these AS identifiers.  Accordingly,\
    \ it makes\n   sense to take advantage of the inherent authoritativeness of the\n\
    \   existing administrative framework for management of AS identifiers.\n   As\
    \ described in Section 1 above, this will be achieved by issuing\n   certificates\
    \ carrying the extension described in this section.  An\n   example of one use\
    \ of the information in this extension is an entity\n   using it to verify the\
    \ authorization of an organization to manage the\n   AS identified by an AS identifier\
    \ in the extension. The use of this\n   extension to represent assignment of AS\
    \ identifiers is not intended\n   to alter the procedures by which AS identifiers\
    \ are managed, or when\n   an AS should be used c.f., [RFC1930].\n"
- title: 3.2.  Specification
  contents:
  - '3.2.  Specification

    '
- title: 3.2.1.  OID
  contents:
  - "3.2.1.  OID\n   The OID for this extension is id-pe-autonomousSysIds.\n     \
    \ id-pe-autonomousSysIds  OBJECT IDENTIFIER ::= { id-pe 8 }\n   where [RFC3280]\
    \ defines:\n      id-pkix  OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n\
    \               dod(6) internet(1) security(5) mechanisms(5) pkix(7) }\n     \
    \ id-pe    OBJECT IDENTIFIER ::= { id-pkix 1 }\n"
- title: 3.2.2.  Criticality
  contents:
  - "3.2.2.  Criticality\n   This extension SHOULD be CRITICAL.  The intended use\
    \ of this\n   extension is to connote a right-to-use for the AS identifiers in\
    \ the\n   extension.  A CA marks the extension as CRITICAL to convey the notion\n\
    \   that a relying party must understand the semantics of the extension\n   to\
    \ make use of the certificate for the purpose it was issued.  Newly\n   created\
    \ applications that use certificates containing this extension\n   are expected\
    \ to recognize the extension.\n"
- title: 3.2.3.  Syntax
  contents:
  - "3.2.3.  Syntax\n   id-pe-autonomousSysIds  OBJECT IDENTIFIER ::= { id-pe 8 }\n\
    \   ASIdentifiers       ::= SEQUENCE {\n       asnum               [0] EXPLICIT\
    \ ASIdentifierChoice OPTIONAL,\n       rdi                 [1] EXPLICIT ASIdentifierChoice\
    \ OPTIONAL}\n   ASIdentifierChoice  ::= CHOICE {\n      inherit              NULL,\
    \ -- inherit from issuer --\n      asIdsOrRanges        SEQUENCE OF ASIdOrRange\
    \ }\n   ASIdOrRange         ::= CHOICE {\n       id                  ASId,\n \
    \      range               ASRange }\n   ASRange             ::= SEQUENCE {\n\
    \       min                 ASId,\n       max                 ASId }\n   ASId\
    \                ::= INTEGER\n"
- title: 3.2.3.1.  Type ASIdentifiers
  contents:
  - "3.2.3.1.  Type ASIdentifiers\n   The ASIdentifiers type is a SEQUENCE containing\
    \ one or more forms of\n   autonomous system identifiers -- AS numbers (in the\
    \ asnum element) or\n   routing domain identifiers (in the rdi element).  When\
    \ the\n   ASIdentifiers type contains multiple forms of identifiers, the asnum\n\
    \   entry MUST precede the rdi entry.  AS numbers are used by BGP, and\n   routing\
    \ domain identifiers are specified in the IDRP [RFC1142].\n"
- title: 3.2.3.2.  Elements asnum, rdi, and Type ASIdentifierChoice
  contents:
  - "3.2.3.2.  Elements asnum, rdi, and Type ASIdentifierChoice\n   The asnum and\
    \ rdi elements are both of type ASIdentifierChoice.  The\n   ASIdentifierChoice\
    \ type is a CHOICE of either the inherit or\n   asIdsOrRanges element.\n"
- title: 3.2.3.3.  Element inherit
  contents:
  - "3.2.3.3.  Element inherit\n   If the ASIdentifierChoice choice contains the inherit\
    \ element, then\n   the set of authorized AS identifiers is taken from the issuer's\n\
    \   certificate, or from the issuer's issuer's certificate, recursively,\n   until\
    \ a certificate containing an ASIdentifierChoice containing an\n   asIdsOrRanges\
    \ element is located.  If no authorization is being\n   granted for a particular\
    \ form of AS identifier, then there MUST NOT\n   be a corresponding asnum/rdi\
    \ member in the ASIdentifiers sequence.\n"
- title: 3.2.3.4.  Element asIdsOrRanges
  contents:
  - "3.2.3.4.  Element asIdsOrRanges\n   The asIdsOrRanges element is a SEQUENCE of\
    \ ASIdOrRange types.  Any\n   pair of items in the asIdsOrRanges SEQUENCE MUST\
    \ NOT overlap.  Any\n   contiguous series of AS identifiers MUST be combined into\
    \ a single\n   range whenever possible.  The AS identifiers in the asIdsOrRanges\n\
    \   element MUST be sorted by increasing numeric value.\n"
- title: 3.2.3.5.  Type ASIdOrRange
  contents:
  - "3.2.3.5.  Type ASIdOrRange\n   The ASIdOrRange type is a CHOICE of either a single\
    \ integer (ASId) or\n   a single sequence (ASRange).\n"
- title: 3.2.3.6.  Element id
  contents:
  - "3.2.3.6.  Element id\n   The id element has type ASId.\n"
- title: 3.2.3.7.  Element range
  contents:
  - "3.2.3.7.  Element range\n   The range element has type ASRange.\n"
- title: 3.2.3.8.  Type ASRange
  contents:
  - "3.2.3.8.  Type ASRange\n   The ASRange type is a SEQUENCE consisting of a min\
    \ and a max element,\n   and is used to specify a range of AS identifier values.\n"
- title: 3.2.3.9.  Elements min and max
  contents:
  - "3.2.3.9.  Elements min and max\n   The min and max elements have type ASId. \
    \ The min element is used to\n   specify the value of the minimum AS identifier\
    \ in the range, and the\n   max element specifies the value of the maximum AS\
    \ identifier in the\n   range.\n"
- title: 3.2.3.10.  Type ASId
  contents:
  - "3.2.3.10.  Type ASId\n   The ASId type is an INTEGER.\n"
- title: 3.3.  Autonomous System Identifier Delegation Extension Certification
  contents:
  - "3.3.  Autonomous System Identifier Delegation Extension Certification\n     \
    \ Path Validation\n   Certification path validation of a certificate containing\
    \ the\n   autonomous system identifier delegation extension requires additional\n\
    \   processing.  As each certificate in a path is validated, the AS\n   identifiers\
    \ in the autonomous system identifier delegation extension\n   of that certificate\
    \ MUST be subsumed by the AS identifiers in the\n   autonomous system identifier\
    \ delegation extension in the issuer's\n   certificate.  Validation MUST fail\
    \ when this is not the case.  A\n   certificate that is a trust anchor for certification\
    \ path validation\n   of certificates containing the autonomous system identifier\n\
    \   delegation extension, as well as all certificates along the path,\n   MUST\
    \ each contain the autonomous system identifier delegation\n   extension.  The\
    \ initial set of allowed AS identifiers is taken from\n   the trust anchor certificate.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This specification describes two X.509 extensions.\
    \  Since X.509\n   certificates are digitally signed, no additional integrity\
    \ service is\n   necessary.  Certificates with these extensions need not be kept\n\
    \   secret, and unrestricted and anonymous access to these certificates\n   has\
    \ no security implications.\n   However, security factors outside the scope of\
    \ this specification\n   will affect the assurance provided to certificate users.\
    \  This\n   section highlights critical issues that should be considered by\n\
    \   implementors, administrators, and users.\n   These extensions represent authorization\
    \ information, i.e., a right-\n   to-use for IP addresses or AS identifiers. \
    \ They were developed to\n   support a secure version of BGP [S-BGP], but may\
    \ be employed in other\n   contexts.  In the secure BGP context, certificates\
    \ containing these\n   extensions function as capabilities: the certificate asserts\
    \ that the\n   holder of the private key (the Subject) is authorized to use the\
    \ IP\n   addresses or AS identifiers represented in the extension(s).  As a\n\
    \   result of this capability model, the Subject field is largely\n   irrelevant\
    \ for security purposes, contrary to common PKI conventions.\n"
- title: 5.  Acknowledgments
  contents:
  - "5.  Acknowledgments\n   The authors would like to acknowledge the contributions\
    \ to this\n   specification by Charles Gardiner, Russ Housley, James Manger, and\n\
    \   Jim Schaad.\n"
- title: Appendix A -- ASN.1 Module
  contents:
  - "Appendix A -- ASN.1 Module\n   This normative appendix describes the IP address\
    \ and AS identifiers\n   extensions used by conforming PKI components in ASN.1\
    \ syntax.\n   IPAddrAndASCertExtn { iso(1) identified-organization(3) dod(6)\n\
    \            internet(1) security(5) mechanisms(5) pkix(7) mod(0)\n          \
    \  id-mod-ip-addr-and-as-ident(30) }\n       DEFINITIONS EXPLICIT TAGS ::=\n \
    \  BEGIN\n        -- Copyright (C) The Internet Society (2004). This    --\n \
    \       -- version of this ASN.1 module is part of RFC 3779;  --\n        -- see\
    \ the RFC itself for full legal notices.         --\n   -- EXPORTS ALL --\n  \
    \ IMPORTS\n   -- PKIX specific OIDs and arcs --\n       id-pe FROM PKIX1Explicit88\
    \ { iso(1) identified-organization(3)\n                  dod(6) internet(1) security(5)\
    \ mechanisms(5) pkix(7)\n                  id-mod(0) id-pkix1-explicit(18) };\n\
    \   -- IP Address Delegation Extension OID --\n   id-pe-ipAddrBlocks  OBJECT IDENTIFIER\
    \ ::= { id-pe 7 }\n   -- IP Address Delegation Extension Syntax --\n   IPAddrBlocks\
    \        ::= SEQUENCE OF IPAddressFamily\n   IPAddressFamily     ::= SEQUENCE\
    \ { -- AFI & opt SAFI --\n      addressFamily        OCTET STRING (SIZE (2..3)),\n\
    \      ipAddressChoice      IPAddressChoice }\n   IPAddressChoice     ::= CHOICE\
    \ {\n      inherit              NULL, -- inherit from issuer --\n      addressesOrRanges\
    \    SEQUENCE OF IPAddressOrRange }\n   IPAddressOrRange    ::= CHOICE {\n   \
    \   addressPrefix        IPAddress,\n      addressRange         IPAddressRange\
    \ }\n   IPAddressRange      ::= SEQUENCE {\n      min                  IPAddress,\n\
    \      max                  IPAddress }\n   IPAddress           ::= BIT STRING\n\
    \   -- Autonomous System Identifier Delegation Extension OID --\n   id-pe-autonomousSysIds\
    \  OBJECT IDENTIFIER ::= { id-pe 8 }\n   -- Autonomous System Identifier Delegation\
    \ Extension Syntax --\n   ASIdentifiers       ::= SEQUENCE {\n       asnum   \
    \            [0] ASIdentifierChoice OPTIONAL,\n       rdi                 [1]\
    \ ASIdentifierChoice OPTIONAL }\n   ASIdentifierChoice  ::= CHOICE {\n      inherit\
    \              NULL, -- inherit from issuer --\n      asIdsOrRanges        SEQUENCE\
    \ OF ASIdOrRange }\n   ASIdOrRange         ::= CHOICE {\n       id           \
    \       ASId,\n       range               ASRange }\n   ASRange             ::=\
    \ SEQUENCE {\n       min                 ASId,\n       max                 ASId\
    \ }\n   ASId                ::= INTEGER\n   END\n"
- title: Appendix B -- Examples of IP Address Delegation Extensions
  contents:
  - "Appendix B -- Examples of IP Address Delegation Extensions\n   A critical X.509\
    \ v3 certificate extension that specifies:\n   IPv4 unicast address prefixes\n\
    \       1)  10.0.32/20     i.e., 10.0.32.0 to 10.0.47.255\n       2)  10.0.64/24\
    \     i.e., 10.0.64.0 to 10.0.64.255\n       3)  10.1/16        i.e., 10.1.0.0\
    \  to 10.1.255.255\n       4)  10.2.48/20     i.e., 10.2.48.0 to 10.2.63.255\n\
    \       5)  10.2.64/24     i.e., 10.2.64.0 to 10.2.64.255\n       6)  10.3/16\
    \        i.e., 10.3.0.0  to 10.3.255.255, and\n       7)  inherits all IPv6 addresses\
    \ from the issuer's certificate\n   would be (in hexadecimal):\n   30 46     \
    \                  Extension {\n      06 08 2b06010505070107     extnID      \
    \  1.3.6.1.5.5.7.1.7\n      01 01 ff                   critical\n      04 37 \
    \                     extnValue {\n         30 35                     IPAddrBlocks\
    \ {\n            30 2b                    IPAddressFamily {\n               04\
    \ 03 0001  01          addressFamily: IPv4 Unicast\n                         \
    \              IPAddressChoice\n               30 24                     addressesOrRanges\
    \ {\n                                           IPAddressOrRange\n           \
    \       03 04 04 0a0020            addressPrefix 10.0.32/20\n                \
    \                           IPAddressOrRange\n                  03 04 00 0a0040\
    \            addressPrefix 10.0.64/24\n                                      \
    \     IPAddressOrRange\n                  03 03 00 0a01              addressPrefix\
    \    10.1/16\n                                           IPAddressOrRange\n  \
    \                30 0c                      addressRange {\n                 \
    \    03 04 04 0a0230           min        10.2.48.0\n                     03 04\
    \ 00 0a0240           max        10.2.64.255\n                               \
    \              } -- addressRange\n                                           IPAddressOrRange\n\
    \                  03 03 00 0a03              addressPrefix    10.3/16\n     \
    \                                    } -- addressesOrRanges\n                \
    \                     } -- IPAddressFamily\n            30 06                \
    \    IPAddressFamily {\n               04 02 0002              addressFamily:\
    \ IPv6\n                                       IPAddressChoice\n             \
    \  05 00                     inherit from issuer\n                           \
    \          } -- IPAddressFamily\n                                   } -- IPAddrBlocks\n\
    \                                 } -- extnValue\n                           \
    \    } -- Extension\n   This example illustrates how the prefixes and ranges are\
    \ sorted.\n   +  Prefix 1 MUST precede prefix 2, even though the number of unused\n\
    \      bits (4) in prefix 1 is larger than the number of unused bits (0)\n   \
    \   in prefix 2.\n   +  Prefix 2 MUST precede prefix 3 even though the number\
    \ of octets\n      (4) in the BIT STRING encoding of prefix 2 is larger than the\n\
    \      number of octets (3) in the BIT STRING encoding of prefix 3.\n   +  Prefixes\
    \ 4 and 5 are adjacent (representing the range of addresses\n      from 10.2.48.0\
    \ to 10.2.64.255), so MUST be combined into a range\n      (since the range cannot\
    \ be encoded by a single prefix).\n   +  Note that the six trailing zero bits\
    \ in the max element of the\n      range are significant to the semantic interpretation\
    \ of the value\n      (as all unused bits are interpreted to be 1's, not 0's).\
    \  The four\n      trailing zero bits in the min element are not significant and\
    \ MUST\n      be removed (thus the (4) unused bits in the encoding of the min\n\
    \      element).  (DER encoding requires that any unused bits in the last\n  \
    \    subsequent octet MUST be set to zero.)\n   +  The range formed by prefixes\
    \ 4 and 5 MUST precede prefix 6 even\n      though the SEQUENCE tag for a range\
    \ (30) is larger than the tag\n      for the BIT STRING (03) used to encode prefix\
    \ 6.\n   +  The IPv4 information MUST precede the IPv6 information since the\n\
    \      address family identifier for IPv4 (0001) is less than the\n      identifier\
    \ for IPv6 (0002).\n   An extension specifying the IPv6 prefix 2001:0:2/48 and\
    \ the IPv4\n   prefixes 10/8 and 172.16/12, and which inherits all IPv4 multicast\n\
    \   addresses from the issuer's certificate would be (in hexadecimal):\n   30\
    \ 3d                       Extension {\n      06 08 2b06010505070107     extnID\
    \        1.3.6.1.5.5.7.1.7\n      01 01 ff                   critical\n      04\
    \ 2e                      extnValue {\n         30 2c                     IPAddrBlocks\
    \ {\n            30 10                    IPAddressFamily {\n               04\
    \ 03 0001 01           addressFamily: IPv4 Unicast\n                         \
    \              IPAddressChoice\n               30 09                     addressesOrRanges\
    \ {\n                                           IPAddressOrRange\n           \
    \       03 02 00 0a                addressPrefix    10/8\n                   \
    \                        IPAddressOrRange\n                  03 03 04 b010   \
    \           addressPrefix    172.16/12\n                                     \
    \    } -- addressesOrRanges\n                                     } -- IPAddressFamily\n\
    \            30 07                    IPAddressFamily {\n               04 03\
    \ 0001 02           addressFamily: IPv4 Multicast\n                          \
    \             IPAddressChoice\n               05 00                     inherit\
    \ from issuer\n                                     } -- IPAddressFamily\n   \
    \         30 0f                    IPAddressFamily {\n               04 02 0002\
    \              addressFamily: IPv6\n                                       IPAddressChoice\n\
    \               30 09                     addressesOrRanges {\n              \
    \                             IPAddressOrRange\n                  03 07 00 200100000002\
    \      addressPrefix   2001:0:2/47\n                                         }\
    \ -- addressesOrRanges\n                                     } -- IPAddressFamily\n\
    \                                   } -- IPAddrBlocks\n                      \
    \           } -- extnValue\n                                  } -- Extension\n"
- title: Appendix C -- Example of an AS Identifier Delegation Extension
  contents:
  - "Appendix C -- Example of an AS Identifier Delegation Extension\n   An extension\
    \ that specifies AS numbers 135, 3000 to 3999, and 5001,\n   and which inherits\
    \ all routing domain identifiers from the issuer's\n   certificate would be (in\
    \ hexadecimal):\n   30 2b                       Extension {\n      06 08 2b06010505070108\
    \     extnID        1.3.6.1.5.5.7.1.8\n      01 01 ff                   critical\n\
    \      04 1c                      extnValue {\n         30 1a                \
    \     ASIdentifiers {\n            a0 14                    asnum\n          \
    \                             ASIdentifierChoice\n               30 12       \
    \              asIdsOrRanges {\n                                           ASIdOrRange\n\
    \                  02 02 0087                 ASId\n                         \
    \                  ASIdOrRange\n                  30 08                      ASRange\
    \ {\n                     02 02 0bb8                min\n                    \
    \ 02 02 0f9f                max\n                                            \
    \ } -- ASRange\n                                           ASIdOrRange\n     \
    \             02 02 1389                 ASId\n                              \
    \           } -- asIdsOrRanges\n                                     } -- asnum\n\
    \            a1 02                    rdi {\n                                \
    \       ASIdentifierChoice\n               05 00                     inherit from\
    \ issuer\n                                     } -- rdi\n                    \
    \               } -- ASIdentifiers\n                                 } -- extnValue\n\
    \                               } -- Extension\n"
- title: Appendix D -- Use of X.509 Attribute Certificates
  contents:
  - "Appendix D -- Use of X.509 Attribute Certificates\n   This appendix discusses\
    \ issues arising from a proposal to use\n   attribute certificates (ACs, as specified\
    \ in [RFC3281]) to convey,\n   from the Regional Internet Registries (RIRs) to\
    \ the end-user\n   organizations, the \"right-to-use\" for IP address blocks or\
    \ AS\n   identifiers.\n   The two resources, AS identifiers and IP address blocks,\
    \ are\n   currently managed differently.  All organizations with the right-to-\n\
    \   use for an AS identifier receive the authorization directly from an\n   RIR.\
    \  Organizations with a right-to-use for an IP address block\n   receive the authorization\
    \ either directly from an RIR, or indirectly,\n   e.g., from a down stream service\
    \ provider, who might receive its\n   authorization from an Internet service provider,\
    \ who in turn gets its\n   authorization from a RIR.  Note that AS identifiers\
    \ might be sub-\n   allocated in the future, so the mechanisms used should not\
    \ rely upon\n   a three level hierarchy.\n   In section 1 of RFC 3281, two reasons\
    \ are given for why the use of\n   ACs might be preferable to the use of public\
    \ key certificates (PKCs)\n   with extensions that convey the authorization information:\n\
    \      \"Authorization information may be placed in a PKC extension or\n     \
    \ placed in a separate attribute certificate (AC).  The placement of\n      authorization\
    \ information in PKCs is usually undesirable for two\n      reasons.  First, authorization\
    \ information often does not have the\n      same lifetime as the binding of the\
    \ identity and the public key.\n      When authorization information is placed\
    \ in a PKC extension, the\n      general result is the shortening of the PKC useful\
    \ lifetime.\n      Second, the PKC issuer is not usually authoritative for the\n\
    \      authorization information.  This results in additional steps for\n    \
    \  the PKC issuer to obtain authorization information from the\n      authoritative\
    \ source.\"\n      \"For these reasons, it is often better to separate authorization\n\
    \      information from the PKC.  Yet, authorization information also\n      needs\
    \ to be bound to an identity.  An AC provides this binding; it\n      is simply\
    \ a digitally signed (or certified) identity and set of\n      attributes.\"\n\
    \   In the case of the IP address and AS identifier authorizations, these\n  \
    \ reasons do not apply.  First, the public key certificates are issued\n   exclusively\
    \ for authorization, so the certificate lifetime\n   corresponds exactly to the\
    \ authorization lifetime, which is often\n   tied to a contractual relationship\
    \ between the issuer and entity\n   receiving the authorization.  The Subject\
    \ and Issuer names are only\n   used for chaining during certification path validation,\
    \ and the names\n   need not correspond to any physical entity.  The Subject name\
    \ in the\n   PKCs may actually be randomly assigned by the issuing CA, allowing\n\
    \   the resource holder limited anonymity.  Second, the certificate\n   hierarchy\
    \ is constructed so that the certificate issuer is\n   authoritative for the authorization\
    \ information.\n   Thus the two points in the first cited paragraph above are\
    \ not true\n   in the case of AS number and IP address block allocations.  The\
    \ point\n   of the second cited paragraph is also not applicable as the resources\n\
    \   are not being bound to an identity but to the holder of the private\n   key\
    \ corresponding to the public key in the PKC.\n   RFC 3281 specifies several requirements\
    \ that a conformant Attribute\n   Certificate must meet.  In relation to S-BGP,\
    \ the more-significant\n   requirements are:\n   1  from section 1: \"this specification\
    \ does NOT RECOMMEND the use of\n      AC chains.  Other (future) specifications\
    \ may address the use of\n      AC chains.\"\n      Allocation from IANA to RIRs\
    \ to ISPs to DSPs and assignment to end\n      organizations would require the\
    \ use of chains, at least for IP\n      address blocks.  A description of how\
    \ the superior's AC should be\n      located and how it should be processed would\
    \ have to be provided.\n      Readers of this document are encouraged to propose\
    \ ways the\n      chaining might be avoided.\n   2  from section 4.2.9: \"section\
    \ 4.3 defines the extensions that MAY\n      be used with this profile, and whether\
    \ or not they may be marked\n      critical.  If any other critical extension\
    \ is used, the AC does\n      not conform to this profile.  However, if any other\
    \ non-critical\n      extension is used, the AC does conform to this profile.\"\
    \n      This means that the delegation extensions defined in this\n      specification,\
    \ which are critical, could not be simply placed into\n      an AC.  They could\
    \ be used if not marked critical, but the\n      intended use requires that the\
    \ extensions be critical so that the\n      certificates containing them cannot\
    \ be used as identity\n      certificates by an unsuspecting application.\n  \
    \ 3  from section 4.5: \"an AC issuer, MUST NOT also be a PKC issuer.\n      That\
    \ is, an AC issuer cannot be a CA as well.\"\n      This means that for each AC\
    \ issuer there would need to be a\n      separate CA to issue the PKC that contains\
    \ the public key of the\n      AC holder.  The AC issuer cannot issue the PKC\
    \ of the holder, and\n      the PKC issuer cannot sign the AC.  Thus, each entity\
    \ in the PKI\n      would need to operate an AC issuer in addition to its CA.\
    \  There\n      would be twice as many certificate issuers and CRLs to process\
    \ to\n      support Attribute certificates than are needed if PKCs are used.\n\
    \      The possibility of mis-alignment also arises when there are two\n     \
    \ issuers issuing certificates for a single purpose.\n      The AC model of RFC\
    \ 3281 implies that the AC holder presents the\n      AC to the AC verifier when\
    \ the holder wants to substantiate an\n      attribute or authorization.  The\
    \ intended usage for the extensions\n      defined herein does not have a direct\
    \ interaction between an AC\n      verifier (a NOC) and the AC issuers (all RIRs\
    \ and NOCs).  Given a\n      signature on a claimed right-to-use object, the \"\
    AC verifier\" can\n      locate the AC holder's PKC, but there is no direct way\
    \ to locate\n      the Subject's AC(s).\n   4  from section 5: \"4.  The AC issuer\
    \ MUST be directly trusted as an\n      AC issuer (by configuration or otherwise).\"\
    \n      This is not true in the case of a right-to-use for an IP address\n   \
    \   block, which is allocated through a hierarchy.  Certification path\n     \
    \ validation of the AC will require chaining up through the\n      delegation\
    \ hierarchy.  Having to configure each relying party\n      (NOC) to \"trust\"\
    \ every other NOC does not scale, and such \"trust\"\n      has resulted in failures\
    \ that the proposed security mechanisms are\n      designed to prevent.  A single\
    \ PKI with a trusted root is used,\n      not thousands of individually trusted\
    \ per-ISP AC issuers.\n      The amount of work that would be required to properly\
    \ validate an\n      AC is larger than for the mechanism that places the certificate\n\
    \      extensions defined in this document in the PKCs.  There would be\n    \
    \  twice as many certificates to be validated, in addition to the\n      ACs.\
    \  There could be a considerable increase in the management\n      burden required\
    \ to support ACs.\n"
- title: References
  contents:
  - 'References

    '
- title: Normative References
  contents:
  - "Normative References\n   [IANA-AFI]  http://www.iana.org/assignments/address-family-numbers.\n\
    \   [IANA-SAFI] http://www.iana.org/assignments/safi-namespace.\n   [RFC2119]\
    \   Bradner, S., \"Key words for use in RFCs to Indicate\n               Requirement\
    \ Level\", BCP 14, RFC 2119, March 1997.\n   [RFC3280]   Housley, R., Polk, W.,\
    \ Ford, W. and D. Solo, \"Internet\n               X.509 Public Key Infrastructure\
    \ Certificate and\n               Certificate Revocation List (CRL) Profile\"\
    , RFC 3280,\n               April 2002.\n   [X.690]     ITU-T Recommendation X.690\
    \ (1997) | ISO/IEC 8825-1:1998,\n               \"Information Technology - ASN.1\
    \ Encoding Rules:\n               Specification of Basic Encoding Rules (BER),\
    \ Canonical\n               Encoding Rules (CER) and Distinguished Encoding Rules\n\
    \               (DER)\".\n"
- title: Informational References
  contents:
  - "Informational References\n   [RFC791]    Postel, J., \"Internet Protocol -- DARPA\
    \ Internet Program\n               Protocol Specification\", RFC 791, September\
    \ 1981.\n   [RFC1142]   D. Oran, Ed., \"OSI IS-IS Intra-domain Routing Protocol\"\
    ,\n               RFC 1142, February 1990.\n   [RFC1771]   Rekhter, Y. and T.\
    \ Li, Eds., \"A Border Gateway Protocol 4\n               (BGP-4)\", RFC 1771,\
    \ March 1995.\n   [RFC1930]   Hawkinson, J. and T. Bates, \"Guidelines for creation,\n\
    \               selection, and registration of an Autonomous System\n        \
    \       (AS)\", BCP 6, RFC 1930, March 1996.\n   [RFC2050]   Hubbard, K., Kosters,\
    \ M., Conrad, D., Karrenberg, D. and\n               J. Postel, \"Internet Registry\
    \ IP Allocation Guidelines\",\n               BCP 12, RFC 2050, November 1996.\n\
    \   [RFC3513]   Hinden, R. and S. Deering, \"Internet Protocol Version 6\n   \
    \            (IPv6) Addressing Architecture\", RFC 3513, April 2003.\n   [RFC3281]\
    \   Farrell, S. and R. Housley, \"An Internet Attribute\n               Certificate\
    \ Profile for Authorization\", RFC 3281, April\n               2002.\n   [S-BGP]\
    \     S. Kent, C. Lynn, and K. Seo, \"Secure Border Gateway\n               Protocol\
    \ (S-BGP),\" IEEE JSAC Special Issue on Network\n               Security, April\
    \ 2000.\n"
- title: Authors' Address
  contents:
  - "Authors' Address\n   Charles Lynn\n   BBN Technologies\n   10 Moulton St.\n \
    \  Cambridge, MA 02138\n   USA\n   Phone: +1 (617) 873-3367\n   EMail: CLynn@BBN.Com\n\
    \   Stephen Kent\n   BBN Technologies\n   10 Moulton St.\n   Cambridge, MA 02138\n\
    \   USA\n   Phone: +1 (617) 873-3988\n   EMail: Kent@BBN.Com\n   Karen Seo\n \
    \  BBN Technologies\n   10 Moulton St.\n   Cambridge, MA 02138\n   USA\n   Phone:\
    \ +1 (617) 873-3152\n   EMail: KSeo@BBN.Com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This\
    \ document is subject\n   to the rights, licenses and restrictions contained in\
    \ BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
