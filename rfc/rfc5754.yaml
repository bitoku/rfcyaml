- contents:
  - '        Using SHA2 Algorithms with Cryptographic Message Syntax

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes the conventions for using the Secure Hash\n
    \  Algorithm (SHA) message digest algorithms (SHA-224, SHA-256, SHA-384,\n   SHA-512)
    with the Cryptographic Message Syntax (CMS).  It also\n   describes the conventions
    for using these algorithms with the CMS and\n   the Digital Signature Algorithm
    (DSA), Rivest Shamir Adleman (RSA),\n   and Elliptic Curve DSA (ECDSA) signature
    algorithms.  Further, it\n   provides SMIMECapabilities attribute values for each
    algorithm.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5754.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Conventions Used in This Document ..........................3\n   2.
    Message Digest Algorithms .......................................3\n      2.1.
    SHA-224 ....................................................4\n      2.2. SHA-256
    ....................................................5\n      2.3. SHA-384 ....................................................5\n
    \     2.4. SHA-512 ....................................................5\n   3.
    Signature Algorithms ............................................6\n      3.1.
    DSA ........................................................6\n      3.2. RSA
    ........................................................7\n      3.3. ECDSA ......................................................8\n
    \  4. Security Considerations .........................................9\n   5.
    References ......................................................9\n      5.1.
    Normative References .......................................9\n      5.2. Informative
    References ....................................10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies the algorithm identifiers and specifies\n
    \  parameters for the message digest algorithms SHA-224, SHA-256,\n   SHA-384,
    and SHA-512 for use with the Cryptographic Message Syntax\n   (CMS) [RFC5652].
    \ The message digest algorithms are defined in [SHS]\n   and reference code is
    provided in [RFC4634].\n   This document also specifies the algorithm identifiers
    and parameters\n   for use of SHA-224, SHA-256, SHA-384, and SHA-512 with DSA
    [DSS], RSA\n   (RSASSA-PKCS1-v1_5) [RFC3447], and ECDSA [DSS].\n   This document
    does not define new identifiers; they are taken from\n   [RFC3874], [RFC4055],
    and [RFC5758].  Additionally, the parameters\n   follow the conventions specified
    therein.  Therefore, there is no\n   Abstract Syntax Notation One (ASN.1) module
    included in this\n   document.\n   Note that [RFC4231] specifies the conventions
    for the message\n   authentication code (MAC) algorithms: Hashed MAC (HMAC) with
    SHA-224,\n   HMAC with SHA-256, HMAC with SHA-384, and HMAC with SHA-512.\n   In
    the CMS, the various algorithm identifiers use the\n   AlgorithmIdentifier syntax,
    which is included here for convenience:\n      AlgorithmIdentifier  ::=  SEQUENCE
    \ {\n        algorithm   OBJECT IDENTIFIER,\n        parameters  ANY DEFINED BY
    algorithm OPTIONAL  }\n   This document also specifies the SMIMECapabilities attribute
    values\n   [RFC5751] for each algorithm.  The values provided are for the\n   SMIMECapability
    field, which is included here for convenience:\n      SMIMECapability ::= SEQUENCE
    {\n        capabilityID  OBJECT IDENTIFIER,\n        parameters    ANY DEFINED
    BY capabilityID OPTIONAL }\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in [RFC2119].\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Message Digest Algorithms\n   Digest algorithm identifiers are located in
    the SignedData\n   digestAlgorithms field, the SignerInfo digestAlgorithm field,
    the\n   DigestedData digestAlgorithm field, and the AuthenticatedData\n   digestAlgorithm
    field.  The object identifiers are taken from\n   [RFC4055].\n   Digest values
    are located in the DigestedData digest field and the\n   Message Digest authenticated
    attribute.  In addition, digest values\n   are input to signature algorithms.\n
    \  The digest algorithm identifiers use the AlgorithmIdentifier syntax\n   elaborated
    upon in Section 1.\n   The algorithm field and SMIMECapabilities attribute are
    discussed in\n   Sections 2.1-2.4 for each message digest algorithm.  Section
    3\n   provides some signatures that use SHA2 algorithms.  Consult the\n   signature
    algorithm definitions for the procedures to compute the\n   digest values (i.e.,
    DigestInfo).\n   The AlgorithmIdentifier parameters field is OPTIONAL.\n   Implementations
    MUST accept SHA2 AlgorithmIdentifiers with absent\n   parameters.  Implementations
    MUST accept SHA2 AlgorithmIdentifiers\n   with NULL parameters.  Implementations
    MUST generate SHA2\n   AlgorithmIdentifiers with absent parameters.\n   NOTE:
    There are two possible encodings for the AlgorithmIdentifier\n   parameters field
    associated with these object identifiers.  The two\n   alternatives arise from
    the loss of the OPTIONAL associated with the\n   algorithm identifier parameters
    when the 1988 syntax for\n   AlgorithmIdentifier was translated into the 1997
    syntax.  Later, the\n   OPTIONAL was recovered via a defect report, but by then
    many people\n   thought that algorithm parameters were mandatory.  Because of
    this\n   history, some implementations encode parameters as a NULL element\n   while
    others omit them entirely.  The correct encoding is to omit the\n   parameters
    field; however, when some uses of these algorithms were\n   defined, it was done
    using the NULL parameters rather than absent\n   parameters.  For example, PKCS#1
    [RFC3447] requires that the padding\n   used for RSA signatures (EMSA-PKCS1-v1_5)
    MUST use SHA2\n   AlgorithmIdentifiers with NULL parameters (to clarify, the\n
    \  requirement \"MUST generate SHA2 AlgorithmIdentifiers with absent\n   parameters\"
    in the previous paragraph does not apply to this\n   padding).\n"
  - contents:
    - "2.1.  SHA-224\n   The SHA-224 message digest algorithm is defined in [SHS].
      \ The\n   algorithm identifier for SHA-224 is:\n     id-sha224 OBJECT IDENTIFIER
      ::= {\n       joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n
      \      csor(3) nistalgorithm(4) hashalgs(2) 4 }\n   The parameters are as specified
      in the beginning of Section 2.\n   The SMIMECapabilities attribute value indicates
      support for SHA-224\n   in a SEQUENCE with the capabilityID field containing
      the object\n   identifier id-sha224 with absent parameters.  The DER encoding
      for\n   this SMIMECapability is:\n      id-sha224: 30 0b 06 09 60 86 48 01 65
      03 04 02 04\n"
    title: 2.1.  SHA-224
  - contents:
    - "2.2.  SHA-256\n   The SHA-256 message digest algorithm is defined in [SHS].
      \ The\n   algorithm identifier for SHA-256 is:\n      id-sha256 OBJECT IDENTIFIER
      ::= {\n        joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n
      \       csor(3) nistalgorithm(4) hashalgs(2) 1 }\n   The parameters are as specified
      in the beginning of Section 2.\n   The SMIMECapabilities attribute value indicates
      support for SHA-256\n   in a SEQUENCE with the capabilityID field containing
      the object\n   identifier id-sha256 with absent parameters.  The DER encoding
      for\n   this SMIMECapability value is:\n      id-sha256: 30 0b 06 09 60 86 48
      01 65 03 04 02 01\n"
    title: 2.2.  SHA-256
  - contents:
    - "2.3.  SHA-384\n   The SHA-384 message digest algorithm is defined in [SHS].
      \ The\n   algorithm identifier for SHA-384 is:\n      id-sha384 OBJECT IDENTIFIER
      ::= {\n        joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n
      \       csor(3) nistalgorithm(4) hashalgs(2) 2 }\n   The parameters are as specified
      in the beginning of Section 2.\n   The SMIMECapabilities attribute value indicates
      support for SHA-384\n   in a SEQUENCE with the capabilityID field containing
      the object\n   identifier id-sha384 with absent parameters.  The DER encoding
      for\n   this SMIMECapability value is:\n      id-sha384: 30 0b 06 09 60 86 48
      01 65 03 04 02 02\n"
    title: 2.3.  SHA-384
  - contents:
    - "2.4.  SHA-512\n   The SHA-512 message digest algorithm is defined in [SHS].
      \ The\n   algorithm identifier for SHA-512 is:\n      id-sha512 OBJECT IDENTIFIER
      ::= {\n        joint-iso-itu-t(2) country(16) us(840) organization(1) gov(101)\n
      \       csor(3) nistalgorithm(4) hashalgs(2) 3 }\n   The parameters are as specified
      in the beginning of Section 2.\n   The SMIMECapabilities attribute value indicates
      support for SHA-384\n   in a SEQUENCE with the capabilityID field containing
      the object\n   identifier id-sha384 with absent parameters.  The DER encoding
      for\n   this SMIMECapability value is:\n      id-sha512: 30 0b 06 09 60 86 48
      01 65 03 04 02 03\n"
    title: 2.4.  SHA-512
  title: 2.  Message Digest Algorithms
- contents:
  - "3.  Signature Algorithms\n   This section specifies the conventions employed
    by CMS\n   implementations that support DSA, RSA, and ECDSA with SHA2\n   algorithms.\n
    \  Signature algorithm identifiers are located in the SignerInfo\n   signatureAlgorithm
    field of SignedData.  Also, signature algorithm\n   identifiers are located in
    the SignerInfo signatureAlgorithm field of\n   countersignature attributes.\n
    \  Signature values are located in the SignerInfo signature field of\n   SignedData.
    \ Also, signature values are located in the SignerInfo\n   signature field of
    countersignature attributes.\n"
  - contents:
    - "3.1.  DSA\n   [RFC3370], Section 3.1, specifies the conventions for DSA with
      SHA-1\n   public key algorithm identifiers, parameters, public keys, and\n   signature
      values.  DSA with SHA2 algorithms uses the same conventions\n   for these public
      key algorithm identifiers, parameters, public keys,\n   and signature values.
      \ DSA MAY be used with SHA-224 and SHA-256.  The\n   object identifiers are
      taken from [RFC5758].\n   DSA has not been specified with SHA-384 and SHA-512.
      \ SHA-384 and\n   SHA-512 are not supported because the maximum bit length of
      p\n   (specified as L) is 3072 for DSA.  For consistent cryptographic\n   strength,
      SHA-384 would be used with DSA where L is 7680, and SHA-512\n   would be used
      with DSA where L is 15360.\n   The algorithm identifier for DSA with SHA-224
      signature values is:\n      id-dsa-with-sha224 OBJECT IDENTIFIER ::=  {\n        joint-iso-ccitt(2)
      country(16) us(840) organization(1) gov(101)\n        csor(3) algorithms(4)
      id-dsa-with-sha2(3) 1 }\n   The algorithm identifier for DSA with SHA-256 signature
      values is:\n      id-dsa-with-sha256 OBJECT IDENTIFIER ::=  {\n        joint-iso-ccitt(2)
      country(16) us(840) organization(1) gov(101)\n        csor(3) algorithms(4)
      id-dsa-with-sha2(3) 2 }\n   When either of these algorithm identifiers is used,
      the\n   AlgorithmIdentifier parameters field MUST be absent.\n   The SMIMECapabilities
      attribute value indicates support for one of\n   the DSA signature algorithms
      in a SEQUENCE with the capabilityID\n   field containing the object identifier
      id-dsa-with-sha* (where * is\n   224 or 256) with absent parameters.  The DER
      encodings for these\n   SMIMECapability values are:\n      id-dsa-with-sha224:
      30 0b 06 09 60 86 48 01 65 03 04 03 01\n      id-dsa-with-sha256: 30 0b 06 09
      60 86 48 01 65 03 04 03 02\n"
    title: 3.1.  DSA
  - contents:
    - "3.2.  RSA\n   [RFC3370], Section 3.2, specifies the conventions for RSA with
      SHA-1\n   (RSASSA-PKCS1-v1_5) public key algorithm identifiers, parameters,\n
      \  public keys, and signature values.  RSA with SHA2 algorithms uses the\n   same
      conventions for these public key algorithm identifiers,\n   parameters, public
      keys, and signature values.  RSA\n   (RSASSA-PKCS1-v1_5) [RFC3447] MAY be used
      with SHA-224, SHA-256,\n   SHA-384, or SHA-512.  The object identifiers are
      taken from\n   [RFC4055].\n   The object identifier for RSA with SHA-224 signature
      values is:\n      sha224WithRSAEncryption OBJECT IDENTIFIER ::= { iso(1)\n        member-body(2)
      us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 14 }\n   The object identifier for
      RSA with SHA-256 signature values is:\n      sha256WithRSAEncryption  OBJECT
      IDENTIFIER  ::=  { iso(1)\n        member-body(2) us(840) rsadsi(113549) pkcs(1)
      pkcs-1(1) 11 }\n   The object identifier for RSA with SHA-384 signature values
      is:\n      sha384WithRSAEncryption  OBJECT IDENTIFIER  ::=  { iso(1)\n        member-body(2)
      us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 12 }\n   The object identifier for
      RSA with SHA-512 signature values is:\n      sha512WithRSAEncryption  OBJECT
      IDENTIFIER  ::=  { iso(1)\n        member-body(2) us(840) rsadsi(113549) pkcs(1)
      pkcs-1(1) 13 }\n   When any of these four object identifiers appears within
      an\n   AlgorithmIdentifier, the parameters MUST be NULL.  Implementations\n
      \  MUST accept the parameters being absent as well as present.\n   The SMIMECapabilities
      attribute value indicates support for one of\n   the DSA signature algorithms
      in a SEQUENCE with the capabilityID\n   field containing the object identifier
      sha*WithRSAEncryption (where *\n   is 224, 256, 384, or 512) with NULL parameters.
      \ The DER encodings\n   for these SMIMECapability values are:\n      sha224WithRSAEncryption:
      30 0d 06 09 2a 86 48 86 f7 0d 01 01 0e\n                               05 00\n
      \     sha256WithRSAEncryption: 30 0d 06 09 2a 86 48 86 f7 0d 01 01 0b\n                               05
      00\n      sha384WithRSAEncryption: 30 0d 06 09 2a 86 48 86 f7 0d 01 01 Oc\n
      \                              05 00\n      sha512WithRSAEncryption: 30 0d 06
      09 2a 86 48 86 f7 0d 01 01 0d\n                               05 00\n"
    title: 3.2.  RSA
  - contents:
    - "3.3.  ECDSA\n   [RFC5753], Section 2.1, specifies the conventions for ECDSA
      with\n   SHA-* (where * is 1, 224, 256, 384, or 512) public key algorithm\n
      \  identifiers, parameters, public keys, and signature values.  The\n   object
      identifiers, which are included below for convenience, are\n   taken from [RFC5758].\n
      \  The algorithm identifier for ECDSA with SHA-224 signature values is:\n      ecdsa-with-SHA224
      OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n        us(840) ansi-X9-62(10045)
      signatures(4) ecdsa-with-SHA2(3) 1 }\n   The algorithm identifier for ECDSA
      with SHA-256 signature values is:\n      ecdsa-with-SHA256 OBJECT IDENTIFIER
      ::= { iso(1) member-body(2)\n        us(840)ansi-X9-62(10045) signatures(4)
      ecdsa-with-SHA2(3) 2 }\n   The algorithm identifier for ECDSA with SHA-384 signature
      values is:\n      ecdsa-with-SHA384 OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n
      \       us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-SHA2(3) 3 }\n   The
      algorithm identifier for ECDSA with SHA-512 signature values is:\n      ecdsa-with-SHA512
      OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n        us(840) ansi-X9-62(10045)
      signatures(4) ecdsa-with-SHA2(3) 4 }\n   When any of these four object identifiers
      appears within an\n   AlgorithmIdentifier, the parameters field MUST be absent.
      \ That is,\n   the AlgorithmIdentifier SHALL be a SEQUENCE of one component:
      the OID\n   ecdsa-with-SHA224, ecdsa-with-SHA256, ecdsa-with-SHA384, or ecdsa-\n
      \  with-SHA512.\n   The SMIMECapabilities attribute value indicates support
      for one of\n   the ECDSA signature algorithms in a SEQUENCE with the capabilityID\n
      \  field containing the object identifier ecdsa-with-SHA1* (where * is\n   224,
      256, 384, or 512) with absent parameters.  The DER encodings for\n   these SMIMECapability
      values are:\n      ecdsa-with-SHA224: 30 0a 06 08 2a 86 48 ce 3d 04 03 01\n
      \     ecdsa-with-SHA256: 30 0a 06 08 2a 86 48 ce 3d 04 03 02\n      ecdsa-with-SHA384:
      30 0a 06 08 2a 86 48 ce 3d 04 03 03\n      ecdsa-with-SHA512: 30 0a 06 08 2a
      86 48 ce 3d 04 03 04\n"
    title: 3.3.  ECDSA
  title: 3.  Signature Algorithms
- contents:
  - "4.  Security Considerations\n   The security considerations in [RFC3370], [RFC3874],
    [RFC4055],\n   [RFC5753], and [RFC5758] apply.  No new security considerations
    are\n   introduced as a result of this specification.\n"
  title: 4.  Security Considerations
- contents:
  - '5.  References

    '
  - contents:
    - "5.1.  Normative References\n   [DSS]       National Institute of Standards
      and Technology (NIST),\n               FIPS Publication 186-3: Digital Signature
      Standard, June\n               2009.\n   [RFC2119]   Bradner, S., \"Key words
      for use in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC
      2119, March 1997.\n   [RFC3370]   Housley, R., \"Cryptographic Message Syntax
      (CMS)\n               Algorithms\", RFC 3370, August 2002.\n   [RFC3447]   Jonsson,
      J. and B. Kaliski, \"Public-Key Cryptography\n               Standards (PKCS)
      #1: RSA Cryptography Specifications\n               Version 2.1\", RFC 3447,
      February 2003.\n   [RFC3874]   Housley, R., \"A 224-bit One-way Hash Function:
      SHA-224\",\n               RFC 3874, September 2004.\n   [RFC4055]   Schaad,
      J., Kaliski, B., and R. Housley, \"Additional\n               Algorithms and
      Identifiers for RSA Cryptography for use\n               in the Internet X.509
      Public Key Infrastructure\n               Certificate and Certificate Revocation
      List (CRL)\n               Profile\", RFC 4055, June 2005.\n   [RFC5652]   Housley,
      R., \"Cryptographic Message Syntax (CMS)\", RFC\n               5652, September
      2009.\n   [RFC5751]   Ramsdell, B. and S. Turner, \"Secure/Multipurpose Internet\n
      \              Mail Extensions (S/MIME) Version 3.2 Message\n               Specification\",
      RFC 5751, January 2010.\n   [RFC5753]   Turner, S. and D. Brown, \"Use of Elliptic
      Curve\n               Cryptography (ECC) Algorithms in Cryptographic Message\n
      \              Syntax (CMS)\", RFC 5753, January 2010.\n   [RFC5758]   Dang,
      Q., Santesson, S., Moriarty, K., Brown, D., and T.\n               Polk, \"Internet
      X.509 Public Key Infrastructure:\n               Additional Algorithms and Identifiers
      for DSA and ECDSA\",\n               RFC 5758, January 2010.\n   [SHS]       National
      Institute of Standards and Technology (NIST),\n               FIPS Publication
      180-3: Secure Hash Standard, October\n               2008.\n"
    title: 5.1.  Normative References
  - contents:
    - "5.2.  Informative References\n   [RFC4231]   Nystrom, M., \"Identifiers and
      Test Vectors for HMAC-\n               SHA-224, HMAC-SHA-256, HMAC-SHA-384,
      and HMAC-SHA-512\",\n               RFC 4231, December 2005.\n   [RFC4634]   Eastlake
      3rd, D. and T. Hansen, \"US Secure Hash\n               Algorithms (SHA and
      HMAC-SHA)\", RFC 4634, July 2006.\n"
    title: 5.2.  Informative References
  title: 5.  References
- contents:
  - "Author's Address\n   Sean Turner\n   IECA, Inc.\n   3057 Nutley Street, Suite
    106\n   Fairfax, VA 22031\n   USA\n   EMail: turners@ieca.com\n"
  title: Author's Address
