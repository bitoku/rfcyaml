- title: __initial_text__
  contents:
  - '                       Flow Selection Techniques

    '
- title: Abstract
  contents:
  - "Abstract\n   The Intermediate Flow Selection Process is the process of selecting\
    \ a\n   subset of Flows from all observed Flows.  The Intermediate Flow\n   Selection\
    \ Process may be located at an IP Flow Information Export\n   (IPFIX) Exporter\
    \ or Collector, or within an IPFIX Mediator.  It\n   reduces the effort of post-processing\
    \ Flow data and transferring Flow\n   Records.  This document describes motivations\
    \ for using the\n   Intermediate Flow Selection process and presents Intermediate\
    \ Flow\n   Selection techniques.  It provides an information model for\n   configuring\
    \ Intermediate Flow Selection Process techniques and\n   discusses what information\
    \ about an Intermediate Flow Selection\n   Process should be exported.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7014.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n     1.1.  Requirements Language  . . . . . . . . . . . . .\
    \ . . . . .  4\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   3.  Difference between Intermediate Flow Selection Process and\n\
    \       Packet Selection . . . . . . . . . . . . . . . . . . . . . . .  7\n  \
    \ 4.  Difference between Intermediate Flow Selection Process and\n       Intermediate\
    \ Selection Process . . . . . . . . . . . . . . . .  9\n   5.  Intermediate Flow\
    \ Selection Process within the IPFIX\n       Architecture . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  9\n     5.1.  Intermediate Flow Selection Process\
    \ in the Metering\n           Process  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . 11\n     5.2.  Intermediate Flow Selection Process in the Exporting\n\
    \           Process  . . . . . . . . . . . . . . . . . . . . . . . . . 11\n  \
    \   5.3.  Intermediate Flow Selection Process as a Function of\n           the\
    \ IPFIX Mediator . . . . . . . . . . . . . . . . . . . . 11\n   6.  Intermediate\
    \ Flow Selection Process Techniques . . . . . . . . 12\n     6.1.  Flow Filtering\
    \ . . . . . . . . . . . . . . . . . . . . . . 12\n       6.1.1.  Property Match\
    \ Filtering . . . . . . . . . . . . . . . 12\n       6.1.2.  Hash-Based Flow Filtering\
    \  . . . . . . . . . . . . . . 13\n     6.2.  Flow Sampling  . . . . . . . . .\
    \ . . . . . . . . . . . . . 13\n       6.2.1.  Systematic Sampling  . . . . .\
    \ . . . . . . . . . . . . 13\n       6.2.2.  Random Sampling  . . . . . . . .\
    \ . . . . . . . . . . . 14\n     6.3.  Flow-State Dependent Intermediate Flow\
    \ Selection\n           Process  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 14\n     6.4.  Flow-State Dependent Packet Selection  . . . . . . . . .\
    \ . 15\n   7.  Configuration of Intermediate Flow Selection Process\n       Techniques\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n     7.1.  Intermediate\
    \ Flow Selection Process Parameters . . . . . . 17\n     7.2.  Description of\
    \ Flow-State Dependent Packet Selection . . . 19\n   8.  Information Model for\
    \ Intermediate Flow Selection Process\n       Configuration and Reporting  . .\
    \ . . . . . . . . . . . . . . . 20\n   9.  IANA Considerations  . . . . . . .\
    \ . . . . . . . . . . . . . . 22\n     9.1.  Registration of Information Elements\
    \ . . . . . . . . . . . 22\n       9.1.1.  flowSelectorAlgorithm  . . . . . .\
    \ . . . . . . . . . . 22\n       9.1.2.  flowSelectedOctetDeltaCount  . . . .\
    \ . . . . . . . . . 24\n       9.1.3.  flowSelectedPacketDeltaCount . . . . .\
    \ . . . . . . . . 24\n       9.1.4.  flowSelectedFlowDeltaCount . . . . . . .\
    \ . . . . . . . 24\n       9.1.5.  selectorIDTotalFlowsObserved . . . . . . .\
    \ . . . . . . 25\n       9.1.6.  selectorIDTotalFlowsSelected . . . . . . . .\
    \ . . . . . 25\n       9.1.7.  samplingFlowInterval . . . . . . . . . . . . .\
    \ . . . . 26\n       9.1.8.  samplingFlowSpacing  . . . . . . . . . . . . . .\
    \ . . . 26\n       9.1.9.  flowSamplingTimeInterval . . . . . . . . . . . . .\
    \ . . 27\n       9.1.10. flowSamplingTimeSpacing  . . . . . . . . . . . . . .\
    \ . 27\n       9.1.11. hashFlowDomain . . . . . . . . . . . . . . . . . . . .\
    \ 28\n     9.2.  Registration of Object Identifier  . . . . . . . . . . . . 28\n\
    \   10. Security and Privacy Considerations  . . . . . . . . . . . . . 28\n  \
    \ 11. Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 30\n   12.\
    \ References . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n     12.1.\
    \ Normative References . . . . . . . . . . . . . . . . . . . 30\n     12.2. Informative\
    \ References . . . . . . . . . . . . . . . . . . 31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes Intermediate Flow Selection Process\n\
    \   techniques for network traffic measurements.  A Flow is defined as a\n   set\
    \ of packets with common properties, as described in [RFC7011].  An\n   Intermediate\
    \ Flow Selection Process can be executed to limit the\n   resource demands for\
    \ capturing, storing, exporting, and post-\n   processing Flow Records.  It also\
    \ can be used to select a particular\n   set of Flows that are of interest to\
    \ a specific application.  This\n   document provides a categorization of Intermediate\
    \ Flow Selection\n   Process techniques and describes configuration and reporting\n\
    \   parameters for them.\n   This document also addresses configuration and reporting\
    \ parameters\n   for Flow-state dependent packet selection as described in [RFC5475],\n\
    \   although this technique is categorized as packet selection.  The\n   reason\
    \ is that Flow-state dependent packet selection techniques often\n   aim at the\
    \ reduction of resources for Flow capturing and Flow\n   processing.  Furthermore,\
    \ these techniques were only briefly\n   discussed in [RFC5475].  Therefore, configuration\
    \ and reporting\n   considerations for Flow-state dependent packet selection techniques\n\
    \   have been included in this document.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document is consistent with the terminology introduced\
    \ in\n   [RFC7011], [RFC5470], [RFC5475], and [RFC3917].  As in [RFC7011] and\n\
    \   [RFC5476], the first letter of each IPFIX specific and Packet\n   Sampling\
    \ (PSAMP) specific term is capitalized, along with the\n   Intermediate Flow Selection\
    \ Process specific terms defined here.\n   * Packet Classification\n      Packet\
    \ Classification is a process by which packets are mapped to\n      specific Flow\
    \ Records, based on packet properties or external\n      properties (e.g., interface).\
    \  The properties (e.g., header\n      information, packet content, Autonomous\
    \ System (AS) number) make\n      up the Flow Key.  If a Flow Record for a specific\
    \ Flow Key value\n      already exists, the Flow Record is updated; otherwise,\
    \ a new Flow\n      Record is created.\n   * Intermediate Flow Selection Process\n\
    \      An Intermediate Flow Selection Process is an Intermediate Process,\n  \
    \    as defined in [RFC6183] that takes Flow Records as its input and\n      selects\
    \ a subset of this set as its output.  The Intermediate Flow\n      Selection\
    \ Process is a more general concept than the Intermediate\n      Selection Process\
    \ as defined in [RFC6183].  While an Intermediate\n      Selection Process selects\
    \ Flow Records from a sequence based upon\n      criteria-evaluated Flow Record\
    \ values and only passes on those\n      Flow Records that match the criteria,\
    \ an Intermediate Flow\n      Selection Process selects Flow Records using selection\
    \ criteria\n      applicable to a larger set of Flow characteristics and\n   \
    \   information.\n   * Flow Cache\n      A Flow Cache is the set of Flow Records.\n\
    \   * Flow Selection State\n      An Intermediate Flow Selection Process maintains\
    \ state information\n      for use by the Flow Selector.  At a given time, the\
    \ Flow Selection\n      State may depend on Flows and packets observed at and\
    \ before that\n      time, as well as other variables.  Examples include:\n  \
    \    (i)   sequence number of packets and Flow Records;\n      (ii)  number of\
    \ selected Flows;\n      (iii) number of observed Flows;\n      (iv)  current\
    \ Flow Cache occupancy;\n      (v)   Flow specific counters, lower and upper bounds;\n\
    \      (vi)  Intermediate Flow Selection Process timeout intervals.\n   * Flow\
    \ Selector\n      A Flow Selector defines the action of an Intermediate Flow\n\
    \      Selection Process on a single Flow of its input.  The Flow\n      Selector\
    \ can make use of the following information in order to\n      establish whether\
    \ or not a Flow has to be selected:\n      (i)   the content of the Flow Record;\n\
    \      (ii)  any state information related to the Metering Process or\n      \
    \      Exporting Process;\n      (iii) any Flow Selection State that may be maintained\
    \ by the\n            Intermediate Flow Selection Process.\n   * Complete Flow\n\
    \      A Complete Flow consists of all the packets that enter the\n      Intermediate\
    \ Flow Selection Process within the Flow timeout\n      interval and that belong\
    \ to the same Flow, per the definition of\n      \"Flow\" in [RFC5470].  For this\
    \ definition, only packets that\n      arrive at the Intermediate Flow Selection\
    \ Process are considered.\n   * Flow Position\n      Flow Position is the position\
    \ of a Flow Record within the Flow\n      Cache.\n   * Flow Filtering\n      Flow\
    \ Filtering selects flows based on a deterministic function on\n      the Flow\
    \ Record content, Flow Selection State, external properties\n      (e.g., ingress\
    \ interface), or external events (e.g., violated\n      Access Control List).\
    \  If the relevant parts of the Flow Record\n      content can already be observed\
    \ at the packet level (e.g., Flow\n      Keys from packet header fields), Flow\
    \ Filtering can be performed\n      at the packet level by Property Match Filtering,\
    \ as described in\n      [RFC5475].\n   * Hash-based Flow Filtering\n      Hash-based\
    \ Flow Filtering is a deterministic Flow filter function\n      that selects flows\
    \ based on a hash function.  The hash function is\n      calculated over parts\
    \ of the Flow Record content or external\n      properties that are called the\
    \ Hash Domain.  If the hash value\n      falls into a predefined Hash Selection\
    \ Range, the Flow is\n      selected.\n   * Flow-state Dependent Intermediate\
    \ Flow Selection Process\n      The Flow-state dependent Intermediate Flow Selection\
    \ Process is a\n      selection function that selects or drops Flows based on\
    \ the\n      current Flow Selection State.  The selection can be either\n    \
    \  deterministic, random, or non-uniform random.\n   * Flow-state Dependent Packet\
    \ Selection\n      Flow-state dependent packet selection is a selection function\
    \ that\n      selects or drops packets based on the current Flow Selection\n \
    \     State.  The selection can be either deterministic, random, or non-\n   \
    \   uniform random.  Flow-state dependent packet selection can be used\n     \
    \ to implement a preference for the selection of packets belonging\n      to specific\
    \ Flows.  For example, the selection probability of\n      packets belonging to\
    \ Flows that are already within the Flow Cache\n      may be higher than for packets\
    \ that have not been recorded yet.\n   * Flow Sampling\n      Flow Sampling selects\
    \ flows based on Flow Record sequence or\n      arrival times (e.g., entry in\
    \ Flow Cache, arrival time at Exporter\n      or Mediator).  The selection can\
    \ be systematic (e.g., every n-th\n      Flow) or based on a random function (e.g.,\
    \ select each Flow Record\n      with probability p, or randomly select n out\
    \ of N Flow Records).\n"
- title: 3.  Difference between Intermediate Flow Selection Process and Packet
  contents:
  - "3.  Difference between Intermediate Flow Selection Process and Packet\n    Selection\n\
    \   The Intermediate Flow Selection Process differs from packet selection\n  \
    \ as described in [RFC5475].  Packet selection techniques consider\n   packets\
    \ as the basic element, and the parent population consists of\n   all packets\
    \ observed at an Observation Point.  In contrast to this,\n   the basic elements\
    \ in Flow selection are the Flows.  The parent\n   population consists of all\
    \ observed Flows, and the Intermediate Flow\n   Selection Process operates on\
    \ the Flows.  The major characteristics\n   of the Intermediate Flow Selection\
    \ Process are the following:\n   -  The Intermediate Flow Selection Process takes\
    \ Flows as basic\n      elements.  For packet selection, packets are considered\
    \ as basic\n      elements.\n   -  The Intermediate Flow Selection Process typically\
    \ takes place\n      after Packet Classification, because the classification rules\n\
    \      determine to which Flow a packet belongs.  The Intermediate Flow\n    \
    \  Selection Process can be performed before Packet Classification.\n      In\
    \ that case, the Intermediate Flow Selection Process is based on\n      the Flow\
    \ Key (and also on a hash value over the Flow Key) but not\n      on characteristics\
    \ that are only available after Packet\n      Classification (e.g., Flow size,\
    \ Flow duration).  Packet selection\n      can be applied before and after Packet\
    \ Classification.  As an\n      example, packet selection before Packet Classification\
    \ can be\n      random packet selection, whereas packet selection after Packet\n\
    \      Classification can be Flow-state dependent packet selection (as\n     \
    \ described in [RFC5475]).\n   -  The Intermediate Flow Selection Process operates\
    \ on Complete\n      Flows.  That means that after the Intermediate Flow Selection\n\
    \      Process, either all packets of the Flow are kept or all packets of\n  \
    \    the Flow are discarded.  That means that if the Intermediate Flow\n     \
    \ Selection Process is preceded by a packet selection process, the\n      Complete\
    \ Flow consists only of the packets that were not discarded\n      during the\
    \ packet selection.\n   There are some techniques that are difficult to unambiguously\n\
    \   categorize into one of the categories.  Here, some guidance is given\n   on\
    \ how to categorize such techniques:\n   -  Techniques that can be considered\
    \ as both packet selection and an\n      Intermediate Flow Selection Process:\
    \ some packet selection\n      techniques result in the selection of Complete\
    \ Flows and therefore\n      can be considered as packet selection or as an Intermediate\
    \ Flow\n      Selection Process at the same time.  An example is Property Match\n\
    \      Filtering of all packets to a specific destination address.  If\n     \
    \ Flows are defined based on destination addresses, such a packet\n      selection\
    \ also results in an Intermediate Flow Selection Process\n      and can be considered\
    \ as packet selection or as an Intermediate\n      Flow Selection Process.\n \
    \  -  Flow-state Dependent Packet Selection: there exist techniques that\n   \
    \   select packets based on the Flow state, e.g., based on the number\n      of\
    \ already observed packets belonging to the Flow.  Examples of\n      these techniques\
    \ from the literature include \"Sample and Hold\"\n      [EsVa01], \"Fast Filtered\
    \ Sampling\" [MSZC10], and the \"Sticky\n      Sampling\" algorithm presented\
    \ in [MaMo02].  Such techniques can be\n      used to influence which Flows are\
    \ captured (e.g., increase the\n      selection of packets belonging to large\
    \ Flows) and reduce the\n      number of Flows that need to be stored in the Flow\
    \ Cache.\n      Nevertheless, such techniques do not necessarily select Complete\n\
    \      Flows, because they do not ensure that all packets of a selected\n    \
    \  Flow are captured.  Therefore, Flow-state dependent packet\n      selection\
    \ techniques that do not ensure that either all or no\n      packets of a Flow\
    \ are selected, strictly speaking, have to be\n      considered as packet selection\
    \ techniques and not as Intermediate\n      Flow Selection Process techniques.\n"
- title: 4.  Difference between Intermediate Flow Selection Process and
  contents:
  - "4.  Difference between Intermediate Flow Selection Process and\n    Intermediate\
    \ Selection Process\n   The Intermediate Flow Selection Process differs from the\
    \ Intermediate\n   Selection Process, since the Intermediate Flow Selection Process\
    \ uses\n   selection criteria that apply to a larger set of Flow information and\n\
    \   properties than those used by the Intermediate Selection Process.\n   The\
    \ typical function of an Intermediate Selection Process is Property\n   Match\
    \ Filtering, which selects a Flow Record if the value of a\n   specific field\
    \ in the Flow Record matches a configured value or falls\n   within a configured\
    \ range.  This means that the selection criteria\n   used by an Intermediate Selection\
    \ Process are evaluated only on Flow\n   Record values.  An Intermediate Flow\
    \ Selection Process makes its\n   decision on whether a Flow has to be selected\
    \ or not by taking into\n   account not only information related to the content\
    \ of the Flow\n   Record but also any Flow Selection State information or variable\
    \ that\n   can be used to select Flows in order to meet application requirements\n\
    \   or resource constraints (e.g., Flow Cache occupancy, export link\n   capacity).\
    \  Examples include flow counters, Intermediate Flow\n   Selection Process timeout\
    \ intervals, and Flow Record time\n   information.\n"
- title: 5.  Intermediate Flow Selection Process within the IPFIX Architecture
  contents:
  - "5.  Intermediate Flow Selection Process within the IPFIX Architecture\n   An\
    \ Intermediate Flow Selection Process can be deployed at any of\n   three places\
    \ within the IPFIX architecture.  As shown in Figure 1,\n   the Intermediate Flow\
    \ Selection Process can occur\n   1.  in the Metering Process at the IPFIX Exporter\n\
    \   2.  in the Exporting Process at the Collector\n   3.  within a Mediator\n\
    \                +===========================================+\n             \
    \   |  IPFIX Exporter        +----------------+ |\n                |         \
    \               | Metering Proc. | |\n                | +-----------------+  \
    \  +----------------+ |\n                | |    Metering     |    |  Intermediate\
    \  | |\n                | |    Process      | or | Flow Selection | |\n      \
    \          | |                 |    |     Process    | |\n                | +-----------------+----+----------------+\
    \ |\n                | |           Exporting Process           | |\n         \
    \       | +----|-------------------------------|--+ |\n                +======|===============================|====+\n\
    \                       |                               |\n                  \
    \     |                               |\n                +======|========================+\
    \      |\n                |      |  Mediator              |      |\n         \
    \       |    +-V-------------------+    |      |\n                |    | Collecting\
    \ Process  |    |      |\n                |    +---------------------+    |  \
    \    |\n                |    | Intermediate Flow   |    |      |\n           \
    \     |    | Selection Process   |    |      |\n                |    +---------------------+\
    \    |      |\n                |    |  Exporting Process  |    |      |\n    \
    \            |    +-|-------------------+    |      |\n                +======|========================+\
    \      |\n                       |                               |\n         \
    \              |                               |\n                +======|===============================|=====+\n\
    \                |      |         Collector             |     |\n            \
    \    | +----V-------------------------------V-+   |\n                | |     \
    \    Collecting Process           |   |\n                | +--------------------------------------+\
    \   |\n                | | Intermediate Flow Selection Process  |   |\n      \
    \          | +--------------------------------------+   |\n                | |\
    \           Exporting Process          |   |\n                | +------------------------------|-------+\
    \   |\n                +================================|===========+\n      \
    \                                           |\n                              \
    \                   |\n                                                 V\n  \
    \                                        +------------------+\n              \
    \                            |       IPFIX      |\n                          \
    \                +------------------+\n     Figure 1: Potential Intermediate Flow\
    \ Selection Process Locations\n   In contrast to packet selection, the Intermediate\
    \ Flow Selection\n   Process is always applied after the packets are classified\
    \ into\n   Flows.\n"
- title: 5.1.  Intermediate Flow Selection Process in the Metering Process
  contents:
  - "5.1.  Intermediate Flow Selection Process in the Metering Process\n   An Intermediate\
    \ Flow Selection Process in the Metering Process uses\n   packet information to\
    \ update the Flow Records in the Flow Cache.  The\n   Intermediate Flow Selection\
    \ Process, before Packet Classification,\n   can be based on the Flow Key (and\
    \ also on a hash value over the Flow\n   Key) but not on characteristics that\
    \ are only available after Packet\n   Classification (e.g., Flow size, Flow duration).\
    \  Here, an\n   Intermediate Flow Selection Process is applied to reduce resources\n\
    \   for all subsequent processes or to select specific Flows of interest\n   in\
    \ cases where such Flow characteristics are already observable at\n   the packet\
    \ level (e.g., Flows to specific IP addresses).  In\n   contrast, Flow-state dependent\
    \ packet selection is a packet selection\n   technique, because it does not necessarily\
    \ select Complete Flows.\n"
- title: 5.2.  Intermediate Flow Selection Process in the Exporting Process
  contents:
  - "5.2.  Intermediate Flow Selection Process in the Exporting Process\n   An Intermediate\
    \ Flow Selection Process in the Exporting Process works\n   on Flow Records and\
    \ can therefore depend on Flow characteristics that\n   are only visible after\
    \ the classification of packets, such as Flow\n   size and Flow duration.  The\
    \ Exporting Process may implement policies\n   for exporting only a subset of\
    \ the Flow Records that have been stored\n   in the system's memory, in order\
    \ to offload Flow export and Flow\n   post-processing.  An Intermediate Flow Selection\
    \ Process in the\n   Exporting Process may select only the subset of Flow Records\
    \ that are\n   of interest to the user's application or select only as many Flow\n\
    \   Records as can be handled by the available resources (e.g., limited\n   export\
    \ link capacity).\n"
- title: 5.3.  Intermediate Flow Selection Process as a Function of the IPFIX
  contents:
  - "5.3.  Intermediate Flow Selection Process as a Function of the IPFIX\n      Mediator\n\
    \   As shown in Figure 1, the Intermediate Flow Selection Process can be\n   performed\
    \ within an IPFIX Mediator [RFC6183].  The Intermediate Flow\n   Selection Process\
    \ takes a Flow Record stream as its input and selects\n   Flow Records from a\
    \ sequence based upon criteria-evaluated record\n   values.  The Intermediate\
    \ Flow Selection Process can again apply an\n   Intermediate Flow Selection Process\
    \ technique to obtain Flows of\n   interest to the application.  Further, the\
    \ Intermediate Flow\n   Selection Process can base its selection decision on the\
    \ correlation\n   of data from different IPFIX Exporters, e.g., by only selecting\
    \ Flows\n   that were recorded on two or more IPFIX Exporters.\n"
- title: 6.  Intermediate Flow Selection Process Techniques
  contents:
  - "6.  Intermediate Flow Selection Process Techniques\n   An Intermediate Flow Selection\
    \ Process technique selects either all\n   or none of the packets of a Flow; otherwise,\
    \ the technique has to be\n   considered as packet selection.  A difference between\
    \ Flow Filtering\n   and Flow sampling is recognized.\n"
- title: 6.1.  Flow Filtering
  contents:
  - "6.1.  Flow Filtering\n   Flow Filtering is a deterministic function on the IPFIX\
    \ Flow Record\n   content.  If the relevant Flow characteristics are already observable\n\
    \   at the packet level (e.g., Flow Keys), Flow Filtering can be applied\n   before\
    \ aggregation at the packet level.  In order to be compliant\n   with IPFIX, at\
    \ least one of this document's Flow Filtering schemes\n   MUST be implemented.\n"
- title: 6.1.1.  Property Match Filtering
  contents:
  - "6.1.1.  Property Match Filtering\n   Property Match Filtering is performed similarly\
    \ to Property Match\n   Filtering for packet selection as described in [RFC5475].\
    \  The\n   difference is that Flow Record fields are used here, instead of\n \
    \  packet fields, to derive the selection decision.  Property Match\n   Filtering\
    \ is used to select a specific subset of the Flows that are\n   of interest to\
    \ a particular application (e.g., all Flows to a\n   specific destination, all\
    \ large Flows, etc.).  Properties on which\n   the filtering is based can be Flow\
    \ Keys, Flow Timestamps, or Per-Flow\n   Counters as described in [RFC7012]. \
    \ Examples include the Flow size\n   in bytes, the number of packets in the Flow,\
    \ the observation time of\n   the first or last packet, and the maximum packet\
    \ length.  An example\n   of Property Match Filtering is to select Flows with\
    \ more than a\n   threshold number of observed octets.  The selection criteria\
    \ can be a\n   specific value, a set of specific values, or an interval.  For\n\
    \   example, a Flow is selected if destinationIPv4Address and the total\n   number\
    \ of packets of the Flow equal two predefined values.  An\n   Intermediate Flow\
    \ Selection Process using Property Match Filtering in\n   the Metering Process\
    \ relies on properties that are observable at the\n   packet level (e.g., Flow\
    \ Key).  For example, a Flow is selected if\n   sourceIPv4Address and sourceIPv4PrefixLength\
    \ equal, respectively, two\n   specific values.\n   An Intermediate Flow Selection\
    \ Process using Property Match Filtering\n   in the Exporting Process is based\
    \ on properties that are only visible\n   after Packet Classification, such as\
    \ Flow size and Flow duration.  An\n   example is the selection of the largest\
    \ Flows or a percentage of\n   Flows with the longest lifetime.  Another example\
    \ is to select and\n   remove from the Flow Cache the Flow Record with the lowest\
    \ Flow\n   volume per current Flow lifetime if the Flow Cache is full.\n   An\
    \ Intermediate Flow Selection Process using Property Match Filtering\n   within\
    \ an IPFIX Mediator selects a Flow Record if the value of a\n   specific field\
    \ in the Flow Record equals a configured value or falls\n   within a configured\
    \ range [RFC6183].\n"
- title: 6.1.2.  Hash-Based Flow Filtering
  contents:
  - "6.1.2.  Hash-Based Flow Filtering\n   Hash-based Flow Filtering uses a hash function\
    \ h to map the Flow Key\n   c onto a Hash Range R.  A Flow is selected if the\
    \ hash value h(c) is\n   within the Hash Selection Range S, which is a subset\
    \ of R.  Hash-\n   based Flow Filtering can be used to emulate a random sampling\
    \ process\n   but still enable the correlation between selected Flow subsets at\n\
    \   different Observation Points.  Hash-based Flow Filtering is similar\n   to\
    \ Hash-based packet selection and is in fact identical when Hash-\n   based packet\
    \ selection uses the Flow Key that defines the Flow as the\n   hash input.  Nevertheless,\
    \ there may be the incentive to apply Hash-\n   based Flow Filtering, but not\
    \ at the packet level, in the Metering\n   Process, for example, when the size\
    \ of the selection range, and\n   therefore the sampling probability, are dependent\
    \ on the number of\n   observed Flows.  If Hash-based Flow Filtering is used to\
    \ select the\n   same subset of flows at different Observation Points, the Hash\
    \ Domain\n   MUST only include parts of the Flow Record content that are invariant\n\
    \   on the Flow path.  Refer also to the Trajectory Sampling application\n   example\
    \ of coordinated packet selection [RFC5475], which explains the\n   hash-based\
    \ filtering approach at the packet level.\n"
- title: 6.2.  Flow Sampling
  contents:
  - "6.2.  Flow Sampling\n   Flow sampling operates on Flow Record sequence or arrival\
    \ times.  It\n   can use either a systematic or a random function for the Intermediate\n\
    \   Flow Selection Process.  Flow sampling usually aims at the selection\n   of\
    \ a representative subset of all Flows in order to estimate\n   characteristics\
    \ of the whole set (e.g., mean Flow size in the\n   network).\n"
- title: 6.2.1.  Systematic Sampling
  contents:
  - "6.2.1.  Systematic Sampling\n   Systematic sampling is a deterministic selection\
    \ function.  It may be\n   a periodic selection of the N-th Flow Record that arrives\
    \ at the\n   Intermediate Flow Selection Process.  Systematic sampling MAY be\n\
    \   applied in the Metering Process.  An example would be to create,\n   besides\
    \ the Flow Cache of selected Flows, an additional data\n   structure that saves\
    \ the Flow Key values of the Flows that are not\n   selected.  The selection of\
    \ a Flow would then be based on the first\n   packet of a Flow.  Every time a\
    \ packet belonging to a new Flow (which\n   is not in the data structure of either\
    \ the selected or non-selected\n   Flows) arrives at the Observation Point, a\
    \ counter is increased.  If\n   the counter is increased to a multiple of N, a\
    \ new Flow Cache entry\n   is created; if the counter is not a multiple of N,\
    \ the Flow Key value\n   is added to the data structure for non-selected Flows.\n\
    \   Systematic sampling can also be time-based.  Time-based systematic\n   sampling\
    \ is applied by only creating Flows that are observed between\n   time-based start\
    \ and stop triggers.  The time interval may be applied\n   at the packet level\
    \ in the Metering Process or after aggregation at\n   the Flow level, e.g., by\
    \ selecting a Flow arriving at the Exporting\n   Process every n seconds.\n"
- title: 6.2.2.  Random Sampling
  contents:
  - "6.2.2.  Random Sampling\n   Random Flow sampling is based on a random process\
    \ that requires the\n   calculation of random numbers.  One can differentiate\
    \ between n-out-\n   of-N and probabilistic Flow sampling.\n"
- title: 6.2.2.1.  n-out-of-N Flow Sampling
  contents:
  - "6.2.2.1.  n-out-of-N Flow Sampling\n   In n-out-of-N Sampling, n elements are\
    \ selected out of the parent\n   population, which consists of N elements.  One\
    \ example would be to\n   generate n different random numbers in the range [1,N]\
    \ and select all\n   Flows that have a Flow Position equal to one of the random\
    \ numbers.\n"
- title: 6.2.2.2.  Probabilistic Flow Sampling
  contents:
  - "6.2.2.2.  Probabilistic Flow Sampling\n   In probabilistic Sampling, the decision\
    \ of whether or not a Flow is\n   selected is made in accordance with a predefined\
    \ selection\n   probability.  For probabilistic Sampling, the Sample Size can\
    \ vary\n   for different trials.  The selection probability does not necessarily\n\
    \   have to be the same for each Flow.  Therefore, a difference between\n   uniform\
    \ probabilistic sampling (with the same selection probability\n   for all Flows)\
    \ and non-uniform probabilistic sampling (where the\n   selection probability\
    \ can vary for different Flows) is recognized.\n   For non-uniform probabilistic\
    \ Flow sampling, the sampling probability\n   may be adjusted according to the\
    \ Flow Record content.  An example\n   would be to increase the selection probability\
    \ of large-volume Flows\n   over small-volume Flows, as described in [DuLT01].\n"
- title: 6.3.  Flow-State Dependent Intermediate Flow Selection Process
  contents:
  - "6.3.  Flow-State Dependent Intermediate Flow Selection Process\n   The Flow-state\
    \ dependent Intermediate Flow Selection Process can be a\n   deterministic or\
    \ random Intermediate Flow Selection Process, based on\n   the Flow Record content\
    \ and the Flow state that may be kept\n   additionally for each of the Flows.\
    \  External processes may update\n   counters, bounds, and timers for each of\
    \ the Flow Records, and the\n   Intermediate Flow Selection Process utilizes this\
    \ information for the\n   selection decision.  A review of Flow-state dependent\
    \ Intermediate\n   Flow Selection Process techniques that aim at the selection\
    \ of the\n   most frequent items by keeping additional Flow state information\
    \ can\n   be found in [CoHa08].  The Flow-state dependent Intermediate Flow\n\
    \   Selection Process can only be applied after packet aggregation, when\n   a\
    \ packet has been assigned to a Flow.  The Intermediate Flow\n   Selection Process\
    \ then decides, based on the Flow state for each\n   Flow, whether it is kept\
    \ in the Flow Cache or not.  Two Flow-state\n   dependent Intermediate Flow Selection\
    \ Process Algorithms are\n   described here:\n   The Frequent algorithm [KaPS03]\
    \ is a technique that aims at the\n   selection of all flows that at least exceed\
    \ a 1/k fraction of the\n   Observed Packet Stream.  The algorithm has only a\
    \ Flow Cache of size\n   k-1, and each Flow in the Flow Cache has an additional\
    \ counter.  The\n   counter is incremented each time a packet belonging to the\
    \ Flow in\n   the Flow Cache is observed.  If the observed packet does not belong\n\
    \   to any Flow, all counters are decremented; if any of the Flow\n   counters\
    \ has a value of zero, the Flow is replaced with a Flow formed\n   from the new\
    \ packet.\n   Lossy counting is a selection technique that identifies all Flows\n\
    \   whose packet count exceeds a certain percentage of the whole observed\n  \
    \ packet stream (e.g., 5% of all packets) with a certain estimation\n   error\
    \ e.  Lossy counting separates the observed packet stream in\n   windows of size\
    \ N=1/e, where N is an amount of consecutive packets.\n   For each observed Flow,\
    \ an additional counter will be held in the\n   Flow state.  The counter is incremented\
    \ each time a packet belonging\n   to the Flow is observed, and all counters are\
    \ decremented at the end\n   of each window.  Also, all Flows with a counter of\
    \ zero are removed\n   from the Flow Cache.\n"
- title: 6.4.  Flow-State Dependent Packet Selection
  contents:
  - "6.4.  Flow-State Dependent Packet Selection\n   Flow-state dependent packet selection\
    \ is not an Intermediate Flow\n   Selection Process technique but a packet selection\
    \ technique.\n   Nevertheless, configuration and reporting parameters for this\n\
    \   technique will be described in this document.  An example is the\n   \"Sample\
    \ and Hold\" algorithm [EsVa01], which tries to implement a\n   preference for\
    \ large-volume Flows in the selection.  When a packet\n   arrives, it is selected\
    \ when a Flow Record for this packet already\n   exists.  If there is no Flow\
    \ Record, the packet is selected according\n   to a certain probability that is\
    \ dependent on the packet size.\n"
- title: 7.  Configuration of Intermediate Flow Selection Process Techniques
  contents:
  - "7.  Configuration of Intermediate Flow Selection Process Techniques\n   This\
    \ section describes the configuration parameters of the Flow\n   selection techniques\
    \ presented above.  It provides the basis for an\n   information model to be adopted\
    \ in order to configure the\n   Intermediate Flow Selection Process within an\
    \ IPFIX Device.  The\n   information model with the Information Elements (IEs)\
    \ for\n   Intermediate Flow Selection Process configuration is described\n   together\
    \ with the reporting IEs in Section 8.  Table 1 gives an\n   overview of the defined\
    \ Intermediate Flow Selection Process\n   techniques, where they can be applied,\
    \ and what their input\n   parameters are.  Depending on where the Flow selection\
    \ techniques are\n   applied, different input parameters can be configured.\n\
    \   +-------------------+--------------------+--------------------------+\n  \
    \ | Location          | Selection          | Selection Input          |\n   |\
    \                   | Technique          |                          |\n   +-------------------+--------------------+--------------------------+\n\
    \   | In the Metering   | Flow-state         | packet sampling          |\n  \
    \ | Process           | Dependent Packet   | probabilities, Flow      |\n   |\
    \                   | Selection          | Selection State, packet  |\n   |  \
    \                 |                    | properties               |\n   |    \
    \               |                    |                          |\n   | In the\
    \ Metering   | Property Match     | Flow Record IEs,         |\n   | Process \
    \          | Flow Filtering     | Selection Interval       |\n   |           \
    \        |                    |                          |\n   | In the Metering\
    \   | Hash-based Flow    | selection range, hash    |\n   | Process          \
    \ | Filtering          | function, Flow Key, seed |\n   |                   |\
    \                    | (optional)               |\n   |                   |  \
    \                  |                          |\n   | In the Metering   | Time-based\
    \         | Flow Position (derived   |\n   | Process           | Systematic Flow\
    \    | from arrival time of     |\n   |                   | sampling         \
    \  | packets), Flow Selection |\n   |                   |                    |\
    \ State                    |\n   |                   |                    |  \
    \                        |\n   | In the Metering   | Sequence-based     | Flow\
    \ Position (derived   |\n   | Process           | Systematic Flow    | from packet\
    \ position),   |\n   |                   | sampling           | Flow Selection\
    \ State     |\n   |                   |                    |                 \
    \         |\n   | In the Metering   | Random Flow        | random number generator\
    \  |\n   | Process           | sampling           | or list and packet       |\n\
    \   |                   |                    | position, Flow state     |\n  \
    \ |                   |                    |                          |\n   |\
    \ In the Exporting  | Property Match     | Flow Record content,     |\n   | Process/\
    \ within   | Flow Filtering     | filter function          |\n   | the IPFIX \
    \        |                    |                          |\n   | Mediator    \
    \      |                    |                          |\n   |               \
    \    |                    |                          |\n   | In the Exporting\
    \  | Hash-based Flow    | selection range, hash    |\n   | Process/ within   |\
    \ Filtering          | function, hash input     |\n   | the IPFIX         |  \
    \                  | (Flow Keys and other     |\n   | Mediator          |    \
    \                | Flow properties)         |\n   |                   |      \
    \              |                          |\n   | In the Exporting  | Flow-state\
    \         | Flow state parameters,   |\n   | Process/ within   | Dependent   \
    \       | random number generator  |\n   | the IPFIX         | Intermediate Flow\
    \  | or list                  |\n   | Mediator          | Selection Process  |\
    \                          |\n   |                   |                    |  \
    \                        |\n   | In the Exporting  | Time-based         | Flow\
    \ arrival time, Flow  |\n   | Process/ within   | Systematic Flow    | state \
    \                   |\n   | the IPFIX         | sampling           |         \
    \                 |\n   | Mediator          |                    |           \
    \               |\n   |                   |                    |             \
    \             |\n   | In the Exporting  | Sequence-based     | Flow Position,\
    \ Flow      |\n   | Process/ within   | Systematic Flow    | state           \
    \         |\n   | the IPFIX         | sampling           |                   \
    \       |\n   | Mediator          |                    |                     \
    \     |\n   |                   |                    |                       \
    \   |\n   | In the Exporting  | Random Flow        | random number generator \
    \ |\n   | Process/ within   | sampling           | or list and Flow         |\n\
    \   | the IPFIX         |                    | Position, Flow state     |\n  \
    \ | Mediator          |                    |                          |\n   +-------------------+--------------------+--------------------------+\n\
    \    Table 1: Overview of Intermediate Flow Selection Process Techniques\n"
- title: 7.1.  Intermediate Flow Selection Process Parameters
  contents:
  - "7.1.  Intermediate Flow Selection Process Parameters\n   This section defines\
    \ what parameters are required to describe the\n   most common Intermediate Flow\
    \ Selection Process techniques.\n   Intermediate Flow Selection Process Parameters:\n\
    \   For Property Match Filtering:\n   -  Information Element as specified in [IANA-IPFIX]):\n\
    \      Specifies the Information Element that is used as the property in\n   \
    \   the filter expression.  Section 8 specifies the Information\n      Elements\
    \ that MUST be exported by an Intermediate Flow Selection\n      Process using\
    \ Property Match Filtering.\n   -  Selection Value or Value Interval:\n      Specifies\
    \ the value or interval of the filter expression.  Packets\n      and Flow Records\
    \ that have a value equal to the Selection Value or\n      within the Interval\
    \ will be selected.\n   For Hash-based Flow Filtering:\n   -  Hash Domain:\n \
    \     Specifies the bits from the packet or Flow that are taken as the\n     \
    \ hash input to the hash function.\n   -  Hash Function:\n      Specifies the\
    \ name of the hash function that is used to calculate\n      the hash value. \
    \ Possible hash functions are BOB [RFC5475], IP\n      Shift-XOR (IPSX) [RFC5475],\
    \ and CRC-32 [Bra75].\n   -  Hash Selection Range:\n      Flows that have a hash\
    \ value within the Hash Selection Range are\n      selected.  The Hash Selection\
    \ Range can be a value interval or\n      arbitrary hash values within the Hash\
    \ Range of the hash function.\n   -  Random Seed or Initializer Value:\n     \
    \ Some hash functions require an initializing value.  In order to\n      make\
    \ the selection decision more secure, one can choose a random\n      seed that\
    \ configures the hash function.\n   For Flow-state Dependent Intermediate Flow\
    \ Selection Process:\n   -  Frequency threshold:\n      Specifies the frequency\
    \ threshold s for Flow-state dependent Flow\n      Selection techniques that try\
    \ to find the most frequent items\n      within a dataset.  All Flows that exceed\
    \ the defined threshold\n      will be selected.\n   -  Accuracy parameter:\n\
    \      Specifies the accuracy parameter e for techniques that deal with\n    \
    \  the issue of mining frequent items in a dataset.  The accuracy\n      parameter\
    \ defines the maximum error, i.e., no Flows that have a\n      true frequency\
    \ less than (s - e) N are selected, where s is the\n      frequency threshold\
    \ and N is the total number of packets.\n   The above list of parameters for Flow-state\
    \ dependent Flow Selection\n   techniques is suitable for the presented frequent\
    \ item and lossy\n   counting algorithms.  Nevertheless, a variety of techniques\
    \ exist\n   with very specific parameters not defined here.\n   For Systematic\
    \ time-based Flow sampling:\n   -  Interval length (in usec):\n      Defines the\
    \ length of the sampling interval during which Flows are\n      selected.\n  \
    \ -  Spacing (in usec):\n      Defines the spacing in usec between the end of\
    \ one sampling\n      interval and the start of the next interval.\n   For Systematic\
    \ count-based Flow sampling:\n   -  Interval length:\n      Defines the number\
    \ of Flows that are selected within the sampling\n      interval.\n   -  Spacing:\n\
    \      Defines the spacing, in number of observed Flows, between the end\n   \
    \   of one sampling interval and the start of the next interval.\n   For random\
    \ n-out-of-N Flow sampling:\n   -  Population Size N:\n      The number of all\
    \ Flows in the Population from which the sample is\n      drawn.\n   -  Sampling\
    \ Size n:\n      The number of Flows that are randomly drawn from the population\
    \ N.\n   For probabilistic Flow sampling:\n   -  Sampling probability p:\n   \
    \   Defines the probability by which each of the observed Flows is\n      selected.\n"
- title: 7.2.  Description of Flow-State Dependent Packet Selection
  contents:
  - "7.2.  Description of Flow-State Dependent Packet Selection\n   The configuration\
    \ of Flow-state dependent packet selection has not\n   been described in [RFC5475];\
    \ therefore, the parameters are defined\n   here:\n   For Flow-state Dependent\
    \ Packet Selection:\n   -  Packet selection probability per possible Flow state\
    \ interval:\n      Defines multiple {Flow interval, packet selection probability}\n\
    \      value pairs that configure the sampling probability, depending on\n   \
    \   the current Flow state.\n   -  Additional parameters:\n      For the configuration\
    \ of Flow-state dependent packet selection,\n      additional parameters or packet\
    \ properties may be required, e.g.,\n      the packet size [EsVa01].\n"
- title: 8.  Information Model for Intermediate Flow Selection Process
  contents:
  - "8.  Information Model for Intermediate Flow Selection Process\n    Configuration\
    \ and Reporting\n   This section specifies the Information Elements that MUST\
    \ be exported\n   by an Intermediate Flow Selection Process in order to support\
    \ the\n   interpretation of measurement results from Flow measurements.  The\n\
    \   information is mainly used to report how many packets and Flows have\n   been\
    \ observed in total and how many of them were selected.  This\n   helps, for instance,\
    \ to calculate the Attained Selection Fraction\n   (see also [RFC5476]), which\
    \ is an important parameter for providing\n   an accuracy statement.  The IEs\
    \ can provide reporting information\n   about Flow Records, packets, or bytes.\
    \  The reported metrics are the\n   total number of elements and the number of\
    \ selected elements.  The\n   number of dropped elements can be derived from this\
    \ information.\n   Table 2 shows a list of Intermediate Flow Selection Process\n\
    \   Information Elements:\n   ID   Name                         | ID   Name\n\
    \   ----------------------------------+----------------------------------\n  \
    \ 301  selectionSequenceID          | 302  selectorID\n                      \
    \               |\n   390  flowSelectorAlgorithm        |   1  octetDeltaCount\n\
    \                                     |\n   391  flowSelectedOctetDeltaCount \
    \ |   2  packetDeltaCount\n                                     |\n   392  flowSelectedPacketDeltaCount\
    \ |   3  originalFlowsPresent\n                                     |\n   393\
    \  flowSelectedFlowDeltaCount   | 394  selectorIDTotalFlowsObserved\n        \
    \                             |\n   395  selectorIDTotalFlowsSelected | 396  samplingFlowInterval\n\
    \                                     |\n   397  samplingFlowSpacing         \
    \ | 309  samplingSize\n                                     |\n   310  samplingPopulation\
    \           | 311  samplingProbability\n                                     |\n\
    \   398  flowSamplingTimeInterval     | 399  flowSamplingTimeSpacing\n       \
    \                              |\n   326  digestHashValue              | 400 \
    \ hashFlowDomain\n                                     |\n   329  hashOutputRangeMin\
    \           | 330  hashOutputRangeMax\n                                     |\n\
    \   331  hashSelectedRangeMin         | 332  hashSelectedRangeMax\n          \
    \                           |\n   333  hashDigestOutput             | 334  hashInitialiserValue\n\
    \                                     |\n   320  absoluteError               \
    \ | 321  relativeError\n                                     |\n   336  upperCILimit\
    \                 | 337  lowerCILimit\n                                     |\n\
    \   338  confidenceLevel              |\n     Table 2: Intermediate Flow Selection\
    \ Process Information Elements\n"
- title: 9.  IANA Considerations
  contents:
  - '9.  IANA Considerations

    '
- title: 9.1.  Registration of Information Elements
  contents:
  - "9.1.  Registration of Information Elements\n   IANA has registered the following\
    \ IEs in the \"IPFIX Information\n   Elements\" registry at http://www.iana.org/assignments/ipfix/.\n"
- title: 9.1.1.  flowSelectorAlgorithm
  contents:
  - "9.1.1.  flowSelectorAlgorithm\n   Description:\n      This Information Element\
    \ identifies the Intermediate Flow\n      Selection Process technique (e.g., Filtering,\
    \ Sampling) that is\n      applied by the Intermediate Flow Selection Process.\
    \  Most of these\n      techniques have parameters; configuration parameter(s)\
    \ MUST be\n      clearly specified.  Further Information Elements are needed to\n\
    \      fully specify packet selection with these methods and all their\n     \
    \ parameters.  Further method identifiers may be added to the list\n      below.\
    \  It might be necessary to define new Information Elements\n      to specify\
    \ their parameters.  The flowSelectorAlgorithm registry\n      is maintained by\
    \ IANA.  New assignments for the registry will be\n      administered by IANA,\
    \ on a First Come First Served basis\n      [RFC5226], subject to Expert Review\
    \ [RFC5226].  Please note that\n      the purpose of the flow selection techniques\
    \ described in this\n      document is the improvement of measurement functions\
    \ as defined in\n      the Introduction (Section 1).  Before adding new flow selector\n\
    \      algorithms, their intended purposes should be determined,\n      especially\
    \ if those purposes contradict any policies defined in\n      [RFC2804].  The\
    \ designated expert(s) should consult with the\n      community if a request that\
    \ runs counter to [RFC2804] is received.\n      The registry can be updated when\
    \ specifications of the new\n      method(s) and any new Information Elements\
    \ are provided.  The\n      group of experts must double-check the flowSelectorAlgorithm\n\
    \      definitions and Information Elements with already-defined\n      flowSelectorAlgorithm\
    \ definitions and Information Elements for\n      completeness, accuracy, and\
    \ redundancy.  Those experts will\n      initially be drawn from the Working Group\
    \ Chairs and document\n      editors of the IPFIX and PSAMP Working Groups.  The\
    \ following\n      identifiers for Intermediate Flow Selection Process Techniques\
    \ are\n      defined here:\n         +----+------------------------+--------------------------+\n\
    \         | ID |       Technique        |      Parameters          |\n       \
    \  +----+------------------------+--------------------------+\n         | 1  |\
    \ Systematic count-based | flowSamplingInterval     |\n         |    | Sampling\
    \               | flowSamplingSpacing      |\n         +----+------------------------+--------------------------+\n\
    \         | 2  | Systematic time-based  | flowSamplingTimeInterval |\n       \
    \  |    | Sampling               | flowSamplingTimeSpacing  |\n         +----+------------------------+--------------------------+\n\
    \         | 3  | Random n-out-of-N      | samplingSize             |\n       \
    \  |    | Sampling               | samplingPopulation       |\n         +----+------------------------+--------------------------+\n\
    \         | 4  | Uniform probabilistic  | samplingProbability      |\n       \
    \  |    | Sampling               |                          |\n         +----+------------------------+--------------------------+\n\
    \         | 5  | Property Match         | Information Element      |\n       \
    \  |    | Filtering              | Value Range              |\n         +----+------------------------+--------------------------+\n\
    \         |   Hash-based Filtering      | hashInitialiserValue     |\n       \
    \  +----+------------------------+ hashFlowDomain           |\n         | 6  |\
    \ using BOB              | hashSelectedRangeMin     |\n         +----+------------------------+\
    \ hashSelectedRangeMax     |\n         | 7  | using IPSX             | hashOutputRangeMin\
    \       |\n         +----+------------------------+ hashOutputRangeMax       |\n\
    \         | 8  | using CRC              |                          |\n       \
    \  +----+------------------------+--------------------------+\n         | 9  |\
    \ Flow-state Dependent   |No agreed Parameters      |\n         |    | Intermediate\
    \ Flow      |                          |\n         |    | Selection Process  \
    \    |                          |\n         +----+------------------------+--------------------------+\n\
    \          Table 3: Intermediate Flow Selection Process Techniques\n   Abstract\
    \ Data Type: unsigned16\n   ElementId: 390\n   Data Type Semantics: identifier\n\
    \   Status: current\n"
- title: 9.1.2.  flowSelectedOctetDeltaCount
  contents:
  - "9.1.2.  flowSelectedOctetDeltaCount\n   Description:\n      This Information\
    \ Element specifies the volume in octets of all\n      Flows that are selected\
    \ in the Intermediate Flow Selection Process\n      since the previous report.\n\
    \   Abstract Data Type: unsigned64\n   ElementId: 391\n   Units: octets\n   Status:\
    \ current\n"
- title: 9.1.3.  flowSelectedPacketDeltaCount
  contents:
  - "9.1.3.  flowSelectedPacketDeltaCount\n   Description:\n      This Information\
    \ Element specifies the volume in packets of all\n      Flows that were selected\
    \ in the Intermediate Flow Selection\n      Process since the previous report.\n\
    \   Abstract Data Type: unsigned64\n   ElementId: 392\n   Units: packets\n   Status:\
    \ current\n"
- title: 9.1.4.  flowSelectedFlowDeltaCount
  contents:
  - "9.1.4.  flowSelectedFlowDeltaCount\n   Description:\n      This Information Element\
    \ specifies the number of Flows that were\n      selected in the Intermediate\
    \ Flow Selection Process since the last\n      report.\n   Abstract Data Type:\
    \ unsigned64\n   ElementId: 393\n   Units: flows\n   Status: current\n"
- title: 9.1.5.  selectorIDTotalFlowsObserved
  contents:
  - "9.1.5.  selectorIDTotalFlowsObserved\n   Description:\n      This Information\
    \ Element specifies the total number of Flows\n      observed by a Selector, for\
    \ a specific value of SelectorID.  This\n      Information Element should be used\
    \ in an Options Template scoped\n      to the observation to which it refers.\
    \  See Section 3.4.2.1 of the\n      IPFIX protocol document [RFC7011].\n   Abstract\
    \ Data Type: unsigned64\n   ElementId: 394\n   Units: flows\n   Status: current\n"
- title: 9.1.6.  selectorIDTotalFlowsSelected
  contents:
  - "9.1.6.  selectorIDTotalFlowsSelected\n   Description:\n      This Information\
    \ Element specifies the total number of Flows\n      selected by a Selector, for\
    \ a specific value of SelectorID.  This\n      Information Element should be used\
    \ in an Options Template scoped\n      to the observation to which it refers.\
    \  See Section 3.4.2.1 of the\n      IPFIX protocol document [RFC7011].\n   Abstract\
    \ Data Type: unsigned64\n   ElementId: 395\n   Units: flows\n   Status: current\n"
- title: 9.1.7.  samplingFlowInterval
  contents:
  - "9.1.7.  samplingFlowInterval\n   Description:\n      This Information Element\
    \ specifies the number of Flows that are\n      consecutively sampled.  A value\
    \ of 100 means that 100 consecutive\n      Flows are sampled.  For example, this\
    \ Information Element may be\n      used to describe the configuration of a systematic\
    \ count-based\n      Sampling Selector.\n   Abstract Data Type: unsigned64\n \
    \  ElementId: 396\n   Units: flows\n   Status: current\n"
- title: 9.1.8.  samplingFlowSpacing
  contents:
  - "9.1.8.  samplingFlowSpacing\n   Description:\n      This Information Element\
    \ specifies the number of Flows between two\n      \"samplingFlowInterval\"s.\
    \  A value of 100 means that the next\n      interval starts 100 Flows (which\
    \ are not sampled) after the\n      current \"samplingFlowInterval\" is over.\
    \  For example, this\n      Information Element may be used to describe the configuration\
    \ of a\n      systematic count-based Sampling Selector.\n   Abstract Data Type:\
    \ unsigned64\n   ElementId: 397\n   Units: flows\n   Status: current\n"
- title: 9.1.9.  flowSamplingTimeInterval
  contents:
  - "9.1.9.  flowSamplingTimeInterval\n   Description:\n      This Information Element\
    \ specifies the time interval in\n      microseconds during which all arriving\
    \ Flows are sampled.  For\n      example, this Information Element may be used\
    \ to describe the\n      configuration of a systematic time-based Sampling Selector.\n\
    \   Abstract Data Type: unsigned64\n   ElementId: 398\n   Units: microseconds\n\
    \   Status: current\n"
- title: 9.1.10.  flowSamplingTimeSpacing
  contents:
  - "9.1.10.  flowSamplingTimeSpacing\n   Description:\n      This Information Element\
    \ specifies the time interval in\n      microseconds between two \"flowSamplingTimeInterval\"\
    s.  A value of\n      100 means that the next interval starts 100 microseconds\
    \ (during\n      which no Flows are sampled) after the current\n      \"flowsamplingTimeInterval\"\
    \ is over.  For example, this Information\n      Element may be used to describe\
    \ the configuration of a systematic\n      time-based Sampling Selector.\n   Abstract\
    \ Data Type: unsigned64\n   ElementId: 399\n   Units: microseconds\n   Status:\
    \ current\n"
- title: 9.1.11.  hashFlowDomain
  contents:
  - "9.1.11.  hashFlowDomain\n   Description:\n      This Information Element specifies\
    \ the Information Elements that\n      are used by the Hash-based Flow Selector\
    \ as the Hash Domain.\n   Abstract Data Type: unsigned16\n   ElementId: 400\n\
    \   Data Type Semantics: identifier\n   Status: Current\n"
- title: 9.2.  Registration of Object Identifier
  contents:
  - "9.2.  Registration of Object Identifier\n   IANA has registered the following\
    \ OID in the IPFIX-SELECTOR-MIB\n   Functions subregistry at http://www.iana.org/assignments/smi-numbers\n\
    \   according to the procedures set forth in [RFC6615].\n   +---------+-----------------------+---------------------+-----------+\n\
    \   | Decimal | Name                  | Description         | Reference |\n  \
    \ +---------+-----------------------+---------------------+-----------+\n   |\
    \ 8       | flowSelectorAlgorithm | This Object         | [RFC7014] |\n   |  \
    \       |                       | Identifier          |           |\n   |    \
    \     |                       | identifies the      |           |\n   |      \
    \   |                       | Intermediate Flow   |           |\n   |        \
    \ |                       | Selection Process   |           |\n   |         |\
    \                       | technique (e.g.,    |           |\n   |         |  \
    \                     | Filtering,          |           |\n   |         |    \
    \                   | Sampling) that is   |           |\n   |         |      \
    \                 | applied by the      |           |\n   |         |        \
    \               | Intermediate Flow   |           |\n   |         |          \
    \             | Selection Process   |           |\n   +---------+-----------------------+---------------------+-----------+\n\
    \               Table 4: Object Identifiers to Be Registered\n"
- title: 10.  Security and Privacy Considerations
  contents:
  - "10.  Security and Privacy Considerations\n   Flow data exported by Exporting\
    \ Processes, and collected by\n   Collecting Processes, can be sensitive for privacy\
    \ reasons and need\n   to be protected.  Privacy considerations for collected\
    \ data are\n   provided in [RFC7011].\n   Some of the described Intermediate Flow\
    \ Selection Process techniques\n   (e.g., Flow sampling, hash-based Flow Filtering)\
    \ aim at the selection\n   of a representative subset of flows in order to estimate\
    \ parameters\n   of the population.  An adversary may have incentives to influence\
    \ the\n   selection of flows, for example, to circumvent accounting or to avoid\n\
    \   the detection of packets that are part of an attack.\n   Security considerations\
    \ concerning the choice of a hash function for\n   Hash-based packet selection\
    \ have been discussed in Section 6.2.3 of\n   [RFC5475] and are also appropriate\
    \ for Hash-based Flow Selection.\n   [RFC5475] discusses the possibility of crafting\
    \ Packet Streams that\n   are disproportionately selected or can be used to discover\
    \ hash\n   function parameters.  It also describes vulnerabilities of different\n\
    \   hash functions to these attacks and discusses practices to minimize\n   these\
    \ vulnerabilities.\n   For other sampling approaches, an adversary can gain knowledge\
    \ about\n   the start and stop triggers in time-based systematic Sampling, e.g.,\n\
    \   by sending test packets.  This knowledge might allow adversaries to\n   modify\
    \ their send schedule in such a way that their packets are\n   disproportionately\
    \ selected or not selected.  For random Sampling, an\n   input to the encryption\
    \ process, like the Initialization Vector of\n   the CBC (Cipher Block Chaining)\
    \ mode, should be used to prevent an\n   adversary from predicting the selection\
    \ decision [Dw01].\n   Further security threats can occur when Intermediate Flow\
    \ Selection\n   Process parameters are configured or communicated to other entities.\n\
    \   The protocol(s) for the configuration and reporting of Intermediate\n   Flow\
    \ Selection Process parameters are out of scope for this document.\n   Nevertheless,\
    \ a set of initial requirements for future configuration\n   and reporting protocols\
    \ are stated below:\n   1.  Protection against disclosure of configuration information:\n\
    \       Intermediate Flow Selection Process configuration information\n      \
    \ describes the Intermediate Flow Selection Process and its\n       parameters.\
    \  This information can be useful to attackers.\n       Attackers may craft packets\
    \ that never fit the selection criteria\n       in order to prevent Flows from\
    \ being seen by the Intermediate\n       Flow Selection Process.  They can also\
    \ craft a lot of packets\n       that fit the selection criteria and overload\
    \ or bias subsequent\n       processes.  Therefore, any transmission of configuration\
    \ data\n       (e.g., to configure a process or to report its actual status)\n\
    \       should be protected by encryption.\n   2.  Protection against modification\
    \ of configuration information:\n       Sending incorrect configuration information\
    \ to the Intermediate\n       Flow Selection Process can lead to a malfunction\
    \ of the\n       Intermediate Flow Selection Process.  Additionally, reporting\n\
    \       incorrect configuration information from the Intermediate Flow\n     \
    \  Selection Process to other processes can lead to incorrect\n       estimations\
    \ at subsequent processes.  Therefore, any protocol\n       that transmits configuration\
    \ information should prevent an\n       attacker from modifying configuration\
    \ information.  Data\n       integrity can be achieved by authenticating the data.\n\
    \   3.  Protection against malicious nodes sending configuration\n       information:\n\
    \       The remote configuration of Intermediate Flow Selection Process\n    \
    \   techniques should be protected against access by unauthorized\n       nodes.\
    \  This can be achieved by access control lists at the\n       device that hosts\
    \ the Intermediate Flow Selection Process (e.g.,\n       IPFIX Exporter, IPFIX\
    \ Mediator, or IPFIX Collector) and by source\n       authentication.  The reporting\
    \ of configuration data from an\n       Intermediate Flow Selection Process has\
    \ to be protected in the\n       same way.  That means that protocols that report\
    \ configuration\n       data from the Intermediate Flow Selection Process to other\n\
    \       processes also need to protect against unauthorized nodes\n       reporting\
    \ configuration information.\n   The security threats that originate from communicating\
    \ configuration\n   information to and from Intermediate Flow Selection Processes\
    \ cannot\n   be assessed solely with the information given in this document. \
    \ A\n   further and more detailed assessment of security threats is necessary\n\
    \   when a specific protocol for the configuration or reporting\n   configuration\
    \ data is proposed.\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   We would like to thank the IPFIX group, especially Brian\
    \ Trammell,\n   Paul Aitken, and Benoit Claise, for fruitful discussions and for\n\
    \   proofreading the document.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC5475]     Zseby, T., Molina, M., Duffield, N., Niccolini,\
    \ S., and\n                 F. Raspall, \"Sampling and Filtering Techniques for\
    \ IP\n                 Packet Selection\", RFC 5475, March 2009.\n   [RFC5476]\
    \     Claise, B., Johnson, A., and J. Quittek, \"Packet\n                 Sampling\
    \ (PSAMP) Protocol Specifications\", RFC 5476,\n                 March 2009.\n\
    \   [RFC6615]     Dietz, T., Kobayashi, A., Claise, B., and G. Muenz,\n      \
    \           \"Definitions of Managed Objects for IP Flow Information\n       \
    \          Export\", RFC 6615, June 2012.\n   [RFC7011]     Claise, B., Ed., Trammell,\
    \ B., Ed., and P. Aitken,\n                 \"Specification of the IP Flow Information\
    \ Export\n                 (IPFIX) Protocol for the Exchange of Flow Information\"\
    ,\n                 STD 77, RFC 7011, September 2013.\n   [RFC7012]     Claise,\
    \ B., Ed. and B. Trammell, Ed., \"Information\n                 Model for IP Flow\
    \ Information Export (IPFIX)\",\n                 RFC 7012, September 2013.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [Bra75]       Brayer, K., \"Evaluation of 32\
    \ Degree Polynomials in\n                 Error Detection on the SATIN IV Autovon\
    \ Error\n                 Patterns\", National Technical Information Service,\n\
    \                 August 1975.\n   [CoHa08]      Cormode, G. and M. Hadjieleftheriou,\
    \ \"Finding Frequent\n                 Items in Data Streams\", Proceedings of\
    \ the 34th\n                 International Conference on Very Large DataBases\n\
    \                 (VLDB), Auckland, New Zealand, Volume 1, Issue 2, pages\n  \
    \               1530-1541, August 2008.\n   [DuLT01]      Duffield, N., Lund,\
    \ C., and M. Thorup, \"Charging from\n                 Sampled Network Usage\"\
    , ACM SIGCOMM Internet\n                 Measurement Workshop (IMW) 2001, pages\
    \ 245-256, San\n                 Francisco, CA, USA, November 2001.\n   [Dw01]\
    \        Dworkin, M., \"Recommendation for Block Cipher Modes of\n           \
    \      Operation - Methods and Techniques\", NIST Special\n                 Publication\
    \ 800-38A, December 2001.\n   [EsVa01]      Estan, C. and G,. Varghese, \"New\
    \ Directions in Traffic\n                 Measurement and Accounting: Focusing\
    \ on the Elephants,\n                 Ignoring the Mice\", ACM SIGCOMM Internet\
    \ Measurement\n                 Workshop (IMW) 2001, San Francisco, CA, USA,\n\
    \                 November 2001.\n   [IANA-IPFIX]  IANA, \"IP Flow Information\
    \ Export (IPFIX) Entities\n                 Registry\", <http://www.iana.org/assignments/ipfix/>.\n\
    \   [KaPS03]      Karp, R., Papadimitriou, C., and S. Shenker, \"A simple\n  \
    \               algorithm for finding frequent elements in sets and\n        \
    \         bags\", ACM Transactions on Database Systems, Volume 28,\n         \
    \        pages 51-55, March 2003.\n   [MSZC10]      Mai, J., Sridharan, A., Zang,\
    \ H., and C. Chuah, \"Fast\n                 Filtered Sampling\", Computer Networks\
    \ Volume 54, Issue\n                 11, pages 1885-1898, ISSN 1389-1286, August\
    \ 2010.\n   [MaMo02]      Manku, G. and R. Motwani, \"Approximate Frequency Counts\n\
    \                 over Data Streams\", Proceedings of the 28th\n             \
    \    International Conference on Very Large DataBases\n                 (VLDB),\
    \ Hong Kong, China, pages 346-357, August 2002.\n   [RFC2804]     IAB and IESG,\
    \ \"IETF Policy on Wiretapping\", RFC 2804,\n                 May 2000.\n   [RFC3917]\
    \     Quittek, J., Zseby, T., Claise, B., and S. Zander,\n                 \"\
    Requirements for IP Flow Information Export (IPFIX)\",\n                 RFC 3917,\
    \ October 2004.\n   [RFC5226]     Narten, T. and H. Alvestrand, \"Guidelines for\
    \ Writing\n                 an IANA Considerations Section in RFCs\", BCP 26,\n\
    \                 RFC 5226, May 2008.\n   [RFC5470]     Sadasivan, G., Brownlee,\
    \ N., Claise, B., and J.\n                 Quittek, \"Architecture for IP Flow\
    \ Information Export\",\n                 RFC 5470, March 2009.\n   [RFC6183]\
    \     Kobayashi, A., Claise, B., Muenz, G., and K. Ishibashi,\n              \
    \   \"IP Flow Information Export (IPFIX) Mediation:\n                 Framework\"\
    , RFC 6183, April 2011.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Salvatore D'Antonio\n   University of Napoli \"Parthenope\"\
    \n   Centro Direzionale di Napoli Is. C4\n   Naples  80143\n   Italy\n   Phone:\
    \ +39 081 5476766\n   EMail: salvatore.dantonio@uniparthenope.it\n   Tanja Zseby\n\
    \   CAIDA/FhG FOKUS\n   San Diego Supercomputer Center (SDSC)\n   University of\
    \ California, San Diego (UCSD)\n   9500 Gilman Drive\n   La Jolla, CA  92093-0505\n\
    \   USA\n   EMail: tanja.zseby@tuwien.ac.at\n   Christian Henke\n   Tektronix\
    \ Communications Berlin\n   Wohlrabedamm 32\n   Berlin  13629\n   Germany\n  \
    \ Phone: +49 17 2323 8717\n   EMail: christian.henke@tektronix.com\n   Lorenzo\
    \ Peluso\n   University of Napoli\n   Via Claudio 21\n   Napoli  80125\n   Italy\n\
    \   Phone: +39 081 7683821\n   EMail: lorenzo.peluso@unina.it\n"
