Abstract This document presents a retrieval method YANG data model for connectionless Operations, Administration, and Maintenance (OAM) protocols.
It provides technology independent RPC operations for OAM protocols that use connectionless communication.
The retrieval methods model herein presented can be extended to include technology  specific details.
There are two key benefits of this approach: First, it leads to uniformity between OAM protocols.
Second, it supports both nested OAM workflows (i.e., performing OAM functions at different or the same levels through a unified interface) as well as interactive OAM workflows (i.e., performing OAM functions at the same levels through a unified interface).
Introduction Operations, Administration, and Maintenance (OAM) are important networking functions that allow operators to: 1.
monitor network communications (i.e., reachability verification and Continuity Check
troubleshoot failures (i.e., fault verification and localization) 3.
monitor service level agreements and performance (i.e., performance management)
An overview of OAM tools is presented in [RFC7276].
Ping and Traceroute [RFC4443], as well as Bidirectional Forwarding Detection (BFD) [RFC5880], are well known fault verification and isolation tools, respectively, for IP networks [RFC792].
Over the years, different technologies have developed similar toolsets for equivalent purposes.
This document presents an on demand retrieval method YANG data model for OAM protocols that use connectionless communication.
This model provides technology independent RPC operations for OAM protocols that use connectionless communication (i.e., connectionless OAM).
It is separated from the generic YANG data model for connectionless
OAM [RFC8532] and can avoid mixing the models for the retrieved data from the retrieval procedures.
It is expected that retrieval procedures will evolve faster than the data model [RFC8532] and will allow new procedures to be defined for retrieval of the same data defined by the generic YANG data model for connectionless OAM.
Conventions Used in This document
The following terms are defined in [RFC6241] and are used in this document:  client  configuration data  server  state data
The following terms are defined in [RFC6020] and are used in this document:  augment  data model
The terminology for describing YANG data models is found in [RFC6020].
MAC Media Access Control RPC Remote Procedure Call RPC Operation A specific Remote Procedure Call 2.2.
Tree Diagrams Tree diagrams used in this document follow the notation defined in [RFC8340].
Overview of the Connectionless OAM Retrieval Methods Model
This document describes an on demand retrieval method YANG data model for OAM protocols that use connectionless communication.
This model provides technology independent retrieval procedures (RPC operations) for connectionless OAM protocols.
It provides a flexible way to retrieve the data that is defined by the "ietf connectionless  oam.yang" module [RFC8532].
The RPC model facilitates issuing commands to a Network Configuration Protocol (NETCONF) server (in this case to the device that needs to execute the OAM command) and obtaining a response.
Under the "connectionless oam methods" module, we summarize common OAM functions and define two generic RPC operations: 'continuity  check' and 'path discovery'.
In practice, these RPC operations are activated on demand and are supported by corresponding technology  specific OAM tools [RFC7276].
For example, for the IP OAM model, the Continuity Check RPC corresponds to the IP Ping [RFC792] [RFC4443], while the path discovery RPC operation corresponds to IP Traceroute [RFC792]
Note that the RPC operation presented in this document is the base building block, which is used to derive a model for a technology  specific OAM (i.e., ICMP Ping [RFC792]
[RFC4443] and Label Switched Path (LSP)
This base building block should be extended with corresponding technology specific parameters.
To facilitate this for future enhancements to data retrieval methods, the RPCs are captured under a separate module.
The generic 'tp address' grouping is used as data input from different RPCs described in this document.
The generic 'path  discovery data' and 'continuity check data' groupings defined by the "ietf connectionless oam.yang" module [RFC8532] are used as data outputs from different RPCs described in this document.
Similar methods, including other RPCs, can retrieve the data using the same data model (i.e., the "ietf connectionless oam.yang" module).
rpc continuity check { if feature
oam:continuity check; description "Continuity Check RPC operation as per RFC 7276.
id meta data; } description "
id meta data { type identityref { base protocol i
The complete data hierarchy related to the Connectionless OAM Retrieval Methods YANG data model is presented below.
ietf connectionless oam methods rpcs:
ro packets out of seq count?
ro packets out of seq count?
ro path trace info list
ro timestamp 80bit {ptp long format}?
ro icmp timestamp 32bit {icmp timestamp}?
if:interface ref  ro egress intf name?
if:interface ref  ro queue depth?
uint64 Data Hierarchy of OAM Retrieval Methods 4.
OAM Retrieval Methods YANG Module <CODE BEGINS>
" module ietf connectionless oam methods
>"; description "This YANG module defines the RPC operations for connectionless OAM to be used within the IETF in a protocol independent manner.
It is assumed that each protocol maps corresponding abstracts to its native format.
Each protocol may extend the YANG data model defined here to include protocol specific extensions.
2019 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 8533; see the RFC itself for full legal notices."
d proprietary { base protocol id
id mpls tp { base protocol id; description "The MPLS TP protocol."
; } identity status code { description "
This is base identity for a status code."
; } identity success reach { base status code; description "Indicates that the destination being verified is reachable (see RFC 7276).
d meta data { description "
; } leaf outbound interface { type if:interface ref
oam:continuity check"; description "Continuity Check RPC operation as per RFC 7276."
An Overview of Operations, Administration, and Maintenance (OAM) Tools"; input { uses rpc input parameters; uses
:session type { description "
The value of the count will be set to zero (0) on creation and will thereafter increase monotonically until it reaches a maximum value of 2^32 1 (4294967295 decimal), when it wraps around and starts increasing again from zero."
By default, the packet number is set to 5."
; } leaf ttl { type uint8; default "255"; description "Time to live (TTL) used to limit the lifetime of data packets transmitted in the network to prevent looping.
The TTL value is decremented for every hop that the packet traverses.
This could be a standard protocol (e.g., TCP/IP protocols, MPLS, etc.) or a proprietary protocol as identified by this field."
; } leaf protocol id meta data { type identityref { base protocol
id meta data; } description "
An optional metadata related to the protocol ID.
For example, this could be the Internet Protocol number for standard Internet Protocols used for help with protocol processing."
; } leaf status code { type identityref { base status code; } mandatory true; description "Status code for Continuity Check RPC operation.
This could be a basic status code (e.g., destination is reachable or destination is not reachable; see RFC 7276) or some customized status code as identified by this field."
If the basic status code is destination reachable, this status sub code doesn't need to be specified.
If the basic status code is destination unreachable, the status sub code can be used to specify the detailed reasons.
This could be a basic sub status code (such as an invalid Continuity Check) or other error codes specific to the protocol under use for the Continuity Checks.
For example, if ICMP is the protocol under use, the error codes defined in RFC 4443 can be used to specify the reasons specific to ICMP.
This technology specific status sub code can be defined in technology specific models."; reference "RFC 4443: The IETF Administrative Oversight Committee (IAOC)
Member Selection Guidelines and Process."
oam:path discovery"; description "Path discovery RPC operation as per RFC 7276."
An Overview of Operations, Administration, and Maintenance (OAM) Tools"; input { uses rpc input parameters; uses
:session type { description "
This could be a standard protocol (e.g., TCP/IP protocols, MPLS, etc.) or a proprietary protocol as identified by this field."
; } leaf protocol id meta data { type identityref { base protocol
id meta data; } description "
An optional metadata related to the protocol ID.
For example, this could be the Internet Protocol number for standard Internet Protocols used for help with protocol processing."
; } leaf status code { type identityref { base status code; } mandatory true; description "Status code for Continuity Check RPC operation.
This could be a basic status code (e.g., destination is reachable or destination is not reachable) or some customized status code as identified by this field."
; } leaf status sub code { type identityref { base status sub code; } mandatory true; description "An optional status sub code for Continuity Check RPC operation.
If the basic status code is destination reachable, this status sub code doesn't need to be specified.
If the basic status code is destination unreachable, the status sub code can be used to specify the detailed reasons.
This could be a basic sub status code (such as an invalid Continuity Check) or other error codes specific to the protocol under use for Continuity Checks.
For example, if ICMP is the protocol under use, the error codes defined in RFC 4443 can be used to specify the reasons specific to ICMP.
This technology specific status sub code can be defined in technology specific models."; reference "RFC 4443: The IETF Administrative Oversight Committee (IAOC)
Member Selection Guidelines and Process."
The YANG module specified in this document defines a schema for data that is designed to be accessed via network management protocols such as NETCONF [RFC6241] or RESTCONF [RFC8040].
The lowest NETCONF layer is the secure transport layer, and the mandatory to implement secure transport is Secure Shell (SSH) [RFC6242].
The lowest RESTCONF layer is HTTPS, and the mandatory to implement secure transport is TLS [RFC8446].
The Network Configuration Access Control Model (NACM)
[RFC8341] provides the means to restrict access for particular NETCONF or RESTCONF users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content.
Some of the RPC operations in this YANG module may be considered sensitive or vulnerable in some network environments.
It is thus important to control access to these operations.
These are the operations and their sensitivity/vulnerability:
These operations are used to retrieve the data from the device that needs to execute the OAM command.
Unauthorized source access to some sensitive information in the above data may be used for network reconnaissance or lead to denial of service attacks on both the local device and the network.
This document registers a URI in the "IETF XML Registry" [RFC3688].
The following registration has been made: URI:
N/A, the requested URI is an XML namespace.
This document registers a YANG module in the "YANG Module Names" registry [RFC6020].
yang:ietf connectionless oam methods prefix:
Connectionless OAM Method Module Example
The following is an example of extensions possible to the "ietf connectionless oam methods" YANG data model defined in this document.
The snippet below depicts an example of augmenting the "ietf connectionless oam methods" YANG data model with ICMP ping attributes: augment "/cloam
Example of New Retrieval Procedures Model
As discussed in the Introduction section of this document, the new retrieval procedures can be defined for retrieval of the same data defined by the base YANG data model for connectionless OAM protocols.
This appendix demonstrates how the base connectionless OAM data model can be extended to support persistent data retrieval besides on demand retrieval procedures defined in Section 3, i.e., first retrieve a persistent id based on the destination test point location information, and then retrieve the export details based on persistent id.
Internet Protocol Flow Information Export (IPFIX)
[RFC7011] or YANG Push [YANG Push] are currently outlined here as data export options.
Additional export options can be added in the future.
The YANG module "example cl oam persistent methods" shown below is intended as an illustration rather than a real definition of an RPC operation model for persistent data retrieval.
For the sake of brevity, this module does not obey all the guidelines specified in [RFC8407].
oam persistent methods { namespace "
http://example.com/cl oam persistent methods"; prefix pcloam methods; import ietf interfaces { prefix if; } import ietf connectionless oam { prefix cl oam; } import ietf yang types { prefix yang; } identity export method { description "Base identity to represent a conceptual export method."
; } identity ipfix export { base export method; description "IPFIX based export.
; } identity fail path verification { base status code; description "Indicates that the path verification fails."
; } identity status sub code { description "Base status sub code."
; } identity invalid cc { base status sub code; description "Indicates that the Continuity Check message is invalid."
; } identity invalid pd { base status sub code; description "Indicates that the path discovery message is invalid."
; } typedef export method { type identityref { base export method; } description "Export method type."
; } typedef change type { type enumeration { enum create { description "Change due to a create."
; } enum delete { description "Change due to a delete."
; } enum modify { description "Change due to an update."
"cl oam:continuity check"; description "Obtains Continuity Check persistent identification given mapping parameters as input.
oam:session type; leaf source interface
{ type if:interface ref; description "Source interface."
; } leaf outbound interface { type if:interface ref; description "Outbound interface."
; } leaf vrf { type
cl oam:routing instance ref; description "VRF instance."
This could be a standard protocol (e.g., TCP/IP protocols, MPLS, etc.) or a proprietary protocol as identified by this field."
; } leaf protocol id meta data { type uint64; description "An optional metadata related to the protocol ID.
For example, this could be the Internet Protocol number for standard Internet Protocols used for help with protocol processing."
This could be a standard protocol (e.g., TCP/IP protocols, MPLS, etc.) or a proprietary protocol as identified by this field."
; } leaf protocol id meta data { type uint64; description "An optional metadata related to the protocol ID.
For example, this could be the Internet Protocol number for standard Internet Protocols used for help with protocol processing."
"cl oam:path discovery"; description "Obtains persistent path discovery identification."
oam:session type; leaf source interface
{ type if:interface ref; description "Source interface."
; } leaf outbound interface { type if:interface ref; description "Outbound interface."
; } leaf vrf { type
; } mandatory true; description "Protocol used.
This could be a standard protocol (e.g., TCP/IP protocols, MPLS, etc.) or a proprietary protocol as identified by this field."
; } leaf protocol id meta data { type uint64; description "An optional metadata related to the protocol ID.
For example, this could be the Internet Protocol number for standard Internet Protocols used for help with protocol processing."
This could be a standard protocol (e.g., TCP/IP protocols, MPLS, etc.) or a proprietary protocol as identified by this field."
; } leaf protocol id meta data { type uint64; description "An optional metadata related to the protocol ID.
For example, this could be the Internet Protocol number for standard Internet Protocols used for help with protocol processing."
