- title: __initial_text__
  contents:
  - "             Cabletron's SecureFast VLAN Operational Model\n                \
    \              Version 1.8\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Cabletron's SecureFast VLAN (SFVLAN) product implements a distributed\n\
    \   connection-oriented switching protocol that provides fast forwarding\n   of\
    \ data packets at the MAC layer.  The product uses the concept of\n   virtual\
    \ LANs (VLANs) to determine the validity of call connection\n   requests and to\
    \ scope the broadcast of certain flooded messages.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n          4.1.2 Inverse Resolve Server.........................\
    \ 15\n          4.1.3 Local Delete Server............................ 18\n   \
    \   4.2 Topology Service Center.............................. 18\n          4.2.1\
    \ Neighbor Discovery Server...................... 18\n          4.2.2 Spanning\
    \ Tree Server........................... 18\n                4.2.2.1 Creating\
    \ and Maintaining\n                                   the Spanning Tree...........\
    \ 19\n                4.2.2.2 Remote Blocking........................ 19\n   \
    \       4.2.3 Link State Server.............................. 20\n      4.3 Resolve\
    \ Service Center............................... 21\n          4.3.1 Table Server...................................\
    \ 22\n          4.3.2 Local Server................................... 22\n   \
    \       4.3.3 Subnet Server.................................. 22\n          4.3.4\
    \ Interswitch Resolve Server..................... 22\n          4.3.5 Unresolvable\
    \ Server............................ 23\n          4.3.6 Block Server...................................\
    \ 23\n      4.4 Policy Service Center................................ 24\n   \
    \       4.4.1 Unicast Rules Server........................... 24\n      4.5 Connect\
    \ Service Center............................... 25\n          4.5.1 Local Server...................................\
    \ 25\n          4.5.2 Link State Server.............................. 25\n   \
    \       4.5.3 Directory Server............................... 26\n      4.6 Filter\
    \ Service Center................................ 26\n      4.7 Path Service Center..................................\
    \ 26\n          4.7.1 Link State Server.............................. 26\n   \
    \       4.7.2 Spanning Tree Server........................... 27\n      4.8 Flood\
    \ Service Center................................. 27\n          4.8.1 Tag-Based\
    \ Flood Server......................... 27\n   5. Monitoring Call Connections..............................\
    \ 27\n      5.1 Definitions.......................................... 27\n   \
    \   5.2 Tapping a Connection................................. 28\n          5.2.1\
    \ Types of Tap Connections....................... 28\n          5.2.2 Locating\
    \ the Probe and Establishing\n                                   the Tap Connection..........\
    \ 29\n          5.2.3 Status Field................................... 30\n   \
    \   5.3 Untapping a Connection............................... 31\n   6. Interswitch\
    \ Message Protocol (ISMP)...................... 32\n      6.1 General Packet Structure.............................\
    \ 32\n          6.1.1 Frame Header................................... 32\n   \
    \       6.1.2 ISMP Packet Header............................. 33\n           \
    \     6.1.2.1 Version 2.............................. 33\n                6.1.2.2\
    \ Version 3.............................. 34\n          6.1.3 ISMP Message Body..............................\
    \ 35\n      6.2 Interswitch BPDU Message............................. 35\n   \
    \   6.3 Interswitch Remote Blocking Message.................. 36\n      6.4 Interswitch\
    \ Resolve Message.......................... 37\n          6.4.1 Prior to Version\
    \ 1.8........................... 37\n          6.4.2 Version 1.8....................................\
    \ 41\n      6.5 Interswitch New User Message......................... 46\n   \
    \   6.6 Interswitch Tag-Based Flood Message.................. 49\n          6.6.1\
    \ Prior to Version 1.8........................... 49\n          6.6.2 Version\
    \ 1.8.................................... 52\n      6.7 Interswitch Tap/Untap\
    \ Message........................ 55\n   7. Security Considerations..................................\
    \ 58\n   8. References............................................... 58\n   9.\
    \ Authors' Addresses....................................... 59\n   10. Full Copyright\
    \ Statement................................ 60\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This memo is being distributed to members of the Internet\
    \ community\n   in order to solicit reactions to the proposals contained herein.\n\
    \   While the specification discussed here may not be directly relevant\n   to\
    \ the research problems of the Internet, it may be of interest to\n   researchers\
    \ and implementers.\n"
- title: 1.1 Data Conventions
  contents:
  - "1.1 Data Conventions\n   The methods used in this memo to describe and picture\
    \ data adhere to\n   the standards of Internet Protocol documentation [RFC1700].\
    \  In\n   particular:\n      The convention in the documentation of Internet Protocols\
    \ is to\n      express numbers in decimal and to picture data in \"big-endian\"\
    \n      order.  That is, fields are described left to right, with the most\n \
    \     significant octet on the left and the least significant octet on\n     \
    \ the right.\n      The order of transmission of the header and data described\
    \ in this\n      document is resolved to the octet level.  Whenever a diagram\
    \ shows\n      a group of octets, the order of transmission of those octets is\n\
    \      the normal order in which they are read in English.\n      Whenever an\
    \ octet represents a numeric quantity the left most bit\n      in the diagram\
    \ is the high order or most significant bit.  That\n      is, the bit labeled\
    \ 0 is the most significant bit.\n      Similarly, whenever a multi-octet field\
    \ represents a numeric\n      quantity the left most bit of the whole field is\
    \ the most\n      significant bit.  When a multi-octet quantity is transmitted\
    \ the\n      most significant octet is transmitted first.\n"
- title: 1.2 Definitions of Commonly Used Terms
  contents:
  - "1.2 Definitions of Commonly Used Terms\n   This section contains a collection\
    \ of definitions for terms that have\n   a specific meaning for the SFVLAN product\
    \ and that are used\n   throughout the text.\n   Switch ID\n      A 10-octet value\
    \ that uniquely identifies an SFVLAN switch within\n      the switch fabric. \
    \ The value consists of the 6-octet base MAC\n      address of the switch, followed\
    \ by 4 octets of zeroes.\n   Network link\n      The physical connection between\
    \ two switches.  A network link is\n      associated with a network interface\
    \ (or port) of a switch.\n   Network port\n      An interface on a switch that\
    \ attaches to another switch.\n   Access port\n      An interface on a switch\
    \ that attaches to a user endstation.\n   Port ID\n      A 10-octet value that\
    \ uniquely identifies an interface of a\n      switch.  The value consists of\
    \ the 6-octet base MAC address of the\n      switch, followed by the 4-octet local\
    \ port number of the\n      interface.\n   Neighboring switches\n      Two switches\
    \ attached to a common (network) link.\n   Call connection\n      A mapping of\
    \ user traffic through a switch that correlates the\n      source and destination\
    \ address pair specified within the packet to\n      an inport and outport pair\
    \ on the switch.\n   Call connection path\n      A set of 0 to 7 network links\
    \ over which user traffic travels\n      between the source and destination endstations.\
    \  Call connection\n      paths are selected from a list of alternate equal cost\
    \ paths\n      calculated by the VLS protocol [IDvlsp], and are chosen to load\n\
    \      balance traffic across the fabric.\n   Ingress switch\n      The owner\
    \ switch of the source endstation of a call connection.\n      That is, the source\
    \ endstation is attached to one of the local\n      access ports of the switch.\n\
    \   Egress switch\n      The owner switch of the destination endstation of a call\n\
    \      connection.  That is, the destination endstation is attached to\n     \
    \ one of the local access ports of the switch.\n   Intermediate switches\n   \
    \   Any switch along the call connection path on which user traffic\n      enters\
    \ and leaves over network links.  Note that the following\n      types of connections\
    \ have no intermediate switches:\n      -  Call connections between source and\
    \ destination endstations\n         that are attached to the same switch -- that\
    \ is, the ingress\n         switch is the same as the egress switch.  Note also\
    \ that the\n         path for this type of connection consists of 0 network links.\n\
    \      -  Call connections where the ingress and egress switches are\n       \
    \  physical neighbors connected by a single network link.  The\n         path\
    \ for this type of connection consists of a single network\n         link.\n \
    \  InterSwitch Message protocol (ISMP)\n      The protocol used for interswitch\
    \ communication between SFVLAN\n      switches.\n   Undirected messages\n    \
    \  Messages that are (potentially) sent to all SFVLAN switches in the\n      switch\
    \ fabric -- that is, they are not directed to any particular\n      switch.  ISMP\
    \ messages with a message type of 5, 7 or 8 are\n      undirected messages.\n\
    \   Switch flood path\n      The path used to send undirected messages throughout\
    \ the switch\n      fabric.  The switch flood path is formed using a spanning\
    \ tree\n      algorithm that provides a single path through the switch fabric\n\
    \      that guarantees loop-free delivery to every other SFVLAN switch in\n  \
    \    the fabric.\n   Upstream Neighbor\n      That switch attached to the inport\
    \ of the switch flood path --\n      that is, the switch from which undirected\
    \ messages are received.\n      Note that each switch receiving an undirected\
    \ message has, at\n      most, one upstream neighbor, and the originator of any\
    \ undirected\n      ISMP message has no upstream neighbors.\n   Downstream Neighbors\n\
    \      Those switches attached to all outports of the switch flood path\n    \
    \  except the port on which the undirected message was received.\n      Note that\
    \ for each undirected message some number of switches have\n      no downstream\
    \ neighbors.\n   Virtual LAN (VLAN) identifier\n      A VLAN is a logical grouping\
    \ of ports and endstations such that\n      all ports and endstations in the VLAN\
    \ appear to be on the same\n      physical (or extended) LAN segment even though\
    \ they may be\n      geographically separated.\n      A VLAN identifier consists\
    \ of a variable-length string of octets.\n      The first octet in the string\
    \ contains the number of octets in the\n      remainder of the string -- the actual\
    \ VLAN identifier value.  A\n      VLAN identifier can be from 1 to 16 octets\
    \ long.\n   VLAN policy\n      Each VLAN has an assigned policy value used to\
    \ determine whether a\n      particular call connection can be established. SFVLAN\
    \ recognizes\n      two policy values:  Open and Secure.\n"
- title: 2. SFVLAN Overview
  contents:
  - "2. SFVLAN Overview\n   Cabletron's SecureFast VLAN (SFVLAN) product implements\
    \ a distributed\n   connection-oriented switching protocol that provides fast\
    \ forwarding\n   of data packets at the MAC layer.\n"
- title: 2.1 Features
  contents:
  - "2.1 Features\n   Within a connection-oriented switching network, user traffic\
    \ is\n   routed through the switch fabric based on the source and destination\n\
    \   address (SA/DA) pair found in the arriving packet. For each SA/DA\n   pair\
    \ encountered by a switch, a \"connection\" is programmed into the\n   switch\
    \ hardware.  This connection maps the SA/DA pair and the port on\n   which the\
    \ packet was received to a specific outport over which the\n   packet is to be\
    \ forwarded.  Thus, once a connection has been\n   established, all packets with\
    \ a particular SA/DA pair arriving on a\n   particular inport are automatically\
    \ forwarded by the switch hardware\n   out the specified outport.\n   A distributed\
    \ switching environment requires that each switch be\n   capable of processing\
    \ all aspects of the call processing and\n   switching functionality.  Thus, each\
    \ switch must synchronize its\n   various databases with all other switches in\
    \ the fabric or be capable\n   of querying other switches for information it does\
    \ not have locally.\n   SFVLAN accomplishes the above objectives by providing\
    \ the following\n   features:\n   -  A virtual directory of the entire switch\
    \ fabric.\n   -  Call processing for IP, IPX and MAC protocols.\n   -  Automatic\
    \ call connection, based on VLAN policy.\n   -  Automatic call rerouting around\
    \ failed switches and links.\n   In addition, SFVLAN optimizes traffic flow across\
    \ the switch fabric\n   by providing the following features:\n   -  Broadcast\
    \ interception and address resolution at the ingress port.\n   -  Broadcast scoping,\
    \ restricting the flooding of broadcast packets\n      to only those ports that\
    \ belong to the same VLAN as the packet\n      source.\n   -  A single loop-free\
    \ path (spanning tree) used for the flooding of\n      undirected interswitch\
    \ control messages.  Only switches running\n      the SFVLAN switching protocol\
    \ are included in this spanning tree\n      calculation -- that is, traditional\
    \ bridges or routers configured\n      for bridging are not included.\n   -  Interception\
    \ of both service and route advertisements with\n      readvertisement sourced\
    \ from the MAC address of the original\n      advertiser.\n"
- title: 2.2 VLAN Principles
  contents:
  - "2.2 VLAN Principles\n   Each SFVLAN switch port, along with its attached endstations,\
    \ belongs\n   to one or more virtual LANs (VLANs).  A VLAN is a logical grouping\
    \ of\n   ports and endstations such that all ports and endstations in the VLAN\n\
    \   appear to be on the same physical (or extended) LAN segment even\n   though\
    \ they may be geographically separated.\n   VLAN assignments are used to determine\
    \ the validity of call\n   connection requests and to scope the broadcast of certain\
    \ flooded\n   messages.\n"
- title: 2.2.1 Default, Base and Inherited VLANs
  contents:
  - "2.2.1 Default, Base and Inherited VLANs\n   Each port is explicitly assigned\
    \ to a default VLAN.  At start-up, the\n   default VLAN to which all ports are\
    \ assigned is the base VLAN -- a\n   permanent, non-deletable VLAN to which all\
    \ ports belong at all times.\n   The network administrator can change the default\
    \ VLAN of a port from\n   the base VLAN to any other unique VLAN by using a management\n\
    \   application known here as the VLAN Manager.  A port's default VLAN is\n  \
    \ persistent -- that is, it is preserved across a switch reset.\n   When an endstation\
    \ attaches to a port for the first time, it inherits\n   the default VLAN of the\
    \ port.  Using the VLAN Manager, the network\n   administrator can reassign an\
    \ endstation to another VLAN.\n      Note:\n         When all ports and all endstations\
    \ belong to the base VLAN, the\n         switch fabric behaves like an 802.1D\
    \ bridging system.\n"
- title: 2.2.2 VLAN Configuration Modes
  contents:
  - "2.2.2 VLAN Configuration Modes\n   For both ports and endstations, there are\
    \ a variety of VLAN\n   configuration types, or modes.\n"
- title: 2.2.2.1 Endstations
  contents:
  - "2.2.2.1 Endstations\n   For endstations, there are two VLAN configuration modes:\
    \ inherited\n   and static.\n   -  Inherited\n      An inherited endstation becomes\
    \ a member of its port's default\n      VLAN.\n   -  Static\n      A static port\
    \ becomes a member of the VLAN to which it has been\n      assigned by the VLAN\
    \ Manager.\n   The default configuration mode for an endstation is inherited.\n"
- title: 2.2.2.2 Ports
  contents:
  - "2.2.2.2 Ports\n   For ports, there are two VLAN configuration modes:  normal\
    \ and\n   locked.\n   -  Normal\n      All inherited endstations on a normal port\
    \ become members of the\n      port's default VLAN.  All static endstations are\
    \ members of the\n      VLAN to which they were mapped by the VLAN Manager.\n\
    \      If the VLAN Manager reassigns the default VLAN of a normal port,\n    \
    \  the VLAN(s) for the attached endstations may or may not change,\n      depending\
    \ on the VLAN configuration mode of each endstation.  All\n      inherited endstations\
    \ will become members of the new default VLAN.\n      All others will retain membership\
    \ in their previously mapped\n      VLANs.\n   -  Locked\n      All endstations\
    \ attached to a locked port can be members only of\n      the port's default VLAN.\n\
    \      If the VLAN Manager reconfigures a normal port to be a locked\n      port,\
    \ all endstations attached to the port become members of the\n      port's default\
    \ VLAN, regardless of any previous VLAN membership.\n   The default configuration\
    \ mode for ports is normal.\n"
- title: 2.2.2.3 Order of Precedence
  contents:
  - "2.2.2.3 Order of Precedence\n   On a normal port, static VLAN membership prevails\
    \ over inherited\n   membership.\n   On a locked port, default VLAN membership\
    \ prevails over any static\n   VLAN membership.\n   If a statically assigned endstation\
    \ moves from a locked port back to\n   a normal port, the endstation's static\
    \ VLAN membership must be\n   preserved.\n"
- title: 2.2.3 Ports with Multiple VLAN Membership
  contents:
  - "2.2.3 Ports with Multiple VLAN Membership\n   A port can belong to multiple VLANs,\
    \ based on the VLAN membership of\n   its attached endstations.\n   For example,\
    \ consider a port with three endstations, a default VLAN\n   of \"blue\" and the\
    \ following endstation VLAN assignments:\n   -  One of the endstations is statically\
    \ assigned to VLAN \"red.\"\n   -  Another endstation is statically assigned to\
    \ VLAN \"green.\"\n   -  The third endstation inherits the default VLAN of \"\
    blue.\"\n   In this instance, the port is explicitly a member of VLAN \"blue.\"\
    \ But\n   note that it is also implicitly a member of VLAN \"red\" and VLAN\n\
    \   \"green.\"  Any tag-based flooding (Section 4.8) directed to any one of\n\
    \   the three VLANs (\"red,\" \"green,\" or \"blue\") will be forwarded out the\n\
    \   port.\n"
- title: 2.3 Tag/Length/Value Method of Addressing
  contents:
  - "2.3 Tag/Length/Value Method of Addressing\n   Within most computer networks,\
    \ the concept of \"address\" is somewhat\n   elusive because different protocols\
    \ can (and do) use different\n   addressing schemes and formats.  For example,\
    \ Ethernet (physical\n   layer) addresses are six octets long, while IP (network\
    \ layer)\n   addresses are only four octets long.\n   To distinguish between the\
    \ various protocol-specific forms of\n   addressing, many software modules within\
    \ the SFVLAN product specify\n   addresses in a format known as Tag/Length/Value\
    \ (TLV). This format\n   uses a variable-length construct as shown below:\n  \
    \  0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                              Tag                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Value length  |                                               |\n   +-+-+-+-+-+-+-+-+\
    \                                               +\n   |                      \
    \    Address value                        |\n   :                            \
    \                                   :\n   |                                  \
    \                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Tag\n      This 4-octet field specifies the type of address contained in the\n\
    \      structure.  The following address types are currently supported:\n    \
    \     Tag name        Value    Address type\n         aoMacDx         1      \
    \  DX ethernet dst/src/type\n         aoIpxSap        2        Sap\n         aoIpxRIP\
    \        3        RIP\n         aoInstYP        4        YP (YP name and version)\n\
    \         aoInstUDP       5        UDP (Port #)\n         aoIpxIpx        6  \
    \      Ipx\n         aoInetIP        7        IP (Net address)\n         aoInetRPC\
    \       8        RPC (Program #)\n         aoInetRIP       9        INET RIP\n\
    \         aoMacDXMcast    10       Multicast unknown type\n         aoAtDDP  \
    \       11       AppleTalk DDP\n         aoEmpty         12       (no address\
    \ type specified)\n         aoVlan          13       VLAN identifier\n       \
    \  aoHostName      14       Host name\n         aoNetBiosName   15       NetBIOS\
    \ name\n         aoNBT           16       NetBIOS on TCP name\n         aoInetIPMask\
    \    17       IP Subnet Mask\n         aoIpxSap8022    18       Sap 8022 type\
    \ service\n         aoIpxSapSnap    19       Sap Snap type service\n         aoIpxSapEnet\
    \    20       Sap Enet type service\n         aoDHCPXID       21       DHCP Transaction\
    \ ID\n         aoIpMcastRx     22       IP class D receiver\n         aoIpMcastTx\
    \     23       IP class D sender\n         aoIpxRip8022    24       Ipx Rip 8022\
    \ type service\n         aoIpxRipSnap    25       Ipx Rip type service\n     \
    \    aoIpxRipEnet    26       Ipx Rip Enet service\n         aoATM           27\
    \       ATM\n         aoATMELAN       28       ATM LAN Emulation Name\n   Value\
    \ length\n      This 1-octet field contains the length of the value of the\n \
    \     address.  The value here depends on the address type and actual\n      value.\n\
    \   Address value\n      This variable-length field contains the value of the\
    \ address. The\n      length of this field is stored in the Value length field.\n"
- title: 2.4 Architectural Overview
  contents:
  - "2.4 Architectural Overview\n   The SFVLAN software executes in the switch CPU\
    \ and consists of the\n   following elements as shown in Figure 1:\n   -  The\
    \ SFVLAN base services that handles traffic intercepted by the\n      switch hardware.\
    \  The base services are described in Section 3.\n   +------------------------------------------------------+\n\
    \   |                                              +-----+ |\n   |           \
    \              +------------+       |  I  | |\n   |                         |\
    \  CALL TAP  <--(8)-->  N  | |\n   |                         +------------+  \
    \     |  T  | |\n   |                                              |  E  | |\n\
    \   |      +-----------+      +------------+       |  R  | |\n   |      |   PATH\
    \    |      |  TOPOLOGY  |       |  S  | |\n   |      |           |      |   \
    \         |       |  W  | |\n   |      | Lnk state <------>  Lnk state <--(3)-->\
    \  I  | | Flood path\n   |      |           |      |            |       |  T \
    \ <----(5,7,8)-->\n   |      | Span tree <------>  Span tree <--(4)-->  C  | |\n\
    \   |      +--^--------+      |            |       |  H  | |\n   |         | \
    \              |  Discovery <--(2)-->     | |\n   |         |               +------------+\
    \       |  M  | |\n   |         |                                    |  E  | |\n\
    \   |  +------^--+            +--------+           |  S  | |\n   |  | CONNECT\
    \ >---------+--> FILTER |           |  S  | |\n   |  +--^------+         |  +--------+\
    \           |  A  | |  specific\n   |     |                |                 \
    \      |  G  | | netwrk lnks\n   |     |       +--------^-+     +-------+    \
    \   |  E  <----(2,3,4)-->\n   |     +-------<  POLICY  |     | FLOOD >--(7)-->\
    \     | |\n   |             +------^---+     +-^-----+       |  P  | |\n   | \
    \                   |           |             |  R  | |\n   | +-----------+  \
    \  +-^-----------V-+           |  O  | |\n   | | DIRECTORY <---->    RESOLVE \
    \   <------(5)-->  T  | |\n   | +-----^-----+    +---^-----------+           |\
    \  O  | |\n   |       |              |                       |  C  | |\n   | \
    \      |    +---------^-----------+           |  O  | |\n   |       +----<   \
    \ Base Services    |           |  L  | |\n   |            +-----^---------------+\
    \           +-----+ |\n   +------------------|-----------------------------------+\n\
    \    Switch CPU        |\n                      | Host control port\n        \
    \        +-----O----------------+\n                |     ^ no cnx         |\n\
    \      Layer 2   |     |                |\n     ---------->O-----+--------------->O----------->\n\
    \      SA/DA pr  |          known cnx   |\n                +----------------------+\n\
    \                 Switch hardware\n                   Figure 1:  SFVLAN Architectural\
    \ Overview\n   -  Eight call processing service centers that provide the essential\n\
    \      services required to process call connections.  The call\n      processing\
    \ service centers are described in Section 4.\n   -  A Call Tap module that supports\
    \ the monitoring of call\n      connections.  The Call Tap module is described\
    \ in Section 5.\n   -  The InterSwitch Message Protocol (ISMP) that provides a\
    \ consistent\n      method of encapsulating and transmitting control messages\n\
    \      exchanged between SFVLAN switches.  (Note that ISMP is not a\n      discrete\
    \ software module.  Instead, its functionality is\n      distributed among those\
    \ service centers and software modules that\n      need to communicate with other\
    \ switches in the fabric.) The\n      Interswitch Message Protocol and the formats\
    \ of the individual\n      interswitch messages are described in Section 6.\n"
- title: 3. Base Services
  contents:
  - "3. Base Services\n   The SFVLAN base services act as the interface between the\
    \ switch\n   hardware and the SFVLAN service centers running on the switch CPU.\n\
    \   This relationship is shown in Figure 2.  This figure is a replication\n  \
    \ of the bottom portion of Figure 1.\n            |    Directory       Resolve\
    \                   |\n            |        ^              ^                 \
    \     |\n            |        |              |                      |\n      \
    \      |        |    +---------^-----------+          |\n            |       \
    \ +----<    Base Services    |          |\n            |             +-----^---------------+\
    \          |\n            +-------------------|--------------------------+\n \
    \            Switch CPU         |\n                                | Host control\
    \ port\n                          +-----O----------------+\n                 \
    \         |     ^ no cnx         |\n                Layer 2   |     |        \
    \        |\n               ---------->O-----+--------------->O----------->\n \
    \               SA/DA pr  |          known cnx   |\n                         \
    \ +----------------------+\n                           Switch hardware\n     \
    \                   Figure 2:  Base Services\n   During normal operation of the\
    \ switch, data packets arriving at\n   any one of the local switch ports are examined\
    \ in the switch\n   hardware.  If the packet's source and destination address\
    \ (SA/DA)\n   pair match a known connection, the hardware simply forwards the\n\
    \   packet out the outport specified by the connection.\n   If the SA/DA pair\
    \ do not match any known connection, the hardware\n   diverts the packet to the\
    \ host control port where it is picked up\n   by the SFVLAN base services.  The\
    \ base services generate a\n   structure known as a state box that tracks the\
    \ progress of the\n   call connection request as the request moves through the\
    \ call\n   processing service centers.\n   After creating the call's state box,\
    \ the base services check to\n   determine if the call is a duplicate of a call\
    \ already being\n   processed.  If not, a request is issued to the Directory Service\n\
    \   Center (Section 4.1) to add the call's source address to the local\n   Node\
    \ and Alias Tables.  The base services then hand the call off to\n   the Resolve\
    \ Service Center (Section 4.3) for further processing.\n"
- title: 4. Call Processing
  contents:
  - "4. Call Processing\n   Call connection processing is handled by a set of eight\
    \ service\n   centers, each with one or more servers.  The servers within a\n\
    \   service center are called in a particular sequence.  Each server\n   records\
    \ the results of its processing in the call connection\n   request state box and\
    \ passes the state box to the next server in\n   the sequence.\n   In the sections\
    \ that follow, servers are listed in the order in\n   which they are called.\n"
- title: 4.1 Directory Service Center
  contents:
  - "4.1 Directory Service Center\n   The Directory Service Center is responsible\
    \ for cataloging the MAC\n   addresses and alias information for both local and\
    \ remote\n   endstations.  The information is stored in two tables -- the Node\n\
    \   Table and the Alias Table.\n   -  The Node Table contains the MAC addresses\
    \ of endstations\n      attached to the local switch.  It also contains a cache\
    \ of\n      remote endstations detected by the Resolve Service Center\n      (Section\
    \ 4.3).   Every entry in the Node Table has one or more\n      corresponding entries\
    \ in the Alias Table.\n   -  The Alias Table contains protocol alias information\
    \ for each\n      endstation.  An endstation alias can be a network address (such\n\
    \      as an IP or IPX address), a VLAN identifier, or any other\n      protocol\
    \ identifier.  Since every endstation is a member of at\n      least one VLAN\
    \ (the default VLAN for the port), there is always\n      at least one entry in\
    \ the Alias Table for each entry in the\n      Node Table.\n      Note:\n    \
    \     The Node and Alias Tables must remain synchronized.\n         That is, when\
    \ an endstation's final alias is removed\n         from the Alias Table, the endstation\
    \ entry is removed\n         from the Node Table.\n   Note that the total collection\
    \ of all Node Tables and Alias Tables\n   across all switches is known as the\
    \ \"virtual\" directory of the\n   switch fabric.  The virtual directory contains\
    \ address mappings of\n   all known endstations in the fabric.\n"
- title: 4.1.1 Local Add Server
  contents:
  - "4.1.1 Local Add Server\n   The Directory Local Add server adds entries to the\
    \ local Node or\n   Alias Tables.  It is called by the base services (Section\
    \ 3) to\n   add a local endstation and by the Interswitch Resolve (Section\n \
    \  4.3.4) server to add an endstation discovered on a remote switch.\n"
- title: 4.1.2 Inverse Resolve Server
  contents:
  - "4.1.2 Inverse Resolve Server\n   The Directory Inverse Resolve server is invoked\
    \ when a new\n   endstation has been discovered on the local switch (that is,\
    \ when\n   the Local Add server was successful in adding the endstation).\n  \
    \ The server provides two functions:\n   -  It populates the Node and Alias Tables\
    \ with local entries\n      during switch initialization.\n   -  It processes\
    \ a new endstation discovered after the fabric\n      topology has converged to\
    \ a stable state.\n   In both instances, the processing is identical.\n   When\
    \ a new endstation is detected on one of the switch's local\n   ports, the Inverse\
    \ Resolve server sends an Interswitch New User\n   request message (Section 6.5)\
    \ over the switch flood path to all\n   other switches in the fabric.  The purpose\
    \ of the Interswitch New\n   User request is two-fold:\n   -  It informs the other\
    \ switches of the new endstation address.\n      Any entries for that endstation\
    \ in the local databases of other\n      switches should be dealt with appropriately.\n\
    \   -  It requests information about any static VLAN(s) to which the\n      endstation\
    \ has been assigned.\n   When a switch receives an Interswitch New User request\
    \ message\n   from one of its upstream neighbors, it first forwards the message\n\
    \   to all its downstream neighbors.  No actual processing or VLAN\n   resolution\
    \ is attempted until the message reaches the end of the\n   switch flood path\
    \ and begins its trip back along the return path.\n   This ensures that all switches\
    \ in the fabric receive notification\n   of the new user and have synchronized\
    \ their databases.\n   If a switch receives an Interswitch New User request message\
    \ but\n   has no downstream neighbors, it does the following:\n   -  If the endstation\
    \ was previously connected to one of the\n      switch's local ports, the switch\
    \ formulates an Interswitch New\n      User Response message by loading the VLAN\
    \ identifier(s) of the\n      static VLAN(s) to which the endstation was assigned,\
    \ along with\n      its own MAC address.  (VLAN identifiers are stored in\n  \
    \    Tag/Length/Value (TLV) format.  See Section 2.3.)  The switch\n      then\
    \ sets the message status field to NewUserAck, and returns\n      the message\
    \ to its upstream (requesting) neighbor.\n      Otherwise, the switch sets the\
    \ status field to NewUserUnknown\n      and returns the message to its upstream\
    \ neighbor.\n   -  The switch then deletes the endstation from its local database,\n\
    \      as well as any entries associated with the endstation in its\n      connection\
    \ table.\n   When a switch forwards an Interswitch New User request message to\n\
    \   its downstream neighbors, it keeps track of the number of requests\n   it\
    \ has sent out and does not respond back to its upstream neighbor\n   until all\
    \ requests have been responded to.\n   -  As each response is received, the switch\
    \ checks the status\n      field of the message.  If the status is NewUserAck,\
    \ the switch\n      retains the information in that response.  When all requests\n\
    \      have been responded to, the switch returns the NewUserAck\n      response\
    \ to its upstream neighbor.\n   -  If all the Interswitch New User Request messages\
    \ have been\n      responded to with a status of NewUserUnknown, the switch checks\n\
    \      to see if the endstation was previously connected to one of its\n     \
    \ local ports.  If so, the switch formulates an Interswitch New\n      User Response\
    \ message by loading the VLAN identifier(s) of the\n      static VLAN(s) to which\
    \ the endstation was assigned, along with\n      its own MAC address.  The switch\
    \ then sets the message status\n      field to NewUserAck, and returns the message\
    \ to its upstream\n      (requesting) neighbor.\n      Otherwise, the switch sets\
    \ the status field to NewUserUnknown\n      and returns the message to its upstream\
    \ neighbor.\n   -  The switch then deletes the endstation from its local database,\n\
    \      as well as any entries associated with the endstation in its\n      connection\
    \ table.\n   When the originating switch has received responses to all the\n \
    \  Interswitch New User Request messages it has sent, it does the\n   following:\n\
    \   -  If it has received a response message with a status of\n      NewUserAck,\
    \ it loads the new VLAN information into its local\n      database.\n   -  If\
    \ all responses have been received with a status of\n      NewUserUnknown, the\
    \ originating switch assumes that the\n      endstation was not previously connected\
    \ anywhere in the network\n      and assigns it to a VLAN according to the VLAN\
    \ membership rules\n      and order of precedence.\n   If any Interswitch New\
    \ User Request message has not been responded\n   to within a certain predetermined\
    \ time (currently 5 seconds), the\n   originating switch recalculates the switch\
    \ flood path and resends\n   the Interswitch New User Request message.\n"
- title: 4.1.3 Local Delete Server
  contents:
  - "4.1.3 Local Delete Server\n   The Directory Local Delete server removes entries\
    \ (both local and\n   remote) from the local Node and Alias Tables.  It is invoked\
    \ when\n   an endstation, previously known to be attached to one switch, has\n\
    \   been moved and discovered on another switch.\n   Note also that remote entries\
    \ are cached and are purged from the\n   tables on a first-in/first-out basis\
    \ as space is needed in the\n   cache.\n"
- title: 4.2 Topology Service Center
  contents:
  - "4.2 Topology Service Center\n   The Topology Service Center is responsible for\
    \ maintaining three\n   databases relating to the topology of the switch fabric:\n\
    \   -  The topology table of SFVLAN switches that are physical\n      neighbors\
    \ to the local switch.\n   -  The spanning tree that defines the loop-free switch\
    \ flood path\n      used for transmitting undirected interswitch messages.\n \
    \  -  The directed graph that is used to calculate the best path(s)\n      for\
    \ call connections.\n"
- title: 4.2.1 Neighbor Discovery Server
  contents:
  - "4.2.1 Neighbor Discovery Server\n   The Topology Neighbor Discovery server uses\
    \ Interswitch Keepalive\n   messages to detect the switch's neighbors and establish\
    \ the\n   topology of the switching fabric.  Interswitch Keepalive messages\n\
    \   are exchanged in accordance with Cabletron's VlanHello protocol,\n   described\
    \ in detail in [IDhello].\n"
- title: 4.2.2 Spanning Tree Server
  contents:
  - "4.2.2 Spanning Tree Server\n   The Topology Spanning Tree server is invoked by\
    \ the Topology\n   Neighbor Discovery server when a neighboring SFVLAN switch\
    \ is\n   either discovered or lost -- that is, when the operational status\n \
    \  of a network link changes.\n   The Spanning Tree server exchanges interswitch\
    \ messages with\n   neighboring SFVLAN switches to calculate the switch flood\
    \ path\n   over which undirected interswitch messages are sent.  There are\n \
    \  two parts to this process:\n   -  Creating and maintaining the spanning tree\n\
    \   -  Remote blocking\n"
- title: 4.2.2.1 Creating and Maintaining the Spanning Tree
  contents:
  - "4.2.2.1 Creating and Maintaining the Spanning Tree\n   In a network with redundant\
    \ network links, a packet traveling between\n   switches can potentially be caught\
    \ in an infinite loop -- an\n   intolerable situation in a networking environment.\
    \  However, it is\n   possible to reduce a network topology to a single configuration\n\
    \   (known as a spanning tree) such that there is, at most, one path\n   between\
    \ any two switches.\n   Within the SFVLAN product, the spanning tree is created\
    \ and\n   maintained using the Spanning Tree Algorithm defined by the IEEE\n \
    \  802.1d standard.\n      Note:\n         A detailed discussion of this algorithm\
    \ is beyond the scope of\n         this document.  See [IEEE] for more information.\n\
    \   To implement the Spanning Tree Algorithm, SFVLAN switches exchange\n   Interswitch\
    \ BPDU messages (Section 6.2) containing encapsulated\n   IEEE-compliant 802.2\
    \ Bridge Protocol Data Units (BPDUs).  There are\n   two types of BPDUs:\n   -\
    \  Configuration (CFG) BPDUs are exchanged during the switch\n      discovery\
    \ process, following the receipt of an Interswitch\n      Keepalive message. \
    \ They are used to create the initial the\n      spanning tree.\n   -  Topology\
    \ Change Notification (TCN) BPDUs are exchanged when\n      changes in the network\
    \ topology are detected.  They are used to\n      redefine the spanning tree to\
    \ reflect the current topology.\n   See [IEEE] for detailed descriptions of these\
    \ BPDUs.\n"
- title: 4.2.2.2 Remote Blocking
  contents:
  - "4.2.2.2 Remote Blocking\n   After the spanning tree has been computed, each network\
    \ port on an\n   SFVLAN switch will be in one of two states:\n   -  Forwarding.\
    \  A port in the Forwarding state will be used to\n      transmit all ISMP messages.\n\
    \   -  Blocking.  A port in the Blocking state will not be used to\n      forward\
    \ undirected ISMP messages.  Blocking the rebroadcast of\n      these messages\
    \ on selected ports prevents message duplication\n      arising from multiple\
    \ paths that exist in the network topology.\n      Note that all other types of\
    \ ISMP message will be transmitted.\n      Note:\n         The IEEE 802.1d standard\
    \ specifies other port states used\n         during the initial creation of the\
    \ spanning tree. These states\n         are not relevant to the discussion here.\n\
    \   Note that although a port in the Blocking state will not forward\n   undirected\
    \ ISMP messages, it may still receive them.  Any such\n   message received will\
    \ ultimately be discarded, but at the cost of CPU\n   time necessary to process\
    \ the packet.\n   To prevent the transmission of undirected messages to a port,\
    \ the\n   port's owner switch can set remote blocking on the link by sending an\n\
    \   Interswitch Remote Blocking message (Section 6.3) out over the port.\n   This\
    \ notifies the switch on the other end of the link that undirected\n   messages\
    \ should not be sent over the link, regardless of the state of\n   the sending\
    \ port.\n   Each SFVLAN switch sends an Interswitch Remote Blocking message out\n\
    \   over all its blocked network ports every 5 seconds.  A flag within\n   the\
    \ message indicates whether remote blocking should be turned on or\n   off over\
    \ the link.\n"
- title: 4.2.3 Link State Server
  contents:
  - "4.2.3 Link State Server\n   The Topology Link State server is invoked by any\
    \ process that detects\n   a change in the state of the network links of the local\
    \ switch.\n   These changes include (but are not limited to) changes in operational\n\
    \   or administrative status of the link, path \"cost\" or bandwidth.\n   The\
    \ Link State server runs Cabletron's Virtual LAN Link State (VLS)\n   protocol\
    \ which exchanges interswitch messages with neighboring SFVLAN\n   switches to\
    \ calculate the set of best paths between the local switch\n   and all other switches\
    \ in the fabric. (The VLS protocol is described\n   in detail in [IDvlsp].)\n\
    \   The Link State server also notifies the Connect Service Center\n   (Section\
    \ 4.5) of any remote links that have failed, thereby\n   necessitating potential\
    \ tear-down of current connections.\n"
- title: 4.3 Resolve Service Center
  contents:
  - "4.3 Resolve Service Center\n   The Resolve Service Center is responsible for\
    \ resolving the\n   destination address of broadcast data packets (such as an\
    \ IP ARP\n   packet) to a unicast MAC address to be used in mapping the call\n\
    \   connection.  To do this, the Resolve Service Center attempts to\n   resolve\
    \ such broadcast packets directly at the access port of the\n   ingress switch.\n\
    \   Address resolution is accomplished as follows:\n   1) First, an attempt is\
    \ made to resolve the address from the switch's\n      local databases by calling\
    \ the following servers:\n      -  The Table server attempts to resolve the address\
    \ from the\n         Resolve Table (Section 4.3.1).\n      -  Next, the Local\
    \ server attempts to resolve the address from the\n         Node and Alias Tables\
    \ (Section 4.3.2).\n      -  If the address is not found in these tables but is\
    \ an IP\n         address, the Resolve Subnet server (Section 4.3.3) is also\n\
    \         called.\n   2) If the address cannot be resolved locally, the Interswitch\
    \ Resolve\n      server (Section 4.3.4) is called to access the \"virtual directory\"\
    \n      by sending an Interswitch Resolve request message out over the\n     \
    \ switch flood path.\n   3) If the address cannot be resolved either locally or\
    \ via an\n      Interswitch Resolve message -- that is, the destination endstation\n\
    \      is unknown to any switch, perhaps because it has never transmitted\n  \
    \    a packet to its switch -- the following steps are taken:\n      -  The Unresolvable\
    \ server (Section 4.3.5) is called to record the\n         unresolved packet.\n\
    \      -  The Block server (Section 4.3.6) is called to determine whether\n  \
    \       the address should be added to the Block Table.\n      -  The Flood Service\
    \ Center (Section 4.8) is called to broadcast\n         the packet to other SFVLAN\
    \ switches using a tag-based flooding\n         mechanism.\n"
- title: 4.3.1 Table Server
  contents:
  - "4.3.1 Table Server\n   The Resolve Table server maintains the Resolve Table which\
    \ contains a\n   collection of addresses that might not be resolvable in the normal\n\
    \   fashion.  This table typically contains such things as the addresses\n   of\
    \ \"quiet\" devices that do not send data packets or special mappings\n   of IP\
    \ addresses behind a router.  Entries can be added to or deleted\n   from the\
    \ Resolve Table via an external management application.\n"
- title: 4.3.2 Local Server
  contents:
  - "4.3.2 Local Server\n   The Resolve Local server checks the Node and Alias Tables\
    \ maintained\n   by the Directory Service Center (Section 4.1) to determine if\
    \ it can\n   resolve the address.\n"
- title: 4.3.3 Subnet Server
  contents:
  - "4.3.3 Subnet Server\n   If the address to be resolved is an IP address but cannot\
    \ be resolved\n   via the standard processing described above, the Resolve Subnet\n\
    \   server applies the subnet mask to the IP address and then does a\n   lookup\
    \ in the Resolve Table.\n"
- title: 4.3.4 Interswitch Resolve Server
  contents:
  - "4.3.4 Interswitch Resolve Server\n   If the address cannot be resolved locally,\
    \ the Interswitch Resolve\n   server accesses the \"virtual directory\" by sending\
    \ an Interswitch\n   Resolve request message (Section 6.4) out over the switch\
    \ flood path.\n   The Interswitch Resolve request message contains the destination\n\
    \   address as it was received within the packet, along with a list of\n   requested\
    \ addressing information.\n   When a switch receives an Interswitch Resolve request\
    \ message from\n   one of its upstream neighbors, it checks to see if the destination\n\
    \   endstation is connected to one of its local access ports.  If so, it\n   formulates\
    \ an Interswitch Resolve response message by filling in the\n   requested address\
    \ information, along with its own MAC address.  It\n   then sets the message status\
    \ field to ResolveAck, and returns the\n   message to its upstream (requesting)\
    \ neighbor.\n   If the receiving switch cannot resolve the address, it forwards\
    \ the\n   Interswitch Resolve request message to its downstream neighbors.  If\n\
    \   the switch has no downstream neighbors, it sets the message status\n   field\
    \ to Unknown, and returns the message to its upstream\n   (requesting) neighbor.\n\
    \   When a switch forwards an Interswitch Resolve request message to its\n   downstream\
    \ neighbors, it keeps track of the number of requests it has\n   sent out and\
    \ received back.  It will only respond back to its\n   upstream (requesting) neighbor\
    \ when one of the following conditions\n   occurs:\n   -  It receives any response\
    \ with a status of ResolveAck\n   -  All downstream neighbors have responded with\
    \ a status of Unknown\n   Any Interswitch Resolve request message that is not\
    \ responded to\n   within a certain predetermined time (currently 5 seconds) is\
    \ assumed\n   to have a response status of Unknown.\n   When the Interswitch Resolve\
    \ server receives a successful Interswitch\n   Resolve response message, it records\
    \ the resolved address information\n   in the remote cache of its local directory\
    \ for use in resolving later\n   packets for the same endstation.  Note that this\
    \ process results in\n   each switch building its own unique copy of the virtual\
    \ directory\n   containing only the endstation addresses in which it is interested.\n"
- title: 4.3.5 Unresolvable Server
  contents:
  - "4.3.5 Unresolvable Server\n   The Unresolvable server is called when a packet\
    \ destination address\n   cannot be resolved.  The server records the packet in\
    \ a table that\n   can then be examined to determine which endstations are generating\n\
    \   unresolvable traffic.\n   Also, if a particular destination is repeatedly\
    \ seen to be\n   unresolvable, the server calls the Block server (Section 4.3.6)\
    \ to\n   determine whether the address should be blocked.\n"
- title: 4.3.6 Block Server
  contents:
  - "4.3.6 Block Server\n   The Resolve Block server is called when a particular destination\
    \ has\n   been repeatedly seen to be unresolvable.  This typically happens\n \
    \  when, unknown to the packet source, the destination endstation is\n   either\
    \ not currently available or no longer exists.\n   If the Block server determines\
    \ that the unresolved address has\n   exceeded a configurable request threshold,\
    \ the address is added to\n   the server's Block Table.  Interswitch Resolve request\
    \ messages for\n   addresses listed in the Block Table are sent less frequently,\
    \ thereby\n   reducing the amount of Interswitch Resolve traffic throughout the\n\
    \   fabric.\n   If an address listed in the Block Table is later successfully\n\
    \   resolved by and Interswitch Resolve request message, the address is\n   removed\
    \ from the table.\n"
- title: 4.4 Policy Service Center
  contents:
  - "4.4 Policy Service Center\n   Once the destination address of the call packet\
    \ has been resolved,\n   the Policy Service Center is called to determine the\
    \ validity of the\n   requested call connection based on the VLAN policy of the\
    \ source and\n   destination VLANs.\n"
- title: 4.4.1 Unicast Rules Server
  contents:
  - "4.4.1 Unicast Rules Server\n   The Policy Unicast Rules server recognizes two\
    \ VLAN policy values:\n   Open or Secure.  The default policy for all VLANs is\
    \ Open.\n   The policy value is used as follows when determining the validity\
    \ of\n   a requested call connection:\n   -  If the VLAN policy of either the\
    \ source or destination cannot be\n      determined, the Filter Service Center\
    \ is called to establish a\n      filter (i.e., blocked) for the SA/DA pair.\n\
    \   -  If the source and destination endstations belong to the same VLAN,\n  \
    \    then the connection is permitted regardless of the VLAN policy.\n   -  If\
    \ the source and destination endstations belong to different\n      VLANs, but\
    \ both VLANs are running with an Open policy, then the\n      connection is permitted,\
    \ providing cut-through switching between\n      different VLAN(s).\n   -  If\
    \ the source and destination endstations belong to different\n      VLANs and\
    \ one or both of the VLANs are running with a Secure\n      policy, then the Flood\
    \ Service Center (Section 4.8) is called to\n      broadcast the packet to other\
    \ SFVLAN switches having ports or\n      endstations that belong to the same VLAN\
    \ as the packet source.\n      Note that if any of the VLANs to which the source\
    \ or destination\n      belong has a Secure policy, then the policy used in the\
    \ above\n      algorithm is Secure.\n"
- title: 4.5 Connect Service Center
  contents:
  - "4.5 Connect Service Center\n   Once the Policy Service Center (Section 4.4) has\
    \ determined that a\n   requested call connection is valid, the Connect Service\
    \ Center is\n   called to set up the connection.  Note that connectivity between\
    \ two\n   endstations within the fabric is established on a switch-by-switch\n\
    \   basis as the call progresses through the fabric toward its\n   destination.\
    \  No synchronization is needed between switches to\n   establish an end-to-end\
    \ connection.\n   The Connect Service Center maintains a Connection Table containing\n\
    \   information for all connections currently active on the switch's\n   local\
    \ ports.\n   Connections are removed from the Connection Table when one of the\n\
    \   endstations is moved to a new switch (Section 4.1.2) or when the\n   Topology\
    \ Link State server (Section 4.2.3) notifies the Connect\n   Service Center that\
    \ a network link has failed.  Otherwise,\n   connections are not automatically\
    \ aged out or removed from the\n   Connection Table until a certain percentage\
    \ threshold (HiMark) of\n   table capacity is reached and resources are needed.\
    \  At that point,\n   some number of connections (typically 100) are aged out\
    \ and removed\n   at one time.\n"
- title: 4.5.1 Local Server
  contents:
  - "4.5.1 Local Server\n   If the destination endstation resides on the local switch,\
    \ the\n   Connect Local server establishes a connection between the source and\n\
    \   destination ports.  Note that if the source and destination both\n   reside\
    \ on the same physical port, a filter connection is established\n   by calling\
    \ the Filter Service Center (Section 4.6).\n"
- title: 4.5.2 Link State Server
  contents:
  - "4.5.2 Link State Server\n   The Connect Link State server is called if the destination\
    \ endstation\n   of the proposed connection does not reside on the local switch.\n\
    \   The server executes a call to the Path Link State server (Section\n   4.7.1)\
    \ which returns up to three \"best\" paths of equal cost from the\n   local switch\
    \ to the destination switch.  If more than one path is\n   returned, the server\
    \ chooses a path that provides the best load\n   balancing of user traffic across\
    \ the fabric.\n"
- title: 4.5.3 Directory Server
  contents:
  - "4.5.3 Directory Server\n   The Connect Directory server is called if the Connect\
    \ Link State\n   server is unable to provide a path for some reason.\n   The server\
    \ examines the local directory to determine on which switch\n   the destination\
    \ endstation resides.  If the port of access to the\n   destination switch is\
    \ known, then a connection is established using\n   that port as the outport of\
    \ the connection.\n"
- title: 4.6 Filter Service Center
  contents:
  - "4.6 Filter Service Center\n   The Filter Service Center is responsible for establishing\
    \ filtered\n   connections.  This service center is called by the Connect Local\n\
    \   server (Section 4.5.1) if the source and destination endstations\n   reside\
    \ on the same physical port, and by the Policy Service Center\n   (Section 4.4)\
    \ if the VLAN of either the source or destination is\n   indeterminate.\n   A\
    \ filter connection is programmed in the switch hardware with no\n   specified\
    \ outport.  That is, the connection is programmed to discard\n   any traffic for\
    \ that SA/DA pair.\n"
- title: 4.7 Path Service Center
  contents:
  - "4.7 Path Service Center\n   The Path Service Center is responsible for determining\
    \ the path from\n   a source to a destination.\n"
- title: 4.7.1 Link State Server
  contents:
  - "4.7.1 Link State Server\n   The Path Link State server is called by the Connect\
    \ Link State server\n   (Section 4.5.2) to return up to three best paths of equal\
    \ cost\n   between a source and destination pair of endstations.  These best\n\
    \   paths are calculated by the Topology Link State server (Section\n   4.2.3).\n\
    \   The Path Link State server is also called by the Connect Service\n   Center\
    \ to return a complete source-to-destination path consisting of\n   a list of\
    \ individual switch port names.  A switch port name consists\n   of the switch\
    \ base MAC address and a port instance relative to the\n   switch.\n"
- title: 4.7.2 Spanning Tree Server
  contents:
  - "4.7.2 Spanning Tree Server\n   The Path Spanning Tree server is called by any\
    \ server needing to\n   forward an undirected message out over the switch flood\
    \ path.  The\n   server returns a port mask indicating which local ports are currently\n\
    \   enabled as outports of the switch flood path.  The switch flood path\n   is\
    \ calculated by the Topology Spanning Tree server (Section 4.2.2).\n"
- title: 4.8 Flood Service Center
  contents:
  - "4.8 Flood Service Center\n   If the Resolve Service Center (Section 4.3) is unable\
    \ to resolve the\n   destination address of a packet, it invokes the Flood Service\
    \ Center\n   to broadcast the unresolved packet.\n"
- title: 4.8.1 Tag-Based Flood Server
  contents:
  - "4.8.1 Tag-Based Flood Server\n   The Tag-Based Flood server encapsulates the\
    \ unresolved packet into an\n   Interswitch Tag-Based Flood message (Section 6.6),\
    \ along with a list\n   of Virtual LAN identifiers specifying those VLANs to which\
    \ the source\n   endstation belongs.  The message is then sent out over the switch\n\
    \   flood path to all other switches in the fabric.\n   When a switch receives\
    \ an Interswitch Tag-Based Flood message, it\n   examines the encapsulated header\
    \ to determine the VLAN(s) to which\n   the packet should be sent.  If any of\
    \ the switch's local access ports\n   belong to one or more of the specified VLANs,\
    \ the switch strips off\n   the tag-based header and forwards the original packet\
    \ out the\n   appropriate access port(s).\n   The switch also forwards the entire\
    \ encapsulated packet along the\n   switch flood path to its downstream neighboring\
    \ switches, if any.\n"
- title: 5. Monitoring Call Connections
  contents:
  - "5. Monitoring Call Connections\n   The SecureFast VLAN product permits monitoring\
    \ of user traffic moving\n   between two endstations by establishing a call tap\
    \ on the connection\n   between the two stations.  Traffic can be monitored in\
    \ one or both\n   directions along the connection path.\n"
- title: 5.1 Definitions
  contents:
  - "5.1 Definitions\n   In addition to the terms defined in Section 1.2, the following\
    \ terms\n   are used in this description of the call tap process.\n   Originating\
    \ Switch\n      The originating switch is the switch that requests the call tap.\n\
    \      Any switch along a call connection path may request a tap on that\n   \
    \   call connection.\n   Probe\n      The tap probe is the device to receive a\
    \ copy of the call\n      connection data.  The probe is attached to a port on\
    \ the probe\n      switch.\n   Probe Switch\n      The probe switch (also known\
    \ as the terminating switch) is the\n      switch to which the probe is attached.\
    \  The probe switch can be\n      anywhere in the topology.\n"
- title: 5.2 Tapping a Connection
  contents:
  - "5.2 Tapping a Connection\n   A request to tap a call connection between two endstations\
    \ can\n   originate on any switch along the call connection path -- the ingress\n\
    \   switch, the egress switch, or any of the intermediate switches.  The\n   call\
    \ connection must have already been established before a call tap\n   request\
    \ can be issued.  The probe device can be attached to any\n   switch in the topology.\n"
- title: 5.2.1 Types of Tap Connections
  contents:
  - "5.2.1 Types of Tap Connections\n   A call tap is enabled by setting up an auxiliary\
    \ tap connection\n   associated with the call being monitored.  Since the tap\
    \ must\n   originate on a switch somewhere along the call connection path, the\n\
    \   tap connection path will pass through one or more of the switches\n   along\
    \ the call path.  However, since the probe switch can be anywhere\n   in the switch\
    \ fabric, the tap path and the call path may diverge at\n   some point.\n   Therefore,\
    \ on each switch along the tap path, the tap connection is\n   established in\
    \ one of three ways:\n   -  The existing call connection is used with no modification.\n\
    \         When both the call path and tap path pass through the switch,\n    \
    \     and the inport and outports of both connections are identical,\n       \
    \  the switch uses the existing call connection to route the tap.\n   -  The existing\
    \ call connection is modified.\n         When both the call path and tap path\
    \ pass through the switch,\n         but the call path outport is different from\
    \ the tap path\n         outport, the switch enables an extra outport in either\
    \ one or\n         both directions of the call connection, depending on the\n\
    \         direction of the tap.  This happens under two conditions.\n   -  If\
    \ the switch is also the probe switch, an extra outport is\n         enabled to\
    \ the probe.\n   -  If the switch is the point at which the call path and the\
    \ tap path\n         diverge, an extra outport is enabled to the downstream neighbor\n\
    \         on that leg of the switch flood path on which the probe switch\n   \
    \      is located.\n   -  A new connection is established.\n         If the call\
    \ path does not pass through the switch (because the\n         tap path has diverged\
    \ from the call path), a completely new\n         connection is established for\
    \ the tap.\n"
- title: 5.2.2 Locating the Probe and Establishing the Tap Connection
  contents:
  - "5.2.2 Locating the Probe and Establishing the Tap Connection\n   To establish\
    \ a call tap, the originating switch formats an\n   Interswitch Tap request message\
    \ (Section 6.7) and sends it out over\n   the switch flood path to all other switches\
    \ in the topology.\n      Note:\n         If the originating switch is also the\
    \ probe switch, no\n         Interswitch Tap request message is necessary.\n \
    \  As the Interswitch Tap request message travels out along the switch\n   flood\
    \ path, each switch receiving the message checks to see if it is\n   the probe\
    \ switch and does the following:\n   -  If the switch is the probe switch, it\
    \ establishes the tap\n      connection by either setting up a new connection\
    \ or modifying the\n      call connection, as appropriate (see Section 5.2.1).\
    \  It then\n      reformats the Tap request message to be a Tap response message\n\
    \      with a status indicating that the probe has been found, and sends\n   \
    \   the message back to its upstream neighbor.\n   -  If the switch is not the\
    \ probe switch, it forwards the Tap request\n      message to all its downstream\
    \ neighbors (if any).\n   -  If the switch is not the probe switch and has no\
    \ downstream\n      neighbors, it reformats the Tap request message to be a Tap\n\
    \      response message with a status indicating that the probe is not\n     \
    \ located on that leg of the switch flood path.   It then sends the\n      response\
    \ message back to its upstream neighbor.\n      When a switch forwards an Interswitch\
    \ Tap request message to its\n      downstream neighbors, it keeps track of the\
    \ number of requests it\n      has sent out.\n   -  If a response is received\
    \ with a status indicating that the probe\n      switch is located somewhere downstream,\
    \ the switch establishes the\n      appropriate type of tap connection (see Section\
    \ 5.2.1).  It then\n      formats a Tap response message with a status indicating\
    \ that the\n      probe has been found and passes the message to its upstream\n\
    \      neighbor.\n   -  If no responses are received with a status indicating\
    \ that the\n      probe switch is located downstream, the switch formats a Tap\n\
    \      response message with a status indicating that the probe has not\n    \
    \  been found and passes the message to its upstream neighbor.\n"
- title: 5.2.3 Status Field
  contents:
  - "5.2.3 Status Field\n   The status field of the Interswitch Tap request/response\
    \ message\n   contains information about the state of the tap.  Some of these\n\
    \   status values are transient and are merely used to track the progress\n  \
    \ of the tap request.  Other status values are stored in the tap table\n   of\
    \ each switch along the tap path for use when the tap is torn down.\n   The possible\
    \ status values are as follows:\n   -  StatusUnassigned.  This is the initial\
    \ status of the Interswitch\n      Tap request message.\n   -  OutportDecisionUnknown.\
    \  The tap request is still moving\n      downstream along the switch flood path.\
    \  The probe switch had not\n      yet been found.\n   -  ProbeNotFound.  The\
    \ probe switch is not located on this leg of the\n      switch flood path.\n \
    \  -  DisableOutport.  The probe switch is located on this leg of the\n      switch\
    \ flood path, and the switch has had to either modify the\n      call connection\
    \ or establish a new connection to implement the tap\n      (see Section 5.2.1).\
    \  When the tap is torn down, the switch will\n      have to disable any additional\
    \ outports that have been enabled for\n      the tap.\n   -  KeepOutport.  The\
    \ probe switch is located on this leg of the\n      switch flood path, and the\
    \ switch was able to route the tap over\n      the existing call path (see Section\
    \ 5.2.1).  Any ports used for\n      the tap will remain enabled when the tap\
    \ is torn down.\n"
- title: 5.3 Untapping a Connection
  contents:
  - "5.3 Untapping a Connection\n   A request to untap a call connection must be issued\
    \ on the tap\n   originating switch -- that is, the same switch that issued the\
    \ tap\n   request.\n   To untap a call connection, the originating switch sends\
    \ an\n   Interswitch Untap request message (Section 6.7) out over the switch\n\
    \   flood path to all other switches in the topology.  The message is\n   sent\
    \ over the switch flood path, rather than the tap connection path,\n   to ensure\
    \ that all switches that know of the tap are properly\n   notified, even if the\
    \ switch topology has changed since the tap was\n   established.\n   When a switch\
    \ receives an Interswitch Untap request message, it\n   checks to see if it is\
    \ handling a tap for the specified call\n   connection.  If so, the switch disables\
    \ the tap connection, as\n   follows:\n   -  If a new connection was added for\
    \ the tap, the connection is\n      deleted from the connection table.\n   - \
    \ If additional outports were enabled on the call connection, they\n      are\
    \ disabled.\n   The switch then forwards the Interswitch Untap request message\
    \ to its\n   downstream neighbor (if any).  If the switch has no downstream\n\
    \   neighbors, it formats an untap response and sends the message back to\n  \
    \ its upstream neighbor.\n   When a switch forwards an Interswitch Untap request\
    \ message to its\n   downstream neighbors, it keeps track of the number of requests\
    \ it has\n   sent out and does not respond back to its upstream neighbor until\
    \ all\n   untap requests have been responded to.  Once all responses have been\n\
    \   received, the switch handles any final cleanup for the tap and then\n   sends\
    \ a single Interswitch Untap response message to its upstream\n   neighbor.\n"
- title: 6. Interswitch Message Protocol (ISMP)
  contents:
  - "6. Interswitch Message Protocol (ISMP)\n   The InterSwitch Message protocol (ISMP)\
    \ provides a consistent method\n   of encapsulating and transmitting messages\
    \ exchanged between switches\n   to create and maintain the databases and provide\
    \ other control\n   services and functionality required by the SFVLAN product.\n"
- title: 6.1 General Packet Structure
  contents:
  - "6.1 General Packet Structure\n   ISMP packets are of variable length and have\
    \ the following general\n   structure:\n   -  Frame header\n   -  ISMP packet\
    \ header\n   -  ISMP message body\n   Each of these packet segments is discussed\
    \ separately in the\n   following subsections.\n"
- title: 6.1.1 Frame Header
  contents:
  - "6.1.1 Frame Header\n   ISMP packets are encapsulated within an IEEE 802-compliant\
    \ frame\n   using a standard header as shown below:\n       0                \
    \   1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   00 |                                                               |\n   \
    \   +      Destination address      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   04 |\
    \                               |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \        Source address         +\n   08 |                                   \
    \                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   12 |             Type              |                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n   16 |\
    \                                                               |\n      +   \
    \                                                            +\n      :      \
    \                                                         :\n   Destination address\n\
    \      This 6-octet field contains the Media Access Control (MAC) address\n  \
    \    of the multicast channel over which all switches in the fabric\n      receive\
    \ ISMP packets.  Except where otherwise noted, this field\n      contains the\
    \ multicast address of the control channel over which\n      all switches in the\
    \ fabric receive ISMP packets -- a value of 01-\n      00-1D-00-00-00.\n   Source\
    \ address\n      Except where otherwise noted, this 6-octet field contains the\n\
    \      physical (MAC) address of the switch originating the ISMP packet.\n   Type\n\
    \      This 2-octet field identifies the type of data carried within the\n   \
    \   frame.  Except where otherwise noted, the type field of ISMP\n      packets\
    \ contains the value 0x81FD.\n"
- title: 6.1.2 ISMP Packet Header
  contents:
  - "6.1.2 ISMP Packet Header\n   There are two versions of the ISMP packet header\
    \ in use by the\n   SecureFast VLAN product.\n"
- title: 6.1.2.1 Version 2
  contents:
  - "6.1.2.1 Version 2\n   The version 2 ISMP packet header consists of 6 octets,\
    \ as shown\n   below:\n       0                   1                   2      \
    \             3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   00 |///////////////////////////////////////////////////////////////|\n   \
    \   ://////// Frame header /////////////////////////////////////////:\n      +////////\
    \ (14 octets)  /////////+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   12 |///////////////////////////////|\
    \            Version            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   16 |       ISMP message type       |        Sequence number        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   20 |\
    \                                                               |\n      +   \
    \                                                            +\n      :      \
    \                                                         :\n   Frame header\n\
    \      This 14-octet field contains the frame header (Section 6.1.1).\n   Version\n\
    \      This 2-octet field contains the version number of the InterSwitch\n   \
    \   Message Protocol to which this ISMP packet adheres. This document\n      describes\
    \ ISMP Version 2.0.\n   ISMP message type\n      This 2-octet field contains a\
    \ value indicating which type of ISMP\n      message is contained within the message\
    \ body.  The following table\n      lists each ISMP message, along with its message\
    \ type and the\n      section within this document that describes the message\
    \ in detail:\n         Message Name                       Type    Description\n\
    \         Interswitch Link State message        3    See note below\n        \
    \ Interswitch BPDU message              4    Section 6.2\n         Interswitch\
    \ Remote Blocking message   4    Section 6.3\n         Interswitch Resolve message\
    \           5    Section 6.4\n         Interswitch New User message          5\
    \    Section 6.5\n         Interswitch Tag-Based Flood message   7    Section\
    \ 6.6\n         Interswitch Tap/Untap message         8    Section 6.7\n     \
    \ Note:\n         The Link State messages used by the VLS Protocol are not\n \
    \        described in this document.  For a detailed description of\n        \
    \ these messages, see [IDvlsp].\n   Sequence number\n      This 2-octet field\
    \ contains an internally generated sequence\n      number used by the various\
    \ protocol handlers for internal\n      synchronization of messages.\n"
- title: 6.1.2.2 Version 3
  contents:
  - "6.1.2.2 Version 3\n   The version 3 ISMP packet header is used only by the Interswitch\n\
    \   Keepalive message.  That message is not described in this document.\n   For\
    \ a detailed description of the version 3 ISMP packet header, see\n   [IDhello].\n"
- title: 6.1.3 ISMP Message Body
  contents:
  - "6.1.3 ISMP Message Body\n   The ISMP message body is a variable-length field\
    \ containing the\n   actual data of the ISMP message.  The length and content\
    \ of this\n   field are determined by the value found in the message type field.\n\
    \   See the following sections for the exact format of each message type.\n"
- title: 6.2 Interswitch BPDU Message
  contents:
  - "6.2 Interswitch BPDU Message\n   The Interswitch BPDU message consists of a variable\
    \ number of octets,\n   as shown below:\n       0                   1        \
    \           2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   00 |                                                               |\n   \
    \   +                         Frame header /                        +\n      :\
    \                   ISMP packet header (type 4)                 :\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   20 |            Version            |            Opcode             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   24 |\
    \          Message flags        |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   28 |                                   \
    \                            |\n      :                          BPDU packet \
    \                         :\n      |                                         \
    \                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Frame header/ISMP packet header\n      This 20-octet field contains the frame\
    \ header and the ISMP packet\n      header.\n   Version\n      This 2-octet field\
    \ contains the version number of the message\n      type.  This document describes\
    \ ISMP message type 4, version 1.\n   Opcode\n      This 2-octet field contains\
    \ the operation type of the message. For\n      an Interswitch BPDU message, the\
    \ value should be 1.\n   Message flags\n      This 2-octet field is currently\
    \ unused.  It is reserved for future\n      use.\n   BPDU packet\n      This variable-length\
    \ field contains an IEEE-compliant 802.2 Bridge\n      Protocol Data Unit.  See\
    \ [IEEE] for a detailed description of the\n      contents of this field.\n"
- title: 6.3 Interswitch Remote Blocking Message
  contents:
  - "6.3 Interswitch Remote Blocking Message\n   The Interswitch Remote Blocking message\
    \ consists of 30 octets, as\n   shown below:\n       0                   1   \
    \                2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   00 |                                                               |\n   \
    \   +                         Frame header /                        +\n      :\
    \                   ISMP packet header (type 4)                 :\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   20 |            Version            |           Opcode              |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   24 |\
    \          Message flags        |        Blocking flag ...      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   28 |       ... Blocking flag       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Frame header/ISMP packet header\n      This 20-octet field contains the frame\
    \ header and the ISMP packet\n      header.\n   Version\n      This 2-octet field\
    \ contains the version number of the message\n      type.  This document describes\
    \ ISMP message type 4, version 1.\n   Opcode\n      This 2-octet field contains\
    \ the operation type of the message.\n      Valid values are as follows:\n   \
    \      2   Enable/disable remote blocking\n         3   Acknowledge previously\
    \ received Remote Blocking message\n   Message flags\n         This 2-octet field\
    \ is currently unused.  It is reserved for\n         future use.\n   Blocking\
    \ flag\n         This 4-octet field contains a flag indicating the state of\n\
    \         remote blocking on the link over which the message was\n         received.\
    \  A value of 1 indicates remote blocking is on and no\n         undirected ISMP\
    \ messages should be sent over the link.  A value\n         of 0 indicates remote\
    \ blocking is off.  This flag is irrelevant\n         if the operation type (Opcode)\
    \ of the message has a value of 3.\n"
- title: 6.4 Interswitch Resolve Message
  contents:
  - "6.4 Interswitch Resolve Message\n   There are two versions of the Interswitch\
    \ Resolve message used by the\n   SecureFast VLAN product.\n"
- title: 6.4.1 Prior to Version 1.8
  contents:
  - "6.4.1 Prior to Version 1.8\n   The Interswitch Resolve message used by SFVLAN\
    \ prior to version 1.8\n   consists of a variable number of octets, as shown below:\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    00 |                                                               |\n  \
    \     +                         Frame header /                        +\n    \
    \   :                   ISMP packet header (type 5)                 :\n      \
    \ |                                                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    20 |           Version             |            Opcode             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    24\
    \ |            Status             |           Call Tag            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    28 |                                                               |\n  \
    \     +     Source MAC of packet      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    32\
    \ |                               |                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \     Originating switch MAC    +\n    36 |                                  \
    \                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    40 |                                                               |\n  \
    \     +       Owner switch MAC        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    44\
    \ |                               |                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n    48 |                                  \
    \                             |\n       :                   Known destination\
    \ address                   :\n       |                                      \
    \                         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     n |     Count     |                                               |\n  \
    \     +-+-+-+-+-+-+-+-+                                               +\n   n+4\
    \ |                         Resolve list                          |\n       :\
    \                                                               :\n       |  \
    \                                                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          n = 46 + length of known address TLV\n   In the following description\
    \ of the message fields, the term\n   \"originating\" switch refers to the switch\
    \ that issued the original\n   Interswitch Resolve request.  The term \"owner\"\
    \ switch refers to that\n   switch to which the destination endstation is attached.\
    \  And the term\n   \"responding\" switch refers to either the \"owner\" switch\
    \ or to a\n   switch at the end of the switch flood path that does not own the\n\
    \   endstation but issues an Interswitch Resolve response because it has\n   no\
    \ downstream neighbors.\n   With the exception of the resolve list (which has\
    \ a different size\n   and format in a Resolve response message), all fields of\
    \ an\n   Interswitch Resolve message are allocated by the originating switch,\n\
    \   and unless otherwise noted below, are written by the originating\n   switch.\n\
    \   Frame header/ISMP packet header\n      This 20-octet field contains the frame\
    \ header and the ISMP packet\n      header.\n   Version\n      This 2-octet field\
    \ contains the version number of the message\n      type.  This document describes\
    \ ISMP message type 5, version 1.\n   Opcode\n      This 2-octet field contains\
    \ the operation code of the message.\n      Valid values are as follows:\n   \
    \      1    The message is a Resolve request.\n         2    The message is a\
    \ Resolve response.\n         3    (unused in Resolve messages)\n         4  \
    \  (unused in Resolve messages)\n      The originating switch writes a value of\
    \ 1 to this field, while\n      the responding switch writes a value of 2.\n \
    \  Status\n      This 2-octet field contains the status of a Resolve response\n\
    \      message.  Valid values are as follows:\n         0    The Resolve request\
    \ succeeded (ResolveAck).\n         1    (unused)\n         2    The Resolve request\
    \ failed (Unknown).\n      This field is written by the responding switch.\n \
    \  Call tag\n      This 2-octet field contains the call tag of the endstation\
    \ packet\n      for which this Resolve request is issued.  The call tag is a 16-\n\
    \      bit value (generated by the originating switch) that uniquely\n      identifies\
    \ the packet.\n   Source MAC of packet\n      This 6-octet field contains the\
    \ physical (MAC) address of the\n      endstation that originated the packet identified\
    \ by the call tag.\n   Originating switch MAC\n      This 6-octet field contains\
    \ the physical (MAC) address of the\n      switch that issued the original Resolve\
    \ request.\n   Owner switch MAC\n      This 6-octet field contains the physical\
    \ (MAC) address of the\n      switch to which the destination endstation is attached\
    \ -- that is,\n      the switch that was able to resolve the requested addressing\n\
    \      information.  This field is written by the owner switch.\n      If the\
    \ status of the response is Unknown, this field is\n      irrelevant.\n   Known\
    \ destination address\n      This variable-length field contains the known attribute\
    \ of the\n      destination endstation address.  This address is stored in\n \
    \     Tag/Length/Value format.  (See Section 2.3.)\n   Count\n      This 1-octet\
    \ field contains the number of address attributes\n      requested or returned.\
    \  This is the number of items in the resolve\n      list.\n   Resolve list\n\
    \      This variable-length field contains a list of the address\n      attributes\
    \ either requested by the originating switch or returned\n      by the owner switch.\
    \  Note that in a Resolve request message, this\n      list contains only the\
    \ tags of the requested address attributes\n      (see Section 2.3).  On the other\
    \ hand, a Resolve response message\n      with a status of ResolveAck contains\
    \ the full TLV of each resolved\n      address attribute.  The number of entries\
    \ in the list is specified\n      in the count field.\n      In an Interswitch\
    \ Resolve response message, this field is\n      irrelevant if the status of the\
    \ response is Unknown.\n"
- title: 6.4.2 Version 1.8
  contents:
  - "6.4.2 Version 1.8\n   The Interswitch Resolve message used by SFVLAN version\
    \ 1.8 consists\n   of a variable number of octets, as shown below:\n       0 \
    \                  1                   2                   3\n       0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   00 |                                                               |\n   \
    \   +                         Frame header /                        +\n      :\
    \                   ISMP packet header (type 5)                 :\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   20 |           Version             |            Opcode             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   24 |\
    \            Status             |           Call Tag            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   28 |                                                               |\n   \
    \   +     Source MAC of packet      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   32 |\
    \                               |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \     Originating switch MAC    +\n   36 |                                   \
    \                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   40 |                                                               |\n   \
    \   +       Owner switch MAC        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   44 |\
    \                               |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   48 |                                   \
    \                            |\n      :                   Known destination address\
    \                   :\n      |                                               \
    \                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    n |     Count     |                                               |\n   \
    \   +-+-+-+-+-+-+-+-+                                               +\n  n+4 |\
    \                         Resolve list                          |\n      :   \
    \                                                            :\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   n1 |                                                               |\n   \
    \   +    Actual dest switch MAC     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                               |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \     Downlink chassis MAC      +\n n1+8 |                                   \
    \                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: n1+12 |                                                               |
  contents:
  - "n1+12 |                                                               |\n   \
    \   +      Actual chassis MAC       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                               |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n"
- title: n1+20 |                                                               |
  contents:
  - "n1+20 |                                                               |\n   \
    \   +                          Domain name                          +\n      :\
    \                                                               :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           n = 46 + length of known address TLV\n           n1 = n + length of\
    \ Resolve list\n   In the following description of the message fields, the term\n\
    \   \"originating\" switch refers to the switch that issued the original\n   Interswitch\
    \ Resolve request.  The term \"owner\" switch refers to that\n   switch to which\
    \ the destination endstation is attached.  And the term\n   \"responding\" switch\
    \ refers to either the \"owner\" switch or to a\n   switch at the end of the switch\
    \ flood path that does not own the\n   endstation but issues an Interswitch Resolve\
    \ response because it has\n   no downstream neighbors.\n   With the exception\
    \ of the resolve list (which has a different size\n   and format in a Resolve\
    \ response message) and the four fields\n   following the resolve list, all fields\
    \ of an Interswitch Resolve\n   message are allocated by the originating switch,\
    \ and unless otherwise\n   noted below, are written by the originating switch.\n\
    \   Frame header/ISMP packet header\n      This 20-octet field contains the frame\
    \ header and the ISMP packet\n      header.\n   Version\n      This 2-octet field\
    \ contains the version number of the message\n      type.  This section describes\
    \ version 3 of the Interswitch Resolve\n      message.\n   Opcode\n      This\
    \ 2-octet field contains the operation code of the message.\n      Valid values\
    \ are as follows:\n         1    The message is a Resolve request.\n         2\
    \    The message is a Resolve response.\n         3    (unused in Resolve messages)\n\
    \         4    (unused in Resolve messages)\n      The originating switch writes\
    \ a value of 1 to this field, while\n      the responding switch writes a value\
    \ of 2.\n   Status\n      This 2-octet field contains the status of a Resolve\
    \ response\n      message.  Valid values are as follows:\n         0    The Resolve\
    \ request succeeded (ResolveAck).\n         1    (unused)\n         2    The Resolve\
    \ request failed (Unknown).\n      This field is written by the responding switch.\n\
    \   Call tag\n      This 2-octet field contains the call tag of the endstation\
    \ packet\n      for which this Resolve request is issued.  The call tag is a 16-\n\
    \      bit value (generated by the originating switch) that uniquely\n      identifies\
    \ the packet.\n   Source MAC of packet\n      This 6-octet field contains the\
    \ physical (MAC) address of the\n      endstation that originated the packet identified\
    \ by the call tag.\n   Originating switch MAC\n      This 6-octet field contains\
    \ the physical (MAC) address of the\n      switch that issued the original Resolve\
    \ request.\n   Owner switch MAC\n      This 6-octet field contains the physical\
    \ (MAC) address of the\n      switch to which the destination endstation is attached\
    \ -- that is,\n      the switch that was able to resolve the requested addressing\n\
    \      information.  This field is written by the owner switch.\n      If the\
    \ status of the response is Unknown, this field is\n      irrelevant.\n   Known\
    \ destination address\n      This variable-length field contains the known attribute\
    \ of the\n      destination endstation address.  This address is stored in\n \
    \     Tag/Length/Value format.\n   Count\n      This 1-octet field contains the\
    \ number of address attributes\n      requested or returned.  This is the number\
    \ of items in the resolve\n      list.\n   Resolve list\n      This variable-length\
    \ field contains a list of the address\n      attributes either requested by the\
    \ originating switch or returned\n      by the owner switch.  Note that in a Resolve\
    \ request message, this\n      list contains only the tags of the requested address\
    \ attributes.\n      On the other hand, a Resolve response message with a status\
    \ of\n      ResolveAck contains the full TLV of each resolved address\n      attribute.\
    \  The number of entries in the list is specified in the\n      count field.\n\
    \      In an Interswitch Resolve response message, this field is\n      irrelevant\
    \ if the status of the response is Unknown.\n   Actual destination switch MAC\n\
    \      This 6-octet field contains the physical (MAC) address of the\n      actual\
    \ switch within the chassis to which the endstation is\n      attached.  If the\
    \ status of the response is Unknown, this field is\n      irrelevant.\n   Downlink\
    \ chassis MAC\n      This 6-octet field contains the physical (MAC) address of\
    \ the\n      downlink chassis.  If the status of the response is Unknown, this\n\
    \      field is irrelevant.\n   Actual chassis MAC\n      This 6-octet field contains\
    \ the physical (MAC) address of the\n      uplink chassis.  If the status of the\
    \ response is Unknown, this\n      field is irrelevant.\n   Domain name\n    \
    \  This 16-octet field contains the ASCII name of the domain.  If the\n      status\
    \ of the response is Unknown, this field is irrelevant.\n"
- title: 6.5 Interswitch New User Message
  contents:
  - "6.5 Interswitch New User Message\n   The Interswitch New User message consists\
    \ of a variable number of\n   octets, as shown below:\n       0              \
    \     1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   00 |                                                               |\n   \
    \   +                         Frame header /                        +\n      :\
    \                   ISMP packet header (type 5)                 :\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   20 |           Version             |            Opcode             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   24 |\
    \            Status             |           Call Tag            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   28 |                                                               |\n   \
    \   +     Source MAC of packet      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   32 |\
    \                               |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \     Originating switch MAC    +\n   36 |                                   \
    \                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   40 |                                                               |\n   \
    \   +   Previous owner switch MAC   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   44 |\
    \                               |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   48 |                                   \
    \                            :\n      :                    MAC address of new\
    \ user                    +\n      |                                         \
    \                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   70 |     Count     |                                               |\n   \
    \   +-+-+-+-+-+-+-+-+                                               +\n   74 |\
    \                          Resolve list                         |\n      :   \
    \                                                            :\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   In the following description of the message fields, the term\n   \"originating\"\
    \ switch refers to the switch that issued the original\n   Interswitch New User\
    \ request.  The term \"previous owner\" switch\n   refers to that switch to which\
    \ the endstation was previously\n   attached.  And the term \"responding\" switch\
    \ refers to either the\n   \"previous owner\" switch or to a switch at the end\
    \ of the switch flood\n   path that did not own the endstation but issues an Interswitch\
    \ New\n   User response because it has no downstream neighbors.\n   With the exception\
    \ of the resolve list, all fields of an Interswitch\n   New User message are allocated\
    \ by the originating switch, and unless\n   otherwise noted below, are written\
    \ by the originating switch.\n   Frame header/ISMP packet header\n      This 20-octet\
    \ field contains the frame header and the ISMP packet\n      header.\n   Version\n\
    \      This 2-octet field contains the version number of the message\n      type.\
    \  This document describes ISMP message type 5, version 1.\n   Opcode\n      This\
    \ 2-octet field contains the operation code of the message.\n      Valid values\
    \ are as follows:\n         1    (unused in a New User message)\n         2  \
    \  (unused in a New User message)\n         3    The message is a New User request.\n\
    \         4    The message is a New User response.\n      The originating switch\
    \ writes a value of 3 to this field, while\n      the responding switch writes\
    \ a value of 4.\n   Status\n      This 2-octet field contains the status of a\
    \ New User response\n      message.  Valid values are as follows:\n         0\
    \    VLAN resolution successful (NewUserAck)\n         1    (unused)\n       \
    \  2    VLAN resolution unsuccessful (NewUserUnknown)\n      This field is written\
    \ by the responding switch.\n   Call tag\n      This 2-octet field contains the\
    \ call tag of the endstation packet\n      for which this New User request is\
    \ issued.  The call tag is a 16-\n      bit value (generated by the originating\
    \ switch) that uniquely\n      identifies the packet that caused the switch to\
    \ identify the\n      endstation as a new user.\n   Source MAC of packet\n   \
    \   This 6-octet field contains the physical (MAC) address of the\n      endstation\
    \ that originated the packet identified by the call tag.\n   Originating switch\
    \ MAC\n      This 6-octet field contains the physical (MAC) address of the\n \
    \     switch that issued the original New User request.\n   Previous owner switch\
    \ MAC\n      This 6-octet field contains the physical (MAC) address of the\n \
    \     switch to which the endstation was previously attached -- that is,\n   \
    \   the switch that was able to resolve the VLAN information. This\n      field\
    \ is written by the previous owner switch.\n      If the status of the response\
    \ is Unknown, this field is\n      irrelevant.\n   MAC address of new user\n \
    \     This 24-octet field contains the physical (MAC) address of the new\n   \
    \   user endstation, stored in Tag/Length/Value format.\n   Count\n      This\
    \ 1-octet field contains the number of VLAN identifiers\n      returned.  This\
    \ is the number of items in the resolve list. This\n      field is written by\
    \ the previous owner switch.\n      If the status of the response is Unknown,\
    \ this field and the\n      resolve list are irrelevant.\n   Resolve list\n  \
    \    This variable-length field contains a list of the VLAN identifiers\n    \
    \  of all static VLANs to which the endstation belongs, stored in\n      Tag/Length/Value\
    \ format (see Section 2.3). The number of entries\n      in the list is specified\
    \ in the count field.  This list is written\n      by the previous owner switch.\n\
    \      If the status of the response is Unknown, this field is\n      irrelevant.\n"
- title: 6.6 Interswitch Tag-Based Flood Message
  contents:
  - "6.6 Interswitch Tag-Based Flood Message\n   There are two versions of the Interswitch\
    \ Tag-Based Flood message\n   used by the SecureFast VLAN product.\n"
- title: 6.6.1 Prior to Version 1.8
  contents:
  - "6.6.1 Prior to Version 1.8\n   The Interswitch Tag-Based Flood message used by\
    \ SFVLAN prior to\n   version 1.8 consists of a variable number of octets, as\
    \ shown below:\n       0                   1                   2             \
    \      3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   00 |                                                               |\n   \
    \   +                         Frame header /                        +\n      :\
    \                   ISMP packet header (type 7)                 :\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   20 |           Version             |            Opcode             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   24 |\
    \            Status             |           Call Tag            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   28 |                                                               |\n   \
    \   +     Source MAC of packet      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   32 |\
    \                               |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \     Originating switch MAC    +\n   36 |                                   \
    \                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   40 |     Count     |                                               |\n   \
    \   +-+-+-+-+-+-+-+-+                                               +\n   44 |\
    \                           VLAN list                           |\n      :   \
    \                                                            :\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    n |                                                               |\n   \
    \   +                                                               +\n      :\
    \                        Original packet                        :\n      +   \
    \                                                            +\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         n = 41 + length of VLAN list\n   Frame header/ISMP packet header\n \
    \     This 20-octet field contains the frame header and the ISMP packet\n    \
    \  header.\n   Version\n      This 2-octet field contains the version number of\
    \ the message\n      type.  This document describes ISMP message type 7, version\
    \ 1.\n   Opcode\n      This 2-octet field contains the operation code of the message.\
    \ The\n      value here should be 1, indicating the message is a flood request.\n\
    \   Status\n      This 2-octet field is currently unused.  It is reserved for\
    \ future\n      use.\n   Call tag\n      This 2-octet field contains the call\
    \ tag of the endstation packet\n      encapsulated within this tag-based flood\
    \ message.  The call tag is\n      a 16-bit value (generated by the originating\
    \ switch) that uniquely\n      identifies the packet.\n   Source MAC of packet\n\
    \      This 6-octet field contains the physical (MAC) address of the\n      endstation\
    \ that originated the packet identified by the call tag.\n   Originating switch\
    \ MAC\n      This 6-octet field contains the physical (MAC) address of the\n \
    \     switch that issued the original tag-based flooded message.\n   Count\n \
    \     This 1-octet field contains the number of VLAN identifiers\n      included\
    \ in the VLAN list.\n   VLAN list\n      This variable-length field contains a\
    \ list of the VLAN identifiers\n      of all VLANs to which the source endstation\
    \ belongs.  Each entry\n      in this list has the following format:\n       0\
    \                   1                   2                   3\n       0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Value length  |                                               |\n   \
    \   +-+-+-+-+-+-+-+-+                                               +\n      |\
    \                        VLAN identifier value                  |\n      :   \
    \                                                            :\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The 1-octet value length field contains the length of the VLAN\n      identifier.\
    \  VLAN identifiers can be from 1 to 16 characters long.\n   Original packet\n\
    \      This variable-length field contains the original packet as sent by\n  \
    \    the source endstation.\n"
- title: 6.6.2 Version 1.8
  contents:
  - "6.6.2 Version 1.8\n   The Interswitch Tag-Based Flood message used by SFVLAN\
    \ version 1.8\n   consists of a variable number of octets, as shown below:\n \
    \     Note:\n         SFVLAN version 1.8 also recognizes the Interswitch Tag-Based\n\
    \         Flood message as described in Section 6.6.1.\n       0             \
    \      1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   00 |                                                               |\n   \
    \   +                         Frame header /                        +\n      :\
    \                   ISMP packet header (type 7)                 :\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   20 |       VLAN identifier         |           Version             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   24 |\
    \           Opcode              |            Status             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   28 |          Call tag             |                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     Source MAC of packet      +\n   32 |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   36 |                                                               |\n   \
    \   +    Originating switch MAC     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   40 |\
    \                               |     Count     |               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \               +\n   44 |                                                   \
    \            |\n      :                           VLAN list                  \
    \         :\n      |                                                         \
    \      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    n |                                                               |\n   \
    \   +                                                               +\n      :\
    \                        Original packet                        :\n      +   \
    \                                                            +\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            n = 41 + length of VLAN list\n   Frame header/ISMP packet header\n\
    \      This 20-octet field contains the frame header and the ISMP packet\n   \
    \   header.\n      -  The frame header source address contains a value of 02-00-1D-\n\
    \         00-xx-yy, where xx-yy is a value set by the VLAN Manager\n         application\
    \ to tag the frame header with the VLAN identifier.\n         This value ranges\
    \ from 2 to 4095.  For example, a value of 100\n         would be set as 00-64.\n\
    \      -  The frame header type field contains a value of 0x81FF.  Note\n    \
    \     that this differs from all other ISMP messages.\n   VLAN identifier\n  \
    \    This 2-octet field contains the VLAN identifier of the packet\n      source.\n\
    \   Version\n      This 2-octet field contains the version number of the message\n\
    \      type.  This section describes version 2 of the Interswitch Tag-\n     \
    \ Based Flood message.\n   Opcode\n      This 2-octet field contains the operation\
    \ code of the message.\n      Valid values here are as follows:\n      1  The\
    \ message is a flood request.  The original packet is\n         complete within\
    \ this message.\n      2  The message is a fragmented flood request.  The first\
    \ portion\n         of the original packet is contained in this message.\n   \
    \   3  The message is a fragmented flood request.  The second portion\n      \
    \   of the original packet is contained in this message.\n   Status\n      This\
    \ 2-octet field is currently unused.  It is reserved for future\n      use.\n\
    \   Call tag\n      This 2-octet field contains the call tag of the endstation\
    \ packet\n      encapsulated within this tag-based flood message.  The call tag\
    \ is\n      a 16-bit value (generated by the originating switch) that uniquely\n\
    \      identifies the packet.\n   Source MAC of packet\n      This 6-octet field\
    \ contains the physical (MAC) address of the\n      endstation that originated\
    \ the packet identified by the call tag.\n   Originating switch MAC\n      This\
    \ 6-octet field contains the physical (MAC) address of the\n      switch that\
    \ issued the original tag-based flooded message.\n   Count\n      This 1-octet\
    \ field contains the number of VLAN identifiers\n      included in the VLAN list.\n\
    \   VLAN list\n      This variable-length field contains a list of the VLAN identifiers\n\
    \      of all VLANs to which the source endstation belongs.  Each entry\n    \
    \  in this list has the following format:\n       0                   1      \
    \             2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Value length  |                                               |\n   \
    \   +-+-+-+-+-+-+-+-+                                               +\n      |\
    \                        VLAN identifier value                  |\n      :   \
    \                                                            :\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The 1-octet value length field contains the length of the VLAN\n      identifier.\
    \  VLAN identifiers can be from 1 to 16 characters long.\n   Original packet\n\
    \      This variable-length field contains the original packet as sent by\n  \
    \    the source endstation.\n"
- title: 6.7 Interswitch Tap/Untap Message
  contents:
  - "6.7 Interswitch Tap/Untap Message\n   The Interswitch Tap/Untap message consists\
    \ of a variable number of\n   octets, as shown below:\n       0              \
    \     1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   00 |                                                               |\n   \
    \   +                         Frame header /                        +\n      :\
    \                   ISMP packet header (type 8)                 :\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   20 |            Version            |            Opcode             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   24 |\
    \             Status            |          Error code           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   28 |           Header type         |         Header length         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   32 |\
    \            Direction          |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \       Probe switch MAC        +\n   36 |                                   \
    \                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   40 |                           Probe port                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   44 |\
    \                                                               |\n      +   \
    \                                                            +\n   48 |      \
    \                     (Reserved)                          |\n      +         \
    \                                                      +\n   52 |            \
    \                                                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   56 |                                                               |\n   \
    \   +                                                               +\n      |\
    \                             Header                            |\n      +   \
    \                                                            +\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Frame header/ISMP packet header\n      This 20-octet field contains the frame\
    \ header and the ISMP packet\n      header.\n   Version\n      This 2-octet field\
    \ contains the version number of the message\n      type.  This document describes\
    \ ISMP message type 8, version 1.\n   Opcode\n      tet field contains the operation\
    \ type of the message. ues are as\n      follows:\n         1  The message is\
    \ a Tap request.\n         2  The message is a Tap response.\n         3  The\
    \ message is an Untap request.\n         4  The message is an Untap response.\n\
    \   Status\n      This 2-octet field contains the current status of the tap request.\n\
    \      Valid values are as follows:\n         1  Switch must disable outport on\
    \ untap. (DisableOutport)\n         2  Switch must keep outports on untap. (KeepOutport)\n\
    \         3  Probe not found this leg of spanning tree. (ProbeNotFound)\n    \
    \     4  Still searching for probe switch. (OutportDecisionUnknown)\n        \
    \ 5  Unassigned. (StatusUnassigned)\n         6  (reserved)\n         7  (reserved)\n\
    \         8  (reserved)\n         9  (reserved)\n      See Section 5.2.3 for details\
    \ on the use of this field.\n   Error code\n      This 2-octet field contains\
    \ the response message error code of the\n      requested operation.  Valid values\
    \ are as follows:\n         1  Operation successful. (NoError)\n         2  No\
    \ response heard from downstream neighbor. (Timeout)\n         3  Port does not\
    \ exist on probe switch. (BadPort)\n         4  Message invalid. (InvalidMessage)\n\
    \         5  Version number invalid. (IncompatibleVersions)\n   Header type\n\
    \      This 2-octet field contains the type of information contained in\n    \
    \  the header field.  Currently, valid values are as follows:\n      1  (reserved)\
    \ 2  Header contains destination and source endstation\n         MAC addresses.\n\
    \   Header length\n      This 2-octet field contains the length of the header\
    \ field.\n      Currently, this field always contains a value of 12.\n   Direction\n\
    \      This 2-octet field contains a value indicating the type of tap.\n     \
    \ Valid values are as follows:\n      1  (reserved)\n      2  Tap is bi-directional\
    \ and data should be captured flowing in\n         either direction over the connection.\n\
    \      3  Tap is uni-directional and data should be captured only when it\n  \
    \       flows from the source to the destination.\n   Probe switch MAC\n     \
    \ This 6-octet field contains the physical (MAC) address of the\n      switch\
    \ to which the probe is attached.\n   Probe port\n      This 4-octet field contains\
    \ the logical port number (on the probe\n      switch) to which the probe is attached.\n\
    \   Reserved\n      These 12 octets are reserved.\n   Header\n      This variable-length\
    \ field contains the header that identifies the\n      connection being tapped.\
    \  The length of the header is stored in\n      the length field.\n      Currently,\
    \ this field is 12 octets long and contains the 6-octet\n      physical address\
    \ of the connection's destination endstation,\n      followed by the 6-octet physical\
    \ address of the connection's\n      source endstation, as shown below:\n    \
    \   0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +    Destination MAC address    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                               |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \      Source MAC address       +\n      |                                   \
    \                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   Requested call connections are established or\
    \ denied based on the\n   VLAN policy of the source and destination addresses\
    \ specified within\n   the packet.  Section 4.4.1 discusses this process in detail.\n"
- title: 8. References
  contents:
  - "8. References\n   [RFC1700]   Reynolds, J. and J. Postel, \"Assigned Numbers\"\
    , STD 2,\n               RFC 1700, October 1994.\n   [IEEE]      \"IEEE Standard\
    \ 802.1d -- 1990\"\n   [IDvlsp]    Kane, L., \"Cabletron's VLS Protocol Specification\"\
    , RFC\n               2642, August 1999.\n   [IDhello]   Hamilton, D. and D. Ruffen,\
    \ \"Cabletron's VlanHello\n               Protocol Specification\", RFC 2641,\
    \ August 1999.\n"
- title: 9. Authors' Addresses
  contents:
  - "9. Authors' Addresses\n   Dave Ruffen\n   Cabletron Systems, Inc.\n   Post Office\
    \ Box 5005\n   Rochester, NH  03866-5005\n   Phone: (603) 332-9400\n   EMail:\
    \ ruffen@ctron.com\n   Ted Len\n   Cabletron Systems, Inc.\n   Post Office Box\
    \ 5005\n   Rochester, NH  03866-5005\n   Phone: (603) 332-9400\n   EMail:  len@ctron.com\n\
    \   Judy Yanacek\n   Cabletron Systems, Inc.\n   Post Office Box 5005\n   Rochester,\
    \ NH  03866-5005\n   Phone: (603) 332-9400\n   EMail:  jyanacek@ctron.com\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
