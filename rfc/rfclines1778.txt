Abstract The Lightweight Directory Access Protocol (LDAP)
[9] requires that the contents of AttributeValue fields in protocol elements be octet strings.
This document defines the requirements that must be satisfied by encoding rules used to render X.500 Directory attribute syntaxes into a form suitable for use in the LDAP, then goes on to define the encoding rules for the standard set of attribute syntaxes defined in [1,2] and [3].
This section defines general requirements for lightweight directory protocol attribute syntax encodings.
All documents defining attribute syntax encodings for use by the lightweight directory protocols are expected to conform to these requirements.
The encoding rules defined for a given attribute syntax must produce octet strings.
To the greatest extent possible, encoded octet strings should be usable in their native encoded form for display purposes.
In particular, encoding rules for attribute syntaxes defining non binary values should produce strings that can be displayed with little or no translation by clients implementing the lightweight directory protocols.
Undefined Values of type Undefined are encoded as if they were values of type Octet String, with the string value being the BER encoded version of the value.
A string of type caseIgnoreStringSyntax is encoded as the string value itself.
The encoding of a string of type caseExactStringSyntax is the string value itself.
The encoding of a string of type printableStringSyntax is the string value itself.
The encoding of a string of type numericStringSyntax is the string value itself.
The encoding of a string of type octetStringSyntax is the string value itself.
The encoding of a string of type caseIgnoreIA5String is the string value itself.
The encoding of a string of type iA5StringSyntax is the string value itself.
The encoding of a string of type t61StringSyntax is the string value itself.
Case Exact List Values of type caseExactListSyntax are encoded according to the following BNF:
Distinguished Name Values of type distinguishedNameSyntax are encoded to have the representation defined in [5].
Boolean Values of type booleanSyntax are encoded according to the following BNF:
Integer Values of type integerSyntax are encoded as the decimal representation of their values, with each decimal digit represented by the its character equivalent.
So the digit 1 is represented by the character 2.15.
Object Identifier Values of type objectIdentifierSyntax are encoded according to the following BNF:
In the above BNF, <descr
> is the syntactic representation of an object descriptor.
When encoding values of type objectIdentifierSyntax, the first encoding option should be used in preference to the second, which should be used in preference to the third wherever possible.
That is, in encoding object identifiers, object descriptors (where assigned and known by the implementation) should be used in preference to numeric oids to the greatest extent possible.
For example, in encoding the object identifier representing an organizationName, the descriptor "organizationName" is preferable to "
ds.4.10", which is in turn preferable to the string "2.5.4.10".
Telephone Number Values of type telephoneNumberSyntax are encoded as if they were Printable String types.
Telex Number Values of type telexNumberSyntax are encoded according to the following BNF:
In the above, <actual number> is the syntactic representation of the number portion of the TELEX number being encoded, <country> is the TELEX country code, and <answerback> is the answerback code of a TELEX terminal.
Teletex Terminal Identifier Values of type
teletexTerminalIdentifier are encoded according to the following BNF:
In the above, the first <printablestring> is the encoding of the first portion of the teletex terminal identifier to be encoded, and the subsequent 0 or more <printablestrings> are subsequent portions of the teletex terminal identifier.
Facsimile Telephone Number Values of type
FacsimileTelephoneNumber are encoded according to the following BNF:
In the above, the first <printablestring> is the actual fax number, and the <faxparm>
Presentation Address Values of type PresentationAddress are encoded to have the representation described in [6].
UTC Time Values of type uTCTimeSyntax are encoded as if they were Printable Strings with the strings containing a UTCTime value.
Guide (search guide) Values of type Guide, such as values of the searchGuide attribute, are encoded according to the following BNF:
PostalAddress are encoded according to the following BNF: <postal address
In the above, each <t61string> component of a postal address value is encoded as a value of type t61StringSyntax.
User Password Values of type userPasswordSyntax are encoded as if they were of type octetStringSyntax.
User Certificate Values of type userCertificate are encoded according to the following BNF:
an encoded Distinguished Name <validity
CA Certificate Values of type cACertificate are encoded as if the values were of type userCertificate.
Authority Revocation List Values of type authorityRevocationList are encoded according to the following BNF:
The syntactic components <signature algorithm
>, <issuer>, <encrypted sign value>, <utc time>, <subject> and <serial> have the same definitions as in the BNF for the userCertificate attribute syntax.
Certificate Revocation List Values of type certificateRevocationList are encoded as if the values were of type authorityRevocationList.
Cross Certificate Pair Values of type crossCertificatePair are encoded according to the following BNF:
The syntactic component <certificate> has the same definition as in the BNF for the userCertificate attribute syntax.
Delivery Method Values of type deliveryMethod are encoded according to the following BNF:
Other Mailbox Values of the type otherMailboxSyntax are encoded according to the following BNF:
In the above, <mailbox type> represents the type of mail system in which the mailbox resides, for example "Internet" or "MCIMail"; and <mailbox> is the actual mailbox in the mail system defined by <mailbox type>. 2.33.
MHS OR Address Values of type MHS OR Address are encoded as strings, according to the format defined in [10].
Distribution List Submit Permission Values of type DLSubmitPermission are encoded as strings, according to the following BNF:
'X500' where <oraddress> is as defined in RFC 1327.
Photo Values of type Photo are encoded as if they were octet strings containing JPEG images in the JPEG File Interchange Format (JFIF), as described in [8].
Fax Values of type Fax are encoded as if they were octet strings containing Group 3 Fax images as defined in [7].
Security Considerations Security issues are not discussed in this memo.
The Directory: Selected Attribute Syntaxes.
The Directory: Selected Attribute Syntaxes.
[3] Barker, P., and S. Kille, "The COSINE and Internet X.500 Schema", RFC 1274, University College London, November 1991.
The ISO Development Environment: User's Manual   Volume 5: QUIPU.
Colin Robbins, Stephen E. Kille.
[5] Kille, S., "A String Representation of Distinguished Names", RFC 1779, ISODE Consortium, March 1995.
[6] Kille, S., "A String Representation for Presentation Addresses", RFC 1278, University College London, November 1991.
[7] Terminal Equipment and Protocols for Telematic Services Standardization of Group 3 facsimile apparatus for document transmission.
[8] JPEG File Interchange Format (Version 1.02).
Eric Hamilton, C  Cube Microsystems, Milpitas, CA, September 1, 1992.
[9] Yeong, W., Howes, T., and S. Kille, "Lightweight Directory Access Protocol", RFC 1777, Performance Systems International, University of Michigan, ISODE Consortium, March 1995.
[10] Alvestrand, H., Kille, S., Miles, R., Rose, M., and S.  Thompson, "Mapping between X.400 and RFC 822 Message Bodies", RFC 1495, SINTEF DELAB, ISODE Consortium, Soft Switch, Inc., Dover Beach Consulting, Inc., Soft Switch, Inc., August 1993.
