- contents:
  - "            Definitions of Protocol and Managed Objects for\n              TN3270E
    Response Time Collection Using SMIv2\n                            (TN3270E-RT-MIB)\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo defines the protocol and the Management Information Base\n
    \  (MIB) for performing response time data collection on TN3270 and\n   TN3270E
    sessions by a TN3270E server.  The response time data\n   collected by a TN3270E
    server is structured to support both\n   validation of service level agreements
    and performance monitoring of\n   TN3270 and TN3270E Sessions.  This MIB has as
    a prerequisite the\n   TN3270E-MIB, reference [20].\n   TN3270E, defined by RFC
    2355 [19], refers to the enhancements made to\n   the Telnet 3270 (TN3270) terminal
    emulation practices.  Refer to RFC\n   1041 [18], STD 8, RFC 854 [16], and STD
    31, RFC 860 [17] for a sample\n   of what is meant by TN3270 practices.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.0  Introduction  . . . . . . . . . . . . . . . . . .
    . . . . .  2\n   2.0  The SNMP Network Management Framework   . . . . . . . .
    . .  2\n   3.0  Response Time Collection Methodology  . . . . . . . . . . .  3\n
    \  3.1  General Response Time Collection  . . . . . . . . . . . . .  3\n   3.2
    \ TN3270E Server Response Time Collection   . . . . . . . . .  5\n   3.3  Correlating
    TN3270E Server and Host Response Times  . . . . 10\n   3.4  Timestamp Calculation
    \  . . . . . . . . . . . . . . . . . . 11\n     3.4.1  DR Usage  . . . . . . .
    . . . . . . . . . . . . . . . . 12\n     3.4.2  TIMING-MARK Usage   . . . . .
    . . . . . . . . . . . . . 13\n   3.5  Performance Data Modelling  . . . . . .
    . . . . . . . . . . 15\n     3.5.1  Averaging Response Times  . . . . . . . .
    . . . . . . . 15\n     3.5.2  Response Time Buckets   . . . . . . . . . . . .
    . . . . 18\n   4.0  Structure of the MIB  . . . . . . . . . . . . . . . . . .
    . 19\n   4.1  tn3270eRtCollCtlTable   . . . . . . . . . . . . . . . . . . 19\n
    \  4.2  tn3270eRtDataTable  . . . . . . . . . . . . . . . . . . . . 23\n   4.3
    \ Notifications   . . . . . . . . . . . . . . . . . . . . . . 24\n   4.4  Advisory
    Spin Lock Usage  . . . . . . . . . . . . . . . . . 26\n   5.0  Definitions   .
    . . . . . . . . . . . . . . . . . . . . . . 26\n   6.0  Security Considerations
    \  . . . . . . . . . . . . . . . . . 45\n   7.0  Intellectual Property   . . .
    . . . . . . . . . . . . . . . 45\n   8.0  Acknowledgments   . . . . . . . . .
    . . . . . . . . . . . . 46\n   9.0  References  . . . . . . . . . . . . . . .
    . . . . . . . . . 46\n   10.0  Authors' Addresses   . . . . . . . . . . . . .
    . . . . . . 48\n   11.0  Full Copyright Statement   . . . . . . . . . . . . .
    . . . 49\n"
  title: Table of Contents
- contents:
  - "1.0  Introduction\n   This document is a product of the TN3270E Working Group.
    \ It defines\n   a protocol and a MIB module to enable a TN3270E server to collect
    and\n   keep track of response time data for both TN3270 and TN3270E clients.\n
    \  Basis for implementing this MIB:\n   o   TN3270E-MIB, Base Definitions of Managed
    Objects for TN3270E\n       Using SMIv2 [20]\n   o   TN3270E RFCs\n   o   Telnet
    Timing Mark Option RFC [17].\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
    2119, reference\n   [23].\n"
  - contents:
    - "2.0  The SNMP Network Management Framework\n   The SNMP Management Framework
      presently consists of five major\n   components:\n   o   An overall architecture,
      described in RFC 2271 [1].\n   o   Mechanisms for describing and naming objects
      and events for the\n       purpose of management.  The first version of this
      Structure of\n       Management Information (SMI) is called SMIv1 and described
      in STD\n       16, RFC 1155 [2], STD 16, RFC 1212 [3] and RFC 1215 [4].  The\n
      \      second version, called SMIv2, is described in RFC 1902 [5], RFC\n       1903
      [6] and RFC 1904 [7].\n   o   Message protocols for transferring management
      information.  The\n       first version of the SNMP message protocol is called
      SNMPv1 and\n       described in STD 15, RFC 1157 [8].  A second version of the
      SNMP\n       message protocol, which is not an Internet standards track\n       protocol,
      is called SNMPv2c and described in RFC 1901 [9] and RFC\n       1906 [10].  The
      third version of the message protocol is called\n       SNMPv3 and described
      in RFC 1906 [10], RFC 2272 [11] and RFC 2274\n       [12].\n   o   Protocol
      operations for accessing management information.  The\n       first set of protocol
      operations and associated PDU formats is\n       described in STD 15, RFC 1157
      [8].  A second set of protocol\n       operations and associated PDU formats
      is described in RFC 1905\n       [13].\n   o   A set of fundamental applications
      described in RFC 2273 [14] and\n       the view-based access control mechanism
      described in RFC 2275\n       [15].\n   Managed objects are accessed via a virtual
      information store, termed\n   the Management Information Base or MIB.  Objects
      in the MIB are\n   defined using the mechanisms defined in the SMI.\n   This
      memo specifies a MIB module that is compliant to the SMIv2.  A\n   MIB conforming
      to the SMIv1 can be produced through the appropriate\n   translations.  The
      resulting translated MIB must be semantically\n   equivalent, except where objects
      or events are omitted because no\n   translation is possible (use of Counter64).
      \ Some machine readable\n   information in SMIv2 will be converted into textual
      descriptions in\n   SMIv1 during the translation process.  However, this loss
      of machine\n   readable information is not considered to change the semantics
      of the\n   MIB.\n"
    title: 2.0  The SNMP Network Management Framework
  - contents:
    - "3.0  Response Time Collection Methodology\n   This section explains the methodology
      and approach used by the MIB\n   defined by this memo for response time data
      collection by a TN3270E\n   server.\n"
    title: 3.0  Response Time Collection Methodology
  - contents:
    - "3.1  General Response Time Collection\n   Two primary methods exist for measuring
      response times in SNA\n   networks:\n   o   The Systems Network Architecture
      Management Services (SNA/MS)\n       Response Time Monitoring (RTM) function.\n
      \  o   Timestamping using definite response flows.\n   This memo defines an
      approach using definite responses to timestamp\n   the flows between a client
      and its TN3270E server, rather than by use\n   of the RTM method. Extensions
      to the SNA/MS RTM flow were considered,\n   but this approach was deemed unsuitable
      since not all TN3270E server\n   implementations have access to their underlying
      SNA stacks.  The RTM\n   concepts of keeping response time buckets for service
      level\n   agreements and of interval-based response time collection for\n   performance
      monitoring are preserved in the MIB module defined in\n   this memo.\n   As
      mentioned, this memo focuses on using definite responses to\n   timestamp the
      flows between a client and its TN3270E server for\n   generating performance
      data.  Use of a definite response flow\n   requires that the client supports
      TN3270E with the RESPONSES function\n   negotiated.  The TN3270 TIMING-MARK
      option can be used instead of\n   definite response for supporting TN3270 clients
      or TN3270E clients\n   that don't support RESPONSES.  This document focuses
      first on\n   defining the protocol and methods for generating performance data\n
      \  using definite responses, and then describes how the TIMING-MARK\n   option
      can be used instead of definite response.\n   In an SNA network, a transaction
      between a client Logical Unit (LU)\n   and a target host in general looks as
      follows:\n           ------------------------------------------------\n           |
      \                                             |\n           | Client LU                    Target
      SNA Host |\n           |                                              |\n           |
      \                              Timestamps     |\n           |              request
      \             A          |\n           | ----------------------------------------->
      \  |\n           |              reply(DR)            B      |   |\n           |
      <---------------------------------------<    |\n           | |            +/-RSP
      \              C          |\n           | >--------------------------------------->
      \   |\n           |                                              |\n           |
      DR:     Definite Response requested          |\n           | +/-RSP: Definite
      Response                    |\n           |                                              |\n
      \          ------------------------------------------------\n   This transaction
      is a simple one, and is being used only to\n   illustrate how timestamping at
      a target SNA host can be used to\n   generate response times.  An IBM redbook
      [12] provides a more\n   detailed description of response time collection for
      a transaction of\n   this type.  Note that for the purpose of calculating an
      approximation\n   for network transit time, it doesn't matter if the response
      is\n   positive or negative.  Two response time values are typically\n   calculated:\n
      \  o   Host Transit Time:    Timestamp B - Timestamp A\n   o   Network Transit
      Time: Timestamp C - Timestamp B\n   Network transit time is an approximation
      for the amount of time that\n   a transaction requires to flow across a network,
      since the response\n   flow is being substituted for the request flow at the
      start of the\n   transaction.  Network transit time, timestamp C - timestamp
      B, is the\n   amount of time that the definite response request and its response\n
      \  required.  Host time, timestamp B - timestamp A, is the actual time\n   that
      the host required to process the transaction.  Experience has\n   shown that
      using the response flow to approximate network transit\n   times is useful,
      and does correlate well with actual network transit\n   times.\n   A client
      SHOULD respond to a definite response request when it\n   completes processing
      the transaction.  This is important since it\n   increases the accuracy of a
      total response time.  Clients that\n   immediately respond to a definite response
      request will be attributed\n   with lower total response times then those that
      actually occurred.\n   The TN3270E-RT-MIB describes a method of collecting performance
      data\n   that is not appropriate for printer (LU Type 1 or LU Type 3)\n   sessions;
      thus collection of performance data for printer sessions is\n   excluded from
      this MIB.  This exclusion of printer sessions is not\n   considered a problem,
      since these sessions are not the most important\n   ones for response time monitoring,
      and since historically they were\n   excluded from SNA/MS RTM collection.  The
      tn3270eTcpConnResourceType\n   object in a tn3270eTcpConnEntry (in the TN3270E-MIB)
      can be examined\n   to determine if a client session is ineligible for response
      time data\n   collection for this reason.\n"
    title: 3.1  General Response Time Collection
  - contents:
    - "3.2  TN3270E Server Response Time Collection\n   A TN3270E server connects
      a Telnet client performing 3270 emulation\n   to a target SNA host over both
      a client-side network (client to\n   TN3270E server) and an SNA Network (TN3270E
      server to target SNA\n   host).  The client-side network is typically TCP/IP,
      but it need not\n   be.  For ease of exposition this document uses the term
      \"IP network\"\n   to refer to the client-side network, since IP is by far the
      most\n   common protocol for these networks.\n   A TN3270E server can use SNA
      definite responses and the TN3270\n   Enhancement (RFC 2355 [19]) RESPONSES
      function to calculate response\n   times for a transaction, by timestamping
      when a client request\n   arrives at the server, when the reply arrives from
      the target host,\n   and when the response acknowledging this reply arrives
      from the\n   client.\n   Section 3.4, Timestamp Calculation, provides specifics
      on when in the\n   sequence of flows between a TN3270E client and its target
      SNA host a\n   TN3270E server takes the required timestamps.  In addition, it\n
      \  provides information on how a TN3270 TIMING-MARK request/response\n   flow
      can be used instead of DR for approximating IP network transit\n   times.\n
      \  The following figure adds a TN3270E server between the client, in\n   this
      case a TN3270E client and the target SNA host:\n           ------------------------------------------------\n
      \          |                                              |\n           | Client
      \           TN3270E           Target   |\n           |                    Server
      \         SNA Host  |\n           |                   Timestamps                 |\n
      \          |                                              |\n           | <---IP
      Network-------><---SNA Network--->    |\n           |                                              |\n
      \          |      request         D                       |\n           | ------------------------------------------>
      \ |\n           |      reply(DR)       E                    |  |\n           |
      <----------------------------------------<   |\n           | |    +/-RSP          F
      \                      |\n           |  >-------------------- - - - - - - -
      - - >   |\n           |                                              |\n           ------------------------------------------------\n
      \  A TN3270E server can save timestamp D when it receives a client\n   request,
      save timestamp E when the target SNA host replies, and save\n   timestamp F
      when the client responds to the definite response request\n   that flowed with
      the reply.  It doesn't matter whether the target SNA\n   host requested a definite
      response on its reply:  if it didn't, the\n   TN3270E server makes the request
      on its own, to enable it to produce\n   timestamp F.  In this case the TN3270E
      server does not forward the\n   response to the target SNA host, as the dotted
      line in the figure\n   indicates.\n   Because it is a special case, a transaction
      in which a target SNA\n   host returns an UNBIND in response to a client's request,
      and the\n   TN3270E server forwards the UNBIND to the client, is not included
      in\n   any response time calculations.\n   In order to generate timestamp F,
      a TN3270E server MUST insure that\n   the transaction specifies DR, and that
      the TN3270E RESPONSES function\n   has been negotiated between itself and the
      client.  Negotiation of\n   the TN3270E RESPONSES function occurs during the
      client's TN3270E\n   session initialization.  The TN3270E servers that the authors
      are\n   aware of do request the RESPONSES function during client session\n   initialization.
      \ TN3270E clients either automatically support the\n   RESPONSES function, or
      can be configured during startup to support\n   it.\n   Using timestamps D,
      E, and F the following response times can be\n   calculated by a TN3270E server:\n
      \  o   Total Response time:     Timestamp F - Timestamp D\n   o   IP Network
      Transit Time: Timestamp F - Timestamp E\n   Just as in the SNA case presented
      above, these response times are\n   also approximations, since the final +/-
      RSP from the client is being\n   substituted for the request from the client
      that began the\n   transaction.\n   The MIB provides an object, tn3270eRtCollCtlType,
      to control several\n   aspects of response time data collection.  One of the
      available\n   options in setting up a response time collection policy is to\n
      \  eliminate the IP-network component altogether.  This might be done\n   because
      it is determined either that the additional IP network\n   traffic would not
      be desirable, or that the IP-network component of\n   the overall response times
      is not significant.\n   Excluding the IP-network component from response times
      also has an\n   implication for the way in which response time data is aggregated.
      \ A\n   TN3270E server may find that some of its clients simply don't support\n
      \  any of the functions necessary for the server to calculate the IP-\n   network
      component of response times.  For these clients, the most\n   that the server
      can calculate is the SNA-network component of their\n   overall response times;
      the server records this SNA-network component\n   as the TOTAL response time
      each of these clients' transactions.  If a\n   response time collection is aggregating
      data from a number of\n   clients, some of which have the support necessary
      for including the\n   IP-network component in their total response time calculations,
      and\n   some of which do not, then the server aggregates the data differently\n
      \  depending on whether the collection has been defined to include or\n   exclude
      the IP-network component:\n   o  If the IP-network component is included, then
      transactions for the\n      clients that don't support calculation of the IP-network
      component\n      of their response times are excluded from the aggregation\n
      \     altogether.\n   o  If the IP-network component is excluded, then total
      response times\n      for ALL clients include only the SNA-network component,
      even\n      though the server could have included an IP-network component in\n
      \     the overall response times for some of these clients.  The server\n      does
      this by setting timestamp F, which marks the end of a\n      transaction's total
      response time, equal to timestamp E, the end\n      of the transaction's SNA-network
      component.\n   The principle here is that all the transactions contributing
      their\n   response times to an aggregated value MUST make the same\n   contribution.
      \ If the aggregation specifies that an IP-network\n   component MUST be included
      in the aggregation's response times, then\n   transactions for which an IP-network
      component cannot be calculated\n   aren't included at all.  If the aggregation
      specifies that an IP-\n   network component is not to be included, then only
      the SNA-network\n   component is used, even for those transactions for which
      an IP-\n   network component could have been calculated.\n   There is one more
      complication here:  the MIB allows a management\n   application to enable or
      disable dynamic definite responses for a\n   response time collection.  Once
      again the purpose of this option is\n   to give the network operator control
      over the amount of traffic\n   introduced into the IP network for response time
      data collection.  A\n   DYNAMIC definite response is one that the TN3270E server
      itself adds\n   to a reply, in a transaction for which the SNA application at
      the\n   target SNA host did not specify DR in its reply.  When the +/-RSP\n
      \  comes back from the client, the server uses this response to\n   calculate
      timestamp F, but then it does not forward the response on\n   to the SNA application
      (since the application is not expecting a\n   response to its reply).\n   The
      dynamic definite responses option is related to the option of\n   including
      or excluding the IP-network component of response times\n   (discussed above)
      as follows:\n   o  If the IP-network component is excluded, then there is no
      reason\n      for enabling dynamic definite responses: the server always sets\n
      \     timestamp F equal to timestamp E, so the additional IP-network\n      traffic
      elicited by a dynamic definite response would serve no\n      purpose.\n   o
      \ If the IP-network component is included, then enabling dynamic\n      definite
      responses causes MORE transactions to be included in the\n      aggregated response
      time values:\n      -  For clients that do not support sending of responses,
      timestamp\n         F can never be calculated, and so their transactions are
      never\n         included in the aggregate.\n      -  For clients that support
      sending of responses, timestamp F will\n         always be calculated for transactions
      in which the host SNA\n         application specifies DR in its reply, and so
      these\n         transactions will always be included in the aggregate.\n      -
      \ For clients that support sending of responses, having dynamic\n         definite
      responses enabled for a collection results in the\n         inclusion of additional
      transactions in the aggregate:\n         specifically, those for which the host
      SNA application did not\n         specify DR in its reply.\n   A TN3270E server
      also has the option of substituting TIMING-MARK\n   processing for definite
      responses in calculating the IP-network\n   component of a transaction's response
      time.  Once again, there is no\n   reason for the server to do this if the collection
      has been set up to\n   exclude the IP-network component altogether in computing
      response\n   times.\n   The MIB is structured to keep counts and averages for
      total response\n   times (F - D) and their IP-network components (F - E).  A
      management\n   application can obviously calculate from these two values an
      average\n   SNA-network component (E - D) for the response times.  This SNA-\n
      \  network component includes the SNA node processing time at both the\n   TN3270E
      server and at the target application.\n   A host TN3270E server refers to an
      implementation where the TN3270E\n   server is collocated with the Systems Network
      Architecture (SNA)\n   System Services Control Point (SSCP) for the dependent
      Secondary\n   Logical Units (SLUs) that the server makes available to its clients\n
      \  for connecting into an SNA network.  A gateway TN3270E server resides\n   on
      an SNA node other than an SSCP, either an SNA type 2.0 node, a\n   boundary-function-attached
      type 2.1 node, or an APPN node acting in\n   the role of a Dependent LU Requester
      (DLUR).  Host and gateway\n   TN3270E server implementations typically differ
      greatly as to their\n   internal implementation and System Definition (SYSDEF)
      requirements.\n   If a host TN3270E server is in the same SNA host as the target\n
      \  application, then the SNA-network component of a transaction's\n   response
      time will approximately equal the host transit time (B - A)\n   described previously.
      \ A host TN3270E server implementation can,\n   however, typically support the
      establishment of sessions to target\n   applications in SNA hosts remote from
      itself.  In this case the SNA-\n   network component of the response time equals
      the actual SNA-network\n   transit time plus two host transit times.\n"
    title: 3.2  TN3270E Server Response Time Collection
  - contents:
    - "3.3  Correlating TN3270E Server and Host Response Times\n   It is possible
      that response time data is collected from TN3270E\n   servers at the same time
      as a management application is monitoring\n   the SNA sessions at a host.  For
      example, a management application\n   can be monitoring a secondary logical
      unit (SLU) while retrieving\n   data from a TN3270E server.  Consider the following
      figure:\n           ------------------------------------------------\n           |
      \                                             |\n           | Client            TN3270E
      \           Target  |\n           |                    Server           SNA
      Host |\n           |                   Timestamps         (PLU)   |\n           |
      \                   (SLU)           Timestamps|\n           | <---IP Network-------><---SNA
      Network--->    |\n           |                                              |\n
      \          |      request         D                 A     |\n           | ------------------------------------------>
      \ |\n           |      reply(DR)       E                 B  |  |\n           |
      <----------------------------------------<   |\n           | |    +/-RSP          F
      \                C     |\n           |  >-------------------------------------->
      \   |\n           |                                              |\n           ------------------------------------------------\n
      \  The following response times are available:\n   o   Target SNA host transit
      time:         Timestamp B - Timestamp A\n   o   Target SNA host network transit
      time: Timestamp C - Timestamp B\n   o   TN3270E server total response time:
      \  Timestamp F - Timestamp D\n   o   TN3270E server IP-network component:  Timestamp
      F - Timestamp E\n   The value added by the TN3270E server in this situation
      is its\n   approximation of the IP-network component of the overall response\n
      \  time.  The IP-network component can be subtracted from the total\n   network
      transit time (which can be captured at an SSCP monitoring SNA\n   traffic from/to
      the SLU) to see the actual SNA versus IP network\n   transit times.\n   The
      MIB defined by this memo does not specifically address\n   correlation of the
      data it contains with response time data collected\n   by direct monitoring
      of SNA resources:  its focus is exclusively\n   response time data collection
      from a TN3270E server perspective.  It\n   has, however, in conjunction with
      the TN3270E-MIB [10], been\n   structured to provide the information necessary
      for correlation\n   between TN3270E server-provided response time information
      and that\n   gathered from directly monitoring SNA resources.\n   A management
      application attempting to correlate SNA resource usage\n   to Telnet clients
      can monitor either the tn3270eResMapTable or the\n   tn3270eTcpConnTable to
      determine resource-to-client address mappings.\n   Both of these tables are
      defined by the TN3270E-MIB [10].  Another\n   helpful table is the tn3270eSnaMapTable,
      which provides a mapping\n   between SLU names as they are known at the SSCP
      (VTAM) and their\n   local names at the TN3270E server.  Neither the\n   tn3270eClientGroupTable,
      the tn3270eResPoolTable, nor the\n   tn3270eClientResMapTable from the TN3270E-MIB
      can be used for\n   correlation, since the mappings defined by these tables
      can overlap,\n   and may not provide one-to-one mappings.\n"
    title: 3.3  Correlating TN3270E Server and Host Response Times
  - contents:
    - "3.4  Timestamp Calculation\n   This section goes into more detail concerning
      when the various\n   timestamps can be taken as the flows between a TN3270E
      client and its\n   target SNA host pass through a TN3270E server.  In addition,\n
      \  information is provided on how the TN3270 TIMING-MARK\n   request/response
      flow can be used in place of DR for approximating IP\n   network transit times.\n"
    - contents:
      - "3.4.1  DR Usage\n   Consider the following flow:\n        ----------------------------------------------------------\n
        \       |                                                        |\n        |
        Client            TN3270E            Target SNA        |\n        |                    Server
        \             Host            |\n        |                   Timestamps                           |\n
        \       |                                                        |\n        |
        <---IP Network-------><---SNA Network--->              |\n        |                                                        |\n
        \       |      request         D    (BB,CD,OIC,ER)               |\n        |
        ------------------------------------------->           |\n        |      reply(DR)
        \           (FIC,ER,EB)      |           |\n        | <-----------------------------------------<
        \           |\n        |      reply                (MIC,ER)                     |\n
        \       | <-----------------------------------------<            |\n        |
        \     reply                (MIC,ER)                     |\n        | <-----------------------------------------<
        \           |\n        |      reply           E    (LIC,DR)                     |\n
        \       | <-----------------------------------------<            |\n        |
        |    +/-RSP          F                                 |\n        |  >---------------------------------------->
        \           |\n        |                                                        |\n
        \       | BB : Begin Bracket    ER : Response by exception       |\n        |
        EB : End Bracket      DR : Definite Response Requested |\n        | CD : Change
        Direction FIC : First in chain             |\n        | OIC: Only in chain
        \   MIC: Middle in chain             |\n        | LIC: Last in chain                                     |\n
        \       ----------------------------------------------------------\n   Timestamp
        D is taken at the TN3270E server when the server has\n   received data from
        a client for forwarding to its target SNA host,\n   and the direction of the
        SNA session allows the server to forward the\n   data immediately (either
        the direction is inbound towards the SNA\n   host, or the session is between
        brackets).  This is most likely when\n   the server finds the end of record
        indicator in the TCP data received\n   from the client.\n   The target SNA
        application returns its reply in one or more SNA\n   Request Units (RUs);
        in this example there are four RUs in the reply.\n   The first RU is marked
        as first in chain (FIC), the next two are\n   marked as middle in chain (MIC),
        and the last is marked as last in\n   chain (LIC).  If the SNA host sends
        a multiple-RU chain, the server\n   does not know until the last RU is received
        whether DR is being\n   requested.  The server's only chance to request DR
        from the client,\n   however, comes when it forwards the FIC RU, since this
        is the only\n   time that the TN3270E header is included.  Since a server
        may forward\n   the FIC RU to the client before it receives the LIC RU from
        the SNA\n   host, some servers routinely specify DR on all FIC RUs.\n   If
        the server has specified DR on the TN3270E request for the FIC RU\n   in a
        chain, it takes timestamp E when it forwards the LIC RU to the\n   client.
        \ Since timestamp E is used for calculating the IP-network\n   time for the
        transaction, the server SHOULD take timestamp E as close\n   as possible to
        its \"Telnet edge\".  The server takes timestamp F when\n   it receives the
        RESPONSES response from the client.\n   A target SNA application doesn't necessarily
        return data to a client\n   in a transaction; it may, for example, require
        more data from the\n   client before it can formulate a reply.  In this case
        the application\n   may simply return to the TN3270E server a change of direction\n
        \  indicator.  At this point the server must send something to the\n   client
        (typically a Write operation with a WCC) to unlock the\n   keyboard.  If the
        server specifies DR on the request to the client\n   triggered by its receipt
        of the change of direction indicator from\n   the SNA application, then timestamps
        E and F can be taken, and the\n   usual response times can be calculated.
        \ When the client sends in the\n   additional data and gets a textual response
        from the SNA application,\n   the server treats this as a separate transaction
        from the one\n   involving the change of direction.\n"
      title: 3.4.1  DR Usage
    - contents:
      - "3.4.2  TIMING-MARK Usage\n   It is possible for a TN3270E server to use the
        TIMING-MARK flow for\n   approximating IP network transit times.  Using TIMING-MARKs
        would\n   make it possible for a server to collect performance data for TN3270\n
        \  clients, as well as for TN3270E clients that do not support the\n   RESPONSES
        function.  In order for TIMING-MARKs to be used in this\n   way, a client
        can't have the NOP option enabled, since responses are\n   needed to the server's
        TIMING-MARK requests.  An IP network transit\n   time approximation using
        a TIMING-MARK is basically the amount of\n   time it takes for a TN3270 server
        to receive from a client a response\n   to a TIMING-MARK request.\n   To get
        an estimate for IP network transit time, a TN3270E server\n   sends a TIMING-MARK
        request to a client after a LIC RU has been\n   received, as a means of approximating
        IP network transit time:\n        ---------------------------------------------------\n
        \       |                                                 |\n        | Client
        \           TN3270E             Target    |\n        |                    Server
        \             Host     |\n        |                   Timestamps                    |\n
        \       |                                                 |\n        | <---IP
        Network-------><---SNA Network--->       |\n        |                                                 |\n
        \       |      request         D    (BB,CD,OIC,ER)        |\n        | ------------------------------------------->
        \   |\n        |      reply                (FIC,ER,EB)      |    |\n        |
        <-----------------------------------------<     |\n        |      reply                (MIC,ER)
        \             |\n        | <-----------------------------------------<     |\n
        \       |      reply                (MIC,ER)              |\n        | <-----------------------------------------<
        \    |\n        |      reply           E    (LIC,ER)              |\n        |
        <-----------------------------------------<     |\n        |     TIMING-MARK
        Rqst E'                         |\n        | <---------------------                          |\n
        \       | |    TIMING-MARK Rsp F'                         |\n        |  >------------------->
        \                         |\n        |                                                 |\n
        \       ---------------------------------------------------\n   The response
        times can then be calculated as follows:\n   o   TN3270E server total response
        time:\n       (Timestamp E - Timestamp D) + (Timestamp F' - Timestamp E')\n
        \  o   TN3270E server IP network time:  Timestamp F' - Timestamp E'\n   If
        a TN3270E server is performing the TIMING-MARK function\n   (independent of
        the response time monitoring use of the function\n   discussed here), then
        it most likely has a TIMING-MARK interval for\n   determining when to examine
        client sessions for sending the TIMING-\n   MARK request.  This interval,
        which is ordinarily a global value for\n   an entire TN3270E server, is represented
        in the TN3270E-MIB by the\n   tn3270eSrvrConfTmNopInterval object.  A TIMING-MARK
        request is sent\n   only if, when it is examined, a client session is found
        to have had\n   no activity for a different fixed length of time, represented
        in the\n   TN3270E-MIB by the tn3270eSrvrConfTmNopInactTime object.\n   Servers
        that support a large number of client sessions should spread\n   out the TIMING-MARK
        requests they send to these clients over the\n   activity interval, rather
        than sending them all in a single burst,\n   since otherwise the network may
        be flooded with TIMING-MARK requests.\n   When a server uses TIMING-MARKs
        for approximating response times,\n   this tends to introduce a natural spreading
        into its TIMING-MARK\n   requests, since the requests are triggered by the
        arrival of traffic\n   from an SNA host.\n   A TN3270E server MUST integrate
        its normal TIMING-MARK processing\n   with its use of TIMING-MARKs for computing
        response times.  In\n   particular, it MUST NOT send a second TIMING-MARK
        request to a client\n   while waiting for the first to return, since this
        is ruled out by the\n   TIMING-MARK protocol itself.  If a TIMING-MARK flow
        has just been\n   performed for a client shortly before the LIC RU arrives,
        the server\n   MAY use the interval from this flow as its approximation for
        IP\n   network transit time, (in other words, as its (F' - E') value) when\n
        \  calculating its approximation for the transaction's total response\n   time,
        rather than sending a second TIMING-MARK request so soon after\n   the preceding
        one.\n   Regardless of when the server sends its TIMING-MARK request, the\n
        \  accuracy of its total response time calculation depends on exactly\n   when
        the client responds to the TIMING-MARK request.\n"
      title: 3.4.2  TIMING-MARK Usage
    title: 3.4  Timestamp Calculation
  - contents:
    - "3.5  Performance Data Modelling\n   The following two subsections detail how
      the TN3270E-RT-MIB models\n   and controls capture of two types of response
      time data:  average\n   response times and response time buckets.\n"
    - contents:
      - "3.5.1  Averaging Response Times\n   Average response times play two different
        roles in the MIB:\n   o   They are made available for management applications
        to retrieve.\n   o   They serve as triggers for emitting notifications.\n
        \  Sliding-window averages are used rather than straight interval-based\n
        \  averages, because they are often more meaningful, and because they\n   cause
        less notification thrashing.  Sliding-window average\n   calculation can,
        if necessary, be disabled, by setting the sample\n   period multiplier, tn3270eRtCollCtlSPMult,
        to 1, and setting the\n   sample period, tn3270eRtCollCtlSPeriod, to the required
        collection\n   interval.\n   In order to calculate sliding-window averages,
        a TN3270E server MUST:\n   o   Select a fixed, relatively short, sample period
        SPeriod; the\n       default value for SPeriod in the MIB is 20 seconds.\n
        \  o   Select an averaging period multiplier SPMult.  The actual\n       collection
        interval will then be SPMult times SPeriod.  The\n       default value for
        SPMult in the MIB is 30, yielding a default\n       collection interval of
        10 minutes.  Note that the collection\n       interval (SPMult*SPeriod) is
        always a multiple of the sample\n       period.\n       Clearlly, SPMult*SPeriod
        should not be thought of as literally\n       the averaging period.  The average
        calculated will include\n       contributions older than that time, and does
        not weight equally\n       all contributions since that time.  In fact, it
        gives a smoother\n       result than a traditional sliding average, as used
        in finance.\n       More subtly, it is best to think of the effective averaging\n
        \      period as being 2*SPMult*SPeriod.  To see this, consider how long\n
        \      the contribution to the result made by a particular transaction\n       lasts.
        \ With a traditional sliding average, it lasts exactly the\n       averaging
        period.  With the aging mechanism described here, it\n       has a half-life
        of SPMult*SPeriod.\n   o   Maintain the following counters to keep track of
        activity within\n       the current sample period; these are internal counters,
        not made\n       visible to a management application via the MIB.\n       -
        \  T (number of transactions in the period)\n       -   TotalRts (sum of the
        total response times for all\n           transactions in the period)\n       -
        \  TotalIpRts (sum of the IP network transit times for all\n           transactions
        in the period; note that if IP network transit\n           times are being
        excluded from the response time collection,\n           this value will always
        be 0).\n   o   Also maintain sliding counters, initialized to zero, for each
        of\n       the quantities being counted:\n       -   AvgCountTrans (sliding
        count of transactions)\n       -   TotalRtsSliding (sliding count of total
        response times)\n       -   TotalIpRtsSliding (sliding count of IP network
        transit times)\n   o   At the end of each sample period, update the sliding
        interval\n       counters, using the following floating-point calculations:\n
        \            AvgCountTrans = AvgCountTrans + T\n                  - (AvgCountTrans
        / SPMult)\n             TotalRtsSliding = TotalRtsSliding + TotalRts\n                  -
        (TotalRtsSliding / SPMult)\n             TotalIpRtsSliding = TotalIpRtsSliding
        + TotalIpRts\n                  - (TotalIpRtsSliding / SPMult)\n       Then
        reset T, TotalRts, and TotalIpRts to zero for use during the\n       next
        sample period.\n   o   At the end of a collection interval, update the following
        MIB\n       objects as indicated; the floating-point numbers are rounded\n
        \      rather than truncated.\n        tn3270eRtDataAvgCountTrans = AvgCountTrans\n
        \       tn3270eRtDataAvgRt = TotalRtsSliding / AvgCountTrans\n        tn3270eRtDataAvgIpRt
        = TotalIpRtsSliding / AvgCountTrans\n       As expected, if IP network transit
        times are being excluded from\n       response time collection, then tn3270eRtDataAvgIpRt
        will always\n       return 0.\n   The sliding transaction counter AvgCountTrans
        is not used for\n   updating the MIB object tn3270eRtDataCountTrans:  this
        object is an\n   ordinary SMI Counter32, which maintains a total count of
        transactions\n   since its last discontinuity event.  The sliding counters
        are used\n   only for calculating averages.\n   Two mechanisms are present
        in the MIB to inhibit the generation of an\n   excessive number of notifications
        related to average response times.\n   First, there are high and low thresholds
        for average response times.\n   A tn3270eRtExceeded notification is generated
        the first time a\n   statistically significant average response time is found
        to have\n   exceeded the high threshold.  (The test for statistical significance\n
        \  is described below.)  After this, no other tn3270eRtExceeded\n   notifications
        are generated until an average response time is found\n   to have fallen below
        the low threshold.\n   The other mechanism to limit notifications is the significance
        test\n   for a high average response time.  Intuitively, the significance
        of\n   an average is directly related to the number of samples that go into\n
        \  it; so we might be inclined to use a rule such as \"for the purpose of\n
        \  generating tn3270eRtExceeded notifications, ignore average response\n   times
        based on fewer than 20 transactions in the sample period.\"\n   In the case
        of response times, however, the number of transactions\n   sampled in a fixed
        sampling period is tied to these transactions'\n   response times.  A few
        transactions with long response times can\n   guarantee that there will not
        be many transactions in a sample,\n   because these transactions \"use up\"
        the sampling time.  Yet this case\n   of a few transactions with very poor
        response times should obviously\n   be classified as a problem, not as a statistical
        anomaly based on too\n   small a sample.\n   The solution is to make the significance
        level for a sample a\n   function of the average response time.  A value IdleCount
        is\n   specified, which is used to qualify an sample as statistically\n   significant.
        \ In order to determine at a collection interval whether\n   to generate a
        tn3270eRtExceeded notification, a TN3270E server uses\n   the following algorithm:\n
        \     if AvgCountTrans * ((AvgRt/ThreshHigh - 1) ** 2) >=  IdleCount\n      then
        generate the notification,\n   where AvgRt is the value that would be returned
        by the object\n   tn3270eRtDataAvgRt at the end of the interval, and the \"**\"
        notation\n   indicates exponientiation.\n   Two examples illustrate how this
        algorithm works.  Suppose that\n   IdleCount has been set to 20 transactions,
        and the high threshold to\n   200 msecs per transaction.  If the average observed
        response time is\n   300 msecs, then a notification will be generated only
        if\n   AvgCountTrans >= 80.  If, however, the observed response time is 500\n
        \  msecs, then a notification is generated if AvgCountTrans >= 9.\n   There
        is no corresponding significance test for the tn3270eRtOkay\n   notification:
        \ this notification is generated based on an average\n   response time that
        falls below the low threshold, regardless of the\n   sample size behind that
        average.\n"
      title: 3.5.1  Averaging Response Times
    - contents:
      - "3.5.2  Response Time Buckets\n   The MIB also supports collection of response
        time data into a set of\n   five buckets. This data is suitable either for
        verification of\n   service level agreements, or for monitoring by a management\n
        \  application to identify performance problems.  The buckets provide\n   counts
        of transactions whose total response times fall into a set of\n   specified
        ranges.\n   Like everything for a collection, the \"total\" response times\n
        \  collected in the buckets are governed by the specification of whether\n
        \  IP network transit times are to be included in the totals.  Depending\n
        \  on how this option is specified, the response times being counted in\n
        \  the buckets will either be total response times (F - D), or only SNA\n
        \  network transit times (effectively E - D, because when it is\n   excluding
        the IP-network component of transactions, a server makes\n   timestamp F identical
        to timestamp E).\n   Four bucket boundaries are specified for a response time
        collection,\n   resulting in five buckets.  The first response time bucket
        counts\n   those transactions whose total response times were less than or
        equal\n   to Boundary 1, the second bucket counts those whose response times\n
        \  were greater than Boundary 1 but less than or equal to Boundary 2,\n   and
        so on.  The fifth bucket is unbounded on the top, counting all\n   transactions
        whose response times were greater than Boundary 4.\n   The four bucket boundaries
        have default values of:  1 second, 2\n   seconds, 5 seconds, and 10 seconds,
        respectively.  These values are\n   the defaults in the 3174 controller's
        implementation of the SNA/MS\n   RTM function, and are thought to be appropriate
        for this MIB as well.\n   In SNA/MS the counter buckets were (by today's standards)
        relatively\n   small, with a maximum value of 65,535.  The bucket objects
        in the MIB\n   are all Counter32's.\n   The following figure represents the
        buckets pictorially:\n            ----------------------------------------------\n
        \           |                                            |\n            |
        \         Response Time Boundaries          |\n            | |       |       |
        \      |       |       |  |\n            | |       |       |       |       |
        \      |  |\n            | |       |       |       |       |      no  |\n
        \           | 0      B-1     B-2     B-3     B-4    bound|\n            |
        |       |       |       |       |       |  |\n            | |Bucket1|Bucket2|Bucket3|Bucket4|Bucket5|
        \ |\n            | -----------------------------------------  |\n            |
        \                                           |\n            ----------------------------------------------\n"
      title: 3.5.2  Response Time Buckets
    title: 3.5  Performance Data Modelling
  - contents:
    - "4.0  Structure of the MIB\n   The TN3270E-RT-MIB has the following components:\n
      \  o   tn3270eRtCollCtlTable\n   o   tn3270eRtDataTable\n   o   Notifications\n
      \  o   Advisory Spin Lock Usage\n"
    title: 4.0  Structure of the MIB
  - contents:
    - "4.1  tn3270eRtCollCtlTable\n   The tn3270eRtCollCtlTable is indexed by tn3270eSrvrConfIndex
      and\n   tn3270eClientGroupName imported from the TN3270E-MIB.\n   tn3270eSrvrConfIndex
      identifies within a host a particular TN3270E\n   server.  tn3270eClientGroupName
      identifies a collection of IP clients\n   for which response time data is to
      be collected.  The set of clients\n   is defined using the tn3270eClientGroupTable
      from the TN3270E-MIB.\n   A tn3270eRtCollCtlEntry contains the following objects:\n
      \               --------------------------------------------------\n      1st
      Index | tn3270eSrvrConfIndex             Unsigned32    |\n      2nd Index |
      tn3270eClientGroupName           Utf8String    |\n                | tn3270eRtCollCtlType
      \            BITS          |\n                | tn3270eRtCollCtlSPeriod          Unsigned32
      \   |\n                | tn3270eRtCollCtlSPMult           Unsigned32    |\n
      \               | tn3270eRtCollCtlThreshHigh       Unsigned32    |\n                |
      tn3270eRtCollCtlThreshLow        Unsigned32    |\n                | tn3270eRtCollCtlIdleCount
      \       Unsigned32    |\n                | tn3270eRtCollCtlBucketBndry1     Unsigned32
      \   |\n                | tn3270eRtCollCtlBucketBndry2     Unsigned32    |\n
      \               | tn3270eRtCollCtlBucketBndry3     Unsigned32    |\n                |
      tn3270eRtCollCtlBucketBndry4     Unsigned32    |\n                | tn3270eRtCollCtlRowStatus
      \       RowStatus     |\n                --------------------------------------------------\n
      \  The tn3270eRtCollCtlType object controls the type(s) of response time\n   collection
      that occur, the granularity of the collection, whether\n   dynamic definite
      responses SHOULD be initiated, and whether\n   notifications SHOULD be generated.
      \ This object is of BITS SYNTAX,\n   and thus allows selection of multiple options.\n
      \  The BITS in the tn3270eRtCollCtlType object have the following\n   meanings:\n
      \  o   aggregate(0) - If this bit is set to 1, then data SHOULD be\n       aggregated
      for the whole client group.  In this case there will\n       be only one row
      created for the collection in the\n       tn3270eRtDataTable.  The first two
      indexes for this row,\n       tn3270eSrvrConfIndex and tn3270eClientGroupName,
      will have the\n       same values as the indexes for the corresponding\n       tn3270eRtCollCtlEntry.
      \ The third and fourth indexes of an\n       aggregated tn3270eRtDataEntry have
      the values unknown(0)\n       (tn3270eRtDataClientAddrType) and a zero-length
      octet string\n       (tn3270eRtDataClientAddress).  The fifth index,\n       tn3270eRtDataClientPort,
      has the value 0.\n       If this bit is set to 0, then a separate entry is created
      in the\n       tn3270eRtDataTable from each member of the client group.  In
      this\n       case tn3270eRtDataClientAddress contains the client's actual IP\n
      \      Address, tn3270eRtDataClientAddrType indicates the address type,\n       and
      tn3270eRtDataClientPort contains the number of the port the\n       client is
      using for its TN3270/TN3270E session.\n   o   excludeIpComponent(1) - If this
      bit is set to 1, then the server\n       SHOULD exclude the IP-network component
      from all the response\n       times for this collection.  If the target SNA
      application\n       specifies DR in any of its replies, this DR will still be
      passed\n       down to the client, and the client's response will still be\n
      \      forwarded to the application.  But this response will play no\n       role
      in the server's response time calculations.\n       If this bit is set to 0,
      then the server includes in the\n       collection only those transactions for
      which it can include an\n       (approximate) IP-network component in the total
      response time for\n       the transaction.  This component MAY be derived from
      a \"natural\"\n       DR (if the client supports the RESPONSES function), from
      a\n       dynamic DR introduced by the server (if the client supports the\n
      \      RESPONSES function and the ddr(2) bit has been set to 1), or from\n       TIMING-MARK
      processing (if the client supports TIMING-MARKs).\n       If this bit is set
      to 1, then the ddr(2) bit is ignored, since\n       there is no reason for the
      server to request additional responses\n       from the client(s) in the group.\n
      \  o   ddr(2) - If this bit is set to 1, then the server SHOULD, for\n       those
      clients in the group that support the RESPONSES function,\n       add a DR request
      to the FIC reply in each transaction, and use\n       the client's subsequent
      response for calculating an (approximate)\n       IP-network component to include
      in the transaction's total\n       response times.\n       If this bit is set
      to 0, then the server does not add a DR\n       request that it was not otherwise
      going to add to any replies\n       from the target SNA application.\n       If
      the excludeIpComponent(1) bit is set to 1, then this bit is\n       ignored
      by the server.\n   o   average(3) - If this bit is set to 1, then the server
      SHOULD\n       calculate a sliding-window average for the collection, based
      on\n       the parameters specified for the group.\n       If this bit is set
      to 0, then an average is not calculated.  In\n       this case the tn3270eRtExceeded
      and tn3270eRtOkay notifications\n       are not generated, even if the traps(5)
      bit is set to 1.\n   o   buckets(4) - If this bit is set to 1, then the server
      SHOULD\n       create and increment response time buckets for the collection,\n
      \      based on the parameters specified for the group.\n       If this bit
      is set to 0, then response time buckets are not\n       created.\n   o   traps(5)
      - If this bit is set to 1, then a TN3270E Server is\n       enabled to generate
      notifications pertaining to an\n       tn3270eCollCtlEntry.  tn3270CollStart
      and tn3270CollEnd\n       generation is enabled simply by traps(5) being set
      to 1.\n       tn3270eRtExceeded and tn3270eRtOkay generation enablement\n       requires
      that average(3) be set to 1 in addition to the traps(5)\n       requirement.\n
      \      If traps(5) is set to 0, then none of the notifications defined\n       in
      this MIB are generated for a particular tn3270eRtCollCtlEntry.\n   Either the
      average(3) or the buckets(4) bit MUST be set to 1 in order\n   for response
      time data collection to occur; both bits MAY be set to\n   1.  If the average(3)
      bit is set to 1, then the following objects\n   have meaning, and are used to
      control the calculation of the\n   averages, as well as the generation of the
      two notifications related\n   to them:\n   o   tn3270eRtCollCtlSPeriod\n   o
      \  tn3270eRtCollCtlSPMult\n   o   tn3270eRtCollCtlThreshHigh\n   o   tn3270eRtCollCtlThreshLow\n
      \  o   tn3270eRtCollCtlIdleCount\n   The previous objects' values are meaningless
      if the associated\n   average(3) bit is not set to 1.\n   If the buckets(4)
      bit is set to 1, then the following objects have\n   meaning, and specify the
      bucket boundaries:\n   o   tn3270eRtCollCtlBucketBndry1\n   o   tn3270eRtCollCtlBucketBndry2\n
      \  o   tn3270eRtCollCtlBucketBndry3\n   o   tn3270eRtCollCtlBucketBndry4\n   The
      previous objects' values are meaningless if the associated\n   buckets(4) bit
      is not set to 1.\n   If an entry in the tn3270RtCollCtlTable has the value active(1)
      for\n   its RowStatus, then an implementation SHALL NOT allow Set operations\n
      \  for any objects in the entry except:\n   o   tn3270eRtCollCtlThreshHigh\n
      \  o   tn3270eRtCollCtlThreshLow\n   o   tn3270eRtCollCtlRowStatus\n"
    title: 4.1  tn3270eRtCollCtlTable
  - contents:
    - "4.2  tn3270eRtDataTable\n   Either a single entry or multiple entries are created
      in the\n   tn3270eRtDataTable for each tn3270eRtCollCtlEntry, depending on\n
      \  whether tn3270eRtCollCtlType in the control entry has aggregate(0)\n   selected.
      \ The contents of an entry in the tn3270eRtDataTable depend\n   on the contents
      of the corresponding entry in the\n   tn3270eRtCollCtlTable:  as described above,
      some objects in the data\n   entry return meaningful values only when the average(3)
      option is\n   selected in the control entry, while others return meaningful
      values\n   only when the buckets(4) option is selected.  If both options are\n
      \  selected, then all the objects return meaningful values.  When an\n   object
      is not specified to return a meaningful value, an\n   implementation may return
      any syntactically valid value in response\n   to a Get operation.\n   The following
      objects return meaningful values if and only if the\n   average(3) option was
      selected in the corresponding\n   tn3270eRtCollCtlEntry:\n   o   tn3270eRtDataAvgRt\n
      \  o   tn3270eRtDataAvgIpRt\n   o   tn3270eRtDataAvgCountTrans\n   o   tn3270eRtDataIntTimeStamp\n
      \  o   tn3270eRtDataTotalRts\n   o   tn3270eRtDataTotalIpRts\n   o   tn3270eRtDataCountTrans\n
      \  o   tn3270eRtDataCountDrs\n   o   tn3270eRtDataElapsRndTrpSq\n   o   tn3270eRtDataElapsIpRtSq\n
      \  The first three objects in this list return values derived from the\n   sliding-window
      average calculations described earlier.  The time of\n   the most recent sample
      for these calculations is returned in the\n   tn3270eRtDataIntTimeStamp object.
      \ The next four objects are normal\n   Counter32 objects, maintaining counts
      of total response time and\n   total transactions.  The last two objects return
      sum of the squares\n   values, to enable variance calculations by a management
      application.\n   The following objects return meaningful values if and only
      if the\n   buckets(4) option was selected in the corresponding\n   tn3270eRtCollCtlEntry:\n
      \  o   tn3270eRtDataBucket1Rts\n   o   tn3270eRtDataBucket2Rts\n   o   tn3270eRtDataBucket3Rts\n
      \  o   tn3270eRtDataBucket4Rts\n   o   tn3270eRtDataBucket5Rts\n   A discontinuity
      object, tn3270eRtDataDiscontinuityTime, can be used\n   by a management application
      to detect when the values of the counter\n   objects in this table may have
      been reset, or otherwise experienced a\n   discontinuity.  A possible cause
      for such a discontinuity is the\n   TN3270E server's being stopped or restarted.
      \ This object returns a\n   meaningful value regardless of which collection
      control options were\n   selected.\n   An object, tn3270eRtDataRtMethod, identifies
      whether the IP Network\n   Time was calculated using either the definite response
      or TIMING-MARK\n   approach.\n   When an entry is created in the tn3270eRtCollCtlTable
      with its\n   tn3270eRtCollCtlType aggregate(0) bit set to 1, an entry is\n   automatically
      created in the tn3270eRtDataTable; this entry's\n   tn3270eRtDataClientAddress
      has the value of a zero-length octet\n   string, its tn3270eRtDataClientAddrType
      has the value of unknown(0),\n   and its tn3270eRtDataClientPort has the value
      0.\n   When an entry is created in the tn3270eRtCollCtlTable with its\n   tn3270eRtCollCtlType
      aggregate(0) bit set to 0, a separate entry is\n   created in the tn3270eRtDataTable
      for each member of the client group\n   that currently has a session with the
      TN3270E server.  Entries are\n   subsequently created for clients that the TN3270E
      server determines\n   to be members of the client group when these clients establish\n
      \  sessions with the server.  Entries are also created when clients with\n   existing
      sessions are added to the group.\n   All entries associated with a tn3270eRtCollCtlEntry
      are deleted from\n   the tn3270eRtDataTable when that entry is deleted from
      the\n   tn3270eRtCollCtlTable.  An entry for an individual client in a client\n
      \  group is deleted when its TCP connection terminates.  Once it has\n   been
      created, a client's entry in the tn3270eRtDataTable remains\n   active as long
      as the collection's tn3270eRtCollCtlEntry exists, even\n   if the client is
      removed from the client group for the\n   tn3270eRtCollCtlEntry.\n"
    title: 4.2  tn3270eRtDataTable
  - contents:
    - "4.3  Notifications\n   This MIB defines four notifications related to a tn3270eRtDataEntry.\n
      \  If the associated tn3270eRtCollCtlType object's traps(5) bit is set\n   to
      1, then the tn3270RtCollStart and tn3270RtCollEnd notifications\n   are generated
      when, respsectively, the tn3270eRtDataEntry is created\n   and deleted.  If,
      in addition, this tn3270eRtCollCtlType object's\n   average(3) bit is set to
      1, then the the tn3270eRtExceeded and\n   tn3270eRtOkay notifications are generated
      when the conditions they\n   report occur.\n   The following notifications are
      defined by this MIB:\n   o   tn3270eRtExceeded - The purpose of this notification
      is to signal\n       that a performance problem has been detected.  If average(3)\n
      \      response time data is being collected, then this notification is\n       generated
      whenever (1) an average response time is first found,\n       on a collection
      interval boundary, to have exceeded the high\n       threshold tn3270eRtCollCtlThreshHigh
      specified for the client\n       group, AND (2) the sample on which the average
      is based is\n       determined to have been a significant one, via the significance\n
      \      algorithm described earlier.  This notification is not generated\n       again
      for a tn3270eRtDataEntry until an average response time\n       falling below
      the low threshold tn3270eRtCollCtlThreshLow\n       specified for the client
      group has occurred for the entry.\n   o   tn3270eRtOkay - The purpose of this
      notification is to signal\n       that a previously reported performance problem
      has been resolved.\n       If average(3) response time data is being collected,
      then this\n       notification is generated whenever (1) a tn3270eRtExceeded\n
      \      notification has already been generated, AND (2) an average\n       response
      time is first found, on a collection interval boundary,\n       to have fallen
      below the low threshold tn3270eRtCollCtlThreshLow\n       specified for the
      client group.  This notification is not\n       generated again for a tn3270eRtDataEntry
      until an average\n       response time exceeding the high threshold\n       tn3270eRtCollCtlThreshHigh
      specified for the client group has\n       occurred for the entry.\n   Taken
      together, the two preceding notifications serve to minimize the\n   generation
      of an excessive number of traps in the case of an average\n   response time
      that oscillates about its high threshold.\n   o   tn3270eRtCollStart - This
      notification is generated whenever data\n       collection begins for a client
      group, or when a new\n       tn3270eRtDataEntry becomes active.  The primary
      purpose of this\n       notification is signal to a management application that
      a new\n       client TCP session has been established, and to provide the IP-\n
      \      to-resource mapping for the session.  This notification is not\n       critical
      when average(3) data collection is not being performed\n       for the client
      group.\n   o   tn3270eRtCollEnd - This notification is generated whenever a
      data\n       collection ends.  For an aggregate collection, this occurs when\n
      \      the corresponding tn3270eRtCollCtlEntry is deleted.  For an\n       individual
      collection, this occurs either when the\n       tn3270eRtCollCtlEntry is deleted,
      or when the client's TCP\n       connection terminates.  The purpose of this
      notification is to\n       enable a management application to complete a monitoring
      function\n       that it was performing, by returning final values for the\n
      \      collection's data objects.\n"
    title: 4.3  Notifications
  - contents:
    - "4.4  Advisory Spin Lock Usage\n   Within the TN3270E-RT-MIB, tn3270eRtSpinLock
      is defined as an\n   advisory lock that allows cooperating TN3270E-RT-MIB applications
      to\n   coordinate their use of the tn3270eRtCollCtlTable.  When creating a\n
      \  new entry or altering an existing entry in the tn3270eRtCollCtlTable,\n   an
      application SHOULD make use of tn3270eRtSpinLock to serialize\n   application
      changes or additions.  Since this is an advisory lock,\n   its use by management
      applications SHALL NOT be enforced by agents.\n   Agents MUST, however, implement
      the tn3270eRtSpinLock object.\n"
    title: 4.4  Advisory Spin Lock Usage
  - contents:
    - "5.0  Definitions\n  TN3270E-RT-MIB DEFINITIONS ::= BEGIN\n  IMPORTS\n      MODULE-IDENTITY,
      OBJECT-TYPE, NOTIFICATION-TYPE,\n      Counter32, Unsigned32, Gauge32\n                  FROM
      SNMPv2-SMI\n      RowStatus, DateAndTime, TimeStamp, TestAndIncr\n                  FROM
      SNMPv2-TC\n      MODULE-COMPLIANCE, OBJECT-GROUP, NOTIFICATION-GROUP\n                  FROM
      SNMPv2-CONF\n      tn3270eSrvrConfIndex, tn3270eClientGroupName,\n      tn3270eResMapElementType\n
      \                 FROM TN3270E-MIB\n      IANATn3270eAddrType, IANATn3270eAddress\n
      \                 FROM IANATn3270eTC-MIB\n      snanauMIB\n                  FROM
      SNA-NAU-MIB;\n    tn3270eRtMIB   MODULE-IDENTITY\n        LAST-UPDATED \"9807270000Z\"
      -- July 27, 1998\n        ORGANIZATION \"TN3270E Working Group\"\n        CONTACT-INFO\n
      \         \"Kenneth White (kennethw@vnet.ibm.com)\n           IBM Corp. - Dept.
      BRQA/Bldg. 501/G114\n           P.O. Box 12195\n           3039 Cornwallis\n
      \          RTP, NC 27709-2195\n           Robert Moore (remoore@us.ibm.com)\n
      \          IBM Corp. - Dept. BRQA/Bldg. 501/G114\n           P.O. Box 12195\n
      \          3039 Cornwallis\n           RTP, NC 27709-2195\n           (919)
      254-4436\"\n       DESCRIPTION\n          \"This module defines a portion of
      the management\n          information base (MIB) that enables monitoring of\n
      \         TN3270 and TN3270E clients' response times by a\n          TN3270E
      server.\"\n       REVISION  \"9807270000Z\" -- July 27, 1998\n       DESCRIPTION\n
      \          \"RFC nnnn (Proposed Standard)\" -- RFC Editor to fill in\n  ::=
      { snanauMIB 9 }\n  -- snanauMIB ::= { mib-2 34 }\n  -- Top level structure of
      the MIB\n  tn3270eRtNotifications   OBJECT IDENTIFIER  ::= { tn3270eRtMIB 0
      }\n  tn3270eRtObjects         OBJECT IDENTIFIER  ::= { tn3270eRtMIB 1 }\n  tn3270eRtConformance
      \    OBJECT IDENTIFIER  ::= { tn3270eRtMIB 3 }\n  -- MIB Objects\n  -- Response
      Time Control Table\n  tn3270eRtCollCtlTable  OBJECT-TYPE\n      SYNTAX       SEQUENCE
      OF Tn3270eRtCollCtlEntry\n      MAX-ACCESS   not-accessible\n      STATUS       current\n
      \     DESCRIPTION\n        \"The response time monitoring collection control
      table,\n        which allows a management application to control the\n        types
      of response time data being collected, and the\n        clients for which it
      is being collected.\n        This table is indexed by tn3270eSrvrConfIndex and\n
      \       tn3270eClientGroupName imported from the\n        TN3270E-MIB.  tn3270eSrvrConfIndex
      indicates within\n        a host which TN3270E server an entry applies to.\n
      \       tn3270eClientGroupName it identifies the set of IP\n        clients
      for which response time data is being collected.\n        The particular IP
      clients making up the set are identified\n        in the tn3270eClientGroupTable
      in the TN3270E-MIB.\"\n      ::= { tn3270eRtObjects 1}\n  tn3270eRtCollCtlEntry
      \   OBJECT-TYPE\n      SYNTAX        Tn3270eRtCollCtlEntry\n      MAX-ACCESS
      \   not-accessible\n      STATUS        current\n      DESCRIPTION\n        \"An
      entry in the TN3270E response time monitoring collection\n        control table.
      \ To handle the case of multiple TN3270E\n        servers on the same host,
      the first index of this table is\n        the tn3270eSrvrConfIndex from the
      TN3270E-MIB.\"\n      INDEX {\n        tn3270eSrvrConfIndex,    -- Server's
      index\n        tn3270eClientGroupName } -- What to collect on\n      ::= { tn3270eRtCollCtlTable
      1 }\n  Tn3270eRtCollCtlEntry ::= SEQUENCE {\n      tn3270eRtCollCtlType              BITS,\n
      \     tn3270eRtCollCtlSPeriod           Unsigned32,\n      tn3270eRtCollCtlSPMult
      \           Unsigned32,\n      tn3270eRtCollCtlThreshHigh        Unsigned32,\n
      \     tn3270eRtCollCtlThreshLow         Unsigned32,\n      tn3270eRtCollCtlIdleCount
      \        Unsigned32,\n      tn3270eRtCollCtlBucketBndry1      Unsigned32,\n
      \     tn3270eRtCollCtlBucketBndry2      Unsigned32,\n      tn3270eRtCollCtlBucketBndry3
      \     Unsigned32,\n      tn3270eRtCollCtlBucketBndry4      Unsigned32,\n      tn3270eRtCollCtlRowStatus
      \        RowStatus   }\n  -- The OID { tn3270eRtCollCtlEntry 1 } is not used\n
      \ tn3270eRtCollCtlType  OBJECT-TYPE\n      SYNTAX    BITS {\n                       aggregate(0),\n
      \                      excludeIpComponent(1),\n                       ddr(2),\n
      \                      average(3),\n                       buckets(4),\n                       traps(5)\n
      \                    }\n      MAX-ACCESS   read-create\n      STATUS       current\n
      \     DESCRIPTION\n        \"This object controls what types of response time
      data to\n         collect, whether to summarize the data across the members\n
      \        of a client group or keep it individually, whether to\n         introduce
      dynamic definite responses, and whether to\n         generate traps.\n         aggregate(0)
      \         - Aggregate response time data for the\n                                 client
      group as a whole.  If this bit\n                                 is set to 0,
      then maintain response\n                                 time data separately
      for each member\n                                 of the client group.\n         excludeIpComponent(1)
      - Do not include the IP-network\n                                 component
      in any response times.\n         ddr(2)                - Enable dynamic definite
      response.\n         average(3)            - Produce an average response time\n
      \                                based on a specified collection\n                                 interval.\n
      \        buckets(4)            - Maintain tn3270eRtDataBucket values in\n                                 a
      corresponding tn3270eRtDataEntry,\n                                 based on
      the bucket boundaries specified\n                                 in the tn3270eRtCollCtlBucketBndry\n
      \                                objects          .\n         traps(5)              -
      generate the notifications specified\n                                 in this
      MIB module.  The\n                                 tn3270eRtExceeded and tn3270eRtOkay\n
      \                                notifications are generated only if\n                                 average(3)
      is also specified.\"\n      ::= { tn3270eRtCollCtlEntry 2 }\n  tn3270eRtCollCtlSPeriod
      OBJECT-TYPE\n      SYNTAX  Unsigned32 (15..86400) -- 15 second min, 24 hour
      max\n      UNITS   \"seconds\"\n      MAX-ACCESS   read-create\n      STATUS
      \      current\n      DESCRIPTION\n        \"The number of seconds that defines
      the sample period.\n         The actual interval is defined as tn3270eRtCollCtlSPeriod\n
      \        times tn3270eRtCollCtlSPMult.\n         The value of this object is
      used only if the corresponding\n         tn3270eRtCollCtlType has the average(3)
      setting.\"\n      DEFVAL   {20}    -- 20 seconds\n      ::= { tn3270eRtCollCtlEntry
      3 }\n  tn3270eRtCollCtlSPMult OBJECT-TYPE\n      SYNTAX  Unsigned32 (1..5760)
      -- 5760 x SPeriod of 15 is 24 hours\n      UNITS   \"period\"\n      MAX-ACCESS
      \  read-create\n      STATUS       current\n      DESCRIPTION\n        \"The
      sample period multiplier; this value is multiplied by\n        the sample period,
      tn3270eRtCollCtlSPeriod, to determine\n        the collection interval.\n        Sliding-window
      average calculation can, if necessary, be\n        disabled, by setting the
      sample period multiplier,\n        tn3270eRtCollCtlSPMult, to 1, and setting
      the sample\n        period, tn3270eRtCollCtlSPeriod, to the required\n        collection
      interval.\n        The value of this object is used only if the corresponding\n
      \       tn3270eRtCollCtlType has the average(3) setting.\"\n      DEFVAL   {
      30 }    -- yields an interval of 10 minutes when\n                         --
      used with the default SPeriod value\n      ::= { tn3270eRtCollCtlEntry 4 }\n
      \ tn3270eRtCollCtlThreshHigh  OBJECT-TYPE\n      SYNTAX            Unsigned32\n
      \     UNITS             \"seconds\"\n      MAX-ACCESS        read-create\n      STATUS
      \           current\n      DESCRIPTION\n        \"The threshold for generating
      a tn3270eRtExceeded\n        notification, signalling that a monitored total
      response\n        time has exceeded the specified limit.  A value of zero\n
      \       for this object suppresses generation of this notification.\n        The
      value of this object is used only if the corresponding\n        tn3270eRtCollCtlType
      has average(3) and traps(5) selected.\n        A tn3270eRtExceeded notification
      is not generated again for a\n        tn3270eRtDataEntry until an average response
      time falling below\n        the low threshold tn3270eRtCollCtlThreshLow specified
      for the\n        client group has occurred for the entry.\"\n      DEFVAL   {
      0 }   -- suppress notifications\n      ::= { tn3270eRtCollCtlEntry 5 }\n  tn3270eRtCollCtlThreshLow
      \  OBJECT-TYPE\n      SYNTAX            Unsigned32\n      UNITS             \"seconds\"\n
      \     MAX-ACCESS        read-create\n      STATUS            current\n      DESCRIPTION\n
      \       \"The threshold for generating a tn3270eRtOkay notification,\n        signalling
      that a monitored total response time has fallen\n        below the specified
      limit.  A value of zero for this object\n        suppresses generation of this
      notification.  The value of\n        this object is used only if the corresponding\n
      \       tn3270eRtCollCtlType has average(3) and traps(5) selected.\n        A
      tn3270eRtOkay notification is not generated again for a\n        tn3270eRtDataEntry
      until an average response time\n        exceeding the high threshold tn3270eRtCollCtlThreshHigh\n
      \       specified for the client group has occurred for the entry.\"\n      DEFVAL
      \  { 0 }   -- suppress notifications\n      ::= { tn3270eRtCollCtlEntry 6 }\n
      \ tn3270eRtCollCtlIdleCount   OBJECT-TYPE\n      SYNTAX            Unsigned32\n
      \     UNITS             \"transactions\"\n      MAX-ACCESS        read-create\n
      \     STATUS            current\n      DESCRIPTION\n        \"The value of this
      object is used to determine whether a\n        sample that yields an average
      response time exceeding the\n        value of tn3270eRtCollCtlThreshHigh was
      a statistically\n        valid one.  If the following statement is true, then
      the\n        sample was statistically valid, and so a tn3270eRtExceeded\n        notification
      should be generated:\n          AvgCountTrans * ((AvgRt/ThreshHigh - 1) ** 2)
      >=  IdleCount\n        This comparison is done only if the corresponding\n        tn3270eRtCollCtlType
      has average(3) and traps(5) selected.\"\n      DEFVAL { 1 }\n      ::= { tn3270eRtCollCtlEntry
      7 }\n  tn3270eRtCollCtlBucketBndry1   OBJECT-TYPE\n      SYNTAX            Unsigned32\n
      \     UNITS             \"tenths of seconds\"\n      MAX-ACCESS        read-create\n
      \     STATUS            current\n      DESCRIPTION\n        \"The value of this
      object defines the range of transaction\n         response times counted in
      the Tn3270eRtDataBucket1Rts\n         object: those less than or equal to this
      value.\"\n      DEFVAL { 10 }\n      ::= { tn3270eRtCollCtlEntry 8 }\n  tn3270eRtCollCtlBucketBndry2
      \  OBJECT-TYPE\n      SYNTAX            Unsigned32\n      UNITS             \"tenths
      of seconds\"\n      MAX-ACCESS        read-create\n      STATUS            current\n
      \     DESCRIPTION\n        \"The value of this object, together with that of
      the\n        tn3270eRtCollCtlBucketBndry1 object, defines the range\n        of
      transaction response times counted in the\n        Tn3270eRtDataBucket2Rts object:
      those greater than the\n        value of the tn3270eRtCollCtlBucketBndry1 object,
      and\n        less than or equal to the value of this object.\"\n      DEFVAL
      { 20 }\n      ::= { tn3270eRtCollCtlEntry 9 }\n  tn3270eRtCollCtlBucketBndry3
      \  OBJECT-TYPE\n      SYNTAX            Unsigned32\n      UNITS             \"tenths
      of seconds\"\n      MAX-ACCESS        read-create\n      STATUS            current\n
      \     DESCRIPTION\n        \"The value of this object, together with that of
      the\n        tn3270eRtCollCtlBucketBndry2 object, defines the range of\n        transaction
      response times counted in the\n        Tn3270eRtDataBucket3Rts object:  those
      greater than the\n        value of the tn3270eRtCollCtlBucketBndry2 object,
      and less\n        than or equal to the value of this object.\"\n      DEFVAL
      { 50 }\n      ::= { tn3270eRtCollCtlEntry 10 }\n  tn3270eRtCollCtlBucketBndry4
      \  OBJECT-TYPE\n      SYNTAX            Unsigned32\n      UNITS             \"tenths
      of seconds\"\n      MAX-ACCESS        read-create\n      STATUS            current\n
      \     DESCRIPTION\n        \"The value of this object, together with that of
      the\n        tn3270eRtCollCtlBucketBndry3 object, defines the range\n        of
      transaction response times counted in the\n        Tn3270eRtDataBucket4Rts object:
      those greater than the\n        value of the tn3270eRtCollCtlBucketBndry3 object,
      and\n        less than or equal to the value of this object.\n        The value
      of this object also defines the range of\n        transaction response times
      counted in the\n        Tn3270eRtDataBucket5Rts object: those greater than the\n
      \       value of this object.\"\n      DEFVAL { 100 }\n      ::= { tn3270eRtCollCtlEntry
      11 }\n  tn3270eRtCollCtlRowStatus  OBJECT-TYPE\n      SYNTAX            RowStatus\n
      \     MAX-ACCESS        read-create\n      STATUS            current\n      DESCRIPTION\n
      \       \"This object allows entries to be created and deleted\n         in
      the tn3270eRtCollCtlTable.  An entry in this table\n         is deleted by setting
      this object to destroy(6).\n         Deleting an entry in this table has the
      side-effect\n         of removing all entries from the tn3270eRtDataTable\n
      \        that are associated with the entry being deleted.\"\n      ::= { tn3270eRtCollCtlEntry
      12 }\n  -- TN3270E Response Time Data Table\n  tn3270eRtDataTable  OBJECT-TYPE\n
      \     SYNTAX       SEQUENCE OF Tn3270eRtDataEntry\n      MAX-ACCESS   not-accessible\n
      \     STATUS       current\n      DESCRIPTION\n        \"The response time data
      table.  Entries in this table are\n         created based on entries in the
      tn3270eRtCollCtlTable.\"\n      ::= { tn3270eRtObjects 2 }\n  tn3270eRtDataEntry
      \ OBJECT-TYPE\n      SYNTAX        Tn3270eRtDataEntry\n      MAX-ACCESS    not-accessible\n
      \     STATUS        current\n      DESCRIPTION\n        \"Entries in this table
      are created based upon the\n        tn3270eRtCollCtlTable.  When the corresponding\n
      \       tn3270eRtCollCtlType has aggregate(0) specified, a single\n        entry
      is created in this table, with a tn3270eRtDataClientAddrType\n        of unknown(0),
      a zero-length octet string value for\n        tn3270eRtDataClientAddress, and
      a tn3270eRtDataClientPort value of\n        0.  When aggregate(0) is not specified,
      a separate entry is\n        created for each client in the group.\n        Note
      that the following objects defined within an entry in this\n        table can
      \ wrap:\n            tn3270eRtDataTotalRts\n            tn3270eRtDataTotalIpRts\n
      \           tn3270eRtDataCountTrans\n            tn3270eRtDataCountDrs\n            tn3270eRtDataElapsRnTrpSq\n
      \           tn3270eRtDataElapsIpRtSq\n            tn3270eRtDataBucket1Rts\n
      \           tn3270eRtDataBucket2Rts\n            tn3270eRtDataBucket3Rts\n            tn3270eRtDataBucket4Rts\n
      \           tn3270eRtDataBucket5Rts\"\n      INDEX {\n         tn3270eSrvrConfIndex,
      \     -- Server's local index\n         tn3270eClientGroupName,    -- Collection
      target\n         tn3270eRtDataClientAddrType,\n         tn3270eRtDataClientAddress,\n
      \        tn3270eRtDataClientPort }\n      ::= { tn3270eRtDataTable 1 }\n  Tn3270eRtDataEntry
      ::= SEQUENCE {\n         tn3270eRtDataClientAddrType        IANATn3270eAddrType,\n
      \        tn3270eRtDataClientAddress         IANATn3270eAddress,\n         tn3270eRtDataClientPort
      \           Unsigned32,\n         tn3270eRtDataAvgRt                 Gauge32,\n
      \        tn3270eRtDataAvgIpRt               Gauge32,\n         tn3270eRtDataAvgCountTrans
      \        Gauge32,\n         tn3270eRtDataIntTimeStamp          DateAndTime,\n
      \        tn3270eRtDataTotalRts              Counter32,\n         tn3270eRtDataTotalIpRts
      \           Counter32,\n         tn3270eRtDataCountTrans            Counter32,\n
      \        tn3270eRtDataCountDrs              Counter32,\n         tn3270eRtDataElapsRndTrpSq
      \        Unsigned32,\n         tn3270eRtDataElapsIpRtSq           Unsigned32,\n
      \        tn3270eRtDataBucket1Rts            Counter32,\n         tn3270eRtDataBucket2Rts
      \           Counter32,\n         tn3270eRtDataBucket3Rts            Counter32,\n
      \        tn3270eRtDataBucket4Rts            Counter32,\n         tn3270eRtDataBucket5Rts
      \           Counter32,\n         tn3270eRtDataRtMethod              INTEGER,\n
      \        tn3270eRtDataDiscontinuityTime     TimeStamp\n     }\n  tn3270eRtDataClientAddrType
      \  OBJECT-TYPE\n      SYNTAX    IANATn3270eAddrType\n      MAX-ACCESS   not-accessible\n
      \     STATUS       current\n      DESCRIPTION\n        \"Indicates the type
      of address represented by the value\n        of tn3270eRtDataClientAddress.
      \ The value unknown(0) is\n        used if aggregate data is being collected
      for the client\n        group.\"\n      ::= { tn3270eRtDataEntry 1 }\n  tn3270eRtDataClientAddress
      \  OBJECT-TYPE\n      SYNTAX    IANATn3270eAddress\n      MAX-ACCESS   not-accessible\n
      \     STATUS       current\n      DESCRIPTION\n        \"Contains the IP address
      of the TN3270 client being\n        monitored.  A zero-length octet string is
      used if\n        aggregate data is being collected for the client group.\"\n
      \     ::= { tn3270eRtDataEntry 2 }\n  tn3270eRtDataClientPort   OBJECT-TYPE\n
      \     SYNTAX       Unsigned32(0..65535)\n      MAX-ACCESS   not-accessible\n
      \     STATUS       current\n      DESCRIPTION\n        \"Contains the client
      port number of the TN3270 client being\n        monitored.  The value 0 is used
      if aggregate data is being\n        collected for the client group, or if the\n
      \       tn3270eRtDataClientAddrType identifies an address type that\n        does
      not support ports.\"\n      ::= { tn3270eRtDataEntry 3 }\n  tn3270eRtDataAvgRt
      OBJECT-TYPE\n      SYNTAX       Gauge32\n      UNITS        \"tenths of seconds\"\n
      \     MAX-ACCESS   read-only\n      STATUS       current\n      DESCRIPTION\n
      \       \"The average total response time measured over the last\n        collection
      interval.\"\n      DEFVAL { 0 }\n      ::= { tn3270eRtDataEntry 4 }\n  tn3270eRtDataAvgIpRt
      OBJECT-TYPE\n      SYNTAX       Gauge32\n      UNITS        \"tenths of seconds\"\n
      \     MAX-ACCESS   read-only\n      STATUS       current\n      DESCRIPTION\n
      \       \"The average IP response time measured over the last\n        collection
      interval.\"\n      DEFVAL { 0 }\n      ::= { tn3270eRtDataEntry 5 }\n  tn3270eRtDataAvgCountTrans
      \  OBJECT-TYPE\n      SYNTAX       Gauge32\n      UNITS        \"transactions\"\n
      \     MAX-ACCESS   read-only\n      STATUS       current\n      DESCRIPTION\n
      \       \"The sliding transaction count used for calculating the\n        values
      of the tn3270eRtDataAvgRt and tn3270eRtDataAvgIpRt\n        objects.  The actual
      transaction count is available in\n        the tn3270eRtDataCountTrans object.\n
      \       The initial value of this object, before any averages have\n        been
      calculated, is 0.\"\n      ::= { tn3270eRtDataEntry 6 }\n  tn3270eRtDataIntTimeStamp
      \  OBJECT-TYPE\n      SYNTAX       DateAndTime\n      MAX-ACCESS   read-only\n
      \     STATUS       current\n      DESCRIPTION\n        \"The date and time of
      the last interval that\n        tn3270eRtDataAvgRt, tn3270eRtDataAvgIpRt, and\n
      \       tn3270eRtDataAvgCountTrans were calculated.\n        Prior to the calculation
      of the first interval\n        averages, this object returns the value\n        0x0000000000000000000000.
      \ When this value is\n        returned, the remaining objects in the entry have\n
      \       no significance.\"\n      ::= { tn3270eRtDataEntry 7 }\n  tn3270eRtDataTotalRts
      \  OBJECT-TYPE\n      SYNTAX       Counter32\n      UNITS        \"tenths of
      seconds\"\n      MAX-ACCESS   read-only\n      STATUS       current\n      DESCRIPTION\n
      \       \"The count of the total response times collected.\n        A management
      application can detect discontinuities in this\n        counter by monitoring
      the tn3270eRtDataDiscontinuityTime\n        object.\"\n      ::= { tn3270eRtDataEntry
      8 }\n  tn3270eRtDataTotalIpRts   OBJECT-TYPE\n      SYNTAX       Counter32\n
      \     UNITS        \"tenths of seconds\"\n      MAX-ACCESS   read-only\n      STATUS
      \      current\n      DESCRIPTION\n        \"The count of the total IP-network
      response times\n        collected.\n        A management application can detect
      discontinuities in this\n        counter by monitoring the tn3270eRtDataDiscontinuityTime\n
      \       object.\"\n      ::= { tn3270eRtDataEntry 9 }\n  tn3270eRtDataCountTrans
      \  OBJECT-TYPE\n      SYNTAX       Counter32\n      UNITS        \"transactions\"\n
      \     MAX-ACCESS   read-only\n      STATUS       current\n      DESCRIPTION\n
      \       \"The count of the total number of transactions detected.\n        A
      management application can detect discontinuities in this\n        counter by
      monitoring the tn3270eRtDataDiscontinuityTime\n        object.\"\n      ::=
      { tn3270eRtDataEntry 10 }\n  tn3270eRtDataCountDrs   OBJECT-TYPE\n      SYNTAX
      \      Counter32\n      UNITS        \"definite responses\"\n      MAX-ACCESS
      \  read-only\n      STATUS       current\n      DESCRIPTION\n        \"The count
      of the total number of definite responses\n        detected.\n        A management
      application can detect discontinuities in this\n        counter by monitoring
      the tn3270eRtDataDiscontinuityTime\n        object.\"\n      ::= { tn3270eRtDataEntry
      11 }\n  tn3270eRtDataElapsRndTrpSq   OBJECT-TYPE\n      SYNTAX       Unsigned32\n
      \     UNITS        \"tenths of seconds squared\"\n      MAX-ACCESS   read-only\n
      \     STATUS       current\n      DESCRIPTION\n        \"The sum of the elapsed
      round trip time squared.  The sum\n        of the squares is kept in order to
      enable calculation of\n        a variance.\"\n      DEFVAL { 0 }\n      ::=
      { tn3270eRtDataEntry 12 }\n  tn3270eRtDataElapsIpRtSq   OBJECT-TYPE\n      SYNTAX
      \      Unsigned32\n      UNITS        \"tenths of seconds squared\"\n      MAX-ACCESS
      \  read-only\n      STATUS       current\n      DESCRIPTION\n        \"The sum
      of the elapsed IP round trip time squared.\n        The sum of the squares is
      kept in order to enable\n        calculation of a variance.\"\n      DEFVAL
      { 0 }\n      ::= { tn3270eRtDataEntry 13 }\n  tn3270eRtDataBucket1Rts   OBJECT-TYPE\n
      \     SYNTAX       Counter32\n      MAX-ACCESS   read-only\n      STATUS       current\n
      \     DESCRIPTION\n        \"The count of the response times falling into bucket
      1.\n        A management application can detect discontinuities in this\n        counter
      by monitoring the tn3270eRtDataDiscontinuityTime\n        object.\"\n      ::=
      { tn3270eRtDataEntry 14 }\n  tn3270eRtDataBucket2Rts   OBJECT-TYPE\n      SYNTAX
      \      Counter32\n      MAX-ACCESS   read-only\n      STATUS       current\n
      \     DESCRIPTION\n        \"The count of the response times falling into bucket
      2.\n        A management application can detect discontinuities in this\n        counter
      by monitoring the tn3270eRtDataDiscontinuityTime\n        object.\"\n      ::=
      { tn3270eRtDataEntry 15 }\n  tn3270eRtDataBucket3Rts   OBJECT-TYPE\n      SYNTAX
      \      Counter32\n      MAX-ACCESS   read-only\n      STATUS       current\n
      \     DESCRIPTION\n        \"The count of the response times falling into bucket
      3.\n        A management application can detect discontinuities in this\n        counter
      by monitoring the tn3270eRtDataDiscontinuityTime\n        object.\"\n      ::=
      { tn3270eRtDataEntry 16 }\n  tn3270eRtDataBucket4Rts  OBJECT-TYPE\n      SYNTAX
      \      Counter32\n      MAX-ACCESS   read-only\n      STATUS       current\n
      \     DESCRIPTION\n        \"The count of the response times falling into bucket
      4.\n        A management application can detect discontinuities in this\n        counter
      by monitoring the tn3270eRtDataDiscontinuityTime\n        object.\"\n      ::=
      { tn3270eRtDataEntry 17 }\n  tn3270eRtDataBucket5Rts  OBJECT-TYPE\n      SYNTAX
      \      Counter32\n      MAX-ACCESS   read-only\n      STATUS       current\n
      \     DESCRIPTION\n        \"The count of the response times falling into bucket
      5.\n        A management application can detect discontinuities in this\n        counter
      by monitoring the tn3270eRtDataDiscontinuityTime\n        object.\"\n      ::=
      { tn3270eRtDataEntry 18 }\n  tn3270eRtDataRtMethod OBJECT-TYPE\n      SYNTAX
      \      INTEGER {\n                             none(0),\n                             responses(1),\n
      \                            timingMark(2)\n                           }\n      MAX-ACCESS
      \  read-only\n      STATUS       current\n      DESCRIPTION\n        \"The value
      of this object indicates the method that was\n        used in calculating the
      IP network time.\n        The value 'none(0) indicates that response times were
      not\n        calculated for the IP network.\"\n      ::= { tn3270eRtDataEntry
      19 }\n  tn3270eRtDataDiscontinuityTime OBJECT-TYPE\n      SYNTAX      TimeStamp\n
      \     MAX-ACCESS  read-only\n      STATUS      current\n      DESCRIPTION\n
      \         \"The value of sysUpTime on the most recent occasion at\n          which
      one or more of this entry's counter objects\n          suffered a discontinuity.
      \ This may happen if a TN3270E\n          server is stopped and then restarted,
      and local methods\n          are used to set up collection policy\n          (tn3270eRtCollCtlTable
      entries).\"\n      ::= { tn3270eRtDataEntry 20 }\n  tn3270eRtSpinLock OBJECT-TYPE\n
      \     SYNTAX      TestAndIncr\n      MAX-ACCESS  read-write\n      STATUS      current\n
      \     DESCRIPTION\n        \"An advisory lock used to allow cooperating TN3270E-RT-MIB\n
      \       applications to coordinate their use of the\n        tn3270eRtCollCtlTable.\n
      \       When creating a new entry or altering an existing entry\n        in
      the tn3270eRtCollCtlTable, an application should make\n        use of tn3270eRtSpinLock
      to serialize application changes\n        or additions.\n        Since this
      is an advisory lock, the use of this lock is\n        not enforced.\"\n      ::=
      { tn3270eRtObjects 3 }\n  -- Notifications\n  tn3270eRtExceeded   NOTIFICATION-TYPE\n
      \     OBJECTS {\n         tn3270eRtDataIntTimeStamp,\n         tn3270eRtDataAvgRt,\n
      \        tn3270eRtDataAvgIpRt,\n         tn3270eRtDataAvgCountTrans,\n         tn3270eRtDataRtMethod\n
      \     }\n      STATUS  current\n      DESCRIPTION\n        \"This notification
      is generated when the average response\n        time, tn3270eRtDataAvgRt, exceeds\n
      \       tn3270eRtCollCtlThresholdHigh at the end of a collection\n        interval
      specified by tn3270eCollCtlSPeriod\n        times tn3270eCollCtlSPMult.  Note
      that the corresponding\n        tn3270eCollCtlType must have traps(5) and average(3)
      set\n        for this notification to be generated.  In addition,\n        tn3270eRtDataAvgCountTrans,
      tn3270eRtCollCtlThreshHigh, and\n        tn3270eRtDataAvgRt are algorithmically
      compared to\n        tn3270eRtCollCtlIdleCount for determination if this\n        notification
      will be suppressed.\"\n      ::= { tn3270eRtNotifications 1 }\n  tn3270eRtOkay
      \  NOTIFICATION-TYPE\n      OBJECTS {\n         tn3270eRtDataIntTimeStamp,\n
      \        tn3270eRtDataAvgRt,\n         tn3270eRtDataAvgIpRt,\n         tn3270eRtDataAvgCountTrans,\n
      \        tn3270eRtDataRtMethod\n      }\n      STATUS  current\n      DESCRIPTION\n
      \       \"This notification is generated when the average response\n        time,
      tn3270eRtDataAvgRt, falls below\n        tn3270eRtCollCtlThresholdLow at the
      end of a collection\n        interval specified by tn3270eCollCtlSPeriod times\n
      \       tn3270eCollCtlSPMult, after a tn3270eRtExceeded\n        notification
      was generated.  Note that the corresponding\n        tn3270eCollCtlType must
      have traps(5) and average(3)\n        set for this notification to be generated.\"\n
      \     ::= { tn3270eRtNotifications 2 }\n  tn3270eRtCollStart NOTIFICATION-TYPE\n
      \     OBJECTS {\n         tn3270eRtDataRtMethod,       -- type of collection\n
      \        tn3270eResMapElementType     -- type of resource\n      }\n      STATUS
      \ current\n      DESCRIPTION\n        \"This notification is generated when
      response time data\n        collection is enabled for a member of a client group.\n
      \       In order for this notification to occur the corresponding\n        tn3270eRtCollCtlType
      must have traps(5) selected.\n        tn3270eResMapElementType contains a valid
      value only if\n        tn3270eRtDataClientAddress contains a valid address\n
      \       (rather than a zero-length octet string).\"\n      ::= { tn3270eRtNotifications
      3 }\n  tn3270eRtCollEnd   NOTIFICATION-TYPE\n      OBJECTS {\n         tn3270eRtDataDiscontinuityTime,\n
      \        tn3270eRtDataAvgRt,\n         tn3270eRtDataAvgIpRt,\n         tn3270eRtDataAvgCountTrans,\n
      \        tn3270eRtDataIntTimeStamp,\n         tn3270eRtDataTotalRts,\n         tn3270eRtDataTotalIpRts,\n
      \        tn3270eRtDataCountTrans,\n         tn3270eRtDataCountDrs,\n         tn3270eRtDataElapsRndTrpSq,\n
      \        tn3270eRtDataElapsIpRtSq,\n         tn3270eRtDataBucket1Rts,\n         tn3270eRtDataBucket2Rts,\n
      \        tn3270eRtDataBucket3Rts,\n         tn3270eRtDataBucket4Rts,\n         tn3270eRtDataBucket5Rts,\n
      \        tn3270eRtDataRtMethod\n      }\n      STATUS  current\n      DESCRIPTION\n
      \       \"This notification is generated when an tn3270eRtDataEntry\n        is
      deleted after being active (actual data collected), in\n        order to enable
      a management application monitoring an\n        tn3270eRtDataEntry to get the
      entry's final values.  Note\n        that the corresponding tn3270eCollCtlType
      must have traps(5)\n        set for this notification to be generated.\"\n      ::=
      { tn3270eRtNotifications 4 }\n  -- Conformance Statement\n  tn3270eRtGroups
      \      OBJECT IDENTIFIER ::= { tn3270eRtConformance 1 }\n  tn3270eRtCompliances
      \ OBJECT IDENTIFIER ::= { tn3270eRtConformance 2 }\n  -- Compliance statements\n
      \ tn3270eRtCompliance     MODULE-COMPLIANCE\n      STATUS current\n      DESCRIPTION\n
      \       \"The compliance statement for agents that support the\n        TN327E-RT-MIB.\"\n
      \     MODULE   -- this module\n         MANDATORY-GROUPS { tn3270eRtGroup, tn3270eRtNotGroup
      }\n      OBJECT tn3270eRtCollCtlType\n         MIN-ACCESS  read-only\n         DESCRIPTION\n
      \           \"The agent is not required to support a SET operation to\n            this
      object in the absence of adequate security.\"\n      OBJECT tn3270eRtCollCtlSPeriod\n
      \        MIN-ACCESS  read-only\n         DESCRIPTION\n            \"The agent
      is not required to allow the user to change\n            the default value of
      this object, and is allowed to\n            use a different default.\"\n      OBJECT
      tn3270eRtCollCtlSPMult\n         MIN-ACCESS  read-only\n         DESCRIPTION\n
      \           \"The agent is not required to support a SET operation\n            to
      this object in the absence of adequate security.\"\n      OBJECT tn3270eRtCollCtlThreshHigh\n
      \        MIN-ACCESS  read-only\n         DESCRIPTION\n            \"The agent
      is not required to support a SET operation\n            to this object in the
      absence of adequate security.\"\n      OBJECT tn3270eRtCollCtlThreshLow\n         MIN-ACCESS
      \ read-only\n         DESCRIPTION\n            \"The agent is not required to
      support a SET operation\n            to this object in the absence of adequate
      security.\"\n      OBJECT tn3270eRtCollCtlIdleCount\n         MIN-ACCESS  read-only\n
      \        DESCRIPTION\n            \"The agent is not required to support a SET
      operation\n            to this object in the absence of adequate security.\"\n
      \     OBJECT tn3270eRtCollCtlBucketBndry1\n         MIN-ACCESS  read-only\n
      \        DESCRIPTION\n            \"The agent is not required to support a SET
      operation\n            to this object in the absence of adequate security.\"\n
      \     OBJECT tn3270eRtCollCtlBucketBndry2\n         MIN-ACCESS  read-only\n
      \        DESCRIPTION\n            \"The agent is not required to support a SET
      operation\n            to this object in the absence of adequate security.\"\n
      \     OBJECT tn3270eRtCollCtlBucketBndry3\n         MIN-ACCESS  read-only\n
      \        DESCRIPTION\n            \"The agent is not required to support a SET
      operation\n            to this object in the absence of adequate security.\"\n
      \     OBJECT tn3270eRtCollCtlBucketBndry4\n         MIN-ACCESS  read-only\n
      \        DESCRIPTION\n            \"The agent is not required to support a SET
      operation\n            to this object in the absence of adequate security.\"\n
      \     OBJECT tn3270eRtCollCtlRowStatus\n         SYNTAX   INTEGER {\n                           active(1)
      -- subset of RowStatus\n                          }\n         MIN-ACCESS read-only\n
      \        DESCRIPTION\n            \"Write access is not required, and only one
      of the six\n            enumerated values for the RowStatus textual convention\n
      \           need be supported, specifically: active(1).\"\n      ::= {tn3270eRtCompliances
      1 }\n  -- Group definitions\n  tn3270eRtGroup         OBJECT-GROUP\n      OBJECTS
      {\n          tn3270eRtCollCtlType,\n          tn3270eRtCollCtlSPeriod,\n          tn3270eRtCollCtlSPMult,\n
      \         tn3270eRtCollCtlThreshHigh,\n          tn3270eRtCollCtlThreshLow,\n
      \         tn3270eRtCollCtlIdleCount,\n          tn3270eRtCollCtlBucketBndry1,\n
      \         tn3270eRtCollCtlBucketBndry2,\n          tn3270eRtCollCtlBucketBndry3,\n
      \         tn3270eRtCollCtlBucketBndry4,\n          tn3270eRtCollCtlRowStatus,\n
      \         tn3270eRtDataDiscontinuityTime,\n          tn3270eRtDataAvgRt,\n          tn3270eRtDataAvgIpRt,\n
      \         tn3270eRtDataAvgCountTrans,\n          tn3270eRtDataIntTimeStamp,\n
      \         tn3270eRtDataTotalRts,\n          tn3270eRtDataTotalIpRts,\n          tn3270eRtDataCountTrans,\n
      \         tn3270eRtDataCountDrs,\n          tn3270eRtDataElapsRndTrpSq,\n          tn3270eRtDataElapsIpRtSq,\n
      \         tn3270eRtDataBucket1Rts,\n          tn3270eRtDataBucket2Rts,\n          tn3270eRtDataBucket3Rts,\n
      \         tn3270eRtDataBucket4Rts,\n          tn3270eRtDataBucket5Rts,\n          tn3270eRtDataRtMethod,\n
      \         tn3270eRtSpinLock }\n      STATUS  current\n      DESCRIPTION\n        \"This
      group is mandatory for all implementations that\n        support the TN3270E-RT-MIB.
      \"\n      ::= { tn3270eRtGroups 1 }\n  tn3270eRtNotGroup         NOTIFICATION-GROUP\n
      \     NOTIFICATIONS {\n          tn3270eRtExceeded,\n          tn3270eRtOkay,\n
      \         tn3270eRtCollStart,\n          tn3270eRtCollEnd\n       }\n      STATUS
      \ current\n      DESCRIPTION\n        \"The notifications that must be supported
      when the\n        TN3270E-RT-MIB is implemented. \"\n      ::= { tn3270eRtGroups
      2 }\n  END\n"
    title: 5.0  Definitions
  - contents:
    - "6.0  Security Considerations\n   Certain management information defined in
      this MIB may be considered\n   sensitive in some network environments.  Therefore,
      authentication of\n   received SNMP requests and controlled access to management\n
      \  information SHOULD be employed in such environments.  An\n   authentication
      protocol is defined in [12].  A protocol for access\n   control is defined in
      [15].\n   Several objects in this MIB allow write access or provide for row\n
      \  creation.  Allowing this support in a non-secure environment can have\n   a
      negative effect on network operations.  It is RECOMMENDED that\n   implementers
      seriously consider whether set operations or row\n   creation SHOULD be allowed
      without providing, at a minimum,\n   authentication of request origin.  It is
      RECOMMENDED that without\n   such support that the following objects be implemented
      as read-only:\n   o   tn3270eRtCollCtlType\n   o   tn3270eRtCollCtlSPeriod\n
      \  o   tn3270eRtCollCtlSPMult\n   o   tn3270eRtCollCtlThreshHigh\n   o   tn3270eRtCollCtlThreshLow\n
      \  o   tn3270eRtCollCtlIdleCount\n   o   tn3270eRtCollCtlBucketBndry1\n   o
      \  tn3270eRtCollCtlBucketBndry2\n   o   tn3270eRtCollCtlBucketBndry3\n   o   tn3270eRtCollCtlBucketBndry4\n
      \  o   tn3270eRtCollCtlRowStatus\n   The administrative method to use to create
      and manage the\n   tn3270eRtCollCtlTable when SET support is not allowed is
      outside of\n   the scope of this memo.\n"
    title: 6.0  Security Considerations
  - contents:
    - "7.0  Intellectual Property\n   The IETF takes no position regarding the validity
      or scope of any\n   intellectual property or other rights that might be claimed
      to\n   pertain to the implementation or use of the technology described in\n
      \  this document or the extent to which any license under such rights\n   might
      or might not be available; neither does it represent that it\n   has made any
      effort to identify any such rights.  Information on the\n   IETF's procedures
      with respect to rights in standards-track and\n   standards-related documentation
      can be found in BCP-11.  Copies of\n   claims of rights made available for publication
      and any assurances of\n   licenses to be made available, or the result of an
      attempt made to\n   obtain a general license or permission for the use of such\n
      \  proprietary rights by implementers or users of this specification can\n   be
      obtained from the IETF Secretariat.\n   The IETF invites any interested party
      to bring to its attention any\n   copyrights, patents or patent applications,
      or other proprietary\n   rights which may cover technology that may be required
      to practice\n   this standard.  Please address the information to the IETF Executive\n
      \  Director.\n"
    title: 7.0  Intellectual Property
  - contents:
    - "8.0  Acknowledgments\n   This document is a product of the TN3270E Working
      Group.  Special\n   thanks are due to Derek Bolton and Michael Boe of Cisco
      Systems for\n   their numerous comments and suggestions for improving the structure\n
      \  of this MIB.  Thanks also to Randy Presuhn of BMC Software for his\n   valuable
      review comments on several versions of the document.\n"
    title: 8.0  Acknowledgments
  - contents:
    - "9.0  References\n   [1]  Harrington D., Presuhn, R. and B. Wijnen, \"An Architecture
      for\n        Describing SNMP Management Frameworks\", RFC 2271, January 1998.\n
      \  [2]  Rose, M. and K. McCloghrie, \"Structure and Identification of\n        Management
      Information for TCP/IP-based Internets\", STD 16, RFC\n        1155, May 1990.\n
      \  [3]  Rose, M. and K. McCloghrie, \"Concise MIB Definitions\", STD 16,\n        RFC
      1212, March 1991.\n   [4]  Rose, M., \"A Convention for Defining Traps for use
      with the\n        SNMP\", RFC 1215, March 1991.\n   [5]  Case, J., McCloghrie,
      K., Rose, M. and S. Waldbusser, \"Structure\n        of Management Information
      for Version 2 of the Simple Network\n        Management Protocol (SNMPv2)\",
      RFC 1902, January 1996.\n   [6]  Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,
      \"Textual\n        Conventions for Version 2 of the Simple Network Management\n
      \       Protocol (SNMPv2)\", RFC 1903, January 1996.\n   [7]  Case, J., McCloghrie,
      K., Rose, M. and S. Waldbusser,\n        \"Conformance Statements for Version
      2 of the Simple Network\n        Management Protocol (SNMPv2)\", RFC 1904, January
      1996.\n   [8]  Case, J., Fedor, M., Schoffstall, M. and J. Davin, \"Simple\n
      \       Network Management Protocol\", STD 15, RFC 1157, May 1990.\n   [9]  Case,
      J., McCloghrie, K., Rose, M. and S. Waldbusser,\n        \"Introduction to Community-based
      SNMPv2\", RFC 1901, January\n        1996.\n   [10] Case, J., McCloghrie, K.,
      Rose, M. and S. Waldbusser, \"Transport\n        Mappings for Version 2 of the
      Simple Network Management Protocol\n        (SNMPv2)\", RFC 1906, January 1996.\n
      \  [11] Case, J., Harrington D., Presuhn R. and B. Wijnen, \"Message\n        Processing
      and Dispatching for the Simple Network Management\n        Protocol (SNMP)\",
      RFC 2272, January 1998.\n   [12] Blumenthal, U. and B. Wijnen, \"User-based
      Security Model (USM)\n        for version 3 of the Simple Network Management
      Protocol\n        (SNMPv3)\", RFC 2274, January 1998.\n   [13] Case, J., McCloghrie,
      K., Rose, M. and S. Waldbusser, \"Protocol\n        Operations for Version 2
      of the Simple Network Management\n        Protocol (SNMPv2)\", RFC 1905, January
      1996.\n   [14] Levi, D., Meyer, P. and B. Stewart, \"SNMPv3 Applications\",
      RFC\n        2273, January 1998.\n   [15] Wijnen, B., Presuhn, R. and K. McCloghrie,
      \"View-based Access\n        Control Model (VACM) for the Simple Network Management
      Protocol\n        (SNMP)\", RFC 2275, January 1998.\n   [16] Postel, J. and
      J. Reynolds, \"Telnet Protocol Specification\", STD\n        8, RFC 854, May
      1983.\n   [17] Postel, J. and J. Reynolds, \"Telnet Timing Mark Option\", STD
      31,\n        RFC 860, May 1983.\n   [18] Rekhter, J., \"Telnet 3270 Regime Option\",
      RFC 1041, January\n        1988.\n   [19] Kelly, B., \"TN3270 Enhancements\",
      RFC 2355, June 1998.\n   [20] White, K. and R. Moore, \"Base Definitions of
      Managed Objects for\n        TN3270E Using SMIv2\", RFC 2561, April 1999.\n
      \  [21] IBM, International Technical Support Centers, \"Response Time\n        Data
      Gathering\", GG24-3212-01, November 1990.\n   [22] Hovey, R. and S. Bradner,
      \"The Organizations Involved in the\n        IETF Standards Process\", BCP 11,
      RFC 2028, October 1996.\n   [23] Bradner, S., \"Key words for use in RFCs to
      Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n"
    title: 9.0  References
  - contents:
    - "10.0  Authors' Addresses\n   Kenneth D. White\n   Dept. BRQA/Bldg. 501/G114\n
      \  IBM Corporation\n   P.O.Box 12195\n   3039 Cornwallis\n   Research Triangle
      Park, NC 27709, USA\n   EMail: kennethw@vnet.ibm.com\n   Robert Moore\n   Dept.
      BRQA/Bldg. 501/G114\n   IBM Corporation\n   P.O.Box 12195\n   3039 Cornwallis\n
      \  Research Triangle Park, NC 27709, USA\n   Phone: +1-919-254-7507\n   EMail:
      remoore@us.ibm.com\n"
    title: 10.0  Authors' Addresses
  - contents:
    - "11.0  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).
      \ All Rights Reserved.\n   This document and translations of it may be copied
      and furnished to\n   others, and derivative works that comment on or otherwise
      explain it\n   or assist in its implementation may be prepared, copied, published\n
      \  and distributed, in whole or in part, without restriction of any\n   kind,
      provided that the above copyright notice and this paragraph are\n   included
      on all such copies and derivative works.  However, this\n   document itself
      may not be modified in any way, such as by removing\n   the copyright notice
      or references to the Internet Society or other\n   Internet organizations, except
      as needed for the purpose of\n   developing Internet standards in which case
      the procedures for\n   copyrights defined in the Internet Standards process
      must be\n   followed, or as required to translate it into languages other than\n
      \  English.\n   The limited permissions granted above are perpetual and will
      not be\n   revoked by the Internet Society or its successors or assigns.\n   This
      document and the information contained herein is provided on an\n   \"AS IS\"
      basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS
      ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY
      THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY
      IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
    title: 11.0  Full Copyright Statement
  title: 1.0  Introduction
