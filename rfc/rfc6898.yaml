- contents:
  - "           Link Management Protocol Behavior Negotiation and\n                      Configuration
    Modifications\n"
  title: __initial_text__
- contents:
  - "Abstract\n   The Link Management Protocol (LMP) is used to coordinate the\n   properties,
    use, and faults of data links in networks controlled by\n   Generalized Multiprotocol
    Label Switching (GMPLS).  This document\n   defines an extension to LMP to negotiate
    capabilities and indicate\n   support for LMP extensions.  The defined extension
    is compatible with\n   non-supporting implementations.\n   This document updates
    RFC 4204, RFC 4207, RFC 4209, and RFC 5818.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6898.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Conventions Used in This Document ..........................4\n   2.
    LMP Message Modifications .......................................4\n      2.1.
    Modified Message Formats ...................................4\n      2.2. Processing
    .................................................5\n   3. LMP Behavior Negotiation
    ........................................6\n      3.1. BehaviorConfig C-Type Format
    ...............................6\n      3.2. Processing .................................................7\n
    \  4. Backward Compatibility ..........................................7\n   5.
    Security Considerations .........................................8\n   6. IANA
    Considerations .............................................9\n      6.1. New
    LMP Class Type .........................................9\n      6.2. New Capabilities
    Registry ..................................9\n   7. Normative References ...........................................10\n
    \  8. Acknowledgments ................................................10\n   9.
    Contributors ...................................................10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Link Management Protocol (LMP) [RFC4204] has been successfully\n
    \  deployed in networks controlled by Generalized Multiprotocol Label\n   Switching
    (GMPLS).\n   New LMP behaviors and protocol extensions have been introduced in
    a\n   number of IETF documents, as set out later in this section.  It is\n   likely
    that future extensions will be made to support additional\n   functions.\n   In
    a network, if one LMP-capable node supports a new behavior or\n   protocol extension
    but its adjacent node does not, it is beneficial\n   to have a protocol mechanism
    to discover the capabilities of peer\n   nodes so that the right protocol extensions
    can be selected and the\n   correct features can be enabled.  There are no such
    procedures\n   defined in the base LMP specification [RFC4204]. [RFC4209] defined
    a\n   specific mechanism to identify support for the functions specified in\n
    \  that document.  This document defines an LMP extension to support the\n   identification
    of supported LMP functions in a generic fashion, as\n   well as how a node supporting
    these extensions would communicate with\n   legacy nodes.\n   In [RFC4204], the
    basic behaviors have been defined around the use of\n   the standard LMP messages,
    which include Config, Hello, Verify, Test,\n   LinkSummary, and ChannelStatus.
    \ Per [RFC4204], these behaviors MUST\n   be supported when LMP is implemented,
    and the message types from 1 to\n   20 have been assigned by IANA for these messages.
    \ Support for all\n   functions required by [RFC4204] is assumed by this document.\n
    \  In [RFC4207], the SONET/SDH technology-specific behavior and\n   information
    for LMP is defined.  The Trace behavior is added to LMP,\n   and the message types
    from 21 to 31 have been assigned by IANA for\n   the messages that provide the
    Trace function.\n   In [RFC4209], extensions to LMP are defined to allow it to
    be used\n   between a peer node and an adjacent Optical Line System (OLS).  The\n
    \  LMP object class type and subobject class name have been extended to\n   support
    Dense Wavelength Division Multiplexing (DWDM) behavior.\n   In [RFC5818], the
    data channel consistency check behavior is defined,\n   and the message types
    from 32 to 34 have been assigned by IANA for\n   messages that provide this behavior.\n
    \  It is likely that future extensions to LMP for other functions or\n   technologies
    will require the definition of further LMP messages.\n   This document describes
    an LMP extension, referred to as behavior\n   negotiation, that enables the nodes
    at the ends of a link to identify\n   the LMP messages and functions supported
    by the adjacent node.  The\n   extension makes use of a new CONFIG object.  The
    use of this new\n   object does not preclude the use of existing or yet to be
    defined\n   CONFIG objects.\n   This document also modifies the format of messages
    that carry the\n   CONFIG object to allow for multiple objects.  Multiple CONFIG
    objects\n   allow behavior negotiation concurrent with existing usage of the\n
    \  CONFIG object, i.e., HelloConfig C-Type defined in [RFC4204] and\n   LMP-WDM_CONFIG
    C-Type defined in [RFC4209].  This document modifies\n   the ConfigAck message
    to include CONFIG objects so that acceptable\n   parameters are explicitly identified.
    \ It also describes how a node\n   that supports the extensions defined in this
    document interacts with\n   a legacy LMP-capable node.\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in [RFC2119].\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  LMP Message Modifications\n   LMP Config, ConfigNack, and ConfigAck messages
    are modified by this\n   document to allow for the inclusion of multiple CONFIG
    objects.  The\n   Config and ConfigNack messages were only defined to carry one
    CONFIG\n   object in [RFC4204].  The ConfigAck message, which was defined\n   without
    carrying any CONFIG objects in [RFC4204], is modified to\n   enable explicit identification
    of negotiated configuration\n   parameters.  The inclusion of CONFIG objects in
    ConfigAck messages is\n   triggered by the use of the BehaviorConfig object (defined
    below) in\n   a received Config message.\n   The message formats in the sections
    that follow use Backus-Naur Form\n   (BNF) encoding as defined in [RFC5511].\n"
  - contents:
    - "2.1.  Modified Message Formats\n   The format of the Config message as updated
      by this document is as\n   follows:\n    <Config Message> ::= <Common Header>
      <LOCAL_CCID> <MESSAGE_ID>\n                         <LOCAL_NODE_ID> <CONFIG>
      [ <CONFIG> ... ]\n   The format of the ConfigAck message as updated by this
      document is as\n   follows:\n    <ConfigAck Message> ::= <Common Header> <LOCAL_CCID>
      <LOCAL_NODE_ID>\n                            <REMOTE_CCID> <MESSAGE_ID_ACK>\n
      \                           <REMOTE_NODE_ID>[ <CONFIG> ... ]\n   The format
      of the ConfigNack message as updated by this document is\n   as follows:\n    <ConfigNack
      Message> ::= <Common Header> <LOCAL_CCID>\n                             <LOCAL_NODE_ID>
      \ <REMOTE_CCID>\n                             <MESSAGE_ID_ACK> <REMOTE_NODE_ID>\n
      \                            <CONFIG> [ <CONFIG> ... ]\n"
    title: 2.1.  Modified Message Formats
  - contents:
    - "2.2.  Processing\n   Nodes that support the extensions defined in this document
      MAY\n   include multiple CONFIG objects when sending a Config, ConfigAck, and\n
      \  ConfigNack message.  A maximum of a single object of any particular\n   C-type
      SHALL be included.  A node that receives a message with\n   multiple CONFIG
      objects of the same C-type SHALL process the first\n   object of a particular
      C-type and ignore any subsequent CONFIG\n   objects of the same C-type.  Unless
      specified as part of the CONFIG\n   object definition, ordering of CONFIG objects
      with different C-type\n   values is not significant.\n   Nodes that support
      the extensions defined in this document MUST\n   include a BehaviorConfig type
      object when sending a Config message to\n   a neighbor whose support for the
      extensions is either known or\n   unknown.  When the neighbor is known to not
      support the extensions,\n   the object MUST NOT be sent.  Inclusion of other
      CONFIG objects in a\n   Config message is at the discretion of the message sender
      and is\n   based on the rules defined as part of CONFIG object definition.\n
      \  Nodes MAY include HelloConfig, LMP-WDM_CONFIG, BehaviorConfig object\n   types
      in a single message.\n   Inclusion of multiple CONFIG objects in a ConfigNack
      message is based\n   on the processing of a received Config message.  Per [RFC4204],\n
      \  \"Parameters where agreement was reached MUST NOT be included in the\n   ConfigNack
      Message.\"  As such, a ConfigNack message MUST NOT include\n   CONFIG objects
      that are acceptable and MUST include any CONFIG\n   objects which are not acceptable.
      \ When a CONFIG object is included\n   in a ConfigNack message, per [RFC4204],
      the object is to include\n   \"acceptable alternate values for negotiable parameters\".\n
      \  When sending a ConfigAck message, nodes supporting the extensions\n   defined
      in this document MUST include all CONFIG objects received in\n   the corresponding
      Config message when that message includes a CONFIG\n   object of type BehaviorConfig.\n"
    title: 2.2.  Processing
  title: 2.  LMP Message Modifications
- contents:
  - "3.  LMP Behavior Negotiation\n   The Config message is used in the control channel
    negotiation phase\n   of LMP [RFC4204].  The LMP behavior negotiation procedure
    is defined\n   in this document as an addition to this phase.\n   The Config message
    is defined in Section 12.3.1 of [RFC4204] and\n   carries the CONFIG object (class
    name 6) as defined in Section 13.6\n   of [RFC4204].\n   Two class types have
    been defined:\n   - C-Type = 1, HelloConfig, defined in [RFC4204]\n   - C-Type
    = 2, LMP-WDM_CONFIG, defined in [RFC4209]\n   This document defines a third C-Type
    to report and negotiate LMP\n   mechanisms and behaviors.  Its usage indicates
    support for the\n   extensions defined in this document.\n"
  - contents:
    - "3.1.  BehaviorConfig C-Type Format\n   Class = 6\n   - C-Type = 3, BehaviorConfig\n
      \      0                   1                   2                   3\n       0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |S|D|C|                   Must Be Zero (MBZ)                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Flags:\n     S: 1 bit\n      This bit indicates support for the Trace behavior
      of SONET/SDH\n      technology-specific defined in [RFC4207].\n     D: 1 bit\n
      \     This bit indicates support for the DWDM behavior defined in\n      [RFC4209].\n
      \    C: 1 bit\n      This bit indicates support for the data channel consistency
      check\n      behavior defined in [RFC5818].\n     Must Be Zero (MBZ): Variable
      length\n      The remaining bits in the flags field MUST be set to zero (0).\n
      \     This field MUST be sized to ensure 32-bit alignment of the object.\n      Other
      bits may be defined in future documents, in which case the\n      number of
      bits in the MBZ field is expected to change.\n"
    title: 3.1.  BehaviorConfig C-Type Format
  - contents:
    - "3.2.  Processing\n   The inclusion of a BehaviorConfig type object in a message
      is\n   discussed above in Section 2.2.\n   When sending a BehaviorConfig type
      object, the N-bit (negotiable) in\n   the LMP object header MUST be set (N=1)
      in the LMP object header.\n   When sending a BehaviorConfig type object in Config
      and ConfigNack\n   messages, the flags field SHOULD be set based on the supported\n
      \  capabilities of the sending node.  When sending a ConfigAck message,\n   the
      flags field MUST be set to the value received in the\n   corresponding Config
      message.\n   When receiving a BehaviorConfig type object, the node compares
      the\n   flags field against its capacities.  Any bit set in the MBZ portion\n
      \  of the flags field MUST be interpreted as unacceptable.  Processing\n   related
      to unacceptable values in CONFIG objects is defined in\n   [RFC4204] and is
      not modified by this document.\n"
    title: 3.2.  Processing
  title: 3.  LMP Behavior Negotiation
- contents:
  - "4.  Backward Compatibility\n   The required use of the BehaviorConfig type CONFIG
    object enables\n   nodes that support the extensions defined in this document
    to\n   explicitly identify when a neighboring node does not.  When a non-\n   supporting
    node receives a Config message with the BehaviorConfig\n   type CONFIG object
    or multiple CONFIG objects, its behavior is to be\n   one of the following behaviors:\n
    \  a) Reject the Config message because of the unknown BehaviorConfig\n      object
    type and send a ConfigNack message which includes the\n      unsupported C-type.\n
    \  b) Reject the message because of multiple CONFIG objects and send a\n      ConfigNack
    message which includes all but one of the CONFIG\n      objects.\n   c) Silently
    ignore the one or more of the CONFIG object, and respond\n      with a ConfigAck
    message that does not include any CONFIG objects.\n   d) Treat the message as
    malformed, and discard it without any\n      response.\n   Behaviors (a) and (b)
    result in ConfigNack messages with a\n   BehaviorConfig type object whose contents
    are identical to what was\n   sent in the Config message.  Behavior (c) results
    in a ConfigAck\n   message without a BehaviorConfig type CONFIG object.  In each
    of\n   these cases, the node SHOULD explicitly identify that the LMP\n   neighbor
    does not support the extensions defined in this document.\n   Behavior (d) results
    in no response at all.  When the node reaches\n   the \"retry limit\", defined
    in [RFC4204], the node SHOULD infer that\n   the LMP neighbor does not support
    the extensions defined in this\n   document.\n   Once a node identifies a neighbor
    as not supporting the extensions\n   defined in this document, the node SHOULD
    follow previously defined\n   Config message usage.\n"
  title: 4.  Backward Compatibility
- contents:
  - "5.  Security Considerations\n   [RFC4204] describes how LMP messages between
    peers can be secured,\n   and these measures are equally applicable to messages
    carrying the\n   new CONFIG object defined in this document.\n   Alone, the procedures
    described in this document do not constitute a\n   security risk, since they do
    not cause any change in network state.\n   It would be possible, if the messages
    were intercepted or spoofed to\n   cause bogus alerts in the management plane,
    or to cause LMP peers to\n   consider that they could or could not operate protocol
    extensions,\n   and so the use of the LMP security measures are RECOMMENDED.\n
    \  Note, however, that [RFC4204] references for security have been\n   updated
    with [RFC4301], and the current reference for IKEv2 is\n   [RFC5996].\n"
  title: 5.  Security Considerations
- contents:
  - '6.  IANA Considerations

    '
  - contents:
    - "6.1.  New LMP Class Type\n   IANA maintains the \"Link Management Protocol
      (LMP) Parameters\"\n   registry, which has a subregistry called \"LMP Object
      Class name space\n   and Class type (C-Type)\".\n   IANA has made an assignment
      from this registry as follows:\n      6   CONFIG                              [RFC4204]\n
      \  CONFIG Object Class type name space:\n      C-Type        Description            Reference\n
      \     ------------  ---------------------  ---------\n      3             BehaviorConfig
      \        RFC 6898\n"
    title: 6.1.  New LMP Class Type
  - contents:
    - "6.2.  New Capabilities Registry\n   IANA has created a new subregistry of the
      \"Link Management Protocol\n   (LMP) Parameters\" registry to track the Behavior
      Configuration bits\n   defined in Section 2 of this document.  This registry
      is called \"LMP\n   Behavior Configuration Flags\".\n   Allocations from this
      registry are by Standards Action.\n   Bits in this registry are numbered from
      zero as the most significant\n   bit (transmitted first).  The number of bits
      that can be present is\n   limited by the length field of the CONFIG object,
      which gives rise to\n   (255 x 32)-8 = 8152.  IANA is strongly recommended to
      allocate new\n   bits with the lowest available unused number.\n   The registry
      is initially populated as follows:\n      Bit    | Bit  | Meaning                                |
      Reference\n      Number | Name |                                        |\n
      \     -------+------+----------------------------------------+----------\n        0
      \   |   S  | SONET/SDH Test support                 | RFC 6898\n        1    |
      \  D  | DWDM support                           | RFC 6898\n        2    |   C
      \ | Data Channel consistency check support | RFC 6898\n"
    title: 6.2.  New Capabilities Registry
  title: 6.  IANA Considerations
- contents:
  - "7.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs
    to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
    \  [RFC4301]  Kent, S. and K. Seo, \"Security Architecture for the\n              Internet
    Protocol\", RFC 4301, December 2005.\n   [RFC5996]  Kaufman, C., Hoffman, P.,
    Nir, Y., and P. Eronen,\n              \"Internet Key Exchange Protocol Version
    2 (IKEv2)\", RFC\n              5996, September 2010.\n   [RFC4204]  Lang, J.,
    Ed., \"Link Management Protocol (LMP)\", RFC 4204,\n              October 2005.\n
    \  [RFC4207]  Lang, J. and D. Papadimitriou, \"Synchronous Optical\n              Network
    (SONET)/Synchronous Digital Hierarchy (SDH)\n              Encoding for Link Management
    Protocol (LMP) Test\n              Messages\", RFC 4207, October 2005.\n   [RFC4209]
    \ Fredette, A., Ed., and J. Lang, Ed., \"Link Management\n              Protocol
    (LMP) for Dense Wavelength Division Multiplexing\n              (DWDM) Optical
    Line Systems\", RFC 4209, October 2005.\n   [RFC5818]  Li, D., Xu, H., Bardalai,
    S., Meuric, J., and D. Caviglia,\n              \"Data Channel Status Confirmation
    Extensions for the Link\n              Management Protocol\", RFC 5818, April
    2010.\n   [RFC5511]  Farrel, A., \"Routing Backus-Naur Form (RBNF): A Syntax\n
    \             Used to Form Encoding Rules in Various Routing Protocol\n              Specifications\",
    RFC 5511, April 2009.\n"
  title: 7.  Normative References
- contents:
  - "8.  Acknowledgments\n   Thanks to Adrian Farrel and Richard Graveman for their
    useful\n   comments.\n"
  title: 8.  Acknowledgments
- contents:
  - "9.  Contributors\n   Diego Caviglia\n   Ericsson\n   Via E. Melen, 77\n   Genova
    - Erzelli\n   Italy\n   Phone: +39 010 600 3736\n   EMail: diego.caviglia@ericsson.com\n"
  title: 9.  Contributors
- contents:
  - "Authors' Addresses\n   Dan Li\n   Huawei Technologies\n   F3-5-B R&D Center,
    Huawei Industrial Base,\n   Shenzhen 518129\n   China\n   Phone: +86 755-289-70230\n
    \  EMail: huawei.danli@huawei.com\n   Daniele Ceccarelli\n   Ericsson\n   Via
    E. Melen, 77\n   Genova - Erzelli\n   Italy\n   EMail: daniele.ceccarelli@ericsson.com\n
    \  Lou Berger\n   LabN Consulting, L.L.C.\n   EMail: lberger@labn.net\n"
  title: Authors' Addresses
