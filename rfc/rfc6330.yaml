- contents:
  - '      RaptorQ Forward Error Correction Scheme for Object Delivery

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes a Fully-Specified Forward Error Correction\n
    \  (FEC) scheme, corresponding to FEC Encoding ID 6, for the RaptorQ FEC\n   code
    and its application to reliable delivery of data objects.\n   RaptorQ codes are
    a new family of codes that provide superior\n   flexibility, support for larger
    source block sizes, and better coding\n   efficiency than Raptor codes in RFC
    5053.  RaptorQ is also a fountain\n   code, i.e., as many encoding symbols as
    needed can be generated on\n   the fly by the encoder from the source symbols
    of a source block of\n   data.  The decoder is able to recover the source block
    from almost\n   any set of encoding symbols of sufficient cardinality -- in most\n
    \  cases, a set of cardinality equal to the number of source symbols is\n   sufficient;
    in rare cases, a set of cardinality slightly more than\n   the number of source
    symbols is required.\n   The RaptorQ code described here is a systematic code,
    meaning that\n   all the source symbols are among the encoding symbols that can
    be\n   generated.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6330.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  4\n   2.  Requirements Notation  . . . . . . . . . . . . . . . .
    . . . .  4\n   3.  Formats and Codes  . . . . . . . . . . . . . . . . . . . .
    . .  5\n     3.1.  Introduction . . . . . . . . . . . . . . . . . . . . . . .
    \ 5\n     3.2.  FEC Payload IDs  . . . . . . . . . . . . . . . . . . . . .  5\n
    \    3.3.  FEC Object Transmission Information  . . . . . . . . . . .  5\n       3.3.1.
    \ Mandatory  . . . . . . . . . . . . . . . . . . . . . .  5\n       3.3.2.  Common
    . . . . . . . . . . . . . . . . . . . . . . . .  5\n       3.3.3.  Scheme-Specific
    \ . . . . . . . . . . . . . . . . . . .  6\n   4.  Procedures . . . . . . . .
    . . . . . . . . . . . . . . . . . .  7\n     4.1.  Introduction . . . . . . .
    . . . . . . . . . . . . . . . .  7\n     4.2.  Content Delivery Protocol Requirements
    . . . . . . . . . .  7\n     4.3.  Example Parameter Derivation Algorithm . .
    . . . . . . . .  7\n     4.4.  Object Delivery  . . . . . . . . . . . . . . .
    . . . . . .  9\n       4.4.1.  Source Block Construction  . . . . . . . . . .
    . . . .  9\n       4.4.2.  Encoding Packet Construction . . . . . . . . . . .
    . . 11\n       4.4.3.  Example Receiver Recovery Strategies . . . . . . . . .
    12\n   5.  RaptorQ FEC Code Specification . . . . . . . . . . . . . . . . 12\n
    \    5.1.  Background . . . . . . . . . . . . . . . . . . . . . . . . 12\n       5.1.1.
    \ Definitions  . . . . . . . . . . . . . . . . . . . . . 13\n       5.1.2.  Symbols
    \ . . . . . . . . . . . . . . . . . . . . . . . 14\n     5.2.  Overview . . .
    . . . . . . . . . . . . . . . . . . . . . . 17\n     5.3.  Systematic RaptorQ
    Encoder . . . . . . . . . . . . . . . . 18\n       5.3.1.  Introduction . . .
    . . . . . . . . . . . . . . . . . . 18\n       5.3.2.  Encoding Overview  . .
    . . . . . . . . . . . . . . . . 19\n       5.3.3.  First Encoding Step: Intermediate
    Symbol Generation  . 21\n       5.3.4.  Second Encoding Step: Encoding . . . .
    . . . . . . . . 27\n       5.3.5.  Generators . . . . . . . . . . . . . . . .
    . . . . . . 27\n     5.4.  Example FEC Decoder  . . . . . . . . . . . . . . .
    . . . . 30\n       5.4.1.  General  . . . . . . . . . . . . . . . . . . . . .
    . . 30\n       5.4.2.  Decoding an Extended Source Block  . . . . . . . . . .
    31\n     5.5.  Random Numbers . . . . . . . . . . . . . . . . . . . . . . 36\n
    \      5.5.1.  The Table V0 . . . . . . . . . . . . . . . . . . . . . 36\n       5.5.2.
    \ The Table V1 . . . . . . . . . . . . . . . . . . . . . 37\n       5.5.3.  The
    Table V2 . . . . . . . . . . . . . . . . . . . . . 38\n       5.5.4.  The Table
    V3 . . . . . . . . . . . . . . . . . . . . . 40\n     5.6.  Systematic Indices
    and Other Parameters  . . . . . . . . . 41\n     5.7.  Operating with Octets,
    Symbols, and Matrices . . . . . . . 62\n       5.7.1.  General  . . . . . . .
    . . . . . . . . . . . . . . . . 62\n       5.7.2.  Arithmetic Operations on Octets
    \ . . . . . . . . . . . 62\n       5.7.3.  The Table OCT_EXP  . . . . . . . .
    . . . . . . . . . . 63\n       5.7.4.  The Table OCT_LOG  . . . . . . . . . .
    . . . . . . . . 64\n       5.7.5.  Operations on Symbols  . . . . . . . . . .
    . . . . . . 65\n       5.7.6.  Operations on Matrices . . . . . . . . . . . .
    . . . . 65\n     5.8.  Requirements for a Compliant Decoder . . . . . . . . .
    . . 65\n   6.  Security Considerations  . . . . . . . . . . . . . . . . . . .
    66\n   7.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 67\n
    \  8.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 67\n   9.
    \ References . . . . . . . . . . . . . . . . . . . . . . . . . . 67\n     9.1.
    \ Normative References . . . . . . . . . . . . . . . . . . . 67\n     9.2.  Informative
    References . . . . . . . . . . . . . . . . . . 68\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies an FEC scheme for the RaptorQ forward
    error\n   correction code for object delivery applications.  The concept of an\n
    \  FEC scheme is defined in RFC 5052 [RFC5052], and this document\n   follows
    the format prescribed there and uses the terminology of that\n   document.  The
    RaptorQ code described herein is a next generation of\n   the Raptor code described
    in RFC 5053 [RFC5053].  The RaptorQ code\n   provides superior reliability, better
    coding efficiency, and support\n   for larger source block sizes than the Raptor
    code of RFC 5053\n   [RFC5053].  These improvements simplify the usage of the
    RaptorQ code\n   in an object delivery Content Delivery Protocol compared to RFC
    5053\n   RFC 5053 [RFC5053].  A detailed mathematical design and analysis of\n
    \  the RaptorQ code together with extensive simulation results are\n   provided
    in [RaptorCodes].\n   The RaptorQ FEC scheme is a Fully-Specified FEC scheme corresponding\n
    \  to FEC Encoding ID 6.\n   RaptorQ is a fountain code, i.e., as many encoding
    symbols as needed\n   can be generated on the fly by the encoder from the source
    symbols of\n   a block.  The decoder is able to recover the source block from
    almost\n   any set of encoding symbols of cardinality only slightly larger than\n
    \  the number of source symbols.\n   The code described in this document is a
    systematic code; that is,\n   the original unmodified source symbols, as well
    as a number of repair\n   symbols, can be sent from sender to receiver.  For more
    background on\n   the use of Forward Error Correction codes in reliable multicast,
    see\n   [RFC3453].\n"
  title: 1.  Introduction
- contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Requirements Notation
- contents:
  - '3.  Formats and Codes

    '
  - contents:
    - "3.1.  Introduction\n   The octet order of all fields is network byte order,
      i.e., big-\n   endian.\n"
    title: 3.1.  Introduction
  - contents:
    - "3.2.  FEC Payload IDs\n   The FEC Payload ID MUST be a 4-octet field defined
      as follows:\n        0                   1                   2                   3\n
      \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      |     SBN       |               Encoding Symbol ID              |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                     Figure 1: FEC Payload ID Format\n   o  Source Block Number
      (SBN): 8-bit unsigned integer.  A non-negative\n      integer identifier for
      the source block that the encoding symbols\n      within the packet relate to.\n
      \  o  Encoding Symbol ID (ESI): 24-bit unsigned integer.  A non-negative\n      integer
      identifier for the encoding symbols within the packet.\n   The interpretation
      of the Source Block Number and Encoding Symbol\n   Identifier is defined in
      Section 4.\n"
    title: 3.2.  FEC Payload IDs
  - contents:
    - '3.3.  FEC Object Transmission Information

      '
    - contents:
      - "3.3.1.  Mandatory\n   The value of the FEC Encoding ID MUST be 6, as assigned
        by IANA (see\n   Section 7).\n"
      title: 3.3.1.  Mandatory
    - contents:
      - "3.3.2.  Common\n   The Common FEC Object Transmission Information elements
        used by this\n   FEC scheme are:\n   o  Transfer Length (F): 40-bit unsigned
        integer.  A non-negative\n      integer that is at most 946270874880.  This
        is the transfer length\n      of the object in units of octets.\n   o  Symbol
        Size (T): 16-bit unsigned integer.  A positive integer that\n      is less
        than 2^^16.  This is the size of a symbol in units of\n      octets.\n   The
        encoded Common FEC Object Transmission Information (OTI) format\n   is shown
        in Figure 2.\n       0                   1                   2                   3\n
        \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                      Transfer Length (F)                      |\n
        \     +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |               |    Reserved   |           Symbol Size (T)     |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \         Figure 2: Encoded Common FEC OTI for RaptorQ FEC Scheme\n      NOTE:
        The limit of 946270874880 on the transfer length is a\n      consequence of
        the limitation on the symbol size to 2^^16-1, the\n      limitation on the
        number of symbols in a source block to 56403,\n      and the limitation on
        the number of source blocks to 2^^8.\n"
      title: 3.3.2.  Common
    - contents:
      - "3.3.3.  Scheme-Specific\n   The following parameters are carried in the Scheme-Specific
        FEC\n   Object Transmission Information element for this FEC scheme:\n   o
        \ The number of source blocks (Z): 8-bit unsigned integer.\n   o  The number
        of sub-blocks (N): 16-bit unsigned integer.\n   o  A symbol alignment parameter
        (Al): 8-bit unsigned integer.\n   These parameters are all positive integers.
        \ The encoded Scheme-\n   specific Object Transmission Information is a 4-octet
        field\n   consisting of the parameters Z, N, and Al as shown in Figure 3.\n
        \       0                   1                   2                   3\n        0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |       Z       |              N                |       Al      |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Figure 3: Encoded Scheme-Specific FEC Object Transmission Information\n
        \  The encoded FEC Object Transmission Information is a 12-octet field\n   consisting
        of the concatenation of the encoded Common FEC Object\n   Transmission Information
        and the encoded Scheme-specific FEC Object\n   Transmission Information.\n
        \  These three parameters define the source block partitioning as\n   described
        in Section 4.4.1.2.\n"
      title: 3.3.3.  Scheme-Specific
    title: 3.3.  FEC Object Transmission Information
  title: 3.  Formats and Codes
- contents:
  - '4.  Procedures

    '
  - contents:
    - "4.1.  Introduction\n   For any undefined symbols or functions used in this
      section, in\n   particular the functions \"ceil\" and \"floor\", refer to Section
      5.1.\n"
    title: 4.1.  Introduction
  - contents:
    - "4.2.  Content Delivery Protocol Requirements\n   This section describes the
      information exchange between the RaptorQ\n   FEC scheme and any Content Delivery
      Protocol (CDP) that makes use of\n   the RaptorQ FEC scheme for object delivery.\n
      \  The RaptorQ encoder scheme and RaptorQ decoder scheme for object\n   delivery
      require the following information from the CDP:\n   o  F: the transfer length
      of the object, in octets\n   o  Al: the symbol alignment parameter\n   o  T:
      the symbol size in octets, which MUST be a multiple of Al\n   o  Z: the number
      of source blocks\n   o  N: the number of sub-blocks in each source block\n   The
      RaptorQ encoder scheme for object delivery additionally requires:\n   -  the
      object to be encoded, which is F octets long\n   The RaptorQ encoder scheme
      supplies the CDP with the following\n   information for each packet to be sent:\n
      \  o  Source Block Number (SBN)\n   o  Encoding Symbol ID (ESI)\n   o  Encoding
      symbol(s)\n   The CDP MUST communicate this information to the receiver.\n"
    title: 4.2.  Content Delivery Protocol Requirements
  - contents:
    - "4.3.  Example Parameter Derivation Algorithm\n   This section provides recommendations
      for the derivation of the three\n   transport parameters, T, Z, and N.  This
      recommendation is based on\n   the following input parameters:\n   o  F: the
      transfer length of the object, in octets\n   o  WS: the maximum size block that
      is decodable in working memory, in\n      octets\n   o  P': the maximum payload
      size in octets, which is assumed to be a\n      multiple of Al\n   o  Al: the
      symbol alignment parameter, in octets\n   o  SS: a parameter where the desired
      lower bound on the sub-symbol\n      size is SS*Al\n   o  K'_max: the maximum
      number of source symbols per source block.\n         Note: Section 5.1.2 defines
      K'_max to be 56403.\n   Based on the above inputs, the transport parameters
      T, Z, and N are\n   calculated as follows:\n   Let\n   o  T = P'\n   o  Kt =
      ceil(F/T)\n   o  N_max = floor(T/(SS*Al))\n   o  for all n=1, ..., N_max\n      *
      \ KL(n) is the maximum K' value in Table 2 in Section 5.6 such\n         that\n
      \           K' <= WS/(Al*(ceil(T/(Al*n))))\n   o  Z = ceil(Kt/KL(N_max))\n   o
      \ N is the minimum n=1, ..., N_max such that ceil(Kt/Z) <= KL(n)\n   It is RECOMMENDED
      that each packet contains exactly one symbol.\n   However, receivers SHALL support
      the reception of packets that\n   contain multiple symbols.\n   The value Kt
      is the total number of symbols required to represent the\n   source data of
      the object.\n   The algorithm above and that defined in Section 4.4.1.2 ensure
      that\n   the sub-symbol sizes are a multiple of the symbol alignment\n   parameter,
      Al.  This is useful because the sum operations used for\n   encoding and decoding
      are generally performed several octets at a\n   time, for example, at least
      4 octets at a time on a 32-bit processor.\n   Thus, the encoding and decoding
      can be performed faster if the sub-\n   symbol sizes are a multiple of this
      number of octets.\n   The recommended setting for the input parameter Al is
      4.\n   The parameter WS can be used to generate encoded data that can be\n   decoded
      efficiently with limited working memory at the decoder.  Note\n   that the actual
      maximum decoder memory requirement for a given value\n   of WS depends on the
      implementation, but it is possible to implement\n   decoding using working memory
      only slightly larger than WS.\n"
    title: 4.3.  Example Parameter Derivation Algorithm
  - contents:
    - '4.4.  Object Delivery

      '
    - contents:
      - '4.4.1.  Source Block Construction

        '
      - contents:
        - "4.4.1.1.  General\n   In order to apply the RaptorQ encoder to a source
          object, the object\n   may be broken into Z >= 1 blocks, known as source
          blocks.  The\n   RaptorQ encoder is applied independently to each source
          block.  Each\n   source block is identified by a unique Source Block Number
          (SBN),\n   where the first source block has SBN zero, the second has SBN
          one,\n   etc.  Each source block is divided into a number, K, of source\n
          \  symbols of size T octets each.  Each source symbol is identified by a\n
          \  unique Encoding Symbol Identifier (ESI), where the first source\n   symbol
          of a source block has ESI zero, the second has ESI one, etc.\n   Each source
          block with K source symbols is divided into N >= 1 sub-\n   blocks, which
          are small enough to be decoded in the working memory.\n   Each sub-block
          is divided into K sub-symbols of size T'.\n   Note that the value of K is
          not necessarily the same for each source\n   block of an object, and the
          value of T' may not necessarily be the\n   same for each sub-block of a
          source block.  However, the symbol size\n   T is the same for all source
          blocks of an object, and the number of\n   symbols K is the same for every
          sub-block of a source block.  Exact\n   partitioning of the object into
          source blocks and sub-blocks is\n   described in Section 4.4.1.2 below.\n"
        title: 4.4.1.1.  General
      - contents:
        - "4.4.1.2.  Source Block and Sub-Block Partitioning\n   The construction
          of source blocks and sub-blocks is determined based\n   on five input parameters
          -- F, Al, T, Z, and N -- and a function\n   Partition[].  The five input
          parameters are defined as follows:\n   o  F: the transfer length of the
          object, in octets\n   o  Al: a symbol alignment parameter, in octets\n   o
          \ T: the symbol size, in octets, which MUST be a multiple of Al\n   o  Z:
          the number of source blocks\n   o  N: the number of sub-blocks in each source
          block\n   These parameters MUST be set so that ceil(ceil(F/T)/Z) <= K'_max.\n
          \  Recommendations for derivation of these parameters are provided in\n
          \  Section 4.3.\n   The function Partition[I,J] derives parameters for partitioning
          a\n   block of size I into J approximately equal-sized blocks.  More\n   specifically,
          it partitions I into JL blocks of length IL and JS\n   blocks of length
          IS.  The output of Partition[I, J] is the sequence\n   (IL, IS, JL, JS),
          where IL = ceil(I/J), IS = floor(I/J), JL = I - IS\n   * J, and JS = J -
          JL.\n   The source object MUST be partitioned into source blocks and sub-\n
          \  blocks as follows:\n   Let\n   o  Kt = ceil(F/T),\n   o  (KL, KS, ZL,
          ZS) = Partition[Kt, Z],\n   o  (TL, TS, NL, NS) = Partition[T/Al, N].\n
          \  Then, the object MUST be partitioned into Z = ZL + ZS contiguous\n   source
          blocks, the first ZL source blocks each having KL*T octets,\n   i.e., KL
          source symbols of T octets each, and the remaining ZS source\n   blocks
          each having KS*T octets, i.e., KS source symbols of T octets\n   each.\n
          \  If Kt*T > F, then, for encoding purposes, the last symbol of the last\n
          \  source block MUST be padded at the end with Kt*T-F zero octets.\n   Next,
          each source block with K source symbols MUST be divided into N\n   = NL
          + NS contiguous sub-blocks, the first NL sub-blocks each\n   consisting
          of K contiguous sub-symbols of size of TL*Al octets and\n   the remaining
          NS sub-blocks each consisting of K contiguous sub-\n   symbols of size of
          TS*Al octets.  The symbol alignment parameter Al\n   ensures that sub-symbols
          are always a multiple of Al octets.\n   Finally, the mth symbol of a source
          block consists of the\n   concatenation of the mth sub-symbol from each
          of the N sub-blocks.\n   Note that this implies that when N > 1, a symbol
          is NOT a contiguous\n   portion of the object.\n"
        title: 4.4.1.2.  Source Block and Sub-Block Partitioning
      title: 4.4.1.  Source Block Construction
    - contents:
      - "4.4.2.  Encoding Packet Construction\n   Each encoding packet contains the
        following information:\n   o  Source Block Number (SBN)\n   o  Encoding Symbol
        ID (ESI)\n   o  encoding symbol(s)\n   Each source block is encoded independently
        of the others.  Each\n   encoding packet contains encoding symbols generated
        from the one\n   source block identified by the SBN carried in the encoding
        packet.\n   Source blocks are numbered consecutively from zero.\n   Encoding
        Symbol ID values from 0 to K-1 identify the source symbols\n   of a source
        block in sequential order, where K is the number of\n   source symbols in
        the source block.  Encoding Symbol IDs K onwards\n   identify repair symbols
        generated from the source symbols using the\n   RaptorQ encoder.\n   Each
        encoding packet either contains only source symbols (source\n   packet) or
        contains only repair symbols (repair packet).  A packet\n   may contain any
        number of symbols from the same source block.  In the\n   case that the last
        source symbol in a source packet includes padding\n   octets added for FEC
        encoding purposes, then these octets need not be\n   included in the packet.
        \ Otherwise, each packet MUST contain only\n   whole symbols.\n   The Encoding
        Symbol ID, X, carried in each source packet is the\n   Encoding Symbol ID
        of the first source symbol carried in that packet.\n   The subsequent source
        symbols in the packet have Encoding Symbol IDs\n   X+1 to X+G-1 in sequential
        order, where G is the number of symbols in\n   the packet.\n   Similarly,
        the Encoding Symbol ID, X, placed into a repair packet is\n   the Encoding
        Symbol ID of the first repair symbol in the repair\n   packet, and the subsequent
        repair symbols in the packet have Encoding\n   Symbol IDs X+1 to X+G-1 in
        sequential order, where G is the number of\n   symbols in the packet.\n   Note
        that it is not necessary for the receiver to know the total\n   number of
        repair packets.\n"
      title: 4.4.2.  Encoding Packet Construction
    - contents:
      - "4.4.3.  Example Receiver Recovery Strategies\n   A receiver can use the received
        encoding symbols for each source\n   block of an object to recover the source
        symbols for that source\n   block independently of all other source blocks.\n
        \  If there is one sub-block per source block, i.e., N = 1, then the\n   portion
        of the data in the original object in its original order\n   associated with
        a source block consists of the concatenation of the\n   source symbols of
        a source block in consecutive ESI order.\n   If there are multiple sub-blocks
        per source block, i.e., if N > 1,\n   then the portion of the data in the
        original object in its original\n   order associated with a source block consists
        of the concatenation of\n   the sub-blocks associated with the source block,
        where sub-symbols\n   within each sub-block are in consecutive ESI order.
        \ In this case,\n   there are different receiver source block recovery strategies
        worth\n   considering depending on the available amount of Random Access Memory\n
        \  (RAM) at the receiver, as outlined below.\n   One strategy is to recover
        the source symbols of a source block using\n   the decoding procedures applied
        to the received symbols for the\n   source block to recover the source symbols
        as described in Section 5,\n   and then to reorder the sub-symbols of the
        source symbols so that all\n   consecutive sub-symbols of the first sub-block
        are first, followed by\n   all consecutive sub-symbols of the second sub-block,
        etc., followed\n   by all consecutive sub-symbols of the Nth sub-block.  This
        strategy\n   is especially applicable if the receiver has enough RAM to decode
        an\n   entire source block.\n   Another strategy is to separately recover
        the sub-blocks of a source\n   block.  For example, a receiver may demultiplex
        and store sub-symbols\n   associated with each sub-block separately as packets
        containing\n   encoding symbols arrive, and then use the stored sub-symbols
        received\n   for a sub-block to recover that sub-block using the decoding\n
        \  procedures described in Section 5.  This strategy is especially\n   applicable
        if the receiver has enough RAM to decode only one sub-\n   block at a time.\n"
      title: 4.4.3.  Example Receiver Recovery Strategies
    title: 4.4.  Object Delivery
  title: 4.  Procedures
- contents:
  - '5.  RaptorQ FEC Code Specification

    '
  - contents:
    - "5.1.  Background\n   For the purpose of the RaptorQ FEC code specification
      in this\n   section, the following definitions, symbols, and abbreviations apply.\n
      \  A basic understanding of linear algebra, matrix operations, and\n   finite
      fields is assumed in this section.  In particular, matrix\n   multiplication
      and matrix inversion operations over a mixture of the\n   finite fields GF[2]
      and GF[256] are used.  A basic familiarity with\n   sparse linear equations,
      and efficient implementations of algorithms\n   that take advantage of sparse
      linear equations, is also quite\n   beneficial to an implementer of this specification.\n"
    - contents:
      - "5.1.1.  Definitions\n   o  Source block: a block of K source symbols that
        are considered\n      together for RaptorQ encoding and decoding purposes.\n
        \  o  Extended Source Block: a block of K' source symbols, where K' >=\n      K,
        constructed from a source block and zero or more padding\n      symbols.\n
        \  o  Symbol: a unit of data.  The size, in octets, of a symbol is known\n
        \     as the symbol size.  The symbol size is always a positive integer.\n
        \  o  Source symbol: the smallest unit of data used during the encoding\n
        \     process.  All source symbols within a source block have the same\n      size.\n
        \  o  Padding symbol: a symbol with all zero bits that is added to the\n      source
        block to form the extended source block.\n   o  Encoding symbol: a symbol
        that can be sent as part of the encoding\n      of a source block.  The encoding
        symbols of a source block consist\n      of the source symbols of the source
        block and the repair symbols\n      generated from the source block.  Repair
        symbols generated from a\n      source block have the same size as the source
        symbols of that\n      source block.\n   o  Repair symbol: the encoding symbols
        of a source block that are not\n      source symbols.  The repair symbols
        are generated based on the\n      source symbols of a source block.\n   o
        \ Intermediate symbols: symbols generated from the source symbols\n      using
        an inverse encoding process based on pre-coding\n      relationships.  The
        repair symbols are then generated directly\n      from the intermediate symbols.
        \ The encoding symbols do not\n      include the intermediate symbols, i.e.,
        intermediate symbols are\n      not sent as part of the encoding of a source
        block.  The\n      intermediate symbols are partitioned into LT symbols and
        PI\n      symbols for the purposes of the encoding process.\n   o  LT symbols:
        a process similar to that described in [LTCodes] is\n      used to generate
        part of the contribution to each generated\n      encoding symbol from the
        portion of the intermediate symbols\n      designated as LT symbols.\n   o
        \ PI symbols: a process even simpler than that described in\n      [LTCodes]
        is used to generate the other part of the contribution\n      to each generated
        encoding symbol from the portion of the\n      intermediate symbols designated
        as PI symbols.  In the decoding\n      algorithm suggested in Section 5.4,
        the PI symbols are inactivated\n      at the start, i.e., are placed into
        the matrix U at the beginning\n      of the first phase of the decoding algorithm.
        \ Because the symbols\n      corresponding to the columns of U are sometimes
        called the\n      \"inactivated\" symbols, and since the PI symbols are inactivated
        at\n      the beginning, they are considered \"permanently inactivated\".\n
        \  o  HDPC symbols: there is a small subset of the intermediate symbols\n
        \     that are HDPC symbols.  Each HDPC symbol has a pre-coding\n      relationship
        with a large fraction of the other intermediate\n      symbols.  HDPC means
        \"High Density Parity Check\".\n   o  LDPC symbols: there is a moderate-sized
        subset of the intermediate\n      symbols that are LDPC symbols.  Each LDPC
        symbol has a pre-coding\n      relationship with a small fraction of the other
        intermediate\n      symbols.  LDPC means \"Low Density Parity Check\".\n   o
        \ Systematic code: a code in which all source symbols are included\n      as
        part of the encoding symbols of a source block.  The RaptorQ\n      code as
        described herein is a systematic code.\n   o  Encoding Symbol ID (ESI): information
        that uniquely identifies\n      each encoding symbol associated with a source
        block for sending\n      and receiving purposes.\n   o  Internal Symbol ID
        (ISI): information that uniquely identifies\n      each symbol associated
        with an extended source block for encoding\n      and decoding purposes.\n
        \  o  Arithmetic operations on octets and symbols and matrices: the\n      operations
        that are used to produce encoding symbols from source\n      symbols and vice
        versa.  See Section 5.7.\n"
      title: 5.1.1.  Definitions
    - contents:
      - "5.1.2.  Symbols\n   i, j, u, v, h, d, a, b, d1, a1, b1, v, m, x, y   represent
        values or\n        variables of one type or another, depending on the context.\n
        \  X    denotes a non-negative integer value that is either an ISI value\n
        \       or an ESI value, depending on the context.\n   ceil(x)  denotes the
        smallest integer that is greater than or equal\n        to x, where x is a
        real value.\n   floor(x)  denotes the largest integer that is less than or
        equal to\n        x, where x is a real value.\n   min(x,y)  denotes the minimum
        value of the values x and y, and in\n        general the minimum value of
        all the argument values.\n   max(x,y)  denotes the maximum value of the values
        x and y, and in\n        general the maximum value of all the argument values.\n
        \  i % j  denotes i modulo j.\n   i + j  denotes the sum of i and j.  If i
        and j are octets or symbols,\n        this designates the arithmetic on octets
        or symbols,\n        respectively, as defined in Section 5.7.  If i and j
        are\n        integers, then it denotes the usual integer addition.\n   i *
        j  denotes the product of i and j.  If i and j are octets, this\n        designates
        the arithmetic on octets, as defined in Section 5.7.\n        If i is an octet
        and j is a symbol, this denotes the\n        multiplication of a symbol by
        an octet, as also defined in\n        Section 5.7.  Finally, if i and j are
        integers, i * j denotes\n        the usual product of integers.\n   a ^^ b
        \ denotes the operation a raised to the power b.  If a is an\n        octet
        and b is a non-negative integer, this is understood to\n        mean a*a*...*a
        (b terms), with '*' being the octet product as\n        defined in Section
        5.7.\n   u ^ v  denotes, for equal-length bit strings u and v, the bitwise\n
        \       exclusive-or of u and v.\n   Transpose[A]  denotes the transposed
        matrix of matrix A.  In this\n        specification, all matrices have entries
        that are octets.\n   A^^-1  denotes the inverse matrix of matrix A.  In this\n
        \       specification, all the matrices have octets as entries, so it is\n
        \       understood that the operations of the matrix entries are to be\n        done
        as stated in Section 5.7 and A^^-1 is the matrix inverse of\n        A with
        respect to octet arithmetic.\n   K    denotes the number of symbols in a single
        source block.\n   K'   denotes the number of source plus padding symbols in
        an extended\n        source block.  For the majority of this specification,
        the\n        padding symbols are considered to be additional source symbols.\n
        \  K'_max  denotes the maximum number of source symbols that can be in a\n
        \       single source block.  Set to 56403.\n   L    denotes the number of
        intermediate symbols for a single extended\n        source block.\n   S    denotes
        the number of LDPC symbols for a single extended source\n        block.  These
        are LT symbols.  For each value of K' shown in\n        Table 2 in Section
        5.6, the corresponding value of S is a prime\n        number.\n   H    denotes
        the number of HDPC symbols for a single extended source\n        block.  These
        are PI symbols.\n   B    denotes the number of intermediate symbols that are
        LT symbols\n        excluding the LDPC symbols.\n   W    denotes the number
        of intermediate symbols that are LT symbols.\n        For each value of K'
        in Table 2 shown in Section 5.6, the\n        corresponding value of W is
        a prime number.\n   P    denotes the number of intermediate symbols that are
        PI symbols.\n        These contain all HDPC symbols.\n   P1   denotes the
        smallest prime number greater than or equal to P.\n   U    denotes the number
        of non-HDPC intermediate symbols that are PI\n        symbols.\n   C    denotes
        an array of intermediate symbols, C[0], C[1], C[2], ...,\n        C[L-1].\n
        \  C'   denotes an array of the symbols of the extended source block,\n        where
        C'[0], C'[1], C'[2], ..., C'[K-1] are the source symbols\n        of the source
        block and C'[K], C'[K+1], ..., C'[K'-1] are\n        padding symbols.\n   V0,
        V1, V2, V3  denote four arrays of 32-bit unsigned integers,\n        V0[0],
        V0[1], ..., V0[255]; V1[0], V1[1], ..., V1[255]; V2[0],\n        V2[1], ...,
        V2[255]; and V3[0], V3[1], ..., V3[255] as shown in\n        Section 5.5.\n
        \  Rand[y, i, m]  denotes a pseudo-random number generator.\n   Deg[v]  denotes
        a degree generator.\n   Enc[K', C ,(d, a, b, d1, a1, b1)]  denotes an encoding
        symbol\n        generator.\n   Tuple[K', X]  denotes a tuple generator function.\n
        \  T    denotes the symbol size in octets.\n   J(K')  denotes the systematic
        index associated with K'.\n   G    denotes any generator matrix.\n   I_S  denotes
        the S x S identity matrix.\n"
      title: 5.1.2.  Symbols
    title: 5.1.  Background
  - contents:
    - "5.2.  Overview\n   This section defines the systematic RaptorQ FEC code.\n
      \  Symbols are the fundamental data units of the encoding and decoding\n   process.
      \ For each source block, all symbols are the same size,\n   referred to as the
      symbol size T.  The atomic operations performed on\n   symbols for both encoding
      and decoding are the arithmetic operations\n   defined in Section 5.7.\n   The
      basic encoder is described in Section 5.3.  The encoder first\n   derives a
      block of intermediate symbols from the source symbols of a\n   source block.
      \ This intermediate block has the property that both\n   source and repair symbols
      can be generated from it using the same\n   process.  The encoder produces repair
      symbols from the intermediate\n   block using an efficient process, where each
      such repair symbol is\n   the exclusive-or of a small number of intermediate
      symbols from the\n   block.  Source symbols can also be reproduced from the
      intermediate\n   block using the same process.  The encoding symbols are the\n
      \  combination of the source and repair symbols.\n   An example of a decoder
      is described in Section 5.4.  The process for\n   producing source and repair
      symbols from the intermediate block is\n   designed so that the intermediate
      block can be recovered from any\n   sufficiently large set of encoding symbols,
      independent of the mix of\n   source and repair symbols in the set.  Once the
      intermediate block is\n   recovered, missing source symbols of the source block
      can be\n   recovered using the encoding process.\n   Requirements for a RaptorQ-compliant
      decoder are provided in\n   Section 5.8.  A number of decoding algorithms are
      possible to achieve\n   these requirements.  An efficient decoding algorithm
      to achieve these\n   requirements is provided in Section 5.4.\n   The construction
      of the intermediate and repair symbols is based in\n   part on a pseudo-random
      number generator described in Section 5.3.\n   This generator is based on a
      fixed set of 1024 random numbers that\n   must be available to both sender and
      receiver.  These numbers are\n   provided in Section 5.5.  Encoding and decoding
      operations for\n   RaptorQ use operations on octets.  Section 5.7 describes
      how to\n   perform these operations.\n   Finally, the construction of the intermediate
      symbols from the source\n   symbols is governed by \"systematic indices\", values
      of which are\n   provided in Section 5.6 for specific extended source block
      sizes\n   between 6 and K'_max = 56403 source symbols.  Thus, the RaptorQ code\n
      \  supports source blocks with between 1 and 56403 source symbols.\n"
    title: 5.2.  Overview
  - contents:
    - '5.3.  Systematic RaptorQ Encoder

      '
    - contents:
      - "5.3.1.  Introduction\n   For a given source block of K source symbols, for
        encoding and\n   decoding purposes, the source block is augmented with K'-K
        additional\n   padding symbols, where K' is the smallest value that is at
        least K in\n   the systematic index Table 2 of Section 5.6.  The reason for
        padding\n   out a source block to a multiple of K' is to enable faster encoding\n
        \  and decoding and to minimize the amount of table information that\n   needs
        to be stored in the encoder and decoder.\n   For purposes of transmitting
        and receiving data, the value of K is\n   used to determine the number of
        source symbols in a source block, and\n   thus K needs to be known at the
        sender and the receiver.  In this\n   case, the sender and receiver can compute
        K' from K and the K'-K\n   padding symbols can be automatically added to the
        source block\n   without any additional communication.  The encoding symbol
        ID (ESI)\n   is used by a sender and receiver to identify the encoding symbols
        of\n   a source block, where the encoding symbols of a source block consist\n
        \  of the source symbols and the repair symbols associated with the\n   source
        block.  For a source block with K source symbols, the ESIs for\n   the source
        symbols are 0, 1, 2, ..., K-1, and the ESIs for the repair\n   symbols are
        K, K+1, K+2, ....  Using the ESI for identifying encoding\n   symbols in transport
        ensures that the ESI values continue\n   consecutively between the source
        and repair symbols.\n   For purposes of encoding and decoding data, the value
        of K' derived\n   from K is used as the number of source symbols of the extended
        source\n   block upon which encoding and decoding operations are performed,\n
        \  where the K' source symbols consist of the original K source symbols\n
        \  and an additional K'-K padding symbols.  The Internal Symbol ID (ISI)\n
        \  is used by the encoder and decoder to identify the symbols associated\n
        \  with the extended source block, i.e., for generating encoding symbols\n
        \  and for decoding.  For a source block with K original source symbols,\n
        \  the ISIs for the original source symbols are 0, 1, 2, ..., K-1, the\n   ISIs
        for the K'-K padding symbols are K, K+1, K+2, ..., K'-1, and the\n   ISIs
        for the repair symbols are K', K'+1, K'+2, ....  Using the ISI\n   for encoding
        and decoding allows the padding symbols of the extended\n   source block to
        be treated the same way as other source symbols of\n   the extended source
        block.  Also, it ensures that a given prefix of\n   repair symbols are generated
        in a consistent way for a given number\n   K' of source symbols in the extended
        source block, independent of K.\n   The relationship between the ESIs and
        the ISIs is simple: the ESIs\n   and the ISIs for the original K source symbols
        are the same, the K'-K\n   padding symbols have an ISI but do not have a corresponding
        ESI\n   (since they are symbols that are neither sent nor received), and a\n
        \  repair symbol ISI is simply the repair symbol ESI plus K'-K.  The\n   translation
        between ESIs (used to identify encoding symbols sent and\n   received) and
        the corresponding ISIs (used for encoding and\n   decoding), as well as determining
        the proper padding of the extended\n   source block with padding symbols (used
        for encoding and decoding),\n   is the internal responsibility of the RaptorQ
        encoder/decoder.\n"
      title: 5.3.1.  Introduction
    - contents:
      - "5.3.2.  Encoding Overview\n   The systematic RaptorQ encoder is used to generate
        any number of\n   repair symbols from a source block that consists of K source
        symbols\n   placed into an extended source block C'.  Figure 4 shows the encoding\n
        \  overview.\n   The first step of encoding is to construct an extended source
        block\n   by adding zero or more padding symbols such that the total number
        of\n   symbols, K', is one of the values listed in Section 5.6.  Each\n   padding
        symbol consists of T octets where the value of each octet is\n   zero.  K'
        MUST be selected as the smallest value of K' from the table\n   of Section
        5.6 that is greater than or equal to K.\n         -----------------------------------------------------------+\n
        \        |                                                          |\n         |
        \   +-----------+    +--------------+    +-------------+  |\n      C' |    |
        \          | C' | Intermediate | C  |             |  |\n     ----+--->|  Padding
        \ |--->|    Symbol    |--->|   Encoding  |--+-->\n      K  |    |           |
        K' |  Generation  | L  |             |  |\n         |    +-----------+    +--------------+
        \   +-------------+  |\n         |           |                             (d,a,b,
        ^        |\n         |           |                            d1,a1,b1)|        |\n
        \        |           |                              +------------+  |\n         |
        \          |              K'              |   Tuple    |  |\n         |           +----------------------------->|
        \           |  |\n         |                                          | Generation
        |  |\n         |                                          +------------+  |\n
        \        |                                                 ^        |\n         +-------------------------------------------------+--------+\n
        \                                                          |\n                                                         ISI
        X\n                        Figure 4: Encoding Overview\n   Let C'[0], ...,
        C'[K-1] denote the K source symbols.\n   Let C'[K], ..., C'[K'-1] denote the
        K'-K padding symbols, which are\n   all set to zero bits.  Then, C'[0], ...,
        C'[K'-1] are the symbols of\n   the extended source block upon which encoding
        and decoding are\n   performed.\n   In the remainder of this description,
        these padding symbols will be\n   considered as additional source symbols
        and referred to as such.\n   However, these padding symbols are not part of
        the encoding symbols,\n   i.e., they are not sent as part of the encoding.
        \ At a receiver, the\n   value of K' can be computed based on K, then the
        receiver can insert\n   K'-K padding symbols at the end of a source block
        of K' source\n   symbols and recover the remaining K source symbols of the
        source\n   block from received encoding symbols.\n   The second step of encoding
        is to generate a number, L > K', of\n   intermediate symbols from the K' source
        symbols.  In this step, K'\n   source tuples (d[0], a[0], b[0], d1[0], a1[0],
        b1[0]), ..., (d[K'-1],\n   a[K'-1], b[K'-1], d1[K'-1], a1[K'-1], b1[K'-1])
        are generated using\n   the Tuple[] generator as described in Section 5.3.5.4.
        \ The K' source\n   tuples and the ISIs associated with the K' source symbols
        are used to\n   determine L intermediate symbols C[0], ..., C[L-1] from the
        source\n   symbols using an inverse encoding process.  This process can be\n
        \  realized by a RaptorQ decoding process.\n   Certain \"pre-coding relationships\"
        must hold within the L\n   intermediate symbols.  Section 5.3.3.3 describes
        these relationships.\n   Section 5.3.3.4 describes how the intermediate symbols
        are generated\n   from the source symbols.\n   Once the intermediate symbols
        have been generated, repair symbols can\n   be produced.  For a repair symbol
        with ISI X > K', the tuple of non-\n   negative integers (d, a, b, d1, a1,
        b1) can be generated, using the\n   Tuple[] generator as described in Section
        5.3.5.4.  Then, the (d, a,\n   b, d1, a1, b1) tuple and the ISI X are used
        to generate the\n   corresponding repair symbol from the intermediate symbols
        using the\n   Enc[] generator described in Section 5.3.5.3.  The corresponding
        ESI\n   for this repair symbol is then X-(K'-K).  Note that source symbols
        of\n   the extended source block can also be generated using the same\n   process,
        i.e., for any X < K', the symbol generated using this\n   process has the
        same value as C'[X].\n"
      title: 5.3.2.  Encoding Overview
    - contents:
      - '5.3.3.  First Encoding Step: Intermediate Symbol Generation

        '
      - contents:
        - "5.3.3.1.  General\n   This encoding step is a pre-coding step to generate
          the L\n   intermediate symbols C[0], ..., C[L-1] from the source symbols
          C'[0],\n   ..., C'[K'-1], where L > K' is defined in Section 5.3.3.3.  The\n
          \  intermediate symbols are uniquely defined by two sets of constraints:\n
          \  1.  The intermediate symbols are related to the source symbols by a\n
          \      set of source symbol tuples and by the ISIs of the source\n       symbols.
          \ The generation of the source symbol tuples is defined\n       in Section
          5.3.3.2 using the Tuple[] generator as described in\n       Section 5.3.5.4.\n
          \  2.  A number of pre-coding relationships hold within the intermediate\n
          \      symbols themselves.  These are defined in Section 5.3.3.3.\n   The
          generation of the L intermediate symbols is then defined in\n   Section
          5.3.3.4.\n"
        title: 5.3.3.1.  General
      - contents:
        - "5.3.3.2.  Source Symbol Tuples\n   Each of the K' source symbols is associated
          with a source symbol\n   tuple (d[X], a[X], b[X], d1[X], a1[X], b1[X]) for
          0 <= X < K'.  The\n   source symbol tuples are determined using the Tuple[]
          generator\n   defined in Section 5.3.5.4 as:\n      For each X, 0 <= X <
          K'\n         (d[X], a[X], b[X], d1[X], a1[X], b1[X]) = Tuple[K, X]\n"
        title: 5.3.3.2.  Source Symbol Tuples
      - contents:
        - "5.3.3.3.  Pre-Coding Relationships\n   The pre-coding relationships amongst
          the L intermediate symbols are\n   defined by requiring that a set of S+H
          linear combinations of the\n   intermediate symbols evaluate to zero.  There
          are S LDPC and H HDPC\n   symbols, and thus L = K'+S+H.  Another partition
          of the L\n   intermediate symbols is into two sets, one set of W LT symbols
          and\n   another set of P PI symbols, and thus it is also the case that L
          =\n   W+P.  The P PI symbols are treated differently than the W LT symbols\n
          \  in the encoding process.  The P PI symbols consist of the H HDPC\n   symbols
          together with a set of U = P-H of the other K' intermediate\n   symbols.
          \ The W LT symbols consist of the S LDPC symbols together\n   with W-S of
          the other K' intermediate symbols.  The values of these\n   parameters are
          determined from K' as described below, where H(K'),\n   S(K'), and W(K')
          are derived from Table 2 in Section 5.6.\n   Let\n   o  S = S(K')\n   o
          \ H = H(K')\n   o  W = W(K')\n   o  L = K' + S + H\n   o  P = L - W\n   o
          \ P1 denote the smallest prime number greater than or equal to P.\n   o
          \ U = P - H\n   o  B = W - S\n   o  C[0], ..., C[B-1] denote the intermediate
          symbols that are LT\n      symbols but not LDPC symbols.\n   o  C[B], ...,
          C[B+S-1] denote the S LDPC symbols that are also LT\n      symbols.\n   o
          \ C[W], ..., C[W+U-1] denote the intermediate symbols that are PI\n      symbols
          but not HDPC symbols.\n   o  C[L-H], ..., C[L-1] denote the H HDPC symbols
          that are also PI\n      symbols.\n   The first set of pre-coding relations,
          called LDPC relations, is\n   described below and requires that at the end
          of this process the set\n   of symbols D[0] , ..., D[S-1] are all zero:\n
          \  o  Initialize the symbols D[0] = C[B], ..., D[S-1] = C[B+S-1].\n   o
          \ For i = 0, ..., B-1 do\n      *  a = 1 + floor(i/S)\n      *  b = i %
          S\n      *  D[b] = D[b] + C[i]\n      *  b = (b + a) % S\n      *  D[b]
          = D[b] + C[i]\n      *  b = (b + a) % S\n      *  D[b] = D[b] + C[i]\n   o
          \ For i = 0, ..., S-1 do\n      *  a = i % P\n      *  b = (i+1) % P\n      *
          \ D[i] = D[i] + C[W+a] + C[W+b]\n   Recall that the addition of symbols
          is to be carried out as specified\n   in Section 5.7.\n   Note that the
          LDPC relations as defined in the algorithm above are\n   linear, so there
          exists an S x B matrix G_LDPC,1 and an S x P matrix\n   G_LDPC,2 such that\n
          \     G_LDPC,1 * Transpose[(C[0], ..., C[B-1])] + G_LDPC,2 *\n      Transpose(C[W],
          ..., C[W+P-1]) + Transpose[(C[B], ..., C[B+S-1])]\n      = 0\n   (The matrix
          G_LDPC,1 is defined by the first loop in the above\n   algorithm, and G_LDPC,2
          can be deduced from the second loop.)\n   The second set of relations among
          the intermediate symbols C[0], ...,\n   C[L-1] are the HDPC relations and
          they are defined as follows:\n   Let\n   o  alpha denote the octet represented
          by integer 2 as defined in\n      Section 5.7.\n   o  MT denote an H x (K'
          + S) matrix of octets, where for j=0, ...,\n      K'+S-2, the entry MT[i,j]
          is the octet represented by the integer\n      1 if i= Rand[j+1,6,H] or
          i = (Rand[j+1,6,H] + Rand[j+1,7,H-1] + 1)\n      % H, and MT[i,j] is the
          zero element for all other values of i,\n      and for j=K'+S-1, MT[i,j]
          = alpha^^i for i=0, ..., H-1.\n   o  GAMMA denote a (K'+S) x (K'+S) matrix
          of octets, where\n         GAMMA[i,j] =\n            alpha ^^ (i-j) for
          i >= j,\n            0 otherwise.\n   Then, the relationship between the
          first K'+S intermediate symbols\n   C[0], ..., C[K'+S-1] and the H HDPC
          symbols C[K'+S], ..., C[K'+S+H-1]\n   is given by:\n      Transpose[C[K'+S],
          ..., C[K'+S+H-1]] + MT * GAMMA *\n      Transpose[C[0], ..., C[K'+S-1]]
          = 0,\n   where '*' represents standard matrix multiplication utilizing the\n
          \  octet multiplication to define the multiplication between a matrix of\n
          \  octets and a matrix of symbols (in particular, the column vector of\n
          \  symbols), and '+' denotes addition over octet vectors.\n"
        title: 5.3.3.3.  Pre-Coding Relationships
      - contents:
        - '5.3.3.4.  Intermediate Symbols

          '
        - contents:
          - "5.3.3.4.1.  Definition\n   Given the K' source symbols C'[0], C'[1],
            ..., C'[K'-1] the L\n   intermediate symbols C[0], C[1], ..., C[L-1] are
            the uniquely defined\n   symbol values that satisfy the following conditions:\n
            \  1.  The K' source symbols C'[0], C'[1], ..., C'[K'-1] satisfy the K'\n
            \      constraints\n          C'[X] = Enc[K', (C[0], ..., C[L-1]), (d[X],
            a[X], b[X], d1[X],\n          a1[X], b1[X])], for all X, 0 <= X < K',\n
            \      where (d[X], a[X], b[X], d1[X], a1[X], b1[X])) = Tuple[K',X],\n
            \      Tuple[] is defined in Section 5.3.5.4, and Enc[] is described in\n
            \      Section 5.3.5.3.\n   2.  The L intermediate symbols C[0], C[1],
            ..., C[L-1] satisfy the\n       pre-coding relationships defined in Section
            5.3.3.3.\n"
          title: 5.3.3.4.1.  Definition
        - contents:
          - "5.3.3.4.2.  Example Method for Calculation of Intermediate Symbols\n
            \  This section describes a possible method for calculation of the L\n
            \  intermediate symbols C[0], C[1], ..., C[L-1] satisfying the\n   constraints
            in Section 5.3.3.4.1.\n   The L intermediate symbols can be calculated
            as follows:\n   Let\n   o  C denote the column vector of the L intermediate
            symbols, C[0],\n      C[1], ..., C[L-1].\n   o  D denote the column vector
            consisting of S+H zero symbols followed\n      by the K' source symbols
            C'[0], C'[1], ..., C'[K'-1].\n   Then, the above constraints define an
            L x L matrix A of octets such\n   that:\n      A*C = D\n   The matrix
            A can be constructed as follows:\n   Let\n   o  G_LDPC,1 and G_LDPC,2
            be S x B and S x P matrices as defined in\n      Section 5.3.3.3.\n   o
            \ G_HDPC be the H x (K'+S) matrix such that\n         G_HDPC * Transpose(C[0],
            ..., C[K'+S-1]) = Transpose(C[K'+S],\n         ..., C[L-1]),\n         i.e.,
            G_HDPC = MT*GAMMA\n   o  I_S be the S x S identity matrix\n   o  I_H be
            the H x H identity matrix\n   o  G_ENC be the K' x L matrix such that\n
            \        G_ENC * Transpose[(C[0], ..., C[L-1])] =\n         Transpose[(C'[0],C'[1],
            ...,C'[K'-1])],\n         i.e., G_ENC[i,j] = 1 if and only if C[j] is
            included in the\n         symbols that are summed to produce Enc[K', (C[0],
            ..., C[L-1]),\n         (d[i], a[i], b[i], d1[i], a1[i], b1[i])] and G_ENC[i,j]
            = 0\n         otherwise.\n   Then\n   o  The first S rows of A are equal
            to G_LDPC,1 | I_S | G_LDPC,2.\n   o  The next H rows of A are equal to
            G_HDPC | I_H.\n   o  The remaining K' rows of A are equal to G_ENC.\n
            \  The matrix A is depicted in Figure 5 below:\n                       B
            \              S         U         H\n            +-----------------------+-------+------------------+\n
            \           |                       |       |                  |\n          S
            |        G_LDPC,1       |  I_S  |      G_LDPC,2    |\n            |                       |
            \      |                  |\n            +-----------------------+-------+----------+-------+\n
            \           |                                          |       |\n          H
            |                G_HDPC                    |  I_H  |\n            |                                          |
            \      |\n            +------------------------------------------+-------+\n
            \           |                                                  |\n            |
            \                                                 |\n         K' |                      G_ENC
            \                      |\n            |                                                  |\n
            \           |                                                  |\n            +--------------------------------------------------+\n
            \                            Figure 5: The Matrix A\n   The intermediate
            symbols can then be calculated as:\n      C = (A^^-1)*D\n   The source
            tuples are generated such that for any K' matrix A has\n   full rank and
            is therefore invertible.  This calculation can be\n   realized by applying
            a RaptorQ decoding process to the K' source\n   symbols C'[0], C'[1],
            ..., C'[K'-1] to produce the L intermediate\n   symbols C[0], C[1], ...,
            C[L-1].\n   To efficiently generate the intermediate symbols from the
            source\n   symbols, it is recommended that an efficient decoder implementation\n
            \  such as that described in Section 5.4 be used.\n"
          title: 5.3.3.4.2.  Example Method for Calculation of Intermediate Symbols
        title: 5.3.3.4.  Intermediate Symbols
      title: '5.3.3.  First Encoding Step: Intermediate Symbol Generation'
    - contents:
      - "5.3.4.  Second Encoding Step: Encoding\n   In the second encoding step, the
        repair symbol with ISI X (X >= K')\n   is generated by applying the generator
        Enc[K', (C[0], C[1], ...,\n   C[L-1]), (d, a, b, d1, a1, b1)] defined in Section
        5.3.5.3 to the L\n   intermediate symbols C[0], C[1], ..., C[L-1] using the
        tuple (d, a,\n   b, d1, a1, b1)=Tuple[K',X].\n"
      title: '5.3.4.  Second Encoding Step: Encoding'
    - contents:
      - '5.3.5.  Generators

        '
      - contents:
        - "5.3.5.1.  Random Number Generator\n   The random number generator Rand[y,
          i, m] is defined as follows,\n   where y is a non-negative integer, i is
          a non-negative integer less\n   than 256, and m is a positive integer, and
          the value produced is an\n   integer between 0 and m-1.  Let V0, V1, V2,
          and V3 be the arrays\n   provided in Section 5.5.\n   Let\n   o  x0 = (y
          + i) mod 2^^8\n   o  x1 = (floor(y / 2^^8) + i) mod 2^^8\n   o  x2 = (floor(y
          / 2^^16) + i) mod 2^^8\n   o  x3 = (floor(y / 2^^24) + i) mod 2^^8\n   Then\n
          \     Rand[y, i, m] = (V0[x0] ^ V1[x1] ^ V2[x2] ^ V3[x3]) % m\n"
        title: 5.3.5.1.  Random Number Generator
      - contents:
        - "5.3.5.2.  Degree Generator\n   The degree generator Deg[v] is defined as
          follows, where v is a non-\n   negative integer that is less than 2^^20
          = 1048576.  Given v, find\n   index d in Table 1 such that f[d-1] <= v <
          f[d], and set Deg[v] =\n   min(d, W-2).  Recall that W is derived from K'
          as described in\n   Section 5.3.3.3.\n                 +---------+---------+---------+---------+\n
          \                | Index d | f[d]    | Index d | f[d]    |\n                 +---------+---------+---------+---------+\n
          \                | 0       | 0       | 1       | 5243    |\n                 +---------+---------+---------+---------+\n
          \                | 2       | 529531  | 3       | 704294  |\n                 +---------+---------+---------+---------+\n
          \                | 4       | 791675  | 5       | 844104  |\n                 +---------+---------+---------+---------+\n
          \                | 6       | 879057  | 7       | 904023  |\n                 +---------+---------+---------+---------+\n
          \                | 8       | 922747  | 9       | 937311  |\n                 +---------+---------+---------+---------+\n
          \                | 10      | 948962  | 11      | 958494  |\n                 +---------+---------+---------+---------+\n
          \                | 12      | 966438  | 13      | 973160  |\n                 +---------+---------+---------+---------+\n
          \                | 14      | 978921  | 15      | 983914  |\n                 +---------+---------+---------+---------+\n
          \                | 16      | 988283  | 17      | 992138  |\n                 +---------+---------+---------+---------+\n
          \                | 18      | 995565  | 19      | 998631  |\n                 +---------+---------+---------+---------+\n
          \                | 20      | 1001391 | 21      | 1003887 |\n                 +---------+---------+---------+---------+\n
          \                | 22      | 1006157 | 23      | 1008229 |\n                 +---------+---------+---------+---------+\n
          \                | 24      | 1010129 | 25      | 1011876 |\n                 +---------+---------+---------+---------+\n
          \                | 26      | 1013490 | 27      | 1014983 |\n                 +---------+---------+---------+---------+\n
          \                | 28      | 1016370 | 29      | 1017662 |\n                 +---------+---------+---------+---------+\n
          \                | 30      | 1048576 |         |         |\n                 +---------+---------+---------+---------+\n
          \      Table 1: Defines the Degree Distribution for Encoding Symbols\n"
        title: 5.3.5.2.  Degree Generator
      - contents:
        - "5.3.5.3.  Encoding Symbol Generator\n   The encoding symbol generator Enc[K',
          (C[0], C[1], ..., C[L-1]), (d,\n   a, b, d1, a1, b1)] takes the following
          inputs:\n   o  K' is the number of source symbols for the extended source
          block.\n      Let L, W, B, S, P, and P1 be derived from K' as described
          in\n      Section 5.3.3.3.\n   o  (C[0], C[1], ..., C[L-1]) is the array
          of L intermediate symbols\n      (sub-symbols) generated as described in
          Section 5.3.3.4.\n   o  (d, a, b, d1, a1, b1) is a source tuple determined
          from ISI X\n      using the Tuple[] generator defined in Section 5.3.5.4,
          whereby\n      *  d is a positive integer denoting an encoding symbol LT
          degree\n      *  a is a positive integer between 1 and W-1 inclusive\n      *
          \ b is a non-negative integer between 0 and W-1 inclusive\n      *  d1 is
          a positive integer that has value either 2 or 3 denoting\n         an encoding
          symbol PI degree\n      *  a1 is a positive integer between 1 and P1-1 inclusive\n
          \     *  b1 is a non-negative integer between 0 and P1-1 inclusive\n   The
          encoding symbol generator produces a single encoding symbol as\n   output
          (referred to as result), according to the following algorithm:\n   o  result
          = C[b]\n   o  For j = 1, ..., d-1 do\n      *  b = (b + a) % W\n      *
          \ result = result + C[b]\n   o  While (b1 >= P) do b1 = (b1+a1) % P1\n   o
          \ result = result + C[W+b1]\n   o  For j = 1, ..., d1-1 do\n      *  b1
          = (b1 + a1) % P1\n      *  While (b1 >= P) do b1 = (b1+a1) % P1\n      *
          \ result = result + C[W+b1]\n   o  Return result\n"
        title: 5.3.5.3.  Encoding Symbol Generator
      - contents:
        - "5.3.5.4.  Tuple Generator\n   The tuple generator Tuple[K',X] takes the
          following inputs:\n   o  K': the number of source symbols in the extended
          source block\n   o  X: an ISI\n   Let\n   o  L be determined from K' as
          described in Section 5.3.3.3\n   o  J = J(K') be the systematic index associated
          with K', as defined\n      in Table 2 in Section 5.6\n   The output of the
          tuple generator is a tuple, (d, a, b, d1, a1, b1),\n   determined as follows:\n
          \  o  A = 53591 + J*997\n   o  if (A % 2 == 0) { A = A + 1 }\n   o  B =
          10267*(J+1)\n   o  y = (B + X*A) % 2^^32\n   o  v = Rand[y, 0, 2^^20]\n
          \  o  d = Deg[v]\n   o  a = 1 + Rand[y, 1, W-1]\n   o  b = Rand[y, 2, W]\n
          \  o  If (d < 4) { d1 = 2 + Rand[X, 3, 2] } else { d1 = 2 }\n   o  a1 =
          1 + Rand[X, 4, P1-1]\n   o  b1 = Rand[X, 5, P1]\n"
        title: 5.3.5.4.  Tuple Generator
      title: 5.3.5.  Generators
    title: 5.3.  Systematic RaptorQ Encoder
  - contents:
    - '5.4.  Example FEC Decoder

      '
    - contents:
      - "5.4.1.  General\n   This section describes an efficient decoding algorithm
        for the\n   RaptorQ code introduced in this specification.  Note that each\n
        \  received encoding symbol is a known linear combination of the\n   intermediate
        symbols.  So, each received encoding symbol provides a\n   linear equation
        among the intermediate symbols, which, together with\n   the known linear
        pre-coding relationships amongst the intermediate\n   symbols, gives a system
        of linear equations.  Thus, any algorithm for\n   solving systems of linear
        equations can successfully decode the\n   intermediate symbols and hence the
        source symbols.  However, the\n   algorithm chosen has a major effect on the
        computational efficiency\n   of the decoding.\n"
      title: 5.4.1.  General
    - contents:
      - '5.4.2.  Decoding an Extended Source Block

        '
      - contents:
        - "5.4.2.1.  General\n   It is assumed that the decoder knows the structure
          of the source\n   block it is to decode, including the symbol size, T, and
          the number K\n   of symbols in the source block and the number K' of source
          symbols in\n   the extended source block.\n   From the algorithms described
          in Section 5.3, the RaptorQ decoder can\n   calculate the total number L
          = K'+S+H of intermediate symbols and\n   determine how they were generated
          from the extended source block to\n   be decoded.  In this description,
          it is assumed that the received\n   encoding symbols for the extended source
          block to be decoded are\n   passed to the decoder.  Furthermore, for each
          such encoding symbol,\n   it is assumed that the number and set of intermediate
          symbols whose\n   sum is equal to the encoding symbol are passed to the
          decoder.  In\n   the case of source symbols, including padding symbols,
          the source\n   symbol tuples described in Section 5.3.3.2 indicate the number
          and\n   set of intermediate symbols that sum to give each source symbol.\n
          \  Let N >= K' be the number of received encoding symbols to be used for\n
          \  decoding, including padding symbols for an extended source block, and\n
          \  let M = S+H+N.  Then, with the notation of Section 5.3.3.4.2, we have\n
          \  A*C = D.\n   Decoding an extended source block is equivalent to decoding
          C from\n   known A and D.  It is clear that C can be decoded if and only
          if the\n   rank of A is L.  Once C has been decoded, missing source symbols
          can\n   be obtained by using the source symbol tuples to determine the number\n
          \  and set of intermediate symbols that must be summed to obtain each\n
          \  missing source symbol.\n   The first step in decoding C is to form a
          decoding schedule.  In this\n   step, A is converted using Gaussian elimination
          (using row operations\n   and row and column reorderings) and after discarding
          M - L rows, into\n   the L x L identity matrix.  The decoding schedule consists
          of the\n   sequence of row operations and row and column reorderings during
          the\n   Gaussian elimination process, and it only depends on A and not on
          D.\n   The decoding of C from D can take place concurrently with the forming\n
          \  of the decoding schedule, or the decoding can take place afterwards\n
          \  based on the decoding schedule.\n   The correspondence between the decoding
          schedule and the decoding of\n   C is as follows.  Let c[0] = 0, c[1] =
          1, ..., c[L-1] = L-1 and d[0]\n   = 0, d[1] = 1, ..., d[M-1] = M-1 initially.\n
          \  o  Each time a multiple, beta, of row i of A is added to row i' in\n
          \     the decoding schedule, then in the decoding process the symbol\n      beta*D[d[i]]
          is added to symbol D[d[i']].\n   o  Each time a row i of A is multiplied
          by an octet beta, then in the\n      decoding process the symbol D[d[i]]
          is also multiplied by beta.\n   o  Each time row i is exchanged with row
          i' in the decoding schedule,\n      then in the decoding process the value
          of d[i] is exchanged with\n      the value of d[i'].\n   o  Each time column
          j is exchanged with column j' in the decoding\n      schedule, then in the
          decoding process the value of c[j] is\n      exchanged with the value of
          c[j'].\n   From this correspondence, it is clear that the total number of\n
          \  operations on symbols in the decoding of the extended source block is\n
          \  the number of row operations (not exchanges) in the Gaussian\n   elimination.
          \ Since A is the L x L identity matrix after the Gaussian\n   elimination
          and after discarding the last M - L rows, it is clear at\n   the end of
          successful decoding that the L symbols D[d[0]], D[d[1]],\n   ..., D[d[L-1]]
          are the values of the L symbols C[c[0]], C[c[1]], ...,\n   C[c[L-1]].\n
          \  The order in which Gaussian elimination is performed to form the\n   decoding
          schedule has no bearing on whether or not the decoding is\n   successful.
          \ However, the speed of the decoding depends heavily on\n   the order in
          which Gaussian elimination is performed.  (Furthermore,\n   maintaining
          a sparse representation of A is crucial, although this is\n   not described
          here.)  The remainder of this section describes an\n   order in which Gaussian
          elimination could be performed that is\n   relatively efficient.\n"
        title: 5.4.2.1.  General
      - contents:
        - "5.4.2.2.  First Phase\n   In the first phase of the Gaussian elimination,
          the matrix A is\n   conceptually partitioned into submatrices and, additionally,
          a matrix\n   X is created.  This matrix has as many rows and columns as
          A, and it\n   will be a lower triangular matrix throughout the first phase.
          \ At the\n   beginning of this phase, the matrix A is copied into the matrix
          X.\n   The submatrix sizes are parameterized by non-negative integers i
          and\n   u, which are initialized to 0 and P, the number of PI symbols,\n
          \  respectively.  The submatrices of A are:\n   1.  The submatrix I defined
          by the intersection of the first i rows\n       and first i columns.  This
          is the identity matrix at the end of\n       each step in the phase.\n   2.
          \ The submatrix defined by the intersection of the first i rows and\n       all
          but the first i columns and last u columns.  All entries of\n       this
          submatrix are zero.\n   3.  The submatrix defined by the intersection of
          the first i columns\n       and all but the first i rows.  All entries of
          this submatrix are\n       zero.\n   4.  The submatrix U defined by the
          intersection of all the rows and\n       the last u columns.\n   5.  The
          submatrix V formed by the intersection of all but the first i\n       columns
          and the last u columns and all but the first i rows.\n   Figure 6 illustrates
          the submatrices of A.  At the beginning of the\n   first phase, V consists
          of the first L-P columns of A, and U consists\n   of the last P columns
          corresponding to the PI symbols.  In each step,\n   a row of A is chosen.\n
          \              +-----------+-----------------+---------+\n               |
          \          |                 |         |\n               |     I     |    All
          Zeros    |         |\n               |           |                 |         |\n
          \              +-----------+-----------------+    U    |\n               |
          \          |                 |         |\n               |           |                 |
          \        |\n               | All Zeros |       V         |         |\n               |
          \          |                 |         |\n               |           |                 |
          \        |\n               +-----------+-----------------+---------+\n               Figure
          6: Submatrices of A in the First Phase\n   The following graph defined by
          the structure of V is used in\n   determining which row of A is chosen.
          \ The columns that intersect V\n   are the nodes in the graph, and the rows
          that have exactly 2 nonzero\n   entries in V and are not HDPC rows are the
          edges of the graph that\n   connect the two columns (nodes) in the positions
          of the two ones.  A\n   component in this graph is a maximal set of nodes
          (columns) and edges\n   (rows) such that there is a path between each pair
          of nodes/edges in\n   the graph.  The size of a component is the number
          of nodes (columns)\n   in the component.\n   There are at most L steps in
          the first phase.  The phase ends\n   successfully when i + u = L, i.e.,
          when V and the all zeros submatrix\n   above V have disappeared, and A consists
          of I, the all zeros\n   submatrix below I, and U.  The phase ends unsuccessfully
          in decoding\n   failure if at some step before V disappears there is no
          nonzero row\n   in V to choose in that step.  In each step, a row of A is
          chosen as\n   follows:\n   o  If all entries of V are zero, then no row
          is chosen and decoding\n      fails.\n   o  Let r be the minimum integer
          such that at least one row of A has\n      exactly r nonzeros in V.\n      *
          \ If r != 2, then choose a row with exactly r nonzeros in V with\n         minimum
          original degree among all such rows, except that HDPC\n         rows should
          not be chosen until all non-HDPC rows have been\n         processed.\n      *
          \ If r = 2 and there is a row with exactly 2 ones in V, then\n         choose
          any row with exactly 2 ones in V that is part of a\n         maximum size
          component in the graph described above that is\n         defined by V.\n
          \     *  If r = 2 and there is no row with exactly 2 ones in V, then\n         choose
          any row with exactly 2 nonzeros in V.\n   After the row is chosen in this
          step, the first row of A that\n   intersects V is exchanged with the chosen
          row so that the chosen row\n   is the first row that intersects V.  The
          columns of A among those\n   that intersect V are reordered so that one
          of the r nonzeros in the\n   chosen row appears in the first column of V
          and so that the remaining\n   r-1 nonzeros appear in the last columns of
          V.  The same row and\n   column operations are also performed on the matrix
          X.  Then, an\n   appropriate multiple of the chosen row is added to all
          the other rows\n   of A below the chosen row that have a nonzero entry in
          the first\n   column of V.  Specifically, if a row below the chosen row
          has entry\n   beta in the first column of V, and the chosen row has entry
          alpha in\n   the first column of V, then beta/alpha multiplied by the chosen
          row\n   is added to this row to leave a zero value in the first column of
          V.\n    Finally, i is incremented by 1 and u is incremented by r-1, which\n
          \  completes the step.\n   Note that efficiency can be improved if the row
          operations identified\n   above are not actually performed until the affected
          row is itself\n   chosen during the decoding process.  This avoids processing
          of row\n   operations for rows that are not eventually used in the decoding\n
          \  process, and in particular this avoids those rows for which beta!=1\n
          \  until they are actually required.  Furthermore, the row operations\n
          \  required for the HDPC rows may be performed for all such rows in one\n
          \  process, by using the algorithm described in Section 5.3.3.3.\n"
        title: 5.4.2.2.  First Phase
      - contents:
        - "5.4.2.3.  Second Phase\n   At this point, all the entries of X outside
          the first i rows and i\n   columns are discarded, so that X has lower triangular
          form.  The last\n   i rows and columns of X are discarded, so that X now
          has i rows and i\n   columns.  The submatrix U is further partitioned into
          the first i\n   rows, U_upper, and the remaining M - i rows, U_lower.  Gaussian\n
          \  elimination is performed in the second phase on U_lower either to\n   determine
          that its rank is less than u (decoding failure) or to\n   convert it into
          a matrix where the first u rows is the identity\n   matrix (success of the
          second phase).  Call this u x u identity\n   matrix I_u.  The M - L rows
          of A that intersect U_lower - I_u are\n   discarded.  After this phase,
          A has L rows and L columns.\n"
        title: 5.4.2.3.  Second Phase
      - contents:
        - "5.4.2.4.  Third Phase\n   After the second phase, the only portion of A
          that needs to be zeroed\n   out to finish converting A into the L x L identity
          matrix is U_upper.\n   The number of rows i of the submatrix U_upper is
          generally much\n   larger than the number of columns u of U_upper.  Moreover,
          at this\n   time, the matrix U_upper is typically dense, i.e., the number
          of\n   nonzero entries of this matrix is large.  To reduce this matrix to
          a\n   sparse form, the sequence of operations performed to obtain the\n
          \  matrix U_lower needs to be inverted.  To this end, the matrix X is\n
          \  multiplied with the submatrix of A consisting of the first i rows of\n
          \  A.  After this operation, the submatrix of A consisting of the\n   intersection
          of the first i rows and columns equals to X, whereas the\n   matrix U_upper
          is transformed to a sparse form.\n"
        title: 5.4.2.4.  Third Phase
      - contents:
        - "5.4.2.5.  Fourth Phase\n   For each of the first i rows of U_upper, do
          the following: if the row\n   has a nonzero entry at position j, and if
          the value of that nonzero\n   entry is b, then add to this row b times row
          j of I_u.  After this\n   step, the submatrix of A consisting of the intersection
          of the first\n   i rows and columns is equal to X, the submatrix U_upper
          consists of\n   zeros, the submatrix consisting of the intersection of the
          last u\n   rows and the first i columns consists of zeros, and the submatrix\n
          \  consisting of the last u rows and columns is the matrix I_u.\n"
        title: 5.4.2.5.  Fourth Phase
      - contents:
        - "5.4.2.6.  Fifth Phase\n   For j from 1 to i, perform the following operations:\n
          \  1.  If A[j,j] is not one, then divide row j of A by A[j,j].\n   2.  For
          l from 1 to j-1, if A[j,l] is nonzero, then add A[j,l]\n       multiplied
          with row l of A to row j of A.\n   After this phase, A is the L x L identity
          matrix and a complete\n   decoding schedule has been successfully formed.
          \ Then, the\n   corresponding decoding consisting of summing known encoding
          symbols\n   can be executed to recover the intermediate symbols based on
          the\n   decoding schedule.  The tuples associated with all source symbols
          are\n   computed according to Section 5.3.3.2.  The tuples for received\n
          \  source symbols are used in the decoding.  The tuples for missing\n   source
          symbols are used to determine which intermediate symbols need\n   to be
          summed to recover the missing source symbols.\n"
        title: 5.4.2.6.  Fifth Phase
      title: 5.4.2.  Decoding an Extended Source Block
    title: 5.4.  Example FEC Decoder
  - contents:
    - "5.5.  Random Numbers\n   The four arrays V0, V1, V2, and V3 used in Section
      5.3.5.1 are\n   provided below.  There are 256 entries in each of the four arrays.\n
      \  The indexing into each array starts at 0, and the entries are 32-bit\n   unsigned
      integers.\n"
    - contents:
      - "5.5.1.  The Table V0\n      251291136, 3952231631, 3370958628, 4070167936,
        123631495,\n      3351110283, 3218676425, 2011642291, 774603218, 2402805061,\n
        \     1004366930, 1843948209, 428891132, 3746331984, 1591258008,\n      3067016507,
        1433388735, 504005498, 2032657933, 3419319784,\n      2805686246, 3102436986,
        3808671154, 2501582075, 3978944421,\n      246043949, 4016898363, 649743608,
        1974987508, 2651273766,\n      2357956801, 689605112, 715807172, 2722736134,
        191939188,\n      3535520147, 3277019569, 1470435941, 3763101702, 3232409631,\n
        \     122701163, 3920852693, 782246947, 372121310, 2995604341,\n      2045698575,
        2332962102, 4005368743, 218596347, 3415381967,\n      4207612806, 861117671,
        3676575285, 2581671944, 3312220480,\n      681232419, 307306866, 4112503940,
        1158111502, 709227802,\n      2724140433, 4201101115, 4215970289, 4048876515,
        3031661061,\n      1909085522, 510985033, 1361682810, 129243379, 3142379587,\n
        \     2569842483, 3033268270, 1658118006, 932109358, 1982290045,\n      2983082771,
        3007670818, 3448104768, 683749698, 778296777,\n      1399125101, 1939403708,
        1692176003, 3868299200, 1422476658,\n      593093658, 1878973865, 2526292949,
        1591602827, 3986158854,\n      3964389521, 2695031039, 1942050155, 424618399,
        1347204291,\n      2669179716, 2434425874, 2540801947, 1384069776, 4123580443,\n
        \     1523670218, 2708475297, 1046771089, 2229796016, 1255426612,\n      4213663089,
        1521339547, 3041843489, 420130494, 10677091,\n      515623176, 3457502702,
        2115821274, 2720124766, 3242576090,\n      854310108, 425973987, 325832382,
        1796851292, 2462744411,\n      1976681690, 1408671665, 1228817808, 3917210003,
        263976645,\n      2593736473, 2471651269, 4291353919, 650792940, 1191583883,\n
        \     3046561335, 2466530435, 2545983082, 969168436, 2019348792,\n      2268075521,
        1169345068, 3250240009, 3963499681, 2560755113,\n      911182396, 760842409,
        3569308693, 2687243553, 381854665,\n      2613828404, 2761078866, 1456668111,
        883760091, 3294951678,\n      1604598575, 1985308198, 1014570543, 2724959607,
        3062518035,\n      3115293053, 138853680, 4160398285, 3322241130, 2068983570,\n
        \     2247491078, 3669524410, 1575146607, 828029864, 3732001371,\n      3422026452,
        3370954177, 4006626915, 543812220, 1243116171,\n      3928372514, 2791443445,
        4081325272, 2280435605, 885616073,\n      616452097, 3188863436, 2780382310,
        2340014831, 1208439576,\n      258356309, 3837963200, 2075009450, 3214181212,
        3303882142,\n      880813252, 1355575717, 207231484, 2420803184, 358923368,\n
        \     1617557768, 3272161958, 1771154147, 2842106362, 1751209208,\n      1421030790,
        658316681, 194065839, 3241510581, 38625260,\n      301875395, 4176141739,
        297312930, 2137802113, 1502984205,\n      3669376622, 3728477036, 234652930,
        2213589897, 2734638932,\n      1129721478, 3187422815, 2859178611, 3284308411,
        3819792700,\n      3557526733, 451874476, 1740576081, 3592838701, 1709429513,\n
        \     3702918379, 3533351328, 1641660745, 179350258, 2380520112,\n      3936163904,
        3685256204, 3156252216, 1854258901, 2861641019,\n      3176611298, 834787554,
        331353807, 517858103, 3010168884,\n      4012642001, 2217188075, 3756943137,
        3077882590, 2054995199,\n      3081443129, 3895398812, 1141097543, 2376261053,
        2626898255,\n      2554703076, 401233789, 1460049922, 678083952, 1064990737,\n
        \     940909784, 1673396780, 528881783, 1712547446, 3629685652,\n      1358307511\n"
      title: 5.5.1.  The Table V0
    - contents:
      - "5.5.2.  The Table V1\n      807385413, 2043073223, 3336749796, 1302105833,
        2278607931,\n      541015020, 1684564270, 372709334, 3508252125, 1768346005,\n
        \     1270451292, 2603029534, 2049387273, 3891424859, 2152948345,\n      4114760273,
        915180310, 3754787998, 700503826, 2131559305,\n      1308908630, 224437350,
        4065424007, 3638665944, 1679385496,\n      3431345226, 1779595665, 3068494238,
        1424062773, 1033448464,\n      4050396853, 3302235057, 420600373, 2868446243,
        311689386,\n      259047959, 4057180909, 1575367248, 4151214153, 110249784,\n
        \     3006865921, 4293710613, 3501256572, 998007483, 499288295,\n      1205710710,
        2997199489, 640417429, 3044194711, 486690751,\n      2686640734, 2394526209,
        2521660077, 49993987, 3843885867,\n      4201106668, 415906198, 19296841,
        2402488407, 2137119134,\n      1744097284, 579965637, 2037662632, 852173610,
        2681403713,\n      1047144830, 2982173936, 910285038, 4187576520, 2589870048,\n
        \     989448887, 3292758024, 506322719, 176010738, 1865471968,\n      2619324712,
        564829442, 1996870325, 339697593, 4071072948,\n      3618966336, 2111320126,
        1093955153, 957978696, 892010560,\n      1854601078, 1873407527, 2498544695,
        2694156259, 1927339682,\n      1650555729, 183933047, 3061444337, 2067387204,
        228962564,\n      3904109414, 1595995433, 1780701372, 2463145963, 307281463,\n
        \     3237929991, 3852995239, 2398693510, 3754138664, 522074127,\n      146352474,
        4104915256, 3029415884, 3545667983, 332038910,\n      976628269, 3123492423,
        3041418372, 2258059298, 2139377204,\n      3243642973, 3226247917, 3674004636,
        2698992189, 3453843574,\n      1963216666, 3509855005, 2358481858, 747331248,
        1957348676,\n      1097574450, 2435697214, 3870972145, 1888833893, 2914085525,\n
        \     4161315584, 1273113343, 3269644828, 3681293816, 412536684,\n      1156034077,
        3823026442, 1066971017, 3598330293, 1979273937,\n      2079029895, 1195045909,
        1071986421, 2712821515, 3377754595,\n      2184151095, 750918864, 2585729879,
        4249895712, 1832579367,\n      1192240192, 946734366, 31230688, 3174399083,
        3549375728,\n      1642430184, 1904857554, 861877404, 3277825584, 4267074718,\n
        \     3122860549, 666423581, 644189126, 226475395, 307789415,\n      1196105631,
        3191691839, 782852669, 1608507813, 1847685900,\n      4069766876, 3931548641,
        2526471011, 766865139, 2115084288,\n      4259411376, 3323683436, 568512177,
        3736601419, 1800276898,\n      4012458395, 1823982, 27980198, 2023839966,
        869505096,\n      431161506, 1024804023, 1853869307, 3393537983, 1500703614,\n
        \     3019471560, 1351086955, 3096933631, 3034634988, 2544598006,\n      1230942551,
        3362230798, 159984793, 491590373, 3993872886,\n      3681855622, 903593547,
        3535062472, 1799803217, 772984149,\n      895863112, 1899036275, 4187322100,
        101856048, 234650315,\n      3183125617, 3190039692, 525584357, 1286834489,
        455810374,\n      1869181575, 922673938, 3877430102, 3422391938, 1414347295,\n
        \     1971054608, 3061798054, 830555096, 2822905141, 167033190,\n      1079139428,
        4210126723, 3593797804, 429192890, 372093950,\n      1779187770, 3312189287,
        204349348, 452421568, 2800540462,\n      3733109044, 1235082423, 1765319556,
        3174729780, 3762994475,\n      3171962488, 442160826, 198349622, 45942637,
        1324086311,\n      2901868599, 678860040, 3812229107, 19936821, 1119590141,\n
        \     3640121682, 3545931032, 2102949142, 2828208598, 3603378023,\n      4135048896\n"
      title: 5.5.2.  The Table V1
    - contents:
      - "5.5.3.  The Table V2\n      1629829892, 282540176, 2794583710, 496504798,
        2990494426,\n      3070701851, 2575963183, 4094823972, 2775723650, 4079480416,\n
        \     176028725, 2246241423, 3732217647, 2196843075, 1306949278,\n      4170992780,
        4039345809, 3209664269, 3387499533, 293063229,\n      3660290503, 2648440860,
        2531406539, 3537879412, 773374739,\n      4184691853, 1804207821, 3347126643,
        3479377103, 3970515774,\n      1891731298, 2368003842, 3537588307, 2969158410,
        4230745262,\n      831906319, 2935838131, 264029468, 120852739, 3200326460,\n
        \     355445271, 2296305141, 1566296040, 1760127056, 20073893,\n      3427103620,
        2866979760, 2359075957, 2025314291, 1725696734,\n      3346087406, 2690756527,
        99815156, 4248519977, 2253762642,\n      3274144518, 598024568, 3299672435,
        556579346, 4121041856,\n      2896948975, 3620123492, 918453629, 3249461198,
        2231414958,\n      3803272287, 3657597946, 2588911389, 242262274, 1725007475,\n
        \     2026427718, 46776484, 2873281403, 2919275846, 3177933051,\n      1918859160,
        2517854537, 1857818511, 3234262050, 479353687,\n      200201308, 2801945841,
        1621715769, 483977159, 423502325,\n      3689396064, 1850168397, 3359959416,
        3459831930, 841488699,\n      3570506095, 930267420, 1564520841, 2505122797,
        593824107,\n      1116572080, 819179184, 3139123629, 1414339336, 1076360795,\n
        \     512403845, 177759256, 1701060666, 2239736419, 515179302,\n      2935012727,
        3821357612, 1376520851, 2700745271, 966853647,\n      1041862223, 715860553,
        171592961, 1607044257, 1227236688,\n      3647136358, 1417559141, 4087067551,
        2241705880, 4194136288,\n      1439041934, 20464430, 119668151, 2021257232,
        2551262694,\n      1381539058, 4082839035, 498179069, 311508499, 3580908637,\n
        \     2889149671, 142719814, 1232184754, 3356662582, 2973775623,\n      1469897084,
        1728205304, 1415793613, 50111003, 3133413359,\n      4074115275, 2710540611,
        2700083070, 2457757663, 2612845330,\n      3775943755, 2469309260, 2560142753,
        3020996369, 1691667711,\n      4219602776, 1687672168, 1017921622, 2307642321,
        368711460,\n      3282925988, 213208029, 4150757489, 3443211944, 2846101972,\n
        \     4106826684, 4272438675, 2199416468, 3710621281, 497564971,\n      285138276,
        765042313, 916220877, 3402623607, 2768784621,\n      1722849097, 3386397442,
        487920061, 3569027007, 3424544196,\n      217781973, 2356938519, 3252429414,
        145109750, 2692588106,\n      2454747135, 1299493354, 4120241887, 2088917094,
        932304329,\n      1442609203, 952586974, 3509186750, 753369054, 854421006,\n
        \     1954046388, 2708927882, 4047539230, 3048925996, 1667505809,\n      805166441,
        1182069088, 4265546268, 4215029527, 3374748959,\n      373532666, 2454243090,
        2371530493, 3651087521, 2619878153,\n      1651809518, 1553646893, 1227452842,
        703887512, 3696674163,\n      2552507603, 2635912901, 895130484, 3287782244,
        3098973502,\n      990078774, 3780326506, 2290845203, 41729428, 1949580860,\n
        \     2283959805, 1036946170, 1694887523, 4880696, 466000198,\n      2765355283,
        3318686998, 1266458025, 3919578154, 3545413527,\n      2627009988, 3744680394,
        1696890173, 3250684705, 4142417708,\n      915739411, 3308488877, 1289361460,
        2942552331, 1169105979,\n      3342228712, 698560958, 1356041230, 2401944293,
        107705232,\n      3701895363, 903928723, 3646581385, 844950914, 1944371367,\n
        \     3863894844, 2946773319, 1972431613, 1706989237, 29917467,\n      3497665928\n"
      title: 5.5.3.  The Table V2
    - contents:
      - "5.5.4.  The Table V3\n      1191369816, 744902811, 2539772235, 3213192037,
        3286061266,\n      1200571165, 2463281260, 754888894, 714651270, 1968220972,\n
        \     3628497775, 1277626456, 1493398934, 364289757, 2055487592,\n      3913468088,
        2930259465, 902504567, 3967050355, 2056499403,\n      692132390, 186386657,
        832834706, 859795816, 1283120926,\n      2253183716, 3003475205, 1755803552,
        2239315142, 4271056352,\n      2184848469, 769228092, 1249230754, 1193269205,
        2660094102,\n      642979613, 1687087994, 2726106182, 446402913, 4122186606,\n
        \     3771347282, 37667136, 192775425, 3578702187, 1952659096,\n      3989584400,
        3069013882, 2900516158, 4045316336, 3057163251,\n      1702104819, 4116613420,
        3575472384, 2674023117, 1409126723,\n      3215095429, 1430726429, 2544497368,
        1029565676, 1855801827,\n      4262184627, 1854326881, 2906728593, 3277836557,
        2787697002,\n      2787333385, 3105430738, 2477073192, 748038573, 1088396515,\n
        \     1611204853, 201964005, 3745818380, 3654683549, 3816120877,\n      3915783622,
        2563198722, 1181149055, 33158084, 3723047845,\n      3790270906, 3832415204,
        2959617497, 372900708, 1286738499,\n      1932439099, 3677748309, 2454711182,
        2757856469, 2134027055,\n      2780052465, 3190347618, 3758510138, 3626329451,
        1120743107,\n      1623585693, 1389834102, 2719230375, 3038609003, 462617590,\n
        \     260254189, 3706349764, 2556762744, 2874272296, 2502399286,\n      4216263978,
        2683431180, 2168560535, 3561507175, 668095726,\n      680412330, 3726693946,
        4180630637, 3335170953, 942140968,\n      2711851085, 2059233412, 4265696278,
        3204373534, 232855056,\n      881788313, 2258252172, 2043595984, 3758795150,
        3615341325,\n      2138837681, 1351208537, 2923692473, 3402482785, 2105383425,\n
        \     2346772751, 499245323, 3417846006, 2366116814, 2543090583,\n      1828551634,
        3148696244, 3853884867, 1364737681, 2200687771,\n      2689775688, 232720625,
        4071657318, 2671968983, 3531415031,\n      1212852141, 867923311, 3740109711,
        1923146533, 3237071777,\n      3100729255, 3247856816, 906742566, 4047640575,
        4007211572,\n      3495700105, 1171285262, 2835682655, 1634301229, 3115169925,\n
        \     2289874706, 2252450179, 944880097, 371933491, 1649074501,\n      2208617414,
        2524305981, 2496569844, 2667037160, 1257550794,\n      3399219045, 3194894295,
        1643249887, 342911473, 891025733,\n      3146861835, 3789181526, 938847812,
        1854580183, 2112653794,\n      2960702988, 1238603378, 2205280635, 1666784014,
        2520274614,\n      3355493726, 2310872278, 3153920489, 2745882591, 1200203158,\n
        \     3033612415, 2311650167, 1048129133, 4206710184, 4209176741,\n      2640950279,
        2096382177, 4116899089, 3631017851, 4104488173,\n      1857650503, 3801102932,
        445806934, 3055654640, 897898279,\n      3234007399, 1325494930, 2982247189,
        1619020475, 2720040856,\n      885096170, 3485255499, 2983202469, 3891011124,
        546522756,\n      1524439205, 2644317889, 2170076800, 2969618716, 961183518,\n
        \     1081831074, 1037015347, 3289016286, 2331748669, 620887395,\n      303042654,
        3990027945, 1562756376, 3413341792, 2059647769,\n      2823844432, 674595301,
        2457639984, 4076754716, 2447737904,\n      1583323324, 625627134, 3076006391,
        345777990, 1684954145,\n      879227329, 3436182180, 1522273219, 3802543817,
        1456017040,\n      1897819847, 2970081129, 1382576028, 3820044861, 1044428167,\n
        \     612252599, 3340478395, 2150613904, 3397625662, 3573635640,\n      3432275192\n"
      title: 5.5.4.  The Table V3
    title: 5.5.  Random Numbers
  - contents:
    - "5.6.  Systematic Indices and Other Parameters\n   Table 2 below specifies the
      supported values of K'.  The table also\n   specifies for each supported value
      of K' the systematic index J(K'),\n   the number H(K') of HDPC symbols, the
      number S(K') of LDPC symbols,\n   and the number W(K') of LT symbols.  For each
      value of K', the\n   corresponding values of S(K') and W(K') are prime numbers.\n
      \  The systematic index J(K') is designed to have the property that the\n   set
      of source symbol tuples (d[0], a[0], b[0], d1[0], a1[0], b1[0]),\n   ..., (d[K'-1],
      a[K'-1], b[K'-1], d1[K'-1], a1[K'-1], b1[K'-1]) are\n   such that the L intermediate
      symbols are uniquely defined, i.e., the\n   matrix A in Figure 6 has full rank
      and is therefore invertible.\n                 +-------+-------+-------+-------+-------+\n
      \                | K'    | J(K') | S(K') | H(K') | W(K') |\n                 +-------+-------+-------+-------+-------+\n
      \                | 10    | 254   | 7     | 10    | 17    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 12    | 630   | 7     | 10    | 19    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 18    | 682   | 11    | 10    | 29    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 20    | 293   | 11    | 10    | 31    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 26    | 80    | 11    | 10    | 37    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 30    | 566   | 11    | 10    | 41    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 32    | 860   | 11    | 10    | 43    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 36    | 267   | 11    | 10    | 47    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 42    | 822   | 11    | 10    | 53    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 46    | 506   | 13    | 10    | 59    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 48    | 589   | 13    | 10    | 61    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 49    | 87    | 13    | 10    | 61    |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      55    | 520   | 13    | 10    | 67    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 60    | 159   | 13    | 10    | 71    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 62    | 235   | 13    | 10    | 73    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 69    | 157   | 13    | 10    | 79    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 75    | 502   | 17    | 10    | 89    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 84    | 334   | 17    | 10    | 97    |\n                 +-------+-------+-------+-------+-------+\n
      \                | 88    | 583   | 17    | 10    | 101   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 91    | 66    | 17    | 10    | 103   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 95    | 352   | 17    | 10    | 107   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 97    | 365   | 17    | 10    | 109   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 101   | 562   | 17    | 10    | 113   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 114   | 5     | 19    | 10    | 127   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 119   | 603   | 19    | 10    | 131   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 125   | 721   | 19    | 10    | 137   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 127   | 28    | 19    | 10    | 139   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 138   | 660   | 19    | 10    | 149   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 140   | 829   | 19    | 10    | 151   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 149   | 900   | 23    | 10    | 163   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 153   | 930   | 23    | 10    | 167   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 160   | 814   | 23    | 10    | 173   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 166   | 661   | 23    | 10    | 179   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 168   | 693   | 23    | 10    | 181   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 179   | 780   | 23    | 10    | 191   |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      181   | 605   | 23    | 10    | 193   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 185   | 551   | 23    | 10    | 197   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 187   | 777   | 23    | 10    | 199   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 200   | 491   | 23    | 10    | 211   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 213   | 396   | 23    | 10    | 223   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 217   | 764   | 29    | 10    | 233   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 225   | 843   | 29    | 10    | 241   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 236   | 646   | 29    | 10    | 251   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 242   | 557   | 29    | 10    | 257   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 248   | 608   | 29    | 10    | 263   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 257   | 265   | 29    | 10    | 271   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 263   | 505   | 29    | 10    | 277   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 269   | 722   | 29    | 10    | 283   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 280   | 263   | 29    | 10    | 293   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 295   | 999   | 29    | 10    | 307   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 301   | 874   | 29    | 10    | 313   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 305   | 160   | 29    | 10    | 317   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 324   | 575   | 31    | 10    | 337   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 337   | 210   | 31    | 10    | 349   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 341   | 513   | 31    | 10    | 353   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 347   | 503   | 31    | 10    | 359   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 355   | 558   | 31    | 10    | 367   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 362   | 932   | 31    | 10    | 373   |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      368   | 404   | 31    | 10    | 379   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 372   | 520   | 37    | 10    | 389   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 380   | 846   | 37    | 10    | 397   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 385   | 485   | 37    | 10    | 401   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 393   | 728   | 37    | 10    | 409   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 405   | 554   | 37    | 10    | 421   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 418   | 471   | 37    | 10    | 433   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 428   | 641   | 37    | 10    | 443   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 434   | 732   | 37    | 10    | 449   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 447   | 193   | 37    | 10    | 461   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 453   | 934   | 37    | 10    | 467   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 466   | 864   | 37    | 10    | 479   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 478   | 790   | 37    | 10    | 491   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 486   | 912   | 37    | 10    | 499   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 491   | 617   | 37    | 10    | 503   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 497   | 587   | 37    | 10    | 509   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 511   | 800   | 37    | 10    | 523   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 526   | 923   | 41    | 10    | 541   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 532   | 998   | 41    | 10    | 547   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 542   | 92    | 41    | 10    | 557   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 549   | 497   | 41    | 10    | 563   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 557   | 559   | 41    | 10    | 571   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 563   | 667   | 41    | 10    | 577   |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      573   | 912   | 41    | 10    | 587   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 580   | 262   | 41    | 10    | 593   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 588   | 152   | 41    | 10    | 601   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 594   | 526   | 41    | 10    | 607   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 600   | 268   | 41    | 10    | 613   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 606   | 212   | 41    | 10    | 619   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 619   | 45    | 41    | 10    | 631   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 633   | 898   | 43    | 10    | 647   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 640   | 527   | 43    | 10    | 653   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 648   | 558   | 43    | 10    | 661   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 666   | 460   | 47    | 10    | 683   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 675   | 5     | 47    | 10    | 691   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 685   | 895   | 47    | 10    | 701   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 693   | 996   | 47    | 10    | 709   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 703   | 282   | 47    | 10    | 719   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 718   | 513   | 47    | 10    | 733   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 728   | 865   | 47    | 10    | 743   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 736   | 870   | 47    | 10    | 751   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 747   | 239   | 47    | 10    | 761   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 759   | 452   | 47    | 10    | 773   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 778   | 862   | 53    | 10    | 797   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 792   | 852   | 53    | 10    | 811   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 802   | 643   | 53    | 10    | 821   |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      811   | 543   | 53    | 10    | 829   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 821   | 447   | 53    | 10    | 839   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 835   | 321   | 53    | 10    | 853   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 845   | 287   | 53    | 10    | 863   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 860   | 12    | 53    | 10    | 877   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 870   | 251   | 53    | 10    | 887   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 891   | 30    | 53    | 10    | 907   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 903   | 621   | 53    | 10    | 919   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 913   | 555   | 53    | 10    | 929   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 926   | 127   | 53    | 10    | 941   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 938   | 400   | 53    | 10    | 953   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 950   | 91    | 59    | 10    | 971   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 963   | 916   | 59    | 10    | 983   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 977   | 935   | 59    | 10    | 997   |\n                 +-------+-------+-------+-------+-------+\n
      \                | 989   | 691   | 59    | 10    | 1009  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1002  | 299   | 59    | 10    | 1021  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1020  | 282   | 59    | 10    | 1039  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1032  | 824   | 59    | 10    | 1051  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1050  | 536   | 59    | 11    | 1069  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1074  | 596   | 59    | 11    | 1093  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1085  | 28    | 59    | 11    | 1103  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1099  | 947   | 59    | 11    | 1117  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1111  | 162   | 59    | 11    | 1129  |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      1136  | 536   | 59    | 11    | 1153  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1152  | 1000  | 61    | 11    | 1171  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1169  | 251   | 61    | 11    | 1187  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1183  | 673   | 61    | 11    | 1201  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1205  | 559   | 61    | 11    | 1223  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1220  | 923   | 61    | 11    | 1237  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1236  | 81    | 67    | 11    | 1259  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1255  | 478   | 67    | 11    | 1277  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1269  | 198   | 67    | 11    | 1291  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1285  | 137   | 67    | 11    | 1307  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1306  | 75    | 67    | 11    | 1327  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1347  | 29    | 67    | 11    | 1367  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1361  | 231   | 67    | 11    | 1381  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1389  | 532   | 67    | 11    | 1409  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1404  | 58    | 67    | 11    | 1423  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1420  | 60    | 67    | 11    | 1439  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1436  | 964   | 71    | 11    | 1459  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1461  | 624   | 71    | 11    | 1483  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1477  | 502   | 71    | 11    | 1499  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1502  | 636   | 71    | 11    | 1523  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1522  | 986   | 71    | 11    | 1543  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1539  | 950   | 71    | 11    | 1559  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1561  | 735   | 73    | 11    | 1583  |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      1579  | 866   | 73    | 11    | 1601  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1600  | 203   | 73    | 11    | 1621  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1616  | 83    | 73    | 11    | 1637  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1649  | 14    | 73    | 11    | 1669  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1673  | 522   | 79    | 11    | 1699  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1698  | 226   | 79    | 11    | 1723  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1716  | 282   | 79    | 11    | 1741  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1734  | 88    | 79    | 11    | 1759  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1759  | 636   | 79    | 11    | 1783  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1777  | 860   | 79    | 11    | 1801  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1800  | 324   | 79    | 11    | 1823  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1824  | 424   | 79    | 11    | 1847  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1844  | 999   | 79    | 11    | 1867  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1863  | 682   | 83    | 11    | 1889  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1887  | 814   | 83    | 11    | 1913  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1906  | 979   | 83    | 11    | 1931  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1926  | 538   | 83    | 11    | 1951  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1954  | 278   | 83    | 11    | 1979  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 1979  | 580   | 83    | 11    | 2003  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2005  | 773   | 83    | 11    | 2029  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2040  | 911   | 89    | 11    | 2069  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2070  | 506   | 89    | 11    | 2099  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2103  | 628   | 89    | 11    | 2131  |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      2125  | 282   | 89    | 11    | 2153  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2152  | 309   | 89    | 11    | 2179  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2195  | 858   | 89    | 11    | 2221  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2217  | 442   | 89    | 11    | 2243  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2247  | 654   | 89    | 11    | 2273  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2278  | 82    | 97    | 11    | 2311  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2315  | 428   | 97    | 11    | 2347  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2339  | 442   | 97    | 11    | 2371  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2367  | 283   | 97    | 11    | 2399  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2392  | 538   | 97    | 11    | 2423  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2416  | 189   | 97    | 11    | 2447  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2447  | 438   | 97    | 11    | 2477  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2473  | 912   | 97    | 11    | 2503  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2502  | 1     | 97    | 11    | 2531  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2528  | 167   | 97    | 11    | 2557  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2565  | 272   | 97    | 11    | 2593  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2601  | 209   | 101   | 11    | 2633  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2640  | 927   | 101   | 11    | 2671  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2668  | 386   | 101   | 11    | 2699  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2701  | 653   | 101   | 11    | 2731  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2737  | 669   | 101   | 11    | 2767  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2772  | 431   | 101   | 11    | 2801  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2802  | 793   | 103   | 11    | 2833  |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      2831  | 588   | 103   | 11    | 2861  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2875  | 777   | 107   | 11    | 2909  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2906  | 939   | 107   | 11    | 2939  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2938  | 864   | 107   | 11    | 2971  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 2979  | 627   | 107   | 11    | 3011  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3015  | 265   | 109   | 11    | 3049  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3056  | 976   | 109   | 11    | 3089  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3101  | 988   | 113   | 11    | 3137  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3151  | 507   | 113   | 11    | 3187  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3186  | 640   | 113   | 11    | 3221  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3224  | 15    | 113   | 11    | 3259  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3265  | 667   | 113   | 11    | 3299  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3299  | 24    | 127   | 11    | 3347  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3344  | 877   | 127   | 11    | 3391  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3387  | 240   | 127   | 11    | 3433  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3423  | 720   | 127   | 11    | 3469  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3466  | 93    | 127   | 11    | 3511  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3502  | 919   | 127   | 11    | 3547  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3539  | 635   | 127   | 11    | 3583  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3579  | 174   | 127   | 11    | 3623  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3616  | 647   | 127   | 11    | 3659  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3658  | 820   | 127   | 11    | 3701  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3697  | 56    | 127   | 11    | 3739  |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      3751  | 485   | 127   | 11    | 3793  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3792  | 210   | 127   | 11    | 3833  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3840  | 124   | 127   | 11    | 3881  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3883  | 546   | 127   | 11    | 3923  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3924  | 954   | 131   | 11    | 3967  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 3970  | 262   | 131   | 11    | 4013  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4015  | 927   | 131   | 11    | 4057  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4069  | 957   | 131   | 11    | 4111  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4112  | 726   | 137   | 11    | 4159  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4165  | 583   | 137   | 11    | 4211  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4207  | 782   | 137   | 11    | 4253  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4252  | 37    | 137   | 11    | 4297  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4318  | 758   | 137   | 11    | 4363  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4365  | 777   | 137   | 11    | 4409  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4418  | 104   | 139   | 11    | 4463  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4468  | 476   | 139   | 11    | 4513  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4513  | 113   | 149   | 11    | 4567  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4567  | 313   | 149   | 11    | 4621  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4626  | 102   | 149   | 11    | 4679  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4681  | 501   | 149   | 11    | 4733  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4731  | 332   | 149   | 11    | 4783  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4780  | 786   | 149   | 11    | 4831  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4838  | 99    | 149   | 11    | 4889  |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      4901  | 658   | 149   | 11    | 4951  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 4954  | 794   | 149   | 11    | 5003  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5008  | 37    | 151   | 11    | 5059  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5063  | 471   | 151   | 11    | 5113  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5116  | 94    | 157   | 11    | 5171  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5172  | 873   | 157   | 11    | 5227  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5225  | 918   | 157   | 11    | 5279  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5279  | 945   | 157   | 11    | 5333  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5334  | 211   | 157   | 11    | 5387  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5391  | 341   | 157   | 11    | 5443  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5449  | 11    | 163   | 11    | 5507  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5506  | 578   | 163   | 11    | 5563  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5566  | 494   | 163   | 11    | 5623  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5637  | 694   | 163   | 11    | 5693  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5694  | 252   | 163   | 11    | 5749  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5763  | 451   | 167   | 11    | 5821  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5823  | 83    | 167   | 11    | 5881  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5896  | 689   | 167   | 11    | 5953  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 5975  | 488   | 173   | 11    | 6037  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 6039  | 214   | 173   | 11    | 6101  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 6102  | 17    | 173   | 11    | 6163  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 6169  | 469   | 173   | 11    | 6229  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 6233  | 263   | 179   | 11    | 6299  |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      6296  | 309   | 179   | 11    | 6361  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 6363  | 984   | 179   | 11    | 6427  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 6427  | 123   | 179   | 11    | 6491  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 6518  | 360   | 179   | 11    | 6581  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 6589  | 863   | 181   | 11    | 6653  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 6655  | 122   | 181   | 11    | 6719  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 6730  | 522   | 191   | 11    | 6803  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 6799  | 539   | 191   | 11    | 6871  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 6878  | 181   | 191   | 11    | 6949  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 6956  | 64    | 191   | 11    | 7027  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 7033  | 387   | 191   | 11    | 7103  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 7108  | 967   | 191   | 11    | 7177  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 7185  | 843   | 191   | 11    | 7253  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 7281  | 999   | 193   | 11    | 7351  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 7360  | 76    | 197   | 11    | 7433  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 7445  | 142   | 197   | 11    | 7517  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 7520  | 599   | 197   | 11    | 7591  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 7596  | 576   | 199   | 11    | 7669  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 7675  | 176   | 211   | 11    | 7759  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 7770  | 392   | 211   | 11    | 7853  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 7855  | 332   | 211   | 11    | 7937  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 7935  | 291   | 211   | 11    | 8017  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 8030  | 913   | 211   | 11    | 8111  |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      8111  | 608   | 211   | 11    | 8191  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 8194  | 212   | 211   | 11    | 8273  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 8290  | 696   | 211   | 11    | 8369  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 8377  | 931   | 223   | 11    | 8467  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 8474  | 326   | 223   | 11    | 8563  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 8559  | 228   | 223   | 11    | 8647  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 8654  | 706   | 223   | 11    | 8741  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 8744  | 144   | 223   | 11    | 8831  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 8837  | 83    | 223   | 11    | 8923  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 8928  | 743   | 223   | 11    | 9013  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 9019  | 187   | 223   | 11    | 9103  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 9111  | 654   | 227   | 11    | 9199  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 9206  | 359   | 227   | 11    | 9293  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 9303  | 493   | 229   | 11    | 9391  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 9400  | 369   | 233   | 11    | 9491  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 9497  | 981   | 233   | 11    | 9587  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 9601  | 276   | 239   | 11    | 9697  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 9708  | 647   | 239   | 11    | 9803  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 9813  | 389   | 239   | 11    | 9907  |\n                 +-------+-------+-------+-------+-------+\n
      \                | 9916  | 80    | 239   | 11    | 10009 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 10017 | 396   | 241   | 11    | 10111 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 10120 | 580   | 251   | 11    | 10223 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 10241 | 873   | 251   | 11    | 10343 |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      10351 | 15    | 251   | 11    | 10453 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 10458 | 976   | 251   | 11    | 10559 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 10567 | 584   | 251   | 11    | 10667 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 10676 | 267   | 257   | 11    | 10781 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 10787 | 876   | 257   | 11    | 10891 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 10899 | 642   | 257   | 12    | 11003 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 11015 | 794   | 257   | 12    | 11119 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 11130 | 78    | 263   | 12    | 11239 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 11245 | 736   | 263   | 12    | 11353 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 11358 | 882   | 269   | 12    | 11471 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 11475 | 251   | 269   | 12    | 11587 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 11590 | 434   | 269   | 12    | 11701 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 11711 | 204   | 269   | 12    | 11821 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 11829 | 256   | 271   | 12    | 11941 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 11956 | 106   | 277   | 12    | 12073 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 12087 | 375   | 277   | 12    | 12203 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 12208 | 148   | 277   | 12    | 12323 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 12333 | 496   | 281   | 12    | 12451 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 12460 | 88    | 281   | 12    | 12577 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 12593 | 826   | 293   | 12    | 12721 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 12726 | 71    | 293   | 12    | 12853 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 12857 | 925   | 293   | 12    | 12983 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 13002 | 760   | 293   | 12    | 13127 |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      13143 | 130   | 293   | 12    | 13267 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 13284 | 641   | 307   | 12    | 13421 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 13417 | 400   | 307   | 12    | 13553 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 13558 | 480   | 307   | 12    | 13693 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 13695 | 76    | 307   | 12    | 13829 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 13833 | 665   | 307   | 12    | 13967 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 13974 | 910   | 307   | 12    | 14107 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 14115 | 467   | 311   | 12    | 14251 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 14272 | 964   | 311   | 12    | 14407 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 14415 | 625   | 313   | 12    | 14551 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 14560 | 362   | 317   | 12    | 14699 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 14713 | 759   | 317   | 12    | 14851 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 14862 | 728   | 331   | 12    | 15013 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 15011 | 343   | 331   | 12    | 15161 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 15170 | 113   | 331   | 12    | 15319 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 15325 | 137   | 331   | 12    | 15473 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 15496 | 308   | 331   | 12    | 15643 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 15651 | 800   | 337   | 12    | 15803 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 15808 | 177   | 337   | 12    | 15959 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 15977 | 961   | 337   | 12    | 16127 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 16161 | 958   | 347   | 12    | 16319 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 16336 | 72    | 347   | 12    | 16493 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 16505 | 732   | 347   | 12    | 16661 |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      16674 | 145   | 349   | 12    | 16831 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 16851 | 577   | 353   | 12    | 17011 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 17024 | 305   | 353   | 12    | 17183 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 17195 | 50    | 359   | 12    | 17359 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 17376 | 351   | 359   | 12    | 17539 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 17559 | 175   | 367   | 12    | 17729 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 17742 | 727   | 367   | 12    | 17911 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 17929 | 902   | 367   | 12    | 18097 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 18116 | 409   | 373   | 12    | 18289 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 18309 | 776   | 373   | 12    | 18481 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 18503 | 586   | 379   | 12    | 18679 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 18694 | 451   | 379   | 12    | 18869 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 18909 | 287   | 383   | 12    | 19087 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 19126 | 246   | 389   | 12    | 19309 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 19325 | 222   | 389   | 12    | 19507 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 19539 | 563   | 397   | 12    | 19727 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 19740 | 839   | 397   | 12    | 19927 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 19939 | 897   | 401   | 12    | 20129 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 20152 | 409   | 401   | 12    | 20341 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 20355 | 618   | 409   | 12    | 20551 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 20564 | 439   | 409   | 12    | 20759 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 20778 | 95    | 419   | 13    | 20983 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 20988 | 448   | 419   | 13    | 21191 |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      21199 | 133   | 419   | 13    | 21401 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 21412 | 938   | 419   | 13    | 21613 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 21629 | 423   | 431   | 13    | 21841 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 21852 | 90    | 431   | 13    | 22063 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 22073 | 640   | 431   | 13    | 22283 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 22301 | 922   | 433   | 13    | 22511 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 22536 | 250   | 439   | 13    | 22751 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 22779 | 367   | 439   | 13    | 22993 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 23010 | 447   | 443   | 13    | 23227 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 23252 | 559   | 449   | 13    | 23473 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 23491 | 121   | 457   | 13    | 23719 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 23730 | 623   | 457   | 13    | 23957 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 23971 | 450   | 457   | 13    | 24197 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 24215 | 253   | 461   | 13    | 24443 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 24476 | 106   | 467   | 13    | 24709 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 24721 | 863   | 467   | 13    | 24953 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 24976 | 148   | 479   | 13    | 25219 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 25230 | 427   | 479   | 13    | 25471 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 25493 | 138   | 479   | 13    | 25733 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 25756 | 794   | 487   | 13    | 26003 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 26022 | 247   | 487   | 13    | 26267 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 26291 | 562   | 491   | 13    | 26539 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 26566 | 53    | 499   | 13    | 26821 |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      26838 | 135   | 499   | 13    | 27091 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 27111 | 21    | 503   | 13    | 27367 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 27392 | 201   | 509   | 13    | 27653 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 27682 | 169   | 521   | 13    | 27953 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 27959 | 70    | 521   | 13    | 28229 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 28248 | 386   | 521   | 13    | 28517 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 28548 | 226   | 523   | 13    | 28817 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 28845 | 3     | 541   | 13    | 29131 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 29138 | 769   | 541   | 13    | 29423 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 29434 | 590   | 541   | 13    | 29717 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 29731 | 672   | 541   | 13    | 30013 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 30037 | 713   | 547   | 13    | 30323 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 30346 | 967   | 547   | 13    | 30631 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 30654 | 368   | 557   | 14    | 30949 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 30974 | 348   | 557   | 14    | 31267 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 31285 | 119   | 563   | 14    | 31583 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 31605 | 503   | 569   | 14    | 31907 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 31948 | 181   | 571   | 14    | 32251 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 32272 | 394   | 577   | 14    | 32579 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 32601 | 189   | 587   | 14    | 32917 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 32932 | 210   | 587   | 14    | 33247 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 33282 | 62    | 593   | 14    | 33601 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 33623 | 273   | 593   | 14    | 33941 |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      33961 | 554   | 599   | 14    | 34283 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 34302 | 936   | 607   | 14    | 34631 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 34654 | 483   | 607   | 14    | 34981 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 35031 | 397   | 613   | 14    | 35363 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 35395 | 241   | 619   | 14    | 35731 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 35750 | 500   | 631   | 14    | 36097 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 36112 | 12    | 631   | 14    | 36457 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 36479 | 958   | 641   | 14    | 36833 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 36849 | 524   | 641   | 14    | 37201 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 37227 | 8     | 643   | 14    | 37579 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 37606 | 100   | 653   | 14    | 37967 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 37992 | 339   | 653   | 14    | 38351 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 38385 | 804   | 659   | 14    | 38749 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 38787 | 510   | 673   | 14    | 39163 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 39176 | 18    | 673   | 14    | 39551 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 39576 | 412   | 677   | 14    | 39953 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 39980 | 394   | 683   | 14    | 40361 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 40398 | 830   | 691   | 15    | 40787 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 40816 | 535   | 701   | 15    | 41213 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 41226 | 199   | 701   | 15    | 41621 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 41641 | 27    | 709   | 15    | 42043 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 42067 | 298   | 709   | 15    | 42467 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 42490 | 368   | 719   | 15    | 42899 |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      42916 | 755   | 727   | 15    | 43331 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 43388 | 379   | 727   | 15    | 43801 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 43840 | 73    | 733   | 15    | 44257 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 44279 | 387   | 739   | 15    | 44701 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 44729 | 457   | 751   | 15    | 45161 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 45183 | 761   | 751   | 15    | 45613 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 45638 | 855   | 757   | 15    | 46073 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 46104 | 370   | 769   | 15    | 46549 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 46574 | 261   | 769   | 15    | 47017 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 47047 | 299   | 787   | 15    | 47507 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 47523 | 920   | 787   | 15    | 47981 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 48007 | 269   | 787   | 15    | 48463 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 48489 | 862   | 797   | 15    | 48953 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 48976 | 349   | 809   | 15    | 49451 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 49470 | 103   | 809   | 15    | 49943 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 49978 | 115   | 821   | 15    | 50461 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 50511 | 93    | 821   | 16    | 50993 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 51017 | 982   | 827   | 16    | 51503 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 51530 | 432   | 839   | 16    | 52027 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 52062 | 340   | 853   | 16    | 52571 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 52586 | 173   | 853   | 16    | 53093 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 53114 | 421   | 857   | 16    | 53623 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 53650 | 330   | 863   | 16    | 54163 |\n                 +-------+-------+-------+-------+-------+\n
      \                +-------+-------+-------+-------+-------+\n                 |
      54188 | 624   | 877   | 16    | 54713 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 54735 | 233   | 877   | 16    | 55259 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 55289 | 362   | 883   | 16    | 55817 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 55843 | 963   | 907   | 16    | 56393 |\n                 +-------+-------+-------+-------+-------+\n
      \                | 56403 | 471   | 907   | 16    | 56951 |\n                 +-------+-------+-------+-------+-------+\n
      \            Table 2: Systematic Indices and Other Parameters\n"
    title: 5.6.  Systematic Indices and Other Parameters
  - contents:
    - '5.7.  Operating with Octets, Symbols, and Matrices

      '
    - contents:
      - "5.7.1.  General\n   The remainder of this section describes the arithmetic
        operations\n   that are used to generate encoding symbols from source symbols
        and to\n   generate source symbols from encoding symbols.  Mathematically,\n
        \  octets can be thought of as elements of a finite field, i.e., the\n   finite
        field GF(256) with 256 elements, and thus the addition and\n   multiplication
        operations and identity elements and inverses over\n   both operations are
        defined.  Matrix operations and symbol operations\n   are defined based on
        the arithmetic operations on octets.  This\n   allows a full implementation
        of these arithmetic operations without\n   having to understand the underlying
        mathematics of finite fields.\n"
      title: 5.7.1.  General
    - contents:
      - "5.7.2.  Arithmetic Operations on Octets\n   Octets are mapped to non-negative
        integers in the range 0 through 255\n   in the usual way: A single octet of
        data from a symbol,\n   B[7],B[6],B[5],B[4],B[3],B[2],B[1],B[0], where B[7]
        is the highest\n   order bit and B[0] is the lowest order bit, is mapped to
        the integer\n   i=B[7]*128+B[6]*64+B[5]*32+B[4]*16+B[3]*8+B[2]*4+B[1]*2+B[0].\n
        \  The addition of two octets u and v is defined as the exclusive-or\n   operation,
        i.e.,\n      u + v = u ^ v.\n   Subtraction is defined in the same way, so
        we also have\n      u - v = u ^ v.\n   The zero element (additive identity)
        is the octet represented by the\n   integer 0.  The additive inverse of u
        is simply u, i.e.,\n      u + u = 0.\n   The multiplication of two octets
        is defined with the help of two\n   tables OCT_EXP and OCT_LOG, which are
        given in Section 5.7.3 and\n   Section 5.7.4, respectively.  The table OCT_LOG
        maps octets (other\n   than the zero element) to non-negative integers, and
        OCT_EXP maps\n   non-negative integers to octets.  For two octets u and v,
        we define\n      u * v =\n         0, if either u or v are 0,\n         OCT_EXP[OCT_LOG[u]
        + OCT_LOG[v]] otherwise.\n   Note that the '+' on the right-hand side of the
        above is the usual\n   integer addition, since its arguments are ordinary
        integers.\n   The division u / v of two octets u and v, and where v != 0,
        is\n   defined as follows:\n      u / v =\n         0, if u == 0,\n         OCT_EXP[OCT_LOG[u]
        - OCT_LOG[v] + 255] otherwise.\n   The one element (multiplicative identity)
        is the octet represented by\n   the integer 1.  For an octet u that is not
        the zero element, i.e.,\n   the multiplicative inverse of u is\n      OCT_EXP[255
        - OCT_LOG[u]].\n   The octet denoted by alpha is the octet with the integer\n
        \  representation 2.  If i is a non-negative integer 0 <= i < 256, we\n   have\n
        \     alpha^^i = OCT_EXP[i].\n"
      title: 5.7.2.  Arithmetic Operations on Octets
    - contents:
      - "5.7.3.  The Table OCT_EXP\n   The table OCT_EXP contains 510 octets.  The
        indexing starts at 0 and\n   ranges to 509, and the entries are the octets
        with the following\n   positive integer representation:\n   1, 2, 4, 8, 16,
        32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38, 76,\n   152, 45, 90, 180,
        117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192, 157,\n   39, 78, 156, 37, 74,
        148, 53, 106, 212, 181, 119, 238, 193, 159, 35,\n   70, 140, 5, 10, 20, 40,
        80, 160, 93, 186, 105, 210, 185, 111, 222,\n   161, 95, 190, 97, 194, 153,
        47, 94, 188, 101, 202, 137, 15, 30, 60,\n   120, 240, 253, 231, 211, 187,
        107, 214, 177, 127, 254, 225, 223, 163,\n   91, 182, 113, 226, 217, 175, 67,
        134, 17, 34, 68, 136, 13, 26, 52,\n   104, 208, 189, 103, 206, 129, 31, 62,
        124, 248, 237, 199, 147, 59,\n   118, 236, 197, 151, 51, 102, 204, 133, 23,
        46, 92, 184, 109, 218,\n   169, 79, 158, 33, 66, 132, 21, 42, 84, 168, 77,
        154, 41, 82, 164, 85,\n   170, 73, 146, 57, 114, 228, 213, 183, 115, 230,
        209, 191, 99, 198,\n   145, 63, 126, 252, 229, 215, 179, 123, 246, 241, 255,
        227, 219, 171,\n   75, 150, 49, 98, 196, 149, 55, 110, 220, 165, 87, 174,
        65, 130, 25,\n   50, 100, 200, 141, 7, 14, 28, 56, 112, 224, 221, 167, 83,
        166, 81,\n   162, 89, 178, 121, 242, 249, 239, 195, 155, 43, 86, 172, 69,
        138, 9,\n   18, 36, 72, 144, 61, 122, 244, 245, 247, 243, 251, 235, 203, 139,
        11,\n   22, 44, 88, 176, 125, 250, 233, 207, 131, 27, 54, 108, 216, 173, 71,\n
        \  142, 1, 2, 4, 8, 16, 32, 64, 128, 29, 58, 116, 232, 205, 135, 19, 38,\n
        \  76, 152, 45, 90, 180, 117, 234, 201, 143, 3, 6, 12, 24, 48, 96, 192,\n
        \  157, 39, 78, 156, 37, 74, 148, 53, 106, 212, 181, 119, 238, 193, 159,\n
        \  35, 70, 140, 5, 10, 20, 40, 80, 160, 93, 186, 105, 210, 185, 111,\n   222,
        161, 95, 190, 97, 194, 153, 47, 94, 188, 101, 202, 137, 15, 30,\n   60, 120,
        240, 253, 231, 211, 187, 107, 214, 177, 127, 254, 225, 223,\n   163, 91, 182,
        113, 226, 217, 175, 67, 134, 17, 34, 68, 136, 13, 26,\n   52, 104, 208, 189,
        103, 206, 129, 31, 62, 124, 248, 237, 199, 147,\n   59, 118, 236, 197, 151,
        51, 102, 204, 133, 23, 46, 92, 184, 109, 218,\n   169, 79, 158, 33, 66, 132,
        21, 42, 84, 168, 77, 154, 41, 82, 164, 85,\n   170, 73, 146, 57, 114, 228,
        213, 183, 115, 230, 209, 191, 99, 198,\n   145, 63, 126, 252, 229, 215, 179,
        123, 246, 241, 255, 227, 219, 171,\n   75, 150, 49, 98, 196, 149, 55, 110,
        220, 165, 87, 174, 65, 130, 25,\n   50, 100, 200, 141, 7, 14, 28, 56, 112,
        224, 221, 167, 83, 166, 81,\n   162, 89, 178, 121, 242, 249, 239, 195, 155,
        43, 86, 172, 69, 138, 9,\n   18, 36, 72, 144, 61, 122, 244, 245, 247, 243,
        251, 235, 203, 139, 11,\n   22, 44, 88, 176, 125, 250, 233, 207, 131, 27,
        54, 108, 216, 173, 71,\n   142\n"
      title: 5.7.3.  The Table OCT_EXP
    - contents:
      - "5.7.4.  The Table OCT_LOG\n   The table OCT_LOG contains 255 non-negative
        integers.  The table is\n   indexed by octets interpreted as integers.  The
        octet corresponding\n   to the zero element, which is represented by the integer
        0, is\n   excluded as an index, and thus indexing starts at 1 and ranges up
        to\n   255, and the entries are the following:\n   0, 1, 25, 2, 50, 26, 198,
        3, 223, 51, 238, 27, 104, 199, 75, 4, 100,\n   224, 14, 52, 141, 239, 129,
        28, 193, 105, 248, 200, 8, 76, 113, 5,\n   138, 101, 47, 225, 36, 15, 33,
        53, 147, 142, 218, 240, 18, 130, 69,\n   29, 181, 194, 125, 106, 39, 249,
        185, 201, 154, 9, 120, 77, 228, 114,\n   166, 6, 191, 139, 98, 102, 221, 48,
        253, 226, 152, 37, 179, 16, 145,\n   34, 136, 54, 208, 148, 206, 143, 150,
        219, 189, 241, 210, 19, 92,\n   131, 56, 70, 64, 30, 66, 182, 163, 195, 72,
        126, 110, 107, 58, 40,\n   84, 250, 133, 186, 61, 202, 94, 155, 159, 10, 21,
        121, 43, 78, 212,\n   229, 172, 115, 243, 167, 87, 7, 112, 192, 247, 140,
        128, 99, 13, 103,\n   74, 222, 237, 49, 197, 254, 24, 227, 165, 153, 119,
        38, 184, 180,\n   124, 17, 68, 146, 217, 35, 32, 137, 46, 55, 63, 209, 91,
        149, 188,\n   207, 205, 144, 135, 151, 178, 220, 252, 190, 97, 242, 86, 211,
        171,\n   20, 42, 93, 158, 132, 60, 57, 83, 71, 109, 65, 162, 31, 45, 67, 216,\n
        \  183, 123, 164, 118, 196, 23, 73, 236, 127, 12, 111, 246, 108, 161,\n   59,
        82, 41, 157, 85, 170, 251, 96, 134, 177, 187, 204, 62, 90, 203,\n   89, 95,
        176, 156, 169, 160, 81, 11, 245, 22, 235, 122, 117, 44, 215,\n   79, 174,
        213, 233, 230, 231, 173, 232, 116, 214, 244, 234, 168, 80,\n   88, 175\n"
      title: 5.7.4.  The Table OCT_LOG
    - contents:
      - "5.7.5.  Operations on Symbols\n   Operations on symbols have the same semantics
        as operations on\n   vectors of octets of length T in this specification.
        \ Thus, if U and\n   V are two symbols formed by the octets u[0], ..., u[T-1]
        and v[0],\n   ..., v[T-1], respectively, the sum of symbols U + V is defined
        to be\n   the component-wise sum of octets, i.e., equal to the symbol D formed\n
        \  by the octets d[0], ..., d[T-1], such that\n      d[i] = u[i] + v[i], 0
        <= i < T.\n   Furthermore, if beta is an octet, the product beta*U is defined
        to be\n   the symbol D obtained by multiplying each octet of U by beta, i.e.,\n
        \     d[i] = beta*u[i], 0 <= i < T.\n"
      title: 5.7.5.  Operations on Symbols
    - contents:
      - "5.7.6.  Operations on Matrices\n   All matrices in this specification have
        entries that are octets, and\n   thus matrix operations and definitions are
        defined in terms of the\n   underlying octet arithmetic, e.g., operations
        on a matrix, matrix\n   rank, and matrix inversion.\n"
      title: 5.7.6.  Operations on Matrices
    title: 5.7.  Operating with Octets, Symbols, and Matrices
  - contents:
    - "5.8.  Requirements for a Compliant Decoder\n   If a RaptorQ-compliant decoder
      receives a mathematically sufficient\n   set of encoding symbols generated according
      to the encoder\n   specification in Section 5.3 for reconstruction of a source
      block,\n   then such a decoder SHOULD recover the entire source block.\n   A
      RaptorQ-compliant decoder SHALL have the following recovery\n   properties for
      source blocks with K' source symbols for all values of\n   K' in Table 2 of
      Section 5.6.\n   1.  If the decoder receives K' encoding symbols generated according\n
      \      to the encoder specification in Section 5.3 with corresponding\n       ESIs
      chosen independently and uniformly at random from the range\n       of possible
      ESIs, then on average the decoder will fail to\n       recover the entire source
      block at most 1 out of 100 times.\n   2.  If the decoder receives K'+1 encoding
      symbols generated according\n       to the encoder specification in Section
      5.3 with corresponding\n       ESIs chosen independently and uniformly at random
      from the range\n       of possible ESIs, then on average the decoder will fail
      to\n       recover the entire source block at most 1 out of 10,000 times.\n
      \  3.  If the decoder receives K'+2 encoding symbols generated according\n       to
      the encoder specification in Section 5.3 with corresponding\n       ESIs chosen
      independently and uniformly at random from the range\n       of possible ESIs,
      then on average the decoder will fail to\n       recover the entire source block
      at most 1 out of 1,000,000 times.\n   Note that the Example FEC Decoder specified
      in Section 5.4 fulfills\n   both requirements, i.e.,\n   1.  it can reconstruct
      a source block as long as it receives a\n       mathematically sufficient set
      of encoding symbols generated\n       according to the encoder specification
      in Section 5.3, and\n   2.  it fulfills the mandatory recovery properties from
      above.\n"
    title: 5.8.  Requirements for a Compliant Decoder
  title: 5.  RaptorQ FEC Code Specification
- contents:
  - "6.  Security Considerations\n   Data delivery can be subject to denial-of-service
    attacks by\n   attackers that send corrupted packets that are accepted as legitimate\n
    \  by receivers.  This is particularly a concern for multicast delivery\n   because
    a corrupted packet may be injected into the session close to\n   the root of the
    multicast tree, in which case the corrupted packet\n   will arrive at many receivers.
    \ The use of even one corrupted packet\n   containing encoding data may result
    in the decoding of an object that\n   is completely corrupted and unusable.  It
    is thus RECOMMENDED that\n   source authentication and integrity checking are
    applied to decoded\n   objects before delivering objects to an application.  For
    example, a\n   SHA-256 hash [FIPS.180-3.2008] of an object may be appended before\n
    \  transmission, and the SHA-256 hash is computed and checked after the\n   object
    is decoded but before it is delivered to an application.\n   Source authentication
    SHOULD be provided, for example, by including a\n   digital signature verifiable
    by the receiver computed on top of the\n   hash value.  It is also RECOMMENDED
    that a packet authentication\n   protocol such as TESLA [RFC4082] be used to detect
    and discard\n   corrupted packets upon arrival.  This method may also be used
    to\n   provide source authentication.  Furthermore, it is RECOMMENDED that\n   Reverse
    Path Forwarding checks be enabled in all network routers and\n   switches along
    the path from the sender to receivers to limit the\n   possibility of a bad agent
    successfully injecting a corrupted packet\n   into the multicast tree data path.\n
    \  Another security concern is that some FEC information may be obtained\n   by
    receivers out-of-band in a session description, and if the session\n   description
    is forged or corrupted, then the receivers will not use\n   the correct protocol
    for decoding content from received packets.  To\n   avoid these problems, it is
    RECOMMENDED that measures be taken to\n   prevent receivers from accepting incorrect
    session descriptions,\n   e.g., by using source authentication to ensure that
    receivers only\n   accept legitimate session descriptions from authorized senders.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   Values of FEC Encoding IDs and FEC Instance IDs are
    subject to IANA\n   registration.  For general guidelines on IANA considerations
    as they\n   apply to this document, see [RFC5052].  IANA has assigned the value
    6\n   under the ietf:rmt:fec:encoding registry to \"RaptorQ Code\" as the\n   Fully-Specified
    FEC Encoding ID value associated with this\n   specification.\n"
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgements\n   Thanks are due to Ranganathan (Ranga) Krishnan.  Ranga
    Krishnan has\n   been very supportive in finding and resolving implementation
    details\n   and in finding the systematic indices.  In addition, Habeeb Mohiuddin\n
    \  Mohammed and Antonios Pitarokoilis, both from the Munich University\n   of
    Technology (TUM), and Alan Shinsato have done two independent\n   implementations
    of the RaptorQ encoder/decoder that have helped to\n   clarify and to resolve
    issues with this specification.\n"
  title: 8.  Acknowledgements
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [FIPS.180-3.2008]\n              National Institute
      of Standards and Technology, \"Secure\n              Hash Standard\", FIPS PUB
      180-3, October 2008.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs
      to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
      \  [RFC4082]  Perrig, A., Song, D., Canetti, R., Tygar, J., and B.\n              Briscoe,
      \"Timed Efficient Stream Loss-Tolerant\n              Authentication (TESLA):
      Multicast Source Authentication\n              Transform Introduction\", RFC
      4082, June 2005.\n   [RFC5052]  Watson, M., Luby, M., and L. Vicisano, \"Forward
      Error\n              Correction (FEC) Building Block\", RFC 5052, August 2007.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [LTCodes]  Luby, M., \"LT codes\", Annual
      IEEE Symposium on Foundations\n              of Computer Science, pp. 271-280,
      November 2002.\n   [RFC3453]  Luby, M., Vicisano, L., Gemmell, J., Rizzo, L.,
      Handley,\n              M., and J. Crowcroft, \"The Use of Forward Error Correction\n
      \             (FEC) in Reliable Multicast\", RFC 3453, December 2002.\n   [RFC5053]
      \ Luby, M., Shokrollahi, A., Watson, M., and T. Stockhammer,\n              \"Raptor
      Forward Error Correction Scheme for Object\n              Delivery\", RFC 5053,
      October 2007.\n   [RaptorCodes]\n              Shokrollahi, A. and M. Luby,
      \"Raptor Codes\", Foundations\n              and Trends in Communications and
      Information Theory: Vol.\n              6: No. 3-4, pp. 213-322, 2011.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   Michael Luby\n   Qualcomm Incorporated\n   3165 Kifer
    Road\n   Santa Clara, CA  95051\n   U.S.A.\n   EMail: luby@qualcomm.com\n   Amin
    Shokrollahi\n   EPFL\n   Laboratoire d'algorithmique\n   Station 14\n   Batiment
    BC\n   Lausanne  1015\n   Switzerland\n   EMail: amin.shokrollahi@epfl.ch\n   Mark
    Watson\n   Netflix Inc.\n   100 Winchester Circle\n   Los Gatos, CA  95032\n   U.S.A.\n
    \  EMail: watsonm@netflix.com\n   Thomas Stockhammer\n   Nomor Research\n   Brecherspitzstrasse
    8\n   Munich  81541\n   Germany\n   EMail: stockhammer@nomor.de\n   Lorenz Minder\n
    \  Qualcomm Incorporated\n   3165 Kifer Road\n   Santa Clara, CA  95051\n   U.S.A.\n
    \  EMail: lminder@qualcomm.com\n"
  title: Authors' Addresses
