- title: __initial_text__
  contents:
  - "              Generic Message Exchange Authentication for\n                 \
    \   the Secure Shell Protocol (SSH)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Secure Shell Protocol (SSH) is a protocol for secure remote\
    \ login\n   and other secure network services over an insecure network.  This\n\
    \   document describes a general purpose authentication method for the\n   SSH\
    \ protocol, suitable for interactive authentications where the\n   authentication\
    \ data should be entered via a keyboard (or equivalent\n   alphanumeric input\
    \ device).  The major goal of this method is to\n   allow the SSH client to support\
    \ a whole class of authentication\n   mechanism(s) without knowing the specifics\
    \ of the actual\n   authentication mechanism(s).\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The SSH authentication protocol [SSH-USERAUTH] is a general-purpose\n\
    \   user authentication protocol.  It is intended to be run over the SSH\n   transport\
    \ layer protocol [SSH-TRANS].  The authentication protocol\n   assumes that the\
    \ underlying protocols provide integrity and\n   confidentiality protection.\n\
    \   This document describes a general purpose authentication method for\n   the\
    \ SSH authentication protocol.  This method is suitable for\n   interactive authentication\
    \ methods that do not need any special\n   software support on the client side.\
    \  Instead, all authentication\n   data should be entered via the keyboard.  The\
    \ major goal of this\n   method is to allow the SSH client to have little or no\
    \ knowledge of\n   the specifics of the underlying authentication mechanism(s)\
    \ used by\n   the SSH server.  This will allow the server to arbitrarily select\
    \ or\n   change the underlying authentication mechanism(s) without having to\n\
    \   update client code.\n   The name for this authentication method is \"keyboard-interactive\"\
    .\n   This document should be read only after reading the SSH architecture\n \
    \  document [SSH-ARCH] and the SSH authentication document\n   [SSH-USERAUTH].\
    \  This document freely uses terminology and notation\n   from both documents\
    \ without reference or further explanation.\n   This document also describes some\
    \ of the client interaction with the\n   user in obtaining the authentication\
    \ information.  While this is\n   somewhat out of the scope of a protocol specification,\
    \ it is\n   described here anyway because some aspects of the protocol are\n \
    \  specifically designed based on user interface issues, and omitting\n   this\
    \ information may lead to incompatible or awkward implementations.\n   The key\
    \ words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"\
    SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n\
    \   document are to be interpreted as described in [RFC-2119].\n"
- title: 2.  Rationale
  contents:
  - "2.  Rationale\n   Currently defined authentication methods for SSH are tightly\
    \ coupled\n   with the underlying authentication mechanism.  This makes it\n \
    \  difficult to add new mechanisms for authentication as all clients\n   must\
    \ be updated to support the new mechanism.  With the generic\n   method defined\
    \ here, clients will not require code changes to support\n   new authentication\
    \ mechanisms, and if a separate authentication layer\n   is used, such as [PAM],\
    \ then the server may not need any code changes\n   either.\n   This presents\
    \ a significant advantage to other methods, such as the\n   \"password\" method\
    \ (defined in [SSH-USERAUTH]), as new (presumably\n   stronger) methods may be\
    \ added \"at will\" and system security can be\n   transparently enhanced.\n \
    \  Challenge-response and One Time Password mechanisms are also easily\n   supported\
    \ with this authentication method.\n   However, this authentication method is\
    \ limited to authentication\n   mechanisms that do not require any special code,\
    \ such as hardware\n   drivers or password mangling, on the client.\n"
- title: 3.  Protocol Exchanges
  contents:
  - "3.  Protocol Exchanges\n   The client initiates the authentication with an\n\
    \   SSH_MSG_USERAUTH_REQUEST message.  The server then requests\n   authentication\
    \ information from the client with an\n   SSH_MSG_USERAUTH_INFO_REQUEST message.\
    \  The client obtains the\n   information from the user and then responds with\
    \ an\n   SSM_MSG_USERAUTH_INFO_RESPONSE message.  The server MUST NOT send\n \
    \  another SSH_MSG_USERAUTH_INFO_REQUEST before it has received the\n   answer\
    \ from the client.\n"
- title: 3.1.  Initial Exchange
  contents:
  - "3.1.  Initial Exchange\n   The authentication starts with the client sending\
    \ the following\n   packet:\n      byte      SSH_MSG_USERAUTH_REQUEST\n      string\
    \    user name (ISO-10646 UTF-8, as defined in [RFC-3629])\n      string    service\
    \ name (US-ASCII)\n      string    \"keyboard-interactive\" (US-ASCII)\n     \
    \ string    language tag (as defined in [RFC-3066])\n      string    submethods\
    \ (ISO-10646 UTF-8)\n   The language tag is deprecated and SHOULD be the empty\
    \ string.  It\n   may be removed in a future revision of this specification. \
    \ Instead,\n   the server SHOULD select the language to be used based on the tags\n\
    \   communicated during key exchange [SSH-TRANS].\n   If the language tag is not\
    \ the empty string, the server SHOULD use\n   the specified language for any messages\
    \ sent to the client as part of\n   this protocol.  The language tag SHOULD NOT\
    \ be used for language\n   selection for messages outside of this protocol.  If\
    \ the server does\n   not support the requested language, the language to be used\
    \ is\n   implementation-dependent.\n   The submethods field is included so the\
    \ user can give a hint of which\n   actual methods he wants to use.  It is a comma-separated\
    \ list of\n   authentication submethods (software or hardware) that the user\n\
    \   prefers.  If the client has knowledge of the submethods preferred by\n   the\
    \ user, presumably through a configuration setting, it MAY use the\n   submethods\
    \ field to pass this information to the server.  Otherwise,\n   it MUST send the\
    \ empty string.\n   The actual names of the submethods is something the user and\
    \ the\n   server need to agree upon.\n   Server interpretation of the submethods\
    \ field is implementation-\n   dependent.\n   One possible implementation strategy\
    \ of the submethods field on the\n   server is that, unless the user may use multiple\
    \ different\n   submethods, the server ignores this field.  If the user may\n\
    \   authenticate using one of several different submethods, the server\n   should\
    \ treat the submethods field as a hint on which submethod the\n   user wants to\
    \ use this time.\n   Note that when this message is sent to the server, the client\
    \ has not\n   yet prompted the user for a password, and so that information is\
    \ NOT\n   included with this initial message (unlike the \"password\" method).\n\
    \   The server MUST reply with an SSH_MSG_USERAUTH_SUCCESS,\n   SSH_MSG_USERAUTH_FAILURE,\
    \ or SSH_MSG_USERAUTH_INFO_REQUEST message.\n   The server SHOULD NOT reply with\
    \ the SSH_MSG_USERAUTH_FAILURE message\n   if the failure is based on the user\
    \ name or service name; instead, it\n   SHOULD send SSH_MSG_USERAUTH_INFO_REQUEST\
    \ message(s), which look just\n   like the one(s) that would have been sent in\
    \ cases where\n   authentication should proceed, and then send the failure message\n\
    \   (after a suitable delay, as described below).  The goal is to make it\n  \
    \ impossible to find valid usernames by comparing the results when\n   authenticating\
    \ as different users.\n   The server MAY reply with an SSH_MSG_USERAUTH_SUCCESS\
    \ message if no\n   authentication is required for the user in question.  However,\
    \ a\n   better approach, for reasons discussed above, might be to reply with\n\
    \   an SSH_MSG_USERAUTH_INFO_REQUEST message and ignore (don't validate)\n   the\
    \ response.\n"
- title: 3.2.  Information Requests
  contents:
  - "3.2.  Information Requests\n   Requests are generated from the server using the\n\
    \   SSH_MSG_USERAUTH_INFO_REQUEST message.\n   The server may send as many requests\
    \ as are necessary to authenticate\n   the client; the client MUST be prepared\
    \ to handle multiple exchanges.\n   However, the server MUST NOT ever have more\
    \ than one\n   SSH_MSG_USERAUTH_INFO_REQUEST message outstanding.  That is, it\
    \ may\n   not send another request before the client has answered.\n   The SSH_MSG_USERAUTH_INFO_REQUEST\
    \ message is defined as follows:\n      byte      SSH_MSG_USERAUTH_INFO_REQUEST\n\
    \      string    name (ISO-10646 UTF-8)\n      string    instruction (ISO-10646\
    \ UTF-8)\n      string    language tag (as defined in [RFC-3066])\n      int \
    \      num-prompts\n      string    prompt[1] (ISO-10646 UTF-8)\n      boolean\
    \   echo[1]\n      ...\n      string    prompt[num-prompts] (ISO-10646 UTF-8)\n\
    \      boolean   echo[num-prompts]\n   The language tag is deprecated and SHOULD\
    \ be the empty string.  It\n   may be removed in a future revision of this specification.\
    \  Instead,\n   the server SHOULD select the language used based on the tags\n\
    \   communicated during key exchange [SSH-TRANS].\n   If the language tag is not\
    \ the empty string, the server SHOULD use\n   the specified language for any messages\
    \ sent to the client as part of\n   this protocol.  The language tag SHOULD NOT\
    \ be used for language\n   selection for messages outside of this protocol.  If\
    \ the server does\n   not support the requested language, the language to be used\
    \ is\n   implementation-dependent.\n   The server SHOULD take into consideration\
    \ that some clients may not\n   be able to properly display a long name or prompt\
    \ field (see next\n   section), and limit the lengths of those fields if possible.\
    \  For\n   example, instead of an instruction field of \"Enter Password\" and\
    \ a\n   prompt field of \"Password for user23@host.domain: \", a better choice\n\
    \   might be an instruction field of \"Password authentication for\n   user23@host.domain\"\
    \ and a prompt field of \"Password: \".  It is\n   expected that this authentication\
    \ method would typically be backended\n   by [PAM] and so such choices would not\
    \ be possible.\n   The name and instruction fields MAY be empty strings; the client\
    \ MUST\n   be prepared to handle this correctly.  The prompt field(s) MUST NOT\n\
    \   be empty strings.\n   The num-prompts field may be `0', in which case there\
    \ will be no\n   prompt/echo fields in the message, but the client SHOULD still\n\
    \   display the name and instruction fields (as described below).\n"
- title: 3.3.  User Interface
  contents:
  - "3.3.  User Interface\n   Upon receiving a request message, the client SHOULD\
    \ prompt the user\n   as follows:\n   A command line interface (CLI) client SHOULD\
    \ print the name and\n   instruction (if non-empty), adding newlines.  Then, for\
    \ each prompt\n   in turn, the client SHOULD display the prompt and read the user\n\
    \   input.\n   A graphical user interface (GUI) client has many choices on how\
    \ to\n   prompt the user.  One possibility is to use the name field (possibly\n\
    \   prefixed with the application's name) as the title of a dialog window\n  \
    \ in which the prompt(s) are presented.  In that dialog window, the\n   instruction\
    \ field would be a text message, and the prompts would be\n   labels for text\
    \ entry fields.  All fields SHOULD be presented to the\n   user.  For example,\
    \ an implementation SHOULD NOT discard the name\n   field because its windows\
    \ lack titles; instead, it SHOULD find\n   another way to display this information.\
    \  If prompts are presented in\n   a dialog window, then the client SHOULD NOT\
    \ present each prompt in a\n   separate window.\n   All clients MUST properly\
    \ handle an instruction field with embedded\n   newlines.  They SHOULD also be\
    \ able to display at least 30 characters\n   for the name and prompts.  If the\
    \ server presents names or prompts\n   longer than 30 characters, the client MAY\
    \ truncate these fields to\n   the length it can display.  If the client does\
    \ truncate any fields,\n   there MUST be an obvious indication that such truncation\
    \ has\n   occurred.  The instruction field SHOULD NOT be truncated.\n   Clients\
    \ SHOULD use control character filtering, as discussed in\n   [SSH-ARCH], to avoid\
    \ attacks by including terminal control characters\n   in the fields to be displayed.\n\
    \   For each prompt, the corresponding echo field indicates whether the\n   user\
    \ input should be echoed as characters are typed.  Clients SHOULD\n   correctly\
    \ echo/mask user input for each prompt independently of other\n   prompts in the\
    \ request message.  If a client does not honor the echo\n   field for whatever\
    \ reason, then the client MUST err on the side of\n   masking input.  A GUI client\
    \ might like to have a checkbox toggling\n   echo/mask.  Clients SHOULD NOT add\
    \ any additional characters to the\n   prompt, such as \": \" (colon-space); the\
    \ server is responsible for\n   supplying all text to be displayed to the user.\
    \  Clients MUST also\n   accept empty responses from the user and pass them on\
    \ as empty\n   strings.\n"
- title: 3.4.  Information Responses
  contents:
  - "3.4.  Information Responses\n   After obtaining the requested information from\
    \ the user, the client\n   MUST respond with an SSH_MSG_USERAUTH_INFO_RESPONSE\
    \ message.\n   The format of the SSH_MSG_USERAUTH_INFO_RESPONSE message is as\n\
    \   follows:\n      byte      SSH_MSG_USERAUTH_INFO_RESPONSE\n      int      \
    \ num-responses\n      string    response[1] (ISO-10646 UTF-8)\n      ...\n  \
    \    string    response[num-responses] (ISO-10646 UTF-8)\n   Note that the responses\
    \ are encoded in ISO-10646 UTF-8.  It is up to\n   the server how it interprets\
    \ the responses and validates them.\n   However, if the client reads the responses\
    \ in some other encoding\n   (e.g., ISO 8859-1), it MUST convert the responses\
    \ to ISO-10646 UTF-8\n   before transmitting.\n   From an internationalization\
    \ standpoint, it is desired that if a user\n   enters responses, the authentication\
    \ process will work regardless of\n   what OS and client software they are using.\
    \  Doing so requires\n   normalization.  Systems supporting non-ASCII passwords\
    \ SHOULD always\n   normalize passwords and usernames whenever they are added\
    \ to the\n   database, or compare them (with or without hashing) to existing\n\
    \   entries in the database.  SSH implementations that both store the\n   passwords\
    \ and compare them SHOULD use [SASLPREP] for normalization.\n   If the num-responses\
    \ field does not match the num-prompts field in\n   the request message, the server\
    \ MUST send a failure message.\n   In the case that the server sends a `0' num-prompts\
    \ field in the\n   request message, the client MUST send a response message with\
    \ a `0'\n   num-responses field to complete the exchange.\n   The responses MUST\
    \ be ordered as the prompts were ordered.  That is,\n   response[n] MUST be the\
    \ answer to prompt[n].\n   After receiving the response, the server MUST send\
    \ either an\n   SSH_MSG_USERAUTH_SUCCESS, SSH_MSG_USERAUTH_FAILURE, or another\n\
    \   SSH_MSG_USERAUTH_INFO_REQUEST message.\n   If the server fails to authenticate\
    \ the user (through the underlying\n   authentication mechanism(s)), it SHOULD\
    \ NOT send another request\n   message(s) in an attempt to obtain new authentication\
    \ data; instead,\n   it SHOULD send a failure message.  The only time the server\
    \ should\n   send multiple request messages is if additional authentication data\n\
    \   is needed (i.e., because there are multiple underlying authentication\n  \
    \ mechanisms that must be used to authenticate the user).\n   If the server intends\
    \ to respond with a failure message, it MAY delay\n   for an implementation-dependent\
    \ time before sending it to the client.\n   It is suspected that implementations\
    \ are likely to make the time\n   delay configurable; a suggested default is 2\
    \ seconds.\n"
- title: 4.  Authentication Examples
  contents:
  - "4.  Authentication Examples\n   Here are two example exchanges between a client\
    \ and server.  The\n   first is an example of challenge/response with a handheld\
    \ token.\n   This is an authentication that is not otherwise possible with other\n\
    \   authentication methods.\n      C:   byte      SSH_MSG_USERAUTH_REQUEST\n \
    \     C:   string    \"user23\"\n      C:   string    \"ssh-userauth\"\n     \
    \ C:   string    \"keyboard-interactive\"\n      C:   string    \"\"\n      C:\
    \   string    \"\"\n      S:   byte      SSH_MSG_USERAUTH_INFO_REQUEST\n     \
    \ S:   string    \"CRYPTOCard Authentication\"\n      S:   string    \"The challenge\
    \ is '14315716'\"\n      S:   string    \"en-US\"\n      S:   int       1\n  \
    \    S:   string    \"Response: \"\n      S:   boolean   TRUE\n      [Client prompts\
    \ user for password]\n      C:   byte      SSH_MSG_USERAUTH_INFO_RESPONSE\n  \
    \    C:   int       1\n      C:   string    \"6d757575\"\n      S:   byte    \
    \  SSH_MSG_USERAUTH_SUCCESS\n   The second example is a standard password authentication;\
    \ in this\n   case, the user's password is expired.\n      C:   byte      SSH_MSG_USERAUTH_REQUEST\n\
    \      C:   string    \"user23\"\n      C:   string    \"ssh-userauth\"\n    \
    \  C:   string    \"keyboard-interactive\"\n      C:   string    \"en-US\"\n \
    \     C:   string    \"\"\n      S:   byte      SSH_MSG_USERAUTH_INFO_REQUEST\n\
    \      S:   string    \"Password Authentication\"\n      S:   string    \"\"\n\
    \      S:   string    \"en-US\"\n      S:   int       1\n      S:   string   \
    \ \"Password: \"\n      S:   boolean   FALSE\n      [Client prompts user for password]\n\
    \      C:   byte      SSH_MSG_USERAUTH_INFO_RESPONSE\n      C:   int       1\n\
    \      C:   string    \"password\"\n      S:   byte      SSH_MSG_USERAUTH_INFO_REQUEST\n\
    \      S:   string    \"Password Expired\"\n      S:   string    \"Your password\
    \ has expired.\"\n      S:   string    \"en-US\"\n      S:   int       2\n   \
    \   S:   string    \"Enter new password: \"\n      S:   boolean   FALSE\n    \
    \  S:   string    \"Enter it again: \"\n      S:   boolean   FALSE\n      [Client\
    \ prompts user for new password]\n      C:   byte      SSH_MSG_USERAUTH_INFO_RESPONSE\n\
    \      C:   int       2\n      C:   string    \"newpass\"\n      C:   string \
    \   \"newpass\"\n      S:   byte      SSH_MSG_USERAUTH_INFO_REQUEST\n      S:\
    \   string    \"Password changed\"\n      S:   string    \"Password successfully\
    \ changed for user23.\"\n      S:   string    \"en-US\"\n      S:   int      \
    \ 0\n      [Client displays message to user]\n      C:   byte      SSH_MSG_USERAUTH_INFO_RESPONSE\n\
    \      C:   int       0\n      S:   byte      SSH_MSG_USERAUTH_SUCCESS\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   The userauth type \"keyboard-interactive\" is used\
    \ for this\n   authentication method.\n   The following method-specific constants\
    \ are used with this\n   authentication method:\n      SSH_MSG_USERAUTH_INFO_REQUEST\
    \           60\n      SSH_MSG_USERAUTH_INFO_RESPONSE          61\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The authentication protocol and this authentication\
    \ method depend on\n   the security of the underlying SSH transport layer.  Without\
    \ the\n   confidentiality provided therein, any authentication data passed with\n\
    \   this method is subject to interception.\n   The number of client-server exchanges\
    \ required to complete an\n   authentication using this method may be variable.\
    \  It is possible\n   that an observer may gain valuable information simply by\
    \ counting\n   that number.  For example, an observer may guess that a user's\n\
    \   password has expired, and with further observation may be able to\n   determine\
    \ the password lifetime imposed by a site's password\n   expiration policy.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC-2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                   Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC-3629]      Yergeau, F., \"UTF-8, a transformation format\
    \ of ISO\n                   10646\", STD 63, RFC 3629, November 2003.\n   [RFC-3066]\
    \      Alvestrand, H., \"Tags for the Identification of\n                   Languages\"\
    , BCP 47, RFC 3066, January 2001.\n   [SSH-ARCH]      Ylonen, T. and C. Lonvick,\
    \ Ed., \"The Secure Shell\n                   (SSH) Protocol Architecture\", RFC\
    \ 4251, January 2006.\n   [SSH-USERAUTH]  Ylonen, T. and C. Lonvick, Ed., \"The\
    \ Secure Shell\n                   (SSH) Authentication Protocol\", RFC 4252,\
    \ January\n                   2006.\n   [SSH-TRANS]     Ylonen, T. and C. Lonvick,\
    \ Ed., \"The Secure Shell\n                   (SSH) Transport Layer Protocol\"\
    , RFC 4253, January\n                   2006.\n   [SASLPREP]      Zeilenga, K.,\
    \ \"SASLprep: Stringprep Profile for User\n                   Names and Passwords\"\
    , RFC 4013, February 2005.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [PAM]           Samar, V., Schemers, R., \"\
    Unified Login With\n                   Pluggable Authentication Modules (PAM)\"\
    , OSF RFC\n                   86.0, October 1995.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Frank Cusack\n   savecore.net\n   EMail: frank@savecore.net\n\
    \   Martin Forssen\n   AppGate Network Security AB\n   Otterhallegatan 2\n   SE-411\
    \ 18 Gothenburg\n   SWEDEN\n   EMail: maf@appgate.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
