- title: __initial_text__
  contents:
  - '             A Framework for Policy-based Admission Control

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The IETF working groups such as Integrated Services (called\
    \ \"int-\n   serv\") and RSVP [1] have developed extensions to the IP architecture\n\
    \   and the best-effort service model so that applications or end users\n   can\
    \ request specific quality (or levels) of service from an\n   internetwork in\
    \ addition to the current IP best-effort service.\n   Recent efforts in the Differentiated\
    \ Services Working Group are also\n   directed at the definition of mechanisms\
    \ that support aggregate QoS\n   services. The int-serv model for these new services\
    \ requires explicit\n   signaling of the QoS (Quality of Service) requirements\
    \ from the end\n   points and provision of admission and traffic control at Integrated\n\
    \   Services routers. The proposed standards for RSVP [RFC 2205] and\n   Integrated\
    \ Services [RFC 2211, RFC 2212] are examples of a new\n   reservation setup protocol\
    \ and new service definitions respectively.\n   Under the int-serv model, certain\
    \ data flows receive preferential\n   treatment over other flows; the admission\
    \ control component only\n   takes into account the requester's resource reservation\
    \ request and\n   available capacity to determine whether or not to accept a QoS\n\
    \   request.  However, the int-serv mechanisms do not include an\n   important\
    \ aspect of admission control: network managers and service\n   providers must\
    \ be able to monitor, control, and enforce use of\n   network resources and services\
    \ based on policies derived from\n   criteria such as the identity of users and\
    \ applications,\n   traffic/bandwidth requirements, security considerations, and\
    \ time-\n   of-day/week. Similarly, diff-serv mechanisms also need to take into\n\
    \   account policies that involve various criteria such as customer\n   identity,\
    \ ingress points, and so on.\n   This document is concerned with specifying a\
    \ framework for providing\n   policy-based control over admission control decisions.\
    \ In particular,\n   it focuses on policy-based control over admission control\
    \ using RSVP\n   as an example of the QoS signaling mechanism. Even though the\
    \ focus\n   of the work is on RSVP-based admission control, the document outlines\n\
    \   a framework that can provide policy-based admission control in other\n   QoS\
    \ contexts. We argue that policy-based control must be applicable\n   to different\
    \ kinds and qualities of services offered in the same\n   network and our goal\
    \ is to consider such extensions whenever\n   possible.\n   We begin with a list\
    \ of definitions in Section 2. Section 3 lists the\n   requirements and goals\
    \ of the mechanisms used to control and enforce\n   access to better QoS.  We\
    \ then outline the architectural elements of\n   the framework in Section 4 and\
    \ describe the functionality assumed for\n   each component.  Section 5 discusses\
    \ example policies, possible\n   scenarios, and policy support needed for those\
    \ scenarios. Section 6\n   specifies the requirements for a client-server protocol\
    \ for\n   communication between a policy server (PDP) and its client (PEP) and\n\
    \   evaluates the suitability of some existing protocols for this\n   purpose.\n"
- title: 2. Terminology
  contents:
  - "2. Terminology\n   The following is a list of terms used in this document.\n\
    \   -  Administrative Domain: A collection of networks under the same\n      administrative\
    \ control and grouped together for administrative\n      purposes.\n   -  Network\
    \ Element or Node: Routers, switches, hubs are examples of\n      network nodes.\
    \ They are the entities where resource allocation\n      decisions have to be\
    \ made and the decisions have to be enforced. A\n      RSVP router which allocates\
    \ part of a link capacity (or buffers)\n      to a particular flow and ensures\
    \ that only the admitted flows have\n      access to their reserved resources\
    \ is an example of a network\n      element of interest in our context.\n    \
    \  In this document, we use the terms router, network element, and\n      network\
    \ node interchangeably, but the should all be interpreted as\n      references\
    \ to a network element.\n   -  QoS Signaling Protocol: A signaling protocol that\
    \ carries an\n      admission control request for a resource, e.g., RSVP.\n  \
    \ -  Policy: The combination of rules and services where rules define\n      the\
    \ criteria for resource access and usage.\n   -  Policy control: The application\
    \ of rules to determine whether or\n      not access to a particular resource\
    \ should be granted.\n   -  Policy Object:  Contains policy-related information\
    \ such as policy\n      elements and is carried in a request or response related\
    \ to a\n      resource allocation decision.\n   -  Policy Element: Subdivision\
    \ of policy objects; contains single\n      units of information necessary for\
    \ the evaluation of policy rules.\n      A single policy element may carry an\
    \ user or application\n      identification whereas another policy element may\
    \ carry user\n      credentials or credit card information.  The policy elements\n\
    \      themselves are expected to be independent of which QoS signaling\n    \
    \  protocol is used.\n   -  Policy Decision Point (PDP): The point where policy\
    \ decisions are\n      made.\n   -  Policy Enforcement Point (PEP): The point\
    \ where the policy\n      decisions are actually enforced.\n   -  Policy Ignorant\
    \ Node (PIN): A network element that does not\n      explicitly support policy\
    \ control using the mechanisms defined in\n      this document.\n   -  Resource:\
    \ Something of value in a network infrastructure to which\n      rules or policy\
    \ criteria are first applied before access is\n      granted. Examples of resources\
    \ include the buffers in a router and\n      bandwidth on an interface.\n   -\
    \  Service Provider: Controls the network infrastructure  and may be\n      responsible\
    \ for the charging and accounting of services.\n   -  Soft State Model - Soft\
    \ state is a form of the stateful model that\n      times out installed state\
    \ at a PEP or PDP. It is an automatic way\n      to erase state in the presence\
    \ of communication or network element\n      failures. For example, RSVP uses\
    \ the soft state model for\n      installing reservation state at network elements\
    \ along the path of\n      a data flow.\n   -  Installed State: A new and unique\
    \ request made from a PEP to a PDP\n      that must be explicitly deleted.\n \
    \  -  Trusted Node: A node that is within the boundaries of an\n      administrative\
    \ domain (AD) and is trusted in the sense that the\n      admission control requests\
    \ from such a node do not necessarily\n      need a PDP decision.\n"
- title: '3. Policy-based Admission Control: Goals and Requirements'
  contents:
  - "3. Policy-based Admission Control: Goals and Requirements\n   In this section,\
    \ we describe the goals and requirements of mechanisms\n   and protocols designed\
    \ to provide policy-based control over admission\n   control decisions.\n   -\
    \  Policies vs Mechanisms: An important point to note is that the\n      framework\
    \ does not include any discussion of any  specific policy\n      behavior or does\
    \ not require use of specific policies. Instead,\n      the framework only outlines\
    \ the architectural elements and\n      mechanisms needed to allow a wide variety\
    \ of possible policies to\n      be carried out.\n   -  RSVP-specific: The mechanisms\
    \ must be designed to meet the\n      policy-based control requirements specific\
    \ to the problem of\n      bandwidth reservation using RSVP as the signaling protocol.\n\
    \      However, our goal is to allow for the application of this\n      framework\
    \ for admission control involving other types of resources\n      and QoS services\
    \ (e.g., Diff-Serv) as long as we do not diverge\n      from our central goal.\n\
    \   -  Support for preemption: The mechanisms designed must include\n      support\
    \ for preemption. By preemption, we mean an ability to\n      remove a previously\
    \ installed state in favor of accepting a new\n      admission control request.\
    \  For example, in the case of RSVP,\n      preemption involves the ability to\
    \ remove one or more currently\n      installed reservations to make room for\
    \ a new resource reservation\n      request.\n   -  Support for many styles of\
    \ policies: The mechanisms designed must\n      include support for many policies\
    \ and policy configurations\n      including bi-lateral and multi-lateral service\
    \ agreements and\n      policies based on the notion of relative priority.  In\
    \ general,\n      the determination and configuration of viable policies are the\n\
    \      responsibility of the service provider.\n   -  Provision for Monitoring\
    \ and Accounting Information:  The\n      mechanisms must include support for\
    \ monitoring policy state,\n      resource usage, and provide access information.\
    \ In particular,\n      mechanisms must be included to provide usage and access\n\
    \      information that may be used for accounting and billing purposes.\n   -\
    \  Fault tolerance and recovery: The mechanisms designed on the basis\n      of\
    \ this framework must include provisions for fault tolerance and\n      recovery\
    \ from failure cases such as failure of PDPs, disruption in\n      communication\
    \ including network partitions (and subsequent\n      merging) that separate a\
    \ PDP from its associated PEPs.\n   -  Support for Policy-Ignorant Nodes (PINs):\
    \  Support for the\n      mechanisms described in this document should not be\
    \ mandatory for\n      every node in a network. Policy based admission control\
    \ could be\n      enforced at a subset of nodes, for example the boundary nodes\n\
    \      within an administrative domain. These policy capable nodes would\n   \
    \   function as trusted nodes from the point of view of the policy-\n      ignorant\
    \ nodes in that administrative domain.\n   -  Scalability:  One of the important\
    \ requirements for the mechanisms\n      designed for policy control is scalability.\
    \ The mechanisms must\n      scale at least to the same extent that RSVP scales\
    \ in terms of\n      accommodating multiple flows and network nodes in the path\
    \ of a\n      flow. In particular, scalability must be considered when\n     \
    \ specifying default behavior for merging policy data objects and\n      merging\
    \ should not result in duplicate policy elements or objects.\n      There are\
    \ several sensitive areas in terms of scalability for\n      policy control over\
    \ RSVP. First, not every policy aware node in an\n      infrastructure should\
    \ be expected to contact a remote PDP. This\n      would cause potentially long\
    \ delays in verifying requests that\n      must travel up hop by hop. Secondly,\
    \ RSVP is capable of setting up\n      resource reservations for multicast flows.\
    \ This implies that the\n      policy control model must be capable of servicing\
    \ the special\n      requirements of large multicast flows. Thus, the policy control\n\
    \      architecture must scale at least as well as RSVP based on factors\n   \
    \   such as the size of RSVP messages, the time required for the\n      network\
    \ to service an RSVP request, local processing time required\n      per node,\
    \ and local memory consumed per node.\n   -  Security and denial of service considerations:\
    \ The policy control\n      architecture must be secure as far as the following\
    \ aspects are\n      concerned. First, the mechanisms proposed under the framework\
    \ must\n      minimize theft and denial of service threats. Second, it must be\n\
    \      ensured that the entities (such as PEPs and PDPs) involved in\n      policy\
    \ control can verify each other's identity and establish\n      necessary trust\
    \ before communicating.\n"
- title: 4. Architectural Elements
  contents:
  - "4. Architectural Elements\n   The two main architectural elements for policy\
    \ control are the PEP\n   (Policy Enforcement Point) and the PDP (Policy Decision\
    \ Point).\n   Figure 1 shows a simple configuration involving these two elements;\n\
    \   PEP is a component at a network node and PDP is a remote entity that\n   may\
    \ reside at a policy server.  The PEP represents the component that\n   always\
    \ runs on the policy aware node. It is the point at which policy\n   decisions\
    \ are actually enforced. Policy decisions are made primarily\n   at the PDP. The\
    \ PDP itself may make use of additional mechanisms and\n   protocols to achieve\
    \ additional functionality such as user\n   authentication, accounting, policy\
    \ information storage, etc. For\n   example, the PDP is likely to use an LDAP-based\
    \ directory service for\n   storage and retrieval of policy information[6]. This\
    \ document does\n   not include discussion of these additional mechanisms and\
    \ protocols\n   and how they are used.\n   The basic interaction between the components\
    \ begins with the PEP. The\n   PEP will receive a notification or a message that\
    \ requires a policy\n   decision.  Given such an event, the PEP then formulates\
    \ a request for\n   a policy decision and sends it to the PDP.  The request for\
    \ policy\n   control from a PEP to the PDP may contain one or more policy elements\n\
    \   (encapsulated into one or more policy objects) in addition to the\n   admission\
    \ control information (such as a flowspec or amount of\n   bandwidth requested)\
    \ in the original message or event that triggered\n   the policy decision request.\
    \  The PDP returns the policy decision and\n   the PEP then enforces the policy\
    \ decision by appropriately accepting\n   or denying the request.  The PDP may\
    \ also return additional\n   information to the PEP which includes one or more\
    \ policy elements.\n   This information need not be associated with an admission\
    \ control\n   decision. Rather, it can be used to formulate an error message or\n\
    \   outgoing/forwarded message.\n ________________         Policy server\n"
- title: '|                |        ______'
  contents:
  - '|                |        ______

    '
- title: '|  Network Node  |        |     |------------->'
  contents:
  - '|  Network Node  |        |     |------------->

    '
- title: '|    _____       |        |     |   May use LDAP,SNMP,.. for accessing'
  contents:
  - '|    _____       |        |     |   May use LDAP,SNMP,.. for accessing

    '
- title: '|   |     |      |        |     |  policy database, authentication,etc.'
  contents:
  - '|   |     |      |        |     |  policy database, authentication,etc.

    '
- title: '|   | PEP |<-----|------->| PDP |------------->'
  contents:
  - '|   | PEP |<-----|------->| PDP |------------->

    '
- title: '|   |_____|      |        |_____|'
  contents:
  - '|   |_____|      |        |_____|

    '
- title: '|                |'
  contents:
  - '|                |

    '
- title: '|________________|'
  contents:
  - "|________________|\n   Figure 1: A simple configuration with the primary policy\
    \ control\n   architecture components. PDP may use additional mechanisms and\n\
    \   protocols for the purpose of accounting, authentication, policy\n   storage,\
    \ etc.\n   The PDP might optionally contact other external servers, e.g., for\n\
    \   accessing configuration, user authentication, accounting and billing\n   databases.\
    \ Protocols defined for network management (SNMP) or\n   directory access (LDAP)\
    \ might be used for this communication. While\n   the specific type of access\
    \ and the protocols used may vary among\n   different implementations, some of\
    \ these interactions will have\n   network-wide implications and could impact\
    \ the interoperability of\n   different devices.\n   Of particular importance\
    \ is the \"language\" used to specify the\n   policies implemented by the PDP.\
    \ The number of policies applicable at\n   a network node might potentially be\
    \ quite large. At the same time,\n   these policies will exhibit high complexity,\
    \ in terms of number of\n   fields used to arrive at a decision, and the wide\
    \ range of decisions.\n   Furthermore, it is likely that several policies could\
    \ be applicable\n   to the same request profile. For example, a policy may prescribe\
    \ the\n   treatment of requests from a general user group (e.g., employees of\
    \ a\n   company) as well as the treatment of requests from specific members\n\
    \   of that group (e.g., managers of the company). In this example, the\n   user\
    \ profile \"managers\" falls within the specification of two\n   policies, one\
    \ general and one more specific.\n   In order to handle the complexity of policy\
    \ decisions and to ensure a\n   coherent and consistent application of policies\
    \ network-wide, the\n   policy specification language should ensure unambiguous\
    \ mapping of a\n   request profile to a policy action. It should also permit the\n\
    \   specification of the sequence in which different policy rules should\n   be\
    \ applied and/or the priority associated with each one. Some of\n   these issues\
    \ are addressed in [6].\n   In some cases, the simple configuration shown in Figure\
    \ 1 may not be\n   sufficient as it might be necessary to apply local policies\
    \ (e.g.,\n   policies specified in access control lists) in addition to the\n\
    \   policies applied at the remote PDP. In addition, it is possible for\n   the\
    \ PDP to be co-located with the PEP at the same network node.\n   Figure 2 shows\
    \ the possible configurations.\n   The configurations shown in Figures 1 and 2\
    \ illustrate the\n   flexibility in division of labor. On one hand, a centralized\
    \ policy\n   server, which could be responsible for policy decisions on behalf\
    \ of\n   multiple network nodes in an administrative domain, might be\n   implementing\
    \ policies of a wide scope, common across the AD. On the\n   other hand, policies\
    \ which depend on information and conditions local\n   to a particular router\
    \ and which are more dynamic, might be better\n   implemented locally, at the\
    \ router.\n    ________________                        ____________________\n\
    \   |                |                      |                    |\n   |  Network\
    \ Node  |  Policy Server       |    Network Node    |\n   |    _____       | \
    \     _____           |  _____      _____  |\n   |   |     |      |     |    \
    \ |          | |     |    |     | |\n   |   | PEP |<-----|---->| PDP |       \
    \   | | PEP |<-->| PDP | |\n   |   |_____|      |     |_____|          | |_____|\
    \    |_____| |\n   |    ^           |                      |                 \
    \   |\n   |    |    _____  |                      |____________________|\n   |\
    \    \\-->|     | |\n   |        | LPDP| |\n   |        |_____| |\n   |      \
    \          |\n   |________________|\n   Figure 2: Two other possible configurations\
    \ of policy control\n   architecture components. The configuration on the left\
    \ shows a local\n   decision point at a network node and the configuration on\
    \ the right\n   shows PEP and PDP co-located at the same node.\n   If it is available,\
    \ the PEP will first use the LPDP to reach a local\n   decision. This partial\
    \ decision and the original policy request are\n   next sent to the PDP which\
    \  renders a final decision (possibly,\n   overriding the LPDP). It must be noted\
    \ that the PDP acts as the final\n   authority for the decision returned to the\
    \ PEP and the PEP must\n   enforce the decision rendered by the PDP. Finally,\
    \ if a shared state\n   has been established for the request and response between\
    \ the PEP and\n   PDP, it is the responsibility of the PEP to notify the PDP that\
    \ the\n   original request is no longer in use.\n   Unless otherwise specified,\
    \ we will assume the configuration shown on\n   the left in Figure 2 in the rest\
    \ of this document.\n   Under this policy control model, the PEP module at a network\
    \ node\n   must use the following steps to reach a policy decision:\n   1. When\
    \ a local event or message invokes PEP for a policy decision,\n      the PEP creates\
    \ a request that includes information from the\n      message (or local state)\
    \ that describes the admission control\n      request. In addition, the request\
    \ includes appropriate policy\n      elements as described below.\n   2. The PEP\
    \ may consult a local configuration database to identify a\n      set of policy\
    \ elements (called set A) that are to be evaluated\n      locally. The local configuration\
    \ specifies the types of policy\n      elements that are evaluated locally. The\
    \ PEP passes the request\n      with the set A to the Local Decision point (LPDP)\
    \ and collects the\n      result of the LPDP (called \"partial result\" and referred\
    \ to as\n      D(A) ).\n   3. The PEP then passes the request with ALL the policy\
    \ elements and\n      D(A) to the PDP. The PDP applies policies based on all the\
    \ policy\n      elements and the request and reaches a decision (let us call it\n\
    \      D(Q)). It then combines its result with the partial result D(A)\n     \
    \ using a combination operation to reach a final decision.\n   4. The PDP returns\
    \ the final policy decision (obtained from the\n      combination operation) to\
    \ the PEP.\n   Note that in the above model, the PEP MUST contact the PDP even\
    \ if no\n   (or NULL) policy objects are received in the admission control\n \
    \  request.  This requirement helps ensure that a request cannot bypass\n   policy\
    \ control by omitting policy elements in a reservation request.\n   However, \"\
    short circuit\" processing is permitted, i.e., if the result\n   of D(A), above,\
    \ is \"no\", then there is no need to proceed with\n   further policy processing\
    \ at the PDP. Still, the PDP must be informed\n   of the failure of local policy\
    \ processing. The same applies to the\n   case when policy processing is successful\
    \ but admission control (at\n   the resource management level due to unavailable\
    \ capacity) fails;\n   again the PDP has to be informed of the failure.\n   It\
    \ must also be noted that the PDP may, at any time, send an\n   asynchronous notification\
    \ to the PEP to change an earlier decision or\n   to generate a policy error/warning\
    \ message.\n"
- title: 4.1. Example of a RSVP Router
  contents:
  - "4.1. Example of a RSVP Router\n   In the case of a RSVP router, Figure 3 shows\
    \ the interaction between\n   a PEP and other int-serv components within the router.\
    \  For the\n   purpose of this discussion, we represent all the components of\
    \ RSVP-\n   related processing by a single RSVP module, but a more detailed\n\
    \   discussion of the exact interaction and interfaces between RSVP and\n   the\
    \ PEP is provided in a separate document [3].\n        ______________________________\n\
    \       |                              |\n       |           Router          \
    \   |\n       |  ________           _____    |            _____\n       | |  \
    \      |         |     |   |           |     |\n       | |  RSVP  |<------->|\
    \ PEP |<--|---------->| PDP |\n       | |________|         |_____|   |       \
    \    |_____|\n       |      ^                       |\n       |      |      Traffic\
    \ control  |\n       |      |      _____________    |\n       |      \\---->|\
    \  _________  |   |\n       |            | |capacity | |   |\n       |       \
    \     | | ADM CTL | |   |\n       |            | |_________| |   |\n     --|----------->|\
    \  ____ ____  |   |\n       |   Data     | | PC | PS | |   |\n       |       \
    \     | |____|____| |   |\n       |            |_____________|   |\n       | \
    \                             |\n       |______________________________|\n   Figure\
    \ 3: Relationship between PEP and other int-serv components\n   within an RSVP\
    \ router. PC -- Packet Classifier, PS -- Packet\n   Scheduler\n   When a RSVP\
    \ message arrives at the router (or an RSVP related event\n   requires a policy\
    \ decision), the RSVP module is expected to hand off\n   the request (corresponding\
    \ to the event or message) to its PEP\n   module. The PEP will use the PDP (and\
    \ LPDP) to obtain the policy\n   decision and communicate it back to the RSVP\
    \ module.\n"
- title: 4.2. Additional functionality at the PDP
  contents:
  - "4.2. Additional functionality at the PDP\n   Typically, PDP returns the final\
    \ policy decision based on an\n   admission control request and the associated\
    \ policy elements.\n   However, it should be possible for the PDP to sometimes\
    \ ask the PEP\n   (or the admission control module at the network element where\
    \ PEP\n   resides) to generate policy-related error messages. For example, in\n\
    \   the case of RSVP, the PDP may accept a request and allow installation\n  \
    \ and forwarding of a reservation to a previous hop, but, at the same\n   time,\
    \ may wish to generate a warning/error message to a downstream\n   node (NHOP)\
    \ to warn about conditions such as \"your request may have\n   to be torn down\
    \ in 10 mins, etc.\"  Basically, an ability to create\n   policy-related errors\
    \ and/or warnings and to propagate them using the\n   native QoS signaling protocol\
    \ (such as RSVP) is needed. Such a policy\n   error returned by the PDP must be\
    \ able to also specify whether the\n   reservation request should still be accepted,\
    \ installed, and\n   forwarded to allow continued normal RSVP processing. In particular,\n\
    \   when a PDP sends back an error, it specifies that:\n      1. the message that\
    \ generated the admission control request should\n      be processed further as\
    \ usual, but an error message (or warning)\n      be sent in the other direction\
    \ and include the policy objects\n      supplied in that error message\n     \
    \ 2. or, specifies that an error be returned, but the RSVP message\n      should\
    \ not be forwarded  as usual.\n"
- title: 4.3. Interactions between PEP, LPDP, and PDP at a RSVP router
  contents:
  - "4.3. Interactions between PEP, LPDP, and PDP at a RSVP router\n   All the details\
    \ of RSVP message processing and associated\n   interactions between different\
    \ elements at an RSVP router (PEP, LPDP)\n   and PDP are included in separate\
    \ documents [3,8]. In the following, a\n   few, salient points related to the\
    \ framework are listed:\n   *  LPDP is optional and may be used for making decisions\
    \ based on\n      policy elements handled locally. The LPDP, in turn, may have\
    \ to go\n      to external entities (such as a directory server or an\n      authentication\
    \ server, etc.) for making its decisions.\n   *  PDP is stateful and  may make\
    \ decisions even if no policy objects\n      are received (e.g., make decisions\
    \ based on information such as\n      flowspecs and session object in the RSVP\
    \ messages). The PDP may\n      consult other PDPs, but discussion of inter-PDP\
    \ communication and\n      coordination is outside the scope of this document.\n\
    \   *  PDP sends asynchronous notifications to PEP whenever necessary to\n   \
    \   change earlier decisions, generate errors etc.\n   *  PDP exports the information\
    \ useful for usage monitoring  and\n      accounting purposes. An example of a\
    \ useful mechanism for this\n      purpose is a MIB or a relational database.\
    \ However, this document\n      does not specify any particular mechanism for\
    \ this purpose and\n      discussion of such mechanisms is out of the scope of\
    \ this\n      document.\n"
- title: 4.4. Placement of Policy Elements in a Network
  contents:
  - "4.4. Placement of Policy Elements in a Network\n   By allowing division of labor\
    \ between an LPDP and a PDP, the policy\n   control architecture allows staged\
    \ deployment by enabling routers of\n   varying degrees of sophistication, as\
    \ far as policy control is\n   concerned, to communicate with policy servers.\
    \ Figure 4 depicts an\n   example set of nodes belonging to three different administrative\n\
    \   domains (AD) (Each AD could correspond to a different service\n   provider\
    \ in this case).  Nodes A, B and C belong to administrative\n   domain AD-1, advised\
    \ by PDP PS-1, while D and E belong to AD-2 and\n   AD-3, respectively. E communicates\
    \ with PDP PS-2.  In general, it is\n   expected that there will be at least one\
    \ PDP per administrative\n   domain.\n   Policy capable network nodes could range\
    \ from very unsophisticated,\n   such as E, which have no LPDP, and thus have\
    \ to rely on an external\n   PDP for every policy processing operation, to self-sufficient,\
    \ such\n   as D, which essentially encompasses both an LPDP and a PDP locally,\n\
    \   at the router.\n                        AD-1                    AD-2     \
    \    AD-3\n      ________________/\\_______________     __/\\___      __/\\___\n\
    \     {                                 }   {       }    {       }\n         \
    \    A           B            C            D            E\n        +-------+ \
    \ +-----+    +-------+    +-------+    +-------+\n        | RSVP  |  | RSVP| \
    \   | RSVP  |    | RSVP  |    | RSVP  |\n"
- title: +----+  |-------|  |-----|    |-------|    |-------|    |-------|
  contents:
  - '+----+  |-------|  |-----|    |-------|    |-------|    |-------|

    '
- title: '| S1 |--| P | L |--|     |----| P | L |----| P | P |----|   P   | +----+'
  contents:
  - '| S1 |--| P | L |--|     |----| P | L |----| P | P |----|   P   | +----+

    '
- title: +----+  | E | D |  +-----+    | E | D |    | E | D |    |   E   |-| R1 |
  contents:
  - "+----+  | E | D |  +-----+    | E | D |    | E | D |    |   E   |-| R1 |\n  \
    \      | P | P |             | P | P |    | P | P |    |   P   | +----+\n    \
    \    +-------+             +-------+    +-------+    +-------+\n           ^ \
    \                       ^                           ^\n           |          \
    \              |                           |\n           |                   \
    \     |                           |\n           |                        |   \
    \                    +-------+\n           |                        |        \
    \               | PDP   |\n           |         +------+       |             \
    \          |-------|\n           +-------->| PDP  |<------+                  \
    \     |       |\n                     |------|                               +-------+\n\
    \                     |      |                                  PS-2\n       \
    \              +------+\n                       PS-1\n         Figure 4: Placement\
    \ of Policy Elements in an internet\n"
- title: 5. Example Policies, Scenarios, and  Policy Support
  contents:
  - "5. Example Policies, Scenarios, and  Policy Support\n   In the following, we\
    \ present examples of desired policies and\n   scenarios requiring policy control\
    \ that the policy control framework\n   should be able to support.  In some cases,\
    \  possible approach(es) for\n   achieving the desired goals are also outlined\
    \ with a list of open\n   issues to be resolved.\n"
- title: 5.1. Admission control policies based on factors such as Time-of-Day,
  contents:
  - "5.1. Admission control policies based on factors such as Time-of-Day,\n     User\
    \ Identity, or credentials.\n   Policy control must be able to express and enforce\
    \ rules with\n   temporal dependencies. For example, a group of users might be\
    \ allowed\n   to make reservations at certain levels only during off-peak hours.\n\
    \   In addition, the policy control must also support policies that take\n   into\
    \ account identity or credentials of users requesting a particular\n   service\
    \ or resource. For example, an RSVP reservation request may be\n   denied or accepted\
    \ based on the credentials or identity supplied in\n   the request.\n"
- title: 5.2. Bilateral agreements between service providers
  contents:
  - "5.2. Bilateral agreements between service providers\n   Until recently, usage\
    \ agreements between service providers for\n   traffic crossing their boundaries\
    \ have been quite simple. For\n   example, two ISPs might agree to accept all\
    \ traffic from each other,\n   often without performing any accounting or billing\
    \ for the \"foreign\"\n   traffic carried.  However, with the availability of\
    \ QoS mechanisms\n   based on Integrated and Differentiated Services, traffic\n\
    \   differentiation and quality of service guarantees are being phased\n   into\
    \ the Internet. As ISPs start to sell their customers different\n   grades of\
    \ service and can differentiate among different sources of\n   traffic, they will\
    \ also seek mechanisms for charging each other for\n   traffic (and reservations)\
    \ transiting their networks. One additional\n   incentive in establishing such\
    \ mechanisms is the potential asymmetry\n   in terms of the customer base that\
    \ different providers will exhibit:\n   ISPs focused on servicing corporate traffic\
    \ are likely to experience\n   much higher demand for reserved services than those\
    \ that service the\n   consumer market. Lack of sophisticated accounting schemes\
    \ for inter-\n   ISP traffic could lead to inefficient allocation of costs among\n\
    \   different service providers.\n   Bilateral agreements could fall into two\
    \ broad categories; local or\n   global. Due to the complexity of the problem,\
    \ it is expected that\n   initially only the former will be deployed. In these,\
    \ providers which\n   manage a network cloud or administrative domain contract\
    \ with their\n   closest point of contact (neighbor) to establish ground rules\
    \ and\n   arrangements for access control and accounting. These contracts are\n\
    \   mostly local and do not rely on global agreements; consequently, a\n   policy\
    \ node maintains information about its neighboring nodes only.\n   Referring to\
    \ Figure 4, this model implies that provider AD-1 has\n   established arrangements\
    \ with AD-2, but not with AD-3, for usage of\n   each other's network. Provider\
    \ AD-2, in turn, has in place agreements\n   with AD-3 and so on. Thus, when forwarding\
    \ a reservation request to\n   AD-2, provider AD-2 will charge AD-1 for use of\
    \ all resources beyond\n   AD-1's network.  This information is obtained by recursively\
    \ applying\n   the bilateral agreements at every boundary between (neighboring)\n\
    \   providers, until the recipient of the reservation request is reached.\n  \
    \ To implement this scheme under the policy control architecture,\n   boundary\
    \ nodes have to add an appropriate policy object to the RSVP\n   message before\
    \ forwarding it to a neighboring provider's network.\n   This policy object will\
    \ contain information such as the identity of\n   the provider that generated\
    \ them and the equivalent of an account\n   number where charges can be accumulated.\
    \ Since agreements only hold\n   among neighboring nodes, policy objects have\
    \ to be rewritten as RSVP\n   messages cross the boundaries of administrative\
    \ domains or provider's\n   networks.\n"
- title: 5.3. Priority based admission control policies
  contents:
  - "5.3. Priority based admission control policies\n   In many settings, it is useful\
    \ to distinguish between reservations on\n   the basis of some level of \"importance\"\
    .  For example, this can be\n   useful to avoid that the first reservation being\
    \ granted the use of\n   some resources, be able to hog those resources for some\
    \ indefinite\n   period of time.  Similarly, this may be useful to allow emergency\n\
    \   calls to go through even during periods of congestion.  Such\n   functionality\
    \ can be supported by associating priorities with\n   reservation requests, and\
    \ conveying this priority information\n   together with other policy information.\n\
    \   In its basic form, the priority associated with a reservation\n   directly\
    \ determines a reservation's rights to the resources it\n   requests.  For example,\
    \ assuming that priorities are expressed\n   through integers in the range 0 to\
    \ 32 with 32 being the highest\n   priority, a reservation of priority, say, 10,\
    \ will always be\n   accepted, if the amount of resources held by lower priority\n\
    \   reservations is sufficient to satisfy its requirements.  In other\n   words,\
    \ in case there are not enough free resources (bandwidth,\n   buffers, etc.) at\
    \ a node to accommodate the priority 10 request, the\n   node will attempt to\
    \ free up the necessary resources by preempting\n   existing lower priority reservations.\n\
    \   There are a number of requirements associated with the support of\n   priority\
    \ and their proper operation.  First, traffic control in the\n   router needs\
    \ to be aware of priorities, i.e., classify existing\n   reservations according\
    \ to their priority, so that it is capable of\n   determining how many and which\
    \ ones to preempt, when required to\n   accommodate a higher priority reservation\
    \ request.  Second, it is\n   important that preemption be made consistently at\
    \ different nodes, in\n   order to avoid transient instabilities.  Third and possibly\
    \ most\n   important, merging of priorities needs to be carefully architected\n\
    \   and its impact clearly understood as part of the associated policy\n   definition.\n\
    \   Of the three above requirements, merging of priority information is\n   the\
    \ more complex and deserves additional discussions.  The complexity\n   of merging\
    \ priority information arises from the fact that this\n   merging is to be performed\
    \ in addition to the merging of reservation\n   information.  When reservation\
    \ (FLOWSPEC) information is identical,\n   i.e., homogeneous reservations, merging\
    \ only needs to consider\n   priority information, and the simple rule of keeping\
    \ the highest\n   priority provides an adequate answer.  However, in the case\
    \ of\n   heterogeneous reservations, the *two-dimensional nature* of the\n   (FLOWSPEC,\
    \ priority) pair makes their ordering, and therefore\n   merging, difficult. A\
    \ description of the handling of different cases\n   of RSVP priority objects\
    \ is presented in [7].\n"
- title: 5.4. Pre-paid calling card or Tokens
  contents:
  - "5.4. Pre-paid calling card or Tokens\n   A model of increasing popularity in\
    \ the telephone network is that of\n   the pre-paid calling card. This concept\
    \ could also be applied to the\n   Internet; users purchase \"tokens\" which can\
    \ be redeemed at a later\n   time for access to network services. When a user\
    \ makes a reservation\n   request through, say, an RSVP RESV message, the user\
    \ supplies a\n   unique identification number of the \"token\", embedded in a\
    \ policy\n   object. Processing of this object at policy capable routers results\n\
    \   in decrementing the value, or number of remaining units of service,\n   of\
    \ this token.\n   Referring to Figure 4, suppose receiver R1 in the administrative\n\
    \   domain AD3 wants to request a reservation for a service originating\n   in\
    \ AD1. R1 generates a policy data object of type PD(prc, CID), where\n   \"prc\"\
    \ denotes pre-paid card and CID is the card identification\n   number. Along with\
    \ other policy objects carried in the RESV message,\n   this object is received\
    \ by node E, which forwards it to its PEP,\n   PEP_E, which, in turn, contacts\
    \ PDP PS-3. PS-3 either maintains\n   locally, or has remote access to, a database\
    \ of pre-paid card\n   numbers. If the amount of remaining credit in CID is sufficient,\
    \ the\n   PDP accepts the reservation and the policy object is returned to\n \
    \  PEP_E. Two issues have to be resolved here:\n   *  What is the scope of these\
    \ charges?\n   *  When are charges (in the form of decrementing the remaining\n\
    \      credit) first applied?\n   The answer to the first question is related\
    \ to the bilateral\n   agreement model in place. If, on the one hand, provider\
    \ AD-3 has\n   established agreements with both AD-2 and AD-1, it could charge\
    \ for\n   the cost of the complete reservation up to sender S1. In this case\n\
    \   PS-2 removes the PD(prc,CID) object from the outgoing RESV message.\n   On\
    \ the other hand, if AD-3 has no bilateral agreements in place, it\n   will simply\
    \ charge CID for the cost of the reservation within AD-3\n   and then forward\
    \ PD(prc,CID) in the outgoing RESV message. Subsequent\n   PDPs in other administrative\
    \ domains will charge CID for their\n   respective reservations.  Since multiple\
    \ entities are both reading\n   (remaining credit) and writing (decrementing credit)\
    \ to the same\n   database, some coordination and concurrency control might be\
    \ needed.\n   The issues related to location, management, coordination of credit\n\
    \   card (or similar) databases is outside the scope of this document.\n   Another\
    \ problem in this scenario is determining when the credit is\n   exhausted. The\
    \ PDPs should contact the database periodically to\n   submit a charge against\
    \ the CID; if the remaining credit reaches\n   zero, there must be a mechanism\
    \ to detect that and to cause\n   revocation or termination of privileges granted\
    \ based on the credit.\n   Regarding the issue of when to initiate charging, ideally\
    \ that should\n   happen only after the reservation request has succeeded. In\
    \ the case\n   of local charges, that could be communicated by the router to the\n\
    \   PDP.\n"
- title: 5.5. Sender Specified Restrictions on Receiver Reservations
  contents:
  - "5.5. Sender Specified Restrictions on Receiver Reservations\n   The ability of\
    \ senders to specify restrictions on reservations, based\n   on receiver identity,\
    \ number of receivers or reservation cost might\n   be useful in future network\
    \ applications. An example could be any\n   application in which the sender pays\
    \ for service delivered to\n   receivers. In such a case, the sender might be\
    \ willing to assume the\n   cost of a reservation, as long as it satisfies certain\
    \ criteria, for\n   example, it originates from a receiver who belongs to an access\n\
    \   control list (ACL) and satisfies a limit on cost. (Notice that this\n   could\
    \ allow formation of \"closed\" multicast groups).\n   In the policy based admission\
    \ control framework such a scheme could\n   be achieved by having the sender generate\
    \ appropriate policy objects,\n   carried in a PATH message, which install state\
    \ in routers on the path\n   to receivers. In accepting reservations, the routers\
    \ would have to\n   compare the RESV requests to the installed state.\n   A number\
    \ of different solutions can be built to address this\n   scenario; precise description\
    \ of a solution is beyond the scope of\n   this document.\n"
- title: 6. Interaction Between the Policy Enforcement Point (PEP) and the Policy
  contents:
  - "6. Interaction Between the Policy Enforcement Point (PEP) and the Policy\n  \
    \ Decision Point (PDP)\n   In the case of an external PDP, the need for a communication\
    \ protocol\n   between the PEP and PDP arises. In order to allow for\n   interoperability\
    \ between different vendors networking elements and\n   (external) policy servers,\
    \ this protocol should be standardized.\n"
- title: 6.1. PEP to PDP Protocol Requirements
  contents:
  - "6.1. PEP to PDP Protocol Requirements\n   This section describes a set of general\
    \ requirements for the\n   communication protocol between the PEP and an external\
    \ PDP.\n   *  Reliability:  The sensitivity of policy control information\n  \
    \    necessitates reliable operation. Undetected loss of policy queries\n    \
    \  or responses may lead to inconsistent network control operation\n      and\
    \ are clearly unacceptable for actions such as billing and\n      accounting.\
    \ One option for providing reliability is the re-use of\n      the TCP as the\
    \ transport protocol.\n   *  Small delays: The timing requirements of policy decisions\
    \ related\n      to QoS signaling protocols are expected to be quite strict. The\n\
    \      PEP to PDP protocol should add small amount of delay to the\n      response\
    \ delay experienced by queries placed by the PEP to the\n      PDP.\n   *  Ability\
    \ to carry opaque objects: The protocol should allow for\n      delivery of self-identifying,\
    \ opaque objects, of variable length,\n      such as RSVP messages, RSVP policy\
    \ objects and other objects that\n      might be defined as new policies are introduced.\
    \ The protocol\n      should not have to be changed every time a new object has\
    \ to be\n      exchanged.\n   *  Support for PEP-initiated, two-way Transactions:\
    \  The protocol\n      must allow for two-way transactions (request-response exchanges)\n\
    \      between a PEP and a PDP. In particular, PEPs must be able to\n      initiate\
    \ requests for policy decision, re-negotiation of\n      previously made policy\
    \ decision, and exchange of policy\n      information. To some extent, this requirement\
    \ is closely tied to\n      the goal of meeting the requirements of RSVP-specific,\
    \ policy-\n      based admission control. RSVP signaling events such as arrival\
    \ of\n      RESV refresh messages, state timeout, and merging of reservations\n\
    \      require that a PEP (such as an RSVP router) request a policy\n      decision\
    \ from PDP at any time. Similarly, PEP must be able to\n      report monitoring\
    \ information and policy state changes to PDP at\n      any time.\n   *  Support\
    \ for asynchronous notification: This is required in order\n      to allow both\
    \ the policy server and client to notify each other in\n      the case of an asynchronous\
    \ change in state, i.e., a change that\n      is not triggered by a signaling\
    \ message. For example, the server\n      would need to notify the client if a\
    \ particular reservation has to\n      be terminated due to expiration of a user's\
    \ credentials or account\n      balance.  Likewise, the client has to inform the\
    \ server of a\n      reservation rejection which is due to admission control failure.\n\
    \   *  Handling of multicast groups: The protocol should provision for\n     \
    \ handling of policy decisions related to multicast groups.\n   *  QoS Specification:\
    \ The protocol should allow for precise\n      specification of level of service\
    \ requirements in the PEP requests\n      forwarded to the PDP.\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   The communication tunnel between policy clients\
    \ and policy servers\n   should be secured by the use of an IPSEC [4] channel.\
    \ It is advisable\n   that this tunnel makes use of both the AH (Authentication\
    \ Header) and\n   ESP (Encapsulating Security Payload) protocols, in order to\
    \ provide\n   confidentiality, data origin authentication, integrity and replay\n\
    \   prevention.\n   In the case of the RSVP signaling mechanism, RSVP MD5 [2]\
    \ message\n   authentication can be used to secure communications between network\n\
    \   elements.\n"
- title: 8. References
  contents:
  - "8. References\n   [1] Braden, R., Zhang, L., Berson, S., Herzog, S. and S. Jamin,\n\
    \       \"Resource ReSerVation Protocol (RSVP) -- Version 1 Functional\n     \
    \  Specification\", RFC 2205, September 1997.\n   [2] Baker, F., Lindell, B. and\
    \ M. Talwar, \"RSVP Cryptographic\n       Authentication\", RFC 2747, January\
    \ 2000.\n   [3] Herzog, S., \"RSVP Extensions for Policy Control\", RFC 2750,\n\
    \       January 2000.\n   [4] Atkinson, R., \"Security Architecture for the Internet\
    \ Protocol\",\n       RFC 1825, August 1995.\n   [5] Rigney, C., Rubens, A., Simpson,\
    \ W. and S. Willens, \"Remote\n       Authentication Dial In User Service (RADIUS)\"\
    , RFC 2138, April\n       1997.\n   [6] Rajan, R., et al., \"Schema for Differentiated\
    \ Services and\n       Integrated Services in Networks\", Work in Progress.\n\
    \   [7] Herzog, S., \"RSVP Preemption Priority Policy\", Work in Progress.\n \
    \  [8] Herzog, S., \"COPS Usage for RSVP\", RFC 2749, January 2000.\n"
- title: 9. Acknowledgements
  contents:
  - "9. Acknowledgements\n   This is a result of an ongoing discussion among many\
    \ members of the\n   RAP group including Jim Boyle, Ron Cohen, Laura Cunningham,\
    \ Dave\n   Durham, Shai Herzog, Tim O'Malley, Raju Rajan, and Arun Sastry.\n"
- title: 10.  Authors' Addresses
  contents:
  - "10.  Authors' Addresses\n   Raj Yavatkar\n   Intel Corporation\n   2111 N.E.\
    \ 25th Avenue,\n   Hillsboro, OR 97124\n   USA\n   Phone: +1 503-264-9077\n  \
    \ EMail: raj.yavatkar@intel.com\n   Dimitrios Pendarakis\n   IBM T.J. Watson Research\
    \ Center\n   P.O. Box 704\n   Yorktown Heights\n   NY 10598\n   Phone: +1 914-784-7536\n\
    \   EMail: dimitris@watson.ibm.com\n   Roch Guerin\n   University of Pennsylvania\n\
    \   Dept. of Electrical Engineering\n   200 South 33rd Street\n   Philadelphia,\
    \ PA  19104\n   Phone: +1 215 898-9351\n   EMail: guerin@ee.upenn.edu\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
