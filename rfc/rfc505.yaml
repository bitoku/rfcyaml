- title: __initial_text__
  contents:
  - "            Two Solutions to a File Transfer Access Problem\n   In RFC #87, Bob\
    \ Bressler raises the issue of how one can use the File\n   Transfer Protocol\
    \ to send a file to a user on another system without\n   knowing that user's password.\
    \  In RFC 501, Kan Pogran points out\n   certain objections to Bressler's solution\
    \ of having a \"daemon\"\n   process do the job -- in particular, the fact that\
    \ it would require\n   an interpretive access control mechanism in the daemon\
    \ different from\n   most system's normal access control mechanisms.  Because\
    \ Ken felt\n   that it would be too much of a digression in RFC 501 for him to\
    \ cover\n   the following points fully, I decided it might be of interest to deal\n\
    \   with them separately: There are at least two solutions to the problem\n  \
    \ Bob raised in RFC 487 -- in regard to \"my\" sending \"him\" a file\n   without\
    \ knowing his password -- which don't give rise to the problems\n   noted in RFC\
    \ 501.  One hinges on adding a convention to the FTP, the\n   other on adding\
    \ a command.\n   The first solution is very straightforward.  Instead of having\
    \ me\n   push the file, he could pull it.  That is, he uses his own \"principal\n\
    \   identifies\" (thus solving access permission problems at his end) and\n  \
    \ his own User FTP to extract the file with the aid of my Server FTP.\n   All\
    \ this requires is that 1) I give appropriate access permission on\n   my end,\
    \ and 2) he have the ability to use my Server FTP.  The second\n   condition is\
    \ met by either a) his having an account on my system, or\n   b) my system's having\
    \ a known account for \"free\" Server FTP use. (*)\n   So standing the model on\
    \ its head solves the functional problem,\n   although he has to pay for the User\
    \ FTP.  But, then, it's he who\n   wants the file, so why shouldn't he?  On the\
    \ other hand, \"he\" might\n   not be logged in right now and I might be -- and\
    \ by the time he can\n   get logged in my system might be scheduled to be down.\
    \  Fortunately,\n   there's also a moderately straightforward solution to the\
    \ problem as\n   originally posed.  This goes back to the mechanism used to prevent\n\
    \   capricious and/or malicious card input on Multics: Instead of placing\n  \
    \ input (card deck or transferred file) directly into the alleged\n   recipient's\
    \ directory, place it in a \"pool\" directory and merely\n   inform the recipient\
    \ of its arrival.  If he really wanted it, he then\n   copies it into his own\
    \ directory.  That way, unauthorized people\n   can't freeload on somebody else's\
    \ directory (and the pool is, of\n   course, periodically purged), nor can they\
    \ clobber others' already-\n   existing files.\n"
- title: '[1]'
  contents:
  - "[1]\n   This second solution has the virtue of requiring fewer steps than the\n\
    \   first, and would work even when the first wouldn't; so even though it\n  \
    \ would require another FTP command, I propose the addition of a new\n   FTP \"\
    POOL\" command, which does what the last paragraph described.\n   Depending on\
    \ the various Servers' protection mechanisms, the pooled\n   files could be made\
    \ readable only by the declared recipients.  This\n   would, for example, offer\
    \ an easy way to get some privacy for \"mail\"\n   (which otherwise is likely\
    \ to be readable by anybody who can write\n   it), although other solutions to\
    \ that particular problem of course\n   exist.  At any rate, the POOL command's\
    \ syntax would be POOL id name\n   where id is a valid user identifier on the\
    \ Server, and name is the\n   desired name to be placed on the about-to-be-transferred\
    \ file in the\n   Server's pool directory.  (*) (Servers must, of course, do whatever\n\
    \   pre- or post-fixing to name is necessary to make it unique within the\n  \
    \ pool.)  The transfer then takes place in the same manner as with\n   STOR, and\
    \ on successful completion the Server sends a message to id\n   that he should\
    \ pick up name (suitably) modified to look like a local\n   pathname) if he wants\
    \ it. The message should also identify the\n   putative sender (even though it\
    \ might have come in from a free\n   account).  The id should, naturally, be validated\
    \ before starting the\n   transfer.\n   The question has been raised locally as\
    \ to why we don't simply take a\n   pooled view of STOR on Multics and forget\
    \ about pushing for a new\n   command.  To do so would have two drawbacks, I feel:\
    \ first, I think\n   we'd be remiss in our duty as NWG participants if we failed\
    \ to\n   attempt to offer solutions to protocol problems to the Network\n   community\
    \ as a whole.  Second, on a less pious but more practical\n   note, if we don't\
    \ know the id we have to infer it from the pathname,\n   which rules out abbreviations\
    \ and forces senders to have to know too\n   much  about our internal structure.\
    \ (The alternative of requiring an\n   additional argument to the STOR is subject\
    \ to the same objection.  It\n   is also subject to the objection that protocols\
    \ really shouldn't be\n   unilaterally extended.  Of course, we could go to \"\
    site-specific\n   parameters\", but that's complicating life so much that the\n\
    \   alternative of no unsolicited files seems preferable.)  Therefore, I\n   think\
    \ that POOL would be worthwhile unless no other Servers have\n   enough access\
    \ control for it to be necessary anywhere but on Multics.\n   At the very least,\
    \ having the protocol specify an \"access id\"\n   optional argument to STOR seems\
    \ desirable.\n"
- title: '[2]'
  contents:
  - "[2]\n   Input as to whether any of the other Servers has file access control\n\
    \   abilities similar to those of Multics would be useful in clarifying\n   whether\
    \ this whole area is one which needs specific treatment at the\n   Protocol level,\
    \ or merely needs internally acceptable handling at our\n   end.  In the meantime,\
    \ if you're trying to send an unsolicited file\n   to us for free, you can use\
    \ the NETML mechanism with no directory\n   qualification on the target pathname\
    \ in the STOR, then MAIL the file\n   name to the intended recipient, who will\
    \ copy the file into his own\n   directory (from, in our syntax, >udd>Cnet>anonymous).\
    \  That's all\n   pretty complicated, but it sure does go to show that higher-level\n\
    \   protocols need to know an awful lot about the various operating\n   systems.\
    \  At any rate, comment on either Bressler's Problem, POOL,\n   STOR, or other\
    \ people's access control mechanisms would all be\n   appreciated.\n"
- title: Endnotes
  contents:
  - "Endnotes\n   [1] (*) For b),I suggest that the USER NETML / PASS NETML discipline\n\
    \   of RFC 491 be extended.  That is, Hosts which allow free use of their\n  \
    \ FTP Servers should accept that pair of FTP commands as an indication\n   to\
    \ commence free service.  Whether this leads to a login of a dummy\n   user or\
    \ a passoff to a daemon process is a matter of local\n   implementation preference,\
    \ of course.\n   [2] (*) Note that this definition relieves the user of having\
    \ to know\n   the Server's pathname for the pool directory.\n         [ This RFC\
    \ was put into machine readable form for entry ]\n          [ into the online\
    \ RFC archives by Thomas Farmer 11/98 ]\n"
