- title: __initial_text__
  contents:
  - '                       IPv4 over MAPOS Version 1

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Authors' Note
  contents:
  - "Authors' Note\n   This memo documents a mechanism for supporting Version 4 of\
    \ the\n   Internet Protocol (IPv4) on Version 1 of the Multiple Access Protocol\n\
    \   over SONET/SDH.  This document is NOT the product of an IETF working\n   group\
    \ nor is it a standards track document.  It has not necessarily\n   benefited\
    \ from the widespread and in-depth community review that\n   standards track documents\
    \ receive.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a protocol for transmission of the Internet\n\
    \   Protocol Version 4 (IPv4) over Multiple Access Over SONET/SDH (MAPOS)\n  \
    \ version 1. MAPOS is a link layer protocol and provides multiple\n   access capability\
    \ over SONET/SDH links. IP runs on top of MAPOS. This\n   document explains IP\
    \ datagram encapsulation in HDLC frame of MAPOS,\n   and the Address Resolution\
    \ Protocol (ARP).\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Multiple Access Protocol over SONET/SDH (MAPOS) [1] is a\
    \ high-speed\n   link-layer protocol that provides multiple access capability\
    \ over\n   SONET/SDH. Its frame format is based on the HDLC-like framing [2] for\n\
    \   PPP.  A component called \"Frame Switch\" [1] allows multiple nodes to\n \
    \  be connected together in a star topology to form a LAN. Using long\n   haul\
    \ SONET/SDH links, the nodes on such a \"SONET-LAN\" can span over a\n   wide\
    \ geographical area. The Internet Protocol (IP) [3] datagrams are\n   transmitted\
    \ in MAPOS HDLC frames [1].\n   This document describes a protocol for transmission\
    \ of IP datagrams\n   over MAPOS version 1 [1]. It explains IP datagram encapsulation\
    \ in\n   HDLC frame of MAPOS, and ARP (Address Resolution Protocol) for\n   mapping\
    \ between IP address and HDLC address.\n"
- title: 2. Frame Format for Encapsulating IP Datagrams
  contents:
  - "2. Frame Format for Encapsulating IP Datagrams\n   An IP datagram is transmitted\
    \ in a MAPOS HDLC frame.  The protocol\n   field of the frame must contain the\
    \ value 0x0021 (hexadecimal) as\n   defined by the \"MAPOS Version 1 Assigned\
    \ Numbers\" [4].  The\n   information field contains the IP datagram.\n   The\
    \ information field may be one to 65,280 octets in length; the\n   MTU(Maximum\
    \ Transmission Unit) of MAPOS is 65,280 octets.  Although\n   the large MTU size\
    \ can suppress the overhead of IP header processing,\n   it may cause fragmentation\
    \ anywhere along the path from the source to\n   the destination and result in\
    \ performance degradation. To cope with\n   the issue, Path MTU discovery [5]\
    \ may be used.\n"
- title: 3. Address Mapping
  contents:
  - "3. Address Mapping\n   This section explains MAPOS ARP and the mapping of special\
    \ addresses.\n"
- title: 3.1 ARP cache
  contents:
  - "3.1 ARP cache\n   Each node on a MAPOS network maintains an \"ARP cache\" that\
    \ maps\n   destination IP addresses to their corresponding 8-bit HDLC addresses.\n\
    \   Entries are added to this cache either manually or by the Address\n   Resolution\
    \ Protocol described below.  Entries are removed from this\n   cache manually,\
    \ by the UNARP mechanism, or by ARP cache validation\n   mechanism.  An implementation\
    \ must provide a mechanism for manually\n   adding or removing arbitrary ARP cache\
    \ entries.\n"
- title: 3.2 Address Resolution Protocol (ARP)
  contents:
  - "3.2 Address Resolution Protocol (ARP)\n   This subsection describes MAPOS ARP\
    \ protocol and its packet format.\n"
- title: 3.2.1 Overview
  contents:
  - "3.2.1 Overview\n   The MAPOS ARP is similar to that for ethernet.  Prior to sending\
    \ an\n   IP datagram, the node must know the destination HDLC address\n   corresponding\
    \ to the destination IP address. When its ARP cache does\n   not contain the corresponding\
    \ entry, it uses ARP to translate the IP\n   address to the HDLC address. That\
    \ is, it broadcasts an ARP request\n   containing the destination IP address.\
    \  In response to the request,\n   the node which has the IP address sends an\
    \ ARP reply containing the\n   HDLC address. The returned HDLC address is stored\
    \ in the ARP cache.\n"
- title: 3.2.2 ARP Frame Format
  contents:
  - "3.2.2 ARP Frame Format\n   The protocol field for an ARP frame must contain 0xFE01\
    \ (hexadecimal)\n   as defined by the \"MAPOS Version 1 Assigned Numbers\" [4].\
    \ The\n   information field contains the ARP packet as shown below.\n        \
    \   +-------------------------+------------------------+\n           |  Hardware\
    \ Address Space | Protocol Address Space |\n           |       (25:MAPOS)    \
    \    |     (2048 in Dec)      |\n           |    16 bits              |   16 bits\
    \              |\n           +------------+------------+------------------------+\n\
    \           | Hard Addr  | Proto Addr |   Operation Code       |\n           |\
    \ Length (4) | Length (4) |(1:Request 2:Response)  |\n           |   8 bits  \
    \ |   8 bits   |         16 bits        |\n           +------------+------------+------------------------+\n\
    \           |    Sender HDLC Address        32 bits            |\n           +--------------------------------------------------+\n\
    \           |    Sender IP Address          32 bits            |\n           +--------------------------------------------------+\n\
    \           |    Target HDLC Address        32 bits            |\n           +--------------------------------------------------+\n\
    \           |    Target IP Address          32 bits            |\n           +--------------------------------------------------+\n\
    \                      Figure 5  ARP packet format\n     Hardware Address Space\
    \ (16 bits)\n     The hardware address space for MAPOS ARP is 25 in Decimal as\n\
    \     assigned by IANA [6].\n     Protocol Address Space (16 bits)\n     The protocol\
    \ address space for IP is 2048 in Decimal.\n     Hardware Address Length (8 bits)\n\
    \     The hardware address length is 4.\n     Protocol Address Length (8 bits)\n\
    \     The protocol address length for IP is 4.\n     Operation Code (16 bits)\n\
    \     The operation code is 1 for request and 2 for response.\n     Sender hardware\
    \ (HDLC) Address (32 bits)\n     Contains the sender's HDLC address in an ARP\
    \ request, and the\n     target HDLC address in an ARP response.  The 8-bit HDLC\
    \ address is\n     placed in the least significant place of the 32-bit field.\
    \ The\n     remaining bits should be zero.\n     Sender Protocol (IP) Address\
    \ (32 bits)\n     Contains the sender's IP address in an ARP request, and the\
    \ target\n     IP address in an ARP response.\n     Target hardware (HDLC) Address\
    \ (32 bits)\n     Contains unknown target HDLC address (all zeros) in an ARP request,\n\
    \     and sender's HDLC address in an ARP response.  The 8-bit HDLC\n     address\
    \ is placed in the least significant place of the 32-bit\n     field.  The remaining\
    \ bits should be zero.\n     Target Protocol (IP) Address (32 bits)\n     Contains\
    \ the target IP address in an ARP request, and the sender's\n     IP address in\
    \ an ARP response.\n"
- title: 3.3 UNARP
  contents:
  - "3.3 UNARP\n   An implementation MUST provide an UNARP mechanism to flush obsolete\n\
    \   ARP cache entries.  The mechanism is similar to the ARP extension\n   described\
    \ in [7].  When a node detects that its port has came up, it\n   MUST broadcast\
    \ an UNARP packet.  It forces every other node to clear\n   the obsolete ARP entry\
    \ which was created by the node previously\n   connected to the switch port. An\
    \ UNARP is an ARP clear request with\n   the following values:\n     Hardware\
    \ Address Space          :       25\n     Protocol Address Space          :  \
    \     2048\n     Hardware Address Length         :       4\n     Protocol Address\
    \ Length         :       4\n     Operation Code                  :       23 (MAPOS-UNARP)\n\
    \     Sender hardware (HDLC) Address  :       HDLC address of the node\n     Sender\
    \ Protocol (IP) Address    :       IP address of the node\n     Target hardware\
    \ (HDLC) Address  :       all 1\n     Target Protocol (IP) Address    :      \
    \ 255.255.255.255 (broadcast)\n     Hardware Address Space (16 bits)\n     The\
    \ hardware address space for MAPOS ARP is 25 in Decimal as\n     assigned by IANA\
    \ [6].\n     Operation Code (16 bits)\n     The operation code is 23 for MAPOS-UNARP\
    \ in Decimal as assigned by\n     IANA [6].\n   The node MUST send three UNARP\
    \ packets at 30 seconds intervals.  The\n   receiving node of the packet MUST\
    \ clear the ARP cache entry\n   associated with the Sender Protocol (IP) Address,\
    \ if and only if the\n   corresponding Hardware (HDLC) Address is not equal to\
    \ that contained\n   in the UNARP packet.  That is, if both the Sender Hardware\
    \ (HDLC)\n   Address and the Sender Protocol(IP) Address match those of the cached\n\
    \   entry, the entry is left unchanged.\n"
- title: 3.4 ARP Cache Validation
  contents:
  - "3.4 ARP Cache Validation\n   An implementation MUST provide a mechanism to remove\
    \ out-of-date\n   cache entries and it SHOULD provide options to configure the\
    \ timeout\n   value [8].  One approach is to periodically time-out the cache\n\
    \   entries, even if they are in use.  This approach involves ARP cache\n   timeouts\
    \ in the order of a minute or less.\n   Furthermore, when the link is lost on\
    \ an interface, all ARP cache\n   entries associated with the interface MUST be\
    \ removed immediately.\n   Causes for link loss includes conditions such as loss\
    \ of carrier and\n   out-of-synchronization.\n"
- title: 3.5 IP Broadcast and multicast
  contents:
  - "3.5 IP Broadcast and multicast\n   In broadcast and multicast frames, the most\
    \ significant bit of the\n   HDLC address must be 1 [1].  In addition, the least\
    \ significant bit\n   must always be 1 to indicate the end of the field [1].\n\
    \   In the case of IP broadcast, the remaining six bits of the HDLC\n   address\
    \ must be all 1s.  That is, it should be mapped to the HDLC\n   broadcast address\
    \ 0xFF (hexadecimal).\n   In the case of IP multicast, the remaining six bits\
    \ of the HDLC\n   address must contain the lowest-order six bits of the IP multicast\n\
    \   group address.  It resembles IP multicast extension for ethernet\n   described\
    \ in [9].  Exceptions arise when these six bits are either\n   all zeros or all\
    \ ones, in which case they should be altered to the\n   bit sequence 111110.\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - "References\n   [1]   Murakami, K. and M. Maruyama, \"MAPOS - Multiple Access\
    \ Protocol\n         over SONET/SDH, Version 1,\" RFC-2171, June 1997.\n   [2]\
    \   Simpson, W., editor, \"PPP in HDLC-like Framing,\" RFC-1662,\n         July\
    \ 1994.\n   [3]   Postel, J., \"Internet Protocol (IP),\" RFC-791, September 1981.\n\
    \   [4]   Maruyama, M. and K. Murakami, \"MAPOS Version 1 Assigned\n         Numbers,\"\
    \ RFC-2172, June 1997.\n   [5]   Mogul, J. and S. Deering, \"Path MTU Discovery,\"\
    \ RFC-1191,\n         Nov. 1990.\n   [6]   IANA, \"IANA-Assignments\",\n     \
    \    http://www.iana.org/iana/assignments.html\n   [7]   Malkin, G., \"ARP Extension\
    \ - UNARP,\" RFC-1868, November 1995.\n   [8]   Braden, R., \"Requirements for\
    \ Internet Hosts - Communication\n         Layers,\" RFC-1122, October 1989.\n\
    \   [9]   Deering, S., \"Host Extensions for IP Multicasting,\" RFC-1112,\n  \
    \       August 1989.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to acknowledge the contributions\
    \ and\n   thoughtful suggestions of John P. Mullaney, Clark Bremer, Masayuki\n\
    \   Kobayashi, Paul Francis, Toshiaki Yoshida, and Takahiro Sajima.\n"
- title: Author's Address
  contents:
  - "Author's Address\n     Ken Murakami\n     NTT Software Laboratories\n     3-9-11,\
    \ Midori-cho\n     Musashino-shi\n     Tokyo-180, Japan\n     E-mail: murakami@ntt-20.ecl.net\n\
    \     Mitsuru Maruyama\n     NTT Software Laboratories\n     3-9-11, Midori-cho\n\
    \     Musashino-shi\n     Tokyo-180, Japan\n     E-mail: mitsuru@ntt-20.ecl.net\n"
