- contents:
  - '     PPP Over Asynchronous Transfer Mode Adaptation Layer 2 (AAL2)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) provides a standard method for\n
    \  transporting multi-protocol datagrams over point-to-point links.\n   This document
    describes the use of ATM Adaptation Layer 2 (AAL2) for\n   framing PPP encapsulated
    packets.\n"
  title: Abstract
- contents:
  - "Applicability\n   This specification is intended for those implementations which
    desire\n   to use the facilities which are defined for PPP, such as the Link\n
    \  Control Protocol, Network-layer Control Protocols, authentication,\n   and
    compression.  These capabilities require a point-to-point\n   relationship between
    the peers, and are not designed for the multi-\n   point relationships which are
    available in ATM and other multi-access\n   environments.\n"
  title: Applicability
- contents:
  - "1. Introduction\n   PPP over AAL5 [2] describes the encapsulation format and
    operation of\n   PPP when used with the ATM AAL5 adaptation layer.  While this\n
    \  encapsulation format is well suited to PPP transport of IP, it is\n   bandwidth
    inefficient when used for transporting small payloads such\n   as voice.  PPP
    over AAL5 is especially bandwidth inefficient when\n   used with RTP header compression
    [3].\n   PPP over AAL2 addresses the bandwidth efficiency issues of PPP over\n
    \  AAL5 for small packet transport by making use of the AAL2 Common Part\n   Sublayer
    (CPS) [4] to allow multiple PPP payloads to be multiplexed\n   into a set of ATM
    cells.\n"
  title: 1. Introduction
- contents:
  - "2. Conventions\n   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,\n
    \  SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this\n   document,
    are to be interpreted as described in [6].\n"
  title: 2. Conventions
- contents:
  - "3. AAL2 Layer Service Interface\n   The PPP layer treats the underlying ATM AAL2
    layer service as a bit-\n   synchronous point-to-point link.  In this context,
    the PPP link\n   corresponds to an ATM AAL2 virtual connection.  The virtual\n
    \  connection MUST be full-duplex, point to point, and it MAY be either\n   dedicated
    (i.e., permanent, set up by provisioning) or switched (set\n   up on demand).
    \ In addition, the PPP/AAL2 service interface boundary\n   MUST meet the following
    requirements.\n      Interface Format - The PPP/AAL2 layer boundary presents an
    octet\n      service interface to the AAL2 layer.  There is no provision for\n
    \     sub-octets to be supplied or accepted.\n      Transmission Rate - The PPP
    layer does not impose any\n      restrictions regarding transmission rate on the
    underlying ATM\n      layer traffic descriptor parameters.\n      Control Signals
    - The AAL2 layer MUST provide control signals to\n      the PPP layer which indicate
    when the virtual connection link has\n      become connected or disconnected.
    \ These provide the \"Up\" and\n      \"Down\" events to the LCP state machine
    [1] within the PPP layer.\n      In the case of PPP over AAL2, the state of the
    link can be derived\n      from the type 3 fault management packets carried in-band
    within a\n      given AAL2 CID flow.\n"
  title: 3. AAL2 Layer Service Interface
- contents:
  - "4. PPP Operation with AAL2\n   PPP over AAL2 defines an encapsulation that uses
    the Service Specific\n   Segmentation and Reassembly Sublayer (SSSAR) [5] for
    AAL type 2.  The\n   SSSAR sub-layer is used to segment PPP packets into frames
    that can\n   be transported using the AAL2 CPS.  The SSSAR sub-layer uses\n   different
    AAL2 UUI code-points to indicate whether a segment is the\n   last segment of
    a packet or not.\n   The encapsulation of PPP over AAL2 provides a 16-bit CRC
    for PPP\n   payloads.  There are 2 UUI code points assigned from SSSAR to\n   indicate
    intermediate fragments of a packet and the last fragment of\n   a packet.  Code
    point 27 indicates intermediate frames of a\n   fragmented packet and code point
    26 indicates the last frame of a\n   packet.  The encapsulation format is more
    fully described in section\n   6.2.1.\n   An implementation of PPP over AAL2 MAY
    use one or more AAL2 Channel\n   Identifiers (CIDs) for transport of PPP packets
    associated with each\n   PPP session.  Multiple CIDs could be used to implement
    a multiple\n   class real time transport service for PPP using the AAL2 layer
    for\n   link fragmentation and interleaving.  A companion document [10]\n   describes
    class extensions for PPP over AAL2 using multiple AAL2\n   CIDs.\n"
  title: 4. PPP Operation with AAL2
- contents:
  - "5. Comparison of PPP Over AAL2 with Existing Encapsulations\n   This document
    proposes the substitution of AAL2 transport for PPP in\n   scenarios where small
    packets are being transported over an ATM\n   network.  This is most critical
    in applications such as voice\n   transport using RTP [9] where RTP Header compression
    [3] is used.  In\n   applications such as voice transport, both bandwidth efficiency
    and\n   low delay are very important.\n   This section provides justification
    for the PPP over AAL2 service for\n   ATM transport by comparing it to existing
    PPP encapsulation formats\n   used for transport over ATM.  Two encapsulation
    formats will be\n   examined here:  PPP over AAL5 [2], and PPP with PPPMUX [8]
    over AAL5.\n"
  - contents:
    - "5.1 Comparison With PPP Over AAL5\n   This proposal uses ATM AAL2 [4] rather
      than AAL5 as the transport for\n   PPP.  SSSAR along with the AAL2 CPS generates
      less ATM encapsulation\n   overhead per PPP payload.  The payload encapsulation
      consists of a 2\n   byte CRC.  The AAL2 CPS header consists of 3 bytes, and
      the AAL2\n   Start Field (STF) is 1 byte.  This is a total encapsulation overhead\n
      \  of 6 bytes.  This compares to 8 bytes of overhead for the AAL5\n   trailer
      used for PPP over AAL5.\n   The multiplexing function of the AAL2 CPS layer
      allows more bandwidth\n   efficient transport of PPP frames by multiplexing
      multiple PPP frames\n   into one or more ATM cells using the AAL2 CPS function.
      \ This removes\n   the pad overhead of AAL5 when used to transport short frames.\n"
    title: 5.1 Comparison With PPP Over AAL5
  - contents:
    - "5.2 Comparison with PPPMUX over AAL5\n   PPP Multiplexing (PPPMUX) [8] is a
      new method for doing multiplexing\n   in the PPP layer. PPPMUX provides functionality
      similar to the CPS\n   based multiplexing function of AAL2.  Using PPP multiplexing,
      a PPP\n   stack would look like PPP/PPPMUX/AAL5.\n   Both PPP/PPPMUX/AAL5 and
      PPP/AAL2 use multiplexing to reduce the\n   overhead of cell padding when frames
      are sent over an ATM virtual\n   circuit.  However, the bandwidth utilization
      of PPP/AAL2 will\n   typically be better than the bandwidth used by PPP/PPPMUX/AAL5.
      \ This\n   is because multiplexed frames in PPP/PPPMUX/AAL5 must always be\n
      \  encapsulated within an AAL5 frame before being sent.  This\n   encapsulation
      causes an additional 8 bytes of AAL5 trailer to be\n   added to the PPPMUX encapsulation.
      \ In addition to the 8 bytes of\n   AAL5 trailer, PPPMUX will incur an average
      of 24 additional bytes of\n   AAL5 PAD.  These 2 factors will end up reducing
      the effective\n   efficiency of PPPMUX when it is used over AAL5.\n   With PPP/AAL2,
      the AAL2 CPS layer treats individual PPP frames as a\n   series of CPS payloads
      that can be multiplexed.  As long as PPP\n   frames arrive at the CPS layer
      before the CPS TIMER_CU expires, all\n   ATM cells coming from the CPS layer
      will be filled.  Under these\n   conditions, PPP/AAL2 will have no PAD associated
      with it.  When the\n   AAL2 CPS function causes no PAD to be generated, PPP/AAL2
      will be\n   more bandwidth efficient than PPP/PPPMUX/AAL5.\n   In PPP/PPPMUX/AAL5,
      the AAL5 SAR and the PPP MUX/DEMUX are performed\n   in two different layers.
      \ Thus, the PPPMUX/AAL5 receiver must\n   reassemble a full AAL5 frame from
      the ATM layer before the PPPMUX\n   layer can extract the PPP payloads.  To
      derive maximum PPP\n   Multiplexing efficiency, many PPP payloads may be multiplexed\n
      \  together.  This increases the size of the multiplexed frame to many\n   ATM
      cells.  If one of these ATM cells is lost, the whole PPPMUX\n   packet will
      be discarded.  Also, there may be a significant delay\n   incurred while the
      AAL5 layer waits for many ATM cell arrival times\n   until a full frame has
      been assembled before the full frame is passed\n   up to the PPP Multiplexing
      layer where the inverse PPP demux then\n   occurs.  This same issue also applies
      to PPPMUX/AAL5 frames\n   progressing down the stack.\n   With AAL2, both the
      segmentation and reassembly and multiplexing\n   functions are performed in
      the AAL2 CPS layer.  Because of the\n   definition of the AAL2 CPS function,
      a multiplexed payload will be\n   extracted as soon as it is received.  The
      CPS receiver does not wait\n   until the many payloads of an AAL2 multiplexed
      frame are received\n   before removing payloads from the multiplexed stream.
      \ The same\n   benefit also applies to AAL2 CPS sender implementations.  Also,
      the\n   loss of an ATM cell causes the loss of the packets that are included\n
      \  in that cell only.\n   The AAL2 CPS function provides multiplexing in AAL2.
      \ This function\n   often needs to be implemented in hardware for performance
      reasons.\n   Because of this, a PPP/AAL2 implementation that takes advantage
      of an\n   AAL2 SAR implemented in hardware will have significant performance\n
      \  benefits over a PPP/PPPMUX/AAL5 implementation where PPPMUX is\n   implemented
      in software.  Also, the AAL2 specification has been\n   available significantly
      longer than the PPP Multiplexing\n   specification and because of this, optimized
      software and hardware\n   implementations of the AAL2 CPS function are further
      in development\n   than PPP Multiplexing implementations.\n"
    title: 5.2 Comparison with PPPMUX over AAL5
  title: 5. Comparison of PPP Over AAL2 with Existing Encapsulations
- contents:
  - '6. Detailed Protocol Operation Description

    '
  - contents:
    - '6.1 Background

      '
    - contents:
      - "6.1.1 AAL2 Multiplexing\n   ITU-T I.363.2 specifies ATM Adaptation Layer
        Type 2.  This AAL type\n   provides for bandwidth efficient transmission of
        low-rate, short and\n   variable length packets in delay sensitive applications.
        \ More than\n   one AAL type 2 user information stream can be supported on
        a single\n   ATM connection.  There is only one definition for the sub-layer\n
        \  because it implements the interface to the ATM layer and is shared by\n
        \  more than one SSCS layer.\n"
      title: 6.1.1 AAL2 Multiplexing
    - contents:
      - "6.1.2 AAL2 Service Specific Convergence Sub-layers\n   ITU-T I.366.1 and
        I.366.2 define Service Specific Convergence Sub-\n   layers (SSCS) that operate
        above the Common Part Sub-layer defined in\n   I.363.2.  This layer specifies
        packet formats and procedures to\n   encode the different information streams
        in bandwidth efficient\n   transport.  As the name implies, this sub-layer
        implements those\n   elements of service specific transport.  While there
        is only one\n   definition of the Common Part Sublayer for AAL2, there can
        be\n   multiple SSCS functions defined to run over this CPS layer.\n   Different
        CIDs within an AAL2 virtual circuit may run different\n   SSCSs.\n"
      title: 6.1.2 AAL2 Service Specific Convergence Sub-layers
    - contents:
      - "6.1.3 AAL2 CPS Packet (CPS-PKT) Format\n   The CPS-PKT format over AAL2 as
        defined in I.363.2:\n"
      - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

        '
      - '|           +          +         +         +                          |

        '
      - '|    CID    +    LI    +   UUI   +   HEC   +        CPS-INFO          |

        '
      - '|           +          +         +         +                          |

        '
      - '|           +          +         +         +                          |

        '
      - '|    (8)    +    (6)   +   (5)   +   (5)   +       (45/64 * 8)        |

        '
      - "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \              Note: The size of the fields denote bit-width\n   The Channel
        ID (CID) identifies the sub-stream within the AAL2\n   connection. The Length
        indication (LI) indicates the length of the\n   CPS-INFO payload.  The User-to-User
        Indication (UUI) carries\n   information between the SSCS/Application running
        above the CPS.  The\n   SSSAR sub-layer as defined in I.366.1 uses the following
        code points:\n      UUI Code-point       Packet Content\n      ++++++++++++++
        \      ++++++++++++++\n      0-26              Framed mode data, final packet.\n
        \     27                Framed mode data, more to come.\n   This proposal
        uses two UUI code-points as follows:\n      UUI Code-point       Packet Content\n
        \     ++++++++++++++       ++++++++++++++\n      27                   non-final
        packet.\n      26                   final packet.\n"
      title: 6.1.3 AAL2 CPS Packet (CPS-PKT) Format
    - contents:
      - "6.1.4 AAL2 CPS-PDU Format\n   The CPS-PDU format over AAL2 as defined in
        I.363.2:\n                      +-+-+-+~+~+-+-+\n                      |CPS|
        CPS-INFO|\n                      |PKT|         |\n                      |HDR|
        \        |\n                      +-+-+-+~+~+-+-+\n                      |
        \ CPS-PKT    |\n                      |             +-+-+-+~+~+-+-+\n                                    |CPS|
        CPS-INFO|\n                      |             |PKT|         |\n                                    |HDR|
        \        |\n                      |             +-+-+-+~+~+-+-+\n                                        CPS-PKT\n
        \                     |             |             +-+-+-+~+~+-+-+\n                                                  |CPS|
        CPS-INFO|\n                      |             |             |PKT|         |\n
        \                                                 |HDR|         |\n                      |
        \            |             +-+-+-+~+~+-+-+\n                                                      CPS-PKT\n
        \                     V             V             V             V\n"
      - "+-+-+-+-+-+-+-+~+~+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \ Cell    |           |                                         |     |\n
        \ Header  |    STF    |             CPS-PDU Payload             | PAD |\n
        \         |           |                                         |     |\n"
      - "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+~+~+\n
        \             Note: The size of the fields denote bitwidth\n   The CPS-PDU
        format is used to carry one or more CPS-PKT's multiplexed\n   on a single
        CPS-PDU. The CPS header contains enough information to\n   identify the CPS
        packets within a CPS-PDU. In the event of cell loss,\n   the STF field is
        used to find the first CPS-PKT in the current cell.\n"
      title: 6.1.4 AAL2 CPS-PDU Format
    title: 6.1 Background
  - contents:
    - "6.2 PPP Over AAL2 Encapsulation\n   PPP encapsulation over AAL2 uses the AAL2
      CPS with no change.\n   Some PPP encapsulated protocols such as RTP header compression\n
      \  require that the link layer provide packet error detection.  Because\n   of
      this, PPP over AAL2 defines a 16-bit CRC that is used along with\n   the SSSAR
      sub-layer of I.366.1 to provide packet error detection.\n   The encapsulation
      format is described below.\n"
    - contents:
      - "6.2.1 PPP Payload Encapsulation Over AAL2 with 16-bit CRC (CRC-16).\n   The
        payload encapsulation of PPP appends a two byte CRC to each PPP\n   frame
        before using the SSSAR layer to send the PPP packet as a series\n   of AAL2
        frames.\n   The format of a PPP over AAL2 packet is shown in the diagram below.\n
        \  Note that the diagram below shows the payload encapsulation when the\n
        \  packet is not segmented (UUI=26).  When the PPP packet is segmented,\n
        \  the PPP Protocol ID, Information field, and CRC-16 fields will be\n   split
        across multiple SSSAR frames.  In this case, the UUI field will\n   be set
        to 27 for all frames except the last frame. In the last frame,\n   the UUI
        field will be set to 26.\n"
      - 'Payload Encapsulation

        '
      - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

        '
      - '|         +       +       +       +           +             +         |

        '
      - '|   CID   +   LI  +  UUI  +  HEC  + Protocol  +             +         |

        '
      - '|         +       +       +       +    ID     + Information + CRC-16  |

        '
      - '|         +       +       +       +           +             +         |

        '
      - '|   (8)   +  (6)  +  (5)  +  (5)  +  (8/16)   +             +  (16)   |

        '
      - "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \            Note: The size of the fields denote bit-width\n   The algorithms
        used for computing and verifying the CRC-16 field are\n   identical to the
        algorithms specified for the Frame Check Sequence\n   (FCS) field in Q.921
        [13]. The algorithms from Q.921 are included in\n   this section for ease
        of access.\n   The CRC-16 field is filled with the value of a CRC calculation
        which\n   is performed over the contents of the PPP packet, including the
        PPP\n   Protocol ID and the information field.  The CRC field shall contain\n
        \  the ones complement of the sum (modulo 2) of:\n   1) the remainder of x^k
        (x^15 + x^14 + ... + x + 1) divided (modulo\n      2) by the generator polynomial,
        where k is the number of bits of\n      the information over which the CRC
        is calculated; and\n   2) the remainder of the division (modulo 2) by the
        generator\n      polynomial of the product of x^16 by the information over
        which\n      the CRC is calculated.\n   The CRC-16 generator polynomial is:\n
        \     G(x) = x^16 + x^12 + x^5 + 1\n   The result of the CRC calculation is
        placed with the least\n   significant bit right justified in the CRC field.\n
        \  As a typical implementation at the transmitter, the initial content\n   of
        the register of the device computing the remainder of the division\n   is
        preset to all \"1\"s and is then modified by division by the\n   generator
        polynomial (as described above) on the information over\n   which the CRC
        is to be calculated; the ones complement of the\n   resulting remainder is
        put into the CRC field.\n   As a typical implementation at the receiver, the
        initial content of\n   the register of the device computing the remainder
        of the division is\n   preset to all \"1\"s.  The final remainder, after multiplication
        by\n   x^16 and then division (modulo 2) by the generator polynomial of the\n
        \  serial incoming PPP packet (including the Protocol ID, the\n   information
        and the CRC fields), will be 0001110100001111 (x^15\n   through x^0, respectively)
        in the absence of transmission errors.\n"
      title: 6.2.1 PPP Payload Encapsulation Over AAL2 with 16-bit CRC (CRC-16).
    title: 6.2 PPP Over AAL2 Encapsulation
  - contents:
    - "6.3 Use of AAL2 CPS-PKT CIDs\n   An implementation of PPP over AAL2 MAY use
      a single AAL2 Channel\n   Identifier (CID) or multiple CIDs for transport of
      all PPP packets.\n   In order for the endpoints of a PPP session to work with
      AAL2, they\n   MUST both agree on the number, SSCS mapping, and values of AAL2
      CIDs\n   that will be used for a PPP session.  The values of AAL2 CIDs to be\n
      \  used for a PPP session MAY be obtained from either static\n   provisioning
      in the case of a dedicated AAL2 connection (PVC) or from\n   Q.2630.2 [7] signaling
      in the case of an AAL2 switched virtual\n   circuit (SPVC or SVC).\n   Using
      this proposal it is possible to support the use of conventional\n   AAL2 in
      CIDs that are not used to support PPP over AAL2.  This\n   proposal allows the
      co-existence of multiple types of SSCS function\n   within the same AAL2 VCC.\n"
    title: 6.3 Use of AAL2 CPS-PKT CIDs
  - contents:
    - "6.4 PPP over AAL2 Operation\n   PPP operation with AAL2 will perform basic
      PPP encapsulation with the\n   PPP protocol ID. A 16-bit CRC is calculated as
      described above and\n   appended to the payload.  The SSSAR sub-layer of AAL2
      is used for\n   transport.\n   Applications implementing PPP over AAL2 MUST
      meet all the\n   requirements of PPP [1].\n"
    title: 6.4 PPP over AAL2 Operation
  title: 6. Detailed Protocol Operation Description
- contents:
  - "7. Example implementation of PPP/AAL2\n   This section describes an example implementation
    of how PPP can be\n   encapsulated over AAL2.  The example shows two application
    stacks\n   generating IP packets that are sent to the same interface running\n
    \  PPP/AAL2.  One Application stack is generating RTP packets and\n   another
    application is generating IP Datagrams.  The PPP/AAL2\n   interface shown in this
    example is running an RFC 2508 compliant\n   version of RTP header compression.\n
    \  Here are the paths an Application packet can take in this\n   implementation:\n
    \      +---+---+---+---+--+                                        +\n       |
    \  Application A  |                                        |\n       +---+---+---+---+--+
    \                                       |\n       |       RTP        |                                        |\n
    \      +---+---+---+---+--+       +---+---+---+---+---+      Application\n       |
    \      UDP        |       |   Application B   |            |\n       +---+---+---+---+--+
    \      +---+---+---+---+---+            |\n       |        IP        |       |
    \       IP         |            |\n       +---+---+---+---+--+       +---+---+---+---+---+
    \           +\n               |                            |\n               +---------------+------------+\n
    \                              |\n                               |\n                     +---+---+---+---+---+--+
    \                     +\n                     |  Compression Filter  |                      |\n
    \                    +---+---+---+---+---+--+                      |\n                               |
    \                                  |\n                               |                                   |\n
    \                    +---------+-----------+                       |\n                     |
    \                    |                       |\n             RTP     |                     |
    \  Non-RTP             |\n           Packets   V                     |   Packets
    \            |\n       +---+---+---+---+---+---+           |                       |\n
    \      |            CRTP       |           |                       |\n       +---+---+---+---+---+---+---+---+---+---+---+---+
    \      Transport\n       |                      PPP                      |           |\n
    \      +---+---+---+---+---+---+---+---+---+---+---+---+           |\n                               |
    \                                  |\n       +---+---+---+---+---+---+---+ +--+---+---+---+---+--+--+-+
    \ |\n       |               Segmentation (SSSAR)                     |  |\n       +---+---+---+---+---+---+---+
    +--+---+---+---+---+--+--+-+  |\n       +---+---+---+---+---+---+---+---+---+---+---+---+---+----+
    \ |\n       |                   AAL2 CPS                             |  |\n       +---+---+---+---+---+---+---+---+---+---+---+---+---+----+
    \ |\n       |                   ATM Layer                            |  |\n       +---+---+---+---+---+---+---+---+---+---+---+---+---+----+
    \ +\n   In the picture above, application A is an RTP application generating\n
    \  RTP packets.  Application B is an IP application generating IP\n   datagrams.
    \ Application A gathers the RTP data and formats an RTP\n   packet.  Lower level
    layers of application A add UDP and IP headers\n   to form a complete IP packet.
    \ Application B is generating datagrams\n   to the IP layer.  These datagrams
    may not have UDP or RTP headers.\n   In the above picture, a protocol stack is
    configured to apply\n   CRTP/PPP/AAL2 compression on an interface to a destination
    host.  All\n   packets that are sent to this interface will be tested to see if
    they\n   can be compressed using RTP header compression.  As packets appear at\n
    \  the interface, they will be tested by a compression filter to\n   determine
    if they are candidates for header compression.  If the\n   compression filter
    determines that the packet is a candidate for\n   compression, the packet will
    be sent to the CRTP compressor. If the\n   packet is not a candidate for compression,
    it will be sent directly\n   to the PPP layer for encapsulation as an IP packet
    encapsulated in\n   PPP.\n   The destination UDP port number and packet length
    are examples of\n   criteria that may be used by the compression filter to select
    the\n   interface.\n   In this example, packets from application A will be passed
    to the\n   CRTP compressor which then hands the compressed packet to the PPP\n
    \  layer for encapsulation as one of the compressed header types of\n   CRTP.
    \ The PPP layer will add the appropriate CRTP payload type for\n   the compressed
    packet.\n   Packets from application B will be sent directly to the PPP layer
    for\n   encapsulation as an IP/PPP packet.  The PPP layer will add the PPP\n   payload
    type for an IP packet encapsulated in PPP.\n   PPP packets are then segmented
    using I.366.1 segmentation with SSSAR.\n   The resulting AAL2 frame mode PDU is
    passed down as a CPS SDU to the\n   CPS Layer for multiplexing accompanied by
    the CPS-UUI and the CPS-\n   CID.  The CPS Layer multiplexes the CPS-PKT onto
    a CPS-PDU.  CPS-PDUs\n   are passed to the ATM layer as ATM SDUs to be carried
    end-to-end\n   across the ATM network.\n   At the receiving end, the ATM SDU's
    arrive and are passed up to the\n   AAL2 CPS.  As the AAL2 CPS PDU is accumulated,
    complete CPS-PKT's are\n   reassembled by the SSSAR SSCS.  Reassembled packets
    are checked for\n   errors using the CRC algorithm.\n   At this point, the PPP
    layer on the receiving side uses the PPP\n   payload type to deliver the packet
    to either the CRTP decompressor or\n   the IP layer depending on the value of
    the PPP payload type.\n"
  title: 7. Example implementation of PPP/AAL2
- contents:
  - "8. LCP Configuration Options\n   By default, PPP over AAL2 will use the 16 bit
    CRC encapsulation for\n   all packets.\n   The default Maximum-Receive-Unit (MRU)
    is 1500 bytes.\n"
  title: 8. LCP Configuration Options
- contents:
  - "9. Security Considerations\n   This memo defines mechanisms for PPP encapsulation
    over ATM.  There\n   is an element of trust in any encapsulation protocol: a receiver\n
    \  should be able to trust that the sender has correctly identified the\n   protocol
    being encapsulated and that the sender has not been spoofed\n   or compromised.
    \ A receiver should also be able to trust that the\n   transport network between
    sender and receiver has not been\n   compromised.\n   A PPP session that runs
    over an ATM Virtual Circuit must follow the\n   PPP link operation state machine
    described in RFC 1661 [1].  This\n   state machine includes the ability to enforce
    the use of an\n   authentication phase using the PAP/CHAP authentication protocols\n
    \  before any network layer packets are exchanged.  Using PPP level\n   authentication,
    a PPP receiver can authenticate a PPP sender.\n   System security may also be
    compromised by the attacks of the ATM\n   transport network itself.  The ATM Forum
    has published a security\n   framework [11] and a security specification [12]
    that define\n   procedures to guard against common threats to an ATM transport\n
    \  network.\n   PPP level authentication does not guard against man in the middle\n
    \  attacks.  These attacks could occur if an attacker was able to\n   compromise
    the security infrastructure of an ATM switching network.\n   Applications that
    require protection against threats to an ATM\n   switching network are encouraged
    to use authentication headers, or\n   encrypted payloads, and/or the ATM-layer
    security services described\n   in [12].\n   When PPP over AAL2 is used on a set
    of CIDs in a virtual connection,\n   there may be other non PPP encapsulated AAL2
    CIDs running on the same\n   virtual connection.  Because of this, an end point
    cannot assume that\n   the PPP session authentication and related security mechanisms
    also\n   secure the non PPP encapsulated CIDs on that same virtual connection.\n"
  title: 9. Security Considerations
- contents:
  - "10. Acknowledgements\n   The authors would like to thank Rajesh Kumar, Mike Mclaughlin,
    Pietro\n   Schicker, James Carlson and John O'Neil for their contributions to\n
    \  this proposal.\n"
  title: 10. Acknowledgements
- contents:
  - "11. References\n   [1]  Simpson, W., Editor, \"The Point-to-Point Protocol (PPP)\",
    STD\n        51, RFC 1661, July 1994.\n   [2]  Gross, G., Kaycee, M., Li, A.,
    Malis, A. and J. Stephens, \"PPP\n        over AAL5\", STD 51, RFC 2364, July
    1998.\n   [3]  Casner, S. and V. Jacobson, \"Compressing IP/UDP/RTP Headers for\n
    \       Low-Speed Serial Links\", RFC 2508, February 1999.\n   [4]  International
    Telecommunications Union, \"BISDN ATM Adaptation\n        layer specification:
    Type 2 AAL(AAL2)\", ITU-T Recommendation\n        I.363.2, September 1997.\n   [5]
    \ International Telecommunications Union, \"Segmentation and\n        Reassembly
    Service Specific Convergence Sublayer for the AAL\n        type 2\", ITU-T Recommendation
    I.366.1, June 1998.\n   [6]  Bradner, S., \"Key words for use in RFCs to Indicate
    Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [7]  ITU-T, \"ITU-T
    RECOMMENDATION Q.2630.2\", December 2000.\n   [8]  Pazhyannur, R, Ali, I. and
    C. Fox, \"PPP Multiplexing\", RFC 3153,\n        August 2001.\n   [9]  Schulzrinne,
    H., Casner, S., Frederick, R. and V. Jacobson,\n        \"RTP:  A Transport Protocol
    for Real-Time Applications\", RFC\n        1889, January 1996.\n   [10] Thompson,
    B., Koren, T. and B. Buffam, \"Class Extensions for PPP\n        over Asynchronous
    Transfer Mode Adaptation Layer 2\", RFC 3337,\n        December 2002.\n   [11]
    The ATM Forum, \"ATM Security Framework Version 1.0\", af-sec-\n        0096.000,
    February 1998.\n   [12] The ATM Forum, \"ATM Security Specification v1.1\", af-sec-\n
    \       0100.002, March 2001.\n   [13] International Telecommunications Union,
    ISDN User-Network\n        Interface-Data Link Layer Specification, ITU-T Recommendation\n
    \       Q.921, March 1993.\n"
  title: 11. References
- contents:
  - "12. Authors' Addresses\n   Bruce Thompson\n   Cisco Systems, Inc.\n   170 West
    Tasman Drive\n   San Jose, CA 95134\n   USA\n   Phone: +1 408 527-0446\n   EMail:
    brucet@cisco.com\n   Tmima Koren\n   Cisco Systems, Inc.\n   170 West Tasman Drive\n
    \  San Jose, CA 95134\n   USA\n   Phone: +1 408 527-6169\n   EMail: tmima@cisco.com\n
    \  Bruce Buffam\n   Seaway Networks\n   One Chrysalis Way,\n   Suite 300,\n   Ottawa,
    Canada\n   K2G-6P9\n   Phone: +1 613 723-9161\n   EMail: bruce@seawaynetworks.com\n"
  title: 12. Authors' Addresses
- contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 13.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
