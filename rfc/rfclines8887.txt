Abstract This document defines a binding for the JSON Meta Application Protocol (JMAP) over a WebSocket transport layer.
The WebSocket binding for JMAP provides higher performance than the current HTTP binding for JMAP.
Introduction JMAP [RFC8620] over HTTP [RFC7235] requires that every JMAP API request be authenticated.
Depending on the type of authentication used by the JMAP client and the configuration of the JMAP server, authentication could be an expensive operation both in time and resources.
In such circumstances, reauthenticating for every JMAP API request may harm performance.
The WebSocket [RFC6455] binding for JMAP eliminates this performance hit by authenticating just the WebSocket handshake request and having those credentials remain in effect for the duration of the WebSocket connection.
This binding supports JMAP API requests and responses, with optional support for push notifications.
Furthermore, the WebSocket binding for JMAP can optionally compress [RFC7692]
both JMAP API requests and responses.
Although compression of HTTP responses is ubiquitous, compression of HTTP requests has very low, if any, deployment and therefore isn't a viable option for JMAP API requests over HTTP.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
This document uses the terminology defined in the core JMAP specification [RFC8620].
Discovering Support for JMAP over WebSocket
The JMAP capabilities object is returned as part of the standard JMAP Session object (see Section 2 of [RFC8620]).
Servers supporting this specification MUST add a property named "urn:ietf:params:jmap:websocket" to the capabilities object.
"Boolean" This is true if the server supports push notifications over the WebSocket, as described in Section 4.3.5.
The term WebSocket subprotocol refers to an application level protocol layered on top of a WebSocket connection.
This document specifies the WebSocket JMAP subprotocol for carrying JMAP API requests, responses, and optional push notifications through a WebSocket connection.
Binary data is handled per Section 6 of [RFC8620] (via a separate HTTP connection or stream) or per a future extension to JMAP or this specification.
Authentication A JMAP WebSocket connection is authenticated by presenting a user's credentials in the HTTP request [RFC7235] that initiates the WebSocket handshake.
See Section 8.2 of [RFC8620] for recommendations regarding the selection of HTTP authentication schemes.
The JMAP WebSocket client and JMAP WebSocket server negotiate the use of the WebSocket JMAP subprotocol during the WebSocket handshake, either via an HTTP/1.1 Upgrade request (see Section 4 of [RFC6455]) or an HTTP/2 Extended CONNECT request (see Section 5 of [RFC8441]).
The WebSocket JMAP subprotocol is also intended to run over future bindings of HTTP (e.g., HTTP/3)
provided that there is a defined mechanism for performing a WebSocket handshake over that binding.
If the TLS handshake fails, the client MUST close the connection.
Otherwise, the client MUST make an authenticated HTTP request [RFC7235] on the encrypted connection and MUST include the value "jmap" in the list of protocols for the "Sec WebSocket Protocol" header field.
The reply from the server MUST also contain a corresponding "Sec  WebSocket Protocol" header field with a value of "jmap" in order for a JMAP subprotocol connection to be established.
Once the handshake has successfully completed, the WebSocket connection is established and can be used for JMAP API requests, responses, and optional push notifications.
Other message types MUST NOT be transmitted over this connection.
The credentials used for authenticating the HTTP request to initiate the handshake remain in effect for the duration of the WebSocket connection.
If the authentication credentials for the user expire, the server can either treat subsequent requests as if they are unauthenticated or close the WebSocket connection.
In the latter case, the server MAY send a Close frame with a status code of 1008 (Policy Violation), as defined in Section 7.4.1 of [RFC6455].
WebSocket Messages Data frame messages in the JMAP subprotocol MUST be text frames and contain UTF 8 encoded data.
The messages MUST be in the form of a single JMAP Request object (see Section 3.3 of [RFC8620]),
JMAP WebSocketPushEnable object (see Section 4.3.5.2), or JMAP WebSocketPushDisable object (see Section 4.3.5.3) when sent from the client to the server, and MUST be in the form of a single JMAP Response object, JSON Problem Details object, or JMAP StateChange object (see Sections 3.4, 3.6.1, and 7.1 of [RFC8620], respectively) when sent from the server to the client.
Note that fragmented WebSocket messages (split over multiple text frames) MUST be coalesced prior to parsing them as JSON objects.
If a client or server receives a binary frame, the endpoint can either ignore the frame or close the WebSocket connection.
In the latter case, the endpoint MAY send a Close frame with a status code of 1003 (Unsupported Data), as defined in Section 7.4.1 of [RFC6455].
If a client receives a message that is not in the form of a JSON Problem Details object, a JMAP Response object, or a JMAP StateChange object, the client can either ignore the message or close the WebSocket connection.
In the latter case, the endpoint MAY send a Close frame with a status code of 1007 (Invalid frame payload data), as defined in Section 7.4.1 of [RFC6455].
A server MUST return an appropriate JSON Problem Details object (Section 4.3.4) for any request level errors (e.g., an invalid JMAP object, an unsupported capability or method call, or exceeding a server request limit).
A client specified identifier for the request to be echoed back in the response to this request.
JMAP over WebSocket allows the server to process requests out of order.
The client specified identifier is used as a mechanism for the client to correlate requests and responses.
Additionally, the "maxConcurrentRequests" limit in the "capabilities" object (see Section 2 of [RFC8620]) also applies to requests made on the WebSocket connection.
When using the WebSocket JMAP subprotocol over a binding of HTTP that allows multiplexing of requests (e.g., HTTP/2), this limit applies to the sum of requests made on both the JMAP API endpoint and the WebSocket connection.
"String" (optional; MUST be returned if an identifier is included in the request)
The client specified identifier in the corresponding request.
"String" (optional; MUST be returned if given in the request)
The client specified identifier in the corresponding request.
JMAP Push Notifications JMAP over WebSocket servers that support push notifications on the WebSocket will advertise a "supportsPush" property with a value of true in the "urn:ietf:params:jmap:websocket" server capabilities object.
All push notifications take the form of a standard StateChange object (see Section 7.1 of [RFC8620]).
A (preferably short) string that encodes the entire server state visible to the user (not just the objects returned in this call).
The purpose of the "pushState" token is to allow a client to immediately get any changes that occurred while it was disconnected (see Section 4.3.5.2).
If the server does not support "pushState" tokens, the client will have to issue a series of "/changes" requests (see Section 5.2 of [RFC8620]) upon reconnection to update its state to match that of the server.
A client enables push notifications from the server for the current connection by sending a WebSocketPushEnable object to the server.
A list of data type names (e.g., "Mailbox" or "Email") that the client is interested in.
A StateChange notification will only be sent if the data for one of these types changes.
Other types are omitted from the TypeState object.
If null, changes will be pushed for all supported data types.
The last "pushState" token that the client received from the server.
Upon receipt of a "pushState" token, the server SHOULD immediately send all changes since that state token.
A client disables push notifications from the server for the current connection by sending a WebSocketPushDisable object to the server.
The following examples show WebSocket JMAP opening handshakes, a JMAP Core/echo request and response, and a subsequent closing handshake.
The examples assume that the JMAP WebSocket URL endpoint has been advertised in the JMAP Session object as having a path of "/jmap/ws/" and that TLS negotiation has already succeeded.
Note that folding of header fields is for editorial purposes only.
WebSocket JMAP connection via HTTP/1.1 with push notifications for mail [RFC8621] is enabled.
This example assumes that the client has cached pushState "aaa" from a previous connection.
jmap Sec WebSocket Version: 13 Origin: https://www.example.com
The quick brown fox jumps over the lazy dog.
[A new email is received] WS CLOSE [WebSocket connection closed]
WebSocket JMAP connection on an HTTP/2 stream that also negotiates compression [RFC7692]:
method   CONNECT :protocol   websocket :scheme   https :path   /jmap
13 sec websocket extensions   permessage deflate origin
The security considerations for both WebSocket (see Section 10 of [RFC6455]) and JMAP (see Section 8 of [RFC8620]) apply to the WebSocket JMAP subprotocol.
Specific security considerations are described below.
To ensure the confidentiality and integrity of data sent and received via JMAP over WebSocket, the WebSocket connection MUST use TLS 1.2 [RFC5246] or later, following the recommendations in BCP 195 [RFC7525].
Servers SHOULD support TLS 1.3 [RFC8446] or later.
Non browser Clients JMAP over WebSocket
can be used by clients both running inside and outside of a web browser.
As such, the security considerations in Sections 10.2 and 10.1 of [RFC6455] apply to those respective environments.
Registration of the WebSocket JMAP Subprotocol Per this specification, IANA has registered the following in the "WebSocket Subprotocol Name Registry" within the "WebSocket Protocol Registries".
jmap Subprotocol Common Name:  WebSocket Transport for JMAP (JSON Meta Application Protocol)
