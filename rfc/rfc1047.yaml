- title: __initial_text__
  contents:
  - '                      DUPLICATE MESSAGES AND SMTP

    '
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   An examination of a synchronization problem in the Simple\
    \ Mail\n   Transfer Protocol (SMTP) is presented.  This synchronization problem\n\
    \   can cause a message to be delivered multiple times.  A method for\n   avoiding\
    \ this problem is suggested.  Nodding familiarity with the\n   SMTP specification,\
    \ RFC-821, is required.  Distribution of this memo\n   is unlimited.\n"
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   Over the past few years, the staff of the CSNET Coordination\
    \ and\n   Information Center (CIC) has often been asked to help determine why\
    \ a\n   single mail message is being delivered multiple times to its\n   recipients.\
    \  In the process of tracing the problems of multiple\n   delivery, we have discovered\
    \ that many duplicate messages are the\n   result of a synchronization problem\
    \ in SMTP.  There is a point in the\n   process of delivering a message where\
    \ the receiving mailer knows it\n   has accepted the message but the sending mailer\
    \ is still not sure the\n   message has been reliably delivered.  If the SMTP\
    \ conversation is\n   broken at this point, the sending mailer will be forced\
    \ to re-deliver\n   the message, even though the message has already been received\
    \ and\n   delivered by the receiving mailer.\n"
- title: DESCRIPTION OF THE PROBLEM
  contents:
  - "DESCRIPTION OF THE PROBLEM\n   The synchronization problem occurs at the end\
    \ of delivering a\n   message.  When the sending mailer has finished sending the\
    \ text of a\n   message, it is required to send a line containing a single dot\
    \ or\n   period.  When the receiving mailer receives this final dot, it is\n \
    \  expected to do its final message processing and either confirm\n   receipt\
    \ of the message (with a 250 reply) or reject the message with\n   any one of\
    \ several error codes.\n   Observe that there is a potential synchronization gap\
    \ here.  During\n   the period between the time the receiving mailer has determined\
    \ that\n   it will accept the message, and the time that sending mailer gets the\n\
    \   250 reply, the message is active at both the sending and receiving\n   mailer.\
    \  Until the sending mailer gets the 250 reply, it must assume\n   the message\
    \ was not delivered.  After the receiving mailer has\n   decided to accept the\
    \ message, it must assume the message has been\n   delivered to it.  If the communications\
    \ link fails during this\n   synchronization gap, then the message has been duplicated.\
    \  Both\n   mailers have active copies of the message that they will try to\n\
    \   deliver.\n   It may be hard to believe that this problem is the cause of many\n\
    \   duplicate messages.  Intuitively, one might expect that the time\n   spent\
    \ in the state between the final dot and its accepting 250 reply\n   is quite\
    \ small.  In practice, however, this period is often quite\n   long; long enough\
    \ that timeouts by the sending mailer (or possibly\n   network failures) are quite\
    \ common.  Observations by the author\n   suggest that this synchronization problem\
    \ may be the second leading\n   cause of duplicate messages on the Internet (second\
    \ to mail loops).\n   Many mailers delay responding to the final dot because they\
    \ are doing\n   sophisticated processing of the message, in an attempt to confirm\n\
    \   that they can deliver the message.  For example, the mailers may\n   expand\
    \ an entire mailing list to confirm that it can reach all\n   addressees or may\
    \ attempt to physically deposit the message into the\n   mailboxes of local users,\
    \ before confirming receipt of the final dot.\n   These practices are not unreasonable,\
    \ but they often cause the\n   synchronization gap to continue for several minutes,\
    \ and increase the\n   likelihood that the sending mailer will timeout or the\
    \ network will\n   fail before the accepting 250 reply is sent.\n"
- title: AVOIDING SYNCHRONIZATION PROBLEMS
  contents:
  - "AVOIDING SYNCHRONIZATION PROBLEMS\n   The best way to avoid the synchronization\
    \ problem is to minimize the\n   length of the synchronization gap.  In other\
    \ words, receiving mailers\n   should acknowledge the final dot as soon as possible\
    \ and do more\n   complex processing of the message later.\n   RFC-821 (on page\
    \ 22) states that unless the receiving mailer is\n   completely unable to process\
    \ a message it should accept the message\n   and acknowledge any errors in processing\
    \ in a separate message or\n   messages sent back to the originator of the message.\
    \  As a result,\n   receiving mailers should be able to acknowledge the final\
    \ dot as soon\n   as the message has been safely put in a non-volatile (e.g.,\
    \ disk)\n   queue for further processing.  Fast acceptance of a message does not\n\
    \   violate RFC-821.\n   Some mailers can be configured to do more or less processing\
    \ upon\n   receipt of the final dot.  In such situations, the mailer should\n\
    \   always be configured to do less processing.\n   Finally, some mailers allow\
    \ remote mailers only a minute or two to\n   acknowledge the final dot before\
    \ timing out and trying again.  Given\n   the increasing round-trip times on the\
    \ Internet, and that some\n   processing after the final dot is required, the\
    \ timeout for reply to\n   the final dot should probably be at least 5 minutes\
    \ and a timeout of\n   10 minutes would not be unreasonable.\n"
