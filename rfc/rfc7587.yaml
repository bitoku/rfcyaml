- title: __initial_text__
  contents:
  - '         RTP Payload Format for the Opus Speech and Audio Codec

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines the Real-time Transport Protocol (RTP) payload\n\
    \   format for packetization of Opus-encoded speech and audio data\n   necessary\
    \ to integrate the codec in the most compatible way.  It also\n   provides an\
    \ applicability statement for the use of Opus over RTP.\n   Further, it describes\
    \ media type registrations for the RTP payload\n   format.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7587.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Conventions, Definitions, and Acronyms Used in This Document\
    \    3\n   3.  Opus Codec  . . . . . . . . . . . . . . . . . . . . . . . . . \
    \  4\n     3.1.  Network Bandwidth . . . . . . . . . . . . . . . . . . . .   4\n\
    \       3.1.1.  Recommended Bitrate . . . . . . . . . . . . . . . . .   4\n  \
    \     3.1.2.  Variable versus Constant Bitrate  . . . . . . . . . .   4\n    \
    \   3.1.3.  Discontinuous Transmission (DTX)  . . . . . . . . . .   5\n     3.2.\
    \  Complexity  . . . . . . . . . . . . . . . . . . . . . . .   6\n     3.3.  Forward\
    \ Error Correction (FEC)  . . . . . . . . . . . . .   6\n     3.4.  Stereo Operation\
    \  . . . . . . . . . . . . . . . . . . . .   6\n   4.  Opus RTP Payload Format\
    \ . . . . . . . . . . . . . . . . . . .   7\n     4.1.  RTP Header Usage  . .\
    \ . . . . . . . . . . . . . . . . . .   7\n     4.2.  Payload Structure . . .\
    \ . . . . . . . . . . . . . . . . .   7\n   5.  Congestion Control  . . . . .\
    \ . . . . . . . . . . . . . . . .   8\n   6.  IANA Considerations . . . . . .\
    \ . . . . . . . . . . . . . . .   9\n     6.1.  Opus Media Type Registration \
    \ . . . . . . . . . . . . . .   9\n   7.  SDP Considerations  . . . . . . . .\
    \ . . . . . . . . . . . . .  12\n     7.1.  SDP Offer/Answer Considerations .\
    \ . . . . . . . . . . . .  13\n     7.2.  Declarative SDP Considerations for Opus\
    \ . . . . . . . . .  15\n   8.  Security Considerations . . . . . . . . . . .\
    \ . . . . . . . .  15\n   9.  References  . . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  16\n     9.1.  Normative References  . . . . . . . . . . . .\
    \ . . . . . .  16\n     9.2.  Informative References  . . . . . . . . . . . .\
    \ . . . . .  17\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  18\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . .\
    \ . . .  18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Opus [RFC6716] is a speech and audio codec developed within\
    \ the IETF\n   Internet Wideband Audio Codec working group.  The codec has a very\n\
    \   low algorithmic delay, and it is highly scalable in terms of audio\n   bandwidth,\
    \ bitrate, and complexity.  Further, it provides different\n   modes to efficiently\
    \ encode speech signals as well as music signals,\n   thus making it the codec\
    \ of choice for various applications using the\n   Internet or similar networks.\n\
    \   This document defines the Real-time Transport Protocol (RTP)\n   [RFC3550]\
    \ payload format for packetization of Opus-encoded speech and\n   audio data necessary\
    \ to integrate Opus in the most compatible way.\n   It also provides an applicability\
    \ statement for the use of Opus over\n   RTP.  Further, it describes media type\
    \ registrations for the RTP\n   payload format.\n"
- title: 2.  Conventions, Definitions, and Acronyms Used in This Document
  contents:
  - "2.  Conventions, Definitions, and Acronyms Used in This Document\n   The key\
    \ words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"\
    SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n\
    \   document are to be interpreted as described in [RFC2119].\n   audio bandwidth:\
    \  The range of audio frequencies being coded\n   CBR:  Constant bitrate\n   CPU:\
    \  Central Processing Unit\n   DTX:  Discontinuous Transmission\n   FEC:  Forward\
    \ Error Correction\n   IP:  Internet Protocol\n   samples:  Speech or audio samples\
    \ (per channel)\n   SDP:  Session Description Protocol\n   SSRC:  Synchronization\
    \ source\n   VBR:  Variable bitrate\n   Throughout this document, we refer to\
    \ the following definitions:\n   +--------------+----------------+-----------------+-----------------+\n\
    \   | Abbreviation |      Name      | Audio Bandwidth |  Sampling Rate  |\n  \
    \ |              |                |       (Hz)      |       (Hz)      |\n   +--------------+----------------+-----------------+-----------------+\n\
    \   |      NB      |   Narrowband   |     0 - 4000    |       8000      |\n  \
    \ |              |                |                 |                 |\n   |\
    \      MB      |   Mediumband   |     0 - 6000    |      12000      |\n   |  \
    \            |                |                 |                 |\n   |    \
    \  WB      |    Wideband    |     0 - 8000    |      16000      |\n   |      \
    \        |                |                 |                 |\n   |     SWB\
    \      | Super-wideband |    0 - 12000    |      24000      |\n   |          \
    \    |                |                 |                 |\n   |      FB    \
    \  |    Fullband    |    0 - 20000    |      48000      |\n   +--------------+----------------+-----------------+-----------------+\n\
    \                      Table 1: Audio Bandwidth Naming\n"
- title: 3.  Opus Codec
  contents:
  - "3.  Opus Codec\n   Opus encodes speech signals as well as general audio signals.\
    \  Two\n   different modes can be chosen, a voice mode or an audio mode, to\n\
    \   allow the most efficient coding depending on the type of the input\n   signal,\
    \ the sampling frequency of the input signal, and the intended\n   application.\n\
    \   The voice mode allows efficient encoding of voice signals at lower\n   bitrates\
    \ while the audio mode is optimized for general audio signals\n   at medium and\
    \ higher bitrates.\n   Opus is highly scalable in terms of audio bandwidth, bitrate,\
    \ and\n   complexity.  Further, Opus allows transmitting stereo signals with\n\
    \   in-band signaling in the bitstream.\n"
- title: 3.1.  Network Bandwidth
  contents:
  - "3.1.  Network Bandwidth\n   Opus supports bitrates from 6 kbit/s to 510 kbit/s.\
    \  The bitrate can\n   be changed dynamically within that range.  All other parameters\
    \ being\n   equal, higher bitrates result in higher audio quality.\n"
- title: 3.1.1.  Recommended Bitrate
  contents:
  - "3.1.1.  Recommended Bitrate\n   For a frame size of 20 ms, these are the bitrate\
    \ \"sweet spots\" for\n   Opus in various configurations:\n   o  8-12 kbit/s for\
    \ NB speech,\n   o  16-20 kbit/s for WB speech,\n   o  28-40 kbit/s for FB speech,\n\
    \   o  48-64 kbit/s for FB mono music, and\n   o  64-128 kbit/s for FB stereo\
    \ music.\n"
- title: 3.1.2.  Variable versus Constant Bitrate
  contents:
  - "3.1.2.  Variable versus Constant Bitrate\n   For the same average bitrate, variable\
    \ bitrate (VBR) can achieve\n   higher audio quality than constant bitrate (CBR).\
    \  For the majority\n   of voice transmission applications, VBR is the best choice.\
    \  One\n   reason for choosing CBR is the potential information leak that\n  \
    \ _might_ occur when encrypting the compressed stream.  See [RFC6562]\n   for\
    \ guidelines on when VBR is appropriate for encrypted audio\n   communications.\
    \  In the case where an existing VBR stream needs to be\n   converted to CBR for\
    \ security reasons, the Opus padding mechanism\n   described in [RFC6716] is the\
    \ RECOMMENDED way to achieve padding\n   because the RTP padding bit is unencrypted.\n\
    \   The bitrate can be adjusted at any point in time.  To avoid\n   congestion,\
    \ the average bitrate SHOULD NOT exceed the available\n   network bandwidth. \
    \ If no target bitrate is specified, the bitrates\n   specified in Section 3.1.1\
    \ are RECOMMENDED.\n"
- title: 3.1.3.  Discontinuous Transmission (DTX)
  contents:
  - "3.1.3.  Discontinuous Transmission (DTX)\n   Opus can, as described in Section\
    \ 3.1.2, be operated with a variable\n   bitrate.  In that case, the encoder will\
    \ automatically reduce the\n   bitrate for certain input signals, like periods\
    \ of silence.  When\n   using continuous transmission, it will reduce the bitrate\
    \ when the\n   characteristics of the input signal permit, but it will never\n\
    \   interrupt the transmission to the receiver.  Therefore, the received\n   signal\
    \ will maintain the same high level of audio quality over the\n   full duration\
    \ of a transmission while minimizing the average bitrate\n   over time.\n   In\
    \ cases where the bitrate of Opus needs to be reduced even further\n   or in cases\
    \ where only constant bitrate is available, the Opus\n   encoder can use Discontinuous\
    \ Transmission (DTX), where parts of the\n   encoded signal that correspond to\
    \ periods of silence in the input\n   speech or audio signal are not transmitted\
    \ to the receiver.  A\n   receiver can distinguish between DTX and packet loss\
    \ by looking for\n   gaps in the sequence number, as described by Section 4.1\n\
    \   of [RFC3551].\n   On the receiving side, the non-transmitted parts will be\
    \ handled by a\n   frame loss concealment unit in the Opus decoder, which generates\
    \ a\n   comfort noise signal to replace the non-transmitted parts of the\n   speech\
    \ or audio signal.  Using Comfort Noise as defined in [RFC3389]\n   with Opus\
    \ is discouraged.  The transmitter MUST drop whole frames\n   only, based on the\
    \ size of the last transmitted frame, to ensure\n   successive RTP timestamps\
    \ differ by a multiple of 120 and to allow\n   the receiver to use whole frames\
    \ for concealment.\n   DTX can be used with both variable and constant bitrate.\
    \  It will\n   have a slightly lower speech or audio quality than continuous\n\
    \   transmission.  Therefore, using continuous transmission is\n   RECOMMENDED\
    \ unless constraints on available network bandwidth are\n   severe.\n"
- title: 3.2.  Complexity
  contents:
  - "3.2.  Complexity\n   Complexity of the encoder can be scaled to optimize for\
    \ CPU resources\n   in real time, mostly as a trade-off between audio quality\
    \ and\n   bitrate.  Also, different modes of Opus have different complexity.\n"
- title: 3.3.  Forward Error Correction (FEC)
  contents:
  - "3.3.  Forward Error Correction (FEC)\n   The voice mode of Opus allows for embedding\
    \ in-band Forward Error\n   Correction (FEC) data into the Opus bitstream.  This\
    \ FEC scheme adds\n   redundant information about the previous packet (N-1) to\
    \ the current\n   output packet N.  For each frame, the encoder decides whether\
    \ to use\n   FEC based on (1) an externally provided estimate of the channel's\n\
    \   packet loss rate; (2) an externally provided estimate of the\n   channel's\
    \ capacity; (3) the sensitivity of the audio or speech signal\n   to packet loss;\
    \ and (4) whether the receiving decoder has indicated\n   it can take advantage\
    \ of in-band FEC information.  The decision to\n   send in-band FEC information\
    \ is entirely controlled by the encoder;\n   therefore, no special precautions\
    \ for the payload have to be taken.\n   On the receiving side, the decoder can\
    \ take advantage of this\n   additional information when it loses a packet and\
    \ the next packet is\n   available.  In order to use the FEC data, the jitter\
    \ buffer needs to\n   provide access to payloads with the FEC data.  Instead of\
    \ performing\n   loss concealment for a missing packet, the receiver can then\n\
    \   configure its decoder to decode the FEC data from the next packet.\n   Any\
    \ compliant Opus decoder is capable of ignoring FEC information\n   when it is\
    \ not needed, so encoding with FEC cannot cause\n   interoperability problems.\
    \  However, if FEC cannot be used on the\n   receiving side, then FEC SHOULD NOT\
    \ be used, as it leads to an\n   inefficient usage of network resources.  Decoder\
    \ support for FEC\n   SHOULD be indicated at the time a session is set up.\n"
- title: 3.4.  Stereo Operation
  contents:
  - "3.4.  Stereo Operation\n   Opus allows for transmission of stereo audio signals.\
    \  This operation\n   is signaled in-band in the Opus bitstream and no special\
    \ arrangement\n   is needed in the payload format.  An Opus decoder is capable\
    \ of\n   handling a stereo encoding, but an application might only be capable\n\
    \   of consuming a single audio channel.\n   If a decoder cannot take advantage\
    \ of the benefits of a stereo\n   signal, this SHOULD be indicated at the time\
    \ a session is set up.  In\n   that case, the sending side SHOULD NOT send stereo\
    \ signals as it\n   leads to an inefficient usage of network resources.\n"
- title: 4.  Opus RTP Payload Format
  contents:
  - "4.  Opus RTP Payload Format\n   The payload format for Opus consists of the RTP\
    \ header and Opus\n   payload data.\n"
- title: 4.1.  RTP Header Usage
  contents:
  - "4.1.  RTP Header Usage\n   The format of the RTP header is specified in [RFC3550].\
    \  The use of\n   the fields of the RTP header by the Opus payload format is consistent\n\
    \   with that specification.\n   The payload length of Opus is an integer number\
    \ of octets; therefore,\n   no padding is necessary.  The payload MAY be padded\
    \ by an integer\n   number of octets according to [RFC3550], although the Opus\
    \ internal\n   padding is preferred.\n   The timestamp, sequence number, and marker\
    \ bit (M) of the RTP header\n   are used in accordance with Section 4.1 of [RFC3551].\n\
    \   The RTP payload type for Opus is to be assigned dynamically.\n   The receiving\
    \ side MUST be prepared to receive duplicate RTP packets.\n   The receiver MUST\
    \ provide at most one of those payloads to the Opus\n   decoder for decoding,\
    \ and it MUST discard the others.\n   Opus supports 5 different audio bandwidths,\
    \ which can be adjusted\n   during a stream.  The RTP timestamp is incremented\
    \ with a 48000 Hz\n   clock rate for all modes of Opus and all sampling rates.\
    \  The unit\n   for the timestamp is samples per single (mono) channel.  The RTP\n\
    \   timestamp corresponds to the sample time of the first encoded sample\n   in\
    \ the encoded frame.  For data encoded with sampling rates other\n   than 48000\
    \ Hz, the sampling rate has to be adjusted to 48000 Hz.\n"
- title: 4.2.  Payload Structure
  contents:
  - "4.2.  Payload Structure\n   The Opus encoder can output encoded frames representing\
    \ 2.5, 5, 10,\n   20, 40, or 60 ms of speech or audio data.  Further, an arbitrary\n\
    \   number of frames can be combined into a packet, up to a maximum\n   packet\
    \ duration representing 120 ms of speech or audio data.  The\n   grouping of one\
    \ or more Opus frames into a single Opus packet is\n   defined in Section 3 of\
    \ [RFC6716].  An RTP payload MUST contain\n   exactly one Opus packet as defined\
    \ by that document.\n   Figure 1 shows the structure combined with the RTP header.\n\
    \                        +----------+--------------+\n                       \
    \ |RTP Header| Opus Payload |\n                        +----------+--------------+\n\
    \                Figure 1: Packet Structure with RTP Header\n   Table 2 shows\
    \ supported frame sizes in milliseconds of encoded speech\n   or audio data for\
    \ the speech and audio modes (Mode) and sampling\n   rates (fs) of Opus, and it\
    \ shows how the timestamp is incremented for\n   packetization (ts incr).  If\
    \ the Opus encoder outputs multiple\n   encoded frames into a single packet, the\
    \ timestamp increment is the\n   sum of the increments for the individual frames.\n\
    \    +---------+-----------------+-----+-----+-----+-----+------+------+\n   \
    \ |   Mode  |        fs       | 2.5 |  5  |  10 |  20 |  40  |  60  |\n    +---------+-----------------+-----+-----+-----+-----+------+------+\n\
    \    | ts incr |       all       | 120 | 240 | 480 | 960 | 1920 | 2880 |\n   \
    \ |         |                 |     |     |     |     |      |      |\n    | \
    \ voice  | NB/MB/WB/SWB/FB |  x  |  x  |  o  |  o  |  o   |  o   |\n    |    \
    \     |                 |     |     |     |     |      |      |\n    |  audio\
    \  |   NB/WB/SWB/FB  |  o  |  o  |  o  |  o  |  x   |  x   |\n    +---------+-----------------+-----+-----+-----+-----+------+------+\n\
    \     Table 2: Supported Opus frame sizes and timestamp increments are\n     \
    \    marked with an o.  Unsupported ones are marked with an x.\n"
- title: 5.  Congestion Control
  contents:
  - "5.  Congestion Control\n   The target bitrate of Opus can be adjusted at any\
    \ point in time, thus\n   allowing efficient congestion control.  Furthermore,\
    \ the amount of\n   encoded speech or audio data encoded in a single packet can\
    \ be used\n   for congestion control, since the transmission rate is inversely\n\
    \   proportional to the packet duration.  A lower packet transmission\n   rate\
    \ reduces the amount of header overhead, but at the same time\n   increases latency\
    \ and loss sensitivity, so it ought to be used with\n   care.\n   Since UDP does\
    \ not provide congestion control, applications that use\n   RTP over UDP SHOULD\
    \ implement their own congestion control above the\n   UDP layer [RFC5405].  Work\
    \ in the RMCAT working group [rmcat]\n   describes the interactions and conceptual\
    \ interfaces necessary\n   between the application components that relate to congestion\
    \ control,\n   including the RTP layer, the higher-level media codec control layer,\n\
    \   and the lower-level transport interface, as well as components\n   dedicated\
    \ to congestion control functions.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   One media subtype (audio/opus) has been defined and\
    \ registered as\n   described in the following section.\n"
- title: 6.1.  Opus Media Type Registration
  contents:
  - "6.1.  Opus Media Type Registration\n   Media type registration is done according\
    \ to [RFC6838] and [RFC4855].\n   Type name: audio\n   Subtype name: opus\n  \
    \ Required parameters:\n   rate:  the RTP timestamp is incremented with a 48000\
    \ Hz clock rate\n      for all modes of Opus and all sampling rates.  For data\
    \ encoded\n      with sampling rates other than 48000 Hz, the sampling rate has\
    \ to\n      be adjusted to 48000 Hz.\n   Optional parameters:\n   maxplaybackrate:\
    \  a hint about the maximum output sampling rate that\n      the receiver is capable\
    \ of rendering in Hz.  The decoder MUST be\n      capable of decoding any audio\
    \ bandwidth, but, due to hardware\n      limitations, only signals up to the specified\
    \ sampling rate can be\n      played back.  Sending signals with higher audio\
    \ bandwidth results\n      in higher than necessary network usage and encoding\
    \ complexity, so\n      an encoder SHOULD NOT encode frequencies above the audio\
    \ bandwidth\n      specified by maxplaybackrate.  This parameter can take any\
    \ value\n      between 8000 and 48000, although commonly the value will match\
    \ one\n      of the Opus bandwidths (Table 1).  By default, the receiver is\n\
    \      assumed to have no limitations, i.e., 48000.\n   sprop-maxcapturerate:\
    \  a hint about the maximum input sampling rate\n      that the sender is likely\
    \ to produce.  This is not a guarantee\n      that the sender will never send\
    \ any higher bandwidth (e.g., it\n      could send a prerecorded prompt that uses\
    \ a higher bandwidth), but\n      it indicates to the receiver that frequencies\
    \ above this maximum\n      can safely be discarded.  This parameter is useful\
    \ to avoid\n      wasting receiver resources by operating the audio processing\n\
    \      pipeline (e.g., echo cancellation) at a higher rate than\n      necessary.\
    \  This parameter can take any value between 8000 and\n      48000, although commonly\
    \ the value will match one of the Opus\n      bandwidths (Table 1).  By default,\
    \ the sender is assumed to have\n      no limitations, i.e., 48000.\n   maxptime:\
    \  the maximum duration of media represented by a packet\n      (according to\
    \ Section 6 of [RFC4566]) that a decoder wants to\n      receive, in milliseconds\
    \ rounded up to the next full integer\n      value.  Possible values are 3, 5,\
    \ 10, 20, 40, 60, or an arbitrary\n      multiple of an Opus frame size rounded\
    \ up to the next full integer\n      value, up to a maximum value of 120, as defined\
    \ in Section 4.  If\n      no value is specified, the default is 120.\n   ptime:\
    \  the preferred duration of media represented by a packet\n      (according to\
    \ Section 6 of [RFC4566]) that a decoder wants to\n      receive, in milliseconds\
    \ rounded up to the next full integer\n      value.  Possible values are 3, 5,\
    \ 10, 20, 40, 60, or an arbitrary\n      multiple of an Opus frame size rounded\
    \ up to the next full integer\n      value, up to a maximum value of 120, as defined\
    \ in Section 4.  If\n      no value is specified, the default is 20.\n   maxaveragebitrate:\
    \  specifies the maximum average receive bitrate of\n      a session in bits per\
    \ second (bit/s).  The actual value of the\n      bitrate can vary, as it is dependent\
    \ on the characteristics of the\n      media in a packet.  Note that the maximum\
    \ average bitrate MAY be\n      modified dynamically during a session.  Any positive\
    \ integer is\n      allowed, but values outside the range 6000 to 510000 SHOULD\
    \ be\n      ignored.  If no value is specified, the maximum value specified in\n\
    \      Section 3.1.1 for the corresponding mode of Opus and corresponding\n  \
    \    maxplaybackrate is the default.\n   stereo:  specifies whether the decoder\
    \ prefers receiving stereo or\n      mono signals.  Possible values are 1 and\
    \ 0, where 1 specifies that\n      stereo signals are preferred, and 0 specifies\
    \ that only mono\n      signals are preferred.  Independent of the stereo parameter,\
    \ every\n      receiver MUST be able to receive and decode stereo signals, but\n\
    \      sending stereo signals to a receiver that signaled a preference\n     \
    \ for mono signals may result in higher than necessary network\n      utilization\
    \ and encoding complexity.  If no value is specified,\n      the default is 0\
    \ (mono).\n   sprop-stereo:  specifies whether the sender is likely to produce\n\
    \      stereo audio.  Possible values are 1 and 0, where 1 specifies that\n  \
    \    stereo signals are likely to be sent, and 0 specifies that the\n      sender\
    \ will likely only send mono.  This is not a guarantee that\n      the sender\
    \ will never send stereo audio (e.g., it could send a\n      prerecorded prompt\
    \ that uses stereo), but it indicates to the\n      receiver that the received\
    \ signal can be safely downmixed to mono.\n      This parameter is useful to avoid\
    \ wasting receiver resources by\n      operating the audio processing pipeline\
    \ (e.g., echo cancellation)\n      in stereo when not necessary.  If no value\
    \ is specified, the\n      default is 0 (mono).\n   cbr:  specifies if the decoder\
    \ prefers the use of a constant bitrate\n      versus a variable bitrate.  Possible\
    \ values are 1 and 0, where 1\n      specifies constant bitrate, and 0 specifies\
    \ variable bitrate.  If\n      no value is specified, the default is 0 (vbr).\
    \  When cbr is 1, the\n      maximum average bitrate can still change, e.g., to\
    \ adapt to\n      changing network conditions.\n   useinbandfec:  specifies that\
    \ the decoder has the capability to take\n      advantage of the Opus in-band\
    \ FEC.  Possible values are 1 and 0.\n      Providing 0 when FEC cannot be used\
    \ on the receiving side is\n      RECOMMENDED.  If no value is specified, useinbandfec\
    \ is assumed to\n      be 0.  This parameter is only a preference, and the receiver\
    \ MUST\n      be able to process packets that include FEC information, even if\n\
    \      it means the FEC part is discarded.\n   usedtx:  specifies if the decoder\
    \ prefers the use of DTX.  Possible\n      values are 1 and 0.  If no value is\
    \ specified, the default is 0.\n   Encoding considerations:\n      The Opus media\
    \ type is framed and consists of binary data\n      according to Section 4.8 of\
    \ [RFC6838].\n   Security considerations:\n      See Section 8 of this document.\n\
    \   Interoperability considerations: none\n   Published specification: RFC 7587\n\
    \   Applications that use this media type:\n      Any application that requires\
    \ the transport of speech or audio\n      data can use this media type.  Some\
    \ examples are, but not limited\n      to, audio and video conferencing, Voice\
    \ over IP, and media\n      streaming.\n   Fragment identifier considerations:\
    \ N/A\n   Person & email address to contact for further information:\n      SILK\
    \ Support, silksupport@skype.net\n      Jean-Marc Valin, jmvalin@jmvalin.ca\n\
    \   Intended usage: COMMON\n   Restrictions on usage:\n      For transfer over\
    \ RTP, the RTP payload format (Section 4 of this\n      document) SHALL be used.\n\
    \   Authors:\n      Julian Spittka, jspittka@gmail.com\n      Koen Vos, koenvos74@gmail.com\n\
    \      Jean-Marc Valin, jmvalin@jmvalin.ca\n   Change controller: IETF Payload\
    \ working group delegated from the IESG\n"
- title: 7.  SDP Considerations
  contents:
  - "7.  SDP Considerations\n   The information described in the media type specification\
    \ has a\n   specific mapping to fields in the Session Description Protocol (SDP)\n\
    \   [RFC4566], which is commonly used to describe RTP sessions.  When SDP\n  \
    \ is used to specify sessions employing Opus, the mapping is as\n   follows:\n\
    \   o  The media type (\"audio\") goes in SDP \"m=\" as the media name.\n   o\
    \  The media subtype (\"opus\") goes in SDP \"a=rtpmap\" as the encoding\n   \
    \   name.  The RTP clock rate in \"a=rtpmap\" MUST be 48000, and the\n      number\
    \ of channels MUST be 2.\n   o  The OPTIONAL media type parameters \"ptime\" and\
    \ \"maxptime\" are\n      mapped to \"a=ptime\" and \"a=maxptime\" attributes,\
    \ respectively, in\n      the SDP.\n   o  The OPTIONAL media type parameters \"\
    maxaveragebitrate\",\n      \"maxplaybackrate\", \"stereo\", \"cbr\", \"useinbandfec\"\
    , and \"usedtx\",\n      when present, MUST be included in the \"a=fmtp\" attribute\
    \ in the\n      SDP, expressed as a media type string in the form of a semicolon-\n\
    \      separated list of parameter=value pairs (e.g.,\n      maxplaybackrate=48000).\
    \  They MUST NOT be specified in an SSRC-\n      specific \"fmtp\" source-level\
    \ attribute (as defined in Section 6.3\n      of [RFC5576]).\n   o  The OPTIONAL\
    \ media type parameters \"sprop-maxcapturerate\" and\n      \"sprop-stereo\" MAY\
    \ be mapped to the \"a=fmtp\" SDP attribute by\n      copying them directly from\
    \ the media type parameter string as part\n      of the semicolon-separated list\
    \ of parameter=value pairs (e.g.,\n      sprop-stereo=1).  These same OPTIONAL\
    \ media type parameters MAY\n      also be specified using an SSRC-specific \"\
    fmtp\" source-level\n      attribute as described in Section 6.3 of [RFC5576].\
    \  They MAY be\n      specified in both places, in which case the parameter in\
    \ the\n      source-level attribute overrides the one found on the \"a=fmtp\"\n\
    \      line.  The value of any parameter that is not specified in a\n      source-level\
    \ source attribute MUST be taken from the \"a=fmtp\"\n      line, if it is present\
    \ there.\n   Below are some examples of SDP session descriptions for Opus:\n \
    \  Example 1: Standard mono session with 48000 Hz clock rate\n       m=audio 54312\
    \ RTP/AVP 101\n       a=rtpmap:101 opus/48000/2\n   Example 2: 16000 Hz clock\
    \ rate, maximum packet size of 40 ms,\n   recommended packet size of 40 ms, maximum\
    \ average bitrate of 20000\n   bit/s, prefers to receive stereo but only plans\
    \ to send mono, FEC is\n   desired, DTX is not desired\n       m=audio 54312 RTP/AVP\
    \ 101\n       a=rtpmap:101 opus/48000/2\n       a=fmtp:101 maxplaybackrate=16000;\
    \ sprop-maxcapturerate=16000;\n       maxaveragebitrate=20000; stereo=1; useinbandfec=1;\
    \ usedtx=0\n       a=ptime:40\n       a=maxptime:40\n   Example 3: Two-way full-band\
    \ stereo preferred\n       m=audio 54312 RTP/AVP 101\n       a=rtpmap:101 opus/48000/2\n\
    \       a=fmtp:101 stereo=1; sprop-stereo=1\n"
- title: 7.1.  SDP Offer/Answer Considerations
  contents:
  - "7.1.  SDP Offer/Answer Considerations\n   When using the offer/answer procedure\
    \ described in [RFC3264] to\n   negotiate the use of Opus, the following considerations\
    \ apply:\n   o  Opus supports several clock rates.  For signaling purposes, only\n\
    \      the highest, i.e., 48000, is used.  The actual clock rate of the\n    \
    \  corresponding media is signaled inside the payload and is not\n      restricted\
    \ by this payload format description.  The decoder MUST\n      be capable of decoding\
    \ every received clock rate.  An example is\n      shown below:\n       m=audio\
    \ 54312 RTP/AVP 100\n       a=rtpmap:100 opus/48000/2\n   o  The \"ptime\" and\
    \ \"maxptime\" parameters are unidirectional receive-\n      only parameters and\
    \ typically will not compromise\n      interoperability; however, some values\
    \ might cause application\n      performance to suffer.  [RFC3264] defines the\
    \ SDP offer/answer\n      handling of the \"ptime\" parameter.  The \"maxptime\"\
    \ parameter MUST\n      be handled in the same way.\n   o  The \"maxplaybackrate\"\
    \ parameter is a unidirectional receive-only\n      parameter that reflects limitations\
    \ of the local receiver.  When\n      sending to a single destination, a sender\
    \ MUST NOT use an audio\n      bandwidth higher than necessary to make full use\
    \ of audio sampled\n      at a sampling rate of \"maxplaybackrate\".  Gateways\
    \ or senders that\n      are sending the same encoded audio to multiple destinations\
    \ SHOULD\n      NOT use an audio bandwidth higher than necessary to represent\n\
    \      audio sampled at \"maxplaybackrate\", as this would lead to\n      inefficient\
    \ use of network resources.  The \"maxplaybackrate\"\n      parameter does not\
    \ affect interoperability.  Also, this parameter\n      SHOULD NOT be used to\
    \ adjust the audio bandwidth as a function of\n      the bitrate, as this is the\
    \ responsibility of the Opus encoder\n      implementation.\n   o  The \"maxaveragebitrate\"\
    \ parameter is a unidirectional receive-only\n      parameter that reflects limitations\
    \ of the local receiver.  The\n      sender of the other side MUST NOT send with\
    \ an average bitrate\n      higher than \"maxaveragebitrate\" as it might overload\
    \ the network\n      and/or receiver.  The \"maxaveragebitrate\" parameter typically\
    \ will\n      not compromise interoperability; however, some values might cause\n\
    \      application performance to suffer and ought to be set with care.\n   o\
    \  The \"sprop-maxcapturerate\" and \"sprop-stereo\" parameters are\n      unidirectional\
    \ sender-only parameters that reflect limitations of\n      the sender side. \
    \ They allow the receiver to set up a reduced-\n      complexity audio processing\
    \ pipeline if the sender is not planning\n      to use the full range of Opus's\
    \ capabilities.  Neither \"sprop-\n      maxcapturerate\" nor \"sprop-stereo\"\
    \ affect interoperability, and\n      the receiver MUST be capable of receiving\
    \ any signal.\n   o  The \"stereo\" parameter is a unidirectional receive-only\
    \ parameter.\n      When sending to a single destination, a sender MUST NOT use\
    \ stereo\n      when \"stereo\" is 0.  Gateways or senders that are sending the\
    \ same\n      encoded audio to multiple destinations SHOULD NOT use stereo when\n\
    \      \"stereo\" is 0, as this would lead to inefficient use of network\n   \
    \   resources.  The \"stereo\" parameter does not affect\n      interoperability.\n\
    \   o  The \"cbr\" parameter is a unidirectional receive-only parameter.\n   o\
    \  The \"useinbandfec\" parameter is a unidirectional receive-only\n      parameter.\n\
    \   o  The \"usedtx\" parameter is a unidirectional receive-only parameter.\n\
    \   o  Any unknown parameter in an offer MUST be ignored by the receiver\n   \
    \   and MUST be removed from the answer.\n   The Opus parameters in an SDP offer/answer\
    \ exchange are completely\n   orthogonal, and there is no relationship between\
    \ the SDP offer and\n   the answer.\n"
- title: 7.2.  Declarative SDP Considerations for Opus
  contents:
  - "7.2.  Declarative SDP Considerations for Opus\n   For declarative use of SDP\
    \ such as in the Session Announcement\n   Protocol (SAP) [RFC2974] and the Real\
    \ Time Streaming Protocol (RTSP)\n   [RFC2326] for Opus, the following needs to\
    \ be considered:\n   o  The values for \"maxptime\", \"ptime\", \"maxplaybackrate\"\
    , and\n      \"maxaveragebitrate\" ought to be selected carefully to ensure that\n\
    \      a reasonable performance can be achieved for the participants of a\n  \
    \    session.\n   o  The values for \"maxptime\", \"ptime\", and of the payload\
    \ format\n      configuration are recommendations by the decoding side to ensure\n\
    \      the best performance for the decoder.\n   o  All other parameters of the\
    \ payload format configuration are\n      declarative and a participant MUST use\
    \ the configurations that are\n      provided for the session.  More than one\
    \ configuration can be\n      provided if necessary by declaring multiple RTP\
    \ payload types;\n      however, the number of types ought to be kept small.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Use of VBR is subject to the security considerations\
    \ in [RFC6562].\n   RTP packets using the payload format defined in this specification\n\
    \   are subject to the security considerations discussed in the RTP\n   specification\
    \ [RFC3550] and in any applicable RTP profile such as\n   RTP/AVP [RFC3551], RTP/AVPF\
    \ [RFC4585], RTP/SAVP [RFC3711], or RTP/\n   SAVPF [RFC5124].  However, as \"\
    Securing the RTP Framework: Why RTP\n   Does Not Mandate a Single Media Security\
    \ Solution\" [RFC7202]\n   discusses, it is not an RTP payload format's responsibility\
    \ to\n   discuss or mandate what solutions are used to meet the basic security\n\
    \   goals like confidentiality, integrity, and source authenticity for\n   RTP\
    \ in general.  This responsibility lies on anyone using RTP in an\n   application.\
    \  They can find guidance on available security mechanisms\n   and important considerations\
    \ in \"Options for Securing RTP Sessions\"\n   [RFC7201].  Applications SHOULD\
    \ use one or more appropriate strong\n   security mechanisms.\n   This payload\
    \ format and the Opus encoding do not exhibit any\n   significant non-uniformity\
    \ in the receiver-end computational load and\n   thus are unlikely to pose a denial-of-service\
    \ threat due to the\n   receipt of pathological datagrams.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2326]  Schulzrinne, H., Rao, A., and R. Lanphier, \"Real Time\n      \
    \        Streaming Protocol (RTSP)\", RFC 2326,\n              DOI 10.17487/RFC2326,\
    \ April 1998,\n              <http://www.rfc-editor.org/info/rfc2326>.\n   [RFC3264]\
    \  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n              with\
    \ Session Description Protocol (SDP)\", RFC 3264,\n              DOI 10.17487/RFC3264,\
    \ June 2002,\n              <http://www.rfc-editor.org/info/rfc3264>.\n   [RFC3389]\
    \  Zopf, R., \"Real-time Transport Protocol (RTP) Payload for\n              Comfort\
    \ Noise (CN)\", RFC 3389, DOI 10.17487/RFC3389,\n              September 2002,\
    \ <http://www.rfc-editor.org/info/rfc3389>.\n   [RFC3550]  Schulzrinne, H., Casner,\
    \ S., Frederick, R., and V.\n              Jacobson, \"RTP: A Transport Protocol\
    \ for Real-Time\n              Applications\", STD 64, RFC 3550, DOI 10.17487/RFC3550,\n\
    \              July 2003, <http://www.rfc-editor.org/info/rfc3550>.\n   [RFC3551]\
    \  Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and\n              Video\
    \ Conferences with Minimal Control\", STD 65, RFC 3551,\n              DOI 10.17487/RFC3551,\
    \ July 2003,\n              <http://www.rfc-editor.org/info/rfc3551>.\n   [RFC3711]\
    \  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n              Norrman,\
    \ \"The Secure Real-time Transport Protocol (SRTP)\",\n              RFC 3711,\
    \ DOI 10.17487/RFC3711, March 2004,\n              <http://www.rfc-editor.org/info/rfc3711>.\n\
    \   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n   \
    \           Description Protocol\", RFC 4566, DOI 10.17487/RFC4566,\n        \
    \      July 2006, <http://www.rfc-editor.org/info/rfc4566>.\n   [RFC4855]  Casner,\
    \ S., \"Media Type Registration of RTP Payload\n              Formats\", RFC 4855,\
    \ DOI 10.17487/RFC4855, February 2007,\n              <http://www.rfc-editor.org/info/rfc4855>.\n\
    \   [RFC5576]  Lennox, J., Ott, J., and T. Schierl, \"Source-Specific\n      \
    \        Media Attributes in the Session Description Protocol\n              (SDP)\"\
    , RFC 5576, DOI 10.17487/RFC5576, June 2009,\n              <http://www.rfc-editor.org/info/rfc5576>.\n\
    \   [RFC6562]  Perkins, C. and JM. Valin, \"Guidelines for the Use of\n      \
    \        Variable Bit Rate Audio with Secure RTP\", RFC 6562,\n              DOI\
    \ 10.17487/RFC6562, March 2012,\n              <http://www.rfc-editor.org/info/rfc6562>.\n\
    \   [RFC6716]  Valin, JM., Vos, K., and T. Terriberry, \"Definition of the\n \
    \             Opus Audio Codec\", RFC 6716, DOI 10.17487/RFC6716,\n          \
    \    September 2012, <http://www.rfc-editor.org/info/rfc6716>.\n   [RFC6838] \
    \ Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications\
    \ and Registration Procedures\", BCP 13,\n              RFC 6838, DOI 10.17487/RFC6838,\
    \ January 2013,\n              <http://www.rfc-editor.org/info/rfc6838>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC2974]  Handley, M., Perkins, C., and E.\
    \ Whelan, \"Session\n              Announcement Protocol\", RFC 2974, DOI 10.17487/RFC2974,\n\
    \              October 2000, <http://www.rfc-editor.org/info/rfc2974>.\n   [RFC4585]\
    \  Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n              \"\
    Extended RTP Profile for Real-time Transport Control\n              Protocol (RTCP)-Based\
    \ Feedback (RTP/AVPF)\", RFC 4585,\n              DOI 10.17487/RFC4585, July 2006,\n\
    \              <http://www.rfc-editor.org/info/rfc4585>.\n   [RFC5124]  Ott, J.\
    \ and E. Carrara, \"Extended Secure RTP Profile for\n              Real-time Transport\
    \ Control Protocol (RTCP)-Based Feedback\n              (RTP/SAVPF)\", RFC 5124,\
    \ DOI 10.17487/RFC5124, February\n              2008, <http://www.rfc-editor.org/info/rfc5124>.\n\
    \   [RFC5405]  Eggert, L. and G. Fairhurst, \"Unicast UDP Usage Guidelines\n \
    \             for Application Designers\", BCP 145, RFC 5405,\n              DOI\
    \ 10.17487/RFC5405, November 2008,\n              <http://www.rfc-editor.org/info/rfc5405>.\n\
    \   [RFC7201]  Westerlund, M. and C. Perkins, \"Options for Securing RTP\n   \
    \           Sessions\", RFC 7201, DOI 10.17487/RFC7201, April 2014,\n        \
    \      <http://www.rfc-editor.org/info/rfc7201>.\n   [RFC7202]  Perkins, C. and\
    \ M. Westerlund, \"Securing the RTP\n              Framework: Why RTP Does Not\
    \ Mandate a Single Media\n              Security Solution\", RFC 7202, DOI 10.17487/RFC7202,\
    \ April\n              2014, <http://www.rfc-editor.org/info/rfc7202>.\n   [rmcat]\
    \    \"RTP Media Congestion Avoidance Techniques (rmcat)\n              Documents\"\
    , <https://datatracker.ietf.org/wg/rmcat/\n              documents/>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Many people have made useful comments and suggestions contributing\
    \ to\n   this document.  In particular, we would like to thank Tina le Grand,\n\
    \   Cullen Jennings, Jonathan Lennox, Gregory Maxwell, Colin Perkins, Jan\n  \
    \ Skoglund, Timothy B. Terriberry, Martin Thompson, Justin Uberti,\n   Magnus\
    \ Westerlund, and Mo Zanaty.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Julian Spittka\n   Email: jspittka@gmail.com\n   Koen\
    \ Vos\n   vocTone\n   Email: koenvos74@gmail.com\n   Jean-Marc Valin\n   Mozilla\n\
    \   331 E. Evelyn Avenue\n   Mountain View, CA  94041\n   United States\n   Email:\
    \ jmvalin@jmvalin.ca\n"
