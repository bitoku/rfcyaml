- title: __initial_text__
  contents:
  - '                  User-based Security Model for SNMPv2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   4.1 The USEC Basic Group .......................................\
    \   32\n   4.2 Conformance Information ....................................  \
    \ 35\n   4.2.1 Compliance Statements ....................................   35\n\
    \   4.2.2 Units of Conformance .....................................   35\n  \
    \ 6. Security Considerations .....................................   36\n   6.1\
    \ Recommended Practices ......................................   36\n   6.2 Defining\
    \ Users .............................................   37\n   6.3 Conformance\
    \ ................................................   38\n   7. Editor's Address\
    \ ............................................   38\n   8. Acknowledgements ............................................\
    \   39\n   9. References ..................................................  \
    \ 39\n   Appendix A Installation ........................................   41\n\
    \   Appendix A.1 Agent Installation Parameters .....................   41\n  \
    \ Appendix A.2 Password to Key Algorithm .........................   43\n   Appendix\
    \ A.3 Password to Key Sample ............................   44\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A management system contains:  several (potentially many)\
    \ nodes, each\n   with a processing entity, termed an agent, which has access\
    \ to\n   management instrumentation; at least one management station; and, a\n\
    \   management protocol, used to convey management information between\n   the\
    \ agents and management stations.  Operations of the protocol are\n   carried\
    \ out under an administrative framework which defines\n   authentication, authorization,\
    \ access control, and privacy policies.\n   Management stations execute management\
    \ applications which monitor and\n   control managed elements.  Managed elements\
    \ are devices such as\n   hosts, routers, terminal servers, etc., which are monitored\
    \ and\n   controlled via access to their management information.\n   The Administrative\
    \ Infrastructure for SNMPv2 document [1] defines an\n   administrative framework\
    \ which realizes effective management in a\n   variety of configurations and environments.\n\
    \   In this administrative framework, a security model defines the\n   mechanisms\
    \ used to achieve an administratively-defined level of\n   security for protocol\
    \ interactions.  Although many such security\n   models might be defined, it is\
    \ the purpose of this document, User-\n   based Security Model for SNMPv2, to\
    \ define the first, and, as of this\n   writing, only, security model for this\
    \ administrative framework.\n   This administrative framework includes the provision\
    \ of an access\n   control model.  The enforcement of access rights requires the\
    \ means\n   to identify the entity on whose behalf a request is generated.  This\n\
    \   SNMPv2 security model identifies an entity on whose behalf an SNMPv2\n   message\
    \ is generated as a \"user\".\n"
- title: 1.1.  Threats
  contents:
  - "1.1.  Threats\n   Several of the classical threats to network protocols are applicable\n\
    \   to the network management problem and therefore would be applicable\n   to\
    \ any SNMPv2 security model.  Other threats are not applicable to\n   the network\
    \ management problem.  This section discusses principal\n   threats, secondary\
    \ threats, and threats which are of lesser\n   importance.\n   The principal threats\
    \ against which this SNMPv2 security model should\n   provide protection are:\n"
- title: Modification of Information
  contents:
  - "Modification of Information\n     The modification threat is the danger that\
    \ some unauthorized entity\n     may alter in-transit SNMPv2 messages generated\
    \ on behalf of an\n     authorized user in such a way as to effect unauthorized\
    \ management\n     operations, including falsifying the value of an object.\n"
- title: Masquerade
  contents:
  - "Masquerade\n     The masquerade threat is the danger that management operations\
    \ not\n     authorized for some user may be attempted by assuming the identity\n\
    \     of another user that has the appropriate authorizations.\n   Two secondary\
    \ threats are also identified.  The security protocols\n   defined in this memo\
    \ do provide protection against:\n"
- title: Message Stream Modification
  contents:
  - "Message Stream Modification\n     The SNMPv2 protocol is typically based upon\
    \ a connectionless\n     transport service which may operate over any subnetwork\
    \ service.\n     The re-ordering, delay or replay of messages can and does occur\n\
    \     through the natural operation of many such subnetwork services.\n     The\
    \ message stream modification threat is the danger that messages\n     may be\
    \ maliciously re-ordered, delayed or replayed to an extent\n     which is greater\
    \ than can occur through the natural operation of a\n     subnetwork service,\
    \ in order to effect unauthorized management\n     operations.\n"
- title: Disclosure
  contents:
  - "Disclosure\n     The disclosure threat is the danger of eavesdropping on the\n\
    \     exchanges between managed agents and a management station.\n     Protecting\
    \ against this threat may be required as a matter of local\n     policy.\n   There\
    \ are at least two threats that an SNMPv2 security protocol need\n   not protect\
    \ against.  The security protocols defined in this memo do\n   not provide protection\
    \ against:\n"
- title: Denial of Service
  contents:
  - "Denial of Service\n     An SNMPv2 security protocol need not attempt to address\
    \ the broad\n     range of attacks by which service on behalf of authorized users\
    \ is\n     denied.  Indeed, such denial-of-service attacks are in many cases\n\
    \     indistinguishable from the type of network failures with which any\n   \
    \  viable network management protocol must cope as a matter of course.\n"
- title: Traffic Analysis
  contents:
  - "Traffic Analysis\n     In addition, an SNMPv2 security protocol need not attempt\
    \ to\n     address traffic analysis attacks.  Indeed, many traffic patterns\n\
    \     are predictable - agents may be managed on a regular basis by a\n     relatively\
    \ small number of management stations - and therefore\n     there is no significant\
    \ advantage afforded by protecting against\n     traffic analysis.\n"
- title: 1.2.  Goals and Constraints
  contents:
  - "1.2.  Goals and Constraints\n   Based on the foregoing account of threats in\
    \ the SNMP network\n   management environment, the goals of this SNMPv2 security\
    \ model are\n   as follows.\n"
- title: (1)  The protocol should provide for verification that each received
  contents:
  - "(1)  The protocol should provide for verification that each received\n     SNMPv2\
    \ message has not been modified during its transmission\n     through the network\
    \ in such a way that an unauthorized management\n     operation might result.\n"
- title: (2)  The protocol should provide for verification of the identity of the
  contents:
  - "(2)  The protocol should provide for verification of the identity of the\n  \
    \   user on whose behalf a received SNMPv2 message claims to have been\n     generated.\n"
- title: (3)  The protocol should provide for detection of received SNMPv2
  contents:
  - "(3)  The protocol should provide for detection of received SNMPv2\n     messages,\
    \ which request or contain management information, whose\n     time of generation\
    \ was not recent.\n"
- title: (4)  The protocol should provide, when necessary, that the contents of
  contents:
  - "(4)  The protocol should provide, when necessary, that the contents of\n    \
    \ each received SNMPv2 message are protected from disclosure.\n   In addition\
    \ to the principal goal of supporting secure network\n   management, the design\
    \ of this SNMPv2 security model is also\n   influenced by the following constraints:\n"
- title: (1)  When the requirements of effective management in times of network
  contents:
  - "(1)  When the requirements of effective management in times of network\n    \
    \ stress are inconsistent with those of security, the design should\n     prefer\
    \ the former.\n"
- title: (2)  Neither the security protocol nor its underlying security
  contents:
  - "(2)  Neither the security protocol nor its underlying security\n     mechanisms\
    \ should depend upon the ready availability of other\n     network services (e.g.,\
    \ Network Time Protocol (NTP) or key\n     management protocols).\n"
- title: (3)  A security mechanism should entail no changes to the basic SNMP
  contents:
  - "(3)  A security mechanism should entail no changes to the basic SNMP\n     network\
    \ management philosophy.\n"
- title: 1.3.  Security Services
  contents:
  - "1.3.  Security Services\n   The security services necessary to support the goals\
    \ of an SNMPv2\n   security model are as follows.\n"
- title: Data Integrity
  contents:
  - "Data Integrity\n     is the provision of the property that data has not been\
    \ altered or\n     destroyed in an unauthorized manner, nor have data sequences\
    \ been\n     altered to an extent greater than can occur non-maliciously.\n"
- title: Data Origin Authentication
  contents:
  - "Data Origin Authentication\n     is the provision of the property that the claimed\
    \ identity of the\n     user on whose behalf received data was originated is corroborated.\n"
- title: Data Confidentiality
  contents:
  - "Data Confidentiality\n     is the provision of the property that information\
    \ is not made\n     available or disclosed to unauthorized individuals, entities,\
    \ or\n     processes.\n   For the protocols specified in this memo, it is not\
    \ possible to\n   assure the specific originator of a received SNMPv2 message;\
    \ rather,\n   it is the user on whose behalf the message was originated that is\n\
    \   authenticated.\n   For these protocols, it not possible to obtain data integrity\
    \ without\n   data origin authentication, nor is it possible to obtain data origin\n\
    \   authentication without data integrity.  Further, there is no\n   provision\
    \ for data confidentiality without both data integrity and\n   data origin authentication.\n\
    \   The security protocols used in this memo are considered acceptably\n   secure\
    \ at the time of writing.  However, the procedures allow for new\n   authentication\
    \ and privacy methods to be specified at a future time\n   if the need arises.\n"
- title: 1.4.  Mechanisms
  contents:
  - "1.4.  Mechanisms\n   The security protocols defined in this memo employ several\
    \ types of\n   mechanisms in order to realize the goals and security services\n\
    \   described above:\n  -  In support of data integrity, a message digest algorithm\
    \ is\n     required.  A digest is calculated over an appropriate portion of an\n\
    \     SNMPv2 message and included as part of the message sent to the\n     recipient.\n\
    \  -  In support of data origin authentication and data integrity, a\n     secret\
    \ value is both inserted into, and appended to, the SNMPv2\n     message prior\
    \ to computing the digest; the inserted value\n     overwritten prior to transmission,\
    \ and the appended value is not\n     transmitted.  The secret value is shared\
    \ by all SNMPv2 entities\n     authorized to originate messages on behalf of the\
    \ appropriate user.\n  -  To protect against the threat of message delay or replay\
    \ (to an\n     extent greater than can occur through normal operation), a set\
    \ of\n     time (at the agent) indicators and a request-id are included in\n \
    \    each message generated.  An SNMPv2 agent evaluates the time\n     indicators\
    \ to determine if a received message is recent.  An SNMPv2\n     manager evaluates\
    \ the time indicators to ensure that a received\n     message is at least as recent\
    \ as the last message it received from\n     the same source.  An SNMPv2 manager\
    \ uses received authentic\n     messages to advance its notion of time (at the\
    \ agent).  An  SNMPv2\n     manager also evaluates the request-id in received\
    \ Response messages\n     and discards messages which do not correspond to outstanding\n\
    \     requests.\n     These mechanisms provide for the detection of messages whose\
    \ time\n     of generation was not recent in all but one circumstance; this\n\
    \     circumstance is the delay or replay of a Report  message (sent to a\n  \
    \   manager) when the manager has has not recently communicated with\n     the\
    \ source of the Report message.  In this circumstance, the\n     detection guarantees\
    \ only that the Report message is more recent\n     than the last communication\
    \ between source and destination of the\n     Report message.  However, Report\
    \ messages do not request or contain\n     management information, and thus, goal\
    \ #3 in Section 1.2 above is\n     met; further, Report messages can at most cause\
    \ the manager to\n     advance its notion of time (at the agent) by less than\
    \ the proper\n     amount.\n     This protection against the threat of message\
    \ delay or replay does\n     not imply nor provide any protection against unauthorized\
    \ deletion\n     or suppression of messages.  Other mechanisms defined independently\n\
    \     of the security protocol can also be used to detect the re-\n     ordering,\
    \ replay, deletion, or suppression of messages containing\n     set operations\
    \ (e.g., the MIB variable snmpSetSerialNo [15]).\n  -  In support of data confidentiality,\
    \ an encryption algorithm is\n     required.  An appropriate portion of the message\
    \ is encrypted prior\n     to being transmitted.\n"
- title: 1.4.1.  Digest Authentication Protocol
  contents:
  - "1.4.1.  Digest Authentication Protocol\n   The Digest Authentication Protocol\
    \ defined in this memo provides for:\n  -  verifying the integrity of a received\
    \ message (i.e., the message\n     received is the message sent).\n     The integrity\
    \ of the message is protected by computing a digest\n     over an appropriate\
    \ portion of a message.  The digest is computed\n     by the originator of the\
    \ message, transmitted with the message, and\n     verified by the recipient of\
    \ the message.\n  -  verifying the user on whose behalf the message was generated.\n\
    \     A secret value known only to SNMPv2 entities authorized to generate\n  \
    \   messages on behalf of this user is both inserted into, and appended\n    \
    \ to, the message prior to the digest computation.  Thus, the\n     verification\
    \ of the user is implicit with the verification of the\n     digest.  (Note that\
    \ the use of two copies of the secret, one near\n     the start and one at the\
    \ end, is recommended by [14].)\n  -  verifying that a message sent to/from one\
    \ SNMPv2 entity cannot be\n     replayed to/as-if-from another SNMPv2 entity.\n\
    \     Included in each message is an identifier unique to the SNMPv2\n     agent\
    \ associated with the sender or intended recipient of the\n     message.  Also,\
    \ each message containing a Response PDU contains a\n     request-id which associates\
    \ the message to a recently generated\n     request.\n     A Report message sent\
    \ by one SNMPv2 agent to one SNMPv2 manager can\n     potentially be replayed\
    \ to another SNMPv2 manager.  However, Report\n     messages do not request or\
    \ contain management information, and\n     thus, goal #3 in Section 1.2 above\
    \ is met; further, Report messages\n     can at most cause the manager to advance\
    \ its notion of time (at the\n     agent) by less than the correct amount.\n \
    \ -  detecting messages which were not recently generated.\n     A set of time\
    \ indicators are included in the message, indicating\n     the time of generation.\
    \  Messages (other than those containing\n     Report PDUs) without recent time\
    \ indicators are not considered\n     authentic.  In addition, messages containing\
    \ Response PDUs have a\n     request-id; if the request-id does not match that\
    \ of a recently\n     generated request, then the message is not considered to\
    \ be\n     authentic.\n     A Report message sent by an SNMPv2 agent can potentially\
    \ be\n     replayed at a later time to an SNMPv2 manager which has not\n     recently\
    \ communicated with that agent.  However, Report messages do\n     not request\
    \ or contain management information, and thus, goal #3 in\n     Section 1.2 above\
    \ is met; further, Report messages can at most\n     cause the manager to advance\
    \ its notion of time (at the agent) by\n     less than the correct amount.\n \
    \  This protocol uses the MD5 [3] message digest algorithm.  A 128-bit\n   digest\
    \ is calculated over the designated portion of an SNMPv2 message\n   and included\
    \ as part of the message sent to the recipient.  The size\n   of both the digest\
    \ carried in a message and the private\n   authentication key is 16 octets.\n\
    \   This memo allows the same user to be defined on multiple SNMPv2\n   agents\
    \ and managers.  Each SNMPv2 agent maintains a value, agentID,\n   which uniquely\
    \ identifies the agent. This value is included in each\n   message sent to/from\
    \ that agent.  Messages sent from a SNMPv2 dual-\n   role entity [1] to a SNMPv2\
    \ manager include the agentID value\n   maintained by the dual-role entity's agent.\
    \  On receipt of a message,\n   an agent checks the value to ensure it is the\
    \ intended recipient, and\n   a manager uses the value to ensure that the message\
    \ is processed\n   using the correct state information.\n   Each SNMPv2 agent\
    \ maintains two values, agentBoots and agentTime,\n   which taken together provide\
    \ an indication of time at that agent.\n   Both of these values are included in\
    \ an authenticated message sent\n   to/received from that agent.  Authenticated\
    \ messages sent from a\n   SNMPv2 dual-role entity to a SNMPv2 manager include\
    \ the agentBoots\n   and agentTime values maintained by the dual-role entity's\
    \ agent.  On\n   receipt, the values are checked to ensure that the indicated\
    \ time is\n   within a time window of the current time.  The time window represents\n\
    \   an administrative upper bound on acceptable delivery delay for\n   protocol\
    \ messages.\n   For an SNMPv2 manager to generate a message which an agent will\n\
    \   accept as authentic, and to verify that a message received from that\n   agent\
    \ is authentic, that manager must first achieve time\n   synchronization with\
    \ that agent.  Similarly, for a manger to verify\n   that a message received from\
    \ an SNMPv2 dual-role entity is authentic,\n   that manager must first achieve\
    \ time synchronization with the dual-\n   role entity's agent.\n"
- title: 1.4.2.  Symmetric Encryption Protocol
  contents:
  - "1.4.2.  Symmetric Encryption Protocol\n   The Symmetric Encryption Protocol defined\
    \ in this memo provides\n   support for data confidentiality through the use of\
    \ the Data\n   Encryption Standard (DES) in the Cipher Block Chaining mode of\n\
    \   operation.  The designated portion of an SNMPv2 message is encrypted\n   and\
    \ included as part of the message sent to the recipient.\n   Two organizations\
    \ have published specifications defining the DES: the\n   National Institute of\
    \ Standards and Technology (NIST) [5] and the\n   American National Standards\
    \ Institute [6].  There is a companion\n   Modes of Operation specification for\
    \ each definition (see [7] and\n   [8], respectively).\n   The NIST has published\
    \ three additional documents that implementors\n   may find useful.\n  -  There\
    \ is a document with guidelines for implementing and using the\n     DES, including\
    \ functional specifications for the DES and its modes\n     of operation [9].\n\
    \  -  There is a specification of a validation test suite for the DES\n     [10].\
    \  The suite is designed to test all aspects of the DES and is\n     useful for\
    \ pinpointing specific problems.\n  -  There is a specification of a maintenance\
    \ test for the DES [11].\n     The test utilizes a minimal amount of data and\
    \ processing to test\n     all components of the DES.  It provides a simple yes-or-no\n\
    \     indication of correct operation and is useful to run as part of an\n   \
    \  initialization step, e.g., when a computer reboots.\n   This Symmetric Encryption\
    \ Protocol specifies that the size of the\n   privacy key is 16 octets, of which\
    \ the first 8 octets are a DES key\n   and the second 8 octets are a DES Initialization\
    \ Vector.  The 64-bit\n   DES key in the first 8 octets of the private key is\
    \ a 56 bit quantity\n   used directly by the algorithm plus 8 parity bits - arranged\
    \ so that\n   one parity bit is the least significant bit of each octet.  The\n\
    \   setting of the parity bits is ignored by this protocol.\n   The length of\
    \ an octet sequence to be encrypted by the DES must be an\n   integral multiple\
    \ of 8.  When encrypting, the data is padded at the\n   end as necessary; the\
    \ actual pad value is irrelevant.\n   If the length of the octet sequence to be\
    \ decrypted is not an\n   integral multiple of 8 octets, the processing of the\
    \ octet sequence\n   is halted and an appropriate exception noted.  When decrypting,\
    \ the\n   padding is ignored.\n"
- title: 2.  Elements of the Model
  contents:
  - "2.  Elements of the Model\n   This section contains definitions required to realize\
    \ the security\n   model defined by this memo.\n"
- title: 2.1.  SNMPv2 Users
  contents:
  - "2.1.  SNMPv2 Users\n   Management operations using this security model make use\
    \ of a defined\n   set of user identities.  For any SNMPv2 user on whose behalf\n\
    \   management operations are authorized at a particular SNMPv2 agent,\n   that\
    \ agent must have knowledge of that user.  A SNMPv2 manager that\n   wishes to\
    \ communicate with a particular agent must also have\n   knowledge of a user known\
    \ to that agent, including knowledge of the\n   applicable attributes of that\
    \ user.  Similarly, a SNMPv2 manager that\n   wishes to receive messages from\
    \ a SNMPv2 dual-role entity must have\n   knowledge of the user on whose behalf\
    \ the dual-role entity sends the\n   message.\n   A user and its attributes are\
    \ defined as follows:\n"
- title: <userName>
  contents:
  - "<userName>\n     An octet string representing the name of the user.\n"
- title: <authProtocol>
  contents:
  - "<authProtocol>\n     An indication of whether messages sent on behalf of this\
    \ user can\n     be authenticated, and if so, the type of authentication protocol\n\
    \     which is used.  One such protocol is defined in this memo: the\n     Digest\
    \ Authentication Protocol.\n"
- title: <authPrivateKey>
  contents:
  - "<authPrivateKey>\n     If messages sent on behalf of this user can be authenticated,\
    \ the\n     (private) authentication key for use with the authentication\n   \
    \  protocol.  Note that a user's authentication key will normally be\n     different\
    \ at different agents.\n"
- title: <privProtocol>
  contents:
  - "<privProtocol>\n     An indication of whether messages sent on behalf of this\
    \ user can\n     be protected from disclosure, and if so, the type of privacy\n\
    \     protocol which is used.  One such protocol is defined in this memo:\n  \
    \   the Symmetric Encryption Protocol.\n"
- title: <privPrivateKey>
  contents:
  - "<privPrivateKey>\n     If messages sent on behalf of this user can be protected\
    \ from\n     disclosure, the (private) privacy key for use with the privacy\n\
    \     protocol.  Note that a user's privacy key will normally be\n     different\
    \ at different agents.\n"
- title: 2.2.  Contexts and Context Selectors
  contents:
  - "2.2.  Contexts and Context Selectors\n   An SNMPv2 context is a collection of\
    \ management information\n   accessible (locally or via proxy) by an SNMPv2 agent.\
    \  An item of\n   management information may exist in more than one context. \
    \ An SNMPv2\n   agent potentially has access to many contexts.  Each SNMPv2 message\n\
    \   contains a context selector which unambiguously identifies an SNMPv2\n   context\
    \ accessible by the SNMPv2 agent to which the message is\n   directed or by the\
    \ SNMPv2 agent associated with the sender of the\n   message.\n   For a local\
    \ SNMPv2 context which is realized by an SNMPv2 entity,\n   that SNMPv2 entity\
    \ uses locally-defined mechanisms to access the\n   management information identified\
    \ by the SNMPv2 context.\n   For a proxy SNMPv2 context, the SNMPv2 entity acts\
    \ as a proxy SNMPv2\n   agent to access the management information identified\
    \ by the SNMPv2\n   context.\n   The term remote SNMPv2 context is used at an\
    \ SNMPv2 manager to\n   indicate a SNMPv2 context (either local or proxy) which\
    \ is not\n   realized by the local SNMPv2 entity (i.e., the local SNMPv2 entity\n\
    \   uses neither locally-defined mechanisms, nor acts as a proxy SNMPv2\n   agent\
    \ to access the management information identified by the SNMPv2\n   context).\n\
    \   Proxy SNMPv2 contexts are further categorized as either local-proxy\n   contexts\
    \ or remote-proxy contexts.  A proxy SNMPv2 agent receives\n   Get/GetNext/GetBulk/Set\
    \ operations for a local-proxy context, and\n   forwards them with a remote-proxy\
    \ context; it receives SNMPv2-Trap\n   and Inform operations for a remote-proxy\
    \ context, and forwards them\n   with a local-proxy context; for Response operations,\
    \ a proxy SNMPv2\n   agent receives them with either a local-proxy or remote-proxy\n\
    \   context, and forwards them with a remote-proxy or local-proxy\n   context,\
    \ respectively.\n     For the non-proxy situation:\n                      context-A\n\
    \         Manager <----------------> Agent\n     the type of context is:\n   \
    \                        +-----------------+\n                           |   context-A\
    \     |\n         +-----------------+-----------------+\n         | Manager  \
    \       |    remote       |\n         +-----------------+-----------------+\n\
    \         | Agent           |    local        |\n         +-----------------+-----------------+\n\
    \         | agentID         |   of Agent      |\n         +-----------------+-----------------+\n\
    \         | contextSelector | locally unique  |\n         +-----------------+-----------------+\n\
    \     For proxy:\n                      context-B               context-C\n  \
    \       Manager <----------------> Proxy <----------------> Agent\n          \
    \                          Agent\n     the type and identity of the contexts are:\n\
    \                           +-----------------+-----------------+\n          \
    \                 |   context-B     |    context-C    |\n         +-----------------+-----------------+-----------------+\n\
    \         | Manager         |    remote       |       --        |\n         +-----------------+-----------------+-----------------+\n\
    \         | Proxy-Agent     |  local-proxy    |   remote-proxy  |\n         +-----------------+-----------------+-----------------+\n\
    \         | Agent           |      --         |      local      |\n         +-----------------+-----------------+-----------------+\n\
    \         | agentID         | of Proxy agent  |     of Agent    |\n         +-----------------+-----------------+-----------------+\n\
    \         | contextSelector | locally unique  |  locally unique |\n         +-----------------+-----------------+-----------------+\n\
    \   The combination of an agentID value and a context selector provides a\n  \
    \ globally-unique identification of a context.  When a context is\n   accessible\
    \ by multiple agents (e.g., including by proxy SNMPv2\n   agents), it has multiple\
    \ such globally-unique identifications, one\n   associated with each agent which\
    \ can access it. In the example above,\n   \"context-B\" and \"context-C\" are\
    \ different names for the same context.\n"
- title: 2.3.  Quality of Service (qoS)
  contents:
  - "2.3.  Quality of Service (qoS)\n   Messages are generated with a particular Quality\
    \ of Service (qoS),\n   either:\n  -  without authentication and privacy,\n  -\
    \  with authentication but not privacy,\n  -  with authentication and privacy.\n\
    \   All users are capable of having messages without authentication and\n   privacy\
    \ generated on their behalf.  Users having an authentication\n   protocol and\
    \ an authentication key can have messages with\n   authentication but not privacy\
    \ generated on their behalf. Users\n   having an authentication protocol, an authentication\
    \ key, a privacy\n   protocol and a privacy key can have messages with authentication\
    \ and\n   privacy generated on their behalf.\n   In addition to its indications\
    \ of authentication and privacy, the qoS\n   may also indicate that the message\
    \ contains an operation that may\n   result in a report PDU being generated (see\
    \ Section 2.6 below).\n"
- title: 2.4.  Access Policy
  contents:
  - "2.4.  Access Policy\n   An administration's access policy determines the access\
    \ rights of\n   users.  For a particular SNMPv2 context to which a user has access\n\
    \   using a particular qoS, that user's access rights are given by a list\n  \
    \ of authorized operations, and for a local context, a read-view and a\n   write-view.\
    \  The read-view is the set of object instances authorized\n   for the user when\
    \ reading objects.  Reading objects occurs when\n   processing a retrieval (get,\
    \ get-next, get-bulk) operation and when\n   sending a notification.  The write-view\
    \ is the set of object\n   instances authorized for the user when writing objects.\
    \  Writing\n   objects occurs when processing a set operation.  A user's access\n\
    \   rights may be different at different agents.\n"
- title: 2.5.  Replay Protection
  contents:
  - "2.5.  Replay Protection\n   Each SNMPv2 agent (or dual-role entity) maintains\
    \ three objects:\n  -  agentID, which is an identifier unique among all agents\
    \ in (at\n     least) an administrative domain;\n  -  agentBoots, which is a count\
    \ of the number of times the agent has\n     rebooted/re-initialized since agentID\
    \ was last configured; and,\n  -  agentTime, which is the number of seconds since\
    \ agentBoots was last\n     incremented.\n   An SNMPv2 agent is always authoritative\
    \ with respect to these\n   variables.  It is the responsibility of an SNMPv2\
    \ manager to\n   synchronize with the agent, as appropriate.  In the case of an\
    \ SNMPv2\n   dual-role entity sending an Inform-Request, it is that entity acting\n\
    \   in an agent role which is authoritative with respect to these\n   variables\
    \ for the Inform-Request.\n   An agent is required to maintain the values of agentID\
    \ and agentBoots\n   in non-volatile storage.\n"
- title: 2.5.1.  agentID
  contents:
  - "2.5.1.  agentID\n   The agentID value contained in an authenticated message is\
    \ used to\n   defeat attacks in which messages from a manager are replayed to\
    \ a\n   different agent and/or messages from one agent (or dual-role entity)\n\
    \   are replayed as if from a different agent (or dual-role entity).\n   When\
    \ an agent (or dual-role entity) is first installed, it sets its\n   local value\
    \ of agentID according to a enterprise-specific algorithm\n   (see the definition\
    \ of agentID in Section 4.1).\n"
- title: 2.5.2.  agentBoots and agentTime
  contents:
  - "2.5.2.  agentBoots and agentTime\n   The agentBoots and agentTime values contained\
    \ in an authenticated\n   message are used to defeat attacks in which messages\
    \ are replayed\n   when they are no longer valid.  Through use of agentBoots and\n\
    \   agentTime, there is no requirement for an SNMPv2 agent to have a\n   non-volatile\
    \ clock which ticks (i.e., increases with the passage of\n   time) even when the\
    \ agent is powered off.  Rather, each time an\n   SNMPv2 agent reboots, it retrieves,\
    \ increments, and then stores\n   agentBoots in non-volatile storage, and resets\
    \ agentTime to zero.\n   When an agent (or dual-role entity) is first installed,\
    \ it sets its\n   local values of agentBoots and agentTime to zero.  If agentTime\
    \ ever\n   reaches its maximum value (2147483647), then agentBoots is\n   incremented\
    \ as if the agent has rebooted and agentTime is reset to\n   zero and starts incrementing\
    \ again.\n   Each time an agent (or dual-role entity) reboots, any SNMPv2 managers\n\
    \   holding that agent's values of agentBoots and agentTime need to re-\n   synchronize\
    \ prior to sending correctly authenticated messages to that\n   agent (see Section\
    \ 2.7 for re-synchronization procedures).  Note,\n   however, that the procedures\
    \ do provide for a notification to be\n   accepted as authentic by a manager,\
    \ when sent by an agent which has\n   rebooted since the manager last re-synchronized.\n\
    \   If an agent (or dual-role entity) is ever unable to determine its\n   latest\
    \ agentBoots value, then it must set its agentBoots value to\n   0xffffffff.\n\
    \   Whenever the local value of agentBoots has the value 0xffffffff, it\n   latches\
    \ at that value and an authenticated message always causes an\n   usecStatsNotInWindows\
    \ authentication failure.\n   In order to reset an agent whose agentBoots value\
    \ has reached the\n   value 0xffffffff, manual intervention is required.  The\
    \ agent must be\n   physically visited and re-configured, either with a new agentID\n\
    \   value, or with new secret values for the authentication and privacy\n   keys\
    \ of all users known to that agent.\n"
- title: 2.5.3.  Time Window
  contents:
  - "2.5.3.  Time Window\n   The Time Window is a value that specifies the window\
    \ of time in which\n   a message generated on behalf of any user is valid.  This\
    \ memo\n   specifies that the same value of the Time Window, 150 seconds, is\n\
    \   used for all users.\n"
- title: 2.6.  Error Reporting
  contents:
  - "2.6.  Error Reporting\n   While processing a received communication, an SNMPv2\
    \ entity may\n   determine that the message is unacceptable (see Section 3.2).\
    \  In\n   this case, the appropriate counter from the snmpGroup [15] or\n   usecStatsGroup\
    \ object groups is incremented and the received message\n   is discarded without\
    \ further processing.\n   If an SNMPv2 entity acting in the agent role makes such\
    \ a\n   determination and the qoS indicates that a report may be generated,\n\
    \   then after incrementing the appropriate counter, it is required to\n   generate\
    \ a message containing a report PDU, with the same user and\n   context as the\
    \ received message, and to send it to the transport\n   address which originated\
    \ the received message.  For all report PDUs,\n   except those generated due to\
    \ incrementing the usecStatsNotInWindows\n   counter, the report PDU is unauthenticated.\
    \  For those generated due\n   to incrementing usecStatsNotInWindows, the report\
    \ PDU is\n   authenticated only if the received message was authenticated.\n \
    \  The report flag in the qoS may only be set if the message contains a\n   Get,\
    \ GetNext, GetBulk, Set operation.  The report flag should never\n   be set for\
    \ a message that contains a Response, Inform, SNMPv2-Trap or\n   Report operation.\
    \  Furthermore, a report PDU is never sent by an\n   SNMPv2 entity acting in a\
    \ manager role.\n"
- title: 2.7.  Time Synchronization
  contents:
  - "2.7.  Time Synchronization\n   Time synchronization, required by a management\
    \ entity in order to\n   proceed with authentic communications, has occurred when\
    \ the\n   management entity has obtained local values of agentBoots and\n   agentTime\
    \ from the agent that are within the agent's time window.  To\n   remain synchronized,\
    \ the local values must remain within the agent's\n   time window and thus must\
    \ be kept loosely synchronized with the\n   values stored at the agent.  In addition\
    \ to keeping a local version\n   of agentBoots and agentTime, a manager must also\
    \ keep one other local\n   variable, latestReceivedAgentTime.  This value records\
    \ the highest\n   value of agentTime that was received by the manager from the\
    \ agent\n   and is used to eliminate the possibility of replaying messages that\n\
    \   would prevent the manager's notion of the agentTime from advancing.\n   Time\
    \ synchronization occurs as part of the procedures of receiving a\n   message\
    \ (Section 3.2, step 9d). As such, no explicit time\n   synchronization procedure\
    \ is required by a management entity.  Note,\n   that whenever the local value\
    \ of agentID is changed (e.g., through\n   discovery) or when a new secret is\
    \ configured, the local values of\n   agentBoots and latestReceivedAgentTime should\
    \ be set to zero. This\n   will cause the time synchronization to occur when the\
    \ next authentic\n   message is received.\n"
- title: 2.8.  Proxy Error Propagation
  contents:
  - "2.8.  Proxy Error Propagation\n   When a proxy SNMPv2 agent receives a report\
    \ PDU from a proxied agent\n   and it is determined that a proxy-forwarded request\
    \ cannot be\n   delivered to the proxied agent, then the snmpProxyDrops counter\
    \ [15]\n   is incremented and a report PDU is generated and transmitted to the\n\
    \   transport address from which the original request was received.\n   (Note\
    \ that the receipt of a report PDU containing snmpProxyDrops as a\n   VarBind,\
    \ is included among the reasons why a proxy-forwarded request\n   cannot be delivered.)\n"
- title: 2.9.  SNMPv2 Messages Using this Model
  contents:
  - "2.9.  SNMPv2 Messages Using this Model\n   The syntax of an SNMPv2 message using\
    \ this security model differs\n   from that of an SNMPv1 [2] message as follows:\n\
    \  -  The version component is changed to 2.\n  -  The data component contains\
    \ either a PDU or an OCTET STRING\n     containing an encrypted PDU.\n   The SNMPv1\
    \ community string is now termed the \"parameters\" component\n   and contains\
    \ a set of administrative information for the message.\n   Only the PDU is protected\
    \ from disclosure by the privacy protocol.\n   This exposes the administrative\
    \ information to eavesdroppers.\n   However, malicious use of this information\
    \ is considered to be a\n   Traffic Analysis attack against which protection is\
    \ not provided.\n   For an authenticated SNMPv2 message, the message digest is\
    \ applied to\n   the entire message given to the transport service.  As such,\
    \ message\n   generation first privatizes the PDU, then adds the message wrapper,\n\
    \   and then authenticates the message.\n   An SNMPv2 message is an ASN.1 value\
    \ with the following syntax:\n     Message ::=\n         SEQUENCE {\n        \
    \     version\n                 INTEGER { v2 (2) },\n             parameters\n\
    \                 OCTET STRING,\n             -- <model=1>\n             --  \
    \    <qoS><agentID><agentBoots><agentTime><maxSize>\n             --      <userLen><userName><authLen><authDigest>\n\
    \             --      <contextSelector>\n             data\n                 CHOICE\
    \ {\n                     plaintext\n                         PDUs,\n        \
    \             encrypted\n                         OCTET STRING\n             \
    \    }\n         }\n"
- title: 'where:'
  contents:
  - "where:\n  parameters\n     a concatenation of the following values in network-byte\
    \ order.  If\n     the first octet (<model>) is one, then\n     <qoS>    = 8-bits\
    \ of quality-of-service\n              bitnumber\n              7654 3210    \
    \ meaning\n              ---- ----     --------------------------------\n    \
    \          .... ..00     no authentication nor privacy\n              .... ..01\
    \     authentication, no privacy\n              .... ..1.     authentication and\
    \ privacy\n              .... .1..     generation of report PDU allowed\n    \
    \          where bit 7 is the most significant bit.\n     <agentID>    = 12 octets\n\
    \          a unique identifier for the agent (or dual-role entity).\n     <agentBoots>\
    \ = 32-bits\n          an unsigned quantity (0..4294967295) in network-byte order.\n\
    \     <agentTime>  = 32-bits\n          an unsigned quantity (0..2147483647) in\
    \ network-byte order.\n     <maxSize>    = 16-bits\n          an unsigned quantity\
    \ (484..65507) in network-byte order, which\n          identifies the maximum\
    \ message size which the sender of this\n          message can receive using the\
    \ same transport domain as used\n          for this message.\n     <userLen> \
    \   = 1 octet\n          the length of following <userName> field.\n     <userName>\
    \   = 1..16 arbitrary octets\n          the user on whose behalf this message\
    \ is sent.\n     <authLen>    = 1 octet\n          the length of following <authDigest>\
    \ field.\n     <authDigest> = 0..255 octets\n          for authenticated messages,\
    \ the authentication digest.\n          Otherwise, the value has zero-length on\
    \ transmission and is\n          ignored on receipt.\n     <contextSelector> =\
    \ 0..40 arbitrary octets\n          the context selector which in combination\
    \ with agentID\n          identifies the SNMPv2 context containing the management\n\
    \          information referenced by the SNMPv2 message.\n  plaintext\n     an\
    \ SNMPv2 PDU as defined in [12].\n  encrypted\n     the encrypted form of an SNMPv2\
    \ PDU.\n"
- title: 2.10.  Local Configuration Datastore (LCD)
  contents:
  - "2.10.  Local Configuration Datastore (LCD)\n   Each SNMPv2 entity maintains a\
    \ local conceptually database, called\n   the Local Configuration Datastore (LCD),\
    \ which holds its known set of\n   information about SNMPv2 users and other associated\
    \ (e.g., access\n   control) information.  An LCD may potentially be required\
    \ to hold\n   information about multiple SNMPv2 agent entities. As such, the\n\
    \   <agentID> should be used to identify a particular agent entity in the\n  \
    \ LCD.\n   It is a local implementation issue as to whether information in the\n\
    \   LCD is stored information or whether it is obtained dynamically\n   (e.g.,\
    \ as a part of an SNMPv2 manager's API) on an as-needed basis.\n"
- title: 3.  Elements of Procedure
  contents:
  - "3.  Elements of Procedure\n   This section describes the procedures followed\
    \ by an SNMPv2 entity in\n   processing SNMPv2 messages.\n"
- title: 3.1.  Generating a Request or Notification
  contents:
  - "3.1.  Generating a Request or Notification\n   This section describes the procedure\
    \ followed by an SNMPv2 entity\n   whenever it generates a message containing\
    \ a management operation\n   (either a request or a notification) on behalf of\
    \ a user, for a\n   particular context and with a particular qoS value.\n"
- title: (1)  Information concerning the user is extracted from the LCD.  The
  contents:
  - "(1)  Information concerning the user is extracted from the LCD.  The\n     transport\
    \ domain and transport address to which the operation is to\n     be sent is determined.\
    \  The context is resolved into an agentID\n     value and a contextSelector value.\n"
- title: (2)  If the qoS specifies that the message is to be protected from
  contents:
  - "(2)  If the qoS specifies that the message is to be protected from\n     disclosure,\
    \ but the user does not support both an authentication\n     and a privacy protocol,\
    \ or does not have configured authentication\n     and privacy keys, then the\
    \ operation cannot be sent.\n"
- title: (3)  If the qoS specifies that the message is to be authenticated, but
  contents:
  - "(3)  If the qoS specifies that the message is to be authenticated, but\n    \
    \ the user does not support an authentication protocol, or does not\n     have\
    \ a configured authentication key, then the operation cannot be\n     sent.\n"
- title: (4)  The operation is serialized (i.e., encoded) according to the
  contents:
  - "(4)  The operation is serialized (i.e., encoded) according to the\n     conventions\
    \ of [13] and [12] into a PDUs value.\n"
- title: (5)  If the operation is a Get, GetNext, GetBulk, or Set then the report
  contents:
  - "(5)  If the operation is a Get, GetNext, GetBulk, or Set then the report\n  \
    \   flag in the qoS is set to the value 1.\n"
- title: '(6)  An SNMPv2 message is constructed using the ASN.1 Message syntax:'
  contents:
  - "(6)  An SNMPv2 message is constructed using the ASN.1 Message syntax:\n     -\
    \ the version component is set to the value 2.\n     - if the qoS specifies that\
    \ the message is to be protected from\n       disclosure, then the octet sequence\
    \ representing the serialized\n       PDUs value is encrypted according to the\
    \ user's privacy protocol\n       and privacy key, and the encrypted data is encoded\
    \ as an octet\n       string and is used as the data component of the message.\n\
    \     - if the qoS specifies that the message is not to be protected from\n  \
    \     disclosure, then the serialized PDUs value is used directly as\n       the\
    \ value of the data component.\n     - the parameters component is constructed\
    \ using:\n       - the requested qoS, userName, agentID and context selector,\n\
    \       - if the qoS specifies that the message is to be authenticated or\n  \
    \       the management operation is a notification, then the current\n       \
    \  values of agentBoots, and agentTime corresponding to agentID\n         from\
    \ the LCD are used.  Otherwise, the <agentBoots> and\n         <agentTime> fields\
    \ are set to zero-filled octets.\n       - the <maxSize> field is set to the maximum\
    \ message size which\n         the local SNMPv2 entity can receive using the transport\
    \ domain\n         which will be used to send this message.\n       - if the qoS\
    \ specifies that the message is to be authenticated,\n         then the <authDigest>\
    \ field is temporarily set to the user's\n         authentication key.  Otherwise,\
    \ the <authDigest> field is set\n         to the zero-length string.\n"
- title: (7)  The constructed Message value is serialized (i.e., encoded)
  contents:
  - "(7)  The constructed Message value is serialized (i.e., encoded)\n     according\
    \ to the conventions of [13] and [12].\n"
- title: (8)  If the qoS specifies that the message is to be authenticated, then
  contents:
  - "(8)  If the qoS specifies that the message is to be authenticated, then\n   \
    \  an MD5 digest value is computed over the octet sequence\n     representing\
    \ the concatenation of the serialized Message value and\n     the user's authentication\
    \ key.  The <authDigest> field is then set\n     to the computed digest value.\n"
- title: (9)  The serialized Message value is transmitted to the determined
  contents:
  - "(9)  The serialized Message value is transmitted to the determined\n     transport\
    \ address.\n"
- title: 3.2.  Processing a Received Communication
  contents:
  - "3.2.  Processing a Received Communication\n   This section describes the procedure\
    \ followed by an SNMPv2 entity\n   whenever it receives an SNMPv2 message.  This\
    \ procedure is\n   independent of the transport service address at which the message\
    \ was\n   received.  For clarity, some of the details of this procedure are\n\
    \   left out and are described in Section 3.2.1 and its sub-sections.\n"
- title: (1)  The snmpInPkts counter [15] is incremented.  If the received
  contents:
  - "(1)  The snmpInPkts counter [15] is incremented.  If the received\n     message\
    \ is not the serialization (according to the conventions of\n     [13]) of a Message\
    \ value, then the snmpInASNParseErrs counter [15]\n     is incremented, and the\
    \ message is discarded without further\n     processing.\n"
- title: (2)  If the value of the version component has a value other than 2,
  contents:
  - "(2)  If the value of the version component has a value other than 2,\n     then\
    \ the message is either processed according to some other\n     version of this\
    \ protocol, or the snmpInBadVersions counter [15] is\n     incremented, and the\
    \ message is discarded without further\n     processing.\n"
- title: (3)  The value of the <model> field is extracted from the parameters
  contents:
  - "(3)  The value of the <model> field is extracted from the parameters\n     component\
    \ of the Message value.  If the value of the <model> field\n     is not 1, then\
    \ either the message is processed according to some\n     other security model,\
    \ or the usecStatsBadParameters counter is\n     incremented, and the message\
    \ is discarded without further\n     processing.\n"
- title: (4)  The values of the rest of the fields are extracted from the
  contents:
  - "(4)  The values of the rest of the fields are extracted from the\n     parameters\
    \ component of the Message value.\n"
- title: '(5)  If the <agentID> field contained in the parameters is unknown then:'
  contents:
  - "(5)  If the <agentID> field contained in the parameters is unknown then:\n  \
    \   - a manager that performs discovery may optionally create a new LCD\n    \
    \   entry and continue processing; or\n     - the usecStatsUnknownContexts counter\
    \ is incremented, a report PDU\n       is generated, and the received message\
    \ is discarded without\n       further processing.\n"
- title: (6)  The LCD is consulted for information about the SNMPv2 context
  contents:
  - "(6)  The LCD is consulted for information about the SNMPv2 context\n     identified\
    \ by the combination of the <agentID> and\n     <contextSelector> fields.  If\
    \ information about this SNMPv2 context\n     is absent from the LCD, then the\
    \ usecStatsUnknownContexts counter\n     is incremented, a report PDU is generated,\
    \ and the received message\n     is discarded without further processing.\n"
- title: (7)  Information about the value of the <userName> field is extracted
  contents:
  - "(7)  Information about the value of the <userName> field is extracted\n     from\
    \ the LCD.  If no information is available, then the\n     usecStatsUnknownUserNames\
    \ counter is incremented, a report PDU [1]\n     is generated, and the received\
    \ message is discarded without further\n     processing.\n"
- title: (8)  If the information about the user indicates that it does not
  contents:
  - "(8)  If the information about the user indicates that it does not\n     support\
    \ the quality of service indicated by the <qoS> field, then\n     the usecStatsUnsupportedQoS\
    \ counter is incremented, a report PDU is\n     generated, and the received message\
    \ is discarded without further\n     processing.\n"
- title: (9)  If the <qoS> field indicates an authenticated message and the
  contents:
  - "(9)  If the <qoS> field indicates an authenticated message and the\n     user's\
    \ authentication protocol is the Digest Authentication\n     Protocol described\
    \ in this memo, then:\n     a) the local values of agentBoots and agentTime corresponding\
    \ to\n        the value of the <agentID> field are extracted from the LCD.\n \
    \    b) the value of <authDigest> field is temporarily saved.  A new\n       \
    \ serialized Message is constructed which differs from that\n        received\
    \ in exactly one respect: that the <authDigest> field\n        within it has the\
    \ value of the user's authentication key.  An\n        MD5 digest value is computed\
    \ over the octet sequence\n        representing the concatenation of the new serialized\
    \ Message and\n        the user's authentication key.\n     c) if the LCD information\
    \ indicates the SNMPv2 context is of type\n        local (i.e., an agent), then:\n\
    \        - if the computed digest differs from the saved authDigest\n        \
    \  value, then the usecStatsWrongDigestValues counter is\n          incremented,\
    \ a report PDU is generated, and the received\n          message is discarded\
    \ without further processing. However, if\n          the snmpEnableAuthenTraps\
    \ object [15] is enabled, then the\n          SNMPv2 entity sends authenticationFailure\
    \ traps [15] according\n          to its configuration.\n        - if any of the\
    \ following conditions is true, then the message\n          is considered to be\
    \ outside of the Time Window:\n          - the local value of agentBoots is 0xffffffff;\n\
    \          - the <agentBoots> field differs from the local value of\n        \
    \    agentBoots; or,\n          - the value of the <agentTime> field differs from\
    \ the local\n            notion of agentTime by more than +/- 150 seconds.\n \
    \       - if the message is considered to be outside of the Time Window\n    \
    \      then the usecStatsNotInWindows counter is incremented, an\n          authenticated\
    \ report PDU is generated (see section 2.7), and\n          the received message\
    \ is discarded without further processing.\n     d) if the LCD information indicates\
    \ the SNMPv2 context is not\n        realized by the local SNMPv2 entity (i.e.,\
    \ a manager), then:\n        - if the computed digest differs from the saved authDigest\n\
    \          value, then the usecStatsWrongDigestValues counter is\n          incremented\
    \ and the received message is discarded without\n          further processing.\n\
    \        - if all of the following conditions are true:\n             - if the\
    \ <qoS> field indicates that privacy is not in use;\n             - the SNMPv2\
    \ operation type determined from the ASN.1 tag\n               value associated\
    \ with the PDU's component is a Report;\n             - the Report was generated\
    \ due to a usecStatsNotInWindows\n               error condition; and,\n     \
    \        - the <agentBoots> field is greater than the local value of\n       \
    \        agentBoots, or the <agentBoots> field is equal to the\n             \
    \  local value of agentBoots and the <agentTime> field is\n               greater\
    \ than the value of latestReceivedAgentTime,\n          then the LCD entry corresponding\
    \ to the value of the <agentID>\n          field is updated, by setting the local\
    \ value of agentBoots\n          from the <agentBoots> field, the value latestReceivedAgentTime\n\
    \          from the <agentTime> field, and the local value of agentTime\n    \
    \      from the <agentTime> field.\n        - if any of the following conditions\
    \ is true, then the message\n          is considered to be outside of the Time\
    \ Window:\n          - the local value of agentBoots is 0xffffffff;\n        \
    \  - the <agentBoots> field is less than the local value of\n            agentBoots;\
    \ or,\n          - the <agentBoots> field is equal to the local value of\n   \
    \         agentBoots and the <agentTime> field is more than 150\n            seconds\
    \ less than the local notion of agentTime.\n        - if the message is considered\
    \ to be outside of the Time Window\n          then the usecStatsNotInWindows counter\
    \ is incremented, and the\n          received message is discarded without further\
    \ processing;\n          however, time synchronization procedures may be invoked.\
    \  Note\n          that this procedure allows for <agentBoots> to be greater than\n\
    \          the local value of agentBoots to allow for received messages\n    \
    \      to be accepted as authentic when received from an agent that\n        \
    \  has rebooted since the manager last re-synchronized.\n        - if at least\
    \ one of the following conditions is true:\n             - the <agentBoots> field\
    \ is greater than the local value of\n               agentBoots; or,\n       \
    \      - the <agentBoots> field is equal to the local value of\n             \
    \  agentBoots and the <agentTime> field is greater than the\n               value\
    \ of latestReceivedAgentTime,\n          then the LCD entry corresponding to the\
    \ value of the <agentID>\n          field is updated, by setting the local value\
    \ of agentBoots\n          from the <agentBoots> field, the local value\n    \
    \      latestReceivedAgentTime from the <agentTime> field, and the\n         \
    \ local value of agentTime from the <agentTime> field.\n"
- title: (10) If the <qoS> field indicates use of a privacy protocol, then the
  contents:
  - "(10) If the <qoS> field indicates use of a privacy protocol, then the\n     octet\
    \ sequence representing the data component is decrypted\n     according to the\
    \ user's privacy protocol to obtain a serialized\n     PDUs value.  Otherwise\
    \ the data component is assumed to directly\n     contain the PDUs value.\n"
- title: (11) The SNMPv2 operation type is determined from the ASN.1 tag value
  contents:
  - "(11) The SNMPv2 operation type is determined from the ASN.1 tag value\n     associated\
    \ with the PDUs component.\n"
- title: (12) If the SNMPv2 operation type is a Report, then the request-id in
  contents:
  - "(12) If the SNMPv2 operation type is a Report, then the request-id in\n     the\
    \ PDU is correlated to an outstanding request, and if the\n     correlation is\
    \ successful, the appropriate action is taken (e.g.,\n     time synchronization,\
    \ proxy error propagation, etc.); in\n     particular, if the report PDU indicates\
    \ a usecStatsNotInWindows\n     condition, then the outstanding request may be\
    \ retransmitted (since\n     the procedure in Step 9d above should have resulted\
    \ in time\n     synchronization).\n"
- title: (13) If the SNMPv2 operation type is either a Get, GetNext, GetBulk, or
  contents:
  - "(13) If the SNMPv2 operation type is either a Get, GetNext, GetBulk, or\n   \
    \  Set operation, then:\n     a) if the LCD information indicates that the SNMPv2\
    \ context is of\n        type remote or remote-proxy, then the\n        usecStatsUnauthorizedOperations\
    \ counter is incremented, a report\n        PDU is generated, and the received\
    \ message is discarded without\n        further processing.\n     b) the LCD is\
    \ consulted for access rights authorized for\n        communications using the\
    \ indicated qoS, on behalf of the\n        indicated user, and concerning management\
    \ information in the\n        indicated SNMPv2 context for the particular SNMPv2\
    \ operation\n        type.\n     c) if the SNMPv2 operation type is not among\
    \ the authorized access\n        rights, then the usecStatsUnauthorizedOperations\
    \ counter is\n        incremented, a report PDU is generated, and the received\
    \ message\n        is discarded without further processing.\n     d) The information\
    \ extracted from the LCD concerning the user and\n        the SNMPv2 context,\
    \ together with the sending transport address\n        of the received message\
    \ is cached for later use in generating a\n        response message.\n     e)\
    \ if the LCD information indicates the SNMPv2 context is of type\n        local,\
    \ then the management operation represented by the PDUs\n        value is performed\
    \ by the receiving SNMPv2 entity with respect\n        to the relevant MIB view\
    \ within the SNMPv2 context according to\n        the procedures set forth in\
    \ [12], where the relevant MIB view is\n        determined according to the user,\
    \ the agentID, the\n        contextSelector, the qoS values and the type of operation\n\
    \        requested.\n     f) if the LCD information indicates the SNMPv2 context\
    \ is of type\n        local-proxy, then:\n        i. the user, qoS, agentID, contextSelector\
    \ and transport address\n           to be used to forward the request are extracted\
    \ from the LCD.\n           If insufficient information concerning the user is\
    \ currently\n           available, then snmpProxyDrops counter [15] is incremented,\
    \ a\n           report PDU is generated, and the received message is\n       \
    \    discarded.\n        ii. if an administrative flag in the LCD indicates that\
    \ the\n           message is to be forwarded using the SNMPv1 administrative\n\
    \           framework, then the procedures described in [4] are invoked.\n   \
    \        Otherwise, a new SNMPv2 message is constructed: its PDUs\n          \
    \ component is copied from that in the received message except\n           that\
    \ the contained request-id is replaced by a unique value\n           (this value\
    \ will enable a subsequent response message to be\n           correlated with\
    \ this request); the <userName>, <qoS>,\n           <agentID> and <contextSelector>\
    \ fields are set to the values\n           extracted from the LCD; the <maxSize>\
    \ field is set to the\n           minimum of the value in the received message\
    \ and the local\n           system's maximum message size for the transport domain\
    \ which\n           will be used to forward the message; and finally, the message\n\
    \           is authenticated and/or protected from disclosure according\n    \
    \       to the qoS value.\n        iii. the information cached in Step 13d above\
    \ is augmented with\n           the request-id of the received message as well\
    \ as the\n           request-id, agentID and contextSelector of the constructed\n\
    \           message.\n        iv. the constructed message is forwarded to the\
    \ extracted\n           transport address.\n"
- title: '(14) If the SNMPv2 operation type is an Inform, then:'
  contents:
  - "(14) If the SNMPv2 operation type is an Inform, then:\n     a) if the LCD information\
    \ indicates the SNMPv2 context is of type\n        local or local-proxy then the\
    \ usecStatsUnauthorizedOperations\n        counter is incremented, a report PDU\
    \ is generated, and the\n        received message is discarded without further\
    \ processing.\n     b) if the LCD information indicates the SNMPv2 context is\
    \ of type\n        remote, then the Inform operation represented by the PDUs value\n\
    \        is performed by the receiving SNMPv2 entity according to the\n      \
    \  procedures set forth in [12].\n     c) if the LCD information indicates the\
    \ SNMPv2 context is of type\n        remote-proxy, then:\n        i. a single\
    \ unique request-id is selected for use by all\n           forwarded copies of\
    \ this request.  This value will enable the\n           first response message\
    \ to be correlated with this request;\n           other responses are not required\
    \ and should be discarded when\n           received, since the agent that originated\
    \ the Inform only\n           requires one response to its Inform.\n        ii.\
    \ information is extracted from the LCD concerning all\n           combinations\
    \ of userName, qoS, agentID, contextSelector and\n           transport address\
    \ with which the received message is to be\n           forwarded.\n        iii.\
    \ for each such combination whose access rights permit Inform\n           operations\
    \ to be forwarded, a new SNMPv2 message is\n           constructed, as follows:\
    \ its PDUs component is copied from\n           that in the received message except\
    \ that the contained\n           request-id is replaced by the value selected\
    \ in Step i above;\n           its <userName>, <qoS>, <agentID> and <contextSelector>\
    \ fields\n           are set to the values extracted in Step ii above; and its\n\
    \           <maxSize> field is set to the minimum of the value in the\n      \
    \     received message and the local system's maximum message size\n         \
    \  for the transport domain which will be used to forward this\n           message.\n\
    \        iv. for each constructed SNMPv2 message, information concerning\n   \
    \        the <userName>, <qoS>, <agentID>, <contextSelector>,\n           request-id\
    \ and sending transport address of the received\n           message, as well as\
    \ the request- id, agentID and\n           contextSelector of the constructed\
    \ message, is cached for\n           later use in generating a response message.\n\
    \        v. each constructed message is forwarded to the appropriate\n       \
    \    transport address extracted from the LCD in step ii above.\n"
- title: '(15) If the SNMPv2 operation type is a Response, then:'
  contents:
  - "(15) If the SNMPv2 operation type is a Response, then:\n     a) if the LCD information\
    \ indicates the SNMPv2 context is of type\n        local, then the usecStatsUnauthorizedOperations\
    \ counter is\n        incremented, a report PDU is generated, and the received\
    \ message\n        is discarded without further processing.\n     b) if the LCD\
    \ information indicates the SNMPv2 context is of type\n        remote, then the\
    \ Response operation represented by the PDUs\n        value is performed by the\
    \ receiving SNMPv2 entity according to\n        the procedures set forth in [12].\n\
    \     c) if the LCD information indicates the SNMPv2 context is of type\n    \
    \    local-proxy or remote-proxy, then:\n        i. the request-id is extracted\
    \ from the PDUs component of the\n           received message.  The context's\
    \ agentID and contextSelector\n           values together with the extracted request-id\
    \ are used to\n           correlate this response message to the corresponding\
    \ values\n           for a previously forwarded request by inspecting the cache\
    \ of\n           information as augmented in Substep iii of Step 13f above or\n\
    \           in Substep iv of 14c above.  If no such correlated\n           information\
    \ is found, then the received message is discarded\n           without further\
    \ processing.\n        ii. a new SNMPv2 message is constructed: its PDUs component\
    \ is\n           copied from that in the received message except that the\n  \
    \         contained request-id is replaced by the value saved in the\n       \
    \    correlated information from the original request; its\n           <userName>,\
    \ <qoS>, <agentID> and <contextSelector> fields are\n           set to the values\
    \ saved from the received message. The\n           <maxSize> field is set to the\
    \ minimum of the value in the\n           received message and the local system's\
    \ maximum message size\n           for the transport domain which will be used\
    \ to forward the\n           message. The message is authenticated and/or protected\
    \ from\n           disclosure according to the saved qoS value.\n        iii.\
    \ the constructed message is forwarded to the transport\n           address saved\
    \ in the correlated information as the sending\n           transport address of\
    \ the original request.\n        iv. the correlated information is deleted from\
    \ the cache of\n           information.\n"
- title: '(16) If the SNMPv2 operation type is a SNMPv2-Trap, then:'
  contents:
  - "(16) If the SNMPv2 operation type is a SNMPv2-Trap, then:\n     a) if the LCD\
    \ information indicates the SNMPv2 context is of type\n        local or local-proxy,\
    \ then the usecStatsUnauthorizedOperations\n        counter is incremented, a\
    \ report PDU is generated, and the\n        received message is discarded without\
    \ further processing.\n     b) if the LCD information indicates the SNMPv2 context\
    \ is of type\n        remote, then the SNMPv2-Trap operation represented by the\
    \ PDUs\n        value is performed by the receiving SNMPv2 entity according to\n\
    \        the procedures set forth in [12].\n     c) if the LCD information indicates\
    \ the SNMPv2 context is of type\n        remote-proxy, then:\n        i. a unique\
    \ request-id is selected for use in forwarding the\n           message.\n    \
    \    ii. information is extracted from the LCD concerning all\n           combinations\
    \ of userName, qoS, agentID, contextSelector and\n           transport address\
    \ with which the received message is to be\n           forwarded.\n        iii.\
    \ for each such combination whose access rights permit\n           SNMPv2-Trap\
    \ operations to be forwarded, a new SNMPv2 message\n           is constructed,\
    \ as follows: its PDUs component is copied from\n           that in the received\
    \ message except that the contained\n           request-id is replaced by the\
    \ value selected in Step i above;\n           its <userName>, <qoS>, <agentID>\
    \ and <contextSelector> fields\n           are set to the values extracted in\
    \ Step ii above.\n        iv. each constructed message is forwarded to the appropriate\n\
    \           transport address extracted from the LCD in step ii above.\n"
- title: 3.2.1.  Additional Details
  contents:
  - "3.2.1.  Additional Details\n   For the sake of clarity and to prevent the above\
    \ procedure from being\n   even longer, the following details were omitted from\
    \ the above\n   procedure.\n"
- title: 3.2.1.1.  ASN.1 Parsing Errors
  contents:
  - "3.2.1.1.  ASN.1 Parsing Errors\n   For ASN.1 parsing errors, the snmpInASNParseErrs\
    \ counter [15] is\n   incremented and a report PDU is generated whenever such\
    \ an ASN.1\n   parsing error is discovered.  However, if the parsing error causes\n\
    \   the information able to be extracted from the message to be\n   insufficient\
    \ for generating a report PDU, then the report PDU is not\n   sent.\n"
- title: 3.2.1.2.  Incorrectly Encoded Parameters
  contents:
  - "3.2.1.2.  Incorrectly Encoded Parameters\n   For an incorrectly encoded parameters\
    \ component of the Message value\n   (e.g., incorrect or inconsistent value of\
    \ the <userLen> or <authLen>\n   fields), the usecStatsBadParameters counter is\
    \ incremented. Since the\n   encoded parameters are in error, the report flag\
    \ in the qoS cannot be\n   reliably determined. Thus, no report PDU is generated\
    \ for the\n   incorrectly encoded parameters error condition.\n"
- title: 3.2.1.3.  Generation of a Report PDU
  contents:
  - "3.2.1.3.  Generation of a Report PDU\n   Some steps specify that the received\
    \ message is discarded without\n   further processing whenever a report PDU is\
    \ generated.  However:\n  -  An SNMPv2 manager never generates a report PDU.\n\
    \  -  If the operation type can reliably be determined and it is\n     determined\
    \ to be a Report, SNMPv2-Trap, Inform, or a Response then\n     a report PDU is\
    \ not generated.\n  -  A report PDU is only generated when the report flag in\
    \ the qoS is\n     set to the value 1.\n   A generated report PDU must always\
    \ use the current values of agentID,\n   agentBoots, and agentTime from the LCD.\
    \  In addition, a generated\n   report PDU must whenever possible contain the\
    \ same request-id value\n   as in the PDU contained in the received message. \
    \ Meeting this\n   constraint normally requires the message to be further processed\
    \ just\n   enough so as to extract its request-id. There are two situations in\n\
    \   which the SNMPv2 request-id cannot be determined. The first situation\n  \
    \ occurs when the userName is unknown and the qoS indicates that the\n   message\
    \ is encrypted.  The other situation is when there is an ASN.1\n   parsing error.\
    \  In cases where the the request-id cannot be\n   determined, the default request-id\
    \ value 2147483647 is used.\n"
- title: 3.2.1.4.  Cache Timeout
  contents:
  - "3.2.1.4.  Cache Timeout\n   Some steps specify that information is cached so\
    \ that a Response\n   operation may be correlated to the appropriate Request operation.\n\
    \   However, a number of situations could cause the cache to grow without\n  \
    \ bound. One such situation is when the Response operation does not\n   arrive\
    \ or arrives \"late\" at the entity. In order to ensure that the\n   cache does\
    \ not grow without bound, it is recommended that cache\n   entries be deleted\
    \ when they are determined to be no longer valid. It\n   is an implementation\
    \ dependent decision as to how long cache entries\n   remain valid, however, caching\
    \ entries more than 150 seconds is not\n   useful since any use of the cache entry\
    \ after that time would\n   generate a usecStatsNotInWindows error condition.\n"
- title: 3.3.  Generating a Response
  contents:
  - "3.3.  Generating a Response\n   The procedure for generating a response to an\
    \ SNMPv2 management\n   request is identical to the procedure for transmitting\
    \ a request (see\n   Section 3.1), with these exceptions:\n  -  The response is\
    \ sent on behalf of the same user and with the same\n     value of the agentID\
    \ and contextSelector as the request.\n  -  The PDUs value of the responding Message\
    \ value is the response\n     which results from performing the operation specified\
    \ in the\n     original PDUs value.\n  -  The authentication protocol and other\
    \ relevant information for the\n     user is obtained, not from the LCD, but rather\
    \ from information\n     cached (in Step 13d) when processing the original message.\n\
    \  -  The serialized Message value is transmitted using any transport\n     address\
    \ belonging to the agent for the transport domain from which\n     the corresponding\
    \ request originated - even if that is different\n     from any transport information\
    \ obtained from the LCD.\n  -  If the qoS specifies that the message is to be\
    \ authenticated or the\n     response is being generated by a SNMPv2 entity acting\
    \ in an agent\n     role, then the current values of agentBoots and agentTime\
    \ from the\n     LCD are used.  Otherwise, the <agentBoots> and <agentTime> fields\n\
    \     are set to zero-filled octets.\n  -  The report flag in the qoS is set to\
    \ the value 0.\n"
- title: 4.  Discovery
  contents:
  - "4.  Discovery\n   This security model requires that a discovery process obtain\n\
    \   sufficient information about an SNMPv2 entity's agent in order to\n   communicate\
    \ with it.  Discovery requires the SNMPv2 manager to learn\n   the agent's agentID\
    \ value before communication may proceed.  This may\n   be accomplished by formulating\
    \ a get-request communication with the\n   qoS set to noAuth/noPriv, the userName\
    \ set to \"public\", the agentID\n   set to all zeros (binary), the contextSelector\
    \ set to \"\", and the\n   VarBindList left empty.  The response to this message\
    \ will be an\n   reportPDU that contains the agentID within the <parameters> field\n\
    \   (and containing the usecStatsUnknownContexts counter in the\n   VarBindList).\
    \ If authenticated communication is required then the\n   discovery process may\
    \ invoke the procedure described in Section 2.7\n   to synchronize the clocks.\n"
- title: 5.  Definitions
  contents:
  - '5.  Definitions

    '
- title: SNMPv2-USEC-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'SNMPv2-USEC-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE, Counter32, Unsigned32,\n    snmpModules\n\
    \        FROM SNMPv2-SMI\n    TEXTUAL-CONVENTION\n        FROM SNMPv2-TC\n   \
    \ MODULE-COMPLIANCE, OBJECT-GROUP\n        FROM SNMPv2-CONF;\n"
- title: usecMIB MODULE-IDENTITY
  contents:
  - "usecMIB MODULE-IDENTITY\n    LAST-UPDATED \"9601120000Z\"\n    ORGANIZATION \"\
    IETF SNMPv2 Working Group\"\n    CONTACT-INFO\n            \"        Glenn W.\
    \ Waters\n             Postal: Bell-Northern Research, Ltd.\n                \
    \     P.O. Box 3511, Station C\n                     Ottawa, ON, K1Y 4H7\n   \
    \                  Canada\n                Tel: +1 613 763 3933\n            \
    \ E-mail: gwaters@bnr.ca\"\n    DESCRIPTION\n            \"The MIB module for\
    \ SNMPv2 entities implementing the user-\n            based security model.\"\n\
    \    ::= { snmpModules 6 }\n"
- title: usecMIBObjects OBJECT IDENTIFIER ::= { usecMIB 1 }
  contents:
  - 'usecMIBObjects OBJECT IDENTIFIER ::= { usecMIB 1 }

    '
- title: -- Textual Conventions
  contents:
  - '-- Textual Conventions

    '
- title: AgentID ::= TEXTUAL-CONVENTION
  contents:
  - "AgentID ::= TEXTUAL-CONVENTION\n    STATUS       current\n    DESCRIPTION\n \
    \           \"An agent's administratively-unique identifier.\n            The\
    \ value for this object may not be all zeros or all 'ff'H.\n            The initial\
    \ value for this object may be configured via an\n            operator console\
    \ entry or via an algorithmic function.  In\n            the later case, the following\
    \ guidelines are recommended:\n              1) The first four octets are set\
    \ to the binary equivalent\n                 of the agent's SNMP network management\
    \ private\n                 enterprise number as assigned by the Internet Assigned\n\
    \                 Numbers Authority (IANA).  For example, if Acme\n          \
    \       Networks has been assigned { enterprises 696 }, the\n                \
    \ first four octets would be assigned '000002b8'H.\n              2) The remaining\
    \ eight octets are the cookie whose\n                 contents are determined\
    \ via one or more enterprise-\n                 specific methods.  Such methods\
    \ must be designed so as\n                 to maximize the possibility that the\
    \ value of this\n                 object will be unique in the agent's administrative\n\
    \                 domain.  For example, the cookie may be the IP address\n   \
    \              of the agent, or the MAC address of one of the\n              \
    \   interfaces, with each address suitably padded with\n                 random\
    \ octets.  If multiple methods are defined, then\n                 it is recommended\
    \ that the cookie be further divided\n                 into one octet that indicates\
    \ the method being used and\n                 seven octets which are a function\
    \ of the method.\"\n    SYNTAX     OCTET STRING (SIZE (12))\n"
- title: -- the USEC Basic group
  contents:
  - '-- the USEC Basic group

    '
- title: --
  contents:
  - '--

    '
- title: -- a collection of objects providing basic instrumentation of
  contents:
  - '-- a collection of objects providing basic instrumentation of

    '
- title: -- the SNMPv2 entity implementing the user-based security model
  contents:
  - '-- the SNMPv2 entity implementing the user-based security model

    '
- title: usecAgent       OBJECT IDENTIFIER ::= { usecMIBObjects 1 }
  contents:
  - 'usecAgent       OBJECT IDENTIFIER ::= { usecMIBObjects 1 }

    '
- title: agentID OBJECT-TYPE
  contents:
  - "agentID OBJECT-TYPE\n    SYNTAX     AgentID\n    MAX-ACCESS read-only\n    STATUS\
    \     current\n    DESCRIPTION\n            \"The agent's administratively-unique\
    \ identifier.\"\n    ::= { usecAgent 1 }\n"
- title: agentBoots OBJECT-TYPE
  contents:
  - "agentBoots OBJECT-TYPE\n    SYNTAX     Unsigned32\n    MAX-ACCESS read-only\n\
    \    STATUS     current\n    DESCRIPTION\n            \"The number of times that\
    \ the agent has re-initialized\n            itself since its initial configuration.\"\
    \n    ::= { usecAgent 2 }\n"
- title: agentTime OBJECT-TYPE
  contents:
  - "agentTime OBJECT-TYPE\n    SYNTAX     Unsigned32 (0..2147483647)\n    UNITS \
    \     \"seconds\"\n    MAX-ACCESS read-only\n    STATUS     current\n    DESCRIPTION\n\
    \            \"The number of seconds since the agent last incremented the\n  \
    \          agentBoots object.\"\n    ::= { usecAgent 3 }\n"
- title: agentSize OBJECT-TYPE
  contents:
  - "agentSize OBJECT-TYPE\n    SYNTAX     INTEGER (484..65507)\n    MAX-ACCESS read-only\n\
    \    STATUS     current\n    DESCRIPTION\n            \"The maximum length in\
    \ octets of an SNMPv2 message which\n            this agent will accept using\
    \ any transport mapping.\"\n    ::= { usecAgent 4 }\n"
- title: -- USEC statistics
  contents:
  - '-- USEC statistics

    '
- title: --
  contents:
  - '--

    '
- title: -- a collection of objects providing basic instrumentation of
  contents:
  - '-- a collection of objects providing basic instrumentation of

    '
- title: -- the SNMPv2 entity implementing the user-based security model
  contents:
  - '-- the SNMPv2 entity implementing the user-based security model

    '
- title: usecStats      OBJECT IDENTIFIER ::= { usecMIBObjects 2 }
  contents:
  - 'usecStats      OBJECT IDENTIFIER ::= { usecMIBObjects 2 }

    '
- title: usecStatsUnsupportedQoS OBJECT-TYPE
  contents:
  - "usecStatsUnsupportedQoS OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS\
    \ read-only\n    STATUS     current\n    DESCRIPTION\n            \"The total\
    \ number of packets received by the SNMPv2 entity\n            which were dropped\
    \ because they requested a quality-of-\n            service that was unknown to\
    \ the agent or otherwise\n            unavailable.\"\n    ::= { usecStats 1 }\n"
- title: usecStatsNotInWindows OBJECT-TYPE
  contents:
  - "usecStatsNotInWindows OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS read-only\n\
    \    STATUS     current\n    DESCRIPTION\n            \"The total number of packets\
    \ received by the SNMPv2 entity\n            which were dropped because they appeared\
    \ outside of the\n            agent's window.\"\n    ::= { usecStats 2 }\n"
- title: usecStatsUnknownUserNames OBJECT-TYPE
  contents:
  - "usecStatsUnknownUserNames OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS\
    \ read-only\n    STATUS     current\n    DESCRIPTION\n            \"The total\
    \ number of packets received by the SNMPv2 entity\n            which were dropped\
    \ because they referenced a user that was\n            not known to the agent.\"\
    \n    ::= { usecStats 3 }\n"
- title: usecStatsWrongDigestValues OBJECT-TYPE
  contents:
  - "usecStatsWrongDigestValues OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS\
    \ read-only\n    STATUS     current\n    DESCRIPTION\n            \"The total\
    \ number of packets received by the SNMPv2 entity\n            which were dropped\
    \ because they didn't contain the expected\n            digest value.\"\n    ::=\
    \ { usecStats 4 }\n"
- title: usecStatsUnknownContexts OBJECT-TYPE
  contents:
  - "usecStatsUnknownContexts OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS\
    \ read-only\n    STATUS     current\n    DESCRIPTION\n            \"The total\
    \ number of packets received by the SNMPv2 entity\n            which were dropped\
    \ because they referenced a context that\n            was not known to the agent.\"\
    \n    ::= { usecStats 5 }\n"
- title: usecStatsBadParameters OBJECT-TYPE
  contents:
  - "usecStatsBadParameters OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS\
    \ read-only\n    STATUS     current\n    DESCRIPTION\n            \"The total\
    \ number of packets received by the SNMPv2 entity\n            which were dropped\
    \ because the <parameters> field was\n            improperly encoded or had invalid\
    \ syntax.\"\n    ::= { usecStats 6 }\n"
- title: usecStatsUnauthorizedOperations OBJECT-TYPE
  contents:
  - "usecStatsUnauthorizedOperations OBJECT-TYPE\n    SYNTAX     Counter32\n    MAX-ACCESS\
    \ read-only\n    STATUS     current\n    DESCRIPTION\n            \"The total\
    \ number of packets received by the SNMPv2 entity\n            which were dropped\
    \ because the PDU type referred to an\n            operation that is invalid or\
    \ not authorized.\"\n    ::= { usecStats 7 }\n"
- title: -- conformance information
  contents:
  - '-- conformance information

    '
- title: usecMIBConformance
  contents:
  - "usecMIBConformance\n               OBJECT IDENTIFIER ::= { usecMIB 2 }\n"
- title: usecMIBCompliances
  contents:
  - "usecMIBCompliances\n               OBJECT IDENTIFIER ::= { usecMIBConformance\
    \ 1 }\n"
- title: usecMIBGroups  OBJECT IDENTIFIER ::= { usecMIBConformance 2 }
  contents:
  - 'usecMIBGroups  OBJECT IDENTIFIER ::= { usecMIBConformance 2 }

    '
- title: -- compliance statements
  contents:
  - '-- compliance statements

    '
- title: usecMIBCompliance MODULE-COMPLIANCE
  contents:
  - "usecMIBCompliance MODULE-COMPLIANCE\n    STATUS  current\n    DESCRIPTION\n \
    \           \"The compliance statement for SNMPv2 entities which\n           \
    \ implement the SNMPv2 USEC model.\"\n    MODULE  -- this module\n        MANDATORY-GROUPS\
    \ { usecBasicGroup,\n                          usecStatsGroup }\n    ::= { usecMIBCompliances\
    \ 1 }\n"
- title: -- units of conformance
  contents:
  - '-- units of conformance

    '
- title: usecBasicGroup OBJECT-GROUP
  contents:
  - "usecBasicGroup OBJECT-GROUP\n    OBJECTS { agentID,\n              agentBoots,\n\
    \              agentTime,\n              agentSize }\n    STATUS  current\n  \
    \  DESCRIPTION\n            \"A collection of objects providing identification,\
    \ clocks,\n            and capabilities of an SNMPv2 entity which implements the\n\
    \            SNMPv2 USEC model.\"\n    ::= { usecMIBGroups 1 }\n"
- title: usecStatsGroup OBJECT-GROUP
  contents:
  - "usecStatsGroup OBJECT-GROUP\n    OBJECTS { usecStatsUnsupportedQoS,\n       \
    \       usecStatsNotInWindows,\n              usecStatsUnknownUserNames,\n   \
    \           usecStatsWrongDigestValues,\n              usecStatsUnknownContexts,\n\
    \              usecStatsBadParameters,\n              usecStatsUnauthorizedOperations\
    \ }\n    STATUS  current\n    DESCRIPTION\n            \"A collection of objects\
    \ providing basic error statistics of\n            an SNMPv2 entity which implements\
    \ the SNMPv2 USEC model.\"\n    ::= { usecMIBGroups 2 }\n"
- title: END
  contents:
  - 'END

    '
- title: 6.  Security Considerations
  contents:
  - '6.  Security Considerations

    '
- title: 6.1.  Recommended Practices
  contents:
  - "6.1.  Recommended Practices\n   This section describes practices that contribute\
    \ to the secure,\n   effective operation of the mechanisms defined in this memo.\n\
    \  -  A management station must discard SNMPv2 responses for which\n     neither\
    \ the request-id component nor the represented management\n     information corresponds\
    \ to any currently outstanding request.\n     Although it would be typical for\
    \ a management station to do this as\n     a matter of course, when using these\
    \ security protocols it is\n     significant due to the possibility of message\
    \ duplication\n     (malicious or otherwise).\n  -  A management station must\
    \ generate unpredictable request-ids in\n     authenticated messages in order\
    \ to protect against the possibility\n     of message duplication (malicious or\
    \ otherwise).\n  -  A management station should perform time synchronization using\n\
    \     authenticated messages in order to protect against the possibility\n   \
    \  of message duplication (malicious or otherwise).\n  -  When sending state altering\
    \ messages to a managed agent, a\n     management station should delay sending\
    \ successive messages to the\n     managed agent until a positive acknowledgement\
    \ is received for the\n     previous message or until the previous message expires.\n\
    \     No message ordering is imposed by the SNMPv2. Messages may be\n     received\
    \ in any order relative to their time of generation and each\n     will be processed\
    \ in the ordered received. Note that when an\n     authenticated message is sent\
    \ to a managed agent, it will be valid\n     for a period of time of approximately\
    \ 150 seconds under normal\n     circumstances, and is subject to replay during\
    \ this period.\n     Indeed, a management station must cope with the loss and\
    \ re-\n     ordering of messages resulting from anomalies in the network as a\n\
    \     matter of course.\n     However, a managed object, snmpSetSerialNo [15],\
    \ is specifically\n     defined for use with SNMPv2 set operations in order to\
    \ provide a\n     mechanism to ensure the processing of SNMPv2 messages occurs\
    \ in a\n     specific order.\n  -  The frequency with which the secrets of an\
    \ SNMPv2 user should be\n     changed is indirectly related to the frequency of\
    \ their use.\n     Protecting the secrets from disclosure is critical to the overall\n\
    \     security of the protocols. Frequent use of a secret provides a\n     continued\
    \ source of data that may be useful to a cryptanalyst in\n     exploiting known\
    \ or perceived weaknesses in an algorithm.  Frequent\n     changes to the secret\
    \ avoid this vulnerability.\n     Changing a secret after each use is generally\
    \ regarded as the most\n     secure practice, but a significant amount of overhead\
    \ may be\n     associated with that approach.\n     Note, too, in a local environment\
    \ the threat of disclosure may be\n     less significant, and as such the changing\
    \ of secrets may be less\n     frequent.  However, when public data networks are\
    \ the communication\n     paths, more caution is prudent.\n"
- title: 6.2.  Defining Users
  contents:
  - "6.2.  Defining Users\n   The mechanisms defined in this document employ the notion\
    \ of \"users\"\n   having access rights.  How \"users\" are defined is subject\
    \ to the\n   security policy of the network administration. For example, users\n\
    \   could be individuals (e.g., \"joe\" or \"jane\"), or a particular role\n \
    \  (e.g., \"operator\" or \"administrator\"), or a combination (e.g., \"joe-\n\
    \   operator\", \"jane-operator\" or \"joe-admin\").  Furthermore, a \"user\"\n\
    \   may be a logical entity, such as a manager station application or set\n  \
    \ of manager station applications, acting on behalf of a individual or\n   role,\
    \ or set of individuals, or set of roles, including combinations.\n   Appendix\
    \ A describes an algorithm for mapping a user \"password\" to a\n   16 octet value\
    \ for use as either a user's authentication key or\n   privacy key (or both).\
    \  Passwords are often generated, remembered,\n   and input by a human.  Human-generated\
    \ passwords may be less than the\n   16 octets required by the authentication\
    \ and privacy protocols, and\n   brute force attacks can be quite easy on a relatively\
    \ short ASCII\n   character set.  Therefore, the algorithm is Appendix A performs\
    \ a\n   transformation on the password.  If the Appendix A algorithm is used,\n\
    \   agent implementations (and agent configuration applications) must\n   ensure\
    \ that passwords are at least 8 characters in length.\n   Because the Appendix\
    \ A algorithm uses such passwords (nearly)\n   directly, it is very important\
    \ that they not be easily guessed.  It\n   is suggested that they be composed\
    \ of mixed-case alphanumeric and\n   punctuation characters that don't form words\
    \ or phrases that might be\n   found in a dictionary.  Longer passwords improve\
    \ the security of the\n   system.  Users may wish to input multiword phrases to\
    \ make their\n   password string longer while ensuring that it is memorable.\n\
    \   Note that there is security risk in configuring the same \"user\" on\n   multiple\
    \ systems where the same password is used on each system,\n   since the compromise\
    \ of that user's secrets on one system results in\n   the compromise of that user\
    \ on all other systems having the same\n   password.\n   The algorithm in Appendix\
    \ A avoids this problem by including the\n   agent's agentID value as well as\
    \ the user's password in the\n   calculation of a user's secrets; this results\
    \ in the user's secrets\n   being different at different agents; however, if the\
    \ password is\n   compromised the algorithm in Appendix A is not effective.\n"
- title: 6.3.  Conformance
  contents:
  - "6.3.  Conformance\n   To be termed a \"Secure SNMPv2 implementation\", an SNMPv2\n\
    \   implementation:\n - must implement the Digest Authentication Protocol.\n -\
    \ must, to the maximal extent possible, prohibit access to the\n   secret(s) of\
    \ each user about which it maintains information in a LCD,\n   under all circumstances\
    \ except as required to generate and/or\n   validate SNMPv2 messages with respect\
    \ to that user.\n - must implement the SNMPv2 USEC MIB.\n   In addition, an SNMPv2\
    \ agent must provide initial configuration in\n   accordance with Appendix A.1.\n\
    \   Implementation of the Symmetric Encryption Protocol is optional.\n"
- title: 7.  Editor's Address
  contents:
  - "7.  Editor's Address\n   Glenn W. Waters\n   Bell-Northern Research Ltd.\n  \
    \ P.O. Box 3511, Station C\n   Ottawa, Ontario  K1Y 4H7\n   CA\n   Phone: +1 613\
    \ 763 3933\n   EMail: gwaters@bnr.ca\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   This document is the result of significant work by three\
    \ major\n   contributors:\n     Keith McCloghrie (Cisco Systems, kzm@cisco.com)\n\
    \     Marshall T. Rose (Dover Beach Consulting, mrose@dbc.mtview.ca.us)\n    \
    \ Glenn W. Waters (Bell-Northern Research Ltd., gwaters@bnr.ca)\n   The authors\
    \ wish to acknowledge James M. Galvin of Trusted\n   Information Systems who contributed\
    \ significantly to earlier work on\n   which this memo is based, and the general\
    \ contributions of members of\n   the SNMPv2 Working Group, and, in particular,\
    \ Aleksey Y. Romanov and\n   Steven L. Waldbusser.\n   A special thanks is extended\
    \ for the contributions of:\n     Uri Blumenthal (IBM)\n     Shawn Routhier (Epilogue)\n\
    \     Barry Sheehan (IBM)\n     Bert Wijnen (IBM)\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: '[1]  McCloghrie, K., Editor, "An Administrative Infrastructure for'
  contents:
  - "[1]  McCloghrie, K., Editor, \"An Administrative Infrastructure for\n     SNMPv2\"\
    , RFC 1909, Cisco Systems, January 1996.\n"
- title: '[2]  Case, J., Fedor, M., Schoffstall, M., and J. Davin, "Simple'
  contents:
  - "[2]  Case, J., Fedor, M., Schoffstall, M., and J. Davin, \"Simple\n     Network\
    \ Management Protocol\", STD 15, RFC 1157, SNMP Research,\n     Performance Systems\
    \ International, MIT Laboratory for Computer\n     Science, May 1990.\n"
- title: '[3]  Rivest, R., "The MD5 Message-Digest Algorithm", RFC 1321, MIT'
  contents:
  - "[3]  Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321, MIT\n     Laboratory\
    \ for Computer Science, April 1992.\n"
- title: '[4]  The SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[4]  The SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n    \
    \ S. Waldbusser, \"Coexistence between Version 1 and Version 2 of\n     the Internet-standard\
    \ Network Management Framework\", RFC 1908,\n     January 1996.\n"
- title: '[5]  Data Encryption Standard, National Institute of Standards and'
  contents:
  - "[5]  Data Encryption Standard, National Institute of Standards and\n     Technology.\
    \  Federal Information Processing Standard (FIPS)\n     Publication 46-1.  Supersedes\
    \ FIPS Publication 46, (January, 1977;\n     reaffirmed January, 1988).\n"
- title: '[6]  Data Encryption Algorithm, American National Standards Institute.'
  contents:
  - "[6]  Data Encryption Algorithm, American National Standards Institute.\n    \
    \ ANSI X3.92-1981, (December, 1980).\n"
- title: '[7]  DES Modes of Operation, National Institute of Standards and'
  contents:
  - "[7]  DES Modes of Operation, National Institute of Standards and\n     Technology.\
    \  Federal Information Processing Standard (FIPS)\n     Publication 81, (December,\
    \ 1980).\n"
- title: '[8]  Data Encryption Algorithm - Modes of Operation, American National'
  contents:
  - "[8]  Data Encryption Algorithm - Modes of Operation, American National\n    \
    \ Standards Institute.  ANSI X3.106-1983, (May 1983).\n"
- title: '[9]  Guidelines for Implementing and Using the NBS Data Encryption'
  contents:
  - "[9]  Guidelines for Implementing and Using the NBS Data Encryption\n     Standard,\
    \ National Institute of Standards and Technology.  Federal\n     Information Processing\
    \ Standard (FIPS) Publication 74, (April,\n     1981).\n"
- title: '[10] Validating the Correctness of Hardware Implementations of the NBS'
  contents:
  - "[10] Validating the Correctness of Hardware Implementations of the NBS\n    \
    \ Data Encryption Standard, National Institute of Standards and\n     Technology.\
    \  Special Publication 500-20.\n"
- title: '[11] Maintenance Testing for the Data Encryption Standard, National'
  contents:
  - "[11] Maintenance Testing for the Data Encryption Standard, National\n     Institute\
    \ of Standards and Technology.  Special Publication 500-61,\n     (August, 1980).\n"
- title: '[12] The SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[12] The SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n    \
    \ S., Waldbusser, \"Protocol Operations for Version 2 of the Simple\n     Network\
    \ Management Protocol (SNMPv2)\", RFC 1905, January 1996.\n"
- title: '[13] The SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[13] The SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n    \
    \ S. Waldbusser, \"Transport Mappings for Version 2 of the Simple\n     Network\
    \ Management Protocol (SNMPv2)\", RFC 1906, January 1996.\n"
- title: '[14] Krawczyk, H., "Keyed-MD5 for Message Authentication", Work in'
  contents:
  - "[14] Krawczyk, H., \"Keyed-MD5 for Message Authentication\", Work in\n     Progress,\
    \ IBM, June 1995.\n"
- title: '[15] The SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and'
  contents:
  - "[15] The SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and\n    \
    \ S. Waldbusser, \"Management Information Base for Version 2 of the\n     Simple\
    \ Network Management Protocol (SNMPv2)\", RFC 1907\n     January 1996.\n"
- title: APPENDIX A - Installation
  contents:
  - 'APPENDIX A - Installation

    '
- title: A.1.   Agent Installation Parameters
  contents:
  - 'A.1.   Agent Installation Parameters

    '
- title: During installation, an agent is configured with several parameters.
  contents:
  - 'During installation, an agent is configured with several parameters.

    '
- title: 'These include:'
  contents:
  - 'These include:

    '
- title: (1)  a security posture
  contents:
  - "(1)  a security posture\n     The choice of security posture determines the extent\
    \ of the view\n     configured for unauthenticated access.  One of three possible\n\
    \     choices is selected:\n          minimum-secure,\n          semi-secure,\
    \ or\n          very-secure.\n"
- title: (2)  one or more transport service addresses
  contents:
  - "(2)  one or more transport service addresses\n     These parameters may be specified\
    \ explicitly, or they may be\n     specified implicitly as the same set of network-layer\
    \ addresses\n     configured for other uses by the device together with the well-\n\
    \     known transport-layer \"port\" information for the appropriate\n     transport\
    \ domain [13].  The agent listens on each of these\n     transport service addresses\
    \ for messages sent on behalf of any user\n     it knows about.\n"
- title: (3)  one or more secrets
  contents:
  - "(3)  one or more secrets\n     These are the authentication/privacy secrets for\
    \ the first user to\n     be configured.\n     One way to accomplish this is to\
    \ have the installer enter a\n     \"password\" for each required secret. The\
    \ password is then\n     algorithmically converted into the required secret by:\n\
    \     - forming a string of length 1,048,576 octets by repeating the\n       value\
    \ of the password as often as necessary, truncating\n       accordingly, and using\
    \ the resulting string as the input to the\n       MD5 algorithm. The resulting\
    \ digest, termed \"digest1\", is used in\n       the next step.\n     - a second\
    \ string of length 44 octets is formed by concatenating\n       digest1, the agent's\
    \ agentID value, and digest1. This string is\n       used as input to the MD5\
    \ algorithm. The resulting digest is the\n       required secret (see Appendix\
    \ A.2).\n   With these configured parameters, the agent instantiates the\n   following\
    \ user, context, views and access rights.  This configuration\n   information\
    \ should be readOnly (persistent).\n  -  One user:\n                         privacy\
    \ not supported   privacy supported\n                         ---------------------\
    \   -----------------\n       <userName>        \"public\"                \"public\"\
    \n       <authProtocol>    Digest Auth. Protocol   Digest Auth. Protocol\n   \
    \    <authPrivateKey>  authentication key      authentication key\n       <privProtocol>\
    \    none                    Symmetric Privacy Protocol\n       <privPrivateKey>\
    \  --                      privacy key\n  -  One local context with its <contextSelector>\
    \ as the empty-string.\n  -  One view for authenticated access:\n          - the\
    \ <all> MIB view is the \"internet\" subtree.\n  -  A second view for unauthenticated\
    \ access.  This view is configured\n     according to the selected security posture.\
    \  For the \"very-secure\"\n     posture:\n          - the <restricted> MIB view\
    \ is the union of the \"snmp\" [15],\n          \"usecAgent\" and \"usecStats\"\
    \ subtrees.\n     For the \"semi-secure\" posture:\n          - the <restricted>\
    \ MIB view is the union of the \"snmp\" [15],\n          \"usecAgent\", \"usecStats\"\
    \ and \"system\" subtrees.\n     For the \"minimum-secure\" posture:\n       \
    \   - the <restricted> MIB view is the \"internet\" subtree.\n  -  Access rights\
    \ to allow:\n        - read-only access for unauthenticated messages on behalf\
    \ of the\n          user \"public\" to the <restricted> MIB view of contextSelector\n\
    \          \"\".\n        - read-write access for authenticated but not private\
    \ messages\n          on behalf of the user \"public\" to the <all> MIB view of\n\
    \          contextSelector \"\".\n        - if privacy is supported, read-write\
    \ access for authenticated\n          and private messages on behalf of the user\
    \ \"public\" to the\n          <all> MIB view of contextSelector \"\".\n"
- title: A.2.   Password to Key Algorithm
  contents:
  - "A.2.   Password to Key Algorithm\n   The following code fragment demonstrates\
    \ the password to key\n   algorithm which can be used when mapping a password\
    \ to an\n   authentication or privacy key. (The calls to MD5 are as documented\
    \ in\n   RFC 1321.)\n"
- title: void password_to_key(password, passwordlen, agentID, key)
  contents:
  - "void password_to_key(password, passwordlen, agentID, key)\n    u_char *password;\
    \       /* IN */\n    u_int   passwordlen;    /* IN */\n    u_char *agentID; \
    \       /* IN - pointer to 12 octet long agentID */\n    u_char *key;        \
    \    /* OUT - caller supplies pointer to 16\n                               octet\
    \ buffer */ {\n    MD5_CTX     MD;\n    u_char      *cp, password_buf[64];\n \
    \   u_long      password_index = 0;\n    u_long      count = 0, i;\n    MD5Init\
    \ (&MD);   /* initialize MD5 */\n    /* loop until we've done 1 Megabyte */\n\
    \    while (count < 1048576) {\n        cp = password_buf;\n        for(i = 0;\
    \ i < 64; i++) {\n            *cp++ = password[ password_index++ % passwordlen\
    \ ];\n            /*\n             * Take the next byte of the password, wrapping\
    \ to the\n             * beginning of the password as necessary.\n           \
    \  */\n        }\n        MDupdate (&MD, password_buf, 64);\n        count +=\
    \ 64;\n    }\n    MD5Final (key, &MD);              /* tell MD5 we're done */\n\
    \    /* localize the key with the agentID and pass through MD5\n      to produce\
    \ final key */\n    memcpy (password_buf, key, 16);\n    memcpy (password_buf+16,\
    \ agentID, 12);\n    memcpy (password_buf+28, key, 16);\n    MD5Init (&MD);\n\
    \    MDupdate (&MD, password_buf, 44);\n    MD5Final (key, &MD);\n    return;\
    \ }\n"
- title: A.3.   Password to Key Sample
  contents:
  - "A.3.   Password to Key Sample\n   The following shows a sample output of the\
    \ password to key algorithm.\n   With a password of \"maplesyrup\" the output\
    \ of the password to key\n   algorithm before the key is localized with the agent's\
    \ agentID is:\n    '9f af 32 83 88 4e 92 83 4e bc 98 47 d8 ed d9 63'H\n   After\
    \ the intermediate key (shown above) is localized with the\n   agentID value of:\n\
    \    '00 00 00 00 00 00 00 00 00 00 00 02'H\n   the final output of the password\
    \ to key algorithm is:\n    '52 6f 5e ed 9f cc e2 6f 89 64 c2 93 07 87 d8 2b'H\n"
