- title: __initial_text__
  contents:
  - '     DECoupled Application Data Enroute (DECADE) Problem Statement

    '
- title: Abstract
  contents:
  - "Abstract\n   Peer-to-peer (P2P) applications have become widely used on the\n\
    \   Internet today and make up a large portion of the traffic in many\n   networks.\
    \  In P2P applications, one technique for reducing the\n   transit and uplink\
    \ P2P traffic is to introduce storage capabilities\n   within the network.  Traditional\
    \ caches (e.g., P2P and Web caches)\n   provide such storage, but they can be\
    \ complex (e.g., P2P caches need\n   to explicitly support individual P2P application\
    \ protocols), and do\n   not allow users to manage resource usage policies for\
    \ content in the\n   cache.  This document discusses the introduction of in-network\n\
    \   storage for P2P applications and shows the need for a standard\n   protocol\
    \ for accessing this storage.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6646.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology and Concepts ........................................3\n  \
    \ 3. The Problems ....................................................4\n    \
    \  3.1. P2P Infrastructural Stress and Inefficiency ................4\n      3.2.\
    \ P2P Cache: A Complex Type of In-Network Storage ............5\n      3.3. Ineffective\
    \ Integration of P2P Applications ................6\n   4. Usage Scenarios .................................................6\n\
    \      4.1. BitTorrent .................................................6\n  \
    \    4.2. Content Publisher ..........................................7\n   5.\
    \ Security Considerations .........................................8\n      5.1.\
    \ Denial-of-Service Attacks ..................................8\n      5.2. Copyright\
    \ and Legal Issues .................................8\n      5.3. Traffic Analysis\
    \ ...........................................8\n      5.4. Modification of Information\
    \ ................................8\n      5.5. Masquerade .................................................9\n\
    \      5.6. Disclosure .................................................9\n  \
    \    5.7. Message Stream Modification ................................9\n   6.\
    \ Acknowledgments .................................................9\n   7. Informative\
    \ References .........................................10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Peer-to-peer (P2P) applications, including both P2P streaming\
    \ and P2P\n   file-sharing applications, make up a large fraction of the traffic\
    \ in\n   many Internet Service Provider (ISP) networks today.  One way to\n  \
    \ reduce bandwidth usage by P2P applications is to introduce storage\n   capabilities\
    \ in networks.  Allowing P2P applications to store and\n   retrieve data from\
    \ inside networks can reduce traffic on the last-\n   mile uplink, as well as\
    \ on backbone and transit links.\n   Existing P2P caches provide in-network storage\
    \ and have been deployed\n   in some networks.  However, the current P2P caching\
    \ architecture\n   poses challenges to both P2P cache vendors and P2P application\n\
    \   developers.  For P2P cache vendors, it is challenging to support a\n   number\
    \ of continuously evolving P2P application protocols, due to\n   lack of documentation,\
    \ ongoing protocol changes, and rapid\n   introduction of new features by P2P\
    \ applications.  For P2P\n   application developers, closed P2P caching systems\
    \ limit P2P\n   applications from effectively utilizing in-network storage.  In\n\
    \   particular, P2P caches typically do not allow users to explicitly\n   store\
    \ content into in-network storage.  They also do not allow\n   applications to\
    \ specific resource and access control policies over\n   the usage of in-network\
    \ storage.  The challenges, if not addressed,\n   may lead to reduced efficiency\
    \ for P2P applications, and increased\n   load on the network infrastructure.\n\
    \   The challenges can be effectively addressed by using a standard, open\n  \
    \ protocol to access in-network storage [Data_Lockers].  P2P\n   applications\
    \ can store and retrieve content in the in-network\n   storage, as well as control\
    \ resources (e.g., bandwidth, connections)\n   consumed by peers in a P2P application.\
    \  As a simple example, a peer\n   of a P2P application may upload to other peers\
    \ through its in-network\n   storage, saving its usage of last-mile uplink bandwidth.\n\
    \   In this document, we distinguish between two functional components of\n  \
    \ the native P2P application protocol: signaling and data access.\n   Signaling\
    \ includes operations such as handshaking and discovering\n   peer and content\
    \ availability.  The data access component transfers\n   content from one peer\
    \ to another.\n   In essence, coupling of the signaling and data access makes\n\
    \   in-network storage complex to support various application services.\n   However,\
    \ these applications have common requirements for data access,\n   making it possible\
    \ to develop a standard protocol.\n"
- title: 2.  Terminology and Concepts
  contents:
  - "2.  Terminology and Concepts\n   The following terms have special meaning in\
    \ the definition of the\n   in-network storage system.\n   In-network storage:\
    \  A service inside a network that provides storage\n      and bandwidth to network\
    \ applications.  In-network storage may\n      reduce upload/transit/backbone\
    \ traffic and improve network\n      application performance.  The position of\
    \ in-network storage is in\n      the core of a network -- for example, co-located\
    \ with the border\n      router (network attached storage) or inside a data center.\n\
    \   P2P cache (peer-to-peer cache):  A kind of in-network storage that\n     \
    \ understands the signaling and transport of specific P2P\n      application protocols.\
    \  It caches the content for those specific\n      P2P applications in order to\
    \ serve peers and reduce traffic on\n      certain links.\n"
- title: 3.  The Problems
  contents:
  - "3.  The Problems\n   The emergence of P2P as a major network application (especially\
    \ P2P\n   file sharing and streaming) has led to substantial opportunities.\n\
    \   The P2P paradigm can be utilized to design highly scalable and robust\n  \
    \ applications at low cost, compared to the traditional client-server\n   paradigm.\n\
    \   However, P2P applications also face substantial design challenges.  A\n  \
    \ particular challenge facing P2P applications is the additional stress\n   that\
    \ they place on the network infrastructure.  At the same time,\n   lack of infrastructure\
    \ support can lead to unstable P2P application\n   performance, in particular\
    \ during peer churns and flash crowds, when\n   a large group of users begin to\
    \ retrieve the content during a short\n   period of time, leading to stress on\
    \ bandwidth-constrained access\n   uplinks.  A potential way to reduce network\
    \ stress and improve P2P\n   application performance would be to make it possible\
    \ for peers that\n   are on bandwidth-constrained access to put data in a place\
    \ that is\n   free of bandwidth constraints and also accessible by other peers.\n\
    \   These problems are now discussed in further detail.\n"
- title: 3.1.  P2P Infrastructural Stress and Inefficiency
  contents:
  - "3.1.  P2P Infrastructural Stress and Inefficiency\n   A particular problem of\
    \ the P2P paradigm is the stress that P2P\n   application traffic places on the\
    \ infrastructure of ISPs.  Multiple\n   measurements (e.g., [ipoque_Internet_Study])\
    \ have shown that P2P\n   traffic has become a major type of traffic on some networks.\n\
    \   Furthermore, the inefficiency of network-agnostic peering (at the P2P\n  \
    \ transmission level) leads to unnecessary traversal across network\n   domains\
    \ or spanning the backbone of a network [RFC5693].\n   Using network information\
    \ alone to construct more efficient P2P\n   swarms is not sufficient to reduce\
    \ P2P traffic in access networks, as\n   the total access upload traffic is equal\
    \ to the total access download\n   traffic in a traditional P2P system.  On the\
    \ other hand, it is\n   reported that P2P traffic is becoming the dominant traffic\
    \ on the\n   access networks of some networks, reaching as high as 50-60% on the\n\
    \   downlinks and 60-90% on the uplinks [DCIA] [ICNP] [ipoque_P2P_Survey]\n  \
    \ [P2P_File_Sharing].  Consequently, it becomes increasingly important\n   to\
    \ reduce upload access traffic, in addition to cross-domain and\n   backbone traffic.\n\
    \   The inefficiency of P2P is also observed when traffic is sent\n   upstream\
    \ as many times as there are remote peers interested in\n   getting the corresponding\
    \ information.  For example, the P2P\n   application transfer completion times\
    \ remain affected by potentially\n   (relatively) slow upstream transmission.\
    \  Similarly, the performance\n   of real-time P2P applications may be affected\
    \ by potentially\n   (relatively) higher upstream latencies.\n"
- title: '3.2.  P2P Cache: A Complex Type of In-Network Storage'
  contents:
  - "3.2.  P2P Cache: A Complex Type of In-Network Storage\n   An effective technique\
    \ to reduce P2P infrastructural stress and\n   inefficiency is to introduce in-network\
    \ storage.  A survey of\n   existing in-network storage systems can be found in\
    \ [RFC6392].\n   In the current Internet, in-network storage is introduced as\
    \ P2P\n   caches, either transparently or explicitly as a P2P peer.  To provide\n\
    \   service to a specific P2P application, the P2P cache server must\n   support\
    \ the specific signaling and transport protocols of the\n   specific P2P application.\
    \  This can lead to substantial complexity\n   for the P2P cache vendor.\n   First,\
    \ there are many P2P applications on the Internet (e.g.,\n   BitTorrent, eMule,\
    \ Flashget, and Thunder for file sharing; Abacast,\n   Kontiki, Octoshape, PPLive,\
    \ PPStream, and UUSee for P2P streaming).\n   Consequently, a P2P cache vendor\
    \ faces the challenge of supporting a\n   large number of P2P application protocols,\
    \ leading to product\n   complexity and increased development cost.\n   Second,\
    \ a specific P2P application protocol may evolve continuously\n   to add new features\
    \ or fix bugs.  This in turn forces a P2P cache\n   vendor to continuously monitor\
    \ application updates to track such\n   changes, leading to product complexity\
    \ and increased costs.\n   Third, many P2P applications use proprietary protocols\
    \ or support\n   end-to-end encryption.  This can render P2P caches ineffective.\n\
    \   Therefore, these three problems make it difficult to use the P2P\n   cache\
    \ as a network middlebox to support P2P application distribution.\n   Finally,\
    \ an end host has better connectivity and connection quality\n   to a P2P cache\
    \ than to a remote peer.  Without the ability to manage\n   bandwidth usage, the\
    \ P2P cache may increase the volume of download\n   traffic, which runs counter\
    \ to the reduction of upload access\n   traffic.\n"
- title: 3.3.  Ineffective Integration of P2P Applications
  contents:
  - "3.3.  Ineffective Integration of P2P Applications\n   As P2P applications evolve,\
    \ it has become increasingly clear that\n   usage of in-network resources can\
    \ improve the user's experience.  For\n   example, multiple P2P streaming systems\
    \ seek additional in-network\n   resources during a flash crowd, such as just\
    \ before a major live\n   streaming event.  In asymmetric networks, when the aggregated\
    \ upload\n   bandwidth of a channel cannot meet the download demand, a P2P\n \
    \  application may seek additional in-network resources to maintain a\n   stable\
    \ system.\n   However, some P2P applications using in-network infrastructural\n\
    \   resources require flexibility in implementing resource allocation\n   policies.\
    \  A major competitive advantage of many successful P2P\n   systems is their substantial\
    \ expertise in how to most efficiently\n   utilize peer and infrastructural resources.\
    \  For example, many live\n   P2P systems have specific algorithms to select those\
    \ peers that\n   behave as stable, higher-bandwidth sources.  Similarly, the higher-\n\
    \   bandwidth sources frequently use algorithms to choose to which peers\n   the\
    \ source should send content.  Developers of these systems continue\n   to fine-tune\
    \ these algorithms over time.\n   To permit developers to evolve and fine-tune\
    \ their algorithms and\n   policies, the in-network storage should expose basic\
    \ mechanisms and\n   allow as much flexibility as possible to P2P applications.\
    \  This\n   conforms to the end-to-end systems principle and allows innovation\n\
    \   and satisfaction of specific business goals.  Existing techniques for\n  \
    \ in-network storage in P2P applications lack these capabilities.\n"
- title: 4.  Usage Scenarios
  contents:
  - "4.  Usage Scenarios\n   Usage scenarios are presented to illustrate the problems\
    \ in both\n   Content Distribution Network (CDN) and P2P scenarios.\n"
- title: 4.1.  BitTorrent
  contents:
  - "4.1.  BitTorrent\n   When a BitTorrent client A uploads a block to multiple peers,\
    \ the\n   block traverses the last-mile uplink once for each peer.  After that,\n\
    \   the peer B that just received the block from A also needs to upload\n   through\
    \ its own last-mile uplink to others when sharing this block.\n   This is not\
    \ an efficient use of the last-mile uplink.  With an\n   in-network storage server,\
    \ however, the BitTorrent client may upload\n   the block to its in-network storage.\
    \  Peers may retrieve the block\n   from the in-network storage, reducing the\
    \ amount of data on the\n   last-mile uplink.  If supported by the in-network\
    \ storage, a peer can\n   also save the block in its own in-network storage while\
    \ it is being\n   retrieved; the block can then be uploaded from the in-network\
    \ storage\n   to other peers.\n   As previously discussed, BitTorrent or other\
    \ P2P applications\n   currently cannot explicitly manage which content is placed\
    \ in the\n   existing P2P caches, nor can they manage access and resource control\n\
    \   policies.  Applications need to retain flexibility to control the\n   content\
    \ distribution policies and topology among peers.\n"
- title: 4.2.  Content Publisher
  contents:
  - "4.2.  Content Publisher\n   Content publishers may also utilize in-network storage.\
    \  For example,\n   consider a P2P live streaming application.  A Content Publisher\n\
    \   typically maintains a small number of sources, each of which\n   distributes\
    \ blocks in the current play buffer to a set of P2P peers.\n   Some content publishers\
    \ use another hybrid content distribution\n   approach incorporating both P2P\
    \ and CDN modes.  As an example,\n   Internet TV may be implemented as a hybrid\
    \ CDN/P2P application by\n   distributing content from central servers via a CDN,\
    \ and also\n   incorporating a P2P mode amongst end hosts and set-top boxes.\n\
    \   In-network storage may be beneficial to hybrid CDN/P2P applications\n   as\
    \ well to support P2P distribution and to enable content publisher\n   standard\
    \ interfaces and controls.\n   However, there is no standard interface for different\
    \ content\n   publishers to access in-network storage.  One streaming content\n\
    \   publisher may need the existing in-network storage to support\n   streaming\
    \ signaling or another such capability, such as transcoding\n   capability, bitmap\
    \ information, intelligent retransmission, etc.,\n   while a different content\
    \ publisher may only need the in-network\n   storage to distribute files.  However,\
    \ it is reasonable that the\n   application services are only supported by content\
    \ publishers'\n   original servers and clients, and intelligent data plane transport\n\
    \   for those content publishers are supported by in-network storage.\n   A content\
    \ publisher also benefits from a standard interface to access\n   in-network storage\
    \ servers provided by different providers.  The\n   standard interface must allow\
    \ content publishers to retain control\n   over content placed in their own in-network\
    \ storage and to grant\n   access and resources only to the desired end hosts\
    \ and peers.\n   In the hybrid CDN/P2P scenario, if only the end hosts can store\n\
    \   content in the in-network storage server, the content must be\n   downloaded\
    \ and then uploaded over the last-mile access link before\n   another peer may\
    \ retrieve it from an in-network storage server.\n   Thus, in this deployment\
    \ scenario, it may be advantageous for a\n   content publisher or CDN provider\
    \ to store content in in-network\n   storage servers.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   There are several security considerations related\
    \ to in-network\n   storage.\n"
- title: 5.1.  Denial-of-Service Attacks
  contents:
  - "5.1.  Denial-of-Service Attacks\n   An attacker can try to consume a large portion\
    \ of the in-network\n   storage, or exhaust the connections of the in-network\
    \ storage through\n   a denial-of-service (DoS) attack.  Authentication, authorization,\
    \ and\n   accounting mechanisms should be considered in the cross-domain\n   environment.\
    \  Limitation of access from an administrative domain sets\n   up barriers for\
    \ content distribution.\n"
- title: 5.2.  Copyright and Legal Issues
  contents:
  - "5.2.  Copyright and Legal Issues\n   Copyright and other laws may prevent the\
    \ distribution of certain\n   content in various localities.  In-network storage\
    \ operators may\n   adopt system-wide ingress or egress filters to implement necessary\n\
    \   policies for storing or retrieving content, and applications may\n   apply\
    \ Digital Rights Management (DRM) to the data stored in the\n   network storage.\
    \  However, the specification and implementation of\n   such policies (e.g., filtering\
    \ and DRM) is not in scope for the\n   problem this document proposes to solve.\n"
- title: 5.3.  Traffic Analysis
  contents:
  - "5.3.  Traffic Analysis\n   If the content is stored in the provider-based in-network\
    \ storage,\n   there may be a risk to privacy: a malicious service provider could\n\
    \   use some link that a victim user is interested in, estimate that\n   another\
    \ user accessing the same data may have the same interest, and\n   use this information\
    \ as a basis to perform a phishing attack on the\n   other user.\n"
- title: 5.4.  Modification of Information
  contents:
  - "5.4.  Modification of Information\n   This type of threat means that some unauthorized\
    \ entity may alter\n   in-transit in-network storage access messages generated\
    \ on behalf of\n   an authorized principal in such a way as to effect unauthorized\n\
    \   management operations, including falsifying the value of an object.\n   This\
    \ threat may result in false data being supplied either because\n   the data on\
    \ a legitimate store is modified or because a bogus store\n   is introduced into\
    \ the network.\n"
- title: 5.5.  Masquerade
  contents:
  - "5.5.  Masquerade\n   This type of threat means that an unauthorized entity gains\
    \ access to\n   a system or performs a malicious act by illegitimately posing\
    \ as an\n   authorized entity.  In the context of this specification, when\n \
    \  accessing in-network storage, one malicious end host can masquerade\n   as\
    \ another authorized end host or application server to access a\n   protected\
    \ resource in the in-network storage.\n"
- title: 5.6.  Disclosure
  contents:
  - "5.6.  Disclosure\n   This type of threat involves the danger of someone eavesdropping\
    \ on\n   exchanges between in-network storage and application clients.\n   Protecting\
    \ against this threat may be required as a matter of\n   application policy.\n"
- title: 5.7.  Message Stream Modification
  contents:
  - "5.7.  Message Stream Modification\n   This type of threat means that messages\
    \ may be maliciously\n   re-ordered, delayed, or replayed to an extent greater\
    \ than what would\n   occur in a natural network system, in order to effect unauthorized\n\
    \   management operations on in-network storage.  If the middlebox (such\n   as\
    \ a Network Address Translator (NAT)) or proxy between an end host\n   and in-network\
    \ storage is compromised, it is easy to do a stream\n   modification attack.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   We would like to thank the following people for contributing\
    \ to this\n   document:\n   Ronald Bonica\n   David Bryan\n   Kar Ann Chew\n \
    \  Lars Eggert\n   Roni Even\n   Adrian Farrel\n   Yingjie Gu\n   David Harrington\n\
    \   Leif Johansson\n   Francois Le Faucheur\n   Hongqiang Liu\n   Tao Ma\n   Borje\
    \ Ohlman\n   Akbar Rahman\n   Peter Saint-Andre\n   Robert Sparks\n   Sean Turner\n\
    \   Yu-shun Wang\n   Richard Woundy\n   Yunfei Zhang\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [DCIA]     Parker, A., \"P2P Media Summit presentation\"\
    , Distributed\n              Computing Industry Association, October 2006,\n \
    \             <http://www.dcia.info/activities/p2pmsla2006/\n              CacheLogic.ppt>.\n\
    \   [Data_Lockers]\n              Yang, Y., \"Open Content Distribution using\
    \ Data Lockers\",\n              CoXNet Workshop, Beijing, China, November 2010,\n\
    \              <http:// cs-www.cs.yale.edu/homes/yry/projects/p4p/\n         \
    \     open-data-lockers-nov-2010-coxnet.pdf>.\n   [ICNP]     Wu, H., \"Challenges\
    \ and Opportunities of Internet\n              Developments in China\", ICNP 2007\
    \ Keynote Speech,\n              October 2007,\n              <http://www.ieee-icnp.org/2007/keynote_D.html>.\n\
    \   [P2P_File_Sharing]\n              Casadesus-Masanell, R. and A. Hervas-Drane,\
    \ \"Peer-to-Peer\n              File Sharing and the Market for Digital Information\n\
    \              Goods\", Journal of Economics & Management Strategy,\n        \
    \      Vol. 19, No. 2, pp. 333-373, Summer 2010.\n   [RFC5693]  Seedorf, J. and\
    \ E. Burger, \"Application-Layer Traffic\n              Optimization (ALTO) Problem\
    \ Statement\", RFC 5693,\n              October 2009.\n   [RFC6392]  Alimi, R.,\
    \ Ed., Rahman, A., Ed., and Y. Yang, Ed., \"A\n              Survey of In-Network\
    \ Storage Systems\", RFC 6392,\n              October 2011.\n   [ipoque_Internet_Study]\n\
    \              Schulze, H. and K. Mochalski, \"Internet Study 2008/2009\",\n \
    \             2009, <http://www.ipoque.com/resources/internet-studies>.\n   [ipoque_P2P_Survey]\n\
    \              \"ipoque's 2007 P2P Survey to be presented at Technology\n    \
    \          Review's Emerging Technologies Conference at MIT\",\n             \
    \ August 2007, <http://www.ipoque.com/en/news-events/\n              press-center/press-releases/2007/\n\
    \              ipoque%C2%B4s-2007-p2p-survey-to-be-presented-at-\n           \
    \   technology>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Haibin Song\n   Huawei\n   101 Software Avenue, Yuhua\
    \ District\n   Nanjing, Jiangsu Province  210012\n   China\n   EMail: haibin.song@huawei.com\n\
    \   Ning Zong\n   Huawei\n   101 Software Avenue, Yuhua District\n   Nanjing,\
    \ Jiangsu Province  210012\n   China\n   EMail: zongning@huawei.com\n   Y. Richard\
    \ Yang\n   Yale University\n   EMail: yry@cs.yale.edu\n   Richard Alimi\n   Google\n\
    \   EMail: ralimi@google.com\n"
