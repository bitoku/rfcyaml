- title: __initial_text__
  contents:
  - '                Architectural Principles of the Internet

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet and its architecture have grown in evolutionary fashion\n\
    \   from modest beginnings, rather than from a Grand Plan. While this\n   process\
    \ of evolution is one of the main reasons for the technology's\n   success, it\
    \ nevertheless seems useful to record a snapshot of the\n   current principles\
    \ of the Internet architecture. This is intended for\n   general guidance and\
    \ general interest, and is in no way intended to\n   be a formal or invariant\
    \ reference model.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1. Constant Change
  contents:
  - "1. Constant Change\n   In searching for Internet architectural principles, we\
    \ must remember\n   that technical change is continuous in the information technology\n\
    \   industry. The Internet reflects this.  Over the 25 years since the\n   ARPANET\
    \ started, various measures of the size of the Internet have\n   increased by\
    \ factors between 1000 (backbone speed) and 1000000\n   (number of hosts). In\
    \ this environment, some architectural principles\n   inevitably change.  Principles\
    \ that seemed inviolable a few years ago\n   are deprecated today. Principles\
    \ that seem sacred today will be\n   deprecated tomorrow. The principle of constant\
    \ change is perhaps the\n   only principle of the Internet that should survive\
    \ indefinitely.\n   The purpose of this document is not, therefore, to lay down\
    \ dogma\n   about how Internet protocols should be designed, or even about how\n\
    \   they should fit together. Rather, it is to convey various guidelines\n   that\
    \ have been found useful in the past, and that may be useful to\n   those designing\
    \ new protocols or evaluating such designs.\n   A good analogy for the development\
    \ of the Internet is that of\n   constantly renewing the individual streets and\
    \ buildings of a city,\n   rather than razing the city and rebuilding it. The\
    \ architectural\n   principles therefore aim to provide a framework for creating\n\
    \   cooperation and standards, as a small \"spanning set\" of rules that\n   generates\
    \ a large, varied and evolving space of technology.\n   Some current technical\
    \ triggers for change include the limits to the\n   scaling of IPv4, the fact\
    \ that gigabit/second networks and multimedia\n   present fundamentally new challenges,\
    \ and the need for quality of\n   service and security guarantees in the commercial\
    \ Internet.\n   As Lord Kelvin stated in 1895, \"Heavier-than-air flying machines\
    \ are\n   impossible.\" We would be foolish to imagine that the principles\n \
    \  listed below are more than a snapshot of our current understanding.\n"
- title: 2. Is there an Internet Architecture?
  contents:
  - "2. Is there an Internet Architecture?\n   2.1 Many members of the Internet community\
    \ would argue that there is\n   no architecture, but only a tradition, which was\
    \ not written down for\n   the first 25 years (or at least not by the IAB).  However,\
    \ in very\n   general terms, the community believes that the goal is connectivity,\n\
    \   the tool is the Internet Protocol, and the intelligence is end to end\n  \
    \ rather than hidden in the network.\n   The current exponential growth of the\
    \ network seems to show that\n   connectivity is its own reward, and is more valuable\
    \ than any\n   individual application such as mail or the World-Wide Web.  This\n\
    \   connectivity requires technical cooperation between service\n   providers,\
    \ and flourishes in the increasingly liberal and competitive\n   commercial telecommunications\
    \ environment.\n   The key to global connectivity is the inter-networking layer.\
    \  The\n   key to exploiting this layer over diverse hardware providing global\n\
    \   connectivity is the \"end to end argument\".\n   2.2 It is generally felt\
    \ that in an ideal situation there should be\n   one, and only one, protocol at\
    \ the Internet level.  This allows for\n   uniform and relatively seamless operations\
    \ in a competitive, multi-\n   vendor, multi-provider public network.  There can\
    \ of course be\n   multiple protocols to satisfy different requirements at other\
    \ levels,\n   and there are many successful examples of large private networks\
    \ with\n   multiple network layer protocols in use.\n   In practice, there are\
    \ at least two reasons why more than one network\n   layer protocol might be in\
    \ use on the public Internet. Firstly, there\n   can be a need for gradual transition\
    \ from one version of IP to\n   another.  Secondly, fundamentally new requirements\
    \ might lead to a\n   fundamentally new protocol.\n   The Internet level protocol\
    \ must be independent of the hardware\n   medium and hardware addressing.  This\
    \ approach allows the Internet to\n   exploit any new digital transmission technology\
    \ of any kind, and to\n   decouple its addressing mechanisms from the hardware.\
    \ It allows the\n   Internet to be the easy way to interconect fundamentally different\n\
    \   transmission media, and to offer a single platform for a wide variety\n  \
    \ of Information Infrastructure applications and services. There is a\n   good\
    \ exposition of this model, and other important fundemental\n   issues, in [Clark].\n\
    \   2.3 It is also generally felt that end-to-end functions can best be\n   realised\
    \ by end-to-end protocols.\n   The end-to-end argument is discussed in depth in\
    \ [Saltzer].  The\n    basic argument is that, as a first principle, certain required\
    \ end-\n   to-end functions can only be performed correctly by the end-systems\n\
    \   themselves. A specific case is that any network, however carefully\n   designed,\
    \ will be subject to failures of transmission at some\n   statistically determined\
    \ rate. The best way to cope with this is to\n   accept it, and give responsibility\
    \ for the integrity of communication\n   to the end systems. Another specific\
    \ case is end-to-end security.\n   To quote from [Saltzer], \"The function in\
    \ question can completely and\n   correctly be implemented only with the knowledge\
    \ and help of the\n   application standing at the endpoints of the communication\
    \ system.\n   Therefore, providing that questioned function as a feature of the\n\
    \   communication system itself is not possible. (Sometimes an incomplete\n  \
    \ version of the function provided by the communication system may be\n   useful\
    \ as a performance enhancement.\")\n   This principle has important consequences\
    \ if we require applications\n   to survive partial network failures. An end-to-end\
    \ protocol design\n   should not rely on the maintenance of state (i.e. information\
    \ about\n   the state of the end-to-end communication) inside the network. Such\n\
    \   state should be maintained only in the endpoints, in such a way that\n   the\
    \ state can only be destroyed when the endpoint itself breaks\n   (known as fate-sharing).\
    \ An immediate consequence of this is that\n   datagrams are better than classical\
    \ virtual circuits.  The network's\n   job is to transmit datagrams as efficiently\
    \ and flexibly as possible.\n   Everything else should be done at the fringes.\n\
    \   To perform its services, the network maintains some state\n   information:\
    \ routes, QoS guarantees that it makes, session\n   information where that is\
    \ used in header compression, compression\n   histories for data compression,\
    \ and the like. This state must be\n   self-healing; adaptive procedures or protocols\
    \ must exist to derive\n   and maintain that state, and change it when the topology\
    \ or activity\n   of the network changes. The volume of this state must be minimized,\n\
    \   and the loss of the state must not result in more than a temporary\n   denial\
    \ of service given that connectivity exists.  Manually\n   configured state must\
    \ be kept to an absolute minimum.\n   2.4 Fortunately, nobody owns the Internet,\
    \ there is no centralized\n   control, and nobody can turn it off. Its evolution\
    \ depends on rough\n   consensus about technical proposals, and on running code.\n\
    \   Engineering feed-back from real implementations is more important\n   than\
    \ any architectural principles.\n"
- title: 3. General Design Issues
  contents:
  - "3. General Design Issues\n   3.1 Heterogeneity is inevitable and must be supported\
    \ by design.\n   Multiple types of hardware must be allowed for, e.g. transmission\n\
    \   speeds differing by at least 7 orders of magnitude, various computer\n   word\
    \ lengths, and hosts ranging from memory-starved microprocessors\n   up to massively\
    \ parallel supercomputers. Multiple types of\n   application protocol must be\
    \ allowed for, ranging from the simplest\n   such as remote login up to the most\
    \ complex such as distributed\n   databases.\n   3.2 If there are several ways\
    \ of doing the same thing, choose one.\n   If a previous design, in the Internet\
    \ context or elsewhere, has\n   successfully solved the same problem, choose the\
    \ same solution unless\n   there is a good technical reason not to.  Duplication\
    \ of the same\n   protocol functionality should be avoided as far as possible,\
    \ without\n   of course using this argument to reject improvements.\n   3.3 All\
    \ designs must scale readily to very many nodes per site and to\n   many millions\
    \ of sites.\n   3.4 Performance and cost must be considered as well as functionality.\n\
    \   3.5 Keep it simple. When in doubt during design, choose the simplest\n   solution.\n\
    \   3.6 Modularity is good. If you can keep things separate, do so.\n   3.7 In\
    \ many cases it is better to adopt an almost complete solution\n   now, rather\
    \ than to wait until a perfect solution can be found.\n   3.8 Avoid options and\
    \ parameters whenever possible.  Any options and\n   parameters should be configured\
    \ or negotiated dynamically rather than\n   manually.\n   3.9 Be strict when sending\
    \ and tolerant when receiving.\n   Implementations must follow specifications\
    \ precisely when sending to\n   the network, and tolerate faulty input from the\
    \ network. When in\n   doubt, discard faulty input silently, without returning\
    \ an error\n   message unless this is required by the specification.\n   3.10\
    \ Be parsimonious with unsolicited packets, especially multicasts\n   and broadcasts.\n\
    \   3.11 Circular dependencies must be avoided.\n      For example, routing must\
    \ not depend on look-ups in the Domain\n      Name System (DNS), since the updating\
    \ of DNS servers depends on\n      successful routing.\n   3.12 Objects should\
    \ be self decribing (include type and size), within\n   reasonable limits. Only\
    \ type codes and other magic numbers assigned\n   by the Internet Assigned Numbers\
    \ Authority (IANA) may be used.\n   3.13 All specifications should use the same\
    \ terminology and notation,\n   and the same bit- and byte-order convention.\n\
    \   3.14 And perhaps most important: Nothing gets standardised until\n   there\
    \ are multiple instances of running code.\n"
- title: 4. Name and address issues
  contents:
  - "4. Name and address issues\n   4.1 Avoid any design that requires addresses to\
    \ be hard coded or\n   stored on non-volatile storage (except of course where\
    \ this is an\n   essential requirement as in a name server or configuration server).\n\
    \   In general, user applications should use names rather than addresses.\n  \
    \ 4.2 A single naming structure should be used.\n   4.3 Public (i.e. widely visible)\
    \ names should be in case-independent\n   ASCII.  Specifically, this refers to\
    \ DNS names, and to protocol\n   elements that are transmitted in text format.\n\
    \   4.4 Addresses must be unambiguous (unique within any scope where they\n  \
    \ may appear).\n   4.5 Upper layer protocols must be able to identify end-points\n\
    \   unambiguously. In practice today, this means that addresses must be\n   the\
    \ same at start and finish of transmission.\n"
- title: 5. External Issues
  contents:
  - "5. External Issues\n   5.1 Prefer unpatented technology, but if the best technology\
    \ is\n   patented and is available to all at reasonable terms, then\n   incorporation\
    \ of patented technology is acceptable.\n   5.2 The existence of export controls\
    \ on some aspects of Internet\n   technology is only of secondary importance in\
    \ choosing which\n   technology to adopt into the standards. All of the technology\n\
    \   required to implement Internet standards can be fabricated in each\n   country,\
    \ so world wide deployment of Internet technology does not\n   depend on its exportability\
    \ from any particular country or countries.\n   5.3 Any implementation which does\
    \ not include all of the required\n   components cannot claim conformance with\
    \ the standard.\n   5.4 Designs should be fully international, with support for\n\
    \   localisation (adaptation to local character sets). In particular,\n   there\
    \ should be a uniform approach to character set tagging for\n   information content.\n"
- title: 6. Related to Confidentiality and Authentication
  contents:
  - "6. Related to Confidentiality and Authentication\n   6.1 All designs must fit\
    \ into the IP security architecture.\n   6.2 It is highly desirable that Internet\
    \ carriers protect the privacy\n   and authenticity of all traffic, but this is\
    \ not a requirement of the\n   architecture.  Confidentiality and authentication\
    \ are the\n   responsibility of end users and must be implemented in the protocols\n\
    \   used by the end users. Endpoints should not depend on the\n   confidentiality\
    \ or integrity of the carriers. Carriers may choose to\n   provide some level\
    \ of protection, but this is secondary to the\n   primary responsibility of the\
    \ end users to protect themselves.\n   6.3 Wherever a cryptographic algorithm\
    \ is called for in a protocol,\n   the protocol should be designed to permit alternative\
    \ algorithms to\n   be used and the specific algorithm employed in a particular\n\
    \   implementation should be explicitly labeled. Official labels for\n   algorithms\
    \ are to be recorded by the IANA.\n   (It can be argued that this principle could\
    \ be generalised beyond the\n   security area.)\n   6.4 In choosing algorithms,\
    \ the algorithm should be one which is\n   widely regarded as strong enough to\
    \ serve the purpose. Among\n   alternatives all of which are strong enough, preference\
    \ should be\n   given to algorithms which have stood the test of time and which\
    \ are\n   not unnecessarily inefficient.\n   6.5 To ensure interoperation between\
    \ endpoints making use of security\n   services, one algorithm (or suite of algorithms)\
    \ should be mandated\n   to ensure the ability to negotiate a secure context between\n\
    \   implementations. Without this, implementations might otherwise not\n   have\
    \ an algorithm in common and not be able to communicate securely.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document is a collective work of the Internet community,\n\
    \   published by the Internet Architecture Board. Special thanks to Fred\n   Baker,\
    \ Noel Chiappa, Donald Eastlake, Frank Kastenholz, Neal\n   McBurnett, Masataka\
    \ Ohta, Jeff Schiller and Lansing Sloan.\n"
- title: References
  contents:
  - "References\n   Note that the references have been deliberately limited to two\n\
    \   fundamental papers on the Internet architecture.\n   [Clark] The Design Philosophy\
    \ of the DARPA Internet Protocols,\n   D.D.Clark, Proc SIGCOMM 88, ACM CCR Vol\
    \ 18, Number 4, August 1988,\n   pages 106-114 (reprinted in ACM CCR Vol 25, Number\
    \ 1, January 1995,\n   pages 102-111).\n   [Saltzer] End-To-End Arguments in System\
    \ Design, J.H. Saltzer,\n   D.P.Reed, D.D.Clark, ACM TOCS, Vol 2, Number 4, November\
    \ 1984, pp\n   277-288.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are discussed throughout this memo.\n"
- title: Editor's Address
  contents:
  - "Editor's Address\n   Brian E. Carpenter\n   Group Leader, Communications Systems\n\
    \   Computing and Networks Division\n   CERN\n   European Laboratory for Particle\
    \ Physics\n   1211 Geneva 23, Switzerland\n   Phone:  +41 22 767-4967\n   Fax:\
    \    +41 22 767-7155\n   EMail: brian@dxcoms.cern.ch\n"
