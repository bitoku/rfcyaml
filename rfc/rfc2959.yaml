- title: __initial_text__
  contents:
  - "                      Real-Time Transport Protocol\n                      Management\
    \ Information Base\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n\
    \   for use with network management protocols in the Internet community.\n   In\
    \ particular, it defines objects for managing Real-Time Transport\n   Protocol\
    \ (RTP) systems (RFC1889).\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1.  The SNMP Management Framework
  contents:
  - "1.  The SNMP Management Framework\n   The SNMP Management Framework presently\
    \ consists of five major\n   components:\n      o  An overall architecture, described\
    \ in RFC 2571 [RFC2571].\n      o  Mechanisms for describing and naming objects\
    \ and events for the\n         purpose of management.  The first version of this\
    \ Structure of\n         Management Information (SMI) is called SMIv1 and described\
    \ in\n         STD 16, RFC 1155 [RFC1155], STD 16, RFC 1212 [RFC1212] and RFC\n\
    \         1215 [RFC1215].  The second version, called SMIv2, is described\n  \
    \       in STD 58, RFC 2578 [RFC2578], RFC 2579 [RFC2579] and RFC 2580\n     \
    \    [RFC2580].\n      o  Message protocols for transferring management information.\
    \  The\n         first version of the SNMP message protocol is called SNMPv1 and\n\
    \         described in STD 15, RFC 1157 [RFC1157].  A second version of\n    \
    \     the SNMP message protocol, which is not an Internet standards\n        \
    \ track protocol, is called SNMPv2c and described in RFC 1901\n         [RFC1901]\
    \ and RFC 1906 [RFC1906].  The third version of the\n         message protocol\
    \ is called SNMPv3 and described in RFC 1906\n         [RFC1906], RFC 2572 [RFC2572]\
    \ and RFC 2574 [RFC2574].\n      o  Protocol operations for accessing management\
    \ information.  The\n         first set of protocol operations and associated\
    \ PDU formats is\n         described in STD 15, RFC 1157 [RFC1157].  A second\
    \ set of\n         protocol operations and associated PDU formats is described\
    \ in\n         RFC 1905 [RFC1905].\n      o  A set of fundamental applications\
    \ described in RFC 2573\n         [RFC2573] and the view-based access control\
    \ mechanism described\n         in RFC 2575 [RFC2575].\n   A more detailed introduction\
    \ to the current SNMP Management Framework\n   can be found in RFC 2570 [RFC2570].\n\
    \   Managed objects are accessed via a virtual information store, termed\n   the\
    \ Management Information Base or MIB.  Objects in the MIB are\n   defined using\
    \ the mechanisms defined in the SMI.\n   This memo specifies a MIB module that\
    \ is compliant to the SMIv2.  A\n   MIB conforming to the SMIv1 can be produced\
    \ through the appropriate\n   translations.  The resulting translated MIB must\
    \ be semantically\n   equivalent, except where objects or events are omitted because\
    \ no\n   translation is possible (use of Counter64).  Some machine readable\n\
    \   information in SMIv2 will be converted into textual descriptions in\n   SMIv1\
    \ during the translation process.  However, this loss of machine\n   readable\
    \ information is not considered to change the semantics of the\n   MIB.\n"
- title: 2. Overview
  contents:
  - "2. Overview\n   An \"RTP System\" may be a host end-system that runs an application\n\
    \   program that sends or receives RTP data packets, or it may be an\n   intermediate-system\
    \ that forwards RTP packets.  RTP Control Protocol\n   (RTCP) packets are sent\
    \ by senders and receivers to convey\n   information about RTP packet transmission\
    \ and reception [RFC1889].\n   RTP monitors may collect RTCP information on senders\
    \ and receivers to\n   and from an RTP host or intermediate-system.\n   The key\
    \ words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"\
    SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n\
    \   document are to be interpreted as described in RFC 2119.\n"
- title: 2.1 Components
  contents:
  - "2.1 Components\n   The RTP MIB is structured around \"Session,\" \"Receiver\"\
    \ and \"Sender\"\n   conceptual abstractions.\n   2.1.1  An \"RTP Session\" is\
    \ the \"...association of participants\n   communicating with RTP.  For each participant,\
    \ the session is defined\n   by a particular pair of destination transport addresses\
    \ (one network\n   address plus a port pair for RTP and RTCP).  The destination\n\
    \   transport addresses may be common for all participants, as in the\n   case\
    \ of IP multicast, or may be different for each, as in the case of\n   individual\
    \ unicast addresses plus a common port pair,\" as defined in\n   section 3 of\
    \ [RFC1889].\n   2.1.2 A \"Sender\" is identified within an RTP session by a 32-bit\n\
    \   numeric \"Synchronization Source,\" or \"SSRC\", value and is \"...the\n \
    \  source of a stream of RTP packets\" as defined in section 3 of\n   [RFC1889].\
    \  The sender is also a source of RTCP Sender Report packets\n   as specified\
    \ in section 6 of [RFC1889].\n   2.1.3 A \"Receiver\" of a \"stream of RTP packets\"\
    \ can be a unicast or\n   multicast Receiver as described in 2.1.1, above.  An\
    \ RTP Receiver has\n   an SSRC value that is unique to the session.  An RTP Receiver\
    \ is a\n   source of RTCP Receiver Reports as specified in section 6 of\n   [RFC1889].\n"
- title: 2.2 Applicability of the MIB to RTP System Implementations
  contents:
  - "2.2 Applicability of the MIB to RTP System Implementations\n   The RTP MIB may\
    \ be used in two types of RTP implementations, RTP Host\n   Systems (end systems)\
    \ and RTP Monitors, see section 3 of [RFC1889].\n   Use of the RTP MIB for RTP\
    \ Translators and Mixers, as defined in\n   section 7 of [RFC1889], is for further\
    \ study.\n   2.2.1 RTP host Systems are end-systems that may use the RTP MIB to\n\
    \   collect RTP session and stream data that the host is sending or\n   receiving;\
    \ these data may be used by a network manager to detect and\n   diagnose faults\
    \ that occur over the lifetime of an RTP session as in\n   a \"help-desk\" scenario.\n\
    \   2.2.2 RTP Monitors of multicast RTP sessions may be third-party or\n   may\
    \ be located in the RTP host.  RTP Monitors may use the RTP MIB to\n   collect\
    \ RTP session and stream statistical data; these data may be\n   used by a network\
    \ manager for capacity planning and other network-\n   management purposes.  An\
    \ RTP Monitor may use the RTP MIB to collect\n   data to permit a network manager\
    \ to detect and diagnose faults in RTP\n   sessions or to permit a network manger\
    \ to configure its operation.\n   2.2.3 Many host systems will want to keep track\
    \ of streams beyond\n   what they are sending and receiving.  In a host monitor\
    \ system, a\n   host agent would use RTP data from the host to maintain data about\n\
    \   streams it is sending and receiving, and RTCP data to collect data\n   about\
    \ other hosts in the session.  For example, an agent for an RTP\n   host that\
    \ is sending a stream would use data from its RTP system to\n   maintain the rtpSenderTable,\
    \ but it may want to maintain a\n   rtpRcvrTable for endpoints that are receiving\
    \ its stream.  To do this\n   the RTP agent will collect RTCP data from the receivers\
    \ of its stream\n   to build the rtpRcvrTable.  A host monitor system MUST set\
    \ the\n   rtpSessionMonitor object to 'true(1)', but it does not have to accept\n\
    \   management operations that create and destroy rows in its\n   rtpSessionTable.\n"
- title: 2.3  The Structure of the RTP MIB
  contents:
  - "2.3  The Structure of the RTP MIB\n   There are six tables in the RTP MIB.  The\
    \ rtpSessionTable contains\n   objects that describe active sessions at the host,\
    \ or monitor.  The\n   rtpSenderTable contains information about senders to the\
    \ RTP session.\n   The rtpRcvrTable contains information about receivers of RTP\
    \ session\n   data.  The rtpSessionInverseTable, rtpSenderInverseTable, and\n\
    \   rtpRcvrInverseTable contain information to efficiently find indexes\n   into\
    \ the rtpSessionTable, rtpSenderTable, and rtpRcvrTable,\n   respectively.\n \
    \  The reverse lookup tables (rtpSessionInverseTable,\n   rtpSenderInverseTable,\
    \ and rtpRcvrInverseTable) are optional tables\n   to help management applications\
    \ efficiently access conceptual rows in\n   other tables.  Implementors of this\
    \ MIB SHOULD implement these tables\n   for multicast RTP sessions when table\
    \ indexes (rtpSessionIndex of\n   rtpSessionTable, rtpSenderSSRC of rtpSenderTable,\
    \ and the SSRC pair\n   in the rtpRcvrTable) are not available from other MIBs.\
    \  Otherwise,\n   the management application may be forced to perform expensive\
    \ tree\n   walks through large numbers of sessions, senders, or receivers.\n \
    \  For any particular RTP session, the rtpSessionMonitor object\n   indicates\
    \ whether remote senders or receivers to the RTP session are\n   to be monitored.\
    \  If rtpSessionMonitor is true(1) then senders and\n   receivers to the session\
    \ MUST be monitored with entries in the\n   rtpSenderTable and rtpRcvrTable. \
    \ RTP sessions are monitored by the\n   RTP agent that updates rtpSenderTable\
    \ and rtpRcvrTable objects with\n   information from RTCP reports from remote\
    \ senders or remote receivers\n   respectively.\n   rtpSessionNewIndex is a global\
    \ object that permits a network-\n   management application to obtain a unique\
    \ index for conceptual row\n   creation in the rtpSessionTable.  In this way the\
    \ SNMP Set operation\n   MAY be used to configure a monitor.\n"
- title: 3. Definitions
  contents:
  - '3. Definitions

    '
- title: RTP-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'RTP-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n       Counter32, Counter64, Gauge32, mib-2, Integer32,\n       MODULE-IDENTITY,\n\
    \       OBJECT-TYPE, Unsigned32                     FROM SNMPv2-SMI\n       RowStatus,\
    \ TAddress,\n       TDomain, TestAndIncr,\n       TimeStamp, TruthValue      \
    \                 FROM SNMPv2-TC\n       OBJECT-GROUP, MODULE-COMPLIANCE     \
    \        FROM SNMPv2-CONF\n       Utf8String                                 \
    \ FROM SYSAPPL-MIB\n       InterfaceIndex                              FROM IF-MIB;\n"
- title: rtpMIB MODULE-IDENTITY
  contents:
  - "rtpMIB MODULE-IDENTITY\n    LAST-UPDATED \"200010020000Z\"  -- 2 October 2000\n\
    \    ORGANIZATION\n                 \"IETF AVT Working Group\n    Email:   rem-conf@es.net\"\
    \n    CONTACT-INFO\n            \"Mark Baugher\n    Postal: Intel Corporation\n\
    \            2111 NE 25th Avenue\n            Hillsboro, OR   97124\n        \
    \    United States\n    Tel:    +1 503 466 8406\n    Email:  mbaugher@passedge.com\n\
    \            Bill Strahm\n    Postal: Intel Corporation\n            2111 NE 25th\
    \ Avenue\n            Hillsboro, OR   97124\n            United States\n    Tel:\
    \    +1 503 264 4632\n    Email:  bill.strahm@intel.com\n            Irina Suconick\n\
    \    Postal: Ennovate Networks\n            60 Codman Hill Rd.,\n            Boxboro,\
    \ Ma 01719\n    Tel:    +1 781-505-2155\n    Email:  irina@ennovatenetworks.com\"\
    \n        DESCRIPTION\n        \"The managed objects of RTP systems.  The MIB\
    \ is\n        structured around three types of information.\n        1. General\
    \ information about RTP sessions such\n           as the session address.\n  \
    \      2. Information about RTP streams being sent to\n           an RTP session\
    \ by a particular sender.\n        3. Information about RTP streams received on\
    \ an\n           RTP session by a particular receiver from a\n           particular\
    \ sender.\n         There are two types of RTP Systems, RTP hosts and\n      \
    \   RTP monitors.  As described below, certain objects\n         are unique to\
    \ a particular type of RTP System.   An\n         RTP host may also function as\
    \ an RTP monitor.\n         Refer to RFC 1889, 'RTP: A Transport Protocol for\n\
    \         Real-Time Applications,' section 3.0, for definitions.\"\n   REVISION\
    \     \"200010020000Z\"  -- 2 October 2000\n   DESCRIPTION  \"Initial version\
    \ of this MIB.\n                 Published as RFC 2959.\"\n"
- title: ::= { mib-2 87 }
  contents:
  - '::= { mib-2 87 }

    '
- title: --
  contents:
  - '--

    '
- title: -- OBJECTS
  contents:
  - '-- OBJECTS

    '
- title: --
  contents:
  - '--

    '
- title: rtpMIBObjects OBJECT IDENTIFIER ::= { rtpMIB 1 }
  contents:
  - 'rtpMIBObjects OBJECT IDENTIFIER ::= { rtpMIB 1 }

    '
- title: rtpConformance OBJECT IDENTIFIER ::= { rtpMIB 2 }
  contents:
  - 'rtpConformance OBJECT IDENTIFIER ::= { rtpMIB 2 }

    '
- title: --
  contents:
  - '--

    '
- title: -- SESSION NEW INDEX
  contents:
  - '-- SESSION NEW INDEX

    '
- title: --
  contents:
  - '--

    '
- title: rtpSessionNewIndex OBJECT-TYPE
  contents:
  - "rtpSessionNewIndex OBJECT-TYPE\n    SYNTAX          TestAndIncr\n    MAX-ACCESS\
    \      read-write\n    STATUS          current\n    DESCRIPTION\n      \"This\
    \  object  is  used  to  assign  values  to rtpSessionIndex\n       as described\
    \ in 'Textual Conventions  for  SMIv2'.  For an RTP\n       system that supports\
    \ the creation of rows, the  network manager\n       would read the  object, \
    \ and  then write the value back in\n       the Set that creates a new instance\
    \  of rtpSessionEntry.   If\n       the  Set  fails with the code 'inconsistentValue,'\
    \ then the\n       process must be repeated; If the Set succeeds, then the object\n\
    \       is incremented, and the  new  instance  is created according to\n    \
    \   the manager's directions.  However, if the RTP agent is not\n       acting\
    \ as a monitor, only the RTP agent may create conceptual\n       rows in the RTP\
    \ session table.\"\n    ::= { rtpMIBObjects 1 }\n"
- title: --
  contents:
  - '--

    '
- title: -- SESSION INVERSE TABLE
  contents:
  - '-- SESSION INVERSE TABLE

    '
- title: --
  contents:
  - '--

    '
- title: rtpSessionInverseTable OBJECT-TYPE
  contents:
  - "rtpSessionInverseTable OBJECT-TYPE\n    SYNTAX          SEQUENCE OF RtpSessionInverseEntry\n\
    \    MAX-ACCESS      not-accessible\n    STATUS          current\n    DESCRIPTION\n\
    \      \"Maps rtpSessionDomain, rtpSessionRemAddr, and rtpSessionLocAddr\n   \
    \    TAddress pairs to one or more rtpSessionIndex values, each\n       describing\
    \ a row in the rtpSessionTable.  This makes it possible\n       to retrieve the\
    \ row(s) in the rtpSessionTable corresponding to a\n       given session without\
    \ having to walk the entire (potentially\n       large) table.\"\n    ::= { rtpMIBObjects\
    \ 2 }\n"
- title: rtpSessionInverseEntry OBJECT-TYPE
  contents:
  - "rtpSessionInverseEntry OBJECT-TYPE\n    SYNTAX          RtpSessionInverseEntry\n\
    \    MAX-ACCESS      not-accessible\n    STATUS          current\n    DESCRIPTION\n\
    \      \"Each entry corresponds to exactly one entry in the\n       rtpSessionTable\
    \ - the entry containing the tuple,\n       rtpSessionDomain, rtpSessionRemAddr,\
    \ rtpSessionLocAddr\n       and rtpSessionIndex.\"\n    INDEX { rtpSessionDomain,\
    \ rtpSessionRemAddr, rtpSessionLocAddr,\n            rtpSessionIndex }\n    ::=\
    \ { rtpSessionInverseTable 1 }\n"
- title: RtpSessionInverseEntry ::= SEQUENCE {
  contents:
  - "RtpSessionInverseEntry ::= SEQUENCE {\n        rtpSessionInverseStartTime   \
    \  TimeStamp\n        }\n"
- title: rtpSessionInverseStartTime OBJECT-TYPE
  contents:
  - "rtpSessionInverseStartTime OBJECT-TYPE\n    SYNTAX          TimeStamp\n    MAX-ACCESS\
    \      read-only\n    STATUS          current\n    DESCRIPTION\n      \"The value\
    \ of SysUpTime at the time that this row was\n       created.\"\n    ::= { rtpSessionInverseEntry\
    \ 1 }\n"
- title: --
  contents:
  - '--

    '
- title: --      SESSION TABLE
  contents:
  - '--      SESSION TABLE

    '
- title: --
  contents:
  - '--

    '
- title: rtpSessionTable OBJECT-TYPE
  contents:
  - "rtpSessionTable OBJECT-TYPE\n    SYNTAX          SEQUENCE OF RtpSessionEntry\n\
    \    MAX-ACCESS      not-accessible\n    STATUS          current\n    DESCRIPTION\n\
    \          \"There's one entry in rtpSessionTable for each RTP session\n     \
    \     on which packets are being sent, received, and/or\n          monitored.\"\
    \n    ::= { rtpMIBObjects 3 }\n"
- title: rtpSessionEntry OBJECT-TYPE
  contents:
  - "rtpSessionEntry OBJECT-TYPE\n    SYNTAX          RtpSessionEntry\n    MAX-ACCESS\
    \      not-accessible\n    STATUS          current\n    DESCRIPTION\n      \"\
    Data in rtpSessionTable uniquely identify an RTP session.  A\n       host RTP\
    \ agent MUST create a read-only row for each session to\n       which packets\
    \ are being sent or received.  Rows MUST be created\n       by the RTP Agent at\
    \ the start of a session when one or more\n       senders or receivers are observed.\
    \  Rows created by an RTP agent\n       MUST be deleted when the session is over\
    \ and there are no\n       rtpRcvrEntry and no rtpSenderEntry for this session.\
    \  An RTP\n       session SHOULD be monitored to create management information\
    \ on\n       all RTP streams being sent or received when the\n       rtpSessionMonitor\
    \ has the TruthValue of 'true(1)'.  An RTP\n       monitor SHOULD permit row creation\
    \ with the side effect of\n       causing the RTP System to join the multicast\
    \ session for the\n       purposes of gathering management information  (additional\n\
    \       conceptual rows are created in the rtpRcvrTable and\n       rtpSenderTable).\
    \  Thus, rtpSessionTable rows SHOULD be created\n       for RTP session monitoring\
    \ purposes.  Rows created by a\n       management application SHOULD be deleted\
    \ via SNMP operations by\n       management applications.  Rows created by management\
    \ operations\n       are deleted by management operations by setting\n       rtpSessionRowStatus\
    \ to 'destroy(6)'.\"\n    INDEX { rtpSessionIndex }\n    ::= { rtpSessionTable\
    \ 1 }\n"
- title: RtpSessionEntry ::= SEQUENCE {
  contents:
  - "RtpSessionEntry ::= SEQUENCE {\n        rtpSessionIndex         Integer32,\n\
    \        rtpSessionDomain        TDomain,\n        rtpSessionRemAddr       TAddress,\n\
    \        rtpSessionLocAddr       TAddress,\n        rtpSessionIfIndex       InterfaceIndex,\n\
    \        rtpSessionSenderJoins   Counter32,\n        rtpSessionReceiverJoins Counter32,\n\
    \        rtpSessionByes          Counter32,\n        rtpSessionStartTime     TimeStamp,\n\
    \        rtpSessionMonitor       TruthValue,\n        rtpSessionRowStatus    \
    \ RowStatus\n        }\n"
- title: rtpSessionIndex OBJECT-TYPE
  contents:
  - "rtpSessionIndex OBJECT-TYPE\n    SYNTAX          Integer32 (1..2147483647)\n\
    \    MAX-ACCESS      not-accessible\n    STATUS          current\n    DESCRIPTION\n\
    \      \"The index of the conceptual row which is for SNMP purposes\n       only\
    \ and has no relation to any protocol value.  There is\n       no requirement\
    \ that these rows are created or maintained\n       sequentially.\"\n    ::= {\
    \ rtpSessionEntry 1 }\n"
- title: rtpSessionDomain OBJECT-TYPE
  contents:
  - "rtpSessionDomain OBJECT-TYPE\n    SYNTAX          TDomain\n    MAX-ACCESS   \
    \   read-create\n    STATUS          current\n    DESCRIPTION\n      \"The transport-layer\
    \ protocol used for sending or receiving\n       the stream of RTP data packets\
    \ on this session.\n       Cannot be changed if rtpSessionRowStatus is 'active'.\"\
    \n    ::= { rtpSessionEntry 2 }\n"
- title: rtpSessionRemAddr OBJECT-TYPE
  contents:
  - "rtpSessionRemAddr OBJECT-TYPE\n    SYNTAX          TAddress\n    MAX-ACCESS \
    \     read-create\n    STATUS          current\n    DESCRIPTION\n      \"The address\
    \ to which RTP packets are sent by the RTP system.\n      In an IP multicast RTP\
    \ session, this is the single address used\n      by all senders and receivers\
    \ of RTP session data.  In a unicast\n      RTP session this is the unicast address\
    \ of the remote RTP system.\n      'The destination address pair may be common\
    \ for all participants,\n      as in the case of IP multicast, or may be different\
    \ for each, as\n      in the case of individual unicast network address pairs.'\
    \  See\n      RFC 1889, 'RTP: A Transport Protocol for Real-Time Applications,'\n\
    \      sec. 3.  The transport service is identified by rtpSessionDomain.\n   \
    \   For snmpUDPDomain, this is an IP address and even-numbered UDP\n      Port\
    \ with the RTCP being sent on the next higher odd-numbered\n      port, see RFC\
    \ 1889, sec. 5.\"\n    ::= { rtpSessionEntry 3 }\n"
- title: rtpSessionLocAddr OBJECT-TYPE
  contents:
  - "rtpSessionLocAddr OBJECT-TYPE\n    SYNTAX          TAddress\n    MAX-ACCESS \
    \     read-only\n    STATUS          current\n    DESCRIPTION\n      \"The local\
    \ address used by the RTP system.  In an IP multicast\n       RTP session, rtpSessionRemAddr\
    \ will be the same IP multicast\n       address as rtpSessionLocAddr.  In a unicast\
    \ RTP session,\n       rtpSessionRemAddr and rtpSessionLocAddr will have different\n\
    \       unicast addresses.  See RFC 1889, 'RTP: A Transport Protocol for\n   \
    \    Real-Time Applications,' sec. 3.  The transport service is\n       identified\
    \ by rtpSessionDomain.  For snmpUDPDomain, this is an IP\n       address and even-numbered\
    \ UDP Port with the RTCP being sent on\n       the next higher odd-numbered port,\
    \ see RFC 1889, sec. 5.\"\n    ::= { rtpSessionEntry 4 }\n"
- title: rtpSessionIfIndex OBJECT-TYPE
  contents:
  - "rtpSessionIfIndex OBJECT-TYPE\n    SYNTAX          InterfaceIndex\n    MAX-ACCESS\
    \      read-create\n    STATUS          current\n    DESCRIPTION\n     \"The ifIndex\
    \ value is set to the corresponding value\n      from IF-MIB (See RFC 2233, 'The\
    \ Interfaces Group MIB using\n      SMIv2').  This is the interface that the RTP\
    \ stream is being sent\n      to or received from, or in the case of an RTP Monitor\
    \ the\n      interface that RTCP packets will be received on.  Cannot be\n   \
    \   changed if rtpSessionRowStatus is 'active'.\"\n    ::= { rtpSessionEntry 5\
    \ }\n"
- title: rtpSessionSenderJoins OBJECT-TYPE
  contents:
  - "rtpSessionSenderJoins OBJECT-TYPE\n    SYNTAX          Counter32\n    MAX-ACCESS\
    \      read-only\n    STATUS          current\n    DESCRIPTION\n      \"The number\
    \ of senders that have been observed to have\n       joined the session since\
    \ this conceptual row was created\n       (rtpSessionStartTime).  A sender 'joins'\
    \ an RTP\n       session by sending to it.  Senders that leave and then\n    \
    \   re-join following an RTCP BYE (see RFC 1889, 'RTP: A\n       Transport Protocol\
    \ for Real-Time Applications,' sec. 6.6)\n       or session timeout may be counted\
    \ twice.  Every time a new\n       RTP sender is detected either using RTP or\
    \ RTCP, this counter\n       is incremented.\"\n    ::= { rtpSessionEntry 6 }\n"
- title: rtpSessionReceiverJoins OBJECT-TYPE
  contents:
  - "rtpSessionReceiverJoins OBJECT-TYPE\n    SYNTAX          Counter32\n    MAX-ACCESS\
    \      read-only\n    STATUS          current\n    DESCRIPTION\n      \"The number\
    \ of receivers that have been been observed to\n       have joined this session\
    \ since this conceptual row was\n       created (rtpSessionStartTime).  A receiver\
    \ 'joins' an RTP\n       session by sending RTCP Receiver Reports to the session.\n\
    \       Receivers that leave and then re-join following an RTCP BYE\n       (see\
    \ RFC 1889, 'RTP: A Transport Protocol for Real-Time\n       Applications,' sec.\
    \ 6.6) or session timeout may be counted\n       twice.\"\n    ::= { rtpSessionEntry\
    \ 7 }\n"
- title: rtpSessionByes OBJECT-TYPE
  contents:
  - "rtpSessionByes OBJECT-TYPE\n    SYNTAX          Counter32\n    MAX-ACCESS   \
    \   read-only\n    STATUS          current\n    DESCRIPTION\n      \"A count of\
    \ RTCP BYE (see RFC 1889, 'RTP: A Transport\n       Protocol for Real-Time Applications,'\
    \ sec. 6.6) messages\n       received by this entity.\"\n    ::= { rtpSessionEntry\
    \ 8 }\n"
- title: rtpSessionStartTime OBJECT-TYPE
  contents:
  - "rtpSessionStartTime OBJECT-TYPE\n    SYNTAX          TimeStamp\n    MAX-ACCESS\
    \      read-only\n    STATUS          current\n    DESCRIPTION\n      \"The value\
    \ of SysUpTime at the time that this row was\n       created.\"\n    ::= { rtpSessionEntry\
    \ 9 }\n"
- title: rtpSessionMonitor OBJECT-TYPE
  contents:
  - "rtpSessionMonitor OBJECT-TYPE\n    SYNTAX          TruthValue\n    MAX-ACCESS\
    \      read-only\n    STATUS          current\n    DESCRIPTION\n      \"Boolean,\
    \ Set to 'true(1)' if remote senders or receivers in\n       addition to the local\
    \ RTP System are to be monitored using RTCP.\n       RTP Monitors MUST initialize\
    \ to 'true(1)' and RTP Hosts SHOULD\n       initialize this 'false(2)'.  Note\
    \ that because 'host monitor'\n       systems are receiving RTCP from their remote\
    \ participants they\n       MUST set this value to 'true(1)'.\"\n    ::= { rtpSessionEntry\
    \ 10 }\n"
- title: rtpSessionRowStatus OBJECT-TYPE
  contents:
  - "rtpSessionRowStatus OBJECT-TYPE\n    SYNTAX          RowStatus\n    MAX-ACCESS\
    \      read-create\n    STATUS          current\n    DESCRIPTION\n      \"Value\
    \ of 'active' when RTP or RTCP messages are being\n       sent or received by\
    \ an RTP System.  A newly-created\n       conceptual row must have the all read-create\
    \ objects\n       initialized before becoming 'active'.\n       A conceptual row\
    \ that is in the 'notReady' or 'notInService'\n       state MAY be removed after\
    \ 5  minutes.\"\n    ::= { rtpSessionEntry 11 }\n"
- title: --
  contents:
  - '--

    '
- title: -- SENDER INVERSE TABLE
  contents:
  - '-- SENDER INVERSE TABLE

    '
- title: --
  contents:
  - '--

    '
- title: rtpSenderInverseTable OBJECT-TYPE
  contents:
  - "rtpSenderInverseTable OBJECT-TYPE\n    SYNTAX          SEQUENCE OF RtpSenderInverseEntry\n\
    \    MAX-ACCESS      not-accessible\n    STATUS          current\n    DESCRIPTION\n\
    \      \"Maps rtpSenderAddr, rtpSessionIndex, to the rtpSenderSSRC\n       index\
    \ of the rtpSenderTable.  This table allows management\n       applications to\
    \ find entries sorted by rtpSenderAddr rather than\n       sorted by rtpSessionIndex.\
    \  Given the rtpSessionDomain and\n       rtpSenderAddr, a set of rtpSessionIndex\
    \ and rtpSenderSSRC values\n       can be returned from a tree walk.  When rtpSessionIndex\
    \ is\n       specified in the SNMP Get-Next operations, one or more\n       rtpSenderSSRC\
    \ values may be returned.\"\n    ::= { rtpMIBObjects 4 }\n"
- title: rtpSenderInverseEntry OBJECT-TYPE
  contents:
  - "rtpSenderInverseEntry OBJECT-TYPE\n    SYNTAX          RtpSenderInverseEntry\n\
    \    MAX-ACCESS      not-accessible\n    STATUS          current\n    DESCRIPTION\n\
    \      \"Each entry corresponds to exactly one entry in the\n       rtpSenderTable\
    \ - the entry containing the index pair,\n       rtpSessionIndex, rtpSenderSSRC.\"\
    \n    INDEX { rtpSessionDomain, rtpSenderAddr, rtpSessionIndex,\n            rtpSenderSSRC\
    \ }\n    ::= { rtpSenderInverseTable 1 }\n"
- title: RtpSenderInverseEntry ::= SEQUENCE {
  contents:
  - "RtpSenderInverseEntry ::= SEQUENCE {\n        rtpSenderInverseStartTime     TimeStamp\n\
    \        }\n"
- title: rtpSenderInverseStartTime OBJECT-TYPE
  contents:
  - "rtpSenderInverseStartTime OBJECT-TYPE\n    SYNTAX          TimeStamp\n    MAX-ACCESS\
    \      read-only\n    STATUS          current\n    DESCRIPTION\n      \"The value\
    \ of SysUpTime at the time that this row was\n       created.\"\n    ::= { rtpSenderInverseEntry\
    \ 1 }\n"
- title: --
  contents:
  - '--

    '
- title: --  SENDERS TABLE
  contents:
  - '--  SENDERS TABLE

    '
- title: --
  contents:
  - '--

    '
- title: rtpSenderTable OBJECT-TYPE
  contents:
  - "rtpSenderTable OBJECT-TYPE\n    SYNTAX          SEQUENCE OF RtpSenderEntry\n\
    \    MAX-ACCESS      not-accessible\n    STATUS          current\n    DESCRIPTION\n\
    \      \"Table of information about a sender or senders to an RTP\n       Session.\
    \ RTP sending hosts MUST have an entry in this table\n       for each stream being\
    \ sent.  RTP receiving hosts MAY have an\n       entry in this table for each\
    \ sending stream being received by\n       this host.  RTP monitors MUST create\
    \ an entry for each observed\n       sender to a multicast RTP Session as a side-effect\
    \ when a\n       conceptual row in the rtpSessionTable is made 'active' by a\n\
    \       manager.\"\n    ::= { rtpMIBObjects 5 }\n"
- title: rtpSenderEntry OBJECT-TYPE
  contents:
  - "rtpSenderEntry OBJECT-TYPE\n    SYNTAX          RtpSenderEntry\n    MAX-ACCESS\
    \      not-accessible\n    STATUS          current\n    DESCRIPTION\n      \"\
    Each entry contains information from a single RTP Sender\n       Synchronization\
    \ Source (SSRC, see RFC 1889 'RTP: A Transport\n       Protocol for Real-Time\
    \ Applications' sec.6).  The session is\n       identified to the the SNMP entity\
    \ by rtpSessionIndex.\n       Rows are removed by the RTP agent when a BYE is\
    \ received\n       from the sender or when the sender times out (see RFC\n   \
    \    1889, Sec. 6.2.1) or when the rtpSessionEntry is deleted.\"\n    INDEX {\
    \ rtpSessionIndex, rtpSenderSSRC }\n    ::= { rtpSenderTable 1 }\n"
- title: RtpSenderEntry ::= SEQUENCE {
  contents:
  - "RtpSenderEntry ::= SEQUENCE {\n        rtpSenderSSRC           Unsigned32,\n\
    \        rtpSenderCNAME          Utf8String,\n        rtpSenderAddr          \
    \ TAddress,\n        rtpSenderPackets        Counter64,\n        rtpSenderOctets\
    \         Counter64,\n        rtpSenderTool           Utf8String,\n        rtpSenderSRs\
    \            Counter32,\n        rtpSenderSRTime         TimeStamp,\n        rtpSenderPT\
    \             INTEGER,\n        rtpSenderStartTime      TimeStamp\n        }\n"
- title: rtpSenderSSRC OBJECT-TYPE
  contents:
  - "rtpSenderSSRC OBJECT-TYPE\n    SYNTAX          Unsigned32\n    MAX-ACCESS   \
    \   not-accessible\n    STATUS          current\n    DESCRIPTION\n      \"The\
    \ RTP SSRC, or synchronization source identifier of the\n       sender.  The RTP\
    \ session address plus an SSRC uniquely\n       identify a sender to an RTP session\
    \ (see RFC 1889, 'RTP: A\n       Transport Protocol for Real-Time Applications'\
    \ sec.3).\"\n    ::= { rtpSenderEntry 1 }\n"
- title: rtpSenderCNAME OBJECT-TYPE
  contents:
  - "rtpSenderCNAME OBJECT-TYPE\n    SYNTAX          Utf8String\n    MAX-ACCESS  \
    \    read-only\n    STATUS          current\n    DESCRIPTION\n      \"The RTP\
    \ canonical name of the sender.\"\n    ::= { rtpSenderEntry 2 }\n"
- title: rtpSenderAddr OBJECT-TYPE
  contents:
  - "rtpSenderAddr OBJECT-TYPE\n    SYNTAX          TAddress\n    MAX-ACCESS     \
    \ read-only\n    STATUS          current\n    DESCRIPTION\n      \"The unicast\
    \ transport source address of the sender.  In the\n       case of an RTP Monitor\
    \ this address is the address that the\n       sender is using to send its RTCP\
    \ Sender Reports.\"\n    ::= { rtpSenderEntry 3 }\n"
- title: rtpSenderPackets OBJECT-TYPE
  contents:
  - "rtpSenderPackets OBJECT-TYPE\n    SYNTAX          Counter64\n    MAX-ACCESS \
    \     read-only\n    STATUS          current\n    DESCRIPTION\n      \"Count of\
    \ RTP packets sent by this sender, or observed by\n       an RTP monitor, since\
    \ rtpSenderStartTime.\"\n    ::= { rtpSenderEntry 4 }\n"
- title: rtpSenderOctets OBJECT-TYPE
  contents:
  - "rtpSenderOctets OBJECT-TYPE\n    SYNTAX          Counter64\n    MAX-ACCESS  \
    \    read-only\n    STATUS          current\n    DESCRIPTION\n      \"Count of\
    \ non-header RTP octets sent by this sender, or observed\n       by an RTP monitor,\
    \ since rtpSenderStartTime.\"\n    ::= { rtpSenderEntry 5 }\n"
- title: rtpSenderTool OBJECT-TYPE
  contents:
  - "rtpSenderTool OBJECT-TYPE\n    SYNTAX          Utf8String (SIZE(0..127))\n  \
    \  MAX-ACCESS      read-only\n    STATUS          current\n    DESCRIPTION\n \
    \     \"Name of the application program source of the stream.\"\n    ::= { rtpSenderEntry\
    \ 6 }\n"
- title: rtpSenderSRs OBJECT-TYPE
  contents:
  - "rtpSenderSRs OBJECT-TYPE\n    SYNTAX          Counter32\n    MAX-ACCESS     \
    \ read-only\n    STATUS          current\n    DESCRIPTION\n      \"A count of\
    \ the number of RTCP Sender Reports that have\n       been sent from this sender,\
    \ or observed if the RTP entity\n       is a monitor, since rtpSenderStartTime.\"\
    \n    ::= { rtpSenderEntry 7 }\n"
- title: rtpSenderSRTime OBJECT-TYPE
  contents:
  - "rtpSenderSRTime OBJECT-TYPE\n    SYNTAX          TimeStamp\n    MAX-ACCESS  \
    \    read-only\n    STATUS          current\n    DESCRIPTION\n      \"rtpSenderSRTime\
    \ is the value of SysUpTime at the time that\n       the last SR was received\
    \ from this sender, in the case of a\n       monitor or receiving host.  Or sent\
    \ by this sender, in the\n       case of a sending host.\"\n    ::= { rtpSenderEntry\
    \ 8 }\n"
- title: rtpSenderPT OBJECT-TYPE
  contents:
  - "rtpSenderPT OBJECT-TYPE\n    SYNTAX          INTEGER (0..127)\n    MAX-ACCESS\
    \      read-only\n    STATUS          current\n    DESCRIPTION\n      \"Payload\
    \ type from the RTP header of the most recently received\n       RTP Packet (see\
    \ RFC 1889, 'RTP: A Transport Protocol for\n       Real-Time Applications' sec.\
    \ 5).\"\n    ::= { rtpSenderEntry 9 }\n"
- title: rtpSenderStartTime OBJECT-TYPE
  contents:
  - "rtpSenderStartTime OBJECT-TYPE\n    SYNTAX          TimeStamp\n    MAX-ACCESS\
    \      read-only\n    STATUS          current\n    DESCRIPTION\n      \"The value\
    \ of SysUpTime at the time that this row was\n       created.\"\n    ::= { rtpSenderEntry\
    \ 10 }\n"
- title: --
  contents:
  - '--

    '
- title: -- RECEIVER INVERSE TABLE
  contents:
  - '-- RECEIVER INVERSE TABLE

    '
- title: --
  contents:
  - '--

    '
- title: rtpRcvrInverseTable OBJECT-TYPE
  contents:
  - "rtpRcvrInverseTable OBJECT-TYPE\n    SYNTAX          SEQUENCE OF RtpRcvrInverseEntry\n\
    \    MAX-ACCESS      not-accessible\n    STATUS          current\n    DESCRIPTION\n\
    \      \"Maps rtpRcvrAddr and rtpSessionIndex to the rtpRcvrSRCSSRC and\n    \
    \   rtpRcvrSSRC indexes of the rtpRcvrTable.  This table allows\n       management\
    \ applications to find entries sorted by rtpRcvrAddr\n       rather than by rtpSessionIndex.\
    \ Given rtpSessionDomain and\n       rtpRcvrAddr, a set of rtpSessionIndex, rtpRcvrSRCSSRC,\
    \ and\n       rtpRcvrSSRC values can be returned from a tree walk.  When\n   \
    \    rtpSessionIndex is specified in SNMP Get-Next operations, one or\n      \
    \ more rtpRcvrSRCSSRC and rtpRcvrSSRC pairs may be returned.\"\n    ::= { rtpMIBObjects\
    \ 6 }\n"
- title: rtpRcvrInverseEntry OBJECT-TYPE
  contents:
  - "rtpRcvrInverseEntry OBJECT-TYPE\n    SYNTAX          RtpRcvrInverseEntry\n  \
    \  MAX-ACCESS      not-accessible\n    STATUS          current\n    DESCRIPTION\n\
    \      \"Each entry corresponds to exactly one entry in the\n       rtpRcvrTable\
    \ - the entry containing the index pair,\n       rtpSessionIndex, rtpRcvrSSRC.\"\
    \n    INDEX { rtpSessionDomain, rtpRcvrAddr,  rtpSessionIndex,\n            rtpRcvrSRCSSRC,\
    \ rtpRcvrSSRC }\n    ::= { rtpRcvrInverseTable 1 }\n"
- title: RtpRcvrInverseEntry ::= SEQUENCE {
  contents:
  - "RtpRcvrInverseEntry ::= SEQUENCE {\n        rtpRcvrInverseStartTime     TimeStamp\n\
    \        }\n"
- title: rtpRcvrInverseStartTime OBJECT-TYPE
  contents:
  - "rtpRcvrInverseStartTime OBJECT-TYPE\n    SYNTAX          TimeStamp\n    MAX-ACCESS\
    \      read-only\n    STATUS          current\n    DESCRIPTION\n      \"The value\
    \ of SysUpTime at the time that this row was\n       created.\"\n    ::= { rtpRcvrInverseEntry\
    \ 1 }\n"
- title: --
  contents:
  - '--

    '
- title: --  RECEIVERS TABLE
  contents:
  - '--  RECEIVERS TABLE

    '
- title: --
  contents:
  - '--

    '
- title: rtpRcvrTable OBJECT-TYPE
  contents:
  - "rtpRcvrTable OBJECT-TYPE\n    SYNTAX          SEQUENCE OF RtpRcvrEntry\n    MAX-ACCESS\
    \      not-accessible\n    STATUS          current\n    DESCRIPTION\n      \"\
    Table of information about a receiver or receivers of RTP\n       session data.\
    \ RTP hosts that receive RTP session packets\n       MUST create an entry in this\
    \ table for that receiver/sender\n       pair.  RTP hosts that send RTP session\
    \ packets MAY create\n       an entry in this table for each receiver to their\
    \ stream\n       using RTCP feedback from the RTP group.  RTP monitors\n     \
    \  create an entry for each observed RTP session receiver as\n       a side effect\
    \ when a conceptual row in the rtpSessionTable\n       is made 'active' by a manager.\"\
    \n    ::= { rtpMIBObjects 7 }\n"
- title: rtpRcvrEntry OBJECT-TYPE
  contents:
  - "rtpRcvrEntry OBJECT-TYPE\n    SYNTAX          RtpRcvrEntry\n    MAX-ACCESS  \
    \    not-accessible\n    STATUS          current\n    DESCRIPTION\n      \"Each\
    \ entry contains information from a single RTP\n       Synchronization Source\
    \ that is receiving packets from the\n       sender identified by rtpRcvrSRCSSRC\
    \ (SSRC, see RFC 1889,\n       'RTP: A Transport Protocol for Real-Time Applications'\n\
    \       sec.6).  The session is identified to the the RTP Agent entity\n     \
    \  by rtpSessionIndex.  Rows are removed by the RTP agent when\n       a BYE is\
    \ received from the sender or when the sender times\n       out (see RFC 1889,\
    \ Sec. 6.2.1) or when the rtpSessionEntry is\n       deleted.\"\n    INDEX { rtpSessionIndex,\
    \ rtpRcvrSRCSSRC, rtpRcvrSSRC }\n    ::= { rtpRcvrTable 1 }\n"
- title: RtpRcvrEntry ::= SEQUENCE {
  contents:
  - "RtpRcvrEntry ::= SEQUENCE {\n        rtpRcvrSRCSSRC        Unsigned32,\n    \
    \    rtpRcvrSSRC           Unsigned32,\n        rtpRcvrCNAME          Utf8String,\n\
    \        rtpRcvrAddr           TAddress,\n        rtpRcvrRTT            Gauge32,\n\
    \        rtpRcvrLostPackets    Counter64,\n        rtpRcvrJitter         Gauge32,\n\
    \        rtpRcvrTool           Utf8String,\n        rtpRcvrRRs            Counter32,\n\
    \        rtpRcvrRRTime         TimeStamp,\n        rtpRcvrPT             INTEGER,\n\
    \        rtpRcvrPackets        Counter64,\n        rtpRcvrOctets         Counter64,\n\
    \        rtpRcvrStartTime      TimeStamp\n        }\n"
- title: rtpRcvrSRCSSRC OBJECT-TYPE
  contents:
  - "rtpRcvrSRCSSRC OBJECT-TYPE\n    SYNTAX       Unsigned32\n    MAX-ACCESS   not-accessible\n\
    \    STATUS       current\n    DESCRIPTION\n      \"The RTP SSRC, or synchronization\
    \ source identifier of the\n       sender.  The RTP session address plus an SSRC\
    \ uniquely\n       identify a sender or receiver of an RTP stream (see RFC\n \
    \      1889, 'RTP:  A Transport Protocol for Real-Time\n       Applications' sec.3).\"\
    \n    ::= { rtpRcvrEntry 1 }\n"
- title: rtpRcvrSSRC OBJECT-TYPE
  contents:
  - "rtpRcvrSSRC OBJECT-TYPE\n    SYNTAX       Unsigned32\n    MAX-ACCESS   not-accessible\n\
    \    STATUS       current\n    DESCRIPTION\n      \"The RTP SSRC, or synchronization\
    \ source identifier of the\n       receiver.  The RTP session address plus an\
    \ SSRC uniquely\n       identify a receiver of an RTP stream (see RFC 1889, 'RTP:\n\
    \       A Transport Protocol for Real-Time Applications' sec.3).\"\n    ::= {\
    \ rtpRcvrEntry 2 }\n"
- title: rtpRcvrCNAME OBJECT-TYPE
  contents:
  - "rtpRcvrCNAME OBJECT-TYPE\n    SYNTAX       Utf8String\n    MAX-ACCESS   read-only\n\
    \    STATUS       current\n    DESCRIPTION\n      \"The RTP canonical name of\
    \ the receiver.\"\n    ::= { rtpRcvrEntry 3 }\n"
- title: rtpRcvrAddr OBJECT-TYPE
  contents:
  - "rtpRcvrAddr OBJECT-TYPE\n    SYNTAX       TAddress\n    MAX-ACCESS   read-only\n\
    \    STATUS       current\n    DESCRIPTION\n      \"The unicast transport address\
    \ on which the receiver is\n       receiving RTP packets and/or RTCP Receiver\
    \ Reports.\"\n    ::= { rtpRcvrEntry 4 }\n"
- title: rtpRcvrRTT OBJECT-TYPE
  contents:
  - "rtpRcvrRTT OBJECT-TYPE\n    SYNTAX       Gauge32\n    MAX-ACCESS   read-only\n\
    \    STATUS       current\n    DESCRIPTION\n      \"The round trip time measurement\
    \ taken by the source of the\n       RTP stream based on the algorithm described\
    \ on sec. 6 of\n       RFC 1889, 'RTP: A Transport Protocol for Real-Time\n  \
    \     Applications.'  This algorithm can produce meaningful\n       results when\
    \ the RTP agent has the same clock as the stream\n       sender (when the RTP\
    \ monitor is also the sending host for the\n       particular receiver).  Otherwise,\
    \ the entity should return\n       'noSuchInstance' in response to queries against\
    \ rtpRcvrRTT.\"\n    ::= { rtpRcvrEntry 5 }\n"
- title: rtpRcvrLostPackets OBJECT-TYPE
  contents:
  - "rtpRcvrLostPackets OBJECT-TYPE\n    SYNTAX          Counter64\n    MAX-ACCESS\
    \      read-only\n    STATUS          current\n    DESCRIPTION\n      \"A count\
    \ of RTP  packets lost as observed by this receiver\n       since rtpRcvrStartTime.\"\
    \n    ::= { rtpRcvrEntry 6 }\n"
- title: rtpRcvrJitter OBJECT-TYPE
  contents:
  - "rtpRcvrJitter OBJECT-TYPE\n    SYNTAX          Gauge32\n    MAX-ACCESS      read-only\n\
    \    STATUS          current\n    DESCRIPTION\n      \"An estimate of delay variation\
    \ as observed by this\n       receiver.  (see RFC 1889, 'RTP: A Transport Protocol\n\
    \       for Real-Time Applications' sec.6.3.1 and A.8).\"\n    ::= { rtpRcvrEntry\
    \ 7 }\n"
- title: rtpRcvrTool OBJECT-TYPE
  contents:
  - "rtpRcvrTool OBJECT-TYPE\n    SYNTAX          Utf8String (SIZE(0..127))\n    MAX-ACCESS\
    \      read-only\n    STATUS          current\n    DESCRIPTION\n      \"Name of\
    \ the application program source of the stream.\"\n    ::= { rtpRcvrEntry 8 }\n"
- title: rtpRcvrRRs OBJECT-TYPE
  contents:
  - "rtpRcvrRRs OBJECT-TYPE\n    SYNTAX          Counter32\n    MAX-ACCESS      read-only\n\
    \    STATUS          current\n    DESCRIPTION\n      \"A count of the number of\
    \ RTCP Receiver Reports that have\n       been sent from this receiver, or observed\
    \ if the RTP entity\n       is a monitor, since rtpRcvrStartTime.\"\n    ::= {\
    \ rtpRcvrEntry 9 }\n"
- title: rtpRcvrRRTime OBJECT-TYPE
  contents:
  - "rtpRcvrRRTime OBJECT-TYPE\n    SYNTAX         TimeStamp\n    MAX-ACCESS     read-only\n\
    \    STATUS         current\n    DESCRIPTION\n      \"rtpRcvrRRTime is the value\
    \ of SysUpTime at the time that the\n       last RTCP Receiver Report was received\
    \ from this receiver, in\n       the case of a monitor or RR receiver (the RTP\
    \ Sender).  It is\n       the  value of SysUpTime at the time that the last RR\
    \ was sent by\n       this receiver in the case of an RTP receiver sending the\
    \ RR.\"\n    ::= { rtpRcvrEntry 10 }\n"
- title: rtpRcvrPT OBJECT-TYPE
  contents:
  - "rtpRcvrPT OBJECT-TYPE\n    SYNTAX          INTEGER (0..127)\n    MAX-ACCESS \
    \     read-only\n    STATUS          current\n    DESCRIPTION\n      \"Static\
    \ or dynamic payload type from the RTP header (see\n       RFC 1889, 'RTP: A Transport\
    \ Protocol for Real-Time\n       Applications' sec. 5).\"\n    ::= { rtpRcvrEntry\
    \ 11 }\n"
- title: rtpRcvrPackets OBJECT-TYPE
  contents:
  - "rtpRcvrPackets OBJECT-TYPE\n    SYNTAX          Counter64\n    MAX-ACCESS   \
    \   read-only\n    STATUS          current\n    DESCRIPTION\n      \"Count of\
    \ RTP packets received by this RTP host receiver\n       since rtpRcvrStartTime.\"\
    \n    ::= { rtpRcvrEntry 12 }\n"
- title: rtpRcvrOctets OBJECT-TYPE
  contents:
  - "rtpRcvrOctets OBJECT-TYPE\n    SYNTAX          Counter64\n    MAX-ACCESS    \
    \  read-only\n    STATUS          current\n    DESCRIPTION\n      \"Count of non-header\
    \ RTP octets received by this receiving RTP\n       host since rtpRcvrStartTime.\"\
    \n    ::= { rtpRcvrEntry 13 }\n"
- title: rtpRcvrStartTime OBJECT-TYPE
  contents:
  - "rtpRcvrStartTime OBJECT-TYPE\n    SYNTAX          TimeStamp\n    MAX-ACCESS \
    \     read-only\n    STATUS          current\n    DESCRIPTION\n      \"The value\
    \ of SysUpTime at the time that this row was\n       created.\"\n    ::= { rtpRcvrEntry\
    \ 14 }\n"
- title: --
  contents:
  - '--

    '
- title: --  MODULE GROUPS
  contents:
  - '--  MODULE GROUPS

    '
- title: --
  contents:
  - '--

    '
- title: --
  contents:
  - '--

    '
- title: -- There are two types of RTP Systems, RTP hosts and RTP Monitors.
  contents:
  - '-- There are two types of RTP Systems, RTP hosts and RTP Monitors.

    '
- title: '-- Thus there are three kinds of objects: 1) Objects common to both'
  contents:
  - '-- Thus there are three kinds of objects: 1) Objects common to both

    '
- title: -- kinds of systems, 2) Objects unique to RTP Hosts and 3) Objects
  contents:
  - '-- kinds of systems, 2) Objects unique to RTP Hosts and 3) Objects

    '
- title: -- unique to RTP Monitors.  There is a fourth group, 4) Objects that
  contents:
  - '-- unique to RTP Monitors.  There is a fourth group, 4) Objects that

    '
- title: -- SHOULD be implemented by Multicast hosts and RTP Monitors
  contents:
  - '-- SHOULD be implemented by Multicast hosts and RTP Monitors

    '
- title: rtpGroups OBJECT IDENTIFIER ::= { rtpConformance 1 }
  contents:
  - 'rtpGroups OBJECT IDENTIFIER ::= { rtpConformance 1 }

    '
- title: rtpSystemGroup      OBJECT-GROUP
  contents:
  - "rtpSystemGroup      OBJECT-GROUP\n    OBJECTS         {\n                   \
    \ rtpSessionDomain,\n                    rtpSessionRemAddr,\n                \
    \    rtpSessionIfIndex,\n                    rtpSessionSenderJoins,\n        \
    \            rtpSessionReceiverJoins,\n                    rtpSessionStartTime,\n\
    \                    rtpSessionByes,\n                    rtpSessionMonitor,\n\
    \                    rtpSenderCNAME,\n                    rtpSenderAddr,\n   \
    \                 rtpSenderPackets,\n                    rtpSenderOctets,\n  \
    \                  rtpSenderTool,\n                    rtpSenderSRs,\n       \
    \             rtpSenderSRTime,\n                    rtpSenderStartTime,\n    \
    \                rtpRcvrCNAME,\n                    rtpRcvrAddr,\n           \
    \         rtpRcvrLostPackets,\n                    rtpRcvrJitter,\n          \
    \          rtpRcvrTool,\n                    rtpRcvrRRs,\n                   \
    \ rtpRcvrRRTime,\n                    rtpRcvrStartTime\n                    }\n\
    \    STATUS          current\n    DESCRIPTION\n        \"Objects available to\
    \ all RTP Systems.\"\n    ::= { rtpGroups 1 }\n"
- title: rtpHostGroup    OBJECT-GROUP
  contents:
  - "rtpHostGroup    OBJECT-GROUP\n    OBJECTS     {\n                rtpSessionLocAddr,\n\
    \                rtpSenderPT,\n                rtpRcvrPT,\n                rtpRcvrRTT,\n\
    \                rtpRcvrOctets,\n                rtpRcvrPackets\n            \
    \    }\n    STATUS      current\n    DESCRIPTION\n           \"Objects that are\
    \ available to RTP Host systems, but may not\n            be available to RTP\
    \ Monitor systems.\"\n    ::= { rtpGroups 2 }\n"
- title: rtpMonitorGroup OBJECT-GROUP
  contents:
  - "rtpMonitorGroup OBJECT-GROUP\n    OBJECTS     {\n                rtpSessionNewIndex,\n\
    \                rtpSessionRowStatus\n                }\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Objects used to create rows in the RTP Session Table.\
    \  These\n        objects are not needed if the system does not create rows.\"\
    \n    ::= { rtpGroups 3 }\n"
- title: rtpInverseGroup OBJECT-GROUP
  contents:
  - "rtpInverseGroup OBJECT-GROUP\n    OBJECTS     {\n                rtpSessionInverseStartTime,\n\
    \                rtpSenderInverseStartTime,\n                rtpRcvrInverseStartTime\n\
    \                }\n    STATUS      current\n    DESCRIPTION\n            \"Objects\
    \ used in the Inverse Lookup Tables.\"\n    ::= { rtpGroups 4 }\n"
- title: --
  contents:
  - '--

    '
- title: --  Compliance
  contents:
  - '--  Compliance

    '
- title: --
  contents:
  - '--

    '
- title: rtpCompliances OBJECT IDENTIFIER ::= { rtpConformance 2 }
  contents:
  - 'rtpCompliances OBJECT IDENTIFIER ::= { rtpConformance 2 }

    '
- title: rtpHostCompliance MODULE-COMPLIANCE
  contents:
  - "rtpHostCompliance MODULE-COMPLIANCE\n    STATUS          current\n    DESCRIPTION\n\
    \            \"Host implementations MUST comply.\"\n    MODULE           RTP-MIB\n\
    \    MANDATORY-GROUPS {\n                     rtpSystemGroup,\n              \
    \       rtpHostGroup\n                     }\n    GROUP            rtpMonitorGroup\n\
    \    DESCRIPTION\n        \"Host systems my optionally support row creation and\
    \ deletion.\n         This would allow an RTP Host system to act as an RTP Monitor.\"\
    \n    GROUP            rtpInverseGroup\n    DESCRIPTION\n        \"Multicast RTP\
    \ Systems SHOULD implement the optional\n         tables.\"\n        OBJECT  rtpSessionNewIndex\n\
    \            MIN-ACCESS not-accessible\n                DESCRIPTION\n        \
    \         \"RTP system implementations support of\n                  row creation\
    \ and deletion is OPTIONAL so\n                  implementation of this object\
    \ is OPTIONAL.\"\n        OBJECT  rtpSessionDomain\n           MIN-ACCESS read-only\n\
    \                DESCRIPTION\n                 \"RTP system implementation support\
    \ of\n                  row creation and deletion is OPTIONAL.  When\n       \
    \           it is not supported so write access is\n                  OPTIONAL.\"\
    \n        OBJECT  rtpSessionRemAddr\n            MIN-ACCESS read-only\n      \
    \        DESCRIPTION\n               \"Row creation and deletion is OPTIONAL so\n\
    \                read-create access to this object is OPTIONAL.\"\n        OBJECT\
    \  rtpSessionIfIndex\n            MIN-ACCESS read-only\n              DESCRIPTION\n\
    \               \"Row creation and deletion is OPTIONAL so\n                read-create\
    \ access to this object is OPTIONAL.\"\n        OBJECT  rtpSessionRowStatus\n\
    \            MIN-ACCESS not-accessible\n              DESCRIPTION\n          \
    \     \"Row creation and deletion is OPTIONAL so\n                read-create\
    \ access to this object is OPTIONAL.\"\n        OBJECT  rtpSessionInverseStartTime\n\
    \            MIN-ACCESS not-accessible\n              DESCRIPTION\n          \
    \     \"Multicast RTP Systems SHOULD implement the optional\n                tables.\"\
    \n        OBJECT  rtpSenderInverseStartTime\n            MIN-ACCESS not-accessible\n\
    \              DESCRIPTION\n               \"Multicast RTP Systems SHOULD implement\
    \ the optional\n                tables.\"\n        OBJECT  rtpRcvrInverseStartTime\n\
    \            MIN-ACCESS not-accessible\n              DESCRIPTION\n          \
    \     \"Multicast RTP Systems SHOULD implement the optional\n                tables.\"\
    \n    ::= { rtpCompliances 1 }\n"
- title: rtpMonitorCompliance MODULE-COMPLIANCE
  contents:
  - "rtpMonitorCompliance MODULE-COMPLIANCE\n    STATUS          current\n    DESCRIPTION\n\
    \          \"Monitor implementations must comply.  RTP Monitors are not\n    \
    \      required to support creation or deletion.\"\n    MODULE           RTP-MIB\n\
    \    MANDATORY-GROUPS     {\n                         rtpSystemGroup,\n      \
    \                   rtpMonitorGroup\n                         }\n    GROUP   \
    \             rtpHostGroup\n    DESCRIPTION\n        \"Monitor implementations\
    \ may not have access to values in the\n         rtpHostGroup.\"\n    GROUP  \
    \              rtpInverseGroup\n    DESCRIPTION\n        \"Multicast RTP Systems\
    \ SHOULD implement the optional\n         tables.\"\n        OBJECT  rtpSessionLocAddr\n\
    \            MIN-ACCESS not-accessible\n              DESCRIPTION\n          \
    \     \"RTP monitor sourcing of RTP or RTCP data packets\n                is OPTIONAL\
    \ and implementation of this object is\n                OPTIONAL.\"\n        OBJECT\
    \  rtpRcvrPT\n            MIN-ACCESS not-accessible\n              DESCRIPTION\n\
    \               \"RTP monitor systems may not support\n                retrieval\
    \ of the RTP Payload Type from the RTP\n                header (and may receive\
    \ RTCP messages only).  When\n                queried for the payload type information\"\
    \n        OBJECT  rtpSenderPT\n            MIN-ACCESS not-accessible\n       \
    \       DESCRIPTION\n               \"RTP monitor systems may not support\n  \
    \              retrieval of the RTP Payload Type from the RTP\n              \
    \  header (and may receive RTCP messages only).  When\n                queried\
    \ for the payload type information.\"\n        OBJECT  rtpRcvrOctets\n       \
    \     MIN-ACCESS not-accessible\n              DESCRIPTION\n               \"\
    RTP monitor systems may receive only the RTCP messages\n                and not\
    \ the RTP messages that contain the octet count\n                of the RTP message.\
    \  Thus implementation of this\n                object is OPTIONAL\"\n       \
    \ OBJECT  rtpRcvrPackets\n            MIN-ACCESS not-accessible\n            \
    \  DESCRIPTION\n               \"RTP monitor systems may receive only the RTCP\
    \ messages\n                and not the RTP messages that contain the octet count\n\
    \                of the RTP message.  Thus implementation of this\n          \
    \      object is OPTIONAL.\"\n        OBJECT  rtpSessionIfIndex\n            MIN-ACCESS\
    \ read-only\n              DESCRIPTION\n               \"Row creation and deletion\
    \ is OPTIONAL so\n                read-create access to this object is OPTIONAL.\"\
    \n        OBJECT  rtpSessionInverseStartTime\n            MIN-ACCESS not-accessible\n\
    \              DESCRIPTION\n               \"Multicast RTP Systems SHOULD implement\
    \ the optional\n                tables.\"\n        OBJECT  rtpSenderInverseStartTime\n\
    \            MIN-ACCESS not-accessible\n              DESCRIPTION\n          \
    \     \"Multicast RTP Systems SHOULD implement the optional\n                tables.\"\
    \n        OBJECT  rtpRcvrInverseStartTime\n            MIN-ACCESS not-accessible\n\
    \              DESCRIPTION\n               \"Multicast RTP Systems SHOULD implement\
    \ the optional\n                tables.\"\n    ::= { rtpCompliances 2 }\n"
- title: END
  contents:
  - 'END

    '
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   In most cases, MIBs are not themselves security\
    \ risks; if SNMP\n   security is operating as intended, the use of a MIB to view\n\
    \   information about a system, or to change some parameter at the\n   system,\
    \ is a tool, not a threat.  However, there are a number of\n   management objects\
    \ defined in this MIB that have a MAX-ACCESS clause\n   of read-write and/or read-create.\
    \  Such objects may be considered\n   sensitive or vulnerable in some network\
    \ environments.  The support\n   for SET operations in a non-secure environment\
    \ without proper\n   protection can have a negative effect on network operations.\n\
    \   None of the read-only objects in this MIB reports a password, though\n   some\
    \ SDES [RFC1889] items such as the CNAME [RFC1889], the canonical\n   name, may\
    \ be deemed sensitive depending on the security policies of a\n   particular enterprise.\
    \  If access to these objects is not limited by\n   an appropriate access control\
    \ policy, these objects can provide an\n   attacker with information about a system's\
    \ configuration and the\n   services that that system is providing.  Some enterprises\
    \ view their\n   network and system configurations, as well as information about\
    \ usage\n   and performance, as corporate assets; such enterprises may wish to\n\
    \   restrict SNMP access to most of the objects in the MIB.  This MIB\n   supports\
    \ read-write operations against rtpSessionNewIndex which has\n   the side effect\
    \ of creating an entry in the rtpSessionTable when it\n   is written to.  Five\
    \ objects in rtpSessionEntry have read-create\n   access: rtpSessionDomain, rtpSessionRemAddr,\
    \ rtpSessionIfIndex,\n   rtpSessionRowStatus, and rtpSessionIfAddr identify an\
    \ RTP session to\n   be monitored on a particular interface.  The values of these\
    \ objects\n   are not to be changed once created, and initialization of these\n\
    \   objects affects only the monitoring of an RTP session and not the\n   operation\
    \ of an RTP session on any host end-system.  Since write\n   operations to rtpSessionNewIndex\
    \ and the five objects in\n   rtpSessionEntry affect the operation of the monitor,\
    \ write access to\n   these objects should be subject to the appropriate access\
    \ control\n   policy.\n   Confidentiality of RTP and RTCP data packets is defined\
    \ in section 9\n   of the RTP specification [RFC1889].  Encryption may be performed\
    \ on\n   RTP packets, RTCP packets, or both.  Encryption of RTCP packets may\n\
    \   pose a problem for third-party monitors though \"For RTCP, it is\n   allowed\
    \ to split a compound RTCP packet into two lower-layer packets,\n   one to be\
    \ encrypted and one to be sent in the clear.  For example,\n   SDES information\
    \ might be encrypted while reception reports were sent\n   in the clear to accommodate\
    \ third-party monitors [RFC1889].\"\n   SNMPv1 by itself is not a secure environment.\
    \  Even if the network\n   itself is secure (for example by using IPSec), there\
    \ is no control as\n   to who on the secure network is allowed to access and GET/SET\n\
    \   (read/change/create/delete) the objects in this MIB.  It is\n   recommended\
    \ that the implementers consider the security features as\n   provided by the\
    \ SNMPv3 framework.  Specifically, the use of the\n   User-based Security Model\
    \ RFC 2574 [RFC2574] and the View-based\n   Access Control Model RFC 2575 [RFC2575]\
    \ is recommended.  It is then a\n   customer/user responsibility to ensure that\
    \ the SNMP entity giving\n   access to an instance of this MIB, is properly configured\
    \ to give\n   access to the objects only to those principals (users) that have\n\
    \   legitimate rights to indeed GET or SET (change/create/delete) them.\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   The authors wish to thank Bert Wijnen and the participants\
    \ from the\n   ITU SG-16 management effort for their helpful comments.  Alan Batie\n\
    \   and Bill Lewis from Intel also contributed greatly to the RTP MIB\n   through\
    \ their review of various drafts of the MIB and their work on\n   the implementation\
    \ of an SNMP RTP Monitor.  Stan Naudus from 3Com and\n   John Du from Intel contributed\
    \ to the original RTP MIB design and\n   co-authored the original RTP MIB draft\
    \ documents; much of their work\n   remains in the current RTP MIB.  Bill Fenner\
    \ provided solid feedback\n   that improved the quality of the final document.\n"
- title: 6.  Intellectual Property
  contents:
  - "6.  Intellectual Property\n   The IETF takes no position regarding the validity\
    \ or scope of any\n   intellectual property or other rights that might be claimed\
    \ to\n   pertain to the implementation or use of the technology described in\n\
    \   this document or the extent to which any license under such rights\n   might\
    \ or might not be available; neither does it represent that it\n   has made any\
    \ effort to identify any such rights.  Information on the\n   IETF's procedures\
    \ with respect to rights in standards-track and\n   standards-related documentation\
    \ can be found in BCP-11.  Copies of\n   claims of rights made available for publication\
    \ and any assurances of\n   licenses to be made available, or the result of an\
    \ attempt made to\n   obtain a general license or permission for the use of such\n\
    \   proprietary rights by implementors or users of this specification can\n  \
    \ be obtained from the IETF Secretariat.\n   The IETF invites any interested party\
    \ to bring to its attention any\n   copyrights, patents or patent applications,\
    \ or other proprietary\n   rights which may cover technology that may be required\
    \ to practice\n   this standard.  Please address the information to the IETF Executive\n\
    \   Director.\n"
- title: 7.  References
  contents:
  - "7.  References\n   [RFC1889]   Shulzrinne, H., Casner, S., Frederick, R. and\
    \ V.\n               Jacobson, \"RTP: A Transport Protocol for real-time\n   \
    \            applications,\" RFC 1889, January 1996.\n   [RFC2571]   Harrington,\
    \ D., Presuhn, R. and B. Wijnen, \"An\n               Architecture for Describing\
    \ SNMP Management Frameworks\",\n               RFC 2571, April 1999.\n   [RFC1155]\
    \   Rose, M. and K. McCloghrie, \"Structure and Identification\n             \
    \  of Management Information for TCP/IP-based Internets\",\n               STD\
    \ 16, RFC 1155, May 1990.\n   [RFC1212]   Rose, M. and K. McCloghrie, \"Concise\
    \ MIB Definitions\",\n               STD 16, RFC 1212, March 1991.\n   [RFC1215]\
    \   Rose, M., \"A Convention for Defining Traps for use with\n               the\
    \ SNMP\", RFC 1215, March 1991.\n   [RFC2578]   McCloghrie, K., Perkins, D., Schoenwaelder,\
    \ J., Case, J.,\n               Rose, M. and S. Waldbusser, \"Structure of Management\n\
    \               Information Version 2 (SMIv2)\", STD 58, RFC 2578, April\n   \
    \            1999.\n   [RFC2579]   McCloghrie, K., Perkins, D., Schoenwaelder,\
    \ J., Case, J.,\n               Rose, M. and S. Waldbusser, \"Textual Conventions\
    \ for\n               SMIv2\", STD 58, RFC 2579, April 1999.\n   [RFC2580]   McCloghrie,\
    \ K., Perkins, D., Schoenwaelder, J., Case, J.,\n               Rose, M. and S.\
    \ Waldbusser, \"Conformance Statements for\n               SMIv2\", STD 58, RFC\
    \ 2580, April 1999.\n   [RFC1157]   Case, J., Fedor, M., Schoffstall, M. and J.\
    \ Davin,\n               \"Simple Network Management Protocol\", STD 15, RFC 1157,\n\
    \               May 1990.\n   [RFC1901]   Case, J., McCloghrie, K., Rose, M. and\
    \ S. Waldbusser,\n               \"Introduction to Community-based SNMPv2\", RFC\
    \ 1901,\n               January 1996.\n   [RFC1906]   Case, J., McCloghrie, K.,\
    \ Rose, M. and S. Waldbusser,\n               \"Transport Mappings for Version\
    \ 2 of the Simple Network\n               Management Protocol (SNMPv2)\", RFC\
    \ 1906, January 1996.\n   [RFC2572]   Case, J., Harrington D., Presuhn R. and\
    \ B. Wijnen,\n               \"Message Processing and Dispatching for the Simple\n\
    \               Network Management Protocol (SNMP)\", RFC 2572, April\n      \
    \         1999.\n   [RFC2574]   Blumenthal, U. and B. Wijnen, \"User-based Security\
    \ Model\n               (USM) for version 3 of the Simple Network Management\n\
    \               Protocol (SNMPv3)\", RFC 2574, April 1999.\n   [RFC1905]   Case,\
    \ J., McCloghrie, K., Rose, M. and S. Waldbusser,\n               \"Protocol Operations\
    \ for Version 2 of the Simple Network\n               Management Protocol (SNMPv2)\"\
    , RFC 1905, January 1996.\n   [RFC2573]   Levi, D., Meyer, P. and B. Stewart,\
    \ \"SNMPv3\n               Applications\", RFC 2573, April 1999.\n   [RFC2575]\
    \   Wijnen, B., Presuhn, R. and K. McCloghrie, \"View-based\n               Access\
    \ Control Model (VACM) for the Simple Network\n               Management Protocol\
    \ (SNMP)\", RFC 2575, April 1999.\n   [RFC2570]   Case, J., Mundy, R., Partain,\
    \ D. and B. Stewart,\n               \"Introduction to Version 3 of the Internet-standard\n\
    \               Network\n                Management Framework\", RFC 2570, April\
    \ 1999.\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   Mark Baugher\n   Intel Corporation\n   2111 N.E.25th\
    \ Avenue\n   Hillsboro, Oregon  97124\n   U.S.A.\n   EMail: mbaugher@passedge.com\n\
    \   Bill Strahm\n   Intel Corporation\n   2111 N.E.25th Avenue\n   Hillsboro,\
    \ Oregon  97124\n   U.S.A.\n   EMail: Bill.Strahm@intel.com\n   Irina Suconick\n\
    \   Ennovate Networks\n   60 Codman Hill Rd.,\n   Boxboro, Ma 01719\n   U.S.A.\n\
    \   EMail: irina@ennovatenetworks.com\n"
- title: 9. Full Copyright Statement
  contents:
  - "9. Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
