- contents:
  - '      Advanced Encryption Standard (AES) Encryption for Kerberos 5

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The United States National Institute of Standards and Technology\n
    \  (NIST) has chosen a new Advanced Encryption Standard (AES), which is\n   significantly
    faster and (it is believed) more secure than the old\n   Data Encryption Standard
    (DES) algorithm.  This document is a\n   specification for the addition of this
    algorithm to the Kerberos\n   cryptosystem suite.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   This document defines encryption key and checksum types
    for Kerberos\n   5 using the AES algorithm recently chosen by NIST.  These new
    types\n   support 128-bit block encryption and key sizes of 128 or 256 bits.\n
    \  Using the \"simplified profile\" of [KCRYPTO], we can define a pair of\n   encryption
    and checksum schemes.  AES is used with ciphertext\n   stealing to avoid message
    expansion, and SHA-1 [SHA1] is the\n   associated checksum function.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions used in this Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in BCP 14, RFC 2119\n   [KEYWORDS].\n"
  title: 2.  Conventions used in this Document
- contents:
  - "3.  Protocol Key Representation\n   The profile in [KCRYPTO] treats keys and
    random octet strings as\n   conceptually different.  But since the AES key space
    is dense, we can\n   use any bit string of appropriate length as a key.  We use
    the byte\n   representation for the key described in [AES], where the first bit
    of\n   the bit string is the high bit of the first byte of the byte string\n   (octet
    string) representation.\n"
  title: 3.  Protocol Key Representation
- contents:
  - "4.  Key Generation from Pass Phrases or Random Data\n   Given the above format
    for keys, we can generate keys from the\n   appropriate amounts of random data
    (128 or 256 bits) by simply\n   copying the input string.\n   To generate an encryption
    key from a pass phrase and salt string, we\n   use the PBKDF2 function from PKCS
    #5 v2.0 ([PKCS5]), with parameters\n   indicated below, to generate an intermediate
    key (of the same length\n   as the desired final key), which is then passed into
    the DK function\n   with the 8-octet ASCII string \"kerberos\" as is done for
    des3-cbc-\n   hmac-sha1-kd in [KCRYPTO].  (In [KCRYPTO] terms, the PBKDF2 function\n
    \  produces a \"random octet string\", hence the application of the\n   random-to-key
    function even though it's effectively a simple identity\n   operation.)  The resulting
    key is the user's long-term key for use\n   with the encryption algorithm in question.\n
    \  tkey = random2key(PBKDF2(passphrase, salt, iter_count, keylength))\n   key
    = DK(tkey, \"kerberos\")\n   The pseudorandom function used by PBKDF2 will be
    a SHA-1 HMAC of the\n   passphrase and salt, as described in Appendix B.1 to PKCS#5.\n
    \  The number of iterations is specified by the string-to-key parameters\n   supplied.
    \ The parameter string is four octets indicating an unsigned\n   number in big-endian
    order.  This is the number of iterations to be\n   performed.  If the value is
    00 00 00 00, the number of iterations to\n   be performed is 4,294,967,296 (2**32).
    \ (Thus the minimum expressible\n   iteration count is 1.)\n   For environments
    where slower hardware is the norm, implementations\n   of protocols such as Kerberos
    may wish to limit the number of\n   iterations to prevent a spoofed response supplied
    by an attacker from\n   consuming lots of client-side CPU time; if such a limit
    is\n   implemented, it SHOULD be no less than 50,000.  Even for environments\n
    \  with fast hardware, 4 billion iterations is likely to take a fairly\n   long
    time; much larger bounds might still be enforced, and it might\n   be wise for
    implementations to permit interruption of this operation\n   by the user if the
    environment allows for it.\n   If the string-to-key parameters are not supplied,
    the value used is\n   00 00 10 00 (decimal 4,096, indicating 4,096 iterations).\n
    \  Note that this is not a requirement, nor even a recommendation, for\n   this
    value to be used in \"optimistic preauthentication\" (e.g.,\n   attempting timestamp-based
    preauthentication using the user's long-\n   term key without having first communicated
    with the KDC) in the\n   absence of additional information, or as a default value
    for sites to\n   use for their principals' long-term keys in their Kerberos database.\n
    \  It is simply the interpretation of the absence of the string-to-key\n   parameter
    field when the KDC has had an opportunity to provide it.\n   Sample test vectors
    are given in Appendix B.\n"
  title: 4.  Key Generation from Pass Phrases or Random Data
- contents:
  - "5.  Ciphertext Stealing\n   Cipher block chaining is used to encrypt messages,
    with the initial\n   vector stored in the cipher state.  Unlike previous Kerberos\n
    \  cryptosystems, we use ciphertext stealing to handle the possibly\n   partial
    final block of the message.\n   Ciphertext stealing is described on pages 195-196
    of [AC], and\n   section 8 of [RC5]; it has the advantage that no message expansion
    is\n   done during encryption of messages of arbitrary sizes as is typically\n
    \  done in CBC mode with padding.  Some errata for [RC5] are listed in\n   Appendix
    A and are considered part of the ciphertext stealing\n   technique as used here.\n
    \  Ciphertext stealing, as defined in [RC5], assumes that more than one\n   block
    of plain text is available.  If exactly one block is to be\n   encrypted, that
    block is simply encrypted with AES (also known as ECB\n   mode).  Input smaller
    than one block is padded at the end to one\n   block; the values of the padding
    bits are unspecified.\n   (Implementations MAY use all-zero padding, but protocols
    MUST NOT\n   rely on the result being deterministic.  Implementations MAY use\n
    \  random padding, but protocols MUST NOT rely on the result not being\n   deterministic.
    \ Note that in most cases, the Kerberos encryption\n   profile will add a random
    confounder independent of this padding.)\n   For consistency, ciphertext stealing
    is always used for the last two\n   blocks of the data to be encrypted, as in
    [RC5].  If the data length\n   is a multiple of the block size, this is equivalent
    to plain CBC mode\n   with the last two ciphertext blocks swapped.\n   A test
    vector is given in Appendix B.\n   The initial vector carried out from one encryption
    for use in a\n   subsequent encryption is the next-to-last block of the encryption\n
    \  output; this is the encrypted form of the last plaintext block.  When\n   decrypting,
    the next-to-last block of the supplied ciphertext is\n   carried forward as the
    next initial vector.  If only one ciphertext\n   block is available (decrypting
    one block, or encrypting one block or\n   less), then that one block is carried
    out instead.\n"
  title: 5.  Ciphertext Stealing
- contents:
  - "6.  Kerberos Algorithm Profile Parameters\n   This is a summary of the parameters
    to be used with the simplified\n   algorithm profile described in [KCRYPTO]:\n
    \ +--------------------------------------------------------------------+\n  |
    \              protocol key format        128- or 256-bit string    |\n  |                                                                    |\n
    \ |            string-to-key function        PBKDF2+DK with variable   |\n  |
    \                                         iteration count (see      |\n  |                                          above)
    \                   |\n  |                                                                    |\n
    \ |  default string-to-key parameters        00 00 10 00               |\n  |
    \                                                                   |\n  |        key-generation
    seed length        key size                  |\n  |                                                                    |\n
    \ |            random-to-key function        identity function         |\n  |
    \                                                                   |\n  |                  hash
    function, H        SHA-1                     |\n  |                                                                    |\n
    \ |               HMAC output size, h        12 octets (96 bits)       |\n  |
    \                                                                   |\n  |             message
    block size, m        1 octet                   |\n  |                                                                    |\n
    \ |  encryption/decryption functions,        AES in CBC-CTS mode       |\n  |
    \ E and D                                 (cipher block size 16     |\n  |                                          octets),
    with next-to-    |\n  |                                          last block (last
    block    |\n  |                                          if only one) as CBC-style
    |\n  |                                          ivec                      |\n
    \ +--------------------------------------------------------------------+\n   Using
    this profile with each key size gives us two each of encryption\n   and checksum
    algorithm definitions.\n"
  title: 6.  Kerberos Algorithm Profile Parameters
- contents:
  - "7.  Assigned Numbers\n   The following encryption type numbers are assigned:\n
    \ +--------------------------------------------------------------------+\n  |
    \                        encryption types                           |\n  +--------------------------------------------------------------------+\n
    \ |         type name                  etype value          key size   |\n  +--------------------------------------------------------------------+\n
    \ |   aes128-cts-hmac-sha1-96              17                 128      |\n  |
    \  aes256-cts-hmac-sha1-96              18                 256      |\n  +--------------------------------------------------------------------+\n
    \  The following checksum type numbers are assigned:\n  +--------------------------------------------------------------------+\n
    \ |                          checksum types                            |\n  +--------------------------------------------------------------------+\n
    \ |        type name                 sumtype value           length    |\n  +--------------------------------------------------------------------+\n
    \ |    hmac-sha1-96-aes128                15                   96      |\n  |
    \   hmac-sha1-96-aes256                16                   96      |\n  +--------------------------------------------------------------------+\n
    \  These checksum types will be used with the corresponding encryption\n   types
    defined above.\n"
  title: 7.  Assigned Numbers
- contents:
  - "8.  Security Considerations\n   This new algorithm has not been around long enough
    to receive the\n   decades of intense analysis that DES has received.  It is possible\n
    \  that some weakness exists that has not been found by the\n   cryptographers
    analyzing these algorithms before and during the AES\n   selection process.\n
    \  The use of the HMAC function has drawbacks for certain pass phrase\n   lengths.
    \ For example, a pass phrase longer than the hash function\n   block size (64
    bytes, for SHA-1) is hashed to a smaller size (20\n   bytes) before applying the
    main HMAC algorithm.  However, entropy is\n   generally sparse in pass phrases,
    especially in long ones, so this\n   may not be a problem in the rare cases of
    users with long pass\n   phrases.\n   Also, generating a 256-bit key from a pass
    phrase of any length may\n   be deceptive, as the effective entropy in pass-phrase-derived
    key\n   cannot be nearly that large given the properties of the string-to-key\n
    \  function described here.\n   The iteration count in PBKDF2 appears to be useful
    primarily as a\n   constant multiplier for the amount of work required for an
    attacker\n   using brute-force methods.  Unfortunately, it also multiplies, by
    the\n   same amount, the work needed by a legitimate user with a valid\n   password.
    \ Thus the work factor imposed on an attacker (who may have\n   many powerful
    workstations at his disposal) must be balanced against\n   the work factor imposed
    on the legitimate user (who may have a PDA or\n   cell phone); the available computing
    power on either side increases\n   as time goes on, as well.  A better way to
    deal with the brute-force\n   attack is through preauthentication mechanisms that
    provide better\n   protection of the user's long-term key.  Use of such mechanisms
    is\n   out of the scope of this document.\n   If a site does wish to use this
    means of protection against a brute-\n   force attack, the iteration count should
    be chosen based on the\n   facilities available to both attacker and legitimate
    user, and the\n   amount of work the attacker should be required to perform to
    acquire\n   the key or password.\n   As an example:\n      The author's tests
    on a 2GHz Pentium 4 system indicated that in\n      one second, nearly 90,000
    iterations could be done, producing a\n      256-bit key.  This was using the
    SHA-1 assembly implementation\n      from OpenSSL, and a pre-release version of
    the PBKDF2 code for\n      MIT's Kerberos package, on a single system.  No attempt
    was made\n      to do multiple hashes in parallel, so we assume an attacker doing\n
    \     so can probably do at least 100,000 iterations per second --\n      rounded
    up to 2**17, for ease of calculation.  For simplicity, we\n      also assume the
    final AES encryption step costs nothing.\n      Paul Leach estimates [LEACH] that
    a password-cracking dictionary\n      may have on the order of 2**21 entries,
    with capitalization,\n      punctuation, and other variations contributing perhaps
    a factor of\n      2**11, giving a ballpark estimate of 2**32.\n      Thus, for
    a known iteration count N and a known salt string, an\n      attacker with some
    number of computers comparable to the author's\n      would need roughly N*2**15
    CPU seconds to convert the entire\n      dictionary plus variations into keys.\n
    \     An attacker using a dozen such computers for a month would have\n      roughly
    2**25 CPU seconds available.  So using 2**12 (4,096)\n      iterations would mean
    an attacker with a dozen such computers\n      dedicated to a brute-force attack
    against a single key (actually,\n      any password-derived keys sharing the same
    salt and iteration\n      count) would process all the variations of the dictionary
    entries\n      in four months and, on average, would likely find the user's\n
    \     password in two months.\n      Thus, if this form of attack is of concern,
    users should be\n      required to change their passwords every few months, and
    an\n      iteration count a few orders of magnitude higher should be chosen.\n
    \     Perhaps several orders of magnitude, as many users will tend to\n      use
    the shorter and simpler passwords (to the extent they can,\n      given a site's
    password quality checks) that the attacker would\n      likely try first.\n      Since
    this estimate is based on currently available CPU power, the\n      iteration
    counts used for this mode of defense should be increased\n      over time, at
    perhaps 40%-60% each year or so.\n      Note that if the attacker has a large
    amount of storage available,\n      intermediate results could be cached, saving
    a lot of work for the\n      next attack with the same salt and a greater number
    of iterations\n      than had been run at the point where the intermediate results
    were\n      saved.  Thus, it would be wise to generate a new random salt\n      string
    when passwords are changed.  The default salt string,\n      derived from the
    principal name, only protects against the use of\n      one dictionary of keys
    against multiple users.\n   If the PBKDF2 iteration count can be spoofed by an
    intruder on the\n   network, and the limit on the accepted iteration count is
    very high,\n   the intruder may be able to introduce a form of denial of service\n
    \  attack against the client by sending a very high iteration count,\n   causing
    the client to spend a great deal of CPU time computing an\n   incorrect key.\n
    \  An intruder spoofing the KDC reply, providing a low iteration count\n   and
    reading the client's reply from the network, may be able to\n   reduce the work
    needed in the brute-force attack outlined above.\n   Thus, implementations may
    seek to enforce lower bounds on the number\n   of iterations that will be used.\n
    \  Since threat models and typical end-user equipment will vary widely\n   from
    site to site, allowing site-specific configuration of such\n   bounds is recommended.\n
    \  Any benefit against other attacks specific to the HMAC or SHA-1\n   algorithms
    is probably achieved with a fairly small number of\n   iterations.\n   In the
    \"optimistic preauthentication\" case mentioned in section 3,\n   the client may
    attempt to produce a key without first communicating\n   with the KDC.  If the
    client has no additional information, it can\n   only guess as to the iteration
    count to be used.  Even such\n   heuristics as \"iteration count X was used to
    acquire tickets for the\n   same principal only N hours ago\" can be wrong.  Given
    the\n   recommendation above for increasing the iteration counts used over\n   time,
    it is impossible to recommend any specific default value for\n   this case; allowing
    site-local configuration is recommended.  (If the\n   lower and upper bound checks
    described above are implemented, the\n   default count for optimistic preauthentication
    should be between\n   those bounds.)\n   Ciphertext stealing mode, as it requires
    no additional padding in\n   most cases, will reveal the exact length of each
    message being\n   encrypted rather than merely bounding it to a small range of
    possible\n   lengths as in CBC mode.  Such obfuscation should not be relied upon\n
    \  at higher levels in any case; if the length must be obscured from an\n   outside
    observer, this should be done by intentionally varying the\n   length of the message
    to be encrypted.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  IANA Considerations\n   Kerberos encryption and checksum type values used
    in section 7 were\n   previously reserved in [KCRYPTO] for the mechanisms defined
    in this\n   document.  The registries have been updated to list this document
    as\n   the reference.\n"
  title: 9.  IANA Considerations
- contents:
  - "10.  Acknowledgements\n   Thanks to John Brezak, Gerardo Diaz Cuellar, Ken Hornstein,
    Paul\n   Leach, Marcus Watts, Larry Zhu, and others for feedback on earlier\n
    \  versions of this document.\n"
  title: 10.  Acknowledgements
- contents:
  - "A.  Errata for RFC 2040 Section 8\n   (Copied from the RFC Editor's errata web
    site on July 8, 2004.)\n   Reported By: Bob Baldwin; baldwin@plusfive.com\n   Date:
    Fri, 26 Mar 2004 06:49:02 -0800\n   In Section 8, Description of RC5-CTS, of the
    encryption method,\n   it says:\n       1. Exclusive-or Pn-1 with the previous
    ciphertext\n          block, Cn-2, to create Xn-1.\n   It should say:\n       1.
    Exclusive-or Pn-1 with the previous ciphertext\n          block, Cn-2, to create
    Xn-1.  For short messages where\n          Cn-2 does not exist, use IV.\n   Reported
    By: Bob Baldwin; baldwin@plusfive.com\n   Date: Mon, 22 Mar 2004 20:26:40 -0800\n
    \  In Section 8, first paragraph, second sentence says:\n       This mode handles
    any length of plaintext and produces ciphertext\n       whose length matches the
    plaintext length.\n   In Section 8, first paragraph, second sentence should read:\n
    \      This mode handles any length of plaintext longer than one\n       block
    and produces ciphertext whose length matches the\n       plaintext length.\n   In
    Section 8, step 6 of the decryption method says:\n       6. Decrypt En to create
    Pn-1.\n   In Section 8, step 6 of the decryption method should read:\n       6.
    Decrypt En and exclusive-or with Cn-2 to create Pn-1.\n          For short messages
    where Cn-2 does not exist, use the IV.\n"
  title: A.  Errata for RFC 2040 Section 8
- contents:
  - "B.  Sample Test Vectors\n   Sample values for the PBKDF2 HMAC-SHA1 string-to-key
    function are\n   included below.\n   Iteration count = 1\n   Pass phrase = \"password\"\n
    \  Salt = \"ATHENA.MIT.EDUraeburn\"\n   128-bit PBKDF2 output:\n       cd ed b5
    28 1b b2 f8 01 56 5a 11 22 b2 56 35 15\n   128-bit AES key:\n       42 26 3c 6e
    89 f4 fc 28 b8 df 68 ee 09 79 9f 15\n   256-bit PBKDF2 output:\n       cd ed b5
    28 1b b2 f8 01 56 5a 11 22 b2 56 35 15\n       0a d1 f7 a0 4b b9 f3 a3 33 ec c0
    e2 e1 f7 08 37\n   256-bit AES key:\n       fe 69 7b 52 bc 0d 3c e1 44 32 ba 03
    6a 92 e6 5b\n       bb 52 28 09 90 a2 fa 27 88 39 98 d7 2a f3 01 61\n   Iteration
    count = 2\n   Pass phrase = \"password\"\n   Salt=\"ATHENA.MIT.EDUraeburn\"\n
    \  128-bit PBKDF2 output:\n       01 db ee 7f 4a 9e 24 3e 98 8b 62 c7 3c da 93
    5d\n   128-bit AES key:\n       c6 51 bf 29 e2 30 0a c2 7f a4 69 d6 93 bd da 13\n
    \  256-bit PBKDF2 output:\n       01 db ee 7f 4a 9e 24 3e 98 8b 62 c7 3c da 93
    5d\n       a0 53 78 b9 32 44 ec 8f 48 a9 9e 61 ad 79 9d 86\n   256-bit AES key:\n
    \      a2 e1 6d 16 b3 60 69 c1 35 d5 e9 d2 e2 5f 89 61\n       02 68 56 18 b9
    59 14 b4 67 c6 76 22 22 58 24 ff\n   Iteration count = 1200\n   Pass phrase =
    \"password\"\n   Salt = \"ATHENA.MIT.EDUraeburn\"\n   128-bit PBKDF2 output:\n
    \      5c 08 eb 61 fd f7 1e 4e 4e c3 cf 6b a1 f5 51 2b\n   128-bit AES key:\n
    \      4c 01 cd 46 d6 32 d0 1e 6d be 23 0a 01 ed 64 2a\n   256-bit PBKDF2 output:\n
    \      5c 08 eb 61 fd f7 1e 4e 4e c3 cf 6b a1 f5 51 2b\n       a7 e5 2d db c5
    e5 14 2f 70 8a 31 e2 e6 2b 1e 13\n   256-bit AES key:\n       55 a6 ac 74 0a d1
    7b 48 46 94 10 51 e1 e8 b0 a7\n       54 8d 93 b0 ab 30 a8 bc 3f f1 62 80 38 2b
    8c 2a\n   Iteration count = 5\n   Pass phrase = \"password\"\n   Salt=0x1234567878563412\n
    \  128-bit PBKDF2 output:\n       d1 da a7 86 15 f2 87 e6 a1 c8 b1 20 d7 06 2a
    49\n   128-bit AES key:\n       e9 b2 3d 52 27 37 47 dd 5c 35 cb 55 be 61 9d 8e\n
    \  256-bit PBKDF2 output:\n       d1 da a7 86 15 f2 87 e6 a1 c8 b1 20 d7 06 2a
    49\n       3f 98 d2 03 e6 be 49 a6 ad f4 fa 57 4b 6e 64 ee\n   256-bit AES key:\n
    \      97 a4 e7 86 be 20 d8 1a 38 2d 5e bc 96 d5 90 9c\n       ab cd ad c8 7c
    a4 8f 57 45 04 15 9f 16 c3 6e 31\n   (This test is based on values given in [PECMS].)\n
    \  Iteration count = 1200\n   Pass phrase = (64 characters)\n     \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n
    \  Salt=\"pass phrase equals block size\"\n   128-bit PBKDF2 output:\n       13
    9c 30 c0 96 6b c3 2b a5 5f db f2 12 53 0a c9\n   128-bit AES key:\n       59 d1
    bb 78 9a 82 8b 1a a5 4e f9 c2 88 3f 69 ed\n   256-bit PBKDF2 output:\n       13
    9c 30 c0 96 6b c3 2b a5 5f db f2 12 53 0a c9\n       c5 ec 59 f1 a4 52 f5 cc 9a
    d9 40 fe a0 59 8e d1\n   256-bit AES key:\n       89 ad ee 36 08 db 8b c7 1f 1b
    fb fe 45 94 86 b0\n       56 18 b7 0c ba e2 20 92 53 4e 56 c5 53 ba 4b 34\n   Iteration
    count = 1200\n   Pass phrase = (65 characters)\n     \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n
    \  Salt = \"pass phrase exceeds block size\"\n   128-bit PBKDF2 output:\n       9c
    ca d6 d4 68 77 0c d5 1b 10 e6 a6 87 21 be 61\n   128-bit AES key:\n       cb 80
    05 dc 5f 90 17 9a 7f 02 10 4c 00 18 75 1d\n   256-bit PBKDF2 output:\n       9c
    ca d6 d4 68 77 0c d5 1b 10 e6 a6 87 21 be 61\n       1a 8b 4d 28 26 01 db 3b 36
    be 92 46 91 5e c8 2a\n   256-bit AES key:\n       d7 8c 5c 9c b8 72 a8 c9 da d4
    69 7f 0b b5 b2 d2\n       14 96 c8 2b eb 2c ae da 21 12 fc ee a0 57 40 1b\n   Iteration
    count = 50\n   Pass phrase = g-clef (0xf09d849e)\n   Salt = \"EXAMPLE.COMpianist\"\n
    \  128-bit PBKDF2 output:\n       6b 9c f2 6d 45 45 5a 43 a5 b8 bb 27 6a 40 3b
    39\n   128-bit AES key:\n       f1 49 c1 f2 e1 54 a7 34 52 d4 3e 7f e6 2a 56 e5\n
    \  256-bit PBKDF2 output:\n       6b 9c f2 6d 45 45 5a 43 a5 b8 bb 27 6a 40 3b
    39\n       e7 fe 37 a0 c4 1e 02 c2 81 ff 30 69 e1 e9 4f 52\n   256-bit AES key:\n
    \      4b 6d 98 39 f8 44 06 df 1f 09 cc 16 6d b4 b8 3c\n       57 18 48 b7 84
    a3 d6 bd c3 46 58 9a 3e 39 3f 9e\n   Some test vectors for CBC with ciphertext
    stealing, using an initial\n   vector of all-zero.\n   AES 128-bit key:\n     0000:
    \ 63 68 69 63 6b 65 6e 20 74 65 72 69 79 61 6b 69\n   IV:\n     0000:  00 00 00
    00 00 00 00 00 00 00 00 00 00 00 00 00\n   Input:\n     0000:  49 20 77 6f 75
    6c 64 20 6c 69 6b 65 20 74 68 65\n     0010:  20\n   Output:\n     0000:  c6 35
    35 68 f2 bf 8c b4 d8 a5 80 36 2d a7 ff 7f\n     0010:  97\n   Next IV:\n     0000:
    \ c6 35 35 68 f2 bf 8c b4 d8 a5 80 36 2d a7 ff 7f\n   IV:\n     0000:  00 00 00
    00 00 00 00 00 00 00 00 00 00 00 00 00\n   Input:\n     0000:  49 20 77 6f 75
    6c 64 20 6c 69 6b 65 20 74 68 65\n     0010:  20 47 65 6e 65 72 61 6c 20 47 61
    75 27 73 20\n   Output:\n     0000:  fc 00 78 3e 0e fd b2 c1 d4 45 d4 c8 ef f7
    ed 22\n     0010:  97 68 72 68 d6 ec cc c0 c0 7b 25 e2 5e cf e5\n   Next IV:\n
    \    0000:  fc 00 78 3e 0e fd b2 c1 d4 45 d4 c8 ef f7 ed 22\n   IV:\n     0000:
    \ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n   Input:\n     0000:  49 20
    77 6f 75 6c 64 20 6c 69 6b 65 20 74 68 65\n     0010:  20 47 65 6e 65 72 61 6c
    20 47 61 75 27 73 20 43\n   Output:\n     0000:  39 31 25 23 a7 86 62 d5 be 7f
    cb cc 98 eb f5 a8\n     0010:  97 68 72 68 d6 ec cc c0 c0 7b 25 e2 5e cf e5 84\n
    \  Next IV:\n     0000:  39 31 25 23 a7 86 62 d5 be 7f cb cc 98 eb f5 a8\n   IV:\n
    \    0000:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n   Input:\n     0000:
    \ 49 20 77 6f 75 6c 64 20 6c 69 6b 65 20 74 68 65\n     0010:  20 47 65 6e 65
    72 61 6c 20 47 61 75 27 73 20 43\n     0020:  68 69 63 6b 65 6e 2c 20 70 6c 65
    61 73 65 2c\n   Output:\n     0000:  97 68 72 68 d6 ec cc c0 c0 7b 25 e2 5e cf
    e5 84\n     0010:  b3 ff fd 94 0c 16 a1 8c 1b 55 49 d2 f8 38 02 9e\n     0020:
    \ 39 31 25 23 a7 86 62 d5 be 7f cb cc 98 eb f5\n   Next IV:\n     0000:  b3 ff
    fd 94 0c 16 a1 8c 1b 55 49 d2 f8 38 02 9e\n   IV:\n     0000:  00 00 00 00 00
    00 00 00 00 00 00 00 00 00 00 00\n   Input:\n     0000:  49 20 77 6f 75 6c 64
    20 6c 69 6b 65 20 74 68 65\n     0010:  20 47 65 6e 65 72 61 6c 20 47 61 75 27
    73 20 43\n     0020:  68 69 63 6b 65 6e 2c 20 70 6c 65 61 73 65 2c 20\n   Output:\n
    \    0000:  97 68 72 68 d6 ec cc c0 c0 7b 25 e2 5e cf e5 84\n     0010:  9d ad
    8b bb 96 c4 cd c0 3b c1 03 e1 a1 94 bb d8\n     0020:  39 31 25 23 a7 86 62 d5
    be 7f cb cc 98 eb f5 a8\n   Next IV:\n     0000:  9d ad 8b bb 96 c4 cd c0 3b c1
    03 e1 a1 94 bb d8\n   IV:\n     0000:  00 00 00 00 00 00 00 00 00 00 00 00 00
    00 00 00\n   Input:\n     0000:  49 20 77 6f 75 6c 64 20 6c 69 6b 65 20 74 68
    65\n     0010:  20 47 65 6e 65 72 61 6c 20 47 61 75 27 73 20 43\n     0020:  68
    69 63 6b 65 6e 2c 20 70 6c 65 61 73 65 2c 20\n     0030:  61 6e 64 20 77 6f 6e
    74 6f 6e 20 73 6f 75 70 2e\n   Output:\n     0000:  97 68 72 68 d6 ec cc c0 c0
    7b 25 e2 5e cf e5 84\n     0010:  39 31 25 23 a7 86 62 d5 be 7f cb cc 98 eb f5
    a8\n     0020:  48 07 ef e8 36 ee 89 a5 26 73 0d bc 2f 7b c8 40\n     0030:  9d
    ad 8b bb 96 c4 cd c0 3b c1 03 e1 a1 94 bb d8\n   Next IV:\n     0000:  48 07 ef
    e8 36 ee 89 a5 26 73 0d bc 2f 7b c8 40\n"
  title: B.  Sample Test Vectors
- contents:
  - "Normative References\n   [AC]       Schneier, B., \"Applied Cryptography\", second
    edition, John\n              Wiley and Sons, New York, 1996.\n   [AES]      National
    Institute of Standards and Technology, U.S.\n              Department of Commerce,
    \"Advanced Encryption Standard\",\n              Federal Information Processing
    Standards Publication 197,\n              Washington, DC, November 2001.\n   [KCRYPTO]
    \ Raeburn, K., \"Encryption and Checksum Specifications for\n              Kerberos
    5\", RFC 3961, February 2005.\n   [KEYWORDS] Bradner, S., \"Key words for use
    in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
    1997.\n   [PKCS5]    Kaliski, B., \"PKCS #5: Password-Based Cryptography\n              Specification
    Version 2.0\", RFC 2898, September 2000.\n   [RC5]      Baldwin, R. and R. Rivest,
    \"The RC5, RC5-CBC, RC5-CBC-Pad,\n              and RC5-CTS Algorithms\", RFC
    2040, October 1996.\n   [SHA1]     National Institute of Standards and Technology,
    U.S.\n              Department of Commerce, \"Secure Hash Standard\", Federal\n
    \             Information Processing Standards Publication 180-1,\n              Washington,
    DC, April 1995.\n"
  title: Normative References
- contents:
  - "Informative References\n   [LEACH]    Leach, P., email to IETF Kerberos working
    group mailing\n              list, 5 May 2003, ftp://ftp.ietf.org/ietf-mail-\n
    \             archive/krb-wg/2003-05.mail.\n   [PECMS]    Gutmann, P., \"Password-based
    Encryption for CMS\", RFC\n              3211, December 2001.\n"
  title: Informative References
- contents:
  - "Author's Address\n   Kenneth Raeburn\n   Massachusetts Institute of Technology\n
    \  77 Massachusetts Avenue\n   Cambridge, MA 02139\n   EMail: raeburn@mit.edu\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the IETF's procedures with respect
    to rights in IETF Documents can\n   be found in BCP 78 and BCP 79.\n   Copies
    of IPR disclosures made to the IETF Secretariat and any\n   assurances of licenses
    to be made available, or the result of an\n   attempt made to obtain a general
    license or permission for the use of\n   such proprietary rights by implementers
    or users of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
