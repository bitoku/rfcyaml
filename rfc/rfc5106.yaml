- title: __initial_text__
  contents:
  - " The Extensible Authentication Protocol-Internet Key Exchange Protocol\n    \
    \                 version 2 (EAP-IKEv2) Method\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies EAP-IKEv2, an Extensible Authentication\n\
    \   Protocol (EAP) method that is based on the Internet Key Exchange\n   (IKEv2)\
    \ protocol.  EAP-IKEv2 provides mutual authentication and\n   session key establishment\
    \ between an EAP peer and an EAP server.  It\n   supports authentication techniques\
    \ that are based on passwords,\n   high-entropy shared keys, and public key certificates.\
    \  EAP-IKEv2\n   further provides support for cryptographic ciphersuite negotiation,\n\
    \   hash function agility, identity confidentiality (in certain modes of\n   operation),\
    \ fragmentation, and an optional \"fast reconnect\" mode.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. Protocol Overview ...............................................6\n   4.\
    \ Fast Reconnect ..................................................9\n   5. Key\
    \ Derivation .................................................12\n   6. Session\
    \ ID, Peer ID, and Server ID .............................13\n   7. Error Handling\
    \ .................................................13\n   8. Specification of\
    \ Protocol Fields ...............................16\n      8.1. The Flags, Message\
    \ Length, and Integrity Checksum\n           Data Fields ...............................................17\n\
    \      8.2. EAP-IKEv2 Header ..........................................19\n  \
    \    8.3. Security Association Payload ..............................19\n    \
    \  8.4. Key Exchange Payload ......................................20\n      8.5.\
    \ Nonce Payload .............................................20\n      8.6. Identification\
    \ Payload ....................................20\n      8.7. Certificate Payload\
    \ .......................................20\n      8.8. Certificate Request Payload\
    \ ...............................20\n      8.9. Encrypted Payload .........................................20\n\
    \      8.10. Authentication Payload ...................................20\n  \
    \    8.11. Notify Payload ...........................................21\n    \
    \  8.12. Next Fast-ID Payload .....................................21\n   9. Payload\
    \ Types and Extensibility ................................22\n   10. Security\
    \ Considerations .......................................22\n      10.1. Protected\
    \ Ciphersuite Negotiation ........................23\n      10.2. Mutual Authentication\
    \ ....................................23\n      10.3. Integrity Protection .....................................23\n\
    \      10.4. Replay Protection ........................................23\n  \
    \    10.5. Confidentiality ..........................................23\n    \
    \  10.6. Key Strength .............................................24\n      10.7.\
    \ Dictionary Attack Resistance .............................24\n      10.8. Fast\
    \ Reconnect ...........................................25\n      10.9. Cryptographic\
    \ Binding ....................................25\n      10.10. Session Independence\
    \ ....................................25\n      10.11. Fragmentation ...........................................26\n\
    \      10.12. Channel Binding .........................................26\n  \
    \    10.13. Summary .................................................26\n   11.\
    \ IANA Considerations ...........................................27\n   12. Contributors\
    \ ..................................................28\n   13. Acknowledgements\
    \ ..............................................28\n   14. References ....................................................29\n\
    \      14.1. Normative References .....................................29\n  \
    \    14.2. Informative References ...................................29\n   Appendix\
    \ A ........................................................30\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies EAP-IKEv2, an EAP method that is\
    \ based on the\n   Internet Key Exchange Protocol version 2 (IKEv2) [1].  EAP-IKEv2\n\
    \   provides mutual authentication and session key establishment between\n   an\
    \ EAP peer and an EAP server.  It supports authentication techniques\n   that\
    \ are based on the following types of credentials:\n   o  Asymmetric key pairs:\
    \ these are public/private key pairs where the\n      public key is embedded into\
    \ a digital certificate, and the\n      corresponding private key is known only\
    \ to a single party.\n   o  Passwords: these are low-entropy bit strings that\
    \ are known to\n      both the server and the peer.\n   o  Symmetric keys: these\
    \ are high-entropy bit strings that are known\n      to both the server and the\
    \ peer.\n   It is possible to use a different authentication credential (and\n\
    \   thereby technique) for each direction, e.g., the EAP server may\n   authenticate\
    \ itself using a public/private key pair and the EAP\n   client may authenticate\
    \ itself using a symmetric key.  In particular,\n   the following combinations\
    \ are expected to be used in practice; these\n   are referred to as \"use cases\"\
    \ or \"modes\" in the remainder of this\n   document:\n   1.  EAP server: asymmetric\
    \ key pair, EAP peer: asymmetric key pair\n   2.  EAP server: asymmetric key pair,\
    \ EAP peer: symmetric key\n   3.  EAP server: asymmetric key pair, EAP peer: password\n\
    \   4.  EAP server: symmetric key, EAP peer: symmetric key\n   Note that in use\
    \ cases 2 and 4, a symmetric key is assumed to be\n   chosen uniformly at random\
    \ from its key space; it is therefore\n   assumed that symmetric keys are not\
    \ derived from passwords.  Deriving\n   a symmetric key from a password is insecure\
    \ when used with mode 4\n   since the exchange is vulnerable to dictionary attacks,\
    \ as described\n   in more detail in Section 10.7.  Also note that in use case\
    \ 3, the\n   EAP server must either have access to all passwords in plaintext,\
    \ or,\n   alternatively, for each password store, the value prf(password,\"Key\n\
    \   Pad for EAP-IKEv2\") for all supported pseudorandom functions (also\n   see\
    \ Section 8.10 below and Section 2.15 of [1]).  Other conceivable\n   use cases\
    \ are not expected to be used in practice due to key\n   management issues, and\
    \ have not been considered in this document.\n   Note that the IKEv2 protocol\
    \ is able to carry EAP exchanges.  By\n   contrast, EAP-IKEv2 does not inherit\
    \ this capability.  That is, it is\n   not possible to tunnel EAP methods inside\
    \ EAP-IKEv2.  Also note that\n   the set of functionality provided by EAP-IKEv2\
    \ is similar, but not\n   identical, to that provided by other EAP methods such\
    \ as, for\n   example, EAP-TLS [6].\n   The remainder of this document is structured\
    \ as follows:\n   o  Section 2 provides an overview of the terminology and the\n\
    \      abbreviations used in this document.\n   o  Section 3 provides an overview\
    \ of the full EAP-IKEv2 exchange and\n      thereby specifies the protocol message\
    \ composition.\n   o  Section 4 specifies the optional EAP-IKEv2 \"fast reconnect\"\
    \ mode\n      of operation.\n   o  Section 5 specifies how exportable session\
    \ keys are derived.\n   o  Section 6 specifies how the Session-ID, Peer-ID, and\
    \ Server-ID\n      elements are derived.\n   o  Section 7 specifies how errors\
    \ that may potentially occur during\n      protocol execution are handled.\n \
    \  o  Section 8 specifies the format of the EAP-IKEv2 data fields.\n      Section\
    \ 8.1 describes how fragmentation is handled in EAP-IKEv2.\n   o  Section 9 specifies\
    \ the payload type values and describes protocol\n      extensibility.\n   o \
    \ Section 10 provides a list of claimed security properties.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document makes use of terms defined in [2] and [1].\
    \  In\n   addition, the keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT,\n\
    \   SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear\n   in\
    \ this document, are to be interpreted as described in [3].\n   A list of abbreviations\
    \ that are used in this document follows.\n   AUTH:\n      Denotes a data field\
    \ containing either a Message Authentication\n      Code (MAC) or a signature.\
    \  This field is embedded into an\n      Authentication payload, defined in Section\
    \ 8.10.\n   CERT:\n      Public key certificate or similar structure.\n   CERTREQ:\n\
    \      Certificate Request.\n   NFID:\n      Next Fast-ID payload (see Sections\
    \ 4 and 8.12)\n   EMSK:\n      Extended Master Session Key, defined in [2].\n\
    \   HDR:\n      EAP-IKEv2 header, defined in Section 8.2.\n   I:\n      Initiator,\
    \ the party that sends the first message of an EAP-IKEv2\n      protocol run.\
    \  This is always the EAP server.\n   MAC:\n      Message Authentication Code.\
    \  The result of a cryptographic\n      operation that involves a symmetric key.\n\
    \   MSK:\n      Master Session Key, defined in [2].\n   prf:\n      Pseudorandom\
    \ function: a cryptographic function whose output is\n      assumed to be indistinguishable\
    \ from that of a truly random\n      function.\n   R:\n      Responder, the party\
    \ that sends the second message of an EAP-IKEv2\n      protocol run.  This is\
    \ always the EAP peer.\n   SA:\n      Security Association.  In this document,\
    \ SA denotes a type of\n      payload that is used for the negotiation of the\
    \ cryptographic\n      algorithms that are to be used within an EAP-IKEv2 protocol\
    \ run.\n      Specifically, SAi denotes a set of choices that are accepted by\
    \ an\n      initiator, and SAr denotes the choice of the responder.\n   Signature:\n\
    \      The result of a cryptographic operation that involves an\n      asymmetric\
    \ key.  In particular, it involves the private part of a\n      public/private\
    \ key pair.\n   SK:\n      Session Key.  In this document, the notation SK{x}\
    \ denotes that x\n      is embedded within an Encrypted payload, i.e., that x\
    \ is encrypted\n      and integrity-protected using EAP-IKEv2 internal keys. \
    \ These keys\n      are different in each direction.\n   SK_xx:\n      EAP-IKEv2\
    \ internal key, defined in Section 2.14 of [1].\n   SKEYSEED:\n      Keying material,\
    \ defined in Section 2.14 of [1].\n"
- title: 3.  Protocol Overview
  contents:
  - "3.  Protocol Overview\n   In this section, the full EAP-IKEv2 protocol run is\
    \ specified.  All\n   messages are sent between two parties, namely an EAP peer\
    \ and an EAP\n   server.  In EAP-IKEv2, the EAP server always assumes the role\
    \ of the\n   initiator (I), and the EAP peer that of the responder (R) of an\n\
    \   exchange.\n   The semantics and formats of EAP-IKEv2 messages are similar,\
    \ albeit\n   not identical, to those specified in IKEv2 [1] for the establishment\n\
    \   of an IKE Security Association.  The full EAP-IKEv2 protocol run\n   consists\
    \ of two roundtrips that are followed by either an EAP-Success\n   or an EAP-Failure\
    \ message.  An optional roundtrip for exchanging EAP\n   identities may precede\
    \ the two exchanges.\n   1. R<-I: EAP-Request/Identity\n   2. R->I: EAP-Response/Identity(Id)\n\
    \   3. R<-I: EAP-Req (HDR, SAi, KEi, Ni)\n   4. R->I: EAP-Res (HDR, SAr, KEr,\
    \ Nr, [CERTREQ], [SK{IDr}])\n   5. R<-I: EAP-Req (HDR, SK{IDi, [CERT], [CERTREQ],\
    \ [NFID], AUTH})\n   6. R->I: EAP-Res (HDR, SK{IDr, [CERT], AUTH})\n   7. R<-I:\
    \ EAP-Success\n             Figure 1: EAP-IKEv2 Full, Successful Protocol Run\n\
    \   Figure 1 shows the full EAP-IKEv2 protocol run, including the\n   optional\
    \ EAP identity exchange (messages 1 and 2).  A detailed\n   specification of the\
    \ message composition follows.\n   Messages 1 and 2 are a standard EAP Identity\
    \ Request and Response, as\n   defined in [2].  Message 3 is the first EAP-IKEv2-specific\
    \ message.\n   With this, the server starts the actual EAP authentication exchange.\n\
    \   It contains the initiator Security Parameter Index (SPI) in the EAP-\n   IKEv2\
    \ header (HDR) (the initiator selects a new SPI for each protocol\n   run), the\
    \ set of cryptographic algorithms the server is willing to\n   accept for the\
    \ protection of EAP-IKEv2 traffic (encryption and\n   integrity protection), and\
    \ the derivation of the session key.  This\n   set is encoded in the Security\
    \ Association payload (SAi).  It also\n   contains a Diffie-Hellman payload (KEi),\
    \ and a Nonce payload (Ni).\n   When the peer receives message 3, it selects a\
    \ set of cryptographic\n   algorithms from the ones that are proposed in the message.\
    \  In this\n   overview, it is assumed that an acceptable such set exists (and\
    \ is\n   thus selected), and that the Diffie-Hellman value KEi belongs to an\n\
    \   acceptable group.  The peer then generates a non-zero Responder SPI\n   value\
    \ for this protocol run, its own Diffie-Hellman value (KEr) and\n   nonce (Nr),\
    \ and calculates the keys SKEYSEED, SK_d, SK_ai, SK_ar,\n   SK_ei, SK_er, SK_pi,\
    \ and SK_pr, according to Section 2.14 of [1].\n   The peer then constructs message\
    \ 4.  In the context of use cases 1,\n   2, and 3, the peer's local policy MAY\
    \ dictate the inclusion of the\n   optional CERTREQ payload in that message, which\
    \ gives a hint to the\n   server to include a certificate for its public key in\
    \ its next\n   message.  In the context of use case 4, the peer MUST include the\n\
    \   optional SK{IDr} payload, which contains its EAP-IKEv2 identifier,\n   encrypted\
    \ and integrity-protected within an Encrypted payload.  The\n   keys used to construct\
    \ this Encrypted payload are SK_er (for\n   encryption) and SK_ar (for integrity\
    \ protection), in accordance with\n   [1].  The responder's EAP-IKEv2 identifier\
    \ (IDr) is likely to be\n   needed in these use cases by the server in order to\
    \ select the\n   correct symmetric key or password for the construction of the\
    \ AUTH\n   payload of message 5.\n   Upon reception of message 4, the server also\
    \ computes SKEYSEED, SK_d,\n   SK_ai, SK_ar, SK_ei, SK_er, SK_pi, and SK_pr, according\
    \ to Section\n   2.14 of [1].  If an SK{IDr} payload is included, the server decrypts\n\
    \   it and verifies its integrity with the corresponding keys.  In this\n   overview,\
    \ decryption and verification is assumed to succeed.  The\n   server then constructs\
    \ message 5, which contains only the EAP-IKEv2\n   header followed by a single\
    \ Encrypted payload.  The keys used to\n   generate the encrypted payload MUST\
    \ be SK_ei (for encryption) and\n   SK_ai (for integrity protection), in accordance\
    \ with [1].  The\n   initiator MUST embed at least two payloads in the Encrypted\
    \ Payload,\n   as follows.  An Identification payload with the initiator's EAP-IKEv2\n\
    \   identifier MUST be embedded in the Encrypted payload.  The\n   Authentication\
    \ payload MUST be embedded in the Encrypted payload.  A\n   Certificate payload,\
    \ and/or a Certificate Request payload, MAY also\n   be embedded in the Encrypted\
    \ payload.  Moreover, a Next Fast-\n   Reconnect Identifier payload MAY also be\
    \ embedded in the Encrypted\n   payload.  Message 5 is sent to the responder.\n\
    \   Upon reception of message 5, the responder (EAP peer) authenticates\n   the\
    \ initiator (EAP server).  The checks that are performed to this\n   end depend\
    \ on the use case, local policies, and are specified in [1].\n   These checks\
    \ include (but may not be limited to) decrypting the\n   Encrypted payload, verifying\
    \ its integrity, and checking that the\n   Authentication payload contains the\
    \ expected value.  If all checks\n   succeed (which is assumed in this overview),\
    \ then the responder\n   constructs message 6.  That message MUST contain the\
    \ EAP-IKEv2 header\n   followed by a single Encrypted payload, in which at least\
    \ two further\n   payloads MUST be embedded, as shown in Figure 1.\n   Upon reception\
    \ of message 6, the initiator (EAP server) authenticates\n   the responder (EAP\
    \ peer).  As above, the checks that are performed to\n   this end depend on the\
    \ use case, local policies, and MUST include\n   decryption and verification of\
    \ the Encrypted payload, as well as\n   checking that the Authentication payload\
    \ contains the expected value.\n   If the optional SK{IDr} payload was included\
    \ in message 4, the EAP\n   server MUST also ensure that the IDr payload in message\
    \ 6 is\n   identical to that in message 4.\n   If authentication succeeds, an\
    \ EAP-Success message is sent to the\n   responder as message 7.  The EAP server\
    \ and the EAP peer generate a\n   Master Session Key (MSK) and an Extended Master\
    \ Session Key (EMSK)\n   after a successful EAP-IKEv2 protocol run, according\
    \ to Section 5.\n"
- title: 4.  Fast Reconnect
  contents:
  - "4.  Fast Reconnect\n   This section specifies a \"fast reconnect\" mode of operation\
    \ for EAP-\n   IKEv2.  This mode is mandatory to implement, but optional to use.\n\
    \   The purpose of fast reconnect is to enable an efficient re-\n   authentication\
    \ procedure that also results in a fresh MSK and EMSK.\n   The \"fast reconnect\"\
    \ mode can only be used where an EAP-IKEv2\n   security context already exists\
    \ at both the server and the peer, and\n   its usage is subject to the local policies.\
    \  In other words, it can\n   only be used by an EAP server/EAP peer pair that\
    \ has already\n   performed mutual authentication in a previous EAP-IKEv2 protocol\
    \ run.\n   The fast reconnect mode makes use of dedicated \"fast reconnect EAP\n\
    \   identifiers\".  The idea is that the server indicates its willingness\n  \
    \ to engage in \"fast reconnect\" protocol runs in the future by\n   including\
    \ the optional \"Next Fast-ID\" (NFID) payload in message 5 of\n   a \"full\"\
    \ protocol run (see Figure 1), or in message 3 of a \"fast\n   reconnect\" protocol\
    \ run (see Figure 2).  This NFID payload contains a\n   special EAP identity,\
    \ denoted Fast Reconnect Identity (FRID) as the\n   Network Access Identifier\
    \ (NAI) in the EAP-Response/Identity message.\n   The FRID contains an obfuscated\
    \ username part and a realm part.  When\n   generating a FRID, the following aspects\
    \ should be considered:\n      The FRID and therefore the pseudonym usernames\
    \ are generated by\n      the EAP server.  The EAP server produces pseudonym usernames\
    \ in an\n      implementation-dependent manner.  Only the EAP server needs to\
    \ be\n      able to map the pseudonym username to the permanent identity.\n  \
    \    EAP-IKEv2 includes no provisions to ensure that the same EAP\n      server\
    \ that generated a pseudonym username will be used on the\n      authentication\
    \ exchange when the pseudonym username is used.  It\n      is recommended that\
    \ the EAP servers implement some centralized\n      mechanism to allow all EAP\
    \ servers of the home operator to map\n      pseudonyms generated by other severs\
    \ to the permanent identity.\n      If no such mechanism is available, then the\
    \ EAP server, failing to\n      understand a pseudonym issued by another server,\
    \ can request the\n      peer to send the permanent identity.\n      When generating\
    \ FRIDs, the server SHOULD choose a fresh and unique\n      FRID that is different\
    \ from the previous ones that were used after\n      the same full authentication\
    \ exchange.  The FRID SHOULD include a\n      random component in the username\
    \ part.  The random component works\n      as a reference to the security context.\
    \  Regardless of the\n      construction method, the pseudonym username MUST conform\
    \ to the\n      grammar specified for the username portion of an NAI.  Also, the\n\
    \      FRID MUST conform to the NAI grammar [4].  The EAP servers, which\n   \
    \   subscribers of an operator can use, MUST ensure that the username\n      part\
    \ of a FRIDs that they generate are unique.\n   The peer MAY use the FRID to indicate\
    \ to start a \"fast reconnect\"\n   protocol run.  The EAP Identity Response MUST\
    \ be sent at the\n   beginning of a \"fast reconnect\" protocol run.  If, in the\
    \ previous\n   successful \"full\" (resp. \"fast reconnect\") EAP-IKEv2 protocol\n\
    \   execution, the server had not included an NFID payload in message 5\n   (resp.\
    \ 3), then the peer MUST NOT start a fast reconnect protocol\n   run.  On reception\
    \ of FRID, the server maps it to an existing EAP-\n   IKEv2 security context.\
    \  Depending on local policy, the server either\n   proceeds with the \"fast reconnect\"\
    \ protocol run, or proceeds with\n   message 3 of a \"full\" protocol run.  If\
    \ the server had advertised the\n   FRID in the previous EAP-IKEv2 protocol execution,\
    \ it SHOULD proceed\n   with a \"fast reconnect\" protocol run.  The peer MUST\
    \ be able to\n   correctly handle a message 3 of a \"full\" protocol run, even\
    \ if it\n   indicated a FRID in its EAP Identity Response.\n   Because the peer\
    \ may fail to save a FRID that was sent in the NFID\n   payload (for example,\
    \ due to malfunction), the EAP server SHOULD\n   maintain, at least, the most\
    \ recently used FRID in addition to the\n   most recently issued FRID.  If the\
    \ authentication exchange is not\n   completed successfully, then the server MUST\
    \ NOT overwrite the FRID\n   that was issued during the most recent successful\
    \ authentication\n   exchange.\n   The EAP-IKEv2 fast reconnect exchange is similar\
    \ to the IKE-SA\n   rekeying procedure, as specified in Section 2.18 of [1]. \
    \ Thus, it\n   uses a CREATE_CHILD_SA request and response.  The SPIs on those\
    \ two\n   messages would be the SPIs negotiated on the previous exchange.\n  \
    \ During fast reconnect, the server and the peer MAY exchange fresh\n   Diffie-Hellman\
    \ values.\n   1. R<-I: EAP-Request/Identity\n   2. R->I: EAP-Response/Identity(FRID)\n\
    \   3. R<-I: EAP-Req(HDR, SK{SA, Ni, [KEi], [NFID]})\n   4. R->I: EAP-Res(HDR,\
    \ SK{SA, Nr, [KEr]})\n   5. R<-I: EAP-Success\n                   Figure 2: Fast\
    \ Reconnect Protocol Run\n   Figure 2 shows the message exchange for the EAP-IKEv2\
    \ fast reconnect\n   mode.  As in the full mode, the EAP server is the initiator\
    \ and the\n   EAP peer is the responder.  The first two messages constitute the\n\
    \   standard EAP identity exchange.  Note that, in order to use the \"fast\n \
    \  reconnect\" mode, message 2 MUST be sent.  This is in order to enable\n   the\
    \ peer to indicate its \"fast reconnect\" identity FRID in message 2.\n   If the\
    \ server can map the FRID to an existing EAP-IKEv2 context it\n   proceeds with\
    \ message 3.  Note that, in this message, the server MAY\n   embed an NFID payload\
    \ into the encrypted payload to provide a new\n   FRID to the peer.  The server\
    \ MAY choose to perform a full EAP-IKEv2\n   run, in which case, it would respond\
    \ with a message that conforms to\n   the format of message 3 in Figure 1.\n \
    \  Messages 3 and 4 establish a new EAP-IKEv2 security context.  In\n   message\
    \ 3, the initiator MUST select a new (non-zero) value for the\n   SPI field in\
    \ each proposal substructure in the SA payload (see\n   Section 3.3 of [1]). \
    \ The value of the IKE_SA Responder's SPI field\n   in HDR MUST be the one from\
    \ the previous successful EAP-IKEv2\n   protocol run.  The nonce inside the Nonce\
    \ payload (Ni) MUST be fresh,\n   and the Diffie-Hellman value inside the Diffie-Hellman\
    \ payload (if\n   present, KEi) MUST also be fresh.  If present, the Diffie-Hellman\n\
    \   value MUST be drawn from the same group as the Diffie-Hellman value\n   in\
    \ the previous successful full EAP-IKEv2 protocol run.  Note that\n   the algorithms\
    \ and keys that are used to construct the Encrypted\n   payload in message 3 are\
    \ the same as in the previous successful EAP-\n   IKEv2 protocol run.\n   Upon\
    \ reception of message 3, the responder (EAP peer) decrypts and\n   verifies the\
    \ Encrypted payload.  If successful (as assumed in Figure\n   2), it constructs\
    \ message 4 in a fashion similar to the construction\n   of message 3.  The responder\
    \ MUST choose a new (non-zero) value for\n   the SPI field in each proposal substructure.\
    \  Upon reception of\n   message 4, the initiator (EAP server) decrypts and verifies\
    \ the\n   Encrypted payload.  If a correct message 4 is received, then this\n\
    \   protocol run is deemed successful, and the server responds with an\n   EAP-Success\
    \ message (message 5).\n   After successful EAP-IKEv2 fast reconnect protocol\
    \ run, both the\n   initiator and the responder generate fresh keying material\
    \ that is\n   used for the protection of subsequent EAP-IKEv2 traffic.\n   Furthermore,\
    \ both the initiator and the responder MUST generate a\n   fresh MSK and EMSK\
    \ and export them.\n   The new EAP-IKEv2-specific keying material is computed\
    \ in the same\n   way as in the full EAP-IKEv2 protocol run, and in accordance\
    \ with\n   Section 2.18 of [1].  That is, SKEYSEED is computed as SKEYSEED =\n\
    \   prf(SK_d (old), [g^ir (new)] | Ni | Nr), where SK_d (old) is the key\n   SK_d\
    \ from the previous successful EAP-IKEv2 protocol run, Ni and Nr\n   are the nonces\
    \ (without the Nonce payload headers) that were\n   exchanged in messages 3 and\
    \ 4, and g^ir (new) is the newly computed\n   Diffie-Hellman key, if both the\
    \ values KEi and KEr were present in\n   messages 3 and 4.  The remaining EAP-IKEv2-specific\
    \ keys (SK_d,\n   SK_ai, SK_ar, SK_ei, SK_er, SK_pi, and SK_pr) are generated\
    \ as in the\n   full EAP-IKEv2 protocol run.\n   The generation of a fresh MSK\
    \ and EMSK follows the generation of the\n   EAP-IKEv2-specific keys and adheres\
    \ to the rules in Section 5.\n   Note 1: In EAP-IKEv2, the EAP server initiates\
    \ the fast reconnect\n   mode and thereby causes fresh session keys to be established.\n\
    \   Note 2: It is conceivable that an adversary tries to launch a replay\n   attack\
    \ against the EAP-IKEv2 fast reconnect mode of operation.  In\n   particular,\
    \ the adversary may try to send a previously captured\n   message 3 in a subsequent\
    \ fast reconnect protocol run.  This replay\n   attempt will, however, fail because\
    \ the keys that the responder will\n   use to verify and decrypt the Encrypted\
    \ payload are changed with\n   every successful reconnect protocol run.\n"
- title: 5.  Key Derivation
  contents:
  - "5.  Key Derivation\n   This section describes how the Master Session Key (MSK)\
    \ and the\n   Extended Master Session Key (EMSK) are derived in EAP-IKEv2.  It\
    \ is\n   expected that the MSK and the EMSK are exported by the EAP-IKEv2\n  \
    \ process and be used in accordance with the EAP keying framework [7].\n   During\
    \ an EAP-IKEv2 protocol run, the initiator and the responder\n   generate a number\
    \ of keys, as described above and in accordance with\n   Section 2.14 of [1].\
    \  The generation of these keys is based on a\n   pseudorandom function (prf)\
    \ that both parties have agreed to use and\n   that is applied in an iterative\
    \ fashion.  This iterative fashion is\n   specified in Section 2.13 of [1] and\
    \ is denoted by prf+.\n   In particular, following a successful EAP-IKEv2 protocol\
    \ run, both\n   parties generate 128 octets of keying material, denoted KEYMAT,\
    \ as\n   KEYMAT = prf+(SK_d, Ni | Nr), where Ni and Nr are the nonces (just\n\
    \   payload without headers) from messages 3 and 4 shown in Figure 1 (in\n   the\
    \ context of a full EAP-IKEv2 protocol run) or Figure 2 (in the\n   context of\
    \ a fast reconnect EAP-IKEv2 protocol run).  Note that only\n   the nonces are\
    \ used, i.e., not the entire Nonce payload that contains\n   them.\n   The first\
    \ 64 octets of KEYMAT are exported as the EAP MSK, and the\n   second 64 octets\
    \ are exported as the EMSK.\n   The MSK and EMSK MUST NOT be generated unless\
    \ an EAP-IKEv2 protocol\n   run completes successfully.  Note that the EAP-IKEv2\
    \ method does not\n   produce an initialisation vector [7].\n"
- title: 6.  Session ID, Peer ID, and Server ID
  contents:
  - "6.  Session ID, Peer ID, and Server ID\n   The EAP key management framework [7]\
    \ requires that EAP methods export\n   three information elements, called the\
    \ Session-ID, the Peer-ID, and\n   the Server-ID.  In EAP-IKEv2, these elements\
    \ are derived as follows:\n   o  The Session-ID is constructed and exported as\
    \ the concatenation of\n      the following three elements, in this order: (a)\
    \ the EAP Code Type\n      for EAP-IKEv2 (to be defined by IANA), (b) the contents\
    \ of the\n      Nonce Data field of the Nonce Payload Ni from message 3, (c) the\n\
    \      contents of the Nonce Data field of the Nonce Payload Nr from\n      message\
    \ 4.\n   o  In case of a full EAP-IKEv2 protocol run, the Peer-ID is\n      constructed\
    \ and exported as the content of the Identification Data\n      field of the Identification\
    \ Payload IDr from message 6.  Note that\n      only the \"actual\" identification\
    \ data is exported, as indicated in\n      the Payload Length field; if the Identification\
    \ Data field\n      contains any padding, this padding is ignored.  In case of\
    \ a \"fast\n      reconnect\" protocol run, the Peer-ID field is constructed in\n\
    \      exactly the same manner, where message 6 refers to the full EAP-\n    \
    \  IKEv2 protocol run that originally established the security\n      context\
    \ between the EAP peer and EAP server.\n   o  In case of a full EAP-IKEv2 protocol\
    \ run, the Server-ID is\n      constructed and exported as the contents of the\
    \ Identification\n      Data field of the Identification Payload IDi from message\
    \ 5.  Note\n      that only the \"actual\" identification data is exported, as\n\
    \      indicated in the Payload Length field; if the Identification Data\n   \
    \   field contains any padding, this padding is ignored.  In case of a\n     \
    \ \"fast reconnect\" protocol run, the Server-ID field is constructed\n      in\
    \ exactly the same manner, where message 5 refers to the full\n      EAP-IKEv2\
    \ protocol run that originally established the security\n      context between\
    \ the EAP peer and EAP server.\n"
- title: 7.  Error Handling
  contents:
  - "7.  Error Handling\n   This section specifies how errors are handled within EAP-IKEv2.\
    \  For\n   conveying error information from one party to the other, the Notify\n\
    \   payload is defined and used (see Section 8.11).\n   If, in a full EAP-IKEv2\
    \ protocol run, authentication fails (i.e., the\n   verification of the AUTH field\
    \ fails at the server or the peer), but\n   no other errors have occurred, the\
    \ message flow deviates from that\n   described in Section 3.  The message flows\
    \ in the presence of\n   authentication failures are specified in Appendix A.\n\
    \   If, in message 3 of a full EAP-IKEv2 protocol run (see Figure 1), the\n  \
    \ responder receives a Diffie-Hellman value (KEi) that belongs to a\n   group\
    \ that is not supported (and in the absence of other errors),\n   then the responder\
    \ MUST send a message of the form shown in Figure 3\n   to the initiator.  This\
    \ effectively becomes message 4 in the full\n   protocol run.\n   1. R<-I: EAP-Request/Identity\n\
    \   2. R->I: EAP-Response/Identity(Id)\n   3. R<-I: EAP-Req (HDR, SAi, KEi, Ni)\n\
    \   4. R->I: EAP-Res (HDR, N(INVALID_KE_PAYLOAD))\n         Figure 3: Error Handling\
    \ in Case of Unsupported D-H Value\n   The above message consists of the EAP-IKEv2\
    \ header and a Notification\n   payload with the value of the Notify Message Type\
    \ field value set to\n   17 (INVALID_KE_PAYLOAD).  There is a two-octet value\
    \ associated with\n   this notification: the number of the selected DH Group in\
    \ big endian\n   order, as specified in Section 3.10.1 of [1].  This number MUST\n\
    \   represent a DH group that is supported by both the initiator and the\n   responder.\n\
    \   If, during a full EAP-IKEv2 protocol run (see Figure 1), the\n   initiator\
    \ receives a message conforming to Figure 3 instead of the\n   usual message 4,\
    \ then it MUST check whether or not the indicated DH\n   group was proposed in\
    \ message 3.  If it was not, then the initiator\n   MUST silently discard the\
    \ message.  Otherwise, the protocol continues\n   with a new message 3 that the\
    \ initiator sends to the peer.  In this\n   new message 3, the initiator MUST\
    \ use a Diffie-Hellman value that is\n   drawn from the group that is indicated\
    \ in the Notify payload of\n   message 4 in Figure 3.\n   If, in the context of\
    \ use case 4 and during a full EAP-IKEv2 protocol\n   run (see Figure 1), the\
    \ initiator receives, in message 4, an SK{IDr}\n   payload that decrypts to a\
    \ non-existent or unauthorised EAP-IKEv2\n   responder identifier IDr*, then the\
    \ server SHOULD continue the\n   protocol with a message conforming to the format\
    \ of message 5.  The\n   AUTH payload in that message SHOULD contain a value that\
    \ is\n   computationally indistinguishable from a value that it would contain\n\
    \   if IDr* was valid and authorised.  This can be accomplished, for\n   example,\
    \ by generating a random key and calculating AUTH as usual\n   (however, this\
    \ document does not mandate a specific mechanism).  Only\n   after receiving message\
    \ 6, the server SHOULD respond with an\n   authentication failure notification,\
    \ i.e., a message conforming to\n   message 6 in Figure 10.  The purpose of this\
    \ behaviour is to prevent\n   an adversary from probing the EAP-IKEv2 peer identifier\
    \ space.\n   If, in the context of use cases 1, 2, or 3 and during a full EAP-\n\
    \   IKEv2 protocol run (see Figure 1), the initiator receives, in message\n  \
    \ 4, an SK{IDr} payload that decrypts to an EAP-IKEv2 responder\n   identifier\
    \ IDr*, then the server MUST continue the protocol as usual\n   (note that such\
    \ a payload would not be required in these use cases).\n   The server MUST compare\
    \ IDr* with the IDr received in message 6 and,\n   in case of a mismatch, MUST\
    \ respond with an authentication failure\n   notification, i.e., a message conforming\
    \ to message 6 in Figure 10.\n   If no mismatch is detected, normal processing\
    \ applies.\n   Other errors do not trigger messages with Notification payloads\
    \ to be\n   sent, and MUST be treated as if nothing happened (i.e., the erroneous\n\
    \   EAP-IKEv2 packet MUST be silently discarded).  This includes\n   situations\
    \ where at least one of the following conditions is met,\n   with respect to an\
    \ incoming EAP-IKEv2 packet.\n   o  The packet contains an Encrypted payload that,\
    \ when decrypted with\n      the appropriate key, yields an invalid decryption.\n\
    \   o  The packet contains an Encrypted payload with a Checksum field\n      that\
    \ does not verify with the appropriate key.\n   o  The packet contains an Integrity\
    \ Checksum Data field (see *Figure\n      4) that is incorrect.\n   o  The packet\
    \ does not contain a compulsory field.\n   o  A field in the packet contains an\
    \ invalid value (e.g., an invalid\n      combination of flags, a length field\
    \ that is inconsistent with the\n      real length of the field or packet, or\
    \ the responder's choice of a\n      cryptographic algorithm is different to NONE\
    \ and any of those that\n      were offered by the initiator).\n   o  The packet\
    \ contains an invalid combination of fields (e.g., it\n      contains two or more\
    \ Notify payloads with the same Notify Message\n      Type value, or two or more\
    \ Transform substructures with the same\n      Transform Type and Transform ID\
    \ value).\n   o  The packet causes a defragmentation error.\n   o  The format\
    \ of the packet is invalid.\n   o  The identity provided by the EAP peer in the\
    \ EAP-Response/Identity\n      cannot be associated with either an established\
    \ security context\n      (in case of a fast reconnect) or with a real user account\
    \ (in case\n      of a full protocol exchange).  In that case, the packet is\n\
    \      silently discarded.  With an outstanding message from the EAP\n      server,\
    \ the client may either retransmit the previous request or,\n      in case of\
    \ a fast reconnect, assume that state information was\n      deleted (e.g., due\
    \ to garbage collection) at the EAP server and\n      fall back to a previously\
    \ used FRID or to the full protocol\n      exchange.\n   If an incoming packet\
    \ contains an error for which a behaviour is\n   specified in this section, and\
    \ an error that, in the absence of the\n   former error, would cause the packet\
    \ to be silently discarded, then\n   the packet MUST be silently discarded.\n"
- title: 8.  Specification of Protocol Fields
  contents:
  - "8.  Specification of Protocol Fields\n   In this section, the format of the EAP-IKEv2\
    \ data fields and\n   applicable processing rules are specified.  Figure 4 shows\
    \ the\n   general packet format of EAP-IKEv2 messages, and the embedding of\n\
    \   EAP-IKEv2 into EAP.  The EAP-IKEv2 messages are embedded in the Data\n   field\
    \ of the standard EAP Request/Response packets.  The Code,\n   Identifier, Length,\
    \ and Type fields are described in [2].  The EAP\n   Type for this EAP method\
    \ is 49.\n       0                   1                   2                   3\n\
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \     Code      |   Identifier  |            Length             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |   Flags       |       Message Length          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \       Message Length          |       HDR + payloads          ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    Integrity Checksum Data                    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \         Figure 4: General Packet Format of EAP-IKEv2\n   The Flags field is\
    \ always present and is used for fragmentation\n   support, as described in Section\
    \ 8.1.  The Message Length field is\n   not always present; its presence is determined\
    \ by a certain flag in\n   the Flags field, as described in Section 8.1.  The\
    \ field denoted as\n   \"HDR + payloads\" in Figure 4 contains the EAP-IKEv2 header\
    \ (see\n   Section 8.2), followed by the number of payloads, in accordance with\n\
    \   the composition of EAP-IKEv2 messages, as described in the previous\n   sections.\
    \  Note that each payload begins with a generic payload\n   header that is specified\
    \ in Section 3.2 of [1].\n   The Integrity Checksum Data field is not always present;\
    \ its presence\n   is determined by a certain flag in the Flags field, as described\
    \ in\n   Section 8.1.\n   In the remainder of this section, the protocol fields\
    \ that are used\n   in EAP-IKEv2 are specified.  This specification heavily relies\
    \ on the\n   IKEv2 specification [1], and many fields are constructed, formatted,\n\
    \   and processed in way that is almost identical to that in IKEv2.\n   However,\
    \ certain deviations from standard IKEv2 formatting and\n   processing exist.\
    \  These deviations are highlighted in the remainder\n   of this section.\n"
- title: 8.1.  The Flags, Message Length, and Integrity Checksum Data Fields
  contents:
  - "8.1.  The Flags, Message Length, and Integrity Checksum Data Fields\n   This\
    \ section describes EAP-IKEv2 fragmentation, and specifies the\n   encoding and\
    \ processing rules for the Flags, Message Length, and\n   Integrity Checksum Data\
    \ field shown in Figure 4.\n   Fragmentation support in EAP-IKEv2 is provided\
    \ by the Flags and\n   Message Length fields shown in Figure 4.  These are encoded\
    \ and used\n   as follows:\n    0 1 2 3 4 5 6 7\n   +-+-+-+-+-+-+-+-+\n   |L M\
    \ I 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+\n   L = Length included\n   M = More fragments\n\
    \   I = Integrity Checksum Data included\n                           Figure 5:\
    \ Flags Field\n   The Flags field is defined in Figure 5.  Only the first three\
    \ bits\n   (0-2) are used; all remaining bits MUST be set to zero and ignored\
    \ on\n   receipt.  The L flag indicates the presence of a Message Length\n   field,\
    \ and the M flag indicates whether or not the current EAP\n   message has more\
    \ fragments.  In particular, if the L bit is set, then\n   a Message Length field\
    \ MUST be present in the EAP message, as shown\n   in Figure 4.  The Message Length\
    \ field is four octets long and\n   contains the length of the entire message\
    \ (i.e., the length of the\n   EAP Data field.).  Note that, in contrast, the\
    \ Length field shown in\n   Figure 4 contains the length of only the current fragment.\
    \  (Note\n   that there exist two fields that are related to length: the Length\n\
    \   field, which is a generic EAP field, and the Message Length field,\n   which\
    \ is an EAP-IKEv2-specific field.)  If the L bit is not set, then\n   the Message\
    \ Length field MUST NOT be present.\n   The M flag MUST be set on all fragments\
    \ except the last one.  In the\n   last fragment, the M flag MUST NOT be set.\
    \  Reliable fragment\n   delivery is provided by the retransmission mechanism\
    \ of EAP as\n   described below.\n   When an EAP-IKEv2 peer receives an EAP-Request\
    \ packet with the M bit\n   set, it MUST respond with an EAP-Response with EAP-Type=EAP-IKEv2\
    \ and\n   no data.  This serves as a fragment ACK.  The EAP server MUST wait\n\
    \   until it receives the EAP-Response before sending another fragment.\n   In\
    \ order to prevent errors in processing of fragments, the EAP server\n   MUST\
    \ increment the Identifier field for each fragment contained\n   within an EAP-Request,\
    \ and the peer MUST include this Identifier\n   value in the fragment ACK contained\
    \ within the EAP-Response.\n   Retransmitted fragments will contain the same Identifier\
    \ value.\n   Similarly, when the EAP server receives an EAP-Response with the\
    \ M\n   bit set, it MUST respond with an EAP-Request with EAP-Type=EAP-IKEv2\n\
    \   and no data.  This serves as a fragment ACK. The EAP peer MUST wait\n   until\
    \ it receives the EAP-Request before sending another fragment.\n   In order to\
    \ prevent errors in the processing of fragments, the EAP\n   server MUST increment\
    \ the Identifier value for each fragment ACK\n   contained within an EAP-Request,\
    \ and the peer MUST include this\n   Identifier value in the subsequent fragment\
    \ contained within an EAP-\n   Response.\n   The Integrity Checksum Data field\
    \ contains a cryptographic checksum\n   that covers the entire EAP message, starting\
    \ with the Code field, and\n   ending at the end of the EAP Data field.  This\
    \ field, shown in Figure\n   4, is present only if the I bit is set in the Flags\
    \ field.  The\n   Integrity Checksum Data field immediately follows the EAP Data\
    \ field\n   without padding.\n   Whenever possible, the Integrity Checksum Data\
    \ field MUST be present\n   (and the I bit set) for each fragment, including the\
    \ case where the\n   entire EAP-IKEv2 message is carried in a single fragment.\
    \  The\n   algorithm and keys that are used to compute the Integrity Checksum\n\
    \   Data field MUST be identical to those used to compute the Integrity\n   Checksum\
    \ Data field of the Encrypted Payload (see Section 8.9).  That\n   is, the algorithm\
    \ and keys that were negotiated and established\n   during this EAP-IKEv2 protocol\
    \ run are used.  Note that this means\n   that different keys are used to compute\
    \ the Integrity Checksum Data\n   field in each direction.  Also note that, for\
    \ messages where this\n   algorithm and the keys are not yet established, the\
    \ Integrity\n   Checksum Data field cannot be computed and is therefore not included.\n\
    \   This applies, for example, to messages 3 and 4 in Figure 1.\n   In order to\
    \ minimize the exposure to denial-of-service attacks on\n   fragmented packets,\
    \ messages that are not protected with an Integrity\n   Checksum Data field SHOULD\
    \ NOT be fragmented.  Note, however, that\n   those packets are not likely to\
    \ be fragmented anyway since they do\n   not carry certificates.\n"
- title: 8.2.  EAP-IKEv2 Header
  contents:
  - "8.2.  EAP-IKEv2 Header\n   The EAP-IKEv2 header, denoted HDR in this specification,\
    \ is\n   constructed and formatted according to the rules specified in Section\n\
    \   3.1 of [1].\n   In the first EAP-IKEv2 message that is sent by the initiator\
    \ (message\n   3 in Figure 1), the IKE_SA Responder's SPI field is set to zero.\n\
    \   This is because, at this point in time, the initiator does not know\n   what\
    \ SPI value the responder will choose for this protocol run.  In\n   all other\
    \ messages, both SPI fields MUST contain non-zero values that\n   reflect the\
    \ initiator- and responder-chosen SPI values.\n   In accordance with [1], for\
    \ this version of EAP-IKEv2, the MjVer\n   (major version) and MnVer (minor version)\
    \ fields in the header MUST\n   be 2 and 0 respectively.  The value of the Exchange\
    \ Type field MUST\n   be set to 34 (IKE_SA_INIT) in messages 3 and 4, and to 35\n\
    \   (IKE_SA_AUTH) in messages 5 and 6 in Figure 1.  In messages 3 and 4\n   in\
    \ Figure 2, this value MUST be set to 36 (CREATE_CHILD_SA).\n   The Flags field\
    \ of the EAP-IKEv2 header is also constructed according\n   to Section 3.1 of\
    \ [1].  Note that this is not the same field as the\n   Flags field shown in Figure\
    \ 4.\n   The Message ID field is constructed as follows.  Messages 3 and 4 in\n\
    \   a full protocol run MUST carry Message ID value 0.  Messages 5 and 6\n   in\
    \ a full protocol run (see Figure 1) MUST carry Message ID value 1.\n   Messages\
    \ 3 and 4 in a fast reconnect protocol run MUST carry Message\n   ID value 2.\n"
- title: 8.3.  Security Association Payload
  contents:
  - "8.3.  Security Association Payload\n   The SA payload is used for the negotiation\
    \ of cryptographic\n   algorithms between the initiator and the responder.  The\
    \ rules for\n   its construction adhere to [1]; in particular, Sections 2.7 and\
    \ 3.3.\n   In EAP-IKEv2, all Proposal Substructures in the SA payload MUST carry\n\
    \   Protocol ID value 1 (IKE).\n"
- title: 8.4.  Key Exchange Payload
  contents:
  - "8.4.  Key Exchange Payload\n   The Key Exchange payload, denoted KEi if constructed\
    \ by the initiator\n   and KEr if constructed by the responder, is formatted according\
    \ to\n   the rules specified in Section 3.4 of [1].\n"
- title: 8.5.  Nonce Payload
  contents:
  - "8.5.  Nonce Payload\n   The Nonce payload, denoted Ni if constructed by the initiator\
    \ and Nr\n   if constructed by the responder, is constructed and formatted\n \
    \  according to the rules specified in Section 3.9 of [1].\n"
- title: 8.6.  Identification Payload
  contents:
  - "8.6.  Identification Payload\n   The Identification payload, denoted IDi if it\
    \ contains an identifier\n   for the initiator and IDr if it contains an identifier\
    \ for the\n   responder, is constructed and formatted according to the rules\n\
    \   specified in Section 3.5 of [1].\n"
- title: 8.7.  Certificate Payload
  contents:
  - "8.7.  Certificate Payload\n   The Certificate payload, denoted CERT, is constructed\
    \ and formatted\n   according to the rules specified in Section 3.6 of [1].  Note\
    \ that\n   certain certificate encodings for the EAP server certificate, e.g.,\n\
    \   those that need to be resolved via another network protocol, cannot\n   be\
    \ used in some typical EAP-IKEv2 deployment scenarios.  A user, for\n   example,\
    \ that authenticates himself by means of EAP-IKEv2 in order to\n   obtain network\
    \ access, cannot resolve the server certificate at the\n   time of EAP-IKEv2 protocol\
    \ execution.\n"
- title: 8.8.  Certificate Request Payload
  contents:
  - "8.8.  Certificate Request Payload\n   The Certificate Request payload, denoted\
    \ CERTREQ, is constructed and\n   formatted according to the rules specified in\
    \ Section 3.7 of [1].\n"
- title: 8.9.  Encrypted Payload
  contents:
  - "8.9.  Encrypted Payload\n   The Encrypted payload, denoted SK{...}, is constructed\
    \ and formatted\n   according to the rules specified in Section 3.14 of [1].\n"
- title: 8.10.  Authentication Payload
  contents:
  - "8.10.  Authentication Payload\n   The Authentication payload, denoted AUTH, is\
    \ constructed and\n   formatted according to the rules specified in Sections 2.15\
    \ and 3.8\n   of [1].\n   The contents of the Authentication payload depend on\
    \ which party\n   generates this field, the use case, and the algorithm that\n\
    \   corresponds to the credential (asymmetric key, symmetric key, or\n   password)\
    \ that this party uses to authenticate itself.  The\n   Authentication payload\
    \ contains either a MAC or a signature.\n   If the party that generates the Authentication\
    \ payload authenticates\n   itself based on a shared secret (i.e., a password\
    \ or a symmetric\n   key), then the Authentication payload MUST contain a MAC.\
    \  This MAC\n   is calculated using a key that is derived from the shared secret,\n\
    \   according to Section 2.15 of [1].  According to that section, the\n   shared\
    \ secret is padded with the string \"Key Pad for IKEv2\" as part\n   of this key\
    \ derivation.  For the EAP-IKEv2 method, this rule is\n   overridden, in that\
    \ the padding string is redefined as \"Key Pad for\n   EAP-IKEv2\".  The latter\
    \ padding string MUST be used for the\n   derivation of the MAC key from a shared\
    \ secret in the context of EAP-\n   IKEv2.  This is done in order to avoid the\
    \ same MAC key to be used\n   for both IKEv2 and EAP-IKEv2 in scenarios where\
    \ the same shared\n   secret is used for both.  Note that using a shared secret\
    \ (e.g., a\n   password) in the context EAP-IKEv2 that is identical or similar\
    \ to a\n   shared secret that is used in another context (including IKEv2) is\n\
    \   nevertheless NOT RECOMMENDED.\n"
- title: 8.11.  Notify Payload
  contents:
  - "8.11.  Notify Payload\n   The Notify payload, denoted N(...), is constructed\
    \ and formatted\n   according to the rules specified in Section 3.10 of [1]. \
    \ The\n   Protocol ID field of this payload MUST be set to 1 (IKE_SA).\n"
- title: 8.12.  Next Fast-ID Payload
  contents:
  - "8.12.  Next Fast-ID Payload\n   The Next Fast-ID Payload is defined as follows:\n\
    \                           1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ! Next Payload  !C!  RESERVED   !         Payload Length        !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                                                               !\n      ~   \
    \                  Fast-Reconnect-ID (FRID)                  ~\n      !      \
    \                                                         !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                       Figure 6: NFID Payload Format\n   The Next Fast-ID payload,\
    \ denoted NFID, does not have an equivalent\n   in IKEv2.  Nevertheless, the Next\
    \ Payload, C, RESERVED, and Payload\n   Length fields of this payload are constructed\
    \ according to Section\n   3.2 of [1].  The payload ID is registered in Section\
    \ 11.  The Fast-\n   Reconnect-ID field contains a fast reconnect identifier that\
    \ the peer\n   can use in the next fast reconnect protocol run, as described in\n\
    \   Section 4.  In environments where a realm portion is required, Fast-\n   Reconnect-ID\
    \ includes both a username portion and a realm name\n   portion.  The Fast-Reconnect-ID\
    \ MUST NOT include any terminating null\n   characters.  The encoding of the Fast-Reconnect-ID\
    \ field MUST follow\n   the NAI format [4].\n"
- title: 9.  Payload Types and Extensibility
  contents:
  - "9.  Payload Types and Extensibility\n   In EAP-IKEv2, each payload is identified\
    \ by means of a type field,\n   which, as specified in [1], is indicated in the\
    \ \"Next Payload\" field\n   of the preceding payload.  However, the identifier\
    \ space from which\n   EAP-IKEv2 payload types are drawn is independent from the\
    \ payload\n   type space of IKEv2.  This is because EAP-IKEv2 and IKEv2 may evolve\n\
    \   in a different way and, as such, payload types that appear in one\n   protocol\
    \ do not necessary appear in the other.  An example of this is\n   the \"Next\
    \ Fast-ID\" (NFID) payload, which does not exist in IKEv2.\n   The values for\
    \ the payload types defined in this document are listed\n   in Section 11.  Payload\
    \ type values 13-127 are reserved to IANA for\n   future assignment in EAP-IKEv2.\
    \  Payload type values 128-255 are for\n   private use among mutually consenting\
    \ parties.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   As mentioned in Section 3, in EAP-IKEv2, the\
    \ EAP server always\n   assumes the role of the initiator (I), and the EAP peer\
    \ takes on the\n   role of the responder (R) of an exchange.  This is in order\
    \ to ensure\n   that, in scenarios where the peer authenticates itself based on\
    \ a\n   password (i.e., in use case 3), operations that involve this password\n\
    \   only take place after the server has been successfully authenticated.\n  \
    \ In other words, this assignment of initiator and responder roles\n   results\
    \ in protection against offline dictionary attacks on the\n   password that is\
    \ used by the peer to authenticate itself (see Section\n   10.7).\n   In order\
    \ for two EAP-IKEv2 implementations to be interoperable, they\n   must support\
    \ at least one common set of cryptographic algorithms.  In\n   order to promote\
    \ interoperability, EAP-IKEv2 implementations MUST\n   support the following algorithms\
    \ based on the \"MUST/MUST-\"\n   recommendations given in [5]:\n      Diffie-Hellman\
    \ Groups: 1024 MODP Group\n      IKEv2 Transform Type 1 Algorithms: ENCR_3DES\n\
    \      IKEv2 Transform Type 2 Algorithms: PRF_HMAC_SHA1\n      IKEv2 Transform\
    \ Type 3 Algorithms: AUTH_HMAC_SHA1_96\n   All other options of [5] MAY be implemented.\n\
    \   The remainder of this section describes EAP-IKEv2 in terms of\n   specific\
    \ security terminology as required by [2].  The discussion\n   makes reference\
    \ to the use cases defined in Section 1.\n"
- title: 10.1.  Protected Ciphersuite Negotiation
  contents:
  - "10.1.  Protected Ciphersuite Negotiation\n   In message 3, the EAP server provides\
    \ the set of ciphersuites it is\n   willing to accept in an EAP-IKEv2 protocol\
    \ run.  Hence, the server is\n   in control of the ciphersuite.  An EAP peer that\
    \ does not support any\n   of the indicated ciphersuites is not able to authenticate.\
    \  The local\n   security policy of the peer MUST specify the set of ciphersuites\
    \ that\n   the peer accepts.  The server MUST verify that the ciphersuite that\n\
    \   is indicated as being chosen by the peer in message 4, belongs to the\n  \
    \ set of ciphersuites that were offered in message 3.  If this\n   verification\
    \ fails, the server MUST silently discard the packet.\n"
- title: 10.2.  Mutual Authentication
  contents:
  - "10.2.  Mutual Authentication\n   EAP-IKEv2 supports mutual authentication.\n"
- title: 10.3.  Integrity Protection
  contents:
  - "10.3.  Integrity Protection\n   EAP-IKEv2 provides integrity protection of EAP-IKEv2\
    \ traffic.  This\n   protection is offered after authentication is completed and\
    \ it is\n   facilitated by inclusion of two Integrity Checksum Data fields: one\n\
    \   at the end of the EAP packet (see Figure 4), and one as part of an\n   Encrypted\
    \ payload (see Section 8.9).\n"
- title: 10.4.  Replay Protection
  contents:
  - "10.4.  Replay Protection\n   EAP-IKEv2 provides protection against replay attacks\
    \ by a variety of\n   means.  This includes the requirement that the Authentication\
    \ payload\n   is computed as a function of, among other things, a server-provided\n\
    \   nonce and a peer-provided nonce.  These nonces are required to be\n   practically\
    \ unpredictable by an adversary.  Assuming that the\n   algorithm that is used\
    \ to compute the Authentication payload does not\n   contain cryptographic weaknesses,\
    \ the probability that an\n   Authentication payload that is valid in a particular\
    \ protocol run\n   will also be valid in a subsequent run is therefore negligible.\n"
- title: 10.5.  Confidentiality
  contents:
  - "10.5.  Confidentiality\n   EAP-IKEv2 provides confidentiality of certain EAP-IKEv2\
    \ fields,\n   namely those included in Encrypted payloads.  With respect to\n\
    \   identity confidentiality, the following claims are made.  Note that\n   identity\
    \ confidentiality refers to the EAP-IKEv2 identity of the EAP\n   peer.\n   Identity\
    \ confidentiality is provided in the face of a passive\n   adversary, i.e., an\
    \ adversary that does not modify traffic as it is\n   in transit.  Whenever the\
    \ optional SK{IDr} payload in message 4 of a\n   full EAP-IKEv2 protocol (see\
    \ Figure 1) is not included, identity\n   confidentiality is also provided in\
    \ the face of an active adversary.\n   This payload MUST NOT be included in use\
    \ cases 1, 2, and 3.  In use\n   case 4, this payload MUST be included.  Therefore,\
    \ in use case 4,\n   EAP- IKEv2 does not provide identity confidentiality in the\
    \ face of\n   an active adversary.\n   Note, however, that the EAP peer provides\
    \ its identity in message 2\n   in Figure 1 in cleartext.  In order to provide\
    \ identity\n   confidentiality as discussed in the previous paragraphs, it is\n\
    \   necessary to obfuscate the username part of the identity (the realm\n   part\
    \ must stay intact to allow correct message routing by the\n   Authentication,\
    \ Authorization, and Accounting (AAA) infrastructure).\n   The EAP server then\
    \ uses the identity information in message 4.  The\n   same mechanism is also\
    \ used by other EAP methods to provide identity\n   confidentiality, for example,\
    \ EAP-TTLS [8].\n"
- title: 10.6.  Key Strength
  contents:
  - "10.6.  Key Strength\n   EAP-IKEv2 supports the establishment of session keys\
    \ (MSK and EMSK)\n   of a variety of key strengths, with the theoretical maximum\
    \ at 512\n   bits per key (since this is the size of the MSK and the EMSK).\n\
    \   However, in practice, the effective key strength is likely to be\n   significantly\
    \ lower, and depends on the authentication credentials\n   used, the negotiated\
    \ ciphersuite (including the output size of the\n   pseudorandom function), the\
    \ Diffie-Hellman group used, and on the\n   extent to which the assumptions on\
    \ which the underlying cryptographic\n   algorithms depend really hold.  Of the\
    \ above mechanisms, the one that\n   offers the lowest key strength can be regarded\
    \ as a measure of the\n   effective key strength of the resulting session keys.\
    \  Note that this\n   holds for other EAP methods, too.\n   Due to the large variety\
    \ of possible combinations, no indication of a\n   practical effective key strength\
    \ for MSK or EMSK is given here.\n   However, those responsible for the deployment\
    \ of EAP-IKEv2 in a\n   particular environment should consider the threats this\
    \ environment\n   may be exposed to, and configure the EAP-IKEv2 server and peer\n\
    \   policies and authentication credentials such that the established\n   session\
    \ keys are of a sufficiently high effective key strength.\n"
- title: 10.7.  Dictionary Attack Resistance
  contents:
  - "10.7.  Dictionary Attack Resistance\n   EAP-IKEv2 can be used in a variety of\
    \ use cases, as explained in\n   Section 1.  In some of these uses cases, namely\
    \ use case 1, 2, and 4,\n   dictionary attacks cannot be launched since no passwords\
    \ are used.\n   In use case 3, EAP-IKEv2 provides protection against offline\n\
    \   dictionary attacks, since operations that involve the password are\n   executed\
    \ only after the server has authenticated itself (based on a\n   credential other\
    \ than a password).\n   In order to reduce exposure against online dictionary\
    \ attacks, in use\n   case 3, the server SHOULD provide the capability to log\
    \ failed peer\n   authentication events, and SHOULD implement a suitable policy\
    \ in case\n   of consecutive failed peer authentication attempts within a short\n\
    \   period of time (such as responding with an EAP-Failure instead of\n   message\
    \ 5 for a predetermined amount of time).\n   When passwords are used with method\
    \ 4 (instead of using a key with\n   high entropy), dictionary attacks are possible,\
    \ as described in\n   Section 8 of [1]:\n      \"When using pre-shared keys, a\
    \ critical consideration is how to\n      assure the randomness of these secrets.\
    \  The strongest practice is\n      to ensure that any pre-shared key contain\
    \ as much randomness as\n      the strongest key being negotiated.  Deriving a\
    \ shared secret from\n      a password, name, or other low-entropy source is not\
    \ secure.\n      These sources are subject to dictionary and social engineering\n\
    \      attacks, among others.\"\n   Hence, the usage of passwords with mode 4\
    \ where the EAP peer and the\n   EAP server rely on a shared secret that was derived\
    \ from a password\n   is insecure.  It is strongly recommended to use mode 3 when\
    \ passwords\n   are used by the EAP peer.\n"
- title: 10.8.  Fast Reconnect
  contents:
  - "10.8.  Fast Reconnect\n   EAP-IKEv2 supports a \"fast reconnect\" mode of operation,\
    \ as described\n   in Section 4.\n"
- title: 10.9.  Cryptographic Binding
  contents:
  - "10.9.  Cryptographic Binding\n   EAP-IKEv2 is not a tunnel EAP method.  Thus,\
    \ cryptographic binding\n   does not apply to EAP-IKEv2.\n"
- title: 10.10.  Session Independence
  contents:
  - "10.10.  Session Independence\n   EAP-IKEv2 provides session independence in a\
    \ number of ways, as\n   follows:\n   Firstly, knowledge of captured EAP-IKEv2\
    \ conversations (i.e., the\n   information that a passive adversary may obtain)\
    \ does not enable the\n   adversary to compute the Master Session Key (MSK) and\
    \ Extended Master\n   Session Key (EMSK) that resulted from these conversations.\
    \  This\n   holds even in the case where the adversary later obtains access to\n\
    \   the server and/or the peer's long-term authentication credentials\n   that\
    \ were used in these conversations.  That is, EAP-IKEv2 provides\n   support for\
    \ \"perfect forward secrecy\".  However, whether or not this\n   support is made\
    \ use of in a particular EAP-IKEv2 protocol run,\n   depends on when the peer\
    \ and the server delete the Diffie-Hellman\n   values that they used in that run,\
    \ and on whether or not they use\n   fresh Diffie-Hellman values in each protocol\
    \ run.  The discussion in\n   Section 2.12 of [1] applies.\n   Secondly, an active\
    \ adversary that does not know the peer's and\n   server's long-term authentication\
    \ credentials cannot learn the MSK\n   and EMSK that were established in a particular\
    \ protocol run of EAP-\n   IKEv2, even if it obtains access to the MSK and EMSK\
    \ that were\n   established in other protocol runs of EAP-IKEv2.  This is because\
    \ the\n   MSK and the EMSK are a function of, among other things, data items\n\
    \   that are assumed to be generated independently at random in each\n   protocol\
    \ run.\n"
- title: 10.11.  Fragmentation
  contents:
  - "10.11.  Fragmentation\n   EAP-IKEv2 provides support for fragmentation, as described\
    \ in Section\n   8.1.\n"
- title: 10.12.  Channel Binding
  contents:
  - "10.12.  Channel Binding\n   Channel binding is not supported in EAP-IKEv2.\n"
- title: 10.13.  Summary
  contents:
  - "10.13.  Summary\n   EAP security claims are defined in Section 7.2.1 of [2].\
    \  The\n   security claims for EAP-IKEv2 are as follows:\n               Ciphersuite\
    \ negotiation:   Yes\n               Mutual authentication:     Yes\n        \
    \       Integrity protection:      Yes\n               Replay protection:    \
    \     Yes\n               Confidentiality:           Yes\n               Key derivation:\
    \            Yes; see Section 5\n               Key strength:              Variable\n\
    \               Dictionary attack prot.:   Yes; see Section 10.7\n           \
    \    Fast reconnect:            Yes; see Section 4\n               Crypt. binding:\
    \            N/A\n               Session independence:      Yes; see Section 10.10\n\
    \               Fragmentation:             Yes; see Section 10.11\n          \
    \     Channel binding:           No\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   IANA has allocated value 49 for the EAP method type\
    \ indicating EAP-\n   IKEv2.  EAP-IKEv2 has already earlier successfully passed\
    \ Designated\n   Expert Review as mandated by RFC 3748 for IANA allocations.\n\
    \   In addition, IANA has created a new registry for \"EAP-IKEv2\n   Payloads\"\
    , and populated it with the following initial entries listed\n   below.\n   The\
    \ following payload type values are used by this document.\n  Next Payload Type\
    \                 | Value\n  ----------------------------------+----------------------------------\n\
    \  No Next payload                   | 0\n  Security Association payload     \
    \ | 33\n  Key Exchange payload              | 34\n  Identification payload   \
    \         |\n      (when sent by initiator, IDi) | 35\n  Identification payload\
    \            |\n      (when sent by responder, IDr) | 36\n  Certificate payload\
    \               | 37\n  Certificate Request payload       | 38\n  Authentication\
    \ payload            | 39\n  Nonce payload                     | 40\n  Notification\
    \ payload              | 41\n  Vendor ID payload                 | 43\n  Encrypted\
    \ payload                 | 46\n  Next Fast-ID payload              | 121\n  RESERVED\
    \ TO IANA                  | 1-32, 42, 44-45, 47-120, 122-127\n  PRIVATE USE \
    \                      | 128-255\n   Payload type values 1-120 match the corresponding\
    \ payloads in the\n   IKEv2 IANA registry.  That is, the EAP-IKEv2 payloads that\
    \ have been\n   assigned a type value in the range 1-120 have a semantically\n\
    \   equivalent payload type in IKEv2, with an identical payload type\n   value.\
    \  However, there exist payloads types in IKEv2 that do not have\n   a semantically\
    \ equivalent payload in EAP-IKEv2; this explains the\n   fact that the payload\
    \ type values 42, 44, and 45 have not been\n   assigned in EAP-IKEv2; these values\
    \ remain RESERVED TO IANA for this\n   version of EAP-IKEv2.\n   Payload type\
    \ values 121-127 are used for EAP-IKEv2 specific payloads,\n   i.e., for payloads\
    \ that do not have a semantically equivalent payload\n   in IKEv2.  Note that\
    \ this range has been reserved for this purpose in\n   the IKEv2 IANA registry\
    \ too.  This means that the same payload type\n   values will not be used for\
    \ different things in IKEv2 and EAP-IKEv2\n   protocols.\n   Payload type values\
    \ 122-127 are reserved to IANA for future\n   assignment to EAP-IKEv2-specific\
    \ payloads.  Payload type values\n   128-255 are for private use among mutually\
    \ consenting parties.\n   The semantics of the above-listed payloads is provided\
    \ in this\n   document (0-127) and refer to IKEv2 when necessary (1-120).\n  \
    \ New payload type values with a description of their semantic will be\n   assigned\
    \ after Expert Review.  The expert is chosen by the IESG in\n   consultation with\
    \ the Security Area Directors and the EMU working\n   group chairs (or the working\
    \ group chairs of a designated successor\n   working group).  Updates can be provided\
    \ based on expert approval\n   only.  A designated expert will be appointed by\
    \ the Security Area\n   Directors.  Based on expert approval it is possible to\
    \ delete entries\n   from the registry or to mark entries as \"deprecated\".\n\
    \   Each registration must include the payload type value and the\n   semantic\
    \ of the payload.\n"
- title: 12.  Contributors
  contents:
  - "12.  Contributors\n   The authors are grateful to Krzysztof Rzecki, Rafal Mijal,\
    \ Piotr\n   Marnik, and Pawel Matejski, who, during their implementation of EAP-\n\
    \   IKEv2 (see http://eap-ikev2.sourceforge.net/), provided invaluable\n   feedback\
    \ and identified a number of errors in previous versions of\n   this document.\n"
- title: 13.  Acknowledgements
  contents:
  - "13.  Acknowledgements\n   The authors also thank Pasi Eronen for his invaluable\
    \ comments as\n   expert reviewer assigned by the EAP working group chairs Jari\
    \ Arkko\n   and Bernard Aboba.  The authors would also like to thank Guenther\n\
    \   Horn, Thomas Otto, Paulo Pagliusi, and John Vollbrecht for their\n   insightful\
    \ comments and suggestions.  The members of the PANA design\n   team; in particular,\
    \ D. Forsberg and A. Yegin, also provided comments\n   on the initial version\
    \ of this document.  We would like to thank Hugo\n   Krawczyk for his feedback\
    \ regarding the usage of the password-based\n   authentication.\n   The authors\
    \ are grateful to the members of the EAP keying design team\n   for their discussion\
    \ in the area of the EAP Key Management Framework.\n   We would like to thank\
    \ Jari Arkko for his support and for his\n   comments.  Finally, we would like\
    \ to thank Charlie Kaufman, Bernard\n   Aboba, and Paul Hoffman for their comments\
    \ during IETF Last Call.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [1]  Kaufman, C., Ed., \"Internet Key Exchange\
    \ (IKEv2) Protocol\", RFC\n        4306, December 2005.\n   [2]  Aboba, B., Blunk,\
    \ L., Vollbrecht, J., Carlson, J., and H.\n        Levkowetz, Ed., \"Extensible\
    \ Authentication Protocol (EAP)\", RFC\n        3748, June 2004.\n   [3]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\", RFC\
    \ 2119, March 1997.\n   [4]  Aboba, B., Beadles, M., Arkko, J., and P. Eronen,\
    \ \"The Network\n        Access Identifier\", RFC 4282, December 2005.\n   [5]\
    \  Schiller, J., \"Cryptographic Algorithms for Use in the Internet\n        Key\
    \ Exchange Version 2 (IKEv2)\", RFC 4307, December 2005.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [6]  Aboba, B. and D. Simon, \"PPP EAP TLS\
    \ Authentication Protocol\",\n        RFC 2716, October 1999.\n   [7]  Aboba,\
    \ B., \"Extensible Authentication Protocol (EAP) Key\n        Management Framework\"\
    , Work in Progress, February 2007.\n   [8]  Funk, P. and S. Blake-Wilson, \"EAP\
    \ Tunneled TLS Authentication\n        Protocol (EAP-TTLS)\", Work in Progress,\
    \ July 2004.\n"
- title: Appendix A.  EAP-IKEv2 Protocol Runs with Failed Authentication
  contents:
  - "Appendix A.  EAP-IKEv2 Protocol Runs with Failed Authentication\n   This appendix\
    \ illustrates how authentication failures are handled\n   within EAP-IKEv2.  Note\
    \ that authentication failures only occur in\n   full EAP-IKEv2 protocol runs.\n\
    \   Figure 10 shows the message flow in case the EAP peer fails to\n   authenticate\
    \ the EAP server.\n   1. R<-I: EAP-Request/Identity\n   2. R->I: EAP-Response/Identity(Id)\n\
    \   3. R<-I: EAP-Req (HDR, SAi1, KEi, Ni)\n   4. R->I: EAP-Res (HDR, SAr1, KEr,\
    \ Nr, [CERTREQ], [SK{IDr}])\n   5. R<-I: EAP-Req (HDR, SK {IDi, [CERT], [CERTREQ],\
    \ [IDr], AUTH})\n   6. R->I: EAP-Res(HDR, SK {N(AUTHENTICATION_FAILED)})\n   7.\
    \ R<-I: EAP-Failure\n          Figure 10: EAP-IKEv2 with Failed Server Authentication\n\
    \   The difference in the full successful exchange described in Section 3\n  \
    \ is that, in message 6, the EAP peer MUST answer the EAP server with\n   an Encrypted\
    \ payload that contains a Notify payload with the Notify\n   Message Type value\
    \ set to 24 (AUTHENTICATION_FAILED).  In that\n   message, the Message ID field\
    \ in the EAP-IKEv2 header (HDR) MUST\n   carry Message ID value 2.  In message\
    \ 7, an EAP-Failure message MUST\n   be returned by the EAP server.\n   Figure\
    \ 11 shows the message flow in case the EAP server fails to\n   authenticate the\
    \ EAP peer.\n   1. R<-I: EAP-Request/Identity\n   2. R->I: EAP-Response/Identity(Id)\n\
    \   3. R<-I: EAP-Req (HDR, SAi1, KEi, Ni)\n   4. R->I: EAP-Res (HDR, SAr1, KEr,\
    \ Nr, [CERTREQ], [SK{IDr}])\n   5. R<-I: EAP-Req (HDR, SK {IDi, [CERT], [CERTREQ],\
    \ AUTH})\n   6. R->I: EAP-Res (HDR, SK {IDr, [CERT], AUTH})\n   7. R<-I: EAP-Req\
    \ (HDR, SK {N(AUTHENTICATION_FAILED)})\n   8. R->I: EAP-Res (HDR, SK {})\n   9.\
    \ R<-I: EAP-Failure\n           Figure 11: EAP-IKEv2 with Failed Peer Authentication\n\
    \   Compared to the full successful exchange, one additional roundtrip is\n  \
    \ required.  In message 7, the EAP server MUST send an EAP request with\n   Encrypted\
    \ payload that contains a Notify payload with the Notify\n   Message Type value\
    \ set to 24 (AUTHENTICATION_FAILED), instead of\n   sending an EAP-Success message.\
    \  The EAP peer, upon receiving message\n   7, MUST send an empty EAP-IKEv2 (informational)\
    \ message in reply to\n   the EAP server's error indication, as shown in message\
    \ 8.  In\n   messages 7 and 8, the Message ID field in the EAP-IKEv2 header (HDR)\n\
    \   MUST carry Message ID value 2.  Finally, by means of message 9, the\n   EAP\
    \ server answers with an EAP-Failure.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Hannes Tschofenig\n   Nokia Siemens Networks\n   Otto-Hahn-Ring\
    \ 6\n   Munich, Bavaria  81739\n   Germany\n   EMail: Hannes.Tschofenig@nsn.com\n\
    \   URI:   http://www.tschofenig.com\n   Dirk Kroeselberg\n   Nokia Siemens Networks\n\
    \   Otto-Hahn-Ring 6\n   Munich, Bavaria  81739\n   Germany\n   EMail: Dirk.Kroeselberg@nsn.com\n\
    \   Andreas Pashalidis\n   NEC\n   Kurfuersten-Anlage 36\n   Heidelberg  69115\n\
    \   Germany\n   EMail: pashalidis@nw.neclab.eu\n   Yoshihiro Ohba\n   Toshiba\
    \ America Research, Inc.\n   1 Telcordia Drive\n   Piscataway, NJ  08854\n   USA\n\
    \   EMail: yohba@tari.toshiba.com\n   Florent Bersani\n   France Telecom R&D\n\
    \   38, rue du General Leclerc\n   Issy-Les-Moulineaux, Cedex  92794\n   France\n\
    \   EMail: florent.ftrd@gmail.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
