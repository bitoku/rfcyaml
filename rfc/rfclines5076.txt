Abstract This document describes an Extensible Provisioning Protocol (EPP) extension framework for mapping information about the validation process that has been applied for the E.164 number (or number range) that the E.164 Number Mapping (ENUM) domain name is based on.
Specified in the Extensible Markup Language (XML), this mapping extends the EPP domain name mapping to provide an additional feature required for the provisioning of ENUM Domain Names.
This document describes a framework for an ENUM [2] validation information mapping for version 1.0 of EPP [3].
This mapping, an extension of the EPP domain name mapping described in [4], is specified using XML 1.0, as described in [5], and XML Schema notation, as described in [6] and [7].
The EPP core protocol specification [3] provides a complete description of EPP command and response structures.
A thorough understanding of the base protocol specification is necessary to understand the mapping described in this document.
ENUM [2] describes how the Domain Name System (DNS) can be used to identify services associated with an E.164 number.
As described in RFC 4725 [9], usually only the Assignee of the E.164 number (or number range) has the right to register the corresponding ENUM domain name.
Therefore, an ENUM validation process has to be applied before the ENUM domain name can be inserted into the DNS.
The validation process shall ensure that the holder of the ENUM domain name coincides with the Assignee of the corresponding E.164 number (or number range).
However, the details of the ENUM validation methods are beyond the scope of this document.
The EPP extension described in this document specifies a framework for the mapping of information about the ENUM validation process.
As the local legislation or the validation procedures may vary, the content of the validation information itself is not part of this specification.
However, this document contains a working example (including XML schema) to show how the validation information could look.
This example could even be used for a lightweight validation process.
In fact, it has been an integral part of the Swiss ENUM trial.
Using this extension framework, the content of the validation information can be specified according to the local requirements.
Such an extension is specified in [10].
More background information concerning the validation can be found in RFC 4725 [9], which also describes a typical basic role model for the ENUM registration process.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [1].
In examples, "C:" represents lines sent by a protocol client and "S:" represents lines returned by a protocol server.
Indentation and white space in examples are provided only to illustrate element relationships and are not REQUIRED features of this specification.
Unless stated otherwise, XML specifications and examples provided in this document MUST be interpreted in the character case presented to develop a conforming implementation.
The following requirements are the basis for this work: 1.
The design shall allow multiple policies and validation procedures.
It shall be possible to transmit validation information with EPP domain object requests and responses.
It shall be possible to add, modify, and remove validation information.
It shall be possible to retrieve validation information stored in the ENUM Registry.
This extension adds additional elements to the EPP domain name mapping [4].
Only new element descriptions are listed here.
An ENUM Domain Name is a representation of an E.164 number that has been translated to conform to domain name syntax as described in the ENUM specification [2].
The following commands are defined for handling validation information at the registry:  add: to add new validation information  rem: to revoke validation information  chg: to change stored validation information  inf: to get information about stored validation information 4.3.
The "id" attribute, used to identify the validation, is represented in this mapping using a character string.
It MUST be unique at least within the same ENUM Domain Name.
To ensure uniqueness even after a transfer of an ENUM Domain Name, it is RECOMMENDED that the "id" attribute be unique per ENUM Registry.
The "id" attribute, usually assigned by the ENUM Registrar, is required for revoking or changing stored validation information and appears in the Validation Information Command elements (see Section 4.2).
> element can contain any element containing validation information that is documented adequately.
It is represented in this mapping using the XML schema <any> element and therefore, is extensible.
The number of <validationInfo> elements permitted per domain object is subject to local policy.
Validation Elements in the Example
As described above, this document includes an example for a possible content of validation information that is used in the EPP examples throughout this document.
This example is an optional part of this specification, i.e., a fully compliant RFC 5076 implementation does not need to implement this example.
The <methodID> element is represented in this mapping using a character string with a maximum length of 63 characters.
It contains an identifier for the method used for the validation.
As stated in Section 1, the details of the ENUM validation methods are beyond the scope of this document.
The <validationEntityID> element is represented in this mapping using a character string with a length of 3 to 16 characters.
It contains an identifier assigned to the ENUM Validation Entity, e.g., by the ENUM Registry.
The <registrarID> element is represented in this mapping using a character string with a length of 3 to 16 characters.
It contains an identifier assigned to the ENUM Registrar by the ENUM Registry.
The <executionDate> element, the execution date of the validation, is represented in this mapping using the XML Schema 'date' data type.
> element, the expiration date of the validation, is represented in this mapping using the XML Schema 'date' data type.
A detailed description of the EPP syntax and semantics can be found in the EPP core protocol specification [3], and the EPP domain name mapping is described in [4].
The command mappings described here are specifically for use in implementing ENUM validation information provisioning processes via EPP.
Note: Whether or not this extension is included into an EPP request or response depends on local policy.
For example, a local Registry policy might require the use of this extension for EPP <create>, <update>, and <info> commands, but not support it for EPP <transfer> and <renew> commands.
Therefore, this is beyond the scope of this document.
EPP Query Commands EPP provides three commands to retrieve object information:
<check> to determine if an object is known to the server, <info> to retrieve detailed information associated with an object, and <transfer> to retrieve object transfer status information.
This extension does not add any elements to the EPP <check> command or <check
> response described in the EPP domain mapping [4].
This extension does not add any elements to the EPP <info> command described in the EPP domain mapping [4].
Additional elements are defined for the <info> response.
When an <info> command has been processed successfully, the EPP <resData> element MUST contain child elements as described in the EPP domain mapping [4].
In addition, the EPP <extension> element MUST contain an <e164val:
infData> element that identifies the extension namespace.
infData> element contains one or more <e164val:
inf> elements, each with an "id" attribute identifying the validation.
inf> element contains an <e164val:
> element, which contains the validation information as child element.
In the example below, the validation information consists of a <valex:simpleVal
> element that identifies the extension namespace.
The <valex:simpleVal> element contains the following child elements:  An <e164val:
methodID> element that contains an identifier of the validation method.
:validationEntityID> element that contains an identifier assigned to the ENUM Validation Entity.
:registrarID> element that contains an identifier assigned to the ENUM Registrar by the ENUM Registry.
> element that contains the date that the validation was performed.
> element that contains the date that the validation expires.
S:<?xml version "1.0" encoding "UTF 8" standalone "no"?
This extension does not add any elements to the EPP <transfer> command or <transfer> response described in the EPP domain mapping [4].
EPP Transform Commands EPP provides five commands to transform objects: <create> to create an instance of an object, <delete> to delete an instance of an object, <renew> to extend the validity period of an object, <transfer> to manage object sponsorship changes, and <update> to change information associated with an object.
This extension defines additional elements for the EPP <create
> command described in the EPP domain mapping [4].
No additional elements are defined for the EPP <create> response.
The EPP <create> command provides a transform operation that allows a client to create a domain object.
In addition to the EPP command elements described in the EPP domain mapping [4], the command MUST contain an <extension> element.
The <extension> element MUST contain an <e164val:create> element that identifies the extension namespace.
The <e164val:create> element contains one or more <e164val:
add> elements, each with an "id" attribute identifying the validation.
Each <e164val:add> element contains an <e164val:
> element, which contains the validation information as child element.
In the example below, the validation information consists of a <valex:simpleVal
> element that identifies the extension namespace.
The <valex:simpleVal> element contains the following child elements:  An <e164val:
methodID> element that contains an identifier of the validation method.
:validationEntityID> element that contains an identifier assigned to the ENUM Validation Entity.
:registrarID> element that contains an identifier assigned to the ENUM Registrar by the ENUM Registry.
> element that contains the date that the validation was performed.
> element that contains the date that the validation expires.
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
> command has been processed successfully, the EPP response is as described in the EPP domain mapping [4].
This extension does not add any elements to the EPP <delete> command or <delete> response described in the EPP domain mapping [4].
This extension defines additional elements for the EPP <renew> command described in the EPP domain mapping [4].
No additional elements are defined for the EPP <renew> response.
The EPP <renew> command provides a transform operation that allows a client to extend the validity period of a domain object.
In addition to the EPP command elements described in the EPP domain mapping [4], the <renew> command MUST contain an <extension> element.
The <extension> element MUST contain an <e164val
:renew> element that identifies the extension namespace.
:renew> element contains one or more <e164val
:add> elements, each with an "id" attribute identifying the validation.
:add> element contains an <e164val:
> element, which contains the validation information as child element.
In the example below, the validation information consists of a <valex:simpleVal
> element that identifies the extension namespace.
The <valex:simpleVal> contains the following child elements:  An <e164val:
methodID> element that contains an identifier of the validation method.
:validationEntityID> element that contains an identifier assigned to the ENUM Validation Entity.
:registrarID> element that contains an identifier assigned to the ENUM Registrar by the ENUM Registry.
> element that contains the date that the validation was performed.
> element that contains the date that the validation expires.
C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When an extended <renew> command has been processed successfully, the EPP response is as described in the EPP domain mapping [4].
This extension defines additional elements for the EPP <transfer
> command described in the EPP domain mapping [4].
No additional elements are defined for the EPP <transfer> response.
command provides a transform operation that allows a client to manage requests to transfer the sponsorship of a domain object.
Clients can initiate, cancel, approve, and reject a transfer request.
In case of a transfer request, in addition to the EPP command elements described in the EPP domain mapping [4], the command MUST contain an <extension> element.
The <extension> element MUST contain an <e164val:transfer> element that identifies the extension namespace.
The <e164val:transfer> element contains one or more <e164val:
add> elements, each with an "id" attribute identifying the validation.
:add> element contains an <e164val:
> element, which contains the validation information as child element.
In the example below, the validation information consists of a <valex:simpleVal
> element that identifies the extension namespace.
The <valex:simpleVal> contains the following child elements:  An <e164val:
methodID> element that contains an identifier of the validation method.
:validationEntityID> element that contains an identifier assigned to the ENUM Validation Entity.
:registrarID> element that contains an identifier assigned to the ENUM Registrar by the ENUM Registry.
> element that contains the date that the validation was performed.
> element that contains the date that the validation expires.
> command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
> command has been processed successfully, the EPP response is as described in the EPP domain mapping [4].
> Command This extension defines additional elements for the EPP <update
> command described in the EPP domain mapping [4].
No additional elements are defined for the EPP <update> response.
The EPP <update> command provides a transform operation that allows a client to change the state of a domain object.
In addition to the EPP command elements described in the EPP domain mapping [4], the <update> command MUST contain an <extension> element.
The <extension> element MUST contain an <e164val:update> element that identifies the extension namespace.
:update> element contains one or more <e164val
:chg> elements, each with an "id" attribute identifying the validation.
:chg> element contains an <e164val:
> element, which contains the validation information as child element.
<e164val:rem> elements do not have child elements.
In the example below, the validation information consists of a <valex:simpleVal
> element that identifies the extension namespace.
The <valex:simpleVal> contains the following child elements:  An <e164val:
methodID> element that contains an identifier of the validation method.
:validationEntityID> element that contains an identifier assigned to the ENUM Validation Entity.
:registrarID> element that contains an identifier assigned to the ENUM Registrar by the ENUM Registry.
> element that contains the date that the validation was performed.
> element that contains the date that the validation expires.
> command: C:<?xml version "1.0" encoding "UTF 8" standalone "no"?
When an extended <update> command has been processed successfully, the EPP response is as described in the EPP domain mapping [4].
An EPP object mapping is specified in XML Schema notation.
The formal syntax presented here is a complete schema representation of the object mapping suitable for automated validation of EPP XML instances.
The BEGIN and END tags are not part of the schemas; they are used to note the beginning and ending of the schema for URI registration purposes.
Formal syntax for Framework: BEGIN <?
xml version "1.0" encoding "UTF 8"?
> <annotation> <documentation> Extensible Provisioning Protocol v1.0 domain name extension schema for framework for provisioning of E.164 number validation information.
Child elements found in EPP commands.
<element name "create" type "
Child elements of the <create>, <renew>, and <update> commands.
<complexType name "insertType"> <sequence> <element name "add" type "
Child elements of the <update> command.
> <element name "add" type "
addType" minOccurs "0" maxOccurs "
Data elements for add, chg and rem.
"id" type "eppcom:minTokenType" use "required"/
"> <attribute name "id" type "eppcom:minTokenType" use "required"/
Child elements found in EPP responses
<element name "infData" type "e164val:infDataType"/
child elements of the <info> response.
> <sequence> <element name "inf" type "e164val:
infType" minOccurs "0" maxOccurs "
Data elements for inf   <complexType name "infType"> <sequence>
"id" type "eppcom:minTokenType" use "required"/
<element name "validationInfo" type "
<complexType name "ValidationInfoType"> <sequence> <
</schema> END Figure 6 Formal syntax for a simple validation (example)
xml version "1.0" encoding "UTF 8"?
> <annotation> <documentation> Example for E.164 number validation information.
> </annotation> <element name "simpleVal" type "e164valex:
<element name "methodID" type "
<element name "validationEntityID" type "eppcom:
> <element name "registrarID" type "eppcom:
<restriction base "token"> <minLength value "1"/>
This document uses Uniform Resource Names (URNs) to describe XML namespaces and XML schemas conforming to the registry mechanism described in RFC 3688 [8].
Four URI assignments have been made: 1.
Registration for the extension namespace:
: See the "Author's Address" section of this document.
Namespace URIs do not represent an XML specification.
Registration for the extension XML schema:
: See the "Author's Address" section of this document.
See Section 6, "Formal Syntax", of this document.
Registration for the extension namespace:
: See the "Author's Address" section of this document.
Namespace URIs do not represent an XML specification.
Registration for the extension XML schema:
: See the "Author's Address" section of this document.
See Section 6, "Formal Syntax", of this document.
The mapping extensions described in this document do not provide any security services beyond those described by EPP [3], the EPP domain name mapping [4], and protocol layers used by EPP.
Security considerations related to ENUM are described in the "Security Considerations" section of the ENUM specification [2].
The security considerations described in these other specifications apply to this specification as well.
Validation information often contains sensitive personal information.
It is RECOMMENDED that validation information in the <info> response is only provided to the sponsoring client.
