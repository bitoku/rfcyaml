- title: __initial_text__
  contents:
  - ''
- title: An Architecture for Use of PCE and the PCE Communication Protocol (PCEP)
  contents:
  - "An Architecture for Use of PCE and the PCE Communication Protocol (PCEP)\n  \
    \                 in a Network with Central Control\n"
- title: Abstract
  contents:
  - "Abstract\n   The Path Computation Element (PCE) is a core component of Software-\n\
    \   Defined Networking (SDN) systems.  It can compute optimal paths for\n   traffic\
    \ across a network and can also update the paths to reflect\n   changes in the\
    \ network or traffic demands.\n   PCE was developed to derive paths for MPLS Label\
    \ Switched Paths\n   (LSPs), which are supplied to the head end of the LSP using\
    \ the Path\n   Computation Element Communication Protocol (PCEP).\n   SDN has\
    \ a broader applicability than signaled MPLS traffic-engineered\n   (TE) networks,\
    \ and the PCE may be used to determine paths in a range\n   of use cases including\
    \ static LSPs, segment routing, Service Function\n   Chaining (SFC), and most\
    \ forms of a routed or switched network.  It\n   is, therefore, reasonable to\
    \ consider PCEP as a control protocol for\n   use in these environments to allow\
    \ the PCE to be fully enabled as a\n   central controller.\n   This document briefly\
    \ introduces the architecture for PCE as a\n   central controller, examines the\
    \ motivations and applicability for\n   PCEP as a control protocol in this environment,\
    \ and introduces the\n   implications for the protocol.  A PCE-based central controller\
    \ can\n   simplify the processing of a distributed control plane by blending it\n\
    \   with elements of SDN and without necessarily completely replacing it.\n  \
    \ This document does not describe use cases in detail and does not\n   define\
    \ protocol extensions: that work is left for other documents.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8283.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Architecture  . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n     2.1.  Resilience and Scaling  . . . . . . . . . . . . . .\
    \ . . .   8\n       2.1.1.  Partitioned Network . . . . . . . . . . . . . . .\
    \ . .   9\n       2.1.2.  Multiple Parallel Controllers . . . . . . . . . . .\
    \ .  10\n       2.1.3.  Hierarchical Controllers  . . . . . . . . . . . . . .\
    \  12\n   3.  Applicability . . . . . . . . . . . . . . . . . . . . . . . .  13\n\
    \     3.1.  Technology-Oriented Applicability . . . . . . . . . . . .  14\n  \
    \     3.1.1.  Applicability to Control-Plane Operated Networks  . .  14\n    \
    \   3.1.2.  Static LSPs in MPLS . . . . . . . . . . . . . . . . .  14\n      \
    \ 3.1.3.  MPLS Multicast  . . . . . . . . . . . . . . . . . . .  15\n       3.1.4.\
    \  Transport SDN . . . . . . . . . . . . . . . . . . . .  15\n       3.1.5.  Segment\
    \ Routing . . . . . . . . . . . . . . . . . . .  15\n       3.1.6.  Service Function\
    \ Chaining . . . . . . . . . . . . . .  16\n     3.2.  High-Level Applicability\
    \  . . . . . . . . . . . . . . . .  16\n       3.2.1.  Traffic Engineering . .\
    \ . . . . . . . . . . . . . . .  16\n       3.2.2.  Traffic Classification  .\
    \ . . . . . . . . . . . . . .  17\n       3.2.3.  Service Delivery  . . . . .\
    \ . . . . . . . . . . . . .  17\n   4.  Protocol Implications / Guidance for Solution\
    \ Developers  . .  18\n   5.  Security Considerations . . . . . . . . . . . .\
    \ . . . . . . .  19\n   6.  Manageability Considerations  . . . . . . . . . .\
    \ . . . . . .  19\n   7.  IANA Considerations . . . . . . . . . . . . . . . .\
    \ . . . . .  20\n   8.  References  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  20\n     8.1.  Normative References  . . . . . . . . . . . . . . .\
    \ . . .  20\n     8.2.  Informative References  . . . . . . . . . . . . . . .\
    \ . .  21\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  23\n   Contributors  . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  24\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Path Computation Element (PCE) [RFC4655] was developed\
    \ to offload\n   path computation function from routers in an MPLS traffic-engineered\n\
    \   network.  Since then, the role and function of the PCE has grown to\n   cover\
    \ a number of other uses (such as GMPLS [RFC7025]) and to allow\n   delegated\
    \ control [RFC8231] and PCE-initiated use of network\n   resources [RFC8281].\n\
    \   According to [RFC7399], Software-Defined Networking (SDN) refers to a\n  \
    \ separation between the control elements and the forwarding components\n   so\
    \ that software running in a centralized system, called a\n   controller, can\
    \ act to program the devices in the network to behave\n   in specific ways.  A\
    \ required element in an SDN architecture is a\n   component that plans how the\
    \ network resources will be used and how\n   the devices will be programmed. \
    \ It is possible to view this\n   component as performing specific computations\
    \ to place traffic flows\n   within the network given knowledge of the availability\
    \ of network\n   resources, how other forwarding devices are programmed, and the\
    \ way\n   that other flows are routed.  This is the function and purpose of a\n\
    \   PCE, and the way that a PCE integrates into a wider network control\n   system\
    \ (including an SDN system) is presented in [RFC7491].\n   In early PCE implementations,\
    \ where the PCE was used to derive paths\n   for MPLS Label Switched Paths (LSPs),\
    \ paths were requested by network\n   elements (known as Path Computation Clients\
    \ (PCCs)), and the results\n   of the path computations were supplied to network\
    \ elements using the\n   Path Computation Element Communication Protocol (PCEP)\
    \ [RFC5440].\n   This protocol was later extended to allow a PCE to send unsolicited\n\
    \   requests to the network for LSP establishment [RFC8281].\n   SDN has a far\
    \ broader applicability than just signaled MPLS or GMPLS\n   traffic-engineered\
    \ networks.  The PCE component in an SDN system may\n   be used to determine paths\
    \ in a wide range of use cases including\n   static LSPs, segment routing [SR-ARCH],\
    \ SFC [RFC7665], and indeed any\n   form of routed or switched network.  It is,\
    \ therefore, reasonable to\n   consider PCEP as a general southbound control protocol\
    \ (i.e., a\n   control protocol for communicating from the central controller\
    \ to\n   network elements) for use in these environments to allow the PCE to\n\
    \   be fully enabled as a central controller.\n   This document introduces the\
    \ architecture for PCE as a central\n   controller as an extension of the architecture\
    \ described in [RFC4655]\n   and assumes the continued use of PCEP as the protocol\
    \ used between\n   PCE and PCC.  This document also examines the motivations and\n\
    \   applicability for PCEP as a Southbound Interface (SBI) and introduces\n  \
    \ the implications for the protocol used in this way.  A PCE-based\n   central\
    \ controller can simplify the processing of a distributed\n   control plane by\
    \ blending it with elements of SDN and without\n   necessarily completely replacing\
    \ it.\n   This document does not describe use cases in detail and does not\n \
    \  define protocol extensions: that work is left for other documents.\n"
- title: 2.  Architecture
  contents:
  - "2.  Architecture\n   The architecture for the use of PCE within centralized control\
    \ of a\n   network is based on the understanding that a PCE can determine how\n\
    \   connections should be placed and how resources should be used within\n   the\
    \ network, and that the PCE can then cause those connections to be\n   established.\
    \  Figure 1 shows how this control relationship works in a\n   network with an\
    \ active control plane.  This is a familiar view for\n   those who have read and\
    \ understood [RFC4655] and [RFC8281].\n   In this mode of operation, the central\
    \ controller is asked to create\n   connectivity by a network orchestrator, a\
    \ service manager, an\n   Operations Support System (OSS), a Network Management\
    \ Station (NMS),\n   or some other application.  The PCE-based controller computes\
    \ paths\n   with awareness of the network topology, the available resources, and\n\
    \   the other services supported in the network.  This information is\n   held\
    \ in the Traffic Engineering Database (TED) and other databases\n   available\
    \ to the PCE.  Then the PCE sends a request using PCEP to one\n   of the Network\
    \ Elements (NEs), and that NE uses a control plane to\n   establish the requested\
    \ connections and reserve the network\n   resources.\n   Note that other databases\
    \ (such as an LSP Database (LSP-DB)) might\n   also be used, but for simplicity\
    \ of illustration, just the TED is\n   shown.\n              --------------------------------------------\n\
    \             | Orchestrator / Service Manager / OSS / NMS |\n              --------------------------------------------\n\
    \                      ^\n                      |\n                      v\n \
    \                 ------------\n                 |            |     -----\n  \
    \               | PCE-Based  |<---| TED |\n                 | Controller |   \
    \  -----\n                 |            |\n                  ------------\n  \
    \                  ^\n                PCEP|\n                    v\n         \
    \          ----             ----       ----       ----\n                  | NE\
    \ |<--------->| NE |<--->| NE |<--->| NE |\n                   ----  Signaling\
    \  ----       ----       ----\n                         Protocol\n          Figure\
    \ 1: Architecture for the Central Controller with\n                          \
    \    a Control Plane\n   Although the architecture shown in Figure 1 represents\
    \ a form of SDN,\n   one objective of SDN in some environments is to remove the\
    \ dependency\n   on a control plane.  A transition architecture toward this goal\
    \ is\n   presented in [RFC7491] and is shown in Figure 2.  In this case,\n   services\
    \ are still requested in the same way, and the PCE-based\n   controller still\
    \ requests use of the network using PCEP.  The main\n   difference is that the\
    \ consumer of the PCEP messages is a network\n   controller that provisions the\
    \ resources and instructs the data plane\n   using an SBI that provides an interface\
    \ to each NE.\n                --------------------------------------------\n\
    \               | Orchestrator / Service Manager / OSS / NMS |\n             \
    \   --------------------------------------------\n                           \
    \        ^\n                                   |\n                           \
    \        v\n                              ------------\n                     \
    \        |            |     -----\n                             | PCE-Based  |<---|\
    \ TED |\n                             | Controller |     -----\n             \
    \                |            |\n                              ------------\n\
    \                                   ^\n                                   | PCEP\n\
    \                                   v\n                              ------------\n\
    \                             |  Network   |\n                             | Controller\
    \ |\n                             /------------\\\n                        SBI\
    \ /   ^       ^  \\\n                           /    |       |   \\\n        \
    \                  /     v       v    \\\n                     ----/    ---- \
    \    ----   \\----\n                    | NE |   | NE |   | NE |  | NE |\n   \
    \                  ----     ----     ----    ----\n           Figure 2: Architecture\
    \ Including a Network Controller\n   The approach in Figure 2 delivers the SDN\
    \ functionality but is overly\n   complicated and insufficiently flexible.\n \
    \  o  The complication is created by the use of two controllers in a\n      hierarchical\
    \ organization and the resultant use of two protocols\n      in a southbound direction.\n\
    \   o  The lack of flexibility arises from the assumed or required lack\n    \
    \  of a control plane.\n   This document describes an architecture that reduces\
    \ the number of\n   components and is flexible to a number of deployment models\
    \ and use\n   cases.  In this hybrid approach (shown in Figure 3), the network\n\
    \   controller is PCE enabled and can also speak PCEP as the SBI (i.e.,\n   it\
    \ can communicate with each node along the path using PCEP).  That\n   means that\
    \ the controller can communicate with a conventional\n   control-plane-enabled\
    \ NE using PCEP and can also use the same\n   protocol to program individual NEs.\
    \  In this way, the PCE-based\n   controller can control a wider range of networks\
    \ and deliver many\n   different functions as described in Section 3.\n   There\
    \ will be a trade-off in different application scenarios.  In\n   some cases,\
    \ the use of a control plane will simplify deployment (for\n   example, by distributing\
    \ recovery actions), and in other cases, a\n   control plane may add operational\
    \ complexity.\n   PCEP is essentially already capable of acting as an SBI and\
    \ only\n   small, use-case-specific modifications to the protocol are needed to\n\
    \   support this architecture.  The implications for the protocol are\n   discussed\
    \ further in Section 4.\n                  --------------------------------------------\n\
    \                 | Orchestrator / Service Manager / OSS / NMS |\n           \
    \       --------------------------------------------\n                       \
    \               ^\n                                      |\n                 \
    \                     v\n                                ------------\n      \
    \                         |            |     -----\n                         \
    \      | PCE-Based  |<---| TED |\n                               | Controller\
    \ |     -----\n                               |            |\n               \
    \                /------------\\\n                         PCEP /   ^       ^\
    \  \\\n                             /    |       |   \\\n                    \
    \        /     v       v    \\\n                           /    ----     ----\
    \   \\\n                          /    | NE |   | NE |   \\\n                \
    \     ----/      ----     ----     \\----\n                    | NE |        \
    \                | NE |\n                     ----                          ----\n\
    \                       ^        ----     ----      ^\n                      \
    \ :......>| NE |...| NE |<....:\n             Signaling Protocol ----     ----\n\
    \          Figure 3: Architecture for Node-by-Node Central Control\n"
- title: 2.1.  Resilience and Scaling
  contents:
  - "2.1.  Resilience and Scaling\n   Systems with central controllers are vulnerable\
    \ to two problems:\n   failure of the controller or overload of the controller.\
    \  These\n   concerns are not unique to the use of a PCE-based controller, but\n\
    \   they need to be addressed in this document before the PCE-based\n   controller\
    \ architecture can be considered for use in all but the\n   smallest networks.\n\
    \   There are three architectural mechanisms that can be applied to\n   address\
    \ these issues.  The mechanisms are described separately for\n   clarity, but\
    \ a deployment may use any combination of the approaches.\n   For simplicity of\
    \ illustration, these three approaches are shown in\n   the sections that follow\
    \ without a control plane.  However, the\n   general, hybrid approach of Figure\
    \ 3 is applicable in each case.\n"
- title: 2.1.1.  Partitioned Network
  contents:
  - "2.1.1.  Partitioned Network\n   The first and simplest approach to handling controller\
    \ overload or\n   scalability is to use multiple controllers, each responsible\
    \ for a\n   part of the network.  We can call the resultant areas of control\n\
    \   \"domains\" [RFC4655].\n   This approach is shown in Figure 4.  It can clearly\
    \ address some of\n   the scaling and overload concerns since each controller\
    \ now only has\n   responsibility for a subset of the network elements.  But this\
    \ comes\n   at a cost because end-to-end connections require coordination between\n\
    \   the controllers.  Furthermore, this technique does not remove the\n   concern\
    \ about a single point-of-failure even if it does reduce the\n   impact on the\
    \ network of the failure of a single controller.\n   Note that PCEP is designed\
    \ to work as a PCE-to-PCE protocol as well\n   as a PCE-to-PCC protocol, so it\
    \ should be possible to use it to\n   coordinate between PCE-based controllers\
    \ in this model.\n                    --------------------------------------------\n\
    \                   | Orchestrator / Service Manager / OSS / NMS |\n         \
    \           --------------------------------------------\n                   \
    \             ^                 ^\n                                |         \
    \        |\n                                v                 v\n            \
    \            ------------  Coordi-   ------------\n             -----     |  \
    \          |  nation  |            |     -----\n            | TED |--->| PCE-Based\
    \  |<-------->| PCE-Based  |<---| TED |\n             -----     | Controller |\
    \          | Controller |     -----\n                       |            |   \
    \ ::    |            |\n                       /------------     ::     ------------\\\
    \n                      /    ^       ^     ::    ^        ^    \\\n          \
    \           /     |       |     ::    |        |     \\\n                    |\
    \      |       |     ::    |        |      |\n                    v      v   \
    \    v     ::    v        v      v\n                  ----    ----    ----   ::\
    \   ----    ----    ----\n                 | NE |  | NE |  | NE |  ::  | NE |\
    \  | NE |  | NE |\n                  ----    ----    ----   ::   ----    ----\
    \    ----\n                                         ::\n                     \
    \           Domain 1 :: Domain 2\n                                         ::\n\
    \          Figure 4: Multiple Controllers on a Partitioned Network\n"
- title: 2.1.2.  Multiple Parallel Controllers
  contents:
  - "2.1.2.  Multiple Parallel Controllers\n   Multiple controllers may be deployed\
    \ where each controller is capable\n   of controlling all of the network elements.\
    \  Thus, the failure of any\n   one controller will not leave the network unmanageable\
    \ and, in normal\n   circumstances, the load can be distributed across the controllers.\n\
    \   Multiple parallel controllers may be deployed as shown in Figure 5.\n   Each\
    \ controller is capable of controlling all of the network\n   elements; thus,\
    \ the failure of any one controller will not leave the\n   network unmanageable,\
    \ and in normal circumstances, the load can be\n   distributed across the controllers.\
    \  In this model, the orchestrator\n   (or any requester) must select a controller\
    \ to consume its request.\n                         --------------------------------------------\n\
    \                        | Orchestrator / Service Manager / OSS / NMS |\n    \
    \                     --------------------------------------------\n         \
    \                       ^                            ^\n                     \
    \           |    ___________________     |\n                                |\
    \   |  Synchronization  |    |\n                                v   v        \
    \           v    v\n                          ------------                 ------------\n\
    \                         |            |     -----     |            |\n      \
    \                   | PCE-Based  |<---| TED |--->| PCE-Based  |\n            \
    \             | Controller |     -----     | Controller |\n                  \
    \       |            |__  ...........|            |\n                        \
    \  ------------\\  \\_:__        :------------\n                             \
    \   ^  ^   \\___:  \\  .....:  ^   ^\n                                |  |  .....:\\\
    \  \\_:___  ..:   :\n                                |  |__:___   \\___:_  \\\
    _:___  :\n                                | ....:   | .....: | ..:   | :\n   \
    \                             | :       | :      | :     | :\n               \
    \                 v v       v v      v v     v v\n                           \
    \    ----      ----     ----     ----\n                              | NE |  \
    \  | NE |   | NE |   | NE |\n                               ----      ----   \
    \  ----     ----\n                 Figure 5: Multiple Redundant Controllers\n\
    \   An alternate approach is to present the controllers as a \"cluster\"\n   that\
    \ represents itself externally as a single controller as in\n   Figure 3 but that\
    \ is actually comprised of multiple controllers.  The\n   size of the cluster\
    \ may be varied according to the load in the manner\n   of Network Functions Virtualization\
    \ (NFV), and the cluster is\n   responsible for sharing load among the members\
    \ of the cluster.  This\n   approach is shown in Figure 6.\n                 \
    \      --------------------------------------------\n                      | Orchestrator\
    \ / Service Manager / OSS / NMS |\n                       --------------------------------------------\n\
    \                                             ^\n                            \
    \                 |\n                   --------------------------+-------------------------\n\
    \                  | Controller ______________|_____________            |\n  \
    \                | Cluster   |                            |           |\n    \
    \              |           |    ___________________     |           |\n      \
    \            |           |   |  Synchronization  |    |           |\n        \
    \          |           v   v                   v    v           |\n          \
    \        |     ------------      -----      ------------      |\n            \
    \      |    | PCE-Based  |<---| TED |--->| PCE-Based  |     |\n              \
    \    |    | Controller |     -----     | Controller |     |\n                \
    \  |    | Instance   |               | Instance   |     |\n                  |\
    \     ------------                 ------------      |\n                  |  \
    \         ^                            ^           |\n                  |    \
    \       |____________________________|           |\n                  |      \
    \                    |                         |\n                   --------------------------+-------------------------\n\
    \                                _____________|_____________\n               \
    \                |         |        |        |\n                             \
    \  v         v        v        v\n                             ----      ----\
    \     ----     ----\n                            | NE |    | NE |   | NE |   |\
    \ NE |\n                             ----      ----     ----     ----\n      \
    \     Figure 6: Multiple Controllers Presented as a Cluster\n   To achieve full\
    \ redundancy and to be able to continue to provide full\n   function in the event\
    \ of a controller failure, the controllers must\n   synchronize with each other.\
    \  This is nominally a simple task if\n   there are just two controllers but can\
    \ actually be quite complex if\n   state changes in the network are not to be\
    \ lost.  Furthermore, if\n   there are more than two controllers, the synchronization\
    \ between\n   controllers can become a hard problem.\n   Synchronization issues\
    \ are often off-loaded as \"database\n   synchronization\" problems, because distributed\
    \ database packages have\n   already had to address these challenges, or by using\
    \ a shared\n   database.  In networking, the problem may also be addressed by\n\
    \   collecting the state from the network (effectively using the network\n   as\
    \ a database) using normal routing protocols such as OSPF, IS-IS,\n   and BGP.\
    \  It should be noted that addressing the synchronization\n   problem through\
    \ a shared database may be hiding the issues of\n   congestion and of a single\
    \ point of failure: while the controllers\n   may have been made resilient by\
    \ allowing redundancy, the shared\n   database is still a problem, so the whole\
    \ system is still vulnerable.\n"
- title: 2.1.3.  Hierarchical Controllers
  contents:
  - "2.1.3.  Hierarchical Controllers\n   Figure 7 shows an approach with hierarchical\
    \ controllers.  This\n   approach was developed for PCEs in [RFC6805] and appears\
    \ in various\n   SDN architectures where a \"parent PCE\", an \"orchestrator\"\
    , or a\n   \"super controller\" takes responsibility for a high-level view of\
    \ the\n   network before distributing tasks to lower-level PCEs or controllers.\n\
    \   On its own, this approach does little to protect against the failure\n   of\
    \ a controller, but it can make significant improvements in loading\n   and scaling\
    \ of the individual controllers.  It also offers a good way\n   to support end-to-end\
    \ connectivity across multiple administrative or\n   technology-specific domains.\n\
    \   Note that this model can be arbitrarily recursive with a PCE-based\n   controller\
    \ being the child of one parent PCE-based controller while\n   acting as the parent\
    \ of another set of PCE-based controllers.\n                      --------------------------------------------\n\
    \                     | Orchestrator / Service Manager / OSS / NMS |\n       \
    \               --------------------------------------------\n               \
    \                            ^\n                                           |\n\
    \                                           v\n                              \
    \        ------------\n                                     |   Parent   |   \
    \  -----\n                                     | PCE-Based  |<---| TED |\n   \
    \                                  | Controller |     -----\n                \
    \                     |            |\n                                      ------------\n\
    \                                       ^        ^\n                         \
    \              |        |\n                                       v   ::   v\n\
    \                             ------------  ::  ------------\n               \
    \   -----     |            | :: |            |     -----\n                 | TED\
    \ |--->| PCE-Based  | :: | PCE-Based  |<---| TED |\n                  -----  \
    \   | Controller | :: | Controller |     -----\n                           /|\
    \            | :: |            |\\\n                          /  ------------\
    \  ::  ------------  \\\n                         /   ^       ^     ::    ^  \
    \      ^   \\\n                        /    |       |     ::    |        |   \
    \ \\\n                       /     |       |     ::    |        |     \\\n   \
    \                   |      |       |     ::    |        |      |\n           \
    \           v      v       v     ::    v        v      v\n                   \
    \ ----    ----    ----   ::   ----    ----    ----\n                   | NE |\
    \  | NE |  | NE |  ::  | NE |  | NE |  | NE |\n                    ----    ----\
    \    ----   ::   ----    ----    ----\n                                      \
    \     ::\n                                  Domain 1 :: Domain 2\n           \
    \                                ::\n                    Figure 7: Hierarchical\
    \ Controllers\n"
- title: 3.  Applicability
  contents:
  - "3.  Applicability\n   This section gives a very high-level introduction to the\n\
    \   applicability of a PCE-based centralized controller.  There is no\n   attempt\
    \ to explain each use case in detail, and the inclusion of a\n   use case is not\
    \ intended to suggest that deploying a PCE-based\n   controller is a mandatory\
    \ or recommended approach.  The sections\n   below are provided as a stimulus\
    \ to the discussion of the\n   applicability of a PCE-based controller, and it\
    \ is expected that\n   separate documents will be written to develop the use cases\
    \ in which\n   there is interest for implementation and deployment.  As described\
    \ in\n   Section 4, specific enhancements to PCEP may be needed for some of\n\
    \   these use cases, and it is expected that the documents that develop\n   each\
    \ use case will also address any extensions to PCEP.\n   The rest of this section\
    \ is divided into two sub-sections.  The first\n   approaches the question of\
    \ applicability from a consideration of the\n   network technology.  The second\
    \ looks at the high-level functions\n   that can be delivered by using a PCE-based\
    \ controller.\n   As previously mentioned, this section is intended to just make\n\
    \   suggestions.  Thus, the material supplied is very brief.  The\n   omission\
    \ of a use case is in no way meant to imply some limit on the\n   applicability\
    \ of PCE-based control.\n"
- title: 3.1.  Technology-Oriented Applicability
  contents:
  - "3.1.  Technology-Oriented Applicability\n   This section provides a list of use\
    \ cases based on network\n   technology.\n"
- title: 3.1.1.  Applicability to Control-Plane Operated Networks
  contents:
  - "3.1.1.  Applicability to Control-Plane Operated Networks\n   This mode of operation\
    \ is the common approach for an active, stateful\n   PCE to control a traffic-engineered\
    \ MPLS or GMPLS network [RFC8231].\n   Note that the PCE-based controller determines\
    \ what LSPs are needed\n   and where to place them.  PCEP is used to instruct\
    \ the head end of\n   each LSP, and the head end signals in the control plane\
    \ to set up the\n   LSP.\n   In this mode of operation, the PCE may construct\
    \ its TED in a number\n   of ways as described in [RFC4655], including (but not\
    \ limited to)\n   participating in the IGP or receiving information from a network\n\
    \   element via BGP-LS [RFC7752].\n"
- title: 3.1.2.  Static LSPs in MPLS
  contents:
  - "3.1.2.  Static LSPs in MPLS\n   Static LSPs are provisioned without the use of\
    \ a control plane.  This\n   means that they are established using a management\
    \ plane or \"manual\"\n   configuration.\n   Static LSPs can be provisioned as\
    \ explicit label instructions at each\n   hop on the end-to-end path LSP.  Each\
    \ router along the path must be\n   told what label-forwarding instructions to\
    \ program and what resources\n   to reserve.  The PCE-based controller keeps a\
    \ view of the network and\n   determines the paths of the end-to-end LSPs just\
    \ as it does for the\n   use case described in Section 3.1.1, but the controller\
    \ uses PCEP to\n   communicate with each router along the path of the end-to-end\
    \ LSP.\n   In this case, the PCE-based controller will take responsibility for\n\
    \   managing some part of the MPLS label space for each of the routers\n   that\
    \ it controls, and it may taker wider responsibility for\n   partitioning the\
    \ label space for each router and allocating different\n   parts for different\
    \ uses, communicating the ranges to the router\n   using PCEP.\n"
- title: 3.1.3.  MPLS Multicast
  contents:
  - "3.1.3.  MPLS Multicast\n   Multicast LSPs may be provisioned with a control plane\
    \ or as static\n   LSPs.  No extra considerations apply above those described\
    \ in\n   Sections 3.1.1 and 3.1.2 except, of course, to note that the PCE must\n\
    \   also include the instructions about where the LSP branches, i.e.,\n   where\
    \ packets must be copied.\n"
- title: 3.1.4.  Transport SDN
  contents:
  - "3.1.4.  Transport SDN\n   Transport SDN (T-SDN) is the application of SDN techniques\
    \ to\n   transport networks.  In this respect, a transport network is a\n   network\
    \ built from any technology below the IP layer and designed to\n   carry traffic\
    \ transparently in a connection-oriented way.  Thus, an\n   MPLS traffic-engineered\
    \ network is a transport network, although it\n   is more common to consider technologies\
    \ such as Time Division\n   Multiplexing (TDM) and Optical Transport Networks\
    \ (OTNs) to be\n   transport networks.\n   Transport networks may be operated\
    \ with or without a control plane\n   and may have point-to-point or point-to-multipoint\
    \ connections.\n   Thus, all of the considerations in Sections 3.1.1, 3.1.2, and\
    \ 3.1.3\n   apply so that the normal PCEP message allows a PCE-based central\n\
    \   controller to provision a transport network.  It is usually the case\n   that\
    \ additional technology-specific parameters are needed to\n   configure the NEs\
    \ or LSPs in transport networks, such as optical\n   characteristic.  Such parameters\
    \ will need to be carried in the PCEP\n   messages: new protocol extensions may\
    \ be needed, as described, for\n   example, in [PCEP-WSON-RWA].\n"
- title: 3.1.5.  Segment Routing
  contents:
  - "3.1.5.  Segment Routing\n   Segment routing is described in [SR-ARCH].  It relies\
    \ on a series of\n   forwarding instructions being placed in the header of a packet.\
    \  At\n   each hop in the network, a router looks at the first instruction and\n\
    \   may: continue to forward the packet unchanged; strip the top\n   instruction\
    \ and forward the packet; or strip the top instruction,\n   insert some additional\
    \ instructions, and forward the packet.\n   The segment routing architecture supports\
    \ operations that can be used\n   to steer packet flows in a network, thus providing\
    \ a form of traffic\n   engineering.  A PCE-based controller can be responsible\
    \ for computing\n   the paths for packet flows in a segment routing network, configuring\n\
    \   the forwarding actions on the routers, and telling the edge routers\n   what\
    \ instructions to attach to packets as they enter the network.\n   These last\
    \ two operations can be achieved using PCEP, and the\n   PCE-based controller\
    \ will assume responsibility for managing the\n   space of labels or path identifiers\
    \ used to determine how packets are\n   forwarded.\n"
- title: 3.1.6.  Service Function Chaining
  contents:
  - "3.1.6.  Service Function Chaining\n   SFC is described in [RFC7665].  It is the\
    \ process of directing\n   traffic in a network such that it passes through specific\
    \ hardware\n   devices or virtual machines (known as service function nodes) that\n\
    \   can perform particular desired functions on the traffic.  The set of\n   functions\
    \ to be performed and the order in which they are to be\n   performed is known\
    \ as a service function chain.  The chain is\n   enhanced with the locations at\
    \ which the service functions are to be\n   performed to derive a Service Function\
    \ Path (SFP).  Each packet is\n   marked as belonging to a specific SFP, and that\
    \ marking lets each\n   successive service function node know which functions\
    \ to perform and\n   to which service function node to send the packet next.\n\
    \   To operate an SFC network, the service function nodes must be\n   configured\
    \ to understand the packet markings, and the edge nodes must\n   be told how to\
    \ mark packets entering the network.  Additionally, it\n   may be necessary to\
    \ establish tunnels between service function nodes\n   to carry the traffic.\n\
    \   Planning an SFC network requires load balancing between service\n   function\
    \ nodes and traffic engineering across the network that\n   connects them.  These\
    \ are operations that can be performed by a\n   PCE-based controller, and that\
    \ controller can use PCEP to program the\n   network and install the service function\
    \ chains and any required\n   tunnels.\n"
- title: 3.2.  High-Level Applicability
  contents:
  - "3.2.  High-Level Applicability\n   This section provides a list of the high-level\
    \ functions that can be\n   delivered by using a PCE-based controller.\n"
- title: 3.2.1.  Traffic Engineering
  contents:
  - "3.2.1.  Traffic Engineering\n   According to [RFC2702], TE is concerned with\
    \ performance optimization\n   of operational networks.  In general, it encompasses\
    \ the application\n   of technology and scientific principles to the measurement,\
    \ modeling,\n   characterization, control of Internet traffic, and application\
    \ of\n   such knowledge and techniques to achieve specific performance\n   objectives.\n\
    \   From a practical point of view, this involves having an understanding\n  \
    \ of the topology of the network, the characteristics of the nodes and\n   links\
    \ in the network, and the traffic demands and flows across the\n   network.  It\
    \ also requires that actions can be taken to ensure that\n   traffic follows specific\
    \ paths through the network.\n   PCE was specifically developed to address TE\
    \ in an MPLS network, so a\n   PCE-based controller is well suited to analyze\
    \ TE problems and supply\n   answers that can be installed in the network using\
    \ PCEP.  PCEP can be\n   responsible for initiating paths across the network through\
    \ a control\n   plane or for installing state in the network node by node such\
    \ as in\n   a segment-routed network (see Section 3.1.5) or by configuring IGP\n\
    \   metrics.\n"
- title: 3.2.2.  Traffic Classification
  contents:
  - "3.2.2.  Traffic Classification\n   Traffic classification is an important part\
    \ of traffic engineering.\n   It is the process of looking at a packet to determine\
    \ how it should\n   be treated as it is forwarded through the network.  It applies\
    \ in\n   many scenarios including MPLS traffic engineering (where it\n   determines\
    \ what traffic is forwarded onto which LSPs); segment\n   routing (where it is\
    \ used to select which set of forwarding\n   instructions to add to a packet);\
    \ and SFC (where it indicates along\n   which service function path a packet should\
    \ be forwarded).  In\n   conjunction with traffic engineering, traffic classification\
    \ is an\n   important enabler for load balancing.\n   Traffic classification is\
    \ closely linked to the computational\n   elements of planning for the network\
    \ functions just listed because it\n   determines how traffic load is balanced\
    \ and distributed through the\n   network.  Therefore, selecting what traffic\
    \ classification should be\n   performed by a router is an important part of the\
    \ work done by a\n   PCE-based controller.\n   Instructions can be passed from\
    \ the controller to the routers using\n   PCEP.  These instructions tell the routers\
    \ how to map traffic to\n   paths or connections.\n"
- title: 3.2.3.  Service Delivery
  contents:
  - "3.2.3.  Service Delivery\n   Various network services may be offered over a network.\
    \  These\n   include protection services (including end-to-end protection\n  \
    \ [RFC4427], restoration after failure, and fast reroute [RFC4090]);\n   Virtual\
    \ Private Network (VPN) services (such as Layer 3 VPNs\n   [RFC4364] or Ethernet\
    \ VPNs [RFC7432]); or Pseudowires [RFC3985].\n   Delivering services over a network\
    \ in an optimal way requires\n   coordination in the way that network resources\
    \ are allocated to\n   support the services.  A PCE-based central controller can\
    \ consider\n   the whole network and all components of a service at once when\n\
    \   planning how to deliver the service.  It can then use PCEP to manage\n   the\
    \ network resources and to install the necessary associations\n   between those\
    \ resources.\n"
- title: 4.  Protocol Implications / Guidance for Solution Developers
  contents:
  - "4.  Protocol Implications / Guidance for Solution Developers\n   PCEP is a push-pull\
    \ protocol that is designed to move requests and\n   responses between a server\
    \ (the PCE) and clients (the PCCs, i.e., the\n   network elements).  In particular,\
    \ it has a message (the LSP Initiate\n   Request (PCInitiate); see [RFC8281])\
    \ that can be sent by the PCE to\n   install state or cause actions at the PCC\
    \ and a response message\n   (Path Computation State Report (PCRpt)) that is used\
    \ to confirm the\n   request.\n   As such, there is an expectation that only relatively\
    \ minor changes\n   to PCEP are required to support the concept of a PCE-based\n\
    \   controller.  The only work expected to be needed is extensions to\n   existing\
    \ PCEP messages to carry additional or specific information\n   elements for the\
    \ individual use cases, which maintain backward\n   compatibility and do not impact\
    \ existing PCEP deployments.  [RFC5440]\n   already describes how legacy implementations\
    \ handle unknown protocol\n   extensions and how to use the PCEP Open message\
    \ to indicate support\n   for PCEP features.  Where possible, consistent with\
    \ the general\n   principles of how protocols are extended, any additions to the\n\
    \   protocol should be made in a generic way such that they are open to\n   use\
    \ in a range of applications.\n   It is anticipated that new documents (such as\
    \ [PCEP-CONTROLLER]) will\n   be produced for each use case dependent on support\
    \ and demand.  Such\n   documents will explain the use case and define the necessary\
    \ protocol\n   extensions.\n   Protocol extensions could have impact on existing\
    \ PCEP deployments\n   and the interoperability between different implementations.\
    \  It is\n   anticipated that changes of the PCEP protocol or addition of\n  \
    \ information elements could require additional testing to ensure\n   interoperability\
    \ between different PCEP implementations.\n   It is reasonable to expect that\
    \ implementations are able to select a\n   subset or profile of the protocol extensions\
    \ and PCEP features that\n   are relevant for the application scenario in which\
    \ they will be\n   deployed.  Identification of these profiles should form part\
    \ of the\n   protocol itself so that interoperability can be easily determined\
    \ and\n   testing can be limited to the specific profiles.\n   Note that protocol\
    \ mechanisms to handle synchronization of state in\n   parallel PCE-based controllers\
    \ will also be required if parallel\n   controllers are used as described in Section\
    \ 2.1.2.  In [RFC8231],\n   there is a discussion of mechanisms to achieve PCE\
    \ state\n   synchronization.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Security considerations for a PCE-based controller\
    \ are little\n   different from those for any other PCE system.  That is, the\n\
    \   operation relies heavily on the use and security of PCEP, so\n   consideration\
    \ should be given to the security features discussed in\n   [RFC5440] and the\
    \ additional mechanisms described in [RFC8253].\n   It should be observed that\
    \ the trust model of a network that operates\n   without a control plane is different\
    \ from one with a control plane.\n   The conventional \"chain of trust\" used\
    \ with a control plane is\n   replaced by individual trust relationships between\
    \ the controller and\n   each individual NE.  This model may be considerably easier\
    \ to manage,\n   so it is more likely to be operated with a high level of security.\n\
    \   However, an architecture with a central controller has a central\n   point\
    \ of failure, and this is also a security weakness since the\n   network can be\
    \ vulnerable to denial-of-service attacks on the\n   controller.  Similarly, the\
    \ central controller provides a focus for\n   interception and modification of\
    \ messages sent to individual NEs.  In\n   short, while the interactions with\
    \ a PCE-based controller are not\n   substantially different to those in any other\
    \ SDN architecture, the\n   security implications of SDN have not been fully discussed\
    \ or\n   described.  Therefore, protocol and applicability work-around\n   solutions\
    \ for this architecture must take proper account of these\n   concerns.\n   It\
    \ is expected that each new document that is produced for a specific\n   use case\
    \ will also include considerations of the security impacts of\n   the use of a\
    \ PCE-based central controller on the network type and\n   services being managed.\n"
- title: 6.  Manageability Considerations
  contents:
  - "6.  Manageability Considerations\n   The architecture described in this document\
    \ is a management\n   architecture: the PCE-based controller is a management component\
    \ that\n   controls the network through a southbound control protocol (PCEP).\n\
    \   An implementation of a PCE-based controller will require access to\n   information\
    \ about the state of the network, its nodes, and its links.\n   Some of this will\
    \ be the TED as is normal for a PCE and can be\n   collected using the mechanisms\
    \ already in place (such as listening to\n   the IGPs, using BGP-LS [RFC7752],\
    \ or northbound export of\n   YANG-encoded data [YANG-TE] from the network elements\
    \ to the\n   controller).  More information may be collected in the LSP database\n\
    \   for stateful PCEs as described in [RFC7399] and [RFC8231].\n   Additional\
    \ information may be needed for other specific use cases and\n   will need to\
    \ be collected and passed to the controller.  This may\n   require protocol extensions\
    \ for the mechanisms listed in this\n   paragraph.\n   The use of different PCEP\
    \ options and protocol extensions may have an\n   impact on interoperability,\
    \ which is a management issue.  As noted in\n   Section 4, protocol extensions\
    \ should be done in a way that makes it\n   possible to identify profiles of PCEP\
    \ to aid interoperability, and\n   this will aid deployment and manageability.\n\
    \   [RFC5440] contains a substantive Manageability Considerations section\n  \
    \ that examines how a PCE-based system and a PCE-enabled system may be\n   managed.\
    \  A MIB module for PCEP was published as [RFC7420], and a\n   YANG module for\
    \ PCEP has also been proposed [YANG-PCEP].\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC4655]  Farrel, A., Vasseur, J., and J. Ash,\
    \ \"A Path Computation\n              Element (PCE)-Based Architecture\", RFC\
    \ 4655,\n              DOI 10.17487/RFC4655, August 2006,\n              <https://www.rfc-editor.org/info/rfc4655>.\n\
    \   [RFC5440]  Vasseur, JP., Ed. and JL. Le Roux, Ed., \"Path Computation\n  \
    \            Element (PCE) Communication Protocol (PCEP)\", RFC 5440,\n      \
    \        DOI 10.17487/RFC5440, March 2009,\n              <https://www.rfc-editor.org/info/rfc5440>.\n\
    \   [RFC8281]  Crabbe, E., Minei, I., Sivabalan, S., and R. Varga, \"Path\n  \
    \            Computation Element Communication Protocol (PCEP)\n             \
    \ Extensions for PCE-Initiated LSP Setup in a Stateful PCE\n              Model\"\
    , RFC 8281, DOI 10.17487/RFC8281, December 2017,\n              <https://www.rfc-editor.org/info/rfc8281>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [PCECC]    Zhao, Q., Li, Z., Khasanov, B., Ke,\
    \ Z., Fang, L., Zhou,\n              C., Communications, T., Rachitskiy, A., and\
    \ A. Gulida,\n              \"The Use Cases for Using PCE as the Central\n   \
    \           Controller(PCECC) of LSPs\", Work in Progress,\n              draft-zhao-teas-pcecc-use-cases-02,\
    \ October 2016.\n   [PCEP-CONTROLLER]\n              Zhao, Q., Li, Z., Dhody,\
    \ D., Karunanithi, S., Farrel, A.,\n              and C. Zhou, \"PCEP Procedures\
    \ and Protocol Extensions for\n              Using PCE as a Central Controller\
    \ (PCECC) of LSPs\", Work\n              in Progress, draft-zhao-pce-pcep-extension-for-pce-\n\
    \              controller-06, October 2017.\n   [PCEP-WSON-RWA]\n            \
    \  Lee, Y. and R. Casellas, \"PCEP Extension for WSON Routing\n              and\
    \ Wavelength Assignment\", Work in Progress,\n              draft-ietf-pce-wson-rwa-ext-07,\
    \ November 2017.\n   [RFC2702]  Awduche, D., Malcolm, J., Agogbua, J., O'Dell,\
    \ M., and J.\n              McManus, \"Requirements for Traffic Engineering Over\
    \ MPLS\",\n              RFC 2702, DOI 10.17487/RFC2702, September 1999,\n   \
    \           <https://www.rfc-editor.org/info/rfc2702>.\n   [RFC3985]  Bryant,\
    \ S., Ed. and P. Pate, Ed., \"Pseudo Wire Emulation\n              Edge-to-Edge\
    \ (PWE3) Architecture\", RFC 3985,\n              DOI 10.17487/RFC3985, March\
    \ 2005,\n              <https://www.rfc-editor.org/info/rfc3985>.\n   [RFC4090]\
    \  Pan, P., Ed., Swallow, G., Ed., and A. Atlas, Ed., \"Fast\n              Reroute\
    \ Extensions to RSVP-TE for LSP Tunnels\", RFC 4090,\n              DOI 10.17487/RFC4090,\
    \ May 2005,\n              <https://www.rfc-editor.org/info/rfc4090>.\n   [RFC4364]\
    \  Rosen, E. and Y. Rekhter, \"BGP/MPLS IP Virtual Private\n              Networks\
    \ (VPNs)\", RFC 4364, DOI 10.17487/RFC4364, February\n              2006, <https://www.rfc-editor.org/info/rfc4364>.\n\
    \   [RFC4427]  Mannie, E., Ed. and D. Papadimitriou, Ed., \"Recovery\n       \
    \       (Protection and Restoration) Terminology for Generalized\n           \
    \   Multi-Protocol Label Switching (GMPLS)\", RFC 4427,\n              DOI 10.17487/RFC4427,\
    \ March 2006,\n              <https://www.rfc-editor.org/info/rfc4427>.\n   [RFC6805]\
    \  King, D., Ed. and A. Farrel, Ed., \"The Application of the\n              Path\
    \ Computation Element Architecture to the Determination\n              of a Sequence\
    \ of Domains in MPLS and GMPLS\", RFC 6805,\n              DOI 10.17487/RFC6805,\
    \ November 2012,\n              <https://www.rfc-editor.org/info/rfc6805>.\n \
    \  [RFC7025]  Otani, T., Ogaki, K., Caviglia, D., Zhang, F., and C.\n        \
    \      Margaria, \"Requirements for GMPLS Applications of PCE\",\n           \
    \   RFC 7025, DOI 10.17487/RFC7025, September 2013,\n              <https://www.rfc-editor.org/info/rfc7025>.\n\
    \   [RFC7399]  Farrel, A. and D. King, \"Unanswered Questions in the Path\n  \
    \            Computation Element Architecture\", RFC 7399,\n              DOI\
    \ 10.17487/RFC7399, October 2014,\n              <https://www.rfc-editor.org/info/rfc7399>.\n\
    \   [RFC7420]  Koushik, A., Stephan, E., Zhao, Q., King, D., and J.\n        \
    \      Hardwick, \"Path Computation Element Communication Protocol\n         \
    \     (PCEP) Management Information Base (MIB) Module\",\n              RFC 7420,\
    \ DOI 10.17487/RFC7420, December 2014,\n              <https://www.rfc-editor.org/info/rfc7420>.\n\
    \   [RFC7432]  Sajassi, A., Ed., Aggarwal, R., Bitar, N., Isaac, A.,\n       \
    \       Uttaro, J., Drake, J., and W. Henderickx, \"BGP MPLS-Based\n         \
    \     Ethernet VPN\", RFC 7432, DOI 10.17487/RFC7432, February\n             \
    \ 2015, <https://www.rfc-editor.org/info/rfc7432>.\n   [RFC7491]  King, D. and\
    \ A. Farrel, \"A PCE-Based Architecture for\n              Application-Based Network\
    \ Operations\", RFC 7491,\n              DOI 10.17487/RFC7491, March 2015,\n \
    \             <https://www.rfc-editor.org/info/rfc7491>.\n   [RFC7665]  Halpern,\
    \ J., Ed. and C. Pignataro, Ed., \"Service Function\n              Chaining (SFC)\
    \ Architecture\", RFC 7665,\n              DOI 10.17487/RFC7665, October 2015,\n\
    \              <https://www.rfc-editor.org/info/rfc7665>.\n   [RFC7752]  Gredler,\
    \ H., Ed., Medved, J., Previdi, S., Farrel, A., and\n              S. Ray, \"\
    North-Bound Distribution of Link-State and\n              Traffic Engineering\
    \ (TE) Information Using BGP\", RFC 7752,\n              DOI 10.17487/RFC7752,\
    \ March 2016,\n              <https://www.rfc-editor.org/info/rfc7752>.\n   [RFC8231]\
    \  Crabbe, E., Minei, I., Medved, J., and R. Varga, \"Path\n              Computation\
    \ Element Communication Protocol (PCEP)\n              Extensions for Stateful\
    \ PCE\", RFC 8231,\n              DOI 10.17487/RFC8231, September 2017,\n    \
    \          <https://www.rfc-editor.org/info/rfc8231>.\n   [RFC8253]  Lopez, D.,\
    \ Gonzalez de Dios, O., Wu, Q., and D. Dhody,\n              \"PCEPS: Usage of\
    \ TLS to Provide a Secure Transport for the\n              Path Computation Element\
    \ Communication Protocol (PCEP)\",\n              RFC 8253, DOI 10.17487/RFC8253,\
    \ October 2017,\n              <https://www.rfc-editor.org/info/rfc8253>.\n  \
    \ [SR-ARCH]  Filsfils, C., Previdi, S., Ginsberg, L., Decraene, B.,\n        \
    \      Litkowski, S., and R. Shakir, \"Segment Routing\n              Architecture\"\
    , Work in Progress, draft-ietf-spring-\n              segment-routing-13, October\
    \ 2017.\n   [YANG-PCEP]\n              Dhody, D., Hardwick, J., Beeram, V., and\
    \ j.\n              jefftant@gmail.com, \"A YANG Data Model for Path\n       \
    \       Computation Element Communications Protocol (PCEP)\", Work\n         \
    \     in Progress, draft-ietf-pce-pcep-yang-05, June 2017.\n   [YANG-TE]  Liu,\
    \ X., Bryskin, I., Beeram, V., Saad, T., Shah, H., and\n              O. Dios,\
    \ \"YANG Data Model for Traffic Engineering (TE)\n              Topologies\",\
    \ Work in Progress, draft-ietf-teas-yang-te-\n              topo-13, October 2017.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The ideas in this document owe a lot to the work started\
    \ by the\n   authors of [PCECC] and [PCEP-CONTROLLER].  The authors of this\n\
    \   document fully acknowledge the prior work and thank those involved\n   for\
    \ opening the discussion.  The individuals concerned are: King Ke,\n   Luyuan\
    \ Fang, Chao Zhou, Boris Zhang, and Zhenbin Li.\n   This document has benefited\
    \ from the discussions within a small ad\n   hoc design team; the members of which\
    \ are listed as document\n   contributors.\n   Thanks to Michael Scharf and Andy\
    \ Malis for a lively discussion of\n   this document.\n   Thanks to Phil Bedard,\
    \ Aijun Wang, and Elwyn Davies for last call\n   comments on this document.\n\
    \   Spencer Dawkins, Adam Roach, and Ben Campbell provided helpful\n   comments\
    \ during IESG review.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following people contributed to discussions that led to\
    \ the\n   development of this document:\n      Cyril Margaria\n      Email: cmargaria@juniper.net\n\
    \      Sudhir Cheruathur\n      Email: scheruathur@juniper.net\n      Dhruv Dhody\n\
    \      Email: dhruv.dhody@huawei.com\n      Daniel King\n      Email: daniel@olddog.co.uk\n\
    \      Iftekhar Hussain\n      Email: IHussain@infinera.com\n      Anurag Sharma\n\
    \      Email: AnSharma@infinera.com\n      Eric Wu\n      Email: eric.wu@huawei.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Adrian Farrel (editor)\n   Juniper Networks\n   Email:\
    \ afarrel@juniper.net\n   Quintin Zhao (editor)\n   Huawei Technologies\n   125\
    \ Nagog Technology Park\n   Acton, MA  01719\n   United States of America\n  \
    \ Email: quintin.zhao@huawei.com\n   Robin Li\n   Huawei Technologies\n   Huawei\
    \ Bld., No.156 Beiqing Road\n   Beijing  100095\n   China\n   Email: lizhenbin@huawei.com\n\
    \   Chao Zhou\n   Cisco Systems\n   Email: chao.zhou@cisco.com\n"
