- title: __initial_text__
  contents:
  - "             Lightweight Directory Access Protocol (LDAP):\n                \
    \      Directory Information Models\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Lightweight Directory Access Protocol (LDAP) is an Internet\n\
    \   protocol for accessing distributed directory services that act in\n   accordance\
    \ with X.500 data and service models.  This document\n   describes the X.500 Directory\
    \ Information Models, as used in LDAP.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Relationship to Other LDAP Specifications ..................3\n  \
    \    1.2. Relationship to X.501 ......................................4\n    \
    \  1.3. Conventions ................................................4\n      1.4.\
    \ Common ABNF Productions ....................................4\n   2. Model of\
    \ Directory User Information .............................6\n      2.1. The Directory\
    \ Information Tree .............................7\n      2.2. Structure of an\
    \ Entry ......................................7\n      2.3. Naming of Entries\
    \ ..........................................8\n      2.4. Object Classes .............................................9\n\
    \      2.5. Attribute Descriptions ....................................12\n  \
    \    2.6. Alias Entries .............................................16\n   3.\
    \ Directory Administrative and Operational Information ...........17\n      3.1.\
    \ Subtrees ..................................................17\n      3.2. Subentries\
    \ ................................................18\n      3.3. The 'objectClass'\
    \ attribute ...............................18\n      3.4. Operational Attributes\
    \ ....................................19\n   4. Directory Schema ...............................................22\n\
    \      4.1. Schema Definitions ........................................23\n  \
    \    4.2. Subschema Subentries ......................................32\n    \
    \  4.3. 'extensibleObject' object class ...........................35\n      4.4.\
    \ Subschema Discovery .......................................35\n   5. DSA (Server)\
    \ Informational Model ...............................36\n      5.1. Server-Specific\
    \ Data Requirements .........................36\n   6. Other Considerations ...........................................40\n\
    \      6.1. Preservation of User Information ..........................40\n  \
    \    6.2. Short Names ...............................................41\n    \
    \  6.3. Cache and Shadowing .......................................41\n   7. Implementation\
    \ Guidelines ......................................42\n      7.1. Server Guidelines\
    \ .........................................42\n      7.2. Client Guidelines .........................................42\n\
    \   8. Security Considerations ........................................43\n  \
    \ 9. IANA Considerations ............................................43\n   10.\
    \ Acknowledgements ..............................................44\n   11. Normative\
    \ References ..........................................45\n   Appendix A. Changes\
    \ ...............................................47\n      A.1. Changes to RFC\
    \ 2251 .......................................47\n      A.2. Changes to RFC 2252\
    \ .......................................49\n      A.3. Changes to RFC 2256 .......................................50\n\
    \      A.4. Changes to RFC 3674 .......................................51\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document discusses the X.500 Directory Information\
    \ Models\n   [X.501], as used by the Lightweight Directory Access Protocol (LDAP)\n\
    \   [RFC4510].\n   The Directory is \"a collection of open systems cooperating\
    \ to provide\n   directory services\" [X.500].  The information held in the Directory\n\
    \   is collectively known as the Directory Information Base (DIB).  A\n   Directory\
    \ user, which may be a human or other entity, accesses the\n   Directory through\
    \ a client (or Directory User Agent (DUA)).  The\n   client, on behalf of the\
    \ directory user, interacts with one or more\n   servers (or Directory System\
    \ Agents (DSA)).  A server holds a\n   fragment of the DIB.\n   The DIB contains\
    \ two classes of information:\n      1) user information (e.g., information provided\
    \ and administrated\n         by users).  Section 2 describes the Model of User\
    \ Information.\n      2) administrative and operational information (e.g., information\n\
    \         used to administer and/or operate the directory).  Section 3\n     \
    \    describes the model of Directory Administrative and Operational\n       \
    \  Information.\n   These two models, referred to as the generic Directory Information\n\
    \   Models, describe how information is represented in the Directory.\n   These\
    \ generic models provide a framework for other information\n   models.  Section\
    \ 4 discusses the subschema information model and\n   subschema discovery.  Section\
    \ 5 discusses the DSA (Server)\n   Informational Model.\n   Other X.500 information\
    \ models (such as access control distribution\n   knowledge and replication knowledge\
    \ information models) may be\n   adapted for use in LDAP.  Specification of how\
    \ these models apply to\n   LDAP is left to future documents.\n"
- title: 1.1.  Relationship to Other LDAP Specifications
  contents:
  - "1.1.  Relationship to Other LDAP Specifications\n   This document is a integral\
    \ part of the LDAP technical specification\n   [RFC4510], which obsoletes the\
    \ previously defined LDAP technical\n   specification, RFC 3377, in its entirety.\n\
    \   This document obsoletes RFC 2251, Sections 3.2 and 3.4, as well as\n   portions\
    \ of Sections 4 and 6.  Appendix A.1 summarizes changes to\n   these sections.\
    \  The remainder of RFC 2251 is obsoleted by the\n   [RFC4511], [RFC4513], and\
    \ [RFC4510] documents.\n   This document obsoletes RFC 2252, Sections 4, 5, and\
    \ 7.  Appendix A.2\n   summarizes changes to these sections.  The remainder of\
    \ RFC 2252 is\n   obsoleted by [RFC4517].\n   This document obsoletes RFC 2256,\
    \ Sections 5.1, 5.2, 7.1, and 7.2.\n   Appendix A.3 summarizes changes to these\
    \ sections.  The remainder of\n   RFC 2256 is obsoleted by [RFC4519] and [RFC4517].\n\
    \   This document obsoletes RFC 3674 in its entirety.  Appendix A.4\n   summarizes\
    \ changes since RFC 3674.\n"
- title: 1.2.  Relationship to X.501
  contents:
  - "1.2.  Relationship to X.501\n   This document includes material, with and without\
    \ adaptation, from\n   [X.501] as necessary to describe this protocol.  These\
    \ adaptations\n   (and any other differences herein) apply to this protocol, and\
    \ only\n   this protocol.\n"
- title: 1.3.  Conventions
  contents:
  - "1.3.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ BCP 14 [RFC2119].\n   Schema definitions are provided using LDAP description\
    \ formats (as\n   defined in Section 4.1).  Definitions provided here are formatted\n\
    \   (line wrapped) for readability.  Matching rules and LDAP syntaxes\n   referenced\
    \ in these definitions are specified in [RFC4517].\n"
- title: 1.4.  Common ABNF Productions
  contents:
  - "1.4.  Common ABNF Productions\n   A number of syntaxes in this document are described\
    \ using Augmented\n   Backus-Naur Form (ABNF) [RFC4234].  These syntaxes (as well\
    \ as a\n   number of syntaxes defined in other documents) rely on the following\n\
    \   common productions:\n      keystring = leadkeychar *keychar\n      leadkeychar\
    \ = ALPHA\n      keychar = ALPHA / DIGIT / HYPHEN\n      number  = DIGIT / ( LDIGIT\
    \ 1*DIGIT )\n      ALPHA   = %x41-5A / %x61-7A   ; \"A\"-\"Z\" / \"a\"-\"z\"\n\
    \      DIGIT   = %x30 / LDIGIT       ; \"0\"-\"9\"\n      LDIGIT  = %x31-39  \
    \           ; \"1\"-\"9\"\n      HEX     = DIGIT / %x41-46 / %x61-66 ; \"0\"-\"\
    9\" / \"A\"-\"F\" / \"a\"-\"f\"\n      SP      = 1*SPACE  ; one or more \" \"\n\
    \      WSP     = 0*SPACE  ; zero or more \" \"\n      NULL    = %x00 ; null (0)\n\
    \      SPACE   = %x20 ; space (\" \")\n      DQUOTE  = %x22 ; quote (\"\"\")\n\
    \      SHARP   = %x23 ; octothorpe (or sharp sign) (\"#\")\n      DOLLAR  = %x24\
    \ ; dollar sign (\"$\")\n      SQUOTE  = %x27 ; single quote (\"'\")\n      LPAREN\
    \  = %x28 ; left paren (\"(\")\n      RPAREN  = %x29 ; right paren (\")\")\n \
    \     PLUS    = %x2B ; plus sign (\"+\")\n      COMMA   = %x2C ; comma (\",\"\
    )\n      HYPHEN  = %x2D ; hyphen (\"-\")\n      DOT     = %x2E ; period (\".\"\
    )\n      SEMI    = %x3B ; semicolon (\";\")\n      LANGLE  = %x3C ; left angle\
    \ bracket (\"<\")\n      EQUALS  = %x3D ; equals sign (\"=\")\n      RANGLE  =\
    \ %x3E ; right angle bracket (\">\")\n      ESC     = %x5C ; backslash (\"\\\"\
    )\n      USCORE  = %x5F ; underscore (\"_\")\n      LCURLY  = %x7B ; left curly\
    \ brace \"{\"\n      RCURLY  = %x7D ; right curly brace \"}\"\n      ; Any UTF-8\
    \ [RFC3629] encoded Unicode [Unicode] character\n      UTF8    = UTF1 / UTFMB\n\
    \      UTFMB   = UTF2 / UTF3 / UTF4\n      UTF0    = %x80-BF\n      UTF1    =\
    \ %x00-7F\n      UTF2    = %xC2-DF UTF0\n      UTF3    = %xE0 %xA0-BF UTF0 / %xE1-EC\
    \ 2(UTF0) /\n                %xED %x80-9F UTF0 / %xEE-EF 2(UTF0)\n      UTF4 \
    \   = %xF0 %x90-BF 2(UTF0) / %xF1-F3 3(UTF0) /\n                %xF4 %x80-8F 2(UTF0)\n\
    \      OCTET   = %x00-FF ; Any octet (8-bit data unit)\n   Object identifiers\
    \ (OIDs) [X.680] are represented in LDAP using a\n   dot-decimal format conforming\
    \ to the ABNF:\n      numericoid = number 1*( DOT number )\n   Short names, also\
    \ known as descriptors, are used as more readable\n   aliases for object identifiers.\
    \  Short names are case insensitive and\n   conform to the ABNF:\n      descr\
    \ = keystring\n   Where either an object identifier or a short name may be specified,\n\
    \   the following production is used:\n      oid = descr / numericoid\n   While\
    \ the <descr> form is generally preferred when the usage is\n   restricted to\
    \ short names referring to object identifiers that\n   identify like kinds of\
    \ objects (e.g., attribute type descriptions,\n   matching rule descriptions,\
    \ object class descriptions), the\n   <numericoid> form should be used when the\
    \ object identifiers may\n   identify multiple kinds of objects or when an unambiguous\
    \ short name\n   (descriptor) is not available.\n   Implementations SHOULD treat\
    \ short names (descriptors) used in an\n   ambiguous manner (as discussed above)\
    \ as unrecognized.\n   Short Names (descriptors) are discussed further in Section\
    \ 6.2.\n"
- title: 2.  Model of Directory User Information
  contents:
  - "2.  Model of Directory User Information\n   As [X.501] states:\n      The purpose\
    \ of the Directory is to hold, and provide access to,\n      information about\
    \ objects of interest (objects) in some 'world'.\n      An object can be anything\
    \ which is identifiable (can be named).\n      An object class is an identified\
    \ family of objects, or conceivable\n      objects, which share certain characteristics.\
    \  Every object\n      belongs to at least one class.  An object class may be\
    \ a subclass\n      of other object classes, in which case the members of the\
    \ former\n      class, the subclass, are also considered to be members of the\n\
    \      latter classes, the superclasses.  There may be subclasses of\n      subclasses,\
    \ etc., to an arbitrary depth.\n   A directory entry, a named collection of information,\
    \ is the basic\n   unit of information held in the Directory.  There are multiple\
    \ kinds\n   of directory entries.\n   An object entry represents a particular\
    \ object.  An alias entry\n   provides alternative naming.  A subentry holds administrative\
    \ and/or\n   operational information.\n   The set of entries representing the\
    \ DIB are organized hierarchically\n   in a tree structure known as the Directory\
    \ Information Tree (DIT).\n   Section 2.1 describes the Directory Information\
    \ Tree.\n   Section 2.2 discusses the structure of entries.\n   Section 2.3 discusses\
    \ naming of entries.\n   Section 2.4 discusses object classes.\n   Section 2.5\
    \ discusses attribute descriptions.\n   Section 2.6 discusses alias entries.\n"
- title: 2.1.  The Directory Information Tree
  contents:
  - "2.1.  The Directory Information Tree\n   As noted above, the DIB is composed\
    \ of a set of entries organized\n   hierarchically in a tree structure known as\
    \ the Directory Information\n   Tree (DIT); specifically, a tree where vertices\
    \ are the entries.\n   The arcs between vertices define relations between entries.\
    \  If an\n   arc exists from X to Y, then the entry at X is the immediate superior\n\
    \   of Y, and Y is the immediate subordinate of X.  An entry's superiors\n   are\
    \ the entry's immediate superior and its superiors.  An entry's\n   subordinates\
    \ are all of its immediate subordinates and their\n   subordinates.\n   Similarly,\
    \ the superior/subordinate relationship between object\n   entries can be used\
    \ to derive a relation between the objects they\n   represent.  DIT structure\
    \ rules can be used to govern relationships\n   between objects.\n   Note: An\
    \ entry's immediate superior is also known as the entry's\n         parent, and\
    \ an entry's immediate subordinate is also known as\n         the entry's child.\
    \  Entries that have the same parent are known\n         as siblings.\n"
- title: 2.2.  Structure of an Entry
  contents:
  - "2.2.  Structure of an Entry\n   An entry consists of a set of attributes that\
    \ hold information about\n   the object that the entry represents.  Some attributes\
    \ represent user\n   information and are called user attributes.  Other attributes\n\
    \   represent operational and/or administrative information and are\n   called\
    \ operational attributes.\n   An attribute is an attribute description (a type\
    \ and zero or more\n   options) with one or more associated values.  An attribute\
    \ is often\n   referred to by its attribute description.  For example, the\n \
    \  'givenName' attribute is the attribute that consists of the attribute\n   description\
    \ 'givenName' (the 'givenName' attribute type [RFC4519] and\n   zero options)\
    \ and one or more associated values.\n   The attribute type governs whether the\
    \ attribute can have multiple\n   values, the syntax and matching rules used to\
    \ construct and compare\n   values of that attribute, and other functions.  Options\
    \ indicate\n   subtypes and other functions.\n   Attribute values conform to the\
    \ defined syntax of the attribute type.\n   No two values of an attribute may\
    \ be equivalent.  Two values are\n   considered equivalent if and only if they\
    \ would match according to\n   the equality matching rule of the attribute type.\
    \  Or, if the\n   attribute type is defined with no equality matching rule, two\
    \ values\n   are equivalent if and only if they are identical.  (See 2.5.1 for\n\
    \   other restrictions.)\n   For example, a 'givenName' attribute can have more\
    \ than one value,\n   they must be Directory Strings, and they are case insensitive.\
    \  A\n   'givenName' attribute cannot hold both \"John\" and \"JOHN\", as these\n\
    \   are equivalent values per the equality matching rule of the attribute\n  \
    \ type.\n   Additionally, no attribute is to have a value that is not equivalent\n\
    \   to itself.  For example, the 'givenName' attribute cannot have as a\n   value\
    \ a directory string that includes the REPLACEMENT CHARACTER\n   (U+FFFD) code\
    \ point, as matching involving that directory string is\n   Undefined per this\
    \ attribute's equality matching rule.\n   When an attribute is used for naming\
    \ of the entry, one and only one\n   value of the attribute is used in forming\
    \ the Relative Distinguished\n   Name.  This value is known as a distinguished\
    \ value.\n"
- title: 2.3.  Naming of Entries
  contents:
  - '2.3.  Naming of Entries

    '
- title: 2.3.1.  Relative Distinguished Names
  contents:
  - "2.3.1.  Relative Distinguished Names\n   Each entry is named relative to its\
    \ immediate superior.  This\n   relative name, known as its Relative Distinguished\
    \ Name (RDN)\n   [X.501], is composed of an unordered set of one or more attribute\n\
    \   value assertions (AVA) consisting of an attribute description with\n   zero\
    \ options and an attribute value.  These AVAs are chosen to match\n   attribute\
    \ values (each a distinguished value) of the entry.\n   An entry's relative distinguished\
    \ name must be unique among all\n   immediate subordinates of the entry's immediate\
    \ superior (i.e., all\n   siblings).\n   The following are examples of string\
    \ representations of RDNs\n   [RFC4514]:\n      UID=12345\n      OU=Engineering\n\
    \      CN=Kurt Zeilenga+L=Redwood Shores\n   The last is an example of a multi-valued\
    \ RDN; that is, an RDN\n   composed of multiple AVAs.\n"
- title: 2.3.2.  Distinguished Names
  contents:
  - "2.3.2.  Distinguished Names\n   An entry's fully qualified name, known as its\
    \ Distinguished Name (DN)\n   [X.501], is the concatenation of its RDN and its\
    \ immediate superior's\n   DN.  A Distinguished Name unambiguously refers to an\
    \ entry in the\n   tree.  The following are examples of string representations\
    \ of DNs\n   [RFC4514]:\n      UID=nobody@example.com,DC=example,DC=com\n    \
    \  CN=John Smith,OU=Sales,O=ACME Limited,L=Moab,ST=Utah,C=US\n"
- title: 2.3.3.  Alias Names
  contents:
  - "2.3.3.  Alias Names\n   An alias, or alias name, is \"an name for an object,\
    \ provided by the\n   use of alias entries\" [X.501].  Alias entries are described\
    \ in\n   Section 2.6.\n"
- title: 2.4.  Object Classes
  contents:
  - "2.4.  Object Classes\n   An object class is \"an identified family of objects\
    \ (or conceivable\n   objects) that share certain characteristics\" [X.501].\n\
    \   As defined in [X.501]:\n      Object classes are used in the Directory for\
    \ a number of purposes:\n        - describing and categorizing objects and the\
    \ entries that\n          correspond to these objects;\n        - where appropriate,\
    \ controlling the operation of the Directory;\n        - regulating, in conjunction\
    \ with DIT structure rule\n          specifications, the position of entries in\
    \ the DIT;\n        - regulating, in conjunction with DIT content rule\n     \
    \     specifications, the attributes that are contained in entries;\n        -\
    \ identifying classes of entry that are to be associated with a\n          particular\
    \ policy by the appropriate administrative authority.\n      An object class (a\
    \ subclass) may be derived from an object class\n      (its direct superclass)\
    \ which is itself derived from an even more\n      generic object class.  For\
    \ structural object classes, this process\n      stops at the most generic object\
    \ class, 'top' (defined in Section\n      2.4.1).  An ordered set of superclasses\
    \ up to the most superior\n      object class of an object class is its superclass\
    \ chain.\n      An object class may be derived from two or more direct\n     \
    \ superclasses (superclasses not part of the same superclass chain).\n      This\
    \ feature of subclassing is termed multiple inheritance.\n   Each object class\
    \ identifies the set of attributes required to be\n   present in entries belonging\
    \ to the class and the set of attributes\n   allowed to be present in entries\
    \ belonging to the class.  As an entry\n   of a class must meet the requirements\
    \ of each class it belongs to, it\n   can be said that an object class inherits\
    \ the sets of allowed and\n   required attributes from its superclasses.  A subclass\
    \ can identify\n   an attribute allowed by its superclass as being required. \
    \ If an\n   attribute is a member of both sets, it is required to be present.\n\
    \   Each object class is defined to be one of three kinds of object\n   classes:\
    \ Abstract, Structural, or Auxiliary.\n   Each object class is identified by an\
    \ object identifier (OID) and,\n   optionally, one or more short names (descriptors).\n"
- title: 2.4.1.  Abstract Object Classes
  contents:
  - "2.4.1.  Abstract Object Classes\n   An abstract object class, as the name implies,\
    \ provides a base of\n   characteristics from which other object classes can be\
    \ defined to\n   inherit from.  An entry cannot belong to an abstract object class\n\
    \   unless it belongs to a structural or auxiliary class that inherits\n   from\
    \ that abstract class.\n   Abstract object classes cannot derive from structural\
    \ or auxiliary\n   object classes.\n   All structural object classes derive (directly\
    \ or indirectly) from\n   the 'top' abstract object class.  Auxiliary object classes\
    \ do not\n   necessarily derive from 'top'.\n   The following is the object class\
    \ definition (see Section 4.1.1) for\n   the 'top' object class:\n      ( 2.5.6.0\
    \ NAME 'top' ABSTRACT MUST objectClass )\n   All entries belong to the 'top' abstract\
    \ object class.\n"
- title: 2.4.2.  Structural Object Classes
  contents:
  - "2.4.2.  Structural Object Classes\n   As stated in [X.501]:\n      An object\
    \ class defined for use in the structural specification of\n      the DIT is termed\
    \ a structural object class.  Structural object\n      classes are used in the\
    \ definition of the structure of the names\n      of the objects for compliant\
    \ entries.\n      An object or alias entry is characterized by precisely one\n\
    \      structural object class superclass chain which has a single\n      structural\
    \ object class as the most subordinate object class.\n      This structural object\
    \ class is referred to as the structural\n      object class of the entry.\n \
    \     Structural object classes are related to associated entries:\n        -\
    \ an entry conforming to a structural object class shall\n          represent\
    \ the real-world object constrained by the object\n          class;\n        -\
    \ DIT structure rules only refer to structural object classes;\n          the\
    \ structural object class of an entry is used to specify the\n          position\
    \ of the entry in the DIT;\n        - the structural object class of an entry\
    \ is used, along with an\n          associated DIT content rule, to control the\
    \ content of an\n          entry.\n      The structural object class of an entry\
    \ shall not be changed.\n   Each structural object class is a (direct or indirect)\
    \ subclass of\n   the 'top' abstract object class.\n   Structural object classes\
    \ cannot subclass auxiliary object classes.\n   Each entry is said to belong to\
    \ its structural object class as well\n   as all classes in its structural object\
    \ class's superclass chain.\n"
- title: 2.4.3.  Auxiliary Object Classes
  contents:
  - "2.4.3.  Auxiliary Object Classes\n   Auxiliary object classes are used to augment\
    \ the characteristics of\n   entries.  They are commonly used to augment the sets\
    \ of attributes\n   required and allowed to be present in an entry.  They can\
    \ be used to\n   describe entries or classes of entries.\n   Auxiliary object\
    \ classes cannot subclass structural object classes.\n   An entry can belong to\
    \ any subset of the set of auxiliary object\n   classes allowed by the DIT content\
    \ rule associated with the\n   structural object class of the entry.  If no DIT\
    \ content rule is\n   associated with the structural object class of the entry,\
    \ the entry\n   cannot belong to any auxiliary object class.\n   The set of auxiliary\
    \ object classes that an entry belongs to can\n   change over time.\n"
- title: 2.5.  Attribute Descriptions
  contents:
  - "2.5.  Attribute Descriptions\n   An attribute description is composed of an attribute\
    \ type (see\n   Section 2.5.1) and a set of zero or more attribute options (see\n\
    \   Section 2.5.2).\n   An attribute description is represented by the ABNF:\n\
    \      attributedescription = attributetype options\n      attributetype = oid\n\
    \      options = *( SEMI option )\n      option = 1*keychar\n   where <attributetype>\
    \ identifies the attribute type and each <option>\n   identifies an attribute\
    \ option.  Both <attributetype> and <option>\n   productions are case insensitive.\
    \  The order in which <option>s\n   appear is irrelevant.  That is, any two <attributedescription>s\
    \ that\n   consist of the same <attributetype> and same set of <option>s are\n\
    \   equivalent.\n   Examples of valid attribute descriptions:\n      2.5.4.0\n\
    \      cn;lang-de;lang-en\n      owner\n   An attribute description with an unrecognized\
    \ attribute type is to be\n   treated as unrecognized.  Servers SHALL treat an\
    \ attribute\n   description with an unrecognized attribute option as unrecognized.\n\
    \   Clients MAY treat an unrecognized attribute option as a tagging\n   option\
    \ (see Section 2.5.2.1).\n   All attributes of an entry must have distinct attribute\
    \ descriptions.\n"
- title: 2.5.1.  Attribute Types
  contents:
  - "2.5.1.  Attribute Types\n   An attribute type governs whether the attribute can\
    \ have multiple\n   values, the syntax and matching rules used to construct and\
    \ compare\n   values of that attribute, and other functions.\n   If no equality\
    \ matching is specified for the attribute type:\n      - the attribute (of the\
    \ type) cannot be used for naming;\n      - when adding the attribute (or replacing\
    \ all values), no two\n        values may be equivalent (see 2.2);\n      - individual\
    \ values of a multi-valued attribute are not to be\n        independently added\
    \ or deleted;\n      - attribute value assertions (such as matching in search\
    \ filters\n        and comparisons) using values of such a type cannot be\n  \
    \      performed.\n   Otherwise, the specified equality matching rule is to be\
    \ used to\n   evaluate attribute value assertions concerning the attribute type.\n\
    \   The specified equality rule is to be transitive and commutative.\n   The attribute\
    \ type indicates whether the attribute is a user\n   attribute or an operational\
    \ attribute.  If operational, the attribute\n   type indicates the operational\
    \ usage and whether or not the attribute\n   is modifiable by users.  Operational\
    \ attributes are discussed in\n   Section 3.4.\n   An attribute type (a subtype)\
    \ may derive from a more generic\n   attribute type (a direct supertype).  The\
    \ following restrictions\n   apply to subtyping:\n      - a subtype must have\
    \ the same usage as its direct supertype,\n      - a subtype's syntax must be\
    \ the same, or a refinement of, its\n        supertype's syntax, and\n      -\
    \ a subtype must be collective [RFC3671] if its supertype is\n        collective.\n\
    \   An attribute description consisting of a subtype and no options is\n   said\
    \ to be the direct description subtype of the attribute\n   description consisting\
    \ of the subtype's direct supertype and no\n   options.\n   Each attribute type\
    \ is identified by an object identifier (OID) and,\n   optionally, one or more\
    \ short names (descriptors).\n"
- title: 2.5.2.  Attribute Options
  contents:
  - "2.5.2.  Attribute Options\n   There are multiple kinds of attribute description\
    \ options.  The LDAP\n   technical specification details one kind: tagging options.\n\
    \   Not all options can be associated with attributes held in the\n   directory.\
    \  Tagging options can be.\n   Not all options can be used in conjunction with\
    \ all attribute types.\n   In such cases, the attribute description is to be treated\
    \ as\n   unrecognized.\n   An attribute description that contains mutually exclusive\
    \ options\n   shall be treated as unrecognized.  That is, \"cn;x-bar;x-foo\",\
    \ where\n   \"x-foo\" and \"x-bar\" are mutually exclusive, is to be treated as\n\
    \   unrecognized.\n   Other kinds of options may be specified in future documents.\
    \  These\n   documents must detail how new kinds of options they define relate\
    \ to\n   tagging options.  In particular, these documents must detail whether\n\
    \   or not new kinds of options can be associated with attributes held in\n  \
    \ the directory, how new kinds of options affect transfer of attribute\n   values,\
    \ and how new kinds of options are treated in attribute\n   description hierarchies.\n\
    \   Options are represented as short, case-insensitive textual strings\n   conforming\
    \ to the <option> production defined in Section 2.5 of this\n   document.\n  \
    \ Procedures for registering options are detailed in BCP 64, RFC 4520\n   [RFC4520].\n"
- title: 2.5.2.1.  Tagging Options
  contents:
  - "2.5.2.1.  Tagging Options\n   Attributes held in the directory can have attribute\
    \ descriptions with\n   any number of tagging options.  Tagging options are never\
    \ mutually\n   exclusive.\n   An attribute description with N tagging options\
    \ is a direct\n   (description) subtype of all attribute descriptions of the same\n\
    \   attribute type and all but one of the N options.  If the attribute\n   type\
    \ has a supertype, then the attribute description is also a direct\n   (description)\
    \ subtype of the attribute description of the supertype\n   and the N tagging\
    \ options.  That is, 'cn;lang-de;lang-en' is a direct\n   (description) subtype\
    \ of 'cn;lang-de', 'cn;lang-en', and\n   'name;lang-de;lang-en' ('cn' is a subtype\
    \ of 'name'; both are defined\n   in [RFC4519]).\n"
- title: 2.5.3.  Attribute Description Hierarchies
  contents:
  - "2.5.3.  Attribute Description Hierarchies\n   An attribute description can be\
    \ the direct subtype of zero or more\n   other attribute descriptions as indicated\
    \ by attribute type subtyping\n   (as described in Section 2.5.1) or attribute\
    \ tagging option subtyping\n   (as described in Section 2.5.2.1).  These subtyping\
    \ relationships are\n   used to form hierarchies of attribute descriptions and\
    \ attributes.\n   As adapted from [X.501]:\n      Attribute hierarchies allow\
    \ access to the DIB with varying degrees\n      of granularity.  This is achieved\
    \ by allowing the value components\n      of attributes to be accessed by using\
    \ either their specific\n      attribute description (a direct reference to the\
    \ attribute) or a\n      more generic attribute description (an indirect reference).\n\
    \      Semantically related attributes may be placed in a hierarchical\n     \
    \ relationship, the more specialized being placed subordinate to the\n      more\
    \ generalized.  Searching for or retrieving attributes and\n      their values\
    \ is made easier by quoting the more generalized\n      attribute description;\
    \ a filter item so specified is evaluated for\n      the more specialized descriptions\
    \ as well as for the quoted\n      description.\n      Where subordinate specialized\
    \ descriptions are selected to be\n      returned as part of a search result these\
    \ descriptions shall be\n      returned if available.  Where the more general\
    \ descriptions are\n      selected to be returned as part of a search result both\
    \ the\n      general and the specialized descriptions shall be returned, if\n\
    \      available.  An attribute value shall always be returned as a value\n  \
    \    of its own attribute description.\n      All of the attribute descriptions\
    \ in an attribute hierarchy are\n      treated as distinct and unrelated descriptions\
    \ for user\n      modification of entry content.\n      An attribute value stored\
    \ in an object or alias entry is of\n      precisely one attribute description.\
    \  The description is indicated\n      when the value is originally added to the\
    \ entry.\n   For the purpose of subschema administration of the entry, a\n   specification\
    \ that an attribute is required is fulfilled if the entry\n   contains a value\
    \ of an attribute description belonging to an\n   attribute hierarchy where the\
    \ attribute type of that description is\n   the same as the required attribute's\
    \ type.  That is, a \"MUST name\"\n   specification is fulfilled by 'name' or\
    \ 'name;x-tag-option', but is\n   not fulfilled by 'CN' or 'CN;x-tag-option' (even\
    \ though 'CN' is a\n   subtype of 'name').  Likewise, an entry may contain a value\
    \ of an\n   attribute description belonging to an attribute hierarchy where the\n\
    \   attribute type of that description is either explicitly included in\n   the\
    \ definition of an object class to which the entry belongs or\n   allowed by the\
    \ DIT content rule applicable to that entry.  That is,\n   'name' and 'name;x-tag-option'\
    \ are allowed by \"MAY name\" (or by \"MUST\n   name\"), but 'CN' and 'CN;x-tag-option'\
    \ are not allowed by \"MAY name\"\n   (or by \"MUST name\").\n   For the purposes\
    \ of other policy administration, unless stated\n   otherwise in the specification\
    \ of the particular administrative\n   model, all of the attribute descriptions\
    \ in an attribute hierarchy\n   are treated as distinct and unrelated descriptions.\n"
- title: 2.6.  Alias Entries
  contents:
  - "2.6.  Alias Entries\n   As adapted from [X.501]:\n      An alias, or an alias\
    \ name, for an object is an alternative name\n      for an object or object entry\
    \ which is provided by the use of\n      alias entries.\n      Each alias entry\
    \ contains, within the 'aliasedObjectName'\n      attribute (known as the 'aliasedEntryName'\
    \ attribute in X.500), a\n      name of some object.  The distinguished name of\
    \ the alias entry is\n      thus also a name for this object.\n          NOTE\
    \ - The name within the 'aliasedObjectName' is said to be\n                 pointed\
    \ to by the alias.  It does not have to be the\n                 distinguished\
    \ name of any entry.\n      The conversion of an alias name to an object name\
    \ is termed\n      (alias) dereferencing and comprises the systematic replacement\
    \ of\n      alias names, where found within a purported name, by the value of\n\
    \      the corresponding 'aliasedObjectName' attribute.  The process may\n   \
    \   require the examination of more than one alias entry.\n      Any particular\
    \ entry in the DIT may have zero or more alias names.\n      It therefore follows\
    \ that several alias entries may point to the\n      same entry.  An alias entry\
    \ may point to an entry that is not a\n      leaf entry and may point to another\
    \ alias entry.\n      An alias entry shall have no subordinates, so that an alias\
    \ entry\n      is always a leaf entry.\n      Every alias entry shall belong to\
    \ the 'alias' object class.\n   An entry with the 'alias' object class must also\
    \ belong to an object\n   class (or classes), or be governed by a DIT content\
    \ rule, which\n   allows suitable naming attributes to be present.\n   Example:\n\
    \      dn: cn=bar,dc=example,dc=com\n      objectClass: top\n      objectClass:\
    \ alias\n      objectClass: extensibleObject\n      cn: bar\n      aliasedObjectName:\
    \ cn=foo,dc=example,dc=com\n"
- title: 2.6.1.  'alias' Object Class
  contents:
  - "2.6.1.  'alias' Object Class\n   Alias entries belong to the 'alias' object class.\n\
    \      ( 2.5.6.1 NAME 'alias'\n        SUP top STRUCTURAL\n        MUST aliasedObjectName\
    \ )\n"
- title: 2.6.2.  'aliasedObjectName' Attribute Type
  contents:
  - "2.6.2.  'aliasedObjectName' Attribute Type\n   The 'aliasedObjectName' attribute\
    \ holds the name of the entry an\n   alias points to.  The 'aliasedObjectName'\
    \ attribute is known as the\n   'aliasedEntryName' attribute in X.500.\n     \
    \ ( 2.5.4.1 NAME 'aliasedObjectName'\n        EQUALITY distinguishedNameMatch\n\
    \        SYNTAX 1.3.6.1.4.1.1466.115.121.1.12\n        SINGLE-VALUE )\n   The\
    \ 'distinguishedNameMatch' matching rule and the DistinguishedName\n   (1.3.6.1.4.1.1466.115.121.1.12)\
    \ syntax are defined in [RFC4517].\n"
- title: 3.  Directory Administrative and Operational Information
  contents:
  - "3.  Directory Administrative and Operational Information\n   This section discusses\
    \ select aspects of the X.500 Directory\n   Administrative and Operational Information\
    \ model [X.501].  LDAP\n   implementations MAY support other aspects of this model.\n"
- title: 3.1.  Subtrees
  contents:
  - "3.1.  Subtrees\n   As defined in [X.501]:\n      A subtree is a collection of\
    \ object and alias entries situated at\n      the vertices of a tree.  Subtrees\
    \ do not contain subentries.  The\n      prefix sub, in subtree, emphasizes that\
    \ the base (or root) vertex\n      of this tree is usually subordinate to the\
    \ root of the DIT.\n      A subtree begins at some vertex and extends to some\
    \ identifiable\n      lower boundary, possibly extending to leaves.  A subtree\
    \ is always\n      defined within a context which implicitly bounds the subtree.\
    \  For\n      example, the vertex and lower boundaries of a subtree defining a\n\
    \      replicated area are bounded by a naming context.\n"
- title: 3.2.  Subentries
  contents:
  - "3.2.  Subentries\n   A subentry is a \"special sort of entry, known by the Directory,\
    \ used\n   to hold information associated with a subtree or subtree refinement\"\
    \n   [X.501].  Subentries are used in Directory to hold for administrative\n \
    \  and operational purposes as defined in [X.501].  Their use in LDAP is\n   detailed\
    \ in [RFC3672].\n   The term \"(sub)entry\" in this specification indicates that\
    \ servers\n   implementing X.500(93) models are, in accordance with X.500(93)\
    \ as\n   described in [RFC3672], to use a subentry and that other servers are\n\
    \   to use an object entry belonging to the appropriate auxiliary class\n   normally\
    \ used with the subentry (e.g., 'subschema' for subschema\n   subentries) to mimic\
    \ the subentry.  This object entry's RDN SHALL be\n   formed from a value of the\
    \ 'cn' (commonName) attribute [RFC4519] (as\n   all subentries are named with\
    \ 'cn').\n"
- title: 3.3.  The 'objectClass' attribute
  contents:
  - "3.3.  The 'objectClass' attribute\n   Each entry in the DIT has an 'objectClass'\
    \ attribute.\n      ( 2.5.4.0 NAME 'objectClass'\n        EQUALITY objectIdentifierMatch\n\
    \        SYNTAX 1.3.6.1.4.1.1466.115.121.1.38 )\n   The 'objectIdentifierMatch'\
    \ matching rule and the OBJECT IDENTIFIER\n   (1.3.6.1.4.1.1466.115.121.1.38)\
    \ syntax are defined in [RFC4517].\n   The 'objectClass' attribute specifies the\
    \ object classes of an entry,\n   which (among other things) are used in conjunction\
    \ with the\n   controlling schema to determine the permitted attributes of an\
    \ entry.\n   Values of this attribute can be modified by clients, but the\n  \
    \ 'objectClass' attribute cannot be removed.\n   Servers that follow X.500(93)\
    \ models SHALL restrict modifications of\n   this attribute to prevent the basic\
    \ structural class of the entry\n   from being changed.  That is, one cannot change\
    \ a 'person' into a\n   'country'.\n   When creating an entry or adding an 'objectClass'\
    \ value to an entry,\n   all superclasses of the named classes SHALL be implicitly\
    \ added as\n   well if not already present.  That is, if the auxiliary class 'x-a'\n\
    \   is a subclass of the class 'x-b', adding 'x-a' to 'objectClass'\n   causes\
    \ 'x-b' to be implicitly added (if is not already present).\n   Servers SHALL\
    \ restrict modifications of this attribute to prevent\n   superclasses of remaining\
    \ 'objectClass' values from being deleted.\n   That is, if the auxiliary class\
    \ 'x-a' is a subclass of the auxiliary\n   class 'x-b' and the 'objectClass' attribute\
    \ contains 'x-a' and 'x-b',\n   an attempt to delete only 'x-b' from the 'objectClass'\
    \ attribute is\n   an error.\n"
- title: 3.4.  Operational Attributes
  contents:
  - "3.4.  Operational Attributes\n   Some attributes, termed operational attributes,\
    \ are used or\n   maintained by servers for administrative and operational purposes.\n\
    \   As stated in [X.501]: \"There are three varieties of operational\n   attributes:\
    \  Directory operational attributes, DSA-shared operational\n   attributes, and\
    \ DSA-specific operational attributes\".\n   A directory operational attribute\
    \ is used to represent operational\n   and/or administrative information in the\
    \ Directory Information Model.\n   This includes operational attributes maintained\
    \ by the server (e.g.,\n   'createTimestamp') as well as operational attributes\
    \ that hold values\n   administrated by the user (e.g., 'ditContentRules').\n\
    \   A DSA-shared operational attribute is used to represent information\n   of\
    \ the DSA Information Model that is shared between DSAs.\n   A DSA-specific operational\
    \ attribute is used to represent information\n   of the DSA Information Model\
    \ that is specific to the DSA (though, in\n   some cases, may be derived from\
    \ information shared between DSAs;\n   e.g., 'namingContexts').\n   The DSA Information\
    \ Model operational attributes are detailed in\n   [X.501].\n   Operational attributes\
    \ are not normally visible.  They are not\n   returned in search results unless\
    \ explicitly requested by name.\n   Not all operational attributes are user modifiable.\n\
    \   Entries may contain, among others, the following operational\n   attributes:\n\
    \      - creatorsName: the Distinguished Name of the user who added this\n   \
    \       entry to the directory,\n      - createTimestamp: the time this entry\
    \ was added to the directory,\n      - modifiersName: the Distinguished Name of\
    \ the user who last\n          modified this entry, and\n      - modifyTimestamp:\
    \ the time this entry was last modified.\n   Servers SHOULD maintain the 'creatorsName',\
    \ 'createTimestamp',\n   'modifiersName', and 'modifyTimestamp' attributes for\
    \ all entries of\n   the DIT.\n"
- title: 3.4.1.  'creatorsName'
  contents:
  - "3.4.1.  'creatorsName'\n   This attribute appears in entries that were added\
    \ using the protocol\n   (e.g., using the Add operation).  The value is the distinguished\
    \ name\n   of the creator.\n      ( 2.5.18.3 NAME 'creatorsName'\n        EQUALITY\
    \ distinguishedNameMatch\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.12\n     \
    \   SINGLE-VALUE NO-USER-MODIFICATION\n        USAGE directoryOperation )\n  \
    \ The 'distinguishedNameMatch' matching rule and the DistinguishedName\n   (1.3.6.1.4.1.1466.115.121.1.12)\
    \ syntax are defined in [RFC4517].\n"
- title: 3.4.2.  'createTimestamp'
  contents:
  - "3.4.2.  'createTimestamp'\n   This attribute appears in entries that were added\
    \ using the protocol\n   (e.g., using the Add operation).  The value is the time\
    \ the entry was\n   added.\n      ( 2.5.18.1 NAME 'createTimestamp'\n        EQUALITY\
    \ generalizedTimeMatch\n        ORDERING generalizedTimeOrderingMatch\n      \
    \  SYNTAX 1.3.6.1.4.1.1466.115.121.1.24\n        SINGLE-VALUE NO-USER-MODIFICATION\n\
    \        USAGE directoryOperation )\n   The 'generalizedTimeMatch' and 'generalizedTimeOrderingMatch'\n\
    \   matching rules and the GeneralizedTime\n   (1.3.6.1.4.1.1466.115.121.1.24)\
    \ syntax are defined in [RFC4517].\n"
- title: 3.4.3.  'modifiersName'
  contents:
  - "3.4.3.  'modifiersName'\n   This attribute appears in entries that have been\
    \ modified using the\n   protocol (e.g., using the Modify operation).  The value\
    \ is the\n   distinguished name of the last modifier.\n      ( 2.5.18.4 NAME 'modifiersName'\n\
    \        EQUALITY distinguishedNameMatch\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.12\n\
    \        SINGLE-VALUE NO-USER-MODIFICATION\n        USAGE directoryOperation )\n\
    \   The 'distinguishedNameMatch' matching rule and the DistinguishedName\n   (1.3.6.1.4.1.1466.115.121.1.12)\
    \ syntax are defined in [RFC4517].\n"
- title: 3.4.4.  'modifyTimestamp'
  contents:
  - "3.4.4.  'modifyTimestamp'\n   This attribute appears in entries that have been\
    \ modified using the\n   protocol (e.g., using the Modify operation).  The value\
    \ is the time\n   the entry was last modified.\n      ( 2.5.18.2 NAME 'modifyTimestamp'\n\
    \        EQUALITY generalizedTimeMatch\n        ORDERING generalizedTimeOrderingMatch\n\
    \        SYNTAX 1.3.6.1.4.1.1466.115.121.1.24\n        SINGLE-VALUE NO-USER-MODIFICATION\n\
    \        USAGE directoryOperation )\n   The 'generalizedTimeMatch' and 'generalizedTimeOrderingMatch'\n\
    \   matching rules and the GeneralizedTime\n   (1.3.6.1.4.1.1466.115.121.1.24)\
    \ syntax are defined in [RFC4517].\n"
- title: 3.4.5.  'structuralObjectClass'
  contents:
  - "3.4.5.  'structuralObjectClass'\n   This attribute indicates the structural object\
    \ class of the entry.\n      ( 2.5.21.9 NAME 'structuralObjectClass'\n       \
    \ EQUALITY objectIdentifierMatch\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.38\n\
    \        SINGLE-VALUE NO-USER-MODIFICATION\n        USAGE directoryOperation )\n\
    \   The 'objectIdentifierMatch' matching rule and OBJECT IDENTIFIER\n   (1.3.6.1.4.1.1466.115.121.1.38)\
    \ syntax is defined in [RFC4517].\n"
- title: 3.4.6.  'governingStructureRule'
  contents:
  - "3.4.6.  'governingStructureRule'\n   This attribute indicates the structure rule\
    \ governing the entry.\n      ( 2.5.21.10 NAME 'governingStructureRule'\n    \
    \    EQUALITY integerMatch\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n   \
    \     SINGLE-VALUE NO-USER-MODIFICATION\n        USAGE directoryOperation )\n\
    \   The 'integerMatch' matching rule and INTEGER\n   (1.3.6.1.4.1.1466.115.121.1.27)\
    \ syntax is defined in [RFC4517].\n"
- title: 4.  Directory Schema
  contents:
  - "4.  Directory Schema\n   As defined in [X.501]:\n      The Directory Schema is\
    \ a set of definitions and constraints\n      concerning the structure of the\
    \ DIT, the possible ways entries are\n      named, the information that can be\
    \ held in an entry, the\n      attributes used to represent that information and\
    \ their\n      organization into hierarchies to facilitate search and retrieval\n\
    \      of the information and the ways in which values of attributes may\n   \
    \   be matched in attribute value and matching rule assertions.\n      NOTE 1\
    \ - The schema enables the Directory system to, for example:\n      - prevent\
    \ the creation of subordinate entries of the wrong\n        object-class (e.g.,\
    \ a country as a subordinate of a person);\n      - prevent the addition of attribute-types\
    \ to an entry\n        inappropriate to the object-class (e.g., a serial number\
    \ to a\n        person's entry);\n      - prevent the addition of an attribute\
    \ value of a syntax not\n        matching that defined for the attribute-type\
    \ (e.g., a printable\n        string to a bit string).\n      Formally, the Directory\
    \ Schema comprises a set of:\n      a) Name Form definitions that define primitive\
    \ naming relations\n         for structural object classes;\n      b) DIT Structure\
    \ Rule definitions that define the names that\n         entries may have and the\
    \ ways in which the entries may be\n         related to one another in the DIT;\n\
    \      c) DIT Content Rule definitions that extend the specification of\n    \
    \     allowable attributes for entries beyond those indicated by the\n       \
    \  structural object classes of the entries;\n      d) Object Class definitions\
    \ that define the basic set of mandatory\n         and optional attributes that\
    \ shall be present, and may be\n         present, respectively, in an entry of\
    \ a given class, and which\n         indicate the kind of object class that is\
    \ being defined;\n      e) Attribute Type definitions that identify the object\
    \ identifier\n         by which an attribute is known, its syntax, associated\
    \ matching\n         rules, whether it is an operational attribute and if so its\n\
    \         type, whether it is a collective attribute, whether it is\n        \
    \ permitted to have multiple values and whether or not it is\n         derived\
    \ from another attribute type;\n      f) Matching Rule definitions that define\
    \ matching rules.\n      And in LDAP:\n      g) LDAP Syntax definitions that define\
    \ encodings used in LDAP.\n"
- title: 4.1.  Schema Definitions
  contents:
  - "4.1.  Schema Definitions\n   Schema definitions in this section are described\
    \ using ABNF and rely\n   on the common productions specified in Section 1.2 as\
    \ well as these:\n      noidlen = numericoid [ LCURLY len RCURLY ]\n      len\
    \ = number\n      oids = oid / ( LPAREN WSP oidlist WSP RPAREN )\n      oidlist\
    \ = oid *( WSP DOLLAR WSP oid )\n      extensions = *( SP xstring SP qdstrings\
    \ )\n      xstring = \"X\" HYPHEN 1*( ALPHA / HYPHEN / USCORE )\n      qdescrs\
    \ = qdescr / ( LPAREN WSP qdescrlist WSP RPAREN )\n      qdescrlist = [ qdescr\
    \ *( SP qdescr ) ]\n      qdescr = SQUOTE descr SQUOTE\n      qdstrings = qdstring\
    \ / ( LPAREN WSP qdstringlist WSP RPAREN )\n      qdstringlist = [ qdstring *(\
    \ SP qdstring ) ]\n      qdstring = SQUOTE dstring SQUOTE\n      dstring = 1*(\
    \ QS / QQ / QUTF8 )   ; escaped UTF-8 string\n      QQ =  ESC %x32 %x37 ; \"\\\
    27\"\n      QS =  ESC %x35 ( %x43 / %x63 ) ; \"\\5C\" / \"\\5c\"\n      ; Any\
    \ UTF-8 encoded Unicode character\n      ; except %x27 (\"\\'\") and %x5C (\"\\\
    \")\n      QUTF8    = QUTF1 / UTFMB\n      ; Any ASCII character except %x27 (\"\
    \\'\") and %x5C (\"\\\")\n      QUTF1    = %x00-26 / %x28-5B / %x5D-7F\n   Schema\
    \ definitions in this section also share a number of common\n   terms.\n   The\
    \ NAME field provides a set of short names (descriptors) that are\n   to be used\
    \ as aliases for the OID.\n   The DESC field optionally allows a descriptive string\
    \ to be provided\n   by the directory administrator and/or implementor.  While\n\
    \   specifications may suggest a descriptive string, there is no\n   requirement\
    \ that the suggested (or any) descriptive string be used.\n   The OBSOLETE field,\
    \ if present, indicates the element is not active.\n   Implementors should note\
    \ that future versions of this document may\n   expand these definitions to include\
    \ additional terms.  Terms whose\n   identifier begins with \"X-\" are reserved\
    \ for private experiments and\n   are followed by <SP> and <qdstrings> tokens.\n"
- title: 4.1.1.  Object Class Definitions
  contents:
  - "4.1.1.  Object Class Definitions\n   Object Class definitions are written according\
    \ to the ABNF:\n     ObjectClassDescription = LPAREN WSP\n         numericoid\
    \                 ; object identifier\n         [ SP \"NAME\" SP qdescrs ]   ;\
    \ short names (descriptors)\n         [ SP \"DESC\" SP qdstring ]  ; description\n\
    \         [ SP \"OBSOLETE\" ]          ; not active\n         [ SP \"SUP\" SP\
    \ oids ]       ; superior object classes\n         [ SP kind ]               \
    \ ; kind of class\n         [ SP \"MUST\" SP oids ]      ; attribute types\n \
    \        [ SP \"MAY\" SP oids ]       ; attribute types\n         extensions WSP\
    \ RPAREN\n     kind = \"ABSTRACT\" / \"STRUCTURAL\" / \"AUXILIARY\"\n   where:\n\
    \     <numericoid> is object identifier assigned to this object class;\n     NAME\
    \ <qdescrs> are short names (descriptors) identifying this\n         object class;\n\
    \     DESC <qdstring> is a short descriptive string;\n     OBSOLETE indicates\
    \ this object class is not active;\n     SUP <oids> specifies the direct superclasses\
    \ of this object class;\n     the kind of object class is indicated by one of\
    \ ABSTRACT,\n         STRUCTURAL, or AUXILIARY (the default is STRUCTURAL);\n\
    \     MUST and MAY specify the sets of required and allowed attribute\n      \
    \   types, respectively; and\n     <extensions> describe extensions.\n"
- title: 4.1.2.  Attribute Types
  contents:
  - "4.1.2.  Attribute Types\n   Attribute Type definitions are written according\
    \ to the ABNF:\n     AttributeTypeDescription = LPAREN WSP\n         numericoid\
    \                    ; object identifier\n         [ SP \"NAME\" SP qdescrs ]\
    \      ; short names (descriptors)\n         [ SP \"DESC\" SP qdstring ]     ;\
    \ description\n         [ SP \"OBSOLETE\" ]             ; not active\n       \
    \  [ SP \"SUP\" SP oid ]           ; supertype\n         [ SP \"EQUALITY\" SP\
    \ oid ]      ; equality matching rule\n         [ SP \"ORDERING\" SP oid ]   \
    \   ; ordering matching rule\n         [ SP \"SUBSTR\" SP oid ]        ; substrings\
    \ matching rule\n         [ SP \"SYNTAX\" SP noidlen ]    ; value syntax\n   \
    \      [ SP \"SINGLE-VALUE\" ]         ; single-value\n         [ SP \"COLLECTIVE\"\
    \ ]           ; collective\n         [ SP \"NO-USER-MODIFICATION\" ] ; not user\
    \ modifiable\n         [ SP \"USAGE\" SP usage ]       ; usage\n         extensions\
    \ WSP RPAREN         ; extensions\n     usage = \"userApplications\"     /  ;\
    \ user\n             \"directoryOperation\"   /  ; directory operational\n   \
    \          \"distributedOperation\" /  ; DSA-shared operational\n            \
    \ \"dSAOperation\"            ; DSA-specific operational\n   where:\n     <numericoid>\
    \ is object identifier assigned to this attribute type;\n     NAME <qdescrs> are\
    \ short names (descriptors) identifying this\n         attribute type;\n     DESC\
    \ <qdstring> is a short descriptive string;\n     OBSOLETE indicates this attribute\
    \ type is not active;\n     SUP oid specifies the direct supertype of this type;\n\
    \     EQUALITY, ORDERING, and SUBSTR provide the oid of the equality,\n      \
    \   ordering, and substrings matching rules, respectively;\n     SYNTAX identifies\
    \ value syntax by object identifier and may suggest\n         a minimum upper\
    \ bound;\n     SINGLE-VALUE indicates attributes of this type are restricted to\
    \ a\n         single value;\n     COLLECTIVE indicates this attribute type is\
    \ collective\n         [X.501][RFC3671];\n     NO-USER-MODIFICATION indicates\
    \ this attribute type is not user\n         modifiable;\n     USAGE indicates\
    \ the application of this attribute type; and\n     <extensions> describe extensions.\n\
    \   Each attribute type description must contain at least one of the SUP\n   or\
    \ SYNTAX fields.  If no SYNTAX field is provided, the attribute type\n   description\
    \ takes its value from the supertype.\n   If SUP field is provided, the EQUALITY,\
    \ ORDERING, and SUBSTRING\n   fields, if not specified, take their value from\
    \ the supertype.\n   Usage of userApplications, the default, indicates that attributes\
    \ of\n   this type represent user information.  That is, they are user\n   attributes.\n\
    \   A usage of directoryOperation, distributedOperation, or dSAOperation\n   indicates\
    \ that attributes of this type represent operational and/or\n   administrative\
    \ information.  That is, they are operational\n   attributes.\n   directoryOperation\
    \ usage indicates that the attribute of this type is\n   a directory operational\
    \ attribute.  distributedOperation usage\n   indicates that the attribute of this\
    \ type is a DSA-shared usage\n   operational attribute.  dSAOperation usage indicates\
    \ that the\n   attribute of this type is a DSA-specific operational attribute.\n\
    \   COLLECTIVE requires usage userApplications.  Use of collective\n   attribute\
    \ types in LDAP is discussed in [RFC3671].\n   NO-USER-MODIFICATION requires an\
    \ operational usage.\n   Note that the <AttributeTypeDescription> does not list\
    \ the matching\n   rules that can be used with that attribute type in an extensibleMatch\n\
    \   search filter [RFC4511].  This is done using the 'matchingRuleUse'\n   attribute\
    \ described in Section 4.1.4.\n   This document refines the schema description\
    \ of X.501 by requiring\n   that the SYNTAX field in an <AttributeTypeDescription>\
    \ be a string\n   representation of an object identifier for the LDAP string syntax\n\
    \   definition, with an optional indication of the suggested minimum\n   bound\
    \ of a value of this attribute.\n   A suggested minimum upper bound on the number\
    \ of characters in a\n   value with a string-based syntax, or the number of bytes\
    \ in a value\n   for all other syntaxes, may be indicated by appending this bound\n\
    \   count inside of curly braces following the syntax's OBJECT IDENTIFIER\n  \
    \ in an Attribute Type Description.  This bound is not part of the\n   syntax\
    \ name itself.  For instance, \"1.3.6.4.1.1466.0{64}\" suggests\n   that server\
    \ implementations should allow a string to be 64 characters\n   long, although\
    \ they may allow longer strings.  Note that a single\n   character of the Directory\
    \ String syntax may be encoded in more than\n   one octet since UTF-8 [RFC3629]\
    \ is a variable-length encoding.\n"
- title: 4.1.3.  Matching Rules
  contents:
  - "4.1.3.  Matching Rules\n   Matching rules are used in performance of attribute\
    \ value assertions,\n   such as in performance of a Compare operation.  They are\
    \ also used in\n   evaluating search filters, determining which individual values\
    \ are to\n   be added or deleted during performance of a Modify operation, and\
    \ in\n   comparing distinguished names.\n   Each matching rule is identified by\
    \ an object identifier (OID) and,\n   optionally, one or more short names (descriptors).\n\
    \   Matching rule definitions are written according to the ABNF:\n     MatchingRuleDescription\
    \ = LPAREN WSP\n         numericoid                 ; object identifier\n    \
    \     [ SP \"NAME\" SP qdescrs ]   ; short names (descriptors)\n         [ SP\
    \ \"DESC\" SP qdstring ]  ; description\n         [ SP \"OBSOLETE\" ]        \
    \  ; not active\n         SP \"SYNTAX\" SP numericoid  ; assertion syntax\n  \
    \       extensions WSP RPAREN      ; extensions\n   where:\n     <numericoid>\
    \ is object identifier assigned to this matching rule;\n     NAME <qdescrs> are\
    \ short names (descriptors) identifying this\n         matching rule;\n     DESC\
    \ <qdstring> is a short descriptive string;\n     OBSOLETE indicates this matching\
    \ rule is not active;\n     SYNTAX identifies the assertion syntax (the syntax\
    \ of the assertion\n         value) by object identifier; and\n     <extensions>\
    \ describe extensions.\n"
- title: 4.1.4.  Matching Rule Uses
  contents:
  - "4.1.4.  Matching Rule Uses\n   A matching rule use lists the attribute types\
    \ that are suitable for\n   use with an extensibleMatch search filter.\n   Matching\
    \ rule use descriptions are written according to the following\n   ABNF:\n   \
    \  MatchingRuleUseDescription = LPAREN WSP\n         numericoid              \
    \   ; object identifier\n         [ SP \"NAME\" SP qdescrs ]   ; short names (descriptors)\n\
    \         [ SP \"DESC\" SP qdstring ]  ; description\n         [ SP \"OBSOLETE\"\
    \ ]          ; not active\n         SP \"APPLIES\" SP oids       ; attribute types\n\
    \         extensions WSP RPAREN      ; extensions\n   where:\n     <numericoid>\
    \ is the object identifier of the matching rule\n         associated with this\
    \ matching rule use description;\n     NAME <qdescrs> are short names (descriptors)\
    \ identifying this\n         matching rule use;\n     DESC <qdstring> is a short\
    \ descriptive string;\n     OBSOLETE indicates this matching rule use is not active;\n\
    \     APPLIES provides a list of attribute types the matching rule\n         applies\
    \ to; and\n     <extensions> describe extensions.\n"
- title: 4.1.5.  LDAP Syntaxes
  contents:
  - "4.1.5.  LDAP Syntaxes\n   LDAP Syntaxes of (attribute and assertion) values are\
    \ described in\n   terms of ASN.1 [X.680] and, optionally, have an octet string\
    \ encoding\n   known as the LDAP-specific encoding.  Commonly, the LDAP-specific\n\
    \   encoding is constrained to a string of Unicode [Unicode] characters\n   in\
    \ UTF-8 [RFC3629] form.\n   Each LDAP syntax is identified by an object identifier\
    \ (OID).\n   LDAP syntax definitions are written according to the ABNF:\n    \
    \ SyntaxDescription = LPAREN WSP\n         numericoid                 ; object\
    \ identifier\n         [ SP \"DESC\" SP qdstring ]  ; description\n         extensions\
    \ WSP RPAREN      ; extensions\n   where:\n     <numericoid> is the object identifier\
    \ assigned to this LDAP syntax;\n     DESC <qdstring> is a short descriptive string;\
    \ and\n     <extensions> describe extensions.\n"
- title: 4.1.6.  DIT Content Rules
  contents:
  - "4.1.6.  DIT Content Rules\n   A DIT content rule is a \"rule governing the content\
    \ of entries of a\n   particular structural object class\" [X.501].\n   For DIT\
    \ entries of a particular structural object class, a DIT\n   content rule specifies\
    \ which auxiliary object classes the entries are\n   allowed to belong to and\
    \ which additional attributes (by type) are\n   required, allowed, or not allowed\
    \ to appear in the entries.\n   The list of precluded attributes cannot include\
    \ any attribute listed\n   as mandatory in the rule, the structural object class,\
    \ or any of the\n   allowed auxiliary object classes.\n   Each content rule is\
    \ identified by the object identifier, as well as\n   any short names (descriptors),\
    \ of the structural object class it\n   applies to.\n   An entry may only belong\
    \ to auxiliary object classes listed in the\n   governing content rule.\n   An\
    \ entry must contain all attributes required by the object classes\n   the entry\
    \ belongs to as well as all attributes required by the\n   governing content rule.\n\
    \   An entry may contain any non-precluded attributes allowed by the\n   object\
    \ classes the entry belongs to as well as all attributes allowed\n   by the governing\
    \ content rule.\n   An entry cannot include any attribute precluded by the governing\n\
    \   content rule.\n   An entry is governed by (if present and active in the subschema)\
    \ the\n   DIT content rule that applies to the structural object class of the\n\
    \   entry (see Section 2.4.2).  If no active rule is present for the\n   entry's\
    \ structural object class, the entry's content is governed by\n   the structural\
    \ object class (and possibly other aspects of user and\n   system schema).  DIT\
    \ content rules for superclasses of the structural\n   object class of an entry\
    \ are not applicable to that entry.\n   DIT content rule descriptions are written\
    \ according to the ABNF:\n     DITContentRuleDescription = LPAREN WSP\n      \
    \   numericoid                 ; object identifier\n         [ SP \"NAME\" SP\
    \ qdescrs ]   ; short names (descriptors)\n         [ SP \"DESC\" SP qdstring\
    \ ]  ; description\n         [ SP \"OBSOLETE\" ]          ; not active\n     \
    \    [ SP \"AUX\" SP oids ]       ; auxiliary object classes\n         [ SP \"\
    MUST\" SP oids ]      ; attribute types\n         [ SP \"MAY\" SP oids ]     \
    \  ; attribute types\n         [ SP \"NOT\" SP oids ]       ; attribute types\n\
    \         extensions WSP RPAREN      ; extensions\n   where:\n     <numericoid>\
    \ is the object identifier of the structural object\n         class associated\
    \ with this DIT content rule;\n     NAME <qdescrs> are short names (descriptors)\
    \ identifying this DIT\n         content rule;\n     DESC <qdstring> is a short\
    \ descriptive string;\n     OBSOLETE indicates this DIT content rule use is not\
    \ active;\n     AUX specifies a list of auxiliary object classes that entries\n\
    \         subject to this DIT content rule may belong to;\n     MUST, MAY, and\
    \ NOT specify lists of attribute types that are\n         required, allowed, or\
    \ precluded, respectively, from appearing\n         in entries subject to this\
    \ DIT content rule; and\n     <extensions> describe extensions.\n"
- title: 4.1.7.  DIT Structure Rules and Name Forms
  contents:
  - "4.1.7.  DIT Structure Rules and Name Forms\n   It is sometimes desirable to regulate\
    \ where object and alias entries\n   can be placed in the DIT and how they can\
    \ be named based upon their\n   structural object class.\n"
- title: 4.1.7.1.  DIT Structure Rules
  contents:
  - "4.1.7.1.  DIT Structure Rules\n   A DIT structure rule is a \"rule governing\
    \ the structure of the DIT by\n   specifying a permitted superior to subordinate\
    \ entry relationship.  A\n   structure rule relates a name form, and therefore\
    \ a structural object\n   class, to superior structure rules.  This permits entries\
    \ of the\n   structural object class identified by the name form to exist in the\n\
    \   DIT as subordinates to entries governed by the indicated superior\n   structure\
    \ rules\" [X.501].\n   DIT structure rule descriptions are written according to\
    \ the ABNF:\n     DITStructureRuleDescription = LPAREN WSP\n         ruleid  \
    \                   ; rule identifier\n         [ SP \"NAME\" SP qdescrs ]   ;\
    \ short names (descriptors)\n         [ SP \"DESC\" SP qdstring ]  ; description\n\
    \         [ SP \"OBSOLETE\" ]          ; not active\n         SP \"FORM\" SP oid\
    \           ; NameForm\n         [ SP \"SUP\" ruleids ]       ; superior rules\n\
    \         extensions WSP RPAREN      ; extensions\n     ruleids = ruleid / ( LPAREN\
    \ WSP ruleidlist WSP RPAREN )\n     ruleidlist = ruleid *( SP ruleid )\n     ruleid\
    \ = number\n   where:\n     <ruleid> is the rule identifier of this DIT structure\
    \ rule;\n     NAME <qdescrs> are short names (descriptors) identifying this DIT\n\
    \         structure rule;\n     DESC <qdstring> is a short descriptive string;\n\
    \     OBSOLETE indicates this DIT structure rule use is not active;\n     FORM\
    \ is specifies the name form associated with this DIT structure\n         rule;\n\
    \     SUP identifies superior rules (by rule id); and\n     <extensions> describe\
    \ extensions.\n   If no superior rules are identified, the DIT structure rule\
    \ applies\n   to an autonomous administrative point (e.g., the root vertex of\
    \ the\n   subtree controlled by the subschema) [X.501].\n"
- title: 4.1.7.2.  Name Forms
  contents:
  - "4.1.7.2.  Name Forms\n   A name form \"specifies a permissible RDN for entries\
    \ of a particular\n   structural object class.  A name form identifies a named\
    \ object class\n   and one or more attribute types to be used for naming (i.e.,\
    \ for the\n   RDN).  Name forms are primitive pieces of specification used in\
    \ the\n   definition of DIT structure rules\" [X.501].\n   Each name form indicates\
    \ the structural object class to be named, a\n   set of required attribute types,\
    \ and a set of allowed attribute\n   types.  A particular attribute type cannot\
    \ be in both sets.\n   Entries governed by the form must be named using a value\
    \ from each\n   required attribute type and zero or more values from the allowed\n\
    \   attribute types.\n   Each name form is identified by an object identifier\
    \ (OID) and,\n   optionally, one or more short names (descriptors).\n   Name form\
    \ descriptions are written according to the ABNF:\n     NameFormDescription =\
    \ LPAREN WSP\n         numericoid                 ; object identifier\n      \
    \   [ SP \"NAME\" SP qdescrs ]   ; short names (descriptors)\n         [ SP \"\
    DESC\" SP qdstring ]  ; description\n         [ SP \"OBSOLETE\" ]          ; not\
    \ active\n         SP \"OC\" SP oid             ; structural object class\n  \
    \       SP \"MUST\" SP oids          ; attribute types\n         [ SP \"MAY\"\
    \ SP oids ]       ; attribute types\n         extensions WSP RPAREN      ; extensions\n\
    \   where:\n     <numericoid> is object identifier that identifies this name form;\n\
    \     NAME <qdescrs> are short names (descriptors) identifying this name\n   \
    \      form;\n     DESC <qdstring> is a short descriptive string;\n     OBSOLETE\
    \ indicates this name form is not active;\n     OC identifies the structural object\
    \ class this rule applies to,\n     MUST and MAY specify the sets of required\
    \ and allowed,\n         respectively, naming attributes for this name form; and\n\
    \     <extensions> describe extensions.\n   All attribute types in the required\
    \ (\"MUST\") and allowed (\"MAY\")\n   lists shall be different.\n"
- title: 4.2.  Subschema Subentries
  contents:
  - "4.2.  Subschema Subentries\n   Subschema (sub)entries are used for administering\
    \ information about\n   the directory schema.  A single subschema (sub)entry contains\
    \ all\n   schema definitions (see Section 4.1) used by entries in a particular\n\
    \   part of the directory tree.\n   Servers that follow X.500(93) models SHOULD\
    \ implement subschema using\n   the X.500 subschema mechanisms (as detailed in\
    \ Section 12 of\n   [X.501]), so these are not ordinary object entries but subentries\n\
    \   (see Section 3.2).  LDAP clients SHOULD NOT assume that servers\n   implement\
    \ any of the other aspects of X.500 subschema.\n   Servers MAY allow subschema\
    \ modification.  Procedures for subschema\n   modification are discussed in Section\
    \ 14.5 of [X.501].\n   A server that masters entries and permits clients to modify\
    \ these\n   entries SHALL implement and provide access to these subschema\n  \
    \ (sub)entries including providing a 'subschemaSubentry' attribute in\n   each\
    \ modifiable entry.  This is so clients may discover the\n   attributes and object\
    \ classes that are permitted to be present.  It\n   is strongly RECOMMENDED that\
    \ all other servers implement this as\n   well.\n   The value of the 'subschemaSubentry'\
    \ attribute is the name of the\n   subschema (sub)entry holding the subschema\
    \ controlling the entry.\n      ( 2.5.18.10 NAME 'subschemaSubentry'\n       \
    \ EQUALITY distinguishedNameMatch\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.12\n\
    \        SINGLE-VALUE NO-USER-MODIFICATION\n        USAGE directoryOperation )\n\
    \   The 'distinguishedNameMatch' matching rule and the DistinguishedName\n   (1.3.6.1.4.1.1466.115.121.1.12)\
    \ syntax are defined in [RFC4517].\n   Subschema is held in (sub)entries belonging\
    \ to the subschema\n   auxiliary object class.\n      ( 2.5.20.1 NAME 'subschema'\
    \ AUXILIARY\n        MAY ( dITStructureRules $ nameForms $ ditContentRules $\n\
    \          objectClasses $ attributeTypes $ matchingRules $\n          matchingRuleUse\
    \ ) )\n   The 'ldapSyntaxes' operational attribute may also be present in\n  \
    \ subschema entries.\n   Servers MAY provide additional attributes (described\
    \ in other\n   documents) in subschema (sub)entries.\n   Servers SHOULD provide\
    \ the attributes 'createTimestamp' and\n   'modifyTimestamp' in subschema (sub)entries,\
    \ in order to allow\n   clients to maintain their caches of schema information.\n\
    \   The following subsections provide attribute type definitions for each\n  \
    \ of schema definition attribute types.\n"
- title: 4.2.1.  'objectClasses'
  contents:
  - "4.2.1.  'objectClasses'\n   This attribute holds definitions of object classes.\n\
    \      ( 2.5.21.6 NAME 'objectClasses'\n        EQUALITY objectIdentifierFirstComponentMatch\n\
    \        SYNTAX 1.3.6.1.4.1.1466.115.121.1.37\n        USAGE directoryOperation\
    \ )\n   The 'objectIdentifierFirstComponentMatch' matching rule and the\n   ObjectClassDescription\
    \ (1.3.6.1.4.1.1466.115.121.1.37) syntax are\n   defined in [RFC4517].\n"
- title: 4.2.2.  'attributeTypes'
  contents:
  - "4.2.2.  'attributeTypes'\n   This attribute holds definitions of attribute types.\n\
    \      ( 2.5.21.5 NAME 'attributeTypes'\n        EQUALITY objectIdentifierFirstComponentMatch\n\
    \        SYNTAX 1.3.6.1.4.1.1466.115.121.1.3\n        USAGE directoryOperation\
    \ )\n   The 'objectIdentifierFirstComponentMatch' matching rule and the\n   AttributeTypeDescription\
    \ (1.3.6.1.4.1.1466.115.121.1.3) syntax are\n   defined in [RFC4517].\n"
- title: 4.2.3.  'matchingRules'
  contents:
  - "4.2.3.  'matchingRules'\n   This attribute holds definitions of matching rules.\n\
    \      ( 2.5.21.4 NAME 'matchingRules'\n        EQUALITY objectIdentifierFirstComponentMatch\n\
    \        SYNTAX 1.3.6.1.4.1.1466.115.121.1.30\n        USAGE directoryOperation\
    \ )\n   The 'objectIdentifierFirstComponentMatch' matching rule and the\n   MatchingRuleDescription\
    \ (1.3.6.1.4.1.1466.115.121.1.30) syntax are\n   defined in [RFC4517].\n"
- title: 4.2.4 'matchingRuleUse'
  contents:
  - "4.2.4 'matchingRuleUse'\n   This attribute holds definitions of matching rule\
    \ uses.\n      ( 2.5.21.8 NAME 'matchingRuleUse'\n        EQUALITY objectIdentifierFirstComponentMatch\n\
    \        SYNTAX 1.3.6.1.4.1.1466.115.121.1.31\n        USAGE directoryOperation\
    \ )\n   The 'objectIdentifierFirstComponentMatch' matching rule and the\n   MatchingRuleUseDescription\
    \ (1.3.6.1.4.1.1466.115.121.1.31) syntax are\n   defined in [RFC4517].\n"
- title: 4.2.5.  'ldapSyntaxes'
  contents:
  - "4.2.5.  'ldapSyntaxes'\n   This attribute holds definitions of LDAP syntaxes.\n\
    \      ( 1.3.6.1.4.1.1466.101.120.16 NAME 'ldapSyntaxes'\n        EQUALITY objectIdentifierFirstComponentMatch\n\
    \        SYNTAX 1.3.6.1.4.1.1466.115.121.1.54\n        USAGE directoryOperation\
    \ )\n   The 'objectIdentifierFirstComponentMatch' matching rule and the\n   SyntaxDescription\
    \ (1.3.6.1.4.1.1466.115.121.1.54) syntax are defined\n   in [RFC4517].\n"
- title: 4.2.6.  'dITContentRules'
  contents:
  - "4.2.6.  'dITContentRules'\n   This attribute lists DIT Content Rules that are\
    \ present in the\n   subschema.\n      ( 2.5.21.2 NAME 'dITContentRules'\n   \
    \     EQUALITY objectIdentifierFirstComponentMatch\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.16\n\
    \        USAGE directoryOperation )\n   The 'objectIdentifierFirstComponentMatch'\
    \ matching rule and the\n   DITContentRuleDescription (1.3.6.1.4.1.1466.115.121.1.16)\
    \ syntax are\n   defined in [RFC4517].\n"
- title: 4.2.7.  'dITStructureRules'
  contents:
  - "4.2.7.  'dITStructureRules'\n   This attribute lists DIT Structure Rules that\
    \ are present in the\n   subschema.\n      ( 2.5.21.1 NAME 'dITStructureRules'\n\
    \        EQUALITY integerFirstComponentMatch\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.17\n\
    \        USAGE directoryOperation )\n   The 'integerFirstComponentMatch' matching\
    \ rule and the\n   DITStructureRuleDescription (1.3.6.1.4.1.1466.115.121.1.17)\
    \ syntax\n   are defined in [RFC4517].\n"
- title: 4.2.8 'nameForms'
  contents:
  - "4.2.8 'nameForms'\n   This attribute lists Name Forms that are in force.\n  \
    \    ( 2.5.21.7 NAME 'nameForms'\n        EQUALITY objectIdentifierFirstComponentMatch\n\
    \        SYNTAX 1.3.6.1.4.1.1466.115.121.1.35\n        USAGE directoryOperation\
    \ )\n   The 'objectIdentifierFirstComponentMatch' matching rule and the\n   NameFormDescription\
    \ (1.3.6.1.4.1.1466.115.121.1.35) syntax are\n   defined in [RFC4517].\n"
- title: 4.3.  'extensibleObject' object class
  contents:
  - "4.3.  'extensibleObject' object class\n   The 'extensibleObject' auxiliary object\
    \ class allows entries that\n   belong to it to hold any user attribute.  The\
    \ set of allowed\n   attribute types of this object class is implicitly the set\
    \ of all\n   attribute types of userApplications usage.\n      ( 1.3.6.1.4.1.1466.101.120.111\
    \ NAME 'extensibleObject'\n        SUP top AUXILIARY )\n   The mandatory attributes\
    \ of the other object classes of this entry\n   are still required to be present,\
    \ and any precluded attributes are\n   still not allowed to be present.\n"
- title: 4.4.  Subschema Discovery
  contents:
  - "4.4.  Subschema Discovery\n   To discover the DN of the subschema (sub)entry\
    \ holding the subschema\n   controlling a particular entry, a client reads that\
    \ entry's\n   'subschemaSubentry' operational attribute.  To read schema attributes\n\
    \   from the subschema (sub)entry, clients MUST issue a Search operation\n   [RFC4511]\
    \ where baseObject is the DN of the subschema (sub)entry,\n   scope is baseObject,\
    \ filter is \"(objectClass=subschema)\" [RFC4515],\n   and the attributes field\
    \ lists the names of the desired schema\n   attributes (as they are operational).\
    \  Note: the\n   \"(objectClass=subschema)\" filter allows LDAP servers that gateway\
    \ to\n   X.500 to detect that subentry information is being requested.\n   Clients\
    \ SHOULD NOT assume that a published subschema is complete,\n   that the server\
    \ supports all of the schema elements it publishes, or\n   that the server does\
    \ not support an unpublished element.\n"
- title: 5.  DSA (Server) Informational Model
  contents:
  - "5.  DSA (Server) Informational Model\n   The LDAP protocol assumes there are\
    \ one or more servers that jointly\n   provide access to a Directory Information\
    \ Tree (DIT).  The server\n   holding the original information is called the \"\
    master\" (for that\n   information).  Servers that hold copies of the original\
    \ information\n   are referred to as \"shadowing\" or \"caching\" servers.\n \
    \  As defined in [X.501]:\n      context prefix: The sequence of RDNs leading\
    \ from the Root of the\n          DIT to the initial vertex of a naming context;\
    \ corresponds to\n          the distinguished name of that vertex.\n      naming\
    \ context: A subtree of entries held in a single master DSA.\n   That is, a naming\
    \ context is the largest collection of entries,\n   starting at an entry that\
    \ is mastered by a particular server, and\n   including all its subordinates and\
    \ their subordinates, down to the\n   entries that are mastered by different servers.\
    \  The context prefix\n   is the name of the initial entry.\n   The root of the\
    \ DIT is a DSA-specific Entry (DSE) and not part of any\n   naming context (or\
    \ any subtree); each server has different attribute\n   values in the root DSE.\n"
- title: 5.1.  Server-Specific Data Requirements
  contents:
  - "5.1.  Server-Specific Data Requirements\n   An LDAP server SHALL provide information\
    \ about itself and other\n   information that is specific to each server.  This\
    \ is represented as\n   a group of attributes located in the root DSE, which is\
    \ named with\n   the DN with zero RDNs (whose [RFC4514] representation is as the\n\
    \   zero-length string).\n   These attributes are retrievable, subject to access\
    \ control and other\n   restrictions, if a client performs a Search operation\
    \ [RFC4511] with\n   an empty baseObject, scope of baseObject, the filter\n  \
    \ \"(objectClass=*)\" [RFC4515], and the attributes field listing the\n   names\
    \ of the desired attributes.  It is noted that root DSE\n   attributes are operational\
    \ and, like other operational attributes,\n   are not returned in search requests\
    \ unless requested by name.\n   The root DSE SHALL NOT be included if the client\
    \ performs a subtree\n   search starting from the root.\n   Servers may allow\
    \ clients to modify attributes of the root DSE, where\n   appropriate.\n   The\
    \ following attributes of the root DSE are defined below.\n   Additional attributes\
    \ may be defined in other documents.\n      - altServer: alternative servers;\n\
    \      - namingContexts: naming contexts;\n      - supportedControl: recognized\
    \ LDAP controls;\n      - supportedExtension: recognized LDAP extended operations;\n\
    \      - supportedFeatures: recognized LDAP features;\n      - supportedLDAPVersion:\
    \ LDAP versions supported; and\n      - supportedSASLMechanisms: recognized Simple\
    \ Authentication and\n        Security Layers (SASL) [RFC4422] mechanisms.\n \
    \  The values provided for these attributes may depend on session-\n   specific\
    \ and other factors.  For example, a server supporting the\n   SASL EXTERNAL mechanism\
    \ might only list \"EXTERNAL\" when the client's\n   identity has been established\
    \ by a lower level.  See [RFC4513].\n   The root DSE may also include a 'subschemaSubentry'\
    \ attribute.  If it\n   does, the attribute refers to the subschema (sub)entry\
    \ holding the\n   schema controlling the root DSE.  Clients SHOULD NOT assume\
    \ that this\n   subschema (sub)entry controls other entries held by the server.\n\
    \   General subschema discovery procedures are provided in Section 4.4.\n"
- title: 5.1.1.  'altServer'
  contents:
  - "5.1.1.  'altServer'\n   The 'altServer' attribute lists URIs referring to alternative\
    \ servers\n   that may be contacted when this server becomes unavailable.  URIs\
    \ for\n   servers implementing the LDAP are written according to [RFC4516].\n\
    \   Other kinds of URIs may be provided.  If the server does not know of\n   any\
    \ other servers that could be used, this attribute will be absent.\n   Clients\
    \ may cache this information in case their preferred server\n   later becomes\
    \ unavailable.\n      ( 1.3.6.1.4.1.1466.101.120.6 NAME 'altServer'\n        SYNTAX\
    \ 1.3.6.1.4.1.1466.115.121.1.26\n        USAGE dSAOperation )\n   The IA5String\
    \ (1.3.6.1.4.1.1466.115.121.1.26) syntax is defined in\n   [RFC4517].\n"
- title: 5.1.2.  'namingContexts'
  contents:
  - "5.1.2.  'namingContexts'\n   The 'namingContexts' attribute lists the context\
    \ prefixes of the\n   naming contexts the server masters or shadows (in part or\
    \ in whole).\n   If the server is a first-level DSA [X.501], it should list (in\n\
    \   addition) an empty string (indicating the root of the DIT).  If the\n   server\
    \ does not master or shadow any information (e.g., it is an LDAP\n   gateway to\
    \ a public X.500 directory) this attribute will be absent.\n   If the server believes\
    \ it masters or shadows the entire directory,\n   the attribute will have a single\
    \ value, and that value will be the\n   empty string (indicating the root of the\
    \ DIT).\n   This attribute may be used, for example, to select a suitable entry\n\
    \   name for subsequent operations with this server.\n      ( 1.3.6.1.4.1.1466.101.120.5\
    \ NAME 'namingContexts'\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.12\n      \
    \  USAGE dSAOperation )\n   The DistinguishedName (1.3.6.1.4.1.1466.115.121.1.12)\
    \ syntax is\n   defined in [RFC4517].\n"
- title: 5.1.3.  'supportedControl'
  contents:
  - "5.1.3.  'supportedControl'\n   The 'supportedControl' attribute lists object\
    \ identifiers identifying\n   the request controls [RFC4511] the server supports.\
    \  If the server\n   does not support any request controls, this attribute will\
    \ be absent.\n   Object identifiers identifying response controls need not be\
    \ listed.\n   Procedures for registering object identifiers used to discovery\
    \ of\n   protocol mechanisms are detailed in BCP 64, RFC 4520 [RFC4520].\n   \
    \   ( 1.3.6.1.4.1.1466.101.120.13 NAME 'supportedControl'\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.38\n\
    \        USAGE dSAOperation )\n   The OBJECT IDENTIFIER (1.3.6.1.4.1.1466.115.121.1.38)\
    \ syntax is\n   defined in [RFC4517].\n"
- title: 5.1.4.  'supportedExtension'
  contents:
  - "5.1.4.  'supportedExtension'\n   The 'supportedExtension' attribute lists object\
    \ identifiers\n   identifying the extended operations [RFC4511] that the server\n\
    \   supports.  If the server does not support any extended operations,\n   this\
    \ attribute will be absent.\n   An extended operation generally consists of an\
    \ extended request and\n   an extended response but may also include other protocol\
    \ data units\n   (such as intermediate responses).  The object identifier assigned\
    \ to\n   the extended request is used to identify the extended operation.\n  \
    \ Other object identifiers used in the extended operation need not be\n   listed\
    \ as values of this attribute.\n   Procedures for registering object identifiers\
    \ used to discovery of\n   protocol mechanisms are detailed in BCP 64, RFC 4520\
    \ [RFC4520].\n      ( 1.3.6.1.4.1.1466.101.120.7 NAME 'supportedExtension'\n \
    \       SYNTAX 1.3.6.1.4.1.1466.115.121.1.38\n        USAGE dSAOperation )\n \
    \  The OBJECT IDENTIFIER (1.3.6.1.4.1.1466.115.121.1.38) syntax is\n   defined\
    \ in [RFC4517].\n"
- title: 5.1.5.  'supportedFeatures'
  contents:
  - "5.1.5.  'supportedFeatures'\n   The 'supportedFeatures' attribute lists object\
    \ identifiers\n   identifying elective features that the server supports.  If\
    \ the\n   server does not support any discoverable elective features, this\n \
    \  attribute will be absent.\n      ( 1.3.6.1.4.1.4203.1.3.5 NAME 'supportedFeatures'\n\
    \          EQUALITY objectIdentifierMatch\n          SYNTAX 1.3.6.1.4.1.1466.115.121.1.38\n\
    \          USAGE dSAOperation )\n   Procedures for registering object identifiers\
    \ used to discovery of\n   protocol mechanisms are detailed in BCP 64, RFC 4520\
    \ [RFC4520].\n   The OBJECT IDENTIFIER (1.3.6.1.4.1.1466.115.121.1.38) syntax\
    \ and\n   objectIdentifierMatch matching rule are defined in [RFC4517].\n"
- title: 5.1.6.  'supportedLDAPVersion'
  contents:
  - "5.1.6.  'supportedLDAPVersion'\n   The 'supportedLDAPVersion' attribute lists\
    \ the versions of LDAP that\n   the server supports.\n      ( 1.3.6.1.4.1.1466.101.120.15\
    \ NAME 'supportedLDAPVersion'\n        SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\n\
    \        USAGE dSAOperation )\n   The INTEGER (1.3.6.1.4.1.1466.115.121.1.27)\
    \ syntax is defined in\n   [RFC4517].\n"
- title: 5.1.7.  'supportedSASLMechanisms'
  contents:
  - "5.1.7.  'supportedSASLMechanisms'\n   The 'supportedSASLMechanisms' attribute\
    \ lists the SASL mechanisms\n   [RFC4422] that the server recognizes and/or supports\
    \ [RFC4513].  The\n   contents of this attribute may depend on the current session\
    \ state.\n   If the server does not support any SASL mechanisms, this attribute\n\
    \   will not be present.\n      ( 1.3.6.1.4.1.1466.101.120.14 NAME 'supportedSASLMechanisms'\n\
    \        SYNTAX 1.3.6.1.4.1.1466.115.121.1.15\n        USAGE dSAOperation )\n\
    \   The Directory String (1.3.6.1.4.1.1466.115.121.1.15) syntax is\n   defined\
    \ in [RFC4517].\n"
- title: 6.  Other Considerations
  contents:
  - '6.  Other Considerations

    '
- title: 6.1.  Preservation of User Information
  contents:
  - "6.1.  Preservation of User Information\n   Syntaxes may be defined that have\
    \ specific value and/or value form\n   (representation) preservation requirements.\
    \  For example, a syntax\n   containing digitally signed data can mandate that\
    \ the server preserve\n   both the value and form of value presented to ensure\
    \ that the\n   signature is not invalidated.\n   Where such requirements have\
    \ not been explicitly stated, servers\n   SHOULD preserve the value of user information\
    \ but MAY return the\n   value in a different form.  And where a server is unable\
    \ (or\n   unwilling) to preserve the value of user information, the server\n \
    \  SHALL ensure that an equivalent value (per Section 2.3) is returned.\n"
- title: 6.2.  Short Names
  contents:
  - "6.2.  Short Names\n   Short names, also known as descriptors, are used as more\
    \ readable\n   aliases for object identifiers and are used to identify various\n\
    \   schema elements.  However, it is not expected that LDAP\n   implementations\
    \ with human user interface would display these short\n   names (or the object\
    \ identifiers they refer to) to the user.\n   Instead, they would most likely\
    \ be performing translations (such as\n   expressing the short name in one of\
    \ the local national languages).\n   For example, the short name \"st\" (stateOrProvinceName)\
    \ might be\n   displayed to a German-speaking user as \"Land\".\n   The same short\
    \ name might have different meaning in different\n   subschemas, and, within a\
    \ particular subschema, the same short name\n   might refer to different object\
    \ identifiers each identifying a\n   different kind of schema element.\n   Implementations\
    \ MUST be prepared that the same short name might be\n   used in a subschema to\
    \ refer to the different kinds of schema\n   elements.  That is, there might be\
    \ an object class 'x-fubar' and an\n   attribute type 'x-fubar' in a subschema.\n\
    \   Implementations MUST be prepared that the same short name might be\n   used\
    \ in the different subschemas to refer to the different schema\n   elements. \
    \ That is, there might be two matching rules 'x-fubar', each\n   in different\
    \ subschemas.\n   Procedures for registering short names (descriptors) are detailed\
    \ in\n   BCP 64, RFC 4520 [RFC4520].\n"
- title: 6.3.  Cache and Shadowing
  contents:
  - "6.3.  Cache and Shadowing\n   Some servers may hold cache or shadow copies of\
    \ entries, which can be\n   used to answer search and comparison queries, but\
    \ will return\n   referrals or contact other servers if modification operations\
    \ are\n   requested.  Servers that perform shadowing or caching MUST ensure\n\
    \   that they do not violate any access control constraints placed on the\n  \
    \ data by the originating server.\n"
- title: 7.  Implementation Guidelines
  contents:
  - '7.  Implementation Guidelines

    '
- title: 7.1.  Server Guidelines
  contents:
  - "7.1.  Server Guidelines\n   Servers MUST recognize all names of attribute types\
    \ and object\n   classes defined in this document but, unless stated otherwise,\
    \ need\n   not support the associated functionality.  Servers SHOULD recognize\n\
    \   all the names of attribute types and object classes defined in\n   Section\
    \ 3 and 4, respectively, of [RFC4519].\n   Servers MUST ensure that entries conform\
    \ to user and system schema\n   rules or other data model constraints.\n   Servers\
    \ MAY support DIT Content Rules.  Servers MAY support DIT\n   Structure Rules\
    \ and Name Forms.\n   Servers MAY support alias entries.\n   Servers MAY support\
    \ the 'extensibleObject' object class.\n   Servers MAY support subentries.  If\
    \ so, they MUST do so in accordance\n   with [RFC3672].  Servers that do not support\
    \ subentries SHOULD use\n   object entries to mimic subentries as detailed in\
    \ Section 3.2.\n   Servers MAY implement additional schema elements.  Servers\
    \ SHOULD\n   provide definitions of all schema elements they support in subschema\n\
    \   (sub)entries.\n"
- title: 7.2.  Client Guidelines
  contents:
  - "7.2.  Client Guidelines\n   In the absence of prior agreements with servers,\
    \ clients SHOULD NOT\n   assume that servers support any particular schema elements\
    \ beyond\n   those referenced in Section 7.1.  The client can retrieve subschema\n\
    \   information as described in Section 4.4.\n   Clients MUST NOT display or attempt\
    \ to decode a value as ASN.1 if the\n   value's syntax is not known.  Clients\
    \ MUST NOT assume the LDAP-\n   specific string encoding is restricted to a UTF-8\
    \ encoded string of\n   Unicode characters or any particular subset of Unicode\
    \ (such as a\n   printable subset) unless such restriction is explicitly stated.\n\
    \   Clients SHOULD NOT send attribute values in a request that are not\n   valid\
    \ according to the syntax defined for the attributes.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Attributes of directory entries are used to provide\
    \ descriptive\n   information about the real-world objects they represent, which\
    \ can be\n   people, organizations, or devices.  Most countries have privacy laws\n\
    \   regarding the publication of information about people.\n   General security\
    \ considerations for accessing directory information\n   with LDAP are discussed\
    \ in [RFC4511] and [RFC4513].\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   The Internet Assigned Numbers Authority (IANA) has\
    \ updated the LDAP\n   descriptors registry as indicated in the following template:\n\
    \      Subject: Request for LDAP Descriptor Registration Update\n      Descriptor\
    \ (short name): see comment\n      Object Identifier: see comment\n      Person\
    \ & email address to contact for further information:\n          Kurt Zeilenga\
    \ <kurt@OpenLDAP.org>\n      Usage: see comment\n      Specification: RFC 4512\n\
    \      Author/Change Controller: IESG\n      Comments:\n      The following descriptors\
    \ (short names) has been added to\n      the registry.\n        NAME         \
    \                Type OID\n        ------------------------     ---- -----------------\n\
    \        governingStructureRule          A 2.5.21.10\n        structuralObjectClass\
    \           A 2.5.21.9\n      The following descriptors (short names) have been\
    \ updated to\n      refer to this RFC.\n        NAME                         Type\
    \ OID\n        ------------------------     ---- -----------------\n        alias\
    \                           O 2.5.6.1\n        aliasedObjectName             \
    \  A 2.5.4.1\n        altServer                       A 1.3.6.1.4.1.1466.101.120.6\n\
    \        attributeTypes                  A 2.5.21.5\n        createTimestamp \
    \                A 2.5.18.1\n        creatorsName                    A 2.5.18.3\n\
    \        dITContentRules                 A 2.5.21.2\n        dITStructureRules\
    \               A 2.5.21.1\n        extensibleObject                O 1.3.6.1.4.1.1466.101.120.111\n\
    \        ldapSyntaxes                    A 1.3.6.1.4.1.1466.101.120.16\n     \
    \   matchingRuleUse                 A 2.5.21.8\n        matchingRules        \
    \           A 2.5.21.4\n        modifiersName                   A 2.5.18.4\n \
    \       modifyTimestamp                 A 2.5.18.2\n        nameForms        \
    \               A 2.5.21.7\n        namingContexts                  A 1.3.6.1.4.1.1466.101.120.5\n\
    \        objectClass                     A 2.5.4.0\n        objectClasses    \
    \               A 2.5.21.6\n        subschema                       O 2.5.20.1\n\
    \        subschemaSubentry               A 2.5.18.10\n        supportedControl\
    \                A 1.3.6.1.4.1.1466.101.120.13\n        supportedExtension   \
    \           A 1.3.6.1.4.1.1466.101.120.7\n        supportedFeatures          \
    \     A 1.3.6.1.4.1.4203.1.3.5\n        supportedLDAPVersion            A 1.3.6.1.4.1.1466.101.120.15\n\
    \        supportedSASLMechanisms         A 1.3.6.1.4.1.1466.101.120.14\n     \
    \   top                             O 2.5.6.0\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   This document is based in part on RFC 2251 by M. Wahl,\
    \ T. Howes, and\n   S. Kille; RFC 2252 by M. Wahl, A. Coulbeck, T. Howes, S. Kille;\
    \ and\n   RFC 2556 by M. Wahl, all products of the IETF Access, Searching and\n\
    \   Indexing of Directories (ASID) Working Group.  This document is also\n   based\
    \ in part on \"The Directory: Models\" [X.501], a product of the\n   International\
    \ Telephone Union (ITU).  Additional text was borrowed\n   from RFC 2253 by M.\
    \ Wahl, T. Howes, and S. Kille.\n   This document is a product of the IETF LDAP\
    \ Revision (LDAPBIS)\n   Working Group.\n"
- title: 11.  Normative References
  contents:
  - "11.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC3629]     Yergeau, F., \"UTF-8, a transformation format\
    \ of ISO\n                 10646\", STD 63, RFC 3629, November 2003.\n   [RFC3671]\
    \     Zeilenga, K., \"Collective Attributes in the Lightweight\n             \
    \    Directory Access Protocol (LDAP)\", RFC 3671, December\n                \
    \ 2003.\n   [RFC3672]     Zeilenga, K., \"Subentries in the Lightweight Directory\n\
    \                 Access Protocol (LDAP)\", RFC 3672, December 2003.\n   [RFC4234]\
    \     Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n               \
    \  Specifications: ABNF\", RFC 4234, October 2005.\n   [RFC4422]     Melnikov,\
    \ A., Ed. and K. Zeilenga, Ed., \"Simple\n                 Authentication and\
    \ Security Layer (SASL)\", RFC 4422,\n                 June 2006.\n   [RFC4510]\
    \     Zeilenga, K., Ed., \"Lightweight Directory Access\n                 Protocol\
    \ (LDAP): Technical Specification Road Map\", RFC\n                 4510, June\
    \ 2006.\n   [RFC4511]     Sermersheim, J., Ed., \"Lightweight Directory Access\n\
    \                 Protocol (LDAP): The Protocol\", RFC 4511, June 2006.\n   [RFC4513]\
    \     Harrison, R., Ed., \"Lightweight Directory Access\n                 Protocol\
    \ (LDAP): Authentication Methods and Security\n                 Mechanisms\",\
    \ RFC 4513, June 2006.\n   [RFC4514]     Zeilenga, K., Ed., \"Lightweight Directory\
    \ Access\n                 Protocol (LDAP): String Representation of Distinguished\n\
    \                 Names\", RFC 4514, June 2006.\n   [RFC4515]     Smith, M., Ed.\
    \ and T. Howes, \"Lightweight Directory\n                 Access Protocol (LDAP):\
    \ String Representation of Search\n                 Filters\", RFC 4515, June\
    \ 2006.\n   [RFC4516]     Smith, M., Ed. and T. Howes, \"Lightweight Directory\n\
    \                 Access Protocol (LDAP): Uniform Resource Locator\", RFC\n  \
    \               4516, June 2006.\n   [RFC4517]     Legg, S., Ed., \"Lightweight\
    \ Directory Access Protocol\n                 (LDAP): Syntaxes and Matching Rules\"\
    , RFC 4517, June\n                 2006.\n   [RFC4519]     Sciberras, A., Ed.,\
    \ \"Lightweight Directory Access\n                 Protocol (LDAP): Schema for\
    \ User Applications\", RFC\n                 4519, June 2006.\n   [RFC4520]  \
    \   Zeilenga, K., \"Internet Assigned Numbers Authority\n                 (IANA)\
    \ Considerations for the Lightweight Directory\n                 Access Protocol\
    \ (LDAP)\", BCP 64, RFC 4520, June 2006.\n   [Unicode]     The Unicode Consortium,\
    \ \"The Unicode Standard, Version\n                 3.2.0\" is defined by \"The\
    \ Unicode Standard, Version\n                 3.0\" (Reading, MA, Addison-Wesley,\
    \ 2000.  ISBN 0-201-\n                 61633-5), as amended by the \"Unicode Standard\
    \ Annex\n                 #27: Unicode 3.1\"\n                 (http://www.unicode.org/reports/tr27/)\
    \ and by the\n                 \"Unicode Standard Annex #28: Unicode 3.2\"\n \
    \                (http://www.unicode.org/reports/tr28/).\n   [X.500]       International\
    \ Telecommunication Union -\n                 Telecommunication Standardization\
    \ Sector, \"The\n                 Directory -- Overview of concepts, models and\n\
    \                 services,\" X.500(1993) (also ISO/IEC 9594-1:1994).\n   [X.501]\
    \       International Telecommunication Union -\n                 Telecommunication\
    \ Standardization Sector, \"The\n                 Directory -- Models,\" X.501(1993)\
    \ (also ISO/IEC 9594-\n                 2:1994).\n   [X.680]       International\
    \ Telecommunication Union -\n                 Telecommunication Standardization\
    \ Sector, \"Abstract\n                 Syntax Notation One (ASN.1) - Specification\
    \ of Basic\n                 Notation\", X.680(2002) (also ISO/IEC 8824-1:2002).\n"
- title: Appendix A.  Changes
  contents:
  - "Appendix A.  Changes\n   This appendix is non-normative.\n   This document amounts\
    \ to nearly a complete rewrite of portions of RFC\n   2251, RFC 2252, and RFC\
    \ 2256.  This rewrite was undertaken to improve\n   overall clarity of technical\
    \ specification.  This appendix provides a\n   summary of substantive changes\
    \ made to the portions of these\n   documents incorporated into this document.\
    \  Readers should consult\n   [RFC4510], [RFC4511], [RFC4517], and [RFC4519] for\
    \ summaries of\n   remaining portions of these documents.\n"
- title: A.1.  Changes to RFC 2251
  contents:
  - "A.1.  Changes to RFC 2251\n   This document incorporates from RFC 2251, Sections\
    \ 3.2 and 3.4, and\n   portions of Sections 4 and 6 as summarized below.\n"
- title: A.1.1.  Section 3.2 of RFC 2251
  contents:
  - "A.1.1.  Section 3.2 of RFC 2251\n   Section 3.2 of RFC 2251 provided a brief\
    \ introduction to the X.500\n   data model, as used by LDAP.  The previous specification\
    \ relied on\n   [X.501] but lacked clarity in how X.500 models are adapted for\
    \ use by\n   LDAP.  This document describes the X.500 data models, as used by\n\
    \   LDAP, in greater detail, especially in areas where adaptation is\n   needed.\n\
    \   Section 3.2.1 of RFC 2251 described an attribute as \"a type with one\n  \
    \ or more associated values\".  In LDAP, an attribute is better\n   described\
    \ as an attribute description, a type with zero or more\n   options, and one or\
    \ more associated values.\n   Section 3.2.2 of RFC 2251 mandated that subschema\
    \ subentries contain\n   objectClasses and attributeTypes attributes, yet X.500(93)\
    \ treats\n   these attributes as optional.  While generally all implementations\n\
    \   that support X.500(93) subschema mechanisms will provide both of\n   these\
    \ attributes, it is not absolutely required for interoperability\n   that all\
    \ servers do.  The mandate was removed for consistency with\n   X.500(93).   The\
    \ subschema discovery mechanism was also clarified to\n   indicate that subschema\
    \ controlling an entry is obtained by reading\n   the (sub)entry referred to by\
    \ that entry's 'subschemaSubentry'\n   attribute.\n"
- title: A.1.2.  Section 3.4 of RFC 2251
  contents:
  - "A.1.2.  Section 3.4 of RFC 2251\n   Section 3.4 of RFC 2251 provided \"Server-specific\
    \ Data Requirements\".\n   This material, with changes, was incorporated in Section\
    \ 5.1 of this\n   document.\n   Changes:\n   - Clarify that attributes of the\
    \ root DSE are subject to \"other\n     restrictions\" in addition to access controls.\n\
    \   - Clarify that only recognized extended requests need to be\n     enumerated\
    \ 'supportedExtension'.\n   - Clarify that only recognized request controls need\
    \ to be enumerated\n     'supportedControl'.\n   - Clarify that root DSE attributes\
    \ are operational and, like other\n     operational attributes, will not be returned\
    \ in search requests\n     unless requested by name.\n   - Clarify that not all\
    \ root DSE attributes are user modifiable.\n   - Remove inconsistent text regarding\
    \ handling of the\n     'subschemaSubentry' attribute within the root DSE.  The\
    \ previous\n     specification stated that the 'subschemaSubentry' attribute held\
    \ in\n     the root DSE referred to \"subschema entries (or subentries) known\n\
    \     by this server\".  This is inconsistent with the attribute's\n     intended\
    \ use as well as its formal definition as a single valued\n     attribute [X.501].\
    \  It is also noted that a simple (possibly\n     incomplete) list of subschema\
    \ (sub)entries is not terribly useful.\n     This document (in Section 5.1) specifies\
    \ that the\n     'subschemaSubentry' attribute of the root DSE refers to the\n\
    \     subschema controlling the root DSE.  It is noted that the general\n    \
    \ subschema discovery mechanism remains available (see Section 4.4 of\n     this\
    \ document).\n"
- title: A.1.3.  Section 4 of RFC 2251
  contents:
  - "A.1.3.  Section 4 of RFC 2251\n   Portions of Section 4 of RFC 2251 detailing\
    \ aspects of the\n   information model used by LDAP were incorporated in this\
    \ document,\n   including:\n   - Restriction of distinguished values to attributes\
    \ whose\n     descriptions have no options (from Section 4.1.3);\n   - Data model\
    \ aspects of Attribute Types (from Section 4.1.4),\n     Attribute Descriptions\
    \ (from 4.1.5), Attribute (from 4.1.8),\n     Matching Rule Identifier (from 4.1.9);\
    \ and\n   - User schema requirements (from Sections 4.1.6, 4.5.1, and 4.7).\n\
    \   Clarifications to these portions include:\n   - Subtyping and AttributeDescriptions\
    \ with options.\n"
- title: A.1.4.  Section 6 of RFC 2251
  contents:
  - "A.1.4.  Section 6 of RFC 2251\n   The Section 6.1 and the second paragraph of\
    \ Section 6.2 of RFC 2251\n   where incorporated into this document.\n"
- title: A.2.  Changes to RFC 2252
  contents:
  - "A.2.  Changes to RFC 2252\n   This document incorporates Sections 4, 5, and 7\
    \ from RFC 2252.\n"
- title: A.2.1.  Section 4 of RFC 2252
  contents:
  - "A.2.1.  Section 4 of RFC 2252\n   The specification was updated to use Augmented\
    \ BNF [RFC4234].  The\n   string representation of an OBJECT IDENTIFIER was tightened\
    \ to\n   disallow leading zeros as described in RFC 2252.\n   The <descr> syntax\
    \ was changed to disallow semicolon (U+003B)\n   characters in order to appear\
    \ to be consistent its natural language\n   specification \"descr is the syntactic\
    \ representation of an object\n   descriptor, which consists of letters and digits,\
    \ starting with a\n   letter\".  In a related change, the statement \"an AttributeDescription\n\
    \   can be used as the value in a NAME part of an\n   AttributeTypeDescription\"\
    \ was deleted.  RFC 2252 provided no\n   specification of the semantics of attribute\
    \ options appearing in NAME\n   fields.\n   RFC 2252 stated that the <descr> form\
    \ of <oid> SHOULD be preferred\n   over the <numericoid> form.  However, <descr>\
    \ form can be ambiguous.\n   To address this issue, the imperative was replaced\
    \ with a statement\n   (in Section 1.4) that while the <descr> form is generally\
    \ preferred,\n   <numericoid> should be used where an unambiguous <descr> is not\n\
    \   available.  Additionally, an expanded discussion of descriptor issues\n  \
    \ is in Section 6.2 (\"Short Names\").\n   The ABNF for a quoted string (qdstring)\
    \ was updated to reflect\n   support for the escaping mechanism described in Section\
    \ 4.3 of RFC\n   2252.\n"
- title: A.2.2.  Section 5 of RFC 2252
  contents:
  - "A.2.2.  Section 5 of RFC 2252\n   Definitions of operational attributes provided\
    \ in Section 5 of RFC\n   2252 where incorporated into this document.\n   The\
    \ 'namingContexts' description was clarified.  A first-level DSA\n   should publish,\
    \ in addition to other values, \"\" indicating the root\n   of the DIT.\n   The\
    \ 'altServer' description was clarified.  It may hold any URI.\n   The 'supportedExtension'\
    \ description was clarified.  A server need\n   only list the OBJECT IDENTIFIERs\
    \ associated with the extended\n   requests of the extended operations it recognizes.\n\
    \   The 'supportedControl' description was clarified.  A server need only\n  \
    \ list the OBJECT IDENTIFIERs associated with the request controls it\n   recognizes.\n\
    \   Descriptions for the 'structuralObjectClass' and\n   'governingStructureRule'\
    \ operational attribute types were added.\n   The attribute definition of 'subschemaSubentry'\
    \ was corrected to list\n   the terms SINGLE-VALUE and NO-USER-MODIFICATION in\
    \ proper order.\n"
- title: A.2.3.  Section 7 of RFC 2252
  contents:
  - "A.2.3.  Section 7 of RFC 2252\n   Section 7 of RFC 2252 provides definitions\
    \ of the 'subschema' and\n   'extensibleObject' object classes.  These definitions\
    \ where\n   integrated into Section 4.2 and Section 4.3 of this document,\n  \
    \ respectively.  Section 7 of RFC 2252 also contained the object class\n   implementation\
    \ requirement.  This was incorporated into Section 7 of\n   this document.\n \
    \  The specification of 'extensibleObject' was clarified regarding how\n   it\
    \ interacts with precluded attributes.\n"
- title: A.3.  Changes to RFC 2256
  contents:
  - "A.3.  Changes to RFC 2256\n   This document incorporates Sections 5.1, 5.2, 7.1,\
    \ and 7.2 of RFC\n   2256.\n   Section 5.1 of RFC 2256 provided the definition\
    \ of the 'objectClass'\n   attribute type.  This was integrated into Section 2.4.1\
    \ of this\n   document.  The statement \"One of the values is either 'top' or\n\
    \   'alias'\" was replaced with statement that one of the values is 'top'\n  \
    \ as entries belonging to 'alias' also belong to 'top'.\n   Section 5.2 of RFC\
    \ 2256 provided the definition of the\n   'aliasedObjectName' attribute type.\
    \  This was integrated into Section\n   2.6.2 of this document.\n   Section 7.1\
    \ of RFC 2256 provided the definition of the 'top' object\n   class.  This was\
    \ integrated into Section 2.4.1 of this document.\n   Section 7.2 of RFC 2256\
    \ provided the definition of the 'alias' object\n   class.  This was integrated\
    \ into Section 2.6.1 of this document.\n"
- title: A.4.  Changes to RFC 3674
  contents:
  - "A.4.  Changes to RFC 3674\n   This document made no substantive change to the\
    \ 'supportedFeatures'\n   technical specification provided in RFC 3674.\n"
- title: Editor's Address
  contents:
  - "Editor's Address\n   Kurt D.  Zeilenga\n   OpenLDAP Foundation\n   EMail: Kurt@OpenLDAP.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
