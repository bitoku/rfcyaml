- title: __initial_text__
  contents:
  - '                           PPP LCP Extensions

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ for\n   transporting multi-protocol datagrams over point-to-point links.  PPP\n\
    \   defines an extensible Link Control Protocol (LCP) for establishing,\n   configuring,\
    \ and testing the data-link connection.  This document\n   defines several additional\
    \ LCP features which have been suggested\n   over the past few years.\n   This\
    \ document is the product of the Point-to-Point Protocol Working\n   Group of\
    \ the Internet Engineering Task Force (IETF).  Comments should\n   be submitted\
    \ to the ietf-ppp@ucdavis.edu mailing list.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1.  Additional LCP Packets
  contents:
  - "1.  Additional LCP Packets\n   The Packet format and basic facilities are already\
    \ defined for LCP\n   [1].\n   Up-to-date values of the LCP Code field are specified\
    \ in the most\n   recent \"Assigned Numbers\" RFC [2].  This specification concerns\
    \ the\n   following values:\n      12      Identification\n      13      Time-Remaining\n"
- title: 1.1.  Identification
  contents:
  - "1.1.  Identification\n   Description\n      This Code provides a method for an\
    \ implementation to identify\n      itself to its peer.  This Code might be used\
    \ for many diverse\n      purposes, such as link troubleshooting, license enforcement,\
    \ etc.\n      Identification is a Link Maintenance packet.  Identification\n \
    \     packets MAY be sent at any time, including before LCP has reached\n    \
    \  the Opened state.\n      The sender transmits a LCP packet with the Code field\
    \ set to 12\n      (Identification), the Identifier field set, the local Magic-Number\n\
    \      (if any) inserted, and the Message field filled with any desired\n    \
    \  data, but not exceeding the default MRU minus eight.\n      Receipt of an Identification\
    \ packet causes the RXR or RUC event.\n      There is no response to the Identification\
    \ packet.\n      Receipt of a Code-Reject for the Identification packet SHOULD\n\
    \      generate the RXJ+ (permitted) event.\n      Rationale:\n         This feature\
    \ is defined as part of LCP, rather than as a\n         separate PPP Protocol,\
    \ in order that its benefits may be\n         available during the earliest possible\
    \ stage of the Link\n         Establishment phase.  It allows an operator to learn\
    \ the\n         identification of the peer even when negotiation is not\n    \
    \     converging.  Non-LCP packets cannot be sent during the Link\n         Establishment\
    \ phase.\n         This feature is defined as a separate LCP Code, rather than\
    \ a\n         Configuration-Option, so that the peer need not include it with\n\
    \         other items in configuration packet exchanges, and handle\n        \
    \ \"corrected\" values or \"rejection\", since its generation is both\n      \
    \   rare and in one direction.  It is recommended that\n         Identification\
    \ packets be sent whenever a Configure-Reject is\n         sent or received, as\
    \ a final message when negotiation fails to\n         converge, and when LCP reaches\
    \ the Opened state.\n   A summary of the Identification packet format is shown\
    \ below.  The\n   fields are transmitted from left to right.\n    0          \
    \         1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Magic-Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Message ...\n   +-+-+-+-+-+-+-+-+\n   Code\n      12 for Identification\n\
    \   Identifier\n      The Identifier field MUST be changed for each Identification\
    \ sent.\n   Length\n      >= 8\n   Magic-Number\n      The Magic-Number field\
    \ is four octets and aids in detecting links\n      which are in the looped-back\
    \ condition.  Until the Magic-Number\n      Configuration Option has been successfully\
    \ negotiated, the Magic-\n      Number MUST be transmitted as zero.  See the Magic-Number\n\
    \      Configuration Option for further explanation.\n   Message\n      The Message\
    \ field is zero or more octets, and its contents are\n      implementation dependent.\
    \  It is intended to be human readable,\n      and MUST NOT affect operation of\
    \ the protocol.  It is recommended\n      that the message contain displayable\
    \ ASCII characters 32 through\n      126 decimal.  Mechanisms for extension to\
    \ other character sets are\n      the topic of future research.  The size is determined\
    \ from the\n      Length field.\n      Implementation Note:\n         The Message\
    \ will usually contain such things as the sender's\n         hardware type, PPP\
    \ software revision level, and PPP product\n         serial number, MIB information\
    \ such as link speed and interface\n         name, and any other information that\
    \ the sender thinks might be\n         useful in debugging connections.  The format\
    \ is likely to be\n         different for each implementor, so that those doing\
    \ serial\n         number tracking can validate their numbers.  A robust\n   \
    \      implementation SHOULD treat the Message as displayable text,\n        \
    \ and SHOULD be able to receive and display a very long Message.\n"
- title: 1.2.  Time-Remaining
  contents:
  - "1.2.  Time-Remaining\n   Description\n      This Code provides a mechanism for\
    \ notifying the peer of the time\n      remaining in this session.\n      The\
    \ nature of this information is advisory only.  It is intended\n      that only\
    \ one side of the connection will send this packet\n      (generally a \"network\
    \ access server\").  The session is actually\n      concluded by the Terminate-Request\
    \ packet.\n      Time-Remaining is a Link Maintenance packet.  Time-Remaining\n\
    \      packets may only be sent in the LCP Opened state.\n      The sender transmits\
    \ a LCP packet with the Code field set to 13\n      (Time-Remaining), the Identifier\
    \ field set, the local Magic-Number\n      (if any) inserted, and the Message\
    \ field filled with any desired\n      data, but not exceeding the peer's established\
    \ MRU minus twelve.\n      Receipt of an Time-Remaining packet causes the RXR\
    \ or RUC event.\n      There is no response to the Time-Remaining packet.\n  \
    \    Receipt of a Code-Reject for the Time-Remaining packet SHOULD\n      generate\
    \ the RXJ+ (permitted) event.\n      Rationale:\n         This notification is\
    \ defined as a separate LCP Code, rather\n         than a Configuration-Option,\
    \ in order that changes and warning\n         messages may occur dynamically during\
    \ the session, and that the\n         information might be determined after Authentication\
    \ has\n         occurred.  Typically, this packet is sent when the link enters\n\
    \         Network-Layer Protocol phase, and at regular intervals\n         throughout\
    \ the session, particularly near the end of the\n         session.\n   A summary\
    \ of the Time-Remaining packet format is shown below.  The\n   fields are transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Magic-Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Seconds-Remaining                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Message ...\n   +-+-+-+-+-+-+-+-+\n   Code\n      13 for Time-Remaining\n\
    \   Identifier\n      The Identifier field MUST be changed for each Time-Remaining\
    \ sent.\n   Length\n      >= 12\n   Magic-Number\n      The Magic-Number field\
    \ is four octets and aids in detecting links\n      which are in the looped-back\
    \ condition.  Until the Magic-Number\n      Configuration Option has been successfully\
    \ negotiated, the Magic-\n      Number MUST be transmitted as zero.  See the Magic-Number\n\
    \      Configuration Option for further explanation.\n   Seconds-Remaining\n \
    \     The Seconds-Remaining field is four octets and indicates the\n      number\
    \ of integral seconds remaining in this session.  This 32 bit\n      unsigned\
    \ value is sent most significant octet first.  A value of\n      0xffffffff (all\
    \ ones) represents no timeout, or \"forever\".\n   Message\n      The Message\
    \ field is zero or more octets, and its contents are\n      implementation dependent.\
    \  It is intended to be human readable,\n      and MUST NOT affect operation of\
    \ the protocol.  It is recommended\n      that the message contain displayable\
    \ ASCII characters 32 through\n      126 decimal.  Mechanisms for extension to\
    \ other character sets are\n      the topic of future research.  The size is determined\
    \ from the\n      Length field.\n"
- title: 2.  Additional LCP Configuration Options
  contents:
  - "2.  Additional LCP Configuration Options\n   The Configuration Option format\
    \ and basic options are already defined\n   for LCP [1].\n   Up-to-date values\
    \ of the LCP Option Type field are specified in the\n   most recent \"Assigned\
    \ Numbers\" RFC [2].  This document concerns the\n   following values:\n     \
    \ 9       FCS-Alternatives\n      10      Self-Describing-Padding\n      13  \
    \    Callback\n      15      Compound-Frames\n"
- title: 2.1.  FCS-Alternatives
  contents:
  - "2.1.  FCS-Alternatives\n   Description\n      This Configuration Option provides\
    \ a method for an implementation\n      to specify another FCS format to be sent\
    \ by the peer, or to\n      negotiate away the FCS altogether.\n      This option\
    \ is negotiated separately in each direction.  However,\n      it is not required\
    \ that an implementation be capable of\n      concurrently generating a different\
    \ FCS on each side of the link.\n      The negotiated FCS values take effect only\
    \ during Authentication\n      and Network-Layer Protocol phases.  Frames sent\
    \ during any other\n      phase MUST contain the default FCS.\n   A summary of\
    \ the FCS-Alternatives Configuration Option format is\n   shown below.  The fields\
    \ are transmitted from left to right.\n    0                   1             \
    \      2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |    Options    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      9\n   Length\n      3\n   Options\n      This field is one octet,\
    \ and is comprised of the \"logical or\" of\n      the following values:\n   \
    \       1   Null FCS\n          2   CCITT 16-bit FCS\n          4   CCITT 32-bit\
    \ FCS\n   Implementation Note:\n      For most PPP HDLC framed links, the default\
    \ FCS is the CCITT 16-\n      bit FCS.  Some framing techniques and high speed\
    \ links may use\n      another format as the default FCS.\n"
- title: 2.1.1.  LCP considerations
  contents:
  - "2.1.1.  LCP considerations\n   The link can be subject to loss of state, and\
    \ the LCP can re-\n   negotiate at any time.  When the LCP begins renegotiation\
    \ or\n   termination, it is recommended that the LCP Configure-Request or\n  \
    \ Terminate-Request packet be sent with the last negotiated FCS, then\n   change\
    \ to the default FCS, and a duplicate LCP packet is sent with\n   the default\
    \ FCS.  The Identifier field SHOULD NOT be incremented for\n   each such duplicate\
    \ packet.\n   On receipt of a LCP Configure-Request or Terminate-Request packet,\n\
    \   the implementation MUST change to the default FCS for both\n   transmission\
    \ and reception.  If a Request packet is received which\n   contains a duplicate\
    \ Identifier field, a new reply MUST be generated.\n   Implementation Notes:\n\
    \      The need to send two packets is only necessary after the\n      Alternative-FCS\
    \ has already been negotiated.  It need not occur\n      during state transitions\
    \ when there is a natural indication that\n      the default FCS is in effect,\
    \ such as the Down and Up events.  It\n      is necessary to send two packets\
    \ in the Ack-Sent and Opened\n      states, since the peer could mistakenly believe\
    \ that the link has\n      Opened.\n      It is possible to send a single 48-bit\
    \ FCS which is a combination\n      of the 16-bit and 32-bit FCS.  This may be\
    \ sent instead of sending\n      the two packets described above.  We have not\
    \ standardized this\n      procedure because of intellectual property concerns.\
    \  If such a\n      48-bit FCS is used, it MUST only be used for LCP packets.\n"
- title: 2.1.2.  Null FCS
  contents:
  - "2.1.2.  Null FCS\n   The Null FCS SHOULD only be used for those network-layer\
    \ and\n   transport protocols which have an end-to-end checksum available, such\n\
    \   as TCP/IP, or UDP/IP with the checksum enabled.  That is, the Null\n   FCS\
    \ option SHOULD be negotiated together with another non-null FCS\n   option in\
    \ a heterogeneous environment.\n   When a configuration (LCP or NCP) or authentication\
    \ packet is sent,\n   the FCS MUST be included.  When a configuration (LCP or\
    \ NCP) or\n   authentication packet is received, the FCS MUST be verified.\n \
    \  There are several cases to be considered:\n   Null FCS alone\n      The sender\
    \ generates the FCS for those frames which require the\n      FCS before sending\
    \ the frame.\n      When a frame is received, it is not necessary to check the\
    \ FCS\n      before demultiplexing.  Any FCS is treated as padding.\n      Receipt\
    \ of an Authentication or Control packet would be discovered\n      after passing\
    \ the frame to the demultiplexer.  Verification of the\n      FCS can easily be\
    \ accomplished using one of the software\n      algorithms defined in \"PPP in\
    \ HDLC Framing\" [3] (16-bit FCS) and\n      Appendix A (32-bit FCS).\n   Null\
    \ FCS with another FCS, using software\n      This is similar to the above case.\n\
    \      Those packets which are required to have the FCS (Authentication,\n   \
    \   Control, or Network-Protocols lacking a checksum) are checked\n      using\
    \ software after demultiplexing.  Packets which fail the FCS\n      test are discarded\
    \ as usual.\n   Null FCS with another FCS, using hardware\n      A flag is passed\
    \ with the frame, indicating whether or not it has\n      passed the hardware\
    \ FCS check.  The incorrect FCS MUST be passed\n      with the rest of the data.\
    \  The frame MUST NOT be discarded until\n      after demultiplexing, and only\
    \ those frames that require the FCS\n      are discarded.\n   All three FCS forms\
    \ (Null, 16 and 32) may be used concurrently on\n   different frames when using\
    \ software.  That is probably not possible\n   with most current hardware.\n"
- title: 2.2.  Self-Describing-Padding
  contents:
  - "2.2.  Self-Describing-Padding\n   Description\n      This Configuration Option\
    \ provides a method for an implementation\n      to indicate to the peer that\
    \ it understands self-describing pads\n      when padding is added at the end\
    \ of the PPP Information field.\n      This option is most likely to be used when\
    \ some protocols, such as\n      network-layer or compression protocols, are configured\
    \ which\n      require detection and removal of any trailing padding.  Such\n\
    \      special protocols are identified in their respective documents.\n     \
    \ If the option is Rejected, the peer MUST NOT add any padding to\n      the identified\
    \ special protocols, but MAY add padding to other\n      protocols.\n      If\
    \ the option is Ack'd, the peer MUST follow the procedures for\n      adding self-describing\
    \ pads, but only to the specifically\n      identified protocols.  The peer is\
    \ not required to add any padding\n      to other protocols.\n      Implementation\
    \ Notes:\n         This is defined so that the Reject handles either case where\n\
    \         the peer does not generate self-describing pads.  When the peer\n  \
    \       never generates padding, it may safely Reject the option.  When\n    \
    \     the peer does not understand the option, it also will not\n         successfully\
    \ configure a special protocol which requires\n         elimination of pads.\n\
    \         While some senders might only be capable of adding padding to\n    \
    \     every protocol or not adding padding to any protocol, by design\n      \
    \   the receiver need not examine those protocols which do not need\n        \
    \ the padding stripped.\n         To avoid unnecessary configuration handshakes,\
    \ an\n         implementation which generates padding, and has a protocol\n  \
    \       configured which requires the padding to be known, SHOULD\n         include\
    \ this Option in its Configure-Request, and SHOULD\n         Configure-Nak with\
    \ this Option when it is not present in the\n         peer's Request.\n      Each\
    \ octet of self-describing pad contains the index of that\n      octet.  The first\
    \ pad octet MUST contain the value one (1), which\n      indicates the Padding\
    \ Protocol to the Compound-Frames option.\n      After removing the FCS, the final\
    \ pad octet indicates the number\n      of pad octets to remove.  For example,\
    \ three pad octets would\n      contain the values 1, 2, 3.\n      The Maximum-Pad-Value\
    \ (MPV) is also negotiated.  Only the values 1\n      through MPV are used.  When\
    \ no padding would otherwise be\n      required, but the final octet of the PPP\
    \ Information field\n      contains the value 1 through MPV, at least one self-describing\
    \ pad\n      octet MUST be added to the frame.  If the final octet is greater\n\
    \      than MPV, no additional padding is required.\n      Implementation Notes:\n\
    \         If any of the pad octets contain an incorrect index value, the\n   \
    \      entire frame SHOULD be silently discarded.  This is intended to\n     \
    \    prevent confusion with the FCS-Alternatives option, but might\n         not\
    \ be necessary in robust implementations.\n         Since this option is intended\
    \ to support compression protocols,\n         the Maximum-Pad-Value is specified\
    \ to limit the likelihood that\n         a frame may actually become longer.\n\
    \   A summary of the Self-Describing-Padding Configuration Option format\n   is\
    \ shown below.  The fields are transmitted from left to right.\n    0        \
    \           1                   2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type\
    \      |    Length     |    Maximum    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      10\n   Length\n      3\n   Maximum\n      This field specifies\
    \ the largest number of padding octets which\n      may be added to the frame.\
    \  The value may range from 1 to 255, but\n      values of 2, 4, or 8 are most\
    \ likely.\n"
- title: 2.3.  Callback
  contents:
  - "2.3.  Callback\n   Description\n      This Configuration Option provides a method\
    \ for an implementation\n      to request a dial-up peer to call back.  This option\
    \ might be used\n      for many diverse purposes, such as savings on toll charges.\n\
    \      When Callback is successfully negotiated, and authentication is\n     \
    \ complete, the Authentication phase proceeds directly to the\n      Termination\
    \ phase, and the link is disconnected.\n      Then, the peer re-establishes the\
    \ link, without negotiating\n      Callback.\n      Implementation Notes:\n  \
    \       A peer which agrees to this option SHOULD request the\n         Authentication-Protocol\
    \ Configuration Option.  The user\n         information learned during authentication\
    \ can be used to\n         determine the user location, or to limit a user to\
    \ certain\n         locations, or merely to determine whom to bill for the service.\n\
    \         Authentication SHOULD be requested in turn by the\n         implementation\
    \ when it is called back, if mutual authentication\n         is desired.\n   A\
    \ summary of the Callback Option format is shown below.  The fields\n   are transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |   Operation   |  Message ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      13\n   Length\n      >= 3\n   Operation\n      The Operation field\
    \ is one octet and indicates the contents of the\n      Message field.\n     \
    \ 0       location is determined by user authentication\n      1       Dialing\
    \ string, the format and contents of which assumes\n              configuration\
    \ knowledge of the specific device which is\n              making the callback.\n\
    \      2       Location identifier, which may or may not be human\n          \
    \    readable, to be used together with the authentication\n              information\
    \ for a database lookup to determine the\n              callback location.\n \
    \     3       E.164 number.\n      4       Distinguished name.\n   Message\n \
    \     The Message field is zero or more octets, and its general contents\n   \
    \   are determined by the Operation field.  The actual format of the\n      information\
    \ is site or application specific, and a robust\n      implementation SHOULD support\
    \ the field as undistinguished octets.\n      The size is determined from the\
    \ Length field.\n      It is intended that only an authorized user will have correct\
    \ site\n      specific information to make use of the Callback.  The\n      codification\
    \ of the range of allowed usage of this field is\n      outside the scope of this\
    \ specification.\n"
- title: 2.4.  Compound-Frames
  contents:
  - "2.4.  Compound-Frames\n   Description\n      This Configuration Option provides\
    \ a method for an implementation\n      to send multiple PPP encapsulated packets\
    \ within the same frame.\n      This option might be used for many diverse purposes,\
    \ such as\n      savings on toll charges.\n      Only those PPP Protocols which\
    \ have determinate lengths or\n      integral length fields may be aggregated\
    \ into a compound frame.\n      When Compound-Frames is successfully negotiated,\
    \ the sender MAY\n      add additional packets to the same frame.  Each packet\
    \ is\n      immediately followed by another Protocol field, with its attendant\n\
    \      datagram.\n      When padding is added to the end of the Information field,\
    \ the\n      procedure described in Self-Describing-Padding is used.\n      Therefore,\
    \ this option MUST be negotiated together with the Self-\n      Describing-Padding\
    \ option.\n      If the FCS-Alternatives option has been negotiated, self\n  \
    \    describing padding MUST always be added.  That is, the final\n      packet\
    \ MUST be followed by a series of octets, the first of which\n      contains the\
    \ value one (1).\n      On receipt, the first Protocol field is examined, and\
    \ the packet\n      is processed as usual.  For those datagrams which have a\n\
    \      determinate length, the remainder of the frame is returned to the\n   \
    \   demultiplexor.  Each succeeding Protocol field is processed as a\n      separate\
    \ packet.  This processing is complete when a packet is\n      processed which\
    \ does not have a determinate length, when the\n      remainder of the frame is\
    \ empty, or when the Protocol field is\n      determined to have a value of one\
    \ (1).\n      The PPP Protocol value of one (1) is reserved as the Padding\n \
    \     Protocol.  Any following octets are removed as padding.\n   A summary of\
    \ the Compound-Frames Option format is shown below.  The\n   fields are transmitted\
    \ from left to right.\n    0                   1\n    0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type      |    Length\
    \     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type\n      15\n   Length\n\
    \      2\n"
- title: 2.4.1.  LCP considerations
  contents:
  - "2.4.1.  LCP considerations\n   During initial negotiation, the Compound-Frames\
    \ option can be used to\n   minimize the negotiation latency, by reducing the\
    \ number of frames\n   exchanged.\n   The first LCP Configure-Request packet is\
    \ sent as usual in a single\n   frame, including the Self-Describing-Padding and\
    \ Compound-Frames\n   options.\n   The peer SHOULD respond with a Configure-Ack,\
    \ followed in a compound\n   frame by its LCP Configure-Request, and any NCP Configure-Requests\n\
    \   desired.\n   Upon receipt, the local implementation SHOULD process the Configure-\n\
    \   Ack as usual.  Since the peer has agreed to send compound frames, the\n  \
    \ implementation MUST examine the remainder of the frame for additional\n   packets.\
    \  If the peer also specified the Self-Describing-Padding and\n   Compound-Frames\
    \ options in its Configure-Request, the local\n   implementation SHOULD retain\
    \ its Configure-Ack, and further NCP\n   configuration packets SHOULD be added\
    \ to the return frame.\n   Together with the peer's final return frame, the minimum\
    \ number of\n   frames to complete configuration is 4.\n"
- title: A.  Fast Frame Check Sequence (FCS) Implementation
  contents:
  - 'A.  Fast Frame Check Sequence (FCS) Implementation

    '
- title: A.1.  32-bit FCS Computation Method
  contents:
  - "A.1.  32-bit FCS Computation Method\n   The following code provides a table lookup\
    \ computation for\n   calculating the 32-bit Frame Check Sequence as data arrives\
    \ at the\n   interface.\n   /*\n    * u32 represents an unsigned 32-bit number.\
    \  Adjust the typedef for\n    * your hardware.\n    */\n   typedef unsigned long\
    \ u32;\n   static u32 fcstab_32[256] =\n      {\n      0x00000000, 0x77073096,\
    \ 0xee0e612c, 0x990951ba,\n      0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n\
    \      0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,\n      0x09b64c2b, 0x7eb17cbd,\
    \ 0xe7b82d07, 0x90bf1d91,\n      0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,\n\
    \      0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n      0x136c9856, 0x646ba8c0,\
    \ 0xfd62f97a, 0x8a65c9ec,\n      0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\n\
    \      0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,\n      0x3c03e4d1, 0x4b04d447,\
    \ 0xd20d85fd, 0xa50ab56b,\n      0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940,\n\
    \      0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n      0x26d930ac, 0x51de003a,\
    \ 0xc8d75180, 0xbfd06116,\n      0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\n\
    \      0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n      0x2f6f7c87, 0x58684c11,\
    \ 0xc1611dab, 0xb6662d3d,\n      0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a,\n\
    \      0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n      0x7807c9a2, 0x0f00f934,\
    \ 0x9609a88e, 0xe10e9818,\n      0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n\
    \      0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,\n      0x6c0695ed, 0x1b01a57b,\
    \ 0x8208f4c1, 0xf50fc457,\n      0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c,\n\
    \      0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n      0x4db26158, 0x3ab551ce,\
    \ 0xa3bc0074, 0xd4bb30e2,\n      0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\n\
    \      0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,\n      0x44042d73, 0x33031de5,\
    \ 0xaa0a4c5f, 0xdd0d7cc9,\n      0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086,\n\
    \      0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n      0x5edef90e, 0x29d9c998,\
    \ 0xb0d09822, 0xc7d7a8b4,\n      0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\n\
    \      0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,\n      0xead54739, 0x9dd277af,\
    \ 0x04db2615, 0x73dc1683,\n      0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,\n\
    \      0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n      0xf00f9344, 0x8708a3d2,\
    \ 0x1e01f268, 0x6906c2fe,\n      0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\n\
    \      0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,\n      0xf9b9df6f, 0x8ebeeff9,\
    \ 0x17b7be43, 0x60b08ed5,\n      0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252,\n\
    \      0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n      0xd80d2bda, 0xaf0a1b4c,\
    \ 0x36034af6, 0x41047a60,\n      0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\n\
    \      0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n      0xcc0c7795, 0xbb0b4703,\
    \ 0x220216b9, 0x5505262f,\n      0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04,\n\
    \      0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n      0x9b64c2b0, 0xec63f226,\
    \ 0x756aa39c, 0x026d930a,\n      0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n\
    \      0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,\n      0x92d28e9b, 0xe5d5be0d,\
    \ 0x7cdcefb7, 0x0bdbdf21,\n      0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e,\n\
    \      0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n      0x88085ae6, 0xff0f6a70,\
    \ 0x66063bca, 0x11010b5c,\n      0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\n\
    \      0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,\n      0xa7672661, 0xd06016f7,\
    \ 0x4969474d, 0x3e6e77db,\n      0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0,\n\
    \      0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n      0xbdbdf21c, 0xcabac28a,\
    \ 0x53b39330, 0x24b4a3a6,\n      0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\n\
    \      0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,\n      0xb40bbe37, 0xc30c8ea1,\
    \ 0x5a05df1b, 0x2d02ef8d\n      };\n   #define PPPINITFCS32  0xffffffff   /* Initial\
    \ FCS value */\n   #define PPPGOODFCS32  0xdebb20e3   /* Good final FCS value\
    \ */\n   /*\n    * Calculate a new FCS given the current FCS and the new data.\n\
    \    */\n   u32 pppfcs32(fcs, cp, len)\n       register u32 fcs;\n       register\
    \ unsigned char *cp;\n       register int len;\n       {\n       ASSERT(sizeof\
    \ (u32) == 4);\n       ASSERT(((u32) -1) > 0);\n       while (len--)\n       \
    \    fcs = (((fcs) >> 8) ^ fcstab_32[((fcs) ^ (*cp++)) & 0xff]);\n       return\
    \ (fcs);\n       }\n   /*\n    * How to use the fcs\n    */\n   tryfcs32(cp, len)\n\
    \       register unsigned char *cp;\n       register int len;\n   {\n       u32\
    \ trialfcs;\n       /* add on output */\n       trialfcs = pppfcs32( PPPINITFCS32,\
    \ cp, len );\n       trialfcs ^= 0xffffffff;             /* complement */\n  \
    \     cp[len] = (trialfcs & 0x00ff);      /* Least significant byte first */\n\
    \       cp[len+1] = ((trialfcs >>= 8) & 0x00ff);\n       cp[len+2] = ((trialfcs\
    \ >>= 8) & 0x00ff);\n       cp[len+3] = ((trialfcs >> 8) & 0x00ff);\n       /*\
    \ check on input */\n       trialfcs = pppfcs32( PPPINITFCS32, cp, len + 4 );\n\
    \       if ( trialfcs == PPPGOODFCS32 )\n           printf(\"Good FCS\\n\");\n\
    \   }\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are briefly discussed in sections\
    \ concerning the\n   Callback Configuration Option.\n"
- title: References
  contents:
  - "References\n   [1]   Simpson, W., Editor, \"The Point-to-Point Protocol (PPP)\"\
    , RFC\n         1548, Daydreamer, December 1993.\n   [2]   Reynolds, J., and J.\
    \ Postel, \"Assigned Numbers\", STD 2, \n         RFC 1340, USC/Information Sciences\
    \ Institute, July 1992.\n   [3]   Simpson, W., Editor, \"PPP in HDLC Framing\"\
    , RFC 1549, \n         Daydreamer, December 1993.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The Identification feature was suggested by Bob Sutterfield\
    \ (Morning\n   Star Technologies).\n   The Time-Remaining feature was suggested\
    \ by Brad Parker (FCR).\n   Some of the original text for FCS-Alternatives was\
    \ provided by Arthur\n   Harvey (then of DEC).  The Null FCS was requested by\
    \ Peter Honeyman\n   (UMich).  The 32-bit FCS example code was provided by Karl\
    \ Fox\n   (Morning Star Technologies).\n   Self-Describing-Padding was suggested\
    \ and named by Fred Baker (ACC).\n   Compound-Frames was suggested by Keith Sklower\
    \ (Berkeley).\n   Special thanks to Morning Star Technologies for providing computing\n\
    \   resources and network access support for writing this specification.\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \      Fred Baker\n      Advanced Computer Communications\n      315 Bollay Drive\n\
    \      Santa Barbara, California  93117\n      EMail: fbaker@acc.com\n"
- title: Editor's Address
  contents:
  - "Editor's Address\n   Questions about this memo can also be directed to:\n   \
    \   William Allen Simpson\n      Daydreamer\n      Computer Systems Consulting\
    \ Services\n      1384 Fontaine\n      Madison Heights, Michigan  48071\n    \
    \  EMail: Bill.Simpson@um.cc.umich.edu\n             bsimpson@MorningStar.com\n"
