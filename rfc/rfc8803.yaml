- title: __initial_text__
  contents:
  - '                       0-RTT TCP Convert Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an application proxy, called Transport\n\
    \   Converter, to assist the deployment of TCP extensions such as\n   Multipath\
    \ TCP.  A Transport Converter may provide conversion service\n   for one or more\
    \ TCP extensions.  The conversion service is provided\n   by means of the 0-RTT\
    \ TCP Convert Protocol (Convert).\n   This protocol provides 0-RTT (Zero Round-Trip\
    \ Time) conversion\n   service since no extra delay is induced by the protocol\
    \ compared to\n   connections that are not proxied.  Also, the Convert Protocol\
    \ does\n   not require any encapsulation (no tunnels whatsoever).\n   This specification\
    \ assumes an explicit model, where the Transport\n   Converter is explicitly configured\
    \ on hosts.  As a sample\n   applicability use case, this document specifies how\
    \ the Convert\n   Protocol applies for Multipath TCP.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are candidates\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8803.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  The Problem\n     1.2.  Network-Assisted\
    \ Connections: The Rationale\n     1.3.  Applicability Scope\n   2.  Conventions\
    \ and Definitions\n   3.  Differences with SOCKSv5\n   4.  Architecture and Behaviors\n\
    \     4.1.  Functional Elements\n     4.2.  Theory of Operation\n     4.3.  Data\
    \ Processing at the Transport Converter\n     4.4.  Address Preservation vs. Address\
    \ Sharing\n       4.4.1.  Address Preservation\n       4.4.2.  Address/Prefix\
    \ Sharing\n   5.  Sample Examples\n     5.1.  Outgoing Converter-Assisted Multipath\
    \ TCP Connections\n     5.2.  Incoming Converter-Assisted Multipath TCP Connection\n\
    \   6.  The Convert Protocol (Convert)\n     6.1.  The Convert Fixed Header\n\
    \     6.2.  Convert TLVs\n       6.2.1.  Generic Convert TLV Format\n       6.2.2.\
    \  Summary of Supported Convert TLVs\n       6.2.3.  The Info TLV\n       6.2.4.\
    \  Supported TCP Extensions TLV\n       6.2.5.  Connect TLV\n       6.2.6.  Extended\
    \ TCP Header TLV\n       6.2.7.  The Cookie TLV\n       6.2.8.  Error TLV\n  \
    \ 7.  Compatibility of Specific TCP Options with the Conversion\n           Service\n\
    \     7.1.  Base TCP Options\n     7.2.  Window Scale (WS)\n     7.3.  Selective\
    \ Acknowledgments\n     7.4.  Timestamp\n     7.5.  Multipath TCP\n     7.6. \
    \ TCP Fast Open\n     7.7.  TCP-AO\n   8.  Interactions with Middleboxes\n   9.\
    \  Security Considerations\n     9.1.  Privacy & Ingress Filtering\n     9.2.\
    \  Authentication and Authorization Considerations\n     9.3.  Denial of Service\n\
    \     9.4.  Traffic Theft\n     9.5.  Logging\n   10. IANA Considerations\n  \
    \   10.1.  Convert Service Name\n     10.2.  The Convert Protocol (Convert) Parameters\n\
    \       10.2.1.  Convert Versions\n       10.2.2.  Convert TLVs\n       10.2.3.\
    \  Convert Error Messages\n   11. References\n     11.1.  Normative References\n\
    \     11.2.  Informative References\n   Appendix A.  Example Socket API Changes\
    \ to Support the 0-RTT TCP\n           Convert Protocol\n     A.1.  Active Open\
    \ (Client Side)\n     A.2.  Passive Open (Converter Side)\n   Acknowledgments\n\
    \   Contributors\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  The Problem
  contents:
  - "1.1.  The Problem\n   Transport protocols like TCP evolve regularly [RFC7414].\
    \  TCP has\n   been improved in different ways.  Some improvements such as changing\n\
    \   the initial window size [RFC6928] or modifying the congestion control\n  \
    \ scheme can be applied independently on Clients and Servers.  Other\n   improvements\
    \ such as Selective Acknowledgments [RFC2018] or large\n   windows [RFC7323] require\
    \ a new TCP option or changing the semantics\n   of some fields in the TCP header.\
    \  These modifications must be\n   deployed on both Clients and Servers to be\
    \ actually used on the\n   Internet.  Experience with the latter class of TCP\
    \ extensions reveals\n   that their deployment can require many years.  Fukuda\
    \ reports in\n   [Fukuda2011] results of a decade of measurements showing the\n\
    \   deployment of Selective Acknowledgments, Window Scale, and TCP\n   Timestamps.\
    \  [ANRW17] describes measurements showing that TCP Fast\n   Open (TFO) [RFC7413]\
    \ is still not widely deployed.\n   There are some situations where the transport\
    \ stack used on Clients\n   (or Servers) can be upgraded at a faster pace than\
    \ the transport\n   stack running on Servers (or Clients).  In those situations,\
    \ Clients\n   (or Servers) would typically want to benefit from the features of\
    \ an\n   improved transport protocol even if the Servers (or Clients) have not\n\
    \   yet been upgraded.  Some assistance from the network to make use of\n   these\
    \ features is valuable.  For example, Performance Enhancing\n   Proxies [RFC3135]\
    \ and other service functions have been deployed as\n   solutions to improve TCP\
    \ performance over links with specific\n   characteristics.\n   Recent examples\
    \ of TCP extensions include Multipath TCP (MPTCP)\n   [RFC8684] or tcpcrypt [RFC8548].\
    \  Those extensions provide features\n   that are interesting for Clients such\
    \ as wireless devices.  With\n   Multipath TCP, those devices could seamlessly\
    \ use Wireless Local Area\n   Network (WLAN) and cellular networks for bonding\
    \ purposes, faster\n   hand-overs, or better resiliency.  Unfortunately, deploying\
    \ those\n   extensions on both a wide range of Clients and Servers remains\n \
    \  difficult.\n   More recently, 5G bonding experimentation has been conducted\
    \ into\n   global range of the incumbent 4G (LTE) connectivity using newly\n \
    \  devised Clients and a Multipath TCP proxy.  Even if the 5G and 4G\n   bonding\
    \ (that relies upon Multipath TCP) increases the bandwidth, it\n   is also crucial\
    \ to minimize latency entirely between end hosts\n   regardless of whether intermediate\
    \ nodes are inside or outside of the\n   mobile core.  In order to handle Ultra-Reliable\
    \ Low Latency\n   Communication (URLLC) for the next-generation mobile network,\n\
    \   Multipath TCP and its proxy mechanism such as the one used to provide\n  \
    \ Access Traffic Steering, Switching, and Splitting (ATSSS) must be\n   optimized\
    \ to reduce latency [TS23501].\n"
- title: '1.2.  Network-Assisted Connections: The Rationale'
  contents:
  - "1.2.  Network-Assisted Connections: The Rationale\n   This document specifies\
    \ an application proxy called Transport\n   Converter.  A Transport Converter\
    \ is a function that is installed by\n   a network operator to aid the deployment\
    \ of TCP extensions and to\n   provide the benefits of such extensions to Clients\
    \ in particular.  A\n   Transport Converter may provide conversion service for\
    \ one or more\n   TCP extensions.  Which TCP extensions are eligible for the conversion\n\
    \   service is deployment specific.  The conversion service is provided\n   by\
    \ means of the 0-RTT TCP Convert Protocol (Convert), which is an\n   application-layer\
    \ protocol that uses a specific TCP port number on\n   the Converter.\n   The\
    \ Convert Protocol provides Zero Round-Trip Time (0-RTT) conversion\n   service\
    \ since no extra delay is induced by the protocol compared to\n   connections\
    \ that are not proxied.  Particularly, the Convert Protocol\n   does not require\
    \ extra signaling setup delays before making use of\n   the conversion service.\
    \  The Convert Protocol does not require any\n   encapsulation (no tunnels, whatsoever).\n\
    \   The Transport Converter adheres to the main steps drawn in Section 3\n   of\
    \ [RFC1919].  In particular, a Transport Converter achieves the\n   following:\n\
    \   *  Listening for Client sessions;\n   *  Receiving the address of the Server\
    \ from the Client;\n   *  Setting up a session to the Server;\n   *  Relaying\
    \ control messages and data between the Client and the\n      Server;\n   *  Performing\
    \ access controls according to local policies.\n   The main advantage of network-assisted\
    \ conversion services is that\n   they enable new TCP extensions to be used on\
    \ a subset of the path\n   between endpoints, which encourages the deployment\
    \ of these\n   extensions.  Furthermore, the Transport Converter allows the Client\n\
    \   and the Server to directly negotiate TCP extensions for the sake of\n   native\
    \ support along the full path.\n   The Convert Protocol is a generic mechanism\
    \ to provide 0-RTT\n   conversion service.  As a sample applicability use case,\
    \ this\n   document specifies how the Convert Protocol applies for Multipath\n\
    \   TCP.  It is out of scope of this document to provide a comprehensive\n   list\
    \ of all potential conversion services.  Applicability documents\n   may be defined\
    \ in the future.\n   This document does not assume that all the traffic is eligible\
    \ for\n   the network-assisted conversion service.  Only a subset of the\n   traffic\
    \ will be forwarded to a Transport Converter according to a set\n   of policies.\
    \  These policies, and how they are communicated to\n   endpoints, are out of\
    \ scope.  Furthermore, it is possible to bypass\n   the Transport Converter to\
    \ connect directly to the Servers that\n   already support the required TCP extension(s).\n\
    \   This document assumes an explicit model in which a Client is\n   configured\
    \ with one or a list of Transport Converters (statically or\n   through protocols\
    \ such as [DHC-CONVERTER]).  Configuration means are\n   outside the scope of\
    \ this document.\n   The use of a Transport Converter means that there is no end-to-end\n\
    \   transport connection between the Client and Server.  This could\n   potentially\
    \ create problems in some scenarios such as those discussed\n   in Section 4 of\
    \ [RFC3135].  Some of these problems may not be\n   applicable.  For example,\
    \ a Transport Converter can inform a Client\n   by means of Network Failure (65)\
    \ or Destination Unreachable (97)\n   error messages (Section 6.2.8) that it encounters\
    \ a failure problem;\n   the Client can react accordingly.  An endpoint, or its\
    \ network\n   administrator, can assess the benefit provided by the Transport\n\
    \   Converter service versus the risk.  This is one reason why the\n   Transport\
    \ Converter functionality has to be explicitly requested by\n   an endpoint.\n\
    \   This document is organized as follows:\n      Section 3 provides a brief overview\
    \ of the differences between the\n      well-known SOCKS protocol and the 0-RTT\
    \ TCP Convert Protocol.\n      Section 4 provides a brief explanation of the operation\
    \ of\n      Transport Converters.\n      Section 5 includes a set of sample examples\
    \ to illustrate the\n      overall behavior.\n      Section 6 describes the Convert\
    \ Protocol.\n      Section 7 discusses how Transport Converters can be used to\n\
    \      support different TCP extensions.\n      Section 8 then discusses the interactions\
    \ with middleboxes.\n      Section 9 focuses on security considerations.\n   \
    \   Appendix A describes how a TCP stack would need to support the\n      protocol\
    \ described in this document.\n"
- title: 1.3.  Applicability Scope
  contents:
  - "1.3.  Applicability Scope\n   The 0-RTT TCP Convert Protocol specified in this\
    \ document MUST be\n   used in a single administrative domain deployment model.\
    \  That is,\n   the entity offering the connectivity service to a Client is also\
    \ the\n   entity that owns and operates the Transport Converter, with no\n   transit\
    \ over a third-party network.\n   Future deployment of Transport Converters by\
    \ third parties MUST\n   adhere to the mutual authentication requirements in Section\
    \ 9.2 to\n   prevent illegitimate traffic interception (Section 9.4) in\n   particular.\n"
- title: 2.  Conventions and Definitions
  contents:
  - "2.  Conventions and Definitions\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,\
    \ they appear in all\n   capitals, as shown here.\n"
- title: 3.  Differences with SOCKSv5
  contents:
  - "3.  Differences with SOCKSv5\n   Several IETF protocols provide proxy services,\
    \ the closest to the\n   0-RTT TCP Convert Protocol being the SOCKSv5 protocol\
    \ [RFC1928].\n   This protocol is already used to deploy Multipath TCP in some\n\
    \   cellular networks (Section 2.2 of [RFC8041]).\n   A SOCKS Client creates a\
    \ connection to a SOCKS Proxy, exchanges\n   authentication information, and indicates\
    \ the IP address and port\n   number of the target Server.  At this point, the\
    \ SOCKS Proxy creates\n   a connection towards the target Server and relays all\
    \ data between\n   the two proxied connections.  The operation of an implementation\n\
    \   based on SOCKSv5 (without authentication) is illustrated in Figure 1.\n  \
    \ Client                SOCKS Proxy               Server\n      |         SYN\
    \           |                       |\n      |       SYN+ACK         |       \
    \                |\n      |         ACK           |                       |\n\
    \      |Version=5, Auth Methods|                       |\n      |       Method\
    \          |                       |\n      |Auth Request (unless \"No auth\"\
    \ method negotiated)\n      |     Auth Response     |                       |\n\
    \      | Connect Server:Port   | --------------------> |\n      |      Succeeded\
    \        |                       |\n      |       Data1           |          \
    \             |\n      |          Data2        |                       |\n   \
    \  Figure 1: Establishment of a TCP Connection through a SOCKS Proxy\n       \
    \                    without Authentication\n   When SOCKS is used, an \"end-to-end\"\
    \ connection between a Client and a\n   Server becomes a sequence of two TCP connections\
    \ that are glued\n   together on the SOCKS Proxy.  The SOCKS Client and Server\
    \ exchange\n   control information at the beginning of the bytestream on the Client-\n\
    \   Proxy connection.  The SOCKS Proxy then creates the connection with\n   the\
    \ target Server and then glues the two connections together so that\n   all bytes\
    \ sent by the application (Client) to the SOCKS Proxy are\n   relayed to the Server\
    \ and vice versa.\n   The Convert Protocol is also used on TCP proxies that relay\
    \ data\n   between an upstream and a downstream connection, but there are\n  \
    \ important differences with SOCKSv5.  A first difference is that the\n   0-RTT\
    \ TCP Convert Protocol exchanges all the control information\n   during the initial\
    \ RTT.  This reduces the connection establishment\n   delay compared to SOCKS,\
    \ which requires two or more round-trip times\n   before the establishment of\
    \ the downstream connection towards the\n   final destination.  In today's Internet,\
    \ latency is an important\n   metric, and various protocols have been tuned to\
    \ reduce their latency\n   [LOW-LATENCY].  A recently proposed extension to SOCKS\
    \ leverages the\n   TCP Fast Open (TFO) option [INTAREA-SOCKS] to reduce this\
    \ delay.\n   A second difference is that the Convert Protocol explicitly takes\
    \ the\n   TCP extensions into account.  By using the Convert Protocol, the\n \
    \  Client can learn whether a given TCP extension is supported by the\n   destination\
    \ Server.  This enables the Client to bypass the Transport\n   Converter when\
    \ the Server supports the required TCP extension(s).\n   Neither SOCKSv5 [RFC1928]\
    \ nor the proposed SOCKSv6 [INTAREA-SOCKS]\n   provide such a feature.\n   A third\
    \ difference is that a Transport Converter will only confirm\n   the establishment\
    \ of the connection initiated by the Client provided\n   that the downstream connection\
    \ has already been accepted by the\n   Server.  If the Server refuses the connection\
    \ establishment attempt\n   from the Transport Converter, then the upstream connection\
    \ from the\n   Client is rejected as well.  This feature is important for\n  \
    \ applications that check the availability of a Server or use the time\n   to\
    \ connect as a hint on the selection of a Server [RFC8305].\n   A fourth difference\
    \ is that the 0-RTT TCP Convert Protocol only\n   allows the Client to specify\
    \ the IP address/port number of the\n   destination Server and not a DNS name.\
    \  We evaluated an alternate\n   design that included the DNS name of the remote\
    \ peer instead of its\n   IP address as in SOCKS [RFC1928].  However, that design\
    \ was not\n   adopted because it induces both an extra load and increased delays\
    \ on\n   the Transport Converter to handle and manage DNS resolution requests.\n\
    \   Note that the name resolution at the Converter may fail (e.g.,\n   private\
    \ names discussed in Section 2.1 of [RFC6731]) or may not match\n   the one that\
    \ would be returned by a Client's resolution library\n   (e.g., Section 2.2 of\
    \ [RFC6731]).\n"
- title: 4.  Architecture and Behaviors
  contents:
  - '4.  Architecture and Behaviors

    '
- title: 4.1.  Functional Elements
  contents:
  - "4.1.  Functional Elements\n   The Convert Protocol considers three functional\
    \ elements:\n   *  Clients\n   *  Transport Converters\n   *  Servers\n   A Transport\
    \ Converter is a network function that proxies all data\n   exchanged over one\
    \ upstream connection to one downstream connection\n   and vice versa (Figure\
    \ 2).  Thus, the Transport Converter maintains\n   state that associates one upstream\
    \ connection to a corresponding\n   downstream connection.\n   A connection can\
    \ be initiated from both sides of the Transport\n   Converter (External realm,\
    \ Internal realm).\n   Client <- upstream ->| Transport  |<- downstream -> Server\n\
    \            connection  | Converter  |   connection\n               Internal\
    \ realm : External realm\n     Figure 2: A Transport Converter Proxies Data between\
    \ Pairs of TCP\n   \"Client\" refers to a software instance embedded on a host\
    \ that can\n   reach a Transport Converter in the internal realm.  The \"Client\"\
    \ can\n   initiate connections via a Transport Converter (referred to as\n   outgoing\
    \ connections).  Also, the \"Client\" can accept incoming\n   connections via\
    \ a Transport Converter (referred to as incoming\n   connections).\n   A Transport\
    \ Converter can be embedded in a standalone device or be\n   activated as a service\
    \ on a router.  How such a function is enabled\n   is deployment specific.\n \
    \  The architecture assumes that new software will be installed on the\n   Client\
    \ hosts to interact with one or more Transport Converters.\n   Furthermore, the\
    \ architecture allows for making use of new TCP\n   extensions even if those are\
    \ not supported by a given Server.\n   A Client is configured, through means that\
    \ are outside the scope of\n   this document, with the names and/or addresses\
    \ of one or more\n   Transport Converters and the TCP extensions that they support.\
    \  The\n   procedure for selecting a Transport Converter among a list of\n   configured\
    \ Transport Converters is outside the scope of this\n   document.\n   One of the\
    \ benefits of this design is that different transport\n   protocol extensions\
    \ can be used on the upstream and the downstream\n   connections.  This encourages\
    \ the deployment of new TCP extensions\n   until they are widely supported, in\
    \ particular, by Servers.\n   The architecture does not mandate anything on the\
    \ Server side.\n   Similar to SOCKS, the architecture does not interfere with\
    \ end-to-end\n   TLS connections [RFC8446] between the Client and the Server\n\
    \   (Figure 3).  In other words, end-to-end TLS is supported in the\n   presence\
    \ of a Converter.\n       Client             Transport                Server\n\
    \          |               Converter                  |\n         |          \
    \  End-to-end TLS                  |\n       * TLS messages exchanged between\
    \ the Client\n         and the Server are not shown.\n             Figure 3: End-to-end\
    \ TLS via a Transport Converter\n   It is out of scope of this document to elaborate\
    \ on specific\n   considerations related to the use of TLS in the Client-Converter\n\
    \   connection leg to exchange Convert messages (in addition to the end-\n   to-end\
    \ TLS connection).  In particular, (1) assessment of whether\n   0-RTT data mode\
    \ discussed in Section 2.3 of [RFC8446] is safe under\n   replay and (2) specification\
    \ of a profile for its use (Appendix E.5\n   of [RFC8446]) are out of scope.\n"
- title: 4.2.  Theory of Operation
  contents:
  - "4.2.  Theory of Operation\n   At a high level, the objective of the Transport\
    \ Converter is to allow\n   the use a specific extension, e.g., Multipath TCP,\
    \ on a subset of the\n   path even if the peer does not support this extension.\
    \  This is\n   illustrated in Figure 4 where the Client initiates a Multipath\
    \ TCP\n   connection with the Transport Converter (packets belonging to the\n\
    \   Multipath TCP connection are shown with \"===\") while the Transport\n   Converter\
    \ uses a TCP connection with the Server.\n       Client             Transport\
    \                Server\n          |               Converter                 \
    \ |\n         Multipath TCP packets     TCP packets\n       Figure 4: An Example\
    \ of 0-RTT Network-Assisted Outgoing MPTCP\n   The packets belonging to a connection\
    \ established through a Transport\n   Converter may follow a different path than\
    \ the packets directly\n   exchanged between the Client and the Server.  Deployments\
    \ should\n   minimize the possible additional delay by carefully selecting the\n\
    \   location of the Transport Converter used to reach a given\n   destination.\n\
    \   When establishing a connection, the Client can, depending on local\n   policies,\
    \ either contact the Server directly (e.g., by sending a TCP\n   SYN towards the\
    \ Server) or create the connection via a Transport\n   Converter.  In the latter\
    \ case (that is, the conversion service is\n   used), the Client initiates a connection\
    \ towards the Transport\n   Converter and indicates the IP address and port number\
    \ of the Server\n   within the connection establishment packet.  Doing so enables\
    \ the\n   Transport Converter to immediately initiate a connection towards that\n\
    \   Server without experiencing an extra delay.  The Transport Converter\n   waits\
    \ until the receipt of the confirmation that the Server agrees to\n   establish\
    \ the connection before confirming it to the Client.\n   The Client places the\
    \ destination address and port number of the\n   Server in the payload of the\
    \ SYN sent to the Transport Converter to\n   minimize connection establishment\
    \ delays.  The Transport Converter\n   maintains two connections that are combined\
    \ together:\n   *  The upstream connection is the one between the Client and the\n\
    \      Transport Converter.\n   *  The downstream connection is the one between\
    \ the Transport\n      Converter and the Server.\n   Any user data received by\
    \ the Transport Converter over the upstream\n   (or downstream) connection is\
    \ proxied over the downstream (or\n   upstream) connection.\n   Figure 5 illustrates\
    \ the establishment of an outgoing TCP connection\n   by a Client through a Transport\
    \ Converter.\n      |  Note: The information shown between brackets in Figure\
    \ 5 (and\n      |  other figures in the document) refers to Convert Protocol\n\
    \      |  messages described in Section 6.\n                           Transport\n\
    \       Client              Converter              Server\n          |SYN [->Server:port]|\
    \         SYN          |\n          |    SYN+ACK [ ]    |        SYN+ACK     \
    \  |\n      Figure 5: Establishment of an Outgoing TCP Connection through a\n\
    \                            Transport Converter\n   The Client sends a SYN destined\
    \ to the Transport Converter.  The\n   payload of this SYN contains the address\
    \ and port number of the\n   Server.  The Transport Converter does not reply immediately\
    \ to this\n   SYN.  It first tries to create a TCP connection towards the target\n\
    \   Server.  If this upstream connection succeeds, the Transport\n   Converter\
    \ confirms the establishment of the connection to the Client\n   by returning\
    \ a SYN+ACK and the first bytes of the bytestream contain\n   information about\
    \ the TCP options that were negotiated with the\n   Server.  Also, a state entry\
    \ is instantiated for this connection.\n   This state entry is used by the Converter\
    \ to handle subsequent\n   messages belonging to the connection.\n   The connection\
    \ can also be established from the Internet towards a\n   Client via a Transport\
    \ Converter (Figure 6).  This is typically the\n   case when the Client hosts\
    \ an application Server that listens to a\n   specific port number.  When the\
    \ Converter receives an incoming SYN\n   from a remote host, it checks if it can\
    \ provide the conversion\n   service for the destination IP address and destination\
    \ port number of\n   that SYN.  The Transport Converter receives this SYN because\
    \ it is,\n   for example, on the path between the remote host and the Client or\
    \ it\n   provides address-sharing service for the Client (Section 2 of\n   [RFC6269]).\
    \  If the check fails, the packet is silently ignored by\n   the Converter.  If\
    \ the check is successful, the Converter tries to\n   initiate a TCP connection\
    \ towards the Client from its own address and\n   using its configured TCP options.\
    \  In the SYN that corresponds to\n   this connection attempt, the Transport Convert\
    \ inserts a TLV message\n   that indicates the source address and port number\
    \ of the remote host.\n   A transport session entry is created by the Converter\
    \ for this\n   connection.  SYN+ACK and ACK will then be exchanged between the\n\
    \   Client, the Converter, and remote host to confirm the establishment\n   of\
    \ the connection.  The Converter uses the transport session entry to\n   proxy\
    \ packets belonging to the connection.\n     Transport              Remote\n \
    \      Client              Converter             Host (RH)\n          |SYN [<-RH\
    \ IP@:port]|         SYN          |\n          |    SYN+ACK [ ]    |        SYN+ACK\
    \       |\n      Figure 6: Establishment of an Incoming TCP Connection through\
    \ a\n                            Transport Converter\n   Standard TCP (Section\
    \ 3.4 of [RFC0793]) allows a SYN packet to carry\n   data inside its payload but\
    \ forbids the receiver from delivering it\n   to the application until completion\
    \ of the three-way-handshake.  To\n   enable applications to exchange data in\
    \ a TCP handshake, this\n   specification follows an approach similar to TCP Fast\
    \ Open [RFC7413]\n   and thus, removes the constraint by allowing data in SYN\
    \ packets to\n   be delivered to the Transport Converter application.\n   As discussed\
    \ in [RFC7413], such change to TCP semantics raises two\n   issues.  First, duplicate\
    \ SYNs can cause problems for applications\n   that rely on TCP; whether or not\
    \ a given application is affected\n   depends on the details of that application\
    \ protocol.  Second, TCP\n   suffers from SYN flooding attacks [RFC4987].  TFO\
    \ solves these two\n   problems for applications that can tolerate replays by\
    \ using the TCP\n   Fast Open option that includes a cookie.  However, the utilization\
    \ of\n   this option consumes space in the limited TCP header.  Furthermore,\n\
    \   there are situations, as noted in Section 7.3 of [RFC7413], where it\n   is\
    \ possible to accept the payload of SYN packets without creating\n   additional\
    \ security risks such as a network where addresses cannot be\n   spoofed and the\
    \ Transport Converter only serves a set of hosts that\n   are identified by these\
    \ addresses.\n   For these reasons, this specification does not mandate the use\
    \ of the\n   TCP Fast Open option when the Client sends a connection establishment\n\
    \   packet towards a Transport Converter.  The Convert Protocol includes\n   an\
    \ optional Cookie TLV that provides similar protection as the TCP\n   Fast Open\
    \ option without consuming space in the TCP header.\n   Furthermore, this design\
    \ allows for the use of longer cookies than\n   [RFC7413].\n   If the downstream\
    \ (or upstream) connection fails for some reason\n   (excessive retransmissions,\
    \ reception of an RST segment, etc.), then\n   the Converter reacts by forcing\
    \ the teardown of the upstream (or\n   downstream) connection.  In particular,\
    \ if an ICMP error message that\n   indicates a hard error is received on the\
    \ downstream connection, the\n   Converter echoes the Code field of that ICMP\
    \ message in a Destination\n   Unreachable Error TLV (see Section 6.2.8) that\
    \ it transmits to the\n   Client.  Note that if an ICMP error message that indicates\
    \ a soft\n   error is received on the downstream connection, the Converter will\n\
    \   retransmit the corresponding data until it is acknowledged or the\n   connection\
    \ times out.  A classification of ICMP soft and hard errors\n   is provided in\
    \ Table 1 of [RFC5461].\n   The same reasoning applies when the upstream connection\
    \ ends with an\n   exchange of FIN segments.  In this case, the Converter will\
    \ also\n   terminate the downstream connection by using FIN segments.  If the\n\
    \   downstream connection terminates with the exchange of FIN segments,\n   the\
    \ Converter should initiate a graceful termination of the upstream\n   connection.\n"
- title: 4.3.  Data Processing at the Transport Converter
  contents:
  - "4.3.  Data Processing at the Transport Converter\n   As mentioned in Section\
    \ 4.2, the Transport Converter acts as a TCP\n   proxy between the upstream connection\
    \ (i.e., between the Client and\n   the Transport Converter) and the downstream\
    \ connection (i.e., between\n   the Transport Converter and the Server).\n   The\
    \ control messages (i.e., the Convert messages discussed in\n   Section 6) establish\
    \ state (called transport session entry) in the\n   Transport Converter that will\
    \ enable it to proxy between the two TCP\n   connections.\n   The Transport Converter\
    \ uses the transport session entry to proxy\n   packets belonging to the connection.\
    \  An implementation example of a\n   transport session entry for TCP connections\
    \ is shown in Figure 7.\n                      (C,c) <--> (T,t), (S,s), Lifetime\n\
    \              Figure 7: An Example of Transport Session Entry\n   Where:\n  \
    \ *  C and c are the source IP address and source port number used by\n      the\
    \ Client for the upstream connection.\n   *  S and s are the Server's IP address\
    \ and port number.\n   *  T and t are the source IP address and source port number\
    \ used by\n      the Transport Converter to proxy the connection.\n   *  Lifetime\
    \ is a timer that tracks the remaining lifetime of the\n      entry as assigned\
    \ by the Converter.  When the timer expires, the\n      entry is deleted.\n  \
    \ Clients send packets bound to connections eligible for the conversion\n   service\
    \ to the provisioned Transport Converter and destination port\n   number.  This\
    \ applies for both control messages and data.  Additional\n   information is supplied\
    \ by Clients to the Transport Converter by\n   means of Convert messages as detailed\
    \ in Section 6.  User data can be\n   included in SYN or non-SYN messages.  User\
    \ data is unambiguously\n   distinguished from Convert TLVs by a Transport Converter\
    \ owing to the\n   Convert Fixed Header in the Convert messages (Section 6.1).\
    \  These\n   Convert TLVs are destined to the Transport Convert and are, thus,\n\
    \   removed by the Transport Converter when proxying between the two\n   connections.\n\
    \   Upon receipt of a packet that belongs to an existing connection\n   between\
    \ a Client and the Transport Converter, the Converter proxies\n   the user data\
    \ to the Server using the information stored in the\n   corresponding transport\
    \ session entry.  For example, in reference to\n   Figure 7, the Transport Converter\
    \ proxies the data received from\n   (C,c) downstream using (T,t) as source transport\
    \ address and (S,s) as\n   destination transport address.\n   A similar process\
    \ happens for data sent from the Server.  The\n   Converter acts as a TCP proxy\
    \ and sends the data to the Client\n   relying upon the information stored in\
    \ a transport session entry.\n   The Converter associates a lifetime with state\
    \ entries used to bind\n   an upstream connection with its downstream connection.\n\
    \   When Multipath TCP is used between the Client and the Transport\n   Converter,\
    \ the Converter maintains more state (e.g., information\n   about the subflows)\
    \ for each Multipath TCP connection.  The procedure\n   described above continues\
    \ to apply except that the Converter needs to\n   manage the establishment/termination\
    \ of subflows and schedule packets\n   among the established ones.  These operations\
    \ are part of the\n   Multipath TCP implementation.  They are independent of the\
    \ Convert\n   Protocol that only processes the Convert messages in the beginning\
    \ of\n   the bytestream.\n   A Transport Converter may operate in address preservation\
    \ mode (that\n   is, the Converter does not rewrite the source IP address (i.e.,\n\
    \   C==T)) or address-sharing mode (that is, an address pool is shared\n   among\
    \ all Clients serviced by the Converter (i.e., C!=T)); refer to\n   Section 4.4\
    \ for more details.  Which behavior to use by a Transport\n   Converter is deployment\
    \ specific.  If address-sharing mode is\n   enabled, the Transport Converter MUST\
    \ adhere to REQ-2 of [RFC6888],\n   which implies a default \"IP address pooling\"\
    \ behavior of \"Paired\" (as\n   defined in Section 4.1 of [RFC4787]) MUST be\
    \ supported.  This\n   behavior is meant to avoid breaking applications that depend\
    \ on the\n   source address remaining constant.\n"
- title: 4.4.  Address Preservation vs. Address Sharing
  contents:
  - "4.4.  Address Preservation vs. Address Sharing\n   The Transport Converter is\
    \ provided with instructions about the\n   behavior to adopt with regard to the\
    \ processing of source addresses\n   of outgoing packets.  The following subsections\
    \ discuss two\n   deployment models for illustration purposes.  It is out of the\
    \ scope\n   of this document to make a recommendation.\n"
- title: 4.4.1.  Address Preservation
  contents:
  - "4.4.1.  Address Preservation\n   In this model, the visible source IP address\
    \ of a packet proxied by a\n   Transport Converter to a Server is an IP address\
    \ of the end host\n   (Client).  No dedicated IP address pool is provisioned to\
    \ the\n   Transport Converter, but the Transport Converter is located on the\n\
    \   path between the Client and the Server.\n   For Multipath TCP, the Transport\
    \ Converter preserves the source IP\n   address used by the Client when establishing\
    \ the initial subflow.\n   Data conveyed in secondary subflows will be proxied\
    \ by the Transport\n   Converter using the source IP address of the initial subflow.\
    \  An\n   example of a proxied Multipath TCP connection with address\n   preservation\
    \ is shown in Figure 8.\n          Client                        Converter   \
    \       Server\n           @:C1,C2                        @:Tc               \
    \ @:S\n              |src:C1     SYN         dst:Tc|src:C1       dst:S|\n    \
    \          |-------MPC [->S:port]------->|-------SYN------->|\n              ||dst:C1\
    \                src:Tc|dst:C1       src:S|\n              |<---------SYN/ACK------------|<-----SYN/ACK-----|\n\
    \              |src:C1                 dst:Tc|src:C1       dst:S|\n          \
    \    |------------ACK------------->|-------ACK------->|\n              |src:C2\
    \          ...    dst:Tc|       ...        |\n              ||<-----Secondary\
    \ Subflow---->|src:C1       dst:S|\n   Legend:\n     Tc: IP address used by the\
    \ Transport Converter on the internal\n         realm.\n                 Figure\
    \ 8: Example of Address Preservation\n   The Transport Converter must be on the\
    \ forwarding path of incoming\n   traffic.  Because the same (destination) IP\
    \ address is used for both\n   proxied and non-proxied connections, the Transport\
    \ Converter should\n   not drop incoming packets it intercepts if no matching\
    \ entry is found\n   for the packets.  Unless explicitly configured otherwise,\
    \ such\n   packets are forwarded according to the instructions of a local\n  \
    \ forwarding table.\n"
- title: 4.4.2.  Address/Prefix Sharing
  contents:
  - "4.4.2.  Address/Prefix Sharing\n   A pool of global IPv4 addresses is provisioned\
    \ to the Transport\n   Converter along with possible instructions about the address-sharing\n\
    \   ratio to apply (see Appendix B of [RFC6269]).  An address is thus\n   shared\
    \ among multiple Clients.\n   Likewise, rewriting the source IPv6 prefix [RFC6296]\
    \ may be used to\n   ease redirection of incoming IPv6 traffic towards the appropriate\n\
    \   Transport Converter.  A pool of IPv6 prefixes is then provisioned to\n   the\
    \ Transport Converter for this purpose.\n   Adequate forwarding policies are enforced\
    \ so that traffic destined to\n   an address of such a pool is intercepted by\
    \ the appropriate Transport\n   Converter.  Unlike Section 4.4.1, the Transport\
    \ Converter drops\n   incoming packets that do not match an active transport session\
    \ entry.\n   An example is shown in Figure 9.\n         Client               \
    \          Converter          Server\n            @:C                        @:Tc|Te\
    \                @:S\n             |src:C                  dst:Tc|src:Te     \
    \  dst:S|\n             |-------SYN [->S:port]------->|-------SYN------->|\n \
    \            |dst:C                  src:Tc|dst:Te       src:S|\n            \
    \ |<---------SYN/ACK------------|<-----SYN/ACK-----|\n             |src:C    \
    \              dst:Tc|src:Te       dst:S|\n             |------------ACK------------->|-------ACK------->|\n\
    \   Legend:\n     Tc: IP address used by the Transport Converter on the internal\n\
    \         realm.\n     Te: IP address used by the Transport Converter on the external\n\
    \         realm.\n                         Figure 9: Address Sharing\n"
- title: 5.  Sample Examples
  contents:
  - '5.  Sample Examples

    '
- title: 5.1.  Outgoing Converter-Assisted Multipath TCP Connections
  contents:
  - "5.1.  Outgoing Converter-Assisted Multipath TCP Connections\n   As an example,\
    \ let us consider how the Convert Protocol can help the\n   deployment of Multipath\
    \ TCP.  We assume that both the Client and the\n   Transport Converter support\
    \ Multipath TCP but consider two different\n   cases depending on whether or not\
    \ the Server supports Multipath TCP.\n   As a reminder, a Multipath TCP connection\
    \ is created by placing the\n   MP_CAPABLE (MPC) option in the SYN sent by the\
    \ Client.\n   Figure 10 describes the operation of the Transport Converter if\
    \ the\n   Server does not support Multipath TCP.\n                           Transport\n\
    \       Client              Converter              Server\n          |SYN, MPC\
    \           |                      |\n          |[->Server:port]    |        \
    \ SYN, MPC     |\n          |  SYN+ACK,MPC [.]  |      SYN+ACK         |\n   \
    \       |     ACK, MPC      |          ACK         |\n      Figure 10: Establishment\
    \ of a Multipath TCP Connection through a\n         Transport Converter towards\
    \ a Server That Does Not support\n                               Multipath TCP\n\
    \   The Client tries to initiate a Multipath TCP connection by sending a\n   SYN\
    \ with the MP_CAPABLE option (MPC in Figure 10).  The SYN includes\n   the address\
    \ and port number of the target Server, that are extracted\n   and used by the\
    \ Transport Converter to initiate a Multipath TCP\n   connection towards this\
    \ Server.  Since the Server does not support\n   Multipath TCP, it replies with\
    \ a SYN+ACK that does not contain the\n   MP_CAPABLE option.  The Transport Converter\
    \ notes that the connection\n   with the Server does not support Multipath TCP\
    \ and returns the\n   extended TCP header received from the Server to the Client.\n\
    \   Note that, if the TCP connection is reset for some reason, the\n   Converter\
    \ tears down the Multipath TCP connection by transmitting an\n   MP_FASTCLOSE.\
    \  Likewise, if the Multipath TCP connection ends with\n   the transmission of\
    \ DATA_FINs, the Converter terminates the TCP\n   connection by using FIN segments.\
    \  As a side note, given that with\n   Multipath TCP, RST only has the scope of\
    \ the subflow and will only\n   close the concerned subflow but not affect the\
    \ remaining subflows,\n   the Converter does not terminate the downstream TCP\
    \ connection upon\n   receipt of an RST over a Multipath subflow.\n   Figure 11\
    \ considers a Server that supports Multipath TCP.  In this\n   case, it replies\
    \ to the SYN sent by the Transport Converter with the\n   MP_CAPABLE option. \
    \ Upon reception of this SYN+ACK, the Transport\n   Converter confirms the establishment\
    \ of the connection to the Client\n   and indicates to the Client that the Server\
    \ supports Multipath TCP.\n   With this information, the Client has discovered\
    \ that the Server\n   supports Multipath TCP.  This will enable the Client to\
    \ bypass the\n   Transport Converter for the subsequent Multipath TCP connections\
    \ that\n   it will initiate towards this Server.\n                           Transport\n\
    \       Client              Converter              Server\n          |SYN, MPC\
    \           |                      |\n          |[->Server:port]    |        \
    \ SYN, MPC     |\n          |SYN+ACK, MPC       |      SYN+ACK, MPC    |\n   \
    \       |[MPC supported]    |                      |\n          |     ACK, MPC\
    \      |        ACK, MPC      |\n      Figure 11: Establishment of a Multipath\
    \ TCP Connection through a\n                 Converter towards an MPTCP-Capable\
    \ Server\n"
- title: 5.2.  Incoming Converter-Assisted Multipath TCP Connection
  contents:
  - "5.2.  Incoming Converter-Assisted Multipath TCP Connection\n   An example of\
    \ an incoming Converter-assisted Multipath TCP connection\n   is depicted in Figure\
    \ 12.  In order to support incoming connections\n   from remote hosts, the Client\
    \ may use the Port Control Protocol (PCP)\n   [RFC6887] to instruct the Transport\
    \ Converter to create dynamic\n   mappings.  Those mappings will be used by the\
    \ Transport Converter to\n   intercept an incoming TCP connection destined to\
    \ the Client and\n   convert it into a Multipath TCP connection.\n   Typically,\
    \ the Client sends a PCP request to the Converter asking to\n   create an explicit\
    \ TCP mapping for the internal IP address and\n   internal port number.  The Converter\
    \ accepts the request by creating\n   a TCP mapping for the internal IP address,\
    \ internal port number,\n   external IP address, and external port number.  The\
    \ external IP\n   address, external port number, and assigned lifetime are returned\n\
    \   back to the Client in the PCP response.  The external IP address and\n   external\
    \ port number will then be advertised by the Client (or the\n   user) using an\
    \ out-of-band mechanism so that remote hosts can\n   initiate TCP connections\
    \ to the Client via the Converter.  Note that\n   the external and internal information\
    \ may be the same.\n   Then, when the Converter receives an incoming SYN, it checks\
    \ its\n   mapping table to verify if there is an active mapping matching the\n\
    \   destination IP address and destination port of that SYN.  If no entry\n  \
    \ is found, the Converter silently ignores the message.  If an entry is\n   found,\
    \ the Converter inserts an MP_CAPABLE option and Connect TLV in\n   the SYN packet,\
    \ and rewrites the source IP address to one of its IP\n   addresses and, eventually,\
    \ the destination IP address and port number\n   in accordance with the information\
    \ stored in the mapping.  SYN+ACK\n   and ACK will then be exchanged between the\
    \ Client and the Converter\n   to confirm the establishment of the initial subflow.\
    \  The Client can\n   add new subflows following normal Multipath TCP procedures.\n\
    \                           Transport             Remote\n       Client      \
    \        Converter              Host\n         |SYN, MPC             |       \
    \  SYN        |\n         |[Remote Host:port]   |                    |\n     \
    \    |      SYN+ACK, MPC   |       SYN+ACK      |\n         |       ACK, MPC \
    \     |           ACK      |\n      Figure 12: Establishment of an Incoming Multipath\
    \ TCP Connection\n                       through a Transport Converter\n   It\
    \ is out of scope of this document to define specific Convert TLVs\n   to manage\
    \ incoming connections (that is, TLVs that mimic PCP\n   messages).  These TLVs\
    \ can be defined in a separate document.\n"
- title: 6.  The Convert Protocol (Convert)
  contents:
  - "6.  The Convert Protocol (Convert)\n   This section defines the Convert Protocol\
    \ (Convert, for short)\n   messages that are exchanged between a Client and a\
    \ Transport\n   Converter.\n   The Transport Converter listens on a specific TCP\
    \ port number for\n   Convert messages from Clients.  That port number is configured\
    \ by an\n   administrator.  Absent any policy, the Transport Converter SHOULD\n\
    \   silently ignore SYNs with no Convert TLVs.\n   Convert messages may appear\
    \ only in SYN, SYN+ACK, or ACK.\n   Convert messages MUST be included as the first\
    \ bytes of the\n   bytestream.  All Convert messages start with a fixed header\
    \ that is\n   32 bits long (Section 6.1) followed by one or more Convert TLVs\n\
    \   (Type, Length, Value) (Section 6.2).\n   If the initial SYN message contains\
    \ user data in its payload (e.g.,\n   see [RFC7413]), that data MUST be placed\
    \ right after the Convert TLVs\n   when generating the SYN.\n   The protocol can\
    \ be extended by defining new TLVs or bumping the\n   version number if a different\
    \ message format is needed.  If a future\n   version is defined but with a different\
    \ message format, the version\n   negotiation procedure defined in Section 6.2.8\
    \ (see \"Unsupported\n   Version\") is meant to agree on a version that is supported\
    \ by both\n   peers.\n      |  Implementation note 1: Several implementers expressed\
    \ concerns\n      |  about the use of TFO.  As a reminder, the Fast Open Cookie\n\
    \      |  protects from some attack scenarios that affect open servers\n     \
    \ |  like web servers.  The Convert Protocol is different and, as\n      |  discussed\
    \ in [RFC7413], there are different ways to protect\n      |  from such attacks.\
    \  Instead of using a Fast Open Cookie inside\n      |  the TCP options, which\
    \ consumes precious space in the extended\n      |  TCP header, the Convert Protocol\
    \ supports the utilization of a\n      |  Cookie that is placed in the SYN payload.\
    \  This provides the\n      |  same level of protection as a Fast Open Cookie\
    \ in environments\n      |  were such protection is required.\n      |  \n   \
    \   |  Implementation note 2: Error messages are not included in RST\n      |\
    \  but sent in the bytestream.  Implementers have indicated that\n      |  processing\
    \ RST on Clients was difficult on some platforms.\n      |  This design simplifies\
    \ Client implementations.\n"
- title: 6.1.  The Convert Fixed Header
  contents:
  - "6.1.  The Convert Fixed Header\n   The Convert Protocol uses a fixed header that\
    \ is 32 bits long sent by\n   both the Client and the Transport Converter over\
    \ each established\n   connection.  This header indicates both the version of\
    \ the protocol\n   used and the length of the Convert message.\n   The Client\
    \ and the Transport Converter MUST send the fixed-sized\n   header, shown in Figure\
    \ 13, as the first four bytes of the\n   bytestream.\n                       \
    \ 1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   |  Version      |  Total Length |    \
    \      Magic Number         |\n                    Figure 13: The Convert Fixed\
    \ Header\n   The version is encoded as an 8-bit unsigned integer value.  This\n\
    \   document specifies version 1.  Version 0 is reserved by this document\n  \
    \ and MUST NOT be used.\n      |  Note: Early versions of this specification don't\
    \ use a\n      |  dedicated port number but only rely upon the IP address of the\n\
    \      |  Converter.  Having a bit set in the Version field together with\n  \
    \    |  the Total Length field avoids misinterpreting data in a SYN as\n     \
    \ |  Convert TLVs.  Since the design was updated to use a specific\n      |  service\
    \ port, that constraint was relaxed.  Version 0 would\n      |  work, but given\
    \ existing implementations already use Version 1,\n      |  the use of Version\
    \ 0 is maintained as reserved.\n   The Total Length is the number of 32-bit words,\
    \ including the header,\n   of the bytestream that are consumed by the Convert\
    \ messages.  Since\n   Total Length is also an 8-bit unsigned integer, those messages\
    \ cannot\n   consume more than 1020 bytes of data.  This limits the number of\n\
    \   bytes that a Transport Converter needs to process.  A Total Length of\n  \
    \ zero is invalid and the connection MUST be reset upon reception of a\n   header\
    \ with such a total length.\n   The Magic Number field MUST be set to 0x2263.\
    \  This field is meant to\n   further strengthen the protocol to unambiguously\
    \ distinguish any data\n   supplied by an application from Convert TLVs.\n   The\
    \ Total Length field unambiguously marks the number of 32-bit words\n   that carry\
    \ Convert TLVs in the beginning of the bytestream.\n"
- title: 6.2.  Convert TLVs
  contents:
  - '6.2.  Convert TLVs

    '
- title: 6.2.1.  Generic Convert TLV Format
  contents:
  - "6.2.1.  Generic Convert TLV Format\n   The Convert Protocol uses variable length\
    \ messages that are encoded\n   using the generic TLV format depicted in Figure\
    \ 14.\n   The length of all TLVs used by the Convert Protocol is always a\n  \
    \ multiple of four bytes.  All TLVs are aligned on 32-bit boundaries.\n   All\
    \ TLV fields are encoded using the network byte order.\n                     \
    \      1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      |     Type      |     Length\
    \    |             Value  ...        |\n      //              ...   (optional)\
    \ Value                         //\n                   Figure 14: Convert Generic\
    \ TLV Format\n   The Length field covers Type, Length, and Value fields.  It is\n\
    \   expressed in units of 32-bit words.  If necessary, Value MUST be\n   padded\
    \ with zeroes so that the length of the TLV is a multiple of 32\n   bits.\n  \
    \ A given TLV MUST only appear once on a connection.  If a Client\n   receives\
    \ two or more instances of the same TLV over a Convert\n   connection, it MUST\
    \ reset the associated TCP connection.  If a\n   Converter receives two or more\
    \ instances of the same TLV over a\n   Convert connection, it MUST return a Malformed\
    \ Message Error TLV and\n   close the associated TCP connection.\n"
- title: 6.2.2.  Summary of Supported Convert TLVs
  contents:
  - "6.2.2.  Summary of Supported Convert TLVs\n   This document specifies the following\
    \ Convert TLVs:\n         | Type | Hex  | Length   | Description             \
    \     |\n         | 1    | 0x1  | 1        | Info TLV                     |\n\
    \         | 10   | 0xA  | Variable | Connect TLV                  |\n        \
    \ | 20   | 0x14 | Variable | Extended TCP Header TLV      |\n         | 21   |\
    \ 0x15 | Variable | Supported TCP Extensions TLV |\n         | 22   | 0x16 | Variable\
    \ | Cookie TLV                   |\n         | 30   | 0x1E | Variable | Error\
    \ TLV                    |\n               Table 1: The TLVs Used by the Convert\
    \ Protocol\n   Type 0x0 is a reserved value.  If a Client receives a TLV of type\n\
    \   0x0, it MUST reset the associated TCP connection.  If a Converter\n   receives\
    \ a TLV of type 0x0, it MUST return an Unsupported Message\n   Error TLV and close\
    \ the associated TCP connection.\n   The Client typically sends, in the first\
    \ connection it established\n   with a Transport Converter, the Info TLV (Section\
    \ 6.2.3) to learn its\n   capabilities.  Assuming the Client is authorized to\
    \ invoke the\n   Transport Converter, the latter replies with the Supported TCP\n\
    \   Extensions TLV (Section 6.2.4).\n   The Client can request the establishment\
    \ of connections to Servers by\n   using the Connect TLV (Section 6.2.5).  If\
    \ the connection can be\n   established with the final Server, the Transport Converter\
    \ replies\n   with the Extended TCP Header TLV (Section 6.2.6).  If not, the\n\
    \   Transport Converter MUST return an Error TLV (Section 6.2.8) and then\n  \
    \ close the connection.  The Transport Converter MUST NOT send an RST\n   immediately\
    \ after the detection of an error to let the Error TLV\n   reach the Client. \
    \ As explained later, the Client will send an RST\n   regardless upon reception\
    \ of the Error TLV.\n"
- title: 6.2.3.  The Info TLV
  contents:
  - "6.2.3.  The Info TLV\n   The Info TLV (Figure 15) is an optional TLV that can\
    \ be sent by a\n   Client to request the TCP extensions that are supported by\
    \ a\n   Transport Converter.  It is typically sent on the first connection\n \
    \  that a Client establishes with a Transport Converter to learn its\n   capabilities.\
    \  Assuming a Client is entitled to invoke the Transport\n   Converter, the latter\
    \ replies with the Supported TCP Extensions TLV\n   described in Section 6.2.4.\n\
    \                        1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   |     Type=0x1\
    \  |     Length    |             Zero              |\n                       \
    \   Figure 15: The Info TLV\n"
- title: 6.2.4.  Supported TCP Extensions TLV
  contents:
  - "6.2.4.  Supported TCP Extensions TLV\n   The Supported TCP Extensions TLV (Figure\
    \ 16) is used by a Transport\n   Converter to announce the TCP options for which\
    \ it provides a\n   conversion service.  A Transport Converter SHOULD include\
    \ in this\n   list the TCP options that it supports in outgoing SYNs.\n   Each\
    \ supported TCP option is encoded with its TCP option Kind listed\n   in the \"\
    Transmission Control Protocol (TCP) Parameters\" registry\n   maintained by IANA\
    \ [IANA-CONVERT].  The Unassigned field MUST be set\n   to zero by the Transport\
    \ Converter and ignored by the Client.\n                         1           \
    \        2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n    |     Type=0x15 |     Length    |           Unassigned\
    \          |\n    |     Kind #1   |     Kind #2   |           ...            \
    \     |\n                Figure 16: The Supported TCP Extensions TLV\n   TCP option\
    \ Kinds 1 and 2 defined in [RFC0793] are supported by all\n   TCP implementations\
    \ and thus, MUST NOT appear in this list.\n   The list of Supported TCP Extensions\
    \ is padded with 0 to end on a\n   32-bit boundary.\n   For example, if the Transport\
    \ Converter supports Multipath TCP,\n   Kind=30 will be present in the Supported\
    \ TCP Extensions TLV that it\n   returns in response to the Info TLV.\n"
- title: 6.2.5.  Connect TLV
  contents:
  - "6.2.5.  Connect TLV\n   The Connect TLV (Figure 17) is used to request the establishment\
    \ of a\n   connection via a Transport Converter.  This connection can be from\
    \ or\n   to a Client.\n   The Remote Peer Port and Remote Peer IP Address fields\
    \ contain the\n   destination port number and IP address of the Server, for outgoing\n\
    \   connections.  For incoming connections destined to a Client serviced\n   via\
    \ a Transport Converter, these fields convey the source port number\n   and IP\
    \ address of the SYN packet received by the Transport Converter\n   from the Server.\n\
    \   The Remote Peer IP Address MUST be encoded as an IPv6 address.  IPv4\n   addresses\
    \ MUST be encoded using the IPv4-mapped IPv6 address format\n   defined in [RFC4291].\
    \  Further, the Remote Peer IP Address field MUST\n   NOT include multicast, broadcast,\
    \ or host loopback addresses\n   [RFC6890].  If a Converter receives a Connect\
    \ TLV with such invalid\n   addresses, it MUST reply with a Malformed Message\
    \ Error TLV and close\n   the associated TCP connection.\n   We distinguish two\
    \ types of Connect TLV based on their length: (1)\n   the Base Connect TLV has\
    \ a length set to 5 (i.e., 20 bytes) and\n   contains a remote address and a remote\
    \ port (Figure 17), and (2) the\n   Extended Connect TLV spans more than 20 bytes\
    \ and also includes the\n   optional TCP Options field (Figure 18).  This field\
    \ is used to\n   request the advertisement of specific TCP options to the Server.\n\
    \                         1                   2                   3\n     0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    |     Type=0xA\
    \  |     Length    |      Remote Peer Port         |\n    |         Remote Peer\
    \ IP Address (128 bits)                     |\n                      Figure 17:\
    \ The Base Connect TLV\n                         1                   2       \
    \            3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n    |     Type=0xA  |     Length    |      Remote Peer Port         |\n\
    \    |         Remote Peer IP Address (128 bits)                     |\n    /\
    \                          TCP Options (Variable)               /\n          \
    \          Figure 18: The Extended Connect TLV\n   The TCP Options field is a\
    \ variable length field that carries a list\n   of TCP option fields (Figure 19).\
    \  Each TCP option field is encoded\n   as a block of 2+n bytes where the first\
    \ byte is the TCP option Kind\n   and the second byte is the length of the TCP\
    \ option as specified in\n   [RFC0793].  The minimum value for the TCP option\
    \ Length is 2.  The\n   TCP options that do not include a length sub-field, i.e.,\
    \ option\n   types 0 (EOL) and 1 (NOP) defined in [RFC0793] MUST NOT be placed\n\
    \   inside the TCP options field of the Connect TLV.  The optional Value\n   field\
    \ contains the variable-length part of the TCP option.  A length\n   of 2 indicates\
    \ the absence of the Value field.  The TCP options field\n   always ends on a\
    \ 32-bit boundary after being padded with zeros.\n                        1  \
    \                 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    |  TCPOpt kind  | TCPOpt Length | Value \
    \ (opt)  |  ....         |\n                      Figure 19: The TCP Options Field\n\
    \   Upon reception of a Base Connect TLV, and absent any policy (e.g.,\n   rate-limit)\
    \ or resource exhaustion conditions, a Transport Converter\n   attempts to establish\
    \ a connection to the address and port that it\n   contains.  The Transport Converter\
    \ MUST use by default the TCP\n   options that correspond to its local policy\
    \ to establish this\n   connection.\n   Upon reception of an Extended Connect\
    \ TLV, a Transport Converter\n   first checks whether or not it supports the TCP\
    \ Options listed in the\n   TCP Options field.  If not, it returns an error TLV\
    \ set to\n   \"Unsupported TCP Option\" (Section 6.2.8).  If the above check\n\
    \   succeeded, and absent any rate-limit policy or resource exhaustion\n   conditions,\
    \ a Transport Converter MUST attempt to establish a\n   connection to the address\
    \ and port that it contains.  It MUST include\n   in the SYN that it sends to\
    \ the Server the options listed in the TCP\n   Options subfield and the TCP options\
    \ that it would have used\n   according to its local policies.  For the TCP options\
    \ that are\n   included in the TCP Options field without an optional value, the\n\
    \   Transport Converter MUST generate its own value.  For the TCP options\n  \
    \ that are included in the TCP Options field with an optional value, it\n   MUST\
    \ copy the entire option in the SYN sent to the remote Server.\n   This procedure\
    \ is designed with TFO in mind.  Particularly, this\n   procedure allows to successfully\
    \ exchange a Fast Open Cookie between\n   the Client and the Server.  See Section\
    \ 7 for a detailed discussion\n   of the different types of TCP options.\n   The\
    \ Transport Converter may refuse a Connect TLV request for various\n   reasons\
    \ (e.g., authorization failed, out of resources, invalid\n   address type, or\
    \ unsupported TCP option).  An error message\n   indicating the encountered error\
    \ is returned to the requesting Client\n   (Section 6.2.8).  In order to prevent\
    \ denial-of-service attacks,\n   error messages sent to a Client SHOULD be rate-limited.\n"
- title: 6.2.6.  Extended TCP Header TLV
  contents:
  - "6.2.6.  Extended TCP Header TLV\n   The Extended TCP Header TLV (Figure 20) is\
    \ used by the Transport\n   Converter to return to the Client the TCP options\
    \ that were returned\n   by the Server in the SYN+ACK packet.  A Transport Converter\
    \ MUST\n   return this TLV if the Client sent an Extended Connect TLV and the\n\
    \   connection was accepted by the Server.\n                         1       \
    \            2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n    |     Type=0x14 |     Length    |           Unassigned\
    \          |\n    /               Returned Extended TCP header               \
    \     /\n                   Figure 20: The Extended TCP Header TLV\n   The Returned\
    \ Extended TCP header field is a copy of the TCP Options\n   that were included\
    \ in the SYN+ACK received by the Transport\n   Converter.\n   The Unassigned field\
    \ MUST be set to zero by the sender and ignored by\n   the receiver.\n"
- title: 6.2.7.  The Cookie TLV
  contents:
  - "6.2.7.  The Cookie TLV\n   The Cookie TLV (Figure 21) is an optional TLV that\
    \ is similar to the\n   TCP Fast Open Cookie [RFC7413].  A Transport Converter\
    \ may want to\n   verify that a Client can receive the packets that it sends to\
    \ prevent\n   attacks from spoofed addresses.  This verification can be done by\n\
    \   using a Cookie that is bound to, for example, the IP address(es) of\n   the\
    \ Client.  This Cookie can be configured on the Client by means\n   that are outside\
    \ of this document or provided by the Transport\n   Converter.\n   A Transport\
    \ Converter that has been configured to use the optional\n   Cookie TLV MUST verify\
    \ the presence of this TLV in the payload of the\n   received SYN.  If this TLV\
    \ is present, the Transport Converter MUST\n   validate the Cookie by means similar\
    \ to those in Section 4.1.2 of\n   [RFC7413] (i.e., IsCookieValid).  If the Cookie\
    \ is valid, the\n   connection establishment procedure can continue.  Otherwise,\
    \ the\n   Transport Converter MUST return an Error TLV set to \"Not Authorized\"\
    \n   and close the connection.\n   If the received SYN did not contain a Cookie\
    \ TLV, and cookie\n   validation is required, the Transport Converter MAY compute\
    \ a Cookie\n   bound to this Client address.  In such case, the Transport Converter\n\
    \   MUST return an Error TLV set to \"Missing Cookie\" and the computed\n   Cookie\
    \ and close the connection.  The Client will react to this error\n   by first\
    \ issuing a reset to terminate the connection.  It also stores\n   the received\
    \ Cookie in its cache and attempts to reestablish a new\n   connection to the\
    \ Transport Converter that includes the Cookie TLV.\n   The format of the Cookie\
    \ TLV is shown in Figure 21.\n                         1                   2 \
    \                  3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n    |     Type=0x16 |     Length    |             Zero        \
    \      |\n    /                        Opaque  Cookie                        \
    \ /\n                         Figure 21: The Cookie TLV\n"
- title: 6.2.8.  Error TLV
  contents:
  - "6.2.8.  Error TLV\n   The Error TLV (Figure 22) is meant to provide information\
    \ about some\n   errors that occurred during the processing of a Convert message.\n\
    \   This TLV has a variable length.  Upon reception of an Error TLV, a\n   Client\
    \ MUST reset the associated connection.\n   An Error TLV can be included in the\
    \ SYN+ACK or an ACK.\n                         1                   2         \
    \          3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n    |     Type=0x1E |     Length    |    Error Code  |  Value       |\n\
    \    //              ...   (optional) Value                         //\n     \
    \                     Figure 22: The Error TLV\n   Different types of errors can\
    \ occur while processing Convert\n   messages.  Each error is identified by an\
    \ Error Code represented as\n   an unsigned integer.  Four classes of error codes\
    \ are defined:\n   Message validation and processing errors (0-31 range):\n  \
    \    Returned upon reception of an invalid message (including valid\n      messages\
    \ but with invalid or unknown TLVs).\n   Client-side errors (32-63 range):\n \
    \     The Client sent a request that could not be accepted by the\n      Transport\
    \ Converter (e.g., unsupported operation).\n   Converter-side errors (64-95 range):\n\
    \      Problems encountered on the Transport Converter (e.g., lack of\n      resources)\
    \ that prevent it from fulfilling the Client's request.\n   Errors caused by the\
    \ destination Server (96-127 range):\n      The final destination could not be\
    \ reached or it replied with a\n      reset.\n   The following error codes are\
    \ defined in this document:\n   Unsupported Version (0):\n      The version number\
    \ indicated in the fixed header of a message\n      received from a peer is not\
    \ supported.\n      This error code MUST be generated by a peer (e.g., Transport\n\
    \      Converter) when it receives a request having a version number that\n  \
    \    it does not support.\n      The Value field MUST be set to the version supported\
    \ by the peer.\n      When multiple versions are supported by the peer, it includes\
    \ the\n      list of supported versions in the Value field; each version is\n\
    \      encoded in 8 bits.  The list of supported versions MUST be padded\n   \
    \   with zeros to end on a 32-bit boundary.\n      Upon receipt of this error\
    \ code, the remote peer (e.g., Client)\n      checks whether it supports one of\
    \ the versions returned by the\n      peer.  The highest commonly supported version\
    \ number MUST be used\n      by the remote peer in subsequent exchanges with the\
    \ peer.\n   Malformed Message (1):\n      This error code is sent to indicate\
    \ that a message received from a\n      peer cannot be successfully parsed and\
    \ validated.\n      Typically, this error code is sent by the Transport Converter\
    \ if\n      it receives a Connect TLV enclosing a multicast, broadcast, or\n \
    \     loopback IP address.\n      To ease troubleshooting, the Value field MUST\
    \ echo the received\n      message using the format depicted in Figure 23.  This\
    \ format\n      allows keeping the original alignment of the message that\n  \
    \    triggered the error.\n                            1                   2 \
    \                  3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n       |     Type=0x1E |     Length    |    Error Code  | \
    \ Zeros       |\n       //        Echo the message that triggered the error  \
    \          //\n               Figure 23: Error TLV to Ease Message Correlation\n\
    \   Unsupported Message (2):\n      This error code is sent to indicate that a\
    \ message type received\n      from a Client is not supported.\n      To ease\
    \ troubleshooting, the Value field MUST echo the received\n      message using\
    \ the format shown in Figure 23.\n   Missing Cookie (3):\n      If a Transport\
    \ Converter requires the utilization of Cookies to\n      prevent spoofing attacks\
    \ and a Cookie TLV was not included in the\n      Convert message, the Transport\
    \ Converter MUST return this error to\n      the requesting Client only if it\
    \ computes a cookie for this\n      Client.  The first byte of the Value field\
    \ MUST be set to zero and\n      the remaining bytes of the Error TLV contain\
    \ the Cookie computed\n      by the Transport Converter for this Client.\n   \
    \   A Client that receives this error code SHOULD cache the received\n      Cookie\
    \ and include it in subsequent Convert messages sent to that\n      Transport\
    \ Converter.\n   Not Authorized (32):\n      This error code indicates that the\
    \ Transport Converter refused to\n      create a connection because of a lack\
    \ of authorization (e.g.,\n      administratively prohibited, authorization failure,\
    \ or invalid\n      Cookie TLV).  The Value field MUST be set to zero.\n     \
    \ This error code MUST be sent by the Transport Converter when a\n      request\
    \ cannot be successfully processed because the authorization\n      failed.\n\
    \   Unsupported TCP Option (33):\n      A TCP option that the Client requested\
    \ to advertise to the final\n      Server cannot be safely used.\n      The Value\
    \ field is set to the type of the unsupported TCP option.\n      If several unsupported\
    \ TCP options were specified in the Connect\n      TLV, then the list of unsupported\
    \ TCP options is returned.  The\n      list of unsupported TCP options MUST be\
    \ padded with zeros to end\n      on a 32-bit boundary.\n   Resource Exceeded\
    \ (64):\n      This error indicates that the Transport Converter does not have\n\
    \      enough resources to perform the request.\n      This error MUST be sent\
    \ by the Transport Converter when it does\n      not have sufficient resources\
    \ to handle a new connection.  The\n      Transport Converter may indicate in\
    \ the Value field the suggested\n      delay (in seconds) that the Client SHOULD\
    \ wait before soliciting\n      the Transport Converter for a new proxied connection.\
    \  A Value of\n      zero corresponds to a default delay of at least 30 seconds.\n\
    \   Network Failure (65):\n      This error indicates that the Transport Converter\
    \ is experiencing\n      a network failure to proxy the request.\n      The Transport\
    \ Converter MUST send this error code when it\n      experiences forwarding issues\
    \ to proxy a connection.  The\n      Transport Converter may indicate in the Value\
    \ field the suggested\n      delay (in seconds) that the Client SHOULD wait before\
    \ soliciting\n      the Transport Converter for a new proxied connection.  A Value\
    \ of\n      zero corresponds to a default delay of at least 30 seconds.\n   Connection\
    \ Reset (96):\n      This error indicates that the final destination responded\
    \ with an\n      RST segment.  The Value field MUST be set to zero.\n   Destination\
    \ Unreachable (97):\n      This error indicates that an ICMP message indicating\
    \ a hard error\n      (e.g., destination unreachable, port unreachable, or network\n\
    \      unreachable) was received by the Transport Converter.  The Value\n    \
    \  field MUST echo the Code field of the received ICMP message.\n      As a reminder,\
    \ TCP implementations are supposed to act on an ICMP\n      error message passed\
    \ up from the IP layer, directing it to the\n      connection that triggered the\
    \ error using the demultiplexing\n      information included in the payload of\
    \ that ICMP message.  Such a\n      demultiplexing issue does not apply for handling\
    \ the \"Destination\n      Unreachable\" Error TLV because the error is sent in-band.\
    \  For\n      this reason, the payload of the ICMP message is not echoed in the\n\
    \      Destination Unreachable Error TLV.\n   Table 2 summarizes the different\
    \ error codes.\n                | Error | Hex  | Description             |\n \
    \               | 0     | 0x00 | Unsupported Version     |\n                |\
    \ 1     | 0x01 | Malformed Message       |\n                | 2     | 0x02 | Unsupported\
    \ Message     |\n                | 3     | 0x03 | Missing Cookie          |\n\
    \                | 32    | 0x20 | Not Authorized          |\n                |\
    \ 33    | 0x21 | Unsupported TCP Option  |\n                | 64    | 0x40 | Resource\
    \ Exceeded       |\n                | 65    | 0x41 | Network Failure         |\n\
    \                | 96    | 0x60 | Connection Reset        |\n                |\
    \ 97    | 0x61 | Destination Unreachable |\n                      Table 2: Convert\
    \ Error Values\n"
- title: 7.  Compatibility of Specific TCP Options with the Conversion Service
  contents:
  - "7.  Compatibility of Specific TCP Options with the Conversion Service\n   In\
    \ this section, we discuss how several deployed Standards Track TCP\n   options\
    \ can be supported through the Convert Protocol.  The other TCP\n   options will\
    \ be discussed in other documents.\n"
- title: 7.1.  Base TCP Options
  contents:
  - "7.1.  Base TCP Options\n   Three TCP options were initially defined in [RFC0793]:\
    \ End-of-Option\n   List (Kind=0), No-Operation (Kind=1), and Maximum Segment\
    \ Size\n   (Kind=2).  The first two options are mainly used to pad the TCP\n \
    \  header.  There is no reason for a Client to request a Transport\n   Converter\
    \ to specifically send these options towards the final\n   destination.\n   The\
    \ Maximum Segment Size option (Kind=2) is used by a host to\n   indicate the largest\
    \ segment that it can receive over each\n   connection.  This value is a function\
    \ of the stack that terminates\n   the TCP connection.  There is no reason for\
    \ a Client to request a\n   Transport Converter to advertise a specific Maximum\
    \ Segment Size\n   (MSS) value to a remote Server.\n   A Transport Converter MUST\
    \ ignore options with Kind=0, 1, or 2 if\n   they appear in a Connect TLV.  It\
    \ MUST NOT announce them in a\n   Supported TCP Extensions TLV.\n"
- title: 7.2.  Window Scale (WS)
  contents:
  - "7.2.  Window Scale (WS)\n   The Window Scale (WS) option (Kind=3) is defined\
    \ in [RFC7323].  As\n   for the MSS option, the window scale factor that is used\
    \ for a\n   connection strongly depends on the TCP stack that handles the\n  \
    \ connection.  When a Transport Converter opens a TCP connection\n   towards a\
    \ remote Server on behalf of a Client, it SHOULD use a WS\n   option with a scaling\
    \ factor that corresponds to the configuration of\n   its stack.  A local configuration\
    \ MAY allow for a WS option in the\n   proxied message to be a function of the\
    \ scaling factor of the\n   incoming connection.\n   From a deployment viewpoint,\
    \ there is no benefit in enabling a Client\n   of a Transport Converter to specifically\
    \ request the utilization of\n   the WS option (Kind=3) with a specific scaling\
    \ factor towards a\n   remote Server.  For this reason, a Transport Converter\
    \ MUST ignore\n   option Kind=3 if it appears in a Connect TLV.  The Transport\n\
    \   Converter MUST NOT announce a WS option (Kind=3) in a Supported TCP\n   Extensions\
    \ TLV.\n"
- title: 7.3.  Selective Acknowledgments
  contents:
  - "7.3.  Selective Acknowledgments\n   Two distinct TCP options were defined to\
    \ support Selective\n   Acknowledgment (SACK) in [RFC2018].  This first one, SACK-Permitted\n\
    \   (Kind=4), is used to negotiate the utilization of Selective\n   Acknowledgments\
    \ during the three-way handshake.  The second one, SACK\n   (Kind=5), carries\
    \ the Selective Acknowledgments inside regular\n   segments.\n   The SACK-Permitted\
    \ option (Kind=4) MAY be advertised by a Transport\n   Converter in the Supported\
    \ TCP Extensions TLV.  Clients connected to\n   this Transport Converter MAY include\
    \ the SACK-Permitted option in the\n   Connect TLV.\n   The SACK option (Kind=5)\
    \ cannot be used during the three-way\n   handshake.  For this reason, a Transport\
    \ Converter MUST ignore option\n   Kind=5 if it appears in a Connect TLV.  It\
    \ MUST NOT announce it in a\n   TCP Supported Extensions TLV.\n"
- title: 7.4.  Timestamp
  contents:
  - "7.4.  Timestamp\n   The Timestamp option [RFC7323] can be used during the three-way\n\
    \   handshake to negotiate the utilization of timestamps during the TCP\n   connection.\
    \  It is notably used to improve round-trip-time\n   estimations and to provide\
    \ Protection Against Wrapped Sequences\n   (PAWS).  As for the WS option, the\
    \ timestamps are a property of a\n   connection and there is limited benefit in\
    \ enabling a Client to\n   request a Transport Converter to use the timestamp\
    \ option when\n   establishing a connection to a remote Server.  Furthermore,\
    \ the\n   timestamps that are used by TCP stacks are specific to each stack and\n\
    \   there is no benefit in enabling a Client to specify the timestamp\n   value\
    \ that a Transport Converter could use to establish a connection\n   to a remote\
    \ Server.\n   A Transport Converter MAY advertise the Timestamp option (Kind=8)\
    \ in\n   the TCP Supported Extensions TLV.  The Clients connected to this\n  \
    \ Transport Converter MAY include the Timestamp option in the Connect\n   TLV\
    \ but without any timestamp.\n"
- title: 7.5.  Multipath TCP
  contents:
  - "7.5.  Multipath TCP\n   The Multipath TCP options are defined in [RFC8684], which\
    \ defines one\n   variable length TCP option (Kind=30) that includes a sub-type\
    \ field\n   to support several Multipath TCP options.  There are several\n   operational\
    \ use cases where Clients would like to use Multipath TCP\n   through a Transport\
    \ Converter [IETFJ16].  However, none of these use\n   cases require the Client\
    \ to specify the content of the Multipath TCP\n   option that the Transport Converter\
    \ should send to a remote Server.\n   A Transport Converter that supports Multipath\
    \ TCP conversion service\n   MUST advertise the Multipath TCP option (Kind=30)\
    \ in the Supported\n   TCP Extensions TLV.  Clients serviced by this Transport\
    \ Converter may\n   include the Multipath TCP option in the Connect TLV but without\
    \ any\n   content.\n"
- title: 7.6.  TCP Fast Open
  contents:
  - "7.6.  TCP Fast Open\n   The TCP Fast Open Cookie option (Kind=34) is defined\
    \ in [RFC7413].\n   There are two different usages of this option that need to\
    \ be\n   supported by Transport Converters.  The first utilization of the TCP\n\
    \   Fast Open Cookie option is to request a cookie from the Server.  In\n   this\
    \ case, the option is sent with an empty cookie by the Client, and\n   the Server\
    \ returns the cookie.  The second utilization of the TCP\n   Fast Open Cookie\
    \ option is to send a cookie to the Server.  In this\n   case, the option contains\
    \ a cookie.\n   A Transport Converter MAY advertise the TCP Fast Open Cookie option\n\
    \   (Kind=34) in the Supported TCP Extensions TLV.  If a Transport\n   Converter\
    \ has advertised the support for TCP Fast Open in its\n   Supported TCP Extensions\
    \ TLV, it needs to be able to process two\n   types of Connect TLV.\n   If such\
    \ a Transport Converter receives a Connect TLV with the TCP\n   Fast Open Cookie\
    \ option that does not contain a cookie, it MUST add\n   an empty TCP Fast Open\
    \ Cookie option in the SYN sent to the remote\n   Server.  If the remote Server\
    \ supports TFO, it responds with a SYN-\n   ACK according to the procedure in\
    \ Section 4.1.2 of [RFC7413].  This\n   SYN-ACK may contain a Fast Open option\
    \ with a cookie.  Upon receipt\n   of the SYN-ACK by the Converter, it relays\
    \ the Fast Open option with\n   the cookie to the Client.\n   If such a Transport\
    \ Converter receives a Connect TLV with the TCP\n   Fast Open Cookie option that\
    \ contains a cookie, it MUST copy the TCP\n   Fast Open Cookie option in the SYN\
    \ sent to the remote Server.\n"
- title: 7.7.  TCP-AO
  contents:
  - "7.7.  TCP-AO\n   The TCP Authentication Option (TCP-AO) [RFC5925] provides a\
    \ technique\n   to authenticate all the packets exchanged over a TCP connection.\n\
    \   Given the nature of this extension, it is unlikely that the\n   applications\
    \ that require their packets to be authenticated end to\n   end would want their\
    \ connections to pass through a converter.  For\n   this reason, we do not recommend\
    \ the support of the TCP-AO by\n   Transport Converters.  The only use cases where\
    \ it could make sense\n   to combine TCP-AO and the solution in this document\
    \ are those where\n   the TCP-AO-NAT extension [RFC6978] is in use.\n   A Transport\
    \ Converter MUST NOT advertise the TCP-AO (Kind=29) in the\n   Supported TCP Extensions\
    \ TLV.  If a Transport Converter receives a\n   Connect TLV that contains the\
    \ TCP-AO, it MUST reject the\n   establishment of the connection with error code\
    \ set to \"Unsupported\n   TCP Option\", except if the TCP-AO-NAT option is used.\
    \  Nevertheless,\n   given that TCP-AO-NAT is Experimental, its usage is not currently\n\
    \   defined and must be specified by some other document before it can be\n  \
    \ used.\n"
- title: 8.  Interactions with Middleboxes
  contents:
  - "8.  Interactions with Middleboxes\n   The Convert Protocol is designed to be\
    \ used in networks that do not\n   contain middleboxes that interfere with TCP.\
    \  Under such conditions,\n   it is assumed that the network provider ensures\
    \ that all involved on-\n   path nodes are not breaking TCP signals (e.g., strip\
    \ TCP options,\n   discard some SYNs, etc.).\n   Nevertheless, and in order to\
    \ allow for a robust service, this\n   section describes how a Client can detect\
    \ middlebox interference and\n   stop using the Transport Converter affected by\
    \ this interference.\n   Internet measurements [IMC11] have shown that middleboxes\
    \ can affect\n   the deployment of TCP extensions.  In this section, we focus\
    \ the\n   middleboxes that modify the payload since the Convert Protocol places\n\
    \   its messages at the beginning of the bytestream.\n   Consider a middlebox\
    \ that removes the SYN payload.  The Client can\n   detect this problem by looking\
    \ at the acknowledgment number field of\n   the SYN+ACK if returned by the Transport\
    \ Converter.  The Client MUST\n   stop to use this Transport Converter given the\
    \ middlebox\n   interference.\n   Consider now a middlebox that drops SYN/ACKs\
    \ with a payload.  The\n   Client won't be able to establish a connection via\
    \ the Transport\n   Converter.  The case of a middlebox that removes the payload\
    \ of\n   SYN+ACKs or from the packet that follows the SYN+ACK (but not the\n \
    \  payload of SYN) can be detected by a Client.  This is hinted by the\n   absence\
    \ of a valid Convert message in the response.\n   As explained in [RFC7413], some\
    \ Carrier Grade NATs (CGNs) can affect\n   the operation of TFO if they assign\
    \ different IP addresses to the\n   same end host.  Such CGNs could affect the\
    \ operation of the cookie\n   validation used by the Convert Protocol.  As a reminder,\
    \ CGNs that\n   are enabled on the path between a Client and a Transport Converter\n\
    \   must adhere to the address preservation defined in [RFC6888].  See\n   also\
    \ the discussion in Section 7.1 of [RFC7413].\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   An implementation MUST check that the Convert\
    \ TLVs are properly\n   framed within the boundary indicated by the Total Length\
    \ in the fixed\n   header (Section 6.1).\n   Additional security considerations\
    \ are discussed in the following\n   subsections.\n"
- title: 9.1.  Privacy & Ingress Filtering
  contents:
  - "9.1.  Privacy & Ingress Filtering\n   The Transport Converter may have access\
    \ to privacy-related\n   information (e.g., subscriber credentials).  The Transport\
    \ Converter\n   is designed to not leak such sensitive information outside a local\n\
    \   domain.\n   Given its function and location in the network, a Transport Converter\n\
    \   is in a position to observe all packets that it processes, to include\n  \
    \ payloads and metadata, and has the ability to profile and conduct\n   some traffic\
    \ analysis of user behavior.  The Transport Converter MUST\n   be as protected\
    \ as a core IP router (e.g., Section 10 of [RFC1812]).\n   Furthermore, ingress\
    \ filtering policies MUST be enforced at the\n   network boundaries [RFC2827].\n\
    \   This document assumes that all network attachments are managed by the\n  \
    \ same administrative entity.  Therefore, enforcing anti-spoofing\n   filters\
    \ at these networks is a guard that hosts are not sending\n   traffic with spoofed\
    \ source IP addresses.\n"
- title: 9.2.  Authentication and Authorization Considerations
  contents:
  - "9.2.  Authentication and Authorization Considerations\n   The Convert Protocol\
    \ is RECOMMENDED for use in a managed network\n   where end hosts can be securely\
    \ identified by their IP address.  If\n   such control is not exerted and there\
    \ is a more open network\n   environment, a strong mutual authentication scheme\
    \ MUST be defined to\n   use the Convert Protocol.\n   One possibility for mutual\
    \ authentication is to use TLS to perform\n   mutual authentication between the\
    \ Client and the Converter.  That is,\n   use TLS when a Client retrieves a Cookie\
    \ from the Converter and rely\n   on certificate-based, pre-shared key-based [RFC4279],\
    \ or raw public\n   key-based Client authentication [RFC7250] to secure this connection.\n\
    \   If the authentication succeeds, the Converter returns a cookie to the\n  \
    \ Client.  Subsequent Connect messages will be authorized as a function\n   of\
    \ the content of the Cookie TLV.  An attacker from within the\n   network between\
    \ a Client and a Transport Converter may intercept the\n   Cookie and use it to\
    \ be granted access to the conversion service.\n   Such an attack is only possible\
    \ if the attacker spoofs the IP address\n   of the Client and the network does\
    \ not filter packets with source-\n   spoofed IP addresses.\n   The operator that\
    \ manages the various network attachments (including\n   the Transport Converters)\
    \ has various options for enforcing\n   authentication and authorization policies.\
    \  For example, a non-\n   exhaustive list of methods to achieve authorization\
    \ is provided\n   hereafter:\n   *  The network provider may enforce a policy\
    \ based on the\n      International Mobile Subscriber Identity (IMSI) to verify\
    \ that a\n      user is allowed to benefit from the TCP converter service.  If\n\
    \      that authorization fails, the Packet Data Protocol (PDP) context/\n   \
    \   bearer will not be mounted.  This method does not require any\n      interaction\
    \ with the Transport Converter for authorization\n      matters.\n   *  The network\
    \ provider may enforce a policy based upon Access\n      Control Lists (ACLs),\
    \ e.g., at a Broadband Network Gateway (BNG)\n      to control the hosts that\
    \ are authorized to communicate with a\n      Transport Converter.  These ACLs\
    \ may be installed as a result of\n      RADIUS exchanges, e.g., [TCPM-CONVERTER].\
    \  This method does not\n      require any interaction with the Transport Converter\
    \ for\n      authorization matters.\n   *  A device that embeds a Transport Converter\
    \ may also host a RADIUS\n      Client that will solicit a AAA Server to check\
    \ whether or not\n      connections received from a given source IP address are\
    \ authorized\n      [TCPM-CONVERTER].\n   A first safeguard against the misuse\
    \ of Transport Converter resources\n   by illegitimate users (e.g., users with\
    \ access networks that are not\n   managed by the same provider that operates\
    \ the Transport Converter)\n   is the Transport Converter to reject Convert connections\
    \ received in\n   the external realm.  Only Convert connections received in the\n\
    \   internal realm of a Transport Converter will be accepted.\n   In deployments\
    \ where network-assisted connections are not allowed\n   between hosts of a domain\
    \ (i.e., hairpinning), the Converter may be\n   instructed to discard such connections.\
    \  Hairpinned connections are\n   thus rejected by the Transport Converter by\
    \ returning an Error TLV\n   set to \"Not Authorized\".  Otherwise, absent explicit\
    \ configuration,\n   hairpinning is enabled by the Converter (see Figure 24).\n\
    \             <===Network Provider===>\n      +----+ from X1:x1 to X2':x2'   +-----+\
    \ X1':x1'\n      | C1 |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>--+---\n      +----+ from\
    \ X1':x1' to X2:x2   |  v  | X2':x2'\n      | C2 |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<--+---\n\
    \      Note: X2':x2' may be equal to\n            X2:x2\n                    \
    \   Figure 24: Hairpinning Example\n"
- title: 9.3.  Denial of Service
  contents:
  - "9.3.  Denial of Service\n   Another possible risk is amplification attacks, since\
    \ a Transport\n   Converter sends a SYN towards a remote Server upon reception\
    \ of a SYN\n   from a Client.  This could lead to amplification attacks if the\
    \ SYN\n   sent by the Transport Converter were larger than the SYN received\n\
    \   from the Client, or if the Transport Converter retransmits the SYN.\n   To\
    \ mitigate such attacks, the Transport Converter SHOULD rate-limit\n   the number\
    \ of pending requests for a given Client.  It SHOULD also\n   avoid sending SYNs\
    \ that are significantly longer than the SYN\n   received from the Client, to\
    \ remote Servers.  Finally, the Transport\n   Converter SHOULD only retransmit\
    \ a SYN to a Server after having\n   received a retransmitted SYN from the corresponding\
    \ Client.  Means to\n   protect against SYN flooding attacks should also be enabled\
    \ (e.g.,\n   Section 3 of [RFC4987]).\n   Attacks from within the network between\
    \ a Client and a Transport\n   Converter (including attacks that change the protocol\
    \ version) are\n   yet another threat.  Means to ensure that illegitimate nodes\
    \ cannot\n   connect to a network should be implemented.\n"
- title: 9.4.  Traffic Theft
  contents:
  - "9.4.  Traffic Theft\n   Traffic theft is a risk if an illegitimate Converter\
    \ is inserted in\n   the path.  Indeed, inserting an illegitimate Converter in\
    \ the\n   forwarding path allows traffic interception and can therefore provide\n\
    \   access to sensitive data issued by or destined to a host.  Converter\n   discovery\
    \ and configuration are out of scope of this document.\n"
- title: 9.5.  Logging
  contents:
  - "9.5.  Logging\n   If the Converter is configured to behave in the address-sharing\
    \ mode\n   (Section 4.4.2), the logging recommendations discussed in Section 4\n\
    \   of [RFC6888] need to be considered.  Security-related issues\n   encountered\
    \ in address-sharing environments are documented in\n   Section 13 of [RFC6269].\n"
- title: 10.  IANA Considerations
  contents:
  - '10.  IANA Considerations

    '
- title: 10.1.  Convert Service Name
  contents:
  - "10.1.  Convert Service Name\n   IANA has assigned a service name for the Convert\
    \ Protocol from the\n   \"Service Name and Transport Protocol Port Number Registry\"\
    \ available\n   at <https://www.iana.org/assignments/service-names-port-numbers>.\n\
    \   Service Name:            convert\n   Port Number:             N/A\n   Transport\
    \ Protocol(s):   TCP\n   Description:             0-RTT TCP Convert Protocol\n\
    \   Assignee:                IESG <iesg@ietf.org>\n   Contact:               \
    \  IETF Chair <chair@ietf.org>\n   Reference:               RFC 8803\n   Clients\
    \ may use this service name to feed the procedure defined in\n   [RFC2782] to\
    \ discover the IP address(es) and the port number used by\n   the Transport Converters\
    \ of a domain.\n"
- title: 10.2.  The Convert Protocol (Convert) Parameters
  contents:
  - "10.2.  The Convert Protocol (Convert) Parameters\n   IANA has created a new \"\
    TCP Convert Protocol (Convert) Parameters\"\n   registry.\n   The following subsections\
    \ detail new registries within the \"Convert\n   Protocol (Convert) Parameters\"\
    \ registry.\n   The designated expert is expected to ascertain the existence of\n\
    \   suitable documentation as described in Section 4.6 of [RFC8126] and\n   to\
    \ verify that the document is permanently and publicly available.\n   The designated\
    \ expert is also expected to check the clarity of\n   purpose and use of the requested\
    \ code points.\n   Also, criteria that should be applied by the designated experts\n\
    \   includes determining whether the proposed registration duplicates\n   existing\
    \ functionality, whether it is likely to be of general\n   applicability or useful\
    \ only for private use, and whether the\n   registration description is clear.\
    \  All requests should be directed\n   to the review mailing list.  For both the\
    \ \"Convert TLVs\" and \"Convert\n   Errors\" subregistries, IANA must only accept\
    \ registry updates in the\n   128-191 range from the designated experts.  It is\
    \ suggested that\n   multiple designated experts be appointed.  In cases where\
    \ a\n   registration decision could be perceived as creating a conflict of\n \
    \  interest for a particular expert, that expert should defer to the\n   judgment\
    \ of the other experts.\n"
- title: 10.2.1.  Convert Versions
  contents:
  - "10.2.1.  Convert Versions\n   IANA has created the \"Convert Versions\" subregistry.\
    \  New values are\n   assigned via IETF Review (Section 4.8 of [RFC8126]).\n \
    \  The initial values of the registry are as follows:\n                   | Version\
    \ | Description | Reference |\n                   | 0       | Reserved    | RFC\
    \ 8803  |\n                   | 1       | Assigned    | RFC 8803  |\n        \
    \             Table 3: Current Convert Versions\n"
- title: 10.2.2.  Convert TLVs
  contents:
  - "10.2.2.  Convert TLVs\n   IANA has created the \"Convert TLVs\" subregistry.\
    \  The procedures for\n   assigning values from this registry are as follows:\n\
    \   1-127:    IETF Review\n   128-191:  Specification Required\n   192-255:  Private\
    \ Use\n   The initial values of the registry are as follows:\n            | Code\
    \ | Name                        | Reference |\n            | 0    | Reserved \
    \                   | RFC 8803  |\n            | 1    | Info TLV             \
    \       | RFC 8803  |\n            | 10   | Connect TLV                 | RFC\
    \ 8803  |\n            | 20   | Extended TCP Header TLV     | RFC 8803  |\n  \
    \          | 21   | Supported TCP Extension TLV | RFC 8803  |\n            | 22\
    \   | Cookie TLV                  | RFC 8803  |\n            | 30   | Error TLV\
    \                   | RFC 8803  |\n                      Table 4: Initial Convert\
    \ TLVs\n"
- title: 10.2.3.  Convert Error Messages
  contents:
  - "10.2.3.  Convert Error Messages\n   IANA has created the \"Convert Errors\" subregistry.\
    \  Codes in this\n   registry are assigned as a function of the error type.  Four\
    \ types\n   are defined; the following ranges are reserved for each of these\n\
    \   types:\n   0-31:     Message validation and processing errors\n   32-63: \
    \   Client-side errors\n   64-95:    Transport Converter-side errors\n   96-127:\
    \   Errors caused by destination Server\n   The procedures for assigning values\
    \ from this subregistry are as\n   follows:\n   0-127:    IETF Review\n   128-191:\
    \  Specification Required\n   192-255:  Private Use\n   The initial values of\
    \ the registry are as follows:\n              | Error | Description          \
    \   | Reference |\n              | 0     | Unsupported Version     | RFC 8803\
    \  |\n              | 1     | Malformed Message       | RFC 8803  |\n        \
    \      | 2     | Unsupported Message     | RFC 8803  |\n              | 3    \
    \ | Missing Cookie          | RFC 8803  |\n              | 32    | Not Authorized\
    \          | RFC 8803  |\n              | 33    | Unsupported TCP Option  | RFC\
    \ 8803  |\n              | 64    | Resource Exceeded       | RFC 8803  |\n   \
    \           | 65    | Network Failure         | RFC 8803  |\n              | 96\
    \    | Connection Reset        | RFC 8803  |\n              | 97    | Destination\
    \ Unreachable | RFC 8803  |\n                    Table 5: Initial Convert Error\
    \ Codes\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC0793]  Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n              RFC 793, DOI 10.17487/RFC0793, September 1981,\n\
    \              <https://www.rfc-editor.org/info/rfc793>.\n   [RFC2018]  Mathis,\
    \ M., Mahdavi, J., Floyd, S., and A. Romanow, \"TCP\n              Selective Acknowledgment\
    \ Options\", RFC 2018,\n              DOI 10.17487/RFC2018, October 1996,\n  \
    \            <https://www.rfc-editor.org/info/rfc2018>.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n       \
    \       <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2827]  Ferguson, P.\
    \ and D. Senie, \"Network Ingress Filtering:\n              Defeating Denial of\
    \ Service Attacks which employ IP Source\n              Address Spoofing\", BCP\
    \ 38, RFC 2827, DOI 10.17487/RFC2827,\n              May 2000, <https://www.rfc-editor.org/info/rfc2827>.\n\
    \   [RFC4291]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n        \
    \      Architecture\", RFC 4291, DOI 10.17487/RFC4291, February\n            \
    \  2006, <https://www.rfc-editor.org/info/rfc4291>.\n   [RFC4787]  Audet, F.,\
    \ Ed. and C. Jennings, \"Network Address\n              Translation (NAT) Behavioral\
    \ Requirements for Unicast\n              UDP\", BCP 127, RFC 4787, DOI 10.17487/RFC4787,\
    \ January\n              2007, <https://www.rfc-editor.org/info/rfc4787>.\n  \
    \ [RFC4987]  Eddy, W., \"TCP SYN Flooding Attacks and Common\n              Mitigations\"\
    , RFC 4987, DOI 10.17487/RFC4987, August 2007,\n              <https://www.rfc-editor.org/info/rfc4987>.\n\
    \   [RFC5925]  Touch, J., Mankin, A., and R. Bonica, \"The TCP\n             \
    \ Authentication Option\", RFC 5925, DOI 10.17487/RFC5925,\n              June\
    \ 2010, <https://www.rfc-editor.org/info/rfc5925>.\n   [RFC6888]  Perreault, S.,\
    \ Ed., Yamagata, I., Miyakawa, S., Nakagawa,\n              A., and H. Ashida,\
    \ \"Common Requirements for Carrier-Grade\n              NATs (CGNs)\", BCP 127,\
    \ RFC 6888, DOI 10.17487/RFC6888,\n              April 2013, <https://www.rfc-editor.org/info/rfc6888>.\n\
    \   [RFC6890]  Cotton, M., Vegoda, L., Bonica, R., Ed., and B. Haberman,\n   \
    \           \"Special-Purpose IP Address Registries\", BCP 153,\n            \
    \  RFC 6890, DOI 10.17487/RFC6890, April 2013,\n              <https://www.rfc-editor.org/info/rfc6890>.\n\
    \   [RFC7323]  Borman, D., Braden, B., Jacobson, V., and R.\n              Scheffenegger,\
    \ Ed., \"TCP Extensions for High Performance\",\n              RFC 7323, DOI 10.17487/RFC7323,\
    \ September 2014,\n              <https://www.rfc-editor.org/info/rfc7323>.\n\
    \   [RFC7413]  Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, \"TCP\n   \
    \           Fast Open\", RFC 7413, DOI 10.17487/RFC7413, December 2014,\n    \
    \          <https://www.rfc-editor.org/info/rfc7413>.\n   [RFC8126]  Cotton, M.,\
    \ Leiba, B., and T. Narten, \"Guidelines for\n              Writing an IANA Considerations\
    \ Section in RFCs\", BCP 26,\n              RFC 8126, DOI 10.17487/RFC8126, June\
    \ 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8684]  Ford, A., Raiciu,\
    \ C., Handley, M., Bonaventure, O., and C.\n              Paasch, \"TCP Extensions\
    \ for Multipath Operation with\n              Multiple Addresses\", RFC 8684,\
    \ DOI 10.17487/RFC8684, March\n              2020, <https://www.rfc-editor.org/info/rfc8684>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [ANRW17]   Trammell, B., Kuehlewind, M., De\
    \ Vaere, P., Learmonth, I.,\n              and G. Fairhurst, \"Tracking transport-layer\
    \ evolution with\n              PATHspider\", Applied Networking Research Workshop\
    \ 2017\n              (ANRW17), July 2017.\n   [DHC-CONVERTER]\n             \
    \ Boucadair, M., Jacquenet, C., and T. Reddy.K, \"DHCP\n              Options\
    \ for 0-RTT TCP Converters\", Work in Progress,\n              Internet-Draft,\
    \ draft-boucadair-tcpm-dhc-converter-03, 7\n              October 2019, <https://tools.ietf.org/html/draft-\n\
    \              boucadair-tcpm-dhc-converter-03>.\n   [Fukuda2011]\n          \
    \    Fukuda, K., \"An Analysis of Longitudinal TCP Passive\n              Measurements\
    \ (Short Paper)\", Traffic Monitoring and\n              Analysis, TMA 2011, Lecture\
    \ Notes in Computer Science,\n              vol. 6613, 2011.\n   [HOT-MIDDLEBOX13]\n\
    \              Detal, G., Paasch, C., and O. Bonaventure, \"Multipath in\n   \
    \           the Middle(Box)\", HotMiddlebox'13,\n              DOI 10.1145/2535828.2535829,\
    \ December 2013,\n              <https://inl.info.ucl.ac.be/publications/multipath-\n\
    \              middlebox>.\n   [IANA-CONVERT]\n              IANA, \"TCP Convert\
    \ Protocol (Convert) Parameters\",\n              <https://www.iana.org/assignments/tcp-convert-protocol-\n\
    \              parameters>.\n   [IETFJ16]  Bonaventure, O. and S. Seo, \"Multipath\
    \ TCP Deployments\",\n              IETF Journal, Vol. 12, Issue 2, November 2016.\n\
    \   [IMC11]    Honda, K., Nishida, Y., Raiciu, C., Greenhalgh, A.,\n         \
    \     Handley, M., and T. Hideyuki, \"Is it still possible to\n              extend\
    \ TCP?\", Proceedings of the 2011 ACM SIGCOMM\n              conference on Internet\
    \ measurement conference,\n              DOI 10.1145/2068816.2068834, November\
    \ 2011,\n              <https://doi.org/10.1145/2068816.2068834>.\n   [INTAREA-SOCKS]\n\
    \              Olteanu, V. and D. Niculescu, \"SOCKS Protocol Version 6\",\n \
    \             Work in Progress, Internet-Draft, draft-olteanu-intarea-\n     \
    \         socks-6-10, 13 July 2020, <https://tools.ietf.org/html/\n          \
    \    draft-olteanu-intarea-socks-6-10>.\n   [LOW-LATENCY]\n              Arkko,\
    \ J. and J. Tantsura, \"Low Latency Applications and\n              the Internet\
    \ Architecture\", Work in Progress, Internet-\n              Draft, draft-arkko-arch-low-latency-02,\
    \ 30 October 2017,\n              <https://tools.ietf.org/html/draft-arkko-arch-low-latency-\n\
    \              02>.\n   [MPTCP-PLAIN]\n              Boucadair, M., Jacquenet,\
    \ C., Bonaventure, O., Behaghel,\n              D., Secci, S., Henderickx, W.,\
    \ Skog, R., Vinapamula, S.,\n              Seo, S., Cloetens, W., Meyer, U., Contreras,\
    \ L., and B.\n              Peirens, \"Extensions for Network-Assisted MPTCP Deployment\n\
    \              Models\", Work in Progress, Internet-Draft, draft-\n          \
    \    boucadair-mptcp-plain-mode-10, March 2017,\n              <https://tools.ietf.org/html/draft-boucadair-mptcp-plain-\n\
    \              mode-10>.\n   [MPTCP-TRANSPARENT]\n              Peirens, B., Detal,\
    \ G., Barre, S., and O. Bonaventure,\n              \"Link bonding with transparent\
    \ Multipath TCP\", Work in\n              Progress, Internet-Draft, draft-peirens-mptcp-transparent-\n\
    \              00, 8 July 2016, <https://tools.ietf.org/html/draft-\n        \
    \      peirens-mptcp-transparent-00>.\n   [RFC1812]  Baker, F., Ed., \"Requirements\
    \ for IP Version 4 Routers\",\n              RFC 1812, DOI 10.17487/RFC1812, June\
    \ 1995,\n              <https://www.rfc-editor.org/info/rfc1812>.\n   [RFC1919]\
    \  Chatel, M., \"Classical versus Transparent IP Proxies\",\n              RFC\
    \ 1919, DOI 10.17487/RFC1919, March 1996,\n              <https://www.rfc-editor.org/info/rfc1919>.\n\
    \   [RFC1928]  Leech, M., Ganis, M., Lee, Y., Kuris, R., Koblas, D., and\n   \
    \           L. Jones, \"SOCKS Protocol Version 5\", RFC 1928,\n              DOI\
    \ 10.17487/RFC1928, March 1996,\n              <https://www.rfc-editor.org/info/rfc1928>.\n\
    \   [RFC2782]  Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS RR for\n   \
    \           specifying the location of services (DNS SRV)\", RFC 2782,\n     \
    \         DOI 10.17487/RFC2782, February 2000,\n              <https://www.rfc-editor.org/info/rfc2782>.\n\
    \   [RFC3135]  Border, J., Kojo, M., Griner, J., Montenegro, G., and Z.\n    \
    \          Shelby, \"Performance Enhancing Proxies Intended to\n             \
    \ Mitigate Link-Related Degradations\", RFC 3135,\n              DOI 10.17487/RFC3135,\
    \ June 2001,\n              <https://www.rfc-editor.org/info/rfc3135>.\n   [RFC4279]\
    \  Eronen, P., Ed. and H. Tschofenig, Ed., \"Pre-Shared Key\n              Ciphersuites\
    \ for Transport Layer Security (TLS)\",\n              RFC 4279, DOI 10.17487/RFC4279,\
    \ December 2005,\n              <https://www.rfc-editor.org/info/rfc4279>.\n \
    \  [RFC5461]  Gont, F., \"TCP's Reaction to Soft Errors\", RFC 5461,\n       \
    \       DOI 10.17487/RFC5461, February 2009,\n              <https://www.rfc-editor.org/info/rfc5461>.\n\
    \   [RFC6269]  Ford, M., Ed., Boucadair, M., Durand, A., Levis, P., and\n    \
    \          P. Roberts, \"Issues with IP Address Sharing\", RFC 6269,\n       \
    \       DOI 10.17487/RFC6269, June 2011,\n              <https://www.rfc-editor.org/info/rfc6269>.\n\
    \   [RFC6296]  Wasserman, M. and F. Baker, \"IPv6-to-IPv6 Network Prefix\n   \
    \           Translation\", RFC 6296, DOI 10.17487/RFC6296, June 2011,\n      \
    \        <https://www.rfc-editor.org/info/rfc6296>.\n   [RFC6731]  Savolainen,\
    \ T., Kato, J., and T. Lemon, \"Improved\n              Recursive DNS Server Selection\
    \ for Multi-Interfaced\n              Nodes\", RFC 6731, DOI 10.17487/RFC6731,\
    \ December 2012,\n              <https://www.rfc-editor.org/info/rfc6731>.\n \
    \  [RFC6887]  Wing, D., Ed., Cheshire, S., Boucadair, M., Penno, R., and\n   \
    \           P. Selkirk, \"Port Control Protocol (PCP)\", RFC 6887,\n         \
    \     DOI 10.17487/RFC6887, April 2013,\n              <https://www.rfc-editor.org/info/rfc6887>.\n\
    \   [RFC6928]  Chu, J., Dukkipati, N., Cheng, Y., and M. Mathis,\n           \
    \   \"Increasing TCP's Initial Window\", RFC 6928,\n              DOI 10.17487/RFC6928,\
    \ April 2013,\n              <https://www.rfc-editor.org/info/rfc6928>.\n   [RFC6978]\
    \  Touch, J., \"A TCP Authentication Option Extension for NAT\n              Traversal\"\
    , RFC 6978, DOI 10.17487/RFC6978, July 2013,\n              <https://www.rfc-editor.org/info/rfc6978>.\n\
    \   [RFC7250]  Wouters, P., Ed., Tschofenig, H., Ed., Gilmore, J.,\n         \
    \     Weiler, S., and T. Kivinen, \"Using Raw Public Keys in\n              Transport\
    \ Layer Security (TLS) and Datagram Transport\n              Layer Security (DTLS)\"\
    , RFC 7250, DOI 10.17487/RFC7250,\n              June 2014, <https://www.rfc-editor.org/info/rfc7250>.\n\
    \   [RFC7414]  Duke, M., Braden, R., Eddy, W., Blanton, E., and A.\n         \
    \     Zimmermann, \"A Roadmap for Transmission Control Protocol\n            \
    \  (TCP) Specification Documents\", RFC 7414,\n              DOI 10.17487/RFC7414,\
    \ February 2015,\n              <https://www.rfc-editor.org/info/rfc7414>.\n \
    \  [RFC8041]  Bonaventure, O., Paasch, C., and G. Detal, \"Use Cases and\n   \
    \           Operational Experience with Multipath TCP\", RFC 8041,\n         \
    \     DOI 10.17487/RFC8041, January 2017,\n              <https://www.rfc-editor.org/info/rfc8041>.\n\
    \   [RFC8305]  Schinazi, D. and T. Pauly, \"Happy Eyeballs Version 2:\n      \
    \        Better Connectivity Using Concurrency\", RFC 8305,\n              DOI\
    \ 10.17487/RFC8305, December 2017,\n              <https://www.rfc-editor.org/info/rfc8305>.\n\
    \   [RFC8446]  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n \
    \             Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n  \
    \            <https://www.rfc-editor.org/info/rfc8446>.\n   [RFC8548]  Bittau,\
    \ A., Giffin, D., Handley, M., Mazieres, D., Slack,\n              Q., and E.\
    \ Smith, \"Cryptographic Protection of TCP Streams\n              (tcpcrypt)\"\
    , RFC 8548, DOI 10.17487/RFC8548, May 2019,\n              <https://www.rfc-editor.org/info/rfc8548>.\n\
    \   [TCPM-CONVERTER]\n              Boucadair, M. and C. Jacquenet, \"RADIUS Extensions\
    \ for\n              0-RTT TCP Converters\", Work in Progress, Internet-Draft,\n\
    \              draft-boucadair-opsawg-tcpm-converter-01, 28 February\n       \
    \       2020, <https://tools.ietf.org/html/draft-boucadair-opsawg-\n         \
    \     tcpm-converter-01>.\n   [TS23501]  3GPP (3rd Generation Partnership Project),\
    \ \"Technical\n              Specification Group Services and System Aspects;\
    \ System\n              architecture for the 5G System; Stage 2 (Release 16)\"\
    ,\n              2019, <https://www.3gpp.org/ftp/Specs/\n              archive/23_series/23.501/>.\n"
- title: Appendix A.  Example Socket API Changes to Support the 0-RTT TCP Convert
  contents:
  - "Appendix A.  Example Socket API Changes to Support the 0-RTT TCP Convert\n  \
    \           Protocol\n"
- title: A.1.  Active Open (Client Side)
  contents:
  - "A.1.  Active Open (Client Side)\n   On the Client side, the support of the 0-RTT\
    \ Converter protocol does\n   not require any other changes than those identified\
    \ in Appendix A of\n   [RFC7413].  Those modifications are already supported by\
    \ multiple TCP\n   stacks.\n   As an example, on Linux, a Client can send the\
    \ 0-RTT Convert message\n   inside a SYN by using sendto with the MSG_FASTOPEN\
    \ flag as shown in\n   the example below:\n     s = socket(AF_INET, SOCK_STREAM,\
    \ 0);\n     sendto(s, buffer, buffer_len, MSG_FASTOPEN,\n                    (struct\
    \ sockaddr *) &server_addr, addr_len);\n   The Client side of the Linux TFO can\
    \ be used in two different modes\n   depending on the host configuration (sysctl\
    \ tcp_fastopen variable):\n   0x1:  (client) enables sending data in the opening\
    \ SYN on the Client.\n   0x4:  (client) enables sending data in the opening SYN\
    \ regardless of\n      cookie availability and without a cookie option.\n   By\
    \ setting this configuration variable to 0x5, a Linux Client using\n   the above\
    \ code would send data inside the SYN without using a TFO\n   option.\n"
- title: A.2.  Passive Open (Converter Side)
  contents:
  - "A.2.  Passive Open (Converter Side)\n   The Converter needs to enable the reception\
    \ of data inside the SYN\n   independently of the utilization of the TFO option.\
    \  This implies\n   that the Transport Converter application cannot rely on the\
    \ Fast Open\n   Cookies to validate the reachability of the IP address that sent\
    \ the\n   SYN.  It must rely on other techniques, such as the Cookie TLV\n   described\
    \ in this document, to verify this reachability.\n   [RFC7413] suggested the utilization\
    \ of a TCP_FASTOPEN socket option\n   to enable the reception of SYNs containing\
    \ data.  Later, Appendix A\n   of [RFC7413] mentioned:\n   |  Traditionally, accept()\
    \ returns only after a socket is connected.\n   |  But, for a Fast Open connection,\
    \ accept() returns upon receiving a\n   |  SYN with a valid Fast Open cookie and\
    \ data, and the data is\n   |  available to be read through, e.g., recvmsg(),\
    \ read().\n   To support the 0-RTT TCP Convert Protocol, this behavior should\
    \ be\n   modified as follows:\n   |  Traditionally, accept() returns only after\
    \ a socket is connected.\n   |  But, for a Fast Open connection, accept() returns\
    \ upon receiving a\n   |  SYN with data, and the data is available to be read\
    \ through, e.g.,\n   |  recvmsg(), read().  The application that receives such\
    \ SYNs with\n   |  data must be able to validate the reachability of the source\
    \ of\n   |  the SYN and also deal with replayed SYNs.\n   The Linux Server side\
    \ can be configured with the following sysctls:\n   0x2:  (server) enables the\
    \ Server support, i.e., allowing data in a\n      SYN packet to be accepted and\
    \ passed to the application before a\n      3-way handshake finishes.\n   0x200:\
    \  (server) accepts data-in-SYN w/o any cookie option present.\n   However, this\
    \ configuration is system wide.  This is convenient for\n   typical Transport\
    \ Converter deployments where no other applications\n   relying on TFO are collocated\
    \ on the same device.\n   Recently, the TCP_FASTOPEN_NO_COOKIE socket option has\
    \ been added to\n   provide the same behavior on a per-socket basis.  This enables\
    \ a\n   single host to support both Servers that require the Fast Open Cookie\n\
    \   and Servers that do not use it.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Although they could disagree with the contents of the document,\
    \ we\n   would like to thank Joe Touch and Juliusz Chroboczek, whose comments\n\
    \   on the MPTCP mailing list have forced us to reconsider the design of\n   the\
    \ solution several times.\n   We would like to thank Raphael Bauduin, Stefano\
    \ Secci, Anandatirtha\n   Nandugudi, and Gregory Vander Schueren for their help\
    \ in preparing\n   this document.  Nandini Ganesh provided valuable feedback about\
    \ the\n   handling of TFO and the error codes.  Yuchung Cheng and Praveen\n  \
    \ Balasubramanian helped to clarify the discussion on supplying data in\n   SYNs.\
    \  Phil Eardley and Michael Scharf helped to clarify different\n   parts of the\
    \ text.  Thanks to \xC9ric Vyncke, Roman Danyliw, Benjamin\n   Kaduk, and Alexey\
    \ Melnikov for the IESG review, and Christian Huitema\n   for the Security Directorate\
    \ review.\n   Many thanks to Mirja K\xFChlewind for the detailed AD review.\n\
    \   This document builds upon earlier documents that proposed various\n   forms\
    \ of Multipath TCP proxies: [MPTCP-PLAIN], [MPTCP-TRANSPARENT],\n   and [HOT-MIDDLEBOX13].\n\
    \   From [MPTCP-PLAIN]:\n   Many thanks to Chi Dung Phung, Mingui Zhang, Rao Shoaib,\
    \ Yoshifumi\n   Nishida, and Christoph Paasch for their valuable comments.\n \
    \  Thanks to Ian Farrer, Mikael Abrahamsson, Alan Ford, Dan Wing, and\n   Sri\
    \ Gundavelli for the fruitful discussions at IETF 95 (Buenos\n   Aires).\n   Special\
    \ thanks to Pierrick Seite, Yannick Le Goff, Fred Klamm, and\n   Xavier Grall\
    \ for their input.\n   Thanks also to Olaf Schleusing, Martin Gysi, Thomas Zasowski,\
    \ Andreas\n   Burkhard, Silka Simmen, Sandro Berger, Michael Melloul, Jean-Yves\n\
    \   Flahaut, Adrien Desportes, Gregory Detal, Benjamin David, Arun\n   Srinivasan,\
    \ and Raghavendra Mallya for their input.\n"
- title: Contributors
  contents:
  - "Contributors\n   Bart Peirens contributed to an early draft version of this document.\n\
    \   As noted above, this document builds on two previous documents.\n   The authors\
    \ of [MPTCP-PLAIN] were:\n   *  Mohamed Boucadair\n   *  Christian Jacquenet\n\
    \   *  Olivier Bonaventure\n   *  Denis Behaghel\n   *  Stefano Secci\n   *  Wim\
    \ Henderickx\n   *  Robert Skog\n   *  Suresh Vinapamula\n   *  SungHoon Seo\n\
    \   *  Wouter Cloetens\n   *  Ullrich Meyer\n   *  Luis M. Contreras\n   *  Bart\
    \ Peirens\n   The authors of [MPTCP-TRANSPARENT] were:\n   *  Bart Peirens\n \
    \  *  Gregory Detal\n   *  Sebastien Barre\n   *  Olivier Bonaventure\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Olivier Bonaventure (editor)\n   Tessares\n   Avenue Jean\
    \ Monnet 1\n   B-1348 Louvain-la-Neuve\n   Belgium\n   Email: Olivier.Bonaventure@tessares.net\n\
    \   Mohamed Boucadair (editor)\n   Orange\n   Clos Courtel\n   35000 Rennes\n\
    \   France\n   Email: mohamed.boucadair@orange.com\n   Sri Gundavelli\n   Cisco\n\
    \   170 West Tasman Drive\n   San Jose, CA 95134\n   United States of America\n\
    \   Email: sgundave@cisco.com\n   SungHoon Seo\n   Korea Telecom\n   151 Taebong-ro\n\
    \   Seocho-gu, Seoul, 06763\n   Republic of Korea\n   Email: sh.seo@kt.com\n \
    \  Benjamin Hesmans\n   Tessares\n   Avenue Jean Monnet 1\n   B-1348 Louvain-la-Neuve\n"
