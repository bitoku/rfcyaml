- contents:
  - '       Enhancements to RTP Payload Formats for EVRC Family Codecs

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document updates the Enhanced Variable Rate Codec (EVRC) RTP\n
    \  payload formats defined in RFC 3558 with several enhancements and\n   extensions.
    \ In particular, it defines support for the header-free\n   and interleaved/bundled
    packet formats for the EVRC-B codec, a new\n   compact bundled format for the
    EVRC and EVRC-B codecs, as well as\n   discontinuous transmission (DTX) support
    for EVRC and EVRC-B-encoded\n   speech transported via RTP.  Voice over IP (VoIP)
    applications\n   operating over low bandwidth dial-up and wireless networks require\n
    \  such enhancements for efficient use of the bandwidth.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n     1.1.  Support of EVRC-B Codec  . . . . . . . . . . . . .
    . . . .  3\n     1.2.  Compact (Header-free) Bundled Format . . . . . . . . .
    . .  3\n     1.3.  Discontinuous Transmission (DTX) . . . . . . . . . . . . .
    \ 4\n   2.  Conventions  . . . . . . . . . . . . . . . . . . . . . . . . .  5\n
    \  3.  EVRC-B Codec . . . . . . . . . . . . . . . . . . . . . . . . .  5\n   4.
    \ Compact Bundled Format . . . . . . . . . . . . . . . . . . . .  5\n     4.1.
    \ Single-Rate Operation  . . . . . . . . . . . . . . . . . .  5\n   5.  Storage
    Format for EVRC-B Codec  . . . . . . . . . . . . . . .  6\n   6.  Media Type Definitions
    . . . . . . . . . . . . . . . . . . . .  6\n     6.1.  Registration of Media Type
    EVRC1 . . . . . . . . . . . . .  6\n     6.2.  Registration of Media Type EVRCB
    . . . . . . . . . . . . .  9\n     6.3.  Registration of Media Type EVRCB0  .
    . . . . . . . . . . . 11\n     6.4.  Registration of Media Type EVRCB1  . . .
    . . . . . . . . . 12\n     6.5.  Updated Registration of Media Type EVRC  . .
    . . . . . . . 13\n     6.6.  Updated Registration of Media Type EVRC0 . . . .
    . . . . . 15\n     6.7.  Mapping MIME Parameters into SDP . . . . . . . . . .
    . . . 17\n     6.8.  Usage in Offer/Answer  . . . . . . . . . . . . . . . . .
    . 18\n   7.  Backward Compatibility with RFC 3558 . . . . . . . . . . . . . 19\n
    \  8.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 19\n   9.
    \ Security Considerations  . . . . . . . . . . . . . . . . . . . 19\n   10. Acknowledgements
    . . . . . . . . . . . . . . . . . . . . . . . 19\n   11. References . . . . .
    . . . . . . . . . . . . . . . . . . . . . 20\n     11.1. Normative References
    . . . . . . . . . . . . . . . . . . . 20\n     11.2. Informative References .
    . . . . . . . . . . . . . . . . . 20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines support for the header-free and interleaved/\n
    \  bundled packet formats for the EVRC-B codec, a new compact bundled\n   format
    for the EVRC and EVRC-B codecs, as well as discontinuous\n   transmission (DTX)
    support for EVRC and EVRC-B-encoded speech\n   transported via RTP.  Voice over
    IP (VoIP) applications operating\n   over low bandwidth dial-up and wireless networks
    require such EVRC\n   RTP payload capabilities for efficient use of the bandwidth.\n"
  - contents:
    - "1.1.  Support of EVRC-B Codec\n   EVRC-B [3] is an extension to EVRC [2] developed
      in the Third\n   Generation Partnership Project 2 (3GPP2).  EVRC-B [3] compresses
      each\n   20 milliseconds of 8000Hz, 16-bit sampled speech input into output\n
      \  frames of one of the four different sizes: Rate 1 (171 bits), Rate\n   1/2
      (80 bits), Rate 1/4 (40 bits), or Rate 1/8 (16 bits).  In\n   addition, there
      are two zero-bit codec frame types: null frames and\n   erasure frames, similar
      to EVRC [2].  One significant enhancement in\n   EVRC-B is the use of 1/4-rate
      frames that were not used in EVRC.\n   This provides lower average data rates
      (ADRs) compared to EVRC, for a\n   given voice quality.\n   Since speech frames
      encoded by EVRC-B are different from those\n   encoded by EVRC, EVRC-B and EVRC
      codecs do not interoperate with each\n   other.  At the initiation of an RTP
      session, the RTP sender and\n   receiver need to indicate (e.g., using MIME
      subtypes that are\n   separate from those of EVRC) that EVRC-B is to be used
      for the\n   ensuing session.\n"
    title: 1.1.  Support of EVRC-B Codec
  - contents:
    - "1.2.  Compact (Header-free) Bundled Format\n   The current interleaved/bundled
      packet format defined in RFC 3558\n   allows bundling of multiple speech frames
      of different rates in a\n   single RTP packet, sending mode change requests,
      and interleaving.\n   To support these functions, a Table of Contents (ToC)
      is used in each\n   RTP packet, in addition to the standard RTP header.  The
      size of the\n   ToC varies depending on the number of EVRC frames carried in
      the\n   packet [4].\n   The current header-free packet format defined in RFC
      3558 is more\n   compact and optimized for use over wireless links.  It eliminates
      the\n   need for a ToC by requiring that each RTP packet contain only one\n
      \  speech frame (of any allowable rate), i.e., bundling is not allowed.\n   Moreover,
      interleaving and mode change requests are not supported in\n   the header-free
      format [4].\n   The compact bundled format described in this document presents
      the\n   user an alternative to the header-free format defined in RFC 3558.\n
      \  This format allows bundling of multiple EVRC or EVRC-B frames without\n   the
      addition of extra headers, as would be in the case of the\n   interleaved/bundled
      format.  However, in order to use this compact\n   bundled format, only one
      EVRC/EVRC-B rate (full rate or 1/2 rate) can\n   be used in the session.  Similar
      to the header-free format defined in\n   RFC 3558, interleaving and mode change
      requests are not supported in\n   the compact bundled format.\n"
    title: 1.2.  Compact (Header-free) Bundled Format
  - contents:
    - "1.3.  Discontinuous Transmission (DTX)\n   Information carried in frames of
      EVRC and EVRC-B codecs varies little\n   during periods of silence.  The transmission
      of these frames across\n   the radio interface in a wireless system is expensive,
      in terms of\n   capacity; therefore, suppression of these frames is desirable.
      \ Such\n   an operation is called DTX, also known as silence suppression.\n
      \  In general, when DTX/silence suppression is applied, the first few\n   frames
      of silence may be transmitted at the beginning of the period\n   of silence
      to establish background noise.  Then, a portion of the\n   stream of subsequent
      silence frames is not transmitted, and is\n   discarded at the sender.  At the
      receiver, background or comfort\n   noise may be generated by using the previously
      received silence\n   frames.\n   The full detail of DTX/silence suppression
      operation can be found in\n   DTX [8] as well as in RFC 3551 [9], and in RFC
      3558 [4].  This\n   document only defines the additional optional MIME parameters\n
      \  (silencesupp, dtxmax, dtxmin, and hangover) for setting up a DTX/\n   silence
      suppression session, where \"silencesupp\" is for indicating\n   the capability
      and willingness of using DTX/silence suppression;\n   \"dtxmax\" and \"dtxmin\",
      for indicating the desired range of DTX update\n   interval; and \"hangover\",
      for indicating the desired number of\n   silence frames at the beginning of
      each silence period to establish\n   background noise at the receiver (see Section
      6.1 for detailed\n   definition).\n   The EVRC and EVRC-B codecs, in variable-rate
      operation mode, send\n   1/8-rate frames during periods of silence, while in
      single-rate\n   operation mode (see Section 4), silence is encoded and sent
      in frames\n   of the same rate as that of speech frames.  The DTX parameters\n
      \  defined in this document apply to 1/8-rate frames in the variable-\n   rate
      mode and to silence frames in the single-rate operation mode.\n   For simplicity,
      in the rest of this document the term \"silence frame\"\n   refers either to
      an 1/8-rate frame in variable-rate operation or a\n   frame that contains only
      silence in the signal-rate operation.\n"
    title: 1.3.  Discontinuous Transmission (DTX)
  title: 1.  Introduction
- contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [1].\n"
  title: 2.  Conventions
- contents:
  - "3.  EVRC-B Codec\n   Three RTP packet formats are supported for the EVRC-B codec:
    the\n   interleaved/bundled packet format, the header-free packet format, and\n
    \  the compact bundled packet format.  For the interleaved/bundled and\n   header-free
    packet formats, the operational details and capabilities,\n   such as ToC, interleaving,
    and bundling, of EVRC-B, are exactly the\n   same as those of EVRC, as defined
    in RFC 3558 [4], except that the\n   mode change request field in the ToC MUST
    be interpreted according to\n   the definition of the RATE_REDUC parameter in
    EVRC-B [3].  The\n   compact bundled packet format for EVRC-B is defined in Section
    4 of\n   this document.\n"
  title: 3.  EVRC-B Codec
- contents:
  - "4.  Compact Bundled Format\n   A packet in the compact bundled format consists
    of an RTP header,\n   followed by a sequence of one or more consecutive EVRC/EVRC-B
    codec\n   data frames of the same rate, as shown below:\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                      RTP Header [4]                           |\n   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
    \  |                                                               |\n   |       One
    or more EVRC/EVRC-B data frames of same rate        |\n   |                             ....
    \                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  The codec data frames MUST be generated from the output of the codec\n   following
    the procedure described in Section 5.2 in RFC 3558 [4], and\n   all MUST be of
    the same rate and size.\n"
  - contents:
    - "4.1.  Single-Rate Operation\n   As mentioned earlier, in order to use the compact
      bundled format, all\n   the EVRC/EVRC-B data frames in the session MUST be of
      the same rate.\n   This packet format may carry only full or half-rate frames.\n
      \  For a session that uses the compact bundled format, the rate for the\n   session
      can be determined during the session setup signaling, for\n   example, via Session
      Description Protocol (SDP) exchanges.  See\n   Section 6 below for more details.\n"
    title: 4.1.  Single-Rate Operation
  title: 4.  Compact Bundled Format
- contents:
  - "5.  Storage Format for EVRC-B Codec\n   The storage format is used for storing
    EVRC-B-encoded speech frames,\n   e.g., as a file or e-mail attachment.\n   The
    file begins with a magic number to identify the vocoder that is\n   used.  The
    magic number for EVRC-B corresponds to the ASCII character\n   string:\n          \"#!EVRC-B\\n\"\n
    \         (or 0x2321 0x4556 0x5243 0x2d42 0x0a in hexadecimal).\n   Note that
    the \"\\n\" is an important part of both this magic number and\n   the \"#!EVRC\\n\"
    magic number defined in Section 11 of RFC 3558, and\n   the \"\\n\" MUST be included
    in any comparison of either magic number,\n   since, otherwise, a prefix of the
    EVRC-B magic number could be\n   mistaken for the EVRC magic number.\n   The codec
    data frames are stored in consecutive order, with a single\n   ToC entry field,
    extended to one octet, prefixing each codec data\n   frame.  The ToC field, as
    defined in Section 5.1 of [4], is extended\n   to one octet by setting the four
    most significant bits of the octet\n   to zero.  For example, a ToC value of 4
    (a full-rate frame) is stored\n   as 0x04.\n   Speech frames lost in transmission
    and non-received frames MUST be\n   stored as erasure frames to maintain synchronization
    with the\n   original media.\n"
  title: 5.  Storage Format for EVRC-B Codec
- contents:
  - '6.  Media Type Definitions

    '
  - contents:
    - "6.1.  Registration of Media Type EVRC1\n   Type name:  audio\n   Subtype names:
      \ EVRC1\n   Required parameters:  none\n   Optional parameters:\n      ptime:
      \ See RFC 4566 [7].\n      maxptime:  The maximum amount of media that can be
      encapsulated in\n         each packet, expressed as time in milliseconds.  The
      time MUST\n         be calculated as the sum of the time the media present in
      the\n         packet represents.  The time SHOULD be a multiple of the\n         duration
      of a single codec data frame (20 msec).  If not\n         signaled, the default
      maxptime value MUST be 200 milliseconds.\n      fixedrate:  Indicates the EVRC
      rate of the session while in\n         single-rate operation.  Valid values
      include: 0.5 and 1, where\n         a value of 0.5 indicates the 1/2 rate, while
      a value of 1\n         indicates the full rate.  If this parameter is not present,
      1/2\n         rate is assumed.\n      silencesupp:  Permissible values are 0
      and 1.  A value of 1\n         indicates that the sender of this parameter:
      a) is capable of\n         receiving silence-suppressed speech using DTX, AND
      b) is\n         capable of and will send out silence-suppressed speech using\n
      \        DTX, unless the other end indicates that it does not want to\n         receive
      silence-suppressed speech using DTX.\n         A value of 0 indicates that the
      sender of this parameter: a)\n         does NOT want to receive silence-suppressed
      speech using DTX,\n         AND b) will NOT send out silence-suppressed speech
      using DTX.\n         If this parameter is not present, the default value 1 MUST
      be\n         assumed.  If the RTP receiver indicates through the use of SIP\n
      \        signaling or other means that it is incapable of or unwilling\n         to
      use silence suppression using DTX, silence suppression using\n         DTX as
      specified in this document MUST NOT be used for the\n         session.\n      dtxmax:
      \ Permissible values are from 0 to 255.  Indicates the\n         maximum DTX
      update interval in number of frames.  During DTX,\n         the RTP sender occasionally
      updates the RTP receiver about the\n         change in background noise characteristics,
      etc., by sending a\n         new silence frame to the RTP receiver.  The RTP
      receiver may\n         use 'dtxmax' to indicate to the RTP sender the maximum
      interval\n         (in number of frames) between any two DTX updates it expects
      to\n         receive from the RTP sender.\n         If this parameter is not
      present in a session that uses DTX,\n         the default value 32, as specified
      in [8], MUST be assumed.\n         This parameter MUST be ignored if silence
      suppression using DTX\n         is not used for the session.\n         Note
      also that if the RTP receiver elects to detect DTX using\n         dtxmax, the
      dtxmax parameter will affect the amount of delay\n         the RTP receiver
      sees before detecting DTX in the stream.\n      dtxmin:  Permissible values
      are from 0 to 255.  Indicates the\n         minimum DTX update interval in number
      of frames.  The RTP\n         receiver may use 'dtxmin' to indicate to the RTP
      sender the\n         minimal interval (in number of frames) between any two
      DTX\n         updates it expects to receive from the RTP sender.\n         If
      this parameter is not present, the default value 12, as\n         specified
      in [8] MUST be assumed.  This parameter MUST be\n         ignored if silence
      suppression using DTX is not used for the\n         session.\n      hangover:
      \ Permissible values are from 0 to 255.  Indicates the\n         number of consecutive
      silence frames transmitted at the end of\n         an active speech interval
      but before the DTX interval begins.\n         When setting up an RTP session
      that uses DTX, an RTP receiver\n         can use this parameter to signal the
      number of silence frames\n         it expects to receive before the beginning
      of DTX.  While\n         hangover=0 is allowed, it is RECOMMENDED that hangover
      be set\n         to 1 or greater since the presence of silence frames at the
      end\n         of an active speech can help the RTP receiver to identify the\n
      \        beginning of the DTX period.\n         If this parameter is not present
      for a session that uses DTX,\n         the default value 1, as specified in
      [8] MUST be assumed.  This\n         parameter MUST be ignored if silence suppression
      using DTX is\n         not used for the session.\n   Encoding considerations:\n
      \     This media type is framed binary data (see RFC 4288, Section 4.8)\n      and
      is defined for transfer of EVRC-encoded data via RTP, using\n      the compact
      bundled format as described in RFC 4788.\n   Security considerations:  See Section
      9 of RFC 4788.\n   Interoperability considerations:  none\n   Published specification:\n
      \     The EVRC vocoder is specified in 3GPP2 C.S0014 [2].  Transfer\n      method
      with compact bundled RTP format is specified in RFC 4788.\n   Applications that
      use this media type:\n      It is expected that many VoIP applications (as well
      as mobile\n      applications) will use this type.\n   Additional information:
      \ none\n   Person & email address to contact for further information:\n      Qiaobing
      Xie <Qiaobing.Xie@motorola.com>\n   Intended usage:  COMMON\n   Restrictions
      on usage:\n      This media type depends on RTP framing; hence, it is only defined\n
      \     for transfer via RTP (RFC 3550 [5]).  Transfer within other\n      framing
      protocols is not defined at this time.\n   Author:\n      Qiaobing Xie\n   Change
      controller:\n      IETF Audio/Video Transport working group delegated from the
      IESG.\n"
    title: 6.1.  Registration of Media Type EVRC1
  - contents:
    - "6.2.  Registration of Media Type EVRCB\n   Type name:  audio\n   Subtype names:
      \ EVRCB\n   Required parameters:  none\n   Optional parameters:\n      ptime:
      \ see RFC 4566 [7].\n      maxptime:  The maximum amount of media that can be
      encapsulated in\n         each packet, expressed as time in milliseconds.  The
      time MUST\n         be calculated as the sum of the time the media present in
      the\n         packet represents.  The time SHOULD be a multiple of the\n         duration
      of a single codec data frame (20 msec).  If not\n         signaled, the default
      maxptime value MUST be 200 milliseconds.\n      maxinterleave:  Maximum number
      for interleaving length (field LLL\n         in the Interleaving Octet).  The
      interleaving lengths used in\n         the entire session MUST NOT exceed this
      maximum value.  If not\n         signaled, the maxinterleave length MUST be
      5.\n      silencesupp:  see Section 6.1 for definition.  If this parameter\n
      \        is not present, the default value 1 MUST be assumed.\n      dtxmax:
      \ see Section 6.1\n      dtxmin:  see Section 6.1\n      hangover:  see Section
      6.1\n   Encoding considerations:\n      This media type is framed binary data
      (see RFC 4288, Section 4.8)\n      and is defined for transfer of EVRC-B-encoded
      data via RTP using\n      the Interleaved/Bundled packet format specified in
      RFC 3558 [4].\n   Security considerations:  See Section 9 of RFC 4788.\n   Interoperability
      considerations:  none\n   Published specification:\n      The EVRC-B vocoder
      is specified in 3GPP2 C.S0014-B [3].  Transfer\n      method with Interleaved/Bundled
      packet format via RTP is specified\n      in RFC 3558.\n   Applications that
      use this media type:\n      It is expected that many VoIP applications (as well
      as mobile\n      applications) will use this type.\n   Additional information:\n
      \     The following information applies for storage format only.\n      Magic
      number: #!EVRC-B\\n (see Section 5 of RFC 4788)\n      File extensions: evb,
      EVB\n      Macintosh file type code: None\n      Object identifier or OID: None\n
      \  Person & email address to contact for further information:\n      Qiaobing
      Xie <Qiaobing.Xie@motorola.com>\n   Intended usage:  COMMON\n   Restrictions
      on usage:\n      This media type may be used with RTP framing (RFC 3550 [5])
      and as\n      a storage format.  When used with RTP, the procedures in Section
      3\n      MUST be followed.  In all other contexts, the storage format\n      defined
      in Section 5 MUST be used.\n   Author:\n      Qiaobing Xie\n   Change controller:\n
      \     IETF Audio/Video Transport working group delegated from the IESG.\n"
    title: 6.2.  Registration of Media Type EVRCB
  - contents:
    - "6.3.  Registration of Media Type EVRCB0\n   Type name:  audio\n   Subtype names:
      \ EVRCB0\n   Required parameters:  none\n   Optional parameters:\n      silencesupp:
      \ see Section 6.1 for definition.  If this parameter\n         is not present,
      the default value 1 MUST be assumed.\n      dtxmax:  see Section 6.1\n      dtxmin:
      \ see Section 6.1\n      hangover:  see Section 6.1\n   Encoding considerations:\n
      \     This media type is framed binary data (see RFC 4288, Section 4.8)\n      and
      is defined for transfer of EVRC-B-encoded data via RTP using\n      the Header-Free
      packet format specified in RFC 3558 [4].\n   Security considerations:  See Section
      9 of RFC 4788.\n   Interoperability considerations:  none\n   Published specification:\n
      \     The EVRC-B vocoder is specified in 3GPP2 C.S0014-B [3].  Transfer\n      method
      with Header-Free packet format via RTP is specified in RFC\n      3558 and RFC
      4788.\n   Applications that use this media type:\n      It is expected that
      many VoIP applications (as well as mobile\n      applications) will use this
      type.\n   Additional information:  none\n   Person & email address to contact
      for further information:\n      Qiaobing Xie <Qiaobing.Xie@motorola.com>\n   Intended
      usage:  COMMON\n   Restrictions on usage:\n      This media type depends on
      RTP framing; hence, it is only defined\n      for transfer via RTP (RFC 3550
      [5]).  Transfer within other\n      framing protocols is not defined at this
      time.\n   Author:\n      Qiaobing Xie\n   Change controller:\n      IETF Audio/Video
      Transport working group delegated from the IESG.\n"
    title: 6.3.  Registration of Media Type EVRCB0
  - contents:
    - "6.4.  Registration of Media Type EVRCB1\n   Type name:  audio\n   Subtype names:
      \ EVRCB1\n   Required parameters:  none\n   Optional parameters:\n      ptime:
      \ see RFC 4566 [7].\n      maxptime:  The maximum amount of media that can be
      encapsulated in\n         each packet, expressed as time in milliseconds.  The
      time MUST\n         be calculated as the sum of the time the media present in
      the\n         packet represents.  The time SHOULD be a multiple of the\n         duration
      of a single codec data frame (20 msec).  If not\n         signaled, the default
      maxptime value MUST be 200 milliseconds.\n      fixedrate:  Indicates the EVRC-B
      rate of the session while in\n         single-rate operation.  Valid values
      include: 0.5 and 1, where\n         a value of 0.5 indicates the 1/2 rate while
      a value of 1\n         indicates the full rate.  If this parameter is not present,
      1/2\n         rate is assumed.\n      silencesupp:  see Section 6.1 for definition.
      \ If this parameter\n         is not present, the default value 1 MUST be assumed.\n
      \     dtxmax:  see Section 6.1\n      dtxmin:  see Section 6.1\n      hangover:
      \ see Section 6.1\n   Encoding considerations:\n      This media type is framed
      binary data (see RFC 4288, Section 4.8)\n      and is defined for transfer of
      EVRC-B-encoded data via RTP using\n      the compact bundled format as described
      in RFC 4788.\n   Security considerations:  See Section 9 of RFC 4788.\n   Interoperability
      considerations:  none.\n   Published specification:\n      The EVRC-B vocoder
      is specified in 3GPP2 C.S0014-B [3].  Transfer\n      method with compact bundled
      RTP format is specified in RFC 4788.\n   Applications that use this media type:\n
      \     It is expected that many VoIP applications (as well as mobile\n      applications)
      will use this type.\n   Additional information:  none\n   Person & email address
      to contact for further information:\n      Qiaobing Xie <Qiaobing.Xie@motorola.com>\n
      \  Intended usage:  COMMON\n   Restrictions on usage:\n      This media type
      depends on RTP framing; hence, it is only defined\n      for transfer via RTP
      (RFC 3550 [5]).  Transfer within other\n      framing protocols is not defined
      at this time.\n   Author:\n      Qiaobing Xie\n   Change controller:\n      IETF
      Audio/Video Transport working group delegated from the IESG.\n"
    title: 6.4.  Registration of Media Type EVRCB1
  - contents:
    - "6.5.  Updated Registration of Media Type EVRC\n   (The definition is from RFC
      3558, added with the optional DTX\n   parameters, and updated with the new template
      specified in [10].)\n   Type name:  audio\n   Subtype names:  EVRC\n   Required
      parameters:  none\n   Optional parameters:\n      ptime:  Defined as usual for
      RTP audio (see RFC 4566).\n      maxptime:  The maximum amount of media that
      can be encapsulated in\n         each packet, expressed as time in milliseconds.
      \ The time SHALL\n         be calculated as the sum of the time the media present
      in the\n         packet represents.  The time SHOULD be a multiple of the\n
      \        duration of a single codec data frame (20 msec).  If not\n         signaled,
      the default maxptime value SHALL be 200 milliseconds.\n      maxinterleave:
      \ Maximum number for interleaving length (field LLL\n         in the Interleaving
      Octet).  The interleaving lengths used in\n         the entire session MUST
      NOT exceed this maximum value.  If not\n         signaled, the maxinterleave
      length SHALL be 5.\n      silencesupp:  see Section 6.1 for definition.  If
      this parameter\n         is not present, the default value 1 MUST be assumed.\n
      \     dtxmax:  see Section 6.1\n      dtxmin:  see Section 6.1\n      hangover:
      \ see Section 6.1\n   Encoding considerations:\n      This media type is framed
      binary data (see RFC 4288, Section 4.8),\n      and is defined for transfer
      of EVRC-encoded data via RTP using the\n      Interleaved/Bundled packet format
      specified in Sections 4.1, 6,\n      and 7 of RFC 3558.  It is also defined
      for other transfer methods\n      using the storage format specified in Section
      11 of RFC 3558.\n   Security considerations:  See Section 14, \"Security Considerations\",\n
      \     of RFC 3558.\n   Interoperability considerations:\n      The DTX parameters
      are receiver options.  Existing RFC 3558\n      implementations will not send
      any of the DTX parameters in their\n      SDP and will ignore any DTX parameters
      they receive.  The adaptive\n      DTX behavior of DTX-capable EVRC codecs (as
      detailed in [8],\n      Section 4.3.5) ensures interoperability with non-DTX
      EVRC codecs.\n   Published specification:\n      The EVRC vocoder is specified
      in 3GPP2 C.S0014 [2].  Transfer\n      methods are specified in RFC 3558.\n
      \  Applications that use this media type:\n      It is expected that many VoIP
      applications (as well as mobile\n      applications) will use this type.\n   Additional
      information:\n      The following information applies for storage format only.\n
      \        Magic number: #!EVRC\\n (see Section 11 of RFC 3558)\n         File
      extensions: evc, EVC\n         Macintosh file type code: none\n         Object
      identifier or OID: none\n   Person & email address to contact for further information:\n
      \     Qiaobing Xie <Qiaobing.Xie@motorola.com>\n   Intended usage:  COMMON\n
      \  Restrictions on usage:\n      This media type may be used with RTP framing
      (RFC 3550 [5]) and as\n      a storage format.  When used with RTP, the procedures
      in RFC 3558,\n      Section 4.1, MUST be followed.  In all other contexts, the
      storage\n      format defined in RFC 3558, Section 11, MUST be used.\n   Author:\n
      \     Adam Li/Qiaobing Xie\n   Change controller:\n      IETF Audio/Video Transport
      working group delegated from the IESG.\n"
    title: 6.5.  Updated Registration of Media Type EVRC
  - contents:
    - "6.6.  Updated Registration of Media Type EVRC0\n   (The definition is from
      RFC 3558, added with the optional DTX\n   parameters, and updated with the new
      template specified in [10].)\n   Type name:  audio\n   Subtype names:  EVRC0\n
      \  Required parameters:  none\n   Optional parameters:\n      silencesupp:  see
      Section 6.1 for definition.  If this parameter\n         is not present, the
      default value 1 MUST be assumed.\n      dtxmax:  see Section 6.1\n      dtxmin:
      \ see Section 6.1\n      hangover:  see Section 6.1\n   Encoding considerations:\n
      \     This media type is framed binary data (see RFC 4288, Section 4.8)\n      and
      is only defined for transfer of EVRC-encoded data via RTP\n      using the Header-Free
      packet format specified in Section 4.2 of\n      RFC 3558.\n   Security considerations:
      \ See Section 14, \"Security Considerations\",\n      of RFC 3558.\n   Interoperability
      considerations:\n      The DTX parameters are receiver options.  Existing RFC
      3558\n      implementations will not send any of the DTX parameters in their\n
      \     SDP and will ignore any DTX parameters they receive.  The adaptive\n      DTX
      behavior of DTX-capable EVRC codecs (as detailed in [8],\n      Section 4.3.5)
      ensures interoperability with non-DTX EVRC codecs.\n   Published specification:\n
      \     The EVRC vocoder is specified in 3GPP2 C.S0014 [2].  Transfer\n      methods
      are specified in RFC 3558.\n   Applications that use this media type:\n      It
      is expected that many VoIP applications (as well as mobile\n      applications)
      will use this type.\n   Additional information:  none\n   Person & email address
      to contact for further information:\n      Qiaobing Xie <Qiaobing.Xie@motorola.com>\n
      \  Intended usage:  COMMON\n   Restrictions on usage:\n      This media type
      depends on RTP framing; hence, it is only defined\n      for transfer via RTP
      (RFC 3550 [5]).  Transfer within other\n      framing protocols is not defined
      at this time.\n   Author:\n      Adam Li/Qiaobing Xie\n   Change controller:\n
      \     IETF Audio/Video Transport working group delegated from the IESG.\n"
    title: 6.6.  Updated Registration of Media Type EVRC0
  - contents:
    - "6.7.  Mapping MIME Parameters into SDP\n   The information carried in the MIME
      media type specification has a\n   specific mapping to fields in the Session
      Description Protocol (SDP)\n   [7], which is commonly used to describe RTP sessions.
      \ When SDP is\n   used to specify sessions employing the compact bundled format
      for\n   EVRC/EVRC-B-encoded speech, the mapping is as follows:\n   o  The MIME
      type (\"audio\") goes in SDP \"m=\" as the media name.\n   o  The MIME subtype
      (\"EVRC\", \"EVRC0\", \"EVRC1\", \"EVRCB\", EVRCB0\", or\n      \"EVRCB1\")
      goes in SDP \"a=rtpmap\" as the encoding name.\n   o  The optional parameters
      \"ptime\" and \"maxptime\" (for subtypes EVRC,\n      EVRC1, EVRCB, and EVRCB1)
      go in the SDP \"a=ptime\" and \"a=maxptime\"\n      attributes, respectively.\n
      \  o  The optional parameter \"maxinterleave\" (for subtypes EVRC and\n      EVRCB)
      goes in the SDP \"a=fmtp\" attribute by copying it directly\n      from the
      MIME media type string as \"maxinterleave=value\".\n   o  The optional parameter
      \"fixedrate\" (for subtypes EVRC1 and EVRCB1)\n      goes in the \"a=fmtp\"
      attribute by copying it directly from the\n      MIME media type string as \"fixedrate=value\".\n
      \  o  The optional parameters \"silencesupp\", \"dtxmax\", \"dtxmin\", and\n
      \     \"hangover\" go in the \"a=fmtp\" attribute by copying it directly\n      from
      the MIME media type string as \"silencesupp=value\",\n      \"dtxmax=value\",
      \"dtxmin=value\", and \"hangover=value\",\n      respectively.\n   Example of
      usage of EVRC1:\n     m=audio 49120 RTP/AVP 97\n     a=rtpmap:97 EVRC1/8000\n
      \    a=fmtp:97 fixedrate=0.5\n     a=maxptime:120\n   Example of usage of EVRCB:\n
      \    m=audio 49120 RTP/AVP 97\n     a=rtpmap:97 EVRCB/8000\n     a=maxptime:120\n
      \  Example of usage of EVRCB0:\n     m=audio 49120 RTP/AVP 97\n     a=rtpmap:97
      EVRCB0/8000\n   Example of usage of EVRCB1:\n     m=audio 49120 RTP/AVP 97\n
      \    a=rtpmap:97 EVRCB1/8000\n     a=fmtp:97 fixedrate=0.5\n     a=maxptime:100\n
      \  Example of usage of EVRC with DTX with silencesupp=1:\n     m=audio 49120
      RTP/AVP 97\n     a=rtpmap:97 EVRC/8000\n     a=fmtp:97 silencesupp=1 dtxmax=32
      dtxmin=12 hangover=1\n   Example of usage of EVRC with DTX with silencesupp=0:\n
      \    m=audio 49120 RTP/AVP 97\n     a=rtpmap:97 EVRC/8000\n     a=fmtp:97 silencesupp=0\n"
    title: 6.7.  Mapping MIME Parameters into SDP
  - contents:
    - "6.8.  Usage in Offer/Answer\n   All SDP parameters in this payload format are
      declarative, and all\n   reasonable values are expected to be supported.  In
      particular, when\n   DTX is supported, the RTP sender implementation SHOULD
      support\n   hangover, dtxmin, and dtxmax values from 0 to 255.  Thus, the\n
      \  standard usage of Offer/Answer, as described in RFC 3264 [6], SHOULD\n   be
      followed.\n   In addition, the following rules MUST be followed while negotiating\n
      \  DTX parameters:\n   1.  If any DTX parameter is not present in either offer
      and/or\n       answer, the default value of the DTX parameter MUST be assumed.\n
      \  2.  If silencesupp is present and set to 0 in either offer or answer,\n       the
      values of all received DTX parameters other than silencesupp\n       SHOULD
      be ignored.\n   3.  In an offer or answer, the value of dtxmax SHOULD always
      be\n       larger than or equal to the value of dtxmin, regardless of\n       whether
      the values are indicated explicitly or implicitly by\n       default.  Moreover,
      if the indicated value of dtxmin is larger\n       than that of dtxmax, an RTP
      sender MUST ignore the indicated\n       values and MUST fall back on using
      the default dtxmin and dtxmax\n       values.\n"
    title: 6.8.  Usage in Offer/Answer
  title: 6.  Media Type Definitions
- contents:
  - "7.  Backward Compatibility with RFC 3558\n   This document adds new optional
    DTX parameters to the original EVRC\n   payload subtypes \"EVRC\" and \"EVRC0\"
    defined in RFC 3558.  Since the\n   new DTX parameters are receiver options, we
    expect that the existing\n   RFC 3558 implementations will not send any of the
    DTX parameters in\n   their SDP and will ignore any DTX parameters they receive.
    \ The\n   adaptive DTX behavior of DTX-capable EVRC codecs (as detailed in [8],\n
    \  Section 4.3.5) ensures the backward interoperability between the DTX-\n   capable
    EVRC codec and non-DTX EVRC codecs.\n"
  title: 7.  Backward Compatibility with RFC 3558
- contents:
  - "8.  IANA Considerations\n   Four (4) new MIME subtype registrations - \"EVRC1\",
    \"EVRCB\", \"EVRCB0\",\n   and \"EVRCB1\" - are defined in this document (see
    Section 6.1 -\n   Section 6.4) for EVRC-B and compact bundled payload format support.\n
    \  For all the EVRC and EVRC-B RTP payload formats defined in RFC 3558\n   [4]
    and RFC 4788, four additional optional parameters -\n   \"silencesupp\", \"dtxmax\",
    \"dtxmin\", and \"hangover\" - are defined and\n   used in DTX.\n   The MIME subtype
    registrations \"EVRC\" and \"EVRC0\", originally defined\n   in RFC 3558 [4],
    are updated with the optional DTX parameters (see\n   Sections 6.5 and 6.6).\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   Implementations using the payload defined in
    this specification are\n   subject to the security considerations discussed in
    RFC 3558 [4], RFC\n   3550 [5], and any appropriate profile (for example, RFC
    3551 [9]).\n   This payload does not specify any different security services.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Acknowledgements\n   The following people have made significant contributions
    to this\n   document (in alphabetical order): Parag Agashe, Jim Ashley,\n   Harikishan
    Desineni, Serafin Diaz, Harinath Garudadri, Gouri\n   Johanssen, Ananth Kandhadai,
    Waqar Mohsin, Ashok Roy, Gino Scribano,\n   and Gajinder Singh Vij.\n   Special
    thanks to Colin Perkins, Magnus Westerlund, and Adam Li for\n   their careful
    review and comments that significantly improved the\n   quality of this document.\n"
  title: 10.  Acknowledgements
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n
      \  [2]   \"Enhanced Variable Rate Codec, Speech Service Option 3 for\n         Wideband
      Spread Spectrum Digital Systems\", 3GPP2 C.S0014,\n         January 1997.\n
      \  [3]   \"Enhanced Variable Rate Codec, Speech Service Option 3 and 68\n         for
      Wideband Spread Spectrum Digital Systems\", 3GPP2 C.S0014-B\n         v1.0,
      May 2006.\n   [4]   Li, A., \"RTP Payload Format for Enhanced Variable Rate
      Codecs\n         (EVRC) and Selectable Mode Vocoders (SMV)\", RFC 3558,\n         July
      2003.\n   [5]   Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson,\n
      \        \"RTP: A Transport Protocol for Real-Time Applications\",\n         RFC
      3550, July 2003.\n   [6]   Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer
      Model with\n         the Session Description Protocol (SDP)\", RFC 3264, June
      2002.\n   [7]   Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n
      \        Description Protocol\", RFC 4566, July 2006.\n   [8]   \"Discontinuous
      Transmission (DTX) of Speech in cdma2000\n         Systems\", 3GPP2 C.S0076-0,
      Version 1.0, December 2005.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [9]   Schulzrinne, H. and S. Casner, \"RTP
      Profile for Audio and Video\n         Conferences with Minimal Control\", RFC
      3551, July 2003.\n   [10]  Casner, S., \"Media Type Registration of RTP Payload
      Formats\",\n         Work in Progress, March 2006.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Authors' Addresses\n   Qiaobing Xie\n   Motorola, Inc.\n   1501 W. Shure Drive,
    2-F9\n   Arlington Heights, IL  60004\n   US\n   Phone: +1-847-632-3028\n   EMail:
    Qiaobing.Xie@Motorola.com\n   Rohit Kapoor\n   Qualcomm Inc.\n   US\n   Phone:
    +1-858-845-1161\n   EMail: rkapoor@qualcomm.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR\n
    \  PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
