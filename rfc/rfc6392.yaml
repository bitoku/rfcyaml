- title: __initial_text__
  contents:
  - '                 A Survey of In-Network Storage Systems

    '
- title: Abstract
  contents:
  - "Abstract\n   This document surveys deployed and experimental in-network storage\n\
    \   systems and describes their applicability for the DECADE (DECoupled\n   Application\
    \ Data Enroute) architecture.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6392.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Survey Overview .................................................3\n  \
    \    2.1. Terminology and Concepts ...................................3\n    \
    \  2.2. Historical Context .........................................3\n   3. In-Network\
    \ Storage System Components ............................5\n      3.1. Data Access\
    \ Interface ......................................5\n      3.2. Data Management\
    \ Operations .................................5\n      3.3. Data Search Capability\
    \ .....................................6\n      3.4. Access Control Authorization\
    \ ...............................6\n      3.5. Resource Control Interface .................................6\n\
    \      3.6. Discovery Mechanism ........................................7\n  \
    \    3.7. Storage Mode ...............................................7\n   4.\
    \ In-Network Storage Systems ......................................7\n      4.1.\
    \ Amazon S3 ..................................................7\n      4.2. BranchCache\
    \ ................................................9\n      4.3. Cache-and-Forward\
    \ Architecture ............................11\n      4.4. Cloud Data Management\
    \ Interface ...........................12\n      4.5. Content Delivery Network\
    \ ..................................14\n      4.6. Delay-Tolerant Network ....................................16\n\
    \      4.7. Named Data Networking .....................................18\n  \
    \    4.8. Network of Information ....................................19\n    \
    \  4.9. Network Traffic Redundancy Elimination ....................22\n      4.10.\
    \ OceanStore ...............................................23\n      4.11. P2P\
    \ Cache ................................................24\n      4.12. Photo\
    \ Sharing ............................................26\n      4.13. Usenet ...................................................28\n\
    \      4.14. Web Cache ................................................29\n  \
    \    4.15. Observations Regarding In-Network Storage Systems ........31\n   5.\
    \ Storage and Other Related Protocols ............................32\n      5.1.\
    \ HTTP ......................................................32\n      5.2. iSCSI\
    \ .....................................................33\n      5.3. NFS .......................................................34\n\
    \      5.4. OAuth .....................................................36\n  \
    \    5.5. WebDAV ....................................................37\n    \
    \  5.6. Observations Regarding Storage and Related Protocols ......39\n   6. Conclusions\
    \ ....................................................40\n   7. Security Considerations\
    \ ........................................40\n   8. Contributors ...................................................40\n\
    \   9. Acknowledgments ................................................41\n  \
    \ 10. Informative References ........................................41\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   DECADE (DECoupled Application Data Enroute) is an architecture\
    \ that\n   provides applications with access to provider-based in-network\n  \
    \ storage for content distribution (hereafter referred to as only\n   \"in-network\
    \ storage\" in this document).  With access to in-network\n   storage, content\
    \ distribution applications can be designed to place\n   less load on network\
    \ infrastructure.  As a simple example, a peer of\n   a Peer-to-Peer (P2P) application\
    \ may upload to other peers through\n   its in-network storage, saving its usage\
    \ of last-mile uplink\n   bandwidth.  See [1] for further discussion.\n   A major\
    \ motivation for DECADE is the substantial increase in capacity\n   and reduction\
    \ in cost offered by storage systems.  For example, over\n   the last two decades,\
    \ there has been at least a 30-fold increase in\n   the amount of storage that\
    \ a customer can get for a given price (for\n   flash memory and hard disk drives)\
    \ [2] [3] [4].\n   High-capacity and low-cost in-network storage devices introduce\n\
    \   substantial opportunities.  One example of in-network storage is\n   content\
    \ caches supporting Web and P2P content.  DECADE differs from\n   existing content\
    \ caches whose control fully resides with the owners\n   of the caching devices\
    \ in that DECADE also allows applications to\n   control access to their allocated\
    \ in-network storage, as well as the\n   resources consumed while accessing that\
    \ storage (bandwidth,\n   connections, storage space).  While designed in the\
    \ context of P2P\n   applications, DECADE may be useful to other applications\
    \ as well.\n   This document provides details on deployed and experimental\n \
    \  in-network storage solutions, and evaluates their suitability for\n   DECADE.\n\
    \   We note that the survey presented in this document is only\n   representative\
    \ of the research in this area.  Rather than trying to\n   enumerate an exhaustive\
    \ list, we have chosen some typical techniques\n   that lead to derivative works.\n"
- title: 2.  Survey Overview
  contents:
  - '2.  Survey Overview

    '
- title: 2.1.  Terminology and Concepts
  contents:
  - "2.1.  Terminology and Concepts\n   This document uses terms defined in [1].\n"
- title: 2.2.  Historical Context
  contents:
  - "2.2.  Historical Context\n   In-network storage has been used previously in numerous\
    \ scenarios to\n   reduce network traffic and enable more efficient content\n\
    \   distribution.  This section presents a brief history of content\n   distribution\
    \ techniques and illustrates how DECADE relates to past\n   approaches.  Systems\
    \ have been developed with particular use cases in\n   mind.  Thus, this survey\
    \ is not meant to point out shortcomings of\n   existing solutions, but rather\
    \ to indicate where certain capabilities\n   required in DECADE [5] are not provided\
    \ by existing systems.\n   In the early stage of Internet development, most Web\
    \ content was\n   stored at a central server, and clients requested Web content\
    \ from\n   the central server.  In this architecture, the central server was\n\
    \   required to provide a large amount of bandwidth.  As more and more\n   users\
    \ access Web content, a central server can become overloaded.\n   The use of Web\
    \ caches is one technique to reduce load on a central\n   server.  Web caches\
    \ store frequently requested content and provide\n   bandwidth for serving the\
    \ content to clients.\n   The ongoing growth of broadband technology in the worldwide\
    \ market\n   has been driven by the hunger of customers for new multimedia\n \
    \  services as well as Web content.  In particular, the use of audio and\n   video\
    \ streaming formats has become common for delivery of rich\n   information to\
    \ the public, both residential and business.\n   To overcome this challenge of\
    \ massive multimedia consumption, just\n   installing more Web caches will not\
    \ be enough.  Moving content closer\n   to the consumer results in greater network\
    \ efficiency, improved\n   Quality of Service (QoS), and lower latency, while\
    \ facilitating\n   personalization of content through broadband content applications.\n\
    \   In these edge technologies, Content Delivery Networks (CDNs) are a\n   representative\
    \ technique.  CDNs are based on a large-scale\n   distributed network of servers\
    \ located closer to customers for\n   efficient delivery of digital content, including\
    \ various forms of\n   multimedia content.\n   Although CDNs are an effective\
    \ means of information access and\n   delivery, there are two barriers to making\
    \ CDNs a more common\n   service: cost and replication integrity.  Deploying a\
    \ CDN with its\n   associated infrastructure is expensive.  A CDN also requires\n\
    \   administrative control over nodes with large storage capacity at\n   geographically\
    \ dispersed locations with adequate connectivity.  CDNs\n   can be scalable, but\
    \ due to this administrative and cost overhead,\n   they are not rapidly deployable\
    \ for the common user.\n   The emergence and maturation of P2P has allowed improvements\
    \ to many\n   network applications.  P2P allows the use of client resources, such\n\
    \   as CPU, memory, storage, and bandwidth, for serving content.  This\n   can\
    \ reduce the amount of resources required by a content provider.\n   Multimedia\
    \ content delivery using various P2P or peer-assisted\n   frameworks has been\
    \ shown to greatly reduce the dependence on CDNs\n   and central content servers.\
    \  However, the popularity of P2P\n   applications has resulted in increased traffic\
    \ on ISP networks.  P2P\n   caches (both transparent and non-transparent) have\
    \ been introduced as\n   a way to reduce the burden.  Though they can be effective\
    \ in reducing\n   traffic in certain areas of ISP networks, P2P caches have their\n\
    \   shortcomings.  In particular, they are application-dependent and thus\n  \
    \ difficult to keep up to date with new and evolving P2P application\n   protocols.\
    \  Second, applications may benefit from explicit control of\n   in-network storage,\
    \ which P2P caches do not provide.  See [1] for\n   further discussion.\n   DECADE\
    \ aims to provide a standard protocol allowing P2P applications\n   (including\
    \ content providers) to make use of in-network storage to\n   reduce the traffic\
    \ burden on ISP networks, while enabling P2P\n   applications to control access\
    \ to content they have placed in\n   in-network storage.\n"
- title: 3.  In-Network Storage System Components
  contents:
  - "3.  In-Network Storage System Components\n   Before surveying individual technologies,\
    \ we describe the basic\n   components of in-network storage.  For consistency\
    \ and for ease of\n   comparison, we use the same model to evaluate each storage\
    \ technology\n   in this document.\n   Note that the network protocol(s) used\
    \ by a given storage system are\n   also an important part of the design.  We\
    \ omit details of particular\n   protocol choices in this document.\n"
- title: 3.1.  Data Access Interface
  contents:
  - "3.1.  Data Access Interface\n   A set of operations is made available to a user\
    \ for accessing data in\n   the in-network storage system.  Solutions typically\
    \ allow both read\n   and write operations, though the mechanisms for doing so\
    \ can differ\n   drastically.\n"
- title: 3.2.  Data Management Operations
  contents:
  - "3.2.  Data Management Operations\n   Storage systems may provide users the ability\
    \ to manage stored\n   content.  For example, operations such as delete and move\
    \ may be\n   provided to users.  In this survey, we focus on data management\n\
    \   operations that are provided to users and omit those provided to\n   system\
    \ administrators.\n"
- title: 3.3.  Data Search Capability
  contents:
  - "3.3.  Data Search Capability\n   Some storage systems may provide the capability\
    \ to search or\n   enumerate content that has been stored.  In this survey, we\
    \ focus on\n   search capabilities that are provided to users and omit those\n\
    \   provided to system administrators.  An example of a search would be\n   to\
    \ find the list of items stored by a given user over a given period\n   of time.\n"
- title: 3.4.  Access Control Authorization
  contents:
  - "3.4.  Access Control Authorization\n   Storage systems typically allow a user,\
    \ content owner, or some other\n   entity to define the access policies for the\
    \ in-network storage\n   system.  The in-network storage system then checks the\
    \ authorization\n   of a user before it stores or retrieves content.  We define\
    \ three\n   types of access control authorization: public-unrestricted, public-\n\
    \   restricted, and private.\n   \"Public-unrestricted\" refers to content on\
    \ an in-network storage\n   system that is widely available to all clients (i.e.,\
    \ without\n   restrictions).  An example is accessing Wikipedia on the Web, or\n\
    \   anonymous access to FTP sites.\n   \"Public-restricted\" refers to content\
    \ on an in-network storage system\n   that is available to a restricted (though\
    \ still potentially large)\n   set of clients, but that does not require any confidential\n\
    \   credentials from the client.  An example is some content (e.g., a TV\n   show\
    \ episode) on the Internet that can only be viewable in selected\n   countries\
    \ or networks (i.e., white/black lists or black-out areas).\n   \"Private\" refers\
    \ to content on an in-network storage system that is\n   only made available to\
    \ one or more clients presenting the required\n   confidential credentials (e.g.,\
    \ password or key).  This content is\n   not available to anyone without the proper\
    \ confidential access\n   credentials.\n   Note that a combination of access control\
    \ types may be applicable for\n   a given scenario.  For example, the retrieval\
    \ (read) of content from\n   an in-network storage system may be public-unrestricted,\
    \ but the\n   storage (write) to the same system may be private.\n"
- title: 3.5.  Resource Control Interface
  contents:
  - "3.5.  Resource Control Interface\n   This is the interface through which users\
    \ manage the resources on\n   in-network storage systems that can be used by other\
    \ peers, e.g., the\n   bandwidth or connections.  The storage system may also\
    \ allow users to\n   indicate a time for which resources are granted.\n"
- title: 3.6.  Discovery Mechanism
  contents:
  - "3.6.  Discovery Mechanism\n   Users use the discovery mechanism to find the location\
    \ of in-network\n   storage, find an access interface or resource control interface,\
    \ or\n   find other interfaces of in-network storage.\n"
- title: 3.7.  Storage Mode
  contents:
  - "3.7.  Storage Mode\n   Storage systems may use the following modes of storage:\
    \ file system,\n   object-based, or block-based.\n   A file system typically organizes\
    \ files into a hierarchical tree\n   structure.  Each level of the hierarchy normally\
    \ contains zero or\n   more directories, each with zero or more files.  A file\
    \ system may\n   also be flat or use some other organizing principle.\n   We define\
    \ an object-based storage mode as one that stores discrete\n   chunks of data\
    \ (e.g., IP datagrams or another type of aggregation\n   useful to an application)\
    \ without a pre-defined hierarchy or\n   meta-structure.\n   We define a block-based\
    \ storage mode as one that stores a raw\n   sequence of bytes, with a client being\
    \ able to read and/or write data\n   at offsets within that sequence.  Data is\
    \ typically accessed in\n   blocks for efficiency.  A common example for this\
    \ storage mode is raw\n   access to a hard disk.\n   In this survey, we define\
    \ \"storage mode\" to refer to how data is\n   structured within the system, which\
    \ may not be the same as how it is\n   accessed by a client.  For example, a caching\
    \ system may cache\n   objects with hierarchical names, but may internally use\
    \ an object-\n   based storage mode.\n"
- title: 4.  In-Network Storage Systems
  contents:
  - "4.  In-Network Storage Systems\n   This section surveys in-network storage systems\
    \ using the methodology\n   defined above.  The survey includes some systems that\
    \ are widely\n   deployed today, some systems that are just being deployed, and\
    \ some\n   experimental systems.  The survey covers both traditional client-\n\
    \   server architectures and P2P architectures.  The surveyed systems are\n  \
    \ listed in alphabetical order.  Also, for each system, a brief\n   explanation\
    \ of the relevance to DECADE is given.\n"
- title: 4.1.  Amazon S3
  contents:
  - "4.1.  Amazon S3\n   Amazon S3 (Simple Storage Service) [6] provides an online\
    \ storage\n   service using Web (HTTP) interfaces.  Users create buckets, and\
    \ each\n   bucket can contain stored objects.  Users are provided an interface\n\
    \   through which they can manage their buckets.  Amazon S3 is a popular\n   backend\
    \ storage service for other services.  Other related storage\n   services are\
    \ the Blob Service provided by Windows Azure [7], Google\n   Storage for Developers\
    \ [8], and Dropbox [9].\n"
- title: 4.1.1.  Applicability to DECADE
  contents:
  - "4.1.1.  Applicability to DECADE\n   Amazon S3 is a very widely used (deployed)\
    \ example of in-network\n   storage.  Amazon S3 leases the storage to third-party\
    \ companies for\n   disparate services.  In particular, Amazon S3 has a rich model\
    \ for\n   authorization (using signed queries) to integrate with a wide variety\n\
    \   of use cases.  A focus for Amazon S3 is scalability.  Particular\n   simplifications\
    \ that were made are the absence of a general,\n   hierarchical namespace and\
    \ the inability to update the contents of\n   existing data.\n"
- title: 4.1.2.  Data Access Interface
  contents:
  - "4.1.2.  Data Access Interface\n   Users can read and write objects.\n"
- title: 4.1.3.  Data Management Operations
  contents:
  - "4.1.3.  Data Management Operations\n   Users can delete previously stored objects.\n"
- title: 4.1.4.  Data Search Capability
  contents:
  - "4.1.4.  Data Search Capability\n   Users can list contents of buckets to find\
    \ objects matching desired\n   criteria.\n"
- title: 4.1.5.  Access Control Authorization
  contents:
  - "4.1.5.  Access Control Authorization\n   All methods of access control are supported\
    \ for clients: public-\n   unrestricted, public-restricted, and private.\n   For\
    \ example, access to stored objects can be restricted by an owner,\n   a list\
    \ of other Amazon S3 Web Service users, or all Amazon S3 Web\n   Service users;\
    \ or can be open to all users (anonymous access).\n   Another option is for the\
    \ owner to generate and sign a query (e.g., a\n   query to read an object) that\
    \ can be used by any user until an owner-\n   defined expiration time.\n"
- title: 4.1.6.  Resource Control Interface
  contents:
  - "4.1.6.  Resource Control Interface\n   Not provided.\n"
- title: 4.1.7.  Discovery Mechanism
  contents:
  - "4.1.7.  Discovery Mechanism\n   Users are provided a well-known DNS name (either\
    \ a default provided\n   by Amazon S3, or one customized by a particular user).\
    \  Users\n   accessing S3 storage use DNS to discover an IP address where S3\n\
    \   requests can be sent.\n"
- title: 4.1.8.  Storage Mode
  contents:
  - "4.1.8.  Storage Mode\n   Object-based, with the extension that objects can be\
    \ organized into\n   user-defined buckets.\n"
- title: 4.2.  BranchCache
  contents:
  - "4.2.  BranchCache\n   BranchCache [10] is a feature integrated into Windows (Windows\
    \ 7 and\n   Windows Server 2008R2) that aims to optimize enterprise branch office\n\
    \   file access over WAN links.  The main goals are to reduce WAN link\n   utilization\
    \ and improve application responsiveness by caching and\n   sharing content within\
    \ a branch while still maintaining end-to-end\n   security.  BranchCache allows\
    \ files retrieved from the Web servers\n   and file servers located in headquarters\
    \ or data centers to be cached\n   in remote branch offices, and shared among\
    \ users in the same branch\n   accessing the same content.  BranchCache operates\
    \ transparently by\n   instrumenting the HTTP and Server Message Block (SMB) components\
    \ of\n   the networking stack.  It provides two modes of operation:\n   Distributed\
    \ Cache and Hosted Cache.\n   In both modes, a client always contacts a BranchCache-enabled\
    \ content\n   server first to get the content identifiers for local search.  If\
    \ the\n   content is cached locally, the client then retrieves the content\n \
    \  within the branch.  Otherwise, the client will go back to the\n   original\
    \ content server to request the content.  The two modes differ\n   in how the\
    \ content is shared.\n   In the Hosted Cache mode, a locally provisioned server\
    \ acts as a\n   cache for files retrieved from the servers.  After getting the\n\
    \   content identifiers, the client first consults the cache for the\n   desired\
    \ file.  If it is not present in the cache, the client\n   retrieves it from the\
    \ content server and sends it to the cache for\n   storage.\n   In the Distributed\
    \ Cache mode, a client first queries other clients\n   in the same network using\
    \ the Web Services Discovery multicast\n   protocol [11].  As in the Hosted Cache\
    \ mode, the client retrieves the\n   file from the content server if it is not\
    \ available locally.  After\n   retrieving the file (either from another client\
    \ or the content\n   server), the client stores the file locally.\n   The original\
    \ content server always authorizes requests from clients.\n   Cached content is\
    \ encrypted such that clients can decrypt the data\n   only using keys derived\
    \ from metadata returned by the content server.\n   In addition to instrumenting\
    \ the networking stack at clients, content\n   servers must also support BranchCache.\n"
- title: 4.2.1.  Applicability to DECADE
  contents:
  - "4.2.1.  Applicability to DECADE\n   BranchCache is an example of an in-network\
    \ storage system primarily\n   targeted at enterprise networks.  It supports a\
    \ P2P-like mode\n   (Distributed Cache) as well as a client-server mode (Hosted\
    \ Cache).\n   Integration into the Microsoft OS will ensure wide distribution\
    \ of\n   this in-network storage technology.\n"
- title: 4.2.2.  Data Access Interface
  contents:
  - "4.2.2.  Data Access Interface\n   Clients transparently retrieve (read) data\
    \ from a cache (on a client\n   or a Hosted Cache), since BranchCache operates\
    \ by instrumenting the\n   networking stack.  In the Hosted Cache mode, clients\
    \ write data to\n   the Hosted Cache once it is retrieved from the content server.\n"
- title: 4.2.3.  Data Management Operations
  contents:
  - "4.2.3.  Data Management Operations\n   Not provided.\n"
- title: 4.2.4.  Data Search Capability
  contents:
  - "4.2.4.  Data Search Capability\n   Not provided.\n"
- title: 4.2.5.  Access Control Authorization
  contents:
  - "4.2.5.  Access Control Authorization\n   The access control method for clients\
    \ is private.  For example,\n   transferred content is encrypted, and can only\
    \ be decrypted by keys\n   derived from data received from the original content\
    \ server.  Though\n   data may be transferred to unauthorized clients, end-to-end\
    \ security\n   is maintained by only allowing authorized clients to decrypt the\n\
    \   data.\n"
- title: 4.2.6.  Resource Control Interface
  contents:
  - "4.2.6.  Resource Control Interface\n   The storage capacity of caches on the\
    \ clients and Hosted Caches is\n   configurable by system administrators.  The\
    \ Hosted Cache further\n   allows configuration of the maximum number of simultaneous\
    \ client\n   accesses.  In the Distributed Cache mode, exponential back-off and\n\
    \   throttling mechanisms are utilized to prevent reply storms of popular\n  \
    \ content requests.  The client will also spread data-block access\n   among multiple\
    \ serving clients that have the content (complete or\n   partial) to improve latency\
    \ and provide some load balancing.\n"
- title: 4.2.7.  Discovery Mechanism
  contents:
  - "4.2.7.  Discovery Mechanism\n   The Distributed Cache mode uses multicast for\
    \ discovery of other\n   clients and content within a local network.  Currently,\
    \ the Hosted\n   Cache mode uses policy provisioning or manual configuration of\
    \ the\n   server used as the Hosted Cache.  In this mode, the address of the\n\
    \   server may be found via DNS.\n"
- title: 4.2.8.  Storage Mode
  contents:
  - "4.2.8.  Storage Mode\n   Object-based.\n"
- title: 4.3.  Cache-and-Forward Architecture
  contents:
  - "4.3.  Cache-and-Forward Architecture\n   Cache-and-Forward (CNF) [12] is an architecture\
    \ for content delivery\n   services for the future Internet.  In this architecture,\
    \ storage can\n   be exploited on nodes within the network, either directly on\
    \ routers\n   or deployed near the routers.  CNF is based on the concept of store-\n\
    \   and-forward routers with large storage, providing for opportunistic\n   delivery\
    \ to occasionally disconnected mobile users and for in-network\n   caching of\
    \ content.  The proposed CNF protocol uses reliable hop-by-\n   hop transfer of\
    \ large data files between CNF routers in place of an\n   end-to-end transport\
    \ protocol such as TCP.\n"
- title: 4.3.1.  Applicability to DECADE
  contents:
  - "4.3.1.  Applicability to DECADE\n   CNF is an example of an experimental in-network\
    \ storage system that\n   would require storage space on (or near) a large number\
    \ of routers in\n   the Internet if it was deployed.  As the name of the system\
    \ implies,\n   it would provide short-term caching and not long-term network\n\
    \   storage.\n"
- title: 4.3.2.  Data Access Interface
  contents:
  - "4.3.2.  Data Access Interface\n   Users implicitly store content at CNF routers\
    \ by requesting files.\n   End hosts read content from in-network storage by submitting\
    \ queries\n   for content.\n"
- title: 4.3.3.  Data Management Operations
  contents:
  - "4.3.3.  Data Management Operations\n   Not provided.\n"
- title: 4.3.4.  Data Search Capability
  contents:
  - "4.3.4.  Data Search Capability\n   Not provided.\n"
- title: 4.3.5.  Access Control Authorization
  contents:
  - "4.3.5.  Access Control Authorization\n   The access control method is public-restricted\
    \ (to any client that is\n   part of the CNF network).\n"
- title: 4.3.6.  Resource Control Interface
  contents:
  - "4.3.6.  Resource Control Interface\n   Not provided.\n"
- title: 4.3.7.  Discovery Mechanism
  contents:
  - "4.3.7.  Discovery Mechanism\n   A query including a location-independent content\
    \ ID is sent to the\n   network and routed to a CNF router, which handles retrieval\
    \ of the\n   data and forwarding to the end host.\n"
- title: 4.3.8.  Storage Mode
  contents:
  - "4.3.8.  Storage Mode\n   Object-based, with objects representing individual files.\
    \  The\n   architecture proposes to cache large files in storage within the\n\
    \   network, though objects could be made to represent smaller chunks of\n   larger\
    \ files.\n"
- title: 4.4.  Cloud Data Management Interface
  contents:
  - "4.4.  Cloud Data Management Interface\n   The Cloud Data Management Interface\
    \ (CDMI) is a specification to\n   access and manage cloud storage.  CDMI is specified\
    \ by the Storage\n   Networking Industry Association (SNIA).\n   CDMI is a functional\
    \ interface that applications can use to create,\n   retrieve, update, and delete\
    \ data elements from the cloud.  As part\n   of this interface, the client will\
    \ be able to discover the\n   capabilities of the cloud storage offering and use\
    \ this interface to\n   manage containers and the data that is placed in them.\
    \  In addition,\n   metadata can be set on containers and their contained data\
    \ elements\n   through this interface [13].\n   CDMI follows a traditional client-server\
    \ model, and operates over an\n   HTTP interface using the Representational State\
    \ Transfer (REST)\n   model.  Similar to Amazon S3 buckets (see Section 4.1),\
    \ users may\n   create containers in which data objects may be stored.  Even though\n\
    \   data objects may be accessed via a user-defined name within a\n   container,\
    \ it is also possible to access data objects via a storage-\n   defined Object\
    \ ID, which is provided in the response upon creation of\n   a data object.\n"
- title: 4.4.1.  Applicability to DECADE
  contents:
  - "4.4.1.  Applicability to DECADE\n   CDMI is an important initiative to standardize\
    \ storage interfaces for\n   cloud services, which are rapidly becoming an important\
    \ type of\n   storage service.  In particular, it specifies a set of operations\
    \ for\n   creating, reading, writing, and managing data objects at a remote\n\
    \   server (or set of servers) via HTTP.\n"
- title: 4.4.2.  Data Access Interface
  contents:
  - "4.4.2.  Data Access Interface\n   Users can read and write data objects, and\
    \ also update data in\n   existing data objects.  CDMI data objects are sent on\
    \ the wire\n   embedded as a field in a JavaScript Object Notation (JSON) object.\n\
    \   The protocol also defines interfaces in which the contents of data\n   objects\
    \ can be written via simple HTTP GET/PUT operations.\n"
- title: 4.4.3.  Data Management Operations
  contents:
  - "4.4.3.  Data Management Operations\n   Users can delete already-existing data\
    \ objects.  The create operation\n   also supports modes in which the created\
    \ object is copied or moved\n   from an existing data object.\n   Data system\
    \ metadata also allows users to configure policies\n   regarding time-to-live,\
    \ after which a data object is automatically\n   deleted, as well as the redundancy\
    \ with which a data object is\n   stored.\n"
- title: 4.4.4.  Data Search Capability
  contents:
  - "4.4.4.  Data Search Capability\n   Users may list the contents of containers\
    \ to locate data objects\n   matching any desired criteria.\n"
- title: 4.4.5.  Access Control Authorization
  contents:
  - "4.4.5.  Access Control Authorization\n   All methods of access control for clients\
    \ are supported: public-\n   unrestricted, public-restricted, and private.\n \
    \  In particular, CDMI allows access to data objects to be protected by\n   Access\
    \ Control Lists (ACLs) that can allow or restrict access based\n   on user name,\
    \ group, administrative status, or whether a user is\n   authenticated or anonymous.\n"
- title: 4.4.6.  Resource Control Interface
  contents:
  - "4.4.6.  Resource Control Interface\n   CDMI supports attributes 'cdmi_max_latency'\
    \ and 'cdmi_max_throughput'\n   (set at either the level of containers, or a specific\
    \ data object),\n   which control the level of service offered to any users accessing\
    \ a\n   particular data object.\n"
- title: 4.4.7.  Discovery Mechanism
  contents:
  - "4.4.7.  Discovery Mechanism\n   Users are provided a well-known DNS name.  The\
    \ DNS name is resolved\n   to determine the IP address to which requests may be\
    \ sent.\n"
- title: 4.4.8.  Storage Mode
  contents:
  - "4.4.8.  Storage Mode\n   Object-based, with the extension that objects can be\
    \ organized into\n   user-defined containers.\n"
- title: 4.5.  Content Delivery Network
  contents:
  - "4.5.  Content Delivery Network\n   A CDN provides services that improve performance\
    \ by minimizing the\n   amount of data transmitted through the network, improving\n\
    \   accessibility, and maintaining correctness through content\n   replication.\
    \  CDNs offer fast and reliable applications and services\n   by distributing\
    \ content to cache or edge servers located close to\n   users.  See [14] for an\
    \ additional taxonomy and survey.\n   A CDN has some combination of content delivery,\
    \ request routing,\n   distribution, and accounting infrastructures.  The content-delivery\n\
    \   infrastructure consists of a set of edge servers (also called\n   surrogates)\
    \ that deliver copies of content to end users.  The\n   request-routing infrastructure\
    \ is responsible for directing client\n   requests to appropriate edge servers.\
    \  It also interacts with the\n   distribution infrastructure to keep an up-to-date\
    \ view of the content\n   stored in the CDN caches.  The distribution infrastructure\
    \ moves\n   content from the origin server to the CDN edge servers and ensures\n\
    \   consistency of content in the caches.  The accounting infrastructure\n   maintains\
    \ logs of client accesses and records the usage of the CDN\n   servers.  This\
    \ information is used for traffic reporting and usage-\n   based billing.\n  \
    \ In practice, a CDN typically hosts static content including images,\n   video,\
    \ media clips, advertisements, and other embedded objects for\n   Web viewing.\
    \  A focus for CDNs is the ability to publish and deliver\n   content to end users\
    \ in a reliable and timely manner.  A CDN focuses\n   on building its network\
    \ infrastructure to provide the following\n   services and functionalities: storage\
    \ and management of content;\n   distribution of content among surrogates; cache\
    \ management; delivery\n   of static, dynamic, and streaming content; backup and\
    \ disaster\n   recovery solutions; and monitoring, performance measurement, and\n\
    \   reporting.\n   Examples of existing CDNs are Akamai, Limelight, and CloudFront.\n\
    \   The following description uses the term \"content provider\" to refer\n  \
    \ to the entity purchasing a CDN service, and the term \"client\" to\n   refer\
    \ to the subscriber requesting content via the CDN from the\n   content provider.\n"
- title: 4.5.1.  Applicability to DECADE
  contents:
  - "4.5.1.  Applicability to DECADE\n   CDNs are a very widely used (deployed) example\
    \ of in-network storage\n   for multimedia content.  The existence and operation\
    \ of the storage\n   system are totally transparent to the end user.  CDNs typically\n\
    \   require a strong business relationship between the content providers\n   and\
    \ content distributors, and often the business relationship extends\n   to the\
    \ ISPs.\n"
- title: 4.5.2.  Data Access Interface
  contents:
  - "4.5.2.  Data Access Interface\n   A CDN is typically a closed system, and generally\
    \ provides only a\n   read (retrieve) access interface to clients.  A CDN typically\
    \ does\n   not provide a write (store) access interface to clients.  The content\n\
    \   provider can access network edge servers and store content on them,\n   or\
    \ edge servers can retrieve content from content providers.  Client\n   nodes\
    \ can only retrieve content from edge servers.\n"
- title: 4.5.3.  Data Management Operations
  contents:
  - "4.5.3.  Data Management Operations\n   A content provider can manage the data\
    \ distributed in different cache\n   nodes, such as moving popular data objects\
    \ from one cache node to\n   another cache node, or deleting rarely accessed data\
    \ objects in cache\n   nodes.  User nodes, however, have no right to perform these\n\
    \   operations.\n"
- title: 4.5.4.  Data Search Capability
  contents:
  - "4.5.4.  Data Search Capability\n   A content provider can search or enumerate\
    \ the data each cache node\n   stores.  User nodes cannot perform search operations.\n"
- title: 4.5.5.  Access Control Authorization
  contents:
  - "4.5.5.  Access Control Authorization\n   All methods of access control (for reading)\
    \ are supported for\n   clients: public-unrestricted, public-restricted, and private.\
    \  Some\n   CDN edge servers allow usage of HTTP basic authentication with the\n\
    \   origin server or restrictions by IP address, or they can use a token-\n  \
    \ based technique to allow the origin server to apply its own\n   authorization\
    \ criteria.\n   As mentioned previously, clients typically cannot write to the\
    \ CDN.\n   Writing is typically a private operation for the content providers.\n"
- title: 4.5.6.  Resource Control Interface
  contents:
  - "4.5.6.  Resource Control Interface\n   Not provided.\n"
- title: 4.5.7.  Discovery Mechanism
  contents:
  - "4.5.7.  Discovery Mechanism\n   Content providers can directly find internal\
    \ CDN cache nodes to store\n   content, since they typically have an explicit\
    \ business relationship.\n   Clients can locate CDN nodes through DNS or other\
    \ redirection\n   mechanisms.\n"
- title: 4.5.8.  Storage Mode
  contents:
  - "4.5.8.  Storage Mode\n   Though the addressing of objects uses URLs that typically\
    \ refer to\n   objects in a hierarchical fashion, the storage mode is typically\n\
    \   object-based.\n"
- title: 4.6.  Delay-Tolerant Network
  contents:
  - "4.6.  Delay-Tolerant Network\n   The Delay-Tolerant Network (DTN) [15] is an\
    \ evolution of an\n   architecture originally designed for the Interplanetary\
    \ Internet.\n   The Interplanetary Internet is a communication system envisioned\
    \ to\n   provide Internet-like services across interplanetary distances in\n \
    \  support of deep space exploration.  The DTN architecture can be\n   utilized\
    \ in various operational environments characterized by severe\n   communication\
    \ disruptions, disconnections, and high delays (e.g., a\n   month-long loss of\
    \ connectivity between two planetary networks\n   because of high solar radiation\
    \ due to sun spots).  The DTN\n   architecture is thus suitable for environments\
    \ including deep space\n   networks, sensor-based networks, certain satellite\
    \ networks, and\n   underwater acoustic networks.\n   A key aspect of the DTN\
    \ is a store-and-forward overlay layer called\n   the \"Bundle Protocol\" or \"\
    Bundle Layer\", which exists between the\n   transport and application layers\
    \ [16].  The Bundle Layer forms a\n   logical overlay that employs persistent\
    \ storage to help combat long-\n   term network interruptions by providing a store-and-forward\
    \ service.\n   While traditional IP networks are also based on store-and-forward\n\
    \   principles, the amount of time of a packet being kept in \"storage\" at\n\
    \   a traditional IP router is typically on the order of milliseconds (or\n  \
    \ less).  In contrast, the DTN architecture assumes that most Bundle\n   Layer\
    \ nodes will use some form of persistent storage (e.g., hard\n   disk, flash memory,\
    \ etc.) for DTN packets because of the nature of\n   the DTN environment.\n"
- title: 4.6.1.  Applicability to DECADE
  contents:
  - "4.6.1.  Applicability to DECADE\n   The DTN is an example of an experimental\
    \ in-network storage system\n   that would require fundamental changes to the\
    \ Internet protocols.\n"
- title: 4.6.2.  Data Access Interface
  contents:
  - "4.6.2.  Data Access Interface\n   Users implicitly cause content to be stored\
    \ (until successfully\n   forwarded) at Bundle Layer nodes by initiating/terminating\
    \ any\n   transaction that traverses the DTN.\n"
- title: 4.6.3.  Data Management Operations
  contents:
  - "4.6.3.  Data Management Operations\n   Users can implicitly cause deletion of\
    \ content stored at Bundle Layer\n   nodes via a \"time-to-live\" type of parameter\
    \ that the user can\n   control (for transactions originating from the user).\n"
- title: 4.6.4.  Data Search Capability
  contents:
  - "4.6.4.  Data Search Capability\n   Not provided.\n"
- title: 4.6.5.  Access Control Authorization
  contents:
  - "4.6.5.  Access Control Authorization\n   The access control method is public-restricted\
    \ (to any client that is\n   part of the DTN) or private.\n"
- title: 4.6.6.  Resource Control Interface
  contents:
  - "4.6.6.  Resource Control Interface\n   Not provided.\n"
- title: 4.6.7.  Discovery Mechanism
  contents:
  - "4.6.7.  Discovery Mechanism\n   A Uniform Resource Identifier (URI) approach\
    \ is used as the basis of\n   the addressing scheme for DTN transactions (and\
    \ subsequent store-and-\n   forward routing through the DTN network).\n"
- title: 4.6.8.  Storage Mode
  contents:
  - "4.6.8.  Storage Mode\n   Object-based.  DTN applications send data to the Bundle\
    \ Layer, which\n   then breaks the data into segments.  These segments are then\
    \ routed\n   through the DTN network, and stored in Bundle Layer nodes as required\n\
    \   (before being forwarded).\n"
- title: 4.7.  Named Data Networking
  contents:
  - "4.7.  Named Data Networking\n   Named Data Networking (NDN) [17] is a research\
    \ initiative that\n   proposes to move to a new model of addressing and routing\
    \ for the\n   Internet.  NDN uses \"named data\"-based routing and forwarding,\
    \ to\n   replace the current IP-address-based model.  NDN also uses name-based\n\
    \   data caching in the routers.\n   Each NDN Data packet will be assigned a content\
    \ name and will be\n   cryptographically signed.  Data delivery is driven by the\
    \ requesting\n   end.  Routers disseminate name-based prefix announcements by\
    \ using\n   routing protocols such as Intermediate System to Intermediate System\n\
    \   (IS-IS) or the Border Gateway Protocol (BGP).  The requester will\n   send\
    \ out an \"Interest\" packet, which identifies the name of the data\n   that it\
    \ wants.  Routers that receive this Interest packet will\n   remember the interface\
    \ it came from and will then forward it on a\n   name-based routing protocol.\
    \  Once an Interest packet reaches a node\n   that has the desired data, a named\
    \ Data packet is sent back, which\n   carries both the name and content of the\
    \ data, along with a digital\n   signature of the producer.  This named Data packet\
    \ is then forwarded\n   back to the original requester on the reverse path of\
    \ the Interest\n   packet [18].\n   A key aspect of NDN is that routers have the\
    \ capability to cache the\n   named data.  If a request for the same data (i.e.,\
    \ same name) comes\n   to the router, then the NDN router will forward the named\
    \ data stored\n   locally to fulfill the request.  The proponents of NDN believe\
    \ that\n   the network can be designed naturally, matching data delivery\n   characteristics\
    \ instead of communication between endpoints, because\n   data delivery has become\
    \ the primary use of the network.\n"
- title: 4.7.1.  Applicability to DECADE
  contents:
  - "4.7.1.  Applicability to DECADE\n   NDN is an example of an experimental in-network\
    \ storage system that\n   would require storage space on a large number of routers\
    \ in the\n   Internet.  Named Data packets would be kept in storage in the NDN\n\
    \   routers and provided to new requesters of the same data.\n"
- title: 4.7.2.  Data Access Interface
  contents:
  - "4.7.2.  Data Access Interface\n   Users implicitly store content at NDN routers\
    \ by requesting content\n   (the named Data packets) from the network.  Subsequent\
    \ requests by\n   different users for the same content will cause the named Data\n\
    \   packets to be read from the NDN routers' in-network storage.\n"
- title: 4.7.3.  Data Management Operations
  contents:
  - "4.7.3.  Data Management Operations\n   Users do not have the direct ability to\
    \ delete content stored in the\n   NDN routers.  However, there will be some type\
    \ of time-to-live\n   parameter associated with the named Data packets, though\
    \ this has not\n   yet been specified.\n"
- title: 4.7.4.  Data Search Capability
  contents:
  - "4.7.4.  Data Search Capability\n   Not provided.\n"
- title: 4.7.5.  Access Control Authorization
  contents:
  - "4.7.5.  Access Control Authorization\n   All methods of access control for clients\
    \ are supported: public-\n   unrestricted, public-restricted, and private.\n \
    \  The basic security mechanism in NDN is for the sender to digitally\n   sign\
    \ the content (the named Data packets) that it sends.  It is\n   envisioned that\
    \ a complete access control system can be built on top\n   of NDN, though this\
    \ has not yet been specified.\n"
- title: 4.7.6.  Resource Control Interface
  contents:
  - "4.7.6.  Resource Control Interface\n   Not provided.\n"
- title: 4.7.7.  Discovery Mechanism
  contents:
  - "4.7.7.  Discovery Mechanism\n   Names are used as the basis of the addressing\
    \ and discovery scheme\n   for NDN (and subsequent store-and-forward routing through\
    \ the NDN\n   network).  NDN names are assumed to be hierarchical and to be able\
    \ to\n   be deterministically constructed.  This is still an active area of\n\
    \   research.\n"
- title: 4.7.8.  Storage Mode
  contents:
  - "4.7.8.  Storage Mode\n   Object-based.  NDN sends named Data packets through\
    \ the network.\n   These Data packets are routed through the NDN network and stored\
    \ in\n   NDN routers.\n"
- title: 4.8.  Network of Information
  contents:
  - "4.8.  Network of Information\n   Similar to NDN (see Section 4.7), Network of\
    \ Information (NetInf)\n   [19] is another information-centric approach in which\
    \ the named data\n   objects are the basic component of the networking architecture.\n\
    \   NetInf is thus moving away from today's host-centric networking\n   architecture\
    \ where the nodes in the network are the primary objects.\n   In today's network,\
    \ the information objects are named relative to the\n   hosts they are stored\
    \ on (e.g.,\n   http://www.example.com/information-object.txt).\n   The NetInf\
    \ naming and security framework builds the foundation for an\n   information-centric\
    \ security model that integrates security deeply\n   into the architecture.  In\
    \ this model, trust is based on the\n   information itself.  Information objects\
    \ (IOs) are given a unique\n   name with cryptographic properties.  Together with\
    \ additional\n   metadata, the name can be used to verify the data integrity as\
    \ well\n   as several other security properties, such as self-certification,\n\
    \   name persistency, and owner authentication and identification.  The\n   approach\
    \ also gives some benefits over the security model in today's\n   host-centric\
    \ networks, as it minimizes the need for trust in the\n   infrastructure, including\
    \ the hosts providing the data, the channel,\n   or the resolution service.\n\
    \   In NetInf, the information objects are published into the network.\n   They\
    \ are registered with a Name Resolution Service (NRS).  The NRS is\n   also used\
    \ to register network locators that can be used to retrieve\n   data objects that\
    \ represent the published IOs.  When a receiver wants\n   to retrieve an IO, the\
    \ request for the IO is resolved by the NRS into\n   a set of locators.  These\
    \ locators are then used to retrieve a copy\n   of the data object from the \"\
    best\" available source(s).  NetInf is\n   open to use any type of underlying\
    \ transport network.  The locators\n   can thus be a heterogeneous set, e.g.,\
    \ IPv4, IPv6, Medium Access\n   Control (MAC), etc.\n   NetInf will make extensive\
    \ use of caching of information objects in\n   the network and will provide network\
    \ functionality that is similar to\n   what overlay solutions such as CDNs and\
    \ P2P distribution networks\n   (e.g., BitTorrent) provide today.\n"
- title: 4.8.1.  Applicability to DECADE
  contents:
  - "4.8.1.  Applicability to DECADE\n   NetInf is an example of an experimental information-centric\
    \ network\n   architecture that will require storage space for storage and caching\n\
    \   of information objects on a large number of NetInf nodes in the\n   Internet.\n"
- title: 4.8.2.  Data Access Interface
  contents:
  - "4.8.2.  Data Access Interface\n   Users will publish IOs with specific IDs into\
    \ the network.  This is\n   done by the client sending a register message to the\
    \ NRS stating that\n   the IO with the specific ID is available.  When another\
    \ user wishes\n   to retrieve the IO, they will use the given ID to make a request\
    \ for\n   the IO.  The ID is then resolved by the NRS, and the IO is delivered\n\
    \   from a nearby in-network storage location.\n"
- title: 4.8.3.  Data Management Operations
  contents:
  - "4.8.3.  Data Management Operations\n   Users do not have the direct ability to\
    \ delete content stored in the\n   NetInf nodes.  However, there can be some type\
    \ of time-to-live\n   parameter associated with the information objects, though\
    \ this has\n   not yet been specified.\n"
- title: 4.8.4.  Data Search Capability
  contents:
  - "4.8.4.  Data Search Capability\n   Not provided.\n"
- title: 4.8.5.  Access Control Authorization
  contents:
  - "4.8.5.  Access Control Authorization\n   All methods of access control for clients\
    \ are supported: public-\n   unrestricted, public-restricted, and private.  The\
    \ basic security\n   mechanism in NetInf is for the publisher to digitally sign\
    \ the\n   content of the information object that it publishes.  It is\n   envisioned\
    \ that a complete access control system can be built on top\n   of NetInf, though\
    \ this has not yet been specified.\n"
- title: 4.8.6.  Resource Control Interface
  contents:
  - "4.8.6.  Resource Control Interface\n   Not provided.\n"
- title: 4.8.7.  Discovery Mechanism
  contents:
  - "4.8.7.  Discovery Mechanism\n   NetInf IDs are used for naming and accessing\
    \ information objects.\n   The IDs are resolved by the NRS into locators that\
    \ are used for\n   routing and transport of data through the transport networks.\
    \  This\n   is still an active area of research.\n"
- title: 4.8.8.  Storage Mode
  contents:
  - "4.8.8.  Storage Mode\n   Object-based.  From an application perspective, NetInf\
    \ can be used\n   for publishing entire files or chunks of files.  NetInf is agnostic\n\
    \   to the application perspective and treats everything as information\n   objects.\n"
- title: 4.9.  Network Traffic Redundancy Elimination
  contents:
  - "4.9.  Network Traffic Redundancy Elimination\n   Redundancy Elimination (RE)\
    \ is used for identifying and removing\n   repeated content from network transfers.\
    \  This technique has been\n   proposed to improve network performance in many\
    \ types of networks,\n   such as ISP backbones and enterprise access links.  One\
    \ example of an\n   RE proposal is SmartRE [20], proposed by Anand et al., which\
    \ focuses\n   on network-wide RE.  In packet-level RE, forwarding elements are\n\
    \   equipped with additional storage that can be used to cache data from\n   forwarded\
    \ packets.  Upstream routers may replace packet data with a\n   fingerprint that\
    \ tells a downstream router how to decode and\n   reconstruct the packet based\
    \ on cached data.\n"
- title: 4.9.1.  Applicability to DECADE
  contents:
  - "4.9.1.  Applicability to DECADE\n   RE is an example of an experimental in-network\
    \ storage system that\n   would require a large amount of associated packet processing\
    \ at\n   routers if it was ever deployed.\n"
- title: 4.9.2.  Data Access Interface
  contents:
  - "4.9.2.  Data Access Interface\n   RE is typically transparent to the user.  Writing\
    \ into storage is\n   done by transferring data that has not already been cached.\
    \  Storage\n   is read when users transmit data identical to previously transmitted\n\
    \   data.\n"
- title: 4.9.3.  Data Management Operations
  contents:
  - "4.9.3.  Data Management Operations\n   Not provided.\n"
- title: 4.9.4.  Data Search Capability
  contents:
  - "4.9.4.  Data Search Capability\n   Not provided.\n"
- title: 4.9.5.  Access Control Authorization
  contents:
  - "4.9.5.  Access Control Authorization\n   The access control method is public-restricted\
    \ (to any client that is\n   part of the RE network).  Note that the content provider\
    \ still\n   retains control over which peers receive the requested data.  The\n\
    \   returned data is \"compressed\" as it is transferred within the\n   network.\n"
- title: 4.9.6.  Resource Control Interface
  contents:
  - "4.9.6.  Resource Control Interface\n   Not provided.  The content provider still\
    \ retains control over the\n   rate at which packets are sent to a peer.  The\
    \ packet size within the\n   network may be reduced.\n"
- title: 4.9.7.  Discovery Mechanism
  contents:
  - "4.9.7.  Discovery Mechanism\n   No discovery mechanism is necessary.  Routers\
    \ can use RE without the\n   users' knowledge.\n"
- title: 4.9.8.  Storage Mode
  contents:
  - "4.9.8.  Storage Mode\n   Object-based, with \"objects\" being data from packets\
    \ transmitted\n   within the network.\n"
- title: 4.10.  OceanStore
  contents:
  - "4.10.  OceanStore\n   OceanStore [21] is a storage platform developed at the\
    \ University of\n   California, Berkeley, that provides globally distributed storage.\n\
    \   OceanStore implements a model where multiple storage providers can\n   pool\
    \ resources together.  Thus, a major focus is on resiliency, self-\n   organization,\
    \ and self-maintenance.\n   The protocol is resilient to some storage nodes being\
    \ compromised by\n   utilizing Byzantine agreement and erasure codes to store\
    \ data at\n   primary replicas.\n"
- title: 4.10.1.  Applicability to DECADE
  contents:
  - "4.10.1.  Applicability to DECADE\n   OceanStore is an example of an experimental\
    \ in-network storage system\n   that provides a high degree of network resilience\
    \ to failure\n   scenarios.\n"
- title: 4.10.2.  Data Access Interface
  contents:
  - "4.10.2.  Data Access Interface\n   Users may read and write objects.\n"
- title: 4.10.3.  Data Management Operations
  contents:
  - "4.10.3.  Data Management Operations\n   Objects may be replaced by newer versions,\
    \ and multiple versions of\n   an object may be maintained.\n"
- title: 4.10.4.  Data Search Capability
  contents:
  - "4.10.4.  Data Search Capability\n   Not provided.\n"
- title: 4.10.5.  Access Control Authorization
  contents:
  - "4.10.5.  Access Control Authorization\n   Provided, but specifics for clients\
    \ are unclear from the available\n   references.\n"
- title: 4.10.6.  Resource Control Interface
  contents:
  - "4.10.6.  Resource Control Interface\n   Not provided.\n"
- title: 4.10.7.  Discovery Mechanism
  contents:
  - "4.10.7.  Discovery Mechanism\n   Users require an entry point into the system\
    \ in the form of one\n   storage node that is part of OceanStore.  If a hostname\
    \ is provided,\n   the address of a storage node may be determined via DNS.\n"
- title: 4.10.8.  Storage Mode
  contents:
  - "4.10.8.  Storage Mode\n   Object-based.\n"
- title: 4.11.  P2P Cache
  contents:
  - "4.11.  P2P Cache\n   Caching of P2P traffic is a useful approach to reduce P2P\
    \ network\n   traffic, because objects in P2P systems are mostly immutable and\
    \ the\n   traffic is highly repetitive.  In addition, making use of P2P caches\n\
    \   does not require changes to P2P protocols and can be deployed\n   transparently\
    \ from clients.\n   P2P caches operate similarly to Web caches (Section 4.14)\
    \ in that\n   they temporarily store frequently requested content.  Requests for\n\
    \   content already stored in the cache can be served from local storage\n   instead\
    \ of requiring the data to be transmitted over expensive\n   network links.\n\
    \   Two types of P2P caches exist: transparent P2P caches and\n   non-transparent\
    \ P2P caches.\n   For a transparent cache, once a P2P cache is established, the\
    \ network\n   will transparently redirect P2P traffic to the cache, which either\n\
    \   serves the file directly or passes the request on to a remote P2P\n   user\
    \ and simultaneously caches that data.  Transparency is typically\n   implemented\
    \ using Deep Packet Inspection (DPI).  DPI products\n   identify and pass P2P\
    \ packets to the P2P caching system so it can\n   cache and accelerate the traffic.\n\
    \   A non-transparent cache appears as a super peer; it explicitly peers\n   with\
    \ other P2P clients.\n   To enable operation with existing P2P software, P2P caches\
    \ directly\n   support P2P application protocols.  A large number of P2P protocols\n\
    \   are used by P2P software and hence are supported by caches, leading\n   to\
    \ higher complexity.  Additionally, these protocols evolve over\n   time, and\
    \ new protocols are introduced.\n"
- title: 4.11.1.  Applicability to DECADE
  contents:
  - "4.11.1.  Applicability to DECADE\n   A P2P cache is an example of in-network\
    \ storage for P2P systems.\n   However, unlike DECADE, the existence and operation\
    \ of the storage\n   system are totally transparent to the end user.\n"
- title: 4.11.2.  Transparent P2P Caches
  contents:
  - '4.11.2.  Transparent P2P Caches

    '
- title: 4.11.2.1.  Data Access Interface
  contents:
  - "4.11.2.1.  Data Access Interface\n   The data access interface allows P2P content\
    \ to be cached (stored)\n   and supplied (retrieved) locally such that network\
    \ traffic is\n   reduced, but it is transparent to P2P users, and P2P users implicitly\n\
    \   use the data access interface (in the form of their native P2P\n   application\
    \ protocol) to store or retrieve content.\n"
- title: 4.11.2.2.  Data Management Operations
  contents:
  - "4.11.2.2.  Data Management Operations\n   Not provided.\n"
- title: 4.11.2.3.  Data Search Capability
  contents:
  - "4.11.2.3.  Data Search Capability\n   Not provided.\n"
- title: 4.11.2.4.  Access Control Authorization
  contents:
  - "4.11.2.4.  Access Control Authorization\n   The access control method is typically\
    \ public-restricted (to any\n   client that is part of the P2P channel or swarm).\n"
- title: 4.11.2.5.  Resource Control Interface
  contents:
  - "4.11.2.5.  Resource Control Interface\n   Not provided.\n"
- title: 4.11.2.6.  Discovery Mechanism
  contents:
  - "4.11.2.6.  Discovery Mechanism\n   The use of DPI means that no discovery mechanism\
    \ is provided to P2P\n   users; it is transparent to P2P users.  Since DPI is\
    \ used to\n   recognize P2P applications' private protocols, P2P cache\n   implementations\
    \ must be updated as new applications are added and\n   existing protocols evolve.\n"
- title: 4.11.2.7.  Storage Mode
  contents:
  - "4.11.2.7.  Storage Mode\n   Object-based.  Chunks (typically, the unit of transfer\
    \ among P2P\n   clients) of content are stored in the cache.\n"
- title: 4.11.3.  Non-Transparent P2P Caches
  contents:
  - '4.11.3.  Non-Transparent P2P Caches

    '
- title: 4.11.3.1.  Data Access Interface
  contents:
  - "4.11.3.1.  Data Access Interface\n   The data access interface allows P2P content\
    \ to be cached (stored)\n   and supplied (retrieved) locally such that network\
    \ traffic is\n   reduced.  P2P users implicitly store and retrieve from the cache\n\
    \   using the P2P application's native protocol.\n"
- title: 4.11.3.2.  Data Management Operations
  contents:
  - "4.11.3.2.  Data Management Operations\n   Not provided.\n"
- title: 4.11.3.3.  Data Search Capability
  contents:
  - "4.11.3.3.  Data Search Capability\n   Not provided.\n"
- title: 4.11.3.4.  Access Control Authorization
  contents:
  - "4.11.3.4.  Access Control Authorization\n   The access control method is typically\
    \ public-restricted (to any\n   client that is part of the P2P channel or swarm).\n"
- title: 4.11.3.5.  Resource Control Interface
  contents:
  - "4.11.3.5.  Resource Control Interface\n   Not provided.\n"
- title: 4.11.3.6.  Discovery Mechanism
  contents:
  - "4.11.3.6.  Discovery Mechanism\n   A P2P cache node behaves as if it were a normal\
    \ peer in order to join\n   the P2P overlay network.  Other P2P users can find\
    \ such a cache node\n   through an overlay routing mechanism and can interact\
    \ with it as if\n   it were a normal neighbor node.\n"
- title: 4.11.3.7.  Storage Mode
  contents:
  - "4.11.3.7.  Storage Mode\n   Object-based.  Chunks (typically, the unit of transfer\
    \ among P2P\n   clients) of content are stored in the cache.\n"
- title: 4.12.  Photo Sharing
  contents:
  - "4.12.  Photo Sharing\n   There are a growing number of popular online photo-sharing\
    \ (storing)\n   systems.  For example, the Kodak Gallery system [22] serves over\n\
    \   60 million users and stores billions of images [23].  Other well-\n   known\
    \ examples of photo-sharing systems include Flickr [24] and\n   ImageShack [25].\
    \  There are also a number of popular blogging\n   services, such as Tumblr [26],\
    \ that specialize in sharing large\n   numbers of photos as well as other multimedia\
    \ content (e.g., video,\n   text, audio, etc.) as part of their service.  All\
    \ of these in-network\n   storage systems utilize both free and paid subscription\
    \ models.\n   Most photo-sharing systems are based on a traditional client-server\n\
    \   architecture.  However, a minority of systems also offer a P2P mode\n   of\
    \ operation.  The client-server architecture is typically based on\n   HTTP, with\
    \ a browser client and a Web server.\n"
- title: 4.12.1.  Applicability to DECADE
  contents:
  - "4.12.1.  Applicability to DECADE\n   Photo sharing is a very widely used (deployed)\
    \ example of in-network\n   storage where the end user has direct visibility and\
    \ extensive\n   control of the system.  The typical end-user interface is through\
    \ an\n   HTTP-based Web browser.\n"
- title: 4.12.2.  Data Access Interface
  contents:
  - "4.12.2.  Data Access Interface\n   Users can read (view) and write (store) photos.\n"
- title: 4.12.3.  Data Management Operations
  contents:
  - "4.12.3.  Data Management Operations\n   Users can delete previously stored photos.\n"
- title: 4.12.4.  Data Search Capability
  contents:
  - "4.12.4.  Data Search Capability\n   Users can tag photos and/or organize them\
    \ using sophisticated Web\n   photo album generators.  Users can then search for\
    \ objects (photos)\n   matching desired criteria.\n"
- title: 4.12.5.  Access Control Authorization
  contents:
  - "4.12.5.  Access Control Authorization\n   The access control method for clients\
    \ is typically either private or\n   public-unrestricted.  For example, writing\
    \ (storing) to a photo blog\n   is typically private to the owner of the account.\
    \  However, all other\n   clients can view (read) the contents of the blog (i.e.,\
    \ public-\n   unrestricted).  Some photo-sharing Websites provide private access\
    \ to\n   read photos to allow sharing with a limited set of friends.\n"
- title: 4.12.6.  Resource Control Interface
  contents:
  - "4.12.6.  Resource Control Interface\n   Not provided.\n"
- title: 4.12.7.  Discovery Mechanism
  contents:
  - "4.12.7.  Discovery Mechanism\n   Clients usually log on manually to a central\
    \ Web page for the service\n   and enter the appropriate information to access\
    \ the desired\n   information.  The address to which the client connects is usually\n\
    \   determined by DNS using the hostname from the provided URL.\n"
- title: 4.12.8.  Storage Mode
  contents:
  - "4.12.8.  Storage Mode\n   File system (file-based).  Photos are usually stored\
    \ as files.  They\n   can then be organized into meta-structures (e.g., albums,\
    \ galleries,\n   etc.) using sophisticated Web photo album generators.\n"
- title: 4.13.  Usenet
  contents:
  - "4.13.  Usenet\n   Usenet is a distributed Internet-based discussion (message)\
    \ system.\n   The Usenet messages are arranged as a set of \"newsgroups\" that\
    \ are\n   classified hierarchically by subject.  Usenet information is\n   distributed\
    \ and stored among a large conglomeration of servers that\n   store and forward\
    \ messages to one another in so-called news feeds.\n   Individual users may read\
    \ messages from, and post messages to, a\n   local news server typically operated\
    \ by an ISP.  This local server\n   communicates with other servers and exchanges\
    \ articles with them.  In\n   this fashion, the message is copied from server\
    \ to server and\n   eventually reaches every server in the network [27].\n   Traditional\
    \ Usenet as described above operates as a P2P network\n   between the servers,\
    \ and in a client-server architecture between the\n   user and their local news\
    \ server.  The user requires a Usenet client\n   to be installed on their computer\
    \ and a Usenet server account\n   (through their ISP).  However, with the rise\
    \ of Web browsers, the\n   Usenet architecture is evolving to be Web-based.  The\
    \ most popular\n   example of this is Google Groups, where Google hosts all the\n\
    \   newsgroups and client access is via a standard HTTP-based Web\n   browser\
    \ [28].\n"
- title: 4.13.1.  Applicability to DECADE
  contents:
  - "4.13.1.  Applicability to DECADE\n   Usenet is a historically very important\
    \ and widely used (deployed)\n   example of in-network storage in the Internet.\
    \  The use of this\n   system is rapidly declining, but efforts have been made\
    \ to preserve\n   the stored content for historical purposes.\n"
- title: 4.13.2.  Data Access Interface
  contents:
  - "4.13.2.  Data Access Interface\n   Users can read and post (store) messages.\n"
- title: 4.13.3.  Data Management Operations
  contents:
  - "4.13.3.  Data Management Operations\n   Users sometimes have limited ability\
    \ to delete messages that they\n   previously posted.\n"
- title: 4.13.4.  Data Search Capability
  contents:
  - "4.13.4.  Data Search Capability\n   Traditionally, users could manually search\
    \ through the newsgroups, as\n   they are classified hierarchically by subject.\
    \  In the newer Web-\n   based systems, there is also an automatic search capability\
    \ based on\n   key-word matches.\n"
- title: 4.13.5.  Access Control Authorization
  contents:
  - "4.13.5.  Access Control Authorization\n   The access control method is either\
    \ public-unrestricted or private\n   (to client members of that newsgroup).\n"
- title: 4.13.6.  Resource Control Interface
  contents:
  - "4.13.6.  Resource Control Interface\n   Not provided.\n"
- title: 4.13.7.  Discovery Mechanism
  contents:
  - "4.13.7.  Discovery Mechanism\n   Clients usually log on manually to their Usenet\
    \ accounts.  DNS may be\n   used to resolve hostnames to their corresponding addresses.\n"
- title: 4.13.8.  Storage Mode
  contents:
  - "4.13.8.  Storage Mode\n   File system.  Messages are usually stored as files\
    \ that are then\n   organized hierarchically by subject into newsgroups.\n"
- title: 4.14.  Web Cache
  contents:
  - "4.14.  Web Cache\n   Web cache [29] has been widely deployed by many ISPs to\
    \ reduce\n   bandwidth consumption and Web access latency since the late 1990s.\
    \  A\n   Web cache can cache the Web documents (e.g., HTML pages, images)\n  \
    \ between server and client to reduce bandwidth usage, server load, and\n   perceived\
    \ lag.  A Web cache server is typically shared by many\n   clients, and stores\
    \ copies of documents passing through it;\n   subsequent requests may be satisfied\
    \ from the cache if certain\n   conditions are met.\n   Another form of cache\
    \ is a client-side cache, typically implemented\n   in Web browsers.  A client-side\
    \ cache can keep a local copy of all\n   pages recently displayed by a browser,\
    \ and when the user returns to\n   one of these Web pages, the local cached copy\
    \ is reused.\n   A related protocol for P2P applications to use Web cache is HPTP\n\
    \   (HTTP-based Peer to Peer) [30].  It proposes sharing chunks of P2P\n   files/streams\
    \ using HTTP with cache-control headers.\n"
- title: 4.14.1.  Applicability to DECADE
  contents:
  - "4.14.1.  Applicability to DECADE\n   Web cache is a very widely used (deployed)\
    \ example of in-network\n   storage for the key Internet application of Web browsing.\
    \  The\n   existence and operation of the storage system are transparent to the\n\
    \   end user in most cases.  The content caching time is controlled by\n   time-to-live\
    \ parameters associated with the original content.  The\n   principle of Web caching\
    \ is to speed up Web page reading by using\n   (the same) content previously requested\
    \ by another user to service a\n   new user.\n"
- title: 4.14.2.  Data Access Interface
  contents:
  - "4.14.2.  Data Access Interface\n   Users explicitly read from a Web cache by\
    \ making requests, but they\n   cannot explicitly write data into it.  Data is\
    \ implicitly stored in\n   the Web cache by requesting content that is not already\
    \ cached and\n   meets policy restrictions of the cache provider.\n"
- title: 4.14.3.  Data Management Operations
  contents:
  - "4.14.3.  Data Management Operations\n   Not provided.\n"
- title: 4.14.4.  Data Search Capability
  contents:
  - "4.14.4.  Data Search Capability\n   Not provided.\n"
- title: 4.14.5.  Access Control Authorization
  contents:
  - "4.14.5.  Access Control Authorization\n   The access control method for clients\
    \ is public-unrestricted.  It is\n   important to note that if content is authenticated\
    \ or encrypted\n   (e.g., HTTPS, Secure Socket Layer (SSL)), it will not be cached.\n\
    \   Also, if the content is flagged as private (vs. public) at the HTTP\n   level\
    \ by the origin server, it will not be cached.\n"
- title: 4.14.6.  Resource Control Interface
  contents:
  - "4.14.6.  Resource Control Interface\n   Not provided.\n"
- title: 4.14.7.  Discovery Mechanism
  contents:
  - "4.14.7.  Discovery Mechanism\n   Web caches can be transparently deployed between\
    \ a Web server and Web\n   clients, employing DPI for discovery.  Alternatively,\
    \ Web caches\n   could be explicitly discovered by clients using techniques such\
    \ as\n   DNS or manual configuration.\n"
- title: 4.14.8.  Storage Mode
  contents:
  - "4.14.8.  Storage Mode\n   Object-based.  Web content is keyed within the cache\
    \ by HTTP Request\n   fields, such as Method, URI, and Headers.\n"
- title: 4.15.  Observations Regarding In-Network Storage Systems
  contents:
  - "4.15.  Observations Regarding In-Network Storage Systems\n   The following observations\
    \ about the surveyed in-network storage\n   systems are made in the context of\
    \ DECADE as defined by [1].\n   The majority of the surveyed systems were designed\
    \ for client-server\n   architectures and do not support P2P.  However, there\
    \ are some\n   important exceptions, especially for some of the newer technologies\n\
    \   such as BranchCache and P2P cache, that do support a P2P mode of\n   operation.\n\
    \   The P2P cache systems are interesting, since they do not require\n   changes\
    \ to the P2P applications themselves.  However, this is also a\n   limitation\
    \ in that they are required to support each application\n   protocol.\n   Many\
    \ of the surveyed systems were designed for caching as opposed to\n   long-term\
    \ network storage.  Thus, during DECADE protocol design, it\n   should be carefully\
    \ considered whether a caching mode should be\n   supported in addition to a long-term\
    \ network storage mode.  There is\n   typically a trade-off between providing\
    \ a caching mode and long-term\n   (and usually also reliable) storage with regards\
    \ to some performance\n   metrics.  Note that [1] identifies issues with classical\
    \ caching from\n   a DECADE perspective, such as the fact that P2P caches typically\
    \ do\n   not allow users to explicitly control content stored in the cache.\n\
    \   Certain components of the surveyed systems are outside of the scope\n   of\
    \ DECADE.  For example, a protocol used for searching across\n   multiple DECADE\
    \ servers is out of scope.  However, applications may\n   still be able to implement\
    \ such functionality if DECADE exposes the\n   appropriate primitives.  This has\
    \ the benefit of keeping the core\n   in-network storage systems simple, while\
    \ permitting diverse\n   applications to design mechanisms that meet their own\
    \ requirements.\n   Today, most in-network storage systems follow some variant\
    \ of the\n   authorization model of public-unrestricted, public-restricted, and\n\
    \   private.  For DECADE, we may need to evolve the authorization model\n   to\
    \ support a resource owner (e.g., end user) authorization, in\n   addition to\
    \ the network authorization.\n"
- title: 5.  Storage and Other Related Protocols
  contents:
  - "5.  Storage and Other Related Protocols\n   This section surveys existing storage\
    \ and other related protocols, as\n   well as comments on the usage of these protocols\
    \ to satisfy DECADE's\n   use cases.  The surveyed protocols are listed alphabetically.\n"
- title: 5.1.  HTTP
  contents:
  - "5.1.  HTTP\n   HTTP [31] is a key protocol for the World Wide Web.  It is a\n\
    \   stateless client-server protocol that allows applications to be\n   designed\
    \ using the REST model.  HTTP is often associated with\n   downloading (reading)\
    \ content from Web servers to Web browsers, but\n   it also has support for uploading\
    \ (writing) content to Web servers.\n   It has been used as the underlying protocol\
    \ for other protocols, such\n   as Web Distributed Authoring and Versioning (WebDAV).\n\
    \   HTTP is used in some of the most popular in-network storage systems\n   surveyed\
    \ previously, including CDNs, photo sharing, and Web cache.\n   Usage of HTTP\
    \ by a storage protocol implies that no extra software is\n   required in the\
    \ client (i.e., Web-based client), as all standard Web\n   browsers are based\
    \ on HTTP.\n"
- title: 5.1.1.  Data Access Interface
  contents:
  - "5.1.1.  Data Access Interface\n   Basic read and write operations are supported\
    \ (using HTTP GET, PUT,\n   and POST methods).\n"
- title: 5.1.2.  Data Management Operations
  contents:
  - "5.1.2.  Data Management Operations\n   Not provided.\n"
- title: 5.1.3.  Data Search Capability
  contents:
  - "5.1.3.  Data Search Capability\n   Not provided.\n"
- title: 5.1.4.  Access Control Authorization
  contents:
  - "5.1.4.  Access Control Authorization\n   All methods of access control for clients\
    \ are supported: public-\n   unrestricted, public-restricted, and private.\n \
    \  The majority of Web pages are public-unrestricted in terms of reading\n   but\
    \ do not allow any uploading of content.  In-network storage\n   systems range\
    \ from private or public-unrestricted for photo sharing\n   (described in Section\
    \ 4.12.5) to public-unrestricted for Web caching\n   (described in Section 4.14.5).\n"
- title: 5.1.5.  Resource Control Interface
  contents:
  - "5.1.5.  Resource Control Interface\n   Not provided.\n"
- title: 5.1.6.  Discovery Mechanism
  contents:
  - "5.1.6.  Discovery Mechanism\n   Manual configuration is typically used.  Clients\
    \ typically address\n   HTTP servers by providing a hostname, which is resolved\
    \ to an address\n   using DNS.\n"
- title: 5.1.7.  Storage Mode
  contents:
  - "5.1.7.  Storage Mode\n   HTTP is a protocol; it thus does not define a storage\
    \ mode.  However,\n   a non-collection resource can typically be thought of as\
    \ a \"file\".\n   These files may be organized into collections, which typically\
    \ map\n   onto the HTTP path hierarchy, creating the illusion of a file system.\n"
- title: 5.1.8.  Comments
  contents:
  - "5.1.8.  Comments\n   HTTP is based on a client-server architecture and thus is\
    \ not\n   directly applicable for the DECADE focus on P2P.  Also, HTTP offers\n\
    \   only a rudimentary toolset for storage operations compared to some of\n  \
    \ the other storage protocols.\n"
- title: 5.2.  iSCSI
  contents:
  - "5.2.  iSCSI\n   Small Computer System Interface (SCSI) is a set of protocols\
    \ enabling\n   communication with storage devices such as disk drives and tapes;\n\
    \   Internet SCSI (iSCSI) [32] is a protocol enabling SCSI commands to be\n  \
    \ sent over TCP.  As in SCSI, iSCSI allows an Initiator to send\n   commands to\
    \ a Target.  These commands operate on the device level as\n   opposed to individual\
    \ data objects stored on the device.\n"
- title: 5.2.1.  Data Access Interface
  contents:
  - "5.2.1.  Data Access Interface\n   Read and write commands indicate which data\
    \ is to be read or written\n   by specifying the offset (using Logical Block Addressing)\
    \ into the\n   storage device.  The size of data to be read or written is an\n\
    \   additional parameter in the command.\n"
- title: 5.2.2.  Data Management Operations
  contents:
  - "5.2.2.  Data Management Operations\n   Since commands operate at the device level,\
    \ management operations are\n   different than with traditional file systems.\
    \  Management commands\n   for SCSI/iSCSI include explicit device control commands,\
    \ such as\n   starting, stopping, and formatting the device.\n"
- title: 5.2.3.  Data Search Capability
  contents:
  - "5.2.3.  Data Search Capability\n   SCSI/iSCSI does not provide the ability to\
    \ search for particular data\n   within a device.  Note that such capabilities\
    \ can be implemented\n   outside of iSCSI.\n"
- title: 5.2.4.  Access Control Authorization
  contents:
  - "5.2.4.  Access Control Authorization\n   With respect to access to devices, the\
    \ access control method is\n   private.  iSCSI uses the Challenge Handshake Authentication\
    \ Protocol\n   (CHAP) [33] to authenticate Initiators and Targets when accessing\n\
    \   storage devices.  However, since SCSI/iSCSI operates at the device\n   level,\
    \ neither authentication nor authorization is provided for\n   individual data\
    \ objects.  Note that such capabilities can be\n   implemented outside of iSCSI.\n"
- title: 5.2.5.  Resource Control Interface
  contents:
  - "5.2.5.  Resource Control Interface\n   Not provided.\n"
- title: 5.2.6.  Discovery Mechanism
  contents:
  - "5.2.6.  Discovery Mechanism\n   Manual configuration may be used.  An alternative\
    \ is the Internet\n   Storage Name Service (iSNS) [34], which provides the ability\
    \ to\n   discover available storage resources.\n"
- title: 5.2.7.  Storage Mode
  contents:
  - "5.2.7.  Storage Mode\n   As a protocol, iSCSI does not explicitly have a storage\
    \ mode.\n   However, it provides block-based access to clients.  SCSI/iSCSI\n\
    \   provides an Initiator with block-level access to the storage device.\n"
- title: 5.3.  NFS
  contents:
  - "5.3.  NFS\n   The Network File System (NFS) is designed to allow users to access\n\
    \   files over a network in a manner similar to how local storage is\n   accessed.\
    \  NFS is typically used in local area networks or in\n   enterprise settings,\
    \ though changes made in later versions of NFS\n   (e.g., [35]) make it easier\
    \ to operate over the Internet.\n"
- title: 5.3.1.  Data Access Interface
  contents:
  - "5.3.1.  Data Access Interface\n   Traditional file-system operations such as\
    \ read, write, and update\n   (overwrite) are provided.  Locking is provided to\
    \ support concurrent\n   access by multiple clients.\n"
- title: 5.3.2.  Data Management Operations
  contents:
  - "5.3.2.  Data Management Operations\n   Traditional file-system operations such\
    \ as move and delete are\n   provided.\n"
- title: 5.3.3.  Data Search Capability
  contents:
  - "5.3.3.  Data Search Capability\n   The user has the ability to list contents\
    \ of directories to find\n   filenames matching desired criteria.\n"
- title: 5.3.4.  Access Control Authorization
  contents:
  - "5.3.4.  Access Control Authorization\n   All methods of access control for clients\
    \ are supported: public-\n   unrestricted, public-restricted, and private.  For\
    \ example, files and\n   directories can be protected using read, write, and execute\n\
    \   permissions for the files' owner and group, and for the public\n   (others).\
    \  Also, NFSv4.1 has a rich ACL model allowing a list of\n   Access Control Entries\
    \ (ACEs) to be configured for each file or\n   directory.  The ACEs can specify\
    \ per-user read/write access to file\n   data, file/directory attributes, creation/deletion\
    \ of files in a\n   directory, etc.\n"
- title: 5.3.5.  Resource Control Interface
  contents:
  - "5.3.5.  Resource Control Interface\n   While disk space quotas can be configured,\
    \ administrative policy\n   typically limits the total amount of storage allocated\
    \ to a\n   particular user.  User control of bandwidth and connections used by\n\
    \   remote peers is not provided.\n"
- title: 5.3.6.  Discovery Mechanism
  contents:
  - "5.3.6.  Discovery Mechanism\n   Manual configuration is typically used.  Clients\
    \ address NFS servers\n   by providing a hostname and a directory that should\
    \ be mounted.  DNS\n   may be used to look up an address for the provided hostname.\n"
- title: 5.3.7.  Storage Mode
  contents:
  - "5.3.7.  Storage Mode\n   As a protocol, there is no defined internal storage\
    \ mode.  However,\n   implementations typically use the underlying file-system\
    \ storage.\n   Note that extensions have been defined for alternate storage modes\n\
    \   (e.g., block-based [36] and object-based [37]).\n"
- title: 5.3.8.  Comments
  contents:
  - "5.3.8.  Comments\n   The efficiency and scalability of the NFS access control\
    \ method are\n   concerns in the context of DECADE.  In particular, Section 6.2.1\
    \ of\n   [35] states that:\n      Only ACEs that have a \"who\" that matches the\
    \ requester\n      are considered.\n   Thus, in the context of DECADE, to specify\
    \ per-peer access control\n   policies for an object, a client would need to explicitly\
    \ configure\n   the ACL for the object for each individual peer.  A concern with\
    \ this\n   approach is scalability when a client's peers may change frequently,\n\
    \   and ACLs for many small objects need to be updated constantly during\n   participation\
    \ in a swarm.\n   Note that NFSv4.1's usage of RPCSEC_GSS provides support for\
    \ multiple\n   security mechanisms.  Kerberos V5 is required, but others, such\
    \ as\n   X.509 certificates, are also supported by way of the Generic Security\n\
    \   Service Application Program Interface (GSS-API).  Note, however, that\n  \
    \ NFSv4.1's usage of such security mechanisms is limited to linking a\n   requesting\
    \ user to a particular account maintained by the NFS server.\n"
- title: 5.4.  OAuth
  contents:
  - "5.4.  OAuth\n   Open Authorization (OAuth) [38] is a protocol that enriches the\n\
    \   traditional client-server authentication model for Web resources.  In\n  \
    \ particular, OAuth distinguishes the \"client\" from the \"resource\n   owner\"\
    , thus enabling a resource owner to authorize a particular\n   client for access\
    \ (e.g., for a particular lifetime) to private\n   resources.\n   We include OAuth\
    \ in this survey so that its authentication model can\n   be evaluated in the\
    \ context of DECADE.  OAuth itself, however, is not\n   a network storage protocol.\n"
- title: 5.4.1.  Data Access Interface
  contents:
  - "5.4.1.  Data Access Interface\n   Not provided.\n"
- title: 5.4.2.  Data Management Operations
  contents:
  - "5.4.2.  Data Management Operations\n   Not provided.\n"
- title: 5.4.3.  Data Search Capability
  contents:
  - "5.4.3.  Data Search Capability\n   Not provided.\n"
- title: 5.4.4.  Access Control Authorization
  contents:
  - "5.4.4.  Access Control Authorization\n   Not provided.  While similar in spirit\
    \ to the WebDAV ticketing\n   extensions [39], OAuth instead uses the following\
    \ process: (1) a\n   client constructs a delegation request, (2) the client forwards\
    \ the\n   request to the resource owner for authorization, (3) the resource\n\
    \   owner authorizes the request, and finally (4) a callback is made to\n   the\
    \ client indicating that its request has been authorized.\n   Once the process\
    \ is complete, the client has a set of token\n   credentials that grant it access\
    \ to the protected resource.  The\n   token credentials may have an expiration\
    \ time, and they can also be\n   revoked by the resource owner at any time.\n"
- title: 5.4.5.  Resource Control Interface
  contents:
  - "5.4.5.  Resource Control Interface\n   Not provided.\n"
- title: 5.4.6.  Discovery Mechanism
  contents:
  - "5.4.6.  Discovery Mechanism\n   Not provided.\n"
- title: 5.4.7.  Storage Mode
  contents:
  - "5.4.7.  Storage Mode\n   Not provided.\n"
- title: 5.4.8.  Comments
  contents:
  - "5.4.8.  Comments\n   The ticketing mechanism requires server involvement, and\
    \ the\n   discussion relating to WebDAV's proposed ticketing mechanism (see\n\
    \   Section 5.5.8) applies here as well.\n"
- title: 5.5.  WebDAV
  contents:
  - "5.5.  WebDAV\n   WebDAV [40] is a protocol designed for Web content authoring.\
    \  It is\n   developed as an extension to HTTP (described in Section 5.1), meaning\n\
    \   that it can be simpler to integrate into existing software.  WebDAV\n   supports\
    \ traditional operations for reading/writing from storage, as\n   well as other\
    \ constructs, such as locking and collections, that are\n   important when multiple\
    \ users collaborate to author or edit a set of\n   documents.\n"
- title: 5.5.1.  Data Access Interface
  contents:
  - "5.5.1.  Data Access Interface\n   Traditional read and write operations are supported\
    \ (using HTTP GET\n   and PUT methods, respectively).  Locking is provided to\
    \ support\n   concurrent access by multiple clients.\n"
- title: 5.5.2.  Data Management Operations
  contents:
  - "5.5.2.  Data Management Operations\n   WebDAV supports traditional file-system\
    \ operations, such as move,\n   delete, and copy.  Objects are organized into\
    \ collections, and these\n   operations can also be performed on collections.\
    \  WebDAV also allows\n   objects to have user-defined properties.\n"
- title: 5.5.3.  Data Search Capability
  contents:
  - "5.5.3.  Data Search Capability\n   The user has the ability to list contents\
    \ of collections to find\n   objects matching desired criteria.  A SEARCH extension\
    \ [41] has also\n   been specified allowing listing of objects matching client-defined\n\
    \   criteria.\n"
- title: 5.5.4.  Access Control Authorization
  contents:
  - "5.5.4.  Access Control Authorization\n   All methods of access control for clients\
    \ are supported: public-\n   unrestricted, public-restricted, and private.\n \
    \  For example, an ACL extension [42] is provided for WebDAV.  ACLs\n   allow\
    \ both user-based and group-based access control policies\n   (relating to reading,\
    \ writing, properties, locking, etc.) to be\n   defined for objects and collections.\n\
    \   A ticketing extension [39] has also been proposed, but has not\n   progressed\
    \ since 2001.  This extension allows a client to request the\n   WebDAV server\
    \ to create a \"ticket\" (e.g., for reading an object) that\n   can be distributed\
    \ to other clients.  Tickets may be given expiration\n   times, or may only allow\
    \ for a fixed number of uses.  The proposed\n   extension requires the server\
    \ to generate tickets and maintain state\n   for outstanding tickets.\n"
- title: 5.5.5.  Resource Control Interface
  contents:
  - "5.5.5.  Resource Control Interface\n   An extension [43] allows disk space quotas\
    \ to be configured for\n   collections.  The extension also allows WebDAV clients\
    \ to query\n   current disk space usage.  User control of bandwidth and connections\n\
    \   used by remote peers is not provided.\n"
- title: 5.5.6.  Discovery Mechanism
  contents:
  - "5.5.6.  Discovery Mechanism\n   Manual configuration is typically used.  Clients\
    \ address WebDAV\n   servers by providing a hostname, which can be resolved to\
    \ an address\n   using DNS.\n"
- title: 5.5.7.  Storage Mode
  contents:
  - "5.5.7.  Storage Mode\n   Though no storage mode is explicitly defined, WebDAV\
    \ can be thought\n   of as providing file system (file-based) storage to a client.\
    \  A\n   non-collection resource can typically be thought of as a \"file\".\n\
    \   Files may be organized into collections, which typically map onto the\n  \
    \ HTTP path hierarchy.\n"
- title: 5.5.8.  Comments
  contents:
  - "5.5.8.  Comments\n   The efficiency and scalability of the WebDAV access control\
    \ method\n   are concerns in the context of DECADE, for reasons similar to those\n\
    \   stated in Section 5.3.8 for NFS.  The proposed WebDAV ticketing\n   extension\
    \ partially alleviates these concerns, but the particular\n   technique may need\
    \ further evaluation before being applied to DECADE.\n   In particular, since\
    \ DECADE clients may continuously upload/download\n   a large number of small-size\
    \ objects, and a single DECADE server may\n   need to scale to many concurrent\
    \ DECADE clients, requiring the server\n   to maintain ticket state and generate\
    \ tickets may not be the best\n   design choice.  Server-generated tickets can\
    \ also increase latency\n   for data transport operations, depending on the message\
    \ flow used by\n   DECADE.\n"
- title: 5.6.  Observations Regarding Storage and Related Protocols
  contents:
  - "5.6.  Observations Regarding Storage and Related Protocols\n   The following\
    \ observations about the surveyed storage and related\n   protocols are made in\
    \ the context of DECADE as defined by [1].\n   All of the surveyed protocols were\
    \ primarily designed for client-\n   server architectures and not for P2P.  However,\
    \ it is conceivable\n   that some of the protocols could be adapted to work in\
    \ a P2P\n   architecture.\n   Several popular in-network storage systems today\
    \ use HTTP as their\n   key protocol, even though it is not classically considered\
    \ as a\n   storage protocol.  HTTP is a stateless protocol that is used to\n \
    \  design RESTful applications.  HTTP is a well-supported and widely\n   implemented\
    \ protocol that can provide important insights for DECADE.\n   The majority of\
    \ the surveyed protocols do not support low-latency\n   access for applications\
    \ such as live streaming.  This was one of the\n   key general requirements for\
    \ DECADE.\n   The majority of the surveyed protocols do not support any form of\n\
    \   resource control interface.  Resource control is required for users\n   to\
    \ manage the resources on in-network storage systems, e.g., the\n   bandwidth\
    \ or connections, that can be used by other peers.  Resource\n   control is a\
    \ key capability required for DECADE.\n   Nearly all surveyed protocols did, however,\
    \ support the following\n   capabilities required for DECADE: ability of the user\
    \ to read/write\n   content, some form of access control, some form of error indication,\n\
    \   and the ability to traverse firewalls and NATs.\n"
- title: 6.  Conclusions
  contents:
  - "6.  Conclusions\n   Though there have been many successful in-network storage\
    \ systems,\n   they have been designed for use cases different from those defined\
    \ in\n   DECADE.  For example, many of the surveyed in-network storage systems\n\
    \   and protocols were designed for client-server architectures and not\n   P2P.\
    \  No surveyed system or protocol has the functionality and\n   features to fully\
    \ meet the set of requirements defined for DECADE.\n   DECADE aims to provide\
    \ a standard protocol for P2P applications and\n   content providers to access\
    \ and control in-network storage, resulting\n   in increased network efficiency\
    \ while retaining control over content\n   shared with peers.  Additionally, defining\
    \ a standard protocol can\n   reduce the complexity of in-network storage, since\
    \ multiple P2P\n   application protocols no longer need to be implemented by in-network\n\
    \   storage systems.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document is a survey of existing in-network\
    \ storage systems, and\n   does not introduce any security considerations beyond\
    \ those of the\n   surveyed systems.\n   For more information on security considerations\
    \ of DECADE, see [1].\n"
- title: 8.  Contributors
  contents:
  - "8.  Contributors\n   The editors would like to thank the following people for\
    \ contributing\n   to the development of this document:\n   - ZhiHui Lv\n   -\
    \ Borje Ohlman\n   - Pang Tao\n   - Lucy Yong\n   - Juan Carlos Zuniga\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   The editors would like to thank the following people\
    \ for providing\n   valuable comments to various draft versions of this document:\
    \ David\n   Bryan, Tao Mao, Haibin Song, Ove Strandberg, Yu-Shun Wang, Richard\n\
    \   Woundy, Yunfei Zhang, and Ning Zong.\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [1]   Song, H., Zong, N., Yang, Y., and R. Alimi,\
    \ \"DECoupled\n         Application Data Enroute (DECADE) Problem Statement\"\
    , Work\n         in Progress, October 2011.\n   [2]   Storage Search, \"Flash\
    \ Memory vs. Hard Disk Drives -- Which\n         Will Win?\", <http://www.storagesearch.com/semico-art1.html>.\n\
    \   [3]   Brisken, W., \"Hard Drive Price Trends\", US VLBI Technical\n      \
    \   Meeting, May 2008.\n   [4]   Woundy, R., \"TSV P2P Efforts -- From an ISP's\
    \ Perspective\",\n         IETF 81, Quebec, Canada, July 2011,\n         <http://www.ietf.org/proceedings/81/slides/tsvarea-3.pdf>.\n\
    \   [5]   Gu, Y., Bryan, D., Yang, Y., and R. Alimi, \"DECADE\n         Requirements\"\
    , Work in Progress, September 2011.\n   [6]   Amazon Web Services, \"Amazon Simple\
    \ Storage Service\n         (Amazon S3)\", <http://aws.amazon.com/s3/>.\n   [7]\
    \   Calder, B., Wang, T., Mainali, S., and J. Wu, \"Windows Azure\n         Blob\
    \ -- Programming Blob Storage\", May 2009,\n         <http://www.microsoft.com/windowsazure/whitepapers/>.\n\
    \   [8]   Google, \"Google Storage for Developers\",\n         <http://code.google.com/apis/storage>.\n\
    \   [9]   Dropbox, \"Dropbox Features\", <http://www.dropbox.com/features>.\n\
    \   [10]  Microsoft Corporation, \"BranchCache\",\n         <http://technet.microsoft.com/en-us/network/dd425028.aspx>.\n\
    \   [11]  Microsoft Corporation, \"Web Services Dynamic Discovery\n         (WS-Discovery)\"\
    , April 2005, <http://specs.xmlsoap.org/\n         ws/2005/04/discovery/ws-discovery.pdf>.\n\
    \   [12]  Paul, S., Yates, R., Raychaudhuri, D., and J. Kurose, \"The\n      \
    \   Cache-and-Forward Network Architecture for Efficient Mobile\n         Content\
    \ Delivery Services in the Future Internet\", Innovations\n         in NGN: Future\
    \ Network and Services, 2008.\n   [13]  SNIA, \"Cloud Data Management Interface\
    \ (CDMI)\",\n         <http://www.snia.org/cdmi>.\n   [14]  Pathan, A.K. and Buyya,\
    \ R., \"A Taxonomy and Survey of Content\n         Delivery Networks\", Grid Computing\
    \ and Distributed Systems\n         Laboratory, University of Melbourne, Technical\
    \ Report,\n         February 2007.\n   [15]  Cerf, V., Burleigh, S., Hooke, A.,\
    \ Torgerson, L., Durst, R.,\n         Scott, K., Fall, K., and H. Weiss, \"Delay-Tolerant\
    \ Networking\n         Architecture\", RFC 4838, April 2007.\n   [16]  Scott,\
    \ K. and S. Burleigh, \"Bundle Protocol Specification\",\n         RFC 5050, November\
    \ 2007.\n   [17]  Named Data Networking, \"Named Data Networking Home Page\",\n\
    \         <http://www.named-data.net/>.\n   [18]  Named Data Networking, \"Named\
    \ Data Networking (NDN) Project\",\n         <http://www.named-data.net/ndn-proj.pdf>.\n\
    \   [19]  Network of Information, \"NetInf Overview\",\n         <http://www.netinf.org/home/overview/>.\n\
    \   [20]  Anand, A., Sekar, V., and A. Akella, \"SmartRE: An Architecture\n  \
    \       for Coordinated Network-wide Redundancy Elimination\",\n         SIGCOMM\
    \ 2009.\n   [21]  Rhea, S., Eaton, P., Geels, D., Weatherspoon, H., Zhao, B.,\
    \ and\n         J. Kubiatowicz, \"Pond: the OceanStore Prototype\", FAST 2003.\n\
    \   [22]  Kodak, \"Kodak Gallery Home Page\",\n         <http://www.kodakgallery.com/gallery/welcome.jsp>.\n\
    \   [23]  Wikipedia, \"Kodak Gallery\",\n         <http://en.wikipedia.org/wiki/Kodak_Gallery>.\n\
    \   [24]  Flickr, \"Flickr Home Page\", <http://www.flickr.com>.\n   [25]  ImageShack,\
    \ \"ImageShack Home Page\", <http://imageshack.us>.\n   [26]  Tumblr, \"Tumblr\
    \ Home Page\", <http://www.tumblr.com>.\n   [27]  Wikipedia, \"Usenet\", <http://en.wikipedia.org/wiki/Usenet>.\n\
    \   [28]  Google, \"Google Groups\", <http://groups.google.com>.\n   [29]  Huston,\
    \ G., Telstra, \"Web Caching\", The Internet Protocol\n         Journal Volume\
    \ 2, No. 3.\n   [30]  Shen, G., Wang, Y., Xiong, Y., Zhao, B., and Z-L. Zhang,\
    \ \"HPTP:\n         Relieving the Tension between ISPs and P2P\", 6th International\n\
    \         Workshop on Peer-To-Peer Systems (IPTPS2007).\n   [31]  Fielding, R.,\
    \ Gettys, J., Mogul, J., Frystyk, H., Masinter, L.,\n         Leach, P., and T.\
    \ Berners-Lee, \"Hypertext Transfer Protocol --\n         HTTP/1.1\", RFC 2616,\
    \ June 1999.\n   [32]  Satran, J., Meth, K., Sapuntzakis, C., Chadalapaka, M.,\
    \ and E.\n         Zeidner, \"Internet Small Computer Systems Interface (iSCSI)\"\
    ,\n         RFC 3720, April 2004.\n   [33]  Simpson, W., \"PPP Challenge Handshake\
    \ Authentication Protocol\n         (CHAP)\", RFC 1994, August 1996.\n   [34]\
    \  Tseng, J., Gibbons, K., Travostino, F., Du Laney, C., and J.\n         Souza,\
    \ \"Internet Storage Name Service (iSNS)\", RFC 4171,\n         September 2005.\n\
    \   [35]  Shepler, S., Ed., Eisler, M., Ed., and D. Noveck, Ed., \"Network\n \
    \        File System (NFS) Version 4 Minor Version 1 Protocol\",\n         RFC\
    \ 5661, January 2010.\n   [36]  Black, D., Fridella, S., and J. Glasgow, \"Parallel\
    \ NFS (pNFS)\n         Block/Volume Layout\", RFC 5663, January 2010.\n   [37]\
    \  Halevy, B., Welch, B., and J. Zelenka, \"Object-Based Parallel\n         NFS\
    \ (pNFS) Operations\", RFC 5664, January 2010.\n   [38]  Hammer-Lahav, E., Ed.,\
    \ \"The OAuth 1.0 Protocol\", RFC 5849,\n         April 2010.\n   [39]  Ito, K.,\
    \ \"Ticket-Based Access Control Extension to WebDAV\",\n         Work in Progress,\
    \ October 2001.\n   [40]  Dusseault, L., Ed., \"HTTP Extensions for Web Distributed\n\
    \         Authoring and Versioning (WebDAV)\", RFC 4918, June 2007.\n   [41] \
    \ Reschke, J., Ed., Reddy, S., Davis, J., and A. Babich, \"Web\n         Distributed\
    \ Authoring and Versioning (WebDAV) SEARCH\",\n         RFC 5323, November 2008.\n\
    \   [42]  Clemm, G., Reschke, J., Sedlar, E., and J. Whitehead, \"Web\n      \
    \   Distributed Authoring and Versioning (WebDAV)\n         Access Control Protocol\"\
    , RFC 3744, May 2004.\n   [43]  Korver, B. and L. Dusseault, \"Quota and Size\
    \ Properties\n         for Distributed Authoring and Versioning (DAV) Collections\"\
    ,\n         RFC 4331, February 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Richard Alimi (editor)\n   Google\n   EMail: ralimi@google.com\n\
    \   Akbar Rahman (editor)\n   InterDigital Communications, LLC\n   EMail: Akbar.Rahman@InterDigital.com\n\
    \   Yang Richard Yang (editor)\n   Yale University\n   EMail: yry@cs.yale.edu\n"
