- title: __initial_text__
  contents:
  - '            Simple Authentication and Security Layer (SASL)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Simple Authentication and Security Layer (SASL) is a framework\n\
    \   for providing authentication and data security services in\n   connection-oriented\
    \ protocols via replaceable mechanisms.  It\n   provides a structured interface\
    \ between protocols and mechanisms.\n   The resulting framework allows new protocols\
    \ to reuse existing\n   mechanisms and allows old protocols to make use of new\
    \ mechanisms.\n   The framework also provides a protocol for securing subsequent\n\
    \   protocol exchanges within a data security layer.\n   This document describes\
    \ how a SASL mechanism is structured, describes\n   how protocols include support\
    \ for SASL, and defines the protocol for\n   carrying a data security layer over\
    \ a connection.  In addition, this\n   document defines one SASL mechanism, the\
    \ EXTERNAL mechanism.\n   This document obsoletes RFC 2222.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Document Audiences .........................................4\n  \
    \    1.2. Relationship to Other Documents ............................4\n    \
    \  1.3. Conventions ................................................5\n   2. Identity\
    \ Concepts ...............................................5\n   3. The Authentication\
    \ Exchange .....................................6\n      3.1. Mechanism Naming\
    \ ...........................................8\n      3.2. Mechanism Negotiation\
    \ ......................................9\n      3.3. Request Authentication Exchange\
    \ ............................9\n      3.4. Challenges and Responses ...................................9\n\
    \           3.4.1. Authorization Identity String ......................10\n  \
    \    3.5. Aborting Authentication Exchanges .........................10\n    \
    \  3.6. Authentication Outcome ....................................11\n      3.7.\
    \ Security Layers ...........................................12\n      3.8. Multiple\
    \ Authentications ..................................12\n   4. Protocol Requirements\
    \ ..........................................13\n   5. Mechanism Requirements .........................................16\n\
    \   6. Security Considerations ........................................18\n  \
    \    6.1. Active Attacks ............................................19\n    \
    \       6.1.1. Hijack Attacks .....................................19\n      \
    \     6.1.2. Downgrade Attacks ..................................19\n        \
    \   6.1.3. Replay Attacks .....................................20\n          \
    \ 6.1.4. Truncation Attacks .................................20\n           6.1.5.\
    \ Other Active Attacks ...............................20\n      6.2. Passive Attacks\
    \ ...........................................20\n      6.3. Re-keying .................................................21\n\
    \      6.4. Other Considerations ......................................21\n  \
    \ 7. IANA Considerations ............................................22\n    \
    \  7.1. SASL Mechanism Registry ...................................22\n      7.2.\
    \ Registration Changes ......................................26\n   8. References\
    \ .....................................................26\n      8.1. Normative\
    \ References ......................................26\n      8.2. Informative\
    \ References ....................................27\n   9. Acknowledgements ...............................................28\n\
    \   Appendix A.  The SASL EXTERNAL Mechanism ..........................29\n  \
    \    A.1. EXTERNAL Technical Specification ..........................29\n    \
    \  A.2. SASL EXTERNAL Examples ....................................30\n      A.3.\
    \ Security Considerations ...................................31\n   Appendix B.\
    \  Changes since RFC 2222 ...............................31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Simple Authentication and Security Layer (SASL) is a\
    \ framework\n   for providing authentication and data security services in\n \
    \  connection-oriented protocols via replaceable mechanisms.  SASL\n   provides\
    \ a structured interface between protocols and mechanisms.\n   SASL also provides\
    \ a protocol for securing subsequent protocol\n   exchanges within a data security\
    \ layer.  The data security layer can\n   provide data integrity, data confidentiality,\
    \ and other services.\n   SASL's design is intended to allow new protocols to\
    \ reuse existing\n   mechanisms without requiring redesign of the mechanisms and\
    \ allows\n   existing protocols to make use of new mechanisms without redesign\
    \ of\n   protocols.\n   SASL is conceptually a framework that provides an abstraction\
    \ layer\n   between protocols and mechanisms as illustrated in the following\n\
    \   diagram.\n                  SMTP    LDAP    XMPP   Other protocols ...\n \
    \                    \\       |    |      /\n                      \\      | \
    \   |     /\n                     SASL abstraction layer\n                   \
    \   /      |    |     \\\n                     /       |    |      \\\n      \
    \        EXTERNAL   GSSAPI  PLAIN   Other mechanisms ...\n   It is through the\
    \ interfaces of this abstraction layer that the\n   framework allows any protocol\
    \ to utilize any mechanism.  While this\n   layer does generally hide the particulars\
    \ of protocols from\n   mechanisms and the particulars of mechanisms from protocols,\
    \ this\n   layer does not generally hide the particulars of mechanisms from\n\
    \   protocol implementations.  For example, different mechanisms require\n   different\
    \ information to operate, some of them use password-based\n   authentication,\
    \ some of then require realm information, others make\n   use of Kerberos tickets,\
    \ certificates, etc.  Also, in order to\n   perform authorization, server implementations\
    \ generally have to\n   implement identity mapping between authentication identities,\
    \ whose\n   form is mechanism specific, and authorization identities, whose form\n\
    \   is application protocol specific.  Section 2 discusses identity\n   concepts.\n\
    \   It is possible to design and implement this framework in ways that do\n  \
    \ abstract away particulars of similar mechanisms.  Such a framework\n   implementation,\
    \ as well as mechanisms implementations, could be\n   designed not only to be\
    \ shared by multiple implementations of a\n   particular protocol but to be shared\
    \ by implementations of multiple\n   protocols.\n   The framework incorporates\
    \ interfaces with both protocols and\n   mechanisms in which authentication exchanges\
    \ are carried out.\n   Section 3 discusses SASL authentication exchanges.\n  \
    \ To use SASL, each protocol (amongst other items) provides a method\n   for identifying\
    \ which mechanism is to be used, a method for exchange\n   of mechanism-specific\
    \ server-challenges and client-responses, and a\n   method for communicating the\
    \ outcome of the authentication exchange.\n   Section 4 discusses SASL protocol\
    \ requirements.\n   Each SASL mechanism defines (amongst other items) a series\
    \ of\n   server-challenges and client-responses that provide authentication\n\
    \   services and negotiate data security services.  Section 5 discusses\n   SASL\
    \ mechanism requirements.\n   Section 6 discusses security considerations.  Section\
    \ 7 discusses\n   IANA considerations.  Appendix A defines the SASL EXTERNAL mechanism.\n"
- title: 1.1.  Document Audiences
  contents:
  - "1.1.  Document Audiences\n   This document is written to serve several different\
    \ audiences:\n      -  protocol designers using this specification to support\n\
    \         authentication in their protocol,\n      -  mechanism designers that\
    \ define new SASL mechanisms, and\n      -  implementors of clients or servers\
    \ for those protocols that\n         support SASL.\n   While the document organization\
    \ is intended to allow readers to focus\n   on details relevant to their engineering,\
    \ readers are encouraged to\n   read and understand all aspects of this document.\n"
- title: 1.2.  Relationship to Other Documents
  contents:
  - "1.2.  Relationship to Other Documents\n   This document obsoletes RFC 2222. \
    \ It replaces all portions of RFC\n   2222 excepting sections 7.1 (the KERBEROS_IV\
    \ mechanism), 7.2 (the\n   GSSAPI mechanism), 7.3 (the SKEY mechanism).  The KERBEROS_IV\
    \ and\n   SKEY mechanisms are now viewed as obsolete and their specifications\n\
    \   provided in RFC 2222 are Historic.  The GSSAPI mechanism is now\n   separately\
    \ specified [SASL-GSSAPI].\n   Appendix B provides a summary of changes since\
    \ RFC 2222.\n"
- title: 1.3.  Conventions
  contents:
  - "1.3.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ BCP 14 [RFC2119].\n   Character names in this document use the notation for\
    \ code points and\n   names from the Unicode Standard [Unicode].  For example,\
    \ the letter\n   \"a\" may be represented as either <U+0061> or <LATIN SMALL LETTER\
    \ A>.\n   Note: a glossary of terms used in Unicode can be found in [Glossary].\n\
    \   Information on the Unicode character encoding model can be found in\n   [CharModel].\n\
    \   In examples, \"C:\" and \"S:\" indicate lines of data to be sent by the\n\
    \   client and server, respectively.  Lines have been wrapped for\n   improved\
    \ readability.\n"
- title: 2.  Identity Concepts
  contents:
  - "2.  Identity Concepts\n   In practice, authentication and authorization may involve\
    \ multiple\n   identities, possibly in different forms (simple username, Kerberos\n\
    \   principal, X.500 Distinguished Name, etc.), possibly with different\n   representations\
    \ (e.g., ABNF-described UTF-8 encoded Unicode character\n   string, BER-encoded\
    \ Distinguished Name).  While technical\n   specifications often prescribe both\
    \ the identity form and\n   representation used on the network, different identity\
    \ forms and/or\n   representations may be (and often are) used within implementations.\n\
    \   How identities of different forms relate to each other is, generally,\n  \
    \ a local matter.  In addition, the forms and representations used\n   within\
    \ an implementation are a local matter.\n   However, conceptually, the SASL framework\
    \ involves two identities:\n      1) an identity associated with the authentication\
    \ credentials\n         (termed the authentication identity), and\n      2) an\
    \ identity to act as (termed the authorization identity).\n   SASL mechanism specifications\
    \ describe the credential form(s) (e.g.,\n   X.509 certificates, Kerberos tickets,\
    \ simple username/password) used\n   to authenticate the client, including (where\
    \ appropriate) the syntax\n   and semantics of authentication identities carried\
    \ in the\n   credentials.  SASL protocol specifications describe the identity\n\
    \   form(s) used in authorization and, in particular, prescribe the\n   syntax\
    \ and semantics of the authorization identity character string\n   to be transferred\
    \ by mechanisms.\n   The client provides its credentials (which include or imply\
    \ an\n   authentication identity) and, optionally, a character string\n   representing\
    \ the requested authorization identity as part of the SASL\n   exchange.  When\
    \ this character string is omitted or empty, the client\n   is requesting to act\
    \ as the identity associated with the credentials\n   (e.g., the user is requesting\
    \ to act as the authentication identity).\n   The server is responsible for verifying\
    \ the client's credentials and\n   verifying that the identity it associates with\
    \ the client's\n   credentials (e.g., the authentication identity) is allowed\
    \ to act as\n   the authorization identity.  A SASL exchange fails if either (or\n\
    \   both) of these verifications fails.  (The SASL exchange may fail for\n   other\
    \ reasons, such as service authorization failure.)\n   However, the precise form(s)\
    \ of the authentication identities (used\n   within the server in its verifications,\
    \ or otherwise) and the precise\n   form(s) of the authorization identities (used\
    \ in making authorization\n   decisions, or otherwise) are beyond the scope of\
    \ SASL and this\n   specification.  In some circumstances, the precise identity\
    \ forms\n   used in some context outside of the SASL exchange may be dictated\
    \ by\n   other specifications.  For instance, an identity assumption\n   authorization\
    \ (proxy authorization) policy specification may dictate\n   how authentication\
    \ and authorization identities are represented in\n   policy statements.\n"
- title: 3.  The Authentication Exchange
  contents:
  - "3.  The Authentication Exchange\n   Each authentication exchange consists of\
    \ a message from the client to\n   the server requesting authentication via a\
    \ particular mechanism,\n   followed by one or more pairs of challenges from the\
    \ server and\n   responses from the client, followed by a message from the server\n\
    \   indicating the outcome of the authentication exchange.  (Note:\n   exchanges\
    \ may also be aborted as discussed in Section 3.5.)\n   The following illustration\
    \ provides a high-level overview of an\n   authentication exchange.\n      C:\
    \ Request authentication exchange\n      S: Initial challenge\n      C: Initial\
    \ response\n      <additional challenge/response messages>\n      S: Outcome of\
    \ authentication exchange\n   If the outcome is successful and a security layer\
    \ was negotiated,\n   this layer is then installed (see Section 3.7).  This also\
    \ applies to\n   the following illustrations.\n   Some mechanisms specify that\
    \ the first data sent in the\n   authentication exchange is from the client to\
    \ the server.  Protocols\n   may provide an optional initial response field in\
    \ the request message\n   to carry this data.  Where the mechanism specifies that\
    \ the first\n   data sent in the exchange is from the client to the server, the\n\
    \   protocol provides an optional initial response field, and the client\n   uses\
    \ this field, the exchange is shortened by one round-trip:\n      C: Request authentication\
    \ exchange + Initial response\n      <additional challenge/response messages>\n\
    \      S: Outcome of authentication exchange\n   Where the mechanism specifies\
    \ that the first data sent in the\n   exchange is from the client to the server\
    \ and this field is\n   unavailable or unused, the client request is followed\
    \ by an empty\n   challenge.\n      C: Request authentication exchange\n     \
    \ S: Empty Challenge\n      C: Initial Response\n      <additional challenge/response\
    \ messages>\n      S: Outcome of authentication exchange\n   Should a client include\
    \ an initial response in its request where the\n   mechanism does not allow the\
    \ client to send data first, the\n   authentication exchange fails.\n   Some mechanisms\
    \ specify that the server is to send additional data to\n   the client when indicating\
    \ a successful outcome.  Protocols may\n   provide an optional additional data\
    \ field in the outcome message to\n   carry this data.  Where the mechanism specifies\
    \ that the server is to\n   return additional data with the successful outcome,\
    \ the protocol\n   provides an optional additional data field in the outcome message,\n\
    \   and the server uses this field, the exchange is shortened by one\n   round-trip:\n\
    \      C: Request authentication exchange\n      S: Initial challenge\n      C:\
    \ Initial response\n      <additional challenge/response messages>\n      S: Outcome\
    \ of authentication exchange with\n         additional data with success\n   Where\
    \ the mechanism specifies that the server is to return additional\n   data to\
    \ the client with a successful outcome and this field is\n   unavailable or unused,\
    \ the additional data is sent as a challenge\n   whose response is empty.  After\
    \ receiving this response, the server\n   then indicates the successful outcome.\n\
    \      C: Request authentication exchange\n      S: Initial challenge\n      C:\
    \ Initial response\n      <additional challenge/response messages>\n      S: Additional\
    \ data challenge\n      C: Empty Response\n      S: Outcome of authentication\
    \ exchange\n   Where mechanisms specify that the first data sent in the exchange\
    \ is\n   from the client to the server and additional data is sent to the\n  \
    \ client along with indicating a successful outcome, and the protocol\n   provides\
    \ fields supporting both, then the exchange takes two fewer\n   round-trips:\n\
    \      C: Request authentication exchange + Initial response\n      <additional\
    \ challenge/response messages>\n      S: Outcome of authentication exchange\n\
    \         with additional data with success\n   instead of:\n      C: Request\
    \ authentication exchange\n      S: Empty Challenge\n      C: Initial Response\n\
    \      <additional challenge/response messages>\n      S: Additional data challenge\n\
    \      C: Empty Response\n      S: Outcome of authentication exchange\n"
- title: 3.1.  Mechanism Naming
  contents:
  - "3.1.  Mechanism Naming\n   SASL mechanisms are named by character strings, from\
    \ 1 to 20\n   characters in length, consisting of ASCII [ASCII] uppercase letters,\n\
    \   digits, hyphens, and/or underscores.  In the following Augmented\n   Backus-Naur\
    \ Form (ABNF) [RFC4234] grammar, the <sasl-mech> production\n   defines the syntax\
    \ of a SASL mechanism name.\n      sasl-mech    = 1*20mech-char\n      mech-char\
    \    = UPPER-ALPHA / DIGIT / HYPHEN / UNDERSCORE\n      ; mech-char is restricted\
    \ to A-Z (uppercase only), 0-9, -, and _\n      ; from ASCII character set.\n\
    \      UPPER-ALPHA  = %x41-5A  ; A-Z (uppercase only)\n      DIGIT        = %x30-39\
    \  ; 0-9\n      HYPHEN       = %x2D ; hyphen (-)\n      UNDERSCORE   = %x5F ;\
    \ underscore (_)\n   SASL mechanism names are registered as discussed in Section\
    \ 7.1.\n"
- title: 3.2.  Mechanism Negotiation
  contents:
  - "3.2.  Mechanism Negotiation\n   Mechanism negotiation is protocol specific.\n\
    \   Commonly, a protocol will specify that the server advertises\n   supported\
    \ and available mechanisms to the client via some facility\n   provided by the\
    \ protocol, and the client will then select the \"best\"\n   mechanism from this\
    \ list that it supports and finds suitable.\n   Note that the mechanism negotiation\
    \ is not protected by the\n   subsequent authentication exchange and hence is\
    \ subject to downgrade\n   attacks if not protected by other means.\n   To detect\
    \ downgrade attacks, a protocol can allow the client to\n   discover available\
    \ mechanisms subsequent to the authentication\n   exchange and installation of\
    \ data security layers with at least data\n   integrity protection.  This allows\
    \ the client to detect changes to\n   the list of mechanisms supported by the\
    \ server.\n"
- title: 3.3.  Request Authentication Exchange
  contents:
  - "3.3.  Request Authentication Exchange\n   The authentication exchange is initiated\
    \ by the client by requesting\n   authentication via a mechanism it specifies.\
    \  The client sends a\n   message that contains the name of the mechanism to the\
    \ server.  The\n   particulars of the message are protocol specific.\n   Note\
    \ that the name of the mechanism is not protected by the\n   mechanism, and hence\
    \ is subject to alteration by an attacker if not\n   integrity protected by other\
    \ means.\n   Where the mechanism is defined to allow the client to send data\n\
    \   first, and the protocol's request message includes an optional\n   initial\
    \ response field, the client may include the response to the\n   initial challenge\
    \ in the authentication request message.\n"
- title: 3.4.  Challenges and Responses
  contents:
  - "3.4.  Challenges and Responses\n   The authentication exchange involves one or\
    \ more pairs of server-\n   challenges and client-responses, the particulars of\
    \ which are\n   mechanism specific.  These challenges and responses are enclosed\
    \ in\n   protocol messages, the particulars of which are protocol specific.\n\
    \   Through these challenges and responses, the mechanism may:\n      -  authenticate\
    \ the client to the server,\n      -  authenticate the server to the client,\n\
    \      -  transfer an authorization identity string,\n      -  negotiate a security\
    \ layer, and\n      -  provide other services.\n   The negotiation of the security\
    \ layer may involve negotiation of the\n   security services to be provided in\
    \ the layer, how these services\n   will be provided, and negotiation of a maximum\
    \ cipher-text buffer\n   size each side is able to receive in the layer (see Section\
    \ 3.6).\n   After receiving an authentication request or any client response,\
    \ the\n   server may issue a challenge, abort the exchange, or indicate the\n\
    \   outcome of an exchange.  After receiving a challenge, a client\n   mechanism\
    \ may issue a response or abort the exchange.\n"
- title: 3.4.1.  Authorization Identity String
  contents:
  - "3.4.1.  Authorization Identity String\n   The authorization identity string is\
    \ a sequence of zero or more\n   Unicode [Unicode] characters, excluding the NUL\
    \ (U+0000) character,\n   representing the identity to act as.\n   If the authorization\
    \ identity string is absent, the client is\n   requesting to act as the identity\
    \ the server associates with the\n   client's credentials.  An empty string is\
    \ equivalent to an absent\n   authorization identity.\n   A non-empty authorization\
    \ identity string indicates that the client\n   wishes to act as the identity\
    \ represented by the string.  In this\n   case, the form of identity represented\
    \ by the string, as well as the\n   precise syntax and semantics of the string,\
    \ is protocol specific.\n   While the character encoding schema used to transfer\
    \ the\n   authorization identity string in the authentication exchange is\n  \
    \ mechanism specific, mechanisms are expected to be capable of carrying\n   the\
    \ entire Unicode repertoire (with the exception of the NUL\n   character).\n"
- title: 3.5.  Aborting Authentication Exchanges
  contents:
  - "3.5.  Aborting Authentication Exchanges\n   A client or server may desire to\
    \ abort an authentication exchange if\n   it is unwilling or unable to continue\
    \ (or enter into).\n   A client may abort the authentication exchange by sending\
    \ a message,\n   the particulars of which are protocol specific, to the server,\n\
    \   indicating that the exchange is aborted.  The server may be required\n   by\
    \ the protocol to return a message in response to the client's abort\n   message.\n\
    \   Likewise, a server may abort the authentication exchange by sending a\n  \
    \ message, the particulars of which are protocol specific, to the\n   client,\
    \ indicating that the exchange is aborted.\n"
- title: 3.6.  Authentication Outcome
  contents:
  - "3.6.  Authentication Outcome\n   At the conclusion of the authentication exchange,\
    \ the server sends a\n   message, the particulars of which are protocol specific,\
    \ to the\n   client indicating the outcome of the exchange.\n   The outcome is\
    \ not successful if\n      -  the authentication exchange failed for any reason,\n\
    \      -  the client's credentials could not be verified,\n      -  the server\
    \ cannot associate an identity with the client's\n         credentials,\n    \
    \  -  the client-provided authorization identity string is malformed,\n      -\
    \  the identity associated with the client's credentials is not\n         authorized\
    \ to act as the requested authorization identity,\n      -  the negotiated security\
    \ layer (or lack thereof) is not\n         suitable, or\n      -  the server is\
    \ not willing to provide service to the client for\n         any reason.\n   The\
    \ protocol may include an optional additional data field in this\n   outcome message.\
    \  This field can only include additional data when\n   the outcome is successful.\n\
    \   If the outcome is successful and a security layer was negotiated,\n   this\
    \ layer is then installed.  If the outcome is unsuccessful, or a\n   security\
    \ layer was not negotiated, any existing security is left in\n   place.\n   The\
    \ outcome message provided by the server can provide a way for the\n   client\
    \ to distinguish between errors that are best dealt with by re-\n   prompting\
    \ the user for her credentials, errors that are best dealt\n   with by telling\
    \ the user to try again later, and errors where the\n   user must contact a system\
    \ administrator for resolution (see the SYS\n   and AUTH POP Response Codes [RFC3206]\
    \ specification for an example).\n   This distinction is particularly useful during\
    \ scheduled server\n   maintenance periods as it reduces support costs.  It is\
    \ also\n   important that the server can be configured such that the outcome\n\
    \   message will not distinguish between a valid user with invalid\n   credentials\
    \ and an invalid user.\n"
- title: 3.7.  Security Layers
  contents:
  - "3.7.  Security Layers\n   SASL mechanisms may offer a wide range of services\
    \ in security\n   layers.  Typical services include data integrity and data\n\
    \   confidentiality.  SASL mechanisms that do not provide a security\n   layer\
    \ are treated as negotiating no security layer.\n   If use of a security layer\
    \ is negotiated in the authentication\n   protocol exchange, the layer is installed\
    \ by the server after\n   indicating the outcome of the authentication exchange\
    \ and installed\n   by the client upon receipt of the outcome indication.  In\
    \ both cases,\n   the layer is installed before transfer of further protocol data.\
    \  The\n   precise position upon which the layer takes effect in the protocol\n\
    \   data stream is protocol specific.\n   Once the security layer is in effect\
    \ in the protocol data stream, it\n   remains in effect until either a subsequently\
    \ negotiated security\n   layer is installed or the underlying transport connection\
    \ is closed.\n   When in effect, the security layer processes protocol data into\n\
    \   buffers of protected data.  If at any time the security layer is\n   unable\
    \ or unwilling to continue producing buffers protecting protocol\n   data, the\
    \ underlying transport connection MUST be closed.  If the\n   security layer is\
    \ not able to decode a received buffer, the\n   underlying connection MUST be\
    \ closed.  In both cases, the underlying\n   transport connection SHOULD be closed\
    \ gracefully.\n   Each buffer of protected data is transferred over the underlying\n\
    \   transport connection as a sequence of octets prepended with a four-\n   octet\
    \ field in network byte order that represents the length of the\n   buffer.  The\
    \ length of the protected data buffer MUST be no larger\n   than the maximum size\
    \ that the other side expects.  Upon the receipt\n   of a length field whose value\
    \ is greater than the maximum size, the\n   receiver SHOULD close the connection,\
    \ as this might be a sign of an\n   attack.\n   The maximum size that each side\
    \ expects is fixed by the mechanism,\n   either through negotiation or by its\
    \ specification.\n"
- title: 3.8.  Multiple Authentications
  contents:
  - "3.8.  Multiple Authentications\n   Unless explicitly permitted in the protocol\
    \ (as stated in the\n   protocol's technical specification), only one successful\
    \ SASL\n   authentication exchange may occur in a protocol session.  In this\n\
    \   case, once an authentication exchange has successfully completed,\n   further\
    \ attempts to initiate an authentication exchange fail.\n   Where multiple successful\
    \ SASL authentication exchanges are permitted\n   in the protocol, then in no\
    \ case may multiple SASL security layers be\n   simultaneously in effect.  If\
    \ a security layer is in effect and a\n   subsequent SASL negotiation selects\
    \ a second security layer, then the\n   second security layer replaces the first.\
    \  If a security layer is in\n   effect and a subsequent SASL negotiation selects\
    \ no security layer,\n   the original security layer remains in effect.\n   Where\
    \ multiple successful SASL negotiations are permitted in the\n   protocol, the\
    \ effect of a failed SASL authentication exchange upon\n   the previously established\
    \ authentication and authorization state is\n   protocol specific.  The protocol's\
    \ technical specification should be\n   consulted to determine whether the previous\
    \ authentication and\n   authorization state remains in force, or changed to an\
    \ anonymous\n   state, or otherwise was affected.  Regardless of the protocol-\n\
    \   specific effect upon previously established authentication and\n   authorization\
    \ state, the previously negotiated security layer remains\n   in effect.\n"
- title: 4.  Protocol Requirements
  contents:
  - "4.  Protocol Requirements\n   In order for a protocol to offer SASL services,\
    \ its specification\n   MUST supply the following information:\n   1) A service\
    \ name, to be selected from registry of \"service\" elements\n      for the Generic\
    \ Security Service Application Program Interface\n      (GSSAPI) host-based service\
    \ name form, as described in Section 4.1\n      of [RFC2743].  Note that this\
    \ registry is shared by all GSSAPI and\n      SASL mechanisms.\n   2) Detail any\
    \ mechanism negotiation facility that the protocol\n      provides (see Section\
    \ 3.2).\n      A protocol SHOULD specify a facility through which the client may\n\
    \      discover, both before initiation of the SASL exchange and after\n     \
    \ installing security layers negotiated by the exchange, the names\n      of the\
    \ SASL mechanisms that the server makes available to the\n      client.  The latter\
    \ is important to allow the client to detect\n      downgrade attacks.  This facility\
    \ is typically provided through\n      the protocol's extensions or capabilities\
    \ discovery facility.\n   3) Definition of the messages necessary for authentication\
    \ exchange,\n      including the following:\n      a) A message to initiate the\
    \ authentication exchange (see Section\n         3.3).\n         This message\
    \ MUST contain a field for carrying the name of the\n         mechanism selected\
    \ by the client.\n         This message SHOULD contain an optional field for carrying\
    \ an\n         initial response.  If the message is defined with this field,\n\
    \         the specification MUST describe how messages with an empty\n       \
    \  initial response are distinguished from messages with no\n         initial\
    \ response.  This field MUST be capable of carrying\n         arbitrary sequences\
    \ of octets (including zero-length sequences\n         and sequences containing\
    \ zero-valued octets).\n      b) Messages to transfer server challenges and client\
    \ responses\n         (see Section 3.4).\n         Each of these messages MUST\
    \ be capable of carrying arbitrary\n         sequences of octets (including zero-length\
    \ sequences and\n         sequences containing zero-valued octets).\n      c)\
    \ A message to indicate the outcome of the authentication\n         exchange (see\
    \ Section 3.6).\n         This message SHOULD contain an optional field for carrying\n\
    \         additional data with a successful outcome.  If the message is\n    \
    \     defined with this field, the specification MUST describe how\n         messages\
    \ with an empty additional data are distinguished from\n         messages with\
    \ no additional data.  This field MUST be capable\n         of carrying arbitrary\
    \ sequences of octets (including zero-\n         length sequences and sequences\
    \ containing zero-valued octets).\n   4) Prescribe the syntax and semantics of\
    \ non-empty authorization\n      identity strings (see Section 3.4.1).\n     \
    \ In order to avoid interoperability problems due to differing\n      normalizations,\
    \ the protocol specification MUST detail precisely\n      how and where (client\
    \ or server) non-empty authorization identity\n      strings are prepared, including\
    \ all normalizations, for comparison\n      and other applicable functions to\
    \ ensure proper function.\n      Specifications are encouraged to prescribe use\
    \ of existing\n      authorization identity forms as well as existing string\n\
    \      representations, such as simple user names [RFC4013].\n      Where the\
    \ specification does not precisely prescribe how\n      identities in SASL relate\
    \ to identities used elsewhere in the\n      protocol, for instance, in access\
    \ control policy statements, it\n      may be appropriate for the protocol to\
    \ provide a facility by which\n      the client can discover information (such\
    \ as the representation of\n      the identity used in making access control decisions)\
    \ about\n      established identities for these uses.\n   5) Detail any facility\
    \ the protocol provides that allows the client\n      and/or server to abort authentication\
    \ exchange (see Section 3.5).\n      Protocols that support multiple authentications\
    \ typically allow a\n      client to abort an ongoing authentication exchange\
    \ by initiating a\n      new authentication exchange.  Protocols that do not support\n\
    \      multiple authentications may require the client to close the\n      connection\
    \ and start over to abort an ongoing authentication\n      exchange.\n      Protocols\
    \ typically allow the server to abort ongoing\n      authentication exchanges\
    \ by returning a non-successful outcome\n      message.\n   6) Identify precisely\
    \ where newly negotiated security layers start to\n      take effect, in both\
    \ directions (see Section 3.7).\n      Typically, specifications require security\
    \ layers to start taking\n      effect on the first octet following the outcome\
    \ message in data\n      being sent by the server and on the first octet sent\
    \ after receipt\n      of the outcome message in data being sent by the client.\n\
    \   7) If the protocol supports other layered security services, such as\n   \
    \   Transport Layer Security (TLS) [RFC4346], the specification MUST\n      prescribe\
    \ the order in which security layers are applied to\n      protocol data.\n  \
    \    For instance, where a protocol supports both TLS and SASL security\n    \
    \  layers, the specification could prescribe any of the following:\n      a) SASL\
    \ security layer is always applied first to data being sent\n         and, hence,\
    \ applied last to received data,\n      b) SASL security layer is always applied\
    \ last to data being sent\n         and, hence, applied first to received data,\n\
    \      c) Layers are applied in the order in which they were installed,\n    \
    \  d) Layers are applied in the reverse order in which they were\n         installed,\
    \ or\n      e) Both TLS and SASL security layers cannot be installed.\n   8) Indicate\
    \ whether the protocol supports multiple authentications\n      (see Section 3.8).\
    \  If so, the protocol MUST detail the effect a\n      failed SASL authentication\
    \ exchange will have upon a previously\n      established authentication and authorization\
    \ state.\n   Protocol specifications SHOULD avoid stating implementation\n   requirements\
    \ that would hinder replacement of applicable mechanisms.\n   In general, protocol\
    \ specifications SHOULD be mechanism neutral.\n   There are a number of reasonable\
    \ exceptions to this recommendation,\n   including\n      -  detailing how credentials\
    \ (which are mechanism specific) are\n         managed in the protocol,\n    \
    \  -  detailing how authentication identities (which are mechanism\n         specific)\
    \ and authorization identities (which are protocol\n         specific) relate\
    \ to each other, and\n      -  detailing which mechanisms are applicable to the\
    \ protocol.\n"
- title: 5.  Mechanism Requirements
  contents:
  - "5.  Mechanism Requirements\n   SASL mechanism specifications MUST supply the\
    \ following information:\n   1) The name of the mechanism (see Section 3.1). \
    \ This name MUST be\n      registered as discussed in Section 7.1.\n   2) A definition\
    \ of the server-challenges and client-responses of the\n      authentication exchange,\
    \ as well as the following:\n      a) An indication of whether the mechanism is\
    \ client-first,\n         variable, or server-first.  If a SASL mechanism is defined\
    \ as\n         client-first and the client does not send an initial response\n\
    \         in the authentication request, then the first server challenge\n   \
    \      MUST be empty (the EXTERNAL mechanism is an example of this\n         case).\
    \  If a SASL mechanism is defined as variable, then the\n         specification\
    \ needs to state how the server behaves when the\n         initial client response\
    \ in the authentication request is\n         omitted (the DIGEST-MD5 mechanism\
    \ [DIGEST-MD5] is an example of\n         this case).  If a SASL mechanism is\
    \ defined as server-first,\n         then the client MUST NOT send an initial\
    \ client response in the\n         authentication request (the CRAM-MD5 mechanism\
    \ [CRAM-MD5] is an\n         example of this case).\n      b) An indication of\
    \ whether the server is expected to provide\n         additional data when indicating\
    \ a successful outcome.  If so,\n         if the server sends the additional data\
    \ as a challenge, the\n         specification MUST indicate that the response\
    \ to this challenge\n         is an empty response.\n      SASL mechanisms SHOULD\
    \ be designed to minimize the number of\n      challenges and responses necessary\
    \ to complete the exchange.\n   3) An indication of whether the mechanism is capable\
    \ of transferring\n      authorization identity strings (see Section 3.4.1). \
    \ While some\n      legacy mechanisms are incapable of transmitting an authorization\n\
    \      identity (which means that for these mechanisms, the authorization\n  \
    \    identity is always the empty string), newly defined mechanisms\n      SHOULD\
    \ be capable of transferring authorization identity strings.\n      The mechanism\
    \ SHOULD NOT be capable of transferring both no\n      authorization identity\
    \ string and an empty authorization identity.\n      Mechanisms that are capable\
    \ of transferring an authorization\n      identity string MUST be capable of transferring\
    \ arbitrary non-\n      empty sequences of Unicode characters, excluding those\
    \ that\n      contain the NUL (U+0000) character.  Mechanisms SHOULD use the\n\
    \      UTF-8 [RFC3629] transformation format.  The specification MUST\n      detail\
    \ how any Unicode code points special to the mechanism that\n      might appear\
    \ in the authorization identity string are escaped to\n      avoid ambiguity during\
    \ decoding of the authorization identity\n      string.  Typically, mechanisms\
    \ that have special characters\n      require these special characters to be escaped\
    \ or encoded in the\n      character string (after encoding it in a particular\
    \ Unicode\n      transformation format) using a data encoding scheme such as Base64\n\
    \      [RFC3548].\n   4) The specification MUST detail whether the mechanism offers\
    \ a\n      security layer.  If the mechanism does, the specification MUST\n  \
    \    detail the security and other services offered in the layer as\n      well\
    \ as how these services are to be implemented.\n   5) If the underlying cryptographic\
    \ technology used by a mechanism\n      supports data integrity, then the mechanism\
    \ specification MUST\n      integrity protect the transmission of an authorization\
    \ identity\n      and the negotiation of the security layer.\n   SASL mechanisms\
    \ SHOULD be protocol neutral.\n   SASL mechanisms SHOULD reuse existing credential\
    \ and identity forms,\n   as well as associated syntaxes and semantics.\n   SASL\
    \ mechanisms SHOULD use the UTF-8 transformation format [RFC3629]\n   for encoding\
    \ Unicode [Unicode] code points for transfer.\n   In order to avoid interoperability\
    \ problems due to differing\n   normalizations, when a mechanism calls for character\
    \ data (other than\n   the authorization identity string) to be used as input\
    \ to a\n   cryptographic and/or comparison function, the specification MUST\n\
    \   detail precisely how and where (client or server) the character data\n   is\
    \ to be prepared, including all normalizations, for input into the\n   function\
    \ to ensure proper operation.\n   For simple user names and/or passwords in authentication\
    \ credentials,\n   SASLprep [RFC4013] (a profile of the StringPrep [RFC3454] preparation\n\
    \   algorithm), SHOULD be specified as the preparation algorithm.\n   The mechanism\
    \ SHOULD NOT use the authorization identity string in\n   generation of any long-term\
    \ cryptographic keys or hashes as there is\n   no requirement that the authorization\
    \ identity string be canonical.\n   Long-term, here, means a term longer than\
    \ the duration of the\n   authentication exchange in which they were generated.\
    \  That is, as\n   different clients (of the same or different protocol) may provide\n\
    \   different authorization identity strings that are semantically\n   equivalent,\
    \ use of authorization identity strings in generation of\n   cryptographic keys\
    \ and hashes will likely lead to interoperability\n   and other problems.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Security issues are discussed throughout this\
    \ memo.\n   Many existing SASL mechanisms do not provide adequate protection\n\
    \   against passive attacks, let alone active attacks, in the\n   authentication\
    \ exchange.  Many existing SASL mechanisms do not offer\n   security layers. \
    \ It is hoped that future SASL mechanisms will\n   provide strong protection against\
    \ passive and active attacks in the\n   authentication exchange, as well as security\
    \ layers with strong basic\n   data security features (e.g., data integrity and\
    \ data\n   confidentiality) services.  It is also hoped that future mechanisms\n\
    \   will provide more advanced data security services like re-keying (see\n  \
    \ Section 6.3).\n   Regardless, the SASL framework is susceptible to downgrade\
    \ attacks.\n   Section 6.1.2 offers a variety of approaches for preventing or\n\
    \   detecting these attacks.  In some cases, it is appropriate to use\n   data\
    \ integrity protective services external to SASL (e.g., TLS) to\n   protect against\
    \ downgrade attacks in SASL.  Use of external\n   protective security services\
    \ is also important when the mechanisms\n   available do not themselves offer\
    \ adequate integrity and/or\n   confidentiality protection of the authentication\
    \ exchange and/or\n   protocol data.\n"
- title: 6.1.  Active Attacks
  contents:
  - '6.1.  Active Attacks

    '
- title: 6.1.1.  Hijack Attacks
  contents:
  - "6.1.1.  Hijack Attacks\n   When the client selects a SASL security layer with\
    \ at least integrity\n   protection, this protection serves as a counter-measure\
    \ against an\n   active attacker hijacking the connection and modifying protocol\
    \ data\n   sent after establishment of the security layer.  Implementations\n\
    \   SHOULD close the connection when the security services in a SASL\n   security\
    \ layer report protocol data report lack of data integrity.\n"
- title: 6.1.2.  Downgrade Attacks
  contents:
  - "6.1.2.  Downgrade Attacks\n   It is important that any security-sensitive protocol\
    \ negotiations be\n   performed after installation of a security layer with data\
    \ integrity\n   protection.  Protocols should be designed such that negotiations\n\
    \   performed prior to this installation should be revalidated after\n   installation\
    \ is complete.  Negotiation of the SASL mechanism is\n   security sensitive.\n\
    \   When a client negotiates the authentication mechanism with the server\n  \
    \ and/or other security features, it is possible for an active attacker\n   to\
    \ cause a party to use the least secure security services available.\n   For instance,\
    \ an attacker can modify the server-advertised mechanism\n   list or can modify\
    \ the client-advertised security feature list within\n   a mechanism response.\
    \  To protect against this sort of attack,\n   implementations SHOULD NOT advertise\
    \ mechanisms and/or features that\n   cannot meet their minimum security requirements,\
    \ SHOULD NOT enter\n   into or continue authentication exchanges that cannot meet\
    \ their\n   minimum security requirements, and SHOULD verify that completed\n\
    \   authentication exchanges result in security services that meet their\n   minimum\
    \ security requirements.  Note that each endpoint needs to\n   independently verify\
    \ that its security requirements are met.\n   In order to detect downgrade attacks\
    \ to the least (or less) secure\n   mechanism supported, the client can discover\
    \ the SASL mechanisms that\n   the server makes available both before the SASL\
    \ authentication\n   exchange and after the negotiated SASL security layer (with\
    \ at least\n   data integrity protection) has been installed through the protocol's\n\
    \   mechanism discovery facility.  If the client finds that the\n   integrity-protected\
    \ list (the list obtained after the security layer\n   was installed) contains\
    \ a stronger mechanism than those in the\n   previously obtained list, the client\
    \ should assume that the\n   previously obtained list was modified by an attacker\
    \ and SHOULD close\n   the underlying transport connection.\n   The client's initiation\
    \ of the SASL exchange, including the selection\n   of a SASL mechanism, is done\
    \ in the clear and may be modified by an\n   active attacker.  It is important\
    \ for any new SASL mechanisms to be\n   designed such that an active attacker\
    \ cannot obtain an authentication\n   with weaker security properties by modifying\
    \ the SASL mechanism name\n   and/or the challenges and responses.\n   Multi-level\
    \ negotiation of security features is prone to downgrade\n   attack.  Protocol\
    \ designers should avoid offering higher-level\n   negotiation of security features\
    \ in protocols (e.g., above SASL\n   mechanism negotiation) and mechanism designers\
    \ should avoid lower-\n   level negotiation of security features in mechanisms\
    \ (e.g., below\n   SASL mechanism negotiation).\n"
- title: 6.1.3.  Replay Attacks
  contents:
  - "6.1.3.  Replay Attacks\n   Some mechanisms may be subject to replay attacks unless\
    \ protected by\n   external data security services (e.g., TLS).\n"
- title: 6.1.4.  Truncation Attacks
  contents:
  - "6.1.4.  Truncation Attacks\n   Most existing SASL security layers do not themselves\
    \ offer protection\n   against truncation attack.  In a truncation attack, the\
    \ active\n   attacker causes the protocol session to be closed, causing a\n  \
    \ truncation of the possibly integrity-protected data stream that leads\n   to\
    \ behavior of one or both the protocol peers that inappropriately\n   benefits\
    \ the attacker.  Truncation attacks are fairly easy to defend\n   against in connection-oriented\
    \ application-level protocols.  A\n   protocol can defend against these attacks\
    \ by ensuring that each\n   information exchange has a clear final result and\
    \ that each protocol\n   session has a graceful closure mechanism, and that these\
    \ are\n   integrity protected.\n"
- title: 6.1.5.  Other Active Attacks
  contents:
  - "6.1.5.  Other Active Attacks\n   When use of a security layer is negotiated by\
    \ the authentication\n   protocol exchange, the receiver SHOULD handle gracefully\
    \ any\n   protected data buffer larger than the defined/negotiated maximal\n \
    \  size.  In particular, it MUST NOT blindly allocate the amount of\n   memory\
    \ specified in the buffer size field, as this might cause the\n   \"out of memory\"\
    \ condition.  If the receiver detects a large block, it\n   SHOULD close the connection.\n"
- title: 6.2.  Passive Attacks
  contents:
  - "6.2.  Passive Attacks\n   Many mechanisms are subject to various passive attacks,\
    \ including\n   simple eavesdropping of unprotected credential information as\
    \ well as\n   online and offline dictionary attacks of protected credential\n\
    \   information.\n"
- title: 6.3.  Re-keying
  contents:
  - "6.3.  Re-keying\n   The secure or administratively permitted lifetimes of SASL\n\
    \   mechanisms' security layers are finite.  Cryptographic keys weaken as\n  \
    \ they are used and as time passes; the more time and/or cipher-text\n   that\
    \ a cryptanalyst has after the first use of the a key, the easier\n   it is for\
    \ the cryptanalyst to mount attacks on the key.\n   Administrative limits on a\
    \ security layer's lifetime may take the\n   form of time limits expressed in\
    \ X.509 certificates, in Kerberos V\n   tickets, or in directories, and are often\
    \ desired.  In practice, one\n   likely effect of administrative lifetime limits\
    \ is that applications\n   may find that security layers stop working in the middle\
    \ of\n   application protocol operation, such as, perhaps, during large data\n\
    \   transfers.  As the result of this, the connection will be closed (see\n  \
    \ Section 3.7), which will result in an unpleasant user experience.\n   Re-keying\
    \ (key renegotiation process) is a way of addressing the\n   weakening of cryptographic\
    \ keys.  The SASL framework does not itself\n   provide for re-keying; SASL mechanisms\
    \ may.  Designers of future SASL\n   mechanisms should consider providing re-keying\
    \ services.\n   Implementations that wish to re-key SASL security layers where\
    \ the\n   mechanism does not provide for re-keying SHOULD reauthenticate the\n\
    \   same IDs and replace the expired or soon-to-expire security layers.\n   This\
    \ approach requires support for reauthentication in the\n   application protocols\
    \ (see Section 3.8).\n"
- title: 6.4.  Other Considerations
  contents:
  - "6.4.  Other Considerations\n   Protocol designers and implementors should understand\
    \ the security\n   considerations of mechanisms so they may select mechanisms\
    \ that are\n   applicable to their needs.\n   Distributed server implementations\
    \ need to be careful in how they\n   trust other parties.  In particular, authentication\
    \ secrets should\n   only be disclosed to other parties that are trusted to manage\
    \ and use\n   those secrets in a manner acceptable to the disclosing party.\n\
    \   Applications using SASL assume that SASL security layers providing\n   data\
    \ confidentiality are secure even when an attacker chooses the\n   text to be\
    \ protected by the security layer.  Similarly, applications\n   assume that the\
    \ SASL security layer is secure even if the attacker\n   can manipulate the cipher-text\
    \ output of the security layer.  New\n   SASL mechanisms are expected to meet\
    \ these assumptions.\n   Unicode security considerations [UTR36] apply to authorization\n\
    \   identity strings, as well as UTF-8 [RFC3629] security considerations\n   where\
    \ UTF-8 is used.  SASLprep [RFC4013] and StringPrep [RFC3454]\n   security considerations\
    \ also apply where used.\n"
- title: 7.  IANA Considerations
  contents:
  - '7.  IANA Considerations

    '
- title: 7.1.  SASL Mechanism Registry
  contents:
  - "7.1.  SASL Mechanism Registry\n   The SASL mechanism registry is maintained by\
    \ IANA.  The registry is\n   currently available at <http://www.iana.org/assignments/sasl-\n\
    \   mechanisms>.\n   The purpose of this registry is not only to ensure uniqueness\
    \ of\n   values used to name SASL mechanisms, but also to provide a definitive\n\
    \   reference to technical specifications detailing each SASL mechanism\n   available\
    \ for use on the Internet.\n   There is no naming convention for SASL mechanisms;\
    \ any name that\n   conforms to the syntax of a SASL mechanism name can be registered.\n\
    \   The procedure detailed in Section 7.1.1 is to be used for\n   registration\
    \ of a value naming a specific individual mechanism.\n   The procedure detailed\
    \ in Section 7.1.2 is to be used for\n   registration of a value naming a family\
    \ of related mechanisms.\n   Comments may be included in the registry as discussed\
    \ in Section\n   7.1.3 and may be changed as discussed in Section 7.1.4.\n   The\
    \ SASL mechanism registry has been updated to reflect that this\n   document provides\
    \ the definitive technical specification for SASL and\n   that this section provides\
    \ the registration procedures for this\n   registry.\n"
- title: 7.1.1.  Mechanism Name Registration Procedure
  contents:
  - "7.1.1.  Mechanism Name Registration Procedure\n   IANA will register new SASL\
    \ mechanism names on a First Come First\n   Served basis, as defined in BCP 26\
    \ [RFC2434].  IANA has the right to\n   reject obviously bogus registration requests,\
    \ but will perform no\n   review of claims made in the registration form.\n  \
    \ Registration of a SASL mechanism is requested by filling in the\n   following\
    \ template:\n      Subject: Registration of SASL mechanism X\n      SASL mechanism\
    \ name (or prefix for the family):\n      Security considerations:\n      Published\
    \ specification (recommended):\n      Person & email address to contact for further\
    \ information:\n      Intended usage: (One of COMMON, LIMITED USE, or OBSOLETE)\n\
    \      Owner/Change controller:\n      Note: (Any other information that the author\
    \ deems relevant may be\n      added here.)\n   and sending it via electronic\
    \ mail to IANA at <iana@iana.org>.\n   While this registration procedure does\
    \ not require expert review,\n   authors of SASL mechanisms are encouraged to\
    \ seek community review\n   and comment whenever that is feasible.  Authors may\
    \ seek community\n   review by posting a specification of their proposed mechanism\
    \ as an\n   Internet-Draft.  SASL mechanisms intended for widespread use should\n\
    \   be standardized through the normal IETF process, when appropriate.\n"
- title: 7.1.2.  Family Name Registration Procedure
  contents:
  - "7.1.2.  Family Name Registration Procedure\n   As noted above, there is no general\
    \ naming convention for SASL\n   mechanisms.  However, specifications may reserve\
    \ a portion of the\n   SASL mechanism namespace for a set of related SASL mechanisms,\
    \ a\n   \"family\" of SASL mechanisms.  Each family of SASL mechanisms is\n  \
    \ identified by a unique prefix, such as X-.  Registration of new SASL\n   mechanism\
    \ family names requires expert review as defined in BCP 26\n   [RFC2434].\n  \
    \ Registration of a SASL family name is requested by filling in the\n   following\
    \ template:\n      Subject: Registration of SASL mechanism family X\n      SASL\
    \ family name (or prefix for the family):\n      Security considerations:\n  \
    \    Published specification (recommended):\n      Person & email address to contact\
    \ for further information:\n      Intended usage: (One of COMMON, LIMITED USE,\
    \ or OBSOLETE)\n      Owner/Change controller:\n      Note: (Any other information\
    \ that the author deems relevant may be\n      added here.)\n   and sending it\
    \ via electronic mail to the IETF SASL mailing list at\n   <ietf-sasl@imc.org>\
    \ and carbon copying IANA at <iana@iana.org>.\n   After allowing two weeks for\
    \ community input on the IETF SASL mailing\n   list, the expert will determine\
    \ the appropriateness of the\n   registration request and either approve or disapprove\
    \ the request\n   with notice to the requestor, the mailing list, and IANA.\n\
    \   The review should focus on the appropriateness of the requested\n   family\
    \ name for the proposed use and the appropriateness of the\n   proposed naming\
    \ and registration plan for existing and future\n   mechanism names in the family.\
    \  The scope of this request review may\n   entail consideration of relevant aspects\
    \ of any provided technical\n   specification, such as their IANA Considerations\
    \ section.  However,\n   this review is narrowly focused on the appropriateness\
    \ of the\n   requested registration and not on the overall soundness of any\n\
    \   provided technical specification.\n   Authors are encouraged to pursue community\
    \ review by posting the\n   technical specification as an Internet-Draft and soliciting\
    \ comment\n   by posting to appropriate IETF mailing lists.\n"
- title: 7.1.3.  Comments on SASL Mechanism Registrations
  contents:
  - "7.1.3.  Comments on SASL Mechanism Registrations\n   Comments on a registered\
    \ SASL mechanism/family should first be sent\n   to the \"owner\" of the mechanism/family\
    \ and/or to the <ietf-\n   sasl@imc.org> mailing list.\n   Submitters of comments\
    \ may, after a reasonable attempt to contact the\n   owner, request IANA to attach\
    \ their comment to the SASL mechanism\n   registration itself by sending mail\
    \ to <iana@iana.org>.  At IANA's\n   sole discretion, IANA may attach the comment\
    \ to the SASL mechanism's\n   registration.\n"
- title: 7.1.4.  Change Control
  contents:
  - "7.1.4.  Change Control\n   Once a SASL mechanism registration has been published\
    \ by IANA, the\n   author may request a change to its definition.  The change\
    \ request\n   follows the same procedure as the registration request.\n   The\
    \ owner of a SASL mechanism may pass responsibility for the SASL\n   mechanism\
    \ to another person or agency by informing IANA; this can be\n   done without\
    \ discussion or review.\n   The IESG may reassign responsibility for a SASL mechanism.\
    \  The most\n   common case of this will be to enable changes to be made to\n\
    \   mechanisms where the author of the registration has died, has moved\n   out\
    \ of contact, or is otherwise unable to make changes that are\n   important to\
    \ the community.\n   SASL mechanism registrations may not be deleted; mechanisms\
    \ that are\n   no longer believed appropriate for use can be declared OBSOLETE\
    \ by a\n   change to their \"intended usage\" field; such SASL mechanisms will\
    \ be\n   clearly marked in the lists published by IANA.\n   The IESG is considered\
    \ to be the owner of all SASL mechanisms that\n   are on the IETF standards track.\n"
- title: 7.2.  Registration Changes
  contents:
  - "7.2.  Registration Changes\n   The IANA has updated the SASL mechanisms registry\
    \ as follows:\n   1) Changed the \"Intended usage\" of the KERBEROS_V4 and SKEY\
    \ mechanism\n      registrations to OBSOLETE.\n   2) Changed the \"Published specification\"\
    \ of the EXTERNAL mechanism to\n      this document as indicated below:\n    \
    \  Subject: Updated Registration of SASL mechanism EXTERNAL\n      Family of SASL\
    \ mechanisms: NO\n      SASL mechanism name: EXTERNAL\n      Security considerations:\
    \ See A.3 of RFC 4422\n      Published specification (optional, recommended):\
    \ RFC 4422\n      Person & email address to contact for further information:\n\
    \          Alexey Melnikov <Alexey.Melnikov@isode.com>\n      Intended usage:\
    \ COMMON\n      Owner/Change controller: IESG <iesg@ietf.org>\n      Note: Updates\
    \ existing entry for EXTERNAL\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2244]     Newman, C. and J. G. Myers, \"ACAP -- Application\n\
    \                 Configuration Access Protocol\", RFC 2244, November\n      \
    \           1997.\n   [RFC2434]     Narten, T. and H. Alvestrand, \"Guidelines\
    \ for Writing\n                 an IANA Considerations Section in RFCs\", BCP\
    \ 26, RFC\n                 2434, October 1998.\n   [RFC2743]     Linn, J., \"\
    Generic Security Service Application Program\n                 Interface Version\
    \ 2, Update 1\", RFC 2743, January 2000.\n   [RFC3454]     Hoffman, P. and M.\
    \ Blanchet, \"Preparation of\n                 Internationalized Strings (\"stringprep\"\
    )\", RFC 3454,\n                 December 2002.\n   [RFC3629]     Yergeau, F.,\
    \ \"UTF-8, a transformation format of ISO\n                 10646\", STD 63, RFC\
    \ 3629, November 2003.\n   [RFC4013]     Zeilenga, K., \"SASLprep: Stringprep\
    \ Profile for User\n                 Names and Passwords\", RFC 4013, February\
    \ 2005.\n   [RFC4234]     Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n\
    \                 Specifications: ABNF\", RFC 4234, October 2005.\n   [ASCII]\
    \       Coded Character Set--7-bit American Standard Code for\n              \
    \   Information Interchange, ANSI X3.4-1986.\n   [Unicode]     The Unicode Consortium,\
    \ \"The Unicode Standard, Version\n                 3.2.0\" is defined by \"The\
    \ Unicode Standard, Version\n                 3.0\" (Reading, MA, Addison-Wesley,\
    \ 2000. ISBN 0-201-\n                 61633-5), as amended by the \"Unicode Standard\
    \ Annex\n                 #27: Unicode 3.1\"\n                 (http://www.unicode.org/reports/tr27/)\
    \ and by the\n                 \"Unicode Standard Annex #28: Unicode 3.2\"\n \
    \                (http://www.unicode.org/reports/tr28/).\n   [CharModel]   Whistler,\
    \ K. and M. Davis, \"Unicode Technical Report\n                 #17, Character\
    \ Encoding Model\", UTR17,\n                 <http://www.unicode.org/unicode/reports/tr17/>,\
    \ August\n                 2000.\n   [Glossary]    The Unicode Consortium, \"\
    Unicode Glossary\",\n                 <http://www.unicode.org/glossary/>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC3206]     Gellens, R., \"The SYS and AUTH\
    \ POP Response Codes\", RFC\n                 3206, February 2002.\n   [RFC3548]\
    \     Josefsson, S., \"The Base16, Base32, and Base64 Data\n                 Encodings\"\
    , RFC 3548, July 2003.\n   [RFC4301]     Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n                 Internet Protocol\", RFC 4301, December 2005.\n  \
    \ [RFC4346]     Dierks, T. and E. Rescorla, \"The Transport Layer\n          \
    \       Security (TLS) Protocol Version 1.1\", RFC 4346, April\n             \
    \    2006.\n   [SASL-GSSAPI] Melnikov, A. (Editor), \"The Kerberos V5 (\"GSSAPI\"\
    ) SASL\n                 Mechanism\", Work in Progress, May 2006.\n   [UTR36]\
    \       Davis, M., \"(Draft) Unicode Technical Report #36,\n                 Character\
    \ Encoding Model\", UTR17,\n                 <http://www.unicode.org/unicode/reports/tr36/>,\n\
    \                 February 2005.\n   [CRAM-MD5]    Nerenberg, L., \"The CRAM-MD5\
    \ SASL Mechanism\", Work in\n                 Progress.\n   [DIGEST-MD5]  Leach,\
    \ P., C. Newman, and A. Melnikov, \"Using Digest\n                 Authentication\
    \ as a SASL Mechanism\", Work in Progress,\n                 March 2006.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   This document is a revision of RFC 2222 written by John\
    \ Myers.\n   This revision is a product of the IETF Simple Authentication and\n\
    \   Security Layer (SASL) Working Group.\n   The following individuals contributed\
    \ significantly to this revision:\n   Abhijit Menon-Sen, Hallvard Furuseth, Jeffrey\
    \ Hutzelman, John Myers,\n   Luke Howard, Magnus Nystrom, Nicolas Williams, Peter\
    \ Saint-Andre, RL\n   'Bob' Morgan, Rob Siemborski, Sam Hartman, Simon Josefsson,\
    \ Tim\n   Alsop, and Tony Hansen.\n"
- title: Appendix A.  The SASL EXTERNAL Mechanism
  contents:
  - "Appendix A.  The SASL EXTERNAL Mechanism\n   This appendix is normative.\n  \
    \ The EXTERNAL mechanism allows a client to request the server to use\n   credentials\
    \ established by means external to the mechanism to\n   authenticate the client.\
    \  The external means may be, for instance, IP\n   Security [RFC4301] or TLS [RFC4346]\
    \ services.  In absence of some a\n   priori agreement between the client and\
    \ the server, the client cannot\n   make any assumption as to what external means\
    \ the server has used to\n   obtain the client's credentials, nor make an assumption\
    \ as to the\n   form of credentials.  For example, the client cannot assume that\
    \ the\n   server will use the credentials the client has established via TLS.\n"
- title: A.1.  EXTERNAL Technical Specification
  contents:
  - "A.1.  EXTERNAL Technical Specification\n   The name of this mechanism is \"EXTERNAL\"\
    .\n   The mechanism does not provide a security layer.\n   The mechanism is capable\
    \ of transferring an authorization identity\n   string.  If empty, the client\
    \ is requesting to act as the identity\n   the server has associated with the\
    \ client's credentials.  If non-\n   empty, the client is requesting to act as\
    \ the identity represented by\n   the string.\n   The client is expected to send\
    \ data first in the authentication\n   exchange.  Where the client does not provide\
    \ an initial response data\n   in its request to initiate the authentication exchange,\
    \ the server is\n   to respond to the request with an empty initial challenge\
    \ and then\n   the client is to provide its initial response.\n   The client sends\
    \ the initial response containing the UTF-8 [RFC3629]\n   encoding of the requested\
    \ authorization identity string.  This\n   response is non-empty when the client\
    \ is requesting to act as the\n   identity represented by the (non-empty) string.\
    \  This response is\n   empty when the client is requesting to act as the identity\
    \ the server\n   associated with its authentication credentials.\n   The syntax\
    \ of the initial response is specified as a value of the\n   <extern-initial-resp>\
    \ production detailed below using the Augmented\n   Backus-Naur Form (ABNF) [RFC4234]\
    \ notation.\n      external-initial-resp = authz-id-string\n      authz-id-string\
    \       = *( UTF8-char-no-nul )\n      UTF8-char-no-nul      = UTF8-1-no-nul /\
    \ UTF8-2 / UTF8-3 / UTF8-4\n      UTF8-1-no-nul         = %x01-7F\n   where the\
    \ <UTF8-2>, <UTF8-3>, and <UTF8-4> productions are as defined\n   in [RFC3629].\n\
    \   There are no additional challenges and responses.\n   Hence, the server is\
    \ to return the outcome of the authentication\n   exchange.\n   The exchange fails\
    \ if\n   -  the client has not established its credentials via external means,\n\
    \   -  the client's credentials are inadequate,\n   -  the client provided an\
    \ empty authorization identity string and the\n      server is unwilling or unable\
    \ to associate an authorization\n      identity with the client's credentials,\n\
    \   -  the client provided a non-empty authorization identity string that\n  \
    \    is invalid per the syntax requirements of the applicable\n      application\
    \ protocol specification,\n   -  the client provided a non-empty authorization\
    \ identity string\n      representing an identity that the client is not allowed\
    \ to act as,\n      or\n   -  the server is unwilling or unable to provide service\
    \ to the client\n      for any other reason.\n   Otherwise the exchange is successful.\
    \  When indicating a successful\n   outcome, additional data is not provided.\n"
- title: A.2.  SASL EXTERNAL Examples
  contents:
  - "A.2.  SASL EXTERNAL Examples\n   This section provides examples of EXTERNAL authentication\
    \ exchanges.\n   The examples are intended to help the readers understand the\
    \ above\n   text.  The examples are not definitive.  The Application\n   Configuration\
    \ Access Protocol (ACAP) [RFC2244] is used in the\n   examples.\n   The first\
    \ example shows use of EXTERNAL with an empty authorization\n   identity.  In\
    \ this example, the initial response is not sent in the\n   client's request to\
    \ initiate the authentication exchange.\n      S: * ACAP (SASL \"DIGEST-MD5\"\
    )\n      C: a001 STARTTLS\n      S: a001 OK \"Begin TLS negotiation now\"\n  \
    \    <TLS negotiation, further commands are under TLS layer>\n      S: * ACAP\
    \ (SASL \"DIGEST-MD5\" \"EXTERNAL\")\n      C: a002 AUTHENTICATE \"EXTERNAL\"\n\
    \      S: + \"\"\n      C: + \"\"\n      S: a002 OK \"Authenticated\"\n   The\
    \ second example shows use of EXTERNAL with an authorization\n   identity of \"\
    fred@example.com\".  In this example, the initial\n   response is sent with the\
    \ client's request to initiate the\n   authentication exchange.  This saves a\
    \ round-trip.\n      S: * ACAP (SASL \"DIGEST-MD5\")\n      C: a001 STARTTLS\n\
    \      S: a001 OK \"Begin TLS negotiation now\"\n      <TLS negotiation, further\
    \ commands are under TLS layer>\n      S: * ACAP (SASL \"DIGEST-MD5\" \"EXTERNAL\"\
    )\n      C: a002 AUTHENTICATE \"EXTERNAL\" {16+}\n      C: fred@example.com\n\
    \      S: a002 NO \"Cannot assume requested authorization identity\"\n"
- title: A.3.  Security Considerations
  contents:
  - "A.3.  Security Considerations\n   The EXTERNAL mechanism provides no security\
    \ protection; it is\n   vulnerable to spoofing by either client or server, active\
    \ attack, and\n   eavesdropping.  It should only be used when adequate security\n\
    \   services have been established.\n"
- title: Appendix B.  Changes since RFC 2222
  contents:
  - "Appendix B.  Changes since RFC 2222\n   This appendix is non-normative.\n   The\
    \ material in RFC 2222 was significantly rewritten in the\n   production of this\
    \ document.\n   RFC 2222, by not stating that the authorization identity string\
    \ was a\n   string of Unicode characters, let alone character data, implied that\n\
    \   the authorization identity string was a string of octets.\n   -  The authorization\
    \ identity string is now defined as a string of\n      Unicode characters.  The\
    \ NUL (U+0000) character is prohibited.\n      While protocol specifications are\
    \ responsible for defining the\n      authorization identity form, as well as\
    \ the Unicode string syntax\n      and related semantics, mechanism specifications\
    \ are responsible\n      for defining how the Unicode string is carried in the\n\
    \      authentication exchange.\n   -  Deleted \"If so, when the client does not\
    \ send data first, the\n      initial challenge MUST be specified as being an\
    \ empty challenge.\"\n   The following technical change was made to the EXTERNAL\
    \ mechanism:\n      - The authorization identity string is to be UTF-8 encoded.\n\
    \      Note that protocol and mechanism specification requirements have\n    \
    \  been significantly tightened.  Existing protocol and mechanism\n      specifications\
    \ will need to be updated to meet these requirements.\n"
- title: Editors' Addresses
  contents:
  - "Editors' Addresses\n   Alexey Melnikov\n   Isode Limited\n   5 Castle Business\
    \ Village\n   36 Station Road\n   Hampton, Middlesex,\n   TW12 2BX, United Kingdom\n\
    \   EMail: Alexey.Melnikov@isode.com\n   URI:   http://www.melnikov.ca/\n   Kurt\
    \ D. Zeilenga\n   OpenLDAP Foundation\n   EMail: Kurt@OpenLDAP.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
