- title: __initial_text__
  contents:
  - '           Cisco Systems'' Tag Switching Architecture Overview

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n   This protocol is NOT the product of an IETF\
    \ working group nor is it a\n   standards track document.  It has not necessarily\
    \ benefited from the\n   widespread and in depth community review that standards\
    \ track\n   documents receive.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides an overview of a novel approach to network\n\
    \   layer packet forwarding, called tag switching. The two main\n   components\
    \ of  the tag switching architecture - forwarding and\n   control - are described.\
    \  Forwarding is accomplished using simple\n   label-swapping techniques, while\
    \ the existing network layer routing\n   protocols plus mechanisms for binding\
    \ and distributing tags are used\n   for control. Tag switching can retain the\
    \ scaling properties of IP,\n   and can help improve the scalability of IP networks.\
    \ While tag\n   switching does not rely on ATM, it can straightforwardly be applied\n\
    \   to ATM switches. A range of tag switching applications and deployment\n  \
    \ scenarios are described.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   4.4    Flexible routing (explicit routes)  .....................\
    \   9\n   5      Tag switching with ATM  .................................   9\n\
    \   6      Quality of service  .....................................  11\n   7\
    \      Tag switching migration strategies  .....................  11\n   8   \
    \   Summary  ................................................  12\n   9      Security\
    \ Considerations  ................................  12\n   10     Intellectual\
    \ Property Considerations  ...................  12\n   11     Acknowledgments\
    \  ........................................  12\n   12     Authors' Addresses\
    \  .....................................  13\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Continuous growth of the Internet demands higher bandwidth\
    \ within the\n   Internet Service Providers (ISPs). However, growth of the Internet\
    \ is\n   not the only driving factor for higher bandwidth - demand for higher\n\
    \   bandwidth also comes from emerging multimedia applications.  Demand\n   for\
    \ higher bandwidth, in turn, requires higher forwarding performance\n   (packets\
    \ per second) by routers, for both multicast and unicast\n   traffic.\n   The\
    \ growth of the Internet also demands improved scaling properties\n   of the Internet\
    \ routing system. The ability to contain the volume of\n   routing information\
    \ maintained by individual routers and the ability\n   to build a hierarchy of\
    \ routing knowledge are essential to support a\n   high quality, scalable routing\
    \ system.\n   We see the need to improve forwarding performance while at the same\n\
    \   time adding routing functionality to support multicast, allowing more\n  \
    \ flexible control over how traffic is routed, and providing the\n   ability to\
    \ build a hierarchy of routing knowledge. Moreover, it\n   becomes more and more\
    \ crucial to have a routing system that can\n   support graceful evolution to\
    \ accommodate new and emerging\n   requirements.\n   Tag switching is a technology\
    \ that provides an efficient solution to\n   these challenges. Tag switching blends\
    \ the flexibility and rich\n   functionality provided by Network Layer routing\
    \ with the simplicity\n   provided by the label swapping forwarding paradigm.\
    \  The simplicity\n   of the tag switching forwarding paradigm (label swapping)\
    \ enables\n   improved forwarding performance, while maintaining competitive\n\
    \   price/performance.  By associating a wide range of forwarding\n   granularities\
    \ with a tag, the same forwarding paradigm can be used to\n   support a wide variety\
    \ of routing functions, such as destination-\n   based routing, multicast, hierarchy\
    \ of routing knowledge, and\n   flexible routing control. Finally, a combination\
    \ of simple\n   forwarding, a wide range of forwarding granularities, and the\
    \ ability\n   to evolve routing functionality while preserving the same forwarding\n\
    \   paradigm enables a routing system that can gracefully evolve to\n   accommodate\
    \ new and emerging requirements.\n   The rest of the document is organized as\
    \ follows. Section 2\n   introduces the main components of tag switching, forwarding\
    \ and\n   control. Section 3 describes the forwarding component.  Section 4\n\
    \   describes the control component. Section 5 describes how tag\n   switching\
    \ could be used with ATM. Section 6 describes the use of tag\n   switching to\
    \ help provide a range of qualities of service.  Section 7\n   briefly describes\
    \ possible deployment scenarios. Section 8 summarizes\n   the results.\n"
- title: 2. Tag Switching components
  contents:
  - "2. Tag Switching components\n   Tag switching consists of two components: forwarding\
    \ and control.\n   The forwarding component uses the tag information (tags) carried\
    \ by\n   packets and the tag forwarding information maintained by a tag switch\n\
    \   to perform packet forwarding. The control component is responsible\n   for\
    \ maintaining correct tag forwarding information among a group of\n   interconnected\
    \ tag switches.\n"
- title: 3. Forwarding component
  contents:
  - "3. Forwarding component\n   The fundamental forwarding paradigm employed by tag\
    \ switching is\n   based on the notion of label swapping. When a packet with a\
    \ tag is\n   received by a tag switch, the switch uses the tag as an index in\
    \ its\n   Tag Information Base (TIB). Each entry in the TIB consists of an\n \
    \  incoming tag, and one or more sub-entries of the form (outgoing tag,\n   outgoing\
    \ interface, outgoing link level information). If the switch\n   finds an entry\
    \ with the incoming tag equal to the tag carried in the\n   packet, then for each\
    \ (outgoing tag, outgoing interface, outgoing\n   link level information) in the\
    \ entry the switch replaces the tag in\n   the packet with the outgoing tag, replaces\
    \ the link level information\n   (e.g MAC address) in the packet with the outgoing\
    \ link level\n   information, and forwards the packet over the outgoing interface.\n\
    \   From the above description of the forwarding component we can make\n   several\
    \ observations. First, the forwarding decision is based on the\n   exact match\
    \ algorithm using a fixed length, fairly short tag as an\n   index. This enables\
    \ a simplified forwarding procedure, relative to\n   longest match forwarding\
    \ traditionally used at the network layer.\n   This in turn enables higher forwarding\
    \ performance (higher packets\n   per second). The forwarding procedure is simple\
    \ enough to allow a\n   straightforward hardware implementation.\n   A second\
    \ observation is that the forwarding decision is independent\n   of the tag's\
    \ forwarding granularity. For example, the same forwarding\n   algorithm applies\
    \ to both unicast and multicast - a unicast entry\n   would just have a single\
    \ (outgoing tag, outgoing interface, outgoing\n   link level information) sub-entry,\
    \ while a multicast entry may have\n   one or more (outgoing tag, outgoing interface,\
    \ outgoing link level\n   information) sub-entries. (For multi-access links, the\
    \ outgoing link\n   level information in this case would include a multicast MAC\n\
    \   address.) This illustrates how with tag switching the same forwarding\n  \
    \ paradigm can be used to support different routing functions (e.g.,\n   unicast,\
    \ multicast, etc...)\n   The simple forwarding procedure is thus essentially decoupled\
    \ from\n   the control component of tag switching. New routing (control)\n   functions\
    \ can readily be deployed without disturbing the forwarding\n   paradigm.  This\
    \ means that it is not necessary to re-optimize\n   forwarding performance (by\
    \ modifying either hardware or software) as\n   new routing functionality is added.\n"
- title: 3.1. Tag encapsulation
  contents:
  - "3.1. Tag encapsulation\n   Tag information can be carried in a packet in a variety\
    \ of ways:\n      - as a small \"shim\" tag header inserted between the layer\
    \ 2 and\n      the Network Layer headers;\n      - as part of the layer 2 header,\
    \ if the layer 2 header provides\n      adequate semantics (e.g., ATM, as discussed\
    \ below);\n      - as part of the Network Layer header (e.g., using the Flow Label\n\
    \      field in IPv6 with appropriately modified semantics).\n   It is therefore\
    \ possible to implement tag switching over virtually\n   any media type including\
    \ point-to-point links, multi-access links,\n   and ATM.\n   Observe also that\
    \ the tag forwarding component is Network Layer\n   independent. Use of control\
    \ component(s) specific to a particular\n   Network Layer protocol enables the\
    \ use of tag switching with\n   different Network Layer protocols.\n"
- title: 4. Control component
  contents:
  - "4. Control component\n   Essential to tag switching is the notion of binding\
    \ between a tag and\n   Network Layer routing (routes). To provide good scaling\n\
    \   characteristics, while also accommodating diverse routing\n   functionality,\
    \ tag switching supports a wide range of forwarding\n   granularities. At one\
    \ extreme a tag could be associated (bound) to a\n   group of routes (more specifically\
    \ to the Network Layer Reachability\n   Information of the routes in the group).\
    \ At the other extreme a tag\n   could be bound to an individual application flow\
    \ (e.g., an RSVP\n   flow). A tag could also be bound to a multicast tree.\n \
    \  The control component is responsible for creating tag bindings, and\n   then\
    \ distributing the tag binding information among tag switches.\n   The control\
    \ component is organized as a collection of modules, each\n   designed to support\
    \ a particular routing function. To support new\n   routing functions, new modules\
    \ can be added. The following describes\n   some of the modules.\n"
- title: 4.1. Destination-based routing
  contents:
  - "4.1. Destination-based routing\n   In this section we describe how tag switching\
    \ can support\n   destination-based routing. Recall that with destination-based\
    \ routing\n   a router makes a forwarding decision based on the destination address\n\
    \   carried in a packet and the information stored in the Forwarding\n   Information\
    \ Base (FIB) maintained by the router. A router constructs\n   its FIB by using\
    \ the information the router receives from routing\n   protocols (e.g., OSPF,\
    \ BGP).\n   To support destination-based routing with tag switching, a tag\n \
    \  switch, just like a router, participates in routing protocols (e.g.,\n   OSPF,\
    \ BGP), and constructs its FIB using the information it receives\n   from these\
    \ protocols.\n   There are three permitted methods for tag allocation and Tag\n\
    \   Information Base (TIB) management: (a) downstream tag allocation, (b)\n  \
    \ downstream tag allocation on demand, and (c) upstream tag allocation.\n   In\
    \ all cases, a switch allocates tags and binds them to address\n   prefixes in\
    \ its FIB. In downstream allocation, the tag that is\n   carried in a packet is\
    \ generated and bound to a prefix by the switch\n   at the downstream end of the\
    \ link (with respect to the direction of\n   data flow). In upstream allocation,\
    \ tags are allocated and bound at\n   the upstream end of the link. `On demand'\
    \ allocation means that tags\n   will only be allocated and distributed by the\
    \ downstream switch when\n   it is requested to do so by the upstream switch.\
    \  Methods (b) and (c)\n   are most useful in ATM networks (see Section 5). Note\
    \ that in\n   downstream allocation, a switch is responsible for creating tag\n\
    \   bindings that apply to incoming data packets, and receives tag\n   bindings\
    \ for outgoing packets from its neighbors. In upstream\n   allocation, a switch\
    \ is responsible for creating tag bindings for\n   outgoing tags, i.e. tags that\
    \ are applied to data packets leaving the\n   switch, and receives bindings for\
    \ incoming tags from its neighbors.\n   The downstream tag allocation scheme operates\
    \ as follows: for each\n   route in its FIB the switch allocates a tag, creates\
    \ an entry in its\n   Tag Information Base (TIB) with the incoming tag set to\
    \ the allocated\n   tag, and then advertises the binding between the (incoming)\
    \ tag and\n   the route to other adjacent tag switches. The advertisement could\
    \ be\n   accomplished by either piggybacking the binding on top of the\n   existing\
    \ routing protocols, or by using a separate Tag Distribution\n   Protocol [TDP].\
    \ When a tag switch receives tag binding information\n   for a route, and that\
    \ information was originated by the next hop for\n   that route, the switch places\
    \ the tag (carried as part of the binding\n   information) into the outgoing tag\
    \ of the TIB entry associated with\n   the route. This creates the binding between\
    \ the outgoing tag and the\n   route.\n   With the downstream tag allocation on\
    \ demand scheme, operation is as\n   follows. For each route in its FIB, the switch\
    \ identifies the next\n   hop for that route. It then issues a request (via TDP)\
    \ to the next\n   hop for a tag binding for that route. When the next hop receives\
    \ the\n   request, it allocates a tag, creates an entry in its TIB with the\n\
    \   incoming tag set to the allocated tag, and then returns the binding\n   between\
    \ the (incoming) tag and the  route to the switch that sent the\n   original request.\
    \ When the switch receives the binding information,\n   the switch creates an\
    \ entry in its TIB, and sets the outgoing tag in\n   the entry to the value received\
    \ from the next hop.\n   The upstream tag allocation scheme is used as follows.\
    \ If a tag\n   switch has one or more point-to-point interfaces,  then for each\n\
    \   route in its FIB whose next hop is reachable via one of these\n   interfaces,\
    \ the switch allocates a tag, creates an entry in its TIB\n   with the outgoing\
    \ tag set to the allocated tag, and then advertises\n   to the next hop (via TDP)\
    \ the binding between the (outgoing) tag and\n   the route. When a tag switch\
    \ that is the next hop receives the tag\n   binding information, the switch places\
    \ the tag (carried as part of\n   the binding information) into the incoming tag\
    \ of the TIB entry\n   associated with the route.\n   Once a TIB entry is populated\
    \ with both incoming and outgoing tags,\n   the tag switch can forward packets\
    \ for routes bound to the tags by\n   using the tag switching forwarding algorithm\
    \ (as described in Section\n   3).\n   When a tag switch creates a binding between\
    \ an outgoing tag and a\n   route, the switch, in addition to populating its TIB,\
    \ also updates\n   its FIB with the binding information. This enables the switch\
    \ to add\n   tags to previously untagged packets.\n   To understand the scaling\
    \ properties of tag switching in conjunction\n   with destination-based routing,\
    \ observe that the total number of tags\n   that a tag switch has to maintain\
    \ can not be greater than the number\n   of routes in the switch's FIB. Moreover,\
    \ in some cases a single tag\n   could be associated with a group of routes, rather\
    \ than with a single\n   route. Thus, much less state is required than would be\
    \ the case if\n   tags were allocated to individual flows.\n   In general, a tag\
    \ switch will try to populate its TIB with incoming\n   and outgoing tags for\
    \ all routes to which it has reachability, so\n   that all packets can be forwarded\
    \ by simple label swapping. Tag\n   allocation is thus driven by topology (routing),\
    \ not traffic - it is\n   the existence of a FIB entry that causes tag allocations,\
    \ not the\n   arrival of data packets.\n   Use of tags associated with routes,\
    \ rather than flows, also means\n   that there is no need to perform flow classification\
    \ procedures for\n   all the flows to determine whether to assign a tag to a flow.\
    \ That,\n   in turn, simplifies the overall scheme, and makes it more robust and\n\
    \   stable in the presence of changing traffic patterns.\n   Note that when tag\
    \ switching is used to support destination-based\n   routing, tag switching does\
    \ not completely eliminate the need to\n   perform normal Network Layer forwarding.\
    \ First of all, to add a tag\n   to a previously untagged packet requires normal\
    \ Network Layer\n   forwarding. This function could be performed by the first\
    \ hop router,\n   or by the first router on the path that is able to participate\
    \ in tag\n   switching. In addition, whenever a tag switch aggregates a set of\n\
    \   routes (e.g., by using the technique of hierarchical routing), into a\n  \
    \ single tag, and the routes do not share a common next hop, the switch\n   needs\
    \ to perform Network Layer forwarding for packets carrying that\n   tag. However,\
    \ one could observe that the number of places where\n   routes get aggregated\
    \ is smaller than the total number of places\n   where forwarding decisions have\
    \ to be made.  Moreover, quite often\n   aggregation is applied to only a subset\
    \ of the routes maintained by a\n   tag switch. As a result, on average a packet\
    \ can be forwarded most of\n   the time using the tag switching algorithm.\n"
- title: 4.2. Hierarchy of routing knowledge
  contents:
  - "4.2. Hierarchy of routing knowledge\n   The IP routing architecture models a\
    \ network as a collection of\n   routing domains. Within a domain, routing is\
    \ provided via interior\n   routing (e.g., OSPF), while routing across domains\
    \ is provided via\n   exterior routing (e.g., BGP). However, all routers within\
    \ domains\n   that carry transit traffic (e.g., domains formed by Internet Service\n\
    \   Providers) have to maintain information provided by not just interior\n  \
    \ routing, but exterior routing as well. That creates certain problems.\n   First\
    \ of all, the amount of this information is not insignificant.\n   Thus it places\
    \ additional demand on the resources required by the\n   routers. Moreover, increase\
    \ in the volume of routing information\n   quite often increases routing convergence\
    \ time. This, in turn,\n   degrades the overall performance of the system.\n \
    \  Tag switching allows the decoupling of interior and exterior routing,\n   so\
    \ that only tag switches at the border of a domain would be required\n   to maintain\
    \ routing information provided by exterior routing, while\n   all other switches\
    \ within the domain would just maintain routing\n   information provided by the\
    \ domain's interior routing (which is\n   usually significantly smaller than the\
    \ exterior routing information).\n   This, in turn, reduces the routing load on\
    \ non-border switches, and\n   shortens routing convergence time.\n   To support\
    \ this functionality, tag switching allows a packet to carry\n   not one but a\
    \ set of tags, organized as a stack. A tag switch could\n   either swap the tag\
    \ at the top of the stack, or pop the stack, or\n   swap the tag and push one\
    \ or more tags into the stack.\n   When a packet is forwarded between two (border)\
    \ tag switches in\n   different domains, the tag stack in the packet contains\
    \ just one tag.\n   However, when a packet is forwarded within a domain, the tag\
    \ stack in\n   the packet contains not one, but two tags (the second tag is pushed\n\
    \   by the domain's ingress border tag switch).  The tag at the top of\n   the\
    \ stack provides packet forwarding to an appropriate egress border\n   tag switch,\
    \ while the next tag in the stack provides correct packet\n   forwarding at the\
    \ egress switch.  The stack is popped by either the\n   egress switch or by the\
    \ penultimate (with respect to the egress\n   switch) switch.\n   The control\
    \ component used in this scenario is fairly similar to the\n   one used with destination-based\
    \ routing. In fact, the only essential\n   difference is that in this scenario\
    \ the tag binding information is\n   distributed both among physically adjacent\
    \ tag switches, and among\n   border tag switches within a single domain. One\
    \ could also observe\n   that the latter (distribution among border switches)\
    \ could be\n   trivially accommodated by very minor extensions to BGP (via a\n\
    \   separate Tag Binding BGP attribute).\n"
- title: 4.3. Multicast
  contents:
  - "4.3. Multicast\n   Essential to multicast routing is the notion of spanning trees.\n\
    \   Multicast routing procedures (e.g., PIM) are responsible for\n   constructing\
    \ such trees (with receivers as leafs), while multicast\n   forwarding is responsible\
    \ for forwarding multicast packets along such\n   trees.\n   To support a multicast\
    \ forwarding function with tag switching, each\n   tag switch associates a tag\
    \ with a multicast tree as follows.  When a\n   tag switch creates a multicast\
    \ forwarding entry (either for a shared\n   or for a source-specific tree), and\
    \ the list of outgoing interfaces\n   for the entry, the switch also creates local\
    \ tags (one per outgoing\n   interface).  The switch creates an entry in its TIB\
    \ and populates\n   (outgoing tag, outgoing interface, outgoing MAC header) with\
    \ this\n   information for each outgoing interface, placing a locally generated\n\
    \   tag in the outgoing tag field.  This creates a binding between a\n   multicast\
    \ tree and the tags.  The switch then advertises over each\n   outgoing interface\
    \ associated with the entry the binding between the\n   tag (associated with this\
    \ interface) and the tree.\n   When a tag switch receives a binding between a\
    \ multicast tree and a\n   tag from another tag switch, if the other switch is\
    \ the upstream\n   neighbor (with respect to the multicast tree), the local switch\n\
    \   places the tag carried in the binding into the incoming tag component\n  \
    \ of the TIB entry associated with the tree.\n   When a set of tag switches are\
    \ interconnected via a multiple-access\n   subnetwork, the tag allocation procedure\
    \ for multicast has to be\n   coordinated among the switches. In all other cases\
    \ tag allocation\n   procedure for multicast could be the same as for tags used\
    \ with\n   destination-based routing.\n"
- title: 4.4. Flexible routing (explicit routes)
  contents:
  - "4.4. Flexible routing (explicit routes)\n   One of the fundamental properties\
    \ of destination-based routing is\n   that the only information from a packet\
    \ that is used to forward the\n   packet is the destination address. While this\
    \ property enables highly\n   scalable routing, it also limits the ability to\
    \ influence the actual\n   paths taken by packets. This, in turn, limits the ability\
    \ to evenly\n   distribute traffic among multiple links, taking the load off highly\n\
    \   utilized links, and shifting it towards less utilized links. For\n   Internet\
    \ Service Providers (ISPs) who support different classes of\n   service, destination-based\
    \ routing also limits their ability to\n   segregate different classes with respect\
    \ to the links used by these\n   classes.  Some of the ISPs today use Frame Relay\
    \ or ATM to overcome\n   the limitations imposed by destination-based routing.\
    \ Tag switching,\n   because of the flexible granularity of tags, is able to overcome\n\
    \   these limitations without using either Frame Relay or ATM.\n   To provide\
    \ forwarding along the paths that are different from the\n   paths determined\
    \ by the destination-based routing, the control\n   component of tag switching\
    \ allows installation of tag bindings in tag\n   switches that do not correspond\
    \ to the destination-based routing\n   paths.\n"
- title: 5. Tag switching with ATM
  contents:
  - "5. Tag switching with ATM\n   Since the tag switching forwarding paradigm is\
    \ based on label\n   swapping, and since ATM forwarding is also based on label\
    \ swapping,\n   tag switching technology can readily be applied to ATM switches\
    \ by\n   implementing the control component of tag switching.\n   The tag information\
    \ needed for tag switching can be carried in the\n   VCI field. If two levels\
    \ of tagging are needed, then the VPI field\n   could be used as well, although\
    \ the size of the VPI field limits the\n   size of networks in which this would\
    \ be practical. However, for most\n   applications of one level of tagging the\
    \ VCI field is adequate.\n   To obtain the necessary control information, the\
    \ switch should be\n   able (at a minimum) to participate as a peer in Network\
    \ Layer routing\n   protocols (e.g., OSPF, BGP). Moreover, if the switch has to\
    \ perform\n   routing information aggregation, then to support destination-based\n\
    \   unicast routing the switch should be able to perform Network Layer\n   forwarding\
    \ for some fraction of the traffic as well.\n   Supporting the destination-based\
    \ routing function with tag switching\n   on an ATM switch may require the switch\
    \ to maintain not one, but\n   several tags associated with a route (or a group\
    \ of routes with the\n   same next hop).  This is necessary to avoid the interleaving\
    \ of\n   packets which arrive from different upstream tag switches, but are\n\
    \   sent concurrently to the same next hop. Either the downstream tag\n   allocation\
    \ on demand or the upstream tag allocation scheme could be\n   used for the tag\
    \ allocation and TIB maintenance procedures with ATM\n   switches.\n   Therefore,\
    \ an ATM switch can support tag switching, but at the\n   minimum it needs to\
    \ implement Network Layer routing protocols, and\n   the tag switching control\
    \ component on the switch. It may also need\n   to support some network layer\
    \ forwarding.\n   Implementing tag switching on an ATM switch would simplify\n\
    \   integration of ATM switches and routers - an ATM switch capable of\n   tag\
    \ switching would appear as a router to an adjacent router. That\n   could provide\
    \ a viable, more scalable alternative to the overlay\n   model. It also removes\
    \ the necessity for ATM addressing, routing and\n   signalling schemes. Because\
    \ the destination-based forwarding approach\n   described in section 4.1 is topology\
    \ driven rather than traffic\n   driven, application of this approach to ATM switches\
    \ does not high\n   call setup rates, nor does it depend on the longevity of flows.\n\
    \   Implementing tag switching on an ATM switch does not preclude the\n   ability\
    \ to support a traditional ATM control plane (e.g., PNNI) on\n   the same switch.\
    \ The two components, tag switching and the ATM\n   control plane, would operate\
    \ in a Ships In the Night mode (with\n   VPI/VCI space and other resources partitioned\
    \ so that the components\n   do not interact).\n"
- title: 6. Quality of service
  contents:
  - "6. Quality of service\n   Two mechanisms are needed for providing a range of\
    \ qualities of\n   service to packets passing through a router or a tag switch.\
    \ First,\n   we need to classify packets into different classes. Second, we need\n\
    \   to ensure that the handling of packets is such that the appropriate\n   QOS\
    \ characteristics (bandwidth, loss, etc.) are provided to each\n   class.\n  \
    \ Tag switching provides an easy way to mark packets as belonging to a\n   particular\
    \ class after they have been classified the first time.\n   Initial classification\
    \ would be done using information carried in the\n   network layer or higher layer\
    \ headers. A tag corresponding to the\n   resultant class would then be applied\
    \ to the packet. Tagged packets\n   can then be efficiently handled by the tag\
    \ switching routers in their\n   path without needing to be reclassified. The\
    \ actual packet scheduling\n   and queueing is largely orthogonal - the key point\
    \ here is that tag\n   switching enables simple logic to be used to find the state\
    \ that\n   identifies how the packet should be scheduled.\n   The exact use of\
    \ tag switching for QOS purposes depends a great deal\n   on how QOS is deployed.\
    \ If RSVP is used to request a certain QOS for\n   a class of packets, then it\
    \ would be necessary to allocate a tag\n   corresponding to each RSVP session\
    \ for which state is installed at a\n   tag switch. This might be done by TDP\
    \ or by extension of RSVP.\n"
- title: 7. Tag switching migration strategies
  contents:
  - "7. Tag switching migration strategies\n   Since tag switching is performed between\
    \ a pair of adjacent tag\n   switches, and since the tag binding information could\
    \ be distributed\n   on a pairwise basis, tag switching could be introduced in\
    \ a fairly\n   simple, incremental fashion. For example, once a pair of adjacent\n\
    \   routers are converted into tag switches, each of the switches would\n   tag\
    \ packets destined to the other, thus enabling the other switch to\n   use tag\
    \ switching. Since tag switches use the same routing protocols\n   as routers,\
    \ the introduction of tag switches has no impact on\n   routers. In fact, a tag\
    \ switch connected to a router acts just as a\n   router from the router's perspective.\n\
    \   As more and more routers are upgraded to enable tag switching, the\n   scope\
    \ of functionality provided by tag switching widens. For example,\n   once all\
    \ the routers within a domain are upgraded to support tag\n   switching, in becomes\
    \ possible to start using the hierarchy of\n   routing knowledge function.\n"
- title: 8. Summary
  contents:
  - "8. Summary\n   In this document we described the tag switching technology. Tag\n\
    \   switching is not constrained to a particular Network Layer protocol -\n  \
    \ it is a multiprotocol solution.  The forwarding component of tag\n   switching\
    \ is simple enough to facilitate high performance forwarding,\n   and may be implemented\
    \ on high performance forwarding hardware such\n   as ATM switches. The control\
    \ component is flexible enough to support\n   a wide variety of routing functions,\
    \ such as destination-based\n   routing, multicast routing, hierarchy of routing\
    \ knowledge, and\n   explicitly defined routes. By allowing a wide range of forwarding\n\
    \   granularities that could be associated with a tag, we provide both\n   scalable\
    \ and functionally rich routing. A combination of a wide range\n   of forwarding\
    \ granularities and the ability to evolve the control\n   component fairly independently\
    \ from the forwarding component results\n   in a solution that enables graceful\
    \ introduction of new routing\n   functionality to meet the demands of a rapidly\
    \ evolving computer\n   networking environment.\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 10. Intellectual Property Considerations
  contents:
  - "10. Intellectual Property Considerations\n   Cisco Systems may seek patent or\
    \ other intellectual property\n   protection for some or all of the technologies\
    \ disclosed in this\n   document. If any standards arising from this document\
    \ are or become\n   protected by one or more patents assigned to Cisco Systems,\
    \ Cisco\n   intends to disclose those patents and license them on reasonable and\n\
    \   non-discriminatory terms.\n"
- title: 11. Acknowledgments
  contents:
  - "11. Acknowledgments\n   Significant contributions to this work have been made\
    \ by Anthony\n   Alles, Fred Baker, Paul Doolan, Dino Farinacci, Guy Fedorkow,\
    \ Jeremy\n   Lawrence, Arthur Lin, Morgan Littlewood, Keith McCloghrie, and Dan\n\
    \   Tappan.\n"
- title: 12. Authors' Addresses
  contents:
  - "12. Authors' Addresses\n   Yakov Rekhter\n   Cisco Systems, Inc.\n   170 Tasman\
    \ Drive\n   San Jose, CA, 95134\n   EMail: yakov@cisco.com\n   Bruce Davie\n \
    \  Cisco Systems, Inc.\n   250 Apollo Drive\n   Chelmsford, MA, 01824\n   EMail:\
    \ bsd@cisco.com\n   Dave Katz\n   Cisco Systems, Inc.\n   170 Tasman Drive\n \
    \  San Jose, CA, 95134\n   EMail: dkatz@cisco.com\n   Eric Rosen\n   Cisco Systems,\
    \ Inc.\n   250 Apollo Drive\n   Chelmsford, MA, 01824\n   EMail: erosen@cisco.com\n\
    \   George Swallow\n   Cisco Systems, Inc.\n   250 Apollo Drive\n   Chelmsford,\
    \ MA, 01824\n   EMail: swallow@cisco.com\n"
