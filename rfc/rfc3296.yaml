- contents:
  - "                    Named Subordinate References in\n        Lightweight Directory
    Access Protocol (LDAP) Directories\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document details schema and protocol elements for representing\n
    \  and managing named subordinate references in Lightweight Directory\n   Access
    Protocol (LDAP) Directories.\n"
  title: Abstract
- contents:
  - "Conventions\n   Schema definitions are provided using LDAPv3 description formats\n
    \  [RFC2252].  Definitions provided here are formatted (line wrapped)\n   for
    readability.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    used in\n   this document are to be interpreted as described in BCP 14 [RFC2119].\n"
  title: Conventions
- contents:
  - "1.  Background and Intended Usage\n   The broadening of interest in LDAP (Lightweight
    Directory Access\n   Protocol) [RFC2251] directories beyond their use as front
    ends to\n   X.500 [X.500] directories has created a need to represent knowledge\n
    \  information in a more general way.  Knowledge information is\n   information
    about one or more servers maintained in another server,\n   used to link servers
    and services together.\n   This document details schema and protocol elements
    for representing\n   and manipulating named subordinate references in LDAP directories.
    \ A\n   referral object is used to hold subordinate reference information in\n
    \  the directory.  These referral objects hold one or more URIs\n   [RFC2396]
    contained in values of the ref attribute type and are used\n   to generate protocol
    referrals and continuations.\n   A control, ManageDsaIT, is defined to allow manipulation
    of referral\n   and other special objects as normal objects.  As the name of control\n
    \  implies, it is intended to be analogous to the ManageDsaIT service\n   option
    described in X.511(97) [X.511].\n   Other forms of knowledge information are not
    detailed by this\n   document.  These forms may be described in subsequent documents.\n
    \  This document details subordinate referral processing requirements\n   for
    servers.  This document does not describe protocol syntax and\n   semantics.  This
    is detailed in RFC 2251 [RFC2251].\n   This document does not detail use of subordinate
    knowledge references\n   to support replicated environments nor distributed operations
    (e.g.,\n   chaining of operations from one server to other servers).\n"
  title: 1.  Background and Intended Usage
- contents:
  - '2.  Schema

    '
  - contents:
    - "2.1.  The referral Object Class\n   A referral object is a directory entry
      whose structural object class\n   is (or is derived from) the referral object
      class.\n      ( 2.16.840.1.113730.3.2.6\n          NAME 'referral'\n          DESC
      'named subordinate reference object'\n          STRUCTURAL\n          MUST ref
      )\n   The referral object class is a structural object class used to\n   represent
      a subordinate reference in the directory.  The referral\n   object class SHOULD
      be used in conjunction with the extensibleObject\n   object class to support
      the naming attributes used in the entry's\n   Distinguished Name (DN) [RFC2253].\n
      \  Referral objects are normally instantiated at DSEs immediately\n   subordinate
      to object entries within a naming context held by the\n   DSA.  Referral objects
      are analogous to X.500 subordinate knowledge\n   (subr) DSEs [X.501].\n   In
      the presence of a ManageDsaIT control, referral objects are\n   treated as normal
      entries as described in section 3.  Note that the\n   ref attribute is operational
      and will only be returned in a search\n   entry response when requested.\n   In
      the absence of a ManageDsaIT control, the content of referral\n   objects are
      used to construct referrals and search references as\n   described in Section
      4 and, as such, the referral entries are not\n   themselves visible to clients.\n"
    title: 2.1.  The referral Object Class
  - contents:
    - "2.2  The ref Attribute Type\n      ( 2.16.840.1.113730.3.1.34\n          NAME
      'ref'\n          DESC 'named reference - a labeledURI'\n          EQUALITY caseExactMatch\n
      \         SYNTAX 1.3.6.1.4.1.1466.115.121.1.15\n          USAGE distributedOperation
      )\n   The ref attribute type has directoryString syntax and is case\n   sensitive.
      \ The ref attribute is multi-valued.  Values placed in the\n   attribute MUST
      conform to the specification given for the labeledURI\n   attribute [RFC2079].
      \ The labeledURI specification defines a format\n   that is a URI, optionally
      followed by whitespace and a label.  This\n   document does not make use of
      the label portion of the syntax.\n   Future documents MAY enable new functionality
      by imposing additional\n   structure on the label portion of the syntax as it
      appears in the ref\n   attribute.\n   If the URI contained in a ref attribute
      value refers to a LDAP\n   [RFC2251] server, it MUST be in the form of a LDAP
      URL [RFC2255].\n   The LDAP URL SHOULD NOT contain an explicit scope specifier,
      filter,\n   attribute description list, or any extensions.  The LDAP URL SHOULD\n
      \  contain a non-empty DN.  The handling of LDAP URLs with absent or\n   empty
      DN parts or with explicit scope specifier is not defined by\n   this specification.\n
      \  Other URI schemes MAY be used so long as all operations returning\n   referrals
      based upon the value could be performed.  This document\n   does not detail
      use of non-LDAP URIs.  This is left to future\n   specifications.\n   The referential
      integrity of the URI SHOULD NOT be validated by the\n   server holding or returning
      the URI (whether as a value of the\n   attribute or as part of a referral result
      or search reference\n   response).\n   When returning a referral result or search
      continuation, the server\n   MUST NOT return the separator or label portions
      of the attribute\n   values as part of the reference.  When the attribute contains\n
      \  multiple values, the URI part of each value is used to construct the\n   referral
      result or search continuation.\n   The ref attribute values SHOULD NOT be used
      as a relative name-\n   component of an entry's DN [RFC2253].\n   This document
      uses the ref attribute in conjunction with the referral\n   object class to
      represent subordinate references.  The ref attribute\n   may be used for other
      purposes as defined by other documents.\n"
    title: 2.2  The ref Attribute Type
  title: 2.  Schema
- contents:
  - "3.  The ManageDsaIT Control\n   The client may provide the ManageDsaIT control
    with an operation to\n   indicate that the operation is intended to manage objects
    within the\n   DSA (server) Information Tree.  The control causes Directory-specific\n
    \  entries (DSEs), regardless of type, to be treated as normal entries\n   allowing
    clients to interrogate and update these entries using LDAP\n   operations.\n   A
    client MAY specify the following control when issuing an add,\n   compare, delete,
    modify, modifyDN, search request or an extended\n   operation for which the control
    is defined.\n   The control type is 2.16.840.1.113730.3.4.2.  The control criticality\n
    \  may be TRUE or, if FALSE, absent.  The control value is absent.\n   When the
    control is present in the request, the server SHALL NOT\n   generate a referral
    or continuation reference based upon information\n   held in referral objects
    and instead SHALL treat the referral object\n   as a normal entry.  The server,
    however, is still free to return\n   referrals for other reasons.  When not present,
    referral objects\n   SHALL be handled as described above.\n   The control MAY
    cause other objects to be treated as normal entries\n   as defined by subsequent
    documents.\n"
  title: 3.  The ManageDsaIT Control
- contents:
  - "4.  Named Subordinate References\n   A named subordinate reference is constructed
    by instantiating a\n   referral object in the referencing server with ref attribute
    values\n   which point to the corresponding subtree maintained in the referenced\n
    \  server.  In general, the name of the referral object is the same as\n   the
    referenced object and this referenced object is a context prefix\n   [X.501].\n
    \  That is, if server A holds \"DC=example,DC=net\" and server B holds\n   \"DC=sub,DC=example,DC=net\",
    server A may contain a referral object\n   named \"DC=sub,DC=example,DC=net\"
    which contains a ref attribute with\n   value of \"ldap://B/DC=sub,DC=example,DC=net\".\n
    \     dn: DC=sub,DC=example,DC=net\n      dc: sub\n      ref: ldap://B/DC=sub,DC=example,DC=net\n
    \     objectClass: referral\n      objectClass: extensibleObject\n   Typically
    the DN of the referral object and the DN of the object in\n   the referenced server
    are the same.\n   If the ref attribute has multiple values, all the DNs contained\n
    \  within the LDAP URLs SHOULD be equivalent.  Administrators SHOULD\n   avoid
    configuring naming loops using referrals.\n   Named references MUST be treated
    as normal entries if the request\n   includes the ManageDsaIT control as described
    in section 3.\n"
  title: 4.  Named Subordinate References
- contents:
  - "5.  Scenarios\n   The following sections contain specifications of how referral
    objects\n   should be used in different scenarios followed by examples that\n
    \  illustrate that usage.  The scenarios described here consist of\n   referral
    object handling when finding target of a non-search\n   operation, when finding
    the base of a search operation, and when\n   generating search references.  Lastly,
    other operation processing\n   considerations are presented.\n   It is to be noted
    that, in this document, a search operation is\n   conceptually divided into two
    distinct, sequential phases: (1)\n   finding the base object where the search
    is to begin, and (2)\n   performing the search itself.  The first phase is similar
    to, but not\n   the same as, finding the target of a non-search operation.\n   It
    should also be noted that the ref attribute may have multiple\n   values and,
    where these sections refer to a single ref attribute\n   value, multiple ref attribute
    values may be substituted and SHOULD be\n   processed and returned (in any order)
    as a group in a referral or\n   search reference in the same way as described
    for a single ref\n   attribute value.\n   Search references returned for a given
    request may be returned in any\n   order.\n"
  - contents:
    - "5.1.  Example Configuration\n   For example, suppose the contacted server (hosta)
      holds the entry\n   \"O=MNN,C=WW\" and the entry \"CN=Manager,O=MNN,C=WW\" and
      the following\n   referral objects:\n      dn: OU=People,O=MNN,C=WW\n      ou:
      People\n      ref: ldap://hostb/OU=People,O=MNN,C=US\n      ref: ldap://hostc/OU=People,O=MNN,C=US\n
      \     objectClass: referral\n      objectClass: extensibleObject\n      dn:
      OU=Roles,O=MNN,C=WW\n      ou: Roles\n      ref: ldap://hostd/OU=Roles,O=MNN,C=WW\n
      \     objectClass: referral\n      objectClass: extensibleObject\n   The first
      referral object provides the server with the knowledge that\n   subtree \"OU=People,O=MNN,C=WW\"
      is held by hostb and hostc (e.g., one\n   is the master and the other a shadow).
      \ The second referral object\n   provides the server with the knowledge that
      the subtree\n   \"OU=Roles,O=MNN,C=WW\" is held by hostd.\n   Also, in the context
      of this document, the \"nearest naming context\"\n   means the deepest context
      which the object is within.  That is, if\n   the object is within multiple naming
      contexts, the nearest naming\n   context is the one which is subordinate to
      all other naming contexts\n   the object is within.\n"
    title: 5.1.  Example Configuration
  - contents:
    - "5.2.  Target Object Considerations\n   This section details referral handling
      for add, compare, delete,\n   modify, and modify DN operations.  If the client
      requests any of\n   these operations, there are four cases that the server must
      handle\n   with respect to the target object.\n   The DN part MUST be modified
      such that it refers to the appropriate\n   target in the referenced server (as
      detailed below).  Even where the\n   DN to be returned is the same as the target
      DN, the DN part SHOULD\n   NOT be trimmed.\n   In cases where the URI to be
      returned is a LDAP URL, the server\n   SHOULD trim any present scope, filter,
      or attribute list from the URI\n   before returning it.  Critical extensions
      MUST NOT be trimmed or\n   modified.\n   Case 1: The target object is not held
      by the server and is not within\n      or subordinate to any naming context
      nor subordinate to any\n      referral object held by the server.\n      The
      server SHOULD process the request normally as appropriate for\n      a non-existent
      base which is not within any naming context of the\n      server (generally
      return noSuchObject or a referral based upon\n      superior knowledge reference
      information).  This document does not\n      detail management or processing
      of superior knowledge reference\n      information.\n   Case 2: The target object
      is held by the server and is a referral\n      object.\n      The server SHOULD
      return the URI value contained in the ref\n      attribute of the referral object
      appropriately modified as\n      described above.\n   Example: If the client
      issues a modify request for the target object\n      of \"OU=People,O=MNN,c=WW\",
      the server will return:\n         ModifyResponse (referral) {\n             ldap://hostb/OU=People,O=MNN,C=WW\n
      \            ldap://hostc/OU=People,O=MNN,C=WW\n         }\n   Case 3: The target
      object is not held by the server, but the nearest\n      naming context contains
      no referral object which the target object\n      is subordinate to.\n      If
      the nearest naming context contains no referral object which\n      the target
      is subordinate to, the server SHOULD process the\n      request as appropriate
      for a nonexistent target (generally return\n      noSuchObject).\n   Case 4:
      The target object is not held by the server, but the nearest\n      naming context
      contains a referral object which the target object\n      is subordinate to.\n
      \     If a client requests an operation for which the target object is\n      not
      held by the server and the nearest naming context contains a\n      referral
      object which the target object is subordinate to, the\n      server SHOULD return
      a referral response constructed from the URI\n      portion of the ref value
      of the referral object.\n   Example: If the client issues an add request where
      the target object\n      has a DN of \"CN=Manager,OU=Roles,O=MNN,C=WW\", the
      server will\n      return:\n         AddResponse (referral) {\n             ldap://hostd/CN=Manager,OU=Roles,O=MNN,C=WW\"\n
      \        }\n      Note that the DN part of the LDAP URL is modified such that
      it\n      refers to the appropriate entry in the referenced server.\n"
    title: 5.2.  Target Object Considerations
  - contents:
    - "5.3.  Base Object Considerations\n   This section details referral handling
      for base object processing\n   within search operations.  Like target object
      considerations for\n   non-search operations, there are the four cases.\n   In
      cases where the URI to be returned is a LDAP URL, the server MUST\n   provide
      an explicit scope specifier from the LDAP URL prior to\n   returning it.  In
      addition, the DN part MUST be modified such that it\n   refers to the appropriate
      target in the referenced server (as\n   detailed below).\n   If aliasing dereferencing
      was necessary in finding the referral\n   object, the DN part of the URI MUST
      be replaced with the base DN as\n   modified by the alias dereferencing such
      that the return URL refers\n   to the new target object per [RFC2251, 4.1.11].\n
      \  Critical extensions MUST NOT be trimmed nor modified.\n   Case 1: The base
      object is not held by the server and is not within\n      nor subordinate to
      any naming context held by the server.\n      The server SHOULD process the
      request normally as appropriate for\n      a non-existent base which not within
      any naming context of the\n      server (generally return a superior referral
      or noSuchObject).\n      This document does not detail management or processing
      of superior\n      knowledge references.\n   Case 2: The base object is held
      by the server and is a referral\n      object.\n      The server SHOULD return
      the URI value contained in the ref\n      attribute of the referral object appropriately
      modified as\n      described above.\n   Example: If the client issues a subtree
      search in which the base\n      object is \"OU=Roles,O=MNN,C=WW\", the server
      will return\n         SearchResultDone (referral) {\n             ldap://hostd/OU=Roles,O=MNN,C=WW??sub\n
      \        }\n      If the client were to issue a base or oneLevel search instead
      of\n      subtree, the returned LDAP URL would explicitly specify \"base\" or\n
      \     \"one\", respectively, instead of \"sub\".\n   Case 3: The base object
      is not held by the server, but the nearest\n      naming context contains no
      referral object which the base object\n      is subordinate to.\n      If the
      nearest naming context contains no referral object which\n      the base is
      subordinate to, the request SHOULD be processed\n      normally as appropriate
      for a nonexistent base (generally return\n      noSuchObject).\n   Case 4: The
      base object is not held by the server, but the nearest\n      naming context
      contains a referral object which the base object is\n      subordinate to.\n
      \     If a client requests an operation for which the target object is\n      not
      held by the server and the nearest naming context contains a\n      referral
      object which the target object is subordinate to, the\n      server SHOULD return
      a referral response which is constructed from\n      the URI portion of the
      ref value of the referral object.\n   Example: If the client issues a base search
      request for\n      \"CN=Manager,OU=Roles,O=MNN,C=WW\", the server will return\n
      \        SearchResultDone (referral) {\n             ldap://hostd/CN=Manager,OU=Roles,O=MNN,C=WW??base\"\n
      \        }\n      If the client were to issue a subtree or oneLevel search instead\n
      \     of subtree, the returned LDAP URL would explicitly specify \"sub\"\n      or
      \"one\", respectively, instead of \"base\".\n      Note that the DN part of
      the LDAP URL is modified such that it\n      refers to the appropriate entry
      in the referenced server.\n"
    title: 5.3.  Base Object Considerations
  - contents:
    - "5.4.  Search Continuation Considerations\n   For search operations, once the
      base object has been found and\n   determined not to be a referral object, the
      search may progress.  Any\n   entry matching the filter and scope of the search
      which is not a\n   referral object is returned to the client normally as described
      in\n   [RFC2251].\n   For each referral object within the requested scope, regardless
      of\n   the search filter, the server SHOULD return a SearchResultReference\n
      \  which is constructed from the URI component of values of the ref\n   attribute.
      \ If the URI component is not a LDAP URL, it should be\n   returned as is.  If
      the LDAP URL's DN part is absent or empty, the DN\n   part must be modified
      to contain the DN of the referral object.  If\n   the URI component is a LDAP
      URL, the URI SHOULD be modified to add an\n   explicit scope specifier.\n   Subtree
      Example:\n      If a client requests a subtree search of \"O=MNN,C=WW\", then
      in\n      addition to any entries within scope which match the filter, hosta\n
      \     will also return two search references as the two referral objects\n      are
      within scope.  One possible response might be:\n          SearchEntry for O=MNN,C=WW\n
      \         SearchResultReference {\n              ldap://hostb/OU=People,O=MNN,C=WW??sub\n
      \             ldap://hostc/OU=People,O=MNN,C=WW??sub\n          }\n          SearchEntry
      for CN=Manager,O=MNN,C=WW\n          SearchResultReference {\n              ldap://hostd/OU=Roles,O=MNN,C=WW??sub\n
      \         }\n          SearchResultDone (success)\n   One Level Example:\n      If
      a client requests a one level search of \"O=MNN,C=WW\" then, in\n      addition
      to any entries one level below the \"O=MNN,C=WW\" entry\n      matching the
      filter, the server will also return two search\n      references as the two
      referral objects are within scope.  One\n      possible sequence is shown:\n
      \         SearchResultReference {\n              ldap://hostb/OU=People,O=MNN,C=WW??base\n
      \             ldap://hostc/OU=People,O=MNN,C=WW??base\n          }\n          SearchEntry
      for CN=Manager,O=MNN,C=WW\n          SearchResultReference {\n              ldap://hostd/OU=Roles,O=MNN,C=WW??base\n
      \         }\n          SearchResultDone (success)\n   Note: Unlike the examples
      in Section 4.5.3.1 of RFC 2251, the LDAP\n      URLs returned with the SearchResultReference
      messages contain, as\n      required by this specification, an explicit scope
      specifier.\n"
    title: 5.4.  Search Continuation Considerations
  - contents:
    - "5.6.  Other Considerations\n   This section details processing considerations
      for other operations.\n"
    - contents:
      - "5.6.1 Bind\n   Servers SHOULD NOT return referral result code if the bind
        name (or\n   authentication identity or authorization identity) is (or is\n
        \  subordinate to) a referral object but MAY use the knowledge\n   information
        to process the bind request (such as in support a future\n   distributed operation
        specification).  Where the server makes no use\n   of the knowledge information,
        the server processes the request\n   normally as appropriate for a non-existent
        authentication or\n   authorization identity (e.g., return invalidCredentials).\n"
      title: 5.6.1 Bind
    - contents:
      - "5.6.2 Modify DN\n   If the newSuperior is a referral object or is subordinate
        to a\n   referral object, the server SHOULD return affectsMultipleDSAs.  If\n
        \  the newRDN already exists but is a referral object, the server SHOULD\n
        \  return affectsMultipleDSAs instead of entryAlreadyExists.\n"
      title: 5.6.2 Modify DN
    title: 5.6.  Other Considerations
  title: 5.  Scenarios
- contents:
  - "6.  Security Considerations\n   This document defines mechanisms that can be
    used to tie LDAP (and\n   other) servers together.  The information used to tie
    services\n   together should be protected from unauthorized modification.  If
    the\n   server topology information is not public information, it should be\n
    \  protected from unauthorized disclosure as well.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Acknowledgments\n   This document borrows heavily from previous work by IETF
    LDAPext\n   Working Group.  In particular, this document is based upon \"Named\n
    \  Referral in LDAP Directories\" (an expired Internet Draft) by\n   Christopher
    Lukas, Tim Howes, Michael Roszkowski, Mark C. Smith, and\n   Mark Wahl.\n"
  title: 7.  Acknowledgments
- contents:
  - "8. Normative References\n   [RFC2079] Smith, M., \"Definition of an X.500 Attribute
    Type and an\n             Object Class to Hold Uniform Resource Identifiers (URIs)\",\n
    \            RFC 2079, January 1997.\n   [RFC2119] Bradner, S., \"Key Words for
    use in RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119,
    March 1997.\n   [RFC2251] Wahl, M., Howes, T. and S. Kille, \"Lightweight Directory\n
    \            Access Protocol (v3)\", RFC 2251, December 1997.\n   [RFC2252] Wahl,
    M., Coulbeck, A., Howes, T. and S. Kille,\n             \"Lightweight Directory
    Access Protocol (v3): Attribute\n             Syntax Definitions\", RFC 2252,
    December 1997.\n   [RFC2253] Wahl, M., Kille, S. and T. Howes, \"Lightweight Directory\n
    \            Access Protocol (v3): UTF-8 String Representation of\n             Distinguished
    Names\", RFC 2253, December 1997.\n   [RFC2255] Howes, T. and M. Smith, \"The
    LDAP URL Format\", RFC 2255,\n             December, 1997.\n   [RFC2396] Berners-Lee,
    T., Fielding, R. and L. Masinter, \"Uniform\n             Resource Identifiers
    (URI): Generic Syntax\", RFC 2396,\n             August 1998.\n   [X.501]   ITU-T,
    \"The Directory: Models\", X.501, 1993.\n"
  title: 8. Normative References
- contents:
  - "9. Informative References\n   [X.500]   ITU-T, \"The Directory: Overview of Concepts,
    Models, and\n             Services\", X.500, 1993.\n   [X.511]   ITU-T, \"The
    Directory: Abstract Service Definition\", X.500,\n             1997.\n"
  title: 9. Informative References
- contents:
  - "10.  Author's Address\n   Kurt D. Zeilenga\n   OpenLDAP Foundation\n   EMail:
    Kurt@OpenLDAP.org\n"
  title: 10.  Author's Address
- contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 11.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
