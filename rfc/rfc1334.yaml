- title: __initial_text__
  contents:
  - '                      PPP Authentication Protocols

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ of\n   encapsulating Network Layer protocol information over point-to-point\n\
    \   links.  PPP also defines an extensible Link Control Protocol, which\n   allows\
    \ negotiation of an Authentication Protocol for authenticating\n   its peer before\
    \ allowing Network Layer protocols to transmit over the\n   link.\n   This document\
    \ defines two protocols for Authentication: the Password\n   Authentication Protocol\
    \ and the Challenge-Handshake Authentication\n   Protocol.  This memo is the product\
    \ of the Point-to-Point Protocol\n   Working Group of the Internet Engineering\
    \ Task Force (IETF).\n   Comments on this memo should be submitted to the ietf-ppp@ucdavis.edu\n\
    \   mailing list.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   SECURITY CONSIDERATIONS ........................................\
    \   14\n   REFERENCES .....................................................  \
    \ 15\n   ACKNOWLEDGEMENTS ...............................................   16\n\
    \   CHAIR'S ADDRESS ................................................   16\n  \
    \ AUTHOR'S ADDRESS ...............................................   16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   PPP has three main components:\n      1. A method for encapsulating\
    \ datagrams over serial links.\n      2. A Link Control Protocol (LCP) for establishing,\
    \ configuring,\n         and testing the data-link connection.\n      3. A family\
    \ of Network Control Protocols (NCPs) for establishing\n         and configuring\
    \ different network-layer protocols.\n   In order to establish communications\
    \ over a point-to-point link, each\n   end of the PPP link must first send LCP\
    \ packets to configure the data\n   link during Link Establishment phase.  After\
    \ the link has been\n   established, PPP provides for an optional Authentication\
    \ phase before\n   proceeding to the Network-Layer Protocol phase.\n   By default,\
    \ authentication is not mandatory.  If authentication of\n   the link is desired,\
    \ an implementation MUST specify the\n   Authentication-Protocol Configuration\
    \ Option during Link\n   Establishment phase.\n   These authentication protocols\
    \ are intended for use primarily by\n   hosts and routers that connect to a PPP\
    \ network server via switched\n   circuits or dial-up lines, but might be applied\
    \ to dedicated links as\n   well.  The server can use the identification of the\
    \ connecting host\n   or router in the selection of options for network layer\
    \ negotiations.\n   This document defines the PPP authentication protocols.  The\
    \ Link\n   Establishment and Authentication phases, and the Authentication-\n\
    \   Protocol Configuration Option, are defined in The Point-to-Point\n   Protocol\
    \ (PPP) [1].\n"
- title: 1.1.  Specification Requirements
  contents:
  - "1.1.  Specification Requirements\n   In this document, several words are used\
    \ to signify the requirements\n   of the specification.  These words are often\
    \ capitalized.\n   MUST\n      This word, or the adjective \"required\", means\
    \ that the definition\n      is an absolute requirement of the specification.\n\
    \   MUST NOT\n      This phrase means that the definition is an absolute prohibition\n\
    \      of the specification.\n   SHOULD\n      This word, or the adjective \"\
    recommended\", means that there may\n      exist valid reasons in particular circumstances\
    \ to ignore this\n      item, but the full implications should be understood and\
    \ carefully\n      weighed before choosing a different course.\n   MAY\n     \
    \ This word, or the adjective \"optional\", means that this item is\n      one\
    \ of an allowed set of alternatives.  An implementation which\n      does not\
    \ include this option MUST be prepared to interoperate with\n      another implementation\
    \ which does include the option.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   This document frequently uses the following terms:\n  \
    \ authenticator\n      The end of the link requiring the authentication.  The\n\
    \      authenticator specifies the authentication protocol to be used in\n   \
    \   the Configure-Request during Link Establishment phase.\n   peer\n      The\
    \ other end of the point-to-point link; the end which is being\n      authenticated\
    \ by the authenticator.\n   silently discard\n      This means the implementation\
    \ discards the packet without further\n      processing.  The implementation SHOULD\
    \ provide the capability of\n      logging the error, including the contents of\
    \ the silently\n      discarded packet, and SHOULD record the event in a statistics\n\
    \      counter.\n"
- title: 2.  Password Authentication Protocol
  contents:
  - "2.  Password Authentication Protocol\n   The Password Authentication Protocol\
    \ (PAP) provides a simple method\n   for the peer to establish its identity using\
    \ a 2-way handshake.  This\n   is done only upon initial link establishment.\n\
    \   After the Link Establishment phase is complete, an Id/Password pair\n   is\
    \ repeatedly sent by the peer to the authenticator until\n   authentication is\
    \ acknowledged or the connection is terminated.\n   PAP is not a strong authentication\
    \ method.  Passwords are sent over\n   the circuit \"in the clear\", and there\
    \ is no protection from playback\n   or repeated trial and error attacks.  The\
    \ peer is in control of the\n   frequency and timing of the attempts.\n   Any\
    \ implementations which include a stronger authentication method\n   (such as\
    \ CHAP, described below) MUST offer to negotiate that method\n   prior to PAP.\n\
    \   This authentication method is most appropriately used where a\n   plaintext\
    \ password must be available to simulate a login at a remote\n   host.  In such\
    \ use, this method provides a similar level of security\n   to the usual user\
    \ login at the remote host.\n      Implementation Note: It is possible to limit\
    \ the exposure of the\n      plaintext password to transmission over the PPP link,\
    \ and avoid\n      sending the plaintext password over the entire network.  When\
    \ the\n      remote host password is kept as a one-way transformed value, and\n\
    \      the algorithm for the transform function is implemented in the\n      local\
    \ server, the plaintext password SHOULD be locally transformed\n      before comparison\
    \ with the transformed password from the remote\n      host.\n"
- title: 2.1.  Configuration Option Format
  contents:
  - "2.1.  Configuration Option Format\n   A summary of the Authentication-Protocol\
    \ Configuration Option format\n   to negotiate the Password Authentication Protocol\
    \ is shown below.\n   The fields are transmitted from left to right.\n    0  \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |     Authentication-Protocol   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      3\n   Length\n      4\n   Authentication-Protocol\n      c023\
    \ (hex) for Password Authentication Protocol.\n   Data\n      There is no Data\
    \ field.\n"
- title: 2.2.  Packet Format
  contents:
  - "2.2.  Packet Format\n   Exactly one Password Authentication Protocol packet is\
    \ encapsulated\n   in the Information field of a PPP Data Link Layer frame where\
    \ the\n   protocol field indicates type hex c023 (Password Authentication\n  \
    \ Protocol).  A summary of the PAP packet format is shown below.  The\n   fields\
    \ are transmitted from left to right.\n    0                   1             \
    \      2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Code\n      The Code field is one octet and\
    \ identifies the type of PAP packet.\n      PAP Codes are assigned as follows:\n\
    \         1       Authenticate-Request\n         2       Authenticate-Ack\n  \
    \       3       Authenticate-Nak\n   Identifier\n      The Identifier field is\
    \ one octet and aids in matching requests\n      and replies.\n   Length\n   \
    \   The Length field is two octets and indicates the length of the PAP\n     \
    \ packet including the Code, Identifier, Length and Data fields.\n      Octets\
    \ outside the range of the Length field should be treated as\n      Data Link\
    \ Layer padding and should be ignored on reception.\n   Data\n      The Data field\
    \ is zero or more octets.  The format of the Data\n      field is determined by\
    \ the Code field.\n"
- title: 2.2.1.  Authenticate-Request
  contents:
  - "2.2.1.  Authenticate-Request\n   Description\n      The Authenticate-Request\
    \ packet is used to begin the Password\n      Authentication Protocol.  The link\
    \ peer MUST transmit a PAP packet\n      with the Code field set to 1 (Authenticate-Request)\
    \ during the\n      Authentication phase.  The Authenticate-Request packet MUST\
    \ be\n      repeated until a valid reply packet is received, or an optional\n\
    \      retry counter expires.\n      The authenticator SHOULD expect the peer\
    \ to send an Authenticate-\n      Request packet.  Upon reception of an Authenticate-Request\
    \ packet,\n      some type of Authenticate reply (described below) MUST be\n \
    \     returned.\n         Implementation Note: Because the Authenticate-Ack might\
    \ be\n         lost, the authenticator MUST allow repeated Authenticate-\n   \
    \      Request packets after completing the Authentication phase.\n         Protocol\
    \ phase MUST return the same reply Code returned when\n         the Authentication\
    \ phase completed (the message portion MAY be\n         different).  Any Authenticate-Request\
    \ packets received during\n         any other phase MUST be silently discarded.\n\
    \         When the Authenticate-Nak is lost, and the authenticator\n         terminates\
    \ the link, the LCP Terminate-Request and Terminate-\n         Ack provide an\
    \ alternative indication that authentication\n         failed.\n   A summary of\
    \ the Authenticate-Request packet format is shown below.\n   The fields are transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Peer-ID Length|  Peer-Id ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+\n   | Passwd-Length\
    \ |  Password  ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Code\n      1 for Authenticate-Request.\n\
    \   Identifier\n      The Identifier field is one octet and aids in matching requests\n\
    \      and replies.  The Identifier field MUST be changed each time an\n     \
    \ Authenticate-Request packet is issued.\n   Peer-ID-Length\n      The Peer-ID-Length\
    \ field is one octet and indicates the length of\n      the Peer-ID field.\n \
    \  Peer-ID\n      The Peer-ID field is zero or more octets and indicates the name\
    \ of\n      the peer to be authenticated.\n   Passwd-Length\n      The Passwd-Length\
    \ field is one octet and indicates the length of\n      the Password field.\n\
    \   Password\n      The Password field is zero or more octets and indicates the\n\
    \      password to be used for authentication.\n"
- title: 2.2.2.  Authenticate-Ack and Authenticate-Nak
  contents:
  - "2.2.2.  Authenticate-Ack and Authenticate-Nak\n   Description\n      If the Peer-ID/Password\
    \ pair received in an Authenticate-Request\n      is both recognizable and acceptable,\
    \ then the authenticator MUST\n      transmit a PAP packet with the Code field\
    \ set to 2 (Authenticate-\n      Ack).\n      If the Peer-ID/Password pair received\
    \ in a Authenticate-Request is\n      not recognizable or acceptable, then the\
    \ authenticator MUST\n      transmit a PAP packet with the Code field set to 3\
    \ (Authenticate-\n      Nak), and SHOULD take action to terminate the link.\n\
    \   A summary of the Authenticate-Ack and Authenticate-Nak packet format\n   is\
    \ shown below.  The fields are transmitted from left to right.\n    0        \
    \           1                   2                   3\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Msg-Length   |  Message  ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-\n   Code\n\
    \      2 for Authenticate-Ack;\n      3 for Authenticate-Nak.\n   Identifier\n\
    \      The Identifier field is one octet and aids in matching requests\n     \
    \ and replies.  The Identifier field MUST be copied from the\n      Identifier\
    \ field of the Authenticate-Request which caused this\n      reply.\n   Msg-Length\n\
    \      The Msg-Length field is one octet and indicates the length of the\n   \
    \   Message field.\n   Message\n      The Message field is zero or more octets,\
    \ and its contents are\n      implementation dependent.  It is intended to be\
    \ human readable,\n      and MUST NOT affect operation of the protocol.  It is\
    \ recommended\n      that the message contain displayable ASCII characters 32\
    \ through\n      126 decimal.  Mechanisms for extension to other character sets\
    \ are\n      the topic of future research.\n"
- title: 3.  Challenge-Handshake Authentication Protocol
  contents:
  - "3.  Challenge-Handshake Authentication Protocol\n   The Challenge-Handshake Authentication\
    \ Protocol (CHAP) is used to\n   periodically verify the identity of the peer\
    \ using a 3-way handshake.\n   This is done upon initial link establishment, and\
    \ MAY be repeated\n   anytime after the link has been established.\n   After the\
    \ Link Establishment phase is complete, the authenticator\n   sends a \"challenge\"\
    \ message to the peer.  The peer responds with a\n   value calculated using a\
    \ \"one-way hash\" function.  The authenticator\n   checks the response against\
    \ its own calculation of the expected hash\n   value.  If the values match, the\
    \ authentication is acknowledged;\n   otherwise the connection SHOULD be terminated.\n\
    \   CHAP provides protection against playback attack through the use of\n   an\
    \ incrementally changing identifier and a variable challenge value.\n   The use\
    \ of repeated challenges is intended to limit the time of\n   exposure to any\
    \ single attack.  The authenticator is in control of\n   the frequency and timing\
    \ of the challenges.\n   This authentication method depends upon a \"secret\"\
    \ known only to the\n   authenticator and that peer.  The secret is not sent over\
    \ the link.\n   This method is most likely used where the same secret is easily\n\
    \   accessed from both ends of the link.\n      Implementation Note: CHAP requires\
    \ that the secret be available in\n      plaintext form.  To avoid sending the\
    \ secret over other links in\n      the network, it is recommended that the challenge\
    \ and response\n      values be examined at a central server, rather than each\
    \ network\n      access server.  Otherwise, the secret SHOULD be sent to such\n\
    \      servers in a reversably encrypted form.\n   The CHAP algorithm requires\
    \ that the length of the secret MUST be at\n   least 1 octet.  The secret SHOULD\
    \ be at least as large and\n   unguessable as a well-chosen password.  It is preferred\
    \ that the\n   secret be at least the length of the hash value for the hashing\n\
    \   algorithm chosen (16 octets for MD5).  This is to ensure a\n   sufficiently\
    \ large range for the secret to provide protection against\n   exhaustive search\
    \ attacks.\n   The one-way hash algorithm is chosen such that it is computationally\n\
    \   infeasible to determine the secret from the known challenge and\n   response\
    \ values.\n   The challenge value SHOULD satisfy two criteria: uniqueness and\n\
    \   unpredictability.  Each challenge value SHOULD be unique, since\n   repetition\
    \ of a challenge value in conjunction with the same secret\n   would permit an\
    \ attacker to reply with a previously intercepted\n   response.  Since it is expected\
    \ that the same secret MAY be used to\n   authenticate with servers in disparate\
    \ geographic regions, the\n   challenge SHOULD exhibit global and temporal uniqueness.\
    \  Each\n   challenge value SHOULD also be unpredictable, least an attacker trick\n\
    \   a peer into responding to a predicted future challenge, and then use\n   the\
    \ response to masquerade as that peer to an authenticator.\n   Although protocols\
    \ such as CHAP are incapable of protecting against\n   realtime active wiretapping\
    \ attacks, generation of unique\n   unpredictable challenges can protect against\
    \ a wide range of active\n   attacks.\n   A discussion of sources of uniqueness\
    \ and probability of divergence\n   is included in the Magic-Number Configuration\
    \ Option [1].\n"
- title: 3.1.  Configuration Option Format
  contents:
  - "3.1.  Configuration Option Format\n   A summary of the Authentication-Protocol\
    \ Configuration Option format\n   to negotiate the Challenge-Handshake Authentication\
    \ Protocol is shown\n   below.  The fields are transmitted from left to right.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |     Authentication-Protocol   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Algorithm   |\n   +-+-+-+-+-+-+-+-+\n   Type\n      3\n   Length\n   \
    \   5\n   Authentication-Protocol\n      c223 (hex) for Challenge-Handshake Authentication\
    \ Protocol.\n   Algorithm\n      The Algorithm field is one octet and indicates\
    \ the one-way hash\n      method to be used.  The most up-to-date values of the\
    \ CHAP\n      Algorithm field are specified in the most recent \"Assigned\n  \
    \    Numbers\" RFC [2].  Current values are assigned as follows:\n         0-4\
    \     unused (reserved)\n         5       MD5 [3]\n"
- title: 3.2.  Packet Format
  contents:
  - "3.2.  Packet Format\n   Exactly one Challenge-Handshake Authentication Protocol\
    \ packet is\n   encapsulated in the Information field of a PPP Data Link Layer\
    \ frame\n   where the protocol field indicates type hex c223 (Challenge-Handshake\n\
    \   Authentication Protocol).  A summary of the CHAP packet format is\n   shown\
    \ below.  The fields are transmitted from left to right.\n    0              \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Code\n      The Code field is one octet and\
    \ identifies the type of CHAP\n      packet.  CHAP Codes are assigned as follows:\n\
    \         1       Challenge\n         2       Response\n         3       Success\n\
    \         4       Failure\n   Identifier\n      The Identifier field is one octet\
    \ and aids in matching challenges,\n      responses and replies.\n   Length\n\
    \      The Length field is two octets and indicates the length of the\n      CHAP\
    \ packet including the Code, Identifier, Length and Data\n      fields.  Octets\
    \ outside the range of the Length field should be\n      treated as Data Link\
    \ Layer padding and should be ignored on\n      reception.\n   Data\n      The\
    \ Data field is zero or more octets.  The format of the Data\n      field is determined\
    \ by the Code field.\n"
- title: 3.2.1.  Challenge and Response
  contents:
  - "3.2.1.  Challenge and Response\n   Description\n      The Challenge packet is\
    \ used to begin the Challenge-Handshake\n      Authentication Protocol.  The authenticator\
    \ MUST transmit a CHAP\n      packet with the Code field set to 1 (Challenge).\
    \  Additional\n      Challenge packets MUST be sent until a valid Response packet\
    \ is\n      received, or an optional retry counter expires.\n      A Challenge\
    \ packet MAY also be transmitted at any time during the\n      Network-Layer Protocol\
    \ phase to ensure that the connection has not\n      been altered.\n      The\
    \ peer SHOULD expect Challenge packets during the Authentication\n      phase\
    \ and the Network-Layer Protocol phase.  Whenever a Challenge\n      packet is\
    \ received, the peer MUST transmit a CHAP packet with the\n      Code field set\
    \ to 2 (Response).\n      Whenever a Response packet is received, the authenticator\
    \ compares\n      the Response Value with its own calculation of the expected\
    \ value.\n      Based on this comparison, the authenticator MUST send a Success\
    \ or\n      Failure packet (described below).\n         Implementation Note: Because\
    \ the Success might be lost, the\n         authenticator MUST allow repeated Response\
    \ packets after\n         completing the Authentication phase.  To prevent discovery\
    \ of\n         alternative Names and Secrets, any Response packets received\n\
    \         having the current Challenge Identifier MUST return the same\n     \
    \    reply Code returned when the Authentication phase completed\n         (the\
    \ message portion MAY be different).  Any Response packets\n         received\
    \ during any other phase MUST be silently discarded.\n         When the Failure\
    \ is lost, and the authenticator terminates the\n         link, the LCP Terminate-Request\
    \ and Terminate-Ack provide an\n         alternative indication that authentication\
    \ failed.\n   A summary of the Challenge and Response packet format is shown below.\n\
    \   The fields are transmitted from left to right.\n    0                   1\
    \                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Value-Size   |  Value ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Name ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Code\n      1 for Challenge;\n\
    \      2 for Response.\n   Identifier\n      The Identifier field is one octet.\
    \  The Identifier field MUST be\n      changed each time a Challenge is sent.\n\
    \      The Response Identifier MUST be copied from the Identifier field\n    \
    \  of the Challenge which caused the Response.\n   Value-Size\n      This field\
    \ is one octet and indicates the length of the Value\n      field.\n   Value\n\
    \      The Value field is one or more octets.  The most significant octet\n  \
    \    is transmitted first.\n      The Challenge Value is a variable stream of\
    \ octets.  The\n      importance of the uniqueness of the Challenge Value and\
    \ its\n      relationship to the secret is described above.  The Challenge\n \
    \     Value MUST be changed each time a Challenge is sent.  The length\n     \
    \ of the Challenge Value depends upon the method used to generate\n      the octets,\
    \ and is independent of the hash algorithm used.\n      The Response Value is\
    \ the one-way hash calculated over a stream of\n      octets consisting of the\
    \ Identifier, followed by (concatenated\n      with) the \"secret\", followed\
    \ by (concatenated with) the Challenge\n      Value.  The length of the Response\
    \ Value depends upon the hash\n      algorithm used (16 octets for MD5).\n   Name\n\
    \      The Name field is one or more octets representing the\n      identification\
    \ of the system transmitting the packet.  There are\n      no limitations on the\
    \ content of this field.  For example, it MAY\n      contain ASCII character strings\
    \ or globally unique identifiers in\n      ASN.1 syntax.  The Name should not\
    \ be NUL or CR/LF terminated.\n      The size is determined from the Length field.\n\
    \      Since CHAP may be used to authenticate many different systems, the\n  \
    \    content of the name field(s) may be used as a key to locate the\n      proper\
    \ secret in a database of secrets.  This also makes it\n      possible to support\
    \ more than one name/secret pair per system.\n"
- title: 3.2.2.  Success and Failure
  contents:
  - "3.2.2.  Success and Failure\n   Description\n      If the Value received in a\
    \ Response is equal to the expected\n      value, then the implementation MUST\
    \ transmit a CHAP packet with\n      the Code field set to 3 (Success).\n    \
    \  If the Value received in a Response is not equal to the expected\n      value,\
    \ then the implementation MUST transmit a CHAP packet with\n      the Code field\
    \ set to 4 (Failure), and SHOULD take action to\n      terminate the link.\n \
    \  A summary of the Success and Failure packet format is shown below.\n   The\
    \ fields are transmitted from left to right.\n    0                   1      \
    \             2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Message  ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-\n   Code\n      3 for Success;\n\
    \      4 for Failure.\n   Identifier\n      The Identifier field is one octet\
    \ and aids in matching requests\n      and replies.  The Identifier field MUST\
    \ be copied from the\n      Identifier field of the Response which caused this\
    \ reply.\n   Message\n      The Message field is zero or more octets, and its\
    \ contents are\n      implementation dependent.  It is intended to be human readable,\n\
    \      and MUST NOT affect operation of the protocol.  It is recommended\n   \
    \   that the message contain displayable ASCII characters 32 through\n      126\
    \ decimal.  Mechanisms for extension to other character sets are\n      the topic\
    \ of future research.  The size is determined from the\n      Length field.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n      Security issues are the primary topic of this\
    \ RFC.\n      The interaction of the authentication protocols within PPP are\n\
    \      highly implementation dependent.  This is indicated by the use of\n   \
    \   SHOULD throughout the document.\n      For example, upon failure of authentication,\
    \ some implementations\n      do not terminate the link.  Instead, the implementation\
    \ limits the\n      kind of traffic in the Network-Layer Protocols to a filtered\n\
    \      subset, which in turn allows the user opportunity to update\n      secrets\
    \ or send mail to the network administrator indicating a\n      problem.\n   \
    \   There is no provision for re-tries of failed authentication.\n      However,\
    \ the LCP state machine can renegotiate the authentication\n      protocol at\
    \ any time, thus allowing a new attempt.  It is\n      recommended that any counters\
    \ used for authentication failure not\n      be reset until after successful authentication,\
    \ or subsequent\n      termination of the failed link.\n      There is no requirement\
    \ that authentication be full duplex or that\n      the same protocol be used\
    \ in both directions.  It is perfectly\n      acceptable for different protocols\
    \ to be used in each direction.\n      This will, of course, depend on the specific\
    \ protocols negotiated.\n      In practice, within or associated with each PPP\
    \ server, there is a\n      database which associates \"user\" names with authentication\n\
    \      information (\"secrets\").  It is not anticipated that a particular\n \
    \     named user would be authenticated by multiple methods.  This would\n   \
    \   make the user vulnerable to attacks which negotiate the least\n      secure\
    \ method from among a set (such as PAP rather than CHAP).\n      Instead, for\
    \ each named user there should be an indication of\n      exactly one method used\
    \ to authenticate that user name.  If a user\n      needs to make use of different\
    \ authentication method under\n      different circumstances, then distinct user\
    \ names SHOULD be\n      employed, each of which identifies exactly one authentication\n\
    \      method.\n      Passwords and other secrets should be stored at the respective\n\
    \      ends such that access to them is as limited as possible.  Ideally,\n  \
    \    the secrets should only be accessible to the process requiring\n      access\
    \ in order to perform the authentication.\n      The secrets should be distributed\
    \ with a mechanism that limits the\n      number of entities that handle (and\
    \ thus gain knowledge of) the\n      secret.  Ideally, no unauthorized person\
    \ should ever gain\n      knowledge of the secrets.  It is possible to achieve\
    \ this with\n      SNMP Security Protocols [4], but such a mechanism is outside\
    \ the\n      scope of this specification.\n      Other distribution methods are\
    \ currently undergoing research and\n      experimentation.  The SNMP Security\
    \ document also has an excellent\n      overview of threats to network protocols.\n"
- title: References
  contents:
  - "References\n   [1] Simpson, W., \"The Point-to-Point Protocol (PPP)\", RFC 1331,\n\
    \       Daydreamer, May 1992.\n   [2] Reynolds, J., and J. Postel, \"Assigned\
    \ Numbers\", RFC 1340,\n       USC/Information Sciences Institute, July 1992.\n\
    \   [3] Rivest, R., and S. Dusse, \"The MD5 Message-Digest Algorithm\", MIT\n\
    \       Laboratory for Computer Science and RSA Data Security, Inc.  RFC\n   \
    \    1321, April 1992.\n   [4] Galvin, J., McCloghrie, K., and J. Davin, \"SNMP\
    \ Security\n       Protocols\", Trusted Information Systems, Inc., Hughes LAN\n\
    \       Systems, Inc., MIT Laboratory for Computer Science, RFC 1352,\n      \
    \ July 1992.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Some of the text in this document is taken from RFC 1172,\
    \ by Drew\n   Perkins of Carnegie Mellon University, and by Russ Hobby of the\n\
    \   University of California at Davis.\n   Special thanks to Dave Balenson, Steve\
    \ Crocker, James Galvin, and\n   Steve Kent, for their extensive explanations\
    \ and suggestions.  Now,\n   if only we could get them to agree with each other.\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \      Brian Lloyd\n      Lloyd & Associates\n      3420 Sudbury Road\n      Cameron\
    \ Park, California 95682\n      Phone: (916) 676-1147\n      EMail: brian@lloyd.com\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Questions about this memo can also be directed to:\n   \
    \   William Allen Simpson\n      Daydreamer\n      Computer Systems Consulting\
    \ Services\n      P O Box 6205\n      East Lansing, MI  48826-6205\n      EMail:\
    \ Bill.Simpson@um.cc.umich.edu\n"
