- title: __initial_text__
  contents:
  - '           IKEv2 Clarifications and Implementation Guidelines

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document clarifies many areas of the IKEv2 specification. \
    \ It\n   does not to introduce any changes to the protocol, but rather\n   provides\
    \ descriptions that are less prone to ambiguous\n   interpretations.  The purpose\
    \ of this document is to encourage the\n   development of interoperable implementations.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Creating the IKE_SA .............................................4\n  \
    \    2.1. SPI Values in IKE_SA_INIT Exchange .........................4\n    \
    \  2.2. Message IDs for IKE_SA_INIT Messages .......................5\n      2.3.\
    \ Retransmissions of IKE_SA_INIT Requests ....................5\n      2.4. Interaction\
    \ of COOKIE and INVALID_KE_PAYLOAD ...............6\n      2.5. Invalid Cookies\
    \ ............................................8\n   3. Authentication ..................................................9\n\
    \      3.1. Data Included in AUTH Payload Calculation ..................9\n  \
    \    3.2. Hash Function for RSA Signatures ...........................9\n    \
    \  3.3. Encoding Method for RSA Signatures ........................10\n      3.4.\
    \ Identification Type for EAP ...............................11\n      3.5. Identity\
    \ for Policy Lookups When Using EAP ................11\n      3.6. Certificate\
    \ Encoding Types ................................12\n      3.7. Shared Key Authentication\
    \ and Fixed PRF Key Size ..........12\n      3.8. EAP Authentication and Fixed\
    \ PRF Key Size .................13\n      3.9. Matching ID Payloads to Certificate\
    \ Contents ..............13\n      3.10. Message IDs for IKE_AUTH Messages ........................14\n\
    \   4. Creating CHILD_SAs .............................................14\n  \
    \    4.1. Creating SAs with the CREATE_CHILD_SA Exchange ............14\n    \
    \  4.2. Creating an IKE_SA without a CHILD_SA .....................16\n      4.3.\
    \ Diffie-Hellman for First CHILD_SA .........................16\n      4.4. Extended\
    \ Sequence Numbers (ESN) Transform .................17\n      4.5. Negotiation\
    \ of ESP_TFC_PADDING_NOT_SUPPORTED ..............17\n      4.6. Negotiation of\
    \ NON_FIRST_FRAGMENTS_ALSO ...................18\n      4.7. Semantics of Complex\
    \ Traffic Selector Payloads ............18\n      4.8. ICMP Type/Code in Traffic\
    \ Selector Payloads ...............19\n      4.9. Mobility Header in Traffic Selector\
    \ Payloads ..............20\n      4.10. Narrowing the Traffic Selectors ..........................20\n\
    \      4.11. SINGLE_PAIR_REQUIRED .....................................21\n  \
    \    4.12. Traffic Selectors Violating Own Policy ...................21\n    \
    \  4.13. Traffic Selector Authorization ...........................22\n   5. Rekeying\
    \ and Deleting SAs ......................................23\n      5.1. Rekeying\
    \ SAs with the CREATE_CHILD_SA Exchange ............23\n      5.2. Rekeying the\
    \ IKE_SA vs. Reauthentication ..................24\n      5.3. SPIs When Rekeying\
    \ the IKE_SA .............................25\n      5.4. SPI When Rekeying a CHILD_SA\
    \ ..............................25\n      5.5. Changing PRFs When Rekeying the\
    \ IKE_SA ....................26\n      5.6. Deleting vs. Closing SAs ..................................26\n\
    \      5.7. Deleting a CHILD_SA Pair ..................................26\n  \
    \    5.8. Deleting an IKE_SA ........................................27\n    \
    \  5.9. Who is the original initiator of IKE_SA ...................27\n      5.10.\
    \ Comparing Nonces .........................................27\n      5.11. Exchange\
    \ Collisions ......................................28\n      5.12. Diffie-Hellman\
    \ and Rekeying the IKE_SA ...................36\n   6. Configuration Payloads\
    \ .........................................37\n      6.1. Assigning IP Addresses\
    \ ....................................37\n      6.2. Requesting any INTERNAL_IP4/IP6_ADDRESS\
    \ ...................38\n      6.3. INTERNAL_IP4_SUBNET/INTERNAL_IP6_SUBNET ...................38\n\
    \      6.4. INTERNAL_IP4_NETMASK ......................................41\n  \
    \    6.5. Configuration Payloads for IPv6 ...........................42\n    \
    \  6.6. INTERNAL_IP6_NBNS .........................................43\n      6.7.\
    \ INTERNAL_ADDRESS_EXPIRY ...................................43\n      6.8. Address\
    \ Assignment Failures ...............................44\n   7. Miscellaneous Issues\
    \ ...........................................45\n      7.1. Matching ID_IPV4_ADDR\
    \ and ID_IPV6_ADDR ....................45\n      7.2. Relationship of IKEv2 to\
    \ RFC 4301 .........................45\n      7.3. Reducing the Window Size ..................................46\n\
    \      7.4. Minimum Size of Nonces ....................................46\n  \
    \    7.5. Initial Zero Octets on Port 4500 ..........................46\n    \
    \  7.6. Destination Port for NAT Traversal ........................47\n      7.7.\
    \ SPI Values for Messages outside an IKE_SA .................47\n      7.8. Protocol\
    \ ID/SPI Fields in Notify Payloads .................48\n      7.9. Which message\
    \ should contain INITIAL_CONTACT ..............48\n      7.10. Alignment of Payloads\
    \ ....................................48\n      7.11. Key Length Transform Attribute\
    \ ...........................48\n      7.12. IPsec IANA Considerations ................................49\n\
    \      7.13. Combining ESP and AH .....................................50\n  \
    \ 8. Implementation Mistakes ........................................50\n   9.\
    \ Security Considerations ........................................51\n   10. Acknowledgments\
    \ ...............................................51\n   11. References ....................................................51\n\
    \      11.1. Normative References .....................................51\n  \
    \    11.2. Informative References ...................................52\n   Appendix\
    \ A. Exchanges and Payloads ................................54\n      A.1. IKE_SA_INIT\
    \ Exchange ......................................54\n      A.2. IKE_AUTH Exchange\
    \ without EAP .............................54\n      A.3. IKE_AUTH Exchange with\
    \ EAP ................................55\n      A.4. CREATE_CHILD_SA Exchange\
    \ for Creating/Rekeying\n           CHILD_SAs .................................................56\n\
    \      A.5. CREATE_CHILD_SA Exchange for Rekeying the IKE_SA ..........56\n  \
    \    A.6. INFORMATIONAL Exchange ....................................56\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document clarifies many areas of the IKEv2 specification\
    \ that\n   may be difficult to understand to developers not intimately familiar\n\
    \   with the specification and its history.  The clarifications in this\n   document\
    \ come from the discussion on the IPsec WG mailing list, from\n   experience in\
    \ interoperability testing, and from implementation\n   issues that have been\
    \ brought to the editors' attention.\n   IKEv2/IPsec can be used for several different\
    \ purposes, including\n   IPsec-based remote access (sometimes called the \"road\
    \ warrior\" case),\n   site-to-site virtual private networks (VPNs), and host-to-host\n\
    \   protection of application traffic.  While this document attempts to\n   consider\
    \ all of these uses, the remote access scenario has perhaps\n   received more\
    \ attention here than the other uses.\n   This document does not place any requirements\
    \ on anyone and does not\n   use [RFC2119] keywords such as \"MUST\" and \"SHOULD\"\
    , except in\n   quotations from the original IKEv2 documents.  The requirements\
    \ are\n   given in the IKEv2 specification [IKEv2] and IKEv2 cryptographic\n \
    \  algorithms document [IKEv2ALG].\n   In this document, references to a numbered\
    \ section (such as \"Section\n   2.15\") mean that section in [IKEv2].  References\
    \ to mailing list\n   messages or threads refer to the IPsec WG mailing list at\n\
    \   ipsec@ietf.org.  Archives of the mailing list can be found at\n   <http://www.ietf.org/mail-archive/web/ipsec/index.html>.\n"
- title: 2.  Creating the IKE_SA
  contents:
  - '2.  Creating the IKE_SA

    '
- title: 2.1.  SPI Values in IKE_SA_INIT Exchange
  contents:
  - "2.1.  SPI Values in IKE_SA_INIT Exchange\n   Normal IKE messages include the\
    \ initiator's and responder's Security\n   Parameter Indexes (SPIs), both of which\
    \ are non-zero, in the IKE\n   header.  However, there are some corner cases where\
    \ the IKEv2\n   specification is not fully consistent about what values should\
    \ be\n   used.\n   First, Section 3.1 says that the Responder's SPI \"...MUST\
    \ NOT be zero\n   in any other message\" (than the first message of the IKE_SA_INIT\n\
    \   exchange).  However, the figure in Section 2.6 shows the second\n   IKE_SA_INIT\
    \ message as \"HDR(A,0), N(COOKIE)\", contradicting the text\n   in 3.1.\n   Since\
    \ the responder's SPI identifies security-related state held by\n   the responder,\
    \ and in this case no state is created, sending a zero\n   value seems reasonable.\n\
    \   Second, in addition to cookies, there are several other cases when\n   the\
    \ IKE_SA_INIT exchange does not result in the creation of an IKE_SA\n   (for instance,\
    \ INVALID_KE_PAYLOAD or NO_PROPOSAL_CHOSEN).  What\n   responder SPI value should\
    \ be used in the IKE_SA_INIT response in\n   this case?\n   Since the IKE_SA_INIT\
    \ request always has a zero responder SPI, the\n   value will not be actually\
    \ used by the initiator.  Thus, we think\n   sending a zero value is correct also\
    \ in this case.\n   If the responder sends a non-zero responder SPI, the initiator\
    \ should\n   not reject the response only for that reason.  However, when retrying\n\
    \   the IKE_SA_INIT request, the initiator will use a zero responder SPI,\n  \
    \ as described in Section 3.1: \"Responder's SPI [...]  This value MUST\n   be\
    \ zero in the first message of an IKE Initial Exchange (including\n   repeats\
    \ of that message including a cookie) [...]\".  We believe the\n   intent was\
    \ to cover repeats of that message due to other reasons,\n   such as INVALID_KE_PAYLOAD,\
    \ as well.\n   (References: \"INVALID_KE_PAYLOAD and clarifications document\"\
    \ thread,\n   Sep-Oct 2005.)\n"
- title: 2.2.  Message IDs for IKE_SA_INIT Messages
  contents:
  - "2.2.  Message IDs for IKE_SA_INIT Messages\n   The Message ID for IKE_SA_INIT\
    \ messages is always zero.  This\n   includes retries of the message due to responses\
    \ such as COOKIE and\n   INVALID_KE_PAYLOAD.\n   This is because Message IDs are\
    \ part of the IKE_SA state, and when\n   the responder replies to IKE_SA_INIT\
    \ request with N(COOKIE) or\n   N(INVALID_KE_PAYLOAD), the responder does not\
    \ allocate any state.\n   (References: \"Question about N(COOKIE) and N(INVALID_KE_PAYLOAD)\n\
    \   combination\" thread, Oct 2004.  Tero Kivinen's mail \"Comments of\n   draft-eronen-ipsec-ikev2-clarifications-02.txt\"\
    , 2005-04-05.)\n"
- title: 2.3.  Retransmissions of IKE_SA_INIT Requests
  contents:
  - "2.3.  Retransmissions of IKE_SA_INIT Requests\n   When a responder receives an\
    \ IKE_SA_INIT request, it has to determine\n   whether the packet is a retransmission\
    \ belonging to an existing\n   \"half-open\" IKE_SA (in which case the responder\
    \ retransmits the same\n   response), or a new request (in which case the responder\
    \ creates a\n   new IKE_SA and sends a fresh response).\n   The specification\
    \ does not describe in detail how this determination\n   is done.  In particular,\
    \ it is not sufficient to use the initiator's\n   SPI and/or IP address for this\
    \ purpose: two different peers behind a\n   single NAT could choose the same initiator\
    \ SPI (and the probability\n   of this happening is not necessarily small, since\
    \ IKEv2 does not\n   require SPIs to be chosen randomly).  Instead, the responder\
    \ should\n   do the IKE_SA lookup using the whole packet or its hash (or at the\n\
    \   minimum, the Ni payload which is always chosen randomly).\n   For all other\
    \ packets than IKE_SA_INIT requests, looking up right\n   IKE_SA is of course\
    \ done based on the recipient's SPI (either the\n   initiator or responder SPI\
    \ depending on the value of the Initiator\n   bit in the IKE header).\n"
- title: 2.4.  Interaction of COOKIE and INVALID_KE_PAYLOAD
  contents:
  - "2.4.  Interaction of COOKIE and INVALID_KE_PAYLOAD\n   There are two common reasons\
    \ why the initiator may have to retry the\n   IKE_SA_INIT exchange: the responder\
    \ requests a cookie or wants a\n   different Diffie-Hellman group than was included\
    \ in the KEi payload.\n   Both of these cases are quite simple alone, but it is\
    \ not totally\n   obvious what happens when they occur at the same time, that\
    \ is, the\n   IKE_SA_INIT exchange is retried several times.\n   The main question\
    \ seems to be the following: if the initiator\n   receives a cookie from the responder,\
    \ should it include the cookie in\n   only the next retry of the IKE_SA_INIT request,\
    \ or in all subsequent\n   retries as well?  Section 3.10.1 says that:\n     \
    \ \"This notification MUST be included in an IKE_SA_INIT request\n      retry\
    \ if a COOKIE notification was included in the initial\n      response.\"\n  \
    \ This could be interpreted as saying that when a cookie is received in\n   the\
    \ initial response, it is included in all retries.  On the other\n   hand, Section\
    \ 2.6 says that:\n      \"Initiators who receive such responses MUST retry the\n\
    \      IKE_SA_INIT with a Notify payload of type COOKIE containing\n      the\
    \ responder supplied cookie data as the first payload and\n      all other payloads\
    \ unchanged.\"\n   Including the same cookie in later retries makes sense only\
    \ if the\n   \"all other payloads unchanged\" restriction applies only to the\
    \ first\n   retry, but not to subsequent retries.\n   It seems that both interpretations\
    \ can peacefully coexist.  If the\n   initiator includes the cookie only in the\
    \ next retry, one additional\n   roundtrip may be needed in some cases:\n    \
    \  Initiator                   Responder\n     -----------                 -----------\n\
    \      HDR(A,0), SAi1, KEi, Ni -->\n                              <-- HDR(A,0),\
    \ N(COOKIE)\n      HDR(A,0), N(COOKIE), SAi1, KEi, Ni  -->\n                 \
    \             <-- HDR(A,0), N(INVALID_KE_PAYLOAD)\n      HDR(A,0), SAi1, KEi',\
    \ Ni -->\n                              <-- HDR(A,0), N(COOKIE')\n      HDR(A,0),\
    \ N(COOKIE'), SAi1, KEi',Ni -->\n                              <-- HDR(A,B), SAr1,\
    \ KEr, Nr\n   An additional roundtrip is needed also if the initiator includes\
    \ the\n   cookie in all retries, but the responder does not support this\n   functionality.\
    \  For instance, if the responder includes the SAi1 and\n   KEi payloads in cookie\
    \ calculation, it will reject the request by\n   sending a new cookie (see also\
    \ Section 2.5 of this document for more\n   text about invalid cookies):\n   \
    \   Initiator                   Responder\n     -----------                 -----------\n\
    \      HDR(A,0), SAi1, KEi, Ni -->\n                              <-- HDR(A,0),\
    \ N(COOKIE)\n      HDR(A,0), N(COOKIE), SAi1, KEi, Ni  -->\n                 \
    \             <-- HDR(A,0), N(INVALID_KE_PAYLOAD)\n      HDR(A,0), N(COOKIE),\
    \ SAi1, KEi', Ni -->\n                              <-- HDR(A,0), N(COOKIE')\n\
    \      HDR(A,0), N(COOKIE'), SAi1, KEi',Ni -->\n                             \
    \ <-- HDR(A,B), SAr1, KEr, Nr\n   If both peers support including the cookie in\
    \ all retries, a slightly\n   shorter exchange can happen:\n      Initiator  \
    \                 Responder\n     -----------                 -----------\n  \
    \    HDR(A,0), SAi1, KEi, Ni -->\n                              <-- HDR(A,0),\
    \ N(COOKIE)\n      HDR(A,0), N(COOKIE), SAi1, KEi, Ni  -->\n                 \
    \             <-- HDR(A,0), N(INVALID_KE_PAYLOAD)\n      HDR(A,0), N(COOKIE),\
    \ SAi1, KEi', Ni -->\n                              <-- HDR(A,B), SAr1, KEr, Nr\n\
    \   This document recommends that implementations should support this\n   shorter\
    \ exchange, but it must not be assumed the other peer also\n   supports the shorter\
    \ exchange.\n   In theory, even this exchange has one unnecessary roundtrip, as\
    \ both\n   the cookie and Diffie-Hellman group could be checked at the same\n\
    \   time:\n      Initiator                   Responder\n     -----------     \
    \            -----------\n      HDR(A,0), SAi1, KEi, Ni -->\n                \
    \              <-- HDR(A,0), N(COOKIE),\n                                    \
    \        N(INVALID_KE_PAYLOAD)\n      HDR(A,0), N(COOKIE), SAi1, KEi',Ni -->\n\
    \                              <-- HDR(A,B), SAr1, KEr, Nr\n   However, it is\
    \ clear that this case is not allowed by the text in\n   Section 2.6, since \"\
    all other payloads\" clearly includes the KEi\n   payload as well.\n   (References:\
    \ \"INVALID_KE_PAYLOAD and clarifications document\" thread,\n   Sep-Oct 2005.)\n"
- title: 2.5.  Invalid Cookies
  contents:
  - "2.5.  Invalid Cookies\n   There has been some confusion what should be done when\
    \ an IKE_SA_INIT\n   request containing an invalid cookie is received (\"invalid\"\
    \ in the\n   sense that its contents do not match the value expected by the\n\
    \   responder).\n   The correct action is to ignore the cookie and process the\
    \ message as\n   if no cookie had been included (usually this means sending a\
    \ response\n   containing a new cookie).  This is shown in Section 2.6 when it\
    \ says\n   \"The responder in that case MAY reject the message by sending another\n\
    \   response with a new cookie [...]\".\n   Other possible actions, such as ignoring\
    \ the whole request (or even\n   all requests from this IP address for some time),\
    \ create strange\n   failure modes even in the absence of any malicious attackers\
    \ and do\n   not provide any additional protection against DoS attacks.\n   (References:\
    \ \"Invalid Cookie\" thread, Sep-Oct 2005.)\n"
- title: 3.  Authentication
  contents:
  - '3.  Authentication

    '
- title: 3.1.  Data Included in AUTH Payload Calculation
  contents:
  - "3.1.  Data Included in AUTH Payload Calculation\n   Section 2.15 describes how\
    \ the AUTH payloads are calculated; this\n   calculation involves values prf(SK_pi,IDi')\
    \ and prf(SK_pr,IDr').  The\n   text describes the method in words, but does not\
    \ give clear\n   definitions of what is signed or MACed (i.e., protected with\
    \ a\n   message authentication code).\n   The initiator's signed octets can be\
    \ described as:\n       InitiatorSignedOctets = RealMessage1 | NonceRData | MACedIDForI\n\
    \       GenIKEHDR = [ four octets 0 if using port 4500 ] | RealIKEHDR\n      \
    \ RealIKEHDR =  SPIi | SPIr |  . . . | Length\n       RealMessage1 = RealIKEHDR\
    \ | RestOfMessage1\n       NonceRPayload = PayloadHeader | NonceRData\n      \
    \ InitiatorIDPayload = PayloadHeader | RestOfIDPayload\n       RestOfInitIDPayload\
    \ = IDType | RESERVED | InitIDData\n       MACedIDForI = prf(SK_pi, RestOfInitIDPayload)\n\
    \   The responder's signed octets can be described as:\n       ResponderSignedOctets\
    \ = RealMessage2 | NonceIData | MACedIDForR\n       GenIKEHDR = [ four octets\
    \ 0 if using port 4500 ] | RealIKEHDR\n       RealIKEHDR =  SPIi | SPIr |  . .\
    \ . | Length\n       RealMessage2 = RealIKEHDR | RestOfMessage2\n       NonceIPayload\
    \ = PayloadHeader | NonceIData\n       ResponderIDPayload = PayloadHeader | RestOfIDPayload\n\
    \       RestOfRespIDPayload = IDType | RESERVED | InitIDData\n       MACedIDForR\
    \ = prf(SK_pr, RestOfRespIDPayload)\n"
- title: 3.2.  Hash Function for RSA Signatures
  contents:
  - "3.2.  Hash Function for RSA Signatures\n   Section 3.8 says that RSA digital\
    \ signature is \"Computed as specified\n   in section 2.15 using an RSA private\
    \ key over a PKCS#1 padded hash.\"\n   Unlike IKEv1, IKEv2 does not negotiate\
    \ a hash function for the\n   IKE_SA.  The algorithm for signatures is selected\
    \ by the signing\n   party who, in general, may not know beforehand what algorithms\
    \ the\n   verifying party supports.  Furthermore, [IKEv2ALG] does not say what\n\
    \   algorithms implementations are required or recommended to support.\n   This\
    \ clearly has a potential for causing interoperability problems,\n   since authentication\
    \ will fail if the signing party selects an\n   algorithm that is not supported\
    \ by the verifying party, or not\n   acceptable according to the verifying party's\
    \ policy.\n   This document recommends that all implementations support SHA-1\
    \ and\n   use SHA-1 as the default hash function when generating the\n   signatures,\
    \ unless there are good reasons (such as explicit manual\n   configuration) to\
    \ believe that the peer supports something else.\n   Note that hash function collision\
    \ attacks are not important for the\n   AUTH payloads, since they are not intended\
    \ for third-party\n   verification, and the data includes fresh nonces.  See [HashUse]\
    \ for\n   more discussion about hash function attacks and IPsec.\n   Another reasonable\
    \ choice would be to use the hash function that was\n   used by the CA when signing\
    \ the peer certificate.  However, this does\n   not guarantee that the IKEv2 peer\
    \ would be able to validate the AUTH\n   payload, because the same code might\
    \ not be used to validate\n   certificate signatures and IKEv2 message signatures,\
    \ and these two\n   routines may support a different set of hash algorithms. \
    \ The peer\n   could be configured with a fingerprint of the certificate, or\n\
    \   certificate validation could be performed by an external entity using\n  \
    \ [SCVP].  Furthermore, not all CERT payloads types include a\n   signature, and\
    \ the certificate could be signed with some algorithm\n   other than RSA.\n  \
    \ Note that unlike IKEv1, IKEv2 uses the PKCS#1 v1.5 [PKCS1v20]\n   signature\
    \ encoding method (see next section for details), which\n   includes the algorithm\
    \ identifier for the hash algorithm.  Thus, when\n   the verifying party receives\
    \ the AUTH payload it can at least\n   determine which hash function was used.\n\
    \   (References: Magnus Alstrom's mail \"RE:\", 2005-01-03.  Pasi Eronen's\n \
    \  reply, 2005-01-04.  Tero Kivinen's reply, 2005-01-04.  \"First draft\n   of\
    \ IKEv2.1\" thread, Dec 2005/Jan 2006.)\n"
- title: 3.3.  Encoding Method for RSA Signatures
  contents:
  - "3.3.  Encoding Method for RSA Signatures\n   Section 3.8 says that the RSA digital\
    \ signature is \"Computed as\n   specified in section 2.15 using an RSA private\
    \ key over a PKCS#1\n   padded hash.\"\n   The PKCS#1 specification [PKCS1v21]\
    \ defines two different encoding\n   methods (ways of \"padding the hash\") for\
    \ signatures.  However, the\n   Internet-Draft approved by the IESG had a reference\
    \ to the older\n   PKCS#1 v2.0 [PKCS1v20].  That version has only one encoding\
    \ method\n   for signatures (EMSA-PKCS1-v1_5), and thus there is no ambiguity.\n\
    \   Note that this encoding method is different from the encoding method\n   used\
    \ in IKEv1.  If future revisions of IKEv2 provide support for\n   other encoding\
    \ methods (such as EMSA-PSS), they will be given new\n   Auth Method numbers.\n\
    \   (References: Pasi Eronen's mail \"RE:\", 2005-01-04.)\n"
- title: 3.4.  Identification Type for EAP
  contents:
  - "3.4.  Identification Type for EAP\n   Section 3.5 defines several different types\
    \ for identification\n   payloads, including, e.g., ID_FQDN, ID_RFC822_ADDR, and\
    \ ID_KEY_ID.\n   EAP [EAP] does not mandate the use of any particular type of\n\
    \   identifier, but often EAP is used with Network Access Identifiers\n   (NAIs)\
    \ defined in [NAI].  Although NAIs look a bit like email\n   addresses (e.g.,\
    \ \"joe@example.com\"), the syntax is not exactly the\n   same as the syntax of\
    \ email address in [RFC822].  This raises the\n   question of which identification\
    \ type should be used.\n   This document recommends that ID_RFC822_ADDR identification\
    \ type is\n   used for those NAIs that include the realm component.  Therefore,\n\
    \   responder implementations should not attempt to verify that the\n   contents\
    \ actually conform to the exact syntax given in [RFC822] or\n   [RFC2822], but\
    \ instead should accept any reasonable looking NAI.\n   For NAIs that do not include\
    \ the realm component, this document\n   recommends using the ID_KEY_ID identification\
    \ type.\n   (References: \"need your help on this IKEv2/i18n/EAP issue\" and \"\
    IKEv2\n   identifier issue with EAP\" threads, Aug 2004.)\n"
- title: 3.5.  Identity for Policy Lookups When Using EAP
  contents:
  - "3.5.  Identity for Policy Lookups When Using EAP\n   When the initiator authentication\
    \ uses EAP, it is possible that the\n   contents of the IDi payload is used only\
    \ for AAA routing purposes and\n   selecting which EAP method to use.  This value\
    \ may be different from\n   the identity authenticated by the EAP method (see\
    \ [EAP], Sections 5.1\n   and 7.3).\n   It is important that policy lookups and\
    \ access control decisions use\n   the actual authenticated identity.  Often the\
    \ EAP server is\n   implemented in a separate AAA server that communicates with\
    \ the IKEv2\n   responder using, e.g., RADIUS [RADEAP].  In this case, the\n \
    \  authenticated identity has to be sent from the AAA server to the\n   IKEv2\
    \ responder.\n   (References: Pasi Eronen's mail \"RE: Reauthentication in IKEv2\"\
    ,\n   2004-10-28.  \"Policy lookups\" thread, Oct/Nov 2004.  RFC 3748,\n   Section\
    \ 7.3.)\n"
- title: 3.6.  Certificate Encoding Types
  contents:
  - "3.6.  Certificate Encoding Types\n   Section 3.6 defines a total of twelve different\
    \ certificate encoding\n   types, and continues that \"Specific syntax is for\
    \ some of the\n   certificate type codes above is not defined in this document.\"\
    \n   However, the text does not provide references to other documents that\n \
    \  would contain information about the exact contents and use of those\n   values.\n\
    \   Without this information, it is not possible to develop interoperable\n  \
    \ implementations.  Therefore, this document recommends that the\n   following\
    \ certificate encoding values should not be used before new\n   specifications\
    \ that specify their use are available.\n        PKCS #7 wrapped X.509 certificate\
    \    1\n        PGP Certificate                      2\n        DNS Signed Key\
    \                       3\n        Kerberos Token                       6\n  \
    \      SPKI Certificate                     9\n   This document recommends that\
    \ most implementations should use only\n   those values that are \"MUST\"/\"SHOULD\"\
    \ requirements in [IKEv2]; i.e.,\n   \"X.509 Certificate - Signature\" (4), \"\
    Raw RSA Key\" (11), \"Hash and\n   URL of X.509 certificate\" (12), and \"Hash\
    \ and URL of X.509 bundle\"\n   (13).\n   Furthermore, Section 3.7 says that the\
    \ \"Certificate Encoding\" field\n   for the Certificate Request payload uses\
    \ the same values as for\n   Certificate payload.  However, the contents of the\
    \ \"Certification\n   Authority\" field are defined only for X.509 certificates\
    \ (presumably\n   covering at least types 4, 10, 12, and 13).  This document recommends\n\
    \   that other values should not be used before new specifications that\n   specify\
    \ their use are available.\n   The \"Raw RSA Key\" type needs one additional clarification.\
    \  Section\n   3.6 says it contains \"a PKCS #1 encoded RSA key\".  What this\
    \ means is\n   a DER-encoded RSAPublicKey structure from PKCS#1 [PKCS1v21].\n"
- title: 3.7.  Shared Key Authentication and Fixed PRF Key Size
  contents:
  - "3.7.  Shared Key Authentication and Fixed PRF Key Size\n   Section 2.15 says\
    \ that \"If the negotiated prf takes a fixed-size key,\n   the shared secret MUST\
    \ be of that fixed size\".  This statement is\n   correct: the shared secret must\
    \ be of the correct size.  If it is\n   not, it cannot be used; there is no padding,\
    \ truncation, or other\n   processing involved to force it to that correct size.\n\
    \   This requirement means that it is difficult to use these pseudo-\n   random\
    \ functions (PRFs) with shared key authentication.  The authors\n   think this\
    \ part of the specification was very poorly thought out, and\n   using PRFs with\
    \ a fixed key size is likely to result in\n   interoperability problems.  Thus,\
    \ we recommend that such PRFs should\n   not be used with shared key authentication.\
    \  PRF_AES128_XCBC\n   [RFC3664] originally used fixed key sizes; that RFC has\
    \ been updated\n   to handle variable key sizes in [RFC4434].\n   Note that Section\
    \ 2.13 also contains text that is related to PRFs\n   with fixed key size: \"\
    When the key for the prf function has fixed\n   length, the data provided as a\
    \ key is truncated or padded with zeros\n   as necessary unless exceptional processing\
    \ is explained following the\n   formula\".  However, this text applies only to\
    \ the prf+ construction,\n   so it does not contradict the text in Section 2.15.\n\
    \   (References: Paul Hoffman's mail \"Re: ikev2-07: last nits\",\n   2003-05-02.\
    \  Hugo Krawczyk's reply, 2003-05-12.  Thread \"Question\n   about PRFs with fixed\
    \ size key\", Jan 2005.)\n"
- title: 3.8.  EAP Authentication and Fixed PRF Key Size
  contents:
  - "3.8.  EAP Authentication and Fixed PRF Key Size\n   As described in the previous\
    \ section, PRFs with a fixed key size\n   require a shared secret of exactly that\
    \ size.  This restriction\n   applies also to EAP authentication.  For instance,\
    \ a PRF that\n   requires a 128-bit key cannot be used with EAP since [EAP] specifies\n\
    \   that the MSK is at least 512 bits long.\n   (References: Thread \"Question\
    \ about PRFs with fixed size key\", Jan\n   2005.)\n"
- title: 3.9.  Matching ID Payloads to Certificate Contents
  contents:
  - "3.9.  Matching ID Payloads to Certificate Contents\n   In IKEv1, there was some\
    \ confusion about whether or not the\n   identities in certificates used to authenticate\
    \ IKE were required to\n   match the contents of the ID payloads.  The PKI4IPsec\
    \ Working Group\n   produced the document [PKI4IPsec] which covers this topic\
    \ in much\n   more detail.  However, Section 3.5 of [IKEv2] explicitly says that\n\
    \   the ID payload \"does not necessarily have to match anything in the\n   CERT\
    \ payload\".\n"
- title: 3.10.  Message IDs for IKE_AUTH Messages
  contents:
  - "3.10.  Message IDs for IKE_AUTH Messages\n   According to Section 2.2, \"The\
    \ IKE_SA initial setup messages will\n   always be numbered 0 and 1.\"  That is\
    \ true when the IKE_AUTH exchange\n   does not use EAP.  When EAP is used, each\
    \ pair of messages has their\n   message numbers incremented.  The first pair\
    \ of AUTH messages will\n   have an ID of 1, the second will be 2, and so on.\n\
    \   (References: \"Question about MsgID in AUTH exchange\" thread, April\n   2005.)\n"
- title: 4.  Creating CHILD_SAs
  contents:
  - '4.  Creating CHILD_SAs

    '
- title: 4.1.  Creating SAs with the CREATE_CHILD_SA Exchange
  contents:
  - "4.1.  Creating SAs with the CREATE_CHILD_SA Exchange\n   Section 1.3's organization\
    \ does not lead to clear understanding of\n   what is needed in which environment.\
    \  The section can be reorganized\n   with subsections for each use of the CREATE_CHILD_SA\
    \ exchange\n   (creating child SAs, rekeying IKE SAs, and rekeying child SAs.)\n\
    \   The new Section 1.3 with subsections and the above changes might look\n  \
    \ like the following.\n   NEW-1.3 The CREATE_CHILD_SA Exchange\n        The CREATE_CHILD_SA\
    \ Exchange is used to create new CHILD_SAs and\n        to rekey both IKE_SAs\
    \ and CHILD_SAs.  This exchange consists of\n        a single request/response\
    \ pair, and some of its function was\n        referred to as a phase 2 exchange\
    \ in IKEv1.  It MAY be initiated\n        by either end of the IKE_SA after the\
    \ initial exchanges are\n        completed.\n        All messages following the\
    \ initial exchange are\n        cryptographically protected using the cryptographic\
    \ algorithms\n        and keys negotiated in the first two messages of the IKE\n\
    \        exchange.  These subsequent messages use the syntax of the\n        Encrypted\
    \ Payload described in section 3.14.  All subsequent\n        messages include\
    \ an Encrypted Payload, even if they are referred\n        to in the text as \"\
    empty\".\n        The CREATE_CHILD_SA is used for rekeying IKE_SAs and CHILD_SAs.\n\
    \        This section describes the first part of rekeying, the creation\n   \
    \     of new SAs; Section 2.8 covers the mechanics of rekeying,\n        including\
    \ moving traffic from old to new SAs and the deletion of\n        the old SAs.\
    \  The two sections must be read together to\n        understand the entire process\
    \ of rekeying.\n        Either endpoint may initiate a CREATE_CHILD_SA exchange,\
    \ so in\n        this section the term initiator refers to the endpoint\n    \
    \    initiating this exchange.  An implementation MAY refuse all\n        CREATE_CHILD_SA\
    \ requests within an IKE_SA.\n        The CREATE_CHILD_SA request MAY optionally\
    \ contain a KE payload\n        for an additional Diffie-Hellman exchange to enable\
    \ stronger\n        guarantees of forward secrecy for the CHILD_SA or IKE_SA.\
    \  The\n        keying material for the SA is a function of SK_d established\n\
    \        during the establishment of the IKE_SA, the nonces exchanged\n      \
    \  during the CREATE_CHILD_SA exchange, and the Diffie-Hellman\n        value\
    \ (if KE payloads are included in the CREATE_CHILD_SA\n        exchange).  The\
    \ details are described in sections 2.17 and 2.18.\n        If a CREATE_CHILD_SA\
    \ exchange includes a KEi payload, at least\n        one of the SA offers MUST\
    \ include the Diffie-Hellman group of\n        the KEi.  The Diffie-Hellman group\
    \ of the KEi MUST be an element\n        of the group the initiator expects the\
    \ responder to accept\n        (additional Diffie-Hellman groups can be proposed).\
    \  If the\n        responder rejects the Diffie-Hellman group of the KEi payload,\n\
    \        the responder MUST reject the request and indicate its preferred\n  \
    \      Diffie-Hellman group in the INVALID_KE_PAYLOAD Notification\n        payload.\
    \  In the case of such a rejection, the CREATE_CHILD_SA\n        exchange fails,\
    \ and the initiator SHOULD retry the exchange with\n        a Diffie-Hellman proposal\
    \ and KEi in the group that the\n        responder gave in the INVALID_KE_PAYLOAD.\n\
    \   NEW-1.3.1 Creating New CHILD_SAs with the CREATE_CHILD_SA Exchange\n     \
    \   A CHILD_SA may be created by sending a CREATE_CHILD_SA request.\n        The\
    \ CREATE_CHILD_SA request for creating a new CHILD_SA is:\n            Initiator\
    \                                 Responder\n           -----------          \
    \                     -----------\n            HDR, SK {[N+], SA, Ni, [KEi],\n\
    \                       TSi, TSr}        -->\n        The initiator sends SA offer(s)\
    \ in the SA payload, a nonce in\n        the Ni payload, optionally a Diffie-Hellman\
    \ value in the KEi\n        payload, and the proposed traffic selectors for the\
    \ proposed\n        CHILD_SA in the TSi and TSr payloads.  The request can also\n\
    \        contain Notify payloads that specify additional details for the\n   \
    \     CHILD_SA: these include IPCOMP_SUPPORTED, USE_TRANSPORT_MODE,\n        ESP_TFC_PADDING_NOT_SUPPORTED,\
    \ and NON_FIRST_FRAGMENTS_ALSO.\n        The CREATE_CHILD_SA response for creating\
    \ a new CHILD_SA is:\n                                       <--    HDR, SK {[N+],\
    \ SA, Nr,\n                                                    [KEr], TSi, TSr}\n\
    \        The responder replies with the accepted offer in an SA payload,\n   \
    \     and a Diffie-Hellman value in the KEr payload if KEi was\n        included\
    \ in the request and the selected cryptographic suite\n        includes that group.\
    \  As with the request, optional Notification\n        payloads can specify additional\
    \ details for the CHILD_SA.\n        The traffic selectors for traffic to be sent\
    \ on that SA are\n        specified in the TS payloads in the response, which\
    \ may be a\n        subset of what the initiator of the CHILD_SA proposed.\n \
    \  The text about rekeying SAs can be found in Section 5.1 of this\n   document.\n"
- title: 4.2.  Creating an IKE_SA without a CHILD_SA
  contents:
  - "4.2.  Creating an IKE_SA without a CHILD_SA\n   CHILD_SAs can be created either\
    \ by being piggybacked on the IKE_AUTH\n   exchange, or using a separate CREATE_CHILD_SA\
    \ exchange.  The\n   specification is not clear about what happens if creating\
    \ the\n   CHILD_SA during the IKE_AUTH exchange fails for some reason.\n   Our\
    \ recommendation in this situation is that the IKE_SA is created as\n   usual.\
    \  This is also in line with how the CREATE_CHILD_SA exchange\n   works: a failure\
    \ to create a CHILD_SA does not close the IKE_SA.\n   The list of responses in\
    \ the IKE_AUTH exchange that do not prevent an\n   IKE_SA from being set up include\
    \ at least the following:\n   NO_PROPOSAL_CHOSEN, TS_UNACCEPTABLE, SINGLE_PAIR_REQUIRED,\n\
    \   INTERNAL_ADDRESS_FAILURE, and FAILED_CP_REQUIRED.\n   (References: \"Questions\
    \ about internal address\" thread, April 2005.)\n"
- title: 4.3.  Diffie-Hellman for First CHILD_SA
  contents:
  - "4.3.  Diffie-Hellman for First CHILD_SA\n   Section 1.2 shows that IKE_AUTH messages\
    \ do not contain KEi/KEr or\n   Ni/Nr payloads.  This implies that the SA payload\
    \ in IKE_AUTH\n   exchange cannot contain Transform Type 4 (Diffie-Hellman Group)\
    \ with\n   any other value than NONE.  Implementations should probably leave the\n\
    \   transform out entirely in this case.\n"
- title: 4.4.  Extended Sequence Numbers (ESN) Transform
  contents:
  - "4.4.  Extended Sequence Numbers (ESN) Transform\n   The description of the ESN\
    \ transform in Section 3.3 has be proved\n   difficult to understand.  The ESN\
    \ transform has the following\n   meaning:\n   o  A proposal containing one ESN\
    \ transform with value 0 means \"do not\n      use extended sequence numbers\"\
    .\n   o  A proposal containing one ESN transform with value 1 means \"use\n  \
    \    extended sequence numbers\".\n   o  A proposal containing two ESN transforms\
    \ with values 0 and 1 means\n      \"I support both normal and extended sequence\
    \ numbers, you choose\".\n      (Obviously this case is only allowed in requests;\
    \ the response\n      will contain only one ESN transform.)\n   In most cases,\
    \ the exchange initiator will include either the first\n   or third alternative\
    \ in its SA payload.  The second alternative is\n   rarely useful for the initiator:\
    \ it means that using normal sequence\n   numbers is not acceptable (so if the\
    \ responder does not support ESNs,\n   the exchange will fail with NO_PROPOSAL_CHOSEN).\n\
    \   Note that including the ESN transform is mandatory when creating\n   ESP/AH\
    \ SAs (it was optional in earlier drafts of the IKEv2\n   specification).\n  \
    \ (References: \"Technical change needed to IKEv2 before publication\",\n   \"\
    STRAW POLL: Dealing with the ESN negotiation interop issue in IKEv2\"\n   and\
    \ \"Results of straw poll regarding: IKEv2 interoperability issue\"\n   threads,\
    \ March-April 2005.)\n"
- title: 4.5.  Negotiation of ESP_TFC_PADDING_NOT_SUPPORTED
  contents:
  - "4.5.  Negotiation of ESP_TFC_PADDING_NOT_SUPPORTED\n   The description of ESP_TFC_PADDING_NOT_SUPPORTED\
    \ notification in\n   Section 3.10.1 says that \"This notification asserts that\
    \ the sending\n   endpoint will NOT accept packets that contain Flow Confidentiality\n\
    \   (TFC) padding\".\n   However, the text does not say in which messages this\
    \ notification\n   should be included, or whether the scope of this notification\
    \ is a\n   single CHILD_SA or all CHILD_SAs of the peer.\n   Our interpretation\
    \ is that the scope is a single CHILD_SA, and thus\n   this notification is included\
    \ in messages containing an SA payload\n   negotiating a CHILD_SA.  If neither\
    \ endpoint accepts TFC padding,\n   this notification will be included in both\
    \ the request proposing an\n   SA and the response accepting it.  If this notification\
    \ is included\n   in only one of the messages, TFC padding can still be sent in\
    \ one\n   direction.\n"
- title: 4.6.  Negotiation of NON_FIRST_FRAGMENTS_ALSO
  contents:
  - "4.6.  Negotiation of NON_FIRST_FRAGMENTS_ALSO\n   NON_FIRST_FRAGMENTS_ALSO notification\
    \ is described in Section 3.10.1\n   simply as \"Used for fragmentation control.\
    \  See [RFC4301] for\n   explanation.\"\n   [RFC4301] says \"Implementations that\
    \ will transmit non-initial\n   fragments on a tunnel mode SA that makes use of\
    \ non-trivial port (or\n   ICMP type/code or MH type) selectors MUST notify a\
    \ peer via the IKE\n   NOTIFY NON_FIRST_FRAGMENTS_ALSO payload.  The peer MUST\
    \ reject this\n   proposal if it will not accept non-initial fragments in this\
    \ context.\n   If an implementation does not successfully negotiate transmission\
    \ of\n   non-initial fragments for such an SA, it MUST NOT send such fragments\n\
    \   over the SA.\"\n   However, it is not clear exactly how the negotiation works.\
    \  Our\n   interpretation is that the negotiation works the same way as for\n\
    \   IPCOMP_SUPPORTED and USE_TRANSPORT_MODE: sending non-first fragments\n   is\
    \ enabled only if NON_FIRST_FRAGMENTS_ALSO notification is included\n   in both\
    \ the request proposing an SA and the response accepting it.\n   In other words,\
    \ if the peer \"rejects this proposal\", it only omits\n   NON_FIRST_FRAGMENTS_ALSO\
    \ notification from the response, but does not\n   reject the whole CHILD_SA creation.\n"
- title: 4.7.  Semantics of Complex Traffic Selector Payloads
  contents:
  - "4.7.  Semantics of Complex Traffic Selector Payloads\n   As described in Section\
    \ 3.13, the TSi/TSr payloads can include one or\n   more individual traffic selectors.\n\
    \   There is no requirement that TSi and TSr contain the same number of\n   individual\
    \ traffic selectors.  Thus, they are interpreted as follows:\n   a packet matches\
    \ a given TSi/TSr if it matches at least one of the\n   individual selectors in\
    \ TSi, and at least one of the individual\n   selectors in TSr.\n   For instance,\
    \ the following traffic selectors:\n        TSi = ((17, 100, 192.0.1.66-192.0.1.66),\n\
    \               (17, 200, 192.0.1.66-192.0.1.66))\n        TSr = ((17, 300, 0.0.0.0-255.255.255.255),\n\
    \               (17, 400, 0.0.0.0-255.255.255.255))\n   would match UDP packets\
    \ from 192.0.1.66 to anywhere, with any of the\n   four combinations of source/destination\
    \ ports (100,300), (100,400),\n   (200,300), and (200, 400).\n   This implies\
    \ that some types of policies may require several CHILD_SA\n   pairs.  For instance,\
    \ a policy matching only source/destination ports\n   (100,300) and (200,400),\
    \ but not the other two combinations, cannot\n   be negotiated as a single CHILD_SA\
    \ pair using IKEv2.\n   (References: \"IKEv2 Traffic Selectors?\" thread, Feb\
    \ 2005.)\n"
- title: 4.8.  ICMP Type/Code in Traffic Selector Payloads
  contents:
  - "4.8.  ICMP Type/Code in Traffic Selector Payloads\n   The traffic selector types\
    \ 7 and 8 can also refer to ICMP type and\n   code fields.  As described in Section\
    \ 3.13.1, \"For the ICMP protocol,\n   the two one-octet fields Type and Code\
    \ are treated as a single 16-bit\n   integer (with Type in the most significant\
    \ eight bits and Code in the\n   least significant eight bits) port number for\
    \ the purposes of\n   filtering based on this field.\"\n   Since ICMP packets\
    \ do not have separate source and destination port\n   fields, there is some room\
    \ for confusion what exactly the four TS\n   payloads (two in the request, two\
    \ in the response, each containing\n   both start and end port fields) should\
    \ contain.\n   The answer to this question can be found from [RFC4301] Section\n\
    \   4.4.1.3.\n   To give a concrete example, if a host at 192.0.1.234 wants to\
    \ create\n   a transport mode SA for sending \"Destination Unreachable\" packets\n\
    \   (ICMPv4 type 3) to 192.0.2.155, but is not willing to receive them\n   over\
    \ this SA pair, the CREATE_CHILD_SA exchange would look like this:\n      Initiator\
    \                   Responder\n     -----------                 -----------\n\
    \      HDR, SK { N(USE_TRANSPORT_MODE), SA, Ni,\n                TSi(1, 0x0300-0x03FF,\
    \ 192.0.1.234-192.0.1.234),\n                TSr(1, 65535-0, 192.0.2.155-192.0.2.155)\
    \ } -->\n         <-- HDR, SK { N(USE_TRANSPORT_MODE), SA, Nr,\n             \
    \          TSi(1, 0x0300-0x03FF, 192.0.1.234-192.0.1.234),\n                 \
    \      TSr(1, 65535-0, 192.0.2.155-192.0.2.155) }\n   Since IKEv2 always creates\
    \ IPsec SAs in pairs, two SAs are also\n   created in this case, even though the\
    \ second SA is never used for\n   data traffic.\n   An exchange creating an SA\
    \ pair that can be used both for sending and\n   receiving \"Destination Unreachable\"\
    \ places the same value in all the\n   port:\n      Initiator                \
    \   Responder\n     -----------                 -----------\n      HDR, SK { N(USE_TRANSPORT_MODE),\
    \ SA, Ni,\n                TSi(1, 0x0300-0x03FF, 192.0.1.234-192.0.1.234),\n \
    \               TSr(1, 0x0300-0x03FF, 192.0.2.155-192.0.2.155) } -->\n       \
    \  <-- HDR, SK { N(USE_TRANSPORT_MODE), SA, Nr,\n                       TSi(1,\
    \ 0x0300-0x03FF, 192.0.1.234-192.0.1.234),\n                       TSr(1, 0x0300-0x03FF,\
    \ 192.0.2.155-192.0.2.155) }\n   (References: \"ICMP and MH TSs for IKEv2\" thread,\
    \ Sep 2005.)\n"
- title: 4.9.  Mobility Header in Traffic Selector Payloads
  contents:
  - "4.9.  Mobility Header in Traffic Selector Payloads\n   Traffic selectors can\
    \ use IP Protocol ID 135 to match the IPv6\n   mobility header [MIPv6].  However,\
    \ the IKEv2 specification does not\n   define how to represent the \"MH Type\"\
    \ field in traffic selectors.\n   At some point, it was expected that this will\
    \ be defined in a\n   separate document later.  However, [RFC4301] says that \"\
    For IKE, the\n   IPv6 mobility header message type (MH type) is placed in the\
    \ most\n   significant eight bits of the 16 bit local \"port\" selector\".  The\n\
    \   direction semantics of TSi/TSr port fields are the same as for ICMP\n   and\
    \ are described in the previous section.\n   (References: Tero Kivinen's mail\
    \ \"Issue #86: Add IPv6 mobility header\n   message type as selector\", 2003-10-14.\
    \  \"ICMP and MH TSs for IKEv2\"\n   thread, Sep 2005.)\n"
- title: 4.10.  Narrowing the Traffic Selectors
  contents:
  - "4.10.  Narrowing the Traffic Selectors\n   Section 2.9 describes how traffic\
    \ selectors are negotiated when\n   creating a CHILD_SA.  A more concise summary\
    \ of the narrowing process\n   is presented below.\n   o  If the responder's policy\
    \ does not allow any part of the traffic\n      covered by TSi/TSr, it responds\
    \ with TS_UNACCEPTABLE.\n   o  If the responder's policy allows the entire set\
    \ of traffic covered\n      by TSi/TSr, no narrowing is necessary, and the responder\
    \ can\n      return the same TSi/TSr values.\n   o  Otherwise, narrowing is needed.\
    \  If the responder's policy allows\n      all traffic covered by TSi[1]/TSr[1]\
    \ (the first traffic selectors\n      in TSi/TSr) but not entire TSi/TSr, the\
    \ responder narrows to an\n      acceptable subset of TSi/TSr that includes TSi[1]/TSr[1].\n\
    \   o  If the responder's policy does not allow all traffic covered by\n     \
    \ TSi[1]/TSr[1], but does allow some parts of TSi/TSr, it narrows to\n      an\
    \ acceptable subset of TSi/TSr.\n   In the last two cases, there may be several\
    \ subsets that are\n   acceptable (but their union is not); in this case, the\
    \ responder\n   arbitrarily chooses one of them and includes ADDITIONAL_TS_POSSIBLE\n\
    \   notification in the response.\n"
- title: 4.11.  SINGLE_PAIR_REQUIRED
  contents:
  - "4.11.  SINGLE_PAIR_REQUIRED\n   The description of the SINGLE_PAIR_REQUIRED notify\
    \ payload in\n   Sections 2.9 and 3.10.1 is not fully consistent.\n   We do not\
    \ attempt to describe this payload in this document either,\n   since it is expected\
    \ that most implementations will not have policies\n   that require separate SAs\
    \ for each address pair.\n   Thus, if only some part (or parts) of the TSi/TSr\
    \ proposed by the\n   initiator is (are) acceptable to the responder, most responders\n\
    \   should simply narrow TSi/TSr to an acceptable subset (as described in\n  \
    \ the last two paragraphs of Section 2.9), rather than use\n   SINGLE_PAIR_REQUIRED.\n"
- title: 4.12.  Traffic Selectors Violating Own Policy
  contents:
  - "4.12.  Traffic Selectors Violating Own Policy\n   Section 2.9 describes traffic\
    \ selector negotiation in great detail.\n   One aspect of this negotiation that\
    \ may need some clarification is\n   that when creating a new SA, the initiator\
    \ should not propose traffic\n   selectors that violate its own policy.  If this\
    \ rule is not followed,\n   valid traffic may be dropped.\n   This is best illustrated\
    \ by an example.  Suppose that host A has a\n   policy whose effect is that traffic\
    \ to 192.0.1.66 is sent via host B\n   encrypted using Advanced Encryption Standard\
    \ (AES), and traffic to\n   all other hosts in 192.0.1.0/24 is also sent via B,\
    \ but encrypted\n   using Triple Data Encryption Standard (3DES).  Suppose also\
    \ that host\n   B accepts any combination of AES and 3DES.\n   If host A now proposes\
    \ an SA that uses 3DES, and includes TSr\n   containing (192.0.1.0-192.0.1.0.255),\
    \ this will be accepted by host\n   B.  Now, host B can also use this SA to send\
    \ traffic from 192.0.1.66,\n   but those packets will be dropped by A since it\
    \ requires the use of\n   AES for those traffic.  Even if host A creates a new\
    \ SA only for\n   192.0.1.66 that uses AES, host B may freely continue to use\
    \ the first\n   SA for the traffic.  In this situation, when proposing the SA,\
    \ host A\n   should have followed its own policy, and included a TSr containing\n\
    \   ((192.0.1.0-192.0.1.65),(192.0.1.67-192.0.1.255)) instead.\n   In general,\
    \ if (1) the initiator makes a proposal \"for traffic X\n   (TSi/TSr), do SA\"\
    , and (2) for some subset X' of X, the initiator\n   does not actually accept\
    \ traffic X' with SA, and (3) the initiator\n   would be willing to accept traffic\
    \ X' with some SA' (!=SA), valid\n   traffic can be unnecessarily dropped since\
    \ the responder can apply\n   either SA or SA' to traffic X'.\n   (References:\
    \ \"Question about \"narrowing\" ...\" thread, Feb 2005.\n   \"IKEv2 needs a \"\
    policy usage mode\"...\" thread, Feb 2005.  \"IKEv2\n   Traffic Selectors?\" thread,\
    \ Feb 2005.  \"IKEv2 traffic selector\n   negotiation examples\", 2004-08-08.)\n"
- title: 4.13.  Traffic Selector Authorization
  contents:
  - "4.13.  Traffic Selector Authorization\n   IKEv2 relies on information in the\
    \ Peer Authorization Database (PAD)\n   when determining what kind of IPsec SAs\
    \ a peer is allowed to create.\n   This process is described in [RFC4301] Section\
    \ 4.4.3.  When a peer\n   requests the creation of an IPsec SA with some traffic\
    \ selectors, the\n   PAD must contain \"Child SA Authorization Data\" linking\
    \ the identity\n   authenticated by IKEv2 and the addresses permitted for traffic\n\
    \   selectors.\n   For example, the PAD might be configured so that authenticated\n\
    \   identity \"sgw23.example.com\" is allowed to create IPsec SAs for\n   192.0.2.0/24,\
    \ meaning this security gateway is a valid\n   \"representative\" for these addresses.\
    \  Host-to-host IPsec requires\n   similar entries, linking, for example, \"fooserver4.example.com\"\
    \ with\n   192.0.1.66/32, meaning this identity a valid \"owner\" or\n   \"representative\"\
    \ of the address in question.\n   As noted in [RFC4301], \"It is necessary to\
    \ impose these constraints\n   on creation of child SAs to prevent an authenticated\
    \ peer from\n   spoofing IDs associated with other, legitimate peers.\"  In the\n\
    \   example given above, a correct configuration of the PAD prevents\n   sgw23\
    \ from creating IPsec SAs with address 192.0.1.66 and prevents\n   fooserver4\
    \ from creating IPsec SAs with addresses from 192.0.2.0/24.\n   It is important\
    \ to note that simply sending IKEv2 packets using some\n   particular address\
    \ does not imply a permission to create IPsec SAs\n   with that address in the\
    \ traffic selectors.  For example, even if\n   sgw23 would be able to spoof its\
    \ IP address as 192.0.1.66, it could\n   not create IPsec SAs matching fooserver4's\
    \ traffic.\n   The IKEv2 specification does not specify how exactly IP address\n\
    \   assignment using configuration payloads interacts with the PAD.  Our\n   interpretation\
    \ is that when a security gateway assigns an address\n   using configuration payloads,\
    \ it also creates a temporary PAD entry\n   linking the authenticated peer identity\
    \ and the newly allocated inner\n   address.\n   It has been recognized that configuring\
    \ the PAD correctly may be\n   difficult in some environments.  For instance,\
    \ if IPsec is used\n   between a pair of hosts whose addresses are allocated dynamically\n\
    \   using Dynamic Host Configuration Protocol (DHCP), it is extremely\n   difficult\
    \ to ensure that the PAD specifies the correct \"owner\" for\n   each IP address.\
    \  This would require a mechanism to securely convey\n   address assignments from\
    \ the DHCP server and link them to identities\n   authenticated using IKEv2.\n\
    \   Due to this limitation, some vendors have been known to configure\n   their\
    \ PADs to allow an authenticated peer to create IPsec SAs with\n   traffic selectors\
    \ containing the same address that was used for the\n   IKEv2 packets.  In environments\
    \ where IP spoofing is possible (i.e.,\n   almost everywhere) this essentially\
    \ allows any peer to create IPsec\n   SAs with any traffic selectors.  This is\
    \ not an appropriate or secure\n   configuration in most circumstances.  See [Aura05]\
    \ for an extensive\n   discussion about this issue, and the limitations of host-to-host\n\
    \   IPsec in general.\n"
- title: 5.  Rekeying and Deleting SAs
  contents:
  - '5.  Rekeying and Deleting SAs

    '
- title: 5.1.  Rekeying SAs with the CREATE_CHILD_SA Exchange
  contents:
  - "5.1.  Rekeying SAs with the CREATE_CHILD_SA Exchange\n   Continued from Section\
    \ 4.1 of this document.\n NEW-1.3.2 Rekeying IKE_SAs with the CREATE_CHILD_SA\
    \ Exchange\n      The CREATE_CHILD_SA request for rekeying an IKE_SA is:\n   \
    \       Initiator                                 Responder\n         -----------\
    \                               -----------\n          HDR, SK {SA, Ni, [KEi]}\
    \ -->\n      The initiator sends SA offer(s) in the SA payload, a nonce in\n \
    \     the Ni payload, and optionally a Diffie-Hellman value in the KEi\n     \
    \ payload.\n      The CREATE_CHILD_SA response for rekeying an IKE_SA is:\n  \
    \                                   <--    HDR, SK {SA, Nr, [KEr]}\n      The\
    \ responder replies (using the same Message ID to respond)\n      with the accepted\
    \ offer in an SA payload, a nonce in the Nr\n      payload, and, optionally, a\
    \ Diffie-Hellman value in the KEr\n      payload.\n      The new IKE_SA has its\
    \ message counters set to 0, regardless of\n      what they were in the earlier\
    \ IKE_SA.  The window size starts at\n      1 for any new IKE_SA.  The new initiator\
    \ and responder SPIs are\n      supplied in the SPI fields of the SA payloads.\n\
    \ NEW-1.3.3 Rekeying CHILD_SAs with the CREATE_CHILD_SA Exchange\n      The CREATE_CHILD_SA\
    \ request for rekeying a CHILD_SA is:\n          Initiator                   \
    \              Responder\n         -----------                               -----------\n\
    \          HDR, SK {N(REKEY_SA), [N+], SA,\n              Ni, [KEi], TSi, TSr}\
    \  -->\n      The leading Notify payload of type REKEY_SA identifies the\n   \
    \   CHILD_SA being rekeyed, and it contains the SPI that the initiator\n     \
    \ expects in the headers of inbound packets.  In addition, the\n      initiator\
    \ sends SA offer(s) in the SA payload, a nonce in the Ni\n      payload, optionally\
    \ a Diffie-Hellman value in the KEi payload,\n      and the proposed traffic selectors\
    \ in the TSi and TSr payloads.\n      The request can also contain Notify payloads\
    \ that specify\n      additional details for the CHILD_SA.\n      The CREATE_CHILD_SA\
    \ response for rekeying a CHILD_SA is:\n                                     <--\
    \    HDR, SK {[N+], SA, Nr,\n                                                \
    \  [KEr], TSi, TSr}\n      The responder replies with the accepted offer in an\
    \ SA payload,\n      and a Diffie-Hellman value in the KEr payload if KEi was\n\
    \      included in the request and the selected cryptographic suite\n      includes\
    \ that group.\n      The traffic selectors for traffic to be sent on that SA are\n\
    \      specified in the TS payloads in the response, which may be a\n      subset\
    \ of what the initiator of the CHILD_SA proposed.\n"
- title: 5.2.  Rekeying the IKE_SA vs. Reauthentication
  contents:
  - "5.2.  Rekeying the IKE_SA vs. Reauthentication\n   Rekeying the IKE_SA and reauthentication\
    \ are different concepts in\n   IKEv2.  Rekeying the IKE_SA establishes new keys\
    \ for the IKE_SA and\n   resets the Message ID counters, but it does not authenticate\
    \ the\n   parties again (no AUTH or EAP payloads are involved).\n   While rekeying\
    \ the IKE_SA may be important in some environments,\n   reauthentication (the\
    \ verification that the parties still have access\n   to the long-term credentials)\
    \ is often more important.\n   IKEv2 does not have any special support for reauthentication.\n\
    \   Reauthentication is done by creating a new IKE_SA from scratch (using\n  \
    \ IKE_SA_INIT/IKE_AUTH exchanges, without any REKEY_SA notify\n   payloads), creating\
    \ new CHILD_SAs within the new IKE_SA (without\n   REKEY_SA notify payloads),\
    \ and finally deleting the old IKE_SA (which\n   deletes the old CHILD_SAs as\
    \ well).\n   This means that reauthentication also establishes new keys for the\n\
    \   IKE_SA and CHILD_SAs.  Therefore, while rekeying can be performed\n   more\
    \ often than reauthentication, the situation where \"authentication\n   lifetime\"\
    \ is shorter than \"key lifetime\" does not make sense.\n   While creation of\
    \ a new IKE_SA can be initiated by either party\n   (initiator or responder in\
    \ the original IKE_SA), the use of EAP\n   authentication and/or configuration\
    \ payloads means in practice that\n   reauthentication has to be initiated by\
    \ the same party as the\n   original IKE_SA.  IKEv2 base specification does not\
    \ allow the\n   responder to request reauthentication in this case; however, this\n\
    \   functionality is added in [ReAuth].\n   (References: \"Reauthentication in\
    \ IKEv2\" thread, Oct/Nov 2004.)\n"
- title: 5.3.  SPIs When Rekeying the IKE_SA
  contents:
  - "5.3.  SPIs When Rekeying the IKE_SA\n   Section 2.18 says that \"New initiator\
    \ and responder SPIs are supplied\n   in the SPI fields\".  This refers to the\
    \ SPI fields in the Proposal\n   structures inside the Security Association (SA)\
    \ payloads, not the SPI\n   fields in the IKE header.\n   (References: Tom Stiemerling's\
    \ mail \"Rekey IKE SA\", 2005-01-24.\n   Geoffrey Huang's reply, 2005-01-24.)\n"
- title: 5.4.  SPI When Rekeying a CHILD_SA
  contents:
  - "5.4.  SPI When Rekeying a CHILD_SA\n   Section 3.10.1 says that in REKEY_SA notifications,\
    \ \"The SPI field\n   identifies the SA being rekeyed.\"\n   Since CHILD_SAs always\
    \ exist in pairs, there are two different SPIs.\n   The SPI placed in the REKEY_SA\
    \ notification is the SPI the exchange\n   initiator would expect in inbound ESP\
    \ or AH packets (just as in\n   Delete payloads).\n"
- title: 5.5.  Changing PRFs When Rekeying the IKE_SA
  contents:
  - "5.5.  Changing PRFs When Rekeying the IKE_SA\n   When rekeying the IKE_SA, Section\
    \ 2.18 says that \"SKEYSEED for the\n   new IKE_SA is computed using SK_d from\
    \ the existing IKE_SA as\n   follows:\n      SKEYSEED = prf(SK_d (old), [g^ir\
    \ (new)] | Ni | Nr)\"\n   If the old and new IKE_SA selected a different PRF,\
    \ it is not totally\n   clear which PRF should be used.\n   Since the rekeying\
    \ exchange belongs to the old IKE_SA, it is the old\n   IKE_SA's PRF that is used.\
    \  This also follows the principle that the\n   same key (the old SK_d) should\
    \ not be used with multiple\n   cryptographic algorithms.\n   Note that this may\
    \ work poorly if the new IKE_SA's PRF has a fixed\n   key size, since the output\
    \ of the PRF may not be of the correct size.\n   This supports our opinion earlier\
    \ in the document that the use of\n   PRFs with a fixed key size is a bad idea.\n\
    \   (References: \"Changing PRFs when rekeying the IKE_SA\" thread, June\n   2005.)\n"
- title: 5.6.  Deleting vs. Closing SAs
  contents:
  - "5.6.  Deleting vs. Closing SAs\n   The IKEv2 specification talks about \"closing\"\
    \ and \"deleting\" SAs, but\n   it is not always clear what exactly is meant.\
    \  However, other parts\n   of the specification make it clear that when local\
    \ state related to a\n   CHILD_SA is removed, the SA must also be actively deleted\
    \ with a\n   Delete payload.\n   In particular, Section 2.4 says that \"If an\
    \ IKE endpoint chooses to\n   delete CHILD_SAs, it MUST send Delete payloads to\
    \ the other end\n   notifying it of the deletion\".  Section 1.4 also explains\
    \ that \"ESP\n   and AH SAs always exist in pairs, with one SA in each direction.\n\
    \   When an SA is closed, both members of the pair MUST be closed.\"\n"
- title: 5.7.  Deleting a CHILD_SA Pair
  contents:
  - "5.7.  Deleting a CHILD_SA Pair\n   Section 1.4 describes how to delete SA pairs\
    \ using the Informational\n   exchange: \"To delete an SA, an INFORMATIONAL exchange\
    \ with one or\n   more delete payloads is sent listing the SPIs (as they would\
    \ be\n   expected in the headers of inbound packets) of the SAs to be deleted.\n\
    \   The recipient MUST close the designated SAs.\"\n   The \"one or more delete\
    \ payloads\" phrase has caused some confusion.\n   You never send delete payloads\
    \ for the two sides of an SA in a single\n   message.  If you have many SAs to\
    \ delete at the same time (such as\n   the nested example given in that paragraph),\
    \ you include delete\n   payloads for the inbound half of each SA in your Informational\n\
    \   exchange.\n"
- title: 5.8.  Deleting an IKE_SA
  contents:
  - "5.8.  Deleting an IKE_SA\n   Since IKE_SAs do not exist in pairs, it is not totally\
    \ clear what the\n   response message should contain when the request deleted\
    \ the IKE_SA.\n   Since there is no information that needs to be sent to the other\
    \ side\n   (except that the request was received), an empty Informational\n  \
    \ response seems like the most logical choice.\n   (References: \"Question about\
    \ delete IKE SA\" thread, May 2005.)\n"
- title: 5.9.  Who is the original initiator of IKE_SA
  contents:
  - "5.9.  Who is the original initiator of IKE_SA\n   In the IKEv2 document, \"initiator\"\
    \ refers to the party who initiated\n   the exchange being described, and \"original\
    \ initiator\" refers to the\n   party who initiated the whole IKE_SA.  However,\
    \ there is some\n   potential for confusion because the IKE_SA can be rekeyed\
    \ by either\n   party.\n   To clear up this confusion, we propose that \"original\
    \ initiator\"\n   always refers to the party who initiated the exchange that resulted\n\
    \   in the current IKE_SA.  In other words, if the \"original responder\"\n  \
    \ starts rekeying the IKE_SA, that party becomes the \"original\n   initiator\"\
    \ of the new IKE_SA.\n   (References: Paul Hoffman's mail \"Original initiator\
    \ in IKEv2\",\n   2005-04-21.)\n"
- title: 5.10.  Comparing Nonces
  contents:
  - "5.10.  Comparing Nonces\n   Section 2.8 about rekeying says that \"If redundant\
    \ SAs are created\n   though such a collision, the SA created with the lowest\
    \ of the four\n   nonces used in the two exchanges SHOULD be closed by the endpoint\n\
    \   that created it.\"\n   Here \"lowest\" uses an octet-by-octet (lexicographical)\
    \ comparison\n   (instead of, for instance, comparing the nonces as large integers).\n\
    \   In other words, start by comparing the first octet; if they're equal,\n  \
    \ move to the next octet, and so on.  If you reach the end of one\n   nonce, that\
    \ nonce is the lower one.\n   (References: \"IKEv2 rekeying question\" thread,\
    \ July 2005.)\n"
- title: 5.11.  Exchange Collisions
  contents:
  - "5.11.  Exchange Collisions\n   Since IKEv2 exchanges can be initiated by both\
    \ peers, it is possible\n   that two exchanges affecting the same SA partly overlap.\
    \  This can\n   lead to a situation where the SA state information is temporarily\
    \ not\n   synchronized, and a peer can receive a request it cannot process in\
    \ a\n   normal fashion.  Some of these corner cases are discussed in the\n   specification,\
    \ some are not.\n   Obviously, using a window size greater than one leads to infinitely\n\
    \   more complex situations, especially if requests are processed out of\n   order.\
    \  In this section, we concentrate on problems that can arise\n   even with window\
    \ size 1.\n   (References: \"IKEv2: invalid SPI in DELETE payload\" thread, Dec\
    \ 2005/\n   Jan 2006.  \"Problem with exchanges collisions\" thread, Dec 2005.)\n"
- title: 5.11.1.  Simultaneous CHILD_SA Close
  contents:
  - "5.11.1.  Simultaneous CHILD_SA Close\n   Probably the simplest case happens if\
    \ both peers decide to close the\n   same CHILD_SA pair at the same time:\n  \
    \    Host A                      Host B\n     --------                    --------\n\
    \      send req1: D(SPIa) -->\n                              <-- send req2: D(SPIb)\n\
    \                              --> recv req1\n                              <--\
    \ send resp1: ()\n      recv resp1\n      recv req2\n      send resp2: () -->\n\
    \                              --> recv resp2\n   This case is described in Section\
    \ 1.4 and is handled by omitting the\n   Delete payloads from the response messages.\n"
- title: 5.11.2.  Simultaneous IKE_SA Close
  contents:
  - "5.11.2.  Simultaneous IKE_SA Close\n   Both peers can also decide to close the\
    \ IKE_SA at the same time.  The\n   desired end result is obvious; however, in\
    \ certain cases the final\n   exchanges may not be fully completed.\n      Host\
    \ A                      Host B\n     --------                    --------\n \
    \     send req1: D() -->\n                              <-- send req2: D()\n \
    \                             --> recv req1\n   At this point, host B should reply\
    \ as usual (with empty Informational\n   response), close the IKE_SA, and stop\
    \ retransmitting req2.  This is\n   because once host A receives resp1, it may\
    \ not be able to reply any\n   longer.  The situation is symmetric, so host A\
    \ should behave the same\n   way.\n      Host A                      Host B\n\
    \     --------                    --------\n                              <--\
    \ send resp1: ()\n      send resp2: ()\n   Even if neither resp1 nor resp2 ever\
    \ arrives, the end result is still\n   correct: the IKE_SA is gone.  The same\
    \ happens if host A never\n   receives req2.\n"
- title: 5.11.3.  Simultaneous CHILD_SA Rekeying
  contents:
  - "5.11.3.  Simultaneous CHILD_SA Rekeying\n   Another case that is described in\
    \ the specification is simultaneous\n   rekeying.  Section 2.8 says\n      \"\
    If the two ends have the same lifetime policies, it is possible\n      that both\
    \ will initiate a rekeying at the same time (which will\n      result in redundant\
    \ SAs).  To reduce the probability of this\n      happening, the timing of rekeying\
    \ requests SHOULD be jittered\n      (delayed by a random amount of time after\
    \ the need for rekeying is\n      noticed).\n      This form of rekeying may temporarily\
    \ result in multiple similar\n      SAs between the same pairs of nodes.  When\
    \ there are two SAs\n      eligible to receive packets, a node MUST accept incoming\
    \ packets\n      through either SA.  If redundant SAs are created though such\
    \ a\n      collision, the SA created with the lowest of the four nonces used\n\
    \      in the two exchanges SHOULD be closed by the endpoint that created\n  \
    \    it.\"\n   However, a better explanation on what impact this has on\n   implementations\
    \ is needed.  Assume that hosts A and B have an\n   existing IPsec SA pair with\
    \ SPIs (SPIa1,SPIb1), and both start\n   rekeying it at the same time:\n     \
    \ Host A                      Host B\n     --------                    --------\n\
    \      send req1: N(REKEY_SA,SPIa1),\n         SA(..,SPIa2,..),Ni1,..  -->\n \
    \                             <-- send req2: N(REKEY_SA,SPIb1),\n            \
    \                         SA(..,SPIb2,..),Ni2,..\n      recv req2 <--\n   At this\
    \ point, A knows there is a simultaneous rekeying going on.\n   However, it cannot\
    \ yet know which of the exchanges will have the\n   lowest nonce, so it will just\
    \ note the situation and respond as\n   usual.\n      send resp2: SA(..,SPIa3,..),Nr1,..\
    \ -->\n                              --> recv req1\n   Now B also knows that simultaneous\
    \ rekeying is going on.  Similarly\n   as host A, it has to respond as usual.\n\
    \                              <-- send resp1: SA(..,SPIb3,..),Nr2,..\n      \
    \ recv resp1 <--\n                              --> recv resp2\n   At this point,\
    \ there are three CHILD_SA pairs between A and B (the\n   old one and two new\
    \ ones).  A and B can now compare the nonces.\n   Suppose that the lowest nonce\
    \ was Nr1 in message resp2; in this case,\n   B (the sender of req2) deletes the\
    \ redundant new SA, and A (the node\n   that initiated the surviving rekeyed SA)\
    \ deletes the old one.\n      send req3: D(SPIa1) -->\n                      \
    \        <-- send req4: D(SPIb2)\n                              --> recv req3\n\
    \                              <-- send resp4: D(SPIb1)\n      recv req4 <--\n\
    \      send resp4: D(SPIa3) -->\n   The rekeying is now finished.\n   However,\
    \ there is a second possible sequence of events that can\n   happen if some packets\
    \ are lost in the network, resulting in\n   retransmissions.  The rekeying begins\
    \ as usual, but A's first packet\n   (req1) is lost.\n      Host A           \
    \           Host B\n     --------                    --------\n      send req1:\
    \ N(REKEY_SA,SPIa1),\n         SA(..,SPIa2,..),Ni1,..  -->  (lost)\n         \
    \                     <-- send req2: N(REKEY_SA,SPIb1),\n                    \
    \                 SA(..,SPIb2,..),Ni2,..\n      recv req2 <--\n      send resp2:\
    \ SA(..,SPIa3,..),Nr1,.. -->\n                              --> recv resp2\n \
    \                             <-- send req3: D(SPIb1)\n      recv req3 <--\n \
    \     send resp3: D(SPIa1) -->\n                              --> recv resp3\n\
    \   From B's point of view, the rekeying is now completed, and since it\n   has\
    \ not yet received A's req1, it does not even know that these was\n   simultaneous\
    \ rekeying.  However, A will continue retransmitting the\n   message, and eventually\
    \ it will reach B.\n      resend req1 -->\n                               -->\
    \ recv req1\n   What should B do in this point?  To B, it looks like A is trying\
    \ to\n   rekey an SA that no longer exists; thus failing the request with\n  \
    \ something non-fatal such as NO_PROPOSAL_CHOSEN seems like a\n   reasonable approach.\n\
    \                               <-- send resp1: N(NO_PROPOSAL_CHOSEN)\n      recv\
    \ resp1 <--\n   When A receives this error, it already knows there was simultaneous\n\
    \   rekeying, so it can ignore the error message.\n"
- title: 5.11.4.  Simultaneous IKE_SA Rekeying
  contents:
  - "5.11.4.  Simultaneous IKE_SA Rekeying\n   Probably the most complex case occurs\
    \ when both peers try to rekey\n   the IKE_SA at the same time.  Basically, the\
    \ text in Section 2.8\n   applies to this case as well; however, it is important\
    \ to ensure that\n   the CHILD_SAs are inherited by the right IKE_SA.\n   The\
    \ case where both endpoints notice the simultaneous rekeying works\n   the same\
    \ way as with CHILD_SAs.  After the CREATE_CHILD_SA exchanges,\n   three IKE_SAs\
    \ exist between A and B; the one containing the lowest\n   nonce inherits the\
    \ CHILD_SAs.\n   However, there is a twist to the other case where one rekeying\n\
    \   finishes first:\n      Host A                      Host B\n     -------- \
    \                   --------\n      send req1:\n         SA(..,SPIa1,..),Ni1,..\
    \ -->\n                              <-- send req2: SA(..,SPIb1,..),Ni2,..\n \
    \                             --> recv req1\n                              <--\
    \ send resp1: SA(..,SPIb2,..),Nr2,..\n      recv resp1 <--\n      send req3: D()\
    \ -->\n                              --> recv req3\n   At this point, host B sees\
    \ a request to close the IKE_SA.  There's\n   not much more to do than to reply\
    \ as usual.  However, at this point\n   host B should stop retransmitting req2,\
    \ since once host A receives\n   resp3, it will delete all the state associated\
    \ with the old IKE_SA\n   and will not be able to reply to it.\n             \
    \                 <-- send resp3: ()\n"
- title: 5.11.5.  Closing and Rekeying a CHILD_SA
  contents:
  - "5.11.5.  Closing and Rekeying a CHILD_SA\n   A case similar to simultaneous rekeying\
    \ can occur if one peer decides\n   to close an SA and the other peer tries to\
    \ rekey it:\n      Host A                      Host B\n     --------         \
    \           --------\n      send req1: D(SPIa) -->\n                         \
    \     <-- send req2: N(REKEY_SA,SPIb),SA,..\n                              -->\
    \ recv req1\n   At this point, host B notices that host A is trying to close an\
    \ SA\n   that host B is currently rekeying.  Replying as usual is probably the\n\
    \   best choice:\n                              <-- send resp1: D(SPIb)\n   Depending\
    \ on in which order req2 and resp1 arrive, host A sees either\n   a request to\
    \ rekey an SA that it is currently closing, or a request\n   to rekey an SA that\
    \ does not exist.  In both cases,\n   NO_PROPOSAL_CHOSEN is probably fine.\n \
    \     recv req2\n      recv resp1\n      send resp2: N(NO_PROPOSAL_CHOSEN) -->\n\
    \                              --> recv resp2\n"
- title: 5.11.6.  Closing a New CHILD_SA
  contents:
  - "5.11.6.  Closing a New CHILD_SA\n   Yet another case occurs when host A creates\
    \ a CHILD_SA pair, but soon\n   thereafter host B decides to delete it (possible\
    \ because its policy\n   changed):\n      Host A                      Host B\n\
    \     --------                    --------\n      send req1: [N(REKEY_SA,SPIa1)],\n\
    \         SA(..,SPIa2,..),.. -->\n                              --> recv req1\n\
    \                       (lost) <-- send resp1: SA(..,SPIb2,..),..\n          \
    \                    <-- send req2: D(SPIb2)\n      recv req2\n   At this point,\
    \ host A has not yet received message resp1 (and is\n   retransmitting message\
    \ req1), so it does not recognize SPIb in\n   message req2.  What should host\
    \ A do?\n   One option would be to reply with an empty Informational response.\n\
    \   However, this same reply would also be sent if host A has received\n   resp1,\
    \ but has already sent a new request to delete the SA that was\n   just created.\
    \  This would lead to a situation where the peers are no\n   longer in sync about\
    \ which SAs exist between them.  However, host B\n   would eventually notice that\
    \ the other half of the CHILD_SA pair has\n   not been deleted.  Section 1.4 describes\
    \ this case and notes that \"a\n   node SHOULD regard half-closed connections\
    \ as anomalous and audit\n   their existence should they persist\", and continues\
    \ that \"if\n   connection state becomes sufficiently messed up, a node MAY close\
    \ the\n   IKE_SA\".\n   Another solution that has been proposed is to reply with\
    \ an\n   INVALID_SPI notification that contains SPIb.  This would explicitly\n\
    \   tell host B that the SA was not deleted, so host B could try deleting\n  \
    \ it again later.  However, this usage is not part of the IKEv2\n   specification\
    \ and would not be in line with normal use of the\n   INVALID_SPI notification\
    \ where the data field contains the SPI the\n   recipient of the notification\
    \ would put in outbound packets.\n   Yet another solution would be to ignore req2\
    \ at this time and wait\n   until we have received resp1.  However, this alternative\
    \ has not been\n   fully analyzed at this time; in general, ignoring valid requests\
    \ is\n   always a bit dangerous, because both endpoints could do it, leading\n\
    \   to a deadlock.\n   This document recommends the first alternative.\n"
- title: 5.11.7.  Rekeying a New CHILD_SA
  contents:
  - "5.11.7.  Rekeying a New CHILD_SA\n   Yet another case occurs when a CHILD_SA\
    \ is rekeyed soon after it has\n   been created:\n      Host A               \
    \       Host B\n     --------                    --------\n      send req1: [N(REKEY_SA,SPIa1)],\n\
    \         SA(..,SPIa2,..),..  -->\n                       (lost) <-- send resp1:\
    \ SA(..,SPIb2,..),..\n                              <-- send req2: N(REKEY_SA,SPIb2),\n\
    \                                     SA(..,SPIb3,..),..\n      recv req2 <--\n\
    \   To host A, this looks like a request to rekey an SA that does not\n   exist.\
    \  Like in the simultaneous rekeying case, replying with\n   NO_PROPOSAL_CHOSEN\
    \ is probably reasonable:\n      send resp2: N(NO_PROPOSAL_CHOSEN) -->\n     \
    \ recv resp1\n"
- title: 5.11.8.  Collisions with IKE_SA Rekeying
  contents:
  - "5.11.8.  Collisions with IKE_SA Rekeying\n   Another set of cases occurs when\
    \ one peer starts rekeying the IKE_SA\n   at the same time the other peer starts\
    \ creating, rekeying, or closing\n   a CHILD_SA.  Suppose that host B starts creating\
    \ a CHILD_SA, and soon\n   after, host A starts rekeying the IKE_SA:\n      Host\
    \ A                      Host B\n     --------                    --------\n \
    \                             <-- send req1: SA,Ni1,TSi,TSr\n      send req2:\
    \ SA,Ni2,.. -->\n                              --> recv req2\n   What should host\
    \ B do at this point?  Replying as usual would seem\n   like a reasonable choice:\n\
    \                              <-- send resp2: SA,Ni2,..\n      recv resp2 <--\n\
    \      send req3: D() -->\n                              --> recv req3\n   Now,\
    \ a problem arises: If host B now replies normally with an empty\n   Informational\
    \ response, this will cause host A to delete state\n   associated with the IKE_SA.\
    \  This means host B should stop\n   retransmitting req1.  However, host B cannot\
    \ know whether or not host\n   A has received req1.  If host A did receive it,\
    \ it will move the\n   CHILD_SA to the new IKE_SA as usual, and the state information\
    \ will\n   then be out of sync.\n   It seems this situation is tricky to handle\
    \ correctly.  Our proposal\n   is as follows: if a host receives a request to\
    \ rekey the IKE_SA when\n   it has CHILD_SAs in \"half-open\" state (currently\
    \ being created or\n   rekeyed), it should reply with NO_PROPOSAL_CHOSEN.  If\
    \ a host\n   receives a request to create or rekey a CHILD_SA after it has started\n\
    \   rekeying the IKE_SA, it should reply with NO_ADDITIONAL_SAS.\n   The case\
    \ where CHILD_SAs are being closed is even worse.  Our\n   recommendation is that\
    \ if a host receives a request to rekey the\n   IKE_SA when it has CHILD_SAs in\
    \ \"half-closed\" state (currently being\n   closed), it should reply with NO_PROPOSAL_CHOSEN.\
    \  And if a host\n   receives a request to close a CHILD_SA after it has started\
    \ rekeying\n   the IKE_SA, it should reply with an empty Informational response.\n\
    \   This ensures that at least the other peer will eventually notice that\n  \
    \ the CHILD_SA is still in \"half-closed\" state and will start a new\n   IKE_SA\
    \ from scratch.\n"
- title: 5.11.9.  Closing and Rekeying the IKE_SA
  contents:
  - "5.11.9.  Closing and Rekeying the IKE_SA\n   The final case considered in this\
    \ section occurs if one peer decides\n   to close the IKE_SA while the other peer\
    \ tries to rekey it.\n      Host A                      Host B\n     --------\
    \                    --------\n      send req1: SA(..,SPIa1,..),Ni1 -->\n    \
    \                          <-- send req2: D()\n                              -->\
    \ recv req1\n      recv req2 <--\n   At this point, host B should probably reply\
    \ with NO_PROPOSAL_CHOSEN,\n   and host A should reply as usual, close the IKE_SA,\
    \ and stop\n   retransmitting req1.\n                              <-- send resp1:\
    \ N(NO_PROPOSAL_CHOSEN)\n      send resp2: ()\n   If host A wants to continue\
    \ communication with B, it can now start a\n   new IKE_SA.\n"
- title: 5.11.10.  Summary
  contents:
  - "5.11.10.  Summary\n   If a host receives a request to rekey:\n   o  a CHILD_SA\
    \ pair that the host is currently trying to close: reply\n      with NO_PROPOSAL_CHOSEN.\n\
    \   o  a CHILD_SA pair that the host is currently rekeying: reply as\n      usual,\
    \ but prepare to close redundant SAs later based on the\n      nonces.\n   o \
    \ a CHILD_SA pair that does not exist: reply with\n      NO_PROPOSAL_CHOSEN.\n\
    \   o  the IKE_SA, and the host is currently rekeying the IKE_SA: reply\n    \
    \  as usual, but prepare to close redundant SAs and move inherited\n      CHILD_SAs\
    \ later based on the nonces.\n   o  the IKE_SA, and the host is currently creating,\
    \ rekeying, or\n      closing a CHILD_SA: reply with NO_PROPOSAL_CHOSEN.\n   o\
    \  the IKE_SA, and the host is currently trying to close the IKE_SA:\n      reply\
    \ with NO_PROPOSAL_CHOSEN.\n   If a host receives a request to close:\n   o  a\
    \ CHILD_SA pair that the host is currently trying to close: reply\n      without\
    \ Delete payloads.\n   o  a CHILD_SA pair that the host is currently rekeying:\
    \ reply as\n      usual, with Delete payload.\n   o  a CHILD_SA pair that does\
    \ not exist: reply without Delete\n      payloads.\n   o  the IKE_SA, and the\
    \ host is currently rekeying the IKE_SA: reply\n      as usual, and forget about\
    \ our own rekeying request.\n   o  the IKE_SA, and the host is currently trying\
    \ to close the IKE_SA:\n      reply as usual, and forget about our own close request.\n\
    \   If a host receives a request to create or rekey a CHILD_SA when it is\n  \
    \ currently rekeying the IKE_SA: reply with NO_ADDITIONAL_SAS.\n   If a host receives\
    \ a request to delete a CHILD_SA when it is\n   currently rekeying the IKE_SA:\
    \ reply without Delete payloads.\n"
- title: 5.12.  Diffie-Hellman and Rekeying the IKE_SA
  contents:
  - "5.12.  Diffie-Hellman and Rekeying the IKE_SA\n   There has been some confusion\
    \ whether doing a new Diffie-Hellman\n   exchange is mandatory when the IKE_SA\
    \ is rekeyed.\n   It seems that this case is allowed by the IKEv2 specification.\n\
    \   Section 2.18 shows the Diffie-Hellman term (g^ir) in brackets.\n   Section\
    \ 3.3.3 does not contradict this when it says that including\n   the D-H transform\
    \ is mandatory: although including the transform is\n   mandatory, it can contain\
    \ the value \"NONE\".\n   However, having the option to skip the Diffie-Hellman\
    \ exchange when\n   rekeying the IKE_SA does not add useful functionality to the\n\
    \   protocol.  The main purpose of rekeying the IKE_SA is to ensure that\n   the\
    \ compromise of old keying material does not provide information\n   about the\
    \ current keys, or vice versa.  This requires performing the\n   Diffie-Hellman\
    \ exchange when rekeying.  Furthermore, it is likely\n   that this option would\
    \ have been removed from the protocol as\n   unnecessary complexity had it been\
    \ discussed earlier.\n   Given this, we recommend that implementations should\
    \ have a hard-\n   coded policy that requires performing a new Diffie-Hellman\
    \ exchange\n   when rekeying the IKE_SA.  In other words, the initiator should\
    \ not\n   propose the value \"NONE\" for the D-H transform, and the responder\n\
    \   should not accept such a proposal.  This policy also implies that a\n   successful\
    \ exchange rekeying the IKE_SA always includes the KEi/KEr\n   payloads.\n   (References:\
    \ \"Rekeying IKE_SAs with the CREATE_CHILD_SA exhange\"\n   thread, Oct 2005.\
    \  \"Comments of\n   draft-eronen-ipsec-ikev2-clarifications-02.txt\" thread,\
    \ Apr 2005.)\n"
- title: 6.  Configuration Payloads
  contents:
  - '6.  Configuration Payloads

    '
- title: 6.1.  Assigning IP Addresses
  contents:
  - "6.1.  Assigning IP Addresses\n   Section 2.9 talks about traffic selector negotiation\
    \ and mentions\n   that \"In support of the scenario described in section 1.1.3,\
    \ an\n   initiator may request that the responder assign an IP address and\n \
    \  tell the initiator what it is.\"\n   This sentence is correct, but its placement\
    \ is slightly confusing.\n   IKEv2 does allow the initiator to request assignment\
    \ of an IP address\n   from the responder, but this is done using configuration\
    \ payloads,\n   not traffic selector payloads.  An address in a TSi payload in\
    \ a\n   response does not mean that the responder has assigned that address\n\
    \   to the initiator; it only means that if packets matching these\n   traffic\
    \ selectors are sent by the initiator, IPsec processing can be\n   performed as\
    \ agreed for this SA.  The TSi payload itself does not\n   give the initiator\
    \ permission to configure the initiator's TCP/IP\n   stack with the address and\
    \ use it as its source address.\n   In other words, IKEv2 does not have two different\
    \ mechanisms for\n   assigning addresses, but only one: configuration payloads.\
    \  In the\n   scenario described in Section 1.1.3, both configuration and traffic\n\
    \   selector payloads are usually included in the same message, and they\n   often\
    \ contain the same information in the response message (see\n   Section 6.3 of\
    \ this document for some examples).  However, their\n   semantics are still different.\n"
- title: 6.2.  Requesting any INTERNAL_IP4/IP6_ADDRESS
  contents:
  - "6.2.  Requesting any INTERNAL_IP4/IP6_ADDRESS\n   When describing the INTERNAL_IP4/IP6_ADDRESS\
    \ attributes, Section\n   3.15.1 says that \"In a request message, the address\
    \ specified is a\n   requested address (or zero if no specific address is requested)\"\
    .\n   The question here is whether \"zero\" means an address \"0.0.0.0\" or a\n\
    \   zero-length string.\n   Earlier, the same section also says that \"If an attribute\
    \ in the\n   CFG_REQUEST Configuration Payload is not zero-length, it is taken\
    \ as\n   a suggestion for that attribute\".  Also, the table of configuration\n\
    \   attributes shows that the length of INTERNAL_IP4_ADDRESS is either \"0\n \
    \  or 4 octets\", and likewise, INTERNAL_IP6_ADDRESS is either \"0 or 17\n   octets\"\
    .\n   Thus, if the client does not request a specific address, it includes\n \
    \  a zero-length INTERNAL_IP4/IP6_ADDRESS attribute, not an attribute\n   containing\
    \ an all-zeroes address.  The example in 2.19 is thus\n   incorrect, since it\
    \ shows the attribute as\n   \"INTERNAL_ADDRESS(0.0.0.0)\".\n   However, since\
    \ the value is only a suggestion, implementations are\n   recommended to ignore\
    \ suggestions they do not accept; or in other\n   words, to treat the same way\
    \ a zero-length INTERNAL_IP4_ADDRESS,\n   \"0.0.0.0\", and any other addresses\
    \ the implementation does not\n   recognize as a reasonable suggestion.\n"
- title: 6.3.  INTERNAL_IP4_SUBNET/INTERNAL_IP6_SUBNET
  contents:
  - "6.3.  INTERNAL_IP4_SUBNET/INTERNAL_IP6_SUBNET\n   Section 3.15.1 describes the\
    \ INTERNAL_IP4_SUBNET as \"The protected\n   sub-networks that this edge-device\
    \ protects.  This attribute is made\n   up of two fields: the first is an IP address\
    \ and the second is a\n   netmask.  Multiple sub-networks MAY be requested.  The\
    \ responder MAY\n   respond with zero or more sub-network attributes.\"\n   INTERNAL_IP6_SUBNET\
    \ is defined in a similar manner.\n   This raises two questions: first, since\
    \ this information is usually\n   included in the TSr payload, what functionality\
    \ does this attribute\n   add?  And second, what does this attribute mean in CFG_REQUESTs?\n\
    \   For the first question, there seem to be two sensible\n   interpretations.\
    \  Clearly TSr (in IKE_AUTH or CREATE_CHILD_SA\n   response) indicates which subnets\
    \ are accessible through the SA that\n   was just created.\n   The first interpretation\
    \ of the INTERNAL_IP4/6_SUBNET attributes is\n   that they indicate additional\
    \ subnets that can be reached through\n   this gateway, but need a separate SA.\
    \  According to this\n   interpretation, the INTERNAL_IP4/6_SUBNET attributes\
    \ are useful\n   mainly when they contain addresses not included in TSr.\n   The\
    \ second interpretation is that the INTERNAL_IP4/6_SUBNET\n   attributes express\
    \ the gateway's policy about what traffic should be\n   sent through the gateway.\
    \  The client can choose whether other\n   traffic (covered by TSr, but not in\
    \ INTERNAL_IP4/6_SUBNET) is sent\n   through the gateway or directly to the destination.\
    \  According to\n   this interpretation, the attributes are useful mainly when\
    \ TSr\n   contains addresses not included in the INTERNAL_IP4/6_SUBNET\n   attributes.\n\
    \   It turns out that these two interpretations are not incompatible, but\n  \
    \ rather two sides of the same principle: traffic to the addresses\n   listed\
    \ in the INTERNAL_IP4/6_SUBNET attributes should be sent via\n   this gateway.\
    \  If there are no existing IPsec SAs whose traffic\n   selectors cover the address\
    \ in question, new SAs have to be created.\n   A couple of examples are given\
    \ below.  For instance, if there are two\n   subnets, 192.0.1.0/26 and 192.0.2.0/24,\
    \ and the client's request\n   contains the following:\n        CP(CFG_REQUEST)\
    \ =\n          INTERNAL_IP4_ADDRESS()\n        TSi = (0, 0-65535, 0.0.0.0-255.255.255.255)\n\
    \        TSr = (0, 0-65535, 0.0.0.0-255.255.255.255)\n   Then a valid response\
    \ could be the following (in which TSr and\n   INTERNAL_IP4_SUBNET contain the\
    \ same information):\n        CP(CFG_REPLY) =\n          INTERNAL_IP4_ADDRESS(192.0.1.234)\n\
    \          INTERNAL_IP4_SUBNET(192.0.1.0/255.255.255.192)\n          INTERNAL_IP4_SUBNET(192.0.2.0/255.255.255.0)\n\
    \        TSi = (0, 0-65535, 192.0.1.234-192.0.1.234)\n        TSr = ((0, 0-65535,\
    \ 192.0.1.0-192.0.1.63),\n               (0, 0-65535, 192.0.2.0-192.0.2.255))\n\
    \   In these cases, the INTERNAL_IP4_SUBNET does not really carry any\n   useful\
    \ information.  Another possible reply would have been this:\n        CP(CFG_REPLY)\
    \ =\n          INTERNAL_IP4_ADDRESS(192.0.1.234)\n          INTERNAL_IP4_SUBNET(192.0.1.0/255.255.255.192)\n\
    \          INTERNAL_IP4_SUBNET(192.0.2.0/255.255.255.0)\n        TSi = (0, 0-65535,\
    \ 192.0.1.234-192.0.1.234)\n        TSr = (0, 0-65535, 0.0.0.0-255.255.255.255)\n\
    \   This would mean that the client can send all its traffic through the\n   gateway,\
    \ but the gateway does not mind if the client sends traffic\n   not included by\
    \ INTERNAL_IP4_SUBNET directly to the destination\n   (without going through the\
    \ gateway).\n   A different situation arises if the gateway has a policy that\n\
    \   requires the traffic for the two subnets to be carried in separate\n   SAs.\
    \  Then a response like this would indicate to the client that if\n   it wants\
    \ access to the second subnet, it needs to create a separate\n   SA:\n       \
    \ CP(CFG_REPLY) =\n          INTERNAL_IP4_ADDRESS(192.0.1.234)\n          INTERNAL_IP4_SUBNET(192.0.1.0/255.255.255.192)\n\
    \          INTERNAL_IP4_SUBNET(192.0.2.0/255.255.255.0)\n        TSi = (0, 0-65535,\
    \ 192.0.1.234-192.0.1.234)\n        TSr = (0, 0-65535, 192.0.1.0-192.0.1.63)\n\
    \   INTERNAL_IP4_SUBNET can also be useful if the client's TSr included\n   only\
    \ part of the address space.  For instance, if the client requests\n   the following:\n\
    \        CP(CFG_REQUEST) =\n          INTERNAL_IP4_ADDRESS()\n        TSi = (0,\
    \ 0-65535, 0.0.0.0-255.255.255.255)\n        TSr = (0, 0-65535, 192.0.2.155-192.0.2.155)\n\
    \   Then the gateway's reply could be this:\n        CP(CFG_REPLY) =\n       \
    \   INTERNAL_IP4_ADDRESS(192.0.1.234)\n          INTERNAL_IP4_SUBNET(192.0.1.0/255.255.255.192)\n\
    \          INTERNAL_IP4_SUBNET(192.0.2.0/255.255.255.0)\n        TSi = (0, 0-65535,\
    \ 192.0.1.234-192.0.1.234)\n        TSr = (0, 0-65535, 192.0.2.155-192.0.2.155)\n\
    \   It is less clear what the attributes mean in CFG_REQUESTs, and\n   whether\
    \ other lengths than zero make sense in this situation (but for\n   INTERNAL_IP6_SUBNET,\
    \ zero length is not allowed at all!).  This\n   document recommends that implementations\
    \ should not include\n   INTERNAL_IP4_SUBNET or INTERNAL_IP6_SUBNET attributes\
    \ in\n   CFG_REQUESTs.\n   For the IPv4 case, this document recommends using only\
    \ netmasks\n   consisting of some amount of \"1\" bits followed by \"0\" bits;\
    \ for\n   instance, \"255.0.255.0\" would not be a valid netmask for\n   INTERNAL_IP4_SUBNET.\n\
    \   It is also worthwhile to note that the contents of the INTERNAL_IP4/\n   6_SUBNET\
    \ attributes do not imply link boundaries.  For instance, a\n   gateway providing\
    \ access to a large company intranet using addresses\n   from the 10.0.0.0/8 block\
    \ can send a single INTERNAL_IP4_SUBNET\n   attribute (10.0.0.0/255.0.0.0) even\
    \ if the intranet has hundreds of\n   routers and separate links.\n   (References:\
    \ Tero Kivinen's mail \"Intent of couple of attributes in\n   Configuration Payload\
    \ in IKEv2?\", 2004-11-19.  Srinivasa Rao\n   Addepalli's mail \"INTERNAL_IP4_SUBNET\
    \ and INTERNAL_IP6_SUBNET in\n   IKEv2\", 2004-09-10.  Yoav Nir's mail \"Re: New\
    \ I-D: IKEv2\n   Clarifications and Implementation Guidelines\", 2005-02-07.\n\
    \   \"Clarifications open issue: INTERNAL_IP4_SUBNET/NETMASK\" thread,\n   April\
    \ 2005.)\n"
- title: 6.4.  INTERNAL_IP4_NETMASK
  contents:
  - "6.4.  INTERNAL_IP4_NETMASK\n   Section 3.15.1 defines the INTERNAL_IP4_NETMASK\
    \ attribute and says\n   that \"The internal network's netmask.  Only one netmask\
    \ is allowed in\n   the request and reply messages (e.g., 255.255.255.0) and it\
    \ MUST be\n   used only with an INTERNAL_IP4_ADDRESS attribute\".\n   However,\
    \ it is not clear what exactly this attribute means, as the\n   concept of \"\
    netmask\" is not very well defined for point-to-point\n   links (unlike multi-access\
    \ links, where it means \"you can reach hosts\n   inside this netmask directly\
    \ using layer 2, instead of sending\n   packets via a router\").  Even if the\
    \ operating system's TCP/IP stack\n   requires a netmask to be configured, for\
    \ point-to-point links it\n   could be just set to 255.255.255.255.  So, why is\
    \ this information\n   sent in IKEv2?\n   One possible interpretation would be\
    \ that the host is given a whole\n   block of IP addresses instead of a single\
    \ address.  This is also what\n   Framed-IP-Netmask does in [RADIUS], the IPCP\
    \ \"subnet mask\" extension\n   does in PPP [IPCPSubnet], and the prefix length\
    \ in the IPv6 Framed-\n   IPv6-Prefix attribute does in [RADIUS6].  However, nothing\
    \ in the\n   specification supports this interpretation, and discussions on the\n\
    \   IPsec WG mailing list have confirmed it was not intended.  Section\n   3.15.1\
    \ also says that multiple addresses are assigned using multiple\n   INTERNAL_IP4/6_ADDRESS\
    \ attributes.\n   Currently, this document's interpretation is the following:\n\
    \   INTERNAL_IP4_NETMASK in a CFG_REPLY means roughly the same thing as\n   INTERNAL_IP4_SUBNET\
    \ containing the same information (\"send traffic to\n   these addresses through\
    \ me\"), but also implies a link boundary.  For\n   instance, the client could\
    \ use its own address and the netmask to\n   calculate the broadcast address of\
    \ the link.  (Whether the gateway\n   will actually deliver broadcast packets\
    \ to other VPN clients and/or\n   other nodes connected to this link is another\
    \ matter.)\n   An empty INTERNAL_IP4_NETMASK attribute can be included in a\n\
    \   CFG_REQUEST to request this information (although the gateway can\n   send\
    \ the information even when not requested).  However, it seems\n   that non-empty\
    \ values for this attribute do not make sense in\n   CFG_REQUESTs.\n   Fortunately,\
    \ Section 4 clearly says that a minimal implementation\n   does not need to include\
    \ or understand the INTERNAL_IP4_NETMASK\n   attribute, and thus this document\
    \ recommends that implementations\n   should not use the INTERNAL_IP4_NETMASK\
    \ attribute or assume that the\n   other peer supports it.\n   (References: Charlie\
    \ Kaufman's mail \"RE: Proposed Last Call based\n   revisions to IKEv2\", 2004-05-27.\
    \  Email discussion with Tero Kivinen,\n   Jan 2005.  Yoav Nir's mail \"Re: New\
    \ I-D: IKEv2 Clarifications and\n   Implementation Guidelines\", 2005-02-07. \
    \ \"Clarifications open issue:\n   INTERNAL_IP4_SUBNET/NETMASK\" thread, April\
    \ 2005.)\n"
- title: 6.5.  Configuration Payloads for IPv6
  contents:
  - "6.5.  Configuration Payloads for IPv6\n   IKEv2 also defines configuration payloads\
    \ for IPv6.  However, they\n   are based on the corresponding IPv4 payloads and\
    \ do not fully follow\n   the \"normal IPv6 way of doing things\".\n   A client\
    \ can be assigned an IPv6 address using the\n   INTERNAL_IP6_ADDRESS configuration\
    \ payload.  A minimal exchange could\n   look like this:\n        CP(CFG_REQUEST)\
    \ =\n          INTERNAL_IP6_ADDRESS()\n          INTERNAL_IP6_DNS()\n        TSi\
    \ = (0, 0-65535, :: - FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n        TSr =\
    \ (0, 0-65535, :: - FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n        CP(CFG_REPLY)\
    \ =\n          INTERNAL_IP6_ADDRESS(2001:DB8:0:1:2:3:4:5/64)\n          INTERNAL_IP6_DNS(2001:DB8:99:88:77:66:55:44)\n\
    \        TSi = (0, 0-65535, 2001:DB8:0:1:2:3:4:5 - 2001:DB8:0:1:2:3:4:5)\n   \
    \     TSr = (0, 0-65535, :: - FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n   In\
    \ particular, IPv6 stateless autoconfiguration or router\n   advertisement messages\
    \ are not used; neither is neighbor discovery.\n   The client can also send a\
    \ non-empty INTERNAL_IP6_ADDRESS attribute\n   in the CFG_REQUEST to request a\
    \ specific address or interface\n   identifier.  The gateway first checks if the\
    \ specified address is\n   acceptable, and if it is, returns that one.  If the\
    \ address was not\n   acceptable, the gateway will attempt to use the interface\
    \ identifier\n   with some other prefix; if even that fails, the gateway will\
    \ select\n   another interface identifier.\n   The INTERNAL_IP6_ADDRESS attribute\
    \ also contains a prefix length\n   field.  When used in a CFG_REPLY, this corresponds\
    \ to the\n   INTERNAL_IP4_NETMASK attribute in the IPv4 case (and indeed, was\n\
    \   called INTERNAL_IP6_NETMASK in earlier versions of the IKEv2 draft).\n   See\
    \ the previous section for more details.\n   While this approach to configuring\
    \ IPv6 addresses is reasonably\n   simple, it has some limitations: IPsec tunnels\
    \ configured using IKEv2\n   are not fully-featured \"interfaces\" in the IPv6\
    \ addressing\n   architecture [IPv6Addr] sense.  In particular, they do not\n\
    \   necessarily have link-local addresses, and this may complicate the\n   use\
    \ of protocols that assume them, such as [MLDv2].  (Whether they\n   are called\
    \ \"interfaces\" in some particular operating system is a\n   different issue.)\n\
    \   (References: \"VPN remote host configuration IPv6 ?\" thread, May 2004.\n\
    \   \"Clarifications open issue: INTERNAL_IP4_SUBNET/NETMASK\" thread,\n   April\
    \ 2005.)\n"
- title: 6.6.  INTERNAL_IP6_NBNS
  contents:
  - "6.6.  INTERNAL_IP6_NBNS\n   Section 3.15.1 defines the INTERNAL_IP6_NBNS attribute\
    \ for sending\n   the IPv6 address of NetBIOS name servers.\n   However, NetBIOS\
    \ is not defined for IPv6 and probably never will be.\n   Thus, this attribute\
    \ most likely does not make much sense.\n   (Pointed out by Bernard Aboba in the\
    \ IP Configuration Security (ICOS)\n   BoF at IETF62.)\n"
- title: 6.7.  INTERNAL_ADDRESS_EXPIRY
  contents:
  - "6.7.  INTERNAL_ADDRESS_EXPIRY\n   Section 3.15.1 defines the INTERNAL_ADDRESS_EXPIRY\
    \ attribute as\n   \"Specifies the number of seconds that the host can use the\
    \ internal\n   IP address.  The host MUST renew the IP address before this expiry\n\
    \   time.  Only one of these attributes MAY be present in the reply.\"\n   Expiry\
    \ times and explicit renewals are primarily useful in\n   environments like DHCP,\
    \ where the server cannot reliably know when\n   the client has gone away.  However,\
    \ in IKEv2 this is known, and the\n   gateway can simply free the address when\
    \ the IKE_SA is deleted.\n   Also, Section 4 says that supporting renewals is\
    \ not mandatory.\n   Given that this functionality is usually not needed, we recommend\n\
    \   that gateways should not send the INTERNAL_ADDRESS_EXPIRY attribute.\n   (And\
    \ since this attribute does not seem to make much sense for\n   CFG_REQUESTs,\
    \ clients should not send it either.)\n   Note that according to Section 4, clients\
    \ are required to understand\n   INTERNAL_ADDRESS_EXPIRY if they receive it. \
    \ A minimum implementation\n   would use the value to limit the lifetime of the\
    \ IKE_SA.\n   (References: Tero Kivinen's mail \"Comments of\n   draft-eronen-ipsec-ikev2-clarifications-02.txt\"\
    , 2005-04-05.\n   \"Questions about internal address\" thread, April 2005.)\n"
- title: 6.8.  Address Assignment Failures
  contents:
  - "6.8.  Address Assignment Failures\n   If the responder encounters an error while\
    \ attempting to assign an IP\n   address to the initiator, it responds with an\n\
    \   INTERNAL_ADDRESS_FAILURE notification as described in Section 3.10.1.\n  \
    \ However, there are some more complex error cases.\n   First, if the responder\
    \ does not support configuration payloads at\n   all, it can simply ignore all\
    \ configuration payloads.  This type of\n   implementation never sends INTERNAL_ADDRESS_FAILURE\
    \ notifications.\n   If the initiator requires the assignment of an IP address,\
    \ it will\n   treat a response without CFG_REPLY as an error.\n   A second case\
    \ is where the responder does support configuration\n   payloads, but only for\
    \ particular type of addresses (IPv4 or IPv6).\n   Section 4 says that \"A minimal\
    \ IPv4 responder implementation will\n   ignore the contents of the CP payload\
    \ except to determine that it\n   includes an INTERNAL_IP4_ADDRESS attribute\"\
    .  If, for instance, the\n   initiator includes both INTERNAL_IP4_ADDRESS and\
    \ INTERNAL_IP6_ADDRESS\n   in the CFG_REQUEST, an IPv4-only responder can thus\
    \ simply ignore the\n   IPv6 part and process the IPv4 request as usual.\n   A\
    \ third case is where the initiator requests multiple addresses of a\n   type\
    \ that the responder supports: what should happen if some (but not\n   all) of\
    \ the requests fail?  It seems that an optimistic approach\n   would be the best\
    \ one here: if the responder is able to assign at\n   least one address, it replies\
    \ with those; it sends\n   INTERNAL_ADDRESS_FAILURE only if no addresses can be\
    \ assigned.\n   (References: \"ikev2 and internal_ivpn_address\" thread, June\
    \ 2005.)\n"
- title: 7.  Miscellaneous Issues
  contents:
  - '7.  Miscellaneous Issues

    '
- title: 7.1.  Matching ID_IPV4_ADDR and ID_IPV6_ADDR
  contents:
  - "7.1.  Matching ID_IPV4_ADDR and ID_IPV6_ADDR\n   When using the ID_IPV4_ADDR/ID_IPV6_ADDR\
    \ identity types in IDi/IDr\n   payloads, IKEv2 does not require this address\
    \ to match anything in\n   the TSi/TSr payloads.  For example, in a site-to-site\
    \ VPN between two\n   security gateways, the gateways could authenticate each\
    \ other as\n   ID_IPV4_ADDR(192.0.1.1) and ID_IPV4_ADDR(192.0.2.1), and then create\n\
    \   a CHILD_SA for protecting traffic between 192.0.1.55/32 (a host\n   behind\
    \ the first security gateway) and 192.0.2.240/28 (a network\n   behind the second\
    \ security gateway).  The authenticated identities\n   (IDi/IDr) are linked to\
    \ the authorized traffic selectors (TSi/TSr)\n   using \"Child SA Authorization\
    \ Data\" in the Peer Authorization\n   Database (PAD).\n   Furthermore, IKEv2\
    \ does not require that the addresses in\n   ID_IPV4_ADDR/ID_IPV6_ADDR match the\
    \ address in the IP header of the\n   IKE packets.  However, other specifications\
    \ may place additional\n   requirements regarding this.  For example, [PKI4IPsec]\
    \ requires that\n   implementation must be capable of comparing the addresses\
    \ in the\n   ID_IPV4_ADDR/ID_IPV6_ADDR with the addresses in the IP header of\
    \ the\n   IKE packets, and this comparison must be enabled by default.\n   (References:\
    \ \"Identities types IP address,FQDN/user FQDN and DN and\n   its usage in preshared\
    \ key authentication\" thread, Jan 2005.\n   \"Matching ID_IPV4_ADDR and ID_IPV6_ADDR\"\
    \ thread, May 2006.)\n"
- title: 7.2.  Relationship of IKEv2 to RFC 4301
  contents:
  - "7.2.  Relationship of IKEv2 to RFC 4301\n   The IKEv2 specification refers to\
    \ [RFC4301], but it never clearly\n   defines the exact relationship.\n   However,\
    \ there are some requirements in the specification that make\n   it clear that\
    \ IKEv2 requires [RFC4301].  In other words, an\n   implementation that does IPsec\
    \ processing strictly according to\n   [RFC2401] cannot be compliant with the\
    \ IKEv2 specification.\n   One such example can be found in Section 2.24: \"Specifically,\
    \ tunnel\n   encapsulators and decapsulators for all tunnel-mode SAs created by\n\
    \   IKEv2 [...]  MUST implement the tunnel encapsulation and\n   decapsulation\
    \ processing specified in [RFC4301] to prevent discarding\n   of ECN congestion\
    \ indications.\"\n   Nevertheless, the changes required to existing [RFC2401]\n\
    \   implementations are not very large, especially since supporting many\n   of\
    \ the new features (such as Extended Sequence Numbers) is optional.\n"
- title: 7.3.  Reducing the Window Size
  contents:
  - "7.3.  Reducing the Window Size\n   In IKEv2, the window size is assumed to be\
    \ a (possibly configurable)\n   property of a particular implementation and is\
    \ not related to\n   congestion control (unlike the window size in TCP, for instance).\n\
    \   In particular, it is not defined what the responder should do when it\n  \
    \ receives a SET_WINDOW_SIZE notification containing a smaller value\n   than\
    \ is currently in effect.  Thus, there is currently no way to\n   reduce the window\
    \ size of an existing IKE_SA.  However, when rekeying\n   an IKE_SA, the new IKE_SA\
    \ starts with window size 1 until it is\n   explicitly increased by sending a\
    \ new SET_WINDOW_SIZE notification.\n   (References: Tero Kivinen's mail \"Comments\
    \ of\n   draft-eronen-ipsec-ikev2-clarifications-02.txt\", 2005-04-05.)\n"
- title: 7.4.  Minimum Size of Nonces
  contents:
  - "7.4.  Minimum Size of Nonces\n   Section 2.10 says that \"Nonces used in IKEv2\
    \ MUST be randomly chosen,\n   MUST be at least 128 bits in size, and MUST be\
    \ at least half the key\n   size of the negotiated prf.\"\n   However, the initiator\
    \ chooses the nonce before the outcome of the\n   negotiation is known.  In this\
    \ case, the nonce has to be long enough\n   for all the PRFs being proposed.\n"
- title: 7.5.  Initial Zero Octets on Port 4500
  contents:
  - "7.5.  Initial Zero Octets on Port 4500\n   It is not clear whether a peer sending\
    \ an IKE_SA_INIT request on port\n   4500 should include the initial four zero\
    \ octets.  Section 2.23 talks\n   about how to upgrade to tunneling over port\
    \ 4500 after message 2, but\n   it does not say what to do if message 1 is sent\
    \ on port 4500.\n       IKE MUST listen on port 4500 as well as port 500.\n  \
    \     [...]\n       The IKE initiator MUST check these payloads if present and\
    \ if\n       they do not match the addresses in the outer packet MUST tunnel\n\
    \       all future IKE and ESP packets associated with this IKE_SA over\n    \
    \   UDP port 4500.\n       To tunnel IKE packets over UDP port 4500, the IKE header\
    \ has four\n       octets of zero prepended and the result immediately follows\
    \ the\n       UDP header. [...]\n   The very beginning of Section 2 says \"...\
    \ though IKE messages may\n   also be received on UDP port 4500 with a slightly\
    \ different format\n   (see section 2.23).\"\n   That \"slightly different format\"\
    \ is only described in discussing what\n   to do after changing to port 4500.\
    \  However, [RFC3948] shows clearly\n   the format has the initial zeros even\
    \ for initiators on port 4500.\n   Furthermore, without the initial zeros, the\
    \ processing engine cannot\n   determine whether the packet is an IKE packet or\
    \ an ESP packet.\n   Thus, all packets sent on port 4500 need the four-zero prefix;\n\
    \   otherwise, the receiver won't know how to handle them.\n"
- title: 7.6.  Destination Port for NAT Traversal
  contents:
  - "7.6.  Destination Port for NAT Traversal\n   Section 2.23 says that \"an IPsec\
    \ endpoint that discovers a NAT\n   between it and its correspondent MUST send\
    \ all subsequent traffic to\n   and from port 4500\".\n   This sentence is misleading.\
    \  The peer \"outside\" the NAT uses source\n   port 4500 for the traffic it sends,\
    \ but the destination port is, of\n   course, taken from packets sent by the peer\
    \ behind the NAT.  This\n   port number is usually dynamically allocated by the\
    \ NAT.\n"
- title: 7.7.  SPI Values for Messages outside an IKE_SA
  contents:
  - "7.7.  SPI Values for Messages outside an IKE_SA\n   The IKEv2 specification is\
    \ not quite clear what SPI values should be\n   used in the IKE header for the\
    \ small number of notifications that are\n   allowed to be sent outside an IKE_SA.\
    \  Note that such notifications\n   are explicitly not Informational exchanges;\
    \ Section 1.5 makes it\n   clear that these are one-way messages that must not\
    \ be responded to.\n   There are two cases when such a one-way notification can\
    \ be sent:\n   INVALID_IKE_SPI and INVALID_SPI.\n   In case of INVALID_IKE_SPI,\
    \ the message sent is a response message,\n   and Section 2.21 says that \"If\
    \ a response is sent, the response MUST\n   be sent to the IP address and port\
    \ from whence it came with the same\n   IKE SPIs and the Message ID copied.\"\n\
    \   In case of INVALID_SPI, however, there are no IKE SPI values that\n   would\
    \ be meaningful to the recipient of such a notification.  Also,\n   the message\
    \ sent is now an INFORMATIONAL request.  A strict\n   interpretation of the specification\
    \ would require the sender to\n   invent garbage values for the SPI fields.  However,\
    \ we think this was\n   not the intention, and using zero values is acceptable.\n\
    \   (References: \"INVALID_IKE_SPI\" thread, June 2005.)\n"
- title: 7.8.  Protocol ID/SPI Fields in Notify Payloads
  contents:
  - "7.8.  Protocol ID/SPI Fields in Notify Payloads\n   Section 3.10 says that the\
    \ Protocol ID field in Notify payloads \"For\n   notifications that do not relate\
    \ to an existing SA, this field MUST\n   be sent as zero and MUST be ignored on\
    \ receipt\".  However, the\n   specification does not clearly say which notifications\
    \ are related to\n   existing SAs and which are not.\n   Since the main purpose\
    \ of the Protocol ID field is to specify the\n   type of the SPI, our interpretation\
    \ is that the Protocol ID field\n   should be non-zero only when the SPI field\
    \ is non-empty.\n   There are currently only two notifications where this is the\
    \ case:\n   INVALID_SELECTORS and REKEY_SA.\n"
- title: 7.9.  Which message should contain INITIAL_CONTACT
  contents:
  - "7.9.  Which message should contain INITIAL_CONTACT\n   The description of the\
    \ INITIAL_CONTACT notification in Section 3.10.1\n   says that \"This notification\
    \ asserts that this IKE_SA is the only\n   IKE_SA currently active between the\
    \ authenticated identities\".\n   However, neither Section 2.4 nor 3.10.1 says\
    \ in which message this\n   payload should be placed.\n   The general agreement\
    \ is that INITIAL_CONTACT is best communicated in\n   the first IKE_AUTH request,\
    \ not as a separate exchange afterwards.\n   (References: \"Clarifying the use\
    \ of INITIAL_CONTACT in IKEv2\" thread,\n   April 2005.  \"Initial Contact messages\"\
    \ thread, December 2004.\n   \"IKEv2 and Initial Contact\" thread, September 2004\
    \ and April 2005.)\n"
- title: 7.10.  Alignment of Payloads
  contents:
  - "7.10.  Alignment of Payloads\n   Many IKEv2 payloads contain fields marked as\
    \ \"RESERVED\", mostly\n   because IKEv1 had them, and partly because they make\
    \ the pictures\n   easier to draw.  In particular, payloads in IKEv2 are not,\
    \ in\n   general, aligned to 4-octet boundaries.  (Note that payloads were not\n\
    \   aligned to 4-octet boundaries in IKEv1 either.)\n   (References: \"IKEv2:\
    \ potential 4-byte alignment problem\" thread, June\n   2004.)\n"
- title: 7.11.  Key Length Transform Attribute
  contents:
  - "7.11.  Key Length Transform Attribute\n   Section 3.3.5 says that \"The only\
    \ algorithms defined in this document\n   that accept attributes are the AES based\
    \ encryption, integrity, and\n   pseudo-random functions, which require a single\
    \ attribute specifying\n   key width.\"\n   This is incorrect.  The AES-based\
    \ integrity and pseudo-random\n   functions defined in [IKEv2] always use a 128-bit\
    \ key.  In fact,\n   there are currently no integrity or PRF algorithms that use\
    \ the key\n   length attribute (and we recommend that they should not be defined\
    \ in\n   the future either).\n   For encryption algorithms, the situation is slightly\
    \ more complex\n   since there are three different types of algorithms:\n   o\
    \  The key length attribute is never used with algorithms that use a\n      fixed\
    \ length key, such as DES and IDEA.\n   o  The key length attribute is always\
    \ included for the currently\n      defined AES-based algorithms (Cipher Block\
    \ Chaining (CBC), Counter\n      (CTR) Mode, Counter with CBC-MAC (CCM), and Galois/Counter\
    \ Mode\n      (GCM)).  Omitting the key length attribute is not allowed; if the\n\
    \      proposal does not contain it, the proposal has to be rejected.\n   o  For\
    \ other algorithms, the key length attribute can be included but\n      is not\
    \ mandatory.  These algorithms include, e.g., RC5, CAST, and\n      BLOWFISH.\
    \  If the key length attribute is not included, the\n      default value specified\
    \ in [RFC2451] is used.\n"
- title: 7.12.  IPsec IANA Considerations
  contents:
  - "7.12.  IPsec IANA Considerations\n   There are currently three different IANA\
    \ registry files that contain\n   important numbers for IPsec: ikev2-registry,\
    \ isakmp-registry, and\n   ipsec-registry.  Implementers should note that IKEv2\
    \ may use numbers\n   different from those of IKEv1 for a particular algorithm.\n\
    \   For instance, an encryption algorithm can have up to three different\n   numbers:\
    \ the IKEv2 \"Transform Type 1\" identifier in ikev2-registry,\n   the IKEv1 phase\
    \ 1 \"Encryption Algorithm\" identifier in ipsec-\n   registry, and the IKEv1\
    \ phase 2 \"IPSEC ESP Transform Identifier\"\n   isakmp-registry.  Although some\
    \ algorithms have the same number in\n   all three registries, the registries\
    \ are not identical.\n   Similarly, an integrity algorithm can have at least the\
    \ IKEv2\n   \"Transform Type 3\" identifier in ikev2-registry, the IKEv1 phase\
    \ 2\n   \"IPSEC AH Transform Identifier\" in isakmp-registry, and the IKEv1\n\
    \   phase 2 ESP \"Authentication Algorithm Security Association Attribute\"\n\
    \   identifier in isakmp-registry.  And there is also the IKEv1 phase 1\n   \"\
    Hash Algorithm\" list in ipsec-registry.\n   This issue needs special care also\
    \ when writing a specification for\n   how a new algorithm is used with IPsec.\n"
- title: 7.13.  Combining ESP and AH
  contents:
  - "7.13.  Combining ESP and AH\n   The IKEv2 specification contains some misleading\
    \ text about how ESP\n   and AH can be combined.\n   IKEv2 is based on [RFC4301],\
    \ which does not include \"SA bundles\" that\n   were part of [RFC2401].  While\
    \ a single packet can go through IPsec\n   processing multiple times, each of\
    \ these passes uses a separate SA,\n   and the passes are coordinated by the forwarding\
    \ tables.  In IKEv2,\n   each of these SAs has to be created using a separate\
    \ CREATE_CHILD_SA\n   exchange.  Thus, the text in Section 2.7 about a single\
    \ proposal\n   containing both ESP and AH is incorrect.\n   Moreover, the combination\
    \ of ESP and AH (between the same endpoints)\n   had already become largely obsolete\
    \ in 1998 when RFC 2406 was\n   published.  Our recommendation is that IKEv2 implementations\
    \ should\n   not support this combination, and implementers should not assume\
    \ the\n   combination can be made to work in an interoperable manner.\n   (References:\
    \ \"Rekeying SA bundles\" thread, Oct 2005.)\n"
- title: 8.  Implementation Mistakes
  contents:
  - "8.  Implementation Mistakes\n   Some implementers at the early IKEv2 bakeoffs\
    \ didn't do everything\n   correctly.  This may seem like an obvious statement,\
    \ but it is\n   probably useful to list a few things that were clear in the document,\n\
    \   but that some implementers didn't do.  All of these things caused\n   interoperability\
    \ problems.\n   o  Some implementations continued to send traffic on a CHILD_SA\
    \ after\n      it was rekeyed, even after receiving an DELETE payload.\n   o \
    \ After rekeying an IKE_SA, some implementations did not reset their\n      message\
    \ counters to zero.  One set the counter to 2, another did\n      not reset the\
    \ counter at all.\n   o  Some implementations could only handle a single pair\
    \ of traffic\n      selectors or would only process the first pair in the proposal.\n\
    \   o  Some implementations responded to a delete request by sending an\n    \
    \  empty INFORMATIONAL response and then initiated their own\n      INFORMATIONAL\
    \ exchange with the pair of SAs to delete.\n   o  Although this did not happen\
    \ at the bakeoff, from the discussion\n      there, it is clear that some people\
    \ had not implemented message\n      window sizes correctly.  Some implementations\
    \ might have sent\n      messages that did not fit into the responder's message\
    \ windows,\n      and some implementations may not have torn down an SA if they\
    \ did\n      not ever receive a message that they know they should have.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This document does not introduce any new security\
    \ considerations to\n   IKEv2.  If anything, clarifying complex areas of the specification\n\
    \   can reduce the likelihood of implementation problems that may have\n   security\
    \ implications.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   This document is mainly based on conversations on the\
    \ IPsec WG\n   mailing list.  The authors would especially like to thank Bernard\n\
    \   Aboba, Jari Arkko, Vijay Devarapalli, William Dixon, Francis Dupont,\n   Alfred\
    \ Hoenes, Mika Joutsenvirta, Charlie Kaufman, Stephen Kent, Tero\n   Kivinen,\
    \ Yoav Nir, Michael Richardson, and Joel Snyder for their\n   contributions.\n\
    \   In addition, the authors would like to thank all the participants of\n   the\
    \ first public IKEv2 bakeoff, held in Santa Clara in February 2005,\n   for their\
    \ questions and proposed clarifications.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [IKEv2]       Kaufman, C., Ed., \"Internet Key\
    \ Exchange (IKEv2)\n                 Protocol\", RFC 4306, December 2005.\n  \
    \ [IKEv2ALG]    Schiller, J., \"Cryptographic Algorithms for Use in the\n    \
    \             Internet Key Exchange Version 2 (IKEv2)\", RFC 4307,\n         \
    \        December 2005.\n   [PKCS1v20]    Kaliski, B. and J. Staddon, \"PKCS #1:\
    \ RSA Cryptography\n                 Specifications Version 2.0\", RFC 2437, October\
    \ 1998.\n   [PKCS1v21]    Jonsson, J. and B. Kaliski, \"Public-Key Cryptography\n\
    \                 Standards (PKCS) #1: RSA Cryptography Specifications\n     \
    \            Version 2.1\", RFC 3447, February 2003.\n   [RFC2401]     Kent, S.\
    \ and R. Atkinson, \"Security Architecture for\n                 the Internet\
    \ Protocol\", RFC 2401, November 1998.\n   [RFC4301]     Kent, S. and K. Seo,\
    \ \"Security Architecture for the\n                 Internet Protocol\", RFC 4301,\
    \ December 2005.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [Aura05]      Aura, T., Roe, M., and A. Mohammed,\
    \ \"Experiences with\n                 Host-to-Host IPsec\", 13th International\
    \ Workshop on\n                 Security Protocols, Cambridge, UK, April 2005.\n\
    \   [EAP]         Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and\n   \
    \              H. Levkowetz, \"Extensible Authentication Protocol\n          \
    \       (EAP)\", RFC 3748, June 2004.\n   [HashUse]     Hoffman, P., \"Use of\
    \ Hash Algorithms in IKE and IPsec\",\n                 Work in Progress, July\
    \ 2006.\n   [IPCPSubnet]  Cisco Systems, Inc., \"IPCP Subnet Mask Support\n  \
    \               Enhancements\",  http://www.cisco.com/univercd/cc/td/\n      \
    \           doc/product/software/ios121/121newft/121limit/121dc/\n           \
    \      121dc3/ipcp_msk.htm, January 2003.\n   [IPv6Addr]    Hinden, R. and S.\
    \ Deering, \"IP Version 6 Addressing\n                 Architecture\", RFC 4291,\
    \ February 2006.\n   [MIPv6]       Johnson, D., Perkins, C., and J. Arkko, \"\
    Mobility\n                 Support in IPv6\", RFC 3775, June 2004.\n   [MLDv2]\
    \       Vida, R. and L. Costa, \"Multicast Listener Discovery\n              \
    \   Version 2 (MLDv2) for IPv6\", RFC 3810, June 2004.\n   [NAI]         Aboba,\
    \ B., Beadles, M., Arkko, J., and P. Eronen, \"The\n                 Network Access\
    \ Identifier\", RFC 4282, December 2005.\n   [PKI4IPsec]   Korver, B., \"Internet\
    \ PKI Profile of IKEv1/ISAKMP,\n                 IKEv2, and PKIX\", Work in Progress,\
    \ April 2006.\n   [RADEAP]      Aboba, B. and P. Calhoun, \"RADIUS (Remote\n \
    \                Authentication Dial In User Service) Support For\n          \
    \       Extensible Authentication Protocol (EAP)\", RFC 3579,\n              \
    \   September 2003.\n   [RADIUS]      Rigney, C., Willens, S., Rubens, A., and\
    \ W. Simpson,\n                 \"Remote Authentication Dial In User Service (RADIUS)\"\
    ,\n                 RFC 2865, June 2000.\n   [RADIUS6]     Aboba, B., Zorn, G.,\
    \ and D. Mitton, \"RADIUS and IPv6\",\n                 RFC 3162, August 2001.\n\
    \   [RFC2119]     Bradner, S., \"Key words for use in RFCs to Indicate\n     \
    \            Requirement  Levels\", RFC 2119, March 1997.\n   [RFC2451]     Pereira,\
    \ R. and R. Adams, \"The ESP CBC-Mode Cipher\n                 Algorithms\", RFC\
    \ 2451, November 1998.\n   [RFC2822]     Resnick, P., \"Internet Message Format\"\
    , RFC 2822,\n                 April 2001.\n   [RFC3664]     Hoffman, P., \"The\
    \ AES-XCBC-PRF-128 Algorithm for the\n                 Internet Key Exchange Protocol\
    \ (IKE)\", RFC 3664,\n                 January 2004.\n   [RFC3948]     Huttunen,\
    \ A., Swander, B., Volpe, V., DiBurro, L., and\n                 M. Stenberg,\
    \ \"UDP Encapsulation of IPsec ESP Packets\",\n                 RFC 3948, January\
    \ 2005.\n   [RFC4434]     Hoffman, P., \"The AES-XCBC-PRF-128 Algorithm for the\n\
    \                 Internet Key Exchange Protocol (IKE)\", RFC 4434,\n        \
    \         February 2006.\n   [RFC822]      Crocker, D., \"Standard for the format\
    \ of ARPA Internet\n                 text messages\", RFC 822, August 1982.\n\
    \   [ReAuth]      Nir, Y., \"Repeated Authentication in Internet Key\n       \
    \          Exchange (IKEv2) Protocol\", RFC 4478, April 2006.\n   [SCVP]     \
    \   Freeman, T., Housley, R., Malpani, A., Cooper, D., and\n                 T.\
    \ Polk, \"Simple Certificate Validation Protocol\n                 (SCVP)\", Work\
    \ in Progress, June 2006.\n"
- title: Appendix A.  Exchanges and Payloads
  contents:
  - "Appendix A.  Exchanges and Payloads\n   This appendix contains a short summary\
    \ of the IKEv2 exchanges, and\n   what payloads can appear in which message. \
    \ This appendix is purely\n   informative; if it disagrees with the body of this\
    \ document or the\n   IKEv2 specification, the other text is considered correct.\n\
    \   Vendor-ID (V) payloads may be included in any place in any message.\n   This\
    \ sequence shows what are, in our opinion, the most logical places\n   for them.\n\
    \   The specification does not say which messages can contain\n   N(SET_WINDOW_SIZE).\
    \  It can possibly be included in any message, but\n   it is not yet shown below.\n"
- title: A.1.  IKE_SA_INIT Exchange
  contents:
  - "A.1.  IKE_SA_INIT Exchange\n   request             --> [N(COOKIE)],\n       \
    \                    SA, KE, Ni,\n                           [N(NAT_DETECTION_SOURCE_IP)+,\n\
    \                            N(NAT_DETECTION_DESTINATION_IP)],\n             \
    \              [V+]\n   normal response     <-- SA, KE, Nr,\n   (no cookie)  \
    \           [N(NAT_DETECTION_SOURCE_IP),\n                            N(NAT_DETECTION_DESTINATION_IP)],\n\
    \                           [[N(HTTP_CERT_LOOKUP_SUPPORTED)], CERTREQ+],\n   \
    \                        [V+]\n"
- title: A.2.  IKE_AUTH Exchange without EAP
  contents:
  - "A.2.  IKE_AUTH Exchange without EAP\n   request             --> IDi, [CERT+],\n\
    \                           [N(INITIAL_CONTACT)],\n                          \
    \ [[N(HTTP_CERT_LOOKUP_SUPPORTED)], CERTREQ+],\n                           [IDr],\n\
    \                           AUTH,\n                           [CP(CFG_REQUEST)],\n\
    \                           [N(IPCOMP_SUPPORTED)+],\n                        \
    \   [N(USE_TRANSPORT_MODE)],\n                           [N(ESP_TFC_PADDING_NOT_SUPPORTED)],\n\
    \                           [N(NON_FIRST_FRAGMENTS_ALSO)],\n                 \
    \          SA, TSi, TSr,\n                           [V+]\n   response       \
    \     <-- IDr, [CERT+],\n                           AUTH,\n                  \
    \         [CP(CFG_REPLY)],\n                           [N(IPCOMP_SUPPORTED)],\n\
    \                           [N(USE_TRANSPORT_MODE)],\n                       \
    \    [N(ESP_TFC_PADDING_NOT_SUPPORTED)],\n                           [N(NON_FIRST_FRAGMENTS_ALSO)],\n\
    \                           SA, TSi, TSr,\n                           [N(ADDITIONAL_TS_POSSIBLE)],\n\
    \                           [V+]\n"
- title: A.3.  IKE_AUTH Exchange with EAP
  contents:
  - "A.3.  IKE_AUTH Exchange with EAP\n   first request       --> IDi,\n         \
    \                  [N(INITIAL_CONTACT)],\n                           [[N(HTTP_CERT_LOOKUP_SUPPORTED)],\
    \ CERTREQ+],\n                           [IDr],\n                           [CP(CFG_REQUEST)],\n\
    \                           [N(IPCOMP_SUPPORTED)+],\n                        \
    \   [N(USE_TRANSPORT_MODE)],\n                           [N(ESP_TFC_PADDING_NOT_SUPPORTED)],\n\
    \                           [N(NON_FIRST_FRAGMENTS_ALSO)],\n                 \
    \          SA, TSi, TSr,\n                           [V+]\n   first response \
    \     <-- IDr, [CERT+], AUTH,\n                           EAP,\n             \
    \              [V+]\n                     / --> EAP\n   repeat 1..N times |\n\
    \                     \\ <-- EAP\n   last request        --> AUTH\n   last response\
    \       <-- AUTH,\n                           [CP(CFG_REPLY)],\n             \
    \              [N(IPCOMP_SUPPORTED)],\n                           [N(USE_TRANSPORT_MODE)],\n\
    \                           [N(ESP_TFC_PADDING_NOT_SUPPORTED)],\n            \
    \               [N(NON_FIRST_FRAGMENTS_ALSO)],\n                           SA,\
    \ TSi, TSr,\n                           [N(ADDITIONAL_TS_POSSIBLE)],\n       \
    \                    [V+]\n"
- title: A.4.  CREATE_CHILD_SA Exchange for Creating/Rekeying CHILD_SAs
  contents:
  - "A.4.  CREATE_CHILD_SA Exchange for Creating/Rekeying CHILD_SAs\n   request  \
    \           --> [N(REKEY_SA)],\n                           [N(IPCOMP_SUPPORTED)+],\n\
    \                           [N(USE_TRANSPORT_MODE)],\n                       \
    \    [N(ESP_TFC_PADDING_NOT_SUPPORTED)],\n                           [N(NON_FIRST_FRAGMENTS_ALSO)],\n\
    \                           SA, Ni, [KEi], TSi, TSr\n   response            <--\
    \ [N(IPCOMP_SUPPORTED)],\n                           [N(USE_TRANSPORT_MODE)],\n\
    \                           [N(ESP_TFC_PADDING_NOT_SUPPORTED)],\n            \
    \               [N(NON_FIRST_FRAGMENTS_ALSO)],\n                           SA,\
    \ Nr, [KEr], TSi, TSr,\n                           [N(ADDITIONAL_TS_POSSIBLE)]\n"
- title: A.5.  CREATE_CHILD_SA Exchange for Rekeying the IKE_SA
  contents:
  - "A.5.  CREATE_CHILD_SA Exchange for Rekeying the IKE_SA\n   request          \
    \   --> SA, Ni, [KEi]\n   response            <-- SA, Nr, [KEr]\n"
- title: A.6.  INFORMATIONAL Exchange
  contents:
  - "A.6.  INFORMATIONAL Exchange\n   request             --> [N+],\n            \
    \               [D+],\n                           [CP(CFG_REQUEST)]\n   response\
    \            <-- [N+],\n                           [D+],\n                   \
    \        [CP(CFG_REPLY)]\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Pasi Eronen\n   Nokia Research Center\n   P.O. Box 407\n\
    \   FIN-00045 Nokia Group\n   Finland\n   EMail: pasi.eronen@nokia.com\n   Paul\
    \ Hoffman\n   VPN Consortium\n   127 Segre Place\n   Santa Cruz, CA 95060\n  \
    \ USA\n   EMail: paul.hoffman@vpnc.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
