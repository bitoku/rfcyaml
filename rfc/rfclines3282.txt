Abstract This document defines a "Content language:" header, for use in cases where one desires to indicate the language of something that has RFC 822 like headers, like MIME body parts or Web documents, and an "Accept Language:" header for use in cases where one wishes to indicate one's preferences with regard to language.
There are a number of languages presently or previously used by human beings in this world.
A great number of these people would prefer to have information presented in a language which they understand.
In some contexts, it is possible to have information available in more than one language, or it might be possible to provide tools (such as dictionaries) to assist in the understanding of a language.
In other cases, it may be desirable to use a computer program to convert information from one format (such as plaintext) into another (such as computer synthesized speech, or Braille, or high quality print renderings).
A prerequisite for any such function is a means of labelling the information content with an identifier for the language that is used in this information content, such as is defined by [TAGS].
This document specifies a protocol element for use with protocols that use RFC 822 like headers for carrying language tags as defined in [TAGS].
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC 2119].
The Content language header The "Content Language" header is intended for use in the case where one desires to indicate the language(s) of something that has RFC 822 like headers, such as MIME body parts or Web documents.
In the more strict RFC 2234 ABNF:
The Content Language header may list several languages in a comma  separated list.
The CFWS construct is intended to function like the whitespace convention in RFC 822, which means also that one can place parenthesized comments anywhere in the language sequence, or use continuation lines.
A formal definition is given in RFC 2822 [RFC2822].
2.1 Examples of Content language values Voice recording from Liverpool downtown Content type: audio/basic Content Language: en scouse Document in Mingo, an American Indian language which does not have an ISO 639 code
: Content type: text/plain Content Language:
i mingo A English French dictionary Content type: application/dictionary Content Language:
en, fr (This is a dictionary)
An official European Commission document (in a few of its official languages):
multipart/alternative Content Language: da, de, el,
An excerpt from Star Trek Content type: video/mpeg Content Language: i klingon 3.
The Accept Language header The "Accept Language" header is intended for use in cases where a user or a process desires to identify the preferred language(s)
when RFC 822 like headers, such as MIME body parts or Web documents, are used.
A slightly more restrictive RFC 2234 ABNF definition is: Accept Language
A more liberal RFC 2234 ABNF definition is: Obs accept language
this specification says that conforming implementations MUST accept the obs accept language syntax, but MUST NOT generate it; all generated messages MUST conform to the Accept  Language syntax.
The syntax and semantics of language range is defined in [TAGS].
The Accept Language header may list several language ranges in a comma  separated list, and each may include a quality value Q.
If no Q values are given, the language ranges are given in priority order, with the leftmost language range being the most preferred language; this is an extension to the HTTP/1.1 rules, but matches current practice.
If Q values are given, refer to HTTP/1.1 [RFC 2616] for the details on how to evaluate it.
The only security issue that has been raised with language tags since the publication of RFC 1766, which stated that "Security issues are believed to be irrelevant to this memo", is a concern with language ranges used in content negotiation that they may be used to infer the nationality of the sender, and thus identify potential targets for surveillance.
This is a special case of the general problem that anything you send is visible to the receiving party; it is useful to be aware that such concerns can exist in some cases.
The exact magnitude of the threat, and any possible countermeasures, is left to each application protocol.
Character set considerations This document adds no new considerations beyond what is mentioned in [TAGS].
Appendix A: Changes from RFC 1766
The definition of the language tags has been split, and is now RFC 3066.
The differences parameter to multipart/alternative is no longer part of this standard, because no implementations of the function were ever found.
if you need the information.
The ABNF for content language has been updated to use the RFC 2234 ABNF.
