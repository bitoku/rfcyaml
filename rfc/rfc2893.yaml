- title: __initial_text__
  contents:
  - '            Transition Mechanisms for IPv6 Hosts and Routers

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies IPv4 compatibility mechanisms that can be\n\
    \   implemented by IPv6 hosts and routers.  These mechanisms include\n   providing\
    \ complete implementations of both versions of the Internet\n   Protocol (IPv4\
    \ and IPv6), and tunneling IPv6 packets over IPv4\n   routing infrastructures.\
    \  They are designed to allow IPv6 nodes to\n   maintain complete compatibility\
    \ with IPv4, which should greatly\n   simplify the deployment of IPv6 in the Internet,\
    \ and facilitate the\n   eventual transition of the entire Internet to IPv6. \
    \ This document\n   obsoletes RFC 1933.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction.............................................\
    \    2\n      1.1.  Terminology.........................................    3\n\
    \      1.2.  Structure of this Document..........................    5\n   2.\
    \  Dual IP Layer Operation..................................    6\n      2.1.\
    \  Address Configuration...............................    7\n      2.2.  DNS.................................................\
    \    7\n      2.3.  Advertising Addresses in the DNS....................    8\n\
    \   3.  Common Tunneling Mechanisms..............................    9\n     \
    \ 3.1.  Encapsulation.......................................   11\n      3.2.\
    \  Tunnel MTU and Fragmentation........................   11\n      3.3.  Hop\
    \ Limit...........................................   13\n      3.4.  Handling\
    \ IPv4 ICMP errors...........................   13\n      3.5.  IPv4 Header Construction............................\
    \   15\n      3.6.  Decapsulation.......................................   16\n\
    \      3.7.  Link-Local Addresses................................   17\n     \
    \ 3.8.  Neighbor Discovery over Tunnels.....................   18\n   4.  Configured\
    \ Tunneling.....................................   18\n      4.1.  Default Configured\
    \ Tunnel...........................   19\n      4.2.  Default Configured Tunnel\
    \ using IPv4 \"Anycast Address\" 19\n      4.3.  Ingress Filtering...................................\
    \   20\n   5.  Automatic Tunneling......................................   20\n\
    \      5.1.  IPv4-Compatible Address Format......................   20\n     \
    \ 5.2.  IPv4-Compatible Address Configuration...............   21\n      5.3.\
    \  Automatic Tunneling Operation.......................   22\n      5.4.  Use\
    \ With Default Configured Tunnels.................   22\n      5.5.  Source Address\
    \ Selection............................   23\n      5.6.  Ingress Filtering...................................\
    \   23\n   6.  Acknowledgments..........................................   24\n\
    \   7.  Security Considerations..................................   24\n   8.\
    \  Authors' Addresses.......................................   24\n   9.  References...............................................\
    \   25\n   10.  Changes from RFC 1933...................................   26\n\
    \   11.  Full Copyright Statement................................   29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The key to a successful IPv6 transition is compatibility\
    \ with the\n   large installed base of IPv4 hosts and routers.  Maintaining\n\
    \   compatibility with IPv4 while deploying IPv6 will streamline the task\n  \
    \ of transitioning the Internet to IPv6.  This specification defines a\n   set\
    \ of mechanisms that IPv6 hosts and routers may implement in order\n   to be compatible\
    \ with IPv4 hosts and routers.\n   The mechanisms in this document are designed\
    \ to be employed by IPv6\n   hosts and routers that need to interoperate with\
    \ IPv4 hosts and\n   utilize IPv4 routing infrastructures.  We expect that most\
    \ nodes in\n   the Internet will need such compatibility for a long time to come,\n\
    \   and perhaps even indefinitely.\n   However, IPv6 may be used in some environments\
    \ where interoperability\n   with IPv4 is not required.  IPv6 nodes that are designed\
    \ to be used\n   in such environments need not use or even implement these mechanisms.\n\
    \   The mechanisms specified here include:\n   -  Dual IP layer (also known as\
    \ Dual Stack):  A technique for\n      providing complete support for both Internet\
    \ protocols -- IPv4 and\n      IPv6 -- in hosts and routers.\n   -  Configured\
    \ tunneling of IPv6 over IPv4:  Point-to-point tunnels\n      made by encapsulating\
    \ IPv6 packets within IPv4 headers to carry\n      them over IPv4 routing infrastructures.\n\
    \   -  IPv4-compatible IPv6 addresses:  An IPv6 address format that\n      employs\
    \ embedded IPv4 addresses.\n   -  Automatic tunneling of IPv6 over IPv4:  A mechanism\
    \ for using\n      IPv4-compatible addresses to automatically tunnel IPv6 packets\n\
    \      over IPv4 networks.\n   The mechanisms defined here are intended to be\
    \ part of a \"transition\n   toolbox\" -- a growing collection of techniques which\
    \ implementations\n   and users may employ to ease the transition.  The tools\
    \ may be used\n   as needed.  Implementations and sites decide which techniques\
    \ are\n   appropriate to their specific needs.  This document defines the\n  \
    \ initial core set of transition mechanisms, but these are not expected\n   to\
    \ be the only tools available.  Additional transition and\n   compatibility mechanisms\
    \ are expected to be developed in the future,\n   with new documents being written\
    \ to specify them.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The following terms are used in this document:\n   Types\
    \ of Nodes\n      IPv4-only node:\n         A host or router that implements only\
    \ IPv4.  An IPv4-only node\n         does not understand IPv6.  The installed\
    \ base of IPv4 hosts and\n         routers existing before the transition begins\
    \ are IPv4-only\n         nodes.\n      IPv6/IPv4 node:\n         A host or router\
    \ that implements both IPv4 and IPv6.\n      IPv6-only node:\n         A host\
    \ or router that implements IPv6, and does not implement\n         IPv4.  The\
    \ operation of IPv6-only nodes is not addressed here.\n      IPv6 node:\n    \
    \     Any host or router that implements IPv6.  IPv6/IPv4 and IPv6-\n        \
    \ only nodes are both IPv6 nodes.\n      IPv4 node:\n         Any host or router\
    \ that implements IPv4.  IPv6/IPv4 and IPv4-\n         only nodes are both IPv4\
    \ nodes.\n   Types of IPv6 Addresses\n      IPv4-compatible IPv6 address:\n  \
    \       An IPv6 address bearing the high-order 96-bit prefix\n         0:0:0:0:0:0,\
    \ and an IPv4 address in the low-order 32-bits.\n         IPv4-compatible addresses\
    \ are used by IPv6/IPv4 nodes which\n         perform automatic tunneling,\n \
    \     IPv6-native address:\n         The remainder of the IPv6 address space.\
    \  An IPv6 address that\n         bears a prefix other than 0:0:0:0:0:0.\n   Techniques\
    \ Used in the Transition\n      IPv6-over-IPv4 tunneling:\n         The technique\
    \ of encapsulating IPv6 packets within IPv4 so that\n         they can be carried\
    \ across IPv4 routing infrastructures.\n      Configured tunneling:\n        \
    \ IPv6-over-IPv4 tunneling where the IPv4 tunnel endpoint address\n         is\
    \ determined by configuration information on the encapsulating\n         node.\
    \  The tunnels can be either unidirectional or\n         bidirectional.  Bidirectional\
    \ configured tunnels behave as\n         virtual point-to-point links.\n     \
    \ Automatic tunneling:\n         IPv6-over-IPv4 tunneling where the IPv4 tunnel\
    \ endpoint address\n         is determined from the IPv4 address embedded in the\
    \ IPv4-\n         compatible destination address of the IPv6 packet being\n  \
    \       tunneled.\n      IPv4 multicast tunneling:\n         IPv6-over-IPv4 tunneling\
    \ where the IPv4 tunnel endpoint address\n         is determined using Neighbor\
    \ Discovery [7].  Unlike configured\n         tunneling this does not require\
    \ any address configuration and\n         unlike automatic tunneling it does not\
    \ require the use of\n         IPv4-compatible addresses.  However, the mechanism\
    \ assumes that\n         the IPv4 infrastructure supports IPv4 multicast.  Specified\
    \ in\n         [3] and not further discussed in this document.\n   Other transition\
    \ mechanisms, including other tunneling mechanisms,\n   are outside the scope\
    \ of this document.\n   Modes of operation of IPv6/IPv4 nodes\n      IPv6-only\
    \ operation:\n         An IPv6/IPv4 node with its IPv6 stack enabled and its IPv4\n\
    \         stack disabled.\n      IPv4-only operation:\n         An IPv6/IPv4 node\
    \ with its IPv4 stack enabled and its IPv6\n         stack disabled.\n      IPv6/IPv4\
    \ operation:\n         An IPv6/IPv4 node with both stacks enabled.\n   The keywords\
    \ MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED,\
    \ MAY, and OPTIONAL, when they appear in this\n   document, are to be interpreted\
    \ as described in [16].\n"
- title: 1.2.  Structure of this Document
  contents:
  - "1.2.  Structure of this Document\n   The remainder of this document is organized\
    \ as follows:\n   -  Section 2 discusses the operation of nodes with a dual IP\
    \ layer,\n      IPv6/IPv4 nodes.\n   -  Section 3 discusses the common mechanisms\
    \ used in both of the\n      IPv6-over-IPv4 tunneling techniques.\n   -  Section\
    \ 4 discusses configured tunneling.\n   -  Section 5 discusses automatic tunneling\
    \ and the IPv4-compatible\n      IPv6 address format.\n"
- title: 2.  Dual IP Layer Operation
  contents:
  - "2.  Dual IP Layer Operation\n   The most straightforward way for IPv6 nodes to\
    \ remain compatible with\n   IPv4-only nodes is by providing a complete IPv4 implementation.\
    \  IPv6\n   nodes that provide a complete IPv4 and IPv6 implementations are\n\
    \   called \"IPv6/IPv4 nodes.\"  IPv6/IPv4 nodes have the ability to send\n  \
    \ and receive both IPv4 and IPv6 packets.  They can directly\n   interoperate\
    \ with IPv4 nodes using IPv4 packets, and also directly\n   interoperate with\
    \ IPv6 nodes using IPv6 packets.\n   Even though a node may be equipped to support\
    \ both protocols, one or\n   the other stack may be disabled for operational reasons.\
    \  Thus\n   IPv6/IPv4 nodes may be operated in one of three modes:\n   -  With\
    \ their IPv4 stack enabled and their IPv6 stack disabled.\n   -  With their IPv6\
    \ stack enabled and their IPv4 stack disabled.\n   -  With both stacks enabled.\n\
    \   IPv6/IPv4 nodes with their IPv6 stack disabled will operate like\n   IPv4-only\
    \ nodes.  Similarly, IPv6/IPv4 nodes with their IPv4 stacks\n   disabled will\
    \ operate like IPv6-only nodes.  IPv6/IPv4 nodes MAY\n   provide a configuration\
    \ switch to disable either their IPv4 or IPv6\n   stack.\n   The dual IP layer\
    \ technique may or may not be used in conjunction\n   with the IPv6-over-IPv4\
    \ tunneling techniques, which are described in\n   sections 3, 4 and 5.  An IPv6/IPv4\
    \ node that supports tunneling MAY\n   support only configured tunneling, or both\
    \ configured and automatic\n   tunneling.  Thus three modes of tunneling support\
    \ are possible:\n   -  IPv6/IPv4 node that does not perform tunneling.\n   - \
    \ IPv6/IPv4 node that performs configured tunneling only.\n   -  IPv6/IPv4 node\
    \ that performs configured tunneling and automatic\n      tunneling.\n"
- title: 2.1.  Address Configuration
  contents:
  - "2.1.  Address Configuration\n   Because they support both protocols, IPv6/IPv4\
    \ nodes may be\n   configured with both IPv4 and IPv6 addresses.  IPv6/IPv4 nodes\
    \ use\n   IPv4 mechanisms (e.g. DHCP) to acquire their IPv4 addresses, and IPv6\n\
    \   protocol mechanisms (e.g. stateless address autoconfiguration) to\n   acquire\
    \ their IPv6-native addresses.  Section 5.2 describes a\n   mechanism by which\
    \ IPv6/IPv4 nodes that support automatic tunneling\n   MAY use IPv4 protocol mechanisms\
    \ to acquire their IPv4-compatible\n   IPv6 address.\n"
- title: 2.2.  DNS
  contents:
  - "2.2.  DNS\n   The Domain Naming System (DNS) is used in both IPv4 and IPv6 to\
    \ map\n   between hostnames and IP addresses.  A new resource record type named\n\
    \   \"A6\" has been defined for IPv6 addresses [6] with support for an\n   earlier\
    \ record named \"AAAA\".  Since IPv6/IPv4 nodes must be able to\n   interoperate\
    \ directly with both IPv4 and IPv6 nodes, they must\n   provide resolver libraries\
    \ capable of dealing with IPv4 \"A\" records\n   as well as IPv6 \"A6\" and \"\
    AAAA\" records.\n   DNS resolver libraries on IPv6/IPv4 nodes MUST be capable\
    \ of handling\n   both A6/AAAA and A records.  However, when a query locates an\
    \ A6/AAAA\n   record holding an IPv6 address, and an A record holding an IPv4\n\
    \   address, the resolver library MAY filter or order the results\n   returned\
    \ to the application in order to influence the version of IP\n   packets used\
    \ to communicate with that node.  In terms of filtering,\n   the resolver library\
    \ has three alternatives:\n   -  Return only the IPv6 address to the application.\n\
    \   -  Return only the IPv4 address to the application.\n   -  Return both addresses\
    \ to the application.\n   If it returns only the IPv6 address, the application\
    \ will communicate\n   with the node using IPv6.  If it returns only the IPv4\
    \ address, the\n   application will communicate with the node using IPv4.  If\
    \ it returns\n   both addresses, the application will have the choice which address\
    \ to\n   use, and thus which IP protocol to employ.\n   If it returns both, the\
    \ resolver MAY elect to order the addresses --\n   IPv6 first, or IPv4 first.\
    \  Since most applications try the addresses\n   in the order they are returned\
    \ by the resolver, this can affect the\n   IP version \"preference\" of applications.\n\
    \   The decision to filter or order DNS results is implementation\n   specific.\
    \  IPv6/IPv4 nodes MAY provide policy configuration to\n   control filtering or\
    \ ordering of addresses returned by the resolver,\n   or leave the decision entirely\
    \ up to the application.\n   An implementation MUST allow the application to control\
    \ whether or\n   not such filtering takes place.\n"
- title: 2.3.  Advertising Addresses in the DNS
  contents:
  - "2.3.  Advertising Addresses in the DNS\n   There are some constraint placed on\
    \ the use of the DNS during\n   transition.  Most of these are obvious but are\
    \ stated here for\n   completeness.\n   The recommendation is that A6/AAAA records\
    \ for a node should not be\n   added to the DNS until all of these are true:\n\
    \      1) The address is assigned to the interface on the node.\n      2) The\
    \ address is configured on the interface.\n      3) The interface is on a link\
    \ which is connected to the IPv6\n         infrastructure.\n   If an IPv6 node\
    \ is isolated from an IPv6 perspective (e.g. it is not\n   connected to the 6bone\
    \ to take a concrete example) constraint #3\n   would mean that it should not\
    \ have an address in the DNS.\n   This works great when other dual stack nodes\
    \ tries to contact the\n   isolated dual stack node.  There is no IPv6 address\
    \ in the DNS thus\n   the peer doesn't even try communicating using IPv6 but goes\
    \ directly\n   to IPv4 (we are assuming both nodes have A records in the DNS.)\n\
    \   However, this does not work well when the isolated node is trying to\n   establish\
    \ communication.  Even though it does not have an IPv6\n   address in the DNS\
    \ it will find A6/AAAA records in the DNS for the\n   peer.  Since the isolated\
    \ node has IPv6 addresses assigned to at\n   least one interface it will try to\
    \ communicate using IPv6.  If it has\n   no IPv6 route to the 6bone (e.g. because\
    \ the local router was\n   upgraded to advertise IPv6 addresses using Neighbor\
    \ Discovery but\n   that router doesn't have any IPv6 routes) this communication\
    \ will\n   fail.  Typically this means a few minutes of delay as TCP times out.\n\
    \   The TCP specification says that ICMP unreachable messages could be\n   due\
    \ to routing transients thus they should not immediately terminate\n   the TCP\
    \ connection.  This means that the normal TCP timeout of a few\n   minutes apply.\
    \  Once TCP times out the application will hopefully try\n   the IPv4 addresses\
    \ based on the A records in the DNS, but this will\n   be painfully slow.\n  \
    \ A possible implication of the recommendations above is that, if one\n   enables\
    \ IPv6 on a node on a link without IPv6 infrastructure, and\n   choose to add\
    \ A6/AAAA records to the DNS for that node, then external\n   IPv6 nodes that\
    \ might see these A6/AAAA records will possibly try to\n   reach that node using\
    \ IPv6 and suffer delays or communication failure\n   due to unreachability. \
    \ (A delay is incurred if the application\n   correctly falls back to using IPv4\
    \ if it can not establish\n   communication using IPv6 addresses.  If this fallback\
    \ is not done the\n   application would fail to communicate in this case.)  Thus\
    \ it is\n   suggested that either the recommendations be followed, or care be\n\
    \   taken to only do so with nodes that will not be impacted by external\n   accessing\
    \ delays and/or communication failure.\n   In the future when a site or node removes\
    \ the support for IPv4 the\n   above recommendations apply to when the A records\
    \ for the node(s)\n   should be removed from the DNS.\n"
- title: 3.  Common Tunneling Mechanisms
  contents:
  - "3.  Common Tunneling Mechanisms\n   In most deployment scenarios, the IPv6 routing\
    \ infrastructure will be\n   built up over time.  While the IPv6 infrastructure\
    \ is being deployed,\n   the existing IPv4 routing infrastructure can remain functional,\
    \ and\n   can be used to carry IPv6 traffic.  Tunneling provides a way to\n  \
    \ utilize an existing IPv4 routing infrastructure to carry IPv6\n   traffic.\n\
    \   IPv6/IPv4 hosts and routers can tunnel IPv6 datagrams over regions of\n  \
    \ IPv4 routing topology by encapsulating them within IPv4 packets.\n   Tunneling\
    \ can be used in a variety of ways:\n   -  Router-to-Router.  IPv6/IPv4 routers\
    \ interconnected by an IPv4\n      infrastructure can tunnel IPv6 packets between\
    \ themselves.  In\n      this case, the tunnel spans one segment of the end-to-end\
    \ path\n      that the IPv6 packet takes.\n   -  Host-to-Router.  IPv6/IPv4 hosts\
    \ can tunnel IPv6 packets to an\n      intermediary IPv6/IPv4 router that is reachable\
    \ via an IPv4\n      infrastructure.  This type of tunnel spans the first segment\
    \ of\n      the packet's end-to-end path.\n   -  Host-to-Host.  IPv6/IPv4 hosts\
    \ that are interconnected by an IPv4\n      infrastructure can tunnel IPv6 packets\
    \ between themselves.  In\n      this case, the tunnel spans the entire end-to-end\
    \ path that the\n      packet takes.\n   -  Router-to-Host.  IPv6/IPv4 routers\
    \ can tunnel IPv6 packets to\n      their final destination IPv6/IPv4 host.  This\
    \ tunnel spans only\n      the last segment of the end-to-end path.\n   Tunneling\
    \ techniques are usually classified according to the\n   mechanism by which the\
    \ encapsulating node determines the address of\n   the node at the end of the\
    \ tunnel.  In the first two tunneling\n   methods listed above -- router-to-router\
    \ and host-to-router -- the\n   IPv6 packet is being tunneled to a router.  The\
    \ endpoint of this type\n   of tunnel is an intermediary router which must decapsulate\
    \ the IPv6\n   packet and forward it on to its final destination.  When tunneling\
    \ to\n   a router, the endpoint of the tunnel is different from the\n   destination\
    \ of the packet being tunneled.  So the addresses in the\n   IPv6 packet being\
    \ tunneled can not provide the IPv4 address of the\n   tunnel endpoint.  Instead,\
    \ the tunnel endpoint address must be\n   determined from configuration information\
    \ on the node performing the\n   tunneling.  We use the term \"configured tunneling\"\
    \ to describe the\n   type of tunneling where the endpoint is explicitly configured.\n\
    \   In the last two tunneling methods -- host-to-host and router-to-host\n   --\
    \ the IPv6 packet is tunneled all the way to its final destination.\n   In this\
    \ case, the destination address of both the IPv6 packet and the\n   encapsulating\
    \ IPv4 header identify the same node!  This fact can be\n   exploited by encoding\
    \ information in the IPv6 destination address\n   that will allow the encapsulating\
    \ node to determine tunnel endpoint\n   IPv4 address automatically.  Automatic\
    \ tunneling employs this\n   technique, using an special IPv6 address format with\
    \ an embedded IPv4\n   address to allow tunneling nodes to automatically derive\
    \ the tunnel\n   endpoint IPv4 address.  This eliminates the need to explicitly\n\
    \   configure the tunnel endpoint address, greatly simplifying\n   configuration.\n\
    \   The two tunneling techniques -- automatic and configured -- differ\n   primarily\
    \ in how they determine the tunnel endpoint address.  Most of\n   the underlying\
    \ mechanisms are the same:\n   -  The entry node of the tunnel (the encapsulating\
    \ node) creates an\n      encapsulating IPv4 header and transmits the encapsulated\
    \ packet.\n   -  The exit node of the tunnel (the decapsulating node) receives\
    \ the\n      encapsulated packet, reassembles the packet if needed, removes the\n\
    \      IPv4 header, updates the IPv6 header, and processes the received\n    \
    \  IPv6 packet.\n   -  The encapsulating node MAY need to maintain soft state\
    \ information\n      for each tunnel recording such parameters as the MTU of the\
    \ tunnel\n      in order to process IPv6 packets forwarded into the tunnel.  Since\n\
    \      the number of tunnels that any one host or router may be using may\n  \
    \    grow to be quite large, this state information can be cached and\n      discarded\
    \ when not in use.\n   The remainder of this section discusses the common mechanisms\
    \ that\n   apply to both types of tunneling.  Subsequent sections discuss how\n\
    \   the tunnel endpoint address is determined for automatic and\n   configured\
    \ tunneling.\n"
- title: 3.1.  Encapsulation
  contents:
  - "3.1.  Encapsulation\n   The encapsulation of an IPv6 datagram in IPv4 is shown\
    \ below:\n                                             +-------------+\n     \
    \                                        |    IPv4     |\n                   \
    \                          |   Header    |\n             +-------------+     \
    \            +-------------+\n             |    IPv6     |                 | \
    \   IPv6     |\n             |   Header    |                 |   Header    |\n\
    \             +-------------+                 +-------------+\n             |\
    \  Transport  |                 |  Transport  |\n             |   Layer     |\
    \      ===>       |   Layer     |\n             |   Header    |              \
    \   |   Header    |\n             +-------------+                 +-------------+\n\
    \             |             |                 |             |\n             ~\
    \    Data     ~                 ~    Data     ~\n             |             |\
    \                 |             |\n             +-------------+              \
    \   +-------------+\n                      Encapsulating IPv6 in IPv4\n   In addition\
    \ to adding an IPv4 header, the encapsulating node also has\n   to handle some\
    \ more complex issues:\n   -  Determine when to fragment and when to report an\
    \ ICMP \"packet too\n      big\" error back to the source.\n   -  How to reflect\
    \ IPv4 ICMP errors from routers along the tunnel path\n      back to the source\
    \ as IPv6 ICMP errors.\n   Those issues are discussed in the following sections.\n"
- title: 3.2.  Tunnel MTU and Fragmentation
  contents:
  - "3.2.  Tunnel MTU and Fragmentation\n   The encapsulating node could view encapsulation\
    \ as IPv6 using IPv4 as\n   a link layer with a very large MTU (65535-20 bytes\
    \ to be exact; 20\n   bytes \"extra\" are needed for the encapsulating IPv4 header).\
    \  The\n   encapsulating node would need only to report IPv6 ICMP \"packet too\n\
    \   big\" errors back to the source for packets that exceed this MTU.\n   However,\
    \ such a scheme would be inefficient for two reasons:\n   1) It would result in\
    \ more fragmentation than needed.  IPv4 layer\n      fragmentation SHOULD be avoided\
    \ due to the performance problems\n      caused by the loss unit being smaller\
    \ than the retransmission unit\n      [11].\n   2) Any IPv4 fragmentation occurring\
    \ inside the tunnel would have to\n      be reassembled at the tunnel endpoint.\
    \  For tunnels that terminate\n      at a router, this would require additional\
    \ memory to reassemble\n      the IPv4 fragments into a complete IPv6 packet before\
    \ that packet\n      could be forwarded onward.\n   The fragmentation inside the\
    \ tunnel can be reduced to a minimum by\n   having the encapsulating node track\
    \ the IPv4 Path MTU across the\n   tunnel, using the IPv4 Path MTU Discovery Protocol\
    \ [8] and recording\n   the resulting path MTU.  The IPv6 layer in the encapsulating\
    \ node can\n   then view a tunnel as a link layer with an MTU equal to the IPv4\
    \ path\n   MTU, minus the size of the encapsulating IPv4 header.\n   Note that\
    \ this does not completely eliminate IPv4 fragmentation in\n   the case when the\
    \ IPv4 path MTU would result in an IPv6 MTU less than\n   1280 bytes. (Any link\
    \ layer used by IPv6 has to have an MTU of at\n   least 1280 bytes [4].) In this\
    \ case the IPv6 layer has to \"see\" a\n   link layer with an MTU of 1280 bytes\
    \ and the encapsulating node has\n   to use IPv4 fragmentation in order to forward\
    \ the 1280 byte IPv6\n   packets.\n   The encapsulating node can employ the following\
    \ algorithm to\n   determine when to forward an IPv6 packet that is larger than\
    \ the\n   tunnel's path MTU using IPv4 fragmentation, and when to return an\n\
    \   IPv6 ICMP \"packet too big\" message:\n        if (IPv4 path MTU - 20) is\
    \ less than or equal to 1280\n                if packet is larger than 1280 bytes\n\
    \                        Send IPv6 ICMP \"packet too big\" with MTU = 1280.\n\
    \                        Drop packet.\n                else\n                \
    \        Encapsulate but do not set the Don't Fragment\n                     \
    \   flag in the IPv4 header.  The resulting IPv4\n                        packet\
    \ might be fragmented by the IPv4 layer on\n                        the encapsulating\
    \ node or by some router along\n                        the IPv4 path.\n     \
    \           endif\n        else\n                if packet is larger than (IPv4\
    \ path MTU - 20)\n                        Send IPv6 ICMP \"packet too big\" with\n\
    \                        MTU = (IPv4 path MTU - 20).\n                       \
    \ Drop packet.\n                else\n                        Encapsulate and\
    \ set the Don't Fragment flag\n                        in the IPv4 header.\n \
    \               endif\n        endif\n   Encapsulating nodes that have a large\
    \ number of tunnels might not be\n   able to store the IPv4 Path MTU for all tunnels.\
    \  Such nodes can, at\n   the expense of additional fragmentation in the network,\
    \ avoid using\n   the IPv4 Path MTU algorithm across the tunnel and instead use\
    \ the MTU\n   of the link layer (under IPv4) in the above algorithm instead of\
    \ the\n   IPv4 path MTU.\n   In this case the Don't Fragment bit MUST NOT be set\
    \ in the\n   encapsulating IPv4 header.\n"
- title: 3.3.  Hop Limit
  contents:
  - "3.3.  Hop Limit\n   IPv6-over-IPv4 tunnels are modeled as \"single-hop\".  That\
    \ is, the\n   IPv6 hop limit is decremented by 1 when an IPv6 packet traverses\
    \ the\n   tunnel.  The single-hop model serves to hide the existence of a\n  \
    \ tunnel.  The tunnel is opaque to users of the network, and is not\n   detectable\
    \ by network diagnostic tools such as traceroute.\n   The single-hop model is\
    \ implemented by having the encapsulating and\n   decapsulating nodes process\
    \ the IPv6 hop limit field as they would if\n   they were forwarding a packet\
    \ on to any other datalink.  That is,\n   they decrement the hop limit by 1 when\
    \ forwarding an IPv6 packet.\n   (The originating node and final destination do\
    \ not decrement the hop\n   limit.)\n   The TTL of the encapsulating IPv4 header\
    \ is selected in an\n   implementation dependent manner.  The current suggested\
    \ value is\n   published in the \"Assigned Numbers RFC.  Implementations MAY provide\n\
    \   a mechanism to allow the administrator to configure the IPv4 TTL such\n  \
    \ as the one specified in the IP Tunnel MIB [17].\n"
- title: 3.4.  Handling IPv4 ICMP errors
  contents:
  - "3.4.  Handling IPv4 ICMP errors\n   In response to encapsulated packets it has\
    \ sent into the tunnel, the\n   encapsulating node might receive IPv4 ICMP error\
    \ messages from IPv4\n   routers inside the tunnel.  These packets are addressed\
    \ to the\n   encapsulating node because it is the IPv4 source of the encapsulated\n\
    \   packet.\n   The ICMP \"packet too big\" error messages are handled according\
    \ to\n   IPv4 Path MTU Discovery [8] and the resulting path MTU is recorded in\n\
    \   the IPv4 layer.  The recorded path MTU is used by IPv6 to determine\n   if\
    \ an IPv6 ICMP \"packet too big\" error has to be generated as\n   described in\
    \ section 3.2.\n   The handling of other types of ICMP error messages depends\
    \ on how\n   much information is included in the \"packet in error\" field, which\n\
    \   holds the encapsulated packet that caused the error.\n   Many older IPv4 routers\
    \ return only 8 bytes of data beyond the IPv4\n   header of the packet in error,\
    \ which is not enough to include the\n   address fields of the IPv6 header.  More\
    \ modern IPv4 routers are\n   likely to return enough data beyond the IPv4 header\
    \ to include the\n   entire IPv6 header and possibly even the data beyond that.\n\
    \   If the offending packet includes enough data, the encapsulating node\n   MAY\
    \ extract the encapsulated IPv6 packet and use it to generate an\n   IPv6 ICMP\
    \ message directed back to the originating IPv6 node, as\n   shown below:\n  \
    \                +--------------+\n                  | IPv4 Header  |\n      \
    \            | dst = encaps |\n                  |       node   |\n          \
    \        +--------------+\n                  |     ICMP     |\n              \
    \    |    Header    |\n           - -    +--------------+\n                  |\
    \ IPv4 Header  |\n                  | src = encaps |\n          IPv4    |    \
    \   node   |\n                  +--------------+   - -\n          Packet  |  \
    \  IPv6      |\n                  |    Header    |   Original IPv6\n         \
    \  in     +--------------+   Packet -\n                  |  Transport   |   Can\
    \ be used to\n          Error   |    Header    |   generate an\n             \
    \     +--------------+   IPv6 ICMP\n                  |              |   error\
    \ message\n                  ~     Data     ~   back to the source.\n        \
    \          |              |\n           - -    +--------------+   - -\n      IPv4\
    \ ICMP Error Message Returned to Encapsulating Node\n"
- title: 3.5.  IPv4 Header Construction
  contents:
  - "3.5.  IPv4 Header Construction\n   When encapsulating an IPv6 packet in an IPv4\
    \ datagram, the IPv4\n   header fields are set as follows:\n      Version:\n \
    \        4\n      IP Header Length in 32-bit words:\n         5 (There are no\
    \ IPv4 options in the encapsulating header.)\n      Type of Service:\n       \
    \  0. [Note that work underway in the IETF is redefining the Type\n         of\
    \ Service byte and as a result future RFCs might define a\n         different\
    \ behavior for the ToS byte when tunneling.]\n      Total Length:\n         Payload\
    \ length from IPv6 header plus length of IPv6 and IPv4\n         headers (i.e.\
    \ a constant 60 bytes).\n      Identification:\n         Generated uniquely as\
    \ for any IPv4 packet transmitted by the\n         system.\n      Flags:\n   \
    \      Set the Don't Fragment (DF) flag as specified in section 3.2.\n       \
    \  Set the More Fragments (MF) bit as necessary if fragmenting.\n      Fragment\
    \ offset:\n         Set as necessary if fragmenting.\n      Time to Live:\n  \
    \       Set in implementation-specific manner.\n      Protocol:\n         41 (Assigned\
    \ payload type number for IPv6)\n      Header Checksum:\n         Calculate the\
    \ checksum of the IPv4 header.\n      Source Address:\n         IPv4 address of\
    \ outgoing interface of the encapsulating node.\n      Destination Address:\n\
    \         IPv4 address of tunnel endpoint.\n   Any IPv6 options are preserved\
    \ in the packet (after the IPv6 header).\n"
- title: 3.6.  Decapsulation
  contents:
  - "3.6.  Decapsulation\n   When an IPv6/IPv4 host or a router receives an IPv4 datagram\
    \ that is\n   addressed to one of its own IPv4 address, and the value of the\n\
    \   protocol field is 41, it reassembles if the packet if it is\n   fragmented\
    \ at the IPv4 level, then it removes the IPv4 header and\n   submits the IPv6\
    \ datagram to its IPv6 layer code.\n   The decapsulating node MUST be capable\
    \ of reassembling an IPv4 packet\n   that is 1300 bytes (1280 bytes plus IPv4\
    \ header).\n   The decapsulation is shown below:\n           +-------------+\n\
    \           |    IPv4     |\n           |   Header    |\n           +-------------+\
    \                 +-------------+\n           |    IPv6     |                \
    \ |    IPv6     |\n           |   Header    |                 |   Header    |\n\
    \           +-------------+                 +-------------+\n           |  Transport\
    \  |                 |  Transport  |\n           |   Layer     |      ===>   \
    \    |   Layer     |\n           |   Header    |                 |   Header  \
    \  |\n           +-------------+                 +-------------+\n           |\
    \             |                 |             |\n           ~    Data     ~  \
    \               ~    Data     ~\n           |             |                 |\
    \             |\n           +-------------+                 +-------------+\n\
    \                       Decapsulating IPv6 from IPv4\n   When decapsulating the\
    \ packet, the IPv6 header is not modified.\n   [Note that work underway in the\
    \ IETF is redefining the Type of\n   Service byte and as a result future RFCs\
    \ might define a different\n   behavior for the ToS byte when decapsulating a\
    \ tunneled packet.]  If\n   the packet is subsequently forwarded, its hop limit\
    \ is decremented by\n   one.\n   As part of the decapsulation the node SHOULD\
    \ silently discard a\n   packet with an invalid IPv4 source address such as a\
    \ multicast\n   address, a broadcast address, 0.0.0.0, and 127.0.0.1.  In general\
    \ it\n   SHOULD apply the rules for martian filtering in [18] and ingress\n  \
    \ filtering [13] on the IPv4 source address.\n   The encapsulating IPv4 header\
    \ is discarded.\n   After the decapsulation the node SHOULD silently discard a\
    \ packet\n   with an invalid IPv6 source address.  This includes IPv6 multicast\n\
    \   addresses, the unspecified address, and the loopback address but also\n  \
    \ IPv4-compatible IPv6 source addresses where the IPv4 part of the\n   address\
    \ is an (IPv4) multicast address, broadcast address, 0.0.0.0,\n   or 127.0.0.1.\
    \  In general it SHOULD apply the rules for martian\n   filtering in [18] and\
    \ ingress filtering [13] on the IPv4-compatible\n   source address.\n   The decapsulating\
    \ node performs IPv4 reassembly before decapsulating\n   the IPv6 packet.  All\
    \ IPv6 options are preserved even if the\n   encapsulating IPv4 packet is fragmented.\n\
    \   After the IPv6 packet is decapsulated, it is processed almost the\n   same\
    \ as any received IPv6 packet.  The only difference being that a\n   decapsulated\
    \ packet MUST NOT be forwarded unless the node has been\n   explicitly configured\
    \ to forward such packets for the given IPv4\n   source address.  This configuration\
    \ can be implicit in e.g., having a\n   configured tunnel which matches the IPv4\
    \ source address.  This\n   restriction is needed to prevent tunneling to be used\
    \ as a tool to\n   circumvent ingress filtering [13].\n"
- title: 3.7.  Link-Local Addresses
  contents:
  - "3.7.  Link-Local Addresses\n   Both the configured and automatic tunnels are\
    \ IPv6 interfaces (over\n   the IPv4 \"link layer\") thus MUST have link-local\
    \ addresses.  The\n   link-local addresses are used by routing protocols operating\
    \ over the\n   tunnels.\n   The Interface Identifier [14] for such an Interface\
    \ SHOULD be the\n   32-bit IPv4 address of that interface, with the bytes in the\
    \ same\n   order in which they would appear in the header of an IPv4 packet,\n\
    \   padded at the left with zeros to a total of 64 bits.  Note that the\n   \"\
    Universal/Local\" bit is zero, indicating that the Interface\n   Identifier is\
    \ not globally unique.  When the host has more than one\n   IPv4 address in use\
    \ on the physical interface concerned, an\n   administrative choice of one of\
    \ these IPv4 addresses is made.\n   The IPv6 Link-local address [14] for an IPv4\
    \ virtual interface is\n   formed by appending the Interface Identifier, as defined\
    \ above, to\n   the prefix FE80::/64.\n   +-------+-------+-------+-------+-------+-------+------+------+\n\
    \   |  FE      80      00      00      00      00      00     00  |\n   +-------+-------+-------+-------+-------+-------+------+------+\n\
    \   |  00      00   |  00   |  00   |   IPv4 Address              |\n   +-------+-------+-------+-------+-------+-------+------+------+\n"
- title: 3.8.  Neighbor Discovery over Tunnels
  contents:
  - "3.8.  Neighbor Discovery over Tunnels\n   Automatic tunnels and unidirectional\
    \ configured tunnels are\n   considered to be unidirectional.  Thus the only aspects\
    \ of Neighbor\n   Discovery [7] and Stateless Address Autoconfiguration [5] that\
    \ apply\n   to these tunnels is the formation of the link-local address.\n   If\
    \ an implementation provides bidirectional configured tunnels it\n   MUST at least\
    \ accept and respond to the probe packets used by\n   Neighbor Unreachability\
    \ Detection [7].  Such implementations SHOULD\n   also send NUD probe packets\
    \ to detect when the configured tunnel\n   fails at which point the implementation\
    \ can use an alternate path to\n   reach the destination.  Note that Neighbor\
    \ Discovery allows that the\n   sending of NUD probes be omitted for router to\
    \ router links if the\n   routing protocol tracks bidirectional reachability.\n\
    \   For the purposes of Neighbor Discovery the automatic and configured\n   tunnels\
    \ specified in this document as assumed to NOT have a link-\n   layer address,\
    \ even though the link-layer (IPv4) does have address.\n   This means that a sender\
    \ of Neighbor Discovery packets\n   -  SHOULD NOT include Source Link Layer Address\
    \ options or Target\n      Link Layer Address options on the tunnel link.\n  \
    \ -  MUST silently ignore any received SLLA or TLLA options on the\n      tunnel\
    \ link.\n"
- title: 4.  Configured Tunneling
  contents:
  - "4.  Configured Tunneling\n   In configured tunneling, the tunnel endpoint address\
    \ is determined\n   from configuration information in the encapsulating node.\
    \  For each\n   tunnel, the encapsulating node must store the tunnel endpoint\n\
    \   address.  When an IPv6 packet is transmitted over a tunnel, the\n   tunnel\
    \ endpoint address configured for that tunnel is used as the\n   destination address\
    \ for the encapsulating IPv4 header.\n   The determination of which packets to\
    \ tunnel is usually made by\n   routing information on the encapsulating node.\
    \  This is usually done\n   via a routing table, which directs packets based on\
    \ their destination\n   address using the prefix mask and match technique.\n"
- title: 4.1.  Default Configured Tunnel
  contents:
  - "4.1.  Default Configured Tunnel\n   IPv6/IPv4 hosts that are connected to datalinks\
    \ with no IPv6 routers\n   MAY use a configured tunnel to reach an IPv6 router.\
    \  This tunnel\n   allows the host to communicate with the rest of the IPv6 Internet\n\
    \   (i.e. nodes with IPv6-native addresses).  If the IPv4 address of an\n   IPv6/IPv4\
    \ router bordering the IPv6 backbone is known, this can be\n   used as the tunnel\
    \ endpoint address.  This tunnel can be configured\n   into the routing table\
    \ as an IPv6 \"default route\".  That is, all IPv6\n   destination addresses will\
    \ match the route and could potentially\n   traverse the tunnel.  Since the \"\
    mask length\" of such a default route\n   is zero, it will be used only if there\
    \ are no other routes with a\n   longer mask that match the destination.  The\
    \ default configured\n   tunnel can be used in conjunction with automatic tunneling,\
    \ as\n   described in section 5.4.\n"
- title: 4.2.  Default Configured Tunnel using IPv4 "Anycast Address"
  contents:
  - "4.2.  Default Configured Tunnel using IPv4 \"Anycast Address\"\n   The tunnel\
    \ endpoint address of such a default tunnel could be the\n   IPv4 address of one\
    \ IPv6/IPv4 router at the border of the IPv6\n   backbone.  Alternatively, the\
    \ tunnel endpoint could be an IPv4\n   \"anycast address\".  With this approach,\
    \ multiple IPv6/IPv4 routers at\n   the border advertise IPv4 reachability to\
    \ the same IPv4 address.  All\n   of these routers accept packets to this address\
    \ as their own, and\n   will decapsulate IPv6 packets tunneled to this address.\
    \  When an\n   IPv6/IPv4 node sends an encapsulated packet to this address, it\
    \ will\n   be delivered to only one of the border routers, but the sending node\n\
    \   will not know which one.  The IPv4 routing system will generally\n   carry\
    \ the traffic to the closest router.\n   Using a default tunnel to an IPv4 \"\
    anycast address\" provides a high\n   degree of robustness since multiple border\
    \ router can be provided,\n   and, using the normal fallback mechanisms of IPv4\
    \ routing, traffic\n   will automatically switch to another router when one goes\
    \ down.\n   However, care must be taking when using such a default tunnel to\n\
    \   prevent different IPv4 fragments from arriving at different routers\n   for\
    \ reassembly.  This can be prevented by either avoiding\n   fragmentation of the\
    \ encapsulated packets (by ensuring an IPv4 MTU of\n   at least 1300 bytes) or\
    \ by preventing frequent changes to IPv4\n   routing.\n"
- title: 4.3.  Ingress Filtering
  contents:
  - "4.3.  Ingress Filtering\n   The decapsulating node MUST verify that the tunnel\
    \ source address is\n   acceptable before forwarding decapsulated packets to avoid\n\
    \   circumventing ingress filtering [13].  Note that packets which are\n   delivered\
    \ to transport protocols on the decapsulating node SHOULD NOT\n   be subject to\
    \ these checks.  For bidirectional configured tunnels\n   this is done by verifying\
    \ that the source address is the IPv4 address\n   of the other end of the tunnel.\
    \  For unidirectional configured\n   tunnels the decapsulating node MUST be configured\
    \ with a list of\n   source IPv4 address prefixes that are acceptable.  Such a\
    \ list MUST\n   default to not having any entries i.e. the node has to be explicitly\n\
    \   configured to forward decapsulated packets received over\n   unidirectional\
    \ configured tunnels.\n"
- title: 5.  Automatic Tunneling
  contents:
  - "5.  Automatic Tunneling\n   In automatic tunneling, the tunnel endpoint address\
    \ is determined by\n   the IPv4-compatible destination address of the IPv6 packet\
    \ being\n   tunneled.  Automatic tunneling allows IPv6/IPv4 nodes to communicate\n\
    \   over IPv4 routing infrastructures without pre-configuring tunnels.\n"
- title: 5.1.  IPv4-Compatible Address Format
  contents:
  - "5.1.  IPv4-Compatible Address Format\n   IPv6/IPv4 nodes that perform automatic\
    \ tunneling are assigned IPv4-\n   compatible address.  An IPv4-compatible address\
    \ is identified by an\n   all-zeros 96-bit prefix, and holds an IPv4 address in\
    \ the low-order\n   32-bits.  IPv4-compatible addresses are structured as follows:\n\
    \          |              96-bits                 |   32-bits    |\n         \
    \ +--------------------------------------+--------------+\n          |       \
    \     0:0:0:0:0:0               | IPv4 Address |\n          +--------------------------------------+--------------+\n\
    \                       IPv4-Compatible IPv6 Address Format\n   IPv4-compatible\
    \ addresses are assigned exclusively to nodes that\n   support automatic tunneling.\
    \  A node SHOULD be configured with an\n   IPv4-compatible address only if it\
    \ is prepared to accept IPv6 packets\n   destined to that address encapsulated\
    \ in IPv4 packets destined to the\n   embedded IPv4 address.\n   An IPv4-compatible\
    \ address is globally unique as long as the IPv4\n   address is not from the private\
    \ IPv4 address space [15].  An\n   implementation SHOULD behave as if its IPv4-compatible\
    \ address(es)\n   are assigned to the node's automatic tunneling interface, even\
    \ if the\n   implementation does not implement automatic tunneling using a concept\n\
    \   of interfaces.  Thus the IPv4-compatible address SHOULD NOT be viewed\n  \
    \ as being attached to e.g. an Ethernet interface i.e. implications\n   should\
    \ not use the Neighbor Discovery mechanisms like NUD [7] at the\n   Ethernet.\
    \  Any such interactions should be done using the\n   encapsulated packets i.e.\
    \ over the automatic tunneling (conceptual)\n   interface.\n"
- title: 5.2.  IPv4-Compatible Address Configuration
  contents:
  - "5.2.  IPv4-Compatible Address Configuration\n   An IPv6/IPv4 node with an IPv4-compatible\
    \ address uses that address\n   as one of its IPv6 addresses, while the IPv4 address\
    \ embedded in the\n   low-order 32-bits serves as the IPv4 address for one of\
    \ its\n   interfaces.\n   An IPv6/IPv4 node MAY acquire its IPv4-compatible IPv6\
    \ addresses via\n   IPv4 address configuration protocols.  It MAY use any IPv4\
    \ address\n   configuration mechanism to acquire its IPv4 address, then \"map\"\
    \ that\n   address into an IPv4-compatible IPv6 address by pre-pending it with\n\
    \   the 96-bit prefix 0:0:0:0:0:0.  This mode of configuration allows\n   IPv6/IPv4\
    \ nodes to \"leverage\" the installed base of IPv4 address\n   configuration servers.\n\
    \   The specific algorithm for acquiring an IPv4-compatible address using\n  \
    \ IPv4-based address configuration protocols is as follows:\n   1) The IPv6/IPv4\
    \ node uses standard IPv4 mechanisms or protocols to\n      acquire the IPv4 address\
    \ for one of its interfaces.  These\n      include:\n      -  The Dynamic Host\
    \ Configuration Protocol (DHCP) [2]\n      -  The Bootstrap Protocol (BOOTP) [1]\n\
    \      -  The Reverse Address Resolution Protocol (RARP) [9]\n      -  Manual\
    \ configuration\n      -  Any other mechanism which accurately yields the node's\
    \ own IPv4\n         address\n   2) The node uses this address as the IPv4 address\
    \ for this interface.\n   3) The node prepends the 96-bit prefix 0:0:0:0:0:0 to\
    \ the 32-bit IPv4\n      address that it acquired in step (1).  The result is\
    \ an IPv4-\n      compatible IPv6 address with one of the node's IPv4-addresses\n\
    \      embedded in the low-order 32-bits.  The node uses this address as\n   \
    \   one of its IPv6 addresses.\n"
- title: 5.3.  Automatic Tunneling Operation
  contents:
  - "5.3.  Automatic Tunneling Operation\n   In automatic tunneling, the tunnel endpoint\
    \ address is determined\n   from the packet being tunneled.  If the destination\
    \ IPv6 address is\n   IPv4-compatible, then the packet can be sent via automatic\
    \ tunneling.\n   If the destination is IPv6-native, the packet can not be sent\
    \ via\n   automatic tunneling.\n   A routing table entry can be used to direct\
    \ automatic tunneling.  An\n   implementation can have a special static routing\
    \ table entry for the\n   prefix 0:0:0:0:0:0/96.  (That is, a route to the all-zeros\
    \ prefix\n   with a 96-bit mask.)  Packets that match this prefix are sent to\
    \ a\n   pseudo-interface driver which performs automatic tunneling.  Since\n \
    \  all IPv4-compatible IPv6 addresses will match this prefix, all\n   packets\
    \ to those destinations will be auto-tunneled.\n   Once it is delivered to the\
    \ automatic tunneling module, the IPv6\n   packet is encapsulated within an IPv4\
    \ header according to the rules\n   described in section 3.  The source and destination\
    \ addresses of the\n   encapsulating IPv4 header are assigned as follows:\n  \
    \    Destination IPv4 address:\n         Low-order 32-bits of IPv6 destination\
    \ address\n      Source IPv4 address:\n         IPv4 address of interface the\
    \ packet is sent via\n   The automatic tunneling module always sends packets in\
    \ this\n   encapsulated form, even if the destination is on an attached\n   datalink.\n\
    \   The automatic tunneling module MUST NOT send to IPv4 broadcast or\n   multicast\
    \ destinations.  It MUST drop all IPv6 packets destined to\n   IPv4-compatible\
    \ destinations when the embedded IPv4 address is\n   broadcast, multicast, the\
    \ unspecified (0.0.0.0) address, or the\n   loopback address (127.0.0.1).  Note\
    \ that the sender can only tell if\n   an address is a network or subnet broadcast\
    \ for broadcast addresses\n   assigned to directly attached links.\n"
- title: 5.4.  Use With Default Configured Tunnels
  contents:
  - "5.4.  Use With Default Configured Tunnels\n   Automatic tunneling is often used\
    \ in conjunction with the default\n   configured tunnel technique.  \"Isolated\"\
    \ IPv6/IPv4 hosts -- those\n   with no on-link IPv6 routers -- are configured\
    \ to use automatic\n   tunneling and IPv4-compatible IPv6 addresses, and have\
    \ at least one\n   default configured tunnel to an IPv6 router.  That IPv6 router\
    \ is\n   configured to perform automatic tunneling as well.  These isolated\n\
    \   hosts send packets to IPv4-compatible destinations via automatic\n   tunneling\
    \ and packets for IPv6-native destinations via the default\n   configured tunnel.\
    \  IPv4-compatible destinations will match the 96-\n   bit all-zeros prefix route\
    \ discussed in the previous section, while\n   IPv6-native destinations will match\
    \ the default route via the\n   configured tunnel.  Reply packets from IPv6-native\
    \ destinations are\n   routed back to the an IPv6/IPv4 router which delivers them\
    \ to the\n   original host via automatic tunneling.  Further examples of the\n\
    \   combination of tunneling techniques are discussed in [12].\n"
- title: 5.5.  Source Address Selection
  contents:
  - "5.5.  Source Address Selection\n   When an IPv6/IPv4 node originates an IPv6\
    \ packet, it must select the\n   source IPv6 address to use.  IPv6/IPv4 nodes\
    \ that are configured to\n   perform automatic tunneling may be configured with\
    \ global IPv6-native\n   addresses as well as IPv4-compatible addresses.  The\
    \ selection of\n   which source address to use will determine what form the return\n\
    \   traffic is sent via.  If the IPv4-compatible address is used, the\n   return\
    \ traffic will have to be delivered via automatic tunneling, but\n   if the IPv6-native\
    \ address is used, the return traffic will not be\n   automatic-tunneled.  In\
    \ order to make traffic as symmetric as\n   possible, the following source address\
    \ selection preference is\n   RECOMMENDED:\n      Destination is IPv4-compatible:\n\
    \         Use IPv4-compatible source address associated with IPv4 address\n  \
    \       of outgoing interface\n      Destination is IPv6-native:\n         Use\
    \ IPv6-native address of outgoing interface\n   If an IPv6/IPv4 node has no global\
    \ IPv6-native address, but is\n   originating a packet to an IPv6-native destination,\
    \ it MAY use its\n   IPv4-compatible address as its source address.\n"
- title: 5.6.  Ingress Filtering
  contents:
  - "5.6.  Ingress Filtering\n   The decapsulating node MUST verify that the encapsulated\
    \ packets are\n   acceptable before forwarding decapsulated packets to avoid\n\
    \   circumventing ingress filtering [13].  Note that packets which are\n   delivered\
    \ to transport protocols on the decapsulating node SHOULD NOT\n   be subject to\
    \ these checks.  Since automatic tunnels always\n   encapsulate to the destination\
    \ (i.e.  the IPv4 destination will be\n   the destination) any packet received\
    \ over an automatic tunnel SHOULD\n   NOT be forwarded.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   We would like to thank the members of the IPng working\
    \ group and the\n   Next Generation Transition (ngtrans) working group for their\
    \ many\n   contributions and extensive review of this document.  Special thanks\n\
    \   are due to Jim Bound, Ross Callon, and Bob Hinden for many helpful\n   suggestions\
    \ and to John Moy for suggesting the IPv4 \"anycast address\"\n   default tunnel\
    \ technique.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Tunneling is not known to introduce any security\
    \ holes except for the\n   possibility to circumvent ingress filtering [13]. \
    \ This is prevented\n   by requiring that decapsulating routers only forward packets\
    \ if they\n   have been configured to accept encapsulated packets from the IPv4\n\
    \   source address in the receive packet.  Additionally, in the case of\n   automatic\
    \ tunneling, nodes are required by not forwarding the\n   decapsulated packets\
    \ since automatic tunneling ends the tunnel and\n   the destination.\n"
- title: 8.  Authors' Addresses
  contents:
  - "8.  Authors' Addresses\n   Robert E. Gilligan\n   FreeGate Corp\n   1208 E. Arques\
    \ Ave\n   Sunnyvale, CA 94086\n   USA\n   Phone:  +1-408-617-1004\n   Fax:   \
    \ +1-408-617-1010\n   EMail:  gilligan@freegate.com\n   Erik Nordmark\n   Sun\
    \ Microsystems, Inc.\n   901 San Antonio Rd.\n   Palo Alto, CA 94303\n   USA\n\
    \   Phone:  +1-650-786-5166\n   Fax:    +1-650-786-5896\n   EMail:  nordmark@eng.sun.com\n"
- title: 9.  References
  contents:
  - "9.  References\n   [1]  Croft, W. and J. Gilmore, \"Bootstrap Protocol\", RFC\
    \ 951,\n        September 1985.\n   [2]  Droms, R., \"Dynamic Host Configuration\
    \ Protocol\", RFC 1541,\n        October 1993.\n   [3]  Carpenter, B. and C. Jung,\
    \ \"Transmission of IPv6 over IPv4\n        Domains without Explicit Tunnels\"\
    , RFC 2529, March 1999.\n   [4]  Deering, S. and R. Hinden, \"Internet Protocol,\
    \ Version 6 (IPv6)\n        Specification\", RFC 2460, December 1998.\n   [5]\
    \  Thomson, S. and T. Narten, \"IPv6 Stateless Address\n        Autoconfiguration,\"\
    \ RFC 2462, December 1998.\n   [6]  Crawford, M., Thomson, S., and C. Huitema.\
    \ \"DNS Extensions to\n        Support IPv6 Address Allocation and Renumbering\"\
    , RFC 2874, July\n        2000.\n   [7]  Narten, T., Nordmark, E. and W. Simpson,\
    \ \"Neighbor Discovery for\n        IP Version 6 (IPv6)\", RFC 2461, December\
    \ 1998.\n   [8]  Mogul, J. and S. Deering, \"Path MTU Discovery\", RFC 1191,\n\
    \        November 1990.\n   [9]  Finlayson, R., Mann, T., Mogul, J. and M. Theimer,\
    \ \"Reverse\n        Address Resolution Protocol\", STD 38, RFC 903, June 1984.\n\
    \   [10] Braden, R., \"Requirements for Internet Hosts - Communication\n     \
    \   Layers\", STD 3, RFC 1122, October 1989.\n   [11] Kent, C. and J. Mogul, \"\
    Fragmentation Considered Harmful\".  In\n        Proc.  SIGCOMM '87 Workshop on\
    \ Frontiers in Computer\n        Communications Technology.  August 1987.\n  \
    \ [12] Callon, R. and D. Haskin, \"Routing Aspects of IPv6 Transition\",\n   \
    \     RFC 2185, September 1997.\n   [13] Ferguson, P. and D. Senie, \"Network\
    \ Ingress Filtering: Defeating\n        Denial of Service Attacks which employ\
    \ IP Source Address\n        Spoofing\", RFC 2267, January 1998.\n   [14] Hinden,\
    \ R. and S. Deering, \"IP Version 6 Addressing\n        Architecture\", RFC 2373,\
    \ July 1998.\n   [15] Rechter, Y., Moskowitz, B., Karrenberg, D., de Groot, G.J.\
    \ and\n        E. Lear, \"Address Allocation for Private Internets\", BCP 5, RFC\n\
    \        1918, February 1996.\n   [16] Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n \
    \  [17] Thaler, D., \"IP Tunnel MIB\", RFC 2667, August 1999.\n   [18] Baker,\
    \ F., \"Requirements for IP Version 4 Routers\", RFC 1812,\n        June 1995.\n"
- title: 10.  Changes from RFC 1933
  contents:
  - "10.  Changes from RFC 1933\n   -  Deleted section 3.1.1 (IPv4 loopback address)\
    \ in order to prevent\n      it from being mis-construed as requiring routers\
    \ to filter the\n      address ::127.0.0.1, which would put another test in the\n\
    \      forwarding path for IPv6 routers.\n   -  Deleted section 4.4 (Default Sending\
    \ Algorithm).  This section\n      allowed nodes to send packets in \"raw form\"\
    \ to IPv4-compatible\n      destinations on the same datalink.  Implementation\
    \ experience has\n      shown that this adds complexity which is not justified\
    \ by the\n      minimal savings in header overhead.\n   -  Added definitions for\
    \ operating modes for IPv6/IPv4 nodes.\n   -  Revised DNS section to clarify resolver\
    \ filtering and ordering\n      options.\n   -  Re-wrote the discussion of IPv4-compatible\
    \ addresses to clarify\n      that they are used exclusively in conjunction with\
    \ the automatic\n      tunneling mechanism.  Re-organized document to place definition\
    \ of\n      IPv4-compatible address format with description of automatic\n   \
    \   tunneling.\n   -  Changed the term \"IPv6-only address\" to \"IPv6-native\
    \ address\" per\n      current usage.\n   -  Updated to algorithm for determining\
    \ tunnel MTU to reflect the\n      change in the IPv6 minimum MTU from 576 to\
    \ 1280 bytes [4].\n   -  Deleted the definition for the term \"IPv6-in-IPv4 encapsulation.\"\
    \n      It has not been widely used.\n   -  Revised IPv4-compatible address configuration\
    \ section (5.2) to\n      recognize multiple interfaces.\n   -  Added discussion\
    \ of source address selection when using IPv4-\n      compatible addresses.\n\
    \   -  Added section on the combination of the default configured\n      tunneling\
    \ technique with hosts using automatic tunneling.\n   -  Added prohibition against\
    \ automatic tunneling to IPv4 broadcast or\n      multicast destinations.\n  \
    \ -  Clarified that configured tunnels can be unidirectional or\n      bidirectional.\n\
    \   -  Added description of bidirectional virtual links as another type\n    \
    \  of tunnels.  Nodes MUST respond to NUD probes on such links and\n      SHOULD\
    \ send NUD probes.\n   -  Added reference to [16] specification as an alternative\
    \ for\n      tunneling over a multicast capable IPv4 cloud.\n   -  Clarified that\
    \ IPv4-compatible addresses are assigned exclusively\n      to nodes that support\
    \ automatic tunnels i.e. nodes that can\n      receive such packets.\n   -  Added\
    \ text about formation of link-local addresses and use of\n      Neighbor Discovery\
    \ on tunnels.\n   -  Added restriction that decapsulated packets not be forwarded\n\
    \      unless the source address is acceptable to the decapsulating\n      router.\n\
    \   -  Clarified that decapsulating nodes MUST be capable of reassembling\n  \
    \    an IPv4 packet that is 1300 bytes (1280 bytes plus IPv4 header).\n   -  Clarified\
    \ that when using a default tunnel to an IPv4 \"anycast\n      address\" the network\
    \ must either have an IPv4 MTU of least 1300\n      bytes (to avoid fragmentation\
    \ of minimum size IPv6 packets) or be\n      configured to avoid frequent changes\
    \ to IPv4 routing to the\n      \"anycast address\" (to avoid different IPv4 fragments\
    \ arriving at\n      different tunnel endpoints).\n   -  Using A6/AAAA instead\
    \ of AAAA to reference IPv6 address records in\n      the DNS.\n   -  Specified\
    \ when to put IPv6 addresses in the DNS.\n   -  Added reference to the tunnel\
    \ mib for TTL specification for the\n      tunnels.\n   -  Added a table of contents.\n\
    \   -  Added recommendations for use of source and target link layer\n      address\
    \ options for the tunnel links.\n   -  Added checks in the decapsulation checking\
    \ both an IPv4-compatible\n      IPv6 source address and the outer IPv4 source\
    \ addresses for\n      multicast, broadcast, all-zeros etc.\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
