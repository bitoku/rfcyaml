- contents:
  - '               The PPP Compression Control Protocol (CCP)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method
    for\n   transporting multi-protocol datagrams over point-to-point links.  PPP\n
    \  also defines an extensible Link Control Protocol.\n   This document defines
    a method for negotiating data compression over\n   PPP links.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.     Introduction ..........................................
    \   1\n   2.     Compression Control Protocol (CCP) ....................    2\n
    \     2.1       Sending Compressed Datagrams ....................    3\n   3.
    \    Additional Packets ....................................    4\n      3.1       Reset-Request
    and Reset-Ack .....................    4\n   4.     CCP Configuration Options
    .............................    5\n      4.1       Proprietary Compression OUI
    .....................    7\n      4.2       Other Compression Types .........................
    \   8\n   SECURITY CONSIDERATIONS ......................................    9\n
    \  REFERENCES ...................................................    9\n   ACKNOWLEDGEMENTS
    .............................................    9\n   CHAIR'S ADDRESS ..............................................
    \   9\n   AUTHOR'S ADDRESS .............................................    9\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   In order to establish communications over a PPP link, each
    end of the\n   link must first send LCP packets to configure and test the data
    link\n   during Link Establishment phase.  After the link has been\n   established,
    optional facilities may be negotiated as needed.\n   One such facility is data
    compression.  A wide variety of compression\n   methods may be negotiated, although
    typically only one method is used\n   in each direction of the link.\n   A different
    compression algorithm may be negotiated in each\n   direction, for speed, cost,
    memory or other considerations, or only\n   one direction may be compressed.\n"
  title: 1.  Introduction
- contents:
  - "2.  Compression Control Protocol (CCP)\n   The Compression Control Protocol (CCP)
    is responsible for\n   configuring, enabling, and disabling data compression algorithms
    on\n   both ends of the point-to-point link.  It is also used to signal a\n   failure
    of the compression/decompression mechanism in a reliable\n   manner.\n   CCP uses
    the same packet exchange mechanism as the Link Control\n   Protocol (LCP).  CCP
    packets may not be exchanged until PPP has\n   reached the Network-Layer Protocol
    phase.  CCP packets received\n   before this phase is reached should be silently
    discarded.\n   The Compression Control Protocol is exactly the same as the Link\n
    \  Control Protocol [1] with the following exceptions:\n   Frame Modifications\n
    \     The packet may utilize any modifications to the basic frame format\n      which
    have been negotiated during the Link Establishment phase.\n   Data Link Layer
    Protocol Field\n      Exactly one CCP packet is encapsulated in the PPP Information\n
    \     field, where the PPP Protocol field indicates type hex 80FD\n      (Compression
    Control Protocol).\n      When individual link data compression is used in a multiple
    link\n      connection to a single destination, the PPP Protocol field\n      indicates
    type hex 80FB (Individual link Compression Control\n      Protocol).\n   Code
    field\n      In addition to Codes 1 through 7 (Configure-Request, Configure-\n
    \     Ack, Configure-Nak, Configure-Reject, Terminate-Request,\n      Terminate-Ack
    and Code-Reject), two additional Codes 14 and 15\n      (Reset-Request and Reset-Ack)
    are defined for this protocol.\n      Other Codes should be treated as unrecognized
    and should result in\n      Code-Rejects.\n   Timeouts\n      CCP packets may
    not be exchanged until PPP has reached the\n      Network-Layer Protocol phase.
    \ An implementation should be\n      prepared to wait for Authentication and Link
    Quality Determination\n      to finish before timing out waiting for a Configure-Ack
    or other\n      response.  It is suggested that an implementation give up only\n
    \     after user intervention or a configurable amount of time.\n   Configuration
    Option Types\n      CCP has a distinct set of Configuration Options.\n"
  title: 2.  Compression Control Protocol (CCP)
- contents:
  - "2.1.  Sending Compressed Datagrams\n   Before any compressed packets may be communicated,
    PPP must reach the\n   Network-Layer Protocol phase, and the Compression Control
    Protocol\n   must reach the Opened state.\n   One or more compressed packets are
    encapsulated in the PPP\n   Information field, where the PPP Protocol field indicates
    type hex\n   00FD (Compressed datagram).  Each of the compression algorithms may\n
    \  use a different mechanism to indicate the inclusion of more than one\n   uncompressed
    packet in a single Data Link Layer frame.\n   When using multiple PPP links to
    a single destination, there are two\n   methods of employing data compression.
    \ The first method is to\n   compress the data prior to sending it out through
    the multiple links.\n   The second is to treat each link as a separate connection,
    that may\n   or may not have compression enabled.  In the second case, the PPP\n
    \  Protocol field MUST be type hex 00FB (Individual link compressed\n   datagram).\n
    \  Only one primary algorithm in each direction is in use at a time, and\n   that
    is negotiated prior to sending the first compressed frame.  The\n   PPP Protocol
    field of the compressed datagram indicates that the\n   frame is compressed, but
    not the algorithm with which it was\n   compressed.\n   The maximum length of
    a compressed packet transmitted over a PPP link\n   is the same as the maximum
    length of the Information field of a PPP\n   encapsulated packet.  Larger datagrams
    (presumably the result of the\n   compression algorithm increasing the size of
    the message in some\n   cases) may be sent uncompressed, using its standard form,
    or may be\n   sent in multiple datagrams, if the compression algorithm supports
    it.\n   Each of the compression algorithms must supply a way of determining\n
    \  if they are passing data reliably, or they must require the use of a\n   reliable
    transport such as LAPB [3].  Vendors are strongly encouraged\n   to employ a method
    of validating the compressed data, or recognizing\n   out-of-sync compressor/decompressor
    pairs.\n"
  title: 2.1.  Sending Compressed Datagrams
- contents:
  - "3.  Additional Packets\n   The Packet format and basic facilities are already
    defined for LCP\n   [1].\n   Up-to-date values of the CCP Code field are specified
    in the most\n   recent \"Assigned Numbers\" RFC [2].  This specification concerns
    the\n   following values:\n      14      Reset-Request\n      15      Reset-Ack\n"
  title: 3.  Additional Packets
- contents:
  - "3.1.  Reset-Request and Reset-Ack\n   Description\n      CCP includes Reset-Request
    and Reset-Ack Codes in order to provide\n      a mechanism for indicating a decompression
    failure in one\n      direction of a compressed link without affecting traffic
    in the\n      other direction.  A decompression failure may be determined by\n
    \     periodically passing a hash value, performing a CRC check on the\n      decompressed
    data, or other mechanism.  It is strongly suggested\n      that some mechanism
    be available in all compression algorithms to\n      validate the decompressed
    data before passing the data on to the\n      rest of the system.\n      A CCP
    implementation wishing to indicate a decompression failure\n      SHOULD transmit
    a CCP packet with the Code field set to 14\n      (Reset-Request), and the Data
    field filled with any desired data.\n      Once a Reset-Request has been sent,
    any Compressed packets\n      received are discarded, and another Reset-Request
    is sent with the\n      same Identifier, until a valid Reset-Ack is received.\n
    \     Upon reception of a Reset-Request, the transmitting compressor is\n      reset
    to an initial state.  This may include clearing a\n      dictionary, resetting
    hash codes, or other mechanisms.  A CCP\n      packet MUST be transmitted with
    the Code field set to 15 (Reset-\n      Ack), the Identifier field copied from
    the Reset-Request packet,\n      and the Data field filled with any desired data.\n
    \     On receipt of a Reset-Ack, the receiving decompressor is reset to\n      an
    initial state.  This may include clearing a dictionary,\n      resetting hash
    codes, or other mechanisms.  Since there may be\n      several Reset-Acks in the
    pipe, the decompressor MUST be reset for\n      each Reset-Ack which matches the
    currently expected identifier.\n   A summary of the Reset-Request and Reset-Ack
    packet formats is shown\n   below.  The fields are transmitted from left to right.\n
    \   0                   1                   2                   3\n    0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |    Data ...\n   +-+-+-+-+\n   Code\n      14 for Reset-Request;\n      15
    for Reset-Ack.\n   Identifier\n      On transmission, the Identifier field MUST
    be changed whenever the\n      content of the Data field changes, and whenever
    a valid reply has\n      been received for a previous request.  For retransmissions,
    the\n      Identifier MAY remain unchanged.\n      On reception, the Identifier
    field of the Reset-Request is copied\n      into the Identifier field of the Reset-Ack
    packet.\n   Data\n      The Data field is zero or more octets and contains uninterpreted\n
    \     data for use by the sender.  The data may consist of any binary\n      value
    and may be of any length from zero to the peer's established\n      MRU minus
    four.\n"
  title: 3.1.  Reset-Request and Reset-Ack
- contents:
  - "4.  CCP Configuration Options\n   CCP Configuration Options allow negotiation
    of compression algorithms\n   and their parameters.  CCP uses the same Configuration
    Option format\n   defined for LCP [1], with a separate set of Options.\n   Configuration
    Options, in this protocol, indicate algorithms that the\n   receiver is willing
    or able to use to decompress data sent by the\n   sender.  As a result, it is
    to be expected that systems will offer to\n   accept several algorithms, and negotiate
    a single one that will be\n   used.\n   There is the possibility of not being
    able to agree on a compression\n   algorithm.  In that case, no compression will
    be used, and the link\n   will continue to operate without compression.  If link
    reliability\n   has been separately negotiated, then it will continue to be used,\n
    \  until the LCP is re-negotiated.\n   We expect that many vendors will want to
    use proprietary compression\n   algorithms, and have made a mechanism available
    to negotiate these\n   without encumbering the Internet Assigned Number Authority
    with\n   proprietary number requests.\n   The LCP option negotiation techniques
    are used.  If an option is\n   unrecognized, a Configure-Reject MUST be sent.
    \ If all protocols the\n   sender implements are Configure-Rejected by the receiver,
    then no\n   compression is enabled in that direction of the link.\n   If an option
    is recognized, but not acceptable due to values in the\n   request (or optional
    parameters not in the request), a Configure-NAK\n   MUST be sent with the option
    modified appropriately.  The Configure-\n   NAK MUST contain only those options
    that will be acceptable.  A new\n   Configure-Request SHOULD be sent with only
    the single preferred\n   option, adjusted as specified in the Configure-Nak.\n
    \  Up-to-date values of the CCP Option Type field are specified in the\n   most
    recent \"Assigned Numbers\" RFC [2].  Current values are assigned\n   as follows:\n
    \     CCP Option      Compression type\n      0               OUI\n      1               Predictor
    type 1\n      2               Predictor type 2\n      3               Puddle Jumper\n
    \     4-15            unassigned\n      16              Hewlett-Packard PPC\n
    \     17              Stac Electronics LZS\n      18              Microsoft PPC\n
    \     19              Gandalf FZA\n      20              V.42bis compression\n
    \     21              BSD LZW Compress\n      255             Reserved\n      The
    unassigned values 4-15 are intended to be assigned to other\n      freely available
    compression algorithms that have no license fees.\n"
  title: 4.  CCP Configuration Options
- contents:
  - "4.1.  Proprietary Compression OUI\n   Description\n      This Configuration Option
    provides a way to negotiate the use of a\n      proprietary compression protocol.\n
    \     Since the first matching compression will be used, it is\n      recommended
    that any known OUI compression options be transmitted\n      first, before the
    common options are used.\n      Before accepting this option, the implementation
    must verify that\n      the Organization Unique Identifier identifies a proprietary\n
    \     algorithm that the implementation can decompress, and that any\n      vendor
    specific negotiation values are fully understood.\n   A summary of the Proprietary
    Compression OUI Configuration Option\n   format is shown below.  The fields are
    transmitted from left to\n   right.\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Type      |    Length     |       OUI ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \        OUI       |    Subtype    |  Values...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
    \  Type\n      0\n   Length\n      >= 6\n   IEEE OUI\n      The vendor's IEEE
    Organization Unique Identifier (OUI), which is\n      the most significant three
    octets of an Ethernet Physical Address,\n      assigned to the vendor by IEEE
    802.  This identifies the option as\n      being proprietary to the indicated
    vendor.  The bits within the\n      octet are in canonical order, and the most
    significant octet is\n      transmitted first.\n   Subtype\n      This field is
    specific to each OUI, and indicates a compression\n      type for that OUI.  There
    is no standardization for this field.\n      Each OUI implements its own values.\n
    \  Values\n      This field is zero or more octets, and contains additional data
    as\n      determined by the vendor's compression protocol.\n"
  title: 4.1.  Proprietary Compression OUI
- contents:
  - "4.2.  Other Compression Types\n   Description\n      These Configuration Options
    provide a way to negotiate the use of\n      a publicly defined compression algorithm.
    \ Many compression\n      algorithms are specified.  No particular compression
    technique has\n      arisen as an Internet Standard.\n      These protocols will
    be made available to all interested parties,\n      but may have certain licensing
    restrictions associated with them.\n      For additional information, refer to
    the compression protocol\n      documents that define each of the compression
    types.\n   A summary of the Compression Type Configuration Option format is\n
    \  shown below.  The fields are transmitted from left to right.\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Type      |    Length     |  Values...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
    \  Type\n      1 to 254\n   Length\n      >= 2\n   Values\n      This field is
    zero or more octets, and contains additional data as\n      determined by the
    compression protocol.\n"
  title: 4.2.  Other Compression Types
- contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
  title: Security Considerations
- contents:
  - "References\n   [1]   Simpson, W., Editor, \"The Point-to-Point Protocol (PPP)\",
    STD\n         51, RFC 1661, July 1994.\n   [2]   Reynolds, J., and Postel, J.,
    \"Assigned Numbers\", STD 2, RFC\n         1700, USC/Information Sciences Institute,
    October 1994.\n   [3]   Rand, D., \"PPP Reliable Transmission\", RFC 1663, July
    1994.\n"
  title: References
- contents:
  - "Acknowledgments\n   Bill Simpson helped with the document formatting.\n"
  title: Acknowledgments
- contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n
    \     Karl Fox\n      Ascend Communications\n      3518 Riverside Drive, Suite
    101\n      Columbus, Ohio 43221\n      EMail: karl@ascend.com\n"
  title: Chair's Address
- contents:
  - "Author's Address\n   Questions about this memo can also be directed to:\n      Dave
    Rand\n      Novell, Inc.\n      2180 Fortune Drive\n      San Jose, CA  95131\n
    \     +1 408 321-1259\n      EMail: dlr@daver.bungi.com\n"
  title: Author's Address
