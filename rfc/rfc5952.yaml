- title: __initial_text__
  contents:
  - '         A Recommendation for IPv6 Address Text Representation

    '
- title: Abstract
  contents:
  - "Abstract\n   As IPv6 deployment increases, there will be a dramatic increase\
    \ in\n   the need to use IPv6 addresses in text.  While the IPv6 address\n   architecture\
    \ in Section 2.2 of RFC 4291 describes a flexible model\n   for text representation\
    \ of an IPv6 address, this flexibility has been\n   causing problems for operators,\
    \ system engineers, and users.  This\n   document defines a canonical textual\
    \ representation format.  It does\n   not define a format for internal storage,\
    \ such as within an\n   application or database.  It is expected that the canonical\
    \ format\n   will be followed by humans and systems when representing IPv6\n \
    \  addresses as text, but all implementations must accept and be able to\n   handle\
    \ any legitimate RFC 4291 format.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5952.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n     1.1.  Requirements Language  . . . . . . . . . . . . .\
    \ . . . . .  4\n   2.  Text Representation Flexibility of RFC 4291  . . . . .\
    \ . . . .  4\n     2.1.  Leading Zeros in a 16-Bit Field  . . . . . . . . . .\
    \ . . .  4\n     2.2.  Zero Compression . . . . . . . . . . . . . . . . . . .\
    \ . .  5\n     2.3.  Uppercase or Lowercase . . . . . . . . . . . . . . . . .\
    \ .  6\n   3.  Problems Encountered with the Flexible Model . . . . . . . . .\
    \  6\n     3.1.  Searching  . . . . . . . . . . . . . . . . . . . . . . . .  6\n\
    \       3.1.1.  General Summary  . . . . . . . . . . . . . . . . . . .  6\n  \
    \     3.1.2.  Searching Spreadsheets and Text Files  . . . . . . . .  6\n    \
    \   3.1.3.  Searching with Whois . . . . . . . . . . . . . . . . .  6\n      \
    \ 3.1.4.  Searching for an Address in a Network Diagram  . . . .  7\n     3.2.\
    \  Parsing and Modifying  . . . . . . . . . . . . . . . . . .  7\n       3.2.1.\
    \  General Summary  . . . . . . . . . . . . . . . . . . .  7\n       3.2.2.  Logging\
    \  . . . . . . . . . . . . . . . . . . . . . . .  7\n       3.2.3.  Auditing:\
    \ Case 1 . . . . . . . . . . . . . . . . . . .  8\n       3.2.4.  Auditing: Case\
    \ 2 . . . . . . . . . . . . . . . . . . .  8\n       3.2.5.  Verification . .\
    \ . . . . . . . . . . . . . . . . . . .  8\n       3.2.6.  Unexpected Modifying\
    \ . . . . . . . . . . . . . . . . .  8\n     3.3.  Operating  . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  8\n       3.3.1.  General Summary  . . . .\
    \ . . . . . . . . . . . . . . .  8\n       3.3.2.  Customer Calls . . . . . .\
    \ . . . . . . . . . . . . . .  9\n       3.3.3.  Abuse  . . . . . . . . . . .\
    \ . . . . . . . . . . . . .  9\n     3.4.  Other Minor Problems . . . . . . .\
    \ . . . . . . . . . . . .  9\n       3.4.1.  Changing Platforms . . . . . . .\
    \ . . . . . . . . . . .  9\n       3.4.2.  Preference in Documentation  . . .\
    \ . . . . . . . . . .  9\n       3.4.3.  Legibility . . . . . . . . . . . . .\
    \ . . . . . . . . .  9\n   4.  A Recommendation for IPv6 Text Representation \
    \ . . . . . . . . 10\n     4.1.  Handling Leading Zeros in a 16-Bit Field . .\
    \ . . . . . . . 10\n     4.2.  \"::\" Usage . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 10\n       4.2.1.  Shorten as Much as Possible  . . . . . . .\
    \ . . . . . . 10\n       4.2.2.  Handling One 16-Bit 0 Field  . . . . . . . .\
    \ . . . . . 10\n       4.2.3.  Choice in Placement of \"::\"  . . . . . . . .\
    \ . . . . . 10\n     4.3.  Lowercase  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 10\n   5.  Text Representation of Special Addresses . . . . . . . .\
    \ . . . 11\n   6.  Notes on Combining IPv6 Addresses with Port Numbers  . . .\
    \ . . 11\n   7.  Prefix Representation  . . . . . . . . . . . . . . . . . . .\
    \ . 12\n   8.  Security Considerations  . . . . . . . . . . . . . . . . . . .\
    \ 12\n   9.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 12\n\
    \   10. References . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n  \
    \   10.1. Normative References . . . . . . . . . . . . . . . . . . . 12\n    \
    \ 10.2. Informative References . . . . . . . . . . . . . . . . . . 13\n   Appendix\
    \ A.  For Developers  . . . . . . . . . . . . . . . . . . . 14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A single IPv6 address can be text represented in many ways.\
    \  Examples\n   are shown below.\n      2001:db8:0:0:1:0:0:1\n      2001:0db8:0:0:1:0:0:1\n\
    \      2001:db8::1:0:0:1\n      2001:db8::0:1:0:0:1\n      2001:0db8::1:0:0:1\n\
    \      2001:db8:0:0:1::1\n      2001:db8:0000:0:1::1\n      2001:DB8:0:0:1::1\n\
    \   All of the above examples represent the same IPv6 address.  This\n   flexibility\
    \ has caused many problems for operators, systems\n   engineers, and customers.\
    \  The problems are noted in Section 3.  A\n   canonical representation format\
    \ to avoid problems is introduced in\n   Section 4.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Text Representation Flexibility of RFC 4291
  contents:
  - "2.  Text Representation Flexibility of RFC 4291\n   Examples of flexibility in\
    \ Section 2.2 of [RFC4291] are described\n   below.\n"
- title: 2.1.  Leading Zeros in a 16-Bit Field
  contents:
  - "2.1.  Leading Zeros in a 16-Bit Field\n      'It is not necessary to write the\
    \ leading zeros in an individual\n      field.'\n   Conversely, it is also not\
    \ necessary to omit leading zeros.  This\n   means that it is possible to select\
    \ from representations such as\n   those in the following example.  The final\
    \ 16-bit field is different,\n   but all of these addresses represent the same\
    \ address.\n      2001:db8:aaaa:bbbb:cccc:dddd:eeee:0001\n      2001:db8:aaaa:bbbb:cccc:dddd:eeee:001\n\
    \      2001:db8:aaaa:bbbb:cccc:dddd:eeee:01\n      2001:db8:aaaa:bbbb:cccc:dddd:eeee:1\n"
- title: 2.2.  Zero Compression
  contents:
  - "2.2.  Zero Compression\n      'A special syntax is available to compress the\
    \ zeros.  The use of\n      \"::\" indicates one or more groups of 16 bits of\
    \ zeros.'\n   It is possible to select whether or not to omit just one 16-bit\
    \ 0\n   field.\n      2001:db8:aaaa:bbbb:cccc:dddd::1\n      2001:db8:aaaa:bbbb:cccc:dddd:0:1\n\
    \   In cases where there is more than one field of only zeros, there is a\n  \
    \ choice of how many fields can be shortened.\n      2001:db8:0:0:0::1\n     \
    \ 2001:db8:0:0::1\n      2001:db8:0::1\n      2001:db8::1\n   In addition, Section\
    \ 2.2 of [RFC4291] notes,\n      'The \"::\" can only appear once in an address.'\n\
    \   This gives a choice on where in a single address to compress the\n   zero.\n\
    \      2001:db8::aaaa:0:0:1\n      2001:db8:0:0:aaaa::1\n"
- title: 2.3.  Uppercase or Lowercase
  contents:
  - "2.3.  Uppercase or Lowercase\n   [RFC4291] does not mention any preference of\
    \ uppercase or lowercase.\n      2001:db8:aaaa:bbbb:cccc:dddd:eeee:aaaa\n    \
    \  2001:db8:aaaa:bbbb:cccc:dddd:eeee:AAAA\n      2001:db8:aaaa:bbbb:cccc:dddd:eeee:AaAa\n"
- title: 3.  Problems Encountered with the Flexible Model
  contents:
  - '3.  Problems Encountered with the Flexible Model

    '
- title: 3.1.  Searching
  contents:
  - '3.1.  Searching

    '
- title: 3.1.1.  General Summary
  contents:
  - "3.1.1.  General Summary\n   A search of an IPv6 address if conducted through\
    \ a UNIX system is\n   usually case sensitive and extended options that allow\
    \ for regular\n   expression use will come in handy.  However, there are many\n\
    \   applications in the Internet today that do not provide this\n   capability.\
    \  When searching for an IPv6 address in such systems, the\n   system engineer\
    \ will have to try each and every possibility to search\n   for an address.  This\
    \ has critical impacts, especially when trying to\n   deploy IPv6 over an enterprise\
    \ network.\n"
- title: 3.1.2.  Searching Spreadsheets and Text Files
  contents:
  - "3.1.2.  Searching Spreadsheets and Text Files\n   Spreadsheet applications and\
    \ text editors on GUI systems rarely have\n   the ability to search for text using\
    \ regular expression.  Moreover,\n   there are many non-engineers (who are not\
    \ aware of case sensitivity\n   and regular expression use) that use these applications\
    \ to manage IP\n   addresses.  This has worked quite well with IPv4 since text\n\
    \   representation in IPv4 has very little flexibility.  There is no\n   incentive\
    \ to encourage these non-engineers to change their tool or\n   learn regular expression\
    \ when they decide to go dual-stack.  If the\n   entry in the spreadsheet reads,\
    \ 2001:db8::1:0:0:1, but the search was\n   conducted as 2001:db8:0:0:1::1, this\
    \ will show a result of no match.\n   One example where this will cause a problem\
    \ is, when the search is\n   being conducted to assign a new address from a pool,\
    \ and a check is\n   being done to see if it is not in use.  This may cause problems\
    \ for\n   the end-hosts or end-users.  This type of address management is very\n\
    \   often seen in enterprise networks and ISPs.\n"
- title: 3.1.3.  Searching with Whois
  contents:
  - "3.1.3.  Searching with Whois\n   The \"whois\" utility is used by a wide range\
    \ of people today.  When a\n   record is set to a database, one will likely check\
    \ the output to see\n   if the entry is correct.  If an entity was recorded as\
    \ 2001:db8::/48,\n   but the whois output showed 2001:0db8:0000::/48, most non-engineers\n\
    \   would think that their input was wrong and will likely retry several\n   times\
    \ or make a frustrated call to the database hostmaster.  If there\n   was a need\
    \ to register the same prefix on different systems, and each\n   system showed\
    \ a different text representation, this would confuse\n   people even more.  Although\
    \ this document focuses on addresses rather\n   than prefixes, it is worth mentioning\
    \ the prefix problems because the\n   problems encountered with addresses and\
    \ prefixes are mostly equal.\n"
- title: 3.1.4.  Searching for an Address in a Network Diagram
  contents:
  - "3.1.4.  Searching for an Address in a Network Diagram\n   Network diagrams and\
    \ blueprints often show what IP addresses are\n   assigned to a system devices.\
    \  In times of trouble shooting there may\n   be a need to search through a diagram\
    \ to find the point of failure\n   (for example, if a traceroute stopped at 2001:db8::1,\
    \ one would\n   search the diagram for that address).  This is a technique quite\n\
    \   often in use in enterprise networks and managed services.  Again, the\n  \
    \ different flavors of text representation will result in a time-\n   consuming\
    \ search leading to longer mean times to restoration (MTTR)\n   in times of trouble.\n"
- title: 3.2.  Parsing and Modifying
  contents:
  - '3.2.  Parsing and Modifying

    '
- title: 3.2.1.  General Summary
  contents:
  - "3.2.1.  General Summary\n   With all the possible methods of text representation,\
    \ each\n   application must include a module, object, link, etc. to a function\n\
    \   that will parse IPv6 addresses in a manner such that no matter how it\n  \
    \ is represented, they will mean the same address.  Many system\n   engineers\
    \ who integrate complex computer systems for corporate\n   customers will have\
    \ difficulties finding that their favorite tool\n   will not have this function,\
    \ or will encounter difficulties such as\n   having to rewrite their macros or\
    \ scripts for their customers.\n"
- title: 3.2.2.  Logging
  contents:
  - "3.2.2.  Logging\n   If an application were to output a log summary that represented\
    \ the\n   address in full (such as 2001:0db8:0000:0000:1111:2222:3333:4444),\n\
    \   the output would be highly unreadable compared to the IPv4 output.\n   The\
    \ address would have to be parsed and reformed to make it useful\n   for human\
    \ reading.  Sometimes logging for critical systems is done by\n   mirroring the\
    \ same traffic to two different systems.  Care must be\n   taken so that no matter\
    \ what the log output is, the logs should be\n   parsed so they are equivalent.\n"
- title: '3.2.3.  Auditing: Case 1'
  contents:
  - "3.2.3.  Auditing: Case 1\n   When a router or any other network appliance machine\
    \ configuration is\n   audited, there are many methods to compare the configuration\n\
    \   information of a node.  Sometimes auditing will be done by just\n   comparing\
    \ the changes made each day.  In this case, if configuration\n   was done such\
    \ that 2001:db8::1 was changed to 2001:0db8:0000:0000:\n   0000:0000:0000:0001\
    \ just because the new engineer on the block felt\n   it was better, a simple\
    \ diff will show that a different address was\n   configured.  If this was done\
    \ on a wide scale network, people will be\n   focusing on 'why the extra zeros\
    \ were put in' instead of doing any\n   real auditing.  Lots of tools are just\
    \ plain diffs that do not take\n   into account address representation rules.\n"
- title: '3.2.4.  Auditing: Case 2'
  contents:
  - "3.2.4.  Auditing: Case 2\n   Node configurations will be matched against an information\
    \ system\n   that manages IP addresses.  If output notation is different, there\n\
    \   will need to be a script that is implemented to cover for this.  The\n   result\
    \ of an SNMP GET operation, converted to text and compared to a\n   textual address\
    \ written by a human is highly unlikely to match on the\n   first try.\n"
- title: 3.2.5.  Verification
  contents:
  - "3.2.5.  Verification\n   Some protocols require certain data fields to be verified.\
    \  One\n   example of this is X.509 certificates.  If an IPv6 address field in\
    \ a\n   certificate was incorrectly verified by converting it to text and\n  \
    \ making a simple textual comparison to some other address, the\n   certificate\
    \ may be mistakenly shown as being invalid due to a\n   difference in text representation\
    \ methods.\n"
- title: 3.2.6.  Unexpected Modifying
  contents:
  - "3.2.6.  Unexpected Modifying\n   Sometimes, a system will take an address and\
    \ modify it as a\n   convenience.  For example, a system may take an input of\n\
    \   2001:0db8:0::1 and make the output 2001:db8::1.  If the zeros were\n   input\
    \ for a reason, the outcome may be somewhat unexpected.\n"
- title: 3.3.  Operating
  contents:
  - '3.3.  Operating

    '
- title: 3.3.1.  General Summary
  contents:
  - "3.3.1.  General Summary\n   When an operator sets an IPv6 address of a system\
    \ as 2001:db8:0:0:1:\n   0:0:1, the system may take the address and show the configuration\n\
    \   result as 2001:DB8::1:0:0:1.  Someone familiar with IPv6 address\n   representation\
    \ will know that the right address is set, but not\n   everyone may understand\
    \ this.\n"
- title: 3.3.2.  Customer Calls
  contents:
  - "3.3.2.  Customer Calls\n   When a customer calls to inquire about a suspected\
    \ outage, IPv6\n   address representation should be handled with care.  Not all\n\
    \   customers are engineers, nor do they have a similar skill level in\n   IPv6\
    \ technology.  The network operations center will have to take\n   extra steps\
    \ to humanly parse the address to avoid having to explain\n   to the customers\
    \ that 2001:db8:0:1::1 is the same as\n   2001:db8::1:0:0:0:1.  This is one thing\
    \ that will never happen in\n   IPv4 because IPv4 addresses cannot be abbreviated.\n"
- title: 3.3.3.  Abuse
  contents:
  - "3.3.3.  Abuse\n   Network abuse reports generally include the abusing IP address.\
    \  This\n   'reporting' could take any shape or form of the flexible model.  A\n\
    \   team that handles network abuse must be able to tell the difference\n   between\
    \ a 2001:db8::1:0:1 and 2001:db8:1::0:1.  Mistakes in the\n   placement of the\
    \ \"::\" will result in a critical situation.  A system\n   that handles these\
    \ incidents should be able to handle any type of\n   input and parse it in a correct\
    \ manner.  Also, incidents are reported\n   over the phone.  It is unnecessary\
    \ to report if the letter is\n   uppercase or lowercase.  However, when a letter\
    \ is spelled uppercase,\n   people tend to specify that it is uppercase, which\
    \ is unnecessary\n   information.\n"
- title: 3.4.  Other Minor Problems
  contents:
  - '3.4.  Other Minor Problems

    '
- title: 3.4.1.  Changing Platforms
  contents:
  - "3.4.1.  Changing Platforms\n   When an engineer decides to change the platform\
    \ of a running service,\n   the same code may not work as expected due to the\
    \ difference in IPv6\n   address text representation.  Usually, a change in a\
    \ platform (e.g.,\n   Unix to Windows, Cisco to Juniper) will result in a major\
    \ change of\n   code anyway, but flexibility in address representation will increase\n\
    \   the work load.\n"
- title: 3.4.2.  Preference in Documentation
  contents:
  - "3.4.2.  Preference in Documentation\n   A document that is edited by more than\
    \ one author may become harder\n   to read.\n"
- title: 3.4.3.  Legibility
  contents:
  - "3.4.3.  Legibility\n   Capital case D and 0 can be quite often misread.  Capital\
    \ B and 8 can\n   also be misread.\n"
- title: 4.  A Recommendation for IPv6 Text Representation
  contents:
  - "4.  A Recommendation for IPv6 Text Representation\n   A recommendation for a\
    \ canonical text representation format of IPv6\n   addresses is presented in this\
    \ section.  The recommendation in this\n   document is one that complies fully\
    \ with [RFC4291], is implemented by\n   various operating systems, and is human\
    \ friendly.  The recommendation\n   in this section SHOULD be followed by systems\
    \ when generating an\n   address to be represented as text, but all implementations\
    \ MUST\n   accept and be able to handle any legitimate [RFC4291] format.  It is\n\
    \   advised that humans also follow these recommendations when spelling\n   an\
    \ address.\n"
- title: 4.1.  Handling Leading Zeros in a 16-Bit Field
  contents:
  - "4.1.  Handling Leading Zeros in a 16-Bit Field\n   Leading zeros MUST be suppressed.\
    \  For example, 2001:0db8::0001 is\n   not acceptable and must be represented\
    \ as 2001:db8::1.  A single 16-\n   bit 0000 field MUST be represented as 0.\n"
- title: 4.2.  "::" Usage
  contents:
  - '4.2.  "::" Usage

    '
- title: 4.2.1.  Shorten as Much as Possible
  contents:
  - "4.2.1.  Shorten as Much as Possible\n   The use of the symbol \"::\" MUST be\
    \ used to its maximum capability.\n   For example, 2001:db8:0:0:0:0:2:1 must be\
    \ shortened to 2001:db8::2:1.\n   Likewise, 2001:db8::0:1 is not acceptable, because\
    \ the symbol \"::\"\n   could have been used to produce a shorter representation\
    \ 2001:db8::1.\n"
- title: 4.2.2.  Handling One 16-Bit 0 Field
  contents:
  - "4.2.2.  Handling One 16-Bit 0 Field\n   The symbol \"::\" MUST NOT be used to\
    \ shorten just one 16-bit 0 field.\n   For example, the representation 2001:db8:0:1:1:1:1:1\
    \ is correct, but\n   2001:db8::1:1:1:1:1 is not correct.\n"
- title: 4.2.3.  Choice in Placement of "::"
  contents:
  - "4.2.3.  Choice in Placement of \"::\"\n   When there is an alternative choice\
    \ in the placement of a \"::\", the\n   longest run of consecutive 16-bit 0 fields\
    \ MUST be shortened (i.e.,\n   the sequence with three consecutive zero fields\
    \ is shortened in 2001:\n   0:0:1:0:0:0:1).  When the length of the consecutive\
    \ 16-bit 0 fields\n   are equal (i.e., 2001:db8:0:0:1:0:0:1), the first sequence\
    \ of zero\n   bits MUST be shortened.  For example, 2001:db8::1:0:0:1 is correct\n\
    \   representation.\n"
- title: 4.3.  Lowercase
  contents:
  - "4.3.  Lowercase\n   The characters \"a\", \"b\", \"c\", \"d\", \"e\", and \"\
    f\" in an IPv6 address\n   MUST be represented in lowercase.\n"
- title: 5.  Text Representation of Special Addresses
  contents:
  - "5.  Text Representation of Special Addresses\n   Addresses such as IPv4-Mapped\
    \ IPv6 addresses, ISATAP [RFC5214], and\n   IPv4-translatable addresses [ADDR-FORMAT]\
    \ have IPv4 addresses\n   embedded in the low-order 32 bits of the address.  These\
    \ addresses\n   have a special representation that may mix hexadecimal and dot\n\
    \   decimal notations.  The decimal notation may be used only for the\n   last\
    \ 32 bits of the address.  For these addresses, mixed notation is\n   RECOMMENDED\
    \ if the following condition is met: the address can be\n   distinguished as having\
    \ IPv4 addresses embedded in the lower 32 bits\n   solely from the address field\
    \ through the use of a well-known prefix.\n   Such prefixes are defined in [RFC4291]\
    \ and [RFC2765] at the time of\n   this writing.  If it is known by some external\
    \ method that a given\n   prefix is used to embed IPv4, it MAY be represented\
    \ as mixed\n   notation.  Tools that provide options to specify prefixes that\
    \ are\n   (or are not) to be represented as mixed notation may be useful.\n  \
    \ There is a trade-off here where a recommendation to achieve an exact\n   match\
    \ in a search (no dot decimals whatsoever) and a recommendation\n   to help the\
    \ readability of an address (dot decimal whenever possible)\n   does not result\
    \ in the same solution.  The above recommendation is\n   aimed at fixing the representation\
    \ as much as possible while leaving\n   the opportunity for future well-known\
    \ prefixes to be represented in a\n   human-friendly manner as tools adjust to\
    \ newly assigned prefixes.\n   The text representation method noted in Section\
    \ 4 should be applied\n   for the leading hexadecimal part (i.e., ::ffff:192.0.2.1\
    \ instead of\n   0:0:0:0:0:ffff:192.0.2.1).\n"
- title: 6.  Notes on Combining IPv6 Addresses with Port Numbers
  contents:
  - "6.  Notes on Combining IPv6 Addresses with Port Numbers\n   There are many different\
    \ ways to combine IPv6 addresses and port\n   numbers that are represented in\
    \ text.  Examples are shown below.\n   o  [2001:db8::1]:80\n   o  2001:db8::1:80\n\
    \   o  2001:db8::1.80\n   o  2001:db8::1 port 80\n   o  2001:db8::1p80\n   o \
    \ 2001:db8::1#80\n   The situation is not much different in IPv4, but the most\
    \ ambiguous\n   case with IPv6 is the second bullet.  This is due to the \"::\"\
    usage in\n   IPv6 addresses.  This style is NOT RECOMMENDED because of its\n \
    \  ambiguity.  The [] style as expressed in [RFC3986] SHOULD be\n   employed,\
    \ and is the default unless otherwise specified.  Other\n   styles are acceptable\
    \ when there is exactly one style for the given\n   context and cross-platform\
    \ portability does not become an issue.  For\n   URIs containing IPv6 address\
    \ literals, [RFC3986] MUST be followed, as\n   well as the rules defined in this\
    \ document.\n"
- title: 7.  Prefix Representation
  contents:
  - "7.  Prefix Representation\n   Problems with prefixes are the same as problems\
    \ encountered with\n   addresses.  The text representation method of IPv6 prefixes\
    \ should be\n   no different from that of IPv6 addresses.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document notes some examples where IPv6\
    \ addresses are compared\n   in text format.  The example on Section 3.2.5 is\
    \ one that may cause a\n   security risk if used for access control.  The common\
    \ practice of\n   comparing X.509 data is done in binary format.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The authors would like to thank Jan Zorz, Randy Bush,\
    \ Yuichi Minami,\n   and Toshimitsu Matsuura for their generous and helpful comments\
    \ in\n   kick starting this document.  We also would like to thank Brian\n   Carpenter,\
    \ Akira Kato, Juergen Schoenwaelder, Antonio Querubin, Dave\n   Thaler, Brian\
    \ Haley, Suresh Krishnan, Jerry Huang, Roman Donchenko,\n   Heikki Vatiainen,\
    \ Dan Wing, and Doug Barton for their input.  Also, a\n   very special thanks\
    \ to Ron Bonica, Fred Baker, Brian Haberman, Robert\n   Hinden, Jari Arkko, and\
    \ Kurt Lindqvist for their support in bringing\n   this document to light in IETF\
    \ working groups.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2765]      Nordmark, E., \"Stateless IP/ICMP Translation\
    \ Algorithm\n                  (SIIT)\", RFC 2765, February 2000.\n   [RFC3986]\
    \      Berners-Lee, T., Fielding, R., and L. Masinter,\n                  \"Uniform\
    \ Resource Identifier (URI): Generic Syntax\",\n                  STD 66, RFC\
    \ 3986, January 2005.\n   [RFC4291]      Hinden, R. and S. Deering, \"IP Version\
    \ 6 Addressing\n                  Architecture\", RFC 4291, February 2006.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [ADDR-FORMAT]  Bao, C., \"IPv6 Addressing of\
    \ IPv4/IPv6 Translators\",\n                  Work in Progress, July 2010.\n \
    \  [RFC4038]      Shin, M-K., Hong, Y-G., Hagino, J., Savola, P., and E.\n   \
    \               Castro, \"Application Aspects of IPv6 Transition\",\n        \
    \          RFC 4038, March 2005.\n   [RFC5214]      Templin, F., Gleeson, T.,\
    \ and D. Thaler, \"Intra-Site\n                  Automatic Tunnel Addressing Protocol\
    \ (ISATAP)\",\n                  RFC 5214, March 2008.\n"
- title: Appendix A.  For Developers
  contents:
  - "Appendix A.  For Developers\n   We recommend that developers use display routines\
    \ that conform to\n   these rules.  For example, the usage of getnameinfo() with\
    \ flags\n   argument NI_NUMERICHOST in FreeBSD 7.0 will give a conforming output,\n\
    \   except for the special addresses notes in Section 5.  The function\n   inet_ntop()\
    \ of FreeBSD7.0 is a good C code reference, but should not\n   be called directly.\
    \  See [RFC4038] for details.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Seiichi Kawamura\n   NEC BIGLOBE, Ltd.\n   14-22, Shibaura\
    \ 4-chome\n   Minatoku, Tokyo  108-8558\n   JAPAN\n   Phone: +81 3 3798 6085\n\
    \   EMail: kawamucho@mesh.ad.jp\n   Masanobu Kawashima\n   NEC AccessTechnica,\
    \ Ltd.\n   800, Shimomata\n   Kakegawa-shi, Shizuoka  436-8501\n   JAPAN\n   Phone:\
    \ +81 537 23 9655\n   EMail: kawashimam@necat.nec.co.jp\n"
