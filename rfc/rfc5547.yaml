- contents:
  - "      A Session Description Protocol (SDP) Offer/Answer Mechanism\n                        to
    Enable File Transfer\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document provides a mechanism to negotiate the transfer of
    one\n   or more files between two endpoints by using the Session Description\n
    \  Protocol (SDP) offer/answer model specified in RFC 3264.  SDP is\n   extended
    to describe the attributes of the files to be transferred.\n   The offerer can
    describe either the files it wants to send or the\n   files it would like to receive.
    \ The answerer can either accept or\n   reject the offer separately for each individual
    file.  The transfer\n   of one or more files is initiated after a successful negotiation.\n
    \  The Message Session Relay Protocol (MSRP) is defined as the default\n   mechanism
    to actually carry the files between the endpoints.  The\n   conventions on how
    to use MSRP for file transfer are also provided in\n   this document.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Terminology .....................................................4\n   3.
    Definitions .....................................................4\n   4. Overview
    of Operation ...........................................5\n   5. File Selector
    ...................................................6\n   6. Extensions to SDP
    ...............................................7\n   7. File Disposition Types
    .........................................13\n   8. Protocol Operation .............................................13\n
    \     8.1. The 'file-transfer-id' Attribute ..........................14\n      8.2.
    Offerer's Behavior ........................................17\n           8.2.1.
    The Offerer Is a File Sender .......................17\n           8.2.2. The
    Offerer Is a File Receiver .....................18\n           8.2.3. SDP Offer
    for Several Files ........................18\n      8.3. Answerer's Behavior .......................................19\n
    \          8.3.1. The Answerer Is a File Receiver ....................19\n           8.3.2.
    The Answerer Is a File Sender ......................20\n      8.4. Aborting an
    Ongoing File Transfer Operation ...............22\n      8.5. Indicating File
    Transfer Offer/Answer Capability ..........25\n      8.6. Reusage of Existing
    \"m=\" Lines in SDP .....................26\n      8.7. MSRP Usage ................................................26\n
    \     8.8. Considerations about the 'file-icon' Attribute ............28\n   9.
    Examples .......................................................28\n      9.1.
    Offerer Sends a File to the Answerer ......................28\n      9.2. Offerer
    Requests a File from the Answerer and\n           Second File Transfer ......................................33\n
    \     9.3. Example of a Capability Indication ........................40\n   10.
    Security Considerations .......................................41\n   11. IANA
    Considerations ...........................................42\n      11.1. Registration
    of New SDP Attributes .......................42\n           11.1.1. Registration
    of the file-selector Attribute .......43\n           11.1.2. Registration of the
    file-transfer-id Attribute ....43\n           11.1.3. Registration of the file-disposition
    Attribute ....43\n           11.1.4. Registration of the file-date Attribute ...........44\n
    \          11.1.5. Registration of the file-icon Attribute ...........44\n           11.1.6.
    Registration of the file-range Attribute ..........45\n   12. Acknowledgments
    ...............................................45\n   13. References ....................................................45\n
    \     13.1. Normative References .....................................45\n      13.2.
    Informative References ...................................46\n   Appendix A.  Alternatives
    Considered ..............................48\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Session Description Protocol (SDP) offer/answer [RFC3264]\n
    \  provides a mechanism for two endpoints to arrive at a common view of\n   a
    multimedia session between them.  These sessions often contain\n   real-time media
    streams such as voice and video, but are not limited\n   to that.  Basically,
    any media component type can be supported, as\n   long as there is a specification
    how to negotiate it within the SDP\n   offer/answer exchange.\n   The Message
    Session Relay Protocol (MSRP) [RFC4975] is a protocol for\n   transmitting instant
    messages (IMs) in the context of a session.  The\n   protocol specification describes
    the usage of SDP for establishing an\n   MSRP session.  In addition to plain text
    messages, MSRP is able to\n   carry arbitrary (binary) Multipurpose Internet Mail
    Extensions (MIME)\n   [RFC2045] compliant content, such as images or video clips.\n
    \  There are many cases where the endpoints involved in a multimedia\n   session
    would like to exchange files within the context of that\n   session.  With MSRP,
    it is possible to embed files as MIME objects\n   inside the stream of instant
    messages.  MSRP also has other features\n   that are useful for file transfer.
    \ Message chunking enables the\n   sharing of the same transport connection between
    the transfer of a\n   large file and interactive IM exchange without blocking
    the IM.  MSRP\n   relays [RFC4976] provide a mechanism for Network Address Translator\n
    \  (NAT) traversal.  Finally, Secure MIME (S/MIME) [RFC3851] can be used\n   for
    ensuring the integrity and confidentiality of the transferred\n   content.\n   However,
    the baseline MSRP does not readily meet all the requirements\n   for file transfer
    services within multimedia sessions.  There are\n   four main missing features:\n
    \  o  The recipient must be able to distinguish \"file transfer\" from\n      \"file
    attached to IM\", allowing the recipient to treat the cases\n      differently.\n
    \  o  It must be possible for the sender to send the request for a file\n      transfer.
    \ It must be possible for the recipient to accept or\n      decline it, using
    the meta information in the request.  The actual\n      transfer must take place
    only after acceptance by the recipient.\n   o  It must be possible for the sender
    to pass some meta information\n      on the file before the actual transfer.  This
    must be able to\n      include at least content type, size, hash, and name of
    the file,\n      as well as a short (human readable) description.\n   o  It must
    be possible for the recipient to request a file from the\n      sender, providing
    meta information about the file.  The sender\n      must be able to decide whether
    to send a file matching the\n      request.\n   The rest of this document is organized
    as follows.  Section 3 defines\n   a few terms used in this document.  Section
    4 provides the overview\n   of operation.  Section 5 introduces the concept of
    the file selector.\n   The detailed syntax and semantics of the new SDP attributes
    and\n   conventions on how the existing ones are used are defined in\n   Section
    6.  Section 7 discusses the file disposition types.\n   Section 8 describes the
    protocol operation involving SDP and MSRP.\n   Finally, some examples are given
    in Section 9.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in BCP 14, RFC 2119\n
    \  [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - "3.  Definitions\n   For the purpose of this document, the following definitions
    specified\n   in RFC 3264 [RFC3264] apply:\n   o  Answer\n   o  Answerer\n   o
    \ Offer\n   o  Offerer\n   Additionally, we define the following terms:\n   File
    sender:  The endpoint that is willing to send a file to the file\n      receiver.\n
    \  File receiver:  The endpoint that is willing to receive a file from\n      the
    file sender.\n   File selector:  A tuple of file attributes that the SDP offerer\n
    \     includes in the SDP in order to select a file at the SDP answerer.\n      This
    is described in more detail in Section 5.\n   Push operation:  A file transfer
    operation where the SDP offerer\n      takes the role of the file sender and the
    SDP answerer takes the\n      role of the file receiver.\n   Pull operation:  A
    file transfer operation where the SDP offerer\n      takes the role of the file
    receiver and the SDP answerer takes the\n      role of the file sender.\n"
  title: 3.  Definitions
- contents:
  - "4.  Overview of Operation\n   An SDP offerer creates an SDP body that contains
    the description of\n   one or more files that the offerer wants to send or receive.
    \ The\n   offerer sends the SDP offer to the remote endpoint.  The SDP answerer\n
    \  can accept or reject the transfer of each of those files separately.\n   The
    actual file transfer is carried out using the Message Session\n   Relay Protocol
    (MSRP) [RFC4975].  Each SDP \"m=\" line describes an\n   MSRP media stream used
    to transfer a single file at a time.  That is,\n   the transfer of multiple simultaneous
    files requires multiple \"m=\"\n   lines and corresponding MSRP media streams.
    \ It should be noted that\n   multiple MSRP media streams can share a single transport
    layer\n   connection, so this mechanism will not lead to excessive use of\n   transport
    resources.\n   Each \"m=\" line for an MSRP media stream is accompanied with a
    few\n   attributes describing the file to be transferred.  If the file sender\n
    \  generates the SDP offer, the attributes describe a local file to be\n   sent
    (push), and the file receiver can use this information to either\n   accept or
    reject the transfer.  However, if the SDP offer is\n   generated by the file receiver,
    the attributes are intended to\n   characterize a particular file that the file
    receiver is willing to\n   get (pull) from the file sender.  It is possible that
    the file sender\n   does not have a matching file or does not want to send the
    file, in\n   which case the offer is rejected.\n   The attributes describing each
    file are provided in SDP by a set of\n   new SDP attributes, most of which have
    been directly borrowed from\n   MIME.  This way, user agents can decide whether
    or not to accept a\n   given file transfer based on the file's name, size, description,\n
    \  hash, icon (e.g., if the file is a picture), etc.\n   SDP direction attributes
    (e.g., 'sendonly', 'recvonly') are used to\n   indicate the direction of the transfer,
    i.e., whether the SDP offerer\n   is willing to send or receive the file.  Assuming
    that the answerer\n   accepts the file transfer, the actual transfer of the files
    takes\n   place with ordinary MSRP.  Note that the 'sendonly' and 'recvonly'\n
    \  attributes refer to the direction of MSRP SEND requests and do not\n   preclude
    other protocol elements (such as 200 responses, REPORT\n   requests, etc.).\n
    \     In principle the file transfer can work even with an endpoint\n      supporting
    only regular MSRP without understanding the extensions\n      defined herein,
    in a particular case where that endpoint is both\n      the SDP answerer and the
    file receiver.  The regular MSRP endpoint\n      answers the offer as it would
    answer any ordinary MSRP offer\n      without paying attention to the extension
    attributes.  In such a\n      scenario, the user experience would, however, be
    reduced, since\n      the recipient would not know (by any protocol means) the
    reason\n      for the session and would not be able to accept/reject it based
    on\n      the file attributes.\n"
  title: 4.  Overview of Operation
- contents:
  - "5.  File Selector\n   When the file receiver generates the SDP offer, this SDP
    offer needs\n   to unambiguously identify the requested file at the file sender.
    \ For\n   this purpose, we introduce the notion of a file selector, which is a\n
    \  tuple composed of one or more of the following individual selectors:\n   the
    name, size, type, and hash of the file.  The file selector can\n   include any
    number of selectors, so all four of them do not always\n   need to be present.\n
    \  The purpose of the file selector is to provide enough information\n   about
    the file to the remote entity, so that both the local and the\n   remote entity
    can refer to the same file.  The file selector is\n   encoded in a 'file-selector'
    media attribute in SDP.  The formal\n   syntax of the 'file-selector' media attribute
    is described in\n   Figure 1.\n   The file selection process is applied to all
    the available files at\n   the host.  The process selects those files that match
    each of the\n   selectors present in the 'file-selector' attribute.  The result
    can\n   be zero, one, or more files, depending on the presence of the\n   mentioned
    selectors in the SDP and depending on the available files\n   in a host.  The
    file transfer mechanism specified in this document\n   requires that a file selector
    eventually results at most in a single\n   file to be chosen.  Typically, if the
    hash selector is known, it is\n   enough to produce a file selector that points
    to exactly zero or one\n   file.  However, a file selector that selects a unique
    file is not\n   always known by the offerer.  Sometimes only the name, size, or
    type\n   of file is known, so the file selector may result in selecting more\n
    \  than one file, which is an undesired case.  The opposite is also\n   true:
    if the file selector contains a hash selector and a name\n   selector, there is
    a risk that the remote host has renamed the file,\n   in which case, although
    a file whose computed hash equals the hash\n   selector exists, the file name
    does not match that of the name\n   selector.  Thus, in this case, the file selection
    process will result\n   in the selection of zero files.\n   This specification
    uses the Secure Hash Algorithm 1, SHA-1 [RFC3174].\n   If future needs require
    adding support for different hashing\n   algorithms, they will be specified as
    extensions to this document.\n   Implementations according to this specification
    MUST implement the\n   'file-selector' attribute and MAY implement any of the
    other\n   attributes specified in this specification.  SDP offers and answers\n
    \  for file transfer MUST contain a 'file-selector' media attribute that\n   selects
    the file to be transferred and MAY contain any of the other\n   attributes specified
    in this specification.\n   The 'file-selector' media attribute is also useful
    when learning the\n   support of the file transfer offer/answer capability that
    this\n   document specifies.  This is further explained in Section 8.5.\n"
  title: 5.  File Selector
- contents:
  - "6.  Extensions to SDP\n   We define a number of new SDP [RFC4566] attributes
    that provide the\n   required information to describe the transfer of a file with
    MSRP.\n   These are all media-level-only attributes in SDP.  The following is\n
    \  the formal ABNF syntax [RFC5234] of these new attributes.  It is\n   built
    above the SDP [RFC4566] grammar, RFC 2045 [RFC2045], RFC 2183\n   [RFC2183], RFC
    2392 [RFC2392], and RFC 5322 [RFC5322].\n   attribute           =/ file-selector-attr
    / file-disp-attr /\n                          file-tr-id-attr / file-date-attr
    /\n                          file-icon-attr / file-range-attr\n                          ;
    attribute is defined in RFC 4566\n   file-selector-attr   = \"file-selector\"
    [\":\" selector *(SP selector)]\n   selector             = filename-selector /
    filesize-selector /\n                          filetype-selector / hash-selector\n
    \  filename-selector    = \"name:\"  DQUOTE filename-string DQUOTE\n                                       ;
    DQUOTE defined in RFC 5234\n   filename-string      = 1*(filename-char/percent-encoded)\n
    \  filename-char        = %x01-09/%x0B-0C/%x0E-21/%x23-24/%x26-FF\n                                 ;
    any byte except NUL, CR, LF,\n                                 ; double quotes,
    or percent\n   percent-encoded      = \"%\" HEXDIG HEXDIG\n                                 ;
    HEXDIG defined in RFC 5234\n   filesize-selector    = \"size:\" filesize-value\n
    \  filesize-value       = integer        ;integer defined in RFC 4566\n   filetype-selector
    \   = \"type:\" type \"/\" subtype *(\";\" ft-parameter)\n   ft-parameter         =
    attribute \"=\" DQUOTE value-string DQUOTE\n                                      ;
    attribute is defined in RFC 2045\n                        ; free insertion of
    linear-white-space is not\n                        ; permitted in this context.\n
    \                       ; note: value-string has to be re-encoded\n                        ;
    when translating between this and a\n                        ; Content-Type header.\n
    \  value-string         = filename-string\n   hash-selector        = \"hash:\"
    hash-algorithm \":\" hash-value\n   hash-algorithm       = token     ; see IANA
    Hash Function\n                                    ; Textual Names registry\n
    \                                   ; only \"sha-1\" currently supported\n   hash-value
    \          = 2HEXDIG *(\":\" 2HEXDIG)\n                                ; Each
    byte in upper-case hex, separated\n                                ; by colons.\n
    \                               ; HEXDIG defined in RFC 5234\n   file-tr-id-attr
    \     = \"file-transfer-id:\" file-tr-id-value\n   file-tr-id-value     = token\n
    \  file-disp-attr       = \"file-disposition:\" file-disp-value\n   file-disp-value
    \     = token\n   file-date-attr       = \"file-date:\"  date-param *(SP date-param)\n
    \  date-param           = c-date-param / m-date-param / r-date-param\n   c-date-param
    \        = \"creation:\" DQUOTE date-time DQUOTE\n   m-date-param         = \"modification:\"
    DQUOTE date-time DQUOTE\n   r-date-param         = \"read:\" DQUOTE date-time
    DQUOTE\n                             ; date-time is defined in RFC 5322\n                             ;
    numeric timezones (+HHMM or -HHMM)\n                             ; must be used\n
    \                            ; DQUOTE defined in RFC 5234 files.\n   file-icon-attr
    \      = \"file-icon:\" file-icon-value\n   file-icon-value      = cid-url        ;
    cid-url defined in RFC 2392\n   file-range-attr      = \"file-range:\" start-offset
    \"-\" stop-offset\n   start-offset         = integer        ; integer defined
    in RFC 4566\n   stop-offset          = integer / \"*\"\n                   Figure
    1: Syntax of the SDP extension\n   When used for capability query (see Section
    8.5), the 'file-selector'\n   attribute MUST NOT contain any selector, because
    its presence merely\n   indicates compliance to this specification.\n   When used
    in an SDP offer or answer, the 'file-selector' attribute\n   MUST contain at least
    one selector.  Selectors characterize the file\n   to be transferred.  There are
    four selectors in this attribute:\n   'name', 'size', 'type', and 'hash'.\n   The
    'name' selector in the 'file-selector' attribute contains the\n   filename of
    the content enclosed in double quotes.  The filename is\n   encoded in UTF-8 [RFC3629].
    \ Its value SHOULD be the same as the\n   'filename' parameter of the Content-Disposition
    header field\n   [RFC2183] that would be signaled by the actual file transfer.
    \ If a\n   file name contains double quotes or any other character that the\n
    \  syntax does not allow in the 'name' selector, they MUST be percent-\n   encoded.
    \ The 'name' selector MUST NOT contain characters that can be\n   interpreted
    as directory structure by the local operating system.  If\n   such characters
    are present in the file name, they MUST be percent-\n   encoded.\n      Note that
    the 'name' selector might still contain characters that,\n      although not meaningful
    for the local operating system, might\n      still be meaningful to the remote
    operating system (e.g., '\\',\n      '/', ':').  Therefore, implementations are
    responsible for\n      sanitizing the input received from the remote endpoint
    before\n      doing a local operation in the local file system, such as the\n
    \     creation of a local file.  Among other things, implementations can\n      percent-encode
    characters that are meaningful to the local\n      operating system before doing
    file system local calls.\n   The 'size' selector in the 'file-selector' attribute
    indicates the\n   size of the file in octets.  The value of this attribute SHOULD
    be\n   the same as the 'size' parameter of the Content-Disposition header\n   field
    [RFC2183] that would be signaled by the actual file transfer.\n   Note that the
    'size' selector merely includes the file size, and does\n   not include any potential
    overhead added by a wrapper, such as\n   message/cpim [RFC3862].\n   The 'type'
    selector in the 'file-selector' attribute contains the\n   MIME media and submedia
    types of the content.  In general, anything\n   that can be expressed in a Content-Type
    header field (see RFC 2045\n   [RFC2045]) can also be expressed with the 'type'
    selectors.  Possible\n   MIME Media Type values are the ones listed in the IANA
    registry for\n   MIME Media Types [IANA].  Zero or more parameters can follow.
    \ When\n   translating parameters from a Content-Type header and a 'type'\n   selector,
    the parameter has to be re-encoded prior to its\n   accommodation as a parameter
    of the 'type' selector (see the ABNF\n   syntax of 'ft-parameter').\n   The 'hash'
    selector in the 'file-selector' attribute provides a hash\n   computation of the
    file to be transferred.  This is commonly used by\n   file transfer protocols.
    \ For example, FLUTE [FLUTE-REV] uses hashes\n   (called message digests) to verify
    the contents of the transfer.  The\n   purpose of the 'hash' selector is two-fold:
    On one side, in pull\n   operations, it allows the file receiver to identify a
    remote file by\n   its hash rather than by its file name, providing that the file\n
    \  receiver has learned the hash of the remote file by some out-of-band\n   mechanism.
    \ On the other side, in either push or pull operations, it\n   allows the file
    receiver to verify the contents of the received file,\n   or even avoid unnecessary
    transmission of an existing file.\n      The address space of the SHA-1 algorithm
    is big enough to avoid\n      any collision in hash computations in between two
    endpoints.  When\n      transferring files, the actual file transfer protocol
    should\n      provide reliable transmission of data, so verifications of\n      received
    files should always succeed.  However, if endpoints need\n      to protect the
    integrity of a file, they should use some other\n      mechanism than the 'hash'
    selector specified in this memo.\n   The 'hash' selector includes the hash algorithm
    and its value.\n   Possible hash algorithms are those defined in the IANA registry
    of\n   Hash Function Textual Names [IANA].  Implementations according to\n   this
    specification MUST add a 160-bit string resulting from the\n   computation of
    US Secure Hash Algorithm 1 (SHA1) [RFC3174] if the\n   'hash' selector is present.
    \ If need arises, extensions can be\n   drafted to support several hashing algorithms.
    \ Therefore,\n   implementations according to this specification MUST be prepared
    to\n   receive SDP containing more than a single 'hash' selector in the\n   'file-selector'
    attribute.\n   The value of the 'hash' selector is the byte string resulting from\n
    \  applying the hash algorithm to the content of the whole file, even\n   when
    the file transfer is limited to a number of octets (i.e., the\n   'file-range'
    attribute is indicated).\n   The 'file-transfer-id' attribute provides a randomly
    chosen globally\n   unique identification to the actual file transfer.  It is
    used to\n   distinguish a new file transfer request from a repetition of the SDP\n
    \  (or the fraction of the SDP that deals with the file description).\n   This
    attribute is described in much greater detail in Section 8.1.\n   The 'file-disposition'
    attribute provides a suggestion to the other\n   endpoint about the intended disposition
    of the file.  Section 7\n   provides further discussion of the possible values.
    \ The value of\n   this attribute SHOULD be the same as the disposition type parameter\n
    \  of the Content-Disposition header field [RFC2183] that would be\n   signaled
    by the actual file transfer protocol.\n   The 'file-date' attribute indicates
    the dates on which the file was\n   created, modified, or last read.  This attribute
    MAY contain a\n   combination of the 'creation', 'modification', and 'read' parameters,\n
    \  but MUST NOT contain more than one of each type .\n   The 'creation' parameter
    indicates the date on which the file was\n   created.  The value MUST be a quoted
    string that contains a\n   representation of the creation date of the file in
    RFC 5322 [RFC5322]\n   'date-time' format.  Numeric timezones (+HHMM or -HHMM)
    MUST be used.\n   The value of this parameter SHOULD be the same as the 'creation-date'\n
    \  parameter of the Content-Disposition header field [RFC2183] that\n   would
    be signaled by the actual file transfer protocol.\n   The 'modification' parameter
    indicates the date on which the file was\n   last modified.  The value MUST be
    a quoted string that contains a\n   representation of the last modification date
    to the file in RFC 5322\n   [RFC5322] 'date-time' format.  Numeric timezones (+HHMM
    or -HHMM)\n   MUST be used.  The value of this parameter SHOULD be the same as
    the\n   'modification-date' parameter of the Content-Disposition header field\n
    \  [RFC2183] that would be signaled by the actual file transfer\n   protocol.\n
    \  The 'read' parameter indicates the date on which the file was last\n   read.
    \ The value MUST be a quoted string that contains a\n   representation of the
    last date the file was read in RFC 5322\n   [RFC5322] 'date-time' format.  Numeric
    timezones (+HHMM or -HHMM)\n   MUST be used.  The value of this parameter SHOULD
    be the same as the\n   'read-date' parameter of the Content-Disposition header
    field\n   [RFC2183] that would be signaled by the actual file transfer\n   protocol.\n
    \  The 'file-icon' attribute can be useful with certain file types such\n   as
    images.  It allows the file sender to include a pointer to a body\n   that includes
    a small preview icon representing the contents of the\n   file to be transferred,
    which the file receiver can use to determine\n   whether it wants to receive such
    file.  The 'file-icon' attribute\n   contains a Content-ID URL, which is specified
    in RFC 2392 [RFC2392].\n   Section 8.8 contains further considerations about the
    'file-icon'\n   attribute.\n   The 'file-range' attribute provides a mechanism
    to signal a chunk of\n   a file rather than the complete file.  This enables use
    cases where a\n   file transfer can be interrupted and resumed, even perhaps changing\n
    \  one of the endpoints.  The 'file-range' attribute contains the \"start\n   offset\"
    and \"stop offset\" of the file, separated by a dash \"-\".  The\n   \"start offset\"
    value refers to the octet position of the file where\n   the file transfer should
    start.  The first octet of a file is denoted\n   by the ordinal number \"1\".
    \ The \"stop offset\" value refers to the\n   octet position of the file where
    the file transfer should stop,\n   inclusive of this octet.  The \"stop offset\"
    value MAY contain a \"*\"\n   if the total size of the file is not known in advance.
    \ The absence\n   of this attribute indicates a complete file, i.e., as if the
    'file-\n   range' attribute would have been present with a value \"1-*\".  The\n
    \  'file-range' attribute must not be confused with the Byte-Range\n   header
    in MSRP.  The former indicates the portion of a file that the\n   application
    would read and pass onto the MSRP stack for\n   transportation.  From the point
    of view of MSRP, the portion of the\n   file is viewed as a whole message.  The
    latter indicates the number\n   of bytes of that message that are carried in a
    chunk and the total\n   size of the message.  Therefore, MSRP starts counting
    the delivered\n   message at octet number 1, independently of the position of
    that\n   octet in the file.\n   The following is an example of an SDP body that
    contains the\n   extensions defined in this memo:\n   v=0\n   o=alice 2890844526
    2890844526 IN IP4 host.atlanta.example.com\n   s=\n   c=IN IP4 host.atlanta.example.com\n
    \  t=0 0\n   m=message 7654 TCP/MSRP *\n   i=This is my latest picture\n   a=sendonly\n
    \  a=accept-types:message/cpim\n   a=accept-wrapped-types:*\n   a=path:msrp://atlanta.example.com:7654/jshA7we;tcp\n
    \  a=file-selector:name:\"My cool picture.jpg\" type:image/jpeg\n     size:32349
    hash:sha-1:\n     72:24:5F:E8:65:3D:DA:F3:71:36:2F:86:D4:71:91:3E:E4:A2:CE:2E\n
    \  a=file-transfer-id:vBnG916bdberum2fFEABR1FR3ExZMUrd\n   a=file-disposition:attachment\n
    \  a=file-date:creation:\"Mon, 15 May 2006 15:01:31 +0300\"\n   a=file-icon:cid:id2@alicepc.example.com\n
    \  a=file-range:1-32349\n            Figure 2: Example of SDP describing a file
    transfer\n      NOTE: The 'file-selector' attribute in the above figure is split\n
    \     in three lines for formatting purposes.  Real implementations will\n      encode
    it in a single line.\n"
  title: 6.  Extensions to SDP
- contents:
  - "7.  File Disposition Types\n   The SDP offer/answer for file transfer allows
    the file sender to\n   indicate a preferred disposition of the file to be transferred
    in a\n   new 'file-disposition' attribute.  In principle, any value listed in\n
    \  the IANA registry for Mail Content Disposition Values [IANA] is\n   acceptable;
    however, most of them may not be applicable.\n   There are two content dispositions
    of interest for file transfer\n   operations.  On one hand, the file sender may
    just want the file to\n   be rendered immediately in the file receiver's device.
    \ On the other\n   hand, the file sender may just want to indicate to the file
    receiver\n   that the file should not be rendered at the reception of the file.\n
    \  The recipient's user agent may want to interact with the user\n   regarding
    the file disposition or it may save the file until the user\n   takes an action.
    \ In any case, the exact actions are implementation\n   dependent.\n   To indicate
    that a file should be automatically rendered, this memo\n   uses the existing
    'render' value of the Content Disposition type in\n   the new 'file-disposition'
    attribute in SDP.  To indicate that a file\n   should not be automatically rendered,
    this memo uses the existing\n   'attachment' value of the Content-Disposition
    type in the new 'file-\n   disposition' attribute in SDP.  The default value is
    'render', i.e.,\n   the absence of a 'file-disposition' attribute in the SDP has
    the same\n   semantics as 'render'.\n      The disposition value 'attachment'
    is specified in RFC 2183\n      [RFC2183] with the following definition:\n         \"Body
    parts can be designated 'attachment' to indicate that\n         they are separate
    from the main body of the mail message, and\n         that their display should
    not be automatic, but contingent upon\n         some further action of the user.\"\n
    \     In the case of this specification, the 'attachment' disposition\n      type
    is used to indicate that the display of the file should not\n      be automatic,
    but contingent upon some further action of the user.\n"
  title: 7.  File Disposition Types
- contents:
  - "8.  Protocol Operation\n   This section discusses how to use the parameters defined
    in Section 6\n   in the context of an offer/answer [RFC3264] exchange.  Additionally,\n
    \  this section also discusses the behavior of the endpoints using MSRP.\n   A
    file transfer session is initiated by the offerer sending an SDP\n   offer to
    the answerer.  The answerer either accepts or rejects the\n   file transfer session
    and sends an SDP answer to the offerer.\n   We can differentiate two use cases,
    depending on whether the offerer\n   is the file sender or file receiver:\n   1.
    \ The offerer is the file sender, i.e., the offerer wants to\n       transmit
    a file to the answerer.  Consequently, the answerer is\n       the file receiver.
    \ In this case, the SDP offer contains a\n       'sendonly' attribute, and accordingly
    the SDP answer contains a\n       'recvonly' attribute.\n   2.  The offerer is
    the file receiver, i.e., the offerer wants to\n       fetch a file from the answerer.
    \ Consequently, the answerer is\n       the file sender.  In this case, the SDP
    offer contains a session\n       or media 'recvonly' attribute, and accordingly
    the SDP answer\n       contains a session or media 'sendonly' attribute.\n"
  - contents:
    - "8.1.  The 'file-transfer-id' Attribute\n   This specification creates an extension
      to the SDP offer/answer model\n   [RFC3264], and because of that, it is assumed
      that the existing SDP\n   behavior is kept intact.  The SDP behavior requires,
      for example,\n   that SDP is sent again to the remote party in situations where
      the\n   media description or perhaps other SDP parameters have not changed\n
      \  with respect to a previous offer/answer exchange.  Let's consider the\n   SIP
      Session Timer (RFC 4028) [RFC4028], which uses re-INVITE requests\n   to refresh
      sessions.  RFC 4028 recommends to send unmodified SDP in a\n   re-INVITE to
      refresh the session.  Should this re-INVITE contain SDP\n   describing a file
      transfer operation and occur while the file\n   transfer was still going on,
      there would be no means to detect\n   whether the SDP creator wanted to abort
      the current file transfer\n   operation and initiate a new one or the SDP file
      description was\n   included in the SDP due to other reasons (e.g., session
      timer\n   refresh).\n   A similar scenario occurs when two endpoints have successfully
      agreed\n   on a file transfer, which is currently taking place when one of the\n
      \  endpoints wants to add additional media streams to the existing\n   session.
      \ In this case, the endpoint sends a re-INVITE request that\n   contains the
      SDP.  The SDP needs to maintain the media descriptions\n   for the current ongoing
      file transfer and add the new media\n   descriptions.  The problem is that the
      other endpoint is not able to\n   determine whether or not a new file transfer
      is requested.\n   In other cases, a file transfer was successfully completed.
      \ Then, if\n   an endpoint resends the SDP offer with the media stream for the
      file\n   transfer, then the other endpoint wouldn't be able to determine\n   whether
      or not a new file transfer should start.\n   To address these scenarios, this
      specification defines the 'file-\n   transfer-id' attribute, which contains
      a globally unique random\n   identifier allocated to the file transfer operation.
      \ The file\n   transfer identifier helps both endpoints to determine whether
      the SDP\n   offer is requesting a new file transfer or it is a repetition of
      the\n   SDP.  A new file transfer is one that, in case of acceptance, will\n
      \  provoke the actual transfer of a file.  This is typically the case of\n   new
      offer/answer exchanges, or in cases where an endpoint wants to\n   abort the
      existing file transfer and restart the file transfer once\n   more.  On the
      other hand, the repetition of the SDP does not lead to\n   any actual file to
      be transferred, potentially because the file\n   transfer is still going on
      or because it has already finished.  This\n   is the case of repeated offer/answer
      exchanges, which can be due to a\n   number of reasons (session timer, addition/removal
      of other media\n   types in the SDP, update in SDP due to changes in other session\n
      \  parameters, etc.).\n   Implementations according to this specification MUST
      include a 'file-\n   transfer-id' attribute in SDP offers and answers.  The
      SDP offerer\n   MUST select a file transfer identifier according to the syntax
      and\n   add it to the 'file-transfer-id' attribute.  The SDP answerer MUST\n
      \  copy the value of the 'file-transfer-id' attribute in the SDP answer.\n   The
      file transfer identifier MUST be unique within the current\n   session (never
      used before in this session), and it is RECOMMENDED to\n   be unique across
      different sessions.  It is RECOMMENDED to select a\n   relatively big random
      identifier (e.g., 32 characters) to avoid\n   duplications.  The SDP answerer
      MUST keep track of the proposed file\n   transfer identifiers in each session
      and copy the value of the\n   received file transfer identifier in the SDP answer.\n
      \  If a file transfer is suspended and resumed at a later time, the\n   resumption
      is considered a new file transfer (even when the file to\n   be transferred
      is the same); therefore, the SDP offerer MUST choose a\n   new file transfer
      identifier.\n   If an endpoint sets the port number to zero in the media description\n
      \  of a file transfer, for example, because it wants to reject the file\n   transfer
      operation, then the SDP answer MUST mirror the value of the\n   'file-transfer-id'
      attribute included in the SDP offer.  This\n   effectively means that setting
      a media stream to zero has higher\n   precedence than any value that the 'file-transfer-id'
      attribute can\n   take.\n   As a side effect, the 'file-transfer-id' attribute
      can be used for\n   aborting and restarting again an ongoing file transfer.
      \ Assume that\n   two endpoints agree on a file transfer and the actual transfer
      of the\n   file is taking place.  At some point in time in the middle of the\n
      \  file transfer, one endpoint sends a new SDP offer, equal to the\n   initial
      one except for the value of the 'file-transfer-id' attribute,\n   which is a
      new globally unique random value.  This indicates that the\n   offerer wants
      to abort the existing transfer and start a new one,\n   according to the SDP
      parameters.  The SDP answerer SHOULD abort the\n   ongoing file transfer, according
      to the procedures of the file\n   transfer protocol (e.g., MSRP), and start
      sending file once more from\n   the initial requested octet.  Section 8.4 further
      discusses aborting\n   a file transfer.\n   If an endpoint creates an SDP offer
      where the 'file-transfer-id'\n   attribute value does not change with respect
      to a previously sent\n   one, but the file selector changes so that a new file
      is selected,\n   then this is considered an error, and the SDP answerer MUST
      abort the\n   file transfer operation (e.g., by setting the port number to zero
      in\n   the SDP answer).  Note that endpoints MAY change the 'file-selector'\n
      \  attribute as long as the selected file does not change (e.g., by\n   adding
      a hash selector); however, it is RECOMMENDED that endpoints do\n   not change
      the value of the 'file-selector' attribute if it is\n   requested to transfer
      the same file described in a previous SDP\n   offer/answer exchange.\n   Figure
      3 summarizes the relation of the 'file-transfer-id' attribute\n   with the file
      selector in subsequent SDP exchanges.\n                      \\                |
      \            |               |\n                       \\ file selector |  different
      \ |     same      |\n     'file-transfer-id' \\              |    file     |
      \    file      |\n     ==================================+=============+===============+\n
      \                                      |  new file   |   new file    |\n      changed
      \                         |  transfer   |   transfer    |\n                                       |
      \ operation  |   operation   |\n     ----------------------------------+-------------+---------------+\n
      \                                      |             | existing file |\n      unchanged
      \                       |   error     |   transfer    |\n                                       |
      \            |   operation   |\n     ----------------------------------+-------------+---------------+\n
      \     Figure 3: Relation of the 'file-transfer-id' attribute with the\n             selector
      of the file in a subsequent SDP exchange\n   In another scenario, an endpoint
      that has successfully transferred a\n   file wants to send an SDP due to other
      reasons than the transfer of a\n   file.  The SDP offerer creates an SDP file
      description that maintains\n   the media description line corresponding to the
      file transfer.  The\n   SDP offerer MUST then set the port number to zero and
      MUST keep the\n   same value of the 'file-transfer-id' attribute that the initial
      file\n   transfer got.\n"
    title: 8.1.  The 'file-transfer-id' Attribute
  - contents:
    - "8.2.  Offerer's Behavior\n   An offerer who wishes to send or receive one or
      more files to or from\n   an answerer MUST build an SDP [RFC4566] description
      of a session\n   containing one \"m=\" line per file.  When MSRP is used as
      the transfer\n   mechanism, each \"m=\" line also describes a single MSRP session,\n
      \  according to the MSRP [RFC4975] procedures.  Any \"m=\" lines that may\n
      \  have already been present in a previous SDP exchange are normally\n   kept
      unmodified; the new \"m=\" lines are added afterwards (Section 8.6\n   describes
      cases when \"m=\" lines are reused).  All the media line\n   attributes specified
      and required by MSRP [RFC4975] (e.g., \"a=path\",\n   \"a=accept-types\", etc.)
      \ MUST be included as well.\n"
    - contents:
      - "8.2.1.  The Offerer Is a File Sender\n   In a push operation, the file sender
        creates an SDP offer describing\n   the file to be sent.  The file sender
        MUST add a 'file-selector'\n   attribute media line containing at least one
        of the 'type', 'size',\n   or 'hash' selectors in indicating the type, size,
        or hash of the\n   file, respectively.  If the file sender wishes to start
        a new file\n   transfer, the file sender MUST add a 'file-transfer-id' attribute\n
        \  containing a new globally unique random identifier value.\n   Additionally,
        the file sender MUST add a session or media 'sendonly'\n   attribute to the
        SDP offer.  Then the file sender sends the SDP offer\n   to the file receiver.\n
        \     Not all the selectors in the 'file-selector' attribute might be\n      known
        when the file sender creates the SDP offer, for example,\n      because the
        host is still processing the file.\n      The 'hash' selector in the 'file-selector'
        attribute contains\n      valuable information for the file receiver to identify
        whether the\n      file is already available and need not be transmitted.\n
        \  The file sender MAY also add a 'name' selector in the 'file-selector'\n
        \  attribute, and 'file-icon', 'file-disposition', and 'file-date'\n   attributes
        further describing the file to be transferred.  The 'file-\n   disposition'
        attribute provides a presentation suggestion (for\n   example: the file sender
        would like the file receiver to render the\n   file or not).  The three date
        attributes provide the answerer with an\n   indication of the age of the file.
        \ The file sender MAY also add a\n   'file-range' attribute indicating the
        start and stop offsets of the\n   file.\n   When the file sender receives
        the SDP answer, if the port number of\n   the answer for a file request is
        non-zero, the file sender starts the\n   transfer of the file according to
        the negotiated parameters in SDP.\n"
      title: 8.2.1.  The Offerer Is a File Sender
    - contents:
      - "8.2.2.  The Offerer Is a File Receiver\n   In a pull operation, the file
        receiver creates the SDP offer and\n   sends it to the file sender.  The file
        receiver MUST include a 'file-\n   selector' attribute and MUST include, at
        least, one of the selectors\n   defined for such attribute (i.e., 'name',
        'type', 'size', or 'hash').\n   In many cases, if the hash of the file is
        known, that is enough to\n   identify the file; therefore, the offerer can
        include only a 'hash'\n   selector.  However, particularly in cases where
        the hash of the file\n   is unknown, the file name, size, and type can provide
        a description\n   of the file to be fetched.  If the file receiver wishes
        to start a\n   new file transfer, it MUST add a 'file-transfer-id' attribute\n
        \  containing a new globally unique random value.  The file receiver MAY\n
        \  also add a 'file-range' attribute indicating the start and stop\n   offsets
        of the file.  There is no need for the file receiver to\n   include further
        file attributes in the SDP offer; thus, it is\n   RECOMMENDED that SDP offerers
        do not include any other file attribute\n   defined by this specification
        (other than the mandatory ones).\n   Additionally, the file receiver MUST
        add a session or media\n   'recvonly' attribute in the SDP offer.  Then, the
        file receiver sends\n   the SDP offer to the file sender.\n   When the file
        receiver receives the SDP answer, if the port number of\n   the answer for
        a file request is non-zero, then the file receiver\n   should receive the
        file using the protocol indicated in the \"m=\"\n   line.  If the SDP answer
        contains a supported hashing algorithm in\n   the 'hash' selectors of the
        'file-selector' attribute, then the file\n   receiver SHOULD compute the hash
        of the file after its reception and\n   check it against the hash received
        in the answer.  In case the\n   computed hash does not match the one contained
        in the SDP answer, the\n   file receiver SHOULD consider that the file transfer
        failed and\n   SHOULD inform the user.  Similarly, the file receiver SHOULD
        also\n   verify that the other selectors declared in the SDP match the file\n
        \  properties, otherwise, the file receiver SHOULD consider that the\n   file
        transfer failed and SHOULD inform the user.\n"
      title: 8.2.2.  The Offerer Is a File Receiver
    - contents:
      - "8.2.3.  SDP Offer for Several Files\n   An offerer that wishes to send or
        receive more than one file\n   generates an \"m=\" line per file along with
        the file attributes\n   described in this specification.  This way, the answerer
        can reject\n   individual files by setting the port number of their associated
        \"m=\"\n   lines to zero, as per regular SDP [RFC4566] procedures.  Similarly,\n
        \  the answerer can accept each individual file separately by setting\n   the
        port number of their associated \"m=\" lines to non-zero value.\n   Each file
        has its own file transfer identifier, which uniquely\n   identifies each file
        transfer.\n   Using an \"m=\" line per file implies that different files are\n
        \  transferred using different MSRP sessions.  However, all those MSRP\n   sessions
        can be set up to run over a single TCP connection, as\n   described in Section
        8.1 of RFC 4975 [RFC4975].  The same TCP\n   connection can also be reused
        for sequential file transfers.\n"
      title: 8.2.3.  SDP Offer for Several Files
    title: 8.2.  Offerer's Behavior
  - contents:
    - "8.3.  Answerer's Behavior\n   If the answerer wishes to reject a file offered
      by the offerer, it\n   sets the port number of the \"m=\" line associated with
      the file to\n   zero, as per regular SDP [RFC4566] procedures.  The rejected
      answer\n   MUST contained a 'file-selector' and 'file-transfer-id' attributes\n
      \  whose values mirror the corresponding values of the SDP offer.\n   If the
      answerer decides to accept the file, it proceeds as per\n   regular MSRP [RFC4975]
      and SDP [RFC4566] procedures.\n"
    - contents:
      - "8.3.1.  The Answerer Is a File Receiver\n   In a push operation, the SDP
        answerer is the file receiver.  When the\n   file receiver gets the SDP offer,
        it first examines the port number.\n   If the port number is set to zero,
        the file transfer operation is\n   closed, and no more data is expected over
        the media stream.  Then, if\n   the port number is different than zero, the
        file receiver inspects\n   the 'file-transfer-id' attribute.  If the value
        of the 'file-\n   transfer-id' attribute has been previously used, then the
        existing\n   session remains without changes; perhaps the file transfer is
        still\n   in progress, or perhaps it has concluded, but there are no changes\n
        \  with respect to the current status.  In any case, independently of\n   the
        port number, the SDP answerer creates a regular SDP answer and\n   sends it
        to the offerer.\n   If the port number is different than zero and the SDP
        offer contains\n   a new 'file-transfer-id' attribute, then it is signaling
        a request\n   for a new file transfer.  The SDP answerer extracts the attributes\n
        \  and parameters that describe the file and typically requests\n   permission
        from the user to accept or reject the reception of the\n   file.  If the file
        transfer operation is accepted, the file receiver\n   MUST create an SDP answer
        according to the procedures specified in\n   RFC 3264 [RFC3264].  If the offer
        contains 'name', 'type', or 'size'\n   selectors in the 'file-selector' attribute,
        the answerer MUST copy\n   them into the answer.  The file receiver copies
        the value of the\n   'file-transfer-id' attribute to the SDP answer.  Then
        the file\n   receiver MUST add a session or media 'recvonly' attribute according\n
        \  to the procedures specified in RFC 3264 [RFC3264].  The file receiver\n
        \  MUST NOT include 'file-icon', 'file-disposition', or 'file-date'\n   attributes
        in the SDP answer.\n   The file receiver can use the hash to find out if a
        local file with\n   the same hash is already available, in which case, this
        could imply\n   the reception of a duplicated file.  It is up to the answerer
        to\n   determine whether or not the file transfer is accepted in case of a\n
        \  duplicated file.\n   If the SDP offer contains a 'file-range' attribute
        and the file\n   receiver accepts to receive the range of octets declared
        in there,\n   the file receiver MUST include a 'file-range' attribute in the
        SDP\n   answer with the same range of values.  If the file receiver does not\n
        \  accept the reception of that range of octets, it SHOULD reject the\n   transfer
        of the file.\n   When the file transfer operation is complete, the file receiver\n
        \  computes the hash of the file and SHOULD verify that it matches the\n   hash
        declared in the SDP.  If they do not match, the file receiver\n   SHOULD consider
        that the file transfer failed and SHOULD inform the\n   user.  Similarly,
        the file receiver SHOULD also verify that the other\n   selectors declared
        in the SDP match the file properties; otherwise,\n   the file receiver SHOULD
        consider that the file transfer failed and\n   SHOULD inform the user.\n"
      title: 8.3.1.  The Answerer Is a File Receiver
    - contents:
      - "8.3.2.  The Answerer Is a File Sender\n   In a pull operation the answerer
        is the file sender.  In this case,\n   the SDP answerer MUST first inspect
        the value of the\n   'file-transfer-id' attribute.  If it has not been previously
        used\n   throughout the session, then acceptance of the file MUST provoke
        the\n   transfer of the file over the negotiated protocol.  However, if the\n
        \  value has been previously used by another file transfer operation\n   within
        the session, then the file sender MUST NOT alert the user and\n   MUST NOT
        start a new transfer of the file.  No matter whether or not\n   an actual
        file transfer is initiated, the file sender MUST create a\n   proper SDP answer
        that contains the 'file-transfer-id' attribute with\n   the same value received
        in the SDP offer, and then it MUST continue\n   processing the SDP answer.\n
        \  The file sender MUST always create an SDP answer according to the SDP\n
        \  offer/answer procedures specified in RFC 3264 [RFC3264].  The file\n   sender
        inspects the file selector of the received SDP offer, which is\n   encoded
        in the 'file-selector' media attribute line.  Then the file\n   sender applies
        the file selector, which implies selecting those files\n   that match one
        by one with the 'name', 'type', 'size', and 'hash'\n   selectors of the 'file-selector'
        attribute line (if they are\n   present).  The file selector identifies zero
        or more candidate files\n   to be sent.  If the file selector is unable to
        identify any file,\n   then the answerer MUST reject the MSRP stream for file
        transfer by\n   setting the port number to zero, and then the answerer SHOULD
        also\n   reject the SDP as per procedures in RFC 3264 [RFC3264], if this is\n
        \  the only stream described in the SDP offer.\n   If the file selector points
        to a single file and the file sender\n   decides to accept the file transfer,
        the file sender MUST create an\n   SDP answer that contains a 'sendonly' attribute,
        according to the\n   procedures described in RFC 3264 [RFC3264].  The file
        sender SHOULD\n   add a 'hash' selector in the answer with the locally computed
        SHA-1\n   hash over the complete file.  If a hash value computed by the file\n
        \  sender differs from that specified by the file receiver, the file\n   sender
        can either send the file without that hash value or reject the\n   request
        by setting the port in the media stream to zero.  The file\n   sender MAY
        also include a 'type' selector in the 'file-selector'\n   attribute line of
        the SDP answer.  The answerer MAY also include\n   'file-icon' and 'file-disposition'
        attributes to further describe the\n   file.  Although the answerer MAY also
        include a 'name' and 'size'\n   selectors in the 'file-selector' attribute,
        and a 'file-date'\n   attribute, it is RECOMMENDED not to include them in
        the SDP answer if\n   the actual file transfer protocol (e.g., MSRP [RFC4975])
        can\n   accommodate a Content-Disposition header field [RFC2183] with the\n
        \  equivalent parameters.\n      The whole idea of adding file descriptors
        to SDP is to provide a\n      mechanism where a file transfer can be accepted
        prior to its\n      start.  Adding any SDP attributes that are otherwise signaled\n
        \     later in the file transfer protocol would just duplicate the\n      information,
        but will not provide any information to the offerer\n      to accept or reject
        the file transfer (note that the offerer is\n      requesting a file).\n   Last,
        if the file selector points to multiple candidate files, the\n   answerer
        MAY use some local policy, e.g., consulting the user, to\n   choose one of
        them to be defined in the SDP answer.  If that choice\n   cannot be done,
        the answerer SHOULD reject the MSRP media stream for\n   file transfer (by
        setting the port number to zero).\n      If the need arises, future specifications
        can provide a suitable\n      mechanism that allows to either select multiple
        files or, e.g.,\n      resolve ambiguities by returning a list of files that
        match the\n      file selector.\n   If the SDP offer contains a 'file-range'
        attribute and the file\n   sender accepts to send the range of octets declared
        in there, the\n   file sender MUST include a 'file-range' attribute in the
        SDP answer\n   with the same range of values.  If the file sender does not
        accept\n   sending that range of octets, it SHOULD reject the transfer of
        the\n   file.\n"
      title: 8.3.2.  The Answerer Is a File Sender
    title: 8.3.  Answerer's Behavior
  - contents:
    - "8.4.  Aborting an Ongoing File Transfer Operation\n   Either the file sender
      or the file receiver can abort an ongoing file\n   transfer at any time.  Unless
      otherwise noted, the entity that aborts\n   an ongoing file transfer operation
      MUST follow the procedures at the\n   media level (e.g., MSRP) and at the signaling
      level (SDP offer/\n   answer), as described below.\n   Assume the scenario depicted
      in Figure 4 where a file sender wishes\n   to abort an ongoing file transfer
      without initiating an alternative\n   file transfer.  Assume that an ongoing
      MSRP SEND request is being\n   transmitted.  The file sender aborts the MSRP
      message by including\n   the '#' character in the continuation field of the
      end-line of a SEND\n   request, according to the MSRP procedures (see Section
      7.1 of RFC\n   4975 [RFC4975]).  Since a file is transmitted as one MSRP message,\n
      \  aborting the MSRP message effectively aborts the file transfer.  The\n   file
      receiver acknowledges the MSRP SEND request with a 200 response.\n   Then the
      file sender SHOULD close the MSRP session by creating a new\n   SDP offer that
      sets the port number to zero in the related \"m=\" line\n   that describes the
      file transfer (see Section 8.2 of RFC 3264\n   [RFC3264]).  This SDP offer MUST
      conform with the requirements of\n   Section 8.2.1.  The 'file-transfer-id'
      attribute MUST be the same\n   attribute that identifies the ongoing transfer.
      \ Then the file sender\n   sends this SDP offer to the file receiver.\n      Rather
      than close the MSRP session by setting the port number to\n      zero in the
      related \"m=\" line, the file sender could also tear\n      down the whole session,
      e.g., by sending a SIP BYE request.\n   Note that it is the responsibility of
      the file sender to tear down\n   the MSRP session.  Implementations should be
      prepared for\n   misbehaviors and implement measures to avoid hang states.  For\n
      \  example, upon expiration of a timer the file receiver can close the\n   aborted
      MSRP session by using regular MSRP procedures.\n   A file receiver that receives
      the above SDP offer creates an SDP\n   answer according to the procedures of
      the SDP offer/answer (RFC 3264\n   [RFC3264]).  This SDP answer MUST conform
      with the requirements of\n   Section 8.3.1.  Then the file receiver sends this
      SDP answer to the\n   file sender.\n                        File sender            File
      receiver\n                            |                        |\n                            |\\
      \                      |\n                            | \\                      |\n
      \                           |  \\                     |\n                            |
      \  \\                    |\n                            |    \\                   |\n
      \                           |     \\                  |\n                     abort->|
      \     \\  MSRP SEND (#)  |\n                            |       +--------------->|\n
      \                           | MSRP 200               |\n                            |<-----------------------|\n
      \                           | re-INVITE (SDP offer)  |\n                            |----------------------->|\n
      \                           | SIP 200 OK (SDP answer)|\n                            |<-----------------------|\n
      \                           | SIP ACK                |\n                            |----------------------->|\n
      \                           |                        |\n           Figure 4:
      File sender aborts an ongoing file transfer\n   When the file receiver wants
      to abort the file transfer, there are\n   two possible scenarios, depending
      on the value of the Failure-Report\n   header in the ongoing MSRP SEND request.
      \ Assume now the scenario\n   depicted in Figure 5 where the MSRP SEND request
      includes a Failure-\n   Report header set to a value different than \"no\".
      \ When the file\n   receiver wishes to abort the ongoing file transfer, the
      file receiver\n   generates an MSRP 413 response to the current MSRP SEND request
      (see\n   Section 10.5 of RFC 4975 [RFC4975]).  Then the file receiver MUST\n
      \  close the MSRP session by generating a new SDP offer that sets the\n   port
      number to zero in the related \"m=\" line that describes the file\n   transfer
      (see Section 8.2 of RFC 3264 [RFC3264]).  This SDP offer\n   MUST conform with
      the requirements expressed in Section 8.2.2.  The\n   'file-transfer-id' attribute
      MUST be the same attribute that\n   identifies the ongoing transfer.  Then the
      file receiver sends this\n   SDP offer to the file sender.\n                     File
      sender            File receiver\n                         |                        |\n
      \                        |\\                       |\n                         |
      \\  MSRP SEND           |\n                         |  \\ Failure-Report: yes
      |\n                         |   \\                    |\n                         |
      \   \\                   |\n                         |     \\                  |\n
      \                        |      \\                 |\n                         |
      \      \\                |\n                         |        \\               |\n
      \                        | MSRP 413               |<-abort\n                         |<-----------------------|\n
      \                        |          \\   (#)       |\n                         |
      \          +----------->|\n                         | re-INVITE (SDP offer)
      \ |\n                         |<-----------------------|\n                         |
      SIP 200 OK (SDP answer)|\n                         |----------------------->|\n
      \                        | SIP ACK                |\n                         |<-----------------------|\n
      \                        |                        |\n    Figure 5: File receiver
      aborts an ongoing file transfer.  Failure-\n             Report set to a value
      different than \"no\" in MSRP\n   In another scenario, depicted in Figure 6,
      an ongoing file transfer\n   is taking place, where the MSRP SEND request contains
      a Failure-\n   Report header set to the value \"no\".  When the file receiver
      wants to\n   abort the ongoing transfer, it MUST close the MSRP session by\n
      \  generating a new SDP offer that sets the port number to zero in the\n   related
      \"m=\" line that describes the file transfer (see Section 8.2\n   of RFC 3264
      [RFC3264]).  This SDP offer MUST conform with the\n   requirements expressed
      in Section 8.2.2.  The 'file-transfer-id'\n   attribute MUST be the same attribute
      that identifies the ongoing\n   transfer.  Then the file receiver sends this
      SDP offer to the file\n   sender.\n                     File sender            File
      receiver\n                         |                        |\n                         |\\
      \                      |\n                         | \\  MSRP SEND           |\n
      \                        |  \\ Failure-Report: no  |\n                         |
      \  \\                    |\n                         |    \\                   |\n
      \                        |     \\                  |\n                         |
      \     \\                 |\n                         |       \\                |\n
      \                        |        \\               |\n                         |
      re-INVITE (SDP offer)  |<-abort\n                         |<-----------------------|\n
      \                        |          \\   (#)       |\n                         |
      \          +----------->|\n                         | MSRP 200               |\n
      \                        |<-----------------------|\n                         |
      SIP 200 OK (SDP answer)|\n                         |----------------------->|\n
      \                        | SIP ACK                |\n                         |<-----------------------|\n
      \                        |                        |\n    Figure 6: File receiver
      aborts an ongoing file transfer.  Failure-\n                        Report set
      to \"no\" in MSRP\n   A file sender that receives an SDP offer setting the port
      number to\n   zero in the related \"m=\" line for file transfer, first, if an
      ongoing\n   MSRP SEND request is being transmitted, aborts the MSRP message
      by\n   including the '#' character in the continuation field of the end-line\n
      \  of a SEND request, according to the MSRP procedures (see Section 7.1\n   of
      RFC 4975 [RFC4975]).  Since a file is transmitted as one MSRP\n   message, aborting
      the MSRP message effectively aborts the file\n   transfer.  Then the file sender
      creates an SDP answer according to\n   the procedures of the SDP offer/answer
      (RFC 3264 [RFC3264]).  This\n   SDP answer MUST conform with the requirements
      of Section 8.3.2.  Then\n   the file sender sends this SDP answer to the file
      receiver.\n"
    title: 8.4.  Aborting an Ongoing File Transfer Operation
  - contents:
    - "8.5.  Indicating File Transfer Offer/Answer Capability\n   The SDP offer/answer
      model [RFC3264] provides provisions for\n   indicating a capability to another
      endpoint (see Section 9 of RFC\n   3264 [RFC3264]).  The mechanism assumes a
      high-level protocol, such\n   as SIP [RFC3261], that provides a capability query
      (such as a SIP\n   OPTIONS request).  RFC 3264 [RFC3264] indicates how to build
      the SDP\n   that is included in the response to such capability query.  As such,\n
      \  RFC 3264 indicates that an endpoint builds an SDP body that contains\n   an
      \"m=\" line containing the media type (message, for MSRP).  An\n   endpoint
      that implements the procedures specified in this document\n   SHOULD also add
      a 'file-selector' media attribute for the \"m=message\"\n   line.  The 'file-selector'
      media attribute MUST be empty, i.e., it\n   MUST NOT contain any selector.  The
      endpoint MUST NOT add any of the\n   other file attributes defined in this specification.\n"
    title: 8.5.  Indicating File Transfer Offer/Answer Capability
  - contents:
    - "8.6.  Reusage of Existing \"m=\" Lines in SDP\n   The SDP offer/answer model
      [RFC3264] provides rules that allow SDP\n   offerers and answerers to modify
      an existing media line, i.e., reuse\n   an existing media line with different
      attributes.  The same is also\n   possible when SDP signals a file transfer
      operation according to the\n   rules of this memo.  Therefore, the procedures
      defined in RFC 3264\n   [RFC3264], in particular those defined in Section 8.3,
      MUST apply for\n   file transfer operations.  An endpoint that wants to reuse
      an\n   existing \"m=\" line to start the file transfer of another file creates\n
      \  a different 'file-selector' attribute and selects a new globally\n   unique
      random value of the 'file-transfer-id' attribute.\n   If the file offerer resends
      an SDP offer with a port different than\n   zero, then the 'file-transfer-id'
      attribute determines whether a new\n   file transfer will start or whether the
      file transfer does not need\n   to start.  If the SDP answerer accepts the SDP,
      then file transfer\n   starts from the indicated octet (if a 'file-range' attribute
      is\n   present).\n"
    title: 8.6.  Reusage of Existing "m=" Lines in SDP
  - contents:
    - "8.7.  MSRP Usage\n   The file transfer service specified in this document uses
      \"m=\" lines\n   in SDP to describe the unidirectional transfer of a file.\n
      \  Consequently, each MSRP session established following the procedures\n   in
      Section 8.2 and Section 8.3 is only used to transfer a single\n   file.  So,
      senders MUST only use the dedicated MSRP session to send\n   the file described
      in the SDP offer or answer.  That is, senders MUST\n   NOT send additional files
      over the same MSRP session.\n   File transfer may be accomplished using a new
      multimedia session\n   established for the purpose.  Alternatively, a file transfer
      may be\n   conducted within an existing multimedia session, without regard for\n
      \  the media in use within that session.  Of particular note, file\n   transfer
      may be done within a multimedia session containing an MSRP\n   session used
      for regular instant messaging.  If file transfer is\n   initiated within an
      existing multimedia session, the SDP offerer MUST\n   NOT reuse an existing
      \"m=\" line that is still being used by MSRP\n   (either regular MSRP for instant
      messaging or an ongoing file\n   transfer).  Rather, it MUST add an additional
      \"m=\" line or else reuse\n   an \"m=\" line that is no longer being used.\n
      \  Additionally, implementations according to this specification MUST\n   include
      a single file in a single MSRP message.  Notice that the MSRP\n   specification
      defines \"MSRP message\" as a complete unit of MIME or\n   text content, which
      can be split and delivered in more than one MSRP\n   request; each of these
      portions of the complete message is called a\n   \"chunk\".  So, it is still
      valid to send a file in several chunks, but\n   from the MSRP point of view,
      all the chunks together form an MSRP\n   message: the Common Presence and Instant
      Messaging (CPIM) message\n   that wraps the file.  When chunking is used, it
      should be noticed\n   that MSRP does not require to wait for a 200-class response
      for a\n   chunk before sending the following one.  Therefore, it is valid to\n
      \  send pipelined MSRP SEND requests containing chunks of the same MSRP\n   message
      (the file).  Section 9.1 contains an example of a file\n   transfer using pipelined
      MSRP requests.\n   The MSRP specification [RFC4975] defines a 'max-size' SDP
      attribute.\n   This attribute specifies the maximum number of octets of an MSRP\n
      \  message that the creator of the SDP is willing to receive (notice\n   once
      more the definition of \"MSRP message\").  File receivers MAY add\n   a 'max-size'
      attribute to the MSRP \"m=\" line that specifies the file,\n   indicating the
      maximum number of octets of an MSRP message.  File\n   senders MUST NOT exceed
      the 'max-size' limit for any message sent in\n   the resulting session.\n   In
      the absence of a 'file-range' attribute in the SDP, the MSRP file\n   transfer
      MUST start with the first octet of the file and end with the\n   last octet
      (i.e., the whole file is transferred).  If a 'file-range'\n   attribute is present
      in SDP, the file sender application MUST extract\n   the indicated range of
      octets from the file (start and stop offset\n   octets, both inclusive).  Then
      the file sender application MAY wrap\n   those octets in an appropriate wrapper.
      \ MSRP mandates\n   implementations to implement the message/cpim wrapper [RFC3862].\n
      \  Usage of a wrapper is negotiated in the SDP (see Section 8.6 in RFC\n   4975
      [RFC4975]).  Last, the file sender application delivers the\n   content (e.g.,
      the message/cpim body) to MSRP for transportation.\n   MSRP will consider the
      delivered content as a whole message, and will\n   start numbering bytes with
      the number 1.\n   Note that the default content disposition of MSRP bodies is
      'render'.\n   When MSRP is used to transfer files, the MSRP Content-Disposition\n
      \  header can also take the value 'attachment' as indicated in\n   Section 7.\n
      \  Once the file transfer is completed, the file sender SHOULD close the\n   MSRP
      session and MUST behave according to the MSRP [RFC4975]\n   procedures with
      respect to closing MSRP sessions.  Note that MSRP\n   session management is
      not related to TCP connection management.  As a\n   matter of fact, MSRP allows
      multiple MSRP sessions to share the same\n   TCP connection.\n"
    title: 8.7.  MSRP Usage
  - contents:
    - "8.8.  Considerations about the 'file-icon' Attribute\n   This specification
      allows a file sender to include a small preview of\n   an image file: an icon.
      \ A 'file-icon' attribute contains a\n   Content-ID (CID) URL [RFC2392] pointing
      to an additional body that\n   contains the actual icon.  Since the icon is
      sent as a separate body\n   along the SDP body, the file sender MUST wrap the
      SDP body and the\n   icon bodies in a MIME multipart/related body.  Therefore,\n
      \  implementations according to this specification MUST implement the\n   multipart/related
      MIME type [RFC2387].  When creating a multipart/\n   related MIME wrapper, the
      SDP body MUST be the root body, which\n   according to RFC 2387 [RFC2387] is
      identified as the first body in\n   the multipart/related MIME wrapper or explicitly
      identified by the\n   'start' parameter.  According to RFC 2387 [RFC2387], the
      'type'\n   parameter MUST be present and point to the root body, i.e., the SDP\n
      \  body.\n   Assume that an endpoint behaving according to this specification\n
      \  tries to send a file to a remote endpoint that neither implements\n   this
      specification nor implements multipart MIME bodies.  The file\n   sender sends
      an SDP offer that contains a multipart/related MIME body\n   that includes an
      SDP body part and an icon body part.  The file\n   receiver, not supporting
      multipart MIME types, will reject the SDP\n   offer via a higher protocol mechanism
      (e.g., SIP).  In this case, it\n   is RECOMMENDED that the file sender removes
      the icon body part,\n   creates a single SDP body (i.e., without multipart MIME),
      and resends\n   the SDP offer.  This provides some backwards compatibility with
      file\n   receives that do not implement this specification and increases the\n
      \  chances of getting the SDP accepted at the file receiver.\n   Since the icon
      is sent as part of the signaling, it is RECOMMENDED to\n   keep the size of
      icons restricted to the minimum number of octets\n   that provide significance.\n"
    title: 8.8.  Considerations about the 'file-icon' Attribute
  title: 8.  Protocol Operation
- contents:
  - '9.  Examples

    '
  - contents:
    - "9.1.  Offerer Sends a File to the Answerer\n   This section shows an example
      flow for a file transfer scenario.  The\n   example assumes that SIP [RFC3261]
      is used to transport the SDP\n   offer/answer exchange, although the SIP details
      are briefly shown for\n   the sake of brevity.\n   Alice, the SDP offerer, wishes
      to send an image file to Bob (the\n   answerer).  Alice's User Agent Client
      (UAC) creates a unidirectional\n   SDP offer that contains the description of
      the file that she wants to\n   send to Bob's User Agent Server (UAS).  The description
      also includes\n   an icon representing the contents of the file to be transferred.
      \ The\n   sequence flow is shown in Figure 7.\n                   Alice's UAC
      \                Bob's UAS\n                         |                        |\n
      \                        |(1) (SIP) INVITE        |\n                         |----------------------->|\n
      \                        |(2) (SIP) 200 OK        |\n                         |<-----------------------|\n
      \                        |(3) (SIP) ACK           |\n                         |----------------------->|\n
      \                        |                        |\n                         |(4)
      (MSRP) SEND (chunk) |\n                         |----------------------->|\n
      \                        |(5) (MSRP) SEND (chunk) |\n                         |----------------------->|\n
      \                        |(6) (MSRP) 200 OK       |\n                         |<-----------------------|\n
      \                        |(7) (MSRP) 200 OK       |\n                         |<-----------------------|\n
      \                        |                        |\n                         |(8)
      (SIP) BYE           |\n                         |----------------------->|\n
      \                        |(9) (SIP) 200 OK        |\n                         |<-----------------------|\n
      \                        |                        |\n                         |
      \                       |\n    Figure 7: Flow diagram of an offerer sending
      a file to an answerer\n   F1: Alice constructs an SDP description of the file
      to be sent and\n   attaches it to a SIP INVITE request addressed to Bob.\n   INVITE
      sip:bob@example.com SIP/2.0\n   To: Bob <sip:bob@example.com>\n   From: Alice
      <sip:alice@example.com>;tag=1928301774\n   Call-ID: a84b4c76e66710\n   CSeq:
      1 INVITE\n   Max-Forwards: 70\n   Date: Sun, 21 May 2006 13:02:03 GMT\n   Contact:
      <sip:alice@alicepc.example.com>\n   Content-Type: multipart/related; type=\"application/sdp\";\n
      \                boundary=\"boundary71\"\n   Content-Length: [length]\n   --boundary71\n
      \  Content-Type: application/sdp\n   Content-Length: [length of SDP]\n   v=0\n
      \  o=alice 2890844526 2890844526 IN IP4 alicepc.example.com\n   s=\n   c=IN
      IP4 alicepc.example.com\n   t=0 0\n   m=message 7654 TCP/MSRP *\n   i=This is
      my latest picture\n   a=sendonly\n   a=accept-types:message/cpim\n   a=accept-wrapped-types:*\n
      \  a=path:msrp://alicepc.example.com:7654/jshA7we;tcp\n   a=file-selector:name:\"My
      cool picture.jpg\" type:image/jpeg\n     size:4092 hash:sha-1:\n     72:24:5F:E8:65:3D:DA:F3:71:36:2F:86:D4:71:91:3E:E4:A2:CE:2E\n
      \  a=file-transfer-id:Q6LMoGymJdh0IKIgD6wD0jkcfgva4xvE\n   a=file-disposition:render\n
      \  a=file-date:creation:\"Mon, 15 May 2006 15:01:31 +0300\"\n   a=file-icon:cid:id2@alicepc.example.com\n
      \  --boundary71\n   Content-Type: image/jpeg\n   Content-Transfer-Encoding:
      binary\n   Content-ID: <id2@alicepc.example.com>\n   Content-Length: [length
      of image]\n   Content-Disposition: icon\n   [...small preview icon of the file...]\n
      \  --boundary71--\n    Figure 8: INVITE request containing an SDP offer for
      file transfer\n      NOTE: The Content-Type header field and the 'file-selector'\n
      \     attribute in the above figure are split in several lines for\n      formatting
      purposes.  Real implementations will encode it in a\n      single line.\n   From
      now on we omit the SIP details for the sake of brevity.\n   F2: Bob receives
      the INVITE request, inspects the SDP offer and\n   extracts the icon body, checks
      the creation date and file size, and\n   decides to accept the file transfer.
      \ So Bob creates the following\n   SDP answer:\n   v=0\n   o=bob 2890844656
      2890844656 IN IP4 bobpc.example.com\n   s=\n   c=IN IP4 bobpc.example.com\n
      \  t=0 0\n   m=message 8888 TCP/MSRP *\n   a=recvonly\n   a=accept-types:message/cpim\n
      \  a=accept-wrapped-types:*\n   a=path:msrp://bobpc.example.com:8888/9di4ea;tcp\n
      \  a=file-selector:name:\"My cool picture.jpg\" type:image/jpeg\n     size:4092
      hash:sha-1:\n     72:24:5F:E8:65:3D:DA:F3:71:36:2F:86:D4:71:91:3E:E4:A2:CE:2E\n
      \  a=file-transfer-id:Q6LMoGymJdh0IKIgD6wD0jkcfgva4xvE\n      Figure 9: SDP
      answer accepting the SDP offer for file transfer\n      NOTE: The 'file-selector'
      attribute in the above figure is split\n      in three lines for formatting
      purposes.  Real implementations will\n      encode it in a single line.\n   F4:
      Alice opens a TCP connection to Bob and creates an MSRP SEND\n   request.  This
      SEND request contains the first chunk of the file.\n   MSRP d93kswow SEND\n
      \  To-Path: msrp://bobpc.example.com:8888/9di4ea;tcp\n   From-Path: msrp://alicepc.example.com:7654/iau39;tcp\n
      \  Message-ID: 12339sdqwer\n   Byte-Range: 1-2048/4385\n   Content-Type: message/cpim\n
      \  To: Bob <sip:bob@example.com>\n   From: Alice <sip:alice@example.com>\n   DateTime:
      2006-05-15T15:02:31-03:00\n   Content-Disposition: render; filename=\"My cool
      picture.jpg\";\n                      creation-date=\"Mon, 15 May 2006 15:01:31
      +0300\";\n                      size=4092\n   Content-Type: image/jpeg\n   ...
      first set of bytes of the JPEG image ...\n   -------d93kswow+\n   Figure 10:
      MSRP SEND request containing the first chunk of actual\n   file\n   F5: Alice
      sends the second and last chunk.  Note that MSRP allows to\n   send pipelined
      chunks, so there is no need to wait for the 200 (OK)\n   response from the previous
      chunk.\n   MSRP op2nc9a SEND\n   To-Path: msrp://bobpc.example.com:8888/9di4ea;tcp\n
      \  From-Path: msrp://alicepc.example.com:7654/iau39;tcp\n   Message-ID: 12339sdqwer\n
      \  Byte-Range: 2049-4385/4385\n   Content-Type: message/cpim\n   ... second
      set of bytes of the JPEG image ...\n   -------op2nc9a$\n   Figure 11: MSRP SEND
      request containing the second chunk of actual\n   file\n   F6: Bob acknowledges
      the reception of the first chunk.\n   MSRP d93kswow 200 OK\n   To-Path: msrp://alicepc.example.com:7654/iau39;tcp\n
      \  From-Path: msrp://bobpc.example.com:8888/9di4ea;tcp\n   Byte-Range: 1-2048/4385\n
      \  -------d93kswow$\n                      Figure 12: MSRP 200 OK response\n
      \  F7: Bob acknowledges the reception of the second chunk.\n   MSRP op2nc9a
      200 OK\n   To-Path: msrp://alicepc.example.com:7654/iau39;tcp\n   From-Path:
      msrp://bobpc.example.com:8888/9di4ea;tcp\n   Byte-Range: 2049-4385/4385\n   -------op2nc9a$\n
      \                     Figure 13: MSRP 200 OK response\n   F8: Alice terminates
      the SIP session by sending a SIP BYE request.\n   F9: Bob acknowledges the reception
      of the BYE request and sends a 200\n   (OK) response.\n"
    title: 9.1.  Offerer Sends a File to the Answerer
  - contents:
    - "9.2.  Offerer Requests a File from the Answerer and Second File Transfer\n
      \  In this example, Alice, the SDP offerer, first wishes to fetch a file\n   from
      Bob, the SDP answerer.  Alice knows that Bob has a specific file\n   she wants
      to download.  She has learned the hash of the file by some\n   out-of-band mechanism.
      \ The hash selector is enough to produce a file\n   selector that points to
      the specific file.  So, Alice creates an SDP\n   offer that contains the file
      descriptor.  Bob accepts the file\n   transfer and sends the file to Alice.
      \ When Alice has completely\n   received Bob's file, she intends to send a new
      image file to Bob.\n   Therefore, Alice reuses the existing SDP media line with
      different\n   attributes and updates the description of the new file she wants
      to\n   send to Bob's User Agent Server (UAS).  In particular, Alice creates\n
      \  a new file transfer identifier since this is a new file transfer\n   operation.
      \ Figure 14 shows the sequence flow.\n                   Alice's UAC                 Bob's
      UAS\n                         |                        |\n                         |(1)
      (SIP) INVITE        |\n                         |----------------------->|\n
      \                        |(2) (SIP) 200 OK        |\n                         |<-----------------------|\n
      \                        |(3) (SIP) ACK           |\n                         |----------------------->|\n
      \                        |                        |\n                         |(4)
      (MSRP) SEND (file)  |\n                         |<-----------------------|\n
      \                        |(5) (MSRP) 200 OK       |\n                         |----------------------->|\n
      \                        |                        |\n                         |(6)
      (SIP) INVITE        |\n                         |----------------------->|\n
      \                        |(7) (SIP) 200 OK        |\n                         |<-----------------------|\n
      \                        |(8) (SIP) ACK           |\n                         |----------------------->|\n
      \                        |                        |\n                         |(9)
      (MSRP) SEND (file)  |\n                         |----------------------->|\n
      \                        |(10) (MSRP) 200 OK      |\n                         |<-----------------------|\n
      \                        |                        |\n                         |(11)
      (SIP) BYE          |\n                         |<-----------------------|\n
      \                        |(12) (SIP) 200 OK       |\n                         |----------------------->|\n
      \                        |                        |\n                         |
      \                       |\n     Figure 14: Flow diagram of an offerer requesting
      a file from the\n              answerer and then sending a file to the answer\n
      \  F1: Alice constructs an SDP description of the file she wants to\n   receive
      and attaches the SDP offer to a SIP INVITE request addressed\n   to Bob.\n   INVITE
      sip:bob@example.com SIP/2.0\n   To: Bob <sip:bob@example.com>\n   From: Alice
      <sip:alice@example.com>;tag=1928301774\n   Call-ID: a84b4c76e66710\n   CSeq:
      1 INVITE\n   Max-Forwards: 70\n   Date: Sun, 21 May 2006 13:02:03 GMT\n   Contact:
      <sip:alice@alicepc.example.com>\n   Content-Type: application/sdp\n   Content-Length:
      [length of SDP]\n   v=0\n   o=alice 2890844526 2890844526 IN IP4 alicepc.example.com\n
      \  s=\n   c=IN IP4 alicepc.example.com\n   t=0 0\n   m=message 7654 TCP/MSRP
      *\n   a=recvonly\n   a=accept-types:message/cpim\n   a=accept-wrapped-types:*\n
      \  a=path:msrp://alicepc.example.com:7654/jshA7we;tcp\n   a=file-selector:hash:sha-1:\n
      \    72:24:5F:E8:65:3D:DA:F3:71:36:2F:86:D4:71:91:3E:E4:A2:CE:2E\n   a=file-transfer-id:aCQYuBRVoUPGVsFZkCK98vzcX2FXDIk2\n
      \   Figure 15: INVITE request containing an SDP offer for file transfer\n      NOTE:
      The 'file-selector' attribute in the above figure is split\n      in two lines
      for formatting purposes.  Real implementations will\n      encode it in a single
      line.\n   From now on we omit the SIP details for the sake of brevity.\n   F2:
      Bob receives the INVITE request, inspects the SDP offer, computes\n   the file
      descriptor, and finds a local file whose hash equals the one\n   indicated in
      the SDP.  Bob accepts the file transfer and creates an\n   SDP answer as follows:\n
      \  v=0\n   o=bob 2890844656 2890855439 IN IP4 bobpc.example.com\n   s=\n   c=IN
      IP4 bobpc.example.com\n   t=0 0\n   m=message 8888 TCP/MSRP *\n   a=sendonly\n
      \  a=accept-types:message/cpim\n   a=accept-wrapped-types:*\n   a=path:msrp://bobpc.example.com:8888/9di4ea;tcp\n
      \  a=file-selector:type:image/jpeg hash:sha-1:\n     72:24:5F:E8:65:3D:DA:F3:71:36:2F:86:D4:71:91:3E:E4:A2:CE:2E\n
      \  a=file-transfer-id:aCQYuBRVoUPGVsFZkCK98vzcX2FXDIk2\n      Figure 16: SDP
      answer accepting the SDP offer for file transfer\n      NOTE: The 'file-selector'
      attribute in the above figure is split\n      in two lines for formatting purposes.
      \ Real implementations will\n      encode it in a single line.\n   F4: Alice
      opens a TCP connection to Bob.  Bob then creates an MSRP\n   SEND request that
      contains the file.\n   MSRP d93kswow SEND\n   To-Path: msrp://alicepc.example.com:7654/jshA7we;tcp\n
      \  From-Path: msrp://bobpc.example.com:8888/9di4ea;tcp\n   Message-ID: 12339sdqwer\n
      \  Byte-Range: 1-2027/2027\n   Content-Type: message/cpim\n   To: Bob <sip:bob@example.com>\n
      \  From: Alice <sip:alice@example.com>\n   DateTime: 2006-05-15T15:02:31-03:00\n
      \  Content-Disposition: render; filename=\"My cool photo.jpg\";\n                  creation-date=\"Mon,
      15 May 2006 15:01:31 +0300\";\n                  modification-date=\"Mon, 15
      May 2006 16:04:53 +0300\";\n                  read-date=\"Mon, 16 May 2006 09:12:27
      +0300\";\n                  size=1931\n   Content-Type: image/jpeg\n   ...binary
      JPEG image...\n   -------d93kswow$\n          Figure 17: MSRP SEND request containing
      the actual file\n   F5: Alice acknowledges the reception of the SEND request.\n
      \  MSRP d93kswow 200 OK\n   To-Path: msrp://bobpc.example.com:8888/9di4ea;tcp\n
      \  From-Path: msrp://alicepc.example.com:7654/jshA7we;tcp\n   Byte-Range: 1-2027/2027\n
      \  -------d93kswow$\n                      Figure 18: MSRP 200 OK response\n
      \  F6: Alice reuses the existing SDP media line inserting the\n   description
      of the file to be sent and attaches it to a SIP re-INVITE\n   request addressed
      to Bob.  Alice reuses the TCP port number for the\n   MSRP stream, but changes
      the MSRP session and the 'file-transfer-id'\n   value according to this specification.\n
      \  INVITE sip:bob@example.com SIP/2.0\n   To: Bob <sip:bob@example.com>;tag=1928323431\n
      \  From: Alice <sip:alice@example.com>;tag=1928301774\n   Call-ID: a84b4c76e66710\n
      \  CSeq: 2 INVITE\n   Max-Forwards: 70\n   Date: Sun, 21 May 2006 13:02:33 GMT\n
      \  Contact: <sip:alice@alicepc.example.com>\n   Content-Type: multipart/related;
      type=\"application/sdp\";\n                 boundary=\"boundary71\"\n   Content-Length:
      [length of multipart]\n   --boundary71\n   Content-Type: application/sdp\n   Content-Length:
      [length of SDP]\n   v=0\n   o=alice 2890844526 2890844527 IN IP4 alicepc.example.com\n
      \  s=\n   c=IN IP4 alicepc.example.com\n   t=0 0\n   m=message 7654 TCP/MSRP
      *\n   i=This is my latest picture\n   a=sendonly\n   a=accept-types:message/cpim\n
      \  a=accept-wrapped-types:*\n   a=path:msrp://alicepc.example.com:7654/iau39;tcp\n
      \  a=file-selector:name:\"sunset.jpg\" type:image/jpeg\n     size:4096 hash:sha-1:\n
      \    58:23:1F:E8:65:3B:BC:F3:71:36:2F:86:D4:71:91:3E:E4:B1:DF:2F\n   a=file-transfer-id:ZVE8MfI9mhAdZ8GyiNMzNN5dpqgzQlCO\n
      \  a=file-disposition:render\n   a=file-date:creation:\"Sun, 21 May 2006 13:02:15
      +0300\"\n   a=file-icon:cid:id3@alicepc.example.com\n   --boundary71\n   Content-Type:
      image/jpeg\n   Content-Transfer-Encoding: binary\n   Content-ID: <id3@alicepc.example.com>\n
      \  Content-Length: [length of image]\n   Content-Disposition: icon\n   [..small
      preview icon...]\n   --boundary71--\n           Figure 19: Reuse of the SDP
      in a second file transfer\n      NOTE: The Content-Type header field and the
      'file-selector'\n      attribute in the above figure are split in several lines
      for\n      formatting purposes.  Real implementations will encode it in a\n
      \     single line.\n   F7: Bob receives the re-INVITE request, inspects the
      SDP offer and\n   extracts the icon body, checks the creation date and the file
      size,\n   and decides to accept the file transfer.  So Bob creates an SDP\n
      \  answer where he reuses the same TCP port number, but changes his MSRP\n   session,
      according to the procedures of this specification.\n   v=0\n   o=bob 2890844656
      2890855440 IN IP4 bobpc.example.com\n   s=\n   c=IN IP4 bobpc.example.com\n
      \  t=0 0\n   m=message 8888 TCP/MSRP *\n   a=recvonly\n   a=accept-types:message/cpim\n
      \  a=accept-wrapped-types:*\n   a=path:msrp://bobpc.example.com:8888/eh10dsk;tcp\n
      \  a=file-selector:name:\"sunset.jpg\" type:image/jpeg\n     size:4096 hash:sha-1:\n
      \    58:23:1F:E8:65:3B:BC:F3:71:36:2F:86:D4:71:91:3E:E4:B1:DF:2F\n   a=file-transfer-id:ZVE8MfI9mhAdZ8GyiNMzNN5dpqgzQlCO\n
      \  a=file-disposition:render\n      Figure 20: SDP answer accepting the SDP
      offer for file transfer\n      NOTE: The 'file-selector' attribute in the above
      figure is split\n      in three lines for formatting purposes.  Real implementations
      will\n      encode it in a single line.\n   F9: If a TCP connection towards
      Bob is already open, Alice reuses\n   that TCP connection to send an MSRP SEND
      request that contains the\n   file.\n   MSRP d95ksxox SEND\n   To-Path: msrp://bobpc.example.com:8888/eh10dsk;tcp\n
      \  From-Path: msrp://alicepc.example.com:7654/iau39;tcp\n   Message-ID: 13449sdqwer\n
      \  Byte-Range: 1-2027/2027\n   Content-Type: message/cpim\n   To: Bob <sip:bob@example.com>\n
      \  From: Alice <sip:alice@example.com>\n   DateTime: 2006-05-21T13:02:15-03:00\n
      \  Content-Disposition: render; filename=\"Sunset.jpg\";\n                      creation-date=\"Sun,
      21 May 2006 13:02:15 -0300\";\n                      size=1931\n   Content-Type:
      image/jpeg\n   ...binary JPEG image...\n   -------d95ksxox+\n          Figure
      21: MSRP SEND request containing the actual file\n   F10: Bob acknowledges the
      reception of the SEND request.\n   MSRP d95ksxox 200 OK\n   To-Path: msrp://alicepc.example.com:7654/iau39;tcp\n
      \  From-Path: msrp://bobpc.example.com:8888/eh10dsk;tcp\n   Byte-Range: 1-2027/2027\n
      \  -------d95ksxox$\n                      Figure 22: MSRP 200 OK response\n
      \  F11: Then Bob terminates the SIP session by sending a SIP BYE\n   request.\n
      \  F12: Alice acknowledges the reception of the BYE request and sends a\n   200
      (OK) response.\n"
    title: 9.2.  Offerer Requests a File from the Answerer and Second File Transfer
  - contents:
    - "9.3.  Example of a Capability Indication\n   Alice sends an OPTIONS request
      to Bob (this request does not contain\n   SDP).  Bob answers with a 200 (OK)
      response that contain the SDP\n   shown in Figure 24.  The SDP indicates support
      for CPIM messages that\n   can contain other MIME types.  The maximum MSRP message
      size that the\n   endpoint can receive is 20000 octets.  The presence of the
      'file-\n   selector' attribute indicates support for the file transfer offer/\n
      \  answer mechanism.\n                   Alice's UAC                 Bob's UAS\n
      \                        |                        |\n                         |(1)
      (SIP) OPTIONS       |\n                         |----------------------->|\n
      \                        |(2) (SIP) 200 OK        |\n                         |
      \         with SDP      |\n                         |<-----------------------|\n
      \                        |                        |\n                         |
      \                       |\n              Figure 23: Flow diagram of a capability
      request\n   v=0\n   o=bob 2890844656 2890855439 IN IP4 bobpc.example.com\n   s=-\n
      \  c=IN IP4 bobpc.example.com\n   t=0 0\n   m=message 0 TCP/MSRP *\n   a=accept-types:message/cpim\n
      \  a=accept-wrapped-types:*\n   a=max-size:20000\n   a=file-selector\n       Figure
      24: SDP of the 200 (OK) response to an OPTIONS request\n"
    title: 9.3.  Example of a Capability Indication
  title: 9.  Examples
- contents:
  - "10.  Security Considerations\n   The SDP attributes defined in this specification
    identify a file to\n   be transferred between two endpoints.  An endpoint can
    offer to send\n   the file to the other endpoint or request to receive the file
    from\n   the other endpoint.  In the former case, an attacker modifying those\n
    \  SDP attributes could cheat the receiver making it think that the file\n   to
    be transferred was a different one.  In the latter case, the\n   attacker could
    make the sender send a different file than the one\n   requested by the receiver.
    \ Consequently, it is RECOMMENDED that\n   integrity protection be applied to
    the SDP session descriptions\n   carrying the attributes specified in this specification.\n
    \  Additionally, it is RECOMMENDED that senders verify the properties of\n   the
    file against the selectors that describe it.\n   The descriptions of the files
    being transferred between endpoints may\n   reveal information the endpoints may
    consider confidential.\n   Therefore, it is RECOMMENDED that SDP session descriptions
    carrying\n   the attributes specified in this specification are encrypted.\n   TLS
    and S/MIME are the natural choices to provide offer/answer\n   exchanges with
    integrity protection and confidentiality.\n   When an SDP offer contains the description
    of a file to be sent or\n   received, the SDP answerer MUST first authenticate
    the SDP offerer\n   and then it MUST authorize the file transfer operation, typically\n
    \  according to a local policy.  Typically, these functions are\n   integrated
    in the high-level protocol that carries SDP (e.g., SIP),\n   and in the file transfer
    protocol (e.g., MSRP).  If SIP [RFC3261] and\n   MSRP [RFC4975] are used, the
    standard mechanisms for user\n   authentication and authorization are sufficient.\n
    \  It is possible that a malicious or misbehaving implementation tries\n   to
    exhaust the resources of the remote endpoint, e.g., the internal\n   memory or
    the file system, by sending very large files.  To protect\n   from this attack,
    an SDP answer SHOULD first verify the identity of\n   the SDP offerer, and perhaps
    only accept file transfers from trusted\n   sources.  Mechanisms to verify the
    identity of the file sender depend\n   on the high-level protocol that carries
    the SDP, for example, SIP\n   [RFC3261] and MSRP [RFC4975].\n   It is also RECOMMENDED
    that implementations take measures to avoid\n   attacks on resource exhaustion,
    for example, by limiting the size of\n   received files, verifying that there
    is enough space in the file\n   system to store the file prior to its reception,
    or limiting the\n   number of simultaneous file transfers.\n   File receivers
    MUST also sanitize all input, such as the local file\n   name, prior to making
    calls to the local file system to store a file.\n   This is to prevent the existence
    of meaningful characters to the\n   local operating system that could damage it.\n
    \  Once a file has been transferred, the file receiver must take care of\n   it.
    \ Typically, file transfer is a commonly used mechanism for\n   transmitting computer
    virus, spyware, and other types of malware.\n   File receivers should apply all
    possible security technologies (e.g.,\n   anti-virus, anti-spyware) to mitigate
    the risk of damage at their\n   host.\n"
  title: 10.  Security Considerations
- contents:
  - "11.  IANA Considerations\n   IANA has registered a number of SDP attributes according
    to the\n   following.\n"
  - contents:
    - "11.1.  Registration of New SDP Attributes\n   IANA has registered a number
      of media-level-only attributes in the\n   Session Description Protocol Parameters
      registry [IANA].  The\n   registration data, according to RFC 4566 [RFC4566],
      follows.\n"
    - contents:
      - "11.1.1.  Registration of the file-selector Attribute\n   Contact:  Miguel
        Garcia <miguel.a.garcia@ericsson.com>\n   Phone:  +34 91 339 1000\n   Attribute
        name:  file-selector\n   Long-form attribute name:  File Selector\n   Type
        of attribute:  media level only\n      This attribute is subject to the charset
        attribute\n   Description:  This attribute unambiguously identifies a file
        by\n      indicating a combination of the 4-tuple composed of the name,\n
        \     size, type, and hash of the file.\n   Specification:  RFC 5547\n"
      title: 11.1.1.  Registration of the file-selector Attribute
    - contents:
      - "11.1.2.  Registration of the file-transfer-id Attribute\n   Contact:  Miguel
        Garcia <miguel.a.garcia@ericsson.com>\n   Phone:  +34 91 339 1000\n   Attribute
        name:  file-transfer-id\n   Long-form attribute name:  File Transfer Identifier\n
        \  Type of attribute:  media level only\n      This attribute is subject to
        the charset attribute\n   Description:  This attribute contains a unique identifier
        of the file\n      transfer operation within the session.\n   Specification:
        \ RFC 5547\n"
      title: 11.1.2.  Registration of the file-transfer-id Attribute
    - contents:
      - "11.1.3.  Registration of the file-disposition Attribute\n   Contact:  Miguel
        Garcia <miguel.a.garcia@ericsson.com>\n   Phone:  +34 91 339 1000\n   Attribute
        name:  file-disposition\n   Long-form attribute name:  File Disposition\n
        \  Type of attribute:  media level only\n      This attribute is not subject
        to the charset attribute\n   Description:  This attribute provides a suggestion
        to the other\n      endpoint about the intended disposition of the file.\n
        \  Specification:  RFC 5547\n"
      title: 11.1.3.  Registration of the file-disposition Attribute
    - contents:
      - "11.1.4.  Registration of the file-date Attribute\n   Contact:  Miguel Garcia
        <miguel.a.garcia@ericsson.com>\n   Phone:  +34 91 339 1000\n   Attribute name:
        \ file-date\n   Long-form attribute name:\n   Type of attribute:  media level
        only\n      This attribute is not subject to the charset attribute\n   Description:
        \ This attribute indicates the dates on which the file\n      was created,
        modified, or last read.\n   Specification:  RFC 5547\n"
      title: 11.1.4.  Registration of the file-date Attribute
    - contents:
      - "11.1.5.  Registration of the file-icon Attribute\n   Contact:  Miguel Garcia
        <miguel.a.garcia@ericsson.com>\n   Phone:  +34 91 339 1000\n   Attribute name:
        \ file-icon\n   Long-form attribute name:  File Icon\n   Type of attribute:
        \ media level only\n      This attribute is not subject to the charset attribute\n
        \  Description:  For image files, this attribute contains a pointer to a\n
        \     body that includes a small preview icon representing the contents\n
        \     of the file to be transferred.\n   Specification:  RFC 5547\n"
      title: 11.1.5.  Registration of the file-icon Attribute
    - contents:
      - "11.1.6.  Registration of the file-range Attribute\n   Contact:  Miguel Garcia
        <miguel.a.garcia@ericsson.com>\n   Phone:  +34 91 339 1000\n   Attribute name:
        \ file-range\n   Long-form attribute name:  File Range\n   Type of attribute:
        \ media level only\n      This attribute is not subject to the charset attribute\n
        \  Description:  This attribute contains the range of transferred octets\n
        \     of the file.\n   Specification:  RFC 5547\n"
      title: 11.1.6.  Registration of the file-range Attribute
    title: 11.1.  Registration of New SDP Attributes
  title: 11.  IANA Considerations
- contents:
  - "12.  Acknowledgments\n   The authors would like to thank Mats Stille, Nancy Greene,
    Adamu\n   Haruna, and Arto Leppisaari for discussing initial concepts described\n
    \  in this memo.  Thanks to Pekka Kuure for reviewing initial versions\n   of
    this document and providing helpful comments.  Joerg Ott, Jiwey\n   Wang, Amitkumar
    Goel, Sudha Vs, Dan Wing, Juuso Lehtinen, Remi Denis-\n   Courmont, Colin Perkins,
    Sudhakar An, Peter Saint-Andre, Jonathan\n   Rosenberg, Eric Rescorla, Vikram
    Chhibber, Ben Campbell, Richard\n   Barnes, and Chris Newman discussed and provided
    comments and\n   improvements to this document.\n"
  title: 12.  Acknowledgments
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use
      in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC2045]    Freed, N. and N. Borenstein, \"Multipurpose Internet
      Mail\n                Extensions (MIME) Part One: Format of Internet Message\n
      \               Bodies\", RFC 2045, November 1996.\n   [RFC2183]    Troost,
      R., Dorner, S., and K. Moore, \"Communicating\n                Presentation
      Information in Internet Messages: The\n                Content-Disposition Header
      Field\", RFC 2183,\n                August 1997.\n   [RFC2387]    Levinson,
      E., \"The MIME Multipart/Related Content-type\",\n                RFC 2387,
      August 1998.\n   [RFC2392]    Levinson, E., \"Content-ID and Message-ID Uniform\n
      \               Resource Locators\", RFC 2392, August 1998.\n   [RFC3174]    Eastlake,
      D. and P. Jones, \"US Secure Hash Algorithm 1\n                (SHA1)\", RFC
      3174, September 2001.\n   [RFC3264]    Rosenberg, J. and H. Schulzrinne, \"An
      Offer/Answer Model\n                with Session Description Protocol (SDP)\",
      RFC 3264,\n                June 2002.\n   [RFC3629]    Yergeau, F., \"UTF-8,
      a transformation format of ISO\n                10646\", STD 63, RFC 3629, November
      2003.\n   [RFC3851]    Ramsdell, B., \"Secure/Multipurpose Internet Mail\n                Extensions
      (S/MIME) Version 3.1 Message Specification\",\n                RFC 3851, July
      2004.\n   [RFC3862]    Klyne, G. and D. Atkins, \"Common Presence and Instant\n
      \               Messaging (CPIM): Message Format\", RFC 3862,\n                August
      2004.\n   [RFC4566]    Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n
      \               Description Protocol\", RFC 4566, July 2006.\n   [RFC4975]    Campbell,
      B., Mahy, R., and C. Jennings, \"The Message\n                Session Relay
      Protocol (MSRP)\", RFC 4975,\n                September 2007.\n   [RFC5234]
      \   Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n                Specifications:
      ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5322]    Resnick, P., Ed., \"Internet
      Message Format\", RFC 5322,\n                October 2008.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [RFC3261]    Rosenberg, J., Schulzrinne,
      H., Camarillo, G., Johnston,\n                A., Peterson, J., Sparks, R.,
      Handley, M., and E.\n                Schooler, \"SIP: Session Initiation Protocol\",
      RFC 3261,\n                June 2002.\n   [RFC4028]    Donovan, S. and J. Rosenberg,
      \"Session Timers in the\n                Session Initiation Protocol (SIP)\",
      RFC 4028,\n                April 2005.\n   [RFC4483]    Burger, E., \"A Mechanism
      for Content Indirection in\n                Session Initiation Protocol (SIP)
      Messages\", RFC 4483,\n                May 2006.\n   [RFC4976]    Jennings,
      C., Mahy, R., and A. Roach, \"Relay Extensions\n                for the Message
      Sessions Relay Protocol (MSRP)\",\n                RFC 4976, September 2007.\n
      \  [IANA]       IANA, \"Internet Assigned Numbers Authority\",\n                <http://www.iana.org>.\n
      \  [FLUTE-REV]  Luby, M., Lehtonen, R., Roca, V., and T. Paila, \"FLUTE -\n
      \               File Delivery over Unidirectional Transport\", Work\n                in
      Progress, September 2008.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Appendix A.  Alternatives Considered\n   The requirements are related to the
    description and negotiation of\n   the session, not to the actual file transfer
    mechanism.  Thus, it is\n   natural that in order to meet them it is enough to
    define attribute\n   extensions and usage conventions to SDP, while MSRP itself
    needs no\n   extensions and can be used as it is.  This is effectively the\n   approach
    taken in this specification.  Another goal has been to\n   specify the SDP extensions
    in such a way that a regular MSRP endpoint\n   that does not support them could
    still in some cases act as an\n   endpoint in a file transfer session, albeit
    with a somewhat reduced\n   functionality.\n   In some ways, the aim of this specification
    is similar to the aim of\n   content indirection mechanism in the Session Initiation
    Protocol\n   (SIP) [RFC4483].  Both mechanisms allow a user agent to decide\n
    \  whether or not to download a file based on information about the\n   file.
    \ However, there are some differences.  With content\n   indirection, it is not
    possible for the other endpoint to explicitly\n   accept or reject the file transfer.
    \ Also, it is not possible for an\n   endpoint to request a file from another
    endpoint.  Furthermore,\n   content indirection is not tied to the context of
    a media session,\n   which is sometimes a desirable property.  Finally, content\n
    \  indirection typically requires some server infrastructure, which may\n   not
    always be available.  It is possible to use content indirection\n   directly between
    the endpoints too, but in that case there is no\n   definition for how it works
    for endpoints behind NATs.  The level of\n   requirements in implementations decides
    which solution meets the\n   requirements.\n   Based on the argumentation above,
    this document defines the SDP\n   attribute extensions and usage conventions needed
    for meeting the\n   requirements on file transfer services with the SDP offer/answer\n
    \  model, using MSRP as the transfer protocol within the session.\n      In principle,
    it is possible to use the SDP extensions defined\n      here and replace MSRP
    with any other similar protocol that can\n      carry MIME objects.  This kind
    of specification can be written as\n      a separate document if the need arises.
    \ Essentially, such a\n      protocol should be able to be negotiated on an SDP
    offer/answer\n      exchange (RFC 3264 [RFC3264]), be able to describe the file
    to be\n      transferred in SDP offer/answer exchange, be able to carry MIME\n
    \     objects between two endpoints, and use a reliable transport\n      protocol
    (e.g., TCP).\n   This specification defines a set of SDP attributes that describe
    a\n   file to be transferred between two endpoints.  The information needed\n
    \  to describe a file could be potentially encoded in a few different\n   ways.
    \ The MMUSIC working group considered a few alternative\n   approaches before
    deciding to use the encoding described in\n   Section 6.  In particular, the working
    group looked at the MIME\n   'external-body' type and the use of a single SDP
    attribute or\n   parameter.\n   A MIME 'external-body' could potentially be used
    to describe the file\n   to be transferred.  In fact, many of the SDP parameters
    this\n   specification defines are also supported by 'external-body' body\n   parts.
    \ The MMUSIC working group decided not to use 'external-body'\n   body parts because
    a number of existing offer/answer implementations\n   do not support multipart
    bodies.\n   The information carried in the SDP attributes defined in Section 6\n
    \  could potentially be encoded in a single SDP attribute.  The MMUSIC\n   working
    group decided not to follow this approach because it is\n   expected that implementations
    support only a subset of the parameters\n   defined in Section 6.  Those implementations
    will be able to use\n   regular SDP rules in order to ignore non-supported SDP
    parameters.\n   If all the information was encoded in a single SDP attribute,
    those\n   rules, which relate to backwards compatibility, would need to be\n   redefined
    specifically for that parameter.\n"
  title: Appendix A.  Alternatives Considered
- contents:
  - "Authors' Addresses\n   Miguel A. Garcia-Martin\n   Ericsson\n   Calle Via de
    los Poblados 13\n   Madrid, ES  28033\n   Spain\n   EMail: miguel.a.garcia@ericsson.com\n
    \  Markus Isomaki\n   Nokia\n   Keilalahdentie 2-4\n   Espoo  02150\n   Finland\n
    \  EMail: markus.isomaki@nokia.com\n   Gonzalo Camarillo\n   Ericsson\n   Hirsalantie
    11\n   Jorvas  02420\n   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n   Salvatore
    Loreto\n   Ericsson\n   Hirsalantie 11\n   Jorvas  02420\n   Finland\n   EMail:
    Salvatore.Loreto@ericsson.com\n   Paul H. Kyzivat\n   Cisco Systems\n   1414 Massachusetts
    Avenue\n   Boxborough, MA  01719\n   USA\n   EMail: pkyzivat@cisco.com\n"
  title: Authors' Addresses
