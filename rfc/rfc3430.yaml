- title: __initial_text__
  contents:
  - "             Simple Network Management Protocol (SNMP) over\n         Transmission\
    \ Control Protocol (TCP) Transport Mapping\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a transport mapping for using the Simple Network\n\
    \   Management Protocol (SNMP) over TCP.  The transport mapping can be\n   used\
    \ with any version of SNMP.  This document extends the transport\n   mappings\
    \ defined in STD 62, RFC 3417.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  SNMP over TCP  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  2\n   2.1 Serialization  . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  2\n   2.2 Well-Known Values  . . . . . . . . . . . . . . . . . . .\
    \ . . .  3\n   2.3 Connection Management  . . . . . . . . . . . . . . . . . .\
    \ . .  3\n   2.4 Reliable Transport versus Confirmed Operations . . . . . . .\
    \ .  4\n   3.  Security Considerations  . . . . . . . . . . . . . . . . . . .\
    \  5\n   4.  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . .  6\n\
    \       References . . . . . . . . . . . . . . . . . . . . . . . . . .  6\n  \
    \ A.  Connection Establishment Alternatives  . . . . . . . . . . . .  8\n    \
    \   Author's Address . . . . . . . . . . . . . . . . . . . . . . .  9\n      \
    \ Full Copyright Statement . . . . . . . . . . . . . . . . . . . 10\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This memo defines a transport mapping for using the Simple\
    \ Network\n   Management Protocol (SNMP) [1] over TCP [2].  The transport mapping\n\
    \   can be used with any version of SNMP.  This document extends the\n   transport\
    \ mappings defined in STD 62, RFC 3417 [3].\n   The SNMP over TCP transport mapping\
    \ is an optional transport mapping.\n   SNMP protocol engines that implement the\
    \ SNMP over TCP transport\n   mapping MUST also implement the SNMP over UDP transport\
    \ mapping as\n   defined in STD 62, RFC 3417 [3].\n   The key words \"MUST\",\
    \ \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in BCP 14, RFC 2119 [4].\n"
- title: 2. SNMP over TCP
  contents:
  - "2. SNMP over TCP\n   SNMP over TCP is an optional transport mapping.  It is primarily\n\
    \   defined to support more efficient bulk transfer mechanisms within the\n  \
    \ SNMP framework [5].\n   The originator of a request-response transaction chooses\
    \ the\n   transport protocol for the entire transaction.  The transport\n   protocol\
    \ MUST NOT change during a transaction.\n   In general, originators of request/response\
    \ transactions are free to\n   use the transport they assume is the best in a\
    \ given situation.\n   However, since TCP has a larger footprint on resource usage\
    \ than UDP,\n   engines using SNMP over TCP may choose to switch back to UDP by\n\
    \   refusing new TCP connections whenever necessary (e.g. too many open\n   TCP\
    \ connections).\n   When selecting the transport, it is useful to consider how\
    \ SNMP\n   interacts with TCP acknowledgments and timers.  In particular,\n  \
    \ infrequent SNMP interactions over TCP may lead to additional IP\n   packets\
    \ carrying acknowledgments for SNMP responses if there is no\n   chance to piggyback\
    \ them.  Furthermore, it is recommended to\n   configure SNMP retransmission timers\
    \ to fire later when using SNMP\n   over TCP to avoid application specific timeouts\
    \ before the TCP timers\n   have expired.\n"
- title: 2.1 Serialization
  contents:
  - "2.1 Serialization\n   Each instance of a message is serialized into a single\
    \ BER-encoded\n   message, using the algorithm specified in Section 8 of STD 62,\
    \ RFC\n   3417 [3].  The BER-encoded message is then sent over a TCP\n   connection.\
    \  An SNMP engine MUST NOT interleave SNMP messages within\n   the TCP byte stream.\n\
    \   All the bytes of one SNMP message must be sent before any bytes of a\n   different\
    \ SNMP message.\n   It is possible to exchange multiple SNMP request/response\
    \ pairs over\n   a single (persistent) TCP connection.  TCP connections are by\
    \ default\n   full-duplex and data can travel in both directions at different\n\
    \   speeds.  It is therefore possible to send multiple SNMP messages to a\n  \
    \ remote SNMP engine before receiving responses from the same SNMP\n   engine.\
    \  Note that an SNMP engine is not required to return responses\n   in the same\
    \ order as it received the requests.\n   It is possible that the underlying TCP\
    \ implementation delivers byte\n   sequences that do not align with SNMP message\
    \ boundaries.  A\n   receiving SNMP engine MUST therefore use the length field\
    \ in the\n   BER-encoded SNMP message to separate multiple requests sent over\
    \ a\n   single TCP connection (framing).  An SNMP engine which looses framing\n\
    \   (for example due to ASN.1 parse errors) SHOULD close the TCP\n   connection.\
    \  The connection initiator will then be responsible for\n   establishing a new\
    \ TCP connection.\n"
- title: 2.2 Well-Known Values
  contents:
  - "2.2 Well-Known Values\n   It is RECOMMENDED that administrators configure their\
    \ SNMP entities\n   containing command responders to listen on TCP port 161 for\
    \ incoming\n   connections.  It is also RECOMMENDED that SNMP entities containing\n\
    \   notification receivers be configured to listen on TCP port 162 for\n   connection\
    \ requests.\n   SNMP over TCP transport addresses are identified by using the\
    \ generic\n   TCP transport domain and address definitions provided by RFC 3419\n\
    \   [6], which cover TCP over IPv4 and IPv6.\n   When an SNMP entity uses the\
    \ TCP transport mapping, it MUST be\n   capable of accepting and generating messages\
    \ that are at least 8192\n   octets in size.  Implementation of larger values\
    \ is encouraged\n   whenever possible.\n"
- title: 2.3 Connection Management
  contents:
  - "2.3 Connection Management\n   The use of TCP connections introduces costs [7].\
    \  Connection\n   establishment and teardown cause additional network traffic.\n\
    \   Furthermore, maintaining open connections binds resources in the\n   network\
    \ layer of the underlying operating system.\n   SNMP over TCP is intended to be\
    \ used when the size of the transferred\n   data is large since TCP offers flow\
    \ control and efficient\n   segmentation.  The transport of large amounts of management\
    \ data via\n   SNMP over UDP requires many request/response interactions with\n\
    \   small-sized SNMP over UDP messages, which causes latency to increase\n   excessively.\n\
    \   TCP connections are established on behalf of the SNMP applications\n   which\
    \ initiate a transaction.  In particular, command generator\n   applications are\
    \ responsible for opening TCP connections to command\n   responder applications\
    \ and notification originator applications are\n   responsible for initiating\
    \ TCP connections to notification receiver\n   applications, which are selected\
    \ as described in Section 3 of STD 62,\n   RFC 3413 [8].  If the TCP connection\
    \ cannot be established, then the\n   transaction is aborted and reported to the\
    \ application as a timeout\n   error condition.  Alternative connection establishment\
    \ procedures are\n   discussed in Appendix A but are not part of this specification.\n\
    \   All SNMP entities (whether in an agent role or manager role) can\n   close\
    \ TCP connections at any point in time.  This ensures that SNMP\n   entities can\
    \ control their resource usage and shut down TCP\n   connections that are not\
    \ used.  Note that SNMP engines are not\n   required to process SNMP messages\
    \ if the incoming half of the TCP\n   connection is closed while the outgoing\
    \ half remains open.\n   The processing of any outstanding SNMP requests when\
    \ both sides of\n   the TCP connection have been closed is implementation dependent.\
    \  The\n   sending SNMP entity SHOULD therefore not make assumptions about the\n\
    \   processing of outstanding SNMP requests once a TCP connection is\n   closed.\
    \  A timeout error condition SHOULD be signaled for confirmed\n   operations if\
    \ the TCP connection is closed before a response has been\n   received.\n"
- title: 2.4 Reliable Transport versus Confirmed Operations
  contents:
  - "2.4 Reliable Transport versus Confirmed Operations\n   The transport of SNMP\
    \ messages over TCP results in a reliable\n   exchange of SNMP messages between\
    \ SNMP engines.  In particular, TCP\n   guarantees (in the absence of security\
    \ attacks) that the delivered\n   data is not damaged, lost, duplicated, or delivered\
    \ out of order [2].\n   The SNMP protocol has been designed to support confirmed\
    \ as well as\n   unconfirmed operations [9].  The inform-request protocol operation\
    \ is\n   an example for a confirmed operation while the snmpV2-trap operation\n\
    \   is an example for an unconfirmed operation.\n   There is an important difference\
    \ between an unconfirmed protocol\n   operation sent over a reliable transport\
    \ and a confirmed protocol\n   operation.  A reliable transport such as TCP only\
    \ guarantees that\n   delivered data is not damaged, lost, duplicated, or delivered\
    \ out of\n   order.  It does not guarantee that the delivered data was actually\n\
    \   processed in any way by the application process.  Furthermore, even a\n  \
    \ reliable transport such as TCP cannot guarantee that data sent to a\n   remote\
    \ system is eventually delivered on the remote system.  Even a\n   graceful close\
    \ of the TCP connection does not guarantee that the\n   receiving TCP engine has\
    \ actually delivered all the data to an\n   application process.\n   With a confirmed\
    \ SNMP operation, the receiving SNMP engine\n   acknowledges that the data was\
    \ actually received.  Depending on the\n   SNMP protocol operation, a confirmation\
    \ may indicate that further\n   processing was done.  For example, the response\
    \ to an inform-request\n   protocol operation indicates to the notification originator\
    \ that the\n   notification passed the transport, the security model and that\
    \ it was\n   queued for delivery to the notification receiver application.\n \
    \  Similarly, the response to a set-request indicates that the data\n   passed\
    \ the transport, the security model and that the write request\n   was actually\
    \ processed by the command responder.\n   A reliable transport is thus only a\
    \ poor approximation for confirmed\n   operations.  Applications that need confirmation\
    \ of delivery or\n   processing are encouraged to use the confirmed operations,\
    \ such as\n   the inform-request, rather than using unconfirmed operations, such\
    \ as\n   snmpV2-trap, over a reliable transport.\n"
- title: 3. Security Considerations
  contents:
  - "3. Security Considerations\n   It is RECOMMENDED that implementors consider the\
    \ security features as\n   provided by the SNMPv3 framework in order to provide\
    \ SNMP security.\n   Specifically, the use of the User-based Security Model STD\
    \ 62, RFC\n   3414 [10] and the View-based Access Control Model STD 62, RFC 3415\n\
    \   [11] is RECOMMENDED.\n   It is then a customer/user responsibility to ensure\
    \ that the SNMP\n   entity giving access to a MIB is properly configured to give\
    \ access\n   to the objects only to those principals (users) that have legitimate\n\
    \   rights to indeed GET or SET (change) them.\n   The SNMP over TCP transport\
    \ mapping does not have any impact on the\n   security mechanisms provided by\
    \ SNMPv3.  However, SNMP over TCP may\n   introduce new vulnerabilities to denial\
    \ of service attacks (such as\n   TCP syn flooding) that do not exist in this\
    \ form in other transport\n   mappings.\n"
- title: 4. Acknowledgments
  contents:
  - "4. Acknowledgments\n   This document is the result of discussions within the\
    \ Network\n   Management Research Group (NMRG) of the Internet Research Task\n\
    \   Force[12] (IRTF).  Special thanks to Luca Deri, Jean-Philippe\n   Martin-Flatin,\
    \ Aiko Pras, Ron Sprenkels, and Bert Wijnen for their\n   comments and suggestions.\n\
    \   Additional useful comments have been made by Mike Ayers, Jeff Case,\n   Mike\
    \ Daniele, David Harrington, Lauren Heintz, Keith McCloghrie,\n   Olivier Miakinen,\
    \ and Dave Shield.\n   Luca Deri, Wes Hardaker, Bert Helthuis, and Erik Schoenfelder\
    \ helped\n   to create prototype implementations.  The SNMP over TCP transport\n\
    \   mapping is currently supported by the NET-SNMP package[13] and the\n   Linux\
    \ CMU SNMP package[14].\n"
- title: References
  contents:
  - "References\n   [1]  Case, J., Mundy, R., Partain, D. and B. Stewart, \"Introduction\n\
    \        and Applicability Statements for Internet-Standard Management\n     \
    \   Framework\", RFC 3410, December 2002.\n   [2]  Postel, J., \"Transmission\
    \ Control Protocol\", STD 7, RFC 793,\n        September 1981.\n   [3]  Presuhn,\
    \ R., Ed., \"Transport Mappings for the Simple Network\n        Management Protocol\
    \ (SNMP)\", STD 62, RFC 3417, December 2002.\n   [4]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [5]  Sprenkels, R. and J. Martin-Flatin, \"Bulk Transfers of\
    \ MIB\n        Data\", Simple Times 7(1), March 1999.\n   [6]  Daniele, M. and\
    \ J. Schoenwaelder, \"Textual Conventions for\n        Transport Addresses\",\
    \ RFC 3419, December 2002.\n   [7]  Kastenholz, F., \"SNMP Communications Services\"\
    , RFC 1270,\n        October 1991.\n   [8]  Levi, D., Meyer, P. and B. Stewart,\
    \ \"Simple Network Management\n        Protocol (SNMP) Applications\", STD 62,\
    \ RFC 3413, December 2002.\n   [9]  Harrington, D., Presuhn, R. and B. Wijnen,\
    \ \"An Architecture for\n        Describing Simple Network Management Protocol\
    \ (SNMP) Management\n        Frameworks\", STD 62, RFC 3411, December 2002.\n\
    \   [10] Blumenthal, U. and B. Wijnen, \"User-based Security Model (USM)\n   \
    \     for version 3 of the Simple Network Management Protocol\n        (SNMPv3)\"\
    , STD 62, RFC 3414, December 2002.\n   [11] Wijnen, B., Presuhn, R. and K. McCloghrie,\
    \ \"View-based Access\n        Control Model (VACM) for the Simple Network Management\
    \ Protocol\n        (SNMP)\", STD 62, RFC 3415, December 2002.\n   [12] <http://www.irtf.org/>\n\
    \   [13] <http://net-snmp.sourceforge.net/>\n   [14] <http://www.gaertner.de/snmp/>\n"
- title: Appendix A. Connection Establishment Alternatives
  contents:
  - "Appendix A. Connection Establishment Alternatives\n   This memo defines a simple\
    \ connection establishment scheme where the\n   notification originator or command\
    \ generator application is\n   responsible for establishing TCP connections to\
    \ notification receiver\n   or command responder applications.  The purpose of\
    \ this section is to\n   document variations or alternatives of this scheme which\
    \ have been\n   discussed during the development of this specification.  The\n\
    \   discussion below focuses on notification originator applications\n   since\
    \ this is case where people seem to have diverging viewpoints.\n   The discussion\
    \ below also assumes that the reader is familiar with\n   the SNMPv3 notification\
    \ forwarding model as defined in STD 62, RFC\n   3413 [8].\n   The variations\
    \ that have been discussed are basically driven by the\n   idea of providing fallback\
    \ mechanisms in cases where TCP connection\n   establishment from the notification\
    \ originator to the notification\n   receiver fails.  The approach specified in\
    \ this memo simply drops\n   notifications if the TCP connection cannot be established.\
    \  This\n   implies that notification originators which need reliable\n   notification\
    \ delivery must implement a local notification log in\n   order to keep a history\
    \ of notifications that could not be delivered.\n   Another option is to deliver\
    \ notifications via UDP in case TCP\n   connection establishment fails.  This\
    \ might require augmenting the\n   snmpTargetTable with columns that provide information\
    \ about the\n   alternate UDP transport domain and address.  In general, this\n\
    \   approach only helps to deliver notifications in cases where the\n   notification\
    \ receiver is unable to accept more TCP connections.  In\n   other fault scenarios\
    \ (e.g. routing problems in the network), the UDP\n   packet would have no or\
    \ only marginally better chances to reach the\n   notification receiver.  This\
    \ implies that notification originators\n   which need reliable notification delivery\
    \ still need to implement a\n   local notification log in order to keep a history\
    \ of notifications in\n   case the UDP packets do not reach the destination.\n\
    \   A generalization of this approach leads to the idea of a sparse\n   augmentation\
    \ of the snmpTargetTable which lists alternate fallback\n   transport endpoints\
    \ of arbitrary transport domains.  Multiple\n   fallbacks may be possible by using\
    \ a tag list approach.  This\n   provides a generic transport independent fallback\
    \ mechanism which is\n   independent of the TCP transport mapping defined in this\
    \ memo.\n   Another alternative is to make the notification originator\n   responsible\
    \ for retrying connection establishment.  This could be\n   accomplished by augmenting\
    \ the snmpTargetTable with additional\n   columns that specify retry counts and\
    \ timeouts or by adapting the\n   existing snmpTargetAddrTimeout and snmpTargetAddrRetryCount\
    \ columns\n   in the snmpTargetTable.  But even this approach requires a local\n\
    \   notification log in order to handle situations where all retries have\n  \
    \ failed.\n   A fundamentally different approach is to make the notification\n\
    \   receiver responsible for establishing the TCP connection to the\n   notification\
    \ originator.  This approach has the advantage that the\n   notification originator\
    \ does not necessarily need a list of\n   pre-configured notification receiver\
    \ transport addresses.  The\n   current notification forwarding model however\
    \ relies on the\n   snmpTargetTable to identify notification targets.  So the\
    \ question\n   comes up whether (a) new entries are added to the snmpTargetTable\n\
    \   when a connection is established or whether (b) connections are only\n   accepted\
    \ if they match pre-configured snmpTargetTable entries.  Note\n   that the target\
    \ selection logic relies on a tag list which can not be\n   reasonably populated\
    \ when a connection is accepted.  So only option\n   (b) seems to be compliant\
    \ with the current notification forwarding\n   logic.  Another issue to consider\
    \ is the vulnerability to denial of\n   service attacks.  A notification originator\
    \ can be easily attacked by\n   syn-flooding attacks if it listens for incoming\
    \ TCP connections.\n   Finally, in order to let notification originator and notification\n\
    \   receiver applications coexist easily on a single system, it would be\n   necessary\
    \ to assign new default port numbers on which notification\n   originators listen\
    \ for incoming TCP connections.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Juergen Schoenwaelder\n   TU Braunschweig\n   Bueltenweg\
    \ 74/75\n   38106 Braunschweig\n   Germany\n   Phone: +49 531 391-3283\n   EMail:\
    \ schoenw@ibr.cs.tu-bs.de\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
