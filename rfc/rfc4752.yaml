- contents:
  - "                       The Kerberos V5 (\"GSSAPI\")\n       Simple Authentication
    and Security Layer (SASL) Mechanism\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The Simple Authentication and Security Layer (SASL) is a framework\n
    \  for adding authentication support to connection-based protocols.\n   This document
    describes the method for using the Generic Security\n   Service Application Program
    Interface (GSS-API) Kerberos V5 in the\n   SASL.\n   This document replaces Section
    7.2 of RFC 2222, the definition of the\n   \"GSSAPI\" SASL mechanism.  This document,
    together with RFC 4422,\n   obsoletes RFC 2222.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Relationship to Other Documents ............................2\n   2.
    Conventions Used in This Document ...............................2\n   3. Kerberos
    V5 GSS-API Mechanism ...................................2\n      3.1. Client Side
    of Authentication Protocol Exchange ............3\n      3.2. Server Side of Authentication
    Protocol Exchange ............4\n      3.3. Security Layer .............................................6\n
    \  4. IANA Considerations .............................................7\n   5.
    Security Considerations .........................................7\n   6. Acknowledgements
    ................................................8\n   7. Changes since RFC 2222
    ..........................................8\n   8. References ......................................................8\n
    \     8.1. Normative References .......................................8\n      8.2.
    Informative References .....................................9\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This specification documents currently deployed Simple Authentication\n
    \  and Security Layer (SASL [SASL]) mechanism supporting the Kerberos V5\n   [KERBEROS]
    Generic Security Service Application Program Interface\n   ([GSS-API]) mechanism
    [RFC4121].  The authentication sequence is\n   described in Section 3.  Note that
    the described authentication\n   sequence has known limitations, in particular,
    it lacks channel\n   bindings and the number of round-trips required to complete\n
    \  authentication exchange is not minimal.  SASL WG is working on a\n   separate
    document that should address these limitations.\n"
  - contents:
    - "1.1.  Relationship to Other Documents\n   This document, together with RFC
      4422, obsoletes RFC 2222 in its\n   entirety.  This document replaces Section
      7.2 of RFC 2222.  The\n   remainder is obsoleted as detailed in Section 1.2
      of RFC 4422.\n"
    title: 1.1.  Relationship to Other Documents
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"SHOULD\", \"SHOULD NOT\", and \"MAY\"\n   in this document are to be interpreted
    as defined in \"Key words for\n   use in RFCs to Indicate Requirement Levels\"
    [KEYWORDS].\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Kerberos V5 GSS-API Mechanism\n   The SASL mechanism name for the Kerberos
    V5 GSS-API mechanism\n   [RFC4121] is \"GSSAPI\".  Though known as the SASL GSSAPI
    mechanism,\n   the mechanism is specifically tied to Kerberos V5 and GSS-API's\n
    \  Kerberos V5 mechanism.\n   The GSSAPI SASL mechanism is a \"client goes first\"
    SASL mechanism;\n   i.e., it starts with the client sending a \"response\" created
    as\n   described in the following section.\n   The implementation MAY set any
    GSS-API flags or arguments not\n   mentioned in this specification as is necessary
    for the\n   implementation to enforce its security policy.\n   Note that major
    status codes returned by GSS_Init_sec_context() or\n   GSS_Accept_sec_context()
    other than GSS_S_COMPLETE or\n   GSS_S_CONTINUE_NEEDED cause authentication failure.
    \ Major status\n   codes returned by GSS_Unwrap() other than GSS_S_COMPLETE (without
    any\n   additional supplementary status codes) cause authentication and/or\n   security
    layer failure.\n"
  - contents:
    - "3.1.  Client Side of Authentication Protocol Exchange\n   The client calls
      GSS_Init_sec_context, passing in\n   input_context_handle of 0 (initially),
      mech_type of the Kerberos V5\n   GSS-API mechanism [KRB5GSS], chan_binding of
      NULL, and targ_name\n   equal to output_name from GSS_Import_Name called with
      input_name_type\n   of GSS_C_NT_HOSTBASED_SERVICE (*) and input_name_string
      of\n   \"service@hostname\" where \"service\" is the service name specified
      in\n   the protocol's profile, and \"hostname\" is the fully qualified host\n
      \  name of the server.  When calling the GSS_Init_sec_context, the\n   client
      MUST pass the integ_req_flag of TRUE (**).  If the client will\n   be requesting
      a security layer, it MUST also supply to the\n   GSS_Init_sec_context a mutual_req_flag
      of TRUE, and a\n   sequence_req_flag of TRUE.  If the client will be requesting
      a\n   security layer providing confidentiality protection, it MUST also\n   supply
      to the GSS_Init_sec_context a conf_req_flag of TRUE.  The\n   client then responds
      with the resulting output_token.  If\n   GSS_Init_sec_context returns GSS_S_CONTINUE_NEEDED,
      then the client\n   should expect the server to issue a token in a subsequent
      challenge.\n   The client must pass the token to another call to\n   GSS_Init_sec_context,
      repeating the actions in this paragraph.\n   (*) Clients MAY use name types
      other than GSS_C_NT_HOSTBASED_SERVICE\n   to import servers' acceptor names,
      but only when they have a priori\n   knowledge that the servers support alternate
      name types.  Otherwise\n   clients MUST use GSS_C_NT_HOSTBASED_SERVICE for importing
      acceptor\n   names.\n   (**) Note that RFC 2222 [RFC2222] implementations will
      not work with\n   GSS-API implementations that require integ_req_flag to be
      true.  No\n   implementations of RFC 1964 [KRB5GSS] or RFC 4121 [RFC4121] that\n
      \  require integ_req_flag to be true are believed to exist and it is\n   expected
      that any future update to [RFC4121] will require that\n   integrity be available
      even in not explicitly requested by the\n   application.\n   When GSS_Init_sec_context
      returns GSS_S_COMPLETE, the client examines\n   the context to ensure that it
      provides a level of protection\n   permitted by the client's security policy.
      \ In particular, if the\n   integ_avail flag is not set in the context, then
      no security layer\n   can be offered or accepted.\n   If the conf_avail flag
      is not set in the context, then no security\n   layer with confidentiality can
      be offered or accepted.  If the\n   context is acceptable, the client takes
      the following actions: If the\n   last call to GSS_Init_sec_context returned
      an output_token, then the\n   client responds with the output_token, otherwise
      the client responds\n   with no data.  The client should then expect the server
      to issue a\n   token in a subsequent challenge.  The client passes this token
      to\n   GSS_Unwrap and interprets the first octet of resulting cleartext as a\n
      \  bit-mask specifying the security layers supported by the server and\n   the
      second through fourth octets as the maximum size output_message\n   the server
      is able to receive (in network byte order).  If the\n   resulting cleartext
      is not 4 octets long, the client fails the\n   negotiation.  The client verifies
      that the server maximum buffer is 0\n   if the server does not advertise support
      for any security layer.\n   The client then constructs data, with the first
      octet containing the\n   bit-mask specifying the selected security layer, the
      second through\n   fourth octets containing in network byte order the maximum
      size\n   output_message the client is able to receive (which MUST be 0 if the\n
      \  client does not support any security layer), and the remaining octets\n   containing
      the UTF-8 [UTF8] encoded authorization identity.\n   (Implementation note: The
      authorization identity is not terminated\n   with the zero-valued (%x00) octet
      (e.g., the UTF-8 encoding of the\n   NUL (U+0000) character)).  The client passes
      the data to GSS_Wrap\n   with conf_flag set to FALSE and responds with the generated\n
      \  output_message.  The client can then consider the server\n   authenticated.\n"
    title: 3.1.  Client Side of Authentication Protocol Exchange
  - contents:
    - "3.2.  Server Side of Authentication Protocol Exchange\n   A server MUST NOT
      advertise support for the \"GSSAPI\" SASL mechanism\n   described in this document
      unless it has acceptor credential for the\n   Kerberos V GSS-API mechanism [KRB5GSS].\n
      \  The server passes the initial client response to\n   GSS_Accept_sec_context
      as input_token, setting input_context_handle\n   to 0 (initially), chan_binding
      of NULL, and a suitable\n   acceptor_cred_handle (see below).  If GSS_Accept_sec_context
      returns\n   GSS_S_CONTINUE_NEEDED, the server returns the generated output_token\n
      \  to the client in challenge and passes the resulting response to\n   another
      call to GSS_Accept_sec_context, repeating the actions in this\n   paragraph.\n
      \  Servers SHOULD use a credential obtained by calling GSS_Acquire_cred\n   or
      GSS_Add_cred for the GSS_C_NO_NAME desired_name and the Object\n   Identifier
      (OID) of the Kerberos V5 GSS-API mechanism [KRB5GSS](*).\n   Servers MAY use
      GSS_C_NO_CREDENTIAL as an acceptor credential handle.\n   Servers MAY use a
      credential obtained by calling GSS_Acquire_cred or\n   GSS_Add_cred for the
      server's principal name(s) (**) and the Kerberos\n   V5 GSS-API mechanism [KRB5GSS].\n
      \  (*) Unlike GSS_Add_cred the GSS_Acquire_cred uses an OID set of GSS-\n   API
      mechanism as an input parameter.  The OID set can be created by\n   using GSS_Create_empty_OID_set
      and GSS_Add_OID_set_member.  It can be\n   freed by calling the GSS_Release_oid_set.\n
      \  (**) Use of server's principal names having\n   GSS_C_NT_HOSTBASED_SERVICE
      name type and \"service@hostname\" format,\n   where \"service\" is the service
      name specified in the protocol's\n   profile, and \"hostname\" is the fully
      qualified host name of the\n   server, is RECOMMENDED.  The server name is generated
      by calling\n   GSS_Import_name with input_name_type of GSS_C_NT_HOSTBASED_SERVICE\n
      \  and input_name_string of \"service@hostname\".\n   Upon successful establishment
      of the security context (i.e.,\n   GSS_Accept_sec_context returns GSS_S_COMPLETE),
      the server SHOULD\n   verify that the negotiated GSS-API mechanism is indeed
      Kerberos V5\n   [KRB5GSS].  This is done by examining the value of the mech_type\n
      \  parameter returned from the GSS_Accept_sec_context call.  If the\n   value
      differs, SASL authentication MUST be aborted.\n   Upon successful establishment
      of the security context and if the\n   server used GSS_C_NO_NAME/GSS_C_NO_CREDENTIAL
      to create acceptor\n   credential handle, the server SHOULD also check using
      the\n   GSS_Inquire_context that the target_name used by the client matches\n
      \  either\n   -  the GSS_C_NT_HOSTBASED_SERVICE \"service@hostname\" name syntax,\n
      \     where \"service\" is the service name specified in the application\n      protocol's
      profile,\n      or\n   -  the GSS_KRB5_NT_PRINCIPAL_NAME [KRB5GSS] name syntax
      for a two-\n      component principal where the first component matches the
      service\n      name specified in the application protocol's profile.\n   When
      GSS_Accept_sec_context returns GSS_S_COMPLETE, the server\n   examines the context
      to ensure that it provides a level of protection\n   permitted by the server's
      security policy.  In particular, if the\n   integ_avail flag is not set in the
      context, then no security layer\n   can be offered or accepted.  If the conf_avail
      flag is not set in the\n   context, then no security layer with confidentiality
      can be offered\n   or accepted.\n   If the context is acceptable, the server
      takes the following actions:\n   If the last call to GSS_Accept_sec_context
      returned an output_token,\n   the server returns it to the client in a challenge
      and expects a\n   reply from the client with no data.  Whether or not an output_token\n
      \  was returned (and after receipt of any response from the client to\n   such
      an output_token), the server then constructs 4 octets of data,\n   with the
      first octet containing a bit-mask specifying the security\n   layers supported
      by the server and the second through fourth octets\n   containing in network
      byte order the maximum size output_token the\n   server is able to receive (which
      MUST be 0 if the server does not\n   support any security layer).  The server
      must then pass the plaintext\n   to GSS_Wrap with conf_flag set to FALSE and
      issue the generated\n   output_message to the client in a challenge.\n   The
      server must then pass the resulting response to GSS_Unwrap and\n   interpret
      the first octet of resulting cleartext as the bit-mask for\n   the selected
      security layer, the second through fourth octets as the\n   maximum size output_message
      the client is able to receive (in network\n   byte order), and the remaining
      octets as the authorization identity.\n   The server verifies that the client
      has selected a security layer\n   that was offered and that the client maximum
      buffer is 0 if no\n   security layer was chosen.  The server must verify that
      the src_name\n   is authorized to act as the authorization identity.  After
      these\n   verifications, the authentication process is complete.  The server
      is\n   not expected to return any additional data with the success\n   indicator.\n"
    title: 3.2.  Server Side of Authentication Protocol Exchange
  - contents:
    - "3.3.  Security Layer\n   The security layers and their corresponding bit-masks
      are as follows:\n          1 No security layer\n          2 Integrity protection.\n
      \           Sender calls GSS_Wrap with conf_flag set to FALSE\n          4 Confidentiality
      protection.\n            Sender calls GSS_Wrap with conf_flag set to TRUE\n
      \  Other bit-masks may be defined in the future; bits that are not\n   understood
      must be negotiated off.\n   When decoding any received data with GSS_Unwrap,
      the major_status\n   other than the GSS_S_COMPLETE MUST be treated as a fatal
      error.\n   Note that SASL negotiates the maximum size of the output_message
      to\n   send.  Implementations can use the GSS_Wrap_size_limit call to\n   determine
      the corresponding maximum size input_message.\n"
    title: 3.3.  Security Layer
  title: 3.  Kerberos V5 GSS-API Mechanism
- contents:
  - "4.  IANA Considerations\n   IANA modified the existing registration for \"GSSAPI\"
    as follows:\n   Family of SASL mechanisms:  NO\n   SASL mechanism name:  GSSAPI\n
    \  Security considerations:  See Section 5 of RFC 4752\n   Published specification:
    \ RFC 4752\n   Person & email address to contact for further information:\n      Alexey
    Melnikov <Alexey.Melnikov@isode.com>\n   Intended usage:  COMMON\n   Owner/Change
    controller:  iesg@ietf.org\n   Additional information:  This mechanism is for
    the Kerberos V5\n      mechanism of GSS-API.\n"
  title: 4.  IANA Considerations
- contents:
  - "5.  Security Considerations\n   Security issues are discussed throughout this
    memo.\n   When constructing the input_name_string, the client SHOULD NOT\n   canonicalize
    the server's fully qualified domain name using an\n   insecure or untrusted directory
    service.\n   For compatibility with deployed software, this document requires
    that\n   the chan_binding (channel bindings) parameter to GSS_Init_sec_context\n
    \  and GSS_Accept_sec_context be NULL, hence disallowing use of GSS-API\n   support
    for channel bindings.  GSS-API channel bindings in SASL is\n   expected to be
    supported via a new GSS-API family of SASL mechanisms\n   (to be introduced in
    a future document).\n   Additional security considerations are in the [SASL] and
    [GSS-API]\n   specifications.  Additional security considerations for the GSS-API\n
    \  mechanism can be found in [KRB5GSS] and [KERBEROS].\n"
  title: 5.  Security Considerations
- contents:
  - "6.  Acknowledgements\n   This document replaces Section 7.2 of RFC 2222 [RFC2222]
    by John G.\n   Myers.  He also contributed significantly to this revision.\n   Lawrence
    Greenfield converted text of this document to the XML\n   format.\n   Contributions
    of many members of the SASL mailing list are gratefully\n   acknowledged, in particular
    comments from Chris Newman, Nicolas\n   Williams, Jeffrey Hutzelman, Sam Hartman,
    Mark Crispin, and Martin\n   Rex.\n"
  title: 6.  Acknowledgements
- contents:
  - "7.  Changes since RFC 2222\n   RFC 2078 [RFC2078] specifies the version of GSS-API
    used by RFC 2222\n   [RFC2222], which provided the original version of this specification.\n
    \  That version of GSS-API did not provide the integ_integ_avail flag as\n   an
    input to GSS_Init_sec_context.  Instead, integrity was always\n   requested.  RFC
    4422 [SASL] requires that when possible, the security\n   layer negotiation be
    integrity protected.  To meet this requirement\n   and as part of moving from
    RFC 2078 [RFC2078] to RFC 2743 [GSS-API],\n   this specification requires that
    clients request integrity from\n   GSS_Init_sec_context so they can use GSS_Wrap
    to protect the security\n   layer negotiation.  This specification does not require
    that the\n   mechanism offer the integrity security layer, simply that the\n   security
    layer negotiation be wrapped.\n"
  title: 7.  Changes since RFC 2222
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [GSS-API]  Linn, J., \"Generic Security Service
      Application Program\n              Interface Version 2, Update 1\", RFC 2743,
      January 2000.\n   [KERBEROS] Neuman, C., Yu, T., Hartman, S., and K. Raeburn,
      \"The\n              Kerberos Network Authentication Service (V5)\", RFC 4120,\n
      \             July 2005.\n   [KEYWORDS] Bradner, S., \"Key words for use in
      RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [KRB5GSS]  Linn, J., \"The Kerberos Version 5 GSS-API Mechanism\",
      RFC\n              1964, June 1996.\n   [RFC4121]  Zhu, L., Jaganathan, K.,
      and S. Hartman, \"The Kerberos\n              Version 5 Generic Security Service
      Application Program\n              Interface (GSS-API) Mechanism: Version 2\",
      RFC 4121, July\n              2005.\n   [SASL]     Melnikov, A. and  K. Zeilenga,
      \"Simple Authentication and\n              Security Layer (SASL)\", RFC 4422,
      June 2006.\n   [UTF8]     Yergeau, F., \"UTF-8, a transformation format of ISO\n
      \             10646\", STD 63, RFC 3629, November 2003.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC2078]  Linn, J., \"Generic Security Service
      Application Program\n              Interface, Version 2\", RFC 2078, January
      1997.\n   [RFC2222]  Myers, J., \"Simple Authentication and Security Layer\n
      \             (SASL)\", RFC 2222, October 1997.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Editor's Address\n   Alexey Melnikov\n   Isode Limited\n   5 Castle Business
    Village\n   36 Station Road\n   Hampton, Middlesex  TW12 2BX\n   UK\n   EMail:
    Alexey.Melnikov@isode.com\n   URI:   http://www.melnikov.ca/\n"
  title: Editor's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR\n
    \  PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
