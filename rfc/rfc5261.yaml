- title: __initial_text__
  contents:
  - ''
- title: An Extensible Markup Language (XML) Patch Operations Framework Utilizing
  contents:
  - "An Extensible Markup Language (XML) Patch Operations Framework Utilizing\n  \
    \                XML Path Language (XPath) Selectors\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Extensible Markup Language (XML) documents are widely used as\n\
    \   containers for the exchange and storage of arbitrary data in today's\n   systems.\
    \  In order to send changes to an XML document, an entire copy\n   of the new\
    \ version must be sent, unless there is a means of\n   indicating only the portions\
    \ that have changed.  This document\n   describes an XML patch framework utilizing\
    \ XML Path language (XPath)\n   selectors.  These selector values and updated\
    \ new data content\n   constitute the basis of patch operations described in this\
    \ document.\n   In addition to them, with basic <add>, <replace>, and <remove>\n\
    \   directives a set of patches can then be applied to update an existing\n  \
    \ XML document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n           4.4.1. Replacing an Element ...............................14\n\
    \           4.4.2. Replacing an Attribute Value .......................14\n  \
    \         4.4.3. Replacing a Namespace Declaration URI ..............14\n    \
    \       4.4.4. Replacing a Comment Node ...........................14\n      \
    \     4.4.5. Replacing a Processing Instruction Node ............15\n        \
    \   4.4.6. Replacing a Text Node ..............................15\n      4.5.\
    \ <remove> Element ..........................................15\n           4.5.1.\
    \ Removing an Element ................................15\n           4.5.2. Removing\
    \ an Attribute ..............................16\n           4.5.3. Removing a\
    \ Prefixed Namespace Declaration ..........16\n           4.5.4. Removing a Comment\
    \ Node ............................16\n           4.5.5. Removing a Processing\
    \ Instruction Node .............16\n           4.5.6. Removing a Text Node ...............................16\n\
    \   5. Error Handling .................................................17\n  \
    \    5.1. Error Elements ............................................17\n   6.\
    \ Usage of Patch Operations ......................................19\n   7. Usage\
    \ of Selector Values .......................................19\n   8. XML Schema\
    \ Types of Patch Operation Elements ...................19\n   9. XML Schema of\
    \ Patch Operation Errors ...........................21\n   10. IANA Considerations\
    \ ...........................................23\n      10.1. URN Sub-Namespace\
    \ Registration ...........................23\n      10.2. application/patch-ops-error+xml\
    \ MIME Type ................24\n      10.3. Patch-Ops-Types XML Schema Registration\
    \ ..................25\n      10.4. Patch-Ops-Error XML Schema Registration ..................25\n\
    \   11. Security Considerations .......................................26\n  \
    \ 12. Acknowledgments ...............................................26\n   13.\
    \ References ....................................................26\n      13.1.\
    \ Normative References .....................................26\n      13.2. Informative\
    \ References ...................................28\n   Appendix A.  Informative\
    \ Examples .................................29\n     A.1.  Adding an Element .........................................29\n\
    \     A.2.  Adding an Attribute .......................................29\n  \
    \   A.3.  Adding a Prefixed Namespace Declaration ...................30\n    \
    \ A.4.  Adding a Comment Node with the 'pos' Attribute ............30\n     A.5.\
    \  Adding Multiple Nodes .....................................31\n     A.6.  Replacing\
    \ an Element ......................................31\n     A.7.  Replacing an\
    \ Attribute Value ..............................32\n     A.8.  Replacing a Namespace\
    \ Declaration URI .....................32\n     A.9.  Replacing a Comment Node\
    \ ..................................33\n     A.10. Replacing a Processing Instruction\
    \ Node ...................33\n     A.11. Replacing a Text Node .....................................34\n\
    \     A.12. Removing an Element .......................................34\n  \
    \   A.13. Removing an Attribute .....................................35\n    \
    \ A.14. Removing a Prefixed Namespace Declaration .................35\n     A.15.\
    \ Removing a Comment Node ...................................36\n     A.16. Removing\
    \ a Processing Instruction Node ....................36\n     A.17. Removing a\
    \ Text Node ......................................37\n     A.18. Several Patches\
    \ With Namespace Mangling ...................38\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Extensible Markup Language (XML) [W3C.REC-xml-20060816]\
    \ documents are\n   widely used as containers for the exchange and storage of\
    \ arbitrary\n   data in today's systems.  In order to send changes to an XML\n\
    \   document, an entire copy of the new version must be sent, unless\n   there\
    \ is a means of indicating only the portions that have changed\n   (patches).\n\
    \   This document describes an XML patch framework that utilizes XML Path\n  \
    \ language (XPath) [W3C.REC-xpath-19991116] selectors.  An XPath\n   selector\
    \ is used to pinpoint the specific portion of the XML that is\n   the target for\
    \ the change.  These selector values and updated new\n   data content constitute\
    \ the basis of patch operations described in\n   this document.  In addition to\
    \ them, with basic <add>, <replace>, and\n   <remove> directives a set of patches\
    \ can be applied to update an\n   existing target XML document.  With these patch\
    \ operations, a simple\n   semantics for data oriented XML documents\n   [W3C.REC-xmlschema-2-20041028]\
    \ is achieved, that is, modifications\n   like additions, removals, or substitutions\
    \ of elements and attributes\n   can easily be performed.  This document does\
    \ not describe a full XML\n   diff format, only basic patch operation elements\
    \ that can be embedded\n   within a full format that typically has additional\
    \ semantics.\n   As one concrete example, in the Session Initiation Protocol (SIP)\n\
    \   [RFC3903] based presence system a partial PIDF XML document format\n   [RFC5262]\
    \ consists of the existing Presence Information Data Format\n   (PIDF) document\
    \ format combined with the patch operations elements\n   described in this document.\
    \  In general, patch operations can be used\n   in any application that exchanges\
    \ XML documents, for example, within\n   the SIP Events framework [RFC3265]. \
    \ Yet another example is XCAP-diff\n   [SIMPLE-XCAP], which uses this framework\
    \ for sending partial updates\n   of changes to XCAP [RFC4825] resources.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119, BCP 14\n   [RFC2119] and indicate requirement levels for compliant\n \
    \  implementations.\n   The following terms are used in this document:\n   Target\
    \ XML document:  A target XML document that is going to be\n      updated with\
    \ a set of patches.\n   XML diff document:  An XML document that contains patch\
    \ operation\n      elements, namespace declarations, and all the document content\n\
    \      changes that are needed in order to transform a target XML\n      document\
    \ into a new patched XML document.\n   Patched XML document:  An XML document\
    \ that results after applying\n      one or more patch operations defined in the\
    \ XML diff document to\n      the target XML document.\n   Patch operation:  A\
    \ single change, i.e., a patch that is being\n      applied to update a target\
    \ XML document.\n   Patch operation element:  An XML element that represents a\
    \ single\n      patch operation.\n   Type definition for an element:  A World\
    \ Wide Web Consortium (W3C)\n      Schema type definition for an element that\
    \ describes a patch\n      operation content.\n   In-scope namespace declaration:\
    \  A list of all in-scope namespace\n      declarations within a context node.\
    \  The QName (qualified name)\n      expansion of a context node is based on mapping\
    \ a prefix with one\n      of these declarations.  For an element, one namespace\
    \ binding may\n      have an empty prefix.\n   Positional constraint:  A number\
    \ enclosed with square brackets.  It\n      can be used as a location step predicate.\n\
    \   Located target node:  A node that was found from the target XML\n      document\
    \ with the aid of an XPath selector value.\n   White space text node:  A text\
    \ node that contains only white space.\n"
- title: 3.  Basic Features and Requirements
  contents:
  - "3.  Basic Features and Requirements\n   In this framework, XPath selector values\
    \ and new data content are\n   embedded within XML elements, the names of which\
    \ specify the\n   modification to be performed: <add>, <replace>, or <remove>.\
    \  These\n   elements (patch operations) are defined by schema types with the\
    \ W3C\n   Schema language [W3C.REC-xmlschema-1-20041028].  XPath selectors\n \
    \  pinpoint the target for a change and they are expressed as attributes\n   of\
    \ these elements.  The child node(s) of patch operation elements\n   contain the\
    \ new data content.  In general when applicable, the new\n   content SHOULD be\
    \ moved unaltered to the patched XML document.\n   XML documents that are equivalent\
    \ for the purposes of many\n   applications MAY differ in their physical representation.\
    \  The aim of\n   this document is to describe a deterministic framework where\
    \ the\n   canonical form with comments [W3C.REC-xml-c14n-20010315] of an XML\n\
    \   document determines logical equivalence.  For example, white space\n   text\
    \ nodes MUST be processed properly in order to fulfill this\n   requirement as\
    \ white space is by default significant\n   [W3C.REC-xml-c14n-20010315].\n   The\
    \ specifications referencing these element schema types MUST define\n   the full\
    \ XML diff format with an appropriate MIME type [RFC3023] and\n   a character\
    \ set, e.g., UTF-8 [RFC3629].  For example, the partial\n   PIDF format [RFC5262]\
    \ includes this schema and describes additional\n   definitions to produce a complete\
    \ XML diff format for partial\n   presence information updates.\n   As the schema\
    \ defined in this document does not declare any target\n   namespace, the type\
    \ definitions inherit the target namespace of the\n   including schema.  Therefore,\
    \ additional namespace declarations\n   within the XML diff documents can be avoided.\n\
    \   It is anticipated that applications using these types will define\n   <add>,\
    \ <replace>, and <remove> elements based on the corresponding\n   type definitions\
    \ in this schema.  In addition, an application may\n   reference only a subset\
    \ of these type definitions.  A future\n   extension can introduce other operations,\
    \ e.g., with\n   document-oriented models [W3C.REC-xmlschema-2-20041028], a <move>\n\
    \   operation and a text node patching algorithm combined with <move>\n   would\
    \ undoubtedly produce smaller XML diff documents.\n   The instance document elements\
    \ based on these schema type definitions\n   MUST be well formed and SHOULD be\
    \ valid.\n   The following XPath 1.0 data model node types can be added, replaced,\n\
    \   or removed with this framework: elements, attributes, namespaces,\n   comments,\
    \ texts, and processing instructions.  The full XML prolog,\n   including for\
    \ example XML entities [W3C.REC-xml-20060816] and the\n   root node of an XML\
    \ document, cannot be patched according to this\n   framework.  However, patching\
    \ of comments and processing instructions\n   of the root node is allowed.  Naturally,\
    \ the removal or addition of a\n   document root element is not allowed as any\
    \ valid XML document MUST\n   always contain a single root element.  Also, note\
    \ that support for\n   external entities is beyond the scope of this framework.\n"
- title: 4.  Patch Operations
  contents:
  - "4.  Patch Operations\n   An XML diff document contains a collection of patch\
    \ operation\n   elements, including one or more <add>, <replace>, and <remove>\n\
    \   elements.  These patch operations will be applied sequentially in the\n  \
    \ document order.  After the first patch has been applied to update a\n   target\
    \ XML document, the patched XML document becomes a new\n   independent XML document\
    \ against which the next patch will be\n   applied.  This procedure repeats until\
    \ all patches have successfully\n   been processed.\n"
- title: 4.1.  Locating the Target of a Patch
  contents:
  - "4.1.  Locating the Target of a Patch\n   Each patch operation element contains\
    \ a 'sel' attribute.  The value\n   of this attribute is an XPath selector with\
    \ a restricted subset of\n   the full XPath 1.0 recommendation.  The 'sel' value\
    \ is used to locate\n   a single unique target node from the target XML document.\
    \  This\n   located node pinpoints the target for a change and usually it is an\n\
    \   element, which is for example either updated itself or some child\n   node(s)\
    \ are added into it.  It MAY also be, for instance, a comment\n   node, after\
    \ which some other sibling node(s) are inserted.  In any\n   case, it is an error\
    \ condition if multiple nodes are found during the\n   evaluation of this selector\
    \ value.\n   The XPath selections of the 'sel' attribute always start from the\n\
    \   root node of a document.  Thus, relative location paths SHOULD be\n   used\
    \ so that the starting root node selection \"/\" can be omitted.\n   When locating\
    \ elements in a document tree, a node test can either be\n   a \"*\" character\
    \ or a QName [W3C.REC-xml-names-20060816].  A \"*\"\n   character selects all\
    \ element children of the context node.  Right\n   after the node test, a location\
    \ step can contain one or more\n   predicates in any order.  An attribute value\
    \ comparison is one of the\n   most typical predicates.  The string value of the\
    \ current context\n   node or a child element may alternatively be used to identify\n\
    \   elements in the tree.  The character \".\", which denotes a current\n   context\
    \ node selection, is an abbreviated form of \"self::node()\".\n   Lastly, positional\
    \ constraints like \"[2]\" can also be used as an\n   additional predicate.\n\
    \   An XPath 1.0 \"id()\" node-set function MAY also be used to identify\n   unique\
    \ elements from the document tree.  The schema that describes\n   the content\
    \ model of the document MUST then use an attribute with the\n   type ID [W3C.REC-xmlschema-2-20041028]\
    \ or with non-validating XML\n   parsers, an \"xml:id\" [W3C.WD-xml-id-20041109]\
    \ attribute MUST have\n   been used within an instance document.\n"
- title: 4.2.  Namespace Mangling
  contents:
  - "4.2.  Namespace Mangling\n   The normal model for namespace prefixes is that\
    \ they are local in\n   scope.  Thus, an XML diff document MAY have different\
    \ prefixes for\n   the namespaces used in the target document.  The agent parsing\
    \ the\n   diff document MUST resolve prefixes separately in both documents in\n\
    \   order to match the resulting QNames (qualified name) from each.\n   The XML\
    \ diff document MUST contain declarations for all namespaces\n   used in the diff\
    \ document.  The diff document declarations are always\n   used to determine what\
    \ namespaces apply within the diff document.\n"
- title: 4.2.1.  Namespaces Used in Selectors
  contents:
  - "4.2.1.  Namespaces Used in Selectors\n   A selector in a diff document may use\
    \ prefixes when naming elements.\n   If it does use a prefix, the prefix must\
    \ be looked up in the diff\n   document namespace declarations.\n      For example,\
    \ the patch operation element of a diff document has an\n      in-scope namespace\
    \ declaration \"xmlns:a='foo:'\" with a selector\n      \"sel='a:bar'\".  The\
    \ agent processing this patch MUST then look for\n      a 'bar' element qualified\
    \ with the 'foo:' namespace regardless of\n      whether the 'foo:' namespace\
    \ has a prefix assigned in the target\n      document or what that prefix is.\n\
    \   Default namespaces make this model a little more complicated.  When\n   the\
    \ diff document has a default namespace declaration, any element\n   selector\
    \ without a prefix MUST be evaluated using that namespace.\n      For example,\
    \ the patch operation element of a diff document has an\n      in-scope namespace\
    \ declaration \"xmlns='foo:'\" with a selector\n      \"sel='bar'\".  The agent\
    \ processing this patch MUST then look for a\n      'bar' element qualified with\
    \ the 'foo:' namespace, regardless of\n      whether the 'foo:' namespace has\
    \ a prefix assigned in the target\n      document or what that prefix is.\n  \
    \ Unqualified names are also possible.  If there is no default\n   namespace declared,\
    \ and an element name appears without a prefix,\n   then it is an unqualified\
    \ element name.  If this appears in a\n   selector, it MUST match an unqualified\
    \ element in the target\n   document.\n      For example, the patch operation\
    \ element of a diff document has\n      only one in-scope namespace declaration\
    \ \"xmlns:a='foo:'\" with a\n      selector \"sel='bar'\".  Since the 'bar' element\
    \ has no prefix, and\n      there is no default namespace declaration in scope,\
    \ the agent\n      processing this patch can only match the selector against a\
    \ 'bar'\n      element that has no prefix and also no default namespace in scope.\n"
- title: 4.2.2.  Departures from XPath Requirements
  contents:
  - "4.2.2.  Departures from XPath Requirements\n   The prefix matching rules described\
    \ previously in this section are\n   different from those required in XPath 1.0\
    \ and 2.0\n   [W3C.REC-xpath20-20070123].  In XPath 1.0, a \"bar\" selector always\n\
    \   locates an unqualified <bar> element.  In XPath 2.0, a \"bar\" selector\n\
    \   not only matches an unqualified <bar> element, but also matches a\n   qualified\
    \ <bar> element that is in scope of a default namespace\n   declaration.  In contrast,\
    \ in this specification, a selector without\n   a prefix only matches one element,\
    \ and it may match an element with\n   or without a prefix but only if the namespace\
    \ it's qualified with (or\n   none) is an exact match.\n      The XPath 1.0 recommendation\
    \ specifies \"namespace-uri()\" and\n      \"local-name()\" node-set functions\
    \ that can be used within\n      predicates.  These functions may be utilized\
    \ during XPath\n      evaluations if there are no other means to \"register\"\
    \ prefixes\n      with associated namespace URIs.  They can also be used when\n\
    \      handling selections where default namespaces are attached to\n      elements.\
    \  However, this specification does not allow the usage of\n      these functions.\n"
- title: 4.2.3.  Namespaces and Added/Changed Content
  contents:
  - "4.2.3.  Namespaces and Added/Changed Content\n   Elements within the changed\
    \ data content are also in scope of\n   namespace declarations.  For example,\
    \ when adding a new namespace\n   qualified element to the target XML document,\
    \ the diff document MUST\n   contain a namespace declaration that applies to the\
    \ element.  The\n   agent processing the diff document MUST ensure that the target\n\
    \   document also contains the same namespace declaration.  Similar to\n   XPath,\
    \ the same namespace declaration in this context means that the\n   namespace\
    \ URIs MUST be equal, but the prefixes MAY be different in\n   the diff and target\
    \ documents.\n      For example, if a new added <a:bar> element has a namespace\n\
    \      declaration reference to \"xmlns:a='foo:'\" in the diff document and\n\
    \      the target document has only a single in-scope namespace\n      declaration\
    \ \"xmlns:b='foo:'\" at the insertion point, the namespace\n      reference MUST\
    \ be changed so that a <b:bar> element will then\n      exist in the patched document.\
    \  The same rule applies although\n      default namespaces were used in either\
    \ or both of the documents,\n      the namespace URIs determine what will be the\
    \ correct references\n      (prefixes) in the patched document.\n   When the new\
    \ or changed content has elements that declare new\n   namespaces (locally scoped),\
    \ these declarations are copied unaltered\n   (prefix and everything) from the\
    \ XML diff document to the target XML\n   document.  Default namespace declarations\
    \ can only be added in this\n   way, but prefixed namespace declarations MAY be\
    \ added or removed with\n   XPath namespace axis semantics shown later in this\
    \ document (look\n   Section 4.3.3).\n   A fairly difficult use case for these\
    \ rules is found when the target\n   document has several namespace declarations\
    \ in scope for the same\n   namespace.  A target document might declare several\
    \ different\n   prefixes for the same namespace.  Normally, the agent applying\
    \ the\n   diff document chooses *the* appropriate prefix for adding new\n   elements\
    \ to the target document, but in this special case there's\n   more than one.\
    \  These requirements create deterministic behavior for\n   this special and in\
    \ practice rare case:\n   - If the diff document happens to use a prefix that\
    \ is one of the\n     prefixes declared for the same namespace in the evaluation\
    \ context\n     node of the target document, this prefix MUST be used in the\n\
    \     resulting patched document.  An empty evaluable prefix and an\n     existing\
    \ in-scope default namespace declaration means that the\n     default namespace\
    \ MUST be chosen.  In other words, the expanded\n     names are then equal within\
    \ the diff and patched documents.\n         In an <add> operation, the evaluation\
    \ context node is the\n         parent element of the inserted node, for example,\
    \ with a\n         selector \"sel='*/ bar'\" and without a 'pos' attribute directive\n\
    \         (look Section 4.3), it is the <bar> element of the root\n         document\
    \ element.  With modifications of elements, the\n         evaluation context node\
    \ is the parent element of the modified\n         element, and in the previous\
    \ example thus the root document\n         element.\n   - Secondly, the prefix\
    \ (also empty) of the evaluation context node\n     MUST be chosen if the namespace\
    \ URIs are equal.\n   - Lastly, if the above two rules still don't apply, first\
    \ all\n     in-scope namespace prefixes of the evaluation context node are\n \
    \    arranged alphabetically in an ascending order.  If a default\n     namespace\
    \ declaration exists, it is interpreted as the first entry\n     in this list.\
    \  The prefix from the list is then chosen that appears\n     as the closest and\
    \ just before the compared prefix if it were\n     inserted into the list.  If\
    \ the compared prefix were to exist\n     before the first prefix, the first prefix\
    \ in the list MUST be\n     selected (i.e., there's no default namespace).\n \
    \        For example, if the list of in-scope prefixes in the target\n       \
    \  document is \"x\", \"y\" and the compared prefix in the diff\n         document\
    \ is \"xx\", then the \"x\" prefix MUST be chosen.  If an\n         \"a\" prefix\
    \ were evaluated, the \"x\" prefix, the first entry MUST\n         be chosen.\
    \  If there were also an in-scope default namespace\n         declaration, an\
    \ evaluable \"a\" prefix would then select the\n         default declaration.\
    \  Note that unprefixed attributes don't\n         inherit the default namespace\
    \ declaration.  When adding\n         qualified attributes, the default namespace\
    \ declaration is then\n         not on this matching list of prefixes (see Section\
    \ 4.3.2).\n   Note that these requirements might mean that a resulting patched\n\
    \   document could contain unused and/or superfluous namespace\n   declarations.\
    \  The resulting patched document MUST NOT be \"cleaned\n   up\" such that these\
    \ namespace declarations are removed.\n      Note: In practice, the agent constructing\
    \ a diff document can\n      usually freely select the appropriate prefixes for\
    \ the namespace\n      declarations and it doesn't need to know or care about\
    \ the actual\n      prefixes in the target document unless there are overlapping\n\
    \      declarations.  In other words, the diff format content is\n      typically\
    \ independent of the target documents usage of namespace\n      prefixes.  However,\
    \ it may be very useful to know where namespaces\n      are declared in the target\
    \ document.  The most typical use case is\n      such though, that the agent generating\
    \ a diff has both the\n      previous (target) and new (patched) documents available,\
    \ and\n      namespace declarations are thus exactly known.  Note also, that in\n\
    \      a case where the target document is not exactly known, it is\n      allowed\
    \ to use locally scoped namespace declarations, the\n      consequences of which\
    \ are larger and less human-readable patched\n      documents.\n"
- title: 4.3.  <add> Element
  contents:
  - "4.3.  <add> Element\n   The <add> element represents the addition of some new\
    \ content to the\n   target XML document: for example, a new element can be appended\
    \ into\n   an existing element.\n   The new data content exists as the child node(s)\
    \ of the <add>\n   element.  When adding attributes and namespaces, the child\
    \ node of\n   the <add> element MUST be a single text node.  Otherwise, the <add>\n\
    \   element MAY contain any mixture of element, text, comment or\n   processing\
    \ instruction nodes in any order.  All children of the <add>\n   element are then\
    \ copied into a target XML document.  The described\n   namespace mangling procedure\
    \ applies to added elements, which include\n   all of their attribute, namespace\
    \ and descendant nodes.\n   The <add> element type has three attributes: 'sel',\
    \ 'type', and\n   'pos'.\n   The value of the optional 'type' attribute is only\
    \ used when adding\n   attributes and namespaces.  Then, the located target node\
    \ MUST be an\n   element into which new attributes and namespace declarations\
    \ are\n   inserted.  When the value of this 'type' attribute equals \"@attr\"\
    ,\n   the string \"attr\" is the name of the actual attribute being added.\n \
    \  The value of this new 'attr' attribute is the text node content of\n   the\
    \ <add> element.  The less frequently used prefixed (i.e.,\n   namespace-qualified)\
    \ attributes can also be added.  If the value of\n   the 'type' attribute equals\
    \ \"namespace::pref\", \"pref\" is the actual\n   prefix string to be used for\
    \ the namespace declaration in the patched\n   document and the text node content\
    \ of the <add> element contains the\n   corresponding namespace URI.\n      Note:\
    \ The 'type' attribute is thus also an XPath selector, but it\n      only locates\
    \ attributes and namespaces.  Attribute axis\n      \"attribute\" has an abbreviated\
    \ form \"@\" unlike the \"namespace\"\n      axis, which doesn't have an abbreviated\
    \ form.  Double colons \"::\"\n      are used as an axis separator in XPath.\n\
    \   The value of the optional 'pos' attribute indicates the positioning\n   of\
    \ new data content.  It is not used when adding attributes or\n   namespaces.\
    \  When neither 'type' nor 'pos' attribute exist, the\n   children of the <add>\
    \ element are then appended as the last child\n   node(s) of the located target\
    \ element.  When the value of 'pos'\n   attribute is \"prepend\" the new node(s)\
    \ are added as the first child\n   node(s) of the located target element.  With\
    \ the value of \"before\",\n   the added new node(s) MUST be the immediate preceding\
    \ sibling\n   node(s), and with \"after\", the immediate following sibling node(s)\
    \ of\n   the located target node.\n   Some examples follow that describe the use\
    \ cases of these <add>\n   element attributes.  The nodes are not namespace qualified\
    \ and\n   prefixes are therefore not used, and the whole XML diff content is\n\
    \   not shown in these examples, only patch operation elements.  Full\n   examples\
    \ are given in an Appendix A.\n"
- title: 4.3.1.  Adding an Element
  contents:
  - "4.3.1.  Adding an Element\n   An example for an addition of an element:\n   <add\
    \ sel=\"doc\"><foo id=\"ert4773\">This is a new child</foo></add>\n   Once the\
    \ <doc> element has been found from the target XML document, a\n   new <foo> element\
    \ is appended as the last child node of the <doc>\n   element.  The located target\
    \ node: the <doc> element is naturally the\n   root element of the target XML\
    \ document.  The new <foo> element\n   contains an 'id' attribute and a child\
    \ text node.\n"
- title: 4.3.2.  Adding an Attribute
  contents:
  - "4.3.2.  Adding an Attribute\n   An example for an addition of an attribute:\n\
    \   <add sel=\"doc/foo[@id='ert4773']\" type=\"@user\">Bob</add>\n   This operation\
    \ adds a new 'user' attribute to the <foo> element that\n   was located by using\
    \ an 'id' attribute value predicate.  The value of\n   this new 'user' attribute\
    \ is \"Bob\".\n   A similar patched XML document is achieved when using a validating\n\
    \   XML parser, if the 'sel' selector value had been 'id(\"ert4773\")' and\n \
    \  if the data type of the 'id' attribute is \"ID\"\n   [W3C.REC-xmlschema-2-20041028].\n\
    \   Note that with namespace qualified attributes, the prefix matching\n   rules\
    \ within the 'type' attribute are evaluated with similar rules\n   described in\
    \ Section 4.2.3.  Also, note that then the possible\n   default namespace declaration\
    \ of the context element isn't\n   applicable.\n      Note: As the 'sel' selector\
    \ value MAY contain quotation marks,\n      escaped forms: \"&quot;\" or \"&apos;\"\
    \ can be used within attribute\n      values.  However, it is often more appropriate\
    \ to use the\n      apostrophe (') character as shown in these examples.  An\n\
    \      alternative is also to interchange the apostrophes and quotation\n    \
    \  marks.\n"
- title: 4.3.3.  Adding a Prefixed Namespace Declaration
  contents:
  - "4.3.3.  Adding a Prefixed Namespace Declaration\n   An example for an addition\
    \ of a prefixed namespace declaration:\n   <add sel=\"doc\" type=\"namespace::pref\"\
    >urn:ns:xxx</add>\n   This operation adds a new namespace declaration to the <doc>\
    \ element.\n   The prefix of this new namespace node is thus \"pref\" and the\n\
    \   namespace URI is \"urn:ns:xxx\".\n"
- title: 4.3.4.  Adding Node(s) with the 'pos' Attribute
  contents:
  - "4.3.4.  Adding Node(s) with the 'pos' Attribute\n   An example for an addition\
    \ of a comment node:\n   <add\n     sel=\"doc/foo[@id='ert4773']\" pos=\"before\"\
    ><!-- comment --></add>\n   This operation adds a new comment node just before\
    \ the <foo> element\n   as an immediate preceding sibling node.  This is also\
    \ an example how\n   a 'pos' attribute directive can be used.\n"
- title: 4.3.5.  Adding Multiple Nodes
  contents:
  - "4.3.5.  Adding Multiple Nodes\n   Some complexity arises when so-called white\
    \ space text nodes exist\n   within a target XML document.  The XPath 1.0 data\
    \ model requires that\n   a text node MUST NOT have another text node as an immediate\
    \ sibling\n   node.  For instance, if an add operation is like this:\n   <add\
    \ sel=\"doc\">\n     <foo id=\"ert4773\">This is a new child</foo></add>\n   The\
    \ <add> element then has two child nodes: a white space text node\n   (a linefeed\
    \ and two spaces) and a <foo> element.  If the existing\n   last child of the\
    \ <doc> element is a text node, its content and the\n   white space text node\
    \ content MUST then be combined together.\n   Otherwise, (white space) text nodes\
    \ can be added just like elements,\n   and thus, the canonical form of the patched\
    \ XML document easily\n   remains deterministic.  As several sibling nodes can\
    \ be inserted with\n   a single <add> operation, a \"pretty printing\" style can\
    \ easily be\n   maintained.\n   Still another example about the handling of text\
    \ nodes.  Consider\n   this example:\n   <add sel=\"*/foo/text()[2]\" pos=\"after\"\
    >new<bar/>elem</add>\n   The second text node child of the <foo> element is first\
    \ located.\n   The added new content contains two text nodes and an element. \
    \ As\n   there cannot be immediate sibling text nodes, the located target text\n\
    \   node content and the first new text node content MUST be combined\n   together.\
    \  In essence, if the 'pos' value had been \"before\", the\n   second new text\
    \ node content would effectively have been prepended to\n   the located target\
    \ text node.\n      Note: It is still worth noting that text nodes MAY contain\
    \ CDATA\n      sections, the latter of which are not treated as separate nodes.\n\
    \      Once these CDATA sections exist within the new text nodes, they\n     \
    \ SHOULD be moved unaltered to the patched XML document.\n   While XML entities\
    \ [W3C.REC-xml-20060816] cannot be patched with this\n   framework, the references\
    \ to other than predefined internal entities\n   can exist within text nodes or\
    \ attributes when the XML prolog\n   contains those declarations.  These references\
    \ may then be preserved\n   if both the XML diff and the target XML document have\
    \ identical\n   declarations within their prologs.  Otherwise, references may\
    \ be\n   replaced with identical text as long as the \"canonically equivalent\"\
    \n   rule is obeyed.\n"
- title: 4.4.  <replace> Element
  contents:
  - "4.4.  <replace> Element\n   The <replace> element represents a replacement operation:\
    \ for\n   example, an existing element is updated with a new element or an\n \
    \  attribute value is replaced with a new value.  This <replace>\n   operation\
    \ always updates a single node or node content at a time.\n   The <replace> element\
    \ type only has a 'sel' attribute.  If the\n   located target node is an element,\
    \ a comment or a processing\n   instruction, then the child of the <replace> element\
    \ MUST also be of\n   the same type.  Otherwise, the <replace> element MUST have\
    \ text\n   content or it MAY be empty when replacing an attribute value or a\n\
    \   text node content.\n"
- title: 4.4.1.  Replacing an Element
  contents:
  - "4.4.1.  Replacing an Element\n   An example for a replacement of an element:\n\
    \   <replace sel=\"doc/foo[@a='1']\"><bar a=\"2\"/></replace>\n   This will update\
    \ the <foo> element that has an 'a' attribute with\n   value \"1\".  The located\
    \ target element is replaced with the <bar>\n   element.  So all descendant nodes,\
    \ namespace declarations, and\n   attributes of the replaced <foo> element, if\
    \ any existed, are thus\n   removed.\n"
- title: 4.4.2.  Replacing an Attribute Value
  contents:
  - "4.4.2.  Replacing an Attribute Value\n   An example for a replacement of an attribute\
    \ value:\n   <replace sel=\"doc/@a\">new value</replace>\n   This will replace\
    \ the 'a' attribute content of the <doc> element with\n   the value \"new value\"\
    .  If the <replace> element is empty, the 'a'\n   attribute MUST then remain in\
    \ the patched XML document appearing like\n   <doc a=\"\"/>.\n"
- title: 4.4.3.  Replacing a Namespace Declaration URI
  contents:
  - "4.4.3.  Replacing a Namespace Declaration URI\n   An example for a replacement\
    \ of a namespace URI:\n   <replace sel=\"doc/namespace::pref\">urn:new:xxx</replace>\n\
    \   This will replace the URI value of 'pref' prefixed namespace node\n   with\
    \ \"urn:new:xxx\".  The parent node of the namespace declaration\n   MUST be the\
    \ <doc> element, otherwise an error occurs.\n"
- title: 4.4.4.  Replacing a Comment Node
  contents:
  - "4.4.4.  Replacing a Comment Node\n   An example for a replacement of a comment\
    \ node:\n   <replace sel=\"doc/comment()[1]\"><!-- This is the new content\n \
    \  --></replace>\n   This will replace a comment node.  The located target node\
    \ is the\n   first comment node child of the <doc> element.\n"
- title: 4.4.5.  Replacing a Processing Instruction Node
  contents:
  - "4.4.5.  Replacing a Processing Instruction Node\n   An example for a replacement\
    \ of a processing instruction node:\n   <replace sel='doc/processing-instruction(\"\
    test\")'><?test bar=\"foobar\"\n   ?></replace>\n   This will replace the processing\
    \ instruction node \"test\" whose parent\n   is the <doc> element.\n"
- title: 4.4.6.  Replacing a Text Node
  contents:
  - "4.4.6.  Replacing a Text Node\n   An example for a replacement of a text node:\n\
    \   <replace\n   sel=\"doc/foo/text()[1]\">This is the new text content</replace>\n\
    \   This will replace the first text node child of the <foo> element.\n   The\
    \ positional constraint \"[1]\" is not usually needed as the element\n   content\
    \ is rarely of mixed type [W3C.REC-xmlschema-1-20041028] where\n   several text\
    \ node siblings typically exist.\n   If a text node is updated and the <replace>\
    \ element is empty, the\n   text node MUST thus be removed as a text node MUST\
    \ always have at\n   least one character of data.\n"
- title: 4.5.  <remove> Element
  contents:
  - "4.5.  <remove> Element\n   The <remove> element represents a removal operation\
    \ of, for example,\n   an existing element or an attribute.\n   The <remove> element\
    \ type has two attributes: 'sel' and 'ws'.  The\n   value of the optional 'ws'\
    \ attribute is used to remove the possible\n   white space text nodes that exist\
    \ either as immediate following or\n   preceding sibling nodes of the located\
    \ target node.  The usage of\n   'ws' attribute is only allowed when removing\
    \ other types than text,\n   attribute and namespace nodes.  If the value of 'ws'\
    \ is \"before\", the\n   purpose is to remove the immediate preceding sibling\
    \ node that MUST\n   be a white space text node and if the value is \"after\"\
    , the\n   corresponding following node.  If the 'ws' value is \"both\", both the\n\
    \   preceding and following white space text nodes MUST be removed.\n"
- title: 4.5.1.  Removing an Element
  contents:
  - "4.5.1.  Removing an Element\n   An example of a removal of an element including\
    \ all of its\n   descendant, attribute, and namespace nodes:\n   <remove sel=\"\
    doc/foo[@a='1']\" ws=\"after\"/>\n   This will remove the <foo> element as well\
    \ as the immediate following\n   sibling white space text node of the <foo> element.\
    \  If the immediate\n   following sibling node is not a white space text node,\
    \ an error\n   occurs.\n"
- title: 4.5.2.  Removing an Attribute
  contents:
  - "4.5.2.  Removing an Attribute\n   An example for a removal of an attribute node:\n\
    \   <remove sel=\"doc/@a\"/>\n   This will remove the 'a' attribute node from\
    \ the <doc> element.\n"
- title: 4.5.3.  Removing a Prefixed Namespace Declaration
  contents:
  - "4.5.3.  Removing a Prefixed Namespace Declaration\n   An example for a removal\
    \ of a prefixed namespace node:\n   <remove sel=\"doc/foo/namespace::pref\"/>\n\
    \   This will remove the 'pref' prefixed namespace node from the <foo>\n   element.\
    \  Naturally, this prefix MUST NOT be associated with any node\n   prior to the\
    \ removal of this namespace node.  Also, the parent node\n   of this namespace\
    \ declaration MUST be the <foo> element.\n"
- title: 4.5.4.  Removing a Comment Node
  contents:
  - "4.5.4.  Removing a Comment Node\n   An example for a removal of a comment node:\n\
    \   <remove sel=\"doc/comment()[1]\"/>\n   This will remove the first comment\
    \ node child of the <doc> element.\n"
- title: 4.5.5.  Removing a Processing Instruction Node
  contents:
  - "4.5.5.  Removing a Processing Instruction Node\n   An example for a removal of\
    \ a processing instruction node:\n   <remove sel='doc/processing-instruction(\"\
    test\")'/>\n   This will remove the \"test\" processing instruction node child\
    \ of the\n   <doc> element.\n"
- title: 4.5.6.  Removing a Text Node
  contents:
  - "4.5.6.  Removing a Text Node\n   An example for a removal of a text node:\n \
    \  <remove sel=\"doc/foo/text()[1]\"/>\n   This will remove the first text node\
    \ child of the <foo> element.\n   When removing an element, a comment, or a processing\
    \ instruction node\n   that has immediate preceding and following sibling text\
    \ nodes without\n   the 'ws' directive, the content of these two text nodes MUST\
    \ be\n   combined together.  The latter text node thus disappears from the\n \
    \  document.\n"
- title: 5.  Error Handling
  contents:
  - "5.  Error Handling\n   It is an error condition if any of the patch operations\
    \ cannot be\n   unambiguously fulfilled.  In other words, once a particular patch\n\
    \   operation fails, it is an error condition and processing of further\n   patch\
    \ operations is hardly sensible.\n   A new MIME error format is defined for applications\
    \ that require\n   deterministic error handling when patching cannot be applied.\
    \  It is\n   anticipated that these error elements can be used within other MIME\n\
    \   types that allow extension elements.\n"
- title: 5.1.  Error Elements
  contents:
  - "5.1.  Error Elements\n   The root element of the error document is <patch-ops-error>.\
    \  The\n   content of this element is a specific error condition.  Each error\n\
    \   condition is represented by a different element.  This allows for\n   different\
    \ error conditions to provide different data about the nature\n   of the error.\
    \  All error elements support a \"phrase\" attribute, which\n   can contain text\
    \ meant for rendering to a human user.  The optional\n   \"xml:lang\" MAY be used\
    \ to describe the language of the \"phrase\"\n   attribute.  Most of the error\
    \ condition elements are supposed to\n   contain the patch operation element that\
    \ caused the patch to fail.\n   The following error elements are defined by this\
    \ specification:\n   <invalid-attribute-value>:  The validity constraints of 'sel',\n\
    \      'type', 'ws', or 'pos' attribute values MAY be indicated with this\n  \
    \    error, i.e., non-allowable content has been used.  Also, this\n      error\
    \ can be used to indicate if an added or a modified attribute\n      content is\
    \ not valid, for example, CDATA sections were used when a\n      new attribute\
    \ was intended to be added.\n   <invalid-character-set>:  The patch could not\
    \ be applied because the\n      diff and the patched document use different character\
    \ sets.\n   <invalid-diff-format>:  This indicates that the diff body of the\n\
    \      request was not a well-formed XML document or a valid XML document\n  \
    \    according to its schema.\n   <invalid-entity-declaration>:  An entity reference\
    \ was found but\n      corresponding declaration could not be located or resolved.\n\
    \   <invalid-namespace-prefix>:  The namespace URI for the given prefix\n    \
    \  could not be located or resolved, e.g., within the 'sel' attribute\n      a\
    \ prefix was used but its declaration is missing from the target\n      document.\n\
    \   <invalid-namespace-uri>:  The namespace URI value is not valid or the\n  \
    \    target document did not have this declaration.\n   <invalid-node-types>:\
    \  The node types of a <replace> operation did\n      not match, i.e., for example,\
    \ the 'sel' selector locates an\n      element but the replaceable content is\
    \ of text type.  Also, a\n      <replace> operation may locate a unique element,\
    \ but replaceable\n      content had multiple nodes.\n   <invalid-patch-directive>:\
    \  A patch directive could not be fulfilled\n      because the given directives\
    \ were not understood.\n   <invalid-root-element-operation>:  The root element\
    \ of the document\n      cannot be removed or another sibling element for the\
    \ document root\n      element cannot be added.\n   <invalid-xml-prolog-operation>:\
    \  Patch failure related to XML prolog\n      nodes.\n   <invalid-whitespace-directive>:\
    \  A <remove> operation requires a\n      removal of a white space node that doesn't\
    \ exist in the target\n      document.\n   <unlocated-node>:  A single unique\
    \ node (typically an element) could\n      not be located with the 'sel' attribute\
    \ value.  Also, the location\n      of multiple nodes can lead to this error.\n\
    \   <unsupported-id-function>:  The nodeset function id() is not\n      supported,\
    \ and thus attributes with the ID type are not known.\n   <unsupported-xml-id>:\
    \  The attribute xml:id as an ID attribute in XML\n      documents is not supported.\n\
    \   Additional error elements can be indicated within the root\n   <patch-ops-error>\
    \ element from any namespace.  However, the IETF MAY\n   specify additional error\
    \ elements in the\n   \"urn:ietf:params:xml:ns:patch-ops-error\" namespace.\n\
    \   As an example, the following document indicates that it was attempted\n  \
    \ to add a new <note> element with white space into a document, but the\n   parent\
    \ element could not be located:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
    \   <patch-ops-error\n    xmlns:p=\"urn:ietf:params:xml:ns:pidf-diff\"\n    xmlns=\"\
    urn:ietf:params:xml:ns:patch-ops-error\">\n    <unlocated-node\n     phrase=\"\
    a unique node could not be located with the id() function.\"\n     ><p:add sel='id(\"\
    ert4773\")'>\n       <p:note>some text added</p:note>\n     </p:add></unlocated-node>\n\
    \   </patch-ops-error>\n"
- title: 6.  Usage of Patch Operations
  contents:
  - "6.  Usage of Patch Operations\n   An XML diff document SHOULD contain only the\
    \ nodes that have been\n   modified as the intention is to try to reduce bandwidth/storage\n\
    \   requirements.  However, when there's a large collection of changes it\n  \
    \ can be desirable to exchange the full document content instead.  How\n   this\
    \ will be done in practice is beyond the scope of this document.\n   Some applications\
    \ MAY require that the full versioning history MUST\n   be indicated although\
    \ the history had superfluous changes.  This\n   framework doesn't mandate any\
    \ specific behavior, applications MAY\n   decide the appropriate semantics themselves.\
    \  Also, in practice,\n   applications are free to select the proper algorithms\
    \ when generating\n   diff document content.\n"
- title: 7.  Usage of Selector Values
  contents:
  - "7.  Usage of Selector Values\n   It is up to the application to decide what kind\
    \ of selector values to\n   use.  Positional element selectors like \"*/*[3]/*[2]\"\
    \ provide the\n   shortest selectors, but care must to taken when using them.\
    \  When\n   there are several removals of sibling elements, the positional\n \
    \  element indexes change after each update.  Likewise these indexes\n   change\
    \ when new elements are inserted into the tree.  Using names\n   with possible\
    \ attribute predicates like \"doc[@sel='foo']\" is usually\n   easier for an application,\
    \ be it for example an auto diff tool, but\n   it leads to larger diff documents.\n"
- title: 8.  XML Schema Types of Patch Operation Elements
  contents:
  - "8.  XML Schema Types of Patch Operation Elements\n   The schema types for the\
    \ patch operation elements.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n \
    \  <!DOCTYPE schema [\n    <!ENTITY ncname \"\\i\\c*\">\n    <!ENTITY qname  \"\
    (&ncname;:)?&ncname;\">\n    <!ENTITY aname  \"@&qname;\">\n    <!ENTITY pos \
    \   \"\\[\\d+\\]\">\n    <!ENTITY attr   \"\\[&aname;='(.)*'\\]|\\[&aname;=&quot;(.)*&quot;\\\
    ]\">\n    <!ENTITY valueq \"\\[(&qname;|\\.)=&quot;(.)*&quot;\\]\">\n    <!ENTITY\
    \ value  \"\\[(&qname;|\\.)='(.)*'\\]|&valueq;\">\n    <!ENTITY cond   \"&attr;|&value;|&pos;\"\
    >\n    <!ENTITY step   \"(&qname;|\\*)(&cond;)*\">\n    <!ENTITY piq    \"processing-instruction\\\
    ((&quot;&ncname;&quot;)\\)\">\n    <!ENTITY pi     \"processing-instruction\\\
    (('&ncname;')?\\)|&piq;\">\n    <!ENTITY id     \"id\\(('&ncname;')?\\)|id\\((&quot;&ncname;&quot;)?\\\
    )\">\n    <!ENTITY com    \"comment\\(\\)\">\n    <!ENTITY text   \"text\\(\\\
    )\">\n    <!ENTITY nspa   \"namespace::&ncname;\">\n    <!ENTITY cnodes \"(&text;(&pos;)?)|(&com;(&pos;)?)|((&pi;)(&pos;)?)\"\
    >\n    <!ENTITY child  \"&cnodes;|&step;\">\n    <!ENTITY last   \"(&child;|&aname;|&nspa;)\"\
    >\n   ]>\n   <xsd:schema\n        xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\
    \n        elementFormDefault=\"qualified\">\n    <xsd:simpleType name=\"xpath\"\
    >\n     <xsd:restriction base=\"xsd:string\">\n      <xsd:pattern\n       value=\"\
    (/)?((&id;)((/&step;)*(/&last;))?|(&step;/)*(&last;))\"/>\n     </xsd:restriction>\n\
    \    </xsd:simpleType>\n    <xsd:simpleType name=\"xpath-add\">\n     <xsd:restriction\
    \ base=\"xsd:string\">\n      <xsd:pattern\n       value=\"(/)?((&id;)((/&step;)*(/&child;))?|(&step;/)*(&child;))\"\
    />\n     </xsd:restriction>\n    </xsd:simpleType>\n    <xsd:simpleType name=\"\
    pos\">\n     <xsd:restriction base=\"xsd:string\">\n      <xsd:enumeration value=\"\
    before\"/>\n      <xsd:enumeration value=\"after\"/>\n      <xsd:enumeration value=\"\
    prepend\"/>\n     </xsd:restriction>\n    </xsd:simpleType>\n    <xsd:simpleType\
    \ name=\"type\">\n     <xsd:restriction base=\"xsd:string\">\n      <xsd:pattern\
    \ value=\"&aname;|&nspa;\"/>\n     </xsd:restriction>\n    </xsd:simpleType>\n\
    \    <xsd:complexType name=\"add\">\n     <xsd:complexContent mixed=\"true\">\n\
    \      <xsd:restriction base=\"xsd:anyType\">\n       <xsd:sequence>\n       \
    \ <xsd:any processContents=\"lax\" namespace=\"##any\"\n                 minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n       </xsd:sequence>\n       <xsd:attribute name=\"\
    sel\" type=\"xpath-add\"\n                      use=\"required\"/>\n       <xsd:attribute\
    \ name=\"pos\" type=\"pos\"/>\n       <xsd:attribute name=\"type\" type=\"type\"\
    />\n      </xsd:restriction>\n     </xsd:complexContent>\n    </xsd:complexType>\n\
    \    <xsd:complexType name=\"replace\">\n     <xsd:complexContent mixed=\"true\"\
    >\n      <xsd:restriction base=\"xsd:anyType\">\n       <xsd:sequence>\n     \
    \   <xsd:any processContents=\"lax\" namespace=\"##any\"\n                 minOccurs=\"\
    0\" maxOccurs=\"1\"/>\n       </xsd:sequence>\n       <xsd:attribute name=\"sel\"\
    \ type=\"xpath\" use=\"required\"/>\n      </xsd:restriction>\n     </xsd:complexContent>\n\
    \    </xsd:complexType>\n    <xsd:simpleType name=\"ws\">\n     <xsd:restriction\
    \ base=\"xsd:string\">\n      <xsd:enumeration value=\"before\"/>\n      <xsd:enumeration\
    \ value=\"after\"/>\n      <xsd:enumeration value=\"both\"/>\n     </xsd:restriction>\n\
    \    </xsd:simpleType>\n    <xsd:complexType name=\"remove\">\n     <xsd:attribute\
    \ name=\"sel\" type=\"xpath\" use=\"required\"/>\n     <xsd:attribute name=\"\
    ws\" type=\"ws\"/>\n    </xsd:complexType>\n   </xsd:schema>\n"
- title: 9.  XML Schema of Patch Operation Errors
  contents:
  - "9.  XML Schema of Patch Operation Errors\n   The patch operation errors definitions.\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xsd:schema\n       targetNamespace=\"\
    urn:ietf:params:xml:ns:patch-ops-error\"\n       xmlns:tns=\"urn:ietf:params:xml:ns:patch-ops-error\"\
    \n       xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n       elementFormDefault=\"\
    qualified\"\n       attributeFormDefault=\"unqualified\">\n    <!-- This import\
    \ brings in the XML language attribute xml:lang-->\n    <xsd:import namespace=\"\
    http://www.w3.org/XML/1998/namespace\"\n                schemaLocation=\"http://www.w3.org/2001/xml.xsd\"\
    />\n    <!-- ROOT document element for signaling patch-ops errors -->\n    <xsd:element\
    \ name=\"patch-ops-error\">\n     <xsd:complexType>\n      <xsd:sequence>\n  \
    \     <xsd:any namespace=\"##any\" processContents=\"lax\"\n                minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n      </xsd:sequence>\n      <xsd:anyAttribute\
    \ processContents=\"lax\"/>\n     </xsd:complexType>\n    </xsd:element>\n   \
    \ <!-- patch-ops error elements:\n         not intended to be used as root documnet\
    \ elements -->\n    <xsd:element name=\"invalid-attribute-value\"\n          \
    \       type=\"tns:patch-error\"/>\n    <xsd:element name=\"invalid-character-set\"\
    \n                 type=\"tns:patch-error-simple\"/>\n    <xsd:element name=\"\
    invalid-diff-format\"\n                 type=\"tns:patch-error-simple\"/>\n  \
    \  <xsd:element name=\"invalid-entity-declaration\"\n                 type=\"\
    tns:patch-error\"/>\n    <xsd:element name=\"invalid-namespace-prefix\"\n    \
    \             type=\"tns:patch-error\"/>\n    <xsd:element name=\"invalid-namespace-uri\"\
    \n                 type=\"tns:patch-error\"/>\n    <xsd:element name=\"invalid-node-types\"\
    \n                 type=\"tns:patch-error\"/>\n    <xsd:element name=\"invalid-patch-directive\"\
    \n                 type=\"tns:patch-error\"/>\n    <xsd:element name=\"invalid-root-element-operation\"\
    \n                 type=\"tns:patch-error\"/>\n    <xsd:element name=\"invalid-xml-prolog-operation\"\
    \n                 type=\"tns:patch-error\"/>\n    <xsd:element name=\"invalid-whitespace-directive\"\
    \n                 type=\"tns:patch-error\"/>\n    <xsd:element name=\"unlocated-node\"\
    \n                 type=\"tns:patch-error\"/>\n    <xsd:element name=\"unsupported-id-function\"\
    \n                 type=\"tns:patch-error\"/>\n    <xsd:element name=\"unsupported-xml-id\"\
    \n                 type=\"tns:patch-error\"/>\n    <!-- simple patch-ops error\
    \ type  -->\n    <xsd:complexType name=\"patch-error-simple\">\n     <xsd:attribute\
    \ name=\"phrase\" type=\"xsd:string\"/>\n     <xsd:attribute ref=\"xml:lang\"\
    />\n     <xsd:anyAttribute processContents=\"lax\"/>\n    </xsd:complexType>\n\
    \    <!-- error type which includes patch operation -->\n    <xsd:complexType\
    \ name=\"patch-error\">\n     <xsd:sequence>\n      <xsd:any namespace=\"##any\"\
    \ processContents=\"lax\"/>\n     </xsd:sequence>\n     <xsd:attribute name=\"\
    phrase\" type=\"xsd:string\"/>\n     <xsd:attribute ref=\"xml:lang\"/>\n     <xsd:anyAttribute\
    \ processContents=\"lax\"/>\n    </xsd:complexType>\n   </xsd:schema>\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   IANA has completed the following actions:\n   o\
    \  registered a new XML namespace URN according to the procedures of\n      RFC\
    \ 3688 [RFC3688].\n   o  registered a new MIME type 'application/patch-ops-error+xml'\n\
    \      according to the procedures of RFC 4288 [RFC4288] and guidelines\n    \
    \  in RFC 3023 [RFC3023].\n   o  registered two XML Schemas according to the procedures\
    \ of RFC 3688\n      [RFC3688].\n"
- title: 10.1.  URN Sub-Namespace Registration
  contents:
  - "10.1.  URN Sub-Namespace Registration\n   This specification registers a new\
    \ XML namespace, as per the\n   guidelines in RFC 3688 [RFC3688].\n   URI:  The\
    \ URI for this namespace is\n      urn:ietf:params:xml:ns:patch-ops-error\n  \
    \ Registrant Contact:  IETF, SIMPLE working group, (simple@ietf.org),\n      Jari\
    \ Urpalainen (jari.urpalainen@nokia.com).\n   XML:\n   BEGIN\n   <?xml version=\"\
    1.0\"?>\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.0//EN\"\n     \"\
    http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\">\n   <html xmlns=\"http://www.w3.org/1999/xhtml\"\
    >\n   <head>\n     <meta http-equiv=\"content-type\"\n        content=\"text/html;charset=iso-8859-1\"\
    />\n     <title>Patch-Ops Error Namespace</title>\n   </head>\n   <body>\n   \
    \  <h1>Namespace for Patch-Ops Error Documents</h1>\n     <h2>urn:ietf:params:xml:ns:patch-ops-error</h2>\n\
    \     <p>See <a\n     href=\"http://www.rfc-editor.org/rfc/rfc5261.txt\">RFC5261</a>.</p>\n\
    \   </body>\n   </html>\n   END\n"
- title: 10.2.  application/patch-ops-error+xml MIME Type
  contents:
  - "10.2.  application/patch-ops-error+xml MIME Type\n   MIME media type name:  application\n\
    \   MIME subtype name:  patch-ops-error+xml\n   Mandatory parameters:  none\n\
    \   Optional parameters:  Same as charset parameter application/xml as\n     \
    \ specified in RFC 3023 [RFC3023].\n   Encoding considerations:  Same as encoding\
    \ considerations of\n      application/xml as specified in RFC 3023 [RFC3023].\n\
    \   Security considerations:  See Section 10 of RFC 3023 [RFC3023].\n   Interoperability\
    \ considerations:  none.\n   Published specification:  RFC 5261\n   Applications\
    \ which use this media type:  This document type has been\n      used to support\
    \ transport of Patch-Ops errors in RFC 5261.\n   Additional Information:\n   \
    \   Magic Number:  None\n      File Extension:  .xer\n      Macintosh file type\
    \ code:  \"TEXT\"\n      Personal and email address for further information: \
    \ Jari\n         Urpalainen, jari.urpalainen@nokia.com\n      Intended usage:\
    \  COMMON\n      Author/Change controller:  The IETF\n"
- title: 10.3.  Patch-Ops-Types XML Schema Registration
  contents:
  - "10.3.  Patch-Ops-Types XML Schema Registration\n   This section registers a new\
    \ XML Schema, the sole content of which is\n   shown in Section 8.\n      URI:\n\
    \      urn:ietf:params:xml:schema:patch-ops\n      Registrant Contact:\n     \
    \ IETF, SIMPLE working group, <simple@ietf.org>\n      Jari Urpalainen, <jari.urpalainen@nokia.com>\n"
- title: 10.4.  Patch-Ops-Error XML Schema Registration
  contents:
  - "10.4.  Patch-Ops-Error XML Schema Registration\n   This section registers a new\
    \ XML Schema, the sole content of which is\n   shown in Section 9.\n      URI:\n\
    \      urn:ietf:params:xml:schema:patch-ops-error\n      Registrant Contact:\n\
    \      IETF, SIMPLE working group, <simple@ietf.org>\n      Jari Urpalainen, <jari.urpalainen@nokia.com>\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   Security considerations depend very much on\
    \ the application that\n   utilizes this framework.  Since each application will\
    \ have different\n   needs, threat models, and security features, it will be necessary\
    \ to\n   consider these on an application-by-application basis.\n   However, this\
    \ framework utilizes a limited subset of XPath 1.0.\n   Applications may thus\
    \ be vulnerable to XPath injection attacks that\n   can reveal some non-allowable\
    \ content of an XML document.  Injection\n   attacks are most likely with shareable\
    \ resources where access to a\n   resource is limited to only some specific parts\
    \ for a user, contrary\n   to a typical use case of this framework.  To defend\
    \ against those\n   attacks the input MUST be sanitized which can be done, for\
    \ example,\n   by validating the diff formats with these restrictive schemas.\n"
- title: 12.  Acknowledgments
  contents:
  - "12.  Acknowledgments\n   The author would like to thank Lisa Dusseault for her\
    \ efforts\n   including BoF arrangements, comments and editing assistance.  The\n\
    \   author would also like to thank Eva Leppanen, Mikko Lonnfors, Aki\n   Niemi,\
    \ Jonathan Rosenberg, Miguel A. Garcia, Anat Angel, Stephane\n   Bortzmeyer, Dave\
    \ Crocker, Joel Halpern, Jeffrey Hutzelman, David\n   Ward, and Chris Newman for\
    \ their valuable comments and Ted Hardie for\n   his input and support.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [W3C.REC-xml-20060816]\n              Maler, E., Paoli, J., Bray,\
    \ T., Yergeau, F., and C.\n              Sperberg-McQueen, \"Extensible Markup\
    \ Language (XML) 1.0\n              (Fourth Edition)\", World Wide Web Consortium\n\
    \              Recommendation REC-xml-20060816, August 2006,\n              <http://www.w3.org/TR/2006/REC-xml-20060816>.\n\
    \   [W3C.REC-xpath-19991116]\n              DeRose, S. and J. Clark, \"XML Path\
    \ Language (XPath)\n              Version 1.0\", World Wide Web Consortium Recommendation\n\
    \              REC-xpath-19991116, November 1999,\n              <http://www.w3.org/TR/1999/REC-xpath-19991116>.\n\
    \   [W3C.REC-xml-names-20060816]\n              Hollander, D., Bray, T., Layman,\
    \ A., and R. Tobin,\n              \"Namespaces in XML 1.0 (Second Edition)\"\
    , World Wide Web\n              Consortium Recommendation REC-xml-names-20060816,\
    \ August\n              2006,\n              <http://www.w3.org/TR/2006/REC-xml-names-20060816>.\n\
    \   [W3C.REC-xmlschema-1-20041028]\n              Beech, D., Thompson, H., Maloney,\
    \ M., and N. Mendelsohn,\n              \"XML Schema Part 1: Structures Second\
    \ Edition\", World Wide\n              Web Consortium Recommendation REC-xmlschema-1-20041028,\n\
    \              October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-1-20041028>.\n\
    \   [W3C.REC-xml-c14n-20010315]\n              Boyer, J., \"Canonical XML Version\
    \ 1.0\", World Wide Web\n              Consortium Recommendation REC-xml-c14n-20010315,\
    \ March\n              2001,\n              <http://www.w3.org/TR/2001/REC-xml-c14n-20010315>.\n\
    \   [W3C.REC-xmlschema-2-20041028]\n              Malhotra, A. and P. Biron, \"\
    XML Schema Part 2: Datatypes\n              Second Edition\", World Wide Web Consortium\
    \ Recommendation\n              REC-xmlschema-2-20041028, October 2004,\n    \
    \          <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n   [W3C.WD-xml-id-20041109]\n\
    \              Veillard, D., Walsh, N., and J. Marsh, \"xml:id Version\n     \
    \         1.0\", W3C LastCall WD-xml-id-20041109, November 2004.\n   [RFC3629]\
    \  Yergeau, F., \"UTF-8, a transformation format of ISO\n              10646\"\
    , STD 63, RFC 3629, November 2003.\n   [RFC3023]  Murata, M., St. Laurent, S.,\
    \ and D. Kohn, \"XML Media\n              Types\", RFC 3023, January 2001.\n \
    \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n   \
    \           January 2004.\n   [RFC4288]  Freed, N. and J. Klensin, \"Media Type\
    \ Specifications and\n              Registration Procedures\", BCP 13, RFC 4288,\
    \ December 2005.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [W3C.REC-xpath20-20070123]\n              Berglund,\
    \ A., Fernandez, M., Chamberlin, D., Boag, S.,\n              Robie, J., Kay,\
    \ M., and J. Simeon, \"XML Path Language\n              (XPath) 2.0\", World Wide\
    \ Web Consortium Recommendation\n              REC-xpath20-20070123, January 2007,\n\
    \              <http://www.w3.org/TR/2007/REC-xpath20-20070123>.\n   [RFC4825]\
    \  Rosenberg, J., \"The Extensible Markup Language (XML)\n              Configuration\
    \ Access Protocol (XCAP)\", RFC 4825, May 2007.\n   [RFC3265]  Roach, A., \"Session\
    \ Initiation Protocol (SIP)-Specific\n              Event Notification\", RFC\
    \ 3265, June 2002.\n   [RFC5262]  Lonnfors, M., Leppanen, E., Khartabil, H., and\
    \ J.\n              Urpalainen, \"Presence Information Data format (PIDF)\n  \
    \            Extension for Partial Presence\", RFC 5262, September 2008.\n   [SIMPLE-XCAP]\n\
    \              Urpalainen, J. and J. Rosenberg, \"An Extensible Markup\n     \
    \         Language (XML) Document Format for Indicating A Change in\n        \
    \      XML Configuration Access Protocol (XCAP) Resources\", Work\n          \
    \    in Progress, May 2008.\n   [RFC3903]  Niemi, A., Ed., \"Session Initiation\
    \ Protocol (SIP)\n              Extension for Event State Publication\", RFC 3903,\
    \ October\n              2004.\n"
- title: Appendix A.  Informative Examples
  contents:
  - "Appendix A.  Informative Examples\n   All following examples assume an imaginary\
    \ XML diff document\n   including these patch operation elements.\n"
- title: A.1.  Adding an Element
  contents:
  - "A.1.  Adding an Element\n   An example target XML document:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <note>This is a sample document</note>\n\
    \   </doc>\n   An XML diff document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <diff>\n     <add sel=\"doc\"><foo id=\"ert4773\">This is a new child</foo></add>\n\
    \   </diff>\n   A result XML document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <doc>\n     <note>This is a sample document</note>\n   <foo id=\"ert4773\"\
    >This is a new child</foo></doc>\n"
- title: A.2.  Adding an Attribute
  contents:
  - "A.2.  Adding an Attribute\n   An example target XML document:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <note>This is a sample document</note>\n\
    \   <foo id=\"ert4773\">This is a new child</foo></doc>\n   An XML diff document:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <diff>\n     <add sel=\"doc/foo[@id='ert4773']\"\
    \ type=\"@user\">Bob</add>\n   </diff>\n   A result XML document:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <note>This is a sample document</note>\n\
    \   <foo id=\"ert4773\" user=\"Bob\">This is a new child</foo></doc>\n"
- title: A.3.  Adding a Prefixed Namespace Declaration
  contents:
  - "A.3.  Adding a Prefixed Namespace Declaration\n   An example target XML document:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <note>This is a\
    \ sample document</note>\n   <foo id=\"ert4773\">This is a new child</foo></doc>\n\
    \   An XML diff document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <diff>\n\
    \     <add sel=\"doc\" type=\"namespace::pref\">urn:ns:xxx</add>\n   </diff>\n\
    \   A result XML document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  \
    \ <doc xmlns:pref=\"urn:ns:xxx\">\n     <note>This is a sample document</note>\n\
    \   <foo id=\"ert4773\">This is a new child</foo></doc>\n"
- title: A.4.  Adding a Comment Node with the 'pos' Attribute
  contents:
  - "A.4.  Adding a Comment Node with the 'pos' Attribute\n   An example target XML\
    \ document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <note>This\
    \ is a sample document</note>\n   <foo id=\"ert4773\">This is a new child</foo></doc>\n\
    \   An XML diff document:\n"
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <diff>
  contents:
  - "<diff>\n  <add sel=\"doc/foo[@id='ert4773']\" pos=\"before\"><!-- comment --></add>\n"
- title: </diff>
  contents:
  - "</diff>\n   A result XML document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <doc>\n     <note>This is a sample document</note>\n   <!-- comment --><foo\
    \ id=\"ert4773\">This is a new child</foo></doc>\n"
- title: A.5.  Adding Multiple Nodes
  contents:
  - "A.5.  Adding Multiple Nodes\n   An example target XML document:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <note>This is a sample document</note>\n\
    \   </doc>\n   An XML diff document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <diff>\n     <add sel=\"doc\">\n     <foo id=\"ert4773\">This is a new\
    \ child</foo></add>\n   </diff>\n   A result XML document:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <note>This is a sample document</note>\n\
    \     <foo id=\"ert4773\">This is a new child</foo></doc>\n"
- title: A.6.  Replacing an Element
  contents:
  - "A.6.  Replacing an Element\n   An example target XML document:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <foo a=\"1\">This is a sample document</foo>\n\
    \   </doc>\n   An XML diff document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <diff>\n     <replace sel=\"doc/foo[@a='1']\"><bar a=\"2\"/></replace>\n\
    \   </diff>\n   A result XML document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <doc>\n     <bar a=\"2\"/>\n   </doc>\n"
- title: A.7.  Replacing an Attribute Value
  contents:
  - "A.7.  Replacing an Attribute Value\n   An example target XML document:\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc a=\"test\">\n     <foo a=\"1\"\
    >This is a sample document</foo>\n   </doc>\n   An XML diff document:\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <diff>\n     <replace sel=\"doc/@a\"\
    >new value</replace>\n   </diff>\n   A result XML document:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <doc a=\"new value\">\n     <foo a=\"1\">This is\
    \ a sample document</foo>\n   </doc>\n"
- title: A.8.  Replacing a Namespace Declaration URI
  contents:
  - "A.8.  Replacing a Namespace Declaration URI\n   An example target XML document:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc xmlns:pref=\"urn:test\"\
    >\n     <foo a=\"1\">This is a sample document</foo>\n   </doc>\n   An XML diff\
    \ document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <diff>\n     <replace\
    \ sel=\"doc/namespace::pref\">urn:new:xxx</replace>\n   </diff>\n   A result XML\
    \ document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc xmlns:pref=\"\
    urn:new:xxx\">\n     <foo a=\"1\">This is a sample document</foo>\n   </doc>\n"
- title: A.9.  Replacing a Comment Node
  contents:
  - "A.9.  Replacing a Comment Node\n   An example target XML document:\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc xmlns:pref=\"urn:test\">\n   \
    \  <foo a=\"1\">This is a sample document</foo>\n     <!-- comment -->\n   </doc>\n\
    \   An XML diff document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <diff>\n\
    \     <replace sel=\"doc/comment()[1]\"><!-- This is the new content\n      --></replace>\n\
    \   </diff>\n   A result XML document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <doc xmlns:pref=\"urn:test\">\n     <foo a=\"1\">This is a sample document</foo>\n\
    \     <!-- This is the new content\n      -->\n   </doc>\n"
- title: A.10.  Replacing a Processing Instruction Node
  contents:
  - "A.10.  Replacing a Processing Instruction Node\n   An example target XML document:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <foo a=\"1\">This\
    \ is a sample document</foo>\n     <?test foo=\"bar\"?>\n   </doc>\n   An XML\
    \ diff document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <diff>\n \
    \    <replace sel='doc/processing-instruction(\"test\")'\n       ><?test bar=\"\
    foobar\"?></replace>\n   </diff>\n   A result XML document:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <foo a=\"1\">This is a sample document</foo>\n\
    \     <?test bar=\"foobar\"?>\n   </doc>\n"
- title: A.11.  Replacing a Text Node
  contents:
  - "A.11.  Replacing a Text Node\n   An example target XML document:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <foo a=\"1\">This is a sample document</foo>\n\
    \   </doc>\n   An XML diff document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <diff>\n    <replace sel=\"doc/foo/text()[1]\"\n      >This is the new\
    \ text content</replace></diff>\n   A result XML document:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <foo a=\"1\">This is the new text content</foo>\n\
    \   </doc>\n"
- title: A.12.  Removing an Element
  contents:
  - "A.12.  Removing an Element\n   An example target XML document:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <foo a=\"1\">This is a sample document</foo>\n\
    \   </doc>\n   An XML diff document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <diff>\n    <remove sel=\"doc/foo[@a='1']\" ws=\"after\"/>\n   </diff>\n\
    \   A result XML document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  \
    \ <doc>\n     </doc>\n"
- title: A.13.  Removing an Attribute
  contents:
  - "A.13.  Removing an Attribute\n   An example target XML document:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <doc a=\"foo\">\n     <foo a=\"1\">This is a sample\
    \ document</foo>\n   </doc>\n   An XML diff document:\n   <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\"?>\n   <diff>\n    <remove sel=\"doc/@a\"/>\n   </diff>\n\
    \   A result XML document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  \
    \ <doc>\n     <foo a=\"1\">This is a sample document</foo>\n   </doc>\n"
- title: A.14.  Removing a Prefixed Namespace Declaration
  contents:
  - "A.14.  Removing a Prefixed Namespace Declaration\n   An example target XML document:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <foo a=\"1\" xmlns:pref=\"\
    urn:test\"\n      >This is a sample document</foo>\n     <!-- comment -->\n  \
    \ </doc>\n   An XML diff document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <diff>\n     <remove sel=\"doc/foo/namespace::pref\"/>\n   </diff>\n  \
    \ A result XML document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n\
    \     <foo a=\"1\">This is a sample document</foo>\n     <!-- comment -->\n  \
    \ </doc>\n"
- title: A.15.  Removing a Comment Node
  contents:
  - "A.15.  Removing a Comment Node\n   An example target XML document:\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <foo a=\"1\">This is a\
    \ sample document</foo>\n     <!-- comment -->\n   </doc>\n   An XML diff document:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <diff>\n     <remove sel=\"\
    doc/comment()[1]\" ws=\"after\"/>\n   </diff>\n   A result XML document:\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <foo a=\"1\">This is a\
    \ sample document</foo>\n     </doc>\n"
- title: A.16.  Removing a Processing Instruction Node
  contents:
  - "A.16.  Removing a Processing Instruction Node\n   An example target XML document:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <foo a=\"1\">This\
    \ is a sample document</foo>\n     <?test?>\n   </doc>\n   An XML diff document:\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <diff>\n     <remove sel='doc/processing-instruction(\"\
    test\")'/>\n   </diff>\n   A result XML document:\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <doc>\n     <foo a=\"1\">This is a sample document</foo>\n   </doc>\n"
- title: A.17.  Removing a Text Node
  contents:
  - "A.17.  Removing a Text Node\n   An example target XML document:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <doc>\n     <foo a=\"1\">This is a sample document</foo>\n\
    \   </doc>\n   An XML diff document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <diff>\n     <remove sel=\"doc/foo/text()[1]\"/>\n   </diff>\n   A result\
    \ XML document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <doc>\n   \
    \  <foo a=\"1\"/>\n   </doc>\n"
- title: A.18.  Several Patches With Namespace Mangling
  contents:
  - "A.18.  Several Patches With Namespace Mangling\n   An example target XML document\
    \ where namespace qualified elements\n   exist:\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <doc xmlns=\"urn:ietf:params:xml:ns:xxx\"\n        xmlns:z=\"urn:ietf:params:xml:ns:yyy\"\
    >\n     <note>This is a sample document</note>\n     <elem a=\"foo\">\n      \
    \ <child/>\n     </elem>\n     <elem a=\"bar\">\n       <z:child/>\n     </elem>\n\
    \   </doc>\n   An imaginary XML diff document where prefix \"p\" corresponds the\n\
    \   targetNamespace of this imaginary schema:\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <p:diff xmlns=\"urn:ietf:params:xml:ns:xxx\"\n           xmlns:y=\"\
    urn:ietf:params:xml:ns:yyy\"\n           xmlns:p=\"urn:ietf:params:xml:ns:diff\"\
    >\n   <p:add sel=\"doc/elem[@a='foo']\">  <!-- This is a new child -->\n     \
    \  <child id=\"ert4773\">\n         <y:node/>\n       </child>\n     </p:add>\n\
    \   <p:replace sel=\"doc/note/text()\">Patched doc</p:replace>\n   <p:remove sel=\"\
    */elem[@a='bar']/y:child\" ws=\"both\"/>\n   <p:add sel=\"*/elem[@a='bar']\" type=\"\
    @b\">new attr</p:add>\n   </p:diff>\n   One possible form of the result XML document\
    \ after applying the\n   patches:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <doc xmlns=\"urn:ietf:params:xml:ns:xxx\"\n        xmlns:z=\"urn:ietf:params:xml:ns:yyy\"\
    >\n     <note>Patched doc</note>\n     <elem a=\"foo\">\n       <child/>\n   \
    \    <!-- This is a new child -->\n       <child id=\"ert4773\">\n         <z:node/>\n\
    \       </child>\n     </elem>\n     <elem a=\"bar\" b=\"new attr\"/>\n   </doc>\n\
    \   The <node> and removed <child> element prefixes within the XML diff\n   document\
    \ are different than what are the \"identical\" namespace\n   declarations in\
    \ the target XML document.  If the target XML document\n   had used a prefixed\
    \ namespace declaration instead of the default one,\n   the XML diff document\
    \ could still have been the same.  The added new\n   qualified elements would\
    \ just have inherited that prefix.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jari Urpalainen\n   Nokia\n   Itamerenkatu 11-13\n   Helsinki\
    \  00180\n   Finland\n   Phone: +358 7180 37686\n   EMail: jari.urpalainen@nokia.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
