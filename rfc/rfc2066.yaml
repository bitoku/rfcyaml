- title: __initial_text__
  contents:
  - '                         TELNET CHARSET Option

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a mechanism for passing character set and\n\
    \   translation information between a TELNET client and server.  Use of\n   this\
    \ mechanism enables an application used by a TELNET user to send\n   and receive\
    \ data in the correct character set.\n   Either side can (subject to option negotiation)\
    \ at any time request\n   that a (new) character set be used.\n"
- title: 1.   Command Names and Codes
  contents:
  - "1.   Command Names and Codes\n   As a convenience, standard TELNET text and codes\
    \ for commands used in\n   this document are reproduced here (excerpted from [1]):\n\
    \      All TELNET commands consist of at least a two byte sequence:  the\n   \
    \   \"Interpret as Command\" (IAC) escape character followed by the code\n   \
    \   for the command.  The commands dealing with option negotiation are\n     \
    \ three byte sequences, the third byte being the code for the option\n      referenced.\
    \ ... [O]nly the IAC need be doubled to be sent as data,\n      and the other\
    \ 255 codes may be passed transparently.  The\n      following are [some of] the\
    \ defined TELNET commands.  Note that\n      these codes and code sequences have\
    \ the indicated meaning only\n      when immediately preceded by an IAC.\n   \
    \   NAME          CODE  MEANING\n      SE            240   End of subnegotiation\
    \ parameters.\n      SB            250   Indicates that what follows is\n    \
    \                      subnegotiation of the indicated\n                     \
    \     option.\n      WILL          251   Indicates the desire to begin\n     \
    \                     performing, or confirmation that\n                     \
    \     you are now performing, the\n                          indicated option.\n\
    \      WON'T         252   Indicates the refusal to perform,\n               \
    \           or continue performing, the\n                          indicated option.\n\
    \      DO            253   Indicates the request that the\n                  \
    \        other party perform, or\n                          confirmation that\
    \ you are expecting\n                          the other party to perform, the\n\
    \                          indicated option.\n      DON'T         254   Indicates\
    \ the demand that the other\n                          party stop performing,\
    \ or\n                          confirmation that you are no longer\n        \
    \                  expecting the other party to\n                          perform,\
    \ the indicated option.\n      IAC          255    Data Byte 255.\n"
- title: 2.   Command Meanings
  contents:
  - "2.   Command Meanings\n   A very simple meta-syntax is used, where most tokens\
    \ represent\n   previously defined items (such as IAC); angle-brackets (\"<>\"\
    ) are\n   used for items to be further defined; curly-braces (\"{}\") are used\n\
    \   around optional items; ellipses represent repeated sequences of\n   items;\
    \ and quotes are used for literal strings.\n   IAC WILL CHARSET\n     The sender\
    \ REQUESTS permission to, or AGREES to, use\n     CHARSET option subnegotiation\
    \ to choose a character set.\n   IAC WON'T CHARSET\n      The sender REFUSES to\
    \ use CHARSET option subnegotiation\n      to choose a character set.\n    IAC\
    \ DO CHARSET\n      The sender REQUESTS that, or AGREES to have, the other\n \
    \     side use CHARSET option subnegotiation to choose a\n      character set.\n\
    \   IAC DON'T CHARSET\n      The sender DEMANDS that the other side not use the\n\
    \      CHARSET option subnegotiation.\n   IAC SB CHARSET REQUEST { \"[TTABLE ]\"\
    \ <Version> } <char set\n   list> IAC SE\n      Char set list:\n      <sep> <character\
    \ set> { ... <sep> <character set> }\n   This message initiates a new CHARSET\
    \ subnegotiation.  It can only be\n   sent by a side that has received a DO CHARSET\
    \ message and sent a WILL\n   CHARSET message (in either order).\n   The sender\
    \ requests that all text sent to and by it be encoded in one\n   of the specified\
    \ character sets.\n   If the string [TTABLE] appears, the sender is willing to\
    \ accept a\n   mapping (translation table) between any character set listed in\
    \ <char\n   set list> and any character set desired by the receiver.\n   <Version>\
    \  is an octet whose binary value is the highest version\n   level of the TTABLE-IS\
    \ message which can be sent in response.  This\n   field must not be zero.  See\
    \ the TTABLE-IS message for the permitted\n   version values.\n   <Char set list>\
    \  is a sequence of 7-BIT ASCII printable characters.\n   The first octet defines\
    \ the separator character (which must not\n   appear within any character set).\
    \  It is terminated by the IAC SE\n   sequence.  Case is not significant.  It\
    \ consists of one or more\n   character sets.  The character sets should appear\
    \ in order of\n   preference (most preferred first).\n   <Sep>  is a separator\
    \ octet, the value of which is chosen by the\n   sender.  Examples include a space\
    \ or a semicolon.  Any value other\n   than IAC is allowed.  The obvious choice\
    \ is a space or any other\n   punctuation symbol which does not appear in any\
    \ of the character set\n   names.\n   <Character set>  is a sequence of 7-BIT\
    \ ASCII printable characters.\n   Case is not significant.\n   If a requested\
    \ character set name does not start with \"X-\" or \"x-\",\n   it MUST be registered\
    \ with the Internet Assigned Number Authority\n   (IANA) [2].\n   The receiver\
    \ responds in one of four ways:\n   If the receiver is already sending text to\
    \ and expecting text from\n   the sender to be encoded in one of the specified\
    \ character sets, it\n   sends a positive acknowledgment (CHARSET ACCEPTED); it\
    \ MUST NOT\n   ignore the message.  (Although ignoring the message is perhaps\n\
    \   suggested by some interpretations of the relevant RFCs ([1], [3]), in\n  \
    \ the interests of determinacy it is not permitted.  This ensures that\n   the\
    \ issuer does not need to time out and infer a response, while\n   avoiding (because\
    \ there is no response to a positive acknowledgment)\n   the non-terminating subnegotiation\
    \ which is the rationale in the RFCs\n   for the non-response behavior.)\n   If\
    \ the receiver is capable of handling at least one of the specified\n   character\
    \ sets, it can respond with a positive acknowledgment for one\n   of the requested\
    \ character sets.  Normally, it should pick the first\n   set it is capable of\
    \ handling but may choose one based on its own\n   preferences.  After doing so,\
    \ each side MUST encode subsequent text\n   in the specified character set.\n\
    \   If the string [TTABLE] is present, and the receiver prefers to use a\n   character\
    \ set not included in <char set list>, and is capable of\n   doing so, it can\
    \ send a translate table (TTABLE-IS) response.\n   If the receiver is not capable\
    \ of handling any of the specified\n   character sets, it sends a negative acknowledgment\
    \ (CHARSET\n   REJECTED).\n   Because it is not valid to reply to a CHARSET REQUEST\
    \ message with\n   another CHARSET REQUEST message, if a CHARSET REQUEST message\
    \ is\n   received after sending one, it means that both sides have sent them\n\
    \   simultaneously.  In this case, the server side MUST issue a negative\n   acknowledgment.\
    \  The client side MUST respond to the one from the\n   server.\n   IAC SB CHARSET\
    \ ACCEPTED <Charset> IAC SE\n      This is a positive acknowledgment response\
    \ to a CHARSET REQUEST\n      message; the receiver of the CHARSET REQUEST message\
    \ acknowledges\n      its receipt and accepts the indicated character set.\n \
    \     <Charset> is a character sequence identical to one of the\n      character\
    \ sets in the CHARSET REQUEST message.  It is terminated\n      by the IAC SE\
    \ sequence.\n      Text messages which follow this response must now be coded\
    \ in the\n      indicated character set.  This message terminates the current\n\
    \      CHARSET subnegotiation.\n   IAC SB CHARSET REJECTED IAC SE\n      This\
    \ is a negative acknowledgment response to a CHARSET REQUEST\n      message; the\
    \ receiver of the CHARSET REQUEST message acknowledges\n      its receipt but\
    \ refuses to use any of the requested character\n      sets.  Messages can not\
    \ be sent in any of the indicated character\n      sets.  This message can also\
    \ be sent by the sender of a TTABLE-IS\n      message, if multiple TTABLE-NAK\
    \ messages were sent in response.\n      This message terminates the current CHARSET\
    \ subnegotiation.\n   IAC SB CHARSET TTABLE-IS <version> <syntax for version>\
    \ IAC SE\n      In response to a CHARSET REQUEST message in which [TTABLE] was\n\
    \      specified, the receiver of the CHARSET REQUEST message\n      acknowledges\
    \ its receipt and is transmitting a pair of tables\n      which define the mapping\
    \ between specified character sets.\n      <Version> is an octet whose binary\
    \ value is the version level of\n      this TTABLE-IS message.  Different versions\
    \ have different syntax.\n      The lowest version level is one (zero is not valid).\
    \  The current\n      highest version level is also one.  This field is provided\
    \ so that\n      future versions of the TTABLE-SEND message can be specified,\
    \ for\n      example, to handle character sets for which there is no simple\n\
    \      one-to-one character-for-character translation.  This might\n      include\
    \ some forms of multi-octet character sets for which\n      translation algorithms\
    \ or subsets need to be sent.\n   Syntax for Version 1:\n      <sep> <char set\
    \ name 1> <sep> < char size 1> < char count 1> <char\n      set name 2> <sep>\
    \ <char size 2> <char count 2> <map 1> <map 2>\n      <Sep>  is a separator octet,\
    \ the value of which is chosen by the\n      sender.  Examples include a space\
    \ or a semicolon.  Any value other\n      than IAC is allowed.  The obvious choice\
    \ is a space or any other\n      punctuation symbol which does not appear in either\
    \ of the\n      character set names.\n      <Char set name 1> and <Char set name\
    \ 2>  are sequences of 7-BIT\n      ASCII printable characters which identify\
    \ the two character sets\n      for which a mapping is being specified.  Each\
    \ is terminated by\n      <sep>.  Case is not significant.  If a character set\
    \ name does not\n      start with \"X-\" or \"x-\", it MUST be registered with\
    \ IANA.  <Char\n      set name 1> MUST be chosen from the <char set list> in the\
    \ CHARSET\n      REQUEST message.  <Char set name 2> can be arbitrarily chosen.\n\
    \      Text on the wire MUST be encoded using <char set name 2>.\n      <Char\
    \ size 1>  and <char size 2>  are single octets each.  The\n      binary value\
    \ of the  octet is the number of bits nominally\n      required for each character\
    \ in the corresponding table.  It SHOULD\n      be a multiple of eight.\n    \
    \  <Char count 1> and <char count 2>  are each three-octet binary\n      fields\
    \ in Network Byte Order [6].  Each specifies how many\n      characters (of the\
    \ maximum 2**<char size>) are being transmitted\n      in the corresponding map.\n\
    \      <Map1> and <Map 2>  each consist of the corresponding <char count>\n  \
    \    number of characters.  These characters form a mapping from all or\n    \
    \  part of the characters in one of the specified character sets to\n      the\
    \ correct characters in the other character set.  If the\n      indicated <char\
    \ count> is less than  2**<char size>, the first\n      <char count> characters\
    \ are being mapped, and the remaining\n      characters are assumed to not be\
    \ changed (and thus map to\n      themselves).  That is, each map contains characters\
    \ 0 through\n      <char count> -1.  <Map 1> maps from <char set name 1> to <char\
    \ set\n      name 2>.  <Map 2> maps from <char set name 2> to <char set name\n\
    \      1>.  Translation between the character sets is thus an obvious\n      process\
    \ of using the binary value of a character as an index into\n      the appropriate\
    \ map.  The character at that index replaces the\n      original character.  If\
    \ the index exceeds the <char count> for the\n      map, no translation is performed\
    \ for the character.\n      [Note to implementers: since TELNET works in octets,\
    \ it is\n      possible for octets of value 255 to appear \"spontaneously\" when\n\
    \      using multi-octet or non-8-bit characters.  All octets of value\n     \
    \ 255 (other than IAC) MUST be quoted to conform with TELNET\n      requirements.\
    \  This applies even to octets within a table, or text\n      in a multi-octet\
    \ character set.]\n   IAC SB CHARSET TTABLE-ACK IAC SE\n      The sender acknowledges\
    \ the successful receipt of the translate\n      table.  Text messages which follow\
    \ this response must now be coded\n      in the character set specified as <char\
    \ set name 2> of the\n      TTABLE-IS message.  This message terminates the current\
    \ CHARSET\n      subnegotiation.\n   IAC SB CHARSET TTABLE-NAK IAC SE\n      The\
    \ sender reports the unsuccessful receipt of the translate table\n      and requests\
    \ that it be resent.  If subsequent transmission\n      attempts also fail, a\
    \ TTABLE-REJECTED or CHARSET REJECTED message\n      (depending on which side\
    \ sends it) should be sent instead of\n      additional futile TTABLE-IS and TTABLE-NAK\
    \ messages.\n   IAC SB CHARSET TTABLE-REJECTED IAC SE\n      In response to a\
    \ TTABLE-IS message, the receiver of the TTABLE-IS\n      message acknowledges\
    \ its receipt and indicates it is unable to\n      handle it.  This message terminates\
    \ the current CHARSET\n      subnegotiation.\n      Any system which supports\
    \ the CHARSET option MUST fully support\n      the CHARSET REQUEST, ACCEPTED,\
    \ REJECTED, and TTABLE-REJECTED\n      subnegotiation messages.  It MAY optionally\
    \ fully support the\n      TTABLE-IS, TTABLE-ACK, and TTABLE-NAK messages.  If\
    \ it does fully\n      support the TTABLE-IS message, it MUST also fully support\
    \ the\n      TTABLE-ACK and TTABLE-NAK messages.\n"
- title: 3.   Default
  contents:
  - "3.   Default\n   WON'T CHARSET\n   DON'T CHARSET\n"
- title: 4.   Motivation for the Option
  contents:
  - "4.   Motivation for the Option\n   Many TELNET sessions need to transmit data\
    \ which is not in 7-bit\n   ASCII.  This is usually done by negotiating BINARY,\
    \ and using local\n   conventions (or terminal type kluges) to determine the character\
    \ set\n   of the data.  However, such methods tend not to interoperate well,\n\
    \   and have difficulties when multiple character sets need to be\n   supported\
    \ by different sessions.\n   Many computer systems now utilize a variety of character\
    \ sets.\n   Increasingly, a server computer needs to document character sets or\n\
    \   translate transmissions and receptions using different pairs of\n   character\
    \ sets on a per-application or per-connection basis.  This is\n   becoming more\
    \ common as client and server computers become more\n   geographically disperse.\
    \  (And as servers are consolidated into\n   ever-larger hubs, serving ever-wider\
    \ areas.)  In order for files,\n   databases, etc. to contain correct data, the\
    \ server must determine\n   the character set in which the user is sending, and\
    \ the character set\n   in which the application expects to receive.\n   In some\
    \ cases, it is sufficient to determine the character set of the\n   end user (because\
    \ every application on the server expects to use the\n   same character set, or\
    \ because applications can handle the user's\n   character set), but in other\
    \ cases different server applications\n   expect to use different character sets.\
    \  In the former case, an\n   initial CHARSET subnegotiation suffices.  In the\
    \ latter case, the\n   server may need to initiate additional CHARSET subnegotiations\
    \ as the\n   user switches between applications.\n   At a minimum, the option\
    \ described in this memo allows both sides to\n   be clear as to which character\
    \ set is being used.  A minimal\n   implementation would have the server send\
    \ DO CHARSET, and the client\n   send WILL CHARSET and CHARSET REQUEST.  The server\
    \ could then\n   communicate the client's character set to applications using\
    \ whatever\n   means are appropriate.  Such a server might refuse subsequent CHARSET\n\
    \   REQUEST messages from the client (if it lacked the ability to\n   communicate\
    \ changed character set information to applications, for\n   example).  Another\
    \ system might have a method whereby various\n   applications could communicate\
    \ to the TELNET server their character\n   set needs and abilities, which the\
    \ server would handle by initiating\n   new CHARSET REQUEST negotiations as appropriate.\n\
    \   In some cases, servers may have a large set of clients which tend to\n   connect\
    \ often (such as daily) and over a long period of time (such as\n   years).  The\
    \ server administrators may strongly prefer that the\n   servers not do character\
    \ set translation (to save CPU cycles when\n   serving very large numbers of users).\
    \  To avoid manually configuring\n   each copy of the user TELNET software, the\
    \ administrators might\n   prefer that the software supports translate tables.\
    \  (If the client\n   software received a translate table from the server and\
    \ stored it,\n   the table would only need to be sent once.)\n"
- title: 5.   Description of the Option
  contents:
  - "5.   Description of the Option\n   When the client TELNET program is able to\
    \ determine the user's\n   character set it should offer to specify the character\
    \ set by sending\n   IAC WILL CHARSET.\n   If the server system is able to make\
    \ use of this information, it\n   replies with IAC DO CHARSET.  The client TELNET\
    \ is then free to\n   request a character set in a subnegotiation at any time.\n\
    \   Likewise, when the server is able to determine the expected character\n  \
    \ set(s) of the user's application(s), it should send  IAC DO CHARSET\n   to request\
    \ that the client system specify the character set it is\n   using.  Or the server\
    \ could send IAC WILL CHARSET to offer to specify\n   the character sets.\n  \
    \ Once a character set has been determined, the server can either\n   perform\
    \ the translation between the user and application character\n   sets itself,\
    \ or request by additional CHARSET subnegotiations that\n   the client system\
    \ do so.\n   Once it has been established that both sides are capable of character\n\
    \   set negotiation (that is, each side has received either a WILL\n   CHARSET\
    \ or a DO CHARSET message, and has also sent either a DO\n   CHARSET or a WILL\
    \ CHARSET message), subnegotiations can be requested\n   at any time by whichever\
    \ side has sent a WILL CHARSET message and\n   also received a DO CHARSET message\
    \ (this may be either or both\n   sides).  Once a CHARSET subnegotiation has started,\
    \ it must be\n   completed before additional CHARSET subnegotiations can be started\n\
    \   (there must never be more than one CHARSET subnegotiation active at\n   any\
    \ given time).  When a subnegotiation has completed, additional\n   subnegotiations\
    \ can be started at any time.\n   If either side violates this rule and attempts\
    \ to start a CHARSET\n   subnegotiation while one is already active, the other\
    \ side MUST\n   reject the new subnegotiation by sending a CHARSET REJECTED message.\n\
    \   Receipt of a CHARSET REJECTED or TTABLE-REJECTED message terminates\n   the\
    \ subnegotiation, leaving the character set unchanged.  Receipt of\n   a CHARSET\
    \ ACCEPTED or TTABLE-ACK message terminates the\n   subnegotiation, with the new\
    \ character set in force.\n   In some cases, both the server and the client systems\
    \ are able to\n   perform translations and to send and receive in the character\
    \ set(s)\n   expected by the other side.  In such cases, either side can request\n\
    \   that the other use the character set it prefers.  When both sides\n   simultaneously\
    \ make such a request (send CHARSET REQUEST messages),\n   the server MUST reject\
    \ the client's request by sending a CHARSET\n   REJECTED message.  The client\
    \ system MUST respond to the server's\n   request.  (See the CHARSET REQUEST description,\
    \ above.)\n   When the client system makes the request first, and the server is\n\
    \   able to handle the requested character set(s), but prefers that the\n   client\
    \ system instead use the server's (user application) character\n   set, it may\
    \ reject the request, and issue a CHARSET REQUEST of its\n   own.  If the client\
    \ system is unable to comply with the server's\n   preference and issues a CHARSET\
    \ REJECTED message, the server can\n   issue a new CHARSET REQUEST message for\
    \ one of the previous character\n   sets (one of those which the client system\
    \ originally requested).\n   The client system would obviously accept this character\
    \ set.\n   While a CHARSET subnegotiation is in progress, data SHOULD be queued.\n\
    \   Once the CHARSET subnegotiation has terminated, the data can be sent\n   (in\
    \ the correct character set).\n   Note that regardless of CHARSET negotiation,\
    \ translation only applies\n   to text (not commands), and only occurs when in\
    \ BINARY mode [4].  If\n   not in BINARY mode, all data is assumed to be in NVT\
    \ ASCII [1].\n   Also note that the CHARSET option should be used with the END\
    \ OF\n   RECORD option [5] for block-mode terminals in order to be clear on\n\
    \   what character represents the end of each record.\n   As an example of character\
    \ set negotiation, consider a user on a\n   workstation using TELNET to communicate\
    \ with a server.  In this\n   example, the workstation normally uses the Cyrillic\
    \ (ASCII) character\n   set [2] but is capable of using EBCDIC-Cyrillic [2], and\
    \ the server\n   normally uses EBCDIC-Cyrillic.  The server could handle the (ASCII)\n\
    \   Cyrillic character set, but prefers that instead the client system\n   uses\
    \ the EBCDIC-Cyrillic character set.  (This and the following\n   examples do\
    \ not show the full syntax of the subnegotiation messages.)\n                \
    \ CLIENT                        SERVER\n             WILL CHARSET            \
    \       WILL CHARSET\n             DO CHARSET                     DO CHARSET\n\
    \             CHARSET REQUEST Cyrillic\n                 EBCDIC-Cyrillic\n   \
    \                                         CHARSET ACCEPTED EBCDIC-\n         \
    \                                      Cyrillic\n   Now consider a case where\
    \ the workstation can't handle EBCDIC-\n   Cyrillic, but can accept a translate\
    \ table:\n                 CLIENT                        SERVER\n            \
    \  WILL CHARSET                   WILL CHARSET\n              DO CHARSET     \
    \                DO CHARSET\n              CHARSET REQUEST [TTABLE] 1\n      \
    \           Cyrillic\n                                             CHARSET TTABLE-IS\
    \ 1 Cyrillic\n                                               EBCDIC-Cyrillic\n\
    \              CHARSET TTABLE-ACK\n   For another example, consider a case similar\
    \ to the previous case,\n   but now the user switches server applications in the\
    \ middle of the\n   session (denoted by ellipses), and the new application requires\
    \ a\n   different character set:\n                CLIENT                     \
    \   SERVER\n              WILL CHARSET                   WILL CHARSET\n      \
    \        DO CHARSET                     DO CHARSET\n              CHARSET REQUEST\
    \ [TTABLE] 1\n                 Cyrillic EBCDIC-INT\n                         \
    \                    CHARSET TTABLE-IS 1 Cyrillic\n                          \
    \                     EBCDIC-Cyrillic\n              CHARSET TTABLE-ACK\n    \
    \          . . .                          . . .\n                            \
    \                 CHARSET REQUEST EBCDIC-INT\n              CHARSET ACCEPTED EBCDIC-INT\n"
- title: 6.   Security Considerations
  contents:
  - "6.   Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 7.   References
  contents:
  - "7.   References\n   [1] Postel, J. and J. Reynolds, \"Telnet Protocol\n     \
    \  Specification\", STD 8, RFC 854, ISI, May 1983.\n   [2] Reynolds, J., and J.\
    \ Postel, \"Assigned Numbers\",\n       STD 2, RFC 1700, ISI, October 1994.\n\
    \   [3] Postel, J. and J. Reynolds, \"Telnet Option\n       Specifications\",\
    \ STD 8, RFC 855, ISI, May 1983.\n   [4] Postel, J. and J. Reynolds, \"Telnet\
    \ Binary\n       Transmission\", STD 27, RFC 856, ISI, May 1983.\n   [5] Postel,\
    \ J., \"Telnet End-Of-Record Option\", RFC 885,\n       ISI, December 1983.\n\
    \   [6] Postel, J., \"Internet Official Protocol Standards\",\n       STD 1, RFC\
    \ 1920, IAB, March 1996.\n"
- title: 8.   Author's Address
  contents:
  - "8.   Author's Address\n   Randall Gellens\n   Unisys Corporation\n   25725 Jeronimo\
    \ Road\n   Mail Stop 237\n   Mission Viejo, CA  92691\n   USA\n   Phone:  +1.714.380.6350\n\
    \   Fax:    +1.714.380.5912\n   EMail:  Randy@MV.Unisys.Com\n"
