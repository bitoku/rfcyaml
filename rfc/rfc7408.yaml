- title: __initial_text__
  contents:
  - '   Forwarding and Control Element Separation (ForCES) Model Extension

    '
- title: Abstract
  contents:
  - "Abstract\n   This memo extends the Forwarding and Control Element Separation\n\
    \   (ForCES) model defined in RFC 5812 and updates that RFC to allow\n   complex\
    \ data types for metadata, optional default values for data\n   types, and optional\
    \ access types for structures.  It also fixes an\n   issue with Logical Functional\
    \ Block (LFB) inheritance and introduces\n   two new features: a new event condition\
    \ called eventBecomesEqualTo\n   and LFB properties.  The changes introduced in\
    \ this memo do not alter\n   the protocol and retain backward compatibility with\
    \ older LFB models.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7408.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Requirements Language ......................................3\n  \
    \    1.2. Terminology ................................................3\n   2.\
    \ ForCES Model Extensions .........................................3\n      2.1.\
    \ Complex Data Types for Metadata ............................3\n      2.2. Optional\
    \ Default Values for Data Types .....................5\n      2.3. Optional Access\
    \ Types for Structs ..........................8\n      2.4. New Event Condition:\
    \ eventBecomesEqualTo ..................11\n      2.5. LFB Properties ............................................12\n\
    \      2.6. LFB Class Inheritance .....................................14\n  \
    \    2.7. Enhancing XML Validation ..................................15\n   3.\
    \ XML Extension Schema for LFB Class Library Documents ...........15\n   4. IANA\
    \ Considerations ............................................29\n   5. Security\
    \ Considerations ........................................29\n   6. References\
    \ .....................................................30\n      6.1. Normative\
    \ References ......................................30\n      6.2. Informative\
    \ References ....................................30\n   Acknowledgements ..................................................31\n\
    \   Author's Address ..................................................31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The ForCES model [RFC5812] presents a formal way to define\
    \ Forwarding\n   Element (FE) Logical Functional Blocks (LFBs) using the eXtensible\n\
    \   Markup Language (XML).  [RFC5812] was published several years before\n   this\
    \ document, and experience with its use has demonstrated the need\n   to add new\
    \ modeling concepts and change existing ones.\n   Specifically, this document\
    \ updates the ForCES model [RFC5812] to\n   allow complex data types for metadata\
    \ (Section 2.1), optional default\n   values for data types (Section 2.2), and\
    \ optional access types for\n   structures (Section 2.3).  It also fixes an issue\
    \ with LFB class\n   inheritance (Section 2.6).  Additionally, the document introduces\
    \ two\n   new features: a new event condition named eventBecomesEqualTo\n   (Section\
    \ 2.4) and LFB properties (Section 2.5).\n   These extensions are an update to\
    \ the ForCES model [RFC5812] and do\n   not require any changes to the ForCES\
    \ protocol [RFC5810] as they are\n   simply changes to the schema definition.\
    \  Additionally, backward\n   compatibility is ensured as XML libraries produced\
    \ with the earlier\n   schema are still valid with the new one.  In order for\
    \ XML libraries\n   produced by the new schema to be compatible with existing\
    \ ForCES\n   implementations, the XML libraries MUST NOT include any of the\n\
    \   features described in this document.\n   Extensions to the schema and excerpts\
    \ of the schema include the tags\n   <!-- Extension RFC 7408 --> and <!-- /Extension\
    \ RFC 7408 -->, which\n   designate the beginning and ending of extension text\
    \ specified by\n   this document in respect to the schema in the original ForCES\
    \ model\n   [RFC5812].\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   This document uses the terminology defined in the ForCES\
    \ model\n   [RFC5812].  In particular, the reader is expected to be familiar with\n\
    \   the following terms:\n      FE Model\n      LFB (Logical Functional Block)\
    \ Class (or type)\n      LFB Instance\n      LFB Model\n      Element\n      Attribute\n\
    \      LFB Metadata\n      ForCES Component\n      LFB Class Library\n"
- title: 2.  ForCES Model Extensions
  contents:
  - '2.  ForCES Model Extensions

    '
- title: 2.1.  Complex Data Types for Metadata
  contents:
  - "2.1.  Complex Data Types for Metadata\n   Section 4.6 (\"<metadataDefs> Element\
    \ for Metadata Definitions\") of\n   the ForCES model [RFC5812] limits the data\
    \ type use in metadata to\n   only atomic types.  Figure 1 shows the XML schema\
    \ excerpt where only\n   typeRef and atomic are allowed for a metadata definition.\n\
    \     <xsd:complexType name=\"metadataDefsType\">\n       <xsd:sequence>\n   \
    \      <xsd:element name=\"metadataDef\" maxOccurs=\"unbounded\">\n          \
    \ <xsd:complexType>\n             <xsd:sequence>\n               <xsd:element\
    \ name=\"name\" type=\"xsd:NMTOKEN\"/>\n               <xsd:element ref=\"synopsis\"\
    />\n               <xsd:element name=\"metadataID\" type=\"xsd:integer\"/>\n \
    \              <xsd:element ref=\"description\" minOccurs=\"0\"/>\n          \
    \     <xsd:choice>\n                 <xsd:element name=\"typeRef\" type=\"typeRefNMTOKEN\"\
    />\n                 <xsd:element name=\"atomic\" type=\"atomicType\"/>\n    \
    \           </xsd:choice>\n             </xsd:sequence>\n           </xsd:complexType>\n\
    \         </xsd:element>\n       </xsd:sequence>\n     </xsd:complexType>\n  \
    \      Figure 1: Initial metadataDefsType Definition in the Schema\n   However,\
    \ there are cases where complex metadata are used in the\n   datapath: for example,\
    \ two simple use cases are described in version\n   1.1.0 (and subsequent versions)\
    \ of the OpenFlow Switch Specification\n   [OpenFlowSpec1.1]:\n   1.  The Action\
    \ Set metadata is an array of actions descriptors, which\n       traverses the\
    \ processing pipeline along with the packet data.\n   2.  When a packet is received\
    \ from a controller, it may be\n       accompanied by a list of actions, as metadata,\
    \ to be performed on\n       it prior to being sent on the processing pipeline.\
    \  This list of\n       actions is also an array.\n   With the extension shown\
    \ in Figure 2, complex data types are also\n   allowed, specifically structs and\
    \ arrays as metadata.  The key\n   declarations are required to check for validity\
    \ of content keys in\n   arrays and componentIDs in structs.\n     <xsd:complexType\
    \ name=\"metadataDefsType\">\n       <xsd:sequence>\n         <xsd:element name=\"\
    metadataDef\" maxOccurs=\"unbounded\">\n           <xsd:complexType>\n       \
    \      <xsd:sequence>\n               <xsd:element name=\"name\" type=\"xsd:NMTOKEN\"\
    />\n               <xsd:element ref=\"synopsis\"/>\n               <xsd:element\
    \ name=\"metadataID\" type=\"xsd:integer\"/>\n               <xsd:element ref=\"\
    description\" minOccurs=\"0\"/>\n               <xsd:choice>\n               \
    \  <xsd:element name=\"typeRef\" type=\"typeRefNMTOKEN\"/>\n                 <xsd:element\
    \ name=\"atomic\" type=\"atomicType\"/>\n                 <!-- Extension RFC 7408\
    \ -->\n                 <xsd:element name=\"array\" type=\"arrayType\">\n    \
    \               <xsd:key name=\"contentKeyID1\">\n                     <xsd:selector\
    \ xpath=\"lfb:contentKey\"/>\n                     <xsd:field xpath=\"@contentKeyID\"\
    />\n                   </xsd:key>\n                 </xsd:element>\n         \
    \        <xsd:element name=\"struct\" type=\"structType\">\n                 \
    \  <xsd:key name=\"structComponentID1\">\n                     <xsd:selector xpath=\"\
    lfb:component\"/>\n                     <xsd:field xpath=\"@componentID\"/>\n\
    \                   </xsd:key>\n                 </xsd:element>\n            \
    \     <!-- /Extension RFC 7408 -->\n               </xsd:choice>\n           \
    \  </xsd:sequence>\n           </xsd:complexType>\n         </xsd:element>\n \
    \      </xsd:sequence>\n     </xsd:complexType>\n          Figure 2: New metadataDefsType\
    \ Definition in the Schema\n"
- title: 2.2.  Optional Default Values for Data Types
  contents:
  - "2.2.  Optional Default Values for Data Types\n   In the original schema, default\
    \ values can only be defined for data\n   types defined inside LFB components\
    \ and not inside structures or\n   arrays.  Therefore, default values for data\
    \ types that are constantly\n   being reused, e.g., counters with default value\
    \ of 0, have to be\n   constantly respecified.  Additionally, data types inside\
    \ complex data\n   types cannot be defined with a default value, e.g., a counter\
    \ inside\n   a struct that has a default value of 0.\n   This extension allows\
    \ the option to add default values to data types.\n   These data types can then\
    \ be referenced as simple components or\n   within complex data types such as\
    \ structs.  A simple use case would\n   be to have a struct component where one\
    \ of the components is a\n   counter with a default value of zero.  To achieve\
    \ that, the counter\n   must first be defined as a data type with the required\
    \ default value\n   and then referenced in the struct.  Default values MUST adhere\
    \ the\n   following formal restrictions:\n   1.  Default values MUST be ignored\
    \ if the data type is not an atomic\n       or a base data type.\n   2.  When\
    \ a data type X with default value A is referenced from a data\n       type Y\
    \ with a default value B, the default value of the data type\n       that references\
    \ overrides the referenced default value, e.g., in\n       this case, Y's default\
    \ value will be B.\n   3.  Default values of LFB components override any default\
    \ value\n       specified from the dataTypeDef definition.\n   4.  Default values\
    \ of data types referenced in capabilities or\n       metadata MUST be ignored.\n\
    \   This extension simply adds to the definition of dataTypeDefsType in\n   the\
    \ XML schema shown in Figure 3 to allow default values for\n   dataTypeDefsType.\
    \  The new definition is shown in Figure 4.\n     <xsd:complexType name=\"dataTypeDefsType\"\
    >\n       <xsd:sequence>\n         <xsd:element name=\"dataTypeDef\" maxOccurs=\"\
    unbounded\">\n           <xsd:complexType>\n             <xsd:sequence>\n    \
    \           <xsd:element name=\"name\" type=\"xsd:NMTOKEN\"/>\n              \
    \ <xsd:element name=\"derivedFrom\" type=\"xsd:NMTOKEN\"\n                  minOccurs=\"\
    0\"/>\n               <xsd:element ref=\"synopsis\"/>\n               <xsd:element\
    \ ref=\"description\" minOccurs=\"0\"/>\n               <xsd:group ref=\"typeDeclarationGroup\"\
    />\n             </xsd:sequence>\n           </xsd:complexType>\n         </xsd:element>\n\
    \       </xsd:sequence>\n     </xsd:complexType>\n      Figure 3: Initial Excerpt\
    \ of dataTypeDefsType Definition in the\n                                  Schema\n\
    \     <xsd:complexType name=\"dataTypeDefsType\">\n       <xsd:sequence>\n   \
    \      <xsd:element name=\"dataTypeDef\" maxOccurs=\"unbounded\">\n          \
    \ <xsd:complexType>\n             <xsd:sequence>\n               <xsd:element\
    \ name=\"name\" type=\"xsd:NMTOKEN\"/>\n               <xsd:element name=\"derivedFrom\"\
    \ type=\"xsd:NMTOKEN\"\n                  minOccurs=\"0\"/>\n               <xsd:element\
    \ ref=\"synopsis\"/>\n               <xsd:element ref=\"description\" minOccurs=\"\
    0\"/>\n               <xsd:group ref=\"typeDeclarationGroup\"/>\n            \
    \   <!-- Extension RFC 7408 -->\n               <xsd:element name=\"defaultValue\"\
    \ type=\"xsd:token\"\n                  minOccurs=\"0\"/>\n               <!--\
    \ /Extension RFC 7408 -->\n             </xsd:sequence>\n           </xsd:complexType>\n\
    \         </xsd:element>\n       </xsd:sequence>\n     </xsd:complexType>\n  \
    \  Figure 4: New Excerpt of dataTypeDefsType Definition in the Schema\n   Examples\
    \ of using default values is depicted in Figure 5.\n     <dataTypeDef>\n     \
    \  <name>ZeroCounter</name>\n       <synopsis>A counter with default 0</synopsis>\n\
    \       <typeRef>uint32</typeRef>\n       <defaultValue>0</defaultValue>\n   \
    \  </dataTypeDef>\n     <dataTypeDef>\n       <name>CounterValues</name>\n   \
    \    <synopsis>Example default values in struct</synopsis>\n       <struct>\n\
    \         <component componentID=\"1\">\n           <name>GoodPacketCounter</name>\n\
    \           <synopsis>A counter for good packets</synopsis>\n           <typeRef>ZeroCounter</typeRef>\n\
    \         </component>\n         <component componentID=\"2\">\n           <name>BadPacketCounter</name>\n\
    \           <synopsis>A counter for bad packets</synopsis>\n           <typeRef>ZeroCounter</typeRef>\n\
    \         </component>\n       </struct>\n     </dataTypeDef>\n              \
    \ Figure 5: Example of Optional Default Values\n"
- title: 2.3.  Optional Access Types for Structs
  contents:
  - "2.3.  Optional Access Types for Structs\n   In the original schema, the access\
    \ type can only be defined on\n   components of an LFB and not on components within\
    \ structs or arrays.\n   That means that when it is a struct data type, it is\
    \ not possible to\n   fine-tune access type per component within the struct. \
    \ A simple use\n   case would be to have a read-write struct component where one\
    \ of the\n   components is a counter with an access type that could be read-reset\n\
    \   or read-only, e.g., a read-reset or a read-only counter inside a\n   struct.\n\
    \   This extension allows the definition of the access type for a struct\n   component\
    \ either in the data type definitions or in the LFB component\n   definitions.\n\
    \   When optional access types for components within a struct are\n   defined,\
    \ the access types for these components MUST override the\n   access type of the\
    \ struct.  For example, if a struct has an access\n   type of read-write but has\
    \ a component that is a read-only counter,\n   the counter's access type MUST\
    \ be read-only.\n   Per [RFC5812], the access type for a component in a capability\
    \ is\n   always read-only.  If an access type is provided for a component in a\n\
    \   capability, the access type MUST be ignored.  Similarly, if an access\n  \
    \ type is provided for a struct in a metadata, the access type MUST be\n   ignored.\n\
    \   This extension alters the definition of the struct in the XML schema\n   from\
    \ the initial definition shown in Figure 6 to the new shown in\n   Figure 7.\n\
    \     <xsd:complexType name=\"structType\">\n       <xsd:sequence>\n         <xsd:element\
    \ name=\"derivedFrom\" type=\"typeRefNMTOKEN\"\n           minOccurs=\"0\"/>\n\
    \         <xsd:element name=\"component\" maxOccurs=\"unbounded\">\n         \
    \  <xsd:complexType>\n             <xsd:sequence>\n               <xsd:element\
    \ name=\"name\" type=\"xsd:NMTOKEN\"/>\n               <xsd:element ref=\"synopsis\"\
    />\n               <xsd:element ref=\"description\" minOccurs=\"0\"/>\n      \
    \         <xsd:element name=\"optional\" minOccurs=\"0\"/>\n               <xsd:group\
    \ ref=\"typeDeclarationGroup\"/>\n             </xsd:sequence>\n             <xsd:attribute\
    \ name=\"componentID\" type=\"xsd:unsignedInt\"\n              use=\"required\"\
    />\n           </xsd:complexType>\n         </xsd:element>\n       </xsd:sequence>\n\
    \     </xsd:complexType>\n       Figure 6: Initial XML for the Struct Definition\
    \ in the Schema\n     <xsd:complexType name=\"structType\">\n       <xsd:sequence>\n\
    \         <xsd:element name=\"derivedFrom\" type=\"typeRefNMTOKEN\"\n        \
    \   minOccurs=\"0\"/>\n         <xsd:element name=\"component\" maxOccurs=\"unbounded\"\
    >\n           <xsd:complexType>\n             <xsd:sequence>\n               <xsd:element\
    \ name=\"name\" type=\"xsd:NMTOKEN\"/>\n               <xsd:element ref=\"synopsis\"\
    />\n               <xsd:element ref=\"description\" minOccurs=\"0\"/>\n      \
    \         <xsd:element name=\"optional\" minOccurs=\"0\"/>\n               <xsd:group\
    \ ref=\"typeDeclarationGroup\"/>\n             </xsd:sequence>\n             <!--\
    \ Extension RFC 7408 -->\n             <xsd:attribute name=\"access\" use=\"optional\"\
    \n               default=\"read-write\">\n               <xsd:simpleType>\n  \
    \               <xsd:list itemType=\"accessModeType\"/>\n               </xsd:simpleType>\n\
    \             </xsd:attribute>\n             <!-- /Extension RFC 7408 -->\n  \
    \           <xsd:attribute name=\"componentID\" type=\"xsd:unsignedInt\"\n   \
    \            use=\"required\"/>\n           </xsd:complexType>\n         </xsd:element>\n\
    \       </xsd:sequence>\n     </xsd:complexType>\n         Figure 7: New XML for\
    \ the Struct Definition in the Schema\n   An example of using optional access\
    \ types for structs is depicted in\n   Figure 8.\n      <component componentID=\"\
    1\" access=\"read-write\">\n         <name>PacketFlows</name>\n         <synopsis>Packet\
    \ Flows, match and counter</synopsis>\n         <struct>\n          <component\
    \ componentID=\"1\">\n            <name>FlowMatch</name>\n            <synopsis>Flow\
    \ Match</synopsis>\n            <typeRef>MatchType</typeRef>\n          </component>\n\
    \          <component componentID=\"2\" access=\"read-only\">\n            <name>MatchCounter</name>\n\
    \            <synopsis>Packets matching the flow match</synopsis>\n          \
    \  <typeRef>ZeroCounter</typeRef>\n          </component>\n        </struct>\n\
    \      </component>\n           Figure 8: Example of Optional Access Types for\
    \ Struct\n"
- title: '2.4.  New Event Condition: eventBecomesEqualTo'
  contents:
  - "2.4.  New Event Condition: eventBecomesEqualTo\n   This extension adds one more\
    \ event condition in the model schema,\n   eventBecomesEqualTo.  eventBecomesEqualTo\
    \ is different from\n   eventGreaterThan and eventLessThan because the event is\
    \ triggered\n   when the value is exactly that of the eventBecomesEqualTo threshold.\n\
    \   This event condition is particularly useful when there is a need to\n   monitor\
    \ one or more states of an LFB or the FE.  For example, in the\n   Control Element\
    \ High Availability (CEHA) document [RFC7121], it may\n   be useful for the master\
    \ CE to know which backup CEs have just become\n   associated in order to connect\
    \ to them and begin synchronizing the\n   state of the FE.  The master CE could\
    \ always poll for such\n   information, but getting such an event will speed up\
    \ the process, and\n   the event may be useful in other cases as well for monitoring\
    \ state.\n   The event MUST be triggered only when the value of the targeted\n\
    \   component becomes equal to the event condition value.\n   Implementations\
    \ MUST NOT generate subsequent events while the\n   targeted component's value\
    \ remains equal to the event condition's\n   value.\n   eventBecomesEqualTo is\
    \ appended to the schema as shown in Figure 9.\n     <xsd:element name=\"eventBecomesEqualTo\"\
    \n       substitutionGroup=\"eventCondition\"/>\n       Figure 9: New Excerpt\
    \ of eventBecomesEqualTo Event Condition\n                         Definition\
    \ in the Schema\n   It can become useful for the CE to be notified when the state\
    \ has\n   changed once the eventBecomesEqualTo event has been triggered, e.g.,\n\
    \   the CE may need to know when a backup CE has lost association.  Such\n   an\
    \ event can be generated either by defining a second event on the\n   same component\
    \ (namely, an eventChanged) or by simply reusing\n   eventBecomesEqualTo and using\
    \ event properties (in particular,\n   eventHysteresis).  We append the following\
    \ definition to the\n   eventHysteresis defined in Section 4.8.5.2 of [RFC5812],\
    \ with V being\n   the hysteresis value:\n   o  For an eventBecomesEqualTo condition,\
    \ after the last notification,\n      a new eventBecomesEqualTo notification MUST\
    \ be generated only one\n      time once the value has changed by +/- V.\n   For\
    \ example, using the value of 1 for V will, in effect, create a\n   singular event\
    \ that will notify the CE that the value has changed by\n   at least 1.\n   A\
    \ developer of a CE should consider using count or time filtering to\n   avoid\
    \ being overrun by messages, e.g., in the case of rapid state\n   changes.\n"
- title: 2.5.  LFB Properties
  contents:
  - "2.5.  LFB Properties\n   The previous model definition specifies properties for\
    \ components of\n   LFBs.  Experience has shown that, at least for debug reasons,\
    \ it\n   would be useful to have statistics per LFB instance to monitor sent\n\
    \   and received messages and errors in communication between a CE and\n   FE.\
    \  These properties are read-only.\n   In order to avoid ambiguity on protocol\
    \ path semantics, this document\n   specifies that the LFB componentID 0 specifically\
    \ MUST refer to LFB\n   properties and ID 0 MUST NOT be used for any component\
    \ definition.\n   This disallowance is backward compatible as no known LFB definition\n\
    \   uses an LFB componentID 0.  Any command with a path starting from LFB\n  \
    \ componentID 0 refers to LFB properties.  Figures 10 and 11 illustrate\n   the\
    \ change in the XML schema that disallows usage of LFB componentID\n   0:\n  \
    \    <xsd:attribute name=\"componentID\" type=\"xsd:unsignedInt\"\n       use=\"\
    required\">\n                Figure 10: Initial XML for LFB componentIDs\n   \
    \   <!-- Extension added restriction to componentID -->\n      <xsd:attribute\
    \ name=\"componentID\" use=\"required\">\n        <xsd:simpleType>\n         \
    \ <xsd:restriction base=\"xsd:unsignedInt\">\n            <xsd:minExclusive value=\"\
    0\"/>\n          </xsd:restriction>\n        </xsd:simpleType>\n      </xsd:attribute>\n\
    \      <!-- End of extension -->\n         Figure 11: New XML to Disallow Usage\
    \ of LFB componentID 0\n   The following data type definitions are to be used\
    \ as properties for\n   LFB instances.\n      <dataTypeDef>\n         <name>LFBProperties</name>\n\
    \         <synopsis>LFB Properties definition</synopsis>\n         <struct>\n\
    \            <component componentID=\"1\">\n               <name>PacketsSentToCE</name>\n\
    \               <synopsis>Packets sent to CE</synopsis>\n               <typeRef>uint32</typeRef>\n\
    \            </component>\n            <component componentID=\"2\">\n       \
    \        <name>SentErrorPacketsToCE</name>\n               <synopsis>Error Packets\
    \ sent to CE</synopsis>\n               <typeRef>uint32</typeRef>\n          \
    \  </component>\n            <component componentID=\"3\">\n               <name>BytesSentToCE</name>\n\
    \               <synopsis>Bytes sent to CE</synopsis>\n               <typeRef>uint32</typeRef>\n\
    \            </component>\n            <component componentID=\"4\">\n       \
    \        <name>SentErrorBytesToCE</name>\n               <synopsis>Error Bytes\
    \ sent to CE</synopsis>\n               <typeRef>uint32</typeRef>\n          \
    \  </component>\n            <component componentID=\"5\">\n               <name>PacketsReceivedFromCE</name>\n\
    \               <synopsis>Packets received from CE</synopsis>\n              \
    \ <typeRef>uint32</typeRef>\n            </component>\n            <component\
    \ componentID=\"6\">\n               <name>ReceivedErrorPacketsFromCE</name>\n\
    \               <synopsis>Error Packets received from CE</synopsis>\n        \
    \       <typeRef>uint32</typeRef>\n            </component>\n            <component\
    \ componentID=\"7\">\n               <name>BytesReceivedFromCE</name>\n      \
    \         <synopsis>Bytes received from CE</synopsis>\n               <typeRef>uint32</typeRef>\n\
    \            </component>\n            <component componentID=\"8\">\n       \
    \        <name>ReceivedErrorBytesFromCE</name>\n               <synopsis>Error\
    \ Bytes received from CE</synopsis>\n               <typeRef>uint32</typeRef>\n\
    \            </component>\n         </struct>\n      </dataTypeDef>\n        \
    \          Figure 12: Properties for LFB Instances\n"
- title: 2.6.  LFB Class Inheritance
  contents:
  - "2.6.  LFB Class Inheritance\n   The ForCES model [RFC5812] allows inheritance\
    \ for LFB classes.\n   However, the XML schema defines only the LFB class from\
    \ which an LFB\n   class inherits.  Recent implementations have identified an\
    \ issue\n   where ambiguity rises when different versions of the parent LFB class\n\
    \   exist.  This document augments the derivedFrom part of the LFB class\n   definition\
    \ with an optional version attribute when the derivedFrom\n   field is used.\n\
    \   Having the version attribute as optional was a decision based on the\n   need\
    \ to maintain backward compatibility with the XML schema defined\n   in [RFC5812].\
    \  However, if the version is omitted, then derivedFrom\n   will always specify\
    \ the first version of the parent LFB class, which\n   usually is version 1.0.\n\
    \   This extension alters the definition of derivedFrom in the XML schema\n  \
    \ from the initial definition shown in Figure 13 to the new shown in\n   Figure\
    \ 14.\n      <xsd:element name=\"derivedFrom\" minOccurs=\"0\"/>\n           \
    \  Figure 13: Initial XML for LFB Class Inheritance\n      <xsd:element name=\"\
    derivedFrom\" minOccurs=\"0\">\n        <xsd:complexType>\n          <xsd:simpleContent>\n\
    \            <xsd:extension base=\"xsd:NMTOKEN\">\n              <xsd:attribute\
    \ name=\"version\"\n                type=\"versionType\" use=\"optional\"/>\n\
    \            </xsd:extension>\n          </xsd:simpleContent>\n        </xsd:complexType>\n\
    \      </xsd:element>\n               Figure 14: New XML for LFB Class Inheritance\n\
    \   An example of the use of the version attribute is given in Figure 15.\n  \
    \    <derivedFrom version=\"1.0\">EtherPHYCop</derivedFrom>\n      Figure 15:\
    \ Example of Use of New XML for LFB Class Inheritance\n"
- title: 2.7.  Enhancing XML Validation
  contents:
  - "2.7.  Enhancing XML Validation\n   As specified earlier, this is not an extension\
    \ but an enhancement of\n   the schema to provide additional validation rules.\
    \  This includes\n   adding new key declarations to provide uniqueness as defined\
    \ by the\n   ForCES model [RFC5812].  Such validations work only within the same\n\
    \   XML file.\n   This document introduces the following validation rules that\
    \ did not\n   exist in the original schema in [RFC5812]:\n   1.  Each metadataID\
    \ must be unique.\n   2.  LFBClassIDs must be unique.\n   3.  componentID, capabilityID,\
    \ and Event baseID must be unique per\n       LFB.\n   4.  eventIDs must be unique\
    \ per LFB.\n   5.  Special values in atomic data types must be unique per atomic\n\
    \       data type.\n"
- title: 3.  XML Extension Schema for LFB Class Library Documents
  contents:
  - "3.  XML Extension Schema for LFB Class Library Documents\n   This section includes\
    \ the new XML schema.  Note that the namespace\n   number has been updated from\
    \ 1.0 to 1.1.\n   The extensions described in this document are backwards compatible\
    \ in\n   terms of the operation of the ForCES protocol.  In terms of the XML,\n\
    \   any definitions that were valid under the old namespace are valid\n   under\
    \ the new namespace.  It is to be noted that any auxiliary tools\n   that are\
    \ processing XML definitions written under both namespaces\n   will need to be\
    \ able to understand both.\n"
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  contents:
  - "<xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n   xmlns=\"urn:ietf:params:xml:ns:forces:lfbmodel:1.1\"\
    \n   xmlns:lfb=\"urn:ietf:params:xml:ns:forces:lfbmodel:1.1\"\n   targetNamespace=\"\
    urn:ietf:params:xml:ns:forces:lfbmodel:1.1\"\n   elementFormDefault=\"qualified\"\
    \ attributeFormDefault=\"unqualified\">\n   <xsd:annotation>\n      <xsd:documentation\
    \ xml:lang=\"en\">\n         Schema for Defining LFB Classes and associated types\n\
    \         (frames, data types for LFB attributes, and metadata).\n      </xsd:documentation>\n\
    \   </xsd:annotation>\n   <xsd:element name=\"description\" type=\"xsd:string\"\
    />\n   <xsd:element name=\"synopsis\" type=\"xsd:string\"/>\n   <!-- Document\
    \ root element: LFBLibrary -->\n   <xsd:element name=\"LFBLibrary\">\n      <xsd:complexType>\n\
    \         <xsd:sequence>\n            <xsd:element ref=\"description\" minOccurs=\"\
    0\"/>\n            <xsd:element name=\"load\" type=\"loadType\"\n            \
    \   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n            <xsd:element name=\"\
    frameDefs\" type=\"frameDefsType\"\n               minOccurs=\"0\"/>\n       \
    \     <xsd:element name=\"dataTypeDefs\" type=\"dataTypeDefsType\"\n         \
    \      minOccurs=\"0\"/>\n            <xsd:element name=\"metadataDefs\" type=\"\
    metadataDefsType\"\n               minOccurs=\"0\"/>\n            <xsd:element\
    \ name=\"LFBClassDefs\" type=\"LFBClassDefsType\"\n               minOccurs=\"\
    0\"/>\n         </xsd:sequence>\n         <xsd:attribute name=\"provides\" type=\"\
    xsd:Name\"\n            use=\"required\"/>\n      </xsd:complexType>\n      <!--\
    \ Uniqueness constraints -->\n      <xsd:key name=\"frame\">\n         <xsd:selector\
    \ xpath=\"lfb:frameDefs/lfb:frameDef\"/>\n         <xsd:field xpath=\"lfb:name\"\
    />\n      </xsd:key>\n      <xsd:key name=\"dataType\">\n         <xsd:selector\
    \ xpath=\"lfb:dataTypeDefs/lfb:dataTypeDef\"/>\n         <xsd:field xpath=\"lfb:name\"\
    />\n      </xsd:key>\n      <xsd:key name=\"metadataDef\">\n         <xsd:selector\
    \ xpath=\"lfb:metadataDefs/lfb:metadataDef\"/>\n         <xsd:field xpath=\"lfb:name\"\
    />\n      </xsd:key>\n      <xsd:key name=\"metadataDefID\">\n         <xsd:selector\
    \ xpath=\"lfb:metadataDefs/lfb:metadataDef\"/>\n         <xsd:field xpath=\"lfb:metadataID\"\
    />\n      </xsd:key>\n      <xsd:key name=\"LFBClassDef\">\n         <xsd:selector\
    \ xpath=\"lfb:LFBClassDefs/lfb:LFBClassDef\"/>\n         <xsd:field xpath=\"lfb:name\"\
    />\n      </xsd:key>\n      <xsd:key name=\"LFBClassDefID\">\n         <xsd:selector\
    \ xpath=\"lfb:LFBClassDefs/lfb:LFBClassDef\"/>\n         <xsd:field xpath=\"@LFBClassID\"\
    />\n      </xsd:key>\n   </xsd:element>\n   <xsd:complexType name=\"loadType\"\
    >\n      <xsd:attribute name=\"library\" type=\"xsd:Name\" use=\"required\"/>\n\
    \      <xsd:attribute name=\"location\" type=\"xsd:anyURI\"\n         use=\"optional\"\
    />\n   </xsd:complexType>\n   <xsd:complexType name=\"frameDefsType\">\n     \
    \ <xsd:sequence>\n         <xsd:element name=\"frameDef\" maxOccurs=\"unbounded\"\
    >\n            <xsd:complexType>\n               <xsd:sequence>\n            \
    \      <xsd:element name=\"name\" type=\"xsd:NMTOKEN\"/>\n                  <xsd:element\
    \ ref=\"synopsis\"/>\n                  <xsd:element ref=\"description\"\n   \
    \                  minOccurs=\"0\"/>\n               </xsd:sequence>\n       \
    \     </xsd:complexType>\n         </xsd:element>\n      </xsd:sequence>\n   </xsd:complexType>\n\
    \   <xsd:complexType name=\"dataTypeDefsType\">\n      <xsd:sequence>\n      \
    \   <xsd:element name=\"dataTypeDef\" maxOccurs=\"unbounded\">\n            <xsd:complexType>\n\
    \               <xsd:sequence>\n                  <xsd:element name=\"name\" type=\"\
    xsd:NMTOKEN\"/>\n                  <xsd:element name=\"derivedFrom\" type=\"xsd:NMTOKEN\"\
    \n                     minOccurs=\"0\"/>\n                  <xsd:element ref=\"\
    synopsis\"/>\n                  <xsd:element ref=\"description\"\n           \
    \          minOccurs=\"0\"/>\n                  <xsd:group ref=\"typeDeclarationGroup\"\
    />\n                  <!-- Extension RFC 7408 -->\n                  <xsd:element\
    \ name=\"defaultValue\" type=\"xsd:token\"\n                     minOccurs=\"\
    0\"/>\n                  <!-- /Extension RFC 7408 -->\n               </xsd:sequence>\n\
    \            </xsd:complexType>\n         </xsd:element>\n      </xsd:sequence>\n\
    \   </xsd:complexType>\n   <!-- Predefined (built-in) atomic data-types are: char,\
    \ uchar,\n   int16, uint16, int32, uint32, int64, uint64, string[N], string,\n\
    \   byte[N], boolean, octetstring[N], float32, float64 -->\n   <xsd:group name=\"\
    typeDeclarationGroup\">\n      <xsd:choice>\n         <xsd:element name=\"typeRef\"\
    \ type=\"typeRefNMTOKEN\"/>\n         <xsd:element name=\"atomic\" type=\"atomicType\"\
    />\n         <xsd:element name=\"array\" type=\"arrayType\">\n            <!--\
    \ Extension RFC 7408 -->\n            <!-- declare keys to have unique IDs -->\n\
    \            <xsd:key name=\"contentKeyID\">\n               <xsd:selector xpath=\"\
    lfb:contentKey\"/>\n               <xsd:field xpath=\"@contentKeyID\"/>\n    \
    \        </xsd:key>\n            <!-- /Extension RFC 7408 -->\n         </xsd:element>\n\
    \         <xsd:element name=\"struct\" type=\"structType\">\n            <!--\
    \ Extension RFC 7408 -->\n            <!-- key declaration to make componentIDs\n\
    \              unique in a struct -->\n            <xsd:key name=\"structComponentID\"\
    >\n               <xsd:selector xpath=\"lfb:component\"/>\n               <xsd:field\
    \ xpath=\"@componentID\"/>\n            </xsd:key>\n            <!-- /Extension\
    \ RFC 7408 -->\n         </xsd:element>\n         <xsd:element name=\"union\"\
    \ type=\"structType\"/>\n         <xsd:element name=\"alias\" type=\"typeRefNMTOKEN\"\
    />\n      </xsd:choice>\n   </xsd:group>\n   <xsd:simpleType name=\"typeRefNMTOKEN\"\
    >\n      <xsd:restriction base=\"xsd:token\">\n         <xsd:pattern value=\"\\\
    c+\"/>\n         <xsd:pattern value=\"string\\[\\d+\\]\"/>\n         <xsd:pattern\
    \ value=\"byte\\[\\d+\\]\"/>\n         <xsd:pattern value=\"octetstring\\[\\d+\\\
    ]\"/>\n      </xsd:restriction>\n   </xsd:simpleType>\n   <xsd:complexType name=\"\
    atomicType\">\n      <xsd:sequence>\n         <xsd:element name=\"baseType\" type=\"\
    typeRefNMTOKEN\"/>\n         <xsd:element name=\"rangeRestriction\"\n        \
    \   type=\"rangeRestrictionType\" minOccurs=\"0\"/>\n         <xsd:element name=\"\
    specialValues\" type=\"specialValuesType\"\n            minOccurs=\"0\">\n   \
    \         <!-- Extension RFC 7408 -->\n            <xsd:key name=\"SpecialValue\"\
    >\n               <xsd:selector xpath=\"specialValue\"/>\n               <xsd:field\
    \ xpath=\"@value\"/>\n            </xsd:key>\n            <!-- /Extension RFC\
    \ 7408 -->\n         </xsd:element>\n      </xsd:sequence>\n   </xsd:complexType>\n\
    \   <xsd:complexType name=\"rangeRestrictionType\">\n      <xsd:sequence>\n  \
    \       <xsd:element name=\"allowedRange\" maxOccurs=\"unbounded\">\n        \
    \    <xsd:complexType>\n               <xsd:attribute name=\"min\" type=\"xsd:integer\"\
    \n                  use=\"required\"/>\n               <xsd:attribute name=\"\
    max\" type=\"xsd:integer\"\n                  use=\"required\"/>\n           \
    \ </xsd:complexType>\n         </xsd:element>\n      </xsd:sequence>\n   </xsd:complexType>\n\
    \   <xsd:complexType name=\"specialValuesType\">\n      <xsd:sequence>\n     \
    \    <xsd:element name=\"specialValue\" maxOccurs=\"unbounded\">\n           \
    \ <xsd:complexType>\n               <xsd:sequence>\n                  <xsd:element\
    \ name=\"name\" type=\"xsd:NMTOKEN\"/>\n                  <xsd:element ref=\"\
    synopsis\"/>\n               </xsd:sequence>\n               <xsd:attribute name=\"\
    value\" type=\"xsd:token\"/>\n            </xsd:complexType>\n         </xsd:element>\n\
    \      </xsd:sequence>\n   </xsd:complexType>\n   <xsd:complexType name=\"arrayType\"\
    >\n      <xsd:sequence>\n         <xsd:group ref=\"typeDeclarationGroup\"/>\n\
    \         <xsd:element name=\"contentKey\" minOccurs=\"0\"\n            maxOccurs=\"\
    unbounded\">\n            <xsd:complexType>\n               <xsd:sequence>\n \
    \                 <xsd:element name=\"contentKeyField\"\n                    \
    \ type=\"xsd:string\" maxOccurs=\"unbounded\"/>\n               </xsd:sequence>\n\
    \               <xsd:attribute name=\"contentKeyID\" type=\"xsd:integer\"\n  \
    \                use=\"required\"/>\n            </xsd:complexType>\n        \
    \ </xsd:element>\n      </xsd:sequence>\n      <xsd:attribute name=\"type\" use=\"\
    optional\" default=\"variable-size\">\n         <xsd:simpleType>\n           \
    \ <xsd:restriction base=\"xsd:string\">\n               <xsd:enumeration value=\"\
    fixed-size\"/>\n               <xsd:enumeration value=\"variable-size\"/>\n  \
    \          </xsd:restriction>\n         </xsd:simpleType>\n      </xsd:attribute>\n\
    \      <xsd:attribute name=\"length\" type=\"xsd:integer\"\n         use=\"optional\"\
    />\n      <xsd:attribute name=\"maxLength\" type=\"xsd:integer\"\n         use=\"\
    optional\"/>\n   </xsd:complexType>\n   <xsd:complexType name=\"structType\">\n\
    \      <xsd:sequence>\n         <xsd:element name=\"derivedFrom\" type=\"typeRefNMTOKEN\"\
    \n            minOccurs=\"0\"/>\n         <xsd:element name=\"component\" maxOccurs=\"\
    unbounded\">\n            <xsd:complexType>\n               <xsd:sequence>\n \
    \                 <xsd:element name=\"name\" type=\"xsd:NMTOKEN\"/>\n        \
    \          <xsd:element ref=\"synopsis\"/>\n                  <xsd:element ref=\"\
    description\"\n                     minOccurs=\"0\"/>\n                  <xsd:element\
    \ name=\"optional\" minOccurs=\"0\"/>\n                  <xsd:group ref=\"typeDeclarationGroup\"\
    />\n               </xsd:sequence>\n               <!-- Extension RFC 7408 -->\n\
    \               <xsd:attribute name=\"access\" use=\"optional\"\n            \
    \      default=\"read-write\">\n                  <xsd:simpleType>\n         \
    \            <xsd:list itemType=\"accessModeType\"/>\n                  </xsd:simpleType>\n\
    \               </xsd:attribute>\n               <!-- Extension RFC 7408 -->\n\
    \               <xsd:attribute name=\"componentID\" type=\"xsd:unsignedInt\"\n\
    \                  use=\"required\"/>\n            </xsd:complexType>\n      \
    \   </xsd:element>\n      </xsd:sequence>\n   </xsd:complexType>\n   <xsd:complexType\
    \ name=\"metadataDefsType\">\n      <xsd:sequence>\n         <xsd:element name=\"\
    metadataDef\" maxOccurs=\"unbounded\">\n            <xsd:complexType>\n      \
    \         <xsd:sequence>\n                  <xsd:element name=\"name\" type=\"\
    xsd:NMTOKEN\"/>\n                  <xsd:element ref=\"synopsis\"/>\n         \
    \         <xsd:element name=\"metadataID\" type=\"xsd:integer\"/>\n          \
    \        <xsd:element ref=\"description\"\n                     minOccurs=\"0\"\
    />\n                  <xsd:choice>\n                     <xsd:element name=\"\
    typeRef\" type=\"typeRefNMTOKEN\"/>\n                     <xsd:element name=\"\
    atomic\" type=\"atomicType\"/>\n                     <!-- Extension RFC 7408 -->\n\
    \                     <xsd:element name=\"array\" type=\"arrayType\">\n      \
    \                  <!--declare keys to have unique IDs -->\n                 \
    \       <xsd:key name=\"contentKeyID1\">\n                           <xsd:selector\
    \ xpath=\"lfb:contentKey\"/>\n                           <xsd:field xpath=\"@contentKeyID\"\
    />\n                        </xsd:key>\n                        <!-- /Extension\
    \ RFC 7408 -->\n                     </xsd:element>\n                     <xsd:element\
    \ name=\"struct\" type=\"structType\">\n                        <!-- Extension\
    \ RFC 7408 -->\n                        <!-- key declaration to make componentIDs\n\
    \                           unique in a struct -->\n                        <xsd:key\
    \ name=\"structComponentID1\">\n                           <xsd:selector xpath=\"\
    lfb:component\"/>\n                           <xsd:field xpath=\"@componentID\"\
    />\n                        </xsd:key>\n                        <!-- /Extension\
    \ RFC 7408 -->\n                     </xsd:element>\n                  </xsd:choice>\n\
    \               </xsd:sequence>\n            </xsd:complexType>\n         </xsd:element>\n\
    \      </xsd:sequence>\n   </xsd:complexType>\n   <xsd:complexType name=\"LFBClassDefsType\"\
    >\n      <xsd:sequence>\n         <xsd:element name=\"LFBClassDef\" maxOccurs=\"\
    unbounded\">\n            <xsd:complexType>\n               <xsd:sequence>\n \
    \                 <xsd:element name=\"name\" type=\"xsd:NMTOKEN\"/>\n        \
    \          <xsd:element ref=\"synopsis\"/>\n                  <xsd:element name=\"\
    version\" type=\"versionType\"/>\n                  <xsd:element name=\"derivedFrom\"\
    \ minOccurs=\"0\">\n                    <xsd:complexType>\n                  \
    \    <xsd:simpleContent>\n                        <xsd:extension base=\"xsd:NMTOKEN\"\
    >\n                          <xsd:attribute name=\"version\"\n               \
    \             type=\"versionType\" use=\"optional\"/>\n                      \
    \  </xsd:extension>\n                      </xsd:simpleContent>\n            \
    \        </xsd:complexType>\n                  </xsd:element>\n              \
    \    <xsd:element name=\"inputPorts\"\n                   type=\"inputPortsType\"\
    \ minOccurs=\"0\"/>\n                  <xsd:element name=\"outputPorts\"\n   \
    \                type=\"outputPortsType\" minOccurs=\"0\"/>\n                \
    \  <xsd:element name=\"components\"\n                   type=\"LFBComponentsType\"\
    \ minOccurs=\"0\"/>\n                  <xsd:element name=\"capabilities\"\n  \
    \                 type=\"LFBCapabilitiesType\" minOccurs=\"0\"/>\n           \
    \       <xsd:element name=\"events\" type=\"eventsType\"\n                   \
    \  minOccurs=\"0\"/>\n                  <xsd:element ref=\"description\"\n   \
    \                  minOccurs=\"0\"/>\n               </xsd:sequence>\n       \
    \        <xsd:attribute name=\"LFBClassID\" type=\"xsd:unsignedInt\"\n       \
    \           use=\"required\"/>\n            </xsd:complexType>\n            <!--\
    \ Key constraint to ensure unique attribute names\n            within a class:\
    \ -->\n            <xsd:key name=\"components\">\n               <xsd:selector\
    \ xpath=\"lfb:components/lfb:component\"/>\n               <xsd:field xpath=\"\
    lfb:name\"/>\n            </xsd:key>\n            <xsd:key name=\"capabilities\"\
    >\n               <xsd:selector xpath=\"lfb:capabilities/lfb:capability\"/>\n\
    \               <xsd:field xpath=\"lfb:name\"/>\n            </xsd:key>\n    \
    \        <xsd:key name=\"events\">\n               <xsd:selector xpath=\"lfb:events/lfb:event\"\
    />\n               <xsd:field xpath=\"lfb:name\"/>\n            </xsd:key>\n \
    \           <xsd:key name=\"eventsIDs\">\n               <xsd:selector xpath=\"\
    lfb:events/lfb:event\"/>\n               <xsd:field xpath=\"@eventID\"/>\n   \
    \         </xsd:key>\n            <xsd:key name=\"componentIDs\">\n          \
    \     <xsd:selector xpath=\"lfb:components/lfb:component\"/>\n               <xsd:field\
    \ xpath=\"@componentID\"/>\n            </xsd:key>\n            <xsd:key name=\"\
    capabilityIDs\">\n               <xsd:selector xpath=\"lfb:capabilities/lfb:capability\"\
    />\n               <xsd:field xpath=\"@componentID\"/>\n            </xsd:key>\n\
    \            <xsd:key name=\"ComponentCapabilityComponentIDUniqueness\">\n   \
    \            <xsd:selector\n                  xpath=\"lfb:components/lfb:component|\n\
    \                  lfb:capabilities/lfb:capability|lfb:events\"/>\n          \
    \     <xsd:field xpath=\"@componentID|@baseID\"/>\n            </xsd:key>\n  \
    \       </xsd:element>\n      </xsd:sequence>\n   </xsd:complexType>\n   <xsd:simpleType\
    \ name=\"versionType\">\n      <xsd:restriction base=\"xsd:NMTOKEN\">\n      \
    \   <xsd:pattern value=\"[1-9][0-9]*\\.([1-9][0-9]*|0)\"/>\n      </xsd:restriction>\n\
    \   </xsd:simpleType>\n   <xsd:complexType name=\"inputPortsType\">\n      <xsd:sequence>\n\
    \         <xsd:element name=\"inputPort\" type=\"inputPortType\"\n           \
    \ maxOccurs=\"unbounded\"/>\n      </xsd:sequence>\n   </xsd:complexType>\n  \
    \ <xsd:complexType name=\"inputPortType\">\n      <xsd:sequence>\n         <xsd:element\
    \ name=\"name\" type=\"xsd:NMTOKEN\"/>\n         <xsd:element ref=\"synopsis\"\
    />\n         <xsd:element name=\"expectation\" type=\"portExpectationType\"/>\n\
    \         <xsd:element ref=\"description\" minOccurs=\"0\"/>\n      </xsd:sequence>\n\
    \      <xsd:attribute name=\"group\" type=\"xsd:boolean\"\n         use=\"optional\"\
    \ default=\"0\"/>\n   </xsd:complexType>\n   <xsd:complexType name=\"portExpectationType\"\
    >\n      <xsd:sequence>\n         <xsd:element name=\"frameExpected\" minOccurs=\"\
    0\">\n            <xsd:complexType>\n               <xsd:sequence>\n         \
    \         <!-- ref must refer to a name of a defined\n                    frame\
    \ type -->\n                  <xsd:element name=\"ref\" type=\"xsd:string\"\n\
    \                     maxOccurs=\"unbounded\"/>\n               </xsd:sequence>\n\
    \            </xsd:complexType>\n         </xsd:element>\n         <xsd:element\
    \ name=\"metadataExpected\" minOccurs=\"0\">\n            <xsd:complexType>\n\
    \               <xsd:choice maxOccurs=\"unbounded\">\n                  <!--ref\
    \ must refer to a name of a defined metadata-->\n                  <xsd:element\
    \ name=\"ref\" type=\"metadataInputRefType\"/>\n                  <xsd:element\
    \ name=\"one-of\"\n                     type=\"metadataInputChoiceType\"/>\n \
    \              </xsd:choice>\n            </xsd:complexType>\n         </xsd:element>\n\
    \      </xsd:sequence>\n   </xsd:complexType>\n   <xsd:complexType name=\"metadataInputChoiceType\"\
    >\n      <xsd:choice minOccurs=\"2\" maxOccurs=\"unbounded\">\n         <!-- ref\
    \ must refer to a name of a defined metadata -->\n         <xsd:element name=\"\
    ref\" type=\"xsd:NMTOKEN\"/>\n         <xsd:element name=\"one-of\" type=\"metadataInputChoiceType\"\
    />\n         <xsd:element name=\"metadataSet\" type=\"metadataInputSetType\"/>\n\
    \      </xsd:choice>\n   </xsd:complexType>\n   <xsd:complexType name=\"metadataInputSetType\"\
    >\n      <xsd:choice minOccurs=\"2\" maxOccurs=\"unbounded\">\n         <!-- ref\
    \ must refer to a name of a defined metadata -->\n         <xsd:element name=\"\
    ref\" type=\"metadataInputRefType\"/>\n         <xsd:element name=\"one-of\" type=\"\
    metadataInputChoiceType\"/>\n      </xsd:choice>\n   </xsd:complexType>\n   <xsd:complexType\
    \ name=\"metadataInputRefType\">\n      <xsd:simpleContent>\n         <xsd:extension\
    \ base=\"xsd:NMTOKEN\">\n            <xsd:attribute name=\"dependency\" use=\"\
    optional\"\n               default=\"required\">\n               <xsd:simpleType>\n\
    \                  <xsd:restriction base=\"xsd:string\">\n                   \
    \  <xsd:enumeration value=\"required\"/>\n                     <xsd:enumeration\
    \ value=\"optional\"/>\n                  </xsd:restriction>\n               </xsd:simpleType>\n\
    \            </xsd:attribute>\n            <xsd:attribute name=\"defaultValue\"\
    \ type=\"xsd:token\"\n               use=\"optional\"/>\n         </xsd:extension>\n\
    \      </xsd:simpleContent>\n   </xsd:complexType>\n   <xsd:complexType name=\"\
    outputPortsType\">\n      <xsd:sequence>\n         <xsd:element name=\"outputPort\"\
    \ type=\"outputPortType\"\n            maxOccurs=\"unbounded\"/>\n      </xsd:sequence>\n\
    \   </xsd:complexType>\n   <xsd:complexType name=\"outputPortType\">\n      <xsd:sequence>\n\
    \         <xsd:element name=\"name\" type=\"xsd:NMTOKEN\"/>\n         <xsd:element\
    \ ref=\"synopsis\"/>\n         <xsd:element name=\"product\" type=\"portProductType\"\
    />\n         <xsd:element ref=\"description\" minOccurs=\"0\"/>\n      </xsd:sequence>\n\
    \      <xsd:attribute name=\"group\" type=\"xsd:boolean\"\n         use=\"optional\"\
    \ default=\"0\"/>\n   </xsd:complexType>\n   <xsd:complexType name=\"portProductType\"\
    >\n      <xsd:sequence>\n         <xsd:element name=\"frameProduced\" minOccurs=\"\
    0\">\n            <xsd:complexType>\n               <xsd:sequence>\n         \
    \         <!-- ref must refer to a name of a defined\n                     frame\
    \ type -->\n                  <xsd:element name=\"ref\" type=\"xsd:NMTOKEN\"\n\
    \                     maxOccurs=\"unbounded\"/>\n               </xsd:sequence>\n\
    \            </xsd:complexType>\n         </xsd:element>\n         <xsd:element\
    \ name=\"metadataProduced\" minOccurs=\"0\">\n            <xsd:complexType>\n\
    \               <xsd:choice maxOccurs=\"unbounded\">\n                  <!-- ref\
    \ must refer to a name of a\n                     defined metadata -->\n     \
    \             <xsd:element name=\"ref\"\n                     type=\"metadataOutputRefType\"\
    />\n                  <xsd:element name=\"one-of\"\n                     type=\"\
    metadataOutputChoiceType\"/>\n               </xsd:choice>\n            </xsd:complexType>\n\
    \         </xsd:element>\n      </xsd:sequence>\n   </xsd:complexType>\n   <xsd:complexType\
    \ name=\"metadataOutputChoiceType\">\n      <xsd:choice minOccurs=\"2\" maxOccurs=\"\
    unbounded\">\n         <!-- ref must refer to a name of a defined metadata -->\n\
    \         <xsd:element name=\"ref\" type=\"xsd:NMTOKEN\"/>\n         <xsd:element\
    \ name=\"one-of\" type=\"metadataOutputChoiceType\"/>\n         <xsd:element name=\"\
    metadataSet\" type=\"metadataOutputSetType\"/>\n      </xsd:choice>\n   </xsd:complexType>\n\
    \   <xsd:complexType name=\"metadataOutputSetType\">\n      <xsd:choice minOccurs=\"\
    2\" maxOccurs=\"unbounded\">\n         <!-- ref must refer to a name of a defined\
    \ metadata -->\n         <xsd:element name=\"ref\" type=\"metadataOutputRefType\"\
    />\n         <xsd:element name=\"one-of\" type=\"metadataOutputChoiceType\"/>\n\
    \      </xsd:choice>\n   </xsd:complexType>\n   <xsd:complexType name=\"metadataOutputRefType\"\
    >\n      <xsd:simpleContent>\n         <xsd:extension base=\"xsd:NMTOKEN\">\n\
    \            <xsd:attribute name=\"availability\" use=\"optional\"\n         \
    \      default=\"unconditional\">\n               <xsd:simpleType>\n         \
    \         <xsd:restriction base=\"xsd:string\">\n                     <xsd:enumeration\
    \ value=\"unconditional\"/>\n                     <xsd:enumeration value=\"conditional\"\
    />\n                  </xsd:restriction>\n               </xsd:simpleType>\n \
    \           </xsd:attribute>\n         </xsd:extension>\n      </xsd:simpleContent>\n\
    \   </xsd:complexType>\n   <xsd:complexType name=\"LFBComponentsType\">\n    \
    \  <xsd:sequence>\n         <xsd:element name=\"component\" maxOccurs=\"unbounded\"\
    >\n            <xsd:complexType>\n               <xsd:sequence>\n            \
    \      <xsd:element name=\"name\" type=\"xsd:NMTOKEN\"/>\n                  <xsd:element\
    \ ref=\"synopsis\"/>\n                  <xsd:element ref=\"description\"\n   \
    \                  minOccurs=\"0\"/>\n                  <xsd:element name=\"optional\"\
    \ minOccurs=\"0\"/>\n                  <xsd:group ref=\"typeDeclarationGroup\"\
    />\n                  <xsd:element name=\"defaultValue\" type=\"xsd:token\"\n\
    \                     minOccurs=\"0\"/>\n               </xsd:sequence>\n    \
    \           <xsd:attribute name=\"access\" use=\"optional\"\n                \
    \  default=\"read-write\">\n                  <xsd:simpleType>\n             \
    \        <xsd:list itemType=\"accessModeType\"/>\n                  </xsd:simpleType>\n\
    \               </xsd:attribute>\n               <!-- Extension added restriction\
    \ to componentID -->\n               <xsd:attribute name=\"componentID\" use=\"\
    required\">\n                  <xsd:simpleType>\n                     <xsd:restriction\
    \ base=\"xsd:unsignedInt\">\n                        <xsd:minExclusive value=\"\
    0\"/>\n                     </xsd:restriction>\n                  </xsd:simpleType>\n\
    \               </xsd:attribute>\n               <!-- End of extension -->\n \
    \           </xsd:complexType>\n         </xsd:element>\n      </xsd:sequence>\n\
    \   </xsd:complexType>\n   <xsd:simpleType name=\"accessModeType\">\n      <xsd:restriction\
    \ base=\"xsd:NMTOKEN\">\n         <xsd:enumeration value=\"read-only\"/>\n   \
    \      <xsd:enumeration value=\"read-write\"/>\n         <xsd:enumeration value=\"\
    write-only\"/>\n         <xsd:enumeration value=\"read-reset\"/>\n         <xsd:enumeration\
    \ value=\"trigger-only\"/>\n      </xsd:restriction>\n   </xsd:simpleType>\n \
    \  <xsd:complexType name=\"LFBCapabilitiesType\">\n      <xsd:sequence>\n    \
    \     <xsd:element name=\"capability\" maxOccurs=\"unbounded\">\n            <xsd:complexType>\n\
    \               <xsd:sequence>\n                  <xsd:element name=\"name\" type=\"\
    xsd:NMTOKEN\"/>\n                  <xsd:element ref=\"synopsis\"/>\n         \
    \         <xsd:element ref=\"description\"\n                     minOccurs=\"\
    0\"/>\n                  <xsd:element name=\"optional\" minOccurs=\"0\"/>\n  \
    \                <xsd:group ref=\"typeDeclarationGroup\"/>\n               </xsd:sequence>\n\
    \               <xsd:attribute name=\"componentID\" type=\"xsd:integer\"\n   \
    \               use=\"required\"/>\n            </xsd:complexType>\n         </xsd:element>\n\
    \      </xsd:sequence>\n   </xsd:complexType>\n   <xsd:complexType name=\"eventsType\"\
    >\n      <xsd:sequence>\n         <xsd:element name=\"event\" maxOccurs=\"unbounded\"\
    >\n            <xsd:complexType>\n               <xsd:sequence>\n            \
    \      <xsd:element name=\"name\" type=\"xsd:NMTOKEN\"/>\n                  <xsd:element\
    \ ref=\"synopsis\"/>\n                  <xsd:element name=\"eventTarget\"\n  \
    \                  type=\"eventPathType\"/>\n                  <xsd:element ref=\"\
    eventCondition\"/>\n                  <xsd:element name=\"eventReports\"\n   \
    \                type=\"eventReportsType\" minOccurs=\"0\"/>\n               \
    \   <xsd:element ref=\"description\"\n                     minOccurs=\"0\"/>\n\
    \               </xsd:sequence>\n               <xsd:attribute name=\"eventID\"\
    \ type=\"xsd:integer\"\n                  use=\"required\"/>\n            </xsd:complexType>\n\
    \         </xsd:element>\n      </xsd:sequence>\n      <xsd:attribute name=\"\
    baseID\" type=\"xsd:integer\"\n         use=\"optional\"/>\n   </xsd:complexType>\n\
    \   <!-- the substitution group for the event conditions -->\n   <xsd:element\
    \ name=\"eventCondition\" abstract=\"true\"/>\n   <xsd:element name=\"eventCreated\"\
    \n    substitutionGroup=\"eventCondition\"/>\n   <xsd:element name=\"eventDeleted\"\
    \n    substitutionGroup=\"eventCondition\"/>\n   <xsd:element name=\"eventChanged\"\
    \n    substitutionGroup=\"eventCondition\"/>\n   <xsd:element name=\"eventGreaterThan\"\
    \n    substitutionGroup=\"eventCondition\"/>\n   <xsd:element name=\"eventLessThan\"\
    \n    substitutionGroup=\"eventCondition\"/>\n   <!-- Extension RFC 7408 -->\n\
    \   <xsd:element name=\"eventBecomesEqualTo\"\n      substitutionGroup=\"eventCondition\"\
    />\n   <!-- /Extension RFC 7408 -->\n   <xsd:complexType name=\"eventPathType\"\
    >\n      <xsd:sequence>\n         <xsd:element ref=\"eventPathPart\" maxOccurs=\"\
    unbounded\"/>\n      </xsd:sequence>\n   </xsd:complexType>\n   <!-- the substitution\
    \ group for the event path parts -->\n   <xsd:element name=\"eventPathPart\" type=\"\
    xsd:string\"\n      abstract=\"true\"/>\n   <xsd:element name=\"eventField\" type=\"\
    xsd:string\"\n      substitutionGroup=\"eventPathPart\"/>\n   <xsd:element name=\"\
    eventSubscript\" type=\"xsd:string\"\n      substitutionGroup=\"eventPathPart\"\
    />\n   <xsd:complexType name=\"eventReportsType\">\n      <xsd:sequence>\n   \
    \      <xsd:element name=\"eventReport\" type=\"eventPathType\"\n            maxOccurs=\"\
    unbounded\"/>\n      </xsd:sequence>\n   </xsd:complexType>\n   <xsd:simpleType\
    \ name=\"booleanType\">\n      <xsd:restriction base=\"xsd:string\">\n       \
    \  <xsd:enumeration value=\"0\"/>\n         <xsd:enumeration value=\"1\"/>\n \
    \     </xsd:restriction>\n   </xsd:simpleType>\n"
- title: </xsd:schema>
  contents:
  - "</xsd:schema>\n                           ForCES LFB XML Schema\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   IANA has registered a new XML namespace, as per the\
    \ guidelines in RFC\n   3688 [RFC3688].\n   URI: The URI for this namespace is:\n\
    \      urn:ietf:params:xml:ns:forces:lfbmodel:1.1\n   Registrant Contact: IESG\n\
    \   XML: none, this is an XML namespace\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This specification adds only a few constructs\
    \ to the initial model\n   defined in [RFC5812], namely, a new event, some new\
    \ properties, and a\n   way to define optional access types and complex metadata.\
    \  In\n   addition, this document addresses and clarifies an issue with the\n\
    \   inheritance model by introducing the version of the derivedFrom LFB\n   class.\
    \  These constructs and the update to the inheritance model do\n   not change\
    \ the nature of the initial model.\n   Thus, the security considerations defined\
    \ in [RFC5812] apply to this\n   specification as well, as the changes proposed\
    \ here are simply\n   constructs to write XML library definitions, as [RFC5812]\
    \ does.\n   These changes, as well as the clarification of the inheritance issue\n\
    \   of the initial model, have no effect on the security semantics of the\n  \
    \ protocol.\n   In regard to pervasive monitoring (PM), as discussed in [RFC7258],\n\
    \   this specification defines ways to expose more complex information\n   (namely,\
    \ metadata) exchanged between LFBs and between CEs and FEs and\n   a new event.\
    \  These changes have very little or no effect in terms of\n   making PM simpler\
    \ or more effective to an attacker who controls the\n   LFBs.  The new metadata\
    \ might make for slightly more elegant PM, but\n   does not enable any new ways\
    \ to (ab)use LFBs for PM.  The same\n   applies for the new event.\n   Finally,\
    \ this document does not provide any protocol specification\n   and, as such,\
    \ does not specify how information will be transmitted\n   between respective\
    \ entities.  Thus, PM mitigation for a passive\n   attacker that simply wants\
    \ to eavesdrop on the information exchanged\n   is out of the scope of this document.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3688]\
    \  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              January\
    \ 2004, <http://www.rfc-editor.org/info/rfc3688>.\n   [RFC5810]  Doria, A., Hadi\
    \ Salim, J., Haas, R., Khosravi, H., Wang,\n              W., Dong, L., Gopal,\
    \ R., and J. Halpern, \"Forwarding and\n              Control Element Separation\
    \ (ForCES) Protocol\n              Specification\", RFC 5810, March 2010,\n  \
    \            <http://www.rfc-editor.org/info/rfc5810>.\n   [RFC5812]  Halpern,\
    \ J. and J. Hadi Salim, \"Forwarding and Control\n              Element Separation\
    \ (ForCES) Forwarding Element Model\", RFC\n              5812, March 2010,\n\
    \              <http://www.rfc-editor.org/info/rfc5812>.\n   [RFC7121]  Ogawa,\
    \ K., Wang, W., Haleplidis, E., and J. Hadi Salim,\n              \"High Availability\
    \ within a Forwarding and Control Element\n              Separation (ForCES) Network\
    \ Element\", RFC 7121, February\n              2014, <http://www.rfc-editor.org/info/rfc7121>.\n\
    \   [RFC7258]  Farrell, S. and H. Tschofenig, \"Pervasive Monitoring Is an\n \
    \             Attack\", BCP 188, RFC 7258, May 2014,\n              <http://www.rfc-editor.org/info/rfc7258>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [OpenFlowSpec1.1]\n              ONF, \"OpenFlow\
    \ Switch Specification\", February 2011,\n              <https://www.opennetworking.org/images/stories/downloads/\n\
    \              sdn-resources/onf-specifications/openflow/\n              openflow-spec-v1.1.0.pdf>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The author would like to acknowledge Joel Halpern, Jamal\
    \ Hadi Salim,\n   and Dave Hood for their comments and discussion that helped\
    \ shape\n   this document for the better.  Special acknowledgements to Joel\n\
    \   Halpern for resolving the issue with the default values, Adrian\n   Farrel\
    \ for his AD review, Ben Campbell for his Gen-ART review, and\n   Tom Yu for his\
    \ security review, all of which improved the quality of\n   this document.  Additionally,\
    \ reviews and comments by the following\n   members of the IESG shaped the final\
    \ version of this document:\n   Stephen Farrel, Barry Leiba, and Ted Lemon.  Finally,\
    \ the author\n   would like to acknowledge Julian Reschke for input regarding\
    \ the\n   namespace change issue and Joel Halpern for helping to resolve it.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Evangelos Haleplidis\n   University of Patras\n   Department\
    \ of Electrical and Computer Engineering\n   Patras  26500\n   Greece\n   EMail:\
    \ ehalep@ece.upatras.gr\n"
