- title: __initial_text__
  contents:
  - '     Message Body Handling in the Session Initiation Protocol (SIP)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies how message bodies are handled in SIP.\n\
    \   Additionally, this document specifies SIP user agent support for MIME\n  \
    \ (Multipurpose Internet Mail Extensions) in message bodies.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Message Body Encoding  . . . . . . . . . . . . . . . .\
    \ . . . .  3\n     3.1.  Background on Message Body Encoding  . . . . . . . .\
    \ . . .  3\n     3.2.  UA Behavior to Encode Binary Message Bodies  . . . . .\
    \ . .  5\n   4.  'multipart' Message Bodies . . . . . . . . . . . . . . . . .\
    \ .  6\n     4.1.  Background on 'multipart' Message Bodies . . . . . . . . .\
    \  6\n     4.2.  Mandatory Support for 'multipart' Message Bodies . . . . .  7\n\
    \     4.3.  UA Behavior to Generate 'multipart' Message Bodies . . . .  7\n  \
    \ 5.  'multipart/mixed' Message Bodies . . . . . . . . . . . . . . .  7\n   6.\
    \  'multipart/alternative' Message Bodies . . . . . . . . . . . .  8\n     6.1.\
    \  Background on 'multipart/alternative' Message Bodies . . .  8\n     6.2.  UA\
    \ Behavior to Generate 'multipart/alternative'\n           Message Bodies . .\
    \ . . . . . . . . . . . . . . . . . . . .  8\n     6.3.  UA Behavior to Process\
    \ 'multipart/alternative' Message\n           Bodies . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . .  9\n   7.  'multipart/related' Message Bodies . .\
    \ . . . . . . . . . . . .  9\n     7.1.  Background on 'multipart/related' Message\
    \ Bodies . . . . .  9\n     7.2.  UA Behavior to Generate 'multipart/related'\
    \ Message\n           Bodies . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  9\n     7.3.  UA Behavior to Process 'multipart/related' Message\n      \
    \     Bodies . . . . . . . . . . . . . . . . . . . . . . . . . .  9\n   8.  Disposition\
    \ Types  . . . . . . . . . . . . . . . . . . . . . . 10\n     8.1.  Background\
    \ on Content and Disposition Types in SIP . . . . 10\n     8.2.  UA Behavior to\
    \ Set the 'handling' Parameter  . . . . . . . 12\n     8.3.  UA Behavior to Process\
    \ 'multipart/alternative' . . . . . . 13\n     8.4.  UAS Behavior to Report Unsupported\
    \ Message Bodies  . . . . 13\n   9.  Message Body Processing  . . . . . . . .\
    \ . . . . . . . . . . . 14\n     9.1.  Background on References to Message Body\
    \ Parts . . . . . . 14\n     9.2.  UA Behavior to Generate References to Message\
    \ Bodies . . . 14\n     9.3.  UA Behavior to Process Message Bodies  . . . . .\
    \ . . . . . 14\n     9.4.  The 'by-reference' Disposition Type  . . . . . . .\
    \ . . . . 15\n   10. Guidelines to Authors of SIP Extensions  . . . . . . . .\
    \ . . . 16\n   11. Security Considerations  . . . . . . . . . . . . . . . . .\
    \ . . 16\n   12. IANA Considerations  . . . . . . . . . . . . . . . . . . . .\
    \ . 17\n     12.1. Registration of the 'by-reference' Disposition Type  . . .\
    \ 17\n     12.2. Update of the 'handling' Parameter Registration  . . . . . 17\n\
    \   13. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 17\n  \
    \ 14. References . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n    \
    \ 14.1. Normative References . . . . . . . . . . . . . . . . . . . 17\n     14.2.\
    \ Informative References . . . . . . . . . . . . . . . . . . 18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Message body handling in SIP was originally specified in\
    \ [RFC3261],\n   which relied on earlier specifications (e.g., MIME) to describe\
    \ some\n   areas.  This document contains background material on how bodies are\n\
    \   handled in SIP and normative material on areas that had not been\n   specified\
    \ before or whose specifications needed to be completed.\n   Sections containing\
    \ background material are clearly identified as\n   such by their titles.  The\
    \ material on the normative sections is\n   based on experience gained since [RFC3261]\
    \ was written.  Implementers\n   need to implement what is specified in [RFC3261]\
    \ (and its references)\n   in addition to what is specified in this document.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   The following abbreviations are used in this document.\n      UA: User Agent\n\
    \      UAC: User Agent Client\n      UAS: User Agent Server\n      URL: Uniform\
    \ Resource Locator\n"
- title: 3.  Message Body Encoding
  contents:
  - "3.  Message Body Encoding\n   This section deals with the encoding of message\
    \ bodies in SIP.\n"
- title: 3.1.  Background on Message Body Encoding
  contents:
  - "3.1.  Background on Message Body Encoding\n   SIP [RFC3261] messages consist\
    \ of an initial line (request line in\n   requests and status line in responses),\
    \ a set of header fields, and\n   an optional message body.  The message body\
    \ is described using header\n   fields such as Content-Disposition, Content-Encoding,\
    \ and Content-\n   Type, which provide information on its contents.  Figure 1\
    \ shows a\n   SIP message that carries a body.  Some of the header fields are\
    \ not\n   shown for simplicity:\n      INVITE sip:conf-fact@example.com SIP/2.0\n\
    \      Content-Type: application/sdp\n      Content-Length: 192\n      v=0\n \
    \     o=alice 2890844526 2890842807 IN IP4 atlanta.example.com\n      s=-\n  \
    \    c=IN IP4 192.0.2.1\n      t=0 0\n      m=audio 20000 RTP/AVP 0\n      a=rtpmap:0\
    \ PCMU/8000\n      m=video 20002 RTP/AVP 31\n      a=rtpmap:31 H261/90000\n  \
    \                 Figure 1: SIP message carrying a body\n   The message body of\
    \ a SIP message can be divided into various body\n   parts.  Multipart message\
    \ bodies are encoded using the MIME\n   (Multipurpose Internet Mail Extensions)\
    \ [RFC2045] format.  Body parts\n   are also described using header fields such\
    \ as Content-Disposition,\n   Content-Encoding, and Content-Type, which provide\
    \ information on the\n   contents of a particular body part.  Figure 2 shows a\
    \ SIP message\n   that carries two body parts.  Some of the header fields are\
    \ not shown\n   for simplicity:\n      INVITE sip:conf-fact@example.com SIP/2.0\n\
    \      Content-Type: multipart/mixed;boundary=\"boundary1\"\n      Content-Length:\
    \ 619\n      --boundary1\n      Content-Type: application/sdp\n      v=0\n   \
    \   o=alice 2890844526 2890842807 IN IP4 atlanta.example.com\n      s=-\n    \
    \  c=IN IP4 192.0.2.1\n      t=0 0\n      m=audio 20000 RTP/AVP 0\n      a=rtpmap:0\
    \ PCMU/8000\n      m=video 20002 RTP/AVP 31\n      a=rtpmap:31 H261/90000\n  \
    \    --boundary1\n      Content-Type: application/resource-lists+xml\n      Content-Disposition:\
    \ recipient-list\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <resource-lists\
    \ xmlns=\"urn:ietf:params:xml:ns:resource-lists\">\n        <list>\n         \
    \ <entry uri=\"sip:bill@example.com\"/>\n          <entry uri=\"sip:randy@example.net\"\
    />\n          <entry uri=\"sip:joe@example.org\"/>\n        </list>\n      </resource-lists>\n\
    \      --boundary1--\n                   Figure 2: SIP message carrying a body\n\
    \   SIP uses S/MIME [RFC3851] to protect message bodies.  As specified in\n  \
    \ [RFC3261], UASs that cannot decrypt a message body or a body part can\n   use\
    \ the 493 (Undecipherable) response to report the error.\n"
- title: 3.2.  UA Behavior to Encode Binary Message Bodies
  contents:
  - "3.2.  UA Behavior to Encode Binary Message Bodies\n   SIP messages can carry\
    \ binary message bodies such as legacy\n   signalling objects [RFC3204].  SIP\
    \ proxy servers are 8-bit safe.\n   That is, they are able to handle binary bodies.\
    \  Therefore, there is\n   no need to use encodings such as base64 to transport\
    \ binary bodies in\n   SIP messages.  Consequently, UAs SHOULD use the binary\
    \ transfer\n   encoding [RFC4289] for all payloads in SIP, including binary\n\
    \   payloads.  The only case where a UA MAY use a different encoding is\n   when\
    \ transferring application data between applications that only\n   handle a different\
    \ encoding (e.g., base64).\n"
- title: 4.  'multipart' Message Bodies
  contents:
  - "4.  'multipart' Message Bodies\n   This section deals with 'multipart' message\
    \ bodies and their\n   handling.\n"
- title: 4.1.  Background on 'multipart' Message Bodies
  contents:
  - "4.1.  Background on 'multipart' Message Bodies\n   [RFC3261] did not mandate\
    \ support for 'multipart' message bodies in\n   MIME format [RFC2046].  However,\
    \ since [RFC3261] was written, many\n   SIP extensions rely on them.\n   The use\
    \ of 'multipart/mixed' MIME bodies is a useful tool to build\n   SIP extensions.\
    \  An example of such an extension could be the\n   inclusion of location information\
    \ in an INVITE request.  Such an\n   INVITE request would use the 'multipart/mixed'\
    \ MIME type [RFC2046] to\n   carry two body parts: a session description and a\
    \ location object.\n   An example of an existing extension that uses 'multipart/mixed'\
    \ to\n   send a session description and a legacy-signalling object is defined\n\
    \   in [RFC3204].\n   Another MIME type that is useful to build SIP extensions\
    \ is\n   'multipart/alternative' [RFC2046].  Each body part within a\n   'multipart/alternative'\
    \ carries an alternative version of the same\n   information.\n   The transition\
    \ from SDP to new session description protocols could be\n   implemented using\
    \ 'multipart/alternative' bodies.  SIP messages\n   (e.g., INVITE requests) could\
    \ carry a 'multipart/alternative' body\n   with two body parts: a session description\
    \ written in SDP and a\n   session description written in a newer session description\
    \ format.\n   Legacy recipient UAs would use the session description written in\n\
    \   SDP.  New recipient UAs would use the one written in the newer\n   format.\n\
    \   Nested MIME bodies are yet another useful tool to build and combine\n   SIP\
    \ extensions.  Using the extensions in the previous examples, a UA\n   that supported\
    \ a new session description format and that needed to\n   include a location object\
    \ in an INVITE request would include a\n   'multipart/mixed' body with two body\
    \ parts: a location object and a\n   'multipart/alternative'.  The 'multipart/alternative'\
    \ body part\n   would, in turn, have two body parts: a session description written\
    \ in\n   SDP and a session description written in the newer session\n   description\
    \ format.\n"
- title: 4.2.  Mandatory Support for 'multipart' Message Bodies
  contents:
  - "4.2.  Mandatory Support for 'multipart' Message Bodies\n   For all MIME-based\
    \ extensions to work, the recipient needs to be able\n   to decode the multipart\
    \ bodies.  Therefore, SIP UAs MUST support\n   parsing 'multipart' MIME bodies,\
    \ including nested body parts.\n   Additionally, UAs MUST support the 'multipart/mixed'\
    \ and 'multipart/\n   alternative' MIME types.  Support for other MIME types such\
    \ as\n   'multipart/related' is OPTIONAL.\n      Note that, by default, unknown\
    \ 'multipart' subtypes are treated as\n      'multipart/mixed'.  Also note that\
    \ SIP extensions can also include\n      'multipart' MIME bodies in responses.\
    \  That is why both UACs and\n      UASs need to support 'multipart' bodies.\n\
    \   Legacy SIP UAs without support for 'multipart' bodies generate a 415\n   (Unsupported\
    \ Media Type) response when they receive a 'multipart'\n   body in a request.\
    \  A UAC sending a 'multipart' body can receive such\n   an error response when\
    \ communicating with a legacy SIP UA that\n   predates this specification.\n \
    \     It has been observed in the field that a number of legacy SIP UAs\n    \
    \  without support for 'multipart' bodies simply ignored those bodies\n      when\
    \ they were received.  These UAs did not return any error\n      response.  Unsurprisingly,\
    \ SIP UAs not being able to report this\n      type of error have caused serious\
    \ interoperability problems in the\n      past.\n"
- title: 4.3.  UA Behavior to Generate 'multipart' Message Bodies
  contents:
  - "4.3.  UA Behavior to Generate 'multipart' Message Bodies\n   UAs SHOULD avoid\
    \ unnecessarily nesting body parts because doing so\n   would, unnecessarily,\
    \ make processing the body more laborious for the\n   receiver.  However, [RFC2046]\
    \ states that a 'multipart' media type\n   with a single body part is useful in\
    \ some circumstances (e.g., for\n   sending non-text media types).  In any case,\
    \ UAs SHOULD NOT nest one\n   'multipart/mixed' within another unless there is\
    \ a need to reference\n   the nested one (i.e., using the Content ID of the nested\
    \ body part).\n   Additionally, UAs SHOULD NOT nest one 'multipart/alternative'\
    \ within\n   another.\n      Note that UAs receiving unnecessarily nested body\
    \ parts treat them\n      as if they were not nested.\n"
- title: 5.  'multipart/mixed' Message Bodies
  contents:
  - "5.  'multipart/mixed' Message Bodies\n   This section does not specify any additional\
    \ behavior regarding how\n   to generate and process 'multipart/mixed' bodies.\
    \  This section is\n   simply included for completeness.\n"
- title: 6.  'multipart/alternative' Message Bodies
  contents:
  - "6.  'multipart/alternative' Message Bodies\n   This section deals with 'multipart/alternative'\
    \ message bodies and\n   their handling.\n"
- title: 6.1.  Background on 'multipart/alternative' Message Bodies
  contents:
  - "6.1.  Background on 'multipart/alternative' Message Bodies\n   Each body part\
    \ within a 'multipart/alternative' carries an\n   alternative version of the same\
    \ information.  The body parts are\n   ordered so that the last one is the richest\
    \ representation of the\n   information.  The recipient of a 'multipart/alternative'\
    \ body chooses\n   the last body part it understands.\n      Note that within\
    \ a body part encoded in a given format (i.e., of a\n      given content type),\
    \ there can be optional elements that can\n      provide richer information to\
    \ the recipient in case the recipient\n      supports them.  For example, in SDP\
    \ (Session Description Protocol)\n      [RFC4566], those optional elements are\
    \ encoded in 'a' lines.\n      These types of optional elements are internal to\
    \ a body part and\n      are not visible at the MIME level.  That is, a body part\
    \ is\n      understood if the recipient understands its content type,\n      regardless\
    \ of whether or not the body part's optional elements are\n      understood.\n\
    \      Note as well that each part of a 'multipart/alternative' body\n      represents\
    \ the same data, but the mapping between any two parts is\n      not necessarily\
    \ without information loss.  For example,\n      information can be lost when\
    \ translating 'text/html' to 'text/\n      plain'.  [RFC2046] recommends that\
    \ each part should have a\n      different Content-ID value in the case where\
    \ the information\n      content of the two parts is not identical.\n"
- title: 6.2.  UA Behavior to Generate 'multipart/alternative' Message Bodies
  contents:
  - "6.2.  UA Behavior to Generate 'multipart/alternative' Message Bodies\n   Section\
    \ 8.2 mandates all the top-level body parts within a\n   'multipart/alternative'\
    \ to have the same disposition type.\n   The 'session' and 'early-session' [RFC3959]\
    \ disposition types require\n   that all the body parts of a 'multipart/alternative'\
    \ body have\n   different content types.  Consequently, for the 'session' and\
    \ 'early-\n   session' disposition types, UAs MUST NOT place more than one body\n\
    \   part with a given content type in a 'multipart/alternative' body.\n   That\
    \ is, for 'session' and 'early-session', no body part within a\n   'multipart/alternative'\
    \ can have the same content type as another\n   body part within the same 'multipart/alternative'.\n"
- title: 6.3.  UA Behavior to Process 'multipart/alternative' Message Bodies
  contents:
  - "6.3.  UA Behavior to Process 'multipart/alternative' Message Bodies\n   This\
    \ section does not specify any additional behavior regarding how\n   to process\
    \ 'multipart/alternative' bodies.  This section is simply\n   included for completeness.\n"
- title: 7.  'multipart/related' Message Bodies
  contents:
  - "7.  'multipart/related' Message Bodies\n   This section deals with 'multipart/related'\
    \ message bodies and their\n   handling.\n"
- title: 7.1.  Background on 'multipart/related' Message Bodies
  contents:
  - "7.1.  Background on 'multipart/related' Message Bodies\n   Compound objects in\
    \ MIME are represented using the 'multipart/\n   related' content type [RFC2387].\
    \  The body parts within a particular\n   'multipart/related' body are all part\
    \ of a compound object and are\n   processed as such.  The body part within a\
    \ 'multipart/related' body\n   that needs to be processed first is referred to\
    \ as the 'root' body\n   part.  The root body part of a 'multipart/related' body\
    \ is identified\n   by the 'start' parameter, which is a Content-Type header field\n\
    \   parameter and contains a Content-ID URL pointing to the root body\n   part.\
    \  If the start parameter is not present, the root body part is,\n   by default,\
    \ the first body part of the 'multipart/related'.  An\n   example of a compound\
    \ object is a web page that contains images.  The\n   html body part would be\
    \ the root.  The remaining body parts would\n   contain the images.  An example\
    \ of a SIP extension using 'multipart/\n   related' is specified in [RFC4662].\n"
- title: 7.2.  UA Behavior to Generate 'multipart/related' Message Bodies
  contents:
  - "7.2.  UA Behavior to Generate 'multipart/related' Message Bodies\n   This section\
    \ does not specify any additional behavior regarding how\n   to generate 'multipart/related'\
    \ bodies.  This section is simply\n   included for completeness.\n"
- title: 7.3.  UA Behavior to Process 'multipart/related' Message Bodies
  contents:
  - "7.3.  UA Behavior to Process 'multipart/related' Message Bodies\n   Per [RFC2387],\
    \ a UA processing a 'multipart/related' body processes\n   the body as a compound\
    \ object ignoring the disposition types of the\n   body parts within it.  Ignoring\
    \ the disposition types of the\n   individual body parts makes sense in the context\
    \ in which 'multipart/\n   related' was originally specified.  For instance, in\
    \ the example of\n   the web page, the implicit disposition type for the images\
    \ would be\n   'inline', since the images are displayed as indicated by the root\n\
    \   html file.  However, in SIP, the disposition types of the individual\n   body\
    \ parts within a 'multipart/related' play an important role and,\n   thus, need\
    \ to be considered by the UA processing the 'multipart/\n   related'.  Different\
    \ SIP extensions that use the same disposition\n   type for the 'multipart/related'\
    \ body can be distinguished by the\n   disposition types of the individual body\
    \ parts within the 'multipart/\n   related'.  Consequently, SIP UAs processing\
    \ a 'multipart/related'\n   body with a given disposition type MUST process the\
    \ disposition types\n   of the body parts within it according to the SIP extension\
    \ making use\n   the disposition type of the 'multipart/related'.\n      Note\
    \ that UAs that do not understand 'multipart/related' will\n      treat 'multipart/related'\
    \ bodies as 'multipart/mixed' bodies.\n      These UAs will not be able to process\
    \ a given body as a compound\n      object.  Instead, they will process the body\
    \ parts according to\n      their disposition type as if each body part was independent\
    \ from\n      each other.\n"
- title: 8.  Disposition Types
  contents:
  - "8.  Disposition Types\n   This section deals with disposition types in message\
    \ bodies.\n"
- title: 8.1.  Background on Content and Disposition Types in SIP
  contents:
  - "8.1.  Background on Content and Disposition Types in SIP\n   The Content-Disposition\
    \ header field, defined in [RFC2183] and\n   extended by [RFC3261], describes\
    \ how to handle a SIP message's body\n   or an individual body part.  Examples\
    \ of disposition types used in\n   SIP in the Content-Disposition header field\
    \ are 'session' and\n   'render'.\n   [RFC3204] and [RFC3459] define the 'handling'\
    \ parameter for the\n   Content-Disposition header field.  This parameter describes\
    \ how a UAS\n   reacts if it receives a message body whose content type or\n \
    \  disposition type it does not understand.  If the parameter has the\n   value\
    \ 'optional', the UAS ignores the message body; if the parameter\n   has the value\
    \ 'required', the UAS returns a 415 (Unsupported Media\n   Type) response.  The\
    \ default value for the 'handling' parameter is\n   'required'.  The following\
    \ is an example of a Content-Disposition\n   header field:\n       Content-Disposition:\
    \ signal; handling=optional\n   [RFC3204] identifies two situations where a UAS\
    \ (User Agent Server)\n   needs to reject a request with a body part whose handling\
    \ is\n   required:\n   1.  if it has an unknown content type.\n   2.  if it has\
    \ an unknown disposition type.\n   If the UAS did not understand the content type\
    \ of the body part, the\n   UAS can add an Accept header field to its 415 (Unsupported\
    \ Media\n   Type) response listing the content types that the UAS does\n   understand.\
    \  Nevertheless, there is no mechanism for a UAS that does\n   not understand\
    \ the disposition type of a body part to inform the UAC\n   about which disposition\
    \ type was not understood or about the\n   disposition types that are understood\
    \ by the UAS.\n   The reason for not having such a mechanism is that disposition\
    \ types\n   are typically supported within a context.  Outside that context, a\
    \ UA\n   need not support the disposition type.  For example, a UA can support\n\
    \   the 'session' disposition type for body parts in INVITE and UPDATE\n   requests\
    \ and their responses.  However, the same UA would not support\n   the 'session'\
    \ disposition type in MESSAGE requests.\n   In another example, a UA can support\
    \ the 'render' disposition type\n   for 'text/plain' and 'text/html' body parts\
    \ in MESSAGE requests.\n   Additionally, the UA can support the 'session' disposition\
    \ type for\n   'application/sdp' body parts in INVITE and UPDATE requests and\
    \ their\n   responses.  However, the UA might not support the 'render'\n   disposition\
    \ type for 'application/sdp' body parts in MESSAGE\n   requests, even if, in different\
    \ contexts, the UA supported all of the\n   following: the 'render' disposition\
    \ type, the 'application/sdp'\n   content type, and the MESSAGE method.\n   A\
    \ given context is generally (but not necessarily) defined by a\n   method, a\
    \ disposition type, and a content type.  Support for a\n   specific context is\
    \ usually defined within an extension.  For\n   example, the extension for instant\
    \ messaging in SIP [RFC3428]\n   mandates support for the MESSAGE method, the\
    \ 'render' disposition\n   type, and the 'text/plain' content type.\n      Note\
    \ that, effectively, content types are also supported within a\n      context.\
    \  Therefore, the use of the Accept header field in a 415\n      (Unsupported\
    \ Media Type) response is not enough to describe in\n      which contexts a particular\
    \ content type is supported.\n   Therefore, support for a particular disposition\
    \ type within a given\n   context is typically signalled by the use of a particular\
    \ method or\n   an option-tag in a Supported or a Require header field.  When\
    \ support\n   for a particular disposition type within a context is mandated,\n\
    \   support for a default content type is also mandated (e.g., a UA that\n   supports\
    \ the 'session' disposition type in an INVITE request needs to\n   support the\
    \ 'application/sdp' content type).\n"
- title: 8.2.  UA Behavior to Set the 'handling' Parameter
  contents:
  - "8.2.  UA Behavior to Set the 'handling' Parameter\n   As stated earlier, the\
    \ 'handling' Content-Disposition parameter can\n   take two values: 'required'\
    \ or 'optional'.  While it is typically\n   easy for a UA to decide which type\
    \ of handling an individual body\n   part requires, setting the 'handling' parameter\
    \ of 'multipart' bodies\n   requires extra considerations.\n   If the handling\
    \ of a 'multipart/mixed' body as a whole is required\n   for processing its enclosing\
    \ body part or message, the UA MUST set\n   the 'handling' parameter of the 'multipart/mixed'\
    \ body to 'required'.\n   Otherwise, the UA MUST set it to 'optional'.  The 'handling'\n\
    \   parameters of the top-level body parts within the 'multipart/mixed'\n   body\
    \ are set independently from the 'handling' parameter of the\n   'multipart/mixed'\
    \ body.  If the handling of a particular top-level\n   body part is required,\
    \ the UA MUST set the 'handling' parameter of\n   that body part 'required'. \
    \ Otherwise, the UA MUST set it to\n   'optional'.\n      Per the previous rules,\
    \ a 'multipart/mixed' body whose handling is\n      optional can contain body\
    \ parts whose handling is required.  In\n      such case, the receiver is required\
    \ to process the body parts\n      whose handling is required if and only if the\
    \ receiver decides to\n      process the optional 'multipart/mixed' body.\n  \
    \    Also per the previous rules, a 'multipart/mixed' body whose\n      handling\
    \ is required can contain only body parts whose handling is\n      optional. \
    \ In such case, the receiver is required to process the\n      body as a whole\
    \ but, when processing it, the receiver may decide\n      (based on its local\
    \ policy) not to process any of the body parts.\n   The 'handling' parameter is\
    \ a Content-Disposition parameter.\n   Therefore, in order to set this parameter,\
    \ it is necessary to provide\n   the 'multipart/mixed' body with a disposition\
    \ type.  Per [RFC3261],\n   the default disposition type for 'application/sdp'\
    \ is 'session' and\n   for other bodies is 'render'.  UAs SHOULD assign 'multipart/mixed'\n\
    \   bodies a disposition type of 'render'.\n      Note that the fact that 'multipart/mixed'\
    \ bodies have a default\n      disposition type of 'render' does not imply that\
    \ they will be\n      rendered to the user.  The way the body parts within the\n\
    \      'multipart/mixed' are handled depends on the disposition types of\n   \
    \   the individual body parts.  The actual disposition type of the\n      whole\
    \ 'multipart/mixed' is irrelevant.  The 'render' disposition\n      type has been\
    \ chosen for 'multipart/mixed' bodies simply because\n      'render' is the default\
    \ disposition type in SIP.\n   If the handling of a 'multipart/alternative' body\
    \ as a whole is\n   required for processing its enclosing body part or message,\
    \ the UA\n   MUST set the 'handling' parameter of the 'multipart/alternative'\
    \ body\n   to 'required'.  Otherwise, the UA MUST set it to 'optional'.  The UA\n\
    \   SHOULD also set the 'handling' parameter of all the top-level body\n   part\
    \ within the 'multipart/alternative' to 'optional'.\n      The receiver will process\
    \ the body parts based on the handling\n      parameter of the 'multipart/alternative'\
    \ body.  The receiver will\n      ignore the handling parameters of the body parts.\
    \  That is why\n      setting them to 'optional' is at the \"SHOULD\" level and\
    \ not at the\n      \"MUST\" level -- their value is irrelevant.\n   The UA MUST\
    \ use the same disposition type for the 'multipart/\n   alternative' body and\
    \ all its top-level body parts.\n   If the handling of a 'multipart/related' body\
    \ as a whole is required\n   for processing its enclosing body part or message,\
    \ the UA MUST set\n   the 'handling' parameter of the 'multipart/related' body\
    \ to\n   'required'.  Otherwise, the UA MUST set it to 'optional'.  The\n   'handling'\
    \ parameters of the top-level body parts within the\n   'multipart/related' body\
    \ are set independently from the 'handling'\n   parameter of the 'multipart/related'\
    \ body.  If the handling of a\n   particular top-level body part is required,\
    \ the UA MUST set the\n   'handling' parameter of that body part to 'required'.\
    \  Otherwise, the\n   UA MUST set it to 'optional'.  If at least one top-level\
    \ body part\n   within a 'multipart/related' body has a 'handling' parameter of\n\
    \   'required', the UA SHOULD set the 'handling' parameter of the root\n   body\
    \ part to 'required'.\n"
- title: 8.3.  UA Behavior to Process 'multipart/alternative'
  contents:
  - "8.3.  UA Behavior to Process 'multipart/alternative'\n   The receiver of a 'multipart/alternative'\
    \ body MUST process the body\n   based on its handling parameter.  The receiver\
    \ SHOULD ignore the\n   handling parameters of the body parts within the 'multipart/\n\
    \   alternative'.\n"
- title: 8.4.  UAS Behavior to Report Unsupported Message Bodies
  contents:
  - "8.4.  UAS Behavior to Report Unsupported Message Bodies\n   If a UAS cannot process\
    \ a request because, in the given context, the\n   UAS does not support the content\
    \ type or the disposition type of a\n   body part whose handling is required,\
    \ the UAS SHOULD return a 415\n   (Unsupported Media Type) response even if the\
    \ UAS supported the\n   content type, the disposition type, or both in a different\
    \ context.\n      Consequently, it is possible to receive a 415 (Unsupported Media\n\
    \      Type) response with an Accept header field containing all the\n      content\
    \ types used in the request.\n   If a UAS receives a request with a body part\
    \ whose disposition type\n   is not compatible with the way the body part is supposed\
    \ to be\n   handled according to other parts of the SIP message (e.g., a Refer-To\n\
    \   header field with a Content-ID URL pointing to a body part whose\n   disposition\
    \ type is 'session'), the UAS SHOULD return a 415\n   (Unsupported Media Type)\
    \ response.\n"
- title: 9.  Message Body Processing
  contents:
  - "9.  Message Body Processing\n   This section deals with the processing of message\
    \ bodies and how that\n   processing is influenced by the presence of references\
    \ to them.\n"
- title: 9.1.  Background on References to Message Body Parts
  contents:
  - "9.1.  Background on References to Message Body Parts\n   Content-ID URLs allow\
    \ creating references to body parts.  A given\n   Content-ID URL [RFC2392], which\
    \ can appear in a header field or\n   within a body part (e.g., in an SDP attribute),\
    \ points to a\n   particular body part.  The way to handle that body part is defined\
    \ by\n   the field the Content-ID URL appears.  For example, the extension to\n\
    \   refer to multiple resources in SIP [RFC5368] places a Content-ID URL\n   in\
    \ a Refer-To header field.  Such a Content-ID URL points to a body\n   part that\
    \ carries a URI list.  In another example, the extension for\n   file transfer\
    \ in SDP [RFC5547] places a Content-ID URL in a 'file-\n   icon' SDP attribute.\
    \  This Content-ID URL points to a body part that\n   carries a (typically small)\
    \ picture.\n"
- title: 9.2.  UA Behavior to Generate References to Message Bodies
  contents:
  - "9.2.  UA Behavior to Generate References to Message Bodies\n   UAs MUST only\
    \ include forward references in the SIP messages they\n   generate.  That is,\
    \ an element in a SIP message can reference a body\n   part only if the body part\
    \ appears after the element.  Consequently,\n   a given body part can only be\
    \ referenced by another body part that\n   appears before it or by a header field.\
    \  Having only forward\n   references allows recipients to process body parts\
    \ as they parse\n   them.  They do not need to parse the remainder of the message\
    \ in\n   order to process a body part.\n      It was considered to only allow\
    \ (forward) references among body\n      parts that belonged to the same 'multipart/related'\
    \ [RFC2387]\n      wrapper.  However, it was finally decided that this extra\n\
    \      constraint was not necessary.\n"
- title: 9.3.  UA Behavior to Process Message Bodies
  contents:
  - "9.3.  UA Behavior to Process Message Bodies\n   In order to process a message\
    \ body or a body part, a UA needs to know\n   whether a SIP header field or another\
    \ body part contains a reference\n   to the message body or body part (e.g., a\
    \ Content-ID URL pointing to\n   it).  If the body part is not referenced in any\
    \ way (e.g., there are\n   no header fields or other body parts with a Content-ID\
    \ URL pointing\n   to it), the UA processes the body part as indicated by its\n\
    \   disposition type and the context in which the body part was received.\n  \
    \ If the SIP message contains a reference to the body part, the UA\n   processes\
    \ the body part according to the reference.  If the SIP\n   message contains more\
    \ than one reference to the body part (e.g., two\n   header fields contain Content-ID\
    \ URLs pointing to the body part), the\n   UA processes the body part as many\
    \ times as references are.\n      Note that, following the rules in [RFC3204],\
    \ if a UA does not\n      understand a body part whose handling is optional, the\
    \ UA ignores\n      it.  Also note that the content indirection mechanism in SIP\n\
    \      [RFC4483] allows UAs to point to external bodies.  Therefore, a UA\n  \
    \    receiving a SIP message that uses content indirection could need\n      to\
    \ fetch a body part (e.g., using HTTP [RFC2616]) in order to\n      process it.\n"
- title: 9.4.  The 'by-reference' Disposition Type
  contents:
  - "9.4.  The 'by-reference' Disposition Type\n   Per the rules in Section 9.3, if\
    \ a SIP message contains a reference\n   to a body part, the UA processes the\
    \ body part according to the\n   reference.  Since the reference provides the\
    \ context in which the\n   body part needs to be processed, the disposition type\
    \ of the body\n   part is irrelevant.  However, a UA that missed a reference to\
    \ a body\n   part (e.g., because the reference was in a header field the UA did\n\
    \   not support) would attempt to process the body part according to its\n   disposition\
    \ type alone.  To keep this from happening, we define a new\n   disposition type\
    \ for the Content-Disposition header field: by-\n   reference.\n   A body part\
    \ whose disposition type is 'by-reference' needs to be\n   handled according to\
    \ a reference to the body part that is located in\n   the same SIP message as\
    \ the body part (given that SIP only allows\n   forward references, the reference\
    \ will appear in the same SIP message\n   before the body part).  A recipient\
    \ of a body part whose disposition\n   type is 'by-reference' that cannot find\
    \ any reference to the body\n   part (e.g., the reference was in a header field\
    \ the recipient does\n   not support and, thus, did not process) MUST NOT process\
    \ the body\n   part.  Consequently, if the handling of the body part was required,\n\
    \   the UA needs to report an error.\n      Note that extensions that predate\
    \ this specification use\n      references to body parts whose disposition type\
    \ is not 'by-\n      reference'.  Those extensions use option-tags to make sure\
    \ the\n      recipient understands the whole extension and, thus, cannot miss\n\
    \      the reference and attempt to process the body part according to\n     \
    \ its disposition type alone.\n"
- title: 10.  Guidelines to Authors of SIP Extensions
  contents:
  - "10.  Guidelines to Authors of SIP Extensions\n   These guidelines are intended\
    \ for authors of SIP extensions that\n   involve, in some way, message bodies\
    \ or body parts.  These guidelines\n   discuss aspects that authors of such extensions\
    \ need to consider when\n   designing them.\n   This specification mandates support\
    \ for 'multipart/mixed' and\n   'multipart/alternative'.  At present, there are\
    \ no SIP extensions\n   that use different 'multipart' subtypes such as parallel\
    \ [RFC2046] or\n   digest [RFC2046].  If such extensions were to be defined in\
    \ the\n   future, their authors would need to make sure (e.g., by using an\n \
    \  option-tag or by other means) that entities receiving those\n   'multipart'\
    \ subtypes were able to process them.  As stated earlier,\n   UAs treat unknown\
    \ 'multipart' subtypes as 'multipart/mixed'.\n   Authors of SIP extensions making\
    \ use of 'multipart/related' bodies\n   have to explicitly address the handling\
    \ of the disposition types of\n   the body parts within the 'multipart/related'\
    \ body.  Authors wishing\n   to make use of 'multipart/related' bodies should\
    \ keep in mind that\n   UAs that do not understand 'multipart/related' will treat\
    \ it as\n   'multipart/mixed'.  If such treatment by a recipient is not\n   acceptable\
    \ for a particular extension, the authors of such extension\n   would need to\
    \ make sure (e.g., by using an option-tag or by other\n   means) that entities\
    \ receiving the 'multipart/related' body were able\n   to correctly process them.\n\
    \   As stated earlier, SIP extensions can also include 'multipart' MIME\n   bodies\
    \ in responses.  Hence, a response can be extremely complex and\n   the UAC receiving\
    \ the response might not be able to process it\n   correctly.  Because UACs receiving\
    \ a response cannot report errors to\n   the UAS that generated the response (i.e.,\
    \ error responses can only\n   be generated for requests), authors of SIP extensions\
    \ need to make\n   sure that requests clearly indicate (e.g., by using an option-tag\
    \ or\n   by other means) the capabilities of the UAC so that UASs can decide\n\
    \   what to include in their responses.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   This document specifies how SIP entities handle\
    \ message bodies.\n   [RFC3261] discusses what type of information is encoded\
    \ in SIP\n   message bodies and how SIP entities can protect that information.\
    \  In\n   addition to the hop-by-hop security SIP can provide, SIP can also\n\
    \   secure information in an end-to-end fashion.  SIP message bodies can\n   be\
    \ end-to-end encrypted and integrity protected using S/MIME\n   [RFC3851], as\
    \ described in [RFC3261].\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   This document contains two actions that have been\
    \ completed by IANA.\n"
- title: 12.1.  Registration of the 'by-reference' Disposition Type
  contents:
  - "12.1.  Registration of the 'by-reference' Disposition Type\n   This document\
    \ defines a new Content-Disposition header field\n   disposition type (by-reference)\
    \ Section 9.4.  This value has been\n   registered in the IANA registry for Mail\
    \ Content Disposition Values\n   with the following description:\n         by-reference\
    \    The body needs to be handled according to a\n                         reference\
    \ to the body that is located in\n                         the same SIP message\
    \ as the body.\n"
- title: 12.2.  Update of the 'handling' Parameter Registration
  contents:
  - "12.2.  Update of the 'handling' Parameter Registration\n   References to this\
    \ specification, to [RFC3204], and to [RFC3459] have\n   been added to the entry\
    \ for the Content-Disposition 'handling'\n   parameter in the Header Field Parameters\
    \ and Parameter Values\n   registry.  The following is the resulting entry.\n\
    \                                         Predefined\n   Header Field        \
    \ Parameter Name     Values       Reference\n   -------------------  ---------------\
    \  ---------  -------------------\n   Content-Disposition     handling       \
    \  Yes     [RFC3204] [RFC3261]\n                                             \
    \       [RFC3459] [RFC5621]\n"
- title: 13.  Acknowledgements
  contents:
  - "13.  Acknowledgements\n   The ideas in this document were originally discussed\
    \ with Paul\n   Kyzivat.  Christer Holmberg, Francois Audet, Dan Wing, Adam Roach,\n\
    \   Keith Drage, and Dale Worley provided comments on it.  Dave Crocker\n   performed\
    \ a thorough review on the whole document.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [RFC2045]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n              Extensions (MIME) Part One: Format of Internet\
    \ Message\n              Bodies\", RFC 2045, November 1996.\n   [RFC2046]  Freed,\
    \ N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions\
    \ (MIME) Part Two: Media Types\", RFC 2046,\n              November 1996.\n  \
    \ [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n          \
    \    Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2183]  Troost,\
    \ R., Dorner, S., and K. Moore, \"Communicating\n              Presentation Information\
    \ in Internet Messages: The\n              Content-Disposition Header Field\"\
    , RFC 2183, August 1997.\n   [RFC2387]  Levinson, E., \"The MIME Multipart/Related\
    \ Content-type\",\n              RFC 2387, August 1998.\n   [RFC2392]  Levinson,\
    \ E., \"Content-ID and Message-ID Uniform Resource\n              Locators\",\
    \ RFC 2392, August 1998.\n   [RFC3204]  Zimmerer, E., Peterson, J., Vemuri, A.,\
    \ Ong, L., Audet,\n              F., Watson, M., and M. Zonoun, \"MIME media types\
    \ for ISUP\n              and QSIG Objects\", RFC 3204, December 2001.\n   [RFC3261]\
    \  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,\
    \ Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:\
    \ Session Initiation Protocol\", RFC 3261,\n              June 2002.\n   [RFC3459]\
    \  Burger, E., \"Critical Content Multi-purpose Internet Mail\n              Extensions\
    \ (MIME) Parameter\", RFC 3459, January 2003.\n   [RFC3851]  Ramsdell, B., \"\
    Secure/Multipurpose Internet Mail\n              Extensions (S/MIME) Version 3.1\
    \ Message Specification\",\n              RFC 3851, July 2004.\n   [RFC3959] \
    \ Camarillo, G., \"The Early Session Disposition Type for the\n              Session\
    \ Initiation Protocol (SIP)\", RFC 3959,\n              December 2004.\n   [RFC4483]\
    \  Burger, E., \"A Mechanism for Content Indirection in\n              Session\
    \ Initiation Protocol (SIP) Messages\", RFC 4483,\n              May 2006.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [RFC2616]  Fielding, R., Gettys, J., Mogul,\
    \ J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee,\
    \ \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n\
    \   [RFC3428]  Campbell, B., Rosenberg, J., Schulzrinne, H., Huitema, C.,\n  \
    \            and D. Gurle, \"Session Initiation Protocol (SIP) Extension\n   \
    \           for Instant Messaging\", RFC 3428, December 2002.\n   [RFC4289]  Freed,\
    \ N. and J. Klensin, \"Multipurpose Internet Mail\n              Extensions (MIME)\
    \ Part Four: Registration Procedures\",\n              BCP 13, RFC 4289, December\
    \ 2005.\n   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n\
    \              Description Protocol\", RFC 4566, July 2006.\n   [RFC4662]  Roach,\
    \ A., Campbell, B., and J. Rosenberg, \"A Session\n              Initiation Protocol\
    \ (SIP) Event Notification Extension for\n              Resource Lists\", RFC\
    \ 4662, August 2006.\n   [RFC5368]  Camarillo, G., Niemi, A., Isomaki, M., Garcia-Martin,\
    \ M.,\n              and H. Khartabil, \"Referring to Multiple Resources in the\n\
    \              Session Initiation Protocol (SIP)\", RFC 5368,\n              October\
    \ 2008.\n   [RFC5547]  Garcia-Martin, M., Isomaki, M., Camarillo, G., Loreto,\
    \ S.,\n              and P. Kyzivat, \"A Session Description Protocol (SDP)\n\
    \              Offer/Answer Mechanism to Enable File Transfer\", RFC 5547,\n \
    \             May 2009.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Gonzalo Camarillo\n   Ericsson\n   Hirsalantie 11\n   Jorvas\
    \  02420\n   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n"
