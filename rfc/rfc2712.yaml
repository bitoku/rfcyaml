- title: __initial_text__
  contents:
  - '  Addition of Kerberos Cipher Suites to Transport Layer Security (TLS)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n\
    \   The 40-bit ciphersuites defined in this memo are included only for\n   the\
    \ purpose of documenting the fact that those ciphersuite codes have\n   already\
    \ been assigned.  40-bit ciphersuites were designed to comply\n   with US-centric,\
    \ and now obsolete, export restrictions.  They were\n   never secure, and nowadays\
    \ are inadequate even for casual\n   applications.  Implementation and use of\
    \ the 40-bit ciphersuites\n   defined in this document, and elsewhere, is strongly\
    \ discouraged.\n"
- title: 1. Abstract
  contents:
  - "1. Abstract\n   This document proposes the addition of new cipher suites to the\
    \ TLS\n   protocol [1] to support Kerberos-based authentication.  Kerberos\n \
    \  credentials are used to achieve mutual authentication and to\n   establish\
    \ a master secret which is subsequently used to secure\n   client-server communication.\n"
- title: 2. Introduction
  contents:
  - "2. Introduction\n   Flexibility is one of the main strengths of the TLS protocol.\n\
    \   Clients and servers can negotiate cipher suites to meet specific\n   security\
    \ and administrative policies.  However, to date,\n   authentication in TLS is\
    \ limited only to public key solutions.  As a\n   result, TLS does not fully support\
    \ organizations with heterogeneous\n   security deployments that include authentication\
    \ systems based on\n   symmetric cryptography.  Kerberos, originally developed\
    \ at MIT, is\n   based on an open standard [2] and is the most widely deployed\n\
    \   symmetric key authentication system.  This document proposes a new\n   option\
    \ for negotiating Kerberos authentication within the TLS\n   framework.  This\
    \ achieves mutual authentication and the establishment\n   of a master secret\
    \ using Kerberos credentials.  The proposed changes\n   are minimal and, in fact,\
    \ no different from adding a new public key\n   algorithm to the TLS framework.\n"
- title: 3. Kerberos Authentication Option In TLS
  contents:
  - "3. Kerberos Authentication Option In TLS\n   This section describes the addition\
    \ of the Kerberos authentication\n   option to the TLS protocol.  Throughout this\
    \ document, we refer to\n   the basic SSL handshake shown in Figure 1.  For a\
    \ review of the TLS\n   handshake see [1].\n  CLIENT                         \
    \                    SERVER\n  ------                                        \
    \     ------\n ClientHello\n                    -------------------------------->\n\
    \                                                     ServerHello\n          \
    \                                           Certificate *\n                  \
    \                                   ServerKeyExchange*\n                     \
    \                                CertificateRequest*\n                       \
    \                              ServerHelloDone\n                    <-------------------------------\n\
    \ Certificate*\n ClientKeyExchange\n CertificateVerify*\n change cipher spec\n\
    \ Finished\n     |              -------------------------------->\n     |    \
    \                                           change cipher spec\n     |       \
    \                                        Finished\n     |                    \
    \                               |\n     |                                    \
    \               |\n Application Data   <------------------------------->Application\
    \ Data\n FIGURE 1: The TLS protocol.  All messages followed by a star are\n  \
    \         optional.  Note: This figure was taken from an IETF document\n     \
    \      [1].\n   The TLS security context is negotiated in the client and server\
    \ hello\n   messages.  For example: TLS_RSA_WITH_RC4_MD5 means the initial\n \
    \  authentication will be done using the RSA public key algorithm, RC4\n   will\
    \ be used for the session key, and MACs will be based on the MD5\n   algorithm.\
    \  Thus, to facilitate the Kerberos authentication option,\n   we must start by\
    \ defining new cipher suites including (but not\n   limited to):\n CipherSuite\
    \      TLS_KRB5_WITH_DES_CBC_SHA            = { 0x00,0x1E };\n CipherSuite   \
    \   TLS_KRB5_WITH_3DES_EDE_CBC_SHA       = { 0x00,0x1F };\n CipherSuite      TLS_KRB5_WITH_RC4_128_SHA\
    \            = { 0x00,0x20 };\n CipherSuite      TLS_KRB5_WITH_IDEA_CBC_SHA  \
    \         = { 0x00,0x21 };\n CipherSuite      TLS_KRB5_WITH_DES_CBC_MD5      \
    \      = { 0x00,0x22 };\n CipherSuite      TLS_KRB5_WITH_3DES_EDE_CBC_MD5    \
    \   = { 0x00,0x23 };\n CipherSuite      TLS_KRB5_WITH_RC4_128_MD5            =\
    \ { 0x00,0x24 };\n CipherSuite      TLS_KRB5_WITH_IDEA_CBC_MD5           = { 0x00,0x25\
    \ };\n CipherSuite      TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA  = { 0x00,0x26 };\n\
    \ CipherSuite      TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA  = { 0x00,0x27 };\n CipherSuite\
    \      TLS_KRB5_EXPORT_WITH_RC4_40_SHA      = { 0x00,0x28 };\n CipherSuite   \
    \   TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5  = { 0x00,0x29 };\n CipherSuite      TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5\
    \  = { 0x00,0x2A };\n CipherSuite      TLS_KRB5_EXPORT_WITH_RC4_40_MD5      =\
    \ { 0x00,0x2B };\n   To establish a Kerberos-based security context, one or more\
    \ of the\n   above cipher suites must be specified in the client hello message.\n\
    \   If the TLS server supports the Kerberos authentication option, the\n   server\
    \ hello message, sent to the client, will confirm the Kerberos\n   cipher suite\
    \ selected by the server.  The server's certificate, the\n   client\n   CertificateRequest,\
    \ and the ServerKeyExchange shown in Figure 1 will\n   be omitted since authentication\
    \ and the establishment of a master\n   secret will be done using the client's\
    \ Kerberos credentials for the\n   TLS server.  The client's certificate will\
    \ be omitted for the same\n   reason.  Note that these messages are specified\
    \ as optional in the\n   TLS protocol; therefore, omitting them is permissible.\n\
    \   The Kerberos option must be added to the ClientKeyExchange message as\n  \
    \ shown in Figure 2.\n struct\n {\n     select (KeyExchangeAlgorithm)\n     {\n\
    \         case krb5:            KerberosWrapper;       /* new addition */\n  \
    \       case rsa:             EncryptedPreMasterSecret;\n         case diffie_hellman:\
    \  ClientDiffieHellmanPublic;\n     } Exchange_keys;\n } ClientKeyExchange;\n\
    \ struct\n {\n     opaque Ticket;\n     opaque authenticator;            /* optional\
    \ */\n     opaque EncryptedPreMasterSecret; /* encrypted with the session key\n\
    \                                         which is sealed in the ticket */\n }\
    \ KerberosWrapper;                   /* new addition */\n         FIGURE 2: The\
    \ Kerberos option in the ClientKeyExchange.\n   To use the Kerberos authentication\
    \ option, the TLS client must obtain\n   a service ticket for the TLS server.\
    \  In TLS, the ClientKeyExchange\n   message is used to pass a random 48-byte\
    \ pre-master secret to the\n   server.\n   The client and server then use the\
    \ pre-master secret to independently\n   derive the master secret, which in turn\
    \ is used for generating\n   session keys and for MAC computations.  Thus, if\
    \ the Kerberos option\n   is selected, the pre-master secret structure is the\
    \ same as that used\n   in the RSA case; it is encrypted under the Kerberos session\
    \ key and\n   sent to the TLS server along with the Kerberos credentials (see\n\
    \   Figure 2).  The ticket and authenticator are encoded per RFC 1510\n   (ASN.1\
    \ encoding).  Once the ClientKeyExchange message is received,\n   the server's\
    \ secret key is used to unwrap the credentials and extract\n   the pre-master\
    \ secret.\n   Note that a Kerberos authenticator is not required, since the master\n\
    \   secret derived by the client and server is seeded with a random value\n  \
    \ passed in the server hello message, thus foiling replay attacks.\n   However,\
    \ the authenticator may still prove useful for passing\n   authorization information\
    \ and is thus allotted an optional field (see\n   Figure 2).\n   Lastly, the client\
    \ and server exchange the finished messages to\n   complete the handshake.  At\
    \ this point we have achieved the\n   following:\n   1) A master secret, used\
    \ to protect all subsequent communication, is\n      securely established.\n \
    \  2) Mutual client-server authentication is achieved, since the TLS\n      server\
    \ proves knowledge of the master secret in the finished\n      message.\n   Note\
    \ that the Kerberos option fits in seamlessly, without adding any\n   new messages.\n"
- title: '4. Naming Conventions:'
  contents:
  - "4. Naming Conventions:\n   To obtain an appropriate service ticket, the TLS client\
    \ must\n   determine the principal name of the TLS server.  The Kerberos service\n\
    \   naming convention is used for this purpose, as follows:\n     host/MachineName@Realm\n\
    \      where:\n        - The literal, \"host\", follows the Kerberos convention\
    \ when not\n          concerned about the protection domain on a particular machine.\n\
    \        - \"MachineName\" is the particular instance of the service.\n      \
    \  - The Kerberos \"Realm\" is the domain name of the machine.\n"
- title: 5. Summary
  contents:
  - "5. Summary\n   The proposed Kerberos authentication option is added in exactly\
    \ the\n   same manner as a new public key algorithm would be added to TLS.\n \
    \  Furthermore, it establishes the master secret in exactly the same\n   manner.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   Kerberos ciphersuites are subject to the same\
    \ security considerations\n   as the TLS protocol.  In addition, just as a public\
    \ key\n   implementation must take care to protect the private key (for example\n\
    \   the PIN for a smartcard), a Kerberos implementation must take care to\n  \
    \ protect the long lived secret that is shared between the principal\n   and the\
    \ KDC.  In particular, a weak password may be subject to a\n   dictionary attack.\
    \  In order to strengthen the initial authentication\n   to a KDC, an implementor\
    \ may choose to utilize secondary\n   authentication via a token card, or one\
    \ may utilize initial\n   authentication to the KDC based on public key cryptography\
    \ (commonly\n   known as PKINIT - a product of the Common Authentication Technology\n\
    \   working group of the IETF).\n"
- title: 7. Acknowledgements
  contents:
  - "7. Acknowledgements\n   We would like to thank Clifford Neuman for his invaluable\
    \ comments on\n   earlier versions of this document.\n"
- title: 8. References
  contents:
  - "8. References\n   [1] Dierks, T. and C. Allen, \"The TLS Protocol, Version 1.0\"\
    , RFC\n       2246, January 1999.\n   [2] Kohl J. and C. Neuman, \"The Kerberos\
    \ Network Authentication\n       Service (V5)\", RFC 1510, September 1993.\n"
- title: 9. Authors' Addresses
  contents:
  - "9. Authors' Addresses\n   Ari Medvinsky\n   Excite\n   555 Broadway\n   Redwood\
    \ City, CA 94063\n   Phone: +1 650 569 2119\n   EMail: amedvins@excitecorp.com\n\
    \   http://www.excite.com\n   Matthew Hur\n   CyberSafe Corporation\n   1605 NW\
    \ Sammamish Road\n   Issaquah WA 98027-5378\n   Phone: +1 425 391 6000\n   EMail:\
    \ matt.hur@cybersafe.com\n   http://www.cybersafe.com\n"
- title: 10. Full Copyright Statement
  contents:
  - "10. Full Copyright Statement\n   Copyright (C) The Internet Society (1999). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
