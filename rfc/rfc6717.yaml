- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                           H. Hotz
  contents:
  - "Independent Submission                                           H. Hotz\n  \
    \   kx509 Kerberized Certificate Issuance Protocol in Use in 2012\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a protocol, called kx509, for using Kerberos\n\
    \   tickets to acquire X.509 certificates.  These certificates may be\n   used\
    \ for many of the same purposes as X.509 certificates acquired by\n   other means,\
    \ but if a Kerberos infrastructure already exists, then\n   the overhead of using\
    \ kx509 may be much less.\n   While not standardized, this protocol is already\
    \ in use at several\n   large organizations, and certificates issued with this\
    \ protocol are\n   recognized by the International Grid Trust Federation.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6717.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Requirements Language ......................................3\n  \
    \ 2. Protocol Data ...................................................3\n    \
    \ 2.1.  Request Packet .............................................3\n     2.2.\
    \  Reply Packet ...............................................4\n   3. Protocol\
    \ Operation ..............................................7\n   4. Acknowledgements\
    \ ................................................8\n   5. IANA Considerations\
    \ .............................................8\n   6. Security Considerations\
    \ .........................................9\n   7. References .....................................................10\n\
    \      7.1. Normative References ......................................10\n  \
    \    7.2. Informative References ....................................10\n   Appendix\
    \ A.  Certificate Caching and Deployment Considerations ....12\n   Appendix B.\
    \  Historic Extensions ..................................12\n   Appendix C.  Example\
    \ Exchange .....................................12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The two primary ways of providing cryptographically secure\n\
    \   identification on the Internet are Kerberos tickets [RFC4120] and\n   X.509\
    \ [RFC5280] [X.509] certificates.\n   In practical IT infrastructure where both\
    \ are in use, it's highly\n   desirable to deploy their support in a way that\
    \ guarantees they both\n   authoritatively refer to the same entities.  There\
    \ is already a\n   widely adopted standard for using X.509 certificates to acquire\n\
    \   corresponding Kerberos tickets called Public Key Cryptography for\n   Initial\
    \ Authentication in Kerberos (PKINIT) [RFC4556].  This document\n   describes\
    \ the kx509 protocol for supporting the symmetric operation\n   of acquiring X.509\
    \ certificates using Kerberos tickets.\n   Preparing and reviewing this document\
    \ exposed a number of issues that\n   are discussed in the security considerations.\
    \  Unfortunately, some of\n   them can only be addressed with an incompatible\
    \ upgrade to this\n   protocol.  The IETF's Kerberos working group has an expected\
    \ work\n   item to address these issues.\n   The International Grid Trust Federation\
    \ [IGTF] supports the use of\n   Short Lived Credential Services [SLCS] as a means\
    \ to authenticate for\n   resource usage based on other, native identity stores\
    \ that an\n   organization maintains.  X.509 certificates issued using the kx509\n\
    \   protocol based on a Kerberos identity is one of the recognized\n   credential\
    \ services.  The certificate profile for that use is outside\n   the scope of\
    \ this RFC but is described in [GRID-prof].\n   In normal operation, kx509 can\
    \ be used after a Kerberos ticket-\n   granting-ticket (TGT) is acquired, which\
    \ is most likely during user\n   login.  First, the client generates an RSA public/private\
    \ key pair.\n   Next, using the Kerberos ticket-granting-ticket, it acquires a\n\
    \   Kerberos service ticket for the KCA (Kerberized Certificate\n   Authority)\
    \ and uses this to send the public half of its key pair.\n   The KCA will decrypt\
    \ the service ticket, verify the integrity of the\n   incoming packet, determine\
    \ the identity of the user, and use the\n   session key to send back a corresponding\
    \ X.509 certificate.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Protocol Data
  contents:
  - "2.  Protocol Data\n   The protocol consists of a single request/reply exchange\
    \ using UDP.\n   Both the request and the reply packet begin with four bytes of\n\
    \   version ID information, followed by a DER-encoded ASN.1 message.  The\n  \
    \ first two bytes of the version ID are reserved.  They MUST be set to\n   zero\
    \ when sent and SHOULD be ignored when received.  The third and\n   fourth bytes\
    \ are the major and minor version numbers, respectively.\n   The version of the\
    \ protocol described in this document is designated\n   2.0, so the first four\
    \ bytes of the packet are 0, 0, 2, and 0.\n   Incompatible variations of this\
    \ protocol MUST use a different major\n   version number.\n"
- title: 2.1.  Request Packet
  contents:
  - "2.1.  Request Packet\n   The request consists of a version ID, followed by a\
    \ DER-encoded ASN.1\n   message containing a Kerberos AP-REQ, integrity check\
    \ data on the\n   request, and public key generated by the client.  The ASN.1\
    \ encoding\n   is:\n   KX509Request ::= SEQUENCE {\n           AP-REQ  OCTET STRING,\n\
    \           pk-hash OCTET STRING,\n           pk-key  OCTET STRING\n   }\n   The\
    \ AP-REQ is as described in [RFC4120], Section 5.5.1.\n   The pk-hash is Hashed\
    \ Message Authentication Code (HMAC) using SHA-1\n   as the underlying hash. \
    \ All 160 bits are sent.  The key used is the\n   Kerberos session key.  The data\
    \ to be hashed is the concatenation of\n   the following:\n   o  4-byte version\
    \ ID at the beginning of the packet.\n   o  OCTET STRING of the AP-REQ.\n   o\
    \  OCTET STRING of the pk-key.\n   The pk-key contains a public key.  This key\
    \ and its corresponding\n   private key are generated by the client before contacting\
    \ the server.\n   Implementations of this protocol MUST support RSA keys, in which\
    \ case\n   the key is a DER-encoded RSAPublicKey as defined in [RFC3447],\n  \
    \ Section A.1.1, and then it is stored in this octet string in the\n   request.\
    \  Its encoding as an OCTET STRING starts with the 0x30 byte\n   sequence at the\
    \ beginning of a DER-encoded RSAPublicKey.  Use of\n   other public-key types\
    \ is not defined.\n   Appendix C shows an example request packet.\n"
- title: 2.2.  Reply Packet
  contents:
  - "2.2.  Reply Packet\n   The reply consists of a version ID, followed by a DER-encoded\
    \ ASN.1\n   message containing an error code, an optional authentication hash,\n\
    \   optional certificate, and optional error text.  The service SHOULD\n   return\
    \ replies of the same version as the request where possible.\n   KX509Response\
    \ ::= SEQUENCE {\n           error-code[0]  INTEGER DEFAULT 0,\n           hash[1]\
    \        OCTET STRING OPTIONAL,\n           certificate[2] OCTET STRING OPTIONAL,\n\
    \           e-text[3]      VisibleString OPTIONAL\n   }\n   Although the format\
    \ of the reply contains independently optional\n   objects, the server MUST only\
    \ generate replies with one of the\n   following allowed combinations.\n     \
    \          +------------+------+-------------+--------+\n               |    \
    \        | hash | certificate |        |\n               | error-code | hash |\
    \             | e-text |\n               | error-code |      |             | e-text\
    \ |\n               +------------+------+-------------+--------+\n   The first\
    \ case is returned when the server successfully generates a\n   certificate for\
    \ the user.  The certificate is a DER-encoded\n   certificate as defined in [RFC5280],\
    \ Appendix A, page 116.  Its\n   encoding as an OCTET STRING starts with the 0x30\
    \ byte sequence that\n   is at the beginning of a DER-encoded certificate.\n \
    \  The second case is returned when the server successfully\n   authenticates\
    \ the user and their key, but is unable for some other\n   reason to generate\
    \ a certificate.\n   The third case MAY be returned if the server is unable to\n\
    \   successfully authenticate the user and intends to return some\n   unauthenticated\
    \ information to the client.\n   The hash on a response is computed using SHA-1\
    \ HMAC as for the\n   request.\n   The data that is hashed is the concatenation\
    \ of the following things:\n   o  4-byte version ID at the beginning of the packet.\n\
    \   o  DER representation of the error-code exclusive of the tag and\n      length,\
    \ if it is present.\n   o  OCTET STRING of the certificate, if it is present.\n\
    \   o  VisibleString representation of the e-text exclusive of the tag\n     \
    \ and length, if it is present.\n   In other words, the hash is computed on the\
    \ data in the fields that\n   are present, exclusive of the overall ASN.1 wrapping.\n\
    \   The e-text MAY be translated into other character sets for display\n   purposes,\
    \ but the hash is computed on the e-text in its VisibleString\n   representation.\
    \  If the e-text contains NUL characters, the client\n   MAY ignore any part of\
    \ the error message after the first NUL\n   character for display purposes.\n\
    \   As implied by the above table, if the reply does not contain a\n   certificate,\
    \ it MUST contain an error message and a non-zero error\n   code.  Conversely,\
    \ if a certificate is returned, then the error-code\n   MUST be zero.  The server\
    \ SHOULD use the DEFAULT encoding for a zero\n   error-code value by omitting\
    \ any explicit error-code from the reply.\n   The defined values for error-code\
    \ are as follows:\n   +------------+-----------------------------+------------------------+\n\
    \   | error-code | Condition                   | Example                |\n  \
    \ +------------+-----------------------------+------------------------+\n   |\
    \ 1          | Permanent problem with      | Incompatible version   |\n   |  \
    \          | client request              |                        |\n   | 2  \
    \        | Solvable problem with       | Expired Kerberos       |\n   |      \
    \      | client request              | credentials            |\n   | 3      \
    \    | Temporary problem with      | Packet loss            |\n   |          \
    \  | client request              |                        |\n   | 4          |\
    \ Permanent problem with the  | Internal               |\n   |            | server\
    \                      | misconfiguration       |\n   | 5          | Temporary\
    \ problem with the  | Server overloaded      |\n   |            | server     \
    \                 |                        |\n   +------------+-----------------------------+------------------------+\n\
    \   If a client error is returned, the client SHOULD NOT retry the\n   request\
    \ unless some remedial action is first taken, although if\n   error-code 3 is\
    \ returned, the client MAY retry with other servers\n   before giving up.\n  \
    \ If a server error is returned, it is RECOMMENDED that the client\n   retry the\
    \ request with a different server if one is known.\n   Since all KCAs serving\
    \ a Kerberos realm are intended to be\n   equivalent, in accordance with Section\
    \ 4.1.2.2 of [RFC5280], the\n   certificates returned from different KCAs serving\
    \ the same Kerberos\n   realm MUST NOT contain duplicate serial numbers.\n   This\
    \ protocol and document do not address certificate verification or\n   path construction.\
    \  There are no provisions for returning any\n   additional certificates that\
    \ might be needed.  Any application using\n   a returned certificate must be configured\
    \ independently to address\n   these issues.  An incompatible upgrade to this\
    \ protocol will provide\n   options to address this issue.\n   The returned certificate\
    \ MUST identify the Kerberos client principal\n   from the AP-REQ in the original\
    \ KX509Request in the subject of the\n   certificate or in a subjectAltName extension.\
    \  The identification\n   MUST be unique within the organization's deployed infrastructure.\
    \  It\n   is RECOMMENDED that a subjectAltName extension be included of type\n\
    \   id-pkinit-san as described in [RFC4556], Section 3.2.2.  Note that\n   the\
    \ id-pkinit-san is simply a standard representation of a Kerberos\n   principal\
    \ and has no other implications with respect to PKINIT.\n   Other extensions MAY\
    \ be added according to local policy.\n   Appendix C shows an example reply packet.\n"
- title: 3.  Protocol Operation
  contents:
  - "3.  Protocol Operation\n   Absent errors, the protocol consists of a single request,\
    \ sent via\n   UDP, and a single reply, also sent via UDP.\n   There is no special\
    \ provision for requests or replies that exceed the\n   allowable size of a UDP\
    \ packet.  Also, some implementations have\n   imposed hard size limits that are\
    \ smaller than a typical UDP MTU and\n   will limit the use of extensions and\
    \ the supportable key size.  Even\n   without hard limits, if the request or reply\
    \ exceeds the MTU size of\n   a UDP packet for the infrastructure in use, then\
    \ the reliability of\n   the exchange will decrease significantly.\n   For \"\
    normal\" Kerberos AP-REQ structures, and \"normal\" X.509\n   certificates, this\
    \ is unlikely unless the Kerberos service ticket\n   contains large amounts of\
    \ authorization data.  For this reason, it is\n   RECOMMENDED that service tickets\
    \ for the KCA be issued without\n   authorization data.  If the KCA performs authorization,\
    \ it should do\n   so by other means.\n   Before constructing the request, the\
    \ client must know the canonical\n   name(s) and port(s) of the server(s) to contact.\
    \  It MAY determine\n   them by looking up the service's SRV record as described\
    \ in\n   [RFC2782].  The entry to be used is _kca._udp._realm_, where _realm_\n\
    \   is the Kerberos realm, used as part of the DNS name.\n   The client has to\
    \ acquire a service ticket in order to construct the\n   AP-REQ for the service.\
    \  Conventionally, the Kerberos service\n   principal name to use for this service\
    \ has a first component of\n   \"kca_service\".  Absent local configuration or\
    \ other external\n   knowledge of the correct principal to use, the second and\
    \ final\n   component is conventionally the canonical name of the KCA server\n\
    \   being contacted, and the realm of the principal is determined\n   following\
    \ normal Kerberos domain-to-realm mapping conventions, as\n   discussed in [RFC4120],\
    \ Section 1.3.\n   When the server receives a request, it MUST verify the following\n\
    \   properties of the request before issuing a certificate:\n   o  The AP-REQ\
    \ can be decoded and is not expired.\n   o  If the request uses cross-realm authentication,\
    \ then it satisfies\n      the requirements of local policy and [RFC4120], Sections\
    \ 1.2 and\n      2.7.\n   o  The request's hash is valid.\n   The server SHOULD\
    \ make other sanity checks, such as a minimum public\n   key length, to the extent\
    \ feasible.\n   The server MAY decline to respond to an erroneous request.  If\
    \ it\n   does not receive a response, a client MAY retry its request, but the\n\
    \   client SHOULD wait at least one second before doing so.\n   The client MUST\
    \ verify any hash in the reply and MUST NOT use any\n   certificate in a reply\
    \ whose hash does not verify.  The client MAY\n   display the e-text if the hash\
    \ is absent or does not verify but\n   SHOULD indicate the message is not authenticated.\n"
- title: 4.  Acknowledgements
  contents:
  - "4.  Acknowledgements\n   The original version of kx509 was implemented using\
    \ Kerberos 4 at the\n   University of Michigan and was nicely documented in [KX509].\
    \  Many\n   thanks to them for their original work, as well as the subsequent\n\
    \   updates.\n   While developing this document, important corrections and comments\n\
    \   were provided by Jeffrey Altman and Love Hornquist Astrand.  The\n   following\
    \ people also provided many helpful comments and corrections:\n   Doug Engert,\
    \ Jeffrey Hutzelman, Sam Hartman, Timothy J. Miller,\n   Chaskiel Grundman, and\
    \ Jim Schaad.  Alan Sill provided the references\n   to the International Grid\
    \ Trust Federation and its acceptable\n   credential services.  Example network\
    \ traffic was provided by Doug\n   Engert, Marcus Watts, Matt Crawford, and Chaskiel\
    \ Grundman from their\n   deployments and was extremely useful for verifying the\
    \ reality of\n   this specification.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This service is conventionally run on UDP port 9878.\
    \  IANA has\n   registered that port in the Service Name and Transport Port Number\n\
    \   Registry as follows:\n     Service Name:       kca-service\n     Transport\
    \ Protocol: UDP\n     Assignee:           IESG <iesg@ietf.org>\n     Contact:\
    \            IETF Chair <chair@ietf.org>\n     Description:        The kx509 Kerberized\
    \ Certificate Issuance\n                         Protocol in Use in 2012\n   \
    \  Reference:          RFC 6717\n     Port Number:        9878\n     Assignment\
    \ Notes:   Historically, this service has been referred to\n                 \
    \        as \"kca_service\", but this service name does\n                    \
    \     not meet the registry requirements.\n   The Generic Security Service Application\
    \ Program Interface (GSS-API)\n   / Kerberos / Simple Authentication and Security\
    \ Layer (SASL) service\n   name currently in use for this protocol is \"kca_service\"\
    .  This does\n   not meet the naming requirements for IANA's GSS-API/Kerberos/SASL\n\
    \   service name registry, so no registration has been requested.  The\n   conflict\
    \ between the conventional service name and the registry rules\n   is expected\
    \ to be addressed in a future version of this protocol.\n   Appropriate registrations\
    \ will be requested at that time.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The only encrypted information in the protocol\
    \ is that used by\n   Kerberos itself.  The considerations for any Kerberized\
    \ service apply\n   here.\n   The public key in the request is sent in the clear\
    \ and without any\n   guarantees that the requester actually possesses the corresponding\n\
    \   private key.  Therefore, the only appropriate uses of the returned\n   certificate\
    \ are those where the identity of the requester is\n   unimportant or the subsequent\
    \ use independently guarantees that the\n   user possesses the private key.  This\
    \ issue is expected to be\n   addressed in a future version of this protocol.\n\
    \   For example, if the kx509-issued certificate is used for a digital\n   signature\
    \ in a way that does not independently demonstrate proof-of-\n   possession of\
    \ the private key, then an eavesdropper could request\n   their own valid certificate\
    \ via kx509 and claim to have originated\n   material signed by the legitimate,\
    \ original requester.  [RFC4211],\n   Appendix C, contains a more detailed discussion\
    \ of why proof-of-\n   possession is important.\n   An example that should be\
    \ safe is initial client authentication with\n   Transport Layer Security (TLS)\
    \ [RFC5246] connections.  If a client\n   certificate is used, then a Certificate\
    \ Verify message (Section 7.4.8\n   of [RFC5246]) is added to the handshake exchange.\
    \  It includes a\n   signature of the handshake messages to that point.  Those\
    \ messages\n   depend on data known only to the client and server ends of the\n\
    \   specific connection, so computing the signature proves possession of\n   the\
    \ private key.  This application was the original intended use case\n   for kx509.\n\
    \   Some information, such as the public key and certificate, is\n   transmitted\
    \ in the clear but (as the name implies) is generally\n   intended to be publicly\
    \ available.  However, its visibility could\n   still raise privacy concerns.\
    \  The hash is used to protect the\n   integrity of this information.\n   The\
    \ policies for issuing Kerberos tickets and X.509 certificates are\n   usually\
    \ expressed very differently.  An implementation of this\n   protocol should not\
    \ provide a mechanism for bypassing ticket or\n   certificate policies.\n   In\
    \ particular, if the issued certificate can be used with PKINIT,\n   this authentication\
    \ loop SHOULD NOT bypass policy limits for either\n   X.509 certificates or Kerberos\
    \ tickets.\n   X.509 certificates are usually issued with considerably longer\n\
    \   validity times than Kerberos tickets.  Care should be taken that the\n   issued\
    \ certificate is not valid for longer than the intended policy\n   should allow.\
    \  Note that Section 3.2.3 of [RFC4556] REQUIRES that the\n   lifetime of an issued\
    \ ticket not exceed the lifetime of the\n   predecessor certificate.  By analogy,\
    \ it is RECOMMENDED that the\n   lifetime of an issued certificate not exceed\
    \ the lifetime of the\n   predecessor Kerberos ticket unless the implications\
    \ with respect to\n   local policy and supporting infrastructure are clearly understood\
    \ and\n   allow it.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC3447]    Jonsson, J. and B. Kaliski, \"Public-Key Cryptography\n\
    \                Standards (PKCS) #1: RSA Cryptography Specifications\n      \
    \          Version 2.1\", RFC 3447, February 2003.\n   [RFC4120]    Neuman, C.,\
    \ Yu, T., Hartman, S., and K. Raeburn, \"The\n                Kerberos Network\
    \ Authentication Service (V5)\", RFC 4120,\n                July 2005.\n   [RFC5280]\
    \    Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n                Housley,\
    \ R., and W. Polk, \"Internet X.509 Public Key\n                Infrastructure\
    \ Certificate and Certificate Revocation\n                List (CRL) Profile\"\
    , RFC 5280, May 2008.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [GRID-prof]  \"Grid Certificate Profile\", March\
    \ 2008,\n                <http://www.ogf.org/documents/GFD.125.pdf>.\n   [IGTF]\
    \       \"The International Grid Trust Federation\",\n                <http://www.igtf.net/>.\n\
    \   [KX509]      Doster, W., Watts, M., and D. Hyde, \"The KX.509\n          \
    \      Protocol\", September 2001, <http://www.citi.umich.edu/\n             \
    \   techreports/reports/citi-tr-01-2.pdf>.\n   [RFC2782]    Gulbrandsen, A., Vixie,\
    \ P., and L. Esibov, \"A DNS RR for\n                specifying the location of\
    \ services (DNS SRV)\",\n                RFC 2782, February 2000.\n   [RFC4211]\
    \    Schaad, J., \"Internet X.509 Public Key Infrastructure\n                Certificate\
    \ Request Message Format (CRMF)\", RFC 4211,\n                September 2005.\n\
    \   [RFC4556]    Zhu, L. and B. Tung, \"Public Key Cryptography for\n        \
    \        Initial Authentication in Kerberos (PKINIT)\", RFC 4556,\n          \
    \      June 2006.\n   [RFC5246]    Dierks, T. and E. Rescorla, \"The Transport\
    \ Layer\n                Security (TLS) Protocol Version 1.2\", RFC 5246,\n  \
    \              August 2008.\n   [SLCS]       \"Short Lived Credential Services\"\
    , February 2009,\n                <http://tagpma.org/authn_profiles/slcs>.\n \
    \  [X.509]      International Telecommunications Union, \"Recommendation\n   \
    \             X.509: The Directory: Public-key and attribute\n               \
    \ certificate framework\", November 2008.\n"
- title: Appendix A.  Certificate Caching and Deployment Considerations
  contents:
  - "Appendix A.  Certificate Caching and Deployment Considerations\n   As noted in\
    \ the Security Considerations section, the functional\n   lifetime of the acquired\
    \ X.509 certificate should usually match the\n   lifetime of its predecessor Kerberos\
    \ ticket.  Therefore, it is likely\n   that X.509 certificates issued with this\
    \ protocol should be deleted\n   when the supporting Kerberos tickets are deleted.\
    \  That makes the\n   Kerberos ticket cache a reasonable location to store the\
    \ certificate\n   (and its private key).\n   On the other hand, applications,\
    \ such as web browsers, probably\n   expect certificates in different stores.\n\
    \   A widely used solution to this dichotomy is to implement a PKCS11\n   library\
    \ that supports the kx509-acquired credentials.  The\n   credentials remain stored\
    \ in the Kerberos credentials cache, but full\n   PKI functionality is still available\
    \ via a standard interface for PKI\n   credentials.\n"
- title: Appendix B.  Historic Extensions
  contents:
  - "Appendix B.  Historic Extensions\n   This appendix documents extensions to the\
    \ kx509 protocol that are\n   either no longer in use or are expected to be dropped.\n\
    \   A subjectAltName othername extension of type kcaAuthRealm (OID value\n   1.3.6.1.4.1.250.42.1)\
    \ is frequently used to include the client's\n   realm as an ASN.1 octet string.\n\
    \   The Microsoft-defined userPrincipalName has frequently been used for\n   the\
    \ same purpose as the id-pkinit-san.\n   The historic implementations of this\
    \ protocol included provisions for\n   DSA keys in place of RSA.  DSA does not\
    \ appear to be in use.  A\n   future version of this protocol will use a standard\
    \ certificate\n   request structure that will provide algorithm agility.\n   The\
    \ historic implementations of this protocol allowed an optional\n   client-version\
    \ field (at the end of the request) of type\n   VisibleString.  If present, the\
    \ KCA copied it into the issued\n   certificate as an extension with the OID 1.3.6.1.4.1.250.42.2.\
    \  This\n   feature does not appear to be in use.\n"
- title: Appendix C.  Example Exchange
  contents:
  - "Appendix C.  Example Exchange\n   The request and reply are from the same exchange.\
    \  The Ethernet, IP,\n   and UDP headers, and the 4-byte version string at the\
    \ beginning of\n   the request and reply packets are all omitted.  Only the ASN.1-\n\
    \   encoded portions are shown.\n      0:d=0  hl=4 l= 678 cons: SEQUENCE\n   \
    \   4:d=1  hl=4 l= 509 prim:  OCTET STRING\n                           [HEX DUMP]:6E8201F9308201F5A003...\
    \ (AP-REQ)\n    517:d=1  hl=2 l=  20 prim:  OCTET STRING\n                   \
    \        [HEX DUMP]:ECFF1C922300D0E9DD02... (pk-hash)\n    539:d=1  hl=3 l= 140\
    \ prim:  OCTET STRING\n                           [HEX DUMP]:30818902818100B70F46...\
    \ (pk-key)\n                        Request Packet ASN.1 Decode\n     0:d=0  hl=4\
    \ l= 870 cons: SEQUENCE\n     4:d=1  hl=2 l=  22 cons:  cont [ 1 ]\n     6:d=2\
    \  hl=2 l=  20 prim:   OCTET STRING\n                        [HEX DUMP]:F3A844834C26D843B6FD...\
    \ (hash)\n    28:d=1  hl=4 l= 842 cons:  cont [ 2 ]\n    32:d=2  hl=4 l= 838 prim:\
    \   OCTET STRING\n                        [HEX DUMP]:308203423082022AA003... (certificate)\n\
    \                         Reply Packet ASN.1 Decode\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Henry B. Hotz\n   Jet Propulsion Laboratory, California\
    \ Institute of Technology\n   4800 Oak Grove Dr.\n   Pasadena, CA  91109\n   USA\n\
    \   Phone: +01 818 354-4880\n   EMail: hotz@jpl.nasa.gov\n   Russ Allbery\n  \
    \ Stanford University\n   P.O. Box 20066\n   Stanford, CA  94309\n   USA\n   EMail:\
    \ rra@stanford.edu\n   URI:   http://www.eyrie.org/~eagle/\n"
