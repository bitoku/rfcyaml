- title: __initial_text__
  contents:
  - '         Functional Description of Event Notification Filtering

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   The SIP event notification framework describes the usage of the\n\
    \   Session Initiation Protocol (SIP) for subscriptions and notifications\n  \
    \ of changes to the state of a resource.  The document does not\n   describe a\
    \ mechanism whereby filtering of event notification\n   information can be achieved.\n\
    \   This document describes the operations a subscriber performs in order\n  \
    \ to put filtering rules associated with a subscription to event\n   notification\
    \ information in place.  The handling, by the subscriber,\n   of responses to\
    \ subscriptions carrying filtering rules and the\n   handling of notifications\
    \ with filtering rules applied to them are\n   also described.  Furthermore, the\
    \ document conveys how the notifier\n   behaves when receiving such filtering\
    \ rules and how a notification is\n   constructed.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Conventions .....................................................3\n  \
    \ 3. Client Operation ................................................4\n    \
    \  3.1. Transport Mechanism ........................................4\n      3.2.\
    \ SUBSCRIBE Bodies ...........................................4\n      3.3. Subscriber\
    \ Generating of SUBSCRIBE Requests ................4\n           3.3.1. Defining\
    \ the Filtering Rules ........................4\n           3.3.2. Request-URI\
    \ vs. Filter URI ..........................5\n           3.3.3. Changing Filters\
    \ within a Dialog ....................5\n           3.3.4. Subscriber Interpreting\
    \ of SIP Responses ............6\n      3.4. Subscriber Processing of NOTIFY Requests\
    \ ...................6\n   4. Resource List Server Behaviour ..................................7\n\
    \      4.1. Request-URI vs. Filter URI .................................7\n  \
    \    4.2. Changing Filters within a Dialog ...........................9\n   5.\
    \ Server Operation ................................................9\n      5.1.\
    \ NOTIFY Bodies ..............................................9\n      5.2. Notifier\
    \ Processing of SUBSCRIBE Requests ..................9\n           5.2.1. Request-URI\
    \ vs. Filter URI .........................10\n           5.2.2. Changing Filters\
    \ within a Dialog ...................11\n      5.3. Notifier Generating of NOTIFY\
    \ Requests ....................11\n           5.3.1. Generation of NOTIFY Contents\
    \ ......................12\n           5.3.2. Handling of Notification Triggering\
    \ Rules ..........13\n      5.4. Handling Abnormal Cases ...................................13\n\
    \   6. XML Document Validation ........................................14\n  \
    \ 7. Examples .......................................................14\n    \
    \  7.1. Presence Specific Examples ................................14\n      \
    \     7.1.1. Subscriber Requests Messaging-Related Information ..15\n        \
    \   7.1.2. Subscriber Fetches Information about \"Open\"\n                  Communication\
    \ Means ................................16\n           7.1.3. Subscriber Requests\
    \ Notifications When\n                  Presentity's Status Changes ........................18\n\
    \      7.2. Watcher Information Specific Examples .....................21\n  \
    \         7.2.1. Watcher Subscriber Makes Subscription to\n                  Get\
    \ All the Information about Active Watchers ......22\n           7.2.2. Watcher\
    \ Subscriber Requests Information of\n                  Watchers with Specific\
    \ Subscription Duration\n                  Conditions .........................................23\n\
    \           7.2.3. Watcher Subscriber Requests Specific\n                  Watcher\
    \ Info on Specific Triggers ..................24\n   8. Security Considerations\
    \ ........................................27\n   9. IANA Considerations ............................................28\n\
    \   10. Acknowledgements ..............................................28\n  \
    \ 11. References ....................................................28\n    \
    \  11.1. Normative References .....................................28\n      11.2.\
    \ Informative References ...................................28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   SIP event notification is described in [3].  It defines\
    \ a general\n   framework for sending subscriptions and receiving notifications\
    \ in\n   SIP-based systems.  It introduces the concept of event packages,\n  \
    \ which are concrete applications of the general event framework to a\n   specific\
    \ usage of events.\n   Filtering is a mechanism for controlling the content of\
    \ event\n   notifications.  Additionally, the subscriber may specify the rules\n\
    \   for when a notification should be sent to it.  The filtering\n   mechanism\
    \ is expected to be particularly valuable to users of mobile\n   wireless access\
    \ devices.  The characteristics of the devices\n   typically include high latency,\
    \ low bandwidth, low data processing\n   capabilities, small display, and limited\
    \ battery power.  Such devices\n   can benefit from the ability to filter the\
    \ amount of information\n   generated at the source of the event notification.\
    \  However,\n   implementers need to be aware of the computational burden on the\n\
    \   source of the event notification.  This is discussed further in\n   Section\
    \ 8.\n   It is stated in [3] that the notifier may send a NOTIFY at any time,\n\
    \   but typically it is sent when the state of the resource changes.  It\n   also\
    \ states that the notifications would contain the complete and\n   current state\
    \ of the resource authorized for a certain subscriber to\n   see.  The format\
    \ of such resource state information is package\n   specific.  In this memo, we\
    \ assume that the NOTIFY for any package\n   contains an XML document.\n   This\
    \ document, together with [5], presents a mechanism for filtering\n   whereby\
    \ a subscriber describes its preference of when notifications\n   are to be sent\
    \ to it and what they are to contain.  It also describes\n   how the notifier\
    \ functions when generating notifications by taking\n   into account filters and\
    \ default functionality of the package/\n   service.\n   The XML format for defining\
    \ the filter is described in [5].\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   In this document, the key words 'MUST', 'MUST NOT', 'REQUIRED',\n\
    \   'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',\n   and\
    \ 'OPTIONAL' are to be interpreted as described in RFC 2119 [1] and\n   indicate\
    \ requirement levels for compliant implementations.\n   \"Content\" refers to\
    \ the XML document that appears in a notification\n   reflecting the state of\
    \ a resource.\n"
- title: 3.  Client Operation
  contents:
  - '3.  Client Operation

    '
- title: 3.1.  Transport Mechanism
  contents:
  - "3.1.  Transport Mechanism\n   Transportation of the filter to the server is achieved\
    \ by inserting\n   the XML document, as defined in [5], in the body of the SUBSCRIBE\n\
    \   request.  Alternatively, the XML document can be uploaded to the\n   server\
    \ using means outside the scope of this document.\n"
- title: 3.2.  SUBSCRIBE Bodies
  contents:
  - "3.2.  SUBSCRIBE Bodies\n   SIP entities compliant with this specification MUST\
    \ support the\n   content type 'application/simple-filter+xml'.\n"
- title: 3.3.  Subscriber Generating of SUBSCRIBE Requests
  contents:
  - "3.3.  Subscriber Generating of SUBSCRIBE Requests\n   This section presents additional\
    \ functionality required from the\n   subscriber when filters are used in the\
    \ bodies of the SUBSCRIBE\n   requests.  Normal operations of services (e.g.,\
    \ as defined in [8],\n   [10], and [4]) are otherwise followed.\n   As defined\
    \ in [3], the SUBSCRIBE message MAY contain a body.  This\n   body would carry\
    \ filtering information.  Honouring those filters is\n   at the discretion of\
    \ the notifier and might depend on local policies.\n   No content in the body\
    \ of a SUBSCRIBE indicates to the notifier that\n   no filter is being requested,\
    \ so the notifier is instructed to send\n   all the NOTIFY requests using the\
    \ notifier's own or service-specific\n   policy.  Note that, for example, in the\
    \ list case [4], the filter\n   might have been uploaded to the server beforehand\
    \ (by means outside\n   the scope of this document).\n   If the body of the SUBSCRIBE\
    \ includes the filter, the body MUST be of\n   the MIME-Type 'application/simple-filter+xml'.\n"
- title: 3.3.1.  Defining the Filtering Rules
  contents:
  - "3.3.1.  Defining the Filtering Rules\n   Multiple filters MAY be included in\
    \ one SUBSCRIBE.  This is achieved\n   by including multiple <filter> elements\
    \ in the filter [5].  Each\n   <filter> element may include a 'uri' attribute.\n\
    \   A SUBSCRIBE request destined to a list URI [4] MAY include multiple\n   filters\
    \ specific to individual resources.  This is achieved by\n   including multiple\
    \ <filter> elements with different URIs of resources\n   in each of those elements.\
    \  This resource specific resource-specific\n   filter are processed first before\
    \ any list specific list-specific\n   filter, if any.  The list specific list-specific\
    \ filter may or may\n   not include a URI.\n   Furthermore, regardless of whether\
    \ the SUBSCRIBE is destined to a\n   list URI, there can only be one filter applicable\
    \ to a single\n   resource or domain within a single SUBSCRIBE.  That is, each\
    \ filter\n   within a subscription MUST uniquely identify one resource or one\n\
    \   domain.\n   A filter can be enabled and disabled using the 'enabled' attribute\
    \ in\n   the <filter> element, as described in [5].\n"
- title: 3.3.2.  Request-URI vs. Filter URI
  contents:
  - "3.3.2.  Request-URI vs. Filter URI\n   The URI in the filter defines the target\
    \ resource.  For example, in\n   the Presence service case, it is the presentity's\
    \ presence\n   information to which the filter is applied.  The subscriber MAY\n\
    \   choose to leave the URI in the filter undefined.  If the URI is not\n   defined\
    \ within the filter, the filter applies to the resource\n   identified in the\
    \ Request-URI.  Similarly, the subscriber MAY define\n   a filter URI.  If the\
    \ Request-URI is a list URI [4], the filter URI\n   MUST be the list URI, a sub-list\
    \ URI, or resource whose URI is one of\n   the URIs that result from a lookup,\
    \ by a Resource List Server (RLS),\n   on the Request-URI.  If it is not, the\
    \ filter may be ignored or may\n   be rejected.  URI matching is done according\
    \ to the matching rules\n   defined for a particular scheme (SIP URI matching\
    \ rules are defined\n   in RFC 3261 [2]).\n   A filter may also be addressed to\
    \ a domain using the 'domain'\n   attribute instead of the 'uri' attribute.  In\
    \ this case, the filter\n   applies to resources in that domain.  This can be\
    \ used when a\n   subscription is for a resource that is an event list with many\n\
    \   resources from differing domains.  If an individual resource-specific\n  \
    \ filter is present along with the domain filter, this\n   resource-specific filter\
    \ overrides any domain-specific filter, if\n   any.\n"
- title: 3.3.3.  Changing Filters within a Dialog
  contents:
  - "3.3.3.  Changing Filters within a Dialog\n   The subscriber MAY reset or change\
    \ the filter by re-issuing a new\n   SUBSCRIBE request within the existing dialog.\
    \  A SUBSCRIBE within the\n   exiting dialog that does not contain a filter is\
    \ assumed to maintain\n   existing filters.  This means that filters are persistent\
    \ within a\n   dialog and are only explicitly removed.\n   A subscriber requiring\
    \ removal of a filter may do so by using the\n   'remove=\"true\"' attribute,\
    \ as defined in [5].\n   In the case where the URI in the filter is that of a\
    \ list, a\n   subscriber may override the existing filter with a filter for an\n\
    \   individual resource that is part of the list subscribed to earlier by\n  \
    \ issuing a new SUBSCRIBE within the existing dialog and including a\n   filter,\
    \ specific for that individual resource, using a new filter ID.\n   The new filter\
    \ need not include the original filter since a filter is\n   only removed in the\
    \ manner indicated above.\n   A filter is replaced by the subscriber re-issuing\
    \ the filter using\n   the same filter ID and replacing the contents of the filter.\n\
    \   Replacing a filter by changing the filter ID and keeping the resource\n  \
    \ URI is considered an error since this causes the server to assume\n   that two\
    \ filters are placed for the same resource.\n   Again, a filter can be disabled\
    \ and re-enabled using the 'enabled'\n   attribute in the <filter> element, as\
    \ described in [5].\n"
- title: 3.3.4.  Subscriber Interpreting of SIP Responses
  contents:
  - "3.3.4.  Subscriber Interpreting of SIP Responses\n   The SUBSCRIBE request will\
    \ be confirmed with a final response.  A\n   200-class response indicates that\
    \ the subscription has been accepted\n   and that a NOTIFY will be sent immediately.\
    \  A \"200\" response\n   indicates that the subscription has been accepted and\
    \ that the filter\n   is accepted.  A \"202\" response merely indicates that the\
    \ subscription\n   has been understood, that the content type has been accepted,\
    \ and\n   that authorization may or may not have been granted.  A \"202\"\n  \
    \ response also indicates that the filter has not been accepted yet.\n   The acceptance\
    \ of the filter MAY arrive in a subsequent NOTIFY.\n   A non-200 class final response\
    \ indicates that no subscription or\n   dialog has been created, and no subsequent\
    \ NOTIFY message will be\n   sent.  All non-200 class final responses have the\
    \ same meanings and\n   handling as described in [2] and [3].\n   Specifically,\
    \ a \"415\" response indicates that the MIME type\n   'application/simple-filter+xml'\
    \ is not understood by the notifier.  A\n   \"488\" response indicates that the\
    \ content type (filter) is understood\n   but some aspects of it were either not\
    \ understood or not accepted.\n"
- title: 3.4.  Subscriber Processing of NOTIFY Requests
  contents:
  - "3.4.  Subscriber Processing of NOTIFY Requests\n   If the 2xx response was returned\
    \ for the SUBSCRIBE, the NOTIFY that\n   follows MAY contain a body that describes\
    \ the present state of the\n   resource after the filters have been applied.\n\
    \   If the NOTIFY indicates that a subscription has been terminated [3],\n   the\
    \ subscription is assumed to be terminated.  Behaviour in such\n   events is also\
    \ described in [3].\n   If the subscription is indicated as active, NOTIFY requests\
    \ are\n   handled as described in package-specific documents and in [3].\n"
- title: 4.  Resource List Server Behaviour
  contents:
  - "4.  Resource List Server Behaviour\n   The Resource List Server is defined in\
    \ [4].  This section describes\n   how such an entity behaves in the presence\
    \ of a filter in a\n   subscription to a list.\n"
- title: 4.1.  Request-URI vs. Filter URI
  contents:
  - "4.1.  Request-URI vs. Filter URI\n   If the URI is not defined within the filter,\
    \ the filter applies to\n   the resource list identified in the Request-URI of\
    \ the SUBSCRIBE\n   request.  This results in the filters being applied to all\
    \ the\n   notifications that the RLS issues to this subscription.  The same\n\
    \   processing applies to a filter that defines a URI that matches the\n   request-URI\
    \ of the SUBSCRIBE request.  That is, the filter applies to\n   all notifications\
    \ that the RLS issues to this subscription.\n   If the URI indicated by the filter\
    \ is for one resource whose URI is\n   one of the URIs that result from a lookup\
    \ by the RLS on the\n   Request-URI, the filter for that particular resource is\
    \ extracted and\n   propagated in the SUBSCRIBE request sent to that resource.\
    \  It is\n   possible to have more than one filter in a SUBSCRIBE request body,\n\
    \   and therefore a filter specific to a resource MUST be extracted and\n   only\
    \ that one is propagated.  For example, if the Request-URI in a\n   SUBSCRIBE\
    \ has the value \"sip:mybuddies@example.com\", where\n   \"bob@example.com\" is\
    \ a resource belonging to that list, and the URI\n   in a filter is \"sip:bob@example.com\"\
    , the filter specific for Bob is\n   extracted and placed in the body of the SUBSCRIBE\
    \ sent to\n   \"bob@example.com\".\n   If the URI indicated by the filter is for\
    \ one resource whose URI is\n   NOT under the RLS administrative control, the\
    \ RLS propagates the\n   filter to all the fanned out subscriptions.  This is\
    \ to accommodate\n   the scenario where the subscriber knows that there are sub-lists\
    \ in\n   the event list that are under a different administrative domain from\n\
    \   that where the original subscription was sent, and the subscriber\n   wishes\
    \ to set a filter for a resource in that sub-list.\n   If the URI indicated by\
    \ the filter is for one resource whose URI is\n   under the RLS administrative\
    \ control but is not part of the resource\n   list that the subscription was addressed\
    \ to, the filter is not\n   propagated.  In this case, it is the RLS's responsibility\
    \ to make\n   sure that this filter is applied to notifications issued, if\n \
    \  information about that resource is present.\n   For example: If we have 2 lists,\
    \ each located on its own RLS:\n   List1 (list1@example.com) on RLS1 has: bob@example.com\n\
    \   list2@biloxi.com\n   List2 on RLS2 has: alice@biloxi.com sarah@example.com\n\
    \   (Note: list2 is a resource in list1)\n   RLS1 receives the following SUBSCRIBE\
    \ request (the SUBSCRIBE is\n   addressed to list1 and contains 2 filters: one\
    \ for sarah@example.com\n   and the other for alice@biloxi.com):\n   SUBSCRIBE\
    \ sip:List1@example.com SIP/2.0\n   ...\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <filter-set xmlns=\"urn:ietf:params:xml:ns:simple-filter\">\n  \
    \   <ns-bindings>\n       <ns-binding prefix=\"pidf\" urn=\"urn:ietf:params:xml:ns:pidf\"\
    />\n     </ns-bindings>\n     <filter id=\"999\" uri=\"sip:sarah@example.com\"\
    >\n       <what>\n         <include type=\"namespace\">\n           urn:ietf:params:xml:ns:pidf</include>\n\
    \         <exclude>\n           //pidf:tuple/pidf:note</exclude>\n       </what>\n\
    \     </filter>\n     <filter id=\"8439\" uri=\"sip:alice@biloxi.com\">\n    \
    \   <what>\n         <include>\n           //pidf:tuple/pidf:status/pidf:basic</include>\n\
    \       </what>\n     </filter>\n   </filter-set>\n   RLS1 fans out subscriptions\
    \ to resources on list1.  The text above\n   suggests that if a filter is destined\
    \ to a resource that is not part\n   of the list and is outside the administrative\
    \ domain of an RLS, then\n   that filter is propagated.  The rest are consumed.\
    \  In our example,\n   only the filter to alice@biloxi.com is propagated since\
    \ biloxi.com is\n   not under the administrative domain of RLS1.  The filter to\n\
    \   sarah@example.com is consumed, and RLS1 needs to apply that filter to\n  \
    \ notifications it receives.\n   URI matching is done according to the matching\
    \ rules defined for a\n   particular scheme (SIP URI matching rules are defined\
    \ in RFC 3261\n   [2]).\n   A filter may also be addressed to a domain using the\
    \ 'domain'\n   attribute instead of the 'uri' attribute.  In this case, the filter\n\
    \   applies to resources in that domain, and the RLS MUST NOT apply\n   filters\
    \ to any notifications it sends.  Instead, it MUST forward the\n   filter with\
    \ all fanned-out subscriptions to the notifiers.\n   As indicated in Section 3.3.1,\
    \ multiple filters can be present in a\n   SUBSCRIBE request.  Filters can also\
    \ be added or modified as\n   indicated in Section 3.3.3.  In such circumstances,\
    \ an RLS MUST check\n   that there are no filters addressed to the same resource\
    \ or domain,\n   and if there are, it MUST reject the SUBSCRIBE request with a\
    \ \"488\"\n   error response.\n"
- title: 4.2.  Changing Filters within a Dialog
  contents:
  - "4.2.  Changing Filters within a Dialog\n   If an RLS receives a subscription\
    \ refresh request with no filters\n   specified (empty payload), the RLS assumes\
    \ that the client does not\n   wish to update the filters.  If an RLS receives\
    \ a subscription\n   refresh with a filter containing the 'remove=\"true\"' attribute,\
    \ as\n   defined in [5], the RLS assumes that the client is removing that\n  \
    \ filter identified by the filter ID.\n   If an RLS receives a subscription refresh\
    \ request with a filter that\n   already exists (i.e., having the same filter\
    \ ID), the RLS interprets\n   it as a replacement of the existing filter.  Replacing\
    \ a filter by\n   changing the filter ID and keeping the resource URI is considered\
    \ an\n   error since this causes the RLS to assume that two filters are in\n \
    \  place for the same resource.\n   A filter can be disabled and re-enabled using\
    \ the 'enabled' attribute\n   in the <filter> element, as described in [5].\n"
- title: 5.  Server Operation
  contents:
  - '5.  Server Operation

    '
- title: 5.1.  NOTIFY Bodies
  contents:
  - "5.1.  NOTIFY Bodies\n   SIP entities compliant with this specification MUST support\n\
    \   content-type 'application/simple-filter+xml'.\n"
- title: 5.2.  Notifier Processing of SUBSCRIBE Requests
  contents:
  - "5.2.  Notifier Processing of SUBSCRIBE Requests\n   This section presents additional\
    \ functionality required from the\n   notifier when filters are used in the bodies\
    \ of the SUBSCRIBE\n   requests.  Normal package-specific functionality is otherwise\n\
    \   followed.\n   The notifier will examine the Content-Type header field and\
    \ will\n   return a 415 response if it does not understand the content type\n\
    \   'application/simple-filter+xml'.\n   A 200-class response indicates that the\
    \ subscription has been\n   accepted, and the NOTIFY will be sent immediately.\
    \  A \"200\" response\n   indicates that the subscription has been accepted, the\
    \ user is\n   authorized, and the filter is accepted.  A \"202\" response merely\n\
    \   indicates that the subscription has been understood, but that the\n   authorization\
    \ may or may not have been granted.  A \"202\" response\n   also indicates that\
    \ the filters have not been accepted yet.  The\n   acceptance of the filters MAY\
    \ arrive in a subsequent NOTIFY.\n   Procedures described in Section 5.4 are followed\
    \ if an error is\n   encountered.\n   As indicated in Section 3.3.1, multiple\
    \ filters can be present in a\n   SUBSCRIBE request.  Filters can also be added\
    \ or modified as\n   indicated in Section 3.3.3.  In such circumstances, a server\
    \ MUST\n   check that there are no filters addressed to the same resource or\n\
    \   domain, and if they are, it MUST reject the SUBSCRIBE request with a\n   \"\
    488\" error response.\n"
- title: 5.2.1.  Request-URI vs. Filter URI
  contents:
  - "5.2.1.  Request-URI vs. Filter URI\n   The subscriber may have chosen to leave\
    \ the URI in the filter\n   undefined.  If the URI is not defined within the filter,\
    \ the filter\n   applies to the resource identified in the Request-URI.\n   Similarly,\
    \ the subscriber may have chosen to include a URI in the\n   filter.  In this\
    \ case, the filter applies to all notifications sent\n   with content associated\
    \ with the resource with that URI for this\n   subscription.  If the Request-URI\
    \ and the URI in the filter do not\n   match, the filter may be ignored or rejected.\
    \  URI matching is done\n   according to the matching rules defined for a particular\
    \ scheme (SIP\n   URI matching rules are defined in RFC 3261 [2]).\n   A filter\
    \ may also be addressed to a domain using the 'domain'\n   attribute instead of\
    \ the 'uri' attribute.  In this case, the filter\n   applies to resources in that\
    \ domain.  A notifier MUST ignore any\n   filter using a 'domain' attribute containing\
    \ a domain for which this\n   notifier is not responsible.  The notifier MUST\
    \ NOT apply such a\n   filter to any notification it sends.  Notifiers belonging\
    \ to the\n   domain MUST apply the filter to all notifications it sends for that\n\
    \   subscription, unless policy dictates otherwise.\n"
- title: 5.2.2.  Changing Filters within a Dialog
  contents:
  - "5.2.2.  Changing Filters within a Dialog\n   If a server receives a subscription\
    \ refresh request with no filters\n   specified (empty payload), it assumes that\
    \ the client does not wish\n   to update the filters.  If it receives a subscription\
    \ refresh with a\n   filter containing the 'remove=\"true\"' attribute, as defined\
    \ in [5],\n   the server assumes that the client is removing the filter identified\n\
    \   by the filter ID.\n   If the server receives a subscription refresh request\
    \ with a filter\n   that already exists (i.e., having the same filter ID), it\
    \ interprets\n   it as a replacement of the existing filter.  Replacing a filter\
    \ by\n   changing the filter ID and keeping the resource URI is considered an\n\
    \   error since this causes the server to assume that two filters are\n   placed\
    \ for the same resource.\n"
- title: 5.3.  Notifier Generating of NOTIFY Requests
  contents:
  - "5.3.  Notifier Generating of NOTIFY Requests\n   Upon receiving the SUBSCRIBE\
    \ with the filter, the notifier SHOULD\n   retain the filter as long as the subscription\
    \ persists.  The filter\n   MAY be incorporated within an existing subscription\
    \ (in an active\n   dialog) by sending a re-SUBSCRIBE that includes the filter\
    \ in the\n   body.\n   If the response sent to the SUBSCRIBE was a \"202\" and\
    \ the \"202\" was\n   chosen because the filter could not be accepted that time,\
    \ the NOTIFY\n   MAY be used to terminate the subscription if the filter is found\n\
    \   unacceptable.\n   As described in [3], the NOTIFY message MAY contain a body\
    \ that\n   describes the state of the resource.  This body is in one of the\n\
    \   formats listed in the Accept header field of the SUBSCRIBE, or in the\n  \
    \ package-specific default if the Accept header field is omitted.\n   Based on\
    \ the contents of a filter, the following processing occurs:\n   o  A filter with\
    \ only a <what> element will result in sending the\n      requested resource state\
    \ information in that <what> element\n      whenever there is a change in the\
    \ resource state.\n   o  A filter with only a <trigger> element will result in\
    \ sending all\n      resource state information whenever there is a change in\
    \ the\n      resource state that matches the triggers.\n   o  A filter with <what>\
    \ and <trigger> elements will result in sending\n      the requested resource\
    \ state information in that <what> element\n      whenever there is a change in\
    \ the resource state that matches the\n      triggers.\n   When a filter is disabled\
    \ (by setting the 'enabled' attribute to\n   \"false\"), it means the same thing\
    \ as the absence of that filter.\n   That is, all state and state changes are\
    \ reported by issuing a\n   notification to the subscriber (assuming there are\
    \ no other filters).\n   When a filter is re-enabled (by setting the 'enabled'\
    \ attribute to\n   \"true\" or by omitting the 'enabled' attribute), the notifier\
    \ behaves\n   as if the filter has just been placed by the SUBSCRIBE request\n\
    \   enabling it.  Immediate NOTIFY rules, as stated in Section 5.3.1,\n   apply.\n"
- title: 5.3.1.  Generation of NOTIFY Contents
  contents:
  - "5.3.1.  Generation of NOTIFY Contents\n   If the NOTIFY being sent is the one\
    \ sent immediately after a 2xx\n   response to the original SUBSCRIBE, its contents\
    \ MUST be populated\n   according to the filter <what> element, unless the processing\
    \ of the\n   filters will take too long or the NOTIFY request is following a \"\
    202\"\n   response to the SUBSCRIBE request and is terminating the\n   subscription.\
    \  In the case that the filter is taking too long to\n   process, the NOTIFY request\
    \ being sent may be empty or may be\n   populated with a pre-configured value\
    \ as authorised to that\n   subscriber.  If applying the filter results in no\
    \ content to be\n   delivered, the NOTIFY MUST be sent with empty contents.  If\
    \ the\n   filter contains <trigger> elements, the notifier ignores the trigger\n\
    \   values when generating the first NOTIFY request.\n   The input to the content\
    \ filter is a package-specific XML document\n   (e.g., [7] and [9]) derived according\
    \ to the package-specific\n   specifications, (e.g., [8] and [10]).\n   The content\
    \ is filtered according to the expressions in the <what>\n   element of the filter.\
    \  The expression indicates the delivered XML\n   elements and/or attributes.\
    \  Prefixes of the namespaces of the items\n   of the XML document to be filtered\
    \ must be expanded before applying\n   the filter to the items.\n   The expression\
    \ directly states the XML elements and attributes to be\n   delivered in the NOTIFY,\
    \ along with their values.  In addition to the\n   selected contents, the namespaces\
    \ of all the selected items are also\n   included in the NOTIFY.  The XML elements\
    \ and/or attributes indicated\n   by the expression in the <what> element must\
    \ be items that the\n   subscriber is authorised to see.  If they are not, the\
    \ notifier\n   policy dictates the behaviour of the notifier (which can ignore\
    \ the\n   filter, parts of the filter, or reject the filter completely).\n   Implementers\
    \ need to carefully consider such an implementation\n   decision; the subscriber\
    \ may not be aware of the authorised contents\n   and therefore most likely will\
    \ include a filter requesting\n   unauthorised contents.  It is therefore RECOMMENDED\
    \ that notifiers\n   just ignore the parts of the filter that are requesting unauthorised\n\
    \   info (i.e., the filter in the <filter> element where the unauthorised\n  \
    \ contents are requested is ignored).  If polite blocking is used by\n   the notifier,\
    \ the notifier may choose to deliver notifications\n   containing bogus information\
    \ in the unauthorised elements or\n   attributes and applying the filter afterwards.\n\
    \   The resultant XML document MUST be well formed and valid according to\n  \
    \ the XML schema.  This means that all mandatory elements and\n   attributes,\
    \ along with their values, MUST be included in the XML\n   document regardless\
    \ of the expression.  In other words, if the result\n   of applying a filter on\
    \ an XML document is a non-valid XML document,\n   the notifier MUST add elements\
    \ and attributes, along with their\n   values, from the original XML document\
    \ into the newly formulated one\n   in order for it to be valid.\n"
- title: 5.3.2.  Handling of Notification Triggering Rules
  contents:
  - "5.3.2.  Handling of Notification Triggering Rules\n   There can be several <trigger>\
    \ elements inside one <filter> element.\n   If the criteria for any of the <trigger>\
    \ elements are satisfied, a\n   NOTIFY SHOULD be generated.\n   The items (XML\
    \ elements and/or attributes) indicated by the\n   expression in the <changed>\
    \ element, <added> element, or <removed>\n   element must be items that the subscriber\
    \ is authorised to access.\n   If they are not, the notifier policy dictates the\
    \ behaviour of the\n   notifier (which can ignore the filter, parts of the filter,\
    \ or reject\n   the filter completely).\n"
- title: 5.4.  Handling Abnormal Cases
  contents:
  - "5.4.  Handling Abnormal Cases\n   In case of an invalid filter definition where\
    \ the XML document of the\n   filter is not aligned with the XML schema of the\
    \ filter format [5],\n   the notifier rejects the SUBSCRIBE request with a \"\
    488\" response.  A\n   Warning header field in the response may give a better\
    \ indication as\n   to why the filters were not accepted.  If the subscription\
    \ was\n   accepted with a \"202\" response but the invalid filter was discovered\n\
    \   after that, a NOTIFY with a subscription-state of value 'terminated'\n   is\
    \ sent.  An event-reason-value \"badfilter\", introduced here, of\n   subexp-params\
    \ [3] MAY be included.\n   In case of an erroneous expression in the filter definition,\
    \ the\n   notifier either ignores the filter definition or terminates the\n  \
    \ subscription.\n   If a <what> or <trigger> element is empty, the notifier proceeds\
    \ as\n   if the element did not exist.\n"
- title: 6.  XML Document Validation
  contents:
  - "6.  XML Document Validation\n   The subscriber of the filter MUST ensure that\
    \ the XML document\n   inserted as the SUBSCRIBE request body is well formed and\
    \ valid.  The\n   subscriber MUST NOT insert any extension elements or attributes\
    \ into\n   the XML document unless it has access to the extension schema and can\n\
    \   validate the XML document.  The XML document notifier MAY validate\n   the\
    \ XML document according to the schemas, including extension\n   schemas, to which\
    \ it has access that are applicable to this XML\n   document.\n"
- title: 7.  Examples
  contents:
  - "7.  Examples\n   The following sections include filtering examples for Presence\
    \ and\n   Watcher Information.  The format of filter is according to [5].\n"
- title: 7.1.  Presence Specific Examples
  contents:
  - "7.1.  Presence Specific Examples\n   This section describes three use cases where\
    \ the presence information\n   filtering solution is utilised [8].  In the first\
    \ use case, the\n   watcher is interested in getting messaging-specific information\
    \ of a\n   certain presentity.  In the second use case, the watcher is\n   interested\
    \ in getting information about the communication means and\n   contact addresses\
    \ on which the presentity is currently available for\n   communication.  The third\
    \ case shows how a presentity can request\n   triggers to receive notifications.\n\
    \   Below is the presentity's presence information in PIDF [7].  It\n   includes\
    \ two tuples: one for the instant messaging and another for\n   the voice-related\
    \ information.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n         <presence\
    \ xmlns=\"urn:ietf:params:xml:ns:pidf\"\n                           xmlns:rpid=\"\
    urn:ietf:params:xml:ns:pidf:rpid\"\n                           entity=\"sip:presentity@example.com\"\
    >\n            <tuple id=\"432sd\">\n               <status>\n               \
    \   <basic>closed</basic>\n               </status>\n               <rpid:class>IM</rpid:class>\n\
    \               <contact>im:presentity@example.com</contact>\n            </tuple>\n\
    \            <tuple id=\"thr76jk\">\n               <status>\n               \
    \   <basic>open</basic>\n               </status>\n               <rpid:class>voice</rpid:class>\n\
    \               <contact>tel:2224055555@example.com</contact>\n            </tuple>\n\
    \         </presence>\n"
- title: 7.1.1.  Subscriber Requests Messaging-Related Information
  contents:
  - "7.1.1.  Subscriber Requests Messaging-Related Information\n   The subscriber\
    \ initiates a subscription to the presentity's messaging\n   (MMS, IM, and SMS)\
    \ related presence information.  The subscription\n   includes the content limiting\
    \ filter.\n   The filtered content is indicated with an expression.  This\n  \
    \ expression selects the <basic> element and all the parent elements\n   (i.e.,\
    \ the <status>, the <tuple>, and its root element), the <class>\n   element, and\
    \ the <contact> element.  The filter matches if the\n   <class> element contains\
    \ \"MMS\", \"SMS\", or \"IM\".\n   In this case, the notification includes the\
    \ contents of the tuple\n   that has the value \"IM\" in its <class> element.\n\
    \   SUBSCRIBE request from the subscriber including filter:\n   SUBSCRIBE sip:presentity@example.com\n\
    \   Via: SIP/2.0/TCP client.example.com:5060;branch=z9hG4bKxjfdsjfk\n   To: <sip:presentity@example.com>\n\
    \   From: <sip:watcher@example.com>;tag:12341111\n   Call-ID: 32432udfidfjmk342\n\
    \   Cseq: 1 SUBSCRIBE\n   Expires: 3600\n   Event: Presence\n   Contact: <sip:watcher@client.example.com>\n\
    \   Content-Type: application/simple-filter+xml\n   Content-Length: ...\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <filter-set xmlns=\"urn:ietf:params:xml:ns:simple-filter\"\
    >\n     <ns-bindings>\n       <ns-binding prefix=\"pidf\" urn=\"urn:ietf:params:xml:ns:pidf\"\
    />\n       <ns-binding prefix=\"rpid\"\n                          urn=\"urn:ietf:params:xml:ns:pidf:rpid\"\
    />\n     </ns-bindings>\n     <filter id=\"123\" uri=\"sip:presentity@example.com\"\
    >\n       <what>\n         <include type=\"xpath\">\n           //pidf:tuple[rpid:class=\"\
    IM\" or rpid:class=\"SMS\"\n           or rpid:class=\"MMS\"]/pidf:status/pidf:basic\n\
    \       </include>\n       <include type=\"xpath\">\n         //pidf:tuple[rpid:class=\"\
    IM\" or rpid:class=\"SMS\"\n         or rpid:class=\"MMS\"]/rpid:class\n     \
    \  </include>\n       <include type=\"xpath\">\n         //pidf:tuple[rpid:class=\"\
    IM\" or rpid:class=\"SMS\"\n         or rpid:class=\"MMS\"]/pidf:contact\n   \
    \    </include>\n       </what>\n     </filter>\n   </filter-set>\n   Notification\
    \ to the subscriber:\n   NOTIFY sip:watcher@client.example.com SIP/2.0\n   Via:\
    \ SIP/2.0/TCP presence.example.com:5060;branch=z9hG4bKxjfder\n   To: <sip:watcher@example.com>;tag:12341111\n\
    \   From: <sip:presentity@example.com>;tag:232321\n   Call-ID: 32432udfidfjmk342\n\
    \   Cseq: 1 NOTIFY\n   Event: Presence\n   Subscription-State: active; expires=3599\n\
    \   Contact: sip:presentity@server.example.com\n   Content-Type: application/pidf+xml\n\
    \   Content-Length: ...\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n     \
    \ <presence xmlns=\"urn:ietf:params:xml:ns:pidf\"\n      xmlns:rpid=\"urn:ietf:params:xml:ns:pidf:rpid\"\
    \n      entity=\"sip:presentity@example.com\">\n         <tuple id=\"432sd\">\n\
    \            <status>\n               <basic>closed</basic>\n            </status>\n\
    \            <rpid:class>IM</rpid:class>\n            <contact>im:presentity@example.com</contact>\n\
    \         </tuple>\n      </presence>\n"
- title: 7.1.2.  Subscriber Fetches Information about "Open" Communication Means
  contents:
  - "7.1.2.  Subscriber Fetches Information about \"Open\" Communication Means\n \
    \  The subscriber makes a subscription to the presentity's available\n   communication\
    \ means.  The subscription includes the content-limiting\n   filter.\n   The filtered\
    \ content is indicated with an expression.  This\n   expression selects the <basic>\
    \ element and all the parent elements\n   (i.e., the <status>, the <tuple>, and\
    \ its root element), the <class>\n   element, and the <contact> element.  The\
    \ filter matches if the\n   <basic> element's value is \"open\".\n   In this case,\
    \ the notification returns the contents of the tuple that\n   has the value \"\
    open\" inside the <status> element.\n   SUBSCRIBE request from the subscriber\
    \ including filter:\n   SUBSCRIBE sip:presentity@example.com SIP/2.0\n   Via:\
    \ SIP/2.0/TCP client.example.com:5060;branch=z9hG4bKxjfdsjfk\n   To: <sip:presentity@example.com>\n\
    \   From: <sip:watcher@example.com>;tag:12341111\n   Call-ID: 32432udfidfjmk342\n\
    \   Cseq: 1 SUBSCRIBE\n   Expires: 3600\n   Event: Presence\n   Contact: <sip:watcher@client.example.com>\n\
    \   Content-Type: application/simple-filter+xml\n   Content-Length: ...\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <filter-set xmlns=\"urn:ietf:params:xml:ns:simple-filter\"\
    >\n     <ns-bindings>\n       <ns-binding prefix=\"pidf\" urn=\"urn:ietf:params:xml:ns:pidf\"\
    />\n       <ns-binding prefix=\"rpid\"\n                          urn=\"urn:ietf:params:xml:ns:pidf:rpid\"\
    />\n     </ns-bindings>\n     <filter id=\"123\" uri=\"sip:presentity@example.com\"\
    >\n       <what>\n         <include type=\"xpath\">\n           //pidf:tuple/pidf:status[pidf:basic=\"\
    open\"]/pidf:basic\n         </include>\n         <include type=\"xpath\">\n \
    \          //pidf:tuple[pidf:status/pidf:basic=\"open\"]/rpid:class\n        \
    \ </include>\n         <include type=\"xpath\">\n           //pidf:tuple[pidf:status/pidf:basic=\"\
    open\"]/pidf:contact\n         </include>\n       </what>\n     </filter>\n  \
    \ </filter-set>\n   Notification to the subscriber:\n   NOTIFY sip:watcher@client.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TCP presence.example.com:5060;branch=z9hG4bKxjfder\n\
    \   To: <sip:watcher@example.com>;tag:12341111\n   From: <sip:presentity@example.com>;tag:232321\n\
    \   Call-ID: 32432udfidfjmk342\n   Cseq: 1 NOTIFY\n   Event: Presence\n   Subscription-State:\
    \ active; expires=3599\n   Contact: sip:presentity@server.example.com\n   Content-Type:\
    \ application/pidf+xml\n   Content-Length: ...\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n      <presence xmlns=\"urn:ietf:params:xml:ns:pidf\"\n      xmlns:rpid=\"\
    urn:ietf:params:xml:ns:pidf:rpid\"\n      entity=\"sip:presentity@example.com\"\
    >\n         <tuple id=\"thr76jk\">\n            <status>\n               <basic>open</basic>\n\
    \            </status>\n               <rpid:class>voice</rpid:class>\n      \
    \         <contact>tel:2224055555@example.com</contact>\n         </tuple>\n \
    \     </presence>\n"
- title: 7.1.3.  Subscriber Requests Notifications When Presentity's Status
  contents:
  - "7.1.3.  Subscriber Requests Notifications When Presentity's Status\n        Changes\n\
    \   The subscriber subscribes to the presentity, specifying in the filter\n  \
    \ that it wants notifications only when the <basic> element has changed\n   to\
    \ value \"open\".\n   SUBSCRIBE request from the subscriber including filter:\n\
    \   SUBSCRIBE sip:presentity@example.com\n   Via: SIP/2.0/TCP client.example.com:5060;branch=z9hG4bKxjfdsjfk\n\
    \   To: <sip:presentity@example.com>\n   From: <sip:watcher@example.com>;tag:12341111\n\
    \   Call-ID: 32432udfidfjmk342\n   Cseq: 1 SUBSCRIBE\n   Expires: 3600\n   Event:\
    \ Presence\n   Contact: <sip:watcher@client.example.com>\n   Content-Type: application/simple-filter+xml\n\
    \   Content-Length: ...\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <filter-set\
    \ xmlns=\"urn:ietf:params:xml:ns:simple-filter\">\n     <ns-bindings>\n      \
    \ <ns-binding prefix=\"pidf\" urn=\"urn:ietf:params:xml:ns:pidf\"/>\n     </ns-bindings>\n\
    \     <filter id=\"123\" uri=\"sip:presentity@example.com\">\n       <trigger>\n\
    \         <changed from=\"closed\" to=\"open\">\n           /pidf:presence/pidf:tuple/pidf:status/pidf:basic\n\
    \         </changed>\n       </trigger>\n     </filter>\n   </filter-set>\n  \
    \ At some point during the subscription, a second PIDF document is\n   created\
    \ with both tuples having a status of \"closed\":\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n      <presence xmlns=\"urn:ietf:params:xml:ns:pidf\"\n      xmlns:rpid=\"\
    urn:ietf:params:xml:ns:pidf:rpid\"\n      entity=\"sip:presentity@example.com\"\
    >\n         <tuple id=\"432sd\">\n            <status>\n              <basic>closed</basic>\n\
    \            </status>\n               <rpid:class>IM</rpid:class>\n         \
    \      <contact>im:presentity@example.com</contact>\n         </tuple>\n     \
    \    <tuple id=\"thr76jk\">\n            <status>\n               <basic>closed</basic>\n\
    \            </status>\n            <rpid:class>voice</rpid:class>\n         \
    \   <contact>tel:2224055555@example.com</contact>\n         </tuple>\n      </presence>\n\
    \   A NOTIFY is not sent to the subscriber in this case.\n   Now, a third PIDF\
    \ document is created when the IM status changes to\n   \"open\":\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n      <presence xmlns=\"urn:ietf:params:xml:ns:pidf\"\
    \n      xmlns:rpid=\"urn:ietf:params:xml:ns:pidf:rpid\"\n      entity=\"sip:presentity@example.com\"\
    >\n         <tuple id=\"432sd\">\n            <status>\n               <basic>open</basic>\n\
    \            </status>\n            <rpid:class>IM</rpid:class>\n            <contact>im:presentity@example.com</contact>\n\
    \         </tuple>\n         <tuple id=\"thr76jk\">\n            <status>\n  \
    \             <basic>closed</basic>\n            </status>\n            <rpid:class>voice</rpid:class>\n\
    \            <contact>tel:2224055555@example.com</contact>\n         </tuple>\n\
    \      </presence>\n   Notification containing both tuples is sent to the subscriber\
    \ in this\n   case:\n   NOTIFY sip:watcher@client.example.com SIP/2.0\n   Via:\
    \ SIP/2.0/TCP presence.example.com:5060;branch=z9hG4bKxjfder\n   To: <sip:watcher@example.com>;tag:12341111\n\
    \   From: <sip:presentity@example.com>;tag:232321\n   Call-ID: 32432udfidfjmk342\n\
    \   Cseq: 1 NOTIFY\n   Event: Presence\n   Subscription-State: active; expires=3599\n\
    \   Contact: sip:presentity@server.example.com\n   Content-Type: application/pidf+xml\n\
    \   Content-Length: ...\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n     \
    \ <presence xmlns=\"urn:ietf:params:xml:ns:pidf\"\n      xmlns:rpid=\"urn:ietf:params:xml:ns:pidf:rpid\"\
    \n      entity=\"sip:presentity@example.com\">\n         <tuple id=\"432sd\">\n\
    \            <status>\n               <basic>closed</basic>\n            </status>\n\
    \            <rpid:class>IM</rpid:class>\n            <contact>im:presentity@example.com</contact>\n\
    \         </tuple>\n         <tuple id=\"thr76jk\">\n            <status>\n  \
    \             <basic>open</basic>\n            </status>\n            <rpid:class>voice</rpid:class>\n\
    \            <contact>tel:2224055555@example.com</contact>\n         </tuple>\n\
    \      </presence>\n"
- title: 7.2.  Watcher Information Specific Examples
  contents:
  - "7.2.  Watcher Information Specific Examples\n   The examples in this section\
    \ use the winfo template-package with the\n   presence event package [10].\n \
    \  Watcher information to a Presentity:\n      <?xml version=\"1.0\"?>\n     \
    \   <watcherinfo xmlns=\"urn:ietf:params:xml:ns:watcherinfo\"\n      version=\"\
    0\" state=\"full\">\n        <watcher-list resource=\"sip:presentity@example.com\"\
    \n                      package=\"presence\">\n            <watcher status=\"\
    active\"\n               id=\"sr8fdsj\"\n               duration-subscribed=\"\
    509\"\n               expiration=\"20\"\n               event=\"approved\">sip:watcherA@example.com\"\
    </watcher>\n            <watcher status=\"pending\"\n               id=\"sr8fdsj\"\
    \n               duration-subscribed=\"501\"\n               expiration=\"100\"\
    \n               event=\"subscribe\">sip:watcherB@example.com\"</watcher>\n  \
    \          <watcher status=\"terminated\"\n               id=\"sr8fdsj\"\n   \
    \            duration-subscribed=\"500\"\n               expiration=\"0\"\n  \
    \             event=\"rejected\">sip:watcherC@example.com\"</watcher>\n      \
    \      <watcher status=\"active\"\n               id=\"sr8fdsj\"\n           \
    \    duration-subscribed=\"20\"\n               expiration=\"30\"\n          \
    \     event=\"approved\">sip:watcherD@example.com\"</watcher>\n        </watcher-list>\n\
    \        </watcherinfo>\n"
- title: 7.2.1.  Watcher Subscriber Makes Subscription to Get All the Information
  contents:
  - "7.2.1.  Watcher Subscriber Makes Subscription to Get All the Information\n  \
    \      about Active Watchers\n   SUBSCRIBE request from the presentity including\
    \ the filter:\n   SUBSCRIBE sip:presentity@example.com\n   Via: SIP/2.0/TCP client.example.com:5060;branch=z9hG4bKxjfdsjfk\n\
    \   To: <sip:presentity@example.com>\n   From: <sip:presentity@example.com>;tag:12341111\n\
    \   Call-ID: 32432udfidfjmk342\n   Cseq: 1 SUBSCRIBE\n   Expires: 3600\n   Event:\
    \ Presence.winfo\n   Contact: sip:presentity@client.example.com\n   Content-Type:\
    \ application/simple-filter+xml\n   Content-Length: ...\n   <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\"?>\n   <filter-set xmlns=\"urn:ietf:params:xml:ns:simple-filter\"\
    >\n     <ns-bindings>\n       <ns-binding prefix=\"wi\"\n                    \
    \      urn=\"urn:ietf:params:xml:ns:watcherinfo\"/>\n     </ns-bindings>\n   \
    \  <filter id=\"123\" uri=\"sip:presentity@example.com\">\n       <what>\n   \
    \      <include>\n           /wi:watcherinfo/wi:watcher-list[@package=\"presence\"\
    ]/\n           wi:watcher[@status=\"active\"]\n         </include>\n   </what>\n\
    \   </filter>\n   </filter-set>\n   Notification to the subscriber:\n   NOTIFY\
    \ sip:presentity@client.example.com SIP/2.0\n   Via: SIP/2.0/TCP presence.example.com:5060;branch=z9hG4bKxjfder\n\
    \   To: sip:presentity@example.com;tag:12341111\n   From: sip:presentity@example.com;tag:232321\n\
    \   Call-ID: 32432udfidfjmk342\n   Cseq: 1 NOTIFY\n   Contact: sip:presentity@server.example.com\n\
    \   Event: Presence.winfo\n   Content-Type: application/watcherinfo+xml\n   Content-Length:\
    \ ...\n   <?xml version=\"1.0\"?>\n     <watcherinfo xmlns=\"urn:ietf:params:xml:ns:watcherinfo\"\
    \n   version=\"0\" state=\"full\">\n     <watcher-list resource=\"sip:presentity@example.com\"\
    \n                   package=\"presence\">\n         <watcher status=\"active\"\
    \n            id=\"sr8fdsj\"\n            duration-subscribed=\"509\"\n      \
    \      expiration=\"20\"\n            event=\"approved\">sip:watcherA@example.com\"\
    </watcher>\n         <watcher status=\"active\"\n            id=\"sr8fdsj\"\n\
    \            duration-subscribed=\"20\"\n            expiration=\"30\"\n     \
    \       event=\"approved\">sip:watcherD@example.com\"</watcher>\n     </watcher-list>\n\
    \     </watcherinfo>\n"
- title: 7.2.2.  Watcher Subscriber Requests Information of Watchers with
  contents:
  - "7.2.2.  Watcher Subscriber Requests Information of Watchers with\n        Specific\
    \ Subscription Duration Conditions\n   SUBSCRIBE request from the presentity including\
    \ the filter:\n   SUBSCRIBE sip:presentity@example.com\n   Via: SIP/2.0/TCP client.example.com:5060;branch=z9hG4bKxjfdsjfk\n\
    \   To: <sip:presentity@example.com>;tag:12341111\n   From: <sip:presentity@example.com>\n\
    \   Call-ID: 32432udfidfjmk342\n   Cseq: 1 SUBSCRIBE\n   Expires: 0\n   Event:\
    \ Presence.winfo\n   Contact: <sip:presentity@client.example.com>\n   Content-Type:\
    \ application/simple-filter+xml\n   Content-Length: ...\n   <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\"?>\n   <filter-set xmlns=\"urn:ietf:params:xml:ns:simple-filter\"\
    >\n     <ns-bindings>\n       <ns-binding prefix=\"wi\"\n                    \
    \      urn=\"urn:ietf:params:xml:ns:watcherinfo\"/>\n     </ns-bindings>\n   \
    \  <filter id=\"123\" uri=\"sip:presentity@example.com\">\n       <what>\n   \
    \      <include>\n           /wi:watcherinfo/wi:watcher-list[@package=\"presence\"\
    ]/\n           wi:watcher[@duration-subscribed>500]\n         </include>\n   \
    \    </what>\n     </filter>\n   </filter-set>\n   Notification to the subscriber:\n\
    \   NOTIFY sip:presentity@client.example.com SIP/2.0\n   Via: SIP/2.0/TCP presence.example.com:5060;branch=z9hG4bKxjfder\n\
    \   To: sip:presentity@example.com;tag:12341111\n   From: sip:presentity@example.com;tag:232321\n\
    \   Call-ID: 32432udfidfjmk342\n   Cseq: 1 NOTIFY\n   Contact: sip:presentity@server.example.com\n\
    \   Event: Presence.winfo\n   Content-Type: application/watcherinfo+xml\n   Content-Length:\
    \ ...\n   <?xml version=\"1.0\"?>\n     <watcherinfo xmlns=\"urn:ietf:params:xml:ns:watcherinfo\"\
    \n   version=\"0\" state=\"full\">\n     <watcher-list resource=\"sip:presentity@example.com\"\
    \n                   package=\"presence\">\n         <watcher status=\"active\"\
    \n            id=\"sr8fdsj\"\n            duration-subscribed=\"509\"\n      \
    \      expiration=\"20\"\n            event=\"approved\">sip:watcherA@example.com\"\
    </watcher>\n         <watcher status=\"pending\"\n            id=\"sr8fdsj\"\n\
    \            duration-subscribed=\"501\"\n            expiration=\"100\"\n   \
    \         event=\"subscribe\">sip:watcherB@example.com\"</watcher>\n     </watcher-list>\n\
    \     </watcherinfo>\n"
- title: 7.2.3.  Watcher Subscriber Requests Specific Watcher Info on Specific
  contents:
  - "7.2.3.  Watcher Subscriber Requests Specific Watcher Info on Specific\n     \
    \   Triggers\n   This filter selects watcher information notifications [9] to\
    \ be sent\n   when the pending subscription status has changed from \"pending\"\
    \ to\n   \"terminated\".  In the notification, only the watchers that have a\n\
    \   status of \"terminated\" and an event of \"rejected\" are included.\n   SUBSCRIBE\
    \ request from the Watcher Subscriber including the filter:\n   SUBSCRIBE sip:presentity@example.com\n\
    \   Via: SIP/2.0/TCP client.example.com:5060;branch=z9hG4bKxjfdsjfk\n   To: <sip:presentity@example.com>;tag:12341111\n\
    \   From: <sip:presentity@example.com>\n   Call-ID: 32432udfidfjmk342\n   Cseq:\
    \ 1 SUBSCRIBE\n   Expires: 0\n   Event: Presence.winfo\n   Contact: <sip:presentity@client.example.com>\n\
    \   Content-Type: application/simple-filter+xml\n   Content-Length: ...\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <filter-set xmlns=\"urn:ietf:params:xml:ns:simple-winfo-filter\"\
    >\n     <ns-bindings>\n       <ns-binding prefix=\"wi\"\n                    \
    \      urn=\"urn:ietf:params:xml:ns:watcherinfo\"/>\n     </ns-bindings>\n   \
    \  <filter id=\"123\" uri=\"sip:presentity@example.com\">\n       <what>\n   \
    \      <include>\n           /wi:watcherinfo/wi:watcher-list[@package=\"presence\"\
    ]/\n           wi:watcher[@status=\"terminated\" and @event=\"rejected\"]\n  \
    \       </include>\n       </what>\n       <trigger>\n         <changed from=\"\
    pending\"\n                                             to=\"terminated\">\n \
    \          //@status\n         </changed>\n       </trigger>\n     </filter>\n\
    \   </filter-set>\n   At some point during the subscription, a second Winfo document\
    \ is\n   created due to some change:\n    <?xml version=\"1.0\"?>\n        <watcherinfo\
    \ xmlns=\"urn:ietf:params:xml:ns:watcherinfo\"\n      version=\"0\" state=\"full\"\
    >\n        <watcher-list resource=\"sip:presentity@example.com\"\n           \
    \           package=\"presence\">\n            <watcher status=\"active\"\n  \
    \             id=\"sr8fdsj\"\n               duration-subscribed=\"509\"\n   \
    \            expiration=\"20\"\n               event=\"approved\">sip:watcherA@example.com\"\
    </watcher>\n            <watcher status=\"terminated\"\n               id=\"sr8fdsj\"\
    \n               duration-subscribed=\"501\"\n               expiration=\"100\"\
    \n               event=\"rejected\">sip:watcherB@example.com\"</watcher>\n   \
    \         <watcher status=\"terminated\"\n               id=\"sr8fdsj\"\n    \
    \           duration-subscribed=\"500\"\n               expiration=\"0\"\n   \
    \            event=\"rejected\">sip:watcherC@example.com\"</watcher>\n       \
    \     <watcher status=\"active\"\n               id=\"sr8fdsj\"\n            \
    \   duration-subscribed=\"20\"\n               expiration=\"30\"\n           \
    \    event=\"approved\">sip:watcherD@example.com\"</watcher>\n       </watcher-list>\n\
    \        </watcherinfo>\n   Notification to the subscriber is created, taking\
    \ into account the\n   <trigger> and <what> elements:\n   NOTIFY sip:presentity@client.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TCP presence.example.com:5060;branch=z9hG4bKxjfder\n\
    \   To: sip:presentity@example.com;tag:12341111\n   From: sip:presentity@example.com;tag:232321\n\
    \   Call-ID: 32432udfidfjmk342\n   Cseq: 1 NOTIFY\n   Contact: sip:presentity@server.example.com\n\
    \   Event: Presence.winfo\n   Content-Type: application/watcherinfo+xml\n   Content-Length:\
    \ ...\n   <?xml version=\"1.0\"?>\n     <watcherinfo xmlns=\"urn:ietf:params:xml:ns:watcherinfo\"\
    \n   version=\"0\" state=\"full\">\n     <watcher-list resource=\"sip:presentity@example.com\"\
    \n                   package=\"presence\">\n         <watcher status=\"terminated\"\
    \n            id=\"sr8fdsj\"\n            duration-subscribed=\"501\"\n      \
    \      expiration=\"100\"\n            event=\"rejected\">sip:watcherB@example.com\"\
    </watcher>\n         <watcher status=\"terminated\"\n            id=\"sr8fdsj\"\
    \n            duration-subscribed=\"500\"\n            expiration=\"0\"\n    \
    \        event=\"rejected\">sip:watcherC@example.com\"</watcher>\n     </watcher-list>\n\
    \     </watcherinfo>\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The presence of filters in the body of a SIP\
    \ message has a\n   significant effect on the ways in which the request is handled\
    \ at a\n   server.  As a result, it is especially important that messages\n  \
    \ containing this extension be authenticated and authorized.\n   Authentication\
    \ can be achieved using the Digest Authentication\n   mechanism described in [2].\
    \  The authorisation decision is based on\n   the permissions that the resource\
    \ (notifier) has given to the\n   watcher.  An example of such auhorisation policy\
    \ can be found in\n   [11].\n   Processing of requests and looking up filters\
    \ requires set operations\n   and searches, which can require some amount of computation.\
    \  This\n   enables a DoS attack whereby a user can send requests with\n   substantial\
    \ numbers of messages with large contents, in the hopes of\n   overloading the\
    \ server.  To counter this, the server can establish a\n   limit on the number\
    \ of occurrences of the <what>, <changed>, <added>,\n   and <removed> elements\
    \ that are allowed in the filters.  A default\n   limit of 40 is RECOMMENDED;\
    \ however, servers may raise or lower the\n   limit depending upon their specific\
    \ engineered capacity.\n   Requests can reveal sensitive information about a User\
    \ Agent's (UA's)\n   capabilities.  If this information is sensitive, it SHOULD\
    \ be\n   encrypted using SIP S/MIME capabilities [6].  All package-specific\n\
    \   security measures MUST be followed.\n   Propagating filters in SUBSCRIBE requests\
    \ to foreign domains reveals\n   sensitive information about a user's resource\
    \ lists.  It is therefore\n   required that an RLS does not forward a filter if\
    \ that filter is\n   addressed to a resource that is under the administrative\
    \ domain of\n   the RLS, but that is not on the resource list.  Section 4.1 shows\
    \ an\n   example where such a scenario can occur.\n   Note that a filtered document\
    \ located at a subscriber may project\n   false reality.  For example, if a subscriber\
    \ asked to be notified\n   when a resource has changed his presence state from\
    \ \"closed\" to\n   \"open\" but not from \"open\" to \"closed\", then the subscriber\
    \ may\n   afterwards be under the false impression that the resource's presence\n\
    \   state is \"open\", even long after the resource has changed it to\n   \"closed\"\
    .  Therefore, subscribers need to be sure what they put in a\n   filter, understand\
    \ what they asked for, and be prepared to be out of\n   sync with the real state\
    \ of a resource.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   A new event-reason-value \"badfilter\" is defined\
    \ to represent the\n   event where the filter is not well formed and/or not accepted.\
    \  No\n   IANA registration is required for this value.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The authors would like to thank George Foti, Tim Moran,\
    \ Sreenivas\n   Addagatla, Juha Kalliokulju, Jari Urpalainen, and Mary Barnes\
    \ for\n   their valuable input.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n \
    \  [2]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n       \
    \ Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n        Session\
    \ Initiation Protocol\", RFC 3261, June 2002.\n   [3]  Roach, A.B., \"Session\
    \ Initiation Protocol (SIP)-Specific Event\n        Notification\", RFC 3265,\
    \ June 2002.\n   [4]  Roach, A.B., Campbell, B., and J. Rosenberg, \"A Session\n\
    \        Initiation Protocol (SIP) Event Notification Extension for\n        Resource\
    \ Lists\", RFC 4663, September 2006.\n   [5]  Khartabil, H., Leppanen, E., Lonnfors,\
    \ M., and J. Costa-Requena,\n        \"An Extensible Markup Language (XML)-Based\
    \ Format for Event\n        Notification Filtering\", RFC 4661, September 2006.\n\
    \   [6]  Ramsdell, B., \"Secure/Multipurpose Internet Mail Extensions\n      \
    \  (S/MIME) Version 3.1 Message Specification\", RFC 3851, July\n        2004.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [7]  Sugano, H., Fujimoto, S., Klyne, G., Bateman,\
    \ A., Carr, W., and\n        J. Peterson, \"Presence Information Data Format (PIDF)\"\
    , RFC\n        3863, August 2004.\n   [8]  Rosenberg, J., \"A Presence Event Package\
    \ for the Session\n        Initiation Protocol (SIP)\", RFC 3856, August 2004.\n\
    \   [9]  Rosenberg, J., \"An Extensible Markup Language (XML) Based Format\n \
    \       for Watcher Information\", RFC 3858, August 2004.\n   [10] Rosenberg,\
    \ J., \"A Watcher Information Event Template-Package for\n        the Session\
    \ Initiation Protocol (SIP)\", RFC 3857, August 2004.\n   [11] Rosenberg, J.,\
    \ \"Presence Authorization Rules\", Work in Progress,\n        June 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Hisham Khartabil\n   Telio\n   P.O. Box 1203 Vika\n  \
    \ Oslo\n   Norway\n   Phone: +47 2167 3544\n   EMail: hisham.khartabil@telio.no\n\
    \   Eva Leppanen\n   Nokia\n   P.O BOX 785\n   Tampere\n   Finland\n   Phone:\
    \ +358 7180 77066\n   EMail: eva-maria.leppanen@nokia.com\n   Mikko Lonnfors\n\
    \   Nokia\n   P.O BOX 321\n   Helsinki\n   Finland\n   Phone: + 358 71800 8000\n\
    \   EMail: mikko.lonnfors@nokia.com\n   Jose Costa-Requena\n   Nokia\n   P.O.\
    \ Box 321\n   FIN-00045 NOKIA GROUP\n   FINLAND\n   Phone: +358 71800 8000\n \
    \  EMail: jose.costa-requena@nokia.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
