- title: __initial_text__
  contents:
  - ''
- title: 'Obsolete: None                                             Alex McKenzie'
  contents:
  - "Obsolete: None                                             Alex McKenzie\n  \
    \                     THE DATA TRANSFER PROTOCOL\n"
- title: I. INTRODUCTION
  contents:
  - "I. INTRODUCTION\n   A common protocol is desirable for data transfer in such\
    \ diverse\n   applications as remote job entry, file transfer, network mail system,\n\
    \   graphics, remote program execution, and communication with block data\n  \
    \ terminals (such as printers, card, paper tape, and magnetic tape\n   equipment,\
    \ especially in context of terminal IMPs).  Although it\n   would be possible\
    \ to include some or even all of the above\n   applications in an all-inclusive\
    \ file transfer protocol, a separation\n   between data transfer and application\
    \ functions would provide\n   flexibility in implementation, and reduce complexity.\
    \  Separating the\n   data transfer function would also reduce proliferation of\
    \ programs\n   and protocols.\n   We have therefore defined a low-level data transfer\
    \ protocol (DTP) to\n   be used for transfer of data in file transfer, remote\
    \ job entry, and\n   other applications protocols.  This paper concerns itself\
    \ solely with\n   the data transfer protocol.  A companion paper (RFC 172) describes\n\
    \   file transfer protocol.\n"
- title: II. DISCUSSION
  contents:
  - "II. DISCUSSION\n   The data transfer protocol (DTP) serves three basic functions.\
    \  It\n   provides for convenient separation of NCP messages into \"logical\"\n\
    \   blocks (transactions, units, records, groups, and files), it allows\n   for\
    \ the separation of data and control information, and it includes\n   some error\
    \ control mechanisms.\n   Three modes of separating messages into transactions\
    \ [1] are allowed\n   by DTP.  The first is an indefinite bit stream which terminates\
    \ only\n   when the connection is closed (i.e., the bit stream represents a\n\
    \   single transaction for duration of connection).  This mode would be\n   useful\
    \ in data transfer between hosts and terminal IMPs (TIPs).\n   The second mode\
    \ utilizes a \"transparent\" block convention, similar to\n   the ASCII DLE (Data\
    \ Link Escape).  In \"transparent\" mode,\n   transactions (which may be arbitrarily\
    \ long) end whenever the\n   character sequence DLE ETX is encountered (DLE and\
    \ ETX are 8-bit\n   character codes).  To prevent the possibility of a DLE ETX\
    \ sequence\n   occurring within data stream, any occurrence of DLE is replaced\
    \ by\n   DLE DLE on transmission.  The extra DLE is stripped on reception.  A\n\
    \   departure from the ASCII convention is that \"transparent\" block does\n \
    \  not begin with DLE STX, but with a transaction type byte.  This mode\n   will\
    \ be useful in data transfer between terminal IMPs.\n   The third mode utilizes\
    \ a count mechanism.  Each transaction begins\n   with a fixed-length descriptor\
    \ field containing separate binary\n   counts of information bits and filler bits.\
    \  If a transaction has no\n   filler bits, its filler count is zero.  This mode\
    \ will be useful in\n   most host-to-host data transfer applications.\n   DTP\
    \ allows for the above modes to be intermixed over the same\n   connection (i.e.,\
    \ mode is not associated with connection, but only\n   with transaction).  The\
    \ above transfer modes can represent transfer\n   of either data or control information.\
    \  The protocol allows for\n   separating data or control information at a lower\
    \ level, by providing\n   different \"type\" codes (see SPECIFICATIONS) for data\
    \ and control\n   transactions.  This provision may simplify some implementations.\n\
    \   The implementation of a workable [2] subset of the above modes is\n   specifically\
    \ permitted by DTP.  To provide compatibility between\n   hosts using different\
    \ subsets of transfer modes, an initial\n   \"handshake\" procedure is required\
    \ by DTP.  The handshake involves\n   exchanging information on modes available\
    \ for transmit and receive.\n   This will enable host programs to agree on transfer\
    \ modes acceptable\n   for a connection.\n   The manner in which DTP is used would\
    \ depend largely on the\n   applications protocol.  It is the applications protocol\
    \ which defines\n   the workable subset of transfer modes.  For example, the file\n\
    \   transfer protocol will not work just with the indefinite bit stream\n   modes.\
    \  At least, for control information one of the other two modes\n   is required.\
    \  Again, the use of information separator and abort\n   functions provided in\
    \ DTP (see SPECIFICATIONS) is defined by the\n   applications protocol.  For example,\
    \ in a remote job entry protocol,\n   aborts may be used to stop the execution\
    \ of a job while they may not\n   cause any action in another applications protocol.\n\
    \   It should also be noted that DTP does not define a data transfer\n   service.\
    \  There is no standard server socket, or initial connection\n   protocol defined\
    \ for DTP.  What DTP defines is a mechanism for data\n   transfer which can be\
    \ used to provide services for block data\n   transfers, file transfers, remote\
    \ job entry, network mail and\n   numerous other applications.\n   There are to\
    \ be no restrictions on the manner in which DTP is\n   implemented at various\
    \ sites.  For example, DTP may be imbedded in an\n   applications program such\
    \ as for file transfer, or it may be a\n   separate service program or subroutine\
    \ used by several applications\n   programs.  Another implementation may employ\
    \ macros or UUO's (user\n   unimplemented operations on PDP-10's), to achieve\
    \ the functions\n   specified in DTP.  It is also possible that in implementation,\
    \ the\n   separation between the DTP and applications protocols be only at a\n\
    \   conceptual level.\n"
- title: III. SPECIFICATIONS
  contents:
  - "III. SPECIFICATIONS\n   1.  Byte Size for Network Connection\n       The standard\
    \ byte size for network connections using DTP is 8-\n       bit.  However, other\
    \ byte sizes specified by higher-level\n       applications protocols or applications\
    \ programs are also allowed\n       by DTP.  For the purpose of this document\
    \ bytes are assumed to be\n       8-bits, unless otherwise stated.\n"
- title: 2.  Transactions
  contents:
  - "2.  Transactions\n       At DTP level, all information transmitted over connection\
    \ is a\n       sequence of transactions.  DTP defines the rules for delimiting\n\
    \       transactions. [3]\n"
- title: 2A. Types
  contents:
  - "2A. Types\n       The first byte of each transaction shall define a transaction\n\
    \       type, as shown below.  (Note that code assignments do not\n       conflict\
    \ with assignments in TELNET protocol.)  The transaction\n       types may be\
    \ referred by the hexadecimal code assigned to them.\n       The transactions\
    \ types are discussed in more detail in section\n       2B.\n           Code \
    \                Transaction Type\n      Hex       Octal\n      B0         260\
    \        Indefinite bit stream -- data.\n      B1         261        Transparent\
    \ (DLE) block--data.\n      B2         262        Descriptor and counts--data.\n\
    \      B3         263        Modes available (handshake).\n      B4         264\
    \        Information separators (endcode).\n      B5         265        Error\
    \ codes.\n      B6         266        Abort.\n      B7         267        No operation\
    \ (NoOp).\n      B8         270        Indefinite bit stream--control.\n     \
    \ B9         271        Transparent (DLE) block--control.\n      BA         272\
    \        Descriptor and counts--control.\n      BB         273        (unassigned\
    \ but reserved for data transfer)\n      BC         274                  \"  \
    \       \"         \"\n      BD         275                  \"         \"   \
    \      \"\n      BE         276                  \"         \"         \"\n  \
    \    BF         277                  \"         \"         \"\n   2B.  Syntax\
    \ and Semantics\n   2B.1  Type B0 and B8 (indefinite bitstream modes) transactions\n\
    \         terminate only when the NCP connection is \"closed\".  There is\n  \
    \       no other escape convention defined in DTP at this level.  It\n       \
    \  should be noted, that closing connection in bitstream mode\n         represents\
    \ an implicit file separator (see section 2B.5).\n   2B.2  Type B1 and B0 (transparent\
    \ block modes) transactions terminate\n         when the byte sequence DLE ETX\
    \ is encountered.  The sender\n         shall replace any occurrence of DLE in\
    \ data stream by the\n         sequence DLE DLE.  The receiver shall strip the\
    \ extra DLE.  The\n         transaction is assumed to by byte-oriented.  The code\
    \ for DLE\n         is Hex '90' or Octal '220' (this is different from the ASCII\n\
    \         DLE which is Hex '10' or Octal '020).  ETX is Hex '03' or Octal\n  \
    \       '03' (the same as ASCII ETX) [4].\n   2B.3  Type B2 and BA (descriptor\
    \ and counts modes) transactions have\n         three fields, a 9-byte (72-bits)\
    \ descriptor field [5] and\n         variable length (including zero) info and\
    \ filler fields, as\n         shown below.  The total length of a transaction\
    \ is\n         (72+info+filler) bits.\n"
- title: '|<B2 or BA><Info count><NUL><Seq #><NUL><filler count>|<info><filler> |'
  contents:
  - '|<B2 or BA><Info count><NUL><Seq #><NUL><filler count>|<info><filler> |

    '
- title: '|  3-bits    24-bits 8-bits 16-bits 8-bits  8-bits    |Variable length|'
  contents:
  - '|  3-bits    24-bits 8-bits 16-bits 8-bits  8-bits    |Variable length|

    '
- title: '|<----- 72-bit descriptor field --------------------->|info and filler|'
  contents:
  - "|<----- 72-bit descriptor field --------------------->|info and filler|\n   \
    \      Info count is a binary count of number of bits in info field,\n       \
    \  not including descriptor or filler bits.  Number of info bits\n         is\
    \ limited to (2**24 - 1), as there are 24 bits in info count\n         field.\n\
    \         Sequence # is a sequential count in round-robin manner of B2\n     \
    \    and BA type transaction.  The inclusion of sequence numbers\n         would\
    \ help in debugging and error control, as sequence numbers\n         may be used\
    \ to check for missing transactions, and aid in\n         locating errors.  Hosts\
    \ not wishing to implement this mechanism\n         should have all 1's in the\
    \ field.  The count shall start from\n         zero and continue sequentially\
    \ to all 1's, after which it is\n         reset to all zeros.  The permitted sequence\
    \ numbers are one\n         greater than the previous, and all 1's.\n        \
    \ Filler count is a binary count of bits used as fillers (i.e.,\n         not\
    \ information) after the end of meaningful data.  Number of\n         filler bits\
    \ is limited to 255, as there are 8 bits in filler\n         count field.\n  \
    \       The NUL bytes contain all 0's.\n   2B.4  Type B3 (modes available) transactions\
    \ have a fixed length of 3\n         bytes, as shown below.  First byte defines\
    \ transaction type as\n         B3, second byte defines modes available for send,\
    \ and third\n         byte defines modes available for receive.\n         +------------------+---------------------+---------------------+\n\
    \         |    Type          |     I send          |     I receive       |\n \
    \        |                  | | |  |  |  |  |  |  | | |  |  |  |  |  |  |\n  \
    \       |     B3           |0|0|BA|B2|B9|B1|B8|B0|0|0|BA|B2|B9|B1|B8|B0|\n   \
    \      +------------------+---------------------+---------------------+\n    \
    \     The modes are indicated by bit-coding, as shown above.  The\n         particular\
    \ bit or bits, if set to logical \"1\", indicate that\n         mode to be available.\
    \  The 2 most significant bits should be\n         set to logical \"0\".  The\
    \ use of type B3 transactions is\n         discussed in section 3B.\n   2B.5 \
    \ Type B4 (information separator) transactions have fixed length\n         of\
    \ 2 bytes, as shown below.  First byte defines transaction\n         type as B4,\
    \ and second byte defines the separator.\n         +------------------+------------------+\n\
    \         |    Type          |     End Code     |\n         |                \
    \  |            | |R| |\n         |                  |            |G|E| |\n  \
    \       |     B4           |           F|R|C|U|\n         |                  |\
    \           I|O|O|N|\n         |                  |           L|U|R|I|\n     \
    \    |                  |           E|P|D|T|\n         +------------------+------------------+\n\
    \         The following separator codes are assigned:\n                    Code\
    \                    Meaning\n            Hex             Octal\n            01\
    \              001             Unit separator\n            03              003\
    \             Record separator\n            07              007             Group\
    \ separator\n            0F              017             File separator\n    \
    \     Files, groups, records, and units may be data blocks that a\n         user\
    \ defines to be so.  The only restriction is that of the\n         hierarchical\
    \ relationship  File>Groups>Records>Units  (where\n         '>' means 'contains').\
    \  Thus a file separator marks not only\n         the end of file, but also the\
    \ end of group, record, and unit.\n         These separators may provide a convenient\
    \ \"logical\" separation\n         of data at the data transfer level.  Their\
    \ use is governed by\n         the applications protocol.\n   2B.6  Type B5 (error\
    \ codes) transactions have a fixed length of 3\n         bytes, as shown below.\
    \  First byte defines transaction type as\n         B5, second byte indicates\
    \ an error code, and third byte may\n         indicate the sequence number on\
    \ which error occurred.\n         +------------------+-------------------+-----------------+\n\
    \         |    Type          |     Error Code    |     Sequence #  |\n       \
    \  |                  |                   |                 |\n         |    \
    \ B5           |                   |                 |\n         +------------------+-------------------+-----------------+\n\
    \         The following error codes are assigned:\n             Error Code   \
    \         Meaning\n         Hex           Octal\n         00            000  \
    \       Undefined error\n         01            001         Out of sync. (type\
    \ code other\n                                   than B0 through BF).\n      \
    \   02            002         Broken sequence (the sequence #\n              \
    \                     field contains the first expected\n                    \
    \               but not received sequence number).\n         03            003\
    \         Illegal DLE sequence (other than\n                                 \
    \  DLE DLE or DLE ETX).\n         B0            260\n      through       through\
    \        The transaction type (indicated by\n         BF            277      \
    \   by error code) is not implemented.\n         The error code transaction is\
    \ defined only for the purpose of\n         error control.  DTP does not require\
    \ the receiver of an error\n         code to take any recovery action.  The receiver\
    \ may discard the\n         error code transaction.  In addition, DTP does not\
    \ require that\n         sequence numbers be remembered or transmitted.\n   2B.7\
    \  Type B6 (abort) transactions have a fixed length of 2 bytes, as\n         shown\
    \ below.  First byte defines transaction type as B6, and\n         second byte\
    \ defines the abort function.\n         +-------------------+--------------------+\n\
    \         |    Type           |    Function        |\n         |             \
    \      |            | | |R| |\n         |                   |            | |G|E|\
    \ |\n         |                   |            |F|R|C|U|\n         |         \
    \          |            |I|O|O|N|\n         |                   |            |L|U|R|I|\n\
    \         |                   |            |E|P|D|T|\n         +-------------------+--------------------+\n\
    \         The following abort codes are assigned:\n              Abort Code  \
    \                            Meaning\n            Hex            Octal\n     \
    \       00             000              Abort preceding transaction\n        \
    \    01             001              Abort preceding unit\n            02    \
    \         002              Abort preceding record\n            07            \
    \ 007              Abort preceding group\n            0F             017     \
    \         Abort preceding file\n         DTP does not require the receiver of\
    \ an abort to take specific\n         action, therefore sender should not necessarily\
    \ make any\n         assumptions.  The manner in which abort is handled is to\
    \ be\n         specified by higher-level applications protocols.\n   2B.8  Type\
    \ B7 (NoOp) transactions are one byte long, and indicate no\n         operation.\
    \  These may be useful as fillers when byte size used\n         for network connections\
    \ is other than 8-bits.\n"
- title: 3.  Initial Connection, Handshake and Error Recovery
  contents:
  - "3.  Initial Connection, Handshake and Error Recovery\n   3A.  DTP does not specify\
    \ the mechanism used in establishing\n        connections.  It is up to the applications\
    \ protocol (e.g., file\n        transfer protocol) to choose the mechanism which\
    \ suits its\n        requirements. [6]\n   3B.  The first transaction after connection\
    \ is made will be type B3\n        (modes available).  In a full-duplex connection,\
    \ both server and\n        user will communicate type B3 transactions, indicating\
    \ modes\n        available for send and receive.  In a simplex connection only\n\
    \        sender will communicate a type B3 transaction.  It is the\n        sender's\
    \ responsibility to choose a mode acceptable to the\n        receiver.  If an\
    \ acceptable mode is not available or if mode\n        chosen is not acceptable,\
    \ the connection may be closed. [7]\n   3C. No error recovery mechanisms are specified\
    \ by DTP.  The\n        applications protocol may implement error recovery and\
    \ further\n        error control mechanisms.\n"
- title: END NOTES
  contents:
  - 'END NOTES

    '
- title: '[1]  The term transaction is used here to mean a block of data defined'
  contents:
  - "[1]  The term transaction is used here to mean a block of data defined\n    \
    \  by the transfer mode.\n"
- title: '[2]  What constitutes a workable subset is entirely governed by the'
  contents:
  - "[2]  What constitutes a workable subset is entirely governed by the\n      high-level\
    \ application protocol.\n"
- title: '[3]  Transactions suppress the notion of host-IMP messages, and may have'
  contents:
  - "[3]  Transactions suppress the notion of host-IMP messages, and may have\n  \
    \    a logical interpretation similar to that of flags (and data)\n      defined\
    \ by Mealy in RFC 91.\n"
- title: '[4]  This assignment is made to be consistent with the TELNET philosophy'
  contents:
  - "[4]  This assignment is made to be consistent with the TELNET philosophy\n  \
    \    of maintaining the integrity of the 128 Network ASCII characters.\n"
- title: '[5]  A 72-b9t descriptor field provides a convenient separation of'
  contents:
  - "[5]  A 72-b9t descriptor field provides a convenient separation of\n      information\
    \ bits, as 72 is the least common multiple of 8 and 36,\n      the commonly encountered\
    \ byte sizes on ARPA network host\n      computers.\n"
- title: '[6]  It is, however, recommended that the standard initial connection'
  contents:
  - "[6]  It is, however, recommended that the standard initial connection\n     \
    \ protocol be adopted where feasible.\n"
- title: '[7]  It is recommended that when more than one mode is available, the'
  contents:
  - "[7]  It is recommended that when more than one mode is available, the\n     \
    \ sender should choose 'descriptor and count' mode (Type B2 or BA).\n      The\
    \ 'bitstream' mode (type B0 or B8) should be chosen only when\n      the other\
    \ two modes cannot be used.\n          [ This RFC was put into machine readable\
    \ form for entry ]\n            [ into the online RFC archives by Samuel Etler\
    \ 08/99 ]\n"
