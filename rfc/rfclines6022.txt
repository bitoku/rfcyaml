Abstract This document defines a Network Configuration Protocol (NETCONF) data model to be used to monitor the NETCONF protocol.
The monitoring data model includes information about NETCONF datastores, sessions, locks, and statistics.
This data facilitates the management of a NETCONF server.
This document also defines methods for NETCONF clients to discover data models supported by a NETCONF server and defines a new NETCONF <get schema> operation to retrieve them.
This document defines a YANG [RFC6020] model to be used to monitor the NETCONF protocol.
It provides information about NETCONF sessions and supported schema as defined in [RFC4741].
Considerations such as different schema formats, feature optionality, and access controls can all impact the applicability and level of detail
the NETCONF server sends to a client during session setup.
The methods defined in this document address the need for further means to query and retrieve schema and NETCONF state information from a NETCONF server.
These are provided to complement existing base NETCONF capabilities and operations and in no way affect existing behaviour.
> operation is also defined to support explicit schema retrieval via NETCONF.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
The NETCONF monitoring data model defined in this document provides operational information on the NETCONF server.
This includes details specific to the NETCONF protocol (e.g., protocol specific counters such as 'in sessions') as well as data related to schema retrieval (e.g., schema list).
A server that implements the data model defined in this document ("urn:ietf:params:xml:
yang:ietf netconf monitoring") MUST advertise the capability URI as described in [RFC6020].
This section presents an overview of the monitoring data model.
For detailed descriptions, refer to the normative YANG module provided in this document (see Section 5).
The netconf state container is the root of the monitoring data model.
netconf state /capabilities /datastores /schemas /sessions
/statistics capabilities List of NETCONF capabilities supported by the server.
List of NETCONF configuration datastores (e.g., running, startup, candidate) supported on this device and related information.
schemas List of schemas supported on the server.
Includes all the information required to identify the schemas and to support their retrieval.
sessions List of all active NETCONF sessions on the device.
Includes per  session counters for all NETCONF sessions.
statistics Includes global counters for the NETCONF server.
The /netconf state/capabilities subtree contains the capabilities supported by the NETCONF server.
The list MUST include all capabilities exchanged during session setup still applicable at the time of the request.
The /netconf state/datastores subtree contains the list of available datastores for the NETCONF server and includes information on their lock state.
datastore /name /locks name (leaf, netconf datastore type) Enumeration of supported datastores; candidate, running, startup.
locks (grouping, lock info) List of locks for the datastore.
Information is provided for both global and partial locks [RFC5717].
For partial locks, the list of locked nodes and the select expressions originally used to request the lock are returned.
The list of supported schema for the NETCONF server.
The elements identifier, version, and format are used as a key in the schema list.
These are used in the <get schema> operation.
identifier (string) Identifier for the schema list entry.
The identifier is used in the <get schema> operation and may be used for other means such as file retrieval.
version (string) Version of the schema supported.
Multiple versions MAY be supported simultaneously by a NETCONF server.
Each version MUST be reported individually in the schema list, i.e., with same identifier, possibly different location, but different version.
For YANG data models, version is the value of the most recent YANG 'revision' statement in the module or submodule, or the empty string if no 'revision' statement is present.
The data modeling language the schema is written in.
The data modeling language is represented as a YANG identity.
This document defines the identities "xsd", "yang", "yin", "rng", and "rnc" (see Section 5).
The Extensible Markup Language (XML)
namespace [XML NAMES] defined by the schema.
One or more locations from which this specific schema can be retrieved.
The list SHOULD contain at least one entry per schema.
The /netconf state/sessions Subtree Includes session specific data for NETCONF management sessions.
The session list MUST include all currently active NETCONF sessions.
session /session id (key) /transport
time /in rpcs /in bad rpcs /out rpc errors /out
Unique identifier for the session.
This value is the NETCONF session identifier, as defined in [RFC4741].
transport (identityref, transport) Identifies the transport for each session.
The transport is represented as a YANG identity.
This document defines the identities "netconf ssh", "netconf soap over beep", "netconf soap  over https", "netconf beep", and "netconf tls" (see Section 5).
The username is the client identity that was authenticated by the NETCONF transport protocol.
The algorithm used to derive the username
is NETCONF transport protocol specific and in addition specific to the authentication mechanism used by the NETCONF transport protocol.
Host identifier (IP address or name) of the NETCONF client.
login time (yang:date and time) Time at the server at which the session was established.
in rpcs (yang:zero based counter32) Number of correct <rpc> messages received.
in bad rpcs (yang:zero based counter32) Number of messages received when an <rpc
> message was expected, that were not correct <rpc> messages.
This includes XML parse errors and errors on the rpc layer.
zero based counter32) Number of <rpc reply
> messages sent that contained an <rpc error> element.
zero based counter32) Number of <notification> messages sent.
The /netconf state/statistics Subtree Statistical data pertaining to the NETCONF server.
statistics /netconf start time /in bad hellos /in sessions /dropped sessions /in rpcs /in bad rpcs /out rpc errors /out notifications statistics:
Contains management session related performance data for the NETCONF server.
netconf start time (yang:date and time) Date and time at which the management subsystem was started.
in bad hellos (yang:zero based
counter32) Number of sessions silently dropped because an invalid <hello> message was received.
zero based counter32) Number of sessions started.
dropped sessions (yang:zero based counter32
) Number of sessions that were abnormally terminated, e.g., due to idle timeout or transport close.
in rpcs (yang:zero based counter32) Number of correct <rpc> messages received.
in bad rpcs (yang:zero based counter32) Number of messages received when an <rpc
> message was expected, which were not correct <rpc> messages.
zero based counter32) Number of <rpc reply
> messages sent that contained an <rpc error> element.
zero based counter32) Number of <notification> messages sent.
The <get schema> Operation Description: This operation is used to retrieve a schema from the NETCONF server.
Identifier for the schema list entry.
version (string): Version of the schema requested.
The data modeling language of the schema.
Default value is 'yang' when not specified.
The NETCONF server returns the requested schema.
Negative Response: If the requested schema does not exist, the <error tag
If more than one schema matches the requested parameters, the <error tag
> is 'operation failed', and <error app tag
> is 'data not unique'.
Retrieving Schema List via <get> Operation
A NETCONF client retrieves the list of supported schema from a NETCONF server by retrieving the /netconf state/schemas subtree via a <get> operation.
Available schema for the requesting session are returned in the reply containing the <identifier>, <version>, <format>, and <location> elements.
The response data can be used to determine the available schema and their versions.
The schema itself (i.e., schema content) is not returned in the response.
> element contains a URI, which can be used to retrieve the schema by another protocol such as ftp [RFC0959] or http(s)
[RFC2818], or the special value 'NETCONF', which means that the schema can be retrieved from the device via the <get schema> operation.
netconf:base:1.0"> <get> <filter type "subtree"
The NETCONF server returns a list of schema available for retrieval.
> <netconf state xmlns "urn:ietf:params:xml:ns:
/schema> <schema> <identifier>foo</identifier> <version>1.1</version> <format>xsd</format> <namespace>http://example.com
http://example.com/schema/bar@2008 06 01.yang </location> <location
<identifier>bar types</identifier> <version>2008 06 01</version
> </netconf state> </data> </rpc reply> 4.2.
Given the reply in the previous section, the following examples illustrate the retrieval of 'foo', 'bar', and 'bar types' schema at multiple locations, with multiple formats, and in multiple locations.
foo,  version 1.0 in xsd format: a.
Via FTP using location ftp://ftp.example.com/schemas/foo
Via HTTP using location http://www.example.com/schema/foo
Via <get schema> using identifier, version, and format parameters.
> <get schema xmlns "urn:ietf:params:xml:
bar, version 2008 06 01 in YANG format: a.
Via HTTP using location http://example.com/schema/bar@2008 06
Via <get schema> using identifier and version parameters: <rpc message id
> <get schema xmlns "urn:ietf:params:xml:
bar types, version 2008 06 01 in default YANG format: a.
Via <get schema> using identifer parameter: <rpc message id
> <get schema xmlns "urn:ietf:params:xml:
ns:yang:ietf netconf monitoring"> <identifer>bar types</identifer> </get schema> </rpc
revision returned //is version 2008
The data model described in this memo is defined in the following YANG module.
This YANG module imports typedefs from [RFC6021] and references [RFC4741], [RFC4742], [RFC4743], [RFC4744], [RFC5539], [xmlschema 1], [RFC6020], [
<CODE BEGINS> file "ietf netconf monitoring@2010 10 04.yang
" module ietf netconf monitoring { namespace "urn:
yang:ietf netconf monitoring"; prefix "ncm"; import ietf yang types { prefix yang; } import ietf inet types { prefix inet
; } organization "IETF NETCONF (Network Configuration) Working Group"; contact "WG Web:
>"; description "NETCONF Monitoring Module.
All elements in this module are read only.
IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 6022; see the RFC itself for full legal notices."
; revision 2010 10 04 { description "Initial revision."; reference "RFC 6022:
; } identity xsd { base schema format; description "W3C XML Schema Definition."; reference "W3C REC REC xmlschema 1 20041028:
; reference "RFC 6020:  YANG
; reference "RFC 6020:  YANG
; reference "ISO/IEC 19757 2:2008
zero based counter32; description "Number of messages received when an <rpc
> message was expected, that were not correct <rpc> messages.
This includes XML parse errors and errors on the rpc layer."
; } leaf out rpc errors { type yang:
zero based counter32; description "Number of <notification> messages sent."
> operations allow a client to lock specific resources in a datastore.
The NETCONF server will prevent changes to the locked resources by all sessions except the one that acquired the lock(s).
Monitoring information is provided for each datastore entry including details such as the session that acquired the lock, the type of lock (global or partial) and the list of locked resources.
Multiple locks per datastore are supported."; grouping lock info { description "Lock related parameters, common to both global and partial locks."; leaf locked by session { type uint32; mandatory true; description "The session ID of the session that has locked this resource.
Both a global lock and a partial lock MUST contain the NETCONF session id.
If the lock is held by a session that is not managed by the NETCONF server (e.g., a CLI session), a session id of 0
; reference "RFC 5717: Partial Lock Remote Procedure Call (RPC) for NETCONF"; leaf lock
id { type uint32; description "
The select expression indicates the original intended scope of the lock."
; } leaf list locked node { type instance identifier; description "The list of instance identifiers (i.e., the locked nodes).
The identifier is used in the <get schema> operation and may be used for other purposes such as file retrieval.
For modeling languages that support or require a data model name (e.g., YANG module name)
the identifier MUST match that name.
For YANG data models, the identifier is the name of the module or submodule.
Multiple versions MAY be supported simultaneously by a NETCONF server.
Each version MUST be reported individually in the schema list, i.e., with same identifier, possibly different location, but different version.
For YANG data models, version is the value of the most recent YANG 'revision' statement in the module or submodule, or the empty string if no 'revision' statement is present."
; } leaf format { type identityref { base schema format; } description "The data modeling language the schema is written in (currently xsd, yang, yin, rng, or rnc).
For YANG data models, this is the module's namespace.
This list SHOULD contain at least one entry per schema.
A schema entry may be located on a remote file system (e.g., reference to file system for ftp retrieval) or retrieved directly from a server supporting the <get schema> operation (denoted by the value 'NETCONF').
This value is the NETCONF session identifier, as defined in RFC 4741."
; description "Identifies the transport for each session, e.g., 'netconf ssh', 'netconf soap', etc."
; } leaf username  { type string; mandatory true; description "The username is the client identity that was authenticated by the NETCONF transport protocol.
The algorithm used to derive the username
is NETCONF transport protocol specific and in addition specific to the authentication mechanism used by the NETCONF transport protocol."
; } leaf source host { type inet:host; description "Host identifier of the NETCONF client.
Zero based with following reset behaviour
zero based counter32; description "Number of sessions silently dropped because an invalid <hello> message was received.
zero based counter32; description "Number of sessions started.
This counter is incremented when a <hello> message with a <session
zero based counter32; description "Number of sessions that were abnormally terminated, e.g., due to idle timeout or transport close.
The NETCONF server returns the requested schema.
Negative Response: If requested schema does not exist, the <error tag
If more than one schema matches the requested parameters, the <error tag
> is 'operation failed', and <error app tag
The YANG module defined in this memo is designed to be accessed via the NETCONF protocol [RFC4741].
The lowest NETCONF layer is the secure transport layer and the mandatory to implement secure transport
Some of the readable data nodes in this YANG module may be considered sensitive or vulnerable in some network environments.
It is thus important to control
read access (e.g., via get, get config, or notification) to these data nodes.
These are the containers, list nodes, and data nodes with their specific sensitivity/vulnerability: /netconf
Contains identity information that could be used in an attempt to authenticate with the server.
This username is only meant for monitoring, and SHOULD NOT be used for other purposes, such as access control, without a detailed discussion of the limitations of this reported username.
For example, it is possible that server A and server B might report the same username, but these might be for different persons.
This document registers one URI in "The IETF XML Registry".
Following the format in [RFC3688], the following has been registered.
yang:ietf netconf monitoring Registrant Contact:
N/A, the requested URI is an XML namespace.
This document registers one module in the "YANG Module Names" registry.
Following the format in [RFC6020], the following has been registered.
yang:ietf netconf monitoring prefix: ncm reference: RFC 6022
