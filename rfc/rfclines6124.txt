Abstract The Extensible Authentication Protocol (EAP) describes a framework that allows the use of multiple authentication mechanisms.
This document defines an authentication mechanism for EAP called EAP EKE, based on the Encrypted Key Exchange (EKE) protocol.
This method provides mutual authentication through the use of a short, easy to remember password.
Compared with other common authentication methods, EAP EKE is not susceptible to dictionary attacks.
Neither does it require the availability of public key certificates.
The predominant access method for the Internet today is that of a human using a username and password to authenticate to a computer enforcing access control.
Proof of knowledge of the password authenticates the human to the computer.
Typically, these passwords are not stored on a user's computer for security reasons and must be entered each time the human desires network access.
Therefore, the passwords must be ones that can be repeatedly entered by a human with a low probability of error.
They will likely not possess high entropy and it may be assumed that an adversary with access to a dictionary will have the ability to guess a user's password.
It is therefore desirable to have a robust authentication method that is secure even when used with a weak password in the presence of a strong adversary.
EAP EKE is an EAP method [RFC3748] that addresses the problem of password based authenticated key exchange, using a possibly weak password for authentication and to derive an authenticated and cryptographically strong shared secret.
This problem was first described by Bellovin and Merritt in [BM92] and [BM93].
Subsequently, a number of other solution approaches have been proposed, for example [JAB96], [LUC97], [BMP00], and others.
This proposal is based on the original Encrypted Key Exchange (EKE) proposal, as described in [BM92].
Some of the variants of the original EKE have been attacked, see e.g., [PA97], and improvements have been proposed.
None of these subsequent improvements have been incorporated into the current protocol.
However, we have used only the subset of [BM92]
(namely the variant described in Section 3.1 of that paper) that has withstood the test of time and is believed secure as of this writing.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
Protocol EAP is a two party protocol spoken between an EAP peer and an EAP server (also known as "authenticator").
An EAP method defines the specific authentication protocol being used by EAP.
This memo defines a particular method and therefore defines the messages sent between the EAP server and the EAP peer for the purpose of authentication and key derivation.
A successful run of EAP EKE consists of three message exchanges: an Identity exchange, a Commit exchange, and a Confirm exchange.
This is shown in Figure 1.
The peer and server use the EAP EKE Identity exchange to learn each other's identities and to agree upon a ciphersuite to use in the subsequent exchanges.
In the Commit exchange, the peer and server exchange information to generate a shared key and also to bind each other to a particular guess of the password.
In the Confirm exchange, the peer and server prove liveness and knowledge of the password by generating and verifying verification data (note that the second message of the Commit exchange already plays an essential part in this liveness proof).
Encr(Password, y p), Encr(SharedSecret, Nonce P)
Where:  Password is a typically short string, shared between the server and the peer.
In other words, the same password is used to authenticate the server to the peer, and vice versa.
y p are the server's and the peer's, respectively, ephemeral public key, i.e., y s
x s (mod p) and
Nonce S, Nonce P are random strings generated by the server and the peer as cryptographic challenges.
SharedSecret is the secret created by the Diffie Hellman algorithm, namely SharedSecret   g^(x s
This value is calculated by the server as: SharedSecret   y p
x s (mod p), and by the peer as: SharedSecret   y s ^ x p (mod p).
The current protocol extends the basic cryptographic protocol, and the regular successful exchange becomes:
Prot(Ke, Ki, Nonce S   Nonce P), Auth S
Where, in addition to the above terminology:  Encr means encryption only, and Prot is encryption with integrity protection.
Ke is an encryption key, and Ki is an integrity protection key.
Section 5 explains the various cryptographic values and how they are derived.
As shown in the exchange above, the following information elements have been added to the original protocol: identity values for both protocol parties (ID S, ID P), negotiation of cryptographic protocols, and signature fields to protect the integrity of the negotiated parameters (Auth S, Auth P).
In addition, the shared secret is not used directly.
In this initial exposition, a few details were omitted for clarity.
Section 5 should be considered as authoritative regarding message and field details.
Message Formats EAP EKE defines a small number of message types, each message consisting of a header followed by a payload.
This section defines the header, several payload formats, as well as the format of specific fields within the payloads.
As usual, all multi octet strings MUST be laid out in network byte order.
The EAP EKE header consists of the standard EAP header (see Section 4 of [RFC3748]), followed by an EAP EKE exchange type.
The header has the following structure:
The Code, Identifier, Length, and Type fields are all part of the EAP header as defined in [RFC3748].
The Type field in the EAP header is 53 for EAP EKE Version 1.
The EKE Exch (EKE Exchange) field identifies the type of EAP EKE payload encapsulated in the Data field.
This document defines the following values for the EKE Exch field:
EAP EKE ID exchange  0x02:
Further values of this EKE Exch field are available via IANA registration (Section 7.7).
EKE Payloads EAP EKE messages all contain the EAP EKE header and information encoded in a single payload, which differs for the different exchanges.
The EAP EKE ID payload contains the following fields:
The NumProposals field contains the number of Proposal fields subsequently contained in the payload.
In the EAP EKE ID/Request message, the NumProposals field MUST NOT be set to zero (0), and in the EAP EKE ID/Response message, the NumProposals field MUST be set to one (1).
The offered proposals in the Request are listed contiguously in priority order, most preferable first.
The selected proposal in the Response MUST be fully identical with one of the offered proposals.
This field MUST be sent as zero, and MUST be ignored by the recipient.
Each proposal consists of four one octet fields, in this order: Group Description: This field's value is taken from the IANA registry for Diffie  Hellman groups defined in Section 7.1.
This field's value is taken from the IANA registry for encryption algorithms defined in Section 7.2.
This field's value is taken from the IANA registry for pseudo  random functions defined in Section 7.3.
This field's value is taken from the IANA registry for keyed message digest algorithms defined in Section 7.4.
This is taken from the IANA registry defined in Section 7.5.
The server and the peer MAY use different identity types.
All implementations MUST be able to receive two identity types: ID NAI and ID FQDN.
The meaning of the Identity field depends on the values of the Code and IDType fields.
server ID    EAP EKE ID/Response:
The length of the Identity field is computed from the Length field in the EAP header.
Specifically, its length is eap header length 9 4   number of proposals.
This field, like all other fields in this specification, MUST be octet aligned.
The EAP EKE Commit Payload
This payload allows both parties to send their encrypted ephemeral public key, with the peer also including a Challenge.
In addition, a small amount of data can be included by the server and/or the peer, and used for channel binding.
This data is sent here unprotected, but is verified later, when it is signed by the Auth S/Auth P payloads of the EAP EKE Confirm exchange. 0
CBValue (zero or more occurrences)
EAP EKE Commit Payload DHComponent S/DHComponent P
: This field contains the password encrypted Diffie Hellman public key, which is generated as described in Section 5.1.
Its size is determined by the group and the encryption algorithm.
P: This field only appears in the response, and contains the encrypted and integrity protected challenge value sent by the peer.
The field's size is determined by the encryption and MAC algorithms being used, since this protocol mandates a fixed nonce size for a given choice of algorithms.
This structure MAY be included both in the request and in the response, and MAY be repeated multiple times in a single payload.
Each structure contains its own length.
The field is neither encrypted nor integrity protected, instead it is protected by the AUTH payloads in the Confirm exchange.
The EAP EKE Confirm Payload Using this payload, both parties complete the authentication by generating a shared temporary key, authenticating the entire protocol, and generating key material for the EAP consumer protocol. 0
EAP EKE Confirm Payload PNonce PS/PNonce S
: This field ("protected nonce") contains the encrypted and integrity protected response to the other party's challenge; see Sections 5.3 and 5.4.
Similarly to the PNonce P field, this field's size is determined by the encryption and MAC algorithms.
Auth S/Auth P: This field signs the preceding messages, including the Identity and the negotiated fields.
This prevents various possible attacks, such as algorithm downgrade attacks.
See Section 5.3 and Section 5.4.
The size is determined by the pseudo random function negotiated.
The EAP EKE Failure Payload
The EAP EKE Failure payload format is defined as follows:
The payload's size is always exactly 4 octets.
Additional values of this field are available via IANA registration, see Section 7.8.
When the peer encounters an error situation, it MUST respond with EAP EKE Failure.
The server MUST reply with an EAP Failure message to end the exchange.
When the server encounters an error situation, it MUST respond with EAP EKE Failure.
The peer MUST send back an EAP EKE Failure message containing a "No Error" failure code.
Then the server MUST send an EAP Failure message to end the exchange.
Implementation of the "Password Not Found" code is not mandatory.
For security reasons, implementations MAY choose to return "Authentication Failure" also in cases where the password cannot be located.
Several fields are encrypted and integrity protected.
The protected field is a concatenation of three octet strings:  An optional IV, required when the encryption algorithm/mode necessitates it, e.g., for CBC encryption.
The content and size of this field are determined by the selected encryption algorithm.
In the case of CBC encryption, this field is a random octet string having the same size as the algorithm's block size.
The original data, followed if necessary by random padding.
This padding has the minimal length (possibly zero) required to complete the length of the encrypted data to the encryption algorithm's block size.
The original data and the padding are encrypted together.
ICV, a Message Authentication Code (MAC) cryptographic checksum of the encrypted data, including the padding.
The checksum is computed over the encrypted, rather than the plaintext, data.
Its length is determined by the MAC algorithm negotiated.
We note that because of the requirement for an explicit ICV, this specification does not support authenticated encryption algorithms.
Such algorithms may be added by a future extension.
Two fields are encrypted but are not integrity protected.
Their format is identical to a protected field (Section 4.3), except that the Integrity Check Value is omitted.
This protocol allows higher level protocols to transmit limited opaque information between the peer and the server.
This information is integrity protected but not encrypted, and may be used to ensure that protocol participants are identical at different protocol layers.
See Section 7.15 of [RFC3748] for more information on the rationale behind this facility.
EAP EKE neither validates nor makes any use of the transmitted information.
The information MUST NOT be used by the consumer protocol until it is verified in the EAP EKE Confirm exchange (specifically, until it is integrity protected by the Auth S, Auth P payloads).
Consequently, it MUST NOT be relied upon in case an error occurs at the EAP EKE level.
An unknown Channel Binding Value SHOULD be ignored by the recipient.
Some implementations may require certain values to be present, and will abort the protocol if they are not.
Such policy is out of scope of the current protocol.
Each Channel Binding Value is encoded using a TLV structure:
: This is the Channel Binding Value's type.
This document defines the value 0x0000
Other values are available for IANA allocation, see Section 7.6.
Length: This field is the total length in octets of the structure, including the CBType and Length fields.
This facility should be used with care, since EAP EKE does not provide for message fragmentation.
EAP EKE is not a tunneled method and should not be used as a generic transport; specifically, implementors should refrain from using the Channel Binding facility to transmit posture information, in the sense of [RFC5209].
This section describes the sequence of messages for the Commit and Confirm exchanges, and lists the cryptographic operations performed by the server and the peer.
x s (mod p), where x s is a randomly chosen number in the range 2 ..
The randomly chosen number is the ephemeral private key, and the calculated value is the corresponding ephemeral public key.
The server and the peer MUST both use a fresh, random value for x s and the corresponding x p on each run of the protocol.
The server computes and transmits the encrypted field
(Section 4.4) temp   prf(0 , password)
key   prf (temp, ID S   ID P)
See Section 6.1 for the prf  notation.
The first argument to "prf" is a string of zero octets whose length is the output size of the base hash algorithm, e.g., 20 octets for HMAC SHA1; the result is of the same length.
The first output octets of prf  are used as the encryption key for the negotiated encryption algorithm, according to that algorithm's key length.
Since the PRF function is required to be an application of the HMAC operator to a hash function, the above construction implements HKDF as defined in [RFC5869].
When using block ciphers, it may be necessary to pad y s on the right, to fit the encryption algorithm's block size.
In such cases, random padding MUST be used, and this randomness is critical to the security of the protocol.
Randomness recommendations can be found in [RFC4086]; also see [NIST.800 90.2007] for additional recommendations on cryptographic level randomness.
When decrypting this field, the real length of y s is determined according to the negotiated Diffie  Hellman group.
If the password needs to be stored on the server, it is RECOMMENDED to store a randomized password value as a password equivalent, rather than the cleartext password.
We note that implementations may choose the output of either of the two steps of the password derivation.
Using the output of the second step, where the password is salted by the identity values, is more secure; however, it may create an operational issue if identities are likely to change.
This protocol supports internationalized, non ASCII passwords.
The input password string SHOULD be processed according to the rules of the [RFC4013] profile of [RFC3454].
A password SHOULD be considered a "stored string" per [RFC3454], and unassigned code points are therefore prohibited.
The output is the binary representation of the processed UTF 8
Prohibited output and unassigned code points encountered in SASLprep preprocessing SHOULD cause a preprocessing failure and the output SHOULD NOT be used.
Then computes: temp   prf(0 , password) key   prf (temp, ID S   ID P)
DHComponent P   Encr(key, y p) formatted as an encrypted field (Section 4.4).
Both sides calculate SharedSecret   prf(0 , g
(x s   x p) (mod p))
The first argument to "prf" is a string of zero octets whose length is the output size of the base hash algorithm, e.g., 20 octets for HMAC SHA1; the result is of the same length.
This extra application of the pseudo random function is the "extraction step" of [RFC5869].
Note that the peer needs to compute the SharedSecret value before sending out its response.
The encryption and integrity protection keys are computed: Ke   Ki   prf (SharedSecret, "EAP EKE Keys"   ID S   ID P)
And the peer generates the Protected Nonce:
P   Prot(Ke, Ki, Nonce P), where Nonce P is a randomly generated binary string.
The length of Nonce P MUST be the maximum of 16 octets, and half the key size of the negotiated prf (rounded up to the next octet if necessary).
The peer constructs this value as a protected field (Section 4.3), encrypted using Ke and integrity protected using Ki with the negotiated encryption and MAC algorithm.
The peer now sends a message that contains the two generated fields.
The server MUST verify the correct integrity protection of the received nonce, and MUST abort the protocol if it is incorrect, with an "Authentication Failure" code.
PS   Prot(Ke, Ki, Nonce P   Nonce S), as a protected field, where Nonce S is a randomly generated string, of the same size as Nonce P.
It computes: Ka   prf (SharedSecret, "EAP EKE Ka"   ID S   ID P   Nonce P   Nonce S) whose length is the preferred key length of the negotiated prf (see Section 5.2).
Auth S   prf(Ka, "EAP EKE server"   EAP EKE ID/Request   EAP EKE  ID/Response
EAP EKE Commit/Request   EAP EKE Commit/Response).
The messages are included in full, starting with the EAP header, and including any possible future extensions.
This construction of the Auth S (and Auth P) value implies that any future extensions MUST NOT be added to the EAP EKE Confirm/Request or EAP EKE Confirm/Response messages themselves, unless these extensions are integrity protected in some other manner.
The server now sends a message that contains the two fields.
The peer MUST verify the correct integrity protection of the received nonces and the correctness of the Auth S value, and MUST abort the protocol if either is incorrect, with an "Authentication Failure" code.
The peer computes Ka, and generates:
Prot(Ke, Ki, Nonce S) as a protected field.
Auth P   prf(Ka, "EAP EKE peer"
EAP EKE Commit/Request   EAP EKE Commit/Response)
The peer sends a message that contains the two fields.
The server MUST verify the correct integrity protection of the received nonce and the correctness of the Auth P value, and MUST abort the protocol if either is incorrect, with an "Authentication Failure" code.
Following the last message of the protocol, both sides compute and export the shared keys, each 64 bytes in length: MSK   EMSK   prf (SharedSecret, "EAP EKE Exported Keys"   ID S   ID P   Nonce P   Nonce S)
When the RADIUS attributes specified in [RFC2548] are used to transport keying material, then the first 32 bytes of the MSK correspond to MS MPPE RECV KEY and the second 32 bytes to MS MPPE  SEND KEY.
In this case, only 64 bytes of keying material (the MSK) are used.
At this point, both protocol participants MUST discard all intermediate cryptographic values, including x p, x s, y p, y s, Ke, Ki, Ka, and SharedSecret.
Similarly, both parties MUST immediately discard these values whenever the protocol terminates with a failure code or as a result of timeout.
Generating Keying Material Keying material is derived as the output of the negotiated pseudo  random function (prf) algorithm.
Since the amount of keying material needed may be greater than the size of the output of the prf algorithm, we will use the prf iteratively.
We denote by "prf " the function that outputs a pseudo random stream based on the inputs to a prf as follows
where: T1   prf(K, S   0x01) T2   prf(K, T1
0x04) continuing as needed to compute all required keys.
The keys are taken from the output string without regard to boundaries (e.g., if the required keys are a 256 bit Advanced Encryption Standard (AES) key and a 160 bit HMAC key, and the prf function generates 160 bits, the AES key will come from T1 and the beginning of T2, while the HMAC key will come from the rest of T2 and the beginning of T3).
The constant concatenated to the end of each string feeding the prf is a single octet.
In this document, prf  is not defined beyond 255 times the size of the prf output.
Many of the commonly used Diffie Hellman groups are inappropriate for use in EKE.
Most of these groups use a generator that is not a primitive element of the group.
As a result, an attacker running a dictionary attack would be able to learn at least 1 bit of information for each decrypted password guess.
Any MODP Diffie Hellman group defined for use in this protocol MUST have the following properties to ensure that it does not leak a usable amount of information about the password: 1.
The generator is a primitive element of the group.
The most significant 64 bits of the prime number are 1.
The group's order p is a "safe prime", i.e., (p 1)/2 is also prime.
The last requirement is related to the strength of the Diffie Hellman algorithm, rather than the password encryption.
It also makes it easy to verify that the generator is primitive.
Suitable groups are defined in Section 7.1.
To facilitate interoperability, the following algorithms are mandatory to implement:
ENCR AES128 CBC (encryption algorithm)
PRF HMAC SHA1 (pseudo random function)  MAC HMAC SHA1 (keyed message digest)
DHGROUP EKE 14 (DH group)
IANA Considerations IANA has allocated the EAP method type 53 from the range 1 191, for "EAP EKE Version 1".
Per this document, IANA created the registries described in the following sub sections.
Values (other than private use ones) can be added to these registries per Specification Required [RFC5226], with two exceptions: the Exchange and Failure Code registries can only be extended per RFC Required [RFC5226].
This section defines an IANA registry for Diffie Hellman groups.
This table defines the initial contents of this registry.
The Value column is used when negotiating the group.
Additional groups may be defined through IANA allocation.
Any future specification that defines a non MODP group MUST specify its use within EAP EKE and MUST demonstrate the group's security in this context.
A pseudo random function takes two parameters K and S (the key and input string respectively), and, to be usable in this protocol, must be defined for all lengths of K between 0 and 65,535 bits (inclusive).
Any future pseudo random function MUST be based on the HMAC construct, since the security of HKDF is only known for such functions.
This section defines an IANA registry for identity types:
An IPv6 address, in binary format
128 255   Reserved for Private Use
An example of an ID FQDN is "example.com".
The string MUST NOT contain any terminators (e.g., NULL, CR, etc.).
All characters in the ID FQDN are ASCII; for an internationalized domain name, the syntax is as defined in [RFC5891], for example "xn tmonesimerkki bfbb.example.net".
EAP EKE Channel Binding Type Registry
This section defines an IANA registry for the Channel Binding Type registry, a 16 bit long code.
The value 0x0000 has been defined as Reserved.
All other values up to and including 0xfeff are available for allocation via IANA.
The remaining values up to and including 0xffff are available for Private Use.
This section defines an IANA registry for the EAP EKE Exchange registry, an 8 bit long code.
Initial values are defined in Section 4.1.
All values up to and including 0x7f are available for allocation via IANA.
The remaining values up to and including 0xff are available for private use.
This section defines an IANA registry for the Failure Code registry, a 32 bit long code.
Initial values are defined in Section 4.2.4.
All values up to and including 0xfeffffff are available for allocation via IANA.
The remaining values up to and including 0xffffffff are available for private use.
Any protocol that claims to solve the problem of password  authenticated key exchange must be resistant to active, passive, and dictionary attack and have the quality of forward secrecy.
These characteristics are discussed further in the following paragraphs.
A passive attacker is one that merely relays messages back and forth between the peer and server, faithfully, and without modification.
The contents of the messages are available for inspection, but that is all.
To achieve resistance to passive attack, such an attacker must not be able to obtain any information about the password or anything about the resulting shared secret from watching repeated runs of the protocol.
Even if a passive attacker is able to learn the password, she will not be able to determine any information about the resulting secret shared by the peer and server.
An active attacker is able to modify, add, delete, and replay messages sent between protocol participants.
For this protocol to be resistant to active attack, the attacker must not be able to obtain any information about the password or the shared secret by using any of its capabilities.
In addition, the attacker must not be able to fool a protocol participant into thinking that the protocol completed successfully.
It is always possible for an active attacker to deny delivery of a message critical in completing the exchange.
This is no different than dropping all messages and is not an attack against the protocol.
Resistance to Dictionary Attack:  For this protocol to be resistant to dictionary attack, any advantage an adversary can gain must be directly related to the number of interactions she makes with an honest protocol participant and not through computation.
The adversary will not be able to obtain any information about the password except whether a single guess from a single protocol run is correct or incorrect.
Compromise of the password must not provide any information about the secrets generated by earlier runs of the protocol.
[RFC3748] requires that documents describing new EAP methods clearly articulate the security properties of the method.
In addition, for use with wireless LANs, [RFC4017] mandates and recommends several of these.
the peer and server both authenticate each other by proving possession of a shared password.
This is REQUIRED by [RFC4017].
compromise of the password does not reveal the secret keys (MSK and EMSK) from earlier runs of the protocol.
an attacker is unable to replay messages from a previous exchange either to learn the password or a key derived by the exchange.
Similarly, the attacker is unable to induce either the peer or server to believe the exchange has successfully completed when it hasn't.
Key derivation: a shared secret is derived by performing a group operation in a finite cyclic group (e.g., exponentiation) using secret data contributed by both the peer and server.
An MSK and EMSK are derived from that shared secret.
This is REQUIRED by [RFC4017].
Dictionary attack resistance: an attacker can only make one password guess per active attack, and the protocol is designed so that the attacker does not gain any confirmation of her guess by observing the decrypted y s or y p value (see below).
The advantage she can gain is through interaction not through computation.
This is REQUIRED by [RFC4017].
Session independence: this protocol is resistant to active and passive attacks and does not enable compromise of subsequent or prior MSKs or EMSKs from either passive or active attacks.
Denial of service resistance: it is possible for an attacker to cause a server to allocate state and consume CPU.
Such an attack is gated, though, by the requirement that the attacker first obtain connectivity through a lower layer protocol (e.g., 802.11 authentication followed by 802.11 association, or 802.3 "link up") and respond to two EAP messages: the EAP ID/Request and the EAP EKE ID/Request.
Man in the Middle Attack resistance: this exchange is resistant to active attack, which is a requirement for launching a man in the middle attack.
This is REQUIRED by [RFC4017].
upon completion of EAP EKE, the peer and server both agree on the MSK and EMSK values.
The peer has authenticated the server based on the Server ID and the server has authenticated the peer based on the Peer ID.
This is due to the fact that Peer ID, Server ID, and the generated shared secret are all combined to make the authentication element that must be shared between the peer and server for the exchange to complete.
This is REQUIRED by [RFC4017].
Fragmentation: this protocol does not define a technique for fragmentation and reassembly.
Resistance to "Denning Sacco" attack: learning keys distributed from an earlier run of the protocol, such as the MSK or EMSK, will not help an adversary learn the password.
Key strength: the strength of the resulting key depends on the finite cyclic group chosen.
Sufficient key strength is REQUIRED by [RFC4017].
Clearly, "sufficient" strength varies over time, depending on computation power assumed to be available to potential attackers.
MSKs and EMSKs are derived from the secret values generated during the protocol run, using a negotiated pseudo  random function.
Vulnerabilities (note that none of these are REQUIRED by [RFC4017]):
the ciphersuite proposal made by the server is not protected from tampering by an active attacker.
However, if a proposal was modified by an active attacker, it would result in a failure to confirm the message sent by the other party, since the proposal is bound by each side into its Confirm message, and the protocol would fail as a result.
Note that this assumes that none of the proposed ciphersuites enables an attacker to perform real time cryptanalysis.
Confidentiality: none of the messages sent in this protocol are encrypted, though many of the protocol fields are.
Integrity protection: protocol messages are not directly integrity protected; however, the ID and Commit exchanges are integrity protected through the Auth payloads exchanged in the Confirm exchange.
Channel binding: this protocol enables the exchange of integrity protected channel information that can be compared with values communicated via out of band mechanisms.
: this protocol does not provide a fast reconnect capability.
Cryptographic binding: this protocol is not a tunneled EAP method and therefore has no cryptographic information to bind.
the EAP EKE ID exchange is not protected.
An attacker will see the server's identity in the EAP EKE ID/ Request and see the peer's identity in EAP EKE ID/Response.
When analyzing the Commit exchange, it should be noted that the base security assumptions are different from "normal" cryptology.
Normally, we assume that the key has strong security properties, and that the data may have few or none.
Here, we assume that the key has weak security properties (the attacker may have a list of possible keys), and hence we need to ensure that the data has strong properties (indistinguishable from random).
This difference may mean that conventional wisdom in cryptology might not apply in this case.
This also imposes severe constraints on the protocol, e.g., the mandatory use of random padding and the need to define specific finite groups.
It is fundamental to the dictionary attack resistance that the Diffie Hellman public values y s and y p are indistinguishable from a random string.
If this condition is not met, then a passive attacker can do trial decryption of the encrypted DHComponent P or DHComponent S values based on a password guess, and if they decrypt to a value that is not a valid public value, they know that the password guess was incorrect.
For MODP groups, Section 6.2 gives conditions on the group to make sure that this criterion is met.
For other groups (for example, Elliptic Curve groups), some other means of ensuring this must be employed.
The standard way of expressing Elliptic Curve public values does not meet this criterion, as a valid Elliptic Curve X coordinate can be distinguished from a random string with probability of approximately 0.5.
A future document might introduce a group representation, and/or a slight modification of the password encryption scheme, so that Elliptic Curve groups can be accommodated.
[BR02] presents several alternative solutions for this problem.
8.3.  Resistance to Active Attacks
An attacker, impersonating either the peer or the server, can always try to enumerate all possible passwords, for example by using a dictionary.
To counter this likely attack vector, both peer and server MUST implement rate limiting mechanisms.
We note that locking out the other party after a small number of tries would create a trivial denial of service opportunity.
Identity Protection, Anonymity, and Pseudonymity By default, the EAP EKE ID exchange is unprotected, and an eavesdropper can observe both parties' identities.
A future extension of this protocol may support anonymity, e.g., by allowing the server to send a temporary identity to the peer at the end of the exchange, so that the peer can use that identity in subsequent exchanges.
EAP EKE differs in this respect from tunneled methods, which typically provide unconditional identity protection to the peer by encrypting the identity exchange, but reveal information in the server certificate.
It is possible to use EAP EKE as the inner method in a tunneled EAP method in order to achieve this level of identity protection.
Password Processing and Long Term Storage
This document recommends that a password equivalent (a hash of the password) be stored instead of the cleartext password.
While this solution provides a measure of security, there are also tradeoffs related to algorithm agility:  Each stored password must identify the hash function that was used to compute the stored value.
Complex deployments and migration scenarios might necessitate multiple stored passwords, one per each algorithm.
Changing the algorithm can require, in some cases, that the users manually change their passwords.
The reader is referred to Section 10 of [RFC3629] for security considerations related to the parsing and processing of UTF 8 strings.
