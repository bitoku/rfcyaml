- contents:
  - '        Sieve Email Filtering: Spamtest and Virustest Extensions

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   The Sieve email filtering language \"spamtest\", \"spamtestplus\",
    and\n   \"virustest\" extensions permit users to use simple, portable commands\n
    \  for spam and virus tests on email messages.  Each extension provides\n   a
    new test using matches against numeric \"scores\".  It is the\n   responsibility
    of the underlying Sieve implementation to do the\n   actual checks that result
    in proper input to the tests.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction and Overview .......................................2\n
    \  2. Conventions Used in This Document ...............................2\n   3.
    Sieve Extensions ................................................3\n      3.1.
    General Considerations .....................................3\n      3.2. Test
    spamtest ..............................................3\n           3.2.1. spamtest
    without :percent Argument ..................4\n           3.2.2. spamtest with
    :percent Argument .....................5\n      3.3. Test virustest .............................................7\n
    \  4. Security Considerations .........................................9\n   5.
    IANA Considerations .............................................9\n      5.1.
    spamtest Registration ......................................9\n      5.2. virustest
    Registration ....................................10\n      5.3. spamtestplus Registration
    .................................10\n   6. References .....................................................10\n
    \     6.1. Normative References ......................................10\n      6.2.
    Informative References ....................................11\n   Appendix A.
    Acknowledgments .......................................12\n   Appendix B. Important
    Changes since RFC 3685 ......................12\n"
  title: Table of Contents
- contents:
  - "1.  Introduction and Overview\n   Sieve scripts are frequently being used to
    do spam and virus\n   filtering either based on implicit script tests (e.g., tests
    for\n   \"black-listed\" senders directly encoded in the Sieve script), or via\n
    \  testing messages modified by some external spam or virus checker that\n   handled
    the message prior to Sieve.  The use of third-party spam and\n   virus checker
    tools poses a problem since each tool has its own way\n   of indicating the result
    of its checks.  These usually take the form\n   of a header added to the message,
    the content of which indicates the\n   status using some syntax defined by the
    particular tool.  Each user\n   has to then create their own Sieve scripts to
    match the contents of\n   these headers to do filtering.  This requires the script
    to stay in\n   synchronization with the third-party tool as it gets updated or\n
    \  perhaps replaced with another.  Thus, scripts become tied to specific\n   environments
    and lose portability.\n   The purpose of this document is to introduce two Sieve
    tests that can\n   be used to implement \"generic\" tests for spam and viruses
    in messages\n   processed via Sieve scripts.  The spam and virus checks themselves\n
    \  are handled by the underlying Sieve implementation in whatever manner\n   is
    appropriate, so that the Sieve spam and virus test commands can be\n   used in
    a portable way.\n   In order to do numeric comparisons against the returned strings,\n
    \  server implementations MUST also support the Sieve relational\n   [RFC5231]
    extension, in addition to the extensions described here.\n   All examples below
    assume the relational extension is present.\n"
  title: 1.  Introduction and Overview
- contents:
  - "2.  Conventions Used in This Document\n   Conventions for notations are as in
    [RFC5228] Section 1.1.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n
    \  The term \"spam\" is used in this document to refer to unsolicited or\n   unwanted
    email messages.  This document does not attempt to define\n   what exactly constitutes
    spam, or how it should be identified, or\n   what actions should be taken when
    detected.\n   The term \"virus\" is used in this document to refer to any type
    of\n   message whose content can cause malicious damage.  This document does\n
    \  not attempt to define what exactly constitutes a virus, or how it\n   should
    be identified, or what actions should be taken when detected.\n"
  title: 2.  Conventions Used in This Document
- contents:
  - '3.  Sieve Extensions

    '
  - contents:
    - "3.1.  General Considerations\n   The \"spamtest\" and \"virustest\" tests described
      below evaluate the\n   results of implementation-specific spam and virus checks
      in a\n   portable way.  The implementation may, for example, check for third-\n
      \  party spam tool headers and determine how those map into the way the\n   test
      commands are used.  To do this, the underlying Sieve\n   implementation provides
      a normalized result string as one of the\n   inputs to each test command.  The
      normalized result string is\n   considered to be the value on the left-hand
      side of the test, and the\n   comparison values given in the test command are
      considered to be on\n   the right-hand side.\n   The normalized result starts
      with a digit string, with its numeric\n   value within the range of values used
      by the specific test,\n   indicating the severity of spam or viruses in a message
      or whether\n   any tests were done at all.  This may optionally be followed
      by a\n   space (%x20) character and arbitrary text, or in one specific case
      a\n   single keyword is returned.  The numeric value can be compared to\n   specific
      values using the Sieve relational [RFC5231] extension in\n   conjunction with
      the \"i;ascii-numeric\" comparator [RFC4790], which\n   will test for the presence
      of a numeric value at the start of the\n   string, ignoring any additional text
      in the string.  The optional\n   text can be used to carry implementation-specific
      details about the\n   tests and descriptive comments about the result.  Tests
      can be done\n   using standard string comparators against this text if it helps
      to\n   refine behavior; however, this will break portability of the script\n
      \  as the text will likely be specific to a particular implementation.\n   In
      addition, the Sieve relational [RFC5231] \":count\" match type can\n   be used
      to determine if the underlying implementation actually did a\n   test.  If the
      underlying spam or virus test was done, the \":count\" of\n   the normalized
      result will return the numeric value \"1\", whilst if\n   the test was not done,
      or the Sieve implementation could not\n   determine if a test was done or not
      done, the \":count\" value will be\n   \"0\" (zero).\n"
    title: 3.1.  General Considerations
  - contents:
    - "3.2.  Test spamtest\n           Usage:    spamtest [\":percent\"] [COMPARATOR]
      [MATCH-TYPE]\n                     <value: string>\n   Sieve implementations
      that implement the \"spamtest\" test use an\n   identifier of either \"spamtest\"
      or \"spamtestplus\" for use with the\n   capability mechanism.\n   If the \":percent\"
      argument is not used with any spamtest test, then\n   one or both of \"spamtest\"
      or \"spamtestplus\" capability identifiers\n   MUST be present.\n   If the \":percent\"
      argument is used with any spamtest test, then the\n   \"spamtestplus\" capability
      identifier MUST be present.  Sieve\n   implementations MUST return an error
      if the \":percent\" argument is\n   used and \"spamtestplus\" is not specified.\n
      \  In the interests of brevity and clarity, scripts SHOULD NOT specify\n   both
      \"spamtestplus\" and \"spamtest\" capability identifiers together.\n   The \"spamtest\"
      test evaluates to true if the normalized spamtest\n   result matches the value.
      \ The type of match is specified by the\n   optional match argument, which defaults
      to \":is\" if not specified.\n"
    - contents:
      - "3.2.1.  spamtest without :percent Argument\n   When the \":percent\" argument
        is not present in the \"spamtest\" test,\n   the normalized result string
        provided for the left-hand side of the\n   test starts with a numeric value
        in the range \"0\" (zero) through\n   \"10\", with meanings summarized below:\n
        \  +----------+--------------------------------------------------------+\n
        \  | spamtest | interpretation                                         |\n
        \  | value    |                                                        |\n
        \  +----------+--------------------------------------------------------+\n
        \  | 0        | message was not tested for spam, or Sieve could not    |\n
        \  |          | determine whether any test was done                    |\n
        \  |          |                                                        |\n
        \  | 1        | message was tested and is clear of spam                |\n
        \  |          |                                                        |\n
        \  | 2 - 9    | message was tested and may contain spam; a higher      |\n
        \  |          | number indicates a greater likelihood of spam          |\n
        \  |          |                                                        |\n
        \  | 10       | message was tested and definitely contains spam        |\n
        \  +----------+--------------------------------------------------------+\n
        \  The underlying Sieve implementation will map whatever spam check is\n   done
        into this numeric range, as appropriate.\n   Examples:\n           require
        [\"spamtest\", \"fileinto\", \"relational\", \"comparator-\n                    i;ascii-numeric\"];\n
        \          if spamtest :value \"eq\" :comparator \"i;ascii-numeric\" \"0\"\n
        \          {\n               fileinto \"INBOX.unclassified\";\n           }\n
        \          elsif spamtest :value \"ge\" :comparator \"i;ascii-numeric\" \"3\"\n
        \          {\n               fileinto \"INBOX.spam-trap\";\n           }\n
        \  In this example, any message that has not passed through a spam check\n
        \  tool will be filed into the mailbox \"INBOX.unclassified\".  Any\n   message
        with a normalized result value greater than or equal to \"3\"\n   is filed
        into a mailbox called \"INBOX.spam-trap\" in the user's\n   mailstore.\n"
      title: 3.2.1.  spamtest without :percent Argument
    - contents:
      - "3.2.2.  spamtest with :percent Argument\n   When the \":percent\" argument
        is present in the \"spamtest\" test, the\n   normalized result string provided
        for the left-hand side of the test\n   starts with a numeric value in the
        range \"0\" (zero) through \"100\",\n   with meanings summarized below:\n
        \  +----------+-------------------------------------------------------+\n
        \  | spamtest | interpretation                                        |\n
        \  | value    |                                                       |\n
        \  +----------+-------------------------------------------------------+\n
        \  | 0        | message was tested and is clear of spam, or was not   |\n
        \  |          | tested for spam, or Sieve could not determine whether |\n
        \  |          | any test was done                                     |\n
        \  |          |                                                       |\n
        \  | 1 - 99   | message was tested and may contain spam; a higher     |\n
        \  |          | percentage indicates a greater likelihood of spam     |\n
        \  |          |                                                       |\n
        \  | 100      | message was tested and definitely contains spam       |\n
        \  +----------+-------------------------------------------------------+\n
        \  The underlying Sieve implementation will map whatever spam check is\n   done
        into the numeric range, as appropriate.\n   To determine whether or not the
        message was tested for spam, two\n   options can be used:\n   a.  a test with
        or without the \":percent\" argument and \":count\" match\n       type, testing
        for the value \"0\" as described in Section 3.1.\n   b.  a test without the
        \":percent\" argument using the \":value\" match\n       type, testing for
        the normalized result value \"0\" as described in\n       Section 3.2.1.\n
        \  Examples:\n           require [\"spamtestplus\", \"fileinto\", \"relational\",\n
        \                   \"comparator-i;ascii-numeric\"];\n           if spamtest
        :value \"eq\"\n                       :comparator \"i;ascii-numeric\" \"0\"\n
        \          {\n               fileinto \"INBOX.unclassified\";\n           }\n
        \          elsif spamtest :percent :value \"eq\"\n                          :comparator
        \"i;ascii-numeric\" \"0\"\n           {\n               fileinto \"INBOX.not-spam\";\n
        \          }\n           elsif spamtest :percent :value \"lt\"\n                          :comparator
        \"i;ascii-numeric\" \"37\"\n           {\n               fileinto \"INBOX.spam-trap\";\n
        \          }\n           else\n           {\n               discard;\n           }\n
        \  In this example, any message that has not passed through a spam check\n
        \  tool will be filed into the mailbox \"INBOX.unclassified\".  Any\n   message
        that is classified as definitely not containing spam\n   (normalized result
        value \"0\") will be filed into the mailbox\n   \"INBOX.not-spam\".  Any message
        with a normalized result value less\n   than \"37\" is filed into a mailbox
        called \"INBOX.spam-trap\" in the\n   user's mailstore.  Any other normalized
        result value will result in\n   the message being discarded.\n   Alternatively,
        the Sieve relational [RFC5231] \":count\" match type can\n   be used:\n   Examples:\n
        \          if spamtest :percent :count \"eq\"\n                       :comparator
        \"i;ascii-numeric\" \"0\"\n           {\n               fileinto \"INBOX.unclassified\";\n
        \          }\n           elsif spamtest :percent :value \"eq\"\n                          :comparator
        \"i;ascii-numeric\" \"0\"\n           {\n               fileinto \"INBOX.not-spam\";\n
        \          }\n           elsif spamtest :percent :value \"lt\"\n                          :comparator
        \"i;ascii-numeric\" \"37\"\n           {\n               fileinto \"INBOX.spam-trap\";\n
        \          }\n           else\n           {\n               discard;\n           }\n
        \  This example will result in exactly the same behavior as the previous\n
        \  one.\n"
      title: 3.2.2.  spamtest with :percent Argument
    title: 3.2.  Test spamtest
  - contents:
    - "3.3.  Test virustest\n           Usage:    virustest [COMPARATOR] [MATCH-TYPE]\n
      \                    <value: string>\n   Sieve implementations that implement
      the \"virustest\" test have an\n   identifier of \"virustest\" for use with
      the capability mechanism.\n   The \"virustest\" test evaluates to true if the
      normalized result\n   string matches the value.  The type of match is specified
      by the\n   optional match argument, which defaults to \":is\" if not specified.\n
      \  The normalized result string provided for the left side of the test\n   starts
      with a numeric value in the range \"0\" (zero) through \"5\", with\n   meanings
      summarized below:\n   +-----------+-------------------------------------------------------+\n
      \  | virustest | interpretation                                        |\n   |
      value     |                                                       |\n   +-----------+-------------------------------------------------------+\n
      \  | 0         | message was not tested for viruses, or Sieve could    |\n   |
      \          | not determine whether any test was done               |\n   |           |
      \                                                      |\n   | 1         | message
      was tested and contains no known viruses      |\n   |           |                                                       |\n
      \  | 2         | message was tested and contained a known virus that   |\n   |
      \          | was replaced with harmless content                    |\n   |           |
      \                                                      |\n   | 3         | message
      was tested and contained a known virus that   |\n   |           | was \"cured\"
      such that it is now harmless              |\n   |           |                                                       |\n
      \  | 4         | message was tested and possibly contains a known      |\n   |
      \          | virus                                                 |\n   |           |
      \                                                      |\n   | 5         | message
      was tested and definitely contains a known    |\n   |           | virus                                                 |\n
      \  +-----------+-------------------------------------------------------+\n   The
      underlying Sieve implementation will map whatever virus checks\n   are done
      into this numeric range, as appropriate.  If the message has\n   not been categorized
      by any virus checking tools, then the virustest\n   result is \"0\".\n   Example:\n
      \          require [\"virustest\", \"fileinto\", \"relational\", \"comparator-\n
      \                   i;ascii-numeric\"];\n           if virustest :value \"eq\"
      :comparator \"i;ascii-numeric\" \"0\"\n           {\n               fileinto
      \"INBOX.unclassified\";\n           }\n           if virustest :value \"eq\"
      :comparator \"i;ascii-numeric\" \"4\"\n           {\n               fileinto
      \"INBOX.quarantine\";\n           }\n           elsif virustest :value \"eq\"
      :comparator \"i;ascii-numeric\" \"5\"\n           {\n               discard;\n
      \          }\n   In this example, any message that has not passed through a
      virus\n   check tool will be filed into the mailbox \"INBOX.unclassified\".
      \ Any\n   message with a normalized result value equal to \"4\" is filed into
      a\n   mailbox called \"INBOX.quarantine\" in the user's mailstore.  Any\n   message
      with a normalized result value equal to \"5\" is discarded\n   (removed) and
      not delivered to the user's mailstore.\n"
    title: 3.3.  Test virustest
  title: 3.  Sieve Extensions
- contents:
  - "4.  Security Considerations\n   Sieve implementations SHOULD ensure that \"spamtest\"
    and \"virustest\"\n   tests only report spam and virus test results for messages
    that\n   actually have gone through a legitimate spam or virus check process.\n
    \  In particular, if such checks rely on the addition and subsequent\n   checking
    of private header fields, it is the responsibility of the\n   implementation to
    ensure that such headers cannot be spoofed by the\n   sender or intermediary and
    thereby prevent the implementation from\n   being tricked into returning the wrong
    result for the test.\n   Server administrators must ensure that the virus checking
    tools are\n   kept up to date, to provide reasonable protection for users using
    the\n   \"virustest\" test.  Users should be made aware of the fact that the\n
    \  \"virustest\" test does not provide a 100% reliable way to remove all\n   viruses,
    and they should continue to exercise caution when dealing\n   with messages of
    unknown content and origin.\n   Beyond that, the \"spamtest\" and \"virustest\"
    extensions do not raise\n   any security considerations that are not present in
    the base\n   [RFC5228] protocol, and these issues are discussed in [RFC5228].\n"
  title: 4.  Security Considerations
- contents:
  - "5.  IANA Considerations\n   The following templates specify the IANA registration
    of the Sieve\n   extensions specified in this document.  The registrations for\n
    \  \"spamtest\" and \"virustest\" replace those from [RFC3685]:\n"
  - contents:
    - "5.1.  spamtest Registration\n      To: iana@iana.org\n      Subject: Registration
      of new Sieve extension\n      Capability name: spamtest\n      Description:
      \    Provides a test to check for varying likelihood of\n                       an
      email message being spam.\n      RFC number:      RFC 5235\n      Contact address:
      The Sieve discussion list <ietf-mta-filters@imc.org>\n   This information has
      been added to the list of Sieve extensions given\n   on http://www.iana.org/assignments/sieve-extensions.\n"
    title: 5.1.  spamtest Registration
  - contents:
    - "5.2.  virustest Registration\n      To: iana@iana.org\n      Subject: Registration
      of new Sieve extension\n      Capability name: virustest\n      Description:
      \    Provides a test to check for varying likelihood of\n                       there
      being malicious content in an email message.\n      RFC number:      RFC 5235\n
      \     Contact address: The Sieve discussion list <ietf-mta-filters@imc.org>\n
      \  This information has been added to the list of Sieve extensions given\n   on
      http://www.iana.org/assignments/sieve-extensions.\n"
    title: 5.2.  virustest Registration
  - contents:
    - "5.3.  spamtestplus Registration\n      To: iana@iana.org\n      Subject: Registration
      of new Sieve extension\n      Capability name: spamtestplus\n      Description:
      \    Provides a test to check for varying likelihood of\n                       an
      email message being spam, possibly using a\n                       percentage
      range.\n      RFC number:      RFC 5235\n      Contact address: The Sieve discussion
      list <ietf-mta-filters@imc.org>\n   This information has been added to the list
      of Sieve extensions given\n   on http://www.iana.org/assignments/sieve-extensions.\n"
    title: 5.3.  spamtestplus Registration
  title: 5.  IANA Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC4790]  Newman, C., Duerst, M., and A. Gulbrandsen, \"Internet\n
      \             Application Protocol Collation Registry\", RFC 4790, March\n              2007.\n
      \  [RFC5228]  Guenther, P., Ed., and T. Showalter, Ed., \"Sieve: An Email\n
      \             Filtering Language\", RFC 5228, January 2008.\n   [RFC5231]  Segmuller,
      W. and B. Leiba, \"Sieve Email Filtering:\n              Relational Extension\",
      RFC 5231, January 2008.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [RFC3685]  Daboo, C., \"SIEVE Email Filtering:
      Spamtest and VirusTest\n              Extensions\", RFC 3685, February 2004.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Appendix A.  Acknowledgments\n   Thanks to Mark E. Mallett, Tony Hansen, Jutta
    Degener, Ned Freed,\n   Ashish Gawarikar, Alexey Melnikov, Nigel Swinson, and
    Aaron Stone for\n   comments and corrections.\n"
  title: Appendix A.  Acknowledgments
- contents:
  - "Appendix B.  Important Changes since RFC 3685\n   Listed below are some of the
    major changes from the previous\n   specification [RFC3685], which this one supersedes.\n
    \  1. A \":percent\" argument has been added to the \"spamtest\" test adding\n
    \     a new 0-100 numerical range for test results.\n   2. A \"spamtestplus\"
    requires item has been added to indicate the\n      presence of this extension
    in scripts.\n   3. The \"count\" match type from [RFC5231] can now be used to
    determine\n      whether or not a message was tested.\n   4. Clarified that \"test
    not done\" also means \"Sieve system could not\n      determine if a test was
    done\".\n"
  title: Appendix B.  Important Changes since RFC 3685
- contents:
  - "Author's Address\n   Cyrus Daboo\n   EMail: cyrus@daboo.name\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
