- title: __initial_text__
  contents:
  - "The following memo was a page of a document describing changes in\nversion 1.34\
    \ of the Tenex system. I believe that the author is Ray\nTomlinson or someone\
    \ else in the BBN-RCC Tenex group. In any case Ray\nhas agreed that these comments\
    \ should be circulated to the to the\nnetwork community, rather than to only the\
    \ Tenex community.\n         Comments on RCTE from the TENEX Implementation Experience\n\
    The code to implement the RCTE option of the new TELNET protocol for\nTENEX has\
    \ been completed. The RCTE option permits a reduction in network\ntraffic by deferring\
    \ the transmission of characters which will not cause\nthe receiving user program\
    \ to be activated until a character which will\ncause the user program to be activated.\
    \ A further reduction is achieved\nby minimizing the flow of echo characters back\
    \ to the user TELNET\nprogram. This is done by having the server instruct the\
    \ user TELNET to\necho the group of characters up through the next wakeup character.\
    \ By\nsending this command as the user program is about to read the first\ncharacter\
    \ of that group, the echo is guaranteed to follow any response\nto the preceding\
    \ group of characters.\nSignificant problems with the RCTE protocol were encountered.\
    \ The\nhandling of spontaneous output was specified in a way that made the\nimplementation\
    \ extremely difficult to do correctly (if, indeed, a\ncorrect implementation is\
    \ possible). The solution here was to completely\nisolate the control of input\
    \ transmission and echoing from the\ncharacters flowing in the output stream.\
    \ Synchronization of input and\noutput then occurs directly by virtue of the embedding\
    \ of control\ninformation in the output stream. This approach permits a simplified\n\
    coding of both the user TELNET and server TELNET.\nA second problem was the handling\
    \ of interrupt characters. The RCTE\nprotocol fails to provide an explicit mechanism\
    \ for interrupt characters\nthus necessitating the handling of interrupt characters\
    \ as program\nwakeup characters. Since the interrupt characters are not actually\n\
    handled as program wakeup characters and, in fact, bypass the terminal\ninput\
    \ buffer, a special provision had to be made to get the command sent\nback to\
    \ the user TELNET to indicate that the character stream should be\nechoed beyond\
    \ the point where the interrupt character was typed. The\ntransmission must be\
    \ synchronized with the processing of the terminal\ninput buffer so that it will\
    \ be sent at the proper time. This was\nachieved by putting a marker in the input\
    \ buffer at the point where the\ninterrupt character was. This marker is never\
    \ given to the user's\nprogram and must not be counted as an input character.\
    \ A new counter was\ninstalled indicating the number of such markers in the input\
    \ buffer and\nthe SIBE JSYS modified to indicate \"empty\" only if the difference\
    \ of the\ntotal characters in the buffer and the number of markers in the buffer\n\
    is greater than 0.\nA third problem is handling the case where the input buffer\
    \ is cleared.\nSince the buffer may contain various wakeup characters and special\n\
    markers, when the buffer is cleared, the user TELNET and SERVER may get\nout of\
    \ sync. It is infeasible to scan the buffer and send a RCTE\ncommand for each\
    \ such wakeup character or special marker. instead, a\ncommand is sent to the\
    \ user TELNET meaning \"clear your input buffer and\nreset your counters\". This\
    \ command is implemented by sending \"WILL\nRCTE\". This is the reverse case from\
    \ a normal RCTE (i.e. DO RCTE) and\nthus cannot be confused with the normal use\
    \ of the RCTE option. This\nsaves adding a new option.\n"
