- title: __initial_text__
  contents:
  - '                   PPP Predictor Compression Protocol

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ of\n   encapsulating multiple protocol datagrams over point-to-point links.\n\
    \   The PPP Compression Control Protocol [2] provides a method for\n   transporting\
    \ multi-protocol datagrams over PPP encapsulated links.\n   This document describes\
    \ the use of the Predictor data compression\n   algorithm for compressing PPP\
    \ encapsulated packets.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Predictor is a high speed compression algorithm, available\
    \ without\n   license fees.  The compression ratio obtained using predictor is\
    \ not\n   as good as other compression algorithms, but it remains one of the\n\
    \   fastest algorithms available.\n   Note that although care has been taken to\
    \ ensure that the following\n   code does not infringe any patents, there is no\
    \ assurance that it is\n   not covered by a patent.\n"
- title: 2.  Licensing
  contents:
  - "2.  Licensing\n   There are no license fees or costs associated with using the\n\
    \   Predictor algorithm.\n   Use the following code at your own risk.\n"
- title: 3.  Predictor Packets
  contents:
  - "3.  Predictor Packets\n   Before any Predictor packets may be communicated, PPP\
    \ must reach the\n   Network-Layer Protocol phase, and the Compression Control\
    \ Protocol\n   must reach the Opened state.\n   Exactly one Predictor datagram\
    \ is encapsulated in the PPP Information\n   field, where the PPP Protocol field\
    \ indicates type hex 00FD\n   (compressed datagram).\n   The maximum length of\
    \ the Predictor datagram transmitted over a PPP\n   link is the same as the maximum\
    \ length of the Information field of a\n   PPP encapsulated packet.\n   Prior\
    \ to compression, the uncompressed data begins with the PPP\n   Protocol number.\
    \  This value MAY be compressed when Protocol-Field-\n   Compression is negotiated.\n\
    \   PPP Link Control Protocol packets MUST NOT be send within compressed\n   data.\n"
- title: 3.1.  Predictor theory
  contents:
  - "3.1.  Predictor theory\n   Predictor works by filling a guess table with values,\
    \ based on the\n   hash of the previous characters seen. Since we are either emitting\n\
    \   the source data, or depending on the guess table, we add a flag bit\n   for\
    \ every byte of input, telling the decompressor if it should\n   retrieve the\
    \ byte from the compressed data stream, or the guess\n   table. Blocking the input\
    \ into groups of 8 characters means that we\n   don't have to bit-insert the compressed\
    \ output - a flag byte preceeds\n   every 8 bytes of compressed data. Each bit\
    \ of the flag byte\n   corresponds to one byte of reconstructed data.\n"
- title: 'Take the source file:'
  contents:
  - 'Take the source file:

    '
- title: 000000    4141 4141 4141 410a  4141 4141 4141 410a    AAAAAAA.AAAAAAA.
  contents:
  - '000000    4141 4141 4141 410a  4141 4141 4141 410a    AAAAAAA.AAAAAAA.

    '
- title: 000010    4141 4141 4141 410a  4141 4141 4141 410a    AAAAAAA.AAAAAAA.
  contents:
  - '000010    4141 4141 4141 410a  4141 4141 4141 410a    AAAAAAA.AAAAAAA.

    '
- title: 000020    4142 4142 4142 410a  4241 4241 4241 420a    ABABABA.BABABAB.
  contents:
  - '000020    4142 4142 4142 410a  4241 4241 4241 420a    ABABABA.BABABAB.

    '
- title: 000030    7878 7878 7878 780a                         xxxxxxx.
  contents:
  - '000030    7878 7878 7878 780a                         xxxxxxx.

    '
- title: 'Compressing the above data yields the following:'
  contents:
  - 'Compressing the above data yields the following:

    '
- title: 000000    6041 4141 4141 0a60  4141 4141 410a 6f41    `AAAAA.`AAAAA.oA
  contents:
  - '000000    6041 4141 4141 0a60  4141 4141 410a 6f41    `AAAAA.`AAAAA.oA

    '
- title: 000010    0a6f 410a 4142 4142  4142 0a60 4241 4241    .oA.ABABAB.`BABA
  contents:
  - '000010    0a6f 410a 4142 4142  4142 0a60 4241 4241    .oA.ABABAB.`BABA

    '
- title: 000020    420a 6078 7878 7878  0a                     B.`xxxxx.
  contents:
  - '000020    420a 6078 7878 7878  0a                     B.`xxxxx.

    '
- title: 'Reading the above data says:'
  contents:
  - 'Reading the above data says:

    '
- title: flag = 0x60 - 2 bytes in this block were guessed correctly, 5 and 6.
  contents:
  - "flag = 0x60 - 2 bytes in this block were guessed correctly, 5 and 6.\n     Reconstructed\
    \ data is:    0 1 2 3 4 5 6 7\n        File:                  A A A A A\n    \
    \    Guess table:                     A A\n"
- title: flag = 0x60 - 2 bytes in this block were guessed correctly, 5 and 6.
  contents:
  - "flag = 0x60 - 2 bytes in this block were guessed correctly, 5 and 6.\n     Reconstructed\
    \ data is:    0 1 2 3 4 5 6 7\n        File:                  A A A A A\n    \
    \    Guess table:                     A A\n"
- title: flag = 0x6f - 6 bytes in this block were guessed correctly, 0-3, 5 and 6.
  contents:
  - "flag = 0x6f - 6 bytes in this block were guessed correctly, 0-3, 5 and 6.\n \
    \    Reconstructed data is:    0 1 2 3 4 5 6 7\n        File:                \
    \          A\n        Guess table:           A A A A   A A\n"
- title: flag = 0x6f - 6 bytes in this block were guessed correctly, 0-3, 5 and 6.
  contents:
  - "flag = 0x6f - 6 bytes in this block were guessed correctly, 0-3, 5 and 6.\n \
    \    Reconstructed data is:    0 1 2 3 4 5 6 7\n        File:                \
    \          A\n        Guess table:           A A A A   A A\n"
- title: flag = 0x41 - 2 bytes in this block were guessed correctly, 0 and 6.
  contents:
  - "flag = 0x41 - 2 bytes in this block were guessed correctly, 0 and 6.\n     Reconstructed\
    \ data is:    0 1 2 3 4 5 6 7\n        File:                    B A B A B\n  \
    \      Guess table:           A           A\n"
- title: flag = 0x60 - 2 bytes in this block were guessed correctly, 5 and 6.
  contents:
  - "flag = 0x60 - 2 bytes in this block were guessed correctly, 5 and 6.\n     Reconstructed\
    \ data is:    0 1 2 3 4 5 6 7\n        File:                  B A B A B\n    \
    \    Guess table:                     A B\n"
- title: flag = 0x60 - 2 bytes in this block were guessed correctly, 5 and 6
  contents:
  - "flag = 0x60 - 2 bytes in this block were guessed correctly, 5 and 6\n     Reconstructed\
    \ data is:    0 1 2 3 4 5 6 7\n        File:                  x x x x x\n    \
    \    Guess table:                     x x\n   And now, on to the source - note\
    \ that it has been modified to work\n   with a split block. If your data stream\
    \ can't be split within a block\n   (e.g., compressing packets), then the code\
    \ dealing with \"final\", and\n   the memcpy are not required.  You can detect\
    \ this situation (or\n   errors, for that matter) by observing that the flag byte\
    \ indicates\n   that more data is required from the compressed data stream, but\
    \ you\n   are out of data (len in decompress is <= 0). It *is* ok if len == 0,\n\
    \   and flags indicate guess table usage.\n   #include <stdio.h>\n   #ifdef __STDC__\n\
    \   #include <stdlib.h>\n   #endif\n   #include <string.h>\n   /*\n    * pred.c\
    \ -- Test program for Dave Rand's rendition of the\n    * predictor algorithm\n\
    \    * Updated by: iand@labtam.labtam.oz.au (Ian Donaldson)\n    * Updated by:\
    \ Carsten Bormann <cabo@cs.tu-berlin.de>\n    * Original  : Dave Rand <dlr@bungi.com>/<dave_rand@novell.com>\n\
    \    */\n   /* The following hash code is the heart of the algorithm:\n    * It\
    \ builds a sliding hash sum of the previous 3-and-a-bit\n    * characters which\
    \ will be used to index the guess table.\n    * A better hash function would result\
    \ in additional compression,\n    * at the expense of time.\n    */\n   #define\
    \ HASH(x) Hash = (Hash << 4) ^ (x)\n   static unsigned short int Hash;\n   static\
    \ unsigned char GuessTable[65536];\n   static int\n   compress(source, dest, len)\n\
    \   unsigned char *source, *dest;\n   int len;\n   {\n       int i, bitmask;\n\
    \       unsigned char *flagdest, flags, *orgdest;\n       orgdest = dest;\n  \
    \     while (len) {\n           flagdest = dest++; flags = 0; /* All guess wrong\
    \ initially */\n           for (bitmask=1, i=0; i < 8 && len; i++, bitmask <<=\
    \ 1) {\n               if (GuessTable[Hash] == *source) {\n                  \
    \ flags |= bitmask; /* Guess was right - don't output */\n               } else\
    \ {\n                   GuessTable[Hash] = *source;\n                   *dest++\
    \ = *source; /* Guess wrong, output char */\n               }\n              \
    \ HASH(*source++);len--;\n           }\n           *flagdest = flags;\n      \
    \ }\n       return(dest - orgdest);\n   }\n   static int\n   decompress(source,\
    \ dest, lenp, final)\n   unsigned char *source, *dest;\n   int *lenp, final;\n\
    \   {\n       int i, bitmask;\n       unsigned char flags, *orgdest;\n       int\
    \ len = *lenp;\n       orgdest = dest;\n       while (len >= 9) {\n          \
    \ flags = *source++;\n           for (i=0, bitmask = 1; i < 8; i++, bitmask <<=\
    \ 1) {\n               if (flags & bitmask) {\n                   *dest = GuessTable[Hash];\
    \       /* Guess correct */\n               } else {\n                   GuessTable[Hash]\
    \ = *source;     /* Guess wrong */\n                   *dest = *source++;    \
    \      /* Read from source */\n                   len--;\n               }\n \
    \              HASH(*dest++);\n           }\n           len--;\n       }\n   \
    \    while (final && len) {\n           flags = *source++;\n           len--;\n\
    \           for (i=0, bitmask = 1; i < 8; i++, bitmask <<= 1) {\n            \
    \   if (flags & bitmask) {\n                   *dest = GuessTable[Hash];     \
    \  /* Guess correct */\n               } else {\n                   if (!len)\n\
    \                       break;  /* we seem to be really done -- cabo */\n    \
    \               GuessTable[Hash] = *source;     /* Guess wrong */\n          \
    \         *dest = *source++;          /* Read from source */\n               \
    \    len--;\n               }\n               HASH(*dest++);\n           }\n \
    \      }\n       *lenp = len;\n       return(dest - orgdest);\n   }\n   #define\
    \ SIZ1 8192\n   static void\n   compress_file(f) FILE *f; {\n       char bufp[SIZ1];\n\
    \       char bufc[SIZ1/8*9+9];\n       int len1, len2;\n       while ((len1 =\
    \ fread(bufp, 1, SIZ1, f)) > 0) {\n           len2 = compress((unsigned char *)bufp,\n\
    \           (unsigned char *)bufc, len1);\n           (void) fwrite(bufc, 1, len2,\
    \ stdout);\n       }\n   }\n   static void\n   decompress_file(f) FILE *f; {\n\
    \       char bufp[SIZ1+9];\n       char bufc[SIZ1*9+9];\n       int len1, len2,\
    \ len3;\n       len1 = 0;\n       while ((len3 = fread(bufp+len1, 1, SIZ1, f))\
    \ > 0) {\n           len1 += len3;\n           len3 = len1;\n           len2 =\
    \ decompress((unsigned char *)bufp,\n           (unsigned char *)bufc, &len1,\
    \ 0);\n           (void) fwrite(bufc, 1, len2, stdout);\n           (void) memcpy(bufp,\
    \ bufp+len3-len1, len1);\n       }\n       len2 = decompress((unsigned char *)bufp,\n\
    \       (unsigned char *)bufc, &len1, 1);\n       (void) fwrite(bufc, 1, len2,\
    \ stdout);\n   }\n   int\n   main(ac, av)\n       int ac;\n       char** av;\n\
    \   {\n       char **p = av+1;\n       int dflag = 0;\n       for (; --ac > 0;\
    \ p++) {\n           if (!strcmp(*p, \"-d\"))\n               dflag = 1;\n   \
    \        else if (!strcmp(*p, \"-\"))\n               (dflag?decompress_file:compress_file)(stdin);\n\
    \           else {\n               FILE *f = fopen(*p, \"r\");\n             \
    \  if (!f) {\n                   perror(*p);\n                   exit(1);\n  \
    \             }\n               (dflag?decompress_file:compress_file)(f);\n  \
    \             (void) fclose(f);\n           }\n       }\n       return(0);\n \
    \  }\n"
- title: 3.2.  Encapsulation for Predictor type 1
  contents:
  - "3.2.  Encapsulation for Predictor type 1\n   The correct encapsulation for type\
    \ 1 compression is the protocol\n   type, 1 bit indicating if the data is compressed\
    \ or not, 15 bits of\n   the uncompressed data length in octets, compressed data,\
    \ and\n   uncompressed CRC-16 of the two octets of unsigned length in network\n\
    \   byte order, followed by the original, uncompressed data packet.\n    0   \
    \                1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | CCP Protocol Identifier       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |*| Uncompressed length (octets)|   * is compressed flag\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \   1 means data is compressed\n   | Compressed data...            |   0 means\
    \ data is not compressed\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | CRC - 16\
    \                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The CCP Protocol\
    \ Identifier that starts the packet is always 0xfd.\n   If PPP Protocol field\
    \ compression has not be negotiated, it MUST be a\n   16-bit field.\n   The Compressed\
    \ data is the Protocol Identifier and the Info fields of\n   the original PPP\
    \ packet described in [1], but not the Address,\n   Control, FCS, or Flag.  The\
    \ CCP Protocol field MAY be compressed as\n   described in [1], regardless of\
    \ whether the Protocol field of the CCP\n   Protocol Identifier is compressed\
    \ or whether PPP Protocol field\n   compression has been negotiated.\n   It is\
    \ not required that any of the fields land on an even word\n   boundary - the\
    \ compressed data may be of any length.  If during the\n   decode procedure, the\
    \ CRC-16 does not match the decoded frame, it\n   means that the compress or decompress\
    \ process has become\n   desyncronized.  This will happen as a result of a frame\
    \ being lost in\n   transit if LAPB is not used.  In this case, a new configure-request\n\
    \   must be sent, and the CCP will drop out of the open state.  Upon\n   receipt\
    \ of the configure-ack, the predictor tables are cleared to\n   zero, and compression\
    \ can be resumed without data loss.\n"
- title: 3.3.  Encapsulation for Predictor type 2
  contents:
  - "3.3.  Encapsulation for Predictor type 2\n   The correct encapsulation for type\
    \ 2 compression is the protocol\n   type, followed by the data stream.  Within\
    \ the data stream is the\n   current frame length (uncompressed), compressed data,\
    \ and\n   uncompressed CRC-16 of the two octets of unsigned length in network\n\
    \   byte order, followed by the original, uncompressed data.  The data\n   stream\
    \ may be broken at any convenient place for encapsulation\n   purposes.  With\
    \ type 2 encapsulation, LAPB is almost essential for\n   correct delivery.\n \
    \   0                   1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | CCP Protocol Identifier       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |*| Uncompressed length (octets)|   * is compressed flag\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \   1 means data is compressed\n   | Compressed data...            |   0 means\
    \ data is not compressed\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | CRC-16  \
    \                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |*| Uncompressed\
    \ length (octets)|   * is compressed flag\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            ...\n   The CCP Protocol Identifier that starts the packet is always\
    \ 0xfd.\n   If PPP Protocol field compression has not be negotiated, it MUST be\
    \ a\n   16-bit field.\n   The Compressed data is the Protocol Identifier and the\
    \ Info fields of\n   the original PPP packet described in [1], but not the Address,\n\
    \   Control, FCS, or Flag.  The CCP Protocol field MAY be compressed as\n   described\
    \ in [1], regardless of whether the Protocol field of the CCP\n   Protocol Identifier\
    \ is compressed or whether PPP Protocol field\n   compression\n   It is not required\
    \ that any field land on an even word boundary - the\n   compressed data may be\
    \ of any length.  If during the decode\n   procedure, the CRC-16 does not match\
    \ the decoded frame, it means that\n   the compress or decompress process has\
    \ become desyncronized.  This\n   will happen as a result of a frame being lost\
    \ in transit if LAPB is\n   not used.  In this case, a new configure-request must\
    \ be sent, and\n   the CCP will drop out of the open state.  Upon receipt of the\n\
    \   configure-ack, the predictor tables are cleared to zero, and\n   compression\
    \ can be resumed without data loss.\n"
- title: 4.  Configuration Option Format
  contents:
  - "4.  Configuration Option Format\n   There are no options for Predictor type one\
    \ or two.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - "References\n      [1]   Simpson, W., \"The Point-to-Point Protocol\", STD 51,\
    \ RFC\n            1661, July 1994.\n      [2]   Rand, D., \"The PPP Compression\
    \ Control Protocol (CCP)\",\n            RFC 1962, June 1996.\n      [3]   Rand,\
    \ D., \"PPP Reliable Transmission\", RFC 1663,\n            July 1994.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The predictor algorithm was originally implemented by Timo\
    \ Raita, at\n   the ACM SIG Conference, New Orleans, 1987.\n   Bill Simpson helped\
    \ with the document formatting.\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \   Karl Fox\n   Ascend Communications\n   3518 Riverside Drive, Suite 101\n \
    \  Columbus, Ohio 43221\n   EMail: karl@ascend.com\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Questions about this memo can also be directed to:\n   Dave\
    \ Rand\n   Novell, Inc.\n   2180 Fortune Drive\n   San Jose, CA  95131\n   +1\
    \ 408 321-1259\n   EMail: dave_rand@novell.com\n"
