- contents:
  - '       Multiplexing RTP Data and Control Packets on a Single Port

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This memo discusses issues that arise when multiplexing RTP data\n
    \  packets and RTP Control Protocol (RTCP) packets on a single UDP port.\n   It
    updates RFC 3550 and RFC 3551 to describe when such multiplexing\n   is and is
    not appropriate, and it explains how the Session\n   Description Protocol (SDP)
    can be used to signal multiplexed\n   sessions.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5761.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Background ......................................................3\n   3.
    Terminology .....................................................4\n   4. Distinguishable
    RTP and RTCP Packets ............................4\n   5. Multiplexing RTP and
    RTCP on a Single Port ......................6\n      5.1. Unicast Sessions ...........................................6\n
    \          5.1.1. SDP Signalling ......................................6\n           5.1.2.
    Interactions with SIP Forking .......................7\n           5.1.3. Interactions
    with ICE ...............................7\n           5.1.4. Interactions with
    Header Compression ................8\n      5.2. Any Source Multicast Sessions
    ..............................9\n      5.3. Source-Specific Multicast Sessions
    .........................9\n   6. Multiplexing, Bandwidth, and Quality of Service
    ................10\n   7. Security Considerations ........................................10\n
    \  8. IANA Considerations ............................................11\n   9.
    Acknowledgements ...............................................11\n   10. References
    ....................................................11\n      10.1. Normative
    References .....................................11\n      10.2. Informative References
    ...................................12\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Real-time Transport Protocol (RTP) [1] comprises two
    components:\n   a data transfer protocol and an associated control protocol (RTCP).\n
    \  Historically, RTP and RTCP have been run on separate UDP ports.  With\n   increased
    use of Network Address Port Translation (NAPT) [14], this\n   has become problematic,
    since maintaining multiple NAT bindings can\n   be costly.  It also complicates
    firewall administration, since\n   multiple ports must be opened to allow RTP
    traffic.  This memo\n   discusses how the RTP and RTCP flows for a single media
    type can be\n   run on a single port, to ease NAT traversal and simplify firewall\n
    \  administration, and considers when such multiplexing is appropriate.\n   The
    multiplexing of several types of media (e.g., audio and video)\n   onto a single
    port is not considered here (but see Section 5.2 of\n   [1]).\n   This memo is
    structured as follows: in Section 2 we discuss the\n   design choices that led
    to the use of separate ports and comment on\n   the applicability of those choices
    to current network environments.\n   We discuss terminology in Section 3 and how
    to distinguish\n   multiplexed packets in Section 4; we then specify when and
    how RTP\n   and RTCP should be multiplexed, and how to signal multiplexed\n   sessions,
    in Section 5.  Quality of service and bandwidth issues are\n   discussed in Section
    6.  We conclude with security considerations in\n   Section 7 and IANA considerations
    in Section 8.\n   This memo updates Section 11 of [1].\n"
  title: 1.  Introduction
- contents:
  - "2.  Background\n   An RTP session comprises data packets and periodic control
    (RTCP)\n   packets.  RTCP packets are assumed to use \"the same distribution\n
    \  mechanism as the data packets\", and the \"underlying protocol MUST\n   provide
    multiplexing of the data and control packets, for example\n   using separate port
    numbers with UDP\" [1].  Multiplexing was deferred\n   to the underlying transport
    protocol, rather than being provided\n   within RTP, for the following reasons:\n
    \  1.  Simplicity: an RTP implementation is simplified by moving the RTP\n       and
    RTCP demultiplexing to the transport layer, since it need not\n       concern
    itself with the separation of data and control packets.\n       This allows the
    implementation to be structured in a very natural\n       fashion, with a clean
    separation of data and control planes.\n   2.  Efficiency: following the principle
    of integrated layer\n       processing [15], an implementation will be more efficient
    when\n       demultiplexing happens in a single place (e.g., according to UDP\n
    \      port) than when split across multiple layers of the stack (e.g.,\n       according
    to UDP port and then according to packet type).\n   3.  To enable third-party
    monitors: while unicast voice-over-IP has\n       always been considered, RTP
    was also designed to support loosely\n       coupled multicast conferences [16]
    and very large-scale multicast\n       streaming media applications (such as the
    so-called triple-play\n       IP television (IPTV) service).  Accordingly, the
    design of RTP\n       allows the RTCP packets to be multicast using a separate
    IP\n       multicast group and UDP port to the data packets.  This not only\n
    \      allows participants in a session to get reception-quality\n       feedback
    but also enables deployment of third-party monitors,\n       which listen to reception
    quality without access to the data\n       packets.  This was intended to provide
    manageability of multicast\n       sessions, without compromising privacy.\n   While
    these design choices are appropriate for many uses of RTP, they\n   are problematic
    in some cases.  There are many RTP deployments that\n   don't use IP multicast,
    and with the increased use of Network Address\n   Translation (NAT) the simplicity
    of multiplexing at the transport\n   layer has become a liability, since it requires
    complex signalling to\n   open multiple NAT pinholes.  In environments such as
    these, it is\n   desirable to provide an alternative to demultiplexing RTP and
    RTCP\n   using separate UDP ports, instead using only a single UDP port and\n
    \  demultiplexing within the application.\n   This memo provides such an alternative
    by multiplexing RTP and RTCP\n   packets on a single UDP port, distinguished by
    the RTP payload type\n   and RTCP packet type values.  This pushes some additional
    work onto\n   the RTP implementation, in exchange for simplified NAT traversal.\n"
  title: 2.  Background
- contents:
  - "3.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [2].\n"
  title: 3.  Terminology
- contents:
  - "4.  Distinguishable RTP and RTCP Packets\n   When RTP and RTCP packets are multiplexed
    onto a single port, the\n   RTCP packet type field occupies the same position
    in the packet as\n   the combination of the RTP marker (M) bit and the RTP payload
    type\n   (PT).  This field can be used to distinguish RTP and RTCP packets\n   when
    two restrictions are observed: 1) the RTP payload type values\n   used are distinct
    from the RTCP packet types used; and 2) for each\n   RTP payload type (PT), PT+128
    is distinct from the RTCP packet types\n   used.  The first constraint precludes
    a direct conflict between RTP\n   payload type and RTCP packet type; the second
    constraint precludes a\n   conflict between an RTP data packet with the marker
    bit set and an\n   RTCP packet.\n   The following conflicts between RTP and RTCP
    packet types are known:\n   o  RTP payload types 64-65 conflict with the (obsolete)
    RTCP FIR and\n      NACK packets defined in the original \"RTP Payload Format
    for H.261\n      Video Streams\" [3] (which was obsoleted by [17]).\n   o  RTP
    payload types 72-76 conflict with the RTCP SR, RR, SDES, BYE,\n      and APP packets
    defined in the RTP specification [1].\n   o  RTP payload types 77-78 conflict
    with the RTCP RTPFB and PSFB\n      packets defined in the RTP/AVPF profile [4].\n
    \  o  RTP payload type 79 conflicts with RTCP Extended Report (XR) [5]\n      packets.\n
    \  o  RTP payload type 80 conflicts with Receiver Summary Information\n      (RSI)
    packets defined in \"RTCP Extensions for Single-Source\n      Multicast Sessions
    with Unicast Feedback\" [6].\n   New RTCP packet types may be registered in the
    future and will\n   further reduce the RTP payload types that are available when\n
    \  multiplexing RTP and RTCP onto a single port.  To allow this\n   multiplexing,
    future RTCP packet type assignments SHOULD be made\n   after the current assignments
    in the range 209-223, then in the range\n   194-199, so that only the RTP payload
    types in the range 64-95 are\n   blocked.  RTCP packet types in the ranges 1-191
    and 224-254 SHOULD\n   only be used when other values have been exhausted.\n   Given
    these constraints, it is RECOMMENDED to follow the guidelines\n   in the RTP/AVP
    profile [7] for the choice of RTP payload type values,\n   with the additional
    restriction that payload type values in the range\n   64-95 MUST NOT be used.
    \ Specifically, dynamic RTP payload types\n   SHOULD be chosen in the range 96-127
    where possible.  Values below 64\n   MAY be used if that is insufficient, in which
    case it is RECOMMENDED\n   that payload type numbers that are not statically assigned
    by [7] be\n   used first.\n      Note: Since Section 6.1 of [1] specifies that
    all RTCP packets\n      MUST be sent as compound packets beginning with a Sender
    Report\n      (SR) or a Receiver Report (RR) packet, one might wonder why RTP\n
    \     payload types other than 72 and 73 are prohibited when\n      multiplexing
    RTP and RTCP.  This is done to support [18], which\n      allows the use of non-compound
    RTCP packets in some circumstances.\n"
  title: 4.  Distinguishable RTP and RTCP Packets
- contents:
  - "5.  Multiplexing RTP and RTCP on a Single Port\n   The procedures for multiplexing
    RTP and RTCP on a single port depend\n   on whether the session is a unicast session
    or a multicast session.\n   For multicast sessions, the procedures also depend
    on whether Any\n   Source Multicast (ASM) or Source-Specific Multicast (SSM) is
    to be\n   used.\n"
  - contents:
    - "5.1.  Unicast Sessions\n   It is acceptable to multiplex RTP and RTCP packets
      on a single UDP\n   port to ease NAT traversal for unicast sessions, provided
      the RTP\n   payload types used in the session are chosen according to the rules\n
      \  in Section 4, and provided that multiplexing is signalled in advance.\n   The
      following sections describe how such multiplexed sessions can be\n   signalled
      using the Session Initiation Protocol (SIP) with the offer/\n   answer model.\n"
    - contents:
      - "5.1.1.  SDP Signalling\n   When the Session Description Protocol (SDP) [8]
        is used to negotiate\n   RTP sessions following the offer/answer model [9],
        the \"a=rtcp-mux\"\n   attribute (see Section 8) indicates the desire to multiplex
        RTP and\n   RTCP onto a single port.  The initial SDP offer MUST include this\n
        \  attribute at the media level to request multiplexing of RTP and RTCP\n
        \  on a single port.  For example:\n       v=0\n       o=csp 1153134164 1153134164
        IN IP6 2001:DB8::211:24ff:fea3:7a2e\n       s=-\n       c=IN IP6 2001:DB8::211:24ff:fea3:7a2e\n
        \      t=1153134164 1153137764\n       m=audio 49170 RTP/AVP 97\n       a=rtpmap:97
        iLBC/8000\n       a=rtcp-mux\n   This offer denotes a unicast voice-over-IP
        session using the RTP/AVP\n   profile with iLBC coding.  The answerer is requested
        to send both RTP\n   and RTCP to port 49170 on IPv6 address 2001:DB8::211:24ff:fea3:7a2e.\n
        \  If the answerer wishes to multiplex RTP and RTCP onto a single port,\n
        \  it MUST include a media-level \"a=rtcp-mux\" attribute in the answer.\n
        \  The RTP payload types used in the answer MUST conform to the rules in\n
        \  Section 4.\n   If the answer does not contain an \"a=rtcp-mux\" attribute,
        the offerer\n   MUST NOT multiplex RTP and RTCP packets on a single port.
        \ Instead,\n   it should send and receive RTCP on a port allocated according
        to the\n   usual port-selection rules (either the port pair, or a signalled
        port\n   if the \"a=rtcp:\" attribute [10] is also included).  This will occur\n
        \  when talking to a peer that does not understand the \"a=rtcp-mux\"\n   attribute.\n
        \  When SDP is used in a declarative manner, the presence of an \"a=rtcp-\n
        \  mux\" attribute signals that the sender will multiplex RTP and RTCP on\n
        \  the same port.  The receiver MUST be prepared to receive RTCP packets\n
        \  on the RTP port, and any resource reservation needs to be made\n   including
        the RTCP bandwidth.\n"
      title: 5.1.1.  SDP Signalling
    - contents:
      - "5.1.2.  Interactions with SIP Forking\n   When using SIP with a forking proxy,
        it is possible that an INVITE\n   request may result in multiple 200 (OK)
        responses.  If RTP and RTCP\n   multiplexing is offered in that INVITE, it
        is important to be aware\n   that some answerers may support multiplexed RTP
        and RTCP, some not.\n   This will require the offerer to listen for RTCP on
        both the RTP port\n   and the usual RTCP port, and to send RTCP on both ports,
        unless\n   branches of the call that support multiplexing are re-negotiated
        to\n   use separate RTP and RTCP ports.\n"
      title: 5.1.2.  Interactions with SIP Forking
    - contents:
      - "5.1.3.  Interactions with ICE\n   It is common to use the Interactive Connectivity
        Establishment (ICE)\n   [19] methodology to establish RTP sessions in the
        presence of Network\n   Address Translation (NAT) devices or other middleboxes.
        \ If RTP and\n   RTCP are sent on separate ports, the RTP media stream comprises
        two\n   components in ICE (one for RTP and one for RTCP), with connectivity\n
        \  checks being performed for each component.  If RTP and RTCP are to be\n
        \  multiplexed on the same port some of these connectivity checks can be\n
        \  avoided, reducing the overhead of ICE.\n   If it is desired to use both
        ICE and multiplexed RTP and RTCP, the\n   initial offer MUST contain an \"a=rtcp-mux\"
        attribute to indicate that\n   RTP and RTCP multiplexing is desired and MUST
        contain \"a=candidate:\"\n   lines for both RTP and RTCP along with an \"a=rtcp:\"
        line indicating a\n   fallback port for RTCP in the case that the answerer
        does not support\n   RTP and RTCP multiplexing.  This MUST be done for each
        media where\n   RTP and RTCP multiplexing is desired.\n   If the answerer
        wishes to multiplex RTP and RTCP on a single port, it\n   MUST generate an
        answer containing an \"a=rtcp-mux\" attribute and a\n   single \"a=candidate:\"
        line corresponding to the RTP port (i.e., there\n   is no candidate for RTCP)
        for each media where it is desired to use\n   RTP and RTCP multiplexing.  The
        answerer then performs connectivity\n   checks for that media as if the offer
        had contained only a single\n   candidate for RTP.  If the answerer does not
        want to multiplex RTP\n   and RTCP on a single port, it MUST NOT include the
        \"a=rtcp-mux\"\n   attribute in its answer and MUST perform connectivity checks
        for all\n   offered candidates in the usual manner.\n   On receipt of the
        answer, the offerer looks for the presence of the\n   \"a=rtcp-mux\" line
        for each media where multiplexing was offered.  If\n   this is present, then
        connectivity checks proceed as if only a single\n   candidate (for RTP) were
        offered, and multiplexing is used once the\n   session is established.  If
        the \"a=rtcp-mux\" line is not present, the\n   session proceeds with connectivity
        checks using both RTP and RTCP\n   candidates, eventually leading to a session
        being established with\n   RTP and RTCP on separate ports (as signalled by
        the \"a=rtcp:\"\n   attribute).\n"
      title: 5.1.3.  Interactions with ICE
    - contents:
      - "5.1.4.  Interactions with Header Compression\n   Multiplexing RTP and RTCP
        packets onto a single port may negatively\n   impact header compression schemes,
        for example, Compressed RTP (CRTP)\n   [20] and RObust Header Compression
        (ROHC) [21] [22].  Header\n   compression exploits patterns of change in the
        RTP headers of\n   consecutive packets to send an indication that the packet
        changed in\n   the expected way, rather than sending the complete header each
        time.\n   This can lead to significant bandwidth savings if flows have uniform\n
        \  behaviour.\n   The presence of RTCP packets multiplexed with RTP data packets
        can\n   disrupt the patterns of change between headers and has the potential\n
        \  to significantly reduce header compression efficiency.  The extent of\n
        \  this disruption depends on the header compression algorithm used and\n
        \  on the way flows are classified.  A well-designed classifier should\n   be
        able to separate RTP and RTCP multiplexed on the same port into\n   different
        compression contexts, using the payload type field, such\n   that the effect
        on the compression ratio is small.  A classifier that\n   assigns compression
        contexts based only on the IP addresses and UDP\n   ports will not perform
        well.  It is expected that implementations of\n   header compression will
        need to be updated to efficiently support RTP\n   and RTCP multiplexed on
        the same port.\n   This effect of multiplexing RTP and RTCP on header compression
        may be\n   especially significant in those environments, such as some wireless\n
        \  telephony systems, that rely on the efficiency of header compression\n
        \  to match the media to a limited-capacity channel.  The implications\n   of
        multiplexing RTP and RTCP should be carefully considered before\n   use in
        such environments.\n"
      title: 5.1.4.  Interactions with Header Compression
    title: 5.1.  Unicast Sessions
  - contents:
    - "5.2.  Any Source Multicast Sessions\n   The problem of NAT traversal is less
      severe for Any Source Multicast\n   (ASM) RTP sessions than for unicast RTP
      sessions, and the benefit of\n   using separate ports for RTP and RTCP is greater
      due to the ability\n   to support third-party RTCP-only monitors.  Accordingly,
      RTP and RTCP\n   packets SHOULD NOT be multiplexed onto a single port when using
      ASM\n   RTP sessions and SHOULD instead use separate ports and multicast\n   groups.\n"
    title: 5.2.  Any Source Multicast Sessions
  - contents:
    - "5.3.  Source-Specific Multicast Sessions\n   RTP sessions running over Source-Specific
      Multicast (SSM) send RTCP\n   packets from the source to receivers via the multicast
      channel, but\n   use a separate unicast feedback mechanism [6] to send RTCP
      from the\n   receivers back to the source, with the source either reflecting
      the\n   RTCP packets to the group or sending aggregate summary reports.\n   Following
      the terminology of [6], we identify three RTP/RTCP flows in\n   an SSM session:\n
      \  1.  RTP and RTCP flows between media sender and distribution source.\n       In
      many scenarios, the media sender and distribution source are\n       co-located,
      so multiplexing is not a concern.  If the media\n       sender and distribution
      source are connected by a unicast\n       connection, the rules in Section 5.1
      of this memo apply to that\n       connection.  If the media sender and distribution
      source are\n       connected by an Any Source Multicast connection, the rules
      in\n       Section 5.2 apply to that connection.  If the media sender and\n
      \      distribution source are connected by a Source-Specific Multicast\n       connection,
      the RTP and RTCP packets MAY be multiplexed on a\n       single port, provided
      this is signalled (using \"a=rtcp-mux\" if\n       using SDP).\n   2.  RTP and
      RTCP sent from the distribution source to the receivers.\n       The distribution
      source MAY multiplex RTP and RTCP onto a single\n       port to ease NAT traversal
      issues on the forward SSM path,\n       although doing so may hinder third-party
      monitoring devices if\n       the session uses the simple feedback model.  When
      using SDP, the\n       multiplexing SHOULD be signalled using the \"a=rtcp-mux\"\n
      \      attribute.\n   3.  RTCP sent from receivers to distribution source.  This
      is an\n       RTCP-only path, so multiplexing is not a concern.\n   Multiplexing
      RTP and RTCP packets on a single port in an SSM session\n   has the potential
      for interactions with header compression described\n   in Section 5.1.4.\n"
    title: 5.3.  Source-Specific Multicast Sessions
  title: 5.  Multiplexing RTP and RTCP on a Single Port
- contents:
  - "6.  Multiplexing, Bandwidth, and Quality of Service\n   Multiplexing RTP and
    RTCP has implications on the use of the Quality\n   of Service (QoS) mechanism
    that handles flow that are determined by a\n   three or five tuple (protocol,
    port, and address for source and/or\n   destination).  In these cases, the RTCP
    flow will be merged with the\n   RTP flow when multiplexing them together.  Thus,
    the RTCP bandwidth\n   requirement needs to be considered when doing QoS reservations
    for\n   the combined RTP and RTCP flow.  However, from an RTCP perspective it\n
    \  is beneficial to receive the same treatment of RTCP packets as for\n   RTP
    as it provides more accurate statistics for the measurements\n   performed by
    RTCP.\n   The bandwidth required for a multiplexed stream comprises the session\n
    \  bandwidth of the RTP stream plus the bandwidth used by RTCP.  In the\n   usual
    case, the RTP session bandwidth is signalled in the SDP \"b=AS:\"\n   (or \"b=TIAS:\"
    [11]) line, and the RTCP traffic is limited to 5% of\n   this value.  Any QoS
    reservation SHOULD therefore be made for 105% of\n   the \"b=AS:\" value.  If
    a non-standard RTCP bandwidth fraction is\n   used, signalled by the SDP \"b=RR:\"
    and/or \"b=RS:\" lines [12], then\n   any QoS reservation SHOULD be made for bandwidth
    equal to (AS + RS +\n   RR), taking the RS and RR values from the SDP answer.\n"
  title: 6.  Multiplexing, Bandwidth, and Quality of Service
- contents:
  - "7.  Security Considerations\n   The usage of multiplexing RTP and RTCP is not
    believed to introduce\n   any new security considerations.  Known major issues
    are the\n   integrity and authentication of the signalling used to set up the\n
    \  multiplexing as well as the integrity, authentication, and\n   confidentiality
    of the actual RTP and RTCP traffic.  The security\n   considerations in the RTP
    specification [1] and any applicable RTP\n   profile (e.g., [7]) and payload format(s)
    apply.\n   If the Secure Real-time Transport Protocol (SRTP) [13] is to be used\n
    \  in conjunction with multiplexed RTP and RTCP, then multiplexing MUST\n   be
    done below the SRTP layer.  The sender generates SRTP and SRTCP\n   packets in
    the usual manner, based on their separate cryptographic\n   contexts, and multiplexes
    them onto a single port immediately before\n   transmission.  At the receiver,
    the cryptographic context is derived\n   from the synchronization source (SSRC),
    destination network address,\n   and destination transport port number in the
    usual manner, augmented\n   using the RTP payload type and RTCP packet type to
    demultiplex SRTP\n   and SRTCP according to the rules in Section 4 of this memo.
    \ After\n   the SRTP and SRTCP packets have been demultiplexed, cryptographic\n
    \  processing happens in the usual manner.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   Following the guidelines in [8], the IANA has registered
    one new SDP\n   attribute:\n   o  Contact name/email: authors of RFC 5761\n   o
    \ Attribute name: rtcp-mux\n   o  Long-form attribute name: RTP and RTCP multiplexed
    on one port\n   o  Type of attribute: media level\n   o  Subject to charset: no\n
    \  This attribute is used to signal that RTP and RTCP traffic should be\n   multiplexed
    on a single port (see Section 5 of this memo).  It is a\n   property attribute,
    which does not take a value.\n   The rules for assignment of RTP RTCP Control
    Packet Types in the RTP\n   Parameters registry are updated as follows.  When
    assigning RTP RTCP\n   Control Packet types, IANA is requested to assign unused
    values from\n   the range 200-223 where possible.  If that range is fully occupied,\n
    \  values from the range 194-199 may be used, and then values from the\n   ranges
    1-191 and 224-254.  This improves header validity checking of\n   RTCP packets
    compared to RTP packets or other unrelated packets.  The\n   values 0 and 255
    are avoided for improved validity checking relative\n   to random packets since
    all-zeros and all-ones are common values.\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Acknowledgements\n   We wish to thank Steve Casner, Joerg Ott, Christer Holmberg,
    Gunnar\n   Hellstrom, Randell Jesup, Hadriel Kaplan, Harikishan Desineni,\n   Stephan
    Wenger, Jonathan Rosenberg, Roni Even, Ingemar Johansson,\n   Dave Singer, Kevin
    Johns, and David Black for their comments on this\n   memo.  This work was supported
    in part by the UK Engineering and\n   Physical Sciences Research Council.\n"
  title: 9.  Acknowledgements
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [1]   Schulzrinne, H., Casner, S., Frederick,
      R., and V. Jacobson,\n         \"RTP: A Transport Protocol for Real-Time Applications\",
      STD 64,\n         RFC 3550, July 2003.\n   [2]   Bradner, S., \"Key words for
      use in RFCs to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March
      1997.\n   [3]   Turletti, T., \"RTP Payload Format for H.261 Video Streams\",\n
      \        RFC 2032, October 1996.\n   [4]   Ott, J., Wenger, S., Sato, N., Burmeister,
      C., and J. Rey,\n         \"Extended RTP Profile for Real-time Transport Control
      Protocol\n         (RTCP)-Based Feedback (RTP/AVPF)\", RFC 4585, July 2006.\n
      \  [5]   Friedman, T., Caceres, R., and A. Clark, \"RTP Control Protocol\n         Extended
      Reports (RTCP XR)\", RFC 3611, November 2003.\n   [6]   Ott, J., Chesterfield,
      J., and E. Schooler, \"RTP Control\n         Protocol (RTCP) Extensions for
      Single-Source Multicast Sessions\n         with Unicast Feedback\", RFC 5760,
      February 2010.\n   [7]   Schulzrinne, H. and S. Casner, \"RTP Profile for Audio
      and Video\n         Conferences with Minimal Control\", STD 65, RFC 3551, July
      2003.\n   [8]   Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n
      \        Description Protocol\", RFC 4566, July 2006.\n   [9]   Rosenberg, J.
      and H. Schulzrinne, \"An Offer/Answer Model with\n         Session Description
      Protocol (SDP)\", RFC 3264, June 2002.\n   [10]  Huitema, C., \"Real Time Control
      Protocol (RTCP) attribute in\n         Session Description Protocol (SDP)\",
      RFC 3605, October 2003.\n   [11]  Westerlund, M., \"A Transport Independent
      Bandwidth Modifier for\n         the Session Description Protocol (SDP)\", RFC
      3890,\n         September 2004.\n   [12]  Casner, S., \"Session Description
      Protocol (SDP) Bandwidth\n         Modifiers for RTP Control Protocol (RTCP)
      Bandwidth\", RFC 3556,\n         July 2003.\n   [13]  Baugher, M., McGrew, D.,
      Naslund, M., Carrara, E., and K.\n         Norrman, \"The Secure Real-time Transport
      Protocol (SRTP)\",\n         RFC 3711, March 2004.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [14]  Srisuresh, P. and K. Egevang, \"Traditional
      IP Network Address\n         Translator (Traditional NAT)\", RFC 3022, January
      2001.\n   [15]  Clark, D. and D. Tennenhouse, \"Architectural Considerations
      for\n         a New Generation of Protocols\", Proceedings of ACM\n         SIGCOMM
      1990, September 1990.\n   [16]  Casner, S. and S. Deering, \"First IETF Internet
      Audiocast\", ACM\n         SIGCOMM Computer Communication Review, Volume 22,
      Number 3,\n         July 1992.\n   [17]  Even, R., \"RTP Payload Format for
      H.261 Video Streams\",\n         RFC 4587, August 2006.\n   [18]  Johansson,
      I. and M. Westerlund, \"Support for Reduced-Size\n         Real-Time Transport
      Control Protocol (RTCP): Opportunities and\n         Consequences\", RFC 5506,
      April 2009.\n   [19]  Rosenberg, J., \"Interactive Connectivity Establishment
      (ICE): A\n         Protocol for Network Address Translator (NAT) Traversal for\n
      \        Offer/Answer Protocols\", RFC 5245, April 2010.\n   [20]  Casner, S.
      and V. Jacobson, \"Compressing IP/UDP/RTP Headers for\n         Low-Speed Serial
      Links\", RFC 2508, February 1999.\n   [21]  Bormann, C., Burmeister, C., Degermark,
      M., Fukushima, H.,\n         Hannu, H., Jonsson, L-E., Hakenberg, R., Koren,
      T., Le, K.,\n         Liu, Z., Martensson, A., Miyazaki, A., Svanbro, K., Wiebke,
      T.,\n         Yoshimura, T., and H. Zheng, \"RObust Header Compression (ROHC):\n
      \        Framework and four profiles: RTP, UDP, ESP, and uncompressed\",\n         RFC
      3095, July 2001.\n   [22]  Sandlund, K., Pelletier, G., and L-E. Jonsson, \"The
      RObust\n         Header Compression (ROHC) Framework\", RFC 5795, March 2010.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Authors' Addresses\n   Colin Perkins\n   University of Glasgow\n   Department
    of Computing Science\n   Glasgow  G12 8QQ\n   UK\n   EMail: csp@csperkins.org\n
    \  Magnus Westerlund\n   Ericsson\n   Farogatan 6\n   Stockholm  SE-164 80\n   Sweden\n
    \  EMail: magnus.westerlund@ericsson.com\n"
  title: Authors' Addresses
