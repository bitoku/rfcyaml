- contents:
  - '          A Remote Direct Memory Access Protocol Specification

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This document defines a Remote Direct Memory Access Protocol (RDMAP)\n
    \  that operates over the Direct Data Placement Protocol (DDP protocol).\n   RDMAP
    provides read and write services directly to applications and\n   enables data
    to be transferred directly into Upper Layer Protocol\n   (ULP) Buffers without
    intermediate data copies.  It also enables a\n   kernel bypass implementation.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. Architectural Goals ........................................4\n      1.2.
    Protocol Overview ..........................................5\n      1.3. RDMAP
    Layering .............................................7\n   2. Glossary ........................................................8\n
    \     2.1. General ....................................................8\n      2.2.
    LLP .......................................................10\n      2.3. Direct
    Data Placement (DDP) ...............................11\n      2.4. Remote Direct
    Memory Access (RDMA) ........................13\n   3. ULP and Transport Attributes
    ...................................15\n      3.1. Transport Requirements and Assumptions
    ....................15\n      3.2. RDMAP Interactions with the ULP ...........................16\n
    \  4. Header Format ..................................................19\n      4.1.
    RDMAP Control and Invalidate STag Field ...................20\n      4.2. RDMA
    Message Definitions ..................................23\n      4.3. RDMA Write
    Header .........................................24\n      4.4. RDMA Read Request
    Header ..................................24\n      4.5. RDMA Read Response Header
    .................................26\n      4.6. Send Header and Send with Solicited
    Event Header ..........26\n      4.7. Send with Invalidate Header and Send with
    SE and\n           Invalidate Header .........................................26\n
    \     4.8. Terminate Header ..........................................26\n   5.
    Data Transfer ..................................................32\n      5.1.
    RDMA Write Message ........................................32\n      5.2. RDMA
    Read Operation .......................................33\n           5.2.1. RDMA
    Read Request Message ..........................33\n           5.2.2. RDMA Read
    Response Message .........................35\n      5.3. Send Message Type .........................................36\n
    \     5.4. Terminate Message .........................................37\n      5.5.
    Ordering and Completions ..................................38\n   6. RDMAP Stream
    Management ........................................41\n      6.1. Stream Initialization
    .....................................41\n      6.2. Stream Teardown ...........................................42\n
    \          6.2.1. RDMAP Abortive Termination .........................43\n   7.
    RDMAP Error Management .........................................43\n      7.1.
    RDMAP Error Surfacing .....................................44\n      7.2. Errors
    Detected at the Remote Peer on Incoming\n           RDMA Messages .............................................45\n
    \  8. Security Considerations ........................................46\n      8.1.
    Summary of RDMAP-Specific Security Requirements ...........46\n           8.1.1.
    RDMAP (RNIC) Requirements ..........................47\n           8.1.2. Privileged
    Resource Manager Requirements ...........48\n      8.2. Security Services for
    RDMAP ...............................49\n           8.2.1. Available Security
    Services ........................49\n           8.2.2. Requirements for IPsec
    Services for RDMAP ..........50\n   9. IANA Considerations ............................................51\n
    \  10. References ....................................................52\n      10.1.
    Normative References .....................................52\n      10.2. Informative
    References ...................................53\n   Appendix A. DDP Segment Formats
    for RDMA Messages .................54\n      A.1. DDP Segment for RDMA Write ................................54\n
    \     A.2. DDP Segment for RDMA Read Request .........................55\n      A.3.
    DDP Segment for RDMA Read Response ........................56\n      A.4. DDP
    Segment for Send and Send with Solicited Event ........56\n      A.5. DDP Segment
    for Send with Invalidate and Send with SE and\n           Invalidate ................................................57\n
    \     A.6. DDP Segment for Terminate .................................58\n   Appendix
    B. Ordering and Completion Table .........................59\n   Appendix C. Contributors
    ..........................................61\n"
  title: Table of Contents
- contents:
  - "Table of Figures\n   Figure 1: RDMAP Layering ...........................................7\n
    \  Figure 2: Example of MPA, DDP, and RDMAP Header Alignment over TCP .8\n   Figure
    3: DDP Control, RDMAP Control, and Invalidate STag Fields ..20\n   Figure 4: RDMA
    Usage of DDP Fields ................................22\n   Figure 5: RDMA Message
    Definitions ................................23\n   Figure 6: RDMA Read Request
    Header Format .........................24\n   Figure 7: Terminate Header Format
    .................................27\n   Figure 8: Terminate Control Field .................................27\n
    \  Figure 9: Terminate Control Field Values ..........................29\n   Figure
    10: Error Type to RDMA Message Mapping .....................32\n   Figure 11:
    RDMA Write, DDP Segment Format .........................54\n   Figure 12: RDMA
    Read Request, DDP Segment Format ..................55\n   Figure 13: RDMA Read
    Response, DDP Segment Format .................56\n   Figure 14: Send and Send
    with Solicited Event, DDP Segment Format .56\n   Figure 15: Send with Invalidate
    and Send with SE and Invalidate,\n              DDP Segment Format .....................................57\n
    \  Figure 16: Terminate, DDP Segment Format ..........................58\n   Figure
    17: Operation Ordering .....................................59\n"
  title: Table of Figures
- contents:
  - "1.  Introduction\n   Today, communications over TCP/IP typically require copy
    operations,\n   which add latency and consume significant CPU and memory resources.\n
    \  The Remote Direct Memory Access Protocol (RDMAP) enables removal of\n   data
    copy operations and enables reduction in latencies by allowing a\n   local application
    to read or write data on a remote computer's memory\n   with minimal demands on
    memory bus bandwidth and CPU processing\n   overhead, while preserving memory
    protection semantics.\n   RDMAP is layered on top of Direct Data Placement (DDP)
    and uses the\n   two buffer models available from DDP.  DDP-related terminology
    is\n   discussed in Section 2.3.  As RDMAP builds on DDP, the reader is\n   advised
    to become familiar with [DDP].\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
    2119 [RFC2119].\n"
  - contents:
    - "1.1.  Architectural Goals\n   RDMAP has been designed with the following high-level
      architectural\n   goals:\n   *  Provide a data transfer operation that allows
      a Local Peer to\n      transfer up to 2^32 - 1 octets directly into a previously\n
      \     Advertised Buffer (i.e., Tagged Buffer) located at a Remote Peer\n      without
      requiring a copy operation.  This is referred to as the\n      RDMA Write data
      transfer operation.\n   *  Provide a data transfer operation that allows a Local
      Peer to\n      retrieve up to 2^32 - 1 octets directly from a previously\n      Advertised
      Buffer (i.e., Tagged Buffer) located at a Remote Peer\n      without requiring
      a copy operation.  This is referred to as the\n      RDMA Read data transfer
      operation.\n   *  Provide a data transfer operation that allows a Local Peer
      to send\n      up to 2^32 - 1 octets directly into a buffer located at a Remote\n
      \     Peer that has not been explicitly Advertised.  This is referred to\n      as
      the Send (Send with Invalidate, Send with Solicited Event, and\n      Send with
      Solicited Event and Invalidate) data transfer operation.\n   *  Enable the local
      ULP to use the Send Operation Type (includes\n      Send, Send with Invalidate,
      Send with Solicited Event, and Send\n      with Solicited Event and Invalidate)
      to signal to the remote ULP\n      the Completion of all previous Messages initiated
      by the local\n      ULP.\n   *  Provide for all operations on a single RDMAP
      Stream to be reliably\n      transmitted in the order that they were submitted.\n
      \  *  Provide RDMAP capabilities independently for each Stream when the\n      LLP
      supports multiple data Streams within an LLP connection.\n"
    title: 1.1.  Architectural Goals
  - contents:
    - "1.2.  Protocol Overview\n   RDMAP provides seven data transfer operations.
      \ Except for the RDMA\n   Read operation, each operation generates exactly one
      RDMA Message.\n   Following is a brief overview of the RDMA Operations and RDMA\n
      \  Messages:\n   1.  Send - A Send operation uses a Send Message to transfer
      data from\n       the Data Source into a buffer that has not been explicitly\n
      \      Advertised by the Data Sink.  The Send Message uses the DDP\n       Untagged
      Buffer Model to transfer the ULP Message into the Data\n       Sink's Untagged
      Buffer.\n   2.  Send with Invalidate - A Send with Invalidate operation uses
      a\n       Send with Invalidate Message to transfer data from the Data\n       Source
      into a buffer that has not been explicitly Advertised by\n       the Data Sink.
      \ The Send with Invalidate Message includes all\n       functionality of the
      Send Message, with one addition: an STag\n       field is included in the Send
      with Invalidate Message.  After the\n       message has been Placed and Delivered
      at the Data Sink, the\n       Remote Peer's buffer identified by the STag can
      no longer be\n       accessed remotely until the Remote Peer's ULP re-enables
      access\n       and Advertises the buffer.\n   3.  Send with Solicited Event
      (Send with SE) - A Send with Solicited\n       Event operation uses a Send with
      Solicited Event Message to\n       transfer data from the Data Source into an
      Untagged Buffer at the\n       Data Sink.  The Send with Solicited Event Message
      is similar to\n       the Send Message, with one addition: when the Send with
      Solicited\n       Event Message has been Placed and Delivered, an Event may
      be\n       generated at the recipient, if the recipient is configured to\n       generate
      such an Event.\n   4.  Send with Solicited Event and Invalidate (Send with SE
      and\n       Invalidate) - A Send with Solicited Event and Invalidate\n       operation
      uses a Send with Solicited Event and Invalidate Message\n       to transfer
      data from the Data Source into a buffer that has not\n       been explicitly
      Advertised by the Data Sink.  The Send with\n       Solicited Event and Invalidate
      Message is similar to the Send\n       with Invalidate Message, with one addition:
      when the Send with\n       Solicited Event and Invalidate Message has been Placed
      and\n       Delivered, an Event may be generated at the recipient, if the\n
      \      recipient is configured to generate such an Event.\n   5.  Remote Direct
      Memory Access Write - An RDMA Write operation uses\n       an RDMA Write Message
      to transfer data from the Data Source to a\n       previously Advertised Buffer
      at the Data Sink.\n       The ULP at the Remote Peer, which in this case is
      the Data Sink,\n       enables the Data Sink Tagged Buffer for access and Advertises
      the\n       buffer's size (length), location (Tagged Offset), and Steering\n
      \      Tag (STag) to the Data Source through a ULP-specific mechanism.\n       The
      ULP at the Local Peer, which in this case is the Data Source,\n       initiates
      the RDMA Write operation.  The RDMA Write Message uses\n       the DDP Tagged
      Buffer Model to transfer the ULP Message into the\n       Data Sink's Tagged
      Buffer.  Note: the STag associated with the\n       Tagged Buffer remains valid
      until the ULP at the Remote Peer\n       invalidates it or the ULP at the Local
      Peer invalidates it\n       through a Send with Invalidate or Send with Solicited
      Event and\n       Invalidate.\n   6.  Remote Direct Memory Access Read - The
      RDMA Read operation\n       transfers data to a Tagged Buffer at the Local Peer,
      which in\n       this case is the Data Sink, from a Tagged Buffer at the Remote\n
      \      Peer, which in this case is the Data Source.  The ULP at the Data\n       Source
      enables the Data Source Tagged Buffer for access and\n       Advertises the
      buffer's size (length), location (Tagged Offset),\n       and Steering Tag (STag)
      to the Data Sink through a ULP-specific\n       mechanism.  The ULP at the Data
      Sink enables the Data Sink Tagged\n       Buffer for access and initiates the
      RDMA Read operation.  The\n       RDMA Read operation consists of a single RDMA
      Read Request\n       Message and a single RDMA Read Response Message, and the
      latter\n       may be segmented into multiple DDP Segments.\n       The RDMA
      Read Request Message uses the DDP Untagged Buffer Model\n       to Deliver the
      STag, starting Tagged Offset, and length for both\n       the Data Source and
      Data Sink Tagged Buffers to the Remote Peer's\n       RDMA Read Request Queue.\n
      \      The RDMA Read Response Message uses the DDP Tagged Buffer Model\n       to
      Deliver the Data Source's Tagged Buffer to the Data Sink,\n       without any
      involvement from the ULP at the Data Source.\n       Note: the Data Source STag
      associated with the Tagged Buffer\n       remains valid until the ULP at the
      Data Source invalidates it or\n       the ULP at the Data Sink invalidates it
      through a Send with\n       Invalidate or Send with Solicited Event and Invalidate.
      \ The Data\n       Sink STag associated with the Tagged Buffer remains valid
      until\n       the ULP at the Data Sink invalidates it.\n   7.  Terminate - A
      Terminate operation uses a Terminate Message to\n       transfer to the Remote
      Peer information associated with an error\n       that occurred at the Local
      Peer.  The Terminate Message uses the\n       DDP Untagged Buffer Model to transfer
      the Message into the Data\n       Sink's Untagged Buffer.\n"
    title: 1.2.  Protocol Overview
  - contents:
    - "1.3.  RDMAP Layering\n   RDMAP is dependent on DDP, subject to the requirements
      defined in\n   Section 3.1, \"Transport Requirements and Assumptions\".  Figure
      1,\n   \"RDMAP Layering\", depicts the relationship between Upper Layer\n   Protocols
      (ULPs), RDMAP, DDP protocol, the framing layer, and the\n   transport.  For
      LLP protocol definitions of each LLP, see [MPA],\n   [TCP], and [SCTP].\n                 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                |                                     |\n                 |
      \    Upper Layer Protocol (ULP)      |\n                 |                                     |\n
      \                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                 |
      \                                    |\n                 |              RDMAP
      \                 |\n                 |                                     |\n
      \                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                 |
      \                                    |\n                 |           DDP protocol
      \             |\n                 |                                     |\n
      \                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                 |
      \                |                   |\n                 |       MPA       |
      \                  |\n                 |                 |                   |\n
      \                +-+-+-+-+-+-+-+-+-+       SCTP        |\n                 |
      \                |                   |\n                 |       TCP       |
      \                  |\n                 |                 |                   |\n
      \                +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                       Figure
      1: RDMAP Layering\n   If RDMAP is layered over DDP/MPA/TCP, then the respective
      headers and\n   ULP Payload are arranged as follows (Note: For clarity, MPA
      header\n   and CRC fields are included but MPA markers are not shown):\n     0
      \                  1                   2                   3\n     0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                                                               |\n    //
      \                          TCP Header                        //\n    |                                                               |\n
      \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |
      \        MPA Header            |                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              +\n    |                                                               |\n
      \   //                        DDP Header                           //\n    |
      \                                                              |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                                                               |\n    //
      \                       RDMA Header                          //\n    |                                                               |\n
      \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |
      \                                                              |\n    //                        ULP
      Payload                          //\n    //                 (shown with no pad
      bytes)                   //\n    //                                                             //\n
      \   |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                           MPA CRC                             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Figure 2: Example of MPA, DDP, and RDMAP Header Alignment over TCP\n"
    title: 1.3.  RDMAP Layering
  title: 1.  Introduction
- contents:
  - '2.  Glossary

    '
  - contents:
    - "2.1.  General\n   Advertisement (Advertised, Advertise, Advertisements, Advertises)
      -\n       the act of informing a Remote Peer that a local RDMA Buffer is\n       available
      to it.  A Node makes available an RDMA Buffer for\n       incoming RDMA Read
      or RDMA Write access by informing its RDMA/DDP\n       peer of the Tagged Buffer
      identifiers (STag, base address, and\n       buffer length).  This Advertisement
      of Tagged Buffer information\n       is not defined by RDMA/DDP and is left
      to the ULP.  A typical\n       method would be for the Local Peer to embed the
      Tagged Buffer's\n       Steering Tag, base address, and length in a Send Message
      destined\n       for the Remote Peer.\n   Completion - Refer to \"RDMA Completion\"
      in Section 2.4.\n   Completed - See \"RDMA Completion\" in Section 2.4.\n   Complete
      - See \"RDMA Completion\" in Section 2.4.\n   Completes - See \"RDMA Completion\"
      in Section 2.4.\n   Data Sink - The peer receiving a data payload.  Note that
      the Data\n       Sink can be required to both send and receive RDMA/DDP Messages\n
      \      to transfer a data payload.\n   Data Source - The peer sending a data
      payload.  Note that the Data\n       Source can be required to both send and
      receive RDMA/DDP Messages\n       to transfer a data payload.\n   Data Delivery
      (Delivery, Delivered, Delivers) - Delivery is defined\n       as the process
      of informing the ULP or consumer that a particular\n       Message is available
      for use.  This is specifically different\n       from \"Placement\", which may
      generally occur in any order, while\n       the order of \"Delivery\" is strictly
      defined.  See \"Data\n       Placement\" in Section 2.3.\n   Delivery - See
      Data Delivery in Section 2.1.\n   Delivered - See Data Delivery in Section 2.1.\n
      \  Delivers - See Data Delivery in Section 2.1.\n   Fabric - The collection
      of links, switches, and routers that connect\n       a set of Nodes with RDMA/DDP
      protocol implementations.\n   Fence (Fenced, Fences) - To block the current
      RDMA Operation from\n       executing until prior RDMA Operations have Completed.\n
      \  iWARP - A suite of wire protocols comprised of RDMAP, DDP, and MPA.\n       The
      iWARP protocol suite may be layered above TCP, SCTP, or other\n       transport
      protocols.\n   Local Peer - The RDMA/DDP protocol implementation on the local
      end of\n       the connection.  Used to refer to the local entity when\n       describing
      a protocol exchange or other interaction between two\n       Nodes.\n   Node
      - A computing device attached to one or more links of a Fabric\n       (network).
      \ A Node in this context does not refer to a specific\n       application or
      protocol instantiation running on the computer.  A\n       Node may consist
      of one or more RNICs installed in a host\n       computer.\n   Placement - See
      \"Data Placement\" in Section 2.3.\n   Placed - See \"Data Placement\" in Section
      2.3.\n   Places - See \"Data Placement\" in Section 2.3.\n   Remote Peer - The
      RDMA/DDP protocol implementation on the opposite\n       end of the connection.
      \ Used to refer to the remote entity when\n       describing protocol exchanges
      or other interactions between two\n       Nodes.\n   RNIC - RDMA Network Interface
      Controller.  In this context, this\n       would be a network I/O adapter or
      embedded controller with iWARP\n       and Verbs functionality.\n   RNIC Interface
      (RI) - The presentation of the RNIC to the Verbs\n       Consumer as implemented
      through the combination of the RNIC and\n       the RNIC driver.\n   Termination
      - See \"RDMAP Abortive Termination\" in Section 2.4.\n   Terminated - See \"RDMAP
      Abortive Termination\" in Section 2.4.\n   Terminate - See \"RDMAP Abortive
      Termination\" in Section 2.4.\n   Terminates - See \"RDMAP Abortive Termination\"
      in Section 2.4.\n   ULP - Upper Layer Protocol.  The protocol layer above the
      one\n       currently being referenced.  The ULP for RDMA/DDP is expected to\n
      \      be an OS, Application, adaptation layer, or proprietary device.\n       The
      RDMA/DDP documents do not specify a ULP -- they provide a set\n       of semantics
      that allow a ULP to be designed to utilize RDMA/DDP.\n   ULP Payload - The ULP
      data that is contained within a single protocol\n       segment or packet (e.g.,
      a DDP Segment).\n   Verbs - An abstract description of the functionality of
      an RNIC\n       Interface.  The OS may expose some or all of this functionality\n
      \      via one or more APIs to applications.  The OS will also use some\n       of
      the functionality to manage the RNIC Interface.\n"
    title: 2.1.  General
  - contents:
    - "2.2.  LLP\n   LLP - Lower Layer Protocol.  The protocol layer beneath the protocol\n
      \      layer currently being referenced.  For example, for DDP, the LLP\n       is
      SCTP, MPA, or other transport protocols.  For RDMA, the LLP is\n       DDP.\n
      \  LLP Connection - Corresponds to an LLP transport-level connection\n       between
      the peer LLP layers on two Nodes.\n   LLP Stream - Corresponds to a single LLP
      transport-level Stream\n       between the peer LLP layers on two Nodes.  One
      or more LLP\n       Streams may map to a single transport-level LLP connection.
      \ For\n       transport protocols that support multiple Streams per connection\n
      \      (e.g., SCTP), an LLP Stream corresponds to one transport-level\n       Stream.\n
      \  MULPDU - Maximum ULPDU.  The current maximum size of the record that\n       is
      acceptable for DDP to pass to the LLP for transmission.\n   ULPDU - Upper Layer
      Protocol Data Unit.  The data record defined by\n       the layer above MPA.\n"
    title: 2.2.  LLP
  - contents:
    - "2.3.  Direct Data Placement (DDP)\n   Data Placement (Placement, Placed, Places)
      - For DDP, this term is\n       specifically used to indicate the process of
      writing to a data\n       buffer by a DDP implementation.  DDP Segments carry
      Placement\n       information, which may be used by the receiving DDP\n       implementation
      to perform Data Placement of the DDP Segment ULP\n       Payload.  See \"Data
      Delivery\".\n   DDP Abortive Teardown - The act of closing a DDP Stream without\n
      \      attempting to Complete in-progress and pending DDP Messages.\n   DDP
      Graceful Teardown - The act of closing a DDP Stream such that all\n       in-progress
      and pending DDP Messages are allowed to Complete\n       successfully.\n   DDP
      Control Field - A fixed 16-bit field in the DDP Header.  The DDP\n       Control
      Field contains an 8-bit field whose contents are reserved\n       for use by
      the ULP.\n   DDP Header - The header present in all DDP segments.  The DDP Header\n
      \      contains control and Placement fields that are used to define the\n       final
      Placement location for the ULP Payload carried in a DDP\n       Segment.\n   DDP
      Message - A ULP-defined unit of data interchange, which is\n       subdivided
      into one or more DDP segments.  This segmentation may\n       occur for a variety
      of reasons, including segmentation to respect\n       the maximum segment size
      of the underlying transport protocol.\n   DDP Segment - The smallest unit of
      data transfer for the DDP\n       protocol.  It includes a DDP Header and ULP
      Payload (if present).\n       A DDP Segment should be sized to fit within the
      underlying\n       transport protocol MULPDU.\n   DDP Stream - A sequence of
      DDP Messages whose ordering is defined by\n       the LLP.  For SCTP, a DDP
      Stream maps directly to an SCTP Stream.\n       For MPA, a DDP Stream maps directly
      to a TCP connection, and a\n       single DDP Stream is supported.  Note that
      DDP has no ordering\n       guarantees between DDP Streams.\n   Direct Data
      Placement - A mechanism whereby ULP data contained within\n       DDP Segments
      may be Placed directly into its final destination in\n       memory without
      processing of the ULP.  This may occur even when\n       the DDP Segments arrive
      out of order.  Out-of-order Placement\n       support may require the Data Sink
      to implement the LLP and DDP as\n       one functional block.\n   Direct Data
      Placement Protocol (DDP) - Also, a wire protocol that\n       supports Direct
      Data Placement by associating explicit memory\n       buffer placement information
      with the LLP payload units.\n   Message Offset (MO) - For the DDP Untagged Buffer
      Model, specifies\n       the offset, in bytes, from the start of a DDP Message.\n
      \  Message Sequence Number (MSN) - For the DDP Untagged Buffer Model,\n       specifies
      a sequence number that is increasing with each DDP\n       Message.\n   Queue
      Number (QN) - For the DDP Untagged Buffer Model, identifies a\n       destination
      Data Sink queue for a DDP Segment.\n   Steering Tag - An identifier of a Tagged
      Buffer on a Node, valid as\n       defined within a protocol specification.\n
      \  STag - Steering Tag\n   Tagged Buffer - A buffer that is explicitly Advertised
      to the Remote\n       Peer through exchange of an STag, Tagged Offset, and length.\n
      \  Tagged Buffer Model - A DDP data transfer model used to transfer\n       Tagged
      Buffers from the Local Peer to the Remote Peer.\n   Tagged DDP Message - A DDP
      Message that targets a Tagged Buffer.\n   Tagged Offset (TO) - The offset within
      a Tagged Buffer on a Node.\n   Untagged Buffer - A buffer that is not explicitly
      Advertised to the\n       Remote Peer.  Untagged Buffers support one of the
      two available\n       data transfer mechanisms called the Untagged Buffer Model.
      \ An\n       Untagged Buffer is used to send asynchronous control messages to\n
      \      the Remote Peer for RDMA Read, Send, and Terminate requests.\n       Untagged
      Buffers handle Untagged DDP Messages.\n   Untagged Buffer Model - A DDP data
      transfer model used to transfer\n       Untagged Buffers from the Local Peer
      to the Remote Peer.\n   Untagged DDP Message - A DDP Message that targets an
      Untagged Buffer.\n"
    title: 2.3.  Direct Data Placement (DDP)
  - contents:
    - "2.4.  Remote Direct Memory Access (RDMA)\n   Completion Queues (CQs) - Logical
      components of the RNIC Interface\n       that conceptually represent how an
      RNIC notifies the ULP about\n       the completion of the transmission of data,
      or the completion of\n       the reception of data; see [RDMASEC].\n   Event
      - An indication provided by the RDMAP layer to the ULP to\n       indicate a
      Completion or other condition requiring immediate\n       attention.\n   Invalidate
      STag - A mechanism used to prevent the Remote Peer from\n       reusing a previous
      explicitly Advertised STag, until the Local\n       Peer makes it available
      through a subsequent explicit\n       Advertisement.  The STag cannot be accessed
      remotely until it is\n       explicitly Advertised again.\n   RDMA Completion
      (Completion, Completed, Complete, Completes) - For\n       RDMA, Completion
      is defined as the process of informing the ULP\n       that a particular RDMA
      Operation has performed all functions\n       specified for the RDMA Operations,
      including Placement and\n       Delivery.  The Completion semantic of each RDMA
      Operation is\n       distinctly defined.\n   RDMA Message - A data transfer
      mechanism used to fulfill an RDMA\n       Operation.\n   RDMA Operation - A
      sequence of RDMA Messages, including control\n       Messages, to transfer data
      from a Data Source to a Data Sink.\n       The following RDMA Operations are
      defined: RDMA Writes, RDMA\n       Read, Send, Send with Invalidate, Send with
      Solicited Event, Send\n       with Solicited Event and Invalidate, and Terminate.\n
      \  RDMA Protocol (RDMAP) - A wire protocol that supports RDMA Operations\n       to
      transfer ULP data between a Local Peer and the Remote Peer.\n   RDMAP Abortive
      Termination (Termination, Terminated, Terminate,\n       Terminates) - The act
      of closing an RDMAP Stream without\n       attempting to Complete in-progress
      and pending RDMA Operations.\n   RDMAP Graceful Termination - The act of closing
      an RDMAP Stream such\n       that all in-progress and pending RDMA Operations
      are allowed to\n       Complete successfully.\n   RDMA Read - An RDMA Operation
      used by the Data Sink to transfer the\n       contents of a source RDMA buffer
      from the Remote Peer to the\n       Local Peer.  An RDMA Read operation consists
      of a single RDMA\n       Read Request Message and a single RDMA Read Response
      Message.\n   RDMA Read Request - An RDMA Message used by the Data Sink to request\n
      \      the Data Source to transfer the contents of an RDMA buffer.  The\n       RDMA
      Read Request Message describes both the Data Source and Data\n       Sink RDMA
      buffers.\n   RDMA Read Request Queue - The queue used for processing RDMA Read\n
      \      Requests.  The RDMA Read Request Queue has a DDP Queue Number of\n       1.\n
      \  RDMA Read Response - An RDMA Message used by the Data Source to\n       transfer
      the contents of an RDMA buffer to the Data Sink, in\n       response to an RDMA
      Read Request.  The RDMA Read Response Message\n       only describes the data
      sink RDMA buffer.\n   RDMAP Stream - An association between a pair of RDMAP\n
      \      implementations, possibly on different Nodes, which transfer ULP\n       data
      using RDMA Operations.  There may be multiple RDMAP Streams\n       on a single
      Node.  An RDMAP Stream maps directly to a single DDP\n       Stream.\n   RDMA
      Write - An RDMA Operation that transfers the contents of a\n       source RDMA
      Buffer from the Local Peer to a destination RDMA\n       Buffer at the Remote
      Peer using RDMA.  The RDMA Write Message\n       only describes the Data Sink
      RDMA buffer.\n   Remote Direct Memory Access (RDMA) - A method of accessing
      memory on\n       a remote system in which the local system specifies the remote\n
      \      location of the data to be transferred.  Employing an RNIC in the\n       remote
      system allows the access to take place without\n       interrupting the processing
      of the CPU(s) on the system.\n   Send - An RDMA Operation that transfers the
      contents of a ULP Buffer\n       from the Local Peer to an Untagged Buffer at
      the Remote Peer.\n   Send Message Type - A Send Message, Send with Invalidate
      Message,\n       Send with Solicited Event Message, or Send with Solicited Event\n
      \      and Invalidate Message.\n   Send Operation Type - A Send Operation, Send
      with Invalidate\n       Operation, Send with Solicited Event Operation, or Send
      with\n       Solicited Event and Invalidate Operation.\n   Solicited Event (SE)
      - A facility by which an RDMA Operation sender\n       may cause an Event to
      be generated at the recipient, if the\n       recipient is configured to generate
      such an Event, when a Send\n       with Solicited Event Message or Send with
      Solicited Event and\n       Invalidate Message is received.  Note: The Local
      Peer's ULP can\n       use the Solicited Event mechanism to ensure that Messages\n
      \      designated as important to the ULP are handled in an expeditious\n       manner
      by the Remote Peer's ULP.  The ULP at the Local Peer can\n       indicate a
      given Send Message Type is important by using the Send\n       with Solicited
      Event Message or Send with Solicited Event and\n       Invalidate Message.  The
      ULP at the Remote Peer can choose to\n       only be notified when valid Send
      with Solicited Event Messages\n       and/or Send with Solicited Event and Invalidate
      Messages arrive\n       and handle other valid incoming Send Messages or Send
      with\n       Invalidate Messages at its leisure.\n   Terminate - An RDMA Message
      used by a Node to pass an error\n       indication to the peer Node on an RDMAP
      Stream.  This operation\n       is for RDMAP use only.\n   ULP Buffer - A buffer
      owned above the RDMAP layer and Advertised to\n       the RDMAP layer either
      as a Tagged Buffer or an Untagged ULP\n       Buffer.\n   ULP Message - The
      ULP data that is handed to a specific protocol\n       layer for transmission.
      \ Data boundaries are preserved as they\n       are transmitted through iWARP.\n"
    title: 2.4.  Remote Direct Memory Access (RDMA)
  title: 2.  Glossary
- contents:
  - '3.  ULP and Transport Attributes

    '
  - contents:
    - "3.1.  Transport Requirements and Assumptions\n   RDMAP MUST be layered on top
      of the Direct Data Placement Protocol\n   [DDP].\n   RDMAP requires the following
      DDP support:\n   *  RDMAP uses three queues for Untagged Buffers:\n      *  Queue
      Number 0 (used by RDMAP for Send, Send with Invalidate,\n         Send with
      Solicited Event, and Send with Solicited Event and\n         Invalidate operations).\n
      \     *  Queue Number 1 (used by RDMAP for RDMA Read operations).\n      *  Queue
      Number 2 (used by RDMAP for Terminate operations).\n   *  DDP maps a single
      RDMA Message to a single DDP Message.\n   *  DDP uses the STag and Tagged Offset
      provided by the RDMAP for\n      Tagged Buffer Messages (i.e., RDMA Write and
      RDMA Read Response).\n   *  When the DDP layer Delivers an Untagged DDP Message
      to the RDMAP\n      layer, DDP provides the length of the DDP Message.  This
      ensures\n      that RDMAP does not have to carry a length field in its header.\n
      \  *  When the RDMAP layer provides an RDMA Message to the DDP layer,\n      DDP
      must insert the RsvdULP field value provided by the RDMAP\n      layer into
      the associated DDP Message.\n   *  When the DDP layer Delivers a DDP Message
      to the RDMAP layer, DDP\n      provides the RsvdULP field.\n   *  The RsvdULP
      field must be 1 octet for DDP Tagged Messages and 5\n      octets for DDP Untagged
      Messages.\n   *  DDP propagates to RDMAP all operation or protection errors
      (used\n      by RDMAP Terminate) and, when appropriate, the DDP Header fields\n
      \     of the DDP Segment that encountered the error.\n   *  If an RDMA Operation
      is aborted by DDP or a lower layer, the\n      contents of the Data Sink buffers
      associated with the operation\n      are considered indeterminate.\n   *  DDP,
      in conjunction with the lower layers, provides reliable, in-\n      order Delivery.\n"
    title: 3.1.  Transport Requirements and Assumptions
  - contents:
    - "3.2.  RDMAP Interactions with the ULP\n   RDMAP provides the ULP with access
      to the following RDMA Operations\n   as defined in this specification:\n   *
      \ Send\n   *  Send with Solicited Event\n   *  Send with Invalidate\n   *  Send
      with Solicited Event and Invalidate\n   *  RDMA Write\n   *  RDMA Read\n   For
      Send Operation Types, the following are the interactions between\n   the RDMAP
      layer and the ULP:\n   *  At the Data Source:\n      *  The ULP passes to the
      RDMAP layer the following:\n         *  ULP Message Length\n         *  ULP
      Message\n         *  An indication of the Send Operation Type, where the valid\n
      \           types are: Send, Send with Solicited Event, Send with\n            Invalidate,
      or Send with Solicited Event and Invalidate.\n         *  An Invalidate STag,
      if the Send Operation Type was Send with\n            Invalidate or Send with
      Solicited Event and Invalidate.\n      *  When the Send Operation Type Completes,
      an indication of the\n         Completion results.\n   *  At the Data Sink:\n
      \     *  If the Send Operation Type Completed successfully, the RDMAP\n         layer
      passes the following information to the ULP Layer:\n         *  ULP Message
      Length\n         *  ULP Message\n         *  An Event, if the Data Sink is configured
      to generate an\n            Event.\n         *  An Invalidated STag, if the
      Send Operation Type was Send\n            with Invalidate or Send with Solicited
      Event and Invalidate.\n      *  If the Send Operation Type Completed in error,
      the Data Sink\n         RDMAP layer will pass up the corresponding error information
      to\n         the Data Sink ULP and send a Terminate Message to the Data\n         Source
      RDMAP layer.  The Data Source RDMAP layer will then pass\n         up the Terminate
      Message to the ULP.\n   For RDMA Write operations, the following are the interactions
      between\n   the RDMAP layer and the ULP:\n   *  At the Data Source:\n      *
      \ The ULP passes to the RDMAP layer the following:\n         *  ULP Message
      Length\n         *  ULP Message\n         *  Data Sink STag\n         *  Data
      Sink Tagged Offset\n         *  When the RDMA Write operation Completes, an
      indication of\n            the Completion results.\n   *  At the Data Sink:\n
      \     *  If the RDMA Write completed successfully, the RDMAP layer does\n         not
      Deliver the RDMA Write to the ULP.  It does Place the ULP\n         Message
      transferred through the RDMA Write Message into the ULP\n         Buffer.\n
      \     *  If the RDMA Write completed in error, the Data Sink RDMAP layer\n         will
      pass up the corresponding error information to the Data\n         Sink ULP and
      send a Terminate Message to the Data Source RDMAP\n         layer.  The Data
      Source RDMAP layer will then pass up the\n         Terminate Message to the
      ULP.\n   For RDMA Read operations, the following are the interactions between\n
      \  the RDMAP layer and the ULP:\n   *  At the Data Sink:\n      *  The ULP passes
      to the RDMAP layer the following:\n         *  ULP Message Length\n         *
      \ Data Source STag\n         *  Data Sink STag\n         *  Data Source Tagged
      Offset\n         *  Data Sink Tagged Offset\n      *  When the RDMA Read operation
      Completes, an indication of the\n         Completion results.\n   *  At the
      Data Source:\n      *  If no error occurred while processing the RDMA Read Request,\n
      \        the Data Source will not pass up any information to the ULP.\n      *
      \ If an error occurred while processing the RDMA Read Request,\n         the
      Data Source RDMAP layer will pass up the corresponding\n         error information
      to the Data Source ULP and send a Terminate\n         Message to the Data Sink
      RDMAP layer.  The Data Sink RDMAP\n         layer will then pass up the Terminate
      Message to the ULP.\n   For STags made available to the RDMAP layer, following
      are the\n   interactions between the RDMAP layer and the ULP:\n   *  If the
      ULP enables an STag, the ULP passes the following to the\n      RDMAP layer:\n
      \     *  STag;\n      *  range of Tagged Offsets that are associated with a
      given STag;\n      *  remote access rights (read, write, or read and write)\n
      \        associated with a given, valid STag; and\n      *  association between
      a given STag and a given RDMAP Stream.\n   *  If the ULP disables an STag, the
      ULP passes to the RDMAP layer the\n      STag.\n   If an error occurs at the
      RDMAP layer, the RDMAP layer may pass back\n   error information (e.g., the
      content of a Terminate Message) to the\n   ULP.\n"
    title: 3.2.  RDMAP Interactions with the ULP
  title: 3.  ULP and Transport Attributes
- contents:
  - "4.  Header Format\n   The control information of RDMA Messages is included in
    DDP\n   protocol-defined header fields, with the following exceptions:\n   *  The
    first octet reserved for ULP usage on all DDP Messages in the\n      DDP Protocol
    (i.e., the RsvdULP Field) is used by RDMAP to carry\n      the RDMA Message Opcode
    and the RDMAP version.  This octet is\n      known as the RDMAP Control Field
    in this specification.  For Send\n      with Invalidate and Send with Solicited
    Event and Invalidate,\n      RDMAP uses the second through fifth octets, provided
    by DDP on\n      Untagged DDP Messages, to carry the STag that will be Invalidated.\n
    \  *  The RDMA Message length is passed by the RDMAP layer to the DDP\n      layer
    on all outbound transfers.\n   *  For RDMA Read Request Messages, the RDMA Read
    Message Size is\n      included in the RDMA Read Request Header.\n   *  The RDMA
    Message length is passed to the RDMAP layer by the DDP\n      layer on inbound
    Untagged Buffer transfers.\n   *  Two RDMA Messages carry additional RDMAP headers.
    \ The RDMA Read\n      Request carries the Data Sink and Data Source buffer descriptions,\n
    \     including buffer length.  The Terminate carries additional\n      information
    associated with the error that caused the Terminate.\n"
  - contents:
    - "4.1.  RDMAP Control and Invalidate STag Field\n   The version of RDMAP defined
      by this specification uses all 8 bits of\n   the RDMAP Control Field.  The first
      octet reserved for ULP use in the\n   DDP Protocol MUST be used by the RDMAP
      to carry the RDMAP Control\n   Field.  The ordering of the bits in the first
      octet MUST be as\n   defined in Figure 3, \"DDP Control, RDMAP Control, and
      Invalidate STag\n   Fields\".  For Send with Invalidate and Send with Solicited
      Event and\n   Invalidate, the second through fifth octets of the DDP RsvdULP
      field\n   MUST be used by RDMAP to carry the Invalidate STag.  Figure 3 depicts\n
      \  the format of the DDP Control and RDMAP Control fields.  (Note: In\n   Figure
      3, the DDP Header is offset by 16 bits to accommodate the MPA\n   header defined
      in [MPA].  The MPA header is only present if DDP is\n   layered on top of MPA.)\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n                                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                                  |T|L| Resrv | DV| RV|Rsv| Opcode|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                     Invalidate STag                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Figure 3: DDP Control, RDMAP Control, and Invalidate STag Fields\n   All
      RDMA Messages handed by the RDMAP layer to the DDP layer MUST\n   define the
      value of the Tagged flag in the DDP Header.  Figure 4,\n   \"RDMA Usage of DDP
      Fields\", MUST be used to define the value of the\n   Tagged flag that is handed
      to the DDP layer for each RDMA Message.\n   Figure 4 defines the value of the
      RDMA Opcode field that MUST be used\n   for each RDMA Message.\n   Figure 4
      defines when the STag, Queue Number, and Tagged Offset\n   fields MUST be provided
      for each RDMA Message.\n   For this version of the RDMAP, all RDMA Messages
      MUST have:\n   *  Bits 24-25; RDMA Version field: 01b for an RNIC that complies
      with\n      this RDMA protocol specification.  00b for an RNIC that complies\n
      \     with the RDMA Consortium's RDMA protocol specification.  Both\n      version
      numbers are valid.  Interoperability is dependent on MPA\n      protocol version
      negotiation (e.g., MPA marker and MPA CRC).\n   *  Bits 26-27; Reserved.  MUST
      be set to zero by sender, ignored by\n      the receiver.\n   *  Bits 28-31;
      OpCode field: see Figure 4.\n   *  Bits 32-63; Invalidate STag.  However, this
      field is only valid\n      for Send with Invalidate and Send with Solicited
      Event and\n      Invalidate Messages (see Figure 4).\n      For Send, Send with
      Solicited Event, RDMA Read Request, and\n      Terminate, the Invalidate STag
      field MUST be set to zero on\n      transmit and ignored by the receiver.\n
      \  -------+-----------+-------+------+-------+-----------+--------------\n   RDMA
      \  | Message   | Tagged| STag | Queue | Invalidate| Message\n   Message| Type
      \     | Flag  | and  | Number| STag      | Length\n   OpCode |           |       |
      TO   |       |           | Communicated\n          |           |       |      |
      \      |           | between DDP\n          |           |       |      |       |
      \          | and RDMAP\n   -------+-----------+-------+------+-------+-----------+--------------\n
      \  0000b  | RDMA Write| 1     | Valid| N/A   | N/A       | Yes\n          |
      \          |       |      |       |           |\n   -------+-----------+-------+------+-------+-----------+--------------\n
      \  0001b  | RDMA Read | 0     | N/A  | 1     | N/A       | Yes\n          |
      Request   |       |      |       |           |\n   -------+-----------+-------+------+-------+-----------+--------------\n
      \  0010b  | RDMA Read | 1     | Valid| N/A   | N/A       | Yes\n          |
      Response  |       |      |       |           |\n   -------+-----------+-------+------+-------+-----------+--------------\n
      \  0011b  | Send      | 0     | N/A  | 0     | N/A       | Yes\n          |
      \          |       |      |       |           |\n   -------+-----------+-------+------+-------+-----------+--------------\n
      \  0100b  | Send with | 0     | N/A  | 0     | Valid     | Yes\n          |
      Invalidate|       |      |       |           |\n   -------+-----------+-------+------+-------+-----------+--------------\n
      \  0101b  | Send with | 0     | N/A  | 0     | N/A       | Yes\n          |
      SE        |       |      |       |           |\n   -------+-----------+-------+------+-------+-----------+--------------\n
      \  0110b  | Send with | 0     | N/A  | 0     | Valid     | Yes\n          |
      SE and    |       |      |       |           |\n          | Invalidate|       |
      \     |       |           |\n   -------+-----------+-------+------+-------+-----------+--------------\n
      \  0111b  | Terminate | 0     | N/A  | 2     | N/A       | Yes\n          |
      \          |       |      |       |           |\n   -------+-----------+-------+------+-------+-----------+--------------\n
      \  1000b  |           |\n   to     | Reserved  |               Not Specified\n
      \  1111b  |           |\n   -------+-----------+-------------------------------------------------\n
      \                   Figure 4: RDMA Usage of DDP Fields\n   Note:  N/A means
      Not Applicable.\n"
    title: 4.1.  RDMAP Control and Invalidate STag Field
  - contents:
    - "4.2.  RDMA Message Definitions\n   The following figure defines which RDMA
      Headers MUST be used on each\n   RDMA Message and which RDMA Messages are allowed
      to carry ULP\n   Payload:\n   -------+-----------+-------------------+-------------------------\n
      \  RDMA   | Message   | RDMA Header Used  | ULP Message allowed in\n   Message|
      Type      |                   | the RDMA Message\n   OpCode |           |                   |\n
      \         |           |                   |\n   -------+-----------+-------------------+-------------------------\n
      \  0000b  | RDMA Write| None              | Yes\n          |           |                   |\n
      \  -------+-----------+-------------------+-------------------------\n   0001b
      \ | RDMA Read | RDMA Read Request | No\n          | Request   | Header            |\n
      \  -------+-----------+-------------------+-------------------------\n   0010b
      \ | RDMA Read | None              | Yes\n          | Response  |                   |\n
      \  -------+-----------+-------------------+-------------------------\n   0011b
      \ | Send      | None              | Yes\n          |           |                   |\n
      \  -------+-----------+-------------------+-------------------------\n   0100b
      \ | Send with | None              | Yes\n          | Invalidate|                   |\n
      \  -------+-----------+-------------------+-------------------------\n   0101b
      \ | Send with | None              | Yes\n          | SE        |                   |\n
      \  -------+-----------+-------------------+-------------------------\n   0110b
      \ | Send with | None              | Yes\n          | SE and    |                   |\n
      \         | Invalidate|                   |\n   -------+-----------+-------------------+-------------------------\n
      \  0111b  | Terminate | Terminate Header  | No\n          |           |                   |\n
      \  -------+-----------+-------------------+-------------------------\n   1000b
      \ |           |\n   to     | Reserved  |            Not Specified\n   1111b
      \ |           |\n   -------+-----------+-------------------+-------------------------\n
      \                 Figure 5: RDMA Message Definitions\n"
    title: 4.2.  RDMA Message Definitions
  - contents:
    - "4.3.  RDMA Write Header\n   The RDMA Write Message does not include an RDMAP
      header.  The RDMAP\n   layer passes to the DDP layer an RDMAP Control Field.
      \ The RDMA Write\n   Message is fully described by the DDP Headers of the DDP
      Segments\n   associated with the Message.\n   See Appendix A for a description
      of the DDP Segment format associated\n   with RDMA Write Messages.\n"
    title: 4.3.  RDMA Write Header
  - contents:
    - "4.4.  RDMA Read Request Header\n   The RDMA Read Request Message carries an
      RDMA Read Request Header\n   that describes the Data Sink and Data Source Buffers
      used by the RDMA\n   Read operation.  The RDMA Read Request Header immediately
      follows the\n   DDP header.  The RDMAP layer passes to the DDP layer an RDMAP
      Control\n   Field.  The following figure depicts the RDMA Read Request Header\n
      \  that MUST be used for all RDMA Read Request Messages:\n     0                   1
      \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                     Data Sink STag (SinkSTag)                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                                                               |\n    +
      \                 Data Sink Tagged Offset (SinkTO)             +\n    |                                                               |\n
      \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |
      \                 RDMA Read Message Size (RDMARDSZ)            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                     Data Source STag (SrcSTag)                |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                                                               |\n    +
      \                Data Source Tagged Offset (SrcTO)             +\n    |                                                               |\n
      \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n               Figure
      6: RDMA Read Request Header Format\n      Data Sink Steering Tag: 32 bits.\n
      \          The Data Sink Steering Tag identifies the Data Sink's Tagged\n           Buffer.
      \ This field MUST be copied, without interpretation,\n           from the RDMA
      Read Request into the corresponding RDMA Read\n           Response; this field
      allows the Data Sink to place the\n           returning data.  The STag is associated
      with the RDMAP Stream\n           through a mechanism that is outside the scope
      of the RDMAP\n           specification.\n      Data Sink Tagged Offset: 64 bits.\n
      \          The Data Sink Tagged Offset specifies the starting offset, in\n           octets,
      from the base of the Data Sink's Tagged Buffer, where\n           the data is
      to be written by the Data Source.  This field is\n           copied from the
      RDMA Read Request into the corresponding RDMA\n           Read Response and
      allows the Data Sink to place the returning\n           data.  The Data Sink
      Tagged Offset MAY start at an arbitrary\n           offset.\n           The
      Data Sink STag and Data Sink Tagged Offset fields\n           describe the buffer
      to which the RDMA Read data is written.\n           Note: the DDP layer protects
      against a wrap of the Data Sink\n           Tagged Offset.\n      RDMA Read
      Message Size: 32 bits.\n           The RDMA Read Message Size is the amount
      of data, in octets,\n           read from the Data Source.  A single RDMA Read
      Request\n           Message can retrieve from 0 to 2^32-1 data octets from the\n
      \          Data Source.\n      Data Source Steering Tag: 32 bits.\n           The
      Data Source Steering Tag identifies the Data Source's\n           Tagged Buffer.
      \ The STag is associated with the RDMAP Stream\n           through a mechanism
      that is outside the scope of the RDMAP\n           specification.\n      Data
      Source Tagged Offset: 64 bits.\n           The Tagged Offset specifies the starting
      offset, in octets,\n           that is to be read from the Data Source's Tagged
      Buffer.  The\n           Data Source Tagged Offset MAY start at an arbitrary
      offset.\n           The Data Source STag and Data Source Tagged Offset fields\n
      \          describe the buffer from which the RDMA Read data is read.\n   See
      Section 7.2, \"Errors Detected at the Remote Peer on Incoming RDMA\n   Messages\",
      for a description of error checking required upon\n   processing of an RDMA
      Read Request at the Data Source.\n"
    title: 4.4.  RDMA Read Request Header
  - contents:
    - "4.5.  RDMA Read Response Header\n   The RDMA Read Response Message does not
      include an RDMAP header.  The\n   RDMAP layer passes to the DDP layer an RDMAP
      Control Field.  The RDMA\n   Read Response Message is fully described by the
      DDP Headers of the\n   DDP Segments associated with the Message.\n   See Appendix
      A for a description of the DDP Segment format associated\n   with RDMA Read
      Response Messages.\n"
    title: 4.5.  RDMA Read Response Header
  - contents:
    - "4.6.  Send Header and Send with Solicited Event Header\n   The Send and Send
      with Solicited Event Messages do not include an\n   RDMAP header.  The RDMAP
      layer passes to the DDP layer an RDMAP\n   Control Field.  The Send and Send
      with Solicited Event Messages are\n   fully described by the DDP Headers of
      the DDP Segments associated\n   with the Messages.\n   See Appendix A for a
      description of the DDP Segment format associated\n   with Send and Send with
      Solicited Event Messages.\n"
    title: 4.6.  Send Header and Send with Solicited Event Header
  - contents:
    - "4.7.  Send with Invalidate Header and Send with SE and Invalidate Header\n
      \  The Send with Invalidate and Send with Solicited Event and Invalidate\n   Messages
      do not include an RDMAP header.  The RDMAP layer passes to\n   the DDP layer
      an RDMAP Control Field and the Invalidate STag field\n   (see section 4.1 RDMAP
      Control and Invalidate STag Field).  The Send\n   with Invalidate and Send with
      Solicited Event and Invalidate Messages\n   are fully described by the DDP Headers
      of the DDP Segments associated\n   with the Messages.\n   See Appendix A for
      a description of the DDP Segment format associated\n   with Send and Send with
      Solicited Event Messages.\n"
    title: 4.7.  Send with Invalidate Header and Send with SE and Invalidate Header
  - contents:
    - "4.8.  Terminate Header\n   The Terminate Message carries a Terminate Header
      that contains\n   additional information associated with the cause of the Terminate.\n
      \  The Terminate Header immediately follows the DDP header.  The RDMAP\n   layer
      passes to the DDP layer an RDMAP Control Field.  The following\n   figure depicts
      a Terminate Header that MUST be used for the Terminate\n   Message:\n     0
      \                  1                   2                   3\n     0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |       Terminate Control             |      Reserved           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |  DDP Segment Length  (if any) |                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              +\n    |                                                               |\n
      \   //                                                             //\n    |
      \                 Terminated DDP Header (if any)               |\n    +                                                               +\n
      \   |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                                                               |\n    //
      \                                                            //\n    |                 Terminated
      RDMA Header (if any)               |\n    +                                                               +\n
      \   |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                Figure 7: Terminate Header Format\n      Terminate Control:
      19 bits.\n          The Terminate Control field MUST have the format defined
      in\n          Figure 8 below.\n     0                   1                   2
      \                  3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    | Layer | EType
      |   Error Code  |HdrCt|\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n                    Figure
      8: Terminate Control Field\n   *  Figure 9, \"Terminate Control Field Values\",
      defines the valid\n      values that MUST be used for this field.\n      *  Layer:
      4 bits.\n         Identifies the layer that encountered the error.\n      *
      \ EType (RDMA Error Type): 4 bits.\n         Identifies the type of error that
      caused the Terminate.  When\n         the error is detected at the RDMAP layer,
      the RDMAP layer\n         inserts the Error Type into this field.  When the
      error is\n         detected at an LLP layer, an LLP layer creates the Error
      Type\n         and the DDP layer passes it up to the RDMAP layer, and the\n
      \        RDMAP layer inserts it into this field.\n      *  Error Code: 8 bits.\n
      \        This field identifies the specific error that caused the\n         Terminate.
      \ When the error is detected at the RDMAP layer, the\n         RDMAP layer creates
      the Error Code.  When the error is detected\n         at an LLP layer, the LLP
      layer creates the Error Code, the DDP\n         layer passes it up to the RDMAP
      layer, and the RDMAP layer\n         inserts it into this field.\n      *  HdrCt:
      3 bits.\n         Header control bits:\n         *  M: bit 16.  DDP Segment
      Length valid.  See Figure 10 for\n            when this bit SHOULD be set.\n
      \        *  D: bit 17.  DDP Header Included.  See Figure 10 for when\n            this
      bit SHOULD be set.\n         *  R: bit 18.  RDMAP Header Included.  See Figure
      10 for when\n            this bit SHOULD be set.\n   -------+-----------+-------+-------------+------+--------------------\n
      \  Layer  | Layer     | Error | Error Type  | Error| Error Code Name\n          |
      Name      | Type  | Name        | Code |\n   -------+-----------+-------+-------------+------+--------------------\n
      \         |           | 0000b | Local       | None | None - This error\n          |
      \          |       | Catastrophic|      | type does not have\n          |           |
      \      | Error       |      | an error code. Any\n          |           |       |
      \            |      | value in this field\n          |           |       |             |
      \     | is acceptable.\n          |           +-------+-------------+------+--------------------\n
      \         |           |       |             | 00X  | Invalid STag\n          |
      \          |       |             +------+--------------------\n          |           |
      \      |             | 01X  | Base or bounds\n          |           |       |
      \            |      | violation\n          |           |       | Remote      +------+--------------------\n
      \         |           | 0001b | Protection  | 02X  | Access rights\n          |
      \          |       | Error       |      | violation\n          |           |
      \      |             +------+--------------------\n   0000b  | RDMA      |       |
      \            | 03X  | STag not associated\n          |           |       |             |
      \     | with RDMAP Stream\n          |           |       |             +------+--------------------\n
      \         |           |       |             | 04X  | TO wrap\n          |           |
      \      |             +------+--------------------\n          |           |       |
      \            | 09X  | STag cannot be\n          |           |       |             |
      \     | Invalidated\n          |           |       |             +------+--------------------\n
      \         |           |       |             | FFX  | Unspecified Error\n          |
      \          +-------+-------------+------+--------------------\n          |           |
      \      |             | 05X  | Invalid RDMAP\n          |           |       |
      \            |      | version\n          |           |       |             +------+--------------------\n
      \         |           |       |             | 06X  | Unexpected OpCode\n          |
      \          |       | Remote      +------+--------------------\n          |           |
      0010b | Operation   | 07X  | Catastrophic error,\n          |           |       |
      Error       |      | localized to RDMAP\n          |           |       |             |
      \     | Stream\n          |           |       |             +------+--------------------\n
      \         |           |       |             | 08X  | Catastrophic error,\n          |
      \          |       |             |      | global\n          |           |       |
      \            +------+--------------------\n          |           |       |             |
      09X  | STag cannot be\n          |           |       |             |      |
      Invalidated\n          |           |       |             +------+--------------------\n
      \         |           |       |             | FFX  | Unspecified Error\n   -------+-----------+-------+-------------+------+--------------------\n
      \  0001b  | DDP       | See DDP Specification [DDP] for a description of\n          |
      \          | the values and names.\n   -------+-----------+-------+-----------------------------------------\n
      \  0010b  | LLP       | For MPA, see MPA Specification [MPA] for a\n          |(e.g.,
      MPA)| description of the values and names.\n   -------+-----------+-------+-----------------------------------------\n
      \             Figure 9: Terminate Control Field Values\n      Reserved: 13 bits.
      \ This field MUST be set to zero on transmit,\n      ignored on receive.\n      DDP
      Segment Length: 16 bits\n           The length handed up by the DDP layer when
      the error was\n           detected.  It MUST be valid if the M bit is set.  It
      MUST be\n           present when the D bit is set.\n      Terminated DDP Header:
      112 bits for Tagged Messages and 144 bits\n      for Untagged Messages.\n           The
      DDP Header of the incoming Message that is associated\n           with the Terminate.
      \ The DDP Header is not present if the\n           Terminate Error Type is a
      Local Catastrophic Error.  It MUST\n           be present if the D bit is set.\n
      \     Terminated RDMA Header: 224 bits.\n           The Terminated RDMA Header
      is only sent back if the terminate\n           is associated with an RDMA Read
      Request Message.  It MUST be\n           present if the R bit is set.\n           If
      the terminate occurs before the first RDMA Read Request\n           byte is
      processed, the original RDMA Read Request Header is\n           sent back.\n
      \          If the terminate occurs after the first RDMA Read Request\n           byte
      is processed, the RDMA Read Request Header is updated to\n           reflect
      the current location of the RDMA Read operation that\n           is in process:\n
      \              *  Data Sink STag = Data Sink STag originally sent in the\n                  RDMA
      Read Request.\n               *  Data Sink Tagged Offset = Current offset into
      the Data\n                  Sink Tagged Buffer.  For example, if the RDMA Read\n
      \                 Request was terminated after 2048 octets were sent,\n                  then
      the Data Sink Tagged Offset = the original Data\n                  Sink Tagged
      Offset + 2048.\n               *  Data Message size = Number of bytes left to
      transfer.\n               *  Data Source STag = Data Source STag in the RDMA
      Read\n                  Request.\n               *  Data Source Tagged Offset
      = Current offset into the\n                  Data Source Tagged Buffer.  For
      example, if the RDMA\n                  Read Request was terminated after 2048
      octets were\n                  sent, then the Data Source Tagged Offset = the\n
      \                 original Data Source Tagged Offset + 2048.\n   Note: if a
      given LLP does not define any termination codes for the\n   RDMAP Termination
      message to use, then none would be used for that\n   LLP.\n   Figure 10, \"Error
      Type to RDMA Message Mapping\", maps layer name and\n   error types to each
      RDMA Message type:\n   ---------+-------------+------------+------------+-----------------\n
      \  Layer    | Error Type  | Terminate  | Terminate  | What type of\n   Name
      \    | Name        | Includes   | Includes   | RDMA Message can\n            |
      \            | DDP Header | RDMA Header| cause the error\n            |             |
      and DDP    |            |\n            |             | Segment    |            |\n
      \           |             | Length     |            |\n   ---------+-------------+------------+------------+-----------------\n
      \           | Local       | No         | No         | Any\n            | Catastrophic|
      \           |            |\n            | Error       |            |            |\n
      \           +-------------+------------+------------+-----------------\n            |
      Remote      | Yes, if    | Yes        | Only RDMA Read\n   RDMA     | Protection
      \ | possible   |            | Request, Send\n            | Error       |            |
      \           | with Invalidate,\n            |             |            |            |
      and Send with SE\n            |             |            |            | and
      Invalidate\n            +-------------+------------+------------+-----------------\n
      \           | Remote      | Yes, if    | No         | Any\n            | Operation
      \  | possible   |            |\n            | Error       |            |            |\n
      \  ---------+-------------+------------+------------+-----------------\n   DDP
      \     | See DDP Spec| Yes        | No         | Any\n            | [DDP]       |
      \           |            |\n   ---------+-------------+------------+------------+-----------------\n
      \  LLP      | See LLP Spec| No         | No         | Any\n            | (e.g.,
      MPA) |            |            |\n            Figure 10: Error Type to RDMA
      Message Mapping\n"
    title: 4.8.  Terminate Header
  title: 4.  Header Format
- contents:
  - '5.  Data Transfer

    '
  - contents:
    - "5.1.  RDMA Write Message\n   An RDMA Write is used by the Data Source to transfer
      data to a\n   previously Advertised Tagged Buffer at the Data Sink.  The RDMA
      Write\n   Message has the following semantics:\n   *  An RDMA Write Message
      MUST reference a Tagged Buffer.  That is,\n      the Data Source RDMAP layer
      MUST request that the DDP layer mark\n      the Message as Tagged.\n   *  A
      valid RDMA Write Message MUST NOT be delivered to the Data\n      Sink's ULP
      (i.e., it is placed by the DDP layer).\n   *  At the Remote Peer, when an invalid
      RDMA Write Message is\n      delivered to the Remote Peer's RDMAP layer, an
      error is surfaced\n      (see Section 7.1, \"RDMAP Error Surfacing\").\n   *
      \ The Tagged Offset of a Tagged Buffer MAY start at a non-zero\n      value.\n
      \  *  An RDMA Write Message MAY target all or part of a previously\n      Advertised
      Buffer.\n   *  The RDMAP does not define how the buffer(s) are used by an\n
      \     outbound RDMA Write or how they are addressed.  For example, an\n      implementation
      of RDMA may choose to allow a gather-list of non-\n      contiguous data blocks
      to be the source of an RDMA Write.  In this\n      case, the data blocks would
      be combined by the Data Source and\n      sent as a single RDMA Write Message
      to the Data Sink.\n   *  The Data Source RDMAP layer MUST issue RDMA Write Messages
      to the\n      DDP layer in the order they were submitted by the ULP.\n   *  At
      the Data Source, a subsequent Send (Send with Invalidate, Send\n      with Solicited
      Event, or Send with Solicited Event and Invalidate)\n      Message MAY be used
      to signal Delivery of previous RDMA Write\n      Messages to the Data Sink,
      if the ULP chooses to signal Delivery\n      in this fashion.\n   *  If the
      Local Peer wishes to write to multiple Tagged Buffers on\n      the Remote Peer,
      the Local Peer MUST use multiple RDMA Write\n      Messages.  That is, a single
      RDMA Write Message can only write to\n      one remote Tagged Buffer.\n   *
      \ The Data Source MAY issue a zero-length RDMA Write Message.\n"
    title: 5.1.  RDMA Write Message
  - contents:
    - "5.2.  RDMA Read Operation\n   The RDMA Read operation MUST consist of a single
      RDMA Read Request\n   Message and a single RDMA Read Response Message.\n"
    - contents:
      - "5.2.1.  RDMA Read Request Message\n   An RDMA Read Request is used by the
        Data Sink to transfer data from a\n   previously Advertised Tagged Buffer
        at the Data Source to a Tagged\n   Buffer at the Data Sink.  The RDMA Read
        Request Message has the\n   following semantics:\n   *  An RDMA Read Request
        Message MUST reference an Untagged Buffer.\n      That is, the Local Peer's
        RDMAP layer MUST request that the DDP\n      mark the Message as Untagged.\n
        \  *  One RDMA Read Request Message MUST consume one Untagged Buffer.\n   *
        \ The Remote Peer's RDMAP layer MUST process an RDMA Read Request\n      Message.
        \ A valid RDMA Read Request Message MUST NOT be delivered\n      to the Data
        Sink's ULP (i.e., it is processed by the RDMAP layer).\n   *  At the Remote
        Peer, when an invalid RDMA Read Request Message is\n      delivered to the
        Remote Peer's RDMAP layer, an error is surfaced\n      (see Section 7.1, \"RDMAP
        Error Surfacing\").\n   *  An RDMA Read Request Message MUST reference the
        RDMA Read Request\n      Queue.  That is, the Local Peer's RDMAP layer MUST
        request that\n      the DDP layer set the Queue Number field to one.\n   *
        \ The Local Peer MUST pass to the DDP layer RDMA Read Request\n      Messages
        in the order they were submitted by the ULP.\n   *  The Remote Peer MUST process
        the RDMA Read Request Messages in the\n      order they were sent.\n   *  If
        the Local Peer wishes to read from multiple Tagged Buffers on\n      the Remote
        Peer, the Local Peer MUST use multiple RDMA Read\n      Request Messages.
        \ That is, a single RDMA Read Request Message\n      MUST only read from one
        remote Tagged Buffer.\n   *  AN RDMA Read Request Message MAY target all or
        part of a\n      previously Advertised Buffer.\n   *  If the Data Source receives
        a valid RDMA Read Request Message, it\n      MUST respond with a valid RDMA
        Read Response Message.\n   *  The Data Sink MAY issue a zero-length RDMA Read
        Request Message by\n      setting the RDMA Read Message Size field to zero
        in the RDMA Read\n      Request Header.\n   *  If the Data Source receives
        a non-zero-length RDMA Read Message\n      Size, the Data Source RDMAP MUST
        validate the Data Source STag and\n      Data Source Tagged Offset contained
        in the RDMA Read Request\n      Header.\n   *  If the Data Source receives
        an RDMA Read Request Header with the\n      RDMA Read Message Size set to
        zero, the Data Source RDMAP:\n      *  MUST NOT validate the Data Source STag
        and Data Source Tagged\n         Offset contained in the RDMA Read Request
        Header, and\n      *  MUST respond with a zero-length RDMA Read Response Message.\n"
      title: 5.2.1.  RDMA Read Request Message
    - contents:
      - "5.2.2.  RDMA Read Response Message\n   The RDMA Read Response Message uses
        the DDP Tagged Buffer Model to\n   Deliver the contents of a previously requested
        Data Source Tagged\n   Buffer to the Data Sink, without any involvement from
        the ULP at the\n   Remote Peer.  The RDMA Read Response Message has the following\n
        \  semantics:\n   *  The RDMA Read Response Message for the associated RDMA
        Read\n      Request Message travels in the opposite direction.\n   *  An RDMA
        Read Response Message MUST reference a Tagged Buffer.\n      That is, the
        Data Source RDMAP layer MUST request that the DDP\n      mark the Message
        as Tagged.\n   *  The Data Source MUST ensure that a sufficient number of
        Untagged\n      Buffers are available on the RDMA Read Request Queue (Queue
        with\n      DDP Queue Number 1) to support the maximum number of RDMA Read\n
        \     Requests negotiated by the ULP.\n   *  The RDMAP layer MUST Deliver
        the RDMA Read Response Message to the\n      ULP.\n   *  At the Remote Peer,
        when an invalid RDMA Read Response Message is\n      delivered to the Remote
        Peer's RDMAP layer, an error is surfaced\n      (see Section 7.1, \"RDMAP
        Error Surfacing\").\n   *  The Tagged Offset of a Tagged Buffer MAY start
        at a non-zero\n      value.\n   *  The Data Source RDMAP layer MUST pass RDMA
        Read Response Messages\n      to the DDP layer, in the order that the RDMA
        Read Request Messages\n      were received by the RDMAP layer, at the Data
        Source.\n   *  The Data Sink MAY validate that the STag, Tagged Offset, and\n
        \     length of the RDMA Read Response Message are the same as the STag,\n
        \     Tagged Offset, and length included in the corresponding RDMA Read\n
        \     Request Message.\n   *  A single RDMA Read Response Message MUST write
        to one remote\n      Tagged Buffer.  If the Data Sink wishes to read multiple
        Tagged\n      Buffers, the Data Sink can use multiple RDMA Read Request\n
        \     Messages.\n"
      title: 5.2.2.  RDMA Read Response Message
    title: 5.2.  RDMA Read Operation
  - contents:
    - "5.3.  Send Message Type\n   The Send Message Type uses the DDP Untagged Buffer
      Model to transfer\n   data from the Data Source into an Untagged Buffer at the
      Data Sink.\n   *  A Send Message Type MUST reference an Untagged Buffer.  That
      is,\n      the Local Peer's RDMAP layer MUST request that the DDP layer mark\n
      \     the Message as Untagged.\n   *  One Send Message Type MUST consume one
      Untagged Buffer.\n      *  The ULP Message sent using a Send Message Type MAY
      be less than\n         or equal to the size of the consumed Untagged Buffer.
      \ The\n         RDMAP layer communicates to the ULP the size of the data\n         written
      into the Untagged Buffer.\n      *  If the ULP Message sent via Send Message
      Type is larger than\n         the Data Sink's Untagged Buffer, it is an error
      (see Section\n         9.1, \"RDMAP Error Surfacing\").\n   *  At the Remote
      Peer, the Send Message Type MUST be Delivered to the\n      Remote Peer's ULP
      in the order they were sent.\n   *  After the Send with Solicited Event or Send
      with Solicited Event\n      and Invalidate Message is Delivered to the ULP,
      the RDMAP MAY\n      generate an Event, if the Data Sink is configured to generate
      such\n      an Event.\n   *  At the Remote Peer, when an invalid Send Message
      Type is Delivered\n      to the Remote Peer's RDMAP layer, an error is surfaced
      (see\n      Section 7.1, \"RDMAP Error Surfacing\").\n   *  The RDMAP does not
      specify the structure of the buffer(s) used by\n      an outbound RDMA Write
      nor does it specify how the buffer(s) are\n      addressed.  For example, an
      implementation of RDMA may choose to\n      allow a gather-list of non-contiguous
      data blocks to be the source\n      of a Send Message Type.  In this case, the
      data blocks would be\n      combined by the Data Source and sent as a single
      Send Message Type\n      to the Data Sink.\n   *  For a Send Message Type, the
      Local Peer's RDMAP layer MUST request\n      that the DDP layer set the Queue
      Number field to zero.\n   *  The Local Peer MUST issue Send Message Type Messages
      in the order\n      they were submitted by the ULP.\n   *  The Data Source MAY
      pass a zero-length Send Message Type.  A\n      zero-length Send Message Type
      MUST consume an Untagged Buffer at\n      the Data Sink.  A Send with Invalidate
      or Send with Solicited\n      Event and Invalidate Message MUST reference an
      STag.  That is, the\n      Local Peer's RDMAP layer MUST pass the RDMA control
      field and the\n      STag that will be Invalidated to the DDP layer.\n   *  When
      the Send with Invalidate and Send with Solicited Event and\n      Invalidate
      Message are Delivered to the Remote Peer's RDMAP layer,\n      the RDMAP layer
      MUST:\n      *  Verify the STag that is associated with the RDMAP Stream; and\n
      \     *  Invalidate the STag if it is associated with the RDMAP Stream;\n         or
      issue a Terminate Message with the STag Cannot be\n         Invalidated Terminate
      Error Code, if the STag is not associated\n         with the RDMAP Stream.\n"
    title: 5.3.  Send Message Type
  - contents:
    - "5.4.  Terminate Message\n   The Terminate Message uses the DDP Untagged Buffer
      Model to\n   transfer-error-related information from the Data Source into an\n
      \  Untagged Buffer at the Data Sink and then ceases all further\n   communications
      on the underlying DDP Stream.  The Terminate Message\n   has the following semantics:\n
      \  *  A Terminate Message MUST reference an Untagged Buffer.  That is,\n      the
      Local Peer's RDMAP layer MUST request that the DDP layer mark\n      the Message
      as Untagged.\n   *  A Terminate Message references the Terminate Queue.  That
      is, the\n      Local Peer's RDMAP layer MUST request that the DDP layer set
      the\n      Queue Number field to two.\n   *  One Terminate Message MUST consume
      one Untagged Buffer.\n   *  On a single RDMAP Stream, the RDMAP layer MUST guarantee
      placement\n      of a single Terminate Message.\n   *  A Terminate Message MUST
      be Delivered to the Remote Peer's RDMAP\n      layer.  The RDMAP layer MUST
      Deliver the Terminate Message to the\n      ULP.\n   *  At the Remote Peer,
      when an invalid Terminate Message is delivered\n      to the Remote Peer's RDMAP
      layer, an error is surfaced (see\n      Section 7.1 \"RDMAP Error Surfacing\").\n
      \  *  The RDMAP layer Completes in error all ULP operations that have\n      not
      been provided to the DDP layer.\n   *  After sending a Terminate Message on
      an RDMAP Stream, the Local\n      Peer MUST NOT send any more Messages on that
      specific RDMAP\n      Stream.\n   *  After receiving a Terminate Message on
      an RDMAP Stream, the Remote\n      Peer MAY stop sending Messages on that specific
      RDMAP Stream.\n"
    title: 5.4.  Terminate Message
  - contents:
    - "5.5.  Ordering and Completions\n   It is important to understand the difference
      between Placement and\n   Delivery ordering since RDMAP provides quite different
      semantics for\n   the two.\n   Note that many current protocols, both as used
      in the Internet and\n   elsewhere, assume that data is both Placed and Delivered
      in order.\n   Taking advantage of this fact allowed applications to take a variety\n
      \  of shortcuts.  For RDMAP, many of these shortcuts are no longer safe\n   to
      use, and could cause application failure.\n   The following rules apply to implementations
      of the RDMAP protocol.\n   Note that in these rules, Send includes Send, Send
      with Invalidate,\n   Send with Solicited Event, and Send with Solicited Event
      and\n   Invalidate:\n   1.  RDMAP does not provide ordering among Messages on
      different RDMAP\n       Streams.\n   2.  RDMAP does not provide ordering between
      operations that are\n       generated from the two ends of an RDMAP Stream.\n
      \  3.  RDMA Messages that use Tagged and Untagged Buffers MAY be Placed\n       in
      any order.  If an application uses overlapping buffers (points\n       different
      Messages or portions of a single Message at the same\n       buffer), then it
      is possible that the last incoming write to the\n       Data Sink buffer will
      not be the last outgoing data sent from the\n       Data Source.\n   4.  For
      a Send operation, the contents of an Untagged Buffer at the\n       Data Sink
      MAY be indeterminate until the Send is Delivered to the\n       ULP at the Data
      Sink.\n   5.  For an RDMA Write operation, the contents of the Tagged Buffer
      at\n       the Data Sink MAY be indeterminate until a subsequent Send is\n       Delivered
      to the ULP at the Data Sink.\n   6.  For an RDMA Read operation, the contents
      of the Tagged Buffer at\n       the Data Sink MAY be indeterminate until the
      RDMA Read Response\n       Message has been Delivered at the Local Peer.\n   Statements
      4, 5, and 6 imply \"no peeking\" at the data to see if it is\n   done.  It is
      possible for some data to arrive before logically\n   earlier data does, and
      peeking may cause unpredictable application\n   failure.\n   7.  If the ULP
      or Application modifies the contents of Tagged or\n       Untagged Buffers,
      which are being modified by an RDMA Operation\n       while the RDMAP is processing
      the RDMA Operation, the state of\n       the Buffers is indeterminate.\n   8.
      \ If the ULP or Application modifies the contents of Tagged or\n       Untagged
      Buffers, which are read by an RDMA Operation while the\n       RDMAP is processing
      the RDMA Operation, the results of the read\n       are indeterminate.\n   9.
      \ The Completion of an RDMA Write or Send Operation at the Local\n       Peer
      does not guarantee that the ULP Message has yet reached the\n       Remote Peer
      ULP Buffer or been examined by the Remote ULP.\n   10. Send Messages MUST be
      Delivered to the ULP at the Remote Peer\n       after they are Delivered to
      RDMAP by DDP and in the order that\n       they were Delivered to RDMAP.\n       Note
      that DDP ordering rules ensure that this will be the same\n       order that
      they were submitted at the Local Peer and that any\n       prior RDMA Writes
      have been submitted for ordered Placement at\n       the Remote Peer.  This
      means that when the ULP sees the Delivery\n       of the Send, the memory buffers
      targeted by any preceding RDMA\n       Writes and Sends are available to be
      accessed locally or remotely\n       as authorized.  If the ULP overlaps its
      buffers for different\n       operations, the data from the RDMA Write or Send
      may be\n       overwritten by subsequent RDMA Operations before the ULP receives\n
      \      and processes the Delivery.\n   11. RDMA Read Response Messages MUST
      be Delivered to the ULP at the\n       Remote Peer after they are Delivered
      to RDMAP by DDP and in the\n       order that the they were Delivered to RDMAP.\n
      \      DDP ordering rules ensure that this will be the same order that\n       they
      were submitted at the Local Peer.  This means that when the\n       ULP sees
      the Delivery of the RDMA Read Response, the memory\n       buffers targeted
      by the RDMA Read Response are available to be\n       accessed locally or remotely
      as authorized.  If the ULP overlaps\n       its buffers for different operations,
      the data from the RDMA Read\n       Response may be overwritten by subsequent
      RDMA Operations before\n       the ULP receives and processes the Delivery.\n
      \  12. RDMA Read Request Messages, including zero-length RDMA Read\n       Requests,
      MUST NOT start processing at the Remote Peer until they\n       have been Delivered
      to RDMAP by DDP.\n       Note: the ULP is assured that data written can be read
      back.  For\n       example, if\n          a) an RDMA Read Request is issued
      by the local peer,\n          b) the Request targets the same ULP Buffer as
      a preceding Send\n             or RDMA Write (in the same direction as the RDMA
      Read\n             Request), and\n          c) there are no other sources of
      update for the ULP Buffer,\n       then the Remote Peer will send back the data
      written by the Send\n       or RDMA Write.  That is, for this example, the ULP
      Buffer is\n       Advertised for use on a series of RDMA Messages, is only valid
      on\n       the RDMAP Stream for which it is Advertised, and is not locally\n
      \      updated while the series of RDMAP Messages are performed.  For\n       this
      example, order rule (12) assures that subsequent local or\n       remote accesses
      to the ULP Buffer contain the data written by the\n       Send or RDMA Write.\n
      \      RDMA Read Response Messages MAY be generated at the Remote Peer\n       after
      subsequent RDMA Write Messages or Send Messages have been\n       Placed or
      Delivered.  Therefore, when an application does an RDMA\n       Read Request
      followed by an RDMA Write (or Send) to the same\n       buffer, it may get the
      data from the later RDMA Write (or Send)\n       in the RDMA Read Response Message,
      even though the operations\n       completed in order at the Local Peer.  If
      this behavior is not\n       desired, the Local Peer ULP must Fence the later
      RDMA write (or\n       Send) by withholding the RDMA Write Message until all
      outstanding\n       RDMA Read Responses have been Delivered.\n   13. The RDMAP
      layer MUST submit RDMA Messages to the DDP layer in the\n       order the RDMA
      Operations are submitted to the RDMAP layer by the\n       ULP.\n   14. A Send
      or RDMA Write Message MUST NOT be considered Complete at\n       the Local Peer
      (Data Source) until it has been successfully\n       completed at the DDP layer.\n
      \  15. RDMA Operations MUST be Completed at the Local Peer in the order\n       that
      they were submitted by the ULP.\n   16. At the Data Sink, an incoming Send Message
      MUST be Delivered to\n       the ULP only after the DDP Message has been Delivered
      to the\n       RDMAP layer by the DDP layer.\n   17. RDMA Read Response Message
      processing at the Remote Peer (reading\n       the specified Tagged Buffer)
      MUST be started only after the RDMA\n       Read Request Message has been Delivered
      by the DDP layer (thus,\n       all previous RDMA Messages have been properly
      submitted for\n       ordered Placement).\n   18. Send Messages MAY be Completed
      at the Remote Peer (Data Sink)\n       before prior incoming RDMA Read Request
      Messages have completed\n       their response processing.\n   19. An RDMA Read
      operation MUST NOT be Completed at the Local Peer\n       until the DDP layer
      Delivers the associated incoming RDMA Read\n       Response Message.\n   20.
      If more than one outstanding RDMA Read Request Messages are\n       supported
      by both peers, the RDMA Read Response Messages MUST be\n       submitted to
      the DDP layer on the Remote Peer in the order the\n       RDMA Read Request
      Messages were Delivered by DDP, but the actual\n       read of the buffer contents
      MAY take place in any order at the\n       Remote Peer.\n       This simplifies
      Local Peer Completion processing for RDMA Reads\n       in that a Delivered
      RDMA Read Response MUST be sufficient to\n       Complete the RDMA Read operation.\n"
    title: 5.5.  Ordering and Completions
  title: 5.  Data Transfer
- contents:
  - "6.  RDMAP Stream Management\n   RDMAP Stream management consists of RDMAP Stream
    Initialization and\n   RDMAP Stream Termination.\n"
  - contents:
    - "6.1.  Stream Initialization\n   RDMAP Stream initialization occurs after the
      LLP Stream has been\n   created (e.g., for DDP/MPA over TCP, the first TCP Segment
      after the\n   SYN, SYN/ACK exchange).  The ULP is responsible for transitioning
      the\n   LLP Stream into RDMA-enabled mode.  The switch to RDMA mode typically\n
      \  occurs sometime after LLP Stream setup.  Once in RDMA enabled mode,\n   an
      implementation MUST send only RDMA Messages across the transport\n   Stream
      until the RDMAP Stream is torn down.\n   For each direction of an RDMAP Stream:\n
      \  *  For a given RDMAP Stream, the number of outstanding RDMA Read\n      Requests
      is limited per RDMAP Stream direction.\n   *  It is the ULP's responsibility
      to set the maximum number of\n      outstanding, inbound RDMA Read Requests
      per RDMAP Stream\n      direction.\n   *  The RDMAP layer MUST provide the maximum
      number of outstanding,\n      inbound RDMA Read Requests per RDMAP Stream direction
      that were\n      negotiated between the ULP and the Local Peer's RDMAP layer.
      \ The\n      negotiation mechanism is outside the scope of this specification.\n
      \  *  It is the ULP's responsibility to set the maximum number of\n      outstanding,
      outbound RDMA Read Requests per RDMAP Stream\n      direction.\n   *  The RDMAP
      layer MUST provide the maximum number of outstanding,\n      outbound RDMA Read
      Requests for the RDMAP Stream direction that\n      were negotiated between
      the ULP and the Local Peer's RDMAP layer.\n      The negotiation mechanism is
      outside the scope of this\n      specification.\n   *  The Local Peer's ULP
      is responsible for negotiating with the\n      Remote Peer's ULP the maximum
      number of outstanding RDMA Read\n      Requests for the RDMAP Stream direction.
      \ It is recommended that\n      the ULP set the maximum number of outstanding,
      inbound RDMA Read\n      Requests equal to the maximum number of outstanding,
      outbound RDMA\n      Read Requests for a given RDMAP Stream direction.\n   *
      \ For outbound RDMA Read Requests, the RDMAP layer MUST NOT exceed\n      the
      maximum number of outstanding, outbound RDMA Read Requests\n      that were
      negotiated between the ULP and the Local Peer's RDMAP\n      layer.\n   *  For
      inbound RDMA Read Requests, the RDMAP layer MUST NOT exceed\n      the maximum
      number of outstanding, inbound RDMA Read Requests that\n      were negotiated
      between the ULP and the Local Peer's RDMAP layer.\n"
    title: 6.1.  Stream Initialization
  - contents:
    - "6.2.  Stream Teardown\n   There are three methods for terminating an RDMAP
      Stream: ULP Graceful\n   Termination, RDMAP Abortive Termination, and LLP Abortive\n
      \  Termination.\n   The ULP is responsible for performing ULP Graceful Termination.\n
      \  After a ULP Graceful Termination, either side of the Stream can\n   initiate
      LLP Graceful Termination, using the graceful termination\n   mechanism provided
      by the LLP.\n   RDMAP Abortive Termination allows the RDMAP to issue a Terminate\n
      \  Message describing the reason the RDMAP Stream was terminated.  The\n   next
      section (6.2.1, \"RDMAP Abortive Termination\") describes the\n   RDMAP Abortive
      Termination in detail.\n   LLP Abortive Termination results due to an LLP error
      and causes the\n   RDMAP Stream to be torn down midstream, without an RDMAP
      Terminate\n   Message.  While this last method is highly undesirable, it is\n
      \  possible, and the ULP should take this into consideration.\n"
    - contents:
      - "6.2.1.  RDMAP Abortive Termination\n   RDMAP defines a Terminate operation
        that SHOULD be invoked when\n   either an RDMAP error is encountered or an
        LLP error is surfaced to\n   the RDMAP layer by the LLP.\n   It is not always
        possible to send the Terminate Message.  For\n   example, certain LLP errors
        may occur that cause the LLP Stream to be\n   torn down a) before RDMAP is
        aware of the error, b) before RDMAP is\n   able to send the Terminate Message,
        or c) after RDMAP has posted the\n   Terminate Message to the LLP, but it
        has not yet been transmitted by\n   the LLP.\n   Note that an RDMAP Abortive
        Termination may entail loss of data.  In\n   general, when a Terminate Message
        is received, it is impossible to\n   tell for sure what unacknowledged RDMA
        Messages were Completed\n   successfully at the Remote Peer.  Thus, the state
        of all outstanding\n   RDMA Messages is indeterminate, and the Messages SHOULD
        be considered\n   Completed in error.\n   When a peer sends or receives a
        Terminate Message, it MAY immediately\n   tear down the LLP Stream.  The peer
        SHOULD perform a graceful LLP\n   teardown to ensure the Terminate Message
        is successfully Delivered.\n   See Section 4.8, \"Terminate Header\", for
        a description of the\n   Terminate Message and its contents.  See Section
        5.4, \"Terminate\n   Message\", for a description of the Terminate Message
        semantics.\n"
      title: 6.2.1.  RDMAP Abortive Termination
    title: 6.2.  Stream Teardown
  title: 6.  RDMAP Stream Management
- contents:
  - "7.  RDMAP Error Management\n   The RDMAP protocol does not have RDMAP- or DDP-layer
    error recovery\n   operations built in.  If everything is working, the LLP guarantees\n
    \  will ensure that the Messages are arriving at the destination.\n   If errors
    are detected at the RDMAP or DDP layer, then the RDMAP,\n   DDP, and LLP Streams
    are Abortively Terminated (see Section 4.8,\n   \"Terminate Header\").\n   In
    general, poor implementations or improper ULP programming cause\n   the errors
    detected at the RDMAP and DDP layers.  In these cases,\n   returning a diagnostic
    termination error Message and closing the\n   RDMAP Stream is far simpler than
    attempting to maintain the RDMAP\n   Stream, particularly when the cause of the
    error is not known.\n   If an LLP does not support teardown of a Stream independent
    of other\n   Streams, and an RDMAP error results in the Termination of a specific\n
    \  Stream, then the LLP MUST label the Stream as an erroneous Stream and\n   MUST
    NOT allow any further data transfer on that Stream after RDMAP\n   requests the
    Stream to be torn down.\n   For a specific LLP connection, when all Streams are
    either gracefully\n   torn down or are labeled as erroneous Streams, the LLP connection\n
    \  MUST be torn down.\n   Since errors are detected at the Remote Peer (possibly
    long) after\n   RDMA Messages are passed to the DDP and the LLP at the Local Peer
    and\n   after the RDMA Operations conveyed by the Messages are Completed, the\n
    \  sender cannot easily determine which of its Messages have been\n   received.
    \ (RDMA Reads are an exception to this rule.)\n   For a list of errors returned
    to the Remote Peer as a result of an\n   Abortive Termination, see Section 4.8,
    \"Terminate Header\".\n"
  - contents:
    - "7.1.  RDMAP Error Surfacing\n   If an error occurs at the Local Peer, the RDMAP
      layer MUST attempt to\n   inform the local ULP that the error has occurred.\n
      \  The Local Peer MUST send a Terminate Message for each of the\n   following
      cases:\n   1.  For errors detected while creating RDMA Write, Send, Send with\n
      \      Invalidate, Send with Solicited Event, Send with Solicited Event\n       and
      Invalidate, or RDMA Read Requests, or other reasons not\n       directly associated
      with an incoming Message, the Terminate\n       Message and Error code are sent
      instead of the request.  In this\n       case, the Error Type and Error Code
      fields are included in the\n       Terminate Message, but the Terminated DDP
      Header and Terminated\n       RDMA Header fields are set to zero.\n   2.  For
      errors detected on an incoming RDMA Write, Send, Send with\n       Invalidate,
      Send with Solicited Event, Send with Solicited Event\n       and Invalidate,
      or Read Response Message (after the Message has\n       been Delivered by DDP),
      the Terminate Message is sent at the\n       earliest possible opportunity,
      preferably in the next outgoing\n       RDMA Message.  In this case, the Error
      Type, Error Code, ULP PDU\n       Length, and Terminated DDP Header fields are
      included in the\n       Terminate Message, but the Terminated RDMA Header field
      is set to\n       zero.\n   3.  For errors detected on an incoming RDMA Read
      Request Message\n       (after the Message has been Delivered by DDP), the Terminate\n
      \      Message is sent at the earliest possible opportunity, preferably\n       in
      the next outgoing RDMA Message.  In this case, the Error Type,\n       Error
      Code, ULP PDU Length, Terminated DDP Header, and Terminated\n       RDMA Header
      fields are included in the Terminate Message.\n   4.  If more than one error
      is detected on incoming RDMA Messages,\n       before the Terminate Message
      can be sent, then the first RDMA\n       Message (and its associated DDP Segment)
      that experienced an\n       error MUST be captured by the Terminate Message,
      in accordance\n       with rules 2 and 3 above.\n"
    title: 7.1.  RDMAP Error Surfacing
  - contents:
    - "7.2.  Errors Detected at the Remote Peer on Incoming RDMA Messages\n   On incoming
      RDMA Writes, RDMA Read Response, Sends, Send with\n   Invalidate, Send with
      Solicited Event, Send with Solicited Event and\n   Invalidate, and Terminate
      Messages, the following must be validated:\n   1.  The DDP layer MUST validate
      all DDP Segment fields.\n   2.  The RDMA OpCode MUST be valid.\n   3.  The RDMA
      Version MUST be valid.\n       Additionally, on incoming Send with Invalidate
      and Send with\n       Solicited Event and Invalidate Messages, the following
      must also\n       be validated:\n   4.  The Invalidate STag MUST be valid.\n
      \  5.  The STag MUST be associated to this RDMAP Stream.\n   On incoming RDMA
      Request Messages, the following must be validated:\n   1.  The DDP layer MUST
      validate all Untagged DDP Segment fields.\n   2.  The RDMA OpCode MUST be valid.\n
      \  3.  The RDMA Version MUST be valid.\n   4.  For non-zero length RDMA Read
      Request Messages:\n       a.  The Data Source STag MUST be valid.\n       b.
      \ The Data Source STag MUST be associated to this RDMAP Stream.\n       c.  The
      Data Source Tagged Offset MUST fall in the range of legal\n           offsets
      associated with the Data Source STag.\n       d.  The sum of the Data Source
      Tagged Offset and the RDMA Read\n           Message Size MUST fall in the range
      of legal offsets\n           associated with the Data Source STag.\n       e.
      \ The sum of the Data Source Tagged Offset and the RDMA Read\n           Message
      Size MUST NOT cause the Data Source Tagged Offset to\n           wrap.\n"
    title: 7.2.  Errors Detected at the Remote Peer on Incoming RDMA Messages
  title: 7.  RDMAP Error Management
- contents:
  - "8.  Security Considerations\n   This section references the resources that discuss
    protocol- specific\n   security considerations and implications of using RDMAP
    with existing\n   security services.  A detailed analysis of the security issues
    around\n   implementation and use of the RDMAP can be found in [RDMASEC].\n   [RDMASEC]
    introduces the RDMA reference model and discusses how the\n   resources of this
    model are vulnerable to attacks and the types of\n   attack these vulnerabilities
    are subject to.  It also details the\n   levels of Trust available in this peer-to-peer
    model and how this\n   defines the nature of resource sharing.\n   The IPsec requirements
    for RDDP are based on the version of IPsec\n   specified in RFC 2401 [RFC2401]
    and related RFCs, as profiled by RFC\n   3723 [RFC3723], despite the existence
    of a newer version of IPsec\n   specified in RFC 4301 [RFC4301] and related RFCs
    [RFC4303],\n   [RFC4306], [RFC4835].  One of the important early applications
    of the\n   RDDP protocols is their use with iSCSI [iSER]; RDDP's IPsec\n   requirements
    follow those of IPsec in order to facilitate that usage\n   by allowing a common
    profile of IPsec to be used with iSCSI and the\n   RDDP protocols.  In the future,
    RFC 3723 may be updated to the newer\n   version of IPsec, and the IPsec security
    requirements of any such\n   update should apply uniformly to iSCSI and the RDDP
    protocols.\n"
  - contents:
    - "8.1.  Summary of RDMAP-Specific Security Requirements\n   [RDMASEC] defines
      the security requirements for the implementation of\n   the components of the
      RDMA reference model, namely the RDMA enabled\n   NIC (RNIC) and the Privileged
      Resource Manager.  An RDMAP\n   implementation conforming to this specification
      MUST conform to these\n   requirements.\n"
    - contents:
      - "8.1.1.  RDMAP (RNIC) Requirements\n   RDMAP provides several countermeasures
        for all types of attacks as\n   introduced in [RDMASEC].  In the following,
        this specification lists\n   all security requirements that MUST be implemented
        by the RNIC.  A\n   more detailed discussion of RNIC security requirements
        can be found\n   in Section 5 of [RDMASEC].\n   1.  An RNIC MUST ensure that
        a specific Stream in a specific\n       Protection Domain cannot access an
        STag in a different Protection\n       Domain.\n   2.  An RNIC MUST ensure
        that if an STag is limited in scope to a\n       single Stream, no other Stream
        can use the STag.\n   3.  An RNIC MUST ensure that a Remote Peer is not able
        to access\n       memory outside of the buffer specified when the STag was
        enabled\n       for remote access.\n   4.  An RNIC MUST provide a mechanism
        for the ULP to establish and\n       revoke the association of a ULP Buffer
        to an STag and TO range.\n   5.  An RNIC MUST provide a mechanism for the
        ULP to establish and\n       revoke read, write, or read and write access
        to the ULP Buffer\n       referenced by an STag.\n   6.  An RNIC MUST ensure
        that the network interface can no longer\n       modify an Advertised Buffer
        after the ULP revokes remote access\n       rights for an STag.\n   7.  An
        RNIC MUST ensure that a Remote Peer is not able to invalidate\n       an STag
        enabled for remote access, if the STag is shared on\n       multiple streams.\n
        \  8.  An RNIC MUST choose the value of STags in a way difficult to\n       predict.
        \ It is RECOMMENDED to sparsely populate them over the\n       full available
        range.\n   9.  An RNIC MUST NOT enable sharing a Completion Queue (CQ) across\n
        \      ULPs that do not share partial mutual trust.\n   10. An RNIC MUST ensure
        that if a CQ overflows, any Streams that do\n       not use the CQ MUST remain
        unaffected.\n   11. An RNIC implementation SHOULD provide a mechanism to cap
        the\n       number of outstanding RDMA Read Requests.\n   12. An RNIC MUST
        NOT enable firmware to be loaded on the RNIC\n       directly from an untrusted
        Local Peer or Remote Peer, unless the\n       Peer is properly authenticated*,
        and the update is done via a\n       secure protocol, such as IPsec.\n       *
        by a mechanism outside the scope of this specification.  The\n         mechanism
        presumably entails authenticating that the remote ULP\n         has the right
        to perform the update.\n"
      title: 8.1.1.  RDMAP (RNIC) Requirements
    - contents:
      - "8.1.2.  Privileged Resource Manager Requirements\n   With RDMAP, all reservations
        of local resources are initiated from\n   local ULPs.  To protect from local
        attacks including unfair resource\n   distribution and gaining unauthorized
        access to RNIC resources, a\n   Privileged Resource Manager (PRM) must be
        implemented, which manages\n   all local resource allocation.  Note that the
        PRM must not be\n   provided as an independent component, and its functionality
        can also\n   be implemented as part of the privileged ULP or as part of the
        RNIC\n   itself.\n   A PRM implementation must meet the following security
        requirements (a\n   more detailed discussion of PRM security requirements
        can be found in\n   Section 5 of [RDMASEC]):\n   1.  All Non-Privileged ULP
        interactions with the RNIC Engine that\n       could affect other ULPs MUST
        be done using the Resource Manager\n       as a proxy.\n   2.  All ULP resource
        allocation requests for scarce resources MUST\n       also be done using a
        Privileged Resource Manager.\n   3.  The Privileged Resource Manager MUST
        NOT assume that different\n       ULPs share Partial Mutual Trust unless there
        is a mechanism to\n       ensure that the ULPs do indeed share partial mutual
        trust.\n   4.  If Non-Privileged ULPs are supported, the Privileged Resource\n
        \      Manager MUST verify that the Non-Privileged ULP has the right to\n
        \      access a specific Data Buffer before allowing an STag for which\n       the
        ULP has access rights to be associated with a specific Data\n       Buffer.\n
        \  5.  The Privileged Resource Manager MUST control the allocation of CQ\n
        \      entries.\n   6.  The Privileged Resource Manager SHOULD prevent a Local
        Peer from\n       allocating more than its fair share of resources.\n   7.
        \ RDMA Read Request Queue resource consumption MUST be controlled\n       by
        the Privileged Resource Manager such that RDMAP/DDP Streams\n       that do
        not share Partial Mutual Trust do not share RDMA Read\n       Request Queue
        resources.\n   8.  If an RNIC provides the ability to share receive buffers
        across\n       multiple Streams, the combination of the RNIC and the Privileged\n
        \      Resource Manager MUST be able to detect if the Remote Peer is\n       attempting
        to consume more than its fair share of resources so\n       that the Local
        Peer can apply countermeasures to detect and\n       prevent the attack.\n"
      title: 8.1.2.  Privileged Resource Manager Requirements
    title: 8.1.  Summary of RDMAP-Specific Security Requirements
  - contents:
    - "8.2.  Security Services for RDMAP\n   RDMAP is using IP-based network services
      to control, read, and write\n   data buffers over the network.  Therefore, all
      exchanged control and\n   data packets are vulnerable to spoofing, tampering,
      and information\n   disclosure attacks.\n   RDMAP Streams that are subject to
      impersonation attacks or Stream\n   hijacking attacks can be authenticated,
      have their integrity\n   protected, and be protected from replay attacks.  Furthermore,\n
      \  confidentiality protection can be used to protect from eavesdropping.\n"
    - contents:
      - "8.2.1.  Available Security Services\n   The IPsec protocol suite [RFC2401]
        defines strong countermeasures to\n   protect an IP stream from those attacks.
        \ Several levels of\n   protection can guarantee session confidentiality,
        per-packet source\n   authentication, per-packet integrity, and correct packet
        sequencing.\n   RDMAP security may also profit from SSL or TLS security services\n
        \  provided for TCP-based ULPs [RFC4346].  Used underneath RDMAP, these\n
        \  security services also provide for stream authentication, data\n   integrity,
        and confidentiality.  As discussed in [RDMASEC],\n   limitations on the maximum
        packet length to be carried over the\n   network and potentially inefficient
        out-of-order packet processing at\n   the data sink make SSL and TLS less
        appropriate for RDMAP than IPsec.\n   If SSL is layered on top of RDMAP, SSL
        does not protect the RDMAP\n   headers.  Thus, a man-in-the-middle attack
        can still occur by\n   modifying the RDMAP header to incorrectly place the
        data into the\n   wrong buffer, thus effectively corrupting the data stream.\n
        \  By remaining independent of ULP and LLP security protocols, RDMAP\n   will
        benefit from continuing improvements at those layers.  Users are\n   provided
        flexibility to adapt to their specific security requirements\n   and the ability
        to adapt to future security challenges.  Given this,\n   the vulnerabilities
        of RDMAP to active third-party interference are\n   no greater than any other
        protocol running over an LLP such as TCP or\n   SCTP.\n"
      title: 8.2.1.  Available Security Services
    - contents:
      - "8.2.2.  Requirements for IPsec Services for RDMAP\n   Because IPsec is designed
        to secure arbitrary IP packet streams,\n   including streams where packets
        are lost, RDMAP can run on top of\n   IPsec without any change.  IPsec packets
        are processed (e.g.,\n   integrity checked and possibly decrypted) in the
        order they are\n   received, and an RDMAP Data Sink will process the decrypted
        RDMA\n   Messages contained in these packets in the same manner as RDMA\n
        \  Messages contained in unsecured IP packets.\n   The IP Storage working
        group has defined the normative IPsec\n   requirements for IP Storage [RFC3723].
        \ Portions of this\n   specification are applicable to the RDMAP.  In particular,
        a\n   compliant implementation of IPsec services for RDMAP MUST meet the\n
        \  requirements as outlined in Section 2.3 of [RFC3723].  Without\n   replicating
        the detailed discussion in [RFC3723], this includes the\n   following requirements:\n
        \  1.  The implementation MUST support IPsec ESP [RFC2406], as well as\n       the
        replay protection mechanisms of IPsec.  When ESP is utilized,\n       per-packet
        data origin authentication, integrity, and replay\n       protection MUST
        be used.\n   2.  It MUST support ESP in tunnel mode and MAY implement ESP
        in\n       transport mode.\n   3.  It MUST support IKE [RFC2409] for peer
        authentication,\n       negotiation of security associations, and key management,
        using\n       the IPsec DOI [RFC2407].\n   4.  It MUST NOT interpret the receipt
        of a IKE Phase 2 delete message\n       as a reason for tearing down the RDMAP
        stream.  Since IPsec\n       acceleration hardware may only be able to handle
        a limited number\n       of active IKE Phase 2 SAs, idle SAs may be dynamically
        brought\n       down, and a new SA be brought up again, if activity resumes.\n
        \  5.  It MUST support peer authentication using a pre-shared key, and\n       MAY
        support certificate-based peer authentication using digital\n       signatures.
        \ Peer authentication using the public key encryption\n       methods [RFC2409]
        SHOULD NOT be used.\n   6.  It MUST support IKE Main Mode and SHOULD support
        Aggressive Mode.\n       IKE Main Mode with pre-shared key authentication
        SHOULD NOT be\n       used when either of the peers uses a dynamically assigned
        IP\n       address.\n   7.  When digital signatures are used to achieve authentication,\n
        \      either IKE Main Mode or IKE Aggressive Mode MAY be used.  In\n       these
        cases, an IKE negotiator SHOULD use IKE Certificate Request\n       Payload(s)
        to specify the certificate authority (or authorities)\n       that are trusted
        in accordance with its local policy.  IKE\n       negotiators SHOULD check
        the pertinent Certificate Revocation\n       List (CRL) before accepting a
        PKI certificate for use in IKE's\n       authentication procedures.\n   8.
        \ Access to locally stored secret information (pre-shared or\n       private
        key for digital signing) must be suitably restricted,\n       since compromise
        of the secret information nullifies the security\n       properties of the
        IKE/IPsec protocols.\n   9.  It MUST follow the guidelines of Section 2.3.4
        of [RFC3723] on\n       the setting of IKE parameters to achieve a high level
        of\n       interoperability without requiring extensive configuration.\n   Furthermore,
        implementation and deployment of the IPsec services for\n   RDDP should follow
        the Security Considerations outlined in Section 5\n   of [RFC3723].\n"
      title: 8.2.2.  Requirements for IPsec Services for RDMAP
    title: 8.2.  Security Services for RDMAP
  title: 8.  Security Considerations
- contents:
  - "9.  IANA Considerations\n   This document requests no direct action from IANA.
    \ The following\n   consideration is listed here as commentary.\n   If RDMAP was
    enabled a priori for a ULP by connecting to a well-known\n   port, this well-known
    port would be registered for the RDMAP with\n   IANA.  The registration of the
    well-known port will be the\n   responsibility of the ULP specification.\n"
  title: 9.  IANA Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [DDP]     Shah, H., Pinkerton, J., Recio, R.,
      and P. Culley, \"Direct\n             Data Placement over Reliable Transports\",
      RFC 5041, October\n             2007.\n   [iSER]    Ko, M., Chadalapaka, M.,
      Hufferd, J., Elzur, U., Shah, H.,\n             and P. Thaler, \"Internet Small
      Computer System Interface\n             (iSCSI) Extensions for Remote Direct
      Memory Access (RDMA)\"\n             RFC 5046, October 2007.\n   [MPA]     Culley,
      P., Elzur, U., Recio, R., Bailey, S., and J.\n             Carrier, \"Marker
      PDU Aligned Framing for TCP\n             Specification\", RFC 5044, October
      2007.\n   [RDMASEC] Pinkerton, J. and E. Deleganes, \"Direct Data Placement\n
      \            Protocol (DDP) / Remote Direct Memory Access Protocol\n             (RDMAP)
      Security\", RFC 5042, October 2007.\n   [RFC2119] Bradner, S., \"Key words for
      use in RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC2406] Kent, S. and R. Atkinson, \"IP Encapsulating Security\n
      \            Payload (ESP)\", RFC 2406, November 1998.\n   [RFC2407] Piper,
      D., \"The Internet IP Security Domain of\n             Interpretation of ISAKMP\",
      RFC 2407, November 1998.\n   [RFC2409] Harkins, D. and D. Carrel, \"The Internet
      Key Exchange\n             (IKE)\", RFC 2409, November 1998.\n   [RFC3723] Aboba,
      B., Tseng, J., Walker, J., Rangan, V., and F.\n             Travostino, \"Securing
      Block Storage Protocols over IP\", RFC\n             3723, April 2004.\n   [RFC2401]
      Kent, S. and R. Atkinson, \"Security Architecture for the\n             Internet
      Protocol\", RFC 2401, November 1998.\n   [SCTP]    Stewart, R., Ed., \"Stream
      Control Transmission Protocol\",\n             RFC 4960, September 2007.\n   [TCP]
      \    Postel, J., \"Transmission Control Protocol\", STD 7, RFC\n             793,
      September 1981.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC4301] Kent, S. and K. Seo, \"Security
      Architecture for the\n             Internet Protocol\", RFC 4301, December 2005.\n
      \  [RFC4303] Kent, S., \"IP Encapsulating Security Payload (ESP)\", RFC\n             4303,
      December 2005.\n   [RFC4306] Kaufman, C., \"Internet Key Exchange (IKEv2) Protocol\",
      RFC\n             4306, December 2005.\n   [RFC4346] Dierks, T. and E. Rescorla,
      \"The TLS Protocol Version 1.1\",\n             RFC 4346, April 2006.\n   [RFC4835]
      Manral, V., \"Cryptographic Algorithm Implementation\n             Requirements
      for Encapsulating Security Payload (ESP) and\n             Authentication Header
      (AH)\", RFC 4835, April 2007.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  DDP Segment Formats for RDMA Messages\n   This appendix is for information
    only and is NOT part of the\n   standard. It simply depicts the DDP Segment format
    for the various\n   RDMA Messages.\n"
  - contents:
    - "A.1.  DDP Segment for RDMA Write\n   The following figure depicts an RDMA Write,
      DDP Segment:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n                                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                                  |   DDP Control | RDMA Control  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                       Data Sink STag                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                   Data Sink Tagged Offset                     |\n   +                                                               +\n
      \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                   RDMA Write ULP Payload                      |\n   //
      \                                                            //\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            Figure
      11:  RDMA Write, DDP Segment Format\n"
    title: A.1.  DDP Segment for RDMA Write
  - contents:
    - "A.2.  DDP Segment for RDMA Read Request\n   The following figure depicts an
      RDMA Read Request, DDP Segment:\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n                                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                                  |  DDP Control  | RDMA Control  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Reserved (Not Used)                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |              DDP (RDMA Read Request) Queue Number             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |        DDP (RDMA Read Request) Message Sequence Number        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             DDP (RDMA Read Request) Message Offset            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                     Data Sink STag (SinkSTag)                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   +                  Data
      Sink Tagged Offset (SinkTO)             +\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                  RDMA
      Read Message Size (RDMARDSZ)            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                     Data Source STag (SrcSTag)                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   +                 Data
      Source Tagged Offset (SrcTO)             +\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            Figure
      12: RDMA Read Request, DDP Segment format\n"
    title: A.2.  DDP Segment for RDMA Read Request
  - contents:
    - "A.3.  DDP Segment for RDMA Read Response\n   The following figure depicts an
      RDMA Read Response, DDP Segment:\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n                                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                                  |  DDP Control  | RDMA Control  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                       Data Sink STag                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                   Data Sink Tagged Offset                     |\n   +                                                               +\n
      \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                RDMA Read Response ULP Payload                 |\n   //
      \                                                            //\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n           Figure
      13: RDMA Read Response, DDP Segment Format\n"
    title: A.3.  DDP Segment for RDMA Read Response
  - contents:
    - "A.4.  DDP Segment for Send and Send with Solicited Event\n   The following
      figure depicts a Send and Send with Solicited\n   Request, DDP Segment:\n    0
      \                  1                   2                   3\n    0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n                                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                                  |  DDP Control  | RDMA Control  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Reserved (Not Used)                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                       (Send) Queue Number                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                 (Send) Message Sequence Number                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      (Send) Message Offset                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                       Send ULP Payload                        |\n   //
      \                                                            //\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Figure
      14: Send and Send with Solicited Event, DDP Segment Format\n"
    title: A.4.  DDP Segment for Send and Send with Solicited Event
  - contents:
    - "A.5.  DDP Segment for Send with Invalidate and Send with SE and\n      Invalidate\n
      \  The following figure depicts a Send with Invalidate and Send with\n   Solicited
      and Invalidate Request, DDP Segment:\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n                                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                                  |   DDP Control | RDMA Control  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         Invalidate STag                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                       (Send) Queue Number                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                 (Send) Message Sequence Number                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      (Send) Message Offset                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                       Send ULP Payload                        |\n   //
      \                                                            //\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Figure
      15: Send with Invalidate and Send with SE and Invalidate,\n                            DDP
      Segment Format\n"
    title: A.5.  DDP Segment for Send with Invalidate and Send with SE and
  - contents:
    - "A.6.  DDP Segment for Terminate\n   The following figure depicts a Terminate,
      DDP Segment:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n                                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                                  |   DDP Control | RDMA Control  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Reserved (Not Used)                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                   DDP (Terminate) Queue Number                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             DDP (Terminate) Message Sequence Number           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                  DDP (Terminate) Message Offset               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Terminate Control             |      Reserved           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  DDP Segment Length (if any)  |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              +\n   |                                                               |\n
      \  +                                                               +\n   |                 Terminated
      DDP Header (if any)                |\n   +                                                               +\n
      \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   //
      \                                                            //\n   |                 Terminated
      RDMA Header (if any)               |\n   +                                                               +\n
      \  |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \              Figure 16: Terminate, DDP Segment Format\n"
    title: A.6.  DDP Segment for Terminate
  title: Appendix A.  DDP Segment Formats for RDMA Messages
- contents:
  - "Appendix B.  Ordering and Completion Table\n   The following table summarizes
    the ordering relationships that are\n   defined in Section 5.5, \"Ordering and
    Completions\", from the\n   standpoint of the local peer issuing the two Operations.
    \ Note that\n   in the table that follows, Send includes Send, Send with Invalidate,\n
    \  Send with Solicited Event, and Send with Solicited Event and\n   Invalidate.\n
    \  ------+-------+----------------+----------------+----------------\n   First
    | Later | Placement      | Placement      | Ordering\n    Op   | Op    | guarantee
    at   | guarantee at   | guarantee at\n         |       | Remote Peer    | Local
    Peer     | Remote Peer\n         |       |                |                |\n
    \  ------+-------+----------------+----------------+----------------\n   Send
    \ | Send  | No placement   | Not applicable | Completed in\n         |       |
    guarantee. If  |                | order.\n         |       | guarantee is   |
    \               |\n         |       | necessary, see |                |\n         |
    \      | footnote 1.    |                |\n   ------+-------+----------------+----------------+----------------\n
    \  Send  | RDMA  | No placement   | Not applicable | Not applicable\n         |
    Write | guarantee. If  |                |\n         |       | guarantee is   |
    \               |\n         |       | necessary, see |                |\n         |
    \      | footnote 1.    |                |\n   ------+-------+----------------+----------------+----------------\n
    \  Send  | RDMA  | No placement   | RDMA Read      | RDMA Read\n         | Read
    \ | guarantee      | Response       | Response\n         |       | between Send
    \  | Payload will   | Message will\n         |       | Payload and    | not be
    placed  | not be\n         |       | RDMA Read      | at the local   | generated
    until\n         |       | Request Header | peer until the | Send has been\n         |
    \      |                | Send Payload is| Completed\n         |       |                |
    placed at the  |\n         |       |                | Remote Peer    |\n   ------+-------+----------------+----------------+----------------\n
    \  RDMA  | Send  | No placement   | Not applicable | Not applicable\n   Write
    |       | guarantee. If  |                |\n         |       | guarantee is   |
    \               |\n         |       | necessary, see |                |\n         |
    \      | footnote 1.    |                |\n   ------+-------+----------------+----------------+----------------\n
    \  RDMA  | RDMA  | No placement   | Not applicable | Not applicable\n   Write
    | Write | guarantee. If  |                |\n         |       | guarantee is   |
    \               |\n         |       | necessary, see |                |\n         |
    \      | footnote 1.    |                |\n   ------+-------+----------------+----------------+----------------\n
    \  RDMA  | RDMA  | No placement   | RDMA Read      | Not applicable\n   Write
    | Read  | guarantee      | Response       |\n         |       | between RDMA   |
    Payload will   |\n         |       | Write Payload  | not be placed  |\n         |
    \      | and RDMA Read  | at the local   |\n         |       | Request Header
    | peer until the |\n         |       |                | RDMA Write     |\n         |
    \      |                | Payload is     |\n         |       |                |
    placed at the  |\n         |       |                | Remote Peer    |\n   ------+-------+----------------+----------------+----------------\n
    \  RDMA  | Send  | No placement   | Send Payload   | Not applicable\n   Read  |
    \      | guarantee      | may be placed  |\n         |       | between RDMA   |
    at the remote  |\n         |       | Read Request   | peer before the|\n         |
    \      | Header and Send| RDMA Read      |\n         |       | payload        |
    Response is    |\n         |       |                | generated.     |\n         |
    \      |                | If guarantee is|\n         |       |                |
    necessary, see |\n         |       |                | footnote 2.    |\n   ------+-------+----------------+----------------+----------------\n
    \  RDMA  | RDMA  | No placement   | RDMA Write     | Not applicable\n   Read  |
    Write | guarantee      | Payload may be |\n         |       | between RDMA   |
    placed at the  |\n         |       | Read Request   | Remote Peer    |\n         |
    \      | Header and RDMA| before the RDMA|\n         |       | Write payload  |
    Read Response  |\n         |       |                | is generated.  |\n         |
    \      |                | If guarantee is|\n         |       |                |
    necessary, see |\n         |       |                | footnote 2.    |\n   ------+-------+----------------+----------------+----------------\n
    \  RDMA  | RDMA  | No placement   | No placement   | Second RDMA\n   Read  | Read
    \ | guarantee of   | guarantee of   | Read Response\n         |       | the two
    RDMA   | the two RDMA   | will not be\n         |       | Read Request   | Read
    Response  | generated until\n         |       | Headers        | Payloads.      |
    first RDMA Read\n         |       | Additionally,  |                | Response
    is\n         |       | there is no    |                | generated.\n         |
    \      | guarantee that |                |\n         |       | the Tagged     |
    \               |\n         |       | Buffers        |                |\n         |
    \      | referenced in  |                |\n         |       | the RDMA Read  |
    \               |\n         |       | will be read in|                |\n         |
    \      | order          |                |\n                    Figure 17: Operation
    Ordering\n   Footnote 1:  If the guarantee is necessary, a ULP may insert an RDMA\n
    \  Read operation and wait for it to complete to act as a Fence.\n   Footnote
    2:  If the guarantee is necessary, a ULP may wait for the\n   RDMA Read operation
    to complete before performing the Send.\n"
  title: Appendix B.  Ordering and Completion Table
- contents:
  - "Appendix C.  Contributors\n   Dwight Barron\n   Hewlett-Packard Company\n   20555
    SH 249\n   Houston, TX  77070-2698 USA\n   Phone:  281-514-2769\n   EMail:  dwight.barron@hp.com\n
    \  Caitlin Bestler\n   Broadcom Corporation\n   16215 Alton Parkway\n   Irvine,
    CA  92619-7013 USA\n   Phone:  949-926-6383\n   EMail:  caitlinb@broadcom.com\n
    \  John Carrier\n   Cray, Inc.\n   411 First Avenue S, Suite 600\n   Seattle,
    WA  98104-2860 USA\n   Phone: 206-701-2090\n   EMail: carrier@cray.com\n   Ted
    Compton\n   EMC Corporation\n   Research Triangle Park, NC  27709 USA\n   Phone:
    919-248-6075\n   EMail: compton_ted@emc.com\n   Uri Elzur\n   Broadcom Corporation\n
    \  16215 Alton Parkway\n   Irvine, California  92619-7013 USA\n   Phone: +1 (949)
    585-6432\n   EMail: Uri@Broadcom.com\n   Hari Ghadia\n   Gen10 Technology, Inc.\n
    \  1501 W Shady Grove Road\n   Grand Prairie, TX 75050\n   Phone: (972) 301 3630\n
    \  EMail: hghadia@gen10technology.com\n   Howard C. Herbert\n   Intel Corporation\n
    \  MS CH7-404\n   5000 West Chandler Blvd.\n   Chandler, Arizona  85226\n   Phone:
    480-554-3116\n   EMail: howard.c.herbert@intel.com\n   Mike Ko\n   IBM\n   650
    Harry Rd.\n   San Jose, CA  95120\n   Phone: (408) 927-2085\n   EMail: mako@us.ibm.com\n
    \  Mike Krause\n   Hewlett-Packard Company\n   43LN\n   19410 Homestead Road\n
    \  Cupertino, CA  95014 USA\n   Phone: 408-447-3191\n   EMail: krause@cup.hp.com\n
    \  Dave Minturn\n   Intel Corporation\n   MS JF1-210\n   5200 North East Elam
    Young Parkway\n   Hillsboro, Oregon  97124\n   Phone: 503-712-4106\n   EMail:
    dave.b.minturn@intel.com\n   Mike Penna\n   Broadcom Corporation\n   16215 Alton
    Parkway\n   Irvine, California  92619-7013 USA\n   Phone: +1 (949) 926-7149\n
    \  EMail: MPenna@Broadcom.com\n   Jim Pinkerton\n   Microsoft, Inc.\n   One Microsoft
    Way\n   Redmond, WA  98052 USA\n   EMail:  jpink@microsoft.com\n   Hemal Shah\n
    \  Broadcom Corporation\n   5300 California Avenue\n   Irvine, CA 92617 USA\n
    \  Phone: +1 (949) 926-6941\n   EMail: hemal@broadcom.com\n   Allyn Romanow\n
    \  Cisco Systems\n   170 W Tasman Drive\n   San Jose, CA  95134 USA\n   Phone:
    +1 408 525 8836\n   EMail: allyn@cisco.com\n   Tom Talpey\n   Network Appliance\n
    \  1601 Trapelo Road #16\n   Waltham, MA  02451 USA\n   Phone: +1 (781) 768-5329\n
    \  EMail: thomas.talpey@netapp.com\n   Patricia Thaler\n   Broadcom Corporation\n
    \  16215 Alton Parkway\n   Irvine, CA  92619-7013 USA\n   Phone: +1-916-570-2707\n
    \  EMail: pthaler@broadcom.com\n   Jim Wendt\n   Hewlett-Packard Company\n   8000
    Foothills Boulevard MS 5668\n   Roseville, CA  95747-5668 USA\n   Phone: +1 916
    785 5198\n   EMail: jim_wendt@hp.com\n   Madeline Vega\n   IBM\n   11400 Burnet
    Rd. Bld.45-2L-007\n   Austin, TX  78758 USA\n   Phone: 512-838-7739\n   EMail:
    mvega1@us.ibm.com\n   Claudia Salzberg\n   IBM\n   11501 Burnet Rd. Bld.902-5B-014\n
    \  Austin, TX  78758 USA\n   Phone: 512-838-5156\n   EMail: salzberg@us.ibm.com\n"
  title: Appendix C.  Contributors
- contents:
  - "Authors' Addresses\n   Renato J. Recio\n   IBM Corp.\n   11501 Burnett Road\n
    \  Austin, TX  78758 USA\n   Phone: 512-838-3685\n   EMail: recio@us.ibm.com\n
    \  Bernard Metzler\n   IBM Research GmbH\n   Zurich Research Laboratory\n   Saeumerstrasse
    4\n   CH-8803 Rueschlikon, Switzerland\n   Phone: +41 44 724 8605\n   EMail: bmt@zurich.ibm.com\n
    \  Paul R. Culley\n   Hewlett-Packard Company\n   20555 SH 249\n   Houston, TX
    \ 77070-2698 USA\n   Phone: 281-514-5543\n   EMail: paul.culley@hp.com\n   Jeff
    Hilland\n   Hewlett-Packard Company\n   20555 SH 249\n   Houston, TX  77070-2698
    USA\n   Phone: 281-514-9489\n   EMail: jeff.hilland@hp.com\n   Dave Garcia\n   24100
    Hutchinson Rd.\n   Los Gatos, CA 95033 USA\n   Phone: +1 (831) 247-4464\n   Email:
    Dave.Garcia@StanfordAlumni.org\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
