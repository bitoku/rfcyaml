- title: __initial_text__
  contents:
  - '        A One-Way Delay Metric for IP Performance Metrics (IPPM)

    '
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a metric for one-way delay of packets across\n\
    \   Internet paths.  It builds on notions introduced and discussed in the\n  \
    \ IP Performance Metrics (IPPM) Framework document, RFC 2330; the\n   reader is\
    \ assumed to be familiar with that document.  This memo makes\n   RFC 2679 obsolete.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7679.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Motivation .................................................4\n  \
    \ 2. General Issues regarding Time ...................................6\n   3.\
    \ A Singleton Definition for One-Way Delay ........................7\n      3.1.\
    \ Metric Name ................................................7\n      3.2. Metric\
    \ Parameters ..........................................7\n      3.3. Metric Units\
    \ ...............................................7\n      3.4. Definition .................................................7\n\
    \      3.5. Discussion .................................................8\n  \
    \    3.6. Methodologies ..............................................9\n    \
    \  3.7. Errors and Uncertainties ..................................10\n      \
    \     3.7.1. Errors or Uncertainties Related to Clocks ..........10\n        \
    \   3.7.2. Errors or Uncertainties Related to Wire\n                  Time vs.\
    \ Host Time .................................11\n           3.7.3. Calibration\
    \ of Errors and Uncertainties ............12\n      3.8. Reporting the Metric\
    \ ......................................14\n           3.8.1. Type-P .............................................14\n\
    \           3.8.2. Loss Threshold .....................................15\n  \
    \         3.8.3. Calibration Results ................................15\n    \
    \       3.8.4. Path ...............................................15\n   4. A\
    \ Definition for Samples of One-Way Delay ......................15\n      4.1.\
    \ Metric Name ...............................................16\n      4.2. Metric\
    \ Parameters .........................................16\n      4.3. Metric Units\
    \ ..............................................16\n      4.4. Definition ................................................17\n\
    \      4.5. Discussion ................................................17\n  \
    \    4.6. Methodologies .............................................18\n    \
    \  4.7. Errors and Uncertainties ..................................18\n      4.8.\
    \ Reporting the Metric ......................................18\n   5. Some Statistics\
    \ Definitions for One-Way Delay ..................18\n      5.1. Type-P-One-way-Delay-Percentile\
    \ ...........................19\n      5.2. Type-P-One-way-Delay-Median ...............................19\n\
    \      5.3. Type-P-One-way-Delay-Minimum ..............................20\n  \
    \    5.4. Type-P-One-way-Delay-Inverse-Percentile ...................20\n   6.\
    \ Security Considerations ........................................21\n   7. Changes\
    \ from RFC 2679 ..........................................22\n   8. References\
    \ .....................................................24\n      8.1. Normative\
    \ References ......................................24\n      8.2. Informative\
    \ References ....................................25\n   Acknowledgements ..................................................26\n\
    \   Authors' Addresses ................................................27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo defines a metric for one-way delay of packets\
    \ across\n   Internet paths.  It builds on notions introduced and discussed in\
    \ the\n   IPPM Framework document, [RFC2330]; the reader is assumed to be\n  \
    \ familiar with that document and its recent update [RFC7312].\n   This memo is\
    \ intended to be parallel in structure to a companion\n   document for Packet\
    \ Loss (\"A One-way Packet Loss Metric for IPPM\")\n   [RFC7680].\n   The key\
    \ words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"\
    SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n\
    \   document are to be interpreted as described in [RFC2119].  Although\n   [RFC2119]\
    \ was written with protocols in mind, the key words are used\n   in this document\
    \ for similar reasons.  They are used to ensure the\n   results of measurements\
    \ from two different implementations are\n   comparable and to note instances\
    \ when an implementation could perturb\n   the network.\n   Whenever a technical\
    \ term from the IPPM Framework document is first\n   used in this memo, it will\
    \ be tagged with a trailing asterisk.  For\n   example, \"term*\" indicates that\
    \ \"term\" is defined in the Framework\n   document.\n   The structure of the\
    \ memo is as follows:\n   o  A 'singleton*' analytic metric, called Type-P-One-way-Delay,\
    \ will\n      be introduced to measure a single observation of one-way delay.\n\
    \   o  Using this singleton metric, a 'sample*' called Type-P-One-way-\n     \
    \ Delay-Poisson-Stream is introduced to measure a sequence of\n      singleton\
    \ delays sent at times taken from a Poisson process,\n      defined in Section\
    \ 11.1.1 of [RFC2330].\n   o  Using this sample, several 'statistics*' of the\
    \ sample will be\n      defined and discussed.  This progression from singleton\
    \ to sample\n      to statistics, with clear separation among them, is important.\n"
- title: 1.1.  Motivation
  contents:
  - "1.1.  Motivation\n   Understanding one-way delay of a Type-P* packet from a source\
    \ host*\n   to a destination host is useful for several reasons:\n   o  Some applications\
    \ do not perform well (or at all) if end-to-end\n      delay between hosts is\
    \ large relative to some threshold value.\n   o  Erratic variation in delay makes\
    \ it difficult (or impossible) to\n      support many real-time applications.\n\
    \   o  The larger the value of delay, the more difficult it is for\n      transport-layer\
    \ protocols to sustain high bandwidths.\n   o  The minimum value of this metric\
    \ provides an indication of the\n      delay due only to propagation and transmission\
    \ delay.\n   o  The minimum value of this metric provides an indication of the\n\
    \      delay that will likely be experienced when the path* traversed is\n   \
    \   lightly loaded.\n   o  Values of this metric above the minimum provide an\
    \ indication of\n      the congestion present in the path.\n   The measurement\
    \ of one-way delay instead of round-trip delay is\n   motivated by the following\
    \ factors:\n   o  In today's Internet, the path from a source to a destination\
    \ may\n      be different than the path from the destination back to the source\n\
    \      (\"asymmetric paths\"), such that different sequences of routers are\n\
    \      used for the forward and reverse paths.  Therefore, round-trip\n      measurements\
    \ actually measure the performance of two distinct\n      paths together.  Measuring\
    \ each path independently highlights the\n      performance difference between\
    \ the two paths that may traverse\n      different Internet service providers\
    \ and even radically different\n      types of networks (for example, research\
    \ versus commodity\n      networks, or networks with asymmetric link capacities,\
    \ or wireless\n      versus wireline access).\n   o  Even when the two paths are\
    \ symmetric, they may have radically\n      different performance characteristics\
    \ due to asymmetric queuing.\n   o  Performance of an application may depend mostly\
    \ on the performance\n      in one direction.  For example, a TCP-based communication\
    \ will\n      experience reduced throughput if congestion occurs in one\n    \
    \  direction of its communication.  Troubleshooting may be simplified\n      if\
    \ the congested direction of TCP transmission can be identified.\n   o  In networks\
    \ in which quality of service (QoS) is enabled,\n      provisioning in one direction\
    \ may be radically different than\n      provisioning in the reverse direction\
    \ and thus the QoS guarantees\n      differ.  Measuring the paths independently\
    \ allows the verification\n      of both guarantees.\n   It is outside the scope\
    \ of this document to say precisely how delay\n   metrics would be applied to\
    \ specific problems.\n"
- title: 2.  General Issues regarding Time
  contents:
  - "2.  General Issues regarding Time\n   {Comment: The terminology below differs\
    \ from that defined by ITU-T\n   documents (e.g., G.810, \"Definitions and terminology\
    \ for\n   synchronization networks\" and I.356, \"B-ISDN ATM layer cell transfer\n\
    \   performance\") but is consistent with the IPPM Framework document.  In\n \
    \  general, these differences derive from the different backgrounds; the\n   ITU-T\
    \ documents historically have a telephony origin, while the\n   authors of this\
    \ document (and the Framework document) have a computer\n   systems background.\
    \  Although the terms defined below have no direct\n   equivalent in the ITU-T\
    \ definitions, after our definitions we will\n   provide a rough mapping.  However,\
    \ note one potential confusion: our\n   definition of \"clock\" is the computer\
    \ operating systems definition\n   denoting a time-of-day clock, while the ITU-T\
    \ definition of clock\n   denotes a frequency reference.}\n   Whenever a time\
    \ (i.e., a moment in history) is mentioned here, it is\n   understood to be measured\
    \ in seconds (and fractions) relative to UTC.\n   As described more fully in the\
    \ Framework document, there are four\n   distinct, but related notions of clock\
    \ uncertainty:\n   synchronization*\n   measures the extent to which two clocks\
    \ agree on what time it is.\n   For example, the clock on one host might be 5.4\
    \ msec ahead of the\n   clock on a second host. {Comment: A rough ITU-T equivalent\
    \ is \"time\n   error\".}\n   accuracy*\n   measures the extent to which a given\
    \ clock agrees with UTC.  For\n   example, the clock on a host might be 27.1 msec\
    \ behind UTC. {Comment:\n   A rough ITU-T equivalent is \"time error from UTC\"\
    .}\n   resolution*\n   specification of the smallest unit by which the clock's\
    \ time is\n   updated.  It gives a lower bound on the clock's uncertainty.  For\n\
    \   example, the clock on an old Unix host might tick only once every 10\n   msec,\
    \ and thus have a resolution of only 10 msec. {Comment: A very\n   rough ITU-T\
    \ equivalent is \"sampling period\".}\n   skew*\n   measures the change of accuracy,\
    \ or of synchronization, with time.\n   For example, the clock on a given host\
    \ might gain 1.3 msec per hour\n   and thus be 27.1 msec behind UTC at one time\
    \ and only 25.8 msec an\n   hour later.  In this case, we say that the clock of\
    \ the given host\n   has a skew of 1.3 msec per hour relative to UTC, which threatens\n\
    \   accuracy.  We might also speak of the skew of one clock relative to\n   another\
    \ clock, which threatens synchronization. {Comment: A rough\n   ITU-T equivalent\
    \ is \"time drift\".}\n"
- title: 3.  A Singleton Definition for One-Way Delay
  contents:
  - '3.  A Singleton Definition for One-Way Delay

    '
- title: 3.1.  Metric Name
  contents:
  - "3.1.  Metric Name\n   Type-P-One-way-Delay\n"
- title: 3.2.  Metric Parameters
  contents:
  - "3.2.  Metric Parameters\n   o  Src, the IP address of a host\n   o  Dst, the\
    \ IP address of a host\n   o  T, a time\n   o  Tmax, a loss threshold waiting\
    \ time\n"
- title: 3.3.  Metric Units
  contents:
  - "3.3.  Metric Units\n   The value of a Type-P-One-way-Delay is either a real number\
    \ or an\n   undefined (informally, infinite) number of seconds.\n"
- title: 3.4.  Definition
  contents:
  - "3.4.  Definition\n   For a real number dT, >>the *Type-P-One-way-Delay* from\
    \ Src to Dst at\n   T is dT<< means that Src sent the first bit of a Type-P packet\
    \ to Dst\n   at wire time* T and that Dst received the last bit of that packet\
    \ at\n   wire time T+dT.\n   >>The *Type-P-One-way-Delay* from Src to Dst at T\
    \ is undefined\n   (informally, infinite)<< means that Src sent the first bit\
    \ of a\n   Type-P packet to Dst at wire time T and that Dst did not receive that\n\
    \   packet (within the loss threshold waiting time, Tmax).\n   Suggestions for\
    \ what to report and metric values appear in\n   Section 3.8 after a discussion\
    \ of the metric, methodologies for\n   measuring the metric, and error analysis.\n"
- title: 3.5.  Discussion
  contents:
  - "3.5.  Discussion\n   Type-P-One-way-Delay is a relatively simple analytic metric,\
    \ and one\n   that we believe will afford effective methods of measurement.\n\
    \   The following issues are likely to come up in practice:\n   o  Real delay\
    \ values will be positive.  Therefore, it does not make\n      sense to report\
    \ a negative value as a real delay.  However, an\n      individual zero or negative\
    \ delay value might be useful as part of\n      a stream when trying to discover\
    \ a distribution of a stream of\n      delay values.\n   o  Since delay values\
    \ will often be as low as the 100 usec to 10 msec\n      range, it will be important\
    \ for Src and Dst to synchronize very\n      closely.  Global Positioning System\
    \ (GPS) systems afford one way\n      to achieve synchronization to within several\
    \ tens of usec.\n      Ordinary application of NTP may allow synchronization to\
    \ within\n      several msec, but this depends on the stability and symmetry of\n\
    \      delay properties among those NTP agents used, and this delay is\n     \
    \ what we are trying to measure.  A combination of some GPS-based\n      NTP servers\
    \ and a conservatively designed and deployed set of\n      other NTP servers should\
    \ yield good results.  This was tested in\n      [RFC6808], where a GPS measurement\
    \ system's results compared well\n      with a GPS-based NTP synchronized system\
    \ for the same\n      intercontinental path.\n   o  A given methodology will have\
    \ to include a way to determine\n      whether a delay value is infinite or whether\
    \ it is merely very\n      large (and the packet is yet to arrive at Dst).  As\
    \ noted by\n      Mahdavi and Paxson [RFC2678], simple upper bounds (such as the\
    \ 255\n      seconds theoretical upper bound on the lifetimes of IP packets\n\
    \      [RFC791]) could be used; but good engineering, including an\n      understanding\
    \ of packet lifetimes, will be needed in practice.\n      {Comment: Note that,\
    \ for many applications of these metrics, the\n      harm in treating a large\
    \ delay as infinite might be zero or very\n      small.  A TCP data packet, for\
    \ example, that arrives only after\n      several multiples of the RTT may as\
    \ well have been lost.  See\n      Section 4.1.1 of [RFC6703] for examination\
    \ of unusual packet\n      delays and application performance estimation.}\n \
    \  o  If the packet is duplicated along the path (or paths) so that\n      multiple\
    \ non-corrupt copies arrive at the destination, then the\n      packet is counted\
    \ as received, and the first copy to arrive\n      determines the packet's one-way\
    \ delay.\n   o  If the packet is fragmented and if, for whatever reason,\n   \
    \   reassembly does not occur, then the packet will be deemed lost.\n   o  A given\
    \ methodology will include a way to determine whether the\n      packet is standard-formed,\
    \ the default criteria for all metric\n      definitions defined in Section 15\
    \ of [RFC2330], otherwise the\n      packet will be deemed lost.  Note: At this\
    \ time, the definition of\n      standard-formed packets only applies to IPv4,\
    \ but also see\n      [IPPM-UPDATES].\n"
- title: 3.6.  Methodologies
  contents:
  - "3.6.  Methodologies\n   As with other Type-P-* metrics, the detailed methodology\
    \ will depend\n   on the Type-P (e.g., protocol number, UDP/TCP port number, size,\n\
    \   Differentiated Services (DS) Field [RFC2780]).\n   Generally, for a given\
    \ Type-P, the methodology would proceed as\n   follows:\n   o  Arrange that Src\
    \ and Dst are synchronized; that is, that they have\n      clocks that are very\
    \ closely synchronized with each other and each\n      fairly close to the actual\
    \ time.\n   o  At the Src host, select Src and Dst IP addresses, and form a test\n\
    \      packet of Type-P with these addresses.  Any 'padding' portion of\n    \
    \  the packet needed only to make the test packet a given size should\n      be\
    \ filled with randomized bits to avoid a situation in which the\n      measured\
    \ delay is lower than it would otherwise be, due to\n      compression techniques\
    \ along the path.  Also, see Section 3.1.2 of\n      [RFC7312].\n   o  At the\
    \ Dst host, arrange to receive the packet.\n   o  At the Src host, place a timestamp\
    \ in the prepared Type-P packet,\n      and send it towards Dst (ideally minimizing\
    \ time before sending).\n   o  If the packet arrives within a reasonable period\
    \ of time, take a\n      timestamp as soon as possible upon the receipt of the\
    \ packet.  By\n      subtracting the two timestamps, an estimate of one-way delay\
    \ can\n      be computed.  Error analysis of a given implementation of the\n \
    \     method must take into account the closeness of synchronization\n      between\
    \ Src and Dst.  If the delay between Src's timestamp and the\n      actual sending\
    \ of the packet is known, then the estimate could be\n      adjusted by subtracting\
    \ this amount; uncertainty in this value\n      must be taken into account in\
    \ error analysis.  Similarly, if the\n      delay between the actual receipt of\
    \ the packet and Dst's timestamp\n      is known, then the estimate could be adjusted\
    \ by subtracting this\n      amount; uncertainty in this value must be taken into\
    \ account in\n      error analysis.  See \"Errors and Uncertainties\" (Section\
    \ 3.7) for\n      a more detailed discussion.\n   o  If the packet fails to arrive\
    \ within a reasonable period of time,\n      Tmax, the one-way delay is taken\
    \ to be undefined (informally,\n      infinite).  Note that the threshold of \"\
    reasonable\" is a parameter\n      of the metric.  These points are examined in\
    \ detail in [RFC6703],\n      including analysis preferences to assign undefined\
    \ delay to\n      packets that fail to arrive with the difficulties emerging from\n\
    \      the informal \"infinite delay\" assignment, and an estimation of an\n \
    \     upper bound on waiting time for packets in transit.  Further,\n      enforcing\
    \ a specific constant waiting time on stored singletons of\n      one-way delay\
    \ is compliant with this specification and may allow\n      the results to serve\
    \ more than one reporting audience.\n   Issues such as the packet format, the\
    \ means by which Dst knows when\n   to expect the test packet, and the means by\
    \ which Src and Dst are\n   synchronized are outside the scope of this document.\
    \ {Comment: We\n   plan to document the implementation techniques of our work\
    \ in much\n   more detail elsewhere; we encourage others to do so as well.}\n"
- title: 3.7.  Errors and Uncertainties
  contents:
  - "3.7.  Errors and Uncertainties\n   The description of any specific measurement\
    \ method should include an\n   accounting and analysis of various sources of error\
    \ or uncertainty.\n   The Framework document provides general guidance on this\
    \ point, but\n   we note here the following specifics related to delay metrics:\n\
    \   o  Errors or uncertainties due to uncertainties in the clocks of the\n   \
    \   Src and Dst hosts.\n   o  Errors or uncertainties due to the difference between\
    \ 'wire time'\n      and 'host time'.\n   In addition, the loss threshold may\
    \ affect the results.  Each of\n   these are discussed in more detail below, along\
    \ with a section\n   (Section 3.7.3) on accounting for these errors and uncertainties.\n"
- title: 3.7.1.  Errors or Uncertainties Related to Clocks
  contents:
  - "3.7.1.  Errors or Uncertainties Related to Clocks\n   The uncertainty in a measurement\
    \ of one-way delay is related, in\n   part, to uncertainties in the clocks of\
    \ the Src and Dst hosts.  In\n   the following, we refer to the clock used to\
    \ measure when the packet\n   was sent from Src as the source clock, we refer\
    \ to the clock used to\n   measure when the packet was received by Dst as the\
    \ destination clock,\n   we refer to the observed time when the packet was sent\
    \ by the source\n   clock as Tsource, and we refer to the observed time when the\
    \ packet\n   was received by the destination clock as Tdest.  Alluding to the\n\
    \   notions of synchronization, accuracy, resolution, and skew mentioned\n   in\
    \ the Introduction, we note the following:\n   o  Any error in the synchronization\
    \ between the source clock and the\n      destination clock will contribute to\
    \ error in the delay\n      measurement.  We say that the source clock and the\
    \ destination\n      clock have a synchronization error of Tsynch if the source\
    \ clock\n      is Tsynch ahead of the destination clock.  Thus, if we know the\n\
    \      value of Tsynch exactly, we could correct for clock\n      synchronization\
    \ by adding Tsynch to the uncorrected value of\n      Tdest-Tsource.\n   o  The\
    \ accuracy of a clock is important only in identifying the time\n      at which\
    \ a given delay was measured.  Accuracy, per se, has no\n      importance to the\
    \ accuracy of the measurement of delay.  When\n      computing delays, we are\
    \ interested only in the differences\n      between clock values, not the values\
    \ themselves.\n   o  The resolution of a clock adds to uncertainty about any time\n\
    \      measured with it.  Thus, if the source clock has a resolution of\n    \
    \  10 msec, then this adds 10 msec of uncertainty to any time value\n      measured\
    \ with it.  We will denote the resolution of the source\n      clock and the destination\
    \ clock as Rsource and Rdest,\n      respectively.\n   o  The skew of a clock\
    \ is not so much an additional issue as it is a\n      realization of the fact\
    \ that Tsynch is itself a function of time.\n      Thus, if we attempt to measure\
    \ or to bound Tsynch, this needs to\n      be done periodically.  Over some periods\
    \ of time, this function\n      can be approximated as a linear function plus\
    \ some higher order\n      terms; in these cases, one option is to use knowledge\
    \ of the\n      linear component to correct the clock.  Using this correction,\
    \ the\n      residual Tsynch is made smaller but remains a source of\n      uncertainty\
    \ that must be accounted for.  We use the function\n      Esynch(t) to denote\
    \ an upper bound on the uncertainty in\n      synchronization.  Thus, |Tsynch(t)|\
    \ <= Esynch(t).\n   Taking these items together, we note that naive computation\
    \ Tdest-\n   Tsource will be off by Tsynch(t) +/- (Rsource + Rdest).  Using the\n\
    \   notion of Esynch(t), we note that these clock-related problems\n   introduce\
    \ a total uncertainty of Esynch(t)+ Rsource + Rdest.  This\n   estimate of total\
    \ clock-related uncertainty should be included in the\n   error/uncertainty analysis\
    \ of any measurement implementation.\n"
- title: 3.7.2.  Errors or Uncertainties Related to Wire Time vs. Host Time
  contents:
  - "3.7.2.  Errors or Uncertainties Related to Wire Time vs. Host Time\n   As we\
    \ have defined one-way delay, we would like to measure the time\n   between when\
    \ the test packet leaves the network interface of Src and\n   when it (completely)\
    \ arrives at the network interface of Dst: we\n   refer to these as \"wire times.\"\
    \  If the timings are themselves\n   performed by software on Src and Dst, however,\
    \ then this software can\n   only directly measure the time between when Src grabs\
    \ a timestamp\n   just prior to sending the test packet and when Dst grabs a timestamp\n\
    \   just after having received the test packet: we refer to these two\n   points\
    \ as \"host times\".\n   We note that some systems perform host time stamping\
    \ on the network-\n   interface hardware, in an attempt to minimize the difference\
    \ from\n   wire times.\n   To the extent that the difference between wire time\
    \ and host time is\n   accurately known, this knowledge can be used to correct\
    \ for host time\n   measurements, and the corrected value more accurately estimates\
    \ the\n   desired (wire-time) metric.\n   To the extent, however, that the difference\
    \ between wire time and\n   host time is uncertain, this uncertainty must be accounted\
    \ for in an\n   analysis of a given measurement method.  We denote by Hsource\
    \ an\n   upper bound on the uncertainty in the difference between wire time\n\
    \   and host time on the Src host, and similarly define Hdest for the Dst\n  \
    \ host.  We then note that these problems introduce a total uncertainty\n   of\
    \ Hsource+Hdest.  This estimate of total wire-vs-host uncertainty\n   should be\
    \ included in the error/uncertainty analysis of any\n   measurement implementation.\n"
- title: 3.7.3.  Calibration of Errors and Uncertainties
  contents:
  - "3.7.3.  Calibration of Errors and Uncertainties\n   Generally, the measured values\
    \ can be decomposed as follows:\n   measured value = true value + systematic error\
    \ + random error\n   If the systematic error (the constant bias in measured values)\
    \ can be\n   determined, it can be compensated for in the reported results.\n\
    \   reported value = measured value - systematic error\n   therefore:\n   reported\
    \ value = true value + random error\n   The goal of calibration is to determine\
    \ the systematic and random\n   error generated by the hosts themselves in as\
    \ much detail as\n   possible.  At a minimum, a bound (\"e\") should be found\
    \ such that the\n   reported value is in the range (true value - e) to (true value\
    \ + e)\n   at least 95% of the time.  We call \"e\" the calibration error for\
    \ the\n   measurements.  It represents the degree to which the values produced\n\
    \   by the measurement host are repeatable; that is, how closely an\n   actual\
    \ delay of 30 ms is reported as 30 ms. {Comment: 95% was chosen\n   because (1)\
    \ some confidence level is desirable to be able to remove\n   outliers, which\
    \ will be found in measuring any physical property; (2)\n   a particular confidence\
    \ level should be specified so that the results\n   of independent implementations\
    \ can be compared; and (3) even with a\n   prototype user-level implementation,\
    \ 95% was loose enough to exclude\n   outliers.}\n   From the discussion in the\
    \ previous two sections, the error in\n   measurements could be bounded by determining\
    \ all the individual\n   uncertainties, and adding them together to form:\n  \
    \ Esynch(t) + Rsource + Rdest + Hsource + Hdest.\n   However, reasonable bounds\
    \ on both the clock-related uncertainty\n   captured by the first three terms\
    \ and the host-related uncertainty\n   captured by the last two terms should be\
    \ possible by careful design\n   techniques and calibrating the hosts using a\
    \ known, isolated network\n   in a lab.\n   For example, the clock-related uncertainties\
    \ are greatly reduced\n   through the use of a GPS time source.  The sum of Esynch(t)\
    \ + Rsource\n   + Rdest is small and is also bounded for the duration of the\n\
    \   measurement because of the global time source.\n   The host-related uncertainties,\
    \ Hsource + Hdest, could be bounded by\n   connecting two hosts back-to-back with\
    \ a high-speed serial link or\n   isolated LAN segment.  In this case, repeated\
    \ measurements are\n   measuring the same one-way delay.\n   If the test packets\
    \ are small, such a network connection has a\n   minimal delay that may be approximated\
    \ by zero.  The measured delay\n   therefore contains only systematic and random\
    \ error in the\n   measurement hosts.  The \"average value\" of repeated measurements\
    \ is\n   the systematic error, and the variation is the random error.\n   One\
    \ way to compute the systematic error, and the random error to a\n   95% confidence\
    \ is to repeat the experiment many times -- at least\n   hundreds of tests.  The\
    \ systematic error would then be the median.\n   The random error could then be\
    \ found by removing the systematic error\n   from the measured values.  The 95%\
    \ confidence interval would be the\n   range from the 2.5th percentile to the\
    \ 97.5th percentile of these\n   deviations from the true value.  The calibration\
    \ error \"e\" could then\n   be taken to be the largest absolute value of these\
    \ two numbers, plus\n   the clock-related uncertainty. {Comment: as described,\
    \ this bound is\n   relatively loose since the uncertainties are added, and the\
    \ absolute\n   value of the largest deviation is used.  As long as the resulting\n\
    \   value is not a significant fraction of the measured values, it is a\n   reasonable\
    \ bound.  If the resulting value is a significant fraction\n   of the measured\
    \ values, then more exact methods will be needed to\n   compute the calibration\
    \ error.}\n   Note that random error is a function of measurement load.  For\n\
    \   example, if many paths will be measured by one host, this might\n   increase\
    \ interrupts, process scheduling, and disk I/O (for example,\n   recording the\
    \ measurements), all of which may increase the random\n   error in measured singletons.\
    \  Therefore, in addition to minimal load\n   measurements to find the systematic\
    \ error, calibration measurements\n   should be performed with the same measurement\
    \ load that the hosts\n   will see in the field.\n   We wish to reiterate that\
    \ this statistical treatment refers to the\n   calibration of the host; it is\
    \ used to \"calibrate the meter stick\"\n   and say how well the meter stick reflects\
    \ reality.\n   In addition to calibrating the hosts for finite one-way delay,\
    \ two\n   checks should be made to ensure that packets reported as losses were\n\
    \   really lost.  First, the threshold for loss should be verified.  In\n   particular,\
    \ ensure the \"reasonable\" threshold is reasonable: that it\n   is very unlikely\
    \ a packet will arrive after the threshold value, and\n   therefore the number\
    \ of packets lost over an interval is not\n   sensitive to the error bound on\
    \ measurements.  Second, consider the\n   possibility that a packet arrives at\
    \ the network interface, but is\n   lost due to congestion on that interface or\
    \ to other resource\n   exhaustion (e.g. buffers) in the host.\n"
- title: 3.8.  Reporting the Metric
  contents:
  - "3.8.  Reporting the Metric\n   The calibration and context in which the metric\
    \ is measured MUST be\n   carefully considered and SHOULD always be reported along\
    \ with metric\n   results.  We now present four items to consider: the Type-P\
    \ of test\n   packets, the threshold of infinite delay (if any), error calibration,\n\
    \   and the path traversed by the test packets.  This list is not\n   exhaustive;\
    \ any additional information that could be useful in\n   interpreting applications\
    \ of the metrics should also be reported (see\n   [RFC6703] for extensive discussion\
    \ of reporting considerations for\n   different audiences).\n"
- title: 3.8.1.  Type-P
  contents:
  - "3.8.1.  Type-P\n   As noted in Section 13 of the Framework document [RFC2330],\
    \ the value\n   of the metric may depend on the type of IP packets used to make\
    \ the\n   measurement, or \"Type-P\".  The value of Type-P-One-way-Delay could\n\
    \   change if the protocol (UDP or TCP), port number, size, or\n   arrangement\
    \ for special treatment (e.g., IP DS Field [RFC2780],\n   Explicit Congestion\
    \ Notification (ECN) [RFC3168], or RSVP) changes.\n   Additional packet distinctions\
    \ identified in future extensions of the\n   Type-P definition will apply.  The\
    \ exact Type-P used to make the\n   measurements MUST be accurately reported.\n"
- title: 3.8.2.  Loss Threshold
  contents:
  - "3.8.2.  Loss Threshold\n   In addition, the threshold (or methodology to distinguish)\
    \ between a\n   large finite delay and loss MUST be reported.\n"
- title: 3.8.3.  Calibration Results
  contents:
  - "3.8.3.  Calibration Results\n   o  If the systematic error can be determined,\
    \ it SHOULD be removed\n      from the measured values.\n   o  You SHOULD also\
    \ report the calibration error, e, such that the\n      true value is the reported\
    \ value plus or minus e, with 95%\n      confidence (see the last section.)\n\
    \   o  If possible, the conditions under which a test packet with finite\n   \
    \   delay is reported as lost due to resource exhaustion on the\n      measurement\
    \ host SHOULD be reported.\n"
- title: 3.8.4.  Path
  contents:
  - "3.8.4.  Path\n   Finally, the path traversed by the packet SHOULD be reported,\
    \ if\n   possible.  In general, it is impractical to know the precise path a\n\
    \   given packet takes through the network.  The precise path may be\n   known\
    \ for certain Type-P on short or stable paths.  If Type-P\n   includes the record\
    \ route (or loose-source route) option in the IP\n   header, and the path is short\
    \ enough, and all routers* on the path\n   support record (or loose-source) route,\
    \ then the path will be\n   precisely recorded.  This is impractical because the\
    \ route must be\n   short enough, many routers do not support (or are not configured\
    \ for)\n   record route, and use of this feature would often artificially worsen\n\
    \   the performance observed by removing the packet from common-case\n   processing.\
    \  However, partial information is still valuable context.\n   For example, if\
    \ a host can choose between two links* (and hence, two\n   separate routes from\
    \ Src to Dst), then the initial link used is\n   valuable context. {Comment: For\
    \ example, with Merit's NetNow setup, a\n   Src on one Network Access Point (NAP)\
    \ can reach a Dst on another NAP\n   by either of several different backbone networks.}\n"
- title: 4.  A Definition for Samples of One-Way Delay
  contents:
  - "4.  A Definition for Samples of One-Way Delay\n   Given the singleton metric\
    \ Type-P-One-way-Delay, we now define one\n   particular sample of such singletons.\
    \  The idea of the sample is to\n   select a particular binding of the parameters\
    \ Src, Dst, and Type-P,\n   then define a sample of values of parameter T.  The\
    \ means for\n   defining the values of T is to select a beginning time T0, a final\n\
    \   time Tf, and an average rate lambda, then define a pseudorandom\n   Poisson\
    \ process of rate lambda, whose values fall between T0 and Tf.\n   The time interval\
    \ between successive values of T will then average 1/\n   lambda.\n   Note that\
    \ Poisson sampling is only one way of defining a sample.\n   Poisson has the advantage\
    \ of limiting bias, but other methods of\n   sampling will be appropriate for\
    \ different situations.  For example,\n   a truncated Poisson distribution may\
    \ be needed to avoid reactive\n   network state changes during intervals of inactivity,\
    \ see Section 4.6\n   of [RFC7312].  Sometimes the goal is sampling with a known\
    \ bias, and\n   [RFC3432] describes a method for periodic sampling with random\
    \ start\n   times.\n"
- title: 4.1.  Metric Name
  contents:
  - "4.1.  Metric Name\n   Type-P-One-way-Delay-Poisson-Stream\n"
- title: 4.2.  Metric Parameters
  contents:
  - "4.2.  Metric Parameters\n   o  Src, the IP address of a host\n   o  Dst, the\
    \ IP address of a host\n   o  T0, a time\n   o  Tf, a time\n   o  Tmax, a loss\
    \ threshold waiting time\n   o  lambda, a rate in reciprocal seconds (or parameters\
    \ for another\n      distribution)\n"
- title: 4.3.  Metric Units
  contents:
  - "4.3.  Metric Units\n   A sequence of pairs; the elements of each pair are:\n\
    \   o  T, a time, and\n   o  dT, either a real number or an undefined number of\
    \ seconds.\n   The values of T in the sequence are monotonic increasing.  Note\
    \ that\n   T would be a valid parameter to Type-P-One-way-Delay and that dT\n\
    \   would be a valid value of Type-P-One-way-Delay.\n"
- title: 4.4.  Definition
  contents:
  - "4.4.  Definition\n   Given T0, Tf, and lambda, we compute a pseudorandom Poisson\
    \ process\n   beginning at or before T0, with average arrival rate lambda, and\n\
    \   ending at or after Tf.  Those time values greater than or equal to T0\n  \
    \ and less than or equal to Tf are then selected.  At each of the\n   selected\
    \ times in this process, we obtain one value of Type-P-One-\n   way-Delay.  The\
    \ value of the sample is the sequence made up of the\n   resulting <time, delay>\
    \ pairs.  If there are no such pairs, the\n   sequence is of length zero and the\
    \ sample is said to be empty.\n"
- title: 4.5.  Discussion
  contents:
  - "4.5.  Discussion\n   The reader should be familiar with the in-depth discussion\
    \ of Poisson\n   sampling in the Framework document [RFC2330], which includes\
    \ methods\n   to compute and verify the pseudorandom Poisson process.\n   We specifically\
    \ do not constrain the value of lambda except to note\n   the extremes.  If the\
    \ rate is too large, then the measurement traffic\n   will perturb the network\
    \ and itself cause congestion.  If the rate is\n   too small, then you might not\
    \ capture interesting network behavior.\n   {Comment: We expect to document our\
    \ experiences with, and suggestions\n   for, lambda elsewhere, culminating in\
    \ a \"Best Current Practice\"\n   document.}\n   Since a pseudorandom number sequence\
    \ is employed, the sequence of\n   times, and hence the value of the sample, is\
    \ not fully specified.\n   Pseudorandom number generators of good quality will\
    \ be needed to\n   achieve the desired qualities.\n   The sample is defined in\
    \ terms of a Poisson process both to avoid the\n   effects of self-synchronization\
    \ and also capture a sample that is\n   statistically as unbiased as possible.\
    \ {Comment: there is, of course,\n   no claim that real Internet traffic arrives\
    \ according to a Poisson\n   arrival process.} The Poisson process is used to\
    \ schedule the delay\n   measurements.  The test packets will generally not arrive\
    \ at Dst\n   according to a Poisson distribution, since they are influenced by\
    \ the\n   network.\n   All the singleton Type-P-One-way-Delay metrics in the sequence\
    \ will\n   have the same values of Src, Dst, and Type-P.\n   Note also that, given\
    \ one sample that runs from T0 to Tf, and given\n   new time values T0' and Tf'\
    \ such that T0 <= T0' <= Tf' <= Tf, the\n   subsequence of the given sample whose\
    \ time values fall between T0'\n   and Tf' are also a valid Type-P-One-way-Delay-Poisson-Stream\
    \ sample.\n"
- title: 4.6.  Methodologies
  contents:
  - "4.6.  Methodologies\n   The methodologies follow directly from:\n   o  The selection\
    \ of specific times using the specified Poisson\n      arrival process, and\n\
    \   o  The methodologies discussion already given for the singleton Type-\n  \
    \    P-One-way-Delay metric.\n   Care must be given to correctly handle out-of-order\
    \ arrival of test\n   packets; it is possible that the Src could send one test\
    \ packet at\n   TS[i], then send a second one (later) at TS[i+1] while the Dst\
    \ could\n   receive the second test packet at TR[i+1], and then receive the first\n\
    \   one (later) at TR[i].  Metrics for reordering may be found in\n   [RFC4737].\n"
- title: 4.7.  Errors and Uncertainties
  contents:
  - "4.7.  Errors and Uncertainties\n   In addition to sources of errors and uncertainties\
    \ associated with\n   methods employed to measure the singleton values that make\
    \ up the\n   sample, care must be given to analyze the accuracy of the Poisson\n\
    \   process with respect to the wire times of the sending of the test\n   packets.\
    \  Problems with this process could be caused by several\n   things, including\
    \ problems with the pseudorandom number techniques\n   used to generate the Poisson\
    \ arrival process, or with jitter in the\n   value of Hsource (mentioned above\
    \ as uncertainty in the singleton\n   delay metric).  The Framework document shows\
    \ how to use the Anderson-\n   Darling test to verify the accuracy of a Poisson\
    \ process over small\n   time frames. {Comment: The goal is to ensure that test\
    \ packets are\n   sent \"close enough\" to a Poisson schedule and avoid periodic\n\
    \   behavior.}\n"
- title: 4.8.  Reporting the Metric
  contents:
  - "4.8.  Reporting the Metric\n   The calibration and context for the underlying\
    \ singletons MUST be\n   reported along with the stream.  (See \"Reporting the\
    \ Metric\" for\n   Type-P-One-way-Delay in Section 3.8.)\n"
- title: 5.  Some Statistics Definitions for One-Way Delay
  contents:
  - "5.  Some Statistics Definitions for One-Way Delay\n   Given the sample metric\
    \ Type-P-One-way-Delay-Poisson-Stream, we now\n   offer several statistics of\
    \ that sample.  These statistics are\n   offered mostly to illustrate what could\
    \ be done.  See [RFC6703] for\n   additional discussion of statistics that are\
    \ relevant to different\n   audiences.\n"
- title: 5.1.  Type-P-One-way-Delay-Percentile
  contents:
  - "5.1.  Type-P-One-way-Delay-Percentile\n   Given a Type-P-One-way-Delay-Poisson-Stream\
    \ and a percent X between\n   0% and 100%, the Xth percentile of all the dT values\
    \ in the stream.\n   In computing this percentile, undefined values are treated\
    \ as\n   infinitely large.  Note that this means that the percentile could\n \
    \  thus be undefined (informally, infinite).  In addition, the Type-P-\n   One-way-Delay-Percentile\
    \ is undefined if the sample is empty.\n   For example: suppose we take a sample\
    \ and the results are as follows:\n   Stream1 = <\n   <T1, 100 msec>\n   <T2,\
    \ 110 msec>\n   <T3, undefined>\n   <T4, 90 msec>\n   <T5, 500 msec>\n   >\n \
    \  Then, the 50th percentile would be 110 msec, since 90 msec and 100\n   msec\
    \ are smaller and 500 msec and 'undefined' are larger.  See\n   Section 11.3 of\
    \ [RFC2330] for computing percentiles.\n   Note that if the possibility that a\
    \ packet with finite delay is\n   reported as lost is significant, then a high\
    \ percentile (90th or\n   95th) might be reported as infinite instead of finite.\n"
- title: 5.2.  Type-P-One-way-Delay-Median
  contents:
  - "5.2.  Type-P-One-way-Delay-Median\n   Given a Type-P-One-way-Delay-Poisson-Stream,\
    \ the median of all the dT\n   values in the stream.  In computing the median,\
    \ undefined values are\n   treated as infinitely large.  As with Type-P-One-way-Delay-\n\
    \   Percentile, Type-P-One-way-Delay-Median is undefined if the sample is\n  \
    \ empty.\n   As noted in the Framework document, the median differs from the 50th\n\
    \   percentile only when the sample contains an even number of values, in\n  \
    \ which case the mean of the two central values is used.\n   For example, suppose\
    \ we take a sample and the results are as follows:\n   Stream2 = <\n   <T1, 100\
    \ msec>\n   <T2, 110 msec>\n   <T3, undefined>\n   <T4, 90 msec>\n   >\n   Then,\
    \ the median would be 105 msec, the mean of 100 msec and 110\n   msec, the two\
    \ central values.\n"
- title: 5.3.  Type-P-One-way-Delay-Minimum
  contents:
  - "5.3.  Type-P-One-way-Delay-Minimum\n   Given a Type-P-One-way-Delay-Poisson-Stream,\
    \ the minimum of all the\n   dT values in the stream.  In computing this, undefined\
    \ values are\n   treated as infinitely large.  Note that this means that the minimum\n\
    \   could thus be undefined (informally, infinite) if all the dT values\n   are\
    \ undefined.  In addition, the Type-P-One-way-Delay-Minimum is\n   undefined if\
    \ the sample is empty.\n   In the above example, the minimum would be 90 msec.\n"
- title: 5.4.  Type-P-One-way-Delay-Inverse-Percentile
  contents:
  - "5.4.  Type-P-One-way-Delay-Inverse-Percentile\n   Note: This statistic is deprecated\
    \ in this document because of lack\n   of use.\n   Given a Type-P-One-way-Delay-Poisson-Stream\
    \ and a time duration\n   threshold, the fraction of all the dT values in the\
    \ stream less than\n   or equal to the threshold.  The result could be as low\
    \ as 0% (if all\n   the dT values exceed threshold) or as high as 100%.  Type-P-One-way-\n\
    \   Delay-Inverse-Percentile is undefined if the sample is empty.\n   In the above\
    \ example, the Inverse-Percentile of 103 msec would be\n   50%.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Conducting Internet measurements raises both\
    \ security and privacy\n   concerns.  This memo does not specify an implementation\
    \ of the\n   metrics, so it does not directly affect the security of the Internet\n\
    \   nor of applications that run on the Internet.  However,\n   implementations\
    \ of these metrics must be mindful of security and\n   privacy concerns.\n   There\
    \ are two types of security concerns: potential harm caused by\n   the measurements\
    \ and potential harm to the measurements.  The\n   measurements could cause harm\
    \ because they are active and inject\n   packets into the network.  The measurement\
    \ parameters MUST be\n   carefully selected so that the measurements inject trivial\
    \ amounts of\n   additional traffic into the networks they measure.  If they inject\n\
    \   \"too much\" traffic, they can skew the results of the measurement and\n \
    \  in extreme cases cause congestion and denial of service.\n   The measurements\
    \ themselves could be harmed by routers giving\n   measurement traffic a different\
    \ priority than \"normal\" traffic or by\n   an attacker injecting artificial\
    \ measurement traffic.  If routers can\n   recognize measurement traffic and treat\
    \ it separately, the\n   measurements will not reflect actual user traffic.  Therefore,\
    \ the\n   measurement methodologies SHOULD include appropriate techniques to\n\
    \   reduce the probability that measurement traffic can be distinguished\n   from\
    \ \"normal\" traffic.\n   If an attacker injects packets emulating traffic that\
    \ are accepted as\n   legitimate, the loss ratio or other measured values could\
    \ be\n   corrupted.  Authentication techniques, such as digital signatures,\n\
    \   may be used where appropriate to guard against injected traffic\n   attacks.\n\
    \   When considering privacy of those involved in measurement or those\n   whose\
    \ traffic is measured, the sensitive information available to\n   potential observers\
    \ is greatly reduced when using active techniques\n   that are within this scope\
    \ of work.  Passive observations of user\n   traffic for measurement purposes\
    \ raise many privacy issues.  We refer\n   the reader to the privacy considerations\
    \ described in the Large Scale\n   Measurement of Broadband Performance (LMAP)\
    \ Framework [RFC7594],\n   which covers active and passive techniques.\n   Collecting\
    \ measurements or using measurement results for\n   reconnaissance to assist in\
    \ subsequent system attacks is quite\n   common.  Access to measurement results,\
    \ or control of the measurement\n   systems to perform reconnaissance should be\
    \ guarded against.  See\n   Section 7 of [RFC7594] (Security Considerations of\
    \ the LMAP\n   Framework) for system requirements that help to avoid measurement\n\
    \   system compromise.\n"
- title: 7.  Changes from RFC 2679
  contents:
  - "7.  Changes from RFC 2679\n   The text above constitutes a revision to RFC 2769,\
    \ which is now an\n   Internet Standard.  This section tracks the changes from\
    \ [RFC2679].\n   [RFC6808] provides the test plan and results supporting [RFC2679]\n\
    \   advancement along the Standards Track, according to the process in\n   [RFC6576].\
    \  The conclusions of [RFC6808] list four minor\n   modifications:\n   1.  Section\
    \ 6.2.3 of [RFC6808] asserts that the assumption of post-\n       processing to\
    \ enforce a constant waiting time threshold is\n       compliant and that the\
    \ text of the RFC should be revised slightly\n       to include this point.  The\
    \ applicability of post-processing was\n       added in the last list item of\
    \ Section 3.6.\n   2.  Section 6.5 of [RFC6808] indicates that the Type-P-One-way-Delay-\n\
    \       Inverse-Percentile statistic has been ignored in both\n       implementations,\
    \ so it was a candidate for removal or deprecation\n       in this document (this\
    \ small discrepancy does not affect\n       candidacy for advancement).  This\
    \ statistic was deprecated in\n       Section 5.4.\n   3.  The IETF has reached\
    \ consensus on guidance for reporting metrics\n       in [RFC6703], and the memo\
    \ is referenced in this document to\n       incorporate recent experience where\
    \ appropriate.  This reference\n       was added in the last list item of Section\
    \ 3.6, Section 3.8, and\n       in Section 5.\n   4.  There is currently one erratum\
    \ with status \"Held for Document\n       Update\" (EID 398) for [RFC2679], and\
    \ this minor revision and\n       additional text was incorporated in this document\
    \ in Section 5.1.\n   A number of updates to the [RFC2679] text have been implemented\
    \ in\n   the text above to reference key IPPM RFCs that were approved after\n\
    \   [RFC2679] and to address comments on the IPPM mailing list describing\n  \
    \ current conditions and experience.\n   1.   Near the end of Section 1.1, there\
    \ is an update of a network\n        example using ATM, a clarification of TCP's\
    \ affect on queue\n        occupation, and discussion of the importance of one-way\
    \ delay\n        measurement.\n   2.   Explicit inclusion of the maximum waiting\
    \ time input parameter\n        in Sections 3.2 and 4.2, reflecting recognition\
    \ of this\n        parameter in more recent RFCs and ITU-T Recommendation Y.1540.\n\
    \   3.   Addition of a reference to RFC 6703 in the discussion of packet\n   \
    \     lifetime and application timeouts in Section 3.5.\n   4.   Addition of a\
    \ reference to the default requirement (that packets\n        be standard-formed)\
    \ from RFC 2330 as a new list item in\n        Section 3.5.\n   5.   GPS-based\
    \ NTP experience replaces \"to be tested\" in Section 3.5.\n   6.   Replaced \"\
    precedence\" with updated terminology (DS Field) in\n        Sections 3.6 and\
    \ 3.8.1(with reference).\n   7.   Added parenthetical guidance on minimizing the\
    \ interval between\n        timestamp placement to send time in Section 3.6.\n\
    \   8.   Section 3.7.2 notes that some current systems perform host time\n   \
    \     stamping on the network-interface hardware.\n   9.   \"instrument\" replaced\
    \ by the defined term \"host\" in\n        Section 3.7.3 and Section 3.8.3.\n\
    \   10.  Added reference to RFC 3432 regarding periodic sampling\n        alongside\
    \ Poisson sampling in Section 4 and also noted that a\n        truncated Poisson\
    \ distribution may be needed with modern\n        networks as described in the\
    \ IPPM Framework update [RFC7312].\n   11.  Added a reference to RFC 4737 regarding\
    \ reordering metrics in\n        the related discussion of \"Methodologies (Section\
    \ 4.6).\n   12.  Modified the formatting of the example in Section 5.1 to match\n\
    \        the original (issue with conversion to XML in this version).\n   13.\
    \  Clarified the conclusions on two related points on harm to\n        measurements\
    \ (recognition of measurement traffic for unexpected\n        priority treatment\
    \ and attacker traffic which emulates\n        measurement) in \"Security Considerations\
    \ (Section 6).\n   14.  Expanded and updated the material on Privacy and added\
    \ cautions\n        on the use of measurements for reconnaissance in \"Security\n\
    \        Considerations\" (Section 6).\n   Section 5.4.4 of [RFC6390] suggests\
    \ a common template for performance\n   metrics partially derived from previous\
    \ IPPM and Benchmarking\n   Methodology Working Group (BMWG) RFCs, but it also\
    \ contains some new\n   items.  All of the normative parts of [RFC6390] are covered,\
    \ but not\n   quite in the same section names or orientation.  Several of the\n\
    \   informative parts are covered.  Maintaining the familiar outline of\n   IPPM\
    \ literature has both value and minimizes unnecessary differences\n   between\
    \ this revised RFC and current/future IPPM RFCs.\n   The publication of [RFC6921]\
    \ suggested an area where this memo might\n   need updating.  Packet transfer\
    \ on Faster-Than-Light (FTL) networks\n   could result in negative delays and\
    \ packet reordering; however, both\n   are covered as possibilities in the current\
    \ text and no revisions are\n   deemed necessary (we also note that [RFC6921]\
    \ is an April 1st RFC).\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC791]   Postel, J., \"Internet Protocol\",\
    \ STD 5, RFC 791,\n              DOI 10.17487/RFC0791, September 1981,\n     \
    \         <http://www.rfc-editor.org/info/rfc791>.\n   [RFC2119]  Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n       \
    \       <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2330]  Paxson, V., Almes,\
    \ G., Mahdavi, J., and M. Mathis,\n              \"Framework for IP Performance\
    \ Metrics\", RFC 2330,\n              DOI 10.17487/RFC2330, May 1998,\n      \
    \        <http://www.rfc-editor.org/info/rfc2330>.\n   [RFC2678]  Mahdavi, J.\
    \ and V. Paxson, \"IPPM Metrics for Measuring\n              Connectivity\", RFC\
    \ 2678, DOI 10.17487/RFC2678, September\n              1999, <http://www.rfc-editor.org/info/rfc2678>.\n\
    \   [RFC2679]  Almes, G., Kalidindi, S., and M. Zekauskas, \"A One-way\n     \
    \         Delay Metric for IPPM\", RFC 2679, DOI 10.17487/RFC2679,\n         \
    \     September 1999, <http://www.rfc-editor.org/info/rfc2679>.\n   [RFC2780]\
    \  Bradner, S. and V. Paxson, \"IANA Allocation Guidelines For\n             \
    \ Values In the Internet Protocol and Related Headers\",\n              BCP 37,\
    \ RFC 2780, DOI 10.17487/RFC2780, March 2000,\n              <http://www.rfc-editor.org/info/rfc2780>.\n\
    \   [RFC3432]  Raisanen, V., Grotefeld, G., and A. Morton, \"Network\n       \
    \       performance measurement with periodic streams\", RFC 3432,\n         \
    \     DOI 10.17487/RFC3432, November 2002,\n              <http://www.rfc-editor.org/info/rfc3432>.\n\
    \   [RFC6576]  Geib, R., Ed., Morton, A., Fardid, R., and A. Steinmitz,\n    \
    \          \"IP Performance Metrics (IPPM) Standard Advancement\n            \
    \  Testing\", BCP 176, RFC 6576, DOI 10.17487/RFC6576, March\n              2012,\
    \ <http://www.rfc-editor.org/info/rfc6576>.\n   [RFC7312]  Fabini, J. and A. Morton,\
    \ \"Advanced Stream and Sampling\n              Framework for IP Performance Metrics\
    \ (IPPM)\", RFC 7312,\n              DOI 10.17487/RFC7312, August 2014,\n    \
    \          <http://www.rfc-editor.org/info/rfc7312>.\n   [RFC7680]  Almes, G.,\
    \ Kalidini, S., Zekauskas, M., and A. Morton,\n              Ed., \"A One-Way\
    \ Loss Metric for IP Performance Metrics\n              (IPPM)\", RFC 7680, DOI\
    \ 10.17487/RFC7680, January 2016,\n              <http://www.rfc-editor.org/info/rfc7680>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [IPPM-UPDATES]\n              Morton, A., Fabini,\
    \ J., Elkins, N., Ackermann, M., and V.\n              Hegde, \"Updates for IPPM's\
    \ Active Metric Framework:\n              Packets of Type-P and Standard-Formed\
    \ Packets\", Work in\n              Progress, draft-morton-ippm-2330-stdform-typep-02,\n\
    \              December 2015.\n   [RFC3168]  Ramakrishnan, K., Floyd, S., and\
    \ D. Black, \"The Addition\n              of Explicit Congestion Notification\
    \ (ECN) to IP\",\n              RFC 3168, DOI 10.17487/RFC3168, September 2001,\n\
    \              <http://www.rfc-editor.org/info/rfc3168>.\n   [RFC4737]  Morton,\
    \ A., Ciavattone, L., Ramachandran, G., Shalunov,\n              S., and J. Perser,\
    \ \"Packet Reordering Metrics\", RFC 4737,\n              DOI 10.17487/RFC4737,\
    \ November 2006,\n              <http://www.rfc-editor.org/info/rfc4737>.\n  \
    \ [RFC6390]  Clark, A. and B. Claise, \"Guidelines for Considering New\n     \
    \         Performance Metric Development\", BCP 170, RFC 6390,\n             \
    \ DOI 10.17487/RFC6390, October 2011,\n              <http://www.rfc-editor.org/info/rfc6390>.\n\
    \   [RFC6703]  Morton, A., Ramachandran, G., and G. Maguluri, \"Reporting\n  \
    \            IP Network Performance Metrics: Different Points of View\",\n   \
    \           RFC 6703, DOI 10.17487/RFC6703, August 2012,\n              <http://www.rfc-editor.org/info/rfc6703>.\n\
    \   [RFC6808]  Ciavattone, L., Geib, R., Morton, A., and M. Wieser, \"Test\n \
    \             Plan and Results Supporting Advancement of RFC 2679 on the\n   \
    \           Standards Track\", RFC 6808, DOI 10.17487/RFC6808, December\n    \
    \          2012, <http://www.rfc-editor.org/info/rfc6808>.\n   [RFC6921]  Hinden,\
    \ R., \"Design Considerations for Faster-Than-Light\n              (FTL) Communication\"\
    , RFC 6921, DOI 10.17487/RFC6921,\n              April 2013, <http://www.rfc-editor.org/info/rfc6921>.\n\
    \   [RFC7594]  Eardley, P., Morton, A., Bagnulo, M., Burbridge, T.,\n        \
    \      Aitken, P., and A. Akhter, \"A Framework for Large-Scale\n            \
    \  Measurement of Broadband Performance (LMAP)\", RFC 7594,\n              DOI\
    \ 10.17487/RFC7594, September 2015,\n              <http://www.rfc-editor.org/info/rfc7594>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   For [RFC2679], special thanks are due to Vern Paxson of\
    \ Lawrence\n   Berkeley Labs for his helpful comments on issues of clock uncertainty\n\
    \   and statistics.  Thanks also to Garry Couch, Will Leland, Andy\n   Scherrer,\
    \ Sean Shapira, and Roland Wittig for several useful\n   suggestions.\n   For\
    \ this document, thanks to Joachim Fabini, Ruediger Geib, Nalini\n   Elkins, and\
    \ Barry Constantine for sharing their measurement\n   experience as part of their\
    \ careful reviews.  Brian Carpenter and\n   Scott Bradner provided useful feedback\
    \ at IETF Last Call.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Guy Almes\n   Texas A&M\n   Email: almes@acm.org\n   Sunil\
    \ Kalidindi\n   Ixia\n   Email: skalidindi@ixiacom.com\n   Matt Zekauskas\n  \
    \ Internet2\n   Email: matt@internet2.edu\n   Al Morton (editor)\n   AT&T Labs\n\
    \   200 Laurel Avenue South\n   Middletown, NJ  07748\n   United States\n   Phone:\
    \ +1 732 420 1571\n   Fax:   +1 732 368 1192\n   Email: acmorton@att.com\n   URI:\
    \   http://home.comcast.net/~acmacm/\n"
