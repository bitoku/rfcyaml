- contents:
  - '              The Multi-Class Extension to Multi-Link PPP

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   A companion document describes an architecture for providing\n   integrated
    services over low-bitrate links, such as modem lines, ISDN\n   B-channels, and
    sub-T1 links [1].  The main components of the\n   architecture are: a real-time
    encapsulation format for asynchronous\n   and synchronous low-bitrate links, a
    header compression architecture\n   optimized for real-time flows, elements of
    negotiation protocols used\n   between routers (or between hosts and routers),
    and announcement\n   protocols used by applications to allow this negotiation
    to take\n   place.\n   This document proposes the fragment-oriented solution for
    the real-\n   time encapsulation format part of the architecture.  The general\n
    \  approach is to start from the PPP Multilink fragmentation protocol\n   [2]
    and provide a small number of extensions to add functionality and\n   reduce the
    overhead.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   As an extension to the \"best-effort\" services the Internet
    is well-\n   known for, additional types of services (\"integrated services\")
    that\n   support the transport of real-time multimedia information are being\n
    \  developed for, and deployed in the Internet.\n   The present document defines
    the fragment-oriented solution for the\n   real-time encapsulation format part
    of the architecture, i.e. for the\n   queues-of-fragments type sender [1].  As
    described in more detail in\n   the architecture document, a real-time encapsulation
    format is\n   required as, e.g., a 1500 byte packet on a 28.8 kbit/s modem link\n
    \  makes this link unavailable for the transmission of real-time\n   information
    for about 400 ms.  This adds a worst-case delay that\n   causes real-time applications
    to operate with round-trip delays on\n   the order of at least a second -- unacceptable
    for real-time\n   conversation.  The PPP extensions defined in this document allow
    a\n   sender to fragment the packets of various priorities into multiple\n   classes
    of fragments, allowing high-priority packets to be sent\n   between fragments
    of lower priorities.\n   A companion document based on these extensions [5] defines
    a\n   suspend/resume-oriented solution for those cases where the best\n   possible
    delay is required and the senders are of type 1 [1].\n"
  - contents:
    - "1.1.  Specification Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      RFC 2119 [8].\n"
    title: 1.1.  Specification Language
  title: 1.  Introduction
- contents:
  - "2.  Requirements\n   The main design goal for the components of an architecture
    that\n   addresses real-time multimedia flows over low-bitrate links is that\n
    \  of minimizing the end-to-end delay.  More specifically, the worst\n   case
    delay (after removing possible outliers, which are equivalent to\n   packet losses
    from an application point of view) is what determines\n   the playout points selected
    by the applications and thus the delay\n   actually perceived by the user.\n   In
    addition, every attempt should obviously be undertaken to maximize\n   the bandwidth
    actually available to media data; overheads must be\n   minimized.\n   The solution
    should not place unnecessary burdens on the non-real-\n   time flows.  In particular,
    the usual MTU should be available to\n   these flows.\n   The most general approach
    would provide the ability to suspend any\n   packet (real-time or not) for a more
    urgent real-time packet, up to\n   an infinite number of levels of nesting.  On
    the other hand, it is\n   likely that there would rarely be a requirement for
    a real-time\n   packet to suspend another real-time packet that is not at least
    about\n   twice as long.  Typically, the largest packet size to be expected on\n
    \  a PPP link is the default MTU of 1500 bytes.  The smallest high-\n   priority
    packets are likely to have on the order of 22 bytes\n   (compressed RTP/G.723.1
    packets).  In the 1:72 range of packet sizes\n   to be expected, this translates
    to a maximum requirement of about\n   eight levels of suspension (including one
    level where long real-time\n   packets suspend long non-real-time packets).  On
    28.8kbit/s modems,\n   there seems to be a practical requirement for at least
    two levels of\n   suspension (i.e., audio suspends any longer packet including
    video,\n   video suspends other very long packets).\n   On an architectural level,
    there are several additional requirements\n   for the fragmentation scheme:\n
    \  a)   The scheme must be predictable enough that admission control can\n        make
    decisions based on its characteristics.  As is argued in\n        [1], this will
    often only be the case when additional hints\n        about the characteristics
    of the flow itself are available\n        (application hints).\n   b)   The scheme
    must be robust against errors, at least with the same\n        level of error
    detection as PPP.\n   c)   The scheme must in general cooperate nicely with PPP.
    \ In\n        particular, it should be as compatible to existing PPP standards\n
    \       as possible.  On a link that (based on PPP negotiation) makes\n        use
    of the scheme, it should always be possible to fall back to\n        standard
    LCP (PPP Link Control Protocol [6, 7]) without\n        ambiguity.\n   d)   The
    scheme must work well with existing chips and router\n        systems.  (See [1]
    for a more extensive discussion of\n        implementation models.)  For synchronous
    links this means using\n        HDLC framing; with much existing hardware, it
    is also hard to\n        switch off the HDLC per-frame CRC.  For asynchronous
    links,\n        there is much more freedom in design; on the other hand, a\n        design
    that treats them much different from synchronous links\n        would lose a number
    of desirable properties of PPP.\n   e)   The scheme must be future proof.  In
    particular, the emergence\n        of V.80 based modems may significantly change
    the way PPP is\n        used with modems.\n   This document does not address additional
    requirements that may be\n   relevant in conjunction with Frame Relay; however,
    there seems to be\n   little problem in applying the principles of this document
    to \"PPP in\n   Frame Relay\" [3].\n"
  title: 2.  Requirements
- contents:
  - "3.  Using PPP Multilink as-is\n   Transmitting only part of a packet to allow
    higher-priority traffic\n   to intervene and resuming its transmission later on
    is a kind of\n   fragmentation.  The existing PPP Multilink Protocol (MP, [2])\n
    \  provides for sequence numbering and begin/end bits, allowing packets\n   to
    be split into fragments (Figure 1).\n       Figure 1: Multilink Short Sequence
    Number Fragment Format [2]\n                +---------------+---------------+\n
    \  PPP Header:  | Address 0xff  | Control 0x03  |\n                +---------------+---------------+\n
    \               | PID(H)  0x00  | PID(L)  0x3d  |\n                +-+-+-+-+-------+---------------+\n
    \  MP Header:   |B|E|0|0|    sequence number    |\n                +-+-+-+-+-------+---------------+\n
    \               |    fragment data              |\n                |               .
    \              |\n                |               .               |\n                |
    \              .               |\n                +---------------+---------------+\n
    \  PPP FCS:     |              FCS              |\n                +---------------+---------------+\n
    \  (Note that the address, control, and most significant PID bytes are\n   often
    negotiated to be compressed away.)\n   MP's monotonically increasing sequence
    numbering (contiguous numbers\n   are needed for all fragments of a packet) does
    not allow suspension\n   of the sending of a sequence of fragments of one packet
    in order to\n   send another packet.  It is, however, possible to send intervening\n
    \  packets that are not encapsulated in multilink headers; thus, MP\n   supports
    two levels of priority.\n   The multilink-as-is approach can be built using existing
    standards;\n   multilink capability is now widely deployed and only the sending
    side\n   needs to be aware that they are using this for giving priority to\n   real-time
    packets.\n"
  - contents:
    - "3.1.  Limitations of multilink as-is\n   Multilink-as-is is not the complete
      solution for a number of reasons.\n   First, because of the single monotonically
      increasing serial number,\n   there is only one level of suspension:  \"Big\"
      packets that are sent\n   via multilink can be suspended by \"small\" packets
      sent outside of\n   multilink; the latter are not fragmentable (and therefore,
      the\n   content of one packet cannot be sent in parallel on multiple links;\n
      \  if the packets are sent in rounds on multiple links, the order they\n   are
      processed at the receiver may differ from the order they were\n   sent).\n   A
      problem not solved by this specification is that the multi-link\n   header is
      relatively large; as delay bounds become small (for\n   queues-of-fragments
      type implementations) the overhead may become\n   significant.\n"
    title: 3.1.  Limitations of multilink as-is
  title: 3.  Using PPP Multilink as-is
- contents:
  - "4.  Extending PPP Multilink to multiple classes\n   The obvious approach to providing
    more than one level of suspension\n   with PPP Multilink is to run Multilink multiple
    times over one link.\n   Multilink as it is defined provides no way for more than
    one instance\n   to be active.  Fortunately, a number of bits are unused in the\n
    \  Multilink header: two bits in the short sequence number format (as\n   can
    be seen in Figure 1), six in the long sequence number format.\n   This document
    defines (some of the) previously unused bits as a class\n   number:\n       Figure
    2: Short Sequence Number Fragment Format With Classes\n                +---------------+---------------+\n
    \  PPP Header:  | Address 0xff  | Control 0x03  |\n                +---------------+---------------+\n
    \               | PID(H)  0x00  | PID(L)  0x3d  |\n                +-+-+-+-+-------+---------------+\n
    \  MP Header:   |B|E|cls|    sequence number    |\n                +-+-+-+-+-------+---------------+\n
    \               |    fragment data              |\n                |               .
    \              |\n                |               .               |\n                |
    \              .               |\n                +---------------+---------------+\n
    \  PPP FCS:     |              FCS              |\n                +---------------+---------------+\n
    \  Each class runs a separate copy of the mechanism defined in [2], i.e.\n   uses
    a separate sequence number space and reassembly buffer.\n   Similarly, for the
    long sequence number format:\n       Figure 3:  Long Sequence Number Fragment
    Format With Classes\n                +---------------+---------------+\n   PPP
    Header:  | Address 0xff  | Control 0x03  |\n                +---------------+---------------+\n
    \               | PID(H)  0x00  | PID(L)  0x3d  |\n                +-+-+-+-+-+-+-+-+---------------+\n
    \  MP Header:   |B|E| class |0|0|sequence number|\n                +-+-+-+-+-+-+-+-+---------------+\n
    \               |      sequence number (L)      |\n                +---------------+---------------+\n
    \               |        fragment data          |\n                |               .
    \              |\n                |               .               |\n                |
    \              .               |\n                +---------------+---------------+\n
    \  PPP FCS:     |              FCS              |\n                +---------------+---------------+\n
    \  Together with the ability to send packets without a multilink header,\n   this
    provides four levels of suspension with 12-bit headers (probably\n   sufficient
    for many practical applications) and sixteen levels with\n   24-bit headers (only
    four of the six free bits are used in this case\n   -- based on the rationale
    given above, sixteen levels should\n   generally be more than sufficient).\n"
  title: 4.  Extending PPP Multilink to multiple classes
- contents:
  - "5.  Prefix elision: Compressing common header bytes\n   For some applications,
    all packets of a certain class will have a\n   common protocol identifier (or
    even more than one common prefix\n   byte).  In this case, the following optimization
    is possible: the\n   class number can be associated with a prefix of bytes that
    are\n   removed from each packet before transmission and that are implicitly\n
    \  prepended to the reassembled packet after reception.\n   Note that if only
    some of the packets to be transmitted at a certain\n   level of priority have
    the common prefix, it may still be possible to\n   utilize this method by allocating
    two class numbers and only\n   associating one of them with the prefix.  (This
    is the reason why\n   four of the unused bits in the long sequence number format
    have been\n   allocated to the class number instead of the three that generally\n
    \  should suffice.)\n   Prefix elision is not a replacement for header compression
    or data\n   compression: it allows implementations to compress away prefixes that\n
    \  often are not reachable by header or data compression methods.\n"
  title: '5.  Prefix elision: Compressing common header bytes'
- contents:
  - "6.  Negotiable options\n   The following PPP LCP options are already defined
    by MP:\n   o    Multilink Maximum Received Reconstructed Unit\n   o    Multilink
    Short Sequence Number Header Format\n   o    Endpoint Discriminator\n   This document
    defines two new LCP options:\n   o    Multilink Header Format\n   o    Prefix
    Elision\n"
  - contents:
    - "6.1.  Multilink header format option\n   A summary of the Multilink Header
      Format Option format is shown\n   below.  The fields are transmitted from left
      to right.\n                                 Figure 4:\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   Type = 27   |  Length = 4   |     Code      | # Susp Clses  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  This LCP option advises the peer that the implementation wishes to\n   receive
      fragments with a format given by the code number, with the\n   maximum number
      of suspendable classes (see below) given.\n   When this option is negotiated,
      the accepting implementation MUST\n   either transmit all subsequent multilink
      packets on all links of the\n   bundle with the multilink header format given
      or Configure-Nak or\n   Configure-Reject the option.  (Note that an implementation
      MAY\n   continue to send packets outside of multilink in any case.)  If this\n
      \  option is offered on a link which is intended to join an existing\n   bundle,
      a system MUST offer the same multilink header format option\n   value previously
      negotiated for the bundle, or none if none was\n   negotiated previously.\n
      \  The values defined in this document for the use of this option are:\n   -
      \   Code = 2: long sequence number fragment format with classes\n   -    Code
      = 6: short sequence number fragment format with classes\n   The Multilink Header
      Format option MUST NOT occur more than once in a\n   Configure-Request or Configure-Ack,
      and, if it is present, the Short\n   Sequence Number Header Format option ([2])
      MUST NOT also be present.\n   If no instance of this option or the Short Sequence
      Number Header\n   Format option is present, but an MRRU option [2] is present,
      then by\n   default, long sequence number multilink headers with class 0 only
      are\n   used; this is equivalent to code equals 2 and number of suspendable\n
      \  classes equals 1.  An instance of the Short Sequence Number Header\n   Format
      Option is equivalent to an instance of this option with code\n   equals 6 and
      number of suspendable classes equal to 1.\n   The number of suspendable classes
      bounds the allowable class numbers:\n   only class numbers numerically lower
      than this limit can be used for\n   suspendable classes.  Implementations MAY
      want to negotiate a number\n   smaller than made possible by the packet format
      to limit their\n   reassembly buffer space requirements.  Implementations SHOULD
      at\n   least support the value 4 for the short sequence number fragment\n   format,
      and the value 8 for the long sequence number fragment format,\n   unless configured
      differently.  Bit combinations that would indicate\n   class numbers outside
      the negotiated range MAY be used for other\n   semantics if negotiated by other
      means outside the scope of this\n   document (e.g., [6]).\n"
    title: 6.1.  Multilink header format option
  - contents:
    - "6.2.  Prefix elision option\n   This LCP option advises the peer that, in each
      of the given classes,\n   the implementation expects to receive only packets
      with a certain\n   prefix; this prefix is not to be sent as part of the information
      in\n   the fragment(s) of this class.  By default, this common prefix is\n   empty
      for all classes.  When this option is negotiated, the accepting\n   implementation
      MUST either transmit all subsequent multilink packets\n   of each of the given
      classes with the given prefix removed from the\n   start of the packet or Configure-Nak
      or Configure-Reject the option.\n   If none of the formats with classes has
      been negotiated, class number\n   0 may be used to indicate a common prefix
      for all packets sent within\n   multilink fragments.\n   Apart from the type
      and length octets common to all LCP options, the\n   option contains a sequence
      of zero or more sequences of a single-\n   octet class number, a single-octet
      length of the prefix for that\n   class, and the octets in that prefix:\n                                 Figure
      5:\n    0                   1                   2                   3\n    0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   Type = 26   | Option Length |    Class      | Prefix Length |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   Prefix...                                   |    Class      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Prefix Length |   Prefix...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The
      Prefix Elision option MUST NOT occur more than once in a\n   Configure-Request
      or Configure-Nak.  If this option is offered on a\n   link which is intended
      to join an existing multilink bundle, a system\n   MUST offer the same prefix
      elision option value previously negotiated\n   for the bundle, or none if none
      was negotiated previously.\n   IMPLEMENTATION NOTE: as with most PPP options
      that indicate\n   capabilities of the receiver to the sender, the sense of this
      option\n   is an indication from the receiver to the sender of the packets\n
      \  concerned.  Often, only the senders will have sufficient control over\n   their
      usage of classes to be able to supply useful values for this\n   option.  A
      receiver willing to accept prefix-elided packets SHOULD\n   request this option
      with empty content; the sender then can use\n   Configure-Nak to propose the
      class-to-prefix mapping desired.\n"
    title: 6.2.  Prefix elision option
  title: 6.  Negotiable options
- contents:
  - "7.  Security Considerations\n   Operation of this protocol is believed to be
    no more and no less\n   secure than operation of the PPP multilink protocol [2].\n"
  title: 7.  Security Considerations
- contents:
  - "8.  References\n   [1]  Bormann, C., \"Providing Integrated Services over Low-bitrate\n
    \       Links\", RFC 2689, September 1999.\n   [2]  Sklower, K., Lloyd, B., McGregor,
    G., Carr, D. and T. Coradetti,\n        \"The PPP Multilink Protocol (MP)\", RFC
    1990, August 1996.\n   [3]  Simpson, W., \"PPP in Frame Relay\", RFC 1973, June
    1996.\n   [4]  Andrades, R. and F. Burg, \"QOSPPP Framing Extensions to PPP\",\n
    \       Work in Progress.\n   [5]  Bormann, C., \"PPP in a Real-time Oriented
    HDLC-like Framing\",\n        RFC 2687, September 1999.\n   [6]  Simpson, W.,
    Editor, \"The Point-to-Point Protocol (PPP)\", STD\n        51, RFC 1661, July
    1994.\n   [7]  Simpson, W., Editor, \"PPP in HDLC-like Framing\", STD 51, RFC\n
    \       1662, July 1994.\n   [8]  Bradner, S., \"Key words for use in RFCs to
    Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n"
  title: 8.  References
- contents:
  - "9.  Author's Address\n   Carsten Bormann\n   Universitaet Bremen FB3 TZI\n   Postfach
    330440\n   D-28334 Bremen, GERMANY\n   Phone: +49.421.218-7024\n   Fax:   +49.421.218-7000\n
    \  EMail: cabo@tzi.org\n"
  title: 9.  Author's Address
- contents:
  - "10.  Acknowledgements\n   David Oran suggested using PPP Multilink for real-time
    framing and\n   reminded the author of his earlier attempts of making Multilink
    more\n   useful for this purpose.  The participants in a lunch BOF at the 1996\n
    \  Montreal IETF gave useful input on the design tradeoffs in various\n   environments.
    \ The members of the ISSLL subgroup on low bitrate links\n   (ISSLOW) have helped
    reducing the large set of options that initial\n   versions of this specification
    had.\n"
  title: 10.  Acknowledgements
- contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 11.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
