- title: __initial_text__
  contents:
  - '                   Relative Uniform Resource Locators

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   A Uniform Resource Locator (URL) is a compact representation of\
    \ the\n   location and access method for a resource available via the Internet.\n\
    \   When embedded within a base document, a URL in its absolute form may\n   contain\
    \ a great deal of information which is already known from the\n   context of that\
    \ base document's retrieval, including the scheme,\n   network location, and parts\
    \ of the url-path.  In situations where the\n   base URL is well-defined and known\
    \ to the parser (human or machine),\n   it is useful to be able to embed URL references\
    \ which inherit that\n   context rather than re-specifying it in every instance.\
    \  This\n   document defines the syntax and semantics for such Relative Uniform\n\
    \   Resource Locators.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the syntax and semantics for \"\
    relative\"\n   Uniform Resource Locators (relative URLs): a compact representation\n\
    \   of the location of a resource relative to an absolute base URL.  It\n   is\
    \ a companion to RFC 1738, \"Uniform Resource Locators (URL)\" [2],\n   which\
    \ specifies the syntax and semantics of absolute URLs.\n   A common use for Uniform\
    \ Resource Locators is to embed them within a\n   document (referred to as the\
    \ \"base\" document) for the purpose of\n   identifying other Internet-accessible\
    \ resources.  For example, in\n   hypertext documents, URLs can be used as the\
    \ identifiers for\n   hypertext link destinations.\n   Absolute URLs contain a\
    \ great deal of information which may already\n   be known from the context of\
    \ the base document's retrieval, including\n   the scheme, network location, and\
    \ parts of the URL path.  In\n   situations where the base URL is well-defined\
    \ and known, it is useful\n   to be able to embed a URL reference which inherits\
    \ that context\n   rather than re-specifying it within each instance.  Relative\
    \ URLs can\n   also be used within data-entry dialogs to decrease the number of\n\
    \   characters necessary to describe a location.\n   In addition, it is often\
    \ the case that a group or \"tree\" of documents\n   has been constructed to serve\
    \ a common purpose; the vast majority of\n   URLs in these documents point to\
    \ locations within the tree rather\n   than outside of it.  Similarly, documents\
    \ located at a particular\n   Internet site are much more likely to refer to other\
    \ resources at\n   that site than to resources at remote sites.\n   Relative addressing\
    \ of URLs allows document trees to be partially\n   independent of their location\
    \ and access scheme.  For instance, it is\n   possible for a single set of hypertext\
    \ documents to be simultaneously\n   accessible and traversable via each of the\
    \ \"file\", \"http\", and \"ftp\"\n   schemes if the documents refer to each other\
    \ using relative URLs.\n   Furthermore, document trees can be moved, as a whole,\
    \ without\n   changing any of the embedded URLs.  Experience within the World-Wide\n\
    \   Web has demonstrated that the ability to perform relative referencing\n  \
    \ is necessary for the long-term usability of embedded URLs.\n"
- title: 2.  Relative URL Syntax
  contents:
  - "2.  Relative URL Syntax\n   The syntax for relative URLs is a shortened form\
    \ of that for absolute\n   URLs [2], where some prefix of the URL is missing and\
    \ certain path\n   components (\".\" and \"..\") have a special meaning when interpreting\
    \ a\n   relative path.  Because a relative URL may appear in any context that\n\
    \   could hold an absolute URL, systems that support relative URLs must\n   be\
    \ able to recognize them as part of the URL parsing process.\n   Although this\
    \ document does not seek to define the overall URL\n   syntax, some discussion\
    \ of it is necessary in order to describe the\n   parsing of relative URLs.  In\
    \ particular, base documents can only\n   make use of relative URLs when their\
    \ base URL fits within the\n   generic-RL syntax described below.  Although some\
    \ URL schemes do not\n   require this generic-RL syntax, it is assumed that any\
    \ document which\n   contains a relative reference does have a base URL that obeys\
    \ the\n   syntax.  In other words, relative URLs cannot be used within\n   documents\
    \ that have unsuitable base URLs.\n"
- title: 2.1.  URL Syntactic Components
  contents:
  - "2.1.  URL Syntactic Components\n   The URL syntax is dependent upon the scheme.\
    \  Some schemes use\n   reserved characters like \"?\" and \";\" to indicate special\
    \ components,\n   while others just consider them to be part of the path.  However,\n\
    \   there is enough uniformity in the use of URLs to allow a parser to\n   resolve\
    \ relative URLs based upon a single, generic-RL syntax.  This\n   generic-RL syntax\
    \ consists of six components:\n      <scheme>://<net_loc>/<path>;<params>?<query>#<fragment>\n\
    \   each of which, except <scheme>, may be absent from a particular URL.\n   These\
    \ components are defined as follows (a complete BNF is provided\n   in Section\
    \ 2.2):\n      scheme \":\"   ::= scheme name, as per Section 2.1 of RFC 1738\
    \ [2].\n      \"//\" net_loc ::= network location and login information, as per\n\
    \                       Section 3.1 of RFC 1738 [2].\n      \"/\" path     ::=\
    \ URL path, as per Section 3.1 of RFC 1738 [2].\n      \";\" params   ::= object\
    \ parameters (e.g., \";type=a\" as in\n                       Section 3.2.2 of\
    \ RFC 1738 [2]).\n      \"?\" query    ::= query information, as per Section 3.3\
    \ of\n                       RFC 1738 [2].\n      \"#\" fragment ::= fragment\
    \ identifier.\n   Note that the fragment identifier (and the \"#\" that precedes\
    \ it) is\n   not considered part of the URL.  However, since it is commonly used\n\
    \   within the same string context as a URL, a parser must be able to\n   recognize\
    \ the fragment when it is present and set it aside as part of\n   the parsing\
    \ process.\n   The order of the components is important.  If both <params> and\n\
    \   <query> are present, the <query> information must occur after the\n   <params>.\n"
- title: 2.2.  BNF for Relative URLs
  contents:
  - "2.2.  BNF for Relative URLs\n   This is a BNF-like description of the Relative\
    \ Uniform Resource\n   Locator syntax, using the conventions of RFC 822 [5], except\
    \ that \"|\"\n   is used to designate alternatives.  Briefly, literals are quoted\
    \ with\n   \"\", parentheses \"(\" and \")\" are used to group elements, optional\n\
    \   elements are enclosed in [brackets], and elements may be preceded\n   with\
    \ <n>* to designate n or more repetitions of the following\n   element; n defaults\
    \ to 0.\n   This BNF also describes the generic-RL syntax for valid base URLs.\n\
    \   Note that this differs from the URL syntax defined in RFC 1738 [2] in\n  \
    \ that all schemes are required to use a single set of reserved\n   characters\
    \ and use them consistently within the major URL components.\n   URL         =\
    \ ( absoluteURL | relativeURL ) [ \"#\" fragment ]\n   absoluteURL = generic-RL\
    \ | ( scheme \":\" *( uchar | reserved ) )\n   generic-RL  = scheme \":\" relativeURL\n\
    \   relativeURL = net_path | abs_path | rel_path\n   net_path    = \"//\" net_loc\
    \ [ abs_path ]\n   abs_path    = \"/\"  rel_path\n   rel_path    = [ path ] [\
    \ \";\" params ] [ \"?\" query ]\n   path        = fsegment *( \"/\" segment )\n\
    \   fsegment    = 1*pchar\n   segment     =  *pchar\n   params      = param *(\
    \ \";\" param )\n   param       = *( pchar | \"/\" )\n   scheme      = 1*( alpha\
    \ | digit | \"+\" | \"-\" | \".\" )\n   net_loc     =  *( pchar | \";\" | \"?\"\
    \ )\n   query       =  *( uchar | reserved )\n   fragment    =  *( uchar | reserved\
    \ )\n   pchar       = uchar | \":\" | \"@\" | \"&\" | \"=\"\n   uchar       =\
    \ unreserved | escape\n   unreserved  = alpha | digit | safe | extra\n   escape\
    \      = \"%\" hex hex\n   hex         = digit | \"A\" | \"B\" | \"C\" | \"D\"\
    \ | \"E\" | \"F\" |\n                         \"a\" | \"b\" | \"c\" | \"d\" |\
    \ \"e\" | \"f\"\n   alpha       = lowalpha | hialpha\n   lowalpha    = \"a\" |\
    \ \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" |\n          \
    \       \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\"\
    \ |\n                 \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" |\
    \ \"z\"\n   hialpha     = \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\"\
    \ | \"H\" | \"I\" |\n                 \"J\" | \"K\" | \"L\" | \"M\" | \"N\" |\
    \ \"O\" | \"P\" | \"Q\" | \"R\" |\n                 \"S\" | \"T\" | \"U\" | \"\
    V\" | \"W\" | \"X\" | \"Y\" | \"Z\"\n   digit       = \"0\" | \"1\" | \"2\" |\
    \ \"3\" | \"4\" | \"5\" | \"6\" | \"7\" |\n                 \"8\" | \"9\"\n  \
    \ safe        = \"$\" | \"-\" | \"_\" | \".\" | \"+\"\n   extra       = \"!\"\
    \ | \"*\" | \"'\" | \"(\" | \")\" | \",\"\n   national    = \"{\" | \"}\" | \"\
    |\" | \"\\\" | \"^\" | \"~\" | \"[\" | \"]\" | \"`\"\n   reserved    = \";\" |\
    \ \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\"\n   punctuation = \"<\" | \">\"\
    \ | \"#\" | \"%\" | <\">\n"
- title: 2.3.  Specific Schemes and their Syntactic Categories
  contents:
  - "2.3.  Specific Schemes and their Syntactic Categories\n   Each URL scheme has\
    \ its own rules regarding the presence or absence\n   of the syntactic components\
    \ described in Sections 2.1 and 2.2.  In\n   addition, some schemes are never\
    \ appropriate for use with relative\n   URLs.  However, since relative URLs will\
    \ only be used within contexts\n   in which they are useful, these scheme-specific\
    \ differences can be\n   ignored by the resolution process.\n   Within this section,\
    \ we include as examples only those schemes that\n   have a defined URL syntax\
    \ in RFC 1738 [2].  The following schemes are\n   never used with relative URLs:\n\
    \      mailto     Electronic Mail\n      news       USENET news\n      telnet\
    \     TELNET Protocol for Interactive Sessions\n   Some URL schemes allow the\
    \ use of reserved characters for purposes\n   outside the generic-RL syntax given\
    \ above.  However, such use is\n   rare.  Relative URLs can be used with these\
    \ schemes whenever the\n   applicable base URL follows the generic-RL syntax.\n\
    \      gopher     Gopher and Gopher+ Protocols\n      prospero   Prospero Directory\
    \ Service\n      wais       Wide Area Information Servers Protocol\n   Users of\
    \ gopher URLs should note that gopher-type information is\n   almost always included\
    \ at the beginning of what would be the\n   generic-RL path.  If present, this\
    \ type information prevents\n   relative-path references to documents with differing\
    \ gopher-types.\n   Finally, the following schemes can always be parsed using\
    \ the\n   generic-RL syntax.  This does not necessarily imply that relative\n\
    \   URLs will be useful with these schemes -- that decision is left to\n   the\
    \ system implementation and the author of the base document.\n      file     \
    \  Host-specific Files\n      ftp        File Transfer Protocol\n      http  \
    \     Hypertext Transfer Protocol\n      nntp       USENET news using NNTP access\n\
    \   NOTE: Section 5 of RFC 1738 specifies that the question-mark\n         character\
    \ (\"?\") is allowed in an ftp or file path segment.\n         However, this is\
    \ not true in practice and is believed to be an\n         error in the RFC.  Similarly,\
    \ RFC 1738 allows the reserved\n         character semicolon (\";\") within an\
    \ http path segment, but does\n         not define its semantics; the correct\
    \ semantics are as defined\n         by this document for <params>.\n   We recommend\
    \ that new schemes be designed to be parsable via the\n   generic-RL syntax if\
    \ they are intended to be used with relative URLs.\n   A description of the allowed\
    \ relative forms should be included when a\n   new scheme is registered, as per\
    \ Section 4 of RFC 1738 [2].\n"
- title: 2.4.  Parsing a URL
  contents:
  - "2.4.  Parsing a URL\n   An accepted method for parsing URLs is useful to clarify\
    \ the\n   generic-RL syntax of Section 2.2 and to describe the algorithm for\n\
    \   resolving relative URLs presented in Section 4.  This section\n   describes\
    \ the parsing rules for breaking down a URL (relative or\n   absolute) into the\
    \ component parts described in Section 2.1.  The\n   rules assume that the URL\
    \ has already been separated from any\n   surrounding text and copied to a \"\
    parse string\".  The rules are\n   listed in the order in which they would be\
    \ applied by the parser.\n"
- title: 2.4.1.  Parsing the Fragment Identifier
  contents:
  - "2.4.1.  Parsing the Fragment Identifier\n   If the parse string contains a crosshatch\
    \ \"#\" character, then the\n   substring after the first (left-most) crosshatch\
    \ \"#\" and up to the\n   end of the parse string is the <fragment> identifier.\
    \  If the\n   crosshatch is the last character, or no crosshatch is present, then\n\
    \   the fragment identifier is empty.  The matched substring, including\n   the\
    \ crosshatch character, is removed from the parse string before\n   continuing.\n\
    \   Note that the fragment identifier is not considered part of the URL.\n   However,\
    \ since it is often attached to the URL, parsers must be able\n   to recognize\
    \ and set aside fragment identifiers as part of the\n   process.\n"
- title: 2.4.2.  Parsing the Scheme
  contents:
  - "2.4.2.  Parsing the Scheme\n   If the parse string contains a colon \":\" after\
    \ the first character\n   and before any characters not allowed as part of a scheme\
    \ name (i.e.,\n   any not an alphanumeric, plus \"+\", period \".\", or hyphen\
    \ \"-\"), the\n   <scheme> of the URL is the substring of characters up to but\
    \ not\n   including the first colon.  These characters and the colon are then\n\
    \   removed from the parse string before continuing.\n"
- title: 2.4.3.  Parsing the Network Location/Login
  contents:
  - "2.4.3.  Parsing the Network Location/Login\n   If the parse string begins with\
    \ a double-slash \"//\", then the\n   substring of characters after the double-slash\
    \ and up to, but not\n   including, the next slash \"/\" character is the network\
    \ location/login\n   (<net_loc>) of the URL.  If no trailing slash \"/\" is present,\
    \ the\n   entire remaining parse string is assigned to <net_loc>.  The double-\n\
    \   slash and <net_loc> are removed from the parse string before\n   continuing.\n"
- title: 2.4.4.  Parsing the Query Information
  contents:
  - "2.4.4.  Parsing the Query Information\n   If the parse string contains a question\
    \ mark \"?\" character, then the\n   substring after the first (left-most) question\
    \ mark \"?\" and up to the\n   end of the parse string is the <query> information.\
    \  If the question\n   mark is the last character, or no question mark is present,\
    \ then the\n   query information is empty.  The matched substring, including the\n\
    \   question mark character, is removed from the parse string before\n   continuing.\n"
- title: 2.4.5.  Parsing the Parameters
  contents:
  - "2.4.5.  Parsing the Parameters\n   If the parse string contains a semicolon \"\
    ;\" character, then the\n   substring after the first (left-most) semicolon \"\
    ;\" and up to the end\n   of the parse string is the parameters (<params>).  If\
    \ the semicolon\n   is the last character, or no semicolon is present, then <params>\
    \ is\n   empty.  The matched substring, including the semicolon character, is\n\
    \   removed from the parse string before continuing.\n"
- title: 2.4.6.  Parsing the Path
  contents:
  - "2.4.6.  Parsing the Path\n   After the above steps, all that is left of the parse\
    \ string is the\n   URL <path> and the slash \"/\" that may precede it.  Even\
    \ though the\n   initial slash is not part of the URL path, the parser must remember\n\
    \   whether or not it was present so that later processes can\n   differentiate\
    \ between relative and absolute paths.  Often this is\n   done by simply storing\
    \ the preceding slash along with the path.\n"
- title: 3.  Establishing a Base URL
  contents:
  - "3.  Establishing a Base URL\n   The term \"relative URL\" implies that there\
    \ exists some absolute \"base\n   URL\" against which the relative reference is\
    \ applied.  Indeed, the\n   base URL is necessary to define the semantics of any\
    \ embedded\n   relative URLs; without it, a relative reference is meaningless.\
    \  In\n   order for relative URLs to be usable within a document, the base URL\n\
    \   of that document must be known to the parser.\n   The base URL of a document\
    \ can be established in one of four ways,\n   listed below in order of precedence.\
    \  The order of precedence can be\n   thought of in terms of layers, where the\
    \ innermost defined base URL\n   has the highest precedence.  This can be visualized\
    \ graphically as:\n      .----------------------------------------------------------.\n\
    \      |  .----------------------------------------------------.  |\n      | \
    \ |  .----------------------------------------------.  |  |\n      |  |  |  .----------------------------------------.\
    \  |  |  |\n      |  |  |  |   (3.1) Base URL embedded in the       |  |  |  |\n\
    \      |  |  |  |         document's content             |  |  |  |\n      | \
    \ |  |  `----------------------------------------'  |  |  |\n      |  |  |   (3.2)\
    \ Base URL of the encapsulating entity |  |  |\n      |  |  |         (message,\
    \ document, or none).        |  |  |\n      |  |  `----------------------------------------------'\
    \  |  |\n      |  |   (3.3) URL used to retrieve the entity            |  |\n\
    \      |  `----------------------------------------------------'  |\n      | \
    \  (3.4) Base URL = \"\" (undefined)                        |\n      `----------------------------------------------------------'\n"
- title: 3.1.  Base URL within Document Content
  contents:
  - "3.1.  Base URL within Document Content\n   Within certain document media types,\
    \ the base URL of the document can\n   be embedded within the content itself such\
    \ that it can be readily\n   obtained by a parser.  This can be useful for descriptive\
    \ documents,\n   such as tables of content, which may be transmitted to others\
    \ through\n   protocols other than their usual retrieval context (e.g., E-Mail\
    \ or\n   USENET news).\n   It is beyond the scope of this document to specify\
    \ how, for each\n   media type, the base URL can be embedded.  It is assumed that\
    \ user\n   agents manipulating such media types will be able to obtain the\n \
    \  appropriate syntax from that media type's specification.  An example\n   of\
    \ how the base URL can be embedded in the Hypertext Markup Language\n   (HTML)\
    \ [3] is provided in an Appendix (Section 10).\n   Messages are considered to\
    \ be composite documents.  The base URL of a\n   message can be specified within\
    \ the message headers (or equivalent\n   tagged metainformation) of the message.\
    \  For protocols that make use\n   of message headers like those described in\
    \ RFC 822 [5], we recommend\n   that the format of this header be:\n      base-header\
    \  = \"Base\" \":\" \"<URL:\" absoluteURL \">\"\n   where \"Base\" is case-insensitive\
    \ and any whitespace (including that\n   used for line folding) inside the angle\
    \ brackets is ignored.  For\n   example, the header field\n      Base: <URL:http://www.ics.uci.edu/Test/a/b/c>\n\
    \   would indicate that the base URL for that message is the string\n   \"http://www.ics.uci.edu/Test/a/b/c\"\
    .  The base URL for a message\n   serves as both the base for any relative URLs\
    \ within the message\n   headers and the default base URL for documents enclosed\
    \ within the\n   message, as described in the next section.\n   Protocols which\
    \ do not use the RFC 822 message header syntax, but\n   which do allow some form\
    \ of tagged metainformation to be included\n   within messages, may define their\
    \ own syntax for defining the base\n   URL as part of a message.\n"
- title: 3.2.  Base URL from the Encapsulating Entity
  contents:
  - "3.2.  Base URL from the Encapsulating Entity\n   If no base URL is embedded,\
    \ the base URL of a document is defined by\n   the document's retrieval context.\
    \  For a document that is enclosed\n   within another entity (such as a message\
    \ or another document), the\n   retrieval context is that entity; thus, the default\
    \ base URL of the\n   document is the base URL of the entity in which the document\
    \ is\n   encapsulated.\n   Composite media types, such as the \"multipart/*\"\
    \ and \"message/*\"\n   media types defined by MIME (RFC 1521, [4]), define a\
    \ hierarchy of\n   retrieval context for their enclosed documents.  In other words,\
    \ the\n   retrieval context of a component part is the base URL of the\n   composite\
    \ entity of which it is a part.  Thus, a composite entity can\n   redefine the\
    \ retrieval context of its component parts via the\n   inclusion of a base-header,\
    \ and this redefinition applies recursively\n   for a hierarchy of composite parts.\
    \  Note that this might not change\n   the base URL of the components, since each\
    \ component may include an\n   embedded base URL or base-header that takes precedence\
    \ over the\n   retrieval context.\n"
- title: 3.3.  Base URL from the Retrieval URL
  contents:
  - "3.3.  Base URL from the Retrieval URL\n   If no base URL is embedded and the\
    \ document is not encapsulated\n   within some other entity (e.g., the top level\
    \ of a composite entity),\n   then, if a URL was used to retrieve the base document,\
    \ that URL shall\n   be considered the base URL.  Note that if the retrieval was\
    \ the\n   result of a redirected request, the last URL used (i.e., that which\n\
    \   resulted in the actual retrieval of the document) is the base URL.\n"
- title: 3.4.  Default Base URL
  contents:
  - "3.4.  Default Base URL\n   If none of the conditions described in Sections 3.1\
    \ -- 3.3 apply,\n   then the base URL is considered to be the empty string and\
    \ all\n   embedded URLs within that document are assumed to be absolute URLs.\n\
    \   It is the responsibility of the distributor(s) of a document\n   containing\
    \ relative URLs to ensure that the base URL for that\n   document can be established.\
    \  It must be emphasized that relative\n   URLs cannot be used reliably in situations\
    \ where the document's base\n   URL is not well-defined.\n"
- title: 4.  Resolving Relative URLs
  contents:
  - "4.  Resolving Relative URLs\n   This section describes an example algorithm for\
    \ resolving URLs within\n   a context in which the URLs may be relative, such\
    \ that the result is\n   always a URL in absolute form.  Although this algorithm\
    \ cannot\n   guarantee that the resulting URL will equal that intended by the\n\
    \   original author, it does guarantee that any valid URL (relative or\n   absolute)\
    \ can be consistently transformed to an absolute form given a\n   valid base URL.\n\
    \   The following steps are performed in order:\n   Step 1: The base URL is established\
    \ according to the rules of\n           Section 3.  If the base URL is the empty\
    \ string (unknown),\n           the embedded URL is interpreted as an absolute\
    \ URL and\n           we are done.\n   Step 2: Both the base and embedded URLs\
    \ are parsed into their\n           component parts as described in Section 2.4.\n\
    \           a) If the embedded URL is entirely empty, it inherits the\n      \
    \        entire base URL (i.e., is set equal to the base URL)\n              and\
    \ we are done.\n           b) If the embedded URL starts with a scheme name, it\
    \ is\n              interpreted as an absolute URL and we are done.\n        \
    \   c) Otherwise, the embedded URL inherits the scheme of\n              the base\
    \ URL.\n   Step 3: If the embedded URL's <net_loc> is non-empty, we skip to\n\
    \           Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n    \
    \       (if any) of the base URL.\n   Step 4: If the embedded URL path is preceded\
    \ by a slash \"/\", the\n           path is not relative and we skip to Step 7.\n\
    \   Step 5: If the embedded URL path is empty (and not preceded by a\n       \
    \    slash), then the embedded URL inherits the base URL path,\n           and\n\
    \           a) if the embedded URL's <params> is non-empty, we skip to\n     \
    \         step 7; otherwise, it inherits the <params> of the base\n          \
    \    URL (if any) and\n           b) if the embedded URL's <query> is non-empty,\
    \ we skip to\n              step 7; otherwise, it inherits the <query> of the\
    \ base\n              URL (if any) and we skip to step 7.\n   Step 6: The last\
    \ segment of the base URL's path (anything\n           following the rightmost\
    \ slash \"/\", or the entire path if no\n           slash is present) is removed\
    \ and the embedded URL's path is\n           appended in its place.  The following\
    \ operations are\n           then applied, in order, to the new path:\n      \
    \     a) All occurrences of \"./\", where \".\" is a complete path\n         \
    \     segment, are removed.\n           b) If the path ends with \".\" as a complete\
    \ path segment,\n              that \".\" is removed.\n           c) All occurrences\
    \ of \"<segment>/../\", where <segment> is a\n              complete path segment\
    \ not equal to \"..\", are removed.\n              Removal of these path segments\
    \ is performed iteratively,\n              removing the leftmost matching pattern\
    \ on each iteration,\n              until no matching pattern remains.\n     \
    \      d) If the path ends with \"<segment>/..\", where <segment> is a\n     \
    \         complete path segment not equal to \"..\", that\n              \"<segment>/..\"\
    \ is removed.\n   Step 7: The resulting URL components, including any inherited\
    \ from\n           the base URL, are recombined to give the absolute form of\n\
    \           the embedded URL.\n   Parameters, regardless of their purpose, do\
    \ not form a part of the\n   URL path and thus do not affect the resolving of\
    \ relative paths.  In\n   particular, the presence or absence of the \";type=d\"\
    \ parameter on an\n   ftp URL does not affect the interpretation of paths relative\
    \ to that\n   URL.  Fragment identifiers are only inherited from the base URL\
    \ when\n   the entire embedded URL is empty.\n   The above algorithm is intended\
    \ to provide an example by which the\n   output of implementations can be tested\
    \ -- implementation of the\n   algorithm itself is not required.  For example,\
    \ some systems may find\n   it more efficient to implement Step 6 as a pair of\
    \ segment stacks\n   being merged, rather than as a series of string pattern matches.\n"
- title: 5.  Examples and Recommended Practice
  contents:
  - "5.  Examples and Recommended Practice\n   Within an object with a well-defined\
    \ base URL of\n      Base: <URL:http://a/b/c/d;p?q#f>\n   the relative URLs would\
    \ be resolved as follows:\n"
- title: 5.1.  Normal Examples
  contents:
  - "5.1.  Normal Examples\n      g:h        = <URL:g:h>\n      g          = <URL:http://a/b/c/g>\n\
    \      ./g        = <URL:http://a/b/c/g>\n      g/         = <URL:http://a/b/c/g/>\n\
    \      /g         = <URL:http://a/g>\n      //g        = <URL:http://g>\n    \
    \  ?y         = <URL:http://a/b/c/d;p?y>\n      g?y        = <URL:http://a/b/c/g?y>\n\
    \      g?y/./x    = <URL:http://a/b/c/g?y/./x>\n      #s         = <URL:http://a/b/c/d;p?q#s>\n\
    \      g#s        = <URL:http://a/b/c/g#s>\n      g#s/./x    = <URL:http://a/b/c/g#s/./x>\n\
    \      g?y#s      = <URL:http://a/b/c/g?y#s>\n      ;x         = <URL:http://a/b/c/d;x>\n\
    \      g;x        = <URL:http://a/b/c/g;x>\n      g;x?y#s    = <URL:http://a/b/c/g;x?y#s>\n\
    \      .          = <URL:http://a/b/c/>\n      ./         = <URL:http://a/b/c/>\n\
    \      ..         = <URL:http://a/b/>\n      ../        = <URL:http://a/b/>\n\
    \      ../g       = <URL:http://a/b/g>\n      ../..      = <URL:http://a/>\n \
    \     ../../     = <URL:http://a/>\n      ../../g    = <URL:http://a/g>\n"
- title: 5.2.  Abnormal Examples
  contents:
  - "5.2.  Abnormal Examples\n   Although the following abnormal examples are unlikely\
    \ to occur in\n   normal practice, all URL parsers should be capable of resolving\
    \ them\n   consistently.  Each example uses the same base as above.\n   An empty\
    \ reference resolves to the complete base URL:\n      <>            = <URL:http://a/b/c/d;p?q#f>\n\
    \   Parsers must be careful in handling the case where there are more\n   relative\
    \ path \"..\" segments than there are hierarchical levels in the\n   base URL's\
    \ path.  Note that the \"..\" syntax cannot be used to change\n   the <net_loc>\
    \ of a URL.\n      ../../../g    = <URL:http://a/../g>\n      ../../../../g =\
    \ <URL:http://a/../../g>\n   Similarly, parsers must avoid treating \".\" and\
    \ \"..\" as special when\n   they are not complete components of a relative path.\n\
    \      /./g          = <URL:http://a/./g>\n      /../g         = <URL:http://a/../g>\n\
    \      g.            = <URL:http://a/b/c/g.>\n      .g            = <URL:http://a/b/c/.g>\n\
    \      g..           = <URL:http://a/b/c/g..>\n      ..g           = <URL:http://a/b/c/..g>\n\
    \   Less likely are cases where the relative URL uses unnecessary or\n   nonsensical\
    \ forms of the \".\" and \"..\" complete path segments.\n      ./../g        =\
    \ <URL:http://a/b/g>\n      ./g/.         = <URL:http://a/b/c/g/>\n      g/./h\
    \         = <URL:http://a/b/c/g/h>\n      g/../h        = <URL:http://a/b/c/h>\n\
    \   Finally, some older parsers allow the scheme name to be present in a\n   relative\
    \ URL if it is the same as the base URL scheme.  This is\n   considered to be\
    \ a loophole in prior specifications of partial URLs\n   [1] and should be avoided\
    \ by future parsers.\n      http:g        = <URL:http:g>\n      http:        \
    \ = <URL:http:>\n"
- title: 5.3.  Recommended Practice
  contents:
  - "5.3.  Recommended Practice\n   Authors should be aware that path names which\
    \ contain a colon \":\"\n   character cannot be used as the first component of\
    \ a relative URL\n   path (e.g., \"this:that\") because they will likely be mistaken\
    \ for a\n   scheme name.  It is therefore necessary to precede such cases with\n\
    \   other components (e.g., \"./this:that\"), or to escape the colon\n   character\
    \ (e.g., \"this%3Athat\"), in order for them to be correctly\n   parsed.  The\
    \ former solution is preferred because it does not affect\n   the absolute form\
    \ of the URL.\n   There is an ambiguity in the semantics for the ftp URL scheme\n\
    \   regarding the use of a trailing slash (\"/\") character and/or a\n   parameter\
    \ \";type=d\" to indicate a resource that is an ftp directory.\n   If the result\
    \ of retrieving that directory includes embedded relative\n   URLs, it is necessary\
    \ that the base URL path for that result include\n   a trailing slash.  For this\
    \ reason, we recommend that the \";type=d\"\n   parameter value not be used within\
    \ contexts that allow relative URLs.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   There are no security considerations in the use\
    \ or parsing of\n   relative URLs.  However, once a relative URL has been resolved\
    \ to its\n   absolute form, the same security considerations apply as those\n\
    \   described in RFC 1738 [2].\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   This work is derived from concepts introduced by Tim\
    \ Berners-Lee and\n   the World-Wide Web global information initiative.  Relative\
    \ URLs are\n   described as \"Partial URLs\" in RFC 1630 [1].  That description\
    \ was\n   expanded for inclusion as an appendix for an early draft of RFC 1738,\n\
    \   \"Uniform Resource Locators (URL)\" [2].  However, after further\n   discussion,\
    \ the URI-WG decided to specify Relative URLs separately\n   from the primary\
    \ URL draft.\n   This document is intended to fulfill the recommendations for\
    \ Internet\n   Resource Locators as stated in [6].  It has benefited greatly from\n\
    \   the comments of all those participating in the URI-WG.  Particular\n   thanks\
    \ go to Larry Masinter, Michael A. Dolan, Guido van Rossum, Dave\n   Kristol,\
    \ David Robinson, and Brad Barber for identifying\n   problems/deficiencies in\
    \ earlier drafts.\n"
- title: 8.  References
  contents:
  - "8.  References\n   [1] Berners-Lee, T., \"Universal Resource Identifiers in WWW:\
    \ A\n       Unifying Syntax for the Expression of Names and Addresses of\n   \
    \    Objects on the Network as used in the World-Wide Web\", RFC 1630,\n     \
    \  CERN, June 1994.\n   [2] Berners-Lee, T., Masinter, L., and M. McCahill, Editors,\
    \ \"Uniform\n       Resource Locators (URL)\", RFC 1738, CERN, Xerox Corporation,\n\
    \       University of Minnesota, December 1994.\n   [3] Berners-Lee T., and D.\
    \ Connolly, \"HyperText Markup Language\n       Specification -- 2.0\", Work in\
    \ Progress, MIT, HaL Computer\n       Systems, February 1995.\n       <URL:http://www.ics.uci.edu/pub/ietf/html/>\n\
    \   [4] Borenstein, N., and N. Freed, \"MIME (Multipurpose Internet Mail\n   \
    \    Extensions): Mechanisms for Specifying and Describing the Format\n      \
    \ of Internet Message Bodies\", RFC 1521, Bellcore, Innosoft,\n       September\
    \ 1993.\n   [5] Crocker, D., \"Standard for the Format of ARPA Internet Text\n\
    \       Messages\", STD 11, RFC 822, UDEL, August 1982.\n   [6] Kunze, J., \"\
    Functional Recommendations for Internet Resource\n       Locators\", RFC 1736,\
    \ IS&T, UC Berkeley, February 1995.\n"
- title: 9.  Author's Address
  contents:
  - "9.  Author's Address\n   Roy T. Fielding\n   Department of Information and Computer\
    \ Science\n   University of California\n   Irvine, CA  92717-3425\n   U.S.A.\n\
    \   Tel: +1 (714) 824-4049\n   Fax: +1 (714) 824-4056\n   EMail: fielding@ics.uci.edu\n"
- title: 10.  Appendix - Embedding the Base URL in HTML documents
  contents:
  - "10.  Appendix - Embedding the Base URL in HTML documents\n   It is useful to\
    \ consider an example of how the base URL of a document\n   can be embedded within\
    \ the document's content.  In this appendix, we\n   describe how documents written\
    \ in the Hypertext Markup Language\n   (HTML) [3] can include an embedded base\
    \ URL.  This appendix does not\n   form a part of the relative URL specification\
    \ and should not be\n   considered as anything more than a descriptive example.\n\
    \   HTML defines a special element \"BASE\" which, when present in the\n   \"\
    HEAD\" portion of a document, signals that the parser should use the\n   BASE\
    \ element's \"HREF\" attribute as the base URL for resolving any\n   relative\
    \ URLs.  The \"HREF\" attribute must be an absolute URL.  Note\n   that, in HTML,\
    \ element and attribute names are case-insensitive.  For\n   example:\n      <!doctype\
    \ html public \"-//IETF//DTD HTML//EN\">\n      <HTML><HEAD>\n      <TITLE>An\
    \ example HTML document</TITLE>\n      <BASE href=\"http://www.ics.uci.edu/Test/a/b/c\"\
    >\n      </HEAD><BODY>\n      ... <A href=\"../x\">a hypertext anchor</A> ...\n\
    \      </BODY></HTML>\n   A parser reading the example document should interpret\
    \ the given\n   relative URL \"../x\" as representing the absolute URL\n     \
    \ <URL:http://www.ics.uci.edu/Test/a/x>\n   regardless of the context in which\
    \ the example document was obtained.\n"
