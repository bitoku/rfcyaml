Abstract The W3C Web Authentication (WebAuthn) specification and
the FIDO Alliance FIDO2 Client to Authenticator Protocol (CTAP) specification use CBOR Object Signing and Encryption (COSE)
This specification registers the following algorithms (which are used by WebAuthn and CTAP implementations) in the IANA "COSE Algorithms" registry: RSASSA PKCS1 v1 5 using SHA 256, SHA 384, SHA 512, and SHA  1; and Elliptic Curve Digital Signature Algorithm (ECDSA) using the secp256k1 curve and SHA 256.
It registers the secp256k1 elliptic curve in the IANA "COSE Elliptic Curves" registry.
Also, for use with JSON Object Signing and Encryption (JOSE), it registers the algorithm ECDSA using the secp256k1 curve and SHA 256 in the IANA "JSON Web Signature and Encryption Algorithms" registry and the secp256k1 elliptic curve in the IANA "JSON Web Key Elliptic Curve" registry.
This specification defines how to use several algorithms with CBOR Object Signing and Encryption (COSE)
[RFC8152] that are used by implementations of the W3C Web Authentication (WebAuthn)
[WebAuthn] and FIDO Alliance FIDO2 Client to Authenticator Protocol
This specification registers these algorithms in the IANA "COSE Algorithms" registry [IANA.COSE.Algorithms] and registers an elliptic curve in the IANA "COSE Elliptic Curves" registry [IANA.COSE.Curves].
This specification also registers a corresponding algorithm for use with JSON Object Signing and Encryption (JOSE)
"JSON Web Signature and Encryption Algorithms" registry [IANA.JOSE.Algorithms] and registers an elliptic curve in the IANA "JSON Web Key Elliptic Curve" registry [IANA.JOSE.Curves].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
The RSASSA PKCS1 v1 5 signature algorithm is defined in [RFC8017].
The RSASSA PKCS1 v1 5 signature algorithm is parameterized with a hash function (h).
A key of size 2048 bits or larger MUST be used with these algorithms.
Implementations need to check that the key type is 'RSA' when creating or verifying a signature.
The RSASSA PKCS1 v1 5 algorithms specified in this document are in the following table.
Table 1: RSASSA PKCS1 v1 5
Algorithm Values Security considerations for use of the first three algorithms are in Section 5.2.
Security considerations for use of the last algorithm are in Section 5.3.
Note that these algorithms are already present in the IANA "JSON Web Signature and Encryption Algorithms" registry [IANA.JOSE.Algorithms], and so these registrations are only for the IANA "COSE Algorithms" registry [IANA.COSE.Algorithms].
This section defines algorithm encodings and representations enabling the Standards for Efficient Cryptography Group (SECG) elliptic curve secp256k1
[SEC2] to be used for JOSE [RFC7515] and COSE [RFC8152] messages.
The SECG elliptic curve secp256k1
[SEC2] is represented in a JSON Web Key (JWK)
As a compressed point encoding representation is not defined for JWK elliptic curve points,
the uncompressed point encoding defined there MUST be used.
The "x" and "y" values represented MUST both be exactly 256 bits, with any leading zeros preserved.
Other optional values such as "alg" MAY also be present.
It is represented in a COSE Key
Either the uncompressed or compressed point encoding representations defined there can be used.
The "x" value represented MUST be exactly 256 bits, with any leading zeros preserved.
If the uncompressed representation is used, the "y" value represented MUST likewise be exactly 256 bits, with any leading zeros preserved; if the compressed representation is used, the "y" value is a boolean value, as specified in Section 13.1.1 of [RFC8152].
Other optional values such as "alg" (3) MAY also be present.
The ECDSA signature algorithm is defined in [DSS].
This specification defines the "ES256K" algorithm identifier, which is used to specify the use of ECDSA with the secp256k1 curve and the SHA 256 [DSS] cryptographic hash function.
Implementations need to check that the key type is "EC" for JOSE or "EC2" (2) for COSE and that the curve of the key is secp256k1
when creating or verifying a signature.
SHA 256 digital signature is generated as follows:
1.  Generate a digital signature of the JWS Signing Input or the COSE Sig structure using ECDSA secp256k1
SHA 256 with the desired private key.
The output will be the pair (R, S), where R and S are 256 bit unsigned integers.
Turn R and S into octet sequences in big endian order, with each array being 32 octets long.
The octet sequence representations MUST NOT be shortened to omit any leading zero octets contained in the values.
Concatenate the two octet sequences in the order R and then S.
(Note that many ECDSA implementations will directly produce this concatenation as their output.)
The resulting 64 octet sequence is the JWS Signature or COSE signature value.
Implementations SHOULD use a deterministic algorithm to generate the ECDSA nonce, k, such as the algorithm defined in [RFC6979].
However, in situations where devices are vulnerable to physical attacks, deterministic ECDSA has been shown to be susceptible to fault injection attacks [KUDELSKI17]
Where this is a possibility, implementations SHOULD implement appropriate countermeasures.
Where there are specific certification requirements (such as FIPS approval), implementors should check whether deterministic ECDSA is an approved nonce generation method.
SHA 256 algorithm specified in this document uses these identifiers:
The "crv" field MUST be present, and it MUST represent the "secp256k1" elliptic curve.
If the "alg" field is present, it MUST represent the "ES256K" algorithm.
If the "key ops" field is present, it MUST include "sign" when creating an ECDSA signature.
If the "key ops" field is present, it MUST include "verify" when verifying an ECDSA signature.
If the JWK "use" field is present, its value MUST be "sig".
Other Uses of the secp256k1
This specification defines how to use the secp256k1 curve for ECDSA signatures for both JOSE and COSE implementations.
While in theory the curve could also be used for ECDH ES key agreement, it is beyond the scope of this specification to state whether this is or is not advisable.
Thus, whether or not to recommend its use with ECDH ES is left for experts to decide in future specifications.
When used for ECDSA, the secp256k1 curve MUST be used only with the "ES256K" algorithm identifier and not any others, including not with the COSE "ES256" identifier.
Note that the "ES256K" algorithm identifier needed to be introduced for JOSE to sign with the secp256k1 curve because the JOSE "ES256" algorithm is defined to be used only with the P 256 curve.
The COSE treatment of how to sign with secp256k1 is intentionally parallel to that for JOSE, where the secp256k1 curve MUST be used with the "ES256K" algorithm identifier.
COSE Algorithms Registrations IANA has registered the following values in the "COSE Algorithms" registry [IANA.COSE.Algorithms].
Name:  RS256 Value:   257 Description:  RSASSA PKCS1 v1 5 using SHA 256 Change Controller:  IESG Reference:  Section 2 of RFC 8812
RS384 Value:   258 Description:  RSASSA PKCS1 v1 5 using SHA 384 Change Controller:  IESG Reference:  Section 2 of RFC 8812
RS512 Value:   259 Description:  RSASSA PKCS1 v1 5 using SHA 512 Change Controller:  IESG Reference:  Section 2 of RFC 8812
65535 Description:  RSASSA PKCS1 v1 5 using SHA 1 Change Controller:  IESG Reference:  Section 2 of RFC 8812
ECDSA using secp256k1 curve and SHA 256
Change Controller:  IESG Reference:  Section 3.2 of RFC 8812
Elliptic Curves Registrations IANA has registered the following value in the "COSE Elliptic Curves" registry [IANA.COSE.Curves].
curve Change Controller:  IESG Reference:  Section 3.1 of RFC 8812
JOSE Algorithms Registrations IANA has registered the following value in the "JSON Web Signature and Encryption Algorithms" registry [IANA.JOSE.Algorithms].
ECDSA using secp256k1 curve and SHA 256 Algorithm Usage Location(s):
Optional Change Controller:  IESG Reference:  Section 3.2 of RFC 8812 Algorithm Analysis Document(s):
Elliptic Curves Registrations IANA has registered the following value in the "JSON Web Key Elliptic Curve" registry [IANA.JOSE.Curves].
curve JOSE Implementation Requirements:  Optional Change Controller:  IESG Specification Document(s):
Section 3.1 of RFC 8812 5.
RSA Key Size Security Considerations
The security considerations on key sizes for RSA algorithms from Section 6.1 of [RFC8230] also apply to the RSA algorithms in this specification.
RSASSA PKCS1 v1 5 with SHA 2 Security Considerations
The security considerations on the use of RSASSA PKCS1 v1 5 with SHA 2 hash functions (SHA 256, SHA 384, and SHA 512) from Section 8.3 of [RFC7518] also apply to their use in this specification.
For that reason, these algorithms are registered as being "Not Recommended".
Likewise, the exponent restrictions described in Section 8.3 of [RFC7518] also apply.
RSASSA PKCS1 v1 5 with SHA 1 Security Considerations
The security considerations on the use of the SHA 1 hash function from [RFC6194] apply in this specification.
For that reason, the "RS1" algorithm is registered as "Deprecated".
Likewise, the exponent restrictions described in Section 8.3 of [RFC7518] also apply.
A COSE algorithm identifier for this algorithm is nonetheless being registered because deployed
Trusted Platform Modules (TPMs) continue to use it; therefore, WebAuthn implementations need a COSE algorithm identifier for "RS1" when TPM attestations using this algorithm are being represented.
New COSE applications and protocols MUST NOT use this algorithm.
Security Considerations Care should be taken that a secp256k1 key is not mistaken for a P 256 [RFC7518] key, given that their representations are the same except for the "crv" value.
As described in Section 8.1.1 of [RFC8152], we currently do not have any way to deal with this attack except to restrict the set of curves that can be used.
The procedures and security considerations described in the [SEC1], [SEC2], and [DSS] specifications apply to implementations of this specification.
Timing side channel attacks are possible if the implementation of scalar multiplication over the curve does not execute in constant time.
There are theoretical weaknesses with this curve that could result in future attacks.
While these potential weaknesses are not unique to this curve, they are the reason that this curve is registered as "Recommended: No".
