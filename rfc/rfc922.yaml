- contents:
  - '       BROADCASTING INTERNET DATAGRAMS IN THE PRESENCE OF SUBNETS

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   We propose simple rules for broadcasting Internet datagrams
    on local\n   networks that support broadcast, for addressing broadcasts, and for\n
    \  how gateways should handle them.\n   This RFC suggests a proposed protocol
    for the ARPA-Internet\n   community, and requests discussion and suggestions for
    improvements.\n   Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Acknowledgement\n   This proposal here is the result of discussion with several
    other\n   people, especially J. Noel Chiappa and Christopher A. Kent, both of\n
    \  whom both pointed me at important references.\n"
  title: Acknowledgement
- contents:
  - "1. Introduction\n   The use of broadcasts, especially on high-speed local area
    networks,\n   is a good base for many applications.  Since broadcasting is not\n
    \  covered in the basic IP specification [12], there is no agreed-upon\n   way
    to do it, and so protocol designers have not made use of it. (The\n   issue has
    been touched upon before, e.g. [6], but has not been the\n   subject of a standard.)\n
    \  We consider here only the case of unreliable, unsequenced, possibly\n   duplicated
    datagram broadcasts (for a discussion of TCP broadcasting,\n   see [10].) Even
    though unreliable and limited in length, datagram\n   broadcasts are quite useful
    [1].\n   We assume that the data link layer of the local network supports\n   efficient
    broadcasting.  Most common local area networks do support\n   broadcast; for example,
    Ethernet [7, 5], ChaosNet [9], token ring\n   networks [2], etc.\n   We do not
    assume, however, that broadcasts are reliably delivered.\n   (One might consider
    providing a reliable datagram broadcast protocol\n   as a layer above IP.) It
    is quite expensive to guarantee delivery of\n   broadcasts; instead, what we assume
    is that a host will receive most\n   of the broadcasts that are sent.  This is
    important to avoid\n   excessive use of broadcasts; since every host on the network
    devotes\n   at least some effort to every broadcast, they are costly.\n"
  title: 1. Introduction
- contents:
  - "Broadcasting Internet Datagrams in the Presence of Subnets\n   When a datagram
    is broadcast, it imposes a cost on every host that\n   hears it.  Therefore, broadcasting
    should not be used\n   indiscriminately, but rather only when it is the best solution
    to a\n   problem.\n"
  title: Broadcasting Internet Datagrams in the Presence of Subnets
- contents:
  - "2. Terminology\n   Because broadcasting depends on the specific data link layer
    in use\n   on a local network, we must discuss it with reference to both\n   physical
    networks and logical networks.\n   The terms we will use in referring to physical
    networks are, from the\n   point of view of the host sending or forwarding a broadcast:\n
    \  Local Hardware Network\n      The physical link to which the host is attached.\n
    \  Remote Hardware Network\n      A physical network which is separated from the
    host by at least\n      one gateway.\n   Collection of Hardware Networks\n      A
    set of hardware networks (transitively) connected by gateways.\n   The IP world
    includes several kinds of logical network.  To avoid\n   ambiguity, we will use
    the following terms:\n   Internet\n      The DARPA Internet collection of IP networks.\n
    \  IP Network\n      One or a collection of several hardware networks that have
    one\n      specific IP network number.\n   Subnet\n      A single member of the
    collection of hardware networks that\n      compose an IP network.  Host addresses
    on a given subnet share an\n      IP network number with hosts on all other subnets
    of that IP\n      network, but the local-address part is divided into subnet-number\n"
  title: 2. Terminology
- contents:
  - "Broadcasting Internet Datagrams in the Presence of Subnets\n      and host-number
    fields to indicate which subnet a host is on.  We\n      do not assume a particular
    division of the local-address part;\n      this could vary from network to network.\n
    \  The introduction of a subnet level in the addressing hierarchy is at\n   variance
    with the IP specification [12], but as the use of\n   addressable subnets proliferates
    it is obvious that a broadcasting\n   scheme should support subnetting.  For more
    on subnets, see [8].\n   In this paper, the term \"host address\" refers to the
    host-on-subnet\n   address field of a subnetted IP network, or the host-part field\n
    \  otherwise.\n   An IP network may consist of a single hardware network or a\n
    \  collection of subnets; from the point of view of a host on another IP\n   network,
    it should not matter.\n"
  title: Broadcasting Internet Datagrams in the Presence of Subnets
- contents:
  - "3. Why Broadcast?\n   Broadcasts are useful when a host needs to find information
    without\n   knowing exactly what other host can supply it, or when a host wants\n
    \  to provide information to a large set of hosts in a timely manner.\n   When
    a host needs information that one or more of its neighbors might\n   have, it
    could have a list of neighbors to ask, or it could poll all\n   of its possible
    neighbors until one responds.  Use of a wired-in list\n   creates obvious network
    management problems (early binding is\n   inflexible).  On the other hand, asking
    all of one's neighbors is\n   slow if one must generate plausible host addresses,
    and try them\n   until one works.  On the ARPANET, for example, there are roughly
    65\n   thousand plausible host numbers.  Most IP implementations have used\n   wired-in
    lists (for example, addresses of \"Prime\" gateways.)\n   Fortunately, broadcasting
    provides a fast and simple way for a host\n   to reach all of its neighbors.\n
    \  A host might also use a broadcast to provide all of its neighbors\n   with
    some information; for example, a gateway might announce its\n   presence to other
    gateways.\n   One way to view broadcasting is as an imperfect substitute for\n
    \  multicasting, the sending of messages to a subset of the hosts on a\n   network.
    \ In practice, broadcasts are usually used where multicasts\n   are what is wanted;
    datagrams are broadcast at the hardware level,\n   but filtering software in the
    receiving hosts gives the effect of\n   multicasting.\n   For more examples of
    broadcast applications, see [1, 3].\n"
  title: 3. Why Broadcast?
- contents:
  - 'Broadcasting Internet Datagrams in the Presence of Subnets

    '
  title: Broadcasting Internet Datagrams in the Presence of Subnets
- contents:
  - "4. Broadcast Classes\n   There are several classes of IP broadcasting:\n      -
    Single-destination datagrams broadcast on the local hardware\n        net: A datagram
    is destined for a specific IP host, but the\n        sending host broadcasts it
    at the data link layer, perhaps to\n        avoid having to do routing.  Since
    this is not an IP broadcast,\n        the IP layer is not involved, except that
    a host should discard\n        datagram not meant for it without becoming flustered
    (i.e.,\n        printing an error message).\n      - Broadcast to all hosts on
    the local hardware net: A\n        distinguished value for the host-number part
    of the IP address\n        denotes broadcast instead of a specific host.  The
    receiving IP\n        layer must be able to recognize this address as well as
    its own.\n        However, it might still be useful to distinguish at higher\n
    \       levels between broadcasts and non-broadcasts, especially in\n        gateways.
    \ This is the most useful case of broadcast; it allows\n        a host to discover
    gateways without wired-in tables, it is the\n        basis for address resolution
    protocols, and it is also useful\n        for accessing such utilities as name
    servers, time servers,\n        etc., without requiring wired-in addresses.\n
    \     - Broadcast to all hosts on a remote hardware network: It is\n        occasionally
    useful to send a broadcast to all hosts on a\n        non-local network; for example,
    to find the latest version of a\n        hostname database, to bootload a host
    on a subnet without a\n        bootserver, or to monitor the timeservers on the
    subnet.  This\n        case is the same as local-network broadcasts; the datagram
    is\n        routed by normal mechanisms until it reaches a gateway attached\n
    \       to the destination hardware network, at which point it is\n        broadcast.
    \ This class of broadcasting is also known as\n        \"directed broadcasting\",
    or quaintly as sending a \"letter bomb\"\n        [1].\n      - Broadcast to all
    hosts on a subnetted IP network (Multi-subnet\n        broadcasts): A distinguished
    value for the subnet-number part of\n        the IP address is used to denote
    \"all subnets\".  Broadcasts to\n        all hosts of a remote subnetted IP network
    are done just as\n        directed broadcasts to a single subnet.\n      - Broadcast
    to the entire Internet: This is probably not useful,\n        and almost certainly
    not desirable.\n"
  title: 4. Broadcast Classes
- contents:
  - "Broadcasting Internet Datagrams in the Presence of Subnets\n   For reasons of
    performance or security, a gateway may choose not to\n   forward broadcasts; especially,
    it may be a good idea to ban\n   broadcasts into or out of an autonomous group
    of networks.\n"
  title: Broadcasting Internet Datagrams in the Presence of Subnets
- contents:
  - "5. Broadcast Methods\n   A host's IP receiving layer must be modified to support
    broadcasting.\n   In the absence of broadcasting, a host determines if it is the\n
    \  recipient of a datagram by matching the destination address against\n   all
    of its IP addresses.  With broadcasting, a host must compare the\n   destination
    address not only against the host's addresses, but also\n   against the possible
    broadcast addresses for that host.\n   The problem of how best to send a broadcast
    has been extensively\n   discussed [1, 3, 4, 13, 14].  Since we assume that the
    problem has\n   already been solved at the data link layer, an IP host wishing
    to\n   send either a local broadcast or a directed broadcast need only\n   specify
    the appropriate destination address and send the datagram as\n   usual.  Any sophisticated
    algorithms need only reside in gateways.\n   The problem of broadcasting to all
    hosts on a subnetted IP network is\n   apparently somewhat harder.  However, even
    in this case it turns out\n   that the best known algorithms require no additional
    complexity in\n   non-gateway hosts.  A good broadcast method will meet these\n
    \  additional criteria:\n      - No modification of the IP datagram format.\n
    \     - Reasonable efficiency in terms of the number of excess copies\n        generated
    and the cost of paths chosen.\n      - Minimization of gateway modification, in
    both code and data\n        space.\n      - High likelihood of delivery.\n   The
    algorithm that appears best is the Reverse Path Forwarding (RPF)\n   method [4].
    \ While RPF is suboptimal in cost and reliability, it is\n   quite good, and is
    extremely simple to implement, requiring no\n   additional data space in a gateway.\n"
  title: 5. Broadcast Methods
- contents:
  - 'Broadcasting Internet Datagrams in the Presence of Subnets

    '
  title: Broadcasting Internet Datagrams in the Presence of Subnets
- contents:
  - "6. Gateways and Broadcasts\n   Most of the complexity in supporting broadcasts
    lies in gateways.  If\n   a gateway receives a directed broadcast for a network
    to which it is\n   not connected, it simply forwards it using the usual mechanism.\n
    \  Otherwise, it must do some additional work.\n   6.1. Local Broadcasts\n      When
    a gateway receives a local broadcast datagram, there are\n      several things
    it might have to do with it.  The situation is\n      unambiguous, but without
    due care it is possible to create\n      infinite loops.\n      The appropriate
    action to take on receipt of a broadcast datagram\n      depends on several things:
    the subnet it was received on, the\n      destination network, and the addresses
    of the gateway.\n         - The primary rule for avoiding loops is \"never broadcast
    a\n           datagram on the hardware network it was received on\". It is\n           not
    sufficient simply to avoid repeating datagram that a\n           gateway has heard
    from itself; this still allows loops if\n           there are several gateways
    on a hardware network.\n         - If the datagram is received on the hardware
    network to which\n           it is addressed, then it should not be forwarded.
    \ However,\n           the gateway should consider itself to be a destination
    of the\n           datagram (for example, it might be a routing table update.)\n
    \        - Otherwise, if the datagram is addressed to a hardware network\n           to
    which the gateway is connected, it should be sent as a\n           (data link
    layer) broadcast on that network.  Again, the\n           gateway should consider
    itself a destination of the datagram.\n         - Otherwise, the gateway should
    use its normal routing\n           procedure to choose a subsequent gateway, and
    send the\n           datagram along to it.\n"
  title: 6. Gateways and Broadcasts
- contents:
  - "Broadcasting Internet Datagrams in the Presence of Subnets\n   6.2. Multi-subnet
    broadcasts\n      When a gateway receives a broadcast meant for all subnets of
    an IP\n      network, it must use the Reverse Path Forwarding algorithm to\n      decide
    what to do.  The method is simple: the gateway should\n      forward copies of
    the datagram along all connected links, if and\n      only if the datagram arrived
    on the link which is part of the best\n      route between the gateway and the
    source of the datagram.\n      Otherwise, the datagram should be discarded.\n
    \     This algorithm may be improved if some or all of the gateways\n      exchange
    among themselves additional information; this can be done\n      transparently
    from the point of view of other hosts and even other\n      gateways.  See [4,
    3] for details.\n   6.3. Pseudo-Algol Routing Algorithm\n      This is a pseudo-Algol
    description of the routing algorithm a\n      gateway should use.  The algorithm
    is shown in figure 1.  Some\n      definitions are:\n      RouteLink(host)\n         A
    function taking a host address as a parameter and returning\n         the first-hop
    link from the gateway to the host.\n      RouteHost(host)\n         As above but
    returns the first-hop host address.\n      ResolveAddress(host)\n         Returns
    the hardware address for an IP host.\n      IncomingLink\n         The link on
    which the packet arrived.\n      OutgoingLinkSet\n         The set of links on
    which the packet should be sent.\n      OutgoingHardwareHost\n         The hardware
    host address to send the packet to.\n"
  title: Broadcasting Internet Datagrams in the Presence of Subnets
- contents:
  - "Broadcasting Internet Datagrams in the Presence of Subnets\n      Destination.host\n
    \        The host-part of the destination address.\n      Destination.subnet\n
    \        The subnet-part of the destination address.\n      Destination.ipnet\n
    \        The IP-network-part of the destination address.\n"
  title: Broadcasting Internet Datagrams in the Presence of Subnets
- contents:
  - 'Broadcasting Internet Datagrams in the Presence of Subnets

    '
  title: Broadcasting Internet Datagrams in the Presence of Subnets
- contents:
  - "BEGIN\n   IF Destination.ipnet IN AllLinks THEN\n      BEGIN\n         IF IsSubnetted(Destination.ipnet)
    THEN\n            BEGIN\n               IF Destination.subnet = BroadcastSubnet
    THEN\n                  BEGIN      /* use Reverse Path Forwarding algorithm */\n
    \                    IF IncomingLink = RouteLink(Source) THEN\n                        BEGIN
    IF Destination.host = BroadcastHost THEN\n                              OutgoingLinkSet
    <- AllLinks -\n                           IncomingLink;\n                           OutgoingHost
    <- BroadcastHost;\n                           Examine packet for possible internal
    use;\n                        END\n                     ELSE  /* duplicate from
    another gateway, discard */\n                        Discard;\n                  END\n
    \              ELSE\n                  IF Destination.subnet = IncomingLink.subnet
    THEN\n                     BEGIN           /* forwarding would cause a loop */\n
    \                       IF Destination.host = BroadcastHost THEN\n                           Examine
    packet for possible internal use;\n                        Discard;\n                     END\n
    \                 ELSE BEGIN    /* forward to (possibly local) subnet */\n                        OutgoingLinkSet
    <- RouteLink(Destination);\n                        OutgoingHost <- RouteHost(Destination);\n
    \                    END\n            END\n         ELSE BEGIN         /* destined
    for one of our local networks */\n               IF Destination.ipnet = IncomingLink.ipnet
    THEN\n                  BEGIN              /* forwarding would cause a loop */\n
    \                    IF Destination.host = BroadcastHost THEN\n                        Examine
    packet for possible internal use;\n                     Discard;\n                  END\n
    \              ELSE BEGIN                     /* might be a broadcast */\n                     OutgoingLinkSet
    <- RouteLink(Destination);\n                     OutgoingHost <- RouteHost(Destination);\n
    \                 END\n            END\n      END\n   ELSE BEGIN                    /*
    forward to a non-local IP network */\n         OutgoingLinkSet <- RouteLink(Destination);\n
    \        OutgoingHost <- RouteHost(Destination);\n      END\n   OutgoingHardwareHost
    <- ResolveAddress(OutgoingHost);\n"
  title: BEGIN
- contents:
  - 'END

    '
  title: END
- contents:
  - 'Broadcasting Internet Datagrams in the Presence of Subnets

    '
  title: Broadcasting Internet Datagrams in the Presence of Subnets
- contents:
  - "7. Broadcast IP Addressing - Conventions\n   If different IP implementations
    are to be compatible, there must be\n   convention distinguished number to denote
    \"all hosts\" and \"all\n   subnets\".\n   Since the local network layer can always
    map an IP address into data\n   link layer address, the choice of an IP \"broadcast
    host number\" is\n   somewhat arbitrary.  For simplicity, it should be one not
    likely to\n   be assigned to a real host.  The number whose bits are all ones
    has\n   this property; this assignment was first proposed in [6].  In the few\n
    \  cases where a host has been assigned an address with a host-number\n   part
    of all ones, it does not seem onerous to require renumbering.\n   The \"all subnets\"
    number is also all ones; this means that a host\n   wishing to broadcast to all
    hosts on a remote IP network need not\n   know how the destination address is
    divided up into subnet and host\n   fields, or if it is even divided at all.  For
    example, 36.255.255.255\n   may denote all the hosts on a single hardware network,
    or all the\n   hosts on a subnetted IP network with 1 byte of subnet field and
    2\n   bytes of host field, or any other possible division.\n   The address 255.255.255.255
    denotes a broadcast on a local hardware\n   network that must not be forwarded.
    \ This address may be used, for\n   example, by hosts that do not know their network
    number and are\n   asking some server for it.\n   Thus, a host on net 36, for
    example, may:\n      - broadcast to all of its immediate neighbors by using\n
    \       255.255.255.255\n      - broadcast to all of net 36 by using 36.255.255.255\n
    \  without knowing if the net is subnetted; if it is not, then both\n   addresses
    have the same effect. A robust application might try the\n   former address, and
    if no response is received, then try the latter.\n   See [1] for a discussion
    of such \"expanding ring search\" techniques.\n   If the use of \"all ones\" in
    a field of an IP address means\n   \"broadcast\", using \"all zeros\" could be
    viewed as meaning\n   \"unspecified\".  There is probably no reason for such addresses
    to\n   appear anywhere but as the source address of an ICMP Information\n   Request
    datagram.  However, as a notational convention, we refer to\n   networks (as opposed
    to hosts) by using addresses with zero fields.\n   For example, 36.0.0.0 means
    \"network number 36\" while 36.255.255.255\n   means \"all hosts on network number
    36\".\n"
  title: 7. Broadcast IP Addressing - Conventions
- contents:
  - "Broadcasting Internet Datagrams in the Presence of Subnets\n   7.1. ARP Servers
    and Broadcasts\n      The Address Resolution Protocol (ARP) described in [11]
    can, if\n      incorrectly implemented, cause problems when broadcasts are used\n
    \     on a network where not all hosts share an understanding of what a\n      broadcast
    address is.  The temptation exists to modify the ARP\n      server so that it
    provides the mapping between an IP broadcast\n      address and the hardware broadcast
    address.\n      This temptation must be resisted.  An ARP server should never\n
    \     respond to a request whose target is a broadcast address.  Such a\n      request
    can only come from a host that does not recognize the\n      broadcast address
    as such, and so honoring it would almost\n      certainly lead to a forwarding
    loop.  If there are N such hosts on\n      the physical network that do not recognize
    this address as a\n      broadcast, then a datagram sent with a Time-To-Live of
    T could\n      potentially give rise to T**N spurious re-broadcasts.\n"
  title: Broadcasting Internet Datagrams in the Presence of Subnets
- contents:
  - "8. References\n   1.   David Reeves Boggs.  Internet Broadcasting.  Ph.D. Th.,
    Stanford\n        University, January 1982.\n   2.   D.D. Clark, K.T. Pogran,
    and D.P. Reed.  \"An Introduction to\n        Local Area Networks\".  Proc. IEEE
    66, 11, pp1497-1516,\n        November 1978.\n   3.   Yogan Kantilal Dalal.  Broadcast
    Protocols in Packet Switched\n        Computer Networks.  Ph.D. Th., Stanford
    University, April 1977.\n   4.   Yogan K. Dalal and Robert M. Metcalfe.  \"Reverse
    Path Forwarding\n        of Broadcast Packets\".  Comm. ACM 21, 12, pp1040-1048,\n
    \       December 1978.\n   5.   The Ethernet, A Local Area Network: Data Link
    Layer and Physical\n        Layer Specifications.  Version 1.0, Digital Equipment\n
    \       Corporation, Intel, Xerox, September 1980.\n   6.   Robert Gurwitz and
    Robert Hinden.  IP - Local Area Network\n        Addressing Issues.  IEN-212,
    BBN, September 1982.\n   7.   R.M. Metcalfe and D.R. Boggs.  \"Ethernet: Distributed
    Packet\n        Switching for Local Computer Networks\".  Comm. ACM 19, 7,\n        pp395-404,
    July 1976.  Also CSL-75-7, Xerox Palo Alto Research\n        Center, reprinted
    in CSL-80-2.\n"
  title: 8. References
- contents:
  - "Broadcasting Internet Datagrams in the Presence of Subnets\n   8.   Jeffrey Mogul.
    \ Internet Subnets.  RFC-917, Stanford University,\n        October 1984.\n   9.
    \  David A. Moon.  Chaosnet.  A.I. Memo 628, Massachusetts\n        Institute
    of Technology Artificial Intelligence Laboratory,\n        June 1981.\n   10.
    \ William W. Plummer.  Internet Broadcast Protocols.  IEN-10, BBN,\n        March
    1977.\n   11.  David Plummer.  An Ethernet Address Resolution Protocol.\n        RFC-826,
    Symbolics, September 1982.\n   12.  Jon Postel.  Internet Protocol.  RFC-791,
    ISI, September 1981.\n   13.  David W. Wall.  Mechanisms for Broadcast and Selective\n
    \       Broadcast.  Ph.D. Th., Stanford University, June 1980.\n   14.  David
    W. Wall and Susan S. Owicki.  Center-based Broadcasting.\n        Computer Systems
    Lab Technical Report TR189, Stanford\n        University, June 1980.\n"
  title: Broadcasting Internet Datagrams in the Presence of Subnets
