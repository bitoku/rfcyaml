- contents:
  - '                       Telnet Window Size Option

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This RFC describes a proposed Telnet option to allow
    a client to\n   convey window size to a Telnet server.  Distribution of this memo
    is\n   unlimited.\n"
  title: Status of this Memo
- contents:
  - "1. Command Name and Option Code\n      Name = NAWS (Negotiate About Window Size)\n
    \     Code = 31\n"
  title: 1. Command Name and Option Code
- contents:
  - "2. Command Meanings\n      IAC WILL NAWS\n         Sent by the Telnet client
    to suggest that NAWS be used.\n      IAC WON'T NAWS\n         Sent by the Telnet
    client to refuse to use NAWS.\n      IAC DO NAWS\n         Sent by the Telnet
    server to suggest that NAWS be used.\n      IAC DON'T NAWS\n         Sent by the
    Telnet server to refuse to use NAWS.\n      IAC SB NAWS <16-bit value> <16-bit
    value> IAC SE\n         Sent by the Telnet client to inform the Telnet server
    of the\n         window width and height.\n   The window size information is conveyed
    via this option from the\n   Telnet client to the Telnet server.  The information
    is advisory.\n   The server may accept the option, but not use the information
    that is\n   sent.\n   The client and server negotiate sending the window size
    information\n   using the standard Telnet WILL/DO/DON'T/WON'T mechanism.  If the\n
    \  client and server agree, the client may then send a subnegotiation to\n   convey
    the window size.  If the client's window size is later changed\n   (for instance,
    the window size is altered by the user), the client\n   may again send the subnegotiation.
    \ Because certain operating\n   systems, on which a server may be executing, may
    not allow the window\n   size information to be updated, the server may send a
    DON'T NAWS to\n   the client to forbid further subnegotiation after it was initially\n
    \  accepted.  A negotiation loop will not form following these rules.\n   The
    subnegotiation consists of two values, the width and the height\n   of the window
    in characters.  The values are each sent as two bytes,\n   in the Internet standard
    byte and bit order.  This allows a maximum\n   window width or height of 65535
    characters.  A value equal to zero is\n   acceptable for the width (or height),
    and means that no character\n   width (or height) is being sent.  In this case,
    the width (or height)\n   that will be assumed by the Telnet server is operating
    system\n   specific (it will probably be based upon the terminal type\n   information
    that may have been sent using the TERMINAL TYPE Telnet\n   option).\n   The syntax
    for the subnegotiation is:\n      IAC SB NAWS WIDTH[1] WIDTH[0] HEIGHT[1] HEIGHT[0]
    IAC SE\n   As required by the Telnet protocol, any occurrence of 255 in the\n
    \  subnegotiation must be doubled to distinguish it from the IAC\n   character
    (which has a value of 255).\n"
  title: 2. Command Meanings
- contents:
  - "3. Default Specification\n      WON'T NAWS\n      DON'T NAWS\n   This option
    does not assume any default window size information.\n   Often the terminal type,
    passed with the TERMINAL TYPE Telnet option,\n   may imply a window size, but
    that is not necessary for this option.\n"
  title: 3. Default Specification
- contents:
  - "4. Motivation\n   With the increasing popularity of windowing systems, a Telnet
    client\n   is often run inside a variable-sized window, and the Telnet server\n
    \  needs to know the window size for proper cursor control.  The window\n   may
    also have its size changed during the Telnet session and the\n   updated window
    size needs to be conveyed to the server.  This memo\n   specifies an option to
    send the window height and width in characters\n   from a client to a server.\n
    \  The Telnet options Negotiate Output Line Width (NAOL) and Negotiate\n   Output
    Page Size (NAOP) do not have the correct semantics for this\n   purpose, and they
    are not in common use [see RFC-1011 \"Official\n   Internet Protocols\", and the
    \"Defense Protocol Handbook\"].  The NAOL\n   and NAOP options are bidirectional
    (i.e., the server might control\n   the client's line width or page size), and
    are limited to 253\n   characters in each axis.\n   This option is a better model
    of the normal window negotiation\n   process.  The client has total control over
    the size of its window\n   and simply tells the server what the current window
    size is.\n   Furthermore, the 253 character height and width limitation is too
    low\n   so the new option has a limit of 65535 characters.  Finally, this\n   option
    sends the window height and width concurrently because they\n   are typically
    changed simultaneously and many operating systems and\n   windowing applications
    prefer to think in terms of simultaneous\n   changes in height and width.\n"
  title: 4. Motivation
- contents:
  - "5. Description and Implementation Notes\n   A typical user of this option might
    be a Telnet client running under\n   X.  After a user resizes the client's window,
    this must be\n   communicated to the Telnet client.  In 4.3 BSD Unix, the signal\n
    \  SIGWINCH (window changed) might be caught by the Telnet process and a\n   new
    NAWS subnegotiation sent to the server.  Upon receipt of a NAWS\n   subnegotiation,
    the server might do the appropriate ioctl to handle\n   the new information, and
    then could send a SIGWINCH to its child,\n   probably a shell.\n"
  title: 5. Description and Implementation Notes
- contents:
  - "6. Examples\n   In the following examples all numbers in the data stream are
    in\n   decimal.\n      1. Server suggest and client agrees to use NAWS.\n         (server
    sends)  IAC DO NAWS\n         (client sends)  IAC WILL NAWS\n         (client
    sends)  IAC SB NAWS 0 80 0 24 IAC SE\n            [A window 80 characters wide,
    24 characters high]\n            [some time occurs and the user changes the window
    size]\n         (client sends)  IAC SB NAWS 0 80 0 64 IAC SE\n            [A window
    80 characters wide, 64 characters high]\n      In all numeric form:\n         (server
    sends)  255 253 31\n         (client sends)  255 251 31\n         (client sends)
    \ 255 250 31 0 80 0 24 255 240\n         (client sends)  255 250 31 0 80 0 64
    255 240\n       2.  Client suggests and server agrees to used NAWS.\n         (client
    sends)  IAC WILL NAWS\n         (server sends)  IAC DO NAWS\n         (client
    sends)  IAC SB NAWS 1 44 0 24 IAC SE\n            [A window 300 characters wide,
    24 characters high]\n       3.  Client suggest and server refuses to use NAWS.\n
    \        (client sends)  IAC WILL NAWS\n         (server sends)  IAC DON'T NAWS\n
    \      4.  Server suggests and client refuses to use NAWS.\n         (server sends)
    \ IAC DO NAWS\n         (client sends)  IAC WON'T NAWS\n"
  title: 6. Examples
- contents:
  - "7. Acknowledgments\n   A more elaborate, X window system specific, version of
    this option\n   has been implemented at Carnegie-Mellon University by Glenn Marcy
    and\n   the author.  It is widely used in the Carnegie-Mellon University\n   Computer
    Science Department.  Mr. Marcy helped write an early draft\n   of this memo documenting
    the more elaborate option.\n"
  title: 7. Acknowledgments
