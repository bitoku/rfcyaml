Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes managed objects used for implementations of the User Datagram Protocol (UDP) in an IP version independent manner.
This memo obsoletes RFCs 2013 and 2454.
The Internet Standard Management Framework
For a detailed overview of the documents that describe the current Internet Standard Management Framework, please refer to section 7 of RFC 3410 [RFC3410].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
MIB objects are generally accessed through the Simple Network Management Protocol (SNMP).
Objects in the MIB are defined using the mechanisms defined in the Structure of Management Information (SMI).
This memo specifies a MIB module that is compliant to the SMIv2, which is described in STD 58, RFC 2578 [RFC2578], STD 58
, RFC 2579 [RFC2579] and STD 58, RFC 2580
This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes managed objects used for implementations of the User Datagram Protocol (UDP), as defined in RFC 768 [RFC0768], in an IP version independent manner.
The current UDP MIB defined in this memo consists of one table and a group of scalars:  The udp group of scalars reports parameters and statistics of a UDP protocol engine.
Two scalars, udpHCInDatagrams and udpHCOutDatagrams, have been added to this group since the publication of RFC 2013 [RFC2013] in order to provide high  capacity counters for fast networks.
Discontinuities in the values of the counters in this group are indicated by discontinuities in the value of the sysUpTime object, which is defined in RFC 3418 [RFC3418].
The udpEndpointTable provides access to status information for all UDP endpoints handled by a UDP protocol engine.
The table provides for strictly listening endpoints, as with the historical udpTable, and also for "connected" UDP endpoints, which only accept packets from a given remote system.
It also reports identification of the operating system level processes that handle UDP connections.
Addresses and ports of UDP endpoints in this table are represented using the InetAddressType, InetAddress, and InetPortNumber textual conventions defined in RFC 4001
This section discusses the relationship of this UDP MIB module to other MIB modules.
MIB UDP related MIB objects were originally defined as part of the RFC1213 MIB, defined in RFC 1213 [RFC1213].
The UDP related objects of the RFC1213 MIB were later copied into a separate MIB module and published in RFC 2013
The previous versions of the UDP MIB both defined the udpTable, which has been deprecated for basically two reasons: (1)
The udpTable only supports IPv4.
The current approach in the IETF is to write IP version neutral MIBs rather than have different definitions for various version of IP.
This reduces the amount of overhead when new objects are introduced, since there is only one place to add them.
Hence, the approach taken in RFC 2454 [RFC2454] of having separate tables is not continued.
The udpTable does not permit describing "connected" UDP endpoints.
It turns out that "connected" endpoints tend to have a different behaviour and management access pattern from those of listening endpoints.
Adding remote endpoint information to the udpEndpointTable thus allows for the addition of specific status and statistic objects for "connected" endpoints and connections.
Relationship to the IPV6 UDP MIB
The IPV6 UDP MIB, defined in RFC 2454 [RFC2454], has been moved to Historic because the approach of having separate IP version specific tables is not followed anymore.
Implementation of RFC 2454 is thus not suggested anymore.
Note that because scoped addresses are now represented using the IPv4z and IPv6z address types, there is no longer a need to explicitly include the ifIndex in the index clause of the udpEndpointTable.
This is a change from the use of ipv6UdpIfIndex in RFC 2454.
Relationship to HOST RESOURCES MIB and SYSAPPL MIB
The udpEndpointTable reports the identification of the operating system level process that handles a connection or a listening endpoint.
The value is reported as an Unsigned32, which is expected to be the same as the hrSWRunIndex of the HOST RESOURCES MIB [RFC2790] (if the value is smaller than 2147483647) or the sysApplElmtRunIndex of the SYSAPPL MIB [RFC2287].
This allows management applications to identify the UDP connections that belong to an operating system level process, which has proven valuable in operational environments.
IMPORTS MODULE IDENTITY, OBJECT TYPE, Integer32, Counter32, Counter64, Unsigned32,
" CONTACT INFO "Bill Fenner (editor) AT&T Labs   Research 75 Willow Rd.
1 650 330 7893 Email: <fenner@research.att.com
> John Flick (editor) Hewlett Packard Company 8000
> Send comments to <ipv6@ietf.org>
" DESCRIPTION "The MIB module for managing UDP implementations.
This version of this MIB module is part of RFC 4113; see the RFC itself for full legal notices."
and udpHCOutDatagrams in order to provide high capacity counters for fast networks.
Added text to the descriptions of all counter objects to indicate how discontinuities are detected.
Deprecated the IPv4 specific udpTable and replaced it with the version neutral udpEndpointTable.
This table includes support for connected UDP endpoints and support for identification of the operating system process associated with a UDP endpoint.
Deprecated the udpGroup and replaced it with object groups representing the current set of objects.
Deprecated udpMIBCompliance and replaced it with udpMIBCompliance2, which includes the compliance information for the new object groups.
March 31, 1991 DESCRIPTION "
The initial revision of this MIB module was part of MIB II, published as RFC 1213."
"The total number of UDP datagrams delivered to UDP users.
"The total number of received UDP datagrams for which there was no application at the destination port.
"The number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.
"The total number of UDP datagrams sent from this entity.
"The total number of UDP datagrams delivered to UDP users, for devices that can receive more than 1 million UDP datagrams per second.
"The total number of UDP datagrams sent from this entity, for devices that can transmit more than 1 million UDP datagrams per second.
This RFC obsoletes RFC 2454, so { udp 6 } is   obsoleted.
MAX ACCESS not accessible STATUS
A table containing information about this entity's UDP endpoints on which a local application is currently accepting or sending datagrams.
The address type in this table represents the address type used for the communication, irrespective of the higher layer abstraction.
For example, an application using IPv6 'sockets' to communicate via IPv4 between ::ffff:10.0.0.1 and ::ffff:10.0.0.2 would use InetAddressType ipv4(1).
Unlike the udpTable in RFC 2013, this table also allows the representation of an application that completely specifies both local and remote addresses and ports.
A listening application is represented in three possible ways: 1)
An application that is willing to accept both IPv4 and IPv6 datagrams is represented by a udpEndpointLocalAddressType of unknown(0) and a udpEndpointLocalAddress of ''h (a zero length octet string).
An application that is listening for datagrams only for a specific IP address but from any remote system is represented by a udpEndpointLocalAddressType of the appropriate address type, with udpEndpointLocalAddress specifying the local address.
In all cases where the remote is a wildcard, the udpEndpointRemoteAddressType is unknown(0), the udpEndpointRemoteAddress is ''
h (a zero length octet string), and the udpEndpointRemotePort is 0.
If the operating system is demultiplexing UDP packets by remote address and port, or if the application has 'connected' the socket specifying a default remote address and port, the udpEndpointRemote  values should be used to reflect this."
MAX ACCESS not accessible STATUS
current DESCRIPTION "Information about a particular current UDP endpoint.
Implementers need to be aware that if the total number of elements (octets or sub identifiers) in udpEndpointLocalAddress and udpEndpointRemoteAddress exceeds 111, then OIDs of column instances in this table will have more than 128 sub identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.
MAX ACCESS not accessible STATUS
current DESCRIPTION "The address type of udpEndpointLocalAddress.
Only IPv4, IPv4z, IPv6, and
IPv6z addresses are expected, or unknown(0) if datagrams for all local IP addresses are accepted."
InetAddress MAX ACCESS not accessible STATUS
The local IP address for this UDP endpoint.
The value of this object can be represented in three possible ways, depending on the characteristics of the listening application: 1.
For an application that is willing to accept both IPv4 and IPv6 datagrams, the value of this object must be ''h (a zero length octet string), with the value of the corresponding instance of the udpEndpointLocalAddressType object being unknown(0).
For an application that is listening for data destined only to a specific IP address, the value of this object is the specific IP address for which this node is receiving packets, with the corresponding instance of the udpEndpointLocalAddressType object representing the appropriate address type.
As this object is used in the index for the udpEndpointTable, implementors of this table should be careful not to create entries that would result in OIDs with more than 128 subidentifiers; else the information cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3."
"The local port number for this UDP endpoint."
MAX ACCESS not accessible STATUS
current DESCRIPTION "The address type of udpEndpointRemoteAddress.
Only IPv4, IPv4z, IPv6, and
IPv6z addresses are expected, or unknown(0) if datagrams for all remote IP addresses are accepted.
Also, note that some combinations of udpEndpointLocalAdressType and udpEndpointRemoteAddressType are not supported.
In particular, if the value of this object is not unknown(0), it is expected to always refer to the same IP version as udpEndpointLocalAddressType."
InetAddress MAX ACCESS not accessible STATUS
The remote IP address for this UDP endpoint.
If datagrams from any remote system are to be accepted, this value is ''
h (a zero length octet string).
Otherwise, it has the type described by udpEndpointRemoteAddressType and is the address of the remote system from which datagrams are to be accepted (or to which all datagrams will be sent).
As this object is used in the index for the udpEndpointTable, implementors of this table should be careful not to create entries that would result in OIDs with more than 128 subidentifiers; else the information cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3."
The remote port number for this UDP endpoint.
If datagrams from any remote system are to be accepted, this value is zero."
MAX ACCESS not accessible STATUS
"The instance of this tuple.
This object is used to distinguish among multiple processes 'connected' to the same UDP endpoint.
For example, on a system implementing the BSD sockets interface, this would be used to support the SO REUSEADDR and SO REUSEPORT socket options."
"The system's process ID for the process associated with this endpoint, or zero
if there is no such process.
This value is expected to be the same as HOST RESOURCES MIB::hrSWRunIndex or SYSAPPL MIB:: sysApplElmtRunIndex for some row in the appropriate tables."
It does not   provide more detailed connection information, or information   about IPv6 endpoints.
A table containing IPv4 specific UDP listener information.
It contains information about all local IPv4 UDP end points on which an application is currently accepting datagrams.
This table has been deprecated in favor of the version neutral udpEndpointTable."
deprecated DESCRIPTION "Information about a particular current UDP listener.
The local IP address for this UDP listener.
In the case of a UDP listener that is willing to accept datagrams for any IP interface associated with the node, the value 0.0.0.0 is used."
The local port number for this UDP listener."
"The compliance statement for systems that implement UDP.
There are a number of INDEX objects that cannot be represented in the form of OBJECT clauses in SMIv2, but for which we have the following compliance requirements, expressed in OBJECT clause form in this description clause:   OBJECT
InetAddress (SIZE(0 4 8 16 20))
This group is mandatory for systems that are capable of receiving or transmitting more than 1 million UDP datagrams per second.
1 million datagrams per second will cause a Counter32 to wrap in just over an hour."
The compliance statement for IPv4 only systems that implement UDP.
For IP version independence, this compliance statement is deprecated in favor of udpMIBCompliance2.
However, agents are still encouraged to implement these objects in order to interoperate with the deployed base of managers.
{ udpInDatagrams, udpNoPorts, udpInErrors, udpOutDatagrams,
The deprecated group of objects providing for management of UDP over IPv4."
The group of objects providing for counters of high speed UDP implementations."
The group of objects providing for the IP version independent management of UDP 'endpoints'."
This document is an output of the IPv6 MIB revision team, and contributors to earlier versions of this document include: Bill Fenner, AT&T Labs   Research Email:
fenner@research.at.com Brian Haberman Email: brian@innovationslab.net Shawn A. Routhier,
sar@epilogue.com Juergen Schoenwalder, TU Braunschweig Email:
bs.de Dave Thaler, Microsoft Email:
Much of Keith McCloghrie's text from RFC1213/RFC2013 remains in this document, and the structure of the MIB is due to him.
Mike Daniele wrote the original IPv6 UDP MIB in RFC2454.
Juergen Schoenwalder provided much of the text for section 2.
There are no management objects defined in this MIB that have a MAX  ACCESS clause of read write and/or read create.
So, if this MIB is implemented correctly, then there is no risk that an intruder can alter or create any management objects of this MIB module via direct SNMP SET operations.
Some of the readable objects in this MIB module (i.e., objects with a MAX ACCESS other than not accessible) may be considered sensitive or vulnerable in some network environments.
It is thus important to control
even GET and/or NOTIFY access to these objects and possibly to even encrypt the values of these objects when sending them over the network via SNMP.
These are the tables and objects and their sensitivity/vulnerability:
The indices of the udpEndpointTable and udpTable contain information on the listeners on an entity.
In particular, the udpEndpointLocalPort and udpLocalPort objects in the indices can be used to identify what ports are open on the machine and what attacks are likely to succeed, without the attacker having to run a port scanner.
SNMP versions prior to SNMPv3 did not include adequate security.
Even if the network itself is secure (for example by using IPSec), even then, there is no control as to who on the secure network is allowed to access and
the objects in this MIB module.
It is recommended that the implementors consider the security features as provided by the SNMPv3 framework (see [RFC3410], section 8), including full support for the SNMPv3 cryptographic mechanisms (for authentication and privacy).
Furthermore, deployment of SNMP versions prior to SNMPv3 is NOT RECOMMENDED.
Instead, it is RECOMMENDED to deploy SNMPv3 and to enable cryptographic security.
It is then a customer/operator responsibility to ensure that the SNMP entity giving access to an instance of this MIB module is properly configured to give access to the objects only to those principals (users) that have legitimate rights to indeed GET or SET
