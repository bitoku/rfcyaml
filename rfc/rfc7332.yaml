- title: __initial_text__
  contents:
  - "    Loop Detection Mechanisms for Session Initiation Protocol (SIP)\n       \
    \            Back-to-Back User Agents (B2BUAs)\n"
- title: Abstract
  contents:
  - "Abstract\n   SIP Back-to-Back User Agents (B2BUAs) can cause unending SIP request\n\
    \   routing loops because, as User Agent Clients, they can generate SIP\n   requests\
    \ with new Max-Forwards values.  This document discusses the\n   difficulties\
    \ associated with loop detection for B2BUAs and the\n   requirements for them\
    \ to prevent infinite loops.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7332.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Conventions . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   2\n   3.  Background  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n   4.  B2BUA Loop-Detection Behavior . . . . . . . . . . . . . .\
    \ . .   3\n   5.  B2BUA Max-Forwards Behavior . . . . . . . . . . . . . . . .\
    \ .   4\n   6.  B2BUA Max-Breadth Behavior  . . . . . . . . . . . . . . . . .\
    \   4\n   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  \
    \ 4\n   8.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .   5\n\
    \   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   5\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   SIP provides a means of preventing infinite request forwarding\
    \ loops\n   in [RFC3261], and a means of mitigating parallel forking\n   amplification\
    \ floods in [RFC5393].  Neither document normatively\n   defines specific behavior\
    \ for B2BUAs, however.\n   Unbounded SIP request loops have actually occurred\
    \ in SIP deployments\n   numerous times.  The cause of loops is usually misconfiguration,\
    \ but\n   the reason they have been unbounded/unending is they crossed B2BUAs\n\
    \   that reset the Max-Forwards value in the SIP requests they generated\n   on\
    \ their User Agent Client (UAC) side.  Although such behavior is\n   technically\
    \ legal per [RFC3261] because a B2BUA is a UAC, the\n   resulting unbounded loops\
    \ have caused service outages and make\n   troubleshooting difficult.\n   Furthermore,\
    \ [RFC5393] also provides a mechanism to mitigate the\n   impact of parallel forking\
    \ amplification issues, through the use of a\n   \"Max-Breadth\" header field.\
    \  If a B2BUA does not pass this header\n   field on, parallel forking amplification\
    \ is not mitigated with the\n   [RFC5393] mechanism.\n   This document defines\
    \ normative requirements for Max-Forwards and\n   Max-Breadth header field behaviors\
    \ of B2BUAs, in order to mitigate\n   the effect of loops and parallel forking\
    \ amplification.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP\
    \ 14, RFC 2119\n   [RFC2119].\n   B2BUA terminology and taxonomy used in this\
    \ document is based on\n   [RFC7092].\n"
- title: 3.  Background
  contents:
  - "3.  Background\n   Within the context of B2BUAs, the scope of the SIP protocol\
    \ ends at\n   the User Agent Server (UAS) side of the B2BUA, and a new one begins\n\
    \   on the UAC side.  A B2BUA is thus capable of choosing what it wishes\n   to\
    \ do on its UAC side independently of its UAS side, and still\n   remains compliant\
    \ with [RFC3261] and its extensions.  For example,\n   any B2BUA type defined\
    \ in [RFC7092] other than Proxy-B2BUA may create\n   the SIP request on its UAC\
    \ side without copying any of the Via header\n   field values received on its\
    \ UAS side.  Indeed there are valid\n   reasons for it to do so; however, this\
    \ prevents the Via-based loop-\n   detection mechanism defined in [RFC3261] and\
    \ updated by [RFC5393]\n   from detecting SIP request loops any earlier than by\
    \ reaching a Max-\n   Forwards limit.\n   Some attempts have been made by B2BUA\
    \ vendors to detect request loops\n   in other ways: by keeping track of the number\
    \ of outstanding dialog-\n   forming requests for a given caller/called URI pair;\
    \ or by detecting\n   when they receive and send their own media addressing information\
    \ too\n   many times in certain cases when they are a signaling/media-plane\n\
    \   B2BUA; or by encoding a request instance identifier in some field\n   they\
    \ believe will pass through other nodes, and detecting when they\n   see the same\
    \ value too many times.\n   All of these methods are brittle and prone to error,\
    \ however.  They\n   are brittle because it is very hard to accurately define\
    \ when a value\n   has been seen \"too many times\".  Requests can and do fork\
    \ before and\n   after B2BUAs process them, and requests legitimately spiral in\
    \ some\n   cases, leading to incorrect determination of loops.  The mechanisms\n\
    \   are prone to error because there can be other B2BUAs in the loop's\n   path\
    \ that interfere with the particular mechanism being used.\n   Ultimately, the\
    \ last defense against loops becoming unbounded is to\n   limit how many SIP hops\
    \ any request can traverse, which is the\n   purpose of the SIP Max-Forwards field\
    \ value.  If B2BUAs were to at\n   least copy and decrement the Max-Forwards header\
    \ field value from\n   their UAS to the UAC side, loops would not continue indefinitely.\n"
- title: 4.  B2BUA Loop-Detection Behavior
  contents:
  - "4.  B2BUA Loop-Detection Behavior\n   It is RECOMMENDED that B2BUAs implement\
    \ the loop-detection mechanism\n   for the Via header field, as defined for a\
    \ proxy in [RFC5393].\n"
- title: 5.  B2BUA Max-Forwards Behavior
  contents:
  - "5.  B2BUA Max-Forwards Behavior\n   This section applies for dialog-forming and\
    \ out-of-dialog SIP\n   requests.  B2BUAs MAY perform the same actions for in-dialog\n\
    \   requests, but doing so may cause issues with devices that set Max-\n   Forwards\
    \ values based upon the number of received Via or Record-Route\n   headers.\n\
    \   All B2BUA types MUST copy the received Max-Forwards header field from\n  \
    \ the received SIP request on their UAS side, to any request(s) they\n   generate\
    \ on their UAC side, and decrement the value, as if they were\n   a proxy following\
    \ the requirements described in [RFC3261].\n   Being a UAS, B2BUAs MUST also check\
    \ the received Max-Forwards header\n   field and reject or respond to the request\
    \ if the value is zero, as\n   defined in [RFC3261].\n   If the received request\
    \ did not contain a Max-Forwards header field,\n   one MUST be created in any\
    \ request generated in the UAC side, as\n   described for proxies in Section 16.6,\
    \ Step 3 of [RFC3261].  As in\n   that specification, the value of the new Max-Forwards\
    \ header SHOULD\n   be 70.\n"
- title: 6.  B2BUA Max-Breadth Behavior
  contents:
  - "6.  B2BUA Max-Breadth Behavior\n   All B2BUA types MUST copy the received Max-Breadth\
    \ header field from\n   the received SIP request on their UAS side, to any request(s)\
    \ they\n   generate on their UAC side, as if they were a proxy following the\n\
    \   requirements described in [RFC5393].\n   B2BUAs of all types MUST follow the\
    \ requirements imposed on Proxies\n   as described in Section 5.3.3 of [RFC5393],\
    \ including generating the\n   header field if none is received, limiting its\
    \ maximum value, etc.\n   B2BUAs that generate parallel requests on their UAC\
    \ side for a single\n   incoming request on the UAS side MUST also follow the\
    \ rules for Max-\n   Breadth handling in [RFC5393] as if they were a parallel\
    \ forking\n   proxy.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The security implications for parallel forking\
    \ amplification are\n   documented in Section 7 of [RFC5393].  This document does\
    \ not\n   introduce any additional issues beyond those discussed in [RFC5393].\n\
    \   Some B2BUAs reset the Max-Forwards and Max-Breadth header field\n   values\
    \ in order to obfuscate the number of hops a request has already\n   traversed,\
    \ as a privacy or security concern.  Such goals are at odds\n   with the mechanisms\
    \ in this document, and administrators can decide\n   which they consider more\
    \ important: obfuscation vs. loop detection.\n   In order to comply with this\
    \ RFC, manufacturers MUST comply with the\n   normative rules defined herein by\
    \ default, but MAY provide user-\n   configurable overrides as they see fit.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   Thanks to Brett Tate (Broadsoft), Andrew Hutton (Unify),\
    \ and Anton\n   Roman (Quobis) for their review of the document.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n\
    \              A., Peterson, J., Sparks, R., Handley, M., and E.\n           \
    \   Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n              June\
    \ 2002.\n   [RFC5393]  Sparks, R., Lawrence, S., Hawrylyshen, A., and B. Campen,\n\
    \              \"Addressing an Amplification Vulnerability in Session\n      \
    \        Initiation Protocol (SIP) Forking Proxies\", RFC 5393,\n            \
    \  December 2008.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC7092]  Kaplan, H. and V. Pascual, \"A Taxonomy\
    \ of Session\n              Initiation Protocol (SIP) Back-to-Back User Agents\"\
    , RFC\n              7092, December 2013.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Hadriel Kaplan\n   Oracle\n   EMail: hadrielk@yahoo.com\n\
    \   Victor Pascual\n   Quobis\n   EMail: victor.pascual@quobis.com\n"
