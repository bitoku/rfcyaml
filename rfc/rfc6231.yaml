- title: __initial_text__
  contents:
  - "          An Interactive Voice Response (IVR) Control Package\n             \
    \   for the Media Control Channel Framework\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a Media Control Channel Framework Package\
    \ for\n   Interactive Voice Response (IVR) dialog interaction on media\n   connections\
    \ and conferences.  The package defines dialog management\n   request elements\
    \ for preparing, starting, and terminating dialog\n   interactions, as well as\
    \ associated responses and notifications.\n   Dialog interactions are specified\
    \ in a dialog language.  This package\n   defines a lightweight IVR dialog language\
    \ (supporting prompt\n   playback, runtime controls, Dual-Tone Multi-Frequency\
    \ (DTMF)\n   collection, and media recording) and allows other dialog languages\
    \ to\n   be used.  The package also defines elements for auditing package\n  \
    \ capabilities and IVR dialogs.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6231.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   5\n   2.  Conventions and Terminology . . . . . . . . . . . . .\
    \ . . . .   8\n   3.  Control Package Definition  . . . . . . . . . . . . . .\
    \ . . .   9\n     3.1.  Control Package Name  . . . . . . . . . . . . . . . .\
    \ . .   9\n     3.2.  Framework Message Usage . . . . . . . . . . . . . . . .\
    \ .   9\n     3.3.  Common XML Support  . . . . . . . . . . . . . . . . . . .\
    \  10\n     3.4.  CONTROL Message Body  . . . . . . . . . . . . . . . . . .  10\n\
    \     3.5.  REPORT Message Body . . . . . . . . . . . . . . . . . . .  10\n  \
    \   3.6.  Audit . . . . . . . . . . . . . . . . . . . . . . . . . .  11\n    \
    \ 3.7.  Examples  . . . . . . . . . . . . . . . . . . . . . . . .  11\n   4. \
    \ Element Definitions . . . . . . . . . . . . . . . . . . . . .  11\n     4.1.\
    \  <mscivr>  . . . . . . . . . . . . . . . . . . . . . . . .  12\n     4.2.  Dialog\
    \ Management Elements  . . . . . . . . . . . . . . .  14\n       4.2.1.  <dialogprepare>\
    \ . . . . . . . . . . . . . . . . . . .  18\n       4.2.2.  <dialogstart> . .\
    \ . . . . . . . . . . . . . . . . . .  20\n         4.2.2.1.  <subscribe> . .\
    \ . . . . . . . . . . . . . . . . .  24\n           4.2.2.1.1.  <dtmfsub> . .\
    \ . . . . . . . . . . . . . . . .  25\n         4.2.2.2.  <stream>  . . . . .\
    \ . . . . . . . . . . . . . . .  26\n           4.2.2.2.1.  <region>  . . . .\
    \ . . . . . . . . . . . . . .  27\n           4.2.2.2.2.  <priority>  . . . .\
    \ . . . . . . . . . . . . .  27\n       4.2.3.  <dialogterminate> . . . . . .\
    \ . . . . . . . . . . . .  28\n       4.2.4.  <response>  . . . . . . . . . .\
    \ . . . . . . . . . . .  28\n       4.2.5.  <event> . . . . . . . . . . . . .\
    \ . . . . . . . . . .  30\n         4.2.5.1.  <dialogexit>  . . . . . . . . .\
    \ . . . . . . . . .  30\n         4.2.5.2.  <dtmfnotify>  . . . . . . . . . .\
    \ . . . . . . . .  32\n       4.2.6.  <params>  . . . . . . . . . . . . . . .\
    \ . . . . . . .  33\n         4.2.6.1.  <param> . . . . . . . . . . . . . . .\
    \ . . . . . .  33\n     4.3.  IVR Dialog Elements . . . . . . . . . . . . . .\
    \ . . . . .  34\n       4.3.1.  <dialog>  . . . . . . . . . . . . . . . . . .\
    \ . . . .  35\n         4.3.1.1.  <prompt>  . . . . . . . . . . . . . . . . .\
    \ . . .  38\n           4.3.1.1.1.  <variable>  . . . . . . . . . . . . . . .\
    \ . .  39\n             4.3.1.1.1.1.  Date Type . . . . . . . . . . . . . . .\
    \ .  40\n             4.3.1.1.1.2.  Time Type . . . . . . . . . . . . . . . .\
    \  41\n             4.3.1.1.1.3.  Digits Type . . . . . . . . . . . . . . .  42\n\
    \           4.3.1.1.2.  <dtmf>  . . . . . . . . . . . . . . . . . . .  42\n  \
    \         4.3.1.1.3.  <par> . . . . . . . . . . . . . . . . . . . .  43\n    \
    \         4.3.1.1.3.1.  <seq> . . . . . . . . . . . . . . . . . .  45\n      \
    \   4.3.1.2.  <control> . . . . . . . . . . . . . . . . . . . .  46\n        \
    \ 4.3.1.3.  <collect> . . . . . . . . . . . . . . . . . . . .  49\n          \
    \ 4.3.1.3.1.  <grammar> . . . . . . . . . . . . . . . . . .  52\n         4.3.1.4.\
    \  <record>  . . . . . . . . . . . . . . . . . . . .  53\n         4.3.1.5.  <media>\
    \ . . . . . . . . . . . . . . . . . . . . .  57\n       4.3.2.  Exit Information\
    \  . . . . . . . . . . . . . . . . . .  59\n         4.3.2.1.  <promptinfo>  .\
    \ . . . . . . . . . . . . . . . . .  59\n         4.3.2.2.  <controlinfo> . .\
    \ . . . . . . . . . . . . . . . .  59\n           4.3.2.2.1.  <controlmatch> \
    \ . . . . . . . . . . . . . . .  59\n         4.3.2.3.  <collectinfo> . . . .\
    \ . . . . . . . . . . . . . .  60\n         4.3.2.4.  <recordinfo>  . . . . .\
    \ . . . . . . . . . . . . .  60\n           4.3.2.4.1.  <mediainfo> . . . . .\
    \ . . . . . . . . . . . .  61\n     4.4.  Audit Elements  . . . . . . . . . .\
    \ . . . . . . . . . . .  61\n       4.4.1.  <audit> . . . . . . . . . . . . .\
    \ . . . . . . . . . .  61\n       4.4.2.  <auditresponse> . . . . . . . . . .\
    \ . . . . . . . . .  63\n         4.4.2.1.  <codecs>  . . . . . . . . . . . .\
    \ . . . . . . . .  65\n           4.4.2.1.1.  <codec> . . . . . . . . . . . .\
    \ . . . . . . .  65\n         4.4.2.2.  <capabilities>  . . . . . . . . . . .\
    \ . . . . . .  66\n           4.4.2.2.1.  <dialoglanguages> . . . . . . . . .\
    \ . . . . .  68\n           4.4.2.2.2.  <grammartypes>  . . . . . . . . . . .\
    \ . . . .  68\n           4.4.2.2.3.  <recordtypes> . . . . . . . . . . . . .\
    \ . . .  68\n           4.4.2.2.4.  <prompttypes> . . . . . . . . . . . . . .\
    \ . .  68\n           4.4.2.2.5.  <variables> . . . . . . . . . . . . . . . .\
    \ .  69\n             4.4.2.2.5.1.  <variabletype>  . . . . . . . . . . . . .\
    \  69\n           4.4.2.2.6.  <maxpreparedduration> . . . . . . . . . . . .  70\n\
    \           4.4.2.2.7.  <maxrecordduration> . . . . . . . . . . . . .  70\n  \
    \       4.4.2.3.  <dialogs> . . . . . . . . . . . . . . . . . . . .  70\n    \
    \       4.4.2.3.1.  <dialogaudit> . . . . . . . . . . . . . . . .  71\n     4.5.\
    \  Response Status Codes . . . . . . . . . . . . . . . . . .  71\n     4.6.  Type\
    \ Definitions  . . . . . . . . . . . . . . . . . . . .  77\n       4.6.1.  Boolean\
    \ . . . . . . . . . . . . . . . . . . . . . . .  77\n       4.6.2.  DTMFChar \
    \ . . . . . . . . . . . . . . . . . . . . . .  77\n       4.6.3.  DTMFString \
    \ . . . . . . . . . . . . . . . . . . . . .  77\n       4.6.4.  Non-Negative Integer\
    \  . . . . . . . . . . . . . . . .  77\n       4.6.5.  Positive Integer  . . .\
    \ . . . . . . . . . . . . . . .  77\n       4.6.6.  String  . . . . . . . . .\
    \ . . . . . . . . . . . . . .  78\n       4.6.7.  Time Designation  . . . . .\
    \ . . . . . . . . . . . . .  78\n       4.6.8.  Percentage  . . . . . . . . .\
    \ . . . . . . . . . . . .  78\n       4.6.9.  URI . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  78\n       4.6.10. MIME Media Type . . . . . . . . .\
    \ . . . . . . . . . .  78\n       4.6.11. Language Identifier . . . . . . . .\
    \ . . . . . . . . .  78\n       4.6.12. DateTime  . . . . . . . . . . . . . .\
    \ . . . . . . . .  79\n   5.  Formal Syntax . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  79\n   6.  Examples  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 105\n     6.1.  AS-MS Dialog Interaction Examples . . . . . . .\
    \ . . . . . 105\n       6.1.1.  Starting an IVR Dialog  . . . . . . . . . . .\
    \ . . . . 105\n       6.1.2.  IVR Dialog Fails to Start . . . . . . . . . . .\
    \ . . . 106\n       6.1.3.  Preparing and Starting an IVR Dialog  . . . . . .\
    \ . . 107\n       6.1.4.  Terminating a Dialog  . . . . . . . . . . . . . . .\
    \ . 108\n     6.2.  IVR Dialog Examples . . . . . . . . . . . . . . . . . . .\
    \ 108\n       6.2.1.  Playing Announcements . . . . . . . . . . . . . . . . 109\n\
    \       6.2.2.  Prompt and Collect  . . . . . . . . . . . . . . . . . 109\n  \
    \     6.2.3.  Prompt and Record . . . . . . . . . . . . . . . . . . 111\n    \
    \   6.2.4.  Runtime Controls  . . . . . . . . . . . . . . . . . . 112\n      \
    \ 6.2.5.  Subscriptions and Notifications . . . . . . . . . . . 113\n       6.2.6.\
    \  Dialog Repetition until DTMF Collection Complete  . . 113\n     6.3.  Other\
    \ Dialog Languages  . . . . . . . . . . . . . . . . . 114\n     6.4.  Foreign\
    \ Namespace Attributes and Elements . . . . . . . . 115\n   7.  Security Considerations\
    \ . . . . . . . . . . . . . . . . . . . 116\n   8.  IANA Considerations . . .\
    \ . . . . . . . . . . . . . . . . . . 119\n     8.1.  Control Package Registration\
    \  . . . . . . . . . . . . . . 119\n     8.2.  URN Sub-Namespace Registration\
    \  . . . . . . . . . . . . . 120\n     8.3.  XML Schema Registration . . . . .\
    \ . . . . . . . . . . . . 120\n     8.4.  MIME Media Type Registration for\n \
    \          application/msc-ivr+xml . . . . . . . . . . . . . . . . . 120\n   \
    \  8.5.  IVR Prompt Variable Type Registration Information . . . . 121\n   9.\
    \  Using VoiceXML as a Dialog Language . . . . . . . . . . . . . 122\n     9.1.\
    \  Preparing a VoiceXML Dialog . . . . . . . . . . . . . . . 122\n     9.2.  Starting\
    \ a VoiceXML Dialog  . . . . . . . . . . . . . . . 123\n       9.2.1.  Session\
    \ Protocol Information  . . . . . . . . . . . . 124\n       9.2.2.  Session Media\
    \ Stream Information  . . . . . . . . . . 125\n       9.2.3.  Session Parameter\
    \ Information . . . . . . . . . . . . 127\n     9.3.  Terminating a VoiceXML Dialog\
    \ . . . . . . . . . . . . . . 128\n     9.4.  Exiting a VoiceXML Dialog . . .\
    \ . . . . . . . . . . . . . 128\n     9.5.  Call Transfer . . . . . . . . . .\
    \ . . . . . . . . . . . . 129\n   10. Contributors  . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 130\n   11. Acknowledgments . . . . . . . . . . . . .\
    \ . . . . . . . . . . 130\n   12. References  . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . 130\n     12.1. Normative References  . . . . . . . . . .\
    \ . . . . . . . . 130\n     12.2. Informative References  . . . . . . . . . .\
    \ . . . . . . . 132\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Media Control Channel Framework [RFC6230] provides a\
    \ generic\n   approach for establishment and reporting capabilities of remotely\n\
    \   initiated commands.  The Channel Framework -- an equivalent term for\n   the\
    \ Media Control Channel Framework -- utilizes many functions\n   provided by the\
    \ Session Initiation Protocol (SIP) [RFC3261] for the\n   rendezvous and establishment\
    \ of a reliable channel for control\n   interactions.  The Control Framework also\
    \ introduces the concept of a\n   Control Package.  A Control Package is an explicit\
    \ usage of the\n   Control Framework for a particular interaction set.  This document\n\
    \   defines a Control Package for Interactive Voice Response (IVR)\n   dialogs\
    \ on media connections and conferences.  The term 'dialog' in\n   this document\
    \ refers to an IVR dialog and is completely unrelated to\n   the notion of a SIP\
    \ dialog.  The term 'IVR' is used in its inclusive\n   sense, allowing media other\
    \ than voice for dialog interaction.\n   The package defines dialog management\
    \ request elements for preparing,\n   starting, and terminating dialog interactions,\
    \ as well as associated\n   responses and notifications.  Dialog interactions\
    \ are specified using\n   a dialog language where the language specifies a well-defined\
    \ syntax\n   and semantics for permitted operations (play a prompt, record input\n\
    \   from the user, etc.).  This package defines a lightweight IVR dialog\n   language\
    \ (supporting prompt playback, runtime controls, DTMF\n   collection, and media\
    \ recording) and allows other dialog languages to\n   be used.  These dialog languages\
    \ are specified inside dialog\n   management elements for preparing and starting\
    \ dialog interactions.\n   The package also defines elements for auditing package\
    \ capabilities\n   and IVR dialogs.\n   This package has been designed to satisfy\
    \ IVR requirements documented\n   in \"Media Server Control Protocol Requirements\"\
    \ [RFC5167] -- more\n   specifically, REQ-MCP-28, REQ-MCP-29, and REQ-MCP-30.\
    \  It achieves\n   this by building upon two major approaches to IVR dialog design.\n\
    \   These approaches address a wide range of IVR use cases and are used\n   in\
    \ many applications that are extensively deployed today.\n   First, the package\
    \ is designed to provide the major IVR functionality\n   of SIP media server languages\
    \ such as netann [RFC4240], Media Server\n   Control Markup Language (MSCML) [RFC5022],\
    \ and Media Server Markup\n   Language (MSML) [RFC5707], which themselves build\
    \ upon more\n   traditional non-SIP languages ([H.248.9], [RFC2897]).  A key\n\
    \   differentiator is that this package provides IVR functionality using\n   the\
    \ Channel Framework.\n   Second, its design is aligned with key concepts of the\
    \ web model as\n   defined in W3C Voice Browser languages.  The key dialog management\n\
    \   mechanism is closely aligned with Call Control XML (CCXML) [CCXML10].\n  \
    \ The dialog functionality defined in this package can be largely seen\n   as\
    \ a subset of VoiceXML ([VXML20], [VXML21]): where possible, basic\n   prompting,\
    \ DTMF collection, and media recording features are\n   incorporated, but not\
    \ any advanced VoiceXML constructs (such as\n   <form>, its interpretation algorithm,\
    \ or a dynamic data model).  As\n   W3C develops VoiceXML 3.0 [VXML30], we expect\
    \ to see further\n   alignment, especially in providing a set of basic independent\n\
    \   primitive elements (such as prompt, collect, record, and runtime\n   controls)\
    \ that can be reused in different dialog languages.\n   By reusing and building\
    \ upon design patterns from these approaches to\n   IVR languages, this package\
    \ is intended to provide a foundation that\n   is familiar to current IVR developers\
    \ and sufficient for most IVR\n   applications, as well as a path to other languages\
    \ that address more\n   advanced applications.\n   This Control Package defines\
    \ a lightweight IVR dialog language.  The\n   scope of this dialog language is\
    \ the following IVR functionality:\n   o  playing one or more media resources\
    \ as a prompt to the user\n   o  runtime controls (including VCR controls like\
    \ speed and volume)\n   o  collecting DTMF input from the user according to a\
    \ grammar\n   o  recording user media input\n   Out of scope for this dialog language\
    \ are more advanced functions\n   including ASR (Automatic Speech Recognition),\
    \ TTS (Text-to-Speech),\n   fax, automatic prompt recovery ('media fallback'),\
    \ and media\n   transformation.  Such functionality can be addressed by other\
    \ dialog\n   languages (such as VoiceXML) used with this package, extensions to\n\
    \   this package (addition of foreign elements or attributes from another\n  \
    \ namespace), or other Control Packages.\n   The functionality of this package\
    \ is defined by messages, containing\n   XML [XML] elements, transported using\
    \ the Media Control Channel\n   Framework.  The XML elements can be divided into\
    \ three types: dialog\n   management elements; a dialog element that defines a\
    \ lightweight IVR\n   dialog language used with dialog management elements; and\
    \ finally,\n   elements for auditing package capabilities as well as dialogs managed\n\
    \   by the package.\n   Dialog management elements are designed to manage the\
    \ general\n   lifecycle of a dialog.  Elements are provided for preparing a dialog,\n\
    \   starting the dialog on a conference or connection, and terminating\n   execution\
    \ of a dialog.  Each of these elements is contained in a\n   Media Control Channel\
    \ Framework CONTROL message sent to the media\n   server.  When the appropriate\
    \ action has been executed, the media\n   server sends a REPORT message (or a\
    \ 200 response to the CONTROL\n   message if it can execute in time) with a response\
    \ element indicating\n   whether or not the operation was successful (e.g., if\
    \ the dialog\n   cannot be started, then the error is reported in this response).\n\
    \   Once a dialog has been successfully started, the media server can\n   send\
    \ further event notifications in a framework CONTROL message.\n   This package\
    \ defines two event notifications: a DTMF event indicating\n   the DTMF activity,\
    \ and a dialogexit event indicating that the dialog\n   has exited.  If the dialog\
    \ has executed successfully, the dialogexit\n   event includes information collected\
    \ during the dialog.  If an error\n   occurs during execution (e.g., a media resource\
    \ failed to play, no\n   recording resource available, etc.), then error information\
    \ is\n   reported in the dialogexit event.  Once a dialogexit event is sent,\n\
    \   the dialog lifecycle is terminated.\n   The dialog management elements for\
    \ preparing and starting a dialog\n   specify the dialog using a dialog language.\
    \  A dialog language has\n   well-defined syntax and semantics for defined dialog\
    \ operations.\n   Typically, dialog languages are written in XML where the root\
    \ element\n   has a designated XML namespace and, when used as standalone\n  \
    \ documents, have an associated MIME media type.  For example, VoiceXML\n   is\
    \ an XML dialog language with the root element <vxml> with the\n   designated\
    \ namespace 'http://www.w3.org/2001/vxml' and standalone\n   documents are associated\
    \ with the MIME media type 'application/\n   voicexml+xml' [RFC4267].\n   This\
    \ Control Package defines its own lightweight IVR dialog language.\n   The language\
    \ has a root element (<dialog>) with the same designated\n   namespace as used\
    \ for other elements defined in this package (see\n   Section 8.2).  The root\
    \ element contains child elements for playing\n   prompts to the user, specifying\
    \ runtime controls, collecting DTMF\n   input from the user, and recording media\
    \ input from the user.  The\n   child elements can co-occur so as to provide 'play\
    \ announcement',\n   'prompt and collect', as well as 'prompt and record' functionality.\n\
    \   The dialog management elements for preparing and starting a dialog\n   can\
    \ specify the dialog language either by including inline a fragment\n   with the\
    \ root element or by referencing an external dialog document.\n   The dialog language\
    \ defined in this package is specified inline.\n   Other dialog languages, such\
    \ as VoiceXML, can be used by referencing\n   an external dialog document.\n \
    \  The document is organized as follows.  Section 3 describes how this\n   Control\
    \ Package fulfills the requirements for a Media Control Channel\n   Framework\
    \ Control Package.  Section 4 describes the syntax and\n   semantics of defined\
    \ elements, including dialog management\n   (Section 4.2), the IVR dialog element\
    \ (Section 4.3), and audit\n   elements (Section 4.4).  Section 5 describes an\
    \ XML schema for these\n   elements and provides extensibility by allowing attributes\
    \ and\n   elements from other namespaces.  Section 6 provides examples of\n  \
    \ package usage.  Section 7 describes important security considerations\n   for\
    \ use of this Control Package.  Section 8 provides information on\n   IANA registration\
    \ of this Control Package, including its name, XML\n   namespace, and MIME media\
    \ type.  It also establishes a registry for\n   prompt variables.  Finally, Section\
    \ 9 provides additional information\n   on using VoiceXML when supported as an\
    \ external dialog language.\n"
- title: 2.  Conventions and Terminology
  contents:
  - "2.  Conventions and Terminology\n   In this document, BCP 14 [RFC2119] defines\
    \ the key words \"MUST\",\n   \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    , \"SHOULD\", \"SHOULD NOT\",\n   \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\".  In\n   addition, BCP 15 indicates requirement levels for\
    \ compliant\n   implementations.\n   The following additional terms are defined\
    \ for use in this document:\n   Dialog:  A dialog performs media interaction with\
    \ a user following\n      the concept of an IVR (Interactive Voice Response) dialog\
    \ (this\n      sense of 'dialog' is completely unrelated to a SIP dialog).  A\n\
    \      dialog is specified as inline XML or via a URI reference to an\n      external\
    \ dialog document.  Traditional IVR dialogs typically\n      feature capabilities\
    \ such as playing audio prompts, collecting\n      DTMF input, and recording audio\
    \ input from the user.  More\n      inclusive definitions include support for\
    \ other media types,\n      runtime controls, synthesized speech, recording and\
    \ playback of\n      video, recognition of spoken input, and mixed initiative\n\
    \      conversations.\n   Application Server:  A SIP [RFC3261] application server\
    \ (AS) hosts\n      and executes services such as interactive media and conferencing\n\
    \      in an operator's network.  An AS influences and impacts the SIP\n     \
    \ session, in particular by terminating SIP sessions on a media\n      server,\
    \ which is under its control.\n   Media Server:  A media server (MS) processes\
    \ media streams on behalf\n      of an AS by offering functionality such as interactive\
    \ media,\n      conferencing, and transcoding to the end user.  Interactive media\n\
    \      functionality is realized by way of dialogs that are initiated by\n   \
    \   the application server.\n"
- title: 3.  Control Package Definition
  contents:
  - "3.  Control Package Definition\n   This section fulfills the mandatory requirement\
    \ for information that\n   MUST be specified during the definition of a Control\
    \ Framework\n   Package, as detailed in Section 7 of [RFC6230].\n"
- title: 3.1.  Control Package Name
  contents:
  - "3.1.  Control Package Name\n   The Control Framework requires a Control Package\
    \ to specify and\n   register a unique name.\n   The name of this Control Package\
    \ is \"msc-ivr/1.0\" (Media Server\n   Control - Interactive Voice Response -\
    \ version 1.0).  Its IANA\n   registration is specified in Section 8.1.\n   Since\
    \ this is the initial (\"1.0\") version of the Control Package,\n   there are\
    \ no backwards-compatibility issues to address.\n"
- title: 3.2.  Framework Message Usage
  contents:
  - "3.2.  Framework Message Usage\n   The Control Framework requires a Control Package\
    \ to explicitly detail\n   the CONTROL messages that can be used as well as provide\
    \ an\n   indication of directionality between entities.  This will include\n \
    \  which role type is allowed to initiate a request type.\n   This package specifies\
    \ Control and response messages in terms of XML\n   elements defined in Section\
    \ 4, where the message bodies have the MIME\n   media type defined in Section\
    \ 8.4.  These elements describe requests,\n   responses, and notifications and\
    \ all are contained within a root\n   <mscivr> element (Section 4.1).\n   In this\
    \ package, the MS operates as a Control Server in receiving\n   requests from,\
    \ and sending responses to, the AS (operating as Control\n   Client).  Dialog\
    \ management requests and responses are defined in\n   Section 4.2.  Audit requests\
    \ and responses are defined in\n   Section 4.4.  Dialog management and audit responses\
    \ are carried in a\n   framework 200 response or REPORT message bodies.  This\
    \ package's\n   response codes are defined in Section 4.5.\n   Note that package\
    \ responses are different from framework response\n   codes.  Framework error\
    \ response codes (see Section 7 of [RFC6230])\n   are used when the request or\
    \ event notification is invalid; for\n   example, a request is invalid XML (400),\
    \ or not understood (500).\n   The MS also operates as a Control Client in sending\
    \ event\n   notification to the AS (Control Server).  Event notifications\n  \
    \ (Section 4.2.5) are carried in CONTROL message bodies.  The AS MUST\n   respond\
    \ with a Control Framework 200 response.\n"
- title: 3.3.  Common XML Support
  contents:
  - "3.3.  Common XML Support\n   The Control Framework requires a Control Package\
    \ definition to\n   specify if the attributes for media dialog or conference references\n\
    \   are required.\n   This package requires that the XML schema in Section A.1\
    \ of [RFC6230]\n   MUST be supported for media dialogs and conferences.\n   The\
    \ package uses \"connectionid\" and \"conferenceid\" attributes for\n   various\
    \ element definitions (Section 4).  The XML schema (Section 5)\n   imports the\
    \ definitions of these attributes from the framework\n   schema.\n"
- title: 3.4.  CONTROL Message Body
  contents:
  - "3.4.  CONTROL Message Body\n   The Control Framework requires a Control Package\
    \ to define the\n   control body that can be contained within a CONTROL command\
    \ request\n   and to indicate the location of detailed syntax definitions and\n\
    \   semantics for the appropriate body types.\n   When operating as Control Server,\
    \ the MS receives Control message\n   bodies with the MIME media type defined\
    \ in Section 8.4 and containing\n   an <mscivr> element (Section 4.1) with either\
    \ a dialog management or\n   audit request child element.\n   The following dialog\
    \ management request elements are carried in\n   CONTROL message bodies to the\
    \ MS: <dialogprepare> (Section 4.2.1),\n   <dialogstart> (Section 4.2.2), and\
    \ <dialogterminate> (Section 4.2.3)\n   elements.\n   The <audit> request element\
    \ (Section 4.4.1) is also carried in\n   CONTROL message bodies.\n   When operating\
    \ as Control Client, the MS sends CONTROL messages with\n   the MIME media type\
    \ defined in Section 8.4 and a body containing an\n   <mscivr> element (Section\
    \ 4.1) with a notification <event> child\n   element (Section 4.2.5).\n"
- title: 3.5.  REPORT Message Body
  contents:
  - "3.5.  REPORT Message Body\n   The Control Framework requires a Control Package\
    \ definition to define\n   the REPORT body that can be contained within a REPORT\
    \ command\n   request, or that no report package body is required.  This section\n\
    \   indicates the location of detailed syntax definitions and semantics\n   for\
    \ the appropriate body types.\n   When operating as Control Server, the MS sends\
    \ REPORT bodies with the\n   MIME media type defined in Section 8.4 and containing\
    \ a <mscivr>\n   element (Section 4.1) with a response child element.  The response\n\
    \   element for dialog management requests is a <response> element\n   (Section\
    \ 4.2.4).  The response element for an audit request is an\n   <auditresponse>\
    \ element (Section 4.4.2).\n"
- title: 3.6.  Audit
  contents:
  - "3.6.  Audit\n   The Control Framework encourages Control Packages to specify\
    \ whether\n   auditing is available, how it is triggered, as well as the query/\n\
    \   response formats.\n   This Control Package supports auditing of package capabilities\
    \ and\n   dialogs on the MS.  An audit request is carried in a CONTROL message\n\
    \   (see Section 3.4) and an audit response in a REPORT message (or a 200\n  \
    \ response to the CONTROL if it can execute the audit in time) (see\n   Section\
    \ 3.5).\n   The syntax and semantics of audit request and response elements are\n\
    \   defined in Section 4.4.\n"
- title: 3.7.  Examples
  contents:
  - "3.7.  Examples\n   The Control Framework recommends Control Packages to provide\
    \ a range\n   of message flows that represent common flows using the package and\n\
    \   this framework document.\n   This Control Package provides examples of such\
    \ message flows in\n   Section 6.\n"
- title: 4.  Element Definitions
  contents:
  - "4.  Element Definitions\n   This section defines the XML elements for this package.\
    \  The elements\n   are defined in the XML namespace specified in Section 8.2.\n\
    \   The root element is <mscivr> (Section 4.1).  All other XML elements\n   (requests,\
    \ responses, and notification elements) are contained within\n   it.  Child elements\
    \ describe dialog management (Section 4.2) and\n   audit (Section 4.4) functionality.\
    \  The IVR dialog element (contained\n   within dialog management elements) is\
    \ defined in Section 4.3.\n   Response status codes are defined in Section 4.5\
    \ and type definitions\n   in Section 4.6.\n   Implementation of this Control\
    \ Package MUST address the Security\n   Considerations described in Section 7.\n\
    \   Implementation of this Control Package MUST adhere to the syntax and\n   semantics\
    \ of XML elements defined in this section and the schema\n   (Section 5).  Since\
    \ XML schema is unable to support some types of\n   syntactic constraints (such\
    \ as attribute and element co-occurrence),\n   some elements in this package specify\
    \ additional syntactic\n   constraints in their textual definition.  If there\
    \ is a difference in\n   constraints between the XML schema and the textual description\
    \ of\n   elements in this section, the textual definition takes priority.\n  \
    \ The XML schema supports extensibility by allowing attributes and\n   elements\
    \ from other namespaces.  Implementations MAY support\n   additional capabilities\
    \ by means of attributes and elements from\n   other (foreign) namespaces.  Attributes\
    \ and elements from foreign\n   namespaces are not described in this section.\n\
    \   Some elements in this Control Package contain attributes whose value\n   is\
    \ a URI.  These elements include: <dialogprepare> (Section 4.2.1),\n   <dialogstart>\
    \ (Section 4.2.2), <media> (Section 4.3.1.5), <grammar>\n   (Section 4.3.1.3.1),\
    \ and <record> (Section 4.3.1.4).  The MS MUST\n   support both HTTP [RFC2616]\
    \ and HTTPS [RFC2818] protocol schemes for\n   fetching and uploading resources,\
    \ and the MS MAY support other\n   schemes.  The implementation SHOULD support\
    \ storage of authentication\n   information as part of its configuration, including\
    \ security\n   certificates for use with HTTPS.  If the implementation wants to\n\
    \   support user authentication, user certifications and passwords can\n   also\
    \ be stored as part of its configuration or the implementation can\n   extend\
    \ the schema (adding, for example, an http-password attribute in\n   its own namespace)\
    \ and then map user authentication information onto\n   the appropriate headers\
    \ following the HTTP authentication model\n   [RFC2616].\n   Some elements in\
    \ this Control Package contain attributes whose value\n   is descriptive text\
    \ primarily for diagnostic use.  The implementation\n   can indicate the language\
    \ used in the descriptive text by means of a\n   'desclang' attribute ([RFC2277],\
    \ [RFC5646]).  The desclang attribute\n   can appear on the root element as well\
    \ as selected subordinate\n   elements (see Section 4.1).  The desclang attribute\
    \ value on the root\n   element applies to all desclang attributes in subordinate\
    \ elements\n   unless the subordinate element has an explicit desclang attribute\n\
    \   that overrides it.\n   Usage examples are provided in Section 6.\n"
- title: 4.1.  <mscivr>
  contents:
  - "4.1.  <mscivr>\n   The <mscivr> element has the following attributes (in addition\
    \ to\n   standard XML namespace attributes such as xmlns):\n   version:  a string\
    \ specifying the mscivr package version.  The value\n      is fixed as '1.0' for\
    \ this version of the package.  The attribute\n      is mandatory.\n   desclang:\
    \  specifies the language used in descriptive text attributes\n      of subordinate\
    \ elements (unless the subordinate element provides a\n      desclang attribute\
    \ that overrides the value for its descriptive\n      text attributes).  The descriptive\
    \ text attributes on subordinate\n      elements include: the reason attribute\
    \ on <response>\n      (Section 4.2.4), <dialogexit> (Section 4.2.5.1), and\n\
    \      <auditresponse> (Section 4.4.2); desc attribute on <variabletype>\n   \
    \   and <format> (Section 4.4.2.2.5.1).  A valid value is a language\n      identifier\
    \ (Section 4.6.11).  The attribute is optional.  The\n      default value is i-default\
    \ (BCP 47 [RFC5646]).\n   The <mscivr> element has the following defined child\
    \ elements, only\n   one of which can occur:\n   1.  dialog management elements\
    \ defined in Section 4.2:\n       <dialogprepare>  prepare a dialog.  See Section\
    \ 4.2.1.\n       <dialogstart>  start a dialog.  See Section 4.2.2.\n       <dialogterminate>\
    \  terminate a dialog.  See Section 4.2.3.\n       <response>  response to a dialog\
    \ request.  See Section 4.2.4.\n       <event>  dialog or subscription notification.\
    \  See Section 4.2.5.\n   2.  audit elements defined in Section 4.4:\n       <audit>\
    \  audit package capabilities and managed dialogs.  See\n          Section 4.4.1.\n\
    \       <auditresponse>  response to an audit request.  See\n          Section\
    \ 4.4.2.\n   For example, a request to the MS to start an IVR dialog playing a\n\
    \   prompt:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <dialogstart connectionid=\"ssd3r3:sds345b\">\n     <dialog>\n      <prompt>\n\
    \       <media loc=\"http://www.example.com/welcome.wav\"/>\n      </prompt>\n\
    \     </dialog>\n    </dialogstart>\n   </mscivr>\n   and a response from the\
    \ MS that the dialog started successfully:\n   <mscivr version=\"1.0\" xmlns=\"\
    urn:ietf:params:xml:ns:msc-ivr\">\n    <response status=\"200\" dialogid=\"d1\"\
    />\n   </mscivr>\n   and finally a notification from the MS indicating that the\
    \ dialog\n   exited upon completion of playing the prompt:\n  <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\n          desclang=\"en\">\n \
    \  <event dialogid=\"d1\">\n    <dialogexit status=\"1\" reason=\"successful completion\
    \ of the dialog\">\n     <promptinfo termmode=\"completed\"/>\n    </dialogexit>\n\
    \   </event>\n  </mscivr>\n   The language of the descriptive text in the reason\
    \ attribute of\n   <dialogexit> is explicitly indicated by the desclang attribute\
    \ of the\n   <mscivr> root element.\n"
- title: 4.2.  Dialog Management Elements
  contents:
  - "4.2.  Dialog Management Elements\n   This section defines the dialog management\
    \ XML elements for this\n   Control Package.  These elements are divided into\
    \ requests,\n   responses, and notifications.\n   Request elements are sent to\
    \ the MS to request a specific dialog\n   operation to be executed.  The following\
    \ request elements are\n   defined:\n   <dialogprepare>:  prepare a dialog for\
    \ later execution\n   <dialogstart>:  start a (prepared) dialog on a connection\
    \ or\n      conference\n   <dialogterminate>:  terminate a dialog\n   Responses\
    \ from the MS describe the status of the requested operation.\n   Responses are\
    \ specified in a <response> element (Section 4.2.4) that\n   includes a mandatory\
    \ attribute describing the status in terms of a\n   numeric code.  Response status\
    \ codes are defined in Section 4.5.  The\n   MS MUST respond to a request message\
    \ with a response message.  If the\n   MS is not able to process the request and\
    \ carry out the dialog\n   operation, the request has failed and the MS MUST indicate\
    \ the class\n   of failure using an appropriate 4xx response code.  Unless an\
    \ error\n   response code is specified for a class of error within this section,\n\
    \   implementations follow Section 4.5 in determining the appropriate\n   status\
    \ code for the response.\n   Notifications are sent from the MS to provide updates\
    \ on the status\n   of a dialog or operations defined within the dialog.  Notifications\n\
    \   are specified in an <event> element (Section 4.2.5).\n                   \
    \          +---------+\n                             |  IDLE   |\n           \
    \                  +---------+\n                               |     |\n     \
    \                          |     |\n               <dialogprepare>/|     |<dialogstart>/\n\
    \                               |     |\n           +---------+         |    \
    \ |             +---------+\n  +-----<--|         |<--------+     +------------>|\
    \         |+------>-+\n  | +-<----|PREPARING|                             |STARTING\
    \ |         |\n  | |      |         |                 ----------->|         |---->--+\
    \ |\n  | |      +---------+                /            +---------+       | |\n\
    \  | |           |                    /                  |            | |\n  |\
    \ |           |/200 response      /      /200 response|            | |\n  | |\
    \           |                  /                    |            | |\n  | |  \
    \         |                 /                     |            | |\n  | |    \
    \       |                /                      |            | |\n  V V      \
    \     v               /<dialogstart>/         v            | |\n  | |      +---------+\
    \         /                   +---------+       | |\n  | |      |         |--------+\
    \               +----|         |       | |\n  | |      |PREPARED |---------+ \
    \             |    | STARTED |       | |\n  | |      |         |         |   \
    \           +--->|         |       | |\n  | |      |         |--------+| <dialogterminate>/|\
    \         |       | |\n  | |      +---------+        ||  200 response     +---------+\
    \       | |\n  | |                         ||                    |           \
    \     | |\n  | | /dialogexit notification||                    |             \
    \   | |\n  | |           (timeout)     ||                    |               \
    \ | |\n  | |                         ||                    |                |\
    \ |\n  | |                         ||                    |                | |\n\
    \  | |                         ||                    |                | |\n  |\
    \ |                         ||<dialogterminate>/  |                | |\n  | |\
    \                         ||  200 response      |                | |\n  | |  \
    \                       ||       +            |/dialogexit     | |\n  | |    \
    \                     || /dialogexit        | notification   | |\n  | |      \
    \                   || notification       |                | |\n  | |        \
    \                 ||                    |                | |\n  | |          \
    \               vv                    |                | |\n  | |      /ERROR\
    \ response  +-----------+           |                | |\n  | +---------------------->|\
    \           |<----------+ /ERROR response| |\n  +------------------------>|TERMINATED\
    \ |<---------------------------+ |\n       <dialogterminate>/   |           |<-----------------------------+\n\
    \           410 response     +-----------+ <dialogterminate>/410 response\n  \
    \                      Figure 1: Dialog Lifecycle\n   The MS implementation MUST\
    \ adhere to the dialog lifecycle shown in\n   Figure 1, where each dialog has\
    \ the following states:\n   IDLE:  the dialog is uninitialized.\n   PREPARING:\
    \  the dialog is being prepared.  The dialog is assigned a\n      valid dialog\
    \ identifier (see below).  If an error occurs, the\n      dialog transitions to\
    \ the TERMINATED state and the MS MUST send a\n      response indicating the error.\
    \  If the dialog is terminated before\n      preparation is complete, the dialog\
    \ transitions to the TERMINATED\n      state and the MS MUST send a 410 response\
    \ (Section 4.5) for the\n      prepare request.\n   PREPARED:  the dialog has\
    \ been successfully prepared and the MS MUST\n      send a 200 response indicating\
    \ the prepare operation was\n      successful.  If the dialog is terminated, then\
    \ the MS MUST send a\n      200 response, the dialog transitions to the TERMINATED\
    \ state and\n      the MS MUST send a dialogexit notification event (see\n   \
    \   Section 4.2.5.1).  If the duration the dialog remains in the\n      PREPARED\
    \ state exceeds the maximum preparation duration, the\n      dialog transitions\
    \ to the TERMINATED state and the MS MUST send a\n      dialogexit notification\
    \ with the appropriate error status code\n      (see Section 4.2.5.1).  A maximum\
    \ preparation duration of 300s is\n      RECOMMENDED.\n   STARTING:  the dialog\
    \ is being started.  If the dialog has not\n      already been prepared, it is\
    \ first prepared and assigned a valid\n      dialog identifier (see below).  If\
    \ an error occurs the dialog\n      transitions to the TERMINATED state and the\
    \ MS MUST send a\n      response indicating the error.  If the dialog is terminated,\
    \ the\n      dialog transitions to the TERMINATED state and the MS MUST send a\n\
    \      410 response (Section 4.5) for the start request.\n   STARTED:  the dialog\
    \ has been successfully started and is now active.\n      The MS MUST send a 200\
    \ response indicating the start operation was\n      successful.  If any dialog\
    \ events occur that were subscribed to,\n      the MS MUST send a notifications\
    \ when the dialog event occurs.\n      When the dialog exits (due to normal termination,\
    \ an error, or a\n      terminate request), the MS MUST send a dialogexit notification\n\
    \      event (see Section 4.2.5.1) and the dialog transitions to the\n      TERMINATED\
    \ state.\n   TERMINATED:  the dialog is terminated and its dialog identifier is\
    \ no\n      longer valid.  Dialog notifications MUST NOT be sent for this\n  \
    \    dialog.\n   Each dialog has a valid identifier until it transitions to a\n\
    \   TERMINATED state.  The dialog identifier is assigned by the MS unless\n  \
    \ the <dialogprepare> or <dialogstart> request already specifies a\n   identifier\
    \ (dialogid) that is not associated with any other dialog on\n   the MS.  Once\
    \ a dialog is in a TERMINATED state, its dialog\n   identifier is no longer valid\
    \ and can be reused for another dialog.\n   The identifier is used to reference\
    \ the dialog in subsequent\n   requests, responses, and notifications.  In a <dialogstart>\
    \ request,\n   the dialog identifier can be specified in the prepareddialogid\n\
    \   attribute indicating the prepared dialog to start.  In\n   <dialogterminate>\
    \ and <audit> requests, the dialog identifier is\n   specified in the dialogid\
    \ attribute, indicating which dialog is to be\n   terminated or audited, respectively.\
    \  If these requests specify a\n   dialog identifier already associated with another\
    \ dialog on the MS,\n   the MS sends a response with a 405 status code (see Section\
    \ 4.5) and\n   the same dialogid as in the request.  The MS MUST specify a dialog\n\
    \   identifier in notifications associated with the dialog.  The MS MUST\n   specify\
    \ a dialog identifier in responses unless it is a response to a\n   syntactically\
    \ invalid request.\n   For a given dialog, the <dialogprepare> or <dialogstart>\
    \ request\n   elements specify the dialog content to execute either by including\n\
    \   inline a <dialog> element (the dialog language defined in this\n   package;\
    \ see Section 4.3) or by referencing an external dialog\n   document (a dialog\
    \ language defined outside this package).  When\n   referencing an external dialog\
    \ document, the request element contains\n   a URI reference to the remote document\
    \ (specifying the dialog\n   definition) and, optionally, a type attribute indicating\
    \ the MIME\n   media type associated with the dialog document.  Consequently,\
    \ the\n   dialog language associated with a dialog on the MS is identified\n \
    \  either inline by a <dialog> child element or by a src attribute\n   referencing\
    \ a document containing the dialog language.  The MS MUST\n   support inline the\
    \ IVR dialog language defined in Section 4.3.  The\n   MS MAY support other dialog\
    \ languages by reference.\n"
- title: 4.2.1.  <dialogprepare>
  contents:
  - "4.2.1.  <dialogprepare>\n   The <dialogprepare> request is sent to the MS to\
    \ request preparation\n   of a dialog.  Dialog preparation consists of (a) retrieving\
    \ an\n   external dialog document and/or external resources referenced within\n\
    \   an inline <dialog> element and (b) validating the dialog document\n   syntactically\
    \ and semantically.\n   A prepared dialog is executed when the MS receives a <dialogstart>\n\
    \   request referencing the prepared dialog identifier (see\n   Section 4.2.2).\n\
    \   The <dialogprepare> element has the following attributes:\n   src:  specifies\
    \ the location of an external dialog document to\n      prepare.  A valid value\
    \ is a URI (see Section 4.6.9).  The MS MUST\n      support both HTTP [RFC2616]\
    \ and HTTPS [RFC2818] schemes and the MS\n      MAY support other schemes.  If\
    \ the URI scheme is unsupported, the\n      MS sends a <response> with a 420 status\
    \ code (Section 4.5).  If\n      the document cannot be retrieved within the timeout\
    \ interval, the\n      MS sends a <response> with a 409 status code.  If the document\n\
    \      contains a type of dialog language that the MS does not support,\n    \
    \  the MS sends a <response> with a 421 status code.  The attribute\n      is\
    \ optional.  There is no default value.\n   type:  specifies the type of the external\
    \ dialog document indicated\n      in the 'src' attribute.  A valid value is a\
    \ MIME media type (see\n      Section 4.6.10).  If the URI scheme used in the\
    \ src attribute\n      defines a mechanism for establishing the authoritative\
    \ MIME media\n      type of the media resource, the value returned by that mechanism\n\
    \      takes precedence over this attribute.  The attribute is optional.\n   \
    \   There is no default value.\n   maxage:  Used to set the max-age value of the\
    \ 'Cache-Control' header\n      in conjunction with an external dialog document\
    \ fetched using\n      HTTP, as per [RFC2616].  A valid value is a non-negative\
    \ integer\n      (see Section 4.6.4).  The attribute is optional.  There is no\n\
    \      default value.\n   maxstale:  Used to set the max-stale value of the 'Cache-Control'\n\
    \      header in conjunction with an external dialog document fetched\n      using\
    \ HTTP, as per [RFC2616].  A valid value is a non-negative\n      integer (see\
    \ Section 4.6.4).  The attribute is optional.  There is\n      no default value.\n\
    \   fetchtimeout:  the maximum timeout interval to wait when fetching an\n   \
    \   external dialog document.  A valid value is a Time Designation\n      (see\
    \ Section 4.6.7).  The attribute is optional.  The default\n      value is 30s.\n\
    \   dialogid:  string indicating a unique name for the dialog.  If a\n      dialog\
    \ with the same name already exists on the MS, the MS sends a\n      <response>\
    \ with a 405 status code (Section 4.5).  If this\n      attribute is not specified,\
    \ the MS MUST create a unique name for\n      the dialog (see Section 4.2 for\
    \ dialog identifier assignment).\n      The attribute is optional.  There is no\
    \ default value.\n   The <dialogprepare> element has the following sequence of\
    \ child\n   elements:\n   <dialog>  an IVR dialog (Section 4.3) to prepare.  The\
    \ element is\n      optional.\n   <params>:  specifies input parameters (Section\
    \ 4.2.6) for dialog\n      languages defined outside this specification.  The\
    \ element is\n      optional.  If a parameter is not supported by the MS for the\n\
    \      external dialog language, the MS sends a <response> with a 427\n      status\
    \ code (Section 4.5).\n   The dialog to prepare can be specified either inline\
    \ with a <dialog>\n   child element or externally (for dialog languages defined\
    \ outside\n   this specification) using the src attribute.  It is a syntax error\
    \ if\n   both an inline <dialog> element and a src attribute are specified and\n\
    \   the MS sends a <response> with a 400 status code (see Section 4.5).\n   The\
    \ type, maxage, maxstale, and fetchtimeout attributes are only\n   relevant when\
    \ a dialog is specified as an external document.\n   For example, a <dialogprepare>\
    \ request to prepare an inline IVR\n   dialog with a single prompt:\n   <mscivr\
    \ version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n    <dialogprepare>\n\
    \     <dialog>\n      <prompt>\n       <media loc=\"http://www.example.com/welcome.wav\"\
    />\n      </prompt>\n     </dialog>\n    </dialogprepare>\n   </mscivr>\n   In\
    \ this example, a request with a specified dialogid to prepare a\n   VoiceXML\
    \ dialog document located externally:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <dialogprepare dialogid=\"d2\" type=\"application/voicexml+xml\"\n    \
    \               src=\"http://www.example.com/mydialog.vxml\"\n               \
    \    fetchtimeout=\"15s\"/>\n   </mscivr>\n   Since MS support for dialog languages\
    \ other than the IVR dialog\n   language defined in this package is optional,\
    \ if the MS does not\n   support the dialog language, it would send a response\
    \ with the status\n   code 421 (Section 4.5).  Further information on using VoiceXML\
    \ can be\n   found in Section 9.\n"
- title: 4.2.2.  <dialogstart>
  contents:
  - "4.2.2.  <dialogstart>\n   The <dialogstart> element is sent to the MS to start\
    \ a dialog.  If\n   the dialog has not been prepared, the dialog is prepared (retrieving\n\
    \   external document and/or external resources referenced within\n   <dialog>\
    \ element and the dialog document validated syntactically and\n   semantically).\
    \  Media processors (e.g., DTMF and prompt queue) are\n   activated and associated\
    \ with the specified connection or conference.\n   The <dialogstart> element has\
    \ the following attributes:\n   src:  specifies the location of an external dialog\
    \ document to start.\n      A valid value is a URI (see Section 4.6.9).  The MS\
    \ MUST support\n      both HTTP [RFC2616] and HTTPS [RFC2818] schemes and the\
    \ MS MAY\n      support other schemes.  If the URI scheme is unsupported, the\
    \ MS\n      sends a <response> with a 420 status code (Section 4.5).  If the\n\
    \      document cannot be retrieved with the timeout interval, the MS\n      sends\
    \ a <response> with a 409 status code.  If the document\n      contains a type\
    \ of dialog language that the MS does not support,\n      the MS sends a <response>\
    \ with a 421 status code.  The attribute\n      is optional.  There is no default\
    \ value.\n   type:  specifies the type of the external dialog document indicated\n\
    \      in the 'src' attribute.  A valid value is a MIME media type (see\n    \
    \  Section 4.6.10).  If the URI scheme used in the src attribute\n      defines\
    \ a mechanism for establishing the authoritative MIME media\n      type of the\
    \ media resource, the value returned by that mechanism\n      takes precedence\
    \ over this attribute.  The attribute is optional.\n      There is no default\
    \ value.\n   maxage:  Used to set the max-age value of the 'Cache-Control' header\n\
    \      in conjunction with an external dialog document fetched using\n      HTTP,\
    \ as per [RFC2616].  A valid value is a non-negative integer\n      (see Section\
    \ 4.6.4).  The attribute is optional.  There is no\n      default value.\n   maxstale:\
    \  Used to set the max-stale value of the 'Cache-Control'\n      header in conjunction\
    \ with an external dialog document fetched\n      using HTTP, as per [RFC2616].\
    \  A valid value is a non-negative\n      integer (see Section 4.6.4).  The attribute\
    \ is optional.  There is\n      no default value.\n   fetchtimeout:  the maximum\
    \ timeout interval to wait when fetching an\n      external dialog document. \
    \ A valid value is a Time Designation\n      (see Section 4.6.7).  The attribute\
    \ is optional.  The default\n      value is 30s.\n   dialogid:  string indicating\
    \ a unique name for the dialog.  If a\n      dialog with the same name already\
    \ exists on the MS, the MS sends a\n      <response> with a 405 status code (Section\
    \ 4.5).  If neither the\n      dialogid attribute nor the prepareddialogid attribute\
    \ is\n      specified, the MS MUST create a unique name for the dialog (see\n\
    \      Section 4.2 for dialog identifier assignment).  The attribute is\n    \
    \  optional.  There is no default value.\n   prepareddialogid:  string identifying\
    \ a dialog previously prepared\n      using a dialogprepare (Section 4.2.1) request.\
    \  If neither the\n      dialogid attribute nor the prepareddialogid attribute\
    \ is\n      specified, the MS MUST create a unique name for the dialog (see\n\
    \      Section 4.2 for dialog identifier assignment).  The attribute is\n    \
    \  optional.  There is no default value.\n   connectionid:  string identifying\
    \ the SIP dialog connection on which\n      this dialog is to be started (see\
    \ Appendix A.1 of [RFC6230]).  The\n      attribute is optional.  There is no\
    \ default value.\n   conferenceid:  string identifying the conference on which\
    \ this dialog\n      is to be started (see Appendix A.1 of [RFC6230]).  The attribute\n\
    \      is optional.  There is no default value.\n   Exactly one of the connectionid\
    \ or conferenceid attributes MUST be\n   specified.  If both the connectionid\
    \ and conferenceid attributes are\n   specified or neither is specified, it is\
    \ a syntax error and the MS\n   sends a <response> with a 400 status code (Section\
    \ 4.5).\n   It is an error if the connection or conference referenced by a\n \
    \  specific connectionid or conferenceid attribute is not available on\n   the\
    \ MS at the time the <dialogstart> request is executed.  If an\n   invalid connectionid\
    \ is specified, the MS sends a <response> with a\n   407 status code (Section\
    \ 4.5).  If an invalid conferenceid is\n   specified, the MS sends a <response>\
    \ with a 408 status code.\n   The <dialogstart> element has the following sequence\
    \ of child\n   elements:\n   <dialog>:  specifies an IVR dialog (Section 4.3)\
    \ to execute.  The\n      element is optional.\n   <subscribe>:  specifies subscriptions\
    \ to dialog events\n      (Section 4.2.2.1).  The element is optional.\n   <params>:\
    \  specifies input parameters (Section 4.2.6) for dialog\n      languages defined\
    \ outside this specification.  The element is\n      optional.  If a parameter\
    \ is not supported by the MS for the\n      external dialog language, the MS sends\
    \ a <response> with a 427\n      status code (Section 4.5).\n   <stream>:  determines\
    \ the media stream(s) associated with the\n      connection or conference on which\
    \ the dialog is executed\n      (Section 4.2.2.2).  The <stream> element is optional.\
    \  Multiple\n      <stream> elements can be specified.\n   The dialog to start\
    \ can be specified either (a) inline with a\n   <dialog> child element, (b) externally\
    \ using the src attribute (for\n   dialog languages defined outside this specification),\
    \ or (c) by\n   referencing a previously prepared dialog using the prepareddialogid\n\
    \   attribute.  If exactly one of the src attribute, the\n   prepareddialogid,\
    \ or a <dialog> child element is not specified, it is\n   a syntax error and the\
    \ MS sends a <response> with a 400 status code\n   (Section 4.5).  If the prepareddialogid\
    \ and dialogid attributes are\n   specified, it is also a syntax error and the\
    \ MS sends a <response>\n   with a 400 status code.  The type, maxage, maxstale,\
    \ and fetchtimeout\n   attributes are only relevant when a dialog is specified\
    \ as an\n   external document.\n   The <stream> element provides explicit control\
    \ over which media\n   streams on the connection or conference are used during\
    \ dialog\n   execution.  For example, if a connection supports both audio and\n\
    \   video streams, a <stream> element could be used to indicate that only\n  \
    \ the audio stream is used in receive mode.  In cases where there are\n   multiple\
    \ media streams of the same type for a dialog, the AS MUST use\n   <stream> elements\
    \ to explicitly specify the configuration.  If no\n   <stream> elements are specified,\
    \ then the default media configuration\n   is that defined for the connection\
    \ or conference.\n   If a <stream> element is in conflict (a) with another <stream>\n\
    \   element, (b) with specified connection or conference media\n   capabilities,\
    \ or (c) with a Session Description Protocol (SDP) label\n   value as part of\
    \ the connectionid (see Appendix A.1 of [RFC6230]),\n   then the MS sends a <response>\
    \ with a 411 status code (Section 4.5).\n   If the media stream configuration\
    \ is not supported by the MS, then\n   the MS sends a <response> with a 428 status\
    \ code (Section 4.5).\n   The MS MAY support multiple, simultaneous dialogs being\
    \ started on\n   the same connection or conference.  For example, the same connection\n\
    \   can receive different media streams (e.g., audio and video) from\n   different\
    \ dialogs, or receive (and implicitly mix where appropriate)\n   the same type\
    \ of media streams from different dialogs.  If the MS\n   does not support starting\
    \ another dialog on the same connection or\n   conference, it sends a <response>\
    \ with a 432 status code\n   (Section 4.5) when it receives the second (or subsequent)\
    \ dialog\n   request.\n   For example, a request to start an ivr dialog on a connection\n\
    \   subscribing to DTMF notifications:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <dialogstart connectionid=\"connection1\">\n     <dialog>\n      <prompt>\n\
    \       <media loc=\"http://www.example.com/getpin.wav\"/>\n      </prompt>\n\
    \      <collect maxdigits=\"2\"/>\n     </dialog>\n    <subscribe>\n     <dtmfsub\
    \ matchmode=\"all\"/>\n    </subscribe>\n    </dialogstart>\n   </mscivr>\n  \
    \ In this example, the dialog is started on a conference where the\n   conference\
    \ only receives an audio media stream from the dialog:\n   <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n    <dialogstart conferenceid=\"\
    conference1\">\n     <dialog>\n      <record maxtime=\"384000s\"/>\n     </dialog>\n\
    \     <stream media=\"audio\" direction=\"recvonly\"/>\n    </dialogstart>\n \
    \  </mscivr>\n"
- title: 4.2.2.1.  <subscribe>
  contents:
  - "4.2.2.1.  <subscribe>\n   The <subscribe> element allows the AS to subscribe\
    \ to, and be\n   notified of, specific events that occur during execution of the\n\
    \   dialog.  Notifications of dialog events are delivered using the\n   <event>\
    \ element (see Section 4.2.5).\n   The <subscribe> element has no attributes.\n\
    \   The <subscribe> element has the following sequence of child elements\n   (0\
    \ or more occurrences):\n   <dtmfsub>:  Subscription to DTMF input during the\
    \ dialog\n      (Section 4.2.2.1.1).  The element is optional.\n   If a request\
    \ has a <subscribe> with no child elements, the MS treats\n   the request as if\
    \ no <subscribe> element were specified.\n   The MS MUST support <dtmfsub> subscription\
    \ for the IVR dialog\n   language defined in this specification (Section 4.3).\
    \  It MAY support\n   other dialog subscriptions (specified using attributes and\
    \ child\n   elements from a foreign namespace).  If the MS does not support a\n\
    \   subscription specified in a foreign namespace, the MS sends a\n   response\
    \ with a 431 status code (see Section 4.5).\n"
- title: 4.2.2.1.1.  <dtmfsub>
  contents:
  - "4.2.2.1.1.  <dtmfsub>\n   The <dtmfsub> element has the following attributes:\n\
    \   matchmode:  controls which DTMF input is subscribed to.  Valid values\n  \
    \    are \"all\" - notify all DTMF key presses received during the\n      dialog;\
    \ \"collect\" - notify only DTMF input matched by the collect\n      operation\
    \ (Section 4.3.1.3); and \"control\" - notify only DTMF\n      input matched by\
    \ the runtime control operation (Section 4.3.1.2).\n      The attribute is optional.\
    \  The default value is \"all\".\n   The <dtmfsub> element has no child elements.\n\
    \   DTMF notifications are delivered in the <dtmfnotify> element\n   (Section\
    \ 4.2.5.2).\n   For example, the AS wishes to subscribe to DTMF key press matching\
    \ a\n   runtime control:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <dialogstart dialogid=\"d3\" connectionid=\"connection1\">\n     <dialog>\n\
    \      <prompt>\n       <media loc=\"http://www.example.com/getpin.wav\"/>\n \
    \     </prompt>\n      <control ffkey=\"2\" rwkey=\"3\"/>\n     </dialog>\n  \
    \  <subscribe>\n     <dtmfsub matchmode=\"control\"/>\n    </subscribe>\n    </dialogstart>\n\
    \   </mscivr>\n   Each time a '2' or '3' DTMF input is received, the MS sends\
    \ a\n   notification event:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <event dialogid=\"d3\">\n      <dtmfnotify matchmode=\"collect\" dtmf=\"\
    2\"\n          timestamp=\"2008-05-12T12:13:14Z\"/>\n    </event>\n   </mscivr>\n"
- title: 4.2.2.2.  <stream>
  contents:
  - "4.2.2.2.  <stream>\n   The <stream> element has the following attributes:\n \
    \  media:  a string indicating the type of media associated with the\n      stream.\
    \  A valid value is a MIME type-name as defined in Section\n      4.2 of [RFC4288].\
    \  The following values MUST be used for common\n      types of media: \"audio\"\
    \ for audio media, and \"video\" for video\n      media.  See [IANA] for registered\
    \ MIME type names.  The attribute\n      is mandatory.\n   label:  a string indicating\
    \ the SDP label associated with a media\n      stream [RFC4574].  The attribute\
    \ is optional.\n   direction:  a string indicating the direction of the media\
    \ flow\n      relative to the endpoint conference or connection.  Defined values\n\
    \      are \"sendrecv\" (the endpoint can send media to, and receive media\n \
    \     from, the dialog), \"sendonly\" (the endpoint can only send media to\n \
    \     the dialog), \"recvonly\" (the endpoint can only receive media from\n  \
    \    the dialog), and \"inactive\" (stream is not to be used).  The\n      default\
    \ value is \"sendrecv\".  The attribute is optional.\n   The <stream> element\
    \ has the following sequence of child elements:\n   <region>:  an element to specify\
    \ the area within a mixer video layout\n      where a media stream is displayed\
    \ (Section 4.2.2.2.1).  The\n      element is optional.\n   <priority>:  an element\
    \ to configure priority associated with the\n      stream in the conference mix\
    \ (Section 4.2.2.2.2).  The element is\n      optional.\n   If conferenceid is\
    \ not specified or if the \"media\" attribute does not\n   have the value of \"\
    video\", then the MS ignores the <region> and\n   <priority> elements.\n   For\
    \ example, assume a User Agent connection with multiple audio and\n   video streams\
    \ associated with the user and a separate web camera.  In\n   this case, the dialog\
    \ could be started to record only the audio and\n   video streams associated with\
    \ the user:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <dialogstart connectionid=\"connection1\">\n     <dialog>\n      <record\
    \ maxtime=\"384000s\"/>\n     </dialog>\n     <stream media=\"audio\" label=\"\
    camaudio\" direction=\"inactive\"/>\n     <stream media=\"video\" label=\"camvideo\"\
    \ direction=\"inactive\"/>\n     <stream media=\"audio\" label=\"useraudio\" direction=\"\
    sendonly\"/>\n     <stream media=\"video\" label=\"uservideo\" direction=\"sendonly\"\
    />\n    </dialogstart>\n   </mscivr>\n   Using the <region> element, the dialog\
    \ can be started on a conference\n   mixer so that the video output from the dialog\
    \ is directed to a\n   specific area within a video layout.  For example:\n  \
    \ <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n    <dialogstart\
    \ conferenceid=\"conference1\">\n     <dialog>\n      <prompt>\n        <media\
    \ loc=\"http://www.example.com/presentation.3gp\"/>\n      </prompt>\n     </dialog>\n\
    \     <stream media=\"video\" direction=\"recvonly\">\n       <region>1</region>\n\
    \     </stream>\n    </dialogstart>\n   </mscivr>\n"
- title: 4.2.2.2.1.  <region>
  contents:
  - "4.2.2.2.1.  <region>\n   The <region> element is used to specify a named area\
    \ within a\n   presentation layout where a video media stream is displayed.  The\
    \ MS\n   could, for example, play video media into an area of a video layout\n\
    \   where the layout and its named regions are specified using the Mixer\n   Control\
    \ Package [MIXER-CP].\n   The <region> element has no attributes and its content\
    \ model\n   specifies the name of the region.\n   If the region name is invalid,\
    \ then the MS reports a 416 status code\n   (Section 4.5) in the response to the\
    \ request element containing the\n   <region> element.\n"
- title: 4.2.2.2.2.  <priority>
  contents:
  - "4.2.2.2.2.  <priority>\n   The <priority> element is used to explicitly specify\
    \ the priority of\n   the dialog for presentation in a conference mix.\n   The\
    \ <priority> element has no attributes and its content model\n   specifies a positive\
    \ integer (see Section 4.6.5).  The lower the\n   value, the higher the priority.\n"
- title: 4.2.3.  <dialogterminate>
  contents:
  - "4.2.3.  <dialogterminate>\n   A dialog can be terminated by sending a <dialogterminate>\
    \ request\n   element to the MS.\n   The <dialogterminate> element has the following\
    \ attributes:\n   dialogid:  string identifying the dialog to terminate.  If the\n\
    \      specified dialog identifier is invalid, the MS sends a response\n     \
    \ with a 405 status code (Section 4.5).  The attribute is mandatory.\n   immediate:\
    \  indicates whether or not a dialog in the STARTED state is\n      to be terminated\
    \ immediately (in other states, termination is\n      always immediate).  A valid\
    \ value is a boolean (see\n      Section 4.6.1).  A value of true indicates that\
    \ the dialog is\n      terminated immediately and the MS MUST send a dialogexit\n\
    \      notification (Section 4.2.5.1) without report information.  A\n      value\
    \ of false indicates that the dialog terminates after the\n      current iteration\
    \ and the MS MUST send a dialogexit notification\n      with report information.\
    \  The attribute is optional.  The default\n      value is false.\n   The MS MUST\
    \ reply to the <dialogterminate> request with a <response>\n   element (Section\
    \ 4.2.4), reporting whether or not the dialog was\n   terminated successfully.\n\
    \   For example, immediately terminating a STARTED dialog with dialogid\n   \"\
    d4\":\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n\
    \    <dialogterminate dialogid=\"d4\" immediate=\"true\"/>\n   </mscivr>\n   If\
    \ the dialog is terminated successfully, then the response to the\n   dialogterminate\
    \ request would be:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <response status=\"200\" dialogid=\"d4\"/>\n   </mscivr>\n"
- title: 4.2.4.  <response>
  contents:
  - "4.2.4.  <response>\n   Responses to dialog management requests are specified\
    \ with a\n   <response> element.\n   The <response> element has following attributes:\n\
    \   status:  numeric code indicating the response status.  Valid values\n    \
    \  are defined in Section 4.5.  The attribute is mandatory.\n   reason:  string\
    \ specifying a reason for the response status.  The\n      attribute is optional.\
    \  There is no default value.\n   desclang:  specifies the language used in the\
    \ value of the reason\n      attribute.  A valid value is a language identifier\n\
    \      (Section 4.6.11).  The attribute is optional.  If not specified,\n    \
    \  the value of the desclang attribute on <mscivr> (Section 4.1)\n      applies.\n\
    \   dialogid:  string identifying the dialog.  If the request specifies a\n  \
    \    dialogid, then that value is used.  Otherwise, with\n      <dialogprepare>\
    \ and <dialogstart> requests, the dialogid generated\n      by the MS is used.\
    \  If there is no available dialogid because the\n      request is syntactically\
    \ invalid (e.g., a <dialogterminate>\n      request with no dialogid attribute\
    \ specified), then the value is\n      the empty string.  The attribute is mandatory.\n\
    \   connectionid:  string identifying the SIP dialog connection\n      associated\
    \ with the dialog (see Appendix A.1 of [RFC6230]).  The\n      attribute is optional.\
    \  There is no default value.\n   conferenceid:  string identifying the conference\
    \ associated with the\n      dialog (see Appendix A.1 of [RFC6230]).  The attribute\
    \ is\n      optional.  There is no default value.\n   For example, a response\
    \ when a dialog was prepared successfully:\n   <mscivr version=\"1.0\" xmlns=\"\
    urn:ietf:params:xml:ns:msc-ivr\">\n    <response status=\"200\" dialogid=\"d5\"\
    />\n   </mscivr>\n   The response if dialog preparation failed due to an unsupported\n\
    \   dialog language:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <response status=\"421\" dialogid=\"d5\"\n       reason=\"Unsupported dialog\
    \ language: application/voicexml+xml\"/>\n   </mscivr>\n   In this example, a\
    \ <dialogterminate> request does not specify a\n   dialogid:\n   <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n    <dialogterminate/>\n   </mscivr>\n\
    \   The response status indicates a 400 (Syntax error) status code and\n   the\
    \ dialogid attribute has an empty string value:\n   <mscivr version=\"1.0\" xmlns=\"\
    urn:ietf:params:xml:ns:msc-ivr\">\n    <response status=\"400\" dialogid=\" \"\
    \n       reason=\"Attribute required: dialogid\"/>\n   </mscivr>\n"
- title: 4.2.5.  <event>
  contents:
  - "4.2.5.  <event>\n   When a dialog generates a notification event, the MS sends\
    \ the event\n   using an <event> element.\n   The <event> element has the following\
    \ attributes:\n   dialogid:  string identifying the dialog that generated the\
    \ event.\n      The attribute is mandatory.\n   The <event> element has the following\
    \ child elements, only one of\n   which can occur:\n   <dialogexit>:  indicates\
    \ that the dialog has exited\n      (Section 4.2.5.1).\n   <dtmfnotify>:  indicates\
    \ that a DTMF key press occurred\n      (Section 4.2.5.2).\n"
- title: 4.2.5.1.  <dialogexit>
  contents:
  - "4.2.5.1.  <dialogexit>\n   The <dialogexit> event indicates that a prepared or\
    \ active dialog has\n   exited because it is complete, it has been terminated,\
    \ or an error\n   occurred during execution (for example, a media resource cannot\
    \ be\n   played).  This event MUST be sent by the MS when the dialog exits.\n\
    \   The <dialogexit> element has the following attributes:\n   status:  a status\
    \ code indicating the status of the dialog when it\n      exits.  A valid value\
    \ is a non-negative integer (see\n      Section 4.6.4).  The MS MUST support the\
    \ following values:\n      0  indicates the dialog has been terminated by a <dialogterminate>\n\
    \         request.\n      1  indicates successful completion of the dialog.\n\
    \      2  indicates the dialog terminated because the connection or\n        \
    \ conference associated with the dialog has terminated.\n      3  indicates the\
    \ dialog terminated due to exceeding its maximum\n         duration.\n      4\
    \  indicates the dialog terminated due to an execution error.\n      All other\
    \ valid but undefined values are reserved for future use,\n      where new status\
    \ codes are assigned using the Standards Action\n      process defined in [RFC5226].\
    \  The AS MUST treat any status code\n      it does not recognize as being equivalent\
    \ to 4 (dialog execution\n      error).  The attribute is mandatory.\n   reason:\
    \  a textual description that the MS SHOULD use to provide a\n      reason for\
    \ the status code, e.g., details about an error.  A valid\n      value is a string\
    \ (see Section 4.6.6).  The attribute is optional.\n      There is no default\
    \ value.\n   desclang:  specifies the language used in the value of the reason\n\
    \      attribute.  A valid value is a language identifier\n      (Section 4.6.11).\
    \  The attribute is optional.  If not specified,\n      the value of the desclang\
    \ attribute on <mscivr> (Section 4.1)\n      applies.\n   The <dialogexit> element\
    \ has the following sequence of child\n   elements:\n   <promptinfo>:  report\
    \ information (Section 4.3.2.1) about the prompt\n      execution in an IVR <dialog>.\
    \  The element is optional.\n   <controlinfo>:  reports information (Section 4.3.2.2)\
    \ about the\n      control execution in an IVR <dialog>.  The element is optional.\n\
    \   <collectinfo>:  reports information (Section 4.3.2.3) about the\n      collect\
    \ execution in an IVR <dialog>.  The element is optional.\n   <recordinfo>:  reports\
    \ information (Section 4.3.2.4) about the record\n      execution in an IVR <dialog>.\
    \  The element is optional.\n   <params>:  reports exit parameters (Section 4.2.6)\
    \ for a dialog\n      language defined outside this specification.  The element\
    \ is\n      optional.\n   For example, when an active <dialog> exits normally,\
    \ the MS sends a\n   dialogexit <event> reporting information:\n   <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n    <event dialogid=\"d6\">\n\
    \     <dialogexit status=\"1\">\n      <collectinfo dtmf=\"1234\"  termmode=\"\
    match\"/>\n     </dialogexit>\n    </event>\n   </mscivr>\n"
- title: 4.2.5.2.  <dtmfnotify>
  contents:
  - "4.2.5.2.  <dtmfnotify>\n   The <dtmfnotify> element provides a notification of\
    \ DTMF input\n   received during the active dialog as requested by a <dtmfsub>\n\
    \   subscription (Section 4.2.2.1).\n   The <dtmfnotify> element has the following\
    \ attributes:\n   matchmode:  indicates the matching mode specified in the subscription\n\
    \      request.  Valid values are as follows:\n         \"all\" - all DTMF key\
    \ presses notified individually;\n         \"collect\" - only DTMF input matched\
    \ by the collect operation\n         notified; and\n         \"control\" - only\
    \ DTMF input matched by the control operation\n         notified.\n      The attribute\
    \ is optional.  The default value is \"all\".\n   dtmf:  DTMF key presses received\
    \ according to the matchmode.  A valid\n      value is a DTMF string (see Section\
    \ 4.6.3) with no space between\n      characters.  The attribute is mandatory.\n\
    \   timestamp:  indicates the time (on the MS) at which the last key\n      press\
    \ occurred according to the matchmode.  A valid value is a\n      dateTime expression\
    \ (Section 4.6.12).  The attribute is mandatory.\n   For example, a notification\
    \ of DTMF input matched during the collect\n   operation:\n   <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n    <event dialogid=\"d3\">\n\
    \      <dtmfnotify matchmode=\"collect\" dtmf=\"3123\"\n        timestamp=\"2008-05-12T12:13:14Z\"\
    />\n    </event>\n   </mscivr>\n"
- title: 4.2.6.  <params>
  contents:
  - "4.2.6.  <params>\n   The <params> element is a container for <param> elements\n\
    \   (Section 4.2.6.1).\n   The <params> element has no attributes, but the following\
    \ child\n   elements are defined (0 or more):\n   <param>:  specifies a parameter\
    \ name and value (Section 4.2.6.1).\n   For example, usage with a dialog language\
    \ defined outside this\n   specification to send additional parameters into the\
    \ dialog:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n   <dialogstart type=\"application/x-dialog\"\n                src=\"nfs://nas01/dialog4\"\
    \ connectionid=\"c1\">\n     <params>\n      <param name=\"mode\">playannouncement</param>\n\
    \      <param name=\"prompt1\">nfs://nas01/media1.3gp</param>\n      <param name=\"\
    prompt2\">nfs://nas01/media2.3gp</param>\n     </params>\n    </dialogstart>\n\
    \   </mscivr>\n"
- title: 4.2.6.1.  <param>
  contents:
  - "4.2.6.1.  <param>\n   The <param> element describes a parameter name and value.\n\
    \   The <param> element has the following attributes:\n   name:  a string indicating\
    \ the name of the parameter.  The attribute\n      is mandatory.\n   type:  specifies\
    \ a type indicating how the inline value of the\n      parameter is to be interpreted.\
    \  A valid value is a MIME media\n      type (see Section 4.6.10).  The attribute\
    \ is optional.  The\n      default value is \"text/plain\".\n   encoding:  specifies\
    \ a content-transfer-encoding schema applied to\n      the inline value of the\
    \ parameter on top of the MIME media type\n      specified with the type attribute.\
    \  A valid value is a content-\n      transfer-encoding schema as defined by the\
    \ \"mechanism\" token in\n      Section 6.1 of [RFC2045].  The attribute is optional.\
    \  There is no\n      default value.\n   The <param> element content model is\
    \ the value of the parameter.\n   Note that a value that contains XML characters\
    \ (e.g., \"<\") needs to\n   be escaped following standard XML conventions.\n\
    \   For example, usage with a dialog language defined outside this\n   specification\
    \ to receive parameters from the dialog when it exits:\n   <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n    <event dialogid=\"d6\">\n\
    \     <dialogexit status=\"1\">\n     <params>\n      <param name=\"mode\">recording</param>\n\
    \      <param name=\"recording1\" type=\"audio/x-wav\" encoding=\"base64\">\n\
    \       <![CDATA[\n        R0lGODlhZABqALMAAFrMYr/BvlKOVJKOg2xZUKmenMfDw8tgWJpV\n\
    \       ]]>\n      </param>\n     </params>\n     </dialogexit>\n    </event>\n\
    \   </mscivr>\n"
- title: 4.3.  IVR Dialog Elements
  contents:
  - "4.3.  IVR Dialog Elements\n   This section describes the IVR dialog language\
    \ defined as part of\n   this specification.  The MS MUST support this dialog\
    \ language.\n   The <dialog> element is an execution container for operations\
    \ of\n   playing prompts (Section 4.3.1.1), runtime controls\n   (Section 4.3.1.2),\
    \ collecting DTMF (Section 4.3.1.3), and recording\n   user input (Section 4.3.1.4).\
    \  Results of the dialog execution\n   (Section 4.3.2) are reported in a dialogexit\
    \ notification event.\n   Using these elements, three common dialog models are\
    \ supported:\n   playannouncements:  only a <prompt> element is specified in the\n\
    \      container.  The prompt media resources are played in sequence.\n   promptandcollect:\
    \  a <collect> element is specified and, optionally,\n      a <prompt> element.\
    \  If a <prompt> element is specified and\n      bargein is enabled, playing of\
    \ the prompt is terminated when\n      bargein occurs, and DTMF collection is\
    \ initiated; otherwise, the\n      prompt is played to completion before DTMF\
    \ collection is\n      initiated.  If no prompt element is specified, DTMF collection\
    \ is\n      initiated immediately.\n   promptandrecord:  a <record> element is\
    \ specified and, optionally, a\n      <prompt> element.  If a <prompt> element\
    \ is specified and bargein\n      is enabled, playing of the prompt is terminated\
    \ when bargein\n      occurs, and recording is initiated; otherwise, the prompt\
    \ is\n      played to completion before recording is initiated.  If no prompt\n\
    \      element is specified, recording is initiated immediately.\n   In addition,\
    \ this dialog language supports runtime ('VCR') controls\n   enabling a user to\
    \ control prompt playback using DTMF.\n   Each of the core elements -- <prompt>,\
    \ <control>, <collect>, and\n   <record> -- are specified so that their execution\
    \ and reporting is\n   largely self-contained.  This facilitates their reuse in\
    \ other dialog\n   container elements.  Note that DTMF and bargein behavior affects\n\
    \   multiple elements and is addressed in the relevant element\n   definitions.\n\
    \   Execution results are reported in the <dialogexit> notification event\n  \
    \ with child elements defined in Section 4.3.2.  If the dialog\n   terminated\
    \ normally (i.e., not due to an error or to a\n   <dialogterminate> request),\
    \ then the MS MUST report the results for\n   the operations specified in the\
    \ dialog:\n   <prompt>:  <promptinfo> (see Section 4.3.2.1) with at least the\n\
    \      termmode attribute specified.\n   <control>:  <controlinfo> (see Section\
    \ 4.3.2.2) if any runtime\n      controls are matched.\n   <collect>:  <collectinfo>\
    \ (see Section 4.3.2.3) with the dtmf and\n      termmode attributes specified.\n\
    \   <record>:  <recordinfo> (see Section 4.3.2.4) with at least the\n      termmode\
    \ attribute and one <mediainfo> element specified.\n   The media format requirements\
    \ for IVR dialogs are undefined.  This\n   package is agnostic to the media types\
    \ and codecs for media resources\n   and recording that need to be supported by\
    \ an implementation.  For\n   example, an MS implementation might only support\
    \ audio and in\n   particular the 'audio/basic' codec for media playback and recording.\n\
    \   However, when executing a dialog, if an MS encounters a media type or\n  \
    \ codec that it cannot process, the MS MUST stop further processing and\n   report\
    \ the error using the dialogexit notification.\n"
- title: 4.3.1.  <dialog>
  contents:
  - "4.3.1.  <dialog>\n   An IVR dialog to play prompts to the user, allow runtime\
    \ controls,\n   collect DTMF, or record input.  The dialog is specified using\
    \ a\n   <dialog> element.\n   A <dialog> element has the following attributes:\n\
    \   repeatCount:  number of times the dialog is to be executed.  A valid\n   \
    \   value is a non-negative integer (see Section 4.6.4).  A value of 0\n     \
    \ indicates that the dialog is repeated until halted by other means.\n      The\
    \ attribute is optional.  The default value is 1.\n   repeatDur:  maximum duration\
    \ for dialog execution.  A valid value is\n      a time designation (see Section\
    \ 4.6.7).  If no value is specified,\n      then there is no limit on the duration\
    \ of the dialog.  The\n      attribute is optional.  There is no default value.\n\
    \   repeatUntilComplete:  indicates whether the MS terminates dialog\n      execution\
    \ when an input operation is completed successfully.  A\n      valid value is\
    \ a boolean (see Section 4.6.1).  A value of true\n      indicates that dialog\
    \ execution is terminated when an input\n      operation associated with its child\
    \ elements is completed\n      successfully (see execution model below for precise\
    \ conditions).\n      A value of false indicates that dialog execution is terminated\
    \ by\n      other means.  The attribute is optional.  The default value is\n \
    \     false.\n   The repeatDur attribute takes priority over the repeatCount attribute\n\
    \   in determining maximum duration of the dialog.  See 'repeatCount' and\n  \
    \ 'repeatDur' in the Synchronized Multimedia Integration Language\n   (SMIL) [W3C.REC-SMIL2-20051213]\
    \ for further information.  In the\n   situation where a dialog is repeated more\
    \ than once, only the results\n   of operations in the last dialog iteration are\
    \ reported.\n   The <dialog> element has the following sequence of child elements\
    \ (at\n   least one, any order):\n   <prompt>:  defines media resources to play\
    \ in sequence (see\n      Section 4.3.1.1).  The element is optional.\n   <control>:\
    \  defines how DTMF is used for runtime controls (see\n      Section 4.3.1.2).\
    \  The element is optional.\n   <collect>:  defines how DTMF is collected (see\
    \ Section 4.3.1.3).  The\n      element is optional.\n   <record>:  defines how\
    \ recording takes place (see Section 4.3.1.4).\n      The element is optional.\n\
    \   Although the behavior when both <collect> and <record> elements are\n   specified\
    \ in a request is not defined in this Control Package, the MS\n   MAY support\
    \ this configuration.  If the MS does not support this\n   configuration, the\
    \ MS sends a <response> with a 433 status code.\n   The MS has the following execution\
    \ model for the IVR dialog after\n   initialization (initialization errors are\
    \ reported by the MS in the\n   response):\n   1.  If an error occurs during execution,\
    \ then the MS terminates the\n       dialog and reports the error in the <dialogexit>\
    \ event by setting\n       the status attribute (see Section 4.3.2).  Details\
    \ about the\n       error are specified in the reason attribute.\n   2.  The MS\
    \ initializes a counter to 0.\n   3.  The MS starts a duration timer for the value\
    \ of the repeatDur\n       attribute.  If the timer expires before the dialog\
    \ is complete,\n       then the MS terminates the dialog and sends a dialogexit\
    \ whose\n       status attribute is set to 3 (see Section 4.2.5.1).  The MS MAY\n\
    \       report information in the dialogexit gathered in the last\n       execution\
    \ cycle (if any).\n   4.  The MS initiates a dialog execution cycle.  Each cycle\
    \ executes\n       the operations associated with the child elements of the dialog.\n\
    \       If a <prompt> element is specified, then execute the element's\n     \
    \  prompt playing operation and activate any controls (if the\n       <control>\
    \ element is specified).  If no <prompt> is specified or\n       when a specified\
    \ <prompt> terminates, then start the collect\n       operation or the record\
    \ operation if the <collect> or <record>\n       elements, respectively, are specified.\
    \  If subscriptions are\n       specified for the dialog, then the MS sends a\
    \ notification event\n       when the specified event occurs.  If execution of\
    \ a child element\n       results in an error, the MS terminates dialog execution\
    \ (and\n       stops other child element operations) and the MS sends a\n    \
    \   dialogexit status event, reporting any information gathered.\n   5.  If the\
    \ dialog execution cycle completes successfully, then the MS\n       increments\
    \ the counter by one.  The MS terminates dialog\n       execution if either of\
    \ the following conditions is true:\n       *  the value of the repeatCount attribute\
    \ is greater than zero,\n          and the counter is equal to the value of the\
    \ repeatCount\n          attribute.\n       *  the value of the repeatUntilComplete\
    \ attribute is true and one\n          of the following conditions is true:\n\
    \          +  <collect> reports termination status of 'match' or\n           \
    \  'stopped'.\n          +  <record> reports termination status of 'stopped',\
    \ 'dtmf',\n             'maxtime', or 'finalsilence'.\n       When the MS terminates\
    \ dialog execution, it sends a dialogexit\n       (with a status of 1) reporting\
    \ operation information collected in\n       the last dialog execution cycle only.\
    \  Otherwise, another dialog\n       execution cycle is initiated.\n"
- title: 4.3.1.1.  <prompt>
  contents:
  - "4.3.1.1.  <prompt>\n   The <prompt> element specifies a sequence of media resources\
    \ to play\n   back in document order.\n   A <prompt> element has the following\
    \ attributes:\n   xml:base:  A string declaring the base URI from which relative\
    \ URIs\n      in child elements are resolved prior to fetching.  A valid value\n\
    \      is a URI (see Section 4.6.9).  The attribute is optional.  There\n    \
    \  is no default value.\n   bargein:  Indicates whether user input stops prompt\
    \ playback unless\n      the input is associated with a specified runtime <control>\n\
    \      operation (input matching control operations never interrupts\n      prompt\
    \ playback).  A valid value is a boolean (see Section 4.6.1).\n      A value of\
    \ true indicates that bargein is permitted and prompt\n      playback is stopped.\
    \  A value of false indicates that bargein is\n      not permitted: user input\
    \ does not terminate prompt playback.  The\n      attribute is optional.  The\
    \ default value is true.\n   The <prompt> element has the following child elements\
    \ (at least one,\n   any order, multiple occurrences of elements permitted):\n\
    \   <media>:  specifies a media resource (see Section 4.3.1.5) to play.\n    \
    \  The element is optional.\n   <variable>:  specifies a variable media announcement\
    \ (see\n      Section 4.3.1.1.1) to play.  The element is optional.\n   <dtmf>:\
    \  generates one or more DTMF tones (see Section 4.3.1.1.2) to\n      play.  The\
    \ element is optional.\n   <par>:  specifies media resources to play in parallel\
    \ (see\n      Section 4.3.1.1.3).  The element is optional.\n   If the MS does\
    \ not support the configuration required for prompt\n   playback to the output\
    \ media streams and a more specific error code\n   is not defined for its child\
    \ elements, the MS sends a <response> with\n   a 429 status code (Section 4.5).\
    \  The MS MAY support transcoding\n   between the media resource format and the\
    \ output stream format.\n   The MS has the following execution model for prompt\
    \ playing after\n   initialization:\n   1.  The MS initiates prompt playback playing\
    \ its child elements\n       (<media>, <variable>, <dtmf>, and <par>) one after\
    \ another in\n       document order.\n   2.  If any error (including fetching\
    \ and rendering errors) occurs\n       during prompt execution, then the MS terminates\
    \ playback and\n       reports its error status to the dialog container (see\n\
    \       Section 4.3) with a <promptinfo> (see Section 4.3.2.1) where the\n   \
    \    termmode attribute is set to stopped and any additional\n       information\
    \ is set.\n   3.  If DTMF input is received and the value of the bargein attribute\n\
    \       is true, then the MS terminates prompt playback and reports its\n    \
    \   execution status to the dialog container (see Section 4.3) with a\n      \
    \ <promptinfo> (see Section 4.3.2.1) where the termmode attribute\n       is set\
    \ to bargein and any additional information is set.\n   4.  If prompt playback\
    \ is stopped by the dialog container, then the\n       MS reports its execution\
    \ status to the dialog container (see\n       Section 4.3) with a <promptinfo>\
    \ (see Section 4.3.2.1) where the\n       termmode attribute is set to stopped\
    \ and any additional\n       information is set.\n   5.  If prompt playback completes\
    \ successfully, then the MS reports\n       its execution status to the dialog\
    \ container (see Section 4.3)\n       with a <promptinfo> (see Section 4.3.2.1)\
    \ where the termmode\n       attribute is set to completed and any additional\
    \ information is\n       set.\n"
- title: 4.3.1.1.1.  <variable>
  contents:
  - "4.3.1.1.1.  <variable>\n   The <variable> element specifies variable announcements\
    \ using\n   predefined media resources.  Each variable has at least a type (e.g.,\n\
    \   date) and a value (e.g., 2008-02-25).  The value is rendered\n   according\
    \ to the prompt variable type (e.g., 2008-02-25 is rendered\n   as the date 25th\
    \ February 2008).  The precise mechanism for\n   generating variable announcements\
    \ (including the location of\n   associated media resources) is implementation\
    \ specific.\n   A <variable> element has the following attributes:\n   type: \
    \ specifies the type of prompt variable to render.  This\n      specification\
    \ defines three values -- date (Section 4.3.1.1.1.1),\n      time (Section 4.3.1.1.1.2),\
    \ and digits (Section 4.3.1.1.1.3).  All\n      other valid but undefined values\
    \ are reserved for future use,\n      where new values are assigned as described\
    \ in Section 8.5.  A\n      valid value is a string (see Section 4.6.6).  The\
    \ attribute is\n      mandatory.\n   value:  specifies a string to be rendered\
    \ according to the prompt\n      variable type.  A valid value is a string (see\
    \ Section 4.6.6).\n      The attribute is mandatory.\n   format:  specifies format\
    \ information that the prompt variable type\n      uses to render the value attribute.\
    \  A valid value is a string\n      (see Section 4.6.6).  The attribute is optional.\
    \  There is no\n      default value.\n   gender:  specifies the gender that the\
    \ prompt variable type uses to\n      render the value attribute.  Valid values\
    \ are \"male\" or \"female\".\n      The attribute is optional.  There is no default\
    \ value.\n   xml:lang:  specifies the language that the prompt variable type uses\n\
    \      to render the value attribute.  A valid value is a language\n      identifier\
    \ (see Section 4.6.11).  The attribute is optional.\n      There is no default\
    \ value.\n   The <variable> element has no children.\n   This specification is\
    \ agnostic to the type and codec of media\n   resources into which variables are\
    \ rendered as well as the rendering\n   mechanism itself.  For example, an MS\
    \ implementation supporting audio\n   rendering could map the <variable> into\
    \ one or more audio media\n   resources.\n   This package is agnostic to which\
    \ <variable> types are supported by\n   an implementation.  If a <variable> element\
    \ configuration specified\n   in a request is not supported by the MS, the MS\
    \ sends a <response>\n   with a 425 status code (Section 4.5).\n"
- title: 4.3.1.1.1.1.  Date Type
  contents:
  - "4.3.1.1.1.1.  Date Type\n   The date variable type provides a mechanism for dynamically\
    \ rendering\n   a date prompt.\n   The <variable> type attribute MUST have the\
    \ value \"date\".\n   The <variable> format attribute MUST be one of the following\
    \ values\n   and comply with its rendering of the value attribute:\n   mdy  indicating\
    \ that the <variable> value attribute is to be rendered\n        as sequence composed\
    \ of month, then day, then year.\n   ymd  indicating that the <variable> value\
    \ attribute is to be rendered\n        as sequence composed of year, then month,\
    \ then day.\n   dym  indicating that the <variable> value attribute is to be rendered\n\
    \        as sequence composed of day, then year, then month.\n   dm   indicating\
    \ that the <variable> value attribute is to be rendered\n        as sequence composed\
    \ of day then month.\n   The <variable> value attribute MUST comply with a lexical\n\
    \   representation of date where\n   yyyy '-' mm '-' dd\n   as defined in Section\
    \ 3.2.9 of [XMLSchema:Part2].\n   For example,\n     <variable type=\"date\" format=\"\
    dmy\" value=\"2010-11-25\"\n     xml:lang=\"en\" gender=\"male\"/>\n   describes\
    \ a variable date prompt where the date can be rendered in\n   audio as \"twenty-fifth\
    \ of November two thousand and ten\" using a list\n   of <media> resources:\n\
    \   <media loc=\"nfs://voicebase/en/male/25th.wav\"/>\n   <media loc=\"nfs://voicebase/en/male/of.wav\"\
    />\n   <media loc=\"nfs://voicebase/en/male/november.wav\"/>\n   <media loc=\"\
    nfs://voicebase/en/male/2000.wav\"/>\n   <media loc=\"nfs://voicebase/en/male/and.wav\"\
    />\n   <media loc=\"nfs://voicebase/en/male/10.wav\"/>\n"
- title: 4.3.1.1.1.2.  Time Type
  contents:
  - "4.3.1.1.1.2.  Time Type\n   The time variable type provides a mechanism for dynamically\
    \ rendering\n   a time prompt.\n   The <variable> type attribute MUST have the\
    \ value \"time\".\n   The <variable> format attribute MUST be one of the following\
    \ values\n   and comply with its rendering of the value attribute:\n   t12  indicating\
    \ that the <variable> value attribute is to be rendered\n        as a time in\
    \ traditional 12-hour format using am or pm (for\n        example, \"twenty-five\
    \ minutes past 2 pm\" for \"14:25\").\n   t24  indicating that the <variable>\
    \ value attribute is to be rendered\n        as a time in 24-hour format (for\
    \ example, \"fourteen twenty-five\"\n        for \"14:25\").\n   The <variable>\
    \ value attribute MUST comply with a lexical\n   representation of time where\n\
    \   hh ':' mm ( ':' ss )?\n   as defined in Section 3.2.8 of [XMLSchema:Part2].\n"
- title: 4.3.1.1.1.3.  Digits Type
  contents:
  - "4.3.1.1.1.3.  Digits Type\n   The digits variable type provides a mechanism for\
    \ dynamically\n   rendering a digit sequence.\n   The <variable> type attribute\
    \ MUST have the value \"digits\".\n   The <variable> format attribute MUST be\
    \ one of the following values\n   and comply with its rendering of the value attribute:\n\
    \   gen  indicating that the <variable> value attribute is to be rendered\n  \
    \      as a general digit string (for example, \"one two three\" for\n       \
    \ \"123\").\n   crn  indicating that the <variable> value attribute is to be rendered\n\
    \        as a cardinal number (for example, \"one hundred and twenty-\n      \
    \  three\" for \"123\").\n   ord  indicating that the <variable> value attribute\
    \ is to be rendered\n        as an ordinal number (for example, \"one hundred\
    \ and twenty-\n        third\" for \"123\").\n   The <variable> value attribute\
    \ MUST comply with the lexical\n   representation\n      d+\n   i.e., one or more\
    \ digits.\n"
- title: 4.3.1.1.2.  <dtmf>
  contents:
  - "4.3.1.1.2.  <dtmf>\n   The <dtmf> element specifies a sequence of DTMF tones\
    \ for output.\n   DTMF tones could be generated using <media> resources where\
    \ the\n   output is transported as RTP audio packets.  However, <media>\n   resources\
    \ are not sufficient for cases where DTMF tones are to be\n   transported as DTMF\
    \ RTP [RFC4733] or in event packages.\n   A <dtmf> element has the following attributes:\n\
    \   digits:  specifies the DTMF sequence to output.  A valid value is a\n    \
    \  DTMF string (see Section 4.6.3).  The attribute is mandatory.\n   level:  used\
    \ to define the power level for which the DTMF tones will\n      be generated.\
    \  Values are expressed in dBm0.  A valid value is an\n      integer in the range\
    \ of 0 to -96 (dBm0).  Larger negative values\n      express lower power levels.\
    \  Note that values lower than -55 dBm0\n      will be rejected by most receivers\
    \ (TR-TSY-000181, ITU-T Q.24A).\n      The attribute is optional.  The default\
    \ value is -6 (dBm0).\n   duration:  specifies the duration for which each DTMF\
    \ tone is\n      generated.  A valid value is a time designation (see\n      Section\
    \ 4.6.7).  The MS MAY round the value if it only supports\n      discrete durations.\
    \  The attribute is optional.  The default value\n      is 100 ms.\n   interval:\
    \  specifies the duration of a silence interval following\n      each generated\
    \ DTMF tone.  A valid value is a time designation\n      (see Section 4.6.7).\
    \  The MS MAY round the value if it only\n      supports discrete durations. \
    \ The attribute is optional.  The\n      default value is 100 ms.\n   The <dtmf>\
    \ element has no children.\n   If a <dtmf> element configuration is not supported,\
    \ the MS sends a\n   <response> with a 426 status code (Section 4.5).\n"
- title: 4.3.1.1.3.  <par>
  contents:
  - "4.3.1.1.3.  <par>\n   The <par> element allows media resources to be played in\
    \ parallel.\n   Each of its child elements specifies a media resource (or a sequence\n\
    \   of media resources using the <seq> element).  When playback of the\n   <par>\
    \ element is initiated, the MS begins playback of all its child\n   elements at\
    \ the same time.  This element is modeled after the <par>\n   element in SMIL\
    \ [W3C.REC-SMIL2-20051213].\n   The <par> element has the following attributes:\n\
    \   endsync:  indicates when playback of the element is complete.  Valid\n   \
    \   values are \"first\" (indicates that the element is complete when\n      any\
    \ child element reports that it is complete) and \"last\"\n      (indicates it\
    \ is complete when every child elements are complete).\n      The attribute is\
    \ optional.  The default value is \"last\".\n   If the value is \"first\", then\
    \ playback of other child elements is\n   stopped when one child element reports\
    \ it is complete.\n   The <par> element has the following child elements (at least\
    \ one, any\n   order, multiple occurrences of each element permitted):\n   <seq>:\
    \  specifies a sequence of media resources to play in parallel\n      with other\
    \ <par> child elements (see Section 4.3.1.1.3.1).  The\n      element is optional.\n\
    \   <media>:  specifies a media resource (see Section 4.3.1.5) to play.\n    \
    \  The MS is responsible for assigning the appropriate media\n      stream(s)\
    \ when more than one is available.  The element is\n      optional.\n   <variable>:\
    \  specifies a variable media announcement (see\n      Section 4.3.1.1.1) to play.\
    \  The element is optional.\n   <dtmf>:  generates one or more DTMF tones (see\
    \ Section 4.3.1.1.2) to\n      play.  The element is optional.\n   It is RECOMMENDED\
    \ that a <par> element contains only one <media>\n   element of the same media\
    \ type (i.e., same type-name as defined in\n   Section 4.6.10).  If a <par> element\
    \ configuration is not supported,\n   the MS sends a <response> with a 435 status\
    \ code (Section 4.5).\n   Runtime <control>s (Section 4.3.1.2) apply to each child\
    \ element\n   playing in parallel.  For example, pause and resume controls cause\n\
    \   all child elements to be paused and resumed, respectively.\n   If the <par>\
    \ element is stopped by the prompt container (e.g.,\n   bargein or dialog termination),\
    \ then playback of all child elements\n   is stopped.  The playback duration (Section\
    \ 4.3.2.1) reported for the\n   <par> element is the duration of parallel playback,\
    \ not the\n   cumulative duration of each child element played in parallel.\n\
    \   For example, a request to playback audio and video media in parallel:\n  \
    \ <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n   <dialogstart\
    \ connectionid=\"c1\">\n     <dialog>\n      <prompt>\n       <par>\n        <media\
    \ type=\"audio/x-wav\"\n               loc=\"http://www.example.com/media/comments.wav\"\
    />\n        <media type=\"video/3gpp;codecs='s263'\"\n               loc=\"http://www.example.com/media/camera.3gp\"\
    />\n       </par>\n      </prompt>\n     </dialog>\n    </dialogstart>\n   </mscivr>\n\
    \   When the <prompt> element is executed, it begins playback of its\n   child\
    \ element in document-order sequence.  In this case, there is\n   only one child\
    \ element, a <par> element itself containing audio and\n   video <media> child\
    \ elements.  Consequently, playback of both audio\n   and video media resources\
    \ is initiated at the same time.  Since the\n   endsync attribute is not specified,\
    \ the default value \"last\" applies.\n   The <par> element playback is complete\
    \ when the media resource with\n   the longest duration is complete.\n"
- title: 4.3.1.1.3.1.  <seq>
  contents:
  - "4.3.1.1.3.1.  <seq>\n   The <seq> element specifies media resources to be played\
    \ back in\n   sequence.  This allows a sequence of media resources to be played\
    \ at\n   the same time as other children of a <par> element are played in\n  \
    \ parallel, for example, a sequence of audio resources while a video\n   resource\
    \ is played in parallel.  This element is modeled after the\n   <seq> element\
    \ in SMIL [W3C.REC-SMIL2-20051213].\n   The <seq> element has no attributes.\n\
    \   The <seq> element has the following child elements (at least one, any\n  \
    \ order, multiple occurrences of each element permitted):\n   <media>:  specifies\
    \ a media resource (see Section 4.3.1.5) to play.\n      The element is optional.\n\
    \   <variable>:  specifies a variable media announcement (see\n      Section 4.3.1.1.1)\
    \ to play.  The element is optional.\n   <dtmf>:  generates one or more DTMF tones\
    \ (see Section 4.3.1.1.2) to\n      play.  The element is optional.\n   Playback\
    \ of a <seq> element is complete when all child elements in\n   the sequence are\
    \ complete.  If the <seq> element is stopped by the\n   <par> container, then\
    \ playback of the current child element is\n   stopped (remaining child elements\
    \ in the sequence are not played).\n   For example, a request to play a sequence\
    \ of audio resources in\n   parallel with a video media:\n   <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n   <dialogstart connectionid=\"\
    c1\">\n     <dialog>\n      <prompt>\n       <par endsync=\"first\">\n       \
    \ <seq>\n          <media type=\"audio/x-wav\"\n               loc=\"http://www.example.com/media/date.wav\"\
    />\n          <media type=\"audio/x-wav\"\n               loc=\"http://www.example.com/media/intro.wav\"\
    />\n          <media type=\"audio/x-wav\"\n               loc=\"http://www.example.com/media/main.wav\"\
    />\n          <media type=\"audio/x-wav\"\n               loc=\"http://www.example.com/media/end.wav\"\
    />\n        </seq>\n        <media type=\"video/3gpp;codecs='s263'\"\n       \
    \        loc=\"rtsp://www.example.com/media/camera.3gp\"/>\n       </par>\n  \
    \    </prompt>\n     </dialog>\n    </dialogstart>\n   </mscivr>\n   When the\
    \ <prompt> element is executed, it begins playback of the\n   <par> element containing\
    \ a <seq> element and a video <media> element.\n   The <seq> element itself contains\
    \ a sequence of audio <media>\n   elements.  Consequently, playback of the video\
    \ media resource is\n   initiated at the same time as playback of the sequence\
    \ of the audio\n   media resources is initiated.  Each audio resource is played\
    \ back\n   after the previous one completes.  Since the endsync attribute is set\n\
    \   to \"first\", the <par> element playback is complete when either all\n   the\
    \ audio resources in <seq> have been played to completion or the\n   video <media>\
    \ is complete, whichever occurs first.\n"
- title: 4.3.1.2.  <control>
  contents:
  - "4.3.1.2.  <control>\n   The <control> element defines how DTMF input is mapped\
    \ to runtime\n   controls, including prompt playback controls.\n   DTMF input\
    \ matching these controls MUST NOT cause prompt playback to\n   be interrupted\
    \ (i.e., no prompt bargein), but causes the appropriate\n   operation to be applied,\
    \ for example, speeding up prompt playback.\n   DTMF input matching these controls\
    \ has priority over <collect> input\n   for the duration of prompt playback. \
    \ If an incoming DTMF character\n   matches a specified runtime control, then\
    \ the DTMF character is\n   consumed: it is not added to the digit buffer and\
    \ so is not available\n   to the <collect> operation.  Once prompt playback is\
    \ complete,\n   runtime controls are no longer active.\n   The <control> element\
    \ has the following attributes:\n   gotostartkey:  maps a DTMF key to skip directly\
    \ to the start of the\n      prompt.  A valid value is a DTMF character (see Section\
    \ 4.6.2).\n      The attribute is optional.  There is no default value.\n   gotoendkey:\
    \  maps a DTMF key to skip directly to the end of the\n      prompt.  A valid\
    \ value is a DTMF character (see Section 4.6.2).\n      The attribute is optional.\
    \  There is no default value.\n   skipinterval:  indicates how far an MS skips\
    \ backwards or forwards\n      through prompt playback when the rewind (rwkey)\
    \ of fast forward\n      key (ffkey) is pressed.  A valid value is a Time Designation\
    \ (see\n      Section 4.6.7).  The attribute is optional.  The default value is\n\
    \      6s.\n   ffkey:  maps a DTMF key to a fast forward operation equal to the\n\
    \      value of 'skipinterval'.  A valid value is a DTMF character (see\n    \
    \  Section 4.6.2).  The attribute is optional.  There is no default\n      value.\n\
    \   rwkey:  maps a DTMF key to a rewind operation equal to the value of\n    \
    \  'skipinterval'.  A valid value is a DTMF character (see\n      Section 4.6.2).\
    \  The attribute is optional.  There is no default\n      value.\n   pauseinterval:\
    \  indicates how long an MS pauses prompt playback when\n      the pausekey is\
    \ pressed.  A valid value is a Time Designation (see\n      Section 4.6.7).  The\
    \ attribute is optional.  The default value is\n      10s.\n   pausekey:  maps\
    \ a DTMF key to a pause operation equal to the value of\n      'pauseinterval'.\
    \  A valid value is a DTMF character (see\n      Section 4.6.2).  The attribute\
    \ is optional.  There is no default\n      value.\n   resumekey:  maps a DTMF\
    \ key to a resume operation.  A valid value is\n      a DTMF character (see Section\
    \ 4.6.2).  The attribute is optional.\n      There is no default value.\n   volumeinterval:\
    \  indicates the increase or decrease in playback\n      volume (relative to the\
    \ current volume) when the volupkey or\n      voldnkey is pressed.  A valid value\
    \ is a percentage (see\n      Section 4.6.8).  The attribute is optional.  The\
    \ default value is\n      10%.\n   volupkey:  maps a DTMF key to a volume increase\
    \ operation equal to\n      the value of 'volumeinterval'.  A valid value is a\
    \ DTMF character\n      (see Section 4.6.2).  The attribute is optional.  There\
    \ is no\n      default value.\n   voldnkey:  maps a DTMF key to a volume decrease\
    \ operation equal to\n      the value of 'volumeinterval'.  A valid value is a\
    \ DTMF character\n      (see Section 4.6.2).  The attribute is optional.  There\
    \ is no\n      default value.\n   speedinterval:  indicates the increase or decrease\
    \ in playback speed\n      (relative to the current speed) when the speedupkey\
    \ or speeddnkey\n      is pressed.  A valid value is a percentage (see Section\
    \ 4.6.8).\n      The attribute is optional.  The default value is 10%.\n   speedupkey:\
    \  maps a DTMF key to a speed increase operation equal to\n      the value of\
    \ the speedinterval attribute.  A valid value is a DTMF\n      character (see\
    \ Section 4.6.2).  The attribute is optional.  There\n      is no default value.\n\
    \   speeddnkey:  maps a DTMF key to a speed decrease operation equal to\n    \
    \  the value of the speedinterval attribute.  A valid value is a DTMF\n      character\
    \ (see Section 4.6.2).  The attribute is optional.  There\n      is no default\
    \ value.\n   external:  allows one or more DTMF keys to be declared as external\n\
    \      controls (for example, video camera controls); the MS can send\n      notifications\
    \ when a matching key is activated using <dtmfnotify>\n      (Section 4.2.5.2).\
    \  A valid value is a DTMF string (see\n      Section 4.6.3).  The attribute is\
    \ optional.  There is no default\n      value.\n   If the same DTMF is specified\
    \ in more than one DTMF key control\n   attribute -- except the pausekey and resumekey\
    \ attributes -- the MS\n   sends a <response> with a 413 status code (Section\
    \ 4.5).\n   The MS has the following execution model for runtime control after\n\
    \   initialization:\n   1.  If an error occurs during execution, then the MS terminates\n\
    \       runtime control and the error is reported to the dialog\n       container.\
    \  The MS MAY report controls executed successfully\n       before the error in\
    \ <controlinfo> (see Section 4.3.2.2).\n   2.  Runtime controls are active only\
    \ during prompt playback (if no\n       <prompt> element is specified, then runtime\
    \ controls are\n       ignored).  If DTMF input matches any specified keys (for\
    \ example,\n       the ffkey), then the MS applies the appropriate operation\n\
    \       immediately.  If a seek operation (ffkey, rwkey) attempts to go\n    \
    \   beyond the beginning or end of the prompt queue, then the MS\n       automatically\
    \ truncates it to the prompt queue beginning or end,\n       respectively.  If\
    \ a volume operation (voldnkey, volupkey)\n       attempts to go beyond the minimum\
    \ or maximum volume supported by\n       the platform, then the MS automatically\
    \ limits the operation to\n       minimum or maximum supported volume, respectively.\
    \  If a speed\n       operation (speeddnkey, speedupkey) attempts to go beyond\
    \ the\n       minimum or maximum playback speed supported by the platform, then\n\
    \       the MS automatically limits the operation to minimum or maximum\n    \
    \   supported speed, respectively.  If the pause operation attempts\n       to\
    \ pause output when it is already paused, then the operation is\n       ignored.\
    \  If the resume operation attempts to resume when the\n       prompts are not\
    \ paused, then the operation is ignored.  If a\n       seek, volume, or speed\
    \ operation is applied when output is\n       paused, then the MS also resumes\
    \ output automatically.\n   3.  If DTMF control subscription has been specified\
    \ for the dialog,\n       then each DTMF match of a control operation is reported\
    \ in a\n       <dtmfnotify> notification event (Section 4.2.5.2).\n   4.  When\
    \ the dialog exits, all control matches are reported in a\n       <controlinfo>\
    \ element (Section 4.3.2.2).\n"
- title: 4.3.1.3.  <collect>
  contents:
  - "4.3.1.3.  <collect>\n   The <collect> element defines how DTMF input is collected.\n\
    \   The <collect> element has the following attributes:\n   cleardigitbuffer:\
    \  indicates whether the digit buffer is to be\n      cleared.  A valid value\
    \ is a boolean (see Section 4.6.1).  A value\n      of true indicates that the\
    \ digit buffer is to be cleared.  A value\n      of false indicates that the digit\
    \ buffer is not to be cleared.\n      The attribute is optional.  The default\
    \ value is true.\n   timeout:  indicates the maximum time to wait for user input\
    \ to begin.\n      A valid value is a Time Designation (see Section 4.6.7).  The\n\
    \      attribute is optional.  The default value is 5s.\n   interdigittimeout:\
    \  indicates the maximum time to wait for another\n      DTMF when the collected\
    \ input is incomplete with respect to the\n      grammar.  A valid value is a\
    \ Time Designation (see Section 4.6.7).\n      The attribute is optional.  The\
    \ default value is 2s.\n   termtimeout:  indicates the maximum time to wait for\
    \ the termchar\n      character when the collected input is complete with respect\
    \ to the\n      grammar.  A valid value is a Time Designation (see Section 4.6.7).\n\
    \      The attribute is optional.  The default value is 0s (no delay).\n   escapekey:\
    \  specifies a DTMF key that indicates collected grammar\n      matches are discarded\
    \ and the DTMF collection is to be re-\n      initiated.  A valid value is a DTMF\
    \ character (see Section 4.6.2).\n      The attribute is optional.  There is no\
    \ default value.\n   termchar:  specifies a DTMF character for terminating DTMF\
    \ input\n      collection using the internal grammar.  It is ignored when a\n\
    \      custom grammar is specified.  A valid value is a DTMF character\n     \
    \ (see Section 4.6.2).  To disable termination by a conventional\n      DTMF character,\
    \ set the parameter to an unconventional character\n      like 'A'.  The attribute\
    \ is optional.  The default value is '#'.\n   maxdigits:  The maximum number of\
    \ digits to collect using an internal\n      digits (0-9 only) grammar.  It is\
    \ ignored when a custom grammar is\n      specified.  A valid value is a positive\
    \ integer (see\n      Section 4.6.5).  The attribute is optional.  The default\
    \ value is\n      5.\n   The following matching priority is defined for incoming\
    \ DTMF:\n   termchar attribute, escapekey attribute, and then as part of a\n \
    \  grammar.  For example, if \"1\" is defined as the escapekey attribute\n   and\
    \ as part of a grammar, then its interpretation as an escapekey\n   takes priority.\n\
    \   The <collect> element has the following child element:\n   <grammar>:  indicates\
    \ a custom grammar format (see\n      Section 4.3.1.3.1).  The element is optional.\n\
    \   The custom grammar takes priority over the internal grammar.  If a\n   <grammar>\
    \ element is specified, the MS MUST use it for DTMF\n   collection.\n   The MS\
    \ has the following execution model for DTMF collection after\n   initialization:\n\
    \   1.  The DTMF collection buffer MUST NOT receive DTMF input matching\n    \
    \   <control> operations (see Section 4.3.1.2).\n   2.  If an error occurs during\
    \ execution, then the MS terminates\n       collection and reports the error to\
    \ the dialog container (see\n       Section 4.3).  The MS MAY report DTMF collected\
    \ before the error\n       in <collectinfo> (see Section 4.3.2.3).\n   3.  The\
    \ MS clears the digit buffer if the value of the\n       cleardigitbuffer attribute\
    \ is true.\n   4.  The MS activates an initial timer with the duration of the\
    \ value\n       of the timeout attribute.  If the initial timer expires before\n\
    \       any DTMF input is received, then collection execution terminates,\n  \
    \     the <collectinfo> (see Section 4.3.2.3) has the termmode\n       attribute\
    \ set to noinput and the execution status is reported to\n       the dialog container.\n\
    \   5.  When the first DTMF collect input is received, the initial timer\n   \
    \    is canceled and DTMF collection begins.  Each DTMF input is\n       collected\
    \ unless it matches the value of the escapekey attribute\n       or the termchar\
    \ attribute when the internal grammar is used.\n       Collected input is matched\
    \ against the grammar to determine if it\n       is valid and, if valid, whether\
    \ collection is complete.  Valid\n       DTMF patterns are either a simple digit\
    \ string where the maximum\n       length is determined by the maxdigits attribute\
    \ and that can be\n       optionally terminated by the character in the termchar\
    \ attribute,\n       or a custom DTMF grammar specified with the <grammar> element.\n\
    \   6.  After escapekey input, or a valid input that does not complete\n     \
    \  the grammar, the MS activates a timer for the value of the\n       interdigittimeout\
    \ attribute or the termtimeout attribute.  The MS\n       only uses the termtimeout\
    \ value when the grammar does not allow\n       any additional input; otherwise,\
    \ the MS uses the\n       interdigittimeout.\n   7.  If DTMF collect input matches\
    \ the value of the escapekey\n       attribute, then the MS re-initializes DTMF\
    \ collection: i.e., the\n       MS discards collected DTMFs already matched against\
    \ the grammar,\n       and the MS attempts to match incoming DTMF (including any\
    \ pending\n       in the digit buffer) as described in Step 5 above.\n   8.  If\
    \ the collect input is not valid with respect to the grammar or\n       an interdigittimeout\
    \ timer expires, the MS terminates collection\n       execution and reports execution\
    \ status to the dialog container\n       with a <collectinfo> (see Section 4.3.2.3)\
    \ where the termmode\n       attribute is set to nomatch.\n   9.  If the collect\
    \ input completes the grammar or if a termtimeout\n       timer expires, then\
    \ the MS terminates collection execution and\n       reports execution status\
    \ to the dialog container with\n       <collectinfo> (see Section 4.3.2.3) where\
    \ the termmode attribute\n       is set to match.\n"
- title: 4.3.1.3.1.  <grammar>
  contents:
  - "4.3.1.3.1.  <grammar>\n   The <grammar> element allows a custom grammar, inline\
    \ or external, to\n   be specified.  Custom grammars permit the full range of\
    \ DTMF\n   characters including '*' and '#' to be specified for DTMF pattern\n\
    \   matching.\n   The <grammar> element has the following attributes:\n   src:\
    \  specifies the location of an external grammar document.  A\n      valid value\
    \ is a URI (see Section 4.6.9).  The MS MUST support\n      both HTTP [RFC2616]\
    \ and HTTPS [RFC2818] schemes and the MS MAY\n      support other schemes.  If\
    \ the URI scheme is unsupported, the MS\n      sends a <response> with a 420 status\
    \ code (Section 4.5).  If the\n      resource cannot be retrieved within the timeout\
    \ interval, the MS\n      sends a <response> with a 409 status code.  If the grammar\
    \ format\n      is not supported, the MS sends a <response> with a 424 status\n\
    \      code.  The attribute is optional.  There is no default value.\n   type:\
    \  identifies the preferred type of the grammar document\n      identified by\
    \ the src attribute.  A valid value is a MIME media\n      type (see Section 4.6.10).\
    \  If the URI scheme used in the src\n      attribute defines a mechanism for\
    \ establishing the authoritative\n      MIME media type of the media resource,\
    \ the value returned by that\n      mechanism takes precedence over this attribute.\
    \  The attribute is\n      optional.  There is no default value.\n   fetchtimeout:\
    \  the maximum interval to wait when fetching a grammar\n      resource.  A valid\
    \ value is a Time Designation (see\n      Section 4.6.7).  The attribute is optional.\
    \  The default value is\n      30s.\n   The <grammar> element allows inline grammars\
    \ to be specified.  XML\n   grammar formats MUST use a namespace other than the\
    \ one used in this\n   specification.  Non-XML grammar formats MAY use a CDATA\
    \ section.\n   The MS MUST support the Speech Recognition Grammar Specification\n\
    \   [SRGS] XML grammar format (\"application/srgs+xml\") and MS MAY support\n\
    \   the Key Press Markup Language (KPML) [RFC4730] or other grammar\n   formats.\
    \  If the grammar format is not supported by the MS, then the\n   MS sends a <response>\
    \ with a 424 status code (Section 4.5).\n   For example, the following fragment\
    \ shows DTMF collection with an\n   inline SRGS grammar:\n   <collect cleardigitbuffer=\"\
    false\" timeout=\"20s\"\n           interdigittimeout=\"1s\">\n           <grammar>\n\
    \                   <grammar xmlns=\"http://www.w3.org/2001/06/grammar\"\n   \
    \                                version=\"1.0\" mode=\"dtmf\">\n            \
    \         <rule id=\"digit\">\n                      <one-of>\n              \
    \             <item>0</item>\n                           <item>1</item>\n    \
    \                       <item>2</item>\n                           <item>3</item>\n\
    \                           <item>4</item>\n                           <item>5</item>\n\
    \                           <item>6</item>\n                           <item>7</item>\n\
    \                           <item>8</item>\n                           <item>9</item>\n\
    \                      </one-of>\n                   </rule>\n               \
    \    <rule id=\"pin\" scope=\"public\">\n                    <one-of>\n      \
    \                     <item>\n                            <item repeat=\"4\">\n\
    \                             <ruleref uri=\"#digit\"/>\n                    \
    \               </item>#</item>\n                                   <item>* 9</item>\n\
    \                    </one-of>\n                   </rule>\n          </grammar>\n\
    \            </grammar>\n           </collect>\n   The same grammar could also\
    \ be referenced externally (and take\n   advantage of HTTP caching):\n   <collect\
    \ cleardigitbuffer=\"false\" timeout=\"20s\">\n      <grammar type=\"application/srgs+xml\"\
    \n               src=\"http://example.org/pin.grxml\"/>\n   </collect>\n"
- title: 4.3.1.4.  <record>
  contents:
  - "4.3.1.4.  <record>\n   The <record> element specifies how media input is recorded.\n\
    \   The <record> element has the following attributes:\n   timeout:  indicates\
    \ the time to wait for user input to begin.  A\n      valid value is a Time Designation\
    \ (see Section 4.6.7).  The\n      attribute is optional.  The default value is\
    \ 5s.\n   vadinitial:  controls whether Voice Activity Detection (VAD) is used\n\
    \      to initiate the recording operation.  A valid value is a boolean\n    \
    \  (see Section 4.6.1).  A value of true indicates the MS MUST\n      initiate\
    \ recording if the VAD detects voice on the configured\n      inbound audio streams.\
    \  A value of false indicates that the MS\n      MUST NOT initiate recording using\
    \ VAD.  The attribute is optional.\n      The default value is false.\n   vadfinal:\
    \  controls whether VAD is used to terminate the recording\n      operation. \
    \ A valid value is a boolean (see Section 4.6.1).  A\n      value of true indicates\
    \ the MS MUST terminate recording if the VAD\n      detects a period of silence\
    \ (whose duration is specified by the\n      finalsilence attribute) on configured\
    \ inbound audio streams.  A\n      value of false indicates that the MS MUST NOT\
    \ terminate recording\n      using VAD.  The attribute is optional.  The default\
    \ value is\n      false.\n   dtmfterm:  indicates whether the recording operation\
    \ is terminated by\n      DTMF input.  A valid value is a boolean (see Section\
    \ 4.6.1).  A\n      value of true indicates that recording is terminated by DTMF\n\
    \      input.  A value of false indicates that recording is not\n      terminated\
    \ by DTMF input.  The attribute is optional.  The default\n      value is true.\n\
    \   maxtime:  indicates the maximum duration of the recording.  A valid\n    \
    \  value is a Time Designation (see Section 4.6.7).  The attribute is\n      optional.\
    \  The default value is 15s.\n   beep:  indicates whether a 'beep' is to be played\
    \ immediately prior\n      to initiation of the recording operation.  A valid\
    \ value is a\n      boolean (see Section 4.6.1).  The attribute is optional. \
    \ The\n      default value is false.\n   finalsilence:  indicates the interval\
    \ of silence that indicates the\n      end of voice input.  This interval is not\
    \ part of the recording\n      itself.  This parameter is ignored if the vadfinal\
    \ attribute has\n      the value false.  A valid value is a Time Designation (see\n\
    \      Section 4.6.7).  The attribute is optional.  The default value is\n   \
    \   5s.\n   append:  indicates whether recorded data is appended or not to a\n\
    \      recording location if a resource already exists.  A valid value is\n  \
    \    a boolean (see Section 4.6.1).  A value of true indicates that\n      recorded\
    \ data is appended to the existing resource at a recording\n      location.  A\
    \ value of false indicates that recorded data is to\n      overwrite the existing\
    \ resource.  The attribute is optional.  The\n      default value is false.\n\
    \      When a recording location is specified using the HTTP or HTTPS\n      protocol,\
    \ the recording operation SHOULD be performed using the\n      HTTP GET and PUT\
    \ methods, unless the HTTP server provides a\n      special interface for recording\
    \ uploads and appends (e.g., using\n      POST).  When the append attribute has\
    \ the value false, the\n      recording data is uploaded to the specified location\
    \ using HTTP\n      PUT and replaces any data at that location on the HTTP origin\n\
    \      server.  When append has the value true, the existing data (if\n      any)\
    \ is first downloaded from the specified location using HTTP\n      GET, then\
    \ the recording data is appended to the existing recording\n      (note that this\
    \ might require codec conversion and modification to\n      the existing data),\
    \ then the combined recording is uploaded to the\n      specified location using\
    \ HTTP PUT.  HTTP errors are handled as\n      described in [RFC2616].\n     \
    \ When the recording location is specified using protocols other\n      than HTTP\
    \ or HTTPS, the mapping of the append operation onto the\n      upload protocol\
    \ scheme is implementation specific.\n   If either the vadinitial or vadfinal\
    \ attribute is set to true and the\n   MS does not support VAD, the MS sends a\
    \ <response> with a 434 status\n   code (Section 4.5).\n   The <record> element\
    \ has the following child element (0 or more\n   occurrences):\n   <media>:  specifies\
    \ the location and type of the media resource for\n      uploading recorded data\
    \ (see Section 4.3.1.5).  The MS MUST\n      support both HTTP [RFC2616] and HTTPS\
    \ [RFC2818] schemes for\n      uploading recorded data and the MS MAY support\
    \ other schemes.  The\n      MS uploads recorded data to this resource as soon\
    \ as possible\n      after recording is complete.  The element is optional.\n\
    \   If multiple <media> elements are specified, then media input is to be\n  \
    \ recorded in parallel to multiple resource locations.\n   If no <media> child\
    \ element is specified, the MS MUST record media\n   input but the recording location\
    \ and the recording format are\n   implementation specific (e.g., the MS records\
    \ audio in the WAV format\n   to a local disk accessible by HTTP).  The recording\
    \ location and\n   format are reported in <recordinfo> (Section 4.3.2.4) when\
    \ the dialog\n   terminates.  The recording MUST be available from this location\
    \ until\n   the connection or conference associated with the dialog on the MS\n\
    \   terminates.\n   If the MS does not support the configuration required for\
    \ recording\n   from the input media streams to one or more <media> elements and\
    \ a\n   more specific error code is not defined for its child elements, the\n\
    \   MS sends a <response> with a 423 status code (Section 4.5).\n   Note that\
    \ an MS MAY support uploading recorded data to recording\n   locations at the\
    \ same time the recording operation takes place.  Such\n   implementations need\
    \ to be aware of the requirements of certain\n   recording formats (e.g., WAV)\
    \ for metadata at the beginning of the\n   uploaded file, that the finalsilence\
    \ interval is not part of the\n   recording and how these requirements interact\
    \ with the URI scheme.\n   The MS has the following execution model for recording\
    \ after\n   initialization:\n   1.  If an error occurs during execution (e.g.,\
    \ authentication or\n       communication error when trying to upload to a recording\n\
    \       location), then the MS terminates record execution and reports\n     \
    \  the error to the dialog container (see Section 4.3).  The MS MAY\n       report\
    \ data recorded before the error in <recordinfo> (see\n       Section 4.3.2.4).\n\
    \   2.  If DTMF input (not matching a <control> operation) is received\n     \
    \  during prompt playback and the prompt bargein attribute is set to\n       true,\
    \ then the MS activates the record execution.  Otherwise, the\n       MS activates\
    \ it after the completion of prompt playback.\n   3.  If a beep attribute with\
    \ the value of true is specified, then the\n       MS plays a beep tone.\n   4.\
    \  The MS activates a timer with the duration of the value of the\n       timeout\
    \ attribute.  If the timer expires before the recording\n       operation begins,\
    \ then the MS terminates the recording execution\n       and reports the status\
    \ to dialog container with <recordinfo> (see\n       Section 4.3.2.4) where the\
    \ termmode attribute is set to noinput.\n   5.  Initiation of the recording operation\
    \ depends on the value of the\n       vadinitial attribute.  If vadinitial has\
    \ the value false, then\n       the recording operation is initiated immediately.\
    \  Otherwise, the\n       recording operation is initiated when voice activity\
    \ is detected.\n   6.  When the recording operation is initiated, a timer is started\
    \ for\n       the value of the maxtime attribute (maximum duration of the\n  \
    \     recording).  If the timer expires before the recording operation\n     \
    \  is complete, then the MS terminates recording execution and\n       reports\
    \ the execution status to the dialog container with\n       <recordinfo> (see\
    \ Section 4.3.2.4) where the termmode attribute\n       set to maxtime.\n   7.\
    \  During the record operation input, media streams are recording to\n       a\
    \ location and format specified in one or more <media> child\n       elements.\
    \  If no <media> child element is specified, the MS\n       records input to an\
    \ implementation-specific location and format.\n   8.  If the dtmfterm attribute\
    \ has the value true and DTMF input is\n       detected during the record operation,\
    \ then the MS terminates\n       recording and its status is reported to the dialog\
    \ container with\n       a <recordinfo> (see Section 4.3.2.4) where the termmode\
    \ attribute\n       is set to dtmf.\n   9.  If vadfinal attribute has the value\
    \ true, then the MS terminates\n       the recording operation when a period of\
    \ silence, with the\n       duration specified by the value of the finalsilence\
    \ attribute, is\n       detected.  This period of silence is not part of the final\n\
    \       recording.  The status is reported to the dialog container with a\n  \
    \     <recordinfo> (see Section 4.3.2.4) where the termmode attribute\n      \
    \ is set to finalsilence.\n   For example, a request to record audio and video\
    \ input to separate\n   locations:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n   <dialogstart connectionid=\"c1\">\n     <dialog>\n      <record maxtime=\"\
    30s\" vadinitial=\"false\" vadfinal=\"false\">\n       <media type=\"audio/x-wav\"\
    \n           loc=\"http://www.example.com/upload/audio.wav\"/>\n       <media\
    \ type=\"video/3gpp;codecs='s263'\"\n           loc=\"http://www.example.com/upload/video.3gp\"\
    />\n      </record>\n     </dialog>\n    </dialogstart>\n   </mscivr>\n   When\
    \ the <record> element is executed, it immediately begins\n   recording of the\
    \ audio and video (since vadinitial is false) where\n   the destination locations\
    \ are specified in the <media> child\n   elements.  Recording is completed when\
    \ the duration reaches 30s or\n   the connection is terminated.\n"
- title: 4.3.1.5.  <media>
  contents:
  - "4.3.1.5.  <media>\n   The <media> element specifies a media resource to playback\
    \ from (see\n   Section 4.3.1.1) or record to (see Section 4.3.1.4).  In the playback\n\
    \   case, the resource is retrieved and in the recording case, recording\n   data\
    \ is uploaded to the resource location.\n   A <media> element has the following\
    \ attributes:\n   loc:  specifies the location of the media resource.  A valid\
    \ value is\n      a URI (see Section 4.6.9).  The MS MUST support both HTTP\n\
    \      [RFC2616] and HTTPS [RFC2818] schemes and the MS MAY support other\n  \
    \    schemes.  If the URI scheme is not supported by the MS, the MS\n      sends\
    \ a <response> with a 420 status code (Section 4.5).  If the\n      resource is\
    \ to be retrieved but the MS cannot retrieve it within\n      the timeout interval,\
    \ the MS sends a <response> with a 409 status\n      code.  If the format of the\
    \ media resource is not supported, the\n      MS sends a <response> with a 429\
    \ status code.  The attribute is\n      mandatory.\n   type:  specifies the type\
    \ of the media resource indicated in the loc\n      attribute.  A valid value\
    \ is a MIME media type (see\n      Section 4.6.10) that, depending on its definition,\
    \ can include\n      additional parameters (e.g., [RFC4281]).  If the URI scheme\
    \ used\n      in the loc attribute defines a mechanism for establishing the\n\
    \      authoratitive MIME media type of the media resource, the value\n      returned\
    \ by that mechanism takes precedence over this attribute.\n      If additional\
    \ media parameters are specified, the MS MUST use them\n      to determine media\
    \ processing.  For example, [RFC4281] defines a\n      'codec' parameter for media\
    \ types like video/3gpp that would\n      determine which media streams are played\
    \ or recorded.  The\n      attribute is optional.  There is no default value.\n\
    \   fetchtimeout:  the maximum interval to wait when fetching a media\n      resource.\
    \  A valid value is a Time Designation (see\n      Section 4.6.7).  The attribute\
    \ is optional.  The default value is\n      30s.\n   soundLevel:  playback soundLevel\
    \ (volume) for the media resource.  A\n      valid value is a percentage (see\
    \ Section 4.6.8).  The value\n      indicates increase or decrease relative to\
    \ the original recorded\n      volume of the media.  A value of 100% (the default)\
    \ plays the\n      media at its recorded volume, a value of 200% will play the\
    \ media\n      twice recorded volume, 50% at half its recorded volume, a value\
    \ of\n      0% will play the media silently, and so on.  See 'soundLevel' in\n\
    \      SMIL [W3C.REC-SMIL2-20051213] for further information.  The\n      attribute\
    \ is optional.  The default value is 100%.\n   clipBegin:  offset from start of\
    \ media resource to begin playback.  A\n      valid value is a Time Designation\
    \ (see Section 4.6.7).  The offset\n      is measured in normal media playback\
    \ time from the beginning of\n      the media resource.  If the clipBegin offset\
    \ is after the end of\n      media (or the clipEnd offset), no media is played.\
    \  See\n      'clipBegin' in SMIL [W3C.REC-SMIL2-20051213] for further\n     \
    \ information.  The attribute is optional.  The default value is 0s.\n   clipEnd:\
    \  offset from start of media resource to end playback.  A\n      valid value\
    \ is a Time Designation (see Section 4.6.7).  The offset\n      is measured in\
    \ normal media playback time from the beginning of\n      the media resource.\
    \  If the clipEnd offset is after the end of\n      media, then the media is played\
    \ to the end.  If clipBegin is after\n      clipEnd, then no media is played.\
    \  See 'clipEnd' in SMIL\n      [W3C.REC-SMIL2-20051213] for further information.\
    \  The attribute\n      is optional.  There is no default value.\n   The fetchtimeout,\
    \ soundLevel, clipBegin, and clipEnd attributes are\n   only relevant in the playback\
    \ use case.  The MS ignores these\n   attributes when using the <media> for recording.\n\
    \   The <media> element has no children.\n"
- title: 4.3.2.  Exit Information
  contents:
  - "4.3.2.  Exit Information\n   When the dialog exits, information about the specified\
    \ operations is\n   reported in a <dialogexit> notification event (Section 4.2.5.1).\n"
- title: 4.3.2.1.  <promptinfo>
  contents:
  - "4.3.2.1.  <promptinfo>\n   The <promptinfo> element reports the information about\
    \ prompt\n   execution.  It has the following attributes:\n   duration:  indicates\
    \ the duration of prompt playback in milliseconds.\n      A valid value is a non-negative\
    \ integer (see Section 4.6.4).  The\n      attribute is optional.  There is no\
    \ default value.\n   termmode:  indicates how playback was terminated.  Valid\
    \ values are\n      'stopped', 'completed', or 'bargein'.  The attribute is mandatory.\n\
    \   The <promptinfo> element has no child elements.\n"
- title: 4.3.2.2.  <controlinfo>
  contents:
  - "4.3.2.2.  <controlinfo>\n   The <controlinfo> element reports information about\
    \ control\n   execution.\n   The <controlinfo> element has no attributes and has\
    \ 0 or more\n   <controlmatch> child elements each describing an individual runtime\n\
    \   control match.\n"
- title: 4.3.2.2.1.  <controlmatch>
  contents:
  - "4.3.2.2.1.  <controlmatch>\n   The <controlmatch> element has the following attributes:\n\
    \   dtmf:  DTMF input triggering the runtime control.  A valid value is a\n  \
    \    DTMF string (see Section 4.6.3) with no space between characters.\n     \
    \ The attribute is mandatory.\n   timestamp:  indicates the time (on the MS) at\
    \ which the control was\n      triggered.  A valid value is a dateTime expression\n\
    \      (Section 4.6.12).  The attribute is mandatory.\n   The <controlmatch> element\
    \ has no child elements.\n"
- title: 4.3.2.3.  <collectinfo>
  contents:
  - "4.3.2.3.  <collectinfo>\n   The <collectinfo> element reports the information\
    \ about collect\n   execution.\n   The <collectinfo> element has the following\
    \ attributes:\n   dtmf:  DTMF input collected from the user.  A valid value is\
    \ a DTMF\n      string (see Section 4.6.3) with no space between characters. \
    \ The\n      attribute is optional.  There is no default value.\n   termmode:\
    \  indicates how collection was terminated.  Valid values are\n      'stopped',\
    \ 'match', 'noinput', or 'nomatch'.  The attribute is\n      mandatory.\n   The\
    \ <collectinfo> element has no child elements.\n"
- title: 4.3.2.4.  <recordinfo>
  contents:
  - "4.3.2.4.  <recordinfo>\n   The <recordinfo> element reports information about\
    \ record execution\n   (Section 4.3.1.4).\n   The <recordinfo> element has the\
    \ following attributes:\n   termmode:  indicates how recording was terminated.\
    \  Valid values are\n      'stopped', 'noinput', 'dtmf', 'maxtime', and 'finalsilence'.\
    \  The\n      attribute is mandatory.\n   duration:  indicates the duration of\
    \ the recording in milliseconds.\n      A valid value is a non-negative integer\
    \ (see Section 4.6.4).  The\n      attribute is optional.  There is no default\
    \ value.\n   The <recordinfo> element has the following child element (0 or more\n\
    \   occurrences):\n   <mediainfo>:  indicates information about a recorded media\
    \ resource\n      (see Section 4.3.2.4.1).  The element is optional.\n   When\
    \ the record operation is successful, the MS MUST specify a\n   <mediainfo> element\
    \ for each recording location.  For example, if the\n   <record> element contained\
    \ three <media> child elements, then the\n   <recordinfo> would contain three\
    \ <mediainfo> child elements.\n"
- title: 4.3.2.4.1.  <mediainfo>
  contents:
  - "4.3.2.4.1.  <mediainfo>\n   The <mediainfo> element reports information about\
    \ a recorded media\n   resource.\n   The <mediainfo> element has the following\
    \ attributes:\n   loc:  indicates the location of the media resource.  A valid\
    \ value is\n      a URI (see Section 4.6.9).  The attribute is mandatory.\n  \
    \ type:  indicates the format of the media resource.  A valid value is\n     \
    \ a MIME media type (see Section 4.6.10).  The attribute is\n      mandatory.\n\
    \   size:  indicates the size of the media resource in bytes.  A valid\n     \
    \ value is a non-negative integer (see Section 4.6.4).  The\n      attribute is\
    \ optional.  There is no default value.\n"
- title: 4.4.  Audit Elements
  contents:
  - "4.4.  Audit Elements\n   The audit elements defined in this section allow the\
    \ MS to be audited\n   for package capabilities as well as dialogs managed by\
    \ the package.\n   Auditing is particularly important for two use cases.  First,\
    \ it\n   enables discovery of package capabilities supported on an MS before\n\
    \   an AS starts a dialog on connection or conference.  The AS can then\n   use\
    \ this information to create request elements using supported\n   capabilities\
    \ and, in the case of codecs, to negotiate an appropriate\n   SDP for a User Agent's\
    \ connection.  Second, auditing enables\n   discovery of the existence and status\
    \ of dialogs currently managed by\n   the package on the MS.  This could be used\
    \ when one AS takes over\n   management of the dialogs if the AS that initiated\
    \ the dialogs fails\n   or is no longer available (see Security Considerations\
    \ described in\n   Section 7).\n"
- title: 4.4.1.  <audit>
  contents:
  - "4.4.1.  <audit>\n   The <audit> request element is sent to the MS to request\
    \ information\n   about the capabilities of, and dialogs currently managed with,\
    \ this\n   Control Package.  Capabilities include supported dialog languages,\n\
    \   grammar formats, record and media types, as well as codecs.  Dialog\n   information\
    \ includes the status of managed dialogs as well as codecs.\n   The <audit> element\
    \ has the following attributes:\n   capabilities:  indicates whether package capabilities\
    \ are to be\n      audited.  A valid value is a boolean (see Section 4.6.1). \
    \ A value\n      of true indicates that capability information is to be reported.\n\
    \      A value of false indicates that capability information is not to\n    \
    \  be reported.  The attribute is optional.  The default value is\n      true.\n\
    \   dialogs:  indicates whether dialogs currently managed by the package\n   \
    \   are to be audited.  A valid value is a boolean (see\n      Section 4.6.1).\
    \  A value of true indicates that dialog information\n      is to be reported.\
    \  A value of false indicates that dialog\n      information is not to be reported.\
    \  The attribute is optional.\n      The default value is true.\n   dialogid:\
    \  string identifying a specific dialog to audit.  The MS\n      sends a response\
    \ with a 406 status code (Section 4.5) if the\n      specified dialog identifier\
    \ is invalid.  The attribute is\n      optional.  There is no default value.\n\
    \   If the dialogs attribute has the value true and dialogid attribute is\n  \
    \ specified, then only audit information about the specified dialog is\n   reported.\
    \  If the dialogs attribute has the value false, then no\n   dialog audit information\
    \ is reported even if a dialogid attribute is\n   specified.\n   The <audit> element\
    \ has no child elements.\n   When the MS receives an <audit> request, it MUST\
    \ reply with an\n   <auditresponse> element (Section 4.4.2), which includes a\
    \ mandatory\n   attribute describing the status in terms of a numeric code.  Response\n\
    \   status codes are defined in Section 4.5.  If the request is\n   successful,\
    \ the <auditresponse> contains (depending on attribute\n   values) a <capabilities>\
    \ element (Section 4.4.2.2) reporting package\n   capabilities and a <dialogs>\
    \ element (Section 4.4.2.3) reporting\n   managed dialog information.  If the\
    \ MS is not able to process the\n   request and carry out the audit operation,\
    \ the audit request has\n   failed and the MS MUST indicate the class of failure\
    \ using an\n   appropriate 4xx response code.  Unless an error response code is\n\
    \   specified for a class of error within this section, implementations\n   follow\
    \ Section 4.5 in determining the appropriate status code for the\n   response.\n\
    \   For example, a request to audit capabilities and dialogs managed by\n   the\
    \ package:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n     <audit/>\n   </mscivr>\n   In this example, only capabilities are to be\
    \ audited:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n     <audit dialogs=\"false\"/>\n   </mscivr>\n   With this example, only a\
    \ specific dialog is to be audited:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n     <audit capabilities=\"false\" dialogid=\"d4\"/>\n   </mscivr>\n"
- title: 4.4.2.  <auditresponse>
  contents:
  - "4.4.2.  <auditresponse>\n   The <auditresponse> element describes a response\
    \ to an <audit>\n   request.\n   The <auditresponse> element has the following\
    \ attributes:\n   status:  numeric code indicating the audit response status.\
    \  The\n      attribute is mandatory.  Valid values are defined in Section 4.5.\n\
    \   reason:  string specifying a reason for the status.  The attribute is\n  \
    \    optional.\n   desclang:  specifies the language used in the value of the\
    \ reason\n      attribute.  A valid value is a language identifier\n      (Section\
    \ 4.6.11).  The attribute is optional.  If not specified,\n      the value of\
    \ the desclang attribute on <mscivr> (Section 4.1)\n      applies.\n   The <auditresponse>\
    \ element has the following sequence of child\n   elements:\n   <capabilities>\
    \  element (Section 4.4.2.2) describing capabilities of\n      the package.  The\
    \ element is optional.\n   <dialogs>  element (Section 4.4.2.3) describing information\
    \ about\n      managed dialogs.  The element is optional.\n   For example, a successful\
    \ response to an <audit> request requesting\n   capabilities and dialogs information:\n\
    \   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n    <auditresponse\
    \ status=\"200\">\n     <capabilities>\n      <dialoglanguages>\n       <mimetype>application/voicexml+xml</mimetype>\n\
    \      </dialoglanguages>\n      <grammartypes/>\n      <recordtypes>\n      \
    \ <mimetype>audio/x-wav</mimetype>\n       <mimetype>video/3gpp</mimetype>\n \
    \     </recordtypes>\n      <prompttypes>\n       <mimetype>audio/x-wav</mimetype>\n\
    \       <mimetype>video/3gpp</mimetype>\n      </prompttypes>\n      <variables>\n\
    \       <variabletype type=\"date\" desc=\"value formatted as YYYYMMDD\">\n  \
    \      <format desc=\"month year day\">mdy</format>\n        <format desc=\"year\
    \ month day\">ymd</format>\n        <format desc=\"day month year\">dmy</format>\n\
    \        <format desc=\"day month\">dm</format>\n       </variabletype>\n    \
    \  </variables>\n      <maxpreparedduration>600s</maxpreparedduration>\n     \
    \ <maxrecordduration>1800s</maxrecordduration>\n      <codecs>\n       <codec\
    \ name=\"video\">\n        <subtype>H263</subtype>\n       </codec>\n       <codec\
    \ name=\"video\">\n        <subtype>H264</subtype>\n       </codec>\n       <codec\
    \ name=\"audio\">\n        <subtype>PCMU</subtype>\n       </codec>\n       <codec\
    \ name=\"audio\">\n        <subtype>PCMA</subtype>\n       </codec>\n       <codec\
    \ name=\"audio\">\n        <subtype>telephone-event</subtype>\n       </codec>\n\
    \      </codecs>\n     </capabilities>\n     <dialogs>\n      <dialogaudit dialogid=\"\
    4532\" state=\"preparing\"/>\n      <dialogaudit dialogid=\"4599\" state=\"prepared\"\
    />\n      <dialogaudit dialogid=\"1234\" state=\"started\" conferenceid=\"conf1\"\
    >\n       <codecs>\n        <codec name=\"audio\">\n         <subtype>PCMA</subtype>\n\
    \        </codec>\n        <codec name=\"audio\">\n         <subtype>telephone-event</subtype>\n\
    \        </codec>\n       </codecs>\n      </dialogaudit>\n     </dialogs>\n \
    \   </auditresponse>\n   </mscivr>\n"
- title: 4.4.2.1.  <codecs>
  contents:
  - "4.4.2.1.  <codecs>\n   The <codecs> provides audit information about codecs.\n\
    \   The <codecs> element has no attributes.\n   The <codecs> element has the following\
    \ sequence of child elements (0\n   or more occurrences):\n   <codec>:  audit\
    \ information for a codec (Section 4.4.2.1.1).  The\n      element is optional.\n\
    \   For example, a fragment describing two codecs:\n   <codecs>\n     <codec name=\"\
    audio\">\n      <subtype>PCMA</subtype>\n     </codec>\n     <codec name=\"audio\"\
    >\n      <subtype>telephone-event</subtype>\n     </codec>\n   </codecs>\n"
- title: 4.4.2.1.1.  <codec>
  contents:
  - "4.4.2.1.1.  <codec>\n   The <codec> element describes a codec on the MS.  The\
    \ element is\n   modeled on the <codec> element in the XCON conference information\n\
    \   data model [XCON-DATA-MODEL] but allows addition information (e.g.,\n   rate,\
    \ speed, etc.) to be specified.\n   The <codec> element has the following attributes:\n\
    \   name:  indicates the type name of the codec's media format as defined\n  \
    \    in [IANA].  A valid value is a \"type-name\" as defined in Section\n    \
    \  4.2 of [RFC4288].  The attribute is mandatory.\n   The <codec> element has\
    \ the following sequence of child elements:\n   <subtype>:  element whose content\
    \ model describes the subtype of the\n      codec's media format as defined in\
    \ [IANA].  A valid value is a\n      \"subtype-name\" as defined in Section 4.2\
    \ of [RFC4288].  The\n      element is mandatory.\n   <params>:  element (Section\
    \ 4.2.6) describing additional information\n      about the codec.  This package\
    \ is agnostic to the names and values\n      of the codec parameters supported\
    \ by an implementation.  The\n      element is optional.\n   For example, a fragment\
    \ with a <codec> element describing the H263\n   video codec:\n   <codec name=\"\
    video\">\n    <subtype>H263</subtype>\n   </codec>\n"
- title: 4.4.2.2.  <capabilities>
  contents:
  - "4.4.2.2.  <capabilities>\n   The <capabilities> element provides audit information\
    \ about package\n   capabilities.\n   The <capabilities> element has no attributes.\n\
    \   The <capabilities> element has the following sequence of child\n   elements:\n\
    \   <dialoglanguages>:  element (Section 4.4.2.2.1) describing additional\n  \
    \    dialog languages supported by the MS.  The element is mandatory.\n   <grammartypes>:\
    \  element (Section 4.4.2.2.2) describing supported\n      <grammar> (Section\
    \ 4.3.1.3.1) format types.  The element is\n      mandatory.\n   <recordtypes>:\
    \  element (Section 4.4.2.2.3) describing <media>\n      (Section 4.3.1.5) format\
    \ types supported for <record>\n      (Section 4.3.1.4).  The element is mandatory.\n\
    \   <prompttypes>:  element (Section 4.4.2.2.4) describing supported\n      <media>\
    \ (Section 4.3.1.5) format types for playback within a\n      <prompt> (Section\
    \ 4.3.1.1).  The element is mandatory.\n   <variables>:  element (Section 4.4.2.2.5)\
    \ describing supported types\n      and formats for the <variable> element (Section\
    \ 4.3.1.1.1).  The\n      element is mandatory.\n   <maxpreparedduration>:  element\
    \ (Section 4.4.2.2.6) describing the\n      supported maximum duration for a prepared\
    \ dialog following a\n      <dialogprepare> (Section 4.2.1) request.  The element\
    \ is\n      mandatory.\n   <maxrecordduration>:  element (Section 4.4.2.2.7) describing\
    \ the\n      supported maximum duration for a recording <record>\n      (Section\
    \ 4.3.1.4) request.  The element is mandatory.\n   <codecs>:  element (Section\
    \ 4.4.2.1) describing codecs available to\n      the package.  The element is\
    \ mandatory.\n   For example, a fragment describing capabilities:\n     <capabilities>\n\
    \      <dialoglanguages>\n       <mimetype>application/voicexml+xml</mimetype>\n\
    \      </dialoglanguages>\n      <grammartypes/>\n      <recordtypes>\n      \
    \ <mimetype>audio/x-wav</mimetype>\n       <mimetype>video/3gpp</mimetype>\n \
    \     </recordtypes>\n      <prompttypes>\n       <mimetype>audio/x-wav</mimetype>\n\
    \       <mimetype>video/3gpp</mimetype>\n      </prompttypes>\n      <variables/>\n\
    \      <maxpreparedduration>30s</maxpreparedduration>\n      <maxrecordduration>60s</maxrecordduration>\n\
    \      <codecs>\n       <codec name=\"video\">\n        <subtype>H263</subtype>\n\
    \       </codec>\n       <codec name=\"video\">\n        <subtype>H264</subtype>\n\
    \       </codec>\n       <codec name=\"audio\">\n        <subtype>PCMU</subtype>\n\
    \       </codec>\n       <codec name=\"audio\">\n        <subtype>PCMA</subtype>\n\
    \       </codec>\n       <codec name=\"audio\">\n        <subtype>telephone-event</subtype>\n\
    \       </codec>\n      </codecs>\n     </capabilities>\n"
- title: 4.4.2.2.1.  <dialoglanguages>
  contents:
  - "4.4.2.2.1.  <dialoglanguages>\n   The <dialoglanguages> element provides information\
    \ about additional\n   dialog languages supported by the package.  Dialog languages\
    \ are\n   identified by their associated MIME media types.  The MS MUST NOT\n\
    \   include the mandatory dialog language for this package (Section 4.3).\n  \
    \ The <dialoglanguages> element has no attributes.\n   The <dialoglanguages> element\
    \ has the following sequence of child\n   elements (0 or more occurrences):\n\
    \   <mimetype>:  element whose content model describes a MIME media type\n   \
    \   (Section 4.6.10) associated with a supported dialog language.  The\n     \
    \ element is optional.\n"
- title: 4.4.2.2.2.  <grammartypes>
  contents:
  - "4.4.2.2.2.  <grammartypes>\n   The <grammartypes> element provides information\
    \ about <grammar>\n   format types supported by the package.  The MS MUST NOT\
    \ include the\n   mandatory SRGS format type, \"application/srgs+xml\"\n   (Section\
    \ 4.3.1.3.1).\n   The <grammartypes> element has no attributes.\n   The <grammartypes>\
    \ element has the following sequence of child\n   elements (0 or more occurrences):\n\
    \   <mimetype>:  element whose content model describes a mime type\n      (Section\
    \ 4.6.10).  The element is optional.\n"
- title: 4.4.2.2.3.  <recordtypes>
  contents:
  - "4.4.2.2.3.  <recordtypes>\n   The <recordtypes> element provides information\
    \ about media resource\n   format types of <record> supported by the package (Section\
    \ 4.3.1.4).\n   The <recordtypes> element has no attributes.\n   The <recordtypes>\
    \ element has the following sequence of child\n   elements (0 or more occurrences):\n\
    \   <mimetype>:  element whose content model describes a mime type\n      (Section\
    \ 4.6.10).  The element is optional.\n"
- title: 4.4.2.2.4.  <prompttypes>
  contents:
  - "4.4.2.2.4.  <prompttypes>\n   The <prompttypes> element provides information\
    \ about media resource\n   format types of <prompt> supported by the package (Section\
    \ 4.3.1.1).\n   The <prompttypes> element has no attributes.\n   The <prompttypes>\
    \ element has the following sequence of child\n   elements (0 or more occurrences):\n\
    \   <mimetype>:  element whose content model describes a mime type\n      (Section\
    \ 4.6.10).  The element is optional.\n"
- title: 4.4.2.2.5.  <variables>
  contents:
  - "4.4.2.2.5.  <variables>\n   The <variables> element provides information about\
    \ types and formats\n   for the <variable> element (Section 4.3.1.1.1) supported\
    \ by the\n   package.\n   The <variables> element has no attributes.\n   The <variables>\
    \ element has the following sequence of child elements\n   (0 or more occurrences):\n\
    \   <variabletype>:  element describing the formats support for a given\n    \
    \  type (Section 4.4.2.2.5.1).  The element is optional.\n   For example, a fragment\
    \ describing support for <variable> with a\n   \"date\" type according to the\
    \ formats specified in\n   Section 4.3.1.1.1.1.\n   <variables>\n    <variabletype\
    \ type=\"date\" desc=\"value formatted as YYYYMMDD\">\n      <format desc=\"month\
    \ year day\">mdy</format>\n      <format desc=\"year month day\">ymd</format>\n\
    \      <format desc=\"day month year\">dmy</format>\n      <format desc=\"day\
    \ month\">dm</format>\n    </variabletype>\n   </variables>\n"
- title: 4.4.2.2.5.1.  <variabletype>
  contents:
  - "4.4.2.2.5.1.  <variabletype>\n   The <variabletype> element describes the formats\
    \ supported for\n   <variable> supported type.\n   The <variabletype> element\
    \ has the following attributes:\n   type:  indicates a supported value associated\
    \ with the type attribute\n      of the <variable> element.  The attribute is\
    \ mandatory.\n   desc:  a string providing some textual description of the type\
    \ and\n      format.  The attribute is optional.\n   desclang:  specifies the\
    \ language used in the value of the desc\n      attribute.  A valid value is a\
    \ language identifier\n      (Section 4.6.11).  The attribute is optional.  If\
    \ not specified,\n      the value of the desclang attribute on <mscivr> (Section\
    \ 4.1)\n      applies.\n   The <variabletype> element has the following sequence\
    \ of child\n   elements (0 or more occurrences):\n   <format>:  element with a\
    \ desc attribute (optional description),\n      desclang (optional language identifier\
    \ for the description), and a\n      content model describing a supported format\
    \ in the <variable>\n      format attribute.  The element is optional.\n"
- title: 4.4.2.2.6.  <maxpreparedduration>
  contents:
  - "4.4.2.2.6.  <maxpreparedduration>\n   The <maxpreparedduration> element describes\
    \ the maximum duration for\n   a dialog to remain in the prepared state (Section\
    \ 4.2) following a\n   <dialogprepare> (Section 4.2.1) request.\n   The <maxpreparedduration>\
    \ element has no attributes.\n   The <maxpreparedduration> element has a content\
    \ model describing the\n   maximum prepared dialog duration as a time designation\n\
    \   (Section 4.6.7).\n"
- title: 4.4.2.2.7.  <maxrecordduration>
  contents:
  - "4.4.2.2.7.  <maxrecordduration>\n   The <maxrecordduration> element describes\
    \ the maximum recording\n   duration for <record> Section 4.3.1.4) request supported\
    \ by the MS.\n   The <maxrecordduration> element has no attributes.\n   The <maxrecordduration>\
    \ element has a content model describing the\n   maximum duration of recording\
    \ as a time designation (Section 4.6.7).\n"
- title: 4.4.2.3.  <dialogs>
  contents:
  - "4.4.2.3.  <dialogs>\n   The <dialogs> element provides audit information about\
    \ dialogs.\n   The <dialogs> element has no attributes.\n   The <dialogs> element\
    \ has the following sequence of child elements (0\n   or more occurrences):\n\
    \   <dialogaudit>:  audit information for a dialog (Section 4.4.2.3.1).\n    \
    \  The element is optional.\n"
- title: 4.4.2.3.1.  <dialogaudit>
  contents:
  - "4.4.2.3.1.  <dialogaudit>\n   The <dialogaudit> element has the following attributes:\n\
    \   dialogid:  string identifying the dialog.  The attribute is\n      mandatory.\n\
    \   state:  string indicating the state of the dialog.  Valid values are\n   \
    \   preparing, prepared, starting, and started.  The attribute is\n      mandatory.\n\
    \   connectionid:  string identifying the SIP dialog connection\n      associated\
    \ with the dialog (see Appendix A.1 of [RFC6230]).  The\n      attribute is optional.\
    \  There is no default value.\n   conferenceid:  string identifying the conference\
    \ associated with the\n      dialog (see Appendix A.1 of [RFC6230]).  The attribute\
    \ is\n      optional.  There is no default value.\n   The <dialogaudit> element\
    \ has the following child element:\n   <codecs>  element describing codecs used\
    \ in the dialog.  See\n      Section 4.4.2.1.  The element is optional.\n   For\
    \ example, a fragment describing a started dialog that is using\n   PCMU and telephony-event\
    \ audio codecs:\n   <dialogaudit dialogid=\"1234\" state=\"started\" conferenceid=\"\
    conf1\">\n    <codecs>\n     <codec name=\"audio\">\n      <subtype>PCMU</subtype>\n\
    \     </codec>\n     <codec name=\"audio\">\n      <subtype>telephone-event</subtype>\n\
    \     </codec>\n    </codecs>\n   </dialogaudit>\n"
- title: 4.5.  Response Status Codes
  contents:
  - "4.5.  Response Status Codes\n   This section describes the response codes in\
    \ Table 1 for the status\n   attribute of dialog management <response> (Section\
    \ 4.2.4) and audit\n   <auditresponse> (Section 4.4.2) responses.  The MS MUST\
    \ support the\n   status response codes defined here.  All other valid but undefined\n\
    \   values are reserved for future use, where new status codes are\n   assigned\
    \ using the Standards Action process defined in [RFC5226].\n   The AS MUST treat\
    \ any responses it does not recognize as being\n   equivalent to the x00 response\
    \ code for all classes.  For example, if\n   an AS receives an unrecognized response\
    \ code of 499, it can safely\n   assume that there was something wrong with its\
    \ request and treat the\n   response as if it had received a 400 (Syntax error)\
    \ response code.\n   4xx responses are definite failure responses from a particular\
    \ MS.\n   The reason attribute in the response SHOULD identify the failure in\n\
    \   more detail, for example, \"Mandatory attribute missing: src in media\n  \
    \ element\" for a 400 (Syntax error) response code.\n   The AS SHOULD NOT retry\
    \ the same request without modification (for\n   example, correcting a syntax\
    \ error or changing the connectionid to\n   use one available on the MS).  However,\
    \ the same request to a\n   different MS might be successful, for example, if\
    \ another MS supports\n   a capability required in the request.\n   4xx failure\
    \ responses can be grouped into three classes: failure due\n   to a syntax error\
    \ in the request (400); failure due to an error\n   executing the request on the\
    \ MS (405-419); and failure due to the\n   request requiring a capability not\
    \ supported by the MS (420-439).\n   In cases where more than one request code\
    \ could be reported for a\n   failure, the MS SHOULD use the most specific error\
    \ code of the\n   failure class for the detected error.  For example, if the MS\
    \ detects\n   that the dialogid in the request is invalid, then it uses a 406\n\
    \   status code.  However, if the MS merely detects that an execution\n   error\
    \ occurred, then 419 is used.\n   +------+---------------+-----------------------+--------------------+\n\
    \   | Code | Summary       | Description           | Informational: AS  |\n  \
    \ |      |               |                       | Possible Recovery  |\n   |\
    \      |               |                       | Action             |\n   +------+---------------+-----------------------+--------------------+\n\
    \   | 200  | OK            | request has           |                    |\n  \
    \ |      |               | succeeded.            |                    |\n   |\
    \ 400  | Syntax error  | request is            | Change the request |\n   |  \
    \    |               | syntactically         | so that it is      |\n   |    \
    \  |               | invalid: it is not    | syntactically      |\n   |      |\
    \               | valid with respect to | valid.             |\n   |      |  \
    \             | the XML schema        |                    |\n   |      |    \
    \           | specified in          |                    |\n   |      |      \
    \         | Section 5 or it       |                    |\n   |      |        \
    \       | violates a            |                    |\n   |      |          \
    \     | co-occurrence         |                    |\n   |      |            \
    \   | constraint for a      |                    |\n   |      |              \
    \ | request element       |                    |\n   |      |               |\
    \ defined in Section 4. |                    |\n   | 405  | dialogid      | request\
    \ uses a        | Send a request for |\n   |      | already       | dialogid identifier\
    \   | a new dialog       |\n   |      | exists        | for a new dialog that\
    \ | without specifying |\n   |      |               | is already used by    |\
    \ the dialogid and   |\n   |      |               | another dialog on the | let\
    \ the MS         |\n   |      |               | MS (see Section 4.2). | generate\
    \ a unique  |\n   |      |               |                       | dialogid in\
    \ the    |\n   |      |               |                       | response.    \
    \      |\n   | 406  | dialogid does | request uses a        | Send an <audit>\
    \    |\n   |      | not exist     | dialogid identifier   | request          \
    \  |\n   |      |               | for an dialog that    | (Section 4.4.1)    |\n\
    \   |      |               | does not exist on the | requesting the     |\n  \
    \ |      |               | MS (see Section 4.2). | list of dialog     |\n   |\
    \      |               |                       | identifiers        |\n   |  \
    \    |               |                       | already used by    |\n   |    \
    \  |               |                       | the MS and then    |\n   |      |\
    \               |                       | use one of the     |\n   |      |  \
    \             |                       | listed dialog      |\n   |      |    \
    \           |                       | identifiers.       |\n   | 407  | connectionid\
    \  | request uses a        | Use another method |\n   |      | does not      |\
    \ connectionid          | to determine which |\n   |      | exist         | identifier\
    \ for a      | connections are    |\n   |      |               | connection that\
    \ does  | available on the   |\n   |      |               | not exist on the MS.\
    \  | MS.                |\n   | 408  | conferenceid  | request uses a        |\
    \ Use another method |\n   |      | does not      | conferenceid          | to\
    \ determine which |\n   |      | exist         | identifier for a      | conferences\
    \ are    |\n   |      |               | conference that does  | available on the\
    \   |\n   |      |               | not exist on the MS.  | MS.               \
    \ |\n   | 409  | Resource      | request uses a URI to | Check that the     |\n\
    \   |      | cannot be     | reference an external | resource URI is    |\n  \
    \ |      | retrieved     | resource (e.g.,       | valid, can be      |\n   |\
    \      |               | dialog, media, or     | reached from the   |\n   |  \
    \    |               | grammar) that cannot  | MS, and that the   |\n   |    \
    \  |               | be retrieved within   | appropriate        |\n   |      |\
    \               | the timeout interval. | authentication is  |\n   |      |  \
    \             |                       | used.              |\n   | 410  | Dialog\
    \        | request to prepare or |                    |\n   |      | execution\
    \     | start a dialog that   |                    |\n   |      | canceled   \
    \   | has been terminated   |                    |\n   |      |              \
    \ | by a                  |                    |\n   |      |               |\
    \ <dialogterminate/>    |                    |\n   |      |               | request\
    \ (see          |                    |\n   |      |               | Section 4.2).\
    \         |                    |\n   | 411  | Incompatible  | request specifies\
    \ a   | Change the media   |\n   |      | stream        | media stream       \
    \   | stream             |\n   |      | configuration | configuration that is\
    \ | configuration to   |\n   |      |               | in conflict with      |\
    \ match the          |\n   |      |               | itself, or the        | capabilities\
    \ of    |\n   |      |               | connection or         | the connection\
    \ or  |\n   |      |               | conference            | conference.     \
    \   |\n   |      |               | capabilities (see     |                   \
    \ |\n   |      |               | Section 4.2.2).       |                    |\n\
    \   | 412  | Media stream  | request specifies an  | Check the media    |\n  \
    \ |      | not available | operation for which a | stream capability  |\n   |\
    \      |               | media stream is not   | of the connection  |\n   |  \
    \    |               | available. For        | or conference and  |\n   |    \
    \  |               | example, playing a    | use an operation   |\n   |      |\
    \               | video media resource  | that only uses     |\n   |      |  \
    \             | on an connection or   | these              |\n   |      |    \
    \           | conference without    | capabilities.      |\n   |      |      \
    \         | video streams.        |                    |\n   | 413  | Control\
    \ keys  | request contains a    | Use different keys |\n   |      | with same\
    \     | <control> element     | for the different  |\n   |      | value      \
    \   | (Section 4.3.1.2)     | control            |\n   |      |              \
    \ | where some keys have  | operations.        |\n   |      |               |\
    \ the same value.       |                    |\n   | 419  | Other         | requested\
    \ operation   |                    |\n   |      | execution     | cannot be executed\
    \ by |                    |\n   |      | error         | the MS.             \
    \  |                    |\n   | 420  | Unsupported   | request specifies a   |\
    \ Use a URI scheme   |\n   |      | URI scheme    | URI whose scheme is   | that\
    \ is supported. |\n   |      |               | not supported by the  |       \
    \             |\n   |      |               | MS.                   |         \
    \           |\n   | 421  | Unsupported   | request references an | Send an <audit>\
    \    |\n   |      | dialog        | external dialog       | request          \
    \  |\n   |      | language      | language not          | (Section 4.4.1)    |\n\
    \   |      |               | supported by the MS.  | requesting the MS  |\n  \
    \ |      |               |                       | capabilities and   |\n   |\
    \      |               |                       | then use one of    |\n   |  \
    \    |               |                       | the listed dialog  |\n   |    \
    \  |               |                       | languages.         |\n   | 422  |\
    \ Unsupported   | request references a  | Send an <audit>    |\n   |      | playback\
    \      | media resource for    | request            |\n   |      | format    \
    \    | playback whose format | (Section 4.4.1)    |\n   |      |             \
    \  | is not supported by   | requesting the MS  |\n   |      |               |\
    \ the MS.               | capabilities and   |\n   |      |               |  \
    \                     | then use one of    |\n   |      |               |    \
    \                   | the listed         |\n   |      |               |      \
    \                 | playback media     |\n   |      |               |        \
    \               | formats.           |\n   | 423  | Unsupported   | request references\
    \ a  | Send an <audit>    |\n   |      | record format | media resource for  \
    \  | request            |\n   |      |               | recording whose       |\
    \ (Section 4.4.1)    |\n   |      |               | format is not         | requesting\
    \ the MS  |\n   |      |               | supported by the MS.  | capabilities\
    \ and   |\n   |      |               |                       | then use one of\
    \    |\n   |      |               |                       | the listed record\
    \  |\n   |      |               |                       | media formats.     |\n\
    \   | 424  | Unsupported   | request references a  | Send an <audit>    |\n  \
    \ |      | grammar       | grammar whose format  | request            |\n   |\
    \      | format        | is not supported by   | (Section 4.4.1)    |\n   |  \
    \    |               | the MS.               | requesting the MS  |\n   |    \
    \  |               |                       | capabilities and   |\n   |      |\
    \               |                       | then use one of    |\n   |      |  \
    \             |                       | the listed grammar |\n   |      |    \
    \           |                       | types.             |\n   | 425  | Unsupported\
    \   | request contains a    | Send an <audit>    |\n   |      | variable     \
    \ | prompt <variable>     | request            |\n   |      | configuration |\
    \ element               | (Section 4.4.1)    |\n   |      |               | (Section\
    \ 4.3.1.1.1)   | requesting the MS  |\n   |      |               | not supported\
    \ by the  | capabilities and   |\n   |      |               | MS.            \
    \       | then use one of    |\n   |      |               |                  \
    \     | the listed         |\n   |      |               |                    \
    \   | variable types.    |\n   | 426  | Unsupported   | request contains a   \
    \ |                    |\n   |      | DTMF          | prompt <dtmf> element |\
    \                    |\n   |      | configuration | (Section 4.3.1.1.2)   |  \
    \                  |\n   |      |               | not supported by the  |    \
    \                |\n   |      |               | MS.                   |      \
    \              |\n   | 427  | Unsupported   | request contains a    |        \
    \            |\n   |      | parameter     | <param> element       |          \
    \          |\n   |      |               | (Section 4.2.6.1) not |            \
    \        |\n   |      |               | supported by the MS.  |              \
    \      |\n   | 428  | Unsupported   | request contains a    |                \
    \    |\n   |      | media stream  | <stream> element      |                  \
    \  |\n   |      | configuration | (Section 4.2.2.2)     |                    |\n\
    \   |      |               | whose configuration   |                    |\n  \
    \ |      |               | is not supported by   |                    |\n   |\
    \      |               | the MS.               |                    |\n   | 429\
    \  | Unsupported   | request contains a    |                    |\n   |      |\
    \ playback      | <prompt> element      |                    |\n   |      | configuration\
    \ | (Section 4.3.1.1)     |                    |\n   |      |               |\
    \ that the MS is unable |                    |\n   |      |               | to\
    \ play on the        |                    |\n   |      |               | available\
    \ output      |                    |\n   |      |               | media streams.\
    \        |                    |\n   | 430  | Unsupported   | request contains\
    \ a    |                    |\n   |      | record        | <record> element  \
    \    |                    |\n   |      | configuration | (Section 4.3.1.4)   \
    \  |                    |\n   |      |               | that the MS is unable |\
    \                    |\n   |      |               | to record with on the |  \
    \                  |\n   |      |               | available input media |    \
    \                |\n   |      |               | streams.              |      \
    \              |\n   | 431  | Unsupported   | request contains      |        \
    \            |\n   |      | foreign       | attributes or         |          \
    \          |\n   |      | namespace     | elements from another |            \
    \        |\n   |      | attribute or  | namespace that the MS |              \
    \      |\n   |      | element       | does not support.     |                \
    \    |\n   | 432  | Unsupported   | request tries to      |                  \
    \  |\n   |      | multiple      | start another dialog  |                    |\n\
    \   |      | dialog        | on the same           |                    |\n  \
    \ |      | capability    | conference or         |                    |\n   |\
    \      |               | connection where a    |                    |\n   |  \
    \    |               | dialog is already     |                    |\n   |    \
    \  |               | running.              |                    |\n   | 433  |\
    \ Unsupported   | request contains      |                    |\n   |      | collect\
    \ and   | <collect> and         |                    |\n   |      | record   \
    \     | <record> elements and |                    |\n   |      | capability \
    \   | the MS does support   |                    |\n   |      |              \
    \ | these operations      |                    |\n   |      |               |\
    \ simultaneously.       |                    |\n   | 434  | Unsupported   | request\
    \ contains a    |                    |\n   |      | VAD           | <record> element\
    \      |                    |\n   |      | capability    | where Voice Activity\
    \  |                    |\n   |      |               | Detection (VAD) is    |\
    \                    |\n   |      |               | required, but the MS  |  \
    \                  |\n   |      |               | does not support VAD. |    \
    \                |\n   | 435  | Unsupported   | request contains a    |      \
    \              |\n   |      | parallel      | prompt <par> element  |        \
    \            |\n   |      | playback      | whose configuration   |          \
    \          |\n   |      |               | is not supported by   |            \
    \        |\n   |      |               | the MS.               |              \
    \      |\n   | 439  | Other         | request requires      |                \
    \    |\n   |      | unsupported   | another capability    |                  \
    \  |\n   |      | capability    | not supported by the  |                    |\n\
    \   |      |               | MS.                   |                    |\n  \
    \ +------+---------------+-----------------------+--------------------+\n    \
    \                       Table 1: Status Codes\n"
- title: 4.6.  Type Definitions
  contents:
  - "4.6.  Type Definitions\n   This section defines types referenced in attribute\
    \ and element\n   definitions.\n"
- title: 4.6.1.  Boolean
  contents:
  - "4.6.1.  Boolean\n   The value space of boolean is the set {true, false, 1, 0}\
    \ as defined\n   in Section 3.2.2 of [XMLSchema:Part2].  In accordance with this\n\
    \   definition, the concept of false can be lexically represented by the\n   strings\
    \ \"0\" and \"false\" and the concept of true by the strings \"1\"\n   and \"\
    true\"; implementations MUST support both styles of lexical\n   representation.\n"
- title: 4.6.2.  DTMFChar
  contents:
  - "4.6.2.  DTMFChar\n   A DTMF character.  The value space is the set {0, 1, 2,\
    \ 3, 4, 5, 6,\n   7, 8, 9, #, *, A, B, C, D}.\n"
- title: 4.6.3.  DTMFString
  contents:
  - "4.6.3.  DTMFString\n   A string composed of one or more DTMFChars.\n"
- title: 4.6.4.  Non-Negative Integer
  contents:
  - "4.6.4.  Non-Negative Integer\n   The value space of non-negative integer is the\
    \ infinite set\n   {0,1,2,...} as defined in Section 3.3.20 of [XMLSchema:Part2].\n\
    \   Implementation Note: It is RECOMMENDED that implementations at least\n   support\
    \ a maximum value of a 32-bit integer (2,147,483,647).\n"
- title: 4.6.5.  Positive Integer
  contents:
  - "4.6.5.  Positive Integer\n   The value space of positive integer is the infinite\
    \ set {1,2,...} as\n   defined in Section 3.3.25 of [XMLSchema:Part2].\n   Implementation\
    \ Note: It is RECOMMENDED that implementations at least\n   support a maximum\
    \ value of a 32-bit integer (2,147,483,647).\n"
- title: 4.6.6.  String
  contents:
  - "4.6.6.  String\n   A string in the character encoding associated with the XML\
    \ element as\n   defined in Section 3.2.1 of [XMLSchema:Part2].\n"
- title: 4.6.7.  Time Designation
  contents:
  - "4.6.7.  Time Designation\n   A time designation consists of a non-negative real\
    \ number followed by\n   a time unit identifier.\n   The time unit identifiers\
    \ are \"ms\" (milliseconds) and \"s\" (seconds).\n   Examples include: \"3s\"\
    , \"850ms\", \"0.7s\", \".5s\", and \"+1.5s\".\n"
- title: 4.6.8.  Percentage
  contents:
  - "4.6.8.  Percentage\n   A percentage consists of a positive integer followed by\
    \ \"%\".\n   Examples include: \"100%\", \"500%\", and \"10%\".\n"
- title: 4.6.9.  URI
  contents:
  - "4.6.9.  URI\n   Uniform Resource Indicator as defined in [RFC3986].\n"
- title: 4.6.10.  MIME Media Type
  contents:
  - "4.6.10.  MIME Media Type\n   A string formatted as an IANA MIME media type [MIME.mediatypes].\
    \  The\n   ABNF [RFC5234] production for the string is:\n   type = type-name \"\
    /\" subtype-name *(\";\" parameter)\n   parameter = parameter-name \"=\" value\n\
    \   where \"type-name\" and \"subtype-name\" are defined in Section 4.2 of\n \
    \  [RFC4288], \"parameter-name\" is defined in Section 4.3 of [RFC4288],\n   and\
    \ \"value\" is defined in Section 5.1 of [RFC2045].\n"
- title: 4.6.11.  Language Identifier
  contents:
  - "4.6.11.  Language Identifier\n   A language identifier labels information content\
    \ as being of a\n   particular human language variant.  Following the XML specification\n\
    \   for language identification [XML], a legal language identifier is\n   identified\
    \ by a [RFC5646] code and matched according to [RFC4647].\n"
- title: 4.6.12.  DateTime
  contents:
  - "4.6.12.  DateTime\n   A string formatted according to the XML schema definition\
    \ of a\n   dateTime type [XMLSchema:Part2].\n"
- title: 5.  Formal Syntax
  contents:
  - "5.  Formal Syntax\n   This section defines the XML schema for IVR Control Package.\
    \  The\n   schema is normative.\n   The schema defines datatypes, attributes,\
    \ dialog management, and IVR\n   dialog elements in the urn:ietf:params:xml:ns:msc-ivr\
    \ namespace.  In\n   most elements the order of child elements is significant.\
    \  The schema\n   is extensible: elements allow attributes and child elements\
    \ from\n   other namespaces.  Elements from outside this package's namespace can\n\
    \   occur after elements defined in this package.\n   The schema is dependent\
    \ upon the schema (framework.xsd) defined in\n   Appendix A.1 of the Control Framework\
    \ [RFC6230].  It is also\n   dependent upon the W3C (xml.xsd) schema for definitions\
    \ of XML\n   attributes (e.g., xml:base).\n"
- title: <?xml version="1.0" encoding="UTF-8"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
- title: <xsd:schema targetNamespace="urn:ietf:params:xml:ns:msc-ivr"
  contents:
  - "<xsd:schema targetNamespace=\"urn:ietf:params:xml:ns:msc-ivr\"\n elementFormDefault=\"\
    qualified\" blockDefault=\"#all\"\n xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\n\
    \ xmlns:fw=\"urn:ietf:params:xml:ns:control:framework-attributes\"\n xmlns:xsd=\"\
    http://www.w3.org/2001/XMLSchema\">\n <xsd:annotation>\n  <xsd:documentation>\n\
    \   IETF MediaCtrl IVR 1.0 (20110104)\n   This is the schema of the IETF MediaCtrl\
    \ IVR Control\n   Package.\n   The schema namespace is urn:ietf:params:xml:ns:msc-ivr\n\
    \  </xsd:documentation>\n </xsd:annotation>\n <!--\n  #############################################################\n\
    \  SCHEMA IMPORTS\n  #############################################################\n\
    \ -->\n <xsd:import namespace=\"http://www.w3.org/XML/1998/namespace\"\n  schemaLocation=\"\
    http://www.w3.org/2001/xml.xsd\">\n  <xsd:annotation>\n   <xsd:documentation>\n\
    \    This import brings in the XML attributes for\n    xml:base, xml:lang, etc\n\
    \    See http://www.w3.org/2001/xml.xsd for latest version\n   </xsd:documentation>\n\
    \  </xsd:annotation>\n </xsd:import>\n <xsd:import\n  namespace=\"urn:ietf:params:xml:ns:control:framework-attributes\"\
    \n  schemaLocation=\"framework.xsd\">\n  <xsd:annotation>\n   <xsd:documentation>\n\
    \    This import brings in the framework attributes for\n    conferenceid and\
    \ connectionid.\n   </xsd:documentation>\n  </xsd:annotation>\n </xsd:import>\n\
    \ <!--\n  #####################################################\n  Extensible\
    \ core type\n  #####################################################\n -->\n <xsd:complexType\
    \ name=\"Tcore\">\n  <xsd:annotation>\n   <xsd:documentation>\n    This type is\
    \ extended by other (non-mixed) component types to\n    allow attributes from\
    \ other namespaces.\n   </xsd:documentation>\n  </xsd:annotation>\n  <xsd:sequence/>\n\
    \  <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n </xsd:complexType>\n\
    \ <!--\n  #####################################################\n  TOP LEVEL ELEMENT:\
    \ mscivr\n  #####################################################\n -->\n <xsd:complexType\
    \ name=\"mscivrType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\"\
    >\n    <xsd:sequence>\n     <xsd:choice>\n      <xsd:element ref=\"dialogprepare\"\
    \ />\n      <xsd:element ref=\"dialogstart\" />\n      <xsd:element ref=\"dialogterminate\"\
    \ />\n      <xsd:element ref=\"response\" />\n      <xsd:element ref=\"event\"\
    \ />\n      <xsd:element ref=\"audit\" />\n      <xsd:element ref=\"auditresponse\"\
    \ />\n      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n       maxOccurs=\"\
    unbounded\" processContents=\"lax\" />\n     </xsd:choice>\n    </xsd:sequence>\n\
    \    <xsd:attribute name=\"version\" type=\"version.datatype\"\n     use=\"required\"\
    \ />\n    <xsd:attribute name=\"desclang\" type=\"xsd:language\"\n     default=\"\
    i-default\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"mscivr\" type=\"mscivrType\" />\n <!--\n  #####################################################\n\
    \  DIALOG MANAGEMENT TYPES\n  #####################################################\n\
    \ -->\n <!--  dialogprepare -->\n <xsd:complexType name=\"dialogprepareType\"\
    >\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n\
    \     <xsd:element ref=\"dialog\" minOccurs=\"0\"\n      maxOccurs=\"1\" />\n\
    \     <xsd:element ref=\"params\" minOccurs=\"0\"\n      maxOccurs=\"1\" />\n\
    \     <xsd:any namespace=\"##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\"\
    \ processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute name=\"\
    src\" type=\"xsd:anyURI\" />\n    <xsd:attribute name=\"type\" type=\"mime.datatype\"\
    />\n    <xsd:attribute name=\"maxage\" type=\"xsd:nonNegativeInteger\"/>\n   \
    \ <xsd:attribute name=\"maxstale\" type=\"xsd:nonNegativeInteger\"/>\n    <xsd:attribute\
    \ name=\"fetchtimeout\"\n     type=\"timedesignation.datatype\" default=\"30s\"\
    \ />\n    <xsd:attribute name=\"dialogid\"\n     type=\"dialogid.datatype\" />\n\
    \   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element\
    \ name=\"dialogprepare\" type=\"dialogprepareType\" />\n <!--  dialogstart -->\n\
    \ <xsd:complexType name=\"dialogstartType\">\n  <xsd:complexContent>\n   <xsd:extension\
    \ base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"dialog\" minOccurs=\"\
    0\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"subscribe\" minOccurs=\"\
    0\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"params\" minOccurs=\"0\"\
    \n      maxOccurs=\"1\" />\n     <xsd:element ref=\"stream\" minOccurs=\"0\"\n\
    \      maxOccurs=\"unbounded\" />\n     <xsd:any namespace=\"##other\" minOccurs=\"\
    0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n\
    \    <xsd:attribute name=\"src\" type=\"xsd:anyURI\" />\n    <xsd:attribute name=\"\
    type\" type=\"mime.datatype\"/>\n    <xsd:attribute name=\"maxage\" type=\"xsd:nonNegativeInteger\"\
    />\n    <xsd:attribute name=\"maxstale\" type=\"xsd:nonNegativeInteger\"/>\n \
    \   <xsd:attribute name=\"fetchtimeout\"\n     type=\"timedesignation.datatype\"\
    \ default=\"30s\" />\n    <xsd:attribute name=\"dialogid\"\n     type=\"dialogid.datatype\"\
    \ />\n    <xsd:attribute name=\"prepareddialogid\"\n     type=\"dialogid.datatype\"\
    \ />\n    <xsd:attributeGroup ref=\"fw:framework-attributes\" />\n   </xsd:extension>\n\
    \  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element name=\"dialogstart\"\
    \ type=\"dialogstartType\" />\n <!--  dialogterminate -->\n <xsd:complexType name=\"\
    dialogterminateType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\"\
    >\n   <xsd:sequence>\n    <xsd:any namespace=\"##other\" minOccurs=\"0\"\n   \
    \   maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n\
    \    <xsd:attribute name=\"dialogid\"\n     type=\"dialogid.datatype\" use=\"\
    required\" />\n    <xsd:attribute name=\"immediate\"\n     type=\"xsd:boolean\"\
    \ default=\"false\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"dialogterminate\" type=\"dialogterminateType\" />\n <!--\
    \  response -->\n <xsd:complexType name=\"responseType\">\n  <xsd:complexContent>\n\
    \   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n    <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\"\
    \ />\n    </xsd:sequence>\n    <xsd:attribute name=\"status\" type=\"status.datatype\"\
    \n     use=\"required\" />\n    <xsd:attribute name=\"reason\" type=\"xsd:string\"\
    \ />\n    <xsd:attribute name=\"desclang\" type=\"xsd:language\"/>\n    <xsd:attribute\
    \ name=\"dialogid\"\n     type=\"dialogid.datatype\" use=\"required\" />\n   \
    \ <xsd:attributeGroup ref=\"fw:framework-attributes\" />\n   </xsd:extension>\n\
    \  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element name=\"response\"\
    \ type=\"responseType\" />\n <!--  event -->\n <xsd:complexType name=\"eventType\"\
    >\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n\
    \     <xsd:choice>\n      <xsd:element ref=\"dialogexit\" minOccurs=\"0\"\n  \
    \     maxOccurs=\"1\" />\n      <xsd:element ref=\"dtmfnotify\" minOccurs=\"0\"\
    \n       maxOccurs=\"1\" />\n      <xsd:any namespace=\"##other\" minOccurs=\"\
    0\"\n       maxOccurs=\"unbounded\" processContents=\"lax\" />\n     </xsd:choice>\n\
    \    </xsd:sequence>\n    <xsd:attribute name=\"dialogid\"\n     type=\"dialogid.datatype\"\
    \ use=\"required\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"event\" type=\"eventType\" />\n <!--  dialogexit-->\n <xsd:complexType\
    \ name=\"dialogexitType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"\
    Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"promptinfo\" minOccurs=\"\
    0\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"controlinfo\" minOccurs=\"\
    0\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"collectinfo\" minOccurs=\"\
    0\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"recordinfo\" minOccurs=\"\
    0\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"params\" minOccurs=\"0\"\
    \n      maxOccurs=\"1\" />\n     <xsd:any namespace=\"##other\" minOccurs=\"0\"\
    \n      maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n\
    \    <xsd:attribute name=\"status\"\n     type=\"xsd:nonNegativeInteger\" use=\"\
    required\" />\n    <xsd:attribute name=\"reason\" type=\"xsd:string\" />\n   \
    \ <xsd:attribute name=\"desclang\" type=\"xsd:language\"/>\n   </xsd:extension>\n\
    \  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element name=\"dialogexit\"\
    \ type=\"dialogexitType\" />\n <!--  dtmfnotify-->\n <xsd:complexType name=\"\
    dtmfnotifyType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n\
    \   <xsd:sequence>\n    <xsd:any namespace=\"##other\" minOccurs=\"0\"\n     \
    \ maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n  \
    \  <xsd:attribute name=\"matchmode\"\n     type=\"matchmode.datatype\" default=\"\
    all\" />\n    <xsd:attribute name=\"dtmf\" type=\"dtmfstring.datatype\"\n    \
    \ use=\"required\" />\n    <xsd:attribute name=\"timestamp\" type=\"xsd:dateTime\"\
    \n     use=\"required\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"dtmfnotify\" type=\"dtmfnotifyType\" />\n <!-- promptinfo\
    \ -->\n <xsd:complexType name=\"promptinfoType\">\n  <xsd:complexContent>\n  \
    \ <xsd:extension base=\"Tcore\">\n <xsd:sequence>\n    <xsd:any namespace=\"##other\"\
    \ minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\" />\n\
    \    </xsd:sequence>\n    <xsd:attribute name=\"duration\"\n     type=\"xsd:nonNegativeInteger\"\
    \ />\n    <xsd:attribute name=\"termmode\"\n     type=\"prompt_termmode.datatype\"\
    \ use=\"required\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"promptinfo\" type=\"promptinfoType\" />\n <!-- controlinfo\
    \ -->\n <xsd:complexType name=\"controlinfoType\">\n  <xsd:complexContent>\n \
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"\
    controlmatch\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" />\n     <xsd:any\
    \ namespace=\"##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"\
    lax\" />\n    </xsd:sequence>\n   </xsd:extension>\n  </xsd:complexContent>\n\
    \ </xsd:complexType>\n <xsd:element name=\"controlinfo\" type=\"controlinfoType\"\
    \ />\n <!-- controlmatch -->\n <xsd:complexType name=\"controlmatchType\">\n \
    \ <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n <xsd:sequence>\n \
    \   <xsd:any namespace=\"##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\"\
    \ processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute name=\"\
    dtmf\"\n     type=\"dtmfstring.datatype\" />\n    <xsd:attribute name=\"timestamp\"\
    \ type=\"xsd:dateTime\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"controlmatch\" type=\"controlmatchType\" />\n <!--  collectinfo\
    \ -->\n <xsd:complexType name=\"collectinfoType\">\n  <xsd:complexContent>\n \
    \  <xsd:extension base=\"Tcore\">\n <xsd:sequence>\n    <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\"\
    \ />\n    </xsd:sequence>\n    <xsd:attribute name=\"dtmf\"\n     type=\"dtmfstring.datatype\"\
    \ />\n    <xsd:attribute name=\"termmode\"\n     type=\"collect_termmode.datatype\"\
    \ use=\"required\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"collectinfo\" type=\"collectinfoType\" />\n <!-- recordinfo\
    \ -->\n <xsd:complexType name=\"recordinfoType\">\n  <xsd:complexContent>\n  \
    \ <xsd:extension base=\"Tcore\">\n   <xsd:sequence>\n     <xsd:element ref=\"\
    mediainfo\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" />\n     <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\"\
    \ />\n    </xsd:sequence>\n    <xsd:attribute name=\"duration\"\n     type=\"\
    xsd:nonNegativeInteger\" />\n    <xsd:attribute name=\"termmode\"\n     type=\"\
    record_termmode.datatype\" use=\"required\" />\n   </xsd:extension>\n  </xsd:complexContent>\n\
    \ </xsd:complexType>\n <xsd:element name=\"recordinfo\" type=\"recordinfoType\"\
    \ />\n <!--  mediainfo -->\n <xsd:complexType name=\"mediainfoType\">\n  <xsd:complexContent>\n\
    \   <xsd:extension base=\"Tcore\">\n <xsd:sequence>\n    <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\"\
    \ />\n    </xsd:sequence>\n    <xsd:attribute name=\"loc\" type=\"xsd:anyURI\"\
    \n     use=\"required\" />\n    <xsd:attribute name=\"type\" type=\"mime.datatype\"\
    \n    use=\"required\"/>\n    <xsd:attribute name=\"size\"\n     type=\"xsd:nonNegativeInteger\"\
    \ />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element\
    \ name=\"mediainfo\" type=\"mediainfoType\" />\n <!--  subscribe -->\n <xsd:complexType\
    \ name=\"subscribeType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\"\
    >\n    <xsd:sequence>\n     <xsd:element ref=\"dtmfsub\" minOccurs=\"0\"\n   \
    \   maxOccurs=\"unbounded\" />\n     <xsd:any namespace=\"##other\" minOccurs=\"\
    0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n\
    \   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element\
    \ name=\"subscribe\" type=\"subscribeType\" />\n <!--  dtmfsub -->\n <xsd:complexType\
    \ name=\"dtmfsubType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\"\
    >\n <xsd:sequence>\n    <xsd:any namespace=\"##other\" minOccurs=\"0\"\n     \
    \ maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n  \
    \  <xsd:attribute name=\"matchmode\"\n     type=\"matchmode.datatype\" default=\"\
    all\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"dtmfsub\" type=\"dtmfsubType\" />\n <!-- params -->\n <xsd:complexType\
    \ name=\"paramsType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\"\
    >\n    <xsd:sequence>\n     <xsd:element ref=\"param\" minOccurs=\"0\"\n     \
    \ maxOccurs=\"unbounded\" />\n     <xsd:any namespace=\"##other\" minOccurs=\"\
    0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n\
    \   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element\
    \ name=\"params\" type=\"paramsType\" />\n <!--  param -->\n <!--  doesn't extend\
    \ tCore since its content model is mixed -->\n <xsd:complexType name=\"paramType\"\
    \ mixed=\"true\">\n  <xsd:sequence/>\n  <xsd:attribute name=\"name\" type=\"xsd:string\"\
    \ use=\"required\" />\n  <xsd:attribute name=\"type\" type=\"mime.datatype\" default=\"\
    text/plain\"/>\n     <xsd:attribute name=\"encoding\" type=\"xsd:string\"/>\n\
    \  <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n </xsd:complexType>\n\
    \ <xsd:element name=\"param\" type=\"paramType\" />\n <!--  stream -->\n <xsd:complexType\
    \ name=\"streamType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\"\
    >\n   <xsd:sequence>\n     <xsd:element ref=\"region\" minOccurs=\"0\"\n     \
    \ maxOccurs=\"1\" />\n    <xsd:element ref=\"priority\" minOccurs=\"0\"\n    \
    \  maxOccurs=\"1\" />\n     <xsd:any namespace=\"##other\" minOccurs=\"0\"\n \
    \     maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n\
    \    <xsd:attribute name=\"media\" type=\"media.datatype\"\n     use=\"required\"\
    \ />\n    <xsd:attribute name=\"label\" type=\"label.datatype\" />\n    <xsd:attribute\
    \ name=\"direction\"\n     type=\"direction.datatype\" default=\"sendrecv\" />\n\
    \   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element\
    \ name=\"stream\" type=\"streamType\" />\n"
- title: <!--  region  -->
  contents:
  - '<!--  region  -->

    '
- title: <xsd:simpleType name="regionType">
  contents:
  - "<xsd:simpleType name=\"regionType\">\n <xsd:restriction base=\"xsd:NMTOKEN\"\
    />\n"
- title: </xsd:simpleType>
  contents:
  - "</xsd:simpleType>\n <xsd:element name=\"region\" type=\"regionType\" />\n <!--\
    \  priority  -->\n <xsd:simpleType name=\"priorityType\">\n  <xsd:restriction\
    \ base=\"xsd:positiveInteger\" />\n </xsd:simpleType>\n <xsd:element name=\"priority\"\
    \ type=\"priorityType\" />\n"
- title: <!-- dialog -->
  contents:
  - "<!-- dialog -->\n <xsd:complexType name=\"dialogType\">\n  <xsd:complexContent>\n\
    \   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"\
    prompt\" minOccurs=\"0\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"control\"\
    \ minOccurs=\"0\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"collect\"\
    \ minOccurs=\"0\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"record\"\
    \ minOccurs=\"0\"\n      maxOccurs=\"1\" />\n     <xsd:any namespace=\"##other\"\
    \ minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\" />\n\
    \    </xsd:sequence>\n    <xsd:attribute name=\"repeatCount\"\n     type=\"xsd:nonNegativeInteger\"\
    \ default=\"1\" />\n    <xsd:attribute name=\"repeatDur\"\n     type=\"timedesignation.datatype\"\
    \ />\n    <xsd:attribute name=\"repeatUntilComplete\"\n     type=\"xsd:boolean\"\
    \ default=\"false\"/>\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"dialog\" type=\"dialogType\" />\n <!--  prompt  -->\n <xsd:complexType\
    \ name=\"promptType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\"\
    >\n    <xsd:choice minOccurs=\"1\" maxOccurs=\"unbounded\">\n     <xsd:element\
    \ ref=\"media\" />\n     <xsd:element ref=\"variable\" />\n     <xsd:element ref=\"\
    dtmf\" />\n     <xsd:element ref=\"par\" />\n     <xsd:any namespace=\"##other\"\
    \n      processContents=\"lax\" />\n    </xsd:choice>\n    <xsd:attribute ref=\"\
    xml:base\" />\n    <xsd:attribute name=\"bargein\" type=\"xsd:boolean\"\n    \
    \ default=\"true\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"prompt\" type=\"promptType\" />\n <!--  media -->\n <xsd:complexType\
    \ name=\"mediaType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\"\
    >\n <xsd:sequence>\n    <xsd:any namespace=\"##other\" minOccurs=\"0\"\n     \
    \ maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n  \
    \  <xsd:attribute name=\"loc\" type=\"xsd:anyURI\"\n     use=\"required\" />\n\
    \    <xsd:attribute name=\"type\" type=\"mime.datatype\" />\n    <xsd:attribute\
    \ name=\"fetchtimeout\"\n     type=\"timedesignation.datatype\" default=\"30s\"\
    \ />\n    <xsd:attribute name=\"soundLevel\"\n     type=\"percentage.datatype\"\
    \ default=\"100%\" />\n    <xsd:attribute name=\"clipBegin\"\n     type=\"timedesignation.datatype\"\
    \ default=\"0s\" />\n     <xsd:attribute name=\"clipEnd\"\n     type=\"timedesignation.datatype\"\
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element\
    \ name=\"media\" type=\"mediaType\" />\n <!--  variable -->\n <xsd:complexType\
    \ name=\"variableT\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\"\
    >\n <xsd:sequence>\n    <xsd:any namespace=\"##other\" minOccurs=\"0\"\n     \
    \ maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n  \
    \  <xsd:attribute name=\"value\" type=\"xsd:string\"\n     use=\"required\" />\n\
    \    <xsd:attribute name=\"type\" type=\"xsd:string\"\n     use=\"required\" />\n\
    \    <xsd:attribute name=\"format\" type=\"xsd:string\" />\n    <xsd:attribute\
    \ name=\"gender\" type=\"gender.datatype\" />\n    <xsd:attribute ref=\"xml:lang\"\
    \ />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element\
    \ name=\"variable\" type=\"variableT\" />\n <!-- dtmf -->\n <xsd:complexType name=\"\
    dtmfType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n <xsd:sequence>\n\
    \    <xsd:any namespace=\"##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\"\
    \ processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute name=\"\
    digits\"\n     type=\"dtmfstring.datatype\" use=\"required\" />\n    <xsd:attribute\
    \ name=\"level\" type=\"xsd:integer\"\n     default=\"-6\" />\n    <xsd:attribute\
    \ name=\"duration\"\n     type=\"timedesignation.datatype\" default=\"100ms\"\
    \ />\n    <xsd:attribute name=\"interval\"\n     type=\"timedesignation.datatype\"\
    \ default=\"100ms\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"dtmf\" type=\"dtmfType\" />\n <!--  par  -->\n <xsd:complexType\
    \ name=\"parType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\"\
    >\n    <xsd:choice minOccurs=\"1\" maxOccurs=\"unbounded\">\n     <xsd:element\
    \ ref=\"media\" />\n     <xsd:element ref=\"variable\" />\n     <xsd:element ref=\"\
    dtmf\" />\n           <xsd:element ref=\"seq\" />\n     <xsd:any namespace=\"\
    ##other\"\n      processContents=\"lax\" />\n    </xsd:choice>\n    <xsd:attribute\
    \ name=\"endsync\" type=\"endsync.datatype\"\n    default=\"last\"/>\n   </xsd:extension>\n\
    \  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element name=\"par\" type=\"\
    parType\" />\n <!--  seq  -->\n <xsd:complexType name=\"seqType\">\n  <xsd:complexContent>\n\
    \   <xsd:extension base=\"Tcore\">\n    <xsd:choice minOccurs=\"1\" maxOccurs=\"\
    unbounded\">\n     <xsd:element ref=\"media\" />\n     <xsd:element ref=\"variable\"\
    \ />\n     <xsd:element ref=\"dtmf\" />\n     <xsd:any namespace=\"##other\"\n\
    \      processContents=\"lax\" />\n    </xsd:choice>\n   </xsd:extension>\n  </xsd:complexContent>\n\
    \ </xsd:complexType>\n <xsd:element name=\"seq\" type=\"seqType\" />\n <!-- control\
    \ -->\n <xsd:complexType name=\"controlType\">\n  <xsd:complexContent>\n   <xsd:extension\
    \ base=\"Tcore\">\n <xsd:sequence>\n    <xsd:any namespace=\"##other\" minOccurs=\"\
    0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n\
    \    <xsd:attribute name=\"skipinterval\"\n     type=\"timedesignation.datatype\"\
    \ default=\"6s\" />\n    <xsd:attribute name=\"ffkey\" type=\"dtmfchar.datatype\"\
    \ />\n    <xsd:attribute name=\"rwkey\" type=\"dtmfchar.datatype\" />\n    <xsd:attribute\
    \ name=\"pauseinterval\"\n     type=\"timedesignation.datatype\" default=\"10s\"\
    \ />\n    <xsd:attribute name=\"pausekey\"\n     type=\"dtmfchar.datatype\" />\n\
    \    <xsd:attribute name=\"resumekey\"\n     type=\"dtmfchar.datatype\" />\n \
    \   <xsd:attribute name=\"volumeinterval\"\n     type=\"percentage.datatype\"\
    \ default=\"10%\" />\n    <xsd:attribute name=\"volupkey\"\n     type=\"dtmfchar.datatype\"\
    \ />\n    <xsd:attribute name=\"voldnkey\"\n     type=\"dtmfchar.datatype\" />\n\
    \    <xsd:attribute name=\"speedinterval\"\n     type=\"percentage.datatype\"\
    \ default=\"10%\" />\n    <xsd:attribute name=\"speedupkey\"\n     type=\"dtmfchar.datatype\"\
    \ />\n    <xsd:attribute name=\"speeddnkey\"\n     type=\"dtmfchar.datatype\"\
    \ />\n    <xsd:attribute name=\"gotostartkey\"\n     type=\"dtmfchar.datatype\"\
    \ />\n    <xsd:attribute name=\"gotoendkey\"\n     type=\"dtmfchar.datatype\"\
    \ />\n    <xsd:attribute name=\"external\"\n     type=\"dtmfstring.datatype\"\
    \ />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element\
    \ name=\"control\" type=\"controlType\" />\n <!-- collect -->\n <xsd:complexType\
    \ name=\"collectType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\"\
    >\n    <xsd:sequence>\n     <xsd:element ref=\"grammar\" minOccurs=\"0\"\n   \
    \   maxOccurs=\"1\" />\n     <xsd:any namespace=\"##other\" minOccurs=\"0\"\n\
    \      maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n\
    \    <xsd:attribute name=\"cleardigitbuffer\"\n     type=\"xsd:boolean\" default=\"\
    true\" />\n    <xsd:attribute name=\"timeout\"\n     type=\"timedesignation.datatype\"\
    \ default=\"5s\" />\n    <xsd:attribute name=\"interdigittimeout\"\n     type=\"\
    timedesignation.datatype\" default=\"2s\" />\n    <xsd:attribute name=\"termtimeout\"\
    \n     type=\"timedesignation.datatype\" default=\"0s\" />\n    <xsd:attribute\
    \ name=\"escapekey\"\n     type=\"dtmfchar.datatype\" />\n    <xsd:attribute name=\"\
    termchar\"\n     type=\"dtmfchar.datatype\" default=\"#\" />\n    <xsd:attribute\
    \ name=\"maxdigits\"\n     type=\"xsd:positiveInteger\" default=\"5\" />\n   </xsd:extension>\n\
    \  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element name=\"collect\"\
    \ type=\"collectType\" />\n <!--  grammar -->\n <!--  doesn't extend tCore since\
    \ its content model is mixed -->\n <xsd:complexType name=\"grammarType\" mixed=\"\
    true\">\n  <xsd:sequence>\n   <xsd:any namespace=\"##other\" minOccurs=\"0\"\n\
    \    maxOccurs=\"unbounded\" processContents=\"lax\" />\n  </xsd:sequence>\n \
    \ <xsd:attribute name=\"src\" type=\"xsd:anyURI\" />\n  <xsd:attribute name=\"\
    type\" type=\"mime.datatype\" />\n  <xsd:attribute name=\"fetchtimeout\"\n   type=\"\
    timedesignation.datatype\" default=\"30s\" />\n  <xsd:anyAttribute namespace=\"\
    ##other\" processContents=\"lax\" />\n </xsd:complexType>\n <xsd:element name=\"\
    grammar\" type=\"grammarType\" />\n <!-- record -->\n <xsd:complexType name=\"\
    recordType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n   <xsd:sequence>\n\
    \     <xsd:element ref=\"media\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\"\
    \ />\n     <xsd:any namespace=\"##other\" minOccurs=\"0\"\n      maxOccurs=\"\
    unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute\
    \ name=\"timeout\"\n     type=\"timedesignation.datatype\" default=\"5s\" />\n\
    \    <xsd:attribute name=\"beep\" type=\"xsd:boolean\"\n     default=\"false\"\
    \ />\n    <xsd:attribute name=\"vadinitial\"\n     type=\"xsd:boolean\" default=\"\
    false\" />\n    <xsd:attribute name=\"vadfinal\"\n     type=\"xsd:boolean\" default=\"\
    false\" />\n    <xsd:attribute name=\"dtmfterm\"\n     type=\"xsd:boolean\" default=\"\
    true\" />\n    <xsd:attribute name=\"maxtime\"\n     type=\"timedesignation.datatype\"\
    \ default=\"15s\" />\n    <xsd:attribute name=\"finalsilence\"\n     type=\"timedesignation.datatype\"\
    \ default=\"5s\" />\n    <xsd:attribute name=\"append\" type=\"xsd:boolean\"\n\
    \     default=\"false\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"record\" type=\"recordType\" />\n <!--\n  #####################################################\n\
    \  AUDIT TYPES\n  #####################################################\n -->\n\
    \ <!-- audit -->\n <xsd:complexType name=\"auditType\">\n  <xsd:complexContent>\n\
    \   <xsd:extension base=\"Tcore\">\n <xsd:sequence>\n    <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\"\
    \ />\n    </xsd:sequence>\n   <xsd:attribute name=\"capabilities\"\n     type=\"\
    xsd:boolean\" default=\"true\" />\n   <xsd:attribute name=\"dialogs\"\n     type=\"\
    xsd:boolean\" default=\"true\" />\n      <xsd:attribute name=\"dialogid\"\n  \
    \   type=\"dialogid.datatype\"/>\n   </xsd:extension>\n  </xsd:complexContent>\n\
    \ </xsd:complexType>\n <xsd:element name=\"audit\" type=\"auditType\" />\n <!--\
    \ auditresponse -->\n <xsd:complexType name=\"auditresponseType\">\n  <xsd:complexContent>\n\
    \   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"\
    capabilities\" minOccurs=\"0\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"\
    dialogs\" minOccurs=\"0\"\n      maxOccurs=\"1\" />\n     <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\"\
    \ />\n    </xsd:sequence>\n    <xsd:attribute name=\"status\" type=\"status.datatype\"\
    \n     use=\"required\" />\n    <xsd:attribute name=\"reason\" type=\"xsd:string\"\
    \ />\n    <xsd:attribute name=\"desclang\" type=\"xsd:language\"/>\n   </xsd:extension>\n\
    \  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element name=\"auditresponse\"\
    \ type=\"auditresponseType\" />\n <!-- codec -->\n <xsd:complexType name=\"codecType\"\
    >\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n\
    \     <xsd:element ref=\"subtype\" minOccurs=\"1\"\n      maxOccurs=\"1\" />\n\
    \     <xsd:element ref=\"params\" minOccurs=\"0\"\n      maxOccurs=\"1\" />\n\
    \     <xsd:any namespace=\"##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\"\
    \ processContents=\"lax\" />\n    </xsd:sequence>\n      <xsd:attribute name=\"\
    name\" type=\"xsd:string\"\n     use=\"required\" />\n   </xsd:extension>\n  </xsd:complexContent>\n\
    \ </xsd:complexType>\n <xsd:element name=\"codec\" type=\"codecType\" />\n <!--\
    \ subtype -->\n <xsd:simpleType name=\"subtypeType\">\n  <xsd:restriction base=\"\
    xsd:string\" />\n </xsd:simpleType>\n <xsd:element name=\"subtype\" type=\"subtypeType\"\
    \ />\n <!-- codecs -->\n <xsd:complexType name=\"codecsType\">\n  <xsd:complexContent>\n\
    \   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"\
    codec\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" />\n     <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\"\
    \ />\n    </xsd:sequence>\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"codecs\" type=\"codecsType\" />\n <!-- capabilities -->\n\
    \ <xsd:complexType name=\"capabilitiesType\">\n  <xsd:complexContent>\n   <xsd:extension\
    \ base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"dialoglanguages\"\
    \ minOccurs=\"1\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"grammartypes\"\
    \ minOccurs=\"1\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"recordtypes\"\
    \ minOccurs=\"1\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"prompttypes\"\
    \ minOccurs=\"1\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"variables\"\
    \ minOccurs=\"1\"\n      maxOccurs=\"1\" />\n      <xsd:element ref=\"maxpreparedduration\"\
    \ minOccurs=\"1\"\n      maxOccurs=\"1\" />\n      <xsd:element ref=\"maxrecordduration\"\
    \ minOccurs=\"1\"\n      maxOccurs=\"1\" />\n     <xsd:element ref=\"codecs\"\
    \ minOccurs=\"1\"\n      maxOccurs=\"1\" />\n     <xsd:any namespace=\"##other\"\
    \ minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\" />\n\
    \    </xsd:sequence>\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"capabilities\" type=\"capabilitiesType\" />\n <!-- mimetype\
    \ -->\n <xsd:element name=\"mimetype\" type=\"mime.datatype\" />\n <!-- dialoglanguages\
    \ -->\n <xsd:complexType name=\"dialoglanguagesType\">\n  <xsd:complexContent>\n\
    \   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"\
    mimetype\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" />\n     <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\"\
    \ />\n    </xsd:sequence>\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"dialoglanguages\" type=\"dialoglanguagesType\" />\n <!--\
    \ grammartypes -->\n <xsd:complexType name=\"grammartypesType\">\n  <xsd:complexContent>\n\
    \   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"\
    mimetype\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" />\n     <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\"\
    \ />\n    </xsd:sequence>\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"grammartypes\" type=\"grammartypesType\" />\n <!-- recordtypes\
    \ -->\n <xsd:complexType name=\"recordtypesType\">\n  <xsd:complexContent>\n \
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"\
    mimetype\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" />\n     <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\"\
    \ />\n    </xsd:sequence>\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"recordtypes\" type=\"recordtypesType\" />\n    <!-- prompttypes\
    \ -->\n <xsd:complexType name=\"prompttypesType\">\n  <xsd:complexContent>\n \
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"\
    mimetype\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" />\n     <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\"\
    \ />\n    </xsd:sequence>\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n\
    \ <xsd:element name=\"prompttypes\" type=\"prompttypesType\" />\n"
- title: <!--  variables -->
  contents:
  - "<!--  variables -->\n <xsd:complexType name=\"variablesType\">\n  <xsd:complexContent>\n\
    \   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"\
    variabletype\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" />\n     <xsd:any\
    \ namespace=\"##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"\
    lax\" />\n    </xsd:sequence>\n   </xsd:extension>\n  </xsd:complexContent>\n\
    \ </xsd:complexType>\n <xsd:element name=\"variables\" type=\"variablesType\"\
    \ />\n <xsd:complexType name=\"variabletypeType\">\n  <xsd:complexContent>\n \
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"\
    format\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" />\n     <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\"\
    \ />\n    </xsd:sequence>\n    <xsd:attribute name=\"type\" type=\"xsd:string\"\
    \ use=\"required\" />\n    <xsd:attribute name=\"desc\" type=\"xsd:string\"/>\n\
    \    <xsd:attribute name=\"desclang\" type=\"xsd:language\"/>\n   </xsd:extension>\n\
    \  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element name=\"variabletype\"\
    \ type=\"variabletypeType\" />\n"
- title: <!--  format  -->
  contents:
  - '<!--  format  -->

    '
- title: <!--  doesn't extend tCore since its content model is mixed -->
  contents:
  - "<!--  doesn't extend tCore since its content model is mixed -->\n <xsd:complexType\
    \ name=\"formatType\" mixed=\"true\">\n  <xsd:sequence>\n   <xsd:any namespace=\"\
    ##other\" minOccurs=\"0\"\n    maxOccurs=\"unbounded\" processContents=\"lax\"\
    \ />\n  </xsd:sequence>\n  <xsd:attribute name=\"desc\" type=\"xsd:string\" />\n\
    \  <xsd:attribute name=\"desclang\" type=\"xsd:language\"/>\n  <xsd:anyAttribute\
    \ namespace=\"##other\" processContents=\"lax\" />\n </xsd:complexType>\n <xsd:element\
    \ name=\"format\" type=\"formatType\" />\n"
- title: <!--  maxpreparedduration -->
  contents:
  - "<!--  maxpreparedduration -->\n <xsd:element name=\"maxpreparedduration\"\n"
- title: type="timedesignation.datatype"/>
  contents:
  - 'type="timedesignation.datatype"/>

    '
- title: <!--  maxrecordduration -->
  contents:
  - "<!--  maxrecordduration -->\n <xsd:element name=\"maxrecordduration\"\n"
- title: type="timedesignation.datatype"/>
  contents:
  - "type=\"timedesignation.datatype\"/>\n <!-- dialogs -->\n <xsd:complexType name=\"\
    dialogsType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n  \
    \  <xsd:sequence>\n     <xsd:element ref=\"dialogaudit\" minOccurs=\"0\"\n   \
    \   maxOccurs=\"unbounded\" />\n     <xsd:any namespace=\"##other\" minOccurs=\"\
    0\"\n      maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n\
    \   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element\
    \ name=\"dialogs\" type=\"dialogsType\" />\n <!-- dialogaudit -->\n <xsd:complexType\
    \ name=\"dialogauditType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"\
    Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"codecs\" minOccurs=\"0\"\
    \n      maxOccurs=\"1\" />\n     <xsd:any namespace=\"##other\" minOccurs=\"0\"\
    \n      maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n\
    \    <xsd:attribute name=\"dialogid\"\n     type=\"dialogid.datatype\" use=\"\
    required\" />\n    <xsd:attribute name=\"state\" type=\"state.datatype\"\n   \
    \  use=\"required\" />\n    <xsd:attributeGroup ref=\"fw:framework-attributes\"\
    \ />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element\
    \ name=\"dialogaudit\" type=\"dialogauditType\" />\n <!--\n  ####################################################\n\
    \  DATATYPES\n  ####################################################\n -->\n <xsd:simpleType\
    \ name=\"version.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\">\n   <xsd:enumeration\
    \ value=\"1.0\" />\n  </xsd:restriction>\n </xsd:simpleType>\n <xsd:simpleType\
    \ name=\"mime.datatype\">\n  <xsd:restriction base=\"xsd:string\" />\n </xsd:simpleType>\n\
    \ <xsd:simpleType name=\"dialogid.datatype\">\n  <xsd:restriction base=\"xsd:string\"\
    \ />\n </xsd:simpleType>\n <xsd:simpleType name=\"gender.datatype\">\n  <xsd:restriction\
    \ base=\"xsd:NMTOKEN\">\n   <xsd:enumeration value=\"female\" />\n   <xsd:enumeration\
    \ value=\"male\" />\n  </xsd:restriction>\n </xsd:simpleType>\n <xsd:simpleType\
    \ name=\"state.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\">\n   <xsd:enumeration\
    \ value=\"preparing\" />\n   <xsd:enumeration value=\"prepared\" />\n   <xsd:enumeration\
    \ value=\"starting\" />\n   <xsd:enumeration value=\"started\" />\n  </xsd:restriction>\n\
    \ </xsd:simpleType>\n <xsd:simpleType name=\"status.datatype\">\n  <xsd:restriction\
    \ base=\"xsd:positiveInteger\">\n   <xsd:pattern value=\"[0-9][0-9][0-9]\" />\n\
    \  </xsd:restriction>\n </xsd:simpleType>\n <xsd:simpleType name=\"media.datatype\"\
    >\n  <xsd:restriction base=\"xsd:string\" />\n </xsd:simpleType>\n <xsd:simpleType\
    \ name=\"label.datatype\">\n  <xsd:restriction base=\"xsd:string\" />\n </xsd:simpleType>\n\
    \ <xsd:simpleType name=\"direction.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\"\
    >\n   <xsd:enumeration value=\"sendrecv\" />\n   <xsd:enumeration value=\"sendonly\"\
    \ />\n   <xsd:enumeration value=\"recvonly\" />\n   <xsd:enumeration value=\"\
    inactive\" />\n  </xsd:restriction>\n </xsd:simpleType>\n <xsd:simpleType name=\"\
    timedesignation.datatype\">\n  <xsd:annotation>\n   <xsd:documentation>\n    Time\
    \ designation following Time in CSS2\n   </xsd:documentation>\n  </xsd:annotation>\n\
    \  <xsd:restriction base=\"xsd:string\">\n   <xsd:pattern value=\"(\\+)?([0-9]*\\\
    .)?[0-9]+(ms|s)\" />\n  </xsd:restriction>\n </xsd:simpleType>\n <xsd:simpleType\
    \ name=\"dtmfchar.datatype\">\n  <xsd:annotation>\n   <xsd:documentation>\n  \
    \  DTMF character [0-9#*A-D]\n   </xsd:documentation>\n  </xsd:annotation>\n \
    \ <xsd:restriction base=\"xsd:string\">\n   <xsd:pattern value=\"[0-9#*A-D]\"\
    \ />\n  </xsd:restriction>\n </xsd:simpleType>\n <xsd:simpleType name=\"dtmfstring.datatype\"\
    >\n  <xsd:annotation>\n   <xsd:documentation>\n    DTMF sequence [0-9#*A-D]\n\
    \   </xsd:documentation>\n  </xsd:annotation>\n  <xsd:restriction base=\"xsd:string\"\
    >\n   <xsd:pattern value=\"([0-9#*A-D])+\" />\n  </xsd:restriction>\n </xsd:simpleType>\n\
    \ <xsd:simpleType name=\"percentage.datatype\">\n  <xsd:annotation>\n   <xsd:documentation>\n\
    \    whole integer followed by '%'\n   </xsd:documentation>\n  </xsd:annotation>\n\
    \  <xsd:restriction base=\"xsd:string\">\n   <xsd:pattern value=\"([0-9])+%\"\
    \ />\n  </xsd:restriction>\n </xsd:simpleType>\n <xsd:simpleType name=\"prompt_termmode.datatype\"\
    >\n  <xsd:restriction base=\"xsd:NMTOKEN\">\n   <xsd:enumeration value=\"completed\"\
    \ />\n   <xsd:enumeration value=\"bargein\" />\n   <xsd:enumeration value=\"stopped\"\
    \ />\n  </xsd:restriction>\n </xsd:simpleType>\n <xsd:simpleType name=\"collect_termmode.datatype\"\
    >\n  <xsd:restriction base=\"xsd:NMTOKEN\">\n   <xsd:enumeration value=\"match\"\
    \ />\n   <xsd:enumeration value=\"noinput\" />\n   <xsd:enumeration value=\"nomatch\"\
    \ />\n   <xsd:enumeration value=\"stopped\" />\n  </xsd:restriction>\n </xsd:simpleType>\n\
    \ <xsd:simpleType name=\"record_termmode.datatype\">\n  <xsd:restriction base=\"\
    xsd:NMTOKEN\">\n   <xsd:enumeration value=\"noinput\" />\n   <xsd:enumeration\
    \ value=\"dtmf\" />\n   <xsd:enumeration value=\"maxtime\" />\n   <xsd:enumeration\
    \ value=\"finalsilence\" />\n   <xsd:enumeration value=\"stopped\" />\n  </xsd:restriction>\n\
    \ </xsd:simpleType>\n <xsd:simpleType name=\"matchmode.datatype\">\n  <xsd:restriction\
    \ base=\"xsd:NMTOKEN\">\n   <xsd:enumeration value=\"all\" />\n   <xsd:enumeration\
    \ value=\"collect\" />\n   <xsd:enumeration value=\"control\" />\n  </xsd:restriction>\n\
    \ </xsd:simpleType>\n <xsd:simpleType name=\"endsync.datatype\">\n  <xsd:restriction\
    \ base=\"xsd:NMTOKEN\">\n   <xsd:enumeration value=\"first\" />\n   <xsd:enumeration\
    \ value=\"last\" />\n  </xsd:restriction>\n </xsd:simpleType>\n"
- title: </xsd:schema>
  contents:
  - '</xsd:schema>

    '
- title: 6.  Examples
  contents:
  - "6.  Examples\n   This section provides examples of the IVR Control Package.\n"
- title: 6.1.  AS-MS Dialog Interaction Examples
  contents:
  - "6.1.  AS-MS Dialog Interaction Examples\n   The following example assume a Control\
    \ Channel has been established\n   and synced as described in the Media Control\
    \ Channel Framework\n   [RFC6230].\n   The XML messages are in angled brackets\
    \ (with the root <mscivr>\n   omitted); the REPORT status is in round brackets.\
    \  Other aspects of\n   the protocol are omitted for readability.\n"
- title: 6.1.1.  Starting an IVR Dialog
  contents:
  - "6.1.1.  Starting an IVR Dialog\n   An IVR dialog is started successfully, and\
    \ dialogexit notification\n   <event> is sent from the MS to the AS when the dialog\
    \ exits normally.\n             Application Server (AS)                   Media\
    \ Server (MS)\n                |                                             |\n\
    \                |       (1) CONTROL: <dialogstart>            |\n           \
    \     |  ---------------------------------------->  |\n                |     \
    \                                        |\n                |       (2) 202  \
    \                             |\n                |  <---------------------------------------\
    \   |\n                |                                             |\n     \
    \           |                                             |\n                |\
    \       (3) REPORT: <response status=\"200\"/>  |\n                |         \
    \          (terminate)               |\n                |  <----------------------------------------\
    \  |\n                |                                             |\n      \
    \          |       (4) 200                               |\n                |\
    \  ---------------------------------------->  |\n                |           \
    \                                  |\n                |       (5) CONTROL: <event\
    \ ... />            |\n                |                                     \
    \        |\n                |  <----------------------------------------  |\n\
    \                |                                             |\n           \
    \     |       (6) 200                               |\n                |  ---------------------------------------->\
    \  |\n                |                                             |\n"
- title: 6.1.2.  IVR Dialog Fails to Start
  contents:
  - "6.1.2.  IVR Dialog Fails to Start\n   An IVR dialog fails to start due to an\
    \ unknown dialog language.  The\n   <response> is reported in a framework 200\
    \ message.\n             Application Server (AS)                   Media Server\
    \ (MS)\n                |                                             |\n    \
    \            |       (1) CONTROL: <dialogstart>            |\n               \
    \ |  ---------------------------------------->  |\n                |         \
    \                                    |\n                |       (2) 200: <response\
    \ status=\"421\"/>     |\n                |  <----------------------------------------\
    \  |\n                |                                             |\n"
- title: 6.1.3.  Preparing and Starting an IVR Dialog
  contents:
  - "6.1.3.  Preparing and Starting an IVR Dialog\n   An IVR dialog is prepared and\
    \ started successfully, and then the\n   dialog exits normally.\n            \
    \ Application Server (AS)                   Media Server (MS)\n              \
    \  |                                             |\n                |       (1)\
    \ CONTROL: <dialogprepare>          |\n                |  ---------------------------------------->\
    \  |\n                |                                             |\n      \
    \          |       (2) 202                               |\n                |\
    \  <---------------------------------------   |\n                |           \
    \                                  |\n                |       (3) REPORT: <response\
    \ status=\"200\"/>  |\n                |                   (terminate)       \
    \        |\n                |  <----------------------------------------  |\n\
    \                |                                             |\n           \
    \     |       (4) 200                               |\n                |  ---------------------------------------->\
    \  |\n                |                                             |\n      \
    \          |       (5) CONTROL: <dialogstart>            |\n                |\
    \  ---------------------------------------->  |\n                |           \
    \                                  |\n                |       (6) 202        \
    \                       |\n                |  <---------------------------------------\
    \   |\n                |                                             |\n     \
    \           |       (7) REPORT: <response status=\"200\"/>  |\n              \
    \  |                   (terminate)               |\n                |  <----------------------------------------\
    \  |\n                |                                             |\n      \
    \          |       (8) 200                               |\n                |\
    \  ---------------------------------------->  |\n                |           \
    \                                  |\n                |       (9) CONTROL: <event\
    \ .../>             |\n                |  <----------------------------------------\
    \  |\n                |                                             |\n      \
    \          |       (10) 200                              |\n                |\
    \  ---------------------------------------->  |\n                |           \
    \                                  |\n"
- title: 6.1.4.  Terminating a Dialog
  contents:
  - "6.1.4.  Terminating a Dialog\n   An IVR dialog is started successfully, and then\
    \ terminated by the AS.\n   The dialogexit event is sent to the AS when the dialog\
    \ exits.\n             Application Server (AS)                   Media Server\
    \ (MS)\n                |                                             |\n    \
    \            |       (1) CONTROL: <dialogstart>            |\n               \
    \ |  ---------------------------------------->  |\n                |         \
    \                                    |\n                |       (2) 202      \
    \                         |\n                |  <---------------------------------------\
    \   |\n                |                                             |\n     \
    \           |       (3) REPORT: <response status=\"200\"/>  |\n              \
    \  |                   (terminate)               |\n                |  <----------------------------------------\
    \  |\n                |                                             |\n      \
    \          |       (4) 200                               |\n                |\
    \  ---------------------------------------->  |\n                |           \
    \                                  |\n                |       (5) CONTROL: <dialogterminate>\
    \        |\n                |  ---------------------------------------->  |\n\
    \                |                                             |\n           \
    \     |       (6) 200: <response status=\"200\"/>     |\n                |  <----------------------------------------\
    \  |\n                |                                             |\n      \
    \          |       (7) CONTROL: <event .../>             |\n                |\
    \  <----------------------------------------  |\n                |           \
    \                                  |\n                |       (8) 200        \
    \                       |\n                |  ---------------------------------------->\
    \  |\n                |                                             |\n   Note\
    \ that in (6) the <response> payload to the <dialogterminate/>\n   request is\
    \ carried on a framework 200 response since it could\n   complete the requested\
    \ operation before the transaction timeout.\n"
- title: 6.2.  IVR Dialog Examples
  contents:
  - "6.2.  IVR Dialog Examples\n   The following examples show how <dialog> is used\
    \ with\n   <dialogprepare>, <dialogstart>, and <event> elements to play prompts,\n\
    \   set runtime controls, collect DTMF input, and record user input.\n   The examples\
    \ do not specify all messages between the AS and MS.\n"
- title: 6.2.1.  Playing Announcements
  contents:
  - "6.2.1.  Playing Announcements\n   This example prepares an announcement composed\
    \ of two prompts where\n   the dialog repeatCount is set to 2.\n   <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n   <dialogprepare>\n      <dialog\
    \ repeatCount=\"2\">\n       <prompt>\n         <media loc=\"http://www.example.com/media/Number_09.wav\"\
    />\n         <media loc=\"http://www.example.com/media/Number_11.wav\"/>\n   \
    \    </prompt>\n      </dialog>\n   </dialogprepare>\n   </mscivr>\n   If the\
    \ dialog is prepared successfully, a <response> is returned with\n   status 200\
    \ and a dialog identifier assigned by the MS:\n   <mscivr version=\"1.0\" xmlns=\"\
    urn:ietf:params:xml:ns:msc-ivr\">\n     <response status=\"200\" dialogid=\"vxi78\"\
    />\n   </mscivr>\n   The prepared dialog is then started on a conference playing\
    \ the\n   prompts twice:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <dialogstart prepareddialogid=\"vxi78\" conferenceid=\"conference11\"/>\n\
    \   </mscivr>\n   In the case of a successful dialog, the output is provided in\n\
    \   <event>; for example:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <event dialogid=\"vxi78\">\n       <dialogexit status=\"1\">\n        \
    \  <promptinfo termmode=\"completed\" duration=\"24000\"/>\n       </dialogexit>\n\
    \    </event>\n   </mscivr>\n"
- title: 6.2.2.  Prompt and Collect
  contents:
  - "6.2.2.  Prompt and Collect\n   In this example, a prompt is played and then the\
    \ MS waits for 30s for\n   a two digit sequence:\n   <mscivr version=\"1.0\" xmlns=\"\
    urn:ietf:params:xml:ns:msc-ivr\">\n    <dialogstart connectionid=\"7HDY839:HJKSkyHS~HUwkuh7ns\"\
    >\n    <dialog>\n     <prompt>\n      <media loc=\"http://www.example.com/prompt1.wav\"\
    />\n     </prompt>\n     <collect timeout=\"30s\" maxdigits=\"2\"/>\n    </dialog>\n\
    \    </dialogstart>\n   </mscivr>\n   If no user input is collected within 30s,\
    \ then the following\n   notification event would be returned:\n   <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n    <event dialogid=\"vxi81\"\
    >\n       <dialogexit status=\"1\" >\n          <promptinfo termmode=\"completed\"\
    \ duration=\"4000\"/>\n          <collectinfo termmode=\"noinput\"/>\n       </dialogexit>\n\
    \    </event>\n   </mscivr>\n   The collect operation can be specified without\
    \ a prompt.  Here the MS\n   just waits for DTMF input from the user (the maxdigits\
    \ attribute of\n   <collect> defaults to 5):\n   <mscivr version=\"1.0\" xmlns=\"\
    urn:ietf:params:xml:ns:msc-ivr\">\n    <dialogstart connectionid=\"7HDY839:HJKSkyHS~HUwkuh7ns\"\
    >\n     <dialog>\n      <collect/>\n     </dialog>\n    </dialogstart>\n   </mscivr>\n\
    \   If the dialog is successful, then dialogexit <event> contains the\n   dtmf\
    \ collected in its result parameter:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <event dialogid=\"vxi80\">\n       <dialogexit status=\"1\">\n        \
    \  <collectinfo dtmf=\"12345\" termmode=\"match\"/>\n       </dialogexit>\n  \
    \  </event>\n   </mscivr>\n   And finally, in this example, one of the input parameters\
    \ is invalid:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n   <dialogstart connectionid=\"7HDY839:HJKSkyHS~HUwkuh7ns\">\n    <dialog repeatCount=\"\
    two\">\n      <prompt>\n        <media loc=\"http://www.example.com/prompt1.wav\"\
    />\n      </prompt>\n      <collect cleardigitbuffer=\"true\"\n      timeout=\"\
    4s\" interdigittimeout=\"2s\"\n      termtimeout=\"0s\" maxdigits=\"2\"/>\n  \
    \  </dialog>\n   </dialogstart>\n   </mscivr>\n   The error is reported in the\
    \ response:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <response status=\"400\" dialogid=\"vxi82\"\n     reason=\"repeatCount\
    \ attribute value invalid: two\"/>\n   </mscivr>\n"
- title: 6.2.3.  Prompt and Record
  contents:
  - "6.2.3.  Prompt and Record\n   In this example, the user is prompted, then their\
    \ input is recorded\n   for a maximum of 30 seconds.\n   <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n   <dialogstart connectionid=\"7HDY839:HJKSkyHS~HUwkuh7ns\"\
    >\n       <dialog>\n         <prompt>\n          <media loc=\"http://www.example.com/media/sayname.wav\"\
    />\n         </prompt>\n         <record dtmfterm=\"false\" maxtime=\"30s\" beep=\"\
    true\"/>\n       </dialog>\n   </dialogstart>\n   </mscivr>\n   If successful\
    \ and the recording is terminated by DTMF, the following\n   is returned in a\
    \ dialogexit <event>:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <event dialogid=\"vxi83\">\n     <dialogexit status=\"1\">\n      <recordinfo\
    \ termmode=\"dtmf\">\n       <mediainfo type=\"audio/x-wav\"\n         loc=\"\
    http://www.example.com/recording1.wav\"/>\n      </recordinfo>\n     </dialogexit>\n\
    \    </event>\n   </mscivr>\n"
- title: 6.2.4.  Runtime Controls
  contents:
  - "6.2.4.  Runtime Controls\n   In this example, a prompt is played with the collect\
    \ operation and\n   runtime controls activated.\n   <mscivr version=\"1.0\" xmlns=\"\
    urn:ietf:params:xml:ns:msc-ivr\">\n    <dialogstart connectionid=\"7HDY839:HJKSkyHS~HUwkuh7ns\"\
    >\n    <dialog>\n     <prompt bargein=\"true\">\n      <media loc=\"http://www.example.com/prompt1.wav\"\
    />\n     </prompt>\n     <control ffkey=\"5\" rwkey=\"6\" speedupkey=\"3\"\n \
    \             speeddnkey=\"4\"/>\n     <collect maxdigits=\"2\"/>\n    </dialog>\n\
    \    </dialogstart>\n   </mscivr>\n   Once the dialog is active, the user can\
    \ press keys 3, 4, 5, and 6 to\n   execute runtime controls on the prompt queue.\
    \  The keys do not cause\n   bargein to occur.  If the user presses any other\
    \ key, then the prompt\n   is interrupted and DTMF collect begins.  Note that\
    \ runtime controls\n   are not active during the collect operation.\n   When the\
    \ dialog is completed successfully, then both control and\n   collect information\
    \ is reported.\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <event dialogid=\"vxi81\">\n       <dialogexit status=\"1\">\n        \
    \  <promptinfo termmode=\"bargein\"/>\n          <controlinfo>\n           <controlmatch\
    \ dtmf=\"4\" timestamp=\"2008-05-12T12:13:14Z\"/>\n           <controlmatch dtmf=\"\
    3\" timestamp=\"2008-05-12T12:13:15Z\"/>\n           <controlmatch dtmf=\"5\"\
    \ timestamp=\"2008-05-12T12:13:16Z\"/>\n          </controlinfo>\n          <collectinfo\
    \ termmode=\"match\" dtmf=\"14\"/>\n       </dialogexit>\n    </event>\n   </mscivr>\n"
- title: 6.2.5.  Subscriptions and Notifications
  contents:
  - "6.2.5.  Subscriptions and Notifications\n   In this example, a looped dialog\
    \ is started with subscription for\n   notifications each time the user input\
    \ matches the collect grammar:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <dialogstart connectionid=\"7HDY839:HJKSkyHS\">\n     <dialog repeatCount=\"\
    0\">\n      <collect maxdigits=\"2\"/>\n     </dialog>\n     <subscribe>\n   \
    \   <dtmfsub matchmode=\"collect\"/>\n     </subscribe>\n    </dialogstart>\n\
    \   </mscivr>\n   Each time the user input the DTMF matching the grammar, the\
    \ following\n   notification event would be sent:\n   <mscivr version=\"1.0\"\
    \ xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n    <event dialogid=\"vxi81\">\n\
    \       <dtmfnotify matchmode=\"collect\" dtmf=\"12\"\n        timestamp=\"2008-05-12T12:13:14Z\"\
    />\n    </event>\n   </mscivr>\n   If no user input was provided, or the input\
    \ did not match the\n   grammar, the dialog would continue to loop until terminated\
    \ (or an\n   error occurred).\n"
- title: 6.2.6.  Dialog Repetition until DTMF Collection Complete
  contents:
  - "6.2.6.  Dialog Repetition until DTMF Collection Complete\n   This example is\
    \ a prompt and collect dialog to collect the PIN from\n   the user.  The repeatUntilComplete\
    \ attribute in the <dialog> is set\n   to true in this case so that when the grammar\
    \ collection is complete,\n   the MS automatically terminates the dialog repeat\
    \ cycle and reports\n   the results in a <dialogexit> event.\n      <mscivr version=\"\
    1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n       <dialogstart connectionid=\"\
    7HDY839:HJKSkyHS\">\n        <dialog repeatCount=\"3\" repeatUntilComplete=\"\
    true\">\n         <prompt bargein=\"true\">\n           <media loc=\"http://example.com/please_enter_your_pin.vox\"\
    />\n         </prompt>\n         <collect maxdigits=\"4\"/>\n        </dialog>\n\
    \       </dialogstart>\n      </mscivr>\n   If the user barges in on the prompt\
    \ and <collect> receives DTMF input\n   matching the grammar, the dialog cycle\
    \ is considered complete and the\n   MS returns the following:\n      <mscivr\
    \ version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n       <event dialogid=\"\
    vxi81\">\n         <dialogexit status=\"1\">\n           <promptinfo duration=\"\
    3654\" termmode=\"bargein\"/>\n           <collectinfo dtmf=\"1234\" termmode=\"\
    match\"/>\n         </dialogexit>\n       </event>\n      </mscivr>\n   If no\
    \ user input was provided, or the input did not match the\n   grammar, the dialog\
    \ would loop for a maximum of 3 times.\n"
- title: 6.3.  Other Dialog Languages
  contents:
  - "6.3.  Other Dialog Languages\n   The following example requests that a VoiceXML\
    \ dialog is started:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <dialogstart dialogid=\"d2\"\n                 connectionid=\"7HDY839:HJKSkyHS\"\
    \n                 type=\"application/voicexml+xml\"\n                 src=\"\
    http://www.example.com/mydialog.vxml\"\n                 fetchtimeout=\"15s\"\
    >\n     <params>\n      <param name=\"prompt1\">nfs://nas01/media1.3gp</param>\n\
    \      <param name=\"prompt2\">nfs://nas01/media2.3gp</param>\n     </params>\n\
    \    </dialogstart>\n   </mscivr>\n   If the MS does not support this dialog language,\
    \ then the response\n   would have the status code 421 (Section 4.5).  However,\
    \ if it does\n   support the VoiceXML dialog language, it would respond with a\
    \ 200\n   status, activate the VoiceXML dialog, and make the <params> available\n\
    \   to the VoiceXML script as described in Section 9.\n   When the VoiceXML dialog\
    \ exits, exit namelist parameters are\n   specified using <params> in the dialogexit\
    \ event:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <event dialogid=\"d2\">\n      <dialogexit status=\"1\">\n       <params>\n\
    \        <param name=\"username\">peter</param>\n        <param name=\"pin\">1234</param>\n\
    \       </params>\n      </dialogexit>\n     </event>\n   </mscivr>\n"
- title: 6.4.  Foreign Namespace Attributes and Elements
  contents:
  - "6.4.  Foreign Namespace Attributes and Elements\n   An MS can support attributes\
    \ and elements from foreign namespaces\n   within the <mscivr> element.  For example,\
    \ the MS could support a\n   <listen> element (in a foreign namespace) for speech\
    \ recognition by\n   analogy to how <collect> supports DTMF collection.\n   In\
    \ the following example, a prompt and collect request is extended\n   with a <listen>\
    \ element:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    \n    xmlns:ex=\"http://www.example.com/mediactrl/extensions/1\">\n    <dialogstart\
    \ connectionid=\"7HDY839:HJKSkyHS~HUwkuh7ns\">\n    <dialog>\n     <prompt>\n\
    \      <media loc=\"http://www.example.com/prompt1.wav\"/>\n     </prompt>\n \
    \    <collect timeout=\"30s\" maxdigits=\"4\"/>\n     <ex:listen maxtimeout=\"\
    30s\" >\n       <ex:grammar src=\"http://example.org/pin.grxml\"/>\n     </ex:listen>\n\
    \    </dialog>\n    </dialogstart>\n   </mscivr>\n   In the <mscivr> root element,\
    \ the xmlns:ex attribute declares that\n   \"ex\" is associated with the foreign\
    \ namespace URI\n   \"http://www.example.com/mediactrl/extensions/1\".  The <ex:listen>,\n\
    \   its attributes, and child elements are associated with this\n   namespace.\
    \  This <listen> could be defined so that it activates an\n   SRGS grammar and\
    \ listens for user input matching the grammar in a\n   similar manner to DTMF\
    \ collection.\n   If an MS receives this request but does not support the <listen>\n\
    \   element, then it would send a 431 response:\n   <mscivr version=\"1.0\" xmlns=\"\
    urn:ietf:params:xml:ns:msc-ivr\">\n    <response status=\"431\" dialogid=\"d560\"\
    \n     reason=\"unsupported foreign listen element\"/>\n   </mscivr>\n   If the\
    \ MS does support this foreign element, it would send a 200\n   response and start\
    \ the dialog with speech recognition.  When the\n   dialog exits, it provides\
    \ information about the <listen> execution\n   within <dialogexit>, again using\
    \ elements in a foreign namespace such\n   as <listeninfo> below:\n   <mscivr\
    \ version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\n    xmlns:ex=\"http://www.example.com/mediactrl/extensions/1\"\
    >\n    <event dialogid=\"d560\">\n      <dialogexit status=\"1\">\n       <ex:listeninfo\
    \ speech=\"1 2 3 4\" termmode=\"match\"/>\n      </dialogexit>\n     </event>\n\
    \   </mscivr>\n   Note that in reply the AS sends a Control Framework 200 response\
    \ even\n   though the notification event contains an element in a foreign\n  \
    \ namespace that it might not understand.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   As this Control Package processes XML markup,\
    \ implementations MUST\n   address the security considerations of [RFC3023].\n\
    \   Implementations of this Control Package MUST address security,\n   confidentiality,\
    \ and integrity of messages transported over the\n   Control Channel as described\
    \ in Section 12 of \"Media Control Channel\n   Framework\" [RFC6230], including\
    \ Transport Level Protection, Control\n   Channel Policy Management, and Session\
    \ Establishment.  In addition,\n   implementations MUST address security, confidentiality,\
    \ and integrity\n   of User Agent sessions with the MS, both in terms of SIP signaling\n\
    \   and associated RTP media flow; see [RFC6230] for further details on\n   this\
    \ topic.  Finally, implementations MUST address security,\n   confidentiality,\
    \ and integrity of sessions where, following a URI\n   scheme, an MS uploads recordings\
    \ or retrieves documents and resources\n   (e.g., fetching a grammar document\
    \ from a web server using HTTPS).\n   Adequate transport protection and authentication\
    \ are critical,\n   especially when the implementation is deployed in open networks.\
    \  If\n   the implementation fails to correctly address these issues, it risks\n\
    \   exposure to malicious attacks, including (but not limited to):\n   Denial\
    \ of Service:  An attacker could insert a request message into\n      the transport\
    \ stream causing specific dialogs on the MS to be\n      terminated immediately.\
    \  For example, <dialogterminate\n      dialogid=\"XXXX\" immediate=\"true\">,\
    \ where the value of \"XXXX\" could\n      be guessed or discovered by auditing\
    \ active dialogs on the MS\n      using an <audit> request.  Likewise, an attacker\
    \ could impersonate\n      the MS and insert error responses into the transport\
    \ stream so\n      denying the AS access to package capabilities.\n   Resource\
    \ Exhaustion:  An attacker could insert into the Control\n      Channel new request\
    \ messages (or modify existing ones) with, for\n      instance, <dialogprepare>\
    \ elements with a very long fetchtimeout\n      attribute and a bogus source URL.\
    \  At some point, this will\n      exhaust the number of connections that the\
    \ MS is able to make.\n   Phishing:  An attacker with access to the Control Channel\
    \ could\n      modify the \"loc\" attribute of the <media> element in a dialog\
    \ to\n      point to some other audio file that had different information from\n\
    \      the original.  This modified file could include a different phone\n   \
    \   number for people to call if they want more information or need to\n     \
    \ provide additional information (such as governmental, corporate,\n      or financial\
    \ information).\n   Data Theft:  An attacker could modify a <record> element in\
    \ the\n      Control Channel so as to add a new recording location:\n   <mscivr\
    \ version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n    <dialogstart>\n\
    \     <dialog>\n      <record>\n         <media type=\"audio/x-wav\" loc=\"(Good\
    \ URI)\"/>\n         <media type=\"audio/x-wav\" loc=\"(Attacker's URI)\"/>\n\
    \      </record>\n     </dialog>\n    </dialogstart>\n   </mscivr>\n   The recorded\
    \ data would be uploaded to two locations indicated by the\n   \"{Good URI}\"\
    \ and the \"{Attacker's URI}\".  This allows the attacker to\n   steal the recorded\
    \ audio (which could include sensitive or\n   confidential information) without\
    \ the originator of the request\n   necessarily being aware of the theft.\n  \
    \ The Media Control Channel Framework permits additional security\n   policy management,\
    \ including resource access and Control Channel\n   usage, to be specified at\
    \ the Control Package level beyond that\n   specified for the Media Control Channel\
    \ Framework (see Section 12.3\n   of [RFC6230]).\n   Since creation of IVR dialogs\
    \ is associated with media processing\n   resources (e.g., DTMF detectors, media\
    \ playback and recording, etc.)\n   on the MS, the security policy for this Control\
    \ Package needs to\n   address how such dialogs are securely managed across more\
    \ than one\n   Control Channel.  Such a security policy is only useful for secure,\n\
    \   confidential, and integrity-protected channels.  The identity of\n   Control\
    \ Channels is determined by the channel identifier, i.e., the\n   value of the\
    \ cfw-id attribute in the SDP and 'Dialog-ID' header in\n   the channel protocol\
    \ (see [RFC6230]).  Channels are the same if they\n   have the same identifier;\
    \ otherwise, they are different.  This\n   Control Package imposes the following\
    \ additional security policies:\n   Responses:  The MS MUST only send a response\
    \ to a dialog management\n      or audit request using the same Control Channel\
    \ as the one used to\n      send the request.\n   Notifications:  The MS MUST\
    \ only send notification events for a\n      dialog using the same Control Channel\
    \ as it received the request\n      creating the dialog.\n   Auditing:  The MS\
    \ MUST only provide audit information about dialogs\n      that have been created\
    \ on the same Control Channel as the one upon\n      the <audit> request is sent.\n\
    \   Rejection:  The MS SHOULD reject requests to audit or manipulate an\n    \
    \  existing dialog on the MS if the channel is not the same as the\n      one\
    \ used when the dialog was created.  The MS rejects a request by\n      sending\
    \ a Control Framework 403 response (see Section 7.4 and\n      Section 12.3 of\
    \ [RFC6230]).  For example, if a channel with\n      identifier 'cfw1234' has\
    \ been used to send a request to create a\n      particular dialog and the MS\
    \ receives on channel 'cfw98969' a\n      request to audit or terminate the dialog,\
    \ then the MS sends a 403\n      framework response.\n   There can be valid reasons\
    \ why an implementation does not reject an\n   audit or dialog manipulation request\
    \ on a different channel from the\n   one that created the dialog.  For example,\
    \ a system administrator\n   might require a separate channel to audit dialog\
    \ resources created by\n   system users and to terminate dialogs consuming excessive\
    \ system\n   resources.  Alternatively, a system monitor or resource broker might\n\
    \   require a separate channel to audit dialogs managed by this package\n   on\
    \ an MS.  However, the full implications need to be understood by\n   the implementation\
    \ and carefully weighted before accepting these\n   reasons as valid.  If the\
    \ reasons are not valid in their particular\n   circumstances, the MS rejects\
    \ such requests.\n   There can also be valid reasons for 'channel handover' including\
    \ high\n   availability support or where one AS needs to take over management\
    \ of\n   dialogs after the AS that created them has failed.  This could be\n \
    \  achieved by the Control Channels using the same channel identifier,\n   one\
    \ after another.  For example, assume a channel is created with the\n   identifier\
    \ 'cfw1234' and the channel is used to create dialogs on the\n   MS.  This channel\
    \ (and associated SIP dialog) then terminates due to\n   a failure on the AS.\
    \  As permitted by the Control Framework, the\n   channel identifier 'cfw1234'\
    \ could then be reused so that another\n   channel is created with the same identifier\
    \ 'cfw1234', allowing it to\n   'take over' management of the dialogs on the MS.\
    \  Again, the\n   implementation needs to understand the full implications and\n\
    \   carefully weight them before accepting these reasons as valid.  If\n   the\
    \ reasons are not valid for their particular circumstances, the MS\n   uses the\
    \ appropriate SIP mechanisms to prevent session establishment\n   when the same\
    \ channel identifier is used in setting up another\n   Control Channel (see Section\
    \ 4 of [RFC6230]).\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   IANA has registered a new Media Control Channel Framework\
    \ Package, a\n   new XML namespace, a new XML schema, and a new MIME type.\n \
    \  IANA has further created a new registry for IVR prompt variable\n   types.\n"
- title: 8.1.  Control Package Registration
  contents:
  - "8.1.  Control Package Registration\n   This section registers a new Media Control\
    \ Channel Framework package,\n   per the instructions in Section 13.1 of [RFC6230].\n\
    \      Package Name: msc-ivr/1.0\n      Published Specification(s): RFC 6231\n\
    \      Person & email address to contact for further information:\n         IETF\
    \ MEDIACTRL working group (mediactrl@ietf.org),\n         Scott McGlashan (smcg.stds01@mcglashan.org).\n"
- title: 8.2.  URN Sub-Namespace Registration
  contents:
  - "8.2.  URN Sub-Namespace Registration\n   This section registers a new XML namespace,\n\
    \   \"urn:ietf:params:xml:ns:msc-ivr\", per the guidelines in RFC 3688\n   [RFC3688].\n\
    \  URI: urn:ietf:params:xml:ns:msc-ivr\n  Registrant Contact: IETF MEDIACTRL working\
    \ group (mediactrl@ietf.org),\n     Scott McGlashan (smcg.stds01@mcglashan.org).\n\
    \  XML:\n     BEGIN\n     <?xml version=\"1.0\"?>\n     <!DOCTYPE html PUBLIC\
    \ \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n         \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\
    >\n      <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n     \
    \  <head>\n        <title>Media Control Channel Framework IVR\n              \
    \ Package attributes</title>\n       </head>\n       <body>\n        <h1>Namespace\
    \ for Media Control Channel\n            Framework IVR Package attributes</h1>\n\
    \        <h2>urn:ietf:params:xml:ns:msc-ivr</h2>\n          <p>See <a href=\"\
    http://www.rfc-editor.org/rfc/rfc6231.txt\">\n          RFC 6231</a>.</p>\n  \
    \     </body>\n      </html>\n     END\n"
- title: 8.3.  XML Schema Registration
  contents:
  - "8.3.  XML Schema Registration\n   This section registers an XML schema as per\
    \ the guidelines in RFC\n   3688 [RFC3688].\n  URI:  urn:ietf:params:xml:ns:msc-ivr\n\
    \  Registrant Contact: IETF MEDIACTRL working group (mediactrl@ietf.org),\n  \
    \   Scott McGlashan (smcg.stds01@mcglashan.org).\n  Schema:  The XML for this\
    \ schema can be found in Section 5 of this\n     document.\n"
- title: 8.4.  MIME Media Type Registration for application/msc-ivr+xml
  contents:
  - "8.4.  MIME Media Type Registration for application/msc-ivr+xml\n   This section\
    \ registers the application/msc-ivr+xml MIME type.\n      Type name:  application\n\
    \      Subtype name:  msc-ivr+xml\n      Required parameters:  (none)\n      Optional\
    \ parameters:  charset\n         Indicates the character encoding of enclosed\
    \ XML.  Default is\n         UTF-8.\n      Encoding considerations:  Uses XML,\
    \ which can employ 8-bit\n         characters, depending on the character encoding\
    \ used.  See RFC\n         3023 [RFC3023], Section 3.2.\n      Security considerations:\
    \  No known security considerations outside\n         of those provided by the\
    \ Media Control Channel Framework IVR\n         Package.\n      Interoperability\
    \ considerations:  This content type provides\n         constructs for the Media\
    \ Control Channel Framework IVR package.\n      Published specification:  RFC\
    \ 6231\n      Applications that use this media type:  Implementations of\n   \
    \      the Media Control Channel Framework IVR package.\n      Additional information:\n\
    \         Magic number(s):  (none)\n         File extension(s):  (none)\n    \
    \     Macintosh file type code(s):  (none)\n      Person & email address to contact\
    \ for further information:\n         Scott McGlashan <smcg.stds01@mcglashan.org>\n\
    \      Intended usage:  LIMITED USE\n      Author/Change controller:  The IETF\n\
    \      Other information:  None.\n"
- title: 8.5.  IVR Prompt Variable Type Registration Information
  contents:
  - "8.5.  IVR Prompt Variable Type Registration Information\n   This specification\
    \ establishes an IVR Prompt Variable Type registry\n   for Control Packages and\
    \ initiates its population as follows.  New\n   entries in this registry must\
    \ be published in an RFC (either as an\n   IETF submission or RFC Editor submission),\
    \ using the IANA policy\n   [RFC5226] \"RFC Required\".\n   Variable Type    \
    \  Control Package  Reference\n   -------------      ---------------  ---------\n\
    \       date            msc-ivr/1.0     [RFC6231]\n       time            msc-ivr/1.0\
    \     [RFC6231]\n       digits          msc-ivr/1.0     [RFC6231]\n   The following\
    \ information MUST be provided in an RFC in order to\n   register a new prompt\
    \ variable type:\n   Variable Type:  The value for the <variable> type attribute\n\
    \      (Section 4.3.1.1.1).  The RFC MUST specify permitted values (if\n     \
    \ any) for the format attribute of <variable> and how the value\n      attribute\
    \ is rendered for different values of the format\n      attribute.  The RFC MUST\
    \ NOT weaken but MAY strengthen the valid\n      values of <variable> attributes\
    \ defined in Section 4.3.1.1.1 of\n      this specification.\n   Reference:  The\
    \ RFC number in which the variable type is registered.\n   Control Package:  The\
    \ Control Package associated with the IVR\n      variable type.\n   Person & address\
    \ to contact for further information:\n"
- title: 9.  Using VoiceXML as a Dialog Language
  contents:
  - "9.  Using VoiceXML as a Dialog Language\n   The IVR Control Package allows, but\
    \ does not require, the MS to\n   support other dialog languages by referencing\
    \ an external dialog\n   document.  This section provides MS implementations that\
    \ support the\n   VoiceXML dialog language ([VXML20], [VXML21], [VXML30]) with\n\
    \   additional details about using these dialogs in this package.  This\n   section\
    \ is normative for an MS that supports the VoiceXML dialog\n   language.\n   This\
    \ section covers preparing (Section 9.1), starting (Section 9.2),\n   terminating\
    \ (Section 9.3), and exiting (Section 9.4) VoiceXML dialogs\n   as well as handling\
    \ VoiceXML call transfer (Section 9.5).\n"
- title: 9.1.  Preparing a VoiceXML Dialog
  contents:
  - "9.1.  Preparing a VoiceXML Dialog\n   A VoiceXML dialog is prepared by sending\
    \ the MS a request containing\n   a <dialogprepare> element (Section 4.2.1). \
    \ The type attribute is set\n   to \"application/voicexml+xml\" and the src attribute\
    \ to the URI of the\n   VoiceXML document that is to be prepared by the MS.  For\
    \ example:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <dialogprepare type=\"application/voicexml+xml\"\n                   src=\"\
    http://www.example.com/mydialog.vxml\"\n                   fetchtimeout=\"15s\"\
    />\n   </mscivr>\n   The VoiceXML dialog environment uses the <dialogprepare>\
    \ request as\n   an opportunity to fetch and validate the initial document indicated\n\
    \   by the src attribute along with any resources referenced in the\n   VoiceXML\
    \ document marked as prefetchable.  The maxage and maxstale\n   attributes, if\
    \ specified, control how the initial VoiceXML document\n   is fetched using HTTP\
    \ (see [RFC2616]).  Note that the fetchtimeout\n   attribute is not defined in\
    \ VoiceXML for an initial document, but the\n   MS MUST support this attribute\
    \ in its VoiceXML environment.\n   If a <params> child element of <dialogprepare>\
    \ is specified, then the\n   MS MUST map the parameter information into a VoiceXML\
    \ session\n   variable object as described in Section 9.2.3.\n   The success or\
    \ failure of the VoiceXML document preparation is\n   reported in the MS response.\
    \  For example, if the VoiceXML document\n   cannot be retrieved, then a 409 error\
    \ response is returned.  If the\n   document is syntactically invalid according\
    \ to VoiceXML, then a 400\n   response is returned.  If successful, the response\
    \ includes a\n   dialogid attribute whose value the AS can use in <dialogstart>\n\
    \   element to start the prepared dialog.\n"
- title: 9.2.  Starting a VoiceXML Dialog
  contents:
  - "9.2.  Starting a VoiceXML Dialog\n   A VoiceXML dialog is started by sending\
    \ the MS a request containing a\n   <dialogstart> element (Section 4.2.2).  If\
    \ a VoiceXML dialog has\n   already been prepared using <dialogprepare>, then\
    \ the MS starts the\n   dialog indicated by the prepareddialogid attribute.  Otherwise,\
    \ a new\n   VoiceXML dialog can be started by setting the type attribute to\n\
    \   \"application/voicexml+xml\" and the src attribute to the URI of the\n   VoiceXML\
    \ document.  For example:\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <dialogstart connectionid=\"ssd3r3:sds345b\"\n                 type=\"\
    application/voicexml+xml\"\n                 src=\"http://www.example.com/mydialog.vxml\"\
    \n                 fetchtimeout=\"15s\"/>\n   </mscivr>\n   The maxage and maxstale\
    \ attributes, if specified, control how the\n   initial VoiceXML document is fetched\
    \ using HTTP (see [RFC2616]).\n   Note that the fetchtimeout attribute is not\
    \ defined in VoiceXML for\n   an initial document, but the MS MUST support this\
    \ attribute in its\n   VoiceXML environment.  Note also that support for <dtmfsub>\n\
    \   subscriptions (Section 4.2.2.1.1) and their associated dialog\n   notification\
    \ events is not defined in VoiceXML.  If such a\n   subscription is specified\
    \ in a <dialogstart> request, then the MS\n   sends a 439 error response (see\
    \ Section 4.5).\n   The success or failure of starting a VoiceXML dialog is reported\
    \ in\n   the MS response as described in Section 4.2.2.\n   When the MS starts\
    \ a VoiceXML dialog, the MS MUST map session\n   information into a VoiceXML session\
    \ variable object.  There are 3\n   types of session information: protocol information\
    \ (Section 9.2.1),\n   media stream information (Section 9.2.2), and parameter\
    \ information\n   (Section 9.2.3).\n"
- title: 9.2.1.  Session Protocol Information
  contents:
  - "9.2.1.  Session Protocol Information\n   If the connectionid attribute is specified,\
    \ the MS assigns protocol\n   information from the SIP dialog associated with\
    \ the connection to the\n   following session variables in VoiceXML:\n   session.connection.local.uri\
    \  Evaluates to the SIP URI specified in\n      the 'To:' header of the initial\
    \ INVITE.\n   session.connection.remote.uri  Evaluates to the SIP URI specified\
    \ in\n      the 'From:' header of the initial INVITE.\n   session.connection.originator\
    \  Evaluates to the value of\n      session.connection.remote (MS receives inbound\
    \ connections but\n      does not create outbound connections).\n   session.connection.protocol.name\
    \  Evaluates to \"sip\".  Note that this\n      is intended to reflect the use\
    \ of SIP in general, and does not\n      distinguish between whether the connection\
    \ accesses the MS via SIP\n      or SIP Secure (SIPS) procedures.\n   session.connection.protocol.version\
    \  Evaluates to \"2.0\".\n   session.connection.redirect  This array is populated\
    \ by information\n      contained in the 'History-Info' header [RFC4244] in the\
    \ initial\n      INVITE or is otherwise undefined.  Each entry (hi-entry) in the\n\
    \      'History-Info' header is mapped, in the order it appeared in the\n    \
    \  'History-Info' header, into an element of the\n      session.connection.redirect\
    \ array.  Properties of each element of\n      the array are determined as follows:\n\
    \      uri    Set to the hi-targeted-to-uri value of the History-Info\n      \
    \       entry\n      pi     Set to 'true' if hi-targeted-to-uri contains a\n \
    \            'Privacy=history' parameter, or if the INVITE 'Privacy'\n       \
    \      header includes 'history'; 'false' otherwise\n      si     Set to the value\
    \ of the 'si' parameter if it exists;\n             undefined otherwise\n    \
    \  reason Set verbatim to the value of the 'Reason' parameter of hi-\n       \
    \      targeted-to-uri\n   session.connection.aai  Evaluates to the value of a\
    \ SIP header with\n      the name \"aai\" if present; undefined otherwise.\n \
    \  session.connection.protocol.sip.requesturi  This is an associative\n      array\
    \ where the array keys and values are formed from the URI\n      parameters on\
    \ the SIP Request-URI of the initial INVITE.  The\n      array key is the URI\
    \ parameter name.  The corresponding array\n      value is obtained by evaluating\
    \ the URI parameter value as a\n      string.  In addition, the array's toString()\
    \ function returns the\n      full SIP Request-URI.\n   session.connection.protocol.sip.headers\
    \  This is an associative array\n      where each key in the array is the non-compact\
    \ name of a SIP\n      header in the initial INVITE converted to lowercase (note\
    \ the case\n      conversion does not apply to the header value).  If multiple\n\
    \      header fields of the same field name are present, the values are\n    \
    \  combined into a single comma-separated value.  Implementations\n      MUST\
    \ at a minimum include the 'Call-ID' header and MAY include\n      other headers.\
    \  For example,\n      session.connection.protocol.sip.headers[\"call-id\"] evaluates\
    \ to\n      the Call-ID of the SIP dialog.\n   If a conferenceid attribute is\
    \ specified, then the MS populates the\n   following session variables in VoiceXML:\n\
    \   session.conference.name  Evaluates to the value of the conferenceid\n    \
    \  attribute.\n"
- title: 9.2.2.  Session Media Stream Information
  contents:
  - "9.2.2.  Session Media Stream Information\n   The media streams of the connection\
    \ or conference to use for the\n   dialog are described in Section 4.2.2, including\
    \ use of <stream>\n   elements (Section 4.2.2.2) if specified.  The MS maps media\
    \ stream\n   information into the VoiceXML session variable\n   session.connection.protocol.sip.media\
    \ for a connection, and\n   session.conference.media for a conference.  In both\
    \ variables, the\n   value of the variable is an array where each array element\
    \ is an\n   object with the following properties:\n   type  This required property\
    \ indicates the type of the media\n      associated with the stream (see Section\
    \ 4.2.2.2 <stream> type\n      attribute definition).\n   direction  This required\
    \ property indicates the directionality of the\n      media relative to the endpoint\
    \ of the dialog (see Section 4.2.2.2\n      <stream> direction attribute definition).\n\
    \   format  This property is optional.  If defined, the value of the\n      property\
    \ is an array.  Each array element is an object that\n      specifies information\
    \ about one format of the media stream.  The\n      object contains at least one\
    \ property called name whose value is\n      the subtype name of the media format\
    \ [RFC4855].  Other properties\n      may be defined with string values; these\
    \ correspond to required\n      and, if defined, optional parameters of the format.\n\
    \   As a consequence of this definition, when a connectionid is specified\n  \
    \ there is an array entry in session.connection.protocol.sip.media for\n   each\
    \ media stream used by the VoiceXML dialog.  For an example,\n   consider a connection\
    \ with bidirectional G.711 mu-law audio sampled\n   at 8kHz where the dialog is\
    \ started with\n   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\"\
    >\n    <dialogstart connectionid=\"ssd3r3:sds345b\"\n                 type=\"\
    application/voicexml+xml\"\n                 src=\"http://www.example.com/mydialog.vxml\"\
    \n                 fetchtimeout=\"15s\">\n     <stream media=\"audio\" direction=\"\
    recvonly\"/>\n    </dialogstart>\n   </mscivr>\n   In this case, session.connection.protocol.sip.media[0].type\
    \ evaluates\n   to \"audio\", session.connection.protocol.sip.media[0].direction\n\
    \   evaluates to \"recvonly\" (i.e., the endpoint only receives media from\n \
    \  the dialog -- the endpoint does not send media to the dialog),\n   session.connection.protocol.sip.media[0].format[0].name\
    \ evaluates to\n   \"PCMU\", and session.connection.protocol.sip.media[0].format[0].rate\n\
    \   evaluates to \"8000\".\n   Note that the session variable is updated if the\
    \ connection or\n   conference media session characteristics for the VoiceXML\
    \ dialog\n   change (e.g., due to a SIP re-INVITE).\n"
- title: 9.2.3.  Session Parameter Information
  contents:
  - "9.2.3.  Session Parameter Information\n   Parameter information is specified\
    \ in the <params> child element of\n   <dialogprepare> and <dialogstart> elements,\
    \ where each parameter is\n   specified using a <param> element.  The MS maps\
    \ parameter information\n   into VoiceXML session variables as follows:\n   session.values\
    \  This is an associative array mapped to the <params>\n      element.  It is\
    \ undefined if no <params> element is specified.  If\n      a <params> element\
    \ is specified in both <dialogprepare> and\n      <dialogstart> elements for the\
    \ same dialog, then the array is\n      first initialized with the <params> specified\
    \ in the\n      <dialogprepare> element and then updated with the <params>\n \
    \     specified in the <dialogstart> element; in cases of conflict, the\n    \
    \  <dialogstart> parameter value take priority.  Array keys and\n      values\
    \ are formed from <param> children of the <params> element.\n      Each array\
    \ key is the value of the name attribute of a <param>\n      element.  If the\
    \ same name is used in more than one <param>\n      element, then the array key\
    \ is associated with the last <param> in\n      document order.  The corresponding\
    \ value for each key is an object\n      with two required properties: a \"type\"\
    \ property evaluating to the\n      value of the type attribute, and a \"content\"\
    \ property evaluating\n      to the content of the <param>.  In addition, this\
    \ object's\n      toString() function returns the value of the \"content\" property\
    \ as\n      a string.\n   For example, a VoiceXML dialog started with one parameter:\n\
    \   <mscivr version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:msc-ivr\">\n    <dialogstart\
    \ connectionid=\"ssd3r3:sds345b\"\n                 type=\"application/voicexml+xml\"\
    \n                 src=\"http://www.example.com/mydialog.vxml\"\n            \
    \     fetchtimeout=\"15s\">\n     <params>\n      <param name=\"mode\">playannouncement</param>\n\
    \     </params>\n    </dialogstart>\n   </mscivr>\n   In this case, session.values\
    \ would be defined with one item in the\n   array where session.values['mode'].type\
    \ evaluates to \"text/plain\"\n   (the default value), session.values['mode'].content\
    \ evaluates to\n   \"playannouncement\", and session.values['mode'].toString()\
    \ also\n   evaluates to \"playannouncement\".\n   The MS sends an error response\
    \ (see Section 4.2.2) if a <param> is\n   not supported by the MS (e.g., the parameter\
    \ type is not supported).\n"
- title: 9.3.  Terminating a VoiceXML Dialog
  contents:
  - "9.3.  Terminating a VoiceXML Dialog\n   When the MS receives a request with a\
    \ <dialogterminate> element\n   (Section 4.2.3), the MS throws a 'connection.disconnect.hangup'\
    \ event\n   into the specified VoiceXML dialog.  Note that if the immediate\n\
    \   attribute has the value true, then the MS MUST NOT return <params>\n   information\
    \ when the VoiceXML dialog exits (even if the VoiceXML\n   dialog provides such\
    \ information) -- see Section 9.4.\n   If the connection or conference associated\
    \ with the VoiceXML dialog\n   terminates, then the MS throws a 'connection.disconnect.hangup'\
    \ event\n   into the specified VoiceXML dialog.\n"
- title: 9.4.  Exiting a VoiceXML Dialog
  contents:
  - "9.4.  Exiting a VoiceXML Dialog\n   The MS sends a <dialogexit> notification\
    \ event (Section 4.2.5.1) when\n   the VoiceXML dialog is complete, has been terminated,\
    \ or exits due to\n   an error.  The <dialogexit> status attribute specifies the\
    \ status of\n   the VoiceXML dialog when it exits and its <params> child element\n\
    \   specifies information, if any, returned from the VoiceXML dialog.\n   A VoiceXML\
    \ dialog exits when it processes a <disconnect> element, an\n   <exit> element,\
    \ or an implicit exit according to the VoiceXML form\n   interpretation algorithm\
    \ (FIA).  If the VoiceXML dialog executes a\n   <disconnect> and then subsequently\
    \ executes an <exit> with namelist\n   information, the namelist information from\
    \ the <exit> element is\n   discarded.\n   The MS reports namelist variables in\
    \ the <params> element of the\n   <dialogexit>.  Each <param> reports on a namelist\
    \ variable.  The MS\n   set the <param> name attribute to the name of the VoiceXML\
    \ variable.\n   The MS sets the <param> type attribute according to the type of\
    \ the\n   VoiceXML variable.  The MS sets the <param> type to 'text/plain' when\n\
    \   the VoiceXML variable is a simple ECMAScript value.  If the VoiceXML\n   variable\
    \ is a recording, the MS sets the <param> type to the MIME\n   media type of the\
    \ recording and encodes the recorded content as CDATA\n   in the <param> (see\
    \ Section 4.2.6.1 for an example).  If the VoiceXML\n   variable is a complex\
    \ ECMAScript value (e.g., object, array, etc.),\n   the MS sets the <param> type\
    \ to 'application/json' and converts the\n   variable value to its JSON value\
    \ equivalent [RFC4627].  The behavior\n   resulting from specifying an ECMAScript\
    \ object with circular\n   references is not defined.\n   If the expr attribute\
    \ is specified on the VoiceXML <exit> element\n   instead of the namelist attribute,\
    \ the MS creates a <param> element\n   with the reserved name '__exit'.  If the\
    \ value is an ECMAScript\n   literal, the <param> type is 'text/plain' and the\
    \ content is the\n   literal value.  If the value is a variable, the <param> type\
    \ and\n   content are set in the same way as a namelist variable; for example,\n\
    \   an expr attribute referencing a variable with a simple ECMAScript\n   value\
    \ has the type 'text/plain' and the content is set to the\n   ECMAScript value.\
    \  To allow the AS to differentiate between a\n   <dialogexit> notification event\
    \ resulting from a VoiceXML\n   <disconnect> from one resulting from an <exit>,\
    \ the MS creates a\n   <param> with the reserved name '__reason', the type 'text/plain',\
    \ and\n   a value of \"disconnect\" (without brackets) to reflect the use of\n\
    \   VoiceXML's <disconnect> element, and the value of \"exit\" (without\n   brackets)\
    \ to an explicit <exit> in the VoiceXML dialog.  If the\n   VoiceXML session terminates\
    \ for other reasons (such as encountering\n   an error), this parameter MAY be\
    \ omitted or take on platform-specific\n   values prefixed with an underscore.\n\
    \   Table 2 provides some examples of VoiceXML <exit> usage and the\n   corresponding\
    \ <params> element in the <dialogexit> notification\n   event.  It assumes the\
    \ following VoiceXML variable names and values:\n   userAuthorized=true, pin=1234,\
    \ and errors=0.  The <param> type\n   attributes ('text/plain') are omitted for\
    \ clarity.\n   +------------------------+------------------------------------------+\n\
    \   | <exit> Usage           | <params> Result                          |\n  \
    \ +------------------------+------------------------------------------+\n   |\
    \ <exit>                 | <params> <param                          |\n   |  \
    \                      | name=\"__reason\">exit</param> </params>   |\n   | <exit\
    \ expr=\"5\">        | <params> <param                          |\n   |      \
    \                  | name=\"__reason\">exit</param> <param      |\n   |      \
    \                  | name=\"__exit\">5</param> </params>        |\n   | <exit\
    \ expr=\"'done'\">   | <params> <param                          |\n   |      \
    \                  | name=\"__reason\">exit</param> <param      |\n   |      \
    \                  | name=\"__exit\">'done'</param> </params>   |\n   | <exit\
    \                  | <params> <param                          |\n   | expr=\"\
    userAuthorized\"> | name=\"__reason\">exit</param> <param      |\n   |       \
    \                 | name=\"__exit\">true</param> </params>     |\n   | <exit namelist=\"\
    pin    | <params> <param                          |\n   | errors\">          \
    \     | name=\"__reason\">exit</param> <param      |\n   |                   \
    \     | name=\"pin\">1234</param> <param           |\n   |                   \
    \     | name=\"errors\">0</param> </params>        |\n   +------------------------+------------------------------------------+\n\
    \                 Table 2: VoiceXML <exit> Mapping Examples\n"
- title: 9.5.  Call Transfer
  contents:
  - "9.5.  Call Transfer\n   While VoiceXML is at its core a dialog language, it also\
    \ provides\n   optional call transfer capability.  It is NOT RECOMMENDED to use\n\
    \   VoiceXML's call transfer capability in networks involving application\n  \
    \ servers.  Rather, the AS itself can provide call routing\n   functionality by\
    \ taking signaling actions based on the data returned\n   to it, either through\
    \ VoiceXML's own data submission mechanisms or\n   through the mechanism described\
    \ in Section 9.4.  If the MS encounters\n   a VoiceXML dialog requesting call\
    \ transfer capability, the MS SHOULD\n   raise an error event in the VoiceXML\
    \ dialog execution context: an\n   error.unsupported.transfer.blind event if blind\
    \ transfer is\n   requested, error.unsupported.transfer.bridge if bridge transfer\
    \ is\n   requested, or error.unsupported.transfer.consultation if consultation\n\
    \   transfer is requested.\n"
- title: 10.  Contributors
  contents:
  - "10.  Contributors\n   Asher Shiratzky provided valuable support and contributions\
    \ to the\n   early versions of this document.\n   The authors would like to thank\
    \ the IVR design team consisting of\n   Roni Even, Lorenzo Miniero, Adnan Saleem,\
    \ Diego Besprosvan, Mary\n   Barnes, and Steve Buko, who provided valuable feedback,\
    \ input, and\n   text to this document.\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   The authors would like to thank Adnan Saleem, Gene Shtirmer,\
    \ Dave\n   Burke, Dan York, Steve Buko, Jean-Francois Bertrand, Henry Lum, and\n\
    \   Lorenzo Miniero for expert reviews of this work.\n   Ben Campbell carried\
    \ out the RAI expert review on this specification\n   and provided a great deal\
    \ of invaluable input.  Donald Eastlake\n   carried out a thorough security review.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2045]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n              Extensions (MIME) Part One: Format of Internet\
    \ Message\n              Bodies\", RFC 2045, November 1996.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2277]  Alvestrand, H., \"IETF Policy on\
    \ Character Sets and\n              Languages\", BCP 18, RFC 2277, January 1998.\n\
    \   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n           \
    \   Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer\
    \ Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2818]  Rescorla, E., \"\
    HTTP Over TLS\", RFC 2818, May 2000.\n   [RFC3023]  Murata, M., St. Laurent, S.,\
    \ and D. Kohn, \"XML Media\n              Types\", RFC 3023, January 2001.\n \
    \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n   \
    \           January 2004.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L.\
    \ Masinter, \"Uniform\n              Resource Identifier (URI): Generic Syntax\"\
    , STD 66,\n              RFC 3986, January 2005.\n   [RFC4288]  Freed, N. and\
    \ J. Klensin, \"Media Type Specifications and\n              Registration Procedures\"\
    , BCP 13, RFC 4288, December 2005.\n   [RFC4574]  Levin, O. and G. Camarillo,\
    \ \"The Session Description\n              Protocol (SDP) Label Attribute\", RFC\
    \ 4574, August 2006.\n   [RFC4627]  Crockford, D., \"The application/json Media\
    \ Type for\n              JavaScript Object Notation (JSON)\", RFC 4627, July\
    \ 2006.\n   [RFC4647]  Phillips, A. and M. Davis, \"Matching of Language Tags\"\
    ,\n              BCP 47, RFC 4647, September 2006.\n   [RFC5226]  Narten, T. and\
    \ H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations\
    \ Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n   [RFC5234]\
    \  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5646]  Phillips, A. and M. Davis,\
    \ \"Tags for Identifying\n              Languages\", BCP 47, RFC 5646, September\
    \ 2009.\n   [RFC6230]  Boulton, C., Melanchuk, T., and S. McGlashan, \"Media\n\
    \              Control Channel Framework\", RFC 6230, May 2011.\n   [SRGS]   \
    \  Hunt, A. and S. McGlashan, \"Speech Recognition Grammar\n              Specification\
    \ Version 1.0\", W3C Recommendation,\n              March 2004.\n   [VXML20] \
    \  McGlashan, S., Burnett, D., Carter, J., Danielsen, P.,\n              Ferrans,\
    \ J., Hunt, A., Lucas, B., Porter, B., Rehor, K.,\n              and S. Tryphonas,\
    \ \"Voice Extensible Markup Language\n              (VoiceXML) Version 2.0\",\
    \ W3C Recommendation, March 2004.\n   [VXML21]   Oshry, M., Auburn, RJ., Baggia,\
    \ P., Bodell, M., Burke, D.,\n              Burnett, D., Candell, E., Carter,\
    \ J., McGlashan, S., Lee,\n              A., Porter, B., and K. Rehor, \"Voice\
    \ Extensible Markup\n              Language (VoiceXML) Version 2.1\", W3C Recommendation,\n\
    \              June 2007.\n   [W3C.REC-SMIL2-20051213]\n              Jansen,\
    \ J., Layaida, N., Michel, T., Grassel, G.,\n              Koivisto, A., Bulterman,\
    \ D., Mullender, S., and D. Zucker,\n              \"Synchronized Multimedia Integration\
    \ Language (SMIL 2.1)\",\n              World Wide Web Consortium Recommendation\
    \ REC-SMIL2-\n              20051213, December 2005,\n              <http://www.w3.org/TR/2005/REC-SMIL2-20051213>.\n\
    \   [XML]      Bray, T., Paoli, J., Sperberg-McQueen, C M., Maler, E.,\n     \
    \         and F. Yergeau, \"Extensible Markup Language (XML) 1.0\n           \
    \   (Third Edition)\", W3C Recommendation, February 2004.\n   [XMLSchema:Part2]\n\
    \              Biron, P. and A. Malhotra, \"XML Schema Part 2: Datatypes\n   \
    \           Second Edition\", W3C Recommendation, October 2004.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [CCXML10]  Auburn, R J., \"Voice Browser Call\
    \ Control: CCXML Version\n              1.0\", W3C Candidate Recommendation (work\
    \ in progress),\n              April 2010.\n   [H.248.9]  \"Gateway control protocol:\
    \ Advanced media server\n              packages\", ITU-T Recommendation H.248.9.\n\
    \   [IANA]     IANA, \"RTP Payload Types\", available\n              from http://www.iana.org.\n\
    \   [MIME.mediatypes]\n              IANA, \"MIME Media Types\", available\n \
    \             from http://www.iana.org.\n   [MIXER-CP]\n              McGlashan,\
    \ S., Melanchuk, T., and C. Boulton, \"A Mixer\n              Control Package\
    \ for the Media Control Channel Framework\",\n              Work in Progress,\
    \ January 2011.\n   [RFC2897]  Cromwell, D., \"Proposal for an MGCP Advanced Audio\n\
    \              Package\", RFC 2897, August 2000.\n   [RFC3261]  Rosenberg, J.,\
    \ Schulzrinne, H., Camarillo, G., Johnston,\n              A., Peterson, J., Sparks,\
    \ R., Handley, M., and E.\n              Schooler, \"SIP: Session Initiation Protocol\"\
    , RFC 3261,\n              June 2002.\n   [RFC4240]  Burger, E., Van Dyke, J.,\
    \ and A. Spitzer, \"Basic Network\n              Media Services with SIP\", RFC\
    \ 4240, December 2005.\n   [RFC4244]  Barnes, M., \"An Extension to the Session\
    \ Initiation\n              Protocol (SIP) for Request History Information\",\
    \ RFC 4244,\n              November 2005.\n   [RFC4267]  Froumentin, M., \"The\
    \ W3C Speech Interface Framework Media\n              Types: application/voicexml+xml,\
    \ application/ssml+xml,\n              application/srgs, application/srgs+xml,\
    \ application/\n              ccxml+xml, and application/pls+xml\", RFC 4267,\n\
    \              November 2005.\n   [RFC4281]  Gellens, R., Singer, D., and P. Frojdh,\
    \ \"The Codecs\n              Parameter for \"Bucket\" Media Types\", RFC 4281,\n\
    \              November 2005.\n   [RFC4730]  Burger, E. and M. Dolly, \"A Session\
    \ Initiation Protocol\n              (SIP) Event Package for Key Press Stimulus\
    \ (KPML)\",\n              RFC 4730, November 2006.\n   [RFC4733]  Schulzrinne,\
    \ H. and T. Taylor, \"RTP Payload for DTMF\n              Digits, Telephony Tones,\
    \ and Telephony Signals\", RFC 4733,\n              December 2006.\n   [RFC4855]\
    \  Casner, S., \"Media Type Registration of RTP Payload\n              Formats\"\
    , RFC 4855, February 2007.\n   [RFC5022]  Van Dyke, J., Burger, E., and A. Spitzer,\
    \ \"Media Server\n              Control Markup Language (MSCML) and Protocol\"\
    , RFC 5022,\n              September 2007.\n   [RFC5167]  Dolly, M. and R. Even,\
    \ \"Media Server Control Protocol\n              Requirements\", RFC 5167, March\
    \ 2008.\n   [RFC5707]  Saleem, A., Xin, Y., and G. Sharratt, \"Media Server Markup\n\
    \              Language (MSML)\", RFC 5707, February 2010.\n   [VXML30]   McGlashan,\
    \ S., Burnett, D., Akolkar, R., Auburn, RJ.,\n              Baggia, P., Barnett,\
    \ J., Bodell, M., Carter, J., Oshry,\n              M., Rehor, K., Young, M.,\
    \ and R. Hosn, \"Voice Extensible\n              Markup Language (VoiceXML) Version\
    \ 3.0\", W3C Working\n              Draft, August 2010.\n   [XCON-DATA-MODEL]\n\
    \              Novo, O., Camarillo, G., Morgan, D., and J. Urpalainen,\n     \
    \         \"Conference Information Data Model for Centralized\n              Conferencing\
    \ (XCON)\", Work in Progress, April 2011.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Scott McGlashan\n   Hewlett-Packard\n   EMail: smcg.stds01@mcglashan.org\n\
    \   Tim Melanchuk\n   Rainwillow\n   EMail: timm@rainwillow.com\n   Chris Boulton\n\
    \   NS-Technologies\n   EMail: chris@ns-technologies.com\n"
