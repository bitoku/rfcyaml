- title: __initial_text__
  contents:
  - '       Problem Statement for the Interface to the Routing System

    '
- title: Abstract
  contents:
  - "Abstract\n   Traditionally, routing systems have implemented routing and signaling\n\
    \   (e.g., MPLS) to control traffic forwarding in a network.  Route\n   computation\
    \ has been controlled by relatively static policies that\n   define link cost,\
    \ route cost, or import and export routing policies.\n   Requirements have emerged\
    \ to more dynamically manage and program\n   routing systems due to the advent\
    \ of highly dynamic data-center\n   networking, on-demand WAN services, dynamic\
    \ policy-driven traffic\n   steering and service chaining, the need for real-time\
    \ security threat\n   responsiveness via traffic control, and a paradigm of separating\n\
    \   policy-based decision-making from the router itself.  These\n   requirements\
    \ should allow controlling routing information and traffic\n   paths and extracting\
    \ network topology information, traffic\n   statistics, and other network analytics\
    \ from routing systems.\n   This document proposes meeting this need via an Interface\
    \ to the\n   Routing System (I2RS).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7920.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. I2RS Model and Problem Area for the IETF ........................4\n  \
    \ 3. Standard Data Models of Routing State for Installation ..........6\n   4.\
    \ Learning Router Information .....................................7\n   5. Aspects\
    \ to be Considered for an I2RS Protocol ...................8\n   6. Security Considerations\
    \ .........................................9\n   7. References .....................................................10\n\
    \      7.1. Normative References ......................................10\n  \
    \    7.2. Informative References ....................................10\n   Appendix\
    \ A.  Existing Management Interfaces .......................11\n   Acknowledgements\
    \ ..................................................12\n   Authors' Addresses\
    \ ................................................12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Traditionally, routing systems have implemented routing\
    \ and signaling\n   (e.g., MPLS) to control traffic forwarding in a network. \
    \ Route\n   computation has been controlled by relatively static policies that\n\
    \   define link cost, route cost, or import and export routing policies.\n   The\
    \ advent of highly dynamic data-center networking, on-demand WAN\n   services,\
    \ dynamic policy-driven traffic steering and service\n   chaining, the need for\
    \ real-time security threat responsiveness via\n   traffic control, and a paradigm\
    \ of separating policy-based decision-\n   making from the router itself has created\
    \ the need to more\n   dynamically manage and program routing systems in order\
    \ to control\n   routing information and traffic paths and to extract network\
    \ topology\n   information, traffic statistics, and other network analytics from\n\
    \   routing systems.\n   As modern networks continue to grow in scale and complexity\
    \ and\n   desired policy has become more complex and dynamic, there is a need\n\
    \   to support rapid control and analytics.  The scale of modern networks\n  \
    \ and data centers and the associated operational expense drives the\n   need\
    \ to automate even the simplest operations.  The ability to\n   quickly interact\
    \ via more complex operations to support dynamic\n   policy is even more critical.\n\
    \   In order to enable network applications to have access to and control\n  \
    \ over information in the different vendors' routing systems, a\n   publicly documented\
    \ interface is required.  The interface needs to\n   support real-time, asynchronous\
    \ interactions using efficient data\n   models and encodings that are based on\
    \ and extend those previously\n   defined.  Furthermore, the interface must be\
    \ tailored to provide a\n   solid base on which a variety of use cases can be\
    \ supported.\n   To support the requirements of orchestration software and automated\n\
    \   network applications to dynamically modify the network, there is a\n   need\
    \ to learn topology, network analytics, and existing state from\n   the network\
    \ as well as to create or modify routing information and\n   network paths.  A\
    \ feedback loop is needed so that changes made can be\n   verifiable and so that\
    \ these applications can learn and react to\n   network changes.\n   Proprietary\
    \ solutions to partially support the requirements outlined\n   above have been\
    \ developed to handle specific situations and needs.\n   Standardizing an interface\
    \ to the routing system will make it easier\n   to integrate use of it into a\
    \ network.  Because there are proprietary\n   partial solutions already, the standardization\
    \ of a common interface\n   should be feasible.\n   It should be noted that during\
    \ the course of this document, the term\n   \"applications\" is used.  This is\
    \ meant to refer to an executable\n   program of some sort that has access to\
    \ a network, such as an IP or\n   MPLS network, via a routing system.\n"
- title: 2.  I2RS Model and Problem Area for the IETF
  contents:
  - "2.  I2RS Model and Problem Area for the IETF\n   Managing a network of systems\
    \ running a variety of routing protocols\n   and/or providing one or more additional\
    \ services (e.g., forwarding,\n   classification and policing, firewalling) involves\
    \ interactions\n   between multiple components within these systems.  Some of\
    \ these\n   systems or system components may be virtualized, co-located within\n\
    \   the same physical system, or distributed.  In all cases, it is\n   desirable\
    \ to enable network applications to manage and control the\n   services provided\
    \ by many, if not all, of these components, subject\n   to authenticated and authorized\
    \ access and policies.\n   A data-model-driven interface to the routing system\
    \ is needed.  This\n   will allow expansion of what information can be read and\
    \ controlled\n   and allow for future flexibility.  At least one accompanying\
    \ protocol\n   with clearly defined operations is needed; the suitable protocol(s)\n\
    \   can be identified and expanded to support the requirements of an\n   Interface\
    \ to the Routing System (I2RS).  These solutions must be\n   designed to facilitate\
    \ rapid, isolated, secure, and dynamic changes\n   to a device's routing system.\
    \  These would facilitate wide-scale\n   deployment of interoperable applications\
    \ and routing systems.\n   The I2RS model and problem area for IETF work is illustrated\
    \ in\n   Figure 1.  This document uses terminology defined in [RFC7921].  The\n\
    \   I2RS agent is associated with a routing element, which may or may not\n  \
    \ be co-located with a data plane.  The I2RS client could be integrated\n   in\
    \ a network application or controlled and used by one or more\n   separate network\
    \ applications.  For instance, an I2RS client could be\n   provided by a network\
    \ controller or a network orchestration system\n   that provides a non-I2RS interface\
    \ to network applications and an\n   I2RS interface to I2RS agents on the systems\
    \ being managed.  The\n   scope of the data models used by I2RS extends across\
    \ the entire\n   routing system and the selected protocol(s) for I2RS.\n   As\
    \ depicted in Figure 1, the I2RS client and I2RS agent in a routing\n   system\
    \ are objects with in the I2RS scope.  The selected protocol(s)\n   for I2RS extend\
    \ between the I2RS client and I2RS agent.  All other\n   objects and interfaces\
    \ in Figure 1 are outside the I2RS scope for\n   standardization.\n        +***************+\
    \   +***************+   +***************+\n        *  Application  *   *  Application\
    \  *   *  Application  *\n        +***************+   +***************+   +***************+\n\
    \        |  I2RS Client  |           ^                  ^\n        +---------------+\
    \           *                  *\n                 ^                  *   ****************\n\
    \                 |                  *   *\n                 |               \
    \   v   v\n                 |           +---------------+         +-------------+\n\
    \                 |           |  I2RS Client  |<------->| Other I2RS  |\n    \
    \             |           +---------------+         | Agents      |\n        \
    \         |                   ^                 +-------------+\n            \
    \     |________________   |\n                                  |  |  <== I2RS\
    \ Protocol\n                                  |  |\n       ...........................|..|..................................\n\
    \       .                          v  v                                 .\n  \
    \     . +*************+     +---------------+      +****************+ .\n    \
    \   . *  Policy     *     |               |      *   Routing  &   * .\n      \
    \ . * Database    *<***>|  I2RS Agent   |<****>*   Signaling    * .\n       .\
    \ +*************+     |               |      *   Protocols    * .\n       .  \
    \                   +---------------+      +****************+ .\n       .    \
    \                    ^   ^     ^                  ^         .\n       . +*************+\
    \        *   *     *                  *         .\n       . *  Topology   *  \
    \      *   *     *                  *         .\n       . *  Database   *<*******+\
    \   *     *                  v         .\n       . +*************+           \
    \ *     *         +****************+ .\n       .                            *\
    \     +********>*  RIB Manager   * .\n       .                            *  \
    \             +****************+ .\n       .                            *    \
    \                    ^         .\n       .                            v      \
    \                  *         .\n       .                 +*******************+\
    \               *         .\n       .                 * Subscription &    *  \
    \             *         .\n       .                 * Configuration     *    \
    \           v         .\n       .                 * Templates for     *      +****************+\
    \ .\n       .                 * Measurements,     *      *  FIB Manager   * .\n\
    \       .                 * Events, QoS, etc. *      *  & Data Plane  * .\n  \
    \     .                 +*******************+      +****************+ .\n    \
    \   .................................................................\n     <-->\
    \  interfaces inside the scope of I2RS Protocol\n     +--+  objects inside the\
    \ scope of I2RS-defined behavior\n     <**>  interfaces NOT within the scope of\
    \ I2RS Protocol\n     +**+  objects NOT within the scope of I2RS-defined behavior\n\
    \     <==   used to point to the interface where the I2RS Protocol\n         \
    \  would be used\n     ....  boundary of a router supporting I2RS\n          \
    \         Figure 1: I2RS Model and Problem Area\n   The protocol(s) used to carry\
    \ messages between I2RS clients and I2RS\n   agents should provide the key features\
    \ specified in Section 5.\n   I2RS will use a set of meaningful data models for\
    \ information in the\n   routing system and in a topology database.  Each data\
    \ model should\n   describe the meaning and relationships of the modeled items.\
    \  The\n   data models should be separable across different features of the\n\
    \   managed components, versioned, and extendable.  As shown in Figure 1,\n  \
    \ I2RS needs to interact with several logical components of the routing\n   element:\
    \ policy database, topology database, subscription and\n   configuration for dynamic\
    \ measurements/events, routing and signaling\n   protocols, and its Routing Information\
    \ Base (RIB) manager.  This\n   interaction is both for writing (e.g., to policy\
    \ databases or RIB\n   manager) as well as for reading (e.g., dynamic measurement\
    \ or\n   topology database).  An application should be able to combine data\n\
    \   from individual routing elements to provide network-wide data\n   model(s).\n\
    \   The data models should translate into a concise transfer syntax, sent\n  \
    \ via the I2RS protocol, that is straightforward for applications to\n   use (e.g.,\
    \ a web services design paradigm).  The information transfer\n   should use existing\
    \ transport protocols to provide the reliability,\n   security, and timeliness\
    \ appropriate for the particular data.\n"
- title: 3.  Standard Data Models of Routing State for Installation
  contents:
  - "3.  Standard Data Models of Routing State for Installation\n   As described in\
    \ Section 1, there is a need to be able to precisely\n   control routing and signaling\
    \ state based upon policy or external\n   measures.  One set of data models that\
    \ I2RS should focus on is for\n   interacting with the RIB layer (e.g., RIB, Label\
    \ Information Base\n   (LIB), multicast RIB, policy-based routing) to provide\
    \ flexibility\n   and routing abstractions.  As an example, the desired routing\
    \ and\n   signaling state might range from simple static routes to policy-based\n\
    \   routing to static multicast replication and routing state.  This\n   means\
    \ that, to usefully model next hops, the data model employed\n   needs to handle\
    \ next-hop indirection and recursion (e.g., a prefix X\n   is routed like prefix\
    \ Y) as well as different types of tunneling and\n   encapsulation.\n   Efforts\
    \ to provide this level of control have focused on\n   standardizing data models\
    \ that describe the forwarding plane (e.g.,\n   Forwarding and Control Element\
    \ Separation (ForCES) [RFC3746]).  I2RS\n   recognizes that the routing system\
    \ and a router's OS provide useful\n   mechanisms that applications could usefully\
    \ harness to accomplish\n   application-level goals.  Using routing indirection,\
    \ recursion, and\n   common routing abstractions (e.g., tunnels, Label Switched\
    \ Paths\n   (LSPs), etc.) provides significant flexibility and functionality over\n\
    \   collapsing the state to individual routes in the Forwarding\n   Information\
    \ Base (FIB) that need to be individually modified when a\n   change occurs.\n\
    \   In addition to interfaces to control the RIB layer, there is a need\n   to\
    \ dynamically configure policies and parameter values for the\n   various routing\
    \ and signaling protocols based upon application-level\n   policy decisions.\n"
- title: 4.  Learning Router Information
  contents:
  - "4.  Learning Router Information\n   A router has information that applications\
    \ may require so that they\n   can understand the network, verify that programmed\
    \ state is\n   installed, measure the behavior of various flows, and understand\
    \ the\n   existing configuration and state of the router.  I2RS should provide\n\
    \   a framework so that applications can register for asynchronous\n   notifications\
    \ and can make specific requests for information.\n   Although there are efforts\
    \ to extend the topological information\n   available, even the best of these\
    \ (e.g., BGP-LS [RFC7752]) still only\n   provide the current active state as\
    \ seen at the IGP and BGP layers.\n   Detailed topological state that provides\
    \ more information than the\n   current functional status (e.g., active paths\
    \ and links) is needed by\n   applications.  Examples of missing information include\
    \ paths or links\n   that are potentially available (e.g., administratively down)\
    \ or\n   unknown (e.g., to peers or customers) to the routing topology.\n   For\
    \ applications to have a feedback loop that includes awareness of\n   the relevant\
    \ traffic, an application must be able to request the\n   measurement and timely,\
    \ scalable reporting of data.  While a\n   mechanism such as IP Flow Information\
    \ Export (IPFIX) [RFC5470] may be\n   the facilitator for delivering the data,\
    \ providing the ability for an\n   application to dynamically request that measurements\
    \ be taken and\n   data delivered is important.\n   There is a wide range of events\
    \ that applications could use to\n   support verification of router state before\
    \ other network state is\n   changed (e.g., that a route has been installed) and\
    \ to allow timely\n   action in response to changes of relevant routes by others\
    \ or to\n   router events (e.g., link up/down).  While a few of these (e.g., link\n\
    \   up/down) may be available via MIB notifications today, the full range\n  \
    \ is not (e.g., route installed, route changed, primary LSP changed,\n   etc.)\n"
- title: 5.  Aspects to be Considered for an I2RS Protocol
  contents:
  - "5.  Aspects to be Considered for an I2RS Protocol\n   This section describes\
    \ required aspects of a protocol that could\n   support I2RS.  Whether such a\
    \ protocol is built upon extending\n   existing mechanisms or requires a new mechanism\
    \ requires further\n   investigation.\n   The key aspects needed in an interface\
    \ to the routing system are:\n   Multiple Simultaneous Asynchronous Operations:\
    \   A single application\n      should be able to send multiple independent atomic\
    \ operations via\n      I2RS without being required to wait for each to complete\
    \ before\n      sending the next.\n   Very Fine Granularity of Data Locking for\
    \ Writing:   When an I2RS\n      operation is processed, it is required that the\
    \ data locked for\n      writing be very granular (e.g., a particular prefix and\
    \ route)\n      rather than extremely coarse, as is done for writing\n      configuration.\
    \  This should improve the number of concurrent I2RS\n      operations that are\
    \ feasible and reduce blocking delays.\n   Multi-Headed Control:   Multiple applications\
    \ may communicate to the\n      same I2RS agent in a minimally coordinated fashion.\
    \  It is\n      necessary that the I2RS agent can handle multiple requests in\
    \ a\n      well-known policy-based fashion.  Data written can be owned by\n  \
    \    different I2RS clients at different times; data may even be\n      overwritten\
    \ by a different I2RS client.  The details of how this\n      should be handled\
    \ are described in [RFC7921].\n   Duplex:   Communications can be established\
    \ by either the I2RS client\n      (i.e., that resides within the application\
    \ or is used by it to\n      communicate with the I2RS agent) or the I2RS agent.\
    \  Similarly,\n      events, acknowledgements, failures, operations, etc., can\
    \ be sent\n      at any time by both the router and the application.  The I2RS\
    \ is\n      not a pure pull model where only the application queries to pull\n\
    \      responses.\n   High Throughput:   At a minimum, the I2RS agent and associated\
    \ router\n      should be able to handle a considerable number of operations per\n\
    \      second (for example, 10,000 per second to handle many individual\n    \
    \  subscriber routes changing simultaneously).\n   Low Latency:   Within a sub-second\
    \ timescale, it should be possible\n      to complete simple operations (e.g.,\
    \ reading or writing a single\n      prefix route).\n   Multiple Channels:   It\
    \ should be possible for information to be\n      communicated via the interface\
    \ from different components in the\n      router without requiring going through\
    \ a single channel.  For\n      example, for scaling, some exported data or events\
    \ may be better\n      sent directly from the forwarding plane, while other interactions\n\
    \      may come from the control plane.  One channel, with authorization\n   \
    \   and authentication, may be considered primary; only an authorized\n      client\
    \ can then request that information be delivered on a\n      different channel.\
    \  Writes from a client are only expected on\n      channels that provide authorization\
    \ and authentication.\n   Scalable, Filterable Information Access:  To extract\
    \ information in a\n      scalable fashion that is more easily used by applications,\
    \ the\n      ability to specify filtering constructs in an operation requesting\n\
    \      data or requesting an asynchronous notification is very valuable.\n   Secure\
    \ Control and Access:   Any ability to manipulate routing state\n      must be\
    \ subject to authentication and authorization.  Sensitive\n      routing information\
    \ also may need to be provided via secure access\n      back to the I2RS client.\
    \  Such communications must be integrity\n      protected.  Most communications\
    \ will also require confidentiality.\n   Extensibility and Interoperability: \
    \  Both the I2RS protocol and\n      models must be extensible and interoperate\
    \ between different\n      versions of protocols and models.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Security is a key aspect of any protocol that\
    \ allows state\n   installation and extracting of detailed router state.  The\
    \ need for\n   secure control and access is mentioned in Section 5.  More\n  \
    \ architectural security considerations are discussed in [RFC7921].\n   Briefly,\
    \ the I2RS agent is assumed to have a separate authentication\n   and authorization\
    \ channel by which it can validate both the identity\n   and the permissions associated\
    \ with an I2RS client.  Mutual\n   authentication between the I2RS agent and I2RS\
    \ client is required.\n   Different levels of integrity, confidentiality, and\
    \ replay protection\n   are relevant for different aspects of I2RS.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC7921]  Atlas, A., Halpern, J., Hares, S.,\
    \ Ward, D., and T.\n              Nadeau, \"An Architecture for the Interface\
    \ to the Routing\n              System\", RFC 7921, DOI 10.17487/RFC7921, June\
    \ 2016,\n              <http://www.rfc-editor.org/info/rfc7921>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC3746]  Yang, L., Dantu, R., Anderson, T.,\
    \ and R. Gopal,\n              \"Forwarding and Control Element Separation (ForCES)\n\
    \              Framework\", RFC 3746, DOI 10.17487/RFC3746, April 2004,\n    \
    \          <http://www.rfc-editor.org/info/rfc3746>.\n   [RFC5470]  Sadasivan,\
    \ G., Brownlee, N., Claise, B., and J. Quittek,\n              \"Architecture\
    \ for IP Flow Information Export\", RFC 5470,\n              DOI 10.17487/RFC5470,\
    \ March 2009,\n              <http://www.rfc-editor.org/info/rfc5470>.\n   [RFC6241]\
    \  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and\
    \ A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\"\
    , RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <http://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC7752]  Gredler, H., Ed., Medved, J., Previdi, S., Farrel, A., and\n  \
    \            S. Ray, \"North-Bound Distribution of Link-State and\n          \
    \    Traffic Engineering (TE) Information Using BGP\", RFC 7752,\n           \
    \   DOI 10.17487/RFC7752, March 2016,\n              <http://www.rfc-editor.org/info/rfc7752>.\n"
- title: Appendix A.  Existing Management Interfaces
  contents:
  - "Appendix A.  Existing Management Interfaces\n   This section discusses as a single\
    \ entity the combination of the\n   abstract data models, their representation\
    \ in a data language, and\n   the transfer protocol commonly used with them. \
    \ While other\n   combinations of these existing standard technologies are possible,\n\
    \   the ways described are ones that have significant deployment.\n   There are\
    \ three basic ways that routers are managed.  The most\n   popular is the command-line\
    \ interface (CLI), which allows both\n   configuration and learning of device\
    \ state.  This is a proprietary\n   interface resembling a UNIX shell that allows\
    \ for very customized\n   control and observation of a device, and, specifically\
    \ of interest in\n   this case, its routing system.  Some form of this interface\
    \ exists on\n   almost every device (virtual or otherwise).  Processing of\n \
    \  information returned to the CLI (called \"screen scraping\") is a\n   burdensome\
    \ activity because the data is normally formatted for use by\n   a human operator\
    \ and because the layout of the data can vary from\n   device to device and between\
    \ different software versions.  Despite\n   its ubiquity, this interface has never\
    \ been standardized and is\n   unlikely to ever be standardized.  CLI standardization\
    \ is not\n   considered as a candidate solution for the problems motivating I2RS.\n\
    \   The second most popular interface for interrogation of a device's\n   state,\
    \ statistics, and configuration is the Simple Network Management\n   Protocol\
    \ (SNMP) and a set of relevant standards-based and proprietary\n   Management\
    \ Information Base (MIB) modules.  SNMP has a strong history\n   of being used\
    \ by network managers to gather statistical and state\n   information about devices,\
    \ including their routing systems.  However,\n   SNMP is very rarely used to configure\
    \ a device or any of its systems\n   for reasons that vary depending upon the\
    \ network operator.  Some\n   example reasons include complexity, the lack of\
    \ desired configuration\n   semantics (e.g., configuration rollback, sandboxing,\
    \ or configuration\n   versioning) and the difficulty of using the semantics (or\
    \ lack\n   thereof) as defined in the MIB modules to configure device features.\n\
    \   Therefore, SNMP is not considered as a candidate solution for the\n   problems\
    \ motivating I2RS.\n   Finally, the IETF's Network Configuration Protocol (NETCONF)\n\
    \   [RFC6241] has made many strides at overcoming most of the limitations\n  \
    \ around configuration that were just described.  However, as a new\n   technology\
    \ and with the initial lack of standard data models, the\n   adoption of NETCONF\
    \ has been slow.  As needed, I2RS will identify and\n   define information and\
    \ data models to support I2RS applications.\n   Additional extensions to handle\
    \ multi-headed control may need to be\n   added to NETCONF and/or appropriate\
    \ data models.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Ken Gray, Ed Crabbe, Nic\
    \ Leymann,\n   Carlos Pignataro, Kwang-koog Lee, Linda Dunbar, Sue Hares, Russ\n\
    \   Housley, Eric Grey, Qin Wu, Stephen Kent, Nabil Bitar, Deborah\n   Brungard,\
    \ and Sarah Banks for their suggestions and review.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alia Atlas (editor)\n   Juniper Networks\n   Email: akatlas@juniper.net\n\
    \   Thomas D. Nadeau (editor)\n   Brocade\n   Email: tnadeau@lucidvision.com\n\
    \   Dave Ward\n   Cisco Systems\n   Email: wardd@cisco.com\n"
