- contents:
  - '  RTP Payload for DTMF Digits, Telephony Tones, and Telephony Signals

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo describes how to carry dual-tone multifrequency (DTMF)\n
    \  signalling, other tone signals, and telephony events in RTP packets.\n   It
    obsoletes RFC 2833.\n   This memo captures and expands upon the basic framework
    defined in\n   RFC 2833, but retains only the most basic event codes.  It sets
    up an\n   IANA registry to which other event code assignments may be added.\n
    \  Companion documents add event codes to this registry relating to\n   modem,
    fax, text telephony, and channel-associated signalling events.\n   The remainder
    of the event codes defined in RFC 2833 are\n   conditionally reserved in case
    other documents revive their use.\n   This document provides a number of clarifications
    to the original\n   document.  However, it specifically differs from RFC 2833
    by removing\n   the requirement that all compliant implementations support the
    DTMF\n   events.  Instead, compliant implementations taking part in\n   out-of-band
    negotiations of media stream content indicate what events\n   they support.  This
    memo adds three new procedures to the RFC 2833\n   framework: subdivision of long
    events into segments, reporting of\n   multiple events in a single packet, and
    the concept and reporting of\n   state events.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. Terminology ................................................4\n      1.2.
    Overview ...................................................4\n      1.3. Potential
    Applications .....................................5\n      1.4. Events, States,
    Tone Patterns, and Voice-Encoded Tones .....6\n   2. RTP Payload Format for Named
    Telephone Events ...................8\n      2.1. Introduction ...............................................8\n
    \     2.2. Use of RTP Header Fields ...................................8\n           2.2.1.
    Timestamp ...........................................8\n           2.2.2. Marker
    Bit ..........................................8\n      2.3. Payload Format .............................................8\n
    \          2.3.1. Event Field .........................................9\n           2.3.2.
    E (\"End\") Bit .......................................9\n           2.3.3. R
    Bit ...............................................9\n           2.3.4. Volume
    Field ........................................9\n           2.3.5. Duration Field
    ......................................9\n      2.4. Optional Media Type Parameters
    ............................10\n           2.4.1. Relationship to SDP ................................10\n
    \     2.5. Procedures ................................................11\n           2.5.1.
    Sending Procedures .................................11\n           2.5.2. Receiving
    Procedures ...............................16\n      2.6. Congestion and Performance
    ................................19\n           2.6.1. Performance Requirements
    ...........................20\n           2.6.2. Reliability Mechanisms .............................20\n
    \          2.6.3. Adjusting to Congestion ............................22\n   3.
    Specification of Event Codes for DTMF Events ...................23\n      3.1.
    DTMF Applications .........................................23\n      3.2. DTMF
    Events ...............................................25\n      3.3. Congestion
    Considerations .................................25\n   4. RTP Payload Format for
    Telephony Tones .........................26\n      4.1. Introduction ..............................................26\n
    \     4.2. Examples of Common Telephone Tone Signals .................27\n      4.3.
    Use of RTP Header Fields ..................................27\n           4.3.1.
    Timestamp ..........................................27\n           4.3.2. Marker
    Bit .........................................27\n           4.3.3. Payload Format
    .....................................28\n           4.3.4. Optional Media Type
    Parameters .....................29\n      4.4. Procedures ................................................29\n
    \          4.4.1. Sending Procedures .................................29\n           4.4.2.
    Receiving Procedures ...............................30\n           4.4.3. Handling
    of Congestion .............................30\n   5. Examples .......................................................31\n
    \  6. Security Considerations ........................................38\n   7.
    IANA Considerations ............................................38\n      7.1.
    Media Type Registrations ..................................40\n           7.1.1.
    Registration of Media Type audio/telephone-event ...40\n           7.1.2. Registration
    of Media Type audio/tone ..............42\n   8. Acknowledgements ...............................................43\n
    \  9. References .....................................................43\n      9.1.
    Normative References ......................................43\n      9.2. Informative
    References ....................................44\n   Appendix A. Summary of Changes
    from RFC 2833 ......................46\n"
  title: Table of Contents
- contents:
  - '1.  Introduction

    '
  - contents:
    - "1.1.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\",
      \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
      \"MAY\",\n   and \"OPTIONAL\" are to be interpreted as described in RFC 2119
      [1].\n   This document uses the following abbreviations:\n   ANSam   Answer
      tone (amplitude modulated) [24]\n   DTMF    Dual-Tone Multifrequency [10]\n
      \  IVR     Interactive Voice Response unit\n   PBX     Private branch exchange
      (telephone system)\n   PSTN    Public Switched (circuit) Telephone Network\n
      \  RTP     Real-time Transport Protocol [5]\n   SDP     Session Description
      Protocol [9]\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  Overview\n   This memo defines two RTP [5] payload formats, one for carrying\n
      \  dual-tone multifrequency (DTMF) digits and other line and trunk\n   signals
      as events (Section 2), and a second one to describe general\n   multifrequency
      tones in terms only of their frequency and cadence\n   (Section 4).  Separate
      RTP payload formats for telephony tone signals\n   are desirable since low-rate
      voice codecs cannot be guaranteed to\n   reproduce these tone signals accurately
      enough for automatic\n   recognition.  In addition, tone properties such as
      the phase\n   reversals in the ANSam tone will not survive speech coding.  Defining\n
      \  separate payload formats also permits higher redundancy while\n   maintaining
      a low bit rate.  Finally, some telephony events such as\n   \"on-hook\" occur
      out-of-band and cannot be transmitted as tones.\n   The remainder of this section
      provides the motivation for defining\n   the payload types described in this
      document.  Section 2 defines the\n   payload format and associated procedures
      for use of named events.\n   Section 3 describes the events for which event
      codes are defined in\n   this document.  Section 4 describes the payload format
      and associated\n   procedures for tone representations.  Section 5 provides
      some\n   examples of encoded events, tones, and combined payloads.  Section
      6\n   deals with security considerations.  Section 7 defines the IANA\n   requirements
      for registration of event codes for named telephone\n   events, establishes
      the initial content of that registry, and\n   provides the media type registrations
      for the two payload formats.\n   Appendix A describes the changes from RFC 2833
      [12] and in particular\n   indicates the disposition of the event codes defined
      in [12].\n"
    title: 1.2.  Overview
  - contents:
    - "1.3.  Potential Applications\n   The payload formats described here may be
      useful in a number of\n   different scenarios.\n   On the sending side, there
      are two basic possibilities: either the\n   sending side is an end system that
      originates the signals itself, or\n   it is a gateway with the task of propagating
      incoming telephone\n   signals into the Internet.\n   On the receiving side,
      there are more possibilities.  The first is\n   that the receiver must propagate
      tone signalling accurately into the\n   PSTN for machine consumption.  One example
      of this is a gateway\n   passing DTMF tones to an IVR.  In this scenario, frequencies,\n
      \  amplitudes, tone durations, and the durations of pauses between tones\n   are
      all significant, and individual tone signals must be delivered\n   reliably
      and in order.\n   In a second receiving scenario, the receiver must play out
      tones for\n   human consumption.  Typically, rather than a series of tone signals\n
      \  each with its own meaning, the content will consist of a single tone\n   played
      out continuously or a single sequence of tones and possibly\n   silence, repeated
      cyclically for some period of time.  Often the end\n   of the tone playout will
      be triggered by an event fed back in the\n   other direction, using either in-
      or out-of-band means.  Examples of\n   this are dial tone or busy tone.\n   The
      relationship between position in the network and the tones to be\n   played
      out is a complicating factor in this scenario.  In the phone\n   network, tones
      are generated at different places, depending on the\n   switching technology
      and the nature of the tone.  This determines,\n   for example, whether a person
      making a call to a foreign country\n   hears her local tones she is familiar
      with or the tones as used in\n   the country called.\n   For analog lines, dial
      tone is always generated by the local switch.\n   Integrated Services Digital
      Network (ISDN) terminals may generate\n   dial tone locally and then send a
      Q.931 [22] SETUP message containing\n   the dialed digits.  If the terminal
      just sends a SETUP message\n   without any Called Party digits, then the switch
      does digit\n   collection (provided by the terminal as KEYPAD key press digit\n
      \  information within Called Party or Keypad Facility Information\n   Elements
      (IEs) of INFORMATION messages), and provides dial tone over\n   the B-channel.
      \ The terminal can either use the audio signal on the\n   B-channel or use the
      Q.931 messages to trigger locally generated dial\n   tone.\n   Ringing tone
      (also called ringback tone) is generated by the local\n   switch at the callee,
      with a one-way voice path opened up as soon as\n   the callee's phone rings.
      \ (This reduces the chance of clipping the\n   called party's response just
      after answer.  It also permits pre-\n   answer announcements or in-band call-progress
      indications to reach\n   the caller before or in lieu of a ringing tone.)  Congestion
      tone and\n   special information tones can be generated by any of the switches\n
      \  along the way, and may be generated by the caller's switch based on\n   ISDN
      User Part (ISUP) messages received.  Busy tone is generated by\n   the caller's
      switch, triggered by the appropriate ISUP message, for\n   analog instruments,
      or the ISDN terminal.\n   In the third scenario, an end system is directly connected
      to the\n   Internet and processes the incoming media stream directly.  There
      is\n   no need to regenerate tone signals, so that time alignment and power\n
      \  levels are not relevant.  These systems rely on sending systems to\n   generate
      events in place of tones and do not perform their own audio\n   waveform analysis.
      \ An example of such a system is an Internet\n   interactive voice response
      (IVR) system.\n   In circumstances where exact timing alignment between the
      audio\n   stream and the DTMF digits or other events is not important and data\n
      \  is sent unicast, as in the IVR example, it may be preferable to use a\n   reliable
      control protocol rather than RTP packets.  In those\n   circumstances, this
      payload format would not be used.\n   Note that in a number of these cases it
      is possible that the gateway\n   or end system will be both a sender and receiver
      of telephone\n   signals.  Sometimes the same class of signals will be sent
      as\n   received -- in the case of \"RTP trunking\" or voice-band data, for\n
      \  instance.  In other cases, such as that of an end system serving\n   analogue
      lines, the signals sent will be in a different class from\n   those received.\n"
    title: 1.3.  Potential Applications
  - contents:
    - "1.4.  Events, States, Tone Patterns, and Voice-Encoded Tones\n   This document
      provides the means for in-band transport over the\n   Internet of two broad
      classes of signalling information: in-band\n   tones or tone sequences, and
      signals sent out-of-band in the PSTN.\n   Tone signals can be carried using
      any of the three methods listed\n   below.  Depending on the application, it
      may be desirable to carry\n   the signalling information in more than one form
      at once.\n   1.  The gateway or end system can change to a higher-bandwidth
      codec\n       such as G.711 [19] when tone signals are to be conveyed.  See
      new\n       ITU-T Recommendation V.152 [26] for a formal treatment of this\n
      \      approach.  Alternatively, for fax, text, or modem signals\n       respectively,
      a specialized transport such as T.38 [23], RFC 4103\n       [15], or V.150.1
      modem relay [25] may be used.  Finally, 64\n       kbit/s channels may be carried
      transparently using the RFC 4040\n       Clearmode payload type [14].  These
      methods are out of scope of\n       the present document, but may be used along
      with the payload\n       types defined here.\n   2.  The sending gateway can
      simply measure the frequency components\n       of the voice-band signals and
      transmit this information to the\n       RTP receiver using the tone representation
      defined in this\n       document (Section 4).  In this mode, the gateway makes
      no attempt\n       to discern the meaning of the tones, but simply distinguishes\n
      \      tones from speech signals.  An end system may use the same\n       approach
      using configured rather than measured frequencies.\n       All tone signals
      in use in the PSTN and meant for human\n       consumption are sequences of
      simple combinations of sine waves,\n       either added or modulated.  (However,
      some modem signals such as\n       the ANSam tone [24] or systems dependent
      on phase shift keying\n       cannot be conveyed so simply.)\n   3.  As a third
      option, a sending gateway can recognize tones such as\n       ringing or busy
      tone or DTMF digit '0', and transmit a code that\n       identifies them using
      the telephone-event payload defined in this\n       document (Section 2).  The
      receiver then produces a tone signal\n       or other indication appropriate
      to the signal.  Generally, since\n       the recognition of signals at the sender
      often depends on their\n       on/off pattern or the sequence of several tones,
      this recognition\n       can take several seconds.  On the other hand, the gateway
      may\n       have access to the actual signalling information that generates\n
      \      the tones and thus can generate the RTP packet immediately,\n       without
      the detour through acoustic signals.\n   The third option (use of named events)
      is the only feasible method\n   for transmitting out-of-band PSTN signals as
      content within RTP\n   sessions.\n"
    title: 1.4.  Events, States, Tone Patterns, and Voice-Encoded Tones
  title: 1.  Introduction
- contents:
  - '2.  RTP Payload Format for Named Telephone Events

    '
  - contents:
    - "2.1.  Introduction\n   The RTP payload format for named telephone events is
      designated as\n   \"telephone-event\", the media type as \"audio/telephone-event\".
      \ In\n   accordance with current practice, this payload format does not have
      a\n   static payload type number, but uses an RTP payload type number\n   established
      dynamically and out-of-band.  The default clock frequency\n   is 8000 Hz, but
      the clock frequency can be redefined when assigning\n   the dynamic payload
      type.\n   Named telephone events are carried as part of the audio stream and\n
      \  MUST use the same sequence number and timestamp base as the regular\n   audio
      channel to simplify the generation of audio waveforms at a\n   gateway.  The
      named telephone-event payload type can be considered to\n   be a very highly-compressed
      audio codec and is treated the same as\n   other codecs.\n"
    title: 2.1.  Introduction
  - contents:
    - '2.2.  Use of RTP Header Fields

      '
    - contents:
      - "2.2.1.  Timestamp\n   The event duration described in Section 2.5 begins
        at the time given\n   by the RTP timestamp.  For events that span multiple
        RTP packets, the\n   RTP timestamp identifies the beginning of the event,
        i.e., several\n   RTP packets may carry the same timestamp.  For long-lasting
        events\n   that have to be split into segments (see below, Section 2.5.1.3),
        the\n   timestamp indicates the beginning of the segment.\n"
      title: 2.2.1.  Timestamp
    - contents:
      - "2.2.2.  Marker Bit\n   The RTP marker bit indicates the beginning of a new
        event.  For long-\n   lasting events that have to be split into segments (see
        below,\n   Section 2.5.1.3), only the first segment will have the marker bit\n
        \  set.\n"
      title: 2.2.2.  Marker Bit
    title: 2.2.  Use of RTP Header Fields
  - contents:
    - "2.3.  Payload Format\n   The payload format for named telephone events is shown
      in Figure 1.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     event     |E|R| volume    |          duration             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                Figure 1: Payload Format for Named Events\n"
    - contents:
      - "2.3.1.  Event Field\n   The event field is a number between 0 and 255 identifying
        a specific\n   telephony event.  An IANA registry of event codes for this
        field has\n   been established (see IANA Considerations, Section 7).  The
        initial\n   content of this registry consists of the events defined in Section
        3.\n"
      title: 2.3.1.  Event Field
    - contents:
      - "2.3.2.  E (\"End\") Bit\n   If set to a value of one, the \"end\" bit indicates
        that this packet\n   contains the end of the event.  For long-lasting events
        that have to\n   be split into segments (see below, Section 2.5.1.3), only
        the final\n   packet for the final segment will have the E bit set.\n"
      title: 2.3.2.  E ("End") Bit
    - contents:
      - "2.3.3.  R Bit\n   This field is reserved for future use.  The sender MUST
        set it to\n   zero, and the receiver MUST ignore it.\n"
      title: 2.3.3.  R Bit
    - contents:
      - "2.3.4.  Volume Field\n   For DTMF digits and other events representable as
        tones, this field\n   describes the power level of the tone, expressed in
        dBm0 after\n   dropping the sign.  Power levels range from 0 to -63 dBm0.
        \ Thus,\n   larger values denote lower volume.  This value is defined only
        for\n   events for which the documentation indicates that volume is\n   applicable.
        \ For other events, the sender MUST set volume to zero and\n   the receiver
        MUST ignore the value.\n"
      title: 2.3.4.  Volume Field
    - contents:
      - "2.3.5.  Duration Field\n   The duration field indicates the duration of the
        event or segment\n   being reported, in timestamp units, expressed as an unsigned
        integer\n   in network byte order.  For a non-zero value, the event or segment\n
        \  began at the instant identified by the RTP timestamp and has so far\n   lasted
        as long as indicated by this parameter.  The event may or may\n   not have
        ended.  If the event duration exceeds the maximum\n   representable by the
        duration field, the event is split into several\n   contiguous segments as
        described below (Section 2.5.1.3).\n   The special duration value of zero
        is reserved to indicate that the\n   event lasts \"forever\", i.e., is a state
        and is considered to be\n   effective until updated.  A sender MUST NOT transmit
        a zero duration\n   for events other than those defined as states.  The receiver
        SHOULD\n   ignore an event report with zero duration if the event is not a\n
        \  state.\n   Events defined as states MAY contain a non-zero duration, indicating\n
        \  that the sender intends to refresh the state before the time duration\n
        \  has elapsed (\"soft state\").\n      For a sampling rate of 8000 Hz, the
        duration field is sufficient\n      to express event durations of up to approximately
        8 seconds.\n"
      title: 2.3.5.  Duration Field
    title: 2.3.  Payload Format
  - contents:
    - "2.4.  Optional Media Type Parameters\n   As indicated in the media type registration
      for named events in\n   Section 7.1.1, the telephone-event media type supports
      two optional\n   parameters: the \"events\" parameter and the \"rate\" parameter.\n
      \  The \"events\" parameter lists the events supported by the\n   implementation.
      \ Events are listed as one or more comma-separated\n   elements.  Each element
      can be either a single integer providing the\n   value of an event code or an
      integer followed by a hyphen and a\n   larger integer, presenting a range of
      consecutive event code values.\n   The list does not have to be sorted.  No
      white space is allowed in\n   the argument.  The union of all of the individual
      event codes and\n   event code ranges designates the complete set of event numbers\n
      \  supported by the implementation.\n   The \"rate\" parameter describes the
      sampling rate, in Hertz, and hence\n   the units for the RTP timestamp and event
      duration fields.  The\n   number is written as an integer.  If omitted, the
      default value is\n   8000 Hz.\n"
    - contents:
      - "2.4.1.  Relationship to SDP\n   The recommended mapping of media type optional
        parameters to SDP is\n   given in Section 3 of RFC 3555 [6].  The \"rate\"
        media type parameter\n   for the named event payload type follows this convention:
        it is\n   expressed as usual as the <clock rate> component of the a=rtpmap:\n
        \  attribute line.\n   The \"events\" media type parameter deviates from the
        convention\n   suggested in RFC 3555 because it omits the string \"events=\"
        before\n   the list of supported events.\n      a=fmtp:<format> <list of values>\n
        \  The list of values has the format and meaning described above.\n   For
        example, if the payload format uses the payload type number 100,\n   and the
        implementation can handle the DTMF tones (events 0 through\n   15) and the
        dial and ringing tones (assuming as an example that these\n   were defined
        as events with codes 66 and 70, respectively), it would\n   include the following
        description in its SDP message:\n      m=audio 12346 RTP/AVP 100\n      a=rtpmap:100
        telephone-event/8000\n      a=fmtp:100 0-15,66,70\n   The following sample
        media type definition corresponds to the SDP\n   example above:\n      audio/telephone-event;events=\"0-15,66,70\";rate=\"8000\"\n"
      title: 2.4.1.  Relationship to SDP
    title: 2.4.  Optional Media Type Parameters
  - contents:
    - "2.5.  Procedures\n   This section defines the procedures associated with the
      named event\n   payload type.  Additional procedures may be specified in the\n
      \  documentation associated with specific event codes.\n"
    - contents:
      - '2.5.1.  Sending Procedures

        '
      - contents:
        - "2.5.1.1.  Negotiation of Payloads\n   Events are usually sent in combination
          with or alternating with other\n   payload types.  Payload negotiation may
          specify separate event and\n   other payload streams, or it may specify
          a combined stream that mixes\n   other payload types with events using RFC
          2198 [2] redundancy\n   headers.  The purpose of using a combined stream
          may be for debugging\n   or to ease the transition between general audio
          and events.\n   Negotiation of payloads between sender and receiver is achieved
          by\n   out-of-band means, using SDP, for example.\n   The sender SHOULD
          indicate what events it supports, using the\n   optional \"events\" parameter
          associated with the telephone-event media\n   type.  If the sender receives
          an \"events\" parameter from the\n   receiver, it MUST restrict the set
          of events it sends to those listed\n   in the received \"events\" parameter.
          \ For backward compatibility, if\n   no \"events\" parameter is received,
          the sender SHOULD assume support\n   for the DTMF events 0-15 but for no
          other events.\n   Events MAY be sent in combination with older events using
          RFC 2198\n   [2] redundancy.  Section 2.5.1.4 describes how this can be
          used to\n   avoid packet and RTP header overheads when retransmitting final
          event\n   reports.  Section 2.6 discusses the use of additional levels of
          RFC\n   2198 redundancy to increase the probability that at least one copy
          of\n   the report of the end of an event reaches the receiver.  The\n   following
          SDP shows an example of such usage, where G.711 audio\n   appears in a separate
          stream, and the primary component of the\n   redundant payload is events.\n
          \     m=audio 12344 RTP/AVP 99\n      a=rtpmap:99 pcmu/8000\n      m=audio
          12346 RTP/AVP 100 101\n      a=rtpmap:100 red/8000/1\n      a=fmtp:100 101/101/101\n
          \     a=rtpmap:101 telephone-event/8000\n      a=fmtp:101 0-15\n   When
          used in accordance with the offer-answer model (RFC 3264 [4]),\n   the SDP
          a=ptime: attribute indicates the packetization period that\n   the author
          of the session description expects when receiving media.\n   This value
          does not have to be the same in both directions.  The\n   appropriate period
          may vary with the application, since increased\n   packetization periods
          imply increased end-to-end response times in\n   instances where one end
          responds to events reported from the other.\n   Negotiation of telephone-events
          sessions using SDP MAY specify such\n   differences by separating events
          corresponding to different\n   applications into different streams.  In
          the example below, events\n   0-15 are DTMF events, which have a fairly
          wide tolerance on timing.\n   Events 32-49 and 52-60 are events related
          to data transmission and\n   are subject to end-to-end response time considerations.
          \ As a result,\n   they are assigned a smaller packetization period than
          the DTMF\n   events.\n      m=audio 12344 RTP/AVP 99\n      a=rtpmap:99
          telephone-event/8000\n      a=fmtp:99 0-15\n      a=ptime:50\n      m=audio
          12346 RTP/AVP 100\n      a=rtpmap:100 telephone-event/8000\n      a=fmtp:100
          32-49,52-60\n      a=ptime:30\n   For further discussion of packetization
          periods see Section 2.6.3.\n"
        title: 2.5.1.1.  Negotiation of Payloads
      - contents:
        - "2.5.1.2.  Transmission of Event Packets\n   DTMF digits and other named
          telephone events are carried as part of\n   the audio stream, and they MUST
          use the same sequence number and\n   timestamp base as the regular audio
          channel to simplify the\n   generation of audio waveforms at a gateway.\n
          \  An audio source SHOULD start transmitting event packets as soon as it\n
          \  recognizes an event and continue to send updates until the event has\n
          \  ended.  The update packets MUST have the same RTP timestamp value as\n
          \  the initial packet for the event, but the duration MUST be increased\n
          \  to reflect the total cumulative duration since the beginning of the\n
          \  event.\n   The first packet for an event MUST have the M bit set.  The
          final\n   packet for an event MUST have the E bit set, but setting of the
          \"E\"\n   bit MAY be deferred until the final packet is retransmitted (see\n
          \  Section 2.5.1.4).  Intermediate packets for an event MUST NOT have\n
          \  either the M bit or the E bit set.\n   Sending of a packet with the E
          bit set is OPTIONAL if the packet\n   reports two events that are defined
          as mutually exclusive states, or\n   if the final packet for one state is
          immediately followed by a packet\n   reporting a mutually exclusive state.
          \ (For events defined as states,\n   the appearance of a mutually exclusive
          state implies the end of the\n   previous state.)\n   A source has wide
          latitude as to how often it sends event updates.  A\n   natural interval
          is the spacing between non-event audio packets.\n   (Recall that a single
          RTP packet can contain multiple audio frames\n   for frame-based codecs
          and that the packet interval can vary during a\n   session.)  Alternatively,
          a source MAY decide to use a different\n   spacing for event updates, with
          a value of 50 ms RECOMMENDED.\n   Timing information is contained in the
          RTP timestamp, allowing\n   precise recovery of inter-event times.  Thus,
          the sender does not in\n   theory need to maintain precise or consistent
          time intervals between\n   event packets.  However, the sender SHOULD minimize
          the need for\n   buffering at the receiving end by sending event reports
          at constant\n   intervals.\n      DTMF digits and other tone events are
          sent incrementally to avoid\n      having the receiver wait for the completion
          of the event.  In some\n      cases (for example, data session startup protocols),
          waiting until\n      the end of a tone before reporting it will cause the
          session to\n      fail.  In other cases, it will simply cause undesirable
          delays in\n      playout at the receiving end.\n   For robustness, the sender
          SHOULD retransmit \"state\" events\n   periodically.\n"
        title: 2.5.1.2.  Transmission of Event Packets
      - contents:
        - "2.5.1.3.  Long-Duration Events\n   If an event persists beyond the maximum
          duration expressible in the\n   duration field (0xFFFF), the sender MUST
          send a packet reporting this\n   maximum duration but MUST NOT set the E
          bit in this packet.  The\n   sender MUST then begin reporting a new \"segment\"
          with the RTP\n   timestamp set to the time at which the previous segment
          ended and the\n   duration set to the cumulative duration of the new segment.
          \ The M\n   bit of the first packet reporting the new segment MUST NOT be
          set.\n   The sender MUST repeat this procedure as required until the end
          of\n   the complete event has been reached.  The final packet for the\n
          \  complete event MUST have the E bit set (either on initial\n   transmission
          or on retransmission as described below).\n"
        - contents:
          - "2.5.1.3.1.  Exceptional Procedure for Combined Payloads\n   If events
            are combined as a redundant payload with another payload\n   type using
            RFC 2198 [2] redundancy, the above procedure SHALL be\n   applied, but
            using a maximum duration that ensures that the timestamp\n   offset of
            the oldest generation of events in an RFC 2198 packet never\n   exceeds
            0x3FFF.  If the sender is using a constant packetization\n   period, the
            maximum segment duration can be calculated from the\n   following formula:\n
            \     maximum duration = 0x3FFF - (R-1)*(packetization period in\n      timestamp
            units)\n   where R is the highest redundant layer number consisting of
            event\n   payload.\n      The RFC 2198 redundancy header timestamp offset
            value is only 14\n      bits, compared with the 16 bits in the event payload
            duration\n      field.  Since with other payloads the RTP timestamp typically\n
            \     increments for each new sample, the timestamp offset value becomes\n
            \     limiting on reported event duration.  The limit becomes more\n      constraining
            when older generations of events are also included in\n      the combined
            payload.\n"
          title: 2.5.1.3.1.  Exceptional Procedure for Combined Payloads
        title: 2.5.1.3.  Long-Duration Events
      - contents:
        - "2.5.1.4.  Retransmission of Final Packet\n   The final packet for each
          event and for each segment SHOULD be sent a\n   total of three times at
          the interval used by the source for updates.\n   This ensures that the duration
          of the event or segment can be\n   recognized correctly even if an instance
          of the last packet is lost.\n   A sender MAY use RFC 2198 [2] with up to
          two levels of redundancy to\n   combine retransmissions with reports of
          new events, thus saving on\n   header overheads.  In this usage, the primary
          payload is new event\n   reports, while the first and (if necessary) second
          levels of\n   redundancy report first and second retransmissions of final
          event\n   reports.  Within a session negotiated to allow such usage, packets\n
          \  containing the RFC 2198 payload SHOULD NOT be sent except when both\n
          \  primary and retransmitted reports are to be included.  All other\n   packets
          of the session SHOULD contain only the simple, non-redundant\n   telephone-event
          payload.  Note that the expected proportion of simple\n   versus redundant
          packets affects the order in which they should be\n   specified on an SDP
          m= line.\n      There is little point in sending initial or interim event
          reports\n      redundantly because each succeeding packet describes the
          event\n      fully (except for typically irrelevant variations in volume).\n
          \  A sender MAY delay setting the E bit until retransmitting the last\n
          \  packet for a tone, rather than setting the bit on its first\n   transmission.
          \ This avoids having to wait to detect whether the tone\n   has indeed ended.
          \ Once the sender has set the E bit for a packet, it\n   MUST continue to
          set the E bit for any further retransmissions of\n   that packet.\n"
        title: 2.5.1.4.  Retransmission of Final Packet
      - contents:
        - "2.5.1.5.  Packing Multiple Events into One Packet\n   Multiple named events
          can be packed into a single RTP packet if and\n   only if the events are
          consecutive and contiguous, i.e., occur\n   without overlap and without
          pause between them, and if the last event\n   packed into a packet occurs
          quickly enough to avoid excessive delays\n   at the receiver.\n   This approach
          is similar to having multiple frames of frame-based\n   audio in one RTP
          packet.\n   The constraint that packed events not overlap implies that events\n
          \  designated as states can be followed in a packet only by other state\n
          \  events that are mutually exclusive to them.  The constraint itself is\n
          \  needed so that the beginning time of each event can be calculated at\n
          \  the receiver.\n   In a packet containing events packed in this way, the
          RTP timestamp\n   MUST identify the beginning of the first event or segment
          in the\n   packet.  The M bit MUST be set if the packet records the beginning
          of\n   at least one event.  (This will be true except when the packet\n
          \  carries the end of one segment and the beginning of the next segment\n
          \  of the same long-lasting event.)  The E bit and duration for each\n   event
          in the packet MUST be set using the same rules as if that event\n   were
          the only event contained in the packet.\n"
        title: 2.5.1.5.  Packing Multiple Events into One Packet
      - contents:
        - "2.5.1.6.  RTP Sequence Number\n   The RTP sequence number MUST be incremented
          by one in each successive\n   RTP packet sent.  Incrementing applies to
          retransmitted as well as\n   initial instances of event reports, to permit
          the receiver to detect\n   lost packets for RTP Control Protocol (RTCP)
          receiver reports.\n"
        title: 2.5.1.6.  RTP Sequence Number
      title: 2.5.1.  Sending Procedures
    - contents:
      - '2.5.2.  Receiving Procedures

        '
      - contents:
        - "2.5.2.1.  Indication of Receiver Capabilities Using SDP\n   Receivers can
          indicate which named events they can handle, for\n   example, by using the
          Session Description Protocol (RFC 4566 [9]).\n   SDP descriptions using
          the event payload MUST contain an fmtp format\n   attribute that lists the
          event values that the receiver can process.\n"
        title: 2.5.2.1.  Indication of Receiver Capabilities Using SDP
      - contents:
        - "2.5.2.2.  Playout of Tone Events\n   In the gateway scenario, an Internet
          telephony gateway connecting a\n   packet voice network to the PSTN re-creates
          the DTMF or other tones\n   and injects them into the PSTN.  Since, for
          example, DTMF digit\n   recognition takes several tens of milliseconds,
          the first few\n   milliseconds of a digit will arrive as regular audio packets.
          \ Thus,\n   careful time and power (volume) alignment between the audio
          samples\n   and the events is needed to avoid generating spurious digits
          at the\n   receiver.  The receiver may also choose to delay playout of the
          tones\n   by some small interval after playout of the preceding audio has\n
          \  ended, to ensure that downstream equipment can discriminate the tones\n
          \  properly.\n   Some implementations send events and encoded audio packets
          (e.g.,\n   PCMU or the codec used for speech signals) for the same time
          instant\n   for the duration of the event.  It is RECOMMENDED that gateways\n
          \  render only the telephone-event payload once it is received, since\n
          \  the audio may contain spurious tones introduced by the audio\n   compression
          algorithm.  However, it is anticipated that these extra\n   tones in general
          should not interfere with recognition at the far\n   end.\n   Receiver implementations
          MAY use different algorithms to create\n   tones, including the two described
          here.  (Note that not all\n   implementations have the need to re-create
          a tone; some may only care\n   about recognizing the events.)  With either
          algorithm, a receiver may\n   impose a playout delay to provide robustness
          against packet loss or\n   delay.  The tradeoff between playout delay and
          other factors is\n   discussed further in Section 2.6.3.\n   In the first
          algorithm, the receiver simply places a tone of the\n   given duration in
          the audio playout buffer at the location indicated\n   by the timestamp.
          \ As additional packets are received that extend the\n   same tone, the
          waveform in the playout buffer is extended\n   accordingly.  (Care has to
          be taken if audio is mixed, i.e., summed,\n   in the playout buffer rather
          than simply copied.)  Thus, if a packet\n   in a tone lasting longer than
          the packet interarrival time gets lost\n   and the playout delay is short,
          a gap in the tone may occur.\n   Alternatively, the receiver can start a
          tone and play it until one of\n   the following occurs:\n   o  it receives
          a packet with the E bit set;\n   o  it receives the next tone, distinguished
          by a different timestamp\n      value (noting that new segments of long-duration
          events also\n      appear with a new timestamp value);\n   o  it receives
          an alternative non-event media stream (assuming none\n      was being received
          while the event stream was active); or\n   o  a given time period elapses.\n
          \  This is more robust against packet loss, but may extend the tone\n   beyond
          its original duration if all retransmissions of the last\n   packet in an
          event are lost.  Limiting the time period of extending\n   the tone is necessary
          to avoid that a tone \"gets stuck\".  This\n   algorithm is not a license
          for senders to set the duration field to\n   zero; it MUST be set to the
          current duration as described, since this\n   is needed to create accurate
          events if the first event packet is\n   lost, among other reasons.\n   Regardless
          of the algorithm used, the tone SHOULD NOT be extended by\n   more than
          three packet interarrival times.  A slight extension of\n   tone durations
          and shortening of pauses is generally harmless.\n   A receiver SHOULD NOT
          restart a tone once playout has stopped.  It\n   MAY do so if the tone is
          of a type meant for human consumption or is\n   one for which interruptions
          will not cause confusion at the receiving\n   device.\n   If a receiver
          receives an event packet for an event that it is not\n   currently playing
          out and the packet does not have the M bit set,\n   earlier packets for
          that event have evidently been lost.  This can be\n   confirmed by gaps
          in the RTP sequence number.  The receiver MAY\n   determine on the basis
          of retained history and the timestamp and\n   event code of the current
          packet that it corresponds to an event\n   already played out and lapsed.
          \ In that case, further reports for the\n   event MUST be ignored, as indicated
          in the previous paragraph.\n   If, on the other hand, the event has not
          been played out at all, the\n   receiver MAY attempt to play the event out
          to the complete duration\n   indicated in the event report.  The appropriate
          behavior will depend\n   on the event type, and requires consideration of
          the relationship of\n   the event to audio media flows and whether correct
          event duration is\n   essential to the correct operation of the media session.\n
          \  A receiver SHOULD NOT rely on a particular event packet spacing, but\n
          \  instead MUST use the event timestamps and durations to determine\n   timing
          and duration of playout.\n   The receiver MUST calculate jitter for RTCP
          receiver reports based on\n   all packets with a given timestamp.  Note:
          The jitter value should\n   primarily be used as a means for comparing the
          reception quality\n   between two users or two time periods, not as an absolute
          measure.\n   If a zero volume is indicated for an event for which the volume
          field\n   is defined, then the receiver MAY reconstruct the volume from
          the\n   volume of non-event audio or MAY use the nominal value specified
          by\n   the ITU Recommendation or other document defining the tone.  This\n
          \  ensures backwards compatibility with RFC 2833 [12], where the volume\n
          \  field was defined only for DTMF events.\n"
        title: 2.5.2.2.  Playout of Tone Events
      - contents:
        - "2.5.2.3.  Long-Duration Events\n   If an event report is received with
          duration equal to the maximum\n   duration expressible in the duration field
          (0xFFFF) and the E bit for\n   the report is not set, the event report may
          mark the end of a segment\n   generated according to the procedures of Section
          2.5.1.3.  If another\n   report for the same event type is received, the
          receiver MUST compare\n   the RTP timestamp for the new event with the sum
          of the RTP timestamp\n   of the previous report plus the duration (0xFFFF).
          \ The receiver uses\n   the absence of a gap between the events to detect
          that it is\n   receiving a single long-duration event.\n   The total duration
          of a long-duration event is (obviously) the sum of\n   the durations of
          the segments used to report it.  This is equal to\n   the duration of the
          final segment (as indicated in the final packet\n   for that segment), plus
          0xFFFF multiplied by the number of segments\n   preceding the final segment.\n"
        - contents:
          - "2.5.2.3.1.  Exceptional Procedure for Combined Payloads\n   If events
            are combined as a redundant payload with another payload\n   type using
            RFC 2198 [2] redundancy, segments are generated at\n   intervals of 0x3FFF
            or less, rather than 0xFFFF, as required by the\n   procedures of Section
            2.5.1.3.1 in this case.  If a receiver is using\n   the events component
            of the payload, event duration may be only an\n   approximate indicator
            of division into segments, but the lack of an E\n   bit and the adjacency
            of two reports with the same event code are\n   strong indicators in themselves.\n"
          title: 2.5.2.3.1.  Exceptional Procedure for Combined Payloads
        title: 2.5.2.3.  Long-Duration Events
      - contents:
        - "2.5.2.4.  Multiple Events in a Packet\n   The procedures of Section 2.5.1.5
          require that if multiple events are\n   reported in the same packet, they
          are contiguous and non-overlapping.\n   As a result, it is not strictly
          necessary for the receiver to know\n   the start times of the events following
          the first one in order to\n   play them out -- it needs only to respect
          the duration reported for\n   each event.  Nevertheless, if knowledge of
          the start time for a given\n   event after the first one is required, it
          is equal to the sum of the\n   start time of the preceding event plus the
          duration of the preceding\n   event.\n"
        title: 2.5.2.4.  Multiple Events in a Packet
      - contents:
        - "2.5.2.5.  Soft States\n   If the duration of a soft state event expires,
          the receiver SHOULD\n   consider the value of the state to be \"unknown\"
          unless otherwise\n   indicated in the event documentation.\n"
        title: 2.5.2.5.  Soft States
      title: 2.5.2.  Receiving Procedures
    title: 2.5.  Procedures
  - contents:
    - "2.6.  Congestion and Performance\n   Packet transmission through the Internet
      is marked by occasional\n   periods of congestion lasting on the order of second,
      during which\n   network delay, jitter, and packet loss are all much higher
      than they\n   are in between these periods.  Reference [28] characterizes this\n
      \  phenomenon.  Well-behaved applications are expected, preferably, to\n   reduce
      their demands on the network during such periods of\n   congestion.  At the
      least, they should not increase their demands.\n   This section explores both
      application performance and the\n   possibilities for good behavior in the face
      of congestion.\n"
    - contents:
      - "2.6.1.  Performance Requirements\n   Typically, an implementation of the
        telephone-event payload will aim\n   to limit the rate at which each of the
        following impairments occurs:\n   a.  an event encoded at the sender fails
        to be played out at the\n       receiver, either because the event report
        is lost or because it\n       arrives after playout of later content has started;\n
        \  b.  the start of playout of an event at the receiver is delayed\n       relative
        to other events or other media operating on the same\n       timestamp base;\n
        \  c.  the duration of playout of a given event differs from the correct\n
        \      duration as detected at the sender by more than a given amount;\n   d.
        \ gaps occur in playout of a given event;\n   e.  end-to-end delay for the
        media stream exceeds a given value.\n   The relative importance of these constraints
        varies between\n   applications.\n"
      title: 2.6.1.  Performance Requirements
    - contents:
      - "2.6.2.  Reliability Mechanisms\n   To improve reliability, all payload types
        including telephone-events\n   can use a jitter buffer, i.e., impose a playout
        delay, at the\n   receiving end.  This mechanism addresses the first four
        requirements\n   listed above, but at the expense of the last one.\n   The
        named event procedures provide two complementary redundancy\n   mechanisms
        to deal with lost packets:\n   a.  Intra-event updates:\n       Events that
        last longer than one packetization period (e.g., 50\n       ms) are updated
        periodically, so that the receiver can\n       reconstruct the event and its
        duration if it receives any of the\n       update packets, albeit with delay.\n
        \      During an event, the RTP event payload format provides\n       incremental
        updates on the event.  The error resiliency afforded\n       by this mechanism
        depends on whether the first or second\n       algorithm in Section 2.5.2.2
        is used and on the playout delay at\n       the receiver.  For example, if
        the receiver uses the first\n       algorithm and only places the current
        duration of tone signal in\n       the playout buffer, for a playout delay
        of 120 ms and a\n       packetization interval of 50 ms, two packets in a
        row can get\n       lost without causing a premature end of the tone generated.\n
        \  b.  Repeat last event packet:\n       As described in Section 2.5.1.4,
        the last report for an event is\n       transmitted a total of three times.
        \ This mechanism adds\n       robustness to the reporting of the end of an
        event.\n       It may be necessary to extend the level of redundancy to achieve\n
        \      requirement a) (in Section 2.6.1) in a specific network\n       environment.
        \ Taking the 25-30% loss rate during congestion\n       periods illustrated
        in [28] as typical, and setting an objective\n       that at least 99% of
        end-of-event reports will eventually get\n       through to the receiver under
        these conditions, simple\n       probability calculations indicate that each
        event completion has\n       to be reported four times.  This is one more
        level of redundancy\n       than required by the basic \"Repeat last event
        packet\" algorithm.\n       Of course, the objective is probably unrealistically
        stringent;\n       it was chosen to make a point.\n       Where Section 2.5.1.4
        indicates that it is appropriate to use the\n       RFC 2198 [2] audio redundancy
        mechanism to carry retransmissions\n       of final event reports, this mechanism
        MAY also be used to extend\n       the number of final report retransmissions.
        \ This is done by\n       using more than two levels of redundancy when necessary.
        \ The use\n       of RFC 2198 helps to mitigate the extra bandwidth demands
        that\n       would be imposed simply by retransmitting final event packets\n
        \      more than three times.\n   These two redundancy mechanisms clearly
        address requirement a) in the\n   previous section.  They also help meet requirement
        c), to the extent\n   that the redundant packets arrive before playout of
        the events they\n   report is due to expire.  They are not helpful in meeting
        the other\n   requirements, although they do not directly cause impairments\n
        \  themselves in the way that a large jitter buffer increases end-to-end\n
        \  delay.\n   The playout algorithm is an additional mechanism for meeting
        the\n   performance requirements.  In particular, using the second algorithm\n
        \  in Section 2.5.2.2 will meet requirement d) of the previous section\n   by
        preventing gaps in playout, but at the potential cost of increases\n   in
        duration (requirement c)).\n   Finally, there is an interaction between the
        packetization period\n   used by a sender, the playout delay used by the receiver,
        and the\n   vulnerability of an event flow to packet losses.  Assuming packet\n
        \  losses are independent, a shorter packetization interval means that\n   the
        receiver can use a smaller playout delay to recover from a given\n   number
        of consecutive packet losses, at any stage of event playout.\n   This improves
        end-to-end delays in applications where that matters.\n   In view of the tradeoffs
        between the different reliability\n   mechanisms, documentation of specific
        events SHOULD include a\n   discussion of the appropriate design decisions
        for the applications\n   of those events.  This mandate is repeated in the
        section on IANA\n   considerations.\n"
      title: 2.6.2.  Reliability Mechanisms
    - contents:
      - "2.6.3.  Adjusting to Congestion\n   So far, the discussion has been about
        meeting performance\n   requirements.  However, there is also the question
        of whether\n   applications of events can adapt to congestion to the point
        that they\n   reduce their demands on the networks during congestion.  In
        theory\n   this can be done for events by increasing the packetization interval,\n
        \  so that fewer packets are sent per second.  This has to be\n   accompanied
        by an increased playout delay at the receiving end.\n   Coordination between
        the two ends for this purpose is an interesting\n   issue in itself.  If it
        is done, however, such an action implies a\n   one-time gap or extended playout
        of an event when the packetization\n   interval is first extended, as well
        as increased end-to-end delay\n   during the whole period of increased playout
        delay.\n   The benefit from such a measure varies primarily depending on the\n
        \  average duration of the events being handled.  In the worst case, as\n
        \  a first example shows, the reduction in aggregate bandwidth usage due\n
        \  to an increased packetization interval may be quite modest.  Suppose\n
        \  the average event duration is 3.33 ms (V.21 bits, for instance).\n   Suppose
        further that four transmissions in total are required for a\n   given event
        report to meet the loss objective.  Table 1 shows the\n   impact of varying
        packetization intervals on the aggregate bit rate\n   of the media stream.\n
        \  +--------------------+-----------+---------------+------------------+\n
        \  | Packetization      | Packets/s |     IP Packet |     Total IP Bit |\n
        \  | Interval (ms)      |           |   Size (bits) |    Rate (bits/s) |\n
        \  +--------------------+-----------+---------------+------------------+\n
        \  | 50                 |        20 |          2440 |            48800 |\n
        \  | 33.3               |        30 |          1800 |            54000 |\n
        \  | 25                 |        40 |          1480 |            59200 |\n
        \  | 20                 |        50 |          1288 |            64400 |\n
        \  +--------------------+-----------+---------------+------------------+\n
        \    Table 1: Data Rate at the IP Level versus Packetization Interval\n                (three
        retransmissions, 3.33 ms per event)\n   As can be seen, a doubling of the
        interval (from 25 to 50 ms) drops\n   aggregate bit rate by about 20% while
        increasing end-to-end delay by\n   25 ms and causing a one-time gap of the
        same amount.  (Extending the\n   playout of a specific V.21 tone event is
        out of the question, so the\n   first algorithm of Section 2.5.2.2 must be
        used in this application.)\n   The reduction in number of packets per second
        with longer\n   packetization periods is countered by the increase in packet
        size due\n   to the increase in number of events per packet.\n   For events
        of longer duration, the reduction in bandwidth is more\n   proportional to
        the increase in packetization interval.  The loss of\n   final event reports
        may also be less critical, so that lower\n   redundancy levels are acceptable.
        \ Table 2 shows similar data to\n   Table 1, but assuming 70-ms events separated
        by 50 ms of silence (as\n   in an idealized DTMF-based text messaging session)
        with only the\n   basic two retransmissions for event completions.\n   +--------------------+-----------+---------------+------------------+\n
        \  | Packetization      | Packets/s |     IP Packet |     Total IP Bit |\n
        \  | Interval (ms)      |           |   Size (bits) |    Rate (bits/s) |\n
        \  +--------------------+-----------+---------------+------------------+\n
        \  | 50                 |        20 |       448/520 |            10040 |\n
        \  | 33.3               |        30 |       448/520 |            14280 |\n
        \  | 25                 |        40 |       448/520 |            18520 |\n
        \  | 20                 |        50 |           448 |            22400 |\n
        \  +--------------------+-----------+---------------+------------------+\n
        \    Table 2: Data Rate at the IP Level versus Packetization Interval\n       (two
        retransmissions, 70 ms per event, 50 ms between events)\n   In the third column
        of the table, the packet size is 448 bits when\n   only one event is being
        reported and 520 bits when the previous event\n   is also included.  No more
        than one level of redundancy is needed up\n   to a packetization interval
        of 50 ms, although at that point most\n   packets are reporting two events.
        \ Longer intervals require a second\n   level of redundancy in at least some
        packets.\n"
      title: 2.6.3.  Adjusting to Congestion
    title: 2.6.  Congestion and Performance
  title: 2.  RTP Payload Format for Named Telephone Events
- contents:
  - "3.  Specification of Event Codes for DTMF Events\n   This document defines one
    class of named events: DTMF tones.\n"
  - contents:
    - "3.1.  DTMF Applications\n   DTMF signalling [10] is typically generated by
      a telephone set or\n   possibly by a PBX (Private branch telephone exchange).
      \ DTMF digits\n   may be consumed by entities such as gateways or application
      servers\n   in the IP network, or by entities such as telephone switches or
      IVRs\n   in the circuit switched network.\n   The DTMF events support two possible
      applications at the sending end:\n   1.  The Internet telephony gateway detects
      DTMF on the incoming\n       circuits and sends the RTP payload described here
      instead of\n       regular audio packets.  The gateway likely has the necessary\n
      \      digital signal processors and algorithms, as it often needs to\n       detect
      DTMF, e.g., for two-stage dialing.  Having the gateway\n       detect tones
      relieves the receiving Internet end system from\n       having to do this work
      and also avoids having low bit-rate codecs\n       like G.723.1 [20] render
      DTMF tones unintelligible.\n   2.  An Internet end system such as an \"Internet
      phone\" can emulate\n       DTMF functionality without concerning itself with
      generating\n       precise tone pairs and without imposing the burden of tone\n
      \      recognition on the receiver.\n   A similar distinction occurs at the
      receiving end.\n   1.  In the gateway scenario, an Internet telephony gateway
      connecting\n       a packet voice network to the PSTN re-creates the DTMF tones
      or\n       other telephony events and injects them into the PSTN.\n   2.  In
      the end system scenario, the DTMF events are consumed by the\n       receiving
      entity itself.\n   In the most common application, DTMF tones are sent in one
      direction\n   only, typically from the calling end.  The consuming device is
      most\n   commonly an IVR.  DTMF may alternate with voice from either end.  In\n
      \  most cases, the only constraint on tone duration is that it exceed a\n   minimum
      value.  However, in some cases a long-duration tone (in\n   excess of 1-2 seconds)
      has special significance.\n      ITU-T Recommendation Q.24 [11], Table A-1,
      indicates that the\n      legacy switching equipment in the countries surveyed
      expects a\n      minimum recognizable signal duration of 40 ms, a minimum pause\n
      \     between signals of 40 ms, and a maximum signalling rate of 8 to 10\n      digits
      per second depending on the country.  Human-generated DTMF\n      signals, of
      course, are generally longer with larger pauses\n      between them.\n   DTMF
      tones may also be used for text telephony.  This application is\n   documented
      in ITU-T Recommendation V.18 [27] Annex B.  In this case,\n   DTMF is sent alternately
      from either end (half-duplex mode), with a\n   minimum 300-ms turn-around time.
      \ The only constraints on tone\n   durations in this application are that they
      and the pauses between\n   them must exceed specified minimum values.  It is
      RECOMMENDED that a\n   gateway at the sending end be capable of detecting DTMF
      signals as\n   specified by V.18 Annex B (tones and pauses >=40 ms), but should
      send\n   event durations corresponding to those of a V.18 DTMF sender (tones\n
      \  >=70 ms, pauses >=50 ms).  This may occasionally imply some degree of\n   buffering
      of outgoing events, but if the source terminal conforms to\n   V.18 Annex B,
      this should not get out of hand.\n   Since minor increases in tone duration
      are harmless for all\n   applications of DTMF, but unintended breaks in playout
      of a DTMF\n   digit can confuse the receiving endpoint by creating the appearance\n
      \  of extra digits, receiving applications that are converting DTMF\n   events
      back to tones SHOULD use the second playout algorithm rather\n   than the first
      one in Section 2.5.2.2.  This provides some robustness\n   against packet loss
      or congestion.\n"
    title: 3.1.  DTMF Applications
  - contents:
    - "3.2.  DTMF Events\n   Table 3 shows the DTMF-related event codes within the
      telephone-event\n   payload format.  The DTMF digits 0-9 and * and # are commonly\n
      \  supported.  DTMF digits A through D are less frequently encountered,\n   typically
      in special applications such as military networks.\n                    +-------+--------+------+---------+\n
      \                   | Event | Code   | Type | Volume? |\n                    +-------+--------+------+---------+\n
      \                   | 0--9  | 0--9   | tone | yes     |\n                    |
      *     | 10     | tone | yes     |\n                    | #     | 11     | tone
      | yes     |\n                    | A--D  | 12--15 | tone | yes     |\n                    +-------+--------+------+---------+\n
      \                       Table 3: DTMF Named Events\n"
    title: 3.2.  DTMF Events
  - contents:
    - "3.3.  Congestion Considerations\n   The key considerations for the delivery
      of DTMF events are\n   reliability and avoidance of unintended breaks within
      the playout of\n   a given tone.  End-to-end round-trip delay is not a major\n
      \  consideration except in the special case where DTMF tones are being\n   used
      for text telephony.  Assuming that, as recommended in\n   Section 3.1 above,
      the second playout algorithm of Section 2.5.2.2 is\n   in use, a temporary increase
      in packetization interval to as much as\n   100 ms or double the normal interval,
      whichever is less, should be\n   harmless.\n"
    title: 3.3.  Congestion Considerations
  title: 3.  Specification of Event Codes for DTMF Events
- contents:
  - '4.  RTP Payload Format for Telephony Tones

    '
  - contents:
    - "4.1.  Introduction\n   As an alternative to describing tones and events by
      name, as\n   described in Section 2, it is sometimes preferable to describe
      them\n   by their waveform properties.  In particular, recognition is faster\n
      \  than for naming signals since it does not depend on recognizing\n   durations
      or pauses.\n   There is no single international standard for telephone tones
      such as\n   dial tone, ringing (ringback), busy, congestion (\"fast-busy\"),\n
      \  special announcement tones, or some of the other special tones, such\n   as
      payphone recognition, call waiting or record tone.  However, ITU-T\n   Recommendation
      E.180 [18] notes that across all countries, these\n   tones share a number of
      characteristics:\n   o  Telephony tones consist of either a single tone, the
      addition of\n      two or three tones or the modulation of two tones.  (Almost
      all\n      tones use two frequencies; only the Hungarian \"special dial tone\"\n
      \     has three.)  Tones that are mixed have the same amplitude and do\n      not
      decay.\n   o  In-band tones for telephony events are in the range of 25 Hz\n
      \     (ringing tone in Angola) to 2600 Hz (the tone used for line\n      signalling
      in SS No. 5 and R1).  The in-band telephone frequency\n      range is limited
      to 3400 Hz.  R2 defines a 3825 Hz out-of-band\n      tone for line signalling
      on analogue trunks.  (The piano has a\n      range from 27.5 to 4186 Hz.)\n
      \  o  Modulation frequencies range between 15 (ANSam tone) to 480 Hz\n      (Jamaica).
      \ Non-integer frequencies are used only for frequencies\n      of 16 2/3 and
      33 1/3 Hz.\n   o  Tones that are not continuous have durations of less than
      four\n      seconds.\n   o  ITU Recommendation E.180 [18] notes that different
      telephone\n      companies require a tone accuracy of between 0.5 and 1.5%.
      \ The\n      Recommendation suggests a frequency tolerance of 1%.\n"
    title: 4.1.  Introduction
  - contents:
    - "4.2.  Examples of Common Telephone Tone Signals\n   As an aid to the implementor,
      Table 4 summarizes some common tones.\n   The rows labeled \"ITU ...\" refer
      to ITU-T Recommendation E.180 [18].\n   In these rows, the on and off durations
      are suggested ranges within\n   which local standards would set specific values.
      \ The symbol \"+\" in\n   the table indicates addition of the tones, without
      modulation, while\n   \"*\" indicates amplitude modulation.\n   +-------------------------+-------------------+----------+----------+\n
      \  | Tone Name               | Frequency         | On Time  | Off Time |\n   |
      \                        |                   | (s)      | (s)      |\n   +-------------------------+-------------------+----------+----------+\n
      \  | CNG                     | 1100              | 0.5      | 3.0      |\n   |
      V.25 CT                 | 1300              | 0.5      | 2.0      |\n   | CED
      \                    | 2100              | 3.3      | --       |\n   | ANS                     |
      2100              | 3.3      | --       |\n   | ANSam                   | 2100*15
      \          | 3.3      | --       |\n   | V.21 bit                | 980 or 1180
      or    | 0.00333  | --       |\n   |                         | 1650 or 1850      |
      \         |          |\n   | -------------           | ----------        | --------
      | -------- |\n   | ITU dial tone           | 425               | --       |
      --       |\n   | U.S. dial tone          | 350+440           | --       | --
      \      |\n   | ITU ringing tone        | 425               | 0.67-1.5 | 3-5
      \     |\n   | U.S. ringing tone       | 440+480           | 2.0      | 4.0      |\n
      \  | ITU busy tone           | 425               | 0.1-0.6  | 0.1-0.7  |\n   |
      U.S. busy tone          | 480+620           | 0.5      | 0.5      |\n   | ITU
      congestion tone     | 425               | 0.1-0.6  | 0.1-0.7  |\n   | U.S. congestion
      tone    | 480+620           | 0.25     | 0.25     |\n   +-------------------------+-------------------+----------+----------+\n
      \                  Table 4: Examples of Telephony Tones\n"
    title: 4.2.  Examples of Common Telephone Tone Signals
  - contents:
    - '4.3.  Use of RTP Header Fields

      '
    - contents:
      - "4.3.1.  Timestamp\n   The RTP timestamp reflects the measurement point for
        the current\n   packet.  The event duration described in Section 4.3.3 begins
        at that\n   time.\n"
      title: 4.3.1.  Timestamp
    - contents:
      - "4.3.2.  Marker Bit\n   The tone payload type uses the marker bit to distinguish
        the first\n   RTP packet reporting a given instance of a tone from succeeding\n
        \  packets for that tone.  The marker bit SHOULD be set to 1 for the\n   first
        packet, and to 0 for all succeeding packets relating to the\n   same tone.\n"
      title: 4.3.2.  Marker Bit
    - contents:
      - "4.3.3.  Payload Format\n   Based on the characteristics described above,
        this document defines\n   an RTP payload format called \"tone\" that can represent
        tones\n   consisting of one or more frequencies.  (The corresponding media
        type\n   is \"audio/tone\".)  The default timestamp rate is 8000 Hz, but other\n
        \  rates may be defined.  Note that the timestamp rate does not affect\n   the
        interpretation of the frequency, just the durations.\n   In accordance with
        current practice, this payload format does not\n   have a static payload type
        number, but uses an RTP payload type\n   number established dynamically and
        out-of-band.\n   The payload format is shown in Figure 2.\n        0                   1
        \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |    modulation   |T|  volume   |          duration             |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |R R R R|       frequency       |R R R R|       frequency       |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |R R R R|       frequency       |R R R R|       frequency       |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \          ......\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \      |R R R R|       frequency       |R R R R|      frequency        |\n
        \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                   Figure 2: Payload Format for Tones\n   The payload contains
        the following fields:\n   modulation:\n      The modulation frequency, in
        Hz.  The field is a 9-bit unsigned\n      integer, allowing modulation frequencies
        up to 511 Hz.  If there\n      is no modulation, this field has a value of
        zero.  Note that the\n      amplitude of modulation is not indicated in the
        payload and must\n      be determined by out-of-band means.\n   T:\n      If
        the T bit is set (one), the modulation frequency is to be\n      divided by
        three.  Otherwise, the modulation frequency is taken as\n      is.\n      This
        bit allows frequencies accurate to 1/3 Hz, since modulation\n      frequencies
        such as 16 2/3 Hz are in practical use.\n   volume:\n      The power level
        of the tone, expressed in dBm0 after dropping the\n      sign, with range
        from 0 to -63 dBm0.  (Note: A preferred level\n      range for digital tone
        generators is -8 dBm0 to -3 dBm0.)\n   duration:\n      The duration of the
        tone, measured in timestamp units and\n      presented in network byte order.
        \ The tone begins at the instant\n      identified by the RTP timestamp and
        lasts for the duration value.\n      The value of zero is not permitted, and
        tones with such a duration\n      SHOULD be ignored.\n      The definition
        of duration corresponds to that for sample-based\n      codecs, where the
        timestamp represents the sampling point for the\n      first sample.\n   frequency:\n
        \     The frequencies of the tones to be added, measured in Hz and\n      represented
        as a 12-bit unsigned integer.  The field size is\n      sufficient to represent
        frequencies up to 4095 Hz, which exceeds\n      the range of telephone systems.
        \ A value of zero indicates\n      silence.  A single tone can contain any
        number of frequencies.  If\n      no frequencies are specified, the packet
        reports a period of\n      silence.\n   R:\n      This field is reserved for
        future use.  The sender MUST set it to\n      zero, and the receiver MUST
        ignore it.\n"
      title: 4.3.3.  Payload Format
    - contents:
      - "4.3.4.  Optional Media Type Parameters\n   The \"rate\" parameter describes
        the sampling rate, in Hertz.  The\n   number is written as an integer.  If
        omitted, the default value is\n   8000 Hz.\n"
      title: 4.3.4.  Optional Media Type Parameters
    title: 4.3.  Use of RTP Header Fields
  - contents:
    - "4.4.  Procedures\n   This section defines the procedures associated with the
      tone payload\n   type.\n"
    - contents:
      - "4.4.1.  Sending Procedures\n   The sender MAY send an initial tones packet
        as soon as a tone is\n   recognized, or MAY wait until a pre-negotiated packetization
        period\n   has elapsed.  The first RTP packet for a tone SHOULD have the marker\n
        \  bit set to 1.\n   In the case of longer-duration tones, the sender SHOULD
        generate\n   multiple RTP packets for the same tone instance.  The RTP timestamp\n
        \  MUST be updated for each packet generated (in contrast, for instance,\n
        \  to the timestamp for packets carrying telephone events).  Subsequent\n
        \  packets for the same tone SHOULD have the marker bit set to 0, and\n   the
        RTP timestamp in each subsequent packet MUST equal the sum of the\n   timestamp
        and the duration in the preceding packet.\n   A final RTP packet MAY be generated
        as soon as the end of the tone is\n   detected, without waiting for the latest
        packetization period to\n   elapse.\n   The telephone-event payload described
        in Section 2 is inherently\n   redundant, in that later packets for the same
        event carry all of the\n   earlier history of the event except for variations
        in volume.  In\n   contrast, each packet for the tone payload type stands
        alone; a lost\n   packet means a gap in the information available at the receiving
        end.\n   Thus, for increased reliability, the sender SHOULD combine new and\n
        \  old tone reports in the same RTP packet using RFC 2198 [2] audio\n   redundancy.\n"
      title: 4.4.1.  Sending Procedures
    - contents:
      - "4.4.2.  Receiving Procedures\n   Receiving implementations play out the tones
        as received, typically\n   with a playout delay to allow for lost packets.
        \ When playing out\n   successive tone reports for the same tone (marker bit
        is zero, the\n   RTP timestamp is contiguous with that of the previous RTP
        packet, and\n   payload content is identical), the receiving implementation
        SHOULD\n   continue the tone without change or a break.\n"
      title: 4.4.2.  Receiving Procedures
    - contents:
      - "4.4.3.  Handling of Congestion\n   If the sender determines that packets
        are being lost due to\n   congestion (e.g., through RTCP receiver reports),
        it SHOULD increase\n   the packetization interval for initial and interim
        tone reports so as\n   to reduce traffic volume to the receiver.  The degree
        to which this\n   is possible without causing damaging consequences at the
        receiving\n   end depends both upon the playout delay used at that end and
        upon the\n   specific application associated with the tones.  Both the maximum\n
        \  packetization interval and maximum increase in packetization interval\n
        \  at any one time are therefore a matter of configuration or out-of-\n   band
        negotiation.\n"
      title: 4.4.3.  Handling of Congestion
    title: 4.4.  Procedures
  title: 4.  RTP Payload Format for Telephony Tones
- contents:
  - "5.  Examples\n   Consider a DTMF dialling sequence, where the user dials the
    digits\n   \"911\" and a sending gateway detects them.  The first digit is 200
    ms\n   long (1600 timestamp units) and starts at time 0; the second digit\n   lasts
    250 ms (2000 timestamp units) and starts at time 880 ms (7040\n   timestamp units);
    the third digit is pressed at time 1.4 s (11,200\n   timestamp units) and lasts
    220 ms (1760 timestamp units).  The frame\n   duration is 50 ms.\n   Table 5 shows
    the complete sequence of events assuming that only the\n   telephone-event payload
    type is being reported.  For simplicity: the\n   timestamp is assumed to begin
    at 0, the RTP sequence number at 1, and\n   volume settings are omitted.\n   +-------+-----------+------+--------+------+--------+--------+------+\n
    \  |  Time | Event     |   M  |  Time- |  Seq |  Event |  Dura- |   E  |\n   |
    \ (ms) |           |  bit |  stamp |   No |  Code  |   tion |  bit |\n   +-------+-----------+------+--------+------+--------+--------+------+\n
    \  |     0 | \"9\"       |      |        |      |        |        |      |\n   |
    \      | starts    |      |        |      |        |        |      |\n   |    50
    | RTP       |  \"1\" |      0 |    1 |    9   |    400 |  \"0\" |\n   |       |
    packet 1  |      |        |      |        |        |      |\n   |       | sent
    \     |      |        |      |        |        |      |\n   |   100 | RTP       |
    \ \"0\" |      0 |    2 |    9   |    800 |  \"0\" |\n   |       | packet 2  |
    \     |        |      |        |        |      |\n   |       | sent      |      |
    \       |      |        |        |      |\n   |   150 | RTP       |  \"0\" |      0
    |    3 |    9   |   1200 |  \"0\" |\n   |       | packet 3  |      |        |
    \     |        |        |      |\n   |       | sent      |      |        |      |
    \       |        |      |\n   |   200 | RTP       |  \"0\" |      0 |    4 |    9
    \  |   1600 |  \"0\" |\n   |       | packet 4  |      |        |      |        |
    \       |      |\n   |       | sent      |      |        |      |        |        |
    \     |\n   |   200 | \"9\" ends  |      |        |      |        |        |      |\n
    \  |   250 | RTP       |  \"0\" |      0 |    5 |    9   |   1600 |  \"1\" |\n
    \  |       | packet 4  |      |        |      |        |        |      |\n   |
    \      | first     |      |        |      |        |        |      |\n   |       |
    retrans-  |      |        |      |        |        |      |\n   |       | mission
    \  |      |        |      |        |        |      |\n   |   300 | RTP       |
    \ \"0\" |      0 |    6 |    9   |   1600 |  \"1\" |\n   |       | packet 4  |
    \     |        |      |        |        |      |\n   |       | second    |      |
    \       |      |        |        |      |\n   |       | retrans-  |      |        |
    \     |        |        |      |\n   |       | mission   |      |        |      |
    \       |        |      |\n   |   880 | First \"1\" |      |        |      |        |
    \       |      |\n   |       | starts    |      |        |      |        |        |
    \     |\n   |   930 | RTP       |  \"1\" |   7040 |    7 |    1   |    400 |  \"0\"
    |\n   |       | packet 5  |      |        |      |        |        |      |\n
    \  |       | sent      |      |        |      |        |        |      |\n   |
    \  ... | ...       |  ... |    ... |  ... |   ...  |    ... |  ... |\n   |  1130
    | RTP       |  \"0\" |   7040 |   11 |    1   |   2000 |  \"0\" |\n   |       |
    packet 9  |      |        |      |        |        |      |\n   |       | sent
    \     |      |        |      |        |        |      |\n   |  1130 | First \"1\"
    |      |        |      |        |        |      |\n   |       | ends      |      |
    \       |      |        |        |      |\n   |  1180 | RTP       |  \"0\" |   7040
    |   12 |    1   |   2000 |  \"1\" |\n   |       | packet 9  |      |        |
    \     |        |        |      |\n   |       | first     |      |        |      |
    \       |        |      |\n   |       | retrans-  |      |        |      |        |
    \       |      |\n   |       | mission   |      |        |      |        |        |
    \     |\n   |  1230 | RTP       |  \"0\" |   7040 |   13 |    1   |   2000 |  \"1\"
    |\n   |       | packet 9  |      |        |      |        |        |      |\n
    \  |       | second    |      |        |      |        |        |      |\n   |
    \      | retrans-  |      |        |      |        |        |      |\n   |       |
    mission   |      |        |      |        |        |      |\n   |  1400 | Second
    \   |      |        |      |        |        |      |\n   |       | \"1\"       |
    \     |        |      |        |        |      |\n   |       | starts    |      |
    \       |      |        |        |      |\n   |  1450 | RTP       |  \"1\" |  11200
    |   14 |    1   |    400 |  \"0\" |\n   |       | packet 10 |      |        |
    \     |        |        |      |\n   |       | sent      |      |        |      |
    \       |        |      |\n   |   ... | ...       |  ... |    ... |  ... |   ...
    \ |    ... |  ... |\n   |  1620 | Second    |      |        |      |        |
    \       |      |\n   |       | \"1\" ends  |      |        |      |        |        |
    \     |\n   |  1650 | RTP       |  \"0\" |  11200 |   18 |    1   |   1760 |  \"1\"
    |\n   |       | packet 14 |      |        |      |        |        |      |\n
    \  |       | sent      |      |        |      |        |        |      |\n   |
    \ 1700 | RTP       |  \"0\" |  11200 |   19 |    1   |   1760 |  \"1\" |\n   |
    \      | packet 14 |      |        |      |        |        |      |\n   |       |
    first     |      |        |      |        |        |      |\n   |       | retrans-
    \ |      |        |      |        |        |      |\n   |       | mission   |
    \     |        |      |        |        |      |\n   |  1750 | RTP       |  \"0\"
    |  11200 |   20 |    1   |   1760 |  \"1\" |\n   |       | packet 14 |      |
    \       |      |        |        |      |\n   |       | second    |      |        |
    \     |        |        |      |\n   |       | retrans-  |      |        |      |
    \       |        |      |\n   |       | mission   |      |        |      |        |
    \       |      |\n   +-------+-----------+------+--------+------+--------+--------+------+\n
    \                   Table 5: Example of Event Reporting\n   Table 6 shows the
    same sequence assuming that only the tone payload\n   type is being reported.
    \ This looks somewhat different.  For\n   simplicity: the timestamp is assumed
    to begin at 0, the sequence\n   number at 1.  Volume, the T bit, and the modulation
    frequency are\n   omitted.  The latter two are always 0.\n   +-------+-----------+-----+--------+------+--------+-------+--------+\n
    \  |  Time | Event     |  M  |  Time- |  Seq | Dura-  | Freq 1| Freq 2 |\n   |
    \ (ms) |           | bit |  stamp |   No | tion   | (Hz)  | (Hz)   |\n   +-------+-----------+-----+--------+------+--------+-------+--------+\n
    \  |     0 | \"9\"       |     |        |      |        |       |        |\n   |
    \      | starts    |     |        |      |        |       |        |\n   |    50
    | RTP       | \"1\" |      0 |    1 | 400    | 852   | 1477   |\n   |       |
    packet 1  |     |        |      |        |       |        |\n   |       | sent
    \     |     |        |      |        |       |        |\n   |   100 | RTP       |
    \"0\" |    400 |    2 | 400    | 852   | 1477   |\n   |       | packet 2  |     |
    \       |      |        |       |        |\n   |       | sent      |     |        |
    \     |        |       |        |\n   |   ... | ...       | ... |    ... |  ...
    | ...    | ...   | ...    |\n   |   200 | RTP       | \"0\" |   1200 |    4 |
    400    | 852   | 1477   |\n   |       | packet 4  |     |        |      |        |
    \      |        |\n   |       | sent      |     |        |      |        |       |
    \       |\n   |   200 | \"9\" ends  |     |        |      |        |       |        |\n
    \  |   880 | First \"1\" |     |        |      |        |       |        |\n   |
    \      | starts    |     |        |      |        |       |        |\n   |   930
    | RTP       | \"1\" |   7040 |    5 | 400    | 697   | 1209   |\n   |       |
    packet 5  |     |        |      |        |       |        |\n   |       | sent
    \     |     |        |      |        |       |        |\n   |   980 | RTP       |
    \"0\" |   7440 |    6 | 400    | 697   | 1209   |\n   |       | packet 6  |     |
    \       |      |        |       |        |\n   |       | sent      |     |        |
    \     |        |       |        |\n   |   ... | ...       | ... |    ... |  ...
    | ...    | ...   | ...    |\n   |  1130 | First \"1\" |     |        |      |
    \       |       |        |\n   |       | ends      |     |        |      |        |
    \      |        |\n   |  1400 | Second    |     |        |      |        |       |
    \       |\n   |       | \"1\"       |     |        |      |        |       |        |\n
    \  |       | starts    |     |        |      |        |       |        |\n   |
    \ 1450 | RTP       | \"1\" |  11200 |   10 | 400    | 697   | 1209   |\n   |       |
    packet 10 |     |        |      |        |       |        |\n   |       | sent
    \     |     |        |      |        |       |        |\n   |   ... | ...       |
    ... |    ... |  ... | ...    | ...   | ...    |\n   |  1620 | Second    |     |
    \       |      |        |       |        |\n   |       | \"1\" ends  |     |        |
    \     |        |       |        |\n   |  1650 | RTP       | \"0\" |  12800 |   14
    | 160    | 697   | 1209   |\n   |       | packet 14 |     |        |      |        |
    \      |        |\n   |       | sent      |     |        |      |        |       |
    \       |\n   +-------+-----------+-----+--------+------+--------+-------+--------+\n
    \                   Table 6: Example of Tone Reporting\n   Now consider a combined
    payload, where the tone payload is the\n   primary payload type and the event
    payload is treated as a redundant\n   encoding (one level of redundancy).  Because
    the primary payload is\n   tones, the tone payload rules determine the setting
    of the RTP header\n   fields.  This means that the RTP timestamp always advances.
    \ As a\n   corollary, the timestamp offset for the events payload in the RFC\n
    \  2198 header increases by the same amount.\n   One issue that has to be considered
    in a combined payload is how to\n   handle retransmissions of final event reports.
    \ The tone payload\n   specification does not recommend retransmissions of final
    packets, so\n   it is unclear what to put in the primary payload fields of the\n
    \  combined packet.  In the interests of simplicity, it is suggested\n   that
    the retransmitted packets copy the fields relating to the\n   primary payload
    (including the RTP timestamp) from the original\n   packet.  The same principle
    can be applied if the packet includes\n   multiple levels of event payload redundancy.\n
    \  The figures below all illustrate \"RTP packet 14\" in the above tables.\n   Figure
    3 shows an event-only payload, corresponding to Table 5.\n   Figure 4 shows a
    tone-only payload, corresponding to Table 6.\n   Finally, Figure 5 shows a combined
    payload, with tones primary and\n   events as a single redundant layer.  Note
    that the combined payload\n   has the RTP sequence numbers shown in Table 5, because
    the\n   transmitted sequence includes the retransmitted packets.\n   Figure 3
    assumes that the following SDP specification was used.  This\n   session description
    provides for separate streams of G.729 [21] audio\n   and events.  Packets reported
    within the G.729 stream are not\n   considered here.\n      m=audio 12344 RTP/AVP
    99\n      a=rtpmap:99 G729/8000\n      a=ptime:20\n      m=audio 12346 RTP/AVP
    100\n      a=rtpmap:100 telephone-event/8000\n      a=fmtp:100 0-15\n      a=ptime:50\n
    \      0                   1                   2                   3\n       0
    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n      |
    2 |0|0|   0   |0|    100      |            18                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                           timestamp                           |\n      |
    \                            11200                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |           synchronization source (SSRC) identifier            |\n      |
    \                           0x5234a8                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |     event     |E R| volume    |          duration             |\n      |
    \      1       |1 0|    20     |             1760              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \             Figure 3: Example RTP Packet for Event Payload\n   Figure 4 assumes
    that an SDP specification similar to that of the\n   previous case was used.\n
    \     m=audio 12344 RTP/AVP 99\n      a=rtpmap:99 G729/8000\n      a=ptime:20\n
    \     m=audio 12346 RTP/AVP 101\n      a=rtpmap:101 tone/8000\n      a=ptime:50\n
    \      0                   1                   2                   3\n       0
    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n      |
    2 |0|0|   0   |0|    101      |             14                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                           timestamp                           |\n      |
    \                            12800                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |           synchronization source (SSRC) identifier            |\n      |
    \                           0x5234a8                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |    modulation   |T|  volume   |          duration             |\n      |
    \       0        |0|    20     |             160               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |R R R R|       frequency       |R R R R|       frequency       |\n      |0
    0 0 0|          697          |0 0 0 0|         1209          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \              Figure 4: Example RTP Packet for Tone Payload\n   Figure 5, for
    the combined payload, assumes the following SDP session\n   description:\n      m=audio
    12344 RTP/AVP 99\n      a=rtpmap:99 G729/8000\n      a=ptime:20\n      m=audio
    12346 RTP/AVP 102 101 100\n      a=rtpmap:102 red/8000/1\n      a=fmtp:102 101/100\n
    \     a=rtpmap:101 tone/8000\n      a=rtpmap:100 telephone-event/8000\n      a=fmtp:100
    0-15\n      a=ptime:50\n   For ease of presentation, Figure 5 presents the actual
    payloads as if\n   they began on 32-bit boundaries.  In the actual packet, they
    follow\n   immediately after the end of the RFC 2198 header, and thus are\n   displaced
    one octet into successive words.\n       0                   1                   2
    \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n      |
    2 |0|0|   0   |0|    102      |             18                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                           timestamp                           |\n      |
    \                            12800                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |           synchronization source (SSRC) identifier            |\n      |
    \                           0x5234a8                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |F|   block PT  |  timestamp offset         |   block length    |\n      |1|
    \     100    |       1600                |        4          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |F|   block PT  |   event payload begins ...                    /\n      |0|
    \     101    |                                               \\\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \         Event payload\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |     event     |E R| volume    |          duration             |\n      |
    \      1       |1 0|    20     |             1760              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \         Tone payload\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |    modulation   |T|  volume   |          duration             |\n      |
    \       0        |0|    20     |             160               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |R R R R|       frequency       |R R R R|       frequency       |\n      |0
    0 0 0|          697          |0 0 0 0|         1209          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    Figure 5: Example RTP Packet for Combined Tone and Event Payloads\n"
  title: 5.  Examples
- contents:
  - "6.  Security Considerations\n   RTP packets using the payload formats defined
    in this specification\n   are subject to the security considerations discussed
    in the RTP\n   specification (RFC 3550 [5]), and any appropriate RTP profile (for\n
    \  example, RFC 3551 [13]).  The RFC 3550 discussion focuses on\n   requirements
    for confidentiality.  Additional security considerations\n   relating to implementation
    are described in RFC 2198 [2].\n   The telephone-event payload defined in this
    specification is highly\n   compressed.  A change in value of just one bit can
    result in a major\n   change in meaning as decoded at the receiver.  Thus, message\n
    \  integrity MUST be provided for the telephone-event payload type.\n   To meet
    the need for protection both of confidentiality and\n   integrity, compliant implementations
    SHOULD implement the Secure\n   Real-time Transport Protocol (SRTP) [7].\n      Note
    that the appropriate method of key distribution for SRTP may\n      vary with
    the specific application.\n      In some deployments, it may be preferable to
    use other means to\n      provide protection equivalent to that provided by SRTP.\n
    \  Provided that gateway design includes robust, low-overhead tone\n   generation,
    this payload type does not exhibit any significant non-\n   uniformity in the
    receiver side computational complexity for packet\n   processing to cause a potential
    denial-of-service threat.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   This document updates the descriptions of two RTP
    payload formats,\n   'telephone-event' and 'tone', and associated Internet media
    types,\n   audio/telephone-event and audio/tone.  It also documents the event\n
    \  codes for DTMF tone events.\n   Within the audio/telephone-event type, events
    MUST be registered with\n   IANA.  Registrations are subject to the policies \"Specification\n
    \  Required\" and \"Expert Review\" as defined in RFC 2434 [3].  The IETF-\n   appointed
    expert must ensure that:\n   a.  the meaning and application of the proposed events
    are clearly\n       documented;\n   b.  the events cannot be represented by existing
    event codes,\n       possibly with some minor modification of event definitions;\n
    \  c.  the number of events is the minimum necessary to fulfill the\n       purpose
    of their application(s).\n   The expert is further responsible for providing guidance
    on the\n   allocation of event codes to the proposed events.  Specifically, the\n
    \  expert must indicate whether the event appears to be the same as one\n   defined
    in RFC 2833 but not specified in any new document.  In this\n   case, the event
    code specified in RFC 2833 for that event SHOULD be\n   assigned to the proposed
    event.  Otherwise, event codes MUST be\n   assigned from the set of available
    event codes listed below.  If this\n   set is exhausted, the criterion for assignment
    from the reserved set\n   of event codes is to first assign those that appear
    to have the\n   lowest probability of being revived in their RFC 2833 meaning
    in a\n   new specification.\n   The documentation for each event MUST indicate
    whether the event is a\n   state, tone, or other type of event (e.g., an out-of-band
    electrical\n   event such as on-hook or an indication that will not itself be
    played\n   out as tones at the receiving end).  For tone events, the\n   documentation
    MUST indicate whether the volume field is applicable or\n   must be set to 0.\n
    \  In view of the tradeoffs between the different reliability mechanisms\n   discussed
    in Section 2.6, documentation of specific events SHOULD\n   include a discussion
    of the appropriate design decisions for the\n   applications of those events.\n
    \  Legal event codes range from 0 to 255.  The initial registry content\n   is
    shown in Table 7, and consists of the sixteen events defined in\n   Section 3
    of this document.  The remaining codes have the following\n   disposition:\n   o
    \ codes 17-22, 50-51, 90-95, 113-120, 169, and 206-255 are available\n      for
    assignment;\n   o  codes 23-40, 49, and 52-63 are reserved for events defined
    in\n      [16];\n   o  codes 121-137 and 174-205 are reserved for events defined
    in [17];\n   o  codes 16, 41-48, 64-88, 96-112, 138-168, and 170-173 are reserved\n
    \     in the first instance for specifications reviving the\n      corresponding
    RFC 2833 events, and in the second instance for\n      general assignment after
    all other codes have been assigned.\n        +------------+--------------------------------+-----------+\n
    \       | Event Code | Event Name                     | Reference |\n        +------------+--------------------------------+-----------+\n
    \       |          0 | DTMF digit \"0\"                 |  RFC 4733 |\n        |
    \         1 | DTMF digit \"1\"                 |  RFC 4733 |\n        |          2
    | DTMF digit \"2\"                 |  RFC 4733 |\n        |          3 | DTMF
    digit \"3\"                 |  RFC 4733 |\n        |          4 | DTMF digit \"4\"
    \                |  RFC 4733 |\n        |          5 | DTMF digit \"5\"                 |
    \ RFC 4733 |\n        |          6 | DTMF digit \"6\"                 |  RFC 4733
    |\n        |          7 | DTMF digit \"7\"                 |  RFC 4733 |\n        |
    \         8 | DTMF digit \"8\"                 |  RFC 4733 |\n        |          9
    | DTMF digit \"9\"                 |  RFC 4733 |\n        |         10 | DTMF
    digit \"*\"                 |  RFC 4733 |\n        |         11 | DTMF digit \"#\"
    \                |  RFC 4733 |\n        |         12 | DTMF digit \"A\"                 |
    \ RFC 4733 |\n        |         13 | DTMF digit \"B\"                 |  RFC 4733
    |\n        |         14 | DTMF digit \"C\"                 |  RFC 4733 |\n        |
    \        15 | DTMF digit \"D\"                 |  RFC 4733 |\n        +------------+--------------------------------+-----------+\n
    \           Table 7: audio/telephone-event Event Code Registry\n"
  - contents:
    - '7.1.  Media Type Registrations

      '
    - contents:
      - "7.1.1.  Registration of Media Type audio/telephone-event\n   This registration
        is done in accordance with [6] and [8].\n   Type name: audio\n   Subtype name:
        telephone-event\n   Required parameters: none.\n   Optional parameters:\n
        \     The \"events\" parameter lists the events supported by the\n      implementation.
        \ Events are listed as one or more comma-separated\n      elements.  Each
        element can be either a single integer providing\n      the value of an event
        code or an integer followed by a hyphen and\n      a larger integer, presenting
        a range of consecutive event code\n      values.  The list does not have to
        be sorted.  No white space is\n      allowed in the argument.  The union of
        all of the individual event\n      codes and event code ranges designates
        the complete set of event\n      numbers supported by the implementation.
        \ If the \"events\"\n      parameter is omitted, support for events 0-15 (the
        DTMF tones) is\n      assumed.\n      The \"rate\" parameter describes the
        sampling rate, in Hertz.  The\n      number is written as an integer.  If
        omitted, the default value is\n      8000 Hz.\n   Encoding considerations:\n
        \     In the terminology defined by [8] section 4.8, this type is framed\n
        \     and binary.\n   Security considerations:\n      See Section 6, \"Security
        Considerations\", in this document.\n   Interoperability considerations: none.\n
        \  Published specification: this document.\n   Applications which use this
        media:\n      The telephone-event audio subtype supports the transport of
        events\n      occurring in telephone systems over the Internet.\n   Additional
        information:\n      Magic number(s): N/A.\n      File extension(s): N/A.\n
        \     Macintosh file type code(s): N/A.\n   Person & email address to contact
        for further information:\n      Tom Taylor, taylor@nortel.com.\n      IETF
        AVT Working Group.\n   Intended usage: COMMON.\n   Restrictions on usage:\n
        \     This type is defined only for transfer via RTP [5].\n   Author: IETF
        Audio/Video Transport Working Group.\n   Change controller:\n      IETF Audio/Video
        Transport Working Group as delegated from the\n      IESG.\n"
      title: 7.1.1.  Registration of Media Type audio/telephone-event
    - contents:
      - "7.1.2.  Registration of Media Type audio/tone\n   This registration is done
        in accordance with [6] and [8].\n   Type name: audio\n   Subtype name: tone\n
        \  Required parameters: none\n   Optional parameters:\n      The \"rate\"
        parameter describes the sampling rate, in Hertz.  The\n      number is written
        as an integer.  If omitted, the default value is\n      8000 Hz.\n   Encoding
        considerations:\n      In the terminology defined by [8] section 4.8, this
        type is framed\n      and binary.\n   Security considerations:\n      See
        Section 6, \"Security Considerations\", in this document.\n   Interoperability
        considerations: none\n   Published specification: this document.\n   Applications
        which use this media:\n      The tone audio subtype supports the transport
        of pure composite\n      tones, for example, those commonly used in the current
        telephone\n      system to signal call progress.\n   Additional information:\n
        \     Magic number(s): N/A.\n      File extension(s): N/A.\n      Macintosh
        file type code(s): N/A.\n   Person & email address to contact for further
        information:\n      Tom Taylor, taylor@nortel.com.\n      IETF AVT Working
        Group.\n   Intended usage: COMMON.\n   Restrictions on usage:\n      This
        type is defined only for transfer via RTP [5].\n   Author: IETF Audio/Video
        Transport Working Group.\n   Change controller:\n      IETF Audio/Video Transport
        Working Group as delegated from the\n      IESG.\n"
      title: 7.1.2.  Registration of Media Type audio/tone
    title: 7.1.  Media Type Registrations
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgements\n   Scott Petrack was the original author of RFC 2833.  Henning\n
    \  Schulzrinne later loaned his expertise to complete the document, but\n   Scott
    must be credited with the energy behind the idea of a compact\n   encoding of
    tones over IP.\n   In RFC 2833, the suggestions of the Megaco working group were\n
    \  acknowledged.  Colin Perkins and Magnus Westerland, Chairs of the AVT\n   Working
    Group, provided helpful advice in the formation of the\n   present document.  Over
    the years, detailed advice and comments for\n   RFC 2833, this document, or both
    were provided by Hisham Abdelhamid,\n   Flemming Andreasen, Fred Burg, Steve Casner,
    Dan Deliberato, Fatih\n   Erdin, Bill Foster, Mike Fox, Mehryar Garakani, Gunnar
    Hellstrom,\n   Rajesh Kumar, Terry Lyons, Steve Magnell, Zarko Markov, Tim\n   Melanchuk,
    Kai Miao, Satish Mundra, Kevin Noll, Vern Paxson, Oren\n   Peleg, Raghavendra
    Prabhu, Moshe Samoha, Todd Sherer, Adrian Soncodi,\n   Yaakov Stein, Mira Stevanovic,
    Alex Urquizo, and Herb Wildfeur.\n"
  title: 8.  Acknowledgements
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n
      \  [2]   Perkins, C., Kouvelas, I., Hodson, O., Hardman, V., Handley,\n         M.,
      Bolot, J., Vega-Garcia, A., and S. Fosse-Parisis, \"RTP\n         Payload for
      Redundant Audio Data\", RFC 2198, September 1997.\n   [3]   Narten, T. and H.
      Alvestrand, \"Guidelines for Writing an IANA\n         Considerations Section
      in RFCs\", BCP 26, RFC 2434,\n         October 1998.\n   [4]   Rosenberg, J.
      and H. Schulzrinne, \"An Offer/Answer Model with\n         Session Description
      Protocol (SDP)\", RFC 3264, June 2002.\n   [5]   Schulzrinne, H., Casner, S.,
      Frederick, R., and V. Jacobson,\n         \"RTP: A Transport Protocol for Real-Time
      Applications\", STD 64,\n         RFC 3550, July 2003.\n   [6]   Casner, S.
      and P. Hoschka, \"MIME Type Registration of RTP\n         Payload Formats\",
      RFC 3555, July 2003.\n   [7]   Baugher, M., McGrew, D., Naslund, M., Carrara,
      E., and K.\n         Norrman, \"The Secure Real-time Transport Protocol (SRTP)\",\n
      \        RFC 3711, March 2004.\n   [8]   Freed, N. and J. Klensin, \"Media Type
      Specifications and\n         Registration Procedures\", BCP 13, RFC 4288, December
      2005.\n   [9]   Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n
      \        Description Protocol\", RFC 4566, July 2006.\n   [10]  International
      Telecommunication Union, \"Technical features of\n         push-button telephone
      sets\", ITU-T Recommendation Q.23,\n         November 1988.\n   [11]  International
      Telecommunication Union, \"Multifrequency push-\n         button signal reception\",
      ITU-T Recommendation Q.24,\n         November 1988.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [12]  Schulzrinne, H. and S. Petrack, \"RTP
      Payload for DTMF Digits,\n         Telephony Tones and Telephony Signals\",
      RFC 2833, May 2000.\n   [13]  Schulzrinne, H. and S. Casner, \"RTP Profile for
      Audio and Video\n         Conferences with Minimal Control\", STD 65, RFC 3551,
      July 2003.\n   [14]  Kreuter, R., \"RTP Payload Format for a 64 kbit/s Transparent\n
      \        Call\", RFC 4040, April 2005.\n   [15]  Hellstrom, G. and P. Jones,
      \"RTP Payload for Text\n         Conversation\", RFC 4103, June 2005.\n   [16]
      \ Schulzrinne, H. and T. Taylor, \"Definition of Events for Modem,\n         Fax,
      and Text Telephony Signals\", RFC 4734, December 2006.\n   [17]  Schulzrinne,
      H. and T. Taylor, \"Definition of Events For\n         Channel-Oriented Telephony
      Signalling\", Work In Progress ,\n         November 2005.\n   [18]  International
      Telecommunication Union, \"Technical\n         characteristics of tones for
      the telephone service\", ITU-T\n         Recommendation E.180/Q.35, March 1998.\n
      \  [19]  International Telecommunication Union, \"Pulse code modulation\n         (PCM)
      of voice frequencies\", ITU-T Recommendation G.711,\n         November 1988.\n
      \  [20]  International Telecommunication Union, \"Speech coders : Dual\n         rate
      speech coder for multimedia communications transmitting at\n         5.3 and
      6.3 kbit/s\", ITU-T Recommendation G.723.1, March 1996.\n   [21]  International
      Telecommunication Union, \"Coding of speech at 8\n         kbit/s using conjugate-structure
      algebraic-code-excited linear-\n         prediction (CS-ACELP)\", ITU-T Recommendation
      G.729, March 1996.\n   [22]  International Telecommunication Union, \"ISDN user-network\n
      \        interface layer 3 specification for basic call control\", ITU-T\n         Recommendation
      Q.931, May 1998.\n   [23]  International Telecommunication Union, \"Procedures
      for real-\n         time Group 3 facsimile communication over IP networks\",
      ITU-T\n         Recommendation T.38, July 2003.\n   [24]  International Telecommunication
      Union, \"Procedures for starting\n         sessions of data transmission over
      the public switched\n         telephone network\", ITU-T Recommendation V.8,
      November 2000.\n   [25]  International Telecommunication Union, \"Modem-over-IP
      networks:\n         Procedures for the end-to-end connection of V-series DCEs\",\n
      \        ITU-T Recommendation V.150.1, January 2003.\n   [26]  International
      Telecommunication Union, \"Procedures for\n         supporting Voice-Band Data
      over IP Networks\", ITU-T\n         Recommendation V.152, January 2005.\n   [27]
      \ International Telecommunication Union, \"Operational and\n         interworking
      requirements for {DCEs operating in the text\n         telephone mode\", ITU-T
      Recommendation V.18, November 2000.\n         See also Recommendation V.18 Amendment
      1, Nov. 2002.\n   [28]  VOIP Troubleshooter LLC, \"Indepth: Packet Loss Burstiness\",\n
      \        2005,\n         <http://www.voiptroubleshooter.com/indepth/burstloss.html>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  Summary of Changes from RFC 2833\n   The memo has been significantly
    restructured, incorporating a large\n   number of clarifications to the specification.
    \ With the exception of\n   those items noted below, the changes to the memo are
    intended to be\n   backwards-compatible clarifications.  However, due to inconsistencies\n
    \  and unclear definitions in RFC 2833 [12] it is likely that some\n   implementations
    interpreted that memo in ways that differ from this\n   version.\n   RFC 2833
    required that all implementations be capable of receiving\n   the DTMF events
    (event codes 0-15).  Section 2.5.1.1 of the present\n   document requires that
    a sender transmit only the events that the\n   receiver is capable of receiving.
    \ In the absence of a knowledge of\n   receiver capabilities, the sender SHOULD
    assume support of the DTMF\n   events but of no other events.  The sender SHOULD
    indicate what\n   events it can send.  Section 2.5.2.1 requires that a receiver\n
    \  signalling its capabilities using SDP MUST indicate which events it\n   can
    receive.\n   Non-zero values in the volume field of the payload were applicable\n
    \  only to DTMF tones in RFC 2833, and for other events the receiver was\n   required
    to ignore them.  The present memo requires that the\n   definition of each event
    indicate whether the volume field is\n   applicable to that event.  The last paragraph
    of Section 2.5.2.2\n   indicates what a receiver may do if it receives volumes
    with zero\n   values for events to which the volume field is applicable.  Along\n
    \  with the RFC 2833 receiver rule, this ensures backward compatibility\n   in
    both directions of transmission.\n   Section 2.5.1.3 and Section 2.5.2.3 introduce
    a new procedure for\n   reporting and playing out events whose duration exceeds
    the capacity\n   of the payload duration field.  This procedure may cause momentary\n
    \  confusion at an old (RFC 2833) receiver, because the timestamp is\n   updated
    without setting the E bit of the preceding event report and\n   without setting
    the M bit of the new one.\n   Section 2.5.1.5 and Section 2.5.2.4 introduce a
    new procedure whereby\n   a sequence of short-duration events may be packed into
    a single event\n   report.  If an old (RFC 2833) receiver receives such a report,
    it may\n   discard the packet as invalid, since the packet holds more content\n
    \  than the receiver was expecting.  In any event, the additional events\n   in
    the packet will be lost.\n   Section 2.3.5 introduces the possibility of \"state\"
    events and\n   defines procedures for setting the duration field for reports of
    such\n   events.  Section 2.5.1.2 defines special exemptions from the setting\n
    \  of the E bit for state events.  Three more sections mention\n   procedures
    related to these events.\n   The Security Considerations section is updated to
    mention the\n   requirement for protection of integrity.  More importantly, it
    makes\n   implementation of SRTP [7] mandatory for compliant implementations,\n
    \  without specifying a mandatory-to-implement method of key\n   distribution.\n
    \  Finally, this document establishes an IANA registry for event codes\n   and
    establishes criteria for their documentation.  This document\n   provides an initial
    population for the new registry, consisting\n   solely of the sixteen DTMF events.
    \ Two companion documents [16] and\n   [17] describe events related to modems,
    fax, and text telephony and\n   to channel-associated telephony signalling, respectively.
    \ Some\n   changes were made to the latter because of errors and redundancies
    in\n   the RFC 2833 assignments.  The remaining events defined in RFC 2833\n   are
    deprecated because they do not appear to have been implemented,\n   but their
    codes have been conditionally reserved in case any of them\n   is needed in the
    future.  Table 8 indicates the disposition of the\n   event codes in detail.  Event
    codes not mentioned in this table were\n   not allocated by RFC 2833 and continue
    to be unused.\n   +-------------+---------------------------------------+-------------+\n
    \  | Event Codes | RFC 2833 Description                  | Disposition |\n   +-------------+---------------------------------------+-------------+\n
    \  |        0-15 | DTMF digits                           | RFC 4733    |\n   |
    \         16 | Line flash (deprecated)               | Reserved    |\n   |       23-31
    | Unused                                | [16]        |\n   |       32-40 | Data
    and fax                          | [16]        |\n   |       41-48 | Data and
    fax (V.8bis, deprecated)     | Reserved    |\n   |       52-63 | Unused                                |
    [16]        |\n   |       64-89 | E.182 line events (deprecated)        | Reserved
    \   |\n   |      96-112 | Country-specific line events          | Reserved    |\n
    \  |             | (deprecated)                          |             |\n   |
    \    121-127 | Unused                                | [17]        |\n   |     128-137
    | Trunks: MF 0-9                        | [17]        |\n   |     138-143 | Trunks:
    other MF (deprecated)         | Reserved    |\n   |     144-159 | Trunks: ABCD
    signalling               | [17]        |\n   |     160-168 | Trunks: various (deprecated)
    \         | Reserved    |\n   |     170-173 | Trunks: various (deprecated)          |
    Reserved    |\n   |     174-205 | Unused                                | [17]
    \       |\n   +-------------+---------------------------------------+-------------+\n
    \          Table 8: Disposition of RFC 2833-defined Event Codes\n"
  title: Appendix A.  Summary of Changes from RFC 2833
- contents:
  - "Authors' Addresses\n   Henning Schulzrinne\n   Columbia U.\n   Dept. of Computer
    Science\n   Columbia University\n   1214 Amsterdam Avenue\n   New York, NY  10027\n
    \  US\n   EMail: schulzrinne@cs.columbia.edu\n   Tom Taylor\n   Nortel\n   1852
    Lorraine Ave\n   Ottawa, Ontario  K1H 6Z8\n   Canada\n   EMail: taylor@nortel.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR\n
    \  PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
