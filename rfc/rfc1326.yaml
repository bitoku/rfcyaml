- title: __initial_text__
  contents:
  - '               Mutual Encapsulation Considered Dangerous

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes a packet explosion problem that can occur with\n\
    \   mutual encapsulation of protocols (A encapsulates B and B\n   encapsulates\
    \ A).\n"
- title: The Current Environment
  contents:
  - "The Current Environment\n   In spite of international standardization efforts\
    \ to the contrary, we\n   are these days seeing a plethora of different protocols,\
    \ both\n   standard and proprietary, each designed to fill a technical or\n  \
    \ marketing niche.  The end result is that they eventually butt up\n   against\
    \ each other and are expected to interwork in some fashion.\n   One approach to\
    \ this interworking is to encapsulate one protocol\n   within another.  This has\
    \ resulted in cases of mutual encapsulation,\n   where protocol A runs over protocol\
    \ B in some cases, and protocol B\n   runs over protocol A in other cases.  For\
    \ example, there exists cases\n   of both IP over AppleTalk and AppleTalk over\
    \ IP.  (The term mutual\n   encapsulation comes from the paper by Shoch, Cohen,\
    \ and Taft, called\n   Mutual Encapsulation of Internetwork Protocols\", Computer\
    \ Networks 5,\n   North-Holland, 1981, 287-300.  The problem identified in this\
    \ RFC is\n   not mentioned in the Shoch et. al. paper.)\n   If there are not already\
    \ other instances of mutual encapsulation,\n   there will likely be more in the\
    \ future.  This is particularly true\n   with respect to the various internet\
    \ protocols, such as IP, CLNP,\n   AppleTalk, IPX, DECNET, and so on.\n"
- title: The Problem
  contents:
  - "The Problem\n   The problem with mutual encapsulation is the following.  Consider\
    \ the\n   topology shown in Figure 1.  We see two backbones and four stubs.\n\
    \   Backbone B(X) uses a native protocol of X (that is, it expects to\n   receive\
    \ packets with a header for protocol X).  B(Y) uses a native\n   protocol of Y.\
    \  Likewise, the right and left S(Y) stubs use protocol\n   Y, and the right and\
    \ left S(X) stubs use protocol X.\n          :::  :::::          :::::   ::: \
    \         :::\n +------+ :Y   :X:Y  +------+ :X:Y    :Y  +------+ :Y   +------+\n\
    \ |      | :::  ::::: |      | :::::   ::: |      | :::  |      |\n | S(Y) |-----Ra-----|\
    \      |-------Rb----|      |------| S(Y) |\n |      |            |      |   \
    \          |      |      |      |\n +------+            |      |             |\
    \      |      +------+\n                     | B(X) |             | B(Y) |\n \
    \                    |      |             |      |\n                :::  |   \
    \   | :::   ::::: |      | :::::  :::\n       +------+  X:  |      |  X:    X:Y:\
    \ |      |  X:Y:   X: +------+\n       |      | :::  |      | :::   ::::: |  \
    \    | :::::  ::: |      |\n       | S(X) |------|      |-----Rc------|      |------Rd----|\
    \ S(X) |\n       |      |      |      |             |      |            |    \
    \  |\n       +------+      |      |-----Re------|      |            +------+\n\
    \                     +------+             +------+\n   LEGEND:\n        :::::\n\
    \         X:Y:  A packet with protocol X encapsulated in protocol\n        :::::\
    \  Y, moving left to right\n           Rx  Router x\n         S(Y)  A stub network\
    \ whose native protocol is protocol Y\n         B(X)  A backbone network whose\
    \ native protocol is protocol X\n             FIGURE 1:  MUTUAL ENCAPSULATION\n\
    \   Figure 1 shows how packets would travel from left S(X) to right S(X),\n  \
    \ and from right S(Y) to left S(Y).  Consider a packet from left S(X)\n   to right\
    \ S(X).  The packet from left S(X) has just a header of X up\n   to the point\
    \ where it reaches router Rc.  Since B(Y) cannot forward\n   header X, Rc encapsulates\
    \ the packet into a Y header with a\n   destination address of Rd.  When Rd receives\
    \ the packet from B(Y), it\n   strips off the Y header and forwards the X header\
    \ packet to right\n   S(X).  The reverse situation exists for packets from right\
    \ S(Y) to\n   left S(Y).\n   In this example Rc and Rd treat B(Y) as a lower-level\
    \ subnetwork in\n   exactly the same way that an IP router currently treats an\
    \ Ethernet\n   as a lower-level subnetwork.  Note that Rc considers Rd to be the\n\
    \   appropriate \"exit router\" for packets destined for right S(X), and Rb\n\
    \   considers Ra to be the appropriate \"exit router\" for packets destined\n\
    \   for left S(Y).\n   Now, assume that somehow a routing loop forms such that\
    \ routers in\n   B(Y) think that Rd is reachable via Rb, Rb thinks that Rd is\n\
    \   reachable via Re, and routers in B(X) think that Re is reachable via\n   Rc.\
    \  (This could result as a transient condition in the routing\n   algorithm if\
    \ Rd and Re crashed at the same time.) When the initial\n   packet from left S(X)\
    \ reaches Rc, it is encapsulated with Y and sent\n   to B(Y), which forwards it\
    \ onto Rb.  (The notation for this packet is\n   Y<X>, meaning that X in encapsulated\
    \ in Y.)\n   When Rb receives Y<X> from B(Y), it encapsulates the packet in an\
    \ X\n   header to get it to Re through B(X).  Now the packet has headers\n   X<Y<X>>.\
    \  In other words, the packet has two X encapsulates.  When Rc\n   receives X<Y<X>>,\
    \ it again encapsulates the packet, resulting in\n   Y<X<Y<X>>>.  The packet is\
    \ growing with each encapsulation.\n   Now, if we assume that each successive\
    \ encapsulation does not\n   preserve the hop count information in the previous\
    \ header, then the\n   packet will never expire.  Worse, the packet will eventually\
    \ reach\n   the Maximum Transmission Unit (MTU) size, and will fragment.  Each\n\
    \   fragment will continue around the loop, getting successively larger\n   until\
    \ those fragments also fragment.  The result is an exponential\n   explosion in\
    \ the number of looping packets!\n   The explosion will persist until the links\
    \ are saturated, and the\n   links will remain saturated until the loop is broken.\
    \  If the looping\n   packets dominate the link to the point where other packets,\
    \ such as\n   routing update packets or management packets, are thrown away, then\n\
    \   the loop may not automatically break itself, thus requiring manual\n   intervention.\
    \  Once the loop is broken, the packets will quickly be\n   flushed from the network.\n"
- title: Potential Fixes
  contents:
  - "Potential Fixes\n   The first potential fix that comes to mind is to always preserve\
    \ the\n   hop count information in the new header.  Since hop count information\n\
    \   is preserved in fragments, the explosion will not occur even if some\n   fragmentation\
    \ occurs before the hop count expires.  Not all headers,\n   however, have hop\
    \ count information in them (for instance, X.25 and\n   SMDS).\n   And the hop\
    \ counts ranges for different protocols are different,\n   making direct translation\
    \ not always possible.  For instance,\n   AppleTalk has a maximum hop count of\
    \ 16, whereas IP has up to 256.\n   One could define a mapping whereby the hop\
    \ count is lowered to fit\n   into the smaller range when necessary.  This, however,\
    \ might often\n   result in unnecessary black holes because of overly small hop\
    \ counts.\n   There are for instance many IP paths that are longer than 16 hops.\n\
    \   It is worth noting that the current IP over AppleTalk Internet Draft\n   does\
    \ not preserve hop counts (\"A Standard for the Transmission of\n   Internet Packets\
    \ Over AppleTalk Networks\").\n   Another potential fix is to have routers peek\
    \ into network layer\n   headers to see if the planned encapsulation already exists.\
    \  For\n   instance, in the example of Figure 1, when Rb receives Y<X>, it would\n\
    \   see what Y had encapsulated (for instance by looking at the protocol\n   id\
    \ field of X's header), notice that X has already been encapsulated,\n   and throw\
    \ away the packet.  If the encapsulation loop involves more\n   than two protocols,\
    \ then the router may have to peek into successive\n   network layer headers.\
    \  It would quit when it finally got to a\n   transport layer header.\n   There\
    \ are several pitfalls with this approach.  First, it is always\n   possible that\
    \ a network layer protocol is being encapsulated within a\n   transport layer\
    \ protocol, thus I suppose requiring that the router\n   continue to peek even\
    \ above the transport layer.\n   Second, the router may not recognize one of the\
    \ network layer\n   headers, thus preventing it from peeking any further.  For\
    \ instance,\n   consider a loop involving three routers Rxy, Ryz, and Rzx, and\
    \ three\n   protocols X, Y, and Z (the subscripts on the routers R denote which\n\
    \   protocols the router recognizes).  After the first loop, Rxy receives\n  \
    \ X<Z<Y<X>>>.  Since Rxy does not recognize Z, it cannot peek beyond Z\n   to\
    \ discover the embedded Y header.\n   Third, a router may be encrypting the packet\
    \ that it sends to its\n   peer, such as is done with Blacker routers.  For instance,\
    \ Rc might\n   be encrypting packets that it encapsulates for Rd, expecting Rd\
    \ to\n   decrypt it.  When Rb receives this packet (because of the loop), it\n\
    \   cannot peek beyond the Y header.\n   Finally, there may be situations where\
    \ it is appropriate to have\n   multiple instances of the same header.  For instance,\
    \ in the nested\n   mutual encapsulation of Figure 2, Ra will encapsulate Y in\
    \ X to get\n   it to Rd, but Rb will encapsulate X<Y> in Y to get it to Rc.  In\
    \ this\n   case, it is appropriate for Rb to transmit a packet with two Y\n  \
    \ headers.\n   A third (somewhat hybrid) solution is to outlaw nested mutual\n\
    \   encapsulation, employ both hop count preservation and header peeking\n   where\
    \ appropriate, and generally discourage the use of mutual\n   encapsulation (or\
    \ at least adopt the attitude that those who engage\n   in mutual encapsulation\
    \ deserve what they get).\n                     +--------------------+\n     \
    \                |                    |\n                     |              \
    \ B(X) |\n       +------+      |      +------+      |      +------+\n       |\
    \      |      |      |      |      |      |      |\n       | S(Y) |--Ra--+   Rb-|\
    \ B(Y) |-Rc   +--Rd--| S(Y) |\n       |      |      |      |      |      |   \
    \   |      |\n       +------+      |      +------+      |      +------+\n    \
    \                 |                    |\n                     |             \
    \       |\n                     +--------------------+\n                FIGURE\
    \ 2:  NESTED MUTUAL ENCAPSULATION\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Paul Tsuchiya\n   Bellcore\n   435 South St.\n   MRE 2L-281\n\
    \   Morristown, NJ 07960\n   Phone: (908) 829-4484\n   EMail:  tsuchiya@thumper.bellcore.com\n"
