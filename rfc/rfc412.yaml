- title: __initial_text__
  contents:
  - "Work Information Center # 12404                                 G. Hicks\n  \
    \                       User FTP Documentation\n     The attached document is\
    \ the HELP file for the Utah-10\nimplementation of the User FTP Process. This\
    \ is what the user has\ntyped on his console when he types 'HELP<cr>', and as\
    \ such is the only\ndocumention produced to date.\n                         FTP\
    \ User Documentation\n                           November 27, 1972\nI. Control\
    \ Characters\n      There are several control characters that have meaning to\
    \ the FTP\nProcess. First, the abort character is <control-z> (SUB), next for\n\
    editing, only <control-r>, <control-a>, <control-h>, <control-v>,\n<control-w>,\
    \ <alt-mode>, <eol>, <space>, <control-x> and <rub-out> have\nany meaning, <control-a>\
    \ (SOH) and <control-h> (BS) are the character\ndelete keys. <control-w> is the\
    \ word delete character, Note: When dowing\nthe ' funktion, this character will\
    \ delete the entire line typed.\n<control-v> says take the next character literally.\
    \ <alt-mode> (ESC)\nterminates the command giving helpful noise words, <eol> and\
    \ <space> are\nterminators also. These last two will give no command completion\
    \ or\nnoise words. All three echo as a space however.  <control-x> (CAN) and\n\
    <rub-out> (DEL) are the command abort characters. <control-r> (DC2) will\nretype\
    \ the line as the command interpreter sees it. When using the ?  as\na prompter,\
    \ for initial commands, it will type-out all commands that\nbegin with that particular\
    \ character string.  If it is typed in a sub-\ncommand field, it will type out\
    \ the prompt message only if it is the\nfirst character typed. At all other times,\
    \ it will be accepted as part\nof the typed string.\nII. General Information\n\
    \      The FTP user process is designed to make transferring files from\none host\
    \ on the ARPANET to another much easier than it has been up until\nnow. To this\
    \ end, the command language was designed to be as natural as\npossible.\n    \
    \  The command interpreter is, of course, part of this idea.\nTherefore, to help\
    \ the user as much as possible, there are several ways\nto find out what is expected\
    \ in the form of commands, file-names, user-\nnames, etc. When the user has typed\
    \ nothing, typing a ? will cause the\ninterpreter to type out all the commands\
    \ that are available to the user.\nIf the user has typed anything at all, then\
    \ it will respond with all\ncommands that begin with the particular character\
    \ string.\n      So that the command language was as easy to learn as possible,\
    \ the\ncommand interpreter will 'see' nothing that is not part of a legal\ncommand.\
    \ If the user types anything that is not expected, the character\nis not echoed\
    \ and a bell is echoed instead.\nIII. Brief Command Listing\n      The commands\
    \ that are expected and their syntax are listed below.\nNOTE: UPPER and lower\
    \ case letters are identical.\n<host-name>\nD<decimal host number>\n<octal host\
    \ number>\n;<any string> (useful for comments to a person that is\nlinked to you)\n\
    MODE <mode name>\nRETREIVE <remote file> (to) <local file>\nGET <remote file>\
    \ (to) <local file>\nSEND <local file> (to) <remote file>\nSTORE <local file>\
    \ (to) <remote file>\nAPPEND <local file> (to) <remote file>\nRENAME <remote file>\
    \ (to be) <new remote file name>\nDELETE <remote file>\nBYE\nCOPY <direction descriptor>\
    \ <file group> (to) <file group>\n     (see detailed description below)\nLOGOUT\n\
    DDT\nLIST <file group> (to file) <local file name>\nSOCKET (NOT IMPLEMENTED YET)\n\
    ALLOCATE <decimal number of bytes>\nQUIT\n   foreign host)\nHOST <any valid ARPANET\
    \ host name or number>\nUSER <remote user name>\nPASSWORD <password for remote\
    \ user's name>\nACCOUNT <string or number for remote user's name>\nSTATUS (see\
    \ description of status command below)\nLOGIN <user name> <password> <optional\
    \ account> <to host>\nBYTE <decimal byte size>\nTYPE <type descriptor>\nSTRUCTURE\
    \ <structure descriptor>\nTENEX\nASCII\nVERBOSE\nIV. Detailed Description of the\
    \ Commands\n         The commands and their syntax are described in greater detail\n\
    \   blow. The words in parenthesis are noise words.  NOTE: upper and\n   lower\
    \ case are identical. Unless otherwise noted in the command\n   description, all\
    \ commands described are implemented.\n<host name> or <host number>\n   Performs\
    \ the ICP to the indicated host with explanatory remarks if\n   the ICP is not\
    \ possible.\nMODE <mode descriptor>\n   Sets the mode of the data transfer connection\
    \ according to the\n   following sub-commandos:\n   STREAM: bit stream, end of\
    \ file is indicated by the data connection\n   closing.\n   BLOCK: formats (or\
    \ expects formatted) data into blocks.\n   TEXT: Sends or retreives text. Forces\
    \ TYPE ASCII and BYTE 8. This\n   command sends the appropiate commands to the\
    \ foreign host, then sends\n   the data using the TELNET codes for EOR and EOF\
    \ as per the FTP\n   Protocol.\n   HASP: compress data.\n   NOTE: Of the above\
    \ sub-commands, only MODE STREAM and MODE TEXT are\n   implemented at present.\n\
    RETREIVE (file) <remote file> (to file) <local file name>\n   Sends the retr command\
    \ to the remote server, sets up the data\n   connection according to any previous\
    \ MODE, TYPE, BYTE commands. Puts\n   the data coming on the the data connection\
    \ into the local file\n   specified.\nGET (file) <remote file name> (to file)\
    \ <local file name>\n   See description of RETREIVE.\nSTORE (local file) <file\
    \ name> (onto file) <remote file>\n   Accepts a local file name, does the formatting\
    \ according to any\n   previous BYTE, TYPE, MODE commands and sends it to the\
    \ foreign host.\nSEND (local file) <file name> (onto file) <remote file>\n   See\
    \ description of STORE.\nAPPEND (local file) <file name> (to remote file) <remote\
    \ file>\n   Does the same as a store except that the file is appended to the\n\
    \   remote file rather that just writing over the file.\nRENAME (existing file)\
    \ <file name> (to be) <new file name>\n   Accepts the name of n old remote file\
    \ and asks for a new file name,\n   sends the appropiate commands and names to\
    \ the foreign host causing\n   the old file name to be replaced by the new file\
    \ name.\nDELETE (file) <file name>\n   This command causes the remote file to\
    \ be marked for deletion. It\n   does require that the command be confirmed twice.\n\
    BYE\n   Takes no arguments. Causes the server to terminate the current\n   session\
    \ with the user. The program will return to the EXEC MODE when\n   the command\
    \ has been acknowledged by the remote server.\nCOPY\n   This command does a variety\
    \ of things. First. it allows the user do\n   describe a file group. EG: *.mac,\
    \ *.sav, etc.  The *'s may be for\n   foreign files or local files according to\
    \ the following sub-commands:\n  REMOTE (remote file group) <remote file grouping>:\n\
    \   Causes the user FTP to ask the server for the file in <remote file\n   grouping>.\
    \ Then asks the user to specify where each file is to go. A\n   typical sequence\
    \ might look like the following:\n   !copy remote (remote file group) ftp.*\n\
    \   Please be patient. Getting remote file names.\n   Got them.\n   !copy (file)\
    \ <HICKS>FTP.MAC;| (to file) ftp.mac [New file]\n   [Messages and etc. follow\
    \ with the above line being\n   repeated for each file in the remote file group.]\n\
    \  LOCAL (local file grouping) <local file group>:\n   Causes the user FTP to\
    \ accept the file group specified, and send the\n   file names to the server leaving\
    \ off the <directory name> and version\n   number of the local file. The user\
    \ may not specify *'d devices of *'d\n   directorys. A line for this might look\
    \ like the following:\n   !copy local (local file group) ftp.*;*\n    [Confirm]\n\
    \   Next, if the user does not specify any *'s for either the remote file\n  \
    \ or the local file, this command is exactly like the RETREIVE or STORE\n   command\
    \ described earlier.\nLOGOUT\n   Takes no arguments. See description of BYE command\
    \ for more details.\nRESET\n   Takes no arguments. Causes the user process to\
    \ close all connections\n   (if necessary), all files (if necessary), and reset\
    \ the programs\n   parameters to their defaults.\nDDT\n   If DDT is loaded, just\
    \ starts DDT. If DDT is not loaded, it will load\n   DDT and then start it at\
    \ its initial start-up location.  This command\n   will casue an abnormal interrupt\
    \ if DDT is not found.\nLIST (file group) <remote file group> (to file) <local\
    \ file>\n   Esentially causes the remote server to do a directory command. The\n\
    \   default is *.* and since the listing will come on the data connection,\n \
    \  the user must specify a local file. A sample line might look like the\n   following:\
    \ !list (file group) *.* (going to file) tty: [ok]\nSOCKET <socket descriptor>\n\
    \   Will accept a socket descriptor for the data to go to or come from. At\n \
    \  present it is NOT IMPLEMENTED because we have not decided on the\n   format\
    \ of the command to the server.\nALLOCATE <decimal number of bytes>\n   Accepts\
    \ as its argument a decimal number of bytes (of the specified\n   size) telling\
    \ the server how many bytes of storage to reserve for the\n   next store of append.\n\
    QUIT\n   Takes no arguments. Returns the console to the EXEC. The program may\n\
    \   be continued with no harm done.\n   This command allows the user to send arbitrary\
    \ strings to the remote\n   server. At present, when talking to a TENEX site,\
    \ it is only useful\n   for doing the 'MAIL' command.  Other sites may have help\
    \ commands of\n   whatever.\nHOST <ARPANET host name of number>\n   Allows the\
    \ user to specify an ARPANET host without actually connecting\n   to the host.\
    \ This specified host will be the ont that is connected to\n   (or the attempt\
    \ will be made anyway) when the next 'immediate' command\n   is executed. EG:\
    \ LOGIN, RETREIVE, STORE, LIST, etc.\nUSER (name is) <remote user's name>\n  \
    \ Sets the user name for the remote system. Useful for systems that\n   require\
    \ no password for the specified name.  Does nothing until an\n   user must be\
    \ 'logged into' the remote system. The programm knows this\n   and so will not\
    \ let the user execute any commands (RETREIVE, STORE,\n   APPEND, LIST, STATUS,\
    \ RENAME, DELETE) until he has at least specified\n   a remote user name. The\
    \ LOGIN command does this as does this command.\nSTATUS (of the) <sub-cmd> (at\
    \ host) <ARPANET host>\n   Accepts as its argument one of the following sub-commands:\n\
    \  SERVICE (at host) <ARPANET host name or number>: Attempts to\n   perform the\
    \ ICP to the specified host. Does not disturb any existing\n   connections.\n\
    \  <ARPANET host name or number>: See description of STATUS SERVICE\n  above.\n\
    \  STATUS (of file) <remote file group>: Similar to the LIST\n   command described\
    \ above except that the listing does not gone back on\n   the data connection\
    \ but on the TELNET connection. See LIST command for\n   more details.\n  <COMMAND-TERMINATOR>:\
    \ Just sneds the STAT command.\n   Typically, is good for finding out where your\
    \ are and perhaps who you\n   are.\nPASSWORD (is) <passowrd for remote user's\
    \ name>\n   Sets the password for the remote user's name. It is NOT echoed and\n\
    \   does nothing until the next 'immediate' command is executed.\nACCOUNT (is)\
    \ <account number or string>\n   Accepts a string of number that can be charged\
    \ for any activity the\n   user specifies. EG: STORE, RETREIVE or APPEND. Useful\
    \ only for systems\n   that require this information of course. Also does nothing\
    \ until the\n   next immediate command is executed.\nLOGIN <user name> <password>\
    \ <optional account>\n   the format of this command is identical to the TENEX\
    \ login command. It\n   accepts a user name, password, and an optional account\
    \ number. If no\n   host has been specified, it will ask for the host to be connected\
    \ to.\n   This command will cause the ICP to take place if necessary.\nBYTE (size\
    \ is) <decimal byte size>\n   This command sets the byte size for the data connection.\
    \  The default\n   byte size is 8 bytes.\nType (is) <type descriptor>\n   Takes\
    \ as its argument one of the following subcommands:\n  TENEX: Shorthand that sets\
    \ TYPE IMAGE and BYTE 36.\n  EBCDIC: Says that the data will be Ebcdic.\n  PRINT:\
    \ Says that the data is an Ascii print file with ASA vertical\n   format controls.\n\
    \  LOCAL: Forces the user and server FTP to accept whatever\n   byte size the\
    \ user has specified. For the present, this type is\n   treated the same as for\
    \ IMAGE TYPE.\n  IMAGE: Does the same as LOCAL. Just forces the user and server\
    \ FTP to\n   accept the specified byte size without doing any translation as is\n\
    \   done for ASCII type. For most efficient usage of this command, the\n   matching\
    \ byte size should be BYTE 36 when using TENEX sites as\n   servers.\n  ASCII:\
    \ Sets TYPE ASCII and 8 bit bytes. Useful for text files.\n   NOTE: Of the above\
    \ sub-commands, only PRINT and EBCDIC are not\n   implemented yet.\nSTRUCTURE\
    \ (is) <file structure descriptor>\n   Accepts as its argument one of the following\
    \ sub-commands:\n  REDORD: Says the data on the data connection has record\n \
    \  structure information contained in it. NOTE: Since TENEX NOT support\n   record\
    \ structured files per se, this mode only useful for sending text\n   files to\
    \ or retreiving text files from non-TENEX sites. The <EOL> in\n   these files\
    \ is converted to the TELNET EOR code for transmission and\n   EOR to <EOL> etc.\
    \ for reception.\n  File: Says the data stream has no record structure information\
    \ in it.\nTENEX\n   See description under TYPE TENEX.\nASCII\n   See description\
    \ under TYPE ASCII.\nVERBOSE\n   This command sets the command completion/no completion\
    \ flag. The\n   program assumes the NO VERBOSE mode and thus does not complete\n\
    \   commands when <space> or <eol> is used as a command terminator It also\n \
    \  causes the noise words to be typed if in the verbose mode.\nV. Sample Session\
    \ using the FTP\n       The following scenario shows some uses of the FTP.\n \
    \  Everything that the user types is underlined.\n   UTAH-TENEX 1.29.03 EXEC 1.38\n\
    \   LOGIN (USER) HICKS (PASSOWRD) (ACCOUNT #) 1200\n   JOB 24 ON TTY2 11-NOV-72\
    \ 1:51\n   TERMINAL (TYPE IS) 4\n   ftp\n   FTP User Process 1.10 5-NOV-72. Type\
    \ Help<cr> for help.\n   !login (user) network (password) (account) 4 (to host)\
    \ case-10\n   CONNECTION IS OPEN TO CASE-10.\n   < CASE-10 FTP Server 1.14.0 -\
    \ at SAT 11-NOV-72 2:00-EST\n   !tenex ? confirm with carriage return\n    tenex\n\
    \   !copy remote (remote group) ftp.*\n    Please be patient. Getting remote file-names.\n\
    \    Got them.\n   !copy (file) <NETWORK>FTP.MAC:32 (no file) ftp.mac [new file]\n\
    \   < IMAGE retreive of <NETWORK>FTP.MAC;32 startet.\n   < Transfer completed.\n\
    \   !copy (file) <NETWORK>FTP.SAV;5 (fo file) FTP.SAV;5 [new version]\n   < IMAGE\
    \ retreive of <NETWORK>FTP.SAV;5 started.\n   < Transfer completed.\n   !copy\
    \ (file) <NETWORK>FTP.REL;1 (to file) xxx\n   !copy (file) <NETWORK>FTP.HELP;5\
    \ (to file) ftp.help [New version]\n    copy (file) <NETWORK>FTP.HELP;5 (to file)\
    \ FTP.HELP;1\n   < IMAGE retreive of <NETWORK>FTP.HELP;5 started.\n   < Transfer\
    \ completed.\n   Done...\n   !usc-isi\n    Closing connections to CASE-10.\n \
    \   CONNECTION IS OPEN TO USC-ISI.\n   < USC-ISI FTP Server 1.14.0 - at SAT 11-NOV-72\
    \ 2:15-PST\n   !log\n   user hicks\n   (password)\n   (account) ? account number\
    \ or string for remote user's name\n    log\n   (user) hicks\n   (password)\n\
    \   (account) |\n   !send (local file) ftp.sav;5 (to remote file) ftp.sav\n  \
    \ < STORE of <HICKS>FTP.SAV;P777752;a|, IMAGE type, started.\n   < Transfer completed.\n\
    \   !cp r acs.mac (to local file) acs.mac [new file]\n   < IMAGE Retreive of <HICKS>ACS.MAC;3\
    \ started.\n   < Transfer completed.\n   !copy 1 ? Local file group, *'s ok -\
    \ TENEX sites only,\n    copy 1 ftp.*\n    [Confirm]\n   < Store of <HICKS>FTP.MAC;1;P777752;A1,\
    \ IMAGE type, Started.\n   < Transfer completed.\n   < Store of <HICKS>FTP.SAV;2;P777753;A1,\
    \ IMAGE type, Started.\n   < Transfer completed.\n   < copy of <HICKS>FTP.HELP;1;P777752;A1\
    \ IMAGE type, Started,\n   < Transfer completed.\n   !bye\n   !< BYE command recieved.\n\
    \   < Therefore connection terminated.\n   logout\n   [logout message go here]\n\
    \         [ This RFC was put into machine readable form for entry ]\n        \
    \ [ into the online RFC archives by Gottfried Janik 6/97 ]\n"
