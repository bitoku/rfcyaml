- contents:
  - "      Additional Algorithms and Identifiers for RSA Cryptography\n       for
    use in the Internet X.509 Public Key Infrastructure\n      Certificate and Certificate
    Revocation List (CRL) Profile\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document supplements RFC 3279.  It describes the conventions
    for\n   using the RSA Probabilistic Signature Scheme (RSASSA-PSS) signature\n
    \  algorithm, the RSA Encryption Scheme - Optimal Asymmetric Encryption\n   Padding
    (RSAES-OAEP) key transport algorithm and additional one-way\n   hash functions
    with the Public-Key Cryptography Standards (PKCS) #1\n   version 1.5 signature
    algorithm in the Internet X.509 Public Key\n   Infrastructure (PKI).  Encoding
    formats, algorithm identifiers, and\n   parameter formats are specified.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Terminology ................................................3\n      1.2.
    RSA Public Keys ............................................3\n   2. Common Functions
    ................................................5\n      2.1. One-way Hash Functions
    .....................................5\n      2.2. Mask Generation Functions ..................................6\n
    \  3. RSASSA-PSS Signature Algorithm ..................................7\n      3.1.
    RSASSA-PSS Public Keys .....................................8\n      3.2. RSASSA-PSS
    Signature Values ...............................10\n      3.3. RSASSA-PSS Signature
    Parameter Validation .................10\n   4. RSAES-OAEP Key Transport Algorithm
    .............................10\n      4.1. RSAES-OAEP Public Keys ....................................11\n
    \  5. PKCS #1 Version 1.5 Signature Algorithm ........................13\n   6.
    ASN.1 Module ...................................................14\n   7. References
    .....................................................20\n      7.1. Normative
    References ......................................20\n      7.2. Informative References
    ....................................21\n   8. Security Considerations ........................................21\n
    \  9. IANA Considerations ............................................24\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document supplements RFC 3279 [PKALGS].  This document
    describes\n   the conventions for using the RSASSA-PSS signature algorithm and
    the\n   RSAES-OAEP key transport algorithm in the Internet X.509 Public Key\n
    \  Infrastructure (PKI) [PROFILE].  Both of these RSA-based algorithms\n   are
    specified in [P1v2.1].  The algorithm identifiers and associated\n   parameters
    for subject public keys that employ either of these\n   algorithms, and the encoding
    format for RSASSA-PSS signatures are\n   specified.  Also, the algorithm identifiers
    for using the SHA-224,\n   SHA-256, SHA-384, and SHA-512 one-way hash functions
    with the PKCS #1\n   version 1.5 signature algorithm [P1v1.5] are specified.\n
    \  This specification supplements RFC 3280 [PROFILE] which profiles the\n   X.509
    Certificates and Certificate Revocation Lists (CRLs) for use in\n   the Internet.
    \ This specification extends the list of algorithms\n   discussed in RFC 3279
    [PKALGS].  The X.509 Certificate and CRL\n   definitions use ASN.1 [X.208-88],
    the Basic Encoding Rules (BER)\n   [X.209-88], and the Distinguished Encoding
    Rules (DER) [X.509-88].\n   This specification defines the contents of the signatureAlgorithm,\n
    \  signatureValue, signature, and subjectPublicKeyInfo fields within\n   Internet
    X.509 Certificates and CRLs.  For each algorithm, the\n   appropriate alternatives
    for the keyUsage certificate extension are\n   provided.\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
      2119 [STDWORDS].\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  RSA Public Keys\n   RFC 3280 [PROFILE] specifies the profile for using
      X.509 Certificates\n   in Internet applications.  When an RSA public key is
      used for\n   RSASSA-PSS digital signatures or RSAES-OAEP key transport, the\n
      \  conventions specified in this section augment RFC 3280.\n   Traditionally,
      the rsaEncryption object identifier is used to\n   identify RSA public keys.
      \ However, to implement all of the\n   recommendations described in Security
      Considerations (Section 8), the\n   certificate user needs to be able to determine
      the form of digital\n   signature or key transport that the RSA private key
      owner associates\n   with the public key.\n   The rsaEncryption object identifier
      continues to identify the subject\n   public key when the RSA private key owner
      does not wish to limit the\n   use of the public key exclusively to either RSASSA-PSS
      or RSAES-OAEP.\n   In this case, the rsaEncryption object identifier MUST be
      used in the\n   algorithm field within the subject public key information, and
      the\n   parameters field MUST contain NULL.\n      rsaEncryption  OBJECT IDENTIFIER
      \ ::=  { pkcs-1 1 }\n   Further discussion of the conventions associated with
      use of the\n   rsaEncryption object identifier can be found in RFC 3279 (see\n
      \  [PKALGS], Section 2.3.1).\n   When the RSA private key owner wishes to limit
      the use of the public\n   key exclusively to RSASSA-PSS, then the id-RSASSA-PSS
      object\n   identifier MUST be used in the algorithm field within the subject\n
      \  public key information, and, if present, the parameters field MUST\n   contain
      RSASSA-PSS-params.  The id-RSASSA-PSS object identifier value\n   and the RSASSA-PSS-params
      syntax are fully described in Section 3.\n   When the RSA private key owner
      wishes to limit the use of the public\n   key exclusively to RSAES-OAEP, then
      the id-RSAES-OAEP object\n   identifier MUST be used in the algorithm field
      within the subject\n   public key information, and, if present, the parameters
      field MUST\n   contain RSAES-OAEP-params.  The id-RSAES-OAEP object identifier
      value\n   and the RSAES-OAEP-params syntax are fully described in Section 4.\n
      \  Note: It is not possible to restrict the use of a key to a set of\n   algorithms
      (i.e., RSASSA-PSS and RSAES-OAEP).\n   Regardless of the object identifier used,
      the RSA public key is\n   encoded in the same manner in the subject public key
      information.\n   The RSA public key MUST be encoded using the type RSAPublicKey
      type:\n      RSAPublicKey  ::=  SEQUENCE  {\n         modulus            INTEGER,
      \   -- n\n         publicExponent     INTEGER  }  -- e\n   Here, the modulus
      is the modulus n, and publicExponent is the public\n   exponent e.  The DER
      encoded RSAPublicKey is carried in the\n   subjectPublicKey BIT STRING within
      the subject public key\n   information.\n   The intended application for the
      key MAY be indicated in the keyUsage\n   certificate extension (see [PROFILE],
      Section 4.2.1.3).\n   If the keyUsage extension is present in an end-entity
      certificate\n   that conveys an RSA public key with the id-RSASSA-PSS object\n
      \  identifier, then the keyUsage extension MUST contain one or both of\n   the
      following values:\n      nonRepudiation; and\n      digitalSignature.\n   If
      the keyUsage extension is present in a certification authority\n   certificate
      that conveys an RSA public key with the id-RSASSA-PSS\n   object identifier,
      then the keyUsage extension MUST contain one or\n   more of the following values:\n
      \     nonRepudiation;\n      digitalSignature;\n      keyCertSign; and\n      cRLSign.\n
      \  When a certificate conveys an RSA public key with the id-RSASSA-PSS\n   object
      identifier, the certificate user MUST only use the certified\n   RSA public
      key for RSASSA-PSS operations, and, if RSASSA-PSS-params\n   is present, the
      certificate user MUST perform those operations using\n   the one-way hash function,
      mask generation function, and trailer\n   field identified in the subject public
      key algorithm identifier\n   parameters within the certificate.\n   If the keyUsage
      extension is present in a certificate conveys an RSA\n   public key with the
      id-RSAES-OAEP object identifier, then the\n   keyUsage extension MUST contain
      only the following values:\n      keyEncipherment; and\n      dataEncipherment.\n
      \  However, both keyEncipherment and dataEncipherment SHOULD NOT be\n   present.\n
      \  When a certificate that conveys an RSA public key with the\n   id-RSAES-OAEP
      object identifier, the certificate user MUST only use\n   the certified RSA
      public key for RSAES-OAEP operations, and, if\n   RSAES-OAEP-params is present,
      the certificate user MUST perform those\n   operations using the one-way hash
      function and mask generation\n   function identified in the subject public key
      algorithm identifier\n   parameters within the certificate.\n"
    title: 1.2.  RSA Public Keys
  title: 1.  Introduction
- contents:
  - "2.  Common Functions\n   The RSASSA-PSS signature and the RSAES-OAEP key transport
    algorithms\n   make use of one-way hash functions and mask generation functions.\n"
  - contents:
    - "2.1.  One-way Hash Functions\n   PKCS #1 version 2.1 [P1v2.1] supports four
      one-way hash functions for\n   use with the RSASSA-PSS signature algorithm and
      the RSAES-OAEP key\n   transport algorithm: SHA-1, SHA-256, SHA-384, and SHA-512
      [SHA2].\n   This document adds support for SHA-224 [SHA-224] with both the\n
      \  RSASSA-PSS and the RSAES-OAEP algorithms.  While support for\n   additional
      one-way hash functions could be added in the future, no\n   other one-way hash
      functions are supported by this specification.\n   These one-way hash functions
      are identified by the following object\n   identifiers:\n      id-sha1  OBJECT
      IDENTIFIER  ::=  { iso(1)\n                           identified-organization(3)
      oiw(14)\n                           secsig(3) algorithms(2) 26 }\n      id-sha224
      \ OBJECT IDENTIFIER  ::=  {{ joint-iso-itu-t(2)\n                           country(16)
      us(840) organization(1) gov(101)\n                           csor(3) nistalgorithm(4)
      hashalgs(2) 4 }\n      id-sha256  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n
      \                          country(16) us(840) organization(1) gov(101)\n                           csor(3)
      nistalgorithm(4) hashalgs(2) 1 }\n      id-sha384  OBJECT IDENTIFIER  ::=  {
      joint-iso-itu-t(2)\n                           country(16) us(840) organization(1)
      gov(101)\n                           csor(3) nistalgorithm(4) hashalgs(2) 2
      }\n      id-sha512  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n                           country(16)
      us(840) organization(1) gov(101)\n                           csor(3) nistalgorithm(4)
      hashalgs(2) 3 }\n   There are two possible encodings for the AlgorithmIdentifier\n
      \  parameters field associated with these object identifiers.  The two\n   alternatives
      arise from the loss of the OPTIONAL associated with the\n   algorithm identifier
      parameters when the 1988 syntax for\n   AlgorithmIdentifier was translated into
      the 1997 syntax.  Later the\n   OPTIONAL was recovered via a defect report,
      but by then many people\n   thought that algorithm parameters were mandatory.
      \ Because of this\n   history some implementations encode parameters as a NULL
      element\n   while others omit them entirely.  The correct encoding is to omit
      the\n   parameters field; however, when RSASSA-PSS and RSAES-OAEP were\n   defined,
      it was done using the NULL parameters rather than absent\n   parameters.\n   All
      implementations MUST accept both NULL and absent parameters as\n   legal and
      equivalent encodings.\n   To be clear, the following algorithm identifiers are
      used when a NULL\n   parameter MUST be present:\n      sha1Identifier  AlgorithmIdentifier
      \ ::=  { id-sha1, NULL }\n      sha224Identifier  AlgorithmIdentifier  ::=  {
      id-sha224, NULL }\n      sha256Identifier  AlgorithmIdentifier  ::=  { id-sha256,
      NULL }\n      sha384Identifier  AlgorithmIdentifier  ::=  { id-sha384, NULL
      }\n      sha512Identifier  AlgorithmIdentifier  ::=  { id-sha512, NULL }\n"
    title: 2.1.  One-way Hash Functions
  - contents:
    - "2.2.  Mask Generation Functions\n   One mask generation function is used with
      the RSASSA-PSS signature\n   algorithm and the RSAES-OAEP key transport algorithm:
      MGF1 [P1v2.1].\n   No other mask generation functions are supported by this\n
      \  specification.\n   MGF1 is identified by the following object identifier:\n
      \     id-mgf1  OBJECT IDENTIFIER  ::=  { pkcs-1 8 }\n   The parameters field
      associated with id-mgf1 MUST have a\n   hashAlgorithm value which identifies
      the hash function being used\n   with MGF1.  This value MUST be sha1Identifier,
      sha224Identifier,\n   sha256Identifier, sha384Identifier, or sha512Identifier,
      as specified\n   in Section 2.1.  Implementations MUST support the default value,\n
      \  sha1Identifier, and MAY support the other four values.\n   The following
      algorithm identifiers have been assigned for each of\n   these alternatives:\n
      \     mgf1SHA1Identifier  AlgorithmIdentifier  ::=\n                           {
      id-mgf1, sha1Identifier }\n      mgf1SHA224Identifier  AlgorithmIdentifier  ::=\n
      \                          { id-mgf1, sha224Identifier }\n      mgf1SHA256Identifier
      \ AlgorithmIdentifier  ::=\n                           { id-mgf1, sha256Identifier
      }\n      mgf1SHA384Identifier  AlgorithmIdentifier  ::=\n                           {
      id-mgf1, sha384Identifier }\n      mgf1SHA512Identifier  AlgorithmIdentifier
      \ ::=\n                           { id-mgf1, sha512Identifier }\n"
    title: 2.2.  Mask Generation Functions
  title: 2.  Common Functions
- contents:
  - "3.  RSASSA-PSS Signature Algorithm\n   This section describes the conventions
    for using the RSASSA-PSS\n   signature algorithm with the Internet X.509 Certificate
    and CRL\n   profile [PROFILE].  The RSASSA-PSS signature algorithm is specified\n
    \  in PKCS #1 version 2.1 [P1v2.1].  The five one-way hash functions\n   discussed
    in Section 2.1 and the one mask generation function\n   discussed in Section 2.2
    can be used with RSASSA-PSS.\n   CAs that issue certificates with the id-RSASSA-PSS
    algorithm\n   identifier SHOULD require the presence of parameters in the\n   publicKeyAlgorithms
    field if the cA boolean flag is set in the basic\n   constraints certificate extension.
    \ CAs MAY require that the\n   parameters be present in the publicKeyAlgorithms
    field for end-entity\n   certificates.\n   CAs that use the RSASSA-PSS algorithm
    for signing certificates SHOULD\n   include RSASSA-PSS-params in the subjectPublicKeyInfo
    algorithm\n   parameters in their own certificates.  CAs that use the RSASSA-PSS\n
    \  algorithm for signing certificates or CRLs MUST include RSASSA-PSS-\n   params
    in the signatureAlgorithm parameters in the TBSCertificate or\n   TBSCertList
    structures.\n   Entities that validate RSASSA-PSS signatures MUST support SHA-1.\n
    \  They MAY also support any other one-way hash functions in Section\n   2.1.\n
    \  The data to be signed (e.g., the one-way hash function output value)\n   is
    formatted for the signature algorithm to be used.  Then, a private\n   key operation
    (e.g., RSA decryption) is performed to generate the\n   signature value.  This
    signature value is then ASN.1 encoded as a BIT\n   STRING and included in the
    Certificate or CertificateList in the\n   signatureValue field.  Section 3.2 specifies
    the format of RSASSA-PSS\n   signature values.\n"
  - contents:
    - "3.1.  RSASSA-PSS Public Keys\n   When RSASSA-PSS is used in an AlgorithmIdentifier,
      the parameters\n   MUST employ the RSASSA-PSS-params syntax.  The parameters
      may be\n   either absent or present when used as subject public key information.\n
      \  The parameters MUST be present when used in the algorithm identifier\n   associated
      with a signature value.\n   When signing, it is RECOMMENDED that the parameters,
      except for\n   possibly saltLength, remain fixed for all usages of a given RSA
      key\n   pair.\n      id-RSASSA-PSS  OBJECT IDENTIFIER  ::=  { pkcs-1 10 }\n
      \     RSASSA-PSS-params  ::=  SEQUENCE  {\n         hashAlgorithm      [0] HashAlgorithm
      DEFAULT\n                                   sha1Identifier,\n         maskGenAlgorithm
      \  [1] MaskGenAlgorithm DEFAULT\n                                   mgf1SHA1Identifier,\n
      \        saltLength         [2] INTEGER DEFAULT 20,\n         trailerField       [3]
      INTEGER DEFAULT 1  }\n   The fields of type RSASSA-PSS-params have the following
      meanings:\n      hashAlgorithm\n         The hashAlgorithm field identifies
      the hash function.  It MUST\n         be one of the algorithm identifiers listed
      in Section 2.1, and\n         the default hash function is SHA-1.  Implementations
      MUST\n         support SHA-1 and MAY support any of the other one-way hash\n
      \        functions listed in Section 2.1.  Implementations that perform\n         signature
      generation MUST omit the hashAlgorithm field when\n         SHA-1 is used, indicating
      that the default algorithm was used.\n         Implementations that perform
      signature validation MUST\n         recognize both the sha1Identifier algorithm
      identifier and an\n         absent hashAlgorithm field as an indication that
      SHA-1 was\n         used.\n      maskGenAlgorithm\n         The maskGenAlgorithm
      field identifies the mask generation\n         function.  The default mask generation
      function is MGF1 with\n         SHA-1.  For MGF1, it is strongly RECOMMENDED
      that the\n         underlying hash function be the same as the one identified
      by\n         hashAlgorithm.  Implementations MUST support MGF1.  MGF1\n         requires
      a one-way hash function that is identified in the\n         parameters field
      of the MGF1 algorithm identifier.\n         Implementations MUST support SHA-1
      and MAY support any of the\n         other one-way hash functions listed in
      section Section 2.1.\n         The MGF1 algorithm identifier is comprised of
      the id-mgf1\n         object identifier and a parameter that contains the algorithm\n
      \        identifier of the one-way hash function employed with MGF1.\n         The
      SHA-1 algorithm identifier is comprised of the id-sha1\n         object identifier
      and an (optional) parameter of NULL.\n         Implementations that perform
      signature generation MUST omit the\n         maskGenAlgorithm field when MGF1
      with SHA-1 is used, indicating\n         that the default algorithm was used.\n
      \        Although mfg1SHA1Identifier is defined as the default value for\n         this
      field, implementations MUST accept both the default value\n         encoding
      (i.e., an absent field) and mfg1SHA1Identifier to be\n         explicitly present
      in the encoding.\n      saltLength\n         The saltLength field is the octet
      length of the salt.  For a\n         given hashAlgorithm, the recommended value
      of saltLength is the\n         number of octets in the hash value.  Unlike the
      other fields of\n         type RSASSA-PSS-params, saltLength does not need to
      be fixed\n         for a given RSA key pair; a different value could be used
      for\n         each RSASSA-PSS signature generated.\n      trailerField\n         The
      trailerField field is an integer.  It provides\n         compatibility with
      IEEE Std 1363a-2004 [P1363A].  The value\n         MUST be 1, which represents
      the trailer field with hexadecimal\n         value 0xBC.  Other trailer fields,
      including the trailer field\n         composed of HashID concatenated with 0xCC
      that is specified in\n         IEEE Std 1363a, are not supported.  Implementations
      that\n         perform signature generation MUST omit the trailerField field,\n
      \        indicating that the default trailer field value was used.\n         Implementations
      that perform signature validation MUST\n         recognize both a present trailerField
      field with value 1 and an\n         absent trailerField field.\n   If the default
      values of the hashAlgorithm, maskGenAlgorithm, and\n   trailerField fields of
      RSASSA-PSS-params are used, then the algorithm\n   identifier will have the
      following value:\n      rSASSA-PSS-Default-Identifier  AlgorithmIdentifier  ::=
      \ {\n                           id-RSASSA-PSS, rSASSA-PSS-Default-Params }\n
      \     rSASSA-PSS-Default-Params RSASSA-PSS-Params ::= {\n                           sha1Identifier,
      mgf1SHA1Identifier, 20, 1}\n"
    title: 3.1.  RSASSA-PSS Public Keys
  - contents:
    - "3.2.  RSASSA-PSS Signature Values\n   The output of the RSASSA-PSS signature
      algorithm is an octet string,\n   which has the same length in octets as the
      RSA modulus n.\n   Signature values in CMS [CMS] are represented as octet strings,
      and\n   the output is used directly.  However, signature values in\n   certificates
      and CRLs [PROFILE] are represented as bit strings, and\n   conversion is needed.\n
      \  To convert a signature value to a bit string, the most significant\n   bit
      of the first octet of the signature value SHALL become the first\n   bit of
      the bit string, and so on through the least significant bit of\n   the last
      octet of the signature value, which SHALL become the last\n   bit of the bit
      string.\n"
    title: 3.2.  RSASSA-PSS Signature Values
  - contents:
    - "3.3.  RSASSA-PSS Signature Parameter Validation\n   Three possible parameter
      validation scenarios exist for RSASSA-PSS\n   signature values.\n   1.  The
      key is identified by the rsaEncryption algorithm identifier.\n       In this
      case no parameter validation is needed.\n   2.  The key is identified by the
      id-RSASSA-PSS signature algorithm\n       identifier, but the parameters field
      is absent.  In this case no\n       parameter validation is needed.\n   3.  The
      key is identified by the id-RSASSA-PSS signature algorithm\n       identifier
      and the parameters are present.  In this case all\n       parameters in the
      signature structure algorithm identifier MUST\n       match the parameters in
      the key structure algorithm identifier\n       except the saltLength field.
      \ The saltLength field in the\n       signature parameters MUST be greater or
      equal to that in the key\n       parameters field.\n"
    title: 3.3.  RSASSA-PSS Signature Parameter Validation
  title: 3.  RSASSA-PSS Signature Algorithm
- contents:
  - "4.  RSAES-OAEP Key Transport Algorithm\n   This section describes the conventions
    for using the RSAES-OAEP key\n   transport algorithm with the Internet X.509 Certificate
    and CRL\n   profile [PROFILE].  RSAES-OAEP is specified in PKCS #1 version 2.1\n
    \  [P1v2.1].  The five one-way hash functions discussed in Section 2.1\n   and
    the one mask generation function discussed in Section 2.2 can be\n   used with
    RSAES-OAEP.  Conforming CAs and applications MUST support\n   RSAES-OAEP key transport
    algorithm using SHA-1.  The other four one-\n   way hash functions MAY also be
    supported.\n   CAs that issue certificates with the id-RSAES-OAEP algorithm\n
    \  identifier SHOULD require the presence of parameters in the\n   publicKeyAlgorithms
    field for all certificates.  Entities that use a\n   certificate with a publicKeyAlgorithm
    value of id-RSA-OAEP where the\n   parameters are absent SHOULD use the default
    set of parameters for\n   RSAES-OAEP-params.  Entities that use a certificate
    with a\n   publicKeyAlgorithm value of rsaEncryption SHOULD use the default set\n
    \  of parameters for RSAES-OAEP-params.\n"
  - contents:
    - "4.1.  RSAES-OAEP Public Keys\n   When id-RSAES-OAEP is used in an AlgorithmIdentifier,
      the parameters\n   MUST employ the RSAES-OAEP-params syntax.  The parameters
      may be\n   either absent or present when used as subject public key information.\n
      \  The parameters MUST be present when used in the algorithm identifier\n   associated
      with an encrypted value.\n      id-RSAES-OAEP  OBJECT IDENTIFIER  ::=  { pkcs-1
      7 }\n      RSAES-OAEP-params  ::=  SEQUENCE  {\n         hashFunc          [0]
      AlgorithmIdentifier DEFAULT\n                                  sha1Identifier,\n
      \        maskGenFunc       [1] AlgorithmIdentifier DEFAULT\n                                  mgf1SHA1Identifier,\n
      \        pSourceFunc       [2] AlgorithmIdentifier DEFAULT\n                                  pSpecifiedEmptyIdentifier
      \ }\n      pSpecifiedEmptyIdentifier  AlgorithmIdentifier  ::=\n                           {
      id-pSpecified, nullOctetString }\n      nullOctetString  OCTET STRING (SIZE
      (0))  ::=  { ''H }\n   The fields of type RSAES-OAEP-params have the following
      meanings:\n      hashFunc\n         The hashFunc field identifies the one-way
      hash function.  It\n         MUST be one of the algorithm identifiers listed
      in Section 2.1,\n         and the default hash function is SHA-1.  Implementations
      MUST\n         support SHA-1 and MAY support other one-way hash functions\n
      \        listed in Section 2.1.  Implementations that perform encryption\n         MUST
      omit the hashFunc field when SHA-1 is used, indicating\n         that the default
      algorithm was used.  Implementations that\n         perform decryption MUST
      recognize both the sha1Identifier\n         algorithm identifier and an absent
      hashFunc field as an\n         indication that SHA-1 was used.\n      maskGenFunc\n
      \        The maskGenFunc field identifies the mask generation function.\n         The
      default mask generation function is MGF1 with SHA-1.  For\n         MGF1, it
      is strongly RECOMMENDED that the underlying hash\n         function be the same
      as the one identified by hashFunc.\n         Implementations MUST support MGF1.
      \ MGF1 requires a one-way\n         hash function that is identified in the
      parameter field of the\n         MGF1 algorithm identifier.  Implementations
      MUST support SHA-1\n         and MAY support any of the other one-way hash functions
      listed\n         in Section 2.1.  The MGF1 algorithm identifier is comprised
      of\n         the id-mgf1 object identifier and a parameter that contains the\n
      \        algorithm identifier of the one-way hash function employed with\n         MGF1.
      \ The SHA-1 algorithm identifier is comprised of the id-\n         sha1 object
      identifier and an (optional) parameter of NULL.\n         Implementations that
      perform encryption MUST omit the\n         maskGenFunc field when MGF1 with
      SHA-1 is used, indicating that\n         the default algorithm was used.\n         Although
      mfg1SHA1Identifier is defined as the default value for\n         this field,
      implementations MUST accept both the default value\n         encoding (i.e.,
      an absent field) and the mfg1SHA1Identifier to\n         be explicitly present
      in the encoding.\n      pSourceFunc\n         The pSourceFunc field identifies
      the source (and possibly the\n         value) of the encoding parameters, commonly
      called P.\n         Implementations MUST represent P by an algorithm identifier,\n
      \        id-pSpecified, indicating that P is explicitly provided as an\n         OCTET
      STRING in the parameters.  The default value for P is an\n         empty string.
      \ In this case, pHash in EME-OAEP contains the\n         hash of a zero length
      string.  Implementations MUST support a\n         zero length P value.  Implementations
      that perform encryption\n         MUST omit the pSourceFunc field when a zero
      length P value is\n         used, indicating that the default value was used.\n
      \        Implementations that perform decryption MUST recognize both the\n         id-pSpecified
      object identifier and an absent pSourceFunc field\n         as an indication
      that a zero length P value was used.\n         Implementations that perform
      decryption MUST support a zero\n         length P value and MAY support other
      values.  Compliant\n         implementations MUST NOT use any value other than
      id-pSpecified\n         for pSourceFunc.\n   If the default values of the hashFunc,
      maskGenFunc, and pSourceFunc\n   fields of RSAES-OAEP-params are used, then
      the algorithm identifier\n   will have the following value:\n      rSAES-OAEP-Default-Identifier
      \ AlgorithmIdentifier  ::=\n                            { id-RSAES-OAEP,\n                              rSAES-OAEP-Default-Params
      }\n      rSAES-OAEP-Default-Params RSASSA-OAEP-params ::=\n                               {
      sha1Identifier,\n                                 mgf1SHA1Identifier,\n                                 pSpecifiedEmptyIdentifier
      \ }\n"
    title: 4.1.  RSAES-OAEP Public Keys
  title: 4.  RSAES-OAEP Key Transport Algorithm
- contents:
  - "5.  PKCS #1 Version 1.5 Signature Algorithm\n   RFC 2313 [P1v1.5] specifies the
    PKCS #1 Version 1.5 signature\n   algorithm.  This specification is also included
    in PKCS #1 Version\n   2.1 [P1v2.1].  RFC 3279 [PKALGS] specifies the use of the
    PKCS #1\n   Version 1.5 signature algorithm with the MD2, MD5, and the SHA-1\n
    \  one-way hash functions.  This section specifies the algorithm\n   identifiers
    for using the SHA-224, SHA-256, SHA-384, and SHA-512\n   one-way hash functions
    with the PKCS #1 version 1.5 signature\n   algorithm.\n   The RSASSA-PSS signature
    algorithm is preferred over the PKCS #1\n   Version 1.5 signature algorithm.  Although
    no attacks are known\n   against PKCS #1 Version 1.5 signature algorithm, in the
    interest of\n   increased robustness, RSASSA-PSS signature algorithm is recommended\n
    \  for eventual adoption, especially by new applications.  This section\n   is
    included for compatibility with existing applications, and while\n   still appropriate
    for new applications, a gradual transition to the\n   RSASSA-PSS signature algorithm
    is encouraged.\n   The PKCS #1 Version 1.5 signature algorithm with these one-way
    hash\n   functions and the RSA cryptosystem is implemented using the padding\n
    \  and encoding conventions described in RFC 2313 [P1v1.5].\n   The message digest
    is computed using the SHA-224, SHA-256, SHA-384,\n   or SHA-512 one-way hash function.\n
    \  The PKCS #1 version 1.5 signature algorithm, as specified in RFC\n   2313,
    includes a data encoding step.  In this step, the message\n   digest and the object
    identifier for the one-way hash function used\n   to compute the message digest
    are combined.  When performing the data\n   encoding step, the id-sha224, id-sha256,
    id-sha384, and id-sha512\n   object identifiers (see Section 2.1) MUST be used
    to specify the\n   SHA-224, SHA-256, SHA-384, and SHA-512 one-way hash functions,\n
    \  respectively.\n   The object identifier used to identify the PKCS #1 version
    1.5\n   signature algorithm with SHA-224 is:\n      sha224WithRSAEncryption  OBJECT
    IDENTIFIER  ::=  { pkcs-1 14 }\n   The object identifier used to identify the
    PKCS #1 version 1.5\n   signature algorithm with SHA-256 is:\n      sha256WithRSAEncryption
    \ OBJECT IDENTIFIER  ::=  { pkcs-1 11 }\n   The object identifier used to identify
    the PKCS #1 version 1.5\n   signature algorithm with SHA-384 is:\n      sha384WithRSAEncryption
    \ OBJECT IDENTIFIER  ::=  { pkcs-1 12 }\n   The object identifier used to identify
    the PKCS #1 version 1.5\n   signature algorithm with SHA-512 is:\n      sha512WithRSAEncryption
    \ OBJECT IDENTIFIER  ::=  { pkcs-1 13 }\n   When any of these four object identifiers
    appears within an\n   AlgorithmIdentifier, the parameters MUST be NULL.  Implementations\n
    \  MUST accept the parameters being absent as well as present.\n   The RSA signature
    generation process and the encoding of the result\n   are described in detail
    in RFC 2313 [P1v1.5].\n"
  title: '5.  PKCS #1 Version 1.5 Signature Algorithm'
- contents:
  - "6.  ASN.1 Module\n   PKIX1-PSS-OAEP-Algorithms\n        { iso(1) identified-organization(3)
    dod(6)\n          internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n          id-mod-pkix1-rsa-pkalgs(33)
    }\n      DEFINITIONS EXPLICIT TAGS ::= BEGIN\n      -- EXPORTS All;\n      IMPORTS\n
    \       AlgorithmIdentifier\n            FROM PKIX1Explicit88 -- Found in [PROFILE]\n
    \           { iso(1) identified-organization(3) dod(6) internet(1)\n              security(5)
    mechanisms(5) pkix(7) id-mod(0)\n              id-pkix1-explicit(18) } ;\n      --
    ============================\n      --   Basic object identifiers\n      -- ============================\n
    \     pkcs-1  OBJECT IDENTIFIER  ::=  { iso(1) member-body(2)\n                              us(840)
    rsadsi(113549) pkcs(1) 1 }\n      -- When rsaEncryption is used in an AlgorithmIdentifier
    the\n      -- parameters MUST be present and MUST be NULL.\n      rsaEncryption
    \ OBJECT IDENTIFIER  ::=  { pkcs-1 1 }\n      -- When id-RSAES-OAEP is used in
    an AlgorithmIdentifier,\n      -- and the parameters field is present, it MUST
    be\n      -- RSAES-OAEP-params\n      id-RSAES-OAEP  OBJECT IDENTIFIER  ::=  {
    pkcs-1 7 }\n      -- When id-pSpecified is used in an AlgorithmIdentifier the\n
    \     -- parameters MUST be an OCTET STRING.\n      id-pSpecified  OBJECT IDENTIFIER
    \ ::=  { pkcs-1 9 }\n      -- When id-RSASSA-PSS is used in an AlgorithmIdentifier,
    and the\n      -- parameters field is present, it MUST be RSASSA-PSS-params.\n
    \     id-RSASSA-PSS  OBJECT IDENTIFIER  ::=  { pkcs-1 10 }\n      -- When id-mgf1
    is used in an AlgorithmIdentifier the parameters\n      -- MUST be present and
    MUST be a HashAlgorithm.\n      id-mgf1  OBJECT IDENTIFIER  ::=  { pkcs-1 8 }\n
    \     -- When the following OIDs are used in an AlgorithmIdentifier, the\n      --
    parameters MUST be present and MUST be NULL.\n      sha224WithRSAEncryption  OBJECT
    IDENTIFIER  ::=  { pkcs-1 14 }\n      sha256WithRSAEncryption  OBJECT IDENTIFIER
    \ ::=  { pkcs-1 11 }\n      sha384WithRSAEncryption  OBJECT IDENTIFIER  ::=  {
    pkcs-1 12 }\n      sha512WithRSAEncryption  OBJECT IDENTIFIER  ::=  { pkcs-1 13
    }\n      -- When the following OIDs are used in an AlgorithmIdentifier the\n      --
    parameters SHOULD be absent, but if the parameters are present,\n      -- they
    MUST be NULL.\n      id-sha1  OBJECT IDENTIFIER  ::=  { iso(1)\n                           identified-organization(3)
    oiw(14)\n                           secsig(3) algorithms(2) 26 }\n      id-sha224
    \ OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n                           country(16)
    us(840) organization(1) gov(101)\n                           csor(3) nistalgorithm(4)
    hashalgs(2) 4 }\n      id-sha256  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n
    \                          country(16) us(840) organization(1) gov(101)\n                           csor(3)
    nistalgorithm(4) hashalgs(2) 1 }\n      id-sha384  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n
    \                          country(16) us(840) organization(1) gov(101)\n                           csor(3)
    nistalgorithm(4) hashalgs(2) 2 }\n      id-sha512  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n
    \                          country(16) us(840) organization(1) gov(101)\n                           csor(3)
    nistalgorithm(4) hashalgs(2) 3 }\n      -- =============\n      --   Constants\n
    \     -- =============\n      nullOctetString  OCTET STRING (SIZE (0))  ::=  ''H\n
    \     nullParameters NULL  ::=  NULL\n      -- =========================\n      --
    \  Algorithm Identifiers\n      -- =========================\n      sha1Identifier
    \ AlgorithmIdentifier  ::=  {\n                              algorithm id-sha1,\n
    \                             parameters nullParameters  }\n      sha224Identifier
    \   AlgorithmIdentifier  ::=  {\n                              algorithm id-sha224,\n
    \                             parameters nullParameters  }\n      sha256Identifier
    \   AlgorithmIdentifier  ::=  {\n                              algorithm id-sha256,\n
    \                             parameters nullParameters  }\n      sha384Identifier
    \   AlgorithmIdentifier  ::=  {\n                              algorithm id-sha384,\n
    \                             parameters nullParameters  }\n      sha512Identifier
    \   AlgorithmIdentifier  ::=  {\n                              algorithm id-sha512,\n
    \                             parameters nullParameters  }\n      mgf1SHA1Identifier
    \ AlgorithmIdentifier  ::=  {\n                              algorithm id-mgf1,\n
    \                             parameters sha1Identifier }\n      mgf1SHA224Identifier
    \ AlgorithmIdentifier  ::=  {\n                              algorithm id-mgf1,\n
    \                             parameters sha224Identifier }\n      mgf1SHA256Identifier
    \ AlgorithmIdentifier  ::=  {\n                              algorithm id-mgf1,\n
    \                             parameters sha256Identifier }\n      mgf1SHA384Identifier
    \ AlgorithmIdentifier  ::=  {\n                              algorithm id-mgf1,\n
    \                             parameters sha384Identifier }\n      mgf1SHA512Identifier
    \ AlgorithmIdentifier  ::=  {\n                              algorithm id-mgf1,\n
    \                             parameters sha512Identifier }\n      pSpecifiedEmptyIdentifier
    \ AlgorithmIdentifier  ::=  {\n                              algorithm id-pSpecified,\n
    \                             parameters nullOctetString }\n      rSASSA-PSS-Default-Params
    RSASSA-PSS-params ::=  {\n                              hashAlgorithm sha1Identifier,\n
    \                             maskGenAlgorithm mgf1SHA1Identifier,\n                              saltLength
    20,\n                              trailerField 1  }\n      rSASSA-PSS-Default-Identifier
    \ AlgorithmIdentifier  ::=  {\n                              algorithm id-RSASSA-PSS,\n
    \                             parameters rSASSA-PSS-Default-Params }\n      rSASSA-PSS-SHA224-Identifier
    \ AlgorithmIdentifier  ::=  {\n                              algorithm id-RSASSA-PSS,\n
    \                             parameters rSASSA-PSS-SHA224-Params }\n      rSASSA-PSS-SHA224-Params
    RSASSA-PSS-params ::= {\n                              hashAlgorithm sha224Identifier,\n
    \                             maskGenAlgorithm mgf1SHA224Identifier,\n                              saltLength
    20,\n                              trailerField 1  }\n      rSASSA-PSS-SHA256-Identifier
    \ AlgorithmIdentifier  ::=  {\n                              algorithm id-RSASSA-PSS,\n
    \                             parameters rSASSA-PSS-SHA256-Params }\n      rSASSA-PSS-SHA256-Params
    RSASSA-PSS-params ::=  {\n                              hashAlgorithm sha256Identifier,\n
    \                             maskGenAlgorithm mgf1SHA256Identifier,\n                              saltLength
    20,\n                              trailerField 1  }\n      rSASSA-PSS-SHA384-Identifier
    \ AlgorithmIdentifier  ::=  {\n                              algorithm id-RSASSA-PSS,\n
    \                             parameters rSASSA-PSS-SHA384-Params }\n      rSASSA-PSS-SHA384-Params
    RSASSA-PSS-params ::= {\n                              hashAlgorithm sha384Identifier,\n
    \                             maskGenAlgorithm mgf1SHA384Identifier,\n                              saltLength
    20,\n                              trailerField 1  }\n      rSASSA-PSS-SHA512-Identifier
    \ AlgorithmIdentifier  ::=  {\n                              algorithm id-RSASSA-PSS,\n
    \                             parameters rSSASSA-PSS-SHA512-params }\n      rSSASSA-PSS-SHA512-params
    RSASSA-PSS-params ::= {\n                              hashAlgorithm sha512Identifier,\n
    \                             maskGenAlgorithm mgf1SHA512Identifier,\n                              saltLength
    20,\n                              trailerField 1  }\n      rSAES-OAEP-Default-Params
    RSAES-OAEP-params ::=  {\n                              hashFunc sha1Identifier,\n
    \                             maskGenFunc mgf1SHA1Identifier,\n                              pSourceFunc
    pSpecifiedEmptyIdentifier  }\n      rSAES-OAEP-Default-Identifier  AlgorithmIdentifier
    \ ::=  {\n                              algorithm id-RSAES-OAEP,\n                              parameters
    rSAES-OAEP-Default-Params }\n      rSAES-OAEP-SHA224-Identifier  AlgorithmIdentifier
    \ ::=  {\n                              algorithm id-RSAES-OAEP,\n                              parameters
    rSAES-OAEP-SHA224-Params }\n      rSAES-OAEP-SHA224-Params RSAES-OAEP-params ::=
    \  {\n                              hashFunc sha224Identifier,\n                              maskGenFunc
    mgf1SHA224Identifier,\n                              pSourceFunc pSpecifiedEmptyIdentifier
    \ }\n      rSAES-OAEP-SHA256-Identifier  AlgorithmIdentifier  ::=  {\n                              algorithm
    id-RSAES-OAEP,\n                              parameters rSAES-OAEP-SHA256-Params
    }\n      rSAES-OAEP-SHA256-Params RSAES-OAEP-params ::=  {\n                              hashFunc
    sha256Identifier,\n                              maskGenFunc mgf1SHA256Identifier,\n
    \                             pSourceFunc pSpecifiedEmptyIdentifier  }\n      rSAES-OAEP-SHA384-Identifier
    \ AlgorithmIdentifier  ::=  {\n                              algorithm id-RSAES-OAEP,\n
    \                             parameters rSAES-OAEP-SHA384-Params }\n      rSAES-OAEP-SHA384-Params
    RSAES-OAEP-params ::=  {\n                              hashFunc sha384Identifier,\n
    \                             maskGenFunc mgf1SHA384Identifier,\n                              pSourceFunc
    pSpecifiedEmptyIdentifier  }\n      rSAES-OAEP-SHA512-Identifier  AlgorithmIdentifier
    \ ::=  {\n                              algorithm id-RSAES-OAEP,\n                              parameters
    rSAES-OAEP-SHA512-Params }\n      rSAES-OAEP-SHA512-Params RSAES-OAEP-params ::=
    \ {\n                              hashFunc sha512Identifier,\n                              maskGenFunc
    mgf1SHA512Identifier,\n                              pSourceFunc pSpecifiedEmptyIdentifier
    \ }\n      -- ===================\n      --   Main structures\n      -- ===================\n
    \     -- Used in SubjectPublicKeyInfo of X.509 Certificate.\n      RSAPublicKey
    \ ::=  SEQUENCE  {\n         modulus           INTEGER,    -- n\n         publicExponent
    \   INTEGER  }  -- e\n      -- AlgorithmIdentifier parameters for id-RSASSA-PSS.\n
    \     -- Note that the tags in this Sequence are explicit.\n      RSASSA-PSS-params
    \ ::=  SEQUENCE  {\n         hashAlgorithm     [0] HashAlgorithm DEFAULT\n                                  sha1Identifier,\n
    \        maskGenAlgorithm  [1] MaskGenAlgorithm DEFAULT\n                                  mgf1SHA1Identifier,\n
    \        saltLength        [2] INTEGER DEFAULT 20,\n         trailerField      [3]
    INTEGER DEFAULT 1  }\n      HashAlgorithm  ::=  AlgorithmIdentifier\n      MaskGenAlgorithm
    \ ::=  AlgorithmIdentifier\n      -- AlgorithmIdentifier parameters for id-RSAES-OAEP.\n
    \     -- Note that the tags in this Sequence are explicit.\n      RSAES-OAEP-params
    \ ::=  SEQUENCE  {\n         hashFunc          [0] AlgorithmIdentifier DEFAULT\n
    \                                 sha1Identifier,\n         maskGenFunc       [1]
    AlgorithmIdentifier DEFAULT\n                                  mgf1SHA1Identifier,\n
    \        pSourceFunc       [2] AlgorithmIdentifier DEFAULT\n                                  pSpecifiedEmptyIdentifier
    \ }\n      END\n"
  title: 6.  ASN.1 Module
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [P1v1.5]       Kaliski, B., \"PKCS #1: RSA Encryption
      Version 1.5\",\n                  RFC 2313, March 1998.\n   [P1v2.1]       Jonsson,
      J. and B. Kaliski, \"PKCS #1: RSA Cryptography\n                  Specifications
      Version 2.1\", RFC 3447, February 2003.\n   [PROFILE]      Housley, R., Polk,
      W., Ford, W., and D. Solo,\n                  \"Internet X.509 Public Key Infrastructure
      Certificate\n                  and Certificate Revocation List (CRL) Profile\",
      RFC\n                  3280, April 2002.\n   [SHA2]         National Institute
      of Standards and Technology (NIST),\n                  FIPS 180-2: Secure Hash
      Standard, 1 August 2002.\n   [SHA224]       Housley, R., \"A 224-bit One-way
      Hash Function: SHA-\n                  224\", RFC 3874, September 2004.\n   [STDWORDS]
      \    Bradner, S., \"Key Words for Use in RFCs to Indicate\n                  Requirement
      Levels\", RFC 2119, March 1997.\n   [X.208-88]     CCITT Recommendation X.208:
      Specification of Abstract\n                  Syntax Notation One (ASN.1), 1988.\n
      \  [X.209-88]     CCITT Recommendation X.209: Specification of Basic\n                  Encoding
      Rules for Abstract Syntax Notation One\n                  (ASN.1), 1988.\n   [X.509-88]
      \    CCITT Recommendation X.509: The Directory -\n                  Authentication
      Framework, 1988.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [CMS]          Housley, R., \"Cryptographic
      Message Syntax (CMS)\", RFC\n                  3852, July 2004.\n   [GUIDE]
      \       National Institute of Standards and Technology, Second\n                  Draft:
      \"Key Management Guideline, Part 1: General\n                  Guidance.\"  June
      2002.\n                  [http://csrc.nist.gov/encryption/kms/guideline-1.pdf]\n
      \  [P1363A]       IEEE Std 1363a-2004, Standard Specifications for\n                  Public
      Key Cryptography - Amendment 1: Additional\n                  Techniques, 2004.\n
      \  [PKALGS]       Bassham, L., Polk, W., and R. Housley, \"Algorithms and\n
      \                 Identifiers for the Internet X.509 Public Key\n                  Infrastructure
      Certificate and Certificate Revocation\n                  List (CRL) Profile\",
      RFC 3279, April 2002.\n   [RANDOM]       Eastlake 3rd, D., Crocker, S., and
      J. Schiller,\n                  \"Randomness Recommendations for Security\",
      RFC 1750,\n                  December 1994.\n   [SHA-1-ATTACK] Wang, X., Yin,
      Y.L., and H. Yu, \"Finding Collisions in\n                  the Full SHA1\",
      to appear, CRYPTO 2005.  Preprint\n                  available at\n                  http://theory.csail.mit.edu/~yiqun/shanote.pdf.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "8.  Security Considerations\n   This specification supplements RFC 3280 [PROFILE].
    \ The Security\n   Considerations section of that document applies to this specification\n
    \  as well.\n   Implementations must protect the RSA private key.  Compromising
    the\n   RSA private key may result in the disclosure of all messages\n   protected
    with that key.\n   The generation of RSA public/private key pairs relies on a
    random\n   numbers.  Using inadequate pseudo-random number generators (PRNGs)
    to\n   generate cryptographic keys can result in little or no security.  An\n
    \  attacker may find it much easier to reproduce the PRNG environment\n   that
    produced the keys and search the resulting small set of\n   possibilities, than
    to brute force search the whole key space.  The\n   generation of quality random
    numbers is difficult and RFC 1750\n   [RANDOM] offers important guidance in this
    area.\n   Generally, good cryptographic practice employs a given RSA key pair\n
    \  in only one scheme.  This practice avoids the risk that vulnerability\n   in
    one scheme may compromise the security of the other, and may be\n   essential
    to maintain provable security.  While PKCS #1 Version 1.5\n   [P1v1.5] has been
    employed for both key transport and digital\n   signature without any known bad
    interactions, such a combined use of\n   an RSA key pair is not recommended in
    the future.  Therefore, an RSA\n   key pair used for RSASSA-PSS signature generation
    should not be used\n   for other purposes.  For similar reasons, one RSA key pair
    should\n   always be used with the same RSASSA-PSS parameters (except possibly\n
    \  for the salt length).  Likewise, an RSA key pair used for RSAES-OAEP\n   key
    transport should not be used for other purposes.  For similar\n   reasons, one
    RSA key pair should always be used with the same RSAES-\n   OAEP parameters.\n
    \  This specification requires implementations to support the SHA-1\n   one-way
    hash function for interoperability, but support for other\n   one-way hash functions
    is permitted.  Wang et al. [SHA-1-ATTACK] have\n   recently discovered a collision
    attack against SHA-1 with complexity\n   2^69.  This attack, which can produce
    two new messages with the same\n   hash value, is the first attack on SHA-1 faster
    than the generic\n   attack with complexity 2^80, where 80 is one-half the bit
    length of\n   the hash value.\n   In general, when a one-way hash function is
    used with a digital\n   signature scheme, a collision attack is easily translated
    into a\n   signature forgery.  Therefore, using SHA-1 in a digital signature\n
    \  scheme provides a security level of no more than 69 bits if the\n   attacker
    can persuade the signer to sign a message resulting from a\n   collision attack.
    \ If the attacker can't persuade the signer to sign\n   such a message, however,
    then SHA-1 still provides a security level\n   of at least 80 bits since the best
    (known) inversion attack (which\n   produces a new message with a previous hash
    value) is the generic\n   attack with complexity 2^160.  If a greater level of
    security is\n   desired, then a secure one-way hash function with a longer hash
    value\n   is needed.  SHA-256, SHA-384, and SHA-512 are reasonable choices\n   [SHA2],
    although their security needs to be reconfirmed in light of\n   the SHA-1 results.\n
    \  The metrics for choosing a one-way hash function for use in digital\n   signatures
    do not directly apply to the RSAES-OAEP key transport\n   algorithm, since a collision
    attack on the one-way hash function does\n   not directly translate into an attack
    on the key transport algorithm,\n   unless the encoding parameters P vary (in
    which case a collision of\n   the hash value for different encoding parameters
    might be exploited).\n   Nevertheless, for consistency with the practice for digital
    signature\n   schemes, and in case the encoding parameters P is not the empty\n
    \  string, it is recommended that the same rule of thumb be applied to\n   selecting
    a one-way hash function for use with RSAES-OAEP.  That is,\n   the one-way hash
    function should be selected so that the bit length\n   of the hash value is at
    least twice as long as the desired security\n   level in bits.\n   The key size
    selected impacts the strength achieved when implementing\n   cryptographic services.
    \ Thus, selecting appropriate key sizes is\n   critical to implementing appropriate
    security.  A 1024-bit RSA public\n   key is considered to provide a security level
    of about 80 bits.  In\n   [GUIDE], the National Institute of Standards and Technology
    (NIST)\n   suggests that a security level of 80 bits is adequate for the\n   protection
    of sensitive information until 2015.  This recommendation\n   is likely to be
    revised based on recent advances, and is expected to\n   be more conservative,
    suggesting that a security level of 80 bits is\n   adequate protection of sensitive
    information until 2010.  If a\n   security level greater than 80 bits is needed,
    then a longer RSA\n   public key and a secure one-way hash function with a longer
    hash\n   value are needed.  SHA-224, SHA-256, SHA-384, and SHA-512 are\n   reasonable
    choices for such a one-way hash function, modulo the\n   reconfirmation noted
    above.  For this reason, the algorithm\n   identifiers for these one-way hash
    functions are included in the\n   ASN.1 module in Section 6.\n   Current implementations
    MUST support 1024-bit RSA public key sizes.\n   Before the end of 2007, implementations
    SHOULD support RSA public key\n   sizes of at least 2048 bits and SHOULD support
    SHA-256.  This\n   requirement is intended to allow adequate time for users to
    deploy\n   the stronger digital signature capability by 2010.\n   When using RSASSA-PSS,
    the same one-way hash function should be\n   employed for the hashAlgorithm and
    the maskGenAlgorithm, but it is\n   not required.  When using RSAES-OAEP, the
    same one-way hash function\n   should be employed for the hashFunc and the maskGenFunc,
    but it is\n   not required.  In each case, using the same one-way hash function\n
    \  helps with security analysis and reduces implementation complexity.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  IANA Considerations\n   Within the certificates and CRLs, algorithms are
    identified by object\n   identifiers.  All object identifiers used in this document
    were\n   assigned in Public-Key Cryptography Standards (PKCS) documents or by\n
    \  the National Institute of Standards and Technology (NIST).  No\n   further
    action by the IANA is necessary for this document or any\n   anticipated updates.\n"
  title: 9.  IANA Considerations
- contents:
  - "Authors' Addresses\n   Russell Housley\n   Vigil Security, LLC\n   918 Spring
    Knoll Drive\n   Herndon, VA 20170\n   USA\n   EMail: housley@vigilsec.com\n   Burt
    Kaliski\n   RSA Laboratories\n   174 Middlesex Turnpike\n   Bedford, MA 01730\n
    \  USA\n   EMail: bkaliski@rsasecurity.com\n   Jim Schaad\n   Soaring Hawk Consulting\n
    \  PO Box 675\n   Gold Bar, WA 98251\n   USA\n   EMail: jimsch@exmsft.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
