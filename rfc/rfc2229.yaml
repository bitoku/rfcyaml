- title: __initial_text__
  contents:
  - '                      A Dictionary Server Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1997).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Dictionary Server Protocol (DICT) is a TCP transaction based\n\
    \   query/response protocol that allows a client to access dictionary\n   definitions\
    \ from a set of natural language dictionary databases.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   3.7.    The STATUS Command ...................................\
    \   15\n   3.8.    The HELP Command .....................................   15\n\
    \   3.9.    The QUIT Command .....................................   16\n   3.10.\
    \   The OPTION Command ...................................   16\n   3.10.1. OPTION\
    \ MIME ..........................................   16\n   3.11.   The AUTH Command\
    \ .....................................   18\n   3.12.   The SASLAUTH Command\
    \ .................................   18\n   4.      Command Pipelining ...................................\
    \   20\n   5.      URL Specification ....................................   20\n\
    \   6.      Extensions ...........................................   22\n   6.1.\
    \    Experimental Command Syntax ..........................   22\n   6.2.    Experimental\
    \ Commands and Pipelining .................   22\n   7.      Summary of Response\
    \ Codes ............................   23\n   8.      Sample Conversations .................................\
    \   23\n   8.1.    Sample 1 - HELP, DEFINE, and QUIT commands ...........   24\n\
    \   8.2.    Sample 2 - SHOW commands, MATCH command ..............   25\n   8.3.\
    \    Sample 3 - Server downtime ...........................   26\n   8.4.    Sample\
    \ 4 - Authentication ............................   26\n   9.      Security Considerations\
    \ ..............................   26\n   10.     References ...........................................\
    \   27\n   11.     Acknowledgements .....................................   29\n\
    \   12.     Authors' Addresses ...................................   29\n   13.\
    \     Full Copyright Statement .............................   30\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   For many years, the Internet community has relied on the\
    \ \"webster\"\n   protocol for access to natural language definitions.  The webster\n\
    \   protocol supports access to a single dictionary and (optionally) to a\n  \
    \ single thesaurus.  In recent years, the number of publicly available\n   webster\
    \ servers on the Internet has dramatically decreased.\n   Fortunately, several\
    \ freely-distributable dictionaries and lexicons\n   have recently become available\
    \ on the Internet.  However, these\n   freely-distributable databases are not\
    \ accessible via a uniform\n   interface, and are not accessible from a single\
    \ site.  They are often\n   small and incomplete individually, but would collectively\
    \ provide an\n   interesting and useful database of English words.  Examples include\n\
    \   the Jargon file [JARGON], the WordNet database [WORDNET], MICRA's\n   version\
    \ of the 1913 Webster's Revised Unabridged Dictionary\n   [WEB1913], and the Free\
    \ Online Dictionary of Computing [FOLDOC].\n   Translating and non-English dictionaries\
    \ are also becoming available\n   (for example, the FOLDOC dictionary is being\
    \ translated into\n   Spanish).\n   The webster protocol is not suitable for providing\
    \ access to a large\n   number of separate dictionary databases, and extensions\
    \ to the\n   current webster protocol were not felt to be a clean solution to\
    \ the\n   dictionary database problem.\n   The DICT protocol is designed to provide\
    \ access to multiple\n   databases.  Word definitions can be requested, the word\
    \ index can be\n   searched (using an easily extended set of algorithms), information\n\
    \   about the server can be provided (e.g., which index search strategies\n  \
    \ are supported, or which databases are available), and information\n   about\
    \ a database can be provided (e.g., copyright, citation, or\n   distribution information).\
    \  Further, the DICT protocol has hooks that\n   can be used to restrict access\
    \ to some or all of the databases.\n"
- title: 1.1.  Requirements
  contents:
  - "1.1.  Requirements\n   In this document, we adopt the convention discussed in\
    \ Section 1.3.2\n   of [RFC1122] of using the capitalized words MUST, REQUIRED,\
    \ SHOULD,\n   RECOMMENDED, MAY, and OPTIONAL to define the significance of each\n\
    \   particular requirement specified in this document.\n   In brief: \"MUST\"\
    \ (or \"REQUIRED\") means that the item is an absolute\n   requirement of the\
    \ specification; \"SHOULD\" (or \"RECOMMENDED\") means\n   there may exist valid\
    \ reasons for ignoring this item, but the full\n   implications should be understood\
    \ before doing so; and \"MAY\" (or\n   \"OPTIONAL\") means that his item is optional,\
    \ and may be omitted\n   without careful consideration.\n"
- title: 2.  Protocol Overview
  contents:
  - '2.  Protocol Overview

    '
- title: 2.1.  Link Level
  contents:
  - "2.1.  Link Level\n   The DICT protocol assumes a reliable data stream such as\
    \ provided by\n   TCP.  When TCP is used, a DICT server listens on port 2628.\n\
    \   This server is only an interface between programs and the dictionary\n   databases.\
    \  It does not perform any user interaction or\n   presentation-level functions.\n"
- title: 2.2.  Lexical Tokens
  contents:
  - "2.2.  Lexical Tokens\n   Commands and replies are composed of characters from\
    \ the UCS\n   character set [ISO10646] using the UTF-8 [RFC2044] encoding.  More\n\
    \   specifically, using the grammar conventions from [RFC822]:\n             \
    \                                  ; (  Octal, Decimal.)\n   CHAR        =  <any\
    \ UTF-8 character (1 to 6 octets)>\n   CTL         =  <any ASCII control     \
    \      ; (  0- 37,  0.- 31.)\n                   character and DEL>          ;\
    \ (    177,     127.)\n   CR          =  <ASCII CR, carriage return>  ; (    \
    \ 15,      13.)\n   LF          =  <ASCII LF, linefeed>         ; (     12,  \
    \    10.)\n   SPACE       =  <ASCII SP, space>            ; (     40,      32.)\n\
    \   HTAB        =  <ASCII HT, horizontal-tab>   ; (     11,       9.)\n   <\"\
    >         =  <ASCII quote mark>           ; (     42,      34.)\n   <'>      \
    \   =  <ASCII single quote mark>    ; (     47,      39.)\n   CRLF        =  CR\
    \ LF\n   WS          =  1*(SPACE / HTAB)\n   dqstring    =  <\"> *(dqtext/quoted-pair)\
    \ <\">\n   dqtext      =  <any CHAR except <\">, \"\\\", and CTLs>\n   sqstring\
    \    =  <'> *(dqtext/quoted-pair) <'>\n   sqtext      =  <any CHAR except <'>,\
    \ \"\\\", and CTLs>\n   quoted-pair =  \"\\\" CHAR\n   atom        =  1*<any CHAR\
    \ except SPACE, CTLs, <'>, <\">, and \"\\\">\n   string      =  *<dqstring / sqstring\
    \ / quoted-pair>\n   word        =  *<atom / string>\n   description =  *<word\
    \ / WS>\n   text        =  *<word / WS>\n"
- title: 2.3.  Commands
  contents:
  - "2.3.  Commands\n   Commands consist of a command word followed by zero or more\n\
    \   parameters.  Commands with parameters must separate the parameters\n   from\
    \ each other and from the command by one or more space or tab\n   characters.\
    \  Command lines must be complete with all required\n   parameters, and may not\
    \ contain more than one command.\n   Each command line must be terminated by a\
    \ CRLF.\n   The grammar for commands is:\n             command     = cmd-word\
    \ *<WS cmd-param>\n             cmd-word    = atom\n             cmd-param   =\
    \ database / strategy / word\n             database    = atom\n             strategy\
    \    = atom\n   Commands are not case sensitive.\n   Command lines MUST NOT exceed\
    \ 1024 characters in length, counting all\n   characters including spaces, separators,\
    \ punctuation, and the\n   trailing CRLF.  There is no provision for the continuation\
    \ of command\n   lines.  Since UTF-8 may encode a character using up to 6 octets,\
    \ the\n   command line buffer MUST be able to accept up to 6144 octets.\n"
- title: 2.4.  Responses
  contents:
  - "2.4.  Responses\n   Responses are of two kinds, status and textual.\n"
- title: 2.4.1.  Status Responses
  contents:
  - "2.4.1.  Status Responses\n   Status responses indicate the server's response\
    \ to the last command\n   received from the client.\n   Status response lines\
    \ begin with a 3 digit numeric code which is\n   sufficient to distinguish all\
    \ responses.  Some of these may herald\n   the subsequent transmission of text.\n\
    \   The first digit of the response broadly indicates the success,\n   failure,\
    \ or progress of the previous command (based generally on\n   [RFC640,RFC821]):\n\
    \       1yz - Positive Preliminary reply\n       2yz - Positive Completion reply\n\
    \       3yz - Positive Intermediate reply\n       4yz - Transient Negative Completion\
    \ reply\n       5yz - Permanent Negative Completion reply\n   The next digit in\
    \ the code indicates the response category:\n       x0z - Syntax\n       x1z -\
    \ Information (e.g., help)\n       x2z - Connections\n       x3z - Authentication\n\
    \       x4z - Unspecified as yet\n       x5z - DICT System (These replies indicate\
    \ the status of the\n             receiver DICT system vis-a-vis the requested\
    \ transfer\n             or other DICT system action.)\n       x8z - Nonstandard\
    \ (private implementation) extensions\n   The exact response codes that should\
    \ be expected from each command\n   are detailed in the description of that command.\n\
    \   Certain status responses contain parameters such as numbers and\n   strings.\
    \  The number and type of such parameters is fixed for each\n   response code\
    \ to simplify interpretation of the response.  Other\n   status responses do not\
    \ require specific text identifiers.  Parameter\n   requirements are detailed\
    \ in the description of relevant commands.\n   Except for specifically detailed\
    \ parameters, the text following\n   response codes is server-dependent.\n   Parameters\
    \ are separated from the numeric response code and from each\n   other by a single\
    \ space.  All numeric parameters are decimal, and may\n   have leading zeros.\
    \  All string parameters MUST conform to the \"atom\"\n   or \"dqstring\" grammar\
    \ productions.\n   If no parameters are present, and the server implementation\
    \ provides\n   no implementation-specific text, then there MAY or MAY NOT be a\
    \ space\n   after the response code.\n   Response codes not specified in this\
    \ standard may be used for any\n   installation-specific additional commands also\
    \ not specified.\n   These should be chosen to fit the pattern of x8z specified\
    \ above.\n   The use of unspecified response codes for standard commands is\n\
    \   prohibited.\n"
- title: 2.4.2.  General Status Responses
  contents:
  - "2.4.2.  General Status Responses\n   In response to every command, the following\
    \ general status responses\n   are possible:\n             500 Syntax error, command\
    \ not recognized\n             501 Syntax error, illegal parameters\n        \
    \     502 Command not implemented\n             503 Command parameter not implemented\n\
    \             420 Server temporarily unavailable\n             421 Server shutting\
    \ down at operator request\n"
- title: 2.4.3.  Text Responses
  contents:
  - "2.4.3.  Text Responses\n   Before text is sent a numeric status response line,\
    \ using a 1yz code,\n   will be sent indicating text will follow. Text is sent\
    \ as a series of\n   successive lines of textual matter, each terminated with\
    \ a CRLF.  A\n   single line containing only a period (decimal code 46, \".\"\
    ) is sent\n   to indicate the end of the text (i.e., the server will send a CRLF\
    \ at\n   the end of the last line of text, a period, and another CRLF).\n   If\
    \ a line of original text contained a period as the first character\n   of the\
    \ line, that first period is doubled by the DICT server.\n   Therefore, the client\
    \ must examine the first character of each line\n   received.  Those that begin\
    \ with two periods must have those two\n   periods collapsed into one period.\
    \  Those that contain only a single\n   period followed by a CRLF indicate the\
    \ end of the text response.\n   If the OPTION MIME command has been given, all\
    \ textual responses will\n   be prefaced by a MIME header [RFC2045] followed by\
    \ a single blank\n   line (CRLF).  See section 3.10.1 for more details on OPTION\
    \ MIME.\n   Following a text response, a 2yz response code will be sent.\n   Text\
    \ lines MUST NOT exceed 1024 characters in length, counting all\n   characters\
    \ including spaces, separators, punctuation, the extra\n   initial period (if\
    \ needed), and the trailing CRLF.  Since UTF-8 may\n   encode a character using\
    \ up to 6 octets, the text line input buffer\n   MUST be able to accept up to\
    \ 6144 octets.\n   By default, the text of the definitions MUST be composed of\n\
    \   characters from the UCS character set [ISO10644] using the UTF-8\n   [RFC2044]\
    \ encoding.  The UTF-8 encoding has the advantage of\n   preserving the full range\
    \ of 7-bit US ASCII [USASCII] values.\n   Clients and servers MUST support UTF-8,\
    \ even if only in some minimal\n   fashion.\n"
- title: 3.  Command and Response Details
  contents:
  - "3.  Command and Response Details\n   Below, each DICT command and appropriate\
    \ responses are detailed.\n   Each command is shown in upper case for clarity,\
    \ but the DICT server\n   is case-insensitive.\n   Except for the AUTH and SASLAUTH\
    \ commands, every command described in\n   this section MUST be implemented by\
    \ all DICT servers.\n"
- title: 3.1.  Initial Connection
  contents:
  - "3.1.  Initial Connection\n   When a client initially connects to a DICT server,\
    \ a code 220 is sent\n   if the client's IP is allowed to connect:\n         \
    \    220 text capabilities msg-id\n   The code 220 is a banner, usually containing\
    \ host name and DICT\n   server version information.\n   The second-to-last sequence\
    \ of characters in the banner is the\n   optional capabilities string, which will\
    \ allow servers to declare\n   support for extensions to the DICT protocol.  The\
    \ capabilities string\n   is defined below:\n             capabilities =  [\"\
    <\" msg-atom *(\".\" msg-atom) \">\"]\n             msg-atom     =  1*<any CHAR\
    \ except SPACE, CTLs,\n                                \"<\", \">\", \".\", and\
    \ \"\\\">\n   Individual capabilities are described by a single msg-atom.  For\n\
    \   example, the string <html.gzip> might be used to describe a server\n   that\
    \ supports extensions which allow HTML or compressed output.\n   Capability names\
    \ beginning with \"x\" or \"X\" are reserved for\n   experimental extensions,\
    \ and SHOULD NOT be defined in any future DICT\n   protocol specification.  Some\
    \ of these capabilities may inform the\n   client that certain functionality is\
    \ available or can be requested.\n   The following capabilities are currently\
    \ defined:\n       mime        The OPTION MIME command is supported\n       auth\
    \        The AUTH command is supported\n       kerberos_v4 The SASL Kerberos version\
    \ 4 mechanism is supported\n       gssapi      The SASL GSSAPI [RFC2078] mechanism\
    \ is supported\n       skey        The SASL S/Key [RFC1760] mechanism is supported\n\
    \       external    The SASL external mechanism is supported\n   The last sequence\
    \ of characters in the banner is a msg-id, similar to\n   the format specified\
    \ in [RFC822].  The simplified description is\n   given below:\n       msg-id\
    \       =  \"<\" spec \">\"            ; Unique message id\n       spec      \
    \   =  local-part \"@\" domain\n       local-part   =  msg-atom *(\".\" msg-atom)\n\
    \       domain       =  msg-atom *(\".\" msg-atom)\n   Note that, in contrast\
    \ to [RFC822], spaces and quoted pairs are not\n   allowed in the msg-id.  This\
    \ restriction makes the msg-id much easier\n   for the client to locate and parse\
    \ but does not significantly\n   decrease any security benefits, since the msg-id\
    \ may be arbitrarily\n   long (as bounded by the response length limits set forth\
    \ elsewhere in\n   this document).\n   Note also that the open and close brackets\
    \ are part of the msg-id and\n   should be included in the string that is used\
    \ to compute the MD5\n   checksum.\n   This message id will be used by the client\
    \ when formulating the\n   authentication string used in the AUTH command.\n \
    \  If the client's IP is not allowed to connect, then a code 530 is sent\n   instead:\n\
    \             530 Access denied\n   Transient failure responses are also possible:\n\
    \             420 Server temporarily unavailable\n             421 Server shutting\
    \ down at operator request\n   For example, response code 420 should be used if\
    \ the server cannot\n   currently fork a server process (or cannot currently obtain\
    \ other\n   resources required to proceed with a usable connection), but expects\n\
    \   to be able to fork or obtain these resources in the near future.\n   Response\
    \ code 421 should be used when the server has been shut down\n   at operator request,\
    \ or when conditions indicate that the ability to\n   service more requests in\
    \ the near future will be impossible.  This\n   may be used to allow a graceful\
    \ operator-mediated temporary shutdown\n   of a server, or to indicate that a\
    \ well known server has been\n   permanently removed from service (in which case,\
    \ the text message\n   might provide more information).\n"
- title: 3.2.  The DEFINE Command
  contents:
  - "3.2.  The DEFINE Command\n   DEFINE database word\n"
- title: 3.2.1.  Description
  contents:
  - "3.2.1.  Description\n   This command will look up the specified word in the specified\n\
    \   database.  All DICT servers MUST implement this command.\n   If the database\
    \ name is specified with an exclamation point (decimal\n   code 33, \"!\"), then\
    \ all of the databases will be searched until a\n   match is found, and all matches\
    \ in that database will be displayed.\n   If the database name is specified with\
    \ a star (decimal code 42, \"*\"),\n   then all of the matches in all available\
    \ databases will be displayed.\n   In both of these special cases, the databases\
    \ will be searched in the\n   same order as that printed by the \"SHOW DB\" command.\n\
    \   If the word was not found, then status code 552 is sent.\n   If the word was\
    \ found, then status code 150 is sent, indicating that\n   one or more definitions\
    \ follow.\n   For each definition, status code 151 is sent, followed by the textual\n\
    \   body of the definition.  The first three space-delimited parameters\n   following\
    \ status code 151 give the word retrieved, the name of the\n   database (which\
    \ is the same as the first column of the SHOW DB\n   command), and a short description\
    \ for the database (which is the same\n   as the second column of the SHOW DB\
    \ command).  The short name is\n   suitable for printing as:\n             From\
    \ name:\n   before the definition is printed.  This provides source information\n\
    \   for the user.\n   The textual body of each definition is terminated with a\
    \ CRLF period\n   CRLF sequence.\n   After all of the definitions have been sent,\
    \ status code 250 is sent.\n   This command can provide optional timing information\
    \ (which is server\n   dependent and is not intended to be parsable by the client).\
    \  This\n   additional information is useful when debugging and tuning the\n \
    \  server.\n"
- title: 3.2.2.  Responses
  contents:
  - "3.2.2.  Responses\n       550 Invalid database, use \"SHOW DB\" for list of databases\n\
    \       552 No match\n       150 n definitions retrieved - definitions follow\n\
    \       151 word database name - text follows\n       250 ok (optional timing\
    \ information here)\n   Response codes 150 and 151 require special parameters\
    \ as part of\n   their text.  The client can use these parameters to display\n\
    \   information on the user's terminal.\n   For code 150, parameters 1 indicates\
    \ the number of definitions\n   retrieved.\n   For code 151, parameter 1 is the\
    \ word retrieved, parameter 2 is the\n   database name (the first name as shown\
    \ by \"SHOW DB\") from which the\n   definition has been retrieved, and parameter\
    \ 3 is the the short\n   database description (the second column of the \"SHOW\
    \ DB\" command).\n"
- title: 3.3.  The MATCH Command
  contents:
  - "3.3.  The MATCH Command\n   MATCH database strategy word\n"
- title: 3.3.1.  Description
  contents:
  - "3.3.1.  Description\n   This command searches an index for the dictionary, and\
    \ reports words\n   which were found using a particular strategy.  Not all strategies\
    \ are\n   useful for all dictionaries, and some dictionaries may support\n   additional\
    \ search strategies (e.g., reverse lookup).  All DICT\n   servers MUST implement\
    \ the MATCH command, and MUST support the\n   \"exact\" and \"prefix\" strategies.\
    \  These are easy to implement and are\n   generally the most useful.  Other strategies\
    \ are server dependent.\n   The \"exact\" strategy matches a word exactly, although\
    \ different\n   servers may treat non-alphanumeric data differently.  We have\
    \ found\n   that a case-insensitive comparison which ignores non-alphanumeric\n\
    \   characters and which folds whitespace is useful for English-language\n   dictionaries.\
    \  Other comparisons may be more appropriate for other\n   languages or when using\
    \ extended character sets.\n   The \"prefix\" strategy is similar to \"exact\"\
    , except that it only\n   compares the first part of the word.\n   Different servers\
    \ may implement these algorithms differently.  The\n   requirement is that strategies\
    \ with the names \"exact\" and \"prefix\"\n   exist so that a simple client can\
    \ use them.\n   Other strategies that might be considered by a server implementor\
    \ are\n   matches based on substring, suffix, regular expressions, soundex\n \
    \  [KNUTH73], and Levenshtein [PZ85] algorithms.  These last two are\n   especially\
    \ useful for correcting spelling errors.  Other useful\n   strategies perform\
    \ some sort of \"reverse\" lookup (i.e., by searching\n   definitions to find\
    \ the word that the query suggests).\n   If the database name is specified with\
    \ an exclamation point (decimal\n   code 33, \"!\"), then all of the databases\
    \ will be searched until a\n   match is found, and all matches in that database\
    \ will be displayed.\n   If the database name is specified with a star (decimal\
    \ code 42, \"*\"),\n   then all of the matches in all available databases will\
    \ be displayed.\n   In both of these special cases, the databases will be searched\
    \ in the\n   same order as that printed by the \"SHOW DB\" command.\n   If the\
    \ strategy is specified using a period (decimal code 46, \".\"),\n   then the\
    \ word will be matched using a server-dependent default\n   strategy, which should\
    \ be the best strategy available for interactive\n   spell checking.  This is\
    \ usually a derivative of the Levenshtein\n   algorithm [PZ85].\n   If no matches\
    \ are found in any of the searched databases, then status\n   code 552 will be\
    \ returned.\n   Otherwise, status code 152 will be returned followed by a list\
    \ of\n   matched words, one per line, in the form:\n             database word\n\
    \   This makes the responses directly useful in a DEFINE command.\n   The textual\
    \ body of the match list is terminated with a CRLF period\n   CRLF sequence.\n\
    \   Following the list, status code 250 is sent, which may include\n   server-specific\
    \ timing and statistical information, as discussed in\n   the section on the DEFINE\
    \ command.\n"
- title: 3.3.2.  Responses
  contents:
  - "3.3.2.  Responses\n        550 Invalid database, use \"SHOW DB\" for list of\
    \ databases\n        551 Invalid strategy, use \"SHOW STRAT\" for a list of strategies\n\
    \        552 No match\n        152 n matches found - text follows\n        250\
    \ ok (optional timing information here)\n   Response code 152 requires a special\
    \ parameter as part of its text.\n   Parameter 1 must be the number of matches\
    \ retrieved.\n"
- title: 3.4.  A Note on Virtual Databases
  contents:
  - "3.4.  A Note on Virtual Databases\n   The ability to search all of the provided\
    \ databases using a single\n   command is given using the special \"*\" and \"\
    !\" databases.\n   However, sometimes, a client may want to search over some but\
    \ not all\n   of the databases that a particular server provides.  One alternative\n\
    \   is for the client to use the SHOW DB command to obtain a list of\n   databases\
    \ and descriptions, and then (perhaps with the help of a\n   human), select a\
    \ subset of these databases for an interactive search.\n   Once this selection\
    \ has been done once, the results can be saved, for\n   example, in a client configuration\
    \ file.\n   Another alternative is for the server to provide \"virtual\" databases\n\
    \   which merge several of the regular databases into one.  For example,\n   a\
    \ virtual database may be provided which includes all of the\n   translating dictionaries,\
    \ but which does not include regular\n   dictionaries or thesauri.  The special\
    \ \"*\" and \"!\" databases can be\n   considered as names of virtual databases\
    \ which provide access to all\n   of the databases.  If a server implements virtual\
    \ databases, then the\n   special \"*\" and \"!\" databases should probably exclude\
    \ other virtual\n   databases (since they merely provide information duplicated\
    \ in other\n   databases).  If virtual databases are supported, they should be\n\
    \   listed as a regular database with the SHOW DB command (although,\n   since\
    \ \"*\" and \"!\" are required, they need not be listed).\n   Virtual databases\
    \ are an implementation-specific detail which has\n   absolutely no impact on\
    \ the DICT protocol.  The DICT protocol views\n   virtual and non-virtual databases\
    \ the same way.\n   We mention virtual databases here, however, because they solve\
    \ a\n   problem of database selection which could also have been solved by\n \
    \  changes in the protocol.  For example, each dictionary could be\n   assigned\
    \ attributes, and the protocol could be extended to specify\n   searches over\
    \ databases with certain attributes.  However, this\n   needlessly complicates\
    \ the parsing and analysis that must be\n   performed by the implementation. \
    \ Further, unless the classification\n   system is extremely general, there is\
    \ a risk that it would restrict\n   the types of databases that can be used with\
    \ the DICT protocol\n   (although the protocol has been designed with human-language\n\
    \   databases in mind, it is applicable to any read-only database\n   application,\
    \ especially those with a single semi-unique alphanumeric\n   key and textual\
    \ data).\n"
- title: 3.5.  The SHOW Command
  contents:
  - '3.5.  The SHOW Command

    '
- title: 3.5.1.  SHOW DB
  contents:
  - "3.5.1.  SHOW DB\n   SHOW DB\n   SHOW DATABASES\n"
- title: 3.5.1.1.  Description
  contents:
  - "3.5.1.1.  Description\n   Displays the list of currently accessible databases,\
    \ one per line, in\n   the form:\n             database description\n   The textual\
    \ body of the database list is terminated with a CRLF\n   period CRLF sequence.\
    \  All DICT servers MUST implement this command.\n   Note that some databases\
    \ may be restricted due to client domain or\n   lack of user authentication (see\
    \ the AUTH and SASLAUTH commands in\n   sections 3.11 and 3.12).  Information\
    \ about these databases is not\n   available until authentication is performed.\
    \  Until that time, the\n   client will interact with the server as if the additional\
    \ databases\n   did not exist.\n"
- title: 3.5.1.2.  Responses
  contents:
  - "3.5.1.2.  Responses\n             110 n databases present - text follows\n  \
    \           554 No databases present\n        Response code 110 requires a special\
    \ parameter.  Parameter 1\n        must be the number of databases available to\
    \ the user.\n"
- title: 3.5.2.  SHOW STRAT
  contents:
  - "3.5.2.  SHOW STRAT\n   SHOW STRAT\n   SHOW STRATEGIES\n"
- title: 3.5.2.1.  Description
  contents:
  - "3.5.2.1.  Description\n   Displays the list of currently supported search strategies,\
    \ one per\n   line, in the form:\n             strategy description\n   The textual\
    \ body of the strategy list is terminated with a CRLF\n   period CRLF sequence.\
    \  All DICT servers MUST implement this command.\n"
- title: 3.5.2.2.  Responses
  contents:
  - "3.5.2.2.  Responses\n             111 n strategies available - text follows\n\
    \             555 No strategies available\n   Response code 111 requires a special\
    \ parameter.  Parameter 1 must be\n   the number of strategies available.\n"
- title: 3.5.3.  SHOW INFO
  contents:
  - "3.5.3.  SHOW INFO\n   SHOW INFO database\n"
- title: 3.5.3.1.  Description
  contents:
  - "3.5.3.1.  Description\n   Displays the source, copyright, and licensing information\
    \ about the\n   specified database.  The information is free-form text and is\n\
    \   suitable for display to the user in the same manner as a definition.\n   The\
    \ textual body of the information is terminated with a CRLF period\n   CRLF sequence.\
    \  All DICT servers MUST implement this command.\n"
- title: 3.5.3.2.  Responses
  contents:
  - "3.5.3.2.  Responses\n             550 Invalid database, use \"SHOW DB\" for list\
    \ of databases\n             112 database information follows\n   These response\
    \ codes require no special parameters.\n"
- title: 3.5.4.  SHOW SERVER
  contents:
  - "3.5.4.  SHOW SERVER\n   SHOW SERVER\n"
- title: 3.5.4.1.  Description
  contents:
  - "3.5.4.1.  Description\n   Displays local server information written by the local\
    \ administrator.\n   This could include information about local databases or strategies,\n\
    \   or administrative information such as who to contact for access to\n   databases\
    \ requiring authentication.  All DICT servers MUST implement\n   this command.\n"
- title: 3.5.4.2.  Responses
  contents:
  - "3.5.4.2.  Responses\n             114 server information follows\n   This response\
    \ code requires no special parameters.\n"
- title: 3.6.  The CLIENT Command
  contents:
  - "3.6.  The CLIENT Command\n   CLIENT text\n"
- title: 3.6.1.  Description
  contents:
  - "3.6.1.  Description\n   This command allows the client to provide information\
    \ about itself\n   for possible logging and statistical purposes.  All clients\
    \ SHOULD\n   send this command after connecting to the server.  All DICT servers\n\
    \   MUST implement this command (note, though, that the server doesn't\n   have\
    \ to do anything with the information provided by the client).\n"
- title: 3.6.2.  Responses
  contents:
  - "3.6.2.  Responses\n             250 ok (optional timing information here)\n \
    \  This response code requires no special parameters.\n"
- title: 3.7.  The STATUS Command
  contents:
  - "3.7.  The STATUS Command\n   STATUS\n"
- title: 3.7.1.  Description
  contents:
  - "3.7.1.  Description\n   Display some server-specific timing or debugging information.\
    \  This\n   information may be useful in debugging or tuning a DICT server.  All\n\
    \   DICT servers MUST implement this command (note, though, that the text\n  \
    \ part of the response is not specified and may be omitted).\n"
- title: 3.7.2.  Responses
  contents:
  - "3.7.2.  Responses\n             210 (optional timing and statistical information\
    \ here)\n   This response code requires no special parameters.\n"
- title: 3.8.  The HELP Command
  contents:
  - "3.8.  The HELP Command\n   HELP\n"
- title: 3.8.1.  Description
  contents:
  - "3.8.1.  Description\n   Provides a short summary of commands that are understood\
    \ by this\n   implementation of the DICT server.  The help text will be presented\n\
    \   as a textual response, terminated by a single period on a line by\n   itself.\
    \  All DICT servers MUST implement this command.\n"
- title: 3.8.2.  Responses
  contents:
  - "3.8.2.  Responses\n             113 help text follows\n   This response code\
    \ requires no special parameters.\n"
- title: 3.9.  The QUIT Command
  contents:
  - "3.9.  The QUIT Command\n   QUIT\n"
- title: 3.9.1.  Description
  contents:
  - "3.9.1.  Description\n   This command is used by the client to cleanly exit the\
    \ server.  All\n   DICT servers MUST implement this command.\n"
- title: 3.9.2.  Responses
  contents:
  - "3.9.2.  Responses\n             221 Closing Connection\n   This response code\
    \ requires no special parameters.\n"
- title: 3.10.  The OPTION Command
  contents:
  - '3.10.  The OPTION Command

    '
- title: 3.10.1.  OPTION MIME
  contents:
  - "3.10.1.  OPTION MIME\n   OPTION MIME\n"
- title: 3.10.1.1.  Description
  contents:
  - "3.10.1.1.  Description\n   Requests that all text responses be prefaced by a\
    \ MIME header\n   [RFC2045] followed by a single blank line (CRLF).\n   If a client\
    \ requests this option, then the client MUST be able to\n   parse Content-Type\
    \ and Content-transfer-encoding headers, and MUST be\n   able to ignore textual\
    \ responses which have an unsupported content or\n   encoding.  A client MUST\
    \ support the UTF-8 encoding [RFC2044], which\n   minimally means that the client\
    \ MUST recognize UTF-8 multi-octet\n   encodings and convert these into some symbol\
    \ that can be printed by\n   the client.\n   If a client requests this option,\
    \ then the server will provide a MIME\n   header.  If the header is empty, the\
    \ text response will start with a\n   single blank line (CRLF), in which case\
    \ a client MUST interpret this\n   as a default header.  The default header for\
    \ SASL authentication is:\n             Content-type: application/octet-stream\n\
    \             Content-transfer-encoding: base64\n   The default header for all\
    \ other textual responses is:\n             Content-type: text/plain; charset=utf-8\n\
    \             Content-transfer-encoding: 8bit\n   If OPTION MIME is not specified\
    \ by the client, then the server may\n   restrict the information content provided\
    \ to the client.  For\n   example, a definition may be accompanied by an image\
    \ and an audio\n   clip, but the server cannot transmit this information unless\
    \ the\n   client is able to parse MIME format headers.\n   Note that, because\
    \ of the line length restrictions and end-of-\n   response semantics, the \"binary\"\
    \ content-transfer-encoding MUST NOT\n   be used.  In the future, extensions to\
    \ the protocol may be provided\n   which allow a client to request binary encodings,\
    \ but the default\n   SHOULD always be that the client can look for a \"CRLF .\
    \ CRLF\"\n   sequence to locate the end of the current text response.  This allows\n\
    \   clients to easily skip over text responses which have unsupported\n   types\
    \ or encodings.\n   In the future, after significant experience with large databases\
    \ in\n   various languages has been gained, and after evaluating the need for\n\
    \   specifying character sets and other encodings (e.g., compressed or\n   BASE64\
    \ encoding), standard extensions to this protocol should be\n   proposed which\
    \ allow the client to request certain content types or\n   encodings.  Care should\
    \ be taken that these extensions do not require\n   a handshake which defeats\
    \ pipelining.  In the mean time, private\n   extensions should be used to explore\
    \ the parameter space to determine\n   how best to implement these extensions.\n\
    \   OPTION MIME is a REQUIRED server capability, all DICT servers MUST\n   implement\
    \ this command.\n"
- title: 3.10.1.2.  Responses
  contents:
  - "3.10.1.2.  Responses\n             250 ok (optional timing information here)\n\
    \   Note that some older server implementations, completed before this\n   document\
    \ was finalized, will return a status code 500 if this command\n   is not implemented.\
    \  Clients SHOULD be able to accept this behavior,\n   making default assumptions.\
    \  Clients may also examine the\n   capabilities string in the status code 220\
    \ header to determine if a\n   server supports this capability.\n"
- title: 3.11.  The AUTH Command
  contents:
  - "3.11.  The AUTH Command\n   AUTH username authentication-string\n"
- title: 3.11.1.  Description
  contents:
  - "3.11.1.  Description\n   The client can authenticate itself to the server using\
    \ a username and\n   password.  The authentication-string will be computed as\
    \ in the APOP\n   protocol discussed in [RFC1939].  Briefly, the authentication-string\n\
    \   is the MD5 checksum of the concatenation of the msg-id (obtained from\n  \
    \ the initial banner) and the \"shared secret\" that is stored in the\n   server\
    \ and client configuration files.  Since the user does not have\n   to type this\
    \ shared secret when accessing the server, the shared\n   secret can be an arbitrarily\
    \ long passphrase.  Because of the\n   computational ease of computing the MD5\
    \ checksum, the shared secret\n   should be significantly longer than a usual\
    \ password.\n   Authentication may make more dictionary databases available for\
    \ the\n   current session.  For example, there may be some publicly\n   distributable\
    \ databases available to all users, and other private\n   databases available\
    \ only to authenticated users.  Or, a server may\n   require authentication from\
    \ all users to minimize resource\n   utilization on the server machine.\n   Authentication\
    \ is an optional server capability.  The AUTH command\n   MAY be implemented by\
    \ a DICT server.\n"
- title: 3.11.2.  Responses
  contents:
  - "3.11.2.  Responses\n             230 Authentication successful\n            \
    \ 531 Access denied, use \"SHOW INFO\" for server information\n   These response\
    \ codes require no special parameters.\n"
- title: 3.12.  The SASLAUTH Command
  contents:
  - "3.12.  The SASLAUTH Command\n   SASLAUTH mechanism initial-response\n   SASLRESP\
    \ response\n"
- title: 3.12.1.  Description
  contents:
  - "3.12.1.  Description\n   The Simple Authentication and Security Layer (SASL)\
    \ is currently\n   being developed [RFC2222].  The DICT protocol reserves the\
    \ SASLAUTH\n   and SASLRESP commands for this method of authentication.  The results\n\
    \   of successful authentication with SALSAUTH will be the same as the\n   results\
    \ of successful AUTH authentication: more dictionary databases\n   may become\
    \ available for the current session.\n   The initial-response is an optional parameter\
    \ for the SASLAUTH\n   command, encoded using BASE64 encoding [RFC2045].  Some\
    \ SASL\n   mechanisms may allow the use of this parameter.  If SASL\n   authentication\
    \ is supported by a DICT server, then this parameter\n   MUST also be supported.\n\
    \   A typical SASL authentication will be initiated by the client using\n   the\
    \ SASLAUTH command.  The server will reply with status code 130,\n   followed\
    \ by a challenge.  The challenge will be followed by status\n   code 330, indicating\
    \ that the client must now send a response to the\n   server.\n   Depending on\
    \ the details of the SASL mechanism currently in use, the\n   server will either\
    \ continue the exchange using status code 130, a\n   challenge, and status code\
    \ 330; or the server will use status code\n   230 or 531 to indicate authentication\
    \ was successful or has failed.\n   The challenges sent by the server are defined\
    \ by the mechanisms as\n   binary tokens of arbitrary length, and should be sent\
    \ using a\n   standard DICT textual response, as described in section 2.4.3. \
    \ If\n   OPTION MIME is not set, then BASE64 encoding MUST be used.  If\n   OPTION\
    \ MIME is set, then BASE64 is the default encoding, as specified\n   in section\
    \ 3.10.1.\n   The client will send all responses using the SASLRESP command and\
    \ a\n   BASE64-encoded parameter.  The responses sent by the client are\n   defined\
    \ by the mechanisms as binary tokens of arbitrary length.\n   Remember that DICT\
    \ command lines may only be 1024 characters in\n   length, so the response provided\
    \ by a DICT client is limited.\n   If the mechanism specified in the SASLAUTH\
    \ command is not supported,\n   then status code 532 will be returned.\n   Authentication\
    \ is an optional server capability.  The SASLAUTH\n   command MAY be implemented\
    \ by a DICT server.\n"
- title: 3.12.2.  Responses
  contents:
  - "3.12.2.  Responses\n             130 challenge follows\n             330 send\
    \ response\n             230 Authentication successful\n             531 Access\
    \ denied, use \"SHOW INFO\" for server information\n             532 Access denied,\
    \ unknown mechanism\n        These response codes require no special parameters.\n"
- title: 4.  Command Pipelining
  contents:
  - "4.  Command Pipelining\n   All DICT servers MUST be able to accept multiple commands\
    \ in a single\n   TCP send operation.  Using a single TCP send operation for multiple\n\
    \   commands can improved DICT performance significantly, especially in\n   the\
    \ face of high latency network links.\n   The possible implementation problems\
    \ for a DICT server which would\n   prevent command pipelining are similar to\
    \ the problems that prevent\n   pipelining in an SMTP server.  These problems\
    \ are discussed in detail\n   in [RFC1854], which should be consulted by all DICT\
    \ server\n   implementors.\n   The main implication is that a DICT server implementation\
    \ MUST NOT\n   flush or otherwise lose the contents of the TCP input buffer under\n\
    \   any circumstances whatsoever.\n   A DICT client may pipeline several commands\
    \ and must check the\n   responses to each command individually.  If the server\
    \ has shut down,\n   it is possible that all of the commands will not be processed.\
    \  For\n   example, a simple DICT client may pipeline a CLIENT, DEFINE, and QUIT\n\
    \   command sequence as it is connecting to the server.  If the server is\n  \
    \ shut down, the initial response code sent by the server may be 420\n   (temporarily\
    \ unavailable) instead of 220 (banner).  In this case, the\n   definition cannot\
    \ be retrieved, and the client should report and\n   error or retry the command.\
    \  If the server is working, it may be able\n   to send back the banner, definition,\
    \ and termination message in a\n   single TCP send operation.\n"
- title: 5.  URL Specification
  contents:
  - "5.  URL Specification\n   The DICT URL scheme is used to refer to definitions\
    \ or word lists\n   available using the DICT protocol:\n   dict://<user>;<auth>@<host>:<port>/d:<word>:<database>:<n>\n\
    \   dict://<user>;<auth>@<host>:<port>/m:<word>:<database>:<strat>:<n>\n   The\
    \ \"/d\" syntax specifies the DEFINE command (section 3.2), whereas\n   the \"\
    /m\" specifies the MATCH command (section 3.3).\n   Some or all of \"<user>;<auth>@\"\
    , \":<port>\", \"<database>\", \"<strat>\",\n   and \"<n>\" may be omitted.\n\
    \   \"<n>\" will usually be omitted, but when included, it specifies the\n   nth\
    \ definition or match of a word.  A method for extracting exactly\n   this information\
    \ from the server is not available using the DICT\n   protocol.  However, a client\
    \ using the URL specification could obtain\n   all of the definitions or matches,\
    \ and then select the one that is\n   specified.\n   If \"<user>;<auth>@\" is\
    \ omitted, no authentication is done.  If\n   \":<port>\" is omitted, the default\
    \ port (2628) SHOULD be used.  If\n   \"<database>\" is omitted, \"!\" SHOULD\
    \ be used (see section 3.2).  If\n   \"<strat>\" is omitted, \".\" SHOULD be used\
    \ (see section 3.3).\n   \"<user>;<auth>@\" specifies the username and the type\
    \ of\n   authentication performed.  For \"<auth>\", the string \"AUTH\" indicates\n\
    \   that APOP authentication using the AUTH command will be performed,\n   whereas\
    \ the string \"SASLAUTH=<auth_type>\" indicates that the SASLAUTH\n   and SASLRESP\
    \ commands will be used, with \"<auth_type>\" indicating the\n   type of SASL\
    \ authentication which will be used.  If \"<auth_type>\" is\n   a star (decimal\
    \ code 42, \"*\"), then the client will select some type\n   of authentication.\n\
    \   Whenever authentication is required, the client SHOULD request\n   additional\
    \ information (e.g., a passphrase) from the user.  In\n   contrast to [RFC1738],\
    \ clear text passwords are not permitted in the\n   URL.\n   Trailing colons may\
    \ be omitted.  For example, the following URLs\n   might specify definitions or\
    \ matches:\n             dict://dict.org/d:shortcake:\n             dict://dict.org/d:shortcake:*\n\
    \             dict://dict.org/d:shortcake:wordnet:\n             dict://dict.org/d:shortcake:wordnet:1\n\
    \             dict://dict.org/d:abcdefgh\n             dict://dict.org/d:sun\n\
    \             dict://dict.org/d:sun::1\n             dict://dict.org/m:sun\n \
    \            dict://dict.org/m:sun::soundex\n             dict://dict.org/m:sun:wordnet::1\n\
    \             dict://dict.org/m:sun::soundex:1\n             dict://dict.org/m:sun:::\n"
- title: 6.  Extensions
  contents:
  - "6.  Extensions\n   This protocol was designed so that flat text databases can\
    \ be used\n   with a server after a minimum of analysis and formatting.  Our\n\
    \   experience is that merely constructing an index for a database may be\n  \
    \ sufficient to make it useful with a DICT server.  The ability to\n   serve preformatted\
    \ text is especially important since freely-\n   available databases are often\
    \ distributed as flat text files without\n   any semantic mark-up information\
    \ (and often contain \"ASCII art\" which\n   precludes the automation of even\
    \ simple formatting).\n   However, given a database with sufficient mark-up information,\
    \ it may\n   be possible to generate output in a variety of different formats\n\
    \   (e.g., simple HTML or more sophisticated SGML).  The specification of\n  \
    \ formatting is beyond the scope of this document.  The requirements\n   for negotiation\
    \ of format (including character set and other\n   encodings) is complex and should\
    \ be examined over time as more\n   experience is gained.  We suggest that the\
    \ use of different formats,\n   as well as other server features, be explored\
    \ as extensions to the\n   protocol.\n"
- title: 6.1.  Experimental Command Syntax
  contents:
  - "6.1.  Experimental Command Syntax\n   Single-letter commands are reserved for\
    \ debugging and testing, SHOULD\n   NOT be defined in any future DICT protocol\
    \ specification, and MUST\n   NOT be used by any client software.\n   Commands\
    \ beginning with the letter \"X\" are reserved for experimental\n   extensions,\
    \ and SHOULD NOT be defined in any future DICT protocol\n   specification.  Authors\
    \ of client software should understand that\n   these commands are not part of\
    \ the DICT protocol and may not be\n   available on all DICT servers.\n"
- title: 6.2.  Experimental Commands and Pipelining
  contents:
  - "6.2.  Experimental Commands and Pipelining\n   Experimental commands should be\
    \ designed so that a client can\n   pipeline the experimental commands without\
    \ knowing if a server\n   supports the commands (e.g., instead of using feature\
    \ negotiation).\n   If the server does not support the commands, then a response\
    \ code in\n   the 5yz series (usually 500) will be given, notifying the client\
    \ that\n   the extension is not supported.  Of course, depending on the\n   complexity\
    \ of the extensions added, feature negotiation may be\n   necessary.  To help\
    \ minimize negotiation time, server-supported\n   features may be announced in\
    \ the banner (code 220) using the optional\n   capabilities parameter.\n"
- title: 7.  Summary of Response Codes
  contents:
  - "7.  Summary of Response Codes\n   Below is a summary of response codes.  A star\
    \ (*) in the first column\n   indicates the response has defined arguments that\
    \ must be provided.\n      * 110 n databases present - text follows\n      * 111\
    \ n strategies available - text follows\n        112 database information follows\n\
    \        113 help text follows\n        114 server information follows\n     \
    \   130 challenge follows\n      * 150 n definitions retrieved - definitions follow\n\
    \      * 151 word database name - text follows\n      * 152 n matches found -\
    \ text follows\n        210 (optional timing and statistical information here)\n\
    \      * 220 text msg-id\n        221 Closing Connection\n        230 Authentication\
    \ successful\n        250 ok (optional timing information here)\n        330 send\
    \ response\n        420 Server temporarily unavailable\n        421 Server shutting\
    \ down at operator request\n        500 Syntax error, command not recognized\n\
    \        501 Syntax error, illegal parameters\n        502 Command not implemented\n\
    \        503 Command parameter not implemented\n        530 Access denied\n  \
    \      531 Access denied, use \"SHOW INFO\" for server information\n        532\
    \ Access denied, unknown mechanism\n        550 Invalid database, use \"SHOW DB\"\
    \ for list of databases\n        551 Invalid strategy, use \"SHOW STRAT\" for\
    \ a list of strategies\n        552 No match\n        554 No databases present\n\
    \        555 No strategies available\n"
- title: 8.  Sample Conversations
  contents:
  - "8.  Sample Conversations\n   Theses are samples of the conversations that might\
    \ be expected with\n   a typical DICT server.  The notation \"C:\" indicates commands\
    \ set by\n   the client, and \"S:\" indicates responses sent by the server.  Blank\n\
    \   lines are included for clarity and do not indicate actual newlines\n   in\
    \ the transaction.\n"
- title: 8.1.  Sample 1 - HELP, DEFINE, and QUIT commands
  contents:
  - '8.1.  Sample 1 - HELP, DEFINE, and QUIT commands

    '
- title: 'C: [ client initiates connection ]'
  contents:
  - 'C: [ client initiates connection ]

    '
- title: 'S: 220 dict.org dictd (version 0.9) <27831.860032493@dict.org>'
  contents:
  - 'S: 220 dict.org dictd (version 0.9) <27831.860032493@dict.org>

    '
- title: 'C: HELP'
  contents:
  - 'C: HELP

    '
- title: 'S: 113 Help text follows'
  contents:
  - 'S: 113 Help text follows

    '
- title: 'S: DEFINE database word            look up word in database'
  contents:
  - 'S: DEFINE database word            look up word in database

    '
- title: 'S: MATCH database strategy word    match word in database using strategy'
  contents:
  - 'S: MATCH database strategy word    match word in database using strategy

    '
- title: 'S: [ more server-dependent help text ]'
  contents:
  - 'S: [ more server-dependent help text ]

    '
- title: 'S: .'
  contents:
  - 'S: .

    '
- title: 'S: 250 Command complete'
  contents:
  - 'S: 250 Command complete

    '
- title: 'C: DEFINE ! penguin'
  contents:
  - 'C: DEFINE ! penguin

    '
- title: 'S: 150 1 definitions found: list follows'
  contents:
  - 'S: 150 1 definitions found: list follows

    '
- title: 'S: 151 "penguin" wn "WordNet 1.5" : definition text follows'
  contents:
  - 'S: 151 "penguin" wn "WordNet 1.5" : definition text follows

    '
- title: 'S: penguin'
  contents:
  - 'S: penguin

    '
- title: 'S:   1. n: short-legged flightless birds of cold southern esp. Antarctic'
  contents:
  - 'S:   1. n: short-legged flightless birds of cold southern esp. Antarctic

    '
- title: 'S:      regions having webbed feet and wings modified as flippers'
  contents:
  - 'S:      regions having webbed feet and wings modified as flippers

    '
- title: 'S: .'
  contents:
  - 'S: .

    '
- title: 'S: 250 Command complete'
  contents:
  - 'S: 250 Command complete

    '
- title: 'C: DEFINE * shortcake'
  contents:
  - 'C: DEFINE * shortcake

    '
- title: 'S: 150 2 definitions found: list follows'
  contents:
  - 'S: 150 2 definitions found: list follows

    '
- title: 'S: 151 "shortcake" wn "WordNet 1.5" : text follows'
  contents:
  - 'S: 151 "shortcake" wn "WordNet 1.5" : text follows

    '
- title: 'S: shortcake'
  contents:
  - 'S: shortcake

    '
- title: 'S:   1. n: very short biscuit spread with sweetened fruit and usu.'
  contents:
  - 'S:   1. n: very short biscuit spread with sweetened fruit and usu.

    '
- title: 'S:      whipped cream'
  contents:
  - 'S:      whipped cream

    '
- title: 'S: .'
  contents:
  - 'S: .

    '
- title: 'S: 151 "Shortcake" web1913 "Webster''s Dictionary (1913)" : text follows'
  contents:
  - 'S: 151 "Shortcake" web1913 "Webster''s Dictionary (1913)" : text follows

    '
- title: 'S: Shortcake'
  contents:
  - 'S: Shortcake

    '
- title: 'S:    \Short"cake`\, n.'
  contents:
  - 'S:    \Short"cake`\, n.

    '
- title: 'S:    An unsweetened breakfast cake shortened with butter or lard,'
  contents:
  - 'S:    An unsweetened breakfast cake shortened with butter or lard,

    '
- title: 'S:    rolled thin, and baked.'
  contents:
  - 'S:    rolled thin, and baked.

    '
- title: 'S: .'
  contents:
  - 'S: .

    '
- title: 'S: 250 Command complete'
  contents:
  - 'S: 250 Command complete

    '
- title: 'C: DEFINE abcdefgh'
  contents:
  - 'C: DEFINE abcdefgh

    '
- title: 'S: 552 No match'
  contents:
  - 'S: 552 No match

    '
- title: 'C: quit'
  contents:
  - 'C: quit

    '
- title: 'S: 221 Closing connection'
  contents:
  - 'S: 221 Closing connection

    '
- title: 8.2.  Sample 2 - SHOW commands, MATCH command
  contents:
  - '8.2.  Sample 2 - SHOW commands, MATCH command

    '
- title: 'C: SHOW DB'
  contents:
  - 'C: SHOW DB

    '
- title: 'S: 110 3 databases present: list follows'
  contents:
  - 'S: 110 3 databases present: list follows

    '
- title: 'S: wn "WordNet 1.5"'
  contents:
  - 'S: wn "WordNet 1.5"

    '
- title: 'S: foldoc "Free On-Line Dictionary of Computing"'
  contents:
  - 'S: foldoc "Free On-Line Dictionary of Computing"

    '
- title: 'S: jargon "Hacker Jargon File"'
  contents:
  - 'S: jargon "Hacker Jargon File"

    '
- title: 'S: .'
  contents:
  - 'S: .

    '
- title: 'S: 250 Command complete'
  contents:
  - 'S: 250 Command complete

    '
- title: 'C: SHOW STRAT'
  contents:
  - 'C: SHOW STRAT

    '
- title: 'S: 111 5 strategies present: list follows'
  contents:
  - 'S: 111 5 strategies present: list follows

    '
- title: 'S: exact "Match words exactly"'
  contents:
  - 'S: exact "Match words exactly"

    '
- title: 'S: prefix "Match word prefixes"'
  contents:
  - 'S: prefix "Match word prefixes"

    '
- title: 'S: substring "Match substrings anywhere in word"'
  contents:
  - 'S: substring "Match substrings anywhere in word"

    '
- title: 'S: regex "Match using regular expressions"'
  contents:
  - 'S: regex "Match using regular expressions"

    '
- title: 'S: reverse "Match words given definition keywords"'
  contents:
  - 'S: reverse "Match words given definition keywords"

    '
- title: 'S: .'
  contents:
  - 'S: .

    '
- title: 'S: 250 Command complete'
  contents:
  - 'S: 250 Command complete

    '
- title: 'C: MATCH foldoc regex "s.si"'
  contents:
  - 'C: MATCH foldoc regex "s.si"

    '
- title: 'S: 152 7 matches found: list follows'
  contents:
  - 'S: 152 7 matches found: list follows

    '
- title: 'S: foldoc Fast SCSI'
  contents:
  - 'S: foldoc Fast SCSI

    '
- title: 'S: foldoc SCSI'
  contents:
  - 'S: foldoc SCSI

    '
- title: 'S: foldoc SCSI-1'
  contents:
  - 'S: foldoc SCSI-1

    '
- title: 'S: foldoc SCSI-2'
  contents:
  - 'S: foldoc SCSI-2

    '
- title: 'S: foldoc SCSI-3'
  contents:
  - 'S: foldoc SCSI-3

    '
- title: 'S: foldoc Ultra-SCSI'
  contents:
  - 'S: foldoc Ultra-SCSI

    '
- title: 'S: foldoc Wide SCSI'
  contents:
  - 'S: foldoc Wide SCSI

    '
- title: 'S: .'
  contents:
  - 'S: .

    '
- title: 'S: 250 Command complete'
  contents:
  - 'S: 250 Command complete

    '
- title: 'C: MATCH wn substring "abcdefgh"'
  contents:
  - 'C: MATCH wn substring "abcdefgh"

    '
- title: 'S: 552 No match'
  contents:
  - 'S: 552 No match

    '
- title: 8.3.  Sample 3 - Server downtime
  contents:
  - '8.3.  Sample 3 - Server downtime

    '
- title: 'C: [ client initiates connection ]'
  contents:
  - 'C: [ client initiates connection ]

    '
- title: 'S: 420 Server temporarily unavailable'
  contents:
  - 'S: 420 Server temporarily unavailable

    '
- title: 'C: [ client initiates connection ]'
  contents:
  - 'C: [ client initiates connection ]

    '
- title: 'S: 421 Server shutting down at operator request'
  contents:
  - 'S: 421 Server shutting down at operator request

    '
- title: 8.4.  Sample 4 - Authentication
  contents:
  - '8.4.  Sample 4 - Authentication

    '
- title: 'C: [ client initiates connection ]'
  contents:
  - 'C: [ client initiates connection ]

    '
- title: 'S: 220 dict.org dictd (version 0.9) <27831.860032493@dict.org>'
  contents:
  - 'S: 220 dict.org dictd (version 0.9) <27831.860032493@dict.org>

    '
- title: 'C: SHOW DB'
  contents:
  - 'C: SHOW DB

    '
- title: 'S: 110 1 database present: list follows'
  contents:
  - 'S: 110 1 database present: list follows

    '
- title: 'S: free "Free database"'
  contents:
  - 'S: free "Free database"

    '
- title: 'S: .'
  contents:
  - 'S: .

    '
- title: 'S: 250 Command complete'
  contents:
  - 'S: 250 Command complete

    '
- title: 'C: AUTH joesmith authentication-string'
  contents:
  - 'C: AUTH joesmith authentication-string

    '
- title: 'S: 230 Authentication successful'
  contents:
  - 'S: 230 Authentication successful

    '
- title: 'C: SHOW DB'
  contents:
  - 'C: SHOW DB

    '
- title: 'S: 110 2 databases present: list follows'
  contents:
  - 'S: 110 2 databases present: list follows

    '
- title: 'S: free "Free database"'
  contents:
  - 'S: free "Free database"

    '
- title: 'S: licensed "Local licensed database"'
  contents:
  - 'S: licensed "Local licensed database"

    '
- title: 'S: .'
  contents:
  - 'S: .

    '
- title: 'S: 250 Command complete'
  contents:
  - 'S: 250 Command complete

    '
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This RFC raises no security issues.\n"
- title: 10.  References
  contents:
  - "10.  References\n   [ASCII] US-ASCII. Coded Character Set - 7-Bit American Standard\n\
    \        Code for Information Interchange. Standard ANSI X3.4-1986,\n        ANSI,\
    \ 1986.\n   [FOLDOC] Howe, Denis, ed.  The Free On-Line Dictionary of\n      \
    \  Computing, <URL:http://wombat.doc.ic.ac.uk/>\n   [ISO10646] ISO/IEC 10646-1:1993.\
    \ International Standard --\n        Information technology -- Universal Multiple-Octet\
    \ Coded\n        Character Set (UCS) -- Part 1: Architecture and Basic\n     \
    \   Multilingual Plane.  UTF-8 is described in Annex R, adopted\n        but not\
    \ yet published.  UTF-16 is described in Annex Q,\n        adopted but not yet\
    \ published.\n   [JARGON] The on-line hacker Jargon File, version 4.0.0, 25 JUL\n\
    \        1996, <URL:http://www.ccil.org/jargon/>\n   [KNUTH73] Knuth, Donald E.\
    \ \"The Art of Computer Programming\",\n        Volume 3: Sorting and Searching\
    \ (Addison-Wesley Publishing\n        Co., 1973, pages 391 and 392). Knuth notes\
    \ that the soundex\n        method was originally described by Margaret K. Odell\
    \ and\n        Robert C. Russell [US Patents 1261167 (1918) and 1435663\n    \
    \    (1922)].\n   [PZ85] Pollock, Joseph J. and Zamora, Antonio, \"Automatic spelling\n\
    \        correction in scientific and scholarly text,\" CACM, 27(4):\n       \
    \ Apr. 1985, 358-368.\n   [RFC640] Postel, J., \"Revised FTP Reply Codes\", RFC\
    \ 640, June,\n        1975.\n   [RFC821] Postel, J., \"Simple Mail Transfer Protocol\"\
    , STD 10,\n        RFC 821, August 1982.\n   [RFC822] Crocker, D., \"Standard\
    \ for the Format of ARPA Internet\n        Text Messages\", STD 11, RFC 822, August\
    \ 1982.\n   [RFC977] Kantor, B., and P. Lapsley, \"Network News Transfer\n   \
    \     Protocol: A Proposed Standard for the Stream-Based\n        Transmission\
    \ of News\", RFC 977, February 1986.\n   [RFC2045] Freed, N., and N. Borenstein,\
    \ \"Multipurpose Internet\n        Mail Extensions (MIME) Part One: Format of\
    \ Internet Message\n        Bodies\", RFC 2045, November 1996.\n   [RFC1738] Berners-Lee,\
    \ T., Masinter, L. and M. McCahill, \"Uniform\n        Resource Locators (URL)\"\
    , RFC 1738, December 1994.\n   [RFC1760] Haller, N., \"The S/KEY One-Time Password\
    \ System\",\n        RFC 1760, February 1995.\n   [RFC1985] Freed, N., and A.\
    \ Cargille, \"SMTP Service Extension for\n        Command Pipelining\", RFC 1854,\
    \ October 1995.\n   [RFC1939] Myers, J., and M. Rose, \"Post Office Protocol -\
    \ Version 3\",\n        STD 53, RFC 1939, May 1996.\n   [RFC2044] Yergeau, F.,\
    \ \"UTF-8, a transformation format of Unicode\n        and ISO 10646\", RFC 2044,\
    \ October 1996.\n   [RFC2068] Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n\
    \        and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\",\n  \
    \      RFC 2068, January 1997.\n   [RFC2078] Linn, J., \"Generic Security Service\
    \ Application Program\n        Interface, Version 2\", RFC 2078, January 1997.\n\
    \   [RFC2222] Myers, J., \"Simple Authentication and Security Layer\n        (SASL)\"\
    , RFC 2222, October 1997.\n   [WEB1913] Webster's Revised Unabridged Dictionary\
    \ (G & C. Merriam\n        Co., 1913, edited by Noah Porter).  Online version\
    \ prepared by\n        MICRA, Inc., Plainfield, N.J. and edited by Patrick Cassidy\n\
    \        <cassidy@micra.com>.  For further information, see\n   <URL:ftp://uiarchive.cso.uiuc.edu/pub/etext/gutenberg/etext96/pgw*>,\n\
    \        and\n   <URL:http://humanities.uchicago.edu/forms_unrest/webster.form.html>\n\
    \   [WORDNET] Miller, G.A. (1990), ed. WordNet: An On-Line Lexical\n        Database.\
    \ International Journal of Lexicography. Volume 3,\n        Number 4.  <URL:http://www.cogsci.princeton.edu/~wn/>\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   Thanks to Arnt Gulbrandsen and Nicolai Langfeldt for\
    \ many helpful\n   discussions.  Thanks to Bennet Yee, Doug Hoffman, Kevin Martin,\
    \ and\n   Jay Kominek for extensive testing and feedback on the initial\n   implementations\
    \ of the DICT server.  Thanks to Zhong Shao for advice\n   and support.\n   Thanks\
    \ to Brian Kanto, Phil Lapsley, and Jon Postel for writing\n   exemplary RFCs\
    \ which were consulted during the preparation of this\n   document.\n   Thanks\
    \ to Harald T. Alvestrand, whose comments helped improve this\n   document.\n"
- title: 12.  Authors' Addresses
  contents:
  - "12.  Authors' Addresses\n   Rickard E. Faith\n   EMail: faith@cs.unc.edu (or\
    \ faith@acm.org)\n   Bret Martin\n   EMail: bamartin@miranda.org\n   The majority\
    \ of this work was completed while Bret Martin was a\n   student at Yale University.\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (1997).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implmentation may be prepared, copied, published\n\
    \   andand distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
