- title: __initial_text__
  contents:
  - '   Detecting Multiprotocol Label Switched (MPLS) Data-Plane Failures

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes a simple and efficient mechanism to detect\n\
    \   data-plane failures in Multiprotocol Label Switching (MPLS) Label\n   Switched\
    \ Paths (LSPs).  It defines a probe message called an \"MPLS\n   echo request\"\
    \ and a response message called an \"MPLS echo reply\" for\n   returning the result\
    \ of the probe.  The MPLS echo request is intended\n   to contain sufficient information\
    \ to check correct operation of the\n   data plane and to verify the data plane\
    \ against the control plane,\n   thereby localizing faults.\n   This document\
    \ obsoletes RFCs 4379, 6424, 6829, and 7537, and updates\n   RFC 1122.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8029.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   5\n     1.1.  Conventions . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n     1.2.  Structure of This Document  . . . . . . . . . . . .\
    \ . . .   6\n     1.3.  Scope of This Specification . . . . . . . . . . . . .\
    \ . .   6\n   2.  Motivation  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   7\n     2.1.  Use of Address Range 127/8  . . . . . . . . . . . . . . .\
    \   8\n     2.2.  Router Alert Option . . . . . . . . . . . . . . . . . . .  10\n\
    \   3.  Packet Format . . . . . . . . . . . . . . . . . . . . . . . .  11\n  \
    \   3.1.  Return Codes  . . . . . . . . . . . . . . . . . . . . . .  16\n    \
    \ 3.2.  Target FEC Stack  . . . . . . . . . . . . . . . . . . . .  17\n      \
    \ 3.2.1.  LDP IPv4 Prefix . . . . . . . . . . . . . . . . . . .  19\n       3.2.2.\
    \  LDP IPv6 Prefix . . . . . . . . . . . . . . . . . . .  19\n       3.2.3.  RSVP\
    \ IPv4 LSP . . . . . . . . . . . . . . . . . . . .  20\n       3.2.4.  RSVP IPv6\
    \ LSP . . . . . . . . . . . . . . . . . . . .  20\n       3.2.5.  VPN IPv4 Prefix\
    \ . . . . . . . . . . . . . . . . . . .  21\n       3.2.6.  VPN IPv6 Prefix .\
    \ . . . . . . . . . . . . . . . . . .  22\n       3.2.7.  L2 VPN Endpoint . .\
    \ . . . . . . . . . . . . . . . . .  23\n       3.2.8.  FEC 128 Pseudowire - IPv4\
    \ (Deprecated)  . . . . . . .  23\n       3.2.9.  FEC 128 Pseudowire - IPv4 (Current)\
    \ . . . . . . . . .  24\n       3.2.10. FEC 129 Pseudowire - IPv4 . . . . . .\
    \ . . . . . . . .  25\n       3.2.11. FEC 128 Pseudowire - IPv6 . . . . . . .\
    \ . . . . . . .  26\n       3.2.12. FEC 129 Pseudowire - IPv6 . . . . . . . .\
    \ . . . . . .  27\n       3.2.13. BGP Labeled IPv4 Prefix . . . . . . . . . .\
    \ . . . . .  28\n       3.2.14. BGP Labeled IPv6 Prefix . . . . . . . . . . .\
    \ . . . .  28\n       3.2.15. Generic IPv4 Prefix . . . . . . . . . . . . . .\
    \ . . .  29\n       3.2.16. Generic IPv6 Prefix . . . . . . . . . . . . . . .\
    \ . .  29\n       3.2.17. Nil FEC . . . . . . . . . . . . . . . . . . . . . .\
    \ .  29\n     3.3.  Downstream Mapping (Deprecated) . . . . . . . . . . . . .\
    \  30\n     3.4.  Downstream Detailed Mapping TLV . . . . . . . . . . . . .  30\n\
    \       3.4.1.  Sub-TLVs  . . . . . . . . . . . . . . . . . . . . . .  34\n  \
    \     3.4.2.  Downstream Router and Interface . . . . . . . . . . .  40\n    \
    \ 3.5.  Pad TLV . . . . . . . . . . . . . . . . . . . . . . . . .  41\n     3.6.\
    \  Vendor Enterprise Number  . . . . . . . . . . . . . . . .  41\n     3.7.  Interface\
    \ and Label Stack . . . . . . . . . . . . . . . .  42\n     3.8.  Errored TLVs\
    \  . . . . . . . . . . . . . . . . . . . . . .  43\n     3.9.  Reply TOS Octet\
    \ TLV . . . . . . . . . . . . . . . . . . .  44\n   4.  Theory of Operation .\
    \ . . . . . . . . . . . . . . . . . . . .  44\n     4.1.  Dealing with Equal-Cost\
    \ Multipath (ECMP)  . . . . . . . .  44\n     4.2.  Testing LSPs That Are Used\
    \ to Carry MPLS Payloads . . . .  45\n     4.3.  Sending an MPLS Echo Request\
    \  . . . . . . . . . . . . . .  46\n     4.4.  Receiving an MPLS Echo Request\
    \  . . . . . . . . . . . . .  47\n       4.4.1.  FEC Validation  . . . . . . .\
    \ . . . . . . . . . . . .  53\n     4.5.  Sending an MPLS Echo Reply  . . . .\
    \ . . . . . . . . . . .  54\n       4.5.1.  Addition of a New Tunnel  . . . .\
    \ . . . . . . . . . .  55\n       4.5.2.  Transition between Tunnels  . . . .\
    \ . . . . . . . . .  56\n     4.6.  Receiving an MPLS Echo Reply  . . . . . .\
    \ . . . . . . . .  56\n     4.7.  Issue with VPN IPv4 and IPv6 Prefixes . . .\
    \ . . . . . . .  58\n     4.8.  Non-compliant Routers . . . . . . . . . . . .\
    \ . . . . . .  59\n   5.  Security Considerations . . . . . . . . . . . . . .\
    \ . . . . .  59\n   6.  IANA Considerations . . . . . . . . . . . . . . . . .\
    \ . . . .  61\n     6.1.  TCP and UDP Port Number . . . . . . . . . . . . . .\
    \ . . .  61\n     6.2.  MPLS LSP Ping Parameters  . . . . . . . . . . . . . .\
    \ . .  61\n       6.2.1.  Message Types, Reply Modes, Return Codes  . . . . .\
    \ .  61\n       6.2.2.  TLVs  . . . . . . . . . . . . . . . . . . . . . . . .\
    \  62\n       6.2.3.  Global Flags  . . . . . . . . . . . . . . . . . . . .  64\n\
    \       6.2.4.  Downstream Detailed Mapping Address Type  . . . . . .  64\n  \
    \     6.2.5.  DS Flags  . . . . . . . . . . . . . . . . . . . . . .  65\n    \
    \   6.2.6.  Multipath         Types . . . . . . . . . . . . . . .  66\n      \
    \ 6.2.7.  Pad Type  . . . . . . . . . . . . . . . . . . . . . .  66\n       6.2.8.\
    \  Interface and Label Stack Address Type  . . . . . . .  67\n     6.3.  IPv4\
    \ Special-Purpose Address Registry . . . . . . . . . .  67\n   7.  References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  67\n     7.1.  Normative\
    \ References  . . . . . . . . . . . . . . . . . .  67\n     7.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  68\n   Appendix A.  Deprecated\
    \ TLVs and Sub-TLVs (Non-normative) . . . .  72\n     A.1.  Target FEC Stack \
    \ . . . . . . . . . . . . . . . . . . . .  72\n       A.1.1.  FEC 128 Pseudowire\
    \ - IPv4 (Deprecated)  . . . . . . .  72\n     A.2.  Downstream Mapping (Deprecated)\
    \ . . . . . . . . . . . . .  72\n   Acknowledgements  . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  77\n   Contributors  . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  77\n   Authors' Addresses  . . . . . . . . . . . . .\
    \ . . . . . . . . . .  78\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes a simple and efficient mechanism\
    \ to detect\n   data-plane failures in MPLS Label Switched Paths (LSPs).  It defines\n\
    \   a probe message called an \"MPLS echo request\" and a response message\n \
    \  called an \"MPLS echo reply\" for returning the result of the probe.\n   The\
    \ MPLS echo request is intended to contain sufficient information\n   to check\
    \ correct operation of the data plane, as well as a mechanism\n   to verify the\
    \ data plane against the control plane, thereby\n   localizing faults.\n   An\
    \ important consideration in this design is that MPLS echo requests\n   follow\
    \ the same data path that normal MPLS packets would traverse.\n   MPLS echo requests\
    \ are meant primarily to validate the data plane and\n   secondarily to verify\
    \ the data plane against the control plane.\n   Mechanisms to check the control\
    \ plane are valuable but are not\n   covered in this document.\n   This document\
    \ makes special use of the address range 127/8.  This is\n   an exception to the\
    \ behavior defined in RFC 1122 [RFC1122], and this\n   specification updates that\
    \ RFC.  The motivation for this change and\n   the details of this exceptional\
    \ use are discussed in Section 2.1\n   below.\n   This document obsoletes RFC\
    \ 4379 [RFC4379], RFC 6424 [RFC6424], RFC\n   6829 [RFC6829], and RFC 7537 [RFC7537].\n"
- title: 1.1.  Conventions
  contents:
  - "1.1.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [RFC2119].\n   The term \"Must Be Zero\" (MBZ) is used in object descriptions\
    \ for\n   reserved fields.  These fields MUST be set to zero when sent and\n \
    \  ignored on receipt.\n   Terminology pertaining to L2 and L3 Virtual Private\
    \ Networks (VPNs)\n   is defined in [RFC4026].\n   Since this document refers\
    \ to the MPLS Time to Live (TTL) far more\n   frequently than the IP TTL, the\
    \ authors have chosen the convention of\n   using the unqualified \"TTL\" to mean\
    \ \"MPLS TTL\" and using \"IP TTL\" for\n   the TTL value in the IP header.\n"
- title: 1.2.  Structure of This Document
  contents:
  - "1.2.  Structure of This Document\n   The body of this memo contains four main\
    \ parts: motivation, MPLS echo\n   request/reply packet format, LSP ping operation,\
    \ and a reliable\n   return path.  It is suggested that first-time readers skip\
    \ the actual\n   packet formats and read the \"Theory of Operation\" (Section\
    \ 4) first;\n   the document is structured the way it is to avoid forward references.\n"
- title: 1.3.  Scope of This Specification
  contents:
  - "1.3.  Scope of This Specification\n   The primary goal of this document is to\
    \ provide a clean and updated\n   LSP ping specification.\n   [RFC4379] defines\
    \ the basic mechanism for MPLS LSP validation that\n   can be used for fault detection\
    \ and isolation.  The scope of this\n   document also includes various updates\
    \ to MPLS LSP ping, including:\n   o  Update all references and citations.\n \
    \     *  Obsoleted RFCs 2434, 2030, and 3036 are respectively replaced\n     \
    \    with RFCs 5226, 5905, and 5036.\n      *  Additionally, some informative\
    \ references were published as\n         RFCs: RFCs 4761, 5085, 5885, and 8077.\n\
    \   o  Incorporate all outstanding RFC errata.\n      *  See [Err108], [Err742],\
    \ [Err1418], [Err1714], [Err1786],\n         [Err2978], [Err3399].\n   o  Replace\
    \ EXP with Traffic Class (TC), based on the update from RFC\n      5462.\n   o\
    \  Incorporate the updates from RFC 6829, by adding the pseudowire\n      (PW)\
    \ Forwarding Equivalence Classes (FECs) advertised over IPv6\n      and obsoleting\
    \ RFC 6829.\n   o  Incorporate the updates from RFC 7506, by adding the IPv6 Router\n\
    \      Alert Option (RAO) for MPLS Operations, Administration, and\n      Maintenance\
    \ (OAM).\n   o  Incorporate newly defined bits on the Global Flags field from\
    \ RFCs\n      6425 and 6426.\n   o  Update the IPv4 addresses used in examples\
    \ to utilize the\n      documentation prefix.  Add examples with IPv6 addresses.\n\
    \   o  Incorporate the updates from RFC 6424, by deprecating the\n      Downstream\
    \ Mapping TLV (DSMAP) and adding the Downstream Detailed\n      Mapping TLV (DDMAP);\
    \ updating two new Return Codes; adding the\n      motivations of tunneled or\
    \ stitched LSPs; updating the procedures,\n      IANA considerations, and security\
    \ considerations; and obsoleting\n      RFC 6424.\n   o  Incorporate the updates\
    \ from RFC 7537, by updating the IANA\n      Considerations section and obsoleting\
    \ RFC 7537.\n   o  Finally, obsolete RFC 4379.\n"
- title: 2.  Motivation
  contents:
  - "2.  Motivation\n   When an LSP fails to deliver user traffic, the failure cannot\
    \ always\n   be detected by the MPLS control plane.  There is a need to provide\
    \ a\n   tool that would enable users to detect such traffic \"black holes\" or\n\
    \   misrouting within a reasonable period of time and a mechanism to\n   isolate\
    \ faults.\n   In this document, we describe a mechanism that accomplishes these\n\
    \   goals.  This mechanism is modeled after the ping/traceroute paradigm:\n  \
    \ ping (ICMP echo request [RFC0792]) is used for connectivity checks,\n   and\
    \ traceroute is used for hop-by-hop fault localization as well as\n   path tracing.\
    \  This document specifies a \"ping\" mode and a\n   \"traceroute\" mode for testing\
    \ MPLS LSPs.\n   The basic idea is to verify that packets that belong to a particular\n\
    \   FEC actually end their MPLS path on a Label Switching Router (LSR)\n   that\
    \ is an egress for that FEC.  This document proposes that this\n   test be carried\
    \ out by sending a packet (called an \"MPLS echo\n   request\") along the same\
    \ data path as other packets belonging to this\n   FEC.  An MPLS echo request\
    \ also carries information about the FEC\n   whose MPLS path is being verified.\
    \  This echo request is forwarded\n   just like any other packet belonging to\
    \ that FEC.  In \"ping\" mode\n   (basic connectivity check), the packet should\
    \ reach the end of the\n   path, at which point it is sent to the control plane\
    \ of the egress\n   LSR, which then verifies whether it is indeed an egress for\
    \ the FEC.\n   In \"traceroute\" mode (fault isolation), the packet is sent to\
    \ the\n   control plane of each transit LSR, which performs various checks to\n\
    \   confirm that it is indeed a transit LSR for this path; this LSR also\n   returns\
    \ further information that helps check the control plane\n   against the data\
    \ plane, i.e., that forwarding matches what the\n   routing protocols determined\
    \ as the path.\n   An LSP traceroute may cross a tunneled or stitched LSP en route\
    \ to\n   the destination.  While performing end-to-end LSP validation in such\n\
    \   scenarios, the FEC information included in the packet by the\n   Initiator\
    \ may be different from the one assigned by the transit node\n   in a different\
    \ segment of a stitched LSP or tunnel.  Let us consider\n   a simple case.\n \
    \  A          B          C           D           E\n   o -------- o -------- o\
    \ --------- o --------- o\n     \\_____/  | \\______/   \\______/  | \\______/\n\
    \       LDP    |   RSVP       RSVP    |    LDP\n              |              \
    \        |\n               \\____________________/\n                       LDP\n\
    \   When an LSP traceroute is initiated from Router A to Router E, the\n   FEC\
    \ information included in the packet will be LDP while Router C\n   along the\
    \ path is a pure RSVP node and does not run LDP.\n   Consequently, node C will\
    \ be unable to perform FEC validation.  The\n   MPLS echo request should contain\
    \ sufficient information to allow any\n   transit node within a stitched or tunneled\
    \ LSP to perform FEC\n   validations to detect any misrouted echo requests.\n\
    \   One way these tools can be used is to periodically ping a FEC to\n   ensure\
    \ connectivity.  If the ping fails, one can then initiate a\n   traceroute to\
    \ determine where the fault lies.  One can also\n   periodically traceroute FECs\
    \ to verify that forwarding matches the\n   control plane; however, this places\
    \ a greater burden on transit LSRs\n   and thus should be used with caution.\n"
- title: 2.1.  Use of Address Range 127/8
  contents:
  - "2.1.  Use of Address Range 127/8\n   As described above, LSP ping is intended\
    \ as a diagnostic tool.  It is\n   intended to enable providers of an MPLS-based\
    \ service to isolate\n   network faults.  In particular, LSP ping needs to diagnose\
    \ situations\n   where the control and data planes are out of sync.  It performs\
    \ this\n   by routing an MPLS echo request packet based solely on its label\n\
    \   stack.  That is, the IP destination address is never used in a\n   forwarding\
    \ decision.  In fact, the sender of an MPLS echo request\n   packet may not know,\
    \ a priori, the address of the router at the end\n   of the LSP.\n   Providers\
    \ of MPLS-based services also need the ability to trace all\n   of the possible\
    \ paths that an LSP may take.  Since most MPLS services\n   are based on IP unicast\
    \ forwarding, these paths are subject to Equal-\n   Cost Multipath (ECMP) load\
    \ sharing.\n   This leads to the following requirements:\n   1.  Although the\
    \ LSP in question may be broken in unknown ways, the\n       likelihood of a diagnostic\
    \ packet being delivered to a user of an\n       MPLS service MUST be held to\
    \ an absolute minimum.\n   2.  If an LSP is broken in such a way that it prematurely\
    \ terminates,\n       the diagnostic packet MUST NOT be IP forwarded.\n   3. \
    \ A means of varying the diagnostic packets such that they exercise\n       all\
    \ ECMP paths is thus REQUIRED.\n   Clearly, using general unicast addresses satisfies\
    \ neither of the\n   first two requirements.  A number of other options for addresses\
    \ were\n   considered, including a portion of the private address space (as\n\
    \   determined by the network operator) and the IPv4 link-local\n   addresses.\
    \  Use of the private address space was deemed ineffective\n   since the leading\
    \ MPLS-based service is an IPv4 VPN.  VPNs often use\n   private addresses.\n\
    \   The IPv4 link-local addresses are more attractive in that the scope\n   over\
    \ which they can be forwarded is limited.  However, if one were to\n   use an\
    \ address from this range, it would still be possible for the\n   first recipient\
    \ of a diagnostic packet that \"escaped\" from a broken\n   LSP to have that address\
    \ assigned to the interface on which it\n   arrived and thus could mistakenly\
    \ receive such a packet.  Older\n   deployed routers may not (correctly) implement\
    \ IPv4 link-local\n   addresses and would forward a packet with an address from\
    \ that range\n   toward the default route.\n   The 127/8 range for IPv4 and that\
    \ same range embedded in an\n   IPv4-mapped IPv6 address for IPv6 was chosen for\
    \ a number of reasons.\n   RFC 1122 allocates the 127/8 as the \"Internal host\
    \ loopback address\"\n   and states: \"Addresses of this form MUST NOT appear\
    \ outside a host.\"\n   Thus, the default behavior of hosts is to discard such\
    \ packets.  This\n   helps to ensure that if a diagnostic packet is misdirected\
    \ to a host,\n   it will be silently discarded.\n   RFC 1812 [RFC1812] states:\n\
    \      A router SHOULD NOT forward, except over a loopback interface, any\n  \
    \    packet that has a destination address on network 127.  A router\n      MAY\
    \ have a switch that allows the network manager to disable these\n      checks.\
    \  If such a switch is provided, it MUST default to\n      performing the checks.\n\
    \   This helps to ensure that diagnostic packets are never IP forwarded.\n   The\
    \ 127/8 address range provides 16M addresses allowing wide\n   flexibility in\
    \ varying addresses to exercise ECMP paths.  Finally, as\n   an implementation\
    \ optimization, the 127/8 range provides an easy\n   means of identifying possible\
    \ LSP packets.\n"
- title: 2.2.  Router Alert Option
  contents:
  - "2.2.  Router Alert Option\n   This document requires the use of the RAO set in\
    \ an IP header in\n   order to have the transit node process the MPLS OAM payload.\n\
    \   [RFC2113] defines a generic Option Value 0x0 for IPv4 RAO that alerts\n  \
    \ the transit router to examine the IPv4 packet.  [RFC7506] defines\n   MPLS OAM\
    \ Option Value 69 for IPv6 RAO to alert transit routers to\n   examine the IPv6\
    \ packet more closely for MPLS OAM purposes.\n   The use of the Router Alert IP\
    \ Option in this document is as follows:\n      In case of an IPv4 header, the\
    \ generic IPv4 RAO value 0x0\n      [RFC2113] SHOULD be used.  In case of an IPv6\
    \ header, the IPv6 RAO\n      value (69) for MPLS OAM [RFC7506] MUST be used.\n"
- title: 3.  Packet Format
  contents:
  - "3.  Packet Format\n   An MPLS echo request/reply is a (possibly labeled) IPv4\
    \ or IPv6 UDP\n   packet; the contents of the UDP packet have the following format:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Version Number        |         Global Flags          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Message Type |   Reply Mode  |  Return Code  | Return Subcode|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                        Sender's Handle                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        Sequence Number                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    TimeStamp Sent (seconds)                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                TimeStamp Sent (seconds fraction)              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                  TimeStamp Received (seconds)                 |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \              TimeStamp Received (seconds fraction)            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                            TLVs ...                           |\n   \
    \   .                                                               .\n      .\
    \                                                               .\n      .   \
    \                                                            .\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Version Number is currently 1.  (Note: the version number is to\n   be\
    \ incremented whenever a change is made that affects the ability of\n   an implementation\
    \ to correctly parse or process an MPLS echo request/\n   reply.  These changes\
    \ include any syntactic or semantic changes made\n   to any of the fixed fields,\
    \ or to any Type-Length-Value (TLV) or\n   sub-TLV assignment or format that is\
    \ defined at a certain version\n   number.  The version number may not need to\
    \ be changed if an optional\n   TLV or sub-TLV is added.)\n   The Global Flags\
    \ field is a bit vector with the following format:\n       0                 \
    \  1\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |           MBZ           |R|T|V|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   At the time of writing, three flags are defined: the R, T, and V\n   bits;\
    \ the rest MUST be set to zero when sending and ignored on\n   receipt.\n   The\
    \ V (Validate FEC Stack) flag is set to 1 if the sender wants the\n   receiver\
    \ to perform FEC Stack validation; if V is 0, the choice is\n   left to the receiver.\n\
    \   The T (Respond Only If TTL Expired) flag MUST be set only in the echo\n  \
    \ request packet by the sender.  If the T flag is set to 1 in an\n   incoming\
    \ echo request, and the TTL of the incoming MPLS label is more\n   than 1, then\
    \ the receiving node MUST drop the incoming echo request\n   and MUST NOT send\
    \ any echo reply to the sender.  This flag MUST NOT\n   be set in the echo reply\
    \ packet.  If this flag is set in an echo\n   reply packet, then it MUST be ignored.\
    \  The T flag is defined in\n   Section 3.4 of [RFC6425].\n   The R (Validate\
    \ Reverse Path) flag is defined in [RFC6426].  When\n   this flag is set in the\
    \ echo request, the Responder SHOULD return\n   reverse-path FEC information,\
    \ as described in Section 3.4.2 of\n   [RFC6426].\n   The Message Type is one\
    \ of the following:\n      Value    Meaning\n      -----    -------\n        \
    \  1    MPLS Echo Request\n          2    MPLS Echo Reply\n   The Reply Mode can\
    \ take one of the following values:\n      Value    Meaning\n      -----    -------\n\
    \          1    Do not reply\n          2    Reply via an IPv4/IPv6 UDP packet\n\
    \          3    Reply via an IPv4/IPv6 UDP packet with Router Alert\n        \
    \  4    Reply via application-level control channel\n   An MPLS echo request with\
    \ 1 (Do not reply) in the Reply Mode field\n   may be used for one-way connectivity\
    \ tests; the receiving router may\n   log gaps in the Sequence Numbers and/or\
    \ maintain delay/jitter\n   statistics.  An MPLS echo request would normally have\
    \ 2 (Reply via an\n   IPv4/IPv6 UDP packet) in the Reply Mode field.  If the normal\
    \ IP\n   return path is deemed unreliable, one may use 3 (Reply via an IPv4/\n\
    \   IPv6 UDP packet with Router Alert).  Note that this requires that all\n  \
    \ intermediate routers understand and know how to forward MPLS echo\n   replies.\
    \  The echo reply uses the same IP version number as the\n   received echo request,\
    \ i.e., an IPv4 encapsulated echo reply is sent\n   in response to an IPv4 encapsulated\
    \ echo request.\n   Some applications support an IP control channel.  One such\
    \ example is\n   the associated control channel defined in Virtual Circuit\n \
    \  Connectivity Verification (VCCV) [RFC5085][RFC5885].  Any application\n   that\
    \ supports an IP control channel between its control entities may\n   set the\
    \ Reply Mode to 4 (Reply via application-level control channel)\n   to ensure\
    \ that replies use that same channel.  Further definition of\n   this code point\
    \ is application specific and thus beyond the scope of\n   this document.\n  \
    \ Return Codes and Subcodes are described in Section 3.1.\n   The Sender's Handle\
    \ is filled in by the sender and returned unchanged\n   by the receiver in the\
    \ echo reply (if any).  There are no semantics\n   associated with this handle,\
    \ although a sender may find this useful\n   for matching up requests with replies.\n\
    \   The Sequence Number is assigned by the sender of the MPLS echo\n   request\
    \ and can be (for example) used to detect missed replies.\n   The TimeStamp Sent\
    \ is the time of day (according to the sender's\n   clock) in 64-bit NTP timestamp\
    \ format [RFC5905] when the MPLS echo\n   request is sent.  The TimeStamp Received\
    \ in an echo reply is the time\n   of day (according to the receiver's clock)\
    \ in 64-bit NTP timestamp\n   format in which the corresponding echo request was\
    \ received.\n   TLVs (Type-Length-Value tuples) have the following format:\n \
    \      0                   1                   2                   3\n       0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |             Type              |            Length             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             Value                             |\n      .   \
    \                                                            .\n      .      \
    \                                                         .\n      .         \
    \                                                      .\n      |            \
    \                                                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Types are defined below; Length is the length of the Value field in\n   octets.\
    \  The Value field depends on the Type; it is zero padded to\n   align to a 4-octet\
    \ boundary.  TLVs may be nested within other TLVs,\n   in which case the nested\
    \ TLVs are called sub-TLVs.  Sub-TLVs have\n   independent types and MUST also\
    \ be 4-octet aligned.\n   Two examples of how TLV and sub-TLV lengths are computed,\
    \ and how\n   sub-TLVs are padded to be 4-octet aligned, are as follows:\n   \
    \    0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Type = 1 (LDP IPv4 FEC)    |          Length = 5           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                          IPv4 prefix                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Prefix Length |         Must Be Zero                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The\
    \ Length for this TLV is 5.  A Target FEC Stack TLV that contains\n   an LDP IPv4\
    \ FEC sub-TLV and a VPN IPv4 prefix sub-TLV has the\n   following format:\n  \
    \     0                   1                   2                   3\n       0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      Type = 1 (FEC TLV)       |          Length = 32          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Sub-Type = 1 (LDP IPv4 FEC)  |          Length = 5           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          IPv4 prefix                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Prefix Length |         Must Be Zero                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Sub-Type = 6 (VPN IPv4 prefix)|          Length = 13          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Route Distinguisher                      |\n      |   \
    \                       (8 octets)                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         IPv4 prefix                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Prefix Length |                 Must Be Zero                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   A description of the Types and Values of the top-level TLVs for LSP\n   ping\
    \ are given below:\n          Type #                  Value Field\n          ------\
    \                  -----------\n               1                  Target FEC Stack\n\
    \               2                  Downstream Mapping (Deprecated)\n         \
    \      3                  Pad\n               4                  Unassigned\n\
    \               5                  Vendor Enterprise Number\n               6\
    \                  Unassigned\n               7                  Interface and\
    \ Label Stack\n               8                  Unassigned\n               9\
    \                  Errored TLVs\n              10                  Reply TOS Byte\n\
    \              20                  Downstream Detailed Mapping\n   Types less\
    \ than 32768 (i.e., with the high-order bit equal to 0) are\n   mandatory TLVs\
    \ that MUST either be supported by an implementation or\n   result in the Return\
    \ Code of 2 (\"One or more of the TLVs was not\n   understood\") being sent in\
    \ the echo response.\n   Types greater than or equal to 32768 (i.e., with the\
    \ high-order bit\n   equal to 1) are optional TLVs that SHOULD be ignored if the\n\
    \   implementation does not understand or support them.\n   In Sections 3.2 through\
    \ 3.9 and their various subsections, only the\n   Value field of the TLV is included.\n"
- title: 3.1.  Return Codes
  contents:
  - "3.1.  Return Codes\n   The Return Code is set to zero by the sender of an echo\
    \ request.  The\n   receiver of said echo request can set it to one of the values\
    \ listed\n   below in the corresponding echo reply that it generates.  The\n \
    \  notation <RSC> refers to the Return Subcode.  This field is filled in\n   with\
    \ the stack-depth for those codes that specify that.  For all\n   other codes,\
    \ the Return Subcode MUST be set to zero.\n   Value    Meaning\n   -----    -------\n\
    \       0    No Return Code\n       1    Malformed echo request received\n   \
    \    2    One or more of the TLVs was not understood\n       3    Replying router\
    \ is an egress for the FEC at\n            stack-depth <RSC>\n       4    Replying\
    \ router has no mapping for the FEC at\n            stack-depth <RSC>\n      \
    \ 5    Downstream Mapping Mismatch (See Note 1)\n       6    Upstream Interface\
    \ Index Unknown (See Note 1)\n       7    Reserved\n       8    Label switched\
    \ at stack-depth <RSC>\n       9    Label switched but no MPLS forwarding at stack-depth\
    \ <RSC>\n      10    Mapping for this FEC is not the given label at\n        \
    \    stack-depth <RSC>\n      11    No label entry at stack-depth <RSC>\n    \
    \  12    Protocol not associated with interface at FEC\n            stack-depth\
    \ <RSC>\n      13    Premature termination of ping due to label stack\n      \
    \      shrinking to a single label\n      14    See DDMAP TLV for meaning of Return\
    \ Code and Return\n            Subcode (See Note 2)\n      15    Label switched\
    \ with FEC change\n   Note 1\n      The Return Subcode (RSC) contains the point\
    \ in the label stack\n      where processing was terminated.  If the RSC is 0,\
    \ no labels were\n      processed.  Otherwise, the packet was label switched at\
    \ depth RSC.\n   Note 2\n      The Return Code is per \"Downstream Detailed Mapping\
    \ TLV\"\n      (Section 3.4).  This Return Code MUST be used only in the message\n\
    \      header and MUST be set only in the MPLS echo reply message.  If\n     \
    \ the Return Code is set in the MPLS echo request message, then it\n      MUST\
    \ be ignored.  When this Return Code is set, each Downstream\n      Detailed Mapping\
    \ TLV MUST have an appropriate Return Code and\n      Return Subcode.  This Return\
    \ Code MUST be used when there are\n      multiple downstreams for a given node\
    \ (such as Point-to-Multipoint\n      (P2MP) or ECMP), and the node needs to return\
    \ a Return Code/Return\n      Subcode for each downstream.  This Return Code MAY\
    \ be used even\n      when there is only one downstream for a given node.\n"
- title: 3.2.  Target FEC Stack
  contents:
  - "3.2.  Target FEC Stack\n   A Target FEC Stack is a list of sub-TLVs.  The number\
    \ of elements is\n   determined by looking at the sub-TLV length fields.\n   \
    \ Sub-Type     Length         Value Field\n    --------     ------         -----------\n\
    \           1          5         LDP IPv4 prefix\n           2         17    \
    \     LDP IPv6 prefix\n           3         20         RSVP IPv4 LSP\n       \
    \    4         56         RSVP IPv6 LSP\n           5                    Unassigned\n\
    \           6         13         VPN IPv4 prefix\n           7         25    \
    \     VPN IPv6 prefix\n           8         14         L2 VPN endpoint\n     \
    \      9         10         \"FEC 128\" Pseudowire - IPv4 (deprecated)\n     \
    \     10         14         \"FEC 128\" Pseudowire - IPv4\n          11      \
    \  16+         \"FEC 129\" Pseudowire - IPv4\n          12          5        \
    \ BGP labeled IPv4 prefix\n          13         17         BGP labeled IPv6 prefix\n\
    \          14          5         Generic IPv4 prefix\n          15         17\
    \         Generic IPv6 prefix\n          16          4         Nil FEC\n     \
    \     24         38         \"FEC 128\" Pseudowire - IPv6\n          25      \
    \   40+        \"FEC 129\" Pseudowire - IPv6\n   Other FEC types have been defined\
    \ and will be defined as needed.\n   Note that this TLV defines a stack of FECs,\
    \ the first FEC element\n   corresponding to the top of the label stack, etc.\n\
    \   An MPLS echo request MUST have a Target FEC Stack that describes the\n   FEC\
    \ Stack being tested.  For example, if an LSR X has an LDP mapping\n   [RFC5036]\
    \ for 192.0.2.1 (say, label 1001), then to verify that label\n   1001 does indeed\
    \ reach an egress LSR that announced this prefix via\n   LDP, X can send an MPLS\
    \ echo request with a FEC Stack TLV with one\n   FEC in it, namely, of type LDP\
    \ IPv4 prefix, with prefix 192.0.2.1/32,\n   and send the echo request with a\
    \ label of 1001.\n   Say LSR X wanted to verify that a label stack of <1001, 23456>\
    \ is the\n   right label stack to use to reach a VPN IPv4 prefix (see\n   Section\
    \ 3.2.5) of 203.0.113.0/24 in VPN foo.  Say further that LSR Y\n   with loopback\
    \ address 192.0.2.1 announced prefix 203.0.113.0/24 with\n   Route Distinguisher\
    \ (RD) RD-foo-Y (which may in general be different\n   from the RD that LSR X\
    \ uses in its own advertisements for VPN foo),\n   label 23456, and BGP next hop\
    \ 192.0.2.1 [RFC4271].  Finally, suppose\n   that LSR X receives a label binding\
    \ of 1001 for 192.0.2.1 via LDP.  X\n   has two choices in sending an MPLS echo\
    \ request: X can send an MPLS\n   echo request with a FEC Stack TLV with a single\
    \ FEC of type VPN IPv4\n   prefix with a prefix of 203.0.113.0/24 and an RD of\
    \ RD-foo-Y.\n   Alternatively, X can send a FEC Stack TLV with two FECs, the first\
    \ of\n   type LDP IPv4 with a prefix of 192.0.2.1/32 and the second of type of\n\
    \   IP VPN with a prefix 203.0.113.0/24 with an RD of RD-foo-Y.  In\n   either\
    \ case, the MPLS echo request would have a label stack of <1001,\n   23456>. \
    \ (Note: in this example, 1001 is the \"outer\" label and 23456\n   is the \"\
    inner\" label.)\n   If, for example, an LSR Y has an LDP mapping for the IPv6\
    \ address\n   2001:db8::1 (say, label 2001), then to verify that label 2001 does\n\
    \   reach an egress LSR that announced this prefix via LDP, LSR Y can\n   send\
    \ an MPLS echo request with a FEC Stack TLV with one LDP IPv6\n   prefix FEC,\
    \ with prefix 2001:db8::1/128, and with a label of 2001.\n   If an end-to-end\
    \ path comprises of one or more tunneled or stitched\n   LSPs, each transit node\
    \ that is the originating point of a new tunnel\n   or segment SHOULD reply back\
    \ notifying the FEC stack change along\n   with the new FEC details, for example,\
    \ if LSR X has an LDP mapping\n   for IPv4 prefix 192.0.2.10 on LSR Z (say, label\
    \ 3001).  Say further\n   that LSR A and LSR B are transit nodes along the path,\
    \ which also\n   have an RSVP tunnel over which LDP is enabled.  While replying\
    \ back,\n   A SHOULD notify that the FEC changes from LDP to <RSVP, LDP>.  If\
    \ the\n   new tunnel is a transparent pipe, i.e., the data-plane trace will not\n\
    \   expire in the middle of the tunnel, then the transit node SHOULD NOT\n   reply\
    \ back notifying the FEC stack change or the new FEC details.  If\n   the transit\
    \ node wishes to hide the nature of the tunnel from the\n   ingress of the echo\
    \ request, then the transit node MAY notify the FEC\n   stack change and include\
    \ Nil FEC as the new FEC.\n"
- title: 3.2.1.  LDP IPv4 Prefix
  contents:
  - "3.2.1.  LDP IPv4 Prefix\n   The IPv4 Prefix FEC is defined in [RFC5036].  When\
    \ an LDP IPv4 prefix\n   is encoded in a label stack, the following format is\
    \ used.  The value\n   consists of 4 octets of an IPv4 prefix followed by 1 octet\
    \ of prefix\n   length in bits; the format is given below.  The IPv4 prefix is\
    \ in\n   network byte order; if the prefix is shorter than 32 bits, trailing\n\
    \   bits SHOULD be set to zero.  See [RFC5036] for an example of a\n   Mapping\
    \ for an IPv4 FEC.\n       0                   1                   2         \
    \          3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          IPv4 prefix                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Prefix Length |         Must Be Zero                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.2.  LDP IPv6 Prefix
  contents:
  - "3.2.2.  LDP IPv6 Prefix\n   The IPv6 Prefix FEC is defined in [RFC5036].  When\
    \ an LDP IPv6 prefix\n   is encoded in a label stack, the following format is\
    \ used.  The value\n   consists of 16 octets of an IPv6 prefix followed by 1 octet\
    \ of prefix\n   length in bits; the format is given below.  The IPv6 prefix is\
    \ in\n   network byte order; if the prefix is shorter than 128 bits, the\n   trailing\
    \ bits SHOULD be set to zero.  See [RFC5036] for an example of\n   a Mapping for\
    \ an IPv6 FEC.\n       0                   1                   2             \
    \      3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          IPv6 prefix                          |\n   \
    \   |                          (16 octets)                          |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Prefix Length |         Must Be Zero                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.3.  RSVP IPv4 LSP
  contents:
  - "3.2.3.  RSVP IPv4 LSP\n   The value has the format below.  The Value fields are\
    \ taken from RFC\n   3209 [RFC3209], Sections 4.6.1.1 and 4.6.2.1.\n       0 \
    \                  1                   2                   3\n       0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                 IPv4 Tunnel Endpoint Address                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \          Must Be Zero         |     Tunnel ID                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       Extended Tunnel ID                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                   IPv4 Tunnel Sender Address                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Must Be Zero         |            LSP ID             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.4.  RSVP IPv6 LSP
  contents:
  - "3.2.4.  RSVP IPv6 LSP\n   The value has the format below.  The Value fields are\
    \ taken from RFC\n   3209 [RFC3209], Sections 4.6.1.2 and 4.6.2.2.\n       0 \
    \                  1                   2                   3\n       0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                 IPv6 Tunnel Endpoint Address                  |\n   \
    \   |                                                               |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Must Be Zero         |          Tunnel ID            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                       Extended Tunnel ID                      |\n      |   \
    \                                                            |\n      |      \
    \                                                         |\n      |         \
    \                                                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                   IPv6 Tunnel Sender Address                  |\n   \
    \   |                                                               |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Must Be Zero         |            LSP ID             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.5.  VPN IPv4 Prefix
  contents:
  - "3.2.5.  VPN IPv4 Prefix\n   VPN-IPv4 Network Layer Routing Information (NLRI)\
    \ is defined in\n   [RFC4365].  This document uses the term VPN IPv4 prefix for\
    \ a\n   VPN-IPv4 NLRI that has been advertised with an MPLS label in BGP.\n  \
    \ See [RFC3107].\n   When a VPN IPv4 prefix is encoded in a label stack, the following\n\
    \   format is used.  The Value field consists of the RD advertised with\n   the\
    \ VPN IPv4 prefix, the IPv4 prefix (with trailing 0 bits to make 32\n   bits in\
    \ all), and a prefix length, as follows:\n       0                   1       \
    \            2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Route Distinguisher                      |\n   \
    \   |                          (8 octets)                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         IPv4 prefix                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Prefix Length |                 Must Be Zero                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The RD is an 8-octet identifier; it does not contain any inherent\n   information.\
    \  The purpose of the RD is solely to allow one to create\n   distinct routes\
    \ to a common IPv4 address prefix.  The encoding of the\n   RD is not important\
    \ here.  When matching this field to the local FEC\n   information, it is treated\
    \ as an opaque value.\n"
- title: 3.2.6.  VPN IPv6 Prefix
  contents:
  - "3.2.6.  VPN IPv6 Prefix\n   VPN-IPv6 NLRI is defined in [RFC4365].  This document\
    \ uses the term\n   VPN IPv6 prefix for a VPN-IPv6 NLRI that has been advertised\
    \ with an\n   MPLS label in BGP.  See [RFC3107].\n   When a VPN IPv6 prefix is\
    \ encoded in a label stack, the following\n   format is used.  The Value field\
    \ consists of the RD advertised with\n   the VPN IPv6 prefix, the IPv6 prefix\
    \ (with trailing 0 bits to make\n   128 bits in all), and a prefix length, as\
    \ follows:\n       0                   1                   2                 \
    \  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                      Route Distinguisher                      |\n      |\
    \                          (8 octets)                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         IPv6 prefix                           |\n   \
    \   |                                                               |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Prefix Length |                 Must Be Zero                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The\
    \ RD is identical to the VPN IPv4 Prefix RD, except that it\n   functions here\
    \ to allow the creation of distinct routes to IPv6\n   prefixes.  See Section\
    \ 3.2.5.  When matching this field to local FEC\n   information, it is treated\
    \ as an opaque value.\n"
- title: 3.2.7.  L2 VPN Endpoint
  contents:
  - "3.2.7.  L2 VPN Endpoint\n   VPLS stands for Virtual Private LAN Service.  The\
    \ terms VPLS BGP NLRI\n   and VPLS Edge Identifier (VE ID) are defined in [RFC4761].\
    \  This\n   document uses the simpler term L2 VPN endpoint when referring to a\n\
    \   VPLS BGP NLRI.  The RD is an 8-octet identifier used to distinguish\n   information\
    \ about various L2 VPNs advertised by a node.  The VE ID is\n   a 2-octet identifier\
    \ used to identify a particular node that serves\n   as the service attachment\
    \ point within a VPLS.  The structure of\n   these two identifiers is unimportant\
    \ here; when matching these fields\n   to local FEC information, they are treated\
    \ as opaque values.  The\n   encapsulation type is identical to the Pseudowire\
    \ (PW) Type in\n   Section 3.2.9.\n   When an L2 VPN endpoint is encoded in a\
    \ label stack, the following\n   format is used.  The Value field consists of\
    \ an RD (8 octets), the\n   sender's (of the ping) VE ID (2 octets), the receiver's\
    \ VE ID (2\n   octets), and an encapsulation type (2 octets), formatted as follows:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Route Distinguisher                      |\n   \
    \   |                          (8 octets)                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Sender's VE ID        |       Receiver's VE ID        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \      Encapsulation Type       |         Must Be Zero          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.8.  FEC 128 Pseudowire - IPv4 (Deprecated)
  contents:
  - "3.2.8.  FEC 128 Pseudowire - IPv4 (Deprecated)\n   See Appendix A.1.1 for details.\n"
- title: 3.2.9.  FEC 128 Pseudowire - IPv4 (Current)
  contents:
  - "3.2.9.  FEC 128 Pseudowire - IPv4 (Current)\n   FEC 128 (0x80) is defined in\
    \ [RFC8077], as are the terms PW ID\n   (Pseudowire ID) and PW Type (Pseudowire\
    \ Type).  A PW ID is a non-zero\n   32-bit connection ID.  The PW Type is a 15-bit\
    \ number indicating the\n   encapsulation type.  It is carried right justified\
    \ in the field below\n   termed \"encapsulation type\" with the high-order bit\
    \ set to zero.\n   Both of these fields are treated in this protocol as opaque\
    \ values.\n   When matching these fields to the local FEC information, the match\n\
    \   MUST be exact.\n   When a FEC 128 is encoded in a label stack, the following\
    \ format is\n   used.  The Value field consists of the Sender's Provider Edge\
    \ (PE)\n   IPv4 Address (the source address of the targeted LDP session), the\n\
    \   Remote PE IPv4 Address (the destination address of the targeted LDP\n   session),\
    \ the PW ID, and the encapsulation type as follows:\n       0                \
    \   1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Sender's PE IPv4 Address                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Remote PE IPv4 Address                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                             PW ID                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \            PW Type            |          Must Be Zero         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.10.  FEC 129 Pseudowire - IPv4
  contents:
  - "3.2.10.  FEC 129 Pseudowire - IPv4\n   FEC 129 (0x81) and the terms PW Type,\
    \ Attachment Group Identifier\n   (AGI), Attachment Group Identifier Type (AGI\
    \ Type), Attachment\n   Individual Identifier Type (AII Type), Source Attachment\
    \ Individual\n   Identifier (SAII), and Target Attachment Individual Identifier\
    \ (TAII)\n   are defined in [RFC8077].  The PW Type is a 15-bit number indicating\n\
    \   the encapsulation type.  It is carried right justified in the field\n   below\
    \ PW Type with the high-order bit set to zero.  All the other\n   fields are treated\
    \ as opaque values and copied directly from the FEC\n   129 format.  All of these\
    \ values together uniquely define the FEC\n   within the scope of the LDP session\
    \ identified by the source and\n   remote PE IPv4 addresses.\n   When a FEC 129\
    \ is encoded in a label stack, the following format is\n   used.  The Length of\
    \ this TLV is 16 + AGI length + SAII length + TAII\n   length.  Padding is used\
    \ to make the total length a multiple of 4;\n   the length of the padding is not\
    \ included in the Length field.\n       0                   1                \
    \   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Sender's PE IPv4 Address                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Remote PE IPv4 Address                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            PW Type            |   AGI Type    |  AGI Length   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                           AGI Value                           ~\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   AII Type    |  SAII Length  |      SAII Value               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                    SAII Value (continued)                     ~\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   AII Type    |  TAII Length  |      TAII Value               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                    TAII Value (continued)                     ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  TAII (cont.) |  0-3 octets of zero padding                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.11.  FEC 128 Pseudowire - IPv6
  contents:
  - "3.2.11.  FEC 128 Pseudowire - IPv6\n   The FEC 128 Pseudowire IPv6 sub-TLV has\
    \ a structure consistent with\n   the FEC 128 Pseudowire IPv4 sub-TLV as described\
    \ in Section 3.2.9.\n   The Value field consists of the Sender's PE IPv6 Address\
    \ (the source\n   address of the targeted LDP session), the Remote PE IPv6 Address\
    \ (the\n   destination address of the targeted LDP session), the PW ID, and the\n\
    \   encapsulation type as follows:\n       0                   1             \
    \      2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ~                     Sender's PE IPv6 Address                  ~\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                      Remote PE IPv6 Address                   ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                             PW ID                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \            PW Type            |          Must Be Zero         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Sender's PE IPv6 Address: The source IP address of the target IPv6\n   LDP\
    \ session. 16 octets.\n   Remote PE IPv6 Address: The destination IP address of\
    \ the target IPv6\n   LDP session. 16 octets.\n   PW ID: Same as FEC 128 Pseudowire\
    \ IPv4 in Section 3.2.9.\n   PW Type: Same as FEC 128 Pseudowire IPv4 in Section\
    \ 3.2.9.\n"
- title: 3.2.12.  FEC 129 Pseudowire - IPv6
  contents:
  - "3.2.12.  FEC 129 Pseudowire - IPv6\n   The FEC 129 Pseudowire IPv6 sub-TLV has\
    \ a structure consistent with\n   the FEC 129 Pseudowire IPv4 sub-TLV as described\
    \ in Section 3.2.10.\n   When a FEC 129 is encoded in a label stack, the following\
    \ format is\n   used.  The length of this TLV is 40 + AGI (Attachment Group\n\
    \   Identifier) length + SAII (Source Attachment Individual Identifier)\n   length\
    \ + TAII (Target Attachment Individual Identifier) length.\n   Padding is used\
    \ to make the total length a multiple of 4; the length\n   of the padding is not\
    \ included in the Length field.\n        0                   1               \
    \    2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       ~                   Sender's PE IPv6 Address                    ~\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   ~                    Remote PE IPv6 Address                     ~\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \            PW Type            |   AGI Type    |  AGI Length   |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       ~                           AGI Value                           ~\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |   AII Type    |  SAII Length  |      SAII Value               |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       ~\
    \                    SAII Value (continued)                     ~\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   AII Type    |  TAII Length  |      TAII Value               |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   ~                    TAII Value (continued)                     ~\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \  TAII (cont.) |  0-3 octets of zero padding                   |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Sender's PE IPv6 Address: The source IP address of the target IPv6\n   LDP\
    \ session. 16 octets.\n   Remote PE IPv6 Address: The destination IP address of\
    \ the target IPv6\n   LDP session. 16 octets.\n   The other fields are the same\
    \ as FEC 129 Pseudowire IPv4 in\n   Section 3.2.10.\n"
- title: 3.2.13.  BGP Labeled IPv4 Prefix
  contents:
  - "3.2.13.  BGP Labeled IPv4 Prefix\n   BGP labeled IPv4 prefixes are defined in\
    \ [RFC3107].  When a BGP\n   labeled IPv4 prefix is encoded in a label stack,\
    \ the following format\n   is used.  The Value field consists of the IPv4 prefix\
    \ (with trailing\n   0 bits to make 32 bits in all) and the prefix length, as\
    \ follows:\n       0                   1                   2                 \
    \  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                          IPv4 prefix                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Prefix Length |                 Must Be Zero                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.14.  BGP Labeled IPv6 Prefix
  contents:
  - "3.2.14.  BGP Labeled IPv6 Prefix\n   BGP labeled IPv6 prefixes are defined in\
    \ [RFC3107].  When a BGP\n   labeled IPv6 prefix is encoded in a label stack,\
    \ the following format\n   is used.  The value consists of 16 octets of an IPv6\
    \ prefix followed\n   by 1 octet of prefix length in bits; the format is given\
    \ below.  The\n   IPv6 prefix is in network byte order; if the prefix is shorter\
    \ than\n   128 bits, the trailing bits SHOULD be set to zero.\n       0      \
    \             1                   2                   3\n       0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          IPv6 prefix                          |\n   \
    \   |                          (16 octets)                          |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Prefix Length |         Must Be Zero                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.15.  Generic IPv4 Prefix
  contents:
  - "3.2.15.  Generic IPv4 Prefix\n   The value consists of 4 octets of an IPv4 prefix\
    \ followed by 1 octet\n   of prefix length in bits; the format is given below.\
    \  The IPv4 prefix\n   is in network byte order; if the prefix is shorter than\
    \ 32 bits, the\n   trailing bits SHOULD be set to zero.  This FEC is used if the\n\
    \   protocol advertising the label is unknown or may change during the\n   course\
    \ of the LSP.  An example is an inter-AS LSP that may be\n   signaled by LDP in\
    \ one Autonomous System (AS), by RSVP-TE [RFC3209]\n   in another AS, and by BGP\
    \ between the ASes, such as is common for\n   inter-AS VPNs.\n       0       \
    \            1                   2                   3\n       0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          IPv4 prefix                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Prefix Length |         Must Be Zero                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.16.  Generic IPv6 Prefix
  contents:
  - "3.2.16.  Generic IPv6 Prefix\n   The value consists of 16 octets of an IPv6 prefix\
    \ followed by 1 octet\n   of prefix length in bits; the format is given below.\
    \  The IPv6 prefix\n   is in network byte order; if the prefix is shorter than\
    \ 128 bits, the\n   trailing bits SHOULD be set to zero.\n       0           \
    \        1                   2                   3\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          IPv6 prefix                          |\n   \
    \   |                          (16 octets)                          |\n      |\
    \                                                               |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Prefix Length |         Must Be Zero                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.2.17.  Nil FEC
  contents:
  - "3.2.17.  Nil FEC\n   At times, labels from the reserved range, e.g., Router Alert\
    \ and\n   Explicit-null, may be added to the label stack for various diagnostic\n\
    \   purposes such as influencing load-balancing.  These labels may have\n   no\
    \ explicit FEC associated with them.  The Nil FEC Stack is defined\n   to allow\
    \ a Target FEC Stack sub-TLV to be added to the Target FEC\n   Stack to account\
    \ for such labels so that proper validation can still\n   be performed.\n   The\
    \ Length is 4.  Labels are 20-bit values treated as numbers.\n       0       \
    \            1                   2                   3\n       0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                 Label                 |          MBZ          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Label\
    \ is the actual label value inserted in the label stack; the MBZ\n   fields MUST\
    \ be zero when sent and ignored on receipt.\n"
- title: 3.3.  Downstream Mapping (Deprecated)
  contents:
  - "3.3.  Downstream Mapping (Deprecated)\n   See Appendix A.2 for more details.\n"
- title: 3.4.  Downstream Detailed Mapping TLV
  contents:
  - "3.4.  Downstream Detailed Mapping TLV\n   The Downstream Detailed Mapping object\
    \ is a TLV that MAY be included\n   in an MPLS echo request message.  Only one\
    \ Downstream Detailed\n   Mapping object may appear in an echo request.  The presence\
    \ of a\n   Downstream Detailed Mapping object is a request that Downstream\n \
    \  Detailed Mapping objects be included in the MPLS echo reply.  If the\n   replying\
    \ router is the destination (Label Edge Router) of the FEC,\n   then a Downstream\
    \ Detailed Mapping TLV SHOULD NOT be included in the\n   MPLS echo reply.  Otherwise,\
    \ the replying router SHOULD include a\n   Downstream Detailed Mapping object\
    \ for each interface over which this\n   FEC could be forwarded.  For a more precise\
    \ definition of the notion\n   of \"downstream\", see Section 3.4.2, \"Downstream\
    \ Router and\n   Interface\".\n        0                   1                 \
    \  2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |               MTU             | Address Type  |    DS Flags   |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |               Downstream Address (4 or 16 octets)             |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \         Downstream Interface Address (4 or 16 octets)         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |  Return Code  | Return Subcode|        Sub-TLV Length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   .                                                               .\n      \
    \ .                      List of Sub-TLVs                         .\n       .\
    \                                                               .\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Downstream Detailed Mapping TLV format is derived from the\n   deprecated\
    \ Downstream Mapping TLV format (see Appendix A.2.)  The key\n   change is that\
    \ variable length and optional fields have been\n   converted into sub-TLVs.\n\
    \   Maximum Transmission Unit (MTU)\n      The MTU is the size in octets of the\
    \ largest MPLS frame (including\n      label stack) that fits on the interface\
    \ to the downstream LSR.\n   Address Type\n      The Address Type indicates if\
    \ the interface is numbered or\n      unnumbered.  It also determines the length\
    \ of the Downstream IP\n      Address and Downstream Interface fields.  The Address\
    \ Type is set\n      to one of the following values:\n       Type #        Address\
    \ Type\n       ------        ------------\n            1        IPv4 Numbered\n\
    \            2        IPv4 Unnumbered\n            3        IPv6 Numbered\n  \
    \          4        IPv6 Unnumbered\n   DS Flags\n      The DS Flags field is\
    \ a bit vector of various flags with the\n      following format:\n        0 1\
    \ 2 3 4 5 6 7\n       +-+-+-+-+-+-+-+-+\n       | Rsvd(MBZ) |I|N|\n       +-+-+-+-+-+-+-+-+\n\
    \      Two flags are defined currently, I and N.  The remaining flags\n      MUST\
    \ be set to zero when sending and ignored on receipt.\n       Flag  Name and Meaning\n\
    \       ----  ----------------\n          I  Interface and Label Stack Object\
    \ Request\n             When this flag is set, it indicates that the replying\n\
    \             router SHOULD include an Interface and Label Stack\n           \
    \  Object in the echo reply message.\n          N  Treat as a Non-IP Packet\n\
    \             Echo request messages will be used to diagnose non-IP\n        \
    \     flows.  However, these messages are carried in IP\n             packets.\
    \  For a router that alters its ECMP algorithm\n             based on the FEC\
    \ or deep packet examination, this flag\n             requests that the router\
    \ treat this as it would if the\n             determination of an IP payload had\
    \ failed.\n   Downstream Address and Downstream Interface Address\n      IPv4\
    \ addresses and interface indices are encoded in 4 octets; IPv6\n      addresses\
    \ are encoded in 16 octets.\n      If the interface to the downstream LSR is numbered,\
    \ then the\n      Address Type MUST be set to IPv4 or IPv6, the Downstream Address\n\
    \      MUST be set to either the downstream LSR's Router ID or the\n      interface\
    \ address of the downstream LSR, and the Downstream\n      Interface Address MUST\
    \ be set to the downstream LSR's interface\n      address.\n      If the interface\
    \ to the downstream LSR is unnumbered, the Address\n      Type MUST be IPv4 Unnumbered\
    \ or IPv6 Unnumbered, the Downstream\n      Address MUST be the downstream LSR's\
    \ Router ID, and the Downstream\n      Interface Address MUST be set to the index\
    \ assigned by the\n      upstream LSR to the interface.\n      If an LSR does\
    \ not know the IP address of its neighbor, then it\n      MUST set the Address\
    \ Type to either IPv4 Unnumbered or IPv6\n      Unnumbered.  For IPv4, it must\
    \ set the Downstream Address to\n      127.0.0.1; for IPv6, the address is set\
    \ to 0::1.  In both cases,\n      the interface index MUST be set to 0.  If an\
    \ LSR receives an Echo\n      Request packet with either of these addresses in\
    \ the Downstream\n      Address field, this indicates that it MUST bypass interface\n\
    \      verification but continue with label validation.\n      If the originator\
    \ of an echo request packet wishes to obtain\n      Downstream Detailed Mapping\
    \ information but does not know the\n      expected label stack, then it SHOULD\
    \ set the Address Type to\n      either IPv4 Unnumbered or IPv6 Unnumbered.  For\
    \ IPv4, it MUST set\n      the Downstream Address to 224.0.0.2; for IPv6, the\
    \ address MUST be\n      set to FF02::2.  In both cases, the interface index MUST\
    \ be set to\n      0.  If an LSR receives an echo request packet with the all-routers\n\
    \      multicast address, then this indicates that it MUST bypass both\n     \
    \ interface and label stack validation but return Downstream Mapping\n      TLVs\
    \ using the information provided.\n   Return Code\n      The Return Code is set\
    \ to zero by the sender of an echo request.\n      The receiver of said echo request\
    \ can set it in the corresponding\n      echo reply that it generates to one of\
    \ the values specified in\n      Section 3.1 other than 14.\n      If the receiver\
    \ sets a non-zero value of the Return Code field in\n      the Downstream Detailed\
    \ Mapping TLV, then the receiver MUST also\n      set the Return Code field in\
    \ the echo reply header to \"See DDMAP\n      TLV for Return Code and Return Subcode\"\
    \ (Section 3.1).  An\n      exception to this is if the receiver is a bud node\
    \ [RFC4461] and\n      is replying as both an egress and a transit node with a\
    \ Return\n      Code of 3 (\"Replying router is an egress for the FEC at stack-\n\
    \      depth <RSC>\") in the echo reply header.\n      If the Return Code of the\
    \ echo reply message is not set to either\n      \"See DDMAP TLV for Return Code\
    \ and Return Subcode\" (Section 3.1)\n      or \"Replying router is an egress\
    \ for the FEC at stack-depth\n      <RSC>\", then the Return Code specified in\
    \ the Downstream Detailed\n      Mapping TLV MUST be ignored.\n   Return Subcode\n\
    \      The Return Subcode is set to zero by the sender.  The receiver can\n  \
    \    set this field to an appropriate value as specified in\n      Section 3.1:\
    \ The Return Subcode is filled in with the stack-depth\n      for those codes\
    \ that specify the stack-depth.  For all other\n      codes, the Return Subcode\
    \ MUST be set to zero.\n      If the Return Code of the echo reply message is\
    \ not set to either\n      \"See DDMAP TLV for Return Code and Return Subcode\"\
    \ (Section 3.1)\n      or \"Replying router is an egress for the FEC at stack-depth\n\
    \      <RSC>\", then the Return Subcode specified in the Downstream\n      Detailed\
    \ Mapping TLV MUST be ignored.\n   Sub-TLV Length\n      Total length in octets\
    \ of the sub-TLVs associated with this TLV.\n"
- title: 3.4.1.  Sub-TLVs
  contents:
  - "3.4.1.  Sub-TLVs\n   This section defines the sub-TLVs that MAY be included as\
    \ part of the\n   Downstream Detailed Mapping TLV.\n            Sub-Type    Value\
    \ Field\n           ---------   ------------\n             1         Multipath\
    \ data\n             2         Label stack\n             3         FEC stack change\n"
- title: 3.4.1.1.  Multipath Data Sub-TLV
  contents:
  - "3.4.1.1.  Multipath Data Sub-TLV\n       0                   1              \
    \     2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |Multipath Type |       Multipath Length        |Reserved (MBZ) |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      |   \
    \               (Multipath Information)                      |\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The multipath data sub-TLV includes Multipath Information.\n   Multipath Type\n\
    \      The type of the encoding for the Multipath Information.\n      The following\
    \ Multipath Types are defined in this document:\n      Key   Type            \
    \      Multipath Information\n      ---   ----------------      ---------------------\n\
    \       0    no multipath          Empty (Multipath Length = 0)\n       2    IP\
    \ address            IP addresses\n       4    IP address range      low/high\
    \ address pairs\n       8    Bit-masked IP         IP address prefix and bit mask\n\
    \              address set\n       9    Bit-masked label set  Label prefix and\
    \ bit mask\n      Type 0 indicates that all packets will be forwarded out this\
    \ one\n      interface.\n      Types 2, 4, 8, and 9 specify that the supplied\
    \ Multipath\n      Information will serve to exercise this path.\n   Multipath\
    \ Length\n      The length in octets of the Multipath Information.\n   MBZ\n \
    \     MUST be set to zero when sending; MUST be ignored on receipt.\n   Multipath\
    \ Information\n      Encoded multipath data (e.g., encoded address or label values),\n\
    \      according to the Multipath Type.  See Section 3.4.1.1.1 for\n      encoding\
    \ details.\n"
- title: 3.4.1.1.1.  Multipath Information Encoding
  contents:
  - "3.4.1.1.1.  Multipath Information Encoding\n   The Multipath Information encodes\
    \ labels or addresses that will\n   exercise this path.  The Multipath Information\
    \ depends on the\n   Multipath Type.  The contents of the field are shown in the\
    \ table\n   above.  IPv4 addresses are drawn from the range 127/8; IPv6 addresses\n\
    \   are drawn from the range 0:0:0:0:0:FFFF:7F00:0/104.  Labels are\n   treated\
    \ as numbers, i.e., they are right justified in the field.  For\n   Type 4, ranges\
    \ indicated by address pairs MUST NOT overlap and MUST\n   be in ascending sequence.\n\
    \   Type 8 allows a more dense encoding of IP addresses.  The IP prefix\n   is\
    \ formatted as a base IP address with the non-prefix low-order bits\n   set to\
    \ zero.  The maximum prefix length is 27.  Following the prefix\n   is a mask\
    \ of length 2^(32 - prefix length) bits for IPv4 and\n   2^(128 - prefix length)\
    \ bits for IPv6.  Each bit set to 1 represents\n   a valid address.  The address\
    \ is the base IPv4 address plus the\n   position of the bit in the mask where\
    \ the bits are numbered left to\n   right beginning with zero.  For example, the\
    \ IPv4 addresses\n   127.2.1.0, 127.2.1.5-127.2.1.15, and 127.2.1.20-127.2.1.29\
    \ would be\n   encoded as follows:\n    0                   1                \
    \   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Those same addresses embedded in IPv6 would be encoded as follows:\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 1 1 1 1 1 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type 9 allows a more dense encoding of labels.  The label prefix is\n   formatted\
    \ as a base label value with the non-prefix low-order bits\n   set to zero.  The\
    \ maximum prefix (including leading zeros due to\n   encoding) length is 27. \
    \ Following the prefix is a mask of length\n   2^(32 - prefix length) bits.  Each\
    \ bit set to one represents a valid\n   label.  The label is the base label plus\
    \ the position of the bit in\n   the mask where the bits are numbered left to\
    \ right beginning with\n   zero.  Label values of all the odd numbers between\
    \ 1152 and 1279\n   would be encoded as follows:\n    0                   1  \
    \                 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   If the received Multipath Information is non-null, the labels and IP\n   addresses\
    \ MUST be picked from the set provided.  If none of these\n   labels or addresses\
    \ map to a particular downstream interface, then\n   for that interface, the type\
    \ MUST be set to 0.  If the received\n   Multipath Information is null (i.e.,\
    \ Multipath Length = 0, or for\n   Types 8 and 9, a mask of all zeros), the type\
    \ MUST be set to 0.\n   For example, suppose LSR X at hop 10 has two downstream\
    \ LSRs, Y and\n   Z, for the FEC in question.  The received X could return Multipath\n\
    \   Type 4, with low/high IP addresses of 127.1.1.1->127.1.1.255 for\n   downstream\
    \ LSR Y and 127.2.1.1->127.2.1.255 for downstream LSR Z.\n   The head end reflects\
    \ this information to LSR Y.  Y, which has three\n   downstream LSRs, U, V, and\
    \ W, computes that 127.1.1.1->127.1.1.127\n   would go to U and 127.1.1.128->\
    \ 127.1.1.255 would go to V.  Y would\n   then respond with 3 Downstream Detailed\
    \ Mapping TLVs: to U, with\n   Multipath Type 4 (127.1.1.1->127.1.1.127); to V,\
    \ with Multipath Type\n   4 (127.1.1.127->127.1.1.255); and to W, with Multipath\
    \ Type 0.\n   Note that computing Multipath Information may impose a significant\n\
    \   processing burden on the receiver.  A receiver MAY thus choose to\n   process\
    \ a subset of the received prefixes.  The sender, on receiving\n   a reply to\
    \ a Downstream Detailed Mapping with partial information,\n   SHOULD assume that\
    \ the prefixes missing in the reply were skipped by\n   the receiver and MAY re-request\
    \ information about them in a new echo\n   request.\n   The encoding of Multipath\
    \ Information in scenarios where a few LSRs\n   apply Entropy-label-based load-balancing\
    \ while other LSRs are non-EL\n   (IP-based) load balanced will be defined in\
    \ a different document.\n   The encoding of Multipath Information in scenarios\
    \ where LSRs have\n   Layer 2 ECMP over Link Aggregation Group (LAG) interfaces\
    \ will be\n   defined in a different document.\n"
- title: 3.4.1.2.  Label Stack Sub-TLV
  contents:
  - "3.4.1.2.  Label Stack Sub-TLV\n       0                   1                 \
    \  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               Downstream Label                |    Protocol   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \                                                            .\n      .      \
    \                                                         .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               Downstream Label                |    Protocol   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The\
    \ Label Stack sub-TLV contains the set of labels in the label stack\n   as it\
    \ would have appeared if this router were forwarding the packet\n   through this\
    \ interface.  Any Implicit Null labels are explicitly\n   included.  The number\
    \ of label/protocol pairs present in the sub-TLV\n   is determined based on the\
    \ sub-TLV data length.  When the Downstream\n   Detailed Mapping TLV is sent in\
    \ the echo reply, this sub-TLV MUST be\n   included.\n   Downstream Label\n  \
    \    A downstream label is 24 bits, in the same format as an MPLS label\n    \
    \  minus the TTL field, i.e., the MSBit of the label is bit 0, the\n      LSBit\
    \ is bit 19, the TC field [RFC5462] is bits 20-22, and S is\n      bit 23.  The\
    \ replying router SHOULD fill in the TC field and S\n      bit; the LSR receiving\
    \ the echo reply MAY choose to ignore these.\n   Protocol\n      This specifies\
    \ the label distribution protocol for the Downstream\n      label.  Protocol values\
    \ are taken from the following table:\n      Protocol #        Signaling Protocol\n\
    \      ----------        ------------------\n               0        Unknown\n\
    \               1        Static\n               2        BGP\n               3\
    \        LDP\n               4        RSVP-TE\n"
- title: 3.4.1.3.  FEC Stack Change Sub-TLV
  contents:
  - "3.4.1.3.  FEC Stack Change Sub-TLV\n   A router MUST include the FEC stack change\
    \ sub-TLV when the\n   downstream node in the echo reply has a different FEC Stack\
    \ than the\n   FEC Stack received in the echo request.  One or more FEC stack\
    \ change\n   sub-TLVs MAY be present in the Downstream Detailed Mapping TLV. \
    \ The\n   format is as below.\n    0                   1                   2 \
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Operation Type | Address Type  | FEC-tlv length|  Reserved     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Remote Peer Address (0, 4, or 16 octets)            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   .                                                               .\n   .  \
    \                       FEC TLV                               .\n   .        \
    \                                                       .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Operation Type\n      The operation type specifies the action associated with\
    \ the FEC\n      stack change.  The following operation types are defined:\n \
    \           Type #     Operation\n            ------     ---------\n         \
    \   1          Push\n            2          Pop\n   Address Type\n      The Address\
    \ Type indicates the remote peer's address type.  The\n      Address Type is set\
    \ to one of the following values.  The length of\n      the peer address is determined\
    \ based on the address type.  The\n      address type MAY be different from the\
    \ address type included in\n      the Downstream Detailed Mapping TLV.  This can\
    \ happen when the LSP\n      goes over a tunnel of a different address family.\
    \  The address\n      type MAY be set to Unspecified if the peer address is either\n\
    \      unavailable or the transit router does not wish to provide it for\n   \
    \   security or administrative reasons.\n           Type #   Address Type   Address\
    \ length\n           ------   ------------   --------------\n           0    \
    \    Unspecified    0\n           1        IPv4           4\n           2    \
    \    IPv6           16\n   FEC TLV Length\n      Length in octets of the FEC TLV.\n\
    \   Reserved\n      This field is reserved for future use and MUST be set to zero.\n\
    \   Remote Peer Address\n      The remote peer address specifies the remote peer\
    \ that is the next\n      hop for the FEC being currently traced.  If the operation\
    \ type is\n      PUSH, the remote peer address is the address of the peer from\n\
    \      which the FEC being pushed was learned.  If the operation type is\n   \
    \   pop, the remote peer address MAY be set to Unspecified.\n      For upstream-assigned\
    \ labels [RFC5331], an operation type of pop\n      will have a remote peer address\
    \ (the upstream node that assigned\n      the label), and this SHOULD be included\
    \ in the FEC stack change\n      sub-TLV.  The remote peer address MAY be set\
    \ to Unspecified if the\n      address needs to be hidden.\n   FEC TLV\n     \
    \ The FEC TLV is present only when the FEC-tlv length field is non-\n      zero.\
    \  The FEC TLV specifies the FEC associated with the FEC stack\n      change operation.\
    \  This TLV MAY be included when the operation\n      type is pop.  It MUST be\
    \ included when the operation type is PUSH.\n      The FEC TLV contains exactly\
    \ one FEC from the list of FECs\n      specified in Section 3.2.  A Nil FEC MAY\
    \ be associated with a PUSH\n      operation if the responding router wishes to\
    \ hide the details of\n      the FEC being pushed.\n   FEC stack change sub-TLV\
    \ operation rules are as follows:\n   a.  A FEC stack change sub-TLV containing\
    \ a PUSH operation MUST NOT\n       be followed by a FEC stack change sub-TLV\
    \ containing a pop\n       operation.\n   b.  One or more pop operations MAY be\
    \ followed by one or more PUSH\n       operations.\n   c.  One FEC stack change\
    \ sub-TLV MUST be included per FEC stack\n       change.  For example, if 2 labels\
    \ are going to be pushed, then\n       one FEC stack change sub-TLV MUST be included\
    \ for each FEC.\n   d.  A FEC splice operation (an operation where one FEC ends\
    \ and\n       another FEC starts, MUST be performed by including a pop type FEC\n\
    \       stack change sub-TLV followed by a PUSH type FEC stack change\n      \
    \ sub-TLV.\n   e.  A Downstream Detailed Mapping TLV containing only one FEC stack\n\
    \       change sub-TLV with pop operation is equivalent to IS_EGRESS\n       (Return\
    \ Code 3, Section 3.1) for the outermost FEC in the FEC\n       stack.  The ingress\
    \ router performing the LSP traceroute MUST\n       treat such a case as an IS_EGRESS\
    \ for the outermost FEC.\n"
- title: 3.4.2.  Downstream Router and Interface
  contents:
  - "3.4.2.  Downstream Router and Interface\n   The notion of \"downstream router\"\
    \ and \"downstream interface\" should\n   be explained.  Consider an LSR X.  If\
    \ a packet that was originated\n   with TTL n>1 arrived with outermost label L\
    \ and TTL=1 at LSR X, X\n   must be able to compute which LSRs could receive the\
    \ packet if it was\n   originated with TTL=n+1, over which interface the request\
    \ would\n   arrive and what label stack those LSRs would see.  (It is outside\
    \ the\n   scope of this document to specify how this computation is done.)  The\n\
    \   set of these LSRs/interfaces consists of the downstream routers/\n   interfaces\
    \ (and their corresponding labels) for X with respect to L.\n   Each pair of downstream\
    \ router and interface requires a separate\n   Downstream Detailed Mapping to\
    \ be added to the reply.\n   The case where X is the LSR originating the echo\
    \ request is a special\n   case.  X needs to figure out what LSRs would receive\
    \ the MPLS echo\n   request for a given FEC Stack that X originates with TTL=1.\n\
    \   The set of downstream routers at X may be alternative paths (see the\n   discussion\
    \ below on ECMP) or simultaneous paths (e.g., for MPLS\n   multicast).  In the\
    \ former case, the Multipath Information is used as\n   a hint to the sender as\
    \ to how it may influence the choice of these\n   alternatives.\n"
- title: 3.5.  Pad TLV
  contents:
  - "3.5.  Pad TLV\n   The value part of the Pad TLV contains a variable number (>=\
    \ 1) of\n   octets.  The first octet takes values from the following table; all\n\
    \   the other octets (if any) are ignored.  The receiver SHOULD verify\n   that\
    \ the TLV is received in its entirety, but otherwise ignores the\n   contents\
    \ of this TLV, apart from the first octet.\n      Value        Meaning\n     \
    \ -----        -------\n          0        Reserved\n          1        Drop Pad\
    \ TLV from reply\n          2        Copy Pad TLV to reply\n      3-250      \
    \  Unassigned\n    251-254        Reserved for Experimental Use\n        255 \
    \       Reserved\n   The Pad TLV can be added to an echo request to create a message\
    \ of a\n   specific length in cases where messages of various sizes are needed\n\
    \   for troubleshooting.  The first octet allows for controlling the\n   inclusion\
    \ of this additional padding in the respective echo reply.\n"
- title: 3.6.  Vendor Enterprise Number
  contents:
  - "3.6.  Vendor Enterprise Number\n   \"Private Enterprise Numbers\" [IANA-ENT]\
    \ are maintained by IANA.  The\n   Length of this TLV is always 4; the value is\
    \ the Structure of\n   Management Information (SMI) Private Enterprise Code, in\
    \ network\n   octet order, of the vendor with a Vendor Private extension to any\
    \ of\n   the fields in the fixed part of the message, in which case this TLV\n\
    \   MUST be present.  If none of the fields in the fixed part of the\n   message\
    \ have Vendor Private extensions, inclusion of this TLV is\n   OPTIONAL.  Vendor\
    \ Private ranges for Message Types, Reply Modes, and\n   Return Codes have been\
    \ defined.  When any of these are used, the\n   Vendor Enterprise Number TLV MUST\
    \ be included in the message.\n"
- title: 3.7.  Interface and Label Stack
  contents:
  - "3.7.  Interface and Label Stack\n   The Interface and Label Stack TLV MAY be\
    \ included in a reply message\n   to report the interface on which the request\
    \ message was received and\n   the label stack that was on the packet when it\
    \ was received.  Only\n   one such object may appear.  The purpose of the object\
    \ is to allow\n   the upstream router to obtain the exact interface and label\
    \ stack\n   information as it appears at the replying LSR.\n   The Length is K\
    \ + 4*N octets; N is the number of labels in the label\n   stack.  Values for\
    \ K are found in the description of Address Type\n   below.  The Value field of\
    \ this TLV has the following format:\n       0                   1           \
    \        2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Address Type  |             Must Be Zero                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                   IP Address (4 or 16 octets)                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                   Interface (4 or 16 octets)                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \                                                            .\n      .      \
    \                    Label Stack                          .\n      .         \
    \                                                      .\n      .            \
    \                                                   .\n      .               \
    \                                                .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Address Type\n      The Address Type indicates if the interface is numbered\
    \ or\n      unnumbered.  It also determines the length of the IP Address and\n\
    \      Interface fields.  The resulting total for the initial part of the\n  \
    \    TLV is listed in the table below as \"K Octets\".  The Address Type\n   \
    \   is set to one of the following values:\n         Type #        Address Type\
    \           K Octets\n         ------        ------------           --------\n\
    \              0        Reserved                      4\n              1     \
    \   IPv4 Numbered                12\n              2        IPv4 Unnumbered  \
    \            12\n              3        IPv6 Numbered                36\n    \
    \          4        IPv6 Unnumbered              24\n          5-250        Unassigned\n\
    \        251-254        Reserved for Experimental Use\n            255       \
    \ Reserved\n   IP Address and Interface\n      IPv4 addresses and interface indices\
    \ are encoded in 4 octets; IPv6\n      addresses are encoded in 16 octets.\n \
    \     If the interface upon which the echo request message was received\n    \
    \  is numbered, then the Address Type MUST be set to IPv4 or IPv6,\n      the\
    \ IP Address MUST be set to either the LSR's Router ID or the\n      interface\
    \ address, and the Interface MUST be set to the interface\n      address.\n  \
    \    If the interface is unnumbered, the Address Type MUST be either\n      IPv4\
    \ Unnumbered or IPv6 Unnumbered, the IP Address MUST be the\n      LSR's Router\
    \ ID, and the Interface MUST be set to the index\n      assigned to the interface.\n\
    \   Label Stack\n      The label stack of the received echo request message. \
    \ If any TTL\n      values have been changed by this router, they SHOULD be restored.\n"
- title: 3.8.  Errored TLVs
  contents:
  - "3.8.  Errored TLVs\n   The following TLV is a TLV that MAY be included in an\
    \ echo reply to\n   inform the sender of an echo request of mandatory TLVs either\
    \ not\n   supported by an implementation or parsed and found to be in error.\n\
    \   The Value field contains the TLVs that were not understood, encoded\n   as\
    \ sub-TLVs.\n       0                   1                   2                \
    \   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |             Type = 9          |            Length             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                             Value                             |\n   \
    \   .                                                               .\n      .\
    \                                                               .\n      .   \
    \                                                            .\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.9.  Reply TOS Octet TLV
  contents:
  - "3.9.  Reply TOS Octet TLV\n   This TLV MAY be used by the originator of the echo\
    \ request to request\n   that an echo reply be sent with the IP header Type of\
    \ Service (TOS)\n   octet set to the value specified in the TLV.  This TLV has\
    \ a length\n   of 4 with the following Value field.\n       0                \
    \   1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Reply-TOS Byte|                 Must Be Zero                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 4.  Theory of Operation
  contents:
  - "4.  Theory of Operation\n   An MPLS echo request is used to test a particular\
    \ LSP.  The LSP to be\n   tested is identified by the \"FEC Stack\"; for example,\
    \ if the LSP was\n   set up via LDP, and a label is mapped to an egress IP address\
    \ of\n   198.51.100.1, the FEC Stack contains a single element, namely, an LDP\n\
    \   IPv4 prefix sub-TLV with value 198.51.100.1/32.  If the LSP being\n   tested\
    \ is an RSVP LSP, the FEC Stack consists of a single element\n   that captures\
    \ the RSVP Session and Sender Template that uniquely\n   identifies the LSP.\n\
    \   FEC Stacks can be more complex.  For example, one may wish to test a\n   VPN\
    \ IPv4 prefix of 203.0.113.0/24 that is tunneled over an LDP LSP\n   with egress\
    \ 192.0.2.1.  The FEC Stack would then contain two\n   sub-TLVs, the bottom being\
    \ a VPN IPv4 prefix, and the top being an\n   LDP IPv4 prefix.  If the underlying\
    \ (LDP) tunnel were not known, or\n   was considered irrelevant, the FEC Stack\
    \ could be a single element\n   with just the VPN IPv4 sub-TLV.\n   When an MPLS\
    \ echo request is received, the receiver is expected to\n   verify that the control\
    \ plane and data plane are both healthy (for\n   the FEC Stack being pinged),\
    \ and that the two planes are in sync.\n   The procedures for this are in Section\
    \ 4.4.\n"
- title: 4.1.  Dealing with Equal-Cost Multipath (ECMP)
  contents:
  - "4.1.  Dealing with Equal-Cost Multipath (ECMP)\n   LSPs need not be simple point-to-point\
    \ tunnels.  Frequently, a single\n   LSP may originate at several ingresses and\
    \ terminate at several\n   egresses; this is very common with LDP LSPs.  LSPs\
    \ for a given FEC\n   may also have multiple \"next hops\" at transit LSRs.  At\
    \ an ingress,\n   there may also be several different LSPs to choose from to get\
    \ to the\n   desired endpoint.  Finally, LSPs may have backup paths, detour paths,\n\
    \   and other alternative paths to take should the primary LSP go down.\n   Regarding\
    \ the last two points stated above: it is assumed that the\n   LSR sourcing MPLS\
    \ echo requests can force the echo request into any\n   desired LSP, so choosing\
    \ among multiple LSPs at the ingress is not an\n   issue.  The problem of probing\
    \ the various flavors of backup paths\n   that will typically not be used for\
    \ forwarding data unless the\n   primary LSP is down will not be addressed here.\n\
    \   Since the actual LSP and path that a given packet may take may not be\n  \
    \ known a priori, it is useful if MPLS echo requests can exercise all\n   possible\
    \ paths.  This, although desirable, may not be practical\n   because the algorithms\
    \ that a given LSR uses to distribute packets\n   over alternative paths may be\
    \ proprietary.\n   To achieve some degree of coverage of alternate paths, there\
    \ is a\n   certain latitude in choosing the destination IP address and source\n\
    \   UDP port for an MPLS echo request.  This is clearly not sufficient;\n   in\
    \ the case of traceroute, more latitude is offered by means of the\n   Multipath\
    \ Information of the Downstream Detailed Mapping TLV.  This\n   is used as follows.\
    \  An ingress LSR periodically sends an LSP\n   traceroute message to determine\
    \ whether there are multipaths for a\n   given LSP.  If so, each hop will provide\
    \ some information as to how\n   each of its downstream paths can be exercised.\
    \  The ingress can then\n   send MPLS echo requests that exercise these paths.\
    \  If several\n   transit LSRs have ECMP, the ingress may attempt to compose these\
    \ to\n   exercise all possible paths.  However, full coverage may not be\n   possible.\n"
- title: 4.2.  Testing LSPs That Are Used to Carry MPLS Payloads
  contents:
  - "4.2.  Testing LSPs That Are Used to Carry MPLS Payloads\n   To detect certain\
    \ LSP breakages, it may be necessary to encapsulate\n   an MPLS echo request packet\
    \ with at least one additional label when\n   testing LSPs that are used to carry\
    \ MPLS payloads (such as LSPs used\n   to carry L2VPN and L3VPN traffic.  For\
    \ example, when testing LDP or\n   RSVP-TE LSPs, just sending an MPLS echo request\
    \ packet may not detect\n   instances where the router immediately upstream of\
    \ the destination of\n   the LSP ping may forward the MPLS echo request successfully\
    \ over an\n   interface not configured to carry MPLS payloads because of the use\
    \ of\n   penultimate hop popping.  Since the receiving router has no means to\n\
    \   ascertain whether the IP packet was sent unlabeled or implicitly\n   labeled,\
    \ the addition of labels shimmed above the MPLS echo request\n   (using the Nil\
    \ FEC) will prevent a router from forwarding such a\n   packet out to unlabeled\
    \ interfaces.\n"
- title: 4.3.  Sending an MPLS Echo Request
  contents:
  - "4.3.  Sending an MPLS Echo Request\n   An MPLS echo request is a UDP packet.\
    \  The IP header is set as\n   follows: the source IP address is a routable address\
    \ of the sender;\n   the destination IP address is a (randomly chosen) IPv4 address\
    \ from\n   the range 127/8 or an IPv6 address from the range\n   0:0:0:0:0:FFFF:7F00:0/104.\
    \  The IP TTL is set to 1.  The source UDP\n   port is chosen by the sender; the\
    \ destination UDP port is set to 3503\n   (assigned by IANA for MPLS echo requests).\
    \  The Router Alert IP\n   Option of value 0x0 [RFC2113] for IPv4 or value 69\
    \ [RFC7506] for IPv6\n   MUST be set in the IP header.\n   An MPLS echo request\
    \ is sent with a label stack corresponding to the\n   FEC Stack being tested.\
    \  Note that further labels could be applied\n   if, for example, the normal route\
    \ to the topmost FEC in the stack is\n   via a Traffic Engineered Tunnel [RFC3209].\
    \  If all of the FECs in the\n   stack correspond to Implicit Null labels, the\
    \ MPLS echo request is\n   considered unlabeled even if further labels will be\
    \ applied in\n   sending the packet.\n   If the echo request is labeled, one MAY\
    \ (depending on what is being\n   pinged) set the TTL of the innermost label to\
    \ 1, to prevent the ping\n   request going farther than it should.  Examples of\
    \ where this SHOULD\n   be done include pinging a VPN IPv4 or IPv6 prefix, an\
    \ L2 VPN\n   endpoint, or a pseudowire.  Preventing the ping request from going\n\
    \   too far can also be accomplished by inserting a Router Alert label\n   above\
    \ this label; however, this may lead to the undesired side effect\n   that MPLS\
    \ echo requests take a different data path than actual data.\n   For more information\
    \ on how these mechanisms can be used for\n   pseudowire connectivity verification,\
    \ see [RFC5085][RFC5885].\n   In \"ping\" mode (end-to-end connectivity check),\
    \ the TTL in the\n   outermost label is set to 255.  In \"traceroute\" mode (fault\
    \ isolation\n   mode), the TTL is set successively to 1, 2, and so on.\n   The\
    \ sender chooses a Sender's Handle and a Sequence Number.  When\n   sending subsequent\
    \ MPLS echo requests, the sender SHOULD increment\n   the Sequence Number by 1.\
    \  However, a sender MAY choose to send a\n   group of echo requests with the\
    \ same Sequence Number to improve the\n   chance of arrival of at least one packet\
    \ with that Sequence Number.\n   The TimeStamp Sent is set to the time of day\
    \ in NTP format that the\n   echo request is sent.  The TimeStamp Received is\
    \ set to zero.\n   An MPLS echo request MUST have a FEC Stack TLV.  Also, the\
    \ Reply Mode\n   must be set to the desired Reply Mode; the Return Code and Subcode\n\
    \   are set to zero.  In the \"traceroute\" mode, the echo request SHOULD\n  \
    \ include a Downstream Detailed Mapping TLV.\n"
- title: 4.4.  Receiving an MPLS Echo Request
  contents:
  - "4.4.  Receiving an MPLS Echo Request\n   Sending an MPLS echo request to the\
    \ control plane is triggered by one\n   of the following packet processing exceptions:\
    \ Router Alert option,\n   IP TTL expiration, MPLS TTL expiration, MPLS Router\
    \ Alert label, or\n   the destination address in the 127/8 address range.  The\
    \ control\n   plane further identifies it by UDP destination port 3503.\n   For\
    \ reporting purposes, the bottom of the stack is considered to be a\n   stack-depth\
    \ of 1.  This is to establish an absolute reference for the\n   case where the\
    \ actual stack may have more labels than there are FECs\n   in the Target FEC\
    \ Stack.\n   Furthermore, in all the Return Codes listed in this document, a\n\
    \   stack-depth of 0 means \"no value specified\".  This allows\n   compatibility\
    \ with existing implementations that do not use the\n   Return Subcode field.\n\
    \   An LSR X that receives an MPLS echo request then processes it as\n   follows.\n\
    \   1.  General packet sanity is verified.  If the packet is not well-\n     \
    \  formed, LSR X SHOULD send an MPLS echo reply with the Return Code\n       set\
    \ to \"Malformed echo request received\" and the Subcode set to\n       zero.\
    \  If there are any TLVs not marked as \"Ignore\" (i.e., if the\n       TLV type\
    \ is less than 32768, see Section 3) that LSR X does not\n       understand, LSR\
    \ X SHOULD send an MPLS \"TLV not understood\" (as\n       appropriate), and set\
    \ the Subcode to zero.  In the latter case,\n       the misunderstood TLVs (only)\
    \ are included as sub-TLVs in an\n       Errored TLVs TLV in the reply.  The header\
    \ field's Sender's\n       Handle, Sequence Number, and Timestamp Sent are not\
    \ examined but\n       are included in the MPLS echo reply message.\n   The algorithm\
    \ uses the following variables and identifiers:\n   Interface-I:        the interface\
    \ on which the MPLS echo request was\n                       received.\n   Stack-R:\
    \            the label stack on the packet as it was received.\n   Stack-D:  \
    \          the label stack carried in the \"Label stack\n                    \
    \   sub-TLV\" in the Downstream Detailed Mapping TLV\n                       (not\
    \ always present).\n   Label-L:            the label from the actual stack currently\
    \ being\n                       examined.  Requires no initialization.\n   Label-stack-depth:\
    \  the depth of the label being verified.\n                       Initialized\
    \ to the number of labels in the\n                       received label stack\
    \ S.\n   FEC-stack-depth:    depth of the FEC in the Target FEC Stack that\n \
    \                      should be used to verify the current actual\n         \
    \              label.  Requires no initialization.\n   Best-return-code:   contains\
    \ the Return Code for the echo reply\n                       packet as currently\
    \ best known.  As the algorithm\n                       progresses, this code\
    \ may change depending on the\n                       results of further checks\
    \ that it performs.\n   Best-rtn-subcode:   similar to Best-return-code, but for\
    \ the echo\n                       reply Subcode.\n   FEC-status:         result\
    \ value returned by the FEC Checking\n                       algorithm described\
    \ in Section 4.4.1.\n   /* Save receive context information */\n   2.  If the\
    \ echo request is good, LSR X stores the interface over\n       which the echo\
    \ was received in Interface-I, and the label stack\n       with which it came\
    \ in Stack-R.\n   /* The rest of the algorithm iterates over the labels in Stack-R,\n\
    \   verifies validity of label values, reports associated label switching\n  \
    \ operations (for traceroute), verifies correspondence between the\n   Stack-R\
    \ and the Target FEC Stack description in the body of the echo\n   request, and\
    \ reports any errors. */\n   /* The algorithm iterates as follows. */\n   3. \
    \ Label Validation:\n      If Label-stack-depth is 0 {\n      /* The LSR needs\
    \ to report that it is a tail end for the LSP */\n         Set FEC-stack-depth\
    \ to 1, set Label-L to 3 (Implicit Null).\n         Set Best-return-code to 3\
    \ (\"Replying router is an egress for\n         the FEC at stack-depth\"), set\
    \ Best-rtn-subcode to the value of\n         FEC-stack-depth (1), and go to step\
    \ 5 (Egress Processing).\n      }\n      /* This step assumes there is always\
    \ an entry for well-known label\n      values */\n      Set Label-L to the value\
    \ extracted from Stack-R at depth\n      Label-stack-depth.  Look up Label-L in\
    \ the Incoming Label Map\n      (ILM) to determine if the label has been allocated\
    \ and an\n      operation is associated with it.\n      If there is no entry for\
    \ Label-L {\n      /* Indicates a temporary or permanent label synchronization\n\
    \      problem, and the LSR needs to report an error */\n         Set Best-return-code\
    \ to 11 (\"No label entry at stack-depth\")\n         and Best-rtn-subcode to\
    \ Label-stack-depth.  Go to step 7 (Send\n         Reply Packet).\n      }\n \
    \     Else {\n         Retrieve the associated label operation from the corresponding\n\
    \         Next Hop Label Forwarding Entry (NHLFE), and proceed to step 4\n   \
    \      (Label Operation Check).\n      }\n   4.  Label Operation Check\n     \
    \ If the label operation is \"Pop and Continue Processing\" {\n      /* Includes\
    \ Explicit Null and Router Alert label cases */\n         Iterate to the next\
    \ label by decrementing Label-stack-depth,\n         and loop back to step 3 (Label\
    \ Validation).\n      }\n      If the label operation is \"Swap or Pop and Switch\
    \ based on Popped\n      Label\" {\n         Set Best-return-code to 8 (\"Label\
    \ switched at stack-depth\") and\n         Best-rtn-subcode to Label-stack-depth\
    \ to report transit\n         switching.\n         If a Downstream Detailed Mapping\
    \ TLV is present in the received\n         echo request {\n            If the\
    \ IP address in the TLV is 127.0.0.1 or 0::1 {\n               Set Best-return-code\
    \ to 6 (\"Upstream Interface Index\n               Unknown\").  An Interface and\
    \ Label Stack TLV SHOULD be\n               included in the reply and filled with\
    \ Interface-I and\n               Stack-R.\n            }\n            Else {\n\
    \               Verify that the IP address, interface address, and label\n   \
    \            stack in the Downstream Detailed Mapping TLV match\n            \
    \   Interface-I and Stack-R.  If there is a mismatch, set\n               Best-return-code\
    \ to 5, \"Downstream Mapping Mismatch\".  An\n               Interface and Label\
    \ Stack TLV SHOULD be included in the\n               reply and filled in based\
    \ on Interface-I and Stack-R.  Go\n               to step 7 (Send Reply Packet).\n\
    \            }\n         }\n         For each available downstream ECMP path {\n\
    \            Retrieve output interface from the NHLFE entry.\n            /* Note:\
    \ this Return Code is set even if Label-stack-depth\n            is one */\n \
    \           If the output interface is not MPLS enabled {\n               Set\
    \ Best-return-code to Return Code 9, \"Label switched\n               but no MPLS\
    \ forwarding at stack-depth\" and set\n               Best-rtn-subcode to Label-stack-depth\
    \ and go to step 7\n               (Send Reply Packet).\n            }\n     \
    \       If a Downstream Detailed Mapping TLV is present {\n               A Downstream\
    \ Detailed Mapping TLV SHOULD be included in\n               the echo reply (see\
    \ Section 3.4) filled in with\n               information about the current ECMP\
    \ path.\n            }\n         }\n         If no Downstream Detailed Mapping\
    \ TLV is present, or the\n         Downstream IP Address is set to the ALLROUTERS\
    \ multicast\n         address, go to step 7 (Send Reply Packet).\n         If\
    \ the \"Validate FEC Stack\" flag is not set and the LSR is not\n         configured\
    \ to perform FEC checking by default, go to step 7\n         (Send Reply Packet).\n\
    \         /* Validate the Target FEC Stack in the received echo request.\n   \
    \      First determine FEC-stack-depth from the Downstream Detailed\n        \
    \ Mapping TLV.  This is done by walking through Stack-D (the\n         Downstream\
    \ labels) from the bottom, decrementing the number of\n         labels for each\
    \ non-Implicit Null label, while incrementing\n         FEC-stack-depth for each\
    \ label.  If the Downstream Detailed\n         Mapping TLV contains one or more\
    \ Implicit Null labels,\n         FEC-stack-depth may be greater than Label-stack-depth.\
    \  To be\n         consistent with the above stack-depths, the bottom is\n   \
    \      considered to be entry 1.\n         */\n         Set FEC-stack-depth to\
    \ 0.  Set i to Label-stack-depth.\n         While (i > 0) do {\n             ++FEC-stack-depth.\n\
    \             if Stack-D [ FEC-stack-depth ] != 3 (Implicit Null)\n          \
    \   --i.\n         }\n         If the number of FECs in the FEC stack is greater\
    \ than or equal\n         to FEC-stack-depth {\n         Perform the FEC Checking\
    \ procedure (see Section 4.4.1).\n            If FEC-status is 2, set Best-return-code\
    \ to 10 (\"Mapping for\n            this FEC is not the given label at stack-depth\"\
    ).\n            If the Return Code is 1, set Best-return-code to\n           \
    \ FEC-return-code and Best-rtn-subcode to FEC-stack-depth.\n         }\n     \
    \    Go to step 7 (Send Reply Packet).\n      }\n   5.  Egress Processing:\n \
    \     /* These steps are performed by the LSR that identified itself as\n    \
    \  the tail-end LSR for an LSP. */\n      If the received echo request contains\
    \ no Downstream Detailed\n      Mapping TLV, or the Downstream IP Address is set\
    \ to 127.0.0.1 or\n      0::1, go to step 6 (Egress FEC Validation).\n      Verify\
    \ that the IP address, interface address, and label stack in\n      the Downstream\
    \ Detailed Mapping TLV match Interface-I and Stack-R.\n      If not, set Best-return-code\
    \ to 5, \"Downstream Mapping Mismatch\".\n      A Received Interface and Label\
    \ Stack TLV SHOULD be created for the\n      echo response packet.  Go to step\
    \ 7 (Send Reply Packet).\n   6.  Egress FEC Validation:\n      /* This is a loop\
    \ for all entries in the Target FEC Stack starting\n      with FEC-stack-depth.\
    \ */\n      Perform FEC checking by following the algorithm described in\n   \
    \   Section 4.4.1 for Label-L and the FEC at FEC-stack-depth.\n      Set Best-return-code\
    \ to FEC-code and Best-rtn-subcode to the value\n      in FEC-stack-depth.\n \
    \     If FEC-status (the result of the check) is 1,\n      go to step 7 (Send\
    \ Reply Packet).\n      /* Iterate to the next FEC entry */\n      ++FEC-stack-depth.\n\
    \      If FEC-stack-depth > the number of FECs in the FEC-stack,\n      go to\
    \ step 7 (Send Reply Packet).\n      If FEC-status is 0 {\n         ++Label-stack-depth.\n\
    \         If Label-stack-depth > the number of labels in Stack-R,\n         go\
    \ to step 7 (Send Reply Packet).\n         Label-L = extracted label from Stack-R\
    \ at depth\n         Label-stack-depth.\n         Loop back to step 6 (Egress\
    \ FEC Validation).\n      }\n   7.  Send Reply Packet:\n      Send an MPLS echo\
    \ reply with a Return Code of Best-return-code and\n      a Return Subcode of\
    \ Best-rtn-subcode.  Include any TLVs created\n      during the above process.\
    \  The procedures for sending the echo\n      reply are found in Section 4.5.\n"
- title: 4.4.1.  FEC Validation
  contents:
  - "4.4.1.  FEC Validation\n   /* This section describes validation of a FEC entry\
    \ within the Target\n   FEC Stack and accepts a FEC, Label-L, and Interface-I.\n\
    \   If the outermost FEC of the Target FEC stack is the Nil FEC, then the\n  \
    \ node MUST skip the Target FEC validation completely.  This is to\n   support\
    \ FEC hiding, in which the outer hidden FEC can be the Nil FEC.\n   Else, the\
    \ algorithm performs the following steps. */\n   1.  Two return values, FEC-status\
    \ and FEC-return-code, are\n       initialized to 0.\n   2.  If the FEC is the\
    \ Nil FEC {\n          If Label-L is either Explicit_Null or Router_Alert, return.\n\
    \          Else {\n             Set FEC-return-code to 10 (\"Mapping for this\
    \ FEC is not the\n             given label at stack-depth\").\n             Set\
    \ FEC-status to 1\n             Return.\n          }\n       }\n   3.  Check the\
    \ FEC label mapping that describes how traffic received\n       on the LSP is\
    \ further switched or which application it is\n       associated with.  If no\
    \ mapping exists, set FEC-return-code to\n       Return 4, \"Replying router has\
    \ no mapping for the FEC at stack-\n       depth\".  Set FEC-status to 1.  Return.\n\
    \   4.  If the label mapping for FEC is Implicit Null, set FEC-status to\n   \
    \    2 and proceed to step 5.  Otherwise, if the label mapping for FEC\n     \
    \  is Label-L, proceed to step 5.  Otherwise, set FEC-return-code to\n       10\
    \ (\"Mapping for this FEC is not the given label at stack-\n       depth\"), set\
    \ FEC-status to 1, and return.\n   5.  This is a protocol check.  Check what protocol\
    \ would be used to\n       advertise the FEC.  If it can be determined that no\
    \ protocol\n       associated with Interface-I would have advertised a FEC of\
    \ that\n       FEC-Type, set FEC-return-code to 12 (\"Protocol not associated\n\
    \       with interface at FEC stack-depth\").  Set FEC-status to 1.\n   6.  Return.\n"
- title: 4.5.  Sending an MPLS Echo Reply
  contents:
  - "4.5.  Sending an MPLS Echo Reply\n   An MPLS echo reply is a UDP packet.  It\
    \ MUST ONLY be sent in response\n   to an MPLS echo request.  The source IP address\
    \ is a routable address\n   of the replier; the source port is the well-known\
    \ UDP port for LSP\n   ping.  The destination IP address and UDP port are copied\
    \ from the\n   source IP address and UDP port of the echo request.  The IP TTL\
    \ is\n   set to 255.  If the Reply Mode in the echo request is \"Reply via an\n\
    \   IPv4 UDP packet with Router Alert\", then the IP header MUST contain\n   the\
    \ Router Alert IP Option of value 0x0 [RFC2113] for IPv4 or 69\n   [RFC7506] for\
    \ IPv6.  If the reply is sent over an LSP, the topmost\n   label MUST in this\
    \ case be the Router Alert label (1) (see\n   [RFC3032]).\n   The format of the\
    \ echo reply is the same as the echo request.  The\n   Sender's Handle, the Sequence\
    \ Number, and TimeStamp Sent are copied\n   from the echo request; the TimeStamp\
    \ Received is set to the time of\n   day that the echo request is received (note\
    \ that this information is\n   most useful if the time-of-day clocks on the requester\
    \ and the\n   replier are synchronized).  The FEC Stack TLV from the echo request\n\
    \   MAY be copied to the reply.\n   The replier MUST fill in the Return Code and\
    \ Subcode, as determined\n   in the previous section.\n   If the echo request\
    \ contains a Pad TLV, the replier MUST interpret\n   the first octet for instructions\
    \ regarding how to reply.\n   If the replying router is the destination of the\
    \ FEC, then Downstream\n   Detailed Mapping TLVs SHOULD NOT be included in the\
    \ echo reply.\n   If the echo request contains a Downstream Detailed Mapping TLV,\
    \ and\n   the replying router is not the destination of the FEC, the replier\n\
    \   SHOULD compute its downstream routers and corresponding labels for\n   the\
    \ incoming label and add Downstream Detailed Mapping TLVs for each\n   one to\
    \ the echo reply it sends back.  A replying node should follow\n   the procedures\
    \ defined in Section 4.5.1 if there is a FEC stack\n   change due to tunneled\
    \ LSP.  If the FEC stack change is due to\n   stitched LSP, it should follow the\
    \ procedures defined in\n   Section 4.5.2.\n   If the Downstream Detailed Mapping\
    \ TLV contains Multipath Information\n   requiring more processing than the receiving\
    \ router is willing to\n   perform, the responding router MAY choose to respond\
    \ with only a\n   subset of multipaths contained in the echo request Downstream\n\
    \   Detailed Mapping.  (Note: The originator of the echo request MAY send\n  \
    \ another echo request with the Multipath Information that was not\n   included\
    \ in the reply.)\n   Except in the case of Reply Mode 4, \"Reply via application-level\n\
    \   control channel\", echo replies are always sent in the context of the\n  \
    \ IP/MPLS network.\n"
- title: 4.5.1.  Addition of a New Tunnel
  contents:
  - "4.5.1.  Addition of a New Tunnel\n   A transit node knows when the FEC being\
    \ traced is going to enter a\n   tunnel at that node.  Thus, it knows about the\
    \ new outer FEC.  All\n   transit nodes that are the origination point of a new\
    \ tunnel SHOULD\n   add the FEC stack change sub-TLV (Section 3.4.1.3) to the\
    \ Downstream\n   Detailed Mapping TLV in the echo reply.  The transit node SHOULD\
    \ add\n   one FEC stack change sub-TLV of operation type PUSH, per new tunnel\n\
    \   being originated at the transit node.\n   A transit node that sends a Downstream\
    \ FEC stack change sub-TLV in\n   the echo reply SHOULD fill the address of the\
    \ remote peer, which is\n   the peer of the current LSP being traced.  If the\
    \ transit node does\n   not know the address of the remote peer, it MUST set the\
    \ address type\n   to Unspecified.\n   The Label Stack sub-TLV MUST contain one\
    \ additional label per FEC\n   being PUSHed.  The label MUST be encoded as defined\
    \ in\n   Section 3.4.1.2.  The label value MUST be the value used to switch\n\
    \   the data traffic.  If the tunnel is a transparent pipe to the node,\n   i.e.,\
    \ the data-plane trace will not expire in the middle of the new\n   tunnel, then\
    \ a FEC stack change sub-TLV SHOULD NOT be added, and the\n   Label Stack sub-TLV\
    \ SHOULD NOT contain a label corresponding to the\n   hidden tunnel.\n   If the\
    \ transit node wishes to hide the nature of the tunnel from the\n   ingress of\
    \ the echo request, then it MAY not want to send details\n   about the new tunnel\
    \ FEC to the ingress.  In such a case, the transit\n   node SHOULD use the Nil\
    \ FEC.  The echo reply would then contain a FEC\n   stack change sub-TLV with\
    \ operation type PUSH and a Nil FEC.  The\n   value of the label in the Nil FEC\
    \ MUST be set to zero.  The remote\n   peer address type MUST be set to Unspecified.\
    \  The transit node\n   SHOULD add one FEC stack change sub-TLV of operation type\
    \ PUSH, per\n   new tunnel being originated at the transit node.  The Label Stack\n\
    \   sub-TLV MUST contain one additional label per FEC being PUSHed.  The\n   label\
    \ value MUST be the value used to switch the data traffic.\n"
- title: 4.5.2.  Transition between Tunnels
  contents:
  - "4.5.2.  Transition between Tunnels\n   A transit node stitching two LSPs SHOULD\
    \ include two FEC stack change\n   sub-TLVs.  One with a pop operation for the\
    \ old FEC (ingress) and one\n   with the PUSH operation for the new FEC (egress).\
    \  The replying node\n   SHOULD set the Return Code to \"Label switched with FEC\
    \ change\" to\n   indicate change in the FEC being traced.\n   If the replying\
    \ node wishes to perform FEC hiding, it SHOULD respond\n   back with two FEC stack\
    \ change sub-TLVs, one pop followed by one\n   PUSH.  The pop operation MAY either\
    \ exclude the FEC TLV (by setting\n   the FEC TLV length to 0) or set the FEC\
    \ TLV to contain the LDP FEC.\n   The PUSH operation SHOULD have the FEC TLV containing\
    \ the Nil FEC.\n   The Return Code SHOULD be set to \"Label switched with FEC\
    \ change\".\n   If the replying node wishes to perform FEC hiding, it MAY choose\
    \ to\n   not send any FEC stack change sub-TLVs in the echo reply if the\n   number\
    \ of labels does not change for the downstream node and the FEC\n   type also\
    \ does not change (Nil FEC).  In such case, the replying node\n   MUST NOT set\
    \ the Return Code to \"Label switched with FEC change\".\n"
- title: 4.6.  Receiving an MPLS Echo Reply
  contents:
  - "4.6.  Receiving an MPLS Echo Reply\n   An LSR X should only receive an MPLS echo\
    \ reply in response to an\n   MPLS echo request that it sent.  Thus, on receipt\
    \ of an MPLS echo\n   reply, X should parse the packet to ensure that it is well-formed,\n\
    \   then attempt to match up the echo reply with an echo request that it\n   had\
    \ previously sent, using the destination UDP port and the Sender's\n   Handle.\
    \  If no match is found, then X jettisons the echo reply;\n   otherwise, it checks\
    \ the Sequence Number to see if it matches.\n   If the echo reply contains Downstream\
    \ Detailed Mappings, and X wishes\n   to traceroute further, it SHOULD copy the\
    \ Downstream Detailed\n   Mapping(s) into its next echo request(s) (with TTL incremented\
    \ by\n   one).\n   If one or more FEC stack change sub-TLVs are received in the\
    \ MPLS\n   echo reply, the ingress node SHOULD process them and perform some\n\
    \   validation.\n   The FEC stack changes are associated with a downstream neighbor\
    \ and\n   along a particular path of the LSP.  Consequently, the ingress will\n\
    \   need to maintain a FEC stack per path being traced (in case of\n   multipath).\
    \  All changes to the FEC stack resulting from the\n   processing of a FEC stack\
    \ change sub-TLV(s) should be applied only\n   for the path along a given downstream\
    \ neighbor.  The following\n   algorithm should be followed for processing FEC\
    \ stack change\n   sub-TLVs.\n       push_seen = FALSE\n       fec_stack_depth\
    \ = current-depth-of-fec-stack-being-traced\n       saved_fec_stack = current_fec_stack\n\
    \       while (sub-tlv = get_next_sub_tlv(downstream_detailed_map_tlv))\n    \
    \       if (sub-tlv == NULL) break\n           if (sub-tlv.type == FEC-Stack-Change)\
    \ {\n               if (sub-tlv.operation == POP) {\n                   if (push_seen)\
    \ {\n                       Drop the echo reply\n                       current_fec_stack\
    \ = saved_fec_stack\n                       return\n                   }\n   \
    \                if (fec_stack_depth == 0) {\n                       Drop the\
    \ echo reply\n                       current_fec_stack = saved_fec_stack\n   \
    \                    return\n                   }\n                   Pop FEC\
    \ from FEC stack being traced\n                   fec_stack_depth--;\n       \
    \        }\n               if (sub-tlv.operation == PUSH) {\n                \
    \   push_seen = 1\n                   Push FEC on FEC stack being traced\n   \
    \                fec_stack_depth++;\n               }\n            }\n       \
    \ }\n        if (fec_stack_depth == 0) {\n            Drop the echo reply\n  \
    \          current_fec_stack = saved_fec_stack\n            return\n        }\n\
    \   The next MPLS echo request along the same path should use the\n   modified\
    \ FEC stack obtained after processing the FEC stack change\n   sub-TLVs.  A non-Nil\
    \ FEC guarantees that the next echo request along\n   the same path will have\
    \ the Downstream Detailed Mapping TLV validated\n   for IP address, interface\
    \ address, and label stack mismatches.\n   If the top of the FEC stack is a Nil\
    \ FEC and the MPLS echo reply does\n   not contain any FEC stack change sub-TLVs,\
    \ then it does not\n   necessarily mean that the LSP has not started traversing\
    \ a different\n   tunnel.  It could be that the LSP associated with the Nil FEC\n\
    \   terminated at a transit node, and at the same time, a new LSP started\n  \
    \ at the same transit node.  The Nil FEC would now be associated with\n   the\
    \ new LSP (and the ingress has no way of knowing this).  Thus, it\n   is not possible\
    \ to build an accurate hierarchical LSP topology if a\n   traceroute contains\
    \ Nil FECs.\n   A reply from a downstream node with Return Code 3, may not\n \
    \  necessarily be for the FEC being traced.  It could be for one of the\n   new\
    \ FECs that was added.  On receipt of an IS_EGRESS reply, the LSP\n   ingress\
    \ should check if the depth of Target FEC sent to the node that\n   just responded\
    \ was the same as the depth of the FEC that was being\n   traced.  If it was not,\
    \ then it should pop an entry from the Target\n   FEC stack and resend the request\
    \ with the same TTL (as previously\n   sent).  The process of popping a FEC is\
    \ to be repeated until either\n   the LSP ingress receives a non-IS_EGRESS reply\
    \ or until all the\n   additional FECs added to the FEC stack have already been\
    \ popped.\n   Using an IS_EGRESS reply, an ingress can build a map of the\n  \
    \ hierarchical LSP structure traversed by a given FEC.\n   When the MPLS echo\
    \ reply Return Code is \"Label switched with FEC\n   change\", the ingress node\
    \ SHOULD manipulate the FEC stack as per the\n   FEC stack change sub-TLVs contained\
    \ in the Downstream Detailed\n   Mapping TLV.  A transit node can use this Return\
    \ Code for stitched\n   LSPs and for hierarchical LSPs.  In case of ECMP or P2MP,\
    \ there could\n   be multiple paths and Downstream Detailed Mapping TLVs with\
    \ different\n   Return Codes (see Section 3.1, Note 2).  The ingress node should\n\
    \   build the topology based on the Return Code per ECMP path/P2MP\n   branch.\n"
- title: 4.7.  Issue with VPN IPv4 and IPv6 Prefixes
  contents:
  - "4.7.  Issue with VPN IPv4 and IPv6 Prefixes\n   Typically, an LSP ping for a\
    \ VPN IPv4 prefix or VPN IPv6 prefix is\n   sent with a label stack of depth greater\
    \ than 1, with the innermost\n   label having a TTL of 1.  This is to terminate\
    \ the ping at the egress\n   PE, before it gets sent to the customer device. \
    \ However, under\n   certain circumstances, the label stack can shrink to a single\
    \ label\n   before the ping hits the egress PE; this will result in the ping\n\
    \   terminating prematurely.  One such scenario is a multi-AS Carrier's\n   Carrier\
    \ VPN.\n   To get around this problem, one approach is for the LSR that receives\n\
    \   such a ping to realize that the ping terminated prematurely and to\n   send\
    \ back Return Code 13.  In that case, the initiating LSR can retry\n   the ping\
    \ after incrementing the TTL on the VPN label.  In this\n   fashion, the ingress\
    \ LSR will sequentially try TTL values until it\n   finds one that allows the\
    \ VPN ping to reach the egress PE.\n"
- title: 4.8.  Non-compliant Routers
  contents:
  - "4.8.  Non-compliant Routers\n   If the egress for the FEC Stack being pinged\
    \ does not support LSP\n   ping, then no reply will be sent, resulting in possible\
    \ \"false\n   negatives\".  When in \"traceroute\" mode, if a transit LSR does\
    \ not\n   support LSP ping, then no reply will be forthcoming from that LSR for\n\
    \   some TTL, say, n.  The LSR originating the echo request SHOULD try\n   sending\
    \ the echo request with TTL=n+1, n+2, ..., n+k to probe LSRs\n   further down\
    \ the path.  In such a case, the echo request for TTL > n\n   SHOULD be sent with\
    \ the Downstream Detailed Mapping TLV \"Downstream\n   IP Address\" field set\
    \ to the ALLROUTERs multicast address until a\n   reply is received with a Downstream\
    \ Detailed Mapping TLV.  The label\n   Stack TLV MAY be omitted from the Downstream\
    \ Detailed Mapping TLV.\n   Furthermore, the \"Validate FEC Stack\" flag SHOULD\
    \ NOT be set until an\n   echo reply packet with a Downstream Detailed Mapping\
    \ TLV is received.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Overall, the security needs for LSP ping are\
    \ similar to those of ICMP\n   ping.\n   There are at least three approaches to\
    \ attacking LSRs using the\n   mechanisms defined here.  One is a Denial-of-Service\
    \ (DoS) attack, by\n   sending MPLS echo requests/replies to LSRs and thereby\
    \ increasing\n   their workload.  The second is obfuscating the state of the MPLS\n\
    \   data-plane liveness by spoofing, hijacking, replaying, or otherwise\n   tampering\
    \ with MPLS echo requests and replies.  The third is an\n   unauthorized source\
    \ using an LSP ping to obtain information about the\n   network.\n   To avoid\
    \ potential DoS attacks, it is RECOMMENDED that\n   implementations regulate the\
    \ LSP ping traffic going to the control\n   plane.  A rate limiter SHOULD be applied\
    \ to the well-known UDP port\n   defined in Section 6.1.\n   Unsophisticated replay\
    \ and spoofing attacks involving faking or\n   replaying MPLS echo reply messages\
    \ are unlikely to be effective.\n   These replies would have to match the Sender's\
    \ Handle and Sequence\n   Number of an outstanding MPLS echo request message.\
    \  A non-matching\n   replay would be discarded as the sequence has moved on,\
    \ thus a spoof\n   has only a small window of opportunity.  However, to provide\
    \ a\n   stronger defense, an implementation MAY also validate the TimeStamp\n\
    \   Sent by requiring an exact match on this field.\n   To protect against unauthorized\
    \ sources using MPLS echo request\n   messages to obtain network information,\
    \ it is RECOMMENDED that\n   implementations provide a means of checking the source\
    \ addresses of\n   MPLS echo request messages against an access list before accepting\n\
    \   the message.\n   It is not clear how to prevent hijacking (non-delivery) of\
    \ echo\n   requests or replies; however, if these messages are indeed hijacked,\n\
    \   LSP ping will report that the data plane is not working as it should.\n  \
    \ It does not seem vital (at this point) to secure the data carried in\n   MPLS\
    \ echo requests and replies, although knowledge of the state of\n   the MPLS data\
    \ plane may be considered confidential by some.\n   Implementations SHOULD, however,\
    \ provide a means of filtering the\n   addresses to which echo reply messages\
    \ may be sent.\n   The value part of the Pad TLV contains a variable number of\
    \ octets.\n   With the exception of the first octet, these contents, if any, are\n\
    \   ignored on receipt, and can therefore serve as a clandestine channel.\n  \
    \ When MPLS LSP ping is used within an administrative domain, a\n   deployment\
    \ can increase security by using border filtering of\n   incoming LSP ping packets\
    \ as well as outgoing LSP ping packets.\n   Although this document makes special\
    \ use of 127/8 addresses, these\n   are used only in conjunction with the UDP\
    \ port 3503.  Furthermore,\n   these packets are only processed by routers.  All\
    \ other hosts MUST\n   treat all packets with a destination address in the range\
    \ 127/8 in\n   accordance to RFC 1122.  Any packet received by a router with a\n\
    \   destination address in the range 127/8 without a destination UDP port\n  \
    \ of 3503 MUST be treated in accordance to RFC 1812.  In particular,\n   the default\
    \ behavior is to treat packets destined to a 127/8 address\n   as \"martians\"\
    .\n   If a network operator wants to prevent tracing inside a tunnel, one\n  \
    \ can use the Pipe Model [RFC3443], i.e., hide the outer MPLS tunnel by\n   not\
    \ propagating the MPLS TTL into the outer tunnel (at the start of\n   the outer\
    \ tunnel).  By doing this, LSP traceroute packets will not\n   expire in the outer\
    \ tunnel, and the outer tunnel will not get traced.\n   If one doesn't wish to\
    \ expose the details of the new outer LSP, then\n   the Nil FEC can be used to\
    \ hide those details.  Using the Nil FEC\n   ensures that the trace progresses\
    \ without false negatives and all\n   transit nodes (of the new outer tunnel)\
    \ perform some minimal\n   validations on the received MPLS echo requests.\n"
- title: 6.  IANA Considerations
  contents:
  - '6.  IANA Considerations

    '
- title: 6.1.  TCP and UDP Port Number
  contents:
  - "6.1.  TCP and UDP Port Number\n   The TCP and UDP port number 3503 has been allocated\
    \ by IANA for LSP\n   echo requests and replies.\n"
- title: 6.2.  MPLS LSP Ping Parameters
  contents:
  - "6.2.  MPLS LSP Ping Parameters\n   IANA maintains the \"Multiprotocol Label Switching\
    \ (MPLS) Label\n   Switched Paths (LSPs) Ping Parameters\" registry at\n   [IANA-MPLS-LSP-PING].\n\
    \   The following subsections detail the name spaces managed by IANA.\n   For\
    \ some of these name spaces, the space is divided into assignment\n   ranges;\
    \ the following terms are used in describing the procedures by\n   which IANA\
    \ allocates values: \"Standards Action\" (as defined in\n   [RFC5226]), \"Specification\
    \ Required\", and \"Vendor Private Use\".\n   Values from \"Specification Required\"\
    \ ranges MUST be registered with\n   IANA.  The request MUST be made via an RFC\
    \ that describes the format\n   and procedures for using the code point; the actual\
    \ assignment is\n   made during the IANA actions for the RFC.\n   Values from\
    \ \"Vendor Private\" ranges MUST NOT be registered with IANA;\n   however, the\
    \ message MUST contain an enterprise code as registered\n   with the IANA SMI\
    \ Private Network Management Private Enterprise\n   Numbers.  For each name space\
    \ that has a Vendor Private range, it\n   must be specified where exactly the\
    \ SMI Private Enterprise Number\n   resides; see below for examples.  In this\
    \ way, several enterprises\n   (vendors) can use the same code point without fear\
    \ of collision.\n"
- title: 6.2.1.  Message Types, Reply Modes, Return Codes
  contents:
  - "6.2.1.  Message Types, Reply Modes, Return Codes\n   IANA has created and will\
    \ maintain registries for Message Types,\n   Reply Modes, and Return Codes.  Each\
    \ of these can take values in the\n   range 0-255.  Assignments in the range 0-191\
    \ are via Standards\n   Action; assignments in the range 192-251 are made via\
    \ \"Specification\n   Required\"; values in the range 252-255 are for Vendor Private\
    \ Use and\n   MUST NOT be allocated.\n   If any of these fields fall in the Vendor\
    \ Private range, a top-level\n   Vendor Enterprise Number TLV MUST be present\
    \ in the message.\n   Message Types defined in this document are the following:\n\
    \      Value    Meaning\n      -----    -------\n          1    MPLS Echo Request\n\
    \          2    MPLS Echo Reply\n   Reply Modes defined in this document are the\
    \ following:\n      Value    Meaning\n      -----    -------\n          1    Do\
    \ not reply\n          2    Reply via an IPv4/IPv6 UDP packet\n          3   \
    \ Reply via an IPv4/IPv6 UDP packet with Router Alert\n          4    Reply via\
    \ application-level control channel\n   Return Codes defined in this document\
    \ are listed in Section 3.1.\n   IANA has updated the reference for each these\
    \ values to this\n   document.\n"
- title: 6.2.2.  TLVs
  contents:
  - "6.2.2.  TLVs\n   IANA has created and maintains a registry for the Type field\
    \ of top-\n   level TLVs as well as for any associated sub-TLVs.  Note that the\n\
    \   meaning of a sub-TLV is scoped by the TLV.  The number spaces for the\n  \
    \ sub-TLVs of various TLVs are independent.\n   The valid range for TLVs and sub-TLVs\
    \ is 0-65535.  Assignments in the\n   ranges 0-16383 and 32768-49161 are made\
    \ via Standards Action as\n   defined in [RFC5226]; assignments in the ranges\
    \ 16384-31743 and\n   49162-64511 are made via \"Specification Required\"; values\
    \ in the\n   ranges 31744-32767 and 64512-65535 are for Vendor Private Use and\n\
    \   MUST NOT be allocated.\n   If a TLV or sub-TLV has a Type that falls in the\
    \ range for Vendor\n   Private Use, the Length MUST be at least 4, and the first\
    \ four octets\n   MUST be that vendor's SMI Private Enterprise Number, in network\
    \ octet\n   order.  The rest of the Value field is private to the vendor.\n  \
    \ TLVs and sub-TLVs defined in this document are the following:\n      Type  \
    \   Sub-Type        Value Field\n      ----     --------        -----------\n\
    \         1                     Target FEC Stack\n                      1    \
    \    LDP IPv4 prefix\n                      2        LDP IPv6 prefix\n       \
    \               3        RSVP IPv4 LSP\n                      4        RSVP IPv6\
    \ LSP\n                      5        Unassigned\n                      6    \
    \    VPN IPv4 prefix\n                      7        VPN IPv6 prefix\n       \
    \               8        L2 VPN endpoint\n                      9        \"FEC\
    \ 128\" Pseudowire - IPv4 (Deprecated)\n                     10        \"FEC 128\"\
    \ Pseudowire - IPv4\n                     11        \"FEC 129\" Pseudowire - \
    \ IPv4\n                     12        BGP labeled IPv4 prefix\n             \
    \        13        BGP labeled IPv6 prefix\n                     14        Generic\
    \ IPv4 prefix\n                     15        Generic IPv6 prefix\n          \
    \           16        Nil FEC\n                     24        \"FEC 128\" Pseudowire\
    \ - IPv6\n                     25        \"FEC 129\" Pseudowire - IPv6\n     \
    \    2                     Downstream Mapping (Deprecated)\n         3       \
    \              Pad\n         4                     Unassigned\n         5    \
    \                 Vendor Enterprise Number\n         6                     Unassigned\n\
    \         7                     Interface and Label Stack\n         8        \
    \             Unassigned\n         9                     Errored TLVs\n      \
    \        Any value        The TLV not understood\n        10                 \
    \    Reply TOS Byte\n        20                     Downstream Detailed Mapping\n\
    \   IANA has updated the reference for each of these values to this\n   document.\n"
- title: 6.2.3.  Global Flags
  contents:
  - "6.2.3.  Global Flags\n   IANA has created a \"Global Flags\" subregistry of the\
    \ \"Multiprotocol\n   Label Switching (MPLS) Label Switched Paths (LSPs) Ping\
    \ Parameters\"\n   registry.\n   This registry tracks the assignment of 16 flags\
    \ in the Global Flags\n   field of the MPLS LSP ping echo request message.  The\
    \ flags are\n   numbered from 0 (most significant bit, transmitted first) to 15.\n\
    \   New entries are assigned by Standards Action.\n   Initial entries in the registry\
    \ are as follows:\n      Bit number  |  Name                      | Reference\n\
    \      ------------+----------------------------+--------------\n        15  \
    \      |  V Flag                    | [RFC8029]\n        14        |  T Flag \
    \                   | [RFC6425]\n        13        |  R Flag                 \
    \   | [RFC6426]\n        12-0      |  Unassigned                | [RFC8029]\n"
- title: 6.2.4.  Downstream Detailed Mapping Address Type
  contents:
  - "6.2.4.  Downstream Detailed Mapping Address Type\n   This document extends RFC\
    \ 4379 by defining a new address type for use\n   with the Downstream Mapping\
    \ and Downstream Detailed Mapping TLVs.\n   IANA has established a registry to\
    \ assign address types for use with\n   the Downstream Mapping and Downstream\
    \ Detailed Mapping TLVs, which\n   initially allocates the following assignments:\n\
    \      Type #     Address Type      K Octets    Reference\n      ------     ------------\
    \      --------    ---------\n           1     IPv4 Numbered           16    [RFC8029]\n\
    \           2     IPv4 Unnumbered         16    [RFC8029]\n           3     IPv6\
    \ Numbered           40    [RFC8029]\n           4     IPv6 Unnumbered       \
    \  28    [RFC8029]\n           5     Non IP                  12    [RFC6426]\n\
    \             Downstream Detailed Mapping Address Type Registry\n   Because the\
    \ field in this case is an 8-bit field, the allocation\n   policy for this registry\
    \ is \"Standards Action\".\n"
- title: 6.2.5.  DS Flags
  contents:
  - "6.2.5.  DS Flags\n   This document defines the Downstream Mapping (DSMAP) TLV\
    \ and the\n   Downstream Detailed Mapping (DDMAP) TLV, which have Type 2 and Type\n\
    \   20, respectively, assigned from the \"TLVs\" subregistry of the\n   \"Multiprotocol\
    \ Label Switching (MPLS) Label Switched Paths (LSPs)\n   Ping Parameters\" registry.\n\
    \   DSMAP has been deprecated by DDMAP, but both TLVs share a field: DS\n   Flags.\n\
    \   IANA has created and now maintains a registry entitled \"DS Flags\".\n   The\
    \ registration policy for this registry is Standards Action\n   [RFC5226].\n \
    \  IANA has made the following assignments:\n    Bit Number Name             \
    \                            Reference\n    ---------- -------------------------------------------\
    \  ---------\n          7    N: Treat as a Non-IP Packet                  [RFC8029]\n\
    \          6    I: Interface and Label Stack Object Request  [RFC8029]\n     \
    \     5    E: ELI/EL push indicator                     [RFC8012]\n          4\
    \    L: Label-based load balance indicator        [RFC8012]\n        3-0    Unassigned\n"
- title: 6.2.6.  Multipath Types
  contents:
  - "6.2.6.  Multipath Types\n   IANA has created and now maintains a registry entitled\
    \ \"Multipath\n   Types\".\n   The registration policy [RFC5226] for this registry\
    \ is Standards\n   Action.\n   IANA has made the following assignments:\n    Value\
    \      Meaning                                  Reference\n    ---------- ----------------------------------------\
    \ ---------\n          0    no multipath                             [RFC8029]\n\
    \          1    Unassigned\n          2    IP address                        \
    \       [RFC8029]\n          3    Unassigned\n          4    IP address range\
    \                         [RFC8029]\n        5-7    Unassigned\n          8  \
    \  Bit-masked IP address set                [RFC8029]\n          9    Bit-masked\
    \ label set                     [RFC8029]\n         10    IP and label set   \
    \                      [RFC8012]\n     11-250    Unassigned\n    251-254    Reserved\
    \ for Experimental Use            [RFC8029]\n        255    Reserved         \
    \                        [RFC8029]\n"
- title: 6.2.7.  Pad Type
  contents:
  - "6.2.7.  Pad Type\n   IANA has created and now maintains a registry entitled \"\
    Pad Types\".\n   The registration policy [RFC5226] for this registry is Standards\n\
    \   Action.\n   IANA has made the following initial assignments:\n   Registry\
    \ Name: Pad Types\n    Value      Meaning                                  Reference\n\
    \    ---------- ---------------------------------------- ---------\n         \
    \ 0    Reserved                                 [RFC8029]\n          1    Drop\
    \ Pad TLV from reply                  [RFC8029]\n          2    Copy Pad TLV to\
    \ reply                    [RFC8029]\n      3-250    Unassigned\n    251-254 \
    \   Experimental Use                         [RFC8029]\n        255    Reserved\
    \                                 [RFC8029]\n"
- title: 6.2.8.  Interface and Label Stack Address Type
  contents:
  - "6.2.8.  Interface and Label Stack Address Type\n   IANA has created and now maintains\
    \ a registry entitled \"Interface and\n   Label Stack Address Types\".\n   The\
    \ registration policy [RFC5226] for this registry is Standards\n   Action.\n \
    \  IANA has made the following initial assignments:\n   Registry Name: Interface\
    \ and Label Stack Address Types\n    Value      Meaning                      \
    \            Reference\n    ---------- ----------------------------------------\
    \ ---------\n          0    Reserved                                 [RFC8029]\n\
    \          1    IPv4 Numbered                            [RFC8029]\n         \
    \ 2    IPv4 Unnumbered                          [RFC8029]\n          3    IPv6\
    \ Numbered                            [RFC8029]\n          4    IPv6 Unnumbered\
    \                          [RFC8029]\n      5-250    Unassigned\n    251-254 \
    \   Experimental Use                         [RFC8029]\n        255    Reserved\
    \                                 [RFC8029]\n"
- title: 6.3.  IPv4 Special-Purpose Address Registry
  contents:
  - "6.3.  IPv4 Special-Purpose Address Registry\n   IANA has updated the reference\
    \ in Note 1 of the \"IANA IPv4 Special-\n   Purpose Address Registry\" [IANA-SPECIAL-IPv4]\
    \ to point to this\n   document.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC1122]  Braden, R., Ed., \"Requirements for\
    \ Internet Hosts -\n              Communication Layers\", STD 3, RFC 1122,\n \
    \             DOI 10.17487/RFC1122, October 1989,\n              <http://www.rfc-editor.org/info/rfc1122>.\n\
    \   [RFC1812]  Baker, F., Ed., \"Requirements for IP Version 4 Routers\",\n  \
    \            RFC 1812, DOI 10.17487/RFC1812, June 1995,\n              <http://www.rfc-editor.org/info/rfc1812>.\n\
    \   [RFC2113]  Katz, D., \"IP Router Alert Option\", RFC 2113,\n             \
    \ DOI 10.17487/RFC2113, February 1997,\n              <http://www.rfc-editor.org/info/rfc2113>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3032]\
    \  Rosen, E., Tappan, D., Fedorkow, G., Rekhter, Y.,\n              Farinacci,\
    \ D., Li, T., and A. Conta, \"MPLS Label Stack\n              Encoding\", RFC\
    \ 3032, DOI 10.17487/RFC3032, January 2001,\n              <http://www.rfc-editor.org/info/rfc3032>.\n\
    \   [RFC4271]  Rekhter, Y., Ed., Li, T., Ed., and S. Hares, Ed., \"A\n       \
    \       Border Gateway Protocol 4 (BGP-4)\", RFC 4271,\n              DOI 10.17487/RFC4271,\
    \ January 2006,\n              <http://www.rfc-editor.org/info/rfc4271>.\n   [RFC4379]\
    \  Kompella, K. and G. Swallow, \"Detecting Multi-Protocol\n              Label\
    \ Switched (MPLS) Data Plane Failures\", RFC 4379,\n              DOI 10.17487/RFC4379,\
    \ February 2006,\n              <http://www.rfc-editor.org/info/rfc4379>.\n  \
    \ [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n     \
    \         IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n         \
    \     DOI 10.17487/RFC5226, May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n\
    \   [RFC5905]  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n      \
    \        \"Network Time Protocol Version 4: Protocol and Algorithms\n        \
    \      Specification\", RFC 5905, DOI 10.17487/RFC5905, June 2010,\n         \
    \     <http://www.rfc-editor.org/info/rfc5905>.\n   [RFC6424]  Bahadur, N., Kompella,\
    \ K., and G. Swallow, \"Mechanism for\n              Performing Label Switched\
    \ Path Ping (LSP Ping) over MPLS\n              Tunnels\", RFC 6424, DOI 10.17487/RFC6424,\
    \ November 2011,\n              <http://www.rfc-editor.org/info/rfc6424>.\n  \
    \ [RFC7506]  Raza, K., Akiya, N., and C. Pignataro, \"IPv6 Router Alert\n    \
    \          Option for MPLS Operations, Administration, and\n              Maintenance\
    \ (OAM)\", RFC 7506, DOI 10.17487/RFC7506, April\n              2015, <http://www.rfc-editor.org/info/rfc7506>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [Err108]   RFC Errata, Erratum ID 108, RFC 4379.\n\
    \   [Err742]   RFC Errata, Erratum ID 742, RFC 4379.\n   [Err1418]  RFC Errata,\
    \ Erratum ID 1418, RFC 4379.\n   [Err1714]  RFC Errata, Erratum ID 1714, RFC 4379.\n\
    \   [Err1786]  RFC Errata, Erratum ID 1786, RFC 4379.\n   [Err2978]  RFC Errata,\
    \ Erratum ID 2978, RFC 4379.\n   [Err3399]  RFC Errata, Erratum ID 3399, RFC 4379.\n\
    \   [IANA-ENT] IANA, \"PRIVATE ENTERPRISE NUMBERS\",\n              <http://www.iana.org/assignments/enterprise-numbers>.\n\
    \   [IANA-MPLS-LSP-PING]\n              IANA, \"Multiprotocol Label Switching\
    \ (MPLS) Label Switched\n              Paths (LSPs) Ping Parameters\",\n     \
    \         <http://www.iana.org/assignments/\n              mpls-lsp-ping-parameters>.\n\
    \   [IANA-SPECIAL-IPv4]\n              IANA, \"IANA IPv4 Special-Purpose Address\
    \ Registry\",\n              <http://www.iana.org/assignments/\n             \
    \ iana-ipv4-special-registry>.\n   [RFC0792]  Postel, J., \"Internet Control Message\
    \ Protocol\", STD 5,\n              RFC 792, DOI 10.17487/RFC0792, September 1981,\n\
    \              <http://www.rfc-editor.org/info/rfc792>.\n   [RFC3107]  Rekhter,\
    \ Y. and E. Rosen, \"Carrying Label Information in\n              BGP-4\", RFC\
    \ 3107, DOI 10.17487/RFC3107, May 2001,\n              <http://www.rfc-editor.org/info/rfc3107>.\n\
    \   [RFC3209]  Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan, V.,\n   \
    \           and G. Swallow, \"RSVP-TE: Extensions to RSVP for LSP\n          \
    \    Tunnels\", RFC 3209, DOI 10.17487/RFC3209, December 2001,\n             \
    \ <http://www.rfc-editor.org/info/rfc3209>.\n   [RFC3443]  Agarwal, P. and B.\
    \ Akyol, \"Time To Live (TTL) Processing\n              in Multi-Protocol Label\
    \ Switching (MPLS) Networks\",\n              RFC 3443, DOI 10.17487/RFC3443,\
    \ January 2003,\n              <http://www.rfc-editor.org/info/rfc3443>.\n   [RFC4026]\
    \  Andersson, L. and T. Madsen, \"Provider Provisioned Virtual\n             \
    \ Private Network (VPN) Terminology\", RFC 4026,\n              DOI 10.17487/RFC4026,\
    \ March 2005,\n              <http://www.rfc-editor.org/info/rfc4026>.\n   [RFC4365]\
    \  Rosen, E., \"Applicability Statement for BGP/MPLS IP\n              Virtual\
    \ Private Networks (VPNs)\", RFC 4365,\n              DOI 10.17487/RFC4365, February\
    \ 2006,\n              <http://www.rfc-editor.org/info/rfc4365>.\n   [RFC4461]\
    \  Yasukawa, S., Ed., \"Signaling Requirements for Point-to-\n              Multipoint\
    \ Traffic-Engineered MPLS Label Switched Paths\n              (LSPs)\", RFC 4461,\
    \ DOI 10.17487/RFC4461, April 2006,\n              <http://www.rfc-editor.org/info/rfc4461>.\n\
    \   [RFC4761]  Kompella, K., Ed. and Y. Rekhter, Ed., \"Virtual Private\n    \
    \          LAN Service (VPLS) Using BGP for Auto-Discovery and\n             \
    \ Signaling\", RFC 4761, DOI 10.17487/RFC4761, January 2007,\n              <http://www.rfc-editor.org/info/rfc4761>.\n\
    \   [RFC5036]  Andersson, L., Ed., Minei, I., Ed., and B. Thomas, Ed.,\n     \
    \         \"LDP Specification\", RFC 5036, DOI 10.17487/RFC5036,\n           \
    \   October 2007, <http://www.rfc-editor.org/info/rfc5036>.\n   [RFC5085]  Nadeau,\
    \ T., Ed. and C. Pignataro, Ed., \"Pseudowire Virtual\n              Circuit Connectivity\
    \ Verification (VCCV): A Control\n              Channel for Pseudowires\", RFC\
    \ 5085, DOI 10.17487/RFC5085,\n              December 2007, <http://www.rfc-editor.org/info/rfc5085>.\n\
    \   [RFC5331]  Aggarwal, R., Rekhter, Y., and E. Rosen, \"MPLS Upstream\n    \
    \          Label Assignment and Context-Specific Label Space\",\n            \
    \  RFC 5331, DOI 10.17487/RFC5331, August 2008,\n              <http://www.rfc-editor.org/info/rfc5331>.\n\
    \   [RFC5462]  Andersson, L. and R. Asati, \"Multiprotocol Label Switching\n \
    \             (MPLS) Label Stack Entry: \"EXP\" Field Renamed to \"Traffic\n \
    \             Class\" Field\", RFC 5462, DOI 10.17487/RFC5462, February\n    \
    \          2009, <http://www.rfc-editor.org/info/rfc5462>.\n   [RFC5885]  Nadeau,\
    \ T., Ed. and C. Pignataro, Ed., \"Bidirectional\n              Forwarding Detection\
    \ (BFD) for the Pseudowire Virtual\n              Circuit Connectivity Verification\
    \ (VCCV)\", RFC 5885,\n              DOI 10.17487/RFC5885, June 2010,\n      \
    \        <http://www.rfc-editor.org/info/rfc5885>.\n   [RFC6425]  Saxena, S.,\
    \ Ed., Swallow, G., Ali, Z., Farrel, A.,\n              Yasukawa, S., and T. Nadeau,\
    \ \"Detecting Data-Plane\n              Failures in Point-to-Multipoint MPLS -\
    \ Extensions to LSP\n              Ping\", RFC 6425, DOI 10.17487/RFC6425, November\
    \ 2011,\n              <http://www.rfc-editor.org/info/rfc6425>.\n   [RFC6426]\
    \  Gray, E., Bahadur, N., Boutros, S., and R. Aggarwal, \"MPLS\n             \
    \ On-Demand Connectivity Verification and Route Tracing\",\n              RFC\
    \ 6426, DOI 10.17487/RFC6426, November 2011,\n              <http://www.rfc-editor.org/info/rfc6426>.\n\
    \   [RFC6829]  Chen, M., Pan, P., Pignataro, C., and R. Asati, \"Label\n     \
    \         Switched Path (LSP) Ping for Pseudowire Forwarding\n              Equivalence\
    \ Classes (FECs) Advertised over IPv6\",\n              RFC 6829, DOI 10.17487/RFC6829,\
    \ January 2013,\n              <http://www.rfc-editor.org/info/rfc6829>.\n   [RFC7537]\
    \  Decraene, B., Akiya, N., Pignataro, C., Andersson, L., and\n              S.\
    \ Aldrin, \"IANA Registries for LSP Ping Code Points\",\n              RFC 7537,\
    \ DOI 10.17487/RFC7537, May 2015,\n              <http://www.rfc-editor.org/info/rfc7537>.\n\
    \   [RFC8012]  Akiya, N., Swallow, G., Pignataro, C., Malis, A., and S.\n    \
    \          Aldrin, \"Label Switched Path (LSP) and Pseudowire (PW)\n         \
    \     Ping/Trace over MPLS Networks Using Entropy Labels (ELs)\",\n          \
    \    RFC 8012, DOI 10.17487/RFC8012, November 2016,\n              <http://www.rfc-editor.org/info/rfc8012>.\n\
    \   [RFC8077]  Martini, L., Ed., and G. Heron, Ed., \"Pseudowire Setup and\n \
    \             Maintenance Using the Label Distribution Protocol (LDP)\",\n   \
    \           STD 84, RFC 8077, DOI 10.17487/RFC8077, February 2017,\n         \
    \     <http://www.rfc-editor.org/info/rfc8077>.\n"
- title: Appendix A.  Deprecated TLVs and Sub-TLVs (Non-normative)
  contents:
  - "Appendix A.  Deprecated TLVs and Sub-TLVs (Non-normative)\n   This appendix describes\
    \ deprecated elements, which are non-normative\n   for an implementation.  They\
    \ are included in this document for\n   historical and informational purposes.\n"
- title: A.1.  Target FEC Stack
  contents:
  - 'A.1.  Target FEC Stack

    '
- title: A.1.1.  FEC 128 Pseudowire - IPv4 (Deprecated)
  contents:
  - "A.1.1.  FEC 128 Pseudowire - IPv4 (Deprecated)\n   FEC 128 (0x80) is defined\
    \ in [RFC4447], as are the terms PW ID\n   (Pseudowire ID) and PW Type (Pseudowire\
    \ Type).  A PW ID is a non-zero\n   32-bit connection ID.  The PW Type is a 15-bit\
    \ number indicating the\n   encapsulation type.  It is carried right justified\
    \ in the field below\n   termed encapsulation type with the high-order bit set\
    \ to zero.  Both\n   of these fields are treated in this protocol as opaque values.\n\
    \   When a FEC 128 is encoded in a label stack, the following format is\n   used.\
    \  The Value field consists of the Remote PE IPv4 Address (the\n   destination\
    \ address of the targeted LDP session), the PW ID, and the\n   encapsulation type\
    \ as follows:\n       0                   1                   2              \
    \     3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Remote PE IPv4 Address                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             PW ID                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |            PW Type            |          Must Be Zero         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   This\
    \ FEC is deprecated and is retained only for backward\n   compatibility.  Implementations\
    \ of LSP ping SHOULD accept and process\n   this TLV, but SHOULD send LSP ping\
    \ echo requests with the new TLV\n   (see Section 3.2.9), unless explicitly configured\
    \ to use the old TLV.\n   An LSR receiving this TLV SHOULD use the source IP address\
    \ of the LSP\n   echo request to infer the sender's PE address.\n"
- title: A.2.  Downstream Mapping (Deprecated)
  contents:
  - "A.2.  Downstream Mapping (Deprecated)\n   The Downstream Mapping object is a\
    \ TLV that MAY be included in an\n   echo request message.  Only one Downstream\
    \ Mapping object may appear\n   in an echo request.  The presence of a Downstream\
    \ Mapping object is a\n   request that Downstream Mapping objects be included\
    \ in the echo\n   reply.  If the replying router is the destination of the FEC,\
    \ then a\n   Downstream Mapping TLV SHOULD NOT be included in the echo reply.\n\
    \   Otherwise, the replying router SHOULD include a Downstream Mapping\n   object\
    \ for each interface over which this FEC could be forwarded.\n   For a more precise\
    \ definition of the notion of \"downstream\", see\n   Section 3.4.2, \"Downstream\
    \ Router and Interface\".\n   The Length is K + M + 4*N octets, where M is the\
    \ Multipath Length,\n   and N is the number of downstream labels.  Values for\
    \ K are found in\n   the description of Address Type below.  The Value field of\
    \ a\n   Downstream Mapping has the following format:\n       0               \
    \    1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               MTU             | Address Type  |    DS Flags   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \             Downstream IP Address (4 or 16 octets)            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Downstream Interface Address (4 or 16 octets)         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Multipath Type| Depth Limit   |        Multipath Length       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                                                               .\n   \
    \   .                     (Multipath Information)                   .\n      .\
    \                                                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               Downstream Label                |    Protocol   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      .\
    \                                                               .\n      .   \
    \                                                            .\n      .      \
    \                                                         .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               Downstream Label                |    Protocol   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Maximum\
    \ Transmission Unit (MTU)\n      The MTU is the size in octets of the largest\
    \ MPLS frame (including\n      label stack) that fits on the interface to the\
    \ downstream LSR.\n   Address Type\n      The Address Type indicates if the interface\
    \ is numbered or\n      unnumbered.  It also determines the length of the Downstream\
    \ IP\n      Address and Downstream Interface fields.  The resulting total for\n\
    \      the initial part of the TLV is listed in the table below as \"K\n     \
    \ Octets\".  The Address Type is set to one of the following values:\n       Type\
    \ #        Address Type           K Octets\n       ------        ------------\
    \           --------\n            1        IPv4 Numbered                16\n \
    \           2        IPv4 Unnumbered              16\n            3        IPv6\
    \ Numbered                40\n            4        IPv6 Unnumbered           \
    \   28\n            5        Non IP                       12\n   DS Flags\n  \
    \    The DS Flags field is a bit vector with the following format:\n        0\
    \ 1 2 3 4 5 6 7\n       +-+-+-+-+-+-+-+-+\n       | Rsvd(MBZ) |I|N|\n       +-+-+-+-+-+-+-+-+\n\
    \   Two flags are defined currently, I and N.  The remaining flags MUST\n   be\
    \ set to zero when sending and ignored on receipt.\n   Flag  Name and Meaning\n\
    \   ----  ----------------\n      I  Interface and Label Stack Object Request\n\
    \         When this flag is set, it indicates that the replying\n         router\
    \ SHOULD include an Interface and Label Stack\n         Object in the echo reply\
    \ message.\n      N  Treat as a Non-IP Packet\n         Echo request messages\
    \ will be used to diagnose non-IP\n         flows.  However, these messages are\
    \ carried in IP\n         packets.  For a router that alters its ECMP algorithm\n\
    \         based on the FEC or deep packet examination, this flag\n         requests\
    \ that the router treat this as it would if the\n         determination of an\
    \ IP payload had failed.\n   Downstream IP Address and Downstream Interface Address\n\
    \      IPv4 addresses and interface indices are encoded in 4 octets; IPv6\n  \
    \    addresses are encoded in 16 octets.\n      If the interface to the downstream\
    \ LSR is numbered, then the\n      Address Type MUST be set to IPv4 or IPv6, the\
    \ Downstream IP\n      Address MUST be set to either the downstream LSR's Router\
    \ ID or\n      the interface address of the downstream LSR, and the Downstream\n\
    \      Interface Address MUST be set to the downstream LSR's interface\n     \
    \ address.\n      If the interface to the downstream LSR is unnumbered, the Address\n\
    \      Type MUST be IPv4 Unnumbered or IPv6 Unnumbered, the Downstream IP\n  \
    \    Address MUST be the downstream LSR's Router ID, and the Downstream\n    \
    \  Interface Address MUST be set to the index assigned by the\n      upstream\
    \ LSR to the interface.\n      If an LSR does not know the IP address of its neighbor,\
    \ then it\n      MUST set the Address Type to either IPv4 Unnumbered or IPv6\n\
    \      Unnumbered.  For IPv4, it must set the Downstream IP Address to\n     \
    \ 127.0.0.1; for IPv6, the address is set to 0::1.  In both cases,\n      the\
    \ interface index MUST be set to 0.  If an LSR receives an Echo\n      Request\
    \ packet with either of these addresses in the Downstream IP\n      Address field,\
    \ this indicates that it MUST bypass interface\n      verification but continue\
    \ with label validation.\n      If the originator of an echo request packet wishes\
    \ to obtain\n      Downstream Mapping information but does not know the expected\n\
    \      label stack, then it SHOULD set the Address Type to either IPv4\n     \
    \ Unnumbered or IPv6 Unnumbered.  For IPv4, it MUST set the\n      Downstream\
    \ IP Address to 224.0.0.2; for IPv6, the address MUST be\n      set to FF02::2.\
    \  In both cases, the interface index MUST be set to\n      0.  If an LSR receives\
    \ an echo request packet with the all-routers\n      multicast address, then this\
    \ indicates that it MUST bypass both\n      interface and label stack validation,\
    \ but return Downstream\n      Mapping TLVs using the information provided.\n\
    \   Multipath Type\n      The following Multipath Types are defined:\n      Key\
    \   Type                  Multipath Information\n      ---   ----------------\
    \      ---------------------\n       0    no multipath          Empty (Multipath\
    \ Length = 0)\n       2    IP address            IP addresses\n       4    IP\
    \ address range      low/high address pairs\n       8    Bit-masked IP       \
    \  IP address prefix and bit mask\n              address set\n       9    Bit-masked\
    \ label set  Label prefix and bit mask\n      Type 0 indicates that all packets\
    \ will be forwarded out this one\n      interface.\n      Types 2, 4, 8, and 9\
    \ specify that the supplied Multipath\n      Information will serve to exercise\
    \ this path.\n   Depth Limit\n      The Depth Limit is applicable only to a label\
    \ stack and is the\n      maximum number of labels considered in the hash; this\
    \ SHOULD be\n      set to zero if unspecified or unlimited.\n   Multipath Length\n\
    \      The length in octets of the Multipath Information.\n   Multipath Information\n\
    \      Address or label values encoded according to the Multipath Type.\n    \
    \  See Section 3.4.1.1.1 for encoding details.\n   Downstream Label(s)\n     \
    \ The set of labels in the label stack as it would have appeared if\n      this\
    \ router were forwarding the packet through this interface.\n      Any Implicit\
    \ Null labels are explicitly included.  Labels are\n      treated as numbers,\
    \ i.e., they are right justified in the field.\n      A downstream label is 24\
    \ bits, in the same format as an MPLS label\n      minus the TTL field, i.e.,\
    \ the MSBit of the label is bit 0, the\n      LSBit is bit 19, the TC bits are\
    \ bits 20-22, and bit 23 is the S\n      bit.  The replying router SHOULD fill\
    \ in the TC and S bits; the\n      LSR receiving the echo reply MAY choose to\
    \ ignore these bits.\n   Protocol\n      The protocol is taken from the following\
    \ table:\n      Protocol #        Signaling Protocol\n      ----------       \
    \ ------------------\n               0        Unknown\n               1      \
    \  Static\n               2        BGP\n               3        LDP\n        \
    \       4        RSVP-TE\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The original acknowledgements from RFC 4379 state the following:\n\
    \      This document is the outcome of many discussions among many\n      people,\
    \ including Manoj Leelanivas, Paul Traina, Yakov Rekhter,\n      Der-Hwa Gan,\
    \ Brook Bailey, Eric Rosen, Ina Minei, Shivani\n      Aggarwal, and Vanson Lim.\n\
    \      The description of the Multipath Information sub-field of the\n      Downstream\
    \ Mapping TLV was adapted from text suggested by Curtis\n      Villamizar.\n \
    \  We would like to thank Loa Andersson for motivating the advancement\n   of\
    \ this specification.\n   We also would like to thank Alexander Vainshtein, Yimin\
    \ Shen, Curtis\n   Villamizar, David Allan, Vincent Roca, Mirja Kuhlewind, and\
    \ Elwyn\n   Davies for their review and useful comments.\n"
- title: Contributors
  contents:
  - "Contributors\n   A mechanism used to detect data-plane failures in MPLS LSPs\
    \ was\n   originally published as RFC 4379 in February 2006.  It was produced\n\
    \   by the MPLS Working Group of the IETF and was jointly authored by\n   Kireeti\
    \ Kompella and George Swallow.\n   The following made vital contributions to all\
    \ aspects of the original\n   RFC 4379, and much of the material came out of debate\
    \ and discussion\n   among this group.\n      Ronald P. Bonica, Juniper Networks,\
    \ Inc.\n      Dave Cooper, Global Crossing\n      Ping Pan, Hammerhead Systems\n\
    \      Nischal Sheth, Juniper Networks, Inc.\n      Sanjay Wadhwa, Juniper Networks,\
    \ Inc.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kireeti Kompella\n   Juniper Networks, Inc.\n   Email:\
    \ kireeti.kompella@gmail.com\n   George Swallow\n   Cisco Systems, Inc.\n   Email:\
    \ swallow.ietf@gmail.com\n   Carlos Pignataro (editor)\n   Cisco Systems, Inc.\n\
    \   Email: cpignata@cisco.com\n   Nagendra Kumar\n   Cisco Systems, Inc.\n   Email:\
    \ naikumar@cisco.com\n   Sam Aldrin\n   Google\n   Email: aldrin.ietf@gmail.com\n\
    \   Mach(Guoyi) Chen\n   Huawei\n   Email: mach.chen@huawei.com\n"
