- contents:
  - '     A Negative Acknowledgement Mechanism for Signaling Compression

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes a mechanism that allows Signaling Compression\n
    \  (SigComp) implementations to report precise error information upon\n   receipt
    of a message which cannot be decompressed.  This negative\n   feedback can be
    used by the recipient to make fine-grained\n   adjustments to the compressed message
    before retransmitting it,\n   allowing for rapid and efficient recovery from error
    situations.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. The Problem ................................................2\n           1.1.1.
    Compartment Disposal ................................3\n           1.1.2. Client
    Restart ......................................3\n           1.1.3. Server Failover
    .....................................3\n      1.2. The Solution ...............................................4\n
    \  2. Node Behavior ...................................................4\n      2.1.
    Normal SigComp Message Transmission ........................4\n      2.2. Receiving
    a \"Bad\" SigComp Message ..........................5\n      2.3. Receiving a
    SigComp NACK ...................................6\n           2.3.1. Unreliable
    Transport ................................6\n           2.3.2. Reliable Transport
    ..................................6\n      2.4. Detecting Support for NACK .................................7\n
    \  3. Message Format ..................................................7\n      3.1.
    Message Fields .............................................8\n      3.2. Reason
    Codes ...............................................9\n   4. Security Considerations
    ........................................13\n      4.1. Reflector Attacks .........................................13\n
    \     4.2. NACK Spoofing .............................................13\n   5.
    IANA Considerations ............................................14\n   6. Acknowledgements
    ...............................................14\n   7. References .....................................................14\n
    \     7.1. Normative References ......................................14\n      7.2.
    Informative References ....................................14\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Signaling Compression [1], often called \"SigComp\", defines
    a protocol\n   for transportation of compressed messages between two network\n
    \  elements.  One of the key features of SigComp is the ability of the\n   sending
    node to request that the receiving node store state objects\n   for later retrieval.\n"
  - contents:
    - "1.1.  The Problem\n   While the \"SigComp - Extended Operations\" document
      [2] defines a\n   mechanism that allows for confirmation of state creation,
      operational\n   experience with the SigComp protocol has demonstrated that there
      are\n   still several circumstances in which a sender's view of the shared\n
      \  state differs from the receiver's view.  A non-exhaustive list\n   detailing
      the circumstances in which such failures may occur is\n   below.\n"
    - contents:
      - "1.1.1.  Compartment Disposal\n   In SigComp, stored states are associated
        with compartments.\n   Conceptually, the compartments represent one instance
        of a remote\n   application.  These compartments are used to limit the amount
        of\n   state that each remote application is allowed to store.  Compartments\n
        \  are created upon receipt of a valid SigComp message from a remote\n   application.
        \ In the current protocol, applications are expected to\n   signal when they
        are finished with a compartment so that it can be\n   deleted (by using the
        S-bit in requested feedback data).\n   Unfortunately, expecting the applications
        to be well-behaved is not\n   sufficient to prevent state from piling up.
        \ Unexpected client\n   failures, reboots, and loss of connectivity can cause
        compartments to\n   become \"stuck\" and never removed.  To prevent this situation,
        it\n   becomes necessary to implement a scheme by which compartments that\n
        \  appear disused may eventually be discarded.\n   While the preceding facts
        make such a practice necessary, discarding\n   compartments without explicit
        signaling can have the unfortunate side\n   effect that active compartments
        are sometimes discarded.  This leads\n   to a different view of state between
        the server and the client.\n"
      title: 1.1.1.  Compartment Disposal
    - contents:
      - "1.1.2.  Client Restart\n   The prime motivation for SigComp was compression
        of messages to be\n   sent over a radio interface.  Consequently, most deployments
        of\n   SigComp will involve a mobile unit as one of the endpoints.  Mobile\n
        \  terminals are generally not guaranteed to be available for extended\n   durations
        of time.  Node restarts (due to, for example, a battery\n   running out) will
        induce situations in which the network-based server\n   believes that the
        client contains several states that are no longer\n   actually available.\n"
      title: 1.1.2.  Client Restart
    - contents:
      - "1.1.3.  Server Failover\n   Many applications for which SigComp will be used
        (e.g., SIP [3]) use\n   DNS SRV records for server lookup.  One of the important
        features of\n   DNS SRV records is the ability to specify multiple servers
        from which\n   clients will select at random, with probabilities determined
        by the\n   q-value weighting.  The reason for defining this behavior for SRV\n
        \  records is to allow load distribution through a set of equivalent\n   servers,
        and to permit clients to continue to function even if the\n   server with
        which they are communicating fails.  When using protocols\n   that use SRV
        for such distribution, the traffic to a failed server is\n   typically sent
        by the client to an equivalent server that can serve\n   the same purpose.
        \ From an application perspective, this new server\n   often appears to be
        the same endpoint as the failed server, and will\n   consequently resolve
        to the same compartment.\n   Although SigComp state can be replicated amongst
        such a cluster of\n   servers, maintaining integrity of such states requires
        a two-phase\n   commit process that adds a great deal of complexity to the
        server and\n   can degrade performance significantly.\n"
      title: 1.1.3.  Server Failover
    title: 1.1.  The Problem
  - contents:
    - "1.2.  The Solution\n   Although SigComp allows returned SigComp parameters
      to signal that\n   all states have been lost (by setting \"state_memory_size\"
      to 0 for\n   one message in the reverse direction), such an approach provides
      an\n   incomplete solution to the problem.  In addition to wiping out an\n   entire
      compartment when only one state is corrupt or missing, this\n   approach suffers
      from the unfortunate behavior that it requires a\n   message in the reverse
      direction that the remote application will\n   authorize.  Unless a lower-layer
      security mechanism is employed\n   (e.g., TLS), this would typically mean that
      a compressed\n   application-level message in the reverse direction must be
      sent\n   before recovery can occur.  In many cases (such as SIP-based mobile\n
      \  terminals), these messages won't be sent often; in others (pure\n   client/server
      deployments), they won't ever be sent.\n   The proposed solution to this problem
      is a simple Negative\n   Acknowledgement (NACK) mechanism which allows the recipient
      to\n   communicate to the sender that a failure has occurred.  This NACK\n   contains
      a reason code that communicates the nature of the failure.\n   For certain types
      of failures, the NACK will also contain additional\n   details that might be
      useful in recovering from the failure.\n"
    title: 1.2.  The Solution
  title: 1.  Introduction
- contents:
  - "2.  Node Behavior\n   The following sections detail the behavior of nodes sending
    and\n   receiving SigComp NACKs.  The actual format and values are described\n
    \  in Section 3.\n"
  - contents:
    - "2.1.  Normal SigComp Message Transmission\n   Although normal in all other
      respects, SigComp implementations that\n   use the NACK mechanism need to calculate
      and store a SHA-1 hash for\n   each SigComp message that they send.  This must
      be stored in such a\n   way that, given the SHA-1 hash, the implementation is
      able to locate\n   the compartment with which the sent message was associated.\n
      \  In other words, if someone hands the SHA-1 hash back to the\n   compressor,
      it needs to be able to find the compartment with which it\n   was working when
      it sent the message with that hash.  This only\n   requires that the compressor
      knows with which compartment it is\n   working when it sends a message (which
      is always the case), and that\n   the SHA-1 hash, when stored, points to that
      compartment in some way.\n"
    title: 2.1.  Normal SigComp Message Transmission
  - contents:
    - "2.2.  Receiving a \"Bad\" SigComp Message\n   When a received SigComp message
      causes a decompression failure, the\n   recipient forms and sends a SigComp
      NACK message.  This NACK message\n   contains a SHA-1 hash of the received SigComp
      message that could not\n   be decompressed.  It also contains the exact reason
      decompression\n   failed, as well as any additional details that might assist
      the NACK\n   recipient to correct any problems.  See Section 3 for more\n   information
      about formatting the NACK message and its fields.\n   For a connection-oriented
      transport, such as TCP, the NACK message is\n   sent back to the originator
      of the failed message over that same\n   connection.\n   For a stream-based
      transport, such as TCP, the standard SigComp\n   delimiter of 0xFFFF is used
      to terminate the NACK message.\n   For a connectionless transport, such as UDP,
      the NACK message is sent\n   back to the originator of the failed message at
      the port and IP\n   address from which the message was sent.  Note that this
      may or may\n   not be the same port on which the application would typically
      receive\n   messages.  To accommodate implementations that use connect() or\n
      \  similar constructs, the NACK will be sent from the IP address and\n   port
      to which the uninterpretable message was sent.  From a practical\n   perspective,
      this is probably easiest to determine by binding\n   listening sockets to a
      specific interface; however, other mechanisms\n   may also be employed.\n   The
      behavior specified above is strictly necessary for any generally\n   useful
      form of a NACK mechanism.  In the most general case, when an\n   implementation
      receives a message that it cannot decompress, it has\n   exactly three useful
      pieces of information: (1) the contents of the\n   message, (2) an indication
      of why the message cannot be decoded, and\n   (3) the IP address and port from
      which the message originated.  Note\n   that none of these contains any indication
      of where the remote\n   application is listening for messages, if it differs
      from the sending\n   port.\n"
    title: 2.2.  Receiving a "Bad" SigComp Message
  - contents:
    - "2.3.  Receiving a SigComp NACK\n   The first action taken upon receipt of a
      NACK is an attempt to find\n   the message to which the NACK corresponds.  This
      search is performed\n   using the 20-byte SHA-1 hash contained in the NACK.
      \ Once the\n   matching message is located, further operations are performed
      based\n   on the compartment that was associated with the sent message.\n   Further
      behavior of a node upon receiving a SigComp NACK depends on\n   whether a reliable
      or unreliable transport is being used.\n"
    - contents:
      - "2.3.1.  Unreliable Transport\n   When SigComp is used over an unreliable
        transport, the application\n   has no reasonable expectation that the transport
        layer will deliver\n   any particular message.  It then becomes the application
        layer's\n   responsibility to ensure that data is retransmitted as necessary.
        \ In\n   these circumstances, the NACK mechanism relies on such behavior to\n
        \  ensure delivery of the message, and never performs retransmissions on\n
        \  the application's behalf.\n   When a NACK is received for a message sent
        over an unreliable\n   transport, the NACK recipient uses the contained information
        to make\n   appropriate adjustments to the compressor associated with the
        proper\n   compartment.  The exact nature of these adjustments are specific
        to\n   the compression scheme being used, and will vary from implementation\n
        \  to implementation.  The only requirement on these adjustments is that\n
        \  they must have the effect of compensating for the error that has been\n
        \  indicated (e.g., by removing the state that the remote node indicates\n
        \  it cannot retrieve).\n   In particular, when an unreliable transport is
        used, the original\n   message must not be retransmitted by the SigComp layer
        upon receipt\n   of a NACK.  Instead, the next application-initiated transmission
        of a\n   message will take advantage of the adjustments made as a result of\n
        \  processing the NACK.\n"
      title: 2.3.1.  Unreliable Transport
    - contents:
      - "2.3.2.  Reliable Transport\n   When a reliable transport is employed, the
        application makes a basic\n   assumption that any message passed down the
        stack will be\n   retransmitted as necessary to ensure that the remote node
        receives\n   it, unless a failure is indicated by the transport layer.  Because\n
        \  SigComp acts as a shim between the transport-layer and the\n   application,
        it becomes the responsibility of the SigComp\n   implementation to ensure
        that any failure to transmit a message is\n   communicated to the application.\n
        \  When a NACK is received for a message sent over a reliable transport,\n
        \  the SigComp layer must indicate to the application that an error has\n
        \  occurred.  In general, the application should react in the same way\n   as
        it does for any other transport layer error, such as a TCP\n   connection
        reset.  For most applications, this reaction will\n   initially be an attempt
        to reset and re-establish the connection, and\n   re-initiate the failed transaction.
        \ The SigComp layer should also\n   use the information contained in the NACK
        to make appropriate\n   adjustments to the compressor associated with the
        proper compartment\n   (similar to the adjustments made for unreliable transport).
        \ Thus, if\n   the compartment is not reset by resetting the TCP connection,
        the\n   next message will take advantage of the adjustments.\n"
      title: 2.3.2.  Reliable Transport
    title: 2.3.  Receiving a SigComp NACK
  - contents:
    - "2.4.  Detecting Support for NACK\n   Detection of support for the NACK mechanism
      may be beneficial in\n   certain circumstances.  For example, with the current
      definition of\n   SigComp, acknowledgment of state receipt is required before
      a sender\n   can reference such state.  When multiple messages are sent before
      a\n   response is received, the need to wait for such responses can cause\n
      \  significant decreases in message compression efficiency.  If it is\n   known
      that the receiver supports the NACK mechanism, the sender can\n   instead optimistically
      assume that the state created by a sent\n   message has been created, and is
      allowed to be referenced.  If such\n   an assumption turns out to be false (due
      to, for example, packet loss\n   or packet reordering), the sender can recover
      upon receipt of a NACK.\n   In order to facilitate such detection, any implementation
      that will\n   send NACK messages upon decompression failure will indicate a
      SigComp\n   version number of 0x02 in its Universal Decompressor Virtual Machine\n
      \  (UDVM).  The bytecodes sent to such an endpoint can check the version\n   number,
      and send appropriate indication back to their compressor as\n   requested feedback.
      \ Except for the NACK mechanism described in this\n   document, implementations
      advertising a version of 0x02 behave\n   exactly like those advertising a version
      number of 0x01.\n"
    title: 2.4.  Detecting Support for NACK
  title: 2.  Node Behavior
- contents:
  - "3.  Message Format\n   SigComp NACK packets are syntactically valid SigComp messages
    which\n   have been specifically designed to be safely ignored by\n   implementations
    that do not support the NACK mechanism.\n   In particular, NACK messages are formatted
    as the second variant of a\n   SigComp message (typically used for code upload)
    with a \"code_len\"\n   field of zero.  The NACK information (message identifier,
    reason for\n   failure, and error details) is encoded in the \"remaining SigComp\n
    \  message\" area, typically used for input data.  Further, the\n   \"destination\"
    field is used as a version identifier to indicate which\n   version of NACK is
    being employed.\n"
  - contents:
    - "3.1.  Message Fields\n   The format of the NACK message and the use of the
      fields within it\n   are shown in Figure 1.\n                      0   1   2
      \  3   4   5   6   7\n                    +---+---+---+---+---+---+---+---+\n
      \                   | 1   1   1   1   1 | T |   0   |\n                    +---+---+---+---+---+---+---+---+\n
      \                   |                               |\n                    :
      \   returned feedback item     :\n                    |                               |\n
      \                   +---+---+---+---+---+---+---+---+\n                    |
      \        code_len = 0          |\n                    +---+---+---+---+---+---+---+---+\n
      \                   | code_len = 0  |  version = 1  |\n                    +---+---+---+---+---+---+---+---+\n
      \                   |          Reason Code          |\n                    +---+---+---+---+---+---+---+---+\n
      \                   |  OPCODE of failed instruction |\n                    +---+---+---+---+---+---+---+---+\n
      \                   |   PC of failed instruction    |\n                    |
      \                              |\n                    +---+---+---+---+---+---+---+---+\n
      \                   |                               |\n                    :
      SHA-1 Hash of failed message  :\n                    |                               |\n
      \                   +---+---+---+---+---+---+---+---+\n                    |
      \                              |\n                    :         Error Details
      \        :\n                    |                               |\n                    +---+---+---+---+---+---+---+---+\n
      \                 Figure 1: SigComp NACK Message Format\n   o  \"Reason Code\"
      is a one-byte value that indicates the nature of the\n      decompression failure.
      \ The specific codes are given in\n      Section 3.2.\n   o  \"OPCODE of failed
      instruction\" is a one-byte field that includes\n      the opcode to which the
      PC was pointing when the failure occurred.\n      If failure occurred before
      the UDVM began executing any code, this\n      field is set to 0.\n   o  \"PC
      of failed instruction\" is a two-byte field containing the\n      value of the
      program counter when failure occurred (i.e., the\n      memory address of the
      failed UDVM instruction).  The field is\n      encoded with the most significant
      byte of the PC first (i.e., in\n      network or big endian order).  If failure
      occurred before the UDVM\n      began executing any code, this field is set
      to 0.\n   o  \"SHA-1 Hash of failed message\" contains the full 20-byte SHA-1\n
      \     hash of the SigComp message that could not be decompressed.  This\n      information
      allows the NACK recipient to locate the message that\n      failed to decompress
      so that adjustments to the correct\n      compartment can be performed.  When
      performing this hash, the\n      entire SigComp message is used, from the header
      byte (binary\n      11111xxx) to the end of the input.  Any lower-level protocol\n
      \     headers (such as UDP or IP) and message delimiters (the 0xFFFF\n      that
      marks message boundaries in stream protocols) are not\n      included in the
      hash.  When used over a stream based protocol, any\n      0xFFxx escape sequences
      are un-escaped before performing the hash\n      operation.\n   o  \"Error Details\"
      provides additional information that might be\n      useful in correcting the
      problem that caused decompression\n      failure.  Its meaning is specific to
      the \"Reason Code\".  See\n      Section 3.2 for specific information on what
      appears in this\n      field.\n   o  \"Code_len\" is the \"code_len\" field
      from a standard SigComp\n      message.  It is always set to \"0\" for NACK
      messages.\n   o  \"Version\" gives the version of the NACK mechanism being employed.\n
      \     This document defines version 1.\n"
    title: 3.1.  Message Fields
  - contents:
    - "3.2.  Reason Codes\n   Note that many of the status codes are more useful in
      debugging\n   interoperability problems than with on-the-fly correction of errors.\n
      \  The \"STATE_NOT_FOUND\" error is a notable exception: it will generally\n
      \  cause the NACK recipient to encode future messages so as to not use\n   the
      indicated state.\n   Upon receiving the other status messages, an implementation
      would\n   typically be expected either to use a different set of bytecodes or,\n
      \  if that is not an option, to send that specific message uncompressed.\n       Error
      \                     Code Details\n       -------------------------- ---- ---------------------------\n
      \      STATE_NOT_FOUND              1  State ID (6 - 20 bytes)\n       CYCLES_EXHAUSTED
      \            2  Cycles Per Bit (1 byte)\n       USER_REQUESTED               3\n
      \      SEGFAULT                     4\n       TOO_MANY_STATE_REQUESTS      5\n
      \      INVALID_STATE_ID_LENGTH      6\n       INVALID_STATE_PRIORITY       7\n
      \      OUTPUT_OVERFLOW              8\n       STACK_UNDERFLOW              9\n
      \      BAD_INPUT_BITORDER          10\n       DIV_BY_ZERO                 11\n
      \      SWITCH_VALUE_TOO_HIGH       12\n       TOO_MANY_BITS_REQUESTED     13\n
      \      INVALID_OPERAND             14\n       HUFFMAN_NO_MATCH            15\n
      \      MESSAGE_TOO_SHORT           16\n       INVALID_CODE_LOCATION       17\n
      \      BYTECODES_TOO_LARGE         18  Memory size (2 bytes)\n       INVALID_OPCODE
      \             19\n       INVALID_STATE_PROBE         20\n       ID_NOT_UNIQUE
      \              21  State ID (6 - 20 bytes)\n       MULTILOAD_OVERWRITTEN       22\n
      \      STATE_TOO_SHORT             23  State ID (6 - 20 bytes)\n       INTERNAL_ERROR
      \             24\n       FRAMING_ERROR               25\n   Only the five errors
      \"STATE_NOT_FOUND\", \"CYCLES_EXHAUSTED\",\n   \"BYTECODES_TOO_LARGE\", \"ID_NOT_UNIQUE\",
      and \"STATE_TOO_SHORT\" contain\n   details; for all other error codes, the
      \"Error Details\" field has\n   zero length.\n                    Figure 2:
      SigComp NACK Reason Codes\n   1.   STATE_NOT_FOUND\n        A state that was
      referenced cannot be found.  The state may have\n        been referenced by
      the UDVM executing a STATE-ACCESS\n        instruction; it also may have been
      referenced by the \"partial\n        state identifier\" field in a SigComp message.
      \ The \"details\"\n        field contains the state identifier for the state
      that could not\n        be found.  This is also the proper error to return in
      the case\n        that a unique state item was matched but fewer bytes of state
      ID\n        were sent than required by the minimum_access_length.\n   2.   CYCLES_EXHAUSTED\n
      \       Decompression of the message has taken more cycles than were\n        allocated
      to it.  The \"details\" field contains a one-byte value\n        that communicates
      the number of cycles per bit.  The cycles per\n        bit is represented as
      an unsigned 8-bit integer (i.e., not\n        encoded).\n   3.   USER_REQUESTED\n
      \       The DECOMPRESSION-FAILURE opcode has been executed.\n   4.   SEGFAULT\n
      \       An attempt to read from or write to memory that is outside of\n        the
      UDVM's memory space has been attempted.\n   5.   TOO_MANY_STATE_REQUESTS\n        More
      than four requests to store or delete state objects have\n        been requested.\n
      \  6.   INVALID_STATE_ID_LENGTH\n        A state id length less than 6 or greater
      than 20 has been\n        specified.\n   7.   INVALID_STATE_PRIORITY\n        A
      state priority of 65535 has been specified when attempting to\n        store
      a state.\n   8.   OUTPUT_OVERFLOW\n        The decompressed message is too large
      to be decoded by the\n        receiving node.\n   9.   STACK_UNDERFLOW\n        An
      attempt to pop a value off the UDVM stack was made with a\n        stack_fill
      value of 0.\n   10.  BAD_INPUT_BITORDER\n        An INPUT-BITS or INPUT-HUFFMAN
      instruction was encountered with\n        the \"input_bit_order\" register set
      to an invalid value (i.e.,\n        one of the upper 13 bits is set).\n   11.
      \ DIV_BY_ZERO\n        A DIVIDE or REMAINDER opcode was encountered with a divisor
      of\n        0.\n   12.  SWITCH_VALUE_TOO_HIGH\n        The input to a SWITCH
      opcode exceeds the number of branches\n        defined.\n   13.  TOO_MANY_BITS_REQUESTED\n
      \       An INPUT-BITS or INPUT-HUFFMAN instruction was encountered that\n        attempted
      to input more than 16 bits.\n   14.  INVALID_OPERAND\n        An operand for
      an instruction could not be resolved to an\n        integer value (e.g., a literal
      or reference operand beginning\n        with 11111111).\n   15.  HUFFMAN_NO_MATCH\n
      \       The input string does not match any of the bitcodes in the\n        INPUT-HUFFMAN
      opcode.\n   16.  MESSAGE_TOO_SHORT\n        When attempting to decode a SigComp
      message, the recipient\n        determined that there were not enough bytes
      in the message for\n        it to be valid.\n   17.  INVALID_CODE_LOCATION\n
      \       The \"code location\" field in the SigComp message was set to the\n
      \       invalid value of 0.\n   18.  BYTECODES_TOO_LARGE\n        The bytecodes
      that a SigComp message attempted to upload exceed\n        the amount of memory
      available in the receiving UDVM.  The\n        details field is a two-byte expression
      of the\n        DECOMPRESSION_MEMORY_SIZE of the receiving UDVM.  This value
      is\n        communicated most-significant-byte first.\n   19.  INVALID_OPCODE\n
      \       The UDVM attempted to identify an undefined byte value as an\n        instruction.\n
      \  20.  INVALID_STATE_PROBE\n        When attempting to retrieve state, the
      state_length operand is\n        set to 0 but the state_begin operand is non-zero.\n
      \  21.  ID_NOT_UNIQUE\n        A partial state identifier that was used to access
      state matched\n        more than one state item.  Note that this error might
      be\n        returned as the result of executing a STATE-ACCESS instruction\n
      \       or attempting to locate a unique piece of state as identified by\n        the
      \"partial state identifier\" in a SigComp message.  The\n        \"details\"
      field contains the partial state identifier that was\n        requested.\n   22.
      \ MULTILOAD_OVERWRITTEN\n        A MULTILOAD instruction attempted to overwrite
      itself.\n   23.  STATE_TOO_SHORT\n        A STATE-ACCESS instruction has attempted
      to copy more bytes from\n        a state item than the state item actually contains.
      \ The\n        \"details\" field contains the partial state identifier that
      was\n        requested.  Implementors are cautioned to return only the\n        partial
      state identifier that was requested; if the NACK\n        contains any state
      identifier in addition to what was requested,\n        attackers may be able
      to use that additional information to\n        access the state.\n   24.  INTERNAL_ERROR\n
      \       The UDVM encountered an unexpected condition that prevented it\n        from
      decompressing the message.\n   25.  FRAMING_ERROR\n        The UDVM encountered
      a framing error (unquoted 0xFF 80 .. 0xFF\n        FE in an input stream.)  This
      error is applicable only to\n        messages received on a stream transport.
      \ In the case of a\n        framing error, a SHA-1 hash for a unique message
      cannot be\n        determined.  Consequently, when a FRAMING_ERROR NACK is sent,\n
      \       the \"SHA-1 Hash of failed message\" field should be set to all\n        zeros.\n"
    title: 3.2.  Reason Codes
  title: 3.  Message Format
- contents:
  - '4.  Security Considerations

    '
  - contents:
    - "4.1.  Reflector Attacks\n   Because SigComp NACK messages are by necessity
      sent in response to\n   other messages, it is possible to trigger them by intentionally\n
      \  sending malformed messages to a SigComp implementation with a spoofed\n   IP
      address.  However, because such actions can only generate one\n   message for
      each message sent, they don't serve as amplifier attacks.\n   Further, due to
      the reasonably small size of NACK packets, there\n   cannot be a significant
      increase in the size of the packet generated.\n   It is worth noting that nearly
      all deployed protocols exhibit this\n   same behavior.\n"
    title: 4.1.  Reflector Attacks
  - contents:
    - "4.2.  NACK Spoofing\n   Although it is possible to forge NACK messages as if
      they were\n   generated by a different node, the damage that can be caused is\n
      \  minimal.  Reporting a loss of state will typically result in nothing\n   more
      than the re-transmission of that state in a subsequent message.\n   Other failure
      codes would result in the next message being sent using\n   an alternate compression
      mechanism, or possibly uncompressed.\n   Although all of the above consequences
      result in slightly larger\n   messages, none of them have particularly catastrophic
      implications\n   for security.\n"
    title: 4.2.  NACK Spoofing
  title: 4.  Security Considerations
- contents:
  - "5.  IANA Considerations\n   This document defines a new value for the IANA registered
    attribute\n   SigComp_version.\n   Value (in hex): 02\n   Description: SigComp
    version 2 (NACK support)\n   Reference: [RFC4077]\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Acknowledgements\n   Thanks to Carsten Bormann, Zhigang Liu, Pekka Pessi,
    and Robert Sugar\n   for their comments and suggestions.  Special thanks to Abigail\n
    \  Surtees and Richard Price for several very detailed reviews and\n   suggestions.\n"
  title: 6.  Acknowledgements
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [1]  Price, R., Bormann, C., Christoffersson,
      J., Hannu, H., Liu, Z.,\n        and J. Rosenberg, \"Signaling Compression (SigComp)\",
      RFC 3320,\n        January 2003.\n   [2]  Hannu, H., Christoffersson, J., Forsgren,
      S., Leung, K.-C., Liu,\n        Z., and R. Price, \"Signaling Compression (SigComp)
      - Extended\n        Operations\", RFC 3321, January 2003.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [3]  Rosenberg, J., Schulzrinne, H., Camarillo,
      G., Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M., and E. Schooler,
      \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Author's Address\n   Adam Roach\n   Estacado Systems\n   17210 Campbell Road\n
    \  Suite 250\n   Dallas, TX 75252\n   US\n   EMail: adam@estacado.net\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
