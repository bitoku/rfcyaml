- title: __initial_text__
  contents:
  - '                        Service Models Explained

    '
- title: Abstract
  contents:
  - "Abstract\n   The IETF has produced many modules in the YANG modeling language.\n\
    \   The majority of these modules are used to construct data models to\n   model\
    \ devices or monolithic functions.\n   A small number of YANG modules have been\
    \ defined to model services\n   (for example, the Layer 3 Virtual Private Network\
    \ Service Model\n   (L3SM) produced by the L3SM working group and documented in\
    \ RFC\n   8049).\n   This document describes service models as used within the\
    \ IETF and\n   also shows where a service model might fit into a software-defined\n\
    \   networking architecture.  Note that service models do not make any\n   assumption\
    \ of how a service is actually engineered and delivered for\n   a customer; details\
    \ of how network protocols and devices are\n   engineered to deliver a service\
    \ are captured in other modules that\n   are not exposed through the interface\
    \ between the customer and the\n   provider.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8309.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terms and Concepts  . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Using Service Models  . . . . . . . . . . . . . . . . .\
    \ . . .   7\n     3.1.  Practical Considerations  . . . . . . . . . . . . . .\
    \ . .   8\n   4.  Service Models in an SDN Context  . . . . . . . . . . . . .\
    \ .   8\n   5.  Possible Causes of Confusion  . . . . . . . . . . . . . . . .\
    \  11\n   6.  Comparison with Other Work  . . . . . . . . . . . . . . . . .  13\n\
    \     6.1.  Comparison with Network Service Models  . . . . . . . . .  13\n  \
    \   6.2.  Service Delivery and Network Element Model Work . . . . .  15\n    \
    \ 6.3.  Customer Service Model Work . . . . . . . . . . . . . . .  16\n     6.4.\
    \  The MEF Architecture  . . . . . . . . . . . . . . . . . .  17\n   7.  Further\
    \ Concepts  . . . . . . . . . . . . . . . . . . . . . .  18\n     7.1.  Technology\
    \ Agnostic . . . . . . . . . . . . . . . . . . .  18\n     7.2.  Relationship\
    \ to Policy  . . . . . . . . . . . . . . . . .  18\n     7.3.  Operator-Specific\
    \ Features  . . . . . . . . . . . . . . .  19\n     7.4.  Supporting Multiple\
    \ Services  . . . . . . . . . . . . . .  19\n   8.  Security Considerations .\
    \ . . . . . . . . . . . . . . . . . .  20\n   9.  Manageability Considerations\
    \  . . . . . . . . . . . . . . . .  20\n   10. IANA Considerations . . . . . .\
    \ . . . . . . . . . . . . . . .  21\n   11. References  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  21\n     11.1.  Normative References . . . . .\
    \ . . . . . . . . . . . . .  21\n     11.2.  Informative References . . . . .\
    \ . . . . . . . . . . . .  21\n   Acknowledgements  . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  23\n   Authors' Addresses  . . . . . . . . . . . . .\
    \ . . . . . . . . . .  23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In recent years, the number of modules written in the YANG\
    \ modeling\n   language [RFC6020] for configuration and monitoring has blossomed.\n\
    \   Many of these are used for device-level configuration (for example,\n   [RFC7223])\
    \ or for control of monolithic functions or protocol\n   instances (for example,\
    \ [RFC7407]).\n   [RFC7950] makes a distinction between a \"data model\", which\
    \ it\n   defines as describing how data is represented and accessed, and a\n \
    \  \"YANG module\", which defines hierarchies of schema nodes to make a\n   self-contained\
    \ and compilable block of definitions and inclusions.\n   YANG structures data\
    \ models into modules for ease of use.\n   Within the context of Software-Defined\
    \ Networking (SDN) [RFC7149]\n   [RFC7426], YANG data modules may be used on the\
    \ interface between a\n   controller and network devices, as well as between network\n\
    \   orchestrators and controllers.  There may also be a hierarchy of such\n  \
    \ components with super controllers, domain controllers, and device\n   controllers\
    \ all exchanging information and instructions using YANG\n   modules.\n   There\
    \ has been interest in using YANG to define and document data\n   models that\
    \ describe services in a portable way that is independent\n   of which network\
    \ operator uses the model, for example, the Layer 3\n   Virtual Private Network\
    \ Service Model (L3SM) [RFC8049].  Such models\n   may be used in manual and even\
    \ paper-driven service request processes\n   with a gradual transition to IT-based\
    \ mechanisms.  Ultimately, they\n   could be used in online, software-driven dynamic\
    \ systems and may be\n   used as part of an SDN system.\n   This document explains\
    \ the scope and purpose of service models within\n   the IETF (and is limited\
    \ to within the scope of the IETF) and\n   describes how a service model can be\
    \ used by a network operator.\n   Equally, this document clarifies what a service\
    \ model is not and\n   dispels some common misconceptions.\n   The document also\
    \ shows where a service model might fit into an SDN\n   architecture, but it is\
    \ important to note that a service model does\n   not require or preclude the\
    \ use of SDN.  Note that service models do\n   not make any assumption of how\
    \ a service is actually engineered and\n   delivered to a customer; details of\
    \ how network protocols and devices\n   are engineered to deliver a service are\
    \ captured in other modules\n   that are not exposed through the interface between\
    \ the customer and\n   the provider.\n   In summary, a service model is a formal\
    \ representation of the data\n   elements that describe a network service as that\
    \ service is described\n   to or requested by a customer of a network operator.\
    \  Details\n   included in the service model include a description of the service\
    \ as\n   experienced by the customer, but not features of how that service is\n\
    \   delivered or realized by the service provider.\n   Other work on classifying\
    \ YANG modules has been done in [RFC8199].\n   That document provides an important\
    \ reference for this document and\n   also uses the term \"service module\". \
    \ In this document, Section 6.1\n   provides a comparison between these two uses\
    \ of the same terminology.\n"
- title: 2.  Terms and Concepts
  contents:
  - "2.  Terms and Concepts\n   Readers should familiarize themselves with the description\
    \ and\n   classification of YANG modules provided in [RFC8199].\n   The following\
    \ terms are used in this document:\n   Network Operator:  This term is used to\
    \ refer to the company that\n      owns and operates one or more networks that\
    \ provide Internet\n      connectivity services and/or other services.\n   Customer:\
    \  This term refers to someone who purchases a service\n      (including connectivity)\
    \ from a network operator.  In the context\n      of this document, a customer\
    \ is usually a company that runs their\n      own network or computing platforms\
    \ and wishes to connect to the\n      Internet or between sites.  Such a customer\
    \ may operate an\n      enterprise network or a data center.  Sometimes this term\
    \ may also\n      be used to refer to the individual in such a company who contracts\n\
    \      to buy services from a network operator.  A customer as described\n   \
    \   here is a separate commercial operation from the network operator,\n     \
    \ but some companies may operate with internal customers so that,\n      for example,\
    \ an IP/MPLS packet network may be the customer of an\n      optical transport\
    \ network.\n   Service:  A network operator delivers one or more services to a\n\
    \      customer.  A service in the context of this document (sometimes\n     \
    \ called a Network Service) is some form of connectivity between\n      customer\
    \ sites and the Internet or between customer sites across\n      the network operator's\
    \ network and across the Internet.  However,\n      a distinction should be drawn\
    \ between the parameters that describe\n      a service as included in a customer\
    \ service model (see the\n      definition of this term, below) and a Service\
    \ Level Agreement\n      (SLA), as discussed in Sections 5 and 7.2.\n      A service\
    \ may be limited to simple connectivity (such as IP-based\n      Internet access),\
    \ may be a tunnel (such as a virtual circuit), or\n      may involve more complex\
    \ connectivity (such as in a multisite\n      virtual private network).  Services\
    \ may be further enhanced by\n      additional functions providing security, load\
    \ balancing,\n      accounting, and so forth.  Additionally, services usually\
    \ include\n      guarantees of quality, throughput, and fault reporting.\n   \
    \   This document makes a distinction between a service as delivered\n      to\
    \ a customer (that is, the service as discussed on the interface\n      between\
    \ a customer and the network operator) and the service as\n      realized within\
    \ the network (as described in [RFC8199]).  This\n      distinction is discussed\
    \ further in Section 6.\n      Readers may also refer to [RFC7297] for an example\
    \ of how an IP\n      connectivity service may be characterized.\n   Data Model:\
    \  The information model (IM) and data model (DM) concepts\n      are described\
    \ in [RFC3444].  That document defines a data model by\n      contrasting it with\
    \ the definition of an IM as follows:\n         The main purpose of an IM is to\
    \ model managed objects at a\n         conceptual level, independent of any specific\
    \ implementations\n         or protocols used to transport the data.  The degree\
    \ of\n         specificity (or detail) of the abstractions defined in the IM\n\
    \         depends on the modeling needs of its designers.  In order to\n     \
    \    make the overall design as clear as possible, an IM should hide\n       \
    \  all protocol and implementation details.  Another important\n         characteristic\
    \ of an IM is that it defines relationships\n         between managed objects.\n\
    \         DMs, conversely, are defined at a lower level of abstraction\n     \
    \    and include many details.  They are intended for implementors\n         and\
    \ include protocol-specific constructs.\n      As mentioned in Section 1, this\
    \ document also uses the terms \"data\n      model\" and \"YANG module\" as defined\
    \ in [RFC7950].\n   Service Model:  A service model is a specific type of data\
    \ model.  It\n      describes a service and the parameters of the service in a\n\
    \      portable way that can be used uniformly and independent of the\n      equipment\
    \ and operating environment.  The service model may be\n      divided into the\
    \ two following categories:\n      Customer Service Model:  A customer service\
    \ model is used to\n         describe a service as offered or delivered to a customer\
    \ by a\n         network operator as shown in Figure 1.  It can be used by a\n\
    \         human (via a user interface such as a GUI, web form, or\n         Command-Line\
    \ Interface (CLI)) or by software to configure or\n         request a service\
    \ and may equally be consumed by a human (such\n         as via an order fulfillment\
    \ system) or by a software component.\n         Such models are sometimes referred\
    \ to simply as \"service\n         models\" [RFC8049].  A customer service model\
    \ is expressed in a\n         YANG module as a core set of parameters that are\
    \ common across\n         network operators: additional features that are specific\
    \ to the\n         offerings of individual network operators would be defined\
    \ in\n         extensions or augmentations of the module.  Except where\n    \
    \     specific technology details are directly pertinent to the\n         customer\
    \ (such as encapsulations or mechanisms applied on\n         access links), customer\
    \ service models are technology agnostic\n         so that the customer does not\
    \ have influence over or knowledge\n         of how the network operator engineers\
    \ the service.\n         An example of where such details are relevant to the\
    \ customer\n         is when they describe the behavior or interactions on the\n\
    \         interface between the equipment at the customer site (often\n      \
    \   referred to as the Customer Edge or CE equipment) and the\n         equipment\
    \ at the network operator's site (usually referred to\n         as the Provider\
    \ Edge or PE equipment).\n      Service Delivery Model:  A service delivery model\
    \ is used by a\n         network operator to define and manage how a service is\n\
    \         engineered in the network.  It can be used by a human operator\n   \
    \      (such as via a management station) or by a software tool to\n         instruct\
    \ network components.  The YANG modules that encode such\n         models are\
    \ sometimes referred to as \"network service YANG\n         modules\" [RFC8199]\
    \ and are consumed by \"external systems\" such\n         as an Operations Support\
    \ System (OSS).  A service delivery\n         module is expressed as a core set\
    \ of parameters that are common\n         across a network type and technology:\
    \ additional features that\n         are specific to the configuration of individual\
    \ vendor\n         equipment or proprietary protocols would be defined in\n  \
    \       extensions or augmentations of the module.  Service delivery\n       \
    \  modules include technology-specific modules.\n      The distinction between\
    \ a customer service model and a service\n      delivery model needs to be clarified.\
    \  The modules that encode a\n      customer service model are not used to directly\
    \ configure network\n      devices, protocols, or functions: it is not something\
    \ that is sent\n      to network devices (i.e., routers or switches) for processing.\n\
    \      Equally, the modules that encode a customer service model do not\n    \
    \  describe how a network operator realizes and delivers the service\n      described\
    \ by the module.  This distinction is discussed further in\n      later sections.\n"
- title: 3.  Using Service Models
  contents:
  - "3.  Using Service Models\n   As already indicated, customer service models are\
    \ used on the\n   interface between customers and network operators.  This is\
    \ shown in\n   Figure 1.\n   The language in which a customer service model is\
    \ described is a\n   choice for whoever specifies the model.  The IETF uses the\
    \ YANG data\n   modeling language defined in [RFC6020].\n   The encoding and communication\
    \ protocol used to exchange a customer\n   service model between the customer\
    \ and network operator is specific\n   to deployment and implementation.  The\
    \ IETF has standardized the\n   NETCONF protocol [RFC6241] and the RESTCONF protocol\
    \ [RFC8040] for\n   interactions \"on the wire\" between software components with\
    \ data\n   encoded in XML or JSON.  However, co-located software components\n\
    \   might use an internal API, while systems with more direct human\n   interactions\
    \ might use web pages or even paper forms.  Where direct\n   human interaction\
    \ comes into play, interface interactions may be\n   realized via business practices\
    \ that may introduce some margin of\n   error, thus raising the priority for automated,\
    \ deterministic\n   interfaces.\n            --------------       Customer   \
    \     ----------------------\n           |              |    Service Model   \
    \ |                      |\n           |   Customer   | <-----------------> |\
    \   Network Operator   |\n           |              |                     |  \
    \                    |\n            --------------                       ----------------------\n\
    \    Figure 1: The Customer Service Models Used on the Interface between\n   \
    \                   Customers and Network Operators\n   How a network operator\
    \ processes a customer's service request when\n   described with a customer service\
    \ model depends on the commercial and\n   operational tools, processes, and policies\
    \ used by the network\n   operator.  These may vary considerably from one network\
    \ operator to\n   another.\n   However, the intent is that the network operator\
    \ maps the service\n   request into configuration and operational parameters that\
    \ control\n   one or more networks to deliver the requested services.  That means\n\
    \   that the network operator (or software run by the network operator)\n   takes\
    \ the information in the customer service model and determines\n   how to deliver\
    \ the service by enabling and configuring network\n   protocols and devices. \
    \ They may achieve this by constructing service\n   delivery models and passing\
    \ them to network orchestrators or\n   controllers.  The use of standard customer\
    \ service models eases\n   service delivery by means of automation.\n"
- title: 3.1.  Practical Considerations
  contents:
  - "3.1.  Practical Considerations\n   The practicality of customer service models\
    \ has been repeatedly\n   debated.  It has been suggested that network operators\
    \ have radically\n   different business models and widely diverse commercial offerings,\n\
    \   which makes a common customer service model impractical.  However,\n   L3SM\
    \ [RFC8049] results from the consensus of multiple individuals\n   working at\
    \ network operators and offers a common core of service\n   options that can be\
    \ augmented according to the needs of individual\n   network operators.\n   It\
    \ has also been suggested that there should be a single, base\n   customer service\
    \ module, and that details of individual services\n   should be offered as extensions\
    \ or augmentations of this.  It is\n   quite possible that a number of service\
    \ parameters (such as the\n   identity and postal address of a customer) will\
    \ be common, and it\n   would be a mistake to define them multiple times (once\
    \ in each\n   customer service model).  However, the distinction between a 'module'\n\
    \   and a 'model' should be considered at this point: modules are how the\n  \
    \ data for models is logically broken out and documented, especially\n   for reuse\
    \ in multiple models.\n"
- title: 4.  Service Models in an SDN Context
  contents:
  - "4.  Service Models in an SDN Context\n   In an SDN system, the management of\
    \ network resources and protocols\n   is performed by software systems that determine\
    \ how best to utilize\n   the network.  Figure 2 shows a sample architectural\
    \ view of an SDN\n   system where network elements are programmed by a component\
    \ called an\n   \"SDN controller\" (or \"controller\" for short) and where controllers\n\
    \   are instructed by an orchestrator that has a wider view of the whole\n   of,\
    \ or part of, a network.  The internal organization of an SDN\n   control plane\
    \ is specific to deployment.\n                            ------------------\n\
    \                           |                  |\n                           |\
    \   Orchestrator   |\n                           |                  |\n      \
    \                     .------------------.\n                          .      \
    \    :         .\n                         .           :          .\n        \
    \      ------------     ------------     ------------\n             |        \
    \    |   |            |   |            |\n             | Controller |   | Controller\
    \ |   | Controller |\n             |            |   |            |   |       \
    \     |\n              ------------     ------------     ------------\n      \
    \           :              .       .               :\n                 :     \
    \        .         .              :\n                 :            .         \
    \  .             :\n             ---------     ---------   ---------     ---------\n\
    \            | Network |   | Network | | Network |   | Network |\n           \
    \ | Element |   | Element | | Element |   | Element |\n             ---------\
    \     ---------   ---------     ---------\n                    Figure 2: A Sample\
    \ SDN Architecture\n   A customer's service request is (or should be) technology\
    \ agnostic.\n   That is, a customer is unaware of the technology that the network\n\
    \   operator has available to deliver the service, so the customer does\n   not\
    \ make requests specific to the underlying technology but is\n   limited to making\
    \ requests specific to the service that is to be\n   delivered.  The orchestrator\
    \ must map the service request to its\n   view, and this mapping may include a\
    \ choice of which networks and\n   technologies to use depending on which service\
    \ features have been\n   requested.\n   One implementation option to achieve this\
    \ mapping is to split the\n   orchestration function between a \"Service Orchestrator\"\
    \ and a\n   \"Network Orchestrator\" as shown in Figure 3.\n                 \
    \                                Customer\n                            ------------------\
    \   Service  ----------\n                           |                  |  Model\
    \   |          |\n                           |     Service      |<-------->| Customer\
    \ |\n                           |   Orchestrator   |    (a)   |          |\n \
    \                          |                  |           ----------\n       \
    \                     ------------------\n                               .   \
    \       .\n                              .            .        (b)   -----------\n\
    \                             . (b)          .      ......|Application|\n    \
    \                        .                .     :     |  BSS/OSS  |\n        \
    \                   .                  .    :      -----------\n             \
    \             .  Service Delivery  .   :\n                          .       Model\
    \        .   :\n                 ------------------    ------------------\n  \
    \              |                  |  |                  |\n                | \
    \    Network      |  |     Network      |\n                |   Orchestrator  \
    \ |  |   Orchestrator   |\n                |                  |  |           \
    \       |\n                .------------------    ------------------.\n      \
    \         .         :                       :        .\n              .      \
    \    : Network Configuration :         .\n              .          :        Model\
    \          :         .\n      ------------     ------------     ------------ \
    \   ------------\n     |            |   |            |   |            |  |   \
    \         |\n     | Controller |   | Controller |   | Controller |  | Controller\
    \ |\n     |            |   |            |   |            |  |            |\n \
    \     ------------     ------------     ------------    ------------\n       \
    \  :              .       .                 :            :\n         :       \
    \      .         .      Device    :            :\n         :            .    \
    \       . Configuration :            :\n         :            .           .  \
    \   Model     :            :\n     ---------     ---------   ---------     ---------\
    \      ---------\n    | Network |   | Network | | Network |   | Network |    |\
    \ Network |\n    | Element |   | Element | | Element |   | Element |    | Element\
    \ |\n     ---------     ---------   ---------     ---------      ---------\n \
    \    Figure 3: An Example SDN Architecture with a Service Orchestrator\n   Figure\
    \ 3 also shows where different data models might be applied\n   within the architecture.\
    \  The device configuration models are used by\n   a controller to set parameters\
    \ on an individual network element.  The\n   network configuration models are\
    \ used by a network orchestrator to\n   instruct controllers (which may each be\
    \ responsible for multiple\n   network elements) how to configure parts of a network.\n\
    \   The following examples illustrate the split between control\n   components\
    \ that expose a \"service interface\" that is present in many\n   figures that\
    \ show extended SDN architectures:\n   o  Figure 1 of [RFC7426] shows a separation\
    \ of the \"Application\n      Plane\", the \"Network Services Abstraction Layer\
    \ (NSAL)\", and the\n      \"Control Plane\".  It marks the \"Service Interface\"\
    \ as situated\n      between the NSAL and the control plane.\n   o  Figure 1 of\
    \ [RFC7491] shows an interface between an \"Application\n      Service Coordinator\"\
    \ and an \"Application-Based Network Operations\n      Controller\".\n   o  Figure\
    \ 1 of [RFC8199] shows an interface from an OSS or a Business\n      Support System\
    \ (BSS) that is expressed in \"Network Service YANG\n      Modules\".\n   This\
    \ can all lead to some confusion around the definition of a\n   \"service interface\"\
    \ and a \"service model\".  Some previous literature\n   considers the interface\
    \ northbound of the network orchestrator\n   (labeled \"(b)\" in Figure 3) to\
    \ be a \"service interface\" used by an\n   application, but the service described\
    \ at this interface is network\n   centric and is aware of many features, such\
    \ as topology, technology,\n   and operator policy.  Thus, we make a distinction\
    \ between this type\n   of service interface and the more abstract service interface\
    \ (labeled\n   \"(a)\" in Figure 3) where the service is described by a service\
    \ model\n   and the interaction is between the customer and network operator.\n\
    \   Further discussion of this point is provided in Section 5.\n"
- title: 5.  Possible Causes of Confusion
  contents:
  - "5.  Possible Causes of Confusion\n   In discussing service models, there are\
    \ several possible causes of\n   confusion:\n   o  The services we are discussing\
    \ are connectivity services provided\n      by network operators to customers;\
    \ the services are achieved by\n      manipulating the network resources of the\
    \ operator's network.\n      This is a completely different thing to \"Foo as\
    \ a Service\" (for\n      example, Storage as a Service (SaaS)) where a service\
    \ provider\n      offers reachability to a value-added service that is provided\
    \ at\n      some location in the network using other resources (compute,\n   \
    \   storage, ...) that are not part of the network itself.  The\n      confusion\
    \ arises not only because of the use of the word \"service\"\n      in both cases,\
    \ but also because network operators may offer both\n      types of service to\
    \ their customers.\n   o  Network operation is normally out of scope in the discussion\
    \ of\n      services between a network operator and a customer.  That means\n\
    \      that the customer service model does not reveal to the customer\n     \
    \ anything about how the network operator delivers the service, nor\n      does\
    \ the model expose details of technology or network resources\n      used to provide\
    \ the service (all of these details could, in any\n      case, be considered security\
    \ vulnerabilities).  For example, in\n      the simple case of point-to-point\
    \ virtual link connectivity\n      provided by a network tunnel (such as an MPLS\
    \ pseudowire), the\n      network operator does not expose the path through the\
    \ network that\n      the tunnel follows.  Of course, this does not preclude the\
    \ network\n      operator from taking guidance from the customer (such as to avoid\n\
    \      routing traffic through a particular country) or from disclosing\n    \
    \  specific details (such as might be revealed by a route trace), but\n      these\
    \ are not standard features of the service as described in the\n      customer\
    \ service model.\n   o  The network operator may use further data models (service\
    \ delivery\n      models) that help to describe how the service is realized in\
    \ the\n      network.  These models might be used on the interface between the\n\
    \      service orchestrator and the network orchestrator, as shown in\n      Figure\
    \ 3, and might include many of the pieces of information from\n      the customer\
    \ service model alongside protocol parameters and\n      device configuration\
    \ information.  [RFC8199] also terms these data\n      models as \"service models\"\
    \ and encodes them as \"Network Service\n      YANG Modules\"; a comparison is\
    \ provided in Section 6.1.  It is\n      important that the service orchestrator\
    \ be able to map from a\n      customer service model to these service delivery\
    \ models, but they\n      are not the same thing.\n   o  Commercial terms (such\
    \ as \"cost per byte\", \"cost per minute\", and\n      \"scoped by quality and\
    \ type of service\", as well as terms related\n      to payment) are generally\
    \ not a good subject for standardization.\n      It is possible that some network\
    \ operators will enhance standard\n      customer service models to include commercial\
    \ information, but the\n      way this is done is likely to vary widely between\
    \ network\n      operators.  Thus, this feature is out of scope for standardized\n\
    \      customer service models.\n   o  SLAs have a high degree of overlap with\
    \ the definition of services\n      present in customer service models.  Requests\
    \ for specific\n      bandwidth, for example, might be present in a customer service\n\
    \      model, and agreement to deliver a service is a commitment to the\n    \
    \  description of the service in the customer service model.\n      However, SLAs\
    \ typically include a number of fine-grained details\n      about how services\
    \ are allowed to vary, by how much, and how\n      often.  SLAs are also linked\
    \ to commercial terms with penalties\n      and so forth and thus are also not\
    \ good topics for\n      standardization.  As with commercial terms, it is expected\
    \ that\n      some network operators will enhance standard customer service\n\
    \      models to include SLA parameters either using their own work or\n     \
    \ depending on material from standards bodies that specialize in\n      this topic,\
    \ but this feature is out of scope for the IETF's\n      customer service models.\n\
    \      If a network operator chooses to express an SLA using a data\n      model,\
    \ that model might be referenced as an extension or an\n      augmentation of\
    \ the customer service model.\n"
- title: 6.  Comparison with Other Work
  contents:
  - "6.  Comparison with Other Work\n   Other work has classified YANG modules, produced\
    \ parallel\n   architectures, and developed a range of YANG modules.  This section\n\
    \   briefly examines that other work and shows how it fits with the\n   description\
    \ of service models introduced in this document.\n"
- title: 6.1.  Comparison with Network Service Models
  contents:
  - "6.1.  Comparison with Network Service Models\n   As previously noted, [RFC8199]\
    \ provides a classification of YANG\n   modules.  It introduces the term \"Network\
    \ Service YANG Module\" to\n   identify the type of module used to \"describe\
    \ the configuration,\n   state data, operations, and notifications of abstract\
    \ representations\n   of services implemented on one or multiple network elements.\"\
    \  These\n   modules are used to construct the service delivery models as\n  \
    \ described in this document; that is, they are the modules used on the\n   interface\
    \ between the service orchestrator or OSS/BSS and the network\n   orchestrator,\
    \ as shown in Figure 3.\n   Figure 1 of [RFC8199] can be modified to make this\
    \ more clear and to\n   include an additional example of a Network Service YANG\
    \ module, as\n   shown in Figure 4.  As can be seen, the highest classification\
    \ of\n   modules collects those that are used to deliver operations support\n\
    \   and business support.  These might be consumed by an Operations\n   Support\
    \ System (OSS) or a Business Support System (BSS), and a\n   service orchestrator\
    \ may form part of an OSS/BSS or may be a separate\n   component.  This highest\
    \ layer in the figure is divided into the\n   customer service modules that are\
    \ used to describe services to a\n   customer as discussed in this document, and\
    \ other modules that\n   describe further OSS/BSS functions such as billing and\
    \ SLAs.\n       - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\
    \ -\n       Operations Support and Business Support YANG Modules\n       +-----------------------+\
    \     +-----------------------+\n       |                       |     |      \
    \                 |\n       |    Customer Service   |     |         Other    \
    \     |\n       |      YANG Modules     |     |  Operations Support   |\n    \
    \   |                       |     |          and          |\n       |  +------+\
    \   +------+  |     |    Business Support   |\n       |  |      |   |      | \
    \ |     |      YANG Modules     |\n       |  | L2SM |   | L3SM |  |     |    \
    \                   |\n       |  |      |   |      |  |     |                \
    \       |\n       |  +------+   +------+  |     |                       |\n  \
    \     |                       |     |                       |\n       +-----------------------+\
    \     +-----------------------+\n       - - - - - - - - - - - - - - - - - - -\
    \ - - - - - - - - - - - - -\n       Network Service YANG Modules\n      +------------+\
    \  +-------------+  +-------------+  +-------------+\n      |            |  |\
    \             |  |             |  |             |\n      |  - L2VPN   |  |   -\
    \ L2VPN   |  |    EVPN     |  |    L3VPN    |\n      |  - VPWS    |  |   - VPLS\
    \    |  |             |  |             |\n      |            |  |            \
    \ |  |             |  |             |\n      +------------+  +-------------+ \
    \ +-------------+  +-------------+\n       - - - - - - - - - - - - - - - - - -\
    \ - - - - - - - - - - - - - -\n       Network Element YANG Modules\n       +------------+\
    \  +------------+  +-------------+  +------------+\n       |            |  | \
    \           |  |             |  |            |\n       |    MPLS    |  |    BGP\
    \     |  | IPv4 / IPv6 |  |  Ethernet  |\n       |            |  |           \
    \ |  |             |  |            |\n       +------------+  +------------+  +-------------+\
    \  +------------+\n       Key:\n          EVPN: Ethernet Virtual Private Network\n\
    \          L2SM: Layer 2 Virtual Private Network Service Model\n          L2VPN:\
    \ Layer 2 Virtual Private Network\n          L3SM: Layer 3 Virtual Private Network\
    \ Service Model\n          L3VPN: Layer 3 Virtual Private Network\n          VPLS:\
    \ Virtual Private LAN Service\n          VPWS: Virtual Private Wire Service\n\
    \             Figure 4: YANG Module Abstraction Layers Showing\n             \
    \            Customer Service Modules\n"
- title: 6.2.  Service Delivery and Network Element Model Work
  contents:
  - "6.2.  Service Delivery and Network Element Model Work\n   A number of IETF working\
    \ groups are developing YANG modules related\n   to services.  These models focus\
    \ on how the network operator\n   configures the network through protocols and\
    \ devices to deliver a\n   service.  Some of these models are classified as network\
    \ service\n   delivery models (also called service delivery models or network\n\
    \   configuration models depending on the level at which they are\n   pitched),\
    \ while others have details that are related to specific\n   element configuration\
    \ and so are classed as network element models\n   (also called device models).\n\
    \   A sample set of these models is listed here:\n   o  [BGP-L3VPN-YANG] defines\
    \ a YANG module that can be used to\n      configure and manage BGP L3VPNs.\n\
    \   o  [L2VPN-YANG] documents a data model that is expected to be used by\n  \
    \    the management tools run by the network operators in order to\n      manage\
    \ and monitor the network resources that they use to deliver\n      L2VPN services.\n\
    \   o  [EVPN-YANG] defines YANG modules for delivering an Ethernet VPN\n     \
    \ service.\n"
- title: 6.3.  Customer Service Model Work
  contents:
  - "6.3.  Customer Service Model Work\n   Several initiatives within the IETF are\
    \ developing customer service\n   models.  The L3SM presents the L3VPN service,\
    \ as described by a\n   network operator, to a customer.  Figure 5, which is reproduced\
    \ from\n   [RFC8049], shows that the L3SM is a customer service model as\n   described\
    \ in this document.\n               L3VPN-SVC |\n                 MODEL   |\n\
    \                         |\n                      +------------------+      \
    \   +-----+\n                      |   Orchestration  | < --- > | OSS |\n    \
    \                  +------------------+         +-----+\n                    \
    \     |            |\n                 +----------------+   |\n              \
    \   | Config manager |   |\n                 +----------------+   |\n        \
    \                 |            |\n                         | Netconf/CLI ...\n\
    \                         |            |\n           +------------------------------------------------+\n\
    \                                Network\n                  Figure 5: The L3SM\
    \ Service Architecture\n   A Layer 2 VPN Service Model (L2SM) is defined in [L2VPN-SERVICE].\n\
    \   That model's usage is described as in Figure 6, which is a\n   reproduction\
    \ of Figure 5 from that document.  As can be seen, the\n   L2SM is a customer\
    \ service model as described in this document.\n             ----------------------------\n\
    \            | Customer Service Requester |\n             ----------------------------\n\
    \                 |\n         L2VPN   |\n         Service |\n         Model  \
    \ |\n                 |\n               -----------------------\n            \
    \  | Service Orchestration |\n               -----------------------\n       \
    \          |\n                 |     Service             +-------------+\n   \
    \              |     Delivery    +------>| Application |\n                 | \
    \    Model       |       |   BSS/OSS   |\n                 |                 V\
    \       +-------------+\n               -----------------------\n            \
    \  | Network Orchestration |\n               -----------------------\n       \
    \          |            |\n         +----------------+   |\n         | Config\
    \ manager |   |\n         +----------------+   |  Device\n                 | \
    \           |  Models\n                 |            |\n      --------------------------------------------\n\
    \                        Network\n                  Figure 6: The L2SM Service\
    \ Architecture\n"
- title: 6.4.  The MEF Architecture
  contents:
  - "6.4.  The MEF Architecture\n   The MEF Forum (MEF) has developed an architecture\
    \ for network\n   management and operation.  It is documented as the Lifecycle\
    \ Service\n   Orchestration (LSO) Reference Architecture and is illustrated in\n\
    \   Figure 2 of [MEF-55].\n   The work of the MEF embraces all aspects of Lifecycle\
    \ Service\n   Orchestration, including billing, SLAs, order management, and\n\
    \   lifecycle management.  The IETF's work on service models is typically\n  \
    \ smaller and offers a simple, self-contained service YANG module.\n   This does\
    \ not invalidate either approach: it only observes that they\n   are different\
    \ approaches.\n"
- title: 7.  Further Concepts
  contents:
  - "7.  Further Concepts\n   This section introduces a few further, more advanced\
    \ concepts.\n"
- title: 7.1.  Technology Agnostic
  contents:
  - "7.1.  Technology Agnostic\n   Service models should generally be technology agnostic.\
    \  That is to\n   say, the customer should not care how the service is provided\
    \ so long\n   as the service is delivered.\n   However, some technologies reach\
    \ to the customer site and impact the\n   type of service delivered.  Such features\
    \ do need to be described in\n   the service model.\n   Two examples are as follows:\n\
    \   o  The data passed between customer equipment and network operator\n     \
    \ equipment will be encapsulated in a specific way, and that data-\n      plane\
    \ type forms part of the service.\n   o  Protocols that are run between customer\
    \ equipment and network\n      operator equipment (for example, Operations, Administration,\
    \ and\n      Maintenance (OAM) protocols, protocols for discovery, or protocols\n\
    \      for exchanging routing information) need to be selected and\n      configured\
    \ as part of the service description.\n"
- title: 7.2.  Relationship to Policy
  contents:
  - "7.2.  Relationship to Policy\n   Policy appears as a crucial function in many\
    \ places during network\n   orchestration.  A service orchestrator will, for example,\
    \ apply the\n   network operator's policies to determine how to provide a service\
    \ for\n   a particular customer (possibly considering commercial terms).\n   However,\
    \ the policies within a service model are limited to those\n   over which a customer\
    \ has direct influence and that are acted on by\n   the network operator.\n  \
    \ The policies that express desired behavior of services on occurrence\n   of\
    \ specific events are close to SLA definitions: they should only be\n   included\
    \ in the base service model where they are common offerings of\n   all network\
    \ operators.  Policies that describe which person working\n   for a customer may\
    \ request or modify services (that is,\n   authorization) are close to commercial\
    \ terms: they, too, should only\n   be included in the base service model where\
    \ they are common offerings\n   of all network operators.\n   As with commercial\
    \ terms and SLAs discussed in Section 5, it is\n   expected that some network\
    \ operators will enhance standard customer\n   service models to include policy\
    \ parameters either using their own\n   work or depending on specific policy models\
    \ built in the IETF or\n   other standards bodies.\n   Nevertheless, policy is\
    \ so important that all service models should\n   be designed to be easily extensible\
    \ to allow policy components to be\n   added and associated with services as needed.\n"
- title: 7.3.  Operator-Specific Features
  contents:
  - "7.3.  Operator-Specific Features\n   When work on the L3SM was started, there\
    \ was some doubt as to whether\n   network operators would be able to agree on\
    \ a common description of\n   the services that they offer to their customers\
    \ because, in a\n   competitive environment, each markets the services in a different\
    \ way\n   with different additional features.  However, the working group was\n\
    \   able to agree on a core set of features that multiple network\n   operators\
    \ were willing to consider as \"common\".  They also understood\n   that, should\
    \ an individual network operator want to describe\n   additional features (operator-specific\
    \ features), they could do so by\n   extending or augmenting the L3SM model.\n\
    \   Thus, when a basic description of a core service is agreed upon and\n   documented\
    \ in a service model, it is important that that model be\n   easily extended or\
    \ augmented by each network operator so that the\n   standardized model can be\
    \ used in a common way and only the operator-\n   specific features be varied\
    \ from one environment to another.\n"
- title: 7.4.  Supporting Multiple Services
  contents:
  - "7.4.  Supporting Multiple Services\n   Network operators will, in general, offer\
    \ many different services to\n   their customers.  Each would normally be the\
    \ subject of a separate\n   service model.\n   Whether each service model is handled\
    \ by a specialized service\n   orchestrator that is able to provide tuned behavior\
    \ for a specific\n   service, or whether all service models are handled by a single\n\
    \   service orchestrator, is an implementation and deployment choice.\n   It is\
    \ expected that, over time, certain elements of the service\n   models will be\
    \ seen to repeat in each model.  An example of such an\n   element is the postal\
    \ address of the customer.\n   It is anticipated that, while access to such information\
    \ from each\n   service model is important, the data will be described in its\
    \ own\n   module and may form part of the service model either by inclusion or\n\
    \   by index.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The interface between customer and service provider\
    \ is a commercial\n   interface, and it needs to be subject to appropriate confidentiality.\n\
    \   Additionally, knowledge of what services are provided to a customer\n   or\
    \ delivered by a network operator may supply information that can be\n   used\
    \ in a variety of security attacks.  The service model itself will\n   expose\
    \ security-related parameters for the specific service where the\n   related function\
    \ is available to the customer.\n   Clearly, the ability to modify information\
    \ exchanges between customer\n   and network operator may result in bogus requests,\
    \ unwarranted\n   billing, and false expectations.  Furthermore, in an automated\n\
    \   system, modifications to service requests or the injection of bogus\n   requests\
    \ may lead to attacks on the network and delivery of customer\n   traffic to the\
    \ wrong place.\n   Therefore, it is important that the protocol interface used\
    \ to\n   exchange service request information between customer and network\n \
    \  operator is subject to authorization, authentication, and encryption.\n   Clearly,\
    \ the level of abstraction provided by a service model\n   protects the operator\
    \ from unwarranted visibility into their network,\n   and additional protection\
    \ is provided by the fact that how the\n   service is delivered is entirely up\
    \ to the operator.\n   Equally, all external interfaces, such as any of those\
    \ between the\n   functional components in Figure 3, need to be correctly secured.\n\
    \   This document discusses modeling the information, not how it is\n   exchanged.\n"
- title: 9.  Manageability Considerations
  contents:
  - "9.  Manageability Considerations\n   This whole document discusses issues related\
    \ to network management\n   and control.\n   It is important to observe that automated\
    \ service provisioning\n   resulting from use of a customer service model may\
    \ result in rapid\n   and significant changes in traffic load within a network\
    \ and that\n   that might have an effect on other services carried in a network.\n\
    \   It is expected, therefore, that a service-orchestration component has\n  \
    \ awareness of other service commitments, that the network-\n   orchestration\
    \ component will not commit network resources to fulfill\n   a service unless\
    \ doing so is appropriate, and that a feedback loop\n   will be provided to report\
    \ on degradation of the network that will\n   impact the service.\n   The operational\
    \ state of a service does not form part of a customer\n   service model.  However,\
    \ it is likely that a network operator may\n   want to report some state information\
    \ about various components of the\n   service and that could be achieved through\
    \ extensions to the core\n   service model, just as SLA extensions could be made\
    \ as described in\n   Section 5.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC3444]  Pras, A. and J. Schoenwaelder, \"\
    On the Difference between\n              Information Models and Data Models\"\
    , RFC 3444,\n              DOI 10.17487/RFC3444, January 2003,\n             \
    \ <https://www.rfc-editor.org/info/rfc3444>.\n   [RFC8199]  Bogdanovic, D., Claise,\
    \ B., and C. Moberg, \"YANG Module\n              Classification\", RFC 8199,\
    \ DOI 10.17487/RFC8199, July\n              2017, <https://www.rfc-editor.org/info/rfc8199>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [BGP-L3VPN-YANG]\n              Jain, D., Patel,\
    \ K., Brissette, P., Li, Z., Zhuang, S.,\n              Liu, X., Haas, J., Esale,\
    \ S., and B. Wen, \"Yang Data Model\n              for BGP/MPLS L3 VPNs\", Work\
    \ in Progress, draft-dhjain-\n              bess-bgp-l3vpn-yang-02, August 2016.\n\
    \   [EVPN-YANG]\n              Brissette, P., Sajassi, A., Shah, H., Li, Z.,\n\
    \              Tiruveedhula, K., Hussain, I., and J. Rabadan, \"Yang Data\n  \
    \            Model for EVPN\", Work in Progress, draft-ietf-bess-evpn-\n     \
    \         yang-03, October 2017.\n   [L2VPN-SERVICE]\n              Wen, B., Fioccola,\
    \ G., Xie, C., and L. Jalil, \"A YANG Data\n              Model for L2VPN Service\
    \ Delivery\", Work in Progress,\n              draft-ietf-l2sm-l2vpn-service-model-04,\
    \ October 2017.\n   [L2VPN-YANG]\n              Shah, H., Brissette, P., Chen,\
    \ I., Hussain, I., Wen, B.,\n              and K. Tiruveedhula, \"YANG Data Model\
    \ for MPLS-based\n              L2VPN\", Work in Progress, draft-ietf-bess-l2vpn-yang-07,\n\
    \              October 2017.\n   [MEF-55]   MEF Forum, \"Lifecycle Service Orchestration\
    \ (LSO):\n              Reference Architecture and Framework\", Service Operations\n\
    \              Specification MEF 55, March 2016.\n   [RFC6020]  Bjorklund, M.,\
    \ Ed., \"YANG - A Data Modeling Language for\n              the Network Configuration\
    \ Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020, October\
    \ 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n   [RFC6241]\
    \  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and\
    \ A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\"\
    , RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC7149]  Boucadair, M. and C. Jacquenet, \"Software-Defined\n          \
    \    Networking: A Perspective from within a Service Provider\n              Environment\"\
    , RFC 7149, DOI 10.17487/RFC7149, March 2014,\n              <https://www.rfc-editor.org/info/rfc7149>.\n\
    \   [RFC7223]  Bjorklund, M., \"A YANG Data Model for Interface\n            \
    \  Management\", RFC 7223, DOI 10.17487/RFC7223, May 2014,\n              <https://www.rfc-editor.org/info/rfc7223>.\n\
    \   [RFC7297]  Boucadair, M., Jacquenet, C., and N. Wang, \"IP\n             \
    \ Connectivity Provisioning Profile (CPP)\", RFC 7297,\n              DOI 10.17487/RFC7297,\
    \ July 2014,\n              <https://www.rfc-editor.org/info/rfc7297>.\n   [RFC7407]\
    \  Bjorklund, M. and J. Schoenwaelder, \"A YANG Data Model for\n             \
    \ SNMP Configuration\", RFC 7407, DOI 10.17487/RFC7407,\n              December\
    \ 2014, <https://www.rfc-editor.org/info/rfc7407>.\n   [RFC7426]  Haleplidis,\
    \ E., Ed., Pentikousis, K., Ed., Denazis, S.,\n              Hadi Salim, J., Meyer,\
    \ D., and O. Koufopavlou, \"Software-\n              Defined Networking (SDN):\
    \ Layers and Architecture\n              Terminology\", RFC 7426, DOI 10.17487/RFC7426,\
    \ January\n              2015, <https://www.rfc-editor.org/info/rfc7426>.\n  \
    \ [RFC7491]  King, D. and A. Farrel, \"A PCE-Based Architecture for\n        \
    \      Application-Based Network Operations\", RFC 7491,\n              DOI 10.17487/RFC7491,\
    \ March 2015,\n              <https://www.rfc-editor.org/info/rfc7491>.\n   [RFC7950]\
    \  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n            \
    \  RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n       \
    \       Protocol\", RFC 8040, DOI 10.17487/RFC8040, January 2017,\n          \
    \    <https://www.rfc-editor.org/info/rfc8040>.\n   [RFC8049]  Litkowski, S.,\
    \ Tomotaki, L., and K. Ogaki, \"YANG Data\n              Model for L3VPN Service\
    \ Delivery\", RFC 8049,\n              DOI 10.17487/RFC8049, February 2017,\n\
    \              <https://www.rfc-editor.org/info/rfc8049>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Daniel King, Xian Zhang, Michael Scharf, Med Boucadair,\n\
    \   Luis Miguel Contreras Murillo, Joe Salowey, Benoit Claise, Robert\n   Sparks,\
    \ Tom Petch, David Sinicrope, and Deborah Brungard for their\n   useful review\
    \ and comments.\n   Thanks to Dean Bogdanovic, Tianran Zhou, and Carl Moberg for\
    \ their\n   help coordinating with [RFC8199].\n   Many thanks to Jerry Bonner\
    \ for spotting a tiny but critical,\n   one-word typo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Qin Wu\n   Huawei Technologies\n   Email: bill.wu@huawei.com\n\
    \   Will Liu\n   Huawei Technologies\n   Email: liushucheng@huawei.com\n   Adrian\
    \ Farrel\n   Juniper Networks\n   Email: afarrel@juniper.net\n"
