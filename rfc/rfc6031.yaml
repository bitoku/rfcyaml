- title: __initial_text__
  contents:
  - ' Cryptographic Message Syntax (CMS) Symmetric Key Package Content Type

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines the symmetric key format content type.  It\
    \ is\n   transport independent.  The Cryptographic Message Syntax (CMS) can be\n\
    \   used to digitally sign, digest, authenticate, or encrypt this content\n  \
    \ type.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6031.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction...................................................3\n\
    \      1.1. Requirements Terminology..................................3\n    \
    \  1.2. ASN.1 Syntax Notation.....................................3\n   2. Symmetric\
    \ Key Package Content Type.............................3\n   3. PSKC Attributes................................................4\n\
    \      3.1. PSKC Key Package Attributes...............................5\n    \
    \     3.1.1. Device Information Attributes........................5\n        \
    \ 3.1.2. Cryptographic Module Information Attributes..........8\n      3.2. PSKC\
    \ Key Attributes.......................................8\n         3.2.1. Key\
    \ Identifier.......................................8\n         3.2.2. Algorithm............................................9\n\
    \         3.2.3. Issuer...............................................9\n    \
    \     3.2.4. Key Profile Identifier...............................9\n        \
    \ 3.2.5. Key Reference Identifier.............................9\n         3.2.6.\
    \ Friendly Name.......................................10\n         3.2.7. Algorithm\
    \ Parameters................................10\n         3.2.8. Counter.............................................12\n\
    \         3.2.9. Time................................................13\n    \
    \     3.2.10. Time Interval......................................13\n        \
    \ 3.2.11. Time Drift.........................................13\n         3.2.12.\
    \ Value MAC..........................................13\n         3.2.13. Key\
    \ User Id........................................14\n      3.3. Key Policy Attributes....................................14\n\
    \         3.3.1. Key Start Date......................................14\n    \
    \     3.3.2. Key Expiry Date.....................................15\n        \
    \ 3.3.3. Number of Transactions..............................15\n         3.3.4.\
    \ Key Usage...........................................15\n         3.3.5. PIN\
    \ Policy..........................................16\n   4. Key Encoding..................................................18\n\
    \      4.1. AES Key Encoding.........................................18\n    \
    \  4.2. Triple-DES Key Encoding..................................18\n   5. Security\
    \ Considerations.......................................19\n   6. IANA Considerations...........................................19\n\
    \   7. References....................................................19\n    \
    \  7.1. Normative References.....................................19\n      7.2.\
    \ Informative References...................................21\n   Appendix A.\
    \ ASN.1 Module.........................................22\n      A.1. Symmetric\
    \ Key Package ASN.1 Module.......................22\n      A.2. PSKC ASN.1 Module........................................23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines the symmetric key format content type.\
    \  It is\n   transport independent.  The Cryptographic Message Syntax (CMS)\n\
    \   [RFC5652] can be used to digitally sign, digest, authenticate, or\n   encrypt\
    \ this content type.\n   The use cases that motivated the attributes in this work\
    \ are\n   elaborated in [RFC6030].  They are omitted to avoid duplication.\n \
    \  This document also includes ASN.1 definitions of the Extensible\n   Markup\
    \ Language (XML) element and attributes defined in [RFC6030].\n"
- title: 1.1.  Requirements Terminology
  contents:
  - "1.1.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2.  ASN.1 Syntax Notation
  contents:
  - "1.2.  ASN.1 Syntax Notation\n   The key package is defined using the ASN.1 in\
    \ [X.680], [X.681],\n   [X.682], and [X.683].\n"
- title: 2.  Symmetric Key Package Content Type
  contents:
  - "2.  Symmetric Key Package Content Type\n   The symmetric key package content\
    \ type is used to transfer one or\n   more plaintext symmetric keys from one party\
    \ to another.  A symmetric\n   key package MAY be encapsulated in one or more\
    \ CMS protecting content\n   types.  This content type MUST be Distinguished Encoding\
    \ Rules (DER)\n   encoded [X.690].\n   The symmetric key package content type\
    \ has the following syntax:\n     ct-symmetric-key-package CONTENT-TYPE ::=\n\
    \         { TYPE SymmetricKeyPackage IDENTIFIED BY id-ct-KP-sKeyPackage }\n  \
    \   id-ct-KP-sKeyPackage OBJECT IDENTIFIER ::=\n        { iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n          smime(16) ct(1) 25 }\n  \
    \   SymmetricKeyPackage ::= SEQUENCE {\n       version           KeyPkgVersion\
    \ DEFAULT v1,\n       sKeyPkgAttrs  [0] SEQUENCE SIZE (1..MAX) OF Attribute\n\
    \                                      {{ SKeyPkgAttributes }} OPTIONAL,\n   \
    \    sKeys             SymmetricKeys,\n       ... }\n     SymmetricKeys ::= SEQUENCE\
    \ SIZE (1..MAX) OF OneSymmetricKey\n     OneSymmetricKey ::= SEQUENCE {\n    \
    \   sKeyAttrs  SEQUENCE SIZE (1..MAX) OF Attribute\n                         \
    \             {{ SKeyAttributes }}  OPTIONAL,\n       sKey       OCTET STRING\
    \ OPTIONAL }\n       ( WITH COMPONENTS { ..., sKeyAttrs PRESENT } |\n        \
    \ WITH COMPONENTS { ..., sKey PRESENT } )\n     KeyPkgVersion ::= INTEGER  { v1(1)\
    \ } ( v1, ... )\n   The SymmetricKeyPackage fields are used as follows:\n   -\
    \ version identifies the version of the symmetric key package content\n     structure.\
    \  For this version of the specification, the default\n     value, v1, MUST be\
    \ used.\n   - sKeyPkgAttrs optionally provides attributes that apply to all of\n\
    \     the symmetric keys in the package.  The SKeyPkgAttributes\n     information\
    \ object set restricts the attributes allowed in\n     sKeyPkgAttrs.  If an attribute\
    \ appears here, then it MUST NOT also\n     be included in sKeyAttrs.\n   - sKeys\
    \ contains a sequence of OneSymmetricKey values.  This\n     structure is discussed\
    \ below.\n   The OneSymmetricKey fields are used as follows:\n   - sKeyAttrs optionally\
    \ provides attributes that apply to one\n     symmetric key.  The SKeyAttributes\
    \ information object set restricts\n     the attributes permitted in sKeyAttrs.\
    \  If an attribute appears\n     here, then it MUST NOT also be included in sKeyPkgAttrs.\n\
    \   - sKey optionally contains the key value encoded as an OCTET STRING.\n   The\
    \ OneSymmetricKey field MUST include sKeyAttrs, sKey, or sKeyAttrs\n   and sKey.\n"
- title: 3.  PSKC Attributes
  contents:
  - "3.  PSKC Attributes\n   The following attributes are defined to assist those\
    \ using the\n   symmetric key package defined in this document as part of a Dynamic\n\
    \   Symmetric Key Provision Protocol (DSKPP) [RFC6063] with Portable\n   Symmetric\
    \ Key Container (PSKC) attributes.  [RFC6030] should be\n   consulted for the\
    \ definitive attribute descriptions.  The attributes\n   fall into three categories.\
    \  The first category includes attributes\n   that apply to a key package, and\
    \ these attributes will generally\n   appear in sKeyPkgAttrs.  The second category\
    \ includes attributes that\n   apply to a particular key, and these attributes\
    \ will generally appear\n   in sKeyAttrs.  The third category includes attributes\
    \ that apply to a\n   key policy.  Of the attributes defined, only the Key Identifier\n\
    \   (Section 3.2.1) and Algorithm (Section 3.2.2) key attributes MUST be\n   included.\
    \  All other attributes are OPTIONAL.\n   Like PSKC, the Symmetric Key Content\
    \ Type supports extensibility.\n   Primarily, this is accomplished through the\
    \ definition and inclusion\n   of new attributes, but in some instances in which\
    \ the attribute\n   contains more than one type, the ASN.1 \"...\" extensibility\
    \ mechanism\n   is employed.\n   A straightforward approach to conversion from\
    \ XML types to ASN.1 is\n   employed.  The <xs:string> type converts to UTF8String;\
    \ the XML\n   <xs:dateTime> type converts to GeneralizedTime; and the XML integer\n\
    \   types convert to INTEGER or BinaryTime [RFC6019].\n"
- title: 3.1.  PSKC Key Package Attributes
  contents:
  - "3.1.  PSKC Key Package Attributes\n   PSKC key package attributes apply to an\
    \ entire key package.  These\n   attributes can be categorized by two different\
    \ attribute collections:\n   device information and cryptographic module attributes.\
    \  All of these\n   key package attributes are OPTIONAL.\n"
- title: 3.1.1.  Device Information Attributes
  contents:
  - "3.1.1.  Device Information Attributes\n   Device Information attributes, when\
    \ taken together, MUST uniquely\n   identify a device to which the Symmetric Key\
    \ Package is provisioned.\n"
- title: 3.1.1.1.  Manufacturer
  contents:
  - "3.1.1.1.  Manufacturer\n   The Manufacturer attribute indicates the manufacturer\
    \ of the device.\n   Values for Manufacturer MUST be taken from either [OATHMAN]\
    \ prefixes\n   (i.e., the left column) or from the IANA Private Enterprise Number\n\
    \   Registry [IANAPENREG], using the Organization value.  When the value\n   is\
    \ taken from [OATHMAN] \"oath.\" MUST be prepended to the value (e.g.,\n   \"\
    oath.<values from [OATHMAN]>\").  When the value is taken from\n   [IANAPENREG],\
    \ \"iana.\" MUST be prepended to the value (e.g.,\n   \"iana.<Organization value\
    \ from [IANAPENREG]>\").  The attribute\n   definition is as follows:\n   at-pskc-manufacturer\
    \ ATTRIBUTE ::= {\n     TYPE UTF8String IDENTIFIED BY id-pskc-manufacturer }\n\
    \   id-pskc-manufacturer OBJECT IDENTIFIER ::= { id-pskc 1 }\n"
- title: 3.1.1.2.  Serial Number
  contents:
  - "3.1.1.2.  Serial Number\n   The Serial Number attribute indicates the serial\
    \ number of the\n   device.  The attribute definition is as follows:\n   at-pskc-serialNo\
    \ ATTRIBUTE ::= {\n     TYPE UTF8String IDENTIFIED BY id-pskc-serialNo }\n   id-pskc-serialNo\
    \ OBJECT IDENTIFIER ::= { id-pskc 2 }\n"
- title: 3.1.1.3.  Model
  contents:
  - "3.1.1.3.  Model\n   The Model attribute indicates the model of the device.  The\
    \ attribute\n   definition is as follows:\n   at-pskc-model ATTRIBUTE ::= {\n\
    \     TYPE UTF8String IDENTIFIED BY id-pskc-model }\n   id-pskc-model OBJECT IDENTIFIER\
    \ ::= { id-pskc 3 }\n"
- title: 3.1.1.4.  Issue Number
  contents:
  - "3.1.1.4.  Issue Number\n   The Issue Number attribute contains an issue number\
    \ to distinguish\n   between two devices with the same serial number.  The attribute\n\
    \   definition is as follows:\n   at-pskc-issueNo ATTRIBUTE ::= {\n     TYPE UTF8String\
    \ IDENTIFIED BY id-pskc-issueNo }\n   id-pskc-issueNo OBJECT IDENTIFIER ::= {\
    \ id-pskc 4 }\n"
- title: 3.1.1.5.  Device Binding
  contents:
  - "3.1.1.5.  Device Binding\n   The Device Binding attribute provides an opaque\
    \ identifier that\n   allows keys to be bound to the device or to a class of devices.\n\
    \   When loading keys into a device, the attribute's value MUST be\n   checked\
    \ against information provided to the user via out-of-band\n   mechanisms.  The\
    \ implementation then ensures that the correct device\n   or class of device is\
    \ being used with respect to the provisioned key.\n   at-pskc-deviceBinding ATTRIBUTE\
    \ ::= {\n     TYPE UTF8String IDENTIFIED BY id-pskc-deviceBinding }\n   id-pskc-deviceBinding\
    \ OBJECT IDENTIFIER ::= { id-pskc 5 }\n"
- title: 3.1.1.6.  Device Start Date
  contents:
  - "3.1.1.6.  Device Start Date\n   When included in sKeyPkgAttrs, the Device Start\
    \ Date attribute\n   indicates the start date for a device.  The date MUST be\
    \ represented\n   in a form that matches the dateTime production in \"canonical\n\
    \   representation\" [XMLSCHEMA].  Implementations SHOULD NOT rely on time\n \
    \  resolution finer than milliseconds and MUST NOT generate time\n   instants\
    \ that specify leap seconds.  Keys that are on the device\n   SHOULD only be used\
    \ when the current date is on or after the device\n   start date.  The attribute\
    \ definition is as follows:\n   at-pskc-deviceStartDate ATTRIBUTE ::= {\n    \
    \ TYPE GeneralizedTime IDENTIFIED BY id-pskc-deviceStartDate }\n   id-pskc-deviceStartDate\
    \ OBJECT IDENTIFIER ::= { id-pskc 6 }\n   Note that usage enforcement of the keys\
    \ with respect to the dates MAY\n   only happen on the validation server as some\
    \ devices, such as smart\n   cards, do not have an internal clock.  Systems thus\
    \ SHOULD NOT rely\n   upon the device to enforce key usage date restrictions.\n"
- title: 3.1.1.7.  Device Expiry Date
  contents:
  - "3.1.1.7.  Device Expiry Date\n   When included in sKeyPkgAttrs, the Device Expiry\
    \ Date attribute\n   indicates the expiry date for a device.  The date MUST be\
    \ represented\n   in a form that matches the dateTime production in \"canonical\n\
    \   representation\" [XMLSCHEMA].  Implementations SHOULD NOT rely on time\n \
    \  resolution finer than milliseconds and MUST NOT generate time\n   instants\
    \ that specify leap seconds.  Keys that are on the device\n   SHOULD only be used\
    \ when the current date is before the device expiry\n   date.  The attribute definition\
    \ is as follows:\n   at-pskc-deviceExpiryDate ATTRIBUTE ::= {\n     TYPE GeneralizedTime\
    \ IDENTIFIED BY id-pskc-deviceExpiryDate }\n   id-pskc-deviceExpiryDate OBJECT\
    \ IDENTIFIER ::= { id-pskc 7 } Note\n   that usage enforcement of the keys with\
    \ respect to the dates MAY only\n   happen on the validation server as some devices,\
    \ such as smart cards,\n   do not have an internal clock.  Systems thus SHOULD\
    \ NOT rely upon the\n   device to enforce key usage date restrictions.\n"
- title: 3.1.1.8.  Device User Id
  contents:
  - "3.1.1.8.  Device User Id\n   The Device User Id attribute indicates the user\
    \ with whom the device\n   is associated using a distinguished name, as defined\
    \ in [RFC4514].\n   For example: UID=jsmith,DC=example,DC=net.  The attribute\
    \ definition\n   is as follows:\n   at-pskc-deviceUserId ATTRIBUTE ::= {\n   \
    \  TYPE UTF8String IDENTIFIED BY id-pskc-deviceUserId }\n   id-pskc-deviceUserId\
    \ OBJECT IDENTIFIER ::= { id-pskc 26 }\n   As specified in [RFC6030], there are\
    \ no semantics associated with\n   this element, i.e., there are no checks enforcing\
    \ that only a\n   specific user can use this device.  As such, this element is\
    \ for\n   informational purposes only.\n"
- title: 3.1.2.  Cryptographic Module Information Attributes
  contents:
  - "3.1.2.  Cryptographic Module Information Attributes\n   Cryptographic Module\
    \ attributes uniquely identify a cryptographic\n   module.  This is useful when\
    \ the device contains more than one\n   cryptographic module.  At this time, only\
    \ one attribute is defined.\n"
- title: 3.1.2.1.  Cryptographic Module Identifier
  contents:
  - "3.1.2.1.  Cryptographic Module Identifier\n   When included in sKeyPkgAttrs,\
    \ the Cryptographic Module Identifier\n   attribute uniquely identifies the cryptographic\
    \ module to which the\n   key is being or was provisioned.  The attribute definition\
    \ is as\n   follows:\n   at-pskc-moduleId ATTRIBUTE ::= {\n     TYPE UTF8String\
    \ IDENTIFIED BY id-pskc-moduleId }\n   id-pskc-moduleId OBJECT IDENTIFIER ::=\
    \ { id-pskc 8 }\n"
- title: 3.2.  PSKC Key Attributes
  contents:
  - "3.2.  PSKC Key Attributes\n   PSKC key attributes apply to a specific key.  As\
    \ noted earlier, the\n   Key Identifier (Section 3.2.1) and Algorithm (Section\
    \ 3.2.2) key\n   attributes are REQUIRED.  All other attributes are OPTIONAL.\n"
- title: 3.2.1.  Key Identifier
  contents:
  - "3.2.1.  Key Identifier\n   When included in sKeyAttrs, the Key Identifier attribute\
    \ identifies\n   the key in the context of key provisioning exchanges between\
    \ two\n   parties.  This means that if PSKC is used in multiple interactions\n\
    \   between a sending and receiving party, using different containers\n   referencing\
    \ the same keys, the KeyId MUST use the same KeyId values\n   (e.g., after initial\
    \ provisioning, if a system wants to update key\n   metadata values in the other\
    \ system, the KeyId value of the key where\n   the metadata is to be updates MUST\
    \ be the same as the original KeyId\n   value provisioned).  The attribute definition\
    \ is as follows:\n   at-pskc-keyId ATTRIBUTE ::= {\n     TYPE UTF8String IDENTIFIED\
    \ BY id-pskc-keyId }\n   id-pskc-keyId OBJECT IDENTIFIER ::= { id-pskc 9 }\n"
- title: 3.2.2.  Algorithm
  contents:
  - "3.2.2.  Algorithm\n   The Algorithm attribute uniquely identifies the PSKC algorithm\n\
    \   profile.  [RFC6030] defines two algorithm profiles \"HOTP\" and \"PIN\".\n\
    \   The attribute definition is as follows:\n   at-pskc-algorithm ATTRIBUTE ::=\
    \ {\n     TYPE UTF8String IDENTIFIED BY id-pskc-algorithm }\n   id-pskc-algorithm\
    \ OBJECT IDENTIFIER ::= { id-pskc 10 }\n"
- title: 3.2.3.  Issuer
  contents:
  - "3.2.3.  Issuer\n   The Issuer attribute names the entity that issued the key.\
    \  The\n   attribute definition is as follows:\n   at-pskc-issuer ATTRIBUTE ::=\
    \ {\n     TYPE UTF8String IDENTIFIED BY id-pskc-issuer }\n   id-pskc-issuer OBJECT\
    \ IDENTIFIER ::= { id-pskc 11 }\n"
- title: 3.2.4.  Key Profile Identifier
  contents:
  - "3.2.4.  Key Profile Identifier\n   The Key Profile Identifier attribute carries\
    \ a unique identifier used\n   between the sending and receiving parties to establish\
    \ a set of key\n   attribute values that are not transmitted within the container\
    \ but\n   are agreed upon between the two parties out of band.  This attribute\n\
    \   will then represent the unique reference to a set of key attribute\n   values.\n\
    \   at-pskc-keyProfileId ATTRIBUTE ::= {\n     TYPE UTF8String IDENTIFIED BY id-pskc-keyProfileId\
    \ }\n   id-pskc-keyProfileId OBJECT IDENTIFIER ::= { id-pskc 12 }\n"
- title: 3.2.5.  Key Reference Identifier
  contents:
  - "3.2.5.  Key Reference Identifier\n   The Key Reference attribute refers to an\
    \ external key to be used with\n   a key derivation scheme and no specific key\
    \ value (secret) is\n   transported; only the reference to the external master\
    \ key is used\n   (e.g., the PKCS #11 key label).\n   at-pskc-keyReference ATTRIBUTE\
    \ ::= {\n     TYPE UTF8String IDENTIFIED BY id-pskc-keyReference }\n   id-pskc-keyReference\
    \ OBJECT IDENTIFIER ::= { id-pskc 13 }\n"
- title: 3.2.6.  Friendly Name
  contents:
  - "3.2.6.  Friendly Name\n   The Friendly Name attribute contains a human-readable\
    \ name for the\n   secret key.  The attribute definition is as follows:\n   at-pskc-friendlyName\
    \ ATTRIBUTE ::= {\n     TYPE FriendlyName IDENTIFIED BY id-pskc-friendlyName }\n\
    \   id-pskc-friendlyName OBJECT IDENTIFIER ::= { id-pskc 14 }\n   The Friendly\
    \ Name attribute has the following syntax:\n   FriendlyName ::= SEQUENCE {\n \
    \    friendlyName        UTF8String,\n     friendlyNameLangTag UTF8String OPTIONAL\
    \ }\n   The text is encoded in UTF-8 [RFC3629], which accommodates most of\n \
    \  the world's writing systems.  The friendlyNameLangTag field\n   identifies\
    \ the language used to express the friendlyName.  When the\n   friendlyNameLangTag\
    \ field is absent, English, whose associated\n   language tag is \"en\", is used.\
    \  The value of the friendlyNameLangTag\n   field MUST be a language tag, as described\
    \ in [RFC5646].\n"
- title: 3.2.7.  Algorithm Parameters
  contents:
  - "3.2.7.  Algorithm Parameters\n   The Algorithm Parameters attribute contains\
    \ parameters that influence\n   the result of the algorithmic computation, for\
    \ example, response\n   truncation and format in One-Time Password (OTP) and\n\
    \   Challenge/Response (CR) algorithms.\n   at-pskc-algorithmParameters ATTRIBUTE\
    \ ::= {\n     TYPE PSKCAlgorithmParameters\n     IDENTIFIED BY id-pskc-algorithmParams\
    \ }\n   id-pskc-algorithmParams OBJECT IDENTIFIER ::= { id-pskc 15 }\n   The Algorithm\
    \ Parameters attribute has the following syntax:\n   PSKCAlgorithmParameters ::=\
    \ CHOICE {\n     suite                UTF8String,\n     challengeFormat  [0] ChallengeFormat,\n\
    \     responseFormat   [1] ResponseFormat,\n     ... }\n   ChallengeFormat ::=\
    \ SEQUENCE {\n     encoding    Encoding,\n     checkDigit  BOOLEAN DEFAULT FALSE,\n\
    \     min         INTEGER (0..MAX),\n     max         INTEGER (0..MAX),\n    \
    \ ... }\n   Encoding ::= UTF8STRING (\"DECIMAL\" | \"HEXADECIMAL\" |\n       \
    \         \"ALPHANUMERIC\" |\"BASE64\" |\"BINARY\")\n   ResponseFormat ::= SEQUENCE\
    \ {\n     encoding     Encoding,\n     length       INTEGER (0..MAX),\n     checkDigit\
    \   BOOLEAN DEFAULT FALSE,\n     ... }\n   The fields in PSKCAlgorithmParameters\
    \ have the following meanings:\n   o Suite defines additional characteristics\
    \ of the algorithm used,\n     which are algorithm specific.  For example, in\
    \ an HMAC-based\n     (Hashed Message Authentication Code) OTP algorithm it could\n\
    \     designate the strength of the hash algorithm used (SHA1, SHA256,\n     etc.).\
    \  Please refer to the algorithm profile specification\n     [RFC6030] for the\
    \ exact semantics of the value for each algorithm\n     profile.\n   o ChallengeFormat\
    \ defines the characteristics of the challenge in a\n     CR usage scenario, whereby\
    \ the following fields are defined:\n      o encoding specifies the encoding of\
    \ the challenge accepted by the\n        device and MUST be one of the following\
    \ values: DECIMAL,\n        HEXADECIMAL, ALPHANUMERIC, BASE64, or BINARY.  The\
    \ BASE64\n        encoding is done as in Section 4 of [RFC4648].\n      o checkDigit\
    \ indicates whether a device needs to check the\n        appended Luhn check digit,\
    \ as defined in [ISOIEC7812], contained\n        in a challenge.  The checkDigit\
    \ MUST NOT be present if the\n        encoding value is anything other than 'DECIMAL'.\
    \  A value of\n        TRUE indicates that the device will check the appended\
    \ Luhn\n        check digit in a provided challenge.  A value of FALSE indicates\n\
    \        that the device will not check the appended Luhn check digit in\n   \
    \     the challenge.\n      o min defines the minimum size of the challenge accepted\
    \ by the\n        device for CR mode.  If encoding is 'DECIMAL', 'HEXADECIMAL',\
    \ or\n        'ALPHANUMERIC', this value indicates the minimum number of\n   \
    \     digits/characters.  If encoding is 'BASE64' or 'BINARY', this\n        value\
    \ indicates the minimum number of bytes of the unencoded\n        value.\n   \
    \   o max defines the maximum size of the challenge accepted by the\n        device\
    \ for CR mode.  If encoding is 'DECIMAL', 'HEXADECIMAL', or\n        'ALPHANUMERIC',\
    \ this value indicates the maximum number of\n        digits/characters.  If the\
    \ encoding is 'BASE64' or 'BINARY',\n        this value indicates the maximum\
    \ number of bytes of the\n        unencoded value.\n   o ResponseFormat defines\
    \ the characteristics of the result of a\n     computation and defines the format\
    \ of the OTP or the response to a\n     challenge.  For cases where the key is\
    \ a personal identification\n     number (PIN) value, this element contains the\
    \ format of the PIN\n     itself (e.g., DECIMAL, length 4 for a 4 digit PIN).\
    \  The following\n     fields are defined:\n      o encoding specifies the encoding\
    \ of the response generated by the\n        device and MUST be one of the following\
    \ values: DECIMAL,\n        HEXADECIMAL, ALPHANUMERIC, BASE64, or BINARY.  BASE64\
    \ is defined\n        as in Section 4 of [RFC4648].\n      o length defines the\
    \ length of the response generated by the\n        device.  If encoding is 'DECIMAL',\
    \ 'HEXADECIMAL', or\n        'ALPHANUMERIC', this value indicates the number of\n\
    \        digits/characters.  If encoding is 'BASE64' or 'BINARY', this\n     \
    \   value indicates the number of bytes of the unencoded value.\n      o checkDigit\
    \ indicates whether the device needs to append a Luhn\n        check digit, as\
    \ defined in [ISOIEC7812], to the response.  This\n        is only valid if the\
    \ encoding attribute is 'DECIMAL'.  If the\n        value is TRUE, then the device\
    \ will append a Luhn check digit to\n        the response.  If the value is FALSE,\
    \ then the device will not\n        append a Luhn check digit to the response.\n"
- title: 3.2.8.  Counter
  contents:
  - "3.2.8.  Counter\n   The Counter attribute contains the event counter for event-based\
    \ OTP\n   algorithms.  The attribute definition is as follows:\n   at-pskc-counter\
    \ ATTRIBUTE ::= {\n     TYPE INTEGER(0..MAX) IDENTIFIED BY id-pskc-counter }\n\
    \   id-pskc-counter OBJECT IDENTIFIER ::= { id-pskc 16 }\n"
- title: 3.2.9.  Time
  contents:
  - "3.2.9.  Time\n   The Time attribute conveys the time for time-based OTP algorithms.\n\
    \   If the Time Interval attribute is included, then this element carries\n  \
    \ the number of time intervals passed for a specific start point.  If\n   the\
    \ time interval is used, then this element carries the number of\n   time intervals\
    \ passed from a specific start point, normally it is\n   algorithm dependent.\
    \  It uses the BinaryTime syntax from [RFC6019].\n   The attribute definition\
    \ is as follows:\n   at-pskc-time ATTRIBUTE ::= {\n     TYPE BinaryTime IDENTIFIED\
    \ BY id-pskc-time }\n   id-pskc-time OBJECT IDENTIFIER ::= { id-pskc 17 }\n"
- title: 3.2.10.  Time Interval
  contents:
  - "3.2.10.  Time Interval\n   The Time Interval attribute conveys the time interval\
    \ value for time-\n   based OTP algorithms in seconds (e.g., a value of 30 for\
    \ this would\n   indicate a time interval of 30 seconds).  It is an integer. \
    \ The\n   attribute definition is as follows:\n   at-pskc-timeInterval ATTRIBUTE\
    \ ::= {\n     TYPE INTEGER (0..MAX) IDENTIFIED BY id-pskc-timeInterval }\n   id-pskc-timeInterval\
    \ OBJECT IDENTIFIER ::= { id-pskc 18 }\n"
- title: 3.2.11.  Time Drift
  contents:
  - "3.2.11.  Time Drift\n   The Time Drift attribute contains the device clock drift\
    \ value for\n   time-based OTP algorithms.  It is an integer, either positive\
    \ or\n   negative, that indicates the number of time intervals that a\n   validation\
    \ server has established that the device clock drifted after\n   the last successful\
    \ authentication.  The attribute definition is as\n   follows:\n   at-pskc-timeDrift\
    \ ATTRIBUTE ::= {\n     TYPE INTEGER (0..MAX) IDENTIFIED BY id-pskc-timeDrift\
    \ }\n   id-pskc-timeDrift OBJECT IDENTIFIER ::= { id-pskc 19 }\n"
- title: 3.2.12.  Value MAC
  contents:
  - "3.2.12.  Value MAC\n   The Value MAC attribute is a Message Authentication Code\
    \ (MAC)\n   generated from the encrypted value in the case that the encryption\n\
    \   algorithm does not support integrity checks (e.g., AES-CBC does not\n   provide\
    \ integrity while AES Key Wrap with a message length indicator\n   (MLI) does).\
    \  The attribute definition is as follows:\n   at-pskc-valueMAC ATTRIBUTE ::=\
    \ {\n     TYPE ValueMac IDENTIFIED BY id-pskc-valueMAC }\n   id-pskc-valueMAC\
    \ OBJECT IDENTIFIER ::= { id-pskc 20 }\n   ValueMac ::= SEQUENCE {\n     macAlgorithm\
    \ UTF8String,\n     mac          UTF8String }\n   The fields in ValueMac have\
    \ the following meanings:\n   o macAlgorithm identifies the MAC algorithm used\
    \ to generate the\n     value placed in digest.\n   o mac is the base64-encoded,\
    \ as specified in Section 4 of [RFC4648],\n     mac value.\n"
- title: 3.2.13.  Key User Id
  contents:
  - "3.2.13.  Key User Id\n   The Key User Id attribute indicates the user with whom\
    \ the key is\n   associated using a distinguished name, as defined in [RFC4514].\
    \  For\n   example, UID=jsmith,DC=example,DC=net.  The attribute definition is\n\
    \   as follows:\n   at-pskc-keyUserId ATTRIBUTE ::= {\n     TYPE UTF8String IDENTIFIED\
    \ BY id-pskc-keyUserId }\n   id-pskc-keyUserId OBJECT IDENTIFIER ::= { id-pskc\
    \ 27 }\n   As specified in [RFC6030], there are no semantics associated with\n\
    \   this element, i.e., there are no checks enforcing that only a\n   specific\
    \ user can use this key.  As such, this element is for\n   informational purposes\
    \ only.\n"
- title: 3.3.  Key Policy Attributes
  contents:
  - "3.3.  Key Policy Attributes\n   Key policy attributes indicate a policy that\
    \ can be attached to a\n   key.  These attributes are defined in the subsections\
    \ that follow.\n"
- title: 3.3.1.  Key Start Date
  contents:
  - "3.3.1.  Key Start Date\n   When included in sKeyAttrs, the Key Start Date attribute\
    \ indicates\n   the start of the key's validity period.  The date MUST be represented\n\
    \   in a form that matches the dateTime production in \"canonical\n   representation\"\
    \ [XMLSCHEMA].  Implementations SHOULD NOT rely on time\n   resolution finer than\
    \ milliseconds and MUST NOT generate time\n   instants that specify leap seconds.\
    \  The attribute definition is as\n   follows:\n   at-pskc-keyStartDate ATTRIBUTE\
    \ ::= {\n       TYPE GeneralizedTime IDENTIFIED BY id-pskc-keyStartDate }\n  \
    \ id-pskc-keyStartDate OBJECT IDENTIFIER ::= { id-pskc 21 }\n"
- title: 3.3.2.  Key Expiry Date
  contents:
  - "3.3.2.  Key Expiry Date\n   When included in sKeyAttrs, the Key Expiry Date attribute\
    \ indicates\n   the end of the key's validity period.  The date MUST be represented\n\
    \   in a form that matches the dateTime production in \"canonical\n   representation\"\
    \ [XMLSCHEMA].  Implementations SHOULD NOT rely on time\n   resolution finer than\
    \ milliseconds and MUST NOT generate time\n   instants that specify leap seconds.\
    \  The attribute definition is as\n   follows:\n   at-pskc-keyExpiryDate ATTRIBUTE\
    \ ::= {\n     TYPE GeneralizedTime IDENTIFIED BY id-pskc-keyExpiryDate }\n   id-pskc-keyExpiryDate\
    \ OBJECT IDENTIFIER ::= { id-pskc 22 }\n"
- title: 3.3.3.  Number of Transactions
  contents:
  - "3.3.3.  Number of Transactions\n   The Number of Transactions attribute indicates\
    \ the maximum number of\n   times a key carried within the package can be used.\
    \  When this\n   element is omitted, there is no restriction regarding the number\
    \ of\n   times a key can be used.  The attribute definition is as follows:\n \
    \  at-pskc-noOfTransactions ATTRIBUTE ::= {\n     TYPE INTEGER (0..MAX) IDENTIFIED\
    \ BY id-pskc-noOfTransactions }\n   id-pskc-noOfTransactions OBJECT IDENTIFIER\
    \ ::= { id-pskc 23 }\n"
- title: 3.3.4.  Key Usage
  contents:
  - "3.3.4.  Key Usage\n   The Key Usage attribute constrains the intended usage of\
    \ the key.\n   The recipient MUST enforce the key usage.  The attribute definition\n\
    \   is as follows:\n   at-pskc-keyUsage ATTRIBUTE ::= {\n     TYPE PSKCKeyUsages\
    \ IDENTIFIED BY id-pskc-keyUsages }\n   id-pskc-keyUsages OBJECT IDENTIFIER ::=\
    \ { id-pskc 24 }\n   PSKCKeyUsages ::= SEQUENCE OF PSKCKeyUsage\n   PSKCKeyUsage\
    \ ::= UTF8String (\"OTP\" | \"CR\" | \"Encrypt\" |\n                    \"Integrity\"\
    \ | \"Verify\" | \"Unlock\" | \"Decrypt\" |\n                    \"KeyWrap\" |\
    \ \"Unwrap\" | \"Derive\" | \"Generate\")\n   The fields in PSKCKeyUsage have\
    \ the following meanings:\n   o OTP:  The key MUST only be used for OTP generation.\n\
    \   o CR:  The key MUST only be used for Challenge/Response purposes.\n   o Encrypt:\
    \  The key MUST only be used for data encryption purposes.\n   o Integrity:  The\
    \ key MUST only be used to generate a keyed message\n     digest for data integrity\
    \ or authentication purposes.\n   o Verify:  The key MUST only be used to verify\
    \ a keyed message digest\n     for data integrity or authentication purposes (is\
    \ the converse of\n     Integrity).\n   o Unlock:  The key MUST only be used for\
    \ an inverse\n     Challenge/Response in the case in which a user has locked the\n\
    \     device by entering an incorrect PIN too many times (for devices\n     with\
    \ PIN-input capability).\n   o Decrypt:  The key MUST only be used for data decryption\
    \ purposes.\n   o KeyWrap:  The key MUST only be used for key wrap purposes.\n\
    \   o Unwrap:  The key MUST only be used for key unwrap purposes.\n   o Derive:\
    \  The key MUST only be used with a key derivation function\n     to derive a\
    \ new key (see also Section 8.2.4 of [NIST800-57]).\n   o Generate:  The key MUST\
    \ only be used to generate a new key based on\n     a random number and the previous\
    \ value of the key (see also Section\n     8.1.5.2.1 of [NIST800-57]).\n"
- title: 3.3.5.  PIN Policy
  contents:
  - "3.3.5.  PIN Policy\n   The PIN Policy attribute allows policy about the PIN usage\
    \ to be\n   associated with the key.  The attribute definition is as follows:\n\
    \   at-pskc-pinPolicy ATTRIBUTE ::= {\n     TYPE PINPolicy IDENTIFIED BY id-pskc-pinPolicy\
    \ }\n   id-pskc-pinPolicy OBJECT IDENTIFIER ::= { id-pskc 25 }\n   PINPolicy ::=\
    \ SEQUENCE {\n     pinKeyId          [0] UTF8String OPTIONAL,\n     pinUsageMode\
    \      [1] PINUsageMode,\n     maxFailedAttempts [2] INTEGER (0..MAX) OPTIONAL,\n\
    \     minLength         [3] INTEGER (0..MAX) OPTIONAL,\n     maxLength       \
    \  [4] INTEGER (0..MAX) OPTIONAL,\n     pinEncoding       [5] Encoding OPTIONAL\
    \ }\n   PINUsageMode ::= UTF8String (\"Local\" | \"Prepend\" | \"Append\" |\n\
    \                    \"Algorithmic\")\n   The fields in PIN Policy have the following\
    \ meanings:\n   o pinKeyId uniquely identifies the key held within this container\n\
    \     that contains the value of the PIN that protects the key.\n      o pinUsageMode\
    \ indicates the way the PIN is used during the usage\n        of the key.  The\
    \ following values are defined in [RFC6030]:\n        Local, Prepend, Append,\
    \ and Algorithmic.\n   o maxFailedAttempts indicates the maximum number of times\
    \ the PIN may\n     be entered incorrectly before it MUST NOT be possible to use\
    \ the\n     key anymore (reasonable values are in the positive integer range of\n\
    \     at least 2 and no more than 10).\n   o minLength indicates the minimum length\
    \ of a PIN that can be set to\n     protect the associated key.  It MUST NOT be\
    \ possible to set a PIN\n     shorter than this value.  If pinEncoding is 'DECIMAL',\n\
    \     'HEXADECIMAL', or 'ALPHANUMERIC', this value indicates the number\n    \
    \ of digits/ characters.  If pinEncoding is 'BASE64' or 'BINARY',\n     this value\
    \ indicates the number of bytes of the unencoded value.\n   o maxLength indicates\
    \ the maximum length of a PIN that can be set to\n     protect this key.  It MUST\
    \ NOT be possible to set a PIN longer than\n     this value.  If pinEncoding is\
    \ 'DECIMAL', 'HEXADECIMAL', or\n     'ALPHANUMERIC', this value indicates the\
    \ number of\n     digits/characters.  If the pinEncoding is 'BASE64' or 'BINARY',\n\
    \     this value indicates the number of bytes of the unencoded value.\n   o pinEncoding\
    \ is based on Encoding, which is defined in Section\n     3.2.7, and specifies\
    \ encoding of the PIN and MUST be one of the\n     following values: DECIMAL,\
    \ HEXADECIMAL, ALPHANUMERIC, BASE64, or\n     BINARY.\n   If pinUsageMode is set\
    \ to \"Local\", then the device MUST enforce the\n   restriction indicated in\
    \ maxFailedAttempts, minLength, maxLength, and\n   pinEncoding; otherwise, it\
    \ MUST be enforced on the server side.\n"
- title: 4.  Key Encoding
  contents:
  - "4.  Key Encoding\n   Two parties receiving the same key as an sKey OCTET STRING\
    \ must make\n   use of the key in exactly the same way in order to interoperate.\
    \  To\n   ensure that this occurs, it is necessary to define a correspondence\n\
    \   between the abstract syntax of sKey and the notation in the standard\n   algorithm\
    \ description that defines how the key is used.  The next\n   sections establish\
    \ that correspondence for the AES algorithm\n   [FIPS197] and the Triple Data\
    \ Encryption Algorithm (TDEA or Triple\n   DES) [SP800-67].\n"
- title: 4.1.  AES Key Encoding
  contents:
  - "4.1.  AES Key Encoding\n   [FIPS197], Section 5.2, titled \"Key Expansion\",\
    \ uses the input key as\n   an array of bytes indexed starting at 0.  The first\
    \ octet of sKey\n   SHALL become the key byte in the AES, labeled index 0 in [FIPS197];\n\
    \   the succeeding octets of sKey SHALL become key bytes in AES, in\n   increasing\
    \ index order.\n   Proper parsing and key load of the contents of sKey for AES\
    \ SHALL be\n   determined by using the following sKey OCTET STRING to generate\
    \ and\n   match the key expansion test vectors in [FIPS197], Appendix A, for\n\
    \   AES Cipher Key: 2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c\n     Tag\
    \ Length Value\n     04  16     2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c\n"
- title: 4.2.  Triple-DES Key Encoding
  contents:
  - "4.2.  Triple-DES Key Encoding\n   A Triple-DES key consists of three keys for\
    \ the cryptographic engine\n   (Key1, Key2, and Key3) that are each 64 bits (56\
    \ key bits and 8\n   parity bits); the three keys are also collectively referred\
    \ to as a\n   key bundle [SP800-67].  A key bundle may employ either two or three\n\
    \   independent keys.  When only two independent keys are employed\n   (called\
    \ two-key Triple DES), the same value is used for Key1 and\n   Key3.\n   Each\
    \ key in a Triple-DES key bundle is expanded into a key schedule\n   according\
    \ to a procedure defined in [SP800-67], Appendix A.  That\n   procedure numbers\
    \ the bits in the key from 1 to 64, with number 1\n   being the leftmost, or most\
    \ significant bit (MSB).  The first octet\n   of sKey SHALL be bits 1 through\
    \ 8 of Key1 with bit 1 being the MSB.\n   The second octet of sKey SHALL be bits\
    \ 9 through 16 of Key1, and so\n   forth, so that the trailing octet of sKey SHALL\
    \ be bits 57 through 64\n   of Key3 (or Key2 for two-key Triple DES).\n   Proper\
    \ parsing and key load of the contents of sKey for Triple DES\n   SHALL be determined\
    \ by using the following sKey OCTET STRING to\n   generate and match the key expansion\
    \ test vectors in [SP800-67],\n   Appendix B, for the key bundle:\n   Key1 = 0123456789ABCDEF\n\
    \   Key2 = 23456789ABCDEF01\n   Key3 = 456789ABCDEF0123\n     Tag Length Value\n\
    \     04  24     0123456789ABCDEF 23456789ABCDEF01 456789ABCDEF0123\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Implementers of this protocol are strongly encouraged\
    \ to consider\n   generally accepted principles of secure key management when\n\
    \   integrating this capability within an overall security architecture.\n   The\
    \ symmetric key package contents are not protected.  This content\n   type can\
    \ be combined with a security protocol to protect the contents\n   of the package.\
    \  One possibility is to include this content type in\n   place of a PSKC package\
    \ in [RFC6063] exchanges.  In this case, the\n   algorithm requirements are found\
    \ in those documents.  Another\n   possibility is to encapsulate this content\
    \ type in a CMS [RFC5652]\n   protecting content type.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document makes use of object identifiers to\
    \ identify a CMS\n   content type (Appendix A.1), the ASN.1 version of the PSKC\
    \ attributes\n   (Appendix A.2), and the ASN.1 modules found in Appendix A.1 and\
    \ A.2.\n   All OIDs are registered in an arc delegated by RSADSI to the SMIME\n\
    \   Working Group.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [FIPS197]    National Institute of Standards.\
    \  \"FIPS Pub 197:\n                Advanced Encryption Standard (AES)\", 26 November\
    \ 2001.\n   [IANAPENREG] IANA, \"Private Enterprise Numbers\",\n             \
    \   <http://www.iana.org>.\n   [ISOIEC7812] ISO, \"ISO/IEC 7812-1:2006 Identification\
    \ cards --\n                Identification of issuers -- Part 1: Numbering system\"\
    ,\n                October 2006, <http://www.iso.org/iso/iso_catalogue/\n    \
    \            catalogue_tc/catalogue_detail.htm?csnumber=39698>.\n   [OATHMAN]\
    \    OATH, \"List of OATH Manufacturer Prefixes (omp)\", April\n             \
    \   2009, <http://www.openauthentication.org/\n                oath-id/prefixes>.\n\
    \   [RFC2119]    Bradner, S., \"Key words for use in RFCs to Indicate\n      \
    \          Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3629] \
    \   Yergeau, F., \"UTF-8, a transformation format of ISO\n                10646\"\
    , STD 63, RFC 3629, November 2003.\n   [RFC4514]    Zeilenga, K., Ed., \"Lightweight\
    \ Directory Access\n                Protocol (LDAP): String Representation of\
    \ Distinguished\n                Names\", RFC 4514, June 2006.\n   [RFC4648] \
    \   Josefsson, S., \"The Base16, Base32, and Base64 Data\n                Encodings\"\
    , RFC 4648, October 2006.\n   [RFC5646]    Phillips, A., Ed., and M. Davis, Ed.,\
    \ \"Tags for\n                Identifying Languages\", BCP 47, RFC 5646, September\n\
    \                2009.\n   [RFC5911]    Hoffman, P. and J. Schaad, \"New ASN.1\
    \ Modules for\n                Cryptographic Message Syntax (CMS) and S/MIME\"\
    , RFC\n                5911, June 2010.\n   [RFC5912]    Hoffman, P. and J. Schaad,\
    \ \"New ASN.1 Modules for the\n                Public Key Infrastructure Using\
    \ X.509 (PKIX)\", RFC 5912,\n                June 2010.\n   [RFC6019]    Housley,\
    \ R., \"BinaryTime: An Alternate Format for\n                Representing Date\
    \ and Time in ASN.1\", RFC 6019,\n                September 2010.\n   [RFC6030]\
    \    Hoyer, P., Pei, M., and S. Machani, \"Portable Symmetric\n              \
    \  Key Container (PSKC)\", RFC 6030, October 2010.\n   [SP800-67]   National Institute\
    \ of Standards and Technology, \"NIST\n                Special Publication 800-67\
    \ Version 1.1: Recommendation\n                for the Triple Data Encryption\
    \ Algorithm (TDEA) Block\n                Cipher\", NIST Special Publication 800-67,\
    \ May 2008.\n   [X.680]      ITU-T Recommendation X.680 (2002) | ISO/IEC 8824-\n\
    \                1:2002.  Information Technology - Abstract Syntax\n         \
    \       Notation One.\n   [X.681]      ITU-T Recommendation X.681 (2002) | ISO/IEC\
    \ 8824-\n                2:2002.  Information Technology - Abstract Syntax\n \
    \               Notation One: Information Object Specification.\n   [X.682]  \
    \    ITU-T Recommendation X.682 (2002) | ISO/IEC 8824-\n                3:2002.\
    \  Information Technology - Abstract Syntax\n                Notation One: Constraint\
    \ Specification.\n   [X.683]      ITU-T Recommendation X.683 (2002) | ISO/IEC\
    \ 8824-\n                4:2002.  Information Technology - Abstract Syntax\n \
    \               Notation One: Parameterization of ASN.1 Specifications.\n   [X.690]\
    \      ITU-T Recommendation X.690 (2002) | ISO/IEC 8825-\n                1:2002.\
    \  Information Technology - ASN.1 encoding rules:\n                Specification\
    \ of Basic Encoding Rules (BER), Canonical\n                Encoding Rules (CER)\
    \ and Distinguished Encoding Rules\n                (DER).\n   [XMLSCHEMA]  Malhotra,\
    \ A. and P. Biron, \"XML Schema Part 2: Datatypes\n                Second Edition\"\
    , World Wide Web Consortium\n                Recommendation REC-xmlschema-2-20041082,\
    \ October 2004,\n                <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [NIST800-57] National Institute of Standards\
    \ and Technology, \"NIST\n                Special Publication 800-57, Recommendation\
    \ for Key\n                Management - Part 1: General (Revised)\", NIST Special\n\
    \                Publication 800-57, March 2007.\n   [RFC5652]    Housley, R.,\
    \ \"Cryptographic Message Syntax (CMS)\", STD\n                70, RFC 5652, September\
    \ 2009.\n   [RFC6063]    Doherty, A., Pei, M., Machani, S., and M. Nystrom,\n\
    \                \"Dynamic Symmetric Key Provisioning Protocol (DSKPP)\",\n  \
    \              RFC 6063, December 2010.\n"
- title: Appendix A.  ASN.1 Module
  contents:
  - "Appendix A.  ASN.1 Module\n   This appendix provides the normative ASN.1 definitions\
    \ for the\n   structures described in this specification using ASN.1 as defined\
    \ in\n   [X.680], [X.681], [X.682], and [X.683].\n"
- title: A.1.  Symmetric Key Package ASN.1 Module
  contents:
  - "A.1.  Symmetric Key Package ASN.1 Module\n   SymmetricKeyPackageModulev1\n  \
    \   { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n       smime(16)\
    \ modules(0) id-mod-symmetricKeyPkgV1(33) }\n   DEFINITIONS IMPLICIT TAGS ::=\n\
    \   BEGIN\n   -- EXPORTS ALL\n   IMPORTS\n   -- From New PKIX ASN.1 [RFC5912]\n\
    \   ATTRIBUTE\n     FROM PKIX-CommonTypes-2009\n      { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n        security(5) mechanisms(5) pkix(7) id-mod(0)\n  \
    \      id-mod-pkixCommon-02(57) }\n   -- From New SMIME ASN.1 [RFC5911]\n   CONTENT-TYPE,\
    \ Attribute{}\n     FROM CryptographicMessageSyntax-2009\n       { iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n         smime(16) modules(0) id-mod-cms-2004-02(41)\
    \ }\n   ;\n    ContentSet CONTENT-TYPE ::= {\n       ct-symmetric-key-package,\n\
    \       ... -- Expect additional content types --\n     }\n     ct-symmetric-key-package\
    \ CONTENT-TYPE ::=\n       { TYPE SymmetricKeyPackage IDENTIFIED BY id-ct-KP-sKeyPackage\
    \ }\n     id-ct-KP-sKeyPackage OBJECT IDENTIFIER ::=\n       { iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n         smime(16) ct(1) 25 }\n   \
    \  SymmetricKeyPackage ::= SEQUENCE {\n       version           KeyPkgVersion\
    \ DEFAULT v1,\n       sKeyPkgAttrs  [0] SEQUENCE SIZE (1..MAX) OF Attribute\n\
    \                                      {{ SKeyPkgAttributes }} OPTIONAL,\n   \
    \    sKeys             SymmetricKeys,\n       ... }\n     SymmetricKeys ::= SEQUENCE\
    \ SIZE (1..MAX) OF OneSymmetricKey\n     OneSymmetricKey ::= SEQUENCE {\n    \
    \   sKeyAttrs  SEQUENCE SIZE (1..MAX) OF Attribute\n                         \
    \                {{ SKeyAttributes }} OPTIONAL,\n       sKey       OCTET STRING\
    \ OPTIONAL }\n       ( WITH COMPONENTS { ..., sKeyAttrs PRESENT } |\n        \
    \ WITH COMPONENTS { ..., sKey PRESENT } )\n     KeyPkgVersion ::= INTEGER  { v1(1)\
    \ } ( v1, ... )\n     SKeyPkgAttributes ATTRIBUTE ::= { ... }\n     SKeyAttributes\
    \ ATTRIBUTE ::= { ... }\n   END\n"
- title: A.2.  PSKC ASN.1 Module
  contents:
  - "A.2.  PSKC ASN.1 Module\n   PSKCAttributesModule\n     { iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n       smime(16) modules(0) id-mod-pskcAttributesModule(53)\
    \ }\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS ALL\n   IMPORTS\n\
    \   -- From New PKIX ASN.1 [RFC5912]\n   ATTRIBUTE\n     FROM PKIX-CommonTypes-2009\n\
    \      { iso(1) identified-organization(3) dod(6) internet(1)\n        security(5)\
    \ mechanisms(5) pkix(7) id-mod(0)\n        id-mod-pkixCommon-02(57) }\n   -- From\
    \ BinaryTime [RFC6019]\n   BinaryTime\n     FROM BinarySigningTimeModule\n   \
    \    { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      \
    \   smime(16) modules(0) id-mod-binarySigningTime(27) }\n   -- From New SMIME\
    \ ASN.1 [RFC5911]\n   id-smime\n     FROM SecureMimeMessageV3dot1-2009\n     \
    \  { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n        \
    \ smime(16) modules(0) id-mod-msg-v3dot1-02(39) }\n   ;\n   --\n   -- PSKC Attributes\
    \ OIDs are taken from the SMIME Arc.\n   --\n   id-pskc OBJECT IDENTIFIER ::=\
    \ { id-smime 12 }\n   --\n   -- Merge SKeyPKGAttributes to the set of attributes\
    \ for sKeyPkgAttrs\n   --\n   SKeyPkgAttributes ATTRIBUTE ::= {\n     at-pskc-manufacturer\
    \ | at-pskc-serialNo | at-pskc-model |\n     at-pskc-issueNo | at-pskc-deviceBinding\
    \ |\n     at-pskc-deviceStartDate | at-pskc-deviceExpiryDate |\n     at-pskc-moduleId\
    \ | at-pskc-deviceUserId, ... }\n   --\n   -- Merge SKeyAttributes to the set\
    \ of attributes for sKeyAttrs\n   --\n   SKeyAttributes ATTRIBUTE ::= {\n    \
    \ at-pskc-keyId | at-pskc-algorithm | at-pskc-issuer |\n     at-pskc-keyProfileId\
    \ | at-pskc-keyReference |\n     at-pskc-friendlyName | at-pskc-algorithmParameters\
    \ |\n     at-pskc-counter | at-pskc-time | at-pskc-timeInterval |\n     at-pskc-timeDrift\
    \ | at-pskc-valueMAC | at-pskc-keyUserId  |\n     at-pskc-keyStartDate | at-pskc-keyExpiryDate\
    \ |\n     at-pskc-numberOfTransactions | at-pskc-keyUsage |\n     at-pskc-pinPolicy,\
    \ ... }\n   at-pskc-manufacturer ATTRIBUTE ::= {\n     TYPE UTF8String IDENTIFIED\
    \ BY id-pskc-manufacturer }\n   id-pskc-manufacturer OBJECT IDENTIFIER ::= { id-pskc\
    \ 1 }\n   at-pskc-serialNo ATTRIBUTE ::= {\n     TYPE UTF8String IDENTIFIED BY\
    \ id-pskc-serialNo }\n   id-pskc-serialNo OBJECT IDENTIFIER ::= { id-pskc 2 }\n\
    \   at-pskc-model ATTRIBUTE ::= {\n     TYPE UTF8String IDENTIFIED BY id-pskc-model\
    \ }\n   id-pskc-model OBJECT IDENTIFIER ::= { id-pskc 3 }\n   at-pskc-issueNo\
    \ ATTRIBUTE ::= {\n     TYPE UTF8String IDENTIFIED BY id-pskc-issueNo }\n   id-pskc-issueNo\
    \ OBJECT IDENTIFIER ::= { id-pskc 4 }\n   at-pskc-deviceBinding ATTRIBUTE ::=\
    \ {\n     TYPE UTF8String IDENTIFIED BY id-pskc-deviceBinding }\n   id-pskc-deviceBinding\
    \ OBJECT IDENTIFIER ::= { id-pskc 5 }\n   at-pskc-deviceStartDate ATTRIBUTE ::=\
    \ {\n     TYPE GeneralizedTime IDENTIFIED BY id-pskc-deviceStartDate }\n   id-pskc-deviceStartDate\
    \ OBJECT IDENTIFIER ::= { id-pskc 6 }\n   at-pskc-deviceExpiryDate ATTRIBUTE ::=\
    \ {\n     TYPE GeneralizedTime IDENTIFIED BY id-pskc-deviceExpiryDate }\n   id-pskc-deviceExpiryDate\
    \ OBJECT IDENTIFIER ::= { id-pskc 7 }\n   at-pskc-moduleId ATTRIBUTE ::= {\n \
    \    TYPE UTF8String IDENTIFIED BY id-pskc-moduleId }\n   id-pskc-moduleId OBJECT\
    \ IDENTIFIER ::= { id-pskc 8 }\n   at-pskc-deviceUserId ATTRIBUTE ::= {\n    \
    \ TYPE UTF8String IDENTIFIED BY id-pskc-deviceUserId }\n   id-pskc-deviceUserId\
    \ OBJECT IDENTIFIER ::= { id-pskc 26 }\n   at-pskc-keyId ATTRIBUTE ::= {\n   \
    \  TYPE UTF8String IDENTIFIED BY id-pskc-keyId }\n   id-pskc-keyId OBJECT IDENTIFIER\
    \ ::= { id-pskc 9 }\n   at-pskc-algorithm ATTRIBUTE ::= {\n     TYPE UTF8String\
    \ IDENTIFIED BY id-pskc-algorithm }\n   id-pskc-algorithm OBJECT IDENTIFIER ::=\
    \ { id-pskc 10 }\n   at-pskc-issuer ATTRIBUTE ::= {\n     TYPE UTF8String IDENTIFIED\
    \ BY id-pskc-issuer }\n   id-pskc-issuer OBJECT IDENTIFIER ::= { id-pskc 11 }\n\
    \   at-pskc-keyProfileId ATTRIBUTE ::= {\n     TYPE UTF8String IDENTIFIED BY id-pskc-keyProfileId\
    \ }\n   id-pskc-keyProfileId OBJECT IDENTIFIER ::= { id-pskc 12 }\n   at-pskc-keyReference\
    \ ATTRIBUTE ::= {\n     TYPE UTF8String IDENTIFIED BY id-pskc-keyReference }\n\
    \   id-pskc-keyReference OBJECT IDENTIFIER ::= { id-pskc 13 }\n   at-pskc-friendlyName\
    \ ATTRIBUTE ::= {\n     TYPE FriendlyName IDENTIFIED BY id-pskc-friendlyName }\n\
    \   id-pskc-friendlyName OBJECT IDENTIFIER ::= { id-pskc 14 }\n   FriendlyName\
    \ ::= SEQUENCE {\n     friendlyName        UTF8String,\n     friendlyNameLangTag\
    \ UTF8String OPTIONAL }\n   at-pskc-algorithmParameters ATTRIBUTE ::= {\n    \
    \ TYPE PSKCAlgorithmParameters\n     IDENTIFIED BY id-pskc-algorithmParameters\
    \ }\n   id-pskc-algorithmParameters OBJECT IDENTIFIER ::= { id-pskc 15 }\n   PSKCAlgorithmParameters\
    \ ::= CHOICE {\n     suite                UTF8String,\n     challengeFormat  [0]\
    \ ChallengeFormat,\n     responseFormat   [1] ResponseFormat,\n     ... }\n  \
    \ ChallengeFormat ::= SEQUENCE {\n     encoding    Encoding,\n     checkDigit\
    \  BOOLEAN DEFAULT FALSE,\n     min         INTEGER (0..MAX),\n     max      \
    \   INTEGER (0..MAX),\n     ... }\n   Encoding ::= UTF8String (\"DECIMAL\" | \"\
    HEXADECIMAL\" |\n                \"ALPHANUMERIC\" | \"BASE64\" | \"BINARY\" )\n\
    \   ResponseFormat ::= SEQUENCE {\n     encoding     Encoding,\n     length  \
    \     INTEGER (0..MAX),\n     checkDigit   BOOLEAN DEFAULT FALSE,\n     ... }\n\
    \   at-pskc-counter ATTRIBUTE ::= {\n     TYPE INTEGER (0..MAX) IDENTIFIED BY\
    \ id-pskc-counter }\n   id-pskc-counter OBJECT IDENTIFIER ::= { id-pskc 16 }\n\
    \   at-pskc-time ATTRIBUTE ::= {\n     TYPE BinaryTime IDENTIFIED BY id-pskc-time\
    \ }\n   id-pskc-time OBJECT IDENTIFIER ::= { id-pskc 17 }\n   at-pskc-timeInterval\
    \ ATTRIBUTE ::= {\n     TYPE INTEGER (0..MAX) IDENTIFIED BY id-pskc-timeInterval\
    \ }\n   id-pskc-timeInterval OBJECT IDENTIFIER ::= { id-pskc 18 }\n   at-pskc-timeDrift\
    \ ATTRIBUTE ::= {\n     TYPE INTEGER (0..MAX) IDENTIFIED BY id-pskc-timeDrift\
    \ }\n   id-pskc-timeDrift OBJECT IDENTIFIER ::= { id-pskc 19 }\n   at-pskc-valueMAC\
    \ ATTRIBUTE ::= {\n     TYPE ValueMac IDENTIFIED BY id-pskc-valueMAC }\n   id-pskc-valueMAC\
    \ OBJECT IDENTIFIER ::= { id-pskc 20 }\n   ValueMac ::= SEQUENCE {\n     macAlgorithm\
    \ UTF8String,\n     mac          UTF8String }\n   at-pskc-keyUserId ATTRIBUTE\
    \ ::= {\n     TYPE UTF8String IDENTIFIED BY id-pskc-keyUserId }\n   id-pskc-keyUserId\
    \ OBJECT IDENTIFIER ::= { id-pskc 27 }\n   at-pskc-keyStartDate ATTRIBUTE ::=\
    \ {\n     TYPE GeneralizedTime IDENTIFIED BY id-pskc-keyStartDate }\n   id-pskc-keyStartDate\
    \ OBJECT IDENTIFIER ::= { id-pskc 21 }\n   at-pskc-keyExpiryDate ATTRIBUTE ::=\
    \ {\n     TYPE GeneralizedTime IDENTIFIED BY id-pskc-keyExpiryDate }\n   id-pskc-keyExpiryDate\
    \ OBJECT IDENTIFIER ::= { id-pskc 22 }\n   at-pskc-numberOfTransactions ATTRIBUTE\
    \ ::= {\n     TYPE INTEGER (0..MAX) IDENTIFIED BY id-pskc-numberOfTransactions\
    \ }\n   id-pskc-numberOfTransactions OBJECT IDENTIFIER ::= { id-pskc 23 }\n  \
    \ at-pskc-keyUsage ATTRIBUTE ::= {\n     TYPE PSKCKeyUsages IDENTIFIED BY id-pskc-keyUsages\
    \ }\n   id-pskc-keyUsages OBJECT IDENTIFIER ::= { id-pskc 24 }\n   PSKCKeyUsages\
    \ ::= SEQUENCE OF PSKCKeyUsage\n   PSKCKeyUsage ::= UTF8String (\"OTP\" | \"CR\"\
    \ | \"Encrypt\" |\n                    \"Integrity\" | \"Verify\" | \"Unlock\"\
    \ | \"Decrypt\" |\n                    \"KeyWrap\" | \"Unwrap\" | \"Derive\" |\
    \ \"Generate\")\n   at-pskc-pinPolicy ATTRIBUTE ::= {\n     TYPE PINPolicy IDENTIFIED\
    \ BY id-pskc-pinPolicy }\n   id-pskc-pinPolicy OBJECT IDENTIFIER ::= { id-pskc\
    \ 25 }\n   PINPolicy ::= SEQUENCE {\n     pinKeyId          [0] UTF8String OPTIONAL,\n\
    \     pinUsageMode      [1] PINUsageMode,\n     maxFailedAttempts [2] INTEGER\
    \ (0..MAX) OPTIONAL,\n     minLength         [3] INTEGER (0..MAX) OPTIONAL,\n\
    \     maxLength         [4] INTEGER (0..MAX) OPTIONAL,\n     pinEncoding     \
    \  [5] Encoding OPTIONAL }\n   PINUsageMode ::= UTF8String (\"Local\" | \"Prepend\"\
    \ | \"Append\"|\n                    \"Algorithmic\")\n   END\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sean Turner\n   IECA, Inc.\n   3057 Nutley Street, Suite\
    \ 106\n   Fairfax, VA 22031\n   USA\n   EMail: turners@ieca.com\n   Russell Housley\n\
    \   Vigil Security, LLC\n   918 Spring Knoll Drive\n   Herndon, VA 20170\n   USA\n\
    \   EMail: housley@vigilsec.com\n"
