- contents:
  - '    Multi-party Chat Using the Message Session Relay Protocol (MSRP)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Message Session Relay Protocol (MSRP) defines a mechanism for\n
    \  sending instant messages (IMs) within a peer-to-peer session,\n   negotiated
    using the Session Initiation Protocol (SIP) and the\n   Session Description Protocol
    (SDP).  This document defines the\n   necessary tools for establishing multi-party
    chat sessions, or chat\n   rooms, using MSRP.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7701.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \  2. Terminology .....................................................5\n   3.
    Motivations and Requirements ....................................6\n   4. Overview
    of Operation ...........................................7\n      4.1. Policy Attributes
    of the Chat Room ........................10\n   5. Creating, Joining, and Deleting
    a Chat Room ....................12\n      5.1. Creating a Chat Room ......................................12\n
    \     5.2. Joining a Chat Room .......................................12\n      5.3.
    Deleting a Chat Room ......................................14\n   6. Sending and
    Receiving Instant Messages .........................14\n      6.1. Regular Messages
    ..........................................14\n      6.2. Private Messages ..........................................17\n
    \     6.3. MSRP Reports and Responses ................................19\n      6.4.
    Congestion Avoidance ......................................20\n   7. Nicknames
    ......................................................21\n      7.1. Using Nicknames
    within a Chat Room ........................22\n      7.2. Modifying a Nickname
    ......................................24\n      7.3. Removing a Nickname .......................................25\n
    \     7.4. Nicknames in Conference Event Packages ....................25\n   8.
    The SDP 'chatroom' Attribute ...................................25\n   9. Examples
    .......................................................28\n      9.1. Joining
    a Chat Room .......................................28\n      9.2. Setting Up a
    Nickname .....................................30\n      9.3. Sending a Regular
    Message to the Chat Room ................31\n      9.4. Sending a Private Message
    to a Participant ................33\n      9.5. Chunked Private Message ...................................35\n
    \     9.6. Nickname in a Conference Information Document .............35\n   10.
    IANA Considerations ...........................................37\n      10.1.
    New MSRP Method ..........................................37\n      10.2. New
    MSRP Header ..........................................37\n      10.3. New MSRP
    Status Codes ....................................37\n      10.4. New SDP Attribute
    ........................................38\n   11. Security Considerations .......................................38\n
    \  12. References ....................................................40\n      12.1.
    Normative References .....................................40\n      12.2. Informative
    References ...................................43\n   Acknowledgments ...................................................43\n
    \  Contributors ......................................................43\n   Authors'
    Addresses ................................................44\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Message Session Relay Protocol (MSRP) [RFC4975] defines
    a\n   mechanism for sending a series of instant messages within a session.\n   The
    Session Initiation Protocol (SIP) [RFC3261] in combination with\n   the Session
    Description Protocol (SDP) [RFC4566] allows for two peers\n   to establish and
    manage such sessions.\n   In another application of SIP, a User Agent (UA) can
    join in a multi-\n   party conversation called a \"conference\" that is hosted
    by a\n   specialized UA called a \"focus\" [RFC4353].  Such a conference can\n
    \  naturally involve MSRP sessions.  It is the responsibility of an\n   entity
    handling the media to relay IMs received from one participant\n   to the rest
    of the participants in the conference.\n   Several such systems already exist
    in the Internet.  Participants in\n   a chat room can be identified with a pseudonym
    or nickname and can\n   decide whether their real identifier is disclosed to other\n
    \  participants.  Participants can also use a rich set of features such\n   as
    the ability to send private instant messages to other\n   participants.\n   Similar
    conferences supporting chat room functionality are already\n   available today.
    \ For example, Internet Relay Chat (IRC) [RFC2810],\n   Extensible Messaging and
    Presence Protocol (XMPP): Core [RFC6120], as\n   well as many other proprietary
    systems.  Specifying equivalent\n   functionality for MSRP-based systems eases
    interworking between these\n   systems.\n   This document defines requirements,
    conventions, and extensions for\n   providing private messages and nickname management
    in centralized\n   chat rooms with MSRP.  Participants in a chat room can be identified\n
    \  by a pseudonym and decide if their real identifier should be\n   disclosed
    to other participants.  This memo uses the SIP Conferencing\n   Framework [RFC4353]
    as a design basis.  It also aims to be compatible\n   with \"A Framework for Centralized
    Conferencing\" [RFC5239].  Should\n   requirements arise, future mechanisms for
    providing similar\n   functionality in generic conferences might be developed,
    for example,\n   where the media is not only restricted to MSRP.  The mechanisms\n
    \  described in this document provide a future compatible short-term\n   solution
    for MSRP centralized chat rooms.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in BCP 14 [RFC2119] and\n
    \  indicate requirement levels for compliant implementations.\n   This memo deals
    with \"Tightly Coupled SIP Conferences\" as defined in\n   the SIP Conferencing
    Framework [RFC4353] and adopts the terminology\n   from that document.  In addition,
    we introduce some new terms:\n   Nickname:   a pseudonym or descriptive name associated
    with a\n      participant.  See Section 7 for details.\n   Multi-party Chat:   an
    instance of a tightly coupled conference, in\n      which the media exchanged
    between the participants consist of\n      MSRP-based IMs.  Also known as a chat
    room.\n   Chat Room:   a synonym for a multi-party chat.\n   Chat Room URI:   a
    URI that identifies a particular chat room and\n      that is a synonym of a \"Conference
    URI\" as defined in RFC 4353\n      [RFC4353].\n   Sender:   the chat room participant
    who originally created an IM and\n      sent it to the chat room server for further
    delivery.\n   Recipient:   the destination chat room participant(s).  This defaults\n
    \     to the full conference participant list minus the IM Sender.\n   MSRP Switch:
    \  a media-level entity that is an MSRP endpoint.  It is\n      a special MSRP
    endpoint that receives MSRP messages and delivers\n      them to the other chat
    room participants.  The MSRP switch has a\n      similar role to a conference
    mixer with the exception that the\n      MSRP switch does not actually \"mix\"
    together different input media\n      streams; it merely relays the messages between
    chat room\n      participants.\n   Private IM:   an IM sent in a chat room intended
    for a single\n      participant.  Generally speaking, a private IM is seen by
    the MSRP\n      switch, in addition to the sender and recipient.  A private IM
    is\n      usually rendered distinctly from the rest of the IMs, indicating\n      that
    the message was a private communication.\n   Anonymous URI:  a URI concealing
    the participant's SIP address of\n      record (AOR) from the other participants
    in the chat room.  The\n      allocation of such a URI is out of scope of this
    specification.\n      An anonymous URI must be valid for the length of the chat
    room\n      session and will be utilized by the MSRP switch to forward\n      messages
    to and from anonymous participants.  Privacy and\n      anonymity are discussed
    in greater detail in RFC 3323 [RFC3323]\n      and RFC 3325 [RFC3325].\n   Conference
    Event Package:  a notification mechanism that allows\n      conference participants
    to learn conference information including\n      roster and state changes in a
    conference.  This would typically be\n      the mechanisms defined in \"A Session
    Initiation Protocol (SIP)\n      Event Package for Conference State\" [RFC4575]
    or \"Conference Event\n      Package Data Format Extension for Centralized Conferencing
    (XCON)\"\n      [RFC6502].\n   Identifier:  a string used to recognize or establish
    as being a\n      particular user.\n   To log in:  to enter identifying data,
    as a name or password, into a\n      chat room, so as to be able to do work with
    the chat room.\n"
  title: 2.  Terminology
- contents:
  - "3.  Motivations and Requirements\n   Although conference frameworks describing
    many types of conferencing\n   applications already exist, such as the one in
    \"A Framework for\n   Centralized Conferencing\" [RFC5239] and the SIP Conferencing\n
    \  Framework [RFC4353], the exact details of session-based instant\n   messaging
    conferences (chat rooms) are not well-defined at the\n   moment.\n   To allow
    interoperable chat implementations, for both conference-\n   aware and conference-unaware
    UAs, certain conventions for MSRP chat\n   rooms need to be defined.  It also
    seems beneficial to provide a set\n   of features that enhance the baseline multi-party
    MSRP in order to be\n   able to create systems that have functionality on par
    with existing\n   chat systems as well as to enable the building of interworking\n
    \  gateways to these existing chat systems.\n   We define the following requirements:\n
    \  REQ-1:  A basic requirement is the existence of a chat room, where\n           participants
    can join and leave the chat room and exchange\n           IMs with the rest of
    the participants.\n   REQ-2:  A recipient of an IM in a chat room must be able
    to determine\n           the identifier of the sender of the message.  Note that
    the\n           actual identifier depends on the one that was used by the\n           sender
    when joining the chat room.\n   REQ-3:  A recipient of an IM in a chat room must
    be able to determine\n           the identifier of the recipient of received messages.
    \ For\n           instance, the recipient of the message might be the entire\n
    \          chat room or a single participant (i.e., a private message).\n           Note
    that the actual identifier may depend on the one that\n           was used by
    the recipient when he or she joined the chat\n           room.\n   REQ-4:  It
    must be possible to send a message to a single participant\n           within
    the chat room (i.e., a private IM).\n   REQ-5:  A chat room participant may have
    a nickname or pseudonym\n           associated with their real identifier.\n   REQ-6:
    \ It must be possible for a participant to change their\n           nickname during
    the progress of the chat room session.\n   REQ-7:  It must be possible for a participant
    to be known only by an\n           anonymous identifier and not their real identifier
    by the\n           rest of the chat room.\n   REQ-8:  It must be possible for
    chat room participants to learn the\n           chat room capabilities described
    in this document.\n"
  title: 3.  Motivations and Requirements
- contents:
  - "4.  Overview of Operation\n   Before a chat room can be entered, it must be created.
    \ Users wishing\n   to host a chat room themselves can, of course, do just that;
    their UA\n   simply morphs from an ordinary UA into a special purpose one called
    a\n   \"Focus UA\".  Another, commonly used setup is one where a dedicated\n   node
    in the network functions as a Focus UA.\n   Each chat room has an identifier of
    its own: a SIP URI that\n   participants use to join the chat room, e.g., by sending
    an INVITE\n   request to it.  The conference focus processes the invitations,
    and\n   as such, maintains SIP dialogs with each participant.  In a multi-\n   party
    chat, or chat room, MSRP is one of the established media\n   streams.  Each chat
    room participant establishes an MSRP session with\n   the MSRP switch, which is
    a special purpose MSRP application.  The\n   MSRP sessions can be relayed by one
    or more MSRP relays, which are\n   specified in RFC 4976 [RFC4976].  This is illustrated
    in Figure 1.\n                        MSRP Sessions\n                +--------------------------+\n
    \               |                          |\n            +---+--+    +---+--+
    \          |\n            | SIP  |    | SIP  |           |\n            | MSRP
    |    | MSRP |     +-----+-----+\n            |Client|    |Client|     |   MSRP
    \   |\n            +---+--+    ++--+--+     |   Relay   |\n                |        |
    \  \\       +-----+-----+\n    SIP Dialogs |       /     +----+       |\n                |
    \     |            \\      | MSRP Sessions\n           +----+------+--+          |
    \    |\n           |              |        +-+-----+-----+\n           |  Conference
    \ |        |    MSRP     |\n           |  Focus UA    |........|    Switch   |\n
    \          |              |        |             |\n           +----+-------+-+
    \       +-+-----+-----+\n                |        \\           |     |\n    SIP
    Dialogs |        |    +------+     | MSRP Sessions\n                |         \\
    \ /             |\n            +---+--+    +-+--+-+     +-----+-----+\n            |
    SIP  |    | SIP  |     |   MSRP    |\n            | MSRP |    | MSRP |     |   Relay
    \  |\n            |Client|    |Client|     +-----+-----+\n            +---+--+
    \   +------+           |\n                |                          |\n                +--------------------------+\n
    \                       MSRP Sessions\n      Figure 1: Multi-party Chat Overview
    Shown with MSRP Relays\n                and a Conference Focus UA\n   The MSRP
    switch is similar to a conference mixer in that it both\n   handles media sessions
    with each of the participants and bridges\n   these streams together.  However,
    unlike a conference mixer, the MSRP\n   switch merely forwards messages between
    participants: it doesn't\n   actually mix the streams in any way.  The system
    is illustrated in\n   Figure 2.\n                     +------+\n                     |
    MSRP |\n                     |Client|\n   +------+          +--.---+          +------+\n
    \  | MSRP |             |              | MSRP |\n   |Client|             |             _|Client|\n
    \  +------._            |           ,' +------+\n            `._         |         ,'\n
    \              `.. +----------+ ,'\n                  `|          |'\n                   |
    \  MSRP   |\n                   |  Switch  |\n                  ,|          |_\n
    \            _,-'' +----------+ ``-._\n   +------.-'            |           `--+------+\n
    \  | MSRP |              |              | MSRP |\n   |Client|              |              |Client|\n
    \  +------+              |              +------+\n                     +---'--+\n
    \                    | MSRP |\n                     |Client|\n                     +------+\n
    \  Figure 2: Multi-party Chat in a Centralized Chat Room\n   Typically, chat room
    participants also subscribe to a conference\n   event package to gather information
    about the conference roster in\n   the form of conference state notifications.
    \ For example,\n   participants can learn about other participants' identifiers,\n
    \  including their nicknames.\n   All messages in the chat room use the Message/CPIM
    wrapper content\n   type [RFC3862], to distinguish between private and regular
    messages.\n   When a participant wants to send an instant message to the chat
    room,\n   it constructs an MSRP SEND request and submits it to the MSRP switch\n
    \  including a regular payload (e.g., a Message/CPIM message that\n   contains
    text, HTML, an image, etc.).  The Message/CPIM To header is\n   set to the chat
    room URI.  The switch then fans out the SEND request\n   to all of the other participants
    using their existing MSRP sessions.\n   A participant can also send a private
    IM addressed to a participant\n   whose identifier has been learned, e.g., via
    a conference event\n   package.  In this case, the sender creates an MSRP SEND
    request with\n   a Message/CPIM wrapper whose To header contains not the chat
    room URI\n   but the recipient's URI.  The MSRP switch then forwards the SEND\n
    \  request to that recipient.  This specification supports the sending\n   of
    private messages to one and only one recipient.  However, if the\n   recipient
    is logged in from different endpoints, the MSRP switch will\n   distribute the
    private message to each endpoint at which the\n   recipient is logged in.\n   We
    extend the current MSRP negotiation that takes place in SDP\n   [RFC4566] to allow
    participants to learn whether the chat room\n   supports and is willing to accept
    (e.g., due to local policy\n   restrictions) certain MSRP functions defined in
    this memo, such as\n   nicknames or private messaging.  This is achieved by a
    new 'chatroom'\n   attribute in SDP (please refer to Section 8 for a detailed\n
    \  description).\n   Naturally, when a participant wishes to leave a chat room,
    it sends a\n   SIP BYE request to the Focus UA and terminates the SIP dialog with\n
    \  the focus and MSRP sessions with the MSRP switch.\n   This document assumes
    that each chat room is allocated its own SIP\n   URI.  A user joining a chat room
    sends an INVITE request to that SIP\n   URI, and, as a result, a new MSRP session
    is established between the\n   user and the MSRP switch.  It is assumed that an
    MSRP session is\n   mapped to a chat room.  If a user wants to join a second chat
    room,\n   he creates a different INVITE request, through a different SIP\n   dialog,
    which leads to the creation of a second MSRP session between\n   the user and
    the MSRP switch.  Notice that these two MSRP sessions\n   can still be multiplexed
    over the same TCP connection as per regular\n   MSRP procedures.  However, each
    chat room is associated with a unique\n   MSRP session and a unique SIP dialog.\n"
  - contents:
    - "4.1.  Policy Attributes of the Chat Room\n   The Conference Framework with
      SIP [RFC4353] introduces the notion of\n   a Conference Policy as \"The complete
      set of rules governing a\n   particular conference.\"  A chat room is a specialized
      type of\n   conference, and the conference policy is sometimes extended with
      new\n   chat-specific rules.  This section lists all the Conference Policy\n
      \  attributes used by the present document and refers to sections in the\n   document
      where the usage of these attributes are described in greater\n   detail.\n   Nicknames:
      \ Whether the chat room accepts users to be recognized with\n      a nickname.
      \ See Sections 7, 7.1, and 8 for details.  Also, the\n      scope of uniqueness
      of the nickname: the chat room (conference\n      instance), a realm or domain,
      a server, etc.\n   Nickname quarantine:  The quarantine to be imposed on a nickname
      once\n      it is not currently in use (e.g., because the participant holding\n
      \     this nickname abandons the chat room), prior to the wide\n      availability
      of this nickname to other users.  This allows the\n      initial holder of the
      nickname to join the chat room during the\n      quarantine period and claim
      the same nickname they were previously\n      using.  See Section 11 for details.\n
      \  Private messaging:  Whether the chat room allows users to send\n      private
      messages to other users of the chat room through the MSRP\n      switch.  See
      Sections 6.2 and 8 for details.\n   Deletion of the chat room:  Whether the
      chat room can be deleted when\n      the creator leaves the chat room or through
      an out-of-band\n      mechanism.  See Section 5.3 for details.\n   Simultaneous
      access:  Whether a user can log in from different\n      endpoints using the
      same identity.  See Sections 6.1 and 6.2 for\n      details.\n   Force TLS transport:
      \ Whether the MSRP switch accepts only Transport\n      Layer Security (TLS)
      as an MSRP transport, in an effort to\n      guarantee confidentiality and privacy.
      \ See Section 11 for\n      details.\n   Maximum message size in congested MSRP
      sessions:  The maximum size of\n      messages that can be distributed to a
      user over a congested MSRP\n      session.  See Section 6.4 for details.\n   Chunk
      reception timer:  The value of a time that controls the maximum\n      time
      that the MSRP switch is waiting for the reception of\n      different chunks
      belonging to the same message.  If the timer\n      expires, the MSRP switch
      will discard the associated message\n      state.  See Section 6.1 for details.\n
      \  Supported wrapped media types:  The list of media types that the MSRP\n      switch
      accepts in Message/CPIM wrappers sent from participants.\n      This list is
      included in the 'accept-wrapped-types' attribute of\n      the MSRP message
      media line in SDP.  If the MSRP switch accepts\n      additional media types
      to those explicitly listed, a \"*\" is added\n      to the list.  A single \"*\"
      indicates that the chat room accepts\n      any wrapped media type.\n"
    title: 4.1.  Policy Attributes of the Chat Room
  title: 4.  Overview of Operation
- contents:
  - '5.  Creating, Joining, and Deleting a Chat Room

    '
  - contents:
    - "5.1.  Creating a Chat Room\n   Since we consider a chat room a particular type
      of conference having\n   MSRP media, the methods defined by the SIP Conference
      Framework\n   [RFC4353] for creating conferences are directly applicable to
      a chat\n   room.\n   Once a chat room is created, it is identified by a SIP
      URI, like any\n   other conference.\n"
    title: 5.1.  Creating a Chat Room
  - contents:
    - "5.2.  Joining a Chat Room\n   Participants usually join the chat room by sending
      an INVITE request\n   to the chat room URI.  The chat room then uses regular
      SIP mechanisms\n   to authenticate the participant.  This may include, e.g.,
      client\n   certificates, SIP Digest authentication [RFC3261], asserted network\n
      \  identity [RFC3325], SIP Identity header field [RFC4474], etc.  As\n   long
      as the user is authenticated, the INVITE request is accepted by\n   the focus
      and the user is brought into the actual chat room.\n   This specification requires
      all IMs to be wrapped in a Message/CPIM\n   wrapper [RFC3862].  Therefore, the
      'accept-types' attribute for the\n   MSRP message media in both the SDP offer
      and answer need to include\n   at least the value 'Message/CPIM' (notice that
      RFC 4975 [RFC4975]\n   mandates this 'accept-types' attribute in SDP).  If the
      'accept-\n   types' attribute does not contain the value 'Message/CPIM', the\n
      \  conference focus will reject the request.  The actual instant message\n   payload
      type is negotiated in the 'accept-wrapped-types' attribute in\n   SDP (see RFC
      4975 [RFC4975] for details).  There is no default\n   wrapped type.  Typical
      wrapped type values can include text/plain,\n   text/html, image/jpeg, image/png,
      audio/mp3, etc.  It is RECOMMENDED\n   that participant endpoints add an 'accept-wrapped-types'
      attribute to\n   the MSRP 'message' media line in SDP, where the supported wrapped\n
      \  types are declared, as per RFC 4975 procedures [RFC4975].\n   The MSRP switch
      needs to be aware of the URIs of the participant\n   (SIP, tel, or IM URIs)
      in order to validate messages sent from this\n   participant prior to their
      forwarding.  This information is known to\n   the focus of the conference.  Therefore,
      an interface between the\n   focus and the MSRP switch is assumed.  However,
      the interface between\n   the focus and the MSRP switch is outside the scope
      of this document.\n   Conference-aware participants will detect that the peer
      is a focus\n   due to the presence of the \"isfocus\" feature tag [RFC3840]
      in the\n   Contact header field of the 200-class response to the INVITE request.\n
      \  Conference-unaware participants will not notice it is a focus, and\n   cannot
      apply the additional mechanisms defined in this document.\n   Participants are
      also aware that the mixer is an MSRP switch due to\n   the presence of a 'message'
      media type and either TCP/MSRP or\n   TCP/TLS/MSRP as the protocol field in
      the media line of SDP\n   [RFC4566].\n   The conference focus of a chat room
      MUST only use a Message/CPIM\n   [RFC3862] top-level wrapper as a payload of
      MSRP messages, and the\n   focus MUST declare it in the SDP offer or answer
      as per regular\n   procedures in RFC 4975 [RFC4975].  This implies that if the\n
      \  conference focus receives, from a participant's endpoint, an SDP\n   offer
      that does not include the value 'Message/CPIM' in the 'accept-\n   types' attribute
      for the MSRP message media line, the conference\n   focus SHOULD either reject
      the MSRP message media stream or reject\n   the complete SDP offer by using
      regular SIP or SDP procedures (e.g.,\n   creating an SDP answer that sets to
      zero the port of the MSRP message\n   media line, responding the INVITE with
      a 488 response, etc.).\n   If the conference focus accepts the participant's
      SDP offer, when the\n   conference focus generates the SDP answer, it MUST set
      the 'accept-\n   types' attribute for the MSRP message media line to a value
      of\n   'Message/CPIM'.  This specification requires all IMs to be wrapped in\n
      \  a Message/CPIM wrapper, therefore, the 'accept-types' attribute in\n   this
      SDP body contains a single value of 'Message/CPIM'.  The actual\n   IM payload
      type is negotiated in the 'accept-wrapped-types' attribute\n   in SDP (see RFC
      4975 [RFC4975] for details).  The conference focus\n   MAY also add an 'accept-wrapped-types'
      attribute to the MSRP message\n   media line in SDP containing the supported
      wrapped types, according\n   to the supported wrapped media types policy.\n
      \     Note that the Message/CPIM wrapper is used to carry the sender\n      information
      that, otherwise, it will not be available to the\n      recipient.  Additionally,
      the Message/CPIM wrapper carries the\n      recipient information (e.g., To
      and Cc headers).\n   If the UA supports anonymous participation and the user
      chooses to\n   use it, the participant's UA SHOULD do at least one of these
      options:\n   (a)  provide an anonymous URI in SIP headers that otherwise reveal\n
      \       identifiers.  Please refer to RFC 3323 [RFC3323] for a detailed\n        description
      of which headers are subject to reveal identifiers\n        and how to populate
      them; or\n   (b)  trust the conference focus and request privacy of their URI,\n
      \       e.g., by means of the SIP Privacy header field [RFC3323],\n        network
      asserted identity [RFC3325], or a similar privacy\n        mechanism.\n   If
      the participant has requested privacy, the conference focus MUST\n   expose
      a participant's anonymous URI through the conference event\n   package [RFC4575].\n
      \  The conference focus of a chat room learns the supported chat room\n   capabilities
      in the endpoint by means of the 'chatroom' attribute\n   exchanged in the SDP
      offer/answer (please refer to Section 8 for a\n   detailed description).  The
      conference focus MUST inform the MSRP\n   switch of the chat room capabilities
      of each participant that joins\n   the chat room (note that the interface defined
      between the conference\n   focus and the MSRP switch is outside the scope of
      this\n   specification).  This information allows the MSRP switch, e.g., to\n
      \  avoid the distribution of private messages to participants whose\n   endpoints
      do not support private messaging.\n"
    title: 5.2.  Joining a Chat Room
  - contents:
    - "5.3.  Deleting a Chat Room\n   As with creating a conference, the methods defined
      by the SIP\n   Conference Framework [RFC4353] for deleting a conference are
      directly\n   applicable to a chat room.  The MSRP switch will terminate the
      MSRP\n   sessions with all the participants.\n   Deleting a chat room is an
      action that heavily depends on the policy\n   of the chat room.  For example,
      the policy can determine whether the\n   chat room is deleted when the creator
      leaves the room or whether an\n   out-of-band mechanism is responsible for the
      deletion.\n"
    title: 5.3.  Deleting a Chat Room
  title: 5.  Creating, Joining, and Deleting a Chat Room
- contents:
  - '6.  Sending and Receiving Instant Messages

    '
  - contents:
    - "6.1.  Regular Messages\n   This section describes the conventions used to send
      and receive IMs\n   that are addressed to all the participants in the chat room.
      \ These\n   are sent over a regular MSRP SEND request that contains a Message/\n
      \  CPIM wrapper [RFC3862] that, in turn, contains the desired payload\n   (e.g.,
      text, image, video clip, etc.).\n   When a chat room participant wishes to send
      an instant message to all\n   the other participants in the chat room, it constructs
      an MSRP SEND\n   request according to the procedures specified in RFC 4975 [RFC4975].\n
      \  The sender MAY choose the desired MSRP report model (e.g., populate\n   the
      Success-Report and Failure-Report MSRP header fields).\n   On sending a regular
      message, the sender MUST populate the To header\n   of the Message/CPIM wrapper
      with the URI of the chat room.  The\n   sender MUST also populate the From header
      of the Message/CPIM wrapper\n   with a proper identifier by which the user is
      recognized in the chat\n   room.  Identifiers that can be used (among others)
      are:\n   o  A SIP URI [RFC3261] representing the participant's address-of-\n
      \     record\n   o  A tel URI [RFC3966] representing the participant's telephone\n
      \     number\n   o  An IM URI [RFC3860] representing the participant's instant\n
      \     messaging address\n   o  An anonymous URI representing the participant's
      anonymous address\n   If the participant wants to remain anonymous, the participant's\n
      \  endpoint MUST populate an anonymous URI in the From header of the\n   Message/CPIM
      wrapper.  Other participants of the chat room will use\n   this anonymous URI
      in the To header of the Message/CPIM wrapper when\n   sending private messages.
      \ Notice that in order for the anonymity\n   mechanism to work, the anonymous
      URI MUST NOT reveal the\n   participant's SIP AOR.  The mechanism for acquiring
      an anonymous URI\n   is outside the scope of this specification.\n   An MSRP
      switch that receives a SEND request from a participant SHOULD\n   first verify
      that the From header field of the Message/CPIM wrapper\n   is correctly populated
      with a valid URI of a participant.  This\n   imposes a requirement for the focus
      of the conference to inform the\n   MSRP switch of the URIs by which the participant
      is known, in order\n   for the MSRP switch to validate messages.  Section 6.3
      provides\n   further information with the actions to be taken in case this\n
      \  validation fails.\n   Then the MSRP switch should inspect the To header field
      of the\n   Message/CPIM wrapper.  If the MSRP switch receives a message\n   containing
      several To header fields in the Message/CPIM wrapper the\n   MSRP switch MUST
      reject the MSRP SEND request with a 403 response, as\n   per procedures in RFC
      4975 [RFC4975].  Then, if the To header field\n   of the Message/CPIM wrapper
      contains the chat room URI and there are\n   no other To header fields, the
      MSRP switch can generate a copy of the\n   SEND request to each of the participants
      in the chat room except the\n   sender.  The MSRP switch MUST NOT modify the
      content received in the\n   SEND request.  However, the MSRP switch MAY re-chunk
      any of the\n   outbound MSRP SEND requests.\n   When generating a copy of the
      SEND request to each participant in the\n   chat room, the MSRP switch MUST
      evaluate the wrapped media types that\n   the recipient is able to accept.  This
      was learned through the\n   'accept-wrapped-types' attribute of the MSRP message
      media line in\n   SDP.  If the MSRP switch is aware that the media type of the
      wrapped\n   content is not acceptable to the recipient, the MSRP switch SHOULD\n
      \  NOT forward this message to that endpoint.  Note that this version of\n   the
      specification does not require the MSRP switch to notify the\n   sender about
      this failure.  Extensions to this specification may\n   improve handling of
      unknown media types.\n   Note that the MSRP switch does not need to wait for
      the reception of\n   the complete MSRP chunk or MSRP message before it starts
      the\n   distribution to the rest of the participants.  Instead, once the MSRP\n
      \  switch has received the headers of the Message/CPIM wrapper, it\n   SHOULD
      start the distribution process.  But, bear in mind that the\n   MSRP switch
      SHOULD still implement some sanity checking.  Please\n   refer to the security
      considerations in Section 11 for further\n   details.\n   When forwarding chunked
      messages as soon as they are received, the\n   Message/CPIM wrapper is only
      present at the beginning of the message,\n   typically within the first chunk.
      \ Subsequent chunks will contain the\n   rest of the message, but not the Message/CPIM
      headers.  Therefore, an\n   MSRP switch that receives a subsequent message may
      face challenges in\n   determining the correct list of recipients of the message.
      \ An MSRP\n   switch that uses this fast forwarding procedure MUST temporarily\n
      \  store the Message-ID of the MSRP message to correlate the different\n   chunks;
      it MUST also temporarily store the list of recipients to\n   which the initial
      chunks were delivered.  The MSRP switch SHOULD\n   forward subsequent chunks
      only to those recipients who were sent the\n   initial chunks, except if the
      MSRP switch has knowledge that one of\n   the recipients of the initial chunks
      has dropped from the chat room.\n   This behavior also avoids new participants
      who had joined the chat\n   room when the first chunk was distributed from receiving
      subsequent\n   chunks that would otherwise need to be discarded.\n   Once the
      MSRP switch receives the last chunk of a message, and that\n   chunk is successfully
      sent to each of the recipients, the MSRP switch\n   discards the temporary storage
      of MSRP Message-ID and the associated\n   list of recipients.\n   In some occasions,
      a sender might suffer a transport error condition\n   (such as loss of connectivity
      or depletion of battery) that makes the\n   sending of a message incomplete,
      e.g., some chunks were received by\n   the MSRP switch, but not all of them.
      \ This is a behavior already\n   considered in the core MSRP specification (see
      RFC 4975 [RFC4975]\n   Section 5.4).  The problem in the context of a chat room
      lies with\n   the use of temporary storage for fast forwarding.  In order to\n
      \  prevent attacks related to the exhaustion of temporary storage of\n   chunked
      messages, on receiving a first chunk of a message, where the\n   MSRP switch
      is using the fast forward method, the MSRP switch MUST\n   set a chunk reception
      timer for controlling the reception of the\n   remaining chunks.\n   This chunk
      reception timer can be reset every time a new chunk of the\n   same message
      is received.  When this timer expires, the MSRP switch\n   MUST consider that
      the sending of the message was aborted, and it MAY\n   discard all the message
      state associated with it, including the\n   Message-ID and the list of recipients.
      \ Additionally, if this chunk\n   reception timer expires, the MSRP switch MAY
      choose to send an abort\n   chunk (i.e., one with the \"#\" flag set) to each
      to the recipients.\n   This is just an optimization, since MSRP endpoints need
      to be able to\n   handle incomplete messages as per regular MSRP.\n   The specific
      value of this chunk reception timer is not standardized;\n   it is subject of
      local policy.  However, it is recommended not to be\n   a short value.  For
      example, a time interval on the order of a normal\n   TCP timeout (i.e., around
      540 seconds) would be reasonable.  A value\n   on the order of a few seconds
      would not.\n   An MSRP endpoint that receives a SEND request from the MSRP switch\n
      \  containing a Message/CPIM wrapper SHOULD first inspect the To header\n   field
      of the Message/CPIM wrapper.  If the To header field is set to\n   the chat
      room URI, it should render it as a regular message that has\n   been distributed
      to all the participants in the chat room.  Then, the\n   MSRP endpoint SHOULD
      inspect the From header field of the Message/\n   CPIM wrapper to identify the
      sender.  The From header field will\n   include a URI that identifies the sender.
      \ The endpoint might have\n   also received further identifier information through
      a subscription\n   to a conference event package.\n   It is possible that a
      participant, identified by a SIP AoR or other\n   valid URI, joins a chat room
      simultaneously from two or more\n   different SIP UAs.  It is recommended that
      the MSRP switch implements\n   means to map a URI to two or more MSRP sessions.
      \ If the policy of\n   the chat room allows simultaneous access, the MSRP switch
      MUST copy\n   all regular messages intended to the recipient through each MSRP\n
      \  session mapped to the recipient's URI.\n"
    title: 6.1.  Regular Messages
  - contents:
    - "6.2.  Private Messages\n   This section describes the conventions used to send
      and receive\n   private IMs, i.e., IMs that are addressed to one participant
      of the\n   chat room rather than to all of them.  The chat room has a local\n
      \  policy that determines whether or not private messages are supported.\n   A
      chat room can signal support for private messages using the\n   'chatroom' attribute
      in SDP (please refer to Section 8 for a detailed\n   description).\n   When
      a chat room participant wishes to send a private IM to a\n   participant in
      the chat room, it follows the same procedures to\n   create a SEND request as
      for regular messages (Section 6.1).  The\n   only difference is that the MSRP
      endpoint MUST populate a single To\n   header of the Message/CPIM wrapper with
      the identifier of the\n   intended recipient.  The identifier can be SIP, tel,
      and im URIs\n   typically learned from the information received in notifications
      of a\n   conference event package.\n      This version of the specification
      does not support sending a\n      private message to multiple recipients, i.e.,
      the presence of\n      multiple To headers in the Message/CPIM wrapper of the
      MSRP SEND\n      request.  This is due to added complexity, for example, with
      the\n      need to determine whether a message was not delivered to some of\n
      \     the intended recipients.  Implementations that still want to\n      recreate
      this function can send a series of single private\n      messages, one private
      message per intended recipient.  The\n      endpoint can correlate this series
      of messages and create the\n      effect of a private message addressed to multiple
      recipients.\n   As for regular messages, an MSRP switch that receives a SEND
      request\n   from a participant SHOULD first verify that the From header field
      of\n   the Message/CPIM wrapper is correctly populated with a valid URI\n   (i.e.,
      the URI is a participant of this chat room).  Section 6.3\n   provides further
      information regarding the actions to be taken in\n   case this validation fails.\n
      \  Then, the MSRP switch inspects the To header field of the Message/\n   CPIM
      wrapper.  If the MSRP switch receives a message containing\n   several To header
      fields in the Message/CPIM wrapper, the MSRP switch\n   MUST reject the MSRP
      SEND request with a 403 response, as per\n   procedures in RFC 4975 [RFC4975].
      \ Then, the MSRP switch verifies\n   that the To header of the Message/CPIM
      wrapper matches the URI of a\n   participant of the chat room.  If this To header
      field does not\n   contain the URI of a participant of the chat room or if the
      To header\n   field cannot be resolved (e.g., caused by a mistyped URI), the
      MSRP\n   switch MUST reject the request with a 404 response.  This new 404\n
      \  status code indicates a failure to resolve the recipient URI in the\n   To
      header field of the Message/CPIM wrapper.\n      Notice the importance of the
      From and To headers in the Message/\n      CPIM wrapper.  If an intermediary
      modifies these values, the MSRP\n      switch might not be able to identify
      the source or intended\n      destination of the message, resulting in a rejection
      of the\n      message.\n   Finally, the MSRP switch verifies that the recipient
      supports private\n   messages.  If the recipient does not support private messages,
      the\n   MSRP switch MUST reject the request with a 428 response.  This new\n
      \  428 response indicates that the recipient does not support private\n   messages.
      \ Any potential REPORT request that the MSRP switch sends to\n   the sender
      MUST include a Message/CPIM wrapper containing the\n   original From header
      field included in the SEND request and the To\n   header field of the original
      Message/CPIM wrapper.  The MSRP switch\n   MUST NOT forward private messages
      to a recipient that does not\n   support private messaging.\n   If successful,
      the MSRP switch should search its mapping table to\n   find the MSRP sessions
      established toward the recipient.  If a match\n   is found, the MSRP switch
      MUST create a SEND request and MUST copy\n   the contents of the sender's message
      to it.\n   An MSRP endpoint that receives a SEND request from the MSRP switch\n
      \  does the same validations as for regular messages (Section 6.1).  If\n   the
      To header field is different from the chat room URI, the MSRP\n   endpoints
      know that this is a private message.  The endpoint should\n   render who it
      is from based on the value of the From header of the\n   Message/CPIM wrapper.
      \ The endpoint can also use the sender's\n   nickname, possibly learned via
      a conference event package, to render\n   the sender of the message, instead
      of using the sender's actual URI.\n   As with regular messages, if the policy
      of the chat room allows\n   simultaneous access, the MSRP switch MUST copy all
      private messages\n   intended to the recipient through each MSRP session mapped
      to the\n   recipient's URI.\n"
    title: 6.2.  Private Messages
  - contents:
    - "6.3.  MSRP Reports and Responses\n   This section discusses the common procedures
      for regular and private\n   messages with respect to MSRP reports and responses.
      \ Any particular\n   procedure affecting only regular messages or only private
      messages is\n   discussed in the previous sections (Sections 6.1 or 6.2,\n   respectively).\n
      \  MSRP switches MUST follow the success report and failure report\n   handling
      described in Section 7 of RFC 4975 [RFC4975], complemented\n   with the procedures
      described in this section.  The MSRP switch MUST\n   act as an MSRP endpoint
      receiver of the request, according to\n   Section 5.3 of RFC 4975 [RFC4975].\n
      \  If the MSRP switch receives an MSRP SEND request that does not\n   contain
      a Message/CPIM wrapper, the MSRP switch MUST reject the\n   request with a 415
      response (specified in RFC 4975 [RFC4975]).\n   If the MSRP switch receives
      an MSRP SEND request where the URI\n   included in the From header field of
      the Message/CPIM wrapper is not\n   valid, (e.g., because it does not \"belong\"
      to the sender of the\n   message or is not a valid participant of the chat room),
      the MSRP\n   switch MUST reject the request with a 403 response.  In cases without\n
      \  error, the MSRP switch MUST construct responses according to\n   Section
      7.2 of RFC 4975 [RFC4975].\n   When the MSRP switch forwards a SEND request,
      it MAY use any report\n   model in the copies intended for the recipients.  The
      receiver\n   reports from the recipients MUST NOT be forwarded to the originator\n
      \  of the original SEND request.  This could lead to having the sender\n   receiving
      multiple reports for a single MSRP request.\n"
    title: 6.3.  MSRP Reports and Responses
  - contents:
    - "6.4.  Congestion Avoidance\n   Congestion can occur when multiple heterogeneous
      interfaces are used\n   by a number of users who are participating in a chat
      room, and, in\n   particular, when paths become overloaded by any application.
      \ Some of\n   these users might have fast paths capable of high throughputs
      while\n   other users might be slow paths with constrained throughputs.  Some\n
      \  paths might become congested only by the chat application; other\n   paths
      gets congested by other applications.  Therefore, it is\n   possible that a
      subset of the participants of the chat room are able\n   to send and receive
      a large number of messages in a short time or\n   with large contents (e.g.,
      pictures), whereas others are not able to\n   keep up the pace.\n   Additionally,
      since MSRP uses a connection-oriented transport\n   protocol such as TCP, it
      is expected that TCP congestion control\n   mechanisms be activated if congestion
      occurs.  Details on congestion\n   control are specified in RFC 5681 [RFC5681].\n
      \  While this document does not mandate a particular MSRP-specific\n   mechanism
      to avoid congestion in any of the paths, something that is\n   deemed outside
      the scope of this document, this document provides\n   some recommendations
      for implementors to consider.\n   It is RECOMMENDED that MSRP switches implement
      one or more MSRP-\n   specific strategies to detect and avoid congestion.  Possible\n
      \  strategies (but definitely not a comprehensive list) include:\n   o  If the
      MSRP switch is writing data to a send buffer and detects\n      that the send
      buffer associated with that TCP connection is\n      getting full (e.g., close
      to 80% of its capacity), the MSRP switch\n      marks the associated MSRP sessions
      making use of that TCP\n      connection as \"congested\".\n   o  Prior to sending
      a new MSRP message to a user, the MSRP switch\n      verifies the congested
      flag associated to that MSRP session.  If\n      the MSRP session is marked
      as congested, the MSRP switch can apply\n      a congestion avoidance mechanism,
      such as:\n      *  The MSRP switch MAY discard regular MSRP messages sent to
      that\n         user while the congestion flag is raised for the user's TCP\n
      \        connection.  In order to inform the user of the congestion, the\n         MSRP
      switch MAY send a regular MSRP message to the user whose\n         congestion
      flag is raised.  This message indicates that some\n         other messages are
      being discarded due to network congestion.\n         However, it should be noted
      that this message can get stuck at\n         MSRP switch, if the path is fully
      congested, i.e., it may not\n         be delivered anyhow.\n      *  The MSRP
      can implement a temporary policy to disallow the\n         distribution of messages
      larger than a certain size to MSRP\n         sessions marked as congested.  Similarly,
      the user should be\n         informed of this fact by the MSRP switch sending
      a regular MSRP\n         message indicating this condition.\n   o  If the MSRP
      switch determines that the congestion flag associated\n      with a given TCP
      connection has been raised for quite some time\n      (on the order of a few
      minutes), or if the interface is down, this\n      may be considered an indication
      that the TCP connection has not\n      been able to recover from a congestion
      state.  The MSRP switch MAY\n      close this congested TCP connection as well
      as the MSRP session\n      and SIP session.\n"
    title: 6.4.  Congestion Avoidance
  title: 6.  Sending and Receiving Instant Messages
- contents:
  - "7.  Nicknames\n   A common characteristic of existing chat room services is that\n
    \  participants have the ability to present themselves with a nickname\n   to
    the rest of the participants of the chat room.  It is used for\n   easy reference
    of participants in the chat room and can also provide\n   anonymous participants
    with a meaningful descriptive name.\n   A nickname is a useful construct in many
    use cases, of which MSRP\n   chat is but one example.  A nickname is associated
    with a URI; the\n   focus knows the participant by its association to this URI.\n
    \  Therefore, if a user joins the chat room under the same URI from\n   multiple
    devices, he or she may request the same nickname across all\n   these devices.\n
    \  A nickname is a user-selectable moniker by which the participant\n   wants
    to be known to the other participants.  It is not a 'display-\n   name', but it
    is used somewhat like a display name.  A main\n   difference is that a nickname
    is unique inside a chat room to allow\n   an unambiguous reference to a participant
    in the chat.  Nicknames may\n   be long lived, or they may be temporary.  Users
    also need to reserve\n   a nickname prior to its utilization.\n   This memo specifies
    the nickname as a string.  The nickname string\n   MUST unambiguously be associated
    with a single user in the scope of\n   the chat room (conference instance).  This
    scope is similar to having\n   a nickname unique per user inside a chat room from
    \"Extensible\n   Messaging and Presence Protocol (XMPP): Core\" [RFC6120].  The
    chat\n   room may have policies associated with nicknames.  It may not accept\n
    \  nickname strings at all, or it may provide a wider unambiguous scope\n   like
    a domain or server, similar to IRC [RFC2810].\n"
  - contents:
    - "7.1.  Using Nicknames within a Chat Room\n   This memo provides a mechanism
      to reserve a nickname for a\n   participant for as long as the participant is
      logged into the chat\n   room.  The mechanism is based on a NICKNAME MSRP method
      (see below)\n   and a new \"Use-Nickname\" header.  Note that other mechanisms
      may\n   exist (for example, a web page reservation system), although they are\n
      \  outside the scope of this document.\n   A chat room participant who has established
      an MSRP session with the\n   MSRP switch, where the MSRP switch has indicated
      the support and\n   availability of nicknames with the 'nicknames' token in
      the\n   'chatroom' SDP attribute, MAY send a NICKNAME request to the MSRP\n
      \  switch.  The NICKNAME request MUST include a new Use-Nickname header\n   that
      contains the nickname string that the participant wants to\n   reserve.  This
      nickname string MUST NOT be zero octets in length and\n   MUST NOT be more than
      1023 octets in length.  Finally, MSRP NICKNAME\n   requests MUST NOT include
      Success-Report or Failure-Report header\n   fields.\n      Bear in mind that
      nickname strings, like the rest of the MSRP\n      message, use the UTF-8 transformation
      format [RFC3629].\n      Therefore, a character may be encoded in more than
      one octet.\n   An MSRP switch that receives a NICKNAME request containing a\n
      \  Use-Nickname header field SHOULD first verify whether the policy of\n   the
      chat room allows the nickname functionality.  If not allowed, the\n   MSRP switch
      MUST reject the request with a 403 response, as per RFC\n   4975 [RFC4975].\n
      \  If the policy of the chat room allows the usage of nicknames, any new\n   nickname
      requested MUST be prepared and compared with nicknames\n   already in use or
      reserved following the rules defined in\n   \"Preparation, Enforcement, and
      Comparison of Internationalized\n   Strings Representing Nicknames\" [RFC7700].\n
      \  This mitigates the problem of nickname duplication, but it does not\n   solve
      a problem whereby users can choose similar (but different)\n   characters to
      represent two different nicknames.  For example, \"BOY\"\n   and \"B0Y\" are
      different nicknames that can mislead users.  The former\n   uses the capital
      letter \"O\" while the latter uses the number zero\n   \"0\".  In many fonts,
      the letter \"O\" and the number zero \"0\" might be\n   quite similar and difficult
      to perceive as different characters.\n   Chat rooms MAY provide a mechanism
      to mitigate confusable nicknames.\n   In addition to preparing and comparing
      following the rules above, the\n   MSRP switch SHOULD only allow the reservation
      of an already-used\n   nickname if the same user (e.g., identified by the SIP
      AOR) that is\n   currently using the nickname is making this subsequent request.
      \ This\n   may include, e.g., allowing the participant's URI to use the same\n
      \  nickname when the participant has joined the chat room from different\n   devices
      under the same URI.  The participant's authenticated\n   identifier can be derived
      after a successful SIP Digest\n   Authentication [RFC3261], included in a trusted
      SIP P-Asserted-\n   Identity header field [RFC3325], included in a valid SIP
      Identity\n   header field [RFC4474], or derived from any other present or future\n
      \  SIP authentication mechanism.  Once the MSRP switch has validated\n   that
      the participant is entitled to reserve the requested nickname,\n   the MSRP
      switch verifies if the suggested nickname can be accepted\n   (see below).\n
      \  The reservation of a nickname can fail in several cases.  If the\n   NICKNAME
      request contains a malformed value in the Use-Nickname\n   header field, the
      MSRP switch MUST answer the NICKNAME request with a\n   424 response code.  This
      can be the case when the value of the\n   Use-Nickname header field does not
      conform to the syntax.\n   The reservation of a nickname can also fail if the
      value of the\n   Use-Nickname header field of the NICKNAME request is a reserved
      word\n   (not to be used as a nickname by any user) or that particular value\n
      \  is already in use by another user.  In these cases, the MSRP switch\n   MUST
      answer the NICKNAME request with a 425 response code.\n   In both error conditions
      (receiving a 424 or 425 response code), the\n   nickname usage is considered
      failed; the nickname is not allocated to\n   this user.  The user can select
      a different nickname and retry\n   another NICKNAME request.\n   If the MSRP
      switch is able to accept the suggested nickname to be\n   used by this user,
      the MSRP switch MUST answer the NICKNAME request\n   with a 200 response as
      per regular MSRP procedures.\n   As indicated earlier, this specification defines
      a new MSRP header\n   field: Use-Nickname.  The Use-Nickname header field carries
      a\n   nickname string.  This specification defines the usage of the\n   Use-Nickname
      header field in NICKNAME requests.  If need arises,\n   usages of the Use-Nickname
      header field in other MSRP methods should\n   be specified separately.\n   According
      to RFC 4975 [RFC4975], MSRP uses the UTF-8 transformation\n   format [RFC3629].
      \ The syntax of the MSRP NICKNAME method and the\n   Use-Nickname header field
      is built upon the MSRP formal syntax\n   [RFC4975] using the Augmented Backus-Naur
      Form (ABNF) [RFC5234].\n            other-method =/ NICKNAMEm\n                     ;
      other-method defined in RFC 4975\n            NICKNAMEm = %x4E.49.43.4B.4E.41.4D.45
      ; NICKNAME in caps\n            ext-header =/ Use-Nickname\n                     ;
      ext-header defined in RFC 4975\n            Use-Nickname = \"Use-Nickname:\"
      SP nickname\n            nickname = DQUOTE 1*1023(qdtext / qd-esc) DQUOTE\n
      \                    ; qdtext and qd-esc defined in RFC 4975\n   Note that,
      according to RFC 4975 [RFC4975], \"quoted-string\" admits a\n   subset of UTF-8
      characters [RFC3629].  Please refer to Section 9 of\n   RFC 4975 [RFC4975] for
      more details.\n   Once the MSRP switch has reserved a nickname and has bound
      it to a\n   URI (e.g., a SIP AoR), the MSRP server MAY allow the usage of the\n
      \  same nickname by the same user (identified by the same URI, such as a\n   SIP
      AoR) over a second MSRP session.  This might be the case if the\n   user joins
      the same chat room from a different SIP UA.  In this case,\n   the user MAY
      request a nickname that is the same or different than\n   that used in conjunction
      with the first MSRP session; the MSRP server\n   MAY accept the usage of the
      same nickname by the same user.  The MSRP\n   switch MUST NOT automatically
      assign the same nickname to more than\n   one MSRP session established from
      the same URI, because this can\n   create confusion to the user as whether the
      same nickname is bound to\n   the second MSRP session.\n"
    title: 7.1.  Using Nicknames within a Chat Room
  - contents:
    - "7.2.  Modifying a Nickname\n   Typically, a participant will reserve a nickname
      as soon as the\n   participant joins the chat room.  But it is also possible
      for a\n   participant to modify his/her own nickname and replace it with a new\n
      \  one at any time during the duration of the MSRP session.\n   Modification
      of the nickname is not different from the initial\n   reservation and usage
      of a nickname; thus, the NICKNAME method is\n   used as described in Section
      7.1.\n   If a NICKNAME request that attempts to modify the current nickname
      of\n   the user fails for some reason, the current nickname stays in effect.\n
      \  A new nickname comes into effect and the old one is released only\n   after
      a NICKNAME request is accepted with a 200 response.\n"
    title: 7.2.  Modifying a Nickname
  - contents:
    - "7.3.  Removing a Nickname\n   If the participant no longer wants to be known
      by a nickname in the\n   chat room, the participant can follow the method described
      in\n   Section 7.2.  The nickname element of the Use-Nickname header MUST be\n
      \  set to an empty quoted string.\n"
    title: 7.3.  Removing a Nickname
  - contents:
    - "7.4.  Nicknames in Conference Event Packages\n   Typically the conference focus
      acts as a notifier of the conference\n   event package, RFC 4575 [RFC4575].
      \ It is RECOMMENDED that conference\n   foci and endpoints support RFC 6502
      [RFC6502] for providing\n   information regarding the conference and, in particular,
      supplying\n   information of the roster of the conference.  It is also RECOMMENDED\n
      \  that conference foci and endpoints support RFC 6501 [RFC6501], which\n   extends
      the <user> element originally specified in RFC 4575 [RFC4575]\n   with a new
      'nickname' attribute.  This allows endpoints to learn the\n   nicknames of participants
      of the chat room.\n"
    title: 7.4.  Nicknames in Conference Event Packages
  title: 7.  Nicknames
- contents:
  - "8.  The SDP 'chatroom' Attribute\n   There are a handful of use cases where a
    participant would like to\n   learn the chat room capabilities supported by the
    local policy of the\n   MSRP switch and the chat room.  For example, a participant
    would like\n   to learn if the MSRP switch supports private messaging; otherwise,\n
    \  the participant may send what he believes is a private IM addressed\n   to
    a participant, but since the MSRP switch does not support the\n   functions specified
    in this memo, the message would eventually be\n   distributed to all the participants
    of the chat room.\n   The reverse case also exists.  A participant, say Alice,
    whose UA\n   does not support the extensions defined by this document joins the\n
    \  chat room.  The MSRP switch learns that Alice's application does not\n   support
    private messaging nor nicknames.  If another participant, say\n   Bob, sends a
    private message to Alice, the MSRP switch does not\n   distribute it to Alice,
    because Alice is not able to differentiate it\n   from a regular message sent
    to the whole roster.  Furthermore, if\n   Alice replied to this message, she would
    do it to the whole roster.\n   Because of this, the MSRP switch also keeps track
    of users who do not\n   support the extensions defined in this document.\n   In
    another scenario, the policy of a chat room may indicate that\n   certain functions
    are not allowed.  For example, the policy may\n   indicate that nicknames or private
    messages are forbidden.\n   In order to provide the user with a good chat room
    experience, we\n   define a new 'chatroom' SDP attribute.  The 'chatroom' attribute
    is a\n   media-level value attribute [RFC4566] that MAY be included in\n   conjunction
    with an MSRP media stream (i.e., when an \"m=\" line in SDP\n   indicates \"TCP/MSRP\"
    or \"TCP/TLS/MSRP\").  The 'chatroom' attribute\n   without further modifiers
    (e.g., chat-tokens) indicates that the\n   endpoint supports the procedures described
    in this document for\n   transferring MSRP messages to/from a chat room.  The
    'chatroom'\n   attribute can be complemented with additional modifiers that further\n
    \  indicate the intersection of support and local policy allowance for a\n   number
    of functions specified in this document.  Specifically, we\n   provide the means
    to indicate support for the use of nicknames and\n   private messaging.\n   The
    'chatroom' attribute merely indicates the capabilities supported\n   and allowed
    by the local policy.  This attribute is not a negotiation\n   subject to the SDP
    offer/answer model [RFC3264], but instead a\n   declaration.  Therefore, a 'chatroom'
    attribute included in an SDP\n   answer does not need to be a subset of the values
    included in the\n   'chatroom' attribute of its corresponding SDP offer.  Consequently,\n
    \  an SDP answer MAY contain a 'chatroom' attribute even if its\n   corresponding
    SDP offer did not include it.\n   In subsequent SDP offer/answer [RFC3264] exchanges
    pertaining to the\n   same session, the 'chatroom' attribute MAY be modified with
    respect\n   to an earlier SDP offer/answer exchange.  The new value of this\n
    \  attribute indicates the current support and local policy, meaning\n   that
    some restrictions can apply now or might have been removed.  If\n   the 'chatroom'
    attribute is not included in a subsequent SDP offer/\n   answer, but a corresponding
    MSRP stream is still in place, it\n   indicates that support for the procedures
    indicated in this document\n   are disabled.\n   The 'chatroom' SDP attribute
    has the following ABNF [RFC5234] syntax:\n          attribute         =/ chatroom-attr\n
    \                                   ; attribute defined in RFC 4566\n          chatroom-attr
    \    = chatroom-label [\":\" chat-token\n                              *(SP chat-token)]\n
    \         chatroom-label    = \"chatroom\"\n          chat-token        = (nicknames-token
    / private-msg-token /\n                               ext-token)\n          nicknames-token
    \  = \"nickname\"\n          private-msg-token = \"private-messages\"\n          ext-token
    \        = private-token / standard-token\n          private-token     = toplabel
    \".\" *(domainlabel \".\") token\n                                    ; toplabel
    defined in RFC 3261\n                                    ; domainlabel defined
    in RFC 3261\n                                    ; token defined in RFC 3261\n
    \         standard-token    = token\n   A given 'chat-token' value MUST NOT appear
    more than once in a\n   'chatroom' attribute.\n   A conference focus that includes
    the 'nicknames' token in the session\n   description is signaling that the MSRP
    switch supports and the chat\n   room allows the use of the procedures specified
    in Section 7.  A\n   conference focus that includes the 'private-messages' in
    the SDP\n   description is signaling that the MSRP switch supports and the chat\n
    \  room allows the use of the procedures specified in Section 6.2.\n   An example
    of the 'chatroom' attribute for an MSRP media stream that\n   indicates the acceptance
    of nicknames and private messages:\n             a=chatroom:nickname private-messages\n
    \  An example of a 'chatroom' attribute for an MSRP media stream where\n   the
    endpoint, e.g., an MSRP switch, does not allow nicknames or\n   private messages.\n
    \            a=chatroom\n   The 'chatroom' attribute allows extensibility with
    the addition of\n   new tokens.  No IANA registry is provided at this time, since
    no\n   extensions are expected at the time of this writing.  Extensions to\n   the
    'chatroom' attribute can be defined in IETF documents or as\n   private-vendor
    extensions.\n   Extensions defined in an IETF document MUST follow the 'standard-\n
    \  token' ABNF previously defined.  In this type of extension, care must\n   be
    taken in the selection of the token to avoid a clash with any of\n   the tokens
    previously defined.\n   Private extensions MUST follow the 'private-token' ABNF
    previously\n   defined.  The 'private-token' MUST be included in the DNS name
    of the\n   vendor.  Then, the token is reversed in order to avoid clashes of\n
    \  tokens.  The following is an example of an extension named \"foo.chat\"\n   by
    a vendor \"example.com\"\n           a=chatroom:nickname private-messages com.example.chat.foo\n
    \  Note that feature names created by different organizations are not\n   intended
    to have the same semantics or even interoperate.\n"
  title: 8.  The SDP 'chatroom' Attribute
- contents:
  - '9.  Examples

    '
  - contents:
    - "9.1.  Joining a Chat Room\n   Figure 3 presents a flow diagram where Alice
      joins a chat room by\n   sending an INVITE request.  This INVITE request contains
      a session\n   description that includes the chat room extensions defined in
      this\n   document.\n   Alice               Conference Focus\n     |                        |\n
      \    |F1: (SIP) INVITE        |\n     |----------------------->|\n     |F2:
      (SIP) 200 OK        |\n     |<-----------------------|\n     |F3: (SIP) ACK
      \          |\n     |----------------------->|\n     |                        |\n
      \  Figure 3: Flow Diagram of a User Joining a Chat Room\n   F1: Alice constructs
      an SDP description that includes an MSRP media\n   stream.  She also indicates
      her support for the chat room extensions\n   defined in this document.  She
      sends the INVITE request to the chat\n   room server.\n   INVITE sip:chatroom22@chat.example.com
      SIP/2.0\n   Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74bf9\n
      \  Max-Forwards: 70\n   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n
      \  To: Chatroom 22 <sip:chatroom22@chat.example.com>\n   Call-ID: 3848276298220188511@atlanta.example.com\n
      \  CSeq: 1 INVITE\n   Contact: <sip:alice@client.atlanta.example.com;transport=tcp>\n
      \  Content-Type: application/sdp\n   Content-Length: 290\n   v=0\n   o=alice
      2890844526 2890844526 IN IP4 client.atlanta.example.com\n   s=-\n   c=IN IP4
      client.atlanta.example.com\n   m=message 7654 TCP/MSRP *\n   a=accept-types:message/cpim
      text/plain text/html\n   a=path:msrp://client.atlanta.example.com:7654/jshA7weztas;tcp\n
      \  a=chatroom:nickname private-messages\n   F2: The chat room server accepts
      the session establishment.  It\n   includes the 'isfocus' and other relevant
      feature tags in the Contact\n   header field of the response.  The chat room
      server also builds an\n   SDP answer that forces the reception of messages wrapped
      in Message/\n   CPIM wrappers.  It also includes the 'chatroom' attribute with
      the\n   allowed extensions.\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP client.atlanta.example.com:5060;branch=z9hG4bK74bf9\n
      \   ;received=192.0.2.101\n   From: Alice <sip:alice@atlanta.example.com>;tag=9fxced76sl\n
      \  To: Chatroom 22 <sip:chatroom22@chat.example.com>;tag=8321234356\n   Call-ID:
      3848276298220188511@atlanta.example.com\n   CSeq: 1 INVITE\n   Contact: <sip:chatroom22@chat.example.com;transport=tcp>
      \\\n             ;methods=\"INVITE,BYE,OPTIONS,ACK,CANCEL,SUBSCRIBE,NOTIFY\"
      \\\n             ;automata;isfocus;message;event=\"conference\"\n   Content-Type:
      application/sdp\n   Content-Length: 290\n   v=0\n   o=chat 2890844527 2890844527
      IN IP4 chat.example.com\n   s=-\n   c=IN IP4 chat.example.com\n   m=message
      12763 TCP/MSRP *\n   a=accept-types:message/cpim\n   a=accept-wrapped-types:text/plain
      text/html *\n   a=path:msrp://chat.example.com:12763/kjhd37s2s20w2a;tcp\n   a=chatroom:nickname
      private-messages\n   F3: The session established is acknowledged (details not
      shown).\n"
    title: 9.1.  Joining a Chat Room
  - contents:
    - "9.2.  Setting Up a Nickname\n   Figure 4 shows an example of Alice setting
      up a nickname using the\n   chat room as provider.  Her first proposal is not
      accepted because\n   that proposed nickname is already in use.  Then, she makes
      a second\n   proposal with a new nickname.  This second proposal is accepted.\n
      \  Alice                  MSRP Switch\n     |                        |\n     |F1:
      (MSRP) NICKNAME     |\n     |----------------------->|\n     |F2: (MSRP) 425
      \         |\n     |<-----------------------|\n     |F3: (MSRP) NICKNAME     |\n
      \    |----------------------->|\n     |F4: (MSRP) 200          |\n     |<-----------------------|\n
      \    |                        |\n         Figure 4: Flow Diagram of a User Setting
      up Her Nickname\n   F1: Alice sends an MSRP NICKNAME request that contains her
      proposed\n   nicknames in the Use-Nickname header field.\n   MSRP d93kswow NICKNAME\n
      \  To-Path: msrp://chat.example.com:12763/kjhd37s2s20w2a;tcp\n   From-Path:
      msrp://client.atlanta.example.com:7654/jshA7weztas;tcp\n   Use-Nickname: \"Alice
      the great\"\n   -------d93kswow$\n   F2: The MSRP switch analyzes the existing
      allocation of nicknames and\n   detects that the nickname \"Alice the great\"
      is already provided to\n   another participant in the chat room.  The MSRP switch
      answers with a\n   425 response.\n   MSRP d93kswow 425 Nickname reserved or
      already in use\n   To-Path: msrp://client.atlanta.example.com:7654/jshA7weztas;tcp\n
      \  From-Path: msrp://chat.example.com:12763/kjhd37s2s20w2a;tcp\n   -------d93kswow$\n
      \  F3: Alice receives the response.  She proposes a new nickname in a\n   second
      NICKNAME request.\n   MSRP 09swk2d NICKNAME\n   To-Path: msrp://chat.example.com:12763/kjhd37s2s20w2a;tcp\n
      \  From-Path: msrp://client.atlanta.example.com:7654/jshA7weztas;tcp\n   Use-Nickname:
      \"Alice in Wonderland\"\n   -------09swk2d$\n   F4: The MSRP switch accepts
      the nickname proposal and answers with a\n   200 response.\n   MSRP 09swk2d
      200 OK\n   To-Path: msrp://client.atlanta.example.com:7654/jshA7weztas;tcp\n
      \  From-Path: msrp://chat.example.com:12763/kjhd37s2s20w2a;tcp\n   -------09swk2d$\n"
    title: 9.2.  Setting Up a Nickname
  - contents:
    - "9.3.  Sending a Regular Message to the Chat Room\n   Figure 5 is a flow diagram
      where Alice is sending a regular message\n   addressed to the chat room.  The
      MSRP switch distributes the message\n   to the rest of the participants.\n   Alice
      \              MSRP Switch                   Bob   Charlie\n     |                      |
      \                       |       |\n     | F1: (MSRP) SEND      |                        |
      \      |\n     |--------------------->|  F3: (MSRP) SEND       |       |\n     |
      F2: (MSRP) 200       |----------------------->|       |\n     |<---------------------|
      \ F4: (MSRP) SEND       |       |\n     |                      |------------------------------->|\n
      \    |                      |  F5: (MSRP) 200 OK     |       |\n     |                      |<-----------------------|
      \      |\n     |                      |  F6: (MSRP) 200 OK     |       |\n     |
      \                     |<------------------------------ |\n     |                      |
      \                       |       |\n     |                      |                        |
      \      |\n           Figure 5: Sending a Regular Message to the Chat Room\n
      \  F1: Alice builds a text message and wraps it in a Message/CPIM\n   wrapper.
      \ She addresses the message to the chat room.  She encloses\n   the resulting
      Message/CPIM wrapper in an MSRP SEND request and sends\n   it to the MSRP switch
      via the existing TCP connection.\n   MSRP 3490visdm SEND\n   To-Path: msrp://chat.example.com:12763/kjhd37s2s20w2a;tcp\n
      \  From-Path: msrp://client.atlanta.example.com:7654/jshA7weztas;tcp\n   Message-ID:
      99s9s2\n   Byte-Range: 1-*/*\n   Content-Type: message/cpim\n   To: <sip:chatroom22@chat.example.com;transport=tcp>\n
      \  From: <sip:alice@atlanta.example.com>\n   DateTime: 2009-03-02T15:02:31-03:00\n
      \  Content-Type: text/plain\n   Hello guys, how are you today?\n   -------3490visdm$\n
      \  F2: The MSRP switch acknowledges the reception of the SEND request\n   with
      a 200 (OK) response.\n   MSRP 3490visdm 200 OK\n   To-Path: msrp://client.atlanta.example.com:7654/jshA7weztas;tcp\n
      \  From-Path: msrp://chat.example.com:12763/kjhd37s2s20w2a;tcp\n   Message-ID:
      99s9s2\n   -------3490visdm$\n   F3: The MSRP switch creates a new MSRP SEND
      request that contains the\n   received Message/CPIM wrapper and sends it to
      Bob.\n   MSRP 490ej23 SEND\n   To-Path: msrp://client.biloxi.example.com:4923/49dufdje2;tcp\n
      \  From-Path: msrp://chat.example.com:5678/jofofo3;tcp\n   Message-ID: 304sse2\n
      \  Byte-Range: 1-*/*\n   Content-Type: message/cpim\n   To: <sip:chatroom22@chat.example.com;transport=tcp>\n
      \  From: <sip:alice@atlanta.example.com>\n   DateTime: 2009-03-02T15:02:31-03:00\n
      \  Content-Type: text/plain\n   Hello guys, how are you today?\n   -------490ej23$\n
      \  Since the received message is addressed to the chat room URI in the\n   From
      header of the Message/CPIM header, Bob knows that this is a\n   regular message
      distributed to all participants in the chat room\n   rather than a private message
      addressed to him.\n   The rest of the message flows are analogous to the previous.
      \ They\n   are not shown here.\n"
    title: 9.3.  Sending a Regular Message to the Chat Room
  - contents:
    - "9.4.  Sending a Private Message to a Participant\n   Figure 6 is a flow diagram
      where Alice is sending a private message\n   addressed to Bob's SIP AOR.  The
      MSRP switch distributes the message\n   only to Bob.\n   Alice               MSRP
      Switch                   Bob\n     |                      |                        |\n
      \    | F1: (MSRP) SEND      |                        |\n     |--------------------->|
      \ F3: (MSRP) SEND       |\n     | F2: (MSRP) 200       |----------------------->|\n
      \    |<---------------------|  F4: (MSRP) 200        |\n     |                      |<-----------------------|\n
      \    |                      |                        |\n                Figure
      6: Sending a Private Message to Bob\n   F1: Alice builds a text message and
      wraps it in a Message/CPIM\n   wrapper.  She addresses the message to Bob's
      URI, which she learned\n   from a notification in the conference event package.
      \ She encloses\n   the resulting Message/CPIM wrapper in an MSRP SEND request
      and sends\n   it to the MSRP switch via the existing TCP connection.\n   MSRP
      6959ssdf SEND\n   To-Path: msrp://chat.example.com:12763/kjhd37s2s20w2a;tcp\n
      \  From-Path: msrp://client.atlanta.example.com:7654/jshA7weztas;tcp\n   Message-ID:
      okj3kw\n   Byte-Range: 1-*/*\n   Content-Type: message/cpim\n   To: <sip:bob@example.com>\n
      \  From: <sip:alice@example.com>\n   DateTime: 2009-03-02T15:02:31-03:00\n   Content-Type:
      text/plain\n   Hello Bob.\n   -------6959ssdf$\n   F2: The MSRP switch acknowledges
      the reception of the SEND request\n   with a 200 (OK) response.\n   MSRP 6959ssdfm
      200 OK\n   To-Path: msrp://client.atlanta.example.com:7654/jshA7weztas;tcp\n
      \  From-Path: msrp://chat.example.com:12763/kjhd37s2s20w2a;tcp\n   Message-ID:
      okj3kw\n   -------6959ssdfm$\n   F3: The MSRP switch creates a new MSRP SEND
      request that contains the\n   received Message/CPIM wrapper and sends it only
      to Bob. Bob can\n   distinguish the sender in the From header of the Message/CPIM\n
      \  wrapper.  He also identifies this as a private message due to the\n   presence
      of his own SIP AOR in the To header field of the Message/\n   CPIM wrapper.\n
      \  MSRP 9v9s2 SEND\n   To-Path: msrp://client.biloxi.example.com:4923/49dufdje2;tcp\n
      \  From-Path: msrp://chat.example.com:5678/jofofo3;tcp\n   Message-ID: d9fghe982\n
      \  Byte-Range: 1-*/*\n   Content-Type: message/cpim\n   To: <sip:bob@example.com>\n
      \  From: <sip:alice@atlanta.example.com>\n   DateTime: 2009-03-02T15:02:31-03:00\n
      \  Content-Type: text/plain\n   Hello Bob.\n   -------9v9s2$\n   F4: Bob acknowledges
      the reception of the SEND request with a 200\n   (OK) response.\n   MSRP 9v9s2
      200 OK\n   To-Path: msrp://chat.example.com:5678/jofofo3;tcp\n   From-Path:
      msrp://client.biloxi.example.com:4923/49dufdje2;tcp\n   Message-ID: d9fghe982\n
      \  -------9v9s2$\n"
    title: 9.4.  Sending a Private Message to a Participant
  - contents:
    - "9.5.  Chunked Private Message\n   The MSRP message below is a depiction of
      the same private message\n   described in Section 9.4, but now the message is
      split in two chunks.\n   The MSRP switch must wait for the complete set of Message/CPIM\n
      \  headers before distributing the messages.\n   MSRP 7443ruls SEND\n   To-Path:
      msrp://chat.example.com:12763/kjhd37s2s20w2a;tcp\n   From-Path: msrp://client.atlanta.example.com:7654/jshA7weztas;tcp\n
      \  Message-ID: aft4to\n   Byte-Range: 1-*/174\n   Content-Type: message/cpim\n
      \  To: <sip:bob@example.com>\n   From: <sip:alice@example.com>\n   -------7443ruls$\n
      \  MSRP 7443ruls SEND\n   To-Path: msrp://chat.example.com:12763/kjhd37s2s20w2a;tcp\n
      \  From-Path: msrp://client.atlanta.example.com:7654/jshA7weztas;tcp\n   Message-ID:
      aft4to\n   Byte-Range: 68-174/174\n   Content-Type: message/cpim\n   DateTime:
      2009-03-02T15:02:31-03:00\n   Content-Type: text/plain\n   Hello Bob\n   -------7443ruls$\n"
    title: 9.5.  Chunked Private Message
  - contents:
    - "9.6.  Nickname in a Conference Information Document\n   Figure 7 is a depiction
      of an XML conference information document\n   received in a SIP NOTIFY request
      as a notification to the XCON\n   Conference Event Package, RFC 6502 [RFC6502].
      \ The conference\n   information document follows the XCON Data Model specified
      in RFC\n   6501 [RFC6501].\n   The conference information document of Figure
      7 presents information\n   of two users who are participating in the conference
      (see each of the\n   <user> elements).  Each participant is bound to a nickname,
      shown in\n   the 'nickname' attribute of the <user> element.\n      NOTE: The
      purpose of Figure 7 is to show the user-to-nickname\n      relationship.  It
      is believed that the example is correct,\n      according to RFC 6501 [RFC6501].
      \ In case of contradictions\n      between this specification and RFC 6501 [RFC6501],
      the latter has\n      precedence.\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
      \     <conference-info\n       xmlns=\"urn:ietf:params:xml:ns:conference-info\"\n
      \      xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n       entity=\"sip:chatroom22@chat.example.com\"\n
      \      state=\"full\" version=\"1\">\n      <!--\n        CONFERENCE INFO\n
      \     -->\n       <conference-description>\n         <subject>MSRP nickname
      example</subject>\n        </conference-description>\n      <!--\n         CONFERENCE
      STATE\n      -->\n       <conference-state>\n        <user-count>2</user-count>\n
      \      </conference-state>\n      <!--\n        USERS\n      -->\n       <users>\n
      \        <user entity=\"sip:bob@example.com\"\n               state=\"full\"\n
      \              xcon:nickname=\"Dopey Donkey\">\n            <display-text>Bob
      Hoskins</display-text>\n         </user>\n      <!--\n        USER\n      -->\n
      \        <user entity=\"sip:alice@atlanta.example.com\"\n              state=\"full\"\n
      \             xcon:nickname=\"Alice the great\">\n            <display-text>Alice
      Kay</display-text>\n         </user>\n       </users>\n      </conference-info>\n
      \  Figure 7: Nickname in a Conference Information Document\n"
    title: 9.6.  Nickname in a Conference Information Document
  title: 9.  Examples
- contents:
  - '10.  IANA Considerations

    '
  - contents:
    - "10.1.  New MSRP Method\n   This specification defines a new MSRP method that
      has been added to\n   the \"Methods\" subregistry of the \"Message Session Relay
      Protocol\n   (MSRP) Parameters\" registry:\n      NICKNAME\n   See Section 7
      for details.\n"
    title: 10.1.  New MSRP Method
  - contents:
    - "10.2.  New MSRP Header\n   This specification defines a new MSRP header that
      has been added to\n   the \"Header Fields\" subregistry of the \"Message Session
      Relay\n   Protocol (MSRP) Parameters\" registry:\n      Use-Nickname\n   See
      Section 7 for details.\n"
    title: 10.2.  New MSRP Header
  - contents:
    - "10.3.  New MSRP Status Codes\n   This specification defines four new MSRP status
      codes that have been\n   added to the \"Status Codes\" subregistry of the \"Message
      Session Relay\n   Protocol (MSRP) parameters\" registry.\n   The 404 status
      code indicates the failure to resolve the recipient's\n   URI in the To header
      field of the Message/CPIM wrapper in the SEND\n   request, e.g., due to an unknown
      recipient.  See Section 6.2 for\n   details.\n   The 424 status code indicates
      a failure in allocating the requested\n   nickname due to a malformed syntax
      in the Use-Nickname header field.\n   See Section 7 for details.\n   The 425
      status code indicates a failure in allocating the requested\n   nickname because
      the requested nickname in the Use-Nickname header\n   field is reserved or is
      already in use by another user.  See\n   Section 7 for details.\n   The 428
      status code indicates that the recipient of a SEND request\n   does not support
      private messages.  See Section 6.2 for details.\n   Table 1 summarizes the IANA
      registration data with respect to new\n   MSRP status codes:\n        +-------+-------------------------------------+-----------+\n
      \       | Value | Description                         | Reference |\n        +-------+-------------------------------------+-----------+\n
      \       |  404  | Failure to resolve recipient's URI  |  RFC 7701 |\n        |
      \ 424  | Malformed nickname                  |  RFC 7701 |\n        |  425  |
      Nickname reserved or already in use |  RFC 7701 |\n        |  428  | Private
      messages not supported      |  RFC 7701 |\n        +-------+-------------------------------------+-----------+\n
      \                        Table 1: New Status Codes\n"
    title: 10.3.  New MSRP Status Codes
  - contents:
    - "10.4.  New SDP Attribute\n   This specification defines a new media-level attribute
      in the\n   \"Session Description Protocol (SDP) Parameters\" registry.  The\n
      \  registration data is as follows:\n      Contact: Miguel Garcia <miguel.a.garcia@ericsson.com>\n
      \     Phone: +34 91 339 1000\n      Attribute name: chatroom\n      Long-form
      attribute name: Chat Room\n      Type of attribute: media level only\n      This
      attribute is not subject to the charset attribute\n      Description: This attribute
      identifies support and local policy\n      allowance for a number of chat room
      related functions\n      Specification: RFC 7701 (this document)\n   See Section
      8 for details.\n"
    title: 10.4.  New SDP Attribute
  title: 10.  IANA Considerations
- contents:
  - "11.  Security Considerations\n   This document proposes extensions to the Message
    Session Relay\n   Protocol [RFC4975].  Therefore, the security considerations
    of that\n   document apply to this document as well.\n   A chat room is, by its
    nature, a potential Denial-of-Service (DoS)\n   accelerator as it takes a message
    from one entity and sends it to\n   many.  Implementers of both UAs and switches
    need to carefully\n   consider the set of anti-DoS measures that are appropriate
    for this\n   application, and switch implementations, in particular, ought to\n
    \  include appropriate anti-DoS features.  The details of what is\n   appropriate
    will vary over time and will also depend on the specific\n   needs of the implementation;
    thus, they cannot be specified here.\n   If the participant's SIP UA does not
    understand the \"isfocus\" feature\n   tag [RFC3840], it will not know that it
    is connected to a conference\n   instance.  The participant might not be notified
    that its MSRP client\n   will try to send messages having potential multiple recipients
    to the\n   MSRP switch.  If the participant's MSRP client does not support the\n
    \  extensions of this specification, it is unlikely that it will try to\n   send
    a message using the Message/CPIM wrapper content type [RFC3862],\n   and the MSRP
    switch will reject the request with a 415 response\n   [RFC4975].  Still, if a
    participant's MSRP client does create a\n   message with a valid Message/CPIM
    wrapper content type [RFC3862]\n   having the To header set to the URI of the
    chat room and the From\n   header set to the URI of which the participant that
    is known to the\n   chat room, the participant might be unaware that the message
    can be\n   forwarded to multiple recipients.  Equally, if the To header is set\n
    \  to a valid URI of a recipient known to the chat room, the message can\n   be
    forwarded as a private message without the participant knowing.\n   To mitigate
    these problems, when the chat room detects that a UA does\n   not support the
    procedures of this document (i.e., when the SIP UA is\n   not chat room aware),
    the MSRP switch SHOULD send a regular MSRP\n   message indicating that the SIP
    UA is actually part of a chat room\n   and that all the messages that the user
    sends correctly formatted\n   will be distributed to a number of participants.
    \ Additionally, the\n   MSRP switch SHOULD also send a regular MSRP text message
    including\n   the list of participants in the chat room so that the user becomes\n
    \  aware of the roster.\n   If a participant wants to avoid security concerns
    on the path between\n   himself and the MSRP switch (e.g., eavesdropping, faked
    packet\n   injection, or packet corruption), the participant's UA can force the\n
    \  usage of MSRP over a TLS [RFC5246] transport connection.  This is\n   negotiated
    in the SDP offer/answer exchange as per the regular\n   procedures of RFC 4975
    [RFC4975].  This negotiation will result in\n   both endpoints establishing a
    TLS [RFC5246] transport connection that\n   is used to exchange MSRP messages.
    \ The MSRP switch may also have\n   local policy that forces the usage of TLS
    transport for all MSRP\n   sessions, something that is also negotiated in SDP
    as per the regular\n   procedures of RFC 4975 [RFC4975].\n   Nicknames are used
    to show the appearance of the participants of the\n   chat room.  A successful
    takeover of a nickname from a participant\n   might lead to private messages being
    sent to the wrong destination.\n   The recipient's URI will be different from
    the URI associated with\n   the original owner of the nickname, but the sender
    might not notice\n   this.  To avoid takeovers, the MSRP switch MUST make sure
    that a\n   nickname is unique inside a chat room.  Also, the security\n   consideration
    for any authenticated identity mechanisms used to\n   validate the SIP AOR will
    apply to this document as well.  The chat\n   room has a policy that determines
    the time that a nickname is still\n   reserved for its holder, once it is no longer
    being used.  This\n   allows, e.g., a user that accidentally loses its connectivity,
    to\n   reconnect to the chat room and keep on using the same nickname.  It\n   depends
    on the policy of the chat room if a nickname that has been\n   previously used
    by another participant of the chat room can be\n   reserved or not.\n   Section
    7.1 discusses the problem of similar but different nicknames\n   (e.g., thanks
    to the use of similar characters), and chat rooms MAY\n   provide a mechanism
    to mitigate confusable nicknames.\n   Recipients of IMs should be cautious with
    the rendering of content,\n   which can be malicious in nature.  This includes,
    but is not limited\n   to, the reception of HTML and JavaScript scripts, executable
    code,\n   phishing attempts, etc.  Endpoints SHOULD always request permission\n
    \  from the user before executing one of these actions.\n   It must be noted that
    endpoints using a TLS client side certificate\n   with real names in the certificates
    will not be anonymous to the MSRP\n   switch to which they connect.  While the
    name in the certificate\n   might not be used by MSRP, the server will have a
    certificate with\n   the actual name in it.\n"
  title: 11.  Security Considerations
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,
      Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:
      Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,
      June 2002,\n              <http://www.rfc-editor.org/info/rfc3261>.\n   [RFC3264]
      \ Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n              with
      Session Description Protocol (SDP)\", RFC 3264,\n              DOI 10.17487/RFC3264,
      June 2002,\n              <http://www.rfc-editor.org/info/rfc3264>.\n   [RFC3323]
      \ Peterson, J., \"A Privacy Mechanism for the Session\n              Initiation
      Protocol (SIP)\", RFC 3323,\n              DOI 10.17487/RFC3323, November 2002,\n
      \             <http://www.rfc-editor.org/info/rfc3323>.\n   [RFC3629]  Yergeau,
      F., \"UTF-8, a transformation format of ISO\n              10646\", STD 63,
      RFC 3629, DOI 10.17487/RFC3629, November\n              2003, <http://www.rfc-editor.org/info/rfc3629>.\n
      \  [RFC3840]  Rosenberg, J., Schulzrinne, H., and P. Kyzivat,\n              \"Indicating
      User Agent Capabilities in the Session\n              Initiation Protocol (SIP)\",
      RFC 3840,\n              DOI 10.17487/RFC3840, August 2004,\n              <http://www.rfc-editor.org/info/rfc3840>.\n
      \  [RFC3860]  Peterson, J., \"Common Profile for Instant Messaging\n              (CPIM)\",
      RFC 3860, DOI 10.17487/RFC3860, August 2004,\n              <http://www.rfc-editor.org/info/rfc3860>.\n
      \  [RFC3862]  Klyne, G. and D. Atkins, \"Common Presence and Instant\n              Messaging
      (CPIM): Message Format\", RFC 3862,\n              DOI 10.17487/RFC3862, August
      2004,\n              <http://www.rfc-editor.org/info/rfc3862>.\n   [RFC4353]
      \ Rosenberg, J., \"A Framework for Conferencing with the\n              Session
      Initiation Protocol (SIP)\", RFC 4353,\n              DOI 10.17487/RFC4353,
      February 2006,\n              <http://www.rfc-editor.org/info/rfc4353>.\n   [RFC4566]
      \ Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description
      Protocol\", RFC 4566, DOI 10.17487/RFC4566,\n              July 2006, <http://www.rfc-editor.org/info/rfc4566>.\n
      \  [RFC4575]  Rosenberg, J., Schulzrinne, H., and O. Levin, Ed., \"A\n              Session
      Initiation Protocol (SIP) Event Package for\n              Conference State\",
      RFC 4575, DOI 10.17487/RFC4575, August\n              2006, <http://www.rfc-editor.org/info/rfc4575>.\n
      \  [RFC4975]  Campbell, B., Ed., Mahy, R., Ed., and C. Jennings, Ed.,\n              \"The
      Message Session Relay Protocol (MSRP)\", RFC 4975,\n              DOI 10.17487/RFC4975,
      September 2007,\n              <http://www.rfc-editor.org/info/rfc4975>.\n   [RFC4976]
      \ Jennings, C., Mahy, R., and A. Roach, \"Relay Extensions\n              for
      the Message Sessions Relay Protocol (MSRP)\", RFC 4976,\n              DOI 10.17487/RFC4976,
      September 2007,\n              <http://www.rfc-editor.org/info/rfc4976>.\n   [RFC5234]
      \ Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:
      ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n
      \             <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5239]  Barnes,
      M., Boulton, C., and O. Levin, \"A Framework for\n              Centralized
      Conferencing\", RFC 5239, DOI 10.17487/RFC5239,\n              June 2008, <http://www.rfc-editor.org/info/rfc5239>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August
      2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5681]
      \ Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion\n              Control\",
      RFC 5681, DOI 10.17487/RFC5681, September 2009,\n              <http://www.rfc-editor.org/info/rfc5681>.\n
      \  [RFC6501]  Novo, O., Camarillo, G., Morgan, D., and J. Urpalainen,\n              \"Conference
      Information Data Model for Centralized\n              Conferencing (XCON)\",
      RFC 6501, DOI 10.17487/RFC6501,\n              March 2012, <http://www.rfc-editor.org/info/rfc6501>.\n
      \  [RFC6502]  Camarillo, G., Srinivasan, S., Even, R., and J.\n              Urpalainen,
      \"Conference Event Package Data Format\n              Extension for Centralized
      Conferencing (XCON)\", RFC 6502,\n              DOI 10.17487/RFC6502, March
      2012,\n              <http://www.rfc-editor.org/info/rfc6502>.\n   [RFC7700]
      \ Saint-Andre, P., \"Preparation, Enforcement, and Comparison\n              of
      Internationalized Strings Representing Nicknames\",\n              RFC 7700,
      DOI 10.17487/RFC7700, December 2015,\n              <http://www.rfc-editor.org/info/rfc7700>.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [RFC2810]  Kalt, C., \"Internet Relay Chat:
      Architecture\", RFC 2810,\n              DOI 10.17487/RFC2810, April 2000,\n
      \             <http://www.rfc-editor.org/info/rfc2810>.\n   [RFC3325]  Jennings,
      C., Peterson, J., and M. Watson, \"Private\n              Extensions to the
      Session Initiation Protocol (SIP) for\n              Asserted Identity within
      Trusted Networks\", RFC 3325,\n              DOI 10.17487/RFC3325, November
      2002,\n              <http://www.rfc-editor.org/info/rfc3325>.\n   [RFC3966]
      \ Schulzrinne, H., \"The tel URI for Telephone Numbers\",\n              RFC
      3966, DOI 10.17487/RFC3966, December 2004,\n              <http://www.rfc-editor.org/info/rfc3966>.\n
      \  [RFC4474]  Peterson, J. and C. Jennings, \"Enhancements for\n              Authenticated
      Identity Management in the Session\n              Initiation Protocol (SIP)\",
      RFC 4474,\n              DOI 10.17487/RFC4474, August 2006,\n              <http://www.rfc-editor.org/info/rfc4474>.\n
      \  [RFC6120]  Saint-Andre, P., \"Extensible Messaging and Presence\n              Protocol
      (XMPP): Core\", RFC 6120, DOI 10.17487/RFC6120,\n              March 2011, <http://www.rfc-editor.org/info/rfc6120>.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Acknowledgments\n   The authors want to thank Eva Leppanen, Adamu Haruna, Adam
    Roach,\n   Matt Lepinski, Mary Barnes, Ben Campbell, Paul Kyzivat, Adrian\n   Georgescu,
    Nancy Greene, Cullen Jennings, Flemming Andreasen, Suresh\n   Krishnan, Christer
    Holmberg, Saul Ibarra, Enrico Marocco, Alexey\n   Melnikov, Peter Saint-Andre,
    Stephen Farrell, and Martin Stiemerling\n   for providing comments.\n"
  title: Acknowledgments
- contents:
  - "Contributors\n   This work would have never been possible without the fruitful\n
    \  discussions on the SIMPLE WG mailing list, especially with Brian\n   Rosen
    (Neustar) and Paul Kyzivat (Huawei), who provided extensive\n   review and improvements
    throughout the document.\n"
  title: Contributors
- contents:
  - "Authors' Addresses\n   Aki Niemi\n   Email: aki.niemi@iki.fi\n   Miguel A. Garcia-Martin\n
    \  Ericsson\n   Calle Via de los Poblados 13\n   Madrid, ES  28033\n   Spain\n
    \  Email: miguel.a.garcia@ericsson.com\n   Geir A. Sandbakken\n   Cisco Systems\n
    \  Philip Pedersensvei 1\n   1366 Lysaker\n   Norway\n   Email: geirsand@cisco.com\n"
  title: Authors' Addresses
