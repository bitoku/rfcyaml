- contents:
  - "                        Extended RTP Profile for\n Real-time Transport Control
    Protocol (RTCP)-Based Feedback (RTP/AVPF)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   Real-time media streams that use RTP are, to some degree, resilient\n
    \  against packet losses.  Receivers may use the base mechanisms of the\n   Real-time
    Transport Control Protocol (RTCP) to report packet\n   reception statistics and
    thus allow a sender to adapt its\n   transmission behavior in the mid-term.  This
    is the sole means for\n   feedback and feedback-based error repair (besides a
    few codec-\n   specific mechanisms).  This document defines an extension to the\n
    \  Audio-visual Profile (AVP) that enables receivers to provide,\n   statistically,
    more immediate feedback to the senders and thus allows\n   for short-term adaptation
    and efficient feedback-based repair\n   mechanisms to be implemented.  This early
    feedback profile (AVPF)\n   maintains the AVP bandwidth constraints for RTCP and
    preserves\n   scalability to large groups.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Definitions ................................................3\n      1.2.
    Terminology ................................................5\n   2. RTP and RTCP
    Packet Formats and Protocol Behavior ...............6\n      2.1. RTP ........................................................6\n
    \     2.2. Underlying Transport Protocols .............................6\n   3.
    Rules for RTCP Feedback .........................................7\n      3.1.
    Compound RTCP Feedback Packets .............................7\n      3.2. Algorithm
    Outline ..........................................8\n      3.3. Modes of Operation
    .........................................9\n      3.4. Definitions and Algorithm
    Overview ........................11\n      3.5. AVPF RTCP Scheduling Algorithm
    ............................14\n           3.5.1. Initialization .....................................15\n
    \          3.5.2. Early Feedback Transmission ........................15\n           3.5.3.
    Regular RTCP Transmission ..........................18\n           3.5.4. Other
    Considerations ...............................19\n      3.6. Considerations on
    the Group Size ..........................20\n           3.6.1. ACK Mode ...........................................20\n
    \          3.6.2. NACK Mode ..........................................20\n      3.7.
    Summary of Decision Steps .................................22\n           3.7.1.
    General Hints ......................................22\n           3.7.2. Media
    Session Attributes ...........................22\n   4. SDP Definitions ................................................23\n
    \     4.1. Profile Identification ....................................23\n      4.2.
    RTCP Feedback Capability Attribute ........................23\n      4.3. RTCP
    Bandwidth Modifiers ..................................27\n      4.4. Examples
    ..................................................27\n   5. Interworking and Coexistence
    of AVP and AVPF Entities ..........29\n   6. Format of RTCP Feedback Messages
    ...............................31\n      6.1. Common Packet Format for Feedback
    Messages ................32\n      6.2. Transport Layer Feedback Messages .........................34\n
    \          6.2.1. Generic NACK .......................................34\n      6.3.
    Payload-Specific Feedback Messages ........................35\n           6.3.1.
    Picture Loss Indication (PLI) ......................36\n           6.3.2. Slice
    Loss Indication (SLI) ........................37\n           6.3.3. Reference
    Picture Selection Indication (RPSI) ......39\n      6.4. Application Layer Feedback
    Messages .......................41\n   7. Early Feedback and Congestion Control
    ..........................41\n   8. Security Considerations ........................................42\n
    \  9. IANA Considerations ............................................43\n   10.
    Acknowledgements ..............................................47\n   11. References
    ....................................................48\n      11.1. Normative
    References .....................................48\n      11.2. Informative References
    ...................................48\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Real-time media streams that use RTP are, to some degree,
    resilient\n   against packet losses.  RTP [1] provides all the necessary mechanisms\n
    \  to restore ordering and timing present at the sender to properly\n   reproduce
    a media stream at a recipient.  RTP also provides\n   continuous feedback about
    the overall reception quality from all\n   receivers -- thereby allowing the sender(s)
    in the mid-term (in the\n   order of several seconds to minutes) to adapt their
    coding scheme and\n   transmission behavior to the observed network quality of
    service\n   (QoS).  However, except for a few payload-specific mechanisms [6],\n
    \  RTP makes no provision for timely feedback that would allow a sender\n   to
    repair the media stream immediately: through retransmissions,\n   retroactive
    Forward Error Correction (FEC) control, or media-specific\n   mechanisms for some
    video codecs, such as reference picture\n   selection.\n   Current mechanisms
    available with RTP to improve error resilience\n   include audio redundancy coding
    [13], video redundancy coding [14],\n   RTP-level FEC [11], and general considerations
    on more robust media\n   streams transmission [12].  These mechanisms may be applied\n
    \  proactively (thereby increasing the bandwidth of a given media\n   stream).
    \ Alternatively, in sufficiently small groups with small\n   round-trip times
    (RTTs), the senders may perform repair on-demand,\n   using the above mechanisms
    and/or media-encoding-specific approaches.\n   Note that \"small group\" and \"sufficiently
    small RTT\" are both highly\n   application dependent.\n   This document specifies
    a modified RTP profile for audio and video\n   conferences with minimal control
    based upon [1] and [2] by means of\n   two modifications/additions: Firstly, to
    achieve timely feedback, the\n   concept of Early RTCP messages as well as algorithms
    allowing for\n   low-delay feedback in small multicast groups (and preventing
    feedback\n   implosion in large ones) are introduced.  Special consideration is\n
    \  given to point-to-point scenarios.  Secondly, a small number of\n   general-purpose
    feedback messages as well as a format for codec- and\n   application-specific
    feedback information are defined for\n   transmission in the RTCP payloads.\n"
  - contents:
    - "1.1.  Definitions\n   The definitions from RTP/RTCP [1] and the \"RTP Profile
      for Audio and\n   Video Conferences with Minimal Control\" [2] apply.  In addition,
      the\n   following definitions are used in this document:\n   Early RTCP mode:\n
      \     The mode of operation in that a receiver of a media stream is\n      often
      (but not always) capable of reporting events of interest\n      back to the
      sender close to their occurrence.  In Early RTCP mode,\n      RTCP packets are
      transmitted according to the timing rules defined\n      in this document.\n
      \  Early RTCP packet:\n      An Early RTCP packet is a packet which is transmitted
      earlier than\n      would be allowed if following the scheduling algorithm of
      [1], the\n      reason being an \"event\" observed by a receiver.  Early RTCP\n
      \     packets may be sent in Immediate Feedback and in Early RTCP mode.\n      Sending
      an Early RTCP packet is also referred to as sending Early\n      Feedback in
      this document.\n   Event:\n      An observation made by the receiver of a media
      stream that is\n      (potentially) of interest to the sender -- such as a packet
      loss\n      or packet reception, frame loss, etc. -- and thus useful to be\n
      \     reported back to the sender by means of a feedback message.\n   Feedback
      (FB) message:\n      An RTCP message as defined in this document is used to
      convey\n      information about events observed at a receiver -- in addition
      to\n      long-term receiver status information that is carried in RTCP\n      receiver
      reports (RRs) -- back to the sender of the media stream.\n      For the sake
      of clarity, feedback message is referred to as FB\n      message throughout
      this document.\n   Feedback (FB) threshold:\n      The FB threshold indicates
      the transition between Immediate\n      Feedback and Early RTCP mode.  For a
      multiparty scenario, the FB\n      threshold indicates the maximum group size
      at which, on average,\n      each receiver is able to report each event back
      to the sender(s)\n      immediately, i.e., by means of an Early RTCP packet
      without having\n      to wait for its regularly scheduled RTCP interval.  This
      threshold\n      is highly dependent on the type of feedback to be provided,\n
      \     network QoS (e.g., packet loss probability and distribution),\n      codec
      and packetization scheme in use, the session bandwidth, and\n      application
      requirements.  Note that the algorithms do not depend\n      on all senders
      and receivers agreeing on the same value for this\n      threshold.  It is merely
      intended to provide conceptual guidance\n      to application designers and
      is not used in any calculations.  For\n      the sake of clarity, the term feedback
      threshold is referred to as\n      FB threshold throughout this document.\n
      \  Immediate Feedback mode:\n      A mode of operation in which each receiver
      of a media stream is,\n      statistically, capable of reporting each event
      of interest\n      immediately back to the media stream sender.  In Immediate\n
      \     Feedback mode, RTCP FB messages are transmitted according to the\n      timing
      rules defined in this document.\n   Media packet:\n      A media packet is an
      RTP packet.\n   Regular RTCP mode:\n      Mode of operation in which no preferred
      transmission of FB\n      messages is allowed.  Instead, RTCP messages are sent
      following\n      the rules of [1].  Nevertheless, such RTCP messages may contain\n
      \     feedback information as defined in this document.\n   Regular RTCP packet:\n
      \     An RTCP packet that is not sent as an Early RTCP packet.\n   RTP sender:\n
      \     An RTP sender is an RTP entity that transmits media packets as\n      well
      as RTCP packets and receives Regular as well as Early RTCP\n      (i.e., feedback)
      packets.  Note that the RTP sender is a logical\n      role and that the same
      RTP entity may at the same time act as an\n      RTP receiver.\n   RTP receiver:\n
      \     An RTP receiver is an RTP entity that receives media packets as\n      well
      as RTCP packets and transmits Regular as well as Early RTCP\n      (i.e., feedback)
      packets.  Note that the RTP receiver is a logical\n      role and that the same
      RTP entity may at the same time act as an\n      RTP sender.\n"
    title: 1.1.  Definitions
  - contents:
    - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
      2119 [5].\n"
    title: 1.2.  Terminology
  title: 1.  Introduction
- contents:
  - '2.  RTP and RTCP Packet Formats and Protocol Behavior

    '
  - contents:
    - "2.1.  RTP\n   The rules defined in [2] also apply to this profile except for
      those\n   rules mentioned in the following:\n   RTCP packet types:\n      Two
      additional RTCP packet types are registered and the\n      corresponding FB
      messages to convey feedback information are\n      defined in Section 6 of this
      memo.\n   RTCP report intervals:\n      This document describes three modes
      of operation that influence\n      the RTCP report intervals (see Section 3.2
      of this memo).  In\n      Regular RTCP mode, all rules from [1] apply except
      for the\n      recommended minimal interval of five seconds between two RTCP\n
      \     reports from the same RTP entity.  In both Immediate Feedback and\n      Early
      RTCP modes, the minimal interval of five seconds between two\n      RTCP reports
      is dropped and, additionally, the rules specified in\n      Section 3 of this
      memo apply if RTCP packets containing FB\n      messages (defined in Section
      4 of this memo) are to be\n      transmitted.\n      The rules set forth in
      [1] may be overridden by session\n      descriptions specifying different parameters
      (e.g., for the\n      bandwidth share assigned to RTCP for senders and receivers,\n
      \     respectively).  For sessions defined using the Session Description\n      Protocol
      (SDP) [3], the rules of [4] apply.\n   Congestion control:\n      The same basic
      rules as detailed in [2] apply.  Beyond this, in\n      Section 7, further consideration
      is given to the impact of\n      feedback and a sender's reaction to FB messages.\n"
    title: 2.1.  RTP
  - contents:
    - "2.2.  Underlying Transport Protocols\n   RTP is intended to be used on top
      of unreliable transport protocols,\n   including UDP and the Datagram Congestion
      Control Protocol (DCCP).\n   This section briefly describes the specifics beyond
      plain RTP\n   operation introduced by RTCP feedback as specified in this memo.\n
      \  UDP:  UDP provides best-effort delivery of datagrams for point-to-\n      point
      as well as for multicast communications.  UDP does not\n      support congestion
      control or error repair.  The RTCP-based\n      feedback defined in this memo
      is able to provide minimal support\n      for limited error repair.  As RTCP
      feedback is not guaranteed to\n      operate on sufficiently small timescales
      (in the order of RTT),\n      RTCP feedback is not suitable to support congestion
      control.  This\n      memo addresses both unicast and multicast operation.\n
      \  DCCP: DCCP [19] provides for congestion-controlled but unreliable\n      datagram
      flows for unicast communications.  With TCP Friendly Rate\n      Control (TFRC)-based
      [20] congestion control (CCID 3), DCCP is\n      particularly suitable for audio
      and video communications.  DCCP's\n      acknowledgement messages may provide
      detailed feedback reporting\n      about received and missed datagrams (and
      thus about congestion).\n      When running RTP over DCCP, congestion control
      is performed at the\n      DCCP layer and no additional mechanisms are required
      at the RTP\n      layer.  Furthermore, an RTCP-feedback-capable sender may leverage\n
      \     the more frequent DCCP-based feedback and thus a receiver may\n      refrain
      from using (additional) Generic Feedback messages where\n      appropriate.\n"
    title: 2.2.  Underlying Transport Protocols
  title: 2.  RTP and RTCP Packet Formats and Protocol Behavior
- contents:
  - '3.  Rules for RTCP Feedback

    '
  - contents:
    - "3.1.  Compound RTCP Feedback Packets\n   Two components constitute RTCP-based
      feedback as described in this\n   document:\n   o  Status reports are contained
      in sender report (SR)/received report\n      (RR) packets and are transmitted
      at regular intervals as part of\n      compound RTCP packets (which also include
      source description\n      (SDES) and possibly other messages); these status
      reports provide\n      an overall indication for the recent reception quality
      of a media\n      stream.\n   o  FB messages as defined in this document that
      indicate loss or\n      reception of particular pieces of a media stream (or
      provide some\n      other form of rather immediate feedback on the data received).\n
      \     Rules for the transmission of FB messages are newly introduced in\n      this
      document.\n   RTCP FB messages are just another RTCP packet type (see Section
      4).\n   Therefore, multiple FB messages MAY be combined in a single compound\n
      \  RTCP packet and they MAY also be sent combined with other RTCP\n   packets.\n
      \  Compound RTCP packets containing FB messages as defined in this\n   document
      MUST contain RTCP packets in the order defined in [1]:\n   o  OPTIONAL encryption
      prefix that MUST be present if the RTCP\n      packet(s) is to be encrypted
      according to Section 9.1 of [1].\n   o  MANDATORY SR or RR.\n   o  MANDATORY
      SDES, which MUST contain the CNAME item; all other SDES\n      items are OPTIONAL.\n
      \  o  One or more FB messages.\n   The FB message(s) MUST be placed in the compound
      packet after RR and\n   SDES RTCP packets defined in [1].  The ordering with
      respect to other\n   RTCP extensions is not defined.\n   Two types of compound
      RTCP packets carrying feedback packets are used\n   in this document:\n   a)
      Minimal compound RTCP feedback packet\n      A minimal compound RTCP feedback
      packet MUST contain only the\n      mandatory information as listed above: encryption
      prefix if\n      necessary, exactly one RR or SR, exactly one SDES with only
      the\n      CNAME item present, and the FB message(s).  This is to minimize\n
      \     the size of the RTCP packet transmitted to convey feedback and\n      thus
      to maximize the frequency at which feedback can be provided\n      while still
      adhering to the RTCP bandwidth limitations.\n      This packet format SHOULD
      be used whenever an RTCP FB message is\n      sent as part of an Early RTCP
      packet.  This packet type is\n      referred to as minimal compound RTCP packet
      in this document.\n   b) (Full) compound RTCP feedback packet\n      A (full)
      compound RTCP feedback packet MAY contain any additional\n      number of RTCP
      packets (additional RRs, further SDES items, etc.).\n      The above ordering
      rules MUST be adhered to.\n      This packet format MUST be used whenever an
      RTCP FB message is\n      sent as part of a Regular RTCP packet or in Regular
      RTCP mode.  It\n      MAY also be used to send RTCP FB messages in Immediate
      Feedback or\n      Early RTCP mode.  This packet type is referred to as full
      compound\n      RTCP packet in this document.\n   RTCP packets that do not contain
      FB messages are referred to as non-\n   FB RTCP packets.  Such packets MUST
      follow the format rules in [1].\n"
    title: 3.1.  Compound RTCP Feedback Packets
  - contents:
    - "3.2.  Algorithm Outline\n   FB messages are part of the RTCP control streams
      and thus subject to\n   the RTCP bandwidth constraints.  This means, in particular,
      that it\n   may not be possible to report an event observed at a receiver\n
      \  immediately back to the sender.  However, the value of feedback\n   given
      to a sender typically decreases over time -- in terms of the\n   media quality
      as perceived by the user at the receiving end and/or\n   the cost required to
      achieve media stream repair.\n   RTP [1] and the commonly used RTP profile [2]
      specify rules when\n   compound RTCP packets should be sent.  This document
      modifies those\n   rules in order to allow applications to timely report events
      (e.g.,\n   loss or reception of RTP packets) and to accommodate algorithms that\n
      \  use FB messages.\n   The modified RTCP transmission algorithm can be outlined
      as follows:\n   As long as no FB messages have to be conveyed, compound RTCP
      packets\n   are sent following the rules of RTP [1] -- except that the five-\n
      \  second minimum interval between RTCP reports is not enforced.  Hence,\n   the
      interval between RTCP reports is only derived from the average\n   RTCP packet
      size and the RTCP bandwidth share available to the\n   RTP/RTCP entity.  Optionally,
      a minimum interval between Regular RTCP\n   packets may be enforced.\n   If
      a receiver detects the need to send an FB message, it may do so\n   earlier
      than the next regular RTCP reporting interval (for which it\n   would be scheduled
      following the above regular RTCP algorithm).\n   Feedback suppression is used
      to avoid feedback implosion in\n   multiparty sessions:  The receiver waits
      for a (short) random\n   dithering interval to check whether it sees a corresponding
      FB\n   message from any other receiver reporting the same event.  Note that\n
      \  for point-to-point sessions there is no such delay.  If a\n   corresponding
      FB message from another member is received, this\n   receiver refrains from
      sending the FB message and continues to follow\n   the Regular RTCP transmission
      schedule.  In case the receiver has not\n   yet seen a corresponding FB message
      from any other member, it checks\n   whether it is allowed to send Early feedback.
      \ If sending Early\n   feedback is permissible, the receiver sends the FB message
      as part of\n   a minimal compound RTCP packet.  The permission to send Early\n
      \  feedback depends on the type of the previous RTCP packet sent by this\n   receiver
      and the time the previous Early feedback message was sent.\n   FB messages may
      also be sent as part of full compound RTCP packets,\n   which are transmitted
      as per [1] (except for the five-second lower\n   bound) in regular intervals.\n"
    title: 3.2.  Algorithm Outline
  - contents:
    - "3.3.  Modes of Operation\n   RTCP-based feedback may operate in one of three
      modes (Figure 1) as\n   described below.  The mode of operation is just an indication
      of\n   whether or not the receiver will, on average, be able to report all\n
      \  events to the sender in a timely fashion; the mode does not influence\n   the
      algorithm used for scheduling the transmission of FB messages.\n   And, depending
      on the reception quality and the locally monitored\n   state of the RTP session,
      individual receivers may not (and do not\n   have to) agree on a common perception
      on the current mode of\n   operation.\n   a) Immediate Feedback mode: In this
      mode, the group size is below the\n      FB threshold, which gives each receiving
      party sufficient\n      bandwidth to transmit the RTCP feedback packets for
      the intended\n      purpose.  This means that, for each receiver, there is enough\n
      \     bandwidth to report each event by means of a virtually \"immediate\"\n
      \     RTCP feedback packet.\n      The group size threshold is a function of
      a number of parameters\n      including (but not necessarily limited to): the
      type of feedback\n      used (e.g., ACK vs. NACK), bandwidth, packet rate, packet
      loss\n      probability and distribution, media type, codec, and the (worst\n
      \     case or observed) frequency of events to report (e.g., frame\n      received,
      packet lost).\n      As a rough estimate, let N be the average number of events
      to be\n      reported per interval T by a receiver, B the RTCP bandwidth\n      fraction
      for this particular receiver, and R the average RTCP\n      packet size, then
      the receiver operates in Immediate Feedback mode\n      as long as N<=B*T/R.\n
      \  b) Early RTCP mode: In this mode, the group size and other parameters\n      no
      longer allow each receiver to react to each event that would be\n      worth
      reporting (or that needed reporting).  But feedback can\n      still be given
      sufficiently often so that it allows the sender to\n      adapt the media stream
      transmission accordingly and thereby\n      increase the overall media playback
      quality.\n      Using the above notation, Early RTCP mode can be roughly\n      characterized
      by N > B*T/R as \"lower bound\".  An estimate for an\n      upper bound is more
      difficult.  Setting N=1, we obtain for a given\n      R and B the interval T
      = R/B as average interval between events to\n      be reported.  This information
      can be used as a hint to determine\n      whether or not early transmission
      of RTCP packets is useful.\n   c) Regular RTCP Mode: From some group size upwards,
      it is no longer\n      useful to provide feedback for individual events from
      receivers at\n      all -- because of the time scale in which the feedback could
      be\n      provided and/or because in large groups the sender(s) have no\n      chance
      to react to individual feedback anymore.\n      No precise group size threshold
      can be specified at which this\n      mode starts but, obviously, this boundary
      matches the upper bound\n      of the Early RTCP mode as specified in item b)
      above.\n   As the feedback algorithm described in this document scales smoothly,\n
      \  there is no need for an agreement among the participants on the\n   precise
      values of the respective FB thresholds within the group.\n   Hence, the borders
      between all these modes are soft.\n     ACK\n   feedback\n     V\n     :<- -
      - -  NACK feedback - - - ->//\n     :\n     :   Immediate   ||\n     : Feedback
      mode ||Early RTCP mode   Regular RTCP mode\n     :<=============>||<=============>//<=================>\n
      \    :               ||\n    -+---------------||---------------//------------------>
      group size\n     2               ||\n      Application-specific FB Threshold\n
      \        = f(data rate, packet loss, codec, ...)\n                       Figure
      1: Modes of operation\n   As stated before, the respective FB thresholds depend
      on a number of\n   technical parameters (of the codec, the transport, the type
      of\n   feedback used, etc.) but also on the respective application\n   scenarios.
      \ Section 3.6 provides some useful hints (but no precise\n   calculations) on
      estimating these thresholds.\n"
    title: 3.3.  Modes of Operation
  - contents:
    - "3.4.  Definitions and Algorithm Overview\n   The following pieces of state
      information need to be maintained per\n   receiver (largely taken from [1]).
      \ Note that all variables (except\n   in item h) below) are calculated independently
      at each receiver.\n   Therefore, their local values may differ at any given
      point in time.\n   a) Let \"senders\" be the number of active senders in the
      RTP session.\n   b) Let \"members\" be the current estimate of the number of
      receivers\n      in the RTP session.\n   c) Let tn and tp be the time for the
      next (last) scheduled RTCP RR\n      transmission calculated prior to timer
      reconsideration.\n   d) Let Tmin be the minimal interval between RTCP packets
      as per [1].\n      Unlike in [1], the initial Tmin is set to 1 second to allow
      for\n      some group size sampling before sending the first RTCP packet.\n
      \     After the first RTCP packet is sent, Tmin is set to 0.\n   e) Let T_rr
      be the interval after which, having just sent a regularly\n      scheduled RTCP
      packet, a receiver would schedule the transmission\n      of its next Regular
      RTCP packet.  This value is obtained following\n      the rules of [1] but with
      Tmin as defined in this document: T_rr =\n      T (the \"calculated interval\"
      as defined in [1]) with tn = tp + T.\n      T_rr always refers to the last value
      of T that has been computed\n      (because of reconsideration or to determine
      tn).  T_rr is also\n      referred to as Regular RTCP interval in this document.\n
      \  f) Let t0 be the time at which an event that is to be reported is\n      detected
      by a receiver.\n   g) Let T_dither_max be the maximum interval for which an
      RTCP\n      feedback packet MAY be additionally delayed to prevent implosions\n
      \     in multiparty sessions; the value for T_dither_max is dynamically\n      calculated
      based upon T_rr (or may be derived by means of another\n      mechanism common
      across all RTP receivers to be specified in the\n      future).  For point-to-point
      sessions (i.e., sessions with exactly\n      two members with no change in the
      group size expected, e.g.,\n      unicast streaming sessions), T_dither_max
      is set to 0.\n   h) Let T_max_fb_delay be the upper bound within which feedback
      to an\n      event needs to be reported back to the sender to be useful at all.\n
      \     This value is application specific, and no values are defined in\n      this
      document.\n   i) Let te be the time for which a feedback packet is scheduled.\n
      \  j) Let T_fd be the actual (randomized) delay for the transmission of\n      FB
      message in response to an event at time t0.\n   k) Let allow_early be a Boolean
      variable that indicates whether the\n      receiver currently may transmit FB
      messages prior to its next\n      regularly scheduled RTCP interval tn.  This
      variable is used to\n      throttle the feedback sent by a single receiver.
      \ allow_early is\n      set to FALSE after Early feedback transmission and is
      set to TRUE\n      as soon as the next Regular RTCP transmission takes place.\n
      \  l) Let avg_rtcp_size be the moving average on the RTCP packet size as\n      defined
      in [1].\n   m) Let T_rr_interval be an OPTIONAL minimal interval to be used\n
      \     between Regular RTCP packets.  If T_rr_interval == 0, then this\n      variable
      does not have any impact on the overall operation of the\n      RTCP feedback
      algorithm.  If T_rr_interval != 0, then the next\n      Regular RTCP packet
      will not be scheduled T_rr after the last\n      Regular RTCP transmission (i.e.,
      at tp+T_rr).  Instead, the next\n      Regular RTCP packet will be delayed until
      at least T_rr_interval\n      after the last Regular RTCP transmission, i.e.,
      it will be\n      scheduled at or later than tp+T_rr_interval.  Note that\n
      \     T_rr_interval does not affect the calculation of T_rr and tp;\n      instead,
      Regular RTCP packets scheduled for transmission before\n      tp+T_rr_interval
      will be suppressed if, for example, they do not\n      contain any FB messages.
      \ The T_rr_interval does not affect\n      transmission scheduling of Early
      RTCP packets.\n      Note: Providing T_rr_interval as an independent variable
      is meant\n      to minimize Regular RTCP feedback (and thus bandwidth consumption)\n
      \     as needed by the application while additionally allowing the use\n      of
      more frequent Early RTCP packets to provide timely feedback.\n      This goal
      could not be achieved by reducing the overall RTCP\n      bandwidth as RTCP
      bandwidth reduction would also impact the\n      frequency of Early feedback.\n
      \  n) Let t_rr_last be the point in time at which the last Regular RTCP\n      packet
      has been scheduled and sent, i.e., has not been suppressed\n      due to T_rr_interval.\n
      \  o) Let T_retention be the time window for which past FB messages are\n      stored
      by an AVPF entity.  This is to ensure that feedback\n      suppression also
      works for entities that have received FB messages\n      from other entities
      prior to noticing the feedback event itself.\n      T_retention MUST be set
      to at least 2 seconds.\n   p) Let M*Td be the timeout value for a receiver to
      be considered\n      inactive (as defined in [1]).\n   The feedback situation
      for an event to report at a receiver is\n   depicted in Figure 2 below.  At
      time t0, such an event (e.g., a\n   packet loss) is detected at the receiver.
      \ The receiver decides --\n   based upon current bandwidth, group size, and
      other application-\n   specific parameters -- that an FB message needs to be
      sent back to\n   the sender.\n   To avoid an implosion of feedback packets in
      multiparty sessions, the\n   receiver MUST delay the transmission of the RTCP
      feedback packet by a\n   random amount of time T_fd (with the random number
      evenly distributed\n   in the interval [0, T_dither_max]).  Transmission of
      the compound\n   RTCP packet MUST then be scheduled for te = t0 + T_fd.\n   The
      T_dither_max parameter is derived from the Regular RTCP interval,\n   T_rr,
      which, in turn, is based upon the group size.  A future\n   document may also
      specify other calculations for T_dither_max (e.g.,\n   based upon RTT) if it
      can be assured that all RTP receivers will use\n   the same mechanism for calculating
      T_dither_max.\n   For a certain application scenario, a receiver may determine
      an upper\n   bound for the acceptable local delay of FB messages:  T_max_fb_delay.\n
      \  If an a priori estimation or the actual calculation of T_dither_max\n   indicates
      that this upper bound MAY be violated (e.g., because\n   T_dither_max > T_max_fb_delay),
      the receiver MAY decide not to send\n   any feedback at all because the achievable
      gain is considered\n   insufficient.\n   If an Early RTCP packet is scheduled,
      the time slot for the next\n   Regular RTCP packet MUST be updated accordingly
      to have a new tn\n   (tn=tp+2*T_rr) and a new tp (tp=tp+T_rr) afterwards.  This
      is to\n   ensure that the short-term average RTCP bandwidth used with Early\n
      \  feedback does not exceed the bandwidth used without Early feedback.\n             event
      to\n             report\n             detected\n                |\n                |
      \ RTCP feedback range\n                |   (T_max_fb_delay)\n                vXXXXXXXXXXXXXXXXXXXXXXXXXXX
      \    ) )\n   |---+--------+-------------+-----+------------| |--------+--->\n
      \      |        |             |     |            ( (        |\n       |       t0
      \           te                             |\n       tp                                                   tn\n
      \                \\_______  ________/\n                         \\/\n                   T_dither_max\n
      \     Figure 2: Event report and parameters for Early RTCP scheduling\n"
    title: 3.4.  Definitions and Algorithm Overview
  - contents:
    - "3.5.   AVPF RTCP Scheduling Algorithm\n   Let S0 be an active sender (out of
      S senders) and let N be the number\n   of receivers with R being one of these
      receivers.\n   Assume that R has verified that using feedback mechanisms is\n
      \  reasonable at the current constellation (which is highly application\n   specific
      and hence not specified in this document).\n   Assume further that T_rr_interval
      is 0, if no minimal interval\n   between Regular RTCP packets is to be enforced,
      or T_rr_interval is\n   set to some meaningful value, as given by the application.
      \ This\n   value then denotes the minimal interval between Regular RTCP packets.\n
      \  With this, a receiver R MUST use the following rules for transmitting\n   one
      or more FB messages as minimal or full compound RTCP packet.\n"
    - contents:
      - "3.5.1.  Initialization\n   Initially, R MUST set allow_early = TRUE and t_rr_last
        = NaN (Not-a-\n   Number, i.e., some invalid value that can be distinguished
        from a\n   valid time).\n   Furthermore, the initialization of the RTCP variables
        as per [1]\n   applies except for the initial value for Tmin.  For a point-to-point\n
        \  session, the initial Tmin is set to 0.  For a multiparty session,\n   Tmin
        is initialized to 1.0 seconds.\n"
      title: 3.5.1.  Initialization
    - contents:
      - "3.5.2.  Early Feedback Transmission\n   Assume that R had scheduled the last
        Regular RTCP RR packet for\n   transmission at tp (and sent or suppressed
        this packet at tp) and has\n   scheduled the next transmission (including
        possible reconsideration\n   as per [1]) for tn = tp + T_rr.  Assume also
        that the last Regular\n   RTCP packet transmission has occurred at t_rr_last.\n
        \  The Early Feedback algorithm then comprises the following steps:\n   1.
        At time t0, R detects the need to transmit one or more FB\n      messages,
        e.g., because media \"units\" need to be ACKed or NACKed,\n      and finds
        that providing the feedback information is potentially\n      useful for the
        sender.\n   2. R first checks whether there is already a compound RTCP packet\n
        \     containing one or more FB messages scheduled for transmission\n      (either
        as Early or as Regular RTCP packet).\n      2a) If so, the new FB message
        MUST be included in the scheduled\n          packet; the scheduling of the
        waiting compound RTCP packet\n          MUST remain unchanged.  When doing
        so, the available feedback\n          information SHOULD be merged to produce
        as few FB messages as\n          possible.  This completes the course of immediate
        actions to\n          be taken.\n      2b) If no compound RTCP packet is already
        scheduled for\n          transmission, a new (minimal or full) compound RTCP
        packet\n          MUST be created and the minimal interval for T_dither_max
        MUST\n          be chosen as follows:\n          i)  If the session is a point-to-point
        session, then\n                 T_dither_max = 0.\n          ii) If the session
        is a multiparty session, then\n                 T_dither_max = l * T_rr\n
        \             with l=0.5.\n          The value for T_dither_max MAY be calculated
        differently\n          (e.g., based upon RTT), which MUST then be specified
        in a\n          future document.  Such a future specification MUST ensure
        that\n          all RTP receivers use the same mechanism to calculate\n          T_dither_max.\n
        \         The values given above for T_dither_max are minimal values.\n          Application-specific
        feedback considerations may make it\n          worthwhile to increase T_dither_max
        beyond this value.  This\n          is up to the discretion of the implementer.\n
        \  3. Then, R MUST check whether its next Regular RTCP packet would be\n      within
        the time bounds for the Early RTCP packet triggered at t0,\n      i.e., if
        t0 + T_dither_max > tn.\n      3a) If so, an Early RTCP packet MUST NOT be
        scheduled; instead,\n          the FB message(s) MUST be stored to be included
        in the Regular\n          RTCP packet scheduled for tn.  This completes the
        course of\n          immediate actions to be taken.\n      3b) Otherwise,
        the following steps are carried out.\n   4. R MUST check whether it is allowed
        to transmit an Early RTCP\n      packet, i.e., allow_early == TRUE, or not.\n
        \     4a) If allow_early == FALSE, then R MUST check the time for the\n          next
        scheduled Regular RTCP packet:\n          1.  If tn - t0 < T_max_fb_delay,
        then the feedback could still\n              be useful for the sender, despite
        the late reporting.\n              Hence, R MAY create an RTCP FB message
        to be included in\n              the Regular RTCP packet for transmission
        at tn.\n          2.  Otherwise, R MUST discard the RTCP FB message.\n          This
        completes the immediate course of actions to be taken.\n      4b) If allow_early
        == TRUE, then R MUST schedule an Early RTCP\n          packet for te = t0
        + RND * T_dither_max with RND being a\n          pseudo random function evenly
        distributed between 0 and 1.\n   5. R MUST detect overlaps in FB messages
        received from other members\n      of the RTP session and the FB messages
        R wants to send.\n      Therefore, while a member of the RTP session, R MUST
        continuously\n      monitor the arrival of (minimal) compound RTCP packets
        and store\n      each FB message contained in these RTCP packets for at least\n
        \     T_retention.  When scheduling the transmission of its own FB\n      message
        following steps 1 through 4 above, R MUST check each of\n      the stored
        and newly received FB messages from the RTCP packets\n      received during
        the interval [t0 - T_retention ; te] and act as\n      follows:\n      5a)
        If R understands the received FB message's semantics and the\n          message
        contents is a superset of the feedback R wanted to\n          send, then R
        MUST discard its own FB message and MUST re-\n          schedule the next
        Regular RTCP packet transmission for tn (as\n          calculated before).\n
        \     5b) If R understands the received FB message's semantics and the\n          message
        contents is not a superset of the feedback R wanted to\n          send, then
        R SHOULD transmit its own FB message as scheduled.\n          If there is
        an overlap between the feedback information to\n          send and the feedback
        information received, the amount of\n          feedback transmitted is up
        to R: R MAY leave its feedback\n          information to be sent unchanged,
        R MAY as well eliminate any\n          redundancy between its own feedback
        and the feedback received\n          so far from other session members.\n
        \     5c) If R does not understand the received FB message's semantics,\n
        \         R MAY keep its own FB message scheduled as an Early RTCP\n          packet,
        or R MAY re-schedule the next Regular RTCP packet\n          transmission
        for tn (as calculated before) and MAY append the\n          FB message to
        the now regularly scheduled RTCP message.\n          Note: With 5c), receiving
        unknown FB messages may not lead to\n          feedback suppression at a particular
        receiver.  As a\n          consequence, a given event may cause M different
        types of FB\n          messages (which are all appropriate but not mutually\n
        \         understood) to be scheduled, so that a \"large\" receiver group\n
        \         may effectively be partitioned into at most M groups.  Among\n          members
        of each of these M groups, feedback suppression will\n          occur following
        5a and 5b but no suppression will happen\n          across groups.  As a result,
        O(M) RTCP FB messages may be\n          received by the sender.  Hence, there
        is a chance for a very\n          limited feedback implosion.  However, as
        sender(s) and all\n          receivers make up the same application using
        the same (set of)\n          codecs in the same RTP session, only little divergence
        in\n          semantics for FB messages can safely be assumed and,\n          therefore,
        M is assumed to be small in the general case.\n          Given further that
        the O(M) FB messages are randomly\n          distributed over a time interval
        of T_dither_max, we find that\n          the resulting limited number of extra
        compound RTCP packets\n          (a) is assumed not to overwhelm the sender
        and (b) should be\n          conveyed as all contain complementary pieces
        of information.\n   6. If R's FB message(s) was not suppressed by other receiver
        FB\n      messages as per 5, when te is reached, R MUST transmit the\n      (minimal)
        compound RTCP packet containing its FB message(s).  R\n      then MUST set
        allow_early = FALSE, MUST recalculate tn = tp +\n      2*T_rr, and MUST set
        tp to the previous tn.  As soon as the newly\n      calculated tn is reached,
        regardless whether R sends its next\n      Regular RTCP packet or suppresses
        it because of T_rr_interval, it\n      MUST set allow_early = TRUE again.\n"
      title: 3.5.2.  Early Feedback Transmission
    - contents:
      - "3.5.3.  Regular RTCP Transmission\n   Full compound RTCP packets MUST be
        sent in regular intervals.  These\n   packets MAY also contain one or more
        FB messages.  Transmission of\n   Regular RTCP packets is scheduled as follows:\n
        \  If T_rr_interval == 0, then the transmission MUST follow the rules as\n
        \  specified in Sections 3.2 and 3.4 of this document and MUST adhere to\n
        \  the adjustments of tn specified in Section 3.5.2 (i.e., skip one\n   regular
        transmission if an Early RTCP packet transmission has\n   occurred).  Timer
        reconsideration takes place when tn is reached as\n   per [1].  The Regular
        RTCP packet is transmitted after timer\n   reconsideration.  Whenever a Regular
        RTCP packet is sent or\n   suppressed, allow_early MUST be set to TRUE and
        tp, tn MUST be\n   updated as per [1].  After the first transmission of a
        Regular RTCP\n   packet, Tmin MUST be set to 0.\n   If T_rr_interval != 0,
        then the calculation for the transmission\n   times MUST follow the rules
        as specified in Sections 3.2 and 3.4 of\n   this document and MUST adhere
        to the adjustments of tn specified in\n   Section 3.5.2 (i.e., skip one regular
        transmission if an Early RTCP\n   transmission has occurred).  Timer reconsideration
        takes place when\n   tn is reached as per [1].  After timer reconsideration,
        the following\n   actions are taken:\n   1. If no Regular RTCP packet has
        been sent before (i.e., if t_rr_last\n      == NaN), then a Regular RTCP packet
        MUST be scheduled.  Stored FB\n      messages MAY be included in the Regular
        RTCP packet.  After the\n      scheduled packet has been sent, t_rr_last MUST
        be set to tn.  Tmin\n      MUST be set to 0.\n   2. Otherwise, a temporary
        value T_rr_current_interval is calculated\n      as follows:\n         T_rr_current_interval
        = RND*T_rr_interval\n      with RND being a pseudo random function evenly
        distributed between\n      0.5 and 1.5.  This dithered value is used to determine
        one of the\n      following alternatives:\n      2a) If t_rr_last + T_rr_current_interval
        <= tn, then a Regular\n          RTCP packet MUST be scheduled.  Stored RTCP
        FB messages MAY be\n          included in the Regular RTCP packet.  After
        the scheduled\n          packet has been sent, t_rr_last MUST be set to tn.\n
        \     2b) If t_rr_last + T_rr_current_interval > tn and RTCP FB messages\n
        \         have been stored and are awaiting transmission, an RTCP packet\n
        \         MUST be scheduled for transmission at tn.  This RTCP packet\n          MAY
        be a minimal or a Regular RTCP packet (at the discretion\n          of the
        implementer), and the compound RTCP packet MUST include\n          the stored
        RTCP FB message(s).  t_rr_last MUST remain\n          unchanged.\n      2c)
        Otherwise (if t_rr_last + T_rr_current_interval > tn but no\n          stored
        RTCP FB messages are awaiting transmission), the\n          compound RTCP
        packet MUST be suppressed (i.e., it MUST NOT be\n          scheduled).  t_rr_last
        MUST remain unchanged.\n   In all the four cases above (1, 2a, 2b, and 2c),
        allow_early MUST be\n   set to TRUE (possibly after sending the Regular RTCP
        packet) and tp\n   and tn MUST be updated following the rules of [1] except
        for the five\n   second minimum.\n"
      title: 3.5.3.  Regular RTCP Transmission
    - contents:
      - "3.5.4.  Other Considerations\n   If T_rr_interval != 0, then the timeout
        calculation for RTP/AVPF\n   entities (Section 6.3.5 of [1]) MUST be modified
        to use T_rr_interval\n   instead of Tmin for computing Td and thus M*Td for
        timing out RTP\n   entities.\n   Whenever a compound RTCP packet is sent or
        received -- minimal or\n   full compound, Early or Regular -- the avg_rtcp_size
        variable MUST be\n   updated accordingly (see [1]) and subsequent computations
        of tn MUST\n   use the new avg_rtcp_size.\n"
      title: 3.5.4.  Other Considerations
    title: 3.5.   AVPF RTCP Scheduling Algorithm
  - contents:
    - "3.6.  Considerations on the Group Size\n   This section provides some guidelines
      to the group sizes at which the\n   various feedback modes may be used.\n"
    - contents:
      - "3.6.1.  ACK Mode\n   The RTP session MUST have exactly two members and this
        group size\n   MUST NOT grow, i.e., it MUST be point-to-point communications.\n
        \  Unicast addresses SHOULD be used in the session description.\n   For unidirectional
        as well as bi-directional communication between\n   two parties, 2.5% of the
        RTP session bandwidth is available for RTCP\n   traffic from the receivers
        including feedback.  For a 64-kbit/s\n   stream this yields 1,600 bit/s for
        RTCP.  If we assume an average of\n   96 bytes (=768 bits) per RTCP packet,
        a receiver can report 2 events\n   per second back to the sender.  If acknowledgements
        for 10 events are\n   collected in each FB message, then 20 events can be
        acknowledged per\n   second.  At 256 kbit/s, 8 events could be reported per
        second; thus,\n   the ACKs may be sent in a finer granularity (e.g., only
        combining\n   three ACKs per FB message).\n   From 1 Mbit/s upwards, a receiver
        would be able to acknowledge each\n   individual frame (not packet!) in a
        30-fps video stream.\n   ACK strategies MUST be defined to work properly with
        these bandwidth\n   limitations.  An indication whether or not ACKs are allowed
        for a\n   session and, if so, which ACK strategy should be used, MAY be\n
        \  conveyed by out-of-band mechanisms, e.g., media-specific attributes\n   in
        a session description using SDP.\n"
      title: 3.6.1.  ACK Mode
    - contents:
      - "3.6.2.  NACK Mode\n   Negative acknowledgements (and the other types of feedback
        exhibiting\n   similar reporting characteristics) MUST be used for all sessions
        with\n   a group size that may grow larger than two.  Of course, NACKs MAY
        be\n   used for point-to-point communications as well.\n   Whether or not
        the use of Early RTCP packets should be considered\n   depends upon a number
        of parameters including session bandwidth,\n   codec, special type of feedback,
        and number of senders and receivers.\n   The most important parameters when
        determining the mode of operation\n   are the allowed minimal interval between
        two compound RTCP packets\n   (T_rr) and the average number of events that
        presumably need\n   reporting per time interval (plus their distribution over
        time, of\n   course).  The minimum interval can be derived from the available
        RTCP\n   bandwidth and the expected average size of an RTCP packet.  The\n
        \  number of events to report (e.g., per second) may be derived from the\n
        \  packet loss rate and sender's rate of transmitting packets.  From\n   these
        two values, the allowable group size for the Immediate Feedback\n   mode can
        be calculated.\n   As stated in Section 3.3:\n      Let N be the average number
        of events to be reported per interval\n      T by a receiver, B the RTCP bandwidth
        fraction for this particular\n      receiver, and R the average RTCP packet
        size, then the receiver\n      operates in Immediate Feedback mode as long
        as N<=B*T/R.\n   The upper bound for the Early RTCP mode then solely depends
        on the\n   acceptable quality degradation, i.e., how many events per time\n
        \  interval may go unreported.\n   As stated in Section 3.3:\n      Using
        the above notation, Early RTCP mode can be roughly\n      characterized by
        N > B*T/R as \"lower bound\".  An estimate for an\n      upper bound is more
        difficult.  Setting N=1, we obtain for a given\n      R and B the interval
        T = R/B as average interval between events to\n      be reported.  This information
        can be used as a hint to determine\n      whether or not early transmission
        of RTCP packets is useful.\n   Example: If a 256-kbit/s video with 30 fps
        is transmitted through a\n   network with an MTU size of some 1,500 bytes,
        then, in most cases,\n   each frame would fit in into one packet leading to
        a packet rate of\n   30 packets per second.  If 5% packet loss occurs in the
        network\n   (equally distributed, no inter-dependence between receivers),
        then\n   each receiver will, on average, have to report 3 packets lost each\n
        \  two seconds.  Assuming a single sender and more than three receivers,\n
        \  this yields 3.75% of the RTCP bandwidth allocated to the receivers\n   and
        thus 9.6 kbit/s.  Assuming further a size of 120 bytes for the\n   average
        compound RTCP packet allows 10 RTCP packets to be sent per\n   second or 20
        in two seconds.  If every receiver needs to report three\n   lost packets
        per two seconds, this yields a maximum group size of 6-7\n   receivers if
        all loss events are reported.  The rules for\n   transmission of Early RTCP
        packets should provide sufficient\n   flexibility for most of this reporting
        to occur in a timely fashion.\n   Extending this example to determine the
        upper bound for Early RTCP\n   mode could lead to the following considerations:
        assume that the\n   underlying coding scheme and the application (as well
        as the tolerant\n   users) allow on the order of one loss without repair per
        two seconds.\n   Thus, the number of packets to be reported by each receiver
        decreases\n   to two per two seconds and increases the group size to 10.  Assuming\n
        \  further that some number of packet losses are correlated, feedback\n   traffic
        is further reduced and group sizes of some 12 to 16 (maybe\n   even 20) can
        be reasonably well supported using Early RTCP mode.\n   Note that all these
        considerations are based upon statistics and will\n   fail to hold in some
        cases.\n"
      title: 3.6.2.  NACK Mode
    title: 3.6.  Considerations on the Group Size
  - contents:
    - '3.7.  Summary of Decision Steps

      '
    - contents:
      - "3.7.1.  General Hints\n   Before even considering whether or not to send
        RTCP feedback\n   information, an application has to determine whether this
        mechanism\n   is applicable:\n   1) An application has to decide whether --
        for the current ratio of\n      packet rate with the associated (application-specific)
        maximum\n      feedback delay and the currently observed round-trip time (if\n
        \     available) -- feedback mechanisms can be applied at all.\n      This
        decision may be based upon (and dynamically revised\n      following)  RTCP
        reception statistics as well as out-of-band\n      mechanisms.\n   2) The
        application has to decide -- for a certain observed error\n      rate, assigned
        bandwidth, frame/packet rate, and group size --\n      whether (and which)
        feedback mechanisms can be applied.\n      Regular RTCP reception statistics
        provide valuable input to this\n      step, too.\n   3) If the application
        decides to send feedback, the application has\n      to follow the rules for
        transmitting Early RTCP packets or Regular\n      RTCP packets containing
        FB messages.\n   4) The type of RTCP feedback sent should not duplicate information\n
        \     available to the sender from a lower layer transport protocol.\n      That
        is, if the transport protocol provides negative or positive\n      acknowledgements
        about packet reception (such as DCCP), the\n      receiver should avoid repeating
        the same information at the RTCP\n      layer (i.e., abstain from sending
        Generic NACKs).\n"
      title: 3.7.1.  General Hints
    - contents:
      - "3.7.2.  Media Session Attributes\n   Media sessions are typically described
        using out-of-band mechanisms\n   to convey transport addresses, codec information,
        etc., between\n   sender(s) and receiver(s).  Such a mechanism is two-fold:
        \ a format\n   used to describe a media session and another mechanism for\n
        \  transporting this description.\n   In the IETF, the Session Description
        Protocol (SDP) is currently used\n   to describe media sessions while protocols
        such as SIP, Session\n   Announcement Protocol (SAP), Real Time Streaming
        Protocol (RTSP), and\n   HTTP (among others) are used to convey the descriptions.\n
        \  A media session description format MAY include parameters to indicate\n
        \  that RTCP feedback mechanisms are supported in this session and which\n
        \  of the feedback mechanisms MAY be applied.\n   To do so, the profile \"AVPF\"
        MUST be indicated instead of \"AVP\".\n   Further attributes may be defined
        to show which type(s) of feedback\n   are supported.\n   Section 4 contains
        the syntax specification to support RTCP feedback\n   with SDP.  Similar specifications
        for other media session description\n   formats are outside the scope of this
        document.\n"
      title: 3.7.2.  Media Session Attributes
    title: 3.7.  Summary of Decision Steps
  title: 3.  Rules for RTCP Feedback
- contents:
  - "4.  SDP Definitions\n   This section defines a number of additional SDP parameters
    that are\n   used to describe a session.  All of these are defined as media-level\n
    \  attributes.\n"
  - contents:
    - "4.1.  Profile Identification\n   The AV profile defined in [4] is referred
      to as \"AVP\" in the context\n   of, e.g., the Session Description Protocol
      (SDP) [3].  The profile\n   specified in this document is referred to as \"AVPF\".\n
      \  Feedback information following the modified timing rules as specified\n   in
      this document MUST NOT be sent for a particular media session\n   unless the
      description for this session indicates the use of the\n   \"AVPF\" profile (exclusively
      or jointly with other AV profiles).\n"
    title: 4.1.  Profile Identification
  - contents:
    - "4.2.  RTCP Feedback Capability Attribute\n   A new payload format-specific
      SDP attribute is defined to indicate\n   the capability of using RTCP feedback
      as specified in this document:\n   \"a=rtcp-fb\".  The \"rtcp-fb\" attribute
      MUST only be used as an SDP\n   media attribute and MUST NOT be provided at
      the session level.  The\n   \"rtcp-fb\" attribute MUST only be used in media
      sessions for which the\n   \"AVPF\" is specified.\n   The \"rtcp-fb\" attribute
      SHOULD be used to indicate which RTCP FB\n   messages MAY be used in this media
      session for the indicated payload\n   type.  A wildcard payload type (\"*\")
      MAY be used to indicate that the\n   RTCP feedback attribute applies to all
      payload types.  If several\n   types of feedback are supported and/or the same
      feedback shall be\n   specified for a subset of the payload types, several \"a=rtcp-fb\"\n
      \  lines MUST be used.\n   If no \"rtcp-fb\" attribute is specified, the RTP
      receivers MAY send\n   feedback using other suitable RTCP feedback packets as
      defined for\n   the respective media type.  The RTP receivers MUST NOT rely
      on the\n   RTP senders reacting to any of the FB messages.  The RTP sender MAY\n
      \  choose to ignore some feedback messages.\n   If one or more \"rtcp-fb\" attributes
      are present in a media session\n   description, the RTCP receivers for the media
      session(s) containing\n   the \"rtcp-fb\"\n   o  MUST ignore all \"rtcp-fb\"
      attributes of which they do not fully\n      understand the semantics (i.e.,
      where they do not understand the\n      meaning of all values in the \"a=rtcp-fb\"
      line);\n   o  SHOULD provide feedback information as specified in this document\n
      \     using any of the RTCP feedback packets as specified in one of the\n      \"rtcp-fb\"
      attributes for this media session; and\n   o  MUST NOT use other FB messages
      than those listed in one of the\n      \"rtcp-fb\" attribute lines.\n   When
      used in conjunction with the offer/answer model [8], the offerer\n   MAY present
      a set of these AVPF attributes to its peer.  The answerer\n   MUST remove all
      attributes it does not understand as well as those it\n   does not support in
      general or does not wish to use in this\n   particular media session.  The answerer
      MUST NOT add feedback\n   parameters to the media description and MUST NOT alter
      values of such\n   parameters.  The answer is binding for the media session,
      and both\n   offerer and answerer MUST only use feedback mechanisms negotiated
      in\n   this way.  Both offerer and answerer MAY independently decide to send\n
      \  RTCP FB messages of only a subset of the negotiated feedback\n   mechanisms,
      but they SHOULD react properly to all types of the\n   negotiated FB messages
      when received.\n   RTP senders MUST be prepared to receive any kind of RTCP
      FB messages\n   and MUST silently discard all those RTCP FB messages that they
      do not\n   understand.\n   The syntax of the \"rtcp-fb\" attribute is as follows
      (the feedback\n   types and optional parameters are all case sensitive):\n   (In
      the following ABNF, fmt, SP, and CRLF are used as defined in\n   [3].)\n      rtcp-fb-syntax
      = \"a=rtcp-fb:\" rtcp-fb-pt SP rtcp-fb-val CRLF\n      rtcp-fb-pt         =
      \"*\"   ; wildcard: applies to all formats\n                         / fmt   ;
      as defined in SDP spec\n      rtcp-fb-val        = \"ack\" rtcp-fb-ack-param\n
      \                        / \"nack\" rtcp-fb-nack-param\n                         /
      \"trr-int\" SP 1*DIGIT\n                         / rtcp-fb-id rtcp-fb-param\n
      \     rtcp-fb-id         = 1*(alpha-numeric / \"-\" / \"_\")\n      rtcp-fb-param
      \     = SP \"app\" [SP byte-string]\n                         / SP token [SP
      byte-string]\n                         / ; empty\n      rtcp-fb-ack-param  =
      SP \"rpsi\"\n                         / SP \"app\" [SP byte-string]\n                         /
      SP token [SP byte-string]\n                         / ; empty\n      rtcp-fb-nack-param
      = SP \"pli\"\n                         / SP \"sli\"\n                         /
      SP \"rpsi\"\n                         / SP \"app\" [SP byte-string]\n                         /
      SP token [SP byte-string]\n                         / ; empty\n   The literals
      of the above grammar have the following semantics:\n   Feedback type \"ack\":\n
      \     This feedback type indicates that positive acknowledgements for\n      feedback
      are supported.\n      The feedback type \"ack\" MUST only be used if the media
      session is\n      allowed to operate in ACK mode as defined in Section 3.6.1.\n
      \     Parameters MUST be provided to further distinguish different types\n      of
      positive acknowledgement feedback.\n      The parameter \"rpsi\" indicates the
      use of Reference Picture\n      Selection Indication feedback as defined in
      Section 6.3.3.\n      If the parameter \"app\" is specified, this indicates
      the use of\n      application layer feedback.  In this case, additional parameters\n
      \     following \"app\" MAY be used to further differentiate various types\n
      \     of application layer feedback.  This document does not define any\n      parameters
      specific to \"app\".\n      Further parameters for \"ack\" MAY be defined in
      other documents.\n   Feedback type \"nack\":\n      This feedback type indicates
      that negative acknowledgements for\n      feedback are supported.\n      The
      feedback type \"nack\", without parameters, indicates use of the\n      Generic
      NACK feedback format as defined in Section 6.2.1.\n      The following three
      parameters are defined in this document for\n      use with \"nack\" in conjunction
      with the media type \"video\":\n      o \"pli\" indicates the use of Picture
      Loss Indication feedback as\n        defined in Section 6.3.1.\n      o \"sli\"
      indicates the use of Slice Loss Indication feedback as\n        defined in Section
      6.3.2.\n      o \"rpsi\" indicates the use of Reference Picture Selection\n
      \       Indication feedback as defined in Section 6.3.3.\n      \"app\" indicates
      the use of application layer feedback.  Additional\n      parameters after \"app\"
      MAY be provided to differentiate different\n      types of application layer
      feedback.  No parameters specific to\n      \"app\" are defined in this document.\n
      \     Further parameters for \"nack\" MAY be defined in other documents.\n   Other
      feedback types <rtcp-fb-id>:\n      Other documents MAY define additional types
      of feedback; to keep\n      the grammar extensible for those cases, the rtcp-fb-id
      is\n      introduced as a placeholder.  A new feedback scheme name MUST to\n
      \     be unique (and thus MUST be registered with IANA).  Along with a\n      new
      name, its semantics, packet formats (if necessary), and rules\n      for its
      operation MUST be specified.\n   Regular RTCP minimum interval \"trr-int\":\n
      \     The attribute \"trr-int\" is used to specify the minimum interval\n      T_rr_interval
      between two Regular (full compound) RTCP packets in\n      milliseconds for
      this media session.  If \"trr-int\" is not\n      specified, a default value
      of 0 is assumed.\n   Note that it is assumed that more specific information
      about\n   application layer feedback (as defined in Section 6.4) will be\n   conveyed
      as feedback types and parameters defined elsewhere.  Hence,\n   no further provision
      for any types and parameters is made in this\n   document.\n   Further types
      of feedback as well as further parameters may be\n   defined in other documents.\n
      \  It is up to the recipients whether or not they send feedback\n   information
      and up to the sender(s) (how) to make use of feedback\n   provided.\n"
    title: 4.2.  RTCP Feedback Capability Attribute
  - contents:
    - "4.3.  RTCP Bandwidth Modifiers\n   The standard RTCP bandwidth assignments
      as defined in [1] and [2] MAY\n   be overridden by bandwidth modifiers that
      explicitly define the\n   maximum RTCP bandwidth.  For use with SDP, such modifiers
      are\n   specified in [4]: \"b=RS:<bw>\" and \"b=RR:<bw>\" MAY be used to assign
      a\n   different bandwidth (measured in bits per second) to RTP senders and\n
      \  receivers, respectively.  The precedence rules of [4] apply to\n   determine
      the actual bandwidth to be used by senders and receivers.\n   Applications operating
      knowingly over highly asymmetric links (such\n   as satellite links) SHOULD
      use this mechanism to reduce the feedback\n   rate for high bandwidth streams
      to prevent deterministic congestion\n   of the feedback path(s).\n"
    title: 4.3.  RTCP Bandwidth Modifiers
  - contents:
    - "4.4.  Examples\n   Example 1: The following session description indicates a
      session made\n   up from audio and DTMF [18] for point-to-point communication
      in which\n   the DTMF stream uses Generic NACKs.  This session description could\n
      \  be contained in a SIP INVITE, 200 OK, or ACK message to indicate that\n   its
      sender is capable of and willing to receive feedback for the DTMF\n   stream
      it transmits.\n      v=0\n      o=alice 3203093520 3203093520 IN IP4 host.example.com\n
      \     s=Media with feedback\n      t=0 0\n      c=IN IP4 host.example.com\n
      \     m=audio 49170 RTP/AVPF 0 96\n      a=rtpmap:0 PCMU/8000\n      a=rtpmap:96
      telephone-event/8000\n      a=fmtp:96 0-16\n      a=rtcp-fb:96 nack\n   This
      allows sender and receiver to provide reliable transmission of\n   DTMF events
      in an audio session.  Assuming a 64-kbit/s audio stream\n   with one receiver,
      the receiver has 2.5% RTCP bandwidth available for\n   the negative acknowledgement
      stream, i.e., 250 bytes per second or\n   some 2 RTCP feedback messages every
      second.  Hence, the receiver can\n   individually communicate up to two missing
      DTMF audio packets per\n   second.\n   Example 2: The following session description
      indicates a multicast\n   video-only session (using either H.261 or H.263+)
      with the video\n   source accepting Generic NACKs for both codecs and Reference
      Picture\n   Selection for H.263.  Such a description may have been conveyed
      using\n   the Session Announcement Protocol (SAP).\n      v=0\n      o=alice
      3203093520 3203093520 IN IP4 host.example.com\n      s=Multicast video with
      feedback\n      t=3203130148 3203137348\n      m=audio 49170 RTP/AVP 0\n      c=IN
      IP4 224.2.1.183\n      a=rtpmap:0 PCMU/8000\n      m=video 51372 RTP/AVPF 98
      99\n      c=IN IP4 224.2.1.184\n      a=rtpmap:98 H263-1998/90000\n      a=rtpmap:99
      H261/90000\n      a=rtcp-fb:* nack\n      a=rtcp-fb:98 nack rpsi\n   The sender
      may use an incoming Generic NACK as a hint to send a new\n   intra-frame as
      soon as possible (congestion control permitting).\n   Receipt of a Reference
      Picture Selection Indication (RPSI) message\n   allows the sender to avoid sending
      a large intra-frame; instead it\n   may continue to send inter-frames, however,
      choosing the indicated\n   frame as new encoding reference.\n   Example 3: The
      following session description defines the same media\n   session as example
      2 but allows for mixed-mode operation of AVP and\n   AVPF RTP entities (see
      also next section).  Note that both media\n   descriptions use the same addresses;
      however, two m= lines are needed\n   to convey information about both applicable
      RTP profiles.\n      v=0\n      o=alice 3203093520 3203093520 IN IP4 host.example.com\n
      \     s=Multicast video with feedback\n      t=3203130148 3203137348\n      m=audio
      49170 RTP/AVP 0\n      c=IN IP4 224.2.1.183\n      a=rtpmap:0 PCMU/8000\n      m=video
      51372 RTP/AVP 98 99\n      c=IN IP4 224.2.1.184\n      a=rtpmap:98 H263-1998/90000\n
      \     a=rtpmap:99 H261/90000\n      m=video 51372 RTP/AVPF 98 99\n      c=IN
      IP4 224.2.1.184\n      a=rtpmap:98 H263-1998/90000\n      a=rtpmap:99 H261/90000\n
      \     a=rtcp-fb:* nack\n      a=rtcp-fb:98 nack rpsi\n   Note that these two
      m= lines SHOULD be grouped by some appropriate\n   mechanism to indicate that
      both are alternatives actually conveying\n   the same contents.  A sample framework
      by which this can be\n   achieved is defined in [10].\n   In this example, the
      RTCP feedback-enabled receivers will gain an\n   occasional advantage to report
      events earlier back to the sender\n   (which may benefit the entire group).
      \ On average, however, all RTP\n   receivers will provide the same amount of
      feedback.  The\n   interworking between AVP and AVPF entities is discussed in
      depth in\n   the next section.\n"
    title: 4.4.  Examples
  title: 4.  SDP Definitions
- contents:
  - "5.  Interworking and Coexistence of AVP and AVPF Entities\n   The AVPF profile
    defined in this document is an extension of the\n   AVP profile as defined in
    [2].  Both profiles follow the same basic\n   rules (including the upper bandwidth
    limit for RTCP and the\n   bandwidth assignments to senders and receivers).  Therefore,\n
    \  senders and receivers using either of the two profiles can be\n   mixed in
    a single session (see Example 3 in Section 4.5).\n   AVP and AVPF are defined
    in a way that, from a robustness point of\n   view, the RTP entities do not need
    to be aware of entities of the\n   respective other profile: they will not disturb
    each other's\n   functioning.  However, the quality of the media presented may\n
    \  suffer.\n   The following considerations apply to senders and receivers when\n
    \  used in a combined session.\n   o  AVP entities (senders and receivers)\n      AVP
    senders will receive RTCP feedback packets from AVPF\n      receivers and ignore
    these packets.  They will see occasional\n      closer spacing of RTCP messages
    (e.g., violating the five-second\n      rule) by AVPF entities.  As the overall
    bandwidth constraints\n      are adhered to by both types of entities, they will
    still get\n      their share of the RTCP bandwidth.  However, while AVP entities\n
    \     are bound by the five-second rule, depending on the group size\n      and
    session bandwidth, AVPF entities may provide more frequent\n      RTCP reports
    than AVP ones will.  Also, the overall reporting\n      may decrease slightly
    as AVPF entities may send bigger compound\n      RTCP packets (due to the extra
    RTCP packets).\n      If T_rr_interval is used as lower bound between Regular
    RTCP\n      packets, T_rr_interval is sufficiently large (e.g., T_rr_interval\n
    \     > M*Td as per Section 6.3.5 of [1]), and no Early RTCP packets\n      are
    sent by AVPF entities, AVP entities may accidentally time\n      out those AVPF
    group members and hence underestimate the group\n      size.  Therefore, if AVP
    entities may be involved in a media\n      session, T_rr_interval SHOULD NOT be
    larger than five seconds.\n   o  AVPF entities (senders and receivers)\n      If
    the dynamically calculated T_rr is sufficiently small (e.g.,\n      less than
    one second), AVPF entities may accidentally time out\n      AVP group members
    and hence underestimate the group size.\n      Therefore, if AVP entities may
    be involved in a media session,\n      T_rr_interval SHOULD be used and SHOULD
    be set to five seconds.\n      In conclusion, if AVP entities may be involved
    in a media\n      session and T_rr_interval is to be used, T_rr_interval SHOULD
    be\n      set to five seconds.\n   o  AVPF senders\n      AVPF senders will receive
    feedback information only from AVPF\n      receivers.  If they rely on feedback
    to provide the target media\n      quality, the quality achieved for AVP receivers
    may be suboptimal.\n   o  AVPF receivers\n      AVPF receivers SHOULD send Early
    RTCP feedback packets only if\n      all sending entities in the media session
    support AVPF.  AVPF\n      receivers MAY send feedback information as part of
    regularly\n      scheduled compound RTCP packets following the timing rules of\n
    \     [1] and [2] also in media sessions operating in mixed mode.\n      However,
    the receiver providing feedback MUST NOT rely on the\n      sender reacting to
    the feedback at all.\n"
  title: 5.  Interworking and Coexistence of AVP and AVPF Entities
- contents:
  - "6.  Format of RTCP Feedback Messages\n   This section defines the format of the
    low-delay RTCP feedback\n   messages.  These messages are classified into three
    categories as\n   follows:\n   - Transport layer FB messages\n   - Payload-specific
    FB messages\n   - Application layer FB messages\n   Transport layer FB messages
    are intended to transmit general purpose\n   feedback information, i.e., information
    independent of the particular\n   codec or the application in use.  The information
    is expected to be\n   generated and processed at the transport/RTP layer.  Currently,
    only\n   a generic negative acknowledgement (NACK) message is defined.\n   Payload-specific
    FB messages transport information that is specific\n   to a certain payload type
    and will be generated and acted upon at the\n   codec \"layer\".  This document
    defines a common header to be used in\n   conjunction with all payload-specific
    FB messages.  The definition of\n   specific messages is left either to RTP payload
    format specifications\n   or to additional feedback format documents.\n   Application
    layer FB messages provide a means to transparently convey\n   feedback from the
    receiver's to the sender's application.  The\n   information contained in such
    a message is not expected to be acted\n   upon at the transport/RTP or the codec
    layer.  The data to be\n   exchanged between two application instances is usually
    defined in the\n   application protocol specification and thus can be identified
    by the\n   application so that there is no need for additional external\n   information.
    \ Hence, this document defines only a common header to be\n   used along with
    all application layer FB messages.  From a protocol\n   point of view, an application
    layer FB message is treated as a\n   special case of a payload-specific FB message.\n
    \     Note: Proper processing of some FB messages at the media sender\n      side
    may require the sender to know which payload type the FB\n      message refers
    to.  Most of the time, this knowledge can likely be\n      derived from a media
    stream using only a single payload type.\n      However, if several codecs are
    used simultaneously (e.g., with\n      audio and DTMF) or when codec changes occur,
    the payload type\n      information may need to be conveyed explicitly as part
    of the FB\n      message.  This applies to all\n      payload-specific as well
    as application layer FB messages.  It is\n      up to the specification of an
    FB message to define how payload\n      type information is transmitted.\n   This
    document defines two transport layer and three (video) payload-\n   specific FB
    messages as well as a single container for application\n   layer FB messages.
    \ Additional transport layer and payload-specific\n   FB messages MAY be defined
    in other documents and MUST be registered\n   through IANA (see Section 9, \"IANA
    Considerations\").\n   The general syntax and semantics for the above RTCP FB
    message types\n   are described in the following subsections.\n"
  - contents:
    - "6.1.   Common Packet Format for Feedback Messages\n   All FB messages MUST
      use a common packet format that is depicted in\n   Figure 3:\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |V=2|P|   FMT   |       PT      |          length               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                  SSRC of packet sender                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                  SSRC of media source                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  :            Feedback Control Information (FCI)                 :\n   :                                                               :\n
      \          Figure 3: Common Packet Format for Feedback Messages\n   The fields
      V, P, SSRC, and length are defined in the RTP\n   specification [2], the respective
      meaning being summarized below:\n   version (V): 2 bits\n      This field identifies
      the RTP version.  The current version is 2.\n   padding (P): 1 bit\n      If
      set, the padding bit indicates that the packet contains\n      additional padding
      octets at the end that are not part of the\n      control information but are
      included in the length field.\n   Feedback message type (FMT): 5 bits\n      This
      field identifies the type of the FB message and is\n      interpreted relative
      to the type (transport layer, payload-\n      specific, or application layer
      feedback).  The values for each of\n      the three feedback types are defined
      in the respective sections\n      below.\n   Payload type (PT): 8 bits\n      This
      is the RTCP packet type that identifies the packet as being\n      an RTCP FB
      message.  Two values are defined by the IANA:\n            Name   | Value |
      Brief Description\n         ----------+-------+------------------------------------\n
      \           RTPFB  |  205  | Transport layer FB message\n            PSFB   |
      \ 206  | Payload-specific FB message\n   Length: 16 bits\n      The length of
      this packet in 32-bit words minus one, including the\n      header and any padding.
      \ This is in line with the definition of\n      the length field used in RTCP
      sender and receiver reports [3].\n   SSRC of packet sender: 32 bits\n      The
      synchronization source identifier for the originator of this\n      packet.\n
      \  SSRC of media source: 32 bits\n      The synchronization source identifier
      of the media source that\n      this piece of feedback information is related
      to.\n   Feedback Control Information (FCI): variable length\n      The following
      three sections define which additional information\n      MAY be included in
      the FB message for each type of feedback:\n      transport layer, payload-specific,
      or application layer feedback.\n      Note that further FCI contents MAY be
      specified in further\n      documents.\n   Each RTCP feedback packet MUST contain
      at least one FB message in the\n   FCI field.  Sections 6.2 and 6.3 define for
      each FCI type, whether or\n   not multiple FB messages MAY be compressed into
      a single FCI field.\n   If this is the case, they MUST be of the same type,
      i.e., same FMT.\n   If multiple types of feedback messages, i.e., several FMTs,
      need to\n   be conveyed, then several RTCP FB messages MUST be generated and\n
      \  SHOULD be concatenated in the same compound RTCP packet.\n"
    title: 6.1.   Common Packet Format for Feedback Messages
  - contents:
    - "6.2.   Transport Layer Feedback Messages\n   Transport layer FB messages are
      identified by the value RTPFB as RTCP\n   message type.\n   A single general
      purpose transport layer FB message is defined in\n   this document: Generic
      NACK.  It is identified by means of the FMT\n   parameter as follows:\n   0:
      \   unassigned\n   1:    Generic NACK\n   2-30: unassigned\n   31:   reserved
      for future expansion of the identifier number space\n   The following subsection
      defines the formats of the FCI field for\n   this type of FB message.  Further
      generic feedback messages MAY be\n   defined in the future.\n"
    - contents:
      - "6.2.1.  Generic NACK\n   The Generic NACK message is identified by PT=RTPFB
        and FMT=1.\n   The FCI field MUST contain at least one and MAY contain more
        than one\n   Generic NACK.\n   The Generic NACK is used to indicate the loss
        of one or more RTP\n   packets.  The lost packet(s) are identified by the
        means of a packet\n   identifier and a bit mask.\n   Generic NACK feedback
        SHOULD NOT be used if the underlying transport\n   protocol is capable of
        providing similar feedback information to the\n   sender (as may be the case,
        e.g., with DCCP).\n   The Feedback Control Information (FCI) field has the
        following Syntax\n   (Figure 4):\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |            PID                |             BLP               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \              Figure 4: Syntax for the Generic NACK message\n   Packet ID
        (PID): 16 bits\n      The PID field is used to specify a lost packet.  The
        PID field\n      refers to the RTP sequence number of the lost packet.\n   bitmask
        of following lost packets (BLP): 16 bits\n      The BLP allows for reporting
        losses of any of the 16 RTP packets\n      immediately following the RTP packet
        indicated by the PID.  The\n      BLP's definition is identical to that given
        in [6].  Denoting the\n      BLP's least significant bit as bit 1, and its
        most significant bit\n      as bit 16, then bit i of the bit mask is set to
        1 if the receiver\n      has not received RTP packet number (PID+i) (modulo
        2^16) and\n      indicates this packet is lost; bit i is set to 0 otherwise.
        \ Note\n      that the sender MUST NOT assume that a receiver has received
        a\n      packet because its bit mask was set to 0.  For example, the least\n
        \     significant bit of the BLP would be set to 1 if the packet\n      corresponding
        to the PID and the following packet have been lost.\n      However, the sender
        cannot infer that packets PID+2 through PID+16\n      have been received simply
        because bits 2 through 15 of the BLP are\n      0; all the sender knows is
        that the receiver has not reported them\n      as lost at this time.\n   The
        length of the FB message MUST be set to 2+n, with n being the\n   number of
        Generic NACKs contained in the FCI field.\n   The Generic NACK message implicitly
        references the payload type\n   through the sequence number(s).\n"
      title: 6.2.1.  Generic NACK
    title: 6.2.   Transport Layer Feedback Messages
  - contents:
    - "6.3.  Payload-Specific Feedback Messages\n   Payload-Specific FB messages are
      identified by the value PT=PSFB as\n   RTCP message type.\n   Three payload-specific
      FB messages are defined so far plus an\n   application layer FB message.  They
      are identified by means of the\n   FMT parameter as follows:\n      0:     unassigned\n
      \     1:     Picture Loss Indication (PLI)\n      2:     Slice Loss Indication
      (SLI)\n      3:     Reference Picture Selection Indication (RPSI)\n      4-14:
      \ unassigned\n      15:    Application layer FB (AFB) message\n      16-30:
      unassigned\n      31:    reserved for future expansion of the sequence number
      space\n   The following subsections define the FCI formats for the payload-\n
      \  specific FB messages, Section 6.4 defines FCI format for the\n   application
      layer FB message.\n"
    - contents:
      - "6.3.1.  Picture Loss Indication (PLI)\n   The PLI FB message is identified
        by PT=PSFB and FMT=1.\n   There MUST be exactly one PLI contained in the FCI
        field.\n"
      - contents:
        - "6.3.1.1.  Semantics\n   With the Picture Loss Indication message, a decoder
          informs the\n   encoder about the loss of an undefined amount of coded video
          data\n   belonging to one or more pictures.  When used in conjunction with
          any\n   video coding scheme that is based on inter-picture prediction, an\n
          \  encoder that receives a PLI becomes aware that the prediction chain\n
          \  may be broken.  The sender MAY react to a PLI by transmitting an\n   intra-picture
          to achieve resynchronization (making this message\n   effectively similar
          to the FIR message as defined in [6]); however,\n   the sender MUST consider
          congestion control as outlined in Section 7,\n   which MAY restrict its
          ability to send an intra frame.\n   Other RTP payload specifications such
          as RFC 2032 [6] already define\n   a feedback mechanism for some for certain
          codecs.  An application\n   supporting both schemes MUST use the feedback
          mechanism defined in\n   this specification when sending feedback.  For
          backward compatibility\n   reasons, such an application SHOULD also be capable
          to receive and\n   react to the feedback scheme defined in the respective
          RTP payload\n   format, if this is required by that payload format.\n"
        title: 6.3.1.1.  Semantics
      - contents:
        - "6.3.1.2.  Message Format\n   PLI does not require parameters.  Therefore,
          the length field MUST be\n   2, and there MUST NOT be any Feedback Control
          Information.\n   The semantics of this FB message is independent of the
          payload type.\n"
        title: 6.3.1.2.  Message Format
      - contents:
        - "6.3.1.3.  Timing Rules\n   The timing follows the rules outlined in Section
          3.  In systems that\n   employ both PLI and other types of feedback, it
          may be advisable to\n   follow the Regular RTCP RR timing rules for PLI,
          since PLI is not as\n   delay critical as other FB types.\n"
        title: 6.3.1.3.  Timing Rules
      - contents:
        - "6.3.1.4.  Remarks\n   PLI messages typically trigger the sending of full
          intra-pictures.\n   Intra-pictures are several times larger then predicted
          (inter-)\n   pictures.  Their size is independent of the time they are generated.\n
          \  In most environments, especially when employing bandwidth-limited\n   links,
          the use of an intra-picture implies an allowed delay that is a\n   significant
          multitude of the typical frame duration.  An example: If\n   the sending
          frame rate is 10 fps, and an intra-picture is assumed to\n   be 10 times
          as big as an inter-picture, then a full second of latency\n   has to be
          accepted.  In such an environment, there is no need for a\n   particular
          short delay in sending the FB message.  Hence, waiting for\n   the next
          possible time slot allowed by RTCP timing rules as per [2]\n   with Tmin=0
          does not have a negative impact on the system\n   performance.\n"
        title: 6.3.1.4.  Remarks
      title: 6.3.1.  Picture Loss Indication (PLI)
    - contents:
      - "6.3.2.  Slice Loss Indication (SLI)\n   The SLI FB message is identified
        by PT=PSFB and FMT=2.\n   The FCI field MUST contain at least one and MAY
        contain more than one\n   SLI.\n"
      - contents:
        - "6.3.2.1.  Semantics\n   With the Slice Loss Indication, a decoder can inform
          an encoder that\n   it has detected the loss or corruption of one or several
          consecutive\n   macroblock(s) in scan order (see below).  This FB message
          MUST NOT be\n   used for video codecs with non-uniform, dynamically changeable\n
          \  macroblock sizes such as H.263 with enabled Annex Q.  In such a case,\n
          \  an encoder cannot always identify the corrupted spatial region.\n"
        title: 6.3.2.1.  Semantics
      - contents:
        - "6.3.2.2.  Format\n   The Slice Loss Indication uses one additional FCI
          field, the content\n   of which is depicted in Figure 6.  The length of
          the FB message MUST\n   be set to 2+n, with n being the number of SLIs contained
          in the FCI\n   field.\n    0                   1                   2                   3\n
          \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |            First        |        Number           | PictureID |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \           Figure 6: Syntax of the Slice Loss Indication (SLI)\n   First:
          13 bits\n      The macroblock (MB) address of the first lost macroblock.
          \ The MB\n      numbering is done such that the macroblock in the upper
          left\n      corner of the picture is considered macroblock number 1 and
          the\n      number for each macroblock increases from left to right and then\n
          \     from top to bottom in raster-scan order (such that if there is a\n
          \     total of N macroblocks in a picture, the bottom right macroblock\n
          \     is considered macroblock number N).\n   Number: 13 bits\n      The
          number of lost macroblocks, in scan order as discussed above.\n   PictureID:
          6 bits\n      The six least significant bits of the codec-specific identifier\n
          \     that is used to reference the picture in which the loss of the\n      macroblock(s)
          has occurred.  For many video codecs, the PictureID\n      is identical
          to the Temporal Reference.\n   The applicability of this FB message is limited
          to a small set of\n   video codecs; therefore, no explicit payload type
          information is\n   provided.\n"
        title: 6.3.2.2.  Format
      - contents:
        - "6.3.2.3.  Timing Rules\n   The efficiency of algorithms using the Slice
          Loss Indication is\n   reduced greatly when the Indication is not transmitted
          in a timely\n   fashion.  Motion compensation propagates corrupted pixels
          that are\n   not reported as being corrupted.  Therefore, the use of the
          algorithm\n   discussed in Section 3 is highly recommended.\n"
        title: 6.3.2.3.  Timing Rules
      - contents:
        - "6.3.2.4.  Remarks\n   The term Slice is defined and used here in the sense
          of MPEG-1 -- a\n   consecutive number of macroblocks in scan order.  More
          recent video\n   coding standards sometimes have a different understanding
          of the term\n   Slice.  In H.263 (1998), for example, a concept known as
          \"rectangular\n   slice\" exists.  The loss of one rectangular slice may
          lead to the\n   necessity of sending more than one SLI in order to precisely
          identify\n   the region of lost/damaged MBs.\n   The first field of the
          FCI defines the first macroblock of a picture\n   as 1 and not, as one could
          suspect, as 0.  This was done to align\n   this specification with the comparable
          mechanism available in ITU-T\n   Rec. H.245 [24].  The maximum number of
          macroblocks in a picture\n   (2**13 or 8192) corresponds to the maximum
          picture sizes of most of\n   the ITU-T and ISO/IEC video codecs.  If future
          video codecs offer\n   larger picture sizes and/or smaller macroblock sizes,
          then an\n   additional FB message has to be defined.  The six least significant\n
          \  bits of the Temporal Reference field are deemed to be sufficient to\n
          \  indicate the picture in which the loss occurred.\n   The reaction to
          an SLI is not part of this specification.  One\n   typical way of reacting
          to an SLI is to use intra refresh for the\n   affected spatial region.\n
          \  Algorithms were reported that keep track of the regions affected by\n
          \  motion compensation, in order to allow for a transmission of Intra\n
          \  macroblocks to all those areas, regardless of the timing of the FB\n
          \  (see H.263 (2000) Appendix I [17] and [15]).  Although the timing of\n
          \  the FB is less critical when those algorithms are used than if they\n
          \  are not, it has to be observed that those algorithms correct large\n
          \  parts of the picture and, therefore, have to transmit much higher\n   data
          volume in case of delayed FBs.\n"
        title: 6.3.2.4.  Remarks
      title: 6.3.2.  Slice Loss Indication (SLI)
    - contents:
      - "6.3.3.  Reference Picture Selection Indication (RPSI)\n   The RPSI FB message
        is identified by PT=PSFB and FMT=3.\n   There MUST be exactly one RPSI contained
        in the FCI field.\n"
      - contents:
        - "6.3.3.1.  Semantics\n   Modern video coding standards such as MPEG-4 visual
          version 2 [16] or\n   H.263 version 2 [17] allow using older reference pictures
          than the\n   most recent one for predictive coding.  Typically, a first-in-first-\n
          \  out queue of reference pictures is maintained.  If an encoder has\n   learned
          about a loss of encoder-decoder synchronicity, a known-as-\n   correct reference
          picture can be used.  As this reference picture is\n   temporally further
          away then usual, the resulting predictively coded\n   picture will use more
          bits.\n   Both MPEG-4 and H.263 define a binary format for the \"payload\"
          of an\n   RPSI message that includes information such as the temporal ID
          of the\n   damaged picture and the size of the damaged region.  This bit
          string\n   is typically small (a couple of dozen bits), of variable length,
          and\n   self-contained, i.e., contains all information that is necessary
          to\n   perform reference picture selection.\n   Both MPEG-4 and H.263 allow
          the use of RPSI with positive feedback\n   information as well.  That is,
          pictures (or Slices) are reported that\n   were decoded without error.  Note
          that any form of positive feedback\n   MUST NOT be used when in a multiparty
          session (reporting positive\n   feedback about individual reference pictures
          at RTCP intervals is not\n   expected to be of much use anyway).\n"
        title: 6.3.3.1.  Semantics
      - contents:
        - "6.3.3.2.  Format\n   The FCI for the RPSI message follows the format depicted
          in Figure 7:\n    0                   1                   2                   3\n
          \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |      PB       |0| Payload Type|    Native RPSI bit string     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |   defined per codec          ...                | Padding (0) |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  Figure 7: Syntax of the Reference Picture Selection Indication (RPSI)\n
          \  PB: 8 bits\n      The number of unused bits required to pad the length
          of the RPSI\n      message to a multiple of 32 bits.\n   0:  1 bit\n      MUST
          be set to zero upon transmission and ignored upon reception.\n   Payload
          Type: 7 bits\n      Indicates the RTP payload type in the context of which
          the native\n      RPSI bit string MUST be interpreted.\n   Native RPSI bit
          string: variable length\n      The RPSI information as natively defined
          by the video codec.\n   Padding: #PB bits\n      A number of bits set to
          zero to fill up the contents of the RPSI\n      message to the next 32-bit
          boundary.  The number of padding bits\n      MUST be indicated by the PB
          field.\n"
        title: 6.3.3.2.  Format
      - contents:
        - "6.3.3.3.  Timing Rules\n   RPSI is even more critical to delay than algorithms
          using SLI.  This\n   is because the older the RPSI message is, the more
          bits the encoder\n   has to spend to re-establish encoder-decoder synchronicity.
          \ See [15]\n   for some information about the overhead of RPSI for certain
          bit\n   rate/frame rate/loss rate scenarios.\n   Therefore, RPSI messages
          should typically be sent as soon as\n   possible, employing the algorithm
          of Section 3.\n"
        title: 6.3.3.3.  Timing Rules
      title: 6.3.3.  Reference Picture Selection Indication (RPSI)
    title: 6.3.  Payload-Specific Feedback Messages
  - contents:
    - "6.4.  Application Layer Feedback Messages\n   Application layer FB messages
      are a special case of payload-specific\n   messages and are identified by PT=PSFB
      and FMT=15.  There MUST be\n   exactly one application layer FB message contained
      in the FCI field,\n   unless the application layer FB message structure itself
      allows for\n   stacking (e.g., by means of a fixed size or explicit length\n
      \  indicator).\n   These messages are used to transport application-defined
      data\n   directly from the receiver's to the sender's application.  The data\n
      \  that is transported is not identified by the FB message.  Therefore,\n   the
      application MUST be able to identify the message payload.\n   Usually, applications
      define their own set of messages, e.g., NEWPRED\n   messages in MPEG-4 [16]
      (carried in RTP packets according to RFC 3016\n   [23]) or FB messages in H.263/Annex
      N, U [17] (packetized as per RFC\n   2429 [14]).  These messages do not need
      any additional information\n   from the RTCP message.  Thus, the application
      message is simply\n   placed into the FCI field as follows and the length field
      is set\n   accordingly.\n   Application Message (FCI): variable length\n      This
      field contains the original application message that should\n      be transported
      from the receiver to the source.  The format is\n      application dependent.
      \ The length of this field is variable.  If\n      the application data is not
      32-bit aligned, padding bits and bytes\n      MUST be added to achieve 32-bit
      alignment.  Identification of\n      padding is up to the application layer
      and not defined in this\n      specification.\n   The application layer FB message
      specification MUST define whether or\n   not the message needs to be interpreted
      specifically in the context\n   of a certain codec (identified by the RTP payload
      type).  If a\n   reference to the payload type is required for proper processing,
      the\n   application layer FB message specification MUST define a way to\n   communicate
      the payload type information as part of the application\n   layer FB message
      itself.\n"
    title: 6.4.  Application Layer Feedback Messages
  title: 6.  Format of RTCP Feedback Messages
- contents:
  - "7.  Early Feedback and Congestion Control\n   In the previous sections, the FB
    messages were defined as well as the\n   timing rules according to which to send
    these messages.  The way to\n   react to the feedback received depends on the
    application using the\n   feedback mechanisms and hence is beyond the scope of
    this document.\n   However, across all applications, there is a common requirement
    for\n   (TCP-friendly) congestion control on the media stream as defined in\n
    \  [1] and [2] when operating in a best-effort network environment.\n   It should
    be noted that RTCP feedback itself is insufficient for\n   congestion control
    purposes as it is likely to operate at much slower\n   timescales than other transport
    layer feedback mechanisms (that\n   usually operate in the order of RTT).  Therefore,
    additional\n   mechanisms are required to perform proper congestion control.\n
    \  A congestion control algorithm that shares the available bandwidth\n   reasonably
    fairly with competing TCP connections, e.g., TFRC [7],\n   MUST be used to determine
    the data rate for the media stream within\n   the bounds of the RTP sender's and
    the media session's capabilities\n   if the RTP/AVPF session is transmitted in
    a best-effort environment.\n"
  title: 7.  Early Feedback and Congestion Control
- contents:
  - "8.  Security Considerations\n   RTP packets transporting information with the
    proposed payload format\n   are subject to the security considerations discussed
    in the RTP\n   specification [1] and in the RTP/AVP profile specification [2].
    \ This\n   profile does not specify any additional security services.\n   This
    profile modifies the timing behavior of RTCP and eliminates the\n   minimum RTCP
    interval of five seconds and allows for earlier feedback\n   to be provided by
    receivers.  Group members of the associated RTP\n   session (possibly pretending
    to represent a large number of entities)\n   may disturb the operation of RTCP
    by sending large numbers of RTCP\n   packets thereby reducing the RTCP bandwidth
    available for Regular\n   RTCP reporting as well as for Early FB messages.  (Note
    that an\n   entity need not be a member of a multicast group to cause these\n
    \  effects.)  Similarly, malicious members may send very large RTCP\n   messages,
    thereby increasing the avg_rtcp_size variable and reducing\n   the effectively
    available RTCP bandwidth.\n   Feedback information may be suppressed if unknown
    RTCP feedback\n   packets are received.  This introduces the risk of a malicious
    group\n   member reducing Early feedback by simply transmitting payload-\n   specific
    RTCP feedback packets with random contents that are not\n   recognized by any
    receiver (so they will suppress feedback) or by the\n   sender (so no repair actions
    will be taken).\n   A malicious group member can also report arbitrary high loss
    rates in\n   the feedback information to make the sender throttle the data\n   transmission
    and increase the amount of redundancy information or\n   take other action to
    deal with the pretended packet loss (e.g., send\n   fewer frames or decrease audio/video
    quality).  This may result in a\n   degradation of the quality of the reproduced
    media stream.\n   Finally, a malicious group member can act as a large number
    of group\n   members and thereby obtain an artificially large share of the Early\n
    \  feedback bandwidth and reduce the reactivity of the other group\n   members
    -- possibly even causing them to no longer operate in\n   Immediate or Early feedback
    mode and thus undermining the whole\n   purpose of this profile.\n   Senders as
    well as receivers SHOULD behave conservatively when\n   observing strange reporting
    behavior.  For excessive failure\n   reporting from one or a few receivers, the
    sender MAY decide to no\n   longer consider this feedback when adapting its transmission
    behavior\n   for the media stream.  In any case, senders and receivers SHOULD\n
    \  still adhere to the maximum RTCP bandwidth but make sure that they\n   are
    capable of transmitting at least regularly scheduled RTCP\n   packets.  Senders
    SHOULD carefully consider how to adjust their\n   transmission bandwidth when
    encountering strange reporting behavior;\n   they MUST NOT increase their transmission
    bandwidth even if ignoring\n   suspicious feedback.\n   Attacks using false RTCP
    packets (Regular as well as Early ones) can\n   be avoided by authenticating all
    RTCP messages.  This can be achieved\n   by using the AVPF profile together with
    the Secure RTP profile as\n   defined in [22]; as a prerequisite, an appropriate
    combination of\n   those two profiles (an \"SAVPF\") is being specified [21].
    \ Note that,\n   when employing group authentication (as opposed to source\n   authentication),
    the aforementioned attacks may be carried out by\n   malicious or malfunctioning
    group members in possession of the right\n   keying material.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  IANA Considerations\n   The following contact information shall be used for
    all registrations\n   included here:\n     Contact:      Joerg Ott\n                   mailto:jo@acm.org\n
    \                  tel:+358-9-451-2460\n   The feedback profile as an extension
    to the profile for audio-visual\n   conferences with minimal control has been
    registered for the Session\n   Description Protocol (specifically the type \"proto\"):
    \"RTP/AVPF\".\n   SDP Protocol (\"proto\"):\n     Name:               RTP/AVPF\n
    \    Long form:          Extended RTP Profile with RTCP-based Feedback\n     Type
    of name:       proto\n     Type of attribute:  Media level only\n     Purpose:
    \           RFC 4585\n     Reference:          RFC 4585\n   SDP Attribute (\"att-field\"):\n
    \    Attribute name:     rtcp-fb\n     Long form:          RTCP Feedback parameter\n
    \    Type of name:       att-field\n     Type of attribute:  Media level only\n
    \    Subject to charset: No\n     Purpose:            RFC 4585\n     Reference:
    \         RFC 4585\n     Values:             See this document and registrations
    below\n   A new registry has been set up for the \"rtcp-fb\" attribute, with the\n
    \  following registrations created initially: \"ack\", \"nack\", \"trr-int\",\n
    \  and \"app\" as defined in this document.\n   Initial value registration for
    the attribute \"rtcp-fb\"\n     Value name:     ack\n     Long name:      Positive
    acknowledgement\n     Reference:      RFC 4585.\n     Value name:     nack\n     Long
    name:      Negative Acknowledgement\n     Reference:      RFC 4585.\n     Value
    name:     trr-int\n     Long name:      Minimal receiver report interval\n     Reference:
    \     RFC 4585.\n     Value name:     app\n     Long name:      Application-defined
    parameter\n     Reference:      RFC 4585.\n   Further entries may be registered
    on a first-come first-serve basis.\n   Each new registration needs to indicate
    the parameter name and the\n   syntax of possible additional arguments.  For each
    new registration,\n   it is mandatory that a permanent, stable, and publicly accessible\n
    \  document exists that specifies the semantics of the registered\n   parameter,
    the syntax and semantics of its parameters as well as\n   corresponding feedback
    packet formats (if needed).  The general\n   registration procedures of [3] apply.\n
    \  For use with both \"ack\" and \"nack\", a joint sub-registry has been set\n
    \  up that initially registers the following values:\n   Initial value registration
    for the attribute values \"ack\" and \"nack\":\n     Value name:     sli\n     Long
    name:      Slice Loss Indication\n     Usable with:    nack\n     Reference:      RFC
    4585.\n     Value name:     pli\n     Long name:      Picture Loss Indication\n
    \    Usable with:    nack\n     Reference:      RFC 4585.\n     Value name:     rpsi\n
    \    Long name:      Reference Picture Selection Indication\n     Usable with:
    \   ack, nack\n     Reference:      RFC 4585.\n     Value name:     app\n     Long
    name:      Application layer feedback\n     Usable with:    ack, nack\n     Reference:
    \     RFC 4585.\n   Further entries may be registered on a first-come first-serve
    basis.\n   Each registration needs to indicate the parameter name, the syntax
    of\n   possible additional arguments, and whether the parameter is\n   applicable
    to \"ack\" or \"nack\" feedback or both or some different\n   \"rtcp-fb\" attribute
    parameter.  For each new registration, it is\n   mandatory that a permanent, stable,
    and publicly accessible document\n   exists that specifies the semantics of the
    registered parameter, the\n   syntax and semantics of its parameters as well as
    corresponding\n   feedback packet formats (if needed).  The general registration\n
    \  procedures of [3] apply.\n   Two RTCP Control Packet Types: for the class of
    transport layer FB\n   messages (\"RTPFB\") and for the class of payload-specific
    FB messages\n   (\"PSFB\").  Per Section 6, RTPFB=205 and PSFB=206 have been added
    to\n   the RTCP registry.\n   RTP RTCP Control Packet types (PT):\n     Name:
    \         RTPFB\n     Long name:     Generic RTP Feedback\n     Value:         205\n
    \    Reference:     RFC 4585.\n     Name:          PSFB\n     Long name:     Payload-specific\n
    \    Value:         206\n     Reference:     RFC 4585.\n   As AVPF defines additional
    RTCP payload types, the corresponding\n   \"reserved\" RTP payload type space
    (72-76, as defined in [2]), has\n   been expanded accordingly.\n   A new sub-registry
    has been set up for the FMT values for both the\n   RTPFB payload type and the
    PSFB payload type, with the following\n   registrations created initially:\n   Within
    the RTPFB range, the following two format (FMT) values are\n   initially registered:\n
    \    Name:           Generic NACK\n     Long name:      Generic negative acknowledgement\n
    \    Value:          1\n     Reference:      RFC 4585.\n     Name:           Extension\n
    \    Long name:      Reserved for future extensions\n     Value:          31\n
    \    Reference:      RFC 4585.\n   Within the PSFB range, the following five format
    (FMT) values are\n   initially registered:\n     Name:           PLI\n     Long
    name:      Picture Loss Indication\n     Value:          1\n     Reference:      RFC
    4585.\n     Name:           SLI\n     Long name:      Slice Loss Indication\n
    \    Value:          2\n     Reference:      RFC 4585.\n     Name:           RPSI\n
    \    Long name:      Reference Picture Selection Indication\n     Value:          3\n
    \    Reference:      RFC 4585.\n     Name:           AFB\n     Long name:      Application
    Layer Feedback\n     Value:          15\n     Reference:      RFC 4585.\n     Name:
    \          Extension\n     Long name:      Reserved for future extensions.\n     Value:
    \         31\n     Reference:      RFC 4585.\n   Further entries may be registered
    following the \"Specification\n   Required\" rules as defined in RFC 2434 [9].
    \ Each registration needs\n   to indicate the FMT value, if there is a specific
    FB message to go\n   into the FCI field, and whether or not multiple FB messages
    may be\n   stacked in a single FCI field.  For each new registration, it is\n
    \  mandatory that a permanent, stable, and publicly accessible document\n   exists
    that specifies the semantics of the registered parameter as\n   well as the syntax
    and semantics of the associated FB message (if\n   any).  The general registration
    procedures of [3] apply.\n"
  title: 9.  IANA Considerations
- contents:
  - "10.  Acknowledgements\n   This document is a product of the Audio-Visual Transport
    (AVT)\n   Working Group of the IETF.  The authors would like to thank Steve\n
    \  Casner and Colin Perkins for their comments and suggestions as well\n   as
    for their responsiveness to numerous questions.  The authors would\n   also like
    to particularly thank Magnus Westerlund for his review and\n   his valuable suggestions
    and Shigeru Fukunaga for the contributions\n   on FB message formats and semantics.\n
    \  We would also like to thank Andreas Buesching and people at Panasonic\n   for
    their simulations and the first independent implementations of\n   the feedback
    profile.\n"
  title: 10.  Acknowledgements
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [1]  Schulzrinne, H., Casner, S., Frederick,
      R., and V. Jacobson,\n        \"RTP: A Transport Protocol for Real-Time Applications\",
      STD 64,\n        RFC 3550, July 2003.\n   [2]  Schulzrinne, H. and S. Casner,
      \"RTP Profile for Audio and Video\n        Conferences with Minimal Control\",
      STD 65, RFC 3551, July 2003.\n   [3]  Handley, M., Jacobson, V., and C. Perkins,
      \"SDP: Session\n        Description Protocol\", RFC 4566, July 2006.\n   [4]
      \ Casner, S., \"Session Description Protocol (SDP) Bandwidth\n        Modifiers
      for RTP Control Protocol (RTCP) Bandwidth\", RFC 3556,\n        July 2003.\n
      \  [5]  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\",
      BCP 14, RFC 2119, March 1997.\n   [6]  Turletti, T. and C. Huitema, \"RTP Payload
      Format for H.261 Video\n        Streams\", RFC 2032, October 1996.\n   [7]  Handley,
      M., Floyd, S., Padhye, J., and J. Widmer, \"TCP Friendly\n        Rate Control
      (TFRC): Protocol Specification\", RFC 3448, January\n        2003.\n   [8]  Rosenberg,
      J. and H. Schulzrinne, \"An Offer/Answer Model with\n        Session Description
      Protocol (SDP)\", RFC 3264, June 2002.\n   [9]  Narten, T. and H. Alvestrand,
      \"Guidelines for Writing an IANA\n        Considerations Section in RFCs\",
      BCP 26, RFC 2434, October 1998.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [10] Camarillo, G., Eriksson, G., Holler,
      J., and H. Schulzrinne,\n        \"Grouping of Media Lines in the Session Description
      Protocol\n        (SDP)\", RFC 3388, December 2002.\n   [11] Perkins, C. and
      O. Hodson, \"Options for Repair of Streaming\n        Media\", RFC 2354, June
      1998.\n   [12] Rosenberg, J. and H. Schulzrinne, \"An RTP Payload Format for\n
      \       Generic Forward Error Correction\", RFC 2733, December 1999.\n   [13]
      Perkins, C., Kouvelas, I., Hodson, O., Hardman, V., Handley, M.,\n        Bolot,
      J., Vega-Garcia, A., and S. Fosse-Parisis, \"RTP Payload\n        for Redundant
      Audio Data\", RFC 2198, September 1997.\n   [14] Bormann, C., Cline, L., Deisher,
      G., Gardos, T., Maciocco, C.,\n        Newell, D., Ott, J., Sullivan, G., Wenger,
      S., and C. Zhu, \"RTP\n        Payload Format for the 1998 Version of ITU-T
      Rec. H.263 Video\n        (H.263+)\", RFC 2429, October 1998.\n   [15] B. Girod,
      N. Faerber, \"Feedback-based error control for mobile\n        video transmission\",
      Proceedings IEEE, Vol. 87, No. 10, pp.\n        1707 - 1723, October, 1999.\n
      \  [16] ISO/IEC 14496-2:2001/Amd.1:2002, \"Information technology -\n        Coding
      of audio-visual objects - Part2: Visual\", 2001.\n   [17] ITU-T Recommendation
      H.263, \"Video Coding for Low Bit Rate\n        Communication\", November 2000.\n
      \  [18] Schulzrinne, H. and S. Petrack, \"RTP Payload for DTMF Digits,\n        Telephony
      Tones and Telephony Signals\", RFC 2833, May 2000.\n   [19] Kohler, E., Handley,
      M., and S. Floyd, \"Datagram Congestion\n        Control Protocol (DCCP)\",
      RFC 4340, March 2006.\n   [20] Handley, M., Floyd, S., Padhye, J., and J. Widmer,
      \"TCP Friendly\n        Rate Control (TFRC): Protocol Specification\", RFC 3448,
      January\n        2003.\n   [21] Ott, J. and E. Carrara, \"Extended Secure RTP
      Profile for RTCP-\n        based Feedback (RTP/SAVPF)\", Work in Progress, December
      2005.\n   [22] Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n        Norrman,
      \"The Secure Real-time Transport Protocol (SRTP)\", RFC\n        3711, March
      2004.\n   [23] Kikuchi, Y., Nomura, T., Fukunaga, S., Matsui, Y., and H.\n        Kimata,
      \"RTP Payload Format for MPEG-4 Audio/Visual Streams\",\n        RFC 3016, November
      2000.\n   [24] ITU-T Recommendation H.245, \"Control protocol for multimedia\n
      \       communication\", May 2006.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Authors' Addresses\n   Joerg Ott\n   Helsinki University of Technology (TKK)\n
    \  Networking Laboratory\n   PO Box 3000\n   FIN-02015 TKK\n   Finland\n   EMail:
    jo@acm.org\n   Stephan Wenger\n   Nokia Research Center\n   P.O. Box 100\n   33721
    Tampere\n   Finland\n   EMail: stewe@stewe.org\n   Noriyuki Sato\n   Oki Electric
    Industry Co., Ltd.\n   1-16-8 Chuo, Warabi-city, Saitama 335-8510\n   Japan\n
    \  Phone: +81 48 431 5932\n   Fax:   +81 48 431 9115\n   EMail: sato652@oki.com\n
    \  Carsten Burmeister\n   Panasonic R&D Center Germany GmbH\n   EMail: carsten.burmeister@eu.panasonic.com\n
    \  Jose Rey\n   Panasonic R&D Center Germany GmbH\n   Monzastr. 4c\n   D-63225
    Langen, Germany\n   EMail: jose.rey@eu.panasonic.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
