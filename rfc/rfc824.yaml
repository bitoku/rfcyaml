- title: __initial_text__
  contents:
  - "                      THE CRONUS VIRTUAL LOCAL NETWORK\n                    \
    \        William I. MacGregor\n                              Daniel C. Tappan\n\
    \                        Bolt Beranek and Newman Inc.\n                      \
    \         25 August 1982\n      [The purpose of this note is to describe the CRONUS\
    \ Virtual\n      Local Network, especially the addressing related features.\n\
    \      These features include a method for mapping between Internet\n      Addresses\
    \ and Local Network addresses.  This is a topic of \n      current concern in\
    \ the ARPA Internet community.  This note is\n      intended to stimulate discussion.\
    \  This is not a specification\n      of an Internet Standard.]\n      1  Purpose\
    \ and Scope\n           This note defines the Cronus (1) Virtual Local Network\n\
    \      (VLN), a facility which provides interhost message transport to\n     \
    \ the Cronus Distributed Operating System.  The VLN consists of a\n      'client\
    \ interface specification' and an 'implementation'; the\n      client interface\
    \ is expected to be available on every Cronus\n      host.  Client processes can\
    \ send and receive datagrams using\n      specific, broadcast, or multicast addressing\
    \ as defined in the\n      interface specification.\n      _______________\n \
    \     (1) The Cronus Distributed Operating System is being designed  by\n    \
    \  Bolt  Beranek  and Newman Inc., as a component of the Distributed\n      Systems\
    \ Technology Program  sponsored  by  Rome  Air  Development\n      Center.   This\
    \ work is supported by the DOS Design/Implementation\n      contract, F30602-81-C-0132.\n\
    \      DOS-26 Rev A                                Virtual Local Network\n   \
    \   RFC 824\n           From the viewpoint of other Cronus system software and\n\
    \      application programs, the VLN stands in place of a direct\n      interface\
    \ to the physical local network (PLN).  This additional\n      level of abstraction\
    \ is defined to meet two major system\n      objectives:\n        *  COMPATIBILITY.\
    \  The VLN defines a communication facility\n           which is compatible with\
    \ the Internet Protocol (IP)\n           developed by DARPA; by implication the\
    \ VLN is compatible\n           with higher-level protocols such as the Transmission\
    \ Control\n           Protocol (TCP) based on IP.\n        *  SUBSTITUTABILITY.\
    \  Cronus software built above the VLN is\n           dependent only upon the\
    \ VLN interface and not its\n           implementation.  It is possible to substitute\
    \ one physical\n           local network for another in the VLN implementation,\n\
    \           provided that the VLN interface semantics are maintained.\n      \
    \     (This note assumes the reader is familiar with the concepts\n      and terminology\
    \ of the DARPA Internet Program; reference [6] is a\n      compilation of the\
    \ important protocol specifications and other\n      documents.  Documents in\
    \ [6] of special significance here are [5]\n      and [4].)\n           The compatibility\
    \ goal is motivated by factors relating to\n      the Cronus design and its development\
    \ environment.  A large body\n      of software has evolved, and continues to\
    \ evolve, in the internet\n      community fostered by DARPA.  For example, the\
    \ compatibility goal\n      DOS-26 Rev A                                Virtual\
    \ Local Network\n      RFC 824\n      permits the Cronus design to assimilate\
    \ existing software\n      components providing electronic mail, remote terminal\
    \ access, and\n      file transfer in a straightforward manner.  In addition to\
    \ the\n      roles of such services in the Cronus system, they are needed as\n\
    \      support for the design and development process.  The prototype\n      Cronus\
    \ cluster, called the Advanced Development Model (ADM), will\n      be connected\
    \ to the ARPANET, and it is important that the ADM\n      conform to the standards\
    \ and conventions of the DARPA internet\n      community.\n           The substitutability\
    \ goal reflects the belief that different\n      instances of the Cronus cluster\
    \ will utilize different physical\n      local networks.  Substitution may be\
    \ desirable for reasons of\n      cost, performance, or other properties of the\
    \ physical local\n      network such as mechanical and electrical ruggedness.\
    \  The\n      existence of the VLN interface definition suggests a procedure\n\
    \      for physical local network substitution, namely, re-\n      implementation\
    \ of the VLN interface on each Cronus host.  The\n      implementations will be\
    \ functionally equivalent but can be\n      expected to differ along dimensions\
    \ not specified by the VLN\n      interface definition.  Since different physical\
    \ local networks\n      DOS-26 Rev A                                Virtual Local\
    \ Network\n      RFC 824\n      are often quite similar, the task of \"re-implementing\"\
    \ the VLN is\n      probably much less difficult than building the first\n   \
    \   implementation; small modifications to an existing, exemplary\n      implementation\
    \ may suffice.\n           The concepts of the Cronus VLN, and in particular the\
    \ VLN\n      implementation based on Ethernet described in Section 4, have\n \
    \     significance beyond their application in the Cronus system.  Many\n    \
    \  organizations are now beginning to install local networks and\n      immediately\
    \ confront the compatibility issue.  For a number of\n      universities, for\
    \ example, the compatibility problem is precisely\n      the interoperability\
    \ of the Ethernet and the DARPA internet.\n      Although perhaps less immediate,\
    \ the substitutability issue will\n      also be faced by other organizations\
    \ as local network technology\n      advances, and the transfer of existing system\
    \ and application\n      software to a new physical local network base becomes\
    \ an economic\n      necessity.\n           Figure 1 shows the position of the\
    \ VLN in the lowest layers\n      of the Cronus protocol hierarchy.  The VLN interface\n\
    \      specification given in the next section is actually a meta-\n      specification,\
    \ like the specifications of IP and TCP, in that the\n      DOS-26 Rev A     \
    \                           Virtual Local Network\n      RFC 824\n      programming\
    \ details of the interface are host-dependent and\n      unspecified.  The precise\
    \ representation of the VLN data\n      structures and operations can be expected\
    \ to vary from machine to\n      machine, but the functional capabilities of the\
    \ interface are the\n      same regardless of the host.\n                    \
    \                 .\n                                     .\n                \
    \    |                .                  |\n                    |-----------------------------------|\n\
    \                    | Transmission  |  User      |      |\n                 \
    \   | Control       |  Datagram  | ...  |\n                    | Protocol    \
    \  |  Protocol  |      |\n                    |-----------------------------------|\n\
    \                    |        Internet Protocol          |\n                 \
    \   |              (IP)                 |\n                    |-----------------------------------|\n\
    \                    |      Virtual Local Network        |\n                 \
    \   |             (VLN)                 |\n                    |-----------------------------------|\n\
    \                    |      Physical Local Network       |\n                 \
    \   |       (PLN, e.g. Ethernet)        |\n                     -----------------------------------\n\
    \                     Figure 1 . Cronus Protocol Layering\n           The VLN\
    \ is completely compatible with the Internet Protocol\n      as defined in [5],\
    \ i.e., no changes or extensions to IP are\n      DOS-26 Rev A               \
    \                 Virtual Local Network\n      RFC 824\n      required to implement\
    \ IP above the VLN.  In fact, this was a\n      requirement on the VLN design;\
    \ a consequence was the timely\n      completion of the VLN design and avoidance\
    \ of the lengthy delays\n      which often accompany attempts to change or extend\
    \ a widely-\n      accepted standard.\n           The following sections define\
    \ the VLN client interface and\n      illustrate how the VLN implementation might\
    \ be organized for an\n      Ethernet PLN.\n      2  The VLN-to-Client Interface\n\
    \           The VLN layer provides a datagram transport service among\n      hosts\
    \ in a Cronus 'cluster', and between these hosts and other\n      hosts in the\
    \ DARPA internet.  The hosts belonging to a cluster\n      are directly attached\
    \ to the same physical local network, but the\n      VLN hides the peculiarities\
    \ of the PLN from other Cronus\n      software.  Communication with hosts outside\
    \ the cluster is\n      achieved through some number of 'internet gateways', shown\
    \ in\n      Figure 2, connected to the cluster.  The VLN layer is responsible\n\
    \      DOS-26 Rev A                                Virtual Local Network\n   \
    \   RFC 824\n      for routing datagrams to a gateway if they are addressed to\
    \ hosts\n      outside the cluster, and for delivering incoming datagrams to the\n\
    \      appropriate VLN host.  A VLN is viewed as a network in the\n      internet,\
    \ and thus has an internet network number.  (2)\n      _______________\n     \
    \ (2) The PLN could possess its own network number, different  from\n      the\
    \  network  number  of  the  VLN  it implements, or the network\n      numbers\
    \ could be the same.  Different  numbers  would  complicate\n      the  gateways\
    \  somewhat,  but  are  consistent  with  the VLN and\n      internet models.\n\
    \      DOS-26 Rev A                                Virtual Local Network\n   \
    \   RFC 824\n                     to internet\n                      network X\n\
    \                          |\n                          |\n            ----- \
    \      -----       -----       -----\n           |host1|     |gtwyA|     |host2|\
    \     |host3|\n            -----       -----       -----       -----\n       \
    \       |           |           |           |\n          --------------------------------------------------\n\
    \                  |           |           |           |\n                -----\
    \       -----       -----       -----\n               |host4|     |host5|    \
    \ |gtwyB|     |host6|\n                -----       -----       -----       -----\n\
    \                                          |\n                               \
    \           |\n                                     to internet\n            \
    \                          network Y\n                 Figure 2 . A Virtual Local\
    \ Network Cluster\n           The VLN interface will have one client process on\
    \ each host,\n      normally the host's IP implementation.  The one \"client process\"\
    \n      may, in fact, be composed of several host processes; but the VLN\n   \
    \   layer will not distinguish among them, i.e., it performs no\n      multiplexing/demultiplexing\
    \ function.  (3)\n      _______________\n      (3) In the  Cronus  system,  multiplexing/demultiplexing\
    \  of  the\n      datagram  stream  will be performed above the IP level, primarily\n\
    \      DOS-26 Rev A                                Virtual Local Network\n   \
    \   RFC 824\n           The structure of messages which pass through the VLN\n\
    \      interface between client processes and the VLN implementation is\n    \
    \  identical to the structure of internet datagrams constructed in\n      accordance\
    \ with the Internet Protocol.  Any representation for\n      internet datagrams\
    \ is also a satisfactory representation for VLN\n      datagrams, and in practice\
    \ this representation will vary from\n      host to host.  The VLN definition\
    \ merely asserts that there is\n      ONE well-defined representation for internet\
    \ datagrams, and thus\n      VLN datagrams, on any host supporting the VLN interface.\
    \  The\n      argument name \"Datagram\" in the VLN operation definitions below\n\
    \      refers to this well-defined but host-dependent datagram\n      representation.\n\
    \           The VLN guarantees that a datagram of 576 or fewer octets\n      (i.e.,\
    \ the Total Length field of its internet header is less than\n      or equal to\
    \ 576) can be transferred between any two VLN clients.\n      Larger datagrams\
    \ may be transferred between some client pairs.\n      Clients should generally\
    \ avoid sending datagrams exceeding 576\n      octets unless there is clear need\
    \ to do so, and the sender is\n      certain that all hosts involved can process\
    \ the outsize\n      _______________\n      in conjunction with Cronus object\
    \ management.\n      DOS-26 Rev A                                Virtual Local\
    \ Network\n      RFC 824\n      datagrams.\n           The representation of an\
    \ VLN datagram is unconstrained by\n      the VLN specification, and the VLN implementor\
    \ has many\n      reasonable alternatives.  Perhaps the simplest representation\
    \ is\n      a contiguous block of memory locations, either passed by\n      reference\
    \ or copied across the VLN-to-client interface.  It may\n      be beneficial to\
    \ represent a datagram as a linked list instead,\n      however, in order to reduce\
    \ the number of times datagram text is\n      copied as the datagram passes through\
    \ the protocol hierarchy at\n      the sending and receiving hosts.  When a message\
    \ is passing down\n      (towards the physical layer) it is successively \"wrapped\"\
    \ by the\n      protocol layers.  Addition of the \"wrapper\"--header and trailer\n\
    \      fields--can be done without copying the message text if the\n      header\
    \ and trailer can be linked into the message representation.\n      In the particular,\
    \ when an IP implementation is the client of the\n      VLN layer a linked structure\
    \ is also desirable to permit\n      'reassembly' of datagrams (the merger of\
    \ several 'fragment'\n      datagrams into one larger datagram) inside the IP\
    \ layer without\n      copying data repeatedly.  If properly designed, one linked\
    \ list\n      structure can speed up both wrapping/unwrapping and datagram\n \
    \     DOS-26 Rev A                                Virtual Local Network\n    \
    \  RFC 824\n      reassembly in the IP layer.\n           Although the structure\
    \ of internet and VLN datagrams is\n      identical, the VLN-to-client interface\
    \ places its own\n      interpretation on internet header fields, and differs\
    \ from the\n      IP-to-client interface in significant respects:\n        1.\
    \  The VLN layer utilizes only the Source Address, Destination\n            Address,\
    \ Total Length, and Header Checksum fields in the\n            internet datagram;\
    \ other fields are accurately transmitted\n            from the sending to the\
    \ receiving client.\n        2.  Internet datagram fragmentation and reassembly\
    \ is not\n            performed in the VLN layer, nor does the VLN layer\n   \
    \         implement any aspect of internet datagram option\n            processing.\n\
    \        3.  At the VLN interface, a special interpretation is placed\n      \
    \      upon the Destination Address in the internet header, which\n          \
    \  allows VLN broadcast and multicast addresses to be encoded\n            in\
    \ the internet address structure.\n        4.  With high probability, duplicate\
    \ delivery of datagrams sent\n            between hosts on the same VLN does not\
    \ occur.\n        5.  Between two VLN clients S and R in the same Cronus cluster,\n\
    \            the sequence of datagrams received by R is a subsequence of\n   \
    \         the sequence sent by S to R; a stronger sequencing property\n      \
    \      holds for broadcast and multicast addressing.\n      DOS-26 Rev A     \
    \                           Virtual Local Network\n      RFC 824\n      2.1  VLN\
    \ Addressing\n           In the DARPA internet an 'internet address' is defined\
    \ to be\n      a 32 bit quantity which is partitioned into two fields, a network\n\
    \      number and a 'local address'.  VLN addresses share this basic\n      structure,\
    \ and are perceived by hosts outside the Cronus system\n      as ordinary internet\
    \ addresses.  A sender outside a Cronus\n      cluster may direct an internet\
    \ datagram into the cluster by\n      specifying the VLN network number in the\
    \ network number field of\n      the destination address; senders in the cluster\
    \ may transmit\n      messages to internet hosts outside the cluster in a similar\
    \ way.\n      The VLN in a Cronus cluster, however, attaches special meaning to\n\
    \      the local address field of a VLN address, as explained below.\n       \
    \    Each network in the internet community is assigned a\n      'class', either\
    \ A, B, or C, and a network number in its class.\n      The partitioning of the\
    \ 32 bit internet address into network\n      number and local address fields\
    \ is a function of the class of the\n      network number, as follows:\n     \
    \ DOS-26 Rev A                                Virtual Local Network\n      RFC\
    \ 824\n                               Width of            Width of\n         \
    \                    Network Number      Local Address\n              Class A\
    \            7 bits             24 bits\n              Class B           14 bits\
    \             16 bits\n              Class C           21 bits              8\
    \ bits\n                      Table 1. Internet Address Formats\n      The bits\
    \ not included in the network number or local address\n      fields encode the\
    \ network class, e.g., a 3 bit prefix of 110\n      designates a class C address\
    \ (see [4]).\n           The interpretation of the local address field of an internet\n\
    \      address is the responsibility of the network designated in the\n      network\
    \ number field.  In the ARPANET (a class A network, with\n      network number\
    \ 10) the local address refers to a specific\n      physical host; this is the\
    \ most common use of the local address\n      field.  VLN addresses, in contrast,\
    \ may refer to all hosts\n      (broadcast) or groups of hosts (multicast) in\
    \ a Cronus cluster,\n      as well as specific hosts inside or outside of the\
    \ Cluster.\n      Specific, broadcast, and multicast addresses are all encoded\
    \ in\n      DOS-26 Rev A                                Virtual Local Network\n\
    \      RFC 824\n      the VLN local address field.  (4)\n           The meaning\
    \ of the local address field of a VLN address is\n      defined in the table below.\n\
    \              ADDRESS MODES         VLN LOCAL ADDRESS VALUES\n              Specific\
    \ Host             0     to  1,023\n              Multicast                 1,024\
    \ to 65,534\n              Broadcast                          65,535\n       \
    \               Table 2. VLN Local Address Modes\n      In order to represent\
    \ the full range of specific, broadcast, and\n      multicast addresses in the\
    \ local address field, a VLN network\n      should be either class A or class\
    \ B.  If a VLN is a class A\n      internet network, a VLN local address occupies\
    \ the low-order 16\n      bits of the 24 bit internet local address field, and\
    \ the upper 8\n      bits of the internet local address are zero.  If a VLN is\
    \ a class\n      _______________\n      (4) The ability of hosts outside a  Cronus\
    \  cluster  to  transmit\n      datagrams  with  VLN broadcast or multicast destination\
    \ addresses\n      into the cluster may be restricted by the cluster gateway(s),\
    \ for\n      reasons of system security.\n      DOS-26 Rev A                 \
    \               Virtual Local Network\n      RFC 824\n      B network, the internet\
    \ local address field is fully utilized by\n      the VLN local address.\n   \
    \   2.2  VLN Operations\n           There are seven operations defined at the\
    \ VLN interface and\n      available to the VLN client on each host.  An implementation\
    \ of\n      the VLN interface has wide lattitude in the presentation of these\n\
    \      operations to the client; for example, the operations may or may\n    \
    \  not return error codes.\n           A VLN implementation may define the operations\
    \ to occur\n      synchronously or asynchronously with respect to the client's\n\
    \      computation.  We expect that the ResetVLNInterface, MyVLNAddress,\n   \
    \   SendVLNDatagram, PurgeMAddresses, AttendMAddress, and\n      IgnoreMAddress\
    \ operations will usually be synchronous with\n      respect to the client, but\
    \ ReceiveVLNDatagram will usually be\n      asynchronous, i.e., the client may\
    \ initiate the operation,\n      continue to compute, and at some later time be\
    \ notified that a\n      datagram is available.  (The alternatives to asynchronous\n\
    \      DOS-26 Rev A                                Virtual Local Network\n   \
    \   RFC 824\n      ReceiveVLNDatagram are A) a blocking receive operation; and\
    \ B) a\n      non-blocking but synchronous receive operation, which returns a\n\
    \      failure code immediately if a datagram is not available.  Either\n    \
    \  alternative may satisfy particular requirements, but an\n      asynchronous\
    \ receive subsumes these and is more generally\n      useful.) At a minimum, the\
    \ client must have fully synchronous\n      access to each of the operations;\
    \ more elaborate mechanisms may\n      be provided at the option of the VLN implementation.\n\
    \      VLN OPERATIONS\n          ResetVLNInterface\n              The VLN layer\
    \ for this host is reset (e.g., for the\n              Ethernet VLN implementation\
    \ the operation ClearVPMap is\n              performed, and a frame of type \"\
    Cronus VLN\" and subtype\n              \"Mapping Update\" is broadcast; see Section\
    \ 4.2).  This\n              operation does not affect the set of attended VLN\n\
    \              multicast addresses.\n          function MyVLNAddress()\n     \
    \         Returns the specific VLN address of this host; this can\n          \
    \    always be done without communication with any other host.\n          SendVLNDatagram(Datagram)\n\
    \              When this operation completes, the VLN layer has copied\n     \
    \         the Datagram and it is either \"in transmission\" or\n             \
    \ \"delivered\", i.e., the transmitting process cannot assume\n              that\
    \ the message has been delivered when SendVLNDatagram\n      DOS-26 Rev A    \
    \                            Virtual Local Network\n      RFC 824\n          \
    \    completes.\n          ReceiveVLNDatagram(Datagram)\n              When this\
    \ operation completes, Datagram is a\n              representation of a VLN datagram\
    \ sent by a VLN client and\n              not previously received by the client\
    \ invoking\n              ReceiveVLNDatagram.\n          PurgeMAddresses()\n \
    \             When this operation completes, no VLN multicast addresses\n    \
    \          are registered with the local VLN component.\n          function AttendMAddress(MAddress)\n\
    \              If this operation returns True then MAddress, which must\n    \
    \          be a VLN multicast address, is registered as an \"alias\"\n       \
    \       for this host, and messages addressed to MAddress by VLN\n           \
    \   clients will be delivered to the client on this host.\n          IgnoreMAddress(MAddress)\n\
    \              When this operation completes, MAddress is not registered\n   \
    \           as a multicast address for the client on this host.\n           Whenever\
    \ a Cronus host comes up, ResetVLNInterface and\n      PurgeMAddresses are performed\
    \ implicitly by the VLN layer before\n      it will accept a request from the\
    \ client or incoming traffic from\n      the PLN.  They may also be invoked by\
    \ the client during normal\n      operation.  As described in Section 4.2 below,\
    \ a VLN component\n      may depend upon state information obtained dynamically\
    \ from other\n      hosts, and there is a possibility that incorrect information\n\
    \      DOS-26 Rev A                                Virtual Local Network\n   \
    \   RFC 824\n      might enter a component's state tables.  (This might happen,\
    \ for\n      example, if the PLN address of a Cronus host were changed but its\n\
    \      VLN address preserved--the old VLN-to-PLN address mappings held\n     \
    \ by other hosts would then be incorrect.) A cautious VLN client\n      could\
    \ call ResetVLNInterface at periodic intervals (every hour,\n      say) to force\
    \ the VLN component to reconstitute its dynamic\n      tables.\n           A VLN\
    \ component will place a limit on the number of\n      multicast addresses to\
    \ which it will simultaneously \"attend\"; if\n      the client attempts to register\
    \ more addresses than this,\n      AttendMAddress will return False with no other\
    \ effect.  The\n      actual limit will vary among VLN components, but it will\
    \ usually\n      be between 10 and 100 multicast addresses.  Components may\n\
    \      implement limits as large as the entire multicast address space\n     \
    \ (64,511 addresses).\n           The VLN layer does not guarantee any minimum\
    \ amount of\n      buffering for datagrams, at either the sending or receiving\n\
    \      host(s).  It does guarantee, however, that a SendVLNDatagram\n      operation\
    \ invoked by a VLN client will eventually complete; this\n      implies that datagrams\
    \ may be lost if buffering is insufficient\n      DOS-26 Rev A               \
    \                 Virtual Local Network\n      RFC 824\n      and receiving clients\
    \ are too slow.  The VLN layer will do its\n      best to discard packets for\
    \ this reason very infrequently.\n      2.3  Reliability Guarantees\n        \
    \   Guarantees are never absolute--there is always some\n      probability, however\
    \ remote, that a catastrophe will occur and a\n      promise be broken.  Nevertheless,\
    \ the concept of a guarantee is\n      still valuable, because the improbability\
    \ of a catastrophic\n      failure influences the design and cost of the recovery\
    \ mechanisms\n      needed to overcome it.  In this spirit, the word \"guarantee\"\
    \ as\n      used here implies only that the alternatives to correct function\n\
    \      (i.e., catastrophic failures) are extremely rare events.\n           The\
    \ VLN does not attempt to guarantee reliable delivery of\n      datagrams, nor\
    \ does it provide negative acknowlegements of\n      damaged or discarded datagrams.\
    \  It does guarantee that received\n      datagrams are accurate representations\
    \ of transmitted datagrams.\n           The VLN also guarantees that datagrams\
    \ will not \"replicate\"\n      during transmission, i.e., for each intended receiver,\
    \ a given\n      DOS-26 Rev A                                Virtual Local Network\n\
    \      RFC 824\n      datagram is received once or not at all.  (5)\n        \
    \   Between two VLN clients S and R in the same cluster, the\n      sequence of\
    \ datagrams received by R is a subsequence of the\n      sequence sent by S to\
    \ R, i.e., datagrams are received in order,\n      possibly with omissions.\n\
    \           A stronger sequencing property holds for broadcast and\n      multicast\
    \ transmissions.  If receivers R1 and R2 both receive\n      broadcast or multicast\
    \ datagrams D1 and D2, either they both\n      receive D1 before D2, or they both\
    \ receive D2 before D1.\n      3  Desirable Characteristics of a Physical Local\
    \ Network\n           While it is conceivable that a VLN could be implemented\
    \ on a\n      long-haul or virtual-circuit-oriented PLN, these networks are\n\
    \      generally ill-suited to the task.  The ARPANET, for example, does\n   \
    \   not support broadcast or multicast addressing modes, nor does it\n      _______________\n\
    \      (5) A protocol operating above the  VLN  layer  (e.g.,  TCP)  may\n   \
    \   employ  a  retransmission strategy; the VLN layer does nothing to\n      filter\
    \ duplicates arising in this way.\n      DOS-26 Rev A                        \
    \        Virtual Local Network\n      RFC 824\n      provide the VLN sequencing\
    \ guarantees.  If the ARPANET were the\n      base for a VLN implementation, broadcast\
    \ and multicast would have\n      to be constructed from specific addressing,\
    \ and a network-wide\n      synchronization mechanism would be required to implement\
    \ the\n      sequencing guarantees.  Although the compatibility and\n      substitutability\
    \ benefits might still be achieved, the\n      implementation would be costly,\
    \ and performance poor.\n           A good implementation base for a Cronus VLN\
    \ would be a\n      high-bandwidth local network with all or most of these\n \
    \     characteristics:\n        1.  The ability to encapsulate a VLN datagram\
    \ in a single PLN\n            datagram.\n        2.  An efficient broadcast addressing\
    \ mode.\n        3.  Natural resistance to datagram replication during\n     \
    \       transmission.\n        4.  Sequencing guarantees like those of the VLN\
    \ interface.\n        5.  A strong error-detecting code (datagram checksum).\n\
    \      Good candidates include Ethernet, the Flexible Intraconnect, and\n    \
    \  Pronet, among others.\n      DOS-26 Rev A                                Virtual\
    \ Local Network\n      RFC 824\n      4  A VLN Implementation Based on Ethernet\n\
    \           The Ethernet local network specification is the result of a\n    \
    \  collaborative effort by Digital Equipment Corp., Intel Corp., and\n      Xerox\
    \ Corp.  The Version 1.0 specification [3] was released in\n      September, 1980.\
    \ Useful background information on the Ethernet\n      internetworking model is\
    \ supplied in [2].\n           The Ethernet VLN implementation begins with the\
    \ assumption,\n      in accordance with the model developed in [2], that the addresses\n\
    \      of specific Ethernet hosts are arbitrary, 48 bit quantities, not\n    \
    \  under the control of DOS Design/Implementation Project.  The VLN\n      implementation\
    \ must, therefore, develop a strategy to map VLN\n      addresses to specific\
    \ Ethernet addresses.\n           A second important assumption is that the VLN-address-to-\n\
    \      Ethernet-address mapping should not be maintained manually in\n      each\
    \ VLN host.  Manual procedures are too cumbersome and error-\n      prone when\
    \ a local network may consist of hundreds of hosts, and\n      hosts may join\
    \ and leave the network frequently.  A protocol is\n      described below which\
    \ allows hosts to dynamically construct the\n      mapping, beginning only with\
    \ knowledge of their own VLN and\n      DOS-26 Rev A                         \
    \       Virtual Local Network\n      RFC 824\n      Ethernet host addresses.\n\
    \           The succeeding sections discuss the VLN implementation based\n   \
    \   on the Ethernet PLN in detail, as designed for the Cronus\n      prototype\
    \ currently being assembled by Bolt Beranek and Newman,\n      Inc.\n      4.1\
    \  Datagram Encapsulation\n           An internet datagram is encapsulated in\
    \ an Ethernet frame by\n      placing the internet datagram in the Ethernet frame\
    \ data field,\n      and setting the Ethernet type field to \"DoD IP\".\n    \
    \       To guarantee agreement by the sending and receiving VLN\n      components\
    \ on the ordering of internet datagram octets within an\n      encapsulating Ethernet\
    \ frame, the Ethernet octet ordering is\n      required to be consistent with\
    \ the IP octet ordering.\n      Specifically, if IP(i) and IP(j) are internet\
    \ datagram octets and\n      i<j, and EF(k) and EF(l) are the Ethernet frame octets\
    \ which\n      represent IP(i) and IP(j) once encapsulated, then k<l.  Bit\n \
    \     DOS-26 Rev A                                Virtual Local Network\n    \
    \  RFC 824\n      orderings within octets must also be consistent. (6)\n     \
    \ 4.2  VLN Specific Addressing Mode\n           Each VLN component maintains a\
    \ virtual-to-physical address\n      map (the VPMap) which translates a 32 bit\
    \ specific VLN host\n      address (7) in this cluster to a 48 bit Ethernet address.\
    \  (8)\n      The VPMap data structure and the operations on it can be\n     \
    \ efficiently implemented using standard hashing techniques.  Only\n      three\
    \ operations defined on the VPMap are discussed in this note:\n      ClearVPMap,\
    \ TranslateVtoP, and StoreVPPair.\n           Each host has an Ethernet host address\
    \ (EHA) to which its\n      controller will respond, determined by Xerox and the\
    \ controller\n      manufacturer (see Section 4.5.2).  At host initialization\
    \ time,\n      _______________\n      (6) See [1] for a lively discussion of the\
    \ problems arising  from\n      the failure of communicants to agree upon consistent\
    \ orderings.\n      (7) Since the high-order 22 bits of the address are constant\
    \  for\n      all  specific  host addresses in a cluster, only the low-order 10\n\
    \      bits of the address are significant.\n      (8) The least significant bit\
    \ of the first octet of the  Ethernet\n      address  is  always 0, since these\
    \ are not broadcast or multicast\n      addresses.\n      DOS-26 Rev A       \
    \                         Virtual Local Network\n      RFC 824\n       0     \
    \              1                   2                   3\n       0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Destination Address                       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Destination Address (contd.)  |        Source Address         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                   Source Address (contd.)                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \      Type  (\"DoD IP\")         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \                                   |Version|  IHL  |Type of Service|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |        Total Length           |        Identification         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |Flags|\
    \     Fragment Offset     |  Time to Live |    Protocol   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |       Header Checksum         |         Source Address        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \    Source Address (contd.)    |      Destination Address      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Destination Address (contd.)  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \                                   |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n      .                                   \
    \                            .\n      .                            Data      \
    \                         .\n      .                                         \
    \                      .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                     Frame Check Sequence                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Table 3. An Encapsulated Internet Datagram\n      DOS-26 Rev\
    \ A                                Virtual Local Network\n      RFC 824\n    \
    \  the local VLN component establishes a second host address, the\n      multicast\
    \ host address (MHA), constructed from the host's VLN\n      address.  Represented\
    \ as a sequence of octets in hexadecimal, the\n      MHA has the form:\n     \
    \          A  B  C  D  E  F\n              09-00-08-00-hh-hh\n      A is the first\
    \ octet transmitted, and F the last.  The two octets\n      E and F contain the\
    \ host local address:\n                  E         F\n              000000hh \
    \ hhhhhhhh\n                    ^          ^\n                   MSB        LSB\n\
    \           When the VLN client invokes SendVLNDatagram to send a\n      specifically\
    \ addressed datagram, the local VLN component\n      encapsulates the datagram\
    \ in an Ethernet frame and transmits it\n      without delay.  The Source Address\
    \ in the Ethernet frame is the\n      EHA of the sending host.  The Ethernet Destination\
    \ Address is\n      formed from the destination VLN address in the datagram, and\
    \ is\n      either:\n      DOS-26 Rev A                                Virtual\
    \ Local Network\n      RFC 824\n          - the EHA of the destination host, if\
    \ the TranslateVtoP\n            operation on the VPMap succeeds,\n        or\n\
    \          - the MHA formed from the host number in the destination VLN\n    \
    \        address, as described above.\n           When a VLN component receives\
    \ an Ethernet frame with type\n      \"DoD IP\", it decapsulates the internet\
    \ datagram and delivers it\n      to its client.  If the frame was addressed to\
    \ the EHA of the\n      receiving host, no further action is taken, but if the\
    \ frame was\n      addressed to the MHA of the receiving host the VLN component\
    \ will\n      broadcast an update for the VPMaps of the other hosts.  This will\n\
    \      permit the other hosts to use the EHA of this host for future\n      traffic.\
    \  The type field of the Ethernet frame containing the\n      update is \"Cronus\
    \ VLN\", and the format of the data octets in the\n      frame is:\n       0 \
    \                  1                   2                   3\n       0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |   Subtype (\"Mapping Update\")  |        Host VLN Address       |\n \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \  |   Host VLN Address (contd.)   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      When a local VLN component receives an Ethernet frame with type\n     \
    \ DOS-26 Rev A                                Virtual Local Network\n      RFC\
    \ 824\n      \"Cronus VLN\" and subtype \"Mapping Update\", it performs a\n  \
    \    StoreVPPair operation using the Ethernet Source Address field and\n     \
    \ the host VLN address sent as frame data.\n           This multicast mechanism\
    \ could be extended to perform other\n      address mapping functions, for example,\
    \ to discover the addresses\n      of a cluster's gateways.  Suppose all gateways\
    \ register the same\n      Multicast Gateway Address (MGA, analogous to MHA) with\
    \ their\n      Ethernet controllers; the MGA then becomes a \"logical name\" for\n\
    \      the gateway function in a Cronus cluster.  If a host needs to\n      send\
    \ a datagram out of the cluster and doesn't know what specific\n      gateway\
    \ address to use, the host can multicast the datagram to\n      all gateways by\
    \ sending to MGA.  One or more of the gateways can\n      forward the datagram,\
    \ and transmit a \"Gateway Mapping Update\"\n      (containing the gateway's specific\
    \ Ethernet address) back to the\n      originating host.  Specific gateway addresses\
    \ could be cached in\n      a structure similar to the VPMap, keyed to the destination\n\
    \      network number. (9)\n      _______________\n      (9) Because the Cronus\
    \ Advanced Development  Model  will  contain\n      only  one  gateway,  a  simpler\
    \  mechanism  will  be  implemented\n      initially; the specific Ethernet address\
    \ of the gateway  will  be\n      \"well-known\" to all VLN components.\n    \
    \  DOS-26 Rev A                                Virtual Local Network\n      RFC\
    \ 824\n           The approach just outlined suggests that all knowledge of\n\
    \      the existence and connectivity of gateways would be isolated in\n     \
    \ the VLN layer of cluster hosts.  Other mechanisms, e.g., based on\n      the\
    \ ICMP component of the Internet Protocol, could be used\n      instead to disseminate\
    \ information about gateways to cluster\n      hosts (see [7]).  These would require,\
    \ however, specific Ethernet\n      addresses to be visible above the VLN layer,\
    \ a situation the\n      current design avoids.\n      4.3  VLN Broadcast and\
    \ Multicast Addressing Modes\n           A VLN datagram will be transmitted in\
    \ broadcast mode if the\n      argument to SendVLNDatagram specifies the VLN broadcast\
    \ address\n      (local address = 65,535, decimal) as the destination.  Broadcast\n\
    \      is implemented in the most straightforward way:  the VLN datagram\n   \
    \   is encapsulated in an Ethernet frame with type \"DoD IP\", and the\n     \
    \ frame destination address is set to the Ethernet broadcast\n      address. \
    \ The receiving VLN component merely decapsulates and\n      delivers the VLN\
    \ datagram.\n      DOS-26 Rev A                                Virtual Local Network\n\
    \      RFC 824\n           The implementation of the VLN multicast addressing\
    \ mode is\n      more complex, for several reasons.  Typically, each VLN host\
    \ will\n      define a constant called Max_Attended, equal to the maximum\n  \
    \    number of VLN multicast addresses which can be simultaneously\n      \"attended\"\
    \ by this host.  Max_Attended should not be a function\n      of the particular\
    \ Ethernet controller(s) the host may be using,\n      but only of the software\
    \ resources (buffer space and processor\n      time) that the host dedicates to\
    \ VLN multicast processing.  The\n      protocol below permits a host to attend\
    \ any number of VLN\n      multicast addresses, from 0 to 64,511 (the entire VLN\
    \ multicast\n      address space), independent of the controller in use.\n   \
    \        Understanding of the VLN multicast protocol requires some\n      knowledge\
    \ of the behavior of existing Ethernet controllers.  The\n      Ethernet specification\
    \ does not specify whether a controller must\n      perform multicast address\
    \ recognition, or if it does, how many\n      multicast addresses it must be prepared\
    \ to recognize.  As a\n      result Ethernet controller designs vary widely in\
    \ their behavior.\n      For example, the 3COM Model 3C400 controller follows\
    \ the first\n      pattern and performs no multicast address recognition, instead\n\
    \      passing all multicast frames to the host for further processing.\n    \
    \  DOS-26 Rev A                                Virtual Local Network\n      RFC\
    \ 824\n      The Intel Model iSBC 550 controller permits the host to register\n\
    \      a maximum of 8 multicast addresses with the controller, and the\n     \
    \ Interlan Model NM10 controller permits a maximum of 63 registered\n      addresses.\n\
    \           It would be possible to implement the VLN multicast mode\n      using\
    \ only the Ethernet broadcast mechanism.  This would imply,\n      however, that\
    \ every VLN host would receive and process every VLN\n      multicast, often only\
    \ to discard the datagram because it is\n      misaddressed.  More efficient operation\
    \ is possible if at least\n      some Ethernet multicast addresses are used, since\
    \ Ethernet\n      controllers with multicast recognition can discard misaddressed\n\
    \      frames more rapidly than their hosts, reducing both the processor\n   \
    \   time and buffer space demands upon the host.\n           The protocol specified\
    \ below satisfies the design\n      constraints and is especially simple.\n  \
    \         A VLN-wide constant, Min_Attendable, is equal to the\n      smallest\
    \ number of Ethernet multicast addresses that can be\n      simultaneously attended\
    \ by any host in the VLN, or 64,511,\n      whichever is smaller.  A network composed\
    \ of hosts with the Intel\n      DOS-26 Rev A                                Virtual\
    \ Local Network\n      RFC 824\n      and Interlan controllers mentioned above,\
    \ for example, would have\n      Min_Attendable equal to 7; (10) a network composed\
    \ only of hosts\n      with 3COM Model 3C400 controllers would have Min_Attendable\
    \ equal\n      to 64,511, since the controller itself does not restrict the\n\
    \      number of Ethernet multicast addresses to which a host may\n      attend.\
    \  (11)\n           The local address field of a VLN multicast address can be\n\
    \      represented in two octets, in hexadecimal:\n             mm-mm\n      From\
    \ Table 1, mm-mm considered as a decimal integer M is in the\n      range 1,024\
    \ to 65,534.  When SendVLNDatagram is invoked with a\n      VLN multicast datagram,\
    \ there are two cases:\n        1.  (M - 1,023) <= Min_Attendable.  In this case,\
    \ the datagram\n            is encapsulated in a \"DoD IP\" Ethernet frame, and\
    \ multicast\n            with the Ethernet address\n                    09-00-08-00-mm-mm\n\
    \            A VLN component which attends VLN multicast addresses in\n      _______________\n\
    \      (10) Min_Attendable is 7, rather than 8,  because  one  multicast\n   \
    \   slot  in  the  controller must be reserved for the host's MHA, as\n      described\
    \ in Section 4.2.\n      (11) For the Cronus Advanced Development Model, Min_Attendable\
    \ is\n      currently defined to be 60.\n      DOS-26 Rev A                  \
    \              Virtual Local Network\n      RFC 824\n            this range should\
    \ receive Ethernet multicast addresses in\n            this format, if necessary\
    \ by registering the addresses with\n            its Ethernet controller.\n  \
    \      2.  (M - 1,023) > Min_Attendable.  The datagram is encapsulated\n     \
    \       in a \"DoD IP\" Ethernet frame, and transmitted to the\n            Ethernet\
    \ broadcast address.  A VLN component which attends\n            VLN multicast\
    \ addresses in this range must receive all\n            broadcast frames, and\
    \ filter them on the basis of frame\n            type and VLN destination address\
    \ (found in the IP\n            destination address field).\n           There\
    \ are two drawbacks to this protocol that might induce a\n      more complex design:\
    \  1) because Min_Attendable is the \"lowest\n      common denominator\" for the\
    \ ability of Ethernet controllers to\n      recognize multicast addresses, some\
    \ controller capabilities may\n      be wasted; 2) small VLN addresses (less than\
    \ Max_Attendable +\n      1,024) will probably be handled more efficiently than\
    \ large VLN\n      multicast addresses.  The second factor complicates the\n \
    \     assignment of VLN multicast addresses to functions, since the\n      particular\
    \ assignment affects multicast performance.\n      DOS-26 Rev A              \
    \                  Virtual Local Network\n      RFC 824\n      4.4  Reliability\
    \ Guarantees\n           Delivered datagrams are accurate copies of transmitted\n\
    \      datagrams because VLN components do not deliver incoming\n      datagrams\
    \ with invalid Frame Check Sequences.  The 32 bit CRC\n      error detecting code\
    \ applied to Ethernet frames is very powerful,\n      and the probability of an\
    \ undetected error occuring \"on the wire\"\n      is very small.  The probability\
    \ of an error being introduced\n      before the checksum is computed or after\
    \ it is checked is\n      comparable to the probability of an error in a disk\
    \ subsystem\n      before a write operation or after a read; often, but not always,\n\
    \      it can be ignored.\n           Datagram duplication does not occur because\
    \ the VLN layer\n      does not perform datagram retransmissions, the primary\
    \ source of\n      duplicates in other networks.  Ethernet controllers do perform\n\
    \      retransmission as a result of \"collisions\" on the channel, but\n    \
    \  the \"collision enforcement\" or \"jam\" assures that no controller\n     \
    \ receives a valid frame if a collision occurs.\n           The sequencing guarantees\
    \ hold because mutually exclusive\n      access to the transmission medium defines\
    \ a total ordering on\n      DOS-26 Rev A                                Virtual\
    \ Local Network\n      RFC 824\n      Ethernet transmissions, and because a VLN\
    \ component buffers all\n      datagrams in FIFO order, if it buffers more than\
    \ one datagram.\n      4.5  Use of Assigned Numbers\n           On a philosophical\
    \ note, protocols such as IP and TCP exist\n      to provide communication services\
    \ to extensible sets of clients;\n      new clients and usages continue to emerge\
    \ over the life of a\n      protocol.  Because a protocol implementation must\
    \ have some\n      unambiguous knowledge of the \"names\" of the clients, sockets,\n\
    \      hosts, networks, etc., with which it interacts, a need arises for\n   \
    \   the continuing administration of the 'assigned numbers' related\n      to\
    \ the protocol.  Typically the organization which declares a\n      protocol to\
    \ be a standard also becomes the administrator for its\n      assigned numbers.\
    \  The organization will designate an office to\n      assign numbers to the clients,\
    \ sockets, hosts, networks, etc.,\n      that emerge over time.  The office will\
    \ also prepare lists of\n      number assignments that are distributed to protocol\
    \ users; the\n      reference [4] is a list of this kind.\n      DOS-26 Rev A\
    \                                Virtual Local Network\n      RFC 824\n      \
    \     There are three organizations responsible for number\n      assignment related\
    \ to the Ethernet-based VLN implementation:\n      DARPA, Xerox, and the DOS Design/Implementation\
    \ Project; their\n      respective roles are described below.\n      4.5.1  DARPA\n\
    \           DARPA administers the internet network number and internet\n     \
    \ protocol number assignments.  The Ethernet-based VLN\n      implementation does\
    \ not involve DARPA assigned numbers, but any\n      particular 'instance' of\
    \ a Cronus VLN is expected to have a class\n      A or B internet network number\
    \ assigned by DARPA.  For example,\n      the prototype Cronus system (the Advanced\
    \ Development Model)\n      being constructed at Bolt Beranek and Newman, Inc.,\
    \ has class B\n      network number 128.011.xxx.xxx.\n           Protocols built\
    \ above the VLN will make use of other DARPA\n      assigned numbers, e.g., the\
    \ Cronus object-operation protocol\n      requires an internet protocol number.\n\
    \      DOS-26 Rev A                                Virtual Local Network\n   \
    \   RFC 824\n      4.5.2  The Xerox Ethernet Address Administration Office\n \
    \          The Ethernet Address Administration Office at Xerox Corp.\n      administers\
    \ Ethernet specific and multicast address assignments,\n      and Ethernet frame\
    \ type assignments.\n           It is the intent of the Xerox internetworking\
    \ model that\n      every Ethernet host have a distinct specific address, and\
    \ that\n      the address space be large enough to accomodate a very large\n \
    \     population of inexpensive hosts (e.g., personal workstations).\n      They\
    \ have therefore chosen to delegate the authority to assign\n      specific addresses\
    \ to the manufacturers of Ethernet controllers,\n      by granting them large\
    \ blocks of addresses on request.\n      Manufacturers are expected to assign\
    \ specific addresses from\n      these blocks densely, e.g., sequentially, one\
    \ per controller, and\n      to consume all of them before requesting another\
    \ block.\n           The preceding paragraph explains the Xerox address\n    \
    \  assignment policy not because the DOS Design/Implementation\n      Project\
    \ intends to manufacture Ethernet controllers (!), but\n      because Xerox has\
    \ chosen to couple the assignment of specific and\n      multicast Ethernet addresses.\
    \  An assigned block is defined by a\n      DOS-26 Rev A                     \
    \           Virtual Local Network\n      RFC 824\n      23-bit constant, which\
    \ specifies the contents of the first three\n      octets of an Ethernet address,\
    \ except for the broadcast/multicast\n      bit (the least significant bit of\
    \ the first octet).  The\n      possessor of an assigned block thus has in hand\
    \ 2**24 specific\n      addresses and 2**24 multicast addresses, to parcel out\
    \ as\n      necessary.\n           The block assigned for use in the Cronus system\
    \ is defined\n      by the octets 08-00-08 (hex).  The specific addresses in this\n\
    \      block range from 08-00-08-00-00-00 to 08-00-08-FF-FF-FF (hex),\n      and\
    \ the multicast addresses range from 09-00-08-00-00-00 to 09-\n      00-08-FF-FF-FF\
    \ (hex).  Only a fraction of the multicast addresses\n      are actually utilized,\
    \ as explained in Sections 4.2 and 4.3.\n           The Ethernet Address Administration\
    \ Office has designated a\n      public frame type, \"DoD IP\", 08-00 (hex), to\
    \ be used for\n      encapsulated internet protocol datagrams.  The Ethernet VLN\n\
    \      implementation uses this frame type exclusively for datagram\n      encapsulation.\
    \ In addition, the Cronus system uses two private\n      Ethernet frame types,\
    \ assigned by the Ethernet Address\n      Administration Office:\n      DOS-26\
    \ Rev A                                Virtual Local Network\n      RFC 824\n\
    \              NAME             TYPE\n              Cronus VLN       80-03\n \
    \             Cronus Direct    80-04\n      (The use of the \"Cronus Direct\"\
    \ frame type is not described in\n      this note.)\n           The same Ethernet\
    \ address and frame type assignments will be\n      used by every instance of\
    \ a Cronus VLN; no further assignments\n      from the Ethernet Address Administration\
    \ Office are anticipated.\n      4.5.3  The DOS Design/Implementation Project\n\
    \           The DOS Design/Implementation Project assumes responsibility\n   \
    \   for the assignment of subtypes of the Ethernet frame type \"Cronus\n     \
    \ VLN\".  No assignments of subtypes for purposes unrelated to the\n      Cronus\
    \ system design are expected, nor are assignments to other\n      organizations.\
    \  The subtypes currently assigned are:\n      DOS-26 Rev A                  \
    \              Virtual Local Network\n      RFC 824\n              NAME      \
    \           SUBTYPE\n              Mapping Update       00-01\n      DOS-26 Rev\
    \ A                                Virtual Local Network\n      RFC 824\n    \
    \                             REFERENCES\n      [1]\n          \"On holy wars\
    \ and a plea for peace,\" Danny Cohen, Computer,\n          V 14 N 10, October\
    \ 1981, pp. 48-54.\n      [2]\n          \"48-bit absolute internet and Ethernet\
    \ host numbers,\" Yogen\n          K. Dalal and Robert S. Printis, Proc. of the\
    \ 7th Data\n          Communications Symposium, October 1981.\n      [3]\n   \
    \       \"The Ethernet:  a local area network, data link layer and\n         \
    \ physical layer specifications,\" Digital Equipment Corp., Intel\n          Corp.,\
    \ and Xerox Corp., Version 1.0, September 1980.\n      [4]\n          \"Assigned\
    \ numbers,\" Jon Postel, RFC 790, USC/Information\n          Sciences Institute,\
    \ September 1981.\n      [5]\n          \"Internet Protocol - DARPA internet program\
    \ protocol\n          specification,\" Jon Postel, ed., RFC 791, USC/Information\n\
    \          Sciences Institute, September 1981.\n      [6]\n          \"Internet\
    \ protocol transition workbook,\" Network Information\n          Center, SRI International,\
    \ Menlo Park, California, March 1982.\n      [7]\n          \"IP - Local Area\
    \ Network Addressing Issues,\" Robert Gurwitz\n          and Robert Hinden, Bolt\
    \ Beranek and Newman Inc., (draft)\n          August 1982.\n"
