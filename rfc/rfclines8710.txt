Multipart Content Format for the Constrained Application Protocol (CoAP) Abstract
This memo defines application/multipart core, an application  independent media type that can be used to combine representations of zero or more different media types (each with a Constrained Application Protocol (CoAP) Content Format identifier) into a single representation, with minimal framing overhead.
This memo defines application/multipart core, an application  independent media type that can be used to combine representations of zero or more different media types (each with a CoAP Content Format identifier [RFC7252]) into a single representation, with minimal framing overhead.
This simple and efficient binary framing mechanism can be employed to create application specific message bodies that build on multiple already existing media types.
As the name of the media type suggests, application/multipart core was inspired by the multipart media types initially defined in the original set of MIME specifications [RFC2046] and later.
However, while those needed to focus on the syntactic aspects of integrating multiple representations into one email, transfer protocols providing full data transparency such as CoAP as well as readily available encoding formats such as the Concise Binary Object Representation (CBOR)
[RFC7049] shift the focus towards the intended use of the combined representations.
In this respect, the basic intent of the application/multipart core media type is like that of multipart/mixed (Section 5.1.3 of [RFC2046]); however, the semantics are relaxed to allow for both ordered and unordered collections of media types.
Experience with multipart/mixed in email has shown that recipients that care about order of included body parts will process them in the order they are listed inside multipart/ mixed, and recipients that don't care about the order will ignore it anyway.
The media type multipart/parallel that was intended for unordered collections didn't deploy.
The detailed semantics of the representations are refined by the context established by the application in the accompanying request parameters, e.g., the resource URI and any further options (header fields), but three usage scenarios are envisioned: In one case, the individual representations in an application/ multipart core message body occur in a sequence, which may be employed by an application where such a sequence is natural, e.g., for a number of audio snippets in various formats to be played out in that sequence or search results returned in order of relevance.
In another case, an application may be more interested in a bag of representations (which are distinguished by their Content Format identifiers), such as an audio snippet and a text representation accompanying it.
In such a case, the sequence in which these occur may not be relevant to the application.
This specification adds the option of substituting a null value for the representation of an optional part, which indicates that the part is not present.
A third common situation only has a single representation in the sequence, and the sender selects just one of a set of formats possible for this situation.
This kind of union "type" of formats may also make the presence of the actual representation optional, the omission of which leads to a zero length array.
Where these rules are not sufficient, an application might still use the general format defined here but register a new media type and an associated Content Format identifier to associate the representation with these more specific semantics instead of using the application/ multipart core media type.
Also, future specifications might want to define rough equivalents for other multipart media types with specific semantics not covered by the present specification, such as multipart/alternative (Section 5.1.4 of [RFC2046]), where several alternative representations are provided in the message body, but only one of those is to be selected by the recipient for its use (this is less likely to be useful in a constrained environment that has facilities for pre flight discovery).
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
Encoding A representation of media type application/multipart core contains a collection of zero or more representations, each along with their respective Content Format.
The collection is encoded as a CBOR [RFC7049] array with an even number of elements.
Counting from zero, the odd numbered elements are a byte string containing a representation or the value "null" (if an optional part is indicated as not given).
The (even numbered) element preceding each of these is an unsigned integer specifying the Content Format ID of the representation following it.
For example, a collection containing two representations, one with Content Format ID 42 and one with Content Format ID 0, looks like this in CBOR diagnostic notation:
For illustration, the structure of an application/multipart core representation can be described by the Concise Data Definition Language (CDDL) [RFC8610] specification in Figure 1: multipart core
[  multipart part] multipart part
Figure 1: CDDL for application/multipart core
This format is intended as a strict specification: an implementation MUST stop processing the representation if there is a CBOR
well  formedness error, a deviation from the structure defined above, or any residual data left after processing the CBOR data item.
(This generally means the representation is not processed at all unless some streaming processing has already happened.)
This section illustrates a less obvious example for using application/multipart core: combining it with observing a resource [RFC7641] to handle pending results.
When a client registers to observe a resource for which no representation is available yet, the server may send one or more 2.05 (Content) notifications that indicate the lack of an actual representation.
Later on, when one becomes available, the server will send the first actual 2.05 (Content) or 2.03 (Valid) notification.
A diagram depicting possible resulting sequences of notifications, identified by their respective response code, is shown in Figure 2.
The specification of the Observe option requires that all notifications carry the same Content Format.
The application/ multipart core media type can be used to provide that Content Format, e.g., by carrying an empty list of representations in the case marked as "Pending" in Figure 2 and carrying a single representation specified as the target Content Format in the case in the middle of the figure.
This section describes the serialization for readers that may be new to CBOR.
It does not contain any new information.
An application/multipart core representation carrying no representations is represented by an empty CBOR array, which is serialized as a single byte with the value 0x80.
An application/multipart core representation carrying a single representation is represented by a two element CBOR array, which is serialized as 0x82 followed by the two elements.
The first element is an unsigned integer for the Content Format value, which is represented as described in Table 1.
The second element is the object as a byte string, which is represented as a length as described in Table 2 followed by the bytes of the object.
Table 2: Serialization of Object Length
For example, a single text/plain object (Content Format 0) of value "Hello World" (11 characters) would be serialized as follows:
0x20 W r l d
In effect, the serialization for a single object is done by prefixing the object with information that there is one object (here: 0x82), information about its Content Format (here: 0x00), and information regarding its length (here: 0x4b).
For more than one representation included in an application/ multipart core representation, the head of the CBOR array is adjusted (0x84 for two representations, 0x86 for three, etc.), and the sequences of Content Format and embedded representations follow.
For instance, the example from Section 2 would be serialized as follows: 0x84
Registration of Media Type application
/multipart core IANA has registered the following media type [RFC6838]: Type name:
application Subtype name:  multipart core Required parameters:
N/A Encoding considerations:  binary Security considerations:
See the Security Considerations section of RFC 8710.
N/A Published specification:  RFC 8710 Applications that use this media type:  Applications that need to combine representations of zero or more different media types into one, e.g., EST over secure CoAP (EST CoAP)
[EST COAPS] Fragment identifier considerations:
The syntax and semantics of fragment identifiers specified for application/multipart core are as specified for application/cbor.
(At publication of this document, there is no fragment identification syntax defined for application/cbor.)
Deprecated alias names for this type:  N/A Magic number(s):
N/A Macintosh file type code(s):  N/A Person & email address to contact for further information:
Intended usage:  COMMON Restrictions on usage:  N/
CoRE WG Change controller:  IESG Provisional registration?
Addition to "CoAP Content Formats" Registry 6.
The security considerations of [RFC7049] apply.
In particular, resource exhaustion attacks may employ large values for the byte string size fields or employ deeply nested structures of recursively embedded application/multipart core representations.
