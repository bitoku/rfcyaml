Abstract This document requires that when Transport Layer Security (TLS) clients and servers establish connections, they never negotiate the use of Secure Sockets Layer (SSL) version 2.0.
This document updates the backward compatibility sections found in the Transport Layer Security (TLS).
Many protocols specified in the IETF rely on Transport Layer Security (TLS)
This is a good thing, but some TLS clients and servers also support negotiating the use of Secure Sockets Layer (SSL) version 2.0 [SSL2]; however, this version does not provide a sufficiently high level of security.
SSL version 2.0 has known deficiencies.
This document describes those deficiencies, and it requires that TLS clients and servers never negotiate the use of SSL version 2.0.
RFC 4346 [TLS1.1], and later RFC 5246
[TLS1.2], explicitly warned implementers that the "ability to send version 2.0 CLIENT HELLO messages will be phased out with all due haste".
This document accomplishes this by updating the backward compatibility sections found in TLS [TLS1.0][TLS1.1][TLS1.2].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
SSL version 2.0 [SSL2] deficiencies include the following:
Message authentication uses MD5 [MD5].
Most security aware users have already moved away from any use of MD5 [RFC6151].
Handshake messages are not protected.
This permits a man in the  middle to trick the client into picking a weaker cipher suite than it would normally choose.
Message integrity and message encryption use the same key, which is a problem if the client and server negotiate a weak encryption algorithm.
Sessions can be easily terminated.
A man in the middle can easily insert a TCP FIN to close the session, and the peer is unable to determine whether or not it was a legitimate end of the session.
Because of the deficiencies noted in the previous section:  TLS clients MUST NOT send the SSL version 2.0 compatible CLIENT  HELLO message format.
Clients MUST NOT send any ClientHello message that specifies a protocol version less than { 0x03, 0x00 }.
As previously stated by the definitions of all previous versions of TLS, the client SHOULD specify the highest protocol version it supports.
TLS servers MAY continue to accept ClientHello messages in the version 2 CLIENT HELLO format as specified in RFC 5246 [
Note that this does not contradict the prohibition against actually negotiating the use of SSL 2.0.
TLS servers MUST NOT reply with an SSL 2.0 SERVER HELLO with a protocol version that is less than { 0x03, 0x00 } and instead MUST abort the connection, i.e., when the highest protocol version offered by the client is { 0x02, 0x00 }, the TLS connection will be refused.
Note that the number of servers that support this above mentioned "MAY accept" implementation option is declining, and the SSL 2.0 CLIENT
HELLO precludes the use of TLS protocol enhancements that require TLS extensions.
TLS extensions can only be sent as part of an (Extended) ClientHello handshake message.
This entire document is about security considerations.
