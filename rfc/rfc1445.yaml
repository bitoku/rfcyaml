- title: __initial_text__
  contents:
  - "          Network Working Group                                J. Galvin\n  \
    \        Request for Comments: 1445         Trusted Information Systems\n    \
    \                           Administrative Model\n                           \
    \    for version 2 of the\n                   Simple Network Management Protocol\
    \ (SNMPv2)\n          Status of this Memo\n          This RFC specifes an IAB\
    \ standards track protocol for the\n          Internet community, and requests\
    \ discussion and suggestions\n          for improvements.  Please refer to the\
    \ current edition of the\n          \"IAB Official Protocol Standards\" for the\
    \ standardization\n          state and status of this protocol.  Distribution\
    \ of this memo\n          is unlimited.\n          Table of Contents\n       \
    \   RFC 1445       Administrative Model for SNMPv2      April 1993\n         \
    \ 4 Application of the Model ..............................   23\n          4.1\
    \ Non-Secure Minimal Agent Configuration ..............   23\n          4.2 Secure\
    \ Minimal Agent Configuration ..................   26\n          4.3 MIB View\
    \ Configurations .............................   28\n          4.4 Proxy Configuration\
    \ .................................   32\n          4.4.1 Foreign Proxy Configuration\
    \ .......................   33\n          4.4.2 Native Proxy Configuration ........................\
    \   37\n          4.5 Public Key Configuration ............................  \
    \ 41\n          5 Security Considerations ...............................   44\n\
    \          6 Acknowledgements ......................................   45\n  \
    \        7 References ............................................   46\n    \
    \      8 Authors' Addresses ....................................   47\n      \
    \    RFC 1445       Administrative Model for SNMPv2      April 1993\n        \
    \  1.  Introduction\n          A network management system contains: several (potentially\n\
    \          many) nodes, each with a processing entity, termed an agent,\n    \
    \      which has access to management instrumentation; at least one\n        \
    \  management station; and, a management protocol, used to convey\n          management\
    \ information between the agents and management\n          stations.  Operations\
    \ of the protocol are carried out under an\n          administrative framework\
    \ which defines both authentication and\n          authorization policies.\n \
    \         Network management stations execute management applications\n      \
    \    which monitor and control network elements.  Network elements\n         \
    \ are devices such as hosts, routers, terminal servers, etc.,\n          which\
    \ are monitored and controlled through access to their\n          management information.\n\
    \          It is the purpose of this document, the Administrative Model\n    \
    \      for SNMPv2, to define how the administrative framework is\n          applied\
    \ to realize effective network management in a variety\n          of configurations\
    \ and environments.\n          The model described here entails the use of distinct\n\
    \          identities for peers that exchange SNMPv2 messages.  Thus, it\n   \
    \       represents a departure from the community-based administrative\n     \
    \     model of the original SNMP [1].  By unambiguously identifying\n        \
    \  the source and intended recipient of each SNMPv2 message, this\n          new\
    \ strategy improves upon the historical community scheme\n          both by supporting\
    \ a more convenient access control model and\n          allowing for effective\
    \ use of asymmetric (public key) security\n          protocols in the future.\n\
    \          1.1.  A Note on Terminology\n          For the purpose of exposition,\
    \ the original Internet-standard\n          Network Management Framework, as described\
    \ in RFCs 1155, 1157,\n          and 1212, is termed the SNMP version 1 framework\
    \ (SNMPv1).\n          The current framework is termed the SNMP version 2 framework\n\
    \          (SNMPv2).\n          RFC 1445       Administrative Model for SNMPv2\
    \      April 1993\n          2.  Elements of the Model\n          2.1.  SNMPv2\
    \ Party\n          A SNMPv2 party  is a conceptual, virtual execution environment\n\
    \          whose operation is restricted (for security or other purposes)\n  \
    \        to an administratively defined subset of all possible\n          operations\
    \ of a particular SNMPv2 entity (see Section 2.2).\n          Whenever a SNMPv2\
    \ entity processes a SNMPv2 message, it does\n          so by acting as a SNMPv2\
    \ party and is thereby restricted to\n          the set of operations defined\
    \ for that party.  The set of\n          possible operations specified for a SNMPv2\
    \ party may be\n          overlapping or disjoint with respect to the sets of\
    \ other\n          SNMPv2 parties; it may also be a proper or improper subset\
    \ of\n          all possible operations of the SNMPv2 entity.\n          Architecturally,\
    \ each SNMPv2 party comprises\n          o    a single, unique party identity,\n\
    \          o    a logical network location at which the party executes,\n    \
    \           characterized by a transport protocol domain and\n               transport\
    \ addressing information,\n          o    a single authentication protocol and\
    \ associated\n               parameters by which all protocol messages originated\
    \ by\n               the party are authenticated as to origin and integrity,\n\
    \               and\n          o    a single privacy protocol and associated parameters\
    \ by\n               which all protocol messages received by the party are\n \
    \              protected from disclosure.\n          RFC 1445       Administrative\
    \ Model for SNMPv2      April 1993\n          Conceptually, each SNMPv2 party\
    \ may be represented by an ASN.1\n          value with the following syntax:\n\
    \               SnmpParty ::= SEQUENCE {\n                 partyIdentity\n   \
    \                 OBJECT IDENTIFIER,\n                 partyTDomain\n        \
    \            OBJECT IDENTIFIER,\n                 partyTAddress\n            \
    \        OCTET STRING,\n                 partyMaxMessageSize\n               \
    \     INTEGER,\n                 partyAuthProtocol\n                    OBJECT\
    \ IDENTIFIER,\n                 partyAuthClock\n                    INTEGER,\n\
    \                 partyAuthPrivate\n                    OCTET STRING,\n      \
    \           partyAuthPublic\n                    OCTET STRING,\n             \
    \    partyAuthLifetime\n                    INTEGER,\n                 partyPrivProtocol\n\
    \                    OBJECT IDENTIFIER,\n                 partyPrivPrivate\n \
    \                   OCTET STRING,\n                 partyPrivPublic\n        \
    \            OCTET STRING\n               }\n          For each SnmpParty value\
    \ that represents a SNMPv2 party, the\n          following statements are true:\n\
    \          o    Its partyIdentity component is the party identity.\n         \
    \ o    Its partyTDomain component is called the transport domain\n           \
    \    and indicates the kind of transport service by which the\n              \
    \ party receives network management traffic.  An example of\n               a\
    \ transport domain is snmpUDPDomain (SNMPv2 over UDP,\n               using SNMPv2\
    \ parties).\n          o    Its partyTAddress component is called the transport\n\
    \               addressing information and represents a transport service\n  \
    \             address by which the party receives network management\n       \
    \        traffic.\n          RFC 1445       Administrative Model for SNMPv2  \
    \    April 1993\n          o    Its partyMaxMessageSize component is called the\
    \ maximum\n               message size and represents the length in octets of\
    \ the\n               largest SNMPv2 message this party is prepared to accept.\n\
    \          o    Its partyAuthProtocol component is called the\n              \
    \ authentication protocol and identifies a protocol and a\n               mechanism\
    \ by which all messages generated by the party\n               are authenticated\
    \ as to integrity and origin.  In this\n               context, the value noAuth\
    \ signifies that messages\n               generated by the party are not authenticated\
    \ as to\n               integrity and origin.\n          o    Its partyAuthClock\
    \ component is called the authentication\n               clock and represents\
    \ a notion of the current time that is\n               specific to the party.\
    \  The significance of this\n               component is specific to the authentication\
    \ protocol.\n          o    Its partyAuthPrivate component is called the private\n\
    \               authentication key and represents any secret value needed\n  \
    \             to support the authentication protocol.  The significance\n    \
    \           of this component is specific to the authentication\n            \
    \   protocol.\n          o    Its partyAuthPublic component is called the public\n\
    \               authentication key and represents any public value that\n    \
    \           may be needed to support the authentication protocol.\n          \
    \     The significance of this component is specific to the\n               authentication\
    \ protocol.\n          o    Its partyAuthLifetime component is called the lifetime\n\
    \               and represents an administrative upper bound on\n            \
    \   acceptable delivery delay for protocol messages generated\n              \
    \ by the party.  The significance of this component is\n               specific\
    \ to the authentication protocol.\n          o    Its partyPrivProtocol component\
    \ is called the privacy\n               protocol and identifies a protocol and\
    \ a mechanism by\n               which all protocol messages received by the party\
    \ are\n               protected from disclosure.  In this context, the value\n\
    \               noPriv signifies that messages received by the party are\n   \
    \            not protected from disclosure.\n          o    Its partyPrivPrivate\
    \ component is called the private\n               privacy key and represents any\
    \ secret value needed to\n               support the privacy protocol.  The significance\
    \ of this\n          RFC 1445       Administrative Model for SNMPv2      April\
    \ 1993\n               component is specific to the privacy protocol.\n      \
    \    o    Its partyPrivPublic component is called the public\n               privacy\
    \ key and represents any public value that may be\n               needed to support\
    \ the privacy protocol.  The significance\n               of this component is\
    \ specific to the privacy protocol.\n          If, for all SNMPv2 parties realized\
    \ by a SNMPv2 entity, the\n          authentication protocol is noAuth and the\
    \ privacy protocol is\n          noPriv, then that entity is called non-secure.\n\
    \          2.2.  SNMPv2 Entity\n          A SNMPv2 entity is an actual process\
    \ which performs network\n          management operations by generating and/or\
    \ responding to\n          SNMPv2 protocol messages in the manner specified in\
    \ [2].  When\n          a SNMPv2 entity is acting as a particular SNMPv2 party\
    \ (see\n          Section 2.1), the operation of that entity must be restricted\n\
    \          to the subset of all possible operations that is\n          administratively\
    \ defined for that party.\n          By definition, the operation of a SNMPv2\
    \ entity requires no\n          concurrency between processing of any single protocol\
    \ message\n          (by a particular SNMPv2 party) and processing of any other\n\
    \          protocol message (by a potentially different SNMPv2 party).\n     \
    \     Accordingly, implementation of a SNMPv2 entity to support more\n       \
    \   than one party need not be multi-threaded.  However, there may\n         \
    \ be situations where implementors may choose to use multi-\n          threading.\n\
    \          Architecturally, every SNMPv2 entity maintains a local\n          database\
    \ that represents all SNMPv2 parties known to it -\n          those whose operation\
    \ is realized locally, those whose\n          operation is realized by proxy interactions\
    \ with remote\n          parties or devices, and those whose operation is realized\
    \ by\n          remote entities.  In addition, every SNMPv2 entity maintains a\n\
    \          local database that represents all managed object resources\n     \
    \     (see Section 2.8) which are known to the SNMPv2 entity.\n          Finally,\
    \ every SNMPv2 entity maintains a local database that\n          represents an\
    \ access control policy (see Section 2.11) that\n          defines the access\
    \ privileges accorded to known SNMPv2\n          parties.\n          RFC 1445\
    \       Administrative Model for SNMPv2      April 1993\n          2.3.  SNMPv2\
    \ Management Station\n          A SNMPv2 management station is the operational\
    \ role assumed by\n          a SNMPv2 party when it initiates SNMPv2 management\
    \ operations\n          by the generation of appropriate SNMPv2 protocol messages\
    \ or\n          when it receives and processes trap notifications.\n         \
    \ Sometimes, the term SNMPv2 management station is applied to\n          partial\
    \ implementations of the SNMPv2 (in graphics\n          workstations, for example)\
    \ that focus upon this operational\n          role.  Such partial implementations\
    \ may provide for\n          convenient, local invocation of management services,\
    \ but they\n          may provide little or no support for performing SNMPv2\n\
    \          management operations on behalf of remote protocol users.\n       \
    \   2.4.  SNMPv2 Agent\n          A SNMPv2 agent is the operational role assumed\
    \ by a SNMPv2\n          party when it performs SNMPv2 management operations in\n\
    \          response to received SNMPv2 protocol messages such as those\n     \
    \     generated by a SNMPv2 management station (see Section 2.3).\n          Sometimes,\
    \ the term SNMPv2 agent is applied to partial\n          implementations of the\
    \ SNMPv2 (in embedded systems, for\n          example) that focus upon this operational\
    \ role.  Such partial\n          implementations provide for realization of SNMPv2\
    \ management\n          operations on behalf of remote users of management services,\n\
    \          but they may provide little or no support for local invocation\n  \
    \        of such services.\n          2.5.  View Subtree\n          A view subtree\
    \ is the set of all MIB object instances which\n          have a common ASN.1\
    \ OBJECT IDENTIFIER prefix to their names.\n          A view subtree is identified\
    \ by the OBJECT IDENTIFIER value\n          which is the longest OBJECT IDENTIFIER\
    \ prefix common to all\n          (potential) MIB object instances in that subtree.\n\
    \          When the OBJECT IDENTIFIER prefix identifying a view subtree\n    \
    \      is longer than the OBJECT IDENTIFIER of an object type defined\n      \
    \    according to the SMI [3], then the use of such a view subtree\n         \
    \ for access control has granularity at the object instance\n          level.\
    \  Such granularity is considered beyond the scope of a\n          RFC 1445  \
    \     Administrative Model for SNMPv2      April 1993\n          SNMPv2 entity\
    \ acting in an agent role.  As such, no\n          implementation of a SNMPv2\
    \ entity acting in an agent role is\n          required to support values of viewSubtree\
    \ [6] which have more\n          sub-identifiers than is necessary to identify\
    \ a particular\n          leaf object type.  However, access control information\
    \ is also\n          used in determining which SNMPv2 entities acting in a manager\n\
    \          role should receive trap notifications (Section 4.2.6 of [2]).\n  \
    \        As such, agent implementors might wish to provide instance-\n       \
    \   level granularity in order to allow a management station to\n          use\
    \ fine-grain configuration of trap notifications.\n          2.6.  MIB View\n\
    \          A MIB view is a subset of the set of all instances of all\n       \
    \   object types defined according to the SMI [3] (i.e., of the\n          universal\
    \ set of all instances of all MIB objects), subject to\n          the following\
    \ constraints:\n          o    Each element of a MIB view is uniquely named by\
    \ an ASN.1\n               OBJECT IDENTIFIER value.  As such, identically named\n\
    \               instances of a particular object type (e.g., in different\n  \
    \             agents) must be contained within different MIB views.\n        \
    \       That is, a particular object instance name resolves\n               within\
    \ a particular MIB view to at most one object\n               instance.\n    \
    \      o    Every MIB view is defined as a collection of view\n              \
    \ subtrees.\n          2.7.  Proxy Relationship\n          A proxy relationship\
    \ exists when, in order to process a\n          received management request, a\
    \ SNMPv2 entity must communicate\n          with another, logically remote, entity.\
    \  A SNMPv2 entity which\n          processes management requests using a proxy\
    \ relationship is\n          termed a SNMPv2 proxy agent.\n          When communication\
    \ between a logically remote party and a\n          SNMPv2 entity is via the SNMPv2\
    \ (over any transport protocol),\n          then the proxy party is called a SNMPv2\
    \ native proxy\n          relationship.  Deployment of SNMPv2 native proxy relationships\n\
    \          is a means whereby the processing or bandwidth costs of\n         \
    \ management may be amortized or shifted - thereby facilitating\n          RFC\
    \ 1445       Administrative Model for SNMPv2      April 1993\n          the construction\
    \ of large management systems.\n          When communication between a logically\
    \ remote party and a\n          SNMPv2 entity party is not via the SNMPv2, then\
    \ the proxy\n          party is called a SNMPv2 foreign proxy relationship.\n\
    \          Deployment of foreign proxy relationships is a means whereby\n    \
    \      otherwise unmanageable devices or portions of an internet may\n       \
    \   be managed via the SNMPv2.\n          The transparency principle that defines\
    \ the behavior of a\n          SNMPv2 entity in general applies in particular\
    \ to a SNMPv2\n          proxy relationship:\n               The manner in which\
    \ one SNMPv2 entity processes SNMPv2\n               protocol messages received\
    \ from another SNMPv2 entity is\n               entirely transparent to the latter.\n\
    \          The transparency principle derives directly from the\n          historical\
    \ SNMP philosophy of divorcing architecture from\n          implementation.  To\
    \ this dichotomy are attributable many of\n          the most valuable benefits\
    \ in both the information and\n          distribution models of the Internet-standard\
    \ Network\n          Management Framework, and it is the architectural cornerstone\n\
    \          upon which large management systems may be built.  Consistent\n   \
    \       with this philosophy, although the implementation of SNMPv2\n        \
    \  proxy agents in certain environments may resemble that of a\n          transport-layer\
    \ bridge, this particular implementation\n          strategy (or any other!) does\
    \ not merit special recognition\n          either in the SNMPv2 management architecture\
    \ or in standard\n          mechanisms for proxy administration.\n          Implicit\
    \ in the transparency principle is the requirement that\n          the semantics\
    \ of SNMPv2 management operations are preserved\n          between any two SNMPv2\
    \ peers.  In particular, the \"as if\n          simultaneous\" semantics of a\
    \ Set operation are extremely\n          difficult to guarantee if its scope extends\
    \ to management\n          information resident at multiple network locations.\
    \  For this\n          reason, proxy configurations that admit Set operations\
    \ that\n          apply to information at multiple locations are discouraged,\n\
    \          although such operations are not explicitly precluded by the\n    \
    \      architecture in those rare cases where they might be supported\n      \
    \    in a conformant way.\n          Also implicit in the transparency principle\
    \ is the requirement\n          that, throughout its interaction with a proxy\
    \ agent, a\n          RFC 1445       Administrative Model for SNMPv2      April\
    \ 1993\n          management station is supplied with no information about the\n\
    \          nature or progress of the proxy mechanisms by which its\n         \
    \ requests are realized.  That is, it should seem to the\n          management\
    \ station - except for any distinction in underlying\n          transport address\
    \ - as if it were interacting via SNMPv2\n          directly with the proxied\
    \ device.  Thus, a timeout in the\n          communication between a proxy agent\
    \ and its proxied device\n          should be represented as a timeout in the\
    \ communication\n          between the management station and the proxy agent.\n\
    \          Similarly, an error response from a proxied device should - as\n  \
    \        much as possible - be represented by the corresponding error\n      \
    \    response in the interaction between the proxy agent and\n          management\
    \ station.\n          2.8.  SNMPv2 Context\n          A SNMPv2 context is a collection\
    \ of managed object resources\n          accessible by a SNMPv2 entity.  The object\
    \ resources\n          identified by a context are either local or remote.\n \
    \         A SNMPv2 context referring to local object resources is\n          identified\
    \ as a MIB view.  In this case, a SNMPv2 entity uses\n          local mechanisms\
    \ to access the management information\n          identified by the SNMPv2 context.\n\
    \          A remote SNMPv2 context referring to remote object resources\n    \
    \      is identified as a proxy relationship.  In this case, a SNMPv2\n      \
    \    entity acts as a proxy agent to access the management\n          information\
    \ identified by the SNMPv2 context.\n          2.9.  SNMPv2 Management Communication\n\
    \          A SNMPv2 management communication is a communication from one\n   \
    \       specified SNMPv2 party to a second specified SNMPv2 party\n          about\
    \ management information that is contained in a SNMPv2\n          context accessible\
    \ by the appropriate SNMPv2 entity.  In\n          particular, a SNMPv2 management\
    \ communication may be\n          o    a query by the originating party about\
    \ information\n               accessible to the addressed party (e.g., getRequest,\n\
    \               getNextRequest, or getBulkRequest),\n          RFC 1445      \
    \ Administrative Model for SNMPv2      April 1993\n          o    an indicative\
    \ assertion to the addressed party about\n               information accessible\
    \ to the originating party (e.g.,\n               Response, InformRequest, or\
    \ SNMPv2-Trap),\n          o    an imperative assertion by the originating party\
    \ about\n               information accessible to the addressed party (e.g.,\n\
    \               setRequest), or\n          o    a confirmation to the addressed\
    \ party about information\n               received by the originating party (e.g.,\
    \ a Response\n               confirming an InformRequest).\n          A management\
    \ communication is represented by an ASN.1 value\n          with the following\
    \ syntax:\n               SnmpMgmtCom ::= [2] IMPLICIT SEQUENCE {\n          \
    \       dstParty\n                    OBJECT IDENTIFIER,\n                 srcParty\n\
    \                    OBJECT IDENTIFIER,\n                 context\n          \
    \          OBJECT IDENTIFIER,\n                 pdu\n                    PDUs\n\
    \               }\n          For each SnmpMgmtCom value that represents a SNMPv2\
    \ management\n          communication, the following statements are true:\n  \
    \        o    Its dstParty component is called the destination and\n         \
    \      identifies the SNMPv2 party to which the communication is\n           \
    \    directed.\n          o    Its srcParty component is called the source and\n\
    \               identifies the SNMPv2 party from which the communication\n   \
    \            is originated.\n          o    Its context component identifies the\
    \ SNMPv2 context\n               containing the management information referenced\
    \ by the\n               communication.\n          o    Its pdu component has\
    \ the form and significance\n               attributed to it in [2].\n       \
    \   RFC 1445       Administrative Model for SNMPv2      April 1993\n         \
    \ 2.10.  SNMPv2 Authenticated Management Communication\n          A SNMPv2 authenticated\
    \ management communication is a SNMPv2\n          management communication (see\
    \ Section 2.9) for which the\n          originating SNMPv2 party is (possibly)\
    \ reliably identified and\n          for which the integrity of the transmission\
    \ of the\n          communication is (possibly) protected.  An authenticated\n\
    \          management communication is represented by an ASN.1 value with\n  \
    \        the following syntax:\n               SnmpAuthMsg ::= [1] IMPLICIT SEQUENCE\
    \ {\n                 authInfo\n                    ANY, -- defined by authentication\
    \ protocol\n                 authData\n                    SnmpMgmtCom\n     \
    \          }\n          For each SnmpAuthMsg value that represents a SNMPv2\n\
    \          authenticated management communication, the following\n          statements\
    \ are true:\n          o    Its authInfo component is called the authentication\n\
    \               information and represents information required in\n         \
    \      support of the authentication protocol used by the SNMPv2\n           \
    \    party originating the message.  The detailed significance\n             \
    \  of the authentication information is specific to the\n               authentication\
    \ protocol in use; it has no effect on the\n               application semantics\
    \ of the communication other than its\n               use by the authentication\
    \ protocol in determining whether\n               the communication is authentic\
    \ or not.\n          o    Its authData component is called the authentication\
    \ data\n               and represents a SNMPv2 management communication.\n   \
    \       RFC 1445       Administrative Model for SNMPv2      April 1993\n     \
    \     2.11.  SNMPv2 Private Management Communication\n          A SNMPv2 private\
    \ management communication is a SNMPv2\n          authenticated management communication\
    \ (see Section 2.10) that\n          is (possibly) protected from disclosure.\
    \  A private management\n          communication is represented by an ASN.1 value\
    \ with the\n          following syntax:\n               SnmpPrivMsg ::= [1] IMPLICIT\
    \ SEQUENCE {\n                 privDst\n                    OBJECT IDENTIFIER,\n\
    \                 privData\n                    [1] IMPLICIT OCTET STRING\n  \
    \             }\n          For each SnmpPrivMsg value that represents a SNMPv2\
    \ private\n          management communication, the following statements are true:\n\
    \          o    Its privDst component is called the privacy destination\n    \
    \           and identifies the SNMPv2 party to which the\n               communication\
    \ is directed.\n          o    Its privData component is called the privacy data\
    \ and\n               represents the (possibly encrypted) serialization\n    \
    \           (according to the conventions of [5]) of a SNMPv2\n              \
    \ authenticated management communication (see Section\n               2.10).\n\
    \          RFC 1445       Administrative Model for SNMPv2      April 1993\n  \
    \        2.12.  SNMPv2 Management Communication Class\n          A SNMPv2 management\
    \ communication class corresponds to a\n          specific SNMPv2 PDU type defined\
    \ in [2].  A management\n          communication class is represented by an ASN.1\
    \ INTEGER value\n          according to the type of the identifying PDU (see Table\
    \ 1).\n                              Get              1\n                    \
    \          GetNext          2\n                              Response        \
    \ 4\n                              Set              8\n                      \
    \        -- unused       16\n                              GetBulk         32\n\
    \                              Inform          64\n                          \
    \    SNMPv2-Trap    128\n                    Table 1: Management Communication\
    \ Classes\n          The value by which a communication class is represented is\n\
    \          computed as 2 raised to the value of the ASN.1 context-\n         \
    \ specific tag for the appropriate SNMPv2 PDU.\n          A set of management\
    \ communication classes is represented by\n          the ASN.1 INTEGER value that\
    \ is the sum of the representations\n          of the communication classes in\
    \ that set.  The null set is\n          represented by the value zero.\n     \
    \     2.13.  SNMPv2 Access Control Policy\n          A SNMPv2 access control policy\
    \ is a specification of a local\n          access policy in terms of a SNMPv2\
    \ context and the management\n          communication classes which are authorized\
    \ between a pair of\n          SNMPv2 parties.  Architecturally, such a specification\n\
    \          comprises four parts:\n          o    the targets of SNMPv2 access\
    \ control - the SNMPv2 parties\n               that may perform management operations\
    \ as requested by\n               management communications received from other\
    \ parties,\n          o    the subjects of SNMPv2 access control - the SNMPv2\n\
    \               parties that may request, by sending management\n          RFC\
    \ 1445       Administrative Model for SNMPv2      April 1993\n               communications\
    \ to other parties, that management\n               operations be performed,\n\
    \          o    the managed object resources of SNMPv2 access control -\n    \
    \           the SNMPv2 contexts which identify the management\n              \
    \ information on which requested management operations are\n               to\
    \ be performed, and\n          o    the policy that specifies the classes of SNMPv2\n\
    \               management communications pertaining to a particular\n       \
    \        SNMPv2 context that a particular target is authorized to\n          \
    \     accept from a particular subject.\n          Conceptually, a SNMPv2 access\
    \ policy is represented by a\n          collection of ASN.1 values with the following\
    \ syntax:\n               AclEntry ::= SEQUENCE {\n                 aclTarget\n\
    \                    OBJECT IDENTIFIER,\n                 aclSubject\n       \
    \             OBJECT IDENTIFIER,\n                 aclResources\n            \
    \        OBJECT IDENTIFIER,\n                 aclPrivileges\n                \
    \    INTEGER\n               }\n          For each such value that represents\
    \ one part of a SNMPv2\n          access policy, the following statements are\
    \ true:\n          o    Its aclTarget component is called the target and\n   \
    \            identifies the SNMPv2 party to which the partial policy\n       \
    \        permits access.\n          o    Its aclSubject component is called the\
    \ subject and\n               identifies the SNMPv2 party to which the partial\
    \ policy\n               grants privileges.\n          o    Its aclResources component\
    \ is called the managed object\n               resources and identifies the SNMPv2\
    \ context referenced by\n               the partial policy.\n          o    Its\
    \ aclPrivileges component is called the privileges and\n               represents\
    \ a set of SNMPv2 management communication\n               classes which, when\
    \ they reference the specified SNMPv2\n          RFC 1445       Administrative\
    \ Model for SNMPv2      April 1993\n               context, are authorized to\
    \ be processed by the specified\n               target party when received from\
    \ the specified subject\n               party.\n          The application of SNMPv2\
    \ access control policy only occurs on\n          receipt of management communications;\
    \ it is not applied on\n          transmission of management communications. \
    \ Note, however,\n          that ASN.1 values, having the syntax AclEntry, are\
    \ also used\n          in determining the destinations of a SNMPv2-Trap [2].\n\
    \          RFC 1445       Administrative Model for SNMPv2      April 1993\n  \
    \        3.  Elements of Procedure\n          This section describes the procedures\
    \ followed by a SNMPv2\n          entity in processing SNMPv2 messages.  These\
    \ procedures are\n          independent of the particular authentication and privacy\n\
    \          protocols that may be in use.\n          3.1.  Generating a Request\n\
    \          This section describes the procedure followed by a SNMPv2\n       \
    \   entity whenever either a management request or a trap\n          notification\
    \ is to be transmitted by a SNMPv2 party.\n          (1)  A SnmpMgmtCom value\
    \ is constructed for which the srcParty\n               component identifies the\
    \ originating party, for which the\n               dstParty component identifies\
    \ the receiving party, for\n               which the context component identifies\
    \ the desired SNMPv2\n               context, and for which the pdu component\
    \ represents the\n               desired management operation.\n          (2)\
    \  The local database of party information is consulted to\n               determine\
    \ the authentication protocol and other relevant\n               information for\
    \ the originating and receiving SNMPv2\n               parties.\n          (3)\
    \  A SnmpAuthMsg value is constructed with the following\n               properties:\n\
    \                    Its authInfo component is constructed according to\n    \
    \                the authentication protocol specified for the\n             \
    \       originating party.\n                      In particular, if the authentication\
    \ protocol for\n                      the originating SNMPv2 party is identified\
    \ as\n                      noAuth, then this component corresponds to the\n \
    \                     OCTET STRING value of zero length.\n                   Its\
    \ authData component is the constructed SnmpMgmtCom\n                   value.\n\
    \          (4)  The local database of party information is consulted to\n    \
    \           determine the privacy protocol and other relevant\n              \
    \ information for the receiving SNMPv2 party.\n          RFC 1445       Administrative\
    \ Model for SNMPv2      April 1993\n          (5)  A SnmpPrivMsg value is constructed\
    \ with the following\n               properties:\n                    Its privDst\
    \ component identifies the receiving\n                    SNMPv2 party.\n    \
    \                Its privData component is the (possibly encrypted)\n        \
    \            serialization of the SnmpAuthMsg value according to\n           \
    \         the conventions of [5].\n                      In particular, if the\
    \ privacy protocol for the\n                      receiving SNMPv2 party is identified\
    \ as noPriv,\n                      then the privData component is unencrypted.\n\
    \                      Otherwise, the privData component is processed\n      \
    \                according to the privacy protocol.\n          (6)  The constructed\
    \ SnmpPrivMsg value is serialized according\n               to the conventions\
    \ of [5].\n          (7)  The serialized SnmpPrivMsg value is transmitted using\
    \ the\n               transport address and transport domain for the receiving\n\
    \               SNMPv2 party.\n          Note that the above procedure does not\
    \ include any application\n          of any SNMPv2 access control policy (see\
    \ section 2.13).\n          3.2.  Processing a Received Communication\n      \
    \    This section describes the procedure followed by a SNMPv2\n          entity\
    \ whenever a management communication is received.\n          (1)  The snmpStatsPackets\
    \ counter [7] is incremented.  If the\n               received message is not\
    \ the serialization (according to\n               the conventions of [5]) of an\
    \ SnmpPrivMsg value, then\n               that message is discarded without further\
    \ processing.\n               (If the first octet of the packet has the value\n\
    \               hexadecimal 30, then the snmpStats30Something counter [7]\n  \
    \             is incremented prior to discarding the message; otherwise\n    \
    \           the snmpStatsEncodingErrors counter [7] is incremented.)\n       \
    \   (2)  The local database of party information is consulted for\n          \
    \     information about the receiving SNMPv2 party identified\n              \
    \ by the privDst component of the SnmpPrivMsg value.\n          RFC 1445     \
    \  Administrative Model for SNMPv2      April 1993\n          (3)  If information\
    \ about the receiving SNMPv2 party is absent\n               from the local database\
    \ of party information, or\n               indicates that the receiving party's\
    \ operation is not\n               realized by the local SNMPv2 entity, then the\
    \ received\n               message is discarded without further processing, after\n\
    \               the snmpStatsUnknownDstParties counter [7] is\n              \
    \ incremented.\n          (4)  An ASN.1 OCTET STRING value is constructed (possibly\
    \ by\n               decryption, according to the privacy protocol in use)\n \
    \              from the privData component of said SnmpPrivMsg value.\n      \
    \         In particular, if the privacy protocol recorded for the\n          \
    \     party is noPriv, then the OCTET STRING value corresponds\n             \
    \  exactly to the privData component of the SnmpPrivMsg\n               value.\n\
    \          (5)  If the OCTET STRING value is not the serialization\n         \
    \      (according to the conventions of [5]) of an SnmpAuthMsg\n             \
    \  value, then the received message is discarded without\n               further\
    \ processing, after the snmpStatsEncodingErrors\n               counter [7] is\
    \ incremented.\n          (6)  If the dstParty component of the authData component\
    \ of\n               the obtained SnmpAuthMsg value is not the same as the\n \
    \              privDst component of the SnmpPrivMsg value, then the\n        \
    \       received message is discarded without further processing,\n          \
    \     after the snmpStatsDstPartyMismatches counter [7] is\n               incremented.\n\
    \          (7)  The local database of party information is consulted for\n   \
    \            information about the originating SNMPv2 party identified\n     \
    \          by the srcParty component of the authData component of\n          \
    \     the SnmpAuthMsg value.\n          (8)  If information about the originating\
    \ SNMPv2 party is\n               absent from the local database of party information,\
    \ then\n               the received message is discarded without further\n   \
    \            processing, after the snmpStatsUnknownSrcParties counter\n      \
    \         [7] is incremented.\n          (9)  The obtained SnmpAuthMsg value is\
    \ evaluated according to\n               the authentication protocol and other\
    \ relevant\n               information associated with the originating and receiving\n\
    \               SNMPv2 parties in the local database of party\n          RFC 1445\
    \       Administrative Model for SNMPv2      April 1993\n               information.\n\
    \               In particular, if the authentication protocol is\n           \
    \    identified as noAuth, then the SnmpAuthMsg value is\n               always\
    \ evaluated as authentic.\n          (10) If the SnmpAuthMsg value is evaluated\
    \ as unauthentic,\n               then the received message is discarded without\
    \ further\n               processing, and if the snmpV2EnableAuthenTraps object\
    \ [7]\n               is enabled, then the SNMPv2 entity sends\n             \
    \  authorizationFailure traps [7] according to its\n               configuration\
    \ (Section 4.2.6 of[2]).\n          (11) The SnmpMgmtCom value is extracted from\
    \ the authData\n               component of the SnmpAuthMsg value.\n         \
    \ (12) The local database of context information is consulted\n              \
    \ for information about the SNMPv2 context identified by\n               the context\
    \ component of the SnmpMgmtCom value.\n          (13) If information about the\
    \ SNMPv2 context is absent from\n               the local database of context\
    \ information, then the\n               received message is discarded without\
    \ further processing,\n               after the snmpStatsUnknownContexts counter\
    \ [7] is\n               incremented.\n          (14) The local database of access\
    \ policy information is\n               consulted for access privileges permitted\
    \ by the local\n               access policy to the originating SNMPv2 party with\n\
    \               respect to the receiving SNMPv2 party and the indicated\n    \
    \           SNMPv2 context.\n          (15) The management communication class\
    \ is determined from the\n               ASN.1 tag value associated with the PDUs\
    \ component of the\n               SnmpMgmtCom value.  If the management information\
    \ class\n               of the received message is either 32, 8, 2, or 1 (i.e.,\n\
    \               GetBulk, Set, GetNext or Get) and the SNMPv2 context is\n    \
    \           not realized by the local SNMPv2 entity, then the\n              \
    \ received message is discarded without further processing,\n               after\
    \ the snmpStatsUnknownContexts counter [7] is\n               incremented.\n \
    \         (16) If the management communication class of the received\n       \
    \        message is either 128, 64 or 4 (i.e., SNMPv2-Trap,\n               Inform,\
    \ or Response) and this class is not among the\n          RFC 1445       Administrative\
    \ Model for SNMPv2      April 1993\n               access privileges, then the\
    \ received message is discarded\n               without further processing, after\
    \ the\n               snmpStatsBadOperations counter [7] is incremented.\n   \
    \       (17) If the management communication class of the received\n         \
    \      message is not among the access privileges, then the\n               received\
    \ message is discarded without further processing\n               after generation\
    \ and transmission of a response message.\n               This response message\
    \ is directed to the originating\n               SNMPv2 party on behalf of the\
    \ receiving SNMPv2 party.\n               Its context, var-bind-list and request-id\
    \ components are\n               identical to those of the received request. \
    \ Its error-\n               index component is zero and its error-status component\
    \ is\n               authorizationError [2].\n          (18) If the SNMPv2 context\
    \ refers to local object resources,\n               then the management operation\
    \ represented by the\n               SnmpMgmtCom value is performed by the receiving\
    \ SNMPv2\n               entity with respect to the MIB view identified by the\n\
    \               SNMPv2 context according to the procedures set forth in\n    \
    \           [2].\n          (19) If the SNMPv2 context refers to remote object\
    \ resources,\n               then the management operation represented by the\n\
    \               SnmpMgmtCom value is performed through the appropriate\n     \
    \          proxy relationship.\n          3.3.  Generating a Response\n      \
    \    The procedure for generating a response to a SNMPv2 management\n        \
    \  request is identical to the procedure for transmitting a\n          request\
    \ (see Section 3.1), with these exceptions:\n          (1)  In Step 1, the dstParty\
    \ component of the responding\n               SnmpMgmtCom value is taken from\
    \ the srcParty component of\n               the original SnmpMgmtCom value; the\
    \ srcParty component of\n               the responding SnmpMgmtCom value is taken\
    \ from the\n               dstParty component of the original SnmpMgmtCom value;\
    \ the\n               context component of the responding SnmpMgmtCom value is\n\
    \               taken from the context component of the original\n           \
    \    SnmpMgmtCom value; and, the pdu component of the\n               responding\
    \ SnmpMgmtCom value is the response which\n               results from applying\
    \ the operation specified in the\n               original SnmpMgmtCom value.\n\
    \          RFC 1445       Administrative Model for SNMPv2      April 1993\n  \
    \        (2)  In Step 7, the serialized SnmpPrivMsg value is\n               transmitted\
    \ using the transport address and transport\n               domain from which\
    \ its corresponding request originated -\n               even if that is different\
    \ from the transport information\n               recorded in the local database\
    \ of party information.\n          RFC 1445       Administrative Model for SNMPv2\
    \      April 1993\n          4.  Application of the Model\n          This section\
    \ describes how the administrative model set forth\n          above is applied\
    \ to realize effective network management in a\n          variety of configurations\
    \ and environments.  Several types of\n          administrative configurations\
    \ are identified, and an example\n          of each is presented.\n          4.1.\
    \  Non-Secure Minimal Agent Configuration\n          This section presents an\
    \ example configuration for a minimal,\n          non-secure SNMPv2 agent that\
    \ interacts with one or more SNMPv2\n          management stations.  Table 2 presents\
    \ information about\n          SNMPv2 parties that is known both to the minimal\
    \ agent and to\n          the manager, while Table 3 presents similarly common\n\
    \          information about the local access policy.\n          As represented\
    \ in Table 2, the example agent party operates at\n          UDP port 161 at IP\
    \ address 1.2.3.4 using the party identity\n          gracie; the example manager\
    \ operates at UDP port 2001 at IP\n          address 1.2.3.5 using the identity\
    \ george.  At minimum, a\n          non-secure SNMPv2 agent implementation must\
    \ provide for\n          administrative configuration (and non-volatile storage)\
    \ of the\n          identities and transport addresses of two SNMPv2 parties:\n\
    \          itself and a remote peer.  Strictly speaking, other\n          information\
    \ about these two parties (including access policy\n          information) need\
    \ not be configurable.\n          RFC 1445       Administrative Model for SNMPv2\
    \      April 1993\n               Identity          gracie                george\n\
    \                                 (agent)               (manager)\n          \
    \     Domain            snmpUDPDomain         snmpUDPDomain\n               Address\
    \           1.2.3.4, 161          1.2.3.5, 2001\n               Auth Prot    \
    \     noAuth                noAuth\n               Auth Priv Key     \"\"    \
    \                \"\"\n               Auth Pub Key      \"\"                 \
    \   \"\"\n               Auth Clock        0                     0\n         \
    \      Auth Lifetime     0                     0\n               Priv Prot   \
    \      noPriv                noPriv\n               Priv Priv Key     \"\"   \
    \                 \"\"\n               Priv Pub Key      \"\"                \
    \    \"\"\n                   Table 2: Party Information for Minimal Agent\n \
    \         Target    Subject    Context    Privileges\n          gracie    george\
    \     local       35 (Get, GetNext & GetBulk)\n          george    gracie    \
    \ local      132 (Response & SNMPv2-Trap)\n                  Table 3: Access Information\
    \ for Minimal Agent\n          Suppose that the managing party george wishes to\
    \ interrogate\n          management information about the SNMPv2 context named\
    \ \"local\"\n          held by the agent named gracie by issuing a SNMPv2 GetNext\n\
    \          request message.  The manager consults its local database of\n    \
    \      party information.  Because the authentication protocol for\n         \
    \ the party george is recorded as noAuth, the GetNext request\n          message\
    \ generated by the manager is not authenticated as to\n          origin and integrity.\
    \  Because, according to the manager's\n          local database of party information,\
    \ the privacy protocol for\n          the party gracie is noPriv, the GetNext\
    \ request message is not\n          protected from disclosure.  Rather, it is\
    \ simply assembled,\n          serialized, and transmitted to the transport address\
    \ (IP\n          address 1.2.3.4, UDP port 161) associated in the manager's\n\
    \          local database of party information with the party gracie.\n      \
    \    When the GetNext request message is received at the agent, the\n        \
    \  identity of the party to which it is directed (gracie) is\n          RFC 1445\
    \       Administrative Model for SNMPv2      April 1993\n          extracted from\
    \ the message, and the receiving entity consults\n          its local database\
    \ of party information.  Because the privacy\n          protocol for the party\
    \ gracie is recorded as noPriv, the\n          received message is assumed not\
    \ to be protected from\n          disclosure.  Similarly, the identity of the\
    \ originating party\n          (george) is extracted, and the local database of\
    \ party\n          information is consulted.  Because the authentication protocol\n\
    \          for the party george is recorded as noAuth, the received\n        \
    \  message is immediately accepted as authentic.\n          The received message\
    \ is fully processed only if the agent's\n          local database of access policy\
    \ information authorizes GetNext\n          request communications by the party\
    \ george to the agent party\n          gracie with respect to the SNMPv2 context\
    \ \"local\".  The\n          database of access policy information presented as\
    \ Table 3\n          authorizes such communications (as well as Get and GetBulk\n\
    \          operations).\n          When the received request is processed, a Response\
    \ message is\n          generated which references the SNMPv2 context \"local\"\
    \ and\n          identifies gracie as the source party and george, the party\n\
    \          from which the request originated, as the destination party.\n    \
    \      Because the authentication protocol for gracie is recorded in\n       \
    \   the local database of party information as noAuth, the\n          generated\
    \ Response message is not authenticated as to origin\n          or integrity.\
    \  Because, according to the local database of\n          party information, the\
    \ privacy protocol for the party george\n          is noPriv, the response message\
    \ is not protected from\n          disclosure.  The response message is transmitted\
    \ to the\n          transport address from which the corresponding request\n \
    \         originated - without regard for the transport address\n          associated\
    \ with george in the local database of party\n          information.\n       \
    \   When the generated response is received by the manager, the\n          identity\
    \ of the party to which it is directed (george) is\n          extracted from the\
    \ message, and the manager consults its local\n          database of party information.\
    \  Because the privacy protocol\n          for the party george is recorded as\
    \ noPriv, the received\n          response is assumed not to be protected from\
    \ disclosure.\n          Similarly, the identity of the originating party (gracie)\
    \ is\n          extracted, and the local database of party information is\n  \
    \        consulted.  Because the authentication protocol for the party\n     \
    \     gracie is recorded as noAuth, the received response is\n          immediately\
    \ accepted as authentic.\n          RFC 1445       Administrative Model for SNMPv2\
    \      April 1993\n          The received message is fully processed only if the\
    \ manager's\n          local database of access policy information authorizes\n\
    \          Response communications from the party gracie to the manager\n    \
    \      party george which reference the SNMPv2 context \"local\".  The\n     \
    \     database of access policy information presented as Table 3\n          authorizes\
    \ such Response messages (as well as SNMPv2-Trap\n          messages).\n     \
    \     4.2.  Secure Minimal Agent Configuration\n          This section presents\
    \ an example configuration for a secure,\n          minimal SNMPv2 agent that\
    \ interacts with a single SNMPv2\n          management station.  Table 4 presents\
    \ information about SNMPv2\n          parties that is known both to the minimal\
    \ agent and to the\n          manager, while Table 5 presents similarly common\
    \ information\n          about the local access policy.\n          The interaction\
    \ of manager and agent in this configuration is\n          very similar to that\
    \ sketched above for the non-secure minimal\n          agent - except that all\
    \ protocol messages are authenticated as\n          to origin and integrity and\
    \ protected from disclosure.  This\n          example requires encryption in order\
    \ to support distribution\n          of secret keys via the SNMPv2 itself.  A\
    \ more elaborate\n          example comprising an additional pair of SNMPv2 parties\
    \ could\n          support the exchange of non-secret information in\n       \
    \   authenticated messages without incurring the cost of\n          encryption.\n\
    \          An actual secure agent configuration may require SNMPv2\n         \
    \ parties for which the authentication and privacy protocols are\n          noAuth\
    \ and noPriv, respectively, in order to support clock\n          synchronization\
    \ (see [6]).  For clarity, these additional\n          parties are not represented\
    \ in this example.\n          RFC 1445       Administrative Model for SNMPv2 \
    \     April 1993\n               Identity          ollie                stan\n\
    \                                 (agent)              (manager)\n           \
    \    Domain            snmpUDPDomain        snmpUDPDomain\n               Address\
    \           1.2.3.4, 161         1.2.3.5, 2001\n               Auth Prot     \
    \    v2md5AuthProtocol    v2md5AuthProtocol\n               Auth Priv Key    \
    \ \"0123456789ABCDEF\"   \"GHIJKL0123456789\"\n               Auth Pub Key   \
    \   \"\"                   \"\"\n               Auth Clock        0          \
    \          0\n               Auth Lifetime     300                  300\n    \
    \           Priv Prot         desPrivProtocol     desPrivProtocol\n          \
    \     Priv Priv Key     \"MNOPQR0123456789\"   \"STUVWX0123456789\"\n        \
    \       Priv Pub Key      \"\"                   \"\"\n               Table 4:\
    \ Party Information for Secure Minimal Agent\n          Target    Subject    Context\
    \    Privileges\n          ollie     stan       local       35 (Get, GetNext &\
    \ GetBulk)\n          stan      ollie      local      132 (Response & SNMPv2-Trap)\n\
    \               Table 5: Access Information for Secure Minimal Agent\n       \
    \   As represented in Table 4, the example agent party operates at\n         \
    \ UDP port 161 at IP address 1.2.3.4 using the party identity\n          ollie;\
    \ the example manager operates at UDP port 2001 at IP\n          address 1.2.3.5\
    \ using the identity stan.  At minimum, a secure\n          SNMPv2 agent implementation\
    \ must provide for administrative\n          configuration (and non-volatile storage)\
    \ of relevant\n          information about two SNMPv2 parties: itself and a remote\n\
    \          peer.  Both ollie and stan authenticate all messages that they\n  \
    \        generate by using the SNMPv2 authentication protocol\n          v2md5AuthProtocol\
    \ and their distinct, private authentication\n          keys.  Although these\
    \ private authentication key values\n          (\"0123456789ABCDEF\" and \"GHIJKL0123456789\"\
    ) are presented here\n          for expository purposes, knowledge of private\
    \ authentication\n          keys is not normally afforded to human beings and\
    \ is confined\n          to those portions of the protocol implementation that\
    \ require\n          it.\n          RFC 1445       Administrative Model for SNMPv2\
    \      April 1993\n          When using the v2md5AuthProtocol, the public authentication\n\
    \          key for each SNMPv2 party is never used in authentication and\n   \
    \       verification of SNMPv2 exchanges.  Also, because the\n          v2md5AuthProtocol\
    \ is symmetric in character, the private\n          authentication key for each\
    \ party must be known to another\n          SNMPv2 party with which authenticated\
    \ communication is\n          desired.  In contrast, asymmetric (public key) authentication\n\
    \          protocols would not depend upon sharing of a private key for\n    \
    \      their operation.\n          All protocol messages generated for transmission\
    \ to the party\n          stan are encrypted using the desPrivProtocol privacy\
    \ protocol\n          and the private key \"STUVWX0123456789\"; they are decrypted\n\
    \          upon reception according to the same protocol and key.\n          Similarly,\
    \ all messages generated for transmission to the\n          party ollie are encrypted\
    \ using the desPrivProtocol protocol\n          and private privacy key \"MNOPQR0123456789\"\
    ; they are\n          correspondingly decrypted on reception.  As with\n     \
    \     authentication keys, knowledge of private privacy keys is not\n        \
    \  normally afforded to human beings and is confined to those\n          portions\
    \ of the protocol implementation that require it.\n          4.3.  MIB View Configurations\n\
    \          This section describes a convention for the definition of MIB\n   \
    \       views and, using that convention, presents example\n          configurations\
    \ of MIB views for SNMPv2 contexts that refer to\n          local object resources.\n\
    \          A MIB view is defined by a collection of view subtrees (see\n     \
    \     Section 2.6), and any MIB view may be represented in this way.\n       \
    \   Because MIB view definitions may, in certain cases, comprise a\n         \
    \ very large number of view subtrees, a convention for\n          abbreviating\
    \ MIB view definitions is desirable.\n          The convention adopted in [4]\
    \ supports abbreviation of MIB\n          view definitions in terms of families\
    \ of view subtrees that\n          are either included in or excluded from the\
    \ definition of the\n          relevant MIB view.  By this convention, a table\
    \ locally\n          maintained by each SNMPv2 entity defines the MIB view\n \
    \         associated with each SNMPv2 context that refers to local\n         \
    \ object resources.  Each entry in the table represents a family\n          of\
    \ view subtrees that (according to the type of that entry) is\n          either\
    \ included in or excluded from the MIB view of some\n          RFC 1445      \
    \ Administrative Model for SNMPv2      April 1993\n          SNMPv2 context. \
    \ Each table entry represents a subtree family\n          as a pairing of an OBJECT\
    \ IDENTIFIER value (called the family\n          name) together with a bitstring\
    \ value (called the family\n          mask).  The family mask indicates which\
    \ sub-identifiers of the\n          associated family name are significant to\
    \ the definition of\n          the represented subtree family.  For each possible\
    \ MIB object\n          instance, that instance belongs to the view subtree family\n\
    \          represented by a particular table entry if\n          o    the OBJECT\
    \ IDENTIFIER name of that MIB object instance\n               comprises at least\
    \ as many sub-identifiers as does the\n               family name for said table\
    \ entry, and\n          o    each sub-identifier in the name of said MIB object\n\
    \               instance matches the corresponding sub-identifier of the\n   \
    \            relevant family name whenever the corresponding bit of\n        \
    \       the associated family mask is non-zero.\n          The appearance of a\
    \ MIB object instance in the MIB view for a\n          particular SNMPv2 context\
    \ is related to the membership of that\n          instance in the subtree families\
    \ associated with that SNMPv2\n          context in local table entries:\n   \
    \       o    If a MIB object instance belongs to none of the relevant\n      \
    \         subtree families, then that instance is not in the MIB\n           \
    \    view for the relevant SNMPv2 context.\n          o    If a MIB object instance\
    \ belongs to the subtree family\n               represented by exactly one of\
    \ the relevant table entries,\n               then that instance is included in,\
    \ or excluded from, the\n               relevant MIB view according to the type\
    \ of that entry.\n          o    If a MIB object instance belongs to the subtree\
    \ families\n               represented by more than one of the relevant table\n\
    \               entries, then that instance is included in, or excluded\n    \
    \           from, the relevant MIB view according to the type of the\n       \
    \        single such table entry for which, first, the associated\n          \
    \     family name comprises the greatest number of sub-\n               identifiers,\
    \ and, second, the associated family name is\n               lexicographically\
    \ greatest.\n          The subtree family represented by a table entry for which\
    \ the\n          associated family mask is all ones corresponds to the single\n\
    \          view subtree identified by the family name for that entry.\n      \
    \    Because the convention of [4] provides for implicit extension\n         \
    \ RFC 1445       Administrative Model for SNMPv2      April 1993\n          of\
    \ family mask values with ones, the subtree family\n          represented by a\
    \ table entry with a family mask of zero length\n          always corresponds\
    \ to a single view subtree.\n            Context    Type        Family Name  \
    \  Family Mask\n            lucy       included    internet       ''H\n      \
    \              Table 6: View Definition for Minimal Agent\n          Using this\
    \ convention for abbreviating MIB view definitions,\n          some of the most\
    \ common definitions of MIB views may be\n          conveniently expressed.  For\
    \ example, Table 6 illustrates the\n          MIB view definitions required for\
    \ a minimal SNMPv2 entity that\n          having a single SNMPv2 context for which\
    \ the associated MIB\n          view embraces all instances of all MIB objects\
    \ defined within\n          the SNMPv2 Network Management Framework.  The represented\n\
    \          table has a single entry.  The SNMPv2 context (lucy) for which\n  \
    \        that entry defines the MIB view is identified in the first\n        \
    \  column.  The type of that entry (included) signifies that any\n          MIB\
    \ object instance belonging to the subtree family\n          represented by that\
    \ entry may appear in the MIB view for the\n          SNMPv2 context lucy.  The\
    \ family name for that entry is\n          internet, and the zero-length family\
    \ mask value signifies that\n          the relevant subtree family corresponds\
    \ to the single view\n          subtree rooted at that node.\n          Another\
    \ example of MIB view definition (see Table 7) is that\n          of a SNMPv2\
    \ entity having multiple SNMPv2 contexts with\n          distinct MIB views. \
    \ The MIB view associated with the SNMPv2\n          context lucy comprises all\
    \ instances of all MIB objects\n          defined within the SNMPv2 Network Management\
    \ Framework, except\n          those pertaining to the administration of SNMPv2\
    \ parties.  In\n          contrast, the MIB view attributed to the SNMPv2 context\
    \ ricky\n          contains only MIB object instances defined in the system group\n\
    \          of the Internet-standard MIB together with those object\n         \
    \ instances by which SNMPv2 parties are administered.\n          RFC 1445    \
    \   Administrative Model for SNMPv2      April 1993\n               Context  \
    \  Type        Family Name    Family Mask\n               lucy       included\
    \    internet       ''H\n               lucy       excluded    snmpParties   \
    \ ''H\n               ricky      included    system         ''H\n            \
    \   ricky      included    snmpParties    ''H\n                  Table 7: View\
    \ Definition for Multiple Contexts\n          A more complicated example of MIB\
    \ view configuration\n          illustrates the abbreviation of related collections\
    \ of view\n          subtrees by view subtree families (see Table 8).  In this\n\
    \          example, the MIB view associated with the SNMPv2 context lucy\n   \
    \       includes all object instances in the system group of the\n          Internet-standard\
    \ MIB together with some information related\n          to the second network\
    \ interface attached to the managed\n          device.  However, this interface-related\
    \ information does not\n          include the speed of the interface.  The family\
    \ mask value\n          'FFA0'H in the second table entry signifies that a MIB\
    \ object\n          instance belongs to the relevant subtree family if the initial\n\
    \          prefix of its name places it within the ifEntry portion of the\n  \
    \        registration hierarchy and if the eleventh sub-identifier of\n      \
    \    its name is 2.  The MIB object instance representing the speed\n        \
    \  of the second network interface belongs to the subtree\n          families\
    \ represented by both the second and third entries of\n          the table, but\
    \ that particular instance is excluded from the\n          MIB view for the SNMPv2\
    \ context lucy because the\n          lexicographically greater of the relevant\
    \ family names appears\n          in the table entry with type excluded.\n   \
    \       The MIB view for the SNMPv2 context ricky is also defined in\n       \
    \   this example.  The MIB view attributed to the SNMPv2 context\n          ricky\
    \ includes all object instances in the icmp group of the\n          Internet-standard\
    \ MIB, together with all information relevant\n          to the fifth network\
    \ interface attached to the managed device.\n          In addition, the MIB view\
    \ attributed to the SNMPv2 context\n          ricky includes the number of octets\
    \ received on the fourth\n          attached network interface.\n          RFC\
    \ 1445       Administrative Model for SNMPv2      April 1993\n               Context\
    \    Type        Family Name        Family Mask\n               lucy       included\
    \    system             ''H\n               lucy       included    { ifEntry 0\
    \ 2 }    'FFA0'H\n               lucy       excluded    { ifSpeed 2 }      ''H\n\
    \               ricky      included    icmp               ''H\n              \
    \ ricky      included    { ifEntry 0 5 }    'FFA0'H\n               ricky    \
    \  included    { ifInOctets 4 }   ''H\n                     Table 8: More Elaborate\
    \ View Definitions\n          While, as suggested by the examples above, a wide\
    \ range of MIB\n          view configurations are efficiently supported by the\n\
    \          abbreviated representation of [4], prudent MIB design can\n       \
    \   sometimes further reduce the size and complexity of the most\n          likely\
    \ MIB view definitions.  On one hand, it is critical that\n          mechanisms\
    \ for MIB view configuration impose no absolute\n          constraints either\
    \ upon the access policies of local\n          administrations or upon the structure\
    \ of MIB namespaces; on\n          the other hand, where the most common access\
    \ policies are\n          known, the configuration costs of realizing those policies\
    \ may\n          be slightly reduced by assigning to distinct portions of the\n\
    \          registration hierarchy those MIB objects for which local\n        \
    \  policies most frequently require distinct treatment.\n          4.4.  Proxy\
    \ Configuration\n          This section presents examples of SNMPv2 proxy configurations.\n\
    \          On one hand, foreign proxy configurations provide the\n          capability\
    \ to manage non-SNMP devices.  On the other hand,\n          native proxy configurations\
    \ allow an administrator to shift\n          the computational burden of rich\
    \ management functionality away\n          from network devices whose primary\
    \ task is not management.  To\n          the extent that SNMPv2 proxy agents function\
    \ as points of\n          aggregation for management information, proxy configurations\n\
    \          may also reduce the bandwidth requirements of large-scale\n       \
    \   management activities.\n          The example configurations in this section\
    \ are simplified for\n          clarity: actual configurations may require additional\
    \ parties\n          in order to support clock synchronization and distribution\
    \ of\n          secrets.\n          RFC 1445       Administrative Model for SNMPv2\
    \      April 1993\n          4.4.1.  Foreign Proxy Configuration\n          This\
    \ section presents an example configuration by which a\n          SNMPv2 management\
    \ station may manage network elements that do\n          not themselves support\
    \ the SNMPv2.  This configuration centers\n          on a SNMPv2 proxy agent that\
    \ realizes SNMPv2 management\n          operations by interacting with a non-SNMPv2\
    \ device using a\n          proprietary protocol.\n          Table 9 presents\
    \ information about SNMPv2 parties that is\n          recorded in the SNMPv2 proxy\
    \ agent's local database of party\n          information.  Table 10 presents information\
    \ about proxy\n          relationships that is recorded in the SNMPv2 proxy agent's\n\
    \          local database of context information.  Table 11 presents\n       \
    \   information about SNMPv2 parties that is recorded in the\n          SNMPv2\
    \ management station's local database of party\n          information.  Table\
    \ 12 presents information about the database\n          of access policy information\
    \ specified by the local\n          administration.\n   Identity        groucho\
    \             chico               harpo\n                   (manager)        \
    \   (proxy agent)       (proxy dst)\n   Domain          snmpUDPDomain       snmpUDPDomain\
    \       acmeMgmtPrtcl\n   Address         1.2.3.4, 2002       1.2.3.5, 161   \
    \     0x98765432\n   Auth Prot       v2md5AuthProtocol   v2md5AuthProtocol   noAuth\n\
    \   Auth Priv Key   \"0123456789ABCDEF\"  \"GHIJKL0123456789\"  \"\"\n   Auth\
    \ Pub Key    \"\"                  \"\"                  \"\"\n   Auth Clock \
    \     0                   0                   0\n   Auth Lifetime   300      \
    \           300                 0\n   Priv Prot       noPriv              noPriv\
    \              noPriv\n   Priv Priv Key   \"\"                  \"\"         \
    \         \"\"\n   Priv Pub Key    \"\"                  \"\"                \
    \  \"\"\n             Table 9: Party Information for Proxy Agent\n          RFC\
    \ 1445       Administrative Model for SNMPv2      April 1993\n          Context\
    \     Proxy Destination    Proxy Source    Proxy Context\n          ducksoup \
    \   harpo                n/a             n/a\n                  Table 10: Proxy\
    \ Relationships for Proxy Agent\n               Identity          groucho    \
    \          chico\n                                 (manager)            (proxy\
    \ agent)\n               Domain            snmpUDPDomain        snmpUDPDomain\n\
    \               Address           1.2.3.4, 2002        1.2.3.5, 161\n        \
    \       Auth Prot         v2md5AuthProtocol    v2md5AuthProtocol\n           \
    \    Auth Priv Key     \"0123456789ABCDEF\"   \"GHIJKL0123456789\"\n         \
    \      Auth Pub Key      \"\"                   \"\"\n               Auth Clock\
    \        0                    0\n               Auth Lifetime     300        \
    \          300\n               Priv Prot         noPriv               noPriv\n\
    \               Priv Priv Key     \"\"                   \"\"\n              \
    \ Priv Pub Key      \"\"                   \"\"\n                Table 11: Party\
    \ Information for Management Station\n          Target     Subject    Context\
    \     Privileges\n          chico      groucho    ducksoup     35 (Get, GetNext\
    \ & GetBulk)\n          groucho    chico      ducksoup    132 (Response & SNMPv2-Trap)\n\
    \                  Table 12: Access Information for Foreign Proxy\n          As\
    \ represented in Table 9, the proxy agent party operates at\n          UDP port\
    \ 161 at IP address 1.2.3.5 using the party identity\n          chico; and, the\
    \ example manager operates at UDP port 2002 at\n          IP address 1.2.3.4 using\
    \ the identity groucho.  Both groucho\n          and chico authenticate all messages\
    \ that they generate by\n          using the protocol v2md5AuthProtocol and their\
    \ distinct,\n          private authentication keys.  Although these private\n\
    \          authentication key values (\"0123456789ABCDEF\" and\n          \"GHIJKL0123456789\"\
    ) are presented here for expository\n          RFC 1445       Administrative Model\
    \ for SNMPv2      April 1993\n          purposes, knowledge of private keys is\
    \ not normally afforded\n          to human beings and is confined to those portions\
    \ of the\n          protocol implementation that require it.\n          The party\
    \ harpo does not send or receive SNMPv2 protocol\n          messages; rather,\
    \ all communication with that party proceeds\n          via a hypothetical proprietary\
    \ protocol identified by the\n          value acmeMgmtPrtcl.  Because the party\
    \ harpo does not\n          participate in the SNMPv2, many of the attributes\
    \ recorded for\n          that party in the local database of party information\
    \ are\n          ignored.\n          Table 10 shows the proxy relationships known\
    \ to the proxy\n          agent.  In particular, the SNMPv2 context ducksoup refers\
    \ to a\n          relationship that is satisfied by the party harpo.  (The\n \
    \         transport domain of the proxy destination party determines the\n   \
    \       interpretation of the proxy source and proxy context\n          identities\
    \ - in this case, use of the acmeMgmtPrtcl indicates\n          that the proxy\
    \ source and context identities are ignored.)\n          In order to interrogate\
    \ the proprietary device associated with\n          the party harpo, the management\
    \ station groucho constructs a\n          SNMPv2 GetNext request contained within\
    \ a SnmpMgmtCom value\n          which references the SNMPv2 context ducksoup,\
    \ and transmits it\n          to the party chico operating (see Table 11) at UDP\
    \ port 161,\n          and IP address 1.2.3.5.  This request is authenticated\
    \ using\n          the private authentication key \"0123456789ABCDEF\".\n    \
    \      When that request is received by the party chico, the\n          originator\
    \ of the message is verified as being the party\n          groucho by using local\
    \ knowledge (see Table 9) of the private\n          authentication key \"0123456789ABCDEF\"\
    .  Because party groucho\n          is authorized to issue GetNext (as well as\
    \ Get and GetBulk)\n          requests with respect to party chico and the SNMPv2\
    \ context\n          ducksoup by the relevant access control policy (Table 12),\
    \ the\n          request is accepted.  Because the local database of context\n\
    \          information indicates that the SNMPv2 context ducksoup refers\n   \
    \       to a proxy relationship, the request is satisfied by its\n          translation\
    \ into appropriate operations of the acmeMgmtPrtcl\n          directed at party\
    \ harpo.  These new operations are transmitted\n          to the party harpo at\
    \ the address 0x98765432 in the\n          acmeMgmtPrtcl domain.\n          When\
    \ and if the proprietary protocol exchange between the\n          proxy agent\
    \ and the proprietary device concludes, a SNMPv2\n          RFC 1445       Administrative\
    \ Model for SNMPv2      April 1993\n          Response management operation is\
    \ constructed by the SNMPv2\n          party chico to relay the results to party\
    \ groucho again\n          referring to the SNMPv2 context ducksoup.  This response\n\
    \          communication is authenticated as to origin and integrity\n       \
    \   using the authentication protocol v2md5AuthProtocol and\n          private\
    \ authentication key \"GHIJKL0123456789\" specified for\n          transmissions\
    \ from party chico.  It is then transmitted to the\n          SNMPv2 party groucho\
    \ operating at the management station at IP\n          address 1.2.3.4 and UDP\
    \ port 2002 (the source address for the\n          corresponding request).\n \
    \         When this response is received by the party groucho, the\n         \
    \ originator of the message is verified as being the party chico\n          by\
    \ using local knowledge (see Table 11) of the private\n          authentication\
    \ key \"GHIJKL0123456789\".  Because party chico is\n          authorized to issue\
    \ Response communications with respect to\n          party groucho and SNMPv2\
    \ context ducksoup by the relevant\n          access control policy (Table 12),\
    \ the response is accepted,\n          and the interrogation of the proprietary\
    \ device is complete.\n          It is especially useful to observe that the local\
    \ database of\n          party information recorded at the proxy agent (Table\
    \ 9) need\n          be neither static nor configured exclusively by the management\n\
    \          station.  For instance, suppose that, in this example, the\n      \
    \    acmeMgmtPrtcl was a proprietary, MAC-layer mechanism for\n          managing\
    \ stations attached to a local area network.  In such\n          an environment,\
    \ the SNMPv2 party chico would reside at a\n          SNMPv2 proxy agent attached\
    \ to such a LAN and could, by\n          participating in the LAN protocols, detect\
    \ the attachment and\n          disconnection of various stations on the LAN.\
    \  In this\n          scenario, the SNMPv2 proxy agent could easily adjust its\
    \ local\n          database of party information to support indirect management\n\
    \          of the LAN stations by the SNMPv2 management station.  For\n      \
    \    each new LAN station detected, the SNMPv2 proxy agent would\n          add\
    \ to its local database of party information an entry\n          analogous to\
    \ that for party harpo (representing the new LAN\n          station itself), and\
    \ also add to its local database of context\n          information an entry analogous\
    \ to that for SNMPv2 context\n          ducksoup (representing a proxy relationship\
    \ for that new\n          station in the SNMPv2 domain).\n          By using the\
    \ SNMPv2 to interrogate the local database of party\n          information held\
    \ by the SNMPv2 proxy agent, a SNMPv2\n          management station can discover\
    \ and interact with new stations\n          as they are attached to the LAN.\n\
    \          RFC 1445       Administrative Model for SNMPv2      April 1993\n  \
    \        4.4.2.  Native Proxy Configuration\n          This section presents an\
    \ example configuration that supports\n          SNMPv2 native proxy operations\
    \ - indirect interaction between\n          a SNMPv2 agent and a management station\
    \ that is mediated by a\n          second SNMPv2 (proxy) agent.\n          This\
    \ example configuration is similar to that presented in the\n          discussion\
    \ of SNMPv2 foreign proxy above.  In this example,\n          however, the party\
    \ associated with the identity harpo receives\n          messages via the SNMPv2,\
    \ and, accordingly interacts with the\n          SNMPv2 proxy agent chico using\
    \ authenticated SNMPv2\n          communications.\n          Table 13 presents\
    \ information about SNMPv2 parties that is\n          recorded in the SNMPv2 proxy\
    \ agent's local database of party\n          information.  Table 14 presents information\
    \ about proxy\n          relationships that is recorded in the SNMPv2 proxy agent's\n\
    \          local database of context information.  Table 11 presents\n       \
    \   information about SNMPv2 parties that is recorded in the\n          SNMPv2\
    \ management station's local database of party\n          information.  Table\
    \ 15 presents information about the database\n          of access policy information\
    \ specified by the local\n          administration.\n          RFC 1445      \
    \ Administrative Model for SNMPv2      April 1993\n               Identity   \
    \       groucho              chico\n                                 (manager)\
    \            (proxy agent)\n               Domain            snmpUDPDomain   \
    \     snmpUDPDomain\n               Address           1.2.3.4, 2002        1.2.3.5,\
    \ 161\n               Auth Prot         v2md5AuthProtocol    v2md5AuthProtocol\n\
    \               Auth Priv Key     \"0123456789ABCDEF\"   \"GHIJKL0123456789\"\n\
    \               Auth Pub Key      \"\"                   \"\"\n              \
    \ Auth Clock        0                    0\n               Auth Lifetime     300\
    \                  300\n               Priv Prot         noPriv              \
    \ noPriv\n               Priv Priv Key     \"\"                   \"\"\n     \
    \          Priv Pub Key      \"\"                   \"\"\n               Identity\
    \          harpo                   zeppo\n                                 (proxy\
    \ dst)          (proxy src)\n               Domain            snmpUDPDomain  \
    \      snmpUDPDomain\n               Address           1.2.3.6, 161         1.2.3.5,\
    \ 161\n               Auth Prot         v2md5AuthProtocol    v2md5AuthProtocol\n\
    \               Auth Priv Key     \"MNOPQR0123456789\"   \"STUVWX0123456789\"\n\
    \               Auth Pub Key      \"\"                   \"\"\n              \
    \ Auth Clock        0                    0\n               Auth Lifetime     300\
    \                  300\n               Priv Prot         noPriv              \
    \ noPriv\n               Priv Priv Key     \"\"                   \"\"\n     \
    \          Priv Pub Key      \"\"                   \"\"\n                   Table\
    \ 13: Party Information for Proxy Agent\n          Context     Proxy Destination\
    \    Proxy Source    Proxy Context\n          ducksoup    harpo              \
    \  zeppo           bigstore\n          bigstore    groucho              chico\
    \           ducksoup\n                  Table 14: Proxy Relationships for Proxy\
    \ Agent\n          RFC 1445       Administrative Model for SNMPv2      April 1993\n\
    \          Target     Subject    Context     Privileges\n          chico     \
    \ groucho    ducksoup     35 (Get, GetNext & GetBulk)\n          groucho    chico\
    \      ducksoup    132 (Response & SNMPv2-Trap)\n          harpo      zeppo  \
    \    bigstore     35 (Get, GetNext & GetBulk)\n          zeppo      harpo    \
    \  bigstore    132 (Response & SNMPv2-Trap)\n                  Table 15: Access\
    \ Information for Native Proxy\n          As represented in Table 13, the proxy\
    \ agent party operates at\n          UDP port 161 at IP address 1.2.3.5 using\
    \ the party identity\n          chico; the example manager operates at UDP port\
    \ 2002 at IP\n          address 1.2.3.4 using the identity groucho; the proxy\
    \ source\n          party operates at UDP port 161 at IP address 1.2.3.5 using\
    \ the\n          party identity zeppo; and, the proxy destination party\n    \
    \      operates at UDP port 161 at IP address 1.2.3.6 using the party\n      \
    \    identity harpo.  Messages generated by all four SNMPv2 parties\n        \
    \  are authenticated as to origin and integrity by using the\n          authentication\
    \ protocol v2md5AuthProtocol and distinct,\n          private authentication keys.\
    \  Although these private\n          authentication key values (\"0123456789ABCDEF\"\
    ,\n          \"GHIJKL0123456789\", \"MNOPQR0123456789\", and\n          \"STUVWX0123456789\"\
    ) are presented here for expository\n          purposes, knowledge of private\
    \ keys is not normally afforded\n          to human beings and is confined to\
    \ those portions of the\n          protocol implementation that require it.\n\
    \          Table 14 shows the proxy relationships known to the proxy\n       \
    \   agent.  In particular, the SNMPv2 context ducksoup refers to a\n         \
    \ relationship that is satisfied when the SNMPv2 party zeppo\n          communicates\
    \ with the SNMPv2 party harpo and references the\n          SNMPv2 context bigstore.\n\
    \          In order to interrogate the proxied device associated with the\n  \
    \        party harpo, the management station groucho constructs a\n          SNMPv2\
    \ GetNext request contained with a SnmpMgmtCom value\n          which references\
    \ the SNMPv2 context ducksoup, and transmits it\n          to the party chico\
    \ operating (see Table 11) at UDP port 161\n          and IP address 1.2.3.5.\
    \  This request is authenticated using\n          the private authentication key\
    \ \"0123456789ABCDEF\".\n          When that request is received by the party\
    \ chico, the\n          originator of the message is verified as being the party\n\
    \          groucho by using local knowledge (see Table 13) of the private\n  \
    \        RFC 1445       Administrative Model for SNMPv2      April 1993\n    \
    \      authentication key \"0123456789ABCDEF\".  Because party groucho\n     \
    \     is authorized to issue GetNext (as well as Get and GetBulk)\n          requests\
    \ with respect to party chico and the SNMPv2 context\n          ducksoup by the\
    \ relevant access control policy (Table 15), the\n          request is accepted.\
    \  Because the local database of context\n          information indicates that\
    \ the SNMPv2 context ducksoup refers\n          to a proxy relationship, the request\
    \ is satisfied by its\n          translation into a corresponding SNMPv2 GetNext\
    \ request\n          directed from party zeppo to party harpo referencing SNMPv2\n\
    \          context bigstore.  This new communication is authenticated\n      \
    \    using the private authentication key \"STUVWX0123456789\" and\n         \
    \ transmitted to party harpo at the IP address 1.2.3.6.\n          When this new\
    \ request is received by the party harpo, the\n          originator of the message\
    \ is verified as being the party zeppo\n          by using local knowledge of\
    \ the private authentication key\n          \"STUVWX0123456789\".  Because party\
    \ zeppo is authorized to\n          issue GetNext (as well as Get and GetBulk)\
    \ requests with\n          respect to party harpo and the SNMPv2 context bigstore\
    \ by the\n          relevant access control policy (Table 15), the request is\n\
    \          accepted.  A SNMPv2 Response message representing the results\n   \
    \       of the query is then generated by party harpo to party zeppo\n       \
    \   referencing SNMPv2 context bigstore.  This response\n          communication\
    \ is authenticated as to origin and integrity\n          using the private authentication\
    \ key \"MNOPQR0123456789\" and\n          transmitted to party zeppo at IP address\
    \ 1.2.3.5 (the source\n          address for the corresponding request).\n   \
    \       When this response is received by party zeppo, the originator\n      \
    \    of the message is verified as being the party harpo by using\n          local\
    \ knowledge (see Table 13) of the private authentication\n          key \"MNOPQR0123456789\"\
    .  Because party harpo is authorized to\n          issue Response communications\
    \ with respect to party zeppo and\n          SNMPv2 context bigstore by the relevant\
    \ access control policy\n          (Table 15), the response is accepted, and is\
    \ used to construct\n          a response to the original GetNext request, indicating\
    \ a\n          SNMPv2 context of ducksoup.  This response, from party chico\n\
    \          to party groucho, is authenticated as to origin and integrity\n   \
    \       using the private authentication key \"GHIJKL0123456789\" and is\n   \
    \       transmitted to the party groucho at IP address 1.2.3.4 (the\n        \
    \  source address for the original request).\n          When this response is\
    \ received by the party groucho, the\n          originator of the message is verified\
    \ as being the party chico\n          by using local knowledge (see Table 13)\
    \ of the private\n          RFC 1445       Administrative Model for SNMPv2   \
    \   April 1993\n          authentication key \"GHIJKL0123456789\".  Because party\
    \ chico is\n          authorized to issue Response communications with respect\
    \ to\n          party groucho and SNMPv2 context ducksoup by the relevant\n  \
    \        access control policy (Table 15), the response is accepted,\n       \
    \   and the interrogation is complete.\n          4.5.  Public Key Configuration\n\
    \          This section presents an example configuration predicated upon\n  \
    \        a hypothetical security protocol.  This hypothetical protocol\n     \
    \     would be based on asymmetric (public key) cryptography as a\n          means\
    \ for providing data origin authentication (but not\n          protection against\
    \ disclosure).  This example illustrates the\n          consistency of the administrative\
    \ model with public key\n          technology, and the extension of the example\
    \ to support\n          protection against disclosure should be apparent.\n  \
    \             Identity          ollie                stan\n                  \
    \               (agent)              (manager)\n               Domain        \
    \    snmpUDPDomain        snmpUDPDomain\n               Address           1.2.3.4,\
    \ 161         1.2.3.5, 2004\n               Auth Prot         pkAuthProtocol \
    \      pkAuthProtocol\n               Auth Priv Key     \"0123456789ABCDEF\" \
    \  \"\"\n               Auth Pub Key      \"0123456789abcdef\"   \"ghijkl0123456789\"\
    \n               Auth Clock        0                    0\n               Auth\
    \ Lifetime     300                  300\n               Priv Prot         noPriv\
    \               noPriv\n               Priv Priv Key     \"\"                \
    \   \"\"\n               Priv Pub Key      \"\"                   \"\"\n     \
    \            Table 16: Party Information for Public Key Agent\n          The example\
    \ configuration comprises a single SNMPv2 agent that\n          interacts with\
    \ a single SNMPv2 management station.  Tables 16\n          and 17 present information\
    \ about SNMPv2 parties that is by the\n          agent and manager, respectively,\
    \ while Table 5 presents\n          information about the local access policy\
    \ that is known to\n          both manager and agent.\n          RFC 1445    \
    \   Administrative Model for SNMPv2      April 1993\n               Identity \
    \         ollie                stan\n                                 (agent)\
    \              (manager)\n               Domain            snmpUDPDomain     \
    \   snmpUDPDomain\n               Address           1.2.3.4, 161         1.2.3.5,\
    \ 2004\n               Auth Prot         pkAuthProtocol       pkAuthProtocol\n\
    \               Auth Priv Key     \"\"                   \"GHIJKL0123456789\"\n\
    \               Auth Pub Key      \"0123456789abcdef\"   \"ghijkl0123456789\"\n\
    \               Auth Clock        0                    0\n               Auth\
    \ Lifetime     300                  300\n               Priv Prot         noPriv\
    \               noPriv\n               Priv Priv Key     \"\"                \
    \   \"\"\n               Priv Pub Key      \"\"                   \"\"\n     \
    \     Table 17: Party Information for Public Key Management Station\n        \
    \  As represented in Table 16, the example agent party operates\n          at\
    \ UDP port 161 at IP address 1.2.3.4 using the party identity\n          ollie;\
    \ the example manager operates at UDP port 2004 at IP\n          address 1.2.3.5\
    \ using the identity stan.  Both ollie and stan\n          authenticate all messages\
    \ that they generate as to origin and\n          integrity by using the hypothetical\
    \ SNMPv2 authentication\n          protocol pkAuthProtocol and their distinct,\
    \ private\n          authentication keys.  Although these private authentication\n\
    \          key values (\"0123456789ABCDEF\" and \"GHIJKL0123456789\") are\n  \
    \        presented here for expository purposes, knowledge of private\n      \
    \    keys is not normally afforded to human beings and is confined\n         \
    \ to those portions of the protocol implementation that require\n          it.\n\
    \          In most respects, the interaction between manager and agent in\n  \
    \        this configuration is almost identical to that in the example\n     \
    \     of the minimal, secure SNMPv2 agent described above.  The most\n       \
    \   significant difference is that neither SNMPv2 party in the\n          public\
    \ key configuration has knowledge of the private key by\n          which the other\
    \ party authenticates its transmissions.\n          Instead, for each received\
    \ authenticated SNMPv2 communication,\n          the identity of the originator\
    \ is verified by applying an\n          asymmetric cryptographic algorithm to\
    \ the received message\n          together with the public authentication key\
    \ for the\n          originating party.  Thus, in this configuration, the agent\n\
    \          knows the manager's public key (\"ghijkl0123456789\") but not\n   \
    \       its private key (\"GHIJKL0123456789\"); similarly, the manager\n     \
    \     knows the agent's public key (\"0123456789abcdef\") but not its\n      \
    \    RFC 1445       Administrative Model for SNMPv2      April 1993\n        \
    \  private key (\"0123456789ABCDEF\").\n          RFC 1445       Administrative\
    \ Model for SNMPv2      April 1993\n          5.  Security Considerations\n  \
    \        In order to participate in the administrative model set forth\n     \
    \     in this memo, SNMPv2 implementations must support local, non-\n        \
    \  volatile storage of the local database of party information.\n          Accordingly,\
    \ every attempt has been made to minimize the\n          amount of non-volatile\
    \ storage required.\n          RFC 1445       Administrative Model for SNMPv2\
    \      April 1993\n          6.  Acknowledgements\n          This document is\
    \ based, almost entirely, on RFC 1351.\n          RFC 1445       Administrative\
    \ Model for SNMPv2      April 1993\n          7.  References\n          [1]  Case,\
    \ J., Fedor, M., Schoffstall, M., Davin, J., \"Simple\n               Network\
    \ Management Protocol\", STD 15, RFC 1157, SNMP\n               Research, Performance\
    \ Systems International, MIT\n               Laboratory for Computer Science,\
    \ May 1990.\n          [2]  Case, J., McCloghrie, K., Rose, M., and Waldbusser,\
    \ S.,\n               \"Protocol Operations for version 2 of the Simple Network\n\
    \               Management Protocol (SNMPv2)\", RFC 1448, SNMP Research,\n   \
    \            Inc., Hughes LAN Systems, Dover Beach Consulting, Inc.,\n       \
    \        Carnegie Mellon University, April 1993.\n          [3]  Case, J., McCloghrie,\
    \ K., Rose, M., and Waldbusser, S.,\n               \"Structure of Management\
    \ Information for version 2 of the\n               Simple Network Management Protocol\
    \ (SNMPv2)\", RFC 1442,\n               SNMP Research, Inc., Hughes LAN Systems,\
    \ Dover Beach\n               Consulting, Inc., Carnegie Mellon University, April\
    \ 1993.\n          [4]  McCloghrie, K., and Galvin, J., \"Party MIB for version\
    \ 2\n               of the Simple Network Management Protocol (SNMPv2)\", RFC\n\
    \               1447, Hughes LAN Systems, Trusted Information Systems,\n     \
    \          April 1993.\n          [5]  Case, J., McCloghrie, K., Rose, M., and\
    \ Waldbusser, S.,\n               \"Transport Mappings for version 2 of the Simple\
    \ Network\n               Management Protocol (SNMPv2)\", RFC 1449, SNMP Research,\n\
    \               Inc., Hughes LAN Systems, Dover Beach Consulting, Inc.,\n    \
    \           Carnegie Mellon University, April 1993.\n          [6]  Galvin, J.,\
    \ and McCloghrie, K., \"Security Protocols for\n               version 2 of the\
    \ Simple Network Management Protocol\n               (SNMPv2)\", RFC 1446, Trusted\
    \ Information Systems, Hughes\n               LAN Systems, April 1993.\n     \
    \     [7]  Case, J., McCloghrie, K., Rose, M., and Waldbusser, S.,\n         \
    \      \"Management Information Base for version 2 of the Simple\n           \
    \    Network Management Protocol (SNMPv2)\", RFC 1450, SNMP\n               Research,\
    \ Inc., Hughes LAN Systems, Dover Beach\n               Consulting, Inc., Carnegie\
    \ Mellon University, April 1993.\n          RFC 1445       Administrative Model\
    \ for SNMPv2      April 1993\n          8.  Authors' Addresses\n             \
    \  James M. Galvin\n               Trusted Information Systems, Inc.\n       \
    \        3060 Washington Road, Route 97\n               Glenwood, MD 21738\n \
    \              Phone:  +1 301 854-6889\n               EMail:  galvin@tis.com\n\
    \               Keith McCloghrie\n               Hughes LAN Systems\n        \
    \       1225 Charleston Road\n               Mountain View, CA  94043\n      \
    \         US\n               Phone: +1 415 966 7934\n               Email: kzm@hls.com\n"
