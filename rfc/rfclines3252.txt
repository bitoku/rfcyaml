Abstract This document defines a reformulation of IP and two transport layer protocols (TCP and UDP) as XML applications.
This document describes the Binary Lexical Octet Ad hoc Transport (BLOAT): a reformulation of a widely deployed network layer protocol (IP [RFC791]), and two associated transport layer protocols (TCP [RFC793] and UDP [RFC768]) as XML [XML] applications.
It also describes methods for transporting BLOAT over Ethernet and IEEE 802 networks as well as encapsulating BLOAT in IP for gatewaying BLOAT across the public Internet.
The wild popularity of XML as a basis for application level protocols such as the Blocks Extensible Exchange Protocol [RFC3080], the Simple Object Access Protocol [SOAP], and Jabber [JABBER] prompted investigation into the possibility of extending the use of XML in the protocol stack.
Using XML at both the transport and network layer in addition to the application layer would provide for an amazing amount of power and flexibility while removing dependencies on proprietary and hard to understand binary protocols.
This protocol unification would also allow applications to use a single XML parser for all aspects of their operation, eliminating developer time spent figuring out the intricacies of each new protocol, and moving the hard work of parsing to the XML toolset.
The use of XML also mitigates concerns over "network vs. host" byte ordering which is at the root of many network application bugs.
The reformulations specified in this RFC follow as closely as possible the spirit of the RFCs on which they are based, and so MAY contain elements or attributes that would not be needed in a pure reworking (e.g. length attributes, which are implicit in XML.)
The layering of network and transport protocols are maintained in this RFC despite the optimizations that could be made if the line were somewhat blurred (i.e. merging TCP and IP into a single, larger element in the DTD) in order to foster future use of this protocol as a basis for reformulating other protocols (such as ICMP.)
Other than the encoding, the behavioral aspects of each of the existing protocols remain unchanged.
Routing, address spaces, TCP congestion control, etc.
behave as specified in the extant standards.
Adapting to new standards and experimental algorithm heuristics for improving performance will become much easier once the move to BLOAT has been completed.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14, RFC 2119 [RFC2119].
This protocol MUST be implemented to be compliant with this RFC.
IPoXML is the root protocol REQUIRED for effective use of TCPoXML (section 3.) and higher level application protocols.
The DTD for this document type can be found in section 7.1.
The routing of IPoXML can be easily implemented on hosts with an XML parser, as the regular structure lends itself handily to parsing and validation of the document/datagram and then processing the destination address, TTL, and checksum before sending it on to its next hop.
The reformulation of IPv4 was chosen over IPv6 [RFC2460] due to the wider deployment of IPv4 and the fact that implementing IPv6 as XML would have exceeded the 1500 byte Ethernet MTU.
All BLOAT implementations MUST use and specify the UTF 8 encoding of RFC 2279 [RFC2279].
All BLOAT document/datagrams MUST be well  formed and include the XMLDecl.
A number of items have changed (for the better) from the original IP specification.
Bit masks, where present have been converted into human readable values.
IP addresses are listed in their dotted  decimal notation [RFC1123].
Length and checksum values are present as decimal integers.
To calculate the length and checksum fields of the IP element, a canonicalized form of the element MUST be used.
The canonical form SHALL have no whitespace (including newline characters) between elements and only one space character between attributes.
There SHALL NOT be a space following the last attribute in an element.
An iterative method SHOULD be used to calculate checksums, as the length field will vary based on the size of the checksum.
The payload element bears special attention.
Due to the character set restrictions of XML, the payload of IP datagrams (which MAY contain arbitrary data) MUST be encoded for transport.
This RFC REQUIRES the contents of the payload to be encoded in the base 64 encoding of RFC 2045 [RFC2045], but removes the requirement that the encoded output MUST be wrapped on 76 character lines.
The following is an example IPoXML datagram with an empty payload: <?
xml version "1.0" encoding "UTF 8"?
> <flags reserved "0" df "dont" mf "
> <end copied "0" class "0" number "0"/
> </options> <padding pad "0"/
This protocol MUST be implemented to be compliant with this RFC.
The DTD for this document type can be found in section 7.2.
A number of items have changed from the original TCP specification.
Bit masks, where present have been converted into human readable values.
Length and checksum and port values are present as decimal integers.
To calculate the length and checksum fields of the TCP element, a canonicalized form of the element MUST be used as in section 2.1.
An iterative method SHOULD be used to calculate checksums as in section 2.1.
The payload element MUST be encoded as in section 2.1.
The TCP offset element was expanded to a maximum of 255 from 16 to allow for the increased size of the header in XML.
TCPoXML datagrams encapsulated by IPoXML MAY omit the <?
header as well as the <!
The following is an example TCPoXML datagram with an empty payload: <?
xml version "1.0" encoding "UTF 8"?
" //IETF//DTD BLOAT 1.0 TCP//EN
<control syn "1" ack "1"/
This protocol MUST be implemented to be compliant with this RFC.
The DTD for this document type can be found in section 7.3.
A number of items have changed from the original UDP specification.
Bit masks, where present have been converted into human readable values.
Length and checksum and port values are present as decimal integers.
To calculate the length and checksum fields of the UDP element, a canonicalized form of the element MUST be used as in section 2.1.
An iterative method SHOULD be used to calculate checksums as in section 2.1.
The payload element MUST be encoded as in section 2.1.
UDPoXML datagrams encapsulated by IPoXML MAY omit the <?
header as well as the <!
The following is an example UDPoXML datagram with an empty payload: <?
xml version "1.0" encoding "UTF 8"?
This document provides for the transmission of BLOAT datagrams over two common families of physical layer transport.
Future RFCs will address additional transports as routing vendors catch up to the specification, and we begin to see BLOAT routed across the Internet backbone.
Ethernet BLOAT is encapsulated in Ethernet datagrams as in [RFC894] with the exception that the type field of the Ethernet frame MUST contain the value 0xBEEF.
The first 5 octets of the Ethernet frame payload will be 0x3c 3f 78
BLOAT is encapsulated in IEEE 802 Networks as in [RFC1042] except that the protocol type code for IPoXML is 0xBEEF.
In order to facilitate the gradual introduction of BLOAT into the public Internet, BLOAT MAY be encapsulated in IP as in [RFC2003] to gateway between networks that run BLOAT natively on their LANs.
DTDs The Transport DTDs (7.2. and 7.3.)
build on the definitions in the Network DTD (7.1.)
The DTDs are referenced by their PubidLiteral and SystemLiteral (from [XML]) although it is understood that most IPoXML implementations will not need to pull down the DTD, as it will normally be embedded in the implementation, and presents something of a catch 22 if you need to load part of your network protocol over the network.
DTD for IP over XML.
Refer to this DTD as: <!
Top Secret   Reserved" Compartments [0..65535]
ELEMENT header (version, tos, total.length, id, flags, offset, ttl, protocol, checksum, source, destination, options, padding)
ATTLIST header length %Digits; #REQUIRED> <!
ATTLIST version value   %Digits;  #REQUIRED> <!
total length of datagram (header and payload) in octets, MUST be less than 65,535
(and SHOULD be less than 1024 for IPoXML on local ethernets).
ATTLIST total.length value %Digits; #REQUIRED> <!
d value %Digits; #REQUIRED> <!
ATTLIST offset value %Digits; #REQUIRED> <!
ATTLIST ttl value %Digits; #REQUIRED> <!
ATTLIST protocol value %Digits; #REQUIRED> <!
ATTLIST checksum value %Digits; #REQUIRED> <!
strict   record   stream   timestamp )
ATTLIST end copied (0 1)
CDATA #FIXED "0" number CDATA
ATTLIST noop copied (0 1)
CDATA #FIXED "0" number CDATA
ATTLIST security copied CDATA #FIXED "1" class  CDATA
#FIXED "2" length CDATA #FIXED "11" security %Sec; #REQUIRED compartments %Compartments; #REQUIRED handling %Handling; #REQUIRED tcc %TCC;
ATTLIST loose copied CDATA #FIXED "1" class  CDATA
#FIXED "3" length %Digits; #REQUIRED pointer %Digits
ATTLIST strict copied CDATA #FIXED "1" class  CDATA
#FIXED "9" length %Digits; #REQUIRED pointer %Digits
ATTLIST record copied CDATA #FIXED "0
CDATA #FIXED "0" number CDATA
#FIXED "7" length %Digits; #REQUIRED pointer %Digits
ATTLIST stream copied CDATA #FIXED "1" class  CDATA
#FIXED "0" number CDATA #FIXED "8" length CDATA
" id %Digits; #REQUIRED> <!
ATTLIST timestamp copied CDATA #FIXED "0" class  CDATA
#FIXED "4" length %Digits;  #REQUIRED pointer %Digits; #REQUIRED oflw %Digits
padding to bring header to 32 bit boundary.
ATTLIST padding pad CDATA #REQUIRED> <!
DTD for TCP over XML.
Refer to this DTD as: <!
" //IETF//DTD BLOAT 1.0 TCP//EN
ATTLIST src port %Digits; #REQUIRED> <!
ATTLIST dest port %Digits; #REQUIRED> <!
ATTLIST sequence number %Digits; #REQUIRED> <!
ATTLIST acknowledgement number %Digits; #REQUIRED> <!
ATTLIST control urg (0 1)
ATTLIST window size %Digits; #REQUIRED> <!
tcp header   data length in octets.
does not include the size of the pseudoheader.
tcp.length value %Digits; #REQUIRED> <!
ATTLIST urgent pointer %Digits; #REQUIRED> <!
#FIXED "2" length CDATA #FIXED "4" size %Digits;
DTD for UDP over XML.
Refer to this DTD as: <!
ELEMENT udp (udp.pseudoheader?, udp.header, payload)
udp header   data length in octets.
does not include the size of the pseudoheader.
ATTLIST udp.length value %Digits; #REQUIRED> 8.
Security Considerations XML, as a subset of SGML, has the same security considerations as specified in SGML Media Types [RFC1874].
Security considerations that apply to IP, TCP and UDP also likely apply to BLOAT as it does not attempt to correct for issues not related to message format.
