- title: __initial_text__
  contents:
  - '                    The Post Office Protocol (POP3)

    '
- title: Simple Authentication and Security Layer (SASL) Authentication Mechanism
  contents:
  - 'Simple Authentication and Security Layer (SASL) Authentication Mechanism

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a profile of the Simple Authentication and\n\
    \   Security Layer (SASL) for the Post Office Protocol (POP3).  This\n   extension\
    \ allows a POP3 client to indicate an authentication\n   mechanism to the server,\
    \ perform an authentication protocol exchange,\n   and optionally negotiate a\
    \ security layer for subsequent protocol\n   interactions during this session.\n\
    \   This document seeks to consolidate the information related to POP3\n   AUTH\
    \ into a single document.  To this end, this document obsoletes\n   and replaces\
    \ RFC 1734, and updates the information contained in\n   Section 6.3 of RFC 2449.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The POP3 (see [RFC1939]) AUTH command (see [RFC1734]) has\
    \ suffered\n   several problems in its specification.  The first is that it was\
    \ very\n   similar to a SASL framework defined by [RFC4422], but pre-dated the\n\
    \   initial SASL specification.  It was therefore missing some key\n   components,\
    \ such as a way to list the available authentication\n   mechanisms.\n   Later,\
    \ [RFC2449] attempted to remedy this situation by adding the\n   CAPA command\
    \ and allowing an initial client response with the AUTH\n   command, but problems\
    \ remained in the clarity of the specification of\n   how the initial client response\
    \ was to be handled.\n   Together, this means creating a full POP3 AUTH implementation\n\
    \   requires an understanding of material in at least five different\n   documents\
    \ (and [RFC3206] provides additional response codes that are\n   useful during\
    \ authentication).\n   This document attempts to combine the information in [RFC1734]\
    \ and\n   [RFC2449] to simplify this situation.  Additionally, it aims to\n  \
    \ clarify and update the older specifications where appropriate.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   In examples, \"C:\" and \"S:\" indicate lines sent by the\
    \ client and\n   server respectively.\n   Formal syntax is defined by [RFC4234].\n"
- title: 3.  The SASL Capability
  contents:
  - "3.  The SASL Capability\n   This section supersedes the definition of the SASL\
    \ Capability in\n   section 6.3 of [RFC2449].\n   CAPA tag:\n      SASL\n   Arguments:\n\
    \      Supported SASL Mechanisms\n   Added commands:\n      AUTH\n   Standard\
    \ commands affected:\n      None\n   Announced states / possible differences:\n\
    \      both / no\n   Commands valid in states:\n      AUTHORIZATION\n   Specification\
    \ reference:\n      This document and [RFC4422]\n   Discussion:\n      The SASL\
    \ capability permits the use of the AUTH command (as\n      defined in Section\
    \ 4 of this document) to begin a SASL negotiation\n      (as defined in [RFC4422]).\
    \  The argument to the SASL capability is\n      a space-separated list of SASL\
    \ mechanisms that are supported.\n      If a server either does not support the\
    \ CAPA command or does not\n      advertise the SASL capability, clients SHOULD\
    \ NOT attempt the AUTH\n      command.  If a client does attempt the AUTH command\
    \ in such a\n      situation, it MUST NOT supply the client initial response\n\
    \      parameter (for backwards compatibility with [RFC1734]).\n      Note that\
    \ the list of available mechanisms MAY change after a\n      successful STLS command\
    \ (see [RFC2595]).  However, as required by\n      [RFC2449], implementations\
    \ MUST continue to include the SASL\n      capability even after a successful\
    \ AUTH command has been completed\n      (even though no further AUTH commands\
    \ may be issued).\n   Example\n      S: +OK pop.example.com BlurdyBlurp POP3 server\
    \ ready\n      C: CAPA\n      S: +OK List of capabilities follows\n      S: SASL\
    \ PLAIN DIGEST-MD5 GSSAPI ANONYMOUS\n      S: STLS\n      S: IMPLEMENTATION BlurdyBlurp\
    \ POP3 server\n      S: .\n"
- title: 4.  The AUTH Command
  contents:
  - "4.  The AUTH Command\n   AUTH mechanism [initial-response]\n      Arguments:\n\
    \         mechanism: A string identifying a SASL authentication\n         mechanism.\n\
    \         initial-response: An optional initial client response, as\n        \
    \ defined in Section 3 of [RFC4422].  If present, this response\n         MUST\
    \ be encoded as Base64 (specified in Section 4 of\n         [RFC4648]), or consist\
    \ only of the single character \"=\", which\n         represents an empty initial\
    \ response.\n      Restrictions:\n         After an AUTH command has been successfully\
    \ completed, no more\n         AUTH commands may be issued in the same session.\
    \  After a\n         successful AUTH command completes, a server MUST reject any\n\
    \         further AUTH commands with an -ERR reply.\n         The AUTH command\
    \ may only be given during the AUTHORIZATION\n         state.\n      Discussion:\n\
    \         The AUTH command initiates a SASL authentication exchange\n        \
    \ between the client and the server.  The client identifies the\n         SASL\
    \ mechanism to use with the first parameter of the AUTH\n         command.  If\
    \ the server supports the requested authentication\n         mechanism, it performs\
    \ the SASL exchange to authenticate the\n         user.  Optionally, it also negotiates\
    \ a security layer for\n         subsequent protocol interactions during this\
    \ session.  If the\n         requested authentication mechanism is not supported,\
    \ the server\n         rejects the AUTH command with an -ERR reply.\n        \
    \ The authentication protocol exchange consists of a series of\n         server\
    \ challenges and client responses that are specific to the\n         chosen SASL\
    \ mechanism.\n         A server challenge is sent as a line consisting of a \"\
    +\"\n         character, followed by a single space and a string encoded\n   \
    \      using Base64, as specified in Section 4 of [RFC4648].  This\n         line\
    \ MUST NOT contain any text other than the BASE64-encoded\n         challenge.\n\
    \         A client response consists of a line containing a string\n         encoded\
    \ as Base64.  If the client wishes to cancel the\n         authentication exchange,\
    \ it issues a line with a single \"*\".\n         If the server receives such\
    \ a response, it MUST reject the AUTH\n         command by sending an -ERR reply.\n\
    \         The optional initial-response argument to the AUTH command is\n    \
    \     used to save a round trip when using authentication mechanisms\n       \
    \  that support an initial client response.  If the initial\n         response\
    \ argument is omitted and the chosen mechanism requires\n         an initial client\
    \ response, the server MUST proceed by issuing\n         an empty challenge, as\
    \ defined in Section 3 of [RFC4422].  In\n         POP3, an empty server challenge\
    \ is defined as a line with only\n         a \"+\", followed by a single space.\
    \  It MUST NOT contain any\n         other data.\n         For the purposes of\
    \ the initial client response, the 255-octet\n         limit on the length of\
    \ a single command, defined in Section 4\n         of [RFC2449], still applies.\
    \  If specifying an initial response\n         would cause the AUTH command to\
    \ exceed this length, the client\n         MUST NOT use the initial-response parameter\
    \ (and must proceed\n         instead by sending its initial response after an\
    \ empty\n         challenge from the server, as in Section 3 of [RFC4422]).\n\
    \         If the client needs to send a zero-length initial response, it\n   \
    \      MUST transmit the response as a single equals sign (\"=\").  This\n   \
    \      indicates that the response is present, but contains no data.\n       \
    \  If the client uses an initial-response argument to the AUTH\n         command\
    \ with a SASL mechanism that does not support an initial\n         client send,\
    \ the server MUST reject the AUTH command with an\n         -ERR reply.\n    \
    \     If the server cannot Base64 decode a client response, it MUST\n        \
    \ reject the AUTH command with an -ERR reply.  If the client\n         cannot\
    \ Base64 decode any of the server's challenges, it MUST\n         cancel the authentication\
    \ using the \"*\" response.  In\n         particular, servers and clients MUST\
    \ reject (and not ignore)\n         any character not explicitly allowed by the\
    \ Base64 alphabet,\n         and MUST reject any sequence of Base64 characters\
    \ that contains\n         the pad character ('=') anywhere other than the end\
    \ of the\n         string (e.g., \"=AAA\" and \"AAA=BBB\" are not allowed).\n\
    \         Excepting the initial client response, these BASE64 strings may\n  \
    \       be of arbitrary length, depending on the authentication\n         mechanism\
    \ in use.  Clients and servers MUST be able to handle\n         the largest encoded\
    \ challenges and responses generated by the\n         authentication mechanisms\
    \ they support.  This requirement is\n         independent of any line-length\
    \ limitations the client or server\n         may have in other parts of its protocol\
    \ implementation.\n         If the server is unable to authenticate the client,\
    \ it MUST\n         reject the AUTH command with an -ERR reply.  Should the client\n\
    \         successfully complete the exchange, the server issues a +OK\n      \
    \   reply.  Additionally, upon success, the POP3 session enters the\n        \
    \ TRANSACTION state.\n         The authorization identity generated by the SASL\
    \ exchange is a\n         simple username, and SHOULD use the SASLprep profile\
    \ (see\n         [RFC4013]) of the StringPrep algorithm (see [RFC3454]) to\n \
    \        prepare these names for matching.  If preparation of the\n         authorization\
    \ identity fails or results in an empty string\n         (unless it was transmitted\
    \ as the empty string), the server\n         MUST fail the authentication.\n \
    \        If a security layer is negotiated during the SASL exchange, it\n    \
    \     takes effect for the client on the octet immediately following\n       \
    \  the CRLF that concludes the last response generated by the\n         client.\
    \  For the server, it takes effect immediately following\n         the CRLF of\
    \ its success reply.\n         When a security layer takes effect, the server\
    \ MUST discard any\n         knowledge previously obtained from the client, which\
    \ was not\n         obtained from the SASL negotiation itself.  Likewise, the\n\
    \         client MUST discard any knowledge obtained from the server,\n      \
    \   such as the list of available POP3 service extensions.\n         When both\
    \ Transport Layer Security (TLS) (see [RFC4346]) and\n         SASL security layers\
    \ are in effect, the TLS encoding MUST be\n         applied after the SASL encoding\
    \ when sending data.  (According\n         to [RFC2595], STLS can only be issued\
    \ before AUTH in any case.)\n         Note that POP3 does not allow for additional\
    \ data to be sent\n         with a message indicating a successful outcome (see\
    \ Section 3.6\n         of [RFC4422]).\n         The service name specified by\
    \ this protocol's profile of SASL\n         is \"pop\".\n         If an AUTH command\
    \ fails, the client may try another\n         authentication mechanism or present\
    \ different credentials by\n         issuing another AUTH command (or by using\
    \ one of the other POP3\n         authentication mechanisms).  Likewise, the server\
    \ MUST behave\n         as if the client had not issued the AUTH command.\n  \
    \       To ensure interoperability, client and server implementations\n      \
    \   of this extension MUST implement the PLAIN SASL mechanism\n         [RFC4616]\
    \ running over TLS [RFC2595].\n         A server implementation MUST implement\
    \ a configuration in which\n         it does NOT advertise or permit any plaintext\
    \ password\n         mechanisms, unless the STLS command has been used to negotiate\n\
    \         a TLS session (see [RFC2595]).  As described by RFC 4616, this\n   \
    \      configuration SHOULD be the default configuration.  Before\n         using\
    \ a plaintext password mechanism over a TLS session, client\n         implementations\
    \ MUST verify the TLS server certificate as\n         required by RFC 2595, Section\
    \ 2.4.  Client and server\n         implementations SHOULD implement additional\
    \ SASL mechanisms\n         that do not send plaintext passwords, such as the\
    \ GSSAPI\n         [RFC4752] mechanism.\n"
- title: 5.  Formal Syntax
  contents:
  - "5.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n\
    \   Form notation as specified in [RFC4234].  The rules CRLF, ALPHA, and\n   DIGIT\
    \ are imported from [RFC4234].  The sasl-mech rule is from\n   [RFC4422].\n  \
    \ Except as noted otherwise, all alphabetic characters are case-\n   insensitive.\
    \  The use of upper- or lower-case characters to define\n   token strings is for\
    \ editorial clarity only.  Implementations MUST\n   accept these strings in a\
    \ case-insensitive fashion.\n      auth-command     = \"AUTH\" SP sasl-mech [SP\
    \ initial-response]\n                         *(CRLF [base64]) [CRLF cancel-response]\
    \ CRLF\n      initial-response = base64 / \"=\"\n      cancel-response  = \"*\"\
    \n      base64           = base64-terminal /\n                         ( 1*(4base64-CHAR)\
    \ [base64-terminal] )\n      base64-char      = ALPHA / DIGIT / \"+\" / \"/\"\n\
    \                         ;; Case-sensitive\n      base64-terminal  = (2base64-char\
    \ \"==\") / (3base64-char \"=\")\n      continue-req     = \"+\" SP [base64] CRLF\n\
    \   Additionally, the ABNF specified in [RFC2449] is updated as follows:\n   \
    \   response         =/ continue-req\n"
- title: 6.  Examples
  contents:
  - "6.  Examples\n   Here is an example of a client attempting AUTH PLAIN (see [RFC4616])\n\
    \   under TLS and making use of the initial client response:\n        S: +OK pop.example.com\
    \ BlurdyBlurp POP3 server ready\n        C: CAPA\n        S: +OK List of capabilities\
    \ follows\n        S: SASL DIGEST-MD5 GSSAPI ANONYMOUS\n        S: STLS\n    \
    \    S: IMPLEMENTATION BlurdyBlurp POP3 server\n        S: .\n        C: STLS\n\
    \        S: +OK Begin TLS negotiation now\n            (TLS negotiation proceeds,\
    \ further commands protected by TLS\n            layer)\n        C: CAPA\n   \
    \     S: +OK List of capabilities follows\n        S: SASL PLAIN DIGEST-MD5 GSSAPI\
    \ ANONYMOUS\n        S: IMPLEMENTATION BlurdyBlurp POP3 server\n        S: .\n\
    \        C: AUTH PLAIN dGVzdAB0ZXN0AHRlc3Q=\n        S: +OK Maildrop locked and\
    \ ready\n   Here is another client that is attempting AUTH PLAIN under a TLS\n\
    \   layer, this time without the initial response.  Parts of the\n   negotiation\
    \ before the TLS layer was established have been omitted:\n            (TLS negotiation\
    \ proceeds, further commands protected by TLS\n            layer)\n        C:\
    \ CAPA\n        S: +OK List of capabilities follows\n        S: SASL PLAIN DIGEST-MD5\
    \ GSSAPI ANONYMOUS\n        S: IMPLEMENTATION BlurdyBlurp POP3 server\n      \
    \  S: .\n        C: AUTH PLAIN\n            (note that there is a space following\
    \ the '+' on the\n            following line)\n        S: +\n        C: dGVzdAB0ZXN0AHRlc3Q=\n\
    \        S: +OK Maildrop locked and ready\n   Here is an example using a mechanism\
    \ in which the exchange begins\n   with a server challenge (the long lines are\
    \ broken for editorial\n   clarity only):\n         S: +OK pop.example.com BlurdyBlurp\
    \ POP3 server ready\n         C: CAPA\n         S: +OK List of capabilities follows\n\
    \         S: SASL DIGEST-MD5 GSSAPI ANONYMOUS\n         S: STLS\n         S: IMPLEMENTATION\
    \ BlurdyBlurp POP3 server\n         S: .\n         C: AUTH DIGEST-MD5\n      \
    \   S: + cmVhbG09ImVsd29vZC5pbm5vc29mdC5jb20iLG5vbmNlPSJPQTZNRzl0\n          \
    \    RVFHbTJoaCIscW9wPSJhdXRoIixhbGdvcml0aG09bWQ1LXNlc3MsY2hh\n              cnNldD11dGYtOA==\n\
    \         C: Y2hhcnNldD11dGYtOCx1c2VybmFtZT0iY2hyaXMiLHJlYWxtPSJlbHdvb2\n    \
    \        QuaW5ub3NvZnQuY29tIixub25jZT0iT0E2TUc5dEVRR20yaGgiLG5jPTAw\n        \
    \    MDAwMDAxLGNub25jZT0iT0E2TUhYaDZWcVRyUmsiLGRpZ2VzdC11cmk9In\n            BvcC9lbHdvb2QuaW5ub3NvZnQuY29tIixyZXNwb25zZT1iMGQ1NmQyZjA1\n\
    \            NGMyNGI2MjA3MjMyMjEwNjQ2OGRiOSxxb3A9YXV0aA==\n         S: + cnNwYXV0aD0wYjk3MTQ2MmNlZjVlOGY5MzBkYjlhMzNiMDJmYzlhMA==\n\
    \         C:\n         S: +OK Maildrop locked and ready\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security issues are discussed throughout this\
    \ document.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   The IANA has updated its site to refer to this RFC\
    \ instead of\n   [RFC1734] in http://www.iana.org/assignments/pop3-extension-mechanism\n\
    \   (the POP3 extension registry), and also in\n   http://www.iana.org/assignments/gssapi-service-names\
    \ (the GSSAPI/SASL\n   service name registry).\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   The authors would like to acknowledge the contributions\
    \ of John\n   Myers, Randall Gellens, Chris Newman, Laurence Lundblade, and other\n\
    \   contributors to RFC 1734 and RFC 2554, on which this document draws\n   heavily.\n\
    \   The authors would also like to thank Ken Murchison, Randall Gellens,\n   Alexey\
    \ Melnikov, Mark Crispin, Arnt Gulbrandsen, Lisa Dusseault,\n   Frank Ellermann,\
    \ and Philip Guenther for their reviews of this\n   document.\n"
- title: 10.  Changes From RFC 1734, RFC 2449.
  contents:
  - "10.  Changes From RFC 1734, RFC 2449.\n   1. Updated references to newer versions\
    \ of various specifications,\n       particularly RFC 4422.\n   2. The SASL-based\
    \ semantics defined in RFC 2449 are now normative for\n       the AUTH extension.\n\
    \   3. The proper behaviour and handling of initial client responses is\n    \
    \   defined, with examples and references to SASL.\n   4. New minimum requirement\
    \ of support for TLS+PLAIN.\n   5. The SASLprep profile SHOULD be used to prepare\
    \ authorization\n       identities.\n   6. Clarify that the TLS encoding should\
    \ be applied after any encoding\n       applied by SASL security layers.\n   7.\
    \ Note that the mechanism list can change after STLS.\n   8. Explicitly mention\
    \ that \"=\" means a zero-length initial response.\n   9. Note that POP3 doesn't\
    \ allow additional data to be sent with +OK.\n"
- title: 11. Normative References
  contents:
  - "11. Normative References\n   [RFC1939]  Myers, J. and M. Rose, \"Post Office\
    \ Protocol - Version 3\",\n              STD 53, RFC 1939, May 1996.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2449]  Gellens, R., Newman,\
    \ C., and L. Lundblade, \"POP3 Extension\n              Mechanism\", RFC 2449,\
    \ November 1998.\n   [RFC2595]  Newman, C., \"Using TLS with IMAP, POP3 and ACAP\"\
    , RFC\n              2595, June 1999.\n   [RFC3454]  Hoffman, P. and M. Blanchet,\
    \ \"Preparation of\n              Internationalized Strings (\"stringprep\")\"\
    , RFC 3454,\n              December 2002.\n   [RFC4013]  Zeilenga, K., \"SASLprep:\
    \ Stringprep Profile for User Names\n              and Passwords\", RFC 4013,\
    \ February 2005.\n   [RFC4234]  Crocker, D., Ed., and P. Overell, \"Augmented\
    \ BNF for\n              Syntax Specifications: ABNF\", RFC 4234, October 2005.\n\
    \   [RFC4422]  Melnikov, A., Ed., and K. Zeilenga, Ed., \"Simple\n           \
    \   Authentication and Security Layer (SASL)\", RFC 4422, June\n             \
    \ 2006.\n   [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n\
    \              Encodings\", RFC 4648, October 2006.\n   [RFC4616]  Zeilenga, K.,\
    \ Ed., \"The PLAIN Simple Authentication and\n              Security Layer (SASL)\
    \ Mechanism\", RFC 4616, August 2006.\n"
- title: 12. Informative References
  contents:
  - "12. Informative References\n   [RFC1734]  Myers, J., \"POP3 AUTHentication command\"\
    , RFC 1734,\n              December 1994.\n   [RFC3206]  Gellens, R., \"The SYS\
    \ and AUTH POP Response Codes\", RFC\n              3206, February 2002.\n   [RFC4346]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.1\", RFC 4346, April 2006.\n   [RFC4752]  Melnikov, A., Ed.,\
    \ \"The Kerberos V5 (\"GSSAPI\") Simple\n              Authentication and Security\
    \ Layer (SASL) Mechanism\", RFC\n              4752, November 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Robert Siemborski\n   Google, Inc.\n   1600 Ampitheatre\
    \ Parkway\n   Mountain View, CA 94043\n   Phone: +1 650 623 6925\n   EMail: robsiemb@google.com\n\
    \   Abhijit Menon-Sen\n   Oryx Mail Systems GmbH\n   EMail: ams@oryx.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
