- title: __initial_text__
  contents:
  - "        PCMAIL: A Distributed Mail System for Personal Computers\n          \
    \                 Table of Contents\n   1. Status of this Document           \
    \                           1\n   2. Introduction                            \
    \                     2\n   3. Repository architecture                       \
    \               4\n        3.1. Management of user mail state                \
    \         5\n        3.2. Repository-to-RFC-822 name translation             \
    \   7\n   4. Communication between repository and client: DMSP            8\n\
    \        4.1. DMSP commands                                         8\n      \
    \  4.2. DMSP responses                                        8\n        4.3.\
    \ DMSP sessions                                        11\n        4.4. General\
    \ operations                                   11\n        4.5. User operations\
    \                                      12\n        4.6. Client operations    \
    \                                13\n        4.7. Mailbox operations         \
    \                          14\n        4.8. Address operations               \
    \                    15\n        4.9. Subscription operations                \
    \              15\n        4.10. Message operations                          \
    \        16\n   5. Client Architecture                                       \
    \  18\n        5.1. Multiple clients                                     18\n\
    \        5.2. Synchronization                                      18\n      \
    \  5.3. Batch operation versus interactive operation         20\n        5.4.\
    \ Message summaries                                    20\n   6. Typical interactive-style\
    \ client-repository interaction     21\n   7. A current Pcmail implementation\
    \                             25\n        7.1. IBM PC client code            \
    \                       25\n        7.2. UNIX client code                    \
    \                 26\n        7.3. Repository code                           \
    \           26\n   8. Conclusions                                            \
    \     26\n   I. DMSP Protocol Specification                                 28\n\
    \   II. Operations by name                                         37\n   III.\
    \ Responses by number                                       38\n"
- title: 1. Status of this Memo
  contents:
  - "1. Status of this Memo\n   This RFC is a discussion of the Pcmail workstation\
    \ based distributed\n   mail system.  It is identical to the discussion in RFC-993,\
    \ save that\n   a new, much simpler mail transport protocol is described.  The\
    \ new\n   transport protocol is the result of continued research into ease of\n\
    \   protocol implementation and use issues.  Distribution of this memo is\n  \
    \ unlimited.\n"
- title: 2. Introduction
  contents:
  - "2. Introduction\n   Pcmail is a distributed mail system providing mail service\
    \ to an\n   arbitrary number of users, each of whom owns one or more\n   workstations.\
    \  Pcmail's motivation is to provide very flexible mail\n   service to a wide\
    \ variety of different workstations, ranging in power\n   from small, resource-limited\
    \ machines like IBM PCs to resource-rich\n   (where \"resources\" are primarily\
    \ processor speed and disk space)\n   machines like Suns or Microvaxes.  It attempts\
    \ to provide limited\n   service to resource-limited workstations while still\
    \ providing full\n   service to resource-rich machines.  It is intended to work\
    \ well with\n   machines only infrequently connected to a network as well as machines\n\
    \   permanently connected to a network.  It is also designed to offer\n   diskless\
    \ workstations full mail service.\n   The system is divided into two halves. \
    \ The first consists of a\n   single entity called the \"repository\".  The repository\
    \ is a storage\n   center for incoming mail.  Mail for a Pcmail user can arrive\n\
    \   externally from the Internet or internally from other repository\n   users.\
    \  The repository also maintains a stable copy of each user's\n   mail state (this\
    \ will hereafter be referred to as the user's \"global\n   mail state\").  The\
    \ repository is therefore typically a computer with\n   a large amount of disk\
    \ storage.\n   The second half of Pcmail consists of one or more \"clients\".\
    \  Each\n   Pcmail user may have an arbitrary number of clients, typically\n \
    \  single-user workstations.  The clients provide a user with a friendly\n   means\
    \ of accessing the user's global mail state over a network.  In\n   order to make\
    \ the interaction between the repository and a user's\n   clients more efficient,\
    \ each client maintains a local copy of its\n   user's global mail state, called\
    \ the \"local mail state\".  It is\n   assumed that clients, possibly being small\
    \ personal computers, may\n   not always have access to a network (and therefore\
    \ to the global mail\n   state in the repository).  This means that the local\
    \ and global mail\n   states may not be identical all the time, making synchronization\n\
    \   between local and global mail states necessary.\n   Clients communicate with\
    \ the repository via the Distributed Mail\n   System Protocol (DMSP); the specification\
    \ for this protocol appears\n   in appendix A. The repository is therefore a DMSP\
    \ server in addition\n   to a mail end-site and storage facility.  DMSP provides\
    \ a complete\n   set of mail manipulation operations (\"send a message\", \"delete\
    \ a\n   message\", \"print a message\", etc.).  DMSP also provides special\n \
    \  operations to allow easy synchronization between a user's global mail\n   state\
    \ and his clients' local mail states.  Particular attention has\n   been paid\
    \ to the way in which DMSP operations act on a user's mail\n   state.  All DMSP\
    \ operations are failure-atomic (that is, they are\n   guaranteed either to succeed\
    \ completely, or leave the user's mail\n   state unchanged ).  A client can be\
    \ abruptly disconnected from the\n   repository without leaving inconsistent or\
    \ damaged mail states.\n   Pcmail's design has been directed by the characteristics\
    \ of currently\n   available workstations.  Some workstations are fairly portable,\
    \ and\n   can be packed up and moved in the back seat of an automobile.  A few\n\
    \   are truly portable--about the size of a briefcase--and battery-\n   powered.\
    \  Some workstations have constant access to a high-speed\n   local-area network;\
    \ pcmail should allow for \"on-line\" mail delivery\n   for these machines while\
    \ at the same time providing \"batch\" mail\n   delivery for other workstations\
    \ that are not always connected to a\n   network.  Portable and semi-portable\
    \ workstations tend to be\n   resource-poor.  A typical IBM PC has a small amount\
    \ (typically less\n   than one megabyte) of main memory and little in the way\
    \ of mass\n   storage (floppy-disk drives that can access perhaps 360 kilobytes\
    \ of\n   data).  Pcmail must be able to provide machines like this with\n   adequate\
    \ mail service without hampering its performance on more\n   resource-rich workstations.\
    \ Finally, all workstations have some\n   common characteristics that Pcmail should\
    \ take advantage of.  For\n   instance, workstations are fairly inexpensive compared\
    \ to the various\n   time-shared systems that most people use for mail service.\
    \  This\n   means that people may own more than one workstation, perhaps putting\n\
    \   a Microvax in an office and an IBM PC at home.\n   Pcmail's design reflects\
    \ the differing characteristics of the various\n   workstations.  Since one person\
    \ can own several workstations, Pcmail\n   allows users multiple access points\
    \ to their mail state.  Each Pcmail\n   user can have several client workstations,\
    \ each of which can access\n   the user's mail by communicating with the repository\
    \ over a network.\n   The clients all maintain local copies of the user's global\
    \ mail\n   state, and synchronize the local and global states using DMSP.\n  \
    \ It is also possible that some workstations will only infrequently be\n   connected\
    \ to a network (and thus be able to communicate with the\n   repository).  The\
    \ Pcmail design therefore allows two modes of\n   communication between repository\
    \ and client.  \"Interactive mode\" is\n   used when the client is always connected\
    \ to the network.  Any changes\n   to the client's local mail state are immediately\
    \ also made to the\n   repository's global mail state, and any incoming mail is\
    \ immediately\n   transmitted from repository to client.  \"Batch mode\" is used\
    \ by\n   clients that have infrequent access to the repository.  Users\n   manipulate\
    \ the client's local mail state, queueing the changes\n   locally.  When the client\
    \ is next connected to the repository, the\n   changes are executed, and the client's\
    \ local mail state is\n   synchronized with the repository's global mail state.\n\
    \   Finally, the Pcmail design minimizes the effect of using a resource-\n   poor\
    \ workstation as a client.  Mail messages are split into two\n   parts: a \"descriptor\"\
    \ and a \"body\".  The descriptor is a capsule\n   message summary whose length\
    \ (typically about 100 bytes) is\n   independent of the actual message length.\
    \  The body is the actual\n   message text, including an RFC-822 standard message\
    \ header.  While\n   the client may not have enough storage to hold a complete\
    \ set of\n   messages, it can usually hold a complete set of descriptors, thus\n\
    \   providing the user with at least a summary of his mail state.  For\n   clients\
    \ with extremely limited resources, Pcmail allows the storage\n   of partial sets\
    \ of descriptors.  Although this means the user does\n   not have a complete local\
    \ mail state, he can at least look at\n   summaries of some messages.  In the\
    \ cases where the client cannot\n   immediately store message bodies, it can always\
    \ pull them over from\n   the repository as storage becomes available.\n   The\
    \ remainder of this document is broken up into sections discussing\n   the following:\n\
    \      - The repository architecture\n      - DMSP, its operations, and motivation\
    \ for its design\n      - The client architecture\n      - A typical DMSP session\
    \ between the repository and a\n        client\n      - The current Pcmail implementation\n\
    \      - Appendices describing the DMSP protocol in detail\n"
- title: 3. Repository architecture
  contents:
  - "3. Repository architecture\n   A typical machine running repository code has\
    \ a relatively powerful\n   processor and a large amount of disk storage.  It\
    \ must also be a\n   permanent network site, for two reasons.  First, clients\
    \ communicate\n   with the repository over a network, and rely on the repository's\n\
    \   being available at any time.  Second, people sending mail to\n   repository\
    \ users rely on the repository's being available to receive\n   mail at any time.\n\
    \   The repository must perform several tasks.  First, and most\n   importantly,\
    \ the repository must efficiently manage a potentially\n   large number of users\
    \ and their mail states.  Mail must be reliably\n   stored in a manner that makes\
    \ it easy for multiple clients to access\n   the global mail state and synchronize\
    \ their local mail states with\n   the global state.  Since a large category of\
    \ electronic mail is\n   represented by bulletin boards (bboards), the repository\
    \ should\n   efficiently manage bboard mail, using a minimum of storage to store\n\
    \   bboard messages in a manner that still allows any user subscribing to\n  \
    \ the bboard to read the mail.  Second, the repository must be able to\n   communicate\
    \ efficiently with its clients.  The protocol used to\n   communicate between\
    \ repository and client must be reliable and must\n   provide operations that\
    \ (1) allow typical mail manipulation, and (2)\n   support Pcmail's distributed\
    \ nature by allowing efficient\n   synchronization between local and global mail\
    \ states.  Third, the\n   repository must be able to process mail from sources\
    \ outside the\n   repository's own user community (a primary outside source is\
    \ the\n   Internet).  Internet mail will arrive with a NIC RFC-822 standard\n\
    \   message header; the recipient names in the message must be properly\n   translated\
    \ from the RFC-822 namespace into the repository's\n   namespace.\n"
- title: 3.1. Management of user mail state
  contents:
  - "3.1. Management of user mail state\n   Pcmail divides the world into a community\
    \ of users.  Each user is\n   associated with a user object.  A user object consists\
    \ of a unique\n   name, a password (which the user's clients use to authenticate\n\
    \   themselves to the repository before manipulating a global mail\n   state),\
    \ a list of \"client objects\" describing those clients belonging\n   to the user,\
    \ a list of \"subscription objects\", and a list of \"mailbox\n   objects\".\n\
    \   A client object consists of a unique name and a status.  A user has\n   one\
    \ client object for every client he owns; a client cannot\n   communicate with\
    \ the repository unless it has a corresponding client\n   object in a user's client\
    \ list.  Client objects therefore serve as a\n   means of identifying valid clients\
    \ to the repository.  Client objects\n   also allow the repository to manage local\
    \ and global mail state\n   synchronization; the repository associates with every\
    \ client an\n   \"update list\" of message state changes which have occurred since\
    \ the\n   client's last synchronization.\n   A client's status is either \"active\"\
    \ or \"inactive\".  The repository\n   defines inactive clients as those clients\
    \ which have not connected to\n   the repository within a set time period (one\
    \ week in the current\n   repository implementation).  When a previously-inactive\
    \ client does\n   connect to the repository, the repository notifies the client\
    \ that it\n   has been inactive for some time and should \"reset\" itself.  Resetting\n\
    \   a client has the effect of placing every message in every mailbox\n   onto\
    \ the client's update list.  This allows the client to get a fresh\n   global\
    \ mail state from the repository when it next synchronizes (see\n   synchronization\
    \ discussion following).  The reset is performed on the\n   assumption that enough\
    \ global state changes occur in a week that the\n   client would spend too much\
    \ time performing an ordinary local state-\n   global state synchronization.\n\
    \   Messages are stored in mailboxes.  Users can have any number of\n   mailboxes,\
    \ which serve both to store and to categorize messages.  A\n   mailbox object\
    \ both names a mailbox and describes its contents.\n   Mailboxes are identified\
    \ by a unique name; their contents are\n   described by three numeric values.\
    \  The first is the total number of\n   messages in the mailbox, the second is\
    \ the total number of unseen\n   messages (messages that have never been seen\
    \ by the user via any\n   client) in the mailbox, and the third is the mailbox's\
    \ next available\n   message unique identifier (UID).  The above information is\
    \ stored in\n   the mailbox object to allow clients to get a summary of a mailbox's\n\
    \   contents without having to read all the messages within the mailbox.\n   Some\
    \ mailboxes are special, in that other users may read the messages\n   stored\
    \ in them.  These mailboxes are called \"bulletin board\n   mailboxes\" or \"\
    bboard mailboxes\".  The repository uses bboard\n   mailboxes to store bboard\
    \ mail.  Bboard mailboxes differ from\n   ordinary mailboxes in the following\
    \ ways:\n      - Their names are unique across the entire repository;\n      \
    \  for instance, only one bboard mailbox named \"sf-lovers\"\n        may exist\
    \ in the entire repository community.  This\n        does not preclude other users\
    \ from having an ordinary\n        mailbox named \"sf-lovers\".\n      - Subscribers\
    \ to the bboard are granted read-only access\n        to the messages in the bboard\
    \ mailbox.  The bboard\n        mailbox's owner (typically the system manager)\
    \ has\n        read/update/delete access to the mailbox.\n   A bboard subscriber\
    \ keeps track of the messages he has looked at via\n   a subscription object.\
    \  The subscription object contains the name of\n   the bboard, its owner (the\
    \ user who owns the bboard mailbox where all\n   the messages are stored), and\
    \ the UID of the first message not yet\n   seen by the subscriber.\n   Users gain\
    \ read-only access to a bboard by creating a subscription to\n   it; they lose\
    \ that access when they delete that subscription.  A list\n   of all bboard mailboxes\
    \ available for subscription can be transmitted\n   to the user on demand.\n \
    \  Associated with each mailbox are any number of message objects.  Each\n   message\
    \ is broken into two parts--a \"descriptor\", which contains a\n   summary of\
    \ useful information about the message, and a \"body\", which\n   is the message\
    \ text itself, including its NIC RFC-822 message header.\n   Each message is assigned\
    \ a monotonically increasing UID based on the\n   owning mailbox's next available\
    \ UID.  Each mailbox has its own set of\n   UIDs which, together with the mailbox\
    \ name and user name, uniquely\n   identify the message within the repository.\
    \  A descriptor holds the\n   following information:  the message UID, the message\
    \ size in bytes\n   and lines, four \"useful\" message header fields (the \"date:\"\
    , \"to:\",\n   \"from:\", and \"subject:\" fields), and sixteen flags.  These\
    \ flags are\n   given identifying numbers 0 through 15.  Eight of these flags\
    \ have\n   well-known definitions and are reserved for the repository's use.\n\
    \   The eight repository-defined flags mark:\n      - (#0) whether the message\
    \ has been deleted\n      - (#1) whether it has been seen\n      - (#2) whether\
    \ it has been forwarded to the user\n      - (#3) whether it has been forwarded\
    \ by the user\n      - (#4) whether it has been filed (written to a text file\n\
    \        outside the repository)\n      - (#5) whether it has been printed (locally\
    \ or remotely)\n      - (#6) whether it has been replied to\n      - (#7) whether\
    \ it has been copied to another mailbox\n   The remaining eight flags are availble\
    \ for user use.  Descriptors\n   serve as an efficient means for clients to get\
    \ message information\n   without having to waste time retrieving the entire message\
    \ from the\n   repository.\n"
- title: 3.2. Repository-to-RFC-822 name translation
  contents:
  - "3.2. Repository-to-RFC-822 name translation\n   \"Address objects\" provide the\
    \ repository with a means for translating\n   the RFC-822-style mail addresses\
    \ in Internet messages into repository\n   names.  The repository provides its\
    \ own namespace for message\n   identification.  Any message is uniquely identified\
    \ by the triple\n   (user-name, mailbox-name, message-UID).  Any mailbox is uniquely\n\
    \   identified by the pair (user-name, mailbox-name).  In order to\n   translate\
    \ between RFC-822-style mail addresses and repository names,\n   the repository\
    \ maintains a list of address objects.  Each address\n   object is an association\
    \ between an RFC-822-style address and a\n   (user-name, mailbox-name) pair. \
    \ When mail arrives from the Internet,\n   the repository can use the address\
    \ object list to translate the\n   recipients into (user-name, mailbox-name) pairs\
    \ and route the message\n   correctly.\n"
- title: '4. Communication between repository and client: DMSP'
  contents:
  - "4. Communication between repository and client: DMSP\n   The Distributed Mail\
    \ System Protocol (DMSP) defines and manipulates\n   the objects mentioned in\
    \ the previous section.  It has been designed\n   to work with Pcmail's singlerepository/multiple-client\
    \ model of the\n   world.  In addition to providing typical mail manipulation\
    \ functions,\n   DMSP provides functions that allow easy synchronization of global\
    \ and\n   local mail states.\n   DMSP has been completely re-specified in this\
    \ version of Pcmail.\n   Formerly, DMSP was implemented on top of the USP remote-procedure-\n\
    \   call protocol.  Since this protocol is not fully unofficially\n   specified\
    \ (let alone officially specified) anywhere, implementation\n   of USP is difficult\
    \ for sites wishing to implement Pcmail on\n   different systems.  We therefore\
    \ have decided to completely redesign\n   DMSP.  It is now a very simple request/response\
    \ protocol similar to\n   SMTP or NNTP, running directly on a reliable bidirectional\
    \ byte-\n   stream such as TCP.  The TCP contact port for DMSP has been\n   designated\
    \ 158.  Requests and responses consist of ASCII characters;\n   on octet-based\
    \ transmission streams, each character is transmitted\n   rightjustified in an\
    \ octet with the high-order bit cleared to zero.\n"
- title: 4.1. DMSP commands
  contents:
  - "4.1. DMSP commands\n   DMSP operations consist of an operation name, followed\
    \ by zero or\n   more tab or space characters, followed by zero or more arguments,\n\
    \   each of which is separated from the operation name and other\n   arguments\
    \ by one or more space or tab characters.  All operation\n   requests, as well\
    \ as all responses, must be terminated with a\n   carriage-return plus line-feed\
    \ (CR-LF) pair.  All operation names and\n   arguments must be taken from the\
    \ set of alphanumeric characters plus\n   the characters dash (\"-\"), underscore\
    \ (\"_\"), and period (\".\").\n   DMSP operation names are case-insensitive;\
    \ they may be transmitted in\n   any combination of upper and lower case.  DMSP\
    \ arguments are case-\n   insensitive but case-preserving; in other words a mailbox\
    \ named\n   \"MarkL\" may be referred to by an operation argument \"markl\", but\
    \ will\n   always be stored, and transmitted in a repository response, as\n  \
    \ \"MarkL\"; furthermore, any attempt to create a new mailbox \"MaRkL\"\n   will\
    \ not be permitted.\n   Each operation argument may contain no more than 64 characters.\
    \  No\n   single request or response line may contain more than 512 characters,\n\
    \   including all white space and the terminating CR-LF.\n"
- title: 4.2. DMSP responses
  contents:
  - "4.2. DMSP responses\n   A DMSP operation always results in a response, which\
    \ may be followed\n   in turn by a list, consisting of zero or more lines of CR-LF-\n\
    \   terminated text terminated by a single period (\".\") plus a CR-LF.  A\n \
    \  response is always prefaced by a three-digit reply code; possible\n   text\
    \ following the response code can be in any format.  The response\n   code is\
    \ sufficient to determine whether the operation succeeded or\n   failed, or whether\
    \ more text is forthcoming following the response\n   line.  Any text following\
    \ the response code is for information only,\n   and need not follow any particular\
    \ format.\n   The first digit indicates whether the operation succeeded or failed,\n\
    \   and if it succeeded whether or not more text should be presented to\n   the\
    \ repository.  Definitions of the first digit are similar to those\n   of NNTP:\n\
    \   1XX             Informative message\n   2XX             Operation completed\
    \ successfully\n   3XX             Operation completed successfully, present\n\
    \                   remainder of text and terminate with a single\n          \
    \         period plus CR-LF pair.\n   4XX             Operation was performed\
    \ and failed for some\n                   reason.\n   5XX             Operation\
    \ could not be performed because of a\n                   protocol syntax error\
    \ of some sort.\n   The second digit indicates the type of object referred to\
    \ by the\n   response.\n   X0X             Miscellaneous\n   X1X             User\
    \ operation\n   X2X             Client operation\n   X3X             Mailbox operation\n\
    \   X4X             Subscription operation\n   X5X             Message operation\n\
    \   X6X             Address operation\n   In an error response, the final digit\
    \ can describe the type of error\n   that occurred.  Otherwise, it simply gives\
    \ a response a unique\n   number.  Numbers 0 through 3 are significant in 4XX-class\
    \ (error)\n   responses only.  Numbers 0-9 in all other responses serve only to\n\
    \   differentiate responses dealing with the same type of object under\n   different\
    \ circumstances.\n   4X0             Operation failed because object exists\n\
    \   4X1             Operation failed because object does not exist\n   4X2   \
    \          Operation failed because of an internal error\n   4X3             Operation\
    \ failed because of an argument syntax\n                   error\n   Each operation\
    \ generates one of a set of responses, detailed in the\n   protocol specification\
    \ appendix.\n   List termination is determined solely by a well-known character\n\
    \   sequence (CR-LF, period, CR-LF).  Since application data could well\n   accidentally\
    \ contain this termination sequence, the transmitting\n   protocol module must\
    \ modify application data so it contains no\n   termination sequences.  The receiving\
    \ module must similarly undo the\n   modification before presenting the data to\
    \ the application at the\n   receiving end.\n   The transmitting module modifies\
    \ application data as follows:  If a\n   line of application data begins with\
    \ a period, that period is\n   duplicated.  Since the termination sequence is\
    \ a single period,\n   accidental termination has now been prevented.\n   The\
    \ receiving protocol checks incoming all incoming data lines for a\n   leading\
    \ period.  A single period is a list terminator; a period\n   followed by other\
    \ text is removed before being presented to the\n   receiving application.\n"
- title: 4.3. DMSP sessions
  contents:
  - "4.3. DMSP sessions\n   A DMSP session proceeds as follows: a client begins the\
    \ session with\n   the repository by opening a connection to the repository's\
    \ machine.\n   The client then authenticates both itself and its user to the\n\
    \   repository with a \"login\" operation.  If the authentication is\n   successful,\
    \ the user performs an arbitrary number of DMSP operations\n   before ending the\
    \ session with a \"logout\" operation, at which time\n   the connection is closed\
    \ by the repository.\n   Because DMSP can manipulate a pair of mail states (local\
    \ and global)\n   at once, it is extremely important that all DMSP operations\
    \ are\n   failure-atomic.  Failure of any DMSP operation must leave both states\n\
    \   in a consistent, known state.  For this reason, a DMSP operation is\n   defined\
    \ to have failed unless an explicit acknowledgement is received\n   by the operation\
    \ initiator.  This acknowledgement consists of a\n   response code possibly followed\
    \ by information, as described above.\n   Following is a general discussion of\
    \ all the DMSP operations.  The\n   operations are broken down by type: general\
    \ operations, user\n   operations, client operations, mailbox operations, address\n\
    \   operations, subscription operations, and message operations.\n   Detailed\
    \ operation specifications appear at the end of this document.\n"
- title: 4.4. General operations
  contents:
  - "4.4. General operations\n   The first group of DMSP operations perform general\
    \ functions that\n   operate on no one particular class of object.  DMSP has three\
    \ general\n   operations which provide the following services:\n   In order to\
    \ prevent protocol version skew between clients and the\n   repository, DMSP provides\
    \ a \"send-version\" operation.  The client\n   supplies its DMSP version number\
    \ as an argument; the operation\n   succeeds if the supplied version number matches\
    \ the repository's DMSP\n   version number.  It fails if the two version numbers\
    \ do not match.\n   The version number is a natural number like \"100\", \"101\"\
    , \"200\".  The\n   \"send-version\" operation should be the first that a client\
    \ sends to\n   the repository, since no other operation may work correctly if\
    \ the\n   client and repository are using different versions of DMSP.\n   Users\
    \ can send mail to other users via the \"send-message\" operation.\n   The message\
    \ must have an Internet-style header as defined by NIC\n   RFC-822.  The repository\
    \ takes the message and distributes it to the\n   mailboxes specified by the message\
    \ header's destination fields.  If\n   one or more of the mailboxes exists outside\
    \ the repository's user\n   community, the repository is responsible for handing\
    \ the message to a\n   local SMTP server.  The message envelope is generated by\
    \ the\n   repository from the message contents since it may be difficult for\n\
    \   some clients to perform envelope-generation functions such as address\n  \
    \ verification and syntax checking.\n   A success acknowledgement is sent from\
    \ the repository only if (1) the\n   entire message was successfully transmitted\
    \ from client to\n   repository, and (2) the message header was properly formatted.\
    \  Once\n   the repository has successfully received the message from the client,\n\
    \   any subsequent errors in queueing or delivery must be noted via\n   return\
    \ mail to the user.\n   The last general operation is the \"help\" operation.\
    \  The repository\n   responds to \"help\" by printing an acknowledgement followed\
    \ by a list\n   of supported commands, terminated with a period plus CR-LF.  The\n\
    \   information is intended for display and can be in any format as long\n   as\
    \ the individual lines of text returned by the repository are CR-\n   LF-terminated.\n"
- title: 4.5. User operations
  contents:
  - "4.5. User operations\n   The next series of DMSP operations manipulates user\
    \ objects.  The\n   most common of these operations are \"login\" and \"logout\"\
    .  A client\n   must perform a login operation before being able to access a user's\n\
    \   mail state.  A DMSP login operation takes five arguments: (1) the\n   user's\
    \ name, (2) the user's password, (3) the name of the client\n   performing the\
    \ login, (4) a flag set to 1 if the repository should\n   create a client object\
    \ for the client if one does not exist (0 else),\n   and (5) a flag set to 1 if\
    \ the client wishes to operate in \"batch\n   mode\" and 0 if the client wishes\
    \ to operate in \"interactive\" mode.\n   The last flag value allows the repository\
    \ to tune internal parameters\n   for either mode of operation.\n   The repository\
    \ can make one of three responses.  First, it can make a\n   success response,\
    \ indicating successful authentication.  Second, it\n   can make one of several\
    \ failure responses, indicating failed\n   authentication.  Finally, it can make\
    \ a special response indicating\n   that authentication was successful, but that\
    \ the client has not been\n   used in over a week.  This last response serves\
    \ as a hint that the\n   client should consider erasing its local mail state and\
    \ pulling over\n   a complete version of the repository's mail state.  This is\
    \ done on\n   the assumption that so many mail state changes have been made in\
    \ a\n   week that it would be inefficient to perform a normal\n   synchronization.\n\
    \   When a client has completed a session with the repository, it\n   performs\
    \ a logout operation.  This allows the repository to perform\n   any necessary\
    \ cleanup before closing the network connection.\n   A user can change his password\
    \ via the \"set-password\" operation.  The\n   operation works much the same as\
    \ the UNIX change-password operation,\n   taking as arguments the user's current\
    \ password and a desired new\n   password.  If the current password given matches\
    \ the user's current\n   password, the user's current password is changed to the\
    \ new password\n   given.  Because encryption can be difficult to perform on some\n\
    \   resource-poor clients, passwords are transmitted in clear text.\n   Clearly\
    \ this is not an acceptable long-term solution, and\n   alternatives are welcomed.\n"
- title: 4.6. Client operations
  contents:
  - "4.6. Client operations\n   DMSP provides four operations to manipulate client\
    \ objects.  The\n   first, \"list-clients\", tells the repository to send the\
    \ user's client\n   list to the requesting client.  The list is a series of lines,\
    \ one\n   per client, containing the client's name, followed by whitespace,\n\
    \   followed by a status string.  The status is either \"inactive\" or\n   \"\
    active\".  As with all text responses, the list is terminated with a\n   period\
    \ plus CR-LF.\n   The \"create-client\" operation allows a user to add a client\
    \ object to\n   his list of client objects.  Although the login operation duplicates\n\
    \   this functionality via the \"create-this- client?\" flag, the create-\n  \
    \ client operation is a useful means of creating a number of new client\n   objects\
    \ while logged into the repository via an existing client.  The\n   create-client\
    \ operation requires as an argument the name of the\n   client to create.\n  \
    \ The \"delete-client\" operation removes an existing client object from\n   a\
    \ user's client list.  The client being removed cannot be in use by\n   anyone\
    \ at the time.  Delete-client also requires as an argument the\n   name of the\
    \ client to delete.\n   The last client operation, \"reset-client\", causes the\
    \ repository to\n   place all of the messages in all mailboxes onto the named\
    \ client's\n   update list.  When a client next synchronizes with the repository,\
    \ it\n   will end up receiving a list of all descriptors when it requests a\n\
    \   list of changed message descriptors for a particular mailbox.  This\n   is\
    \ useful for two reasons.  First, a client's local mail state could\n   easily\
    \ become lost or damaged, especially if it is stored on a floppy\n   disk.  Second,\
    \ if a client has been marked as inactive by the\n   repository, the reset-client\
    \ operation provides a fast way of\n   resynchronizing with the repository, assuming\
    \ that so many\n   differences exist between the local and global mail states\
    \ that a\n   normal synchronization would take far too much time.\n"
- title: 4.7. Mailbox operations
  contents:
  - "4.7. Mailbox operations\n   DMSP supports seven operations that manipulate mailbox\
    \ objects.\n   First, \"list-mailboxes\" has the repository send to the requesting\n\
    \   client information on each mailbox.  The repository transmits one\n   line\
    \ of information per mailbox, terminating the list with a period\n   plus CR-LF.\
    \  Each line contains, in order and separated by\n   whitespace, the mailbox name,\
    \ \"next available UID\", total message\n   count, and unseen message count. \
    \ This operation is useful in\n   synchronizing local and global mail states,\
    \ since it allows a client\n   to compare the user's global mailbox list with\
    \ a client's local\n   mailbox list.  The list of mailboxes also provides a quick\
    \ summary of\n   each mailbox's contents without having the contents present.\n\
    \   The \"create-mailbox\" has the repository create a new mailbox and\n   attach\
    \ it to the user's list of mailboxes.  It takes as an argument\n   the name of\
    \ the mailbox to create.\n   \"Delete-mailbox\" removes a mailbox from the user's\
    \ list of mailboxes.\n   All messages within the mailbox are also deleted and\
    \ permanently\n   removed from the system.  Any address objects binding the mailbox\n\
    \   name to RFC-822-style mailbox addresses are also removed from the\n   system.\
    \  Delete-mailbox takes as an argument the name of the mailbox\n   to delete.\n\
    \   \"Create-bboard-mailbox\" allows a user to create a bboard mailbox.\n   The\
    \ name given as an argument must be unique across the entire\n   repository user\
    \ community.  Once the bboard mailbox has been created,\n   other users may subscribe\
    \ to it, using subscription objects to keep\n   track of which messages they have\
    \ read on which bboard mailboxes.\n   \"Delete-bboard-mailbox\" allows a bboard's\
    \ owner to delete a bboard\n   mailbox.  Subscribers who attempt to read from\
    \ a bboard mailbox after\n   it has been deleted are told that the bboard no longer\
    \ exists.\n   Again, the operation's argument is the name of the bboard mailbox\
    \ to\n   delete.\n   \"Reset-mailbox\" causes the repository to place all of the\
    \ messages in\n   a named mailbox onto the current client's update list.  When\
    \ the\n   client next requests a list of changed message descriptors for this\n\
    \   mailbox, it will receive a list of all message descriptors in the\n   mailbox.\
    \  This operation is merely a more specific version of the\n   reset-client operation\
    \ (which allows the client to pull over a\n   complete copy of the user's global\
    \ mail state).  Its primary use is\n   for mailboxes whose contents have accidentally\
    \ been destroyed\n   locally.\n   Finally, DMSP has an \"expunge-mailbox\" operation.\
    \  Any message can be\n   deleted and \"undeleted\" at will, since this simply\
    \ changes the value\n   of a flag attached to the message.  Deletions are made\
    \ permanent by\n   performing an expunge-mailbox operation.  The expunge operation\n\
    \   causes the repository to look through a named mailbox, removing from\n   the\
    \ system any messages marked \"deleted\".  Expunge-mailbox takes as\n   an argument\
    \ the name of the mailbox to expunge.\n"
- title: 4.8. Address operations
  contents:
  - "4.8. Address operations\n   DMSP provides three operations that allow users to\
    \ manipulate address\n   objects.  First, the \"list-address\" operation returns\
    \ a list of\n   address objects associated with a particular mailbox.  Each address\n\
    \   is transmitted on a separate line terminated by a CR-LF; the list is\n   terminated\
    \ with a period plus CR-LF.\n   The \"create-address\" operation adds a new address\
    \ object that\n   associates a (user-name, mailbox-name) pair with a given RFC-822-\n\
    \   style mailbox address.  It takes as arguments the mailbox name and\n   the\
    \ address name.\n   Finally, the \"delete-address\" operation destroys the address\
    \ object\n   binding the given RFC-822-style mail address and the given (user-\n\
    \   name, mailbox-name) pair.  Arguments are the address to delete and\n   the\
    \ mailbox it belongs to.\n"
- title: 4.9. Subscription operations
  contents:
  - "4.9. Subscription operations\n   DMSP provides five subscription operations.\
    \  The first, \"list-\n   subscriptions\", gives the user a list of the bboards\
    \ he is currently\n   subscribing to.  The list consists of one line of information\
    \ per\n   subscription.  Each entry contains the following information, in\n \
    \  order:\n      - The bulletin board's name\n      - The UID of the first message\
    \ the subscriber has not yet\n        seen\n      - The number of messages the\
    \ subscriber has not yet seen\n      - The highest message UID in the bulletin\
    \ board\n   \"List-available-subscriptions\" gives the user a list of all bboards\n\
    \   he can subscribe to.  The list consists of bboard names, one per\n   line,\
    \ terminated by a period plus CR-LF.  \"Createsubscription\" adds a\n   subscription\
    \ to the user's list of subscriptions; it takes as an\n   argument the name of\
    \ the bboard to subscribe to.  \"Delete-\n   subscription\" removes a subscription\
    \ from the list, and takes as an\n   argument the name of the subscription to\
    \ remove.  Note that this does\n   not delete the associated bboard mailbox (obviously\
    \ only the bboard's\n   owner can do that).  It merely removes the user from the\
    \ list of the\n   bboard's subscribers.  Finally DMSP allows the user to tell\
    \ the\n   repository which messages in a bboard he has seen.  Every\n   subscription\
    \ object contains the UID of the first message the user\n   has not yet seen;\
    \ the \"reset-subscription\" operation updates that\n   number, insuring that\
    \ the user sees a given bboard message only once.\n   Reset-subscription takes\
    \ as arguments the name of the subscription\n   and the new UID value.\n"
- title: 4.10. Message operations
  contents:
  - "4.10. Message operations\n   The most commonly-manipulated Pcmail objects are\
    \ messages; DMSP\n   therefore provides special message operations to allow efficient\n\
    \   synchronization, as well as a set of operations to perform standard\n   message-manipulation\
    \ functions.\n   A user may request a series of descriptors with the \"fetch-\n\
    \   descriptors\" operation.  The series is identified by a pair of\n   message\
    \ UIDs, representing the lower and upper bounds of the list.\n   Since UIDs are\
    \ defined to be monotonically increasing numbers, a pair\n   of UIDs is sufficient\
    \ to completely identify the series of\n   descriptors.  If the lower bound UID\
    \ does not exist, the repository\n   starts the series with the first message\
    \ with UID greater than the\n   lower bound.  Similarly, if the upper bound does\
    \ not exist, the\n   repository ends the series with the last message with UID\
    \ less than\n   the upper bound.  If certain UIDs within the series no longer\
    \ exist,\n   the repository obviously does not send them.  The repository returns\n\
    \   the descriptors in a list with the following format:\n   If a descriptor has\
    \ been expunged, the repository transmits two\n   consecutive lines of information:\
    \ the word \"expunged\" on one line,\n   followed by the message UID on the next\
    \ line.  \"Expunged\"\n   notifications are only transmitted in response to a\
    \ \"fetch-changed-\n   descriptors\" command; they are an indication to the client\
    \ that\n   someone else has expunged the mailbox and that the client should\n\
    \   remove the local copy of the expunged message.\n   If a descriptor has not\
    \ been expunged, it is presented as six\n   consecutive lines of information:\
    \ the word \"descriptor\" on the first\n   line, followed by a second line containing\
    \ the message UID, flag\n   states (see examples following), message length in\
    \ bytes, and message\n   length in lines, followed by four lines containing in\
    \ order the\n   message \"from:\" field, \"to:\" field, \"date:\" field, and \"\
    subject:\"\n   field.  The entire list of descriptors is terminated by a period\
    \ plus\n   CR-LF; individual descriptors are not specially terminated since the\n\
    \   first line (\"expunged\" or \"descriptor\") of a list entry determines\n \
    \  the exact length of the entry (two lines or six lines).\n   The \"fetch-changed-descriptors\"\
    \ operation is intended for use during\n   state synchronization.  Whenever a\
    \ descriptor changes state (one of\n   its flags is cleared, for example), the\
    \ repository notes those\n   clients which have not yet recorded the change locally.\
    \  Fetch-\n   changed-descriptors has the repository send to the client a maximum\n\
    \   of the first N descriptors which have changed since the client's last\n  \
    \ synchronization, where N is a number sent by the client.  The list\n   sent\
    \ begins with the descriptor with lowest UID.  Note that the list\n   of descriptors\
    \ is only guaranteed to be monotonically increasing for\n   a given call to \"\
    fetch-changed-descriptors\"; messages with lower UIDs\n   may be changed by other\
    \ clients in between calls to \"fetch-\n   changeddescriptors\".  \"Fetch-changed-descriptors\"\
    \ takes two\n   arguments:  the name of the mailbox to search, and the maximum\
    \ number\n   of descriptors for the repository to return.\n   Once the changed\
    \ descriptors have been looked at, a user will want to\n   inform the repository\
    \ that the current client has recorded the change\n   locally.  The \"reset-descriptors\"\
    \ command causes the repository to\n   mark as \"recorded by current client\"\
    \ a given series of descriptors.\n   The series is identified by a low UID and\
    \ a high UID.  UIDs within\n   the series that no longer exist are ignored.  Arguments\
    \ are: mailbox\n   name, low UID in range, and high UID in range.\n   Whole messages\
    \ are transmitted from repository to user with the\n   \"fetch-message\" operation.\
    \  The separation of \"fetchdescriptors\" and\n   \"fetch-message\" operations\
    \ allows clients with small amounts of disk\n   storage to obtain a small message\
    \ summary (via \"fetch-descriptors\" or\n   \"fetch-changed-descriptors\") without\
    \ having to pull over the entire\n   message.  Arguments are mailbox name, followed\
    \ by message UID.\n   Frequently, a message may be too large for some clients\
    \ to store\n   locally.  Users can still look at the message contents via the\n\
    \   \"print-message\" operation.  This operation has the repository send a\n \
    \  copy of the message to a named printer.  The printer name need only\n   have\
    \ meaning to the particular repository implementation; DMSP\n   transmits the\
    \ name only as a means of identification.  Arguments are:\n   mailbox name, followed\
    \ by message UID, followed by printer\n   identification.\n   Copying of one message\
    \ into another mailbox is accomplished via the\n   \"copy-message\" operation.\
    \  A descriptor list of length one,\n   containing a descriptor for the copied\
    \ message, is returned if the\n   copy operation is successful.  This descriptor\
    \ is required because\n   the copied message acquires a UID different from the\
    \ original\n   message.  The client cannot be expected to know which UID has been\n\
    \   assigned the copy, hence the repository's sending a descriptor\n   containing\
    \ the UID.  Arguments to copy-message are:  source mailbox\n   name, target mailbox\
    \ name, and source message UID.\n   Each message has associated with it sixteen\
    \ flags, as described\n   earlier.  These flags can be set and cleared using the\
    \ \"set-message-\n   flag\" operation.  The first eight flags have special meaning\
    \ to the\n   repository as described above; the remaining eight are for user use.\n\
    \   Set-message-flag takes four arguments: mailbox name, message UID,\n   flag\
    \ number (0 through 15), and desired flag state (0 or 1).\n"
- title: 5. Client Architecture
  contents:
  - "5. Client Architecture\n   Clients can be any of a number of different workstations;\
    \ Pcmail's\n   architecture must therefore take into account the range of\n  \
    \ characteristics of these workstations.  First, most workstations are\n   much\
    \ more affordable than the large computers currently used for mail\n   service.\
    \  It is therefore possible that a user may well have more\n   than one.  Second,\
    \ some workstations are portable and they are not\n   expected to be constantly\
    \ tied into a network.  Finally, many of the\n   smaller workstations resource-poor,\
    \ so they are not expected to be\n   able to store a significant amount of state\
    \ information locally.  The\n   following subsections describe the particular\
    \ parts of Pcmail's\n   client architecture that address these different characteristics.\n"
- title: 5.1. Multiple clients
  contents:
  - "5.1. Multiple clients\n   The fact that Pcmail users may own more than one workstation\
    \ forms\n   the rationale for the multiple client model that Pcmail uses.  A\n\
    \   Pcmail user may have one client at home, another at an office, and\n   maybe\
    \ even a third portable client.  Each client maintains a separate\n   copy of\
    \ the user's mail state, hence Pcmail's distributed nature.\n   The notion of\
    \ separate clients allows Pcmail users to access mail\n   state from several different\
    \ locations.  Pcmail places no\n   restrictions on a user's ability to communicate\
    \ with the repository\n   from several clients at the same time.  Instead, the\
    \ decision to\n   allow several clients concurrent access to a user's mail state\
    \ is\n   made by the repository implementation.\n"
- title: 5.2. Synchronization
  contents:
  - "5.2. Synchronization\n   Some workstations tend to be small and fairly portable;\
    \ the\n   likelihood of their always being connected to a network is relatively\n\
    \   small.  This is another reason for each client's maintaining a local\n   copy\
    \ of a user's mail state.  The user can then manipulate the local\n   mail state\
    \ while not connected to the network (and the repository).\n   This immediately\
    \ brings up the problem of synchronization between\n   local and global mail states.\
    \  The repository is continually in a\n   position to receive global mail state\
    \ updates, either in the form of\n   incoming mail, or in the form of changes\
    \ from other clients.  A\n   client that is not always connected to the net cannot\
    \ immediately\n   receive the global changes.  In addition, the client's user\
    \ can make\n   his own changes on the local mail state.\n   Pcmail's architecture\
    \ allows fast synchronization between client\n   local mail states and the repository's\
    \ global mail state.  Each\n   client is identified in the repository by a client\
    \ object attached to\n   the user.  This object forms the basis for synchronization\
    \ between\n   local and global mail states.  Some of the less common state changes\n\
    \   include the adding and deleting of user mailboxes and the adding and\n   deleting\
    \ of address objects.  Synchronization of these changes is\n   performed via DMSP\
    \ list operations, which allow clients to compare\n   their local versions of\
    \ mailbox and address object lists with the\n   repository's global version and\
    \ make any appropriate changes.  The\n   majority of possible changes to a user's\
    \ mail state are in the form\n   of changed descriptors.  Since most users will\
    \ have a large number of\n   messages, and message states will change relatively\
    \ often, special\n   attention needs to be paid to message synchronization.\n\
    \   An existing descriptor can be changed in one of three ways:  first,\n   one\
    \ of its sixteen flag values can be changed (this encompasses the\n   user's reading\
    \ an unseen message, deleting a message, printing a\n   message, etc).  Second,\
    \ a descriptor can be created, either by the\n   delivery of a new message or\
    \ by the copying of a message from one\n   mailbox to another.  Finally, a descriptor\
    \ can be destroyed, via an\n   \"expunge-mailbox\" operation.\n   In the above\
    \ cases, synchronization is required between the\n   repository and every client\
    \ that has not previously noted the change.\n   To keep track of which clients\
    \ have noticed a global mail state\n   change and changed their local states accordingly,\
    \ each mailbox has\n   associated with it a list of active clients.  Each client\
    \ has a\n   (potentially empty) \"update list\" of messages which have changed\n\
    \   since that client last synchronized.\n   When a client connects to the repository,\
    \ it executes a DMSP \"fetch-\n   changed-descriptors\" operation.  This causes\
    \ the repository to return\n   a list of all descriptors on that client's update\
    \ list.  When the\n   client receives the changed descriptors, it may do one of\
    \ two things:\n   if the descriptor is marked \"expunged\", it can remove the\n\
    \   corresponding message from the local mailbox.  If the descriptor is\n   not\
    \ expunged, the client can store the descriptor, thus updating the\n   local mail\
    \ state.  After a changed descriptor has been recorded, the\n   client uses the\
    \ DMSP \"reset-descriptors\" operation to remove\n   descriptors from its update\
    \ list.  Those descriptors will now not be\n   sent to the client unless (1) it\
    \ is explicitly requested via a\n   \"fetch-descriptors\" operation, or (2) it\
    \ changes again.\n   In this manner, a client can run through its user's mailboxes,\n\
    \   getting all changes, incorporating them into the local mail state,\n   and\
    \ marking the changes as recorded.\n"
- title: 5.3. Batch operation versus interactive operation
  contents:
  - "5.3. Batch operation versus interactive operation\n   Because of the portable\
    \ nature of some workstations, they may not\n   always be connected to a network\
    \ (and able to communicate with the\n   repository).  Since each client maintains\
    \ a local mail state, Pcmail\n   users can manipulate the local state while not\
    \ connected to the\n   repository.  This is known as \"batch\" operation, since\
    \ all changes\n   are recorded by the client and made to the repository's global\
    \ state\n   in a batch, when the client next connects to the repository.\n   Interactive\
    \ operation occurs when a client is always connected to the\n   repository.  In\
    \ interactive mode, changes made to the local mail\n   state are also immediately\
    \ made to the global state via DMSP\n   operations.\n   In batch mode, interaction\
    \ between client and repository takes the\n   following form: the client connects\
    \ to the repository and sends over\n   all the changes made by the user to the\
    \ local mail state.  The\n   repository changes its global mail state accordingly.\
    \  When all\n   changes have been processed, the client begins synchronization;\
    \ this\n   incorporates newly-arrived mail, as well as mail state changes by\n\
    \   other clients, into the local state.\n   In interactive mode, since local\
    \ changes are immediately propagated\n   to the repository, the first part of\
    \ batch-type operation is\n   eliminated.  The synchronization process also changes;\
    \ although one\n   synchronization is required when the client first opens a connection\n\
    \   to the repository, subsequent synchronizations can be performed\n   either\
    \ at the user's request or automatically every so often by the\n   client.\n"
- title: 5.4. Message summaries
  contents:
  - "5.4. Message summaries\n   Smaller workstations may have little in the way of\
    \ disk storage.\n   Clients running on these workstations may never have enough\
    \ room for\n   a complete local copy of a user's global mail state.  This means\
    \ that\n   Pcmail's client architecture must allow user's to obtain a clear\n\
    \   picture of their mail state without having all their messages\n   present.\n\
    \   Descriptors provide message information without taking up large\n   amounts\
    \ of storage.  Each descriptor contains a summary of\n   information on a message.\
    \  This information includes the message UID,\n   its length in bytes and lines,\
    \ its status (contained in the eight\n   system-defined and eight user-defined\
    \ flags), and portions of its\n   RFC-822 header (the \"from:\", \"to:\", \"date:\"\
    \ and \"subject:\"  fields).\n   All of this information can be encoded in a small\
    \ (around 100 bytes)\n   data structure whose length is independent of the size\
    \ of the message\n   it describes.\n   Most clients should be able to store a\
    \ complete list of message\n   descriptors with little problem.  This allows a\
    \ user to get a\n   complete picture of his mail state without having all his\
    \ messages\n   present locally.  If a client has extremely limited amounts of\
    \ disk\n   storage, it is also possible to get a subset of the descriptors from\n\
    \   the repository.  Short messages can reside on the client, along with\n   the\
    \ descriptors, and long messages can either be printed via the DMSP\n   print-message\
    \ operation, or specially pulled over via the fetch-\n   message operation.\n"
- title: 6. Typical interactive-style client-repository interaction
  contents:
  - "6. Typical interactive-style client-repository interaction\n   The following\
    \ example describes a typical communication session\n   between the repository\
    \ and a client mail reader.  The client is one\n   of three belonging to user\
    \ \"Fred\".  Its name is \"office-client\", and\n   since Fred has used the client\
    \ within the last week, it is marked as\n   \"active\".  Fred has two mailboxes:\
    \  \"fred\" is where all of his\n   current mail is stored; \"archive\" is where\
    \ messages of lasting\n   importance are kept.  The example will run through a\
    \ simple\n   synchronization operation.  Typically, the synchronization will be\n\
    \   performed by a mail reader as part of a \"get new mail\" operation.\n   First\
    \ Fred's mail reader connects to the repository and receives the\n   following\
    \ banner:\n       200 Pcmail repository version 3.0.0 ready\n   In order to access\
    \ his global mail state, the mail reader must\n   authenticate Fred to the repository;\
    \ this is done via the DMSP login\n   operation:\n       login fred fred-password\
    \ office-client 0 0\n   This tells the repository that Fred is logging in via\
    \ \"office-\n   client\", and that \"office-client\" is identified by an existing\
    \ client\n   object in Fred's mail state.  The first argument to the login\n \
    \  operation is Fred's repository user name.  The second argument is\n   Fred's\
    \ password.  The third argument is the name of the client\n   communicating with\
    \ the repository.  The fourth argument tells the\n   repository not to create\
    \ \"office-client\" even if it cannot find its\n   client object.  The final argument\
    \ tells the repository that Fred's\n   client is not operating in batch mode but\
    \ rather in interactive mode.\n   Fred's authentication checks out, so the repository\
    \ logs him in.\n       200 command OK\n   Now that Fred is logged in, the mail\
    \ reader performs an initial\n   synchronization.  This process starts with the\
    \ mail reader's asking\n   for an up-to-date list of mailboxes:\n       list-mailboxes\n\
    \   The repository replies with:\n       230 mailbox list follows:\n       fred\
    \ 2313 10 1\n       archive 101 100 0\n       .\n   This tells the mail reader\
    \ that there are two mailboxes, \"fred\" and\n   \"archive\".  \"Fred\" has 10\
    \ messages, one of which is unseen.  The next\n   incoming message will be assigned\
    \ a UID of 2313.  \"Archive\", on the\n   other hand, has 100 messages, none of\
    \ which are unseen.  The next\n   message sent to \"archive\" will be assigned\
    \ the UID 101.  There are no\n   new mailboxes in the list (if there were, the\
    \ mail reader would\n   create them.  On the other hand, if some mailboxes in\
    \ the mail\n   reader's local list were not in the repository's list, the program\n\
    \   would assume them deleted by another client and delete them locally\n   as\
    \ well).\n   To synchronize, the mail reader need only look at each mailbox's\n\
    \   contents to see if (1) any new mail has arrived, or (2) if Fred\n   changed\
    \ any messages on one of his other two clients subsequent to\n   \"office-client\"\
    's last connection to the repository.\n   The mail reader asks for any changed\
    \ descriptors via the \"fetch-\n   changed-descriptors\" operation.  It requests\
    \ at most ten changed\n   descriptors since storage is very limited on Fred's\
    \ workstation.\n       fetch-changed-descriptors fred 10\n   The repository responds\
    \ with:\n       250 descriptor list follows:\n       expunged\n       2101\n \
    \      expunged\n       2104\n       descriptor\n       2107 1100011100000010\
    \ 1400 30\n       foo@bar.edu (Foo Jones)\n       fred@PTT.LCS.MIT.EDU\n     \
    \  Wed, 9 Dec 87 10:43:52 EST\n       A typical subject line\n       descriptor\n\
    \       2312 0000000000000000 12232 320\n       joe@athena.mit.edu\n       fred@PTT.LCS.MIT.EDU\n\
    \       Thu, 17 Dec 87 18:24:09 PST\n       Another typical subject line\n   \
    \    .\n   If a descriptor changed because it was expunged, it is transmitted\
    \ as\n   two lines: the word \"expunged\" on one line, followed by the message\n\
    \   UID on the next line.  If one of its flags changed state, or it is a\n   new\
    \ message, it is transmitted as six lines: the word \"descriptor\" on\n   one\
    \ line, followed by a line containing the message UID, flags, and\n   length in\
    \ bytes and lines, followed by the to, from, date, and\n   subject fields, each\
    \ on one line.  The flags are transmitted as a\n   single string of ones and zeroes,\
    \ a one if the flag is on and a zero\n   if the flag is off.  All 16 flags are\
    \ always transmitted.  Flag\n   zero's state is the first character in the flag\
    \ string; flag\n   fifteen's is the last character in the flag string.\n   The\
    \ first two descriptors in the list have been expunged, presumably\n   by Fred's\
    \ expunging his mailbox on another client.  The mail reader\n   removes messages\
    \ 2101 and 2104 from its local copy of mailbox \"fred\".\n   The next descriptor\
    \ in the list is one which Fred marked for deletion\n   on another client yesterday.\
    \  The mail reader marks the local version\n   of the message as deleted.  The\
    \ last descriptor in the list is a new\n   one.  The mail reader adds the descriptor\
    \ to its local list.  Since\n   all changes to mailbox \"fred\" have now been\
    \ recorded locally, the\n   update list can be reset:\n       reset-descriptors\
    \ fred 1 2312\n   The repository responds with:\n       200 command OK\n   indicating\
    \ that it has removed from \"office-client\"'s update list all\n   messages in\
    \ mailbox \"fred\" with UIDs between 1 and 2312 inclusive (in\n   this case just\
    \ two messages).  \"Fred\" has now been synchronized.  The\n   mail reader now\
    \ turns to Fred's \"archive\" mailbox and asks for the\n   first ten changed descriptors.\n\
    \       fetch-changed-descriptors archive 10\n   The repository responds with:\n\
    \       250 descriptor list follows:\n       .\n   The zero-length list tells\
    \ the mail reader that no descriptors have\n   been changed in \"archive\" since\
    \ its last synchronization.  No new\n   synchronization needs to be performed.\n\
    \   Fred's mail reader is now ready to pull over the new message.  The\n   message\
    \ is 320 lines long; there might not be sufficient storage on\n   \"office-client\"\
    \ to hold the new message.  The mail reader tries\n   anyway:\n       fetch-message\
    \ fred 2312\n   The repository begins transmitting the message:\n       251 message\
    \ follows:\n       UID: 2312\n       From: joe@bar.mit.edu\n       To: fred@PTT.LCS.MIT.EDU\n\
    \       Date: Thu, 17 Dec 87 18:24:09 PST\n       Subject: Another typical subject\
    \ line\n       Fred,\n       ...\n   Halfway through the message transmission,\
    \ Fred's workstation runs out\n   of disk space.  Because all DMSP operations\
    \ are defined to be\n   failure-atomic, the portion of the message already transmitted\
    \ is\n   destroyed locally and the operation fails.  The mail reader informs\n\
    \   Fred that the message cannot be pulled over because of a lack of disk\n  \
    \ space.  The synchronization process is now finished and Fred can\n   start reading\
    \ his mail.  The new message that was too big to fit on\n   \"office-client\"\
    \ will be marked \"off line\"; Fred can use the mail\n   reader to either remote-print\
    \ it or delete and expunge other messages\n   until he has enough space to store\
    \ the new message.\n   Since Fred is running in interactive mode, changes he makes\
    \ to any\n   messages will immediately be transmitted into DMSP operations and\n\
    \   sent to the repository.  Depending on the mail reader implementation,\n  \
    \ Fred will either have to execute a \"synchronize\" command periodically\n  \
    \ or the client will synchronize for him automatically every so often.\n"
- title: 7. A current Pcmail implementation
  contents:
  - "7. A current Pcmail implementation\n   The following section briefly describes\
    \ a current Pcmail system that\n   services a small community of users.  The Pcmail\
    \ repository runs\n   under UNIX on a DEC Microvax-II connected to the Internet.\
    \  The\n   clients run on IBM PCs, XTs, and ATs, as well as Sun workstations,\n\
    \   Microvaxes, and VAX-750s.\n"
- title: 7.1. IBM PC client code
  contents:
  - "7.1. IBM PC client code\n   Client code for the IBM machines operates only in\
    \ batch mode.  Users\n   make local state changes in a mail reader; the changes\
    \ are queued\n   until the user runs a network client program.  The program connects\n\
    \   to the repository, performs the queued changes, and synchronizes\n   local\
    \ and global mail states.  The network client program then\n   disconnects from\
    \ the repository.\n   The IBM PC client code has gone through several revisions\
    \ since the\n   first Pcmail RFC was published.  What was once a fairly primitive\
    \ and\n   cumbersome system has evolved into a system that makes excellent use\n\
    \   of the PC's limited resources and provides a fairly powerful, easy-\n   to-use\
    \ mail reader.\n   Users access and modify their local mail state via a mail reader\n\
    \   written in the Epsilon text editor's EEL extension language.  Users\n   are\
    \ given a variety of commands to operate on individual messages and\n   mailboxes,\
    \ as well as to compose outgoing mail.\n   Synchronization and the processing\
    \ of queued changes is performed by\n   a separate program, which the user runs\
    \ as desired.  The program\n   takes any actions queued while operating the mail\
    \ reader, and\n   converts them into DMSP operations.  All queued changes are\
    \ made\n   before any synchronization is performed.  The program can be invoked\n\
    \   directly from the mail reader, without having to exit and restart.\n   The\
    \ limitation of IBM PC client operation to batch mode was made\n   because of\
    \ development environment limitations.  The mail reader\n   cannot work with the\
    \ network code inside it because of the network\n   program architecture.  The\
    \ only solution was to provide a two-part\n   client, one part of which read the\
    \ mail and one part of which\n   interacted with the repository.  Although slightly\
    \ cumbersome, the\n   two-program setup works quite well.\n"
- title: 7.2. UNIX client code
  contents:
  - "7.2. UNIX client code\n   Client code for the Suns, Microvaxes, and VAX-750s\
    \ runs on 4.2/4.3BSD\n   UNIX.  It is fully interactive, with a powerful mail\
    \ reader inside\n   Richard Stallman's GNU-EMACS editor.  Since UNIX-based workstations\n\
    \   have a good deal of main memory and disk storage, no effort was made\n   to\
    \ lower local mail state size by keeping message descriptors rather\n   than message\
    \ text.\n   The local mail state consists of a number of BABYL-format mailboxes.\n\
    \   The interface is very similar to the RMAIL mail reader already\n   present\
    \ in GNU-EMACS.\n   The mail reader communicates with the repository through network\
    \ code\n   implemented in EMACS-LISP.  Changes to the local mail state are\n \
    \  immediately made on the repository; although the repository is fast,\n   there\
    \ is a small noticeable delay in performing operations over the\n   network.\n\
    \   There is no provision for automatic synchronization whenever new mail\n  \
    \ arrives or old mail is changed by another client.  Instead, users\n   must get\
    \ any new mail explicitly.  A simple \"notification\" program\n   runs in the\
    \ background and wakes up every minute to check for new\n   mail; when mail arrives,\
    \ the user executes a command to get the new\n   mail, synchronizing the mailbox\
    \ at the same time.\n"
- title: 7.3. Repository code
  contents:
  - "7.3. Repository code\n   The repository is implemented in C on 4.2/4.3BSD UNIX.\
    \  Currently it\n   runs on DEC VAX-750s and Microvaxes, although other repositories\
    \ will\n   soon be running on IBM RT machines and Sun workstations.  The\n   repository\
    \ code is designed to allow several clients belonging to a\n   particular user\
    \ to \"concurrently\" modify the user's state.  A locking\n   scheme prevents\
    \ one client from modifying mail state while another\n   client is modifying the\
    \ same state.\n"
- title: 8. Conclusions
  contents:
  - "8. Conclusions\n   Pcmail is now used by a small community of people at the MIT\n\
    \   Laboratory for Computer Science.  The repository design works well,\n   providing\
    \ an efficient means of storing and maintaining mail state\n   for several users.\
    \  Its performance is quite good when up to ten\n   users are connected; it remains\
    \ to be seen whether or not the\n   repository will be efficient at managing the\
    \ state of ten or a\n   hundred times that many users.  Given sufficient disk\
    \ storage, it\n   should be able to, since communication between different users'\n\
    \   clients and the repository is likely to be very asynchronous and\n   likely\
    \ to occur in short bursts with long \"quiet intervals\" in\n   between as users\
    \ are busy doing other things.\n   Members of another research group at LCS are\
    \ currently working on a\n   replicated, scalable version of the repository designed\
    \ to support a\n   very large community of users with high availability.  This\n\
    \   repository also uses DMSP and has successfully communicated with\n   clients\
    \ that use the current repository implementation.  DMSP\n   therefore seems to\
    \ be usable over several flavors of repository\n   design.\n   The IBM PC clients\
    \ are very limited in the way of resources.  The\n   mail reader/editor combination\
    \ is quite powerful, making local mail\n   state manipulation fairly easy.  Obviously\
    \ a big performance\n   enhancement would be to provide a fully interactive client.\
    \  As it\n   is, batch-style synchronization is relatively time consuming due\
    \ to\n   the low performance of the PCs.  The \"batch-mode\" that the PCs use\n\
    \   tends to be good for those PCs that spend a large percentage of their\n  \
    \ time unplugged and away from a network.  It is somewhat inconvenient\n   for\
    \ those PCs that are always connected to a network and could make\n   good use\
    \ of an \"interactive-mode\" state manipulation.\n   The UNIX-based clients are\
    \ more powerful and easier to use than their\n   PC counterparts.  Synchronization\
    \ is much faster, and there is far\n   more functionality in the mail reader (having\
    \ an interface that runs\n   within GNU-EMACS helps a lot in this respect).  Most\
    \ of those people\n   using the Pcmail system use the UNIX-based client code.\n"
- title: I. DMSP Protocol Specification
  contents:
  - "I. DMSP Protocol Specification\n   Following are a list of DMSP operations by\
    \ object type, together with\n   syntax, and possible responses.  Some responses\
    \ may be followed by\n   zero or more lines of text, terminated by a single period\
    \ plus CR-LF\n   pair.  Only success responses and common error responses are\
    \ listed;\n   a complete list of possible responses follows this appendix.\n \
    \  Expressions in angle brackets (i.e.  <mailbox-name>) are\n   metalinguistic\
    \ variables indicating a general request or response\n   form.  Operations with\
    \ arguments have a sample invocation following\n   the operation syntax and response.\n\
    \   General operations:\n       HELP\n       100 Repository version xxx.  Following\
    \ are supported:\n       HELP\n       SEND-VERSION\n       SEND-MESSAGE\n    \
    \   LOGIN\n       LOGOUT\n       ...\n       FETCH-MESSAGE\n       COPY-MESSAGE\n\
    \       .\n       SEND-VERSION <version-number>\n       200 Command OK\n     \
    \  500 version skew!\n       i.e. SEND-VERSION 230\n       SEND-MESSAGE\n    \
    \   350 enter message; end with \".\"\n       To: markl\n       From: markl\n\
    \       Subject: a test message\n       this is a test message\n       .\n   Repository\
    \ responds:\n       200 Command OK\n       403 message syntax error\n   User operations:\n\
    \       LOGIN <user> <password> <client> <create-p> <batch-p>\n       200 Command\
    \ OK\n       221 Client out of date by > 1 week\n       404 Bad password\n   \
    \    405 Client <client-name> is locked\n       411 No user named <user-name>\n\
    \       421 Client <client-name> not found\n       i.e. LOGIN markl foo random-client-name\
    \ 1 0\n       LOGOUT\n       200 Command OK\n       SET-PASSWORD <old-password>\
    \ <new-password>\n       200 Command OK\n       404 Incorrect old password\n \
    \      i.e. SET-PASSWORD foo bar\n   Client operations:\n       LIST-CLIENTS\n\
    \       220 Client list <name> <status> follows:\n       client-1 active\n   \
    \    client-2 inactive\n       client-3 active\n       ...\n       client-foobar\
    \ active\n       .\n    Each line of the list contains a client name, followed\
    \ by\n   whitespace, followed by the word \"active\" or the word \"inactive\"\
    ,\n   indicating whether or not the client has connected to the repository\n \
    \  within the last week.\n       CREATE-CLIENT <client-name>\n       200 Command\
    \ OK\n       403 <client-name> is an illegal name\n       420 Client <client-name>\
    \ exists\n       i.e. CREATE-CLIENT new-client\n       DELETE-CLIENT <client-name>\n\
    \       200 Command OK\n       421 Client <client-name> not found\n       405\
    \ Client <client-name> is locked\n       i.e. DELETE-CLIENT old-client\n     \
    \  RESET-CLIENT <client-name>\n       200 Command OK\n       421 Client <client-name>\
    \ not found\n       405 Client <client-name> is locked\n       i.e. RESET-CLIENT\
    \ any-old-client\n   Mailbox operations:\n       LIST-MAILBOXES\n       230 Mbox\
    \ list <name> <high-UID> <#msgs> <#new> follows:\n       mailbox-1 2338 8 1\n\
    \       mailbox-2 59 44 0\n       ...\n       mailbox-foobar 19 9 0\n       .\n\
    \   Each line of the list contains a mailbox name, followed by the\n   mailbox's\
    \ next available unique identifier, followed by the number of\n   messages in\
    \ the mailbox, followed finally by the number of unseen\n   messages in the mailbox.\
    \  Unseen messages are those whose descriptors\n   have flag #1 (\"message has\
    \ been seen\") set to zero.\n       CREATE-MAILBOX <mailbox-name>\n       200\
    \ Command OK\n       403 <mailbox-name> is an illegal name\n       430 <mailbox-name>\
    \ already exists\n       440 <mailbox-name> exists as a bboard subscription\n\
    \       i.e. CREATE-MAILBOX current-events\n       DELETE-MAILBOX <mailbox-name>\n\
    \       200 Command OK\n       431 mailbox <mailbox-name> not found\n       440\
    \ <mailbox-name> is a bboard; use delete-bboard-mailbox\n       i.e. DELETE-MAILBOX\
    \ income-tax-information\n       CREATE-BBOARD-MAILBOX <mailbox-name>\n      \
    \ 200 Command OK\n       430 a mailbox named <mailbox-name> already exists.\n\
    \       430 a bboard mailbox named <mailbox-name> already exists.\n       403\
    \ <mailbox-name> is an illegal name\n       i.e. CREATE-BBOARD-MAILBOX sf-lovers\n\
    \       DELETE-BBOARD-MAILBOX <mailbox-name>\n       200 Command OK\n       404\
    \ not owner of <mailbox-name>\n       431 no bboard mailbox named <mailbox-name>\n\
    \       i.e. DELETE-BBOARD-MAILBOX rec.autos\n       RESET-MAILBOX <mailbox-name>\n\
    \       200 Command OK\n       431 mailbox <mailbox-name> not found\n       i.e.\
    \ RESET-MAILBOX british-cars\n       EXPUNGE-MAILBOX <mailbox-name>\n       200\
    \ Command OK\n       431 mailbox <mailbox-name> not found\n       EXPUNGE-MAILBOX\
    \ british-cars\n   Address operations:\n       LIST-ADDRESSES <mailbox-name>\n\
    \       260 Address list for <mailbox-name> follows:\n       address-1\n     \
    \  address-2\n       ...\n       address-6\n       .\n       or\n       431 mailbox\
    \ <mailbox-name> not found\n       i.e. LIST-ADDRESSES archive\n       Each line\
    \ of the list consists solely of one address.\n       CREATE-ADDRESS <mailbox-name>\
    \ <address-name>\n       200 Command OK\n       403 <mailbox-name> is an illegal\
    \ name\n       431 mailbox <mailbox-name> not found\n       460 <address-name>\
    \ already exists\n       i.e. CREATE-ADDRESS markl markl-bug-pcmail\n       DELETE-ADDRESS\
    \ <mailbox-name> <address-name>\n       200 Command OK\n       431 mailbox <mailbox-name>\
    \ not found\n       461 address <address-name> not found\n       i.e. DELETE-ADDRESS\
    \ markl markl-info-cobol\n   Subscription operations:\n       LIST-SUBSCRIPTIONS\n\
    \       240 subscription list follows:\n       bboard-1 2573 33 2606\n       bboard-2\
    \ 541 4 545\n       ...\n       bboard-6 1530 43 1573\n       .\n   Each line\
    \ of the list consists of a bulletin-board name, followed by\n   the UID of the\
    \ first message which the user has not yet looked at,\n   followed by the number\
    \ of messages in the bulletin-board that the\n   user has not yet looked at, followed\
    \ by the bulletin-board's next\n   available unique message identifier.\n    \
    \   CREATE-SUBSCRIPTION <bboard-name>\n       200 Command OK\n       403 <bboard-name>\
    \ is an illegal name\n       430 A mailbox named <bboard-name> already exists\n\
    \       431 Bboard mailbox <bboard-name> not found\n       440 Already subscribing\
    \ to <bboard-name>\n       i.e. CREATE-SUBSCRIPTION sf-lovers\n       DELETE-SUBSCRIPTION\
    \ <bboard-name>\n       200 Command OK\n       441 Subscription <bboard-name>\
    \ not found\n       i.e. DELETE-SUBSCRIPTION rec.music\n       RESET-SUBSCRIPTION\
    \ <bboard-name> <new-UID>\n       200 Command OK\n       441 Subscription <bboard-name>\
    \ not found\n       i.e. RESET-SUBSCRIPTION rec.music.gdead 1210\n       LIST-AVAILABLE-SUBSCRIPTIONS\n\
    \       241 All available bboards follow:\n       mod.politics\n       sfl\n \
    \      tcp-ip\n       forum\n       ...\n       comp.emacs\n       .\n       Each\
    \ line of the list consists solely of one bulletin-board\n       name.\n   Message\
    \ operations:\n       FETCH-CHANGED-DESCRIPTORS <mailbox-name> <max-to-send>\n\
    \       250 Descriptor list follows:\n       expunged\n       2333\n       expunged\n\
    \       2334\n       descriptor\n       2337 0001000001110000 481 14\n       croaker@ptt.lcs.mit.edu\n\
    \       fred@anymachine.mit.edu\n       Tue, 19 Jan 88 11:10:03 EST\n       a\
    \ typical subject line\n       descriptor\n       2339 0000000000000000 1457 40\n\
    \       bob@lcs.mit.edu\n       csr-people@ptt.lcs.mit.edu\n       Mon, 18 Jan\
    \ 88 13:08:17 +0000\n       another typical subject line\n       expunged\n  \
    \     2340\n       .\n       or\n       431 mailbox <mailbox-name> not found\n\
    \       i.e. FETCH-CHANGED-DESCRIPTORS markl 100\n   Each element of the descriptor\
    \ list is either two or six lines long.\n   Descriptors which have been expunged\
    \ are transmitted as two lines:\n   the word \"expunged\" on one line, followed\
    \ by the message unique\n   identifier on the next line.  Descriptors which still\
    \ exist are\n   transmitted as six lines: the word \"descriptor\" on one line,\
    \ followed\n   by a line containing the message unique identifier, flag states\n\
    \   (sixteen characters either one or zero depending on the associated\n   flag\
    \ value), followed by the message length in characters, followed\n   by the message\
    \ length in lines.  The next four lines contain the\n   message's \"from:\", \"\
    to:\", \"date:\", and \"subject:\" fields,\n   respectively.  Flag zero's state\
    \ is the first character in the flag\n   string; flag fifteen's is the last character\
    \ in the flag string.\n       FETCH-DESCRIPTORS <mailbox-name> <low-uid> <high-uid>\n\
    \       250 Descriptor list follows:\n       descriptor\n       2337 0001000001110000\
    \ 481 14\n       croaker@ptt.lcs.mit.edu\n       fred@anymachine.mit.edu\n   \
    \    Tue, 19 Jan 88 11:10:03 EST\n       a typical subject line\n       descriptor\n\
    \       2339 0000000000000000 1457 40\n       bob@lcs.mit.edu\n       csr-people@ptt.lcs.mit.edu\n\
    \       Mon, 18 Jan 88 13:08:17 +0000\n       another typical subject line\n \
    \      .\n       or\n       431 mailbox <mailbox-name> not found\n       i.e.\
    \ FETCH-DESCRIPTORS british-cars 12 31\n       COPY-MESSAGE <src-mailbox> <target-mailbox>\
    \ <source-UID>\n       250 Descriptor list follows:\n       descriptor\n     \
    \  2339 0000000000000000 1457 40\n       bob@lcs.mit.edu\n       csr-people@ptt.lcs.mit.edu\n\
    \       Mon, 18 Jan 88 13:08:17 +0000\n       another typical subject line\n \
    \      .\n       or\n       400 cannot copy message onto itself\n       431 target\
    \ mailbox <target-mailbox> not found\n       431 source mailbox <source-mailbox>\
    \ not found\n       451 message <source-UID> not found\n       i.e. COPY-MESSAGE\
    \ markl british-cars 2338\n       RESET-DESCRIPTORS <mailbox-name> <low-UID> <high-UID>\n\
    \       200 Command OK\n       431 mailbox <mailbox-name> not found\n       i.e.\
    \ RESET-DESCRIPTORS markl 1 10000\n       PRINT-MESSAGE <mailbox-name> <UID> <printer-ID>\n\
    \       200 Command OK\n       401 printer <printer-name> not found\n       431\
    \ mailbox <mailbox-name> not found\n       451 message <UID> not found\n     \
    \  i.e. PRINT-MESSAGE markl 2433 pravda\n       SET-MESSAGE-FLAG <mailbox-name>\
    \ <UID> <flagnum> <state>\n       200 Command OK\n       431 mailbox <mailbox-name>\
    \ not found\n       451 message <UID> not found\n       500 flag number <flag-number>\
    \ out of range\n       i.e. SET-MESSAGE-FLAG british-cars 23 0 1\n       FETCH-MESSAGE\
    \ <mailbox-name> <UID>\n       251 message follows:\n       From: markl@ptt.lcs.mit.edu\n\
    \       To: markl@ptt.lcs.mit.edu\n       Date: Sun, 17 Jan 88 11:11:11 EST\n\
    \       Subject: anything\n       this is a sample of some\n       message text\n\
    \       .\n       or\n       431 Mailbox <mailbox-name> not found\n       451\
    \ message <UID> not found\n       i.e. FETCH-MESSAGE current-events 495\n"
- title: II. Operations by name
  contents:
  - "II. Operations by name\n   copy-message\n   create-address\n   create-bboard-mailbox\n\
    \   create-client\n   create-mailbox\n   create-subscription\n   delete-address\n\
    \   delete-bboard-mailbox\n   delete-client\n   delete-mailbox\n   delete-subscription\n\
    \   expunge-mailbox\n   fetch-changed-descriptors\n   fetch-descriptors\n   fetch-message\n\
    \   help\n   list-addresses\n   list-available-subscriptions\n   list-clients\n\
    \   list-mailboxes\n   list-subscriptions\n   login\n   logout\n   print-message\n\
    \   reset-client\n   reset-descriptors\n   reset-mailbox\n   reset-subscription\n\
    \   send-message\n   send-version\n   set-message-flag\n   set-password\n"
- title: III. Responses by number
  contents:
  - "III. Responses by number\n   100 Pcmail repository version XXX; following are\
    \ supported\n   200 Command OK\n   220 Client list <name> <status> follows:\n\
    \   221 Client out of date by > 1 week\n   230 Mailbox list <name> <high UID>\
    \ <#msgs> <#new> follows:\n   240 Subscription list follows:\n   250 Descriptor\
    \ list follows:\n   251 Message follows:\n   260 Address list follows:\n   350\
    \ enter message; end with \".\"\n   400 cannot copy message onto itself\n   410\
    \ already logged in\n   420 client <name> already exists\n   430 mailbox <name>\
    \ already exists\n   430 bboard mailbox <name> already exists\n   440 subscription\
    \ <name> already exists\n   460 address <name> already exists\n   411 no user\
    \ named <name>\n   421 client <name> not found\n   431 mailbox <name> not found\n\
    \   441 subscription <name> not found\n   451 message <UID> not found\n   461\
    \ address <name> not found\n   402 internal error message\n   403 syntax error\
    \ in outbound message\n   404 bad password or permission denied\n   405 mail state\
    \ is temporarily in use by another client\n   406 please log in\n   500 operation\
    \ syntax error or illegal argument\n"
