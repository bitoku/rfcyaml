- title: __initial_text__
  contents:
  - '          Transport Layer Security (TLS) Encryption for RADIUS

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a transport profile for RADIUS using\n \
    \  Transport Layer Security (TLS) over TCP as the transport protocol.\n   This\
    \ enables dynamic trust relationships between RADIUS servers.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6614.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Requirements Language ......................................3\n  \
    \    1.2. Terminology ................................................4\n    \
    \  1.3. Document Status ............................................4\n   2. Normative:\
    \ Transport Layer Security for RADIUS/TCP ..............5\n      2.1. TCP port\
    \ and Packet Types ..................................5\n      2.2. TLS Negotiation\
    \ ............................................5\n      2.3. Connection Setup ...........................................5\n\
    \      2.4. Connecting Client Identity .................................7\n  \
    \    2.5. RADIUS Datagrams ...........................................8\n   3.\
    \ Informative: Design Decisions ..................................10\n      3.1.\
    \ Implications of Dynamic Peer Discovery ....................10\n      3.2. X.509\
    \ Certificate Considerations ..........................10\n      3.3. Ciphersuites\
    \ and Compression Negotiation Considerations ...11\n      3.4. RADIUS Datagram\
    \ Considerations ............................11\n   4. Compatibility with Other\
    \ RADIUS Transports .....................12\n   5. Diameter Compatibility .........................................13\n\
    \   6. Security Considerations ........................................13\n  \
    \ 7. IANA Considerations ............................................14\n   8.\
    \ Acknowledgements ...............................................15\n   9. References\
    \ .....................................................15\n      9.1. Normative\
    \ References ......................................15\n      9.2. Informative\
    \ References ....................................16\n   Appendix A. Implementation\
    \ Overview: Radiator .....................18\n   Appendix B. Implementation Overview:\
    \ radsecproxy ..................19\n   Appendix C. Assessment of Crypto-Agility\
    \ Requirements .............20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The RADIUS protocol [RFC2865] is a widely deployed authentication\
    \ and\n   authorization protocol.  The supplementary RADIUS Accounting\n   specification\
    \ [RFC2866] provides accounting mechanisms, thus\n   delivering a full Authentication,\
    \ Authorization, and Accounting (AAA)\n   solution.  However, RADIUS is experiencing\
    \ several shortcomings, such\n   as its dependency on the unreliable transport\
    \ protocol UDP and the\n   lack of security for large parts of its packet payload.\
    \  RADIUS\n   security is based on the MD5 algorithm, which has been proven to\
    \ be\n   insecure.\n   The main focus of RADIUS over TLS is to provide a means\
    \ to secure the\n   communication between RADIUS/TCP peers using TLS.  The most\
    \ important\n   use of this specification lies in roaming environments where RADIUS\n\
    \   packets need to be transferred through different administrative\n   domains\
    \ and untrusted, potentially hostile networks.  An example for\n   a worldwide\
    \ roaming environment that uses RADIUS over TLS to secure\n   communication is\
    \ \"eduroam\", see [eduroam].\n   There are multiple known attacks on the MD5\
    \ algorithm that is used in\n   RADIUS to provide integrity protection and a limited\
    \ confidentiality\n   protection (see [MD5-attacks]).  RADIUS over TLS wraps the\
    \ entire\n   RADIUS packet payload into a TLS stream and thus mitigates the risk\n\
    \   of attacks on MD5.\n   Because of the static trust establishment between RADIUS\
    \ peers (IP\n   address and shared secret), the only scalable way of creating\
    \ a\n   massive deployment of RADIUS servers under the control of different\n\
    \   administrative entities is to introduce some form of a proxy chain to\n  \
    \ route the access requests to their home server.  This creates a lot\n   of overhead\
    \ in terms of possible points of failure, longer\n   transmission times, as well\
    \ as middleboxes through which\n   authentication traffic flows.  These middleboxes\
    \ may learn privacy-\n   relevant data while forwarding requests.  The new features\
    \ in RADIUS\n   over TLS obsolete the use of IP addresses and shared MD5 secrets\
    \ to\n   identify other peers and thus allow the use of more contemporary\n  \
    \ trust models, e.g., checking a certificate by inspecting the issuer\n   and\
    \ other certificate properties.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   In this document, several words are used to signify\
    \ the requirements\n   of the specification.  The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT\n   RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be\n\
    \   interpreted as described in RFC 2119 [RFC2119].\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   RADIUS/TLS node:  a RADIUS-over-TLS client or server\n\
    \   RADIUS/TLS Client:  a RADIUS-over-TLS instance that initiates a new\n    \
    \                   connection.\n   RADIUS/TLS Server:  a RADIUS-over-TLS instance\
    \ that listens on a\n                       RADIUS-over-TLS port and accepts new\
    \ connections\n   RADIUS/UDP: a classic RADIUS transport over UDP as defined in\n\
    \               [RFC2865]\n"
- title: 1.3.  Document Status
  contents:
  - "1.3.  Document Status\n   This document is an Experimental RFC.\n   It is one\
    \ out of several approaches to address known cryptographic\n   weaknesses of the\
    \ RADIUS protocol (see also Section 4).  The\n   specification does not fulfill\
    \ all recommendations on a AAA transport\n   profile as per [RFC3539]; in particular,\
    \ by being based on TCP as a\n   transport layer, it does not prevent head-of-line\
    \ blocking issues.\n   If this specification is indeed selected for advancement\
    \ to Standards\n   Track, certificate verification options (Section 2.3, point\
    \ 2) need\n   to be refined.\n   Another experimental characteristic of this specification\
    \ is the\n   question of key management between RADIUS/TLS peers.  RADIUS/UDP\
    \ only\n   allowed for manual key management, i.e., distribution of a shared\n\
    \   secret between a client and a server.  RADIUS/TLS allows manual\n   distribution\
    \ of long-term proofs of peer identity as well (by using\n   TLS-PSK ciphersuites,\
    \ or identifying clients by a certificate\n   fingerprint), but as a new feature\
    \ enables use of X.509 certificates\n   in a PKIX infrastructure.  It remains\
    \ to be seen if one of these\n   methods will prevail or if both will find their\
    \ place in real-life\n   deployments.  The authors can imagine pre-shared keys\
    \ (PSK) to be\n   popular in small-scale deployments (Small Office, Home Office\
    \ (SOHO)\n   or isolated enterprise deployments) where scalability is not an issue\n\
    \   and the deployment of a Certification Authority (CA) is considered\n   too\
    \ much of a hassle; however, the authors can also imagine large\n   roaming consortia\
    \ to make use of PKIX.  Readers of this specification\n   are encouraged to read\
    \ the discussion of key management issues within\n   [RFC6421] as well as [RFC4107].\n\
    \   It has yet to be decided whether this approach is to be chosen for\n   Standards\
    \ Track.  One key aspect to judge whether the approach is\n   usable on a large\
    \ scale is by observing the uptake, usability, and\n   operational behavior of\
    \ the protocol in large-scale, real-life\n   deployments.\n   An example for a\
    \ worldwide roaming environment that uses RADIUS over\n   TLS to secure communication\
    \ is \"eduroam\", see [eduroam].\n"
- title: '2.  Normative: Transport Layer Security for RADIUS/TCP'
  contents:
  - '2.  Normative: Transport Layer Security for RADIUS/TCP

    '
- title: 2.1.  TCP port and Packet Types
  contents:
  - "2.1.  TCP port and Packet Types\n   The default destination port number for RADIUS\
    \ over TLS is TCP/2083.\n   There are no separate ports for authentication, accounting,\
    \ and\n   dynamic authorization changes.  The source port is arbitrary.  See\n\
    \   Section 3.4 for considerations regarding the separation of\n   authentication,\
    \ accounting, and dynamic authorization traffic.\n"
- title: 2.2.  TLS Negotiation
  contents:
  - "2.2.  TLS Negotiation\n   RADIUS/TLS has no notion of negotiating TLS in an established\n\
    \   connection.  Servers and clients need to be preconfigured to use\n   RADIUS/TLS\
    \ for a given endpoint.\n"
- title: 2.3.  Connection Setup
  contents:
  - "2.3.  Connection Setup\n   RADIUS/TLS nodes\n   1.  establish TCP connections\
    \ as per [RFC6613].  Failure to connect\n       leads to continuous retries, with\
    \ exponentially growing intervals\n       between every try.  If multiple servers\
    \ are defined, the node MAY\n       attempt to establish a connection to these\
    \ other servers in\n       parallel, in order to implement quick failover.\n \
    \  2.  after completing the TCP handshake, immediately negotiate TLS\n       sessions\
    \ according to [RFC5246] or its predecessor TLS 1.1.  The\n       following restrictions\
    \ apply:\n       *  Support for TLS v1.1 [RFC4346] or later (e.g., TLS 1.2\n \
    \         [RFC5246]) is REQUIRED.  To prevent known attacks on TLS\n         \
    \ versions prior to 1.1, implementations MUST NOT negotiate TLS\n          versions\
    \ prior to 1.1.\n       *  Support for certificate-based mutual authentication\
    \ is\n          REQUIRED.\n       *  Negotiation of mutual authentication is REQUIRED.\n\
    \       *  Negotiation of a ciphersuite providing for confidentiality as\n   \
    \       well as integrity protection is REQUIRED.  Failure to comply\n       \
    \   with this requirement can lead to severe security problems,\n          like\
    \ user passwords being recoverable by third parties.  See\n          Section 6\
    \ for details.\n       *  Support for and negotiation of compression is OPTIONAL.\n\
    \       *  Support for TLS-PSK mutual authentication [RFC4279] is\n          OPTIONAL.\n\
    \       *  RADIUS/TLS implementations MUST, at a minimum, support\n          negotiation\
    \ of the TLS_RSA_WITH_3DES_EDE_CBC_SHA, and SHOULD\n          support TLS_RSA_WITH_RC4_128_SHA\
    \ and\n          TLS_RSA_WITH_AES_128_CBC_SHA as well (see Section 3.3.\n    \
    \   *  In addition, RADIUS/TLS implementations MUST support\n          negotiation\
    \ of the mandatory-to-implement ciphersuites\n          required by the versions\
    \ of TLS that they support.\n   3.  Peer authentication can be performed in any\
    \ of the following\n       three operation models:\n       *  TLS with X.509 certificates\
    \ using PKIX trust models (this\n          model is mandatory to implement):\n\
    \          +  Implementations MUST allow the configuration of a list of\n    \
    \         trusted Certification Authorities for incoming connections.\n      \
    \    +  Certificate validation MUST include the verification rules\n         \
    \    as per [RFC5280].\n          +  Implementations SHOULD indicate their trusted\
    \ Certification\n             Authorities (CAs).  For TLS 1.2, this is done using\n\
    \             [RFC5246], Section 7.4.4, \"certificate_authorities\" (server\n\
    \             side) and [RFC6066], Section 6 \"Trusted CA Indication\"\n     \
    \        (client side).  See also Section 3.2.\n          +  Peer validation always\
    \ includes a check on whether the\n             locally configured expected DNS\
    \ name or IP address of the\n             server that is contacted matches its\
    \ presented certificate.\n             DNS names and IP addresses can be contained\
    \ in the Common\n             Name (CN) or subjectAltName entries.  For verification,\n\
    \             only one of these entries is to be considered.  The\n          \
    \   following precedence applies: for DNS name validation,\n             subjectAltName:DNS\
    \ has precedence over CN; for IP address\n             validation, subjectAltName:iPAddr\
    \ has precedence over CN.\n             Implementors of this specification are\
    \ advised to read\n             [RFC6125], Section 6, for more details on DNS\
    \ name\n             validation.\n          +  Implementations MAY allow the configuration\
    \ of a set of\n             additional properties of the certificate to check\
    \ for a\n             peer's authorization to communicate (e.g., a set of allowed\n\
    \             values in subjectAltName:URI or a set of allowed X509v3\n      \
    \       Certificate Policies).\n          +  When the configured trust base changes\
    \ (e.g., removal of a\n             CA from the list of trusted CAs; issuance\
    \ of a new CRL for\n             a given CA), implementations MAY renegotiate\
    \ the TLS\n             session to reassess the connecting peer's continued\n\
    \             authorization.\n       *  TLS with X.509 certificates using certificate\
    \ fingerprints\n          (this model is optional to implement): Implementations\
    \ SHOULD\n          allow the configuration of a list of trusted certificates,\n\
    \          identified via fingerprint of the DER encoded certificate\n       \
    \   octets.  Implementations MUST support SHA-1 as the hash\n          algorithm\
    \ for the fingerprint.  To prevent attacks based on\n          hash collisions,\
    \ support for a more contemporary hash function\n          such as SHA-256 is\
    \ RECOMMENDED.\n       *  TLS using TLS-PSK (this model is optional to implement).\n\
    \   4.  start exchanging RADIUS datagrams (note Section 3.4 (1)).  The\n     \
    \  shared secret to compute the (obsolete) MD5 integrity checks and\n       attribute\
    \ encryption MUST be \"radsec\" (see Section 3.4 (2)).\n"
- title: 2.4.  Connecting Client Identity
  contents:
  - "2.4.  Connecting Client Identity\n   In RADIUS/UDP, clients are uniquely identified\
    \ by their IP address.\n   Since the shared secret is associated with the origin\
    \ IP address, if\n   more than one RADIUS client is associated with the same IP\
    \ address,\n   then those clients also must utilize the same shared secret, a\n\
    \   practice that is inherently insecure, as noted in [RFC5247].\n   RADIUS/TLS\
    \ supports multiple operation modes.\n   In TLS-PSK operation, a client is uniquely\
    \ identified by its TLS\n   identifier.\n   In TLS-X.509 mode using fingerprints,\
    \ a client is uniquely identified\n   by the fingerprint of the presented client\
    \ certificate.\n   In TLS-X.509 mode using PKIX trust models, a client is uniquely\n\
    \   identified by the tuple (serial number of presented client\n   certificate;Issuer).\n\
    \   Note well: having identified a connecting entity does not mean the\n   server\
    \ necessarily wants to communicate with that client.  For\n   example, if the\
    \ Issuer is not in a trusted set of Issuers, the server\n   may decline to perform\
    \ RADIUS transactions with this client.\n   There are numerous trust models in\
    \ PKIX environments, and it is\n   beyond the scope of this document to define\
    \ how a particular\n   deployment determines whether a client is trustworthy.\n\
    \   Implementations that want to support a wide variety of trust models\n   should\
    \ expose as many details of the presented certificate to the\n   administrator\
    \ as possible so that the trust model can be implemented\n   by the administrator.\
    \  As a suggestion, at least the following\n   parameters of the X.509 client\
    \ certificate should be exposed:\n   o  Originating IP address\n   o  Certificate\
    \ Fingerprint\n   o  Issuer\n   o  Subject\n   o  all X509v3 Extended Key Usage\n\
    \   o  all X509v3 Subject Alternative Name\n   o  all X509v3 Certificate Policies\n\
    \   In TLS-PSK operation, at least the following parameters of the TLS\n   connection\
    \ should be exposed:\n   o  Originating IP address\n   o  TLS Identifier\n"
- title: 2.5.  RADIUS Datagrams
  contents:
  - "2.5.  RADIUS Datagrams\n   Authentication, Authorization, and Accounting packets\
    \ are sent\n   according to the following rules:\n   RADIUS/TLS clients transmit\
    \ the same packet types on the connection\n   they initiated as a RADIUS/UDP client\
    \ would (see Section 3.4 (3) and\n   (4)).  For example, they send\n   o  Access-Request\n\
    \   o  Accounting-Request\n   o  Status-Server\n   o  Disconnect-ACK\n   o  Disconnect-NAK\n\
    \   o  ...\n   and they receive\n   o  Access-Accept\n   o  Accounting-Response\n\
    \   o  Disconnect-Request\n   o  ...\n   RADIUS/TLS servers transmit the same\
    \ packet types on connections they\n   have accepted as a RADIUS/UDP server would.\
    \  For example, they send\n   o  Access-Challenge\n   o  Access-Accept\n   o \
    \ Access-Reject\n   o  Accounting-Response\n   o  Disconnect-Request\n   o  ...\n\
    \   and they receive\n   o  Access-Request\n   o  Accounting-Request\n   o  Status-Server\n\
    \   o  Disconnect-ACK\n   o  ...\n   Due to the use of one single TCP port for\
    \ all packet types, it is\n   required that a RADIUS/TLS server signal which types\
    \ of packets are\n   supported on a server to a connecting peer.  See also Section\
    \ 3.4 for\n   a discussion of signaling.\n   o  When an unwanted packet of type\
    \ 'CoA-Request' or 'Disconnect-\n      Request' is received, a RADIUS/TLS server\
    \ needs to respond with a\n      'CoA-NAK' or 'Disconnect-NAK', respectively.\
    \  The NAK SHOULD\n      contain an attribute Error-Cause with the value 406 (\"\
    Unsupported\n      Extension\"); see [RFC5176] for details.\n   o  When an unwanted\
    \ packet of type 'Accounting-Request' is received,\n      the RADIUS/TLS server\
    \ SHOULD reply with an Accounting-Response\n      containing an Error-Cause attribute\
    \ with value 406 \"Unsupported\n      Extension\" as defined in [RFC5176].  A\
    \ RADIUS/TLS accounting\n      client receiving such an Accounting-Response SHOULD\
    \ log the error\n      and stop sending Accounting-Request packets.\n"
- title: '3.  Informative: Design Decisions'
  contents:
  - "3.  Informative: Design Decisions\n   This section explains the design decisions\
    \ that led to the rules\n   defined in the previous section.\n"
- title: 3.1.  Implications of Dynamic Peer Discovery
  contents:
  - "3.1.  Implications of Dynamic Peer Discovery\n   One mechanism to discover RADIUS-over-TLS\
    \ peers dynamically via DNS\n   is specified in [DYNAMIC].  While this mechanism\
    \ is still under\n   development and therefore is not a normative dependency of\
    \ RADIUS/\n   TLS, the use of dynamic discovery has potential future implications\n\
    \   that are important to understand.\n   Readers of this document who are considering\
    \ the deployment of DNS-\n   based dynamic discovery are thus encouraged to read\
    \ [DYNAMIC] and\n   follow its future development.\n"
- title: 3.2.  X.509 Certificate Considerations
  contents:
  - "3.2.  X.509 Certificate Considerations\n   (1)  If a RADIUS/TLS client is in\
    \ possession of multiple certificates\n        from different CAs (i.e., is part\
    \ of multiple roaming consortia)\n        and dynamic discovery is used, the discovery\
    \ mechanism possibly\n        does not yield sufficient information to identify\
    \ the consortium\n        uniquely (e.g., DNS discovery).  Subsequently, the client\
    \ may\n        not know by itself which client certificate to use for the TLS\n\
    \        handshake.  Then, it is necessary for the server to signal to\n     \
    \   which consortium it belongs and which certificates it expects.\n        If\
    \ there is no risk of confusing multiple roaming consortia,\n        providing\
    \ this information in the handshake is not crucial.\n   (2)  If a RADIUS/TLS server\
    \ is in possession of multiple certificates\n        from different CAs (i.e.,\
    \ is part of multiple roaming\n        consortia), it will need to select one\
    \ of its certificates to\n        present to the RADIUS/TLS client.  If the client\
    \ sends the\n        Trusted CA Indication, this hint can make the server select\
    \ the\n        appropriate certificate and prevent a handshake failure.\n    \
    \    Omitting this indication makes it impossible to\n        deterministically\
    \ select the right certificate in this case.  If\n        there is no risk of\
    \ confusing multiple roaming consortia,\n        providing this indication in\
    \ the handshake is not crucial.\n"
- title: 3.3.  Ciphersuites and Compression Negotiation Considerations
  contents:
  - "3.3.  Ciphersuites and Compression Negotiation Considerations\n   Not all TLS\
    \ ciphersuites in [RFC5246] are supported by available TLS\n   tool kits, and\
    \ licenses may be required in some cases.  The existing\n   implementations of\
    \ RADIUS/TLS use OpenSSL as a cryptographic backend,\n   which supports all of\
    \ the ciphersuites listed in the rules in the\n   normative section.\n   The TLS\
    \ ciphersuite TLS_RSA_WITH_3DES_EDE_CBC_SHA is mandatory to\n   implement according\
    \ to [RFC4346]; thus, it has to be supported by\n   RADIUS/TLS nodes.\n   The\
    \ two other ciphersuites in the normative section are widely\n   implemented in\
    \ TLS tool kits and are considered good practice to\n   implement.\n"
- title: 3.4.  RADIUS Datagram Considerations
  contents:
  - "3.4.  RADIUS Datagram Considerations\n   (1)  After the TLS session is established,\
    \ RADIUS packet payloads are\n        exchanged over the encrypted TLS tunnel.\
    \  In RADIUS/UDP, the\n        packet size can be determined by evaluating the\
    \ size of the\n        datagram that arrived.  Due to the stream nature of TCP\
    \ and TLS,\n        this does not hold true for RADIUS/TLS packet exchange.\n\
    \        Instead, packet boundaries of RADIUS packets that arrive in the\n   \
    \     stream are calculated by evaluating the packet's Length field.\n       \
    \ Special care needs to be taken on the packet sender side that\n        the value\
    \ of the Length field is indeed correct before sending\n        it over the TLS\
    \ tunnel, because incorrect packet lengths can no\n        longer be detected\
    \ by a differing datagram boundary.  See\n        Section 2.6.4 of [RFC6613] for\
    \ more details.\n   (2)  Within RADIUS/UDP [RFC2865], a shared secret is used\
    \ for hiding\n        attributes such as User-Password, as well as in computation\
    \ of\n        the Response Authenticator.  In RADIUS accounting [RFC2866], the\n\
    \        shared secret is used in computation of both the Request\n        Authenticator\
    \ and the Response Authenticator.  Since TLS\n        provides integrity protection\
    \ and encryption sufficient to\n        substitute for RADIUS application-layer\
    \ security, it is not\n        necessary to configure a RADIUS shared secret.\
    \  The use of a\n        fixed string for the obsolete shared secret eliminates\
    \ possible\n        node misconfigurations.\n   (3)  RADIUS/UDP [RFC2865] uses\
    \ different UDP ports for\n        authentication, accounting, and dynamic authorization\
    \ changes.\n        RADIUS/TLS allocates a single port for all RADIUS packet types.\n\
    \        Nevertheless, in RADIUS/TLS, the notion of a client that sends\n    \
    \    authentication requests and processes replies associated with\n        its\
    \ users' sessions and the notion of a server that receives\n        requests,\
    \ processes them, and sends the appropriate replies is\n        to be preserved.\
    \  The normative rules about acceptable packet\n        types for clients and\
    \ servers mirror the packet flow behavior\n        from RADIUS/UDP.\n   (4)  RADIUS/UDP\
    \ [RFC2865] uses negative ICMP responses to a newly\n        allocated UDP port\
    \ to signal that a peer RADIUS server does not\n        support the reception\
    \ and processing of the packet types in\n        [RFC5176].  These packet types\
    \ are listed as to be received in\n        RADIUS/TLS implementations.  Note well:\
    \ it is not required for\n        an implementation to actually process these\
    \ packet types; it is\n        only required that the NAK be sent as defined above.\n\
    \   (5)  RADIUS/UDP [RFC2865] uses negative ICMP responses to a newly\n      \
    \  allocated UDP port to signal that a peer RADIUS server does not\n        support\
    \ the reception and processing of RADIUS Accounting\n        packets.  There is\
    \ no RADIUS datagram to signal an Accounting\n        NAK.  Clients may be misconfigured\
    \ for sending Accounting\n        packets to a RADIUS/TLS server that does not\
    \ wish to process\n        their Accounting packet.  To prevent a regression of\n\
    \        detectability of this situation, the Accounting-Response +\n        Error-Cause\
    \ signaling was introduced.\n"
- title: 4.  Compatibility with Other RADIUS Transports
  contents:
  - "4.  Compatibility with Other RADIUS Transports\n   The IETF defines multiple\
    \ alternative transports to the classic UDP\n   transport model as defined in\
    \ [RFC2865], namely RADIUS over TCP\n   [RFC6613] and the present document on\
    \ RADIUS over TLS.  The IETF also\n   proposed RADIUS over Datagram Transport\
    \ Layer Security (DTLS)\n   [RADEXT-DTLS].\n   RADIUS/TLS does not specify any\
    \ inherent backward compatibility to\n   RADIUS/UDP or cross compatibility to\
    \ the other transports, i.e., an\n   implementation that utilizes RADIUS/TLS only\
    \ will not be able to\n   receive or send RADIUS packet payloads over other transports.\
    \  An\n   implementation wishing to be backward or cross compatible (i.e.,\n \
    \  wishes to serve clients using other transports than RADIUS/TLS) will\n   need\
    \ to implement these other transports along with the RADIUS/TLS\n   transport\
    \ and be prepared to send and receive on all implemented\n   transports, which\
    \ is called a \"multi-stack implementation\".\n   If a given IP device is able\
    \ to receive RADIUS payloads on multiple\n   transports, this may or may not be\
    \ the same instance of software, and\n   it may or may not serve the same purposes.\
    \  It is not safe to assume\n   that both ports are interchangeable.  In particular,\
    \ it cannot be\n   assumed that state is maintained for the packet payloads between\
    \ the\n   transports.  Two such instances MUST be considered separate RADIUS\n\
    \   server entities.\n"
- title: 5.  Diameter Compatibility
  contents:
  - "5.  Diameter Compatibility\n   Since RADIUS/TLS is only a new transport profile\
    \ for RADIUS, the\n   compatibility of RADIUS/TLS - Diameter [RFC3588] and RADIUS/UDP\n\
    \   [RFC2865] - Diameter [RFC3588] is identical.  The considerations\n   regarding\
    \ payload size in [RFC6613] apply.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The computational resources to establish a TLS\
    \ tunnel are\n   significantly higher than simply sending mostly unencrypted UDP\n\
    \   datagrams.  Therefore, clients connecting to a RADIUS/TLS node will\n   more\
    \ easily create high load conditions and a malicious client might\n   create a\
    \ Denial-of-Service attack more easily.\n   Some TLS ciphersuites only provide\
    \ integrity validation of their\n   payload, and provide no encryption.  This\
    \ specification forbids the\n   use of such ciphersuites.  Since the RADIUS payload's\
    \ shared secret\n   is fixed to the well-known term \"radsec\" (see Section 2.3\
    \ (4)),\n   failure to comply with this requirement will expose the entire\n \
    \  datagram payload in plaintext, including User-Password, to\n   intermediate\
    \ IP nodes.\n   By virtue of being based on TCP, there are several generic attack\n\
    \   vectors to slow down or prevent the TCP connection from being\n   established;\
    \ see [RFC4953] for details.  If a TCP connection is not\n   up when a packet\
    \ is to be processed, it gets re-established, so such\n   attacks in general lead\
    \ only to a minor performance degradation (the\n   time it takes to re-establish\
    \ the connection).  There is one notable\n   exception where an attacker might\
    \ create a bidding-down attack\n   though.  If peer communication between two\
    \ devices is configured for\n   both RADIUS/TLS (i.e., TLS security over TCP as\
    \ a transport, shared\n   secret fixed to \"radsec\") and RADIUS/UDP (i.e., shared\
    \ secret\n   security with a secret manually configured by the administrator),\
    \ and\n   the RADIUS/UDP transport is the failover option if the TLS session\n\
    \   cannot be established, a bidding-down attack can occur if an\n   adversary\
    \ can maliciously close the TCP connection or prevent it from\n   being established.\
    \  Situations where clients are configured in such a\n   way are likely to occur\
    \ during a migration phase from RADIUS/UDP to\n   RADIUS/TLS.  By preventing the\
    \ TLS session setup, the attacker can\n   reduce the security of the packet payload\
    \ from the selected TLS\n   ciphersuite packet encryption to the classic MD5 per-attribute\n\
    \   encryption.  The situation should be avoided by disabling the weaker\n   RADIUS/UDP\
    \ transport as soon as the new RADIUS/TLS connection is\n   established and tested.\
    \  Disabling can happen at either the RADIUS\n   client or server side:\n   o\
    \  Client side: de-configure the failover setup, leaving RADIUS/TLS\n      as\
    \ the only communication option\n   o  Server side: de-configure the RADIUS/UDP\
    \ client from the list of\n      valid RADIUS clients\n   RADIUS/TLS provides\
    \ authentication and encryption between RADIUS\n   peers.  In the presence of\
    \ proxies, the intermediate proxies can\n   still inspect the individual RADIUS\
    \ packets, i.e., \"end-to-end\"\n   encryption is not provided.  Where intermediate\
    \ proxies are\n   untrusted, it is desirable to use other RADIUS mechanisms to\
    \ prevent\n   RADIUS packet payload from inspection by such proxies.  One common\n\
    \   method to protect passwords is the use of the Extensible\n   Authentication\
    \ Protocol (EAP) and EAP methods that utilize TLS.\n   When using certificate\
    \ fingerprints to identify RADIUS/TLS peers, any\n   two certificates that produce\
    \ the same hash value (i.e., that have a\n   hash collision) will be considered\
    \ the same client.  Therefore, it is\n   important to make sure that the hash\
    \ function used is\n   cryptographically uncompromised so that an attacker is\
    \ very unlikely\n   to be able to produce a hash collision with a certificate\
    \ of his\n   choice.  While this specification mandates support for SHA-1, a later\n\
    \   revision will likely demand support for more contemporary hash\n   functions\
    \ because as of issuance of this document, there are already\n   attacks on SHA-1.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   No new RADIUS attributes or packet codes are defined.\
    \  IANA has\n   updated the already assigned TCP port number 2083 to reflect the\n\
    \   following:\n   o  Reference: [RFC6614]\n   o  Assignment Notes: The TCP port\
    \ 2083 was already previously\n      assigned by IANA for \"RadSec\", an early\
    \ implementation of RADIUS/\n      TLS, prior to issuance of this RFC.  This early\
    \ implementation can\n      be configured to be compatible to RADIUS/TLS as specified\
    \ by the\n      IETF.  See RFC 6614, Appendix A for details.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   RADIUS/TLS was first implemented as \"RADSec\" by Open\
    \ Systems\n   Consultants, Currumbin Waters, Australia, for their \"Radiator\"\
    \ RADIUS\n   server product (see [radsec-whitepaper]).\n   Funding and input for\
    \ the development of this document was provided\n   by the European Commission\
    \ co-funded project \"GEANT2\" [geant2] and\n   further feedback was provided\
    \ by the TERENA Task Force on Mobility\n   and Network Middleware [terena].\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2865]  Rigney, C., Willens, S., Rubens, A., and W. Simpson,\n\
    \              \"Remote Authentication Dial In User Service (RADIUS)\",\n    \
    \          RFC 2865, June 2000.\n   [RFC2866]  Rigney, C., \"RADIUS Accounting\"\
    , RFC 2866, June 2000.\n   [RFC4279]  Eronen, P. and H. Tschofenig, \"Pre-Shared\
    \ Key Ciphersuites\n              for Transport Layer Security (TLS)\", RFC 4279,\n\
    \              December 2005.\n   [RFC5176]  Chiba, M., Dommety, G., Eklund, M.,\
    \ Mitton, D., and B.\n              Aboba, \"Dynamic Authorization Extensions\
    \ to Remote\n              Authentication Dial In User Service (RADIUS)\", RFC\
    \ 5176,\n              January 2008.\n   [RFC5246]  Dierks, T. and E. Rescorla,\
    \ \"The Transport Layer Security\n              (TLS) Protocol Version 1.2\",\
    \ RFC 5246, August 2008.\n   [RFC5247]  Aboba, B., Simon, D., and P. Eronen, \"\
    Extensible\n              Authentication Protocol (EAP) Key Management Framework\"\
    ,\n              RFC 5247, August 2008.\n   [RFC5280]  Cooper, D., Santesson,\
    \ S., Farrell, S., Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n              Infrastructure Certificate and Certificate Revocation\
    \ List\n              (CRL) Profile\", RFC 5280, May 2008.\n   [RFC6066]  Eastlake,\
    \ D., \"Transport Layer Security (TLS) Extensions:\n              Extension Definitions\"\
    , RFC 6066, January 2011.\n   [RFC6613]  DeKok, A., \"RADIUS over TCP\", RFC 6613,\
    \ May 2012.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [DYNAMIC]  Winter, S. and M. McCauley, \"NAI-based\
    \ Dynamic Peer\n              Discovery for RADIUS/TLS and RADIUS/DTLS\", Work\n\
    \              in Progress, July 2011.\n   [MD5-attacks]\n              Black,\
    \ J., Cochran, M., and T. Highland, \"A Study of the\n              MD5 Attacks:\
    \ Insights and Improvements\", October 2006,\n              <http://www.springerlink.com/content/40867l85727r7084/>.\n\
    \   [RADEXT-DTLS]\n              DeKok, A., \"DTLS as a Transport Layer for RADIUS\"\
    , Work\n              in Progress, October 2010.\n   [RFC3539]  Aboba, B. and\
    \ J. Wood, \"Authentication, Authorization and\n              Accounting (AAA)\
    \ Transport Profile\", RFC 3539, June 2003.\n   [RFC3588]  Calhoun, P., Loughney,\
    \ J., Guttman, E., Zorn, G., and J.\n              Arkko, \"Diameter Base Protocol\"\
    , RFC 3588, September 2003.\n   [RFC4107]  Bellovin, S. and R. Housley, \"Guidelines\
    \ for Cryptographic\n              Key Management\", BCP 107, RFC 4107, June 2005.\n\
    \   [RFC4346]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.1\", RFC 4346, April 2006.\n   [RFC4953]\
    \  Touch, J., \"Defending TCP Against Spoofing Attacks\",\n              RFC 4953,\
    \ July 2007.\n   [RFC6125]  Saint-Andre, P. and J. Hodges, \"Representation and\n\
    \              Verification of Domain-Based Application Service Identity\n   \
    \           within Internet Public Key Infrastructure Using X.509\n          \
    \    (PKIX) Certificates in the Context of Transport Layer\n              Security\
    \ (TLS)\", RFC 6125, March 2011.\n   [RFC6421]  Nelson, D., \"Crypto-Agility Requirements\
    \ for Remote\n              Authentication Dial-In User Service (RADIUS)\", RFC\
    \ 6421,\n              November 2011.\n   [eduroam]  Trans-European Research and\
    \ Education Networking\n              Association, \"eduroam Homepage\", 2007,\n\
    \              <http://www.eduroam.org/>.\n   [geant2]   Delivery of Advanced\
    \ Network Technology to Europe,\n              \"European Commission Information\
    \ Society and Media:\n              GEANT2\", 2008, <http://www.geant2.net/>.\n\
    \   [radsec-whitepaper]\n              Open System Consultants, \"RadSec - a secure,\
    \ reliable\n              RADIUS Protocol\", May 2005,\n              <http://www.open.com.au/radiator/radsec-whitepaper.pdf>.\n\
    \   [radsecproxy-impl]\n              Venaas, S., \"radsecproxy Project Homepage\"\
    , 2007,\n              <http://software.uninett.no/radsecproxy/>.\n   [terena]\
    \   Trans-European Research and Education Networking\n              Association\
    \ (TERENA), \"Task Force on Mobility and Network\n              Middleware\",\
    \ 2008,\n              <http://www.terena.org/activities/tf-mobility/>.\n"
- title: 'Appendix A.  Implementation Overview: Radiator'
  contents:
  - "Appendix A.  Implementation Overview: Radiator\n   Radiator implements the RadSec\
    \ protocol for proxying requests with\n   the <Authby RADSEC> and <ServerRADSEC>\
    \ clauses in the Radiator\n   configuration file.\n   The <AuthBy RADSEC> clause\
    \ defines a RadSec client, and causes\n   Radiator to send RADIUS requests to\
    \ the configured RadSec server\n   using the RadSec protocol.\n   The <ServerRADSEC>\
    \ clause defines a RadSec server, and causes\n   Radiator to listen on the configured\
    \ port and address(es) for\n   connections from <Authby RADSEC> clients.  When\
    \ an <Authby RADSEC>\n   client connects to a <ServerRADSEC> server, the client\
    \ sends RADIUS\n   requests through the stream to the server.  The server then\
    \ handles\n   the request in the same way as if the request had been received\
    \ from\n   a conventional UDP RADIUS client.\n   Radiator is compliant to RADIUS/TLS\
    \ if the following options are\n   used:\n      <AuthBy RADSEC>\n      *  Protocol\
    \ tcp\n      *  UseTLS\n      *  TLS_CertificateFile\n      *  Secret radsec\n\
    \      <ServerRADSEC>\n      *  Protocol tcp\n      *  UseTLS\n      *  TLS_RequireClientCert\n\
    \      *  Secret radsec\n   As of Radiator 3.15, the default shared secret for\
    \ RadSec connections\n   is configurable and defaults to \"mysecret\" (without\
    \ quotes).  For\n   compliance with this document, this setting needs to be configured\n\
    \   for the shared secret \"radsec\".  The implementation uses TCP\n   keepalive\
    \ socket options, but does not send Status-Server packets.\n   Once established,\
    \ TLS connections are kept open throughout the server\n   instance lifetime.\n"
- title: 'Appendix B.  Implementation Overview: radsecproxy'
  contents:
  - "Appendix B.  Implementation Overview: radsecproxy\n   The RADIUS proxy named\
    \ radsecproxy was written in order to allow use\n   of RadSec in current RADIUS\
    \ deployments.  This is a generic proxy\n   that supports any number and combination\
    \ of clients and servers,\n   supporting RADIUS over UDP and RadSec.  The main\
    \ idea is that it can\n   be used on the same host as a non-RadSec client or server\
    \ to ensure\n   RadSec is used on the wire; however, as a generic proxy, it can\
    \ be\n   used in other circumstances as well.\n   The configuration file consists\
    \ of client and server clauses, where\n   there is one such clause for each client\
    \ or server.  In such a\n   clause, one specifies either \"type tls\" or \"type\
    \ udp\" for TLS or UDP\n   transport.  Versions prior to 1.6 used \"mysecret\"\
    \ as a default shared\n   secret for RADIUS/TLS; version 1.6 and onwards uses\
    \ \"radsec\".  For\n   backwards compatibility with older versions, the secret\
    \ can be\n   changed (which makes the configuration not compliant with this\n\
    \   specification).\n   In order to use TLS for clients and/or servers, one must\
    \ also specify\n   where to locate CA certificates, as well as certificate and\
    \ key for\n   the client or server.  This is done in a TLS clause.  There may\
    \ be\n   one or several TLS clauses.  A client or server clause may reference\n\
    \   a particular TLS clause, or just use a default one.  One use for\n   multiple\
    \ TLS clauses may be to present one certificate to clients and\n   another to\
    \ servers.\n   If any RadSec (TLS) clients are configured, the proxy will, at\n\
    \   startup, listen on port 2083, as assigned by IANA for the OSC RadSec\n   implementation.\
    \  An alternative port may be specified.  When a client\n   connects, the client\
    \ certificate will be verified, including checking\n   that the configured Fully\
    \ Qualified Domain Name (FQDN) or IP address\n   matches what is in the certificate.\
    \  Requests coming from a RadSec\n   client are treated exactly like requests\
    \ from UDP clients.\n   At startup, the proxy will try to establish a TLS connection\
    \ to each\n   (if any) of the configured RadSec (TLS) servers.  If it fails to\n\
    \   connect to a server, it will retry regularly.  There is some back-off\n  \
    \ where it will retry quickly at first, and with longer intervals\n   later. \
    \ If a connection to a server goes down, it will also start\n   retrying regularly.\
    \  When setting up the TLS connection, the server\n   certificate will be verified,\
    \ including checking that the configured\n   FQDN or IP address matches what is\
    \ in the certificate.  Requests are\n   sent to a RadSec server, just like they\
    \ would be to a UDP server.\n   The proxy supports Status-Server messages.  They\
    \ are only sent to a\n   server if enabled for that particular server.  Status-Server\
    \ requests\n   are always responded to.\n   This RadSec implementation has been\
    \ successfully tested together with\n   Radiator.  It is a freely available, open-source\
    \ implementation.  For\n   source code and documentation, see [radsecproxy-impl].\n"
- title: Appendix C.  Assessment of Crypto-Agility Requirements
  contents:
  - "Appendix C.  Assessment of Crypto-Agility Requirements\n   The RADIUS Crypto-Agility\
    \ Requirements document [RFC6421] defines\n   numerous classification criteria\
    \ for protocols that strive to enhance\n   the security of RADIUS.  It contains\
    \ mandatory (M) and recommended\n   (R) criteria that crypto-agile protocols have\
    \ to fulfill.  The\n   authors believe that the following assessment about the\
    \ crypto-\n   agility properties of RADIUS/TLS are true.\n   By virtue of being\
    \ a transport profile using TLS over TCP as a\n   transport protocol, the cryptographically\
    \ agile properties of TLS are\n   inherited, and RADIUS/TLS subsequently meets\
    \ the following points:\n      (M) negotiation of cryptographic algorithms for\
    \ integrity and auth\n      (M) negotiation of cryptographic algorithms for encryption\n\
    \      (M) replay protection\n      (M) define mandatory-to-implement cryptographic\
    \ algorithms\n      (M) generate fresh session keys for use between client and\
    \ server\n      (R) support for Perfect Forward Secrecy in session keys\n    \
    \  (R) support X.509 certificate-based operation\n      (R) support Pre-Shared\
    \ keys\n      (R) support for confidentiality of the entire packet\n      (M/R)\
    \ support Automated Key Management\n   The remainder of the requirements is discussed\
    \ individually below in\n   more detail:\n      (M) \"...avoid security compromise,\
    \ even in situations where the\n      existing cryptographic algorithms utilized\
    \ by RADIUS\n      implementations are shown to be weak enough to provide little\
    \ or\n      no security\" [RFC6421].  The existing algorithm, based on MD5, is\n\
    \      not of any significance in RADIUS/TLS; its compromise does not\n      compromise\
    \ the outer transport security.\n      (R) mandatory-to-implement algorithms are\
    \ to be NIST-Acceptable\n      with no deprecation date - The mandatory-to-implement\
    \ algorithm is\n      TLS_RSA_WITH_3DES_EDE_CBC_SHA.  This ciphersuite supports\
    \ three-\n      key 3DES operation, which is classified as Acceptable with no\n\
    \      known deprecation date by NIST.\n      (M) demonstrate backward compatibility\
    \ with RADIUS - There are\n      multiple implementations supporting both RADIUS\
    \ and RADIUS/TLS,\n      and the translation between them.\n      (M) After legacy\
    \ mechanisms have been compromised, secure\n      algorithms MUST be used, so\
    \ that backward compatibility is no\n      longer possible - In RADIUS, communication\
    \ between client and\n      server is always a manual configuration; after a compromise,\
    \ the\n      legacy client in question can be de-configured by the same manual\n\
    \      configuration.\n      (M) indicate a willingness to cede change control\
    \ to the IETF -\n      Change control of this protocol is with the IETF.\n   \
    \   (M) be interoperable between implementations based purely on the\n      information\
    \ in the specification - At least one implementation was\n      created exclusively\
    \ based on this specification and is\n      interoperable with other RADIUS/TLS\
    \ implementations.\n      (M) apply to all packet types - RADIUS/TLS operates\
    \ on the\n      transport layer, and can carry all packet types.\n      (R) message\
    \ data exchanged with Diameter SHOULD NOT be affected -\n      The solution is\
    \ Diameter-agnostic.\n      (M) discuss any inherent assumptions - The authors\
    \ are not aware\n      of any implicit assumptions that would be yet-unarticulated\
    \ in the\n      document.\n      (R) provide recommendations for transition -\
    \ The Security\n      Considerations section contains a transition path.\n   \
    \   (R) discuss legacy interoperability and potential for bidding-down\n     \
    \ attacks - The Security Considerations section contains a\n      corresponding\
    \ discussion.\n   Summarizing, it is believed that this specification fulfills\
    \ all the\n   mandatory and all the recommended requirements for a crypto-agile\n\
    \   solution and should thus be considered UNCONDITIONALLY COMPLIANT.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stefan Winter\n   Fondation RESTENA\n   6, rue Richard\
    \ Coudenhove-Kalergi\n   Luxembourg  1359\n   Luxembourg\n   Phone: +352 424409\
    \ 1\n   Fax:   +352 422473\n   EMail: stefan.winter@restena.lu\n   URI:   http://www.restena.lu.\n\
    \   Mike McCauley\n   Open Systems Consultants\n   9 Bulbul Place\n   Currumbin\
    \ Waters  QLD 4223\n   Australia\n   Phone: +61 7 5598 7474\n   Fax:   +61 7 5598\
    \ 7070\n   EMail: mikem@open.com.au\n   URI:   http://www.open.com.au.\n   Stig\
    \ Venaas\n   Cisco Systems\n   Tasman Drive\n   San Jose, CA  95134\n   USA\n\
    \   EMail: stig@cisco.com\n   Klaas Wierenga\n   Cisco Systems International BV\n\
    \   Haarlerbergweg 13-19\n   Amsterdam  1101 CH\n   The Netherlands\n   Phone:\
    \ +31 (0)20 3571752\n   EMail: klaas@cisco.com\n   URI:   http://www.cisco.com\n"
