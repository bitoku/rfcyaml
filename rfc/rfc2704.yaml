- title: __initial_text__
  contents:
  - '             The KeyNote Trust-Management System Version 2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes version 2 of the KeyNote trust-management system.\n\
    \   It specifies the syntax and semantics of KeyNote `assertions',\n   describes\
    \ `action attribute' processing, and outlines the application\n   architecture\
    \ into which a KeyNote implementation can be fit.  The\n   KeyNote architecture\
    \ and language are useful as building blocks for\n   the trust management aspects\
    \ of a variety of Internet protocols and\n   services.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Trust management, introduced in the PolicyMaker system [BFL96],\
    \ is a\n   unified approach to specifying and interpreting security policies,\n\
    \   credentials, and relationships; it allows direct authorization of\n   security-critical\
    \ actions.  A trust-management system provides\n   standard, general-purpose mechanisms\
    \ for specifying application\n   security policies and credentials.  Trust-management\
    \ credentials\n   describe a specific delegation of trust and subsume the role\
    \ of\n   public key certificates; unlike traditional certificates, which bind\n\
    \   keys to names, credentials can bind keys directly to the\n   authorization\
    \ to perform specific tasks.\n   A trust-management system has five basic components:\n\
    \   *  A language for describing `actions', which are operations with\n      security\
    \ consequences that are to be controlled by the system.\n   *  A mechanism for\
    \ identifying `principals', which are entities that\n      can be authorized to\
    \ perform actions.\n   *  A language for specifying application `policies', which\
    \ govern the\n      actions that principals are authorized to perform.\n   * \
    \ A language for specifying `credentials', which allow principals to\n      delegate\
    \ authorization to other principals.\n   *  A `compliance checker', which provides\
    \ a service to applications\n      for determining how an action requested by\
    \ principals should be\n      handled, given a policy and a set of credentials.\n\
    \   The trust-management approach has a number of advantages over other\n   mechanisms\
    \ for specifying and controlling authorization, especially\n   when security policy\
    \ is distributed over a network or is otherwise\n   decentralized.\n   Trust management\
    \ unifies the notions of security policy, credentials,\n   access control, and\
    \ authorization.  An application that uses a\n   trust-management system can simply\
    \ ask the compliance checker whether\n   a requested action should be allowed.\
    \  Furthermore, policies and\n   credentials are written in standard languages\
    \ that are shared by all\n   trust-managed applications; the security configuration\
    \ mechanism for\n   one application carries exactly the same syntactic and semantic\n\
    \   structure as that of another, even when the semantics of the\n   applications\
    \ themselves are quite different.\n   Trust-management policies are easy to distribute\
    \ across networks,\n   helping to avoid the need for application-specific distributed\
    \ policy\n   configuration mechanisms, access control lists, and certificate\n\
    \   parsers and interpreters.\n   For a general discussion of the use of trust\
    \ management in\n   distributed system security, see [Bla99].\n   KeyNote is a\
    \ simple and flexible trust-management system designed to\n   work well for a\
    \ variety of large- and small-scale Internet-based\n   applications.  It provides\
    \ a single, unified language for both local\n   policies and credentials.  KeyNote\
    \ policies and credentials, called\n   `assertions', contain predicates that describe\
    \ the trusted actions\n   permitted by the holders of specific public keys.  KeyNote\
    \ assertions\n   are essentially small, highly-structured programs.  A signed\n\
    \   assertion, which can be sent over an untrusted network, is also\n   called\
    \ a `credential assertion'.  Credential assertions, which also\n   serve the role\
    \ of certificates, have the same syntax as policy\n   assertions but are also\
    \ signed by the principal delegating the trust.\n   In KeyNote:\n   *  Actions\
    \ are specified as a collection of name-value pairs.\n   *  Principal names can\
    \ be any convenient string and can directly\n      represent cryptographic public\
    \ keys.\n   *  The same language is used for both policies and credentials.\n\
    \   *  The policy and credential language is concise, highly expressive,\n   \
    \   human readable and writable, and compatible with a variety of\n      storage\
    \ and transmission media, including electronic mail.\n   *  The compliance checker\
    \ returns an application-configured `policy\n      compliance value' that describes\
    \ how a request should be handled\n      by the application.  Policy compliance\
    \ values are always\n      positively derived from policy and credentials, facilitating\n\
    \      analysis of KeyNote-based systems.\n   *  Compliance checking is efficient\
    \ enough for high-performance and\n      real-time applications.\n   This document\
    \ describes the KeyNote policy and credential assertion\n   language, the structure\
    \ of KeyNote action descriptions, and the\n   KeyNote model of computation.\n\
    \   We assume that applications communicate with a locally trusted\n   KeyNote\
    \ compliance checker via a `function call' style interface,\n   sending a collection\
    \ of KeyNote policy and credential assertions plus\n   an action description as\
    \ input and accepting the resulting policy\n   compliance value as output.  However,\
    \ the requirements of different\n   applications, hosts, and environments may\
    \ give rise to a variety of\n   different interfaces to KeyNote compliance checkers;\
    \ this document\n   does not aim to specify a complete compliance checker API.\n"
- title: 2.  KeyNote Concepts
  contents:
  - "2.  KeyNote Concepts\n   In KeyNote, the authority to perform trusted actions\
    \ is associated\n   with one or more `principals'.  A principal may be a physical\
    \ entity,\n   a process in an operating system, a public key, or any other\n \
    \  convenient abstraction.  KeyNote principals are identified by a\n   string\
    \ called a `Principal Identifier'.  In some cases, a Principal\n   Identifier\
    \ will contain a cryptographic key interpreted by the\n   KeyNote system (e.g.,\
    \ for credential signature verification).  In\n   other cases, Principal Identifiers\
    \ may have a structure that is\n   opaque to KeyNote.\n   Principals perform two\
    \ functions of concern to KeyNote: They request\n   `actions' and they issue `assertions'.\
    \  Actions are any trusted\n   operations that an application places under KeyNote\
    \ control.\n   Assertions delegate the authorization to perform actions to other\n\
    \   principals.\n   Actions are described to the KeyNote compliance checker in\
    \ terms of a\n   collection of name-value pairs called an `action attribute set'.\
    \  The\n   action attribute set is created by the invoking application.  Its\n\
    \   structure and format are described in detail in Section 3 of this\n   document.\n\
    \   KeyNote provides advice to applications about the interpretation of\n   policy\
    \ with regard to specific requested actions.  Applications\n   invoke the KeyNote\
    \ compliance checker by issuing a `query' containing\n   a proposed action attribute\
    \ set and identifying the principal(s)\n   requesting it.  The KeyNote system\
    \ determines and returns an\n   appropriate `policy compliance value' from an\
    \ ordered set of possible\n   responses.\n   The policy compliance value returned\
    \ from a KeyNote query advises the\n   application how to process the requested\
    \ action.  In the simplest\n   case, the compliance value is Boolean (e.g., \"\
    reject\" or \"approve\").\n   Assertions can also be written to select from a\
    \ range of possible\n   compliance values, when appropriate for the application\
    \ (e.g., \"no\n   access\", \"restricted access\", \"full access\").  Applications\
    \ can\n   configure the relative ordering (from `weakest' to `strongest') of\n\
    \   compliance values at query time.\n   Assertions are the basic programming\
    \ unit for specifying policy and\n   delegating authority.  Assertions describe\
    \ the conditions under which\n   a principal authorizes actions requested by other\
    \ principals.  An\n   assertion identifies the principal that made it, which other\n\
    \   principals are being authorized, and the conditions under which the\n   authorization\
    \ applies.  The syntax of assertions is given in Section\n   4.\n   A special\
    \ principal, whose identifier is \"POLICY\", provides the root\n   of trust in\
    \ KeyNote.  \"POLICY\" is therefore considered to be\n   authorized to perform\
    \ any action.\n   Assertions issued by the \"POLICY\" principal are called `policy\n\
    \   assertions' and are used to delegate authority to otherwise untrusted\n  \
    \ principals.  The KeyNote security policy of an application consists\n   of a\
    \ collection of policy assertions.\n   When a principal is identified by a public\
    \ key, it can digitally sign\n   assertions and distribute them over untrusted\
    \ networks for use by\n   other KeyNote compliance checkers.  These signed assertions\
    \ are also\n   called `credentials', and serve a role similar to that of traditional\n\
    \   public key certificates.  Policies and credentials share the same\n   syntax\
    \ and are evaluated according to the same semantics.  A\n   principal can therefore\
    \ convert its policy assertions into\n   credentials simply by digitally signing\
    \ them.\n   KeyNote is designed to encourage the creation of human-readable\n\
    \   policies and credentials that are amenable to transmission and\n   storage\
    \ over a variety of media.  Its assertion syntax is inspired by\n   the format\
    \ of RFC822-style message headers [Cro82].  A KeyNote\n   assertion contains a\
    \ sequence of sections, called `fields', each of\n   which specifies one aspect\
    \ of the assertion's semantics.  Fields\n   start with an identifier at the beginning\
    \ of a line and continue\n   until the next field is encountered.  For example:\n\
    \      KeyNote-Version: 2\n      Comment: A simple, if contrived, email certificate\
    \ for user mab\n      Local-Constants:  ATT_CA_key = \"RSA:acdfa1df1011bbac\"\n\
    \                        mab_key = \"DSA:deadbeefcafe001a\"\n      Authorizer:\
    \ ATT_CA_key\n      Licensees: mab_key\n      Conditions: ((app_domain == \"email\"\
    )  # valid for email only\n                && (address == \"mab@research.att.com\"\
    ));\n      Signature: \"RSA-SHA1:f00f2244\"\n   The meanings of the various sections\
    \ are described in Sections 4 and\n   5 of this document.\n   KeyNote semantics\
    \ resolve the relationship between an application's\n   policy and actions requested\
    \ by other principals, as supported by\n   credentials.  The KeyNote compliance\
    \ checker processes the assertions\n   against the action attribute set to determine\
    \ the policy compliance\n   value of a requested action.  These semantics are\
    \ defined in Section\n   5.\n   An important principle in KeyNote's design is\
    \ `assertion\n   monotonicity'; the policy compliance value of an action is always\n\
    \   positively derived from assertions made by trusted principals.\n   Removing\
    \ an assertion never results in increasing the compliance\n   value returned by\
    \ KeyNote for a given query.  The monotonicity\n   property can simplify the design\
    \ and analysis of complex network-\n   based security protocols; network failures\
    \ that prevent the\n   transmission of credentials can never result in spurious\n\
    \   authorization of dangerous actions.  A detailed discussion of\n   monotonicity\
    \ and safety in trust management can be found in [BFL96]\n   and [BFS98].\n"
- title: 3.  Action Attributes
  contents:
  - "3.  Action Attributes\n   Trusted actions to be evaluated by KeyNote are described\
    \ by a\n   collection of name-value pairs called the `action attribute set'.\n\
    \   Action attributes are the mechanism by which applications communicate\n  \
    \ requests to KeyNote and are the primary objects on which KeyNote\n   assertions\
    \ operate.  An action attribute set is passed to the KeyNote\n   compliance checker\
    \ with each query.\n   Each action attribute consists of a name and a value. \
    \ The semantics\n   of the names and values are not interpreted by KeyNote itself;\
    \ they\n   vary from application to application and must be agreed upon by the\n\
    \   writers of applications and the writers of the policies and\n   credentials\
    \ that will be used by them.\n   Action attribute names and values are represented\
    \ by arbitrary-length\n   strings.  KeyNote guarantees support of attribute names\
    \ and values up\n   to 2048 characters long.  The handling of longer attribute\
    \ names or\n   values is not specified and is KeyNote-implementation-dependent.\n\
    \   Applications and assertions should therefore avoid depending on the\n   the\
    \ use of attributes with names or values longer than 2048\n   characters.  The\
    \ length of an attribute value is represented by an\n   implementation-specific\
    \ mechanism (e.g., NUL-terminated strings, an\n   explicit length field, etc.).\n\
    \   Attribute values are inherently untyped and are represented as\n   character\
    \ strings by default.  Attribute values may contain any non-\n   NUL ASCII character.\
    \  Numeric attribute values should first be\n   converted to an ASCII text representation\
    \ by the invoking\n   application, e.g., the value 1234.5 would be represented\
    \ by the\n   string \"1234.5\".\n   Attribute names are of the form:\n       <AttributeID>::\
    \ {Any string starting with a-z, A-Z, or the\n                        underscore\
    \ character, followed by any number of\n                        a-z, A-Z, 0-9,\
    \ or underscore characters} ;\n   That is, an <AttributeID> begins with an alphabetic\
    \ or underscore\n   character and can be followed by any number of alphanumerics\
    \ and\n   underscores.  Attribute names are case-sensitive.\n   The exact mechanism\
    \ for passing the action attribute set to the\n   compliance checker is determined\
    \ by the KeyNote implementation.\n   Depending on specific requirements, an implementation\
    \ may provide a\n   mechanism for including the entire attribute set as an explicit\n\
    \   parameter of the query, or it may provide some form of callback\n   mechanism\
    \ invoked as each attribute is dereferenced, e.g., for access\n   to kernel variables.\n\
    \   If an action attribute is not defined its value is considered to be\n   the\
    \ empty string.\n   Attribute names beginning with the \"_\" character are reserved\
    \ for use\n   by the KeyNote runtime environment and cannot be passed from\n \
    \  applications as part of queries.  The following special attribute\n   names\
    \ are used:\n       Name                        Purpose\n       ------------------------\
    \    ------------------------------------\n       _MIN_TRUST                 \
    \ Lowest-order (minimum) compliance\n                                   value\
    \ in query; see Section 5.1.\n       _MAX_TRUST                  Highest-order\
    \ (maximum) compliance\n                                   value in query; see\
    \ Section 5.1.\n       _VALUES                     Linearly ordered set of compliance\n\
    \                                   values in query; see Section 5.1.\n      \
    \                             Comma separated.\n       _ACTION_AUTHORIZERS   \
    \      Names of principals directly\n                                   authorizing\
    \ action in query.\n                                   Comma separated.\n   In\
    \ addition, attributes with names of the form \"_<N>\", where <N> is\n   an ASCII-encoded\
    \ integer, are used by the regular expression matching\n   mechanism described\
    \ in Section 5.\n   The assignment and semantics of any other attribute names\
    \ beginning\n   with \"_\" is unspecified and implementation-dependent.\n   The\
    \ names of other attributes in the action attribute set are not\n   specified\
    \ by KeyNote but must be agreed upon by the writers of any\n   policies and credentials\
    \ that are to inter-operate in a specific\n   KeyNote query evaluation.\n   By\
    \ convention, the name of the application domain over which action\n   attributes\
    \ should be interpreted is given in the attribute named\n   \"app_domain\".  The\
    \ IANA (or some other suitable authority) will\n   provide a registry of reserved\
    \ app_domain names.  The registry will\n   list the names and meanings of each\
    \ application's attributes.\n   The app_domain convention helps to ensure that\
    \ credentials are\n   interpreted as they were intended.  An attribute with any\
    \ given name\n   may be used in many different application domains but might have\n\
    \   different meanings in each of them.  However, the use of a global\n   registry\
    \ is not always required for small-scale, closed applications;\n   the only requirement\
    \ is that the policies and credentials made\n   available to the KeyNote compliance\
    \ checker interpret attributes\n   according to the same semantics assumed by\
    \ the application that\n   created them.\n   For example, an email application\
    \ might reserve the app_domain\n   \"RFC822-EMAIL\" and might use the attributes\
    \ named \"address\" (the\n   email address of a message's sender), \"name\" (the\
    \ human name of the\n   message sender), and any \"organization\" headers present\
    \ (the\n   organization name).  The values of these attributes would be derived\n\
    \   in the obvious way from the email message headers.  The public key of\n  \
    \ the message's signer would be given in the \"_ACTION_AUTHORIZERS\"\n   attribute.\n\
    \   Note that \"RFC822-EMAIL\" is a hypothetical example; such a name may\n  \
    \ or may not appear in the actual registry with these or different\n   attributes.\
    \  (Indeed, we recognize that the reality of email security\n   is considerably\
    \ more complex than this example might suggest.)\n"
- title: 4.  KeyNote Assertion Syntax
  contents:
  - "4.  KeyNote Assertion Syntax\n   In the following sections, the notation [X]*\
    \ means zero or more\n   repetitions of character string X.  The notation [X]+\
    \ means one or\n   more repetitions of X.  The notation <X>* means zero or more\n\
    \   repetitions of non-terminal <X>.  The notation <X>+ means one or more\n  \
    \ repetitions of X, whereas <X>? means zero or one repetitions of X.\n   Nonterminal\
    \ grammar symbols are enclosed in angle brackets.  Quoted\n   strings in grammar\
    \ productions represent terminals.\n"
- title: 4.1  Basic Structure
  contents:
  - "4.1  Basic Structure\n       <Assertion>:: <VersionField>? <AuthField> <LicenseesField>?\n\
    \                     <LocalConstantsField>? <ConditionsField>?\n            \
    \         <CommentField>? <SignatureField>? ;\n   All KeyNote assertions are encoded\
    \ in ASCII.\n   KeyNote assertions are divided into sections, called `fields',\
    \ that\n   serve various semantic functions.  Each field starts with an\n   identifying\
    \ label at the beginning of a line, followed by the \":\"\n   character and the\
    \ field's contents.  There can be at most one field\n   per line.\n   A field\
    \ may be continued over more than one line by indenting\n   subsequent lines with\
    \ at least one ASCII SPACE or TAB character.\n   Whitespace (a SPACE, TAB, or\
    \ NEWLINE character) separates tokens but\n   is otherwise ignored outside of\
    \ quoted strings.  Comments with a\n   leading octothorp character (see Section\
    \ 4.2) may begin in any\n   column.\n   One mandatory field is required in all\
    \ assertions:\n      Authorizer\n   Six optional fields may also appear:\n   \
    \   Comment\n      Conditions\n      KeyNote-Version\n      Licensees\n      Local-Constants\n\
    \      Signature\n   All field names are case-insensitive.  The \"KeyNote-Version\"\
    \ field,\n   if present, appears first.  The \"Signature\" field, if present,\n\
    \   appears last.  Otherwise, fields may appear in any order.  Each field\n  \
    \ may appear at most once in any assertion.\n   Blank lines are not permitted\
    \ in assertions.  Multiple assertions\n   stored in a file (e.g., in application\
    \ policy configurations),\n   therefore, can be separated from one another unambiguously\
    \ by the use\n   of blank lines between them.\n"
- title: 4.2  Comments
  contents:
  - "4.2  Comments\n      <Comment>:: \"#\" {ASCII characters} ;\n   The octothorp\
    \ character (\"#\", ASCII 35 decimal) can be used to\n   introduce comments. \
    \ Outside of quoted strings (see Section 4.3), all\n   characters from the \"\
    #\" character through the end of the current line\n   are ignored.  However, commented\
    \ text is included in the computation\n   of assertion signatures (see Section\
    \ 4.6.7).\n"
- title: 4.3  Strings
  contents:
  - "4.3  Strings\n   A `string' is a lexical object containing a sequence of characters.\n\
    \   Strings may contain any non-NUL characters, including newlines and\n   nonprintable\
    \ characters.  Strings may be given as literals, computed\n   from complex expressions,\
    \ or dereferenced from attribute names.\n"
- title: 4.3.1  String Literals
  contents:
  - "4.3.1  String Literals\n      <StringLiteral>:: \"\\\"\" {see description below}\
    \ \"\\\"\" ;\n   A string literal directly represents the value of a string. \
    \ String\n   literals must be quoted by preceding and following them with the\n\
    \   double-quote character (ASCII 34 decimal).\n   A printable character may be\
    \ `escaped' inside a quoted string literal\n   by preceding it with the backslash\
    \ character (ASCII 92 decimal)\n   (e.g., \"like \\\"this\\\".\").  This permits\
    \ the inclusion of the double-\n   quote and backslash characters inside string\
    \ literals.\n   A similar escape mechanism is also used to represent non-printable\n\
    \   characters.  \"\\n\" represents the newline character (ASCII character\n \
    \  10 decimal), \"\\r\" represents the carriage-return character (ASCII\n   character\
    \ 13 decimal), \"\\t\" represents the tab character (ASCII\n   character 9 decimal),\
    \ and \"\\f\" represents the form-feed character\n   (ASCII character 12 decimal).\
    \  A backslash character followed by a\n   newline suppresses all subsequent whitespace\
    \ (including the newline)\n   up to the next non-whitespace character (this allows\
    \ the continuation\n   of long string constants across lines).  Un-escaped newline\
    \ and\n   return characters are illegal inside string literals.\n   The constructs\
    \ \"\\0o\", \"\\0oo\", and \"\\ooo\" (where o represents any\n   octal digit)\
    \ may be used to represent any non-NUL ASCII characters\n   with their corresponding\
    \ octal values (thus, \"\\012\" is the same as\n   \"\\n\", \"\\101\" is \"A\"\
    , and \"\\377\" is the ASCII character 255 decimal).\n   However, the NUL character\
    \ cannot be encoded in this manner; \"\\0\",\n   \"\\00\", and \"\\000\" are converted\
    \ to the strings \"0\", \"00\", and \"000\"\n   respectively.  Similarly, all\
    \ other escaped characters have the\n   leading backslash removed (e.g., \"\\\
    a\" becomes \"a\", and \"\\\\\" becomes\n   \"\\\").  The following four strings\
    \ are equivalent:\n        \"this string contains a newline\\n followed by one\
    \ space.\"\n        \"this string contains a newline\\n \\\n        followed by\
    \ one space.\"\n        \"this str\\\n           ing contains a \\\n         \
    \    newline\\n followed by one space.\"\n        \"this string contains a newline\\\
    012\\040followed by one space.\"\n"
- title: 4.3.2  String Expressions
  contents:
  - "4.3.2  String Expressions\n   In general, anywhere a quoted string literal is\
    \ allowed, a `string\n   expression' can be used.  A string expression constructs\
    \ a string\n   from string constants, dereferenced attributes (described in Section\n\
    \   4.4), and a string concatenation operator.  String expressions may be\n  \
    \ parenthesized.\n       <StrEx>:: <StrEx> \".\" <StrEx>    /* String concatenation\
    \ */\n               | <StringLiteral>        /* Quoted string */\n          \
    \     | \"(\" <StrEx> \")\"\n               | <DerefAttribute>       /* See Section\
    \ 4.4 */\n               | \"$\" <StrEx> ;          /* See Section 4.4 */\n  \
    \ The \"$\" operator has higher precedence than the \".\" operator.\n"
- title: 4.4  Dereferenced Attributes
  contents:
  - "4.4  Dereferenced Attributes\n   Action attributes provide the primary mechanism\
    \ for applications to\n   pass information to assertions.  Attribute names are\
    \ strings from a\n   limited character set (<AttributeID> as defined in Section\
    \ 3), and\n   attribute values are represented internally as strings.  An attribute\n\
    \   is dereferenced simply by using its name.  In general, KeyNote allows\n  \
    \ the use of an attribute anywhere a string literal is permitted.\n   Attributes\
    \ are dereferenced as strings by default.  When required,\n   dereferenced attributes\
    \ can be converted to integers or floating\n   point numbers with the type conversion\
    \ operators \"@\" and \"&\".  Thus,\n   an attribute named \"foo\" having the\
    \ value \"1.2\" may be interpreted as\n   the string \"1.2\" (foo), the integer\
    \ value 1 (@foo), or the floating\n   point value 1.2 (&foo).\n   Attributes converted\
    \ to integer and floating point numbers are\n   represented according to the ANSI\
    \ C `long' and `float' types,\n   respectively.  In particular, integers range\
    \ from -2147483648 to\n   2147483647, whilst floats range from 1.17549435E-38F\
    \ to\n   3.40282347E+38F.\n   Any uninitialized attribute has the empty-string\
    \ value when\n   dereferenced as a string and the value zero when dereferenced\
    \ as an\n   integer or float.\n   Attribute names may be given literally or calculated\
    \ from string\n   expressions and may be recursively dereferenced.  In the simplest\n\
    \   case, an attribute is dereferenced simply by using its name outside\n   of\
    \ quotes; e.g., the string value of the attribute named \"foo\" is by\n   reference\
    \ to `foo' (outside of quotes).  The \"$<StrEx>\" construct\n   dereferences the\
    \ attribute named in the string expression <StrEx>.\n   For example, if the attribute\
    \ named \"foo\" contains the string \"bar\",\n   the attribute named \"bar\" contains\
    \ the string \"xyz\", and the\n   attribute \"xyz\" contains the string \"qua\"\
    , the following string\n   comparisons are all true:\n    foo == \"bar\"\n   \
    \ $(\"foo\") == \"bar\"\n    $foo == \"xyz\"\n    $(foo) == \"xyz\"\n    $$foo\
    \ == \"qua\"\n   If <StrEx> evaluates to an invalid or uninitialized attribute\
    \ name,\n   its value is considered to be the empty string (or zero if used as\
    \ a\n   numeric).\n   The <DerefAttribute> token is defined as:\n      <DerefAttribute>::\
    \ <AttributeID> ;\n"
- title: 4.5  Principal Identifiers
  contents:
  - "4.5  Principal Identifiers\n   Principals are represented as ASCII strings called\
    \ `Principal\n   Identifiers'.  Principal Identifiers may be arbitrary labels\
    \ whose\n   structure is not interpreted by the KeyNote system or they may encode\n\
    \   cryptographic keys that are used by KeyNote for credential signature\n   verification.\n\
    \       <PrincipalIdentifier>:: <OpaqueID>\n                             | <KeyID>\
    \ ;\n   4.5.1  Opaque Principal Identifiers\n   Principal Identifiers that are\
    \ used by KeyNote only as labels are\n   said to be `opaque'.  Opaque identifiers\
    \ are encoded in assertions as\n   strings (see Section 4.3):\n       <OpaqueID>::\
    \ <StrEx> ;\n   Opaque identifier strings should not contain the \":\" character.\n"
- title: 4.5.2  Cryptographic Principal Identifiers
  contents:
  - "4.5.2  Cryptographic Principal Identifiers\n   Principal Identifiers that are\
    \ used by KeyNote as keys, e.g., to\n   verify credential signatures, are said\
    \ to be `cryptographic'.\n   Cryptographic identifiers are also lexically encoded\
    \ as strings:\n       <KeyID>:: <StrEx> ;\n   Unlike Opaque Identifiers, however,\
    \ Cryptographic Identifier strings\n   have a special form.  To be interpreted\
    \ by KeyNote (for signature\n   verification), an identifier string should be\
    \ of the form:\n      <IDString>:: <ALGORITHM>\":\"<ENCODEDBITS> ;\n   \"ALGORITHM\"\
    \ is an ASCII substring that describes the algorithms to be\n   used in interpreting\
    \ the key's bits.  The ALGORITHM identifies the\n   major cryptographic algorithm\
    \ (e.g., RSA [RSA78], DSA [DSA94], etc.),\n   structured format (e.g., PKCS1 [PKCS1]),\
    \ and key bit encoding (e.g.,\n   HEX or BASE64).  By convention, the ALGORITHM\
    \ substring starts with\n   an alphabetic character and can contain letters, digits,\
    \ underscores,\n   or dashes (i.e., it should match the regular expression \"\
    [a-zA-Z][a-\n   zA-Z0-9_-]*\").  The IANA (or some other appropriate authority)\
    \ will\n   provide a registry of reserved algorithm identifiers.\n   \"ENCODEDBITS\"\
    \ is a substring of characters representing the key's\n   bits, the encoding and\
    \ format of which depends on the ALGORITHM.  By\n   convention, hexadecimal encoded\
    \ keys use lower-case ASCII characters.\n   Cryptographic Principal Identifiers\
    \ are converted to a normalized\n   canonical form for the purposes of any internal\
    \ comparisons between\n   them; see Section 5.2.\n   Note that the keys used in\
    \ examples throughout this document are\n   fictitious and generally much shorter\
    \ than would be required for\n   security in practice.\n"
- title: 4.6  KeyNote Fields
  contents:
  - '4.6  KeyNote Fields

    '
- title: 4.6.1  The KeyNote-Version Field
  contents:
  - "4.6.1  The KeyNote-Version Field\n   The KeyNote-Version field identifies the\
    \ version of the KeyNote\n   assertion language under which the assertion was\
    \ written.  The\n   KeyNote-Version field is of the form\n       <VersionField>::\
    \ \"KeyNote-Version:\" <VersionString> ;\n       <VersionString>:: <StringLiteral>\n\
    \                       | <IntegerLiteral> ;\n   where <VersionString> is an ASCII-encoded\
    \ string.  Assertions in\n   production versions of KeyNote use decimal digits\
    \ in the version\n   representing the version number of the KeyNote language under\
    \ which\n   they are to be interpreted.  Assertions written to conform with this\n\
    \   document should be identified with the version string \"2\" (or the\n   integer\
    \ 2).  The KeyNote-Version field, if included, should appear\n   first.\n"
- title: 4.6.2  The Local-Constants Field
  contents:
  - "4.6.2  The Local-Constants Field\n   This field adds or overrides action attributes\
    \ in the current\n   assertion only.  This mechanism allows the use of short names\
    \ for\n   (frequently lengthy) cryptographic principal identifiers, especially\n\
    \   to make the Licensees field more readable.  The Local-Constants field\n  \
    \ is of the form:\n       <LocalConstantsField>:: \"Local-Constants:\" <Assignments>\
    \ ;\n       <Assignments>:: /* can be empty */\n                     | <AttributeID>\
    \ \"=\" <StringLiteral> <Assignments> ;\n   <AttributeID> is an attribute name\
    \ from the action attribute\n   namespace as defined in Section 3.  The name is\
    \ available for use as\n   an attribute in any subsequent field.  If the Local-Constants\
    \ field\n   defines more than one identifier, it can occupy more than one line\n\
    \   and be indented.  <StringLiteral> is a string literal as described in\n  \
    \ Section 4.3.  Attributes defined in the Local-Constants field\n   override any\
    \ attributes with the same name passed in with the action\n   attribute set.\n\
    \   An attribute may be initialized at most once in the Local-Constants\n   field.\
    \  If an attribute is initialized more than once in an\n   assertion, the entire\
    \ assertion is considered invalid and is not\n   considered by the KeyNote compliance\
    \ checker in evaluating queries.\n"
- title: 4.6.3  The Authorizer Field
  contents:
  - "4.6.3  The Authorizer Field\n   The Authorizer identifies the Principal issuing\
    \ the assertion.  This\n   field is of the form\n       <AuthField>:: \"Authorizer:\"\
    \ <AuthID> ;\n       <AuthID>:: <PrincipalIdentifier>\n                | <DerefAttribute>\
    \ ;\n   The Principal Identifier may be given directly or by reference to the\n\
    \   attribute namespace (as defined in Section 4.4).\n"
- title: 4.6.4   The Licensees Field
  contents:
  - "4.6.4   The Licensees Field\n   The Licensees field identifies the principals\
    \ authorized by the\n   assertion.  More than one principal can be authorized,\
    \ and\n   authorization can be distributed across several principals through\n\
    \   the use of `and' and threshold constructs.  This field is of the form\n  \
    \     <LicenseesField>:: \"Licensees:\" <LicenseesExpr> ;\n       <LicenseesExpr>::\
    \      /* can be empty */\n                         | <PrincExpr> ;\n       <PrincExpr>::\
    \ \"(\" <PrincExpr> \")\"\n                     | <PrincExpr> \"&&\" <PrincExpr>\n\
    \                     | <PrincExpr> \"||\" <PrincExpr>\n                     |\
    \ <K>\"-of(\" <PrincList> \")\"        /* Threshold */\n                     |\
    \ <PrincipalIdentifier>\n                     | <DerefAttribute> ;\n       <PrincList>::\
    \ <PrincipalIdentifier>\n                   | <DerefAttribute>\n             \
    \      | <PrincList> \",\" <PrincList> ;\n       <K>:: {Decimal number starting\
    \ with a digit from 1 to 9} ;\n   The \"&&\" operator has higher precedence than\
    \ the \"||\" operator.  <K>\n   is an ASCII-encoded positive decimal integer.\
    \  If a <PrincList>\n   contains fewer than <K> principals, the entire assertion\
    \ is omitted\n   from processing.\n"
- title: 4.6.5  The Conditions Field
  contents:
  - "4.6.5  The Conditions Field\n   This field gives the `conditions' under which\
    \ the Authorizer trusts\n   the Licensees to perform an action.  `Conditions'\
    \ are predicates that\n   operate on the action attribute set.  The Conditions\
    \ field is of the\n   form:\n    <ConditionsField>:: \"Conditions:\" <ConditionsProgram>\
    \ ;\n    <ConditionsProgram>:: /* Can be empty */\n                          |\
    \ <Clause> \";\" <ConditionsProgram> ;\n    <Clause>:: <Test> \"->\" \"{\" <ConditionsProgram>\
    \ \"}\"\n             | <Test> \"->\" <Value>\n             | <Test> ;\n    <Value>::\
    \ <StrEx> ;\n    <Test>:: <RelExpr> ;\n    <RelExpr>:: \"(\" <RelExpr> \")\" \
    \       /* Parentheses */\n              | <RelExpr> \"&&\" <RelExpr> /* Logical\
    \ AND */\n              | <RelExpr> \"||\" <RelExpr> /* Logical OR */\n      \
    \        | \"!\" <RelExpr>         /* Logical NOT */\n              | <IntRelExpr>\n\
    \              | <FloatRelExpr>\n              | <StringRelExpr>\n           \
    \   | \"true\"        /* case insensitive */\n              | \"false\" ;    \
    \ /* case insensitive */\n    <IntRelExpr>:: <IntEx> \"==\" <IntEx>\n        \
    \         | <IntEx> \"!=\" <IntEx>\n                 | <IntEx> \"<\" <IntEx>\n\
    \                 | <IntEx> \">\" <IntEx>\n                 | <IntEx> \"<=\" <IntEx>\n\
    \                 | <IntEx> \">=\" <IntEx> ;\n    <FloatRelExpr>:: <FloatEx> \"\
    <\" <FloatEx>\n                   | <FloatEx> \">\" <FloatEx>\n              \
    \     | <FloatEx> \"<=\" <FloatEx>\n                   | <FloatEx> \">=\" <FloatEx>\
    \ ;\n    <StringRelExpr>:: <StrEx> \"==\" <StrEx>  /* String equality */\n   \
    \                 | <StrEx> \"!=\" <StrEx>  /* String inequality */\n        \
    \            | <StrEx> \"<\" <StrEx>   /* Alphanum. comparisons */\n         \
    \           | <StrEx> \">\" <StrEx>\n                    | <StrEx> \"<=\" <StrEx>\n\
    \                    | <StrEx> \">=\" <StrEx>\n                    | <StrEx> \"\
    ~=\" <RegExpr> ; /* Reg. expr. matching */\n    <IntEx>:: <IntEx> \"+\" <IntEx>\
    \        /* Integer */\n            | <IntEx> \"-\" <IntEx>\n            | <IntEx>\
    \ \"*\" <IntEx>\n            | <IntEx> \"/\" <IntEx>\n            | <IntEx> \"\
    %\" <IntEx>\n            | <IntEx> \"^\" <IntEx>        /* Exponentiation */\n\
    \            | \"-\" <IntEx>\n            | \"(\" <IntEx> \")\"\n            |\
    \ <IntegerLiteral>\n            | \"@\" <StrEx> ;\n    <FloatEx>:: <FloatEx> \"\
    +\" <FloatEx>  /* Floating point */\n              | <FloatEx> \"-\" <FloatEx>\n\
    \              | <FloatEx> \"*\" <FloatEx>\n              | <FloatEx> \"/\" <FloatEx>\n\
    \              | <FloatEx> \"^\" <FloatEx> /* Exponentiation */\n            \
    \  | \"-\" <FloatEx>\n              | \"(\" <FloatEx> \")\"\n              | <FloatLiteral>\n\
    \              | \"&\" <StrEx> ;\n    <IntegerLiteral>:: {Decimal number of at\
    \ least one digit} ;\n    <FloatLiteral>:: <IntegerLiteral>\".\"<IntegerLiteral>\
    \ ;\n    <StringLiteral> is a quoted string as defined in Section 4.3\n    <AttributeID>\
    \ is defined in Section 3.\n   The operation precedence classes are (from highest\
    \ to lowest):\n        { (, ) }\n        {unary -, @, &, $}\n        {^}\n   \
    \     {*, /, %}\n        {+, -, .}\n   Operators in the same precedence class\
    \ are evaluated left-to-right.\n   Note the inability to test for floating point\
    \ equality,  as most\n   floating point implementations (hardware or otherwise)\
    \ do not\n   guarantee accurate equality testing.\n   Also note that integer and\
    \ floating point expressions can only be\n   used within clauses of condition\
    \ fields, but in no other KeyNote\n   field.\n   The keywords \"true\" and \"\
    false\" are not reserved; they can be used as\n   attribute or principal identifier\
    \ names (although this practice makes\n   assertions difficult to understand and\
    \ is discouraged).\n   <RegExpr> is a standard regular expression, conforming\
    \ to the POSIX\n   1003.2 regular expression syntax and semantics.\n   Any string\
    \ expression (or attribute) containing the ASCII\n   representation of a numeric\
    \ value can be converted to an integer or\n   float with the use of the \"@\"\
    \ and \"&\" operators, respectively.  Any\n   fractional component of an attribute\
    \ value dereferenced as an integer\n   is rounded down.  If an attribute dereferenced\
    \ as a number cannot be\n   properly converted (e.g., it contains invalid characters\
    \ or is empty)\n   its value is considered to be zero.\n"
- title: 4.6.6  The Comment Field
  contents:
  - "4.6.6  The Comment Field\n   The Comment field allows assertions to be annotated\
    \ with information\n   describing their purpose.  It is of the form\n       <CommentField>::\
    \ \"Comment:\" <text> ;\n   No interpretation of the contents of this field is\
    \ performed by\n   KeyNote.  Note that this is one of two mechanisms for including\n\
    \   comments in KeyNote assertions; comments can also be inserted\n   anywhere\
    \ in an assertion's body by preceding them with the \"#\"\n   character (except\
    \ inside string literals).\n"
- title: 4.6.7  The Signature Field
  contents:
  - "4.6.7  The Signature Field\n   The Signature field identifies a signed assertion\
    \ and gives the\n   encoded digital signature of the principal identified in the\n\
    \   Authorizer field.  The Signature field is of the form:\n       <SignatureField>::\
    \ \"Signature:\" <Signature> ;\n       <Signature>:: <StrEx> ;\n   The <Signature>\
    \ string should be of the form:\n       <IDString>:: <ALGORITHM>\":\"<ENCODEDBITS>\
    \ ;\n   The formats of the \"ALGORITHM\" and \"ENCODEDBITS\" substrings are as\n\
    \   described for Cryptographic Principal Identifiers in Section 4.4.2\n   The\
    \ algorithm name should be the same as that of the principal\n   appearing in\
    \ the Authorizer field.  The IANA (or some other suitable\n   authority) will\
    \ provide a registry of reserved names.  It is not\n   necessary that the encodings\
    \ of the signature and the authorizer key\n   be the same.\n   If the signature\
    \ field is included, the principal named in the\n   Authorizer field must be a\
    \ Cryptographic Principal Identifier, the\n   algorithm must be known to the KeyNote\
    \ implementation, and the\n   signature must be correct for the assertion body\
    \ and authorizer key.\n   The signature is computed over the assertion text, beginning\
    \ with the\n   first field (including the field identifier string), up to (but\
    \ not\n   including) the Signature field identifier.  The newline preceding the\n\
    \   signature field identifier is the last character included in\n   signature\
    \ calculation.  The signature is always the last field in a\n   KeyNote assertion.\
    \  Text following this field is not considered part\n   of the assertion.\n  \
    \ The algorithms for computing and verifying signatures must be\n   configured\
    \ into each KeyNote implementation and are defined and\n   documented separately.\n\
    \   Note that all signatures used in examples in this document are\n   fictitious\
    \ and generally much shorter than would be required for\n   security in practice.\n"
- title: 5.   Query Evaluation Semantics
  contents:
  - "5.   Query Evaluation Semantics\n   The KeyNote compliance checker finds and\
    \ returns the Policy\n   Compliance Value of queries, as defined in Section 5.3,\
    \ below.\n"
- title: 5.1  Query Parameters
  contents:
  - "5.1  Query Parameters\n   A KeyNote query has four parameters:\n   *  The identifier\
    \ of the principal(s) requesting the action.\n   *  The action attribute set describing\
    \ the action.\n   *  The set of compliance values of interest to the application,\n\
    \      ordered from _MIN_TRUST to _MAX_TRUST\n   *  The policy and credential\
    \ assertions that should be included in\n      the evaluation.\n   The mechanism\
    \ for passing these parameters to the KeyNote evaluator\n   is application dependent.\
    \  In particular, an evaluator might provide\n   for some parameters to be passed\
    \ explicitly, while others are looked\n   up externally (e.g., credentials might\
    \ be looked up in a network-\n   based distribution system), while still others\
    \ might be requested\n   from the application as needed by the evaluator, through\
    \ a `callback'\n   mechanism (e.g., for attribute values that represent values\
    \ from\n   among a very large namespace).\n"
- title: 5.1.1  Action Requester
  contents:
  - "5.1.1  Action Requester\n   At least one Principal must be identified in each\
    \ query as the\n   `requester' of the action.  Actions may be requested by several\n\
    \   principals, each considered to have individually requested it.  This\n   allows\
    \ policies that require multiple authorizations, e.g., `two\n   person control'.\
    \  The set of authorizing principals is made available\n   in the special attribute\
    \ \"_ACTION_AUTHORIZERS\"; if several principals\n   are authorizers, their identifiers\
    \ are separated with commas.\n"
- title: 5.1.2  Ordered Compliance Value Set
  contents:
  - "5.1.2  Ordered Compliance Value Set\n   The set of compliance values of interest\
    \ to an application (and their\n   relative ranking to one another) is determined\
    \ by the invoking\n   application and passed to the KeyNote evaluator as a parameter\
    \ of the\n   query.  In many applications, this will be Boolean, e.g., the ordered\n\
    \   sets {FALSE, TRUE} or {REJECT, APPROVE}.  Other applications may\n   require\
    \ a range of possible values, e.g., {No_Access, Limited_Access,\n   Full_Access}.\
    \  Note that applications should include in this set only\n   compliance value\
    \ names that are actually returned by the assertions.\n   The lowest-order and\
    \ highest-order compliance value strings given in\n   the query are available\
    \ in the special attributes named \"_MIN_TRUST\"\n   and \"_MAX_TRUST\", respectively.\
    \  The complete set of query compliance\n   values is made available in ascending\
    \ order (from _MIN_TRUST to\n   _MAX_TRUST) in the special attribute named \"\
    _VALUES\".  Values are\n   separated with commas; applications that use assertions\
    \ that make use\n   of the _VALUES attribute should therefore avoid the use of\
    \ compliance\n   value strings that themselves contain commas.\n"
- title: 5.2  Principal Identifier Normalization
  contents:
  - "5.2  Principal Identifier Normalization\n   Principal identifier comparisons\
    \ among Cryptographic Principal\n   Identifiers (that represent keys) in the Authorizer\
    \ and Licensees\n   fields or in an action's direct authorizers are performed\
    \ after\n   normalizing them by conversion to a canonical form.\n   Every cryptographic\
    \ algorithm used in KeyNote defines a method for\n   converting keys to their\
    \ canonical form and that specifies how the\n   comparison for equality of two\
    \ keys is performed.  If the algorithm\n   named in the identifier is unknown\
    \ to KeyNote, the identifier is\n   treated as opaque.\n   Opaque identifiers\
    \ are compared as case-sensitive strings.\n   Notice that use of opaque identifiers\
    \ in the Authorizer field\n   requires that the assertion's integrity be locally\
    \ trusted (since it\n   cannot be cryptographically verified by the compliance\
    \ checker).\n"
- title: 5.3  Policy Compliance Value Calculation
  contents:
  - "5.3  Policy Compliance Value Calculation\n   The Policy Compliance Value of a\
    \ query is the Principal Compliance\n   Value of the principal named \"POLICY\"\
    .  This value is defined as\n   follows:\n"
- title: 5.3.1  Principal Compliance Value
  contents:
  - "5.3.1  Principal Compliance Value\n   The Compliance Value of a principal <X>\
    \ is the highest order\n   (maximum) of:\n      -  the Direct Authorization Value\
    \ of principal <X>; and\n      -  the Assertion Compliance Values of all assertions\
    \ identifying\n         <X> in the Authorizer field.\n"
- title: 5.3.2  Direct Authorization Value
  contents:
  - "5.3.2  Direct Authorization Value\n   The Direct Authorization Value of a principal\
    \ <X> is _MAX_TRUST if\n   <X> is listed in the query as an authorizer of the\
    \ action.\n   Otherwise, the Direct Authorization Value of <X> is _MIN_TRUST.\n"
- title: 5.3.3  Assertion Compliance Value
  contents:
  - "5.3.3  Assertion Compliance Value\n   The Assertion Compliance Value of an assertion\
    \ is the lowest order\n   (minimum) of the assertion's Conditions Compliance Value\
    \ and its\n   Licensee Compliance Value.\n"
- title: 5.3.4 Conditions Compliance Value
  contents:
  - "5.3.4 Conditions Compliance Value\n   The Conditions Compliance Value of an assertion\
    \ is the highest-order\n   (maximum) value among all successful clauses listed\
    \ in the conditions\n   section.\n   If no clause's test succeeds or the Conditions\
    \ field is empty, an\n   assertion's Conditions Compliance Value is considered\
    \ to be the\n   _MIN_TRUST value, as defined Section 5.1.\n   If an assertion's\
    \ Conditions field is missing entirely, its\n   Conditions Compliance Value is\
    \ considered to be the _MAX_TRUST value,\n   as defined in Section 5.1.\n   The\
    \ set of successful test clause values is calculated as follows:\n   Recall from\
    \ the grammar of section 4.6.5 that each clause in the\n   conditions section\
    \ has two logical parts: a `test' and an optional\n   `value', which, if present,\
    \ is separated from the test with the \"->\"\n   token.  The test subclause is\
    \ a predicate that either succeeds\n   (evaluates to logical `true') or fails\
    \ (evaluates to logical\n   `false').  The value subclause is a string expression\
    \ that evaluates\n   to one value from the ordered set of compliance values given\
    \ with the\n   query.  If the value subclause is missing, it is considered to\
    \ be\n   _MAX_TRUST.  That is, the clause\n       foo==\"bar\";\n   is equivalent\
    \ to\n       foo==\"bar\" -> _MAX_TRUST;\n   If the value component of a clause\
    \ is present, in the simplest case\n   it contains a string expression representing\
    \ a possible compliance\n   value.  For example, consider an assertion with the\
    \ following\n   Conditions field:\n       Conditions:\n          @user_id == 0\
    \ -> \"full_access\";             # clause (1)\n          @user_id < 1000 -> \"\
    user_access\";           # clause (2)\n          @user_id < 10000 -> \"guest_access\"\
    ;         # clause (3)\n          user_name == \"root\" -> \"full_access\";  \
    \     # clause (4)\n   Here, if the value of the \"user_id\" attribute is \"1073\"\
    \ and the\n   \"user_name\" attribute is \"root\", the possible compliance value\
    \ set\n   would contain the values \"guest_access\" (by clause (3)) and\n   \"\
    full_access\" (by clause (4)).  If the ordered set of compliance\n   values given\
    \ in the query (in ascending order) is {\"no_access\",\n   \"guest_access\", \"\
    user_access\", \"full_access\"}, the Conditions\n   Compliance Value of the assertion\
    \ would be \"full_access\" (because\n   \"full_access\" has a higher-order value\
    \ than \"guest_access\").  If the\n   \"user_id\" attribute had the value \"19283\"\
    \ and the \"user_name\"\n   attribute had the value \"nobody\", no clause would\
    \ succeed and the\n   Conditions Compliance Value would be \"no_access\", which\
    \ is the\n   lowest-order possible value (_MIN_TRUST).\n   If a clause lists an\
    \ explicit value, its value string must be named\n   in the query ordered compliance\
    \ value set.  Values not named in the\n   query compliance value set are considered\
    \ equivalent to _MIN_TRUST.\n   The value component of a clause can also contain\
    \ recursively-nested\n   clauses.  Recursively-nested clauses are evaluated only\
    \ if their\n   parent test is true.  That is,\n       a==\"b\" ->  { b==\"c\"\
    \ -> \"value1\";\n                    d==\"e\"  -> \"value2\";\n             \
    \       true -> \"value3\"; } ;\n   is equivalent to\n       (a==\"b\") && (b==\"\
    c\") -> \"value1\";\n       (a==\"b\") && (d==\"e\") -> \"value2\";\n       (a==\"\
    b\") -> \"value3\";\n   String comparisons are case-sensitive.\n   A regular expression\
    \ comparison (\"~=\") is considered true if the\n   left-hand-side string expression\
    \ matches the right-hand-side regular\n   expression.  If the POSIX regular expression\
    \ group matching scheme is\n   used, the number of groups matched is placed in\
    \ the temporary meta-\n   attribute \"_0\" (dereferenced as _0), and each match\
    \ is placed in\n   sequence in the temporary attributes (_1, _2, ..., _N).  These\n\
    \   match-attributes' values are valid only within subsequent references\n   made\
    \ within the same clause.  Regular expression evaluation is case-\n   sensitive.\n\
    \   A runtime error occurring in the evaluation of a test, such as\n   division\
    \ by zero or an invalid regular expression, causes the test to\n   be considered\
    \ false.  For example:\n      foo == \"bar\" -> {\n                        @a\
    \ == 1/0 -> \"oneval\";    # subclause 1\n                        @a == 2 -> \"\
    anotherval\";  # subclause 2\n                      };\n   Here, subclause 1 triggers\
    \ a runtime error.  Subclause 1 is therefore\n   false (and has the value _MIN_TRUST).\
    \  Subclause 2, however, would be\n   evaluated normally.\n   An invalid <RegExpr>\
    \ is considered a runtime error and causes the\n   test in which it occurs to\
    \ be considered false.\n"
- title: 5.3.5  Licensee Compliance Value
  contents:
  - "5.3.5  Licensee Compliance Value\n   The Licensee Compliance Value of an assertion\
    \ is calculated by\n   evaluating the expression in the Licensees field, based\
    \ on the\n   Principal Compliance Value of the principals named there.\n   If\
    \ an assertion's Licensees field is empty, its Licensee Compliance\n   Value is\
    \ considered to be _MIN_TRUST.  If an assertion's Licensees\n   field is missing\
    \ altogether, its Licensee Compliance Value is\n   considered to be _MAX_TRUST.\n\
    \   For each principal named in the Licensees field, its Principal\n   Compliance\
    \ Value is substituted for its name.  If no Principal\n   Compliance Value can\
    \ be found for some named principal, its name is\n   substituted with the _MIN_TRUST\
    \ value.\n   The licensees expression (as defined in Section 4.6.4) is evaluated\n\
    \   as follows:\n   *  A \"(...)\" expression has the value of the enclosed subexpression.\n\
    \   *  A \"&&\" expression has the lower-order (minimum) of its two\n        subexpression\
    \ values.\n   *  A \"||\" expression has the higher-order (maximum) of its two\n\
    \      subexpression values.\n   *  A \"<K>-of(<List>)\" expression has the K-th\
    \ highest order\n      compliance value listed in <list>.  Values that appear\
    \ multiple\n      times are counted with multiplicity.  For example, if K = 3\
    \ and\n      the orders of the listed compliance values are (0, 1, 2, 2, 3),\n\
    \      the value of the expression is the compliance value of order 2.\n   For\
    \ example, consider the following Licensees field:\n        Licensees: (\"alice\"\
    \ && \"bob\") || \"eve\"\n   If the Principal Compliance Value is \"yes\" for\
    \ principal \"alice\",\n   \"no\" for principal \"bob\", and \"no\" for principal\
    \ \"eve\", and \"yes\" is\n   higher order than \"no\" in the query's Compliance\
    \ Value Set, then the\n   resulting Licensee Compliance Value is \"no\".\n   Observe\
    \ that if there are exactly two possible compliance values\n   (e.g., \"false\"\
    \ and \"true\"), the rules of Licensee Compliance Value\n   resolution reduce\
    \ exactly to standard Boolean logic.\n"
- title: 5.4  Assertion Management
  contents:
  - "5.4  Assertion Management\n   Assertions may be either signed or unsigned.  Only\
    \ signed assertions\n   should be used as credentials or transmitted or stored\
    \ on untrusted\n   media.  Unsigned assertions should be used only to specify\
    \ policy and\n   for assertions whose integrity has already been verified as\n\
    \   conforming to local policy by some mechanism external to the KeyNote\n   system\
    \ itself (e.g., X.509 certificates converted to KeyNote\n   assertions by a trusted\
    \ conversion program).\n   Implementations that permit signed credentials to be\
    \ verified by the\n   KeyNote compliance checker generally provide two `channels'\
    \ through\n   which applications can make assertions available.  Unsigned,\n \
    \  locally-trusted assertions are provided over a `trusted' interface,\n   while\
    \ signed credentials are provided over an `untrusted' interface.\n   The KeyNote\
    \ compliance checker verifies correct signatures for all\n   assertions submitted\
    \ over the untrusted interface.  The integrity of\n   KeyNote evaluation requires\
    \ that only assertions trusted as\n   reflecting local policy are submitted to\
    \ KeyNote via the trusted\n   interface.\n   Note that applications that use KeyNote\
    \ exclusively as a local policy\n   specification mechanism need use only trusted\
    \ assertions.  Other\n   applications might need only a small number of infrequently\
    \ changed\n   trusted assertions to `bootstrap' a policy whose details are\n \
    \  specified in signed credentials issued by others and submitted over\n   the\
    \ untrusted interface.\n"
- title: 5.5  Implementation Issues
  contents:
  - "5.5  Implementation Issues\n   Informally, the semantics of KeyNote evaluation\
    \ can be thought of as\n   involving the construction a directed graph of KeyNote\
    \ assertions\n   rooted at a POLICY assertion that connects with at least one\
    \ of the\n   principals that requested the action.\n   Delegation of some authorization\
    \ from principal <A> to a set of\n   principals <B> is expressed as an assertion\
    \ with principal <A> given\n   in the Authorizer field, principal set <B> given\
    \ in the Licensees\n   field, and the authorization to be delegated encoded in\
    \ the\n   Conditions field.  How the expression digraph is constructed is\n  \
    \ implementation-dependent and implementations may use different\n   algorithms\
    \ for optimizing the graph's construction.  Some\n   implementations might use\
    \ a `bottom up' traversal starting at the\n   principals that requested the action,\
    \ others might follow a `top\n   down' approach starting at the POLICY assertions,\
    \ and still others\n   might employ other heuristics entirely.\n   Implementations\
    \ are encouraged to employ mechanisms for recording\n   exceptions (such as division\
    \ by zero or syntax error), and reporting\n   them to the invoking application\
    \ if requested.  Such mechanisms are\n   outside the scope of this document.\n"
- title: 6.  Examples
  contents:
  - "6.  Examples\n   In this section, we give examples of KeyNote assertions that\
    \ might be\n   used in hypothetical applications.  These examples are intended\n\
    \   primarily to illustrate features of KeyNote assertion syntax and\n   semantics,\
    \ and do not necessarily represent the best way to integrate\n   KeyNote into\
    \ applications.\n   In the interest of readability, we use much shorter keys than\
    \ would\n   ordinarily be used in practice.  Note that the Signature fields in\n\
    \   these examples do not represent the result of any real signature\n   calculation.\n\
    \   1. TRADITIONAL CA / EMAIL\n      A. A policy unconditionally authorizing RSA\
    \ key abc123 for all\n         actions.  This essentially defers the ability to\
    \ specify\n         policy to the holder of the secret key corresponding to\n\
    \         abc123:\n           Authorizer: \"POLICY\"\n           Licensees: \"\
    RSA:abc123\"\n      B. A credential assertion in which RSA Key abc123 trusts either\n\
    \         RSA key 4401ff92 (called `Alice') or DSA key d1234f (called\n      \
    \   `Bob') to perform actions in which the \"app_domain\" is\n         \"RFC822-EMAIL\"\
    , where the \"address\" matches the regular\n         expression \"^.*@keynote\\\
    .research\\.att\\.com$\".  In other\n         words, abc123 trusts Alice and Bob\
    \ as certification\n         authorities for the keynote.research.att.com domain.\n\
    \           KeyNote-Version: 2\n           Local-Constants: Alice=\"DSA:4401ff92\"\
    \  # Alice's key\n                            Bob=\"RSA:d1234f\"      # Bob's\
    \ key\n           Authorizer: \"RSA:abc123\"\n           Licensees: Alice || Bob\n\
    \           Conditions: (app_domain == \"RFC822-EMAIL\") &&\n                \
    \       (address ~=   # only applies to one domain\n                         \"\
    ^.*@keynote\\\\.research\\\\.att\\\\.com$\");\n           Signature: \"RSA-SHA1:213354f9\"\
    \n      C. A certificate credential for a specific user whose email\n        \
    \ address is mab@keynote.research.att.com and whose name, if\n         present,\
    \ must be \"M. Blaze\". The credential was issued by the\n         `Alice' authority\
    \ (whose key is certified in Example B\n         above):\n           KeyNote-Version:\
    \ 2\n           Authorizer: \"DSA:4401ff92\"  # the Alice CA\n           Licensees:\
    \ \"DSA:12340987\"   # mab's key\n           Conditions: ((app_domain == \"RFC822-EMAIL\"\
    ) &&\n                        (name == \"M. Blaze\" || name == \"\") &&\n    \
    \                    (address == \"mab@keynote.research.att.com\"));\n       \
    \    Signature: \"DSA-SHA1:ab23487\"\n      D. Another certificate credential\
    \ for a specific user, also\n         issued by the `Alice' authority.  This example\
    \ allows three\n         different keys to sign as jf@keynote.research.att.com\
    \ (each\n         for a different cryptographic algorithm).  This is, in\n   \
    \      effect, three credentials in one:\n           KeyNote-Version: \"2\"\n\
    \           Authorizer: \"DSA:4401ff92\"   # the Alice CA\n           Licensees:\
    \ \"DSA:abc991\" ||   # jf's DSA key\n                      \"RSA:cde773\" ||\
    \   # jf's RSA key\n                      \"BFIK:fd091a\"     # jf's BFIK key\n\
    \           Conditions: ((app_domain == \"RFC822-EMAIL\") &&\n               \
    \         (name == \"J. Feigenbaum\" || name == \"\") &&\n                   \
    \     (address == \"jf@keynote.research.att.com\"));\n           Signature: \"\
    DSA-SHA1:8912aa\"\n         Observe that under policy A and credentials B, C and\
    \ D, the\n         following action attribute sets are accepted (they return\n\
    \         _MAX_TRUST):\n             _ACTION_AUTHORIZERS = \"dsa:12340987\"\n\
    \             app_domain = \"RFC822-EMAIL\"\n             address = \"mab@keynote.research.att.com\"\
    \n          and\n             _ACTION_AUTHORIZERS = \"dsa:12340987\"\n       \
    \      app_domain = \"RFC822-EMAIL\"\n             address = \"mab@keynote.research.att.com\"\
    \n             name = \"M. Blaze\"\n         while the following are not accepted\
    \ (they return\n         _MIN_TRUST):\n             _ACTION_AUTHORIZERS = \"dsa:12340987\"\
    \n             app_domain = \"RFC822-EMAIL\"\n             address = \"angelos@dsl.cis.upenn.edu\"\
    \n          and\n             _ACTION_AUTHORIZERS = \"dsa:abc991\"\n         \
    \    app_domain = \"RFC822-EMAIL\"\n             address = \"mab@keynote.research.att.com\"\
    \n             name = \"M. Blaze\"\n          and\n             _ACTION_AUTHORIZERS\
    \ = \"dsa:12340987\"\n             app_domain = \"RFC822-EMAIL\"\n           \
    \  address = \"mab@keynote.research.att.com\"\n             name = \"J. Feigenbaum\"\
    \n   2. WORKFLOW/ELECTRONIC COMMERCE\n      E. A policy that delegates authority\
    \ for the \"SPEND\" application\n         domain to RSA key dab212 when the amount\
    \ given in the\n         \"dollars\" attribute is less than 10000.\n         \
    \  Authorizer: \"POLICY\"\n           Licensees: \"RSA:dab212\"  # the CFO's key\n\
    \           Conditions: (app_domain==\"SPEND\") && (@dollars < 10000);\n     \
    \ F. RSA key dab212 delegates authorization to any two signers,\n         from\
    \ a list, one of which must be DSA key feed1234 in the\n         \"SPEND\" application\
    \ when @dollars < 7500.  If the amount in\n         @dollars is 2500 or greater,\
    \ the request is approved but\n         logged.\n           KeyNote-Version: 2\n\
    \           Comment: This credential specifies a spending policy\n           Authorizer:\
    \ \"RSA:dab212\"        # the CFO\n           Licensees: \"DSA:feed1234\" && \
    \   # The vice president\n                          (\"RSA:abc123\" || # middle\
    \ manager #1\n                           \"DSA:bcd987\" || # middle manager #2\n\
    \                           \"DSA:cde333\" || # middle manager #3\n          \
    \                 \"DSA:def975\" || # middle manager #4\n                    \
    \       \"DSA:978add\")   # middle manager #5\n           Conditions: (app_domain==\"\
    SPEND\")  # note nested clauses\n                         -> { (@(dollars) < 2500)\n\
    \                                -> _MAX_TRUST;\n                            \
    \  (@(dollars) < 7500)\n                                -> \"ApproveAndLog\";\n\
    \                            };\n           Signature: \"RSA-SHA1:9867a1\"\n \
    \     G. According to this policy, any two signers from the list of\n        \
    \ managers will do if @(dollars) < 1000:\n           KeyNote-Version: 2\n    \
    \       Authorizer: \"POLICY\"\n           Licensees: 2-of(\"DSA:feed1234\", #\
    \ The VP\n                           \"RSA:abc123\",   # Middle management clones\n\
    \                           \"DSA:bcd987\",\n                           \"DSA:cde333\"\
    ,\n                           \"DSA:def975\",\n                           \"DSA:978add\"\
    )\n           Conditions: (app_domain==\"SPEND\") &&\n                       (@(dollars)\
    \ < 1000);\n      H. A credential from dab212 with a similar policy, but only\
    \ one\n         signer is required if @(dollars) < 500.  A log entry is made if\n\
    \         the amount is at least 100.\n           KeyNote-Version: 2\n       \
    \    Comment: This one credential is equivalent to six separate\n            \
    \        credentials, one for each VP and middle manager.\n                  \
    \  Individually, they can spend up to $500, but if\n                    it's $100\
    \ or more, we log it.\n           Authorizer: \"RSA:dab212\"      # From the CFO\n\
    \           Licensees: \"DSA:feed1234\" ||  # The VP\n                      \"\
    RSA:abc123\" ||    # The middle management clones\n                      \"DSA:bcd987\"\
    \ ||\n                      \"DSA:cde333\" ||\n                      \"DSA:def975\"\
    \ ||\n                      \"DSA:978add\"\n           Conditions: (app_domain=\"\
    SPEND\")  # nested clauses\n                         -> { (@(dollars) < 100) ->\
    \ _MAX_TRUST;\n                              (@(dollars) < 500) -> \"ApproveAndLog\"\
    ;\n                            };\n           Signature: \"RSA-SHA1:186123\"\n\
    \      Assume a query in which the ordered set of Compliance Values is\n     \
    \ {\"Reject\", \"ApproveAndLog\", \"Approve\"}.  Under policies E and G,\n   \
    \   and credentials F and H, the Policy Compliance Value is\n      \"Approve\"\
    \ (_MAX_TRUST) when:\n           _ACTION_AUTHORIZERS = \"DSA:978add\"\n      \
    \     app_domain = \"SPEND\"\n           dollars = \"45\"\n           unmentioned_attribute\
    \ = \"whatever\"\n       and\n           _ACTION_AUTHORIZERS = \"RSA:abc123,DSA:cde333\"\
    \n           app_domain = \"SPEND\"\n           dollars = \"550\"\n      The following\
    \ return \"ApproveAndLog\":\n           _ACTION_AUTHORIZERS = \"DSA:feed1234,DSA:cde333\"\
    \n           app_domain = \"SPEND\"\n           dollars = \"5500\"\n       and\n\
    \           _ACTION_AUTHORIZERS = \"DSA:cde333\"\n           app_domain = \"SPEND\"\
    \n           dollars = \"150\"\n      However, the following return \"Reject\"\
    \ (_MIN_TRUST):\n           _ACTION_AUTHORIZERS = \"DSA:def975\"\n           app_domain\
    \ = \"SPEND\"\n           dollars = \"550\"\n       and\n           _ACTION_AUTHORIZERS\
    \ = \"DSA:cde333,DSA:978add\"\n           app_domain = \"SPEND\"\n           dollars\
    \ = \"5500\"\n"
- title: 7.  Trust-Management Architecture
  contents:
  - "7.  Trust-Management Architecture\n   KeyNote provides a simple mechanism for\
    \ describing security policy\n   and representing credentials.  It differs from\
    \ traditional\n   certification systems in that the security model is based on\
    \ binding\n   keys to predicates that describe what the key is authorized by policy\n\
    \   to do, rather than on resolving names.  The infrastructure and\n   architecture\
    \ to support a KeyNote system is therefore rather\n   different from that required\
    \ for a name-based certification scheme.\n   The KeyNote trust-management architecture\
    \ is based on that of\n   PolicyMaker [BFL96,BFS98].\n   It is important to understand\
    \ the separation between the\n   responsibilities of the KeyNote system and those\
    \ of the application\n   and other support infrastructure.  A KeyNote compliance\
    \ checker will\n   determine, based on policy and credential assertions, whether\
    \ a\n   proposed action is permitted according to policy.  The usefulness of\n\
    \   KeyNote output as a policy enforcement mechanism depends on a number\n   of\
    \ factors:\n   *  The action attributes and the assignment of their values must\n\
    \      reflect accurately the security requirements of the application.\n    \
    \  Identifying the attributes to include in the action attribute set\n      is\
    \ perhaps the most important task in integrating KeyNote into new\n      applications.\n\
    \   *  The policy of the application must be correct and well-formed.  In\n  \
    \    particular, trust must be deferred only to principals that should,\n    \
    \  in fact, be trusted by the application.\n   *  The application itself must\
    \ be trustworthy.  KeyNote does not\n      directly enforce policy; it only provides\
    \ advice to the\n      applications that call it.  In other words, KeyNote assumes\
    \ that\n      the application itself is trusted and that the policy assertions\n\
    \      it specifies are correct.  Nothing prevents an application from\n     \
    \ submitting misleading or incorrect assertions to KeyNote or from\n      ignoring\
    \ KeyNote altogether.\n   It is also up to the application (or some service outside\
    \ KeyNote) to\n   select the appropriate credentials and policy assertions with\
    \ which\n   to run a particular query.  Note, however, that even if inappropriate\n\
    \   credentials are provided to KeyNote, this cannot result in the\n   approval\
    \ of an illegal action (as long as the policy assertions are\n   correct and the\
    \ the action attribute set itself is correctly passed\n   to KeyNote).\n   KeyNote\
    \ is monotonic; adding an assertion to a query can never result\n   in a query's\
    \ having a lower compliance value that it would have had\n   without the assertion.\
    \  Omitting credentials may, of course, result\n   in legal actions being disallowed.\
    \  Selecting appropriate credentials\n   (e.g., from a distributed database or\
    \ `key server') is outside the\n   scope of the KeyNote language and may properly\
    \ be handled by a remote\n   client making a request, by the local application\
    \ receiving the\n   request, or by a network-based service, depending on the application.\n\
    \   In addition, KeyNote does not itself provide credential revocation\n   services,\
    \ although credentials can be written to expire after some\n   date by including\
    \ a date test in the predicate.  Applications that\n   require credential revocation\
    \ can use KeyNote to help specify and\n   implement revocation policies.  A future\
    \ document will address\n   expiration and revocation services in KeyNote.\n \
    \  Because KeyNote is designed to support a variety of applications,\n   several\
    \ different application interfaces to a KeyNote implementation\n   are possible.\
    \  In its simplest form, a KeyNote compliance checker\n   would exist as a stand-alone\
    \ application, with other applications\n   calling it as needed.  KeyNote might\
    \ also be implemented as a library\n   to which applications are linked.  Finally,\
    \ a KeyNote implementation\n   might run as a local trusted service, with local\
    \ applications\n   communicating their queries via some interprocess communication\n\
    \   mechanism.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Trust management is itself a security service.\
    \  Bugs in or incorrect\n   use of a KeyNote compliance checker implementation\
    \ could have\n   security implications for any applications in which it is used.\n"
- title: 9. IANA Considerations
  contents:
  - "9. IANA Considerations\n   This document contains three identifiers to be maintained\
    \ by the\n   IANA.  This section explains the criteria to be used by the IANA\
    \ to\n   assign additional identifiers in each of these lists.\n"
- title: 9.1  app_domain Identifiers
  contents:
  - "9.1  app_domain Identifiers\n   The only thing required of IANA on allocation\
    \ of these identifiers is\n   that they be unique strings.  These strings are\
    \ case-sensitive for\n   KeyNote purposes, however it is strongly recommended\
    \ that IANA assign\n   different capitalizations of the same string only to the\
    \ same\n   organization.\n"
- title: 9.2  Public Key Format Identifiers
  contents:
  - "9.2  Public Key Format Identifiers\n   These strings uniquely identify a public\
    \ key algorithm as used in the\n   KeyNote system for representing keys.  Requests\
    \ for assignment of new\n   identifiers must be accompanied by an RFC-style document\
    \ that\n   describes the details of this encoding.  Example strings are \"rsa-\n\
    \   hex:\" and \"dsa-base64:\".  These strings are case-insensitive.\n"
- title: 9.3  Signature Algorithm Identifiers
  contents:
  - "9.3  Signature Algorithm Identifiers\n   These strings uniquely identify a public\
    \ key algorithm as used in the\n   KeyNote system for representing public key\
    \ signatures.  Requests for\n   assignment of new identifiers must be accompanied\
    \ by an RFC-style\n   document that describes the details of this encoding. Example\
    \ strings\n   are \"sig-rsa-md5-hex:\" and \"sig-dsa-sha1-base64:\".  Note that\
    \ all\n   such strings must begin with the prefix \"sig-\".  These strings are\n\
    \   case-insensitive.\n"
- title: A.  Acknowledgments
  contents:
  - "A.  Acknowledgments\n   We thank Lorrie Faith Cranor (AT&T Labs - Research) and\
    \ Jonathan M.\n   Smith (University of Pennsylvania) for their suggestions and\
    \ comments\n   on earlier versions of this document.\n"
- title: B.  Full BNF (alphabetical order)
  contents:
  - "B.  Full BNF (alphabetical order)\n   <ALGORITHM>:: {see section 4.4.2} ;\n \
    \  <Assertion>:: <VersionField>? <AuthField> <LicenseesField>?\n             \
    \    <LocalConstantsField>? <ConditionsField>?\n                 <CommentField>?\
    \ <SignatureField>? ;\n   <Assignments>:: \"\" | <AttributeID> \"=\" <StringLiteral>\
    \ <Assignments>\n   ;\n   <AttributeID>:: {Any string starting with a-z, A-Z,\
    \ or the\n                    underscore character, followed by any number of\n\
    \                    a-z, A-Z, 0-9, or underscore characters} ;\n   <AuthField>::\
    \ \"Authorizer:\" <AuthID> ;\n   <AuthID>:: <PrincipalIdentifier> | <DerefAttribute>\
    \ ;\n   <Clause>:: <Test> \"->\" \"{\" <ConditionsProgram> \"}\"\n           \
    \ | <Test> \"->\" <Value> | <Test> ;\n   <Comment>:: \"#\" {ASCII characters}\
    \ ;\n   <CommentField>:: \"Comment:\" {Free-form text} ;\n   <ConditionsField>::\
    \ \"Conditions:\" <ConditionsProgram> ;\n   <ConditionsProgram>:: \"\" | <Clause>\
    \ \";\" <ConditionsProgram> ;\n   <DerefAttribute>:: <AttributeID> ;\n   <ENCODEDBITS>::\
    \ {see section 4.4.2} ;\n   <FloatEx>:: <FloatEx> \"+\" <FloatEx> | <FloatEx>\
    \ \"-\" <FloatEx>\n             | <FloatEx> \"*\" <FloatEx> | <FloatEx> \"/\"\
    \ <FloatEx>\n             | <FloatEx> \"^\" <FloatEx> | \"-\" <FloatEx>\n    \
    \         | \"(\" <FloatEx> \")\" | <FloatLiteral> | \"&\" <StrEx> ;\n   <FloatRelExpr>::\
    \ <FloatEx> \"<\" <FloatEx> | <FloatEx> \">\" <FloatEx>\n                  | <FloatEx>\
    \ \"<=\" <FloatEx>\n                  | <FloatEx> \">=\" <FloatEx> ;\n   <FloatLiteral>::\
    \ <IntegerLiteral>\".\"<IntegerLiteral> ;\n   <IDString>:: <ALGORITHM>\":\"<ENCODEDBITS>\
    \ ;\n   <IntegerLiteral>:: {Decimal number of at least one digit} ;\n   <IntEx>::\
    \ <IntEx> \"+\" <IntEx> | <IntEx> \"-\" <IntEx>\n           | <IntEx> \"*\" <IntEx>\
    \ | <IntEx> \"/\" <IntEx>\n           | <IntEx> \"%\" <IntEx> | <IntEx> \"^\"\
    \ <IntEx>\n           | \"-\" <IntEx> | \"(\" <IntEx> \")\" | <IntegerLiteral>\n\
    \           | \"@\" <StrEx> ;\n   <IntRelExpr>:: <IntEx> \"==\" <IntEx> | <IntEx>\
    \ \"!=\" <IntEx>\n                | <IntEx> \"<\" <IntEx>  | <IntEx> \">\" <IntEx>\n\
    \                | <IntEx> \"<=\" <IntEx> | <IntEx> \">=\" <IntEx> ;\n   <K>::\
    \ {Decimal number starting with a digit from 1 to 9} ;\n   <KeyID>:: <StrEx> ;\n\
    \   <LicenseesExpr>:: \"\" | <PrincExpr> ;\n   <LicenseesField>:: \"Licensees:\"\
    \ <LicenseesExpr> ;\n   <LocalConstantsField>:: \"Local-Constants:\" <Assignments>\
    \ ;\n   <OpaqueID>:: <StrEx> ;\n   <PrincExpr>:: \"(\" <PrincExpr> \")\" | <PrincExpr>\
    \ \"&&\" <PrincExpr>\n               | <PrincExpr> \"||\" <PrincExpr>\n      \
    \         | <K>\"-of(\" <PrincList> \")\" | <PrincipalIdentifier>\n          \
    \     | <DerefAttribute> ;\n   <PrincipalIdentifier>:: <OpaqueID> | <KeyID> ;\n\
    \   <PrincList>:: <PrincipalIdentifier> | <DerefAttribute>\n               | <PrincList>\
    \ \",\" <PrincList> ;\n   <RegExpr>:: {POSIX 1003.2 Regular Expression}\n   <RelExpr>::\
    \ \"(\" <RelExpr> \")\" | <RelExpr> \"&&\" <RelExpr>\n             | <RelExpr>\
    \ \"||\" <RelExpr> | \"!\" <RelExpr>\n             | <IntRelExpr> | <FloatRelExpr>\
    \ | <StringRelExpr>\n             | \"true\" | \"false\" ;\n   <Signature>:: <StrEx>\
    \ ;\n   <SignatureField>:: \"Signature:\" <Signature> ;\n   <StrEx>:: <StrEx>\
    \ \".\" <StrEx> | <StringLiteral> | \"(\" <StrEx> \")\"\n           | <DerefAttribute>\
    \ | \"$\" <StrEx> ;\n   <StringLiteral>:: {see section 4.3.1} ;\n   <StringRelExpr>::\
    \ <StrEx> \"==\" <StrEx> | <StrEx> \"!=\" <StrEx>\n                   | <StrEx>\
    \ \"<\" <StrEx> | <StrEx> \">\" <StrEx>\n                   | <StrEx> \"<=\" <StrEx>\
    \ | <StrEx> \">=\" <StrEx>\n                   | <StrEx> \"~=\" <RegExpr> ;\n\
    \   <Test>:: <RelExpr> ;\n   <Value>:: <StrEx> ;\n   <VersionField>:: \"KeyNote-Version:\"\
    \ <VersionString> ;\n   <VersionString>:: <StringLiteral> | <IntegerLiteral> ;\n"
- title: References
  contents:
  - "References\n   [BFL96] M. Blaze, J. Feigenbaum, J. Lacy. Decentralized Trust\n\
    \           Management. Proceedings of the 17th IEEE Symp. on Security\n     \
    \      and Privacy. pp 164-173.  IEEE Computer Society, 1996.\n           Available\
    \ at\n           <ftp://ftp.research.att.com/dist/mab/policymaker.ps>\n   [BFS98]\
    \ M. Blaze, J. Feigenbaum, M. Strauss. Compliance-Checking in\n           the\
    \ PolicyMaker Trust-Management System. Proc. 2nd Financial\n           Crypto\
    \ Conference. Anguilla 1998.  LNCS #1465, pp 251-265,\n           Springer-Verlag,\
    \ 1998.  Available at\n           <ftp://ftp.research.att.com/dist/mab/pmcomply.ps>\n\
    \   [Bla99] M. Blaze, J. Feigenbaum, J. Ioannidis, A. Keromytis.  The\n      \
    \     Role of Trust Management in Distributed System Security.\n           Chapter\
    \ in Secure Internet Programming: Security Issues for\n           Mobile and Distributed\
    \ Objects (Vitek and Jensen, eds.).\n           Springer-Verlag, 1999.  Available\
    \ at\n           <ftp://ftp.research.att.com/dist/mab/trustmgt.ps>.\n   [Cro82]\
    \ Crocker, D., \"Standard for the Format of ARPA Internet Text\n           Messages\"\
    , STD 11, RFC 822, August 1982.\n   [DSA94] Digital Signature Standard. FIPS-186.\
    \ National Institute of\n           Standards, U.S. Department of Commerce. May\
    \ 1994.\n   [PKCS1] PKCS #1: RSA Encryption Standard, Version 1.5. RSA\n     \
    \      Laboratories. November 1993.\n   [RSA78] R. L. Rivest, A. Shamir, L. M.\
    \ Adleman.  A Method for\n           Obtaining Digital Signatures and Public-Key\
    \ Cryptosystems.\n           Communications of the ACM, v21n2. pp 120-126.  February\
    \ 1978.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Comments about this document should be discussed on the\
    \ keynote-users\n   mailing list hosted at nsa.research.att.com.  To subscribe,\
    \ send an\n   email message containing the single line\n                 subscribe\
    \ keynote-users\n   in the message body to <majordomo@nsa.research.att.com>.\n\
    \   Questions about this document can also be directed to the authors as\n   a\
    \ group at the keynote@research.att.com alias, or to the individual\n   authors\
    \ at:\n   Matt Blaze\n   AT&T Labs - Research\n   180 Park Avenue\n   Florham\
    \ Park, New Jersey 07932-0971\n   EMail: mab@research.att.com\n   Joan Feigenbaum\n\
    \   AT&T Labs - Research\n   180 Park Avenue\n   Florham Park, New Jersey 07932-0971\n\
    \   EMail: jf@research.att.com\n   John Ioannidis\n   AT&T Labs - Research\n \
    \  180 Park Avenue\n   Florham Park, New Jersey 07932-0971\n   EMail: ji@research.att.com\n\
    \   Angelos D. Keromytis\n   Distributed Systems Lab\n   CIS Department, University\
    \ of Pennsylvania\n   200 S. 33rd Street\n   Philadelphia, Pennsylvania  19104-6389\n\
    \   EMail: angelos@dsl.cis.upenn.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
