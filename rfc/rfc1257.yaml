- title: __initial_text__
  contents:
  - '   Isochronous Applications Do Not Require Jitter-Controlled Networks

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo argues that jitter control is not required for networks\
    \ to\n   support isochronous applications.  A network providing bandwidth and\n\
    \   bounds delay is sufficient.  The implications for gigabit\n   internetworking\
    \ protocols are briefly considered.\n"
- title: Introduction
  contents:
  - "Introduction\n   An oft-stated goal of many of the ongoing gigabit networking\
    \ research\n   projects is to make it possible to support high bandwidth isochronous\n\
    \   applications.  An isochronous application is an application which\n   must\
    \ generate or process regular amounts of data at fixed intervals.\n   Examples\
    \ of such applications include telephones, which send and\n   receive voice samples\
    \ at regular intervals, and fixed rate video-\n   codecs, which generate data\
    \ at regular intervals and which must\n   receive data at regular intervals.\n\
    \   One of the properties of isochronous applications like voice and\n   video\
    \ data streams is that their users may be sensitive to the\n   variation in interarrival\
    \ times between data delivered to the final\n   output device.  This interarrival\
    \ time is called \"jitter\" for very\n   small variances (less than 10 Hz) and\
    \ \"wander\" if it is somewhat\n   larger (less than one day).  For convenience,\
    \ this memo will use the\n   term jitter for both jitter and wander.\n   A couple\
    \ of examples help illustrate the sensitivity of applications\n   to jitter. \
    \ Consider a user watching a video at her workstation.  If\n   the screen is not\
    \ updated regularly every 30th of a second or faster,\n   the user will notice\
    \ a flickering in the image.  Similarly, if voice\n   samples are not delivered\
    \ at regular intervals, voice output may\n   sound distorted.  Thus the user is\
    \ sensitive to the interarrival time\n   of data at the output device.\n   Observe\
    \ that if two users are conferring with each other from their\n   workstations,\
    \ then beyond sensitivity to interarrival times, the\n   users will also be sensitive\
    \ to end-to-end delay.  Consider the\n   difference between conferencing over\
    \ a satellite link and a\n   terrestrial link.  Furthermore, for the data to be\
    \ able to arrive in\n   time, there must be sufficient bandwidth.  Bandwidth requirements\
    \ are\n   particularly important for video: HDTV, even after compression,\n  \
    \ currently requires bandwidth in excess of 100 Mbits/second.\n   Because multimedia\
    \ applications are sensitive to jitter, bandwidth\n   and delay, it has been suggested\
    \ that the networks that carry\n   multimedia traffic must be able to allocate\
    \ and control jitter,\n   bandwidth and delay [1,2].\n   This memo argues that\
    \ a network which simply controls bandwidth and\n   delay is sufficient to support\
    \ networked multimedia applications.\n   Jitter control is not required.\n"
- title: Isochrony without Jitter Control
  contents:
  - "Isochrony without Jitter Control\n   The key argument of this memo is that an\
    \ isochronous service can be\n   provided by simply bounding the maximum delay\
    \ through the network.\n   To prove this argument, consider the following scenario.\n\
    \   The network is able to bound the maximum transit delay on a channel\n   between\
    \ sender and receiver and at least the receiver knows what the\n   bound is. \
    \ (These assumptions come directly from our assertion that\n   the network can\
    \ bound delay).  The term \"channel\" is used to mean\n   some amount of bandwidth\
    \ delivered over some path between sender and\n   receiver.\n   Now imagine an\
    \ operating system in which applications can be\n   scheduled to be active at\
    \ regular intervals. Further assume that the\n   receiving application has buffer\
    \ space equal to the channel bandwidth\n   times the maximum interarrival variance.\
    \  (Observe that the maximum\n   interarrival variance is always known - in the\
    \ worst case, the\n   receiver can assume the maximum variance equals the maximum\
    \ delay).\n   Now consider a situation in which the sender of the isochronous\
    \ data\n   timestamps each piece of data when it is generated, using a universal\n\
    \   time source, and then sends the data to the receiver.  The receiver\n   reads\
    \ a piece data in as soon as it is received and and places the\n   timestamped\
    \ data into its buffer space.  The receiver processes each\n   piece of data only\
    \ at the time equal to the data's timestamp plus the\n   maximum transit delay.\n\
    \   I argue that the receiver is processing data isochronously and thus\n   we\
    \ have shown that a network need not be isochronous to support\n   isochronous\
    \ applications.\n   A few issues have to be resolved to really make this proof\
    \ stick.\n   The first issue is whether the operating system can be expected to\n\
    \   schedule applications to be active at regular intervals.  I will\n   argue\
    \ that whether or not the network is isochronous, the operating\n   system must\
    \ be able to schedule applications at regular intervals\n   Consider an isochronous\
    \ network which delivers data with a tight\n   bound on jitter.  If the application\
    \ on the receiving system does not\n   wake up when new data arrives, but waits\
    \ until its next turn in the\n   processor, then the isochrony of the network\
    \ service would be lost\n   due to the vagaries of operating system scheduling.\
    \  Thus, we may\n   reasonably expect that the operating system provides some\
    \ mechanism\n   for waking up the application in response to a network interrupt\
    \ for\n   a particular packet.  But if the operating system can wake up an\n \
    \  application in response to an interrupt, it can just as easily wake\n   the\
    \ application in response to a clock interrupt at a particular\n   time.  Waking\
    \ up to a clock interrupt provides the regular scheduling\n   service we wanted.\n\
    \   Observe that the last paragraph suggests an application of the End-\n   To-End\
    \ Principle [3].  Given that the operating system must provide a\n   mechanism\
    \ sufficient for restoring isochrony, regardless of whether\n   the network is\
    \ isochronous, it seems unreasonable to require the\n   network to redundantly\
    \ provide the same service.\n   Another issue is the question of whether all receiving\
    \ systems will\n   have memory for buffering.  For example, the telephone network\
    \ is\n   required to deliver its data isochronously because many telephones do\n\
    \   not have memory. However, most receiving devices do have memory, and\n   those\
    \ devices, like telephones, that do not currently have memory\n   seem likely\
    \ to have memory in the future.  Many telephones have a\n   modest amount of memory\
    \ now.  Furthermore, even if the end nodes\n   require isochronous traffic it\
    \ is possible that last switch before\n   delivery to the end node could provide\
    \ the necessary buffer space to\n   restore isochrony to the data flow.\n   Readers\
    \ may wonder if the assumption of a universal time source is\n   reasonable. \
    \ The Network Time Protocol (NTP) has been widely tested\n   on the Internet and\
    \ is capable of distributing time accurately to the\n   millisecond [4].  Its\
    \ designer is currently contemplating the\n   possibility of distributing time\
    \ accurate to the microsecond.\n"
- title: Some Implications
  contents:
  - "Some Implications\n   The most important observation that can be made is that\
    \ jitter\n   control is not required for networks to be able to support\n   isochronous\
    \ applications.  A corollary observation is that if we are\n   to design an internetworking\
    \ protocol for isochronous applications,\n   that internetworking protocol should\
    \ probably only offer control over\n   delay and bandwidth.  (There may exist\
    \ networks that simply manage\n   delay and bandwidth. We know that's sufficient\
    \ for multimedia\n   networking so our multimedia internetworking protocol should\
    \ be\n   capable of running over those networks.  But if the multimedia\n   internetworking\
    \ protocol requires control over jitter too, then\n   jitter control must be implemented\
    \ on those subnetworks that don't\n   have it.  Implementing jitter control is\
    \ clearly feasible - the\n   method for restoring jitter in the last section could\
    \ be used on a\n   single network.  But if we know jitter control isn't needed,\
    \ why\n   require networks to implement it?)\n   Note that the argument simply\
    \ says that jitter control is not\n   required to support isochronous applications.\
    \  It may be the case\n   that jitter control is useful for other reasons.  For\
    \ example, work\n   at Berkeley suggests that jitter control makes it possible\
    \ to reduce\n   the amount of buffering required in intermediate network nodes\
    \ [Y].\n   Thus, even if applications express their requirements only in terms\n\
    \   of bandwidth and delay, a network may find it useful to try to limit\n   jitter\
    \ and thereby reduce the amount of memory required in each node.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to the members of the End-To-End Interest mailing\
    \ list who\n   provided a number of invaluable comments on this memo.\n"
- title: References
  contents:
  - "References\n   [1] Leiner, B., Editor, \"Critical Issues in High Bandwidth\n\
    \       Networking\", Report to DARPA, August 1988.\n   [2] Ferrari, D., \"Client\
    \ Requirements for Real-Time Communication\n       Services\", IEEE Communications\
    \ Magazine, November 1990.  See also\n       RFC 1193, November, 1990.\n   [3]\
    \ Saltzer, J., Reed D., and D. Clark, \"End-To-End Arguments in\n       System\
    \ Design\", ACM Transactions on Computer Systems, Vol. 2, No.\n       4, November\
    \ 1984.\n   [4] Mills, D., \"Measured Performance of the Network Time Protocol\
    \ in\n       the Internet System\", RFC 1128, UDEL, October 1989.\n   [5] Verma,\
    \ D., Zhang H., and D. Ferrari. \"Guaranteeing Delay Jitter\n       Bounds in\
    \ Packet Switching Networks\", Proceedings of TriComm '91,\n       Chapel Hill,\
    \ North Carolina, April 1991.\n"
- title: Security Considertaions
  contents:
  - "Security Considertaions\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Craig Partridge\n   Swedish Institute of Computer Science\n\
    \   Box 1263\n   164 28 Kista\n   SWEDEN\n   Phone: +46 8 752 1524\n   EMail:\
    \ craig@SICS.SE\n"
