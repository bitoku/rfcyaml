- contents:
  - '              Negative Caching of DNS Queries (DNS NCACHE)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   [RFC1034] provided a description of how to cache negative responses.\n
    \  It however had a fundamental flaw in that it did not allow a name\n   server
    to hand out those cached responses to other resolvers, thereby\n   greatly reducing
    the effect of the caching.  This document addresses\n   issues raise in the light
    of experience and replaces [RFC1034 Section\n   4.3.4].\n   Negative caching was
    an optional part of the DNS specification and\n   deals with the caching of the
    non-existence of an RRset [RFC2181] or\n   domain name.\n   Negative caching is
    useful as it reduces the response time for\n   negative answers.  It also reduces
    the number of messages that have\n   to be sent between resolvers and name servers
    hence overall network\n   traffic.  A large proportion of DNS traffic on the Internet
    could be\n   eliminated if all resolvers implemented negative caching.  With this\n
    \  in mind negative caching should no longer be seen as an optional part\n   of
    a DNS resolver.\n"
  title: Abstract
- contents:
  - "1 - Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and
    \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n
    \  \"Negative caching\" - the storage of knowledge that something does not\n   exist.
    \ We can store the knowledge that a record has a particular\n   value.  We can
    also do the reverse, that is, to store the knowledge\n   that a record does not
    exist.  It is the storage of knowledge that\n   something does not exist, cannot
    or does not give an answer that we\n   call negative caching.\n   \"QNAME\" -
    the name in the query section of an answer, or where this\n   resolves to a CNAME,
    or CNAME chain, the data field of the last\n   CNAME.  The last CNAME in this
    sense is that which contains a value\n   which does not resolve to another CNAME.
    \ Implementations should note\n   that including CNAME records in responses in
    order, so that the first\n   has the label from the query section, and then each
    in sequence has\n   the label from the data section of the previous (where more
    than one\n   CNAME is needed) allows the sequence to be processed in one pass,
    and\n   considerably eases the task of the receiver.  Other relevant records\n
    \  (such as SIG RRs [RFC2065]) can be interspersed amongst the CNAMEs.\n   \"NXDOMAIN\"
    - an alternate expression for the \"Name Error\" RCODE as\n   described in [RFC1035
    Section 4.1.1] and the two terms are used\n   interchangeably in this document.\n
    \  \"NODATA\" - a pseudo RCODE which indicates that the name is valid, for\n   the
    given class, but are no records of the given type.  A NODATA\n   response has
    to be inferred from the answer.\n   \"FORWARDER\" - a nameserver used to resolve
    queries instead of\n   directly using the authoritative nameserver chain.  The
    forwarder\n   typically either has better access to the internet, or maintains
    a\n   bigger cache which may be shared amongst many resolvers.  How a\n   server
    is identified as a FORWARDER, or knows it is a FORWARDER is\n   outside the scope
    of this document.  However if you are being used as\n   a forwarder the query
    will have the recursion desired flag set.\n   An understanding of [RFC1034], [RFC1035]
    and [RFC2065] is expected\n   when reading this document.\n"
  title: 1 - Terminology
- contents:
  - "2 - Negative Responses\n   The most common negative responses indicate that a
    particular RRset\n   does not exist in the DNS.  The first sections of this document
    deal\n   with this case.  Other negative responses can indicate failures of a\n
    \  nameserver, those are dealt with in section 7 (Other Negative\n   Responses).\n
    \  A negative response is indicated by one of the following conditions:\n"
  - contents:
    - "2.1 - Name Error\n   Name errors (NXDOMAIN) are indicated by the presence of
      \"Name Error\"\n   in the RCODE field.  In this case the domain referred to
      by the QNAME\n   does not exist.  Note: the answer section may have SIG and
      CNAME RRs\n   and the authority section may have SOA, NXT [RFC2065] and SIG
      RRsets.\n   It is possible to distinguish between a referral and a NXDOMAIN\n
      \  response by the presense of NXDOMAIN in the RCODE regardless of the\n   presence
      of NS or SOA records in the authority section.\n   NXDOMAIN responses can be
      categorised into four types by the contents\n   of the authority section.  These
      are shown below along with a\n   referral for comparison.  Fields not mentioned
      are not important in\n   terms of the examples.\n           NXDOMAIN RESPONSE:
      TYPE 1.\n           Header:\n               RDCODE=NXDOMAIN\n           Query:\n
      \              AN.EXAMPLE. A\n           Answer:\n               AN.EXAMPLE.
      CNAME TRIPPLE.XX.\n           Authority:\n               XX. SOA NS1.XX. HOSTMASTER.NS1.XX.
      ....\n               XX. NS NS1.XX.\n               XX. NS NS2.XX.\n           Additional:\n
      \              NS1.XX. A 127.0.0.2\n               NS2.XX. A 127.0.0.3\n           NXDOMAIN
      RESPONSE: TYPE 2.\n           Header:\n               RDCODE=NXDOMAIN\n           Query:\n
      \              AN.EXAMPLE. A\n           Answer:\n               AN.EXAMPLE.
      CNAME TRIPPLE.XX.\n           Authority:\n               XX. SOA NS1.XX. HOSTMASTER.NS1.XX.
      ....\n           Additional:\n               <empty>\n           NXDOMAIN RESPONSE:
      TYPE 3.\n           Header:\n               RDCODE=NXDOMAIN\n           Query:\n
      \              AN.EXAMPLE. A\n           Answer:\n               AN.EXAMPLE.
      CNAME TRIPPLE.XX.\n           Authority:\n               <empty>\n           Additional:\n
      \              <empty>\n           NXDOMAIN RESPONSE: TYPE 4\n           Header:\n
      \              RDCODE=NXDOMAIN\n           Query:\n               AN.EXAMPLE.
      A\n           Answer:\n               AN.EXAMPLE. CNAME TRIPPLE.XX.\n           Authority:\n
      \              XX. NS NS1.XX.\n               XX. NS NS2.XX.\n           Additional:\n
      \              NS1.XX. A 127.0.0.2\n               NS2.XX. A 127.0.0.3\n           REFERRAL
      RESPONSE.\n           Header:\n               RDCODE=NOERROR\n           Query:\n
      \              AN.EXAMPLE. A\n           Answer:\n               AN.EXAMPLE.
      CNAME TRIPPLE.XX.\n           Authority:\n               XX. NS NS1.XX.\n               XX.
      NS NS2.XX.\n           Additional:\n               NS1.XX. A 127.0.0.2\n               NS2.XX.
      A 127.0.0.3\n   Note, in the four examples of NXDOMAIN responses, it is known
      that\n   the name \"AN.EXAMPLE.\" exists, and has as its value a CNAME record.\n
      \  The NXDOMAIN refers to \"TRIPPLE.XX\", which is then known not to\n   exist.
      \ On the other hand, in the referral example, it is shown that\n   \"AN.EXAMPLE\"
      exists, and has a CNAME RR as its value, but nothing is\n   known one way or
      the other about the existence of \"TRIPPLE.XX\", other\n   than that \"NS1.XX\"
      or \"NS2.XX\" can be consulted as the next step in\n   obtaining information
      about it.\n   Where no CNAME records appear, the NXDOMAIN response refers to
      the\n   name in the label of the RR in the question section.\n"
    - contents:
      - "2.1.1 Special Handling of Name Error\n   This section deals with errors encountered
        when implementing negative\n   caching of NXDOMAIN responses.\n   There are
        a large number of resolvers currently in existence that\n   fail to correctly
        detect and process all forms of NXDOMAIN response.\n   Some resolvers treat
        a TYPE 1 NXDOMAIN response as a referral.  To\n   alleviate this problem it
        is recommended that servers that are\n   authoritative for the NXDOMAIN response
        only send TYPE 2 NXDOMAIN\n   responses, that is the authority section contains
        a SOA record and no\n   NS records.  If a non- authoritative server sends
        a type 1 NXDOMAIN\n   response to one of these old resolvers, the result will
        be an\n   unnecessary query to an authoritative server.  This is undesirable,\n
        \  but not fatal except when the server is being used a FORWARDER.  If\n   however
        the resolver is using the server as a FORWARDER to such a\n   resolver it
        will be necessary to disable the sending of TYPE 1\n   NXDOMAIN response to
        it, use TYPE 2 NXDOMAIN instead.\n   Some resolvers incorrectly continue processing
        if the authoritative\n   answer flag is not set, looping until the query retry
        threshold is\n   exceeded and then returning SERVFAIL.  This is a problem
        when your\n   nameserver is listed as a FORWARDER for such resolvers.  If
        the\n   nameserver is used as a FORWARDER by such resolver, the authority\n
        \  flag will have to be forced on for NXDOMAIN responses to these\n   resolvers.
        \ In practice this causes no problems even if turned on\n   always, and has
        been the default behaviour in BIND from 4.9.3\n   onwards.\n"
      title: 2.1.1 Special Handling of Name Error
    title: 2.1 - Name Error
  - contents:
    - "2.2 - No Data\n   NODATA is indicated by an answer with the RCODE set to NOERROR
      and no\n   relevant answers in the answer section.  The authority section will\n
      \  contain an SOA record, or there will be no NS records there.\n   NODATA responses
      have to be algorithmically determined from the\n   response's contents as there
      is no RCODE value to indicate NODATA.\n   In some cases to determine with certainty
      that NODATA is the correct\n   response it can be necessary to send another
      query.\n   The authority section may contain NXT and SIG RRsets in addition
      to\n   NS and SOA records.  CNAME and SIG records may exist in the answer\n
      \  section.\n   It is possible to distinguish between a NODATA and a referral\n
      \  response by the presence of a SOA record in the authority section or\n   the
      absence of NS records in the authority section.\n   NODATA responses can be
      categorised into three types by the contents\n   of the authority section.  These
      are shown below along with a\n   referral for comparison.  Fields not mentioned
      are not important in\n   terms of the examples.\n           NODATA RESPONSE:
      TYPE 1.\n           Header:\n               RDCODE=NOERROR\n           Query:\n
      \              ANOTHER.EXAMPLE. A\n           Answer:\n               <empty>\n
      \          Authority:\n               EXAMPLE. SOA NS1.XX. HOSTMASTER.NS1.XX.
      ....\n               EXAMPLE. NS NS1.XX.\n               EXAMPLE. NS NS2.XX.\n
      \          Additional:\n               NS1.XX. A 127.0.0.2\n               NS2.XX.
      A 127.0.0.3\n           NO DATA RESPONSE: TYPE 2.\n           Header:\n               RDCODE=NOERROR\n
      \          Query:\n               ANOTHER.EXAMPLE. A\n           Answer:\n               <empty>\n
      \          Authority:\n               EXAMPLE. SOA NS1.XX. HOSTMASTER.NS1.XX.
      ....\n           Additional:\n               <empty>\n           NO DATA RESPONSE:
      TYPE 3.\n           Header:\n               RDCODE=NOERROR\n           Query:\n
      \              ANOTHER.EXAMPLE. A\n           Answer:\n               <empty>\n
      \          Authority:\n               <empty>\n           Additional:\n               <empty>\n
      \          REFERRAL RESPONSE.\n           Header:\n               RDCODE=NOERROR\n
      \          Query:\n               ANOTHER.EXAMPLE. A\n           Answer:\n               <empty>\n
      \          Authority:\n               EXAMPLE. NS NS1.XX.\n               EXAMPLE.
      NS NS2.XX.\n           Additional:\n               NS1.XX. A 127.0.0.2\n               NS2.XX.
      A 127.0.0.3\n   These examples, unlike the NXDOMAIN examples above, have no
      CNAME\n   records, however they could, in just the same way that the NXDOMAIN\n
      \  examples did, in which case it would be the value of the last CNAME\n   (the
      QNAME) for which NODATA would be concluded.\n"
    - contents:
      - "2.2.1 - Special Handling of No Data\n   There are a large number of resolvers
        currently in existence that\n   fail to correctly detect and process all forms
        of NODATA response.\n   Some resolvers treat a TYPE 1 NODATA response as a
        referral.  To\n   alleviate this problem it is recommended that servers that
        are\n   authoritative for the NODATA response only send TYPE 2 NODATA\n   responses,
        that is the authority section contains a SOA record and no\n   NS records.
        \ Sending a TYPE 1 NODATA response from a non-\n   authoritative server to
        one of these resolvers will only result in an\n   unnecessary query.  If a
        server is listed as a FORWARDER for another\n   resolver it may also be necessary
        to disable the sending of TYPE 1\n   NODATA response for non-authoritative
        NODATA responses.\n   Some name servers fail to set the RCODE to NXDOMAIN
        in the presence\n   of CNAMEs in the answer section.  If a definitive NXDOMAIN
        / NODATA\n   answer is required in this case the resolver must query again
        using\n   the QNAME as the query label.\n"
      title: 2.2.1 - Special Handling of No Data
    title: 2.2 - No Data
  title: 2 - Negative Responses
- contents:
  - "3 - Negative Answers from Authoritative Servers\n   Name servers authoritative
    for a zone MUST include the SOA record of\n   the zone in the authority section
    of the response when reporting an\n   NXDOMAIN or indicating that no data of the
    requested type exists.\n   This is required so that the response may be cached.
    \ The TTL of this\n   record is set from the minimum of the MINIMUM field of the
    SOA record\n   and the TTL of the SOA itself, and indicates how long a resolver
    may\n   cache the negative answer.  The TTL SIG record associated with the\n   SOA
    record should also be trimmed in line with the SOA's TTL.\n   If the containing
    zone is signed [RFC2065] the SOA and appropriate\n   NXT and SIG records MUST
    be added.\n"
  title: 3 - Negative Answers from Authoritative Servers
- contents:
  - "4 - SOA Minimum Field\n   The SOA minimum field has been overloaded in the past
    to have three\n   different meanings, the minimum TTL value of all RRs in a zone,
    the\n   default TTL of RRs which did not contain a TTL value and the TTL of\n
    \  negative responses.\n   Despite being the original defined meaning, the first
    of these, the\n   minimum TTL value of all RRs in a zone, has never in practice
    been\n   used and is hereby deprecated.\n   The second, the default TTL of RRs
    which contain no explicit TTL in\n   the master zone file, is relevant only at
    the primary server.  After\n   a zone transfer all RRs have explicit TTLs and
    it is impossible to\n   determine whether the TTL for a record was explicitly
    set or derived\n   from the default after a zone transfer.  Where a server does
    not\n   require RRs to include the TTL value explicitly, it should provide a\n
    \  mechanism, not being the value of the MINIMUM field of the SOA\n   record,
    from which the missing TTL values are obtained.  How this is\n   done is implementation
    dependent.\n   The Master File format [RFC 1035 Section 5] is extended to include\n
    \  the following directive:\n                           $TTL <TTL> [comment]\n
    \  All resource records appearing after the directive, and which do not\n   explicitly
    include a TTL value, have their TTL set to the TTL given\n   in the $TTL directive.
    \ SIG records without a explicit TTL get their\n   TTL from the \"original TTL\"
    of the SIG record [RFC 2065 Section 4.5].\n   The remaining of the current meanings,
    of being the TTL to be used\n   for negative responses, is the new defined meaning
    of the SOA minimum\n   field.\n"
  title: 4 - SOA Minimum Field
- contents:
  - "5 - Caching Negative Answers\n   Like normal answers negative answers have a
    time to live (TTL).  As\n   there is no record in the answer section to which
    this TTL can be\n   applied, the TTL must be carried by another method.  This
    is done by\n   including the SOA record from the zone in the authority section
    of\n   the reply.  When the authoritative server creates this record its TTL\n
    \  is taken from the minimum of the SOA.MINIMUM field and SOA's TTL.\n   This
    TTL decrements in a similar manner to a normal cached answer and\n   upon reaching
    zero (0) indicates the cached negative answer MUST NOT\n   be used again.\n   A
    negative answer that resulted from a name error (NXDOMAIN) should\n   be cached
    such that it can be retrieved and returned in response to\n   another query for
    the same <QNAME, QCLASS> that resulted in the\n   cached negative response.\n
    \  A negative answer that resulted from a no data error (NODATA) should\n   be
    cached such that it can be retrieved and returned in response to\n   another query
    for the same <QNAME, QTYPE, QCLASS> that resulted in\n   the cached negative response.\n
    \  The NXT record, if it exists in the authority section of a negative\n   answer
    received, MUST be stored such that it can be be located and\n   returned with
    SOA record in the authority section, as should any SIG\n   records in the authority
    section.  For NXDOMAIN answers there is no\n   \"necessary\" obvious relationship
    between the NXT records and the\n   QNAME.  The NXT record MUST have the same
    owner name as the query\n   name for NODATA responses.\n   Negative responses
    without SOA records SHOULD NOT be cached as there\n   is no way to prevent the
    negative responses looping forever between a\n   pair of servers even with a short
    TTL.\n   Despite the DNS forming a tree of servers, with various mis-\n   configurations
    it is possible to form a loop in the query graph, e.g.\n   two servers listing
    each other as forwarders, various lame server\n   configurations.  Without a TTL
    count down a cache negative response\n   when received by the next server would
    have its TTL reset.  This\n   negative indication could then live forever circulating
    between the\n   servers involved.\n   As with caching positive responses it is
    sensible for a resolver to\n   limit for how long it will cache a negative response
    as the protocol\n   supports caching for up to 68 years.  Such a limit should
    not be\n   greater than that applied to positive answers and preferably be\n   tunable.
    \ Values of one to three hours have been found to work well\n   and would make
    sensible a default.  Values exceeding one day have\n   been found to be problematic.\n"
  title: 5 - Caching Negative Answers
- contents:
  - "6 - Negative answers from the cache\n   When a server, in answering a query,
    encounters a cached negative\n   response it MUST add the cached SOA record to
    the authority section\n   of the response with the TTL decremented by the amount
    of time it was\n   stored in the cache.  This allows the NXDOMAIN / NODATA response
    to\n   time out correctly.\n   If a NXT record was cached along with SOA record
    it MUST be added to\n   the authority section.  If a SIG record was cached along
    with a NXT\n   record it SHOULD be added to the authority section.\n   As with
    all answers coming from the cache, negative answers SHOULD\n   have an implicit
    referral built into the answer.  This enables the\n   resolver to locate an authoritative
    source.  An implicit referral is\n   characterised by NS records in the authority
    section referring the\n   resolver towards a authoritative source.  NXDOMAIN types
    1 and 4\n   responses contain implicit referrals as does NODATA type 1 response.\n"
  title: 6 - Negative answers from the cache
- contents:
  - "7 - Other Negative Responses\n   Caching of other negative responses is not covered
    by any existing\n   RFC.  There is no way to indicate a desired TTL in these responses.\n
    \  Care needs to be taken to ensure that there are not forwarding loops.\n"
  - contents:
    - "7.1 Server Failure (OPTIONAL)\n   Server failures fall into two major classes.
      \ The first is where a\n   server can determine that it has been misconfigured
      for a zone.  This\n   may be where it has been listed as a server, but not configured
      to be\n   a server for the zone, or where it has been configured to be a server\n
      \  for the zone, but cannot obtain the zone data for some reason.  This\n   can
      occur either because the zone file does not exist or contains\n   errors, or
      because another server from which the zone should have\n   been available either
      did not respond or was unable or unwilling to\n   supply the zone.\n   The second
      class is where the server needs to obtain an answer from\n   elsewhere, but
      is unable to do so, due to network failures, other\n   servers that don't reply,
      or return server failure errors, or\n   similar.\n   In either case a resolver
      MAY cache a server failure response.  If it\n   does so it MUST NOT cache it
      for longer than five (5) minutes, and it\n   MUST be cached against the specific
      query tuple <query name, type,\n   class, server IP address>.\n"
    title: 7.1 Server Failure (OPTIONAL)
  - contents:
    - "7.2 Dead / Unreachable Server (OPTIONAL)\n   Dead / Unreachable servers are
      servers that fail to respond in any\n   way to a query or where the transport
      layer has provided an\n   indication that the server does not exist or is unreachable.
      \ A\n   server may be deemed to be dead or unreachable if it has not\n   responded
      to an outstanding query within 120 seconds.\n   Examples of transport layer
      indications are:\n      ICMP error messages indicating host, net or port unreachable.\n
      \     TCP resets\n      IP stack error messages providing similar indications
      to those above.\n   A server MAY cache a dead server indication.  If it does
      so it MUST\n   NOT be deemed dead for longer than five (5) minutes.  The indication\n
      \  MUST be stored against query tuple <query name, type, class, server\n   IP
      address> unless there was a transport layer indication that the\n   server does
      not exist, in which case it applies to all queries to\n   that specific IP address.\n"
    title: 7.2 Dead / Unreachable Server (OPTIONAL)
  title: 7 - Other Negative Responses
- contents:
  - "8 - Changes from RFC 1034\n   Negative caching in resolvers is no-longer optional,
    if a resolver\n   caches anything it must also cache negative answers.\n   Non-authoritative
    negative answers MAY be cached.\n   The SOA record from the authority section
    MUST be cached.  Name error\n   indications must be cached against the tuple <query
    name, QCLASS>.\n   No data indications must be cached against <query name, QTYPE,\n
    \  QCLASS> tuple.\n   A cached SOA record must be added to the response.  This
    was\n   explicitly not allowed because previously the distinction between a\n
    \  normal cached SOA record, and the SOA cached as a result of a\n   negative
    response was not made, and simply extracting a normal cached\n   SOA and adding
    that to a cached negative response causes problems.\n   The $TTL TTL directive
    was added to the master file format.\n"
  title: 8 - Changes from RFC 1034
- contents:
  - "9 - History of Negative Caching\n   This section presents a potted history of
    negative caching in the DNS\n   and forms no part of the technical specification
    of negative caching.\n   It is interesting to note that the same concepts were
    re-invented in\n   both the CHIVES and BIND servers.\n   The history of the early
    CHIVES work (Section 9.1) was supplied by\n   Rob Austein <sra@epilogue.com> and
    is reproduced here in the form in\n   which he supplied it [MPA].\n   Sometime
    around the spring of 1985, I mentioned to Paul Mockapetris\n   that our experience
    with his JEEVES DNS resolver had pointed out the\n   need for some kind of negative
    caching scheme.  Paul suggested that\n   we simply cache authoritative errors,
    using the SOA MINIMUM value for\n   the zone that would have contained the target
    RRs.  I'm pretty sure\n   that this conversation took place before RFC-973 was
    written, but it\n   was never clear to me whether this idea was something that
    Paul came\n   up with on the spot in response to my question or something he'd\n
    \  already been planning to put into the document that became RFC-973.\n   In
    any case, neither of us was entirely sure that the SOA MINIMUM\n   value was really
    the right metric to use, but it was available and\n   was under the control of
    the administrator of the target zone, both\n   of which seemed to us at the time
    to be important feature.\n   Late in 1987, I released the initial beta-test version
    of CHIVES, the\n   DNS resolver I'd written to replace Paul's JEEVES resolver.
    \ CHIVES\n   included a search path mechanism that was used pretty heavily at\n
    \  several sites (including my own), so CHIVES also included a negative\n   caching
    mechanism based on SOA MINIMUM values.  The basic strategy\n   was to cache authoritative
    error codes keyed by the exact query\n   parameters (QNAME, QCLASS, and QTYPE),
    with a cache TTL equal to the\n   SOA MINIMUM value.  CHIVES did not attempt to
    track down SOA RRs if\n   they weren't supplied in the authoritative response,
    so it never\n   managed to completely eliminate the gratuitous DNS error message\n
    \  traffic, but it did help considerably.  Keep in mind that this was\n   happening
    at about the same time as the near-collapse of the ARPANET\n   due to congestion
    caused by exponential growth and the the \"old\"\n   (pre-VJ) TCP retransmission
    algorithm, so negative caching resulted\n   in drasticly better DNS response time
    for our users, mailer daemons,\n   etcetera.\n   As far as I know, CHIVES was
    the first resolver to implement negative\n   caching.  CHIVES was developed during
    the twilight years of TOPS-20,\n   so it never ran on very many machines, but
    the few machines that it\n   did run on were the ones that were too critical to
    shut down quickly\n   no matter how much it cost to keep them running.  So what
    few users\n   we did have tended to drive CHIVES pretty hard.  Several interesting\n
    \  bits of DNS technology resulted from that, but the one that's\n   relevant
    here is the MAXTTL configuration parameter.\n   Experience with JEEVES had already
    shown that RRs often showed up\n   with ridiculously long TTLs (99999999 was particularly
    popular for\n   many years, due to bugs in the code and documentation of several\n
    \  early versions of BIND), and that robust software that blindly\n   believed
    such TTLs could create so many strange failures that it was\n   often necessary
    to reboot the resolver frequently just to clear this\n   garbage out of the cache.
    \ So CHIVES had a configuration parameter\n   \"MAXTTL\", which specified the
    maximum \"reasonable\" TTL in a received\n   RR.  RRs with TTLs greater than MAXTTL
    would either have their TTLs\n   reduced to MAXTTL or would be discarded entirely,
    depending on the\n   setting of another configuration parameter.\n   When we started
    getting field experience with CHIVES's negative\n   caching code, it became clear
    that the SOA MINIMUM value was often\n   large enough to cause the same kinds
    of problems for negative caching\n   as the huge TTLs in RRs had for normal caching
    (again, this was in\n   part due to a bug in several early versions of BIND, where
    a\n   secondary server would authoritatively deny all knowledge of its\n   zones
    if it couldn't contact the primaries on reboot).  So we started\n   running the
    negative cache TTLs through the MAXTTL check too, and\n   continued to experiment.\n
    \  The configuration that seemed to work best on WSMR-SIMTEL20.ARMY.MIL\n   (last
    of the major Internet TOPS-20 machines to be shut down, thus\n   the last major
    user of CHIVES, thus the place where we had the\n   longest experimental baseline)
    was to set MAXTTL to about three days.\n   Most of the traffic initiated by SIMTEL20
    in its last years was\n   mail-related, and the mail queue timeout was set to
    one week, so this\n   gave a \"stuck\" message several tries at complete DNS resolution,\n
    \  without bogging down the system with a lot of useless queries.  Since\n   (for
    reasons that now escape me) we only had the single MAXTTL\n   parameter rather
    than separate ones for positive and negative\n   caching, it's not clear how much
    effect this setting of MAXTTL had on\n   the negative caching code.\n   CHIVES
    also included a second, somewhat controversial mechanism which\n   took the place
    of negative caching in some cases.  The CHIVES\n   resolver daemon could be configured
    to load DNS master files, giving\n   it the ability to act as what today would
    be called a \"stealth\n   secondary\".  That is, when configured in this way,
    the resolver had\n   direct access to authoritative information for heavily-used
    zones.\n   The search path mechanisms in CHIVES reflected this: there were\n   actually
    two separate search paths, one of which only searched local\n   authoritative
    zone data, and one which could generate normal\n   iterative queries.  This cut
    down on the need for negative caching in\n   cases where usage was predictably
    heavy (e.g., the resolver on\n   XX.LCS.MIT.EDU always loaded the zone files for
    both LCS.MIT.EDU and\n   AI.MIT.EDU and put both of these suffixes into the \"local\"
    search\n   path, since between them the hosts in these two zones accounted for\n
    \  the bulk of the DNS traffic).  Not all sites running CHIVES chose to\n   use
    this feature; C.CS.CMU.EDU, for example, chose to use the\n   \"remote\" search
    path for everything because there were too many\n   different sub-zones at CMU
    for zone shadowing to be practical for\n   them, so they relied pretty heavily
    on negative caching even for\n   local traffic.\n   Overall, I still think the
    basic design we used for negative caching\n   was pretty reasonable: the zone
    administrator specified how long to\n   cache negative answers, and the resolver
    configuration chose the\n   actual cache time from the range between zero and
    the period\n   specified by the zone administrator.  There are a lot of details
    I'd\n   do differently now (like using a new SOA field instead of overloading\n
    \  the MINIMUM field), but after more than a decade, I'd be more worried\n   if
    we couldn't think of at least a few improvements.\n"
  - contents:
    - "9.2 BIND\n   While not the first attempt to get negative caching into BIND,
      in\n   July 1993, BIND 4.9.2 ALPHA, Anant Kumar of ISI supplied code that\n
      \  implemented, validation and negative caching (NCACHE).  This code had\n   a
      10 minute TTL for negative caching and only cached the indication\n   that there
      was a negative response, NXDOMAIN or NOERROR_NODATA. This\n   is the origin
      of the NODATA pseudo response code mentioned above.\n   Mark Andrews of CSIRO
      added code (RETURNSOA) that stored the SOA\n   record such that it could be
      retrieved by a similar query.  UUnet\n   complained that they were getting old
      answers after loading a new\n   zone, and the option was turned off, BIND 4.9.3-alpha5,
      April 1994.\n   In reality this indicated that the named needed to purge the
      space\n   the zone would occupy.  Functionality to do this was added in BIND\n
      \  4.9.3 BETA11 patch2, December 1994.\n   RETURNSOA was re-enabled by default,
      BIND 4.9.5-T1A, August 1996.\n"
    title: 9.2 BIND
  title: 9 - History of Negative Caching
- contents:
  - "10 Example\n   The following example is based on a signed zone that is empty
    apart\n   from the nameservers.  We will query for WWW.XX.EXAMPLE showing\n   initial
    response and again 10 minutes later.  Note 1: during the\n   intervening 10 minutes
    the NS records for XX.EXAMPLE have expired.\n   Note 2: the TTL of the SIG records
    are not explicitly set in the zone\n   file and are hence the TTL of the RRset
    they are the signature for.\n        Zone File:\n        $TTL 86400\n        $ORIGIN
    XX.EXAMPLE.\n        @       IN      SOA     NS1.XX.EXAMPLE. HOSTMATER.XX.EXAMPLE.
    (\n                                1997102000      ; serial\n                                1800
    \   ; refresh (30 mins)\n                                900     ; retry (15 mins)\n
    \                               604800  ; expire (7 days)\n                                1200
    ) ; minimum (20 mins)\n                IN      SIG     SOA ...\n          1200
    \ IN      NXT     NS1.XX.EXAMPLE. A NXT SIG SOA NS KEY\n                IN      SIG
    \    NXT ... XX.EXAMPLE. ...\n           300  IN      NS      NS1.XX.EXAMPLE.\n
    \          300  IN      NS      NS2.XX.EXAMPLE.\n                IN      SIG     NS
    ... XX.EXAMPLE. ...\n                IN      KEY     0x4100 1 1 ...\n                IN
    \     SIG     KEY ... XX.EXAMPLE. ...\n                IN      SIG     KEY ...
    EXAMPLE. ...\n        NS1     IN      A       10.0.0.1\n                IN      SIG
    \    A ... XX.EXAMPLE. ...\n          1200  IN      NXT     NS2.XX.EXAMPLE. A
    NXT SIG\n                IN      SIG     NXT ...\n        NS2     IN      A       10.0.0.2\n
    \               IN      SIG     A ... XX.EXAMPLE. ...\n          1200  IN      NXT
    \    XX.EXAMPLE. A NXT SIG\n                IN      SIG     NXT ... XX.EXAMPLE.
    ...\n        Initial Response:\n        Header:\n            RDCODE=NXDOMAIN,
    AA=1, QR=1, TC=0\n        Query:\n            WWW.XX.EXAMPLE. IN A\n        Answer:\n
    \           <empty>\n        Authority:\n            XX.EXAMPLE.      1200 IN
    SOA NS1.XX.EXAMPLE. ...\n            XX.EXAMPLE.      1200 IN SIG SOA ... XX.EXAMPLE.
    ...\n            NS2.XX.EXAMPLE.  1200 IN NXT XX.EXAMPLE. NXT A NXT SIG\n            NS2.XX.EXAMPLE.
    \ 1200 IN SIG NXT ... XX.EXAMPLE. ...\n            XX.EXAMPLE.     86400 IN NS
    \ NS1.XX.EXAMPLE.\n            XX.EXAMPLE.     86400 IN NS  NS2.XX.EXAMPLE.\n
    \           XX.EXAMPLE.     86400 IN SIG NS ... XX.EXAMPLE. ...\n        Additional\n
    \           XX.EXAMPLE.     86400 IN KEY 0x4100 1 1 ...\n            XX.EXAMPLE.
    \    86400 IN SIG KEY ... EXAMPLE. ...\n            NS1.XX.EXAMPLE. 86400 IN A
    \  10.0.0.1\n            NS1.XX.EXAMPLE. 86400 IN SIG A ... XX.EXAMPLE. ...\n
    \           NS2.XX.EXAMPLE. 86400 IN A   10.0.0.2\n            NS3.XX.EXAMPLE.
    86400 IN SIG A ... XX.EXAMPLE. ...\n         After 10 Minutes:\n         Header:\n
    \            RDCODE=NXDOMAIN, AA=0, QR=1, TC=0\n         Query:\n             WWW.XX.EXAMPLE.
    IN A\n         Answer:\n             <empty>\n         Authority:\n             XX.EXAMPLE.
    \      600 IN SOA NS1.XX.EXAMPLE. ...\n             XX.EXAMPLE.       600 IN SIG
    SOA ... XX.EXAMPLE. ...\n             NS2.XX.EXAMPLE.   600 IN NXT XX.EXAMPLE.
    NXT A NXT SIG\n             NS2.XX.EXAMPLE.   600 IN SIG NXT ... XX.EXAMPLE. ...\n
    \            EXAMPLE.        65799 IN NS  NS1.YY.EXAMPLE.\n             EXAMPLE.
    \       65799 IN NS  NS2.YY.EXAMPLE.\n             EXAMPLE.        65799 IN SIG
    NS ... XX.EXAMPLE. ...\n         Additional\n             XX.EXAMPLE.     65800
    IN KEY 0x4100 1 1 ...\n             XX.EXAMPLE.     65800 IN SIG KEY ... EXAMPLE.
    ...\n             NS1.YY.EXAMPLE. 65799 IN A   10.100.0.1\n             NS1.YY.EXAMPLE.
    65799 IN SIG A ... EXAMPLE. ...\n             NS2.YY.EXAMPLE. 65799 IN A   10.100.0.2\n
    \            NS3.YY.EXAMPLE. 65799 IN SIG A ... EXAMPLE. ...\n             EXAMPLE.
    \       65799 IN KEY 0x4100 1 1 ...\n             EXAMPLE.        65799 IN SIG
    KEY ... . ...\n"
  title: 10 Example
- contents:
  - "11 Security Considerations\n   It is believed that this document does not introduce
    any significant\n   additional security threats other that those that already
    exist when\n   using data from the DNS.\n   With negative caching it might be
    possible to propagate a denial of\n   service attack by spreading a NXDOMAIN message
    with a very high TTL.\n   Without negative caching that would be much harder.
    \ A similar effect\n   could be achieved previously by spreading a bad A record,
    so that the\n   server could not be reached - which is almost the same.  It has
    the\n   same effect as far as what the end user is able to do, but with a\n   different
    psychological effect.  With the bad A, I feel \"damn the\n   network is broken
    again\" and try again tomorrow.  With the \"NXDOMAIN\"\n   I feel \"Oh, they've
    turned off the server and it doesn't exist any\n   more\" and probably never bother
    trying this server again.\n   A practical example of this is a SMTP server where
    this behaviour is\n   encoded.  With a NXDOMAIN attack the mail message would
    bounce\n   immediately, where as with a bad A attack the mail would be queued\n
    \  and could potentially get through after the attack was suspended.\n   For such
    an attack to be successful, the NXDOMAIN indiction must be\n   injected into a
    parent server (or a busy caching resolver).  One way\n   this might be done by
    the use of a CNAME which results in the parent\n   server querying an attackers
    server.  Resolvers that wish to prevent\n   such attacks can query again the final
    QNAME ignoring any NS data in\n   the query responses it has received for this
    query.\n   Implementing TTL sanity checking will reduce the effectiveness of\n
    \  such an attack, because a successful attack would require re-\n   injection
    of the bogus data at more frequent intervals.\n   DNS Security [RFC2065] provides
    a mechanism to verify whether a\n   negative response is valid or not, through
    the use of NXT and SIG\n   records.  This document supports the use of that mechanism
    by\n   promoting the transmission of the relevant security records even in a\n
    \  non security aware server.\n"
  title: 11 Security Considerations
- contents:
  - "Acknowledgments\n   I would like to thank Rob Austein for his history of the
    CHIVES\n   nameserver. The DNSIND working group, in particular Robert Elz for\n
    \  his valuable technical and editorial contributions to this document.\n"
  title: Acknowledgments
- contents:
  - "References\n   [RFC1034]\n           Mockapetris, P., \"DOMAIN NAMES - CONCEPTS
    AND FACILITIES,\"\n           STD 13, RFC 1034, November 1987.\n   [RFC1035]\n
    \          Mockapetris, P., \"DOMAIN NAMES - IMPLEMENTATION AND\n           SPECIFICATION,\"
    STD 13, RFC 1035, November 1987.\n   [RFC2065]\n           Eastlake, D., and C.
    Kaufman, \"Domain Name System Security\n           Extensions,\" RFC 2065, January
    1997.\n   [RFC2119]\n           Bradner, S., \"Key words for use in RFCs to Indicate\n
    \          Requirement Levels,\" BCP 14, RFC 2119, March 1997.\n   [RFC2181]\n
    \          Elz, R., and R. Bush, \"Clarifications to the DNS\n           Specification,\"
    RFC 2181, July 1997.\n"
  title: References
- contents:
  - "Author's Address\n   Mark Andrews\n   CSIRO - Mathematical and Information Sciences\n
    \  Locked Bag 17\n   North Ryde NSW 2113\n   AUSTRALIA\n   Phone: +61 2 9325 3148\n
    \  EMail: Mark.Andrews@cmis.csiro.au\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
