- contents:
  - '              SNMP MIB Extension for the X.25 Packet Layer

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for
    the Internet\n   community, and requests discussion and suggestions for improvements.\n
    \  Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"
    for the standardization state and status of this protocol.\n   Distribution of
    this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n
    \  for use with network management protocols in TCP/IP-based internets.\n   In
    particular, it defines objects for managing the Packet Layer of\n   X.25.  The
    objects defined here, along with the objects in the \"SNMP\n   MIB Extension for
    LAPB\" [9] and the \"Definitions of Managed Objects\n   for RS-232-like Hardware
    Devices\" [8], combine to allow management of\n   an X.25 protocol stack.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. The Network Management Framework .......................
    \   2\n   2. Objects ................................................    2\n   2.1
    Format of Definitions .................................    3\n   3. Overview ...............................................
    \   3\n   3.1 Informal Overview .....................................    3\n   3.2
    Textual Conventions ...................................    4\n   3.3 Structure
    of MIB ......................................    4\n   3.4 Tables ................................................
    \   5\n   3.5 Table Usage ...........................................    6\n   3.6
    Conformance ...........................................    6\n   4. Object Definitions
    .....................................    7\n   5. Appendix: Revision History .............................
    \  62\n      July 30 1992 ...........................................   62\n      June
    26 1992 ...........................................   62\n      June 1992 ..............................................
    \  63\n      April 1992 .............................................   63\n      February
    1992 ..........................................   65\n      October 1991 ...........................................
    \  65\n      June 1991 ..............................................   66\n      April
    1991 .............................................   66\n   6. Acknowledgements
    .......................................   66\n   7. References .............................................
    \  67\n   8. Security Considerations ................................   68\n   9.
    Author's Address .......................................   69\n"
  title: Table of Contents
- contents:
  - "1.  The Network Management Framework\n   The Internet-standard Network Management
    Framework consists of three\n   components.  These components give the rules for
    defining objects,\n   the definitions of objects, and the protocol for manipulating\n
    \  objects.\n   The network management framework structures objects in an abstract\n
    \  information tree. The branches of the tree name objects and the\n   leaves
    of the tree contain the values manipulated to effect\n   management. This tree
    is called the Management Information Base or\n   MIB. The concepts of this tree
    are given in STD 16/RFC 1155, \"The\n   Structure of Management Information\"
    or SMI [1]. The SMI defines the\n   trunk of the tree and the types of objects
    used when defining the\n   leaves. STD 16/RFC 1212, \"Towards Concise MIB Definitions\"
    [4],\n   defines a more concise description mechanism that preserves all the\n
    \  principals of the SMI.\n   The core MIB definitions for the Internet suite
    of protocols can be\n   found in RFC 1156 [2] \"Management Information Base for
    Network\n   Management of TCP/IP-based internets\". STD 17/RFC 1213 [5] defines\n
    \  MIB-II, an evolution of MIB-I with changes to incorporate\n   implementation
    experience and new operational requirements.\n   STD 15/RFC 1157 [3] defines the
    SNMP protocol itself. The protocol\n   defines how to manipulate the objects in
    a remote MIB.\n   The tree structure of the MIB allows new objects to be defined
    for\n   the purpose of experimentation and evaluation.\n"
  title: 1.  The Network Management Framework
- contents:
  - "2.  Objects\n   The definition of an object in the MIB requires an object name
    and\n   type.  Object names and types are defined using the subset of\n   Abstract
    Syntax Notation One (ASN.1) [6] defined in the SMI [1].\n   Objects are named
    using ASN.1 object identifiers, administratively\n   assigned names, to specify
    object types.  The object name, together\n   with an optional object instance,
    uniquely identifies a specific\n   instance of an object.  For human convenience,
    we often use a textual\n   string, termed the OBJECT DESCRIPTOR, to also refer
    to objects.\n   Objects also have a syntax that defines the abstract data structure\n
    \  corresponding to that object type.  The ASN.1 language [6] provides\n   the
    primitives used for this purpose.  The SMI [1] purposely\n   restricts the ASN.1
    constructs which may be used for simplicity and\n   ease of implementation.  The
    encoding of an object type simply\n   describes how to represent an object using
    ASN.1 encoding rules [7],\n   for purposes of dealing with the SNMP protocol.\n"
  title: 2.  Objects
- contents:
  - "2.1.  Format of Definitions\n   Section 4 contains the specification of all object
    types defined in\n   this MIB module.  The object types are defined using the
    conventions\n   defined in the SMI, as amended by the extensions specified in\n
    \  \"Towards Concise MIB Definitions\" [4].\n"
  title: 2.1.  Format of Definitions
- contents:
  - '3.  Overview

    '
  title: 3.  Overview
- contents:
  - "3.1.  Informal Overview\n   This section describes how the objects defined below
    relate with\n   other MIBs.  This section is only informational to help understand\n
    \  how the pieces fit together.\n   The objects defined below are used in conjunction
    with MIB-II and\n   other MIBs such as the LAPB MIB [9].  A system with a complete
    X.25\n   stack running over a synchronous line will have at least two\n   interfaces
    in the ifTable defined in MIB-II.  There will be an\n   interface for LAPB and
    another interface for the packet layer of\n   X.25. There will also be objects
    defined in the RS-232-like MIB for\n   the physical sync line.\n   Each software
    interface identifies the layer below it used to send\n   and receive packets.
    The X.25 MIB object, defined below,\n   x25OperDataLinkId, specifies an instance
    of lapbAdmnIndex for the\n   LAPB interface under that X.25. The LAPB object,
    lapbOperPortId,\n   identifies an instance of the rs232PortIndex for the the Sync
    line\n   used by LAPB.\n   For X.25 running over LAPB over Ethernet, the lapbOperPortId
    would\n   identify the instance of ifIndex for the Ethernet interface.\n   Each
    X.25 subnetwork will have separate entries in the ifTable.  Thus\n   a system
    with two X.25 lines would have two ifTable entries for the\n   two X.25 packet
    layers and two other entries for the two LAPB\n   interfaces. Each X.25 Packet
    Layer MIB would identify the instance of\n   the LAPB MIB for the interface below
    it. Each LAPB MIB would identify\n   the Sync line below it. The system would
    also have two entries in the\n   rs232PortTable and rs232SyncPortTable for the
    two physical lines.\n   Since the ifTable as defined in MIB-II is device independent,
    it\n   doesn't have anything specific for any type of interface.  The\n   objects
    below define the X.25 packet layer specific information for\n   an interface of
    type X.25. Different X.25 interfaces can also be\n   differentiated by matching
    the values of ifIndex with x25AdmnIndex.\n"
  title: 3.1.  Informal Overview
- contents:
  - "3.2.  Textual Conventions\n   This MIB introduces a new data type as a textual
    convention for use\n   with X.25.  This textual convention enhances the readability
    of the\n   specification and can ease comparison with other specifications if\n
    \  appropriate.  It should be noted that the introduction of such\n   textual
    conventions has no effect on either the syntax nor the\n   semantics of any managed
    objects.  These conventions are merely an\n   artifact of the explanatory method
    used.  Objects defined in terms of\n   one of these methods are always encoded
    by means of the rules that\n   define the primitive type.  Hence, no changes to
    the SMI or the SNMP\n   are necessary to accommodate these textual conventions
    which are\n   adopted merely for the convenience of readers and writers in pursuit\n
    \  of the elusive goal of clear, concise, and unambiguous MIB documents.\n   This
    MIB introduces the data type of:\n                       X121Address\n"
  title: 3.2.  Textual Conventions
- contents:
  - "3.3.  Structure of MIB\n   Instances of the objects defined below represent attributes
    of an\n   X.25 Packet Layer interface.  At present these interfaces are\n   identified
    by an ifType object in the Internet-standard MIB-II [5]\n   of:\n                 ddn-x25(4),
    and\n                 rfc887-x25(5).\n   For these interfaces, the value of the
    ifSpecific variable in the\n   MIB-II [5] has the OBJECT IDENTIFIER value:\n                 x25
    \   OBJECT IDENTIFIER ::= { transmission 5 }\n   The objects defined below are
    similar to those defined in a draft ISO\n   document for X.25 management [11].
    Some object definitions also\n   reference the ISO specification for X.25 [10]
    to specify  the section\n   that will give the reader additional information about
    the object.\n   Access to those documents maybe useful (but isn't essential) to\n
    \  understand the names and semantics of some objects.  The similarity\n   of
    these objects with the ISO objects minimizes the instrumentation\n   required
    by those systems that support both OSI and TCP/IP management\n   protocols.\n
    \  Since the objects defined here are extensions to the Internet\n   Standard
    MIB [2] and thus also an extension of the second version,\n   MIB-II [5], the
    objects defined here explicitly do not duplicate\n   objects defined in existing
    standards.  In some instances\n   clarification of how to apply those objects
    has been given.\n   The relationship between an X.25 Packet Layer interface and
    an\n   interface in the context of the Internet-standard MIB [5] is one-to-\n
    \  one. As such, the value of an ifIndex object instance can be directly\n   used
    to identify corresponding instances of the objects defined\n   below.\n"
  title: 3.3.  Structure of MIB
- contents:
  - "3.4.  Tables\n   The objects below form several tables.  These tables are:\n
    \                              x25AdmnTable\n                               x25OperTable\n
    \                              x25StatTable\n                               x25ChannelTable\n
    \                              x25CircuitTable\n                               x25ClearedCircuitTable\n
    \                              x25CallParmTable\n   The x25AdmnTable defines objects
    for the parameters of an X.25\n   interface which the administrator can read and
    set.  These objects\n   are used at interface initialization time to start the
    interface.\n   Once the interface has started, changes to the objects in the\n
    \  Administration table may not take affect until the interface is re-\n   initialized.\n
    \  The x25OperTable defines objects that report the current parameters\n   used
    by a running interface.  These objects are read-only.\n   The x25StatTable defines
    objects that report operational statistics\n   for an X.25 interface.  These are
    read-only counters of events that\n   occurred at the interface.\n   The x25ChannelTable
    defines objects to allow the administrator to\n   manage the division of channel
    numbers.\n   The x25CircuitTable defines objects that return information about\n
    \  existing X.25 circuits.  These entries result from calls placed or\n   answered
    by the PLE or from PVCs.\n   The x25ClearedCircuitTable contains objects for recording
    the\n   termination information from circuits that cleared abnormally.\n   The
    x25CallParmTable defines the call parameters used to call other\n   systems.  This
    table contains call parameter entries which are\n   referenced by other tables.
    \ For example, the x25AdmnTable has one\n   object that identifies the entry in
    the table for the default PLE\n   parameters.  The x25CircuitTable has one object
    that identifies the\n   entry in the x25CallParmTable for the parameters in use
    by that\n   circuit.  Other MIBs may also reference entries to identify call\n
    \  parameters to use to make X.25 calls.\n"
  title: 3.4.  Tables
- contents:
  - "3.5.  Table Usage\n   Different tables provide different functions.  The administrator
    sets\n   the starting X.25 parameters in the x25AdmnTable for the X.25 PLE;\n
    \  these objects include a reference to the x25CallParmTable entry to\n   identify
    the default call parameters for the PLE.  Once all the\n   parameters are set,
    the administrator initializes the interface.  As\n   part of initializing the
    interface, the operating parameters are\n   copied into the interface from the
    x25AdmnTable; these parameters are\n   viewable by getting the objects in the
    x25OperTable.  (The interface\n   maybe started by setting the value of ifAdminStatus
    to up.)  If any\n   PVCs are configured, their parameters can be set in the the\n
    \  x25CircuitTable before initializing the interface; this should be\n   done
    in conjunction with configuring higher layer entities to use the\n   PVCs via
    the MIBs for those entities.\n   Once the PLE completes initialization, it makes
    additional entries in\n   the x25circuitTable for calls placed or answered.  When
    a circuit is\n   cleared, the status of the entry for the circuit is set to closed\n
    \  and, if the clear is abnormal, an entry will also be made in the\n   x25ClearedCircuitTable.
    \ An entry in the x25CircuitTable with a\n   status of closed maybe deleted by
    the agent at its convenience.  A\n   closed entry will always be reused at the
    time the PLE re-allocates\n   the channel number of the entry for another call.
    \ The call\n   parameters used for a circuit can be found by looking in the\n
    \  x25CircuitTable and following the x25CircuitCallParamId pointer to\n   the
    entry in the x25CallParmTable that contains the parameters.\n   There are no mechanisms
    in the X.25 MIB for telling the PLE to place\n   an X.25 call. Such mechanisms
    belong in the MIBs for the higher layer\n   entities that use the X.25 circuits.\n"
  title: 3.5.  Table Usage
- contents:
  - "3.6.  Conformance\n   All the objects defined here are mandatory. To claim conformance
    with\n   this MIB an implementation must support all objects.  However some\n
    \  objects pertain to features that are optional.  There are values\n   defined
    for those objects that indicate the implementation does not\n   support the optional
    feature.  The agent for such an implementation\n   must support reading the object
    and return the value that indicates\n   the optional feature isn't supported and
    reject set requests to\n   change the object.\n   Some optional features have
    more than one object that pertain to it\n   (window rotation has a timer, a count,
    and a counter for timer\n   runouts).  In such case, any object which indicates
    the optional\n   feature isn't supported is sufficient to indicate the feature
    isn't\n   supported and the values of the other objects relative to that\n   feature
    are undefined.\n"
  title: 3.6.  Conformance
- contents:
  - "4.  Object Definitions\n          RFC1382-MIB DEFINITIONS ::= BEGIN\n          IMPORTS\n
    \                 Counter, Gauge, TimeTicks\n                          FROM RFC1155-SMI\n
    \                 OBJECT-TYPE\n                          FROM RFC-1212\n                  DisplayString,
    transmission\n                          FROM RFC1213-MIB\n                  TRAP-TYPE\n
    \                         FROM RFC-1215\n                  EntryStatus\n                          FROM
    RFC1271-MIB\n                  PositiveInteger,\n                  IfIndexType\n
    \                         FROM RFC1381-MIB;\n          x25     OBJECT IDENTIFIER
    ::= { transmission 5 }\n          -- Support of the X25 subtree and all subtrees
    under it\n          -- is mandatory for all agents of system that implement X.25.\n
    \         X121Address ::= OCTET STRING (SIZE(0..17))\n           -- 0 to 17 bytes
    in length containing the ASCII\n           -- characters [0-9], each octet contains
    one digit\n           -- of the address.\n          -- ###########################################################\n
    \         --            X.25 Administration Table\n          -- ###########################################################\n
    \         x25AdmnTable OBJECT-TYPE\n                  SYNTAX  SEQUENCE OF X25AdmnEntry\n
    \                 ACCESS  not-accessible\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"This table contains
    the administratively\n                          set configuration parameters for
    an X.25\n                          Packet Level Entity (PLE).\n                         Most
    of the objects in this table have\n                          corresponding objects
    in the x25OperTable.\n                          This table contains the values
    as last set\n                          by the administrator.  The x25OperTable\n
    \                         contains the values actually in use by an\n                          X.25
    PLE.\n                          Changing an administrative value may or may\n
    \                         not change a current operating value.  The\n                          operating
    value may not change until the\n                          interface is restarted.
    \ Some\n                          implementations may change the values\n                          immediately
    upon changing the administrative\n                          table.  All implementations
    are required to\n                          load the values from the administrative\n
    \                         table when initializing a PLE.\"\n                  ::=
    { x25 1 }\n          x25AdmnEntry OBJECT-TYPE\n                  SYNTAX  X25AdmnEntry\n
    \                 ACCESS  not-accessible\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"Entries of x25AdmnTable.\"\n
    \                 INDEX { x25AdmnIndex }\n                  ::= { x25AdmnTable
    1 }\n          X25AdmnEntry ::= SEQUENCE {\n                  x25AdmnIndex\n                          IfIndexType,\n
    \                 x25AdmnInterfaceMode\n                          INTEGER,\n                  x25AdmnMaxActiveCircuits\n
    \                         INTEGER,\n                  x25AdmnPacketSequencing\n
    \                         INTEGER,\n                  x25AdmnRestartTimer\n                          PositiveInteger,\n
    \              x25AdmnCallTimer\n                          PositiveInteger,\n
    \                 x25AdmnResetTimer\n                          PositiveInteger,\n
    \                 x25AdmnClearTimer\n                          PositiveInteger,\n
    \                 x25AdmnWindowTimer\n                          PositiveInteger,\n
    \                 x25AdmnDataRxmtTimer\n                          PositiveInteger,\n
    \                 x25AdmnInterruptTimer\n                          PositiveInteger,\n
    \                 x25AdmnRejectTimer\n                          PositiveInteger,\n
    \                 x25AdmnRegistrationRequestTimer\n                          PositiveInteger,\n
    \                 x25AdmnMinimumRecallTimer\n                          PositiveInteger,\n
    \                 x25AdmnRestartCount\n                          INTEGER,\n                  x25AdmnResetCount\n
    \                         INTEGER,\n                  x25AdmnClearCount\n                          INTEGER,\n
    \                 x25AdmnDataRxmtCount\n                          INTEGER,\n                  x25AdmnRejectCount\n
    \                         INTEGER,\n                  x25AdmnRegistrationRequestCount\n
    \                         INTEGER,\n                  x25AdmnNumberPVCs\n                          INTEGER,\n
    \                 x25AdmnDefCallParamId\n                          OBJECT IDENTIFIER,\n
    \                 x25AdmnLocalAddress\n                          X121Address,\n
    \                 x25AdmnProtocolVersionSupported\n                          OBJECT
    IDENTIFIER\n                  }\n          x25AdmnIndex OBJECT-TYPE\n                  SYNTAX
    \ IfIndexType\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                  \"The ifIndex value for the X.25
    Interface.\"\n                  ::= { x25AdmnEntry 1 }\n          x25AdmnInterfaceMode
    OBJECT-TYPE\n                  SYNTAX  INTEGER {\n                                  dte
    (1),\n                                  dce (2),\n                                  dxe
    (3)\n                          }\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"Identifies
    DCE/DTE mode in which the\n                          interface operates.  A value
    of dxe\n                          indicates the mode will be determined by XID\n
    \                         negotiation.\"\n                  REFERENCE \"10733
    5.9 interfaceMode\"\n                  ::= { x25AdmnEntry 2 }\n          x25AdmnMaxActiveCircuits
    \       OBJECT-TYPE\n                  SYNTAX  INTEGER (0..4096)\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The maximum number of circuits this PLE can\n                          support;
    including PVCs.\"\n                  REFERENCE \"10733 5.9 maxActiveCircuits;\n
    \                         See ISO 8208, Section 3.7\"\n                  ::= {
    x25AdmnEntry 3 }\n          x25AdmnPacketSequencing OBJECT-TYPE\n                  SYNTAX
    \ INTEGER {\n                                  modulo8 (1),\n                                  modulo128
    (2)\n                          }\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The modulus
    of the packet sequence number\n                          space.\"\n                  REFERENCE
    \"10733 extendedPacketSequencing;\n                          See ISO 8208 Section
    7.1.1\"\n                  ::= { x25AdmnEntry 4 }\n          x25AdmnRestartTimer
    OBJECT-TYPE\n               SYNTAX     PositiveInteger\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The T20 restart timer in milliseconds.\"\n                  REFERENCE
    \"10733 5.9 restartTime\n                          See ISO 8208 Section 4.1, table
    26\"\n                  ::= { x25AdmnEntry 5 }\n          x25AdmnCallTimer OBJECT-TYPE\n
    \                 SYNTAX  PositiveInteger\n                  ACCESS  read-write\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    T21 Call timer in milliseconds.\"\n                  REFERENCE \"10733 callTime;\n
    \                         See ISO 8208 Section 5.2.1, table 26\"\n                  ::=
    { x25AdmnEntry 6 }\n          x25AdmnResetTimer OBJECT-TYPE\n                  SYNTAX
    \ PositiveInteger\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The T22
    Reset timer in milliseconds.\"\n                  REFERENCE \"10733 resetTime;\n
    \                         See ISO 8208 Section 8.1, table 26\"\n                  ::=
    { x25AdmnEntry 7 }\n          x25AdmnClearTimer OBJECT-TYPE\n                  SYNTAX
    \ PositiveInteger\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The T23
    Clear timer in milliseconds.\"\n                  REFERENCE \"10733 clearTime;\n
    \                         See ISO 8208 Section 5.5.1, table 26\"\n                  ::=
    { x25AdmnEntry 8 }\n          x25AdmnWindowTimer OBJECT-TYPE\n                  SYNTAX
    \ PositiveInteger\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The T24
    window status transmission timer in\n                          milliseconds.  A
    value of 2147483647\n                          indicates no window timer in use.\"\n
    \                 REFERENCE \"10733 5.10.1 windowTime (opt);\n                          See
    ISO 8208 Section 11.2.2, table 26\"\n                  ::= { x25AdmnEntry 9 }\n
    \         x25AdmnDataRxmtTimer OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n
    \                 ACCESS  read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The T25 data retransmission timer in\n                          milliseconds.
    \ A value of 2147483647\n                          indicates no data retransmission
    timer in\n                          use.\"\n                  REFERENCE \"10733
    5.10.1 dataRetransmissionTime (opt);\n                          See ISO 8208 Section
    11.2.1, table 26\"\n                  ::= { x25AdmnEntry 10 }\n          x25AdmnInterruptTimer
    OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The T26 interrupt timer in milliseconds.  A\n                          value
    of 2147483647 indicates no interrupt\n                          timer in use.\"\n
    \                 REFERENCE \"10733 interruptTime;\n                          See
    ISO 8208 Section 6.8.1, table 26\"\n                  ::= { x25AdmnEntry 11 }\n
    \         x25AdmnRejectTimer OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n
    \                 ACCESS  read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The T27 Reject retransmission timer in\n                          milliseconds.
    \ A value of 2147483647\n                          indicates no reject timer in
    use.\"\n                  REFERENCE \"10733 5.10.1 dataRejectTime (opt);\n                          See
    ISO 8208 Section 13.4.1, table 26\"\n                  ::= { x25AdmnEntry 12 }\n
    \         x25AdmnRegistrationRequestTimer OBJECT-TYPE\n                  SYNTAX
    \ PositiveInteger\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The T28
    registration timer in milliseconds.\n                          A value of 2147483647
    indicates no\n                          registration timer in use.\"\n                  REFERENCE
    \"10733 5.8.1 registrationRequestTime (opt)\n                          See ISO
    8208    Section 13.1.1.1, table 26\"\n                  ::= { x25AdmnEntry 13
    }\n          x25AdmnMinimumRecallTimer OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n
    \                 ACCESS  read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"Minimum time interval between unsuccessful\n                          call
    attempts in milliseconds.\"\n                  REFERENCE \"10733 5.9 minimum RecallTimer\"\n
    \                 ::= { x25AdmnEntry 14 }\n          x25AdmnRestartCount OBJECT-TYPE\n
    \                 SYNTAX  INTEGER (0..65535)\n                  ACCESS  read-write\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    R20 restart retransmission count.\"\n                  REFERENCE \"10733 5.9 restartCount;\n
    \                         See ISO 8208    Section 4.1, table 27\"\n                  ::=
    { x25AdmnEntry 15 }\n          x25AdmnResetCount OBJECT-TYPE\n                  SYNTAX
    \ INTEGER (0..65535)\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The r22
    Reset retransmission count.\"\n                  REFERENCE \"10733 resetCount;\n
    \                         See section ISO 8208 8.1, table 27\"\n                  ::=
    { x25AdmnEntry 16 }\n          x25AdmnClearCount OBJECT-TYPE\n                  SYNTAX
    \ INTEGER (0..65535)\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                  \"The r23 Clear
    retransmission count.\"\n                  REFERENCE \"10733 clearCount;\n                          See
    ISO 8208 Section 5.5.1, table 27\"\n                  ::= { x25AdmnEntry 17 }\n
    \         x25AdmnDataRxmtCount OBJECT-TYPE\n                  SYNTAX  INTEGER
    (0..65535)\n                  ACCESS  read-write\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The R25 Data retransmission
    count.  This\n                          value is irrelevant if the\n                          x25AdmnDataRxmtTimer
    indicates no timer in\n                          use.\"\n                  REFERENCE
    \"10733 5.10.1 dataRetransmissionCount (opt)\n                          See ISO
    8208 Section 11.2.1, table 27\"\n                  ::= { x25AdmnEntry 18 }\n          x25AdmnRejectCount
    OBJECT-TYPE\n                  SYNTAX  INTEGER (0..65535)\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The R27 reject retransmission count.  This\n                          value
    is irrelevant if the\n                          x25AdmnRejectTimer indicates no
    timer in\n                          use.\"\n                  REFERENCE \"10733
    5.10.1 dataRejectCount (opt)\"\n                  ::= { x25AdmnEntry 19 }\n          x25AdmnRegistrationRequestCount
    OBJECT-TYPE\n                  SYNTAX  INTEGER (0..65535)\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The R28 Registration retransmission Count.\n                          This
    value is irrelevant if the\n                          x25AdmnRegistrationRequestTimer
    indicates no\n                          timer in use.\"\n                  REFERENCE
    \"10733 5.8.1 registrationRequestCount (opt);\n                          See ISO
    8208    Section 13.1.1.1, table 27\"\n                  ::= { x25AdmnEntry 20
    }\n          x25AdmnNumberPVCs OBJECT-TYPE\n                  SYNTAX  INTEGER
    (0..4096)\n                  ACCESS  read-write\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The number of PVC configured
    for this PLE.\n                          The PVCs use channel numbers from 1 to
    this\n                          number.\"\n                  ::= { x25AdmnEntry
    21 }\n          x25AdmnDefCallParamId OBJECT-TYPE\n                  SYNTAX  OBJECT
    IDENTIFIER\n                  ACCESS  read-write\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"This identifies the
    instance of the\n                          x25CallParmIndex for the entry in the\n
    \                         x25CallParmTable which contains the default\n                          call
    parameters for this PLE.\"\n                  ::= { x25AdmnEntry 22 }\n          x25AdmnLocalAddress
    OBJECT-TYPE\n                  SYNTAX  X121Address\n                  ACCESS  read-write\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    local address for this PLE subnetwork.\n                          A zero length
    address maybe returned by PLEs\n                          that only support PVCs.\"\n
    \                 REFERENCE \"10733 5.9 localDTEAddress\"\n                  ::=
    { x25AdmnEntry 23 }\n          x25AdmnProtocolVersionSupported OBJECT-TYPE\n                  SYNTAX
    \ OBJECT IDENTIFIER\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"Identifies
    the version of the X.25 protocol\n                          this interface should
    support.  Object\n                          identifiers for common versions are
    defined\n                          below in the x25ProtocolVersion subtree.\"\n
    \                 REFERENCE \"10733 5.9 protocolVersionSupported\"\n                  ::=
    { x25AdmnEntry 24 }\n          -- ###########################################################\n
    \         --            X.25 Operational Table\n          -- ###########################################################\n
    \         x25OperTable OBJECT-TYPE\n                  SYNTAX  SEQUENCE OF X25OperEntry\n
    \                 ACCESS  not-accessible\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The operation parameters
    in use by the X.25\n                          PLE.\"\n                  ::= {
    x25 2 }\n          x25OperEntry OBJECT-TYPE\n                  SYNTAX  X25OperEntry\n
    \                 ACCESS  not-accessible\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"Entries of x25OperTable.\"\n
    \                 INDEX { x25OperIndex }\n                  ::= { x25OperTable
    1 }\n          X25OperEntry ::= SEQUENCE {\n                  x25OperIndex\n                          IfIndexType,\n
    \                 x25OperInterfaceMode\n                          INTEGER,\n                  x25OperMaxActiveCircuits\n
    \                         INTEGER,\n                  x25OperPacketSequencing\n
    \                         INTEGER,\n                  x25OperRestartTimer\n                          PositiveInteger,\n
    \                 x25OperCallTimer\n                          PositiveInteger,\n
    \                 x25OperResetTimer\n                          PositiveInteger,\n
    \                 x25OperClearTimer\n                          PositiveInteger,\n
    \                 x25OperWindowTimer\n                          PositiveInteger,\n
    \                 x25OperDataRxmtTimer\n                          PositiveInteger,\n
    \                 x25OperInterruptTimer\n                          PositiveInteger,\n
    \                 x25OperRejectTimer\n                          PositiveInteger,\n
    \              x25OperRegistrationRequestTimer\n                          PositiveInteger,\n
    \                 x25OperMinimumRecallTimer\n                          PositiveInteger,\n
    \                 x25OperRestartCount\n                          INTEGER,\n                  x25OperResetCount\n
    \                         INTEGER,\n                  x25OperClearCount\n                          INTEGER,\n
    \                 x25OperDataRxmtCount\n                          INTEGER,\n                  x25OperRejectCount\n
    \                         INTEGER,\n                  x25OperRegistrationRequestCount\n
    \                         INTEGER,\n                  x25OperNumberPVCs\n                          INTEGER,\n
    \                 x25OperDefCallParamId\n                          OBJECT IDENTIFIER,\n
    \                 x25OperLocalAddress\n                          X121Address,\n
    \                 x25OperDataLinkId\n                          OBJECT IDENTIFIER,\n
    \                 x25OperProtocolVersionSupported\n                          OBJECT
    IDENTIFIER\n                  }\n          x25OperIndex OBJECT-TYPE\n                  SYNTAX
    \ IfIndexType\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The ifIndex value for
    the X.25 interface.\"\n                  ::= { x25OperEntry 1 }\n          x25OperInterfaceMode
    OBJECT-TYPE\n                  SYNTAX  INTEGER {\n                                  dte
    (1),\n                                  dce (2),\n                                  dxe
    (3)\n                          }\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                  \"Identifies DCE/DTE
    mode in which the\n                          interface operates.  A value of dxe\n
    \                         indicates the role will be determined by XID\n                          negotiation
    at the Link Layer and that\n                          negotiation has not yet
    taken place.\"\n                  REFERENCE \"10733 5.9 interfaceMode\"\n                  ::=
    { x25OperEntry 2 }\n          x25OperMaxActiveCircuits        OBJECT-TYPE\n                  SYNTAX
    \ INTEGER (0..4096)\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"Maximum
    number of circuits this PLE can\n                          support.\"\n                  REFERENCE
    \"10733 5.9 maxActiveCircuits\n                          See ISO 8208, Section
    3.7\"\n                  ::= { x25OperEntry 3 }\n          x25OperPacketSequencing
    OBJECT-TYPE\n                  SYNTAX  INTEGER {\n                                  modulo8
    (1),\n                                  modulo128 (2)\n                          }\n
    \                 ACCESS  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The modulus of the packet sequence number\n                          space.\"\n
    \                 REFERENCE \"10733 extendedPacketSequencing;\n                          See
    ISO 8208    Section 7.1.1\"\n                  ::= { x25OperEntry 4 }\n          x25OperRestartTimer
    OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The T20 restart timer in milliseconds.\"\n                  REFERENCE
    \"10733 5.9 restartTime;\n                          See ISO 8208    Section 4.1,
    table 26\"\n                  ::= { x25OperEntry 5 }\n          x25OperCallTimer
    OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The T21 Call timer in milliseconds.\"\n                  REFERENCE
    \"10733 callTime;\n                          See ISO 8208 Section 5.2.1, table
    26\"\n                  ::= { x25OperEntry 6 }\n          x25OperResetTimer OBJECT-TYPE\n
    \                 SYNTAX  PositiveInteger\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    T22 Reset timer in milliseconds.\"\n                  REFERENCE \"10733 resetTime;\n
    \                         See ISO 8208    Section 8.1, table 26\"\n                  ::=
    { x25OperEntry 7 }\n          x25OperClearTimer OBJECT-TYPE\n                  SYNTAX
    \ PositiveInteger\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The T23
    Clear timer in milliseconds.\"\n                  REFERENCE \"10733 clearTime;\n
    \                         See ISO 8208 Section 5.5.1, table 26\"\n                  ::=
    { x25OperEntry 8 }\n          x25OperWindowTimer OBJECT-TYPE\n                  SYNTAX
    \ PositiveInteger\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The T24
    window status transmission timer\n                          milliseconds.  A value
    of 2147483647\n                          indicates no window timer in use.\"\n
    \                 REFERENCE \"10733 5.10.1 windowTime (opt);\n                          See
    ISO 8208 Section 11.2.2, table 26\"\n                  ::= { x25OperEntry 9 }\n
    \         x25OperDataRxmtTimer OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n
    \                 ACCESS  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The T25 Data Retransmission timer in\n                          milliseconds.
    \ A value of 2147483647\n                          indicates no data retransmission
    timer in\n                          use.\"\n                  REFERENCE \"10733
    5.10.1 dataRetransmissionTime (opt);\n                          See ISO 8208 Section
    11.2.1, table 26\"\n                  ::= { x25OperEntry 10 }\n          x25OperInterruptTimer
    OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The T26 Interrupt timer in milliseconds.  A\n                          value
    of 2147483647 indicates interrupts are\n                          not being used.\"\n
    \                 REFERENCE \"10733 interruptTime;\n                          See
    ISO 8208 Section 6.8.1, table 26\"\n                  ::= { x25OperEntry 11 }\n
    \         x25OperRejectTimer OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n
    \                 ACCESS  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The T27 Reject retransmission timer in\n                          milliseconds.
    \ A value of 2147483647\n                          indicates no reject timer in
    use.\"\n                  REFERENCE \"10733 5.10.1 dataRejectTime (opt);\n                          See
    ISO 8208 Section 13.4.1, table 26\"\n                  ::= { x25OperEntry 12 }\n
    \         x25OperRegistrationRequestTimer OBJECT-TYPE\n                  SYNTAX
    \ PositiveInteger\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The T28
    registration timer in milliseconds.\n                          A value of 2147483647
    indicates no\n                          registration timer in use.\"\n                  REFERENCE
    \"10733 5.8.1 registrationRequestTime (opt);\n                          See ISO
    8208    Section 13.1.1.1, table 26\"\n                  ::= { x25OperEntry 13
    }\n          x25OperMinimumRecallTimer OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n
    \                 ACCESS  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"Minimum time interval between unsuccessful\n                          call
    attempts in milliseconds.\"\n                  REFERENCE \"10733 5.9 minimum RecallTimer\"\n
    \                 ::= { x25OperEntry 14 }\n          x25OperRestartCount OBJECT-TYPE\n
    \                 SYNTAX  INTEGER (0..65535)\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    R20 restart retransmission count.\"\n                  REFERENCE \"10733 5.9 restartCount\n
    \                         See ISO 8208    Section 4.1, table 27\"\n                  ::=
    { x25OperEntry 15 }\n          x25OperResetCount OBJECT-TYPE\n                  SYNTAX
    \ INTEGER (0..65535)\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The r22
    Reset retransmission count.\"\n                  REFERENCE \"10733 resetCount;\n
    \                         See section ISO 8208 8.1, table 27\"\n                  ::=
    { x25OperEntry 16 }\n          x25OperClearCount OBJECT-TYPE\n                  SYNTAX
    \ INTEGER (0..65535)\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The r23
    Clear retransmission count.\"\n                  REFERENCE \"10733 clearCount;\n
    \                         See ISO 8208 Section 5.5.1, table 27\"\n                  ::=
    { x25OperEntry 17 }\n          x25OperDataRxmtCount OBJECT-TYPE\n                  SYNTAX
    \ INTEGER (0..65535)\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The R25
    Data retransmission count.  This\n                          value is undefined
    if the\n                          x25OperDataRxmtTimer indicates no timer in\n
    \                         use.\"\n                  REFERENCE \"10733 5.10.1 dataRetransmissionCount
    (opt);\n                          See ISO 8208 Section 11.2.1, table 27\"\n                  ::=
    { x25OperEntry 18 }\n          x25OperRejectCount OBJECT-TYPE\n                  SYNTAX
    \ INTEGER (0..65535)\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The R27
    reject retransmission count.  This\n                          value is undefined
    if the x25OperRejectTimer\n                          indicates no timer in use.\"\n
    \                 REFERENCE \"10733 5.10.1 dataRejectCount (opt)\"\n                  ::=
    { x25OperEntry 19 }\n          x25OperRegistrationRequestCount OBJECT-TYPE\n                  SYNTAX
    \ INTEGER (0..65535)\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The R28
    Registration retransmission Count.\n                          This value is undefined
    if the\n                          x25OperREgistrationRequestTimer indicates no\n
    \                         timer in use.\"\n                  REFERENCE \"10733
    5.8.1 registrationRequestCount (opt);\n                          See ISO 8208
    \   Section 13.1.1.1, table 27\"\n                  ::= { x25OperEntry 20 }\n
    \         x25OperNumberPVCs OBJECT-TYPE\n                  SYNTAX  INTEGER (0..4096)\n
    \                 ACCESS  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of PVC configured for this PLE.\n                          The
    PVCs use channel numbers from 1 to this\n                          number.\"\n
    \                 ::= { x25OperEntry 21 }\n          x25OperDefCallParamId OBJECT-TYPE\n
    \                 SYNTAX  OBJECT IDENTIFIER\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"This
    identifies the instance of the\n                          x25CallParmIndex for
    the entry in the\n                          x25CallParmTable that contains the
    default\n                          call parameters for this PLE.\"\n                  ::=
    { x25OperEntry 22 }\n          x25OperLocalAddress OBJECT-TYPE\n                  SYNTAX
    \ X121Address\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The local address for
    this PLE subnetwork.\n                          A zero length address maybe returned
    by PLEs\n                          that only support PVCs.\"\n                  REFERENCE
    \"10733 5.9 localDTEAddress\"\n                  ::= { x25OperEntry 23 }\n          x25OperDataLinkId
    OBJECT-TYPE\n                  SYNTAX  OBJECT IDENTIFIER\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"This identifies the instance of the index\n                          object
    in the first table of the most device\n                          specific MIB
    for the interface used by this\n                          PLE.\"\n                  ::=
    { x25OperEntry 24 }\n          x25OperProtocolVersionSupported OBJECT-TYPE\n                  SYNTAX
    \ OBJECT IDENTIFIER\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"Identifies
    the version of the X.25 protocol\n                          this interface supports.
    \ Object identifiers\n                          for common versions are defined
    below in the\n                          x25ProtocolVersion subtree.\"\n                  REFERENCE
    \"10733 5.9 protocolVersionSupported\"\n                  ::= { x25OperEntry 25
    }\n          --      MIB-II also provides:\n          -- ifDescr:\n          --
    On an X.25 interface this must include sufficient\n          -- information to
    enable the system's administrator\n          -- to determine the appropriate configuration\n
    \         -- information on a system having multiple X.25\n          -- subnetworks.\n
    \         -- ifType: ddn-x25 or rfc877-x25\n          --      an interface of
    type ddn-x25 will use an algorithm to\n          --      translate between X.121
    address and IP addresses.\n          --      An interface of type rfc877-x25 will
    use a\n          --      configuration table to translate between X.121\n          --
    \     addresses and IP addresses.\n          -- ifMtu: the maximum PDU a higher
    layer can pass to X.25 or\n          -- receive from X.25\n          -- ifSpeed:\n
    \         -- This will be the value of the local clock for this line.\n          --
    A value of zero indicates external clocking.\n          -- ifAdminStatus:\n          --
    ifOperStatus\n          -- ifLastChange\n          -- ###########################################################\n
    \         --            X.25 Statistics Table\n          -- ###########################################################\n
    \         x25StatTable OBJECT-TYPE\n                  SYNTAX  SEQUENCE OF X25StatEntry\n
    \                 ACCESS  not-accessible\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"Statistics information
    about this X.25\n                          PLE.\"\n                  ::= { x25
    3 }\n          x25StatEntry OBJECT-TYPE\n                  SYNTAX  X25StatEntry\n
    \                 ACCESS  not-accessible\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                           \"Entries of the x25StatTable.\"\n
    \                          INDEX { x25StatIndex }\n                  ::= { x25StatTable
    1 }\n          X25StatEntry ::= SEQUENCE {\n                  x25StatIndex\n                          IfIndexType,\n
    \                 x25StatInCalls\n                          Counter,\n                  x25StatInCallRefusals\n
    \                         Counter,\n                  x25StatInProviderInitiatedClears\n
    \                         Counter,\n                  x25StatInRemotelyInitiatedResets\n
    \                         Counter,\n                  x25StatInProviderInitiatedResets\n
    \                         Counter,\n                  x25StatInRestarts\n                          Counter,\n
    \                 x25StatInDataPackets\n                          Counter,\n                  x25StatInAccusedOfProtocolErrors\n
    \                         Counter,\n                  x25StatInInterrupts\n                          Counter,\n
    \                 x25StatOutCallAttempts\n                          Counter,\n
    \                 x25StatOutCallFailures\n                          Counter,\n
    \                 x25StatOutInterrupts\n                          Counter,\n                  x25StatOutDataPackets\n
    \                         Counter,\n                  x25StatOutgoingCircuits\n
    \                         Gauge,\n                  x25StatIncomingCircuits\n
    \                         Gauge,\n                  x25StatTwowayCircuits\n                          Gauge,\n
    \                 x25StatRestartTimeouts\n                          Counter,\n
    \                 x25StatCallTimeouts\n                          Counter,\n                  x25StatResetTimeouts\n
    \                         Counter,\n                  x25StatClearTimeouts\n                          Counter,\n
    \                 x25StatDataRxmtTimeouts\n                          Counter,\n
    \                 x25StatInterruptTimeouts\n                          Counter,\n
    \                 x25StatRetryCountExceededs\n                          Counter,\n
    \                 x25StatClearCountExceededs\n                          Counter\n
    \                 }\n          x25StatIndex OBJECT-TYPE\n                  SYNTAX
    \ IfIndexType\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The ifIndex value for
    the X.25 interface.\"\n                  ::= { x25StatEntry 1 }\n          x25StatInCalls
    OBJECT-TYPE\n                  SYNTAX  Counter\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    number of incoming calls received.\"\n                  ::= { x25StatEntry 2 }\n
    \         x25StatInCallRefusals OBJECT-TYPE\n                  SYNTAX  Counter\n
    \                 ACCESS  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of incoming calls refused.  This\n                          includes
    calls refused by the PLE and by\n                          higher layers.  This
    also includes calls\n                          cleared because of restricted fast
    select.\"\n                  ::= { x25StatEntry 3 }\n          x25StatInProviderInitiatedClears
    \       OBJECT-TYPE\n                  SYNTAX  Counter\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of clear requests with a cause\n                          code
    other than DTE initiated.\"\n                          REFERENCE \"10733 providerInitiatedDisconnect\"\n
    \                 ::= { x25StatEntry 4 }\n          x25StatInRemotelyInitiatedResets
    \       OBJECT-TYPE\n                  SYNTAX  Counter\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of reset requests received with\n                          cause
    code DTE initiated.\"\n                  REFERENCE \"10733 remotelyInitiatedResets\"\n
    \                 ::= { x25StatEntry 5 }\n          x25StatInProviderInitiatedResets
    \       OBJECT-TYPE\n                  SYNTAX  Counter\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of reset requests received with\n                          cause
    code other than DTE initiated.\"\n                  REFERENCE \"10733 ProviderInitiatedResets\"\n
    \                 ::= { x25StatEntry 6 }\n          x25StatInRestarts OBJECT-TYPE\n
    \                 SYNTAX  Counter\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The number
    of remotely initiated (including\n                          provider initiated)
    restarts experienced by\n                          the PLE excluding the restart
    associated\n                          with bringing up the PLE interface.  This\n
    \                         only counts restarts received when the PLE\n                          already
    has an established connection with\n                          the remove PLE.\"\n
    \                 REFERENCE \"10733 5.9 remotelyInitiatedRestarts\"\n                  ::=
    { x25StatEntry 7 }\n          x25StatInDataPackets    OBJECT-TYPE\n                  SYNTAX
    \ Counter\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The number of data
    packets received.\"\n                          REFERENCE \"10733 5.9 dataPacketsReceived.\"\n
    \                 ::= { x25StatEntry 8 }\n          x25StatInAccusedOfProtocolErrors
    \       OBJECT-TYPE\n                  SYNTAX  Counter\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of packets received containing a\n                          procedure
    error cause code.  These include\n                          clear, reset, restart,
    or diagnostic\n                          packets.\"\n                  REFERENCE
    \"CD 10733 5.9 accusedOfProtocolError\"\n                  ::= { x25StatEntry
    9 }\n          x25StatInInterrupts OBJECT-TYPE\n                  SYNTAX  Counter\n
    \                 ACCESS  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of interrupt packets received by\n                          the
    PLE or over the PVC/VC.\"\n                  REFERENCE \"10733 interruptPacketsReceived\"\n
    \                 ::= { x25StatEntry 10 }\n          x25StatOutCallAttempts OBJECT-TYPE\n
    \                 SYNTAX  Counter\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The number
    of calls attempted.\"\n                  REFERENCE \"10733 5.9 callAttempts\"\n
    \                 ::= { x25StatEntry 11 }\n          x25StatOutCallFailures OBJECT-TYPE\n
    \                 SYNTAX  Counter\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The number
    of call attempts which failed.\n                          This includes calls
    that were cleared\n                          because of restrictive fast select.\"\n
    \                 ::= { x25StatEntry 12 }\n          x25StatOutInterrupts    OBJECT-TYPE\n
    \                 SYNTAX  Counter\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The number
    of interrupt packets send by the\n                          PLE or over the PVC/VC.\"\n
    \                 REFERENCE \"10733 InterruptPacketsSent\"\n                  ::=
    { x25StatEntry 13 }\n          x25StatOutDataPackets   OBJECT-TYPE\n                  SYNTAX
    \ Counter\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The number of data
    packets sent by this\n                          PLE.\"\n                  REFERENCE
    \"10733 dataPacketSent\"\n                  ::= { x25StatEntry 14 }\n          x25StatOutgoingCircuits
    OBJECT-TYPE\n                  SYNTAX  Gauge\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    number of active outgoing circuits.\n                          This includes call
    requests sent but not yet\n                          confirmed.  This does not
    count PVCs.\"\n                  ::= { x25StatEntry 15 }\n          x25StatIncomingCircuits
    OBJECT-TYPE\n                  SYNTAX  Gauge\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    number of active Incoming Circuits.\n                          This includes call
    indications received but\n                          not yet acknowledged.  This
    does not count\n                          PVCs.\"\n                  ::= { x25StatEntry
    16 }\n          x25StatTwowayCircuits   OBJECT-TYPE\n                  SYNTAX
    \ Gauge\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                  \"The number of active two-way
    Circuits.\n                          This includes call requests sent but not
    yet\n                          confirmed.  This does not count PVCs.\"\n                  ::=
    { x25StatEntry 17 }\n          x25StatRestartTimeouts OBJECT-TYPE\n                  SYNTAX
    \ Counter\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The number of times
    the T20 restart timer\n                          expired.\"\n                  REFERENCE
    \"10733 5.9 restartTimeouts\"\n                  ::= { x25StatEntry 18 }\n          x25StatCallTimeouts
    OBJECT-TYPE\n                  SYNTAX  Counter\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    number of times the T21 call timer\n                          expired.\"\n                  REFERENCE
    \"10733 5.9 callTimeouts\"\n                  ::= { x25StatEntry 19 }\n          x25StatResetTimeouts
    \   OBJECT-TYPE\n                  SYNTAX  Counter\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    number of times the T22 reset timer\n                          expired.\"\n                  REFERENCE
    \"10733 5.9 resetTimeouts\"\n                  ::= { x25StatEntry 20 }\n          x25StatClearTimeouts
    \   OBJECT-TYPE\n                  SYNTAX  Counter\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    number of times the T23 clear timer\n                          expired.\"\n                  REFERENCE
    \"10733 5.9 clearTimeouts\"\n                  ::= { x25StatEntry 21 }\n          x25StatDataRxmtTimeouts
    OBJECT-TYPE\n                  SYNTAX  Counter\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    number of times the T25 data timer\n                          expired.\"\n                  REFERENCE
    \"10733 5.9 dataRetransmissionsTimerExpiries\"\n                  ::= { x25StatEntry
    22 }\n          x25StatInterruptTimeouts        OBJECT-TYPE\n                  SYNTAX
    \ Counter\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The number of times
    the T26 interrupt timer\n                          expired.\"\n                  REFERENCE
    \"10733 5.9 interruptTimerExpires\"\n                  ::= { x25StatEntry 23 }\n
    \         x25StatRetryCountExceededs OBJECT-TYPE\n                  SYNTAX  Counter\n
    \                 ACCESS  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of times a retry counter was\n                          exhausted.\"\n
    \                 REFERENCE \"10733 5.9 retryCountsExceeded\"\n                  ::=
    { x25StatEntry 24 }\n          x25StatClearCountExceededs OBJECT-TYPE\n                  SYNTAX
    \ Counter\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The number of times
    the R23 clear count was\n                          exceeded.\"\n                  REFERENCE
    \"10733 5.9 clearCountsExceeded\"\n                  ::= { x25StatEntry 25 }\n
    \         --      MIB-II also contains:\n          -- ifInOctets: Number of data
    octets delivered to upper\n          -- layer entities.\n          -- ifInUcastPkts:
    Number of packets with a clear M-bit\n          -- delivered to higher layer entities.\n
    \         -- ifDiscards: Number of packets dropped for lack of buffering\n          --
    ifInErrors: Number of packets received containing errors\n            -- REFERENCE
    ProtocolErrorsDetectedLocally\n          -- ifInUnknownProtos: Number of packets
    with unknown circuit\n          -- identifier.\n          -- ifOutOctets: Number
    of data octets delivered by\n          --      X.25 to upper layers.\n          --
    ifOutUcastPkts: Number of packets with a clear M-bit\n          -- received from
    higher layer entities.\n          -- ###########################################################\n
    \         --                    X.25 Channel Table\n          -- ###########################################################\n
    \         x25ChannelTable OBJECT-TYPE\n                  SYNTAX  SEQUENCE OF X25ChannelEntry\n
    \                 ACCESS  not-accessible\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"These objects contain
    information about the\n                          channel number configuration
    in an X.25 PLE.\n                          These values are the configured values.\n
    \                         changes in these values after the interfaces\n                          has
    started may not be reflected in the\n                          operating PLE.\"\n
    \                 REFERENCE \"See ISO 8208, Section 3.7\"\n                  ::=
    { x25 4 }\n          x25ChannelEntry OBJECT-TYPE\n                  SYNTAX  X25ChannelEntry\n
    \                 ACCESS  not-accessible\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"Entries of x25ChannelTable.\"\n
    \                 REFERENCE \"This provides the information available\n                          in
    10733 logicalChannelAssignments.\"\n                  INDEX { x25ChannelIndex
    }\n                  ::= { x25ChannelTable 1    }\n          X25ChannelEntry ::=
    SEQUENCE {\n                  x25ChannelIndex\n                          IfIndexType,\n
    \                 x25ChannelLIC\n                          INTEGER,\n                  x25ChannelHIC\n
    \                         INTEGER,\n                  x25ChannelLTC\n                          INTEGER,\n
    \                 x25ChannelHTC\n                          INTEGER,\n                  x25ChannelLOC\n
    \                         INTEGER,\n                  x25ChannelHOC\n                          INTEGER\n
    \                 }\n          x25ChannelIndex OBJECT-TYPE\n                  SYNTAX
    \ IfIndexType\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The ifIndex value for
    the X.25 Interface.\"\n                  ::= { x25ChannelEntry 1 }\n          x25ChannelLIC
    OBJECT-TYPE\n                  SYNTAX  INTEGER (0..4095)\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"Lowest Incoming channel.\"\n                  ::=
    { x25ChannelEntry 2 }\n          x25ChannelHIC OBJECT-TYPE\n                  SYNTAX
    \ INTEGER (0..4095)\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"Highest
    Incoming channel.  A value of zero\n                          indicates no channels
    in this range.\"\n                  ::= { x25ChannelEntry 3 }\n          x25ChannelLTC
    OBJECT-TYPE\n                  SYNTAX  INTEGER (0..4095)\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"Lowest Two-way channel.\"\n                  ::= {
    x25ChannelEntry 4 }\n          x25ChannelHTC OBJECT-TYPE\n                  SYNTAX
    \ INTEGER (0..4095)\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"Highest
    Two-way channel.  A value of zero\n                          indicates no channels
    in this range.\"\n                  ::= { x25ChannelEntry 5 }\n          x25ChannelLOC
    OBJECT-TYPE\n                  SYNTAX  INTEGER (0..4095)\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"Lowest outgoing channel.\"\n                  ::=
    { x25ChannelEntry 6 }\n          x25ChannelHOC OBJECT-TYPE\n                  SYNTAX
    \ INTEGER (0..4095)\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"Highest
    outgoing channel.  A value of zero\n                          indicates no channels
    in this range.\"\n                  ::= { x25ChannelEntry 7 }\n          -- ###########################################################\n
    \         --          X25 Per Circuits Information Table\n          -- ###########################################################\n
    \         x25CircuitTable OBJECT-TYPE\n                  SYNTAX  SEQUENCE OF X25CircuitEntry\n
    \                 ACCESS  not-accessible\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"These objects contain
    general information\n                          about a specific circuit of an
    X.25 PLE.\"\n                  ::= { x25 5 }\n          x25CircuitEntry OBJECT-TYPE\n
    \                 SYNTAX  X25CircuitEntry\n                  ACCESS  not-accessible\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"Entries
    of x25CircuitTable.\"\n                  INDEX { x25CircuitIndex,\n                          x25CircuitChannel
    }\n                  ::= { x25CircuitTable 1 }\n          X25CircuitEntry ::=
    SEQUENCE {\n                  x25CircuitIndex\n                          IfIndexType,\n
    \                 x25CircuitChannel\n                          INTEGER,\n                  x25CircuitStatus\n
    \                         INTEGER,\n                  x25CircuitEstablishTime\n
    \                         TimeTicks,\n                  x25CircuitDirection\n
    \                         INTEGER,\n                  x25CircuitInOctets\n                          Counter,\n
    \                 x25CircuitInPdus\n                          Counter,\n                  x25CircuitInRemotelyInitiatedResets\n
    \                         Counter,\n                  x25CircuitInProviderInitiatedResets\n
    \                         Counter,\n                  x25CircuitInInterrupts\n
    \                         Counter,\n                  x25CircuitOutOctets\n                          Counter,\n
    \                 x25CircuitOutPdus\n                          Counter,\n                  x25CircuitOutInterrupts\n
    \                         Counter,\n                  x25CircuitDataRetransmissionTimeouts\n
    \                         Counter,\n                  x25CircuitResetTimeouts\n
    \                         Counter,\n                  x25CircuitInterruptTimeouts\n
    \                         Counter,\n                  x25CircuitCallParamId\n
    \                         OBJECT IDENTIFIER,\n                  x25CircuitCalledDteAddress\n
    \                         X121Address,\n                  x25CircuitCallingDteAddress\n
    \                         X121Address,\n                  x25CircuitOriginallyCalledAddress\n
    \                         X121Address,\n                  x25CircuitDescr\n                          DisplayString\n
    \                 }\n          x25CircuitIndex OBJECT-TYPE\n                  SYNTAX
    \ IfIndexType\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The ifIndex value for
    the X.25 Interface.\"\n                  ::= { x25CircuitEntry 1 }\n          x25CircuitChannel
    OBJECT-TYPE\n                  SYNTAX  INTEGER (0..4095)\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The channel number for this circuit.\"\n                  ::=
    { x25CircuitEntry 2 }\n          x25CircuitStatus OBJECT-TYPE\n                  SYNTAX
    \ INTEGER {               -- state table states\n                                  invalid
    (1),\n                                  closed (2),             -- (p1)\n                                  calling
    (3),            -- (p2,p3,p5)\n                                  open (4),               --
    (p4)\n                                  clearing (5),           -- (p6,p7)\n                                  pvc
    (6),\n                                  pvcResetting (7),\n                                  startClear
    (8),         -- Close cmd\n                                  startPvcResetting
    (9),  -- Reset cmd\n                                  other (10)\n                          }\n
    \                 ACCESS  read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"This object reports the current status of\n                          the
    circuit.\n                          An existing instance of this object can only\n
    \                         be set to startClear, startPvcResetting, or\n                          invalid.
    \ An instance with the value calling\n                          or open can only
    be set to startClear and\n                          that action will start clearing
    the circuit.\n                          An instance with the value PVC can only
    be\n                          set to startPvcResetting or invalid and that\n                          action
    resets the PVC or deletes the circuit\n                          respectively.
    \ The values startClear or\n                          startPvcResetting will never
    be returned by\n                          an agent.  An attempt to set the status
    of\n                          an existing instance to a value other than\n                          one
    of these values will result in an error.\n                          A non-existing
    instance can be set to PVC to\n                          create a PVC if the implementation
    supports\n                          dynamic creation of PVCs.  Some\n                          implementations
    may only allow creation and\n                          deletion of PVCs if the
    interface is down.\n                          Since the instance identifier will
    supply\n                          the PLE index and the channel number,\n                          setting
    this object alone supplies\n                          sufficient information to
    create the\n                          instance.  All the DEFVAL clauses for the\n
    \                         other objects of this table are appropriate\n                          for
    creating a PVC; PLEs creating entries\n                          for placed or
    accepted calls will use values\n                          appropriate for the
    call rather than the\n                          value of the DEFVAL clause.  Two
    managers\n                          trying to create the same PVC can determine\n
    \                         from the return code which manager succeeded\n                          and
    which failed (the failing manager fails\n                          because it
    can not set a value of PVC for an\n                          existing object).\n
    \                         An entry in the closed or invalid state may\n                          be
    deleted or reused at the agent's\n                          convence.  If the
    entry is kept in the\n                          closed state, the values of the
    parameters\n                          associated with the entry must be correct.\n
    \                         Closed implies the values in the circuit\n                          table
    are correct.\n                          The value of invalid indicates the other\n
    \                         values in the table are invalid.  Many\n                          agents
    may never return a value of invalid\n                          because they dynamically
    allocate and free\n                          unused table entries.  An agent for
    a\n                          statically configured systems can return\n                          invalid
    to indicate the entry has not yet\n                          been used so the
    counters contain no\n                          information.\"\n                  REFERENCE
    \"See ISO 8208,\n                                  table 33 for (p<n>) state table\"\n
    \                 ::= { x25CircuitEntry 3 }\n          x25CircuitEstablishTime
    OBJECT-TYPE\n                  SYNTAX  TimeTicks\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    value of sysUpTime when the channel was\n                          associated
    with this circuit.  For outgoing\n                          SVCs, this is the
    time the first call packet\n                          was sent.  For incoming
    SVCs, this is the\n                          time the call indication was received.
    \ For\n                          PVCs this is the time the PVC was able to\n                          pass
    data to a higher layer entity without\n                          loss of data.\"\n
    \                 ::= { x25CircuitEntry 4 }\n          x25CircuitDirection OBJECT-TYPE\n
    \                 SYNTAX  INTEGER {\n                                  incoming
    (1),\n                                  outgoing (2),\n                                  pvc
    (3)\n                          }\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The direction
    of the call that established\n                          this circuit.\"\n                  REFERENCE
    \"10733 direction\"\n                  DEFVAL { pvc }\n                  ::= {
    x25CircuitEntry 5 }\n                          -- X25 Circuit data flow statistics\n
    \         x25CircuitInOctets OBJECT-TYPE\n                  SYNTAX  Counter\n
    \                 ACCESS  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of octets of user data delivered\n                          to
    upper layer.\"\n                  REFERENCE \"5.11 octetsReceivedCounter\"\n                  ::=
    { x25CircuitEntry 6 }\n          x25CircuitInPdus OBJECT-TYPE\n                  SYNTAX
    \ Counter\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The number of PDUs
    received for this\n                          circuit.\"\n                  REFERENCE
    \"10733 5.11 dataPacketsReceived\"\n                  ::= { x25CircuitEntry 7
    }\n          x25CircuitInRemotelyInitiatedResets OBJECT-TYPE\n                  SYNTAX
    \ Counter\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The number of Resets
    received for this\n                          circuit with cause code of DTE initiated.\"\n
    \                 REFERENCE \"10733 remotelyInitiatedResets\"\n                  ::=
    { x25CircuitEntry 8 }\n          x25CircuitInProviderInitiatedResets OBJECT-TYPE\n
    \                 SYNTAX  Counter\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The number
    of Resets received for this\n                          circuit with cause code
    other than DTE\n                          initiated.\"\n                  REFERENCE
    \"10733 ProviderInitiatedResets\"\n                  ::= { x25CircuitEntry 9 }\n
    \         x25CircuitInInterrupts OBJECT-TYPE\n                  SYNTAX  Counter\n
    \                 ACCESS  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of interrupt packets received\n                          for
    this circuit.\"\n                  REFERENCE \"10733 interruptPacketsReceived\"\n
    \                 ::= { x25CircuitEntry 10 }\n          x25CircuitOutOctets OBJECT-TYPE\n
    \                 SYNTAX  Counter\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The number
    of octets of user data sent for\n                          this circuit.\"\n                  REFERENCE
    \"10733 5.11 octetsSentCounter\"\n                  ::= { x25CircuitEntry 11 }\n
    \         x25CircuitOutPdus OBJECT-TYPE\n                  SYNTAX  Counter\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of PDUs sent for this circuit.\"\n                  REFERENCE
    \"10733 5.11 dataPacketsSent\"\n                  ::= { x25CircuitEntry 12 }\n
    \         x25CircuitOutInterrupts OBJECT-TYPE\n                  SYNTAX  Counter\n
    \                 ACCESS  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of interrupt packets sent on\n                          this
    circuit.\"\n                  REFERENCE \"10733 interruptPacketsSent\"\n                  ::=
    { x25CircuitEntry 13 }\n                          -- X25 circuit timer statistics\n
    \         x25CircuitDataRetransmissionTimeouts OBJECT-TYPE\n                  SYNTAX
    \ Counter\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The number of times
    the T25 data\n                          retransmission timer expired for this\n
    \                         circuit.\"\n                  REFERENCE \"10733 5.11
    dataRetransmissionTimerExpiries\"\n                  ::= { x25CircuitEntry 14
    }\n          x25CircuitResetTimeouts OBJECT-TYPE\n                  SYNTAX  Counter\n
    \                 ACCESS  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of times the T22 reset timer\n                          expired
    for this circuit.\"\n                  REFERENCE \"10733 5.11 resetTimeouts\"\n
    \                 ::= { x25CircuitEntry 15 }\n          x25CircuitInterruptTimeouts
    OBJECT-TYPE\n                  SYNTAX  Counter\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    number of times the T26 Interrupt timer\n                          expired for
    this circuit.\"\n                  REFERENCE \"10733 interruptTimerExpiries\"\n
    \                 ::= { x25CircuitEntry 16 }\n          x25CircuitCallParamId
    OBJECT-TYPE\n                  SYNTAX  OBJECT IDENTIFIER\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"This identifies the instance of the\n                          x25CallParmIndex
    for the entry in the\n                          x25CallParmTable which contains
    the call\n                          parameters in use with this circuit.  The\n
    \                         entry referenced must contain the values\n                          that
    are currently in use by the circuit\n                          rather than proposed
    values.  A value of\n                          NULL indicates the circuit is a
    PVC or is\n                          using all the default parameters.\"\n                  DEFVAL
    { {0 0} }\n                  ::= { x25CircuitEntry 17 }\n          x25CircuitCalledDteAddress
    OBJECT-TYPE\n                  SYNTAX  X121Address\n                  ACCESS  read-write\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"For
    incoming calls, this is the called\n                          address from the
    call indication packet.\n                          For outgoing calls, this is
    the called\n                          address from the call confirmation packet.\n
    \                         This will be zero length for PVCs.\"\n                  REFERENCE
    \"10733 calledDTEAddress\"\n                  DEFVAL { ''h }\n                  ::=
    { x25CircuitEntry 18 }\n          x25CircuitCallingDteAddress OBJECT-TYPE\n                  SYNTAX
    \ X121Address\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"For incoming
    calls, this is the calling\n                          address from the call indication
    packet.\n                          For outgoing calls, this is the calling\n                          address
    from the call confirmation packet.\n                          This will be zero
    length for PVCs.\"\n                  REFERENCE \"10733 callingDTEAddress\"\n
    \                 DEFVAL { ''h }\n                  ::= { x25CircuitEntry 19 }\n
    \         x25CircuitOriginallyCalledAddress OBJECT-TYPE\n                  SYNTAX
    \ X121Address\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"For incoming
    calls, this is the address in\n                          the call Redirection
    or Call Deflection\n                          Notification facility if the call
    was\n                          deflected or redirected, otherwise it will\n                          be
    called address from the call indication\n                          packet.  For
    outgoing calls, this is the\n                          address from the call request
    packet.  This\n                          will be zero length for PVCs.\"\n                  REFERENCE
    \"10733 originallyCalledAddress\"\n                  DEFVAL { ''h }\n                  ::=
    { x25CircuitEntry 20 }\n          x25CircuitDescr OBJECT-TYPE\n                  SYNTAX
    \ DisplayString (SIZE (0..255))\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"A descriptive
    string associated with this\n                          circuit.  This provides
    a place for the\n                          agent to supply any descriptive information\n
    \                         it knows about the use or owner of the\n                          circuit.
    \ The agent may return the process\n                          identifier and user
    name for the process\n                          using the circuit.  Alternative
    the agent\n                          may return the name of the configuration\n
    \                         entry that caused a bridge to establish the\n                          circuit.
    \ A zero length value indicates the\n                          agent doesn't have
    any additional\n                          information.\"\n                  DEFVAL
    { ''h }\n                  ::= { x25CircuitEntry 21 }\n          -- ###########################################################\n
    \         --              The Cleared Circuit Table\n          -- ###########################################################\n
    \         x25ClearedCircuitEntriesRequested OBJECT-TYPE\n                  SYNTAX
    \ PositiveInteger\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The requested
    number of entries for the\n                          agent to keep in the x25ClearedCircuit\n
    \                         table.\"\n                  ::= { x25 6 }\n          x25ClearedCircuitEntriesGranted
    OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The actual number of entries the agent will\n                          keep
    in the x25ClearedCircuit Table.\"\n                  ::= { x25 7 }\n          x25ClearedCircuitTable
    \ OBJECT-TYPE\n                  SYNTAX SEQUENCE OF      X25ClearedCircuitEntry\n
    \                 ACCESS not-accessible\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"A table of entries
    about closed circuits.\n                          Entries must be made in this
    table whenever\n                          circuits are closed and the close request
    or\n                          close indication packet contains a clearing\n                          cause
    other than DTE Originated or a\n                          Diagnostic code field
    other than Higher\n                          Layer Initiated disconnection-normal.
    \ An\n                          agent may optionally make entries for normal\n
    \                         closes (to record closing facilities or\n                          other
    information).\n                          Agents will delete the oldest entry in
    the\n                          table when adding a new entry would exceed\n                          agent
    resources.  Agents are required to\n                          keep the last entry
    put in the table and may\n                          keep more entries.  The object\n
    \                         x25OperClearEntriesGranted returns the\n                          maximum
    number of entries kept in the\n                          table.\"\n                  REFERENCE
    \"See ISO 8208 Section 12.2.3.1.1\n                                  and 12.2.3.1.2\"\n
    \                 ::= { x25 8 }\n          x25ClearedCircuitEntry  OBJECT-TYPE\n
    \                 SYNTAX  X25ClearedCircuitEntry\n                  ACCESS  not-accessible\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"Information
    about a cleared circuit.\"\n                  INDEX { x25ClearedCircuitIndex }\n
    \                 ::= { x25ClearedCircuitTable 1 }\n          X25ClearedCircuitEntry
    ::= SEQUENCE {\n                  x25ClearedCircuitIndex\n                          PositiveInteger,\n
    \                 x25ClearedCircuitPleIndex\n                          IfIndexType,\n
    \                 x25ClearedCircuitTimeEstablished\n                          TimeTicks,\n
    \                 x25ClearedCircuitTimeCleared\n                          TimeTicks,\n
    \                 x25ClearedCircuitChannel\n                          INTEGER,\n
    \                 x25ClearedCircuitClearingCause\n                          INTEGER,\n
    \                 x25ClearedCircuitDiagnosticCode\n                          INTEGER,\n
    \                 x25ClearedCircuitInPdus\n                          Counter,\n
    \                 x25ClearedCircuitOutPdus\n                          Counter,\n
    \                 x25ClearedCircuitCalledAddress\n                          X121Address,\n
    \                 x25ClearedCircuitCallingAddress\n                          X121Address,\n
    \                 x25ClearedCircuitClearFacilities\n                          OCTET
    STRING\n                  }\n          x25ClearedCircuitIndex OBJECT-TYPE\n                  SYNTAX
    \ PositiveInteger\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"An index
    that uniquely distinguishes one\n                          entry in the clearedCircuitTable
    from\n                          another.  This index will start at\n                          2147483647
    and will decrease by one for each\n                          new entry added to
    the table.  Upon reaching\n                          one, the index will reset
    to 2147483647.\n                          Because the index starts at 2147483647
    and\n                          decreases, a manager may do a getnext on\n                          entry
    zero and obtain the most recent entry.\n                          When the index
    has the value of 1, the next\n                          entry will delete all
    entries in the table\n                          and that entry will be numbered
    2147483647.\"\n                  ::= { x25ClearedCircuitEntry 1 }\n          x25ClearedCircuitPleIndex
    OBJECT-TYPE\n                  SYNTAX  IfIndexType\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    value of ifIndex for the PLE which\n                          cleared the circuit
    that created the entry.\"\n                  ::= { x25ClearedCircuitEntry 2 }\n
    \         x25ClearedCircuitTimeEstablished OBJECT-TYPE\n                  SYNTAX
    \ TimeTicks\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The value of sysUpTime
    when the circuit was\n                          established.  This will be the
    same value\n                          that was in the x25CircuitEstablishTime
    for\n                          the circuit.\"\n                  ::= { x25ClearedCircuitEntry
    3 }\n          x25ClearedCircuitTimeCleared OBJECT-TYPE\n                  SYNTAX
    \ TimeTicks\n                  ACCESS  read-only\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The value of sysUpTime
    when the circuit was\n                          cleared.  For locally initiated
    clears, this\n                          will be the time when the clear confirmation\n
    \                         was received.  For remotely initiated\n                          clears,
    this will be the time when the clear\n                          indication was
    received.\"\n                  ::= { x25ClearedCircuitEntry 4 }\n          x25ClearedCircuitChannel
    OBJECT-TYPE\n                  SYNTAX  INTEGER (0..4095)\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The channel number for the circuit that was\n                          cleared.\"\n
    \                 ::= { x25ClearedCircuitEntry 5 }\n          x25ClearedCircuitClearingCause
    OBJECT-TYPE\n                  SYNTAX  INTEGER (0..255)\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The Clearing Cause from the clear request\n                          or
    clear indication packet that cleared the\n                          circuit.\"\n
    \                 REFERENCE \"See ISO 8208 Section 12.2.3.1.1\"\n                  ::=
    { x25ClearedCircuitEntry 6 }\n          x25ClearedCircuitDiagnosticCode OBJECT-TYPE\n
    \                 SYNTAX  INTEGER (0..255)\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    Diagnostic Code from the clear request\n                          or clear indication
    packet that cleared the\n                          circuit.\"\n                  REFERENCE
    \"See ISO 8208 Section 12.2.3.1.2\"\n                  ::= { x25ClearedCircuitEntry
    7 }\n          x25ClearedCircuitInPdus OBJECT-TYPE\n                  SYNTAX  Counter\n
    \                 ACCESS  read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of PDUs received on the\n                          circuit.\"\n
    \                 ::= { x25ClearedCircuitEntry 8 }\n          x25ClearedCircuitOutPdus
    OBJECT-TYPE\n                  SYNTAX  Counter\n                  ACCESS  read-only\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    number of PDUs transmitted on the\n                          circuit.\"\n                  ::=
    { x25ClearedCircuitEntry 9 }\n          x25ClearedCircuitCalledAddress OBJECT-TYPE\n
    \                 SYNTAX  X121Address\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The called
    address from the cleared\n                          circuit.\"\n                  ::=
    { x25ClearedCircuitEntry 10 }\n          x25ClearedCircuitCallingAddress OBJECT-TYPE\n
    \                 SYNTAX  X121Address\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The calling
    address from the cleared\n                          circuit.\"\n                  ::=
    { x25ClearedCircuitEntry 11 }\n          x25ClearedCircuitClearFacilities OBJECT-TYPE\n
    \                 SYNTAX  OCTET STRING (SIZE (0..109))\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The facilities field from the clear request\n                          or
    clear indication packet that cleared the\n                          circuit.  A
    size of zero indicates no\n                          facilities were present.\"\n
    \                 ::= { x25ClearedCircuitEntry 12 }\n          -- ###########################################################\n
    \         --                The Call Parameter Table\n          -- ###########################################################\n
    \         x25CallParmTable OBJECT-TYPE\n                  SYNTAX  SEQUENCE OF
    X25CallParmEntry\n                  ACCESS  not-accessible\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"These
    objects contain the parameters that\n                          can be varied between
    X.25 calls.  The\n                          entries in this table are independent
    of the\n                          PLE.  There exists only one of these tables\n
    \                         for the entire system.  The indexes for the\n                          entries
    are independent of any PLE or any\n                          circuit.  Other tables
    reference entries in\n                          this table.  Entries in this table
    can be\n                          used for default PLE parameters, for\n                          parameters
    to use to place/answer a call,\n                          for the parameters currently
    in use for a\n                          circuit, or parameters that were used
    by a\n                          circuit.\n                          The number
    of references to a given set of\n                          parameters can be found
    in the\n                          x25CallParmRefCount object sharing the same\n
    \                         instance identifier with the parameters.\n                          The
    value of this reference count also\n                          affects the access
    of the objects in this\n                          table.  An object in this table
    with the\n                          same instance identifier as the instance\n
    \                         identifier of an x25CallParmRefCount must be\n                          consider
    associated with that reference\n                          count.  An object with
    an associated\n                          reference count of zero can be written
    (if\n                          its ACCESS clause allows it).  An object\n                          with
    an associated reference count greater\n                          than zero can
    not be written (regardless of\n                          the ACCESS clause).  This
    ensures that a set\n                          of call parameters being referenced
    from\n                          another table can not be modified or changed\n
    \                         in a ways inappropriate for continued use by\n                          that
    table.\"\n                  ::= { x25 9 }\n          x25CallParmEntry OBJECT-TYPE\n
    \                 SYNTAX  X25CallParmEntry\n                  ACCESS  not-accessible\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"Entries
    of x25CallParmTable.\"\n                  INDEX { x25CallParmIndex }\n                  ::=
    { x25CallParmTable 1 }\n          X25CallParmEntry ::= SEQUENCE {\n                  x25CallParmIndex\n
    \                         PositiveInteger,\n                  x25CallParmStatus\n
    \                         EntryStatus,\n                  x25CallParmRefCount\n
    \                         PositiveInteger,\n                  x25CallParmInPacketSize\n
    \                         INTEGER,\n                  x25CallParmOutPacketSize\n
    \                         INTEGER,\n                  x25CallParmInWindowSize\n
    \                         INTEGER,\n                  x25CallParmOutWindowSize\n
    \                         INTEGER,\n                  x25CallParmAcceptReverseCharging\n
    \                         INTEGER,\n                  x25CallParmProposeReverseCharging\n
    \                         INTEGER,\n                  x25CallParmFastSelect\n
    \                         INTEGER,\n                  x25CallParmInThruPutClasSize\n
    \                         INTEGER,\n                  x25CallParmOutThruPutClasSize\n
    \                         INTEGER,\n                  x25CallParmCug\n                          DisplayString,\n
    \                 x25CallParmCugoa\n                          DisplayString,\n
    \                 x25CallParmBcug\n                          DisplayString,\n
    \                 x25CallParmNui\n                          OCTET STRING,\n                  x25CallParmChargingInfo\n
    \                         INTEGER,\n                  x25CallParmRpoa\n                          DisplayString,\n
    \                 x25CallParmTrnstDly\n                          INTEGER,\n                  x25CallParmCallingExt\n
    \                         DisplayString,\n                  x25CallParmCalledExt\n
    \                         DisplayString,\n                  x25CallParmInMinThuPutCls\n
    \                         INTEGER,\n                  x25CallParmOutMinThuPutCls\n
    \                         INTEGER,\n                  x25CallParmEndTrnsDly\n
    \                         OCTET STRING,\n                  x25CallParmPriority\n
    \                         OCTET STRING,\n                  x25CallParmProtection\n
    \                         DisplayString,\n                  x25CallParmExptData\n
    \                         INTEGER,\n                  x25CallParmUserData\n                          OCTET
    STRING,\n                  x25CallParmCallingNetworkFacilities\n                          OCTET
    STRING,\n                  x25CallParmCalledNetworkFacilities\n                          OCTET
    STRING\n                  }\n          x25CallParmIndex OBJECT-TYPE\n                  SYNTAX
    \ PositiveInteger\n                  ACCESS  read-only\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"A value
    that distinguishes this entry from\n                          another entry.  Entries
    in this table are\n                          referenced from other objects which
    identify\n                          call parameters.\n                          It
    is impossible to know which other objects\n                          in the MIB
    reference entries in the table by\n                          looking at this table.
    \ Because of this,\n                          changes to parameters must be accomplished\n
    \                         by creating a new entry in this table and\n                          then
    changing the referencing table to\n                          identify the new
    entry.\n                          Note that an agent will only use the values\n
    \                         in this table when another table is changed\n                          to
    reference those values.  The number of\n                          other tables
    that reference an index object\n                          in this table can be
    found in\n                          x25CallParmRefCount.  The value of the\n                          reference
    count will affect the writability\n                          of the objects as
    explained above.\n                          Entries in this table which have a
    reference\n                          count of zero maybe deleted at the convence\n
    \                         of the agent.  Care should be taken by the\n                          agent
    to give the NMS sufficient time to\n                          create a reference
    to newly created entries.\n                          Should a Management Station
    not find a free\n                          index with which to create a new entry,
    it\n                          may feel free to delete entries with a\n                          reference
    count of zero.  However in doing\n                          so the Management
    Station much realize it\n                          may impact other Management
    Stations.\"\n                  ::= { x25CallParmEntry 1 }\n          x25CallParmStatus
    OBJECT-TYPE\n                  SYNTAX  EntryStatus\n                  ACCESS  read-write\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    status of this call parameter entry.\n                          See RFC 1271 for
    details of usage.\"\n                  ::= { x25CallParmEntry 2 }\n          x25CallParmRefCount
    OBJECT-TYPE\n                  SYNTAX  PositiveInteger\n                  ACCESS
    \ read-only\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The number of references know by a\n                          management
    station to exist to this set of\n                          call parameters.  This
    is the number of\n                          other objects that have returned a
    value of,\n                          and will return a value of, the index for\n
    \                         this set of call parameters.  Examples of\n                          such
    objects are the x25AdmnDefCallParamId,\n                          x25OperDataLinkId,
    or x25AdmnDefCallParamId\n                          objects defined above.\"\n
    \                 ::= { x25CallParmEntry 3 }\n          x25CallParmInPacketSize
    OBJECT-TYPE\n                  SYNTAX  INTEGER (0..4096)\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The maximum receive packet size in octets\n                          for
    a circuit.  A size of zero for a circuit\n                          means use
    the PLE default size.  A size of\n                          zero for the PLE means
    use a default size of\n                          128.\"\n                  REFERENCE
    \"10733 proposedPacketSize;\n                          See ISO 8208 Section 15.2.2.1.1\"\n
    \                 DEFVAL { 128 }\n                  ::= { x25CallParmEntry 4 }\n
    \         x25CallParmOutPacketSize OBJECT-TYPE\n                  SYNTAX  INTEGER
    (0..4096)\n                  ACCESS  read-write\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The maximum transmit
    packet size in octets\n                          for a circuit.  A size of zero
    for a circuit\n                          means use the PLE default size.  A size
    of\n                          zero for the PLE default means use a default\n                          size
    of 128.\"\n                  REFERENCE \"10733 proposedPacketSize;\n                          See
    ISO 8208 Section 15.2.2.1.1\"\n                  DEFVAL { 128 }\n                  ::=
    { x25CallParmEntry 5 }\n          x25CallParmInWindowSize OBJECT-TYPE\n                  SYNTAX
    \ INTEGER (0..127)\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The receive
    window size for a circuit.  A\n                          size of zero for a circuit
    means use the PLE\n                          default size.  A size of zero for
    the PLE\n                          default means use 2.\"\n                  REFERENCE
    \"10733 proposedWindowSize;\n                          See ISO 8208 Section 15.2.2.1.2\"\n
    \                 DEFVAL { 2 }\n                  ::= { x25CallParmEntry 6 }\n
    \         x25CallParmOutWindowSize OBJECT-TYPE\n                  SYNTAX  INTEGER
    (0..127)\n                  ACCESS  read-write\n                  STATUS  mandatory\n
    \                 DESCRIPTION\n                          \"The transmit window
    size for a circuit.  A\n                          size of zero for a circuit means
    use the PLE\n                          default size.  A size of zero for the PLE\n
    \                         default means use 2.\"\n                  REFERENCE
    \"10733 proposedWindowSize;\n                          See ISO 8208 Section 15.2.2.1.2\"\n
    \                 DEFVAL { 2 }\n                  ::= { x25CallParmEntry 7 }\n
    \         x25CallParmAcceptReverseCharging OBJECT-TYPE\n                  SYNTAX
    \ INTEGER {\n                                  default (1),\n                                  accept
    (2),\n                                  refuse (3),\n                                  neverAccept
    (4)\n                          }\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"An enumeration
    defining if the PLE will\n                          accept or refuse charges.
    \ A value of\n                          default for a circuit means use the PLE\n
    \                         default value.  A value of neverAccept is\n                          only
    used for the PLE default and indicates\n                          the PLE will
    never accept reverse charging.\n                          A value of default for
    a PLE default means\n                          refuse.\"\n                  REFERENCE
    \"10733 acceptReverseCharging\"\n                  DEFVAL { refuse }\n                  ::=
    { x25CallParmEntry 8 }\n          x25CallParmProposeReverseCharging OBJECT-TYPE\n
    \                 SYNTAX  INTEGER {\n                                  default
    (1),\n                                  reverse (2),\n                                  local
    (3)\n                          }\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"An enumeration
    defining if the PLE should\n                          propose reverse or local
    charging.  The\n                          value of default for a circuit means
    use the\n                          PLE default.  The value of default for the\n
    \                         PLE default means use local.\"\n                  REFERENCE
    \"10733 proposedPacketSize;\n                          See ISO 8208 Section 15.2.2.6\"\n
    \                 DEFVAL { local }\n                  ::= { x25CallParmEntry 9
    }\n          x25CallParmFastSelect OBJECT-TYPE\n                  SYNTAX  INTEGER
    {\n                                  default (1),\n                                  notSpecified
    (2),\n                                  fastSelect (3),\n                                  restrictedFastResponse
    (4),\n                                  noFastSelect (5),\n                                  noRestrictedFastResponse
    (6)\n                          }\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"Expresses
    preference for use of fast select\n                          facility.  The value
    of default for a\n                          circuit is the PLE default.  A value
    of\n                          default for the PLE means noFastSelect.  A\n                          value
    of noFastSelect or\n                          noRestrictedFastResponse indicates
    a circuit\n                          may not use fast select or restricted fast\n
    \                         response.\"\n                  REFERENCE \"10733 fastSelect;\n
    \                 Sec ISO 8208 Section 15.2.2.6\"\n                  DEFVAL {
    noFastSelect }\n                  ::= { x25CallParmEntry 10 }\n          x25CallParmInThruPutClasSize
    \   OBJECT-TYPE\n                  SYNTAX  INTEGER {\n                                  tcReserved1
    (1),\n                                  tcReserved2 (2),\n                                  tc75
    (3),\n                                  tc150 (4),\n                                  tc300
    (5),\n                                  tc600 (6),\n                                  tc1200
    \ (7),\n                                  tc2400  (8),\n                                  tc4800
    \ (9),\n                                  tc9600  (10),\n                                  tc19200
    (11),\n                                  tc48000 (12),\n                                  tc64000
    (13),\n                                  tcReserved14 (14),\n                                  tcReserved15
    (15),\n                                  tcReserved0 (16),\n                                  tcNone
    \ (17),\n                                  tcDefault (18)\n                          }\n
    \                 ACCESS  read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The incoming throughput class to negotiate.\n                          A
    value of tcDefault for a circuit means use\n                          the PLE
    default.  A value of tcDefault for\n                          the PLE default
    means tcNone.  A value of\n                          tcNone means do not negotiate
    throughtput\n                          class.\"\n                  REFERENCE \"See
    ISO 8208 Section 15.2.2.2, table 18\"\n                  DEFVAL { tcNone }\n                  ::=
    { x25CallParmEntry 11 }\n          x25CallParmOutThruPutClasSize   OBJECT-TYPE\n
    \                 SYNTAX  INTEGER {\n                                  tcReserved1
    (1),\n                                  tcReserved2 (2),\n                                  tc75
    (3),\n                                  tc150 (4),\n                                  tc300
    (5),\n                          tc600 (6),\n                                  tc1200
    \ (7),\n                                  tc2400  (8),\n                                  tc4800
    \ (9),\n                                  tc9600  (10),\n                                  tc19200
    (11),\n                                  tc48000 (12),\n                                  tc64000
    (13),\n                                  tcReserved14 (14),\n                                  tcReserved15
    (15),\n                                  tcReserved0 (16),\n                                  tcNone
    \ (17),\n                                  tcDefault (18)\n                          }\n
    \                 ACCESS  read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The outgoing throughput class to negotiate.\n                          A
    value of tcDefault for a circuit means use\n                          the PLE
    default.  A value of tcDefault for\n                          the PLE default
    means use tcNone.  A value\n                          of tcNone means do not negotiate
    throughtput\n                          class.\"\n                  REFERENCE \"See
    ISO 8208 Section 15.2.2.2, table 18\"\n                  DEFVAL { tcNone }\n                  ::=
    { x25CallParmEntry 12 }\n          x25CallParmCug  OBJECT-TYPE\n                  SYNTAX
    \ DisplayString (SIZE(0..4))\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The Closed
    User Group to specify.  This\n                          consists of two or four
    octets containing\n                          the characters 0 through 9.  A zero
    length\n                          string indicates no facility requested.  A\n
    \                         string length of three containing the\n                          characters
    DEF for a circuit means use the\n                          PLE default, (the PLE
    default parameter may\n                          not reference an entry of DEF.)\"\n
    \                 REFERENCE \"See ISO 8208 Section 15.2.2.3\"\n                  DEFVAL
    { ''h }\n                  ::= { x25CallParmEntry 13 }\n          x25CallParmCugoa
    \       OBJECT-TYPE\n                  SYNTAX  DisplayString (SIZE(0..4))\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The Closed User Group with Outgoing Access\n                          to
    specify.  This consists of two or four\n                          octets containing
    the characters 0 through\n                          9.  A string length of three
    containing the\n                          characters DEF for a circuit means use
    the\n                          PLE default (the PLE default parameters may\n                          not
    reference an entry of DEF).  A zero\n                          length string indicates
    no facility\n                          requested.\"\n                  REFERENCE
    \"See ISO 8208 Section 15.2.2.4\"\n                  DEFVAL { ''h }\n                  ::=
    { x25CallParmEntry 14 }\n          x25CallParmBcug OBJECT-TYPE\n                  SYNTAX
    \ DisplayString (SIZE(0..3))\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The Bilateral
    Closed User Group to specify.\n                          This consists of two
    octets containing the\n                          characters 0 through 9.  A string
    length of\n                          three containing the characters DEF for a\n
    \                         circuit means use the PLE default (the PLE\n                          default
    parameter may not reference an entry\n                          of DEF).  A zero
    length string indicates no\n                          facility requested.\"\n
    \                 REFERENCE \"See ISO 8208 Section 15.2.2.5\"\n                  DEFVAL
    { ''h }\n                  ::= { x25CallParmEntry 15 }\n          x25CallParmNui
    \ OBJECT-TYPE\n                  SYNTAX  OCTET STRING (SIZE(0..108))\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The Network User Identifier facility.  This\n                          is
    binary value to be included immediately\n                          after the length
    field.  The PLE will supply\n                          the length octet.  A zero
    length string\n                          indicates no facility requested.  This
    value\n                          is ignored for the PLE default parameters\n                          entry.\"\n
    \                 REFERENCE \"See ISO 8208 Section 15.2.2.7\"\n                  DEFVAL
    { ''h }\n                  ::= { x25CallParmEntry 16 }\n          x25CallParmChargingInfo
    OBJECT-TYPE\n                  SYNTAX INTEGER {\n                                  default
    (1),\n                                  noFacility (2),\n                                  noChargingInfo
    (3),\n                                  chargingInfo (4)\n                          }\n
    \                 ACCESS  read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The charging Information facility.  A value\n                          of
    default for a circuit means use the PLE\n                          default.  The
    value of default for the\n                          default PLE parameters means
    use noFacility.\n                          The value of noFacility means do not
    include\n                          a facility.\"\n                  REFERENCE
    \"See ISO 8208 Section 15.2.2.8\"\n                  DEFVAL { noFacility }\n                  ::=
    { x25CallParmEntry 17 }\n          x25CallParmRpoa OBJECT-TYPE\n                  SYNTAX
    \ DisplayString (SIZE(0..108))\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The RPOA
    facility.  The octet string\n                          contains n * 4 sequences
    of the characters\n                          0-9 to specify a facility with n
    entries.\n                          The octet string containing the 3 characters\n
    \                         DEF for a circuit specifies use of the PLE\n                          default
    (the entry for the PLE default may\n                          not contain DEF).
    \ A zero length string\n                          indicates no facility requested.\"\n
    \                 REFERENCE \"See ISO 8208, section 15.2.2.9\"\n                  DEFVAL
    { ''h }\n                  ::= { x25CallParmEntry 18 }\n          x25CallParmTrnstDly
    \    OBJECT-TYPE\n                  SYNTAX  INTEGER (0..65537)\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The Transit Delay Selection and Indication\n                          value.
    \ A value of 65536 indicates no\n                          facility requested.
    \ A value of 65537 for a\n                          circuit means use the PLE
    default (the PLE\n                          default parameters entry may not use
    the\n                          value 65537).  The value 65535 may only be\n                          used
    to indicate the value in use by a\n                          circuit.\"\n                  REFERENCE
    \"See ISO 8208, Section 15.2.2.13\"\n                  DEFVAL { 65536 }\n                  ::=
    { x25CallParmEntry 19 }\n                  -- The following parameters are for
    CCITT facilities.\n          x25CallParmCallingExt OBJECT-TYPE\n                  SYNTAX
    \ DisplayString (SIZE(0..40))\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The Calling
    Extension facility.  This\n                          contains one of the following:\n
    \                         A sequence of hex digits with the value to\n                          be
    put in the facility. These digits will be\n                          converted
    to binary by the agent and put in\n                          the facility.  These
    octets do not include\n                          the length octet.\n                          A
    value containing the three character DEF\n                          for a circuit
    means use the PLE default,\n                          (the entry for the PLE default
    parameters\n                          may not use the value DEF).\n                          A
    zero length string indicates no facility\n                          requested.\"\n
    \                 REFERENCE \"See ISO 8208 Section 15.3.2.1\"\n                  DEFVAL
    { ''h }\n                  ::= { x25CallParmEntry 20 }\n          x25CallParmCalledExt
    OBJECT-TYPE\n                  SYNTAX  DisplayString (SIZE(0..40))\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The Called Extension facility.  This\n                          contains
    one of the following:\n                          A sequence of hex digits with
    the value to\n                          be put in the facility.  These digits
    will be\n                          converted to binary by the agent and put in\n
    \                         the facility.  These octets do not include\n                          the
    length octet.\n                          A value containing the three character
    DEF\n                          for a circuit means use the PLE default,\n                          (the
    entry for the PLE default parameters\n                          may not use the
    value DEF).\n                          A zero length string indicates no facility\n
    \                         requested.\"\n                  REFERENCE \"See ISO
    8208 Section 15.3.2.2\"\n                  DEFVAL { ''h }\n                  ::=
    { x25CallParmEntry 21 }\n          x25CallParmInMinThuPutCls       OBJECT-TYPE\n
    \                 SYNTAX  INTEGER (0..17)\n                  ACCESS  read-write\n
    \                 STATUS  mandatory\n                  DESCRIPTION\n                          \"The
    minimum input throughput Class.  A\n                          value of 16 for
    a circuit means use the PLE\n                          default (the PLE parameters
    entry may not\n                          use this value).  A value of 17 indicates
    no\n                          facility requested.\"\n                  REFERENCE
    \"See ISO 8208 Section 15.3.2.3\"\n                  DEFVAL { 17 }\n                  ::=
    { x25CallParmEntry 22 }\n          x25CallParmOutMinThuPutCls OBJECT-TYPE\n                  SYNTAX
    \ INTEGER (0..17)\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The minimum
    output throughput Class.  A\n                          value of 16 for a circuit
    means use the PLE\n                          default (the PLE parameters entry
    may not\n                          use this value).  A value of 17 indicates no\n
    \                         facility requested.\"\n                  REFERENCE \"See
    ISO 8208 Section 15.3.2.3\"\n                  DEFVAL { 17 }\n                  ::=
    { x25CallParmEntry 23 }\n          x25CallParmEndTrnsDly OBJECT-TYPE\n                  SYNTAX
    \ OCTET STRING (SIZE(0..6))\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The End-to-End
    Transit Delay to negotiate.\n                          An octet string of length
    2, 4, or 6\n                          contains the facility encoded as specified\n
    \                         in ISO/IEC 8208 section 15.3.2.4.  An octet\n                          string
    of length 3 containing the three\n                          character DEF for
    a circuit means use the\n                          PLE default (the entry for
    the PLE default\n                          can not contain the characters DEF).
    \ A zero\n                          length string indicates no facility\n                          requested.\"\n
    \                 REFERENCE \"See ISO 8208 Section 15.3.2.4\"\n                  DEFVAL
    { ''h }\n                  ::= { x25CallParmEntry 24 }\n          x25CallParmPriority
    OBJECT-TYPE\n                  SYNTAX  OCTET STRING (SIZE(0..6))\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The priority facility to negotiate.  The\n                          octet
    string encoded as specified in ISO/IEC\n                          8208 section
    15.3.2.5.  A zero length string\n                          indicates no facility
    requested.  The entry\n                          for the PLE default parameters
    must be zero\n                          length.\"\n                  REFERENCE
    \"See ISO 8208 Section 15.3.2.5\"\n                  DEFVAL { ''h }\n                  ::=
    { x25CallParmEntry 25 }\n          x25CallParmProtection OBJECT-TYPE\n                  SYNTAX
    \ DisplayString (SIZE(0..108))\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"A string
    contains the following:\n                          A hex string containing the
    value for the\n                          protection facility.  This will be converted\n
    \                         from hex to the octets actually in the\n                          packet
    by the agent.  The agent will supply\n                          the length field
    and the length octet is not\n                          contained in this string.\n
    \                         An string containing the 3 characters DEF\n                          for
    a circuit means use the PLE default (the\n                          entry for
    the PLE default parameters may not\n                          use the value DEF).\n
    \                         A zero length string mean no facility\n                          requested.\"\n
    \                 REFERENCE \"See ISO 8208 Section 15.3.2.5\"\n                  DEFVAL
    { ''h }\n                  ::= { x25CallParmEntry 26 }\n          x25CallParmExptData
    OBJECT-TYPE\n                  SYNTAX  INTEGER {\n                                  default
    (1),\n                                  noExpeditedData (2),\n                                  expeditedData
    (3)\n                          }\n                  ACCESS  read-write\n                  STATUS
    \ mandatory\n                  DESCRIPTION\n                          \"The Expedited
    Data facility to negotiate.\n                          A value of default for
    a circuit means use\n                          the PLE default value.  The entry
    for the\n                          PLE default parameters may not have the\n                          value
    default.\"\n                  REFERENCE \"See ISO 8208 Section 15.3.2.7\"\n                  DEFVAL
    { noExpeditedData }\n                  ::= { x25CallParmEntry 27 }\n          x25CallParmUserData
    \    OBJECT-TYPE\n                  SYNTAX  OCTET STRING (SIZE (0..128))\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The call user data as placed in the packet.\n                          A
    zero length string indicates no call user\n                          data.  If
    both the circuit call parameters\n                          and the PLE default
    have call user data\n                          defined, the data from the circuit
    call\n                          parameters will be used.  If only the PLE\n                          has
    data defined, the PLE entry will be\n                          used.  If neither
    the circuit call\n                          parameters or the PLE default entry
    has a\n                          value, no call user data will be sent.\"\n                  REFERENCE
    \"See ISO 8208 Section 12.2.1.1.6, 12.2.1.2\"\n                  DEFVAL { ''h
    }\n                  ::= { x25CallParmEntry 28 }\n          x25CallParmCallingNetworkFacilities
    \    OBJECT-TYPE\n                  SYNTAX  OCTET STRING (SIZE (0..108))\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The calling network facilities.  The\n                          facilities
    are encoded here exactly as\n                          encoded in the call packet.
    \ These\n                          facilities do not include the marker\n                          facility
    code.\n                          A zero length string in the entry for the\n                          parameter
    to use when establishing a circuit\n                          means use the PLE
    default.  A zero length\n                          string in the entry for PLE
    default\n                          parameters indicates no default facilities.\"\n
    \                 REFERENCE \"See ISO 8206 Section 15.1, category b\"\n                  DEFVAL
    { ''h }\n                  ::= { x25CallParmEntry 29 }\n          x25CallParmCalledNetworkFacilities
    \     OBJECT-TYPE\n                  SYNTAX  OCTET STRING (SIZE (0..108))\n                  ACCESS
    \ read-write\n                  STATUS  mandatory\n                  DESCRIPTION\n
    \                         \"The called network facilities.  The\n                          facilities
    are encoded here exactly as\n                          encoded in the call packet.
    \ These\n                          facilities do not include the marker\n                          facility
    code.\n                          A zero length string in the entry for the\n                          parameter
    to use when establishing a circuit\n                          means use the PLE
    default.  A zero length\n                          string in the entry for PLE
    default\n                          parameters indicates no default facilities.\"\n
    \                 REFERENCE \"See ISO 8206 Section 15.1, category c\"\n                  DEFVAL
    { ''h }\n                  ::= { x25CallParmEntry 30 }\n          -- ###########################################################\n
    \         --              X.25 Traps\n          -- ###########################################################\n
    \         x25Restart      TRAP-TYPE\n                  ENTERPRISE  x25\n                  VARIABLES
    { x25OperIndex }\n                  DESCRIPTION\n                          \"This
    trap means the X.25 PLE sent or\n                          received a restart
    packet.  The restart that\n                          brings up the link should
    not send a\n                          x25Restart trap so the interface should
    send\n                          a linkUp trap.  Sending this trap means the\n
    \                         agent does not send a linkDown and linkUp\n                          trap.\"\n
    \                 ::= 1\n          x25Reset        TRAP-TYPE\n                  ENTERPRISE
    \ x25\n                  VARIABLES { x25CircuitIndex,\n                          x25CircuitChannel
    }\n                  DESCRIPTION\n                          \"If the PLE sends
    or receives a reset, the\n                          agent should send an x25Reset
    trap.\"\n                  ::= 2\n          -- ###########################################################\n
    \         --              X.25 Protocol Version Identifiers\n          -- ###########################################################\n
    \         x25ProtocolVersion OBJECT IDENTIFIER\n                  ::= { x25 10
    }\n                  -- X.25 CCITT 1976 version.\n          x25protocolCcittV1976
    OBJECT IDENTIFIER\n                  ::= { x25ProtocolVersion 1 }\n                  --
    X.25 CCITT 1980 version.\n          x25protocolCcittV1980 OBJECT IDENTIFIER\n
    \                 ::= { x25ProtocolVersion 2 }\n                  -- X.25 CCITT
    1984 version.\n          x25protocolCcittV1984 OBJECT IDENTIFIER\n                  ::=
    { x25ProtocolVersion 3 }\n                  -- X.25 CCITT 1988 version.\n          x25protocolCcittV1988
    OBJECT IDENTIFIER\n                  ::= { x25ProtocolVersion 4 }\n                  --
    X.25 1987 version of ISO 8208.\n          x25protocolIso8208V1987 OBJECT IDENTIFIER\n
    \                 ::= { x25ProtocolVersion 5 }\n                  -- X.25 1989
    version of ISO 8208.\n          x25protocolIso8208V1989 OBJECT IDENTIFIER\n                  ::=
    { x25ProtocolVersion 6 }\n          -- ###########################################################\n
    \         END\n"
  title: 4.  Object Definitions
- contents:
  - "5. Appendix: Revision History\n          July 30 1992\n          The July, 1992
    release (Editor's Internal Reference Number\n          2.14) made the following
    changes:\n               The syntax of the index objects for tables that are\n
    \              congruent with the MIB-II ifTable were changed to\n               ifIndexType.\n
    \              The x25CallParmRefCount object was added to the\n               x25CallParmTable.\n
    \              The description of the x25CallParmTable and\n               x25CallParmIndex
    objects were changed to only allow\n               writing an entry with a zero
    reference count.\n               A requirement for conformance was added after
    the\n               definition of x25 in the ASN.1 definition.\n          June
    26 1992\n          The June 29, 1992 release (Editor's Internal Reference Number\n
    \         2.12) made the following changes:\n               The range of x25ChannelLIC
    was changed from (0..4096) to\n               (0..4095).\n               The range
    of x25ChannelHIC was changed from (0..4096) to\n               (0..4095).\n               The
    range of x25ChannelLTC was changed from (0..4096) to\n               (0..4095).\n
    \              The range of x25ChannelHTC was changed from (0..4096) to\n               (0..4095).\n
    \              The range of x25ChannelLOC was changed from (0..4096) to\n               (0..4095).\n
    \              The range of x25ChannelHOC was changed from (0..4096) to\n               (0..4095).\n
    \              The range of x25CircuitChannel was changed from (1..4096)\n               to
    (0..4095).\n               The range of x25ClearedCircuitChannel was changed from\n
    \              (1..4096) to (0..4095).\n          June 1992\n          The June
    92 release (Editor's Internal Reference Number 2.11)\n          made the following
    changes:\n               A value of dxe was defined for x25AdmnInterfaceMode and\n
    \              x25OperInterfaceMode.\n               The objects in the x25ChannelTable
    can now have a value\n               of zero to indicate no channels configured
    in the range.\n               The length of an X121Address was extended to 17
    to\n               accommodate the 1988 CCITT X.25 standard.\n               Some
    object descriptions have been expanded and\n               simplified, these include:
    \ all the channel table objects\n               except the index, x25AdmnDataRxmtCount,\n
    \              x25AdmnRejectCount, x25AdmnRegistrationRequestCount,\n               x25OperDataRxmtCount,
    x25OperRejectCount,\n               x25OperRegistrationRequestCount, x25CircuitEstablishTime,\n
    \              x25ClearedCircuitTimeEstablished,\n               x25ClearedCircuitTimeCleared,
    x25CallParmIndex,\n               x25CallParmInPacketSize, x25CircuitCalledAddress,\n
    \              x25CircuitOriginallCalledAddress,\n               x25CircuitCallingAddress,
    x25CallParmFastSelect,\n               x25CallParmCug, x25CallParmCugoa, x25CallParmBcug,\n
    \              x25CallParmNui, x25CallParmRpoa, x25CallParmCallingExt,\n               x25CallParmCalledExt,
    x25CallParmProtection,\n               x25StatInCallRefusals and x25CallParmOutPacketSize.\n
    \              The x25StatNumberPvcs object was deleted and\n               x25AdmnNumberPVCs
    and x25OperNumberPVCs objects added.\n               The object x25StatOutDataPackets
    was added.\n               The object x25AdmnProtocolVersionSupported as added.\n
    \              The x25CircuitRemoteDteAddress was deleted.\n               Some
    ASN.1 errors were corrected.\n          April 1992\n          The April release
    (Editor's Internal Reference Number 2.8)\n          made many changes to incorporate
    the comments of the working\n          group meeting in March 1992.\n               All
    reference comments were changed to reference fields.\n               The type
    PositiveInteger was imported from the RFC1381-\n               MIB and used for
    all index and timer values.\n               The x25PleTable was split into the
    x25AdmnTable,\n               x25OperTable, and x25StatTable.\n               The
    timer and counter objects from the x25CircuitTable\n               were moved
    to the x25AdmnTable and replicated in the\n               x25OperTable\n               The
    objects in the x25CircuitTable were reordered to put\n               the non-integer
    objects at the end of the table for\n               easier implementation.\n               The
    called and calling extension character set was\n               extended to include
    a-f, and A-F.\n               Additional states were added to the x25CircuitStatus\n
    \              object.\n               Additional values were added to x25CircuitDirection\n
    \              x25CircuitCallParamId, and the addresses in the Circuit\n               Table
    for PVCs.\n               The length of the X25Address was changed to 0..15.\n
    \              The objects x25ClearedCircuitTimeEstablished,\n               x25ClearedCircuitInPdus,
    and x25ClearedCircuitOutPdus\n               were added to the x25ClearedCircuitTable.\n
    \              The name of the x25CircuitName was changed to\n               x25CircuitDescr
    and the description was expanded.\n               The access of the x25CircuitCallParamId
    was changed to\n               read-only.\n               The x25ClearedCircuitCodes
    object was split into the\n               x25ClearedCircuitClearingCause and\n
    \              x25ClearedCircuitDiagnosticCode objects.\n               The semantics
    of the x25ClearedCircuitIndex was\n               redefined.\n               Some
    of the description clauses were changed in an\n               attempt to add clarity.\n
    \              DEFVAL clauses were added to most objects in the\n               x25CallParmTable.\n
    \              Additional text was added to the description section to\n               provide
    an overview of the tables of the MIB.\n               The minimum allowable value
    for maximum active circuits\n               was changed from one to zero.\n          February
    1992\n          The February release (Editor's Internal Reference Number 1.14)\n
    \         made many changes.\n               Many of the tables were combined.
    \ For example, the\n               x25InfoTable, x25PktStatTable, and x25TmrStatTable
    were\n               combined into the x25PleTable.  The x25ConInfoTable,\n               x25ConStatTable,
    and x25ConTimrTable were combined into\n               the x25CircuitTable.\n
    \              The objects for call parameters were drastically\n               reworked.
    \ All call parameters were combined in the\n               x25CallParmTable.  Any
    table, such as the  x25PleTable or\n               x25CircuitTable, that needs
    to reference call parameters\n               identifies an entry in the new table.
    \ As part of this\n               the x25ConDefTable was deleted and replaced
    with the\n               x25PleDefCallParamId.\n               The x25PvcTable
    was deleted; the x25CircuitStatus object\n               provides similar information
    about PVCs.\n               The x25ClearedCircuitTable was added to record the
    status\n               code of cleared circuits.\n               Many object definitions
    were restructured. For example,\n               the time units for timers was
    changed from 1/100ths of a\n               second to milliseconds.  Some indexes
    into tables were\n               replaced with object identifiers.\n               Much
    of the introductory text was changed and the\n               references were changed
    to match.\n          October 1991\n          The October release (Editor Internal
    Reference Number 1.10)\n          made the following changes:\n               Changed
    x25ConInfoStatus to clarify the description and\n               the pvcResetting(5)
    value was changed to pvcResetting(6)\n               to avoid a conflict with
    a previous use of the number 5.\n               The name of the counter object\n
    \              x25TmrStatRetryCountsExceeded was changed to\n               x25TmrStatRetryCountExceededs.\n
    \              The name of the counter object\n               x25TmrStatClearCountsExceeded
    was changed to\n               x25TmrStatClearCountExceededs.\n               All
    occurrence of Guage was changed to Gauge.\n               Added the x25CallFcltyTable,
    x25CallFcltyCcittTable, and\n               x25CallParamTable.\n          June
    1991\n          The June release corrected some syntax errors and cleaned up\n
    \         some other minor things.\n          April 1991\n          The April
    26 release of this document was the first release.\n          That version was
    derived from the ISO work on network layer\n          management as presented
    in ISO/IEC 10733 [11]\n"
  title: '5. Appendix: Revision History'
- contents:
  - '6.  Acknowledgements

    '
  title: 6.  Acknowledgements
- contents:
  - "This document was produced by the x25mib working group:\n               Fred
    Baker, ACC\n               Art Berggreen, ACC\n               Frank Bieser\n               Gary
    Bjerke, Tandem\n               Bill Bowman, HP\n               Christopher Bucci,
    Datability\n               Charles Carvalho, ACC\n               Jeff Case, Snmp
    Research\n               Angela Chen, HP\n               Carson Cheung, BNR\n
    \              Tom Daniel, Spider Systems\n               Chuck Davin, MIT\n               Billy
    Durham, Honeywell\n               Richard Fox, Synoptics\n               Doug
    Geller, Data General\n               Herve Goguely, LIR Corp\n               Andy
    Goldthorpe, british-telecom\n               Walter D. Guilarte\n               David
    Gurevich\n               Steve Huston, Process Software Corporation\n               Jon
    Infante, ICL\n               Frank Kastenholz, Clearpoint\n               Zbigniew
    Kielczewski, Eicon\n               Cheryl Krupezak, Georgia Tech\n               Mats
    Lindstrom, Diab Data AB\n               Andrew Malis, BBN\n               Evan
    McGinnis, 3Com\n               Gary (G.P.)Mussar, BNR\n               Chandy Nilakantan,
    3Com\n               Randy Pafford, Data General\n               Ragnar Paulson,
    The Software Group Limited\n               Dave Perkins, Synoptics\n               Walter
    Pinkarschewsky, DEC\n               Karen Quidley, Data General\n               Chris
    Ranch, Novell\n               Paul S. Rarey, DHL Systems Inc.\n               Jim
    Roche, Newbridge Research\n               Philippe Roger, LIR Corp.\n               Timon
    Sloane\n               Mike Shand, DEC\n               Brad Steina, Microcom\n
    \              Bob Stewart, Xyplex\n               Tom Sullivan, Data General\n
    \              Rodney Thayer, Sable Technology Corporation\n               Mark
    Therieau, Microcom\n               Jane Thorn, Data General\n               Dean
    Throop, Data General\n               Maurice Turcotte, Racal Datacom\n               Mike
    Zendels, Data General\n"
  title: 'This document was produced by the x25mib working group:'
- contents:
  - 'In addition, the contributions of the following individuals are also

    '
  title: In addition, the contributions of the following individuals are also
- contents:
  - "acknowledged:\n                   John Harper, DEC\n                   Chairman
    of the ISO committee for\n                   Network Level Management Information\n"
  title: 'acknowledged:'
- contents:
  - "7.  References\n   [1] Rose M., and K. McCloghrie, \"Structure and Identification
    of\n       Management Information for TCP/IP-based internets\", STD 16, RFC\n
    \      1155, Performance Systems International, Hughes LAN Systems, May\n       1990.\n
    \  [2] McCloghrie K., and M. Rose, \"Management Information Base for\n       Network
    Management of TCP/IP-based internets\", RFC 1156, Hughes\n       LAN Systems,
    Performance Systems International, May 1990.\n   [3] Case, J., Fedor, M., Schoffstall,
    M., and J. Davin, \"Simple\n       Network Management Protocol\", STD 15, RFC
    1157, SNMP Research,\n       Performance Systems International, Performance Systems\n
    \      International, MIT Laboratory for Computer Science, May 1990.\n   [4] Rose,
    M., and K. McCloghrie, Editors, \"Concise MIB Definitions\",\n       STD 16, RFC
    1212, Performance Systems International, Hughes LAN\n       Systems, March 1991.\n
    \  [5] Rose M., Editor, \"Management Information Base for Network\n       Management
    of TCP/IP-based internets: MIB-II\", STD 17, RFC 1213,\n       Performance Systems
    International, March 1991.\n   [6] Information processing systems - Open Systems
    Interconnection -\n       Specification of Abstract Syntax Notation One (ASN.1),\n
    \      International Organization for Standardization, International\n       Standard
    8824, December 1987.\n   [7] Information processing systems - Open Systems Interconnection
    -\n       Specification of Basic Encoding Rules for Abstract Notation One\n       (ASN.1),
    International Organization for Standardization,\n       International Standard
    8825, December 1987.\n   [8] Stewart, B., Editor, \"Definitions of Managed Objects
    for RS-232-\n       like Hardware Devices\", RFC 1317, Xyplex, Inc., April 1992.\n
    \  [9] Throop, D., Editor, \"SNMP MIB extension for LAPB\", RFC 1381, Data\n       General
    Corporation, November 1992.\n  [10] \"Information technology - - Data communication
    - X.25 Packet\n       layer Protocol for Data Terminal Equipment\", International\n
    \      Organization for Standardization, International Standard 8208,\n       March
    1990.\n  [11] \"Information Technology - Telecommunications and information\n
    \      exchange between systems - Elements of Management Information\n       Related
    to OSI network Layer Standards\", Committee Draft\n       International Standard
    10733, November 1990.\n"
  title: 7.  References
- contents:
  - "8.  Security Considerations\n   Security issues are not discussed in this memo.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  Authors' Addresses\n   Dean D. Throop\n   Data General Corporation\n   62
    Alexander Dr.\n   Research Triangle Park, NC 27709\n   Phone: (919)248-8421\n
    \  EMail: throop@dg-rtp.dg.com\n"
  title: 9.  Authors' Addresses
