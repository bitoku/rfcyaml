- title: __initial_text__
  contents:
  - "   Connectivity Preconditions for Session Description Protocol (SDP)\n      \
    \                       Media Streams\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a new connectivity precondition for the Session\n\
    \   Description Protocol (SDP) precondition framework.  A connectivity\n   precondition\
    \ can be used to delay session establishment or\n   modification until media stream\
    \ connectivity has been successfully\n   verified.  The method of verification\
    \ may vary depending on the type\n   of transport used for the media.  For unreliable\
    \ datagram transports\n   such as UDP, verification involves probing the stream\
    \ with data or\n   control packets.  For reliable connection-oriented transports\
    \ such as\n   TCP, verification can be achieved simply by successful connection\n\
    \   establishment or by probing the connection with data or control\n   packets,\
    \ depending on the situation.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5898.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Connectivity Precondition Definition . . . . . . . . .\
    \ . . . .  4\n     3.1.  Syntax . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     3.2.  Operational Semantics  . . . . . . . . . . . . . . . .\
    \ . .  4\n     3.3.  Status Type  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  5\n     3.4.  Direction Tag  . . . . . . . . . . . . . . . . . . . . . .\
    \  5\n     3.5.  Precondition Strength  . . . . . . . . . . . . . . . . . .  5\n\
    \   4.  Verifying Connectivity . . . . . . . . . . . . . . . . . . . .  6\n  \
    \   4.1.  Correlation of Dialog to Media Stream  . . . . . . . . . .  7\n    \
    \ 4.2.  Explicit Connectivity Verification Mechanisms  . . . . . .  7\n     4.3.\
    \  Verifying Connectivity for Connection-Oriented\n           Transports . . .\
    \ . . . . . . . . . . . . . . . . . . . . .  9\n   5.  Connectivity and Other\
    \ Precondition Types  . . . . . . . . . .  9\n   6.  Examples . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . 10\n   7.  Security Considerations  .\
    \ . . . . . . . . . . . . . . . . . . 14\n   8.  IANA Considerations  . . . .\
    \ . . . . . . . . . . . . . . . . . 15\n   9.  References . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 15\n     9.1.  Normative References . . . .\
    \ . . . . . . . . . . . . . . . 15\n     9.2.  Informative References . . . .\
    \ . . . . . . . . . . . . . . 16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The concept of a Session Description Protocol (SDP) [RFC4566]\n\
    \   precondition in the Session Initiation Protocol (SIP) [RFC3261] is\n   defined\
    \ in RFC 3312 [RFC3312] (updated by RFC 4032 [RFC4032]).  A\n   precondition is\
    \ a condition that has to be satisfied for a given\n   media stream in order for\
    \ session establishment or modification to\n   proceed.  When the precondition\
    \ is not met, session progress is\n   delayed until the precondition is satisfied\
    \ or the session\n   establishment fails.  For example, RFC 3312 [RFC3312] defines\
    \ the\n   Quality of Service precondition, which is used to ensure availability\n\
    \   of network resources prior to establishing a session (i.e., prior to\n   starting\
    \ to alert the callee).\n   SIP sessions are typically established in order to\
    \ set up one or more\n   media streams.  Even though a media stream may be negotiated\n\
    \   successfully through an SDP offer-answer exchange, the actual media\n   stream\
    \ itself may fail.  For example, when there is one or more\n   Network Address\
    \ Translators (NATs) or firewalls in the media path,\n   the media stream may\
    \ not be received by the far end.  In cases where\n   the media is carried over\
    \ a connection-oriented transport such as TCP\n   [RFC0793], the connection-establishment\
    \ procedures may fail.  The\n   connectivity precondition defined in this document\
    \ ensures that\n   session progress is delayed until media stream connectivity\
    \ has been\n   verified.\n   The connectivity precondition type defined in this\
    \ document follows\n   the guidelines provided in RFC 4032 [RFC4032] to extend\
    \ the SIP\n   preconditions framework.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 3.  Connectivity Precondition Definition
  contents:
  - '3.  Connectivity Precondition Definition

    '
- title: 3.1.  Syntax
  contents:
  - "3.1.  Syntax\n   The connectivity precondition type is defined by the string\
    \ \"conn\",\n   and hence we modify the grammar found in RFC 3312 [RFC3312] and\
    \ RFC\n   5027 [RFC5027] as follows:\n      precondition-type = \"conn\" / \"\
    sec\" / \"qos\" / token\n   This precondition tag is registered with the IANA\
    \ in Section 8.\n"
- title: 3.2.  Operational Semantics
  contents:
  - "3.2.  Operational Semantics\n   According to RFC 4032 [RFC4032], documents defining\
    \ new precondition\n   types need to describe the behavior of UAs (User Agents)\
    \ from the\n   moment session establishment is suspended due to a set of\n   preconditions,\
    \ until it is resumed when these preconditions are met.\n   An entity that wishes\
    \ to delay session establishment or modification\n   until media stream connectivity\
    \ has been established uses this\n   precondition-type in an offer.  When a mandatory\
    \ connectivity\n   precondition is received in an offer, session establishment\
    \ or\n   modification is delayed until the connectivity precondition has been\n\
    \   met (i.e., until media stream connectivity has been established in\n   the\
    \ desired direction or directions).  The delay of session\n   establishment defined\
    \ here implies that alerting of the called party\n   does not occur until the\
    \ precondition has been satisfied.\n   Packets may be both sent and received on\
    \ the media streams in\n   question.  However, such packets SHOULD be limited\
    \ to packets that\n   are necessary to verify connectivity between the two endpoints\n\
    \   involved on the media stream.  That is, the underlying media stream\n   SHOULD\
    \ NOT be cut through.  For example, Interactive Connectivity\n   Establishment\
    \ (ICE) connectivity checks [RFC5245] and TCP SYN, SYN-\n   ACK, and ACK packets\
    \ can be exchanged on media streams that support\n   them as a way of verifying\
    \ connectivity.\n   Some media streams are described by a single 'm' line but,\n\
    \   nevertheless, involve multiple addresses.  For example, RFC 5109\n   [RFC5109]\
    \ specifies how to send FEC (Forward Error Correction)\n   information as a separate\
    \ stream (the address for the FEC stream is\n   provided in an 'a=fmtp' line).\
    \  When a media stream consists of\n   multiple destination addresses, connectivity\
    \ to all of them MUST be\n   verified in order for the precondition to be met.\
    \  In the case of RTP\n   media streams [RFC3550] that use RTCP, connectivity\
    \ MUST be verified\n   for both RTP and RTCP; the RTCP transmission interval rules\
    \ MUST\n   still be adhered to.\n"
- title: 3.3.  Status Type
  contents:
  - "3.3.  Status Type\n   RFC 3312 [RFC3312] defines support for two kinds of status\
    \ types --\n   namely, segmented and end-to-end.  The connectivity precondition-type\n\
    \   defined here MUST be used with the end-to-end status type; use of the\n  \
    \ segmented status type is undefined.\n"
- title: 3.4.  Direction Tag
  contents:
  - "3.4.  Direction Tag\n   The direction attributes defined in RFC 3312 [RFC3312]\
    \ are\n   interpreted as follows:\n   o  send: the party that generated the session\
    \ description is sending\n      packets on the media stream to the other party,\
    \ and the other\n      party has received at least one of those packets.  That\
    \ is, there\n      is connectivity in the forward (sending) direction.\n   o \
    \ recv: the other party is sending packets on the media stream to\n      the party\
    \ that generated the session description, and this party\n      has received at\
    \ least one of those packets.  That is, there is\n      connectivity in the backwards\
    \ (receiving) direction.\n   o  sendrecv: both the send and recv conditions hold.\n\
    \   Note that a \"send\" connectivity precondition from the offerer's point\n\
    \   of view corresponds to a \"recv\" connectivity precondition from the\n   answerer's\
    \ point of view, and vice versa.  If media stream\n   connectivity in both directions\
    \ is required before session\n   establishment or modification continues, the\
    \ desired status needs to\n   be set to \"sendrecv\".\n"
- title: 3.5.  Precondition Strength
  contents:
  - "3.5.  Precondition Strength\n   Connectivity preconditions may have a strength-tag\
    \ of either\n   \"mandatory\" or \"optional\".\n   When a mandatory connectivity\
    \ precondition is offered and the\n   answerer cannot satisfy the connectivity\
    \ precondition (e.g., because\n   the offer does not include parameters that enable\
    \ connectivity to be\n   verified without media cut through) the offer MUST be\
    \ rejected as\n   described in RFC 3312 [RFC3312].\n   When an optional connectivity\
    \ precondition is offered, the answerer\n   MUST generate its answer SDP as soon\
    \ as possible.  Since session\n   progress is not delayed in this case, it is\
    \ not known whether the\n   associated media streams will have connectivity. \
    \ If the answerer\n   wants to delay session progress until connectivity has been\
    \ verified,\n   the answerer MUST increase the strength of the connectivity\n\
    \   precondition by using a strength-tag of \"mandatory\" in the answer.\n   Note\
    \ that use of a mandatory precondition requires the presence of a\n   SIP \"Require\"\
    \ header with the option tag \"precondition\".  Any SIP UA\n   that does not support\
    \ a mandatory precondition will reject such\n   requests.  To get around this\
    \ issue, an optional connectivity\n   precondition and the SIP \"Supported\" header\
    \ with the option tag\n   \"precondition\" can be used instead.\n   Offers with\
    \ connectivity preconditions in re-INVITEs or UPDATEs\n   follow the rules given\
    \ in Section 6 of RFC 3312 [RFC3312].  That is:\n      Both user agents SHOULD\
    \ continue using the old session parameters\n      until all the mandatory preconditions\
    \ are met.  At that moment,\n      the user agents can begin using the new session\
    \ parameters.\n"
- title: 4.  Verifying Connectivity
  contents:
  - "4.  Verifying Connectivity\n   Media stream connectivity is ascertained by use\
    \ of a connectivity\n   verification mechanism between the media endpoints.  A\
    \ connectivity\n   verification mechanism may be an explicit mechanism, such as\
    \ ICE\n   [RFC5245] or ICE TCP [ICE-TCP], or it may be an implicit mechanism,\n\
    \   such as TCP.  Explicit mechanisms provide specifications for when\n   connectivity\
    \ between two endpoints using an offer/answer exchange is\n   ascertained, whereas\
    \ implicit mechanisms do not.  The verification\n   mechanism is negotiated as\
    \ part of the normal offer/answer exchange;\n   however, it is not identified\
    \ explicitly.  More than one mechanism\n   may be negotiated, but the offerer\
    \ and answerer need not use the\n   same.  The following rules guide which connectivity\
    \ verification\n   mechanism to use:\n   o  If an explicit connectivity verification\
    \ mechanism (e.g., ICE) is\n      negotiated, the precondition is met when the\
    \ mechanism verifies\n      connectivity successfully.\n   o  Otherwise, if a\
    \ connection-oriented transport (e.g., TCP) is\n      negotiated, the precondition\
    \ is met when the connection is\n      established.\n   o  Otherwise, if an implicit\
    \ verification mechanism is provided by\n      the transport itself or the media\
    \ stream data using the transport,\n      the precondition is met when the mechanism\
    \ verifies connectivity\n      successfully.\n   o  Otherwise, connectivity cannot\
    \ be verified reliably, and the\n      connectivity precondition will never be\
    \ satisfied if requested.\n   This document does not mandate any particular connectivity\n\
    \   verification mechanism; however, in the following, we provide\n   additional\
    \ considerations for verification mechanisms.\n"
- title: 4.1.  Correlation of Dialog to Media Stream
  contents:
  - "4.1.  Correlation of Dialog to Media Stream\n   SIP and SDP do not provide any\
    \ inherent capabilities for associating\n   an incoming media stream packet with\
    \ a particular dialog.  Thus, when\n   an offerer is trying to ascertain connectivity,\
    \ and an incoming media\n   stream packet is received, the offerer may not know\
    \ which dialog had\n   its \"recv\" connectivity verified.  Explicit connectivity\
    \ verification\n   mechanisms therefore typically provide a means to correlate\
    \ the media\n   stream, whose connectivity is being verified, with a particular\
    \ SIP\n   dialog.  However, some connectivity verification mechanisms may not\n\
    \   provide such a correlation.  In the absence of a mechanism for the\n   correlation\
    \ of dialog to media stream (e.g., ICE), a UAS (User Agent\n   Server) MUST NOT\
    \ require the offerer to confirm a connectivity\n   precondition.\n"
- title: 4.2.  Explicit Connectivity Verification Mechanisms
  contents:
  - "4.2.  Explicit Connectivity Verification Mechanisms\n   Explicit connectivity\
    \ verification mechanisms typically use probe\n   traffic with some sort of feedback\
    \ to inform the sender whether\n   reception was successful.  Below we provide\
    \ two examples of such\n   mechanisms, and how they are used with connectivity\
    \ preconditions:\n   Interactive Connectivity Establishment (ICE) [RFC5245] provides\
    \ one\n   or more candidate addresses in signaling between the offerer and the\n\
    \   answerer and then uses STUN (Simple Traversal of the UDP Protocol\n   through\
    \ NAT) Binding Requests to determine which pairs of candidate\n   addresses have\
    \ connectivity.  Each STUN Binding Request contains a\n   password that is communicated\
    \ in the SDP as well; this enables\n   correlation between STUN Binding Requests\
    \ and candidate addresses for\n   a particular media stream.  It also provides\
    \ correlation with a\n   particular SIP dialog.\n   ICE implementations may be\
    \ either full or lite (see [RFC5245]).  Full\n   implementations generate and\
    \ respond to STUN Binding Requests,\n   whereas lite implementations only respond\
    \ to them.  With ICE, one\n   side is a controlling agent, and the other side\
    \ is a controlled\n   agent.  A full implementation can take on either role, whereas\
    \ a lite\n   implementation can only be a controlled agent.  The controlling agent\n\
    \   decides which valid candidate to use and informs the controlled agent\n  \
    \ of it by identifying the pair as the nominated pair.  This leads to\n   the\
    \ following connectivity precondition rules:\n   o  A full implementation ascertains\
    \ both \"send\" and \"recv\"\n      connectivity when it operates as a STUN client\
    \ and has sent a STUN\n      Binding Request that resulted in a successful check\
    \ for all the\n      components of the media stream (as defined further in ICE).\n\
    \   o  A full or a lite implementation ascertains \"recv\" connectivity\n    \
    \  when it operates as a STUN server and has received a STUN Binding\n      Request\
    \ that resulted in a successful response for all the\n      components of the\
    \ media stream (as defined further in ICE).\n   o  A lite implementation ascertains\
    \ \"send\" and \"recv\" connectivity\n      when the controlling agent has informed\
    \ it of the nominated pair\n      for all the components of the media stream.\n\
    \   A simpler and slightly more delay-prone alternative to the above\n   rules\
    \ is for all ICE implementations to ascertain \"send\" and \"recv\"\n   connectivity\
    \ for a media stream when the ICE state for that media\n   stream has moved to\
    \ Completed.\n   Note that there is never a need for the answerer to request\n\
    \   confirmation of the connectivity precondition when using ICE: the\n   answerer\
    \ can determine the status locally.  Also note, that when ICE\n   is used to verify\
    \ connectivity preconditions, the precondition is not\n   satisfied until connectivity\
    \ has been verified for all the component\n   transport addresses used by the\
    \ media stream.  For example, with an\n   RTP-based media stream where RTCP is\
    \ not suppressed, connectivity\n   MUST be ascertained for both RTP and RTCP.\
    \  Finally, it should be\n   noted, that although connectivity has been ascertained,\
    \ a new offer/\n   answer exchange may be required before media can flow (per\
    \ ICE).\n   The above are merely examples of explicit connectivity verification\n\
    \   mechanisms.  Other techniques can be used as well.  It is however\n   RECOMMENDED\
    \ that ICE be supported by entities that support\n   connectivity preconditions.\
    \  Use of ICE has the benefit of working\n   for all media streams (not just RTP)\
    \ as well as facilitating NAT and\n   firewall traversal, which may otherwise\
    \ interfere with connectivity.\n   Furthermore, the ICE recommendation provides\
    \ a baseline to ensure\n   that all entities that require probe traffic to support\
    \ the\n   connectivity preconditions have a common way of ascertaining\n   connectivity.\n"
- title: 4.3.  Verifying Connectivity for Connection-Oriented Transports
  contents:
  - "4.3.  Verifying Connectivity for Connection-Oriented Transports\n   Connection-oriented\
    \ transport protocols generally provide an implicit\n   connectivity verification\
    \ mechanism.  Connection establishment\n   involves sending traffic in both directions\
    \ thereby verifying\n   connectivity at the transport-protocol level.  When a\
    \ three-way (or\n   more) handshake for connection establishment succeeds, bi-directional\n\
    \   communication is confirmed and both the \"send\" and \"recv\"\n   preconditions\
    \ are satisfied whether requested or not.  In the case of\n   TCP for example,\
    \ once the TCP three-way handshake has completed (SYN,\n   SYN-ACK, ACK), the\
    \ TCP connection is established and data can be sent\n   and received by either\
    \ party (i.e., both a send and a receive\n   connectivity precondition has been\
    \ satisfied).  SCTP (Stream Control\n   Transmission Protocol) [RFC4960] connections\
    \ have similar semantics\n   as TCP and SHOULD be treated the same.\n   When a\
    \ connection-oriented transport is part of an offer, it may be\n   passive, active,\
    \ or active/passive [RFC4145].  When it is passive,\n   the offerer expects the\
    \ answerer to initiate the connection\n   establishment, and when it is active,\
    \ the offerer wants to initiate\n   the connection establishment.  When it is\
    \ active/passive, the\n   answerer decides.  As noted earlier, lack of a media-stream-to-dialog\n\
    \   correlation mechanism can make it difficult to guarantee with whom\n   connectivity\
    \ has been ascertained.  When the offerer takes on the\n   passive role, the offerer\
    \ will not necessarily know which SIP dialog\n   originated an incoming connection\
    \ request.  If the offerer instead is\n   active, this problem is avoided.\n"
- title: 5.  Connectivity and Other Precondition Types
  contents:
  - "5.  Connectivity and Other Precondition Types\n   The role of a connectivity\
    \ precondition is to ascertain media stream\n   connectivity before establishing\
    \ or modifying a session.  The\n   underlying intent is for the two parties to\
    \ be able to exchange media\n   packets successfully.  However, connectivity by\
    \ itself may not fully\n   satisfy this.  Quality of Service, for example, may\
    \ be required for\n   the media stream; this can be addressed by use of the \"\
    qos\"\n   precondition defined in RFC 3312 [RFC3312].  Similarly, successful\n\
    \   security parameter negotiation may be another prerequisite; this can\n   be\
    \ addressed by use of the \"sec\" precondition defined in RFC 5027\n   [RFC5027].\n"
- title: 6.  Examples
  contents:
  - "6.  Examples\n   The first example uses the connectivity precondition with TCP\
    \ in the\n   context of a session involving a wireless access medium.  Both UAs\n\
    \   use a radio access network that does not allow them to send any data\n   (not\
    \ even a TCP SYN) until a radio bearer has been set up for the\n   connection.\
    \  Figure 1 shows the message flow of this example (the\n   required PRACK transaction\
    \ has been omitted for clarity -- see\n   [RFC3312] for details):\n          \
    \     A                                    B\n               |  INVITE       \
    \                     |\n               |  a=curr:conn e2e none              |\n\
    \               |  a=des:conn mandatory e2e sendrecv |\n               |  a=setup:holdconn\
    \                  |\n               |----------------------------------->|\n\
    \               |                                    |\n               |  183\
    \ Session Progress              |\n               |  a=curr:conn e2e none    \
    \          |\n               |  a=des:conn mandatory e2e sendrecv |\n        \
    \       |  a=setup:holdconn                  |\n               |<-----------------------------------|\n\
    \               |                                    |\n               |  UPDATE\
    \                            |\n               |  a=curr:conn e2e none       \
    \       |\n               |  a=des:conn mandatory e2e sendrecv |\n     A's radio\
    \ |  a=setup:actpass                   |\n     bearer is +----------------------------------->|\n\
    \     up        |                                    |\n               |  200\
    \ OK                            |\n               |  a=curr:conn e2e none    \
    \          |\n               |  a=des:conn mandatory e2e sendrecv |\n        \
    \       |  a=setup:active                    |\n               |<-----------------------------------|\n\
    \               |                                    |\n               |     \
    \                               |\n               |                          \
    \          |\n               |                                    | B's radio\n\
    \               |<---TCP Connection Establishment--->+ bearer is up\n        \
    \       |                                    | B sends TCP SYN\n             \
    \  |                                    |\n               |                  \
    \                  |\n               |  180 Ringing                       | TCP\
    \ connection\n               |<-----------------------------------+ is up\n  \
    \             |                                    | B alerts the user\n     \
    \          |                                    |\n          Figure 1: Message\
    \ Flow with Two Types of Preconditions\n   A sends an INVITE requesting connection-establishment\
    \ preconditions.\n   The setup attribute in the offer is set to holdconn [RFC4145]\
    \ because\n   A cannot send or receive any data before setting up a radio bearer\n\
    \   for the connection.\n   B agrees to use the connectivity precondition by sending\
    \ a 183\n   (Session Progress) response.  The setup attribute in the answer is\n\
    \   also set to holdconn because B, like A, cannot send or receive any\n   data\
    \ before setting up a radio bearer for the connection.\n   When A's radio bearer\
    \ is ready, A sends an UPDATE to B with a setup\n   attribute with a value of\
    \ actpass.  This attribute indicates that A\n   can perform an active or a passive\
    \ TCP open.  A is letting B choose\n   which endpoint will initiate the connection.\n\
    \   Since B's radio bearer is not ready yet, B chooses to be the one\n   initiating\
    \ the connection and indicates this with a setup attribute\n   with a value of\
    \ active.  At a later point, when B's radio bearer is\n   ready, B initiates the\
    \ TCP connection towards A.\n   Once the TCP connection is established successfully,\
    \ B knows the\n   \"sendrecv\" precondition is satisfied, and B proceeds with\
    \ the session\n   (i.e., alerts the Callee), and sends a 180 (Ringing) response.\n\
    \   The second example shows a basic SIP session establishment using SDP\n   connectivity\
    \ preconditions and ICE (the required PRACK transaction\n   and some SDP details\
    \ have been omitted for clarity).  The offerer (A)\n   is a full ICE implementation\
    \ whereas the answerer (B) is a lite ICE\n   implementation.  The message flow\
    \ for this scenario is shown in\n   Figure 2 below.\n                  A     \
    \                                       B\n                  |               \
    \                             |\n                  |-------------(1) INVITE SDP1--------------->|\n\
    \                  |                                            |\n          \
    \        |<------(2) 183 Session Progress SDP2--------|\n                  | \
    \                                           |\n                  |~~~~~ Connectivity\
    \ check to B ~~~~~~~~~~~~~>|\n                  |<~~~~ Connectivity to B OK ~~~~~~~~~~~~~~~~~|\n\
    \                  |                                            |\n          \
    \        |-------------(3) UPDATE SDP3--------------->|\n                  | \
    \                                           |\n                  |<--------(4)\
    \ 200 OK (UPDATE) SDP4-----------|\n                  |                      \
    \                      |\n                  |<-------------(5) 180 Ringing---------------|\n\
    \                  |                                            |\n          \
    \        |                                            |\n     Figure 2: Connectivity\
    \ Precondition with ICE Connectivity Checks\n   SDP1: A includes a mandatory end-to-end\
    \ connectivity precondition\n   with a desired status of \"sendrecv\"; this will\
    \ ensure media stream\n   connectivity in both directions before continuing with\
    \ the session\n   setup.  Since media stream connectivity in either direction\
    \ is\n   unknown at this point, the current status is set to \"none\".  A's\n\
    \   local status table (see [RFC3312]) for the connectivity precondition\n   is\
    \ as follows:\n       Direction |  Current | Desired Strength |  Confirm\n   \
    \   -----------+----------+------------------+----------\n         send    | \
    \   no    |   mandatory      |    no\n         recv    |    no    |   mandatory\
    \      |    no\n   and the resulting offer SDP is:\n     a=ice-pwd:asd88fgpdd777uzjYhagZg\n\
    \     a=ice-ufrag:8hhY\n     m=audio 20000 RTP/AVP 0\n     c=IN IP4 192.0.2.1\n\
    \     a=rtcp:20001\n     a=curr:conn e2e none\n     a=des:conn mandatory e2e sendrecv\n\
    \     a=candidate:1 1 UDP 2130706431 192.0.2.1 20000 typ host\n   SDP2: When B\
    \ receives the offer, B sees the mandatory sendrecv\n   connectivity precondition.\
    \  B is a lite ICE implementation and hence\n   B can only ascertain \"recv\"\
    \ connectivity (from B's point of view)\n   from A; thus, B wants A to inform\
    \ it about connectivity in the other\n   direction (\"send\" from B's point of\
    \ view).  B's local status table\n   therefore looks as follows:\n       Direction\
    \ |  Current | Desired Strength |  Confirm\n      -----------+----------+------------------+----------\n\
    \         send    |    no    |   mandatory      |    no\n         recv    |  \
    \  no    |   mandatory      |    no\n   Since B is a lite ICE implementation and\
    \ B wants to ask A for\n   confirmation about the \"send\" (from B's point of\
    \ view) connectivity\n   precondition, the resulting answer SDP becomes:\n   \
    \  a=ice-lite\n     a=ice-pwd:qrCA8800133321zF9AIj98\n     a=ice-ufrag:H92p\n\
    \     m=audio 30000 RTP/AVP 0\n     c=IN IP4 192.0.2.4\n     a=rtcp:30001\n  \
    \   a=curr:conn e2e none\n     a=des:conn mandatory e2e sendrecv\n     a=conf:conn\
    \ e2e send\n     a=candidate:1 1 UDP 2130706431 192.0.2.4 30000 typ host\n   Since\
    \ the \"send\" and the \"recv\" connectivity precondition (from B's\n   point\
    \ of view) are still not satisfied, session establishment remains\n   suspended.\n\
    \   SDP3: When A receives the answer SDP, A notes that B is a lite ICE\n   implementation\
    \ and that confirmation was requested for B's \"send\"\n   connectivity precondition,\
    \ which is the \"recv\" precondition from A's\n   point of view.  A performs a\
    \ successful send and recv connectivity\n   check to B by sending an ICE connectivity\
    \ check to B and receiving\n   the corresponding response.  A's local status table\
    \ becomes:\n       Direction |  Current | Desired Strength |  Confirm\n      -----------+----------+------------------+----------\n\
    \         send    |    yes   |   mandatory      |    no\n         recv    |  \
    \  yes   |   mandatory      |    yes\n   whereas B's local status table becomes:\n\
    \       Direction | Current  | Desired Strength | Confirm\n      -----------+----------+------------------+----------\n\
    \         send    |    no    |   mandatory      |   no\n         recv    |   \
    \ yes   |   mandatory      |   no\n   Since B asked for confirmation about the\
    \ \"recv\" connectivity (from\n   A's point of view), A now sends an UPDATE (5)\
    \ to B to confirm the\n   connectivity from A to B:\n     a=ice-pwd:asd88fgpdd777uzjYhagZg\n\
    \     a=ice-ufrag:8hhY\n     m=audio 20000 RTP/AVP 0\n     c=IN IP4 192.0.2.1\n\
    \     a=rtcp:20001\n     a=curr:conn e2e sendrecv\n     a=des:conn mandatory e2e\
    \ sendrecv\n     a=candidate:1 1 UDP 2130706431 192.0.2.1 20000 typ host\n   B\
    \ knows it has recv connectivity (verified by ICE as well as A's\n   UPDATE) and\
    \ send connectivity (confirmed by A's UPDATE) at this\n   point.  B's local status\
    \ table becomes:\n       Direction | Current  | Desired Strength | Confirm\n \
    \     -----------+----------+------------------+----------\n         send    |\
    \    yes   |   mandatory      |   no\n         recv    |    yes   |   mandatory\
    \      |   no\n   and the session can continue.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   General security considerations for preconditions\
    \ are discussed in\n   RFC 3312 [RFC3312] and RFC 4032 [RFC4032].  As discussed\
    \ in RFC 4032\n   [RFC4032], it is strongly RECOMMENDED that S/MIME [RFC3853]\
    \ integrity\n   protection be applied to the SDP session descriptions.  When the\
    \ user\n   agent provides identity services (rather than the proxy server), the\n\
    \   SIP identity mechanism specified in RFC 4474 [RFC4474] provides an\n   alternative\
    \ end-to-end integrity protection.  Additionally, the\n   following security issues\
    \ relate specifically to connectivity\n   preconditions.\n   Connectivity preconditions\
    \ rely on mechanisms beyond SDP, such as TCP\n   [RFC0793] connection establishment\
    \ or ICE connectivity checks\n   [RFC5245], to establish and verify connectivity\
    \ between an offerer\n   and an answerer.  An attacker that prevents those mechanisms\
    \ from\n   succeeding (e.g., by keeping ICE connectivity checks from arriving\
    \ at\n   their destination) can prevent media sessions from being established.\n\
    \   While this attack relates to connectivity preconditions, it is\n   actually\
    \ an attack against the connection-establishment mechanisms\n   used by the endpoints.\
    \  This attack can be performed in the presence\n   or in the absence of connectivity\
    \ preconditions.  In their presence,\n   the whole session setup will be disrupted.\
    \  In their absence, only\n   the establishment of the particular stream under\
    \ attack will be\n   disrupted.  This specification does not provide any mechanism\
    \ against\n   attackers able to block traffic between the endpoints involved in\
    \ the\n   session because such an attacker will always be able to launch DoS\n\
    \   (Denial-of-Service) attacks.\n   Instead of blocking the connectivity checks,\
    \ the attacker can\n   generate forged connectivity checks that would cause the\
    \ endpoints to\n   assume that there was connectivity when there was actually\
    \ no\n   connectivity.  This attack would result in the user experience being\n\
    \   poor because the session would be established without all the media\n   streams\
    \ being ready.  The same attack can be used, regardless of\n   whether or not\
    \ connectivity preconditions are used, to attempt to\n   hijack a connection.\
    \  The forged connectivity checks would trick the\n   endpoints into sending media\
    \ to the wrong direction.  To prevent\n   these attacks, it is RECOMMENDED that\
    \ the mechanisms used to check\n   connectivity are adequately secured by message\
    \ authentication and\n   integrity protection.  For example, Section 2.5 of [RFC5245]\n\
    \   discusses how message integrity and data origin authentication are\n   implemented\
    \ in ICE connectivity checks.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   IANA has registered a new precondition type under\
    \ the Precondition\n   Types used with SIP subregistry, which is located under\
    \ the Session\n   Initiation Protocol (SIP) Parameters registry.\n   Precondition-Type\
    \  Description                          Reference\n   -----------------  -----------------------------------\
    \  ---------\n   conn               Connectivity precondition            [RFC5898]\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n\
    \              A., Peterson, J., Sparks, R., Handley, M., and E.\n           \
    \   Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n              June\
    \ 2002.\n   [RFC3312]  Camarillo, G., Marshall, W., and J. Rosenberg,\n      \
    \        \"Integration of Resource Management and Session Initiation\n       \
    \       Protocol (SIP)\", RFC 3312, October 2002.\n   [RFC3853]  Peterson, J.,\
    \ \"S/MIME Advanced Encryption Standard (AES)\n              Requirement for the\
    \ Session Initiation Protocol (SIP)\",\n              RFC 3853, July 2004.\n \
    \  [RFC4032]  Camarillo, G. and P. Kyzivat, \"Update to the Session\n        \
    \      Initiation Protocol (SIP) Preconditions Framework\",\n              RFC\
    \ 4032, March 2005.\n   [RFC4474]  Peterson, J. and C. Jennings, \"Enhancements\
    \ for\n              Authenticated Identity Management in the Session\n      \
    \        Initiation Protocol (SIP)\", RFC 4474, August 2006.\n   [RFC4566]  Handley,\
    \ M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description\
    \ Protocol\", RFC 4566, July 2006.\n   [RFC5027]  Andreasen, F. and D. Wing, \"\
    Security Preconditions for\n              Session Description Protocol (SDP) Media\
    \ Streams\",\n              RFC 5027, October 2007.\n   [RFC5245]  Rosenberg,\
    \ J., \"Interactive Connectivity Establishment\n              (ICE): A Protocol\
    \ for Network Address Translator (NAT)\n              Traversal for Offer/Answer\
    \ Protocols\", RFC 5245,\n              April 2010.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC0793]  Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n              RFC 793, September 1981.\n   [RFC3550]  Schulzrinne,\
    \ H., Casner, S., Frederick, R., and V.\n              Jacobson, \"RTP: A Transport\
    \ Protocol for Real-Time\n              Applications\", STD 64, RFC 3550, July\
    \ 2003.\n   [RFC4145]  Yon, D. and G. Camarillo, \"TCP-Based Media Transport in\n\
    \              the Session Description Protocol (SDP)\", RFC 4145,\n         \
    \     September 2005.\n   [RFC4960]  Stewart, R., \"Stream Control Transmission\
    \ Protocol\",\n              RFC 4960, September 2007.\n   [RFC5109]  Li, A.,\
    \ \"RTP Payload Format for Generic Forward Error\n              Correction\",\
    \ RFC 5109, December 2007.\n   [ICE-TCP]  Perreault, S., Ed. and J. Rosenberg,\
    \ \"TCP Candidates with\n              Interactive Connectivity Establishment\
    \ (ICE)\", Work\n              in Progress, October 2009.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Flemming Andreasen\n   Cisco Systems, Inc.\n   499 Thornall\
    \ Street, 8th Floor\n   Edison, NJ  08837\n   USA\n   EMail: fandreas@cisco.com\n\
    \   Gonzalo Camarillo\n   Ericsson\n   Hirsalantie 11\n   Jorvas  02420\n   Finland\n\
    \   EMail: Gonzalo.Camarillo@ericsson.com\n   David Oran\n   Cisco Systems, Inc.\n\
    \   7 Ladyslipper Lane\n   Acton, MA  01720\n   USA\n   EMail: oran@cisco.com\n\
    \   Dan Wing\n   Cisco Systems, Inc.\n   170 West Tasman Drive\n   San Jose, CA\
    \  95134\n   USA\n   EMail: dwing@cisco.com\n"
