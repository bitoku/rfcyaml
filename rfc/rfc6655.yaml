- contents:
  - '        AES-CCM Cipher Suites for Transport Layer Security (TLS)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This memo describes the use of the Advanced Encryption Standard
    (AES)\n   in the Counter with Cipher Block Chaining - Message Authentication\n
    \  Code (CBC-MAC) Mode (CCM) of operation within Transport Layer\n   Security
    (TLS) and Datagram TLS (DTLS) to provide confidentiality and\n   data origin authentication.
    \ The AES-CCM algorithm is amenable to\n   compact implementations, making it
    suitable for constrained\n   environments.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6655.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . . . 2\n   2.  Conventions Used in This Document . . . . . . . . . . .
    . . . . 3\n   3.  RSA-Based AES-CCM Cipher Suites . . . . . . . . . . . . . .
    . . 3\n   4.  PSK-Based AES-CCM Cipher Suites . . . . . . . . . . . . . . . .
    5\n   5.  TLS Versions  . . . . . . . . . . . . . . . . . . . . . . . . . 5\n
    \  6.  New AEAD Algorithms . . . . . . . . . . . . . . . . . . . . . . 5\n     6.1.
    \ AES-128-CCM with an 8-Octet Integrity Check Value (ICV) . . 6\n     6.2.  AES-256-CCM
    with a 8-Octet Integrity Check Value (ICV)  . . 6\n   7.  IANA Considerations
    . . . . . . . . . . . . . . . . . . . . . . 6\n   8.  Security Considerations
    . . . . . . . . . . . . . . . . . . . . 6\n     8.1.  Perfect Forward Secrecy
    . . . . . . . . . . . . . . . . . . 6\n     8.2.  Counter Reuse . . . . . . .
    . . . . . . . . . . . . . . . . 6\n   9.  Acknowledgements  . . . . . . . . .
    . . . . . . . . . . . . . . 7\n   10. References  . . . . . . . . . . . . . .
    . . . . . . . . . . . . 7\n     10.1. Normative References  . . . . . . . . .
    . . . . . . . . . . 7\n     10.2. Informative References  . . . . . . . . . .
    . . . . . . . . 8\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes the use of Advanced Encryption Standard
    (AES)\n   [AES] in Counter with CBC-MAC Mode (CCM) [CCM] in several TLS\n   ciphersuites.
    \ AES-CCM provides both authentication and\n   confidentiality and uses as its
    only primitive the AES encrypt\n   operation (the AES decrypt operation is not
    needed).  This makes it\n   amenable to compact implementations, which is advantageous
    in\n   constrained environments.  Of course, adoption outside of constrained\n
    \  environments is necessary to enable interoperability, such as that\n   between
    web clients and embedded servers or between embedded clients\n   and web servers.
    \ The use of AES-CCM has been specified for IPsec\n   Encapsulating Security Payload
    (ESP) [RFC4309] and 802.15.4 wireless\n   networks [IEEE802154].\n   Authenticated
    encryption, in addition to providing confidentiality\n   for the plaintext that
    is encrypted, provides a way to check its\n   integrity and authenticity.  Authenticated
    Encryption with Associated\n   Data, or AEAD [RFC5116], adds the ability to check
    the integrity and\n   authenticity of some associated data that is not encrypted.
    \ This\n   document utilizes the AEAD facility within TLS 1.2 [RFC5246] and the\n
    \  AES-CCM-based AEAD algorithms defined in [RFC5116].  Additional AEAD\n   algorithms
    are defined that use AES-CCM but have shorter\n   authentication tags and are
    therefore more suitable for use across\n   networks in which bandwidth is constrained
    and message sizes may be\n   small.\n   The ciphersuites defined in this document
    use RSA or Pre-Shared Key\n   (PSK) as their key establishment mechanism; these
    ciphersuites can be\n   used with DTLS [RFC6347].  Since the ability to use AEAD
    ciphers was\n   introduced in DTLS version 1.2, the ciphersuites defined in this\n
    \  document cannot be used with earlier versions of that protocol.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [RFC2119].\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  RSA-Based AES-CCM Cipher Suites\n   The ciphersuites defined in this document
    are based on the AES-CCM\n   Authenticated Encryption with Associated Data (AEAD)
    algorithms\n   AEAD_AES_128_CCM and AEAD_AES_256_CCM described in [RFC5116].  The\n
    \  following RSA-based ciphersuites are defined:\n             CipherSuite TLS_RSA_WITH_AES_128_CCM
    \      = {0xC0,0x9C}\n             CipherSuite TLS_RSA_WITH_AES_256_CCM       =
    {0xC0,0x9D)\n             CipherSuite TLS_DHE_RSA_WITH_AES_128_CCM   = {0xC0,0x9E}\n
    \            CipherSuite TLS_DHE_RSA_WITH_AES_256_CCM   = {0xC0,0x9F}\n             CipherSuite
    TLS_RSA_WITH_AES_128_CCM_8     = {0xC0,0xA0}\n             CipherSuite TLS_RSA_WITH_AES_256_CCM_8
    \    = {0xC0,0xA1)\n             CipherSuite TLS_DHE_RSA_WITH_AES_128_CCM_8 =
    {0xC0,0xA2}\n             CipherSuite TLS_DHE_RSA_WITH_AES_256_CCM_8 = {0xC0,0xA3}\n
    \  These ciphersuites make use of the AEAD capability in TLS 1.2\n   [RFC5246].
    \ Each uses AES-CCM; those that end in \"_8\" have an 8-octet\n   authentication
    tag, while the other ciphersuites have 16-octet\n   authentication tags.\n   The
    Hashed Message Authentication Code (HMAC) truncation option\n   described in Section
    7 of [RFC6066] (which negotiates the\n   \"truncated_hmac\" TLS extension) does
    not have an effect on cipher\n   suites that do not use HMAC.\n   The \"nonce\"
    input to the AEAD algorithm is exactly that of [RFC5288]:\n   the \"nonce\" SHALL
    be 12 bytes long and is constructed as follows:\n   (this is an example of a \"partially
    explicit\" nonce; see Section\n   3.2.1 in [RFC5116]).\n                       struct
    {\n             opaque salt[4];\n             opaque nonce_explicit[8];\n                       }
    CCMNonce;\n   The salt is the \"implicit\" part of the nonce and is not sent in
    the\n   packet.  Instead, the salt is generated as part of the handshake\n   process:
    it is either the client_write_IV (when the client is\n   sending) or the server_write_IV
    (when the server is sending).  The\n   salt length (SecurityParameters.fixed_iv_length)
    is 4 octets.  The\n   nonce_explicit is the \"explicit\" part of the nonce.  It
    is chosen by\n   the sender and is carried in each TLS record in the\n   GenericAEADCipher.nonce_explicit
    field.  The nonce_explicit length\n   (SecurityParameters.record_iv_length) is
    8 octets.  Each value of the\n   nonce_explicit MUST be distinct for each distinct
    invocation of the\n   GCM encrypt function for any fixed key.  Failure to meet
    this\n   uniqueness requirement can significantly degrade security.  The\n   nonce_explicit
    MAY be the 64-bit sequence number (as long as those\n   values are assured to
    meet the distinctness requirement).\n   In DTLS, the 64-bit seq_num is the 16-bit
    epoch concatenated with the\n   48-bit seq_num.\n   When the nonce_explicit is
    equal to the sequence number, the CCMNonce\n   will have the structure of the
    CCMNonceExample given below.\n              struct {\n               uint32 client_write_IV;
    // low order 32-bits\n               uint64 seq_num;         // TLS sequence number\n
    \             } CCMClientNonce.\n              struct {\n               uint32
    server_write_IV; // low order 32-bits\n               uint64 seq_num; // TLS sequence
    number\n              } CCMServerNonce.\n              struct {\n               case
    client:\n                 CCMClientNonce;\n               case server:\n                 CCMServerNonce:\n
    \             } CCMNonceExample;\n   These ciphersuites make use of the default
    TLS 1.2 Pseudorandom\n   Function (PRF), which uses HMAC with the SHA-256 hash
    function.  The\n   RSA and DHE_RSA, key exchange is performed as defined in [RFC5246].\n"
  title: 3.  RSA-Based AES-CCM Cipher Suites
- contents:
  - "4.  PSK-Based AES-CCM Cipher Suites\n   As in Section 3, these ciphersuites follow
    [RFC5116].  The PSK and\n   DHE_PSK key exchange is performed as in [RFC4279].
    \ The following\n   ciphersuites are defined:\n             CipherSuite TLS_PSK_WITH_AES_128_CCM
    \      = {0xC0,0xA4}\n             CipherSuite TLS_PSK_WITH_AES_256_CCM       =
    {0xC0,0xA5)\n             CipherSuite TLS_DHE_PSK_WITH_AES_128_CCM   = {0xC0,0xA6}\n
    \            CipherSuite TLS_DHE_PSK_WITH_AES_256_CCM   = {0xC0,0xA7}\n             CipherSuite
    TLS_PSK_WITH_AES_128_CCM_8     = {0xC0,0xA8}\n             CipherSuite TLS_PSK_WITH_AES_256_CCM_8
    \    = {0xC0,0xA9)\n             CipherSuite TLS_PSK_DHE_WITH_AES_128_CCM_8 =
    {0xC0,0xAA}\n             CipherSuite TLS_PSK_DHE_WITH_AES_256_CCM_8 = {0xC0,0xAB}\n
    \  The \"nonce\" input to the AEAD algorithm is defined as in Section 3.\n   These
    ciphersuites make use of the default TLS 1.2 Pseudorandom\n   Function (PRF),
    which uses HMAC with the SHA-256 hash function.  The\n   PSK and DHE_PSK key exchange
    is performed as defined in [RFC5487].\n"
  title: 4.  PSK-Based AES-CCM Cipher Suites
- contents:
  - "5.  TLS Versions\n   These ciphersuites make use of the authenticated encryption
    with\n   additional data (AEAD) defined in TLS 1.2 [RFC5288].  Earlier\n   versions
    of TLS do not have support for AEAD; for instance, the\n   TLSCiphertext structure
    does not have the \"aead\" option in TLS 1.1.\n   Consequently, these ciphersuites
    MUST NOT be negotiated in older\n   versions of TLS.  Clients MUST NOT offer these
    cipher suites if they\n   do not offer TLS 1.2 or later.  Servers that select
    an earlier\n   version of TLS MUST NOT select one of these cipher suites.  Because\n
    \  TLS has no way for the client to indicate that it supports TLS 1.2\n   but
    not earlier, a non-compliant server might potentially negotiate\n   TLS 1.1 or
    earlier and select one of the cipher suites in this\n   document.  Clients MUST
    check the TLS version and generate a fatal\n   \"illegal_parameter\" alert if
    they detect an incorrect version.\n"
  title: 5.  TLS Versions
- contents:
  - "6.  New AEAD Algorithms\n   The following AEAD algorithms are defined:\n        AEAD_AES_128_CCM_8
    \    = 18\n        AEAD_AES_256_CCM_8     = 19\n"
  - contents:
    - "6.1.  AES-128-CCM with an 8-Octet Integrity Check Value (ICV)\n   The AEAD_AES_128_CCM_8
      authenticated encryption algorithm is\n   identical to the AEAD_AES_128_CCM
      algorithm (see Section 5.3 of\n   [RFC5116]), except that it uses 8 octets for
      authentication, instead\n   of the full 16 octets used by AEAD_AES_128_CCM.
      \ The\n   AEAD_AES_128_CCM_8 ciphertext consists of the ciphertext output of\n
      \  the CCM encryption operation concatenated with the 8-octet\n   authentication
      tag output of the CCM encryption operation.  Test\n   cases are provided in
      [CCM].  The input and output lengths are the\n   same as those for AEAD_AES_128_CCM.
      \ An AEAD_AES_128_CCM_8 ciphertext\n   is exactly 8 octets longer than its corresponding
      plaintext.\n"
    title: 6.1.  AES-128-CCM with an 8-Octet Integrity Check Value (ICV)
  - contents:
    - "6.2.  AES-256-CCM with a 8-Octet Integrity Check Value (ICV)\n   The AEAD_AES_256_CCM_8
      authenticated encryption algorithm is\n   identical to the AEAD_AES_256_CCM
      algorithm (see Section 5.4 of\n   [RFC5116]), except that it uses 8 octets for
      authentication, instead\n   of the full 16 octets used by AEAD_AES_256_CCM.
      \ The\n   AEAD_AES_256_CCM_8 ciphertext consists of the ciphertext output of\n
      \  the CCM encryption operation concatenated with the 8-octet\n   authentication
      tag output of the CCM encryption operation.  Test\n   cases are provided in
      [CCM].  The input and output lengths are as for\n   AEAD_AES_128_CCM.  An AEAD_AES_128_CCM_8
      ciphertext is exactly 8\n   octets longer than its corresponding plaintext.\n"
    title: 6.2.  AES-256-CCM with a 8-Octet Integrity Check Value (ICV)
  title: 6.  New AEAD Algorithms
- contents:
  - "7.  IANA Considerations\n   IANA has assigned the values for the ciphersuites
    defined in Sections\n   3 and 4 from the \"TLS Cipher Suite\" registry and the
    values of the\n   AEAD algorithms defined in Section 6 from the \"AEAD Algorithms\"\n
    \  registry.\n"
  title: 7.  IANA Considerations
- contents:
  - '8.  Security Considerations

    '
  - contents:
    - "8.1.  Perfect Forward Secrecy\n   The perfect forward secrecy properties of
      RSA-based TLS ciphersuites\n   are discussed in the security analysis of [RFC5246].
      \ It should be\n   noted that only the ephemeral Diffie-Hellman-based ciphersuites
      are\n   capable of providing perfect forward secrecy.\n"
    title: 8.1.  Perfect Forward Secrecy
  - contents:
    - "8.2.  Counter Reuse\n   AES-CCM security requires that the counter is never
      reused.  The IV\n   construction in Section 3 is designed to prevent counter
      reuse.\n"
    title: 8.2.  Counter Reuse
  title: 8.  Security Considerations
- contents:
  - "9.  Acknowledgements\n   This document borrows heavily from [RFC5288].  Thanks
    are due to\n   Stephen Farrell and Robert Cragie for their input.\n"
  title: 9.  Acknowledgements
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [AES]         National Institute of Standards
      and Technology,\n                 \"Specification for the Advanced Encryption
      Standard\n                 (AES)\", FIPS 197, November 2001.\n   [CCM]         National
      Institute of Standards and Technology,\n                 \"Recommendation for
      Block Cipher Modes of Operation:\n                 The CCM Mode for Authentication
      and Confidentiality\",\n                 SP 800-38C, May 2004.\n   [RFC2119]
      \    Bradner, S., \"Key words for use in RFCs to Indicate\n                 Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC4279]     Eronen, P. and H.
      Tschofenig, \"Pre-Shared Key\n                 Ciphersuites for Transport Layer
      Security (TLS)\",\n                 RFC 4279, December 2005.\n   [RFC5116]     McGrew,
      D., \"An Interface and Algorithms for\n                 Authenticated Encryption\",
      RFC 5116, January 2008.\n   [RFC5246]     Dierks, T. and E. Rescorla, \"The
      Transport Layer\n                 Security (TLS) Protocol Version 1.2\", RFC
      5246,\n                 August 2008.\n   [RFC5288]     Salowey, J., Choudhury,
      A., and D. McGrew, \"AES Galois\n                 Counter Mode (GCM) Cipher
      Suites for TLS\", RFC 5288,\n                 August 2008.\n   [RFC5487]     Badra,
      M., \"Pre-Shared Key Cipher Suites for TLS with\n                 SHA-256/384
      and AES Galois Counter Mode\", RFC 5487,\n                 March 2009.\n   [RFC6066]
      \    Eastlake, D., \"Transport Layer Security (TLS)\n                 Extensions:
      Extension Definitions\", RFC 6066,\n                 January 2011.\n   [RFC6347]
      \    Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n                 Security
      Version 1.2\", RFC 6347, January 2012.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [IEEE802154]  Institute of Electrical and
      Electronics Engineers,\n                 \"Wireless Personal Area Networks\",
      IEEE\n                 Standard 802.15.4-2006, 2006.\n   [RFC4309]     Housley,
      R., \"Using Advanced Encryption Standard (AES)\n                 CCM Mode with
      IPsec Encapsulating Security Payload\n                 (ESP)\", RFC 4309, December
      2005.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Authors' Addresses\n   David McGrew\n   Cisco Systems\n   13600 Dulles Technology
    Drive\n   Herndon, VA  20171\n   USA\n   EMail: mcgrew@cisco.com\n   Daniel V.
    Bailey\n   RSA, Security Division of EMC\n   174 Middlesex Tpke.\n   Bedford,
    MA  01463\n   USA\n   EMail: dbailey@rsa.com\n"
  title: Authors' Addresses
