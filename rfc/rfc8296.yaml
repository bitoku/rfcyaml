- title: __initial_text__
  contents:
  - "        Encapsulation for Bit Index Explicit Replication (BIER)\n           \
    \          in MPLS and Non-MPLS Networks\n"
- title: Abstract
  contents:
  - "Abstract\n   Bit Index Explicit Replication (BIER) is an architecture that\n\
    \   provides optimal multicast forwarding through a \"multicast domain\",\n  \
    \ without requiring intermediate routers to maintain any per-flow state\n   or\
    \ to engage in an explicit tree-building protocol.  When a multicast\n   data\
    \ packet enters the domain, the ingress router determines the set\n   of egress\
    \ routers to which the packet needs to be sent.  The ingress\n   router then encapsulates\
    \ the packet in a BIER header.  The BIER\n   header contains a bit string in which\
    \ each bit represents exactly one\n   egress router in the domain; to forward\
    \ the packet to a given set of\n   egress routers, the bits corresponding to those\
    \ routers are set in\n   the BIER header.  The details of the encapsulation depend\
    \ on the type\n   of network used to realize the multicast domain.  This document\n\
    \   specifies a BIER encapsulation that can be used in an MPLS network\n   or,\
    \ with slight differences, in a non-MPLS network.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8296.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. BIER Header .....................................................5\n  \
    \    2.1. In MPLS Networks ...........................................5\n    \
    \       2.1.1. Encapsulation Initial Four Octets ...................5\n      \
    \            2.1.1.1. The BIER-MPLS Label ........................5\n        \
    \          2.1.1.2. Other Fields of the Initial Four Octets ....8\n          \
    \ 2.1.2. Remainder of Encapsulation ..........................9\n           2.1.3.\
    \ Further Encapsulating a BIER Packet ................12\n      2.2. In Non-MPLS\
    \ Networks ......................................13\n           2.2.1. Encapsulation\
    \ Initial Four Octets ..................13\n                  2.2.1.1. The BIFT-id\
    \ ...............................13\n                  2.2.1.2. Other Fields of\
    \ the Initial Four Octets ...13\n           2.2.2. Remainder of Encapsulation\
    \ .........................14\n           2.2.3. Further Encapsulating a BIER\
    \ Packet ................15\n   3. Imposing and Processing the BIER Encapsulation\
    \ .................16\n   4. IANA Considerations ............................................18\n\
    \   5. IEEE Considerations ............................................18\n  \
    \ 6. Security Considerations ........................................19\n   7.\
    \ References .....................................................20\n      7.1.\
    \ Normative References ......................................20\n      7.2. Informative\
    \ References ....................................21\n   Acknowledgements ..................................................22\n\
    \   Contributors ......................................................22\n  \
    \ Authors' Addresses ................................................24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   [RFC8279] describes a new architecture for the forwarding\
    \ of\n   multicast data packets.  Known as \"Bit Index Explicit Replication\"\n\
    \   (BIER), that architecture provides optimal forwarding of multicast\n   data\
    \ packets through a \"multicast domain\".  It does so without\n   requiring any\
    \ explicit tree-building protocol and without requiring\n   intermediate nodes\
    \ to maintain any per-flow state.\n   This document will use terminology defined\
    \ in [RFC8279].\n   A router that supports BIER is known as a \"Bit-Forwarding\
    \ Router\"\n   (BFR).  A \"BIER domain\" is a connected set of BFRs, each of which\
    \ has\n   been assigned a BFR-prefix.  A BFR-prefix is a routable IP address of\n\
    \   a BFR and is used by BIER to identify a BFR.  A packet enters a BIER\n   domain\
    \ at a Bit-Forwarding Ingress Router (BFIR) and leaves the BIER\n   domain at\
    \ one or more Bit-Forwarding Egress Routers (BFERs).  As\n   specified in [RFC8279],\
    \ each BFR of a given BIER domain is\n   provisioned to be in one or more \"sub-domains\"\
    \ (SDs).  In the context\n   of a given SD, each BFIR and BFER must have a BFR-id\
    \ that is unique\n   within that SD.  A BFR-id is just a number in the range [1,65535]\n\
    \   that, relative to a BIER SD, identifies a BFR uniquely.\n   As described in\
    \ [RFC8279], BIER requires that multicast data packets\n   be encapsulated with\
    \ a header that provides the information needed to\n   support the BIER forwarding\
    \ procedures.  This information includes\n   the SD to which the packet has been\
    \ assigned, a Set Identifier (SI),\n   a BitString, and a BitStringLength (BSL).\
    \  Together, these values are\n   used to identify the set of BFERs to which the\
    \ packet must be\n   delivered.\n   This document defines an encapsulation that\
    \ can be used in either\n   MPLS networks or non-MPLS networks.  However, the\
    \ construction and\n   processing of the BIER header are slightly different in\
    \ MPLS networks\n   than in non-MPLS networks.  In particular:\n   o  The handling\
    \ of certain fields in the encapsulation header (the\n      \"BIER header\") is\
    \ different, depending upon whether the underlying\n      network is an MPLS network\
    \ or not.\n   o  In an MPLS network, the first four octets of a BIER header are\n\
    \      also the bottom entry (the last four octets) of an MPLS label\n      stack.\n\
    \   The MPLS-based encapsulation is explained in detail in Section 2.1.\n   The\
    \ differences between the MPLS-based encapsulation and the non-MPLS\n   encapsulation\
    \ are explained in Section 2.2.\n   Following the BIER header is the \"payload\"\
    .  The payload may be an\n   IPv4 packet, an IPv6 packet, an Ethernet frame, an\
    \ MPLS packet, or an\n   Operations, Administration, and Maintenance (OAM) packet.\
    \  (The use\n   of BIER with other payload types is also possible but is not further\n\
    \   discussed in this document.)  The BIER header contains information\n   (the\
    \ Next Protocol field) identifying the type of the payload.\n   If the payload\
    \ is an MPLS packet, then an MPLS label stack\n   immediately follows the BIER\
    \ header.  The top label of this MPLS\n   label stack may be either a downstream-assigned\
    \ label [RFC3031] or an\n   upstream-assigned label [RFC5331].\n   The key words\
    \ \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\"\
    , \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\"\
    \ in this document are to be interpreted as described in\n   BCP 14 [RFC2119]\
    \ [RFC8174] when, and only when, they appear in all\n   capitals, as shown here.\n"
- title: 2.  BIER Header
  contents:
  - "2.  BIER Header\n   The BIER header is shown in Figure 1.\n      0          \
    \         1                   2                   3\n      0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |              BIFT-id                  | TC  |S|     TTL       |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |Nibble\
    \ |  Ver  |  BSL  |              Entropy                  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |OAM|Rsv|    DSCP   |   Proto   |            BFIR-id            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \              BitString  (first 32 bits)                     ~\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     ~                                                               ~\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     ~  \
    \              BitString  (last 32 bits)                      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                           Figure 1: BIER Header\n   The BIFT-id represents a\
    \ particular Bit Index Forwarding\n   Table (BIFT); see Section 6.4 of [RFC8279].\
    \  As explained in\n   [RFC8279], each BIFT corresponds to a particular combination\
    \ of SD,\n   BSL, and SI.\n   Section 2.1 explains how the fields of the encapsulation\
    \ header are\n   used in MPLS networks.  For those fields that are used differently\
    \ in\n   non-MPLS networks, Section 2.2 explains the differences.\n   The default\
    \ BitStringLength value for the encapsulations defined in\n   this document is\
    \ 256.  See Section 3 of [RFC8279] for a discussion of\n   the default BitStringLength\
    \ value.\n"
- title: 2.1.  In MPLS Networks
  contents:
  - '2.1.  In MPLS Networks

    '
- title: 2.1.1.  Encapsulation Initial Four Octets
  contents:
  - '2.1.1.  Encapsulation Initial Four Octets

    '
- title: 2.1.1.1.  The BIER-MPLS Label
  contents:
  - "2.1.1.1.  The BIER-MPLS Label\n   As stated in [RFC8279], when a BIER domain\
    \ is also an IGP domain, IGP\n   extensions can be used by each BFR to advertise\
    \ the BFR-id and\n   BFR-prefix.  The extensions for OSPF are given in\n   [OSPF_BIER_EXTENSIONS].\
    \  The extensions for IS-IS are given in\n   [ISIS_BIER_EXTENSIONS].\n   When\
    \ a particular BIER domain is both an IGP domain and an MPLS\n   network, we assume\
    \ that each BFR will also use IGP extensions to\n   advertise a set of one or\
    \ more \"BIER-MPLS\" labels.  When the domain\n   contains a single SD, a given\
    \ BFR needs to advertise one such label\n   for each combination of SI and BSL.\
    \  If the domain contains multiple\n   SDs, a BFR needs to advertise one such\
    \ label per SI per BSL for\n   each SD.\n   In some environments, the only routing\
    \ protocol in a BIER domain\n   might be BGP; in this case, the BGP extensions\
    \ described in\n   [BGP_BIER_EXTENSIONS] can be used to advertise the necessary\
    \ set of\n   BIER-MPLS labels.\n   The BIER-MPLS labels are locally significant\
    \ (i.e., unique only to\n   the BFR that advertises them) downstream-assigned\
    \ MPLS labels.\n   Penultimate hop popping [RFC3031] MUST NOT be applied to a\
    \ BIER-MPLS\n   label.\n   Suppose, for example, that there is a single SD (the\
    \ default SD),\n   that the network is using a BSL of 256, and that all BFERs\
    \ in the SD\n   have BFR-ids in the range [1,512].  Since each BIER BitString\
    \ is 256\n   bits long, this requires the use of two SIs: SI=0 and SI=1.  So each\n\
    \   BFR will advertise, via IGP extensions, two MPLS labels for BIER: one\n  \
    \ corresponding to SI=0 and one corresponding to SI=1.  The\n   advertisements\
    \ of these labels will also bind each label to the\n   default SD and to BSL 256.\n\
    \   As another example, suppose a particular BIER domain contains two SDs\n  \
    \ (SD 0 and SD 1), supports two BSLs (256 and 512), and contains\n   1024 BFRs.\
    \  A BFR that is provisioned for both SDs, and that supports\n   both BSLs, would\
    \ have to advertise the following set of BIER-MPLS\n   labels:\n      L1:   corresponding\
    \ to SD 0, BSL 256, SI 0.\n      L2:   corresponding to SD 0, BSL 256, SI 1.\n\
    \      L3:   corresponding to SD 0, BSL 256, SI 2.\n      L4:   corresponding\
    \ to SD 0, BSL 256, SI 3.\n      L5:   corresponding to SD 0, BSL 512, SI 0.\n\
    \      L6:   corresponding to SD 0, BSL 512, SI 1.\n      L7:   corresponding\
    \ to SD 1, BSL 256, SI 0.\n      L8:   corresponding to SD 1, BSL 256, SI 1.\n\
    \      L9:   corresponding to SD 1, BSL 256, SI 2.\n      L10:  corresponding\
    \ to SD 1, BSL 256, SI 3.\n      L11:  corresponding to SD 1, BSL 512, SI 0.\n\
    \      L12:  corresponding to SD 1, BSL 512, SI 1.\n   The above example should\
    \ not be taken as implying that the BFRs need\n   to advertise 12 individual labels.\
    \  For instance, instead of\n   advertising a label for <SD 1, BSL 512, SI 0>\
    \ and a label for\n   <SD 1, BSL 512, SI 1>, a BFR could advertise a contiguous\
    \ range of\n   labels (in this case, a range containing exactly two labels)\n\
    \   corresponding to <SD 1, BSL 512>.  The first label in the range could\n  \
    \ correspond to SI 0, and the second to SI 1.  The precise mechanism\n   for generating\
    \ and forming the advertisements is outside the scope of\n   this document; see\
    \ [OSPF_BIER_EXTENSIONS] and [ISIS_BIER_EXTENSIONS].\n   The BIER-MPLS label corresponding\
    \ to a particular combination of SD,\n   SI, and BSL is interpreted as representing\
    \ the BIFT that corresponds\n   to that same combination of SD, SI, and BSL. \
    \ That is, the BIER-MPLS\n   label performs the function of a BIFT-id.  This label\
    \ value is\n   carried in the BIFT-id field of the BIER encapsulation.\n   It\
    \ is crucial to understand that in an MPLS network the first\n   four octets of\
    \ the BIER encapsulation header are also the last\n   four octets of the MPLS\
    \ header.  Therefore, any prior MPLS label\n   stack entries MUST have the S bit\
    \ (see [RFC3032]) clear (i.e., the\n   S bit must be 0).\n   When a BFR receives\
    \ an MPLS packet and the next label to be processed\n   is one of its BIER-MPLS\
    \ labels, it will assume that the remainder of\n   the BIER header (see Section\
    \ 2.1.2) immediately follows the stack.\n   Note that in practice, labels only\
    \ have to be assigned if they are\n   going to be used.  If a particular BIER\
    \ domain supports BSLs 256 and\n   512, but some SD, say SD 1, only uses BSL 256,\
    \ then it is not\n   necessary to assign labels that correspond to the combination\
    \ of SD 1\n   and BSL 512.\n"
- title: 2.1.1.2.  Other Fields of the Initial Four Octets
  contents:
  - "2.1.1.2.  Other Fields of the Initial Four Octets\n   TC:\n      The \"Traffic\
    \ Class\" field [RFC5462] has its usual meaning in an\n      MPLS label stack\
    \ entry.\n   S bit:\n      When a BIER packet is traveling through an MPLS network,\
    \ the\n      high-order 20 bits of the initial four octets of the BIER\n     \
    \ encapsulation contain an MPLS label in the BIFT-id field.  These\n      four\
    \ octets are treated as the final entry in the packet's MPLS\n      label stack.\
    \  Hence, the S bit (see [RFC3032]) MUST be set to 1.\n      If there are any\
    \ MPLS label stack entries immediately preceding\n      the BIER encapsulation,\
    \ the S bit of those label stack entries\n      MUST be set to 0.\n   TTL:\n \
    \     This is the usual MPLS \"Time to Live\" field [RFC3032].  When a\n     \
    \ BIER packet is received, its \"incoming TTL\" (see below) is taken\n      from\
    \ this TTL field.\n      When a BIER packet is forwarded to one or more BFR adjacencies,\n\
    \      the BIER-MPLS label carried by the forwarded packet MUST have a\n     \
    \ TTL field whose value is one less than that of the packet's\n      incoming\
    \ TTL.\n      If a BIER packet's incoming TTL is 1 or greater and one of the\n\
    \      bits in its BitString identifies the current BFR, then the current\n  \
    \    BFR is a BFER for the packet.  Therefore, the current BFR MUST\n      process\
    \ the packet as a BFER, e.g., by removing the BIER\n      encapsulation and processing\
    \ the payload based on the contents of\n      the Proto (Next Protocol) field.\n\
    \      If the incoming TTL is 0, the packet is considered to be\n      \"expired\"\
    .  If the incoming TTL is 1 and the BitString has a bit\n      set that does not\
    \ identify the current BFR, the packet is also\n      considered to be expired.\
    \  Expired packets SHOULD be passed to an\n      error-handling procedure.  (Optional\
    \ implementation-specific\n      rate limiting may be applied to control the rate\
    \ at which packets\n      are passed to the error-handling procedure.)  Specification\
    \ of the\n      error-handling procedure is outside the scope of this document.\n\
    \      Note that if a received BIER packet has an incoming TTL of 1 and\n    \
    \  its BitString has a bit set identifying the current BFR, the\n      payload\
    \ MUST be processed by the current BFR, but the packet\n      MUST NOT be forwarded\
    \ further, and the packet SHOULD also be\n      passed to the error-handling procedures\
    \ for expired packets\n      (subject to any implementation-specific rate limiting).\n"
- title: 2.1.2.  Remainder of Encapsulation
  contents:
  - "2.1.2.  Remainder of Encapsulation\n   Nibble:\n      This field is set to the\
    \ binary value 0101; this ensures that the\n      MPLS ECMP logic will not confuse\
    \ the remainder of the BIER header\n      with an IP header or with the header\
    \ of a pseudowire packet.  In\n      an MPLS network, if a BFR receives a BIER\
    \ packet with any other\n      value in the first nibble after the label stack,\
    \ it SHOULD discard\n      the packet and log an error.\n   Ver:\n      This 4-bit\
    \ field identifies the version of the BIER header.  This\n      document specifies\
    \ version 0 of the BIER header.  If a packet is\n      received by a particular\
    \ BFR and that BFR does not support the\n      specified version of the BIER header,\
    \ the BFR MUST discard the\n      packet and log an error.\n      The value 0xF\
    \ is reserved for experimental use; that value\n      MUST NOT be assigned by\
    \ any future IETF document or by IANA.\n   BSL:\n      This 4-bit field encodes\
    \ the length in bits of the BitString.\n      Note: When parsing the BIER header,\
    \ a BFR MUST infer the length of\n      the BitString from the BIFT-id and MUST\
    \ NOT infer it from the\n      value of this field.  This field is present only\
    \ to enable offline\n      tools (such as LAN analyzers) to parse the BIER header.\n\
    \      If k is the length of the BitString, the value of this field is\n     \
    \ log2(k)-5.  However, only certain values are supported:\n         1: 64 bits\n\
    \         2: 128 bits\n         3: 256 bits\n         4: 512 bits\n         5:\
    \ 1024 bits\n         6: 2048 bits\n         7: 4096 bits\n      The value of\
    \ this field MUST NOT be set to any value other than\n      those listed above.\
    \  A received packet containing another value in\n      this field SHOULD be discarded\
    \ and an error logged.  If the value\n      in this field is other than what is\
    \ expected based on the\n      BIER-MPLS label, the packet SHOULD be discarded\
    \ and an error\n      logged.\n   Entropy:\n      This 20-bit field specifies\
    \ an \"entropy\" value that can be used\n      for load-balancing purposes.  The\
    \ BIER forwarding process may do\n      equal-cost load balancing, in which case\
    \ the load-balancing\n      procedure MUST choose the same path for any two packets\
    \ that have\n      the same entropy value and the same BitString.  Please see\n\
    \      Section 6.7 (\"Equal-Cost Multipath Forwarding\") of [RFC8279] for a\n\
    \      more detailed discussion of BIER load-balancing procedures.\n      If a\
    \ BFIR is encapsulating (as the payload) MPLS packets that have\n      entropy\
    \ labels, the BFIR MUST ensure that if two such packets have\n      the same MPLS\
    \ entropy label they also have the same value of the\n      BIER entropy field.\n\
    \   OAM:\n      By default, these two bits are set to 0 by the BFIR and are not\n\
    \      modified by other BFRs.  These two bits have no effect on the path\n  \
    \    taken by a BIER packet and have no effect on the quality of\n      service\
    \ applied to a BIER packet.\n      The use of these bits in other than the default\
    \ manner is\n      OPTIONAL.  Specification of the non-default use or uses of\
    \ these\n      bits is outside the scope of this document; see [BIER-PMM] for\
    \ an\n      example of such a specification.\n   Rsv:\n      These two bits are\
    \ currently unused.  They SHOULD be set to 0 upon\n      transmission and MUST\
    \ be ignored upon reception.\n   DSCP:\n      By default, this 6-bit field is\
    \ not used in MPLS networks.  The\n      default behavior is that all six bits\
    \ SHOULD be set to 0 upon\n      transmission and MUST be ignored upon reception.\n\
    \      Non-default use of this field in MPLS networks is outside the\n      scope\
    \ of this document.\n   Proto:\n      This 6-bit \"Next Protocol\" field identifies\
    \ the type of the\n      payload.  (The \"payload\" is the packet or frame immediately\n\
    \      following the BIER header.)  IANA has created a registry called\n     \
    \ \"BIER Next Protocol Identifiers\".  This field is to be populated\n      with\
    \ the appropriate entry from that registry.\n      If a BFER receives a BIER packet\
    \ but does not recognize (or does\n      not support) the value of the Next Protocol\
    \ field, the BFER SHOULD\n      discard the packet and log an error.\n   BFIR-id:\n\
    \      By default, this is the BFR-id of the BFIR, in the SD to which the\n  \
    \    packet has been assigned.  The BFR-id is encoded in the 16-bit\n      field\
    \ as an unsigned integer in the range [1,65535].\n      Certain applications may\
    \ require that the BFIR-id field contain\n      the BFR-id of a BFR other than\
    \ the BFIR.  However, that usage of\n      the BFIR-id field is outside the scope\
    \ of this document.\n   BitString:\n      This field holds the BitString that,\
    \ together with the packet's SI\n      and SD, identifies the destination BFERs\
    \ for this packet.  Note\n      that the SI and SD for the packet are not carried\
    \ explicitly in\n      the BIER header, as a particular BIFT-id always corresponds\
    \ to a\n      particular SI and SD.\n"
- title: 2.1.3.  Further Encapsulating a BIER Packet
  contents:
  - "2.1.3.  Further Encapsulating a BIER Packet\n   Sending a BIER packet from one\
    \ BFR to another may require the packet\n   to be further encapsulated.  For example,\
    \ in some scenarios it may be\n   necessary to encapsulate a BIER packet in an\
    \ Ethernet frame; in other\n   scenarios it may be necessary to encapsulate a\
    \ BIER packet in a UDP\n   packet.  In such cases, the BIER packet itself is the\
    \ payload of an\n   \"outer\" encapsulation.\n   In this document, we assume that\
    \ the frame or packet carrying a BIER\n   packet as its payload is a unicast frame\
    \ or packet.  That is,\n   although a BIER packet is a multicast packet, we assume\
    \ that the\n   frame or packet carrying the BIER packet as its payload is unicast\n\
    \   from one BFR to the next.\n   Generally, the outer encapsulation has a codepoint\
    \ identifying the\n   \"next protocol\".  The outer encapsulation's \"next protocol\"\
    \ codepoint\n   for MPLS MUST be used.  If a particular outer encapsulation has\
    \ a\n   codepoint for \"MPLS with downstream-assigned label\" and a different\n\
    \   codepoint for \"MPLS with upstream-assigned label\", the codepoint for\n \
    \  \"MPLS with downstream-assigned label\" MUST be used.\n   For example, if a\
    \ BIER packet is encapsulated in an Ethernet frame,\n   the Ethertype MUST be\
    \ 0x8847 [RFC5332], which is the Ethertype for a\n   unicast Ethernet frame that\
    \ carries an MPLS packet whose label stack\n   begins with a downstream-assigned\
    \ label.\n   In the special case where the outer encapsulation is MPLS, the outer\n\
    \   encapsulation has no \"next protocol\" codepoint.  All that is needed\n  \
    \ to encapsulate the BIER packet is to push more MPLS label stack\n   entries\
    \ (with the S bit clear) on the BIER packet's label stack.\n   If two BIER packets\
    \ have the same value in the entropy field of their\n   respective BIER headers\
    \ and if both are placed in an outer\n   encapsulation, it is desirable for the\
    \ outer encapsulation to\n   preserve the fact that the two packets have the same\
    \ entropy.  If the\n   outer encapsulation is MPLS and if the MPLS entropy label\
    \ [RFC6790]\n   is in use in a given deployment, one way to do this is to copy\
    \ the\n   value of the BIER header entropy field into an MPLS entropy label.\n"
- title: 2.2.  In Non-MPLS Networks
  contents:
  - '2.2.  In Non-MPLS Networks

    '
- title: 2.2.1.  Encapsulation Initial Four Octets
  contents:
  - '2.2.1.  Encapsulation Initial Four Octets

    '
- title: 2.2.1.1.  The BIFT-id
  contents:
  - "2.2.1.1.  The BIFT-id\n   In non-MPLS networks, a BIFT-id MUST be assigned for\
    \ every\n   combination of <SD, SI, BSL> that is to be used in that network. \
    \ The\n   correspondence between a BIFT-id and a particular <SD, SI, BSL>\n  \
    \ triple is unique throughout the BIER domain and is known to all the\n   BFRs\
    \ in the BIER domain.\n   The means by which the BIFT-ids are assigned, and the\
    \ means by which\n   these assignments are made known to the BFRs, are outside\
    \ the scope\n   of this document.\n   In an MPLS network, since the BIFT-id is\
    \ an MPLS label, its value may\n   be changed as a BIER packet goes from BFR to\
    \ BFR.  In a non-MPLS\n   network, since the BIFT-id is domain-wide unique, it\
    \ is not expected\n   to change as a BIER packet travels.\n"
- title: 2.2.1.2.  Other Fields of the Initial Four Octets
  contents:
  - "2.2.1.2.  Other Fields of the Initial Four Octets\n   TC:\n      By default,\
    \ the TC field has no significance in a non-MPLS\n      network.  The default\
    \ behavior is that this field SHOULD be set to\n      the binary value 000 upon\
    \ transmission and MUST be ignored upon\n      reception.\n      Non-default use\
    \ of this field in non-MPLS networks is outside the\n      scope of this document.\n\
    \   S bit:\n      The S bit has no significance in a non-MPLS network.  It SHOULD\
    \ be\n      set to 1 upon transmission, but it MUST be ignored upon reception.\n\
    \   TTL:\n      This is the BIER \"Time to Live\" field.  Its purpose is to prevent\n\
    \      BIER packets from looping indefinitely in the event of improper\n     \
    \ operation of the control plane.  When a BIER packet is received,\n      its\
    \ \"incoming TTL\" (see below) is taken from this TTL field.\n      The effect\
    \ of this field on the processing of a BIER packet is\n      described in Section\
    \ 2.1.1.2.\n"
- title: 2.2.2.  Remainder of Encapsulation
  contents:
  - "2.2.2.  Remainder of Encapsulation\n   Nibble:\n      This field SHOULD be set\
    \ to 0000 upon transmission but MUST be\n      ignored upon reception.\n   Ver:\n\
    \      See Section 2.1.2.\n   BSL:\n      See Section 2.1.2.\n   Entropy:\n  \
    \    See Section 2.1.2.\n   OAM:\n      See Section 2.1.2.\n   Rsv:\n      See\
    \ Section 2.1.2.\n   DSCP:\n      This 6-bit field MAY be used to hold a Differentiated\
    \ Services\n      Codepoint [RFC2474].  The significance of this field is outside\n\
    \      the scope of this document.\n   Proto:\n      See Section 2.1.2.\n   BFIR-id:\n\
    \      See Section 2.1.2.\n   BitString:\n      See Section 2.1.2.\n"
- title: 2.2.3.  Further Encapsulating a BIER Packet
  contents:
  - "2.2.3.  Further Encapsulating a BIER Packet\n   Sending a BIER packet from one\
    \ BFR to another may require the packet\n   to be further encapsulated.  For example,\
    \ in some scenarios it may be\n   necessary to encapsulate a BIER packet in an\
    \ Ethernet frame; in other\n   scenarios it may be necessary to encapsulate a\
    \ BIER packet in a UDP\n   packet.  In such cases, the BIER packet itself is the\
    \ payload of an\n   \"outer\" encapsulation.\n   In this document, we assume that\
    \ the frame or packet carrying a BIER\n   packet as its payload is a unicast frame\
    \ or packet.  That is,\n   although a BIER packet is a multicast packet, we assume\
    \ that the\n   frame or packet carrying the BIER packet as its payload is unicast\n\
    \   from one BFR to the next.\n   Generally, the outer encapsulation has a codepoint\
    \ identifying the\n   \"next protocol\".  This codepoint MUST be set to a value\
    \ that means\n   \"non-MPLS BIER\".  In particular, a codepoint that means \"\
    MPLS\" (with\n   either upstream-assigned or downstream-assigned labels) MUST\
    \ NOT\n   be used.\n   By requiring the use of a distinct codepoint for \"non-MPLS\
    \ BIER\", we\n   allow for deployment scenarios where non-MPLS BIER can coexist\
    \ with\n   non-BIER MPLS.  The BIFT-id values used by the former will not\n  \
    \ conflict with MPLS label values used by the latter.\n   Therefore, if a non-MPLS\
    \ BIER packet is encapsulated in an Ethernet\n   header, the Ethertype MUST NOT\
    \ be 0x8847 or 0x8848 [RFC5332].  IEEE\n   has assigned Ethertype 0xAB37 for non-MPLS\
    \ BIER packets.\n   In the special case where the outer encapsulation is MPLS,\
    \ the outer\n   encapsulation has no \"next protocol\" codepoint.  If it is necessary\n\
    \   to use MPLS as an outer encapsulation for BIER packets, it is\n   RECOMMENDED\
    \ to use the MPLS encapsulation for BIER.  Procedures for\n   encapsulating a\
    \ non-MPLS BIER packet in MPLS are outside the scope of\n   this document.\n \
    \  If two BIER packets have the same value in the entropy field of their\n   respective\
    \ BIER headers and if both are placed in an outer\n   encapsulation, it is desirable\
    \ for the outer encapsulation to\n   preserve the fact that the two packets have\
    \ the same entropy.\n"
- title: 3.  Imposing and Processing the BIER Encapsulation
  contents:
  - "3.  Imposing and Processing the BIER Encapsulation\n   Each BFIR is expected\
    \ to know the Maximum Transmission Unit (MTU) of\n   the BIER domain.  This may\
    \ be known by provisioning, or by some other\n   method outside the scope of this\
    \ document.  Each BFIR also knows the\n   size of the BIER encapsulation.  Thus,\
    \ each BFIR can deduce the\n   maximum size of the payload that can be encapsulated\
    \ in a BIER\n   packet.  We will refer to this payload size as the BIER-MTU.\n\
    \   If a BFIR receives a multicast packet from outside the BIER domain\n   and\
    \ the packet size exceeds the BIER-MTU, the BFIR takes whatever\n   action is\
    \ appropriate to take when receiving a multicast packet that\n   is too large\
    \ to be forwarded to all its next hops.  If the\n   appropriate action is to drop\
    \ the packet and advertise an MTU to the\n   source, then the BFIR drops the packet\
    \ and advertises the BIER-MTU.\n   If the appropriate action is to fragment the\
    \ packet, then the\n   procedures of this section are applied, in sequence, to\
    \ each\n   fragment.\n   When a BFIR processes a multicast packet (or fragment\
    \ thereof) from\n   outside the BIER domain, the BFIR carries out the following\n\
    \   procedure:\n   1.  By consulting the \"multicast flow overlay\" [RFC8279],\
    \ it\n       determines the value of the Proto field.\n   2.  By consulting the\
    \ multicast flow overlay, it determines the set\n       of BFERs that must receive\
    \ the packet.\n   3.  If more than one SD is supported, the BFIR assigns the packet\
    \ to\n       a particular SD.  Procedures for determining the SD to which a\n\
    \       particular packet should be assigned are outside the scope of\n      \
    \ this document.\n   4.  The BFIR looks up the BFR-id, in the given SD, of each\
    \ of the\n       BFERs.\n   5.  The BFIR converts each such BFR-id into \"SI:BitString\"\
    \ format, as\n       described in [RFC8279].\n   6.  All such BFR-ids that have\
    \ the same SI can be encoded into the\n       same BitString.  Details of this\
    \ encoding can be found in\n       [RFC8279].  For each distinct SI that occurs\
    \ in the list of the\n       packet's destination BFERs:\n       a.  The BFIR\
    \ makes a copy of the multicast data packet and\n           encapsulates the copy\
    \ in a BIER header (see Section 2).  The\n           BIER header contains the\
    \ BitString that represents all the\n           destination BFERs whose BFR-ids\
    \ (in the given SD) correspond\n           to the given SI.  It also contains\
    \ the BFIR's BFR-id in the\n           SD to which the packet has been assigned.\n\
    \           Note well that for certain applications it may be necessary\n    \
    \       for the BFIR-id field to contain the BFR-id of a BFR other\n         \
    \  than the BFIR that is creating the header.  Such uses are\n           outside\
    \ the scope of this document.\n       b.  The BFIR then applies to that copy the\
    \ forwarding procedure\n           of [RFC8279].  This may result in one or more\
    \ copies of the\n           packet (possibly with a modified BitString) being\
    \ transmitted\n           to a neighboring BFR.\n       c.  If the non-MPLS BIER\
    \ encapsulation is being used, the BIFT-id\n           field is set to the BIFT-id\
    \ that corresponds to the packet's\n           <SD, SI, BSL>.  The TTL is set\
    \ according to policy.\n           If the MPLS BIER encapsulation is being used,\
    \ the BFIR finds\n           the BIER-MPLS label that was advertised by the neighbor\
    \ as\n           corresponding to the given <SD, SI, BSL>.  An MPLS label\n  \
    \         stack is then prepended to the packet.  This label stack\n         \
    \  [RFC3032] will contain one label -- the aforementioned\n           BIER-MPLS\
    \ label.  The S bit MUST be set, indicating the end\n           of the MPLS label\
    \ stack.  The TTL field of this label stack\n           entry is set according\
    \ to policy.\n       d.  The packet may then be transmitted to the neighboring\
    \ BFR.\n           (In an MPLS network, this may result in additional MPLS\n \
    \          labels being pushed on the stack.  For example, if an RSVP-TE\n   \
    \        tunnel is used to transmit packets to the neighbor, a label\n       \
    \    representing that tunnel would be pushed onto the stack.)\n   When an intermediate\
    \ BFR is processing a received MPLS packet and one\n   of the BFR's own BIER-MPLS\
    \ labels rises to the top of the label\n   stack, the BFR infers the BSL from\
    \ the label.  The SI and SD are also\n   implicitly identified by the label. \
    \ The BFR then follows the\n   forwarding procedures of [RFC8279].  If it forwards\
    \ a copy of the\n   packet to a neighboring BFR, it first swaps the label at the\
    \ top of\n   the label stack with the BIER-MPLS label, advertised by that\n  \
    \ neighbor, that corresponds to the same <SD, SI, BSL>.  Note that when\n   this\
    \ swap operation is done, the TTL field of the BIER-MPLS label of\n   the outgoing\
    \ packet MUST be one less than the \"incoming TTL\" of the\n   packet, as defined\
    \ in Section 2.1.1.2.\n   When an intermediate BFR is processing a received non-MPLS\
    \ BIER\n   packet, the BFR infers the BSL from the BIFT-id.  The SI and SD are\n\
    \   also implicitly identified by the BIFT-id.  The BFR then follows the\n   forwarding\
    \ procedures of [RFC8279].\n   If the BIER payload is an MPLS packet, the BIER\
    \ header is followed by\n   an MPLS label stack.  This stack is separate from\
    \ any MPLS stack that\n   may precede the BIER header.  For an example of an application\
    \ where\n   it is useful to carry an MPLS packet as the BIER payload, see\n  \
    \ [BIER_MVPN].  If the BIER encapsulation's Proto field indicates that\n   the\
    \ payload is an MPLS packet with an upstream-assigned label at the\n   top of\
    \ the stack, the upstream-assigned label is interpreted in the\n   context of\
    \ <BFIR-id, sub-domain-id>.  Note that the sub-domain-id\n   must be inferred\
    \ from the BIFT-id.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   IANA has set up a registry called \"BIER Next Protocol\
    \ Identifiers\".\n   The registration policy for this registry is \"IETF Review\"\
    \ [RFC8126]\n   [RFC7120].\n   The initial values in the \"BIER Next Protocol\
    \ Identifiers\"\n   registry are:\n   0: Reserved\n   1: MPLS packet with downstream-assigned\
    \ label at top of stack\n   2: MPLS packet with upstream-assigned label at top\
    \ of stack\n   3: Ethernet frame\n   4: IPv4 packet\n   5: OAM packet (Reference:\
    \ [BIER_PING])\n   6: IPv6 packet\n   63:  Reserved\n"
- title: 5.  IEEE Considerations
  contents:
  - "5.  IEEE Considerations\n   IEEE has assigned Ethertype 0xAB37 for non-MPLS BIER\
    \ packets.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Insofar as this document makes use of MPLS, it\
    \ inherits any security\n   considerations that apply to the use of the MPLS data\
    \ plane.\n   If a BIER encapsulation header is modified in ways other than those\n\
    \   specified in [RFC8279] and in this document, packets may be lost,\n   stolen,\
    \ or otherwise misdelivered.  Such modifications are likely to\n   go undetected,\
    \ as the BIER encapsulation does not provide\n   cryptographic integrity protection.\n\
    \   Layer 2 encryption can be used to ensure that a BIER-encapsulated\n   packet\
    \ is not altered while in transit between adjacent BFRs.  If a\n   BFR itself\
    \ is compromised, there is no way to prevent the compromised\n   BFR from making\
    \ illegitimate modifications to the BIER header or to\n   prevent it from misforwarding\
    \ or misdelivering the BIER-encapsulated\n   packet.\n   If the routing underlay\
    \ (see Section 4.1 of [RFC8279]) is based on a\n   unicast routing protocol, BIER\
    \ assumes that the routers participating\n   in the unicast routing protocol have\
    \ not been compromised.  BIER has\n   no procedures to ensure that the unicast\
    \ routing adjacencies have not\n   been compromised; that falls within the scope\
    \ of whatever unicast\n   routing protocols are being used.\n   BIER-encapsulated\
    \ packets should generally not be accepted from\n   untrusted interfaces or tunnels.\
    \  For example, an operator may wish\n   to have a policy of accepting BIER-encapsulated\
    \ packets only from\n   interfaces to trusted routers, and not from customer-facing\n\
    \   interfaces.\n   There may be applications that require a BFR to accept a\n\
    \   BIER-encapsulated packet from an interface to a system that is not\n   controlled\
    \ by the network operator.  For instance, there may be an\n   application in which\
    \ a virtual machine in a data center submits\n   BIER-encapsulated packets to\
    \ a router.  In such a case, it is\n   desirable to verify that the packet is\
    \ from a legitimate source and\n   that its BitString denotes only systems to\
    \ which that source is\n   allowed to send.  However, the BIER encapsulation itself\
    \ does not\n   provide a way to verify that the source is (1) legitimate, (2)\
    \ really\n   the system denoted by the BFIR-id, or (3) allowed to set any\n  \
    \ particular set of bits in the BitString.\n   Insofar as this document relies\
    \ upon IGP extensions, it inherits any\n   security considerations that apply\
    \ to the IGP.\n   The security considerations of [RFC8279] also apply.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2474]  Nichols, K., Blake, S., Baker, F., and D. Black,\n            \
    \  \"Definition of the Differentiated Services Field\n              (DS Field)\
    \ in the IPv4 and IPv6 Headers\", RFC 2474,\n              DOI 10.17487/RFC2474,\
    \ December 1998,\n              <https://www.rfc-editor.org/info/rfc2474>.\n \
    \  [RFC3031]  Rosen, E., Viswanathan, A., and R. Callon, \"Multiprotocol\n   \
    \           Label Switching Architecture\", RFC 3031,\n              DOI 10.17487/RFC3031,\
    \ January 2001,\n              <https://www.rfc-editor.org/info/rfc3031>.\n  \
    \ [RFC3032]  Rosen, E., Tappan, D., Fedorkow, G., Rekhter, Y.,\n             \
    \ Farinacci, D., Li, T., and A. Conta, \"MPLS Label Stack\n              Encoding\"\
    , RFC 3032, DOI 10.17487/RFC3032, January 2001,\n              <https://www.rfc-editor.org/info/rfc3032>.\n\
    \   [RFC5331]  Aggarwal, R., Rekhter, Y., and E. Rosen, \"MPLS Upstream\n    \
    \          Label Assignment and Context-Specific Label Space\",\n            \
    \  RFC 5331, DOI 10.17487/RFC5331, August 2008,\n              <https://www.rfc-editor.org/info/rfc5331>.\n\
    \   [RFC5332]  Eckert, T., Rosen, E., Ed., Aggarwal, R., and Y. Rekhter,\n   \
    \           \"MPLS Multicast Encapsulations\", RFC 5332,\n              DOI 10.17487/RFC5332,\
    \ August 2008,\n              <https://www.rfc-editor.org/info/rfc5332>.\n   [RFC5462]\
    \  Andersson, L. and R. Asati, \"Multiprotocol Label Switching\n             \
    \ (MPLS) Label Stack Entry: \"EXP\" Field Renamed to \"Traffic\n             \
    \ Class\" Field\", RFC 5462, DOI 10.17487/RFC5462,\n              February 2009,\
    \ <https://www.rfc-editor.org/info/rfc5462>.\n   [RFC7120]  Cotton, M., \"Early\
    \ IANA Allocation of Standards Track Code\n              Points\", BCP 100, RFC\
    \ 7120, DOI 10.17487/RFC7120,\n              January 2014, <https://www.rfc-editor.org/info/rfc7120>.\n\
    \   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n      \
    \        Writing an IANA Considerations Section in RFCs\", BCP 26,\n         \
    \     RFC 8126, DOI 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n         \
    \     RFC 2119 Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174,\
    \ May 2017,\n              <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8279]\
    \  Wijnands, IJ., Ed., Rosen, E., Ed., Dolganow, A.,\n              Przygienda,\
    \ T., and S. Aldrin, \"Multicast Using Bit Index\n              Explicit Replication\
    \ (BIER)\", RFC 8279,\n              DOI 10.17487/RFC8279, November 2017,\n  \
    \            <https://www.rfc-editor.org/info/rfc8279>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [BGP_BIER_EXTENSIONS]\n              Xu, X.,\
    \ Ed., Chen, M., Patel, K., Wijnands, IJ., and A.\n              Przygienda, \"\
    BGP Extensions for BIER\", Work in Progress,\n              draft-ietf-bier-idr-extensions-04,\
    \ January 2018.\n   [BIER-PMM] Mirsky, G., Zheng, L., Chen, M., and G. Fioccola,\n\
    \              \"Performance Measurement (PM) with Marking Method in Bit\n   \
    \           Index Explicit Replication (BIER) Layer\", Work in\n             \
    \ Progress, draft-ietf-bier-pmmm-oam-03, October 2017.\n   [BIER_MVPN]\n     \
    \         Rosen, E., Ed., Sivakumar, M., Aldrin, S., Dolganow, A.,\n         \
    \     and T. Przygienda, \"Multicast VPN Using BIER\", Work in\n             \
    \ Progress, draft-ietf-bier-mvpn-09, November 2017.\n   [BIER_PING]\n        \
    \      Kumar, N., Pignataro, C., Akiya, N., Zheng, L., Chen, M.,\n           \
    \   and G. Mirsky, \"BIER Ping and Trace\", Work in Progress,\n              draft-ietf-bier-ping-02,\
    \ July 2017.\n   [ISIS_BIER_EXTENSIONS]\n              Ginsberg, L., Ed., Przygienda,\
    \ A., Aldrin, S., and J.\n              Zhang, \"BIER support via ISIS\", Work\
    \ in Progress,\n              draft-ietf-bier-isis-extensions-06, October 2017.\n\
    \   [OSPF_BIER_EXTENSIONS]\n              Psenak, P., Ed., Kumar, N., Wijnands,\
    \ IJ., Dolganow, A.,\n              Przygienda, T., Zhang, J., and S. Aldrin,\
    \ \"OSPF Extensions\n              for BIER\", Work in Progress, draft-ietf-bier-ospf-bier-\n\
    \              extensions-10, December 2017.\n   [RFC6790]  Kompella, K., Drake,\
    \ J., Amante, S., Henderickx, W., and\n              L. Yong, \"The Use of Entropy\
    \ Labels in MPLS Forwarding\",\n              RFC 6790, DOI 10.17487/RFC6790,\
    \ November 2012,\n              <https://www.rfc-editor.org/info/rfc6790>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors wish to thank Rajiv Asati, John Bettink, Nagendra\
    \ Kumar,\n   Christian Martin, Neale Ranns, Greg Shepherd, Ramji Vaithianathan,\n\
    \   Xiaohu Xu, and Jeffrey Zhang for their ideas and contributions to\n   this\
    \ work.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following people (listed in alphabetical order) contributed\n\
    \   significantly to the content of this document and should be\n   considered\
    \ co-authors:\n   Mach(Guoyi) Chen\n   Huawei\n   Email: mach.chen@huawei.com\n\
    \   Arkadiy Gulko\n   Thomson Reuters\n   195 Broadway\n   New York, NY  10007\n\
    \   United States of America\n   Email: arkadiy.gulko@thomsonreuters.com\n   Wim\
    \ Henderickx\n   Nokia\n   Copernicuslaan 50\n   Antwerp  2018\n   Belgium\n \
    \  Email: wim.henderickx@nokia.com\n   Martin Horneffer\n   Deutsche Telekom\n\
    \   Hammer Str. 216-226\n   Muenster  48153\n   Germany\n   Email: Martin.Horneffer@telekom.de\n\
    \   Uwe Joorde\n   Deutsche Telekom\n   Hammer Str. 216-226\n   Muenster  D-48153\n\
    \   Germany\n   Email: Uwe.Joorde@telekom.de\n   Tony Przygienda\n   Juniper Networks,\
    \ Inc.\n   1194 N. Mathilda Ave.\n   Sunnyvale, California  94089\n   United States\
    \ of America\n   Email: prz@juniper.net\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   IJsbrand Wijnands (editor)\n   Cisco Systems, Inc.\n \
    \  De Kleetlaan 6a\n   Diegem  1831\n   Belgium\n   Email: ice@cisco.com\n   Eric\
    \ C. Rosen (editor)\n   Juniper Networks, Inc.\n   10 Technology Park Drive\n\
    \   Westford, Massachusetts  01886\n   United States of America\n   Email: erosen@juniper.net\n\
    \   Andrew Dolganow\n   Nokia\n   438B Alexandra Rd #08-07/10\n   Alexandra Technopark\n\
    \   Singapore  119968\n   Singapore\n   Email: andrew.dolganow@nokia.com\n   Jeff\
    \ Tantsura\n   Individual\n   Email: jefftant.ietf@gmail.com\n   Sam K. Aldrin\n\
    \   Google, Inc.\n   1600 Amphitheatre Parkway\n   Mountain View, California \
    \ 94043\n   United States of America\n   Email: aldrin.ietf@gmail.com\n   Israel\
    \ Meilik\n   Broadcom\n   Email: israel@broadcom.com\n"
