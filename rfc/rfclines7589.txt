Abstract The Network Configuration Protocol (NETCONF) provides mechanisms to install, manipulate, and delete the configuration of network devices.
This document describes how to use the Transport Layer Security (TLS) protocol with mutual X.509 authentication to secure the exchange of NETCONF messages.
This revision of RFC 5539 documents
the new message framing used by NETCONF 1.1
and it obsoletes RFC 5539.
The NETCONF protocol [RFC6241] defines a mechanism through which a network device can be managed.
NETCONF is connection oriented, requiring a persistent connection between peers.
This connection must provide integrity, confidentiality, peer authentication, and reliable, sequenced data delivery.
This document defines how NETCONF messages can be exchanged over Transport Layer Security (TLS) [RFC5246].
Implementations MUST support mutual TLS certificate based authentication [RFC5246].
This assures the NETCONF server of the identity of the principal who wishes to manipulate the management information.
It also assures the NETCONF client of the identity of the server for which it wishes to manipulate the management information.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The peer acting as the NETCONF client MUST act as the TLS client.
The TLS client actively opens the TLS connection and the TLS server passively listens for the incoming TLS connections.
The well known TCP port number 6513 is used by NETCONF servers to listen for TCP connections established by NETCONF over TLS clients.
The TLS client MUST send the TLS ClientHello message to begin the TLS handshake.
The TLS server MUST send a CertificateRequest in order to request a certificate from the TLS client.
Once the TLS handshake has finished, the client and the server MAY begin to exchange NETCONF messages.
Client and server identity verification is done before the NETCONF <hello> message is sent.
This means that the identity verification is completed before the NETCONF session is started.
Message Framing All NETCONF messages MUST be sent as TLS "application data".
It is possible for multiple NETCONF messages to be contained in one TLS record, or for a NETCONF message to be transferred in multiple TLS records.
The previous version of this specification [RFC5539] used the framing sequence defined in [RFC4742].
This version aligns with [RFC6242] and adopts the framing protocol defined in [RFC6242] as follows:
The NETCONF <hello> message MUST be followed by the character sequence ]]
Upon reception of the <hello> message, the peers inspect the announced capabilities.
base:1.1 capability is advertised by both peers, the chunked framing mechanism defined in Section 4.2 of [RFC6242]
is used for the remainder of the NETCONF session.
Otherwise, the old end of message based mechanism (see Section 4.3 of [RFC6242]) is used.
A NETCONF server will process NETCONF messages from the NETCONF client in the order in which they are received.
A NETCONF session is closed using the <close session> operation.
When the NETCONF server processes a <close session> operation, the NETCONF server SHALL respond and close the TLS session as described in Section 7.2.1 of [RFC5246].
Both peers MUST use X.509 certificate path validation [RFC5280] to verify the integrity of the certificate presented by the peer.
The presented X.509 certificate may also be considered valid if it matches one obtained by another trusted mechanism, such as using a locally configured certificate fingerprint.
If X.509 certificate path validation fails and the presented X.509 certificate does not match a certificate obtained by a trusted mechanism, the connection MUST be terminated as defined in [RFC5246].
The NETCONF client MUST check the identity of the server according to Section 6 of [RFC6125].
The NETCONF server MUST verify the identity of the NETCONF client to ensure that the incoming request to establish a NETCONF session is legitimate before the NETCONF session is started.
The NETCONF protocol [RFC6241] requires that the transport protocol's authentication process results in an authenticated NETCONF client identity whose permissions are known to the server.
The authenticated identity of a client is commonly referred to as the NETCONF username.
The following algorithm is used by the NETCONF server to derive a NETCONF username from a certificate.
(Note that the algorithm below is the same as the one described in the SNMP TLS TM MIB MIB module defined in [RFC6353] and in the ietf x509 cert to name YANG module defined in [RFC7407].)
The server maintains an ordered list of mappings of certificates to NETCONF usernames.
The NETCONF username is derived by considering each list entry in order.
The fingerprint member of the current list entry determines whether the current list entry is a match: 1.
If the list entry's fingerprint value matches the fingerprint of the presented certificate, then consider the list entry as a successful match.
If the list entry's fingerprint value matches that of a locally held copy of a trusted certification authority (CA) certificate, and that CA certificate was part of the CA certificate chain to the presented certificate, then consider the list entry as a successful match.
Once a matching list entry has been found, the map type of the current list entry is used to determine how the username associated with the certificate should be determined.
Possible mapping options are: A.
The username is taken from the auxiliary data of the current list entry.
This means the username is explicitly configured (map type 'specified').
The subjectAltName's rfc822Name field is mapped to the username (map type 'san rfc822 name').
The local part of the rfc822Name is used unaltered, but the host part of the name must be converted to lowercase.
The subjectAltName's dNSName is mapped to the username (map type 'san dns name').
The characters of the dNSName are converted to lowercase.
The subjectAltName's iPAddress is mapped to the username (map type 'san ip address').
IPv4 addresses are converted into decimal dotted quad notation (e.g., '192.0.2.1').
IPv6 addresses are converted into a 32 character all lowercase hexadecimal string without any colon separators.
The rfc822Name, dNSName, or iPAddress of the subjectAltName is mapped to the username (map type 'san any').
The first matching subjectAltName value found in the certificate of the above types MUST be used when deriving the name.
The certificate's CommonName is mapped to the username (map type 'common name').
The CommonName is converted to UTF 8 encoding.
The usage of CommonNames is deprecated and users are encouraged to use subjectAltName mapping methods instead.
If it is impossible to determine a username from the list entry's data combined with the data presented in the certificate, then additional list entries MUST be searched to look for another potential match.
Similarly, if the username does not comply to the NETCONF requirements on usernames [RFC6241], then additional list entries MUST be searched to look for another potential match.
If there are no further list entries, the TLS session MUST be terminated.
The username provided by the NETCONF over TLS implementation will be made available to the NETCONF message layer as the NETCONF username without modification.
The NETCONF server configuration data model [NETCONF RESTCONF] covers NETCONF over TLS and provides further details such as certificate fingerprint formats exposed to network configuration systems.
Cipher Suites Implementations MUST support TLS 1.2 [RFC5246] and are REQUIRED to support the mandatory to implement cipher suite.
Implementations MAY implement additional TLS cipher suites that provide mutual authentication [RFC5246] and confidentiality as required by NETCONF [RFC6241].
Implementations SHOULD follow the recommendations given in [RFC7525].
Security Considerations NETCONF is used to access configuration and state information and to modify configuration information, so the ability to access this protocol should be limited to users and systems that are authorized to view the NETCONF server's configuration and state or to modify the NETCONF server's configuration.
Configuration or state data may include sensitive information, such as usernames or security keys.
So, NETCONF requires communications channels that provide strong encryption for data privacy.
This document defines a NETCONF over TLS mapping that provides for support of strong encryption and authentication.
The security considerations for TLS [RFC5246] and NETCONF [RFC6241] apply here as well.
NETCONF over TLS requires mutual authentication.
Neither side should establish a NETCONF over TLS connection with an unknown, unexpected, or incorrect identity on the opposite side.
Note that the decision whether a certificate presented by the client is accepted can depend on whether a trusted CA certificate is white listed (see Section 7).
If deployments make use of this option, it is recommended that the white listed CA certificate is used only to issue certificates that are used for accessing NETCONF servers.
Should the CA certificate be used to issue certificates for other purposes, then all certificates created for other purposes will be accepted by a NETCONF server as well, which is likely not suitable.
This document does not support third party authentication (e.g., backend Authentication, Authorization, and Accounting (AAA) servers) due to the fact that TLS does not specify this way of authentication and that NETCONF depends on the transport protocol for the authentication service.
If third party authentication is needed, the Secure Shell (SSH) transport [RFC6242] can be used.
>, cannot appear in any well formed XML document, which turned out to be mistaken.
The EOM sequence can cause operational problems and open space for attacks if sent deliberately in NETCONF messages.
It is however believed that the associated threat is not very high.
This document still uses the EOM sequence for the initial <hello> message to avoid incompatibility with existing implementations.
When both peers implement the :
base:1.1 capability, a proper framing protocol (chunked framing mechanism; see Section 3) is used for the rest of the NETCONF session, to avoid injection attacks.
IANA Considerations Per RFC 5539, IANA assigned TCP port number (6513) in the "Registered Port Numbers" range with the service name "netconf tls".
This port is the default port for NETCONF over TLS, as defined in Section 2.
Below is the registration template following the rules in [RFC6335].
This section summarizes major changes between this document and RFC 5539.
Documented that NETCONF over TLS uses the new message framing if both peers support the :base:1.1 capability.
Removed redundant text that can be found in the TLS and NETCONF specifications and restructured the text.
Added a high level description on how NETCONF usernames are derived from certificates.
Removed the reference to BEEP.
