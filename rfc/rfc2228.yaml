- title: __initial_text__
  contents:
  - '                        FTP Security Extensions

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1997).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines extensions to the FTP specification STD 9,\
    \ RFC\n   959, \"FILE TRANSFER PROTOCOL (FTP)\" (October 1985).  These extensions\n\
    \   provide strong authentication, integrity, and confidentiality on both\n  \
    \ the control and data channels with the introduction of new optional\n   commands,\
    \ replies, and file transfer encodings.\n   The following new optional commands\
    \ are introduced in this\n   specification:\n      AUTH (Authentication/Security\
    \ Mechanism),\n      ADAT (Authentication/Security Data),\n      PROT (Data Channel\
    \ Protection Level),\n      PBSZ (Protection Buffer Size),\n      CCC (Clear Command\
    \ Channel),\n      MIC (Integrity Protected Command),\n      CONF (Confidentiality\
    \ Protected Command), and\n      ENC (Privacy Protected Command).\n   A new class\
    \ of reply types (6yz) is also introduced for protected\n   replies.\n   None\
    \ of the above commands are required to be implemented, but\n   interdependencies\
    \ exist.  These dependencies are documented with the\n   commands.\n   Note that\
    \ this specification is compatible with STD 9, RFC 959.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The File Transfer Protocol (FTP) currently defined in STD\
    \ 9, RFC 959\n   and in place on the Internet uses usernames and passwords passed\
    \ in\n   cleartext to authenticate clients to servers (via the USER and PASS\n\
    \   commands).  Except for services such as \"anonymous\" FTP archives,\n   this\
    \ represents a security risk whereby passwords can be stolen\n   through monitoring\
    \ of local and wide-area networks.  This either aids\n   potential attackers through\
    \ password exposure and/or limits\n   accessibility of files by FTP servers who\
    \ cannot or will not accept\n   the inherent security risks.\n   Aside from the\
    \ problem of authenticating users in a secure manner,\n   there is also the problem\
    \ of authenticating servers, protecting\n   sensitive data and/or verifying its\
    \ integrity.  An attacker may be\n   able to access valuable or sensitive data\
    \ merely by monitoring a\n   network, or through active means may be able to delete\
    \ or modify the\n   data being transferred so as to corrupt its integrity.  An\
    \ active\n   attacker may also initiate spurious file transfers to and from a\
    \ site\n   of the attacker's choice, and may invoke other commands on the\n  \
    \ server.  FTP does not currently have any provision for the encryption\n   or\
    \ verification of the authenticity of commands, replies, or\n   transferred data.\
    \  Note that these security services have value even\n   to anonymous file access.\n\
    \   Current practice for sending files securely is generally either:\n      1.\
    \  via FTP of files pre-encrypted under keys which are manually\n          distributed,\n\
    \      2.  via electronic mail containing an encoding of a file encrypted\n  \
    \        under keys which are manually distributed,\n      3.  via a PEM message,\
    \ or\n      4.  via the rcp command enhanced to use Kerberos.\n   None of these\
    \ means could be considered even a de facto standard, and\n   none are truly interactive.\
    \  A need exists to securely transfer files\n   using FTP in a secure manner which\
    \ is supported within the FTP\n   protocol in a consistent manner and which takes\
    \ advantage of existing\n   security infrastructure and technology.  Extensions\
    \ are necessary to\n   the FTP specification if these security services are to\
    \ be introduced\n   into the protocol in an interoperable way.\n   Although the\
    \ FTP control connection follows the Telnet protocol, and\n   Telnet has defined\
    \ an authentication and encryption option [TELNET-\n   SEC], [RFC-1123] explicitly\
    \ forbids the use of Telnet option\n   negotiation over the control connection\
    \ (other than Synch and IP).\n   Also, the Telnet authentication and encryption\
    \ option does not\n   provide for integrity protection only (without confidentiality),\
    \ and\n   does not address the protection of the data channel.\n"
- title: 2.  FTP Security Overview
  contents:
  - "2.  FTP Security Overview\n   At the highest level, the FTP security extensions\
    \ seek to provide an\n   abstract mechanism for authenticating and/or authorizing\
    \ connections,\n   and integrity and/or confidentiality protecting commands, replies,\n\
    \   and data transfers.\n   In the context of FTP security, authentication is\
    \ the establishment\n   of a client's identity and/or a server's identity in a\
    \ secure way,\n   usually using cryptographic techniques.  The basic FTP protocol\
    \ does\n   not have a concept of authentication.\n   Authorization is the process\
    \ of validating a user for login.  The\n   basic authorization process involves\
    \ the USER, PASS, and ACCT\n   commands.  With the FTP security extensions, authentication\n\
    \   established using a security mechanism may also be used to make the\n   authorization\
    \ decision.\n   Without the security extensions, authentication of the client,\
    \ as\n   this term is usually understood, never happens.  FTP authorization is\n\
    \   accomplished with a password, passed on the network in the clear as\n   the\
    \ argument to the PASS command.  The possessor of this password is\n   assumed\
    \ to be authorized to transfer files as the user named in the\n   USER command,\
    \ but the identity of the client is never securely\n   established.\n   An FTP\
    \ security interaction begins with a client telling the server\n   what security\
    \ mechanism it wants to use with the AUTH command.  The\n   server will either\
    \ accept this mechanism, reject this mechanism, or,\n   in the case of a server\
    \ which does not implement the security\n   extensions, reject the command completely.\
    \  The client may try\n   multiple security mechanisms until it requests one which\
    \ the server\n   accepts.  This allows a rudimentary form of negotiation to take\n\
    \   place.  (If more complex negotiation is desired, this may be\n   implemented\
    \ as a security mechanism.)  The server's reply will\n   indicate if the client\
    \ must respond with additional data for the\n   security mechanism to interpret.\
    \  If none is needed, this will\n   usually mean that the mechanism is one where\
    \ the password (specified\n   by the PASS command) is to be interpreted differently,\
    \ such as with a\n   token or one-time password system.\n   If the server requires\
    \ additional security information, then the\n   client and server will enter into\
    \ a security data exchange.  The\n   client will send an ADAT command containing\
    \ the first block of\n   security data.  The server's reply will indicate if the\
    \ data exchange\n   is complete, if there was an error, or if more data is needed.\
    \  The\n   server's reply can optionally contain security data for the client\
    \ to\n   interpret.  If more data is needed, the client will send another ADAT\n\
    \   command containing the next block of data, and await the server's\n   reply.\
    \  This exchange can continue as many times as necessary.  Once\n   this exchange\
    \ completes, the client and server have established a\n   security association.\
    \  This security association may include\n   authentication (client, server, or\
    \ mutual) and keying information for\n   integrity and/or confidentiality, depending\
    \ on the mechanism in use.\n   The term \"security data\" here is carefully chosen.\
    \  The purpose of\n   the security data exchange is to establish a security association,\n\
    \   which might not actually include any authentication at all, between\n   the\
    \ client and the server as described above.  For instance, a\n   Diffie-Hellman\
    \ exchange establishes a secret key, but no\n   authentication takes place.  If\
    \ an FTP server has an RSA key pair but\n   the client does not, then the client\
    \ can authenticate the server, but\n   the server cannot authenticate the client.\n\
    \   Once a security association is established, authentication which is a\n  \
    \ part of this association may be used instead of or in addition to the\n   standard\
    \ username/password exchange for authorizing a user to connect\n   to the server.\
    \  A username specified by the USER command is always\n   required to specify\
    \ the identity to be used on the server.\n   In order to prevent an attacker from\
    \ inserting or deleting commands\n   on the control stream, if the security association\
    \ supports\n   integrity, then the server and client must use integrity protection\n\
    \   on the control stream, unless it first transmits a CCC command to\n   turn\
    \ off this requirement.  Integrity protection is performed with\n   the MIC and\
    \ ENC commands, and the 63z reply codes.  The CCC command\n   and its reply must\
    \ be transmitted with integrity protection.\n   Commands and replies may be transmitted\
    \ without integrity (that is,\n   in the clear or with confidentiality only) only\
    \ if no security\n   association is established, the negotiated security association\
    \ does\n   not support integrity, or the CCC command has succeeded.\n   Once the\
    \ client and server have negotiated with the PBSZ command an\n   acceptable buffer\
    \ size for encapsulating protected data over the data\n   channel, the security\
    \ mechanism may also be used to protect data\n   channel transfers.\n   Policy\
    \ is not specified by this document.  In particular, client and\n   server implementations\
    \ may choose to implement restrictions on what\n   operations can be performed\
    \ depending on the security association\n   which exists.  For example, a server\
    \ may require that a client\n   authorize via a security mechanism rather than\
    \ using a password,\n   require that the client provide a one-time password from\
    \ a token,\n   require at least integrity protection on the command channel, or\n\
    \   require that certain files only be transmitted encrypted.  An\n   anonymous\
    \ ftp client might refuse to do file transfers without\n   integrity protection\
    \ in order to insure the validity of files\n   downloaded.\n   No particular set\
    \ of functionality is required, except as\n   dependencies described in the next\
    \ section.  This means that none of\n   authentication, integrity, or confidentiality\
    \ are required of an\n   implementation, although a mechanism which does none\
    \ of these is not\n   of much use.  For example, it is acceptable for a mechanism\
    \ to\n   implement only integrity protection, one-way authentication and/or\n\
    \   encryption, encryption without any authentication or integrity\n   protection,\
    \ or any other subset of functionality if policy or\n   technical considerations\
    \ make this desirable.  Of course, one peer\n   might require as a matter of policy\
    \ stronger protection than the\n   other is able to provide, preventing perfect\
    \ interoperability.\n"
- title: 3.  New FTP Commands
  contents:
  - "3.  New FTP Commands\n   The following commands are optional, but dependent on\
    \ each other.\n   They are extensions to the FTP Access Control Commands.\n  \
    \ The reply codes documented here are generally described as\n   recommended,\
    \ rather than required.  The intent is that reply codes\n   describing the full\
    \ range of success and failure modes exist, but\n   that servers be allowed to\
    \ limit information presented to the client.\n   For example, a server might implement\
    \ a particular security\n   mechanism, but have a policy restriction against using\
    \ it.  The\n   server should respond with a 534 reply code in this case, but may\n\
    \   respond with a 504 reply code if it does not wish to divulge that the\n  \
    \ disallowed mechanism is supported.  If the server does choose to use\n   a different\
    \ reply code than the recommended one, it should try to use\n   a reply code which\
    \ only differs in the last digit.  In all cases, the\n   server must use a reply\
    \ code which is documented as returnable from\n   the command received, and this\
    \ reply code must begin with the same\n   digit as the recommended reply code\
    \ for the situation.\n   AUTHENTICATION/SECURITY MECHANISM (AUTH)\n      The argument\
    \ field is a Telnet string identifying a supported\n      mechanism.  This string\
    \ is case-insensitive.  Values must be\n      registered with the IANA, except\
    \ that values beginning with \"X-\"\n      are reserved for local use.\n     \
    \ If the server does not recognize the AUTH command, it must respond\n      with\
    \ reply code 500.  This is intended to encompass the large\n      deployed base\
    \ of non-security-aware ftp servers, which will\n      respond with reply code\
    \ 500 to any unrecognized command.  If the\n      server does recognize the AUTH\
    \ command but does not implement the\n      security extensions, it should respond\
    \ with reply code 502.\n      If the server does not understand the named security\
    \ mechanism, it\n      should respond with reply code 504.\n      If the server\
    \ is not willing to accept the named security\n      mechanism, it should respond\
    \ with reply code 534.\n      If the server is not able to accept the named security\
    \ mechanism,\n      such as if a required resource is unavailable, it should respond\n\
    \      with reply code 431.\n      If the server is willing to accept the named\
    \ security mechanism,\n      but requires security data, it must respond with\
    \ reply code 334.\n      If the server is willing to accept the named security\
    \ mechanism,\n      and does not require any security data, it must respond with\
    \ reply\n      code 234.\n      If the server is responding with a 334 reply code,\
    \ it may include\n      security data as described in the next section.\n    \
    \  Some servers will allow the AUTH command to be reissued in order\n      to\
    \ establish new authentication.  The AUTH command, if accepted,\n      removes\
    \ any state associated with prior FTP Security commands.\n      The server must\
    \ also require that the user reauthorize (that is,\n      reissue some or all\
    \ of the USER, PASS, and ACCT commands) in this\n      case (see section 4 for\
    \ an explanation of \"authorize\" in this\n      context).\n   AUTHENTICATION/SECURITY\
    \ DATA (ADAT)\n      The argument field is a Telnet string representing base 64\
    \ encoded\n      security data (see Section 9, \"Base 64 Encoding\").  If a reply\n\
    \      code indicating success is returned, the server may also use a\n      string\
    \ of the form \"ADAT=base64data\" as the text part of the reply\n      if it wishes\
    \ to convey security data back to the client.\n      The data in both cases is\
    \ specific to the security mechanism\n      specified by the previous AUTH command.\
    \  The ADAT command, and the\n      associated replies, allow the client and server\
    \ to conduct an\n      arbitrary security protocol.  The security data exchange\
    \ must\n      include enough information for both peers to be aware of which\n\
    \      optional features are available.  For example, if the client does\n   \
    \   not support data encryption, the server must be made aware of\n      this,\
    \ so it will know not to send encrypted command channel\n      replies.  It is\
    \ strongly recommended that the security mechanism\n      provide sequencing on\
    \ the command channel, to insure that commands\n      are not deleted, reordered,\
    \ or replayed.\n      The ADAT command must be preceded by a successful AUTH command,\n\
    \      and cannot be issued once a security data exchange completes\n      (successfully\
    \ or unsuccessfully), unless it is preceded by an AUTH\n      command to reset\
    \ the security state.\n      If the server has not yet received an AUTH command,\
    \ or if a prior\n      security data exchange completed, but the security state\
    \ has not\n      been reset with an AUTH command, it should respond with reply\
    \ code\n      503.\n      If the server cannot base 64 decode the argument, it\
    \ should\n      respond with reply code 501.\n      If the server rejects the\
    \ security data (if a checksum fails, for\n      instance), it should respond\
    \ with reply code 535.\n      If the server accepts the security data, and requires\
    \ additional\n      data, it should respond with reply code 335.\n      If the\
    \ server accepts the security data, but does not require any\n      additional\
    \ data (i.e., the security data exchange has completed\n      successfully), it\
    \ must respond with reply code 235.\n      If the server is responding with a\
    \ 235 or 335 reply code, then it\n      may include security data in the text\
    \ part of the reply as\n      specified above.\n      If the ADAT command returns\
    \ an error, the security data exchange\n      will fail, and the client must reset\
    \ its internal security state.\n      If the client becomes unsynchronized with\
    \ the server (for example,\n      the server sends a 234 reply code to an AUTH\
    \ command, but the\n      client has more data to transmit), then the client must\
    \ reset the\n      server's security state.\n   PROTECTION BUFFER SIZE (PBSZ)\n\
    \      The argument is a decimal integer representing the maximum size,\n    \
    \  in bytes, of the encoded data blocks to be sent or received during\n      file\
    \ transfer.  This number shall be no greater than can be\n      represented in\
    \ a 32-bit unsigned integer.\n      This command allows the FTP client and server\
    \ to negotiate a\n      maximum protected buffer size for the connection.  There\
    \ is no\n      default size; the client must issue a PBSZ command before it can\n\
    \      issue the first PROT command.\n      The PBSZ command must be preceded\
    \ by a successful security data\n      exchange.\n      If the server cannot parse\
    \ the argument, or if it will not fit in\n      32 bits, it should respond with\
    \ a 501 reply code.\n      If the server has not completed a security data exchange\
    \ with the\n      client, it should respond with a 503 reply code.\n      Otherwise,\
    \ the server must reply with a 200 reply code.  If the\n      size provided by\
    \ the client is too large for the server, it must\n      use a string of the form\
    \ \"PBSZ=number\" in the text part of the\n      reply to indicate a smaller buffer\
    \ size.  The client and the\n      server must use the smaller of the two buffer\
    \ sizes if both buffer\n      sizes are specified.\n   DATA CHANNEL PROTECTION\
    \ LEVEL (PROT)\n      The argument is a single Telnet character code specifying\
    \ the data\n      channel protection level.\n      This command indicates to the\
    \ server what type of data channel\n      protection the client and server will\
    \ be using.  The following\n      codes are assigned:\n         C - Clear\n  \
    \       S - Safe\n         E - Confidential\n         P - Private\n      The default\
    \ protection level if no other level is specified is\n      Clear.  The Clear\
    \ protection level indicates that the data channel\n      will carry the raw data\
    \ of the file transfer, with no security\n      applied.  The Safe protection\
    \ level indicates that the data will\n      be integrity protected.  The Confidential\
    \ protection level\n      indicates that the data will be confidentiality protected.\
    \  The\n      Private protection level indicates that the data will be integrity\n\
    \      and confidentiality protected.\n      It is reasonable for a security mechanism\
    \ not to provide all data\n      channel protection levels.  It is also reasonable\
    \ for a mechanism\n      to provide more protection at a level than is required\
    \ (for\n      instance, a mechanism might provide Confidential protection, but\n\
    \      include integrity-protection in that encoding, due to API or other\n  \
    \    considerations).\n      The PROT command must be preceded by a successful\
    \ protection\n      buffer size negotiation.\n      If the server does not understand\
    \ the specified protection level,\n      it should respond with reply code 504.\n\
    \      If the current security mechanism does not support the specified\n    \
    \  protection level, the server should respond with reply code 536.\n      If\
    \ the server has not completed a protection buffer size\n      negotiation with\
    \ the client, it should respond with a 503 reply\n      code.\n      The PROT\
    \ command will be rejected and the server should reply 503\n      if no previous\
    \ PBSZ command was issued.\n      If the server is not willing to accept the specified\
    \ protection\n      level, it should respond with reply code 534.\n      If the\
    \ server is not able to accept the specified protection\n      level, such as\
    \ if a required resource is unavailable, it should\n      respond with reply code\
    \ 431.\n      Otherwise, the server must reply with a 200 reply code to indicate\n\
    \      that the specified protection level is accepted.\n   CLEAR COMMAND CHANNEL\
    \ (CCC)\n      This command does not take an argument.\n      It is desirable\
    \ in some environments to use a security mechanism\n      to authenticate and/or\
    \ authorize the client and server, but not to\n      perform any integrity checking\
    \ on the subsequent commands.  This\n      might be used in an environment where\
    \ IP security is in place,\n      insuring that the hosts are authenticated and\
    \ that TCP streams\n      cannot be tampered, but where user authentication is\
    \ desired.\n      If unprotected commands are allowed on any connection, then\
    \ an\n      attacker could insert a command on the control stream, and the\n \
    \     server would have no way to know that it was invalid.  In order to\n   \
    \   prevent such attacks, once a security data exchange completes\n      successfully,\
    \ if the security mechanism supports integrity, then\n      integrity (via the\
    \ MIC or ENC command, and 631 or 632 reply) must\n      be used, until the CCC\
    \ command is issued to enable non-integrity\n      protected control channel messages.\
    \  The CCC command itself must\n      be integrity protected.\n      Once the\
    \ CCC command completes successfully, if a command is not\n      protected, then\
    \ the reply to that command must also not be\n      protected.  This is to support\
    \ interoperability with clients which\n      do not support protection once the\
    \ CCC command has been issued.\n      This command must be preceded by a successful\
    \ security data\n      exchange.\n      If the command is not integrity-protected,\
    \ the server must respond\n      with a 533 reply code.\n      If the server is\
    \ not willing to turn off the integrity\n      requirement, it should respond\
    \ with a 534 reply code.\n      Otherwise, the server must reply with a 200 reply\
    \ code to indicate\n      that unprotected commands and replies may now be used\
    \ on the\n      command channel.\n   INTEGRITY PROTECTED COMMAND (MIC) and\n \
    \  CONFIDENTIALITY PROTECTED COMMAND (CONF) and\n   PRIVACY PROTECTED COMMAND\
    \ (ENC)\n      The argument field of MIC is a Telnet string consisting of a base\n\
    \      64 encoded \"safe\" message produced by a security mechanism\n      specific\
    \ message integrity procedure.  The argument field of CONF\n      is a Telnet\
    \ string consisting of a base 64 encoded \"confidential\"\n      message produced\
    \ by a security mechanism specific confidentiality\n      procedure.  The argument\
    \ field of ENC is a Telnet string\n      consisting of a base 64 encoded \"private\"\
    \ message produced by a\n      security mechanism specific message integrity and\
    \ confidentiality\n      procedure.\n      The server will decode and/or verify\
    \ the encoded message.\n      This command must be preceded by a successful security\
    \ data\n      exchange.\n      A server may require that the first command after\
    \ a successful\n      security data exchange be CCC, and not implement the protection\n\
    \      commands at all.  In this case, the server should respond with a\n    \
    \  502 reply code.\n      If the server cannot base 64 decode the argument, it\
    \ should\n      respond with a 501 reply code.\n      If the server has not completed\
    \ a security data exchange with the\n      client, it should respond with a 503\
    \ reply code.\n      If the server has completed a security data exchange with\
    \ the\n      client using a mechanism which supports integrity, and requires a\n\
    \      CCC command due to policy or implementation limitations, it should\n  \
    \    respond with a 503 reply code.\n      If the server rejects the command because\
    \ it is not supported by\n      the current security mechanism, the server should\
    \ respond with\n      reply code 537.\n      If the server rejects the command\
    \ (if a checksum fails, for\n      instance), it should respond with reply code\
    \ 535.\n      If the server is not willing to accept the command (if privacy is\n\
    \      required by policy, for instance, or if a CONF command is received\n  \
    \    before a CCC command), it should respond with reply code 533.\n      Otherwise,\
    \ the command will be interpreted as an FTP command.  An\n      end-of-line code\
    \ need not be included, but if one is included, it\n      must be a Telnet end-of-line\
    \ code, not a local end-of-line code.\n      The server may require that, under\
    \ some or all circumstances, all\n      commands be protected.  In this case,\
    \ it should make a 533 reply\n      to commands other than MIC, CONF, and ENC.\n"
- title: 4.  Login Authorization
  contents:
  - "4.  Login Authorization\n   The security data exchange may, among other things,\
    \ establish the\n   identity of the client in a secure way to the server.  This\
    \ identity\n   may be used as one input to the login authorization process.\n\
    \   In response to the FTP login commands (AUTH, PASS, ACCT), the server\n   may\
    \ choose to change the sequence of commands and replies specified\n   by RFC 959\
    \ as follows.  There are also some new replies available.\n   If the server is\
    \ willing to allow the user named by the USER command\n   to log in based on the\
    \ identity established by the security data\n   exchange, it should respond with\
    \ reply code 232.\n   If the security mechanism requires a challenge/response\
    \ password, it\n   should respond to the USER command with reply code 336.  The\
    \ text\n   part of the reply should contain the challenge.  The client must\n\
    \   display the challenge to the user before prompting for the password\n   in\
    \ this case.  This is particularly relevant to more sophisticated\n   clients\
    \ or graphical user interfaces which provide dialog boxes or\n   other modal input.\
    \  These clients should be careful not to prompt for\n   the password before the\
    \ username has been sent to the server, in case\n   the user needs the challenge\
    \ in the 336 reply to construct a valid\n   password.\n"
- title: 5.  New FTP Replies
  contents:
  - "5.  New FTP Replies\n   The new reply codes are divided into two classes.  The\
    \ first class is\n   new replies made necessary by the new FTP Security commands.\
    \  The\n   second class is a new reply type to indicate protected replies.\n \
    \  5.1.  New individual reply codes\n      232 User logged in, authorized by security\
    \ data exchange.\n      234 Security data exchange complete.\n      235 [ADAT=base64data]\n\
    \            ; This reply indicates that the security data exchange\n        \
    \    ; completed successfully.  The square brackets are not\n            ; to\
    \ be included in the reply, but indicate that\n            ; security data in\
    \ the reply is optional.\n      334 [ADAT=base64data]\n            ; This reply\
    \ indicates that the requested security mechanism\n            ; is ok, and includes\
    \ security data to be used by the client\n            ; to construct the next\
    \ command.  The square brackets are not\n            ; to be included in the reply,\
    \ but indicate that\n            ; security data in the reply is optional.\n \
    \     335 [ADAT=base64data]\n            ; This reply indicates that the security\
    \ data is\n            ; acceptable, and more is required to complete the\n  \
    \          ; security data exchange.  The square brackets\n            ; are not\
    \ to be included in the reply, but indicate\n            ; that security data\
    \ in the reply is optional.\n      336 Username okay, need password.  Challenge\
    \ is \"....\"\n            ; The exact representation of the challenge should\
    \ be chosen\n            ; by the mechanism to be sensible to the human user of\
    \ the\n            ; system.\n      431 Need some unavailable resource to process\
    \ security.\n      533 Command protection level denied for policy reasons.\n \
    \     534 Request denied for policy reasons.\n      535 Failed security check\
    \ (hash, sequence, etc).\n      536 Requested PROT level not supported by mechanism.\n\
    \      537 Command protection level not supported by security mechanism.\n   5.2.\
    \  Protected replies.\n      One new reply type is introduced:\n         6yz \
    \  Protected reply\n            There are three reply codes of this type.  The\
    \ first, reply\n            code 631 indicates an integrity protected reply. \
    \ The\n            second, reply code 632, indicates a confidentiality and\n \
    \           integrity protected reply.  the third, reply code 633,\n         \
    \   indicates a confidentiality protected reply.\n            The text part of\
    \ a 631 reply is a Telnet string consisting\n            of a base 64 encoded\
    \ \"safe\" message produced by a security\n            mechanism specific message\
    \ integrity procedure.  The text\n            part of a 632 reply is a Telnet\
    \ string consisting of a base\n            64 encoded \"private\" message produced\
    \ by a security\n            mechanism specific message confidentiality and integrity\n\
    \            procedure.  The text part of a 633 reply is a Telnet string\n   \
    \         consisting of a base 64 encoded \"confidential\" message\n         \
    \   produced by a security mechanism specific message\n            confidentiality\
    \ procedure.\n            The client will decode and verify the encoded reply.\
    \  How\n            failures decoding or verifying replies are handled is\n  \
    \          implementation-specific.  An end-of-line code need not be\n       \
    \     included, but if one is included, it must be a Telnet end-\n           \
    \ of-line code, not a local end-of-line code.\n            A protected reply may\
    \ only be sent if a security data\n            exchange has succeeded.\n     \
    \       The 63z reply may be a multiline reply.  In this case, the\n         \
    \   plaintext reply must be broken up into a number of\n            fragments.\
    \  Each fragment must be protected, then base 64\n            encoded in order\
    \ into a separate line of the multiline\n            reply.  There need not be\
    \ any correspondence between the\n            line breaks in the plaintext reply\
    \ and the encoded reply.\n            Telnet end-of-line codes must appear in\
    \ the plaintext of the\n            encoded reply, except for the final end-of-line\
    \ code, which\n            is optional.\n            The multiline reply must\
    \ be formatted more strictly than the\n            continuation specification\
    \ in RFC 959.  In particular, each\n            line before the last must be formed\
    \ by the reply code,\n            followed immediately by a hyphen, followed by\
    \ a base 64\n            encoded fragment of the reply.\n            For example,\
    \ if the plaintext reply is\n               123-First line\n               Second\
    \ line\n                 234 A line beginning with numbers\n               123\
    \ The last line\n            then the resulting protected reply could be any of\
    \ the\n            following (the first example has a line break only to fit\n\
    \            within the margins):\n  631 base64(protect(\"123-First line\\r\\\
    nSecond line\\r\\n  234 A line\n  631-base64(protect(\"123-First line\\r\\n\"\
    ))\n  631-base64(protect(\"Second line\\r\\n\"))\n  631-base64(protect(\"  234\
    \ A line beginning with numbers\\r\\n\"))\n  631 base64(protect(\"123 The last\
    \ line\"))\n  631-base64(protect(\"123-First line\\r\\nSecond line\\r\\n  234\
    \ A line b\"))\n  631 base64(protect(\"eginning with numbers\\r\\n123 The last\
    \ line\\r\\n\"))\n"
- title: 6.  Data Channel Encapsulation
  contents:
  - "6.  Data Channel Encapsulation\n   When data transfers are protected between\
    \ the client and server (in\n   either direction), certain transformations and\
    \ encapsulations must be\n   performed so that the recipient can properly decode\
    \ the transmitted\n   file.\n   The sender must apply all protection services\
    \ after transformations\n   associated with the representation type, file structure,\
    \ and transfer\n   mode have been performed.  The data sent over the data channel\
    \ is,\n   for the purposes of protection, to be treated as a byte stream.\n  \
    \ When performing a data transfer in an authenticated manner, the\n   authentication\
    \ checks are performed on individual blocks of the file,\n   rather than on the\
    \ file as a whole. Consequently, it is possible for\n   insertion attacks to insert\
    \ blocks into the data stream (i.e.,\n   replays) that authenticate correctly,\
    \ but result in a corrupted file\n   being undetected by the receiver. To guard\
    \ against such attacks, the\n   specific security mechanism employed should include\
    \ mechanisms to\n   protect against such attacks.  Many GSS-API mechanisms usable\
    \ with\n   the specification in Appendix I, and the Kerberos mechanism in\n  \
    \ Appendix II do so.\n   The sender must take the input byte stream, and break\
    \ it up into\n   blocks such that each block, when encoded using a security mechanism\n\
    \   specific procedure, will be no larger than the buffer size negotiated\n  \
    \ by the client with the PBSZ command.  Each block must be encoded,\n   then transmitted\
    \ with the length of the encoded block prepended as a\n   four byte unsigned integer,\
    \ most significant byte first.\n   When the end of the file is reached, the sender\
    \ must encode a block\n   of zero bytes, and send this final block to the recipient\
    \ before\n   closing the data connection.\n   The recipient will read the four\
    \ byte length, read a block of data\n   that many bytes long, then decode and\
    \ verify this block with a\n   security mechanism specific procedure.  This must\
    \ be repeated until a\n   block encoding a buffer of zero bytes is received. \
    \ This indicates\n   the end of the encoded byte stream.\n   Any transformations\
    \ associated with the representation type, file\n   structure, and transfer mode\
    \ are to be performed by the recipient on\n   the byte stream resulting from the\
    \ above process.\n   When using block transfer mode, the sender's (cleartext)\
    \ buffer size\n   is independent of the block size.\n   The server will reply\
    \ 534 to a STOR, STOU, RETR, LIST, NLST, or APPE\n   command if the current protection\
    \ level is not at the level dictated\n   by the server's security requirements\
    \ for the particular file\n   transfer.\n   If any data protection services fail\
    \ at any time during data transfer\n   at the server end (including an attempt\
    \ to send a buffer size greater\n   than the negotiated maximum), the server will\
    \ send a 535 reply to the\n   data transfer command (either STOR, STOU, RETR,\
    \ LIST, NLST, or APPE).\n"
- title: 7.  Potential policy considerations
  contents:
  - "7.  Potential policy considerations\n   While there are no restrictions on client\
    \ and server policy, there\n   are a few recommendations which an implementation\
    \ should implement.\n    - Once a security data exchange takes place, a server\
    \ should require\n      all commands be protected (with integrity and/or confidentiality),\n\
    \      and it should protect all replies.  Replies should use the same\n     \
    \ level of protection as the command which produced them.  This\n      includes\
    \ replies which indicate failure of the MIC, CONF, and ENC\n      commands.  In\
    \ particular, it is not meaningful to require that\n      AUTH and ADAT be protected;\
    \ it is meaningful and useful to require\n      that PROT and PBSZ be protected.\
    \  In particular, the use of CCC is\n      not recommended, but is defined in\
    \ the interest of\n      interoperability between implementations which might\
    \ desire such\n      functionality.\n    - A client should encrypt the PASS command\
    \ whenever possible.  It is\n      reasonable for the server to refuse to accept\
    \ a non-encrypted PASS\n      command if the server knows encryption is available.\n\
    \    - Although no security commands are required to be implemented, it\n    \
    \  is recommended that an implementation provide all commands which\n      can\
    \ be implemented, given the mechanisms supported and the policy\n      considerations\
    \ of the site (export controls, for instance).\n"
- title: 8.  Declarative specifications
  contents:
  - "8.  Declarative specifications\n   These sections are modelled after sections\
    \ 5.3 and 5.4 of RFC 959,\n   which describe the same information, except for\
    \ the standard FTP\n   commands and replies.\n   8.1.  FTP Security commands and\
    \ arguments\n      AUTH <SP> <mechanism-name> <CRLF>\n      ADAT <SP> <base64data>\
    \ <CRLF>\n      PROT <SP> <prot-code> <CRLF>\n      PBSZ <SP> <decimal-integer>\
    \ <CRLF>\n      MIC <SP> <base64data> <CRLF>\n      CONF <SP> <base64data> <CRLF>\n\
    \      ENC <SP> <base64data> <CRLF>\n      <mechanism-name> ::= <string>\n   \
    \   <base64data> ::= <string>\n              ; must be formatted as described\
    \ in section 9\n      <prot-code> ::= C | S | E | P\n      <decimal-integer> ::=\
    \ any decimal integer from 1 to (2^32)-1\n   8.2.  Command-Reply sequences\n \
    \     Security Association Setup\n         AUTH\n            234\n           \
    \ 334\n            502, 504, 534, 431\n            500, 501, 421\n         ADAT\n\
    \            235\n            335\n            503, 501, 535\n            500,\
    \ 501, 421\n      Data protection negotiation commands\n         PBSZ\n      \
    \      200\n            503\n            500, 501, 421, 530\n         PROT\n \
    \           200\n            504, 536, 503, 534, 431\n            500, 501, 421,\
    \ 530\n      Command channel protection commands\n         MIC\n            535,\
    \ 533\n            500, 501, 421\n         CONF\n            535, 533\n      \
    \      500, 501, 421\n         ENC\n            535, 533\n            500, 501,\
    \ 421\n      Security-Enhanced login commands (only new replies listed)\n    \
    \     USER\n            232\n            336\n      Data channel commands (only\
    \ new replies listed)\n         STOR\n            534, 535\n         STOU\n  \
    \          534, 535\n         RETR\n            534, 535\n         LIST\n    \
    \        534, 535\n         NLST\n            534, 535\n         APPE\n      \
    \      534, 535\n      In addition to these reply codes, any security command\
    \ can return\n      500, 501, 502, 533, or 421.  Any ftp command can return a\
    \ reply\n      code encapsulated in a 631, 632, or 633 reply once a security data\n\
    \      exchange has completed successfully.\n"
- title: 9.  State Diagrams
  contents:
  - "9.  State Diagrams\n   This section includes a state diagram which demonstrates\
    \ the flow of\n   authentication and authorization in a security enhanced FTP\n\
    \   implementation.  The rectangular blocks show states where the client\n   must\
    \ issue a command, and the diamond blocks show states where the\n   server must\
    \ issue a response.\n          ,------------------,  USER\n       __\\| Unauthenticated\
    \  |_________\\\n      |  /| (new connection) |         /|\n      |   `------------------'\
    \          |\n      |            |                    |\n      |            |\
    \ AUTH               |\n      |            V                    |\n      |   \
    \        / \\                   |\n      | 4yz,5yz  /   \\   234            |\n\
    \      |<--------<     >------------->.  |\n      |          \\   /          \
    \     |  |\n      |           \\_/                |  |\n      |            | \
    \                |  |\n      |            | 334             |  |\n      |    \
    \        V                 |  |\n      |  ,--------------------,      |  |\n \
    \     |  | Need Security Data |<--.  |  |\n      |  `--------------------'   |\
    \  |  |\n      |            |              |  |  |\n      |            | ADAT\
    \         |  |  |\n      |            V              |  |  |\n      |        \
    \   / \\             |  |  |\n      | 4yz,5yz  /   \\   335      |  |  |\n   \
    \   `<--------<     >-----------'  |  |\n                 \\   /             \
    \  |  |\n                  \\_/                |  |\n                   |    \
    \             |  |\n                   | 235             |  |\n              \
    \     V                 |  |\n           ,---------------.         |  |\n    \
    \  ,--->| Authenticated |<--------'  |  After the client and server\n      | \
    \   `---------------'            |  have completed authenti-\n      |        \
    \    |                    |  cation, command must be\n      |            | USER\
    \               |  integrity-protected if\n      |            |              \
    \      |  integrity is available.  The\n      |            |<-------------------'\
    \  CCC command may be issued to\n      |            V                       relax\
    \ this restriction.\n      |           / \\\n      | 4yz,5yz  /   \\   2yz\n \
    \     |<--------<     >------------->.\n      |          \\   /              \
    \ |\n      |           \\_/                |\n      |            |           \
    \      |\n      |            | 3yz             |\n      |            V       \
    \          |\n      |    ,---------------.         |\n      |    | Need Password\
    \ |         |\n      |    `---------------'         |\n      |            |  \
    \               |\n      |            | PASS            |\n      |           \
    \ V                 |\n      |           / \\                |\n      | 4yz,5yz\
    \  /   \\   2yz         |\n      |<--------<     >------------->|\n      |   \
    \       \\   /               |\n      |           \\_/                |\n    \
    \  |            |                 |\n      |            | 3yz             |\n\
    \      |            V                 |\n      |    ,--------------.         \
    \ |\n      |    | Need Account |          |\n      |    `--------------'     \
    \     |\n      |            |                 |\n      |            | ACCT   \
    \         |\n      |            V                 |\n      |           / \\  \
    \              |\n      | 4yz,5yz  /   \\   2yz         |\n      `<--------< \
    \    >------------->|\n                 \\   /               |\n             \
    \     \\_/                |\n                   |                 |\n        \
    \           | 3yz             |\n                   V                 |\n    \
    \         ,-------------.         |\n             | Authorized  |/________|\n\
    \             | (Logged in) |\\\n             `-------------'\n"
- title: 10.  Base 64 Encoding
  contents:
  - "10.  Base 64 Encoding\n   Base 64 encoding is the same as the Printable Encoding\
    \ described in\n   Section 4.3.2.4 of [RFC-1421], except that line breaks must\
    \ not be\n   included. This encoding is defined as follows.\n   Proceeding from\
    \ left to right, the bit string resulting from the\n   mechanism specific protection\
    \ routine is encoded into characters\n   which are universally representable at\
    \ all sites, though not\n   necessarily with the same bit patterns (e.g., although\
    \ the character\n   \"E\" is represented in an ASCII-based system as hexadecimal\
    \ 45 and as\n   hexadecimal C5 in an EBCDIC-based system, the local significance\
    \ of\n   the two representations is equivalent).\n   A 64-character subset of\
    \ International Alphabet IA5 is used, enabling\n   6 bits to be represented per\
    \ printable character.  (The proposed\n   subset of characters is represented\
    \ identically in IA5 and ASCII.)\n   The character \"=\" signifies a special processing\
    \ function used for\n   padding within the printable encoding procedure.\n   The\
    \ encoding process represents 24-bit groups of input bits as output\n   strings\
    \ of 4 encoded characters.  Proceeding from left to right\n   across a 24-bit\
    \ input group output from the security mechanism\n   specific message protection\
    \ procedure, each 6-bit group is used as an\n   index into an array of 64 printable\
    \ characters, namely \"[A-Z][a-\n   z][0-9]+/\".  The character referenced by\
    \ the index is placed in the\n   output string.  These characters are selected\
    \ so as to be universally\n   representable, and the set excludes characters with\
    \ particular\n   significance to Telnet (e.g., \"<CR>\", \"<LF>\", IAC).\n   Special\
    \ processing is performed if fewer than 24 bits are available\n   in an input\
    \ group at the end of a message.  A full encoding quantum\n   is always completed\
    \ at the end of a message.  When fewer than 24\n   input bits are available in\
    \ an input group, zero bits are added (on\n   the right) to form an integral number\
    \ of 6-bit groups.  Output\n   character positions which are not required to represent\
    \ actual input\n   data are set to the character \"=\".  Since all canonically\
    \ encoded\n   output is an integral number of octets, only the following cases\
    \ can\n   arise: (1) the final quantum of encoding input is an integral\n   multiple\
    \ of 24 bits; here, the final unit of encoded output will be\n   an integral multiple\
    \ of 4 characters with no \"=\" padding, (2) the\n   final quantum of encoding\
    \ input is exactly 8 bits; here, the final\n   unit of encoded output will be\
    \ two characters followed by two \"=\"\n   padding characters, or (3) the final\
    \ quantum of encoding input is\n   exactly 16 bits; here, the final unit of encoded\
    \ output will be three\n   characters followed by one \"=\" padding character.\n\
    \   Implementors must keep in mind that the base 64 encodings in ADAT,\n   MIC,\
    \ CONF, and ENC commands, and in 63z replies may be arbitrarily\n   long.  Thus,\
    \ the entire line must be read before it can be processed.\n   Several successive\
    \ reads on the control channel may be necessary.  It\n   is not appropriate to\
    \ for a server to reject a command containing a\n   base 64 encoding simply because\
    \ it is too long (assuming that the\n   decoding is otherwise well formed in the\
    \ context in which it was\n   sent).\n   Case must not be ignored when reading\
    \ commands and replies containing\n   base 64 encodings.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   This entire document deals with security considerations\
    \ related to\n   the File Transfer Protocol.\n   Third party file transfers cannot\
    \ be secured using these extensions,\n   since a security context cannot be established\
    \ between two servers\n   using these facilities (no control connection exists\
    \ between servers\n   over which to pass ADAT tokens).  Further work in this area\
    \ is\n   deferred.\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   I would like to thank the members of the CAT WG, as\
    \ well as all\n   participants in discussions on the \"cat-ietf@mit.edu\" mailing\
    \ list,\n   for their contributions to this document.  I would especially like\
    \ to\n   thank Sam Sjogren, John Linn, Ted Ts'o, Jordan Brown, Michael Kogut,\n\
    \   Derrick Brashear, John Gardiner Myers, Denis Pinkas, and Karri Balk\n   for\
    \ their contributions to this work.  Of course, without Steve Lunt,\n   the author\
    \ of the first six revisions of this document, it would not\n   exist at all.\n"
- title: 13.  References
  contents:
  - "13.  References\n   [TELNET-SEC] Borman, D., \"Telnet Authentication and Encryption\n\
    \      Option\", Work in Progress.\n   [RFC-1123] Braden, R., \"Requirements for\
    \ Internet Hosts --\n      Application and Support\", STD 3, RFC 1123, October\
    \ 1989.\n   [RFC-1421] Linn, J., \"Privacy Enhancement for Internet Electronic\n\
    \      Mail: Part I: Message Encryption and Authentication Procedures\",\n   \
    \   RFC 1421, February 1993.\n"
- title: 14.  Author's Address
  contents:
  - "14.  Author's Address\n   Marc Horowitz\n   Cygnus Solutions\n   955 Massachusetts\
    \ Avenue\n   Cambridge, MA 02139\n   Phone: +1 617 354 7688\n   EMail: marc@cygnus.com\n"
- title: 'Appendix I: Specification under the GSSAPI'
  contents:
  - "Appendix I: Specification under the GSSAPI\n   In order to maximise the utility\
    \ of new security mechanisms, it is\n   desirable that new mechanisms be implemented\
    \ as GSSAPI mechanisms\n   rather than as FTP security mechanisms.  This will\
    \ enable existing\n   ftp implementations to support the new mechanisms more easily,\
    \ since\n   little or no code will need to be changed.  In addition, the\n   mechanism\
    \ will be usable by other protocols, such as IMAP, which are\n   built on top\
    \ of the GSSAPI, with no additional specification or\n   implementation work needed\
    \ by the mechanism designers.\n   The security mechanism name (for the AUTH command)\
    \ associated with\n   all mechanisms employing the GSSAPI is GSSAPI.  If the server\n\
    \   supports a security mechanism employing the GSSAPI, it must respond\n   with\
    \ a 334 reply code indicating that an ADAT command is expected\n   next.\n   The\
    \ client must begin the authentication exchange by calling\n   GSS_Init_Sec_Context,\
    \ passing in 0 for input_context_handle\n   (initially), and a targ_name equal\
    \ to output_name from\n   GSS_Import_Name called with input_name_type of Host-Based\
    \ Service and\n   input_name_string of \"ftp@hostname\" where \"hostname\" is\
    \ the fully\n   qualified host name of the server with all letters in lower case.\n\
    \   (Failing this, the client may try again using input_name_string of\n   \"\
    host@hostname\".) The output_token must then be base 64 encoded and\n   sent to\
    \ the server as the argument to an ADAT command.  If\n   GSS_Init_Sec_Context\
    \ returns GSS_S_CONTINUE_NEEDED, then the client\n   must expect a token to be\
    \ returned in the reply to the ADAT command.\n   This token must subsequently\
    \ be passed to another call to\n   GSS_Init_Sec_Context.  In this case, if GSS_Init_Sec_Context\
    \ returns\n   no output_token, then the reply code from the server for the previous\n\
    \   ADAT command must have been 235.  If GSS_Init_Sec_Context returns\n   GSS_S_COMPLETE,\
    \ then no further tokens are expected from the server,\n   and the client must\
    \ consider the server authenticated.\n   The server must base 64 decode the argument\
    \ to the ADAT command and\n   pass the resultant token to GSS_Accept_Sec_Context\
    \ as input_token,\n   setting acceptor_cred_handle to NULL (for \"use default\
    \ credentials\"),\n   and 0 for input_context_handle (initially).  If an output_token\
    \ is\n   returned, it must be base 64 encoded and returned to the client by\n\
    \   including \"ADAT=base64string\" in the text of the reply.  If\n   GSS_Accept_Sec_Context\
    \ returns GSS_S_COMPLETE, the reply code must be\n   235, and the server must\
    \ consider the client authenticated.  If\n   GSS_Accept_Sec_Context returns GSS_S_CONTINUE_NEEDED,\
    \ the reply code\n   must be 335.  Otherwise, the reply code should be 535, and\
    \ the text\n   of the reply should contain a descriptive error message.\n   The\
    \ chan_bindings input to GSS_Init_Sec_Context and\n   GSS_Accept_Sec_Context should\
    \ use the client internet address and\n   server internet address as the initiator\
    \ and acceptor addresses,\n   respectively.  The address type for both should\
    \ be GSS_C_AF_INET. No\n   application data should be specified.\n   Since GSSAPI\
    \ supports anonymous peers to security contexts, it is\n   possible that the client's\
    \ authentication of the server does not\n   actually establish an identity.\n\
    \   The procedure associated with MIC commands, 631 replies, and Safe\n   file\
    \ transfers is:\n      GSS_Wrap for the sender, with conf_flag == FALSE\n    \
    \  GSS_Unwrap for the receiver\n   The procedure associated with ENC commands,\
    \ 632 replies, and Private\n   file transfers is:\n      GSS_Wrap for the sender,\
    \ with conf_flag == TRUE\n      GSS_Unwrap for the receiver\n   CONF commands\
    \ and 633 replies are not supported.\n   Both the client and server should inspect\
    \ the value of conf_avail to\n   determine whether the peer supports confidentiality\
    \ services.\n   When the security state is reset (when AUTH is received a second\n\
    \   time, or when REIN is received), this should be done by calling the\n   GSS_Delete_sec_context\
    \ function.\n"
- title: 'Appendix II:  Specification under Kerberos version 4'
  contents:
  - "Appendix II:  Specification under Kerberos version 4\n   The security mechanism\
    \ name (for the AUTH command) associated with\n   Kerberos Version 4 is KERBEROS_V4.\
    \  If the server supports\n   KERBEROS_V4, it must respond with a 334 reply code\
    \ indicating that an\n   ADAT command is expected next.\n   The client must retrieve\
    \ a ticket for the Kerberos principal\n   \"ftp.hostname@realm\" by calling krb_mk_req(3)\
    \ with a principal name\n   of \"ftp\", an instance equal to the first part of\
    \ the canonical host\n   name of the server with all letters in lower case (as\
    \ returned by\n   krb_get_phost(3)), the server's realm name (as returned by\n\
    \   krb_realmofhost(3)), and an arbitrary checksum.  The ticket must then\n  \
    \ be base 64 encoded and sent as the argument to an ADAT command.\n   If the \"\
    ftp\" principal name is not a registered principal in the\n   Kerberos database,\
    \ then the client may fall back on the \"rcmd\"\n   principal name (same instance\
    \ and realm).  However, servers must\n   accept only one or the other of these\
    \ principal names, and must not\n   be willing to accept either.  Generally, if\
    \ the server has a key for\n   the \"ftp\" principal in its srvtab, then that\
    \ principal only must be\n   used, otherwise the \"rcmd\" principal only must\
    \ be used.\n   The server must base 64 decode the argument to the ADAT command\
    \ and\n   pass the result to krb_rd_req(3).  The server must add one to the\n\
    \   checksum from the authenticator, convert the result to network byte\n   order\
    \ (most significant byte first), and sign it using\n   krb_mk_safe(3), and base\
    \ 64 encode the result.  Upon success, the\n   server must reply to the client\
    \ with a 235 code and include\n   \"ADAT=base64string\" in the text of the reply.\
    \  Upon failure, the\n   server should reply 535.\n   Upon receipt of the 235\
    \ reply from the server, the client must parse\n   the text of the reply for the\
    \ base 64 encoded data, decode it,\n   convert it from network byte order, and\
    \ pass the result to\n   krb_rd_safe(3).  The client must consider the server\
    \ authenticated if\n   the resultant checksum is equal to one plus the value previously\n\
    \   sent.\n   The procedure associated with MIC commands, 631 replies, and Safe\n\
    \   file transfers is:\n      krb_mk_safe(3) for the sender\n      krb_rd_safe(3)\
    \ for the receiver\n   The procedure associated with ENC commands, 632 replies,\
    \ and Private\n   file transfers is:\n      krb_mk_priv(3) for the sender\n  \
    \    krb_rd_priv(3) for the receiver\n   CONF commands and 633 replies are not\
    \ supported.\n   Note that this specification for KERBEROS_V4 contains no provision\n\
    \   for negotiating alternate means for integrity and confidentiality\n   routines.\
    \  Note also that the ADAT exchange does not convey whether\n   the peer supports\
    \ confidentiality services.\n   In order to stay within the allowed PBSZ, implementors\
    \ must take note\n   that a cleartext buffer will grow by 31 bytes when processed\
    \ by\n   krb_mk_safe(3) and will grow by 26 bytes when processed by\n   krb_mk_priv(3).\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1997).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implmentation may be prepared, copied, published\n \
    \  andand distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
