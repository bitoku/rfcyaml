- contents:
  - '                  jCal: The JSON Format for iCalendar

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This specification defines \"jCal\", a JSON format for iCalendar
    data.\n   The iCalendar data format is a text format for capturing and\n   exchanging
    information normally stored within a calendaring and\n   scheduling application,
    for example, tasks and events.  JSON is a\n   lightweight, text-based, language-independent
    data interchange format\n   commonly used in Internet applications.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7265.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Conventions Used in This Document . . . . . . . . . . .
    . . .   4\n   3.  Converting from iCalendar to jCal . . . . . . . . . . . . .
    .   4\n     3.1.  Pre-processing  . . . . . . . . . . . . . . . . . . . . .   4\n
    \    3.2.  iCalendar Stream and Objects (RFC 5545, Section 3.4)  . .   5\n     3.3.
    \ Components (RFC 5545, Section 3.6)  . . . . . . . . . . .   6\n     3.4.  Properties
    (RFC 5545, Sections 3.7 and 3.8) . . . . . . .   6\n       3.4.1.  Special Cases
    for Properties  . . . . . . . . . . . .   8\n         3.4.1.1.  GEO Property (RFC
    5545, Section 3.8.1.6)  . . . .   8\n         3.4.1.2.  REQUEST-STATUS Property
    (RFC 5545, Section\n                   3.8.8.3)  . . . . . . . . . . . . . . .
    . . . . .   8\n     3.5.  Parameters (RFC 5545, Section 3.2)  . . . . . . . .
    . . .   9\n       3.5.1.  VALUE Parameter . . . . . . . . . . . . . . . . . .
    .  10\n       3.5.2.  Multi-value Parameters  . . . . . . . . . . . . . . .  11\n
    \    3.6.  Values (RFC 5545, Section 3.3)  . . . . . . . . . . . . .  11\n       3.6.1.
    \ Binary (RFC 5545, Section 3.3.1)  . . . . . . . . . .  12\n       3.6.2.  Boolean
    \ (RFC 5545, Section 3.3.2)  . . . . . . . . .  12\n       3.6.3.  Calendar User
    Address (RFC 5545, Section 3.3.3) . . .  12\n       3.6.4.  Date (RFC 5545, Section
    3.3.4)  . . . . . . . . . . .  12\n       3.6.5.  Date-Time (RFC 5545, Section
    3.3.5) . . . . . . . . .  13\n       3.6.6.  Duration (RFC 5545, Section 3.3.6)
    \ . . . . . . . . .  13\n       3.6.7.  Float (RFC 5545, Section 3.3.7) . . .
    . . . . . . . .  14\n       3.6.8.  Integer (RFC 5545, Section 3.3.8) . . . .
    . . . . . .  14\n       3.6.9.  Period of Time (RFC 5545, Section 3.3.9)  . .
    . . . .  14\n       3.6.10. Recurrence Rule (RFC 5545, Section 3.3.10)  . . .
    . .  15\n       3.6.11. Text (RFC 5545, Section 3.3.11) . . . . . . . . . . .
    \ 16\n       3.6.12. Time (RFC 5545, Section 3.3.12) . . . . . . . . . . .  16\n
    \      3.6.13. URI (RFC 5545, Section 3.3.13)  . . . . . . . . . . .  17\n       3.6.14.
    UTC Offset (RFC 5545, Section 3.3.14) . . . . . . . .  17\n     3.7.  Extensions
    \ . . . . . . . . . . . . . . . . . . . . . . .  17\n   4.  Converting from jCal
    into iCalendar . . . . . . . . . . . . .  17\n   5.  Handling Unrecognized Properties
    or Parameters  . . . . . . .  18\n     5.1.  Converting iCalendar into jCal  .
    . . . . . . . . . . . .  18\n     5.2.  Converting jCal into iCalendar  . . .
    . . . . . . . . . .  19\n     5.3.  Examples  . . . . . . . . . . . . . . . .
    . . . . . . . .  19\n   6.  Security Considerations . . . . . . . . . . . . .
    . . . . . .  20\n   7.  IANA Considerations . . . . . . . . . . . . . . . . .
    . . . .  21\n     7.1.  UNKNOWN iCalendar Value Data Type . . . . . . . . . .
    . .  22\n   8.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .
    \ 23\n   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  23\n
    \    9.1.  Normative References  . . . . . . . . . . . . . . . . . .  23\n     9.2.
    \ Informative References  . . . . . . . . . . . . . . . . .  24\n   Appendix A.
    \ ABNF Schema  . . . . . . . . . . . . . . . . . . . .  25\n   Appendix B.  Examples
    . . . . . . . . . . . . . . . . . . . . . .  27\n     B.1.  Example 1 . . . .
    . . . . . . . . . . . . . . . . . . . .  27\n       B.1.1.  iCalendar Data  .
    . . . . . . . . . . . . . . . . . .  27\n       B.1.2.  jCal Data . . . . . .
    . . . . . . . . . . . . . . . .  27\n     B.2.  Example 2 . . . . . . . . . .
    . . . . . . . . . . . . . .  28\n       B.2.1.  iCalendar Data  . . . . . . .
    . . . . . . . . . . . .  28\n       B.2.2.  jCal Data . . . . . . . . . . . .
    . . . . . . . . . .  29\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The iCalendar data format [RFC5545] is a widely deployed
    interchange\n   format for calendaring and scheduling data.  While many applications\n
    \  and services consume and generate calendar data, iCalendar is a\n   specialized
    format that requires its own parser/generator.  In\n   contrast, JSON-based formats
    as defined in [RFC7159] are the native\n   format for JavaScript widgets and libraries,
    and it is appropriate to\n   have a standard form of calendar data that is easier
    to work with\n   than iCalendar.\n   The purpose of this specification is to define
    \"jCal\", a JSON format\n   for iCalendar data. jCal is defined as a straightforward
    mapping into\n   JSON from iCalendar, so that iCalendar data can be converted
    to JSON,\n   and then back to iCalendar, without losing any semantic meaning in\n
    \  the data.  Anyone creating jCal calendar data according to this\n   specification
    will know that their data can be converted to a valid\n   iCalendar representation
    as well.\n   The key design considerations are essentially the same as those for\n
    \  [RFC6321], that is:\n      Round-tripping (converting an iCalendar instance
    to jCal and back)\n      will give the same semantic result as the starting point.
    \ For\n      example, all components, properties, and property parameters are\n
    \     guaranteed to be preserved.\n      Ordering of elements and case of property
    and parameter names will\n      not necessarily be preserved.\n      The iCalendar
    data semantics are to be preserved, allowing a\n      simple consumer to easily
    browse the data in jCal.  A full\n      understanding of iCalendar is still required
    in order to modify\n      and/or fully comprehend the calendar data.\n      Extensions
    to the underlying iCalendar specification must not lead\n      to requiring an
    update to jCal.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [RFC2119].  The\n   underlying format used for jCal is JSON.  Consequently,
    the terms\n   \"object\" and \"array\" as well as the four primitive types (strings,\n
    \  numbers, booleans, and null) are to be interpreted as described in\n   Section
    1 of [RFC7159].\n   Some examples in this document contain \"partial\" JSON documents
    used\n   for illustrative purposes.  In these examples, three periods \"...\"\n
    \  are used to indicate a portion of the document that has been removed\n   for
    compactness.\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Converting from iCalendar to jCal\n   This section describes how iCalendar
    data is converted to jCal using\n   a simple mapping between the iCalendar data
    model and JSON elements.\n   Aside from the formal description in this section,
    an informative\n   ABNF is specified in Appendix A.\n   In [RFC5545], an iCalendar
    object comprises a set of \"components\",\n   \"properties\", \"parameters\",
    and \"values\".  The top level of iCalendar\n   data typically contains a stream
    of iCalendar objects, each of which\n   can be considered a \"component\".  A
    \"component\" can contain other\n   \"components\" or \"properties\".  A \"property\"
    has a \"value\" and a set\n   of zero or more \"parameters\".  Each of these entities
    have a\n   representation in jCal, defined in the following sections.  The\n   representation
    of an iCalendar object in JSON will be named \"jCal\n   object\" throughout this
    document.\n"
  - contents:
    - "3.1.  Pre-processing\n   iCalendar uses a line-folding mechanism to limit lines
      of data to a\n   maximum line length (typically 75 octets) to ensure the maximum\n
      \  likelihood of preserving data integrity as it is transported via\n   various
      means (e.g., email) -- see Section 3.1 of [RFC5545].\n   iCalendar data uses
      an \"escape\" character sequence for text values\n   and property parameter
      values.  See Sections 3.1 and 3.3 of [RFC5545]\n   as well as [RFC6868].\n   There
      is a subtle difference in the number representations between\n   JSON and iCalendar.
      \ While in iCalendar, a number may have leading\n   zeros, as well as a leading
      plus sign; this is not the case in JSON.\n   Numbers should be represented in
      whatever way needed for the\n   underlying format.\n   When converting from
      iCalendar to jCal: First, iCalendar lines MUST\n   be unfolded.  Afterwards,
      any iCalendar escaping MUST be unescaped.\n   Finally, JSON escaping, as described
      in Section 7 of [RFC7159], MUST\n   be applied.  The reverse order applies when
      converting from jCal to\n   iCalendar, which is further described in Section
      4.\n   iCalendar uses a base64 encoding for binary data.  However, it does\n
      \  not restrict the encoding from being applied to non-binary value\n   types.
      \ So, the following rules are applied when processing a\n   property with the
      \"ENCODING\" property parameter set to \"BASE64\":\n   o  If the property value
      type is \"BINARY\", the base64 encoding MUST\n      be preserved.\n   o  If
      the value type is not \"BINARY\", the \"ENCODING\" property\n      parameter
      MUST be removed, and the value MUST be base64 decoded.\n   When base64 encoding
      is used, it MUST conform to Section 4 of\n   [RFC4648], which is the base64
      method used in [RFC5545].\n   One key difference in the formatting of values
      used in iCalendar and\n   jCal is that in jCal, the specification uses date/time
      values aligned\n   with the extended format of [ISO.8601.2004], which is more
      commonly\n   used in Internet applications that make use of the JSON format.
      \ The\n   sections of this document describing the various date and time\n   formats
      contain more information on the use of the complete\n   representation, reduced
      accuracy, or truncated representation.\n"
    title: 3.1.  Pre-processing
  - contents:
    - "3.2.  iCalendar Stream and Objects (RFC 5545, Section 3.4)\n   At the top level
      of the iCalendar object model is an \"iCalendar\n   stream\".  This stream encompasses
      multiple \"iCalendar objects\".  As\n   the typical use case is transporting
      a single iCalendar object, there\n   is no defined equivalent to an \"iCalendar
      stream\" in jCal.  To\n   transport multiple jCal objects in a stream, a simple
      JSON array can\n   be used.\n   Example:\n   [\"vcalendar\",\n     [ /* Add
      jCal properties in place of this comment */ ],\n     [ /* Add jCal components
      in place of this comment */ ]\n   ]\n"
    title: 3.2.  iCalendar Stream and Objects (RFC 5545, Section 3.4)
  - contents:
    - "3.3.  Components (RFC 5545, Section 3.6)\n   Each iCalendar component, delimited
      by \"BEGIN\" and \"END\", will be\n   converted to a fixed-length array with
      three fields that have a\n   specific structure:\n   1.  A string with the name
      of the iCalendar component, but in\n       lowercase.\n   2.  An array of jCal
      properties as described in Section 3.4.\n   3.  An array of jCal components,
      representing the sub-components of\n       the component in question.\n   This
      mapping applies to the top level iCalendar objects, as well as\n   individual
      sub-components in the same way.  The iCalendar to jCal\n   component mapping
      is valid for both current iCalendar components and\n   any new iCalendar components
      added in the future.  Conversion is to\n   be done in the same way.\n   While
      the grouping of properties and sub-components does not retain\n   the original
      order specified in the iCalendar data, the semantics of\n   a component are
      preserved.\n   Example:\n   [\"vevent\",\n     [ /* Add jCal properties in place
      of this comment */ ],\n     [ /* Add jCal components in place of this comment
      */ ]\n   ]\n"
    title: 3.3.  Components (RFC 5545, Section 3.6)
  - contents:
    - "3.4.  Properties (RFC 5545, Sections 3.7 and 3.8)\n   iCalendar properties,
      whether they apply to the \"VCALENDAR\" object or\n   to a component, are handled
      in a consistent way in the jCal format.\n   In jCal, each individual iCalendar
      property MUST be represented by an\n   array with three fixed elements, followed
      by one or more additional\n   elements, depending on if the property is a multi-valued
      property as\n   described in Section 3.1.2 of [RFC5545].\n   The array consists
      of the following fixed elements:\n   1.  The name of the property, as a lowercase
      string.  The iCalendar\n       format specifies that property names are case
      insensitive and\n       recommends that they be rendered in uppercase.  In jCal,
      they\n       MUST be in lowercase.\n   2.  An object containing the parameters
      as described in Section 3.5.\n       If the property has no parameters, an empty
      object is used to\n       represent that.\n   3.  The type identifier string
      of the value, in lowercase.  Due to\n       special casing of certain properties
      as described in\n       Section 3.4.1, it is important that parsers check both
      the type\n       identifier and the value data type and do not rely on assumptions\n
      \      based on the property name.\n   The remaining elements of the array are
      used for one or more values\n   of the property.  For single-valued properties,
      the array has exactly\n   four elements; for multi-valued properties, as described
      in\n   Section 3.1.2 of [RFC5545], each value is another element, and there\n
      \  can be any number of additional elements.\n   In the following example, the
      \"categories\" property is multi-valued\n   and has two values, while the summary
      property is single-valued:\n   Example:\n   [\"vevent\",\n     [\n       [\"summary\",
      {}, \"text\", \"Meeting with Fred\"],\n       [\"categories\", {}, \"text\",
      \"Meetings\", \"Work\"]\n       ...\n     ],\n     [ /* sub-components */ ]\n
      \  ]\n"
    - contents:
      - "3.4.1.  Special Cases for Properties\n   This section describes some properties
        that have special handling\n   when converting to jCal.\n"
      - contents:
        - "3.4.1.1.  GEO Property (RFC 5545, Section 3.8.1.6)\n   In iCalendar, the
          \"GEO\" property value is defined as a semicolon-\n   separated list of
          two \"FLOAT\" values, the first representing latitude\n   and the second
          longitude.\n   In jCal, the value for the \"geo\" property value is represented
          as an\n   array of two values.  The first value of the property represents
          the\n   latitude; the second value represents the longitude.\n   When converting
          from jCal to iCalendar, be careful to use a semicolon\n   as the separator
          between the two values as required by [RFC5545].\n   When converting from
          jCal to iCalendar, the two values MUST be\n   converted using a semicolon
          as the separator character.\n   Example\n   [\"vevent\",\n     [\n       [\"geo\",
          {}, \"float\", [ 37.386013, -122.082932 ] ]\n       ...\n     ],\n     ...\n
          \  ]\n"
        title: 3.4.1.1.  GEO Property (RFC 5545, Section 3.8.1.6)
      - contents:
        - "3.4.1.2.  REQUEST-STATUS Property (RFC 5545, Section 3.8.8.3)\n   In iCalendar,
          the \"REQUEST-STATUS\" property value is defined as a\n   semicolon-separated
          list of two or three \"TEXT\" values.  The first\n   represents a code,
          the second a description, and the third any\n   additional data.\n   In
          jCal, the value for the \"request-status\" property value is\n   represented
          as an array with two or three values.  The first array\n   element corresponds
          to the code, the second element corresponds to\n   the description, and
          the third element corresponds to the additional\n   data.  Each value is
          represented using a string value.  If there is\n   no additional data in
          the iCalendar value, the last element of the\n   array SHOULD NOT be present.\n
          \  When converting from jCal to iCalendar, the two or three values MUST\n
          \  be converted using a semicolon as the separator character.\n   iCalendar
          Example:\n   BEGIN:VEVENT\n   ...\n   REQUEST-STATUS:2.0;Success\n   REQUEST-STATUS:3.7;Invalid
          calendar user;ATTENDEE:\n    mailto:jsmith@example.com\n   ...\n   END:VEVENT\n
          \  jCal Example:\n   [\"vevent\":\n     [\n       [\"request-status\", {},
          \"text\", [\"2.0\", \"Success\"] ],\n       [\"request-status\", {}, \"text\",\n
          \         [\n           \"3.7\",\n           \"Invalid calendar user\",\n
          \          \"ATTENDEE:mailto:jsmith@example.org\"\n          ]\n       ],\n
          \      ...\n     ],\n     ...\n   ]\n"
        title: 3.4.1.2.  REQUEST-STATUS Property (RFC 5545, Section 3.8.8.3)
      title: 3.4.1.  Special Cases for Properties
    title: 3.4.  Properties (RFC 5545, Sections 3.7 and 3.8)
  - contents:
    - "3.5.  Parameters (RFC 5545, Section 3.2)\n   Property parameters are represented
      as a JSON object where each key-\n   value pair represents the iCalendar parameter
      name and its value.\n   The name of the parameter MUST be in lowercase; the
      original case of\n   the parameter value MUST be preserved.  For example, the
      \"PARTSTAT\"\n   property parameter is represented in jCal by the \"partstat\"
      key.  Any\n   new iCalendar parameters added in the future will be converted
      in the\n   same way.\n   Example:\n   [\"vevent\":\n     [\n       [\"attendee\",\n
      \       {\n          \"partstat\": \"ACCEPTED\",\n          \"rsvp\": \"TRUE\",\n
      \         \"role\": \"REQ-PARTICIPANT\"\n        },\n        \"cal-address\",\n
      \       \"mailto:jsmith@example.org\"\n       ],\n       [\"summary\", {}, \"text\",
      \"Meeting\"],\n       ...\n     ],\n     ...\n   ]\n"
    - contents:
      - "3.5.1.  VALUE Parameter\n   iCalendar defines a \"VALUE\" property parameter
        (Section 3.2.20 of\n   [RFC5545]).  This property parameter MUST NOT be added
        to the\n   parameters object.  Instead, the value type is signaled through
        the\n   type identifier in the third element of the array describing the\n
        \  property.  When converting a property from iCalendar to jCal, the\n   value
        type is determined as follows:\n   1.  If the property has a \"VALUE\" parameter,
        that parameter's value\n       is used as the value type.\n   2.  If the property
        has no \"VALUE\" parameter but has a default value\n       type, the default
        value type is used.\n   3.  If the property has no \"VALUE\" parameter and
        has no default value\n       type, \"unknown\" is used.\n   Converting from
        jCal into iCalendar is done as follows:\n   1.  If the property's value type
        is \"unknown\", no \"VALUE\" parameter\n       is included.\n   2.  If the
        property's value type is the default type for that\n       property, no \"VALUE\"
        parameter is included.\n   3.  Otherwise, a \"VALUE\" parameter is included,
        and the value type is\n       used as the parameter value.\n   See Section
        5 for information on handling unknown value types.\n"
      title: 3.5.1.  VALUE Parameter
    - contents:
      - "3.5.2.  Multi-value Parameters\n   In [RFC5545], some parameters allow using
        a COMMA-separated list of\n   values.  To ease processing in jCal, the value
        of such parameters\n   MUST be represented in an array containing the separated
        values.  The\n   array elements MUST be string values.  Single-value parameters
        can be\n   represented using either a single string value or an array with
        one\n   string element.  A jCal parser MUST be able to understand both value\n
        \  data types.  Examples of such parameters are the iCalendar\n   \"DELEGATED-FROM\"
        and \"DELEGATED-TO\" parameters; more such parameters\n   may be added in
        extensions.\n   The iCalendar specification requires encapsulation between
        DQUOTE\n   characters if a parameter value contains a colon, a semicolon,
        or a\n   comma.  These extra DQUOTE characters do not belong to the actual\n
        \  parameter value, and hence are not included when the parameter is\n   converted
        to jCal.\n   Example 1:\n   [\"attendee\",\n    {\n      \"delegated-to\":
        [\"mailto:jdoe@example.org\",\n                       \"mailto:jqpublic@example.org\"]\n
        \   },\n    \"cal-address\",\n    \"mailto:jsmith@example.org\"\n   ]\n   Example
        2:\n   [\"attendee\",\n    {\n      \"delegated-to\": \"mailto:jdoe@example.org\"\n
        \   },\n    \"cal-address\",\n    \"mailto:jsmith@example.org\"\n   ]\n"
      title: 3.5.2.  Multi-value Parameters
    title: 3.5.  Parameters (RFC 5545, Section 3.2)
  - contents:
    - "3.6.  Values (RFC 5545, Section 3.3)\n   The following subsections specify
      how iCalendar property value data\n   types, which are defined in the subsections
      of [RFC5545],\n   Section 3.3, are represented in jCal.\n"
    - contents:
      - "3.6.1.  Binary (RFC 5545, Section 3.3.1)\n   Description:  iCalendar \"BINARY\"
        property values are represented by a\n      property with the type identifier
        \"binary\".  The value element is\n      a JSON string, encoded with base64
        encoding as specified in\n      Section 4 of [RFC4648].\n   Example:\n   [\"attach\",
        {}, \"binary\", \"SGVsbG8gV29ybGQh\"]\n"
      title: 3.6.1.  Binary (RFC 5545, Section 3.3.1)
    - contents:
      - "3.6.2.  Boolean (RFC 5545, Section 3.3.2)\n   Description:  iCalendar \"BOOLEAN\"
        property values are represented by\n      a property with the type identifier
        \"boolean\".  The value is a\n      JSON boolean value.\n   Example:\n   [\"x-non-smoking\",
        {}, \"boolean\", true]\n"
      title: 3.6.2.  Boolean (RFC 5545, Section 3.3.2)
    - contents:
      - "3.6.3.  Calendar User Address (RFC 5545, Section 3.3.3)\n   Description:
        \ iCalendar \"CAL-ADDRESS\" property values are represented\n      by a property
        with the type identifier \"cal-address\".  The value\n      is a JSON string
        with the URI as described in [RFC3986].\n   Example:\n   [\"attendee\", {},
        \"cal-address\", \"mailto:kewisch@example.com\"]\n"
      title: 3.6.3.  Calendar User Address (RFC 5545, Section 3.3.3)
    - contents:
      - "3.6.4.  Date (RFC 5545, Section 3.3.4)\n   Description:  iCalendar \"DATE\"
        property values are represented by a\n      property with the type identifier
        \"date\".  The value elements are\n      JSON strings with the same date value
        specified by [RFC5545], but\n      represented using the extended format of
        the complete\n      representation specified in [ISO.8601.2004], Section 4.1.2.2.\n
        \     Other variations, for example, representation with reduced\n      accuracy,
        MUST NOT be used.\n   ABNF Schema:\n   ; year, month, and day rules are\n
        \  ; defined in [ISO.8601.2004], Section 2.2.\n   date = year \"-\" month
        \"-\" day ;YYYY-MM-DD\n   Example:\n   [\"dtstart\", {}, \"date\", \"2011-05-17\"]\n"
      title: 3.6.4.  Date (RFC 5545, Section 3.3.4)
    - contents:
      - "3.6.5.  Date-Time (RFC 5545, Section 3.3.5)\n   Description:  iCalendar \"DATE-TIME\"
        property values are represented\n      by a property with the type identifier
        \"date-time\".  The value\n      elements are JSON strings with the same date
        value specified by\n      [RFC5545], but represented using the extended format
        of the\n      complete representation specified in [ISO.8601.2004],\n      Section
        4.3.2.  Other variations, for example, representation with\n      reduced
        accuracy, MUST NOT be used.  The same restrictions apply\n      with respect
        to leap seconds and time zone offsets as specified in\n      [RFC5545], Section
        3.3.5.\n   ABNF Schema:\n   ; year, month, day, hour, minute, and second rules
        are\n   ; defined in [ISO.8601.2004], Section 2.2.\n   ; The zone identifier
        is described in [ISO.8601.2004], Section 4.3.2.\n   date-complete = year \"-\"
        month \"-\" day ;YYYY-MM-DD\n   time-complete =  hour \":\" minute \":\" second
        [zone] ; HH:MM:SS\n   datetime = date-complete \"T\" time-complete\n   Examples:\n
        \  [\"dtstart\", {}, \"date-time\", \"2012-10-17T12:00:00\"],\n   [\"dtstamp\",
        {}, \"date-time\", \"2012-10-17T12:00:00Z\"],\n   [\"dtend\",\n    { \"tzid\":
        \"Europe/Berlin\" },\n    \"date-time\",\n    \"2011-10-17T13:00:00\"\n   ]\n"
      title: 3.6.5.  Date-Time (RFC 5545, Section 3.3.5)
    - contents:
      - "3.6.6.  Duration (RFC 5545, Section 3.3.6)\n   Description:  iCalendar \"DURATION\"
        property values are represented by\n      a property with the type identifier
        \"duration\".  The value\n      elements are JSON strings with the same duration
        value specified\n      by [RFC5545].\n   Example:\n   [\"duration\", {}, \"duration\",
        \"P1D\"]\n"
      title: 3.6.6.  Duration (RFC 5545, Section 3.3.6)
    - contents:
      - "3.6.7.  Float (RFC 5545, Section 3.3.7)\n   Description:  iCalendar \"FLOAT\"
        property values are represented by a\n      property with the type identifier
        \"float\".  The value elements are\n      JSON primitive number values.\n
        \  Example:\n   [\"x-grade\", {}, \"float\", 1.3]\n"
      title: 3.6.7.  Float (RFC 5545, Section 3.3.7)
    - contents:
      - "3.6.8.  Integer (RFC 5545, Section 3.3.8)\n   Description:  vCard \"INTEGER\"
        property values are represented by a\n      property with the type identifier
        \"integer\".  The value elements\n      are JSON primitive number values that
        MUST resolve to an integer\n      value in the range specified in [RFC5545],
        Section 3.3.8.  Thus, a\n      fractional and/or exponential part are only
        allowed under limited\n      circumstances.\n   Examples:\n   [\"percent-complete\",
        {}, \"integer\", 42]\n"
      title: 3.6.8.  Integer (RFC 5545, Section 3.3.8)
    - contents:
      - "3.6.9.  Period of Time (RFC 5545, Section 3.3.9)\n   Description:  iCalendar
        \"PERIOD\" property values are represented by a\n      jCal property with
        the type identifier \"period\".  The value\n      element is an array of JSON
        strings, with the first element\n      representing the start of the period
        and the second element\n      representing the end of the period.  As in [RFC5545],
        the start of\n      the period is always formatted as a date-time value, and
        the end\n      of the period MUST be either a date-time or duration value.
        \ Any\n      date, date-time, or duration values contained in the period value\n
        \     MUST be formatted in accordance to the rules for date, date-time,\n
        \     or duration values specified in this document.\n   Example:\n   [\"freebusy\",\n
        \   { \"fbtype\": \"FREE\" },\n    \"period\",\n    [\"1997-03-08T16:00:00Z\",
        \"P1D\"]\n   ]\n"
      title: 3.6.9.  Period of Time (RFC 5545, Section 3.3.9)
    - contents:
      - "3.6.10.  Recurrence Rule (RFC 5545, Section 3.3.10)\n   Description:  iCalendar
        \"RECUR\" property values are represented by a\n      property with the type
        identifier \"recur\".  The value elements are\n      objects describing the
        structured data as specified by [RFC5545].\n      Each rule part is described
        by the combination of key and value.\n      The key specifies the name of
        the rule part and MUST be converted\n      to lowercase.  The value of the
        rule part MUST be mapped by the\n      following rules:\n      *  The value
        of the \"freq\" and \"wkst\" rule parts MUST be a string\n         as specified
        in [RFC5545], with case preserved.\n      *  The value of the \"until\" rule
        part MUST be a date or date-time\n         value formatted in accordance to
        the rules for date or date-\n         time specified in this document.\n      *
        \ The \"count\" and \"interval\" rule parts MUST be specified as a\n         single
        JSON number value.\n      *  The following rule parts can have one or more
        numeric values:\n         \"bysecond\", \"byminute\", \"byhour\", \"bymonthday\",
        \"byyearday\",\n         \"byweekno\", \"bymonth\", and \"bysetpos\".  If
        a rule part contains\n         multiple values, an array of numbers MUST be
        used for that rule\n         part.  Single-valued rule parts can be represented
        by either\n         using a single number value, omitting the array completely,
        or\n         using an array with one number element.  A jCal parser MUST be\n
        \        able to understand both data types.\n      *  Similarly, the \"byday\"
        rule part can have one or more string\n         values.  If it contains multiple
        values, an array of strings\n         MUST be used.  As before, a single-valued
        rule part can be\n         represented using either a single string value
        or an array with\n         one string element, both of which a jCal parser
        MUST be able to\n         understand.\n   Example 1:\n   [\"rrule\",\n    {},\n
        \   \"recur\",\n    {\n      \"freq\": \"YEARLY\",\n      \"count\": 5,\n
        \     \"byday\": [ \"-1SU\", \"2MO\" ],\n      \"bymonth\": 10\n    }\n   ]\n
        \  Example 2:\n   [\"rrule\",\n    {},\n    \"recur\",\n    {\n      \"freq\":
        \"MONTHLY\",\n      \"interval\": 2,\n      \"bymonthday\": [ 1, 15, -1 ],\n
        \     \"until\": \"2013-10-01\"\n    }\n   ]\n"
      title: 3.6.10.  Recurrence Rule (RFC 5545, Section 3.3.10)
    - contents:
      - "3.6.11.  Text (RFC 5545, Section 3.3.11)\n   Description:  iCalendar \"TEXT\"
        property values are represented by a\n      property with the type identifier
        \"text\".  The value elements are\n      JSON strings.\n   Example:\n   [\"comment\",
        {}, \"text\", \"hello, world\"]\n"
      title: 3.6.11.  Text (RFC 5545, Section 3.3.11)
    - contents:
      - "3.6.12.  Time (RFC 5545, Section 3.3.12)\n   Description:  iCalendar \"TIME\"
        property values are represented by a\n      property with the type identifier
        \"time\".  The value elements are\n      JSON strings with the same time value
        specified by [RFC5545], but\n      represented using the extended format of
        the complete\n      representation specified in [ISO.8601.2004], Section 4.2.2.2.\n
        \     Other variations, for example, representation with reduced\n      accuracy,
        MUST NOT be used.  The same restrictions apply with\n      respect to leap
        seconds, time fractions, and time zone offsets as\n      specified in [RFC5545],
        Section 3.3.12.\n   ABNF Schema:\n   ; hour, minute, and second rules are\n
        \  ; defined in [ISO.8601.2004], Section 2.2.\n   ; The zone identifier is
        described in [ISO.8601.2004], Section 4.3.2.\n   time-complete =  hour \":\"
        minute \":\" second [zone] ; HH:MM:SS\n   Example:\n   [\"x-time-local\",
        {}, \"time\", \"12:30:00\"],\n   [\"x-time-utc\", {}, \"time\", \"12:30:00Z\"],\n
        \  [\"x-time-offset\", { \"tzid\": \"Europe/Berlin\" }, \"time\", \"12:30:00\"]\n"
      title: 3.6.12.  Time (RFC 5545, Section 3.3.12)
    - contents:
      - "3.6.13.  URI (RFC 5545, Section 3.3.13)\n   Description:  iCalendar \"URI\"
        property values are represented by a\n      property with the type identifier
        \"uri\".  The value elements are\n      JSON strings representing the URI.\n
        \  Example:\n   [\"tzurl\", {}, \"uri\", \"http://example.org/tz/Europe-Berlin.ics\"]\n"
      title: 3.6.13.  URI (RFC 5545, Section 3.3.13)
    - contents:
      - "3.6.14.  UTC Offset (RFC 5545, Section 3.3.14)\n   Description:  iCalendar
        \"UTC-OFFSET\" property values are represented\n      by a property with the
        type identifier \"utc-offset\".  The value\n      elements are JSON strings
        with the same UTC offset value specified\n      by [RFC5545], with the exception
        that the hour and minute\n      components are separated by a \":\" character,
        for consistency with\n      the [ISO.8601.2004] time zone offset, extended
        format.\n   Example:\n   [\"tzoffsetfrom\", {}, \"utc-offset\", \"-05:00\"],\n
        \  [\"tzoffsetto\", {}, \"utc-offset\", \"+12:45\"]\n"
      title: 3.6.14.  UTC Offset (RFC 5545, Section 3.3.14)
    title: 3.6.  Values (RFC 5545, Section 3.3)
  - contents:
    - "3.7.  Extensions\n   iCalendar extension properties and property parameters
      (those with an\n   \"X-\" prefix in their name) are handled in the same way
      as other\n   properties and property parameters: the property is represented
      by an\n   array, and the property parameter is represented by an object.  The\n
      \  property or parameter name uses the same name as for the iCalendar\n   extension,
      but in lowercase.  For example, the \"X-FOO\" property in\n   iCalendar turns
      into the \"x-foo\" jCal property.  See Section 5 for\n   how to deal with default
      values for unrecognized extension properties\n   or property parameters.\n"
    title: 3.7.  Extensions
  title: 3.  Converting from iCalendar to jCal
- contents:
  - "4.  Converting from jCal into iCalendar\n   Converting jCal to iCalendar reverses
    the process described in\n   Section 3.  This section describes a few additional
    requirements for\n   conversion.\n   When converting component, property, and
    property parameter names,\n   the names SHOULD be converted to uppercase.  Although
    iCalendar names\n   are case insensitive, common practice is to keep them all
    uppercase\n   following the actual definitions in [RFC5545].\n   During conversion,
    JSON escaping MUST be unescaped.  Afterwards,\n   iCalendar escaping, as defined
    by [RFC5545] and [RFC6868], MUST be\n   applied.  Finally, long lines SHOULD be
    folded as described in\n   [RFC5545], Section 3.1.\n   Non-binary value types
    MUST NOT be base64 encoded.\n   When converting to iCalendar, the VALUE parameter
    MUST be added to\n   properties whose default value type is unknown, but do not
    have a\n   jCal type identifier \"unknown\".  The VALUE parameter MAY be omitted\n
    \  for properties using the default value type.  The VALUE parameter\n   MUST
    be omitted for properties that have the jCal type identifier\n   \"unknown\".\n"
  title: 4.  Converting from jCal into iCalendar
- contents:
  - "5.  Handling Unrecognized Properties or Parameters\n   In iCalendar, properties
    can have one or more value types as\n   specified by their definition, with one
    of those values being defined\n   as the default.  When a property uses its default
    value type, the\n   \"VALUE\" property parameter does not need to be specified
    on the\n   property.  For example, the default value type for \"DTSTART\" is\n
    \  \"DATE-TIME\", so \"VALUE=DATE-TIME\" need not be set as a property\n   parameter.
    \ However, \"DTSTART\" also allows a \"DATE\" value to be\n   specified, and if
    that is used, \"VALUE=DATE\" has to be set as a\n   property parameter.\n   When
    new properties are defined or \"X-\" properties used, an iCalendar\n   to jCal
    converter might not recognize them, and not know what the\n   appropriate default
    value types are, yet they need to be able to\n   preserve the values.  A similar
    issue arises for unrecognized\n   property parameters.\n   In jCal, a new \"unknown\"
    property value type is introduced.  Its\n   purpose is to allow preserving unknown
    property values when round-\n   tripping between jCal and iCalendar.  To avoid
    collisions, this\n   specification reserves the UNKNOWN property value type in
    iCalendar.\n   It MUST NOT be used in any iCalendar as specified by [RFC5545],
    nor\n   any extensions to it.  Thus, the type is registered to the iCalendar\n
    \  Value Data Types registry in Section 7.1.\n"
  - contents:
    - "5.1.  Converting iCalendar into jCal\n   Any property that does not include
      a \"VALUE\" property parameter and\n   whose default value type is not known,
      MUST be converted to a\n   primitive JSON string.  The content of that string
      is the unprocessed\n   value text.  Also, value type MUST be set to \"unknown\".\n
      \  To correctly implement this format, it is critical that the type\n   \"unknown\"
      be used if the default type is not known.  If this\n   requirement is ignored
      and, for example, \"text\" is used, additional\n   escaping may occur, which
      breaks round-tripping values.\n   Any unrecognized property parameter MUST be
      converted to a string\n   value, with its content set to the property parameter
      value text, and\n   treated as if it were a \"TEXT\" value.\n"
    title: 5.1.  Converting iCalendar into jCal
  - contents:
    - "5.2.  Converting jCal into iCalendar\n   In jCal, the value type is always
      explicitly specified.  It is\n   converted to iCalendar using the iCalendar
      VALUE parameter, except in\n   the following two cases:\n   o  If the value
      type specified in jCal matches the default value type\n      in iCalendar, the
      VALUE parameter MAY be omitted.\n   o  If the value type specified in jCal is
      set to \"unknown\", the VALUE\n      parameter MUST NOT be specified.  The value
      MUST be taken over in\n      iCalendar without processing.\n"
    title: 5.2.  Converting jCal into iCalendar
  - contents:
    - "5.3.  Examples\n   The following is an example of an unrecognized iCalendar
      property\n   (that uses a \"DATE-TIME\" value as its default), and the equivalent\n
      \  jCal representation of that property.\n   iCalendar:\n   X-COMPLAINT-DEADLINE:20110512T120000Z\n
      \  jCal:\n   [\"x-complaint-deadline\", {}, \"unknown\", \"20110512T120000Z\"]\n
      \  The following is an example of how to cope with jCal data where the\n   parser
      was unable to identify the type.  Note how the \"unknown\" value\n   type is
      not added to the iCalendar data and escaping, aside from\n   standard JSON string
      escaping, is not processed.\n   jCal:\n   [\"x-coffee-data\", {}, \"unknown\",
      \"Stenophylla;Guinea\\\\,Africa\"]\n   iCalendar:\n   X-COFFEE-DATA:Stenophylla;Guinea\\,Africa\n
      \  The following is an example of a jCal property (where the\n   corresponding
      iCalendar property uses an \"INTEGER\" value as its\n   default) and the equivalent
      iCalendar representation of that\n   property.\n   jCal:\n   [\"percent-complete\",
      {}, \"integer\", 95]\n   iCalendar:\n   PERCENT-COMPLETE:95\n   The following
      is an example of an unrecognized iCalendar property\n   parameter (that uses
      a \"FLOAT\" value as its default) specified on a\n   recognized iCalendar property
      and the equivalent jCal representation\n   of that property and property parameter.\n
      \  iCalendar:\n   DTSTART;X-SLACK=30.3;VALUE=DATE:20110512\n   jCal:\n   [\"dtstart\",
      { \"x-slack\": \"30.3\" }, \"date\", \"2011-05-12\"]\n"
    title: 5.3.  Examples
  title: 5.  Handling Unrecognized Properties or Parameters
- contents:
  - "6.  Security Considerations\n   This specification defines how iCalendar data
    can be \"translated\"\n   between two different data formats -- the original text
    format and\n   JSON -- with a one-to-one mapping to ensure all the semantic data
    in\n   one format (properties, parameters, and values) are preserved in the\n
    \  other.  It does not change the semantic meaning of the underlying\n   data
    itself, or impose or remove any security considerations that\n   apply to the
    underlying data.\n   The use of JSON as a format does have its own inherent security
    risks\n   as discussed in Section 12 of [RFC7159].  Even though JSON is\n   considered
    a safe subset of JavaScript, it should be kept in mind\n   that a flaw in the
    parser processing JSON could still impose a\n   threat, which doesn't arise with
    conventional iCalendar data.\n   With this in mind, a parser for JSON data should
    be used for jCal\n   that is aware of the security implications.  For example,
    the use of\n   JavaScript's eval() function is considered an unacceptable security\n
    \  risk, as described in Section 12 of [RFC7159].  A native parser with\n   full
    awareness of the JSON format should be preferred.\n   In addition, it is expected
    that this new format will result in\n   iCalendar data being more widely disseminated
    (e.g., with use in web\n   applications rather than just dedicated calendaring
    applications).\n   In all cases, application developers have to conform to the
    semantics\n   of the iCalendar data as defined by [RFC5545] and associated\n   extensions,
    and all of the security considerations described in\n   Section 7 of [RFC5545],
    or any associated extensions, are applicable.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   This document defines a MIME media type for use with
    iCalendar in\n   JSON data.  This media type SHOULD be used for the transfer of\n
    \  calendaring data in JSON.\n   Type name:  application\n   Subtype name:  calendar+json\n
    \  Required parameters:  none\n   Optional parameters:  \"method\", \"component\",
    and \"optinfo\" as defined\n      for the text/calendar media type in [RFC5545],
    Section 8.1.\n   Encoding considerations:  Same as encoding considerations of\n
    \     application/json as specified in [RFC7159], Section 11.\n   Security considerations:
    \ See Section 6.\n   Interoperability considerations:  This media type provides
    an\n      alternative format for iCalendar data based on JSON.\n   Published specification:
    \ This specification.\n   Applications that use this media type:  Applications
    that currently\n      make use of the text/calendar media type can use this as
    an\n      alternative.  Similarly, applications that use the application/\n      json
    media type to transfer calendaring data can use this to\n      further specify
    the content.\n   Fragment identifier considerations:  N/A\n   Additional information:\n
    \     Deprecated alias names for this type:  N/A\n      Magic number(s):  N/A\n
    \     File extension(s):  N/A\n      Macintosh file type code(s):  N/A\n   Person
    & email address to contact for further information:\n      calsify@ietf.org\n
    \  Intended usage:  COMMON\n   Restrictions on usage:  There are no restrictions
    on where this media\n      type can be used.\n   Author:  See the \"Authors' Addresses\"
    section of this document.\n   Change controller:  IETF\n"
  - contents:
    - "7.1.  UNKNOWN iCalendar Value Data Type\n   IANA has added the following entry
      to the iCalendar Data Types\n   registry:\n   Value name:  UNKNOWN\n   Purpose:
      \ To allow preserving property values whose default value\n      type is not
      known during round-tripping between jCal and\n      iCalendar.\n   Format definition:
      \ N/A\n   Description:  The UNKNOWN value data type is reserved for the\n      exclusive
      use of the jCal format.  Its use is described in\n      Section 5 of this document.\n
      \  Example:  As this registration serves as a reservation of the UNKNOWN\n      type
      so that it is not used in iCalendar, there is no applicable\n      iCalendar
      example.  Examples of its usage in jCal can be found in\n      this document.\n
      \  IANA has made the \"Status\" column for this entry in the registry say,\n
      \  \"Reserved - Do not use\" and has made the \"Reference\" column refer to\n
      \  Section 5 of this document.\n"
    title: 7.1.  UNKNOWN iCalendar Value Data Type
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgments\n   The authors would like to thank the following for their
    valuable\n   contributions: William Gill, Erwin Rehme, Dave Thewlis, Simon\n   Perreault,
    Michael Angstadt, Peter Saint-Andre, Bert Greevenbosch,\n   and Javier Godoy.
    \ This specification originated from the work of the\n   XML-JSON technical committee
    of the Calendaring and Scheduling\n   Consortium.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [ISO.8601.2004]\n              International
      Organization for Standardization, \"Data\n              elements and interchange
      formats -- Information\n              interchange -- Representation of dates
      and times\", ISO\n              8601, December 2004,\n              <http://www.iso.org/iso/catalogue_detail?csnumber=40874>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3986]  Berners-Lee, T., Fielding,
      R., and L. Masinter, \"Uniform\n              Resource Identifier (URI): Generic
      Syntax\", STD 66, RFC\n              3986, January 2005.\n   [RFC4648]  Josefsson,
      S., \"The Base16, Base32, and Base64 Data\n              Encodings\", RFC 4648,
      October 2006.\n   [RFC5234]  Crocker, D. and P. Overell, \"Augmented BNF for
      Syntax\n              Specifications: ABNF\", STD 68, RFC 5234, January 2008.\n
      \  [RFC5545]  Desruisseaux, B., \"Internet Calendaring and Scheduling\n              Core
      Object Specification (iCalendar)\", RFC 5545,\n              September 2009.\n
      \  [RFC6321]  Daboo, C., Douglass, M., and S. Lees, \"xCal: The XML\n              Format
      for iCalendar\", RFC 6321, August 2011.\n   [RFC6868]  Daboo, C., \"Parameter
      Value Encoding in iCalendar and\n              vCard\", RFC 6868, February 2013.\n
      \  [RFC7159]  Bray, T., \"The JavaScript Object Notation (JSON) Data\n              Interchange
      Format\", RFC 7159, March 2014.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [calconnect-artifacts]\n              The
      Calendaring and Scheduling Consortium, \"Code Artifacts\n              and Schemas\",
      <http://www.calconnect.org/artifacts.shtml>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  ABNF Schema\n   Below is an ABNF schema as per [RFC5234] for iCalendar
    in JSON.  ABNF\n   symbols not described here are taken from [RFC7159].  The schema
    is\n   non-normative and given for reference only.\n   Additional semantic restrictions
    apply, especially regarding the\n   allowed properties and sub-components per
    component.  Details on\n   these restrictions can be found in this document and
    [RFC5545].\n   Additional schemas may be available on the Internet at\n   [calconnect-artifacts].\n
    \  ; A jCal object is a component with the component-name \"vcalendar\".\n   ;
    Restrictions to which properties and sub-components may be\n   ; specified are
    to be taken from [RFC5545].\n   jcalobject = component\n   ; A jCal component
    consists of the name string, properties array, and\n   ; component array\n   component
    = begin-array\n               DQUOTE component-name DQUOTE value-separator\n               properties-array
    value-separator\n               components-array\n               end-array\n   components-array
    = begin-array\n                      [ component *(value-separator component)
    ]\n                      end-array\n   ; A jCal property consists of the name
    string, parameters object,\n   ; type string, and one or more values as specified
    in this document.\n   property = begin-array\n              DQUOTE property-name
    DQUOTE value-separator\n              params-object value-separator\n              DQUOTE
    type-name DQUOTE\n              property-value *(value-separator property-value)\n
    \             end-array\n   properties-array = begin-array\n                      [
    property *(value-separator property) ]\n                      end-array\n   ;
    Property values depend on the type-name. Aside from the value types\n   ; mentioned
    here, extensions may make use of other JSON value types.\n   ; The non-terminal
    symbol structured-prop-value covers the special\n   ; cases for GEO and REQUEST-STATUS.\n
    \  property-value = simple-prop-value / structured-prop-value\n   simple-prop-value
    = string / number / true / false\n   structured-prop-value =\n       begin-array\n
    \      [ structured-element *(value-separator structured-element) ]\n       end-array\n
    \  structured-element = simple-prop-value\n   ; The jCal params-object is a JSON
    object that follows the semantic\n   ; guidelines described in this document.\n
    \  params-object = begin-object\n                   [ params-member *(value-separator
    params-member) ]\n                   end-object\n   params-member = DQUOTE param-name
    DQUOTE name-separator param-value\n   param-value = string / param-multi\n   param-multi
    = begin-array\n                 [ string *(value-separator string) ]\n                 end-array\n
    \  ; The type MUST be a valid type as described by this document. New\n   ; value
    types can be added by extensions.\n   type-name = \"binary\" / \"boolean\" / \"cal-address\"
    / \"date\" /\n               \"date-time\" / \"duration\" / \"float\" / \"integer\"
    /\n               \"period\" / \"recur\" / \"text\" / \"time\" / \"uri\" /\n               \"utc-offset\"
    / x-type\n   ; Component, property, parameter, and type names MUST be lowercase.\n
    \  ; Additional semantic restrictions apply as described by this\n   ; document
    and [RFC5545].\n   component-name = lowercase-name\n   property-name = lowercase-name\n
    \  param-name = lowercase-name\n   x-type = lowercase-name\n   lowercase-name
    = 1*(%x61-7A / DIGIT / \"-\")\n   ; The following rules are defined in [RFC7159],
    as mentioned above:\n   ;   begin-array / end-array\n   ;   begin-object / end-object\n
    \  ;   name-separator / value-separator\n   ;   string / number / true / false\n"
  title: Appendix A.  ABNF Schema
- contents:
  - "Appendix B.  Examples\n   This section contains two examples of iCalendar objects
    with their\n   jCal representation.\n"
  - contents:
    - 'B.1.  Example 1

      '
    - contents:
      - "B.1.1.  iCalendar Data\n   BEGIN:VCALENDAR\n   CALSCALE:GREGORIAN\n   PRODID:-//Example
        Inc.//Example Calendar//EN\n   VERSION:2.0\n   BEGIN:VEVENT\n   DTSTAMP:20080205T191224Z\n
        \  DTSTART:20081006\n   SUMMARY:Planning meeting\n   UID:4088E990AD89CB3DBB484909\n
        \  END:VEVENT\n   END:VCALENDAR\n"
      title: B.1.1.  iCalendar Data
    - contents:
      - "B.1.2.  jCal Data\n   [\"vcalendar\",\n     [\n       [\"calscale\", {},
        \"text\", \"GREGORIAN\"],\n       [\"prodid\", {}, \"text\", \"-//Example
        Inc.//Example Calendar//EN\"],\n       [\"version\", {}, \"text\", \"2.0\"]\n
        \    ],\n     [\n       [\"vevent\",\n         [\n           [\"dtstamp\",
        {}, \"date-time\", \"2008-02-05T19:12:24Z\"],\n           [\"dtstart\", {},
        \"date\", \"2008-10-06\"],\n           [\"summary\", {}, \"text\", \"Planning
        meeting\"],\n           [\"uid\", {}, \"text\", \"4088E990AD89CB3DBB484909\"]\n
        \        ],\n         []\n       ]\n     ]\n   ]\n"
      title: B.1.2.  jCal Data
    title: B.1.  Example 1
  - contents:
    - 'B.2.  Example 2

      '
    - contents:
      - "B.2.1.  iCalendar Data\n   BEGIN:VCALENDAR\n   VERSION:2.0\n   PRODID:-//Example
        Corp.//Example Client//EN\n   BEGIN:VTIMEZONE\n   LAST-MODIFIED:20040110T032845Z\n
        \  TZID:US/Eastern\n   BEGIN:DAYLIGHT\n   DTSTART:20000404T020000\n   RRULE:FREQ=YEARLY;BYDAY=1SU;BYMONTH=4\n
        \  TZNAME:EDT\n   TZOFFSETFROM:-0500\n   TZOFFSETTO:-0400\n   END:DAYLIGHT\n
        \  BEGIN:STANDARD\n   DTSTART:20001026T020000\n   RRULE:FREQ=YEARLY;BYDAY=-1SU;BYMONTH=10\n
        \  TZNAME:EST\n   TZOFFSETFROM:-0400\n   TZOFFSETTO:-0500\n   END:STANDARD\n
        \  END:VTIMEZONE\n   BEGIN:VEVENT\n   DTSTAMP:20060206T001121Z\n   DTSTART;TZID=US/Eastern:20060102T120000\n
        \  DURATION:PT1H\n   RRULE:FREQ=DAILY;COUNT=5\n   RDATE;TZID=US/Eastern;VALUE=PERIOD:20060102T150000/PT2H\n
        \  SUMMARY:Event #2\n   DESCRIPTION:We are having a meeting all this week
        at 12 pm fo\n    r one hour\\, with an additional meeting on the first day
        2 h\n    ours long.\\nPlease bring your own lunch for the 12 pm meetin\n    gs.\n
        \  UID:00959BC664CA650E933C892C@example.com\n   END:VEVENT\n   BEGIN:VEVENT\n
        \  DTSTAMP:20060206T001121Z\n   DTSTART;TZID=US/Eastern:20060104T140000\n
        \  DURATION:PT1H\n   RECURRENCE-ID;TZID=US/Eastern:20060104T120000\n   SUMMARY:Event
        #2 bis\n   UID:00959BC664CA650E933C892C@example.com\n   END:VEVENT\n   END:VCALENDAR\n"
      title: B.2.1.  iCalendar Data
    - contents:
      - "B.2.2.  jCal Data\n   [\"vcalendar\",\n     [\n       [\"prodid\", {}, \"text\",
        \"-//Example Corp.//Example Client//EN\"],\n       [\"version\", {}, \"text\",
        \"2.0\"]\n     ],\n     [\n       [\"vtimezone\",\n         [\n           [\"last-modified\",
        {}, \"date-time\", \"2004-01-10T03:28:45Z\"],\n           [\"tzid\", {}, \"text\",
        \"US/Eastern\"]\n         ],\n         [\n           [\"daylight\",\n             [\n
        \              [\"dtstart\", {}, \"date-time\", \"2000-04-04T02:00:00\"],\n
        \              [\"rrule\",\n                 {},\n                 \"recur\",\n
        \                {\n                   \"freq\": \"YEARLY\",\n                   \"byday\":
        \"1SU\",\n                   \"bymonth\": 4\n                 }\n               ],\n
        \              [\"tzname\", {}, \"text\", \"EDT\"],\n               [\"tzoffsetfrom\",
        {}, \"utc-offset\", \"-05:00\"],\n               [\"tzoffsetto\", {}, \"utc-offset\",
        \"-04:00\"]\n             ],\n             []\n           ],\n           [\"standard\",\n
        \            [\n               [\"dtstart\", {}, \"date-time\", \"2000-10-26T02:00:00\"],\n
        \              [\"rrule\",\n                 {},\n                 \"recur\",\n
        \                {\n                   \"freq\": \"YEARLY\",\n                   \"byday\":
        \"1SU\",\n                   \"bymonth\": 10\n                 }\n               ],\n
        \              [\"tzname\", {}, \"text\", \"EST\"],\n               [\"tzoffsetfrom\",
        {}, \"utc-offset\", \"-04:00\"],\n               [\"tzoffsetto\", {}, \"utc-offset\",
        \"-05:00\"]\n             ],\n             []\n           ]\n         ]\n
        \      ],\n       [\"vevent\",\n         [\n           [\"dtstamp\", {}, \"date-time\",
        \"2006-02-06T00:11:21Z\"],\n           [\"dtstart\",\n             { \"tzid\":
        \"US/Eastern\" },\n             \"date-time\",\n             \"2006-01-02T12:00:00\"\n
        \          ],\n           [\"duration\", {}, \"duration\", \"PT1H\"],\n           [\"rrule\",
        {}, \"recur\", { \"freq\": \"DAILY\", \"count\": 5 } ],\n           [\"rdate\",\n
        \            { \"tzid\": \"US/Eastern\" },\n             \"period\",\n             \"2006-01-02T15:00:00/PT2H\"\n
        \          ],\n           [\"summary\", {}, \"text\", \"Event #2\"],\n           [\"description\",\n
        \           {},\n            \"text\",\n            // Note that comments
        and string concatenation are not\n            // allowed per the JSON specification
        and is used here only\n            // to avoid long lines.\n            \"We
        are having a meeting all this week at 12 pm for one \" +\n            \"hour,
        with an additional meeting on the first day 2 \" +\n            \"hours long.\\nPlease
        bring your own lunch for the 12 pm \" +\n            \"meetings.\"\n           ],\n
        \          [\"uid\", {}, \"text\", \"00959BC664CA650E933C892C@example.com\"]\n
        \        ],\n         []\n       ],\n       [\"vevent\",\n         [\n           [\"dtstamp\",
        {}, \"date-time\", \"2006-02-06T00:11:21Z\"],\n           [\"dtstart\",\n
        \            { \"tzid\": \"US/Eastern\" },\n             \"date-time\",\n
        \            \"2006-01-02T14:00:00\"\n           ],\n           [\"duration\",
        {}, \"duration\", \"PT1H\"],\n           [\"recurrence-id\",\n             {
        \"tzid\": \"US/Eastern\" },\n             \"date-time\",\n             \"2006-01-04T12:00:00\"\n
        \          ],\n           [\"summary\", {}, \"text\", \"Event #2\"],\n           [\"uid\",
        {}, \"text\", \"00959BC664CA650E933C892C@example.com\"]\n         ],\n         []\n
        \      ]\n     ]\n   ]\n"
      title: B.2.2.  jCal Data
    title: B.2.  Example 2
  title: Appendix B.  Examples
- contents:
  - "Authors' Addresses\n   Philipp Kewisch\n   Mozilla Corporation\n   650 Castro
    Street, Suite 300\n   Mountain View, CA  94041\n   USA\n   EMail: mozilla@kewis.ch\n
    \  URI:   http://www.mozilla.org/\n   Cyrus Daboo\n   Apple Inc.\n   1 Infinite
    Loop\n   Cupertino, CA  95014\n   USA\n   EMail: cyrus@daboo.name\n   URI:   http://www.apple.com/\n
    \  Mike Douglass\n   Rensselaer Polytechnic Institute\n   110 8th Street\n   Troy,
    NY  12180\n   USA\n   EMail: douglm@rpi.edu\n   URI:   http://www.rpi.edu/\n"
  title: Authors' Addresses
