- contents:
  - "                       Multiprotocol Interconnect\n                  on X.25
    and ISDN in the Packet Mode\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for
    the Internet\n   community, and requests discussion and suggestions for improvements.\n
    \  Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"
    for the standardization state and status of this protocol.\n   Distribution of
    this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This document specifies the encapsulation of IP and other network\n
    \  layer protocols over X.25 networks, in accordance and alignment with\n   ISO/IEC
    and CCITT standards.  It is a replacement for RFC 877, \"A\n   Standard for the
    Transmission of IP Datagrams Over Public Data\n   Networks\" [1].\n   It was written
    to correct several ambiguities in the Internet\n   Standard for IP/X.25 (RFC 877),
    to align it with ISO/IEC standards\n   that have been written following RFC 877,
    to allow interoperable\n   multiprotocol operation between routers and bridges
    over X.25, and to\n   add some additional remarks based upon practical experience
    with the\n   specification over the 8 years since that RFC.\n   The substantive
    change to the IP encapsulation is an increase in the\n   allowed IP datagram Maximum
    Transmission Unit from 576 to 1600, to\n   reflect existing practice.\n   This
    document also specifies the Internet encapsulation for\n   protocols, including
    IP, on the packet mode of the ISDN.  It applies\n   to the use of Internet protocols
    on the ISDN in the circuit mode only\n   when the circuit is established as an
    end-to-end X.25 connection.\n"
  title: Abstract
- contents:
  - "Acknowledgements\n   RFC 877 was written by J. T. Korb of Purdue University,
    and this\n   document follows that RFC's format and builds upon its text as\n
    \  appropriate.  This document was produced under the auspices of the IP\n   over
    Large Public Data Networks Working Group of the IETF.\n"
  title: Acknowledgements
- contents:
  - "1. Conventions\n   The following language conventions are used in the items of\n
    \  specification in this document:\n   o MUST -- the item is an absolute requirement
    of the specification.\n     MUST is only used where it is actually required for
    interoperation,\n     not to try to impose a particular method on implementors
    where not\n     required for interoperability.\n   o SHOULD -- the item should
    be followed for all but exceptional\n     circumstances.\n   o MAY or optional
    -- the item is truly optional and may be followed\n     or ignored according to
    the needs of the implementor.\n   The words \"should\" and \"may\" are also used,
    in lower case, in their\n   more ordinary senses.\n"
  title: 1. Conventions
- contents:
  - "2. Introduction\n   RFC 877 was written to document the method CSNET and the
    VAN Gateway\n   had adopted to transmit IP datagrams over X.25 networks.  Its
    success\n   is evident in its current wide use and the inclusion of its IP\n   protocol
    identifier in ISO/IEC TR 9577, \"Protocol Identification in\n   the Network Layer\"
    [2], which is administered by ISO/IEC and CCITT.\n   However, due to changes in
    the scope of X.25 and the protocols that\n   it can carry, several inadequacies
    have become evident in the RFC,\n   especially in the areas of IP datagram Maximum
    Transmission Unit\n   (MTU) size, X.25 maximum data packet size, virtual circuit\n
    \  management, and the interoperable encapsulation, over X.25, of\n   protocols
    other than IP between multiprotocol routers and bridges.\n   As with RFC 877,
    one or more X.25 virtual circuits are opened on\n   demand when datagrams arrive
    at the network interface for\n   transmission.  A virtual circuit is closed after
    some period of\n   inactivity (the length of the period depends on the cost associated\n
    \  with an open virtual circuit).  A virtual circuit may also be closed\n   if
    the interface runs out of virtual circuits.\n"
  title: 2. Introduction
- contents:
  - '3. Standards

    '
  title: 3. Standards
- contents:
  - "3.1 Protocol Data Units (PDUs) are sent as X.25 \"complete packet\n    sequences\".
    \ That is, PDUs begin on X.25 data packet boundaries and\n    the M bit (\"more
    data\") is used to fragment PDUs that are larger\n    than one X.25 data packet
    in length.\n    In the IP encapsulation the PDU is the IP datagram.\n"
  title: 3.1 Protocol Data Units (PDUs) are sent as X.25 "complete packet
- contents:
  - "3.2 The first octet in the Call User Data (CUD) Field (the first data\n    octet
    in the Call Request packet) is used for protocol\n    demultiplexing, in accordance
    with the Subsequent Protocol\n    Identifier (SPI) in ISO/IEC TR 9577.  This field
    contains a one-\n    octet Network Layer Protocol Identifier (NLPID), which identifies\n
    \   the network layer protocol encapsulated over the X.25 virtual\n    circuit.
    \ The CUD field MAY contain more than one octet of\n    information, and receivers
    MUST ignore all extraneous octets in the\n    field.\n    In the following discussion,
    the most significant digit of the\n    binary numbers is left-most.\n    For the
    Internet community, the NLPID has four relevant values:\n    The value hex CC
    (binary 11001100, decimal 204) is IP [6].\n    Conformance with this specification
    requires that IP be supported.\n    See section 5.1 for a diagram of the packet
    formats.\n    The value hex 81 (binary 10000001, decimal 129) identifies ISO/IEC\n
    \   8473 (CLNP) [4].  ISO/IEC TR 9577 specifically allows other ISO/IEC\n    connectionless-protocol
    packets, such as ES-IS and IS-IS, to also be\n    carried on the same virtual
    circuit as CLNP.  Conformance with this\n    specification does not require that
    CLNP be supported.  See section\n    5.2 for a diagram of the packet formats.\n
    \   The value hex 82 (binary 10000010, decimal 130) is used specifically\n    for
    ISO/IEC 9542 (ES-IS) [5].  If there is already a circuit open to\n    carry CLNP,
    then it is not necessary to open a second circuit to\n    carry ES-IS.  Conformance
    with this specification does not require\n    that ES-IS be supported.\n    The
    value hex 80 (binary 10000000, decimal 128) identifies the use\n    of IEEE Subnetwork
    Access Protocol (SNAP) [3] to further encapsulate\n    and identify a single network-layer
    protocol.  The SNAP-encapsulated\n    protocol is identified by including a five-octet
    SNAP header in the\n    Call Request CUD field immediately following the hex 80
    octet.  SNAP\n    headers are not included in the subsequent X.25 data packets.
    \ Only\n    one SNAP-encapsulated protocol may be carried over a virtual circuit\n
    \   opened using this encoding.  The receiver SHOULD accept the incoming\n    call
    only if it can support the particular SNAP-identified protocol.\n    Conformance
    with this specification does not require that this SNAP\n    encoding be supported.
    \ See section 5.3 for a diagram of the packet\n    formats.\n    The value hex
    00 (binary 00000000, decimal 0) identifies the Null\n    encapsulation, used to
    multiplex multiple network layer protocols\n    over the same circuit.  This encoding
    is further discussed in\n    section 3.3 below.\n    The \"Assigned Numbers\"
    RFC [7] contains one other non-CCITT and\n    non-ISO/IEC value that has been
    in active use for Internet X.25\n    encapsulation identification, namely hex
    C5 (binary 11000101,\n    decimal 197) for Blacker X.25.  This value MAY continue
    to be used,\n    but only by prior preconfiguration of the sending and receiving
    X.25\n    interfaces to support this value.  The value hex CD (binary\n    11001101,
    decimal 205), listed in \"Assigned Numbers\" for \"ISO-IP\",\n    is also used
    by Blacker and also can only be used by prior\n    preconfiguration of the sending
    and receiving X.25 interfaces.\n    Each system MUST only accept calls for protocols
    it can process;\n    every Internet system MUST be able to accept the CC encapsulation\n
    \   for IP datagrams.  A system MUST NOT accept calls, and then\n    immediately
    clear them.  Accepting the call indicates to the calling\n    system that the
    protocol encapsulation is supported; on some\n    networks, a call accepted and
    cleared is charged, while a call\n    cleared in the request state is not charged.\n
    \   Systems that support NLPIDs other than hex CC (for IP) SHOULD allow\n    their
    use to be configured on a per-peer address basis.  The use of\n    hex CC (for
    IP) MUST always be allowed between peers and cannot be\n    configured.\n"
  title: 3.2 The first octet in the Call User Data (CUD) Field (the first data
- contents:
  - "3.3 The NLPID encodings discussed in section 3.2 only allow a single\n    network
    layer protocol to be sent over a circuit.  The Null\n    encapsulation, identified
    by a NLPID encoding of hex 00, is used in\n    order to multiplex multiple network
    layer protocols over one\n    circuit.\n    When the Null encapsulation is used,
    each X.25 complete packet\n    sequence sent on the circuit begins with a one-octet
    NLPID, which\n    identifies the network layer protocol data unit contained only
    in\n    that particular complete packet sequence.  Further, if the SNAP\n    NLPID
    (hex 80) is used, then the NLPID octet is immediately followed\n    by the five-octet
    SNAP header, which is then immediately followed by\n    the encapsulated PDU.
    \ The encapsulated network layer protocol MAY\n    differ from one complete packet
    sequence to the next over the same\n    circuit.\n    When a receiver is presented
    with an Incoming Call identifying the\n    Null encapsulation, the receiver MUST
    accept the call if it supports\n    the Null encapsulation for any network layer
    protocol.  The receiver\n    MAY then silently discard a multiplexed PDU if it
    cannot support\n    that particular encapsulated protocol.  See section 5.4 for
    a\n    diagram of the packet formats.\n    Use of the single network layer protocol
    circuits described in\n    section 3.2 is more efficient in terms of bandwidth
    if only a\n    limited number of protocols are supported by a system.  It also\n
    \   allows each system to determine exactly which protocols are\n    supported
    by its communicating partner.  Other advantages include\n    being able to use
    X.25 accounting to detail each protocol and\n    different quality of service
    or flow control windows for different\n    protocols.\n    The Null encapsulation,
    for multiplexing, is useful when a system,\n    for any reason (such as implementation
    restrictions or network cost\n    considerations), may only open a limited number
    of virtual circuits\n    simultaneously.  This is the method most likely to be
    used by a\n    multiprotocol router, to avoid using an unreasonable number of\n
    \   virtual circuits.\n    If performing IEEE 802.1d bridging across X.25 is desired,
    then the\n    Null encapsulation MUST be used.  See section 4.2 for a further\n
    \   discussion.\n    Conformance with this specification does not require that
    the Null\n    encapsulation be supported.\n    Systems that support the Null encapsulation
    SHOULD allow its use to\n    be configured on a per-peer address basis.\n"
  title: 3.3 The NLPID encodings discussed in section 3.2 only allow a single
- contents:
  - "3.4 For compatibility with existing practice, and RFC 877 systems, IP\n    datagrams
    MUST, by default, be encapsulated on a virtual circuit\n    opened with the CC
    CUD.\n    Implementations MAY also support up to three other possible\n    encapsulations
    of IP:\n   o IP may be contained in multiplexed data packets on a circuit using\n
    \    the Null (multiplexed) encapsulation.  Such data packets are\n     identified
    by a NLPID of hex CC.\n   o IP may be encapsulated within the SNAP encapsulation
    on a circuit.\n     This encapsulation is identified by containing, in the 5-octet
    SNAP\n     header, an Organizationally Unique Identifier (OUI) of hex 00-00-00\n
    \    and Protocol Identifier (PID) of hex 08-00.\n   o On a circuit using the
    Null encapsulation, IP may be contained\n     within the SNAP encapsulation of
    IP in multiplexed data packets.\n    If an implementation supports the SNAP, multiplexed,
    and/or\n    multiplexed SNAP encapsulations, then it MUST accept the encoding
    of\n    IP within the supported encapsulation(s), MAY send IP using those\n    encapsulation(s),
    and MUST allow the IP encapsulation to send to be\n    configured on a per-peer
    address basis.\n"
  title: 3.4 For compatibility with existing practice, and RFC 877 systems, IP
- contents:
  - "3.5 The negotiable facilities of X.25 MAY be used (e.g., packet and\n    window
    size negotiation).  Since PDUs are sent as complete packet\n    sequences, any
    maximum X.25 data packet size MAY be configured or\n    negotiated between systems
    and their network service providers.  See\n    section 4.5 for a discussion of
    maximum X.25 data packet size and\n    network performance.\n    There is no implied
    relationship between PDU size and X.25 packet\n    size (i.e., the method of setting
    IP MTU based on X.25 packet size\n    in RFC 877 is not used).\n"
  title: 3.5 The negotiable facilities of X.25 MAY be used (e.g., packet and
- contents:
  - "3.6 Every system MUST be able to receive and transmit PDUs up to at\n    least
    1600 octets in length.\n    For compatibility with existing practice, as well
    as\n    interoperability with RFC 877 systems, the default transmit MTU for\n
    \   IP datagrams SHOULD default to 1500, and MUST be configurable in at\n    least
    the range 576 to 1600.\n    This is done with a view toward a standard default
    IP MTU of 1500,\n    used on both local and wide area networks with no fragmentation
    at\n    routers. Actually redefining the IP default MTU is, of course,\n    outside
    the scope of this specification.\n    The PDU size (e.g., IP MTU) MUST be configurable,
    on at least a\n    per-interface basis.  The maximum transmitted PDU length SHOULD
    be\n    configurable on a per-peer basis, and MAY be configurable on a per-\n
    \   encapsulation basis as well.  Note that the ability to configure to\n    send
    IP datagrams with an MTU of 576 octets and to receive IP\n    datagrams of 1600
    octets is essential to interoperate with existing\n    implementations of RFC
    877 and implementations of this\n    specification.\n    Note that on circuits
    using the Null (multiplexed) encapsulation,\n    when IP packets are encapsulated
    using the NLPID of hex CC, then the\n    default IP MTU of 1500 implies a PDU
    size of 1501; a PDU size of\n    1600 implies an IP MTU of 1599.  When IP packets
    are encapsulated\n    using the NLPID of hex 80 followed by the SNAP header for
    IP, then\n    the default IP MTU of 1500 implies a PDU size of 1506; a PDU size
    of\n    1600 implies an IP MTU of 1594.\n    Of course, an implementation MAY
    support a maximum PDU size larger\n    than 1600 octets.  In particular, there
    is no limit to the size that\n    may be used when explicitly configured by communicating
    peers.\n"
  title: 3.6 Every system MUST be able to receive and transmit PDUs up to at
- contents:
  - "3.7 Each ISO/IEC TR 9577 encapsulation (e.g., IP, CLNP, and SNAP)\n    requires
    a separate virtual circuit between systems.  In addition,\n    multiple virtual
    circuits for a single encapsulation MAY be used\n    between systems, to, for
    example, increase throughput (see notes in\n    section 4.5).\n    Receivers SHOULD
    accept multiple incoming calls with the same\n    encapsulation from a single
    system.  Having done so, receivers MUST\n    then accept incoming PDUs on the
    additional circuit(s), and SHOULD\n    transmit on the additional circuits.\n
    \   Shedding load by refusing additional calls for the same\n    encapsulation
    with a X.25 diagnostic of 0 (DTE clearing) is correct\n    practice, as is shortening
    inactivity timers to try to clear\n    circuits.\n    Receivers MUST NOT accept
    the incoming call, only to close the\n    circuit or ignore PDUs from the circuit.\n
    \   Because opening multiple virtual circuits specifying the same\n    encapsulation
    is specifically allowed, algorithms to prevent virtual\n    circuit call collision,
    such as the one found in section 8.4.3.5 of\n    ISO/IEC 8473 [4], MUST NOT be
    implemented.\n    While allowing multiple virtual circuits for a single protocol
    is\n    specifically desired and allowed, implementations MAY choose (by\n    configuration)
    to permit only a single circuit for some protocols to\n    some destinations.
    \ Only in such a case, if a colliding incoming\n    call is received while a call
    request is pending, the incoming call\n    shall be rejected.  Note that this
    may result in a failure to\n    establish a connection.  In such a case, each
    system shall wait at\n    least a configurable collision retry time before retrying.
    \ Adding a\n    random increment, with exponential backoff if necessary, is\n
    \   recommended.\n"
  title: 3.7 Each ISO/IEC TR 9577 encapsulation (e.g., IP, CLNP, and SNAP)
- contents:
  - "3.8 Either system MAY close a virtual circuit.  If the virtual circuit\n    is
    closed or reset while a datagram is being transmitted, the\n    datagram is lost.
    \ Systems SHOULD be able to configure a minimum\n    holding time for circuits
    to remain open as long as the endpoints\n    are up. (Note that holding time,
    the time the circuit has been open,\n    differs from idle time.)\n"
  title: 3.8 Either system MAY close a virtual circuit.  If the virtual circuit
- contents:
  - "3.9 Each system MUST use an inactivity timer to clear virtual circuits\n    that
    are idle for some period of time.  Some X.25 networks,\n    including the ISDN
    under present tariffs in most areas, charge for\n    virtual circuit holding time.
    \ Even where they do not, the resource\n    SHOULD be released when idle.  The
    timer SHOULD be configurable; a\n    timer value of \"infinite\" is acceptable
    when explicitly configured.\n    The default SHOULD be a small number of minutes.
    \ For IP, a\n    reasonable default is 90 seconds.\n"
  title: 3.9 Each system MUST use an inactivity timer to clear virtual circuits
- contents:
  - "3.10 Systems SHOULD allow calls from unconfigured calling addresses\n     (presumably
    not collect calls, however); this SHOULD be a\n     configuration option.  A system
    accepting such a call will, of\n     course, not transmit on that virtual circuit
    if it cannot determine\n     the protocol (e.g., IP) address of the caller.  As
    an example, on\n     the DDN this is not a restriction because IP addresses can
    be\n     determined algorithmically based upon the caller's X.121 address\n     [7,9].\n
    \    Allowing such calls helps work around various \"helpful\" address\n     translations
    done by the network(s), as well as allowing\n     experimentation with various
    address resolution protocols.\n"
  title: 3.10 Systems SHOULD allow calls from unconfigured calling addresses
- contents:
  - "3.11 Systems SHOULD use a configurable hold-down timer to prevent calls\n     to
    failed destinations from being immediately retried.\n"
  title: 3.11 Systems SHOULD use a configurable hold-down timer to prevent calls
- contents:
  - "3.12 X.25 implementations MUST minimally support the following features\n     in
    order to conform with this specification: call setup and\n     clearing and complete
    packet sequences.  For better performance\n     and/or interoperability, X.25
    implementations SHOULD also support:\n     extended frame and/or packet sequence
    numbering, flow control\n     parameter negotiation, and reverse charging.\n"
  title: 3.12 X.25 implementations MUST minimally support the following features
- contents:
  - "3.13 The following X.25 features MUST NOT be used: interrupt packets and\n     the
    Q bit (indicating qualified data).  Other X.25 features not\n     explicitly discussed
    in this document, such as fast select and the\n     D bit (indicating end-to-end
    significance) SHOULD NOT be used.\n     Use of the D bit will interfere with use
    of the M bit (more data\n     sequences) required for identification of PDUs.
    \ In particular, as\n     subscription to the D bit modification facility (X.25-1988,
    section\n     3.3) will prevent proper operation, this user facility MUST NOT
    be\n     subscribed.\n"
  title: '3.13 The following X.25 features MUST NOT be used: interrupt packets and'
- contents:
  - "3.14 ISO/IEC 8208 [11] defines the clearing diagnostic code 249 to\n     signify
    that a requested protocol is not supported.  Systems MAY\n     use this diagnostic
    code when clearing an incoming call because the\n     identified protocol is not
    supported.  Non-8208 systems more\n     typically use a diagnostic code of 0 for
    this function.  Supplying\n     a diagnostic code is not mandatory, but when it
    is supplied for\n     this reason, it MUST be either of these two values.\n"
  title: 3.14 ISO/IEC 8208 [11] defines the clearing diagnostic code 249 to
- contents:
  - "4. General Remarks\n   The following remarks are not specifications or requirements
    for\n   implementations, but provide developers and users with guidelines and\n
    \  the results of operational experience with RFC 877.\n"
  title: 4. General Remarks
- contents:
  - "4.1 Protocols above the network layer, such as TCP or TP4, do not\n    affect
    this standard.  In particular, no attempt is made to open\n    X.25 virtual circuits
    corresponding to TCP or TP4 connections.\n"
  title: 4.1 Protocols above the network layer, such as TCP or TP4, do not
- contents:
  - "4.2 Both the circuit and multiplexed encapsulations of SNAP may be used\n    to
    contain any SNAP encapsulated protocol.  In particular, this\n    includes using
    an OUI of 00-00-00 and the two octets of PID\n    containing an Ethertype [7],
    or using IEEE 802.1's OUI of hex 00-\n    80-C2 with the bridging PIDs listed
    in RFC 1294, \"Multiprotocol\n    Interconnect over Frame Relay\" [8].  Note that
    IEEE 802.1d bridging\n    can only be performed over a circuit using the Null
    (multiplexed)\n    encapsulation of SNAP, because of the necessity of preserving
    the\n    order of PDUs (including 802.1d Bridged PDUs) using different SNAP\n
    \   headers.\n"
  title: 4.2 Both the circuit and multiplexed encapsulations of SNAP may be used
- contents:
  - "4.3 Experience has shown that there are X.25 implementations that will\n    assign
    calls with CC CUD to the X.29 PAD (remote login) facility\n    when the IP layer
    is not installed, not configured properly, or not\n    operating (indeed, they
    assume that ALL calls for unconfigured or\n    unbound X.25 protocol IDs are for
    X.29 PAD sessions).  Call\n    originators can detect that this has occurred at
    the receiver if the\n    originator receives any X.25 data packets with the Q
    bit set,\n    especially if the first octet of these packets is hex 02, 04, or
    06\n    (X.29 PAD parameter commands).  In this case, the originator should\n
    \   clear the call, and log the occurrence so that the misconfigured\n    X.25
    address can be corrected.  It may be useful to also use the\n    hold-down timer
    (see section 3.11) to prevent further attempts for\n    some period of time.\n"
  title: 4.3 Experience has shown that there are X.25 implementations that will
- contents:
  - "4.4 It is often assumed that a larger X.25 data packet size will result\n    in
    increased performance.  This is not necessarily true: in typical\n    X.25 networks
    it will actually decrease performance.\n    Many, if not most, X.25 networks completely
    store X.25 data packets\n    in each switch before forwarding them.  If the X.25
    network requires\n    a path through a number of switches, and low-speed trunks
    are used,\n    then negotiating and using large X.25 data packets could result
    in\n    large transit delays through the X.25 network as a result of the\n    time
    required to clock the data packets over each low-speed trunk.\n    If a small
    end-to-end window size is also used, this may also\n    adversely affect the end-to-end
    throughput of the X.25 circuit.  For\n    this reason, segmenting large IP datagrams
    in the X.25 layer into\n    complete packet sequences of smaller X.25 data packets
    allows a\n    greater amount of pipelining through the X.25 switches, with\n    subsequent
    improvements in end-to-end throughput.\n    Large X.25 data packet size combined
    with slow (e.g., 9.6Kbps)\n    physical circuits will also increase individual
    packet latency for\n    other virtual circuits on the same path; this may cause
    unacceptable\n    effects on, for example, X.29 connections.\n    This discussion
    is further complicated by the fact that X.25\n    networks are free to internally
    combine or split X.25 data packets\n    as long as the complete packet sequence
    is preserved.\n    The optimum X.25 data packet size is, therefore, dependent
    on the\n    network, and is not necessarily the largest size offered by that\n
    \   network.\n"
  title: 4.4 It is often assumed that a larger X.25 data packet size will result
- contents:
  - "4.5 Another method of increasing performance is to open multiple virtual\n    circuits
    to the same destination, specifying the same CUD.  Like\n    packet size, this
    is not always the best method.\n    When the throughput limitation is due to X.25
    window size, opening\n    multiple circuits effectively multiplies the window,
    and may\n    increase performance.\n    However, opening multiple circuits also
    competes more effectively\n    for the physical path, by taking more shares of
    the available\n    bandwidth.  While this may be desirable to the user of the\n
    \   encapsulation, it may be somewhat less desirable to the other users\n    of
    the path.\n    Opening multiple circuits may also cause datagram sequencing and\n
    \   reordering problems in end systems with limited buffering (e.g., at\n    the
    TCP level, receiving segments out of order, when a single\n    circuit would have
    delivered them in order). This will only affect\n    performance, not correctness
    of operation.\n    Opening multiple circuits may also increase the cost of delivering\n
    \   datagrams across a public data network.\n"
  title: 4.5 Another method of increasing performance is to open multiple virtual
- contents:
  - "4.6 This document does not specify any method of dynamic IP to X.25 (or\n    X.121)
    address resolution.  The problem is left for further study.\n    Typical present-day
    implementations use static tables of varying\n    kinds, or an algorithmic transformation
    between IP and X.121\n    addresses [7,9].  There are proposals for other methods.
    \ In\n    particular, RFC 1183 [10] describes Domain Name System (DNS)\n    resource
    records that may be useful either for automatic resolution\n    or for maintenance
    of static tables.  Use of these method(s) is\n    entirely experimental at this
    time.\n"
  title: 4.6 This document does not specify any method of dynamic IP to X.25 (or
- contents:
  - "5. Packet Formats\n   For each protocol encoding, the diagrams outline the call
    request and\n   the data packet format. The data packet shown is the first of
    a\n   complete packet (M bit) sequence.\n"
  title: 5. Packet Formats
- contents:
  - "5.1 IP Encapsulation\n    Call Request:\n    +----------------+-----------+------------+----+\n
    \   | GFI, LCN, type | addresses | facilities | CC |\n    +----------------+-----------+------------+----+\n
    \   X.25 data packets:\n    +----------------+------------------------+\n    |
    GFI, LCN, I    | IP datagram            |\n    +----------------+------------------------+\n"
  title: 5.1 IP Encapsulation
- contents:
  - "5.2 CLNP, ES-IS, IS-IS Encapsulation\n    Call Request:\n    +----------------+-----------+------------+----+\n
    \   | GFI, LCN, type | addresses | facilities | 81 |\n    +----------------+-----------+------------+----+\n
    \   X.25 data packets:\n    +----------------+--------------------------------+\n
    \   | GFI, LCN, I    | CLNP, ES-IS, or IS-IS datagram |\n    +----------------+--------------------------------+\n
    \   (Note that these datagrams are self-identifying in their\n    first octet).\n"
  title: 5.2 CLNP, ES-IS, IS-IS Encapsulation
- contents:
  - "5.3 SNAP Encapsulation\n    Call Request:\n    +----------------+-----------+------------+----+-----------------+\n
    \   | GFI, LCN, type | addresses | facilities | 80 | SNAP (5 octets) |\n    +----------------+-----------+------------+----+-----------------+\n
    \   X.25 data packets:\n    +----------------+-------------------------------------+\n
    \   | GFI, LCN, I    | Protocol Data Unit (no SNAP header) |\n    +----------------+-------------------------------------+\n"
  title: 5.3 SNAP Encapsulation
- contents:
  - "5.4 Null (Multiplexed) Encapsulation\n    Call Request:\n    +----------------+-----------+------------+----+\n
    \   | GFI, LCN, type | addresses | facilities | 00 |\n    +----------------+-----------+------------+----+\n
    \   X.25 data packets:\n    +----------------+-----------------+---------------------+\n
    \   | GFI, LCN, I    | NLPID (1 octet) | Protocol Data Unit  |\n    +----------------+-----------------+---------------------+\n
    \   Examples of data packets:\n    Multiplexed IP datagram:\n    +----------------+----+-----------------------+\n
    \   | GFI, LCN, I    | CC | IP datagram           |\n    +----------------+----+-----------------------+\n
    \   Multiplexed CLNP datagram:\n    +----------------+----+-------------------------+\n
    \   | GFI, LCN, I    | 81 | CLNP datagram           |\n    +----------------+----+-------------------------+\n
    \   Multiplexed SNAP PDU:\n    +----------------+----+-----------------+--------------------+\n
    \   | GFI, LCN, I    | 80 | SNAP (5 octets) | Protocol Data Unit |\n    +----------------+----+-----------------+--------------------+\n"
  title: 5.4 Null (Multiplexed) Encapsulation
- contents:
  - "6. Security Considerations\n   Security issues are not discussed in this memo.\n"
  title: 6. Security Considerations
- contents:
  - "7. References\n   [1]  Korb, J., \"A Standard for the Transmission of IP Datagrams
    Over\n        Public Data Networks\", RFC 877, Purdue University, September\n
    \       1983.\n   [2]  ISO/IEC TR 9577, Information technology - Telecommunications
    and\n        Information exchange between systems - Protocol Identification\n
    \       in the network layer, 1990 (E) 1990-10-15.\n   [3]  IEEE, \"IEEE Standard
    for Local and Metropolitan Area Networks:\n        Overview and Architecture\",
    IEEE Standards 802-1990.\n   [4]  ISO/IEC 8473, Information processing systems
    - Data\n        communications - Protocol for providing the connectionless- mode\n
    \       network service, 1988.\n   [5]  ISO/IEC 9542, Information processing systems
    -\n        Telecommunications and information exchange between systems -\n        End
    system to intermediate system routeing protocol for use in\n        conjunction
    with the protocol for providing the connectionless-\n        mode network service
    (ISO/IEC 8473), 1988.\n   [6]  Postel, J., Editor., \"Internet Protocol - DARPA
    Internet Program\n        Protocol Specification\", RFC 791, USC/Information Sciences\n
    \       Institute, September 1981.\n   [7]  Reynolds, J. and J. Postel, \"Assigned
    Numbers\", RFC 1340,\n        USC/Information Sciences Institute, July 1992.\n
    \  [8]  Bradley, T., Brown, C., and A. Malis, \"Multiprotocol\n        Interconnect
    over Frame Relay\", RFC 1294, Wellfleet\n        Communications and BBN Communications,
    January 1992.\n   [9]  \"Defense Data Network X.25 Host Interface Specification\",\n
    \       contained in \"DDN Protocol Handbook\", Volume 1, DDN Network\n        Information
    Center 50004, December 1985.\n  [10]  Everhart, C., Mamakos, L., Ullmann, R, and
    P. Mockapetris,\n        Editors, \"New DNS RR Definitions\", RFC 1183, Transarc,\n
    \       University of Maryland, Prime Computer, USC/Information Sciences\n        Institute,
    October 1990.\n  [11]  ISO/IEC 8208, Information processing systems - Data\n        communications
    - X.25 Packet Level Protocol for Data Terminal\n        Equipment, 1987.\n"
  title: 7. References
- contents:
  - "8. Authors' Addresses\n   Andrew G. Malis\n   BBN Communications\n   150 CambridgePark
    Drive\n   Cambridge, MA 02140\n   USA\n   Phone: +1 617 873 3419\n   Email: malis@bbn.com\n
    \  David Robinson\n   Computervision Systems Integration\n   201 Burlington Road\n
    \  Bedford, MA 01730\n   USA\n   Phone: +1 617 275 1800 x2774\n   Email: drb@relay.prime.com\n
    \  Robert L. Ullmann\n   Process Software Corporation\n   959 Concord Street\n
    \  Framingham, MA 01701\n   USA\n   Phone: +1 508 879 6994\n   Email: ariel@process.com\n"
  title: 8. Authors' Addresses
