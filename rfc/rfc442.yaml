- title: __initial_text__
  contents:
  - "               The Current Flow-Control Scheme for IMPSYS\n   BB&N quarterly\
    \ report #13 outlines part of the current flow control\n   scheme in the IMP operating\
    \ system.  A meeting held March 16, 1972,\n   at BB&N was devoted to the description\
    \ of this new scheme for the\n   benefit of interested network participants.\n\
    \   This note represents my understanding of the flow control mechanism.\n   The\
    \ essential goal is to eliminate unnecessary retransmissions when\n   the load\
    \ is heavy, eliminate the retransmission time-out period when\n   the load is\
    \ light, increase bandwidth, prevent re-assembly lock-up,\n   control traffic\
    \ from HOSTS into the net more strictly than the\n   earlier link blocking method,\
    \ and secure the rights of life, liberty,\n   and the pursuit of happiness for\
    \ ourselves and our posterity,...oops.\n"
- title: Source IMP-to-Destination IMP Protocol
  contents:
  - "Source IMP-to-Destination IMP Protocol\n   There are two different protocols\
    \ depending on message length (i.e.\n   single or multi-packet).  We illustrate\
    \ first the single packet case.\n          Source Imp                        Destination\
    \ Imp\n"
- title: case 1)   message (1) + implicit req (1)--->
  contents:
  - "case 1)   message (1) + implicit req (1)--->\n          [discard copy of msg]\n"
- title: case 2)   message (1) + implicit req (1)---> no room, don't respond
  contents:
  - "case 2)   message (1) + implicit req (1)---> no room, don't respond\n       \
    \   message (1)                   --->\n          [discard copy of msg]      \
    \   <--- RFNM (arrived ok)\n   In the first case, a single packet message is sent\
    \ to the destination\n   IMP.  This message acts as an implicit request for single\
    \ packet\n   buffer space.  If there is room, as in case 1, the destination IMP\n\
    \   responds with a RFNM.  The source IMP, which has retained a copy of\n   the\
    \ message, deletes its copy and goes on.\n   The second case illustrates what\
    \ happens when the source IMP sends a\n   message to a destination IMP at which\
    \ there is no room for the one-\n   packet message.  The arrival of the single\
    \ packet message constitutes\n   a request for single packet buffer space, and\
    \ is recorded as such by\n   the destination IMP in a first-come-first-served\
    \ buffer reservation\n   request queue.  When space is available, the destination\
    \ IMP will\n   transmit an ALL (1) to the requesting source IMP which can then\
    \ send\n   the single packet message again, this time knowing that space has\n\
    \   been reserved at the destination.\n   For multi-packet messages, the procedure\
    \ is somewhat different.  When\n   a message enters an IMP from a HOST, and the\
    \ \"last bit\" flag is not\n   set when the number of bits in a maximum length\
    \ single packet have\n   arrived, the IMP halts the HOST->IMP transmission line\
    \ while it\n   determines whether space has been reserved at the dest. IMP.  If\n\
    \   space (8 packets worth) has been reserved, the HOST->IMP line is re-\n   opened,\
    \ and the message is sent out normally.  If space has not been\n   reserved, the\
    \ HOST->IMP line is kept closed while the source IMP\n   makes a request for multi-packet\
    \ buffer storage at the destination\n   IMP.  When 8 buffers are available, the\
    \ destination IMP responds with\n   an ALL (8).  The source IMP then transmits\
    \ the message, and waits for\n   a combination RFNM and ALL (8) from the destination\
    \ IMP.  The\n   destination IMP will delay its RFNM, if necessary, until it has\n\
    \   another 8 buffers available for the next multipacket message.\n   This sequence\
    \ is illustrated below:\n            Source IMP                   Destination\
    \ IMP\n            ----------                   ---------------\n"
- title: H-> I line
  contents:
  - 'H-> I line

    '
- title: '----------> First packet of multipacket'
  contents:
  - "----------> First packet of multipacket\n            arrives. Halt H->I line\
    \ and\n            send REQ (8)  -------------->\n            start 30 sec. Time-out\n\
    \            If time-out, resend\n            REQ (8) and restart -------->\n\
    \            time-out.\n                                <--------ALL (8) when\
    \ available. Start\n                                         long term (2 min.)\
    \ time-out.\n                                         On time-out, reset all\n\
    \                                         outstanding reservations.\n        \
    \    Send the message:\n                        |   ----------->\n           \
    \ Start 30 sec. time-out\n            for INComplete transmission.\n         \
    \   If time-out, send INC?----->\n                                  <------On\
    \ recept of message, send\n                                         RFNM + implicit\
    \ ALL (8). On\n                                         receipt of INC? send RFNM\
    \ +\n                                         ALL(8) if MSG(8) received,\n   \
    \                                      or send INC! if MSG(8) not\n          \
    \                               received. Start 2 min. time-out\n            \
    \                             on ALL(8).\n            Queue ALL(8); start 125\
    \ ms.\n            time-out when it reaches\n            head of queue. If time-out\n\
    \            on ALL(8), send GVB(8)----->\n                                  <-----\
    \ Ack.\n            else send next message ----->\n   A key point in this protocol\
    \ is that a source IMP, after receipt of a\n   RFNM and implicit ALL(8) from the\
    \ destination IMP, has 125 msec. in\n   which to initiate the transfer of at least\
    \ the first packet of a\n   multi-packet message to the destination IMP.  The\
    \ source IMP may have\n   several allocate responses queued up in which case these\
    \ time-outs\n   occur one after the other (one has to time-out before the next\
    \ 125\n   msec time-out starts).\n   Time-outs exist in the source IMP which cause\
    \ it to send INC?\n   messages to the destination IMP if it has received no response\
    \ from\n   some earlier message.\n"
- title: Buffer Allocation
  contents:
  - "Buffer Allocation\n   A total of 40 buffers are available for store/forward and\
    \ re-assembly\n   purposes.  At most 32 can be allocated for re-assembly, and\
    \ at most\n   24-25 can be allocated for store and forward use.  This prevents\n\
    \   either kind of traffic from completely shutting out the other kind.\n"
- title: Message Ordering (Source IMP-to-Destination IMP).
  contents:
  - "Message Ordering (Source IMP-to-Destination IMP).\n   As an aid to congestion\
    \ control, an IMP can have at most 4 messages\n   outstanding (un-RFNMed) for\
    \ each other IMP.  Link numbers in the\n   message leader are ignored by the IMPs.\
    \  Instead, IMPs mark messages\n   leaving for other destinations with an 8-bit\
    \ message number.  In\n   addition, a 2-bit priority number is also used in case\
    \ a HOST has\n   marked a message as a priority message.  The key notion here\
    \ is that\n   the IMPs treat all HOSTs on a given IMP as if they were a single\n\
    \   HOST.  A single sequence of message and priority numbers is used in\n   each\
    \ direction between each pair of sites.\n   The receiving IMP remembers the message\
    \ number of the last message\n   delivered, as well as the priority number of\
    \ the last priority\n   message delivered.  It uses this information to correctly\
    \ sequence\n   messages out the IMP-HOST line (s).  Since there is only one sequence\n\
    \   of numbers for each pair of sites, messages for one HOST at a site\n   may\
    \ get in the way of messages for another HOST at the same site.  In\n   fact,\
    \ if some message, m, is the next in line to go to some HOST, and\n   that HOST\
    \ delays receipt for 30 seconds, any messages for another\n   HOST may be delayed\
    \ that long also.  However, only the first message\n   is lost, since the second\
    \ one could not even start into its\n   destination HOST until the first one had\
    \ been delivered.  There is a\n   tighter coupling between HOSTs sharing an IMP\
    \ than before, but not\n   much tighter.\n   An example of the use of message\
    \ and priority numbers is given below.\n"
- title: Order sent by           Order received by       Order received by
  contents:
  - 'Order sent by           Order received by       Order received by

    '
- title: Source IMP              Dest. IMP               HOST
  contents:
  - 'Source IMP              Dest. IMP               HOST

    '
- title: '----------              ---------               ----'
  contents:
  - '----------              ---------               ----

    '
- title: 11,12P(1),13P(2),14 --> 13P(2),12P(1),14,11 --> 12P(1),13P(2),11,14
  contents:
  - '11,12P(1),13P(2),14 --> 13P(2),12P(1),14,11 --> 12P(1),13P(2),11,14

    '
- title: 11,12P(1),13P(2),14 --> 13P(2),11,14,12P(1) --> 11,12P(1),13P(2),14
  contents:
  - '11,12P(1),13P(2),14 --> 13P(2),11,14,12P(1) --> 11,12P(1),13P(2),14

    '
- title: 'where 13P(2) is interpreted to mean message #13, priority number(2).'
  contents:
  - "where 13P(2) is interpreted to mean message #13, priority number(2).\n   Note\
    \ that there are only 2 classes of messages, priority and non-\n   priority, and\
    \ that the priority numbers simply allow ordering at the\n   destination of multiple\
    \ outstanding priority transmissions from the\n   same site.\n   If HOSTs use\
    \ link numbers to de-multiplex messages to processes, then\n   it would be a mistake\
    \ to arbitrarily assign short messages priority.\n   If a file transmission were\
    \ carried out such that the last short\n   message had priority, the file might\
    \ not enter the receiving HOST in\n   the same order it was sent!\n"
- title: ACK Mechanism
  contents:
  - "ACK Mechanism\n   IMPs treat their physical channels (phone lines) as if they\
    \ were\n   pairs of simplex communications paths.  Each IMPSYS has a sender and\n\
    \   receiver module for each full duplex channel.  Each module has an\n   \"ODD/EVEN\"\
    \ bit which is used to keep track of the state of the last\n   packet on the line.\
    \  The object is for the sender module to \"block\" a\n   channel until the corresponding\
    \ receiver has received a packet\n   indicating that the send packet was received\
    \ on the other end (i.e.\n   an acknowledgment).\n   In the present system, acknowledgments\
    \ are separate IMP-IMP packets.\n   In the new system, they are a single bit in\
    \ a packet flowing in the\n   opposite direction on the reverse path of a full\
    \ duplex channel.\n   Every packet sent between IMPs has an ACK bit and an OE\
    \ bit, as shown\n   below.\n                         P                       \
    \       A\n                          O                              C\n      \
    \                     E                              K\n               +-------+-----+------------------------+-----+----------+\n"
- title: typical packet |       |     |                        |     |          |
  contents:
  - "typical packet |       |     |                        |     |          |\n  \
    \             |       |     |                        |     |          |\n    \
    \           +-------+-----+------------------------+-----+----------+\n   We need\
    \ some terminology: Let POE be the packet OE bit, and SOE, ROE\n   be the send\
    \ module OE bit and Receive module OE bit respectively.\n   For two IMPs, A and\
    \ B, we distinguish SOE/A and SOE/B as the two send\n   module OE bits at IMPs\
    \ A and B respectively.\n   The rules of operation are as follow:\n   Sender\n\
    \   ------\n   if ACK != SOE then do nothing\n   --\n   else SOE <- !SOE (i.e.\
    \ flip SOE bit) and free channel.\n   ----\n   Receiver\n   --------\n   if POE\
    \ = ROE then packet is a duplicate so throw it away.\n   --\n   else ROE <- !ROE\n\
    \   ----\n   Whenever a packet is sent by the sent module, its two bits, POE and\n\
    \   ACK are set up by:\n                        POE <- SOE\n                 \
    \       ACK <- ROE\n   The mechanism is designed to use real traffic to accomplish\
    \ the\n   acknowledgment protocol by piggy-backing the ACK bits in the header\n\
    \   of real packets.  If there is no real packet waiting for transmission\n  \
    \ in the opposite direction, a fake packet is assembled which carries\n   the\
    \ ACK, but which is not acknowledged by the receiving side.\n   We give an example\
    \ of the operation of this mechanism between two\n   IMPs.\n                 \
    \    IMP A                           IMP B\n                     -----       \
    \                    -----\n                   ROE | SOE                     \
    \  ROE | SOE\n                       |           POE   ACK           |\n     \
    \                  |         +-----------+         |\n"
- title: IMP A blocks send    1 | 0    (1)|  0      1 |->     1 | 0 IMP B NOPS,
  contents:
  - 'IMP A blocks send    1 | 0    (1)|  0      1 |->     1 | 0 IMP B NOPS,

    '
- title: channel.               |         +-----------+         |   flips ROE
  contents:
  - "channel.               |         +-----------+         |   flips ROE\n      \
    \                 |                               |\n                       |\
    \           POE   ACK           |\n                       |         +-----------+\
    \         |\n"
- title: IMP A frees send     0 | 1     <-|  0      0 |(2)    0 | 0 IMP B blocks
  contents:
  - 'IMP A frees send     0 | 1     <-|  0      0 |(2)    0 | 0 IMP B blocks

    '
- title: channel,               |         +-----------+         |   channel for
  contents:
  - 'channel,               |         +-----------+         |   channel for

    '
- title: Flips SOE              |                               |   new traffic
  contents:
  - "Flips SOE              |                               |   new traffic\n    \
    \                   |           POE   ACK           |\n"
- title: IMP A blocks send      |         +-----------+  crashes|
  contents:
  - 'IMP A blocks send      |         +-----------+  crashes|

    '
- title: channel                |      (3)|  1      0 |->or gets|
  contents:
  - "channel                |      (3)|  1      0 |->or gets|\n                  \
    \     |         +-----------+  lost   |\n                       |            \
    \                   |\n                       |           POE   ACK          \
    \ |\n"
- title: IMP A detects packet   |         +-----------+         |
  contents:
  - 'IMP A detects packet   |         +-----------+         |

    '
- title: duplicate (POE=ROE)  0 | 1     <-|  0      0 |(2)    0 | 0 IMP B
  contents:
  - 'duplicate (POE=ROE)  0 | 1     <-|  0      0 |(2)    0 | 0 IMP B

    '
- title: so does not change     |         +-----------+         |  retransmits no
  contents:
  - 'so does not change     |         +-----------+         |  retransmits no

    '
- title: SOE bit.               |                               |  ACK received
  contents:
  - "SOE bit.               |                               |  ACK received\n    \
    \                   |           POE   ACK           |\n"
- title: IMP A retransmits      |         +-----------+         |   IMP B flips
  contents:
  - 'IMP A retransmits      |         +-----------+         |   IMP B flips

    '
- title: packet 3               |      (3)|  1      0 |->     1 | 1 SOE, unblocks
  contents:
  - "packet 3               |      (3)|  1      0 |->     1 | 1 SOE, unblocks\n  \
    \                     |         +-----------+         |   channel, and\n     \
    \                  |                               |   flips ROE.\n          \
    \             |           POE   ACK           |\n"
- title: IMP A flips ROE,       |         +-----------+         |
  contents:
  - "IMP A flips ROE,       |         +-----------+         |\n      flips SOE   \
    \   1 | 0     <-|  1      1 |(4)      |\n                       |         +-----------+\
    \         |\n                       |                               |\n   In fact\
    \ each send/receive module has 8 OE bits, so up to 8 packets\n   can be outstanding\
    \ in either direction.\n"
- title: How things really work
  contents:
  - "How things really work\n   Actually, a single send module is responsible for\
    \ trying to transmit\n   packets out on the 8 pseudo-channels.  Each channel has\
    \ a two-bit\n   state (in addition to an OE bit).  Each channel is either FREE\
    \ or IN\n   USE and if IN USE, it may be sending OLD or NEW packet.\n start state\
    \                                      F = free\n        |                   \
    \                      I = in use\n        V                                 \
    \        X = don_t care\n       +-----+                 +------+           N =\
    \ new packet\n       |  FX | --------------> | I, N |           O = old packet\n\
    \       +-----+                 +------+\n          ^                       |\n\
    \          |                       |\n          |                       |\n  \
    \        |                       |\n   ACK    |                       |\n received\
    \ |                       |\n          |                       V\n          |\
    \                   +------+\n          +-------------------| I, O |---+\n   \
    \                           +------+   |\n                                  ^\
    \      | re-transmissions\n                                  +------+\n   Between\
    \ IMPs, packets are sent repeatedly, until they are\n   acknowledged.  However,\
    \ the choice of what to send is ordered by\n   priority as follows:\n      1.\
    \ Priority Packets (as marked by HOST)\n      2. Non-Priority Packet\n      3.\
    \ Unacknowledged packets (on I,O state channels)\n      4. Others\n   It was pointed\
    \ out that a heavy load of type (1) and (2) traffic\n   might prevent retransmissions\
    \ from occurring at all, and W. Crowther\n   responded that the bug would be fixed\
    \ by a 125 ms time-out which\n   forces retransmission of old packets in class\
    \ (3).\n   Note that each packet must carry a \"pseudo-channel\" number to\n \
    \  identify the POE-to-channel association, and 8 ACK bits (which are\n   positionally\
    \ associated with the pseudo-channels).  Thus a single\n   packet can ACK up to\
    \ 8 packets at once.\n          [This RFC was put into machine readable form for\
    \ entry]\n     [into the online RFC archives by Helene Morin, Via Genie, 12/99]\n"
