- title: __initial_text__
  contents:
  - '                       On Many Addresses per Host

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document was submitted to the IETF IPng area in response to\
    \ RFC\n   1550.  Publication of this document does not imply acceptance by the\n\
    \   IPng area of any ideas expressed within.  Comments should be\n   submitted\
    \ to the big-internet@munnari.oz.au mailing list.\n"
- title: Overview and Rational
  contents:
  - "Overview and Rational\n   Currently, most hosts have only one address.  With\
    \ comparatively rare\n   exceptions, hosts as hosts -- as opposed to hosts acting\
    \ as routers\n   or PPP servers -- are single-homed.  Our address space calculations\n\
    \   reflect this; we are assuming that we can estimate the size of the\n   address\
    \ space by counting hosts.  But this may be a serious error.  I\n   suggest that\
    \ that model may -- and should -- change.\n   For the ideas outlined below, I\
    \ do not claim that multiple addresses\n   per host is the only or even necessarily\
    \ the best way to accomplish\n   the goal.  I do claim that my ideas are at the\
    \ very least plausible,\n   and that I expect that many of them will be tried.\n"
- title: Encoding Services
  contents:
  - "Encoding Services\n   More and more often, services are being encoded in the\
    \ host name.\n   One can fetch files from ftp.research.att.com, look up an IP\
    \ address\n   on ns.uu.net, synchronize clocks from ntp.udel.edu, etc.  Should\
    \ this\n   practice be generalized to the IP address domain?\n   In some cases\
    \ it would be a very good idea.  Certain services need to\n   be configured by\
    \ IP address; they are either used when the DNS is\n   being bootstrapped (such\
    \ as in glue records and root server cache\n   records), or when its unavailable\
    \ (i.e., when booting after a power\n   hit, and the local name servers are slower\
    \ to reboot than their\n   diskless clients.\n   Security is another reason, in\
    \ some cases.  Address-based\n   authentication is bad enough; relying on the\
    \ name service adds\n   another layer of risk.  An attacker can go after the DNS,\
    \ in that\n   case.  A risk-averse system manager might prefer to avoid the extra\n\
    \   exposure, instead granting privileges (i.e., rlogin or NFS) by\n   address\
    \ instead of name.  But that, of course, leads to all the usual\n   headaches\
    \ when the location of the service changes.  If the address\n   for the service\
    \ could be held constant, there would be much more\n   freedom to move it to another\
    \ machine.  One way to do that is by\n   assigning the serving host a secondary\
    \ address.\n   A related notion comes from the need to offer different views of\
    \ a\n   service from a single host.  For example, research.att.com has long\n\
    \   offered two distinct FTP archives, with slightly different access\n   policies.\
    \  It would be nice if both could live on the same machine,\n   without asking\
    \ the user community to learn new protocols or custom\n   port numbers.\n   Archie\
    \ is an even better example.  There are three principal ways to\n   use Archie:\
    \  use a special protocol, and hence a special application\n   program, on a dedicated\
    \ port and host that is probably named\n   archie.foo.bar; telnet to archie.foo.bar\
    \ and go through an extra and\n   gratuitous login as archie, or telnet to some\
    \ special port on\n   archie.foo.bar.  The latter two are examples of using a\
    \ standard\n   protocol (telnet) to offer a different service.  Neither alternative\n\
    \   is very convenient.\n   It would be better if archie.foo.bar provided the\
    \ Archie service,\n   while host.foo.bar provided a login prompt.  Again -- an\
    \ easy way to\n   do this is to assign the host a separate IP address for its\
    \ extra\n   service.\n   Note that there are security advantages here, too.  A\
    \ firewall could\n   be configured to allow access to the address associated with\
    \ the\n   Archie server, but not the other addresses on that host.  That would\n\
    \   provide a high degree of safety, assuming, of course, that the other\n   servers\
    \ on that host were bound to its primary addresses, and not the\n   exposed address.\n\
    \   Another way to implement this concept would be to extend the DNS, to\n   return\
    \ port number information as well as IP addresses.  Thus,\n   netlib.att.com might\
    \ return 192.20.225.3/221.  But that would\n   necessitate changing every FTP\
    \ client program, a daunting task.\n   We could also look on this as the extension\
    \ of the MX concept.  MX\n   records are very valuable, but they apply only to\
    \ mail, and they\n   don't supply port numbers.  Again, changing this would require\n\
    \   massive client program changes.\n"
- title: Accounting and Billing
  contents:
  - "Accounting and Billing\n   For better or worse, some parts of the Internet are\
    \ moving towards\n   usage-sensitive charging.  At least four charging schemes\
    \ seem\n   possible; doubtless, the marketeers in charge of such things can and\n\
    \   will come up with more.\n   The first is the traditional \"pay as you go\"\
    \ approach.  Each host is\n   responsible for its own packets.  Of course, that\
    \ means that in a\n   typical conversation, both parties pay -- and the providers\
    \ of free\n   FTP archives will end up paying dearly for their beneficence.  That\n\
    \   leads to our second model:  caller pays.  Other people might want to\n   make\
    \ collect calls, much as is done on the telephone today.  Finally,\n   there might\
    \ be the equivalent of American \"900\" numbers:  the caller\n   pays a premium\
    \ to the server.\n   This is not at all far-fetched; UUNET already has a 900 number\
    \ for\n   anonymous uucp clients.  No need to register in advance; just dial\n\
    \   in, and let the phone company act as your agent.\n   Given all these schemes,\
    \ it is vital that the caller and recipient\n   know in advance who will pay.\
    \  It is not acceptable for users to\n   learn, only after the fact, that they\
    \ have incurred a cost.  We could\n   envision use of IP options, but again, that\
    \ would preclude use of\n   today's standard clients.\n   It is not sufficient\
    \ to present a message at connection time warning\n   of the charges.  Many interactions\
    \ do not provide a hook for user\n   interaction.  And there are security concerns\
    \ -- suppose that someone\n   puts up a gopher server that redirects a caller\
    \ to some pay-to-play\n   address, without displaying the required warning.  A\
    \ scam?  Sure --\n   but it's already happened with the phone network, and I see\
    \ no reason\n   to think that the Internet will be far behind.\n   My suggestion,\
    \ of course, is to encode the charge algorithm in the\n   destination address\
    \ (and perhaps in the DNS name space as well).  The\n   bits themselves would\
    \ determine who pays.  Organizational border\n   routers could implement policies\
    \ on pay services; the anonymous\n   workstations in a dorm computer lab wouldn't\
    \ be allowed to call\n   collect.\n   An extension of this scheme would use a\
    \ comparatively large number of\n   bits, letting the address act not just as\
    \ a policy indicator, but\n   also as an index to a charge algorithm table.\n"
- title: Addresses per User
  contents:
  - "Addresses per User\n   It may be useful to assign each user on a host a separate\
    \ IP address,\n   for the duration of the login session.  This has a number of\n\
    \   advantages.\n   The first ties in with the charging scheme given above.  Usage-\n\
    \   sensitive accounting today is done by routers, and they have no\n   notion\
    \ of who is using the hosts.  If each user had a separate IP\n   address, we could\
    \ continue to gather the accounting data at the\n   router.  The host would simply\
    \ have to record the address\n   assignments; billing could be done offline.\n\
    \   Similarly, different classes of users could have different forms of\n   addresses.\
    \  Those with hard-money accounts might have some bits set\n   in the address\
    \ that would allow for access to costly services.  The\n   border routers could\
    \ make this sort of distinction, using today's\n   technology.\n   An IP address\
    \ per user also fits in well with encryption.  There is a\n   lot of attention\
    \ today focused on network-layer encryption.  But that\n   provides host-level\
    \ granularity of protection, which is sometimes\n   insufficient.  Transport-layer\
    \ encryptors provide finer-grained\n   protection, but does the Internet need\
    \ two different low-level\n   encryption schemes?  If each user had a separate\
    \ IP address -- and\n   perhaps had it only on hosts that cared about such matters\
    \ -- we\n   could provide user-level protection and accounability, with the same\n\
    \   infrastructure used to support host-level accountability.\n"
- title: Low-Grade Mobility
  contents:
  - "Low-Grade Mobility\n   There are several schemes under discussion for mobile\
    \ IP hosts.\n   These are aimed at a fairly general model of hosts moving anywhere.\n\
    \   While that is important, there is also some need for limited\n   mobility,\
    \ within a subnet.  This could be used for load-balancing.  A\n   mail relay that\
    \ had just been asked to send a large message to a huge\n   mailing list could\
    \ offload some of its IP addresses to its peers.\n   That would divert future\
    \ incoming messages without invalidating\n   thousands of cached MX records and\
    \ their associated IP addresses.\n   Similarly, servers for low-speed X terminals\
    \ could reside on\n   different physical machines, all the while not disturbing\
    \ sessions in\n   progress.\n"
- title: Merging Subnets
  contents:
  - "Merging Subnets\n   There has long been some need to merge subnets.  Sometimes\
    \ this is\n   due to organizational changes; other times, people have installed\n\
    \   bridges when routers would have been a more appropriate choice.  Some\n  \
    \ hosts need to live on both logical networks at once, to avoid an\n   extra hop\
    \ through a router.  It would be useful to be able to assign\n   them such addresses.\n"
- title: How Many Addresses Do We Need?
  contents:
  - "How Many Addresses Do We Need?\n   Assuming that some of these ideas bear fruit,\
    \ how many addresses do\n   we need, per host?\n   Most of these schemes are fairly\
    \ cheap.  Few people would offer more\n   than a handful of distinct service views\
    \ per system.  But the\n   address-per-user notion could be quite costly.  We\
    \ also have to\n   account for address mask assignment policies.  In many of today's\n\
    \   networks, enough bits of host address have to be allocated to allow\n   for\
    \ the largest subnet in an organization.  Even if we assume that\n   IPng's routing\
    \ protocols will be smarter about such things, foresight\n   in address allocation\
    \ will be needed to allow headroom for some\n   networks to grow, while still\
    \ maintaining a contiguous netmask.  This\n   in turn will contribute to sparse\
    \ utilization of the address space.\n   Accordingly, I recommend that we allow\
    \ for 2^6, and perhaps as many\n   as 2^8, extra addresses per host, to leave\
    \ room for the ideas\n   presented here.\n   I should note that the idea of encoding\
    \ the service in the transport\n   address bears some relation to OSI's model.\
    \  That similarity should\n   not, of course, invalidate the idea.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Some of these ideas were derived from conversations with\
    \ Matt Blaze.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are discussed throughout this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Steven M. Bellovin\n   Software Engineering Research Department\n\
    \   AT&T Bell Laboratories\n   600 Mountain Avenue\n   Murray Hill, NJ  07974,\
    \ USA\n   Phone: +1 908-582-5886\n   Fax: +1 908-582-3063\n   EMail:  smb@research.att.com\n"
