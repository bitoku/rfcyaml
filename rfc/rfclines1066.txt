This MIB specification is the first edition of an evolving document defining variables needed for monitoring and control of various components of the Internet.
Not all groups of defined variables are mandatory for all Internet components.
For example, the EGP group is mandatory for gateways using EGP but not for hosts which should not be running EGP.
Similarly, the TCP group is mandatory for hosts running TCP but not for gateways which aren't running it.
What IS mandatory, however, is that all variables of a group be supported if any element of the group is supported.
It is expected that additional MIB groups and variables will be defined over time to accommodate the monitoring and control needs of new or changing components of the Internet.
The MIB working group will continue to refine this specification and projects a revision incorporating new requirements in early 1989.
As reported in RFC 1052, IAB Recommendations for the Development of Internet Network Management Standards [1], the Internet Activities Board has directed the Internet Engineering Task Force (IETF) to create two new working groups in the area of network management.
One group is charged with the further specification and definition of elements to be included in the Management Information Base.
The other is charged with defining the modifications to the Simple Network Management Protocol (SNMP) to accommodate the short term needs of the network vendor and operator communities.
The long term needs of the Internet community are to be met using the ISO CMIS/CMIP [2,3] framework as a basis.
An existing IETF working group, the "NETMAN" group, is already engaged in defining the use of CMIS/CMIP in a TCP/IP network, and will continue with responsibility for addressing the longer term requirements.
The output of the MIB working group is to be provided to both  the SNMP working  group  and  the  NETMAN group, so as to ensure compatibility of monitored items for both network management frameworks.
The MIB working group has produced this memo and a companion.
The companion memo [4] defines a Structure for Management Information (SMI) for use by the managed objects contained in the MIB.
This memo defines the list of managed objects.
The IAB also urged the working groups to be "extremely sensitive to the need to keep SNMP simple," and recommends that the MIB working group take as its starting inputs the MIB definitions found in the High Level Entity Management Systems (HEMS)
RFC 1024 [5], the initial SNMP specification [6], and the CMIS/CMIP memos [7,8].
Thus, the list of managed objects defined here, has been derived by taking only those elements which are considered essential.
Since such elements are essential, there is no need to allow the implementation of individual objects, to be optional.
Rather, all compliant implementations will contain all applicable (see below) objects defined in this memo.
This approach of taking only the essential objects is NOT restrictive, since the SMI defined in the companion memo provides three extensibility mechanisms: one, the addition of new standard objects through the definitions of new versions of the MIB; two, the addition of widely available but non standard objects through the multilateral subtree; and three, the addition of private objects through the enterprises subtree.
Such additional objects can not only be used for vendor specific elements, but also for experimentation as required to further the knowledge of which other objects are essential.
The primary criterion for being considered essential was for an object to be contained in all of the above referenced MIB definitions.
A few other objects have been included, but only if the MIB working group believed they are truly essential.
The detailed list of criteria against which potential inclusions in this (initial) MIB were considered, was: 1)
An object needed to be essential for either fault or configuration management.
Only weak control objects were permitted (by weak, it is meant that tampering with them can do only limited damage).
This criterion reflects the fact that the current management protocols are not sufficiently secure to do more powerful control operations.
3) Evidence of current use and utility was required.
An attempt was made to limit the number of objects to about 100 to make it easier for vendors to fully instrument their software.
To avoid redundant variables, it was required that no object be included that can be derived from others in the MIB.
Implementation specific objects (e.g., for BSD UNIX) were excluded.
It was agreed to avoid heavily instrumenting critical sections of code.
The general guideline was one counter per critical section per layer.
Objects Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using Abstract Syntax Notation One (ASN.1) [9].
The mechanisms used for describing these objects are specified in the companion memo.
In particular, each object has a name, a syntax, and an encoding.
The name is an object identifier, an administratively assigned name, which specifies an object type.
The object type together with an object instance serves to uniquely identify a specific instantiation of the object.
For human convenience, we often use a textual string, termed the OBJECT DESCRIPTOR, to also refer to the object type.
The syntax of an object type defines the abstract data structure corresponding to that object type.
The ASN.1 language is used for this purpose.
However, the companion memo purposely restricts the ASN.1 constructs which may be used.
These restrictions are explicitly made for simplicity.
The encoding of an object type is simply how that object type is represented using the object type's syntax.
Implicitly tied to the notion of an object type's syntax and encoding
is how the object type is represented when being transmitted on the network.
This memo specifies the use of the basic encoding rules of ASN.1 [10].
Since this list of managed objects contains only the essential elements, there is no need to allow individual objects to be optional.
Rather, the objects are arranged into the following groups:
System Interfaces Address Translation IP ICMP
There are two reasons for defining these groups: one, to provide a means of assigning object identifiers; two, to provide a method for implementations of managed agents to know which objects they must implement.
This method is as follows: if the semantics of a group is applicable to an implementation, then it must implement all objects in that group.
For example, an implementation must implement the EGP group if and only if it implements the EGP protocol.
The next section contains the specification of all object types contained in the MIB.
Following the conventions of the companion memo, the object types are defined using the following fields: OBJECT:
A textual name, termed the OBJECT DESCRIPTOR, for the object type, along with its corresponding OBJECT IDENTIFIER.
The abstract syntax for the object type, presented using ASN.1.
This must resolve to an instance of the ASN.1 type ObjectSyntax defined in the SMI.
A textual description of the semantics of the object type.
Implementations should ensure that their interpretation of the object type fulfills this definition since this MIB is intended for use in multi  vendor environments.
As such it is vital that object types have consistent meaning across all machines.
Access: One of read only, read write, write only, or not accessible.
Status: One of mandatory, optional, or obsolete.
Object Definitions RFC1066 MIB { iso org(3) dod(6)
IMPORTS mgmt, OBJECT TYPE, NetworkAddress, IpAddress, Counter, Gauge, TimeTicks FROM
The System Group Implementation of the System group is mandatory for all systems.
{ system 1 } Syntax:
A textual description of the entity.
This value should include the full name and version identification of the system's hardware type, software operating system, and networking software.
It is mandatory that this only contain printable ASCII characters.
sysObjectID { system 2 } Syntax:
The vendor's authoritative identification of the network management subsystem contained in the entity.
This value is allocated within the SMI enterprises subtree (1.3.6.1.4.1) and provides an easy and unambiguous means for determining "what kind of box" is being managed.
For example, if vendor "Flintstones,
Inc." was assigned the subtree 1.3.6.1.4.1.42, it could assign the identifier 1.3.6.1.4.1.42.1.1 to its "Fred Router".
sysUpTime { system 3 } Syntax: TimeTicks Definition:
The time (in hundredths of a second) since the network management portion of the system was last re initialized.
The Interfaces Group Implementation of the Interfaces group is mandatory for all systems.
ifNumber { interfaces 1 } Syntax:
The number of network interfaces (regardless of their current state) on which this system can send/receive IP datagrams.
{ interfaces 2 } Syntax: SEQUENCE OF IfEntry Definition:
A list of interface entries.
The number of entries is given by the value of ifNumber.
, ifLastChange TimeTicks, ifInOctets Counter, ifInUcastPkts Counter, ifInNUcastPkts Counter, ifInDiscards Counter, ifInErrors Counter, ifInUnknownProtos Counter, ifOutOctets Counter, ifOutUcastPkts Counter, ifOutNUcastPkts Counter, ifOutDiscards Counter, ifOutErrors Counter, ifOutQLen
An interface entry containing objects at the subnetwork layer and below for a particular interface.
We now consider the individual components of each interface entry: OBJECT:
ifIndex { ifEntry 1 } Syntax: INTEGER Definition:
A unique value for each interface.
Its value ranges between 1 and the value of ifNumber.
The value for each interface must remain constant at least from one re  initialization of the entity's network management system to the next re initialization.
ifDescr { ifEntry 2 } Syntax: OCTET STRING Definition:
A text string containing information about the interface.
This string should include the name of the manufacturer, the product name and the version of the hardware interface.
The string is intended for presentation to a human; it must not contain anything but printable ASCII characters.
proprietary serial propPointToPointSerial(22) } Definition:
The type of interface, distinguished according to the physical/link/network protocol(s) immediately "below" IP in the protocol stack.
ifMtu { ifEntry 4 } Syntax: INTEGER Definition:
The size of the largest IP datagram which can be sent/received on the interface, specified in octets.
ifSpeed { ifEntry 5 } Syntax:
An estimate of the interface's current bandwidth in bits per second.
For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth.
The interface's address at the protocol layer immediately "below" IP in the protocol stack.
For interfaces which do not have such an address (e.g., a serial line), this object should contain an octet string of zero length.
The testing(3) state indicates that no operational packets can be passed.
The testing(3) state indicates that no operational packets can be passed.
{ ifEntry 9 } Syntax:
The value of sysUpTime at the time the interface entered its current operational state.
If the current state was entered prior to the last re initialization of the local network management subsystem, then this object contains a zero value.
ifInOctets { ifEntry 10 } Syntax:
The total number of octets received on the interface, including framing characters.
{ ifEntry 11 } Syntax:
unicast packets delivered to a higher layer protocol.
The number of non unicast (i.e., subnet broadcast or subnet multicast)
packets delivered to a higher layer protocol.
ifInDiscards { ifEntry 13 } Syntax:
The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher layer protocol.
One possible reason for discarding such a packet could be to free up buffer space.
ifInErrors { ifEntry 14 } Syntax:
The number of inbound packets that contained errors preventing them from being deliverable to a higher layer protocol.
The number of packets received via the interface which were discarded because of an unknown or unsupported protocol.
The total number of octets transmitted out of the interface, including framing characters.
ifOutUcastPkts { ifEntry 17 }
The total number of packets that higher level protocols requested be transmitted to a subnet unicast address, including those that were discarded or not sent.
ifOutNUcastPkts { ifEntry 18 }
The total number of packets that higher level protocols requested be transmitted to a non unicast (i.e., a subnet broadcast or subnet multicast) address, including those that were discarded or not sent.
The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted.
One possible reason for discarding such a packet could be to free up buffer space.
ifOutErrors { ifEntry 20 } Syntax:
The number of outbound packets that could not be transmitted because of errors.
{ ifEntry 21 } Syntax: Gauge Definition:
The length of the output packet queue (in packets).
The Address Translation Group Implementation of the Address Translation group is mandatory for all systems.
The Address Translation group contains one table which is the union across all interfaces of the translation tables for converting a NetworkAddress (e.g., an IP address) into a subnetwork specific address.
For lack of a better term, this document refers to such a subnetwork specific address as a "physical" address.
Examples of such translation tables are: for broadcast media where ARP is in use, the translation table is equivalent to the ARP cache; or, on an X.25 network where non algorithmic translation to X.121 addresses is required, the translation table contains the NetworkAddress to X.121 address equivalences.
atTable { at 1 } Syntax: SEQUENCE OF AtEntry Definition:
The Address Translation tables contain the NetworkAddress to "physical" address equivalences.
Some interfaces do not use translation tables for determining address equivalences (e.g., DDN X.25 has an algorithmic method); if all interfaces are of this type, then the Address Translation table is empty, i.e., has zero entries.
Each entry contains one NetworkAddress to "physical" address equivalence.
We now consider the individual components of each Address Translation table entry: OBJECT:
atIfIndex { atEntry 1 } Syntax: INTEGER Definition:
The interface on which this entry's equivalence is effective.
The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.
{ atEntry 2 } Syntax: OCTET STRING Definition:
The media dependent "physical" address.
atNetAddress { atEntry 3 } Syntax: NetworkAddress Definition:
The NetworkAddress (e.g., the IP address) corresponding to the media dependent "physical" address.
The IP Group Implementation of the IP group is mandatory for all systems.
The indication of whether this entity is acting as an IP gateway in respect to the forwarding of datagrams received by, but not addressed to, this entity.
IP gateways forward datagrams; Hosts do not (except those Source Routed via the host).
{ ip 2 } Syntax: INTEGER Definition:
The default value inserted into the Time To Live field of the IP header of datagrams originated at this entity, whenever a TTL value is not supplied by the transport layer protocol.
ipInReceives { ip 3 } Syntax:
The total number of input datagrams received from interfaces, including those received in error.
ipInHdrErrors { ip 4 } Syntax:
The number of input datagrams discarded due to errors in their IP headers, including bad checksums, version number mismatch, other format errors, time to live exceeded, errors discovered in processing their IP options, etc.
ipInAddrErrors { ip 5 } Syntax:
The number of input datagrams discarded because the IP address in their IP header's destination field was not a valid address to be received at this entity.
This count includes invalid addresses (e.g., 0.0.0.0) and addresses of unsupported Classes (e.g., Class E).
For entities which are not IP Gateways and therefore do not forward datagrams, this counter includes datagrams discarded because the destination address was not a local address.
{ ip 6 } Syntax:
The number of input datagrams for which this entity was not their final IP destination, as a result of which an attempt was made to find a route to forward them to that final destination.
In entities which do not act as IP Gateways, this counter will include only those packets which were Source Routed via this entity, and the Source Route option processing was successful.
ipInUnknownProtos { ip 7 } Syntax:
The number of locally addressed datagrams received successfully but discarded because of an unknown or unsupported protocol.
ipInDiscards { ip 8 } Syntax:
The number of input IP datagrams for which no problems were encountered to prevent their continued processing, but which were discarded (e.g. for lack of buffer space).
Note that this counter does not include any datagrams discarded while awaiting re assembly.
ipInDelivers { ip 9 } Syntax:
The total number of input datagrams successfully delivered to IP user protocols (including ICMP).
ipOutRequests { ip 10 } Syntax:
The total number of IP datagrams which local IP user  protocols (including ICMP) supplied to IP in requests for transmission.
Note that this counter does not include any datagrams counted in ipForwDatagrams.
{ ip 11 } Syntax:
The number of output IP datagrams for which no problem was encountered to prevent their transmission to their destination, but which were discarded (e.g., for lack of buffer space).
Note that this counter would include datagrams counted in ipForwDatagrams if any such packets met this (discretionary) discard criterion.
The number of IP datagrams discarded because no route could be found to transmit them to their destination.
Note that this counter includes any packets counted in ipForwDatagrams which meet this "no route" criterion.
{ ip 13 } Syntax: INTEGER Definition:
The maximum number of seconds which received fragments are held while they are awaiting reassembly at this entity.
{ ip 14 } Syntax:
The number of IP fragments received which needed to be reassembled at this entity.
{ ip 15 } Syntax:
The number of IP datagrams successfully re assembled.
The number of failures detected by the IP re assembly algorithm (for whatever reason: timed out, errors, etc).
Note that this is not necessarily a count of discarded IP fragments since some algorithms (notably RFC 815's) can lose track of the number of fragments by combining them as they are received.
ipFragOKs { ip 17 } Syntax:
The number of IP datagrams that have been successfully fragmented at this entity.
{ ip 18 } Syntax:
The number of IP datagrams that have been discarded because they needed to be fragmented at this entity but could not be, e.g., because their "Don't Fragment" flag was set.
The number of IP datagram fragments that have been generated as a result of fragmentation at this entity.
The Ip Address table contains this entity's IP addressing information.
{ ip 20 } Syntax: SEQUENCE OF IpAddrEntry Definition:
The table of addressing information relevant to this entity's IP addresses.
The addressing information for one of this entity's IP addresses.
{ ipAddrEntry 1 } Syntax: IpAddress Definition:
The IP address to which this entry's addressing information pertains.
{ ipAddrEntry 2 } Syntax: INTEGER Definition:
The index value which uniquely identifies the interface to which this entry is applicable.
The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.
{ ipAddrEntry 3 } Syntax: IpAddress Definition:
The subnet mask associated with the IP address of this entry.
The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.
{ ipAddrEntry 4 } Syntax: INTEGER Definition:
The value of the least significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry.
For example, when the Internet standard all ones broadcast address is used, the value will be 1.
The IP Routing Table contains an entry for each route presently known to this entity.
Note that the action to be taken in response to a request to read a non existent entry, is specific to the network management protocol being used.
ipRoutingTable { ip 21 } Syntax: SEQUENCE OF IpRouteEntry Definition: This entity's IP Routing table.
, ipRouteType INTEGER, ipRouteProto INTEGER,
A route to a particular destination.
We now consider the individual components of each route in the IP Routing Table: OBJECT:
ipRouteEntry 1 } Syntax: IpAddress Definition:
The destination IP address of this route.
An entry with a value of 0.0.0.0 is considered a default route.
Multiple such default routes can appear in the table, but access to such multiple entries is dependent on the table access mechanisms defined by the network management protocol in use.
{ ipRouteEntry 2 } Syntax: INTEGER Definition:
The index value which uniquely identifies the local interface through which the next hop of this route should be reached.
The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.
The primary routing metric for this route.
The semantics of this metric are determined by the routing protocol specified in the route's ipRouteProto value.
If this metric is not used, its value should be set to  1.
An alternate routing metric for this route.
The semantics of this metric are determined by the routing  protocol specified in the route's ipRouteProto value.
If this metric is not used, its value should be set to  1.
ipRouteMetric3 { ipRouteEntry 5 } Syntax: INTEGER Definition:
An alternate routing metric for this route.
The semantics of this metric are determined by the routing  protocol specified in the route's ipRouteProto value.
If this metric is not used, its value should be set to  1.
ipRouteMetric4 { ipRouteEntry 6 } Syntax: INTEGER Definition:
An alternate routing metric for this route.
The semantics of this metric are determined by the routing  protocol specified in the route's ipRouteProto value.
If this metric is not used, its value should be set to  1.
ipRouteEntry 7 } Syntax: IpAddress Definition:
The IP address of the next hop of this route.
The routing mechanism via which this route was learned.
Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.
{ ipRouteEntry 10 } Syntax: INTEGER Definition:
The number of seconds since this route was last updated or otherwise determined to be correct.
Note that no semantics of "too old" can be implied except through knowledge of the routing protocol by which the route was learned.
The ICMP Group Implementation of the ICMP group is mandatory for all systems.
The ICMP group contains the ICMP input and output statistics.
Note that individual counters for ICMP message (sub )codes have been omitted from this (version of the) MIB for simplicity.
icmpInMsgs { icmp 1 } Syntax:
The total number of ICMP messages which the entity received.
Note that this counter includes all those counted by icmpInErrors.
icmpInErrors { icmp 2 } Syntax:
The number of ICMP messages which the entity received but determined as having errors (bad ICMP checksums, bad length, etc.).
{ icmp 3 } Syntax:
The number of ICMP Destination Unreachable messages received.
icmpInTimeExcds { icmp 4 } Syntax:
The number of ICMP Time Exceeded messages received.
icmpInParmProbs { icmp 5 } Syntax:
The number of ICMP Parameter Problem messages received.
{ icmp 6 } Syntax:
The number of ICMP Source Quench messages received.
icmpInRedirects { icmp 7 }
The number of ICMP Redirect messages received.
icmpInEchos { icmp 8 } Syntax:
The number of ICMP Echo (request) messages received.
{ icmp 9 } Syntax:
The number of ICMP Echo Reply messages received.
icmpInTimestamps { icmp 10 }
The number of ICMP Timestamp (request) messages received.
icmpInTimestampReps { icmp 11 } Syntax:
The number of ICMP Timestamp Reply messages received.
{ icmp 12 } Syntax:
The number of ICMP Address Mask Request messages received.
icmpInAddrMaskReps { icmp 13 }
The number of ICMP Address Mask Reply messages received.
{ icmp 14 } Syntax:
The total number of ICMP messages which this entity attempted to send.
Note that this counter includes all those counted by icmpOutErrors.
{ icmp 15 } Syntax:
The number of ICMP messages which this entity did not send due to problems discovered within ICMP such as a lack of buffers.
This value should not include errors discovered outside the ICMP layer such as the inability of IP to route the resultant datagram.
In some implementations there may be no types of error which contribute to this counter's value.
icmpOutDestUnreachs { icmp 16 }
The number of ICMP Destination Unreachable messages sent.
{ icmp 17 } Syntax:
The number of ICMP Time Exceeded messages sent.
icmpOutParmProbs { icmp 18 } Syntax:
The number of ICMP Parameter Problem messages sent.
icmpOutSrcQuenchs { icmp 19 } Syntax:
The number of ICMP Source Quench messages sent.
{ icmp 20 } Syntax:
The number of ICMP Redirect messages sent.
{ icmp 21 } Syntax:
The number of ICMP Echo (request) messages sent.
icmpOutEchoReps { icmp 22 } Syntax:
The number of ICMP Echo Reply messages sent.
{ icmp 23 } Syntax:
The number of ICMP Timestamp (request) messages sent.
{ icmp 24 } Syntax:
The number of ICMP Timestamp Reply messages sent.
icmpOutAddrMasks { icmp 25 }
The number of ICMP Address Mask Request messages sent.
icmpOutAddrMaskReps { icmp 26 } Syntax:
The number of ICMP Address Mask Reply messages sent.
The TCP Group Implementation of the TCP group is mandatory for all systems that implement the TCP protocol.
Note that instances of object types that represent information about a particular TCP connection are transient; they persist only as long as the connection in question.
The algorithm used to determine the timeout value used for retransmitting unacknowledged octets.
{ tcp 2 } Syntax: INTEGER Definition:
The minimum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds.
More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout.
In particular, when the timeout algorithm is rsre(3), an object of this type has the semantics of the LBOUND quantity described in RFC 793.
{ tcp 3 } Syntax: INTEGER Definition:
The maximum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds.
More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout.
In particular, when the timeout algorithm is rsre(3), an object of this type has the semantics of the UBOUND quantity described in RFC 793.
{ tcp 4 } Syntax: INTEGER Definition:
The limit on the total number of TCP connections the entity can support.
In entities where the maximum number of connections is dynamic, this object should contain the value " 1".
{ tcp 5 } Syntax:
The number of times TCP connections have made a direct transition to the SYN SENT state from the CLOSED state.
tcpPassiveOpens { tcp 6 } Syntax: Counter Definition:
The number of times TCP connections have made a direct transition to the SYN RCVD state from the LISTEN state.
{ tcp 7 } Syntax:
The number of times TCP connections have made a direct transition to the CLOSED state from either the SYN SENT state or the SYN RCVD state, plus the number of times TCP connections have made a direct transition to the LISTEN state from the SYN RCVD state.
{ tcp 8 } Syntax:
The number of times TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE WAIT state.
{ tcp 9 } Syntax: Gauge Definition:
The number of TCP connections for which the current state is either ESTABLISHED or CLOSE WAIT.
{ tcp 10 } Syntax:
The total number of segments received, including those received in error.
This count includes segments received on currently established connections.
{ tcp 11 } Syntax:
The total number of segments sent, including those on current connections but excluding those containing only retransmitted octets.
{ tcp 12 } Syntax:
The total number of segments retransmitted that is, the number of TCP segments transmitted containing one or more previously transmitted octets.
{ tcp 13 } Syntax: SEQUENCE OF TcpConnEntry Definition:
A table containing TCP connection specific information.
tcpConnEntry { tcpConnTable 1 } Syntax:
} Definition: Information about a particular current TCP connection.
An object of this type is transient, in that it ceases to exist when (or soon after)
the connection makes the transition to the CLOSED state.
tcpConnEntry 1 } Syntax: INTEGER { closed(1), listen(2), synSent(3), synReceived(4), established(5), finWait1(6), finWait2(7), closeWait(8), lastAck(9), closing(10), timeWait(11
The state of this TCP connection.
tcpConnLocalAddress { tcpConnEntry 2 } Syntax: IpAddress Definition:
The local IP address for this TCP connection.
tcpConnLocalPort { tcpConnEntry 3 } Syntax: INTEGER (0
The local port number for this TCP connection.
tcpConnEntry 4 } Syntax: IpAddress Definition:
The remote IP address for this TCP connection.
The remote port number for this TCP connection.
The UDP Group Implementation of the UDP group is mandatory for all systems which implement the UDP protocol.
udpInDatagrams { udp 1 } Syntax:
The total number of UDP datagrams delivered to UDP users.
udpNoPorts { udp 2 } Syntax:
The total number of received UDP datagrams for which there was no application at the destination port.
udpInErrors { udp 3 } Syntax:
The number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.
udpOutDatagrams { udp 4 } Syntax:
The total number of UDP datagrams sent from this entity.
The EGP Group Implementation of the EGP group is mandatory for all systems which implement the EGP protocol.
egpInMsgs { egp 1 } Syntax:
The number of EGP messages received without error.
egpInErrors { egp 2 }
The number of EGP messages received that proved to be in error.
The total number of locally generated EGP messages.
egpOutErrors { egp 4 }
The number of locally generated EGP messages not sent due to resource limitations within an EGP entity.
The Egp Neighbor table contains information about this entity's EGP neighbors.
{ egp 5 } Syntax: SEQUENCE OF EgpNeighEntry Definition:
We now consider the individual components of each EGP neighbor entry:
egpNeighState { egpNeighEntry 1 } Syntax: INTEGER { idle(1), acquisition(2), down(3), up(4), cease(5)
The EGP state of the local system with respect to this entry's EGP neighbor.
Each EGP state is represented by a value that is one greater than the numerical value associated with said state in RFC 904.
egpNeighAddr { egpNeighEntry 2 } Syntax: IpAddress Definition:
The IP address of this entry's EGP neighbor.
RFC1066 MIB { iso org(3) dod(6)
IMPORTS mgmt, OBJECT TYPE, NetworkAddress, IpAddress, Counter, Gauge, TimeTicks FROM
} sysObjectID OBJECT TYPE SYNTAX
the Interfaces group ifNumber OBJECT TYPE SYNTAX
, ifLastChange TimeTicks, ifInOctets Counter, ifInUcastPkts Counter, ifInNUcastPkts Counter, ifInDiscards Counter, ifInErrors Counter, ifInUnknownProtos Counter, ifOutOctets Counter, ifOutUcastPkts Counter, ifOutNUcastPkts Counter, ifOutDiscards Counter, ifOutErrors Counter,
ifOutQLen Gauge } ifIndex OBJECT TYPE SYNTAX
INTEGER ACCESS  read only STATUS  mandatory ::
{ ifEntry 1 } ifDescr OBJECT
read only STATUS  mandatory ::
{ ifEntry 2 } ifType OBJECT
, proteon 10MBit(12), proteon 80MBit(13), hyperchannel(14), fddi(15), lapb(16), sdlc(17), t1 carrier(18), cept(19), basicIsdn(20),
read only STATUS  mandatory ::
{ ifEntry 5 } ifPhysAddress OBJECT
{ ifEntry 8 } ifLastChange OBJECT
read only STATUS  mandatory ::
{ ifEntry 9 } ifInOctets OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ ifEntry 10 } ifInUcastPkts OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ ifEntry 11 } ifInNUcastPkts OBJECT
read only STATUS  mandatory ::
{ ifEntry 12 } ifInDiscards OBJECT
read only STATUS  mandatory ::
{ ifEntry 13 } ifInErrors OBJECT
read only STATUS  mandatory ::
{ ifEntry 14 } ifInUnknownProtos OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ ifEntry 16 } ifOutUcastPkts OBJECT
read only STATUS  mandatory ::
{ ifEntry 17 } ifOutNUcastPkts OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ ifEntry 18 } ifOutDiscards OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ ifEntry 19 } ifOutErrors OBJECT
the Address Translation group atTable OBJECT TYPE SYNTAX
{ atEntry 1 } atPhysAddress OBJECT TYPE
} atNetAddress OBJECT TYPE SYNTAX
entity does NOT forward datagrams } ACCESS
read only STATUS  mandatory ::
{ ip 3 } ipInHdrErrors OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ ip 6 } ipInUnknownProtos OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ ip 7 } ipInDiscards OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ ip 10 } ipOutDiscards OBJECT
} ipReasmTimeout OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ ip 14 } ipReasmOKs OBJECT TYPE SYNTAX
} ipFragOKs OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ ip 17 } ipFragFails OBJECT TYPE SYNTAX
SEQUENCE OF IpAddrEntry ACCESS  read only STATUS  mandatory ::
{ ip 20 } ipAddrEntry OBJECT TYPE SYNTAX
INTEGER, ipAdEntNetMask IpAddress, ipAdEntBcastAddr INTEGER
read only STATUS  mandatory :
INTEGER ACCESS  read only STATUS  mandatory :
{ ipAddrEntry 2 } ipAdEntNetMask OBJECT TYPE SYNTAX  IpAddress ACCESS
read only STATUS  mandatory :
{ ip 21 } ipRouteEntry OBJECT
, ipRouteType INTEGER, ipRouteProto INTEGER, ipRouteAge
{ ipRouteEntry 2 } ipRouteMetric1 OBJECT TYPE SYNTAX
{ ipRouteEntry 4 } ipRouteMetric3 OBJECT TYPE
{ ipRouteEntry 5 } ipRouteMetric4 OBJECT
} ipRouteNextHop OBJECT TYPE SYNTAX
{ ipRouteEntry 7 } ipRouteType OBJECT TYPE SYNTAX
the following are   gateway routing protocols egp(5), ggp(6), hello(7), rip(8), is is(9), es is(10), ciscoIgrp(11), bbnSpfIgp(12), oigp(13)
read only STATUS  mandatory ::
{ icmp 1 } icmpInErrors OBJECT
read only STATUS  mandatory ::
{ icmp 6 } icmpInRedirects OBJECT TYPE SYNTAX
} icmpInEchoReps OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ icmp 12 } icmpInAddrMaskReps OBJECT
read only STATUS  mandatory ::
{ icmp 15 } icmpOutDestUnreachs OBJECT
read only STATUS  mandatory ::
{ icmp 16 } icmpOutTimeExcds OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ icmp 17 } icmpOutParmProbs OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ icmp 18 } icmpOutSrcQuenchs OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ icmp 23 } icmpOutTimestampReps OBJECT
the TCP group tcpRtoAlgorithm OBJECT TYPE SYNTAX
{ tcp 1 } tcpRtoMin OBJECT TYPE SYNTAX
SEQUENCE OF TcpConnEntry ACCESS  read only STATUS  mandatory ::
{ tcp 13 } tcpConnEntry OBJECT TYPE SYNTAX
INTEGER { closed(1), listen(2), synSent(3), synReceived(4), established(5), finWait1(6), finWait2(7), closeWait(8), lastAck(9), closing(10), timeWait(11) }
read only STATUS  mandatory ::
{ tcpConnEntry 1 } tcpConnLocalAddress OBJECT
ACCESS  read only STATUS  mandatory ::
{ tcpConnEntry 3 } tcpConnRemAddress OBJECT TYPE SYNTAX
read only STATUS  mandatory ::
{ tcpConnEntry 4 } tcpConnRemPort OBJECT TYPE SYNTAX
the UDP group udpInDatagrams OBJECT
read only STATUS  mandatory ::
{ udp 2 } udpInErrors OBJECT
read only STATUS  mandatory ::
{ egp 1 } egpInErrors OBJECT
INTEGER { idle(1), acquisition(2), down(3), up(4)
