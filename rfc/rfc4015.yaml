- contents:
  - '                  The Eifel Response Algorithm for TCP

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   Based on an appropriate detection algorithm, the Eifel response\n
    \  algorithm provides a way for a TCP sender to respond to a detected\n   spurious
    timeout.  It adapts the retransmission timer to avoid\n   further spurious timeouts
    and (depending on the detection algorithm)\n   can avoid the often unnecessary
    go-back-N retransmits that would\n   otherwise be sent.  In addition, the Eifel
    response algorithm\n   restores the congestion control state in such a way that
    packet\n   bursts are avoided.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   The Eifel response algorithm relies on a detection algorithm
    such as\n   the Eifel detection algorithm, defined in [RFC3522].  That document\n
    \  contains informative background and motivation context that may be\n   useful
    for implementers of the Eifel response algorithm, but it is\n   not necessary
    to read [RFC3522] in order to implement the Eifel\n   response algorithm.  Note
    that alternative response algorithms have\n   been proposed [BA02] that could
    also rely on the Eifel detection\n   algorithm, and alternative detection algorithms
    have been proposed\n   [RFC3708], [SK04] that could work together with the Eifel
    response\n   algorithm.\n   Based on an appropriate detection algorithm, the Eifel
    response\n   algorithm provides a way for a TCP sender to respond to a detected\n
    \  spurious timeout.  It adapts the retransmission timer to avoid\n   further
    spurious timeouts and (depending on the detection algorithm)\n   can avoid the
    often unnecessary go-back-N retransmits that would\n   otherwise be sent.  In
    addition, the Eifel response algorithm\n   restores the congestion control state
    in such a way that packet\n   bursts are avoided.\n      Note: A previous version
    of the Eifel response algorithm also\n      included a response to a detected
    spurious fast retransmit.\n      However, as a consensus was not reached about
    how to adapt the\n      duplicate acknowledgement threshold in that case, that
    part of the\n      algorithm was removed for the time being.\n"
  - contents:
    - "1.1.  Terminology\n   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT,
      SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in
      this\n   document, are to be interpreted as described in [RFC2119].\n   We refer
      to the first-time transmission of an octet as the 'original\n   transmit'.  A
      subsequent transmission of the same octet is referred\n   to as a 'retransmit'.
      \ In most cases, this terminology can also be\n   applied to data segments.
      \ However, when repacketization occurs, a\n   segment can contain both first-time
      transmissions and retransmissions\n   of octets.  In that case, this terminology
      is only consistent when\n   applied to octets.  For the Eifel detection and
      response algorithms,\n   this makes no difference, as they also operate correctly
      when\n   repacketization occurs.\n   We use the term 'acceptable ACK' as defined
      in [RFC793].  That is an\n   ACK that acknowledges previously unacknowledged
      data.  We use the\n   term 'bytes_acked' to refer to the amount (in terms of
      octets) of\n   previously unacknowledged data that is acknowledged by the most\n
      \  recently received acceptable ACK.  We use the TCP sender state\n   variables
      'SND.UNA' and 'SND.NXT' as defined in [RFC793].  SND.UNA\n   holds the segment
      sequence number of the oldest outstanding segment.\n   SND.NXT holds the segment
      sequence number of the next segment the TCP\n   sender will (re-)transmit.  In
      addition, we define as 'SND.MAX' the\n   segment sequence number of the next
      original transmit to be sent.\n   The definition of SND.MAX is equivalent to
      the definition of\n   'snd_max' in [WS95].\n   We use the TCP sender state variables
      'cwnd' (congestion window), and\n   'ssthresh' (slow-start threshold), and the
      term 'FlightSize' as\n   defined in [RFC2581].  FlightSize is the amount (in
      terms of octets)\n   of outstanding data at a given point in time.  We use the
      term\n   'Initial Window' (IW) as defined in [RFC3390].  The IW is the size
      of\n   the sender's congestion window after the three-way handshake is\n   completed.
      \ We use the TCP sender state variables 'SRTT' and\n   'RTTVAR', and the terms
      'RTO' and 'G' as defined in [RFC2988].  G is\n   the clock granularity of the
      retransmission timer.  In addition, we\n   assume that the TCP sender maintains
      the value of the latest round-\n   trip time (RTT) measurement in the (local)
      variable 'RTT-SAMPLE'.\n   We use the TCP sender state variable 'T_last', and
      the term 'tcpnow'\n   as used in [RFC2861].  T_last holds the system time when
      the TCP\n   sender sent the last data segment, whereas tcpnow is the TCP sender's\n
      \  current system time.\n"
    title: 1.1.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Appropriate Detection Algorithms\n   If the Eifel response algorithm is implemented
    at the TCP sender, it\n   MUST be implemented together with a detection algorithm
    that is\n   specified in a standards track or experimental RFC.\n   Designers
    of detection algorithms who want their algorithms to work\n   together with the
    Eifel response algorithm should reuse the variable\n   \"SpuriousRecovery\" with
    the semantics and defined values specified in\n   [RFC3522].  In addition, we
    define the constant LATE_SPUR_TO (set\n   equal to -1) as another possible value
    of the variable\n   SpuriousRecovery.  Detection algorithms should set the value
    of\n   SpuriousRecovery to LATE_SPUR_TO if the detection of a spurious\n   retransmit
    is based on the ACK for the retransmit (as opposed to an\n   ACK for an original
    transmit).  For example, this applies to\n   detection algorithms that are based
    on the DSACK option [RFC3708].\n"
  title: 2.  Appropriate Detection Algorithms
- contents:
  - "3.  The Eifel Response Algorithm\n   The complete algorithm is specified in section
    3.1.  In sections 3.2\n   - 3.6, we discuss the different steps of the algorithm.\n"
  - contents:
    - "3.1.  The Algorithm\n   Given that a TCP sender has enabled a detection algorithm
      that\n   complies with the requirements set in Section 2, a TCP sender MAY use\n
      \  the Eifel response algorithm as defined in this subsection.\n   If the Eifel
      response algorithm is used, the following steps MUST be\n   taken by the TCP
      sender, but only upon initiation of a timeout-based\n   loss recovery.  That
      is when the first timeout-based retransmit is\n   sent.  The algorithm MUST
      NOT be reinitiated after a timeout-based\n   loss recovery has already been
      started but not completed.  In\n   particular, it may not be reinitiated upon
      subsequent timeouts for\n   the same segment, or upon retransmitting segments
      other than the\n   oldest outstanding segment.\n   (0)     Before the variables
      cwnd and ssthresh get updated when\n           loss recovery is initiated, set
      a \"pipe_prev\" variable as\n           follows:\n               pipe_prev <-
      max (FlightSize, ssthresh)\n           Set a \"SRTT_prev\" variable and a \"RTTVAR_prev\"
      variable as\n           follows:\n               SRTT_prev <- SRTT + (2 * G)\n
      \              RTTVAR_prev <- RTTVAR\n   (DET)   This is a placeholder for a
      detection algorithm that must\n           be executed at this point, and that
      sets the variable\n           SpuriousRecovery as outlined in Section 2.  If\n
      \          [RFC3522] is used as the detection algorithm, steps (1) -\n           (6)
      of that algorithm go here.\n   (7)     If SpuriousRecovery equals SPUR_TO, then\n
      \              proceed to step (8);\n           else if SpuriousRecovery equals
      LATE_SPUR_TO, then\n               proceed to step (9);\n           else\n               proceed
      to step (DONE).\n   (8)     Resume the transmission with previously unsent data:\n
      \          Set\n               SND.NXT <- SND.MAX\n   (9)     Reverse the congestion
      control state:\n           If the acceptable ACK has the ECN-Echo flag [RFC3168]
      set,\n           then\n               proceed to step (DONE);\n           else
      set\n               cwnd <- FlightSize + min (bytes_acked, IW)\n               ssthresh
      <- pipe_prev\n           Proceed to step (DONE).\n   (10)    Interworking with
      Congestion Window Validation:\n           If congestion window validation is
      implemented according\n           to [RFC2861], then set\n               T_last
      <- tcpnow\n   (11)    Adapt the conservativeness of the retransmission timer:\n
      \          Upon the first RTT-SAMPLE taken from new data; i.e., the\n           first
      RTT-SAMPLE that can be derived from an acceptable\n           ACK for data that
      was previously unsent when the spurious\n           timeout occurred,\n               if
      the retransmission timer is implemented according\n               to [RFC2988],
      then set\n                     SRTT   <- max (SRTT_prev, RTT-SAMPLE)\n                     RTTVAR
      <- max (RTTVAR_prev, RTT-SAMPLE/2)\n                     RTO    <- SRTT + max
      (G, 4*RTTVAR)\n                     Run the bounds check on the RTO (rules (2.4)
      and\n                     (2.5) in [RFC2988]), and restart the\n                     retransmission
      timer;\n               else\n                     appropriately adapt the conservativeness
      of the\n                     retransmission timer that is implemented.\n   (DONE)
      \ No further processing.\n"
    title: 3.1.  The Algorithm
  - contents:
    - "3.2.  Storing the Current Congestion Control State (Step 0)\n   The TCP sender
      stores in pipe_prev what is considered a safe slow-\n   start threshold (ssthresh)
      before loss recovery is initiated; i.e.,\n   before the loss indication is taken
      into account.  This is either the\n   current FlightSize, if the TCP sender
      is in congestion avoidance, or\n   the current ssthresh, if the TCP sender is
      in slow-start.  If the TCP\n   sender later detects that it has entered loss
      recovery unnecessarily,\n   then pipe_prev is used in step (9) to reverse the
      congestion control\n   state.  Thus, until the loss recovery phase is terminated,
      pipe_prev\n   maintains a memory of the congestion control state of the time
      right\n   before the loss recovery phase was initiated.  A similar approach
      is\n   proposed in [RFC2861], where this state is stored in ssthresh\n   directly
      after a TCP sender has become idle or application limited.\n   There had been
      debates about whether the value of pipe_prev should be\n   decayed over time;
      e.g., upon subsequent timeouts for the same\n   outstanding segment.  We do
      not require decaying pipe_prev for the\n   Eifel response algorithm and do not
      believe that such a conservative\n   approach should be in place.  Instead,
      we follow the idea of\n   revalidating the congestion window through slow-start,
      as suggested\n   in [RFC2861].  That is, in step (9), the cwnd is reset to a
      value\n   that avoids large packet bursts, and ssthresh is reset to the value\n
      \  of pipe_prev.  Note that [RFC2581] and [RFC2861] also do not require\n   a
      decaying of ssthresh after it has been reset in response to a loss\n   indication,
      or after a TCP sender has become idle or application\n   limited.\n"
    title: 3.2.  Storing the Current Congestion Control State (Step 0)
  - contents:
    - "3.3.  Suppressing the Unnecessary go-back-N Retransmits (Step 8)\n   Without
      the use of the TCP timestamps option [RFC1323], the TCP\n   sender suffers from
      the retransmission ambiguity problem [Zh86],\n   [KP87].  Therefore, when the
      first acceptable ACK arrives after a\n   spurious timeout, the TCP sender must
      assume that this ACK was sent\n   in response to the retransmit when in fact
      it was sent in response to\n   an original transmit.  Furthermore, the TCP sender
      must further\n   assume that all other segments that were outstanding at that
      point\n   were lost.\n      Note: Except for certain cases where original ACKs
      were lost, the\n      first acceptable ACK cannot carry a DSACK option [RFC2883].\n
      \  Consequently, once the TCP sender's state has been updated after the\n   first
      acceptable ACK has arrived, SND.NXT equals SND.UNA.  This is\n   what causes
      the often unnecessary go-back-N retransmits.  From that\n   point on every arriving
      acceptable ACK that was sent in response to\n   an original transmit will advance
      SND.NXT.  But as long as SND.NXT is\n   smaller than the value that SND.MAX
      had when the timeout occurred,\n   those ACKs will clock out retransmits, whether
      or not the\n   corresponding original transmits were lost.\n   In fact, during
      this phase the TCP sender breaks 'packet\n   conservation' [Jac88].  This is
      because the go-back-N retransmits are\n   sent during slow-start.  For each
      original transmit leaving the\n   network, two retransmits are sent into the
      network as long as SND.NXT\n   does not equal SND.MAX (see [LK00] for more detail).\n
      \  Once a spurious timeout has been detected (upon receipt of an ACK for\n   an
      original transmit), it is safe to let the TCP sender resume the\n   transmission
      with previously unsent data.  Thus, the Eifel response\n   algorithm changes
      the TCP sender's state by setting SND.NXT to\n   SND.MAX.  Note that this step
      is only executed if the variable\n   SpuriousRecovery equals SPUR_TO, which
      in turn requires a detection\n   algorithm such as the Eifel detection algorithm
      [RFC3522] or the F-\n   RTO algorithm [SK04] that detects a spurious retransmit
      based upon\n   receiving an ACK for an original transmit (as opposed to the
      ACK for\n   the retransmit [RFC3708]).\n"
    title: 3.3.  Suppressing the Unnecessary go-back-N Retransmits (Step 8)
  - contents:
    - "3.4.  Reversing the Congestion Control State (Step 9)\n   When a TCP sender
      enters loss recovery, it reduces cwnd and ssthresh.\n   However, once the TCP
      sender detects that the loss recovery has been\n   falsely triggered, this reduction
      proves unnecessary.  We therefore\n   believe that it is safe to revert to the
      previous congestion control\n   state, following the approach of revalidating
      the congestion window\n   as outlined below.  This is unless the acceptable
      ACK signals\n   congestion through the ECN-Echo flag [RFC3168].  In that case,
      the\n   TCP sender MUST refrain from reversing congestion control state.\n   If
      the ECN-Echo flag is not set, cwnd is reset to the sum of the\n   current FlightSize
      and the minimum of bytes_acked and IW.  In some\n   cases, this can mean that
      the first few acceptable ACKs that arrive\n   will not clock out any data segments.
      \ Recall that bytes_acked is the\n   number of bytes that have been acknowledged
      by the acceptable ACK.\n   Note that the value of cwnd must not be changed any
      further for that\n   ACK, and that the value of FlightSize at this point in
      time may be\n   different from the value of FlightSize in step (0).  The value
      of IW\n   puts a limit on the size of the packet burst that the TCP sender may\n
      \  send into the network after the Eifel response algorithm has\n   terminated.
      \ The value of IW is considered an acceptable burst size.\n   It is the amount
      of data that a TCP sender may send into a yet\n   \"unprobed\" network at the
      beginning of a connection.\n   Then ssthresh is reset to the value of pipe_prev.
      \ As a result, the\n   TCP sender either immediately resumes probing the network
      for more\n   bandwidth in congestion avoidance, or it slow-starts to what is\n
      \  considered a safe operating point for the congestion window.\n"
    title: 3.4.  Reversing the Congestion Control State (Step 9)
  - contents:
    - "3.5.  Interworking with the CWV Algorithm (Step 10)\n   An implementation of
      the Congestion Window Validation (CWV) algorithm\n   [RFC2861] could potentially
      misinterpret a delay spike that caused a\n   spurious timeout as a phase where
      the TCP sender had been idle.\n   Therefore, T_last is reset to prevent the
      triggering of the CWV\n   algorithm in this case.\n      Note: The term 'idle'
      implies that the TCP sender has no data\n      outstanding; i.e., all data sent
      has been acknowledged [Jac88].\n      According to this definition, a TCP sender
      is not idle while it is\n      waiting for an acceptable ACK after a timeout.
      \ Unfortunately, the\n      pseudo-code in [RFC2861] does not include a check
      for the\n      condition \"idle\" (SND.UNA == SND.MAX).  We therefore had to
      add\n      step (10) to the Eifel response algorithm.\n"
    title: 3.5.  Interworking with the CWV Algorithm (Step 10)
  - contents:
    - "3.6.  Adapting the Retransmission Timer (Step 11)\n   There is currently only
      one retransmission timer standardized for TCP\n   [RFC2988].  We therefore only
      address that timer explicitly.  Future\n   standards that might define alternatives
      to [RFC2988] should propose\n   similar measures to adapt the conservativeness
      of the retransmission\n   timer.\n   A spurious timeout often results from a
      delay spike, which is a\n   sudden increase of the RTT that usually cannot be
      predicted.  After a\n   delay spike, the RTT may have changed permanently; e.g.,
      due to a\n   path change, or because the available bandwidth on a bandwidth-\n
      \  dominated path has decreased.  This may often occur with wide-area\n   wireless
      access links.  In this case, the RTT estimators (SRTT and\n   RTTVAR) should
      be reinitialized from the first RTT-SAMPLE taken from\n   new data according
      to rule (2.2) of [RFC2988].  That is, from the\n   first RTT-SAMPLE that can
      be derived from an acceptable ACK for data\n   that was previously unsent when
      the spurious timeout occurred.\n   However, a delay spike may only indicate
      a transient phase, after\n   which the RTT returns to its previous range of
      values, or even to\n   smaller values.  Also, a spurious timeout may occur because
      the TCP\n   sender's RTT estimators were only inaccurate enough that the\n   retransmission
      timer expires \"a tad too early\".  We believe that two\n   times the clock
      granularity of the retransmission timer (2 * G) is a\n   reasonable upper bound
      on \"a tad too early\".  Thus, when the new RTO\n   is calculated in step (11),
      we ensure that it is at least (2 * G)\n   greater (see also step (0)) than the
      RTO was before the spurious\n   timeout occurred.\n   Note that other TCP sender
      processing will usually take place between\n   steps (10) and (11).  During
      this phase (i.e., before step (11) has\n   been reached), the RTO is managed
      according to the rules of\n   [RFC2988].  We believe that this is sufficiently
      conservative for the\n   following reasons.  First, the retransmission timer
      is restarted upon\n   the acceptable ACK that was used to detect the spurious
      timeout.  As\n   a result, the delay spike is already implicitly factored in
      for\n   segments outstanding at that time.  This is discussed in more detail\n
      \  in [EL04], where this effect is called the \"RTO offset\".\n   Furthermore,
      if timestamps are enabled, a new and valid RTT-SAMPLE\n   can be derived from
      that acceptable ACK.  This RTT-SAMPLE must be\n   relatively large, as it includes
      the delay spike that caused the\n   spurious timeout.  Consequently, the RTT
      estimators will be updated\n   rather conservatively.  Without timestamps the
      RTO will stay\n   conservatively backed-off due to Karn's algorithm [RFC2988]
      until the\n   first RTT-SAMPLE can be derived from an acceptable ACK for data
      that\n   was previously unsent when the spurious timeout occurred.\n   For the
      new RTO to become effective, the retransmission timer has to\n   be restarted.
      \ This is consistent with [RFC2988], which recommends\n   restarting the retransmission
      timer with the arrival of an acceptable\n   ACK.\n"
    title: 3.6.  Adapting the Retransmission Timer (Step 11)
  title: 3.  The Eifel Response Algorithm
- contents:
  - "4.  Advanced Loss Recovery is Crucial for the Eifel Response Algorithm\n   We
    have studied environments where spurious timeouts and multiple\n   losses from
    the same flight of packets often coincide [GL02], [GL03].\n   In such a case,
    the oldest outstanding segment arrives at the TCP\n   receiver, but one or more
    packets from the remaining outstanding\n   flight are lost.  In those environments,
    end-to-end performance\n   suffers if the Eifel response algorithm is operated
    without an\n   advanced loss recovery scheme such as a SACK-based scheme [RFC3517]\n
    \  or NewReno [RFC3782].  The reason is TCP-Reno's aggressiveness after\n   a
    spurious timeout.  Even though TCP-Reno breaks 'packet\n   conservation' (see
    Section 3.3) when blindly retransmitting all\n   outstanding segments, it usually
    recovers all packets lost from that\n   flight within a single round-trip time.
    \ On the contrary, the more\n   conservative TCP-Reno-with-Eifel is often forced
    into another\n   timeout.  Thus, we recommend that the Eifel response algorithm
    always\n   be operated in combination with [RFC3517] or [RFC3782].  Additional\n
    \  robustness is achieved with the Limited Transmit and Early Retransmit\n   algorithms
    [RFC3042], [AAAB04].\n      Note: The SACK-based scheme we used for our simulations
    in [GL02]\n      and [GL03] is different from the SACK-based scheme that later
    got\n      standardized [RFC3517].  The key difference is that [RFC3517] is\n
    \     more robust to multiple losses from the same flight.  It is less\n      conservative
    in declaring that a packet has left the network, and\n      is therefore less
    dependent on timeouts to recover genuine packet\n      losses.\n   If the NewReno
    algorithm [RFC3782] is used in combination with the\n   Eifel response algorithm,
    step (1) of the NewReno algorithm SHOULD be\n   modified as follows, but only
    if SpuriousRecovery equals SPUR_TO:\n      (1)  Three duplicate ACKs:\n           When
    the third duplicate ACK is received and the sender is\n           not already
    in the Fast Recovery procedure, go to step 1A.\n   That is, the entire step 1B
    of the NewReno algorithm is obsolete\n   because step (8) of the Eifel response
    algorithm avoids the case\n   where three duplicate ACKs result from unnecessary
    go-back-N\n   retransmits after a timeout.  Step (8) of the Eifel response\n   algorithm
    avoids such unnecessary go-back-N retransmits in the first\n   place.  However,
    recall that step (8) is only executed if the\n   variable SpuriousRecovery equals
    SPUR_TO, which in turn requires a\n   detection algorithm, such as the Eifel detection
    algorithm [RFC3522]\n   or the F-RTO algorithm [SK04], that detects a spurious
    retransmit\n   based upon receiving an ACK for an original transmit (as opposed
    to\n   the ACK for the retransmit [RFC3708]).\n"
  title: 4.  Advanced Loss Recovery is Crucial for the Eifel Response Algorithm
- contents:
  - "5.  Security Considerations\n   There is a risk that a detection algorithm is
    fooled by spoofed ACKs\n   that make genuine retransmits appear to the TCP sender
    as spurious\n   retransmits.  When such a detection algorithm is run together
    with\n   the Eifel response algorithm, this could effectively disable\n   congestion
    control at the TCP sender.  Should this become a concern,\n   the Eifel response
    algorithm SHOULD only be run together with\n   detection algorithms that are known
    to be safe against such \"ACK\n   spoofing attacks\".\n   For example, the safe
    variant of the Eifel detection algorithm\n   [RFC3522], is a reliable method to
    protect against this risk.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  Acknowledgements\n   Many thanks to Keith Sklower, Randy Katz, Michael Meyer,
    Stephan\n   Baucke, Sally Floyd, Vern Paxson, Mark Allman, Ethan Blanton, Pasi\n
    \  Sarolahti, Alexey Kuznetsov, and Yogesh Swami for many discussions\n   that
    contributed to this work.\n"
  title: 6.  Acknowledgements
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2581] Allman, M., Paxson, V., and W. Stevens,
      \"TCP Congestion\n             Control\", RFC 2581, April 1999.\n   [RFC3390]
      Allman, M., Floyd, S., and C. Partridge, \"Increasing TCP's\n             Initial
      Window\", RFC 3390, October 2002.\n   [RFC2119] Bradner, S., \"Key words for
      use in RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC3782] Floyd, S., Henderson, T., and A. Gurtov, \"The NewReno\n
      \            Modification to TCP's Fast Recovery Algorithm\", RFC 3782,\n             April
      2004.\n   [RFC2861] Handley, M., Padhye, J., and S. Floyd, \"TCP Congestion\n
      \            Window Validation\", RFC 2861, June 2000.\n   [RFC3522] Ludwig,
      R. and M. Meyer, \"The Eifel Detection Algorithm for\n             TCP\", RFC
      3522, April 2003.\n   [RFC2988] Paxson, V. and M. Allman, \"Computing TCP's
      Retransmission\n             Timer\", RFC 2988, November 2000.\n   [RFC793]
      \ Postel, J., \"Transmission Control Protocol\", STD 7, RFC\n             793,
      September 1981.\n   [RFC3168] Ramakrishnan, K., Floyd, S., and D. Black, \"The
      Addition of\n             Explicit Congestion Notification (ECN) to IP\", RFC
      3168,\n             September 2001.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC3042] Allman, M., Balakrishnan, H., and
      S. Floyd, \"Enhancing\n             TCP's Loss Recovery Using Limited Transmit\",
      RFC 3042,\n             January 2001.\n   [AAAB04]  Allman, M., Avrachenkov,
      K., Ayesta, U., and J. Blanton,\n             Early Retransmit for TCP and SCTP,
      Work in Progress, July\n             2004.\n   [BA02]    Blanton, E. and M.
      Allman, On Making TCP More Robust to\n             Packet Reordering, ACM Computer
      Communication Review, Vol.\n             32, No. 1, January 2002.\n   [RFC3708]
      Blanton, E. and M. Allman, \"Using TCP Duplicate Selective\n             Acknowledgement
      (DSACKs) and Stream Control Transmission\n             Protocol (SCTP) Duplicate
      Transmission Sequence Numbers\n             (TSNs) to Detect Spurious Retransmissions\",
      RFC 3708,\n             February 2004.\n   [RFC3517] Blanton, E., Allman, M.,
      Fall, K., and L. Wang, \"A\n             Conservative Selective Acknowledgment
      (SACK)-based Loss\n             Recovery Algorithm for TCP\", RFC 3517, April
      2003.\n   [EL04]    Ekstrom, H. and R. Ludwig, The Peak-Hopper: A New End-to-\n
      \            End Retransmission Timer for Reliable Unicast Transport, In\n             Proceedings
      of IEEE INFOCOM 04, March 2004.\n   [RFC2883] Floyd, S., Mahdavi, J., Mathis,
      M., and M. Podolsky, \"An\n             Extension to the Selective Acknowledgement
      (SACK) Option\n             for TCP\", RFC 2883, July 2000.\n   [GL02]    Gurtov,
      A. and R. Ludwig, Evaluating the Eifel Algorithm\n             for TCP in a
      GPRS Network, In Proceedings of the European\n             Wireless Conference,
      February 2002.\n   [GL03]    Gurtov, A. and R. Ludwig, Responding to Spurious
      Timeouts\n             in TCP, In Proceedings of IEEE INFOCOM 03, April 2003.\n
      \  [Jac88]   Jacobson, V., Congestion Avoidance and Control, In\n             Proceedings
      of ACM SIGCOMM 88.\n   [RFC1323] Jacobson, V., Braden, R., and D. Borman, \"TCP
      Extensions\n             for High Performance\", RFC 1323, May 1992.\n   [KP87]
      \   Karn, P. and C. Partridge, Improving Round-Trip Time\n             Estimates
      in Reliable Transport Protocols, In Proceedings\n             of ACM SIGCOMM
      87.\n   [LK00]    Ludwig, R. and R. H. Katz, The Eifel Algorithm: Making TCP\n
      \            Robust Against Spurious Retransmissions, ACM Computer\n             Communication
      Review, Vol. 30, No. 1, January 2000.\n   [SK04]    Sarolahti, P. and M. Kojo,
      F-RTO: An Algorithm for\n             Detecting Spurious Retransmission Timeouts
      with TCP and\n             SCTP, Work in Progress, November 2004.\n   [WS95]
      \   Wright, G. R. and W. R. Stevens, TCP/IP Illustrated, Volume\n             2
      (The Implementation), Addison Wesley, January 1995.\n   [Zh86]    Zhang, L.,
      Why TCP Timers Don't Work Well, In Proceedings\n             of ACM SIGCOMM
      88.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Authors' Addresses\n   Reiner Ludwig\n   Ericsson Research (EDD)\n   Ericsson
    Allee 1\n   52134 Herzogenrath, Germany\n   EMail: Reiner.Ludwig@ericsson.com\n
    \  Andrei Gurtov\n   Helsinki Institute for Information Technology (HIIT)\n   P.O.
    Box 9800, FIN-02015\n   HUT, Finland\n   EMail: andrei.gurtov@cs.helsinki.fi\n
    \  Homepage: http://www.cs.helsinki.fi/u/gurtov\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the IETF's procedures with respect
    to rights in IETF Documents can\n   be found in BCP 78 and BCP 79.\n   Copies
    of IPR disclosures made to the IETF Secretariat and any\n   assurances of licenses
    to be made available, or the result of an\n   attempt made to obtain a general
    license or permission for the use of\n   such proprietary rights by implementers
    or users of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
