- title: __initial_text__
  contents:
  - "                Internet X.509 Public Key Infrastructure\n       Certificate\
    \ and Certificate Revocation List (CRL) Profile\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo profiles the X.509 v3 certificate and X.509 v2 Certificate\n\
    \   Revocation List (CRL) for use in the Internet.  An overview of this\n   approach\
    \ and model are provided as an introduction.  The X.509 v3\n   certificate format\
    \ is described in detail, with additional\n   information regarding the format\
    \ and semantics of Internet name\n   forms.  Standard certificate extensions are\
    \ described and two\n   Internet-specific extensions are defined.  A set of required\n\
    \   certificate extensions is specified.  The X.509 v2 CRL format is\n   described\
    \ in detail, and required extensions are defined.  An\n   algorithm for X.509\
    \ certification path validation is described.  An\n   ASN.1 module and examples\
    \ are provided in the appendices.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   2  Requirements and Assumptions  . . . . . . . . . . . . . . \
    \  5\n   2.1  Communication and Topology  . . . . . . . . . . . . . .   6\n  \
    \ 2.2  Acceptability Criteria  . . . . . . . . . . . . . . . .   6\n   2.3  User\
    \ Expectations . . . . . . . . . . . . . . . . . . .   7\n   2.4  Administrator\
    \ Expectations  . . . . . . . . . . . . . .   7\n   3  Overview of Approach  .\
    \ . . . . . . . . . . . . . . . . .   7\n   3.1  X.509 Version 3 Certificate .\
    \ . . . . . . . . . . . . .   8\n   3.2  Certification Paths and Trust . . . .\
    \ . . . . . . . . .   9\n   3.3  Revocation  . . . . . . . . . . . . . . . . .\
    \ . . . . .  11\n   3.4  Operational Protocols . . . . . . . . . . . . . . . .\
    \ .  13\n   3.5  Management Protocols  . . . . . . . . . . . . . . . . .  13\n\
    \   4  Certificate and Certificate Extensions Profile  . . . . .  14\n   4.1 \
    \ Basic Certificate Fields  . . . . . . . . . . . . . . .  15\n   4.1.1  Certificate\
    \ Fields  . . . . . . . . . . . . . . . . .  16\n   4.1.1.1  tbsCertificate  .\
    \ . . . . . . . . . . . . . . . . .  16\n   4.1.1.2  signatureAlgorithm  . . .\
    \ . . . . . . . . . . . . .  16\n   4.1.1.3  signatureValue  . . . . . . . . .\
    \ . . . . . . . . .  16\n   4.1.2  TBSCertificate  . . . . . . . . . . . . . .\
    \ . . . . .  17\n   4.1.2.1  Version . . . . . . . . . . . . . . . . . . . . .\
    \ .  17\n   4.1.2.2  Serial number . . . . . . . . . . . . . . . . . . .  17\n\
    \   4.1.2.3  Signature . . . . . . . . . . . . . . . . . . . . .  18\n   4.1.2.4\
    \  Issuer  . . . . . . . . . . . . . . . . . . . . . .  18\n   4.1.2.5  Validity\
    \  . . . . . . . . . . . . . . . . . . . . .  22\n   4.1.2.5.1  UTCTime . . .\
    \ . . . . . . . . . . . . . . . . . .  22\n   4.1.2.5.2  GeneralizedTime . . .\
    \ . . . . . . . . . . . . . .  22\n   4.1.2.6  Subject . . . . . . . . . . . .\
    \ . . . . . . . . . .  23\n   4.1.2.7  Subject Public Key Info . . . . . . . .\
    \ . . . . . .  24\n   4.1.2.8  Unique Identifiers  . . . . . . . . . . . . . .\
    \ . .  24\n   4.1.2.9 Extensions . . . . . . . . . . . . . . . . . . . . .  24\n\
    \   4.2  Certificate Extensions  . . . . . . . . . . . . . . . .  24\n   4.2.1\
    \  Standard Extensions . . . . . . . . . . . . . . . . .  25\n   4.2.1.1  Authority\
    \ Key Identifier  . . . . . . . . . . . . .  26\n   4.2.1.2  Subject Key Identifier\
    \  . . . . . . . . . . . . . .  27\n   4.2.1.3  Key Usage . . . . . . . . . .\
    \ . . . . . . . . . . .  28\n   4.2.1.4  Private Key Usage Period  . . . . . .\
    \ . . . . . . .  29\n   4.2.1.5  Certificate Policies  . . . . . . . . . . . .\
    \ . . .  30\n   4.2.1.6  Policy Mappings . . . . . . . . . . . . . . . . . . \
    \ 33\n   4.2.1.7  Subject Alternative Name  . . . . . . . . . . . . .  33\n  \
    \ 4.2.1.8  Issuer Alternative Name . . . . . . . . . . . . . .  36\n   4.2.1.9\
    \  Subject Directory Attributes  . . . . . . . . . . .  36\n   4.2.1.10  Basic\
    \ Constraints  . . . . . . . . . . . . . . . .  36\n   4.2.1.11  Name Constraints\
    \ . . . . . . . . . . . . . . . . .  37\n   4.2.1.12  Policy Constraints . . .\
    \ . . . . . . . . . . . . .  40\n   4.2.1.13  Extended Key Usage . . . . . . .\
    \ . . . . . . . . .  40\n   4.2.1.14  CRL Distribution Points  . . . . . . . .\
    \ . . . . .  42\n   4.2.1.15  Inhibit Any-Policy . . . . . . . . . . . . . . .\
    \ .  44\n   4.2.1.16  Freshest CRL . . . . . . . . . . . . . . . . . . .  44\n\
    \   4.2.2  Internet Certificate Extensions . . . . . . . . . . .  45\n   4.2.2.1\
    \  Authority Information Access  . . . . . . . . . . .  45\n   4.2.2.2  Subject\
    \ Information Access  . . . . . . . . . . . .  46\n   5  CRL and CRL Extensions\
    \ Profile  . . . . . . . . . . . . .  48\n   5.1  CRL Fields  . . . . . . . .\
    \ . . . . . . . . . . . . . .  49\n   5.1.1  CertificateList Fields  . . . . .\
    \ . . . . . . . . . .  50\n   5.1.1.1  tbsCertList . . . . . . . . . . . . . .\
    \ . . . . . .  50\n   5.1.1.2  signatureAlgorithm  . . . . . . . . . . . . . .\
    \ . .  50\n   5.1.1.3  signatureValue  . . . . . . . . . . . . . . . . . .  51\n\
    \   5.1.2  Certificate List \"To Be Signed\" . . . . . . . . . . .  51\n   5.1.2.1\
    \  Version . . . . . . . . . . . . . . . . . . . . . .  52\n   5.1.2.2  Signature\
    \ . . . . . . . . . . . . . . . . . . . . .  52\n   5.1.2.3  Issuer Name . . .\
    \ . . . . . . . . . . . . . . . . .  52\n   5.1.2.4  This Update . . . . . . .\
    \ . . . . . . . . . . . . .  52\n   5.1.2.5  Next Update . . . . . . . . . . .\
    \ . . . . . . . . .  53\n   5.1.2.6  Revoked Certificates  . . . . . . . . . .\
    \ . . . . .  53\n   5.1.2.7  Extensions  . . . . . . . . . . . . . . . . . . .\
    \ .  53\n   5.2  CRL Extensions  . . . . . . . . . . . . . . . . . . . .  53\n\
    \   5.2.1  Authority Key Identifier  . . . . . . . . . . . . . .  54\n   5.2.2\
    \  Issuer Alternative Name . . . . . . . . . . . . . . .  54\n   5.2.3  CRL Number\
    \  . . . . . . . . . . . . . . . . . . . . .  55\n   5.2.4  Delta CRL Indicator\
    \ . . . . . . . . . . . . . . . . .  55\n   5.2.5  Issuing Distribution Point\
    \  . . . . . . . . . . . . .  58\n   5.2.6  Freshest CRL  . . . . . . . . . .\
    \ . . . . . . . . . .  59\n   5.3  CRL Entry Extensions  . . . . . . . . . . .\
    \ . . . . . .  60\n   5.3.1  Reason Code . . . . . . . . . . . . . . . . . . .\
    \ . .  60\n   5.3.2  Hold Instruction Code . . . . . . . . . . . . . . . .  61\n\
    \   5.3.3  Invalidity Date . . . . . . . . . . . . . . . . . . .  62\n   5.3.4\
    \  Certificate Issuer  . . . . . . . . . . . . . . . . .  62\n   6  Certificate\
    \ Path Validation . . . . . . . . . . . . . . .  62\n   6.1  Basic Path Validation\
    \ . . . . . . . . . . . . . . . . .  63\n   6.1.1  Inputs  . . . . . . . . . .\
    \ . . . . . . . . . . . . .  66\n   6.1.2  Initialization  . . . . . . . . . .\
    \ . . . . . . . . .  67\n   6.1.3  Basic Certificate Processing  . . . . . . .\
    \ . . . . .  70\n   6.1.4  Preparation for Certificate i+1 . . . . . . . . . .\
    \ .  75\n   6.1.5  Wrap-up procedure . . . . . . . . . . . . . . . . . .  78\n\
    \   6.1.6  Outputs . . . . . . . . . . . . . . . . . . . . . . .  80\n   6.2 \
    \ Extending Path Validation . . . . . . . . . . . . . . .  80\n   6.3  CRL Validation\
    \  . . . . . . . . . . . . . . . . . . . .  81\n   6.3.1  Revocation Inputs .\
    \ . . . . . . . . . . . . . . . . .  82\n   6.3.2  Initialization and Revocation\
    \ State Variables . . . .  82\n   6.3.3  CRL Processing  . . . . . . . . . . .\
    \ . . . . . . . .  83\n   7  References  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  86\n   8  Intellectual Property Rights  . . . . . . . . . . . . . .\
    \  88\n   9  Security Considerations . . . . . . . . . . . . . . . . .  89\n \
    \  Appendix A.  ASN.1 Structures and OIDs . . . . . . . . . . .  92\n   A.1 Explicitly\
    \ Tagged Module, 1988 Syntax  . . . . . . . . .  92\n   A.2 Implicitly Tagged\
    \ Module, 1988 Syntax  . . . . . . . . . 105\n   Appendix B.  ASN.1 Notes . .\
    \ . . . . . . . . . . . . . . . . 112\n   Appendix C.  Examples  . . . . . . .\
    \ . . . . . . . . . . . . 115\n   C.1  DSA Self-Signed Certificate . . . . . .\
    \ . . . . . . . . 115\n   C.2  End Entity Certificate Using DSA  . . . . . . .\
    \ . . . . 119\n   C.3  End Entity Certificate Using RSA  . . . . . . . . . . .\
    \ 122\n   C.4  Certificate Revocation List . . . . . . . . . . . . . . 126\n \
    \  Author Addresses . . . . . . . . . . . . . . . . . . . . . . 128\n   Full Copyright\
    \ Statement . . . . . . . . . . . . . . . . . . 129\n"
- title: 1  Introduction
  contents:
  - "1  Introduction\n   This specification is one part of a family of standards for\
    \ the X.509\n   Public Key Infrastructure (PKI) for the Internet.\n   This specification\
    \ profiles the format and semantics of certificates\n   and certificate revocation\
    \ lists (CRLs) for the Internet PKI.\n   Procedures are described for processing\
    \ of certification paths in the\n   Internet environment.  Finally, ASN.1 modules\
    \ are provided in the\n   appendices for all data structures defined or referenced.\n\
    \   Section 2 describes Internet PKI requirements, and the assumptions\n   which\
    \ affect the scope of this document.  Section 3 presents an\n   architectural\
    \ model and describes its relationship to previous IETF\n   and ISO/IEC/ITU-T\
    \ standards.  In particular, this document's\n   relationship with the IETF PEM\
    \ specifications and the ISO/IEC/ITU-T\n   X.509 documents are described.\n  \
    \ Section 4 profiles the X.509 version 3 certificate, and section 5\n   profiles\
    \ the X.509 version 2 CRL.  The profiles include the\n   identification of ISO/IEC/ITU-T\
    \ and ANSI extensions which may be\n   useful in the Internet PKI.  The profiles\
    \ are presented in the 1988\n   Abstract Syntax Notation One (ASN.1) rather than\
    \ the 1997 ASN.1\n   syntax used in the most recent ISO/IEC/ITU-T standards.\n\
    \   Section 6 includes certification path validation procedures.  These\n   procedures\
    \ are based upon the ISO/IEC/ITU-T definition.\n   Implementations are REQUIRED\
    \ to derive the same results but are not\n   required to use the specified procedures.\n\
    \   Procedures for identification and encoding of public key materials\n   and\
    \ digital signatures are defined in [PKIXALGS].  Implementations of\n   this specification\
    \ are not required to use any particular\n   cryptographic algorithms.  However,\
    \ conforming implementations which\n   use the algorithms identified in [PKIXALGS]\
    \ MUST identify and encode\n   the public key materials and digital signatures\
    \ as described in that\n   specification.\n   Finally, three appendices are provided\
    \ to aid implementers.  Appendix\n   A contains all ASN.1 structures defined or\
    \ referenced within this\n   specification.  As above, the material is presented\
    \ in the 1988\n   ASN.1.  Appendix B contains notes on less familiar features\
    \ of the\n   ASN.1 notation used within this specification.  Appendix C contains\n\
    \   examples of a conforming certificate and a conforming CRL.\n   This specification\
    \ obsoletes RFC 2459.  This specification differs\n   from RFC 2459 in five basic\
    \ areas:\n      * To promote interoperable implementations, a detailed algorithm\n\
    \      for certification path validation is included in section 6.1 of\n     \
    \ this specification; RFC 2459 provided only a high-level\n      description of\
    \ path validation.\n      * An algorithm for determining the status of a certificate\
    \ using\n      CRLs is provided in section 6.3 of this specification.  This\n\
    \      material was not present in RFC 2459.\n      * To accommodate new usage\
    \ models, detailed information describing\n      the use of delta CRLs is provided\
    \ in Section 5 of this\n      specification.\n      * Identification and encoding\
    \ of public key materials and digital\n      signatures are not included in this\
    \ specification, but are now\n      described in a companion specification [PKIXALGS].\n\
    \      * Four additional extensions are specified: three certificate\n      extensions\
    \ and one CRL extension.  The certificate extensions are\n      subject info access,\
    \ inhibit any-policy, and freshest CRL.  The\n      freshest CRL extension is\
    \ also defined as a CRL extension.\n      * Throughout the specification, clarifications\
    \ have been\n      introduced to enhance consistency with the ITU-T X.509\n  \
    \    specification.  X.509 defines the certificate and CRL format as\n      well\
    \ as many of the extensions that appear in this specification.\n      These changes\
    \ were introduced to improve the likelihood of\n      interoperability between\
    \ implementations based on this\n      specification with implementations based\
    \ on the ITU-T\n      specification.\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119.\n"
- title: 2  Requirements and Assumptions
  contents:
  - "2  Requirements and Assumptions\n   The goal of this specification is to develop\
    \ a profile to facilitate\n   the use of X.509 certificates within Internet applications\
    \ for those\n   communities wishing to make use of X.509 technology.  Such\n \
    \  applications may include WWW, electronic mail, user authentication,\n   and\
    \ IPsec.  In order to relieve some of the obstacles to using X.509\n   certificates,\
    \ this document defines a profile to promote the\n   development of certificate\
    \ management systems; development of\n   application tools; and interoperability\
    \ determined by policy.\n   Some communities will need to supplement, or possibly\
    \ replace, this\n   profile in order to meet the requirements of specialized application\n\
    \   domains or environments with additional authorization, assurance, or\n   operational\
    \ requirements.  However, for basic applications, common\n   representations of\
    \ frequently used attributes are defined so that\n   application developers can\
    \ obtain necessary information without\n   regard to the issuer of a particular\
    \ certificate or certificate\n   revocation list (CRL).\n   A certificate user\
    \ should review the certificate policy generated by\n   the certification authority\
    \ (CA) before relying on the authentication\n   or non-repudiation services associated\
    \ with the public key in a\n   particular certificate.  To this end, this standard\
    \ does not\n   prescribe legally binding rules or duties.\n   As supplemental\
    \ authorization and attribute management tools emerge,\n   such as attribute certificates,\
    \ it may be appropriate to limit the\n   authenticated attributes that are included\
    \ in a certificate.  These\n   other management tools may provide more appropriate\
    \ methods of\n   conveying many authenticated attributes.\n"
- title: 2.1  Communication and Topology
  contents:
  - "2.1  Communication and Topology\n   The users of certificates will operate in\
    \ a wide range of\n   environments with respect to their communication topology,\
    \ especially\n   users of secure electronic mail.  This profile supports users\
    \ without\n   high bandwidth, real-time IP connectivity, or high connection\n\
    \   availability.  In addition, the profile allows for the presence of\n   firewall\
    \ or other filtered communication.\n   This profile does not assume the deployment\
    \ of an X.500 Directory\n   system or a LDAP directory system.  The profile does\
    \ not prohibit the\n   use of an X.500 Directory or a LDAP directory; however,\
    \ any means of\n   distributing certificates and certificate revocation lists\
    \ (CRLs) may\n   be used.\n"
- title: 2.2  Acceptability Criteria
  contents:
  - "2.2  Acceptability Criteria\n   The goal of the Internet Public Key Infrastructure\
    \ (PKI) is to meet\n   the needs of deterministic, automated identification, authentication,\n\
    \   access control, and authorization functions.  Support for these\n   services\
    \ determines the attributes contained in the certificate as\n   well as the ancillary\
    \ control information in the certificate such as\n   policy data and certification\
    \ path constraints.\n"
- title: 2.3  User Expectations
  contents:
  - "2.3  User Expectations\n   Users of the Internet PKI are people and processes\
    \ who use client\n   software and are the subjects named in certificates.  These\
    \ uses\n   include readers and writers of electronic mail, the clients for WWW\n\
    \   browsers, WWW servers, and the key manager for IPsec within a router.\n  \
    \ This profile recognizes the limitations of the platforms these users\n   employ\
    \ and the limitations in sophistication and attentiveness of the\n   users themselves.\
    \  This manifests itself in minimal user\n   configuration responsibility (e.g.,\
    \ trusted CA keys, rules), explicit\n   platform usage constraints within the\
    \ certificate, certification path\n   constraints which shield the user from many\
    \ malicious actions, and\n   applications which sensibly automate validation functions.\n"
- title: 2.4  Administrator Expectations
  contents:
  - "2.4  Administrator Expectations\n   As with user expectations, the Internet PKI\
    \ profile is structured to\n   support the individuals who generally operate CAs.\
    \  Providing\n   administrators with unbounded choices increases the chances that\
    \ a\n   subtle CA administrator mistake will result in broad compromise.\n   Also,\
    \ unbounded choices greatly complicate the software that process\n   and validate\
    \ the certificates created by the CA.\n"
- title: 3  Overview of Approach
  contents:
  - "3  Overview of Approach\n   Following is a simplified view of the architectural\
    \ model assumed by\n   the PKIX specifications.\n   The components in this model\
    \ are:\n   end entity: user of PKI certificates and/or end user system that is\n\
    \               the subject of a certificate;\n   CA:         certification authority;\n\
    \   RA:         registration authority, i.e., an optional system to which\n  \
    \             a CA delegates certain management functions;\n   CRL issuer: an\
    \ optional system to which a CA delegates the\n               publication of certificate\
    \ revocation lists;\n   repository: a system or collection of distributed systems\
    \ that stores\n               certificates and CRLs and serves as a means of\n\
    \               distributing these certificates and CRLs to end entities.\n  \
    \ Note that an Attribute Authority (AA) might also choose to delegate\n   the\
    \ publication of CRLs to a CRL issuer.\n   +---+\n   | C |                   \
    \    +------------+\n   | e | <-------------------->| End entity |\n   | r | \
    \      Operational     +------------+\n   | t |       transactions          ^\n\
    \   | i |      and management         |  Management\n   | f |       transactions\
    \          |  transactions        PKI\n   | i |                             |\
    \                     users\n   | c |                             v\n   | a |\
    \ =======================  +--+------------+  ==============\n   | t |       \
    \                   ^               ^\n   | e |                          |   \
    \            |         PKI\n   |   |                          v              \
    \ |      management\n   | & |                       +------+           |     \
    \  entities\n   |   | <---------------------|  RA  |<----+     |\n   | C |  Publish\
    \ certificate  +------+     |     |\n   | R |                                \
    \    |     |\n   | L |                                    |     |\n   |   |  \
    \                                  v     v\n   | R |                         \
    \       +------------+\n   | e | <------------------------------|     CA     |\n\
    \   | p |   Publish certificate          +------------+\n   | o |   Publish CRL\
    \                     ^      ^\n   | s |                                   | \
    \     |  Management\n   | i |                +------------+     |      |  transactions\n\
    \   | t | <--------------| CRL Issuer |<----+      |\n   | o |   Publish CRL \
    \ +------------+            v\n   | r |                                      +------+\n\
    \   | y |                                      |  CA  |\n   +---+            \
    \                          +------+\n                      Figure 1 - PKI Entities\n"
- title: 3.1  X.509 Version 3 Certificate
  contents:
  - "3.1  X.509 Version 3 Certificate\n   Users of a public key require confidence\
    \ that the associated private\n   key is owned by the correct remote subject (person\
    \ or system) with\n   which an encryption or digital signature mechanism will\
    \ be used.\n   This confidence is obtained through the use of public key\n   certificates,\
    \ which are data structures that bind public key values\n   to subjects.  The\
    \ binding is asserted by having a trusted CA\n   digitally sign each certificate.\
    \  The CA may base this assertion upon\n   technical means (a.k.a., proof of possession\
    \ through a challenge-\n   response protocol), presentation of the private key,\
    \ or on an\n   assertion by the subject.  A certificate has a limited valid lifetime\n\
    \   which is indicated in its signed contents.  Because a certificate's\n   signature\
    \ and timeliness can be independently checked by a\n   certificate-using client,\
    \ certificates can be distributed via\n   untrusted communications and server\
    \ systems, and can be cached in\n   unsecured storage in certificate-using systems.\n\
    \   ITU-T X.509 (formerly CCITT X.509) or ISO/IEC 9594-8, which was first\n  \
    \ published in 1988 as part of the X.500 Directory recommendations,\n   defines\
    \ a standard certificate format [X.509].  The certificate\n   format in the 1988\
    \ standard is called the version 1 (v1) format.\n   When X.500 was revised in\
    \ 1993, two more fields were added, resulting\n   in the version 2 (v2) format.\n\
    \   The Internet Privacy Enhanced Mail (PEM) RFCs, published in 1993,\n   include\
    \ specifications for a public key infrastructure based on X.509\n   v1 certificates\
    \ [RFC 1422].  The experience gained in attempts to\n   deploy RFC 1422 made it\
    \ clear that the v1 and v2 certificate formats\n   are deficient in several respects.\
    \  Most importantly, more fields\n   were needed to carry information which PEM\
    \ design and implementation\n   experience had proven necessary.  In response\
    \ to these new\n   requirements, ISO/IEC, ITU-T and ANSI X9 developed the X.509\
    \ version\n   3 (v3) certificate format.  The v3 format extends the v2 format\
    \ by\n   adding provision for additional extension fields.  Particular\n   extension\
    \ field types may be specified in standards or may be defined\n   and registered\
    \ by any organization or community.  In June 1996,\n   standardization of the\
    \ basic v3 format was completed [X.509].\n   ISO/IEC, ITU-T, and ANSI X9 have\
    \ also developed standard extensions\n   for use in the v3 extensions field [X.509][X9.55].\
    \  These extensions\n   can convey such data as additional subject identification\n\
    \   information, key attribute information, policy information, and\n   certification\
    \ path constraints.\n   However, the ISO/IEC, ITU-T, and ANSI X9 standard extensions\
    \ are very\n   broad in their applicability.  In order to develop interoperable\n\
    \   implementations of X.509 v3 systems for Internet use, it is necessary\n  \
    \ to specify a profile for use of the X.509 v3 extensions tailored for\n   the\
    \ Internet.  It is one goal of this document to specify a profile\n   for Internet\
    \ WWW, electronic mail, and IPsec applications.\n   Environments with additional\
    \ requirements may build on this profile\n   or may replace it.\n"
- title: 3.2  Certification Paths and Trust
  contents:
  - "3.2  Certification Paths and Trust\n   A user of a security service requiring\
    \ knowledge of a public key\n   generally needs to obtain and validate a certificate\
    \ containing the\n   required public key.  If the public key user does not already\
    \ hold an\n   assured copy of the public key of the CA that signed the certificate,\n\
    \   the CA's name, and related information (such as the validity period\n   or\
    \ name constraints), then it might need an additional certificate to\n   obtain\
    \ that public key.  In general, a chain of multiple certificates\n   may be needed,\
    \ comprising a certificate of the public key owner (the\n   end entity) signed\
    \ by one CA, and zero or more additional\n   certificates of CAs signed by other\
    \ CAs.  Such chains, called\n   certification paths, are required because a public\
    \ key user is only\n   initialized with a limited number of assured CA public\
    \ keys.\n   There are different ways in which CAs might be configured in order\n\
    \   for public key users to be able to find certification paths.  For\n   PEM,\
    \ RFC 1422 defined a rigid hierarchical structure of CAs.  There\n   are three\
    \ types of PEM certification authority:\n      (a)  Internet Policy Registration\
    \ Authority (IPRA):  This\n      authority, operated under the auspices of the\
    \ Internet Society,\n      acts as the root of the PEM certification hierarchy\
    \ at level 1.\n      It issues certificates only for the next level of authorities,\n\
    \      PCAs.  All certification paths start with the IPRA.\n      (b)  Policy\
    \ Certification Authorities (PCAs):  PCAs are at level 2\n      of the hierarchy,\
    \ each PCA being certified by the IPRA.  A PCA\n      shall establish and publish\
    \ a statement of its policy with respect\n      to certifying users or subordinate\
    \ certification authorities.\n      Distinct PCAs aim to satisfy different user\
    \ needs.  For example,\n      one PCA (an organizational PCA) might support the\
    \ general\n      electronic mail needs of commercial organizations, and another\
    \ PCA\n      (a high-assurance PCA) might have a more stringent policy designed\n\
    \      for satisfying legally binding digital signature requirements.\n      (c)\
    \  Certification Authorities (CAs):  CAs are at level 3 of the\n      hierarchy\
    \ and can also be at lower levels.  Those at level 3 are\n      certified by PCAs.\
    \  CAs represent, for example, particular\n      organizations, particular organizational\
    \ units (e.g., departments,\n      groups, sections), or particular geographical\
    \ areas.\n   RFC 1422 furthermore has a name subordination rule which requires\n\
    \   that a CA can only issue certificates for entities whose names are\n   subordinate\
    \ (in the X.500 naming tree) to the name of the CA itself.\n   The trust associated\
    \ with a PEM certification path is implied by the\n   PCA name.  The name subordination\
    \ rule ensures that CAs below the PCA\n   are sensibly constrained as to the set\
    \ of subordinate entities they\n   can certify (e.g., a CA for an organization\
    \ can only certify entities\n   in that organization's name tree).  Certificate\
    \ user systems are able\n   to mechanically check that the name subordination\
    \ rule has been\n   followed.\n   The RFC 1422 uses the X.509 v1 certificate formats.\
    \  The limitations\n   of X.509 v1 required imposition of several structural restrictions\
    \ to\n   clearly associate policy information or restrict the utility of\n   certificates.\
    \  These restrictions included:\n      (a)  a pure top-down hierarchy, with all\
    \ certification paths\n      starting from IPRA;\n      (b)  a naming subordination\
    \ rule restricting the names of a CA's\n      subjects; and\n      (c)  use of\
    \ the PCA concept, which requires knowledge of\n      individual PCAs to be built\
    \ into certificate chain verification\n      logic.  Knowledge of individual PCAs\
    \ was required to determine if\n      a chain could be accepted.\n   With X.509\
    \ v3, most of the requirements addressed by RFC 1422 can be\n   addressed using\
    \ certificate extensions, without a need to restrict\n   the CA structures used.\
    \  In particular, the certificate extensions\n   relating to certificate policies\
    \ obviate the need for PCAs and the\n   constraint extensions obviate the need\
    \ for the name subordination\n   rule.  As a result, this document supports a\
    \ more flexible\n   architecture, including:\n      (a)  Certification paths start\
    \ with a public key of a CA in a\n      user's own domain, or with the public\
    \ key of the top of a\n      hierarchy.  Starting with the public key of a CA\
    \ in a user's own\n      domain has certain advantages.  In some environments,\
    \ the local\n      domain is the most trusted.\n      (b)  Name constraints may\
    \ be imposed through explicit inclusion of\n      a name constraints extension\
    \ in a certificate, but are not\n      required.\n      (c)  Policy extensions\
    \ and policy mappings replace the PCA\n      concept, which permits a greater\
    \ degree of automation.  The\n      application can determine if the certification\
    \ path is acceptable\n      based on the contents of the certificates instead\
    \ of a priori\n      knowledge of PCAs.  This permits automation of certification\
    \ path\n      processing.\n"
- title: 3.3  Revocation
  contents:
  - "3.3  Revocation\n   When a certificate is issued, it is expected to be in use\
    \ for its\n   entire validity period.  However, various circumstances may cause\
    \ a\n   certificate to become invalid prior to the expiration of the validity\n\
    \   period.  Such circumstances include change of name, change of\n   association\
    \ between subject and CA (e.g., an employee terminates\n   employment with an\
    \ organization), and compromise or suspected\n   compromise of the corresponding\
    \ private key.  Under such\n   circumstances, the CA needs to revoke the certificate.\n\
    \   X.509 defines one method of certificate revocation.  This method\n   involves\
    \ each CA periodically issuing a signed data structure called\n   a certificate\
    \ revocation list (CRL).  A CRL is a time stamped list\n   identifying revoked\
    \ certificates which is signed by a CA or CRL\n   issuer and made freely available\
    \ in a public repository.  Each\n   revoked certificate is identified in a CRL\
    \ by its certificate serial\n   number.  When a certificate-using system uses\
    \ a certificate (e.g.,\n   for verifying a remote user's digital signature), that\
    \ system not\n   only checks the certificate signature and validity but also acquires\n\
    \   a suitably-recent CRL and checks that the certificate serial number\n   is\
    \ not on that CRL.  The meaning of \"suitably-recent\" may vary with\n   local\
    \ policy, but it usually means the most recently-issued CRL.  A\n   new CRL is\
    \ issued on a regular periodic basis (e.g., hourly, daily,\n   or weekly).  An\
    \ entry is added to the CRL as part of the next update\n   following notification\
    \ of revocation.  An entry MUST NOT be removed\n   from the CRL until it appears\
    \ on one regularly scheduled CRL issued\n   beyond the revoked certificate's validity\
    \ period.\n   An advantage of this revocation method is that CRLs may be\n   distributed\
    \ by exactly the same means as certificates themselves,\n   namely, via untrusted\
    \ servers and untrusted communications.\n   One limitation of the CRL revocation\
    \ method, using untrusted\n   communications and servers, is that the time granularity\
    \ of\n   revocation is limited to the CRL issue period.  For example, if a\n \
    \  revocation is reported now, that revocation will not be reliably\n   notified\
    \ to certificate-using systems until all currently issued CRLs\n   are updated\
    \ -- this may be up to one hour, one day, or one week\n   depending on the frequency\
    \ that CRLs are issued.\n   As with the X.509 v3 certificate format, in order\
    \ to facilitate\n   interoperable implementations from multiple vendors, the X.509\
    \ v2 CRL\n   format needs to be profiled for Internet use.  It is one goal of\
    \ this\n   document to specify that profile.  However, this profile does not\n\
    \   require the issuance of CRLs.  Message formats and protocols\n   supporting\
    \ on-line revocation notification are defined in other PKIX\n   specifications.\
    \  On-line methods of revocation notification may be\n   applicable in some environments\
    \ as an alternative to the X.509 CRL.\n   On-line revocation checking may significantly\
    \ reduce the latency\n   between a revocation report and the distribution of the\
    \ information\n   to relying parties.  Once the CA accepts a revocation report\
    \ as\n   authentic and valid, any query to the on-line service will correctly\n\
    \   reflect the certificate validation impacts of the revocation.\n   However,\
    \ these methods impose new security requirements: the\n   certificate validator\
    \ needs to trust the on-line validation service\n   while the repository does\
    \ not need to be trusted.\n"
- title: 3.4  Operational Protocols
  contents:
  - "3.4  Operational Protocols\n   Operational protocols are required to deliver\
    \ certificates and CRLs\n   (or status information) to certificate using client\
    \ systems.\n   Provisions are needed for a variety of different means of certificate\n\
    \   and CRL delivery, including distribution procedures based on LDAP,\n   HTTP,\
    \ FTP, and X.500.  Operational protocols supporting these\n   functions are defined\
    \ in other PKIX specifications.  These\n   specifications may include definitions\
    \ of message formats and\n   procedures for supporting all of the above operational\
    \ environments,\n   including definitions of or references to appropriate MIME\
    \ content\n   types.\n"
- title: 3.5  Management Protocols
  contents:
  - "3.5  Management Protocols\n   Management protocols are required to support on-line\
    \ interactions\n   between PKI user and management entities.  For example, a management\n\
    \   protocol might be used between a CA and a client system with which a\n   key\
    \ pair is associated, or between two CAs which cross-certify each\n   other. \
    \ The set of functions which potentially need to be supported\n   by management\
    \ protocols include:\n      (a)  registration:  This is the process whereby a\
    \ user first makes\n      itself known to a CA (directly, or through an RA), prior\
    \ to that\n      CA issuing  a certificate or certificates for that user.\n  \
    \    (b)  initialization:  Before a client system can operate securely\n     \
    \ it is necessary to install key materials which have the\n      appropriate relationship\
    \ with keys stored elsewhere in the\n      infrastructure.  For example, the client\
    \ needs to be securely\n      initialized with the public key and other assured\
    \ information of\n      the trusted CA(s), to be used in validating certificate\
    \ paths.\n      Furthermore, a client typically needs to be initialized with its\n\
    \      own key pair(s).\n      (c)  certification:  This is the process in which\
    \ a CA issues a\n      certificate for a user's public key, and returns that certificate\n\
    \      to the user's client system and/or posts that certificate in a\n      repository.\n\
    \      (d)  key pair recovery:  As an option, user client key materials\n    \
    \  (e.g., a user's private key used for encryption purposes) may be\n      backed\
    \ up by a CA or a key backup system.  If a user needs to\n      recover these\
    \ backed up key materials (e.g., as a result of a\n      forgotten password or\
    \ a lost key chain file), an on-line protocol\n      exchange may be needed to\
    \ support such recovery.\n      (e)  key pair update:  All key pairs need to be\
    \ updated regularly,\n      i.e., replaced with a new key pair, and new certificates\
    \ issued.\n      (f)  revocation request:  An authorized person advises a CA of\
    \ an\n      abnormal situation requiring certificate revocation.\n      (g)  cross-certification:\
    \  Two CAs exchange information used in\n      establishing a cross-certificate.\
    \  A cross-certificate is a\n      certificate issued by one CA to another CA\
    \ which contains a CA\n      signature key used for issuing certificates.\n  \
    \ Note that on-line protocols are not the only way of implementing the\n   above\
    \ functions.  For all functions there are off-line methods of\n   achieving the\
    \ same result, and this specification does not mandate\n   use of on-line protocols.\
    \  For example, when hardware tokens are\n   used, many of the functions may be\
    \ achieved as part of the physical\n   token delivery.  Furthermore, some of the\
    \ above functions may be\n   combined into one protocol exchange.  In particular,\
    \ two or more of\n   the registration, initialization, and certification functions\
    \ can be\n   combined into one protocol exchange.\n   The PKIX series of specifications\
    \ defines a set of standard message\n   formats supporting the above functions.\
    \  The protocols for conveying\n   these messages in different environments (e.g.,\
    \ e-mail, file\n   transfer, and WWW) are described in those specifications.\n"
- title: 4  Certificate and Certificate Extensions Profile
  contents:
  - "4  Certificate and Certificate Extensions Profile\n   This section presents a\
    \ profile for public key certificates that will\n   foster interoperability and\
    \ a reusable PKI.  This section is based\n   upon the X.509 v3 certificate format\
    \ and the standard certificate\n   extensions defined in [X.509].  The ISO/IEC\
    \ and ITU-T documents use\n   the 1997 version of ASN.1; while this document uses\
    \ the 1988 ASN.1\n   syntax, the encoded certificate and standard extensions are\n\
    \   equivalent.  This section also defines private extensions required to\n  \
    \ support a PKI for the Internet community.\n   Certificates may be used in a\
    \ wide range of applications and\n   environments covering a broad spectrum of\
    \ interoperability goals and\n   a broader spectrum of operational and assurance\
    \ requirements.  The\n   goal of this document is to establish a common baseline\
    \ for generic\n   applications requiring broad interoperability and limited special\n\
    \   purpose requirements.  In particular, the emphasis will be on\n   supporting\
    \ the use of X.509 v3 certificates for informal Internet\n   electronic mail,\
    \ IPsec, and WWW applications.\n"
- title: 4.1  Basic Certificate Fields
  contents:
  - "4.1  Basic Certificate Fields\n   The X.509 v3 certificate basic syntax is as\
    \ follows.  For signature\n   calculation, the data that is to be signed is encoded\
    \ using the ASN.1\n   distinguished encoding rules (DER) [X.690].  ASN.1 DER encoding\
    \ is a\n   tag, length, value encoding system for each element.\n   Certificate\
    \  ::=  SEQUENCE  {\n        tbsCertificate       TBSCertificate,\n        signatureAlgorithm\
    \   AlgorithmIdentifier,\n        signatureValue       BIT STRING  }\n   TBSCertificate\
    \  ::=  SEQUENCE  {\n        version         [0]  EXPLICIT Version DEFAULT v1,\n\
    \        serialNumber         CertificateSerialNumber,\n        signature    \
    \        AlgorithmIdentifier,\n        issuer               Name,\n        validity\
    \             Validity,\n        subject              Name,\n        subjectPublicKeyInfo\
    \ SubjectPublicKeyInfo,\n        issuerUniqueID  [1]  IMPLICIT UniqueIdentifier\
    \ OPTIONAL,\n                             -- If present, version MUST be v2 or\
    \ v3\n        subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n     \
    \                        -- If present, version MUST be v2 or v3\n        extensions\
    \      [3]  EXPLICIT Extensions OPTIONAL\n                             -- If present,\
    \ version MUST be v3\n        }\n   Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)\
    \  }\n   CertificateSerialNumber  ::=  INTEGER\n   Validity ::= SEQUENCE {\n \
    \       notBefore      Time,\n        notAfter       Time }\n   Time ::= CHOICE\
    \ {\n        utcTime        UTCTime,\n        generalTime    GeneralizedTime }\n\
    \   UniqueIdentifier  ::=  BIT STRING\n   SubjectPublicKeyInfo  ::=  SEQUENCE\
    \  {\n        algorithm            AlgorithmIdentifier,\n        subjectPublicKey\
    \     BIT STRING  }\n   Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\n\
    \   Extension  ::=  SEQUENCE  {\n        extnID      OBJECT IDENTIFIER,\n    \
    \    critical    BOOLEAN DEFAULT FALSE,\n        extnValue   OCTET STRING  }\n\
    \   The following items describe the X.509 v3 certificate for use in the\n   Internet.\n"
- title: 4.1.1  Certificate Fields
  contents:
  - "4.1.1  Certificate Fields\n   The Certificate is a SEQUENCE of three required\
    \ fields.  The fields\n   are described in detail in the following subsections.\n"
- title: 4.1.1.1  tbsCertificate
  contents:
  - "4.1.1.1  tbsCertificate\n   The field contains the names of the subject and issuer,\
    \ a public key\n   associated with the subject, a validity period, and other associated\n\
    \   information.  The fields are described in detail in section 4.1.2;\n   the\
    \ tbsCertificate usually includes extensions which are described in\n   section\
    \ 4.2.\n"
- title: 4.1.1.2  signatureAlgorithm
  contents:
  - "4.1.1.2  signatureAlgorithm\n   The signatureAlgorithm field contains the identifier\
    \ for the\n   cryptographic algorithm used by the CA to sign this certificate.\n\
    \   [PKIXALGS] lists supported signature algorithms, but other signature\n   algorithms\
    \ MAY also be supported.\n   An algorithm identifier is defined by the following\
    \ ASN.1 structure:\n   AlgorithmIdentifier  ::=  SEQUENCE  {\n        algorithm\
    \               OBJECT IDENTIFIER,\n        parameters              ANY DEFINED\
    \ BY algorithm OPTIONAL  }\n   The algorithm identifier is used to identify a\
    \ cryptographic\n   algorithm.  The OBJECT IDENTIFIER component identifies the\
    \ algorithm\n   (such as DSA with SHA-1).  The contents of the optional parameters\n\
    \   field will vary according to the algorithm identified.\n   This field MUST\
    \ contain the same algorithm identifier as the\n   signature field in the sequence\
    \ tbsCertificate (section 4.1.2.3).\n"
- title: 4.1.1.3  signatureValue
  contents:
  - "4.1.1.3  signatureValue\n   The signatureValue field contains a digital signature\
    \ computed upon\n   the ASN.1 DER encoded tbsCertificate.  The ASN.1 DER encoded\n\
    \   tbsCertificate is used as the input to the signature function.  This\n   signature\
    \ value is encoded as a BIT STRING and included in the\n   signature field.  The\
    \ details of this process are specified for each\n   of algorithms listed in [PKIXALGS].\n\
    \   By generating this signature, a CA certifies the validity of the\n   information\
    \ in the tbsCertificate field.  In particular, the CA\n   certifies the binding\
    \ between the public key material and the subject\n   of the certificate.\n"
- title: 4.1.2  TBSCertificate
  contents:
  - "4.1.2  TBSCertificate\n   The sequence TBSCertificate contains information associated\
    \ with the\n   subject of the certificate and the CA who issued it.  Every\n \
    \  TBSCertificate contains the names of the subject and issuer, a public\n   key\
    \ associated with the subject, a validity period, a version number,\n   and a\
    \ serial number; some MAY contain optional unique identifier\n   fields.  The\
    \ remainder of this section describes the syntax and\n   semantics of these fields.\
    \  A TBSCertificate usually includes\n   extensions.  Extensions for the Internet\
    \ PKI are described in Section\n   4.2.\n"
- title: 4.1.2.1  Version
  contents:
  - "4.1.2.1  Version\n   This field describes the version of the encoded certificate.\
    \  When\n   extensions are used, as expected in this profile, version MUST be\
    \ 3\n   (value is 2).  If no extensions are present, but a UniqueIdentifier\n\
    \   is present, the version SHOULD be 2 (value is 1); however version MAY\n  \
    \ be 3.  If only basic fields are present, the version SHOULD be 1 (the\n   value\
    \ is omitted from the certificate as the default value); however\n   the version\
    \ MAY be 2 or 3.\n   Implementations SHOULD be prepared to accept any version\
    \ certificate.\n   At a minimum, conforming implementations MUST recognize version\
    \ 3\n   certificates.\n   Generation of version 2 certificates is not expected\
    \ by\n   implementations based on this profile.\n"
- title: 4.1.2.2  Serial number
  contents:
  - "4.1.2.2  Serial number\n   The serial number MUST be a positive integer assigned\
    \ by the CA to\n   each certificate.  It MUST be unique for each certificate issued\
    \ by a\n   given CA (i.e., the issuer name and serial number identify a unique\n\
    \   certificate).  CAs MUST force the serialNumber to be a non-negative\n   integer.\n\
    \   Given the uniqueness requirements above, serial numbers can be\n   expected\
    \ to contain long integers.  Certificate users MUST be able to\n   handle serialNumber\
    \ values up to 20 octets.  Conformant CAs MUST NOT\n   use serialNumber values\
    \ longer than 20 octets.\n   Note: Non-conforming CAs may issue certificates with\
    \ serial numbers\n   that are negative, or zero.  Certificate users SHOULD be\
    \ prepared to\n   gracefully handle such certificates.\n"
- title: 4.1.2.3  Signature
  contents:
  - "4.1.2.3  Signature\n   This field contains the algorithm identifier for the algorithm\
    \ used\n   by the CA to sign the certificate.\n   This field MUST contain the\
    \ same algorithm identifier as the\n   signatureAlgorithm field in the sequence\
    \ Certificate (section\n   4.1.1.2).  The contents of the optional parameters\
    \ field will vary\n   according to the algorithm identified.  [PKIXALGS] lists\
    \ the\n   supported signature algorithms, but other signature algorithms MAY\n\
    \   also be supported.\n"
- title: 4.1.2.4  Issuer
  contents:
  - "4.1.2.4  Issuer\n   The issuer field identifies the entity who has signed and\
    \ issued the\n   certificate.  The issuer field MUST contain a non-empty distinguished\n\
    \   name (DN).  The issuer field is defined as the X.501 type Name\n   [X.501].\
    \  Name is defined by the following ASN.1 structures:\n   Name ::= CHOICE {\n\
    \     RDNSequence }\n   RDNSequence ::= SEQUENCE OF RelativeDistinguishedName\n\
    \   RelativeDistinguishedName ::=\n     SET OF AttributeTypeAndValue\n   AttributeTypeAndValue\
    \ ::= SEQUENCE {\n     type     AttributeType,\n     value    AttributeValue }\n\
    \   AttributeType ::= OBJECT IDENTIFIER\n   AttributeValue ::= ANY DEFINED BY\
    \ AttributeType\n   DirectoryString ::= CHOICE {\n         teletexString     \
    \      TeletexString (SIZE (1..MAX)),\n         printableString         PrintableString\
    \ (SIZE (1..MAX)),\n         universalString         UniversalString (SIZE (1..MAX)),\n\
    \         utf8String              UTF8String (SIZE (1..MAX)),\n         bmpString\
    \               BMPString (SIZE (1..MAX)) }\n   The Name describes a hierarchical\
    \ name composed of attributes, such\n   as country name, and corresponding values,\
    \ such as US.  The type of\n   the component AttributeValue is determined by the\
    \ AttributeType; in\n   general it will be a DirectoryString.\n   The DirectoryString\
    \ type is defined as a choice of PrintableString,\n   TeletexString, BMPString,\
    \ UTF8String, and UniversalString.  The\n   UTF8String encoding [RFC 2279] is\
    \ the preferred encoding, and all\n   certificates issued after December 31, 2003\
    \ MUST use the UTF8String\n   encoding of DirectoryString (except as noted below).\
    \  Until that\n   date, conforming CAs MUST choose from the following options\
    \ when\n   creating a distinguished name, including their own:\n      (a)  if\
    \ the character set is sufficient, the string MAY be\n      represented as a PrintableString;\n\
    \      (b)  failing (a), if the BMPString character set is sufficient the\n  \
    \    string MAY be represented as a BMPString; and\n      (c)  failing (a) and\
    \ (b), the string MUST be represented as a\n      UTF8String.  If (a) or (b) is\
    \ satisfied, the CA MAY still choose\n      to represent the string as a UTF8String.\n\
    \   Exceptions to the December 31, 2003 UTF8 encoding requirements are as\n  \
    \ follows:\n      (a)  CAs MAY issue \"name rollover\" certificates to support\
    \ an\n      orderly migration to UTF8String encoding.  Such certificates would\n\
    \      include the CA's UTF8String encoded name as issuer and and the old\n  \
    \    name encoding as subject, or vice-versa.\n      (b)  As stated in section\
    \ 4.1.2.6, the subject field MUST be\n      populated with a non-empty distinguished\
    \ name matching the\n      contents of the issuer field in all certificates issued\
    \ by the\n      subject CA regardless of encoding.\n   The TeletexString and UniversalString\
    \ are included for backward\n   compatibility, and SHOULD NOT be used for certificates\
    \ for new\n   subjects.  However, these types MAY be used in certificates where\
    \ the\n   name was previously established.  Certificate users SHOULD be\n   prepared\
    \ to receive certificates with these types.\n   In addition, many legacy implementations\
    \ support names encoded in the\n   ISO 8859-1 character set (Latin1String) [ISO\
    \ 8859-1] but tag them as\n   TeletexString.  TeletexString encodes a larger character\
    \ set than ISO\n   8859-1, but it encodes some characters differently.  Implementations\n\
    \   SHOULD be prepared to handle both encodings.\n   As noted above, distinguished\
    \ names are composed of attributes.  This\n   specification does not restrict\
    \ the set of attribute types that may\n   appear in names.  However, conforming\
    \ implementations MUST be\n   prepared to receive certificates with issuer names\
    \ containing the set\n   of attribute types defined below.  This specification\
    \ RECOMMENDS\n   support for additional attribute types.\n   Standard sets of\
    \ attributes have been defined in the X.500 series of\n   specifications [X.520].\
    \  Implementations of this specification MUST\n   be prepared to receive the following\
    \ standard attribute types in\n   issuer and subject (section 4.1.2.6) names:\n\
    \      * country,\n      * organization,\n      * organizational-unit,\n     \
    \ * distinguished name qualifier,\n      * state or province name,\n      * common\
    \ name (e.g., \"Susan Housley\"), and\n      * serial number.\n   In addition,\
    \ implementations of this specification SHOULD be prepared\n   to receive the\
    \ following standard attribute types in issuer and\n   subject names:\n      *\
    \ locality,\n      * title,\n      * surname,\n      * given name,\n      * initials,\n\
    \      * pseudonym, and\n      * generation qualifier (e.g., \"Jr.\", \"3rd\"\
    , or \"IV\").\n   The syntax and associated object identifiers (OIDs) for these\n\
    \   attribute types are provided in the ASN.1 modules in Appendix A.\n   In addition,\
    \ implementations of this specification MUST be prepared\n   to receive the domainComponent\
    \ attribute, as defined in [RFC 2247].\n   The Domain Name System (DNS) provides\
    \ a hierarchical resource\n   labeling system.  This attribute provides a convenient\
    \ mechanism for\n   organizations that wish to use DNs that parallel their DNS\
    \ names.\n   This is not a replacement for the dNSName component of the\n   alternative\
    \ name field.  Implementations are not required to convert\n   such names into\
    \ DNS names.  The syntax and associated OID for this\n   attribute type is provided\
    \ in the ASN.1 modules in Appendix A.\n   Certificate users MUST be prepared to\
    \ process the issuer\n   distinguished name and subject distinguished name (section\
    \ 4.1.2.6)\n   fields to perform name chaining for certification path validation\n\
    \   (section 6).  Name chaining is performed by matching the issuer\n   distinguished\
    \ name in one certificate with the subject name in a CA\n   certificate.\n   This\
    \ specification requires only a subset of the name comparison\n   functionality\
    \ specified in the X.500 series of specifications.\n   Conforming implementations\
    \ are REQUIRED to implement the following\n   name comparison rules:\n      (a)\
    \  attribute values encoded in different types (e.g.,\n      PrintableString and\
    \ BMPString) MAY be assumed to represent\n      different strings;\n      (b)\
    \ attribute values in types other than PrintableString are case\n      sensitive\
    \ (this permits matching of attribute values as binary\n      objects);\n    \
    \  (c)  attribute values in PrintableString are not case sensitive\n      (e.g.,\
    \ \"Marianne Swanson\" is the same as \"MARIANNE SWANSON\"); and\n      (d)  attribute\
    \ values in PrintableString are compared after\n      removing leading and trailing\
    \ white space and converting internal\n      substrings of one or more consecutive\
    \ white space characters to a\n      single space.\n   These name comparison rules\
    \ permit a certificate user to validate\n   certificates issued using languages\
    \ or encodings unfamiliar to the\n   certificate user.\n   In addition, implementations\
    \ of this specification MAY use these\n   comparison rules to process unfamiliar\
    \ attribute types for name\n   chaining.  This allows implementations to process\
    \ certificates with\n   unfamiliar attributes in the issuer name.\n   Note that\
    \ the comparison rules defined in the X.500 series of\n   specifications indicate\
    \ that the character sets used to encode data\n   in distinguished names are irrelevant.\
    \  The characters themselves are\n   compared without regard to encoding.  Implementations\
    \ of this profile\n   are permitted to use the comparison algorithm defined in\
    \ the X.500\n   series.  Such an implementation will recognize a superset of name\n\
    \   matches recognized by the algorithm specified above.\n"
- title: 4.1.2.5  Validity
  contents:
  - "4.1.2.5  Validity\n   The certificate validity period is the time interval during\
    \ which the\n   CA warrants that it will maintain information about the status\
    \ of the\n   certificate.  The field is represented as a SEQUENCE of two dates:\n\
    \   the date on which the certificate validity period begins (notBefore)\n   and\
    \ the date on which the certificate validity period ends\n   (notAfter).  Both\
    \ notBefore and notAfter may be encoded as UTCTime or\n   GeneralizedTime.\n \
    \  CAs conforming to this profile MUST always encode certificate\n   validity\
    \ dates through the year 2049 as UTCTime; certificate validity\n   dates in 2050\
    \ or later MUST be encoded as GeneralizedTime.\n   The validity period for a certificate\
    \ is the period of time from\n   notBefore through notAfter, inclusive.\n"
- title: 4.1.2.5.1  UTCTime
  contents:
  - "4.1.2.5.1  UTCTime\n   The universal time type, UTCTime, is a standard ASN.1\
    \ type intended\n   for representation of dates and time.  UTCTime specifies the\
    \ year\n   through the two low order digits and time is specified to the\n   precision\
    \ of one minute or one second.  UTCTime includes either Z\n   (for Zulu, or Greenwich\
    \ Mean Time) or a time differential.\n   For the purposes of this profile, UTCTime\
    \ values MUST be expressed\n   Greenwich Mean Time (Zulu) and MUST include seconds\
    \ (i.e., times are\n   YYMMDDHHMMSSZ), even where the number of seconds is zero.\
    \  Conforming\n   systems MUST interpret the year field (YY) as follows:\n   \
    \   Where YY is greater than or equal to 50, the year SHALL be\n      interpreted\
    \ as 19YY; and\n      Where YY is less than 50, the year SHALL be interpreted\
    \ as 20YY.\n"
- title: 4.1.2.5.2  GeneralizedTime
  contents:
  - "4.1.2.5.2  GeneralizedTime\n   The generalized time type, GeneralizedTime, is\
    \ a standard ASN.1 type\n   for variable precision representation of time.  Optionally,\
    \ the\n   GeneralizedTime field can include a representation of the time\n   differential\
    \ between local and Greenwich Mean Time.\n   For the purposes of this profile,\
    \ GeneralizedTime values MUST be\n   expressed Greenwich Mean Time (Zulu) and\
    \ MUST include seconds (i.e.,\n   times are YYYYMMDDHHMMSSZ), even where the number\
    \ of seconds is zero.\n   GeneralizedTime values MUST NOT include fractional seconds.\n"
- title: 4.1.2.6  Subject
  contents:
  - "4.1.2.6  Subject\n   The subject field identifies the entity associated with\
    \ the public\n   key stored in the subject public key field.  The subject name\
    \ MAY be\n   carried in the subject field and/or the subjectAltName extension.\
    \  If\n   the subject is a CA (e.g., the basic constraints extension, as\n   discussed\
    \ in 4.2.1.10, is present and the value of cA is TRUE), then\n   the subject field\
    \ MUST be populated with a non-empty distinguished\n   name matching the contents\
    \ of the issuer field (section 4.1.2.4) in\n   all certificates issued by the\
    \ subject CA.  If the subject is a CRL\n   issuer (e.g., the key usage extension,\
    \ as discussed in 4.2.1.3, is\n   present and the value of cRLSign is TRUE) then\
    \ the subject field MUST\n   be populated with a non-empty distinguished name\
    \ matching the\n   contents of the issuer field (section 4.1.2.4) in all CRLs\
    \ issued by\n   the subject CRL issuer.  If subject naming information is present\n\
    \   only in the subjectAltName extension (e.g., a key bound only to an\n   email\
    \ address or URI), then the subject name MUST be an empty\n   sequence and the\
    \ subjectAltName extension MUST be critical.\n   Where it is non-empty, the subject\
    \ field MUST contain an X.500\n   distinguished name (DN).  The DN MUST be unique\
    \ for each subject\n   entity certified by the one CA as defined by the issuer\
    \ name field.\n   A CA MAY issue more than one certificate with the same DN to\
    \ the same\n   subject entity.\n   The subject name field is defined as the X.501\
    \ type Name.\n   Implementation requirements for this field are those defined\
    \ for the\n   issuer field (section 4.1.2.4).  When encoding attribute values\
    \ of\n   type DirectoryString, the encoding rules for the issuer field MUST be\n\
    \   implemented.  Implementations of this specification MUST be prepared\n   to\
    \ receive subject names containing the attribute types required for\n   the issuer\
    \ field.  Implementations of this specification SHOULD be\n   prepared to receive\
    \ subject names containing the recommended\n   attribute types for the issuer\
    \ field.  The syntax and associated\n   object identifiers (OIDs) for these attribute\
    \ types are provided in\n   the ASN.1 modules in Appendix A.  Implementations\
    \ of this\n   specification MAY use these comparison rules to process unfamiliar\n\
    \   attribute types (i.e., for name chaining).  This allows\n   implementations\
    \ to process certificates with unfamiliar attributes in\n   the subject name.\n\
    \   In addition, legacy implementations exist where an RFC 822 name is\n   embedded\
    \ in the subject distinguished name as an EmailAddress\n   attribute.  The attribute\
    \ value for EmailAddress is of type IA5String\n   to permit inclusion of the character\
    \ '@', which is not part of the\n   PrintableString character set.  EmailAddress\
    \ attribute values are not\n   case sensitive (e.g., \"fanfeedback@redsox.com\"\
    \ is the same as\n   \"FANFEEDBACK@REDSOX.COM\").\n   Conforming implementations\
    \ generating new certificates with\n   electronic mail addresses MUST use the\
    \ rfc822Name in the subject\n   alternative name field (section 4.2.1.7) to describe\
    \ such identities.\n   Simultaneous inclusion of the EmailAddress attribute in\
    \ the subject\n   distinguished name to support legacy implementations is deprecated\n\
    \   but permitted.\n"
- title: 4.1.2.7  Subject Public Key Info
  contents:
  - "4.1.2.7  Subject Public Key Info\n   This field is used to carry the public key\
    \ and identify the algorithm\n   with which the key is used (e.g., RSA, DSA, or\
    \ Diffie-Hellman).  The\n   algorithm is identified using the AlgorithmIdentifier\
    \ structure\n   specified in section 4.1.1.2.  The object identifiers for the\n\
    \   supported algorithms and the methods for encoding the public key\n   materials\
    \ (public key and parameters) are specified in [PKIXALGS].\n"
- title: 4.1.2.8  Unique Identifiers
  contents:
  - "4.1.2.8  Unique Identifiers\n   These fields MUST only appear if the version\
    \ is 2 or 3 (section\n   4.1.2.1).  These fields MUST NOT appear if the version\
    \ is 1.  The\n   subject and issuer unique identifiers are present in the certificate\n\
    \   to handle the possibility of reuse of subject and/or issuer names\n   over\
    \ time.  This profile RECOMMENDS that names not be reused for\n   different entities\
    \ and that Internet certificates not make use of\n   unique identifiers.  CAs\
    \ conforming to this profile SHOULD NOT\n   generate certificates with unique\
    \ identifiers.  Applications\n   conforming to this profile SHOULD be capable\
    \ of parsing unique\n   identifiers.\n"
- title: 4.1.2.9  Extensions
  contents:
  - "4.1.2.9  Extensions\n   This field MUST only appear if the version is 3 (section\
    \ 4.1.2.1).\n   If present, this field is a SEQUENCE of one or more certificate\n\
    \   extensions.  The format and content of certificate extensions in the\n   Internet\
    \ PKI is defined in section 4.2.\n"
- title: 4.2  Certificate Extensions
  contents:
  - "4.2  Certificate Extensions\n   The extensions defined for X.509 v3 certificates\
    \ provide methods for\n   associating additional attributes with users or public\
    \ keys and for\n   managing a certification hierarchy.  The X.509 v3 certificate\
    \ format\n   also allows communities to define private extensions to carry\n \
    \  information unique to those communities.  Each extension in a\n   certificate\
    \ is designated as either critical or non-critical.  A\n   certificate using system\
    \ MUST reject the certificate if it encounters\n   a critical extension it does\
    \ not recognize; however, a non-critical\n   extension MAY be ignored if it is\
    \ not recognized.  The following\n   sections present recommended extensions used\
    \ within Internet\n   certificates and standard locations for information.  Communities\
    \ may\n   elect to use additional extensions; however, caution ought to be\n \
    \  exercised in adopting any critical extensions in certificates which\n   might\
    \ prevent use in a general context.\n   Each extension includes an OID and an\
    \ ASN.1 structure.  When an\n   extension appears in a certificate, the OID appears\
    \ as the field\n   extnID and the corresponding ASN.1 encoded structure is the\
    \ value of\n   the octet string extnValue.  A certificate MUST NOT include more\
    \ than\n   one instance of a particular extension.  For example, a certificate\n\
    \   may contain only one authority key identifier extension (section\n   4.2.1.1).\
    \  An extension includes the boolean critical, with a default\n   value of FALSE.\
    \  The text for each extension specifies the acceptable\n   values for the critical\
    \ field.\n   Conforming CAs MUST support key identifiers (sections 4.2.1.1 and\n\
    \   4.2.1.2), basic constraints (section 4.2.1.10), key usage (section\n   4.2.1.3),\
    \ and certificate policies (section 4.2.1.5) extensions.  If\n   the CA issues\
    \ certificates with an empty sequence for the subject\n   field, the CA MUST support\
    \ the subject alternative name extension\n   (section 4.2.1.7).  Support for the\
    \ remaining extensions is OPTIONAL.\n   Conforming CAs MAY support extensions\
    \ that are not identified within\n   this specification; certificate issuers are\
    \ cautioned that marking\n   such extensions as critical may inhibit interoperability.\n\
    \   At a minimum, applications conforming to this profile MUST recognize\n   the\
    \ following extensions: key usage (section 4.2.1.3), certificate\n   policies\
    \ (section 4.2.1.5), the subject alternative name (section\n   4.2.1.7), basic\
    \ constraints (section 4.2.1.10), name constraints\n   (section 4.2.1.11), policy\
    \ constraints (section 4.2.1.12), extended\n   key usage (section 4.2.1.13), and\
    \ inhibit any-policy (section\n   4.2.1.15).\n   In addition, applications conforming\
    \ to this profile SHOULD recognize\n   the authority and subject key identifier\
    \ (sections 4.2.1.1 and\n   4.2.1.2), and policy mapping (section 4.2.1.6) extensions.\n"
- title: 4.2.1  Standard Extensions
  contents:
  - "4.2.1  Standard Extensions\n   This section identifies standard certificate extensions\
    \ defined in\n   [X.509] for use in the Internet PKI.  Each extension is associated\n\
    \   with an OID defined in [X.509].  These OIDs are members of the id-ce\n   arc,\
    \ which is defined by the following:\n   id-ce   OBJECT IDENTIFIER ::=  { joint-iso-ccitt(2)\
    \ ds(5) 29 }\n"
- title: 4.2.1.1  Authority Key Identifier
  contents:
  - "4.2.1.1  Authority Key Identifier\n   The authority key identifier extension\
    \ provides a means of\n   identifying the public key corresponding to the private\
    \ key used to\n   sign a certificate.  This extension is used where an issuer\
    \ has\n   multiple signing keys (either due to multiple concurrent key pairs or\n\
    \   due to changeover).  The identification MAY be based on either the\n   key\
    \ identifier (the subject key identifier in the issuer's\n   certificate) or on\
    \ the issuer name and serial number.\n   The keyIdentifier field of the authorityKeyIdentifier\
    \ extension MUST\n   be included in all certificates generated by conforming CAs\
    \ to\n   facilitate certification path construction.  There is one exception;\n\
    \   where a CA distributes its public key in the form of a \"self-signed\"\n \
    \  certificate, the authority key identifier MAY be omitted.  The\n   signature\
    \ on a self-signed certificate is generated with the private\n   key associated\
    \ with the certificate's subject public key.  (This\n   proves that the issuer\
    \ possesses both the public and private keys.)\n   In this case, the subject and\
    \ authority key identifiers would be\n   identical, but only the subject key identifier\
    \ is needed for\n   certification path building.\n   The value of the keyIdentifier\
    \ field SHOULD be derived from the\n   public key used to verify the certificate's\
    \ signature or a method\n   that generates unique values.  Two common methods\
    \ for generating key\n   identifiers from the public key, and one common method\
    \ for generating\n   unique values, are described in section 4.2.1.2.  Where a\
    \ key\n   identifier has not been previously established, this specification\n\
    \   RECOMMENDS use of one of these methods for generating keyIdentifiers.\n  \
    \ Where a key identifier has been previously established, the CA SHOULD\n   use\
    \ the previously established identifier.\n   This profile RECOMMENDS support for\
    \ the key identifier method by all\n   certificate users.\n   This extension MUST\
    \ NOT be marked critical.\n   id-ce-authorityKeyIdentifier OBJECT IDENTIFIER ::=\
    \  { id-ce 35 }\n   AuthorityKeyIdentifier ::= SEQUENCE {\n      keyIdentifier\
    \             [0] KeyIdentifier           OPTIONAL,\n      authorityCertIssuer\
    \       [1] GeneralNames            OPTIONAL,\n      authorityCertSerialNumber\
    \ [2] CertificateSerialNumber OPTIONAL  }\n   KeyIdentifier ::= OCTET STRING\n"
- title: 4.2.1.2  Subject Key Identifier
  contents:
  - "4.2.1.2  Subject Key Identifier\n   The subject key identifier extension provides\
    \ a means of identifying\n   certificates that contain a particular public key.\n\
    \   To facilitate certification path construction, this extension MUST\n   appear\
    \ in all conforming CA certificates, that is, all certificates\n   including the\
    \ basic constraints extension (section 4.2.1.10) where\n   the value of cA is\
    \ TRUE.  The value of the subject key identifier\n   MUST be the value placed\
    \ in the key identifier field of the Authority\n   Key Identifier extension (section\
    \ 4.2.1.1) of certificates issued by\n   the subject of this certificate.\n  \
    \ For CA certificates, subject key identifiers SHOULD be derived from\n   the\
    \ public key or a method that generates unique values.  Two common\n   methods\
    \ for generating key identifiers from the public key are:\n      (1) The keyIdentifier\
    \ is composed of the 160-bit SHA-1 hash of the\n      value of the BIT STRING\
    \ subjectPublicKey (excluding the tag,\n      length, and number of unused bits).\n\
    \      (2) The keyIdentifier is composed of a four bit type field with\n     \
    \ the value 0100 followed by the least significant 60 bits of the\n      SHA-1\
    \ hash of the value of the BIT STRING subjectPublicKey\n      (excluding the tag,\
    \ length, and number of unused bit string bits).\n   One common method for generating\
    \ unique values is a monotonically\n   increasing sequence of integers.\n   For\
    \ end entity certificates, the subject key identifier extension\n   provides a\
    \ means for identifying certificates containing the\n   particular public key\
    \ used in an application.  Where an end entity\n   has obtained multiple certificates,\
    \ especially from multiple CAs, the\n   subject key identifier provides a means\
    \ to quickly identify the set\n   of certificates containing a particular public\
    \ key.  To assist\n   applications in identifying the appropriate end entity certificate,\n\
    \   this extension SHOULD be included in all end entity certificates.\n   For\
    \ end entity certificates, subject key identifiers SHOULD be\n   derived from\
    \ the public key.  Two common methods for generating key\n   identifiers from\
    \ the public key are identified above.\n   Where a key identifier has not been\
    \ previously established, this\n   specification RECOMMENDS use of one of these\
    \ methods for generating\n   keyIdentifiers.  Where a key identifier has been\
    \ previously\n   established, the CA SHOULD use the previously established identifier.\n\
    \   This extension MUST NOT be marked critical.\n   id-ce-subjectKeyIdentifier\
    \ OBJECT IDENTIFIER ::=  { id-ce 14 }\n   SubjectKeyIdentifier ::= KeyIdentifier\n"
- title: 4.2.1.3  Key Usage
  contents:
  - "4.2.1.3  Key Usage\n   The key usage extension defines the purpose (e.g., encipherment,\n\
    \   signature, certificate signing) of the key contained in the\n   certificate.\
    \  The usage restriction might be employed when a key that\n   could be used for\
    \ more than one operation is to be restricted.  For\n   example, when an RSA key\
    \ should be used only to verify signatures on\n   objects other than public key\
    \ certificates and CRLs, the\n   digitalSignature and/or nonRepudiation bits would\
    \ be asserted.\n   Likewise, when an RSA key should be used only for key management,\
    \ the\n   keyEncipherment bit would be asserted.\n   This extension MUST appear\
    \ in certificates that contain public keys\n   that are used to validate digital\
    \ signatures on other public key\n   certificates or CRLs.  When this extension\
    \ appears, it SHOULD be\n   marked critical.\n      id-ce-keyUsage OBJECT IDENTIFIER\
    \ ::=  { id-ce 15 }\n      KeyUsage ::= BIT STRING {\n           digitalSignature\
    \        (0),\n           nonRepudiation          (1),\n           keyEncipherment\
    \         (2),\n           dataEncipherment        (3),\n           keyAgreement\
    \            (4),\n           keyCertSign             (5),\n           cRLSign\
    \                 (6),\n           encipherOnly            (7),\n           decipherOnly\
    \            (8) }\n   Bits in the KeyUsage type are used as follows:\n      The\
    \ digitalSignature bit is asserted when the subject public key\n      is used\
    \ with a digital signature mechanism to support security\n      services other\
    \ than certificate signing (bit 5), or CRL signing\n      (bit 6).  Digital signature\
    \ mechanisms are often used for entity\n      authentication and data origin authentication\
    \ with integrity.\n      The nonRepudiation bit is asserted when the subject public\
    \ key is\n      used to verify digital signatures used to provide a non-\n   \
    \   repudiation service which protects against the signing entity\n      falsely\
    \ denying some action, excluding certificate or CRL signing.\n      In the case\
    \ of later conflict, a reliable third party may\n      determine the authenticity\
    \ of the signed data.\n      Further distinctions between the digitalSignature\
    \ and\n      nonRepudiation bits may be provided in specific certificate\n   \
    \   policies.\n      The keyEncipherment bit is asserted when the subject public\
    \ key is\n      used for key transport.  For example, when an RSA key is to be\n\
    \      used for key management, then this bit is set.\n      The dataEncipherment\
    \ bit is asserted when the subject public key\n      is used for enciphering user\
    \ data, other than cryptographic keys.\n      The keyAgreement bit is asserted\
    \ when the subject public key is\n      used for key agreement.  For example,\
    \ when a Diffie-Hellman key is\n      to be used for key management, then this\
    \ bit is set.\n      The keyCertSign bit is asserted when the subject public key\
    \ is\n      used for verifying a signature on public key certificates.  If the\n\
    \      keyCertSign bit is asserted, then the cA bit in the basic\n      constraints\
    \ extension (section 4.2.1.10) MUST also be asserted.\n      The cRLSign bit is\
    \ asserted when the subject public key is used\n      for verifying a signature\
    \ on certificate revocation list (e.g., a\n      CRL, delta CRL, or an ARL). \
    \ This bit MUST be asserted in\n      certificates that are used to verify signatures\
    \ on CRLs.\n      The meaning of the encipherOnly bit is undefined in the absence\
    \ of\n      the keyAgreement bit.  When the encipherOnly bit is asserted and\n\
    \      the keyAgreement bit is also set, the subject public key may be\n     \
    \ used only for enciphering data while performing key agreement.\n      The meaning\
    \ of the decipherOnly bit is undefined in the absence of\n      the keyAgreement\
    \ bit.  When the decipherOnly bit is asserted and\n      the keyAgreement bit\
    \ is also set, the subject public key may be\n      used only for deciphering\
    \ data while performing key agreement.\n   This profile does not restrict the\
    \ combinations of bits that may be\n   set in an instantiation of the keyUsage\
    \ extension.  However,\n   appropriate values for keyUsage extensions for particular\
    \ algorithms\n   are specified in [PKIXALGS].\n"
- title: 4.2.1.4  Private Key Usage Period
  contents:
  - "4.2.1.4  Private Key Usage Period\n   This extension SHOULD NOT be used within\
    \ the Internet PKI.  CAs\n   conforming to this profile MUST NOT generate certificates\
    \ that\n   include a critical private key usage period extension.\n   The private\
    \ key usage period extension allows the certificate issuer\n   to specify a different\
    \ validity period for the private key than the\n   certificate.  This extension\
    \ is intended for use with digital\n   signature keys.  This extension consists\
    \ of two optional components,\n   notBefore and notAfter.  The private key associated\
    \ with the\n   certificate SHOULD NOT be used to sign objects before or after\
    \ the\n   times specified by the two components, respectively.  CAs conforming\n\
    \   to this profile MUST NOT generate certificates with private key usage\n  \
    \ period extensions unless at least one of the two components is\n   present and\
    \ the extension is non-critical.\n   Where used, notBefore and notAfter are represented\
    \ as GeneralizedTime\n   and MUST be specified and interpreted as defined in section\n\
    \   4.1.2.5.2.\n   id-ce-privateKeyUsagePeriod OBJECT IDENTIFIER ::=  { id-ce\
    \ 16 }\n   PrivateKeyUsagePeriod ::= SEQUENCE {\n        notBefore       [0] \
    \    GeneralizedTime OPTIONAL,\n        notAfter        [1]     GeneralizedTime\
    \ OPTIONAL }\n"
- title: 4.2.1.5  Certificate Policies
  contents:
  - "4.2.1.5  Certificate Policies\n   The certificate policies extension contains\
    \ a sequence of one or more\n   policy information terms, each of which consists\
    \ of an object\n   identifier (OID) and optional qualifiers.  Optional qualifiers,\
    \ which\n   MAY be present, are not expected to change the definition of the\n\
    \   policy.\n   In an end entity certificate, these policy information terms indicate\n\
    \   the policy under which the certificate has been issued and the\n   purposes\
    \ for which the certificate may be used.  In a CA certificate,\n   these policy\
    \ information terms limit the set of policies for\n   certification paths which\
    \ include this certificate.  When a CA does\n   not wish to limit the set of policies\
    \ for certification paths which\n   include this certificate, it MAY assert the\
    \ special policy anyPolicy,\n   with a value of { 2 5 29 32 0 }.\n   Applications\
    \ with specific policy requirements are expected to have a\n   list of those policies\
    \ which they will accept and to compare the\n   policy OIDs in the certificate\
    \ to that list.  If this extension is\n   critical, the path validation software\
    \ MUST be able to interpret this\n   extension (including the optional qualifier),\
    \ or MUST reject the\n   certificate.\n   To promote interoperability, this profile\
    \ RECOMMENDS that policy\n   information terms consist of only an OID.  Where\
    \ an OID alone is\n   insufficient, this profile strongly recommends that use\
    \ of qualifiers\n   be limited to those identified in this section.  When qualifiers\
    \ are\n   used with the special policy anyPolicy, they MUST be limited to the\n\
    \   qualifiers identified in this section.\n   This specification defines two\
    \ policy qualifier types for use by\n   certificate policy writers and certificate\
    \ issuers.  The qualifier\n   types are the CPS Pointer and User Notice qualifiers.\n\
    \   The CPS Pointer qualifier contains a pointer to a Certification\n   Practice\
    \ Statement (CPS) published by the CA.  The pointer is in the\n   form of a URI.\
    \  Processing requirements for this qualifier are a\n   local matter.  No action\
    \ is mandated by this specification regardless\n   of the criticality value asserted\
    \ for the extension.\n   User notice is intended for display to a relying party\
    \ when a\n   certificate is used.  The application software SHOULD display all\n\
    \   user notices in all certificates of the certification path used,\n   except\
    \ that if a notice is duplicated only one copy need be\n   displayed.  To prevent\
    \ such duplication, this qualifier SHOULD only\n   be present in end entity certificates\
    \ and CA certificates issued to\n   other organizations.\n   The user notice has\
    \ two optional fields: the noticeRef field and the\n   explicitText field.\n \
    \     The noticeRef field, if used, names an organization and\n      identifies,\
    \ by number, a particular textual statement prepared by\n      that organization.\
    \  For example, it might identify the\n      organization \"CertsRUs\" and notice\
    \ number 1.  In a typical\n      implementation, the application software will\
    \ have a notice file\n      containing the current set of notices for CertsRUs;\
    \ the\n      application will extract the notice text from the file and display\n\
    \      it.  Messages MAY be multilingual, allowing the software to select\n  \
    \    the particular language message for its own environment.\n      An explicitText\
    \ field includes the textual statement directly in\n      the certificate.  The\
    \ explicitText field is a string with a\n      maximum size of 200 characters.\n\
    \   If both the noticeRef and explicitText options are included in the\n   one\
    \ qualifier and if the application software can locate the notice\n   text indicated\
    \ by the noticeRef option, then that text SHOULD be\n   displayed; otherwise,\
    \ the explicitText string SHOULD be displayed.\n   Note: While the explicitText\
    \ has a maximum size of 200 characters,\n   some non-conforming CAs exceed this\
    \ limit.  Therefore, certificate\n   users SHOULD gracefully handle explicitText\
    \ with more than 200\n   characters.\n   id-ce-certificatePolicies OBJECT IDENTIFIER\
    \ ::=  { id-ce 32 }\n   anyPolicy OBJECT IDENTIFIER ::= { id-ce-certificate-policies\
    \ 0 }\n   certificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation\n\
    \   PolicyInformation ::= SEQUENCE {\n        policyIdentifier   CertPolicyId,\n\
    \        policyQualifiers   SEQUENCE SIZE (1..MAX) OF\n                      \
    \          PolicyQualifierInfo OPTIONAL }\n   CertPolicyId ::= OBJECT IDENTIFIER\n\
    \   PolicyQualifierInfo ::= SEQUENCE {\n        policyQualifierId  PolicyQualifierId,\n\
    \        qualifier          ANY DEFINED BY policyQualifierId }\n   -- policyQualifierIds\
    \ for Internet policy qualifiers\n   id-qt          OBJECT IDENTIFIER ::=  { id-pkix\
    \ 2 }\n   id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }\n   id-qt-unotice\
    \  OBJECT IDENTIFIER ::=  { id-qt 2 }\n   PolicyQualifierId ::=\n        OBJECT\
    \ IDENTIFIER ( id-qt-cps | id-qt-unotice )\n   Qualifier ::= CHOICE {\n      \
    \  cPSuri           CPSuri,\n        userNotice       UserNotice }\n   CPSuri\
    \ ::= IA5String\n   UserNotice ::= SEQUENCE {\n        noticeRef        NoticeReference\
    \ OPTIONAL,\n        explicitText     DisplayText OPTIONAL}\n   NoticeReference\
    \ ::= SEQUENCE {\n        organization     DisplayText,\n        noticeNumbers\
    \    SEQUENCE OF INTEGER }\n   DisplayText ::= CHOICE {\n        ia5String   \
    \     IA5String      (SIZE (1..200)),\n        visibleString    VisibleString\
    \  (SIZE (1..200)),\n        bmpString        BMPString      (SIZE (1..200)),\n\
    \        utf8String       UTF8String     (SIZE (1..200)) }\n"
- title: 4.2.1.6  Policy Mappings
  contents:
  - "4.2.1.6  Policy Mappings\n   This extension is used in CA certificates.  It lists\
    \ one or more\n   pairs of OIDs; each pair includes an issuerDomainPolicy and\
    \ a\n   subjectDomainPolicy.  The pairing indicates the issuing CA considers\n\
    \   its issuerDomainPolicy equivalent to the subject CA's\n   subjectDomainPolicy.\n\
    \   The issuing CA's users might accept an issuerDomainPolicy for certain\n  \
    \ applications.  The policy mapping defines the list of policies\n   associated\
    \ with the subject CA that may be accepted as comparable to\n   the issuerDomainPolicy.\n\
    \   Each issuerDomainPolicy named in the policy mapping extension SHOULD\n   also\
    \ be asserted in a certificate policies extension in the same\n   certificate.\
    \  Policies SHOULD NOT be mapped either to or from the\n   special value anyPolicy\
    \ (section 4.2.1.5).\n   This extension MAY be supported by CAs and/or applications,\
    \ and it\n   MUST be non-critical.\n   id-ce-policyMappings OBJECT IDENTIFIER\
    \ ::=  { id-ce 33 }\n   PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE\
    \ {\n        issuerDomainPolicy      CertPolicyId,\n        subjectDomainPolicy\
    \     CertPolicyId }\n"
- title: 4.2.1.7  Subject Alternative Name
  contents:
  - "4.2.1.7  Subject Alternative Name\n   The subject alternative names extension\
    \ allows additional identities\n   to be bound to the subject of the certificate.\
    \  Defined options\n   include an Internet electronic mail address, a DNS name,\
    \ an IP\n   address, and a uniform resource identifier (URI).  Other options\n\
    \   exist, including completely local definitions.  Multiple name forms,\n   and\
    \ multiple instances of each name form, MAY be included.  Whenever\n   such identities\
    \ are to be bound into a certificate, the subject\n   alternative name (or issuer\
    \ alternative name) extension MUST be used;\n   however, a DNS name MAY be represented\
    \ in the subject field using the\n   domainComponent attribute as described in\
    \ section 4.1.2.4.\n   Because the subject alternative name is considered to be\
    \ definitively\n   bound to the public key, all parts of the subject alternative\
    \ name\n   MUST be verified by the CA.\n   Further, if the only subject identity\
    \ included in the certificate is\n   an alternative name form (e.g., an electronic\
    \ mail address), then the\n   subject distinguished name MUST be empty (an empty\
    \ sequence), and the\n   subjectAltName extension MUST be present.  If the subject\
    \ field\n   contains an empty sequence, the subjectAltName extension MUST be\n\
    \   marked critical.\n   When the subjectAltName extension contains an Internet\
    \ mail address,\n   the address MUST be included as an rfc822Name.  The format\
    \ of an\n   rfc822Name is an \"addr-spec\" as defined in RFC 822 [RFC 822].  An\n\
    \   addr-spec has the form \"local-part@domain\".  Note that an addr-spec\n  \
    \ has no phrase (such as a common name) before it, has no comment (text\n   surrounded\
    \ in parentheses) after it, and is not surrounded by \"<\" and\n   \">\".  Note\
    \ that while upper and lower case letters are allowed in an\n   RFC 822 addr-spec,\
    \ no significance is attached to the case.\n   When the subjectAltName extension\
    \ contains a iPAddress, the address\n   MUST be stored in the octet string in\
    \ \"network byte order,\" as\n   specified in RFC 791 [RFC 791].  The least significant\
    \ bit (LSB) of\n   each octet is the LSB of the corresponding byte in the network\n\
    \   address.  For IP Version 4, as specified in RFC 791, the octet string\n  \
    \ MUST contain exactly four octets.  For IP Version 6, as specified in\n   RFC\
    \ 1883, the octet string MUST contain exactly sixteen octets [RFC\n   1883].\n\
    \   When the subjectAltName extension contains a domain name system\n   label,\
    \ the domain name MUST be stored in the dNSName (an IA5String).\n   The name MUST\
    \ be in the \"preferred name syntax,\" as specified by RFC\n   1034 [RFC 1034].\
    \  Note that while upper and lower case letters are\n   allowed in domain names,\
    \ no signifigance is attached to the case.  In\n   addition, while the string\
    \ \" \" is a legal domain name, subjectAltName\n   extensions with a dNSName of\
    \ \" \" MUST NOT be used.  Finally, the use\n   of the DNS representation for\
    \ Internet mail addresses (wpolk.nist.gov\n   instead of wpolk@nist.gov) MUST\
    \ NOT be used; such identities are to\n   be encoded as rfc822Name.\n   Note:\
    \ work is currently underway to specify domain names in\n   international character\
    \ sets.  Such names will likely not be\n   accommodated by IA5String.  Once this\
    \ work is complete, this profile\n   will be revisited and the appropriate functionality\
    \ will be added.\n   When the subjectAltName extension contains a URI, the name\
    \ MUST be\n   stored in the uniformResourceIdentifier (an IA5String).  The name\n\
    \   MUST NOT be a relative URL, and it MUST follow the URL syntax and\n   encoding\
    \ rules specified in [RFC 1738].  The name MUST include both a\n   scheme (e.g.,\
    \ \"http\" or \"ftp\") and a scheme-specific-part.  The\n   scheme-specific-part\
    \ MUST include a fully qualified domain name or IP\n   address as the host.\n\
    \   As specified in [RFC 1738], the scheme name is not case-sensitive\n   (e.g.,\
    \ \"http\" is equivalent to \"HTTP\").  The host part is also not\n   case-sensitive,\
    \ but other components of the scheme-specific-part may\n   be case-sensitive.\
    \  When comparing URIs, conforming implementations\n   MUST compare the scheme\
    \ and host without regard to case, but assume\n   the remainder of the scheme-specific-part\
    \ is case sensitive.\n   When the subjectAltName extension contains a DN in the\
    \ directoryName,\n   the DN MUST be unique for each subject entity certified by\
    \ the one CA\n   as defined by the issuer name field.  A CA MAY issue more than\
    \ one\n   certificate with the same DN to the same subject entity.\n   The subjectAltName\
    \ MAY carry additional name types through the use of\n   the otherName field.\
    \  The format and semantics of the name are\n   indicated through the OBJECT IDENTIFIER\
    \ in the type-id field.  The\n   name itself is conveyed as value field in otherName.\
    \  For example,\n   Kerberos [RFC 1510] format names can be encoded into the otherName,\n\
    \   using using a Kerberos 5 principal name OID and a SEQUENCE of the\n   Realm\
    \ and the PrincipalName.\n   Subject alternative names MAY be constrained in the\
    \ same manner as\n   subject distinguished names using the name constraints extension\
    \ as\n   described in section 4.2.1.11.\n   If the subjectAltName extension is\
    \ present, the sequence MUST contain\n   at least one entry.  Unlike the subject\
    \ field, conforming CAs MUST\n   NOT issue certificates with subjectAltNames containing\
    \ empty\n   GeneralName fields.  For example, an rfc822Name is represented as\
    \ an\n   IA5String.  While an empty string is a valid IA5String, such an\n   rfc822Name\
    \ is not permitted by this profile.  The behavior of clients\n   that encounter\
    \ such a certificate when processing a certificication\n   path is not defined\
    \ by this profile.\n   Finally, the semantics of subject alternative names that\
    \ include\n   wildcard characters (e.g., as a placeholder for a set of names)\
    \ are\n   not addressed by this specification.  Applications with specific\n \
    \  requirements MAY use such names, but they must define the semantics.\n   id-ce-subjectAltName\
    \ OBJECT IDENTIFIER ::=  { id-ce 17 }\n   SubjectAltName ::= GeneralNames\n  \
    \ GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName\n   GeneralName ::= CHOICE\
    \ {\n        otherName                       [0]     OtherName,\n        rfc822Name\
    \                      [1]     IA5String,\n        dNSName                   \
    \      [2]     IA5String,\n        x400Address                     [3]     ORAddress,\n\
    \        directoryName                   [4]     Name,\n        ediPartyName \
    \                   [5]     EDIPartyName,\n        uniformResourceIdentifier \
    \      [6]     IA5String,\n        iPAddress                       [7]     OCTET\
    \ STRING,\n        registeredID                    [8]     OBJECT IDENTIFIER }\n\
    \   OtherName ::= SEQUENCE {\n        type-id    OBJECT IDENTIFIER,\n        value\
    \      [0] EXPLICIT ANY DEFINED BY type-id }\n   EDIPartyName ::= SEQUENCE {\n\
    \        nameAssigner            [0]     DirectoryString OPTIONAL,\n        partyName\
    \               [1]     DirectoryString }\n"
- title: 4.2.1.8  Issuer Alternative Names
  contents:
  - "4.2.1.8  Issuer Alternative Names\n   As with 4.2.1.7, this extension is used\
    \ to associate Internet style\n   identities with the certificate issuer.  Issuer\
    \ alternative names\n   MUST be encoded as in 4.2.1.7.\n   Where present, this\
    \ extension SHOULD NOT be marked critical.\n   id-ce-issuerAltName OBJECT IDENTIFIER\
    \ ::=  { id-ce 18 }\n   IssuerAltName ::= GeneralNames\n"
- title: 4.2.1.9  Subject Directory Attributes
  contents:
  - "4.2.1.9  Subject Directory Attributes\n   The subject directory attributes extension\
    \ is used to convey\n   identification attributes (e.g., nationality) of the subject.\
    \  The\n   extension is defined as a sequence of one or more attributes.  This\n\
    \   extension MUST be non-critical.\n   id-ce-subjectDirectoryAttributes OBJECT\
    \ IDENTIFIER ::=  { id-ce 9 }\n   SubjectDirectoryAttributes ::= SEQUENCE SIZE\
    \ (1..MAX) OF Attribute\n"
- title: 4.2.1.10  Basic Constraints
  contents:
  - "4.2.1.10  Basic Constraints\n   The basic constraints extension identifies whether\
    \ the subject of the\n   certificate is a CA and the maximum depth of valid certification\n\
    \   paths that include this certificate.\n   The cA boolean indicates whether\
    \ the certified public key belongs to\n   a CA.  If the cA boolean is not asserted,\
    \ then the keyCertSign bit in\n   the key usage extension MUST NOT be asserted.\n\
    \   The pathLenConstraint field is meaningful only if the cA boolean is\n   asserted\
    \ and the key usage extension asserts the keyCertSign bit\n   (section 4.2.1.3).\
    \  In this case, it gives the maximum number of non-\n   self-issued intermediate\
    \ certificates that may follow this\n   certificate in a valid certification path.\
    \  A certificate is self-\n   issued if the DNs that appear in the subject and\
    \ issuer fields are\n   identical and are not empty.  (Note: The last certificate\
    \ in the\n   certification path is not an intermediate certificate, and is not\n\
    \   included in this limit.  Usually, the last certificate is an end\n   entity\
    \ certificate, but it can be a CA certificate.)  A\n   pathLenConstraint of zero\
    \ indicates that only one more certificate\n   may follow in a valid certification\
    \ path.  Where it appears, the\n   pathLenConstraint field MUST be greater than\
    \ or equal to zero.  Where\n   pathLenConstraint does not appear, no limit is\
    \ imposed.\n   This extension MUST appear as a critical extension in all CA\n\
    \   certificates that contain public keys used to validate digital\n   signatures\
    \ on certificates.  This extension MAY appear as a critical\n   or non-critical\
    \ extension in CA certificates that contain public keys\n   used exclusively for\
    \ purposes other than validating digital\n   signatures on certificates.  Such\
    \ CA certificates include ones that\n   contain public keys used exclusively for\
    \ validating digital\n   signatures on CRLs and ones that contain key management\
    \ public keys\n   used with certificate enrollment protocols.  This extension\
    \ MAY\n   appear as a critical or non-critical extension in end entity\n   certificates.\n\
    \   CAs MUST NOT include the pathLenConstraint field unless the cA\n   boolean\
    \ is asserted and the key usage extension asserts the\n   keyCertSign bit.\n \
    \  id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }\n   BasicConstraints\
    \ ::= SEQUENCE {\n        cA                      BOOLEAN DEFAULT FALSE,\n   \
    \     pathLenConstraint       INTEGER (0..MAX) OPTIONAL }\n"
- title: 4.2.1.11  Name Constraints
  contents:
  - "4.2.1.11  Name Constraints\n   The name constraints extension, which MUST be\
    \ used only in a CA\n   certificate, indicates a name space within which all subject\
    \ names in\n   subsequent certificates in a certification path MUST be located.\n\
    \   Restrictions apply to the subject distinguished name and apply to\n   subject\
    \ alternative names.  Restrictions apply only when the\n   specified name form\
    \ is present.  If no name of the type is in the\n   certificate, the certificate\
    \ is acceptable.\n   Name constraints are not applied to certificates whose issuer\
    \ and\n   subject are identical (unless the certificate is the final\n   certificate\
    \ in the path).  (This could prevent CAs that use name\n   constraints from employing\
    \ self-issued certificates to implement key\n   rollover.)\n   Restrictions are\
    \ defined in terms of permitted or excluded name\n   subtrees.  Any name matching\
    \ a restriction in the excludedSubtrees\n   field is invalid regardless of information\
    \ appearing in the\n   permittedSubtrees.  This extension MUST be critical.\n\
    \   Within this profile, the minimum and maximum fields are not used with\n  \
    \ any name forms, thus minimum MUST be zero, and maximum MUST be\n   absent.\n\
    \   For URIs, the constraint applies to the host part of the name.  The\n   constraint\
    \ MAY specify a host or a domain.  Examples would be\n   \"foo.bar.com\";  and\
    \ \".xyz.com\".  When the the constraint begins with\n   a period, it MAY be expanded\
    \ with one or more subdomains.  That is,\n   the constraint \".xyz.com\" is satisfied\
    \ by both abc.xyz.com and\n   abc.def.xyz.com.  However, the constraint \".xyz.com\"\
    \ is not satisfied\n   by \"xyz.com\".  When the constraint does not begin with\
    \ a period, it\n   specifies a host.\n   A name constraint for Internet mail addresses\
    \ MAY specify a\n   particular mailbox, all addresses at a particular host, or\
    \ all\n   mailboxes in a domain.  To indicate a particular mailbox, the\n   constraint\
    \ is the complete mail address.  For example, \"root@xyz.com\"\n   indicates the\
    \ root mailbox on the host \"xyz.com\".  To indicate all\n   Internet mail addresses\
    \ on a particular host, the constraint is\n   specified as the host name.  For\
    \ example, the constraint \"xyz.com\" is\n   satisfied by any mail address at\
    \ the host \"xyz.com\".  To specify any\n   address within a domain, the constraint\
    \ is specified with a leading\n   period (as with URIs).  For example, \".xyz.com\"\
    \ indicates all the\n   Internet mail addresses in the domain \"xyz.com\", but\
    \ not Internet\n   mail addresses on the host \"xyz.com\".\n   DNS name restrictions\
    \ are expressed as foo.bar.com.  Any DNS name\n   that can be constructed by simply\
    \ adding to the left hand side of the\n   name satisfies the name constraint.\
    \  For example, www.foo.bar.com\n   would satisfy the constraint but foo1.bar.com\
    \ would not.\n   Legacy implementations exist where an RFC 822 name is embedded\
    \ in the\n   subject distinguished name in an attribute of type EmailAddress\n\
    \   (section 4.1.2.6).  When rfc822 names are constrained, but the\n   certificate\
    \ does not include a subject alternative name, the rfc822\n   name constraint\
    \ MUST be applied to the attribute of type EmailAddress\n   in the subject distinguished\
    \ name.  The ASN.1 syntax for EmailAddress\n   and the corresponding OID are supplied\
    \ in Appendix A.\n   Restrictions of the form directoryName MUST be applied to\
    \ the subject\n   field in the certificate and to the subjectAltName extensions\
    \ of type\n   directoryName.  Restrictions of the form x400Address MUST be applied\n\
    \   to subjectAltName extensions of type x400Address.\n   When applying restrictions\
    \ of the form directoryName, an\n   implementation MUST compare DN attributes.\
    \  At a minimum,\n   implementations MUST perform the DN comparison rules specified\
    \ in\n   Section 4.1.2.4.  CAs issuing certificates with a restriction of the\n\
    \   form directoryName SHOULD NOT rely on implementation of the full ISO\n   DN\
    \ name comparison algorithm.  This implies name restrictions MUST be\n   stated\
    \ identically to the encoding used in the subject field or\n   subjectAltName\
    \ extension.\n   The syntax of iPAddress MUST be as described in section 4.2.1.7\
    \ with\n   the following additions specifically for Name Constraints.  For IPv4\n\
    \   addresses, the ipAddress field of generalName MUST contain eight (8)\n   octets,\
    \ encoded in the style of RFC 1519 (CIDR) to represent an\n   address range [RFC\
    \ 1519].  For IPv6 addresses, the ipAddress field\n   MUST contain 32 octets similarly\
    \ encoded.  For example, a name\n   constraint for \"class C\" subnet 10.9.8.0\
    \ is represented as the octets\n   0A 09 08 00 FF FF FF 00, representing the CIDR\
    \ notation\n   10.9.8.0/255.255.255.0.\n   The syntax and semantics for name constraints\
    \ for otherName,\n   ediPartyName, and registeredID are not defined by this specification.\n\
    \      id-ce-nameConstraints OBJECT IDENTIFIER ::=  { id-ce 30 }\n      NameConstraints\
    \ ::= SEQUENCE {\n           permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\n\
    \           excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\n     \
    \ GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree\n      GeneralSubtree\
    \ ::= SEQUENCE {\n           base                    GeneralName,\n          \
    \ minimum         [0]     BaseDistance DEFAULT 0,\n           maximum        \
    \ [1]     BaseDistance OPTIONAL }\n      BaseDistance ::= INTEGER (0..MAX)\n"
- title: 4.2.1.12  Policy Constraints
  contents:
  - "4.2.1.12  Policy Constraints\n   The policy constraints extension can be used\
    \ in certificates issued\n   to CAs.  The policy constraints extension constrains\
    \ path validation\n   in two ways.  It can be used to prohibit policy mapping\
    \ or require\n   that each certificate in a path contain an acceptable policy\n\
    \   identifier.\n   If the inhibitPolicyMapping field is present, the value indicates\
    \ the\n   number of additional certificates that may appear in the path before\n\
    \   policy mapping is no longer permitted.  For example, a value of one\n   indicates\
    \ that policy mapping may be processed in certificates issued\n   by the subject\
    \ of this certificate, but not in additional\n   certificates in the path.\n \
    \  If the requireExplicitPolicy field is present, the value of\n   requireExplicitPolicy\
    \ indicates the number of additional certificates\n   that may appear in the path\
    \ before an explicit policy is required for\n   the entire path.  When an explicit\
    \ policy is required, it is\n   necessary for all certificates in the path to\
    \ contain an acceptable\n   policy identifier in the certificate policies extension.\
    \  An\n   acceptable policy identifier is the identifier of a policy required\n\
    \   by the user of the certification path or the identifier of a policy\n   which\
    \ has been declared equivalent through policy mapping.\n   Conforming CAs MUST\
    \ NOT issue certificates where policy constraints\n   is a empty sequence.  That\
    \ is, at least one of the\n   inhibitPolicyMapping field or the requireExplicitPolicy\
    \ field MUST be\n   present.  The behavior of clients that encounter a empty policy\n\
    \   constraints field is not addressed in this profile.\n   This extension MAY\
    \ be critical or non-critical.\n   id-ce-policyConstraints OBJECT IDENTIFIER ::=\
    \  { id-ce 36 }\n   PolicyConstraints ::= SEQUENCE {\n        requireExplicitPolicy\
    \           [0] SkipCerts OPTIONAL,\n        inhibitPolicyMapping            [1]\
    \ SkipCerts OPTIONAL }\n   SkipCerts ::= INTEGER (0..MAX)\n"
- title: 4.2.1.13  Extended Key Usage
  contents:
  - "4.2.1.13  Extended Key Usage\n   This extension indicates one or more purposes\
    \ for which the certified\n   public key may be used, in addition to or in place\
    \ of the basic\n   purposes indicated in the key usage extension.  In general,\
    \ this\n   extension will appear only in end entity certificates.  This\n   extension\
    \ is defined as follows:\n   id-ce-extKeyUsage OBJECT IDENTIFIER ::= { id-ce 37\
    \ }\n   ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId\n   KeyPurposeId\
    \ ::= OBJECT IDENTIFIER\n   Key purposes may be defined by any organization with\
    \ a need.  Object\n   identifiers used to identify key purposes MUST be assigned\
    \ in\n   accordance with IANA or ITU-T Recommendation X.660 [X.660].\n   This\
    \ extension MAY, at the option of the certificate issuer, be\n   either critical\
    \ or non-critical.\n   If the extension is present, then the certificate MUST\
    \ only be used\n   for one of the purposes indicated.  If multiple purposes are\n\
    \   indicated the application need not recognize all purposes indicated,\n   as\
    \ long as the intended purpose is present.  Certificate using\n   applications\
    \ MAY require that a particular purpose be indicated in\n   order for the certificate\
    \ to be acceptable to that application.\n   If a CA includes extended key usages\
    \ to satisfy such applications,\n   but does not wish to restrict usages of the\
    \ key, the CA can include\n   the special keyPurposeID anyExtendedKeyUsage.  If\
    \ the\n   anyExtendedKeyUsage keyPurposeID is present, the extension SHOULD NOT\n\
    \   be critical.\n   If a certificate contains both a key usage extension and\
    \ an extended\n   key usage extension, then both extensions MUST be processed\n\
    \   independently and the certificate MUST only be used for a purpose\n   consistent\
    \ with both extensions.  If there is no purpose consistent\n   with both extensions,\
    \ then the certificate MUST NOT be used for any\n   purpose.\n   The following\
    \ key usage purposes are defined:\n   anyExtendedKeyUsage OBJECT IDENTIFIER ::=\
    \ { id-ce-extKeyUsage 0 }\n   id-kp OBJECT IDENTIFIER ::= { id-pkix 3 }\n   id-kp-serverAuth\
    \             OBJECT IDENTIFIER ::= { id-kp 1 }\n   -- TLS WWW server authentication\n\
    \   -- Key usage bits that may be consistent: digitalSignature,\n   -- keyEncipherment\
    \ or keyAgreement\n   id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp\
    \ 2 }\n   -- TLS WWW client authentication\n   -- Key usage bits that may be consistent:\
    \ digitalSignature\n   -- and/or keyAgreement\n   id-kp-codeSigning          \
    \   OBJECT IDENTIFIER ::= { id-kp 3 }\n   -- Signing of downloadable executable\
    \ code\n   -- Key usage bits that may be consistent: digitalSignature\n   id-kp-emailProtection\
    \         OBJECT IDENTIFIER ::= { id-kp 4 }\n   -- E-mail protection\n   -- Key\
    \ usage bits that may be consistent: digitalSignature,\n   -- nonRepudiation,\
    \ and/or (keyEncipherment or keyAgreement)\n   id-kp-timeStamping            OBJECT\
    \ IDENTIFIER ::= { id-kp 8 }\n   -- Binding the hash of an object to a time\n\
    \   -- Key usage bits that may be consistent: digitalSignature\n   -- and/or nonRepudiation\n\
    \   id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }\n   -- Signing\
    \ OCSP responses\n   -- Key usage bits that may be consistent: digitalSignature\n\
    \   -- and/or nonRepudiation\n"
- title: 4.2.1.14  CRL Distribution Points
  contents:
  - "4.2.1.14  CRL Distribution Points\n   The CRL distribution points extension identifies\
    \ how CRL information\n   is obtained.  The extension SHOULD be non-critical,\
    \ but this profile\n   RECOMMENDS support for this extension by CAs and applications.\n\
    \   Further discussion of CRL management is contained in section 5.\n   The cRLDistributionPoints\
    \ extension is a SEQUENCE of\n   DistributionPoint.  A DistributionPoint consists\
    \ of three fields,\n   each of which is optional: distributionPoint, reasons,\
    \ and cRLIssuer.\n   While each of these fields is optional, a DistributionPoint\
    \ MUST NOT\n   consist of only the reasons field; either distributionPoint or\n\
    \   cRLIssuer MUST be present.  If the certificate issuer is not the CRL\n   issuer,\
    \ then the cRLIssuer field MUST be present and contain the Name\n   of the CRL\
    \ issuer.  If the certificate issuer is also the CRL issuer,\n   then the cRLIssuer\
    \ field MUST be omitted and the distributionPoint\n   field MUST be present. \
    \ If the distributionPoint field is omitted,\n   cRLIssuer MUST be present and\
    \ include a Name corresponding to an\n   X.500 or LDAP directory entry where the\
    \ CRL is located.\n   When the distributionPoint field is present, it contains\
    \ either a\n   SEQUENCE of general names or a single value, nameRelativeToCRLIssuer.\n\
    \   If the cRLDistributionPoints extension contains a general name of\n   type\
    \ URI, the following semantics MUST be assumed: the URI is a\n   pointer to the\
    \ current CRL for the associated reasons and will be\n   issued by the associated\
    \ cRLIssuer.  The expected values for the URI\n   are those defined in 4.2.1.7.\
    \  Processing rules for other values are\n   not defined by this specification.\n\
    \   If the DistributionPointName contains multiple values, each name\n   describes\
    \ a different mechanism to obtain the same CRL.  For example,\n   the same CRL\
    \ could be available for retrieval through both LDAP and\n   HTTP.\n   If the\
    \ DistributionPointName contains the single value\n   nameRelativeToCRLIssuer,\
    \ the value provides a distinguished name\n   fragment.  The fragment is appended\
    \ to the X.500 distinguished name\n   of the CRL issuer to obtain the distribution\
    \ point name.  If the\n   cRLIssuer field in the DistributionPoint is present,\
    \ then the name\n   fragment is appended to the distinguished name that it contains;\n\
    \   otherwise, the name fragment is appended to the certificate issuer\n   distinguished\
    \ name.  The DistributionPointName MUST NOT use the\n   nameRealtiveToCRLIssuer\
    \ alternative when cRLIssuer contains more than\n   one distinguished name.\n\
    \   If the DistributionPoint omits the reasons field, the CRL MUST\n   include\
    \ revocation information for all reasons.\n   The cRLIssuer identifies the entity\
    \ who signs and issues the CRL.  If\n   present, the cRLIssuer MUST contain at\
    \ least one an X.500\n   distinguished name (DN), and MAY also contain other name\
    \ forms.\n   Since the cRLIssuer is compared to the CRL issuer name, the X.501\n\
    \   type Name MUST follow the encoding rules for the issuer name field in\n  \
    \ the certificate (section 4.1.2.4).\n   id-ce-cRLDistributionPoints OBJECT IDENTIFIER\
    \ ::=  { id-ce 31 }\n   CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint\n\
    \   DistributionPoint ::= SEQUENCE {\n        distributionPoint       [0]    \
    \ DistributionPointName OPTIONAL,\n        reasons                 [1]     ReasonFlags\
    \ OPTIONAL,\n        cRLIssuer               [2]     GeneralNames OPTIONAL }\n\
    \   DistributionPointName ::= CHOICE {\n        fullName                [0]  \
    \   GeneralNames,\n        nameRelativeToCRLIssuer [1]     RelativeDistinguishedName\
    \ }\n   ReasonFlags ::= BIT STRING {\n        unused                  (0),\n \
    \       keyCompromise           (1),\n        cACompromise            (2),\n \
    \       affiliationChanged      (3),\n        superseded              (4),\n \
    \       cessationOfOperation    (5),\n        certificateHold         (6),\n \
    \       privilegeWithdrawn      (7),\n        aACompromise            (8) }\n"
- title: 4.2.1.15  Inhibit Any-Policy
  contents:
  - "4.2.1.15  Inhibit Any-Policy\n   The inhibit any-policy extension can be used\
    \ in certificates issued\n   to CAs.  The inhibit any-policy indicates that the\
    \ special anyPolicy\n   OID, with the value { 2 5 29 32 0 }, is not considered\
    \ an explicit\n   match for other certificate policies.  The value indicates the\
    \ number\n   of additional certificates that may appear in the path before\n \
    \  anyPolicy is no longer permitted.  For example, a value of one\n   indicates\
    \ that anyPolicy may be processed in certificates issued by\n   the subject of\
    \ this certificate, but not in additional certificates\n   in the path.\n   This\
    \ extension MUST be critical.\n   id-ce-inhibitAnyPolicy OBJECT IDENTIFIER ::=\
    \  { id-ce 54 }\n   InhibitAnyPolicy ::= SkipCerts\n   SkipCerts ::= INTEGER (0..MAX)\n"
- title: 4.2.1.16  Freshest CRL (a.k.a. Delta CRL Distribution Point)
  contents:
  - "4.2.1.16  Freshest CRL (a.k.a. Delta CRL Distribution Point)\n   The freshest\
    \ CRL extension identifies how delta CRL information is\n   obtained.  The extension\
    \ MUST be non-critical.  Further discussion of\n   CRL management is contained\
    \ in section 5.\n   The same syntax is used for this extension and the\n   cRLDistributionPoints\
    \ extension, and is described in section\n   4.2.1.14.  The same conventions apply\
    \ to both extensions.\n   id-ce-freshestCRL OBJECT IDENTIFIER ::=  { id-ce 46\
    \ }\n   FreshestCRL ::= CRLDistributionPoints\n"
- title: 4.2.2  Private Internet Extensions
  contents:
  - "4.2.2  Private Internet Extensions\n   This section defines two extensions for\
    \ use in the Internet Public\n   Key Infrastructure.  These extensions may be\
    \ used to direct\n   applications to on-line information about the issuing CA\
    \ or the\n   subject.  As the information may be available in multiple forms,\
    \ each\n   extension is a sequence of IA5String values, each of which represents\n\
    \   a URI.  The URI implicitly specifies the location and format of the\n   information\
    \ and the method for obtaining the information.\n   An object identifier is defined\
    \ for the private extension.  The\n   object identifier associated with the private\
    \ extension is defined\n   under the arc id-pe within the arc id-pkix.  Any future\
    \ extensions\n   defined for the Internet PKI are also expected to be defined\
    \ under\n   the arc id-pe.\n      id-pkix  OBJECT IDENTIFIER  ::=\n          \
    \     { iso(1) identified-organization(3) dod(6) internet(1)\n               \
    \        security(5) mechanisms(5) pkix(7) }\n      id-pe  OBJECT IDENTIFIER \
    \ ::=  { id-pkix 1 }\n"
- title: 4.2.2.1  Authority Information Access
  contents:
  - "4.2.2.1  Authority Information Access\n   The authority information access extension\
    \ indicates how to access CA\n   information and services for the issuer of the\
    \ certificate in which\n   the extension appears.  Information and services may\
    \ include on-line\n   validation services and CA policy data.  (The location of\
    \ CRLs is not\n   specified in this extension; that information is provided by\
    \ the\n   cRLDistributionPoints extension.)  This extension may be included in\n\
    \   end entity or CA certificates, and it MUST be non-critical.\n   id-pe-authorityInfoAccess\
    \ OBJECT IDENTIFIER ::= { id-pe 1 }\n   AuthorityInfoAccessSyntax  ::=\n     \
    \      SEQUENCE SIZE (1..MAX) OF AccessDescription\n   AccessDescription  ::=\
    \  SEQUENCE {\n           accessMethod          OBJECT IDENTIFIER,\n         \
    \  accessLocation        GeneralName  }\n   id-ad OBJECT IDENTIFIER ::= { id-pkix\
    \ 48 }\n   id-ad-caIssuers OBJECT IDENTIFIER ::= { id-ad 2 }\n   id-ad-ocsp OBJECT\
    \ IDENTIFIER ::= { id-ad 1 }\n   Each entry in the sequence AuthorityInfoAccessSyntax\
    \ describes the\n   format and location of additional information provided by\
    \ the CA that\n   issued the certificate in which this extension appears.  The\
    \ type and\n   format of the information is specified by the accessMethod field;\
    \ the\n   accessLocation field specifies the location of the information.  The\n\
    \   retrieval mechanism may be implied by the accessMethod or specified\n   by\
    \ accessLocation.\n   This profile defines two accessMethod OIDs: id-ad-caIssuers\
    \ and\n   id-ad-ocsp.\n   The id-ad-caIssuers OID is used when the additional\
    \ information lists\n   CAs that have issued certificates superior to the CA that\
    \ issued the\n   certificate containing this extension.  The referenced CA issuers\n\
    \   description is intended to aid certificate users in the selection of\n   a\
    \ certification path that terminates at a point trusted by the\n   certificate\
    \ user.\n   When id-ad-caIssuers appears as accessMethod, the accessLocation\n\
    \   field describes the referenced description server and the access\n   protocol\
    \ to obtain the referenced description.  The accessLocation\n   field is defined\
    \ as a GeneralName, which can take several forms.\n   Where the information is\
    \ available via http, ftp, or ldap,\n   accessLocation MUST be a uniformResourceIdentifier.\
    \  Where the\n   information is available via the Directory Access Protocol (DAP),\n\
    \   accessLocation MUST be a directoryName.  The entry for that\n   directoryName\
    \ contains CA certificates in the crossCertificatePair\n   attribute.  When the\
    \ information is available via electronic mail,\n   accessLocation MUST be an\
    \ rfc822Name.  The semantics of other\n   id-ad-caIssuers accessLocation name\
    \ forms are not defined.\n   The id-ad-ocsp OID is used when revocation information\
    \ for the\n   certificate containing this extension is available using the Online\n\
    \   Certificate Status Protocol (OCSP) [RFC 2560].\n   When id-ad-ocsp appears\
    \ as accessMethod, the accessLocation field is\n   the location of the OCSP responder,\
    \ using the conventions defined in\n   [RFC 2560].\n   Additional access descriptors\
    \ may be defined in other PKIX\n   specifications.\n"
- title: 4.2.2.2  Subject Information Access
  contents:
  - "4.2.2.2  Subject Information Access\n   The subject information access extension\
    \ indicates how to access\n   information and services for the subject of the\
    \ certificate in which\n   the extension appears.  When the subject is a CA, information\
    \ and\n   services may include certificate validation services and CA policy\n\
    \   data.  When the subject is an end entity, the information describes\n   the\
    \ type of services offered and how to access them.  In this case,\n   the contents\
    \ of this extension are defined in the protocol\n   specifications for the suported\
    \ services.  This extension may be\n   included in subject or CA certificates,\
    \ and it MUST be non-critical.\n   id-pe-subjectInfoAccess OBJECT IDENTIFIER ::=\
    \ { id-pe 11 }\n   SubjectInfoAccessSyntax  ::=\n           SEQUENCE SIZE (1..MAX)\
    \ OF AccessDescription\n   AccessDescription  ::=  SEQUENCE {\n           accessMethod\
    \          OBJECT IDENTIFIER,\n           accessLocation        GeneralName  }\n\
    \   Each entry in the sequence SubjectInfoAccessSyntax describes the\n   format\
    \ and location of additional information provided by the subject\n   of the certificate\
    \ in which this extension appears.  The type and\n   format of the information\
    \ is specified by the accessMethod field; the\n   accessLocation field specifies\
    \ the location of the information.  The\n   retrieval mechanism may be implied\
    \ by the accessMethod or specified\n   by accessLocation.\n   This profile defines\
    \ one access method to be used when the subject is\n   a CA, and one access method\
    \ to be used when the subject is an end\n   entity.  Additional access methods\
    \ may be defined in the future in\n   the protocol specifications for other services.\n\
    \   The id-ad-caRepository OID is used when the subject is a CA, and\n   publishes\
    \ its certificates and CRLs (if issued) in a repository.  The\n   accessLocation\
    \ field is defined as a GeneralName, which can take\n   several forms.  Where\
    \ the information is available via http, ftp, or\n   ldap, accessLocation MUST\
    \ be a uniformResourceIdentifier.  Where the\n   information is available via\
    \ the directory access protocol (dap),\n   accessLocation MUST be a directoryName.\
    \  When the information is\n   available via electronic mail, accessLocation MUST\
    \ be an rfc822Name.\n   The semantics of other name forms of of accessLocation\
    \ (when\n   accessMethod is id-ad-caRepository) are not defined by this\n   specification.\n\
    \   The id-ad-timeStamping OID is used when the subject offers\n   timestamping\
    \ services using the Time Stamp Protocol defined in\n   [PKIXTSA].  Where the\
    \ timestamping services are available via http or\n   ftp, accessLocation MUST\
    \ be a uniformResourceIdentifier.  Where the\n   timestamping services are available\
    \ via electronic mail,\n   accessLocation MUST be an rfc822Name.  Where timestamping\
    \ services\n   are available using TCP/IP, the dNSName or ipAddress name forms\
    \ may\n   be used.  The semantics of other name forms of accessLocation (when\n\
    \   accessMethod is id-ad-timeStamping) are not defined by this\n   specification.\n\
    \   Additional access descriptors may be defined in other PKIX\n   specifications.\n\
    \   id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }\n   id-ad-caRepository OBJECT IDENTIFIER\
    \ ::= { id-ad 5 }\n   id-ad-timeStamping OBJECT IDENTIFIER ::= { id-ad 3 }\n"
- title: 5  CRL and CRL Extensions Profile
  contents:
  - "5  CRL and CRL Extensions Profile\n   As discussed above, one goal of this X.509\
    \ v2 CRL profile is to\n   foster the creation of an interoperable and reusable\
    \ Internet PKI.\n   To achieve this goal, guidelines for the use of extensions\
    \ are\n   specified, and some assumptions are made about the nature of\n   information\
    \ included in the CRL.\n   CRLs may be used in a wide range of applications and\
    \ environments\n   covering a broad spectrum of interoperability goals and an\
    \ even\n   broader spectrum of operational and assurance requirements.  This\n\
    \   profile establishes a common baseline for generic applications\n   requiring\
    \ broad interoperability.  The profile defines a set of\n   information that can\
    \ be expected in every CRL.  Also, the profile\n   defines common locations within\
    \ the CRL for frequently used\n   attributes as well as common representations\
    \ for these attributes.\n   CRL issuers issue CRLs.  In general, the CRL issuer\
    \ is the CA.  CAs\n   publish CRLs to provide status information about the certificates\n\
    \   they issued.  However, a CA may delegate this responsibility to\n   another\
    \ trusted authority.  Whenever the CRL issuer is not the CA\n   that issued the\
    \ certificates, the CRL is referred to as an indirect\n   CRL.\n   Each CRL has\
    \ a particular scope.  The CRL scope is the set of\n   certificates that could\
    \ appear on a given CRL.  For example, the\n   scope could be \"all certificates\
    \ issued by CA X\", \"all CA\n   certificates issued by CA X\", \"all certificates\
    \ issued by CA X that\n   have been revoked for reasons of key compromise and\
    \ CA compromise\",\n   or could be a set of certificates based on arbitrary local\n\
    \   information, such as \"all certificates issued to the NIST employees\n   located\
    \ in Boulder\".\n   A complete CRL lists all unexpired certificates, within its\
    \ scope,\n   that have been revoked for one of the revocation reasons covered\
    \ by\n   the CRL scope.  The CRL issuer MAY also generate delta CRLs.  A delta\n\
    \   CRL only lists those certificates, within its scope, whose revocation\n  \
    \ status has changed since the issuance of a referenced complete CRL.\n   The\
    \ referenced complete CRL is referred to as a base CRL.  The scope\n   of a delta\
    \ CRL MUST be the same as the base CRL that it references.\n   This profile does\
    \ not define any private Internet CRL extensions or\n   CRL entry extensions.\n\
    \   Environments with additional or special purpose requirements may\n   build\
    \ on this profile or may replace it.\n   Conforming CAs are not required to issue\
    \ CRLs if other revocation or\n   certificate status mechanisms are provided.\
    \  When CRLs are issued,\n   the CRLs MUST be version 2 CRLs, include the date\
    \ by which the next\n   CRL will be issued in the nextUpdate field (section 5.1.2.5),\
    \ include\n   the CRL number extension (section 5.2.3), and include the authority\n\
    \   key identifier extension (section 5.2.1).  Conforming applications\n   that\
    \ support CRLs are REQUIRED to process both version 1 and version\n   2 complete\
    \ CRLs that provide revocation information for all\n   certificates issued by\
    \ one CA.  Conforming applications are NOT\n   REQUIRED to support processing\
    \ of delta CRLs, indirect CRLs, or CRLs\n   with a scope other than all certificates\
    \ issued by one CA.\n"
- title: 5.1  CRL Fields
  contents:
  - "5.1  CRL Fields\n   The X.509 v2 CRL syntax is as follows.  For signature calculation,\n\
    \   the data that is to be signed is ASN.1 DER encoded.  ASN.1 DER\n   encoding\
    \ is a tag, length, value encoding system for each element.\n   CertificateList\
    \  ::=  SEQUENCE  {\n        tbsCertList          TBSCertList,\n        signatureAlgorithm\
    \   AlgorithmIdentifier,\n        signatureValue       BIT STRING  }\n   TBSCertList\
    \  ::=  SEQUENCE  {\n        version                 Version OPTIONAL,\n     \
    \                                -- if present, MUST be v2\n        signature\
    \               AlgorithmIdentifier,\n        issuer                  Name,\n\
    \        thisUpdate              Time,\n        nextUpdate              Time OPTIONAL,\n\
    \        revokedCertificates     SEQUENCE OF SEQUENCE  {\n             userCertificate\
    \         CertificateSerialNumber,\n             revocationDate          Time,\n\
    \             crlEntryExtensions      Extensions OPTIONAL\n                  \
    \                         -- if present, MUST be v2\n                        \
    \          }  OPTIONAL,\n        crlExtensions           [0]  EXPLICIT Extensions\
    \ OPTIONAL\n                                           -- if present, MUST be\
    \ v2\n                                  }\n   -- Version, Time, CertificateSerialNumber,\
    \ and Extensions\n   -- are all defined in the ASN.1 in section 4.1\n   -- AlgorithmIdentifier\
    \ is defined in section 4.1.1.2\n   The following items describe the use of the\
    \ X.509 v2 CRL in the\n   Internet PKI.\n"
- title: 5.1.1  CertificateList Fields
  contents:
  - "5.1.1  CertificateList Fields\n   The CertificateList is a SEQUENCE of three\
    \ required fields.  The\n   fields are described in detail in the following subsections.\n"
- title: 5.1.1.1  tbsCertList
  contents:
  - "5.1.1.1  tbsCertList\n   The first field in the sequence is the tbsCertList.\
    \  This field is\n   itself a sequence containing the name of the issuer, issue\
    \ date,\n   issue date of the next list, the optional list of revoked\n   certificates,\
    \ and optional CRL extensions.  When there are no revoked\n   certificates, the\
    \ revoked certificates list is absent.  When one or\n   more certificates are\
    \ revoked, each entry on the revoked certificate\n   list is defined by a sequence\
    \ of user certificate serial number,\n   revocation date, and optional CRL entry\
    \ extensions.\n"
- title: 5.1.1.2  signatureAlgorithm
  contents:
  - "5.1.1.2  signatureAlgorithm\n   The signatureAlgorithm field contains the algorithm\
    \ identifier for\n   the algorithm used by the CRL issuer to sign the CertificateList.\n\
    \   The field is of type AlgorithmIdentifier, which is defined in section\n  \
    \ 4.1.1.2.  [PKIXALGS] lists the supported algorithms for this\n   specification,\
    \ but other signature algorithms MAY also be supported.\n   This field MUST contain\
    \ the same algorithm identifier as the\n   signature field in the sequence tbsCertList\
    \ (section 5.1.2.2).\n"
- title: 5.1.1.3  signatureValue
  contents:
  - "5.1.1.3  signatureValue\n   The signatureValue field contains a digital signature\
    \ computed upon\n   the ASN.1 DER encoded tbsCertList.  The ASN.1 DER encoded\
    \ tbsCertList\n   is used as the input to the signature function.  This signature\
    \ value\n   is encoded as a BIT STRING and included in the CRL signatureValue\n\
    \   field.  The details of this process are specified for each of the\n   supported\
    \ algorithms in [PKIXALGS].\n   CAs that are also CRL issuers MAY use one private\
    \ key to digitally\n   sign certificates and CRLs, or MAY use separate private\
    \ keys to\n   digitally sign certificates and CRLs.  When separate private keys\
    \ are\n   employed, each of the public keys associated with these private keys\n\
    \   is placed in a separate certificate, one with the keyCertSign bit set\n  \
    \ in the key usage extension, and one with the cRLSign bit set in the\n   key\
    \ usage extension (section 4.2.1.3).  When separate private keys\n   are employed,\
    \ certificates issued by the CA contain one authority key\n   identifier, and\
    \ the corresponding CRLs contain a different authority\n   key identifier.  The\
    \ use of separate CA certificates for validation\n   of certificate signatures\
    \ and CRL signatures can offer improved\n   security characteristics; however,\
    \ it imposes a burden on\n   applications, and it might limit interoperability.\
    \  Many applications\n   construct a certification path, and then validate the\
    \ certification\n   path (section 6).  CRL checking in turn requires a separate\n\
    \   certification path to be constructed and validated for the CA's CRL\n   signature\
    \ validation certificate.  Applications that perform CRL\n   checking MUST support\
    \ certification path validation when certificates\n   and CRLs are digitally signed\
    \ with the same CA private key.  These\n   applications SHOULD support certification\
    \ path validation when\n   certificates and CRLs are digitally signed with different\
    \ CA private\n   keys.\n"
- title: 5.1.2  Certificate List "To Be Signed"
  contents:
  - "5.1.2  Certificate List \"To Be Signed\"\n   The certificate list to be signed,\
    \ or TBSCertList, is a sequence of\n   required and optional fields.  The required\
    \ fields identify the CRL\n   issuer, the algorithm used to sign the CRL, the\
    \ date and time the CRL\n   was issued, and the date and time by which the CRL\
    \ issuer will issue\n   the next CRL.\n   Optional fields include lists of revoked\
    \ certificates and CRL\n   extensions.  The revoked certificate list is optional\
    \ to support the\n   case where a CA has not revoked any unexpired certificates\
    \ that it\n   has issued.  The profile requires conforming CRL issuers to use\
    \ the\n   CRL number and authority key identifier CRL extensions in all CRLs\n\
    \   issued.\n"
- title: 5.1.2.1  Version
  contents:
  - "5.1.2.1  Version\n   This optional field describes the version of the encoded\
    \ CRL.  When\n   extensions are used, as required by this profile, this field\
    \ MUST be\n   present and MUST specify version 2 (the integer value is 1).\n"
- title: 5.1.2.2  Signature
  contents:
  - "5.1.2.2  Signature\n   This field contains the algorithm identifier for the algorithm\
    \ used\n   to sign the CRL.  [PKIXALGS] lists OIDs for the most popular\n   signature\
    \ algorithms used in the Internet PKI.\n   This field MUST contain the same algorithm\
    \ identifier as the\n   signatureAlgorithm field in the sequence CertificateList\
    \ (section\n   5.1.1.2).\n"
- title: 5.1.2.3  Issuer Name
  contents:
  - "5.1.2.3  Issuer Name\n   The issuer name identifies the entity who has signed\
    \ and issued the\n   CRL.  The issuer identity is carried in the issuer name field.\n\
    \   Alternative name forms may also appear in the issuerAltName extension\n  \
    \ (section 5.2.2).  The issuer name field MUST contain an X.500\n   distinguished\
    \ name (DN).  The issuer name field is defined as the\n   X.501 type Name, and\
    \ MUST follow the encoding rules for the issuer\n   name field in the certificate\
    \ (section 4.1.2.4).\n"
- title: 5.1.2.4  This Update
  contents:
  - "5.1.2.4  This Update\n   This field indicates the issue date of this CRL.  ThisUpdate\
    \ may be\n   encoded as UTCTime or GeneralizedTime.\n   CRL issuers conforming\
    \ to this profile MUST encode thisUpdate as\n   UTCTime for dates through the\
    \ year 2049.  CRL issuers conforming to\n   this profile MUST encode thisUpdate\
    \ as GeneralizedTime for dates in\n   the year 2050 or later.\n   Where encoded\
    \ as UTCTime, thisUpdate MUST be specified and\n   interpreted as defined in section\
    \ 4.1.2.5.1.  Where encoded as\n   GeneralizedTime, thisUpdate MUST be specified\
    \ and interpreted as\n   defined in section 4.1.2.5.2.\n"
- title: 5.1.2.5  Next Update
  contents:
  - "5.1.2.5  Next Update\n   This field indicates the date by which the next CRL\
    \ will be issued.\n   The next CRL could be issued before the indicated date,\
    \ but it will\n   not be issued any later than the indicated date.  CRL issuers\
    \ SHOULD\n   issue CRLs with a nextUpdate time equal to or later than all previous\n\
    \   CRLs.  nextUpdate may be encoded as UTCTime or GeneralizedTime.\n   This profile\
    \ requires inclusion of nextUpdate in all CRLs issued by\n   conforming CRL issuers.\
    \  Note that the ASN.1 syntax of TBSCertList\n   describes this field as OPTIONAL,\
    \ which is consistent with the ASN.1\n   structure defined in [X.509].  The behavior\
    \ of clients processing\n   CRLs which omit nextUpdate is not specified by this\
    \ profile.\n   CRL issuers conforming to this profile MUST encode nextUpdate as\n\
    \   UTCTime for dates through the year 2049.  CRL issuers conforming to\n   this\
    \ profile MUST encode nextUpdate as GeneralizedTime for dates in\n   the year\
    \ 2050 or later.\n   Where encoded as UTCTime, nextUpdate MUST be specified and\n\
    \   interpreted as defined in section 4.1.2.5.1.  Where encoded as\n   GeneralizedTime,\
    \ nextUpdate MUST be specified and interpreted as\n   defined in section 4.1.2.5.2.\n"
- title: 5.1.2.6  Revoked Certificates
  contents:
  - "5.1.2.6  Revoked Certificates\n   When there are no revoked certificates, the\
    \ revoked certificates list\n   MUST be absent.  Otherwise, revoked certificates\
    \ are listed by their\n   serial numbers.  Certificates revoked by the CA are\
    \ uniquely\n   identified by the certificate serial number.  The date on which\
    \ the\n   revocation occurred is specified.  The time for revocationDate MUST\n\
    \   be expressed as described in section 5.1.2.4. Additional information\n   may\
    \ be supplied in CRL entry extensions; CRL entry extensions are\n   discussed\
    \ in section 5.3.\n"
- title: 5.1.2.7  Extensions
  contents:
  - "5.1.2.7  Extensions\n   This field may only appear if the version is 2 (section\
    \ 5.1.2.1).  If\n   present, this field is a sequence of one or more CRL extensions.\
    \  CRL\n   extensions are discussed in section 5.2.\n"
- title: 5.2  CRL Extensions
  contents:
  - "5.2  CRL Extensions\n   The extensions defined by ANSI X9, ISO/IEC, and ITU-T\
    \ for X.509 v2\n   CRLs [X.509] [X9.55] provide methods for associating additional\n\
    \   attributes with CRLs.  The X.509 v2 CRL format also allows\n   communities\
    \ to define private extensions to carry information unique\n   to those communities.\
    \  Each extension in a CRL may be designated as\n   critical or non-critical.\
    \  A CRL validation MUST fail if it\n   encounters a critical extension which\
    \ it does not know how to\n   process.  However, an unrecognized non-critical\
    \ extension may be\n   ignored.  The following subsections present those extensions\
    \ used\n   within Internet CRLs.  Communities may elect to include extensions\
    \ in\n   CRLs which are not defined in this specification.  However, caution\n\
    \   should be exercised in adopting any critical extensions in CRLs which\n  \
    \ might be used in a general context.\n   Conforming CRL issuers are REQUIRED\
    \ to include the authority key\n   identifier (section 5.2.1) and the CRL number\
    \ (section 5.2.3)\n   extensions in all CRLs issued.\n"
- title: 5.2.1  Authority Key Identifier
  contents:
  - "5.2.1  Authority Key Identifier\n   The authority key identifier extension provides\
    \ a means of\n   identifying the public key corresponding to the private key used\
    \ to\n   sign a CRL.  The identification can be based on either the key\n   identifier\
    \ (the subject key identifier in the CRL signer's\n   certificate) or on the issuer\
    \ name and serial number.  This extension\n   is especially useful where an issuer\
    \ has more than one signing key,\n   either due to multiple concurrent key pairs\
    \ or due to changeover.\n   Conforming CRL issuers MUST use the key identifier\
    \ method, and MUST\n   include this extension in all CRLs issued.\n   The syntax\
    \ for this CRL extension is defined in section 4.2.1.1.\n"
- title: 5.2.2  Issuer Alternative Name
  contents:
  - "5.2.2  Issuer Alternative Name\n   The issuer alternative names extension allows\
    \ additional identities\n   to be associated with the issuer of the CRL.  Defined\
    \ options include\n   an rfc822 name (electronic mail address), a DNS name, an\
    \ IP address,\n   and a URI.  Multiple instances of a name and multiple name forms\
    \ may\n   be included.  Whenever such identities are used, the issuer\n   alternative\
    \ name extension MUST be used; however, a DNS name MAY be\n   represented in the\
    \ issuer field using the domainComponent attribute\n   as described in section\
    \ 4.1.2.4.\n   The issuerAltName extension SHOULD NOT be marked critical.\n  \
    \ The OID and syntax for this CRL extension are defined in section\n   4.2.1.8.\n"
- title: 5.2.3  CRL Number
  contents:
  - "5.2.3  CRL Number\n   The CRL number is a non-critical CRL extension which conveys\
    \ a\n   monotonically increasing sequence number for a given CRL scope and\n \
    \  CRL issuer.  This extension allows users to easily determine when a\n   particular\
    \ CRL supersedes another CRL.  CRL numbers also support the\n   identification\
    \ of complementary complete CRLs and delta CRLs.  CRL\n   issuers conforming to\
    \ this profile MUST include this extension in all\n   CRLs.\n   If a CRL issuer\
    \ generates delta CRLs in addition to complete CRLs for\n   a given scope, the\
    \ complete CRLs and delta CRLs MUST share one\n   numbering sequence.  If a delta\
    \ CRL and a complete CRL that cover the\n   same scope are issued at the same\
    \ time, they MUST have the same CRL\n   number and provide the same revocation\
    \ information.  That is, the\n   combination of the delta CRL and an acceptable\
    \ complete CRL MUST\n   provide the same revocation information as the simultaneously\
    \ issued\n   complete CRL.\n   If a CRL issuer generates two CRLs (two complete\
    \ CRLs, two delta\n   CRLs, or a complete CRL and a delta CRL) for the same scope\
    \ at\n   different times, the two CRLs MUST NOT have the same CRL number.\n  \
    \ That is, if the this update field (section 5.1.2.4) in the two CRLs\n   are\
    \ not identical, the CRL numbers MUST be different.\n   Given the requirements\
    \ above, CRL numbers can be expected to contain\n   long integers.  CRL verifiers\
    \ MUST be able to handle CRLNumber values\n   up to 20 octets.  Conformant CRL\
    \ issuers MUST NOT use CRLNumber\n   values longer than 20 octets.\n   id-ce-cRLNumber\
    \ OBJECT IDENTIFIER ::= { id-ce 20 }\n   CRLNumber ::= INTEGER (0..MAX)\n"
- title: 5.2.4  Delta CRL Indicator
  contents:
  - "5.2.4  Delta CRL Indicator\n   The delta CRL indicator is a critical CRL extension\
    \ that identifies a\n   CRL as being a delta CRL.  Delta CRLs contain updates\
    \ to revocation\n   information previously distributed, rather than all the information\n\
    \   that would appear in a complete CRL.  The use of delta CRLs can\n   significantly\
    \ reduce network load and processing time in some\n   environments.  Delta CRLs\
    \ are generally smaller than the CRLs they\n   update, so applications that obtain\
    \ delta CRLs consume less network\n   bandwidth than applications that obtain\
    \ the corresponding complete\n   CRLs.  Applications which store revocation information\
    \ in a format\n   other than the CRL structure can add new revocation information\
    \ to\n   the local database without reprocessing information.\n   The delta CRL\
    \ indicator extension contains the single value of type\n   BaseCRLNumber.  The\
    \ CRL number identifies the CRL, complete for a\n   given scope, that was used\
    \ as the starting point in the generation of\n   this delta CRL.  A conforming\
    \ CRL issuer MUST publish the referenced\n   base CRL as a complete CRL.  The\
    \ delta CRL contains all updates to\n   the revocation status for that same scope.\
    \  The combination of a\n   delta CRL plus the referenced base CRL is equivalent\
    \ to a complete\n   CRL, for the applicable scope, at the time of publication\
    \ of the\n   delta CRL.\n   When a conforming CRL issuer generates a delta CRL,\
    \ the delta CRL\n   MUST include a critical delta CRL indicator extension.\n \
    \  When a delta CRL is issued, it MUST cover the same set of reasons and\n   the\
    \ same set of certificates that were covered by the base CRL it\n   references.\
    \  That is, the scope of the delta CRL MUST be the same as\n   the scope of the\
    \ complete CRL referenced as the base.  The referenced\n   base CRL and the delta\
    \ CRL MUST omit the issuing distribution point\n   extension or contain identical\
    \ issuing distribution point extensions.\n   Further, the CRL issuer MUST use\
    \ the same private key to sign the\n   delta CRL and any complete CRL that it\
    \ can be used to update.\n   An application that supports delta CRLs can construct\
    \ a CRL that is\n   complete for a given scope by combining a delta CRL for that\
    \ scope\n   with either an issued CRL that is complete for that scope or a\n \
    \  locally constructed CRL that is complete for that scope.\n   When a delta CRL\
    \ is combined with a complete CRL or a locally\n   constructed CRL, the resulting\
    \ locally constructed CRL has the CRL\n   number specified in the CRL number extension\
    \ found in the delta CRL\n   used in its construction.  In addition, the resulting\
    \ locally\n   constructed CRL has the thisUpdate and nextUpdate times specified\
    \ in\n   the corresponding fields of the delta CRL used in its construction.\n\
    \   In addition, the locally constructed CRL inherits the issuing\n   distribution\
    \ point from the delta CRL.\n   A complete CRL and a delta CRL MAY be combined\
    \ if the following four\n   conditions are satisfied:\n      (a)  The complete\
    \ CRL and delta CRL have the same issuer.\n      (b)  The complete CRL and delta\
    \ CRL have the same scope.  The two\n      CRLs have the same scope if either\
    \ of the following conditions are\n      met:\n         (1)  The issuingDistributionPoint\
    \ extension is omitted from\n         both the complete CRL and the delta CRL.\n\
    \         (2)  The issuingDistributionPoint extension is present in both\n   \
    \      the complete CRL and the delta CRL, and the values for each of\n      \
    \   the fields in the extensions are the same in both CRLs.\n      (c)  The CRL\
    \ number of the complete CRL is equal to or greater\n      than the BaseCRLNumber\
    \ specified in the delta CRL.  That is, the\n      complete CRL contains (at a\
    \ minimum) all the revocation\n      information held by the referenced base CRL.\n\
    \      (d)  The CRL number of the complete CRL is less than the CRL\n      number\
    \ of the delta CRL.  That is, the delta CRL follows the\n      complete CRL in\
    \ the numbering sequence.\n   CRL issuers MUST ensure that the combination of\
    \ a delta CRL and any\n   appropriate complete CRL accurately reflects the current\
    \ revocation\n   status.  The CRL issuer MUST include an entry in the delta CRL\
    \ for\n   each certificate within the scope of the delta CRL whose status has\n\
    \   changed since the generation of the referenced base CRL:\n      (a)  If the\
    \ certificate is revoked for a reason included in the\n      scope of the CRL,\
    \ list the certificate as revoked.\n      (b)  If the certificate is valid and\
    \ was listed on the referenced\n      base CRL or any subsequent CRL with reason\
    \ code certificateHold,\n      and the reason code certificateHold is included\
    \ in the scope of\n      the CRL, list the certificate with the reason code removeFromCRL.\n\
    \      (c)  If the certificate is revoked for a reason outside the scope\n   \
    \   of the CRL, but the certificate was listed on the referenced base\n      CRL\
    \ or any subsequent CRL with a reason code included in the scope\n      of this\
    \ CRL, list the certificate as revoked but omit the reason\n      code.\n    \
    \  (d)  If the certificate is revoked for a reason outside the scope\n      of\
    \ the CRL and the certificate was neither listed on the\n      referenced base\
    \ CRL nor any subsequent CRL with a reason code\n      included in the scope of\
    \ this CRL, do not list the certificate on\n      this CRL.\n   The status of\
    \ a certificate is considered to have changed if it is\n   revoked, placed on\
    \ hold, released from hold, or if its revocation\n   reason changes.\n   It is\
    \ appropriate to list a certificate with reason code\n   removeFromCRL on a delta\
    \ CRL even if the certificate was not on hold\n   in the referenced base CRL.\
    \  If the certificate was placed on hold in\n   any CRL issued after the base\
    \ but before this delta CRL and then\n   released from hold, it MUST be listed\
    \ on the delta CRL with\n   revocation reason removeFromCRL.\n   A CRL issuer\
    \ MAY optionally list a certificate on a delta CRL with\n   reason code removeFromCRL\
    \ if the notAfter time specified in the\n   certificate precedes the thisUpdate\
    \ time specified in the delta CRL\n   and the certificate was listed on the referenced\
    \ base CRL or in any\n   CRL issued after the base but before this delta CRL.\n\
    \   If a certificate revocation notice first appears on a delta CRL, then\n  \
    \ it is possible for the certificate validity period to expire before\n   the\
    \ next complete CRL for the same scope is issued.  In this case,\n   the revocation\
    \ notice MUST be included in all subsequent delta CRLs\n   until the revocation\
    \ notice is included on at least one explicitly\n   issued complete CRL for this\
    \ scope.\n   An application that supports delta CRLs MUST be able to construct\
    \ a\n   current complete CRL by combining a previously issued complete CRL\n \
    \  and the most current delta CRL.  An application that supports delta\n   CRLs\
    \ MAY also be able to construct a current complete CRL by\n   combining a previously\
    \ locally constructed complete CRL and the\n   current delta CRL.  A delta CRL\
    \ is considered to be the current one\n   if the current time is between the times\
    \ contained in the thisUpdate\n   and nextUpdate fields.  Under some circumstances,\
    \ the CRL issuer may\n   publish one or more delta CRLs before indicated by the\
    \ nextUpdate\n   field.  If more than one current delta CRL for a given scope\
    \ is\n   encountered, the application SHOULD consider the one with the latest\n\
    \   value in thisUpdate to be the most current one.\n   id-ce-deltaCRLIndicator\
    \ OBJECT IDENTIFIER ::= { id-ce 27 }\n   BaseCRLNumber ::= CRLNumber\n"
- title: 5.2.5  Issuing Distribution Point
  contents:
  - "5.2.5  Issuing Distribution Point\n   The issuing distribution point is a critical\
    \ CRL extension that\n   identifies the CRL distribution point and scope for a\
    \ particular CRL,\n   and it indicates whether the CRL covers revocation for end\
    \ entity\n   certificates only, CA certificates only, attribute certificates only,\n\
    \   or a limited set of reason codes.  Although the extension is\n   critical,\
    \ conforming implementations are not required to support this\n   extension.\n\
    \   The CRL is signed using the CRL issuer's private key.  CRL\n   Distribution\
    \ Points do not have their own key pairs.  If the CRL is\n   stored in the X.500\
    \ Directory, it is stored in the Directory entry\n   corresponding to the CRL\
    \ distribution point, which may be different\n   than the Directory entry of the\
    \ CRL issuer.\n   The reason codes associated with a distribution point MUST be\n\
    \   specified in onlySomeReasons.  If onlySomeReasons does not appear,\n   the\
    \ distribution point MUST contain revocations for all reason codes.\n   CAs may\
    \ use CRL distribution points to partition the CRL on the basis\n   of compromise\
    \ and routine revocation.  In this case, the revocations\n   with reason code\
    \ keyCompromise (1), cACompromise (2), and\n   aACompromise (8) appear in one\
    \ distribution point, and the\n   revocations with other reason codes appear in\
    \ another distribution\n   point.\n   If the distributionPoint field is present\
    \ and contains a URI, the\n   following semantics MUST be assumed: the object\
    \ is a pointer to the\n   most current CRL issued by this CRL issuer.  The URI\
    \ schemes ftp,\n   http, mailto [RFC1738] and ldap [RFC1778] are defined for this\n\
    \   purpose.  The URI MUST be an absolute pathname, not a relative\n   pathname,\
    \ and MUST specify the host.\n   If the distributionPoint field is absent, the\
    \ CRL MUST contain\n   entries for all revoked unexpired certificates issued by\
    \ the CRL\n   issuer, if any, within the scope of the CRL.\n   The CRL issuer\
    \ MUST assert the indirectCRL boolean, if the scope of\n   the CRL includes certificates\
    \ issued by authorities other than the\n   CRL issuer.  The authority responsible\
    \ for each entry is indicated by\n   the certificate issuer CRL entry extension\
    \ (section 5.3.4).\n   id-ce-issuingDistributionPoint OBJECT IDENTIFIER ::= {\
    \ id-ce 28 }\n   issuingDistributionPoint ::= SEQUENCE {\n        distributionPoint\
    \          [0] DistributionPointName OPTIONAL,\n        onlyContainsUserCerts\
    \      [1] BOOLEAN DEFAULT FALSE,\n        onlyContainsCACerts        [2] BOOLEAN\
    \ DEFAULT FALSE,\n        onlySomeReasons            [3] ReasonFlags OPTIONAL,\n\
    \        indirectCRL                [4] BOOLEAN DEFAULT FALSE,\n        onlyContainsAttributeCerts\
    \ [5] BOOLEAN DEFAULT FALSE }\n"
- title: 5.2.6  Freshest CRL (a.k.a. Delta CRL Distribution Point)
  contents:
  - "5.2.6  Freshest CRL (a.k.a. Delta CRL Distribution Point)\n   The freshest CRL\
    \ extension identifies how delta CRL information for\n   this complete CRL is\
    \ obtained.  The extension MUST be non-critical.\n   This extension MUST NOT appear\
    \ in delta CRLs.\n   The same syntax is used for this extension as the\n   cRLDistributionPoints\
    \ certificate extension, and is described in\n   section 4.2.1.14.  However, only\
    \ the distribution point field is\n   meaningful in this context.  The reasons\
    \ and CRLIssuer fields MUST be\n   omitted from this CRL extension.\n   Each distribution\
    \ point name provides the location at which a delta\n   CRL for this complete\
    \ CRL can be found.  The scope of these delta\n   CRLs MUST be the same as the\
    \ scope of this complete CRL.  The\n   contents of this CRL extension are only\
    \ used to locate delta CRLs;\n   the contents are not used to validate the CRL\
    \ or the referenced delta\n   CRLs.  The encoding conventions defined for distribution\
    \ points in\n   section 4.2.1.14 apply to this extension.\n   id-ce-freshestCRL\
    \ OBJECT IDENTIFIER ::=  { id-ce 46 }\n   FreshestCRL ::= CRLDistributionPoints\n"
- title: 5.3  CRL Entry Extensions
  contents:
  - "5.3  CRL Entry Extensions\n   The CRL entry extensions defined by ISO/IEC, ITU-T,\
    \ and ANSI X9 for\n   X.509 v2 CRLs provide methods for associating additional\
    \ attributes\n   with CRL entries [X.509] [X9.55].  The X.509 v2 CRL format also\n\
    \   allows communities to define private CRL entry extensions to carry\n   information\
    \ unique to those communities.  Each extension in a CRL\n   entry may be designated\
    \ as critical or non-critical.  A CRL\n   validation MUST fail if it encounters\
    \ a critical CRL entry extension\n   which it does not know how to process.  However,\
    \ an unrecognized non-\n   critical CRL entry extension may be ignored.  The following\n\
    \   subsections present recommended extensions used within Internet CRL\n   entries\
    \ and standard locations for information.  Communities may\n   elect to use additional\
    \ CRL entry extensions; however, caution should\n   be exercised in adopting any\
    \ critical extensions in CRL entries which\n   might be used in a general context.\n\
    \   All CRL entry extensions used in this specification are non-critical.\n  \
    \ Support for these extensions is optional for conforming CRL issuers\n   and\
    \ applications.  However, CRL issuers SHOULD include reason codes\n   (section\
    \ 5.3.1) and invalidity dates (section 5.3.3) whenever this\n   information is\
    \ available.\n"
- title: 5.3.1  Reason Code
  contents:
  - "5.3.1  Reason Code\n   The reasonCode is a non-critical CRL entry extension that\
    \ identifies\n   the reason for the certificate revocation.  CRL issuers are strongly\n\
    \   encouraged to include meaningful reason codes in CRL entries;\n   however,\
    \ the reason code CRL entry extension SHOULD be absent instead\n   of using the\
    \ unspecified (0) reasonCode value.\n   id-ce-cRLReason OBJECT IDENTIFIER ::=\
    \ { id-ce 21 }\n   -- reasonCode ::= { CRLReason }\n   CRLReason ::= ENUMERATED\
    \ {\n        unspecified             (0),\n        keyCompromise           (1),\n\
    \        cACompromise            (2),\n        affiliationChanged      (3),\n\
    \        superseded              (4),\n        cessationOfOperation    (5),\n\
    \        certificateHold         (6),\n        removeFromCRL           (8),\n\
    \        privilegeWithdrawn      (9),\n        aACompromise           (10) }\n"
- title: 5.3.2  Hold Instruction Code
  contents:
  - "5.3.2  Hold Instruction Code\n   The hold instruction code is a non-critical\
    \ CRL entry extension that\n   provides a registered instruction identifier which\
    \ indicates the\n   action to be taken after encountering a certificate that has\
    \ been\n   placed on hold.\n   id-ce-holdInstructionCode OBJECT IDENTIFIER ::=\
    \ { id-ce 23 }\n   holdInstructionCode ::= OBJECT IDENTIFIER\n   The following\
    \ instruction codes have been defined.  Conforming\n   applications that process\
    \ this extension MUST recognize the following\n   instruction codes.\n   holdInstruction\
    \    OBJECT IDENTIFIER ::=\n                    { iso(1) member-body(2) us(840)\
    \ x9-57(10040) 2 }\n   id-holdinstruction-none   OBJECT IDENTIFIER ::= {holdInstruction\
    \ 1}\n   id-holdinstruction-callissuer\n                             OBJECT IDENTIFIER\
    \ ::= {holdInstruction 2}\n   id-holdinstruction-reject OBJECT IDENTIFIER ::=\
    \ {holdInstruction 3}\n   Conforming applications which encounter an id-holdinstruction-\n\
    \   callissuer MUST call the certificate issuer or reject the\n   certificate.\
    \  Conforming applications which encounter an id-\n   holdinstruction-reject MUST\
    \ reject the certificate.  The hold\n   instruction id-holdinstruction-none is\
    \ semantically equivalent to the\n   absence of a holdInstructionCode, and its\
    \ use is strongly deprecated\n   for the Internet PKI.\n"
- title: 5.3.3  Invalidity Date
  contents:
  - "5.3.3  Invalidity Date\n   The invalidity date is a non-critical CRL entry extension\
    \ that\n   provides the date on which it is known or suspected that the private\n\
    \   key was compromised or that the certificate otherwise became invalid.\n  \
    \ This date may be earlier than the revocation date in the CRL entry,\n   which\
    \ is the date at which the CA processed the revocation.  When a\n   revocation\
    \ is first posted by a CRL issuer in a CRL, the invalidity\n   date may precede\
    \ the date of issue of earlier CRLs, but the\n   revocation date SHOULD NOT precede\
    \ the date of issue of earlier CRLs.\n   Whenever this information is available,\
    \ CRL issuers are strongly\n   encouraged to share it with CRL users.\n   The\
    \ GeneralizedTime values included in this field MUST be expressed\n   in Greenwich\
    \ Mean Time (Zulu), and MUST be specified and interpreted\n   as defined in section\
    \ 4.1.2.5.2.\n   id-ce-invalidityDate OBJECT IDENTIFIER ::= { id-ce 24 }\n   invalidityDate\
    \ ::=  GeneralizedTime\n"
- title: 5.3.4  Certificate Issuer
  contents:
  - "5.3.4  Certificate Issuer\n   This CRL entry extension identifies the certificate\
    \ issuer associated\n   with an entry in an indirect CRL, that is, a CRL that\
    \ has the\n   indirectCRL indicator set in its issuing distribution point\n  \
    \ extension.  If this extension is not present on the first entry in an\n   indirect\
    \ CRL, the certificate issuer defaults to the CRL issuer.  On\n   subsequent entries\
    \ in an indirect CRL, if this extension is not\n   present, the certificate issuer\
    \ for the entry is the same as that for\n   the preceding entry.  This field is\
    \ defined as follows:\n   id-ce-certificateIssuer   OBJECT IDENTIFIER ::= { id-ce\
    \ 29 }\n   certificateIssuer ::=     GeneralNames\n   If used by conforming CRL\
    \ issuers, this extension MUST always be\n   critical.  If an implementation ignored\
    \ this extension it could not\n   correctly attribute CRL entries to certificates.\
    \  This specification\n   RECOMMENDS that implementations recognize this extension.\n"
- title: 6  Certification Path Validation
  contents:
  - "6  Certification Path Validation\n   Certification path validation procedures\
    \ for the Internet PKI are\n   based on the algorithm supplied in [X.509].  Certification\
    \ path\n   processing verifies the binding between the subject distinguished\n\
    \   name and/or subject alternative name and subject public key.  The\n   binding\
    \ is limited by constraints which are specified in the\n   certificates which\
    \ comprise the path and inputs which are specified\n   by the relying party. \
    \ The basic constraints and policy constraints\n   extensions allow the certification\
    \ path processing logic to automate\n   the decision making process.\n   This\
    \ section describes an algorithm for validating certification\n   paths.  Conforming\
    \ implementations of this specification are not\n   required to implement this\
    \ algorithm, but MUST provide functionality\n   equivalent to the external behavior\
    \ resulting from this procedure.\n   Any algorithm may be used by a particular\
    \ implementation so long as\n   it derives the correct result.\n   In section\
    \ 6.1, the text describes basic path validation.  Valid\n   paths begin with certificates\
    \ issued by a trust anchor.  The\n   algorithm requires the public key of the\
    \ CA, the CA's name, and any\n   constraints upon the set of paths which may be\
    \ validated using this\n   key.\n   The selection of a trust anchor is a matter\
    \ of policy: it could be\n   the top CA in a hierarchical PKI; the CA that issued\
    \ the verifier's\n   own certificate(s); or any other CA in a network PKI.  The\
    \ path\n   validation procedure is the same regardless of the choice of trust\n\
    \   anchor.  In addition, different applications may rely on different\n   trust\
    \ anchor, or may accept paths that begin with any of a set of\n   trust anchor.\n\
    \   Section 6.2 describes methods for using the path validation algorithm\n  \
    \ in specific implementations.  Two specific cases are discussed: the\n   case\
    \ where paths may begin with one of several trusted CAs; and where\n   compatibility\
    \ with the PEM architecture is required.\n   Section 6.3 describes the steps necessary\
    \ to determine if a\n   certificate is revoked or on hold status when CRLs are\
    \ the revocation\n   mechanism used by the certificate issuer.\n"
- title: 6.1  Basic Path Validation
  contents:
  - "6.1  Basic Path Validation\n   This text describes an algorithm for X.509 path\
    \ processing.  A\n   conformant implementation MUST include an X.509 path processing\n\
    \   procedure that is functionally equivalent to the external behavior of\n  \
    \ this algorithm.  However, support for some of the certificate\n   extensions\
    \ processed in this algorithm are OPTIONAL for compliant\n   implementations.\
    \  Clients that do not support these extensions MAY\n   omit the corresponding\
    \ steps in the path validation algorithm.\n   For example, clients are NOT REQUIRED\
    \ to support the policy mapping\n   extension.  Clients that do not support this\
    \ extension MAY omit the\n   path validation steps where policy mappings are processed.\
    \  Note that\n   clients MUST reject the certificate if it contains an unsupported\n\
    \   critical extension.\n   The algorithm presented in this section validates\
    \ the certificate\n   with respect to the current date and time.  A conformant\n\
    \   implementation MAY also support validation with respect to some point\n  \
    \ in the past.  Note that mechanisms are not available for validating a\n   certificate\
    \ with respect to a time outside the certificate validity\n   period.\n   The\
    \ trust anchor is an input to the algorithm.  There is no\n   requirement that\
    \ the same trust anchor be used to validate all\n   certification paths.  Different\
    \ trust anchors MAY be used to validate\n   different paths, as discussed further\
    \ in Section 6.2.\n   The primary goal of path validation is to verify the binding\
    \ between\n   a subject distinguished name or a subject alternative name and\n\
    \   subject public key, as represented in the end entity certificate,\n   based\
    \ on the public key of the trust anchor.  This requires obtaining\n   a sequence\
    \ of certificates that support that binding.  The procedure\n   performed to obtain\
    \ this sequence of certificates is outside the\n   scope of this specification.\n\
    \   To meet this goal, the path validation process verifies, among other\n   things,\
    \ that a prospective certification path (a sequence of n\n   certificates) satisfies\
    \ the following conditions:\n      (a)  for all x in {1, ..., n-1}, the subject\
    \ of certificate x is\n      the issuer of certificate x+1;\n      (b)  certificate\
    \ 1 is issued by the trust anchor;\n      (c)  certificate n is the certificate\
    \ to be validated; and\n      (d)  for all x in {1, ..., n}, the certificate was\
    \ valid at the\n      time in question.\n   When the trust anchor is provided\
    \ in the form of a self-signed\n   certificate, this self-signed certificate is\
    \ not included as part of\n   the prospective certification path.  Information\
    \ about trust anchors\n   are provided as inputs to the certification path validation\
    \ algorithm\n   (section 6.1.1).\n   A particular certification path may not,\
    \ however, be appropriate for\n   all applications.  Therefore, an application\
    \ MAY augment this\n   algorithm to further limit the set of valid paths.  The\
    \ path\n   validation process also determines the set of certificate policies\n\
    \   that are valid for this path, based on the certificate policies\n   extension,\
    \ policy mapping extension, policy constraints extension,\n   and inhibit any-policy\
    \ extension.  To achieve this, the path\n   validation algorithm constructs a\
    \ valid policy tree.  If the set of\n   certificate policies that are valid for\
    \ this path is not empty, then\n   the result will be a valid policy tree of depth\
    \ n, otherwise the\n   result will be a null valid policy tree.\n   A certificate\
    \ is self-issued if the DNs that appear in the subject\n   and issuer fields are\
    \ identical and are not empty.  In general, the\n   issuer and subject of the\
    \ certificates that make up a path are\n   different for each certificate.  However,\
    \ a CA may issue a\n   certificate to itself to support key rollover or changes\
    \ in\n   certificate policies.  These self-issued certificates are not counted\n\
    \   when evaluating path length or name constraints.\n   This section presents\
    \ the algorithm in four basic steps: (1)\n   initialization, (2) basic certificate\
    \ processing, (3) preparation for\n   the next certificate, and (4) wrap-up. \
    \ Steps (1) and (4) are\n   performed exactly once.  Step (2) is performed for\
    \ all certificates\n   in the path.  Step (3) is performed for all certificates\
    \ in the path\n   except the final certificate.  Figure 2 provides a high-level\n\
    \   flowchart of this algorithm.\n                           +-------+\n     \
    \                      | START |\n                           +-------+\n     \
    \                          |\n                               V\n             \
    \          +----------------+\n                       | Initialization |\n   \
    \                    +----------------+\n                               |\n  \
    \                             +<--------------------+\n                      \
    \         |                     |\n                               V          \
    \           |\n                       +----------------+            |\n      \
    \                 |  Process Cert  |            |\n                       +----------------+\
    \            |\n                               |                     |\n     \
    \                          V                     |\n                       +================+\
    \            |\n                       |  IF Last Cert  |            |\n     \
    \                  |    in Path     |            |\n                       +================+\
    \            |\n                         |            |              |\n     \
    \               THEN |            | ELSE         |\n                         V\
    \            V              |\n              +----------------+ +----------------+\
    \  |\n              |    Wrap up     | |  Prepare for   |  |\n              +----------------+\
    \ |   Next Cert    |  |\n                      |          +----------------+ \
    \ |\n                      V               |              |\n                \
    \  +-------+           +--------------+\n                  | STOP  |\n       \
    \           +-------+\n         Figure 2.  Certification Path Processing Flowchart\n"
- title: 6.1.1  Inputs
  contents:
  - "6.1.1  Inputs\n   This algorithm assumes the following seven inputs are provided\
    \ to the\n   path processing logic:\n      (a)  a prospective certification path\
    \ of length n.\n      (b)  the current date/time.\n      (c)  user-initial-policy-set:\
    \  A set of certificate policy\n      identifiers naming the policies that are\
    \ acceptable to the\n      certificate user.  The user-initial-policy-set contains\
    \ the\n      special value any-policy if the user is not concerned about\n   \
    \   certificate policy.\n      (d)  trust anchor information, describing a CA\
    \ that serves as a\n      trust anchor for the certification path.  The trust\
    \ anchor\n      information includes:\n         (1)  the trusted issuer name,\n\
    \         (2)  the trusted public key algorithm,\n         (3)  the trusted public\
    \ key, and\n         (4)  optionally, the trusted public key parameters associated\n\
    \         with the public key.\n      The trust anchor information may be provided\
    \ to the path\n      processing procedure in the form of a self-signed certificate.\n\
    \      The trusted anchor information is trusted because it was delivered\n  \
    \    to the path processing procedure by some trustworthy out-of-band\n      procedure.\
    \  If the trusted public key algorithm requires\n      parameters, then the parameters\
    \ are provided along with the\n      trusted public key.\n      (e) initial-policy-mapping-inhibit,\
    \ which indicates if policy\n      mapping is allowed in the certification path.\n\
    \      (f) initial-explicit-policy, which indicates if the path must be\n    \
    \  valid for at least one of the certificate policies in the user-\n      initial-policy-set.\n\
    \      (g) initial-any-policy-inhibit, which indicates whether the\n      anyPolicy\
    \ OID should be processed if it is included in a\n      certificate.\n"
- title: 6.1.2  Initialization
  contents:
  - "6.1.2  Initialization\n   This initialization phase establishes eleven state\
    \ variables based\n   upon the seven inputs:\n      (a)  valid_policy_tree:  A\
    \ tree of certificate policies with their\n      optional qualifiers; each of\
    \ the leaves of the tree represents a\n      valid policy at this stage in the\
    \ certification path validation.\n      If valid policies exist at this stage\
    \ in the certification path\n      validation, the depth of the tree is equal\
    \ to the number of\n      certificates in the chain that have been processed.\
    \  If valid\n      policies do not exist at this stage in the certification path\n\
    \      validation, the tree is set to NULL.  Once the tree is set to\n      NULL,\
    \ policy processing ceases.\n      Each node in the valid_policy_tree includes\
    \ four data objects: the\n      valid policy, a set of associated policy qualifiers,\
    \ a set of one\n      or more expected policy values, and a criticality indicator.\
    \  If\n      the node is at depth x, the components of the node have the\n   \
    \   following semantics:\n         (1)  The valid_policy is a single policy OID\
    \ representing a\n         valid policy for the path of length x.\n         (2)\
    \  The qualifier_set is a set of policy qualifiers associated\n         with the\
    \ valid policy in certificate x.\n         (3)  The criticality_indicator indicates\
    \ whether the\n         certificate policy extension in certificate x was marked\
    \ as\n         critical.\n         (4)  The expected_policy_set contains one or\
    \ more policy OIDs\n         that would satisfy this policy in the certificate\
    \ x+1.\n      The initial value of the valid_policy_tree is a single node with\n\
    \      valid_policy anyPolicy, an empty qualifier_set, an\n      expected_policy_set\
    \ with the single value anyPolicy, and a\n      criticality_indicator of FALSE.\
    \  This node is considered to be at\n      depth zero.\n      Figure 3 is a graphic\
    \ representation of the initial state of the\n      valid_policy_tree.  Additional\
    \ figures will use this format to\n      describe changes in the valid_policy_tree\
    \ during path processing.\n              +----------------+\n              | \
    \  anyPolicy    |   <---- valid_policy\n              +----------------+\n   \
    \           |       {}       |   <---- qualifier_set\n              +----------------+\n\
    \              |     FALSE      |   <---- criticality_indicator\n            \
    \  +----------------+\n              |  {anyPolicy}   |   <---- expected_policy_set\n\
    \              +----------------+\n      Figure 3.  Initial value of the valid_policy_tree\
    \ state variable\n      (b) permitted_subtrees:  A set of root names for each\
    \ name type\n      (e.g., X.500 distinguished names, email addresses, or ip\n\
    \      addresses) defining a set of subtrees within which all subject\n      names\
    \ in subsequent certificates in the certification path MUST\n      fall.  This\
    \ variable includes a set for each name type: the\n      initial value for the\
    \ set for Distinguished Names is the set of\n      all Distinguished names; the\
    \ initial value for the set of RFC822\n      names is the set of all RFC822 names,\
    \ etc.\n      (c) excluded_subtrees:  A set of root names for each name type\n\
    \      (e.g., X.500 distinguished names, email addresses, or ip\n      addresses)\
    \ defining a set of subtrees within which no subject name\n      in subsequent\
    \ certificates in the certification path may fall.\n      This variable includes\
    \ a set for each name type, and the initial\n      value for each set is empty.\n\
    \      (d) explicit_policy: an integer which indicates if a non-NULL\n      valid_policy_tree\
    \ is required. The integer indicates the number of\n      non-self-issued certificates\
    \ to be processed before this\n      requirement is imposed.  Once set, this variable\
    \ may be decreased,\n      but may not be increased. That is, if a certificate\
    \ in the path\n      requires a non-NULL valid_policy_tree, a later certificate\
    \ can not\n      remove this requirement. If initial-explicit-policy is set, then\n\
    \      the initial value is 0, otherwise the initial value is n+1.\n      (e)\
    \ inhibit_any-policy: an integer which indicates whether the\n      anyPolicy\
    \ policy identifier is considered a match. The integer\n      indicates the number\
    \ of non-self-issued certificates to be\n      processed before the anyPolicy\
    \ OID, if asserted in a certificate,\n      is ignored. Once set, this variable\
    \ may be decreased, but may not\n      be increased. That is, if a certificate\
    \ in the path inhibits\n      processing of anyPolicy, a later certificate can\
    \ not permit it.\n      If initial-any-policy-inhibit is set, then the initial\
    \ value is 0,\n      otherwise the initial value is n+1.\n      (f) policy_mapping:\
    \ an integer which indicates if policy mapping\n      is permitted.  The integer\
    \ indicates the number of non-self-issued\n      certificates to be processed\
    \ before policy mapping is inhibited.\n      Once set, this variable may be decreased,\
    \ but may not be\n      increased. That is, if a certificate in the path specifies\
    \ policy\n      mapping is not permitted, it can not be overridden by a later\n\
    \      certificate. If initial-policy-mapping-inhibit is set, then the\n     \
    \ initial value is 0, otherwise the initial value is n+1.\n      (g) working_public_key_algorithm:\
    \ the digital signature algorithm\n      used to verify the signature of a certificate.\
    \  The\n      working_public_key_algorithm is initialized from the trusted\n \
    \     public key algorithm provided in the trust anchor information.\n      (h)\
    \ working_public_key: the public key used to verify the\n      signature of a\
    \ certificate.  The working_public_key is initialized\n      from the trusted\
    \ public key provided in the trust anchor\n      information.\n      (i) working_public_key_parameters:\
    \  parameters associated with the\n      current public key, that may be required\
    \ to verify a signature\n      (depending upon the algorithm).  The working_public_key_parameters\n\
    \      variable is initialized from the trusted public key parameters\n      provided\
    \ in the trust anchor information.\n      (j) working_issuer_name:  the issuer\
    \ distinguished name expected\n      in the next certificate in the chain.  The\
    \ working_issuer_name is\n      initialized to the trusted issuer provided in\
    \ the trust anchor\n      information.\n      (k) max_path_length:  this integer\
    \ is initialized to n, is\n      decremented for each non-self-issued certificate\
    \ in the path, and\n      may be reduced to the value in the path length constraint\
    \ field\n      within the basic constraints extension of a CA certificate.\n \
    \  Upon completion of the initialization steps, perform the basic\n   certificate\
    \ processing steps specified in 6.1.3.\n"
- title: 6.1.3  Basic Certificate Processing
  contents:
  - "6.1.3  Basic Certificate Processing\n   The basic path processing actions to\
    \ be performed for certificate i\n   (for all i in [1..n]) are listed below.\n\
    \      (a)  Verify the basic certificate information.  The certificate\n     \
    \ MUST satisfy each of the following:\n         (1)  The certificate was signed\
    \ with the\n         working_public_key_algorithm using the working_public_key\
    \ and\n         the working_public_key_parameters.\n         (2)  The certificate\
    \ validity period includes the current time.\n         (3)  At the current time,\
    \ the certificate is not revoked and is\n         not on hold status.  This may\
    \ be determined by obtaining the\n         appropriate CRL (section 6.3), status\
    \ information, or by out-\n         of-band mechanisms.\n         (4)  The certificate\
    \ issuer name is the working_issuer_name.\n      (b)  If certificate i is self-issued\
    \ and it is not the final\n      certificate in the path, skip this step for certificate\
    \ i.\n      Otherwise, verify that the subject name is within one of the\n   \
    \   permitted_subtrees for X.500 distinguished names, and verify that\n      each\
    \ of the alternative names in the subjectAltName extension\n      (critical or\
    \ non-critical) is within one of the permitted_subtrees\n      for that name type.\n\
    \      (c)  If certificate i is self-issued and it is not the final\n      certificate\
    \ in the path, skip this step for certificate i.\n      Otherwise, verify that\
    \ the subject name is not within one of the\n      excluded_subtrees for X.500\
    \ distinguished names, and verify that\n      each of the alternative names in\
    \ the subjectAltName extension\n      (critical or non-critical) is not within\
    \ one of the\n      excluded_subtrees for that name type.\n      (d)  If the certificate\
    \ policies extension is present in the\n      certificate and the valid_policy_tree\
    \ is not NULL, process the\n      policy information by performing the following\
    \ steps in order:\n         (1)  For each policy P not equal to anyPolicy in the\n\
    \         certificate policies extension, let P-OID denote the OID in\n      \
    \   policy P and P-Q denote the qualifier set for policy P.\n         Perform\
    \ the following steps in order:\n            (i)  If the valid_policy_tree includes\
    \ a node of depth i-1\n            where P-OID is in the expected_policy_set,\
    \ create a child\n            node as follows: set the valid_policy to OID-P;\
    \ set the\n            qualifier_set to P-Q, and set the expected_policy_set to\n\
    \            {P-OID}.\n            For example, consider a valid_policy_tree with\
    \ a node of\n            depth i-1 where the expected_policy_set is {Gold, White}.\n\
    \            Assume the certificate policies Gold and Silver appear in\n     \
    \       the certificate policies extension of certificate i.  The\n          \
    \  Gold policy is matched but the Silver policy is not.  This\n            rule\
    \ will generate a child node of depth i for the Gold\n            policy. The\
    \ result is shown as Figure 4.\n                             +-----------------+\n\
    \                             |       Red       |\n                          \
    \   +-----------------+\n                             |       {}        |\n  \
    \                           +-----------------+   node of depth i-1\n        \
    \                     |      FALSE      |\n                             +-----------------+\n\
    \                             |  {Gold, White}  |\n                          \
    \   +-----------------+\n                                      |\n           \
    \                           |\n                                      |\n     \
    \                                 V\n                             +-----------------+\n\
    \                             |      Gold       |\n                          \
    \   +-----------------+\n                             |       {}        |\n  \
    \                           +-----------------+ node of depth i\n            \
    \                 |  uninitialized  |\n                             +-----------------+\n\
    \                             |     {Gold}      |\n                          \
    \   +-----------------+\n                    Figure 4.  Processing an exact match\n\
    \            (ii)  If there was no match in step (i) and the\n            valid_policy_tree\
    \ includes a node of depth i-1 with the\n            valid policy anyPolicy, generate\
    \ a child node with the\n            following values: set the valid_policy to\
    \ P-OID; set the\n            qualifier_set to P-Q, and set the expected_policy_set\
    \ to\n            {P-OID}.\n            For example, consider a valid_policy_tree\
    \ with a node of\n            depth i-1 where the valid_policy is anyPolicy. \
    \ Assume the\n            certificate policies Gold and Silver appear in the\n\
    \            certificate policies extension of certificate i.  The Gold\n    \
    \        policy does not have a qualifier, but the Silver policy has\n       \
    \     the qualifier Q-Silver.  If Gold and Silver were not matched\n         \
    \   in (i) above, this rule will generate two child nodes of\n            depth\
    \ i, one for each policy.  The result is shown as Figure\n            5.\n   \
    \                          +-----------------+\n                             |\
    \    anyPolicy    |\n                             +-----------------+\n      \
    \                       |       {}        |\n                             +-----------------+\
    \ node of depth i-1\n                             |      FALSE      |\n      \
    \                       +-----------------+\n                             |  \
    \ {anyPolicy}   |\n                             +-----------------+\n        \
    \                        /           \\\n                               /    \
    \         \\\n                              /               \\\n             \
    \                /                 \\\n               +-----------------+    \
    \      +-----------------+\n               |      Gold       |          |    \
    \ Silver      |\n               +-----------------+          +-----------------+\n\
    \               |       {}        |          |   {Q-Silver}    |\n           \
    \    +-----------------+ nodes of +-----------------+\n               | uninitialized\
    \   | depth i  | uninitialized   |\n               +-----------------+       \
    \   +-----------------+\n               |     {Gold}      |          |    {Silver}\
    \     |\n               +-----------------+          +-----------------+\n   \
    \            Figure 5.  Processing unmatched policies when a leaf node\n     \
    \          specifies anyPolicy\n         (2)  If the certificate policies extension\
    \ includes the policy\n         anyPolicy with the qualifier set AP-Q and either\
    \ (a)\n         inhibit_any-policy is greater than 0 or (b) i<n and the\n    \
    \     certificate is self-issued, then:\n         For each node in the valid_policy_tree\
    \ of depth i-1, for each\n         value in the expected_policy_set (including\
    \ anyPolicy) that\n         does not appear in a child node, create a child node\
    \ with the\n         following values: set the valid_policy to the value from\
    \ the\n         expected_policy_set in the parent node; set the qualifier_set\n\
    \         to AP-Q, and set the expected_policy_set to the value in the\n     \
    \    valid_policy from this node.\n         For example, consider a valid_policy_tree\
    \ with a node of depth\n         i-1 where the expected_policy_set is {Gold, Silver}.\
    \  Assume\n         anyPolicy appears in the certificate policies extension of\n\
    \         certificate i, but Gold and Silver do not.  This rule will\n       \
    \  generate two child nodes of depth i, one for each policy.  The\n         result\
    \ is shown below as Figure 6.\n                          +-----------------+\n\
    \                          |      Red        |\n                          +-----------------+\n\
    \                          |       {}        |\n                          +-----------------+\
    \ node of depth i-1\n                          |      FALSE      |\n         \
    \                 +-----------------+\n                          |  {Gold, Silver}\
    \ |\n                          +-----------------+\n                         \
    \    /           \\\n                            /             \\\n          \
    \                 /               \\\n                          /            \
    \     \\\n            +-----------------+          +-----------------+\n     \
    \       |      Gold       |          |     Silver      |\n            +-----------------+\
    \          +-----------------+\n            |       {}        |          |   \
    \    {}        |\n            +-----------------+ nodes of +-----------------+\n\
    \            |  uninitialized  | depth i  |  uninitialized  |\n            +-----------------+\
    \          +-----------------+\n            |     {Gold}      |          |   \
    \ {Silver}     |\n            +-----------------+          +-----------------+\n\
    \         Figure 6.  Processing unmatched policies when the certificate\n    \
    \     policies extension specifies anyPolicy\n         (3)  If there is a node\
    \ in the valid_policy_tree of depth i-1\n         or less without any child nodes,\
    \ delete that node.  Repeat this\n         step until there are no nodes of depth\
    \ i-1 or less without\n         children.\n         For example, consider the\
    \ valid_policy_tree shown in Figure 7\n         below.  The two nodes at depth\
    \ i-1 that are marked with an 'X'\n         have no children, and are deleted.\
    \  Applying this rule to the\n         resulting tree will cause the node at depth\
    \ i-2 that is marked\n         with an 'Y' to be deleted.  The following application\
    \ of the\n         rule does not cause any nodes to be deleted, and this step\
    \ is\n         complete.\n                              +-----------+\n      \
    \                        |           | node of depth i-3\n                   \
    \           +-----------+\n                              /     |     \\\n    \
    \                         /      |      \\\n                            /    \
    \   |       \\\n                +-----------+ +-----------+ +-----------+\n  \
    \              |           | |           | |     Y     | nodes of\n          \
    \      +-----------+ +-----------+ +-----------+ depth i-2\n                /\
    \   \\               |             |\n               /     \\              | \
    \            |\n              /       \\             |             |\n   +-----------+\
    \ +-----------+ +-----------+ +-----------+ nodes of\n   |           | |     X\
    \     | |           | |    X      |  depth\n   +-----------+ +-----------+ +-----------+\
    \ +-----------+   i-1\n         |                      /    |    \\\n        \
    \ |                     /     |     \\\n         |                    /      |\
    \      \\\n   +-----------+ +-----------+ +-----------+ +-----------+ nodes of\n\
    \   |           | |           | |           | |           |  depth\n   +-----------+\
    \ +-----------+ +-----------+ +-----------+   i\n          Figure 7.  Pruning\
    \ the valid_policy_tree\n         (4)  If the certificate policies extension was\
    \ marked as\n         critical, set the criticality_indicator in all nodes of\
    \ depth i\n         to TRUE.  If the certificate policies extension was not marked\n\
    \         critical, set the criticality_indicator in all nodes of depth i\n  \
    \       to FALSE.\n      (e)  If the certificate policies extension is not present,\
    \ set the\n      valid_policy_tree to NULL.\n      (f)  Verify that either explicit_policy\
    \ is greater than 0 or the\n      valid_policy_tree is not equal to NULL;\n  \
    \ If any of steps (a), (b), (c), or (f) fails, the procedure\n   terminates, returning\
    \ a failure indication and an appropriate reason.\n   If i is not equal to n,\
    \ continue by performing the preparatory steps\n   listed in 6.1.4.  If i is equal\
    \ to n, perform the wrap-up steps\n   listed in 6.1.5.\n"
- title: 6.1.4  Preparation for Certificate i+1
  contents:
  - "6.1.4  Preparation for Certificate i+1\n   To prepare for processing of certificate\
    \ i+1, perform the following\n   steps for certificate i:\n      (a)  If a policy\
    \ mapping extension is present, verify that the\n      special value anyPolicy\
    \ does not appear as an issuerDomainPolicy\n      or a subjectDomainPolicy.\n\
    \      (b)  If a policy mapping extension is present, then for each\n      issuerDomainPolicy\
    \ ID-P in the policy mapping extension:\n         (1)  If the policy_mapping variable\
    \ is greater than 0, for each\n         node in the valid_policy_tree of depth\
    \ i where ID-P is the\n         valid_policy, set expected_policy_set to the set\
    \ of\n         subjectDomainPolicy values that are specified as equivalent to\n\
    \         ID-P by the policy mapping extension.\n         If no node of depth\
    \ i in the valid_policy_tree has a\n         valid_policy of ID-P but there is\
    \ a node of depth i with a\n         valid_policy of anyPolicy, then generate\
    \ a child node of the\n         node of depth i-1 that has a valid_policy of anyPolicy\
    \ as\n         follows:\n            (i)  set the valid_policy to ID-P;\n    \
    \        (ii)  set the qualifier_set to the qualifier set of the\n           \
    \ policy anyPolicy in the certificate policies extension of\n            certificate\
    \ i;\n            (iii)  set the criticality_indicator to the criticality of\n\
    \            the certificate policies extension of certificate i;\n          \
    \  (iv)  and set the expected_policy_set to the set of\n            subjectDomainPolicy\
    \ values that are specified as equivalent\n            to ID-P by the policy mappings\
    \ extension.\n         (2)  If the policy_mapping variable is equal to 0:\n  \
    \          (i)  delete each node of depth i in the valid_policy_tree\n       \
    \     where ID-P is the valid_policy.\n            (ii)  If there is a node in\
    \ the valid_policy_tree of depth\n            i-1 or less without any child nodes,\
    \ delete that node.\n            Repeat this step until there are no nodes of\
    \ depth i-1 or\n            less without children.\n      (c)  Assign the certificate\
    \ subject name to working_issuer_name.\n      (d)  Assign the certificate subjectPublicKey\
    \ to\n      working_public_key.\n      (e)  If the subjectPublicKeyInfo field\
    \ of the certificate contains\n      an algorithm field with non-null parameters,\
    \ assign the parameters\n      to the working_public_key_parameters variable.\n\
    \      If the subjectPublicKeyInfo field of the certificate contains an\n    \
    \  algorithm field with null parameters or parameters are omitted,\n      compare\
    \ the certificate subjectPublicKey algorithm to the\n      working_public_key_algorithm.\
    \  If the certificate subjectPublicKey\n      algorithm and the working_public_key_algorithm\
    \ are different, set\n      the working_public_key_parameters to null.\n     \
    \ (f)  Assign the certificate subjectPublicKey algorithm to the\n      working_public_key_algorithm\
    \ variable.\n      (g)  If a name constraints extension is included in the\n \
    \     certificate, modify the permitted_subtrees and excluded_subtrees\n     \
    \ state variables as follows:\n         (1)  If permittedSubtrees is present in\
    \ the certificate, set\n         the permitted_subtrees state variable to the\
    \ intersection of\n         its previous value and the value indicated in the\
    \ extension\n         field.  If permittedSubtrees does not include a particular\
    \ name\n         type, the permitted_subtrees state variable is unchanged for\n\
    \         that name type.  For example, the intersection of nist.gov and\n   \
    \      csrc.nist.gov is csrc.nist.gov.  And, the intersection of\n         nist.gov\
    \ and rsasecurity.com is the empty set.\n         (2)  If excludedSubtrees is\
    \ present in the certificate, set the\n         excluded_subtrees state variable\
    \ to the union of its previous\n         value and the value indicated in the\
    \ extension field.  If\n         excludedSubtrees does not include a particular\
    \ name type, the\n         excluded_subtrees state variable is unchanged for that\
    \ name\n         type.  For example, the union of the name spaces nist.gov and\n\
    \         csrc.nist.gov is nist.gov.  And, the union of nist.gov and\n       \
    \  rsasecurity.com is both name spaces.\n      (h)  If the issuer and subject\
    \ names are not identical:\n         (1)  If explicit_policy is not 0, decrement\
    \ explicit_policy by\n         1.\n         (2)  If policy_mapping is not 0, decrement\
    \ policy_mapping by 1.\n         (3)  If inhibit_any-policy is not 0, decrement\
    \ inhibit_any-\n         policy by 1.\n      (i)  If a policy constraints extension\
    \ is included in the\n      certificate, modify the explicit_policy and policy_mapping\
    \ state\n      variables as follows:\n         (1)  If requireExplicitPolicy is\
    \ present and is less than\n         explicit_policy, set explicit_policy to the\
    \ value of\n         requireExplicitPolicy.\n         (2)  If inhibitPolicyMapping\
    \ is present and is less than\n         policy_mapping, set policy_mapping to\
    \ the value of\n         inhibitPolicyMapping.\n      (j)  If the inhibitAnyPolicy\
    \ extension is included in the\n      certificate and is less than inhibit_any-policy,\
    \ set inhibit_any-\n      policy to the value of inhibitAnyPolicy.\n      (k)\
    \  Verify that the certificate is a CA certificate (as specified\n      in a basicConstraints\
    \ extension or as verified out-of-band).\n      (l)  If the certificate was not\
    \ self-issued, verify that\n      max_path_length is greater than zero and decrement\
    \ max_path_length\n      by 1.\n      (m)  If pathLengthConstraint is present\
    \ in the certificate and is\n      less than max_path_length, set max_path_length\
    \ to the value of\n      pathLengthConstraint.\n      (n)  If a key usage extension\
    \ is present, verify that the\n      keyCertSign bit is set.\n      (o)  Recognize\
    \ and process any other critical extension present in\n      the certificate.\
    \  Process any other recognized non-critical\n      extension present in the certificate.\n\
    \   If check (a), (k), (l), (n) or (o) fails, the procedure terminates,\n   returning\
    \ a failure indication and an appropriate reason.\n   If (a), (k), (l), (n) and\
    \ (o) have completed successfully, increment\n   i and perform the basic certificate\
    \ processing specified in 6.1.3.\n"
- title: 6.1.5  Wrap-up procedure
  contents:
  - "6.1.5  Wrap-up procedure\n   To complete the processing of the end entity certificate,\
    \ perform the\n   following steps for certificate n:\n      (a)  If certificate\
    \ n was not self-issued and explicit_policy is\n      not 0, decrement explicit_policy\
    \ by 1.\n      (b)  If a policy constraints extension is included in the\n   \
    \   certificate and requireExplicitPolicy is present and has a value\n      of\
    \ 0, set the explicit_policy state variable to 0.\n      (c)  Assign the certificate\
    \ subjectPublicKey to\n      working_public_key.\n      (d)  If the subjectPublicKeyInfo\
    \ field of the certificate contains\n      an algorithm field with non-null parameters,\
    \ assign the parameters\n      to the working_public_key_parameters variable.\n\
    \      If the subjectPublicKeyInfo field of the certificate contains an\n    \
    \  algorithm field with null parameters or parameters are omitted,\n      compare\
    \ the certificate subjectPublicKey algorithm to the\n      working_public_key_algorithm.\
    \  If the certificate subjectPublicKey\n      algorithm and the working_public_key_algorithm\
    \ are different, set\n      the working_public_key_parameters to null.\n     \
    \ (e)  Assign the certificate subjectPublicKey algorithm to the\n      working_public_key_algorithm\
    \ variable.\n      (f)  Recognize and process any other critical extension present\
    \ in\n      the certificate n.  Process any other recognized non-critical\n  \
    \    extension present in certificate n.\n      (g)  Calculate the intersection\
    \ of the valid_policy_tree and the\n      user-initial-policy-set, as follows:\n\
    \         (i)  If the valid_policy_tree is NULL, the intersection is\n       \
    \  NULL.\n         (ii)  If the valid_policy_tree is not NULL and the user-\n\
    \         initial-policy-set is any-policy, the intersection is the\n        \
    \ entire valid_policy_tree.\n         (iii)  If the valid_policy_tree is not NULL\
    \ and the user-\n         initial-policy-set is not any-policy, calculate the\n\
    \         intersection of the valid_policy_tree and the user-initial-\n      \
    \   policy-set as follows:\n            1.  Determine the set of policy nodes\
    \ whose parent nodes\n            have a valid_policy of anyPolicy.  This is the\n\
    \            valid_policy_node_set.\n            2.  If the valid_policy of any\
    \ node in the\n            valid_policy_node_set is not in the user-initial-policy-set\n\
    \            and is not anyPolicy, delete this node and all its children.\n  \
    \          3.  If the valid_policy_tree includes a node of depth n with\n    \
    \        the valid_policy anyPolicy and the user-initial-policy-set\n        \
    \    is not any-policy perform the following steps:\n               a. Set P-Q\
    \ to the qualifier_set in the node of depth n\n               with valid_policy\
    \ anyPolicy.\n               b. For each P-OID in the user-initial-policy-set\
    \ that is\n               not the valid_policy of a node in the\n            \
    \   valid_policy_node_set, create a child node whose parent\n               is\
    \ the node of depth n-1 with the valid_policy anyPolicy.\n               Set the\
    \ values in the child node as follows: set the\n               valid_policy to\
    \ P-OID; set the qualifier_set to P-Q; copy\n               the criticality_indicator\
    \ from the node of depth n with\n               the valid_policy anyPolicy; and\
    \ set the\n               expected_policy_set to {P-OID}.\n               c. \
    \ Delete the node of depth n with the valid_policy\n               anyPolicy.\n\
    \            4.  If there is a node in the valid_policy_tree of depth n-1\n  \
    \          or less without any child nodes, delete that node.  Repeat\n      \
    \      this step until there are no nodes of depth n-1 or less\n            without\
    \ children.\n   If either (1) the value of explicit_policy variable is greater\
    \ than\n   zero, or (2) the valid_policy_tree is not NULL, then path processing\n\
    \   has succeeded.\n"
- title: 6.1.6  Outputs
  contents:
  - "6.1.6  Outputs\n   If path processing succeeds, the procedure terminates, returning\
    \ a\n   success indication together with final value of the\n   valid_policy_tree,\
    \ the working_public_key, the\n   working_public_key_algorithm, and the working_public_key_parameters.\n"
- title: 6.2  Using the Path Validation Algorithm
  contents:
  - "6.2  Using the Path Validation Algorithm\n   The path validation algorithm describes\
    \ the process of validating a\n   single certification path.  While each certification\
    \ path begins with\n   a specific trust anchor, there is no requirement that all\n\
    \   certification paths validated by a particular system share a single\n   trust\
    \ anchor.  An implementation that supports multiple trust anchors\n   MAY augment\
    \ the algorithm presented in section 6.1 to further limit\n   the set of valid\
    \ certification paths which begin with a particular\n   trust anchor.  For example,\
    \ an implementation MAY modify the\n   algorithm to apply name constraints to\
    \ a specific trust anchor during\n   the initialization phase, or the application\
    \ MAY require the presence\n   of a particular alternative name form in the end\
    \ entity certificate,\n   or the application MAY impose requirements on application-specific\n\
    \   extensions.  Thus, the path validation algorithm presented in section\n  \
    \ 6.1 defines the minimum conditions for a path to be considered valid.\n   The\
    \ selection of one or more trusted CAs is a local decision.  A\n   system may\
    \ provide any one of its trusted CAs as the trust anchor for\n   a particular\
    \ path.  The inputs to the path validation algorithm may\n   be different for\
    \ each path.  The inputs used to process a path may\n   reflect application-specific\
    \ requirements or limitations in the trust\n   accorded a particular trust anchor.\
    \  For example, a trusted CA may\n   only be trusted for a particular certificate\
    \ policy.  This\n   restriction can be expressed through the inputs to the path\n\
    \   validation procedure.\n   It is also possible to specify an extended version\
    \ of the above\n   certification path processing procedure which results in default\n\
    \   behavior identical to the rules of PEM [RFC 1422].  In this extended\n   version,\
    \ additional inputs to the procedure are a list of one or more\n   Policy Certification\
    \ Authority (PCA) names and an indicator of the\n   position in the certification\
    \ path where the PCA is expected.  At the\n   nominated PCA position, the CA name\
    \ is compared against this list.\n   If a recognized PCA name is found, then a\
    \ constraint of\n   SubordinateToCA is implicitly assumed for the remainder of\
    \ the\n   certification path and processing continues.  If no valid PCA name is\n\
    \   found, and if the certification path cannot be validated on the basis\n  \
    \ of identified policies, then the certification path is considered\n   invalid.\n"
- title: 6.3  CRL Validation
  contents:
  - "6.3  CRL Validation\n   This section describes the steps necessary to determine\
    \ if a\n   certificate is revoked or on hold status when CRLs are the revocation\n\
    \   mechanism used by the certificate issuer.  Conforming implementations\n  \
    \ that support CRLs are not required to implement this algorithm, but\n   they\
    \ MUST be functionally equivalent to the external behavior\n   resulting from\
    \ this procedure.  Any algorithm may be used by a\n   particular implementation\
    \ so long as it derives the correct result.\n   This algorithm assumes that all\
    \ of the needed CRLs are available in a\n   local cache.  Further, if the next\
    \ update time of a CRL has passed,\n   the algorithm assumes a mechanism to fetch\
    \ a current CRL and place it\n   in the local CRL cache.\n   This algorithm defines\
    \ a set of inputs, a set of state variables, and\n   processing steps that are\
    \ performed for each certificate in the path.\n   The algorithm output is the\
    \ revocation status of the certificate.\n"
- title: 6.3.1  Revocation Inputs
  contents:
  - "6.3.1  Revocation Inputs\n   To support revocation processing, the algorithm\
    \ requires two inputs:\n      (a)  certificate:  The algorithm requires the certificate\
    \ serial\n      number and issuer name to determine whether a certificate is on\
    \ a\n      particular CRL.  The basicConstraints extension is used to\n      determine\
    \ whether the supplied certificate is associated with a CA\n      or an end entity.\
    \  If present, the algorithm uses the\n      cRLDistributionsPoint and freshestCRL\
    \ extensions to determine\n      revocation status.\n      (b)  use-deltas:  This\
    \ boolean input determines whether delta CRLs\n      are applied to CRLs.\n  \
    \    Note that implementations supporting legacy PKIs, such as RFC 1422\n    \
    \  and X.509 version 1, will need an additional input indicating\n      whether\
    \ the supplied certificate is associated with a CA or an end\n      entity.\n"
- title: 6.3.2  Initialization and Revocation State Variables
  contents:
  - "6.3.2  Initialization and Revocation State Variables\n   To support CRL processing,\
    \ the algorithm requires the following state\n   variables:\n      (a)  reasons_mask:\
    \  This variable contains the set of revocation\n      reasons supported by the\
    \ CRLs and delta CRLs processed so far.\n      The legal members of the set are\
    \ the possible revocation reason\n      values: unspecified, keyCompromise, caCompromise,\n\
    \      affiliationChanged, superseded, cessationOfOperation,\n      certificateHold,\
    \ privilegeWithdrawn, and aACompromise.  The\n      special value all-reasons\
    \ is used to denote the set of all legal\n      members.  This variable is initialized\
    \ to the empty set.\n      (b)  cert_status:  This variable contains the status\
    \ of the\n      certificate.  This variable may be assigned one of the following\n\
    \      values: unspecified, keyCompromise, caCompromise,\n      affiliationChanged,\
    \ superseded, cessationOfOperation,\n      certificateHold, removeFromCRL, privilegeWithdrawn,\
    \ aACompromise,\n      the special value UNREVOKED, or the special value UNDETERMINED.\n\
    \      This variable is initialized to the special value UNREVOKED.\n      (c)\
    \  interim_reasons_mask:  This contains the set of revocation\n      reasons supported\
    \ by the CRL or delta CRL currently being\n      processed.\n   Note: In some\
    \ environments, it is not necessary to check all reason\n   codes.  For example,\
    \ some environments are only concerned with\n   caCompromise and keyCompromise\
    \ for CA certificates.  This algorithm\n   checks all reason codes.  Additional\
    \ processing and state variables\n   may be necessary to limit the checking to\
    \ a subset of the reason\n   codes.\n"
- title: 6.3.3  CRL Processing
  contents:
  - "6.3.3  CRL Processing\n   This algorithm begins by assuming the certificate is\
    \ not revoked.\n   The algorithm checks one or more CRLs until either the certificate\n\
    \   status is determined to be revoked or sufficient CRLs have been\n   checked\
    \ to cover all reason codes.\n   For each distribution point (DP) in the certificate\
    \ CRL distribution\n   points extension, for each corresponding CRL in the local\
    \ CRL cache,\n   while ((reasons_mask is not all-reasons) and (cert_status is\n\
    \   UNREVOKED)) perform the following:\n      (a)  Update the local CRL cache\
    \ by obtaining a complete CRL, a\n      delta CRL, or both, as required:\n   \
    \      (1)  If the current time is after the value of the CRL next\n         update\
    \ field, then do one of the following:\n            (i)  If use-deltas is set\
    \ and either the certificate or the\n            CRL contains the freshest CRL\
    \ extension, obtain a delta CRL\n            with the a next update value that\
    \ is after the current time\n            and can be used to update the locally\
    \ cached CRL as\n            specified in section 5.2.4.\n            (ii)  Update\
    \ the local CRL cache with a current complete\n            CRL, verify that the\
    \ current time is before the next update\n            value in the new CRL, and\
    \ continue processing with the new\n            CRL.  If use-deltas is set, then\
    \ obtain the current delta\n            CRL that can be used to update the new\
    \ locally cached\n            complete CRL as specified in section 5.2.4.\n  \
    \       (2)  If the current time is before the value of the next update\n    \
    \     field and use-deltas is set, then obtain the current delta CRL\n       \
    \  that can be used to update the locally cached complete CRL as\n         specified\
    \ in section 5.2.4.\n      (b)  Verify the issuer and scope of the complete CRL\
    \ as follows:\n         (1)  If the DP includes cRLIssuer, then verify that the\
    \ issuer\n         field in the complete CRL matches cRLIssuer in the DP and that\n\
    \         the complete CRL contains an issuing distribution point\n         extension\
    \ with the indrectCRL boolean asserted.  Otherwise,\n         verify that the\
    \ CRL issuer matches the certificate issuer.\n         (2)  If the complete CRL\
    \ includes an issuing distribution point\n         (IDP) CRL extension check the\
    \ following:\n            (i)  If the distribution point name is present in the\
    \ IDP\n            CRL extension and the distribution field is present in the\n\
    \            DP, then verify that one of the names in the IDP matches one\n  \
    \          of the names in the DP.  If the distribution point name is\n      \
    \      present in the IDP CRL extension and the distribution field\n         \
    \   is omitted from the DP, then verify that one of the names in\n           \
    \ the IDP matches one of the names in the cRLIssuer field of\n            the\
    \ DP.\n            (ii)  If the onlyContainsUserCerts boolean is asserted in\n\
    \            the IDP CRL extension, verify that the certificate does not\n   \
    \         include the basic constraints extension with the cA boolean\n      \
    \      asserted.\n            (iii)  If the onlyContainsCACerts boolean is asserted\
    \ in the\n            IDP CRL extension, verify that the certificate includes\
    \ the\n            basic constraints extension with the cA boolean asserted.\n\
    \            (iv)  Verify that the onlyContainsAttributeCerts boolean is\n   \
    \         not asserted.\n      (c)  If use-deltas is set, verify the issuer and\
    \ scope of the\n      delta CRL as follows:\n         (1)  Verify that the delta\
    \ CRL issuer matches complete CRL\n         issuer.\n         (2)  If the complete\
    \ CRL includes an issuing distribution point\n         (IDP) CRL extension, verify\
    \ that the delta CRL contains a\n         matching IDP CRL extension.  If the\
    \ complete CRL omits an IDP\n         CRL extension, verify that the delta CRL\
    \ also omits an IDP CRL\n         extension.\n         (3)  Verify that the delta\
    \ CRL authority key identifier\n         extension matches complete CRL authority\
    \ key identifier\n         extension.\n   (d)  Compute the interim_reasons_mask\
    \ for this CRL as follows:\n         (1)  If the issuing distribution point (IDP)\
    \ CRL extension is\n         present and includes onlySomeReasons and the DP includes\n\
    \         reasons, then set interim_reasons_mask to the intersection of\n    \
    \     reasons in the DP and onlySomeReasons in IDP CRL extension.\n         (2)\
    \  If the IDP CRL extension includes onlySomeReasons but the\n         DP omits\
    \ reasons, then set interim_reasons_mask to the value of\n         onlySomeReasons\
    \ in IDP CRL extension.\n         (3)  If the IDP CRL extension is not present\
    \ or omits\n         onlySomeReasons but the DP includes reasons, then set\n \
    \        interim_reasons_mask to the value of DP reasons.\n         (4)  If the\
    \ IDP CRL extension is not present or omits\n         onlySomeReasons and the\
    \ DP omits reasons, then set\n         interim_reasons_mask to the special value\
    \ all-reasons.\n   (e)  Verify that interim_reasons_mask includes one or more\
    \ reasons\n   that is not included in the reasons_mask.\n   (f)  Obtain and validate\
    \ the certification path for the complete CRL\n   issuer.  If a key usage extension\
    \ is present in the CRL issuer's\n   certificate, verify that the cRLSign bit\
    \ is set.\n   (g)  Validate the signature on the complete CRL using the public\
    \ key\n   validated in step (f).\n   (h)  If use-deltas is set, then validate\
    \ the signature on the delta\n   CRL using the public key validated in step (f).\n\
    \   (i)  If use-deltas is set, then search for the certificate on the\n   delta\
    \ CRL.  If an entry is found that matches the certificate issuer\n   and serial\
    \ number as described in section 5.3.4, then set the\n   cert_status variable\
    \ to the indicated reason as follows:\n         (1)  If the reason code CRL entry\
    \ extension is present, set the\n         cert_status variable to the value of\
    \ the reason code CRL entry\n         extension.\n         (2)  If the reason\
    \ code CRL entry extension is not present, set\n         the cert_status variable\
    \ to the value unspecified.\n      (j)  If (cert_status is UNREVOKED), then search\
    \ for the\n      certificate on the complete CRL.  If an entry is found that\n\
    \      matches the certificate issuer and serial number as described in\n    \
    \  section 5.3.4, then set the cert_status variable to the indicated\n      reason\
    \ as described in step (i).\n      (k)  If (cert_status is removeFromCRL), then\
    \ set cert_status to\n      UNREVOKED.\n   If ((reasons_mask is all-reasons) OR\
    \ (cert_status is not UNREVOKED)),\n   then the revocation status has been determined,\
    \ so return\n   cert_status.\n   If the revocation status has not been determined,\
    \ repeat the process\n   above with any available CRLs not specified in a distribution\
    \ point\n   but issued by the certificate issuer.  For the processing of such\
    \ a\n   CRL, assume a DP with both the reasons and the cRLIssuer fields\n   omitted\
    \ and a distribution point name of the certificate issuer.\n   That is, the sequence\
    \ of names in fullName is generated from the\n   certificate issuer field as well\
    \ as the certificate issuerAltName\n   extension.  If the revocation status remains\
    \ undetermined, then\n   return the cert_status UNDETERMINED.\n"
- title: 7  References
  contents:
  - "7  References\n   [ISO 10646] ISO/IEC 10646-1:1993.  International Standard --\n\
    \               Information technology -- Universal Multiple-Octet Coded\n   \
    \            Character Set (UCS) -- Part 1: Architecture and Basic\n         \
    \      Multilingual Plane.\n   [RFC 791]   Postel, J.,  \"Internet Protocol\"\
    , STD 5, RFC 791,\n               September 1981.\n   [RFC 822]   Crocker, D.,\
    \ \"Standard for the format of ARPA Internet\n               text messages\",\
    \ STD 11, RFC 822, August 1982.\n   [RFC 1034]  Mockapetris, P., \"Domain Names\
    \ - Concepts and\n               Facilities\", STD 13, RFC 1034, November 1987.\n\
    \   [RFC 1422]  Kent, S., \"Privacy Enhancement for Internet Electronic\n    \
    \           Mail: Part II: Certificate-Based Key Management,\" RFC\n         \
    \      1422, February 1993.\n   [RFC 1423]  Balenson, D., \"Privacy Enhancement\
    \ for Internet\n               Electronic Mail: Part III: Algorithms, Modes, and\n\
    \               Identifiers,\" RFC 1423, February 1993.\n   [RFC 1510]  Kohl,\
    \ J. and C. Neuman, \"The Kerberos Network\n               Authentication Service\
    \ (V5),\" RFC 1510, September 1993.\n   [RFC 1519]  Fuller, V., T. Li, J. Yu and\
    \ K. Varadhan, \"Classless\n               Inter-Domain Routing (CIDR): An Address\
    \ Assignment and\n               Aggregation Strategy\", RFC 1519, September 1993.\n\
    \   [RFC 1738]  Berners-Lee, T., L. Masinter and M. McCahill, \"Uniform\n    \
    \           Resource Locators (URL)\", RFC 1738, December 1994.\n   [RFC 1778]\
    \  Howes, T., S. Kille, W. Yeong and C. Robbins, \"The String\n              \
    \ Representation of Standard Attribute Syntaxes,\" RFC 1778,\n               March\
    \ 1995.\n   [RFC 1883]  Deering, S. and R. Hinden.  \"Internet Protocol, Version\
    \ 6\n               (IPv6) Specification\", RFC 1883, December 1995.\n   [RFC\
    \ 2044]  F. Yergeau, F., \"UTF-8, a transformation format of\n               Unicode\
    \ and ISO 10646\", RFC 2044, October 1996.\n   [RFC 2119]  Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n               Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC 2247]  Kille, S., M. Wahl, A. Grimstad, R.\
    \ Huber and S.\n               Sataluri, \"Using Domains in LDAP/X.500 Distinguished\n\
    \               Names\", RFC 2247, January 1998.\n   [RFC 2252]  Wahl, M., A.\
    \ Coulbeck, T. Howes and S. Kille,\n               \"Lightweight Directory Access\
    \ Protocol (v3):  Attribute\n               Syntax Definitions\", RFC 2252, December\
    \ 1997.\n   [RFC 2277]  Alvestrand, H., \"IETF Policy on Character Sets and\n\
    \               Languages\", BCP 18, RFC 2277, January 1998.\n   [RFC 2279]  Yergeau,\
    \ F., \"UTF-8, a transformation format of ISO\n               10646\", RFC 2279,\
    \ January 1998.\n   [RFC 2459]  Housley, R., W. Ford, W. Polk and D. Solo, \"\
    Internet\n               X.509 Public Key Infrastructure: Certificate and CRL\n\
    \               Profile\", RFC 2459, January 1999.\n   [RFC 2560]  Myers, M.,\
    \ R. Ankney, A. Malpani, S. Galperin and C.\n               Adams, \"Online Certificate\
    \ Status Protocal - OCSP\", June\n               1999.\n   [SDN.701]   SDN.701,\
    \ \"Message Security Protocol 4.0\", Revision A,\n               1997-02-06.\n\
    \   [X.501]     ITU-T Recommendation X.501: Information Technology - Open\n  \
    \             Systems Interconnection - The Directory: Models, 1993.\n   [X.509]\
    \     ITU-T Recommendation X.509 (1997 E): Information\n               Technology\
    \ - Open Systems Interconnection - The\n               Directory: Authentication\
    \ Framework, June 1997.\n   [X.520]     ITU-T Recommendation X.520: Information\
    \ Technology - Open\n               Systems Interconnection - The Directory: Selected\n\
    \               Attribute Types, 1993.\n   [X.660]     ITU-T Recommendation X.660\
    \ Information Technology - ASN.1\n               encoding rules: Specification\
    \ of Basic Encoding Rules\n               (BER), Canonical Encoding Rules (CER)\
    \ and Distinguished\n               Encoding Rules (DER), 1997.\n   [X.690]  \
    \   ITU-T Recommendation X.690 Information Technology - Open\n               Systems\
    \ Interconnection - Procedures for the operation of\n               OSI Registration\
    \ Authorities: General procedures, 1992.\n   [X9.55]     ANSI X9.55-1995, Public\
    \ Key Cryptography For The\n               Financial Services Industry: Extensions\
    \ To Public Key\n               Certificates And Certificate Revocation Lists,\
    \ 8\n               December, 1995.\n   [PKIXALGS]  Bassham, L., Polk, W. and\
    \ R. Housley, \"Algorithms and\n               Identifiers for the Internet X.509\
    \ Public Key\n               Infrastructure Certificate and Certificate Revocation\n\
    \               Lists (CRL) Profile\", RFC 3279, April 2002.\n   [PKIXTSA]   Adams,\
    \ C., Cain, P., Pinkas, D. and R. Zuccherato,\n               \"Internet X.509\
    \ Public Key Infrastructure Time-Stamp\n               Protocol (TSP)\", RFC 3161,\
    \ August 2001.\n"
- title: 8  Intellectual Property Rights
  contents:
  - "8  Intellectual Property Rights\n   The IETF has been notified of intellectual\
    \ property rights claimed in\n   regard to some or all of the specification contained\
    \ in this\n   document.  For more information consult the online list of claimed\n\
    \   rights (see http://www.ietf.org/ipr.html).\n   The IETF takes no position\
    \ regarding the validity or scope of any\n   intellectual property or other rights\
    \ that might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP 11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n"
- title: 9  Security Considerations
  contents:
  - "9  Security Considerations\n   The majority of this specification is devoted\
    \ to the format and\n   content of certificates and CRLs.  Since certificates\
    \ and CRLs are\n   digitally signed, no additional integrity service is necessary.\n\
    \   Neither certificates nor CRLs need be kept secret, and unrestricted\n   and\
    \ anonymous access to certificates and CRLs has no security\n   implications.\n\
    \   However, security factors outside the scope of this specification\n   will\
    \ affect the assurance provided to certificate users.  This\n   section highlights\
    \ critical issues to be considered by implementers,\n   administrators, and users.\n\
    \   The procedures performed by CAs and RAs to validate the binding of\n   the\
    \ subject's identity to their public key greatly affect the\n   assurance that\
    \ ought to be placed in the certificate.  Relying\n   parties might wish to review\
    \ the CA's certificate practice statement.\n   This is particularly important\
    \ when issuing certificates to other\n   CAs.\n   The use of a single key pair\
    \ for both signature and other purposes is\n   strongly discouraged.  Use of separate\
    \ key pairs for signature and\n   key management provides several benefits to\
    \ the users.  The\n   ramifications associated with loss or disclosure of a signature\
    \ key\n   are different from loss or disclosure of a key management key.  Using\n\
    \   separate key pairs permits a balanced and flexible response.\n   Similarly,\
    \ different validity periods or key lengths for each key\n   pair may be appropriate\
    \ in some application environments.\n   Unfortunately, some legacy applications\
    \ (e.g., SSL) use a single key\n   pair for signature and key management.\n  \
    \ The protection afforded private keys is a critical security factor.\n   On a\
    \ small scale, failure of users to protect their private keys will\n   permit\
    \ an attacker to masquerade as them, or decrypt their personal\n   information.\
    \  On a larger scale, compromise of a CA's private signing\n   key may have a\
    \ catastrophic effect.  If an attacker obtains the\n   private key unnoticed,\
    \ the attacker may issue bogus certificates and\n   CRLs.  Existence of bogus\
    \ certificates and CRLs will undermine\n   confidence in the system.  If such\
    \ a compromise is detected, all\n   certificates issued to the compromised CA\
    \ MUST be revoked, preventing\n   services between its users and users of other\
    \ CAs.  Rebuilding after\n   such a compromise will be problematic, so CAs are\
    \ advised to\n   implement a combination of strong technical measures (e.g., tamper-\n\
    \   resistant cryptographic modules) and appropriate management\n   procedures\
    \ (e.g., separation of duties) to avoid such an incident.\n   Loss of a CA's private\
    \ signing key may also be problematic.  The CA\n   would not be able to produce\
    \ CRLs or perform normal key rollover.\n   CAs SHOULD maintain secure backup for\
    \ signing keys.  The security of\n   the key backup procedures is a critical factor\
    \ in avoiding key\n   compromise.\n   The availability and freshness of revocation\
    \ information affects the\n   degree of assurance that ought to be placed in a\
    \ certificate.  While\n   certificates expire naturally, events may occur during\
    \ its natural\n   lifetime which negate the binding between the subject and public\
    \ key.\n   If revocation information is untimely or unavailable, the assurance\n\
    \   associated with the binding is clearly reduced.  Relying parties\n   might\
    \ not be able to process every critical extension that can appear\n   in a CRL.\
    \  CAs SHOULD take extra care when making revocation\n   information available\
    \ only through CRLs that contain critical\n   extensions, particularly if support\
    \ for those extensions is not\n   mandated by this profile.  For example, if revocation\
    \ information is\n   supplied using a combination of delta CRLs and full CRLs,\
    \ and the\n   delta CRLs are issued more frequently than the full CRLs, then\n\
    \   relying parties that cannot handle the critical extensions related to\n  \
    \ delta CRL processing will not be able to obtain the most recent\n   revocation\
    \ information.  Alternatively, if a full CRL is issued\n   whenever a delta CRL\
    \ is issued, then timely revocation information\n   will be available to all relying\
    \ parties.  Similarly, implementations\n   of the certification path validation\
    \ mechanism described in section 6\n   that omit revocation checking provide less\
    \ assurance than those that\n   support it.\n   The certification path validation\
    \ algorithm depends on the certain\n   knowledge of the public keys (and other\
    \ information) about one or\n   more trusted CAs.  The decision to trust a CA\
    \ is an important\n   decision as it ultimately determines the trust afforded\
    \ a\n   certificate.  The authenticated distribution of trusted CA public\n  \
    \ keys (usually in the form of a \"self-signed\" certificate) is a\n   security\
    \ critical out-of-band process that is beyond the scope of\n   this specification.\n\
    \   In addition, where a key compromise or CA failure occurs for a\n   trusted\
    \ CA, the user will need to modify the information provided to\n   the path validation\
    \ routine.  Selection of too many trusted CAs makes\n   the trusted CA information\
    \ difficult to maintain.  On the other hand,\n   selection of only one trusted\
    \ CA could limit users to a closed\n   community of users.\n   The quality of\
    \ implementations that process certificates also affects\n   the degree of assurance\
    \ provided.  The path validation algorithm\n   described in section 6 relies upon\
    \ the integrity of the trusted CA\n   information, and especially the integrity\
    \ of the public keys\n   associated with the trusted CAs.  By substituting public\
    \ keys for\n   which an attacker has the private key, an attacker could trick\
    \ the\n   user into accepting false certificates.\n   The binding between a key\
    \ and certificate subject cannot be stronger\n   than the cryptographic module\
    \ implementation and algorithms used to\n   generate the signature.  Short key\
    \ lengths or weak hash algorithms\n   will limit the utility of a certificate.\
    \  CAs are encouraged to note\n   advances in cryptology so they can employ strong\
    \ cryptographic\n   techniques.  In addition, CAs SHOULD decline to issue certificates\
    \ to\n   CAs or end entities that generate weak signatures.\n   Inconsistent application\
    \ of name comparison rules can result in\n   acceptance of invalid X.509 certification\
    \ paths, or rejection of\n   valid ones.  The X.500 series of specifications defines\
    \ rules for\n   comparing distinguished names that require comparison of strings\n\
    \   without regard to case, character set, multi-character white space\n   substring,\
    \ or leading and trailing white space.  This specification\n   relaxes these requirements,\
    \ requiring support for binary comparison\n   at a minimum.\n   CAs MUST encode\
    \ the distinguished name in the subject field of a CA\n   certificate identically\
    \ to the distinguished name in the issuer field\n   in certificates issued by\
    \ that CA.  If CAs use different encodings,\n   implementations might fail to\
    \ recognize name chains for paths that\n   include this certificate.  As a consequence,\
    \ valid paths could be\n   rejected.\n   In addition, name constraints for distinguished\
    \ names MUST be stated\n   identically to the encoding used in the subject field\
    \ or\n   subjectAltName extension.  If not, then name constraints stated as\n\
    \   excludedSubTrees will not match and invalid paths will be accepted\n   and\
    \ name constraints expressed as permittedSubtrees will not match\n   and valid\
    \ paths will be rejected.  To avoid acceptance of invalid\n   paths, CAs SHOULD\
    \ state name constraints for distinguished names as\n   permittedSubtrees wherever\
    \ possible.\n"
- title: Appendix A.  Psuedo-ASN.1 Structures and OIDs
  contents:
  - "Appendix A.  Psuedo-ASN.1 Structures and OIDs\n   This section describes data\
    \ objects used by conforming PKI components\n   in an \"ASN.1-like\" syntax. \
    \ This syntax is a hybrid of the 1988 and\n   1993 ASN.1 syntaxes.  The 1988 ASN.1\
    \ syntax is augmented with 1993\n   UNIVERSAL Types UniversalString, BMPString\
    \ and UTF8String.\n   The ASN.1 syntax does not permit the inclusion of type statements\
    \ in\n   the ASN.1 module, and the 1993 ASN.1 standard does not permit use of\n\
    \   the new UNIVERSAL types in modules using the 1988 syntax.  As a\n   result,\
    \ this module does not conform to either version of the ASN.1\n   standard.\n\
    \   This appendix may be converted into 1988 ASN.1 by replacing the\n   definitions\
    \ for the UNIVERSAL Types with the 1988 catch-all \"ANY\".\n"
- title: A.1 Explicitly Tagged Module, 1988 Syntax
  contents:
  - 'A.1 Explicitly Tagged Module, 1988 Syntax

    '
- title: PKIX1Explicit88 { iso(1) identified-organization(3) dod(6) internet(1)
  contents:
  - "PKIX1Explicit88 { iso(1) identified-organization(3) dod(6) internet(1)\n  security(5)\
    \ mechanisms(5) pkix(7) id-mod(0) id-pkix1-explicit(18) }\n"
- title: DEFINITIONS EXPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS EXPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: -- EXPORTS ALL --
  contents:
  - '-- EXPORTS ALL --

    '
- title: -- IMPORTS NONE --
  contents:
  - '-- IMPORTS NONE --

    '
- title: -- UNIVERSAL Types defined in 1993 and 1998 ASN.1
  contents:
  - '-- UNIVERSAL Types defined in 1993 and 1998 ASN.1

    '
- title: -- and required by this specification
  contents:
  - '-- and required by this specification

    '
- title: UniversalString ::= [UNIVERSAL 28] IMPLICIT OCTET STRING
  contents:
  - "UniversalString ::= [UNIVERSAL 28] IMPLICIT OCTET STRING\n        -- UniversalString\
    \ is defined in ASN.1:1993\n"
- title: BMPString ::= [UNIVERSAL 30] IMPLICIT OCTET STRING
  contents:
  - "BMPString ::= [UNIVERSAL 30] IMPLICIT OCTET STRING\n      -- BMPString is the\
    \ subtype of UniversalString and models\n      -- the Basic Multilingual Plane\
    \ of ISO/IEC/ITU 10646-1\n"
- title: UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING
  contents:
  - "UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING\n      -- The content of\
    \ this type conforms to RFC 2279.\n"
- title: -- PKIX specific OIDs
  contents:
  - '-- PKIX specific OIDs

    '
- title: id-pkix  OBJECT IDENTIFIER  ::=
  contents:
  - "id-pkix  OBJECT IDENTIFIER  ::=\n         { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n                    security(5) mechanisms(5) pkix(7) }\n"
- title: -- PKIX arcs
  contents:
  - '-- PKIX arcs

    '
- title: id-pe OBJECT IDENTIFIER  ::=  { id-pkix 1 }
  contents:
  - "id-pe OBJECT IDENTIFIER  ::=  { id-pkix 1 }\n        -- arc for private certificate\
    \ extensions\n"
- title: id-qt OBJECT IDENTIFIER ::= { id-pkix 2 }
  contents:
  - "id-qt OBJECT IDENTIFIER ::= { id-pkix 2 }\n        -- arc for policy qualifier\
    \ types\n"
- title: id-kp OBJECT IDENTIFIER ::= { id-pkix 3 }
  contents:
  - "id-kp OBJECT IDENTIFIER ::= { id-pkix 3 }\n        -- arc for extended key purpose\
    \ OIDS\n"
- title: id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }
  contents:
  - "id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }\n        -- arc for access descriptors\n"
- title: -- policyQualifierIds for Internet policy qualifiers
  contents:
  - '-- policyQualifierIds for Internet policy qualifiers

    '
- title: id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }
  contents:
  - "id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }\n      -- OID for CPS qualifier\n"
- title: id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }
  contents:
  - "id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }\n      -- OID for user notice\
    \ qualifier\n"
- title: -- access descriptor definitions
  contents:
  - '-- access descriptor definitions

    '
- title: id-ad-ocsp         OBJECT IDENTIFIER ::= { id-ad 1 }
  contents:
  - 'id-ad-ocsp         OBJECT IDENTIFIER ::= { id-ad 1 }

    '
- title: id-ad-caIssuers    OBJECT IDENTIFIER ::= { id-ad 2 }
  contents:
  - 'id-ad-caIssuers    OBJECT IDENTIFIER ::= { id-ad 2 }

    '
- title: id-ad-timeStamping OBJECT IDENTIFIER ::= { id-ad 3 }
  contents:
  - 'id-ad-timeStamping OBJECT IDENTIFIER ::= { id-ad 3 }

    '
- title: id-ad-caRepository OBJECT IDENTIFIER ::= { id-ad 5 }
  contents:
  - 'id-ad-caRepository OBJECT IDENTIFIER ::= { id-ad 5 }

    '
- title: -- attribute data types
  contents:
  - '-- attribute data types

    '
- title: Attribute       ::=     SEQUENCE {
  contents:
  - "Attribute       ::=     SEQUENCE {\n      type              AttributeType,\n\
    \      values    SET OF AttributeValue }\n            -- at least one value is\
    \ required\n"
- title: AttributeType           ::=  OBJECT IDENTIFIER
  contents:
  - 'AttributeType           ::=  OBJECT IDENTIFIER

    '
- title: AttributeValue          ::=  ANY
  contents:
  - 'AttributeValue          ::=  ANY

    '
- title: AttributeTypeAndValue           ::=     SEQUENCE {
  contents:
  - "AttributeTypeAndValue           ::=     SEQUENCE {\n        type    AttributeType,\n\
    \        value   AttributeValue }\n"
- title: '-- suggested naming attributes: Definition of the following'
  contents:
  - '-- suggested naming attributes: Definition of the following

    '
- title: --   information object set may be augmented to meet local
  contents:
  - '--   information object set may be augmented to meet local

    '
- title: --   requirements.  Note that deleting members of the set may
  contents:
  - '--   requirements.  Note that deleting members of the set may

    '
- title: --   prevent interoperability with conforming implementations.
  contents:
  - '--   prevent interoperability with conforming implementations.

    '
- title: '-- presented in pairs: the AttributeType followed by the'
  contents:
  - '-- presented in pairs: the AttributeType followed by the

    '
- title: --   type definition for the corresponding AttributeValue
  contents:
  - '--   type definition for the corresponding AttributeValue

    '
- title: --Arc for standard naming attributes
  contents:
  - '--Arc for standard naming attributes

    '
- title: id-at OBJECT IDENTIFIER ::= { joint-iso-ccitt(2) ds(5) 4 }
  contents:
  - 'id-at OBJECT IDENTIFIER ::= { joint-iso-ccitt(2) ds(5) 4 }

    '
- title: -- Naming attributes of type X520name
  contents:
  - '-- Naming attributes of type X520name

    '
- title: id-at-name              AttributeType ::= { id-at 41 }
  contents:
  - 'id-at-name              AttributeType ::= { id-at 41 }

    '
- title: id-at-surname           AttributeType ::= { id-at 4 }
  contents:
  - 'id-at-surname           AttributeType ::= { id-at 4 }

    '
- title: id-at-givenName         AttributeType ::= { id-at 42 }
  contents:
  - 'id-at-givenName         AttributeType ::= { id-at 42 }

    '
- title: id-at-initials          AttributeType ::= { id-at 43 }
  contents:
  - 'id-at-initials          AttributeType ::= { id-at 43 }

    '
- title: id-at-generationQualifier AttributeType ::= { id-at 44 }
  contents:
  - 'id-at-generationQualifier AttributeType ::= { id-at 44 }

    '
- title: X520name ::= CHOICE {
  contents:
  - "X520name ::= CHOICE {\n      teletexString     TeletexString   (SIZE (1..ub-name)),\n\
    \      printableString   PrintableString (SIZE (1..ub-name)),\n      universalString\
    \   UniversalString (SIZE (1..ub-name)),\n      utf8String        UTF8String \
    \     (SIZE (1..ub-name)),\n      bmpString         BMPString       (SIZE (1..ub-name))\
    \ }\n"
- title: -- Naming attributes of type X520CommonName
  contents:
  - '-- Naming attributes of type X520CommonName

    '
- title: id-at-commonName        AttributeType ::= { id-at 3 }
  contents:
  - 'id-at-commonName        AttributeType ::= { id-at 3 }

    '
- title: X520CommonName ::= CHOICE {
  contents:
  - "X520CommonName ::= CHOICE {\n      teletexString     TeletexString   (SIZE (1..ub-common-name)),\n\
    \      printableString   PrintableString (SIZE (1..ub-common-name)),\n      universalString\
    \   UniversalString (SIZE (1..ub-common-name)),\n      utf8String        UTF8String\
    \      (SIZE (1..ub-common-name)),\n      bmpString         BMPString       (SIZE\
    \ (1..ub-common-name)) }\n"
- title: -- Naming attributes of type X520LocalityName
  contents:
  - '-- Naming attributes of type X520LocalityName

    '
- title: id-at-localityName      AttributeType ::= { id-at 7 }
  contents:
  - 'id-at-localityName      AttributeType ::= { id-at 7 }

    '
- title: X520LocalityName ::= CHOICE {
  contents:
  - "X520LocalityName ::= CHOICE {\n      teletexString     TeletexString   (SIZE\
    \ (1..ub-locality-name)),\n      printableString   PrintableString (SIZE (1..ub-locality-name)),\n\
    \      universalString   UniversalString (SIZE (1..ub-locality-name)),\n     \
    \ utf8String        UTF8String      (SIZE (1..ub-locality-name)),\n      bmpString\
    \         BMPString       (SIZE (1..ub-locality-name)) }\n"
- title: -- Naming attributes of type X520StateOrProvinceName
  contents:
  - '-- Naming attributes of type X520StateOrProvinceName

    '
- title: id-at-stateOrProvinceName AttributeType ::= { id-at 8 }
  contents:
  - 'id-at-stateOrProvinceName AttributeType ::= { id-at 8 }

    '
- title: X520StateOrProvinceName ::= CHOICE {
  contents:
  - "X520StateOrProvinceName ::= CHOICE {\n      teletexString     TeletexString \
    \  (SIZE (1..ub-state-name)),\n      printableString   PrintableString (SIZE (1..ub-state-name)),\n\
    \      universalString   UniversalString (SIZE (1..ub-state-name)),\n      utf8String\
    \        UTF8String      (SIZE (1..ub-state-name)),\n      bmpString         BMPString\
    \       (SIZE(1..ub-state-name)) }\n"
- title: -- Naming attributes of type X520OrganizationName
  contents:
  - '-- Naming attributes of type X520OrganizationName

    '
- title: id-at-organizationName  AttributeType ::= { id-at 10 }
  contents:
  - 'id-at-organizationName  AttributeType ::= { id-at 10 }

    '
- title: X520OrganizationName ::= CHOICE {
  contents:
  - "X520OrganizationName ::= CHOICE {\n      teletexString     TeletexString\n  \
    \                        (SIZE (1..ub-organization-name)),\n      printableString\
    \   PrintableString\n                          (SIZE (1..ub-organization-name)),\n\
    \      universalString   UniversalString\n                          (SIZE (1..ub-organization-name)),\n\
    \      utf8String        UTF8String\n                          (SIZE (1..ub-organization-name)),\n\
    \      bmpString         BMPString\n                          (SIZE (1..ub-organization-name))\
    \  }\n"
- title: -- Naming attributes of type X520OrganizationalUnitName
  contents:
  - '-- Naming attributes of type X520OrganizationalUnitName

    '
- title: id-at-organizationalUnitName AttributeType ::= { id-at 11 }
  contents:
  - 'id-at-organizationalUnitName AttributeType ::= { id-at 11 }

    '
- title: X520OrganizationalUnitName ::= CHOICE {
  contents:
  - "X520OrganizationalUnitName ::= CHOICE {\n      teletexString     TeletexString\n\
    \                          (SIZE (1..ub-organizational-unit-name)),\n      printableString\
    \   PrintableString\n                          (SIZE (1..ub-organizational-unit-name)),\n\
    \      universalString   UniversalString\n                          (SIZE (1..ub-organizational-unit-name)),\n\
    \      utf8String        UTF8String\n                          (SIZE (1..ub-organizational-unit-name)),\n\
    \      bmpString         BMPString\n                          (SIZE (1..ub-organizational-unit-name))\
    \ }\n"
- title: -- Naming attributes of type X520Title
  contents:
  - '-- Naming attributes of type X520Title

    '
- title: id-at-title             AttributeType ::= { id-at 12 }
  contents:
  - 'id-at-title             AttributeType ::= { id-at 12 }

    '
- title: X520Title ::= CHOICE {
  contents:
  - "X520Title ::= CHOICE {\n      teletexString     TeletexString   (SIZE (1..ub-title)),\n\
    \      printableString   PrintableString (SIZE (1..ub-title)),\n      universalString\
    \   UniversalString (SIZE (1..ub-title)),\n      utf8String        UTF8String\
    \      (SIZE (1..ub-title)),\n      bmpString         BMPString       (SIZE (1..ub-title))\
    \ }\n"
- title: -- Naming attributes of type X520dnQualifier
  contents:
  - '-- Naming attributes of type X520dnQualifier

    '
- title: id-at-dnQualifier       AttributeType ::= { id-at 46 }
  contents:
  - 'id-at-dnQualifier       AttributeType ::= { id-at 46 }

    '
- title: X520dnQualifier ::=     PrintableString
  contents:
  - 'X520dnQualifier ::=     PrintableString

    '
- title: -- Naming attributes of type X520countryName (digraph from IS 3166)
  contents:
  - '-- Naming attributes of type X520countryName (digraph from IS 3166)

    '
- title: id-at-countryName       AttributeType ::= { id-at 6 }
  contents:
  - 'id-at-countryName       AttributeType ::= { id-at 6 }

    '
- title: X520countryName ::=     PrintableString (SIZE (2))
  contents:
  - 'X520countryName ::=     PrintableString (SIZE (2))

    '
- title: -- Naming attributes of type X520SerialNumber
  contents:
  - '-- Naming attributes of type X520SerialNumber

    '
- title: id-at-serialNumber      AttributeType ::= { id-at 5 }
  contents:
  - 'id-at-serialNumber      AttributeType ::= { id-at 5 }

    '
- title: X520SerialNumber ::=    PrintableString (SIZE (1..ub-serial-number))
  contents:
  - 'X520SerialNumber ::=    PrintableString (SIZE (1..ub-serial-number))

    '
- title: -- Naming attributes of type X520Pseudonym
  contents:
  - '-- Naming attributes of type X520Pseudonym

    '
- title: id-at-pseudonym         AttributeType ::= { id-at 65 }
  contents:
  - 'id-at-pseudonym         AttributeType ::= { id-at 65 }

    '
- title: X520Pseudonym ::= CHOICE {
  contents:
  - "X520Pseudonym ::= CHOICE {\n   teletexString     TeletexString   (SIZE (1..ub-pseudonym)),\n\
    \   printableString   PrintableString (SIZE (1..ub-pseudonym)),\n   universalString\
    \   UniversalString (SIZE (1..ub-pseudonym)),\n   utf8String        UTF8String\
    \      (SIZE (1..ub-pseudonym)),\n   bmpString         BMPString       (SIZE (1..ub-pseudonym))\
    \ }\n"
- title: -- Naming attributes of type DomainComponent (from RFC 2247)
  contents:
  - '-- Naming attributes of type DomainComponent (from RFC 2247)

    '
- title: id-domainComponent      AttributeType ::=
  contents:
  - "id-domainComponent      AttributeType ::=\n                          { 0 9 2342\
    \ 19200300 100 1 25 }\n"
- title: DomainComponent ::=     IA5String
  contents:
  - 'DomainComponent ::=     IA5String

    '
- title: -- Legacy attributes
  contents:
  - '-- Legacy attributes

    '
- title: pkcs-9 OBJECT IDENTIFIER ::=
  contents:
  - "pkcs-9 OBJECT IDENTIFIER ::=\n       { iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) 9 }\n"
- title: id-emailAddress          AttributeType ::= { pkcs-9 1 }
  contents:
  - 'id-emailAddress          AttributeType ::= { pkcs-9 1 }

    '
- title: EmailAddress ::=         IA5String (SIZE (1..ub-emailaddress-length))
  contents:
  - 'EmailAddress ::=         IA5String (SIZE (1..ub-emailaddress-length))

    '
- title: -- naming data types --
  contents:
  - '-- naming data types --

    '
- title: Name ::= CHOICE { -- only one possibility for now --
  contents:
  - "Name ::= CHOICE { -- only one possibility for now --\n      rdnSequence  RDNSequence\
    \ }\n"
- title: RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
  contents:
  - 'RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

    '
- title: DistinguishedName ::=   RDNSequence
  contents:
  - 'DistinguishedName ::=   RDNSequence

    '
- title: RelativeDistinguishedName  ::=
  contents:
  - "RelativeDistinguishedName  ::=\n                    SET SIZE (1 .. MAX) OF AttributeTypeAndValue\n"
- title: -- Directory string type --
  contents:
  - '-- Directory string type --

    '
- title: DirectoryString ::= CHOICE {
  contents:
  - "DirectoryString ::= CHOICE {\n      teletexString             TeletexString \
    \  (SIZE (1..MAX)),\n      printableString           PrintableString (SIZE (1..MAX)),\n\
    \      universalString           UniversalString (SIZE (1..MAX)),\n      utf8String\
    \              UTF8String      (SIZE (1..MAX)),\n      bmpString             \
    \  BMPString       (SIZE (1..MAX)) }\n"
- title: -- certificate and CRL specific structures begin here
  contents:
  - '-- certificate and CRL specific structures begin here

    '
- title: Certificate  ::=  SEQUENCE  {
  contents:
  - "Certificate  ::=  SEQUENCE  {\n     tbsCertificate       TBSCertificate,\n  \
    \   signatureAlgorithm   AlgorithmIdentifier,\n     signature            BIT STRING\
    \  }\n"
- title: TBSCertificate  ::=  SEQUENCE  {
  contents:
  - "TBSCertificate  ::=  SEQUENCE  {\n     version         [0]  Version DEFAULT v1,\n\
    \     serialNumber         CertificateSerialNumber,\n     signature          \
    \  AlgorithmIdentifier,\n     issuer               Name,\n     validity      \
    \       Validity,\n     subject              Name,\n     subjectPublicKeyInfo\
    \ SubjectPublicKeyInfo,\n     issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n\
    \                          -- If present, version MUST be v2 or v3\n     subjectUniqueID\
    \ [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n                          -- If present,\
    \ version MUST be v2 or v3\n     extensions      [3]  Extensions OPTIONAL\n  \
    \                        -- If present, version MUST be v3 --  }\n"
- title: Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
  contents:
  - 'Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }

    '
- title: CertificateSerialNumber  ::=  INTEGER
  contents:
  - 'CertificateSerialNumber  ::=  INTEGER

    '
- title: Validity ::= SEQUENCE {
  contents:
  - "Validity ::= SEQUENCE {\n     notBefore      Time,\n     notAfter       Time\
    \  }\n"
- title: Time ::= CHOICE {
  contents:
  - "Time ::= CHOICE {\n     utcTime        UTCTime,\n     generalTime    GeneralizedTime\
    \ }\n"
- title: UniqueIdentifier  ::=  BIT STRING
  contents:
  - 'UniqueIdentifier  ::=  BIT STRING

    '
- title: SubjectPublicKeyInfo  ::=  SEQUENCE  {
  contents:
  - "SubjectPublicKeyInfo  ::=  SEQUENCE  {\n     algorithm            AlgorithmIdentifier,\n\
    \     subjectPublicKey     BIT STRING  }\n"
- title: Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
  contents:
  - 'Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension

    '
- title: Extension  ::=  SEQUENCE  {
  contents:
  - "Extension  ::=  SEQUENCE  {\n     extnID      OBJECT IDENTIFIER,\n     critical\
    \    BOOLEAN DEFAULT FALSE,\n     extnValue   OCTET STRING  }\n"
- title: -- CRL structures
  contents:
  - '-- CRL structures

    '
- title: CertificateList  ::=  SEQUENCE  {
  contents:
  - "CertificateList  ::=  SEQUENCE  {\n     tbsCertList          TBSCertList,\n \
    \    signatureAlgorithm   AlgorithmIdentifier,\n     signature            BIT\
    \ STRING  }\n"
- title: TBSCertList  ::=  SEQUENCE  {
  contents:
  - "TBSCertList  ::=  SEQUENCE  {\n     version                 Version OPTIONAL,\n\
    \                                  -- if present, MUST be v2\n     signature \
    \              AlgorithmIdentifier,\n     issuer                  Name,\n    \
    \ thisUpdate              Time,\n     nextUpdate              Time OPTIONAL,\n\
    \     revokedCertificates     SEQUENCE OF SEQUENCE  {\n          userCertificate\
    \         CertificateSerialNumber,\n          revocationDate          Time,\n\
    \          crlEntryExtensions      Extensions OPTIONAL\n                     \
    \                    -- if present, MUST be v2\n                             \
    \  }  OPTIONAL,\n     crlExtensions           [0] Extensions OPTIONAL }\n    \
    \                                     -- if present, MUST be v2\n"
- title: -- Version, Time, CertificateSerialNumber, and Extensions were
  contents:
  - '-- Version, Time, CertificateSerialNumber, and Extensions were

    '
- title: -- defined earlier for use in the certificate structure
  contents:
  - '-- defined earlier for use in the certificate structure

    '
- title: AlgorithmIdentifier  ::=  SEQUENCE  {
  contents:
  - "AlgorithmIdentifier  ::=  SEQUENCE  {\n     algorithm               OBJECT IDENTIFIER,\n\
    \     parameters              ANY DEFINED BY algorithm OPTIONAL  }\n         \
    \                       -- contains a value of the type\n                    \
    \            -- registered for use with the\n                                --\
    \ algorithm object identifier value\n"
- title: -- X.400 address syntax starts here
  contents:
  - '-- X.400 address syntax starts here

    '
- title: ORAddress ::= SEQUENCE {
  contents:
  - "ORAddress ::= SEQUENCE {\n   built-in-standard-attributes BuiltInStandardAttributes,\n\
    \   built-in-domain-defined-attributes\n                   BuiltInDomainDefinedAttributes\
    \ OPTIONAL,\n   -- see also teletex-domain-defined-attributes\n   extension-attributes\
    \ ExtensionAttributes OPTIONAL }\n"
- title: -- Built-in Standard Attributes
  contents:
  - '-- Built-in Standard Attributes

    '
- title: BuiltInStandardAttributes ::= SEQUENCE {
  contents:
  - "BuiltInStandardAttributes ::= SEQUENCE {\n   country-name                  CountryName\
    \ OPTIONAL,\n   administration-domain-name    AdministrationDomainName OPTIONAL,\n\
    \   network-address           [0] IMPLICIT NetworkAddress OPTIONAL,\n     -- see\
    \ also extended-network-address\n   terminal-identifier       [1] IMPLICIT TerminalIdentifier\
    \ OPTIONAL,\n   private-domain-name       [2] PrivateDomainName OPTIONAL,\n  \
    \ organization-name         [3] IMPLICIT OrganizationName OPTIONAL,\n     -- see\
    \ also teletex-organization-name\n   numeric-user-identifier   [4] IMPLICIT NumericUserIdentifier\n\
    \                                 OPTIONAL,\n   personal-name             [5]\
    \ IMPLICIT PersonalName OPTIONAL,\n     -- see also teletex-personal-name\n  \
    \ organizational-unit-names [6] IMPLICIT OrganizationalUnitNames\n           \
    \                      OPTIONAL }\n     -- see also teletex-organizational-unit-names\n"
- title: CountryName ::= [APPLICATION 1] CHOICE {
  contents:
  - "CountryName ::= [APPLICATION 1] CHOICE {\n   x121-dcc-code         NumericString\n\
    \                           (SIZE (ub-country-name-numeric-length)),\n   iso-3166-alpha2-code\
    \  PrintableString\n                           (SIZE (ub-country-name-alpha-length))\
    \ }\n"
- title: AdministrationDomainName ::= [APPLICATION 2] CHOICE {
  contents:
  - "AdministrationDomainName ::= [APPLICATION 2] CHOICE {\n   numeric   NumericString\
    \   (SIZE (0..ub-domain-name-length)),\n   printable PrintableString (SIZE (0..ub-domain-name-length))\
    \ }\n"
- title: NetworkAddress ::= X121Address  -- see also extended-network-address
  contents:
  - 'NetworkAddress ::= X121Address  -- see also extended-network-address

    '
- title: X121Address ::= NumericString (SIZE (1..ub-x121-address-length))
  contents:
  - 'X121Address ::= NumericString (SIZE (1..ub-x121-address-length))

    '
- title: TerminalIdentifier ::= PrintableString (SIZE
  contents:
  - 'TerminalIdentifier ::= PrintableString (SIZE

    '
- title: (1..ub-terminal-id-length))
  contents:
  - '(1..ub-terminal-id-length))

    '
- title: PrivateDomainName ::= CHOICE {
  contents:
  - "PrivateDomainName ::= CHOICE {\n   numeric   NumericString   (SIZE (1..ub-domain-name-length)),\n\
    \   printable PrintableString (SIZE (1..ub-domain-name-length)) }\n"
- title: OrganizationName ::= PrintableString
  contents:
  - "OrganizationName ::= PrintableString\n                            (SIZE (1..ub-organization-name-length))\n\
    \  -- see also teletex-organization-name\n"
- title: NumericUserIdentifier ::= NumericString
  contents:
  - "NumericUserIdentifier ::= NumericString\n                            (SIZE (1..ub-numeric-user-id-length))\n"
- title: PersonalName ::= SET {
  contents:
  - "PersonalName ::= SET {\n   surname     [0] IMPLICIT PrintableString\n       \
    \             (SIZE (1..ub-surname-length)),\n   given-name  [1] IMPLICIT PrintableString\n\
    \                    (SIZE (1..ub-given-name-length)) OPTIONAL,\n   initials \
    \   [2] IMPLICIT PrintableString\n                    (SIZE (1..ub-initials-length))\
    \ OPTIONAL,\n   generation-qualifier [3] IMPLICIT PrintableString\n          \
    \          (SIZE (1..ub-generation-qualifier-length))\n                    OPTIONAL\
    \ }\n  -- see also teletex-personal-name\n"
- title: OrganizationalUnitNames ::= SEQUENCE SIZE (1..ub-organizational-units)
  contents:
  - "OrganizationalUnitNames ::= SEQUENCE SIZE (1..ub-organizational-units)\n    \
    \                         OF OrganizationalUnitName\n  -- see also teletex-organizational-unit-names\n"
- title: OrganizationalUnitName ::= PrintableString (SIZE
  contents:
  - "OrganizationalUnitName ::= PrintableString (SIZE\n                    (1..ub-organizational-unit-name-length))\n"
- title: -- Built-in Domain-defined Attributes
  contents:
  - '-- Built-in Domain-defined Attributes

    '
- title: BuiltInDomainDefinedAttributes ::= SEQUENCE SIZE
  contents:
  - "BuiltInDomainDefinedAttributes ::= SEQUENCE SIZE\n                    (1..ub-domain-defined-attributes)\
    \ OF\n                    BuiltInDomainDefinedAttribute\n"
- title: BuiltInDomainDefinedAttribute ::= SEQUENCE {
  contents:
  - "BuiltInDomainDefinedAttribute ::= SEQUENCE {\n   type PrintableString (SIZE\n\
    \                   (1..ub-domain-defined-attribute-type-length)),\n   value PrintableString\
    \ (SIZE\n                   (1..ub-domain-defined-attribute-value-length)) }\n"
- title: -- Extension Attributes
  contents:
  - '-- Extension Attributes

    '
- title: ExtensionAttributes ::= SET SIZE (1..ub-extension-attributes) OF
  contents:
  - "ExtensionAttributes ::= SET SIZE (1..ub-extension-attributes) OF\n          \
    \     ExtensionAttribute\n"
- title: ExtensionAttribute ::=  SEQUENCE {
  contents:
  - "ExtensionAttribute ::=  SEQUENCE {\n   extension-attribute-type [0] IMPLICIT\
    \ INTEGER\n                   (0..ub-extension-attributes),\n   extension-attribute-value\
    \ [1]\n                   ANY DEFINED BY extension-attribute-type }\n"
- title: -- Extension types and attribute values
  contents:
  - '-- Extension types and attribute values

    '
- title: common-name INTEGER ::= 1
  contents:
  - 'common-name INTEGER ::= 1

    '
- title: CommonName ::= PrintableString (SIZE (1..ub-common-name-length))
  contents:
  - 'CommonName ::= PrintableString (SIZE (1..ub-common-name-length))

    '
- title: teletex-common-name INTEGER ::= 2
  contents:
  - 'teletex-common-name INTEGER ::= 2

    '
- title: TeletexCommonName ::= TeletexString (SIZE (1..ub-common-name-length))
  contents:
  - 'TeletexCommonName ::= TeletexString (SIZE (1..ub-common-name-length))

    '
- title: teletex-organization-name INTEGER ::= 3
  contents:
  - 'teletex-organization-name INTEGER ::= 3

    '
- title: TeletexOrganizationName ::=
  contents:
  - "TeletexOrganizationName ::=\n                TeletexString (SIZE (1..ub-organization-name-length))\n"
- title: teletex-personal-name INTEGER ::= 4
  contents:
  - 'teletex-personal-name INTEGER ::= 4

    '
- title: TeletexPersonalName ::= SET {
  contents:
  - "TeletexPersonalName ::= SET {\n   surname     [0] IMPLICIT TeletexString\n  \
    \                  (SIZE (1..ub-surname-length)),\n   given-name  [1] IMPLICIT\
    \ TeletexString\n                    (SIZE (1..ub-given-name-length)) OPTIONAL,\n\
    \   initials    [2] IMPLICIT TeletexString\n                    (SIZE (1..ub-initials-length))\
    \ OPTIONAL,\n   generation-qualifier [3] IMPLICIT TeletexString\n            \
    \        (SIZE (1..ub-generation-qualifier-length))\n                    OPTIONAL\
    \ }\n"
- title: teletex-organizational-unit-names INTEGER ::= 5
  contents:
  - 'teletex-organizational-unit-names INTEGER ::= 5

    '
- title: TeletexOrganizationalUnitNames ::= SEQUENCE SIZE
  contents:
  - "TeletexOrganizationalUnitNames ::= SEQUENCE SIZE\n      (1..ub-organizational-units)\
    \ OF TeletexOrganizationalUnitName\n"
- title: TeletexOrganizationalUnitName ::= TeletexString
  contents:
  - "TeletexOrganizationalUnitName ::= TeletexString\n                  (SIZE (1..ub-organizational-unit-name-length))\n"
- title: pds-name INTEGER ::= 7
  contents:
  - 'pds-name INTEGER ::= 7

    '
- title: PDSName ::= PrintableString (SIZE (1..ub-pds-name-length))
  contents:
  - 'PDSName ::= PrintableString (SIZE (1..ub-pds-name-length))

    '
- title: physical-delivery-country-name INTEGER ::= 8
  contents:
  - 'physical-delivery-country-name INTEGER ::= 8

    '
- title: PhysicalDeliveryCountryName ::= CHOICE {
  contents:
  - "PhysicalDeliveryCountryName ::= CHOICE {\n   x121-dcc-code NumericString (SIZE\n"
- title: (ub-country-name-numeric-length)),
  contents:
  - "(ub-country-name-numeric-length)),\n   iso-3166-alpha2-code PrintableString\n\
    \                  (SIZE (ub-country-name-alpha-length)) }\n"
- title: postal-code INTEGER ::= 9
  contents:
  - 'postal-code INTEGER ::= 9

    '
- title: PostalCode ::= CHOICE {
  contents:
  - "PostalCode ::= CHOICE {\n   numeric-code NumericString (SIZE (1..ub-postal-code-length)),\n\
    \   printable-code PrintableString (SIZE (1..ub-postal-code-length)) }\n"
- title: physical-delivery-office-name INTEGER ::= 10
  contents:
  - 'physical-delivery-office-name INTEGER ::= 10

    '
- title: PhysicalDeliveryOfficeName ::= PDSParameter
  contents:
  - 'PhysicalDeliveryOfficeName ::= PDSParameter

    '
- title: physical-delivery-office-number INTEGER ::= 11
  contents:
  - 'physical-delivery-office-number INTEGER ::= 11

    '
- title: PhysicalDeliveryOfficeNumber ::= PDSParameter
  contents:
  - 'PhysicalDeliveryOfficeNumber ::= PDSParameter

    '
- title: extension-OR-address-components INTEGER ::= 12
  contents:
  - 'extension-OR-address-components INTEGER ::= 12

    '
- title: ExtensionORAddressComponents ::= PDSParameter
  contents:
  - 'ExtensionORAddressComponents ::= PDSParameter

    '
- title: physical-delivery-personal-name INTEGER ::= 13
  contents:
  - 'physical-delivery-personal-name INTEGER ::= 13

    '
- title: PhysicalDeliveryPersonalName ::= PDSParameter
  contents:
  - 'PhysicalDeliveryPersonalName ::= PDSParameter

    '
- title: physical-delivery-organization-name INTEGER ::= 14
  contents:
  - 'physical-delivery-organization-name INTEGER ::= 14

    '
- title: PhysicalDeliveryOrganizationName ::= PDSParameter
  contents:
  - 'PhysicalDeliveryOrganizationName ::= PDSParameter

    '
- title: extension-physical-delivery-address-components INTEGER ::= 15
  contents:
  - 'extension-physical-delivery-address-components INTEGER ::= 15

    '
- title: ExtensionPhysicalDeliveryAddressComponents ::= PDSParameter
  contents:
  - 'ExtensionPhysicalDeliveryAddressComponents ::= PDSParameter

    '
- title: unformatted-postal-address INTEGER ::= 16
  contents:
  - 'unformatted-postal-address INTEGER ::= 16

    '
- title: UnformattedPostalAddress ::= SET {
  contents:
  - "UnformattedPostalAddress ::= SET {\n   printable-address SEQUENCE SIZE (1..ub-pds-physical-address-lines)\n\
    \         OF PrintableString (SIZE (1..ub-pds-parameter-length))\n         OPTIONAL,\n\
    \   teletex-string TeletexString\n         (SIZE (1..ub-unformatted-address-length))\
    \ OPTIONAL }\n"
- title: street-address INTEGER ::= 17
  contents:
  - 'street-address INTEGER ::= 17

    '
- title: StreetAddress ::= PDSParameter
  contents:
  - 'StreetAddress ::= PDSParameter

    '
- title: post-office-box-address INTEGER ::= 18
  contents:
  - 'post-office-box-address INTEGER ::= 18

    '
- title: PostOfficeBoxAddress ::= PDSParameter
  contents:
  - 'PostOfficeBoxAddress ::= PDSParameter

    '
- title: poste-restante-address INTEGER ::= 19
  contents:
  - 'poste-restante-address INTEGER ::= 19

    '
- title: PosteRestanteAddress ::= PDSParameter
  contents:
  - 'PosteRestanteAddress ::= PDSParameter

    '
- title: unique-postal-name INTEGER ::= 20
  contents:
  - 'unique-postal-name INTEGER ::= 20

    '
- title: UniquePostalName ::= PDSParameter
  contents:
  - 'UniquePostalName ::= PDSParameter

    '
- title: local-postal-attributes INTEGER ::= 21
  contents:
  - 'local-postal-attributes INTEGER ::= 21

    '
- title: LocalPostalAttributes ::= PDSParameter
  contents:
  - 'LocalPostalAttributes ::= PDSParameter

    '
- title: PDSParameter ::= SET {
  contents:
  - "PDSParameter ::= SET {\n   printable-string PrintableString\n               \
    \ (SIZE(1..ub-pds-parameter-length)) OPTIONAL,\n   teletex-string TeletexString\n\
    \                (SIZE(1..ub-pds-parameter-length)) OPTIONAL }\n"
- title: extended-network-address INTEGER ::= 22
  contents:
  - 'extended-network-address INTEGER ::= 22

    '
- title: ExtendedNetworkAddress ::= CHOICE {
  contents:
  - "ExtendedNetworkAddress ::= CHOICE {\n   e163-4-address SEQUENCE {\n      number\
    \      [0] IMPLICIT NumericString\n                       (SIZE (1..ub-e163-4-number-length)),\n\
    \      sub-address [1] IMPLICIT NumericString\n                       (SIZE (1..ub-e163-4-sub-address-length))\n\
    \                       OPTIONAL },\n   psap-address [0] IMPLICIT PresentationAddress\
    \ }\n"
- title: PresentationAddress ::= SEQUENCE {
  contents:
  - "PresentationAddress ::= SEQUENCE {\n    pSelector     [0] EXPLICIT OCTET STRING\
    \ OPTIONAL,\n    sSelector     [1] EXPLICIT OCTET STRING OPTIONAL,\n    tSelector\
    \     [2] EXPLICIT OCTET STRING OPTIONAL,\n    nAddresses    [3] EXPLICIT SET\
    \ SIZE (1..MAX) OF OCTET STRING }\n"
- title: terminal-type  INTEGER ::= 23
  contents:
  - 'terminal-type  INTEGER ::= 23

    '
- title: TerminalType ::= INTEGER {
  contents:
  - "TerminalType ::= INTEGER {\n   telex (3),\n   teletex (4),\n   g3-facsimile (5),\n\
    \   g4-facsimile (6),\n   ia5-terminal (7),\n   videotex (8) } (0..ub-integer-options)\n"
- title: -- Extension Domain-defined Attributes
  contents:
  - '-- Extension Domain-defined Attributes

    '
- title: teletex-domain-defined-attributes INTEGER ::= 6
  contents:
  - 'teletex-domain-defined-attributes INTEGER ::= 6

    '
- title: TeletexDomainDefinedAttributes ::= SEQUENCE SIZE
  contents:
  - "TeletexDomainDefinedAttributes ::= SEQUENCE SIZE\n   (1..ub-domain-defined-attributes)\
    \ OF TeletexDomainDefinedAttribute\n"
- title: TeletexDomainDefinedAttribute ::= SEQUENCE {
  contents:
  - "TeletexDomainDefinedAttribute ::= SEQUENCE {\n        type TeletexString\n  \
    \             (SIZE (1..ub-domain-defined-attribute-type-length)),\n        value\
    \ TeletexString\n               (SIZE (1..ub-domain-defined-attribute-value-length))\
    \ }\n"
- title: --  specifications of Upper Bounds MUST be regarded as mandatory
  contents:
  - '--  specifications of Upper Bounds MUST be regarded as mandatory

    '
- title: --  from Annex B of ITU-T X.411 Reference Definition of MTS Parameter
  contents:
  - '--  from Annex B of ITU-T X.411 Reference Definition of MTS Parameter

    '
- title: --  Upper Bounds
  contents:
  - '--  Upper Bounds

    '
- title: -- Upper Bounds
  contents:
  - '-- Upper Bounds

    '
- title: ub-name INTEGER ::= 32768
  contents:
  - 'ub-name INTEGER ::= 32768

    '
- title: ub-common-name INTEGER ::= 64
  contents:
  - 'ub-common-name INTEGER ::= 64

    '
- title: ub-locality-name INTEGER ::= 128
  contents:
  - 'ub-locality-name INTEGER ::= 128

    '
- title: ub-state-name INTEGER ::= 128
  contents:
  - 'ub-state-name INTEGER ::= 128

    '
- title: ub-organization-name INTEGER ::= 64
  contents:
  - 'ub-organization-name INTEGER ::= 64

    '
- title: ub-organizational-unit-name INTEGER ::= 64
  contents:
  - 'ub-organizational-unit-name INTEGER ::= 64

    '
- title: ub-title INTEGER ::= 64
  contents:
  - 'ub-title INTEGER ::= 64

    '
- title: ub-serial-number INTEGER ::= 64
  contents:
  - 'ub-serial-number INTEGER ::= 64

    '
- title: ub-match INTEGER ::= 128
  contents:
  - 'ub-match INTEGER ::= 128

    '
- title: ub-emailaddress-length INTEGER ::= 128
  contents:
  - 'ub-emailaddress-length INTEGER ::= 128

    '
- title: ub-common-name-length INTEGER ::= 64
  contents:
  - 'ub-common-name-length INTEGER ::= 64

    '
- title: ub-country-name-alpha-length INTEGER ::= 2
  contents:
  - 'ub-country-name-alpha-length INTEGER ::= 2

    '
- title: ub-country-name-numeric-length INTEGER ::= 3
  contents:
  - 'ub-country-name-numeric-length INTEGER ::= 3

    '
- title: ub-domain-defined-attributes INTEGER ::= 4
  contents:
  - 'ub-domain-defined-attributes INTEGER ::= 4

    '
- title: ub-domain-defined-attribute-type-length INTEGER ::= 8
  contents:
  - 'ub-domain-defined-attribute-type-length INTEGER ::= 8

    '
- title: ub-domain-defined-attribute-value-length INTEGER ::= 128
  contents:
  - 'ub-domain-defined-attribute-value-length INTEGER ::= 128

    '
- title: ub-domain-name-length INTEGER ::= 16
  contents:
  - 'ub-domain-name-length INTEGER ::= 16

    '
- title: ub-extension-attributes INTEGER ::= 256
  contents:
  - 'ub-extension-attributes INTEGER ::= 256

    '
- title: ub-e163-4-number-length INTEGER ::= 15
  contents:
  - 'ub-e163-4-number-length INTEGER ::= 15

    '
- title: ub-e163-4-sub-address-length INTEGER ::= 40
  contents:
  - 'ub-e163-4-sub-address-length INTEGER ::= 40

    '
- title: ub-generation-qualifier-length INTEGER ::= 3
  contents:
  - 'ub-generation-qualifier-length INTEGER ::= 3

    '
- title: ub-given-name-length INTEGER ::= 16
  contents:
  - 'ub-given-name-length INTEGER ::= 16

    '
- title: ub-initials-length INTEGER ::= 5
  contents:
  - 'ub-initials-length INTEGER ::= 5

    '
- title: ub-integer-options INTEGER ::= 256
  contents:
  - 'ub-integer-options INTEGER ::= 256

    '
- title: ub-numeric-user-id-length INTEGER ::= 32
  contents:
  - 'ub-numeric-user-id-length INTEGER ::= 32

    '
- title: ub-organization-name-length INTEGER ::= 64
  contents:
  - 'ub-organization-name-length INTEGER ::= 64

    '
- title: ub-organizational-unit-name-length INTEGER ::= 32
  contents:
  - 'ub-organizational-unit-name-length INTEGER ::= 32

    '
- title: ub-organizational-units INTEGER ::= 4
  contents:
  - 'ub-organizational-units INTEGER ::= 4

    '
- title: ub-pds-name-length INTEGER ::= 16
  contents:
  - 'ub-pds-name-length INTEGER ::= 16

    '
- title: ub-pds-parameter-length INTEGER ::= 30
  contents:
  - 'ub-pds-parameter-length INTEGER ::= 30

    '
- title: ub-pds-physical-address-lines INTEGER ::= 6
  contents:
  - 'ub-pds-physical-address-lines INTEGER ::= 6

    '
- title: ub-postal-code-length INTEGER ::= 16
  contents:
  - 'ub-postal-code-length INTEGER ::= 16

    '
- title: ub-pseudonym INTEGER ::= 128
  contents:
  - 'ub-pseudonym INTEGER ::= 128

    '
- title: ub-surname-length INTEGER ::= 40
  contents:
  - 'ub-surname-length INTEGER ::= 40

    '
- title: ub-terminal-id-length INTEGER ::= 24
  contents:
  - 'ub-terminal-id-length INTEGER ::= 24

    '
- title: ub-unformatted-address-length INTEGER ::= 180
  contents:
  - 'ub-unformatted-address-length INTEGER ::= 180

    '
- title: ub-x121-address-length INTEGER ::= 16
  contents:
  - 'ub-x121-address-length INTEGER ::= 16

    '
- title: -- Note - upper bounds on string types, such as TeletexString, are
  contents:
  - '-- Note - upper bounds on string types, such as TeletexString, are

    '
- title: -- measured in characters.  Excepting PrintableString or IA5String, a
  contents:
  - '-- measured in characters.  Excepting PrintableString or IA5String, a

    '
- title: -- significantly greater number of octets will be required to hold
  contents:
  - '-- significantly greater number of octets will be required to hold

    '
- title: -- such a value.  As a minimum, 16 octets, or twice the specified
  contents:
  - '-- such a value.  As a minimum, 16 octets, or twice the specified

    '
- title: -- upper bound, whichever is the larger, should be allowed for
  contents:
  - '-- upper bound, whichever is the larger, should be allowed for

    '
- title: -- TeletexString.  For UTF8String or UniversalString at least four
  contents:
  - '-- TeletexString.  For UTF8String or UniversalString at least four

    '
- title: -- times the upper bound should be allowed.
  contents:
  - '-- times the upper bound should be allowed.

    '
- title: END
  contents:
  - 'END

    '
- title: A.2 Implicitly Tagged Module, 1988 Syntax
  contents:
  - 'A.2 Implicitly Tagged Module, 1988 Syntax

    '
- title: PKIX1Implicit88 { iso(1) identified-organization(3) dod(6) internet(1)
  contents:
  - "PKIX1Implicit88 { iso(1) identified-organization(3) dod(6) internet(1)\n  security(5)\
    \ mechanisms(5) pkix(7) id-mod(0) id-pkix1-implicit(19) }\n"
- title: DEFINITIONS IMPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: -- EXPORTS ALL --
  contents:
  - '-- EXPORTS ALL --

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n      id-pe, id-kp, id-qt-unotice, id-qt-cps,\n      -- delete following\
    \ line if \"new\" types are supported --\n      BMPString, UTF8String,  -- end\
    \ \"new\" types --\n      ORAddress, Name, RelativeDistinguishedName,\n      CertificateSerialNumber,\
    \ Attribute, DirectoryString\n      FROM PKIX1Explicit88 { iso(1) identified-organization(3)\n\
    \            dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n          \
    \  id-mod(0) id-pkix1-explicit(18) };\n"
- title: -- ISO arc for standard certificate and CRL extensions
  contents:
  - '-- ISO arc for standard certificate and CRL extensions

    '
- title: id-ce OBJECT IDENTIFIER  ::=  {joint-iso-ccitt(2) ds(5) 29}
  contents:
  - 'id-ce OBJECT IDENTIFIER  ::=  {joint-iso-ccitt(2) ds(5) 29}

    '
- title: -- authority key identifier OID and syntax
  contents:
  - '-- authority key identifier OID and syntax

    '
- title: id-ce-authorityKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 35 }
  contents:
  - 'id-ce-authorityKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 35 }

    '
- title: AuthorityKeyIdentifier ::= SEQUENCE {
  contents:
  - "AuthorityKeyIdentifier ::= SEQUENCE {\n    keyIdentifier             [0] KeyIdentifier\
    \            OPTIONAL,\n    authorityCertIssuer       [1] GeneralNames       \
    \      OPTIONAL,\n    authorityCertSerialNumber [2] CertificateSerialNumber  OPTIONAL\
    \ }\n    -- authorityCertIssuer and authorityCertSerialNumber MUST both\n    --\
    \ be present or both be absent\n"
- title: KeyIdentifier ::= OCTET STRING
  contents:
  - 'KeyIdentifier ::= OCTET STRING

    '
- title: -- subject key identifier OID and syntax
  contents:
  - '-- subject key identifier OID and syntax

    '
- title: id-ce-subjectKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 14 }
  contents:
  - 'id-ce-subjectKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 14 }

    '
- title: SubjectKeyIdentifier ::= KeyIdentifier
  contents:
  - 'SubjectKeyIdentifier ::= KeyIdentifier

    '
- title: -- key usage extension OID and syntax
  contents:
  - '-- key usage extension OID and syntax

    '
- title: id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
  contents:
  - 'id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }

    '
- title: KeyUsage ::= BIT STRING {
  contents:
  - "KeyUsage ::= BIT STRING {\n     digitalSignature        (0),\n     nonRepudiation\
    \          (1),\n     keyEncipherment         (2),\n     dataEncipherment    \
    \    (3),\n     keyAgreement            (4),\n     keyCertSign             (5),\n\
    \     cRLSign                 (6),\n     encipherOnly            (7),\n     decipherOnly\
    \            (8) }\n"
- title: -- private key usage period extension OID and syntax
  contents:
  - '-- private key usage period extension OID and syntax

    '
- title: id-ce-privateKeyUsagePeriod OBJECT IDENTIFIER ::=  { id-ce 16 }
  contents:
  - 'id-ce-privateKeyUsagePeriod OBJECT IDENTIFIER ::=  { id-ce 16 }

    '
- title: PrivateKeyUsagePeriod ::= SEQUENCE {
  contents:
  - "PrivateKeyUsagePeriod ::= SEQUENCE {\n     notBefore       [0]     GeneralizedTime\
    \ OPTIONAL,\n     notAfter        [1]     GeneralizedTime OPTIONAL }\n     --\
    \ either notBefore or notAfter MUST be present\n"
- title: -- certificate policies extension OID and syntax
  contents:
  - '-- certificate policies extension OID and syntax

    '
- title: id-ce-certificatePolicies OBJECT IDENTIFIER ::=  { id-ce 32 }
  contents:
  - 'id-ce-certificatePolicies OBJECT IDENTIFIER ::=  { id-ce 32 }

    '
- title: anyPolicy OBJECT IDENTIFIER ::= { id-ce-certificatePolicies 0 }
  contents:
  - 'anyPolicy OBJECT IDENTIFIER ::= { id-ce-certificatePolicies 0 }

    '
- title: CertificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation
  contents:
  - 'CertificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation

    '
- title: PolicyInformation ::= SEQUENCE {
  contents:
  - "PolicyInformation ::= SEQUENCE {\n     policyIdentifier   CertPolicyId,\n   \
    \  policyQualifiers   SEQUENCE SIZE (1..MAX) OF\n             PolicyQualifierInfo\
    \ OPTIONAL }\n"
- title: CertPolicyId ::= OBJECT IDENTIFIER
  contents:
  - 'CertPolicyId ::= OBJECT IDENTIFIER

    '
- title: PolicyQualifierInfo ::= SEQUENCE {
  contents:
  - "PolicyQualifierInfo ::= SEQUENCE {\n       policyQualifierId  PolicyQualifierId,\n\
    \       qualifier        ANY DEFINED BY policyQualifierId }\n"
- title: -- Implementations that recognize additional policy qualifiers MUST
  contents:
  - '-- Implementations that recognize additional policy qualifiers MUST

    '
- title: -- augment the following definition for PolicyQualifierId
  contents:
  - '-- augment the following definition for PolicyQualifierId

    '
- title: PolicyQualifierId ::=
  contents:
  - "PolicyQualifierId ::=\n    OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )\n"
- title: -- CPS pointer qualifier
  contents:
  - '-- CPS pointer qualifier

    '
- title: CPSuri ::= IA5String
  contents:
  - 'CPSuri ::= IA5String

    '
- title: -- user notice qualifier
  contents:
  - '-- user notice qualifier

    '
- title: UserNotice ::= SEQUENCE {
  contents:
  - "UserNotice ::= SEQUENCE {\n     noticeRef        NoticeReference OPTIONAL,\n\
    \     explicitText     DisplayText OPTIONAL}\n"
- title: NoticeReference ::= SEQUENCE {
  contents:
  - "NoticeReference ::= SEQUENCE {\n     organization     DisplayText,\n     noticeNumbers\
    \    SEQUENCE OF INTEGER }\n"
- title: DisplayText ::= CHOICE {
  contents:
  - "DisplayText ::= CHOICE {\n     ia5String        IA5String      (SIZE (1..200)),\n\
    \     visibleString    VisibleString  (SIZE (1..200)),\n     bmpString       \
    \ BMPString      (SIZE (1..200)),\n     utf8String       UTF8String     (SIZE\
    \ (1..200)) }\n"
- title: -- policy mapping extension OID and syntax
  contents:
  - '-- policy mapping extension OID and syntax

    '
- title: id-ce-policyMappings OBJECT IDENTIFIER ::=  { id-ce 33 }
  contents:
  - 'id-ce-policyMappings OBJECT IDENTIFIER ::=  { id-ce 33 }

    '
- title: PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE {
  contents:
  - "PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE {\n     issuerDomainPolicy\
    \      CertPolicyId,\n     subjectDomainPolicy     CertPolicyId }\n"
- title: -- subject alternative name extension OID and syntax
  contents:
  - '-- subject alternative name extension OID and syntax

    '
- title: id-ce-subjectAltName OBJECT IDENTIFIER ::=  { id-ce 17 }
  contents:
  - 'id-ce-subjectAltName OBJECT IDENTIFIER ::=  { id-ce 17 }

    '
- title: SubjectAltName ::= GeneralNames
  contents:
  - 'SubjectAltName ::= GeneralNames

    '
- title: GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
  contents:
  - 'GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName

    '
- title: GeneralName ::= CHOICE {
  contents:
  - "GeneralName ::= CHOICE {\n     otherName                       [0]     AnotherName,\n\
    \     rfc822Name                      [1]     IA5String,\n     dNSName       \
    \                  [2]     IA5String,\n     x400Address                     [3]\
    \     ORAddress,\n     directoryName                   [4]     Name,\n     ediPartyName\
    \                    [5]     EDIPartyName,\n     uniformResourceIdentifier   \
    \    [6]     IA5String,\n     iPAddress                       [7]     OCTET STRING,\n\
    \     registeredID                    [8]     OBJECT IDENTIFIER }\n"
- title: -- AnotherName replaces OTHER-NAME ::= TYPE-IDENTIFIER, as
  contents:
  - '-- AnotherName replaces OTHER-NAME ::= TYPE-IDENTIFIER, as

    '
- title: -- TYPE-IDENTIFIER is not supported in the '88 ASN.1 syntax
  contents:
  - '-- TYPE-IDENTIFIER is not supported in the ''88 ASN.1 syntax

    '
- title: AnotherName ::= SEQUENCE {
  contents:
  - "AnotherName ::= SEQUENCE {\n     type-id    OBJECT IDENTIFIER,\n     value  \
    \    [0] EXPLICIT ANY DEFINED BY type-id }\n"
- title: EDIPartyName ::= SEQUENCE {
  contents:
  - "EDIPartyName ::= SEQUENCE {\n     nameAssigner            [0]     DirectoryString\
    \ OPTIONAL,\n     partyName               [1]     DirectoryString }\n"
- title: -- issuer alternative name extension OID and syntax
  contents:
  - '-- issuer alternative name extension OID and syntax

    '
- title: id-ce-issuerAltName OBJECT IDENTIFIER ::=  { id-ce 18 }
  contents:
  - 'id-ce-issuerAltName OBJECT IDENTIFIER ::=  { id-ce 18 }

    '
- title: IssuerAltName ::= GeneralNames
  contents:
  - 'IssuerAltName ::= GeneralNames

    '
- title: id-ce-subjectDirectoryAttributes OBJECT IDENTIFIER ::=  { id-ce 9 }
  contents:
  - 'id-ce-subjectDirectoryAttributes OBJECT IDENTIFIER ::=  { id-ce 9 }

    '
- title: SubjectDirectoryAttributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
  contents:
  - 'SubjectDirectoryAttributes ::= SEQUENCE SIZE (1..MAX) OF Attribute

    '
- title: -- basic constraints extension OID and syntax
  contents:
  - '-- basic constraints extension OID and syntax

    '
- title: id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }
  contents:
  - 'id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }

    '
- title: BasicConstraints ::= SEQUENCE {
  contents:
  - "BasicConstraints ::= SEQUENCE {\n     cA                      BOOLEAN DEFAULT\
    \ FALSE,\n     pathLenConstraint       INTEGER (0..MAX) OPTIONAL }\n"
- title: -- name constraints extension OID and syntax
  contents:
  - '-- name constraints extension OID and syntax

    '
- title: id-ce-nameConstraints OBJECT IDENTIFIER ::=  { id-ce 30 }
  contents:
  - 'id-ce-nameConstraints OBJECT IDENTIFIER ::=  { id-ce 30 }

    '
- title: NameConstraints ::= SEQUENCE {
  contents:
  - "NameConstraints ::= SEQUENCE {\n     permittedSubtrees       [0]     GeneralSubtrees\
    \ OPTIONAL,\n     excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\n"
- title: GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree
  contents:
  - 'GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree

    '
- title: GeneralSubtree ::= SEQUENCE {
  contents:
  - "GeneralSubtree ::= SEQUENCE {\n     base                    GeneralName,\n  \
    \   minimum         [0]     BaseDistance DEFAULT 0,\n     maximum         [1]\
    \     BaseDistance OPTIONAL }\n"
- title: BaseDistance ::= INTEGER (0..MAX)
  contents:
  - 'BaseDistance ::= INTEGER (0..MAX)

    '
- title: -- policy constraints extension OID and syntax
  contents:
  - '-- policy constraints extension OID and syntax

    '
- title: id-ce-policyConstraints OBJECT IDENTIFIER ::=  { id-ce 36 }
  contents:
  - 'id-ce-policyConstraints OBJECT IDENTIFIER ::=  { id-ce 36 }

    '
- title: PolicyConstraints ::= SEQUENCE {
  contents:
  - "PolicyConstraints ::= SEQUENCE {\n     requireExplicitPolicy           [0] SkipCerts\
    \ OPTIONAL,\n     inhibitPolicyMapping            [1] SkipCerts OPTIONAL }\n"
- title: SkipCerts ::= INTEGER (0..MAX)
  contents:
  - 'SkipCerts ::= INTEGER (0..MAX)

    '
- title: -- CRL distribution points extension OID and syntax
  contents:
  - '-- CRL distribution points extension OID and syntax

    '
- title: id-ce-cRLDistributionPoints     OBJECT IDENTIFIER  ::=  {id-ce 31}
  contents:
  - 'id-ce-cRLDistributionPoints     OBJECT IDENTIFIER  ::=  {id-ce 31}

    '
- title: CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint
  contents:
  - 'CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint

    '
- title: DistributionPoint ::= SEQUENCE {
  contents:
  - "DistributionPoint ::= SEQUENCE {\n     distributionPoint       [0]     DistributionPointName\
    \ OPTIONAL,\n     reasons                 [1]     ReasonFlags OPTIONAL,\n    \
    \ cRLIssuer               [2]     GeneralNames OPTIONAL }\n"
- title: DistributionPointName ::= CHOICE {
  contents:
  - "DistributionPointName ::= CHOICE {\n     fullName                [0]     GeneralNames,\n\
    \     nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }\n"
- title: ReasonFlags ::= BIT STRING {
  contents:
  - "ReasonFlags ::= BIT STRING {\n     unused                  (0),\n     keyCompromise\
    \           (1),\n     cACompromise            (2),\n     affiliationChanged \
    \     (3),\n     superseded              (4),\n     cessationOfOperation    (5),\n\
    \     certificateHold         (6),\n     privilegeWithdrawn      (7),\n     aACompromise\
    \            (8) }\n"
- title: -- extended key usage extension OID and syntax
  contents:
  - '-- extended key usage extension OID and syntax

    '
- title: id-ce-extKeyUsage OBJECT IDENTIFIER ::= {id-ce 37}
  contents:
  - 'id-ce-extKeyUsage OBJECT IDENTIFIER ::= {id-ce 37}

    '
- title: ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId
  contents:
  - 'ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId

    '
- title: KeyPurposeId ::= OBJECT IDENTIFIER
  contents:
  - 'KeyPurposeId ::= OBJECT IDENTIFIER

    '
- title: -- permit unspecified key uses
  contents:
  - '-- permit unspecified key uses

    '
- title: anyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 }
  contents:
  - 'anyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 }

    '
- title: -- extended key purpose OIDs
  contents:
  - '-- extended key purpose OIDs

    '
- title: id-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 }
  contents:
  - 'id-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 }

    '
- title: id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 }
  contents:
  - 'id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 }

    '
- title: id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 }
  contents:
  - 'id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 }

    '
- title: id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 }
  contents:
  - 'id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 }

    '
- title: id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 }
  contents:
  - 'id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 }

    '
- title: id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }
  contents:
  - 'id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }

    '
- title: -- inhibit any policy OID and syntax
  contents:
  - '-- inhibit any policy OID and syntax

    '
- title: id-ce-inhibitAnyPolicy OBJECT IDENTIFIER ::=  { id-ce 54 }
  contents:
  - 'id-ce-inhibitAnyPolicy OBJECT IDENTIFIER ::=  { id-ce 54 }

    '
- title: InhibitAnyPolicy ::= SkipCerts
  contents:
  - 'InhibitAnyPolicy ::= SkipCerts

    '
- title: -- freshest (delta)CRL extension OID and syntax
  contents:
  - '-- freshest (delta)CRL extension OID and syntax

    '
- title: id-ce-freshestCRL OBJECT IDENTIFIER ::=  { id-ce 46 }
  contents:
  - 'id-ce-freshestCRL OBJECT IDENTIFIER ::=  { id-ce 46 }

    '
- title: FreshestCRL ::= CRLDistributionPoints
  contents:
  - 'FreshestCRL ::= CRLDistributionPoints

    '
- title: -- authority info access
  contents:
  - '-- authority info access

    '
- title: id-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe 1 }
  contents:
  - 'id-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe 1 }

    '
- title: AuthorityInfoAccessSyntax  ::=
  contents:
  - "AuthorityInfoAccessSyntax  ::=\n        SEQUENCE SIZE (1..MAX) OF AccessDescription\n"
- title: AccessDescription  ::=  SEQUENCE {
  contents:
  - "AccessDescription  ::=  SEQUENCE {\n        accessMethod          OBJECT IDENTIFIER,\n\
    \        accessLocation        GeneralName  }\n"
- title: -- subject info access
  contents:
  - '-- subject info access

    '
- title: id-pe-subjectInfoAccess OBJECT IDENTIFIER ::= { id-pe 11 }
  contents:
  - 'id-pe-subjectInfoAccess OBJECT IDENTIFIER ::= { id-pe 11 }

    '
- title: SubjectInfoAccessSyntax  ::=
  contents:
  - "SubjectInfoAccessSyntax  ::=\n        SEQUENCE SIZE (1..MAX) OF AccessDescription\n"
- title: -- CRL number extension OID and syntax
  contents:
  - '-- CRL number extension OID and syntax

    '
- title: id-ce-cRLNumber OBJECT IDENTIFIER ::= { id-ce 20 }
  contents:
  - 'id-ce-cRLNumber OBJECT IDENTIFIER ::= { id-ce 20 }

    '
- title: CRLNumber ::= INTEGER (0..MAX)
  contents:
  - 'CRLNumber ::= INTEGER (0..MAX)

    '
- title: -- issuing distribution point extension OID and syntax
  contents:
  - '-- issuing distribution point extension OID and syntax

    '
- title: id-ce-issuingDistributionPoint OBJECT IDENTIFIER ::= { id-ce 28 }
  contents:
  - 'id-ce-issuingDistributionPoint OBJECT IDENTIFIER ::= { id-ce 28 }

    '
- title: IssuingDistributionPoint ::= SEQUENCE {
  contents:
  - "IssuingDistributionPoint ::= SEQUENCE {\n     distributionPoint          [0]\
    \ DistributionPointName OPTIONAL,\n     onlyContainsUserCerts      [1] BOOLEAN\
    \ DEFAULT FALSE,\n     onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE,\n\
    \     onlySomeReasons            [3] ReasonFlags OPTIONAL,\n     indirectCRL \
    \               [4] BOOLEAN DEFAULT FALSE,\n     onlyContainsAttributeCerts [5]\
    \ BOOLEAN DEFAULT FALSE }\n"
- title: id-ce-deltaCRLIndicator OBJECT IDENTIFIER ::= { id-ce 27 }
  contents:
  - 'id-ce-deltaCRLIndicator OBJECT IDENTIFIER ::= { id-ce 27 }

    '
- title: BaseCRLNumber ::= CRLNumber
  contents:
  - 'BaseCRLNumber ::= CRLNumber

    '
- title: -- CRL reasons extension OID and syntax
  contents:
  - '-- CRL reasons extension OID and syntax

    '
- title: id-ce-cRLReasons OBJECT IDENTIFIER ::= { id-ce 21 }
  contents:
  - 'id-ce-cRLReasons OBJECT IDENTIFIER ::= { id-ce 21 }

    '
- title: CRLReason ::= ENUMERATED {
  contents:
  - "CRLReason ::= ENUMERATED {\n     unspecified             (0),\n     keyCompromise\
    \           (1),\n     cACompromise            (2),\n     affiliationChanged \
    \     (3),\n     superseded              (4),\n     cessationOfOperation    (5),\n\
    \     certificateHold         (6),\n     removeFromCRL           (8),\n     privilegeWithdrawn\
    \      (9),\n     aACompromise           (10) }\n"
- title: -- certificate issuer CRL entry extension OID and syntax
  contents:
  - '-- certificate issuer CRL entry extension OID and syntax

    '
- title: id-ce-certificateIssuer OBJECT IDENTIFIER ::= { id-ce 29 }
  contents:
  - 'id-ce-certificateIssuer OBJECT IDENTIFIER ::= { id-ce 29 }

    '
- title: CertificateIssuer ::= GeneralNames
  contents:
  - 'CertificateIssuer ::= GeneralNames

    '
- title: -- hold instruction extension OID and syntax
  contents:
  - '-- hold instruction extension OID and syntax

    '
- title: id-ce-holdInstructionCode OBJECT IDENTIFIER ::= { id-ce 23 }
  contents:
  - 'id-ce-holdInstructionCode OBJECT IDENTIFIER ::= { id-ce 23 }

    '
- title: HoldInstructionCode ::= OBJECT IDENTIFIER
  contents:
  - 'HoldInstructionCode ::= OBJECT IDENTIFIER

    '
- title: -- ANSI x9 holdinstructions
  contents:
  - '-- ANSI x9 holdinstructions

    '
- title: -- ANSI x9 arc holdinstruction arc
  contents:
  - '-- ANSI x9 arc holdinstruction arc

    '
- title: holdInstruction OBJECT IDENTIFIER ::=
  contents:
  - "holdInstruction OBJECT IDENTIFIER ::=\n          {joint-iso-itu-t(2) member-body(2)\
    \ us(840) x9cm(10040) 2}\n"
- title: -- ANSI X9 holdinstructions referenced by this standard
  contents:
  - '-- ANSI X9 holdinstructions referenced by this standard

    '
- title: id-holdinstruction-none OBJECT IDENTIFIER  ::=
  contents:
  - "id-holdinstruction-none OBJECT IDENTIFIER  ::=\n                {holdInstruction\
    \ 1} -- deprecated\n"
- title: id-holdinstruction-callissuer OBJECT IDENTIFIER ::=
  contents:
  - "id-holdinstruction-callissuer OBJECT IDENTIFIER ::=\n                {holdInstruction\
    \ 2}\n"
- title: id-holdinstruction-reject OBJECT IDENTIFIER ::=
  contents:
  - "id-holdinstruction-reject OBJECT IDENTIFIER ::=\n                {holdInstruction\
    \ 3}\n"
- title: -- invalidity date CRL entry extension OID and syntax
  contents:
  - '-- invalidity date CRL entry extension OID and syntax

    '
- title: id-ce-invalidityDate OBJECT IDENTIFIER ::= { id-ce 24 }
  contents:
  - 'id-ce-invalidityDate OBJECT IDENTIFIER ::= { id-ce 24 }

    '
- title: InvalidityDate ::=  GeneralizedTime
  contents:
  - 'InvalidityDate ::=  GeneralizedTime

    '
- title: END
  contents:
  - 'END

    '
- title: Appendix B.  ASN.1 Notes
  contents:
  - "Appendix B.  ASN.1 Notes\n   CAs MUST force the serialNumber to be a non-negative\
    \ integer, that\n   is, the sign bit in the DER encoding of the INTEGER value\
    \ MUST be\n   zero - this can be done by adding a leading (leftmost) `00'H octet\
    \ if\n   necessary.  This removes a potential ambiguity in mapping between a\n\
    \   string of octets and an integer value.\n   As noted in section 4.1.2.2, serial\
    \ numbers can be expected to\n   contain long integers.  Certificate users MUST\
    \ be able to handle\n   serialNumber values up to 20 octets in length.  Conformant\
    \ CAs MUST\n   NOT use serialNumber values longer than 20 octets.\n   As noted\
    \ in section 5.2.3, CRL numbers can be expected to contain\n   long integers.\
    \  CRL validators MUST be able to handle cRLNumber\n   values up to 20 octets\
    \ in length.  Conformant CRL issuers MUST NOT\n   use cRLNumber values longer\
    \ than 20 octets.\n   The construct \"SEQUENCE SIZE (1..MAX) OF\" appears in several\
    \ ASN.1\n   constructs.  A valid ASN.1 sequence will have zero or more entries.\n\
    \   The SIZE (1..MAX) construct constrains the sequence to have at least\n   one\
    \ entry.  MAX indicates the upper bound is unspecified.\n   Implementations are\
    \ free to choose an upper bound that suits their\n   environment.\n   The construct\
    \ \"positiveInt ::= INTEGER (0..MAX)\" defines positiveInt\n   as a subtype of\
    \ INTEGER containing integers greater than or equal to\n   zero.  The upper bound\
    \ is unspecified.  Implementations are free to\n   select an upper bound that\
    \ suits their environment.\n   The character string type PrintableString supports\
    \ a very basic Latin\n   character set: the lower case letters 'a' through 'z',\
    \ upper case\n   letters 'A' through 'Z', the digits '0' through '9', eleven special\n\
    \   characters ' = ( ) + , - . / : ? and space.\n   Implementers should note that\
    \ the at sign ('@') and underscore ('_')\n   characters are not supported by the\
    \ ASN.1 type PrintableString.\n   These characters often appear in internet addresses.\
    \  Such addresses\n   MUST be encoded using an ASN.1 type that supports them.\
    \  They are\n   usually encoded as IA5String in either the emailAddress attribute\n\
    \   within a distinguished name or the rfc822Name field of GeneralName.\n   Conforming\
    \ implementations MUST NOT encode strings which include\n   either the at sign\
    \ or underscore character as PrintableString.\n   The character string type TeletexString\
    \ is a superset of\n   PrintableString.  TeletexString supports a fairly standard\
    \ (ASCII-\n   like) Latin character set, Latin characters with non-spacing accents\n\
    \   and Japanese characters.\n   Named bit lists are BIT STRINGs where the values\
    \ have been assigned\n   names.  This specification makes use of named bit lists\
    \ in the\n   definitions for the key usage, CRL distribution points and freshest\n\
    \   CRL certificate extensions, as well as the freshest CRL and issuing\n   distribution\
    \ point CRL extensions.  When DER encoding a named bit\n   list, trailing zeroes\
    \ MUST be omitted.  That is, the encoded value\n   ends with the last named bit\
    \ that is set to one.\n   The character string type UniversalString supports any\
    \ of the\n   characters allowed by ISO 10646-1 [ISO 10646].  ISO 10646-1 is the\n\
    \   Universal multiple-octet coded Character Set (UCS).  ISO 10646-1\n   specifies\
    \ the architecture and the \"basic multilingual plane\" -- a\n   large standard\
    \ character set which includes all major world character\n   standards.\n   The\
    \ character string type UTF8String was introduced in the 1997\n   version of ASN.1,\
    \ and UTF8String was added to the list of choices for\n   DirectoryString in the\
    \ 2001 version of X.520 [X.520].  UTF8String is\n   a universal type and has been\
    \ assigned tag number 12.  The content of\n   UTF8String was defined by RFC 2044\
    \ [RFC 2044] and updated in RFC 2279\n   [RFC 2279].\n   In anticipation of these\
    \ changes, and in conformance with IETF Best\n   Practices codified in RFC 2277\
    \ [RFC 2277], IETF Policy on Character\n   Sets and Languages, this document includes\
    \ UTF8String as a choice in\n   DirectoryString and the CPS qualifier extensions.\n\
    \   Implementers should note that the DER encoding of the SET OF values\n   requires\
    \ ordering of the encodings of the values.  In particular,\n   this issue arises\
    \ with respect to distinguished names.\n   Implementers should note that the DER\
    \ encoding of SET or SEQUENCE\n   components whose value is the DEFAULT omit the\
    \ component from the\n   encoded certificate or CRL.  For example, a BasicConstraints\n\
    \   extension whose cA value is FALSE would omit the cA boolean from the\n   encoded\
    \ certificate.\n   Object Identifiers (OIDs) are used throughout this specification\
    \ to\n   identify certificate policies, public key and signature algorithms,\n\
    \   certificate extensions, etc.  There is no maximum size for OIDs.\n   This\
    \ specification mandates support for OIDs which have arc elements\n   with values\
    \ that are less than 2^28, that is, they MUST be between 0\n   and 268,435,455,\
    \ inclusive.  This allows each arc element to be\n   represented within a single\
    \ 32 bit word.  Implementations MUST also\n   support OIDs where the length of\
    \ the dotted decimal (see [RFC 2252],\n   section 4.1) string representation can\
    \ be up to 100 bytes\n   (inclusive).  Implementations MUST be able to handle\
    \ OIDs with up to\n   20 elements (inclusive).  CAs SHOULD NOT issue certificates\
    \ which\n   contain OIDs that exceed these requirements.  Likewise, CRL issuers\n\
    \   SHOULD NOT issue CRLs which contain OIDs that exceed these\n   requirements.\n\
    \   Implementors are warned that the X.500 standards community has\n   developed\
    \ a series of extensibility rules.  These rules determine\n   when an ASN.1 definition\
    \ can be changed without assigning a new\n   object identifier (OID).  For example,\
    \ at least two extension\n   definitions included in RFC 2459 [RFC 2459], the\
    \ predecessor to this\n   profile document, have different ASN.1 definitions in\
    \ this\n   specification, but the same OID is used.  If unknown elements appear\n\
    \   within an extension, and the extension is not marked critical, those\n   unknown\
    \ elements ought to be ignored, as follows:\n      (a)  ignore all unknown bit\
    \ name assignments within a bit string;\n      (b)  ignore all unknown named numbers\
    \ in an ENUMERATED type or\n      INTEGER type that is being used in the enumerated\
    \ style, provided\n      the number occurs as an optional element of a SET or\
    \ SEQUENCE; and\n      (c)  ignore all unknown elements in SETs, at the end of\
    \ SEQUENCEs,\n      or in CHOICEs where the CHOICE is itself an optional element\
    \ of a\n      SET or SEQUENCE.\n   If an extension containing unexpected values\
    \ is marked critical, the\n   implementation MUST reject the certificate or CRL\
    \ containing the\n   unrecognized extension.\n"
- title: Appendix C.  Examples
  contents:
  - "Appendix C.  Examples\n   This section contains four examples: three certificates\
    \ and a CRL.\n   The first two certificates and the CRL comprise a minimal\n \
    \  certification path.\n   Section C.1 contains an annotated hex dump of a \"\
    self-signed\"\n   certificate issued by a CA whose distinguished name is\n   cn=us,o=gov,ou=nist.\
    \  The certificate contains a DSA public key with\n   parameters, and is signed\
    \ by the corresponding DSA private key.\n   Section C.2 contains an annotated\
    \ hex dump of an end entity\n   certificate.  The end entity certificate contains\
    \ a DSA public key,\n   and is signed by the private key corresponding to the\
    \ \"self-signed\"\n   certificate in section C.1.\n   Section C.3 contains a dump\
    \ of an end entity certificate which\n   contains an RSA public key and is signed\
    \ with RSA and MD5.  This\n   certificate is not part of the minimal certification\
    \ path.\n   Section C.4 contains an annotated hex dump of a CRL.  The CRL is\n\
    \   issued by the CA whose distinguished name is cn=us,o=gov,ou=nist and\n   the\
    \ list of revoked certificates includes the end entity certificate\n   presented\
    \ in C.2.\n   The certificates were processed using Peter Gutman's dumpasn1 utility\n\
    \   to generate the output.  The source for the dumpasn1 utility is\n   available\
    \ at <http://www.cs.auckland.ac.nz/~pgut001/dumpasn1.c>.  The\n   binaries for\
    \ the certificates and CRLs are available at\n   <http://csrc.nist.gov/pki/pkixtools>.\n"
- title: C.1  Certificate
  contents:
  - "C.1  Certificate\n   This section contains an annotated hex dump of a 699 byte\
    \ version 3\n   certificate.  The certificate contains the following information:\n\
    \   (a)  the serial number is 23 (17 hex);\n   (b)  the certificate is signed\
    \ with DSA and the SHA-1 hash algorithm;\n   (c)  the issuer's distinguished name\
    \ is OU=NIST; O=gov; C=US\n   (d)  and the subject's distinguished name is OU=NIST;\
    \ O=gov; C=US\n   (e)  the certificate was issued on June 30, 1997 and will expire\
    \ on\n   December 31, 1997;\n   (f)  the certificate contains a 1024 bit DSA public\
    \ key with\n   parameters;\n   (g)  the certificate contains a subject key identifier\
    \ extension\n   generated using method (1) of section 4.2.1.2; and\n   (h)  the\
    \ certificate is a CA certificate (as indicated through the\n   basic constraints\
    \ extension.)\n  0 30  699: SEQUENCE {\n  4 30  635:   SEQUENCE {\n  8 A0    3:\
    \     [0] {\n 10 02    1:       INTEGER 2\n          :       }\n 13 02    1: \
    \    INTEGER 17\n 16 30    9:     SEQUENCE {\n 18 06    7:       OBJECT IDENTIFIER\
    \ dsaWithSha1 (1 2 840 10040 4 3)\n          :       }\n 27 30   42:     SEQUENCE\
    \ {\n 29 31   11:       SET {\n 31 30    9:         SEQUENCE {\n 33 06    3: \
    \          OBJECT IDENTIFIER countryName (2 5 4 6)\n 38 13    2:           PrintableString\
    \ 'US'\n          :           }\n          :         }\n 42 31   12:       SET\
    \ {\n 44 30   10:         SEQUENCE {\n 46 06    3:           OBJECT IDENTIFIER\
    \ organizationName (2 5 4 10)\n 51 13    3:           PrintableString 'gov'\n\
    \          :           }\n          :         }\n 56 31   13:       SET {\n 58\
    \ 30   11:         SEQUENCE {\n 60 06    3:           OBJECT IDENTIFIER\n    \
    \      :             organizationalUnitName (2 5 4 11)\n 65 13    4:         \
    \  PrintableString 'NIST'\n           :           }\n           :         }\n\
    \           :       }\n 71 30   30:     SEQUENCE {\n 73 17   13:       UTCTime\
    \ '970630000000Z'\n 88 17   13:       UTCTime '971231000000Z'\n           :  \
    \     }\n"
- title: '103 30   42:     SEQUENCE {'
  contents:
  - '103 30   42:     SEQUENCE {

    '
- title: '105 31   11:       SET {'
  contents:
  - '105 31   11:       SET {

    '
- title: '107 30    9:         SEQUENCE {'
  contents:
  - '107 30    9:         SEQUENCE {

    '
- title: '109 06    3:           OBJECT IDENTIFIER countryName (2 5 4 6)'
  contents:
  - '109 06    3:           OBJECT IDENTIFIER countryName (2 5 4 6)

    '
- title: '114 13    2:           PrintableString ''US'''
  contents:
  - "114 13    2:           PrintableString 'US'\n           :           }\n     \
    \      :         }\n"
- title: '118 31   12:       SET {'
  contents:
  - '118 31   12:       SET {

    '
- title: '120 30   10:         SEQUENCE {'
  contents:
  - '120 30   10:         SEQUENCE {

    '
- title: '122 06    3:           OBJECT IDENTIFIER organizationName (2 5 4 10)'
  contents:
  - '122 06    3:           OBJECT IDENTIFIER organizationName (2 5 4 10)

    '
- title: '127 13    3:           PrintableString ''gov'''
  contents:
  - "127 13    3:           PrintableString 'gov'\n           :           }\n    \
    \       :         }\n"
- title: '132 31   13:       SET {'
  contents:
  - '132 31   13:       SET {

    '
- title: '134 30   11:         SEQUENCE {'
  contents:
  - '134 30   11:         SEQUENCE {

    '
- title: '136 06    3:           OBJECT IDENTIFIER'
  contents:
  - "136 06    3:           OBJECT IDENTIFIER\n           :             organizationalUnitName\
    \ (2 5 4 11)\n"
- title: '141 13    4:           PrintableString ''NIST'''
  contents:
  - "141 13    4:           PrintableString 'NIST'\n           :           }\n   \
    \        :         }\n           :       }\n"
- title: '147 30  440:     SEQUENCE {'
  contents:
  - '147 30  440:     SEQUENCE {

    '
- title: '151 30  300:       SEQUENCE {'
  contents:
  - '151 30  300:       SEQUENCE {

    '
- title: '155 06    7:         OBJECT IDENTIFIER dsa (1 2 840 10040 4 1)'
  contents:
  - '155 06    7:         OBJECT IDENTIFIER dsa (1 2 840 10040 4 1)

    '
- title: '164 30  287:         SEQUENCE {'
  contents:
  - '164 30  287:         SEQUENCE {

    '
- title: '168 02  129:           INTEGER'
  contents:
  - "168 02  129:           INTEGER\n           :             00 B6 8B 0F 94 2B 9A\
    \ CE A5 25 C6 F2 ED FC\n           :             FB 95 32 AC 01 12 33 B9 E0 1C\
    \ AD 90 9B BC\n           :             48 54 9E F3 94 77 3C 2C 71 35 55 E6 FE\
    \ 4F\n           :             22 CB D5 D8 3E 89 93 33 4D FC BD 4F 41 64\n   \
    \        :             3E A2 98 70 EC 31 B4 50 DE EB F1 98 28 0A\n           :\
    \             C9 3E 44 B3 FD 22 97 96 83 D0 18 A3 E3 BD\n           :        \
    \     35 5B FF EE A3 21 72 6A 7B 96 DA B9 3F 1E\n           :             5A 90\
    \ AF 24 D6 20 F0 0D 21 A7 D4 02 B9 1A\n           :             FC AC 21 FB 9E\
    \ 94 9E 4B 42 45 9E 6A B2 48\n           :             63 FE 43\n"
- title: '300 02   21:           INTEGER'
  contents:
  - "300 02   21:           INTEGER\n           :             00 B2 0D B0 B1 01 DF\
    \ 0C 66 24 FC 13 92 BA\n           :             55 F7 7D 57 74 81 E5\n"
- title: '323 02  129:           INTEGER'
  contents:
  - "323 02  129:           INTEGER\n           :             00 9A BF 46 B1 F5 3F\
    \ 44 3D C9 A5 65 FB 91\n           :             C0 8E 47 F1 0A C3 01 47 C2 44\
    \ 42 36 A9 92\n           :             81 DE 57 C5 E0 68 86 58 00 7B 1F F9 9B\
    \ 77\n           :             A1 C5 10 A5 80 91 78 51 51 3C F6 FC FC CC\n   \
    \        :             46 C6 81 78 92 84 3D F4 93 3D 0C 38 7E 1A\n           :\
    \             5B 99 4E AB 14 64 F6 0C 21 22 4E 28 08 9C\n           :        \
    \     92 B9 66 9F 40 E8 95 F6 D5 31 2A EF 39 A2\n           :             62 C7\
    \ B2 6D 9E 58 C4 3A A8 11 81 84 6D AF\n           :             F8 B4 19 B4 C2\
    \ 11 AE D0 22 3B AA 20 7F EE\n           :             1E 57 18\n           :\
    \           }\n           :         }\n"
- title: '455 03  133:       BIT STRING 0 unused bits, encapsulates {'
  contents:
  - '455 03  133:       BIT STRING 0 unused bits, encapsulates {

    '
- title: '459 02  129:           INTEGER'
  contents:
  - "459 02  129:           INTEGER\n           :             00 B5 9E 1F 49 04 47\
    \ D1 DB F5 3A DD CA 04\n           :             75 E8 DD 75 F6 9B 8A B1 97 D6\
    \ 59 69 82 D3\n           :             03 4D FD 3B 36 5F 4A F2 D1 4E C1 07 F5\
    \ D1\n           :             2A D3 78 77 63 56 EA 96 61 4D 42 0B 7A 1D\n   \
    \        :             FB AB 91 A4 CE DE EF 77 C8 E5 EF 20 AE A6\n           :\
    \             28 48 AF BE 69 C3 6A A5 30 F2 C2 B9 D9 82\n           :        \
    \     2B 7D D9 C4 84 1F DE 0D E8 54 D7 1B 99 2E\n           :             B3 D0\
    \ 88 F6 D6 63 9B A7 E2 0E 82 D4 3B 8A\n           :             68 1B 06 56 31\
    \ 59 0B 49 EB 99 A5 D5 81 41\n           :             7B C9 55\n           :\
    \           }\n           :       }\n"
- title: '591 A3   50:     [3] {'
  contents:
  - '591 A3   50:     [3] {

    '
- title: '593 30   48:       SEQUENCE {'
  contents:
  - '593 30   48:       SEQUENCE {

    '
- title: '595 30   29:         SEQUENCE {'
  contents:
  - '595 30   29:         SEQUENCE {

    '
- title: '597 06    3:           OBJECT IDENTIFIER'
  contents:
  - "597 06    3:           OBJECT IDENTIFIER\n           :             subjectKeyIdentifier\
    \ (2 5 29 14)\n"
- title: '602 04   22:           OCTET STRING, encapsulates {'
  contents:
  - '602 04   22:           OCTET STRING, encapsulates {

    '
- title: '604 04   20:               OCTET STRING'
  contents:
  - "604 04   20:               OCTET STRING\n           :                 86 CA A5\
    \ 22 81 62 EF AD 0A 89 BC AD 72 41\n           :                 2C 29 49 F4 86\
    \ 56\n           :               }\n           :           }\n"
- title: '626 30   15:         SEQUENCE {'
  contents:
  - '626 30   15:         SEQUENCE {

    '
- title: '628 06    3:           OBJECT IDENTIFIER basicConstraints (2 5 29 19)'
  contents:
  - '628 06    3:           OBJECT IDENTIFIER basicConstraints (2 5 29 19)

    '
- title: '633 01    1:           BOOLEAN TRUE'
  contents:
  - '633 01    1:           BOOLEAN TRUE

    '
- title: '636 04    5:           OCTET STRING, encapsulates {'
  contents:
  - '636 04    5:           OCTET STRING, encapsulates {

    '
- title: '638 30    3:               SEQUENCE {'
  contents:
  - '638 30    3:               SEQUENCE {

    '
- title: '640 01    1:                 BOOLEAN TRUE'
  contents:
  - "640 01    1:                 BOOLEAN TRUE\n           :                 }\n \
    \          :               }\n           :           }\n           :         }\n\
    \           :       }\n           :     }\n"
- title: '643 30    9:   SEQUENCE {'
  contents:
  - '643 30    9:   SEQUENCE {

    '
- title: '645 06    7:     OBJECT IDENTIFIER dsaWithSha1 (1 2 840 10040 4 3)'
  contents:
  - "645 06    7:     OBJECT IDENTIFIER dsaWithSha1 (1 2 840 10040 4 3)\n        \
    \   :     }\n"
- title: '654 03   47:   BIT STRING 0 unused bits, encapsulates {'
  contents:
  - '654 03   47:   BIT STRING 0 unused bits, encapsulates {

    '
- title: '657 30   44:       SEQUENCE {'
  contents:
  - '657 30   44:       SEQUENCE {

    '
- title: '659 02   20:         INTEGER'
  contents:
  - "659 02   20:         INTEGER\n           :           43 1B CF 29 25 45 C0 4E\
    \ 52 E7 7D D6 FC B1\n           :           66 4C 83 CF 2D 77\n"
- title: '681 02   20:         INTEGER'
  contents:
  - "681 02   20:         INTEGER\n           :           0B 5B 9A 24 11 98 E8 F3\
    \ 86 90 04 F6 08 A9\n           :           E1 8D A5 CC 3A D4\n           :  \
    \       }\n           :       }\n           :   }\n"
- title: C.2  Certificate
  contents:
  - "C.2  Certificate\n   This section contains an annotated hex dump of a 730 byte\
    \ version 3\n   certificate.  The certificate contains the following information:\n\
    \   (a)  the serial number is 18 (12 hex);\n   (b)  the certificate is signed\
    \ with DSA and the SHA-1 hash algorithm;\n   (c)  the issuer's distinguished name\
    \ is OU=nist; O=gov; C=US\n   (d)  and the subject's distinguished name is CN=Tim\
    \ Polk; OU=nist;\n   O=gov; C=US\n   (e)  the certificate was valid from July\
    \ 30, 1997 through December 1,\n   1997;\n   (f)  the certificate contains a 1024\
    \ bit DSA public key;\n   (g)  the certificate is an end entity certificate, as\
    \ the basic\n   constraints extension is not present;\n   (h)  the certificate\
    \ contains an authority key identifier extension\n   matching the subject key\
    \ identifier of the certificate in Appendix\n   C.1; and\n   (i)  the certificate\
    \ includes one alternative name - an RFC 822\n   address of \"wpolk@nist.gov\"\
    .\n     0 30  730: SEQUENCE {\n     4 30  665:   SEQUENCE {\n     8 A0    3: \
    \    [0] {\n    10 02    1:       INTEGER 2\n              :       }\n    13 02\
    \    1:     INTEGER 18\n    16 30    9:     SEQUENCE {\n    18 06    7:      \
    \ OBJECT IDENTIFIER dsaWithSha1 (1 2 840 10040 4 3)\n              :       }\n\
    \    27 30   42:     SEQUENCE {\n    29 31   11:       SET {\n    31 30    9:\
    \         SEQUENCE {\n    33 06    3:           OBJECT IDENTIFIER countryName\
    \ (2 5 4 6)\n    38 13    2:           PrintableString 'US'\n              : \
    \          }\n              :         }\n    42 31   12:       SET {\n    44 30\
    \   10:         SEQUENCE {\n    46 06    3:           OBJECT IDENTIFIER organizationName\
    \ (2 5 4 10)\n    51 13    3:           PrintableString 'gov'\n              :\
    \           }\n              :         }\n    56 31   13:       SET {\n    58\
    \ 30   11:         SEQUENCE {\n    60 06    3:           OBJECT IDENTIFIER\n \
    \             :             organizationalUnitName (2 5 4 11)\n    65 13    4:\
    \           PrintableString 'NIST'\n              :           }\n            \
    \  :         }\n              :       }\n    71 30   30:     SEQUENCE {\n    73\
    \ 17   13:       UTCTime '970730000000Z'\n    88 17   13:       UTCTime '971201000000Z'\n\
    \              :       }\n   103 30   61:     SEQUENCE {\n   105 31   11:    \
    \   SET {\n   107 30    9:         SEQUENCE {\n   109 06    3:           OBJECT\
    \ IDENTIFIER countryName (2 5 4 6)\n   114 13    2:           PrintableString\
    \ 'US'\n              :           }\n              :         }\n   118 31   12:\
    \       SET {\n   120 30   10:         SEQUENCE {\n   122 06    3:           OBJECT\
    \ IDENTIFIER organizationName (2 5 4 10)\n   127 13    3:           PrintableString\
    \ 'gov'\n              :           }\n              :         }\n   132 31   13:\
    \       SET {\n   134 30   11:         SEQUENCE {\n   136 06    3:           OBJECT\
    \ IDENTIFIER\n              :             organizationalUnitName (2 5 4 11)\n\
    \   141 13    4:           PrintableString 'NIST'\n              :           }\n\
    \              :         }\n   147 31   17:       SET {\n   149 30   15:     \
    \    SEQUENCE {\n   151 06    3:           OBJECT IDENTIFIER commonName (2 5 4\
    \ 3)\n   156 13    8:           PrintableString 'Tim Polk'\n              :  \
    \         }\n              :         }\n              :       }\n   166 30  439:\
    \     SEQUENCE {\n   170 30  300:       SEQUENCE {\n   174 06    7:         OBJECT\
    \ IDENTIFIER dsa (1 2 840 10040 4 1)\n   183 30  287:         SEQUENCE {\n   187\
    \ 02  129:           INTEGER\n              :             00 B6 8B 0F 94 2B 9A\
    \ CE A5 25 C6 F2 ED FC\n              :             FB 95 32 AC 01 12 33 B9 E0\
    \ 1C AD 90 9B BC\n              :             48 54 9E F3 94 77 3C 2C 71 35 55\
    \ E6 FE 4F\n              :             22 CB D5 D8 3E 89 93 33 4D FC BD 4F 41\
    \ 64\n              :             3E A2 98 70 EC 31 B4 50 DE EB F1 98 28 0A\n\
    \              :             C9 3E 44 B3 FD 22 97 96 83 D0 18 A3 E3 BD\n     \
    \         :             35 5B FF EE A3 21 72 6A 7B 96 DA B9 3F 1E\n          \
    \    :             5A 90 AF 24 D6 20 F0 0D 21 A7 D4 02 B9 1A\n              :\
    \             FC AC 21 FB 9E 94 9E 4B 42 45 9E 6A B2 48\n              :     \
    \        63 FE 43\n   319 02   21:           INTEGER\n              :        \
    \     00 B2 0D B0 B1 01 DF 0C 66 24 FC 13 92 BA\n              :             55\
    \ F7 7D 57 74 81 E5\n   342 02  129:           INTEGER\n              :      \
    \       00 9A BF 46 B1 F5 3F 44 3D C9 A5 65 FB 91\n              :           \
    \  C0 8E 47 F1 0A C3 01 47 C2 44 42 36 A9 92\n              :             81 DE\
    \ 57 C5 E0 68 86 58 00 7B 1F F9 9B 77\n              :             A1 C5 10 A5\
    \ 80 91 78 51 51 3C F6 FC FC CC\n              :             46 C6 81 78 92 84\
    \ 3D F4 93 3D 0C 38 7E 1A\n              :             5B 99 4E AB 14 64 F6 0C\
    \ 21 22 4E 28 08 9C\n              :             92 B9 66 9F 40 E8 95 F6 D5 31\
    \ 2A EF 39 A2\n              :             62 C7 B2 6D 9E 58 C4 3A A8 11 81 84\
    \ 6D AF\n              :             F8 B4 19 B4 C2 11 AE D0 22 3B AA 20 7F EE\n\
    \              :             1E 57 18\n              :           }\n         \
    \     :         }\n   474 03  132:       BIT STRING 0 unused bits, encapsulates\
    \ {\n   478 02  128:           INTEGER\n              :             30 B6 75 F7\
    \ 7C 20 31 AE 38 BB 7E 0D 2B AB\n              :             A0 9C 4B DF 20 D5\
    \ 24 13 3C CD 98 E5 5F 6C\n              :             B7 C1 BA 4A BA A9 95 80\
    \ 53 F0 0D 72 DC 33\n              :             37 F4 01 0B F5 04 1F 9D 2E 1F\
    \ 62 D8 84 3A\n              :             9B 25 09 5A 2D C8 46 8E 2B D4 F5 0D\
    \ 3B C7\n              :             2D C6 6C B9 98 C1 25 3A 44 4E 8E CA 95 61\n\
    \              :             35 7C CE 15 31 5C 23 13 1E A2 05 D1 7A 24\n     \
    \         :             1C CB D3 72 09 90 FF 9B 9D 28 C0 A1 0A EC\n          \
    \    :             46 9F 0D B8 D0 DC D0 18 A6 2B 5E F9 8F B5\n              :\
    \             95 BE\n              :           }\n              :       }\n  \
    \ 609 A3   62:     [3] {\n   611 30   60:       SEQUENCE {\n   613 30   25:  \
    \       SEQUENCE {\n   615 06    3:           OBJECT IDENTIFIER subjectAltName\
    \ (2 5 29 17)\n   620 04   18:           OCTET STRING, encapsulates {\n   622\
    \ 30   16:               SEQUENCE {\n   624 81   14:                 [1] 'wpolk@nist.gov'\n\
    \              :                 }\n              :               }\n        \
    \      :           }\n   640 30   31:         SEQUENCE {\n   642 06    3:    \
    \       OBJECT IDENTIFIER\n              :             authorityKeyIdentifier\
    \ (2 5 29 35)\n   647 04   24:           OCTET STRING, encapsulates {\n   649\
    \ 30   22:               SEQUENCE {\n   651 80   20:                 [0]\n   \
    \           :                   86 CA A5 22 81 62 EF AD 0A 89 BC AD 72\n     \
    \         :                   41 2C 29 49 F4 86 56\n              :          \
    \       }\n              :               }\n              :           }\n    \
    \          :         }\n              :       }\n              :     }\n   673\
    \ 30    9:   SEQUENCE {\n   675 06    7:     OBJECT IDENTIFIER dsaWithSha1 (1\
    \ 2 840 10040 4 3)\n              :     }\n   684 03   48:   BIT STRING 0 unused\
    \ bits, encapsulates {\n   687 30   45:       SEQUENCE {\n   689 02   20:    \
    \     INTEGER\n              :           36 97 CB E3 B4 2C E1 BB 61 A9 D3 CC 24\
    \ CC\n              :           22 92 9F F4 F5 87\n   711 02   21:         INTEGER\n\
    \              :           00 AB C9 79 AF D2 16 1C A9 E3 68 A9 14 10\n       \
    \       :           B4 A0 2E FF 22 5A 73\n              :         }\n        \
    \      :       }\n              :   }\n"
- title: C.3  End Entity Certificate Using RSA
  contents:
  - "C.3  End Entity Certificate Using RSA\n   This section contains an annotated\
    \ hex dump of a 654 byte version 3\n   certificate.  The certificate contains\
    \ the following information:\n   (a)  the serial number is 256;\n   (b)  the certificate\
    \ is signed with RSA and the SHA-1 hash algorithm;\n   (c)  the issuer's distinguished\
    \ name is OU=NIST; O=gov; C=US\n   (d)  and the subject's distinguished name is\
    \ CN=Tim Polk; OU=NIST;\n   O=gov; C=US\n   (e)  the certificate was issued on\
    \ May 21, 1996 at 09:58:26 and\n   expired on May 21, 1997 at 09:58:26;\n   (f)\
    \  the certificate contains a 1024 bit RSA public key;\n   (g)  the certificate\
    \ is an end entity certificate (not a CA\n   certificate);\n   (h)  the certificate\
    \ includes an alternative subject name of\n   \"<http://www.itl.nist.gov/div893/staff/polk/index.html>\"\
    \ and an\n   alternative issuer name of \"<http://www.nist.gov/>\" - both are\
    \ URLs;\n   (i)  the certificate include an authority key identifier extension\n\
    \   and a certificate policies extension specifying the policy OID\n   2.16.840.1.101.3.2.1.48.9;\
    \ and\n   (j)  the certificate includes a critical key usage extension\n   specifying\
    \ that the public key is intended for verification of\n   digital signatures.\n\
    \  0 30  654: SEQUENCE {\n  4 30  503:   SEQUENCE {\n  8 A0    3:     [0] {\n\
    \ 10 02    1:       INTEGER 2\n           :       }\n 13 02    2:     INTEGER\
    \ 256\n 17 30   13:     SEQUENCE {\n 19 06    9:       OBJECT IDENTIFIER\n   \
    \        :         sha1withRSAEncryption (1 2 840 113549 1 1 5)\n 30 05    0:\
    \       NULL\n           :       }\n 32 30   42:     SEQUENCE {\n 34 31   11:\
    \       SET {\n 36 30    9:         SEQUENCE {\n 38 06    3:           OBJECT\
    \ IDENTIFIER countryName (2 5 4 6)\n 43 13    2:           PrintableString 'US'\n\
    \           :           }\n           :         }\n 47 31   12:       SET {\n\
    \ 49 30   10:         SEQUENCE {\n 51 06    3:           OBJECT IDENTIFIER organizationName\
    \ (2 5 4 10)\n 56 13    3:           PrintableString 'gov'\n           :     \
    \      }\n           :         }\n 61 31   13:       SET {\n 63 30   11:     \
    \    SEQUENCE {\n 65 06    3:           OBJECT IDENTIFIER\n           :      \
    \       organizationalUnitName (2 5 4 11)\n 70 13    4:           PrintableString\
    \ 'NIST'\n           :           }\n           :         }\n           :     \
    \  }\n 76 30   30:     SEQUENCE {\n 78 17   13:       UTCTime '960521095826Z'\n\
    \ 93 17   13:       UTCTime '970521095826Z'\n           :       }\n"
- title: '108 30   61:     SEQUENCE {'
  contents:
  - '108 30   61:     SEQUENCE {

    '
- title: '110 31   11:       SET {'
  contents:
  - '110 31   11:       SET {

    '
- title: '112 30    9:         SEQUENCE {'
  contents:
  - '112 30    9:         SEQUENCE {

    '
- title: '114 06    3:           OBJECT IDENTIFIER countryName (2 5 4 6)'
  contents:
  - '114 06    3:           OBJECT IDENTIFIER countryName (2 5 4 6)

    '
- title: '119 13    2:           PrintableString ''US'''
  contents:
  - "119 13    2:           PrintableString 'US'\n           :           }\n     \
    \      :         }\n"
- title: '123 31   12:       SET {'
  contents:
  - '123 31   12:       SET {

    '
- title: '125 30   10:         SEQUENCE {'
  contents:
  - '125 30   10:         SEQUENCE {

    '
- title: '127 06    3:           OBJECT IDENTIFIER organizationName (2 5 4 10)'
  contents:
  - '127 06    3:           OBJECT IDENTIFIER organizationName (2 5 4 10)

    '
- title: '132 13    3:           PrintableString ''gov'''
  contents:
  - "132 13    3:           PrintableString 'gov'\n           :           }\n    \
    \       :         }\n"
- title: '137 31   13:       SET {'
  contents:
  - '137 31   13:       SET {

    '
- title: '139 30   11:         SEQUENCE {'
  contents:
  - '139 30   11:         SEQUENCE {

    '
- title: '141 06    3:           OBJECT IDENTIFIER'
  contents:
  - "141 06    3:           OBJECT IDENTIFIER\n           :             organizationalUnitName\
    \ (2 5 4 11)\n"
- title: '146 13    4:           PrintableString ''NIST'''
  contents:
  - "146 13    4:           PrintableString 'NIST'\n           :           }\n   \
    \        :         }\n"
- title: '152 31   17:       SET {'
  contents:
  - '152 31   17:       SET {

    '
- title: '154 30   15:         SEQUENCE {'
  contents:
  - '154 30   15:         SEQUENCE {

    '
- title: '156 06    3:           OBJECT IDENTIFIER commonName (2 5 4 3)'
  contents:
  - '156 06    3:           OBJECT IDENTIFIER commonName (2 5 4 3)

    '
- title: '161 13    8:           PrintableString ''Tim Polk'''
  contents:
  - "161 13    8:           PrintableString 'Tim Polk'\n           :           }\n\
    \           :         }\n           :       }\n"
- title: '171 30  159:     SEQUENCE {'
  contents:
  - '171 30  159:     SEQUENCE {

    '
- title: '174 30   13:       SEQUENCE {'
  contents:
  - '174 30   13:       SEQUENCE {

    '
- title: '176 06    9:         OBJECT IDENTIFIER'
  contents:
  - "176 06    9:         OBJECT IDENTIFIER\n           :           rsaEncryption\
    \ (1 2 840 113549 1 1 1)\n"
- title: '187 05    0:         NULL'
  contents:
  - "187 05    0:         NULL\n           :         }\n"
- title: '189 03  141:       BIT STRING 0 unused bits, encapsulates {'
  contents:
  - '189 03  141:       BIT STRING 0 unused bits, encapsulates {

    '
- title: '193 30  137:           SEQUENCE {'
  contents:
  - '193 30  137:           SEQUENCE {

    '
- title: '196 02  129:             INTEGER'
  contents:
  - "196 02  129:             INTEGER\n           :               00 E1 6A E4 03 30\
    \ 97 02 3C F4 10 F3 B5 1E\n           :               4D 7F 14 7B F6 F5 D0 78\
    \ E9 A4 8A F0 A3 75\n           :               EC ED B6 56 96 7F 88 99 85 9A\
    \ F2 3E 68 77\n           :               87 EB 9E D1 9F C0 B4 17 DC AB 89 23\
    \ A4 1D\n           :               7E 16 23 4C 4F A8 4D F5 31 B8 7C AA E3 1A\n\
    \           :               49 09 F4 4B 26 DB 27 67 30 82 12 01 4A E9\n      \
    \     :               1A B6 C1 0C 53 8B 6C FC 2F 7A 43 EC 33 36\n           :\
    \               7E 32 B2 7B D5 AA CF 01 14 C6 12 EC 13 F2\n           :      \
    \         2D 14 7A 8B 21 58 14 13 4C 46 A3 9A F2 16\n           :            \
    \   95 FF 23\n"
- title: '328 02    3:             INTEGER 65537'
  contents:
  - "328 02    3:             INTEGER 65537\n           :             }\n        \
    \   :           }\n           :       }\n"
- title: '333 A3  175:     [3] {'
  contents:
  - '333 A3  175:     [3] {

    '
- title: '336 30  172:       SEQUENCE {'
  contents:
  - '336 30  172:       SEQUENCE {

    '
- title: '339 30   63:         SEQUENCE {'
  contents:
  - '339 30   63:         SEQUENCE {

    '
- title: '341 06    3:           OBJECT IDENTIFIER subjectAltName (2 5 29 17)'
  contents:
  - '341 06    3:           OBJECT IDENTIFIER subjectAltName (2 5 29 17)

    '
- title: '346 04   56:           OCTET STRING, encapsulates {'
  contents:
  - '346 04   56:           OCTET STRING, encapsulates {

    '
- title: '348 30   54:               SEQUENCE {'
  contents:
  - '348 30   54:               SEQUENCE {

    '
- title: '350 86   52:                 [6]'
  contents:
  - "350 86   52:                 [6]\n           :                   'http://www.itl.nist.gov/div893/staff/'\n\
    \           :                   'polk/index.html'\n           :              \
    \   }\n           :               }\n           :           }\n"
- title: '404 30   31:         SEQUENCE {'
  contents:
  - '404 30   31:         SEQUENCE {

    '
- title: '406 06    3:           OBJECT IDENTIFIER issuerAltName (2 5 29 18)'
  contents:
  - '406 06    3:           OBJECT IDENTIFIER issuerAltName (2 5 29 18)

    '
- title: '411 04   24:           OCTET STRING, encapsulates {'
  contents:
  - '411 04   24:           OCTET STRING, encapsulates {

    '
- title: '413 30   22:               SEQUENCE {'
  contents:
  - '413 30   22:               SEQUENCE {

    '
- title: '415 86   20:                 [6] ''http://www.nist.gov/'''
  contents:
  - "415 86   20:                 [6] 'http://www.nist.gov/'\n           :       \
    \          }\n           :               }\n           :           }\n"
- title: '437 30   31:         SEQUENCE {'
  contents:
  - '437 30   31:         SEQUENCE {

    '
- title: '439 06    3:           OBJECT IDENTIFIER'
  contents:
  - "439 06    3:           OBJECT IDENTIFIER\n           :             authorityKeyIdentifier\
    \ (2 5 29 35)\n"
- title: '444 04   24:           OCTET STRING, encapsulates {'
  contents:
  - '444 04   24:           OCTET STRING, encapsulates {

    '
- title: '446 30   22:               SEQUENCE {'
  contents:
  - '446 30   22:               SEQUENCE {

    '
- title: '448 80   20:                 [0]'
  contents:
  - "448 80   20:                 [0]\n           :                   08 68 AF 85\
    \ 33 C8 39 4A 7A F8 82 93 8E\n           :                   70 6A 4A 20 84 2C\
    \ 32\n           :                 }\n           :               }\n         \
    \  :           }\n"
- title: '470 30   23:         SEQUENCE {'
  contents:
  - '470 30   23:         SEQUENCE {

    '
- title: '472 06    3:           OBJECT IDENTIFIER'
  contents:
  - "472 06    3:           OBJECT IDENTIFIER\n           :             certificatePolicies\
    \ (2 5 29 32)\n"
- title: '477 04   16:           OCTET STRING, encapsulates {'
  contents:
  - '477 04   16:           OCTET STRING, encapsulates {

    '
- title: '479 30   14:               SEQUENCE {'
  contents:
  - '479 30   14:               SEQUENCE {

    '
- title: '481 30   12:                 SEQUENCE {'
  contents:
  - '481 30   12:                 SEQUENCE {

    '
- title: '483 06   10:                   OBJECT IDENTIFIER'
  contents:
  - "483 06   10:                   OBJECT IDENTIFIER\n           :              \
    \              '2 16 840 1 101 3 2 1 48 9'\n           :                   }\n\
    \           :                 }\n           :               }\n           :  \
    \         }\n"
- title: '495 30   14:         SEQUENCE {'
  contents:
  - '495 30   14:         SEQUENCE {

    '
- title: '497 06    3:           OBJECT IDENTIFIER keyUsage (2 5 29 15)'
  contents:
  - '497 06    3:           OBJECT IDENTIFIER keyUsage (2 5 29 15)

    '
- title: '502 01    1:           BOOLEAN TRUE'
  contents:
  - '502 01    1:           BOOLEAN TRUE

    '
- title: '505 04    4:           OCTET STRING, encapsulates {'
  contents:
  - '505 04    4:           OCTET STRING, encapsulates {

    '
- title: '507 03    2:               BIT STRING 7 unused bits'
  contents:
  - "507 03    2:               BIT STRING 7 unused bits\n           :           \
    \      '1'B (bit 0)\n           :               }\n           :           }\n\
    \           :         }\n           :       }\n           :     }\n"
- title: '511 30   13:   SEQUENCE {'
  contents:
  - '511 30   13:   SEQUENCE {

    '
- title: '513 06    9:     OBJECT IDENTIFIER'
  contents:
  - "513 06    9:     OBJECT IDENTIFIER\n           :       sha1withRSAEncryption\
    \ (1 2 840 113549 1 1 5)\n"
- title: '524 05    0:     NULL'
  contents:
  - "524 05    0:     NULL\n           :     }\n"
- title: '526 03  129:   BIT STRING 0 unused bits'
  contents:
  - "526 03  129:   BIT STRING 0 unused bits\n           :     1E 07 77 6E 66 B5 B6\
    \ B8 57 F0 03 DC 6F 77\n           :     6D AF 55 1D 74 E5 CE 36 81 FC 4B C5 F4\
    \ 47\n           :     82 C4 0A 25 AA 8D D6 7D 3A 89 AB 44 34 39\n           :\
    \     F6 BD 61 1A 78 85 7A B8 1E 92 A2 22 2F CE\n           :     07 1A 08 8E\
    \ F1 46 03 59 36 4A CB 60 E6 03\n           :     40 01 5B 2A 44 D6 E4 7F EB 43\
    \ 5E 74 0A E6\n           :     E4 F9 3E E1 44 BE 1F E7 5F 5B 2C 41 8D 08\n  \
    \         :     BD 26 FE 6A A6 C3 2F B2 3B 41 12 6B C1 06\n           :     8A\
    \ B8 4C 91 59 EB 2F 38 20 2A 67 74 20 0B\n           :     77 F3\n           :\
    \   }\n"
- title: C.4  Certificate Revocation List
  contents:
  - "C.4  Certificate Revocation List\n   This section contains an annotated hex dump\
    \ of a version 2 CRL with\n   one extension (cRLNumber).  The CRL was issued by\
    \ OU=NIST; O=gov;\n   C=US on August 7, 1997; the next scheduled issuance was\
    \ September 7,\n   1997.  The CRL includes one revoked certificates: serial number\
    \ 18\n   (12 hex), which was revoked on July 31, 1997 due to keyCompromise.\n\
    \   The CRL itself is number 18, and it was signed with DSA and SHA-1.\n  0 30\
    \  203: SEQUENCE {\n  3 30  140:   SEQUENCE {\n  6 02    1:     INTEGER 1\n  9\
    \ 30    9:     SEQUENCE {\n 11 06    7:       OBJECT IDENTIFIER dsaWithSha1 (1\
    \ 2 840 10040 4 3)\n           :       }\n 20 30   42:     SEQUENCE {\n 22 31\
    \   11:       SET {\n 24 30    9:         SEQUENCE {\n 26 06    3:           OBJECT\
    \ IDENTIFIER countryName (2 5 4 6)\n 31 13    2:           PrintableString 'US'\n\
    \           :           }\n           :         }\n 35 31   12:       SET {\n\
    \ 37 30   10:         SEQUENCE {\n 39 06    3:           OBJECT IDENTIFIER organizationName\
    \ (2 5 4 10)\n 44 13    3:           PrintableString 'gov'\n           :     \
    \      }\n           :         }\n 49 31   13:       SET {\n 51 30   11:     \
    \    SEQUENCE {\n 53 06    3:           OBJECT IDENTIFIER\n           :      \
    \       organizationalUnitName (2 5 4 11)\n 58 13    4:           PrintableString\
    \ 'NIST'\n           :           }\n           :         }\n           :     \
    \  }\n 64 17   13:     UTCTime '970807000000Z'\n 79 17   13:     UTCTime '970907000000Z'\n\
    \ 94 30   34:     SEQUENCE {\n 96 30   32:       SEQUENCE {\n 98 02    1:    \
    \     INTEGER 18\n"
- title: '101 17   13:         UTCTime ''970731000000Z'''
  contents:
  - '101 17   13:         UTCTime ''970731000000Z''

    '
- title: '116 30   12:         SEQUENCE {'
  contents:
  - '116 30   12:         SEQUENCE {

    '
- title: '118 30   10:           SEQUENCE {'
  contents:
  - '118 30   10:           SEQUENCE {

    '
- title: '120 06    3:             OBJECT IDENTIFIER cRLReason (2 5 29 21)'
  contents:
  - '120 06    3:             OBJECT IDENTIFIER cRLReason (2 5 29 21)

    '
- title: '125 04    3:             OCTET STRING, encapsulates {'
  contents:
  - '125 04    3:             OCTET STRING, encapsulates {

    '
- title: '127 0A    1:                 ENUMERATED 1'
  contents:
  - "127 0A    1:                 ENUMERATED 1\n           :                 }\n \
    \          :             }\n           :           }\n           :         }\n\
    \           :       }\n"
- title: '130 A0   14:     [0] {'
  contents:
  - '130 A0   14:     [0] {

    '
- title: '132 30   12:       SEQUENCE {'
  contents:
  - '132 30   12:       SEQUENCE {

    '
- title: '134 30   10:         SEQUENCE {'
  contents:
  - '134 30   10:         SEQUENCE {

    '
- title: '136 06    3:           OBJECT IDENTIFIER cRLNumber (2 5 29 20)'
  contents:
  - '136 06    3:           OBJECT IDENTIFIER cRLNumber (2 5 29 20)

    '
- title: '141 04    3:           OCTET STRING, encapsulates {'
  contents:
  - '141 04    3:           OCTET STRING, encapsulates {

    '
- title: '143 02    1:               INTEGER 12'
  contents:
  - "143 02    1:               INTEGER 12\n           :               }\n       \
    \    :           }\n           :         }\n           :       }\n           :\
    \     }\n"
- title: '146 30    9:   SEQUENCE {'
  contents:
  - '146 30    9:   SEQUENCE {

    '
- title: '148 06    7:     OBJECT IDENTIFIER dsaWithSha1 (1 2 840 10040 4 3)'
  contents:
  - "148 06    7:     OBJECT IDENTIFIER dsaWithSha1 (1 2 840 10040 4 3)\n        \
    \   :     }\n"
- title: '157 03   47:   BIT STRING 0 unused bits, encapsulates {'
  contents:
  - '157 03   47:   BIT STRING 0 unused bits, encapsulates {

    '
- title: '160 30   44:       SEQUENCE {'
  contents:
  - '160 30   44:       SEQUENCE {

    '
- title: '162 02   20:         INTEGER'
  contents:
  - "162 02   20:         INTEGER\n           :           22 4E 9F 43 BA 95 06 34\
    \ F2 BB 5E 65 DB A6\n           :           80 05 C0 3A 29 47\n"
- title: '184 02   20:         INTEGER'
  contents:
  - "184 02   20:         INTEGER\n           :           59 1A 57 C9 82 D7 02 21\
    \ 14 C3 D4 0B 32 1B\n           :           96 16 B1 1F 46 5A\n           :  \
    \       }\n           :       }\n           :   }\n"
- title: Author Addresses
  contents:
  - "Author Addresses\n   Russell Housley\n   RSA Laboratories\n   918 Spring Knoll\
    \ Drive\n   Herndon, VA 20170\n   USA\n   EMail:  rhousley@rsasecurity.com\n \
    \  Warwick Ford\n   VeriSign, Inc.\n   401 Edgewater Place\n   Wakefield, MA 01880\n\
    \   USA\n   EMail:  wford@verisign.com\n   Tim Polk\n   NIST\n   Building 820,\
    \ Room 426\n   Gaithersburg, MD 20899\n   USA\n   EMail:  wpolk@nist.gov\n   David\
    \ Solo\n   Citigroup\n   909 Third Ave, 16th Floor\n   New York, NY 10043\n  \
    \ USA\n   EMail:  dsolo@alum.mit.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
