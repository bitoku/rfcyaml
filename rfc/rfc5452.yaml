- contents:
  - '     Measures for Making DNS More Resilient against Forged Answers

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    (http://trustee.ietf.org/\n   license-info) in effect on the date of publication
    of this document.\n   Please review these documents carefully, as they describe
    your rights\n   and restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The current Internet climate poses serious threats to the Domain
    Name\n   System.  In the interim period before the DNS protocol can be secured\n
    \  more fully, measures can already be taken to harden the DNS to make\n   'spoofing'
    a recursing nameserver many orders of magnitude harder.\n   Even a cryptographically
    secured DNS benefits from having the ability\n   to discard bogus responses quickly,
    as this potentially saves large\n   amounts of computation.\n   By describing
    certain behavior that has previously not been\n   standardized, this document
    sets out how to make the DNS more\n   resilient against accepting incorrect responses.
    \ This document\n   updates RFC 2181.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Requirements and Definitions . . . . . . . . . . . . .
    . . . .  4\n     2.1.  Definitions  . . . . . . . . . . . . . . . . . . . . .
    . .  4\n     2.2.  Key Words  . . . . . . . . . . . . . . . . . . . . . . . .
    \ 5\n   3.  Description of DNS Spoofing  . . . . . . . . . . . . . . . . .  5\n
    \  4.  Detailed Description of Spoofing Scenarios . . . . . . . . . .  6\n     4.1.
    \ Forcing a Query  . . . . . . . . . . . . . . . . . . . . .  6\n     4.2.  Matching
    the Question Section  . . . . . . . . . . . . . .  7\n     4.3.  Matching the
    ID Field  . . . . . . . . . . . . . . . . . .  7\n     4.4.  Matching the Source
    Address of the Authentic Response  . .  7\n     4.5.  Matching the Destination
    Address and Port of the\n           Authentic Response . . . . . . . . . . . .
    . . . . . . . .  8\n     4.6.  Have the Response Arrive before the Authentic Response
    . .  8\n   5.  Birthday Attacks . . . . . . . . . . . . . . . . . . . . . . .
    \ 9\n   6.  Accepting Only In-Domain Records . . . . . . . . . . . . . . .  9\n
    \  7.  Combined Difficulty  . . . . . . . . . . . . . . . . . . . . . 10\n     7.1.
    \ Symbols Used in Calculation  . . . . . . . . . . . . . . . 10\n     7.2.  Calculation
    \ . . . . . . . . . . . . . . . . . . . . . . . 11\n   8.  Discussion . . . .
    . . . . . . . . . . . . . . . . . . . . . . 12\n     8.1.  Repetitive Spoofing
    Attempts for a Single Domain Name  . . 13\n   9.  Forgery Countermeasures  . .
    . . . . . . . . . . . . . . . . . 13\n     9.1.  Query Matching Rules . . . .
    . . . . . . . . . . . . . . . 13\n     9.2.  Extending the Q-ID Space by Using
    Ports and Addresses  . . 14\n       9.2.1.  Justification and Discussion . . .
    . . . . . . . . . . 14\n     9.3.  Spoof Detection and Countermeasure . . . .
    . . . . . . . . 15\n   10. Security Considerations  . . . . . . . . . . . . .
    . . . . . . 15\n   11. Acknowledgments  . . . . . . . . . . . . . . . . . . .
    . . . . 16\n   12. References . . . . . . . . . . . . . . . . . . . . . . . .
    . . 16\n     12.1. Normative References . . . . . . . . . . . . . . . . . . .
    16\n     12.2. Informative References . . . . . . . . . . . . . . . . . . 17\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes several common problems in DNS\n
    \  implementations, which, although previously recognized, remain\n   largely
    unsolved.  Besides briefly recapping these problems, this\n   document contains
    rules that, if implemented, make complying\n   resolvers vastly more resistant
    to the attacks described.  The goal\n   is to make the existing DNS as secure
    as possible within the current\n   protocol boundaries.\n   The words below are
    aimed at authors of resolvers: it is up to\n   operators to decide which nameserver
    implementation to use, or which\n   options to enable.  Operational constraints
    may override the security\n   concerns described below.  However, implementations
    are expected to\n   allow an operator to enable functionality described in this
    document.\n   Almost every transaction on the Internet involves the Domain Name\n
    \  System, which is described in [RFC1034], [RFC1035], and beyond.\n   Additionally,
    it has recently become possible to acquire Secure\n   Socket Layer/Transport Layer
    Security (SSL/TLS) certificates with no\n   other confirmation of identity than
    the ability to respond to a\n   verification email sent via SMTP ([RFC5321]) --
    which generally uses\n   DNS for its routing.\n   In other words, any party that
    (temporarily) controls the Domain Name\n   System is in a position to reroute
    most kinds of Internet\n   transactions, including the verification steps in acquiring
    an SSL/\n   TLS certificate for a domain.  This in turn means that even\n   transactions
    protected by SSL/TLS could be diverted.\n   It is entirely conceivable that such
    rerouted traffic could be used\n   to the disadvantage of Internet users.\n   These
    and other developments have made the security and\n   trustworthiness of DNS of
    renewed importance.  Although the DNS\n   community is working hard on finalizing
    and implementing a\n   cryptographically enhanced DNS protocol, steps should be
    taken to\n   make sure that the existing use of DNS is as secure as possible\n
    \  within the bounds of the relevant standards.\n   It should be noted that the
    most commonly used resolvers currently do\n   not perform as well as possible
    in this respect, making this document\n   of urgent importance.\n   A thorough
    analysis of risks facing DNS can be found in [RFC3833].\n   This document expands
    on some of the risks mentioned in RFC 3833,\n   especially those outlined in the
    sections on \"ID Guessing and Query\n   Prediction\" and \"Name Chaining\".  Furthermore,
    it emphasizes a number\n   of existing rules and guidelines embodied in the relevant
    DNS\n   protocol specifications.  The following also specifies new\n   requirements
    to make sure the Domain Name System can be relied upon\n   until a more secure
    protocol has been standardized and deployed.\n   It should be noted that even
    when all measures suggested below are\n   implemented, protocol users are not
    protected against third parties\n   with the ability to observe, modify, or inject
    packets in the traffic\n   of a resolver.\n   For protocol extensions that offer
    protection against these\n   scenarios, see [RFC4033] and beyond.\n"
  title: 1.  Introduction
- contents:
  - '2.  Requirements and Definitions

    '
  - contents:
    - "2.1.  Definitions\n   This document uses the following definitions:\n      Client:
      typically a 'stub-resolver' on an end-user's computer.\n      Resolver: a nameserver
      performing recursive service for clients,\n      also known as a caching server,
      or a full service resolver\n      ([RFC1123], Section 6.1.3.1).\n      Stub
      resolver: a very limited resolver on a client computer, that\n      leaves the
      recursing work to a full resolver.\n      Query: a question sent out by a resolver,
      typically in a UDP\n      packet\n      Response: the answer sent back by an
      authoritative nameserver,\n      typically in a UDP packet.\n      Third party:
      any entity other than the resolver or the intended\n      recipient of a question.
      \ The third party may have access to an\n      arbitrary authoritative nameserver,
      but has no access to packets\n      transmitted by the resolver or authoritative
      server.\n      Attacker: malicious third party.\n      Spoof: the activity of
      attempting to subvert the DNS process by\n      getting a chosen answer accepted.\n
      \     Authentic response: the correct answer that comes from the right\n      authoritative
      server.\n      Target domain name: domain for which the attacker wishes to spoof\n
      \     in an answer\n      Fake data: response chosen by the attacker.\n"
    title: 2.1.  Definitions
  - contents:
    - "2.2.  Key Words\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
    title: 2.2.  Key Words
  title: 2.  Requirements and Definitions
- contents:
  - "3.  Description of DNS Spoofing\n   When certain steps are taken, it is feasible
    to \"spoof\" the current\n   deployed majority of resolvers with carefully crafted
    and timed DNS\n   packets.  Once spoofed, a caching server will repeat the data
    it\n   wrongfully accepted, and make its clients contact the wrong, and\n   possibly
    malicious, servers.\n   To understand how this process works it is important to
    know what\n   makes a resolver accept a response.\n   The following sentence in
    Section 5.3.3 of [RFC1034] presaged the\n   present problem:\n     The resolver
    should be highly paranoid in its parsing of responses.\n     It should also check
    that the response matches the query it sent\n     using the ID field in the response.\n
    \  DNS data is to be accepted by a resolver if and only if:\n   1.  The question
    section of the reply packet is equivalent to that of\n       a question packet
    currently waiting for a response.\n   2.  The ID field of the reply packet matches
    that of the question\n       packet.\n   3.  The response comes from the same
    network address to which the\n       question was sent.\n   4.  The response comes
    in on the same network address, including port\n       number, from which the
    question was sent.\n   In general, the first response matching these four conditions
    is\n   accepted.\n   If a third party succeeds in meeting the four conditions
    before the\n   response from the authentic nameserver does so, it is in a position\n
    \  to feed a resolver fabricated data.  When it does so, we dub it an\n   \"attacker\",
    attempting to spoof in fake data.\n   All conditions mentioned above can theoretically
    be met by a third\n   party, with the difficulty being a function of the resolver\n
    \  implementation and zone configuration.\n"
  title: 3.  Description of DNS Spoofing
- contents:
  - "4.  Detailed Description of Spoofing Scenarios\n   The previous paragraph discussed
    a number of requirements an attacker\n   must match in order to spoof in manipulated
    (or fake) data.  This\n   section discusses the relative difficulties and how
    implementation-\n   defined choices impact the amount of work an attacker has
    to perform\n   to meet said difficulties.\n   Some more details can be found in
    Section 2.2 of [RFC3833].\n"
  - contents:
    - "4.1.  Forcing a Query\n   Formally, there is no need for a nameserver to perform
      service except\n   for its operator, its customers, or more generally its users.\n
      \  Recently, open recursing nameservers have been used to amplify\n   denial-of-service
      attacks.\n   Providing full service enables the third party to send the target\n
      \  resolver a query for the domain name it intends to spoof.  On\n   receiving
      this query, and not finding the answer in its cache, the\n   resolver will transmit
      queries to relevant authoritative nameservers.\n   This opens up a window of
      opportunity for getting fake answer data\n   accepted.\n   Queries may however
      be forced indirectly, for example, by inducing a\n   mail server to perform
      DNS lookups.\n   Some operators restrict access by not recursing for unauthorized
      IP\n   addresses, but only respond with data from the cache.  This makes\n   spoofing
      harder for a third party as it cannot then force the exact\n   moment a question
      will be asked.  It is still possible however to\n   determine a time range when
      this will happen, because nameservers\n   helpfully publish the decreasing time
      to live (TTL) of entries in the\n   cache, which indicate from which absolute
      time onwards a new query\n   could be sent to refresh the expired entry.\n   The
      time to live of the target domain name's RRSets determines how\n   often a window
      of opportunity is available, which implies that a\n   short TTL makes spoofing
      far more viable.\n   Note that the attacker might very well have authorized
      access to the\n   target resolver by virtue of being a customer or employee
      of its\n   operator.  In addition, access may be enabled through the use of\n
      \  reflectors as outlined in [RFC5358].\n"
    title: 4.1.  Forcing a Query
  - contents:
    - "4.2.  Matching the Question Section\n   DNS packets, both queries and responses,
      contain a question section.\n   Incoming responses should be verified to have
      a question section that\n   is equivalent to that of the outgoing query.\n"
    title: 4.2.  Matching the Question Section
  - contents:
    - "4.3.  Matching the ID Field\n   The DNS ID field is 16 bits wide, meaning that
      if full use is made of\n   all these bits, and if their contents are truly random,
      it will\n   require on average 32768 attempts to guess.  Anecdotal evidence\n
      \  suggests there are implementations utilizing only 14 bits, meaning on\n   average
      8192 attempts will suffice.\n   Additionally, if the target nameserver can be
      forced into having\n   multiple identical queries outstanding, the \"Birthday
      Attack\"\n   phenomenon means that any fake data sent by the attacker is matched\n
      \  against multiple outstanding queries, significantly raising the\n   chance
      of success.  Further details in Section 5.\n"
    title: 4.3.  Matching the ID Field
  - contents:
    - "4.4.  Matching the Source Address of the Authentic Response\n   It should be
      noted that meeting this condition entails being able to\n   transmit packets
      on behalf of the address of the authoritative\n   nameserver.  While two Best
      Current Practice documents ([RFC2827] and\n   [RFC3013] specifically) direct
      Internet access providers to prevent\n   their customers from assuming IP addresses
      that are not assigned to\n   them, these recommendations are not universally
      (nor even widely)\n   implemented.\n   Many zones have two or three authoritative
      nameservers, which make\n   matching the source address of the authentic response
      very likely\n   with even a naive choice having a double digit success rate.\n
      \  Most recursing nameservers store relative performance indications of\n   authoritative
      nameservers, which may make it easier to predict which\n   nameserver would
      originally be queried -- the one most likely to\n   respond the quickest.\n
      \  Generally, this condition requires at most two or three attempts\n   before
      it is matched.\n"
    title: 4.4.  Matching the Source Address of the Authentic Response
  - contents:
    - "4.5.  Matching the Destination Address and Port of the Authentic\n      Response\n
      \  Note that the destination address of the authentic response is the\n   source
      address of the original query.\n   The actual address of a recursing nameserver
      is generally known; the\n   port used for asking questions is harder to determine.
      \ Most current\n   resolvers pick an arbitrary port at startup (possibly at
      random) and\n   use this for all outgoing queries.  In quite a number of cases,
      the\n   source port of outgoing questions is fixed at the traditional DNS\n
      \  assigned server port number of 53.\n   If the source port of the original
      query is random, but static, any\n   authoritative nameserver under observation
      by the attacker can be\n   used to determine this port.  This means that matching
      this\n   conditions often requires no guess work.\n   If multiple ports are
      used for sending queries, this enlarges the\n   effective ID space by a factor
      equal to the number of ports used.\n   Less common resolving servers choose
      a random port per outgoing\n   query.  If this strategy is followed, this port
      number can be\n   regarded as an additional ID field, again containing up to
      16 bits.\n   If the maximum ports range is utilized, on average, around 32256\n
      \  source ports would have to be tried before matching the source port\n   of
      the original query, as ports below 1024 may be unavailable for\n   use, leaving
      64512 options.\n   It is in general safe for DNS to use ports in the range 1024-49152\n
      \  even though some of these ports are allocated to other protocols.\n   DNS
      resolvers will not be able to use any ports that are already in\n   use.  If
      a DNS resolver uses a port, it will release that port after\n   a short time
      and migrate to a different port.  Only in the case of a\n   high-volume resolver
      is it possible that an application wanting a\n   particular UDP port suffers
      a long term block-out.\n   It should be noted that a firewall will not prevent
      the matching of\n   this address, as it will accept answers that (appear to)
      come from\n   the correct address, offering no additional security.\n"
    title: 4.5.  Matching the Destination Address and Port of the Authentic
  - contents:
    - "4.6.  Have the Response Arrive before the Authentic Response\n   Once any packet
      has matched the previous four conditions (plus\n   possible additional conditions),
      no further responses are generally\n   accepted.\n   This means that the third
      party has a limited time in which to inject\n   its spoofed response.  For calculations,
      we will assume a window in\n   order of at most 100 ms (depending on the network
      distance to the\n   authentic authoritative nameserver).\n   This time period
      can be far longer if the authentic authoritative\n   nameservers are (briefly)
      overloaded by queries, perhaps by the\n   attacker.\n"
    title: 4.6.  Have the Response Arrive before the Authentic Response
  title: 4.  Detailed Description of Spoofing Scenarios
- contents:
  - "5.  Birthday Attacks\n   The so-called \"birthday paradox\" implies that a group
    of 23 people\n   suffices to have a more than even chance of having two or more\n
    \  members of the group share a birthday.\n   An attacker can benefit from this
    exact phenomenon if it can force\n   the target resolver to have multiple equivalent
    (identical QNAME,\n   QTYPE, and QCLASS) outstanding queries at any one time to
    the same\n   authoritative server.\n   Any packet the attacker sends then has
    a much higher chance of being\n   accepted because it only has to match any of
    the outstanding queries\n   for that single domain.  Compared to the birthday
    analogy above, of\n   the group composed of queries and responses, the chance
    of having any\n   of these share an ID rises quickly.\n   As long as small numbers
    of queries are sent out, the chance of\n   successfully spoofing a response rises
    linearly with the number of\n   outstanding queries for the exact domain and nameserver.\n
    \  For larger numbers, this effect is less pronounced.\n   More details are available
    in US-CERT [vu-457875].\n"
  title: 5.  Birthday Attacks
- contents:
  - "6.  Accepting Only In-Domain Records\n   Responses from authoritative nameservers
    often contain information\n   that is not part of the zone for which we deem it
    authoritative.  As\n   an example, a query for the MX record of a domain might
    get as its\n   responses a mail exchanger in another domain, and additionally
    the IP\n   address of this mail exchanger.\n   If accepted uncritically, the resolver
    stands the chance of accepting\n   data from an untrusted source.  Care must be
    taken to only accept\n   data if it is known that the originator is authoritative
    for the\n   QNAME or a parent of the QNAME.\n   One very simple way to achieve
    this is to only accept data if it is\n   part of the domain for which the query
    was intended.\n"
  title: 6.  Accepting Only In-Domain Records
- contents:
  - "7.  Combined Difficulty\n   Given a known or static destination port, matching
    ID field, the\n   source and destination address requires on average in the order
    of 2\n   * 2^15 = 65000 packets, assuming a zone has 2 authoritative\n   nameservers.\n
    \  If the window of opportunity available is around 100 ms, as assumed\n   above,
    an attacker would need to be able to briefly transmit 650000\n   packets/s to
    have a 50% chance to get spoofed data accepted on the\n   first attempt.\n   A
    realistic minimal DNS response consists of around 80 bytes,\n   including IP headers,
    making the packet rate above correspond to a\n   respectable burst of 416 Mbit/s.\n
    \  As of mid-2006, this kind of bandwidth was not common but not scarce\n   either,
    especially among those in a position to control many servers.\n   These numbers
    change when a window of a full second is assumed,\n   possibly because the arrival
    of the authentic response can be\n   prevented by overloading the bona fide authoritative
    hosts with decoy\n   queries.  This reduces the needed bandwidth to 42 Mbit/s.\n
    \  If, in addition, the attacker is granted more than a single chance\n   and
    allowed up to 60 minutes of work on a domain with a time to live\n   of 300 seconds,
    a meager 4 Mbit/s suffices for a 50% chance at\n   getting fake data accepted.
    \ Once equipped with a longer time,\n   matching condition 1 mentioned above is
    straightforward -- any\n   popular domain will have been queried a number of times
    within this\n   hour, and given the short TTL, this would lead to queries to\n
    \  authoritative nameservers, opening windows of opportunity.\n"
  - contents:
    - "7.1.  Symbols Used in Calculation\n   Assume the following symbols are used:\n
      \  I: Number distinct IDs available (maximum 65536)\n   P: Number of ports used
      (maximum around 64000 as ports under 1024 are\n      not always available, but
      often 1)\n   N: Number of authoritative nameservers for a domain (averages around\n
      \     2.5)\n   F: Number of \"fake\" packets sent by the attacker\n   R: Number
      of packets sent per second by the attacker\n   W: Window of opportunity, in
      seconds.  Bounded by the response time\n      of the authoritative servers (often
      0.1s)\n   D: Average number of identical outstanding queries of a resolver\n
      \     (typically 1, see Section 5)\n   A: Number of attempts, one for each window
      of opportunity\n"
    title: 7.1.  Symbols Used in Calculation
  - contents:
    - "7.2.  Calculation\n   The probability of spoofing a resolver is equal to the
      amount of fake\n   packets that arrive within the window of opportunity, divided
      by the\n   size of the problem space.\n   When the resolver has 'D' multiple
      identical outstanding queries,\n   each fake packet has a proportionally higher
      chance of matching any\n   of these queries.  This assumption only holds for
      small values of\n   'D'.\n   In symbols, if the probability of being spoofed
      is denoted as P_s:\n              D * F\n   P_s =    ---------\n            N
      * P * I\n   It is more useful to reason not in terms of aggregate packets but
      to\n   convert to packet rate, which can easily be converted to bandwidth if\n
      \  needed.\n   If the window of opportunity length is 'W' and the attacker can
      send\n   'R' packets per second, the number of fake packets 'F' that are\n   candidates
      to be accepted is:\n                          D * R * W\n   F = R * W  ->   P_s
      \ = ---------\n                          N * P * I\n   Finally, to calculate
      the combined chance 'P_cs' of spoofing over a\n   chosen time period 'T', it
      should be realized that the attacker has a\n   new window of opportunity each
      time the TTL 'TTL' of the target\n   domain expires.  This means that the number
      of attempts 'A' is equal\n   to 'T / TTL'.\n   To calculate the combined chance
      of at least one success, the\n   following formula holds:\n                                                        (T
      / TTL)\n                         A          (       D * R * W )\n   P_cs = 1
      - ( 1 - P_s )    =  1 - ( 1  -  --------- )\n                                    (
      \      N * P * I )\n   When common numbers (as listed above) for D, W, N, P,
      and I are\n   inserted, this formula reduces to:\n                               (T
      / TTL)\n              (         R    )\n   P_cs = 1 - ( 1 -  ------- )\n              (
      \     1638400 )\n   From this formula, it can be seen that, if the nameserver\n
      \  implementation is unchanged, only raising the TTL offers protection.\n   Raising
      N, the number of authoritative nameservers, is not feasible\n   beyond a small
      number.\n   For the degenerate case of a zero-second TTL, a window of opportunity\n
      \  opens for each query sent, making the effective TTL equal to 'W'\n   above,
      the response time of the authoritative server.\n   This last case also holds
      for spoofing techniques that do not rely on\n   TTL expiry, but use repeated
      and changing queries.\n"
    title: 7.2.  Calculation
  title: 7.  Combined Difficulty
- contents:
  - "8.  Discussion\n   The calculations above indicate the relative ease with which
    DNS data\n   can be spoofed.  For example, using the formula derived earlier on
    an\n   RRSet with a 3600 second TTL, an attacker sending 7000 fake response\n
    \  packets/s (a rate of 4.5 Mbit/s), stands a 10% chance of spoofing a\n   record
    in the first 24 hours, which rises to 50% after a week.\n   For an RRSet with
    a TTL of 60 seconds, the 10% level is hit after 24\n   minutes, 50% after less
    than 3 hours, 90% after around 9 hours.\n   For some classes of attacks, the effective
    TTL is near zero, as noted\n   above.\n   Note that the attacks mentioned above
    can be detected by watchful\n   server operators - an unexpected incoming stream
    of 4.5 Mbit/s of\n   packets might be noticed.\n   An important assumption however
    in these calculations is a known or\n   static destination port of the authentic
    response.\n   If that port number is unknown and needs to be guessed as well,
    the\n   problem space expands by a factor of 64000, leading the attacker to\n
    \  need in excess of 285Gb/s to achieve similar success rates.\n   Such bandwidth
    is not generally available, nor is it expected to be\n   so in the foreseeable
    future.\n   Note that some firewalls may need reconfiguring if they are currently\n
    \  set up to only allow outgoing queries from a single DNS source port.\n"
  - contents:
    - "8.1.  Repetitive Spoofing Attempts for a Single Domain Name\n   Techniques
      are available to use an effectively infinite number of\n   queries to achieve
      a desired spoofing goal.  In the math above, this\n   reduces the effective
      TTL to 0.\n   If such techniques are employed, using the same 7000 packets/s
      rate\n   mentioned above, and using 1 source port, the spoofing chance rises\n
      \  to 50% within 7 seconds.\n   If 64000 ports are used, as recommended in this
      document, using the\n   same query rate, the 50% level is reached after around
      116 hours.\n"
    title: 8.1.  Repetitive Spoofing Attempts for a Single Domain Name
  title: 8.  Discussion
- contents:
  - '9.  Forgery Countermeasures

    '
  - contents:
    - "9.1.  Query Matching Rules\n   A resolver implementation MUST match responses
      to all of the\n   following attributes of the query:\n   o  Source address against
      query destination address\n   o  Destination address against query source address\n
      \  o  Destination port against query source port\n   o  Query ID\n   o  Query
      name\n   o  Query class and type\n   before applying DNS trustworthiness rules
      (see Section 5.4.1 of\n   [RFC2181]).\n   A mismatch and the response MUST be
      considered invalid.\n"
    title: 9.1.  Query Matching Rules
  - contents:
    - "9.2.  Extending the Q-ID Space by Using Ports and Addresses\n   Resolver implementations
      MUST:\n   o  Use an unpredictable source port for outgoing queries from the\n
      \     range of available ports (53, or 1024 and above) that is as large\n      as
      possible and practicable;\n   o  Use multiple different source ports simultaneously
      in case of\n      multiple outstanding queries;\n   o  Use an unpredictable
      query ID for outgoing queries, utilizing the\n      full range available (0-65535).\n
      \  Resolvers that have multiple IP addresses SHOULD use them in an\n   unpredictable
      manner for outgoing queries.\n   Resolver implementations SHOULD provide means
      to avoid usage of\n   certain ports.\n   Resolvers SHOULD favor authoritative
      nameservers with which a trust\n   relation has been established; stub-resolvers
      SHOULD be able to use\n   Transaction Signature (TSIG) ([RFC2845]) or IPsec
      ([RFC4301]) when\n   communicating with their recursive resolver.\n   In case
      a cryptographic verification of response validity is\n   available (TSIG, SIG(0)),
      resolver implementations MAY waive above\n   rules, and rely on this guarantee
      instead.\n   Proper unpredictability can be achieved by employing a high quality\n
      \  (pseudo-)random generator, as described in [RFC4086].\n"
    - contents:
      - "9.2.1.  Justification and Discussion\n   Since an attacker can force a full
        DNS resolver to send queries to\n   the attacker's own nameservers, any constant
        or sequential state held\n   by such a resolver can be measured, and it must
        not be trivially easy\n   to reverse engineer the resolver's internal state
        in a way that\n   allows low-cost, high-accuracy prediction of future state.\n
        \  A full DNS resolver with only one or a small number of upstream-\n   facing
        endpoints is effectively using constants for IP source address\n   and UDP
        port number, and these are very predictable by potential\n   attackers, and
        must therefore be avoided.\n   A full DNS resolver that uses a simple increment
        to get its next DNS\n   query ID is likewise very predictable and so very
        spoofable.\n   Finally, weak random number generators have been shown to expose\n
        \  their internal state, such that an attacker who witnesses several\n   sequential
        \"random\" values can easily predict the next ones.  A\n   crypto-strength
        random number generator is one whose output cannot be\n   predicted no matter
        how many successive values are witnessed.\n"
      title: 9.2.1.  Justification and Discussion
    title: 9.2.  Extending the Q-ID Space by Using Ports and Addresses
  - contents:
    - "9.3.  Spoof Detection and Countermeasure\n   If a resolver detects that an
      attempt is being made to spoof it,\n   perhaps by discovering that many packets
      fail the criteria as\n   outlined above, it MAY abandon the UDP query and re-issue
      it over\n   TCP.  TCP, by the nature of its use of sequence numbers, is far
      more\n   resilient against forgery by third parties.\n"
    title: 9.3.  Spoof Detection and Countermeasure
  title: 9.  Forgery Countermeasures
- contents:
  - "10.  Security Considerations\n   This document provides clarification of the
    DNS specification to\n   decrease the probability that DNS responses can be successfully\n
    \  forged.  Recommendations found above should be considered\n   complementary
    to possible cryptographical enhancements of the domain\n   name system, which
    protect against a larger class of attacks.\n   This document recommends the use
    of UDP source port number\n   randomization to extend the effective DNS transaction
    ID beyond the\n   available 16 bits.\n   A resolver that does not implement the
    recommendations outlined above\n   can easily be forced to accept spoofed responses,
    which in turn are\n   passed on to client computers -- misdirecting (user) traffic
    to\n   possibly malicious entities.\n   This document directly impacts the security
    of the Domain Name\n   System, implementers are urged to follow its recommendations.\n
    \  Most security considerations can be found in Sections 4 and 5, while\n   proposed
    countermeasures are described in Section 9.\n   For brevity's sake, in lieu of
    repeating the security considerations\n   references, the reader is referred to
    these sections.\n   Nothing in this document specifies specific algorithms for
    operators\n   to use; it does specify algorithms implementations SHOULD or MUST\n
    \  support.\n   It should be noted that the effects of source port randomization
    may\n   be dramatically reduced by NAT devices that either serialize or limit\n
    \  in volume the UDP source ports used by the querying resolver.\n   DNS recursive
    servers sitting behind at NAT or a statefull firewall\n   may consume all available
    NAT translation entries/ports when\n   operating under high query load.  Port
    randomization will cause\n   translation entries to be consumed faster than with
    fixed query port.\n   To avoid this, NAT boxes and statefull firewalls can/should
    purge\n   outgoing DNS query translation entries 10-17 seconds after the last\n
    \  outgoing query on that mapping was sent.  [RFC4787]-compliant devices\n   need
    to treat UDP messages with port 53 differently than most other\n   UDP protocols.\n
    \  To minimize the potential that port/state exhaustion attacks can be\n   staged
    from the outside, it is recommended that services that\n   generate a number of
    DNS queries for each connection should be rate\n   limited.  This applies in particular
    to email servers.\n"
  title: 10.  Security Considerations
- contents:
  - "11.  Acknowledgments\n   Source port randomization in DNS was first implemented
    and possibly\n   invented by Dan J. Bernstein.\n   Although any mistakes remain
    our own, the authors gratefully\n   acknowledge the help and contributions of:\n
    \     Stephane Bortzmeyer\n      Alfred Hoenes\n      Peter Koch\n      Sean Leach\n
    \     Norbert Sendetzky\n      Paul Vixie\n      Florian Weimer\n      Wouter
    Wijngaards\n      Dan Wing\n"
  title: 11.  Acknowledgments
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC1034]    Mockapetris, P., \"Domain names
      - concepts and\n                facilities\", STD 13, RFC 1034, November 1987.\n
      \  [RFC1035]    Mockapetris, P., \"Domain names - implementation and\n                specification\",
      STD 13, RFC 1035, November 1987.\n   [RFC2119]    Bradner, S., \"Key words for
      use in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC2181]    Elz, R. and R. Bush, \"Clarifications to the DNS\n
      \               Specification\", RFC 2181, July 1997.\n   [RFC2827]    Ferguson,
      P. and D. Senie, \"Network Ingress Filtering:\n                Defeating Denial
      of Service Attacks which employ IP\n                Source Address Spoofing\",
      BCP 38, RFC 2827, May 2000.\n   [RFC2845]    Vixie, P., Gudmundsson, O., Eastlake,
      D., and B.\n                Wellington, \"Secret Key Transaction Authentication
      for\n                DNS (TSIG)\", RFC 2845, May 2000.\n   [RFC3013]    Killalea,
      T., \"Recommended Internet Service Provider\n                Security Services
      and Procedures\", BCP 46, RFC 3013,\n                November 2000.\n   [RFC4033]
      \   Arends, R., Austein, R., Larson, M., Massey, D., and S.\n                Rose,
      \"DNS Security Introduction and Requirements\",\n                RFC 4033, March
      2005.\n   [RFC4086]    Eastlake, D., Schiller, J., and S. Crocker, \"Randomness\n
      \               Requirements for Security\", BCP 106, RFC 4086,\n                June
      2005.\n   [RFC5321]    Klensin, J., \"Simple Mail Transfer Protocol\", RFC 5321,\n
      \               October 2008.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [RFC1123]    Braden, R., \"Requirements for
      Internet Hosts -\n                Application and Support\", STD 3, RFC 1123,
      October 1989.\n   [RFC3833]    Atkins, D. and R. Austein, \"Threat Analysis
      of the\n                Domain Name System (DNS)\", RFC 3833, August 2004.\n
      \  [RFC4301]    Kent, S. and K. Seo, \"Security Architecture for the\n                Internet
      Protocol\", RFC 4301, December 2005.\n   [RFC4787]    Audet, F. and C. Jennings,
      \"Network Address Translation\n                (NAT) Behavioral Requirements
      for Unicast UDP\", BCP 127,\n                RFC 4787, January 2007.\n   [RFC5358]
      \   Damas, J. and F. Neves, \"Preventing Use of Recursive\n                Nameservers
      in Reflector Attacks\", BCP 140, RFC 5358,\n                October 2008.\n
      \  [vu-457875]  United States CERT, \"Various DNS service implementations\n
      \               generate multiple simultaneous queries for the same\n                resource
      record\", VU 457875, November 2002.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Authors' Addresses\n   Bert Hubert\n   Netherlabs Computer Consulting BV.\n   Braillelaan
    10\n   Rijswijk (ZH)  2289 CM\n   The Netherlands\n   EMail: bert.hubert@netherlabs.nl\n
    \  Remco van Mook\n   Equinix\n   Auke Vleerstraat 1\n   Enschede  7521 PE\n   The
    Netherlands\n   EMail: remco@eu.equinix.com\n"
  title: Authors' Addresses
