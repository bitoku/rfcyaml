- contents:
  - '        Content Delivery Network Interconnection (CDNI) Metadata

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Content Delivery Network Interconnection (CDNI) Metadata\n   interface
    enables interconnected Content Delivery Networks (CDNs) to\n   exchange content
    distribution metadata in order to enable content\n   acquisition and delivery.
    \ The CDNI Metadata associated with a piece\n   of content provides a downstream
    CDN with sufficient information for\n   the downstream CDN to service content
    requests on behalf of an\n   upstream CDN.  This document describes both a base
    set of CDNI\n   Metadata and the protocol for exchanging that metadata.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8006.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n
    \     1.1. Terminology ................................................5\n      1.2.
    Supported Metadata Capabilities ............................6\n   2. Design Principles
    ...............................................7\n   3. CDNI Metadata Object Model
    ......................................8\n      3.1. HostIndex, HostMatch, HostMetadata,
    PathMatch,\n           PatternMatch, and PathMetadata Objects .....................9\n
    \     3.2. Generic CDNI Metadata Objects .............................11\n      3.3.
    Metadata Inheritance and Override .........................14\n   4. CDNI Metadata
    Objects ..........................................15\n      4.1. Definitions of
    the CDNI Structural Metadata Objects .......16\n           4.1.1. HostIndex ..........................................16\n
    \          4.1.2. HostMatch ..........................................17\n           4.1.3.
    HostMetadata .......................................18\n           4.1.4. PathMatch
    ..........................................19\n           4.1.5. PatternMatch .......................................20\n
    \          4.1.6. PathMetadata .......................................21\n           4.1.7.
    GenericMetadata ....................................23\n      4.2. Definitions
    of the Initial Set of CDNI\n           GenericMetadata Objects ...................................24\n
    \          4.2.1. SourceMetadata .....................................24\n                  4.2.1.1.
    Source ....................................25\n           4.2.2. LocationACL Metadata
    ...............................26\n                  4.2.2.1. LocationRule ..............................28\n
    \                 4.2.2.2. Footprint .................................29\n           4.2.3.
    TimeWindowACL ......................................30\n                  4.2.3.1.
    TimeWindowRule ............................31\n                  4.2.3.2. TimeWindow
    ................................32\n           4.2.4. ProtocolACL Metadata ...............................33\n
    \                 4.2.4.1. ProtocolRule ..............................34\n           4.2.5.
    DeliveryAuthorization Metadata .....................35\n           4.2.6. Cache
    ..............................................35\n           4.2.7. Auth ...............................................37\n
    \          4.2.8. Grouping ...........................................38\n      4.3.
    CDNI Metadata Simple Data Type Descriptions ...............39\n           4.3.1.
    Link ...............................................39\n                  4.3.1.1.
    Link Loop Prevention ......................40\n           4.3.2. Protocol ...........................................40\n
    \          4.3.3. Endpoint ...........................................40\n           4.3.4.
    Time ...............................................41\n           4.3.5. IPv4CIDR
    ...........................................41\n           4.3.6. IPv6CIDR ...........................................42\n
    \          4.3.7. ASN ................................................42\n           4.3.8.
    Country Code .......................................42\n   5. CDNI Metadata Capabilities
    .....................................42\n   6. CDNI Metadata Interface ........................................43\n
    \     6.1. Transport .................................................44\n      6.2.
    Retrieval of CDNI Metadata Resources ......................44\n      6.3. Bootstrapping
    .............................................45\n      6.4. Encoding ..................................................46\n
    \     6.5. Extensibility .............................................46\n      6.6.
    Metadata Enforcement ......................................47\n      6.7. Metadata
    Conflicts ........................................47\n      6.8. Versioning ................................................48\n
    \     6.9. Media Types ...............................................49\n      6.10.
    Complete CDNI Metadata Example ...........................50\n   7. IANA Considerations
    ............................................54\n      7.1. CDNI Payload Types
    ........................................54\n           7.1.1. CDNI MI HostIndex
    Payload Type .....................54\n           7.1.2. CDNI MI HostMatch Payload
    Type .....................55\n           7.1.3. CDNI MI HostMetadata Payload Type
    ..................55\n           7.1.4. CDNI MI PathMatch Payload Type .....................55\n
    \          7.1.5. CDNI MI PatternMatch Payload Type ..................55\n           7.1.6.
    CDNI MI PathMetadata Payload Type ..................55\n           7.1.7. CDNI
    MI SourceMetadata Payload Type ................56\n           7.1.8. CDNI MI Source
    Payload Type ........................56\n           7.1.9. CDNI MI LocationACL
    Payload Type ...................56\n           7.1.10. CDNI MI LocationRule Payload
    Type .................56\n           7.1.11. CDNI MI Footprint Payload Type ....................56\n
    \          7.1.12. CDNI MI TimeWindowACL Payload Type ................57\n           7.1.13.
    CDNI MI TimeWindowRule Payload Type ...............57\n           7.1.14. CDNI
    MI TimeWindow Payload Type ...................57\n           7.1.15. CDNI MI ProtocolACL
    Payload Type ..................57\n           7.1.16. CDNI MI ProtocolRule Payload
    Type .................57\n           7.1.17. CDNI MI DeliveryAuthorization Payload
    Type ........58\n           7.1.18. CDNI MI Cache Payload Type ........................58\n
    \          7.1.19. CDNI MI Auth Payload Type .........................58\n           7.1.20.
    CDNI MI Grouping Payload Type .....................58\n      7.2. \"CDNI Metadata
    Footprint Types\" Registry ..................58\n      7.3. \"CDNI Metadata Protocol
    Types\" Registry ...................59\n   8. Security Considerations ........................................60\n
    \     8.1. Authentication and Integrity ..............................60\n      8.2.
    Confidentiality and Privacy ...............................60\n      8.3. Securing
    the CDNI Metadata Interface ......................61\n   9. References .....................................................62\n
    \     9.1. Normative References ......................................62\n      9.2.
    Informative References ....................................63\n   Acknowledgments
    ...................................................65\n   Contributors ......................................................65\n
    \  Authors' Addresses ................................................66\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Content Delivery Network Interconnection (CDNI) [RFC6707]
    enables a\n   downstream Content Delivery Network (dCDN) to service content\n
    \  requests on behalf of an upstream CDN (uCDN).\n   The CDNI Metadata interface
    (MI) is discussed in [RFC7336] along with\n   four other interfaces that can be
    used to compose a CDNI solution\n   (the CDNI Control interface, the CDNI Request
    Routing Redirection\n   interface, the CDNI Footprint & Capabilities Advertisement
    interface\n   (FCI), and the CDNI Logging interface).  [RFC7336] describes each\n
    \  interface and the relationships between them.  The requirements for\n   the
    CDNI Metadata interface are specified in [RFC7337].\n   The CDNI Metadata associated
    with a piece of content (or with a set\n   of content) provides a dCDN with sufficient
    information for servicing\n   content requests on behalf of a uCDN, in accordance
    with the policies\n   defined by the uCDN.\n   This document defines a CDNI Metadata
    interface that enables a dCDN\n   to obtain CDNI Metadata from a uCDN so that
    the dCDN can properly\n   process and respond to:\n   o  Redirection requests
    received over the CDNI Request Routing\n      Redirection interface [RFC7975].\n
    \  o  Content requests received directly from User Agents.\n   Specifically, this
    document defines:\n   o  A data structure for mapping content requests and redirection\n
    \     requests to CDNI Metadata objects (Sections 3 and 4.1).\n   o  An initial
    set of CDNI GenericMetadata objects (Section 4.2).\n   o  An HTTP web service
    for the transfer of CDNI Metadata (Section 6).\n"
  - contents:
    - "1.1.  Terminology\n   This document reuses the terminology defined in [RFC6707].\n
      \  Additionally, the following terms are used throughout this document\n   and
      are defined as follows:\n   o  Object - a collection of properties.\n   o  Property
      - a key and value pair where the key is a property name\n      and the value
      is the property value or another object.\n   This document uses the phrase \"[Object]
      A contains [Object] B\" for\n   simplicity when a strictly accurate phrase would
      be \"[Object] A\n   contains or references (via a Link object) [Object] B\".\n
      \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n
      \  \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in
      this\n   document are to be interpreted as described in [RFC2119].\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  Supported Metadata Capabilities\n   Only the metadata for a small set
      of initial capabilities is\n   specified in this document.  This set provides
      the minimum amount of\n   metadata for basic CDN interoperability while still
      meeting the\n   requirements set forth by [RFC7337].\n   The following high-level
      functionality can be configured via the CDNI\n   Metadata objects specified
      in Section 4:\n   o  Acquisition Source: Metadata for allowing a dCDN to fetch
      content\n      from a uCDN.\n   o  Delivery Access Control: Metadata for restricting
      (or permitting)\n      access to content based on any of the following factors:\n
      \     *  Location\n      *  Time window\n      *  Delivery protocol\n   o  Delivery
      Authorization: Metadata for authorizing dCDN User Agent\n      requests.\n   o
      \ Cache Control: Metadata for controlling cache behavior of\n      the dCDN.\n
      \  The metadata encoding described by this document is extensible in\n   order
      to allow for future additions to this list.\n   The set of metadata specified
      in this document covers the initial\n   capabilities above.  It is only intended
      to support CDNI for the\n   delivery of content by a dCDN using HTTP/1.1 [RFC7230]
      and for a dCDN\n   to be able to acquire content from a uCDN using either HTTP/1.1
      or\n   HTTP/1.1 over Transport Layer Security (TLS) [RFC2818].\n   Supporting
      CDNI for the delivery of content using unencrypted HTTP/2\n   [RFC7540] (as
      well as for a dCDN to acquire content using unencrypted\n   HTTP/2 or HTTP/2
      over TLS) requires the registration of these\n   protocol names in the \"CDNI
      Metadata Protocol Types\" registry\n   (Section 7.3).\n   Delivery of content
      using HTTP/1.1 over TLS or HTTP/2 over TLS SHOULD\n   follow the guidelines
      set forth in [RFC7525].  Offline configuration\n   of TLS parameters between
      CDNs is beyond the scope of this document.\n"
    title: 1.2.  Supported Metadata Capabilities
  title: 1.  Introduction
- contents:
  - "2.  Design Principles\n   The CDNI Metadata interface was designed to achieve
    the following\n   objectives:\n   1.  Cacheability of CDNI Metadata objects;\n
    \  2.  Deterministic mapping from redirection requests and content\n       requests
    to CDNI Metadata properties;\n   3.  Support for DNS redirection as well as application-specific\n
    \      redirection (for example, HTTP redirection);\n   4.  Minimal duplication
    of CDNI Metadata; and\n   5.  Leveraging of existing protocols.\n   Cacheability
    can decrease the latency of acquiring metadata while\n   maintaining its freshness
    and can therefore decrease the latency of\n   serving content requests and redirection
    requests, without\n   sacrificing accuracy.  The CDNI Metadata interface uses
    HTTP and its\n   existing caching mechanisms to achieve CDNI Metadata cacheability.\n
    \  Deterministic mapping from content to metadata properties eliminates\n   ambiguity
    and ensures that policies are applied consistently by all\n   dCDNs.\n   Support
    for both HTTP and DNS redirection ensures that the CDNI\n   Metadata meets the
    same design principles for both HTTP-based and\n   DNS-based redirection schemes.\n
    \  Minimal duplication of CDNI Metadata improves storage efficiency in\n   the
    CDNs.\n   Leveraging existing protocols avoids reinventing common mechanisms\n
    \  such as data structure encoding (by leveraging I-JSON (Internet JSON)\n   [RFC7493])
    and data transport (by leveraging HTTP [RFC7230]).\n"
  title: 2.  Design Principles
- contents:
  - "3.  CDNI Metadata Object Model\n   The CDNI Metadata object model describes a
    data structure for mapping\n   redirection requests and content requests to metadata
    properties.\n   Metadata properties describe how to acquire content from a uCDN,\n
    \  authorize access to content, and deliver content from a dCDN.  The\n   object
    model relies on the assumption that these metadata properties\n   can be grouped
    based on the hostname of the content and subsequently\n   on the resource path
    (URI) of the content.  The object model\n   associates a set of CDNI Metadata
    properties with a hostname to form\n   a default set of metadata properties for
    content delivered on behalf\n   of that hostname.  That default set of metadata
    properties can be\n   overridden by properties that apply to specific paths within
    a URI.\n   Different hostnames and URI paths will be associated with different\n
    \  sets of CDNI Metadata properties in order to describe the required\n   behavior
    when a dCDN Surrogate or request router is processing User\n   Agent requests
    for content at that hostname and URI path.  As a\n   result of this structure,
    significant commonality could exist between\n   the CDNI Metadata properties specified
    for different hostnames,\n   different URI paths within a hostname, and different
    URI paths on\n   different hostnames.  For example, the definition of which User
    Agent\n   IP addresses should be grouped together into a single network or\n   geographic
    location is likely to be common for a number of different\n   hostnames; although
    a uCDN is likely to have several different\n   policies configured to express
    geo-blocking rules, it is likely that\n   a single geo-blocking policy could be
    applied to multiple hostnames\n   delivered through the CDN.\n   In order to enable
    the CDNI Metadata for a given hostname and URI\n   path to be decomposed into
    reusable sets of CDNI Metadata properties,\n   the CDNI Metadata interface splits
    the CDNI Metadata into separate\n   objects.  Efficiency is improved by enabling
    a single CDNI Metadata\n   object (that is shared across hostnames and/or URI
    paths) to be\n   retrieved and stored by a dCDN once, even if it is referenced
    by the\n   CDNI Metadata for multiple hostnames and/or URI paths.\n   Important
    Note: Any CDNI Metadata object A that contains another CDNI\n   Metadata object
    B can include a Link object specifying a URI that can\n   be used to retrieve
    object B, instead of embedding object B within\n   object A.  The remainder of
    this document uses the phrase \"[Object] A\n   contains [Object] B\" for simplicity
    when a strictly accurate phrase\n   would be \"[Object] A contains or references
    (via a Link object)\n   [Object] B\".  It is generally a deployment choice for
    the uCDN\n   implementation to decide when to embed CDNI Metadata objects and
    when\n   to reference separate resources via Link objects.\n   Section 3.1 introduces
    a high-level description of the HostIndex,\n   HostMatch, HostMetadata, PathMatch,
    PatternMatch, and PathMetadata\n   objects, and describes the relationships between
    them.\n   Section 3.2 introduces a high-level description of the CDNI\n   GenericMetadata
    object, which represents the level at which CDNI\n   Metadata override occurs
    between HostMetadata and PathMetadata\n   objects.\n   Section 4 describes in
    detail the specific CDNI Metadata objects and\n   properties specified by this
    document that can be contained within a\n   CDNI GenericMetadata object.\n"
  - contents:
    - "3.1.  HostIndex, HostMatch, HostMetadata, PathMatch, PatternMatch, and\n      PathMetadata
      Objects\n   The relationships between the HostIndex, HostMatch, HostMetadata,\n
      \  PathMatch, PatternMatch, and PathMetadata objects are described in\n   Figure
      1.\n   +---------+      +---------+      +------------+\n   |HostIndex+-(*)->|HostMatch+-(1)->|HostMetadata+-------(*)------+\n
      \  +---------+      +---------+      +------+-----+                |\n                                            |
      \                     |\n                                           (*)                     |\n
      \                                           |                      V\n   -->
      Contains or references               V         *****************\n   (1) One
      and only one                +---------+    *GenericMetadata*\n   (*) Zero or
      more               +--->|PathMatch|    *     Objects   *\n                                  |
      \   +----+---++    *****************\n                                  |         |
      \  |                  ^\n                                 (*)       (1) (1)
      +------------+  |\n                                  |         |   +->|PatternMatch|
      \ |\n                                  |         V      +------------+  |\n
      \                                 |  +------------+                |\n                                  +--+PathMetadata+-------(*)------+\n
      \                                    +------------+\n           Figure 1: Relationships
      between CDNI Metadata Objects\n                         (Diagram Representation)\n
      \  A HostIndex object (see Section 4.1.1) contains an array of HostMatch\n   objects
      (see Section 4.1.2) that contain hostnames (and/or IP\n   addresses) for which
      content requests might be delegated to the dCDN.\n   The HostIndex is the starting
      point for accessing the uCDN CDNI\n   Metadata data store.  It enables the dCDN
      to deterministically\n   discover which CDNI Metadata objects it requires in
      order to deliver\n   a given piece of content.\n   The HostIndex links hostnames
      (and/or IP addresses) to HostMetadata\n   objects (see Section 4.1.3) via HostMatch
      objects.  A HostMatch\n   object defines a hostname (or IP address) to match
      against a\n   requested host and contains a HostMetadata object.\n   HostMetadata
      objects contain the default GenericMetadata objects (see\n   Section 4.1.7)
      required to serve content for that host.  When looking\n   up CDNI Metadata,
      the dCDN looks up the requested hostname (or IP\n   address) against the HostMatch
      entries in the HostIndex; from there,\n   it can find HostMetadata, which describes
      the default metadata\n   properties for each host as well as PathMetadata objects
      (see\n   Section 4.1.6), via PathMatch objects (see Section 4.1.4).  PathMatch\n
      \  objects define patterns, contained inside PatternMatch objects (see\n   Section
      4.1.5), to match against the requested URI path.\n   PatternMatch objects contain
      the pattern strings and flags that\n   describe the URI path to which a PathMatch
      applies.  PathMetadata\n   objects contain the GenericMetadata objects that
      apply to content\n   requests matching the defined URI path pattern.  PathMetadata\n
      \  properties override properties previously defined in HostMetadata or\n   less-specific
      PathMatch paths.  PathMetadata objects can contain\n   additional PathMatch
      objects to recursively define more-specific URI\n   paths to which GenericMetadata
      properties might be applied.\n   A GenericMetadata object contains individual
      CDNI Metadata objects\n   that define the specific policies and attributes needed
      to properly\n   deliver the associated content.  For example, a GenericMetadata\n
      \  object could describe the source from which a CDN can acquire a piece\n   of
      content.  The GenericMetadata object is an atomic unit that can be\n   referenced
      by HostMetadata or PathMetadata objects.\n   For example, if \"example.com\"
      is a content provider, a HostMatch\n   object could include an entry for \"example.com\"
      with the URI of the\n   associated HostMetadata object.  The HostMetadata object
      for\n   \"example.com\" describes the metadata properties that apply to\n   \"example.com\"
      and could contain PathMatches for\n   \"example.com/movies/*\" and \"example.com/music/*\",
      which in turn\n   reference corresponding PathMetadata objects that contain
      the\n   properties for those more-specific URI paths.  The PathMetadata\n   object
      for \"example.com/movies/*\" describes the properties that apply\n   to that
      URI path.  It could also contain a PathMatch object for\n   \"example.com/movies/hd/*\",
      which would reference the corresponding\n   PathMetadata object for the \"example.com/movies/hd/\"
      path prefix.\n   The relationships in Figure 1 are also represented in tabular
      format\n   in Table 1 below.\n   +--------------+----------------------------------------------------+\n
      \  | Data Object  | Objects it contains or references                  |\n   +--------------+----------------------------------------------------+\n
      \  | HostIndex    | 0 or more HostMatch objects.                       |\n   |
      \             |                                                    |\n   | HostMatch
      \   | 1 HostMetadata object.                             |\n   |              |
      \                                                   |\n   | HostMetadata | 0
      or more PathMatch objects.  0 or more            |\n   |              | GenericMetadata
      objects.                           |\n   |              |                                                    |\n
      \  | PathMatch    | 1 PatternMatch object.  1 PathMetadata object.     |\n   |
      \             |                                                    |\n   | PatternMatch
      | Does not contain or reference any other objects.   |\n   |              |
      \                                                   |\n   | PathMetadata | 0
      or more PathMatch objects.  0 or more            |\n   |              | GenericMetadata
      objects.                           |\n   +--------------+----------------------------------------------------+\n
      \          Table 1: Relationships between CDNI Metadata Objects\n                          (Table
      Representation)\n"
    title: 3.1.  HostIndex, HostMatch, HostMetadata, PathMatch, PatternMatch, and
  - contents:
    - "3.2.  Generic CDNI Metadata Objects\n   The HostMetadata and PathMetadata objects
      contain other CDNI Metadata\n   objects that contain properties that describe
      how User Agent requests\n   for content should be processed -- for example,
      where to acquire the\n   content from, authorization rules that should be applied,\n
      \  geo-blocking restrictions, and so on.  Each such CDNI Metadata object\n   is
      a specialization of a CDNI GenericMetadata object.  The\n   GenericMetadata
      object abstracts the basic information required for\n   metadata override and
      metadata distribution, from the specifics of\n   any given property (i.e., property
      semantics, enforcement options,\n   etc.).\n   The GenericMetadata object defines
      the properties contained within it\n   as well as whether or not the properties
      are \"mandatory-to-enforce\".\n   If the dCDN does not understand or support
      a mandatory-to-enforce\n   property, the dCDN MUST NOT serve the content.  If
      the property is\n   not mandatory-to-enforce, then that GenericMetadata object
      can be\n   safely ignored and the content request can be processed in accordance\n
      \  with the rest of the CDNI Metadata.\n   Although a CDN MUST NOT serve content
      to a User Agent if a\n   mandatory-to-enforce property cannot be enforced, it
      could still be\n   safe to redistribute that metadata (the \"safe-to-redistribute\"\n
      \  property) to another CDN without modification.  For example, in the\n   cascaded
      CDN case, a transit CDN (tCDN) could convey\n   mandatory-to-enforce metadata
      to a dCDN.  For metadata that does not\n   require customization or translation
      (i.e., metadata that is\n   safe-to-redistribute), the data representation received
      off the wire\n   MAY be stored and redistributed without being understood or
      supported\n   by the tCDN.  However, for metadata that requires translation,\n
      \  transparent redistribution of the uCDN metadata values might not be\n   appropriate.
      \ Certain metadata can be safely, though perhaps not\n   optimally, redistributed
      unmodified.  For example, a source\n   acquisition address might not be optimal
      if transparently\n   redistributed, but it might still work.\n   Redistribution
      safety MUST be specified for each GenericMetadata\n   property.  If a CDN does
      not understand or support a given\n   GenericMetadata property that is not safe-to-redistribute,
      the CDN\n   MUST set the \"incomprehensible\" flag to true for that GenericMetadata\n
      \  object before redistributing the metadata.  The \"incomprehensible\"\n   flag
      signals to a dCDN that the metadata was not properly transformed\n   by the
      tCDN.  A CDN MUST NOT attempt to use metadata that has been\n   marked as \"incomprehensible\"
      by a uCDN.\n   tCDNs MUST NOT change the value of mandatory-to-enforce or\n
      \  safe-to-redistribute when propagating metadata to a dCDN.  Although a\n   tCDN
      can set the value of \"incomprehensible\" to true, a tCDN MUST NOT\n   change
      the value of \"incomprehensible\" from true to false.\n   Table 2 describes
      the action to be taken by a tCDN for the different\n   combinations of mandatory-to-enforce
      (\"MtE\") and safe-to-redistribute\n   (\"StR\") properties when the tCDN either
      does or does not understand\n   the metadata in question:\n   +-------+-------+------------+--------------------------------------+\n
      \  | MtE   | StR   | Metadata   | Action                               |\n   |
      \      |       | Understood |                                      |\n   |       |
      \      | by tCDN    |                                      |\n   +-------+-------+------------+--------------------------------------+\n
      \  | False | True  | True       | Can serve and redistribute.          |\n   |
      \      |       |            |                                      |\n   | False
      | True  | False      | Can serve and redistribute.          |\n   |       |
      \      |            |                                      |\n   | False | False
      | False      | Can serve.  MUST set                 |\n   |       |       |
      \           | \"incomprehensible\" to true when      |\n   |       |       |
      \           | redistributing.                      |\n   |       |       |            |
      \                                     |\n   | False | False | True       | Can
      serve.  Can redistribute after   |\n   |       |       |            | transforming
      the metadata (if the    |\n   |       |       |            | CDN knows how to
      do so safely);      |\n   |       |       |            | otherwise, MUST set
      \                 |\n   |       |       |            | \"incomprehensible\"
      to true when      |\n   |       |       |            | redistributing.                      |\n
      \  |       |       |            |                                      |\n   |
      True  | True  | True       | Can serve and redistribute.          |\n   |       |
      \      |            |                                      |\n   | True  | True
      \ | False      | MUST NOT serve but can redistribute. |\n   |       |       |
      \           |                                      |\n   | True  | False | True
      \      | Can serve.  Can redistribute after   |\n   |       |       |            |
      transforming the metadata (if the    |\n   |       |       |            | CDN
      knows how to do so safely);      |\n   |       |       |            | otherwise,
      MUST set                  |\n   |       |       |            | \"incomprehensible\"
      to true when      |\n   |       |       |            | redistributing.                      |\n
      \  |       |       |            |                                      |\n   |
      True  | False | False      | MUST NOT serve.  MUST set            |\n   |       |
      \      |            | \"incomprehensible\" to true when      |\n   |       |
      \      |            | redistributing.                      |\n   +-------+-------+------------+--------------------------------------+\n
      \              Table 2: Action to Be Taken by a tCDN for the\n             Different
      Combinations of MtE and StR Properties\n   Table 3 describes the action to be
      taken by a dCDN for the different\n   combinations of mandatory-to-enforce and
      \"incomprehensible\" (Incomp)\n   properties, when the dCDN either does or does
      not understand the\n   metadata in question:\n   +-------+--------+--------------+-----------------------------------+\n
      \  | MtE   | Incomp | Metadata     | Action                            |\n   |
      \      |        | Understood   |                                   |\n   |       |
      \       | by dCDN      |                                   |\n   +-------+--------+--------------+-----------------------------------+\n
      \  | False | False  | True         | Can serve.                        |\n   |
      \      |        |              |                                   |\n   | False
      | True   | True         | Can serve but MUST NOT            |\n   |       |
      \       |              | interpret/apply any metadata      |\n   |       |        |
      \             | marked as \"incomprehensible\".     |\n   |       |        |
      \             |                                   |\n   | False | False  | False
      \       | Can serve.                        |\n   |       |        |              |
      \                                  |\n   | False | True   | False        | Can
      serve but MUST NOT            |\n   |       |        |              | interpret/apply
      any metadata      |\n   |       |        |              | marked as \"incomprehensible\".
      \    |\n   |       |        |              |                                   |\n
      \  | True  | False  | True         | Can serve.                        |\n   |
      \      |        |              |                                   |\n   | True
      \ | True   | True         | MUST NOT serve.                   |\n   |       |
      \       |              |                                   |\n   | True  | False
      \ | False        | MUST NOT serve.                   |\n   |       |        |
      \             |                                   |\n   | True  | True   | False
      \       | MUST NOT serve.                   |\n   +-------+--------+--------------+-----------------------------------+\n
      \              Table 3: Action to Be Taken by a dCDN for the\n            Different
      Combinations of MtE and Incomp Properties\n"
    title: 3.2.  Generic CDNI Metadata Objects
  - contents:
    - "3.3.  Metadata Inheritance and Override\n   In the metadata object model, a
      HostMetadata object can contain\n   multiple PathMetadata objects (via PathMatch
      objects).  Each\n   PathMetadata object can in turn contain other PathMetadata
      objects.\n   HostMetadata and PathMetadata objects form an inheritance tree
      where\n   each node in the tree inherits or overrides the property values set\n
      \  by its parent.\n   GenericMetadata objects of a given type override all GenericMetadata\n
      \  objects of the same type previously defined by any parent object in\n   the
      tree.  GenericMetadata objects of a given type previously defined\n   by a parent
      object in the tree are inherited when no object of the\n   same type is defined
      by the child object.  For example, if\n   HostMetadata for the host \"example.com\"
      contains GenericMetadata\n   objects of types LocationACL and TimeWindowACL
      (where \"ACL\" means\n   \"Access Control List\") while a PathMetadata object
      that applies to\n   \"example.com/movies/*\" defines an alternate GenericMetadata
      object of\n   type TimeWindowACL, then:\n   o  The TimeWindowACL defined in
      the PathMetadata would override the\n      TimeWindowACL defined in the HostMetadata
      for all User Agent\n      requests for content under \"example.com/movies/\",
      and\n   o  The LocationACL defined in the HostMetadata would be inherited for\n
      \     all User Agent requests for content under \"example.com/movies/\".\n   A
      single HostMetadata or PathMetadata object MUST NOT contain\n   multiple GenericMetadata
      objects of the same type.  If an array of\n   GenericMetadata contains objects
      of duplicate types, the receiver\n   MUST ignore all but the first object of
      each type.\n"
    title: 3.3.  Metadata Inheritance and Override
  title: 3.  CDNI Metadata Object Model
- contents:
  - "4.  CDNI Metadata Objects\n   Section 4.1 provides the definitions of each metadata
    object type\n   introduced in Section 3.  These metadata objects are described
    as\n   structural metadata objects, as they provide the structure for host\n   and
    URI path-based inheritance and identify which GenericMetadata\n   objects apply
    to a given User Agent content request.\n   Section 4.2 provides the definitions
    for a base set of core metadata\n   objects that can be contained within a GenericMetadata
    object.  These\n   metadata objects govern how User Agent requests for content
    are\n   handled.  GenericMetadata objects can contain other GenericMetadata\n
    \  objects as properties; these can be referred to as sub-objects.  As\n   with
    all CDNI Metadata objects, the value of the GenericMetadata\n   sub-objects can
    be either a complete serialized representation of the\n   sub-object or a Link
    object that contains a URI that can be\n   dereferenced to retrieve the complete
    serialized representation of\n   the property sub-object.\n   Section 6.5 discusses
    the ability to extend the base set of\n   GenericMetadata objects specified in
    this document with additional\n   standards-based or vendor-specific GenericMetadata
    objects that might\n   be defined in the future in separate documents.\n   dCDNs
    and tCDNs MUST support the parsing of all CDNI Metadata objects\n   specified
    in this document.  A dCDN does not have to implement the\n   underlying functionality
    represented by non-structural\n   GenericMetadata objects (though that might restrict
    the content that\n   a given dCDN will be able to serve).  uCDNs as generators
    of CDNI\n   Metadata only need to support generating the CDNI Metadata that they\n
    \  need in order to express the policies required by the content they\n   are
    describing.  See Section 6.4 for more details on the specific\n   encoding rules
    for CDNI Metadata objects.\n   Note: In the following sections, the term \"mandatory-to-specify\"
    is\n   used to convey which properties MUST be included for a given\n   structural
    or GenericMetadata object.  When mandatory-to-specify is\n   specified as \"Yes\"
    for an individual property, it means that if the\n   object containing that property
    is included in a metadata response,\n   then the mandatory-to-specify property
    MUST also be included\n   (directly or by reference) in the response.  For example,
    a HostMatch\n   property object without a host to match against does not make
    sense;\n   therefore, the \"host\" property is mandatory-to-specify inside a\n
    \  HostMatch object.\n"
  - contents:
    - "4.1.  Definitions of the CDNI Structural Metadata Objects\n   The subsections
      below describe the structural objects introduced in\n   Section 3.1.\n"
    - contents:
      - "4.1.1.  HostIndex\n   The HostIndex object is the entry point into the CDNI
        Metadata\n   hierarchy.  It contains an array of HostMatch objects.  An incoming\n
        \  content request is checked against the hostname (or IP address)\n   specified
        by each of the listed HostMatch objects to find the\n   HostMatch object that
        applies to the request.\n      Property: hosts\n         Description: Array
        of HostMatch objects.  Hosts (HostMatch\n         objects) MUST be evaluated
        in the order they appear, and the\n         first HostMatch object that matches
        the content request being\n         processed MUST be used.\n         Type:
        Array of HostMatch objects\n         Mandatory-to-Specify: Yes.\n   Example
        HostIndex object containing two HostMatch objects, where the\n   first HostMatch
        object is embedded and the second HostMatch object is\n   referenced:\n   {\n
        \    \"hosts\": [\n       {\n         <Properties of embedded HostMatch object>\n
        \      },\n       {\n         \"type\": \"MI.HostMatch\",\n         \"href\":
        \"https://metadata.ucdn.example/hostmatch1234\"\n       }\n     ]\n   }\n"
      title: 4.1.1.  HostIndex
    - contents:
      - "4.1.2.  HostMatch\n   The HostMatch object contains a hostname or IP address
        to match\n   against content requests.  The HostMatch object also contains
        a\n   HostMetadata object to apply if a match is found.\n      Property: host\n
        \        Description: Hostname or IP address and optional port to match\n
        \        against the requested host, i.e., the host and port as\n         described
        in [RFC3986].  In order for a hostname or IP address\n         in a content
        request to match the hostname or IP address in the\n         \"host\" property,
        the value from the content request when\n         converted to lowercase MUST
        be identical to the value of the\n         \"host\" property when converted
        to lowercase.  All\n         implementations MUST support IPv4 addresses encoded
        as\n         specified by the \"IPv4address\" rule in Section 3.2.2 of\n         [RFC3986].
        \ IPv6 addresses MUST be encoded in one of the IPv6\n         address formats
        specified in [RFC5952], although receivers MUST\n         support all IPv6
        address formats specified in [RFC4291].\n         Hostnames MUST conform to
        the Domain Name System (DNS) syntax\n         defined in [RFC1034] and [RFC1123].
        \ Internationalized Domain\n         Names (IDNs) must first be transformed
        to the A-label form\n         [RFC5890] as per [RFC5891].\n         Type:
        Endpoint\n         Mandatory-to-Specify: Yes.\n      Property: host-metadata\n
        \        Description: CDNI Metadata to apply when delivering content\n         that
        matches this host.\n         Type: HostMetadata\n         Mandatory-to-Specify:
        Yes.\n   Example HostMatch object with an embedded HostMetadata object:\n
        \  {\n     \"host\": \"video.example.com\",\n     \"host-metadata\": {\n       <Properties
        of embedded HostMetadata object>\n     }\n   }\n   Example HostMatch object
        referencing (via a Link object; see\n   Section 4.3.1) a HostMetadata object:\n
        \  {\n     \"host\": \"video.example.com\",\n     \"host-metadata\": {\n       \"type\":
        \"MI.HostMetadata\",\n       \"href\": \"https://metadata.ucdn.example/host1234\"\n
        \    }\n   }\n"
      title: 4.1.2.  HostMatch
    - contents:
      - "4.1.3.  HostMetadata\n   A HostMetadata object contains the CDNI Metadata
        properties for\n   content served for a particular host (defined in the HostMatch\n
        \  object) and possibly child PathMatch objects.\n      Property: metadata\n
        \        Description: Array of host-related metadata.\n         Type: Array
        of GenericMetadata objects\n         Mandatory-to-Specify: Yes.\n      Property:
        paths\n         Description: Path-specific rules.  Path patterns (PathMatch\n
        \        objects) MUST be evaluated in the order they appear, and the\n         first
        (and only the first) PathMatch object that matches the\n         content request
        being processed MUST be used.\n         Type: Array of PathMatch objects\n
        \        Mandatory-to-Specify: No.  Default is that there are no\n         more-specific
        paths to evaluate (i.e., an empty list).\n   Example HostMetadata object containing
        a number of embedded\n   GenericMetadata objects that will describe the default
        metadata for\n   the host and an embedded PathMatch object that contains a
        path for\n   which metadata exists that overrides the default metadata for
        the\n   host:\n   {\n     \"metadata\": [\n       {\n         <Properties
        of first embedded GenericMetadata object>\n       },\n       {\n         <Properties
        of second embedded GenericMetadata object>\n       },\n    ...\n       {\n
        \        <Properties of Nth embedded GenericMetadata object>\n       }\n     ],\n
        \    \"paths\": [\n       {\n         <Properties of embedded PathMatch object>\n
        \      }\n     ]\n   }\n"
      title: 4.1.3.  HostMetadata
    - contents:
      - "4.1.4.  PathMatch\n   A PathMatch object contains a PatternMatch object with
        a path to\n   match against a resource's URI path, as well as how to handle
        URI\n   query parameters.  The PathMatch object also contains a PathMetadata\n
        \  object with GenericMetadata to apply if the resource's URI matches\n   the
        pattern within the PatternMatch object.\n      Property: path-pattern\n         Description:
        Pattern to match against the requested\n         resource's URI.\n         Type:
        PatternMatch\n         Mandatory-to-Specify: Yes.\n      Property: path-metadata\n
        \        Description: CDNI Metadata to apply when delivering content\n         that
        matches the associated PatternMatch.\n         Type: PathMetadata\n         Mandatory-to-Specify:
        Yes.\n   Example PathMatch object referencing the PathMetadata object to use\n
        \  for URIs that match the case-sensitive URI path pattern \"/movies/*\"\n
        \  (contained within an embedded PatternMatch object):\n   {\n     \"path-pattern\":
        {\n       \"pattern\": \"/movies/*\",\n       \"case-sensitive\": true\n     },\n
        \    \"path-metadata\": {\n         \"type\": \"MI.PathMetadata\",\n         \"href\":
        \"https://metadata.ucdn.example/host1234/pathDCE\"\n     }\n   }\n"
      title: 4.1.4.  PathMatch
    - contents:
      - "4.1.5.  PatternMatch\n   A PatternMatch object contains the pattern string
        and flags that\n   describe the pattern expression.\n      Property: pattern\n
        \        Description: A pattern for matching against the URI path, i.e.,\n
        \        against the path-absolute [RFC3986].  The pattern can contain\n         the
        wildcards \"*\" and \"?\", where \"*\" matches any sequence of\n         pchar
        [RFC3986] or \"/\" characters (including the empty string)\n         and \"?\"
        matches exactly one pchar character.  The three\n         literals \"$\",
        \"*\", and \"?\"  MUST be escaped as \"$$\", \"$*\", and\n         \"$?\"
        (where \"$\" is the designated escape character).  All other\n         characters
        are treated as literals.\n         Type: String\n         Mandatory-to-Specify:
        Yes.\n      Property: case-sensitive\n         Description: Flag indicating
        whether or not case-sensitive\n         matching should be used.  Note: Case
        insensitivity applies to\n         ALPHA characters in the URI path prior
        to percent-decoding\n         [RFC3986].\n         Type: Boolean\n         Mandatory-to-Specify:
        No.  Default is case-insensitive match\n         (i.e., a value of False).\n
        \  Example PatternMatch object that matches the case-sensitive URI path\n
        \  pattern \"/movies/*\":\n   {\n     \"pattern\": \"/movies/*\",\n     \"case-sensitive\":
        true\n   }\n"
      title: 4.1.5.  PatternMatch
    - contents:
      - "4.1.6.  PathMetadata\n   A PathMetadata object contains the CDNI Metadata
        properties for\n   content requests that match against the associated URI
        path (defined\n   in a PathMatch object).\n   Note that if DNS-based redirection
        is employed, then a dCDN will be\n   unable to evaluate any metadata at the
        PathMetadata level or below\n   because only the hostname of the content request
        is available at\n   Request Routing time.  dCDNs SHOULD still process all
        PathMetadata\n   for the host before responding to the redirection request
        to detect\n   if any unsupported metadata is specified.  If any metadata not\n
        \  supported by the dCDN is marked as mandatory-to-enforce, the dCDN\n   SHOULD
        NOT accept the content redirection request, in order to avoid\n   receiving
        content requests that it will not be able to satisfy/serve.\n      Property:
        metadata\n         Description: Array of path-related metadata.\n         Type:
        Array of GenericMetadata objects\n         Mandatory-to-Specify: Yes.\n      Property:
        paths\n         Description: Path-specific rules.  Path patterns (PathMatch\n
        \        objects) MUST be evaluated in the order they appear, and the\n         first
        (and only the first) PathMatch object that matches the\n         content request
        being processed MUST be used.\n         Type: Array of PathMatch objects\n
        \        Mandatory-to-Specify: No.  Default is that there are no\n         more-specific
        paths to evaluate (i.e., an empty list).\n   Example PathMetadata object containing
        a number of embedded\n   GenericMetadata objects that describe the metadata
        to apply for the\n   URI path defined in the parent PathMatch object, as well
        as a\n   more-specific PathMatch object.\n   {\n     \"metadata\": [\n       {\n
        \        <Properties of first embedded GenericMetadata object>\n       },\n
        \      {\n         <Properties of second embedded GenericMetadata object>\n
        \      },\n    ...\n       {\n         <Properties of Nth embedded GenericMetadata
        object>\n       }\n     ],\n     \"paths\": [\n       {\n         <Properties
        of embedded PathMatch object>\n       }\n     ]\n   }\n"
      title: 4.1.6.  PathMetadata
    - contents:
      - "4.1.7.  GenericMetadata\n   A GenericMetadata object is a wrapper for managing
        individual CDNI\n   Metadata properties in an opaque manner.\n      Property:
        generic-metadata-type\n         Description: Case-insensitive CDNI Metadata
        object type.\n         Type: String containing the CDNI Payload Type [RFC7736]
        of the\n         object contained in the generic-metadata-value property (see\n
        \        Table 4).\n         Mandatory-to-Specify: Yes.\n      Property: generic-metadata-value\n
        \        Description: CDNI Metadata object.\n         Type: Format/Type is
        defined by the value of the\n         generic-metadata-type property above.\n
        \        Note: generic-metadata-values MUST NOT name any properties\n         \"href\"
        (see Section 4.3.1).\n         Mandatory-to-Specify: Yes.\n      Property:
        mandatory-to-enforce\n         Description: Flag identifying whether or not
        the enforcement of\n         the property metadata is required.\n         Type:
        Boolean\n         Mandatory-to-Specify: No.  Default is to treat metadata
        as\n         mandatory-to-enforce (i.e., a value of True).\n      Property:
        safe-to-redistribute\n         Description: Flag identifying whether or not
        the property\n         metadata can be safely redistributed without modification.\n
        \        Type: Boolean\n         Mandatory-to-Specify: No.  Default is to
        allow transparent\n         redistribution (i.e., a value of True).\n      Property:
        incomprehensible\n         Description: Flag identifying whether or not any
        CDN in the\n         chain of delegation has failed to understand and/or failed
        to\n         properly transform this metadata object.  Note: This flag only\n
        \        applies to metadata objects whose safe-to-redistribute property\n
        \        has a value of False.\n         Type: Boolean\n         Mandatory-to-Specify:
        No.  Default is comprehensible (i.e., a\n         value of False).\n   Example
        GenericMetadata object containing a metadata object that\n   applies to the
        applicable URI path and/or host (within a parent\n   PathMetadata and/or HostMetadata
        object, respectively):\n {\n   \"mandatory-to-enforce\": true,\n   \"safe-to-redistribute\":
        true,\n   \"incomprehensible\": false,\n   \"generic-metadata-type\": <CDNI
        Payload Type of this metadata object>,\n   \"generic-metadata-value\":\n     {\n
        \      <Properties of this metadata object>\n     }\n }\n"
      title: 4.1.7.  GenericMetadata
    title: 4.1.  Definitions of the CDNI Structural Metadata Objects
  - contents:
    - "4.2.  Definitions of the Initial Set of CDNI GenericMetadata Objects\n   The
      objects defined below are intended to be used in the\n   GenericMetadata object's
      generic-metadata-value field as defined in\n   Section 4.1.7, and their generic-metadata-type
      property MUST be set\n   to the appropriate CDNI Payload Type as defined in
      Table 4.\n"
    - contents:
      - "4.2.1.  SourceMetadata\n   Source metadata provides the dCDN with information
        about content\n   acquisition, i.e., how to contact a uCDN Surrogate or an
        origin\n   server to obtain the content to be served.  The sources are not\n
        \  necessarily the actual origin servers operated by the Content Service\n
        \  Provider (CSP) but might be a set of Surrogates in the uCDN.\n      Property:
        sources\n         Description: Sources from which the dCDN can acquire content,\n
        \        listed in order of preference.\n         Type: Array of Source objects
        (see Section 4.2.1.1)\n         Mandatory-to-Specify: No.  Default is to use
        static\n         configuration, out-of-band from the CDNI Metadata interface.\n
        \  Example SourceMetadata object (which contains two Source objects)\n   that
        describes which servers the dCDN should use for acquiring\n   content for
        the applicable URI path and/or host:\n   {\n     \"generic-metadata-type\":
        \"MI.SourceMetadata\",\n     \"generic-metadata-value\":\n       {\n         \"sources\":
        [\n           {\n             \"endpoints\": [\n               \"a.service123.ucdn.example\",\n
        \              \"b.service123.ucdn.example\"\n               ],\n             \"protocol\":
        \"http/1.1\"\n           },\n           {\n             \"endpoints\": [\"origin.service123.example\"],\n
        \            \"protocol\": \"http/1.1\"\n           }\n         ]\n       }\n
        \  }\n"
      - contents:
        - "4.2.1.1.  Source\n   A Source object describes the source to be used by
          the dCDN for\n   content acquisition (e.g., a Surrogate within the uCDN
          or an\n   alternate origin server), the protocol to be used, and any\n   authentication
          method to be used when contacting that source.\n   Endpoints within a Source
          object MUST be treated as equivalent/equal.\n   A uCDN can specify an array
          of sources, ordered by preference, within\n   a SourceMetadata object.  Then,
          for each Source object ranked by\n   preference, a uCDN can specify an array
          of endpoints that are\n   equivalent (e.g., a pool of servers that are not
          behind a load\n   balancer).\n      Property: acquisition-auth\n         Description:
          Authentication method to use when requesting\n         content from this
          source.\n         Type: Auth (see Section 4.2.7)\n         Mandatory-to-Specify:
          No.  Default is no authentication\n         required.\n      Property: endpoints\n
          \        Description: Origins from which the dCDN can acquire content.\n
          \        If multiple endpoints are specified, they are all equal, i.e.,\n
          \        the list is not ordered by preference.\n         Type: Array of
          Endpoint objects (see Section 4.3.3)\n         Mandatory-to-Specify: Yes.\n
          \     Property: protocol\n         Description: Network retrieval protocol
          to use when requesting\n         content from this source.\n         Type:
          Protocol (see Section 4.3.2)\n         Mandatory-to-Specify: Yes.\n   Example
          Source object that describes a pair of endpoints (servers)\n   the dCDN
          can use for acquiring content for the applicable host and/or\n   URI path:\n
          \  {\n     \"endpoints\": [\n       \"a.service123.ucdn.example\",\n       \"b.service123.ucdn.example\"\n
          \    ],\n     \"protocol\": \"http/1.1\"\n   }\n"
        title: 4.2.1.1.  Source
      title: 4.2.1.  SourceMetadata
    - contents:
      - "4.2.2.  LocationACL Metadata\n   LocationACL metadata defines which locations
        a User Agent needs to be\n   in, in order to be able to receive the associated
        content.\n   A LocationACL that does not include a \"locations\" property
        results in\n   an action of \"allow all\", meaning that delivery can be performed\n
        \  regardless of the User Agent's location; otherwise, a CDN MUST take\n   the
        action from the first footprint to match against the User Agent's\n   location.
        \ If two or more footprints overlap, the first footprint\n   that matches
        against the User Agent's location determines the action\n   a CDN MUST take.
        \ If the \"locations\" property is included but is\n   empty or if none of
        the listed footprints match the User Agent's\n   location, then the result
        is an action of \"deny\".\n   Although the LocationACL, TimeWindowACL (see
        Section 4.2.3), and\n   ProtocolACL (see Section 4.2.4) are independent GenericMetadata\n
        \  objects, they can provide conflicting information to a dCDN, e.g., a\n
        \  content request that is simultaneously allowed based on the\n   LocationACL
        and denied based on the TimeWindowACL.  The dCDN MUST use\n   the logical
        AND of all ACLs (where \"allow\" is true and \"deny\" is\n   false) to determine
        whether or not a request should be allowed.\n      Property: locations\n         Description:
        ACL that allows or denies (blocks) delivery based\n         on the User Agent's
        location.\n         Type: Array of LocationRule objects (see Section 4.2.2.1)\n
        \        Mandatory-to-Specify: No.  Default is to allow all locations.\n   Example
        LocationACL object that allows the dCDN to deliver content to\n   any location
        / IP address:\n   {\n     \"generic-metadata-type\": \"MI.LocationACL\",\n
        \    \"generic-metadata-value\":\n       {\n       }\n   }\n   Example LocationACL
        object (which contains a LocationRule object that\n   in turn contains a Footprint
        object) that only allows the dCDN to\n   deliver content to User Agents in
        the USA:\n   {\n     \"generic-metadata-type\": \"MI.LocationACL\",\n     \"generic-metadata-value\":\n
        \      {\n         \"locations\": [\n           {\n             \"action\":
        \"allow\",\n             \"footprints\": [\n               {\n                 \"footprint-type\":
        \"countrycode\",\n                 \"footprint-value\": [\"us\"]\n               }\n
        \            ]\n           }\n         ]\n       }\n   }\n"
      - contents:
        - "4.2.2.1.  LocationRule\n   A LocationRule contains or references an array
          of Footprint objects\n   and the corresponding action.\n      Property:
          footprints\n         Description: Array of footprints to which the rule
          applies.\n         Type: Array of Footprint objects (see Section 4.2.2.2)\n
          \        Mandatory-to-Specify: Yes.\n      Property: action\n         Description:
          Defines whether the rule specifies locations to\n         allow or deny.\n
          \        Type: Enumeration [allow|deny] encoded as a lowercase string\n
          \        Mandatory-to-Specify: No.  Default is \"deny\".\n   Example LocationRule
          object (which contains a Footprint object) that\n   allows the dCDN to deliver
          content to clients in the USA:\n   {\n     \"action\": \"allow\",\n     \"footprints\":
          [\n       {\n         \"footprint-type\": \"countrycode\",\n         \"footprint-value\":
          [\"us\"]\n       }\n     ]\n   }\n"
        title: 4.2.2.1.  LocationRule
      - contents:
        - "4.2.2.2.  Footprint\n   A Footprint object describes the footprint to which
          a LocationRule\n   can be applied, e.g., an IPv4 address range or a geographic
          location.\n      Property: footprint-type\n         Description: Registered
          footprint type (see Section 7.2).  The\n         footprint types specified
          by this document are \"ipv4cidr\"\n         (IPv4CIDR; see Section 4.3.5),
          \"ipv6cidr\" (IPv6CIDR; see\n         Section 4.3.6), \"asn\" (Autonomous
          System Number; see\n         Section 4.3.7), and \"countrycode\" (Country
          Code; see\n         Section 4.3.8).\n         Type: Lowercase string\n         Mandatory-to-Specify:
          Yes.\n      Property: footprint-value\n         Description: Array of footprint
          values conforming to the\n         specification associated with the registered
          footprint type.\n         Footprint values can be simple strings (e.g.,
          IPv4CIDR,\n         IPv6CIDR, ASN, and Country Code); however, other Footprint\n
          \        objects can be defined in the future, along with a more complex\n
          \        encoding (e.g., GPS coordinate tuples).\n         Type: Array of
          footprints\n         Mandatory-to-Specify: Yes.\n   Example Footprint object
          describing a footprint covering the USA:\n   {\n     \"footprint-type\":
          \"countrycode\",\n     \"footprint-value\": [\"us\"]\n   }\n   Example Footprint
          object describing a footprint covering the IP\n   address ranges 192.0.2.0/24
          and 198.51.100.0/24:\n   {\n     \"footprint-type\": \"ipv4cidr\",\n     \"footprint-value\":
          [\"192.0.2.0/24\", \"198.51.100.0/24\"]\n   }\n   Example Footprint object
          describing a footprint covering the IP\n   address ranges 2001:db8::/32:\n
          \  {\n     \"footprint-type\": \"ipv6cidr\",\n     \"footprint-value\":
          [\"2001:db8::/32\"]\n   }\n   Example Footprint object describing a footprint
          covering the\n   autonomous system 64496:\n   {\n     \"footprint-type\":
          \"asn\",\n     \"footprint-value\": [\"as64496\"]\n   }\n"
        title: 4.2.2.2.  Footprint
      title: 4.2.2.  LocationACL Metadata
    - contents:
      - "4.2.3.  TimeWindowACL\n   TimeWindowACL metadata defines time-based restrictions.\n
        \  A TimeWindowACL that does not include a \"times\" property results in\n
        \  an action of \"allow all\", meaning that delivery can be performed\n   regardless
        of the time of the User Agent's request; otherwise, a CDN\n   MUST take the
        action from the first window to match against the\n   current time.  If two
        or more windows overlap, the first window that\n   matches against the current
        time determines the action a CDN MUST\n   take.  If the \"times\" property
        is included but is empty or if none of\n   the listed windows match the current
        time, then the result is an\n   action of \"deny\".\n   Although the LocationACL
        (see Section 4.2.2), TimeWindowACL, and\n   ProtocolACL (see Section 4.2.4)
        are independent GenericMetadata\n   objects, they can provide conflicting
        information to a dCDN, e.g.,\n   a content request that is simultaneously
        allowed based on the\n   LocationACL and denied based on the TimeWindowACL.
        \ The dCDN MUST use\n   the logical AND of all ACLs (where \"allow\" is true
        and \"deny\" is\n   false) to determine whether or not a request should be
        allowed.\n      Property: times\n         Description: ACL that allows or
        denies (blocks) delivery based\n         on the time of a User Agent's request.\n
        \        Type: Array of TimeWindowRule objects (see Section 4.2.3.1)\n         Mandatory-to-Specify:
        No.  Default is to allow all time\n         windows.\n   Example TimeWindowACL
        object (which contains a TimeWindowRule object\n   that in turn contains a
        TimeWindow object) that only allows the dCDN\n   to deliver content to clients
        between 09:00 01/01/2000 UTC and 17:00\n   01/01/2000 UTC:\n   {\n     \"generic-metadata-type\":
        \"MI.TimeWindowACL\",\n     \"generic-metadata-value\":\n       {\n         \"times\":
        [\n           {\n             \"action\": \"allow\",\n             \"windows\":
        [\n               {\n                 \"start\": 946717200,\n                 \"end\":
        946746000\n               }\n             ]\n           }\n         ]\n       }\n
        \  }\n"
      - contents:
        - "4.2.3.1.  TimeWindowRule\n   A TimeWindowRule contains or references an
          array of TimeWindow\n   objects and the corresponding action.\n      Property:
          windows\n         Description: Array of time windows to which the rule applies.\n
          \        Type: Array of TimeWindow objects (see Section 4.2.3.2)\n         Mandatory-to-Specify:
          Yes.\n      Property: action\n         Description: Defines whether the
          rule specifies time windows to\n         allow or deny.\n         Type:
          Enumeration [allow|deny] encoded as a lowercase string\n         Mandatory-to-Specify:
          No.  Default is \"deny\".\n   Example TimeWindowRule object (which contains
          a TimeWindow object)\n   that only allows the dCDN to deliver content to
          clients between 09:00\n   01/01/2000 UTC and 17:00 01/01/2000 UTC:\n   {\n
          \    \"action\": \"allow\",\n     \"windows\": [\n       {\n         \"start\":
          946717200,\n         \"end\": 946746000\n       }\n     ]\n   }\n"
        title: 4.2.3.1.  TimeWindowRule
      - contents:
        - "4.2.3.2.  TimeWindow\n   A TimeWindow object describes a time range that
          can be applied by a\n   TimeWindowACL, e.g., start 946717200 (i.e., 09:00
          01/01/2000 UTC),\n   end: 946746000 (i.e., 17:00 01/01/2000 UTC).\n      Property:
          start\n         Description: The start time of the window.\n         Type:
          Time (see Section 4.3.4)\n         Mandatory-to-Specify: Yes.\n      Property:
          end\n         Description: The end time of the window.\n         Type: Time
          (see Section 4.3.4)\n         Mandatory-to-Specify: Yes.\n   Example TimeWindow
          object that describes a time window from 09:00\n   01/01/2000 UTC to 17:00
          01/01/2000 UTC:\n   {\n     \"start\": 946717200,\n     \"end\": 946746000\n
          \  }\n"
        title: 4.2.3.2.  TimeWindow
      title: 4.2.3.  TimeWindowACL
    - contents:
      - "4.2.4.  ProtocolACL Metadata\n   ProtocolACL metadata defines delivery protocol
        restrictions.\n   A ProtocolACL that does not include a protocol-acl property
        results\n   in an action of \"allow all\", meaning that delivery can be performed\n
        \  regardless of the protocol in the User Agent's request; otherwise, a\n
        \  CDN MUST take the action from the first protocol to match against the\n
        \  request protocol.  If two or more request protocols overlap, the\n   first
        protocol that matches the request protocol determines the\n   action a CDN
        MUST take.  If the protocol-acl property is included but\n   is empty or if
        none of the listed protocols match the request\n   protocol, then the result
        is an action of \"deny\".\n   Although the LocationACL (see Section 4.2.2),
        TimeWindowACL (see\n   Section 4.2.3), and ProtocolACL are independent GenericMetadata\n
        \  objects, they can provide conflicting information to a dCDN, e.g., a\n
        \  content request that is simultaneously allowed based on the\n   ProtocolACL
        and denied based on the TimeWindowACL.  The dCDN MUST use\n   the logical
        AND of all ACLs (where \"allow\" is true and \"deny\" is\n   false) to determine
        whether or not a request should be allowed.\n      Property: protocol-acl\n
        \        Description: ACL that allows or denies (blocks) delivery based\n
        \        on delivery protocol.\n         Type: Array of ProtocolRule objects
        (see Section 4.2.4.1)\n         Mandatory-to-Specify: No.  Default is to allow
        all protocols.\n   Example ProtocolACL object (which contains a ProtocolRule
        object)\n   that only allows the dCDN to deliver content using HTTP/1.1:\n
        \  {\n     \"generic-metadata-type\": \"MI.ProtocolACL\",\n     \"generic-metadata-value\":\n
        \      {\n         \"protocol-acl\": [\n           {\n             \"action\":
        \"allow\",\n             \"protocols\": [\"http/1.1\"]\n           }\n         ]\n
        \      }\n   }\n"
      - contents:
        - "4.2.4.1.  ProtocolRule\n   A ProtocolRule contains or references an array
          of Protocol objects\n   and the corresponding action.\n      Property: protocols\n
          \        Description: Array of protocols to which the rule applies.\n         Type:
          Array of Protocol objects (see Section 4.3.2)\n         Mandatory-to-Specify:
          Yes.\n      Property: action\n         Description: Defines whether the
          rule specifies protocols to\n         allow or deny.\n         Type: Enumeration
          [allow|deny] encoded as a lowercase string\n         Mandatory-to-Specify:
          No.  Default is \"deny\".\n   Example ProtocolRule object (which contains
          a Protocol object) that\n   allows the dCDN to deliver content using HTTP/1.1:\n
          \  {\n     \"action\": \"allow\",\n     \"protocols\": [\"http/1.1\"]\n
          \  }\n"
        title: 4.2.4.1.  ProtocolRule
      title: 4.2.4.  ProtocolACL Metadata
    - contents:
      - "4.2.5.  DeliveryAuthorization Metadata\n   Delivery authorization defines
        authorization methods for the delivery\n   of content to User Agents.\n      Property:
        delivery-auth-methods\n         Description: Options for authorizing content
        requests.\n         Delivery for a content request is authorized if any one
        of the\n         authorization methods in the list is satisfied for that\n
        \        request.\n         Type: Array of Auth objects (see Section 4.2.7)\n
        \        Mandatory-to-Specify: No.  Default is no authorization\n         required.\n
        \  Example DeliveryAuthorization object (which contains an Auth object):\n
        \  {\n     \"generic-metadata-type\": \"MI.DeliveryAuthorization\",\n     \"generic-metadata-value\":\n
        \      {\n         \"delivery-auth-methods\": [\n           {\n             \"auth-type\":
        <CDNI Payload Type of this Auth object>,\n             \"auth-value\":\n             {\n
        \              <Properties of this Auth object>\n             }\n           }\n
        \        ]\n       }\n   }\n"
      title: 4.2.5.  DeliveryAuthorization Metadata
    - contents:
      - "4.2.6.  Cache\n   A Cache object describes the cache control parameters to
        be applied\n   to the content by intermediate caches.\n   Cache keys are generated
        from the URI of the content request\n   [RFC7234].  In some cases, a CDN or
        content provider might want\n   certain path segments or query parameters
        to be excluded from the\n   cache key generation.  The Cache object provides
        guidance on what\n   parts of the path and query string to include.\n      Property:
        exclude-path-pattern\n         Description: A pattern for matching against
        the URI path, i.e.,\n         against the path-absolute [RFC3986].  The pattern
        can contain\n         the wildcards \"*\" and \"?\", where \"*\" matches any
        sequence of\n         pchar [RFC3986] or \"/\" characters (including the empty
        string)\n         and \"?\" matches exactly one pchar character.  The three\n
        \        literals \"$\", \"*\", and \"?\"  MUST be escaped as \"$$\", \"$*\",
        and\n         \"$?\" (where \"$\" is the designated escape character).  All
        other\n         characters are treated as literals.  Cache key generation
        MUST\n         only include the portion of the path-absolute that matches
        the\n         wildcard portions of the pattern.  Note: Inconsistency between\n
        \        the PatternMatch pattern (Section 4.1.5) and the\n         exclude-path-pattern
        can result in inefficient caching.\n         Type: String\n         Mandatory-to-Specify:
        No.  Default is to use the full URI\n         path-absolute to generate the
        cache key.\n      Property: include-query-strings\n         Description: Allows
        a Surrogate to specify the URI query string\n         parameters [RFC3986]
        to include when comparing the requested\n         URI against the URIs in
        its cache for equivalence.  Matching\n         query parameters MUST be case
        insensitive.  If all query\n         parameters should be ignored, then the
        list MUST be specified\n         and MUST be empty.  If a query parameter
        appears multiple times\n         in the query string, each instance value
        MUST be aggregated\n         prior to comparison.  For consistent cache key
        generation,\n         query parameters SHOULD be evaluated in the order specified
        in\n         this array.\n         Type: Array of strings\n         Mandatory-to-Specify:
        No.  Default is to consider all query\n         string parameters when comparing
        URIs.\n   Example Cache object that instructs the dCDN to use the full URI
        path\n   and ignore all query parameters:\n   {\n     \"generic-metadata-type\":
        \"MI.Cache\",\n     \"generic-metadata-value\":\n     {\n       \"include-query-strings\":
        []\n     }\n   }\n   Example Cache object that instructs the dCDN to exclude
        the \"CDNX\"\n   path prefix and only include the (case-insensitive) query
        parameters\n   named \"mediaid\" and \"providerid\":\n   {\n     \"generic-metadata-type\":
        \"MI.Cache\",\n     \"generic-metadata-value\":\n     {\n       \"exclude-path-pattern\":
        \"/CDNX/*\",\n       \"include-query-strings\": [\"mediaid\", \"providerid\"]\n
        \    }\n   }\n   Example Cache object that instructs the dCDN to exclude the
        \"CDNX\"\n   path prefix but includes all query parameters:\n   {\n     \"generic-metadata-type\":
        \"MI.Cache\",\n     \"generic-metadata-value\":\n     {\n       \"exclude-path-pattern\":
        \"/CDNX/*\"\n     }\n   }\n"
      title: 4.2.6.  Cache
    - contents:
      - "4.2.7.  Auth\n   An Auth object defines authentication and authorization
        methods to be\n   used during content acquisition and content delivery, respectively.\n
        \  Note: This document does not define any Auth methods.  Individual\n   Auth
        methods are being defined separately (e.g., URI Signing\n   [CDNI-URI-SIGNING]).
        \ The GenericMetadata object that contains Auth\n   objects is defined herein
        for convenience and so as not to be\n   specific to any particular Auth method.\n
        \     Property: auth-type\n         Description: Auth type (The CDNI Payload
        Type [RFC7736] of the\n         GenericMetadata object contained in the auth-value
        property).\n         Type: String\n         Mandatory-to-Specify: Yes.\n      Property:
        auth-value\n         Description: An object conforming to the specification\n
        \        associated with the Auth type.\n         Type: GenericMetadata object\n
        \        Mandatory-to-Specify: Yes.\n   Example Auth object:\n   {\n     \"generic-metadata-type\":
        \"MI.Auth\",\n     \"generic-metadata-value\":\n     {\n       \"auth-type\":
        <CDNI Payload Type of this Auth object>,\n       \"auth-value\":\n         {\n
        \          <Properties of this Auth object>\n         }\n     }\n   }\n"
      title: 4.2.7.  Auth
    - contents:
      - "4.2.8.  Grouping\n   A Grouping object identifies a group of content to which
        a given\n   asset belongs.\n      Property: ccid\n         Description: Content
        Collection IDentifier for an application-\n         specific purpose such
        as logging aggregation.\n         Type: String\n         Mandatory-to-Specify:
        No.  Default is not to apply any\n         grouping.\n   Example Grouping
        object that specifies a Content Collection\n   IDentifier for the content
        associated with the Grouping object's\n   parent HostMetadata and PathMetadata:\n
        \  {\n     \"generic-metadata-type\": \"MI.Grouping\",\n     \"generic-metadata-value\":\n
        \    {\n       \"ccid\": \"ABCD\"\n     }\n   }\n"
      title: 4.2.8.  Grouping
    title: 4.2.  Definitions of the Initial Set of CDNI GenericMetadata Objects
  - contents:
    - "4.3.  CDNI Metadata Simple Data Type Descriptions\n   This section describes
      the simple data types that are used for\n   properties of CDNI Metadata objects.\n"
    - contents:
      - "4.3.1.  Link\n   A Link object can be used in place of any of the objects
        described\n   above.  Link objects can be used to avoid duplication if the
        same\n   metadata information is repeated within the metadata tree.  When
        a\n   Link object replaces another object, its \"href\" property is set to\n
        \  the URI of the resource and its \"type\" property is set to the CDNI\n
        \  Payload Type of the object it is replacing.\n   dCDNs can detect the presence
        of a Link object by detecting the\n   presence of a property named \"href\"
        within the object.  This means\n   that GenericMetadata types MUST NOT contain
        a property named \"href\"\n   because doing so would conflict with the ability
        for dCDNs to detect\n   Link objects being used to reference a GenericMetadata
        object.\n      Property: href\n         Description: The URI of the addressable
        object being\n         referenced.\n         Type: String\n         Mandatory-to-Specify:
        Yes.\n      Property: type\n         Description: The CDNI Payload Type of
        the object being\n         referenced.\n         Type: String\n         Mandatory-to-Specify:
        No.  If the container specifies the type\n         (e.g., the HostIndex object
        contains an array of HostMatch\n         objects, so a Link object in the
        list of HostMatch objects must\n         reference a HostMatch), then it is
        not necessary to explicitly\n         specify a type.\n   Example Link object
        referencing a HostMatch object:\n   {\n     \"type\": \"MI.HostMatch\",\n
        \    \"href\": \"https://metadata.ucdn.example/hostmatch1234\"\n   }\n   Example
        Link object referencing a HostMatch object, without an\n   explicit type,
        inside a HostIndex object:\n   {\n     \"hosts\": [\n       {\n         <Properties
        of embedded HostMatch object>\n       },\n       {\n         \"href\": \"https://metadata.ucdn.example/hostmatch1234\"\n
        \      }\n     ]\n   }\n"
      - contents:
        - "4.3.1.1.  Link Loop Prevention\n   When following a link, CDNI Metadata
          clients SHOULD verify that the\n   CDNI Payload Type of the object retrieved
          matches the expected CDNI\n   Payload Type, as indicated by the Link object
          or containing property.\n   For GenericMetadata objects, type checks will
          prevent self-\n   references; however, incorrect linking can result in circular\n
          \  references for structural metadata objects, specifically PathMatch\n
          \  and PathMetadata objects (Figure 1).  To prevent circular references,\n
          \  CDNI Metadata clients SHOULD verify that no duplicate links occur for\n
          \  PathMatch or PathMetadata objects.\n"
        title: 4.3.1.1.  Link Loop Prevention
      title: 4.3.1.  Link
    - contents:
      - "4.3.2.  Protocol\n   Protocol objects are used to specify protocols (from
        the \"CDNI\n   Metadata Protocol Types\" registry; see Section 7.3) for content\n
        \  acquisition or delivery.\n   Type: String\n   Example:\n   \"http/1.1\"\n"
      title: 4.3.2.  Protocol
    - contents:
      - "4.3.3.  Endpoint\n   A hostname (with optional port) or an IP address (with
        optional\n   port).\n   All implementations MUST support IPv4 addresses encoded
        as specified\n   by the \"IPv4address\" rule in Section 3.2.2 of [RFC3986].
        \ IPv6\n   addresses MUST be encoded in one of the IPv6 address formats\n
        \  specified in [RFC5952], although receivers MUST support all IPv6\n   address
        formats specified in [RFC4291].  Hostnames MUST conform to\n   the Domain
        Name System (DNS) syntax defined in [RFC1034] and\n   [RFC1123].  Internationalized
        Domain Names (IDNs) must first be\n   transformed to the A-label form [RFC5890]
        as per [RFC5891].\n   Type: String\n   Example hostname:\n   \"metadata.ucdn.example\"\n
        \  Example IPv4 address:\n   \"192.0.2.1\"\n   Example IPv6 address (with
        port number):\n   \"[2001:db8::1]:81\"\n"
      title: 4.3.3.  Endpoint
    - contents:
      - "4.3.4.  Time\n   A time value expressed in seconds since the UNIX epoch (i.e.,
        zero\n   hours, zero minutes, zero seconds, on January 1, 1970) Coordinated\n
        \  Universal Time (UTC) [POSIX].\n   Type: Integer\n   Example time representing
        09:00:00 01/01/2000 UTC:\n   946717200\n"
      title: 4.3.4.  Time
    - contents:
      - "4.3.5.  IPv4CIDR\n   An IPv4address Classless Inter-Domain Routing (CIDR)
        block encoded as\n   specified by the \"IPv4address\" rule in Section 3.2.2
        of [RFC3986]\n   followed by a \"/\" followed by an unsigned integer representing
        the\n   leading bits of the routing prefix (i.e., IPv4 CIDR notation).\n   Single
        IP addresses can be expressed as /32.\n   Type: String\n   Example IPv4CIDR:\n
        \  \"192.0.2.0/24\"\n"
      title: 4.3.5.  IPv4CIDR
    - contents:
      - "4.3.6.  IPv6CIDR\n   An IPv6address CIDR block encoded in one of the IPv6
        address formats\n   specified in [RFC5952] followed by a \"/\" followed by
        an unsigned\n   integer representing the leading bits of the routing prefix
        (i.e.,\n   IPv6 CIDR notation).  Single IP addresses can be expressed as /128.\n
        \  Type: String\n   Example IPv6CIDR:\n   \"2001:db8::/32\"\n"
      title: 4.3.6.  IPv6CIDR
    - contents:
      - "4.3.7.  ASN\n   An ASN value encoded as a string consisting of the characters
        \"as\"\n   (in lowercase) followed by the ASN [RFC6793].\n   Type: String\n
        \  Example ASN:\n   \"as64496\"\n"
      title: 4.3.7.  ASN
    - contents:
      - "4.3.8.  Country Code\n   An ISO 3166-1 alpha-2 code [ISO3166-1] in lowercase.\n
        \  Type: String\n   Example Country Code representing the USA:\n   \"us\"\n"
      title: 4.3.8.  Country Code
    title: 4.3.  CDNI Metadata Simple Data Type Descriptions
  title: 4.  CDNI Metadata Objects
- contents:
  - "5.  CDNI Metadata Capabilities\n   CDNI Metadata is used to convey information
    pertaining to content\n   delivery from the uCDN to the dCDN.  For optional metadata,
    it can be\n   useful for the uCDN to know, prior to delegating any content requests\n
    \  to a given dCDN, if that dCDN supports the underlying functionality\n   described
    by the metadata.  If some metadata is mandatory-to-enforce\n   and the dCDN does
    not support it, any delegated requests for content\n   that requires that metadata
    will fail.  The uCDN will likely want to\n   avoid delegating those requests to
    that dCDN.  Likewise, for any\n   metadata that might be assigned optional values,
    it could be useful\n   for the uCDN to know, prior to delegating any content requests
    to a\n   given dCDN, which values that dCDN supports.  If the optional value\n
    \  assigned to a given piece of content's metadata is not supported by\n   the
    dCDN, any delegated requests for that content can fail, so again\n   the uCDN
    is likely to want to avoid delegating those requests to\n   that dCDN.\n   The
    CDNI Footprint & Capabilities Advertisement interface (FCI)\n   provides a means
    of advertising capabilities from the dCDN to the\n   uCDN [RFC8008].  Support
    for optional metadata types and values can\n   be advertised using the FCI.\n"
  title: 5.  CDNI Metadata Capabilities
- contents:
  - "6.  CDNI Metadata Interface\n   This section specifies an interface to enable
    a dCDN to retrieve CDNI\n   Metadata objects from a uCDN.\n   The interface can
    be used by a dCDN to retrieve CDNI Metadata objects\n   in either of two ways:\n
    \  o  Dynamically, as required by the dCDN to process received requests\n      --
    for example, in response to a query from a uCDN over the CDNI\n      Request Routing
    Redirection interface (RI) [RFC7975] or in\n      response to receiving a request
    for content from a User Agent.\n   o  In advance of being required -- for example,
    in the case of\n      pre-positioned CDNI Metadata acquisition, initiated through
    the\n      \"CDNI Control interface / Triggers\" (CI/T) interface [RFC8007].\n
    \  The CDNI Metadata interface is built on the principles of HTTP web\n   services.
    \ In particular, this means that requests and responses over\n   the interface
    are built around the transfer of representations of\n   hyperlinked resources.
    \ A resource in the context of the CDNI\n   Metadata interface is any object in
    the object model (as described in\n   Sections 3 and 4).\n   CDNI Metadata servers
    (i.e., servers in the uCDN) are free to assign\n   whatever structure they desire
    to the URIs for CDNI Metadata objects,\n   and CDNI Metadata clients MUST NOT
    make any assumptions regarding the\n   structure of CDNI Metadata URIs or the
    mapping between CDNI Metadata\n   objects and their associated URIs.  Any URIs
    present in the examples\n   in this document are purely illustrative and are not
    intended to\n   impose a definitive structure on CDNI Metadata interface\n   implementations.\n"
  - contents:
    - "6.1.  Transport\n   The CDNI Metadata interface uses HTTP as the underlying
      protocol\n   transport [RFC7230].\n   The HTTP method in the request defines
      the operation the request\n   would like to perform.  A server implementation
      of the CDNI Metadata\n   interface MUST support the HTTP GET and HEAD methods.\n
      \  The corresponding HTTP response returns the status of the operation\n   in
      the HTTP status code and returns the current representation of the\n   resource
      (if appropriate) in the response body.  HTTP responses that\n   contain a response
      body SHOULD include an entity-tag (ETag) to enable\n   validation of cached
      versions of returned resources.\n   As the CDNI Metadata interface builds on
      top of HTTP, CDNI Metadata\n   server implementations MAY make use of any HTTP
      feature when\n   implementing the CDNI Metadata interface; for example, a CDNI\n
      \  Metadata server MAY make use of HTTP's caching mechanisms to indicate\n   that
      the returned response/representation can be reused without\n   re-contacting
      the CDNI Metadata server.\n"
    title: 6.1.  Transport
  - contents:
    - "6.2.  Retrieval of CDNI Metadata Resources\n   In the general case, a CDNI
      Metadata server makes CDNI Metadata\n   objects available via unique URIs; thus,
      in order to retrieve CDNI\n   Metadata, a CDNI Metadata client (i.e., a client
      in the dCDN) first\n   makes an HTTP GET request for the URI of the HostIndex,
      which\n   provides an array of hostnames for which the uCDN can delegate\n   content
      delivery to the dCDN.\n   In order to retrieve the CDNI Metadata for a particular
      request, the\n   CDNI Metadata client processes the received HostIndex object
      and\n   finds the corresponding HostMetadata entry (by matching the hostname\n
      \  in the request against the hostnames listed in the HostMatch\n   objects).
      \ If the HostMetadata is linked (rather than embedded), the\n   CDNI Metadata
      client then makes an HTTP GET request for the URI\n   specified in the \"href\"
      property of the Link object, which points to\n   the HostMetadata object itself.\n
      \  In order to retrieve the most specific metadata for a particular\n   request,
      the CDNI Metadata client inspects the HostMetadata for\n   references to more-specific
      PathMetadata objects (by matching the URI\n   path in the request against the
      path-pattern property items in any\n   PathMatch objects listed in the HostMetadata
      object).  If a\n   PathMetadata object is found to match (and is linked rather
      than\n   embedded), the CDNI Metadata client makes another HTTP GET request\n
      \  for the PathMetadata.  Each PathMetadata object can also include\n   references
      to additional more-specific metadata.  If this is the\n   case, the CDNI Metadata
      client continues requesting PathMatch and\n   PathMetadata objects recursively.
      \ The CDNI Metadata client repeats\n   this approach of processing metadata
      objects and retrieving (via HTTP\n   GETs) any linked objects until it has all
      the metadata objects it\n   requires in order to process the redirection request
      from the uCDN or\n   the content request from a User Agent.\n   In cases where
      a dCDN is not able to retrieve the entire set of CDNI\n   Metadata associated
      with a User Agent request, or it has retrieved\n   that metadata but it is stale
      according to standard HTTP caching\n   rules and cannot be revalidated -- for
      example, because the uCDN is\n   unreachable or returns an HTTP 4xx or 5xx status
      in response to some\n   or all of the dCDN's CDNI Metadata requests -- the dCDN
      MUST NOT\n   serve the requested content.\n   Where a dCDN is interconnected
      with multiple uCDNs, the dCDN needs to\n   determine which uCDN's CDNI Metadata
      interface should be used to\n   handle a particular User Agent request.\n   When
      HTTP redirection (e.g., HTTP 302 redirects) is being used\n   between CDNs,
      it is expected that the dCDN will be able to determine\n   the uCDN that redirected
      a particular request from information\n   contained in the received request
      (e.g., via the URI).  With\n   knowledge of which uCDN routed the request, the
      dCDN can choose the\n   correct uCDN from which to obtain the HostIndex.  Note
      that the\n   HostIndexes served by each uCDN can be unique.\n   In the case
      of DNS redirection, there is not always sufficient\n   information carried in
      the DNS request from User Agents to determine\n   the uCDN that redirected a
      particular request (e.g., when content\n   from a given host is redirected to
      a given dCDN by more than one\n   uCDN); therefore, dCDNs will have to apply
      local policy when deciding\n   which uCDN's CDNI Metadata interface to use.\n"
    title: 6.2.  Retrieval of CDNI Metadata Resources
  - contents:
    - "6.3.  Bootstrapping\n   The URI for the HostIndex object of a given uCDN needs
      to be\n   configured in the dCDN.  All other objects/resources are then\n   discoverable
      from the HostIndex object by following any links in the\n   HostIndex object,
      and through the referenced HostMetadata and\n   PathMetadata objects and their
      GenericMetadata sub-objects.\n   Manual configuration of the URI for the HostIndex
      object is outside\n   the scope of this document.\n"
    title: 6.3.  Bootstrapping
  - contents:
    - "6.4.  Encoding\n   CDNI Metadata objects MUST be encoded as I-JSON objects
      [RFC7493]\n   containing a dictionary of (key,value) pairs where the keys are
      the\n   property names and the values are the associated property values.\n
      \  The keys of the dictionary are the names of the properties associated\n   with
      the object and are therefore dependent on the specific object\n   being encoded
      (i.e., dependent on the CDNI Payload Type of the\n   returned resource).  Likewise,
      the values associated with each\n   property (dictionary key) are dependent
      on the specific object being\n   encoded (i.e., dependent on the CDNI Payload
      Type of the returned\n   resource).\n   Dictionary keys (properties) in I-JSON
      are case sensitive.  By\n   convention, any dictionary key (property) defined
      by this document\n   (for example, the names of CDNI Metadata object properties)
      MUST be\n   lowercase.\n"
    title: 6.4.  Encoding
  - contents:
    - "6.5.  Extensibility\n   The set of GenericMetadata objects can be extended
      with additional\n   (standards-based or vendor-specific) metadata objects through
      the\n   specification of new GenericMetadata objects.  The GenericMetadata\n
      \  object defined in Section 4.1.7 specifies a type field and a type-\n   specific
      value field that allow any metadata to be included in either\n   the HostMetadata
      or PathMetadata arrays.\n   As with the initial GenericMetadata types defined
      in Section 4.2,\n   future GenericMetadata types MUST specify the information
      necessary\n   for constructing and decoding the GenericMetadata object.\n   Any
      document that defines a new GenericMetadata type MUST:\n   1.  Register the
      CDNI Payload Type [RFC7736] used to identify the new\n       GenericMetadata
      type being specified.\n   2.  Define the set of properties associated with the
      new\n       GenericMetadata object.  GenericMetadata MUST NOT contain a\n       property
      named \"href\" because doing so would conflict with the\n       ability to detect
      Link objects (see Section 4.3.1).\n   3.  For each property, define a name,
      description, type, and whether\n       or not the property is mandatory-to-specify.\n
      \  4.  Describe the semantics of the new type, including its purpose,\n       and
      provide a use case to which it applies, including an example\n       encoded
      in I-JSON.\n   5.  Describe the security and privacy consequences, for both
      the User\n       Agent and the CDNs, of the new GenericMetadata object.\n   6.
      \ Describe any relation to, conflict with, or obsolescence of other\n       existing
      CDNI Metadata objects.\n   Note: In the case of vendor-specific extensions,
      vendor-identifying\n   CDNI Payload Type names will decrease the possibility
      of\n   GenericMetadata type collisions.  It is RECOMMENDED that any\n   vendor-specific
      extensions use vendor-identifying CDNI Payload Type\n   names.\n"
    title: 6.5.  Extensibility
  - contents:
    - "6.6.  Metadata Enforcement\n   At any given time, the set of GenericMetadata
      types supported by the\n   uCDN might not match the set of GenericMetadata types
      supported by\n   the dCDN.\n   In cases where a uCDN sends metadata containing
      a GenericMetadata\n   type that a dCDN does not support, the dCDN MUST enforce
      the\n   semantics of the mandatory-to-enforce property.  If a dCDN does not\n
      \  understand or is unable to perform the functions associated with any\n   mandatory-to-enforce
      metadata, the dCDN MUST NOT service any requests\n   for the corresponding content.\n
      \  Note: Ideally, uCDNs would not delegate content requests to a dCDN\n   that
      does not support the mandatory-to-enforce metadata associated\n   with the content
      being requested.  However, even if the uCDN has\n   a priori knowledge of the
      metadata supported by the dCDN (e.g., via\n   the FCI or through out-of-band
      negotiation between CDN operators),\n   metadata support can fluctuate or be
      inconsistent (e.g., due to\n   miscommunication, misconfiguration, or temporary
      outage).  Thus, the\n   dCDN MUST always evaluate all metadata associated with
      redirection\n   and content requests and reject any requests where\n   mandatory-to-enforce
      metadata associated with the content cannot be\n   enforced.\n"
    title: 6.6.  Metadata Enforcement
  - contents:
    - "6.7.  Metadata Conflicts\n   It is possible that new metadata definitions will
      obsolete or\n   conflict with existing GenericMetadata (e.g., a future revision
      of\n   the CDNI Metadata interface could redefine the Auth GenericMetadata\n
      \  object or a custom vendor extension could implement an alternate Auth\n   metadata
      option).  If multiple metadata (e.g., MI.Auth.v2,\n   vendor1.Auth, and vendor2.Auth)
      all conflict with an existing\n   GenericMetadata object (i.e., MI.Auth) and
      all are marked as\n   mandatory-to-enforce, it could be ambiguous as to which
      metadata\n   should be applied, especially in the case of overlapping\n   functionality.\n
      \  As described in Section 3.3, metadata override only applies to\n   metadata
      objects of the same exact type found in HostMetadata and\n   nested PathMetadata
      structures.  The CDNI Metadata interface does not\n   support enforcement of
      dependencies between different GenericMetadata\n   types.  It is the responsibility
      of the CSP and the CDN operators to\n   ensure that metadata assigned to a given
      piece of content do not\n   conflict.\n   Note: Because metadata is inherently
      ordered in HostMetadata and\n   PathMetadata arrays, as well as in the PathMatch
      hierarchy, multiple\n   conflicting metadata types MAY be used; however, metadata
      hierarchies\n   SHOULD ensure that independent PathMatch root objects are used
      to\n   prevent ambiguous or conflicting metadata definitions.\n"
    title: 6.7.  Metadata Conflicts
  - contents:
    - "6.8.  Versioning\n   The version of CDNI Metadata objects is conveyed inside
      the CDNI\n   Payload Type that is included in either (1) the HTTP Content-Type\n
      \  header (for example, \"Content-Type: application/cdni;\n   ptype=MI.HostIndex\"
      when retrieved via a link) or (2) in the link\n   type (Section 4.3.1), generic-metadata-type
      (Section 4.1.7), or\n   auth-type (Section 4.2.7) properties in the JSON payload.
      \ The CDNI\n   Payload Type uniquely identifies the specification defining that\n
      \  object, including any relation to, conflicts with, or obsolescence of\n   other
      metadata.  There is no explicit version mapping requirement;\n   however, for
      ease of understanding, metadata creators SHOULD make new\n   versions of metadata
      easily visible via the CDNI Payload Type, e.g.,\n   by appending a version string.
      \ Note: A version string is optional on\n   the first version (e.g., MI.HostIndex)
      but could be added for\n   subsequent versions (MI.HostIndex.v2, MI.HostIndex.v3,
      etc.).\n   Except when referenced by a Link object, nested metadata objects\n
      \  (i.e., structural metadata below the HostIndex; and Source,\n   LocationRule,
      TimeWindowRule, ProtocolRule, Footprint, and TimeWindow\n   objects) can be
      serialized into a JSON payload without explicit CDNI\n   Payload Type information.
      \ The type is inferred from the outer\n   structural metadata, GenericMetadata,
      or Auth object CDNI Payload\n   Type.  To avoid ambiguity when revising nestable
      metadata objects,\n   any outer metadata object(s) MUST be reversioned and allocated
      new\n   CDNI Payload Type(s) at the same time.  For example, the MI.HostIndex\n
      \  object defined in this document contains an array of MI.HostMatch\n   objects,
      each of which in turn contains a MI.HostMetadata object.  If\n   a new MI.HostMetadata.v2
      object were required, the outer MI.HostIndex\n   and MI.HostMatch objects would
      need to be revised, e.g., to\n   MI.HostIndex.v2 and MI.HostMatch.v2, respectively.
      \ Similarly, if a\n   new MI.TimeWindowRule.v2 object were required, the outer\n
      \  MI.TimeWindowACL object would need to be revised, e.g., to\n   MI.TimeWindowACL.v2;
      however, the MI.TimeWindowRule.v2 object could\n   still contain MI.TimeWindow
      objects, if so specified.\n   HTTP requests sent to a metadata server SHOULD
      include an Accept\n   header with the CDNI Payload Type of the expected object.
      \ Metadata\n   clients can specify multiple CDNI Payload Types in the Accept
      header;\n   for example, if a metadata client is capable of processing two\n
      \  different versions of the same type of object (defined by different\n   CDNI
      Payload Types), it might decide to include both in the Accept\n   header.\n"
    title: 6.8.  Versioning
  - contents:
    - "6.9.  Media Types\n   All CDNI Metadata objects use the media type \"application/cdni\".
      \ The\n   CDNI Payload Type for each object then contains the object name of\n
      \  that object as defined by this document, prefixed with \"MI.\".\n   Table
      4 lists the CDNI Payload Types for the metadata objects\n   (resources) specified
      in this document.\n           +-----------------------+--------------------------+\n
      \          | Data Object           | CDNI Payload Type        |\n           +-----------------------+--------------------------+\n
      \          | HostIndex             | MI.HostIndex             |\n           |
      HostMatch             | MI.HostMatch             |\n           | HostMetadata
      \         | MI.HostMetadata          |\n           | PathMatch             |
      MI.PathMatch             |\n           | PatternMatch          | MI.PatternMatch
      \         |\n           | PathMetadata          | MI.PathMetadata          |\n
      \          | SourceMetadata        | MI.SourceMetadata        |\n           |
      Source                | MI.Source                |\n           | LocationACL
      \          | MI.LocationACL           |\n           | LocationRule          |
      MI.LocationRule          |\n           | Footprint             | MI.Footprint
      \            |\n           | TimeWindowACL         | MI.TimeWindowACL         |\n
      \          | TimeWindowRule        | MI.TimeWindowRule        |\n           |
      TimeWindow            | MI.TimeWindow            |\n           | ProtocolACL
      \          | MI.ProtocolACL           |\n           | ProtocolRule          |
      MI.ProtocolRule          |\n           | DeliveryAuthorization | MI.DeliveryAuthorization
      |\n           | Cache                 | MI.Cache                 |\n           |
      Auth                  | MI.Auth                  |\n           | Grouping              |
      MI.Grouping              |\n           +-----------------------+--------------------------+\n
      \          Table 4: CDNI Payload Types for CDNI Metadata Objects\n"
    title: 6.9.  Media Types
  - contents:
    - "6.10.  Complete CDNI Metadata Example\n   A dCDN requests the HostIndex and
      receives the following object with\n   a CDNI Payload Type of \"MI.HostIndex\":\n
      \  {\n     \"hosts\": [\n       {\n         \"host\": \"video.example.com\",\n
      \        \"host-metadata\": {\n           \"type\": \"MI.HostMetadata\",\n           \"href\":
      \"https://metadata.ucdn.example/host1234\"\n         }\n       },\n       {\n
      \        \"host\": \"images.example.com\",\n         \"host-metadata\": {\n
      \          \"type\": \"MI.HostMetadata\",\n           \"href\": \"https://metadata.ucdn.example/host5678\"\n
      \        }\n       }\n     ]\n   }\n   If the incoming request has a Host header
      with \"video.example.com\",\n   then the dCDN would fetch the HostMetadata object
      from\n   \"https://metadata.ucdn.example/host1234\" expecting a CDNI Payload\n
      \  Type of \"MI.HostMetadata\":\n   {\n     \"metadata\": [\n       {\n         \"generic-metadata-type\":
      \"MI.SourceMetadata\",\n         \"generic-metadata-value\": {\n           \"sources\":
      [\n             {\n               \"endpoint\": [\"acq1.ucdn.example\"],\n               \"protocol\":
      \"http/1.1\"\n             },\n             {\n               \"endpoint\":
      [\"acq2.ucdn.example\"],\n               \"protocol\": \"http/1.1\"\n             }\n
      \          ]\n         }\n       },\n       {\n         \"generic-metadata-type\":
      \"MI.LocationACL\",\n         \"generic-metadata-value\": {\n           \"locations\":
      [\n             {\n               \"footprints\": [\n                 {\n                   \"footprint-type\":
      \"ipv4cidr\",\n                   \"footprint-value\": [\"192.0.2.0/24\"]\n
      \                },\n                 {\n                   \"footprint-type\":
      \"ipv6cidr\",\n                   \"footprint-value\": [\"2001:db8::/32\"]\n
      \                },\n                 {\n                   \"footprint-type\":
      \"countrycode\",\n                   \"footprint-value\": [\"us\"]\n                 },\n
      \                {\n                   \"footprint-type\": \"asn\",\n                   \"footprint-value\":
      [\"as64496\"]\n                 }\n               ],\n               \"action\":
      \"deny\"\n             }\n           ]\n         }\n       },\n       {\n         \"generic-metadata-type\":
      \"MI.ProtocolACL\",\n         \"generic-metadata-value\": {\n           \"protocol-acl\":
      [\n             {\n               \"protocols\": [\n                 \"http/1.1\"\n
      \              ],\n               \"action\": \"allow\"\n             }\n           ]\n
      \        }\n       }\n     ],\n     \"paths\": [\n       {\n         \"path-pattern\":
      {\n           \"pattern\": \"/videos/trailers/*\"\n         },\n         \"path-metadata\":
      {\n           \"type\": \"MI.PathMetadata\",\n           \"href\": \"https://metadata.ucdn.example/host1234/pathABC\"\n
      \        }\n       },\n       {\n         \"path-pattern\": {\n           \"pattern\":
      \"/videos/movies/*\"\n         },\n         \"path-metadata\": {\n           \"type\":
      \"MI.PathMetadata\",\n           \"href\": \"https://metadata.ucdn.example/host1234/pathDEF\"\n
      \        }\n       }\n     ]\n   }\n   Suppose that the path of the requested
      resource matches the\n   \"/videos/movies/*\" pattern; the next metadata requested
      would be for\n   \"https://metadata.ucdn.example/host1234/pathDEF\" with an
      expected\n   CDNI Payload Type of \"MI.PathMetadata\":\n   {\n     \"metadata\":
      [],\n     \"paths\": [\n       {\n         \"path-pattern\": {\n           \"pattern\":
      \"/videos/movies/hd/*\"\n         },\n         \"path-metadata\": {\n           \"type\":
      \"MI.PathMetadata\",\n           \"href\":\n             \"https://metadata.ucdn.example/host1234/pathDEF/path123\"\n
      \        }\n       }\n     ]\n   }\n   Finally, if the path of the requested
      resource also matches the\n   \"/videos/movies/hd/*\" pattern, the dCDN would
      also fetch the\n   following object from\n   \"https://metadata.ucdn.example/host1234/pathDEF/path123\"
      with a CDNI\n   Payload Type of \"MI.PathMetadata\":\n   {\n     \"metadata\":
      [\n       {\n         \"generic-metadata-type\": \"MI.TimeWindowACL\",\n         \"generic-metadata-value\":
      {\n           \"times\": [\n             \"windows\": [\n               {\n
      \                \"start\": \"1213948800\",\n                 \"end\": \"1478047392\"\n
      \              }\n             ],\n             \"action\": \"allow\"\n           ]\n
      \        }\n       }\n     ]\n   }\n   The final set of metadata that applies
      to the requested resource\n   includes a SourceMetadata, a LocationACL, a ProtocolACL,
      and a\n   TimeWindowACL.\n"
    title: 6.10.  Complete CDNI Metadata Example
  title: 6.  CDNI Metadata Interface
- contents:
  - '7.  IANA Considerations

    '
  - contents:
    - "7.1.  CDNI Payload Types\n   This document requests the registration of the
      following entries\n   under the \"CDNI Payload Types\" registry hosted by IANA:\n
      \              +--------------------------+---------------+\n               |
      Payload Type             | Specification |\n               +--------------------------+---------------+\n
      \              | MI.HostIndex             | RFC 8006      |\n               |
      MI.HostMatch             | RFC 8006      |\n               | MI.HostMetadata
      \         | RFC 8006      |\n               | MI.PathMatch             | RFC
      8006      |\n               | MI.PatternMatch          | RFC 8006      |\n               |
      MI.PathMetadata          | RFC 8006      |\n               | MI.SourceMetadata
      \       | RFC 8006      |\n               | MI.Source                | RFC 8006
      \     |\n               | MI.LocationACL           | RFC 8006      |\n               |
      MI.LocationRule          | RFC 8006      |\n               | MI.Footprint             |
      RFC 8006      |\n               | MI.TimeWindowACL         | RFC 8006      |\n
      \              | MI.TimeWindowRule        | RFC 8006      |\n               |
      MI.TimeWindow            | RFC 8006      |\n               | MI.ProtocolACL
      \          | RFC 8006      |\n               | MI.ProtocolRule          | RFC
      8006      |\n               | MI.DeliveryAuthorization | RFC 8006      |\n               |
      MI.Cache                 | RFC 8006      |\n               | MI.Auth                  |
      RFC 8006      |\n               | MI.Grouping              | RFC 8006      |\n
      \              +--------------------------+---------------+\n"
    - contents:
      - "7.1.1.  CDNI MI HostIndex Payload Type\n   Purpose: The purpose of this Payload
        Type is to distinguish HostIndex\n   MI objects (and any associated capability
        advertisement)\n   Interface: MI/FCI\n   Encoding: see Section 4.1.1\n"
      title: 7.1.1.  CDNI MI HostIndex Payload Type
    - contents:
      - "7.1.2.  CDNI MI HostMatch Payload Type\n   Purpose: The purpose of this Payload
        Type is to distinguish HostMatch\n   MI objects (and any associated capability
        advertisement)\n   Interface: MI/FCI\n   Encoding: see Section 4.1.2\n"
      title: 7.1.2.  CDNI MI HostMatch Payload Type
    - contents:
      - "7.1.3.  CDNI MI HostMetadata Payload Type\n   Purpose: The purpose of this
        Payload Type is to distinguish\n   HostMetadata MI objects (and any associated
        capability advertisement)\n   Interface: MI/FCI\n   Encoding: see Section
        4.1.3\n"
      title: 7.1.3.  CDNI MI HostMetadata Payload Type
    - contents:
      - "7.1.4.  CDNI MI PathMatch Payload Type\n   Purpose: The purpose of this Payload
        Type is to distinguish PathMatch\n   MI objects (and any associated capability
        advertisement)\n   Interface: MI/FCI\n   Encoding: see Section 4.1.4\n"
      title: 7.1.4.  CDNI MI PathMatch Payload Type
    - contents:
      - "7.1.5.  CDNI MI PatternMatch Payload Type\n   Purpose: The purpose of this
        Payload Type is to distinguish\n   PatternMatch MI objects (and any associated
        capability advertisement)\n   Interface: MI/FCI\n   Encoding: see Section
        4.1.5\n"
      title: 7.1.5.  CDNI MI PatternMatch Payload Type
    - contents:
      - "7.1.6.  CDNI MI PathMetadata Payload Type\n   Purpose: The purpose of this
        Payload Type is to distinguish\n   PathMetadata MI objects (and any associated
        capability advertisement)\n   Interface: MI/FCI\n   Encoding: see Section
        4.1.6\n"
      title: 7.1.6.  CDNI MI PathMetadata Payload Type
    - contents:
      - "7.1.7.  CDNI MI SourceMetadata Payload Type\n   Purpose: The purpose of this
        Payload Type is to distinguish\n   SourceMetadata MI objects (and any associated
        capability\n   advertisement)\n   Interface: MI/FCI\n   Encoding: see Section
        4.2.1\n"
      title: 7.1.7.  CDNI MI SourceMetadata Payload Type
    - contents:
      - "7.1.8.  CDNI MI Source Payload Type\n   Purpose: The purpose of this Payload
        Type is to distinguish Source MI\n   objects (and any associated capability
        advertisement)\n   Interface: MI/FCI\n   Encoding: see Section 4.2.1.1\n"
      title: 7.1.8.  CDNI MI Source Payload Type
    - contents:
      - "7.1.9.  CDNI MI LocationACL Payload Type\n   Purpose: The purpose of this
        Payload Type is to distinguish\n   LocationACL MI objects (and any associated
        capability advertisement)\n   Interface: MI/FCI\n   Encoding: see Section
        4.2.2\n"
      title: 7.1.9.  CDNI MI LocationACL Payload Type
    - contents:
      - "7.1.10.  CDNI MI LocationRule Payload Type\n   Purpose: The purpose of this
        Payload Type is to distinguish\n   LocationRule MI objects (and any associated
        capability advertisement)\n   Interface: MI/FCI\n   Encoding: see Section
        4.2.2.1\n"
      title: 7.1.10.  CDNI MI LocationRule Payload Type
    - contents:
      - "7.1.11.  CDNI MI Footprint Payload Type\n   Purpose: The purpose of this
        Payload Type is to distinguish Footprint\n   MI objects (and any associated
        capability advertisement)\n   Interface: MI/FCI\n   Encoding: see Section
        4.2.2.2\n"
      title: 7.1.11.  CDNI MI Footprint Payload Type
    - contents:
      - "7.1.12.  CDNI MI TimeWindowACL Payload Type\n   Purpose: The purpose of this
        Payload Type is to distinguish\n   TimeWindowACL MI objects (and any associated
        capability\n   advertisement)\n   Interface: MI/FCI\n   Encoding: see Section
        4.2.3\n"
      title: 7.1.12.  CDNI MI TimeWindowACL Payload Type
    - contents:
      - "7.1.13.  CDNI MI TimeWindowRule Payload Type\n   Purpose: The purpose of
        this Payload Type is to distinguish\n   TimeWindowRule MI objects (and any
        associated capability\n   advertisement)\n   Interface: MI/FCI\n   Encoding:
        see Section 4.2.3.1\n"
      title: 7.1.13.  CDNI MI TimeWindowRule Payload Type
    - contents:
      - "7.1.14.  CDNI MI TimeWindow Payload Type\n   Purpose: The purpose of this
        Payload Type is to distinguish\n   TimeWindow MI objects (and any associated
        capability advertisement)\n   Interface: MI/FCI\n   Encoding: see Section
        4.2.3.2\n"
      title: 7.1.14.  CDNI MI TimeWindow Payload Type
    - contents:
      - "7.1.15.  CDNI MI ProtocolACL Payload Type\n   Purpose: The purpose of this
        Payload Type is to distinguish\n   ProtocolACL MI objects (and any associated
        capability advertisement)\n   Interface: MI/FCI\n   Encoding: see Section
        4.2.4\n"
      title: 7.1.15.  CDNI MI ProtocolACL Payload Type
    - contents:
      - "7.1.16.  CDNI MI ProtocolRule Payload Type\n   Purpose: The purpose of this
        Payload Type is to distinguish\n   ProtocolRule MI objects (and any associated
        capability advertisement)\n   Interface: MI/FCI\n   Encoding: see Section
        4.2.4.1\n"
      title: 7.1.16.  CDNI MI ProtocolRule Payload Type
    - contents:
      - "7.1.17.  CDNI MI DeliveryAuthorization Payload Type\n   Purpose: The purpose
        of this Payload Type is to distinguish\n   DeliveryAuthorization MI objects
        (and any associated capability\n   advertisement)\n   Interface: MI/FCI\n
        \  Encoding: see Section 4.2.5\n"
      title: 7.1.17.  CDNI MI DeliveryAuthorization Payload Type
    - contents:
      - "7.1.18.  CDNI MI Cache Payload Type\n   Purpose: The purpose of this Payload
        Type is to distinguish Cache MI\n   objects (and any associated capability
        advertisement)\n   Interface: MI/FCI\n   Encoding: see Section 4.2.6\n"
      title: 7.1.18.  CDNI MI Cache Payload Type
    - contents:
      - "7.1.19.  CDNI MI Auth Payload Type\n   Purpose: The purpose of this Payload
        Type is to distinguish Auth MI\n   objects (and any associated capability
        advertisement)\n   Interface: MI/FCI\n   Encoding: see Section 4.2.7\n"
      title: 7.1.19.  CDNI MI Auth Payload Type
    - contents:
      - "7.1.20.  CDNI MI Grouping Payload Type\n   Purpose: The purpose of this Payload
        Type is to distinguish Grouping\n   MI objects (and any associated capability
        advertisement)\n   Interface: MI/FCI\n   Encoding: see Section 4.2.8\n"
      title: 7.1.20.  CDNI MI Grouping Payload Type
    title: 7.1.  CDNI Payload Types
  - contents:
    - "7.2.  \"CDNI Metadata Footprint Types\" Registry\n   IANA has created a new
      \"CDNI Metadata Footprint Types\" subregistry in\n   the \"Content Delivery
      Network Interconnection (CDNI) Parameters\"\n   registry.  The \"CDNI Metadata
      Footprint Types\" namespace defines the\n   valid Footprint object type values
      used by the Footprint object\n   described in Section 4.2.2.2.  Additions to
      the \"CDNI Metadata\n   Footprint Types\" namespace conform to the Specification
      Required\n   policy as defined in [RFC5226].  The Designated Expert will verify\n
      \  that new type definitions do not duplicate existing type definitions\n   and
      prevent gratuitous additions to the namespace.  New registrations\n   are required
      to provide a clear description of how to interpret new\n   footprint types.\n
      \  The following table defines the initial values for the \"CDNI Metadata\n
      \  Footprint Types\" registry:\n    +----------------+--------------------------------+---------------+\n
      \   | Footprint Type | Description                    | Specification |\n    +----------------+--------------------------------+---------------+\n
      \   | ipv4cidr       | IPv4 CIDR address block        | RFC 8006      |\n    |
      ipv6cidr       | IPv6 CIDR address block        | RFC 8006      |\n    | asn
      \           | Autonomous System Number (ASN) | RFC 8006      |\n    | countrycode
      \   | ISO 3166-1 alpha-2 code        | RFC 8006      |\n    +----------------+--------------------------------+---------------+\n"
    title: 7.2.  "CDNI Metadata Footprint Types" Registry
  - contents:
    - "7.3.  \"CDNI Metadata Protocol Types\" Registry\n   IANA has created a new
      \"CDNI Metadata Protocol Types\" subregistry in\n   the \"Content Delivery Network
      Interconnection (CDNI) Parameters\"\n   registry.  The \"CDNI Metadata Protocol
      Types\" namespace defines the\n   valid Protocol object values (Section 4.3.2)
      used by the\n   SourceMetadata and ProtocolACL objects.  Additions to the Protocol\n
      \  namespace conform to the Specification Required policy as defined in\n   [RFC5226],
      where the specification defines the Protocol Type and the\n   protocol to which
      it is associated.  The Designated Expert will\n   verify that new protocol definitions
      do not duplicate existing\n   protocol definitions and prevent gratuitous additions
      to the\n   namespace.\n   The following table defines the initial Protocol values
      corresponding\n   to the HTTP and HTTPS protocols:\n   +-----------+----------------------+---------------+----------------+\n
      \  | Protocol  | Description          | Type          | Protocol       |\n   |
      Type      |                      | Specification | Specifications |\n   +-----------+----------------------+---------------+----------------+\n
      \  | http/1.1  | Hypertext Transfer   | RFC 8006      | RFC 7230       |\n   |
      \          | Protocol -- HTTP/1.1 |               |                |\n   |           |
      \                     |               |                |\n   | https/1.1 | HTTP/1.1
      over TLS    | RFC 8006      | RFC 7230,      |\n   |           |                      |
      \              | RFC 2818       |\n   +-----------+----------------------+---------------+----------------+\n"
    title: 7.3.  "CDNI Metadata Protocol Types" Registry
  title: 7.  IANA Considerations
- contents:
  - '8.  Security Considerations

    '
  - contents:
    - "8.1.  Authentication and Integrity\n   A malicious metadata server, proxy server,
      or attacker impersonating\n   an authentic uCDN CDNI Metadata interface without
      being detected\n   could provide false metadata to a dCDN that either:\n   o
      \ Denies service for one or more pieces of content to one or more\n      User
      Agents;\n   o  Directs dCDNs to contact malicious origin servers instead of
      the\n      actual origin servers, so that malware or slanderous alternate\n
      \     content may be substituted for legitimate content; or\n   o  Removes delivery
      restrictions (e.g., LocationACL, TimeWindowACL,\n      ProtocolACL, or Auth
      metadata), allowing access to content that\n      would otherwise be denied
      and thus possibly violating license\n      restrictions and incurring unwarranted
      delivery costs.\n   Unauthorized access to metadata could also enable a malicious\n
      \  metadata client to continuously issue metadata requests in order to\n   overload
      a uCDN's metadata server or servers.\n   Unauthorized access to metadata could
      further result in leakage of\n   private information.  A malicious metadata
      client could request\n   metadata in order to gain access to origin servers,
      as well as\n   information pertaining to content restrictions.\n   An implementation
      of the CDNI Metadata interface MUST use mutual\n   authentication and message
      authentication codes to prevent\n   unauthorized access to, and undetected modification
      of, metadata (see\n   Section 8.3).\n"
    title: 8.1.  Authentication and Integrity
  - contents:
    - "8.2.  Confidentiality and Privacy\n   Unauthorized viewing of metadata could
      result in leakage of private\n   information.  Content provider origin and policy
      information is\n   conveyed through the CDNI Metadata interface.  A third party
      could\n   intercept metadata transactions in order to gain access to origin\n
      \  servers, as well as information pertaining to content restrictions\n   and
      usage patterns.\n   Note: The distribution of metadata by a uCDN to dCDNs could
      introduce\n   privacy concerns for some content providers, e.g., dCDNs accepting\n
      \  content requests for a content provider's content might be able to\n   obtain
      additional information and usage patterns relating to the\n   users of a content
      provider's services.  Content providers with\n   concerns about divulging information
      to dCDNs can instruct their uCDN\n   partners not to use CDNI when delivering
      their content.\n   An implementation of the CDNI Metadata interface MUST use
      strong\n   encryption to prevent unauthorized interception or monitoring of\n
      \  metadata (see Section 8.3).\n"
    title: 8.2.  Confidentiality and Privacy
  - contents:
    - "8.3.  Securing the CDNI Metadata Interface\n   An implementation of the CDNI
      Metadata interface MUST support TLS\n   transport as per [RFC2818] and [RFC7230].\n
      \  TLS MUST be used by the server side (uCDN) and the client side (dCDN)\n   of
      the CDNI Metadata interface, including authentication of the\n   remote end,
      unless alternate methods are used for ensuring the\n   security of the information
      in the CDNI Metadata interface requests\n   and responses (such as setting up
      an IPsec tunnel between the two\n   CDNs or using a physically secured internal
      network between two CDNs\n   that are owned by the same corporate entity).\n
      \  The use of TLS for transport of the CDNI Metadata interface messages\n   allows
      the dCDN and uCDN to authenticate each other.\n   Once the dCDN and uCDN have
      mutually authenticated each other, TLS\n   allows:\n   o  The dCDN and uCDN
      to authorize each other (to ensure that they are\n      transmitting/receiving
      CDNI Metadata requests and responses from\n      an authorized CDN);\n   o  CDNI
      Metadata interface requests and responses to be transmitted\n      with confidentiality;
      and\n   o  The integrity of the CDNI Metadata interface requests and\n      responses
      to be protected during the exchange.\n   When TLS is used, the general TLS usage
      guidance in [RFC7525] MUST be\n   followed.\n"
    title: 8.3.  Securing the CDNI Metadata Interface
  title: 8.  Security Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [ISO3166-1]\n              The International
      Organization for Standardization,\n              \"Codes for the representation
      of names of countries and\n              their subdivisions -- Part 1: Country
      codes\",\n              ISO 3166-1:2013, 2013.\n   [POSIX]    Institute of Electrical
      and Electronics Engineers,\n              \"Information Technology Portable
      Operating System\n              Interface (POSIX) Part 1: System Application
      Program\n              Interface (API) [C Language]\", IEEE P1003.1, 1990.\n
      \  [RFC1034]  Mockapetris, P., \"Domain names - concepts and facilities\",\n
      \             STD 13, RFC 1034, DOI 10.17487/RFC1034, November 1987,\n              <http://www.rfc-editor.org/info/rfc1034>.\n
      \  [RFC1123]  Braden, R., Ed., \"Requirements for Internet Hosts -\n              Application
      and Support\", STD 3, RFC 1123,\n              DOI 10.17487/RFC1123, October
      1989,\n              <http://www.rfc-editor.org/info/rfc1123>.\n   [RFC2119]
      \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3986]  Berners-Lee,
      T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier
      (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC4291]
      \ Hinden, R. and S. Deering, \"IP Version 6 Addressing\n              Architecture\",
      RFC 4291, DOI 10.17487/RFC4291,\n              February 2006, <http://www.rfc-editor.org/info/rfc4291>.\n
      \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226,
      May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC5890]
      \ Klensin, J., \"Internationalized Domain Names for\n              Applications
      (IDNA): Definitions and Document Framework\",\n              RFC 5890, DOI 10.17487/RFC5890,
      August 2010,\n              <http://www.rfc-editor.org/info/rfc5890>.\n   [RFC5891]
      \ Klensin, J., \"Internationalized Domain Names in\n              Applications
      (IDNA): Protocol\", RFC 5891,\n              DOI 10.17487/RFC5891, August 2010,\n
      \             <http://www.rfc-editor.org/info/rfc5891>.\n   [RFC5952]  Kawamura,
      S. and M. Kawashima, \"A Recommendation for IPv6\n              Address Text
      Representation\", RFC 5952,\n              DOI 10.17487/RFC5952, August 2010,\n
      \             <http://www.rfc-editor.org/info/rfc5952>.\n   [RFC6707]  Niven-Jenkins,
      B., Le Faucheur, F., and N. Bitar, \"Content\n              Distribution Network
      Interconnection (CDNI) Problem\n              Statement\", RFC 6707, DOI 10.17487/RFC6707,\n
      \             September 2012, <http://www.rfc-editor.org/info/rfc6707>.\n   [RFC7230]
      \ Fielding, R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer
      Protocol (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230,
      DOI 10.17487/RFC7230, June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n
      \  [RFC7493]  Bray, T., Ed., \"The I-JSON Message Format\", RFC 7493,\n              DOI
      10.17487/RFC7493, March 2015,\n              <http://www.rfc-editor.org/info/rfc7493>.\n
      \  [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations
      for Secure Use of Transport Layer\n              Security (TLS) and Datagram
      Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\n
      \             May 2015, <http://www.rfc-editor.org/info/rfc7525>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [CDNI-URI-SIGNING]\n              van Brandenburg,
      R., Leung, K., Sorber, P., and M. Miller,\n              \"URI Signing for CDN
      Interconnection (CDNI)\", Work in\n              Progress, draft-ietf-cdni-uri-signing-10,
      October 2016.\n   [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI
      10.17487/RFC2818, May 2000,\n              <http://www.rfc-editor.org/info/rfc2818>.\n
      \  [RFC6793]  Vohra, Q. and E. Chen, \"BGP Support for Four-Octet\n              Autonomous
      System (AS) Number Space\", RFC 6793,\n              DOI 10.17487/RFC6793, December
      2012,\n              <http://www.rfc-editor.org/info/rfc6793>.\n   [RFC7234]
      \ Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed.,
      \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              RFC 7234,
      DOI 10.17487/RFC7234, June 2014,\n              <http://www.rfc-editor.org/info/rfc7234>.\n
      \  [RFC7336]  Peterson, L., Davie, B., and R. van Brandenburg, Ed.,\n              \"Framework
      for Content Distribution Network\n              Interconnection (CDNI)\", RFC
      7336, DOI 10.17487/RFC7336,\n              August 2014, <http://www.rfc-editor.org/info/rfc7336>.\n
      \  [RFC7337]  Leung, K., Ed., and Y. Lee, Ed., \"Content Distribution\n              Network
      Interconnection (CDNI) Requirements\", RFC 7337,\n              DOI 10.17487/RFC7337,
      August 2014,\n              <http://www.rfc-editor.org/info/rfc7337>.\n   [RFC7540]
      \ Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext\n              Transfer
      Protocol Version 2 (HTTP/2)\", RFC 7540,\n              DOI 10.17487/RFC7540,
      May 2015,\n              <http://www.rfc-editor.org/info/rfc7540>.\n   [RFC7736]
      \ Ma, K., \"Content Delivery Network Interconnection (CDNI)\n              Media
      Type Registration\", RFC 7736, DOI 10.17487/RFC7736,\n              December
      2015, <http://www.rfc-editor.org/info/rfc7736>.\n   [RFC7975]  Niven-Jenkins,
      B., Ed., and R. van Brandenburg, Ed.,\n              \"Request Routing Redirection
      Interface for Content\n              Delivery Network (CDN) Interconnection\",
      RFC 7975,\n              DOI 10.17487/RFC7975, October 2016,\n              <http://www.rfc-editor.org/info/rfc7975>.\n
      \  [RFC8007]  Murray, R. and B. Niven-Jenkins, \"Content Delivery Network\n
      \             Interconnection (CDNI) Control Interface / Triggers\",\n              RFC
      8007, DOI 10.17487/RFC8007, December 2016,\n              <http://www.rfc-editor.org/info/rfc8007>.\n
      \  [RFC8008]  Seedorf, J., Peterson, J., Previdi, S., van Brandenburg,\n              R.,
      and K. Ma, \"Content Delivery Network Interconnection\n              (CDNI)
      Request Routing: Footprint and Capabilities\n              Semantics\", RFC
      8008, DOI 10.17487/RFC8008, December 2016,\n              <http://www.rfc-editor.org/info/rfc8008>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Acknowledgments\n   The authors would like to thank David Ferguson, Francois
    Le Faucheur,\n   Jan Seedorf, and Matt Miller for their valuable comments and
    input to\n   this document.\n"
  title: Acknowledgments
- contents:
  - "Contributors\n   The authors would also like to thank Grant Watson and Kent Leung
    for\n   their contributions to this document.\n"
  title: Contributors
- contents:
  - "Authors' Addresses\n   Ben Niven-Jenkins\n   Nokia\n   3 Ely Road\n   Milton,
    Cambridge  CB24 6DD\n   United Kingdom\n   Email: ben.niven-jenkins@nokia.com\n
    \  Rob Murray\n   Nokia\n   3 Ely Road\n   Milton, Cambridge  CB24 6DD\n   United
    Kingdom\n   Email: rob.murray@nokia.com\n   Matt Caulfield\n   Cisco Systems\n
    \  1414 Massachusetts Avenue\n   Boxborough, MA  01719\n   United States of America\n
    \  Phone: +1-978-936-9307\n   Email: mcaulfie@cisco.com\n   Kevin J. Ma\n   Ericsson\n
    \  43 Nagog Park\n   Acton, MA  01720\n   United States of America\n   Phone:
    +1 978-844-5100\n   Email: kevin.j.ma@ericsson.com\n"
  title: Authors' Addresses
