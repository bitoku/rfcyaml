- title: __initial_text__
  contents:
  - "  The Application of the Path Computation Element Architecture to the\n     \
    \   Determination of a Sequence of Domains in MPLS and GMPLS\n"
- title: Abstract
  contents:
  - "Abstract\n   Computing optimum routes for Label Switched Paths (LSPs) across\n\
    \   multiple domains in MPLS Traffic Engineering (MPLS-TE) and GMPLS\n   networks\
    \ presents a problem because no single point of path\n   computation is aware\
    \ of all of the links and resources in each\n   domain.  A solution may be achieved\
    \ using the Path Computation\n   Element (PCE) architecture.\n   Where the sequence\
    \ of domains is known a priori, various techniques\n   can be employed to derive\
    \ an optimum path.  If the domains are simply\n   connected, or if the preferred\
    \ points of interconnection are also\n   known, the Per-Domain Path Computation\
    \ technique can be used.  Where\n   there are multiple connections between domains\
    \ and there is no\n   preference for the choice of points of interconnection,\
    \ the Backward-\n   Recursive PCE-based Computation (BRPC) procedure can be used\
    \ to\n   derive an optimal path.\n   This document examines techniques to establish\
    \ the optimum path when\n   the sequence of domains is not known in advance. \
    \ The document shows\n   how the PCE architecture can be extended to allow the\
    \ optimum\n   sequence of domains to be selected, and the optimum end-to-end path\n\
    \   to be derived through the use of a hierarchical relationship between\n   domains.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6805.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Problem Statement ..........................................5\n  \
    \    1.2. Definition of a Domain .....................................5\n    \
    \  1.3. Assumptions and Requirements ...............................6\n      \
    \     1.3.1. Metric Objectives ...................................6\n        \
    \   1.3.2. Diversity ...........................................7\n          \
    \        1.3.2.1. Physical Diversity .........................7\n            \
    \      1.3.2.2. Domain Diversity ...........................7\n           1.3.3.\
    \ Existing Traffic Engineering Constraints ............7\n           1.3.4. Commercial\
    \ Constraints ..............................8\n           1.3.5. Domain Confidentiality\
    \ ..............................8\n           1.3.6. Limiting Information Aggregation\
    \ ....................8\n           1.3.7. Domain Interconnection Discovery ....................8\n\
    \      1.4. Terminology ................................................8\n  \
    \ 2. Examination of Existing PCE Mechanisms ..........................9\n    \
    \  2.1. Per-Domain Path Computation ................................9\n      2.2.\
    \ Backward-Recursive PCE-Based Computation ..................10\n           2.2.1.\
    \ Applicability of BRPC When the Domain Path\n                  is Not Known .......................................11\n\
    \   3. Hierarchical PCE ...............................................12\n  \
    \ 4. Hierarchical PCE Procedures ....................................13\n    \
    \  4.1. Objective Functions and Policy ............................13\n      4.2.\
    \ Maintaining Domain Confidentiality ........................14\n      4.3. PCE\
    \ Discovery .............................................14\n      4.4. Traffic\
    \ Engineering Database for the Parent Domain ........15\n      4.5. Determination\
    \ of Destination Domain .......................16\n      4.6. Hierarchical PCE\
    \ Examples .................................16\n           4.6.1. Hierarchical\
    \ PCE Initial Information Exchange ......18\n           4.6.2. Hierarchical PCE\
    \ End-to-End Path\n                  Computation Procedure ..............................19\n\
    \      4.7. Hierarchical PCE Error Handling ...........................20\n  \
    \    4.8. Requirements for Hierarchical PCEP Protocol Extensions ....20\n    \
    \       4.8.1. PCEP Request Qualifiers ............................21\n      \
    \     4.8.2. Indication of Hierarchical PCE Capability ..........21\n        \
    \   4.8.3. Intention to Utilize Parent PCE Capabilities .......21\n          \
    \ 4.8.4. Communication of Domain Connectivity Information ...22\n           4.8.5.\
    \ Domain Identifiers .................................22\n   5. Hierarchical PCE\
    \ Applicability .................................23\n      5.1. Autonomous Systems\
    \ and Areas ..............................23\n      5.2. ASON Architecture .........................................24\n\
    \           5.2.1. Implicit Consistency between Hierarchical\n               \
    \   PCE and G.7715.2 ...................................25\n           5.2.2.\
    \ Benefits of Hierarchical PCEs in ASON ..............26\n   6. A Note on BGP-TE\
    \ ...............................................26\n      6.1. Use of BGP for\
    \ TED Synchronization ........................27\n   7. Management Considerations\
    \ ......................................27\n      7.1. Control of Function and\
    \ Policy ............................27\n           7.1.1. Child PCE ..........................................27\n\
    \           7.1.2. Parent PCE .........................................27\n  \
    \         7.1.3. Policy Control .....................................28\n    \
    \  7.2. Information and Data Models ...............................28\n      7.3.\
    \ Liveness Detection and Monitoring .........................28\n      7.4. Verifying\
    \ Correct Operation ...............................28\n      7.5. Impact on Network\
    \ Operation ...............................29\n   8. Security Considerations ........................................29\n\
    \   9. Acknowledgements ...............................................30\n  \
    \ 10. References ....................................................30\n    \
    \  10.1. Normative References .....................................30\n      10.2.\
    \ Informative References ...................................31\n   11. Contributors\
    \ ..................................................32\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The capability to compute the routes of end-to-end inter-domain\
    \ MPLS\n   Traffic Engineering (MPLS-TE) and GMPLS Label Switched Paths (LSPs)\n\
    \   is expressed as requirements in [RFC4105] and [RFC4216].  This\n   capability\
    \ may be realized by a Path Computation Element (PCE).  The\n   PCE architecture\
    \ is defined in [RFC4655].  The methods for\n   establishing and controlling inter-domain\
    \ MPLS-TE and GMPLS LSPs are\n   documented in [RFC4726].\n   In this context,\
    \ a domain can be defined as a separate\n   administrative, geographic, or switching\
    \ environment within the\n   network.  A domain may be further defined as a zone\
    \ of routing or\n   computational ability.  Under these definitions, a domain\
    \ might be\n   categorized as an Autonomous System (AS) or an Interior Gateway\n\
    \   Protocol (IGP) area [RFC4726] [RFC4655].  Domains are connected\n   through\
    \ ingress and egress boundary nodes (BNs).  A more detailed\n   definition is\
    \ given in Section 1.2.\n   In a multi-domain environment, the determination of\
    \ an end-to-end\n   traffic engineered path is a problem because no single point\
    \ of path\n   computation is aware of all of the links and resources in each\n\
    \   domain.  PCEs can be used to compute end-to-end paths using a per-\n   domain\
    \ path computation technique [RFC5152].  Alternatively, the\n   Backward-Recursive\
    \ PCE-based Computation (BRPC) mechanism [RFC5441]\n   allows multiple PCEs to\
    \ collaborate in order to select an optimal\n   end-to-end path that crosses multiple\
    \ domains.  Both mechanisms\n   assume that the sequence of domains to be crossed\
    \ between ingress and\n   egress is known in advance.\n   This document examines\
    \ techniques to establish the optimum path when\n   the sequence of domains is\
    \ not known in advance.  It shows how the\n   PCE architecture can be extended\
    \ to allow the optimum sequence of\n   domains to be selected, and the optimum\
    \ end-to-end path to be\n   derived.\n   The model described in this document\
    \ introduces a hierarchical\n   relationship between domains.  It is applicable\
    \ to environments with\n   small groups of domains where visibility from the ingress\
    \ Label\n   Switching Router (LSR) is limited.  Applying the hierarchical PCE\n\
    \   model to large groups of domains such as the Internet, is not\n   considered\
    \ feasible or desirable, and is out of scope for this\n   document.\n   This document\
    \ does not specify any protocol extensions or\n   enhancements.  That work is\
    \ left for future protocol specification\n   documents.  However, some assumptions\
    \ are made about which protocols\n   will be used to provide specific functions,\
    \ and guidelines to future\n   protocol developers are made in the form of requirements\
    \ statements.\n"
- title: 1.1.  Problem Statement
  contents:
  - "1.1.  Problem Statement\n   Using a PCE to compute a path between nodes within\
    \ a single domain is\n   relatively straightforward.  Computing an end-to-end\
    \ path when the\n   source and destination nodes are located in different domains\n\
    \   requires co-operation between multiple PCEs, each responsible for its\n  \
    \ own domain.\n   Techniques for inter-domain path computation described so far\n\
    \   ([RFC5152] and [RFC5441]) assume that the sequence of domains to be\n   crossed\
    \ from source to destination is well known.  No explanation is\n   given (for\
    \ example, in [RFC4655]) of how this sequence is generated\n   or what criteria\
    \ may be used for the selection of paths between\n   domains.  In small clusters\
    \ of domains, such as simple cooperation\n   between adjacent ISPs, this selection\
    \ process is not complex.  In\n   more advanced deployments (such as optical networks\
    \ constructed from\n   multiple sub-domains, or in multi-AS environments), the\
    \ choice of\n   domains in the end-to-end domain sequence can be critical to the\n\
    \   determination of an optimum end-to-end path.\n"
- title: 1.2.  Definition of a Domain
  contents:
  - "1.2.  Definition of a Domain\n   A domain is defined in [RFC4726] as any collection\
    \ of network\n   elements within a common sphere of address management or path\n\
    \   computational responsibility.  Examples of such domains include IGP\n   areas\
    \ and Autonomous Systems.  Wholly or partially overlapping\n   domains are not\
    \ within the scope of this document.\n   In the context of GMPLS, a particularly\
    \ important example of a domain\n   is the Automatically Switched Optical Network\
    \ (ASON) subnetwork\n   [G-8080].  In this case, a domain might be an ASON Routing\
    \ Area\n   [G-7715].  Furthermore, computation of an end-to-end path requires\n\
    \   the selection of nodes and links within a routing area where some\n   nodes\
    \ may, in fact, be subnetworks.  A PCE may perform the path\n   computation function\
    \ of an ASON Routing Controller as described in\n   [G-7715-2].  See Section 5.2\
    \ for a further discussion of the\n   applicability to the ASON architecture.\n\
    \   This document assumes that the selection of a sequence of domains for\n  \
    \ an end-to-end path is in some sense a hierarchical path computation\n   problem.\
    \  That is, where one mechanism is used to determine a path\n   across a domain,\
    \ a separate mechanism (or at least a separate set of\n   paradigms) is used to\
    \ determine the sequence of domains.  The\n   responsibility for the selection\
    \ of domain interconnection can belong\n   to either or both of the mechanisms.\n"
- title: 1.3.  Assumptions and Requirements
  contents:
  - "1.3.  Assumptions and Requirements\n   Networks are often constructed from multiple\
    \ domains.  These domains\n   are often interconnected via multiple interconnect\
    \ points.  It's\n   assumed that the sequence of domains for an end-to-end path\
    \ is not\n   always well known; that is, an application requesting end-to-end\n\
    \   connectivity has no preference for, or no ability to specify, the\n   sequence\
    \ of domains to be crossed by the path.\n   The traffic engineering properties\
    \ of a domain cannot be seen from\n   outside the domain.  Traffic engineering\
    \ aggregation or abstraction,\n   hides information and can lead to failed path\
    \ setup or the selection\n   of suboptimal end-to-end paths [RFC4726].  The aggregation\
    \ process\n   may also have significant scaling issues for networks with many\n\
    \   possible routes and multiple TE metrics.  Flooding TE information\n   breaks\
    \ confidentiality and does not scale in the routing protocol.\n   See Section\
    \ 6 for a discussion of the concept of inter-domain traffic\n   engineering information\
    \ exchange known as BGP-TE.\n   The primary goal of this document is to define\
    \ how to derive optimal\n   end-to-end, multi-domain paths when the sequence of\
    \ domains is not\n   known in advance.  The solution needs to be scalable and\
    \ to maintain\n   internal domain topology confidentiality while providing the\
    \ optimal\n   end-to-end path.  It cannot rely on the exchange of TE information\n\
    \   between domains, and for the confidentiality, scaling, and\n   aggregation\
    \ reasons just cited, it cannot utilize a computation\n   element that has universal\
    \ knowledge of TE properties and topology of\n   all domains.\n   The sub-sections\
    \ that follow set out the primary objectives and\n   requirements to be satisfied\
    \ by a PCE solution to multi-domain path\n   computation.\n"
- title: 1.3.1.  Metric Objectives
  contents:
  - "1.3.1.  Metric Objectives\n   The definition of optimality is dependent on policy\
    \ and is based on a\n   single objective or a group of objectives.  An objective\
    \ is expressed\n   as an objective function [RFC5541] and may be specified on\
    \ a path\n   computation request.  The following objective functions are\n   identified\
    \ in this document.  They define how the path metrics and TE\n   link qualities\
    \ are manipulated during inter-domain path computation.\n   The list is not proscriptive\
    \ and may be expanded in other documents.\n   o  Minimize the cost of the path\
    \ [RFC5541].\n   o  Select a path using links with the minimal load [RFC5541].\n\
    \   o  Select a path that leaves the maximum residual bandwidth\n      [RFC5541].\n\
    \   o  Minimize aggregate bandwidth consumption [RFC5541].\n   o  Minimize the\
    \ load of the most loaded link [RFC5541].\n   o  Minimize the cumulative cost\
    \ of a set of paths [RFC5541].\n   o  Minimize or cap the number of domains crossed.\n\
    \   o  Disallow domain re-entry.\n   See Section 4.1 for further discussion of\
    \ objective functions.\n"
- title: 1.3.2.  Diversity
  contents:
  - '1.3.2.  Diversity

    '
- title: 1.3.2.1.  Physical Diversity
  contents:
  - "1.3.2.1.  Physical Diversity\n   Within a \"Carrier's Carrier\" environment,\
    \ MPLS services may share\n   common underlying equipment and resources, including\
    \ optical fiber\n   and nodes.  An MPLS service request may require a path for\
    \ traffic\n   that is physically disjointed from another service.  Thus, if a\n\
    \   physical link or node fails on one of the disjoint paths, not all\n   traffic\
    \ is lost.\n"
- title: 1.3.2.2.  Domain Diversity
  contents:
  - "1.3.2.2.  Domain Diversity\n   A pair of paths are domain-diverse if they do\
    \ not transit any of the\n   same domains.  A pair of paths that share a common\
    \ ingress and egress\n   are domain-diverse if they only share the same domains\
    \ at the ingress\n   and egress (the ingress and egress domains).  Domain diversity\
    \ may be\n   maximized for a pair of paths by selecting paths that have the\n\
    \   smallest number of shared domains.  (Note that this is not the same\n   as\
    \ finding paths with the greatest number of distinct domains!)\n   Path computation\
    \ should facilitate the selection of paths that share\n   ingress and egress domains\
    \ but do not share any transit domains.\n   This provides a way to reduce the\
    \ risk of shared failure along any\n   path and automatically helps to ensure\
    \ path diversity for most of the\n   route of a pair of LSPs.\n   Thus, domain\
    \ path selection should provide the capability to include\n   or exclude specific\
    \ domains and specific boundary nodes.\n"
- title: 1.3.3.  Existing Traffic Engineering Constraints
  contents:
  - "1.3.3.  Existing Traffic Engineering Constraints\n   Any solution should take\
    \ advantage of typical traffic engineering\n   constraints (hop count, bandwidth,\
    \ lambda continuity, path cost,\n   etc.) to meet the service demands expressed\
    \ in the path computation\n   request [RFC4655].\n"
- title: 1.3.4.  Commercial Constraints
  contents:
  - "1.3.4.  Commercial Constraints\n   The solution should provide the capability\
    \ to include commercially\n   relevant constraints such as policy, Service Level\
    \ Agreements (SLAs),\n   security, peering preferences, and monetary costs.\n\
    \   Additionally, it may be necessary for the service provider to request\n  \
    \ that specific domains are included or excluded based on commercial\n   relationships,\
    \ security implications, and reliability.\n"
- title: 1.3.5.  Domain Confidentiality
  contents:
  - "1.3.5.  Domain Confidentiality\n   A key requirement is the ability to maintain\
    \ domain confidentiality\n   when computing inter-domain end-to-end paths.  It\
    \ should be possible\n   for local policy to require that a PCE not disclose to\
    \ any other PCE\n   the intra-domain paths it computes or the internal topology\
    \ of the\n   domain it serves.  This requirement should have no impact in the\n\
    \   optimality or quality of the end-to-end path that is derived.\n"
- title: 1.3.6.  Limiting Information Aggregation
  contents:
  - "1.3.6.  Limiting Information Aggregation\n   In order to reduce processing overhead\
    \ and to not sacrifice\n   computational detail, there should be no requirement\
    \ to aggregate or\n   abstract traffic engineering link information.\n"
- title: 1.3.7.  Domain Interconnection Discovery
  contents:
  - "1.3.7.  Domain Interconnection Discovery\n   To support domain mesh topologies,\
    \ the solution should allow the\n   discovery and selection of domain interconnections.\
    \  Pre-\n   configuration of preferred domain interconnections should also be\n\
    \   supported for network operators that have bilateral agreement and\n   have\
    \ a preference for the choice of points of interconnection.\n"
- title: 1.4.  Terminology
  contents:
  - "1.4.  Terminology\n   This document uses PCE terminology defined in [RFC4655],\
    \ [RFC4726],\n   and [RFC5440].  Additional terms are defined below.\n   Domain\
    \ Path: The sequence of domains for a path.\n   Ingress Domain: The domain that\
    \ includes the ingress LSR of a path.\n   Transit Domain: A domain that has an\
    \ upstream and downstream neighbor\n   domain for a specific path.\n   Egress\
    \ Domain: The domain that includes the egress LSR of a path.\n   Boundary Nodes:\
    \ Each Domain has entry LSRs and exit LSRs that could\n   be Area Border Routers\
    \ (ABRs) or Autonomous System Border Routers\n   (ASBRs) depending on the type\
    \ of domain.  They are defined here more\n   generically as Boundary Nodes (BNs).\n\
    \   Entry BN of domain(n): a BN connecting domain(n-1) to domain(n) on a\n   path.\n\
    \   Exit BN of domain(n): a BN connecting domain(n) to domain(n+1) on a\n   path.\n\
    \   Parent Domain: A domain higher up in a domain hierarchy such that it\n   contains\
    \ other domains (child domains) and potentially other links\n   and nodes.\n \
    \  Child Domain: A domain lower in a domain hierarchy such that it has a\n   parent\
    \ domain.\n   Parent PCE: A PCE responsible for selecting a path across a parent\n\
    \   domain and any number of child domains by coordinating with child\n   PCEs\
    \ and examining a topology map that shows domain inter-\n   connectivity.\n  \
    \ Child PCE: A PCE responsible for computing the path across one or\n   more specific\
    \ (child) domains.  A child PCE maintains a relationship\n   with at least one\
    \ parent PCE.\n   Objective Function (OF): A set of one or more optimization criteria\n\
    \   used for the computation of a single path (e.g., path cost\n   minimization),\
    \ or the synchronized computation of a set of paths\n   (e.g., aggregate bandwidth\
    \ consumption minimization).  See [RFC4655]\n   and [RFC5541].\n"
- title: 2.  Examination of Existing PCE Mechanisms
  contents:
  - "2.  Examination of Existing PCE Mechanisms\n   This section provides a brief\
    \ overview of two existing PCE\n   cooperation mechanisms called the Per-Domain\
    \ Path Computation method\n   and the BRPC method.  It describes the applicability\
    \ of these methods\n   to the multi-domain problem.\n"
- title: 2.1.  Per-Domain Path Computation
  contents:
  - "2.1.  Per-Domain Path Computation\n   The Per-Domain Path Computation method\
    \ for establishing inter-domain\n   TE-LSPs [RFC5152] defines a technique whereby\
    \ the path is computed\n   during the signaling process on a per-domain basis.\
    \  The entry BN of\n   each domain is responsible for performing the path computation\
    \ for\n   the section of the LSP that crosses the domain, or for requesting\n\
    \   that a PCE for that domain computes that piece of the path.\n   During per-domain\
    \ path computation, each computation results in a\n   path that crosses the domain\
    \ to provide connectivity to the next\n   domain in the sequence.  The chosen\
    \ path across the domain will be\n   selected as best according to the optimization\
    \ characteristics of the\n   computation.  The next domain in the sequence is\
    \ usually indicated in\n   signaling by an identifier of the next domain or the\
    \ identity of the\n   next entry BN.\n   Per-domain path computation may lead\
    \ to suboptimal end-to-end paths\n   because the most optimal path in one domain\
    \ may lead to the choice of\n   an entry BN for the next domain that results in\
    \ a very poor path\n   across that next domain.\n   In the case that the domain\
    \ path (in particular, the sequence of\n   boundary nodes) is not known, the path\
    \ computing entity must select\n   an exit BN based on some determination of how\
    \ to reach the\n   destination that is outside the domain for which the path computing\n\
    \   entity has computational responsibility.  [RFC5152] suggest that this\n  \
    \ might be achieved using the IP shortest path as advertised by BGP.\n   Note,\
    \ however, that the existence of an IP forwarding path does not\n   guarantee\
    \ the presence of sufficient bandwidth, let alone an optimal\n   TE path.  Furthermore,\
    \ in many GMPLS systems, inter-domain IP routing\n   will not be present.  Thus,\
    \ per-domain path computation may require a\n   significant number of crankback\
    \ routing attempts to establish even a\n   suboptimal path.\n   Note also that\
    \ the path computing entities in each domain may have\n   different computation\
    \ capabilities, may run different path\n   computation algorithms, and may apply\
    \ different sets of constraints\n   and optimization criteria, etc.\n   This can\
    \ result in the end-to-end path being inconsistent and\n   suboptimal.\n   Per-domain\
    \ path computation can suit simply connected domains where\n   the preferred points\
    \ of interconnection are known.\n"
- title: 2.2.  Backward-Recursive PCE-Based Computation
  contents:
  - "2.2.  Backward-Recursive PCE-Based Computation\n   The Backward-Recursive PCE-based\
    \ Computation (BRPC) [RFC5441]\n   procedure involves cooperation and communication\
    \ between PCEs in\n   order to compute an optimal end-to-end path across multiple\
    \ domains.\n   The sequence of domains to be traversed can be determined either\n\
    \   before or during the path computation.  In the case where the\n   sequence\
    \ of domains is known, the ingress Path Computation Client\n   (PCC) sends a path\
    \ computation request to a PCE responsible for the\n   ingress domain.  This request\
    \ is forwarded between PCEs, domain-by-\n   domain, to a PCE responsible for the\
    \ egress domain.  The PCE in the\n   egress domain creates a set of optimal paths\
    \ from all of the domain\n   entry BNs to the egress LSR.  This set is represented\
    \ as a tree of\n   potential paths called a Virtual Shortest Path Tree (VSPT),\
    \ and the\n   PCE passes it back to the previous PCE on the domain path.  As the\n\
    \   VSPT is passed back toward the ingress domain, each PCE computes the\n   optimal\
    \ paths from its entry BNs to its exit BNs that connect to the\n   rest of the\
    \ tree.  It adds these paths to the VSPT and passes the\n   VSPT on until the\
    \ PCE for the ingress domain is reached and computes\n   paths from the ingress\
    \ LSR to connect to the rest of the tree.  The\n   ingress PCE then selects the\
    \ optimal end-to-end path from the tree,\n   and returns the path to the initiating\
    \ PCC.\n   BRPC may suit environments where multiple connections exist between\n\
    \   domains and there is no preference for the choice of points of\n   interconnection.\
    \  It is best suited to scenarios where the domain\n   path is known in advance,\
    \ but it can also be used when the domain\n   path is not known.\n"
- title: 2.2.1.  Applicability of BRPC When the Domain Path is Not Known
  contents:
  - "2.2.1.  Applicability of BRPC When the Domain Path is Not Known\n   As described\
    \ above, BRPC can be used to determine an optimal inter-\n   domain path when\
    \ the domain sequence is known.  Even when the\n   sequence of domains is not\
    \ known, BRPC could be used as follows.\n   o  The PCC sends a request to a PCE\
    \ for the ingress domain (the\n      ingress PCE).\n   o  The ingress PCE sends\
    \ the path computation request direct to a PCE\n      responsible for the domain\
    \ containing the destination node (the\n      egress PCE).\n   o  The egress PCE\
    \ computes an egress VSPT and passes it to a PCE\n      responsible for each of\
    \ the adjacent (potentially upstream)\n      domains.\n   o  Each PCE in turn\
    \ constructs a VSPT and passes it on to all of its\n      neighboring PCEs.\n\
    \   o  When the ingress PCE has received a VSPT from each of its\n      neighboring\
    \ domains, it is able to select the optimum path.\n   Clearly, this mechanism\
    \ (which could be called path computation\n   flooding) has significant scaling\
    \ issues.  It could be improved by\n   the application of policy and filtering,\
    \ but such mechanisms are not\n   simple and would still leave scaling concerns.\n"
- title: 3.  Hierarchical PCE
  contents:
  - "3.  Hierarchical PCE\n   In the hierarchical PCE architecture, a parent PCE maintains\
    \ a domain\n   topology map that contains the child domains (seen as vertices\
    \ in the\n   topology) and their interconnections (links in the topology).  The\n\
    \   parent PCE has no information about the content of the child domains;\n  \
    \ that is, the parent PCE does not know about the resource availability\n   within\
    \ the child domains, nor does it know about the availability of\n   connectivity\
    \ across each domain because such knowledge would violate\n   the confidentiality\
    \ requirement and either would require flooding of\n   full information to the\
    \ parent (scaling issue) or would necessitate\n   some form of aggregation.  The\
    \ parent PCE is aware of the TE\n   capabilities of the interconnections between\
    \ child domains as these\n   interconnections are links in its own topology map.\n\
    \   Note that, in the case that the domains are IGP areas, there is no\n   link\
    \ between the domains (the ABRs have a presence in both\n   neighboring areas).\
    \  The parent domain may choose to represent this\n   in its Traffic Engineering\
    \ Database (TED) as a virtual link that is\n   unconstrained and has zero cost,\
    \ but this is entirely an\n   implementation issue.\n   Each child domain has\
    \ at least one PCE capable of computing paths\n   across the domain.  These PCEs\
    \ are known as child PCEs and have a\n   relationship with the parent PCE.  Each\
    \ child PCE also knows the\n   identity of the domains that neighbor its own domain.\
    \  A child PCE\n   only knows the topology of the domain that it serves and does\
    \ not\n   know the topology of other child domains.  Child PCEs are also not\n\
    \   aware of the general domain mesh connectivity (i.e., the domain\n   topology\
    \ map) beyond the connectivity to the immediate neighbor\n   domains of the domain\
    \ it serves.\n   The parent PCE builds the domain topology map either from\n \
    \  configuration or from information received from each child PCE.  This\n   tells\
    \ it how the domains are interconnected including the TE\n   properties of the\
    \ domain interconnections.  But, the parent PCE does\n   not know the contents\
    \ of the child domains.  Discovery of the domain\n   topology and domain interconnections\
    \ is discussed further in Section\n   4.3.\n   When a multi-domain path is needed,\
    \ the ingress PCE sends a request\n   to the parent PCE (using the Path Computation\
    \ Element Protocol, PCEP\n   [RFC5440]).  The parent PCE selects a set of candidate\
    \ domain paths\n   based on the domain topology and the state of the inter-domain\
    \ links.\n   It then sends computation requests to the child PCEs responsible\
    \ for\n   each of the domains on the candidate domain paths.  These requests\n\
    \   may be sequential or parallel depending on implementation details.\n   Each\
    \ child PCE computes a set of candidate path segments across its\n   domain and\
    \ sends the results to the parent PCE.  The parent PCE uses\n   this information\
    \ to select path segments and concatenate them to\n   derive the optimal end-to-end\
    \ inter-domain path.  The end-to-end path\n   is then sent to the child PCE that\
    \ received the initial path request,\n   and this child PCE passes the path on\
    \ to the PCC that issued the\n   original request.\n   Specific deployment and\
    \ implementation scenarios are out of scope of\n   this document.  However, the\
    \ hierarchical PCE architecture described\n   does support the function of parent\
    \ PCE and child PCE being\n   implemented as a common PCE.\n"
- title: 4.  Hierarchical PCE Procedures
  contents:
  - '4.  Hierarchical PCE Procedures

    '
- title: 4.1.  Objective Functions and Policy
  contents:
  - "4.1.  Objective Functions and Policy\n   The definition of \"optimal\" in the\
    \ context of deriving an optimal\n   end-to-end path is dependent on the choices\
    \ that are made during the\n   path selection.  An Objective Function (OF) [RFC5541],\
    \ or set of OFs,\n   specify the intentions of the path computation and so define\
    \ the\n   \"optimality\" in the context of that computation.\n   An OF specifies\
    \ the desired outcome of a computation: it does not\n   describe or demand the\
    \ algorithm to use, and an implementation may\n   apply any algorithm or set of\
    \ algorithms to achieve the result\n   indicated by the OF.  OFs can be included\
    \ in PCEP computation\n   requests to satisfy the policies encoded or configured\
    \ at the PCC,\n   and a PCE may be subject to policy in determining whether it\
    \ meets\n   the OFs included in the computation request, or applies its own OFs.\n\
    \   In inter-domain path computation, the selection of a domain sequence,\n  \
    \ the computation of each (per-domain) path fragment, and the\n   determination\
    \ of the end-to-end path may each be subject to different\n   OFs and different\
    \ policy.\n   When computing end-to-end paths, OFs may include (see Section 1.3.1):\n\
    \   o  Minimum cost path\n   o  Minimum load path\n   o  Maximum residual bandwidth\
    \ path\n   o  Minimize aggregate bandwidth consumption\n   o  Minimize or cap\
    \ the number of transit domains\n   o  Disallow domain re-entry\n   The objective\
    \ function may be requested by the PCC, the ingress\n   domain PCE (according\
    \ to local policy), or applied by the parent PCE\n   according to inter-domain\
    \ policy.\n   More than one OF (or a composite OF) may be chosen to apply to a\n\
    \   single computation provided they are not contradictory.  Composite\n   OFs\
    \ may include weightings and preferences for the fulfillment of\n   pieces of\
    \ the desired outcome.\n"
- title: 4.2.  Maintaining Domain Confidentiality
  contents:
  - "4.2.  Maintaining Domain Confidentiality\n   Information about the content of\
    \ child domains is not shared for\n   scaling and confidentiality reasons.  This\
    \ means that a parent PCE is\n   aware of the domain topology and the nature of\
    \ the connections\n   between domains but is not aware of the content of the domains.\n\
    \   Similarly, a child PCE cannot know the internal topology of another\n   child\
    \ domain.  Child PCEs also do not know the general domain mesh\n   connectivity;\
    \ this information is only known by the parent PCE.\n   As described in the earlier\
    \ sections of this document, PCEs can\n   exchange path information in order to\
    \ construct an end-to-end inter-\n   domain path.  Each per-domain path fragment\
    \ reveals information about\n   the topology and resource availability within\
    \ a domain.  Some\n   management domains or ASes will not want to share this information\n\
    \   outside of the domain (even with a trusted parent PCE).  In order to\n   conceal\
    \ the information, a PCE may replace a path segment with a\n   path-key [RFC5520].\
    \  This mechanism effectively hides the content of\n   a segment of a path.\n"
- title: 4.3.  PCE Discovery
  contents:
  - "4.3.  PCE Discovery\n   It is a simple matter for each child PCE to be configured\
    \ with the\n   address of its parent PCE.  Typically, there will only be one or\
    \ two\n   parents of any child.\n   The parent PCE also needs to be aware of the\
    \ child PCEs for all child\n   domains that it can see.  This information is most\
    \ likely to be\n   configured (as part of the administrative definition of each\
    \ domain).\n   Discovery of the relationships between parent PCEs and child PCEs\n\
    \   does not form part of the hierarchical PCE architecture.  Mechanisms\n   that\
    \ rely on advertising or querying PCE locations across domain or\n   provider\
    \ boundaries are undesirable for security, scaling,\n   commercial, and confidentiality\
    \ reasons.\n   The parent PCE also needs to know the inter-domain connectivity.\n\
    \   This information could be configured with suitable policy and\n   commercial\
    \ rules, or could be learned from the child PCEs as\n   described in Section 4.4.\n\
    \   In order for the parent PCE to learn about domain interconnection,\n   the\
    \ child PCE will report the identity of its neighbor domains.  The\n   IGP in\
    \ each neighbor domain can advertise its inter-domain TE link\n   capabilities\
    \ [RFC5316] [RFC5392].  This information can be collected\n   by the child PCEs\
    \ and forwarded to the parent PCE, or the parent PCE\n   could participate in\
    \ the IGP in the child domains.\n"
- title: 4.4.  Traffic Engineering Database for the Parent Domain
  contents:
  - "4.4.  Traffic Engineering Database for the Parent Domain\n   The parent PCE maintains\
    \ a domain topology map of the child domains\n   and their interconnectivity.\
    \  Where inter-domain connectivity is\n   provided by TE links, the capabilities\
    \ of those links may also be\n   known to the parent PCE.  The parent PCE maintains\
    \ a TED for the\n   parent domain in the same way that any PCE does.\n   The parent\
    \ domain may just be the collection of child domains and\n   their interconnectivity,\
    \ may include details of the inter-domain TE\n   links, and may contain nodes\
    \ and links in its own right.\n   The mechanism for building the parent TED is\
    \ likely to rely heavily\n   on administrative configuration and commercial issues\
    \ because the\n   network was probably partitioned into domains specifically to\
    \ address\n   these issues.\n   In practice, certain information may be passed\
    \ from the child domains\n   to the parent PCE to help build the parent TED. \
    \ In theory, the\n   parent PCE could listen to the routing protocols in the child\n\
    \   domains, but this would violate the confidentiality and scaling\n   principles\
    \ that may be responsible for the partition of the network\n   into domains. \
    \ So, it is much more likely that a suitable solution\n   will involve specific\
    \ communication from an entity in the child\n   domain (such as the child PCE)\
    \ to convey the necessary information.\n   As already mentioned, the \"necessary\
    \ information\" relates to how the\n   child domains are inter-connected.  The\
    \ topology and available\n   resources within the child domain do not need to\
    \ be communicated to\n   the parent PCE: doing so would violate the PCE architecture.\n\
    \   Mechanisms for reporting this information are described in the\n   examples\
    \ in Section 4.6 in abstract terms as a child PCE \"reports its\n   neighbor domain\
    \ connectivity to its parent PCE\"; the specifics of a\n   solution are out of\
    \ scope of this document, but the requirements are\n   indicated in Section 4.8.\
    \  See Section 6 for a brief discussion of\n   BGP-TE.\n   In models such as ASON\
    \ (see Section 5.2), it is possible to consider\n   a separate instance of an\
    \ IGP running within the parent domain where\n   the participating protocol speakers\
    \ are the nodes directly present in\n   that domain and the PCEs (Routing Controllers)\
    \ responsible for each\n   of the child domains.\n"
- title: 4.5.  Determination of Destination Domain
  contents:
  - "4.5.  Determination of Destination Domain\n   The PCC asking for an inter-domain\
    \ path computation is aware of the\n   identity of the destination node by definition.\
    \  If it knows the\n   egress domain, it can supply this information as part of\
    \ the path\n   computation request.  However, if it does not know the egress domain,\n\
    \   this information must be known by the child PCE or known/determined\n   by\
    \ the parent PCE.\n   In some specialist topologies the parent PCE could determine\
    \ the\n   destination domain based on the destination address, for example,\n\
    \   from configuration.  However, this is not appropriate for many multi-\n  \
    \ domain addressing scenarios.  In IP-based multi-domain networks, the\n   parent\
    \ PCE may be able to determine the destination domain by\n   participating in\
    \ inter-domain routing.  Finally, the parent PCE could\n   issue specific requests\
    \ to the child PCEs to discover if they contain\n   the destination node, but\
    \ this has scaling implications.\n   For the purposes of this document, the precise\
    \ mechanism of the\n   discovery of the destination domain is left out of scope.\
    \  Suffice to\n   say that for each multi-domain path computation some mechanism\
    \ will\n   be required to determine the location of the destination.\n"
- title: 4.6.  Hierarchical PCE Examples
  contents:
  - "4.6.  Hierarchical PCE Examples\n   The following example describes the generic\
    \ hierarchical domain\n   topology.  Figure 1 demonstrates four interconnected\
    \ domains within a\n   fifth, parent domain.  Each domain contains a single PCE:\n\
    \   o  Domain 1 is the ingress domain and child PCE 1 is able to compute\n   \
    \   paths within the domain.  Its neighbors are Domain 2 and Domain 4.\n     \
    \ The domain also contains the source LSR (S) and three egress\n      boundary\
    \ nodes (BN11, BN12, and BN13).\n   o  Domain 2 is served by child PCE 2.  Its\
    \ neighbors are Domain 1 and\n      Domain 3.  The domain also contains four boundary\
    \ nodes (BN21,\n      BN22, BN23, and BN24).\n   o  Domain 3 is the egress domain\
    \ and is served by child PCE 3.  Its\n      neighbors are Domain 2 and Domain\
    \ 4.  The domain also contains the\n      destination LSR (D) and three ingress\
    \ boundary nodes (BN31, BN32,\n      and BN33).\n   o  Domain 4 is served by child\
    \ PCE 4.  Its neighbors are Domain 2 and\n      Domain 3.  The domain also contains\
    \ two boundary nodes (BN41 and\n      BN42).\n   All of these domains are contained\
    \ within Domain 5, which is served\n   by the parent PCE (PCE 5).\n    -----------------------------------------------------------------\n\
    \   |   Domain 5                                                      |\n   |\
    \                              -----                              |\n   |    \
    \                         |PCE 5|                             |\n   |        \
    \                      -----                              |\n   |            \
    \                                                     |\n   |    ----------------\
    \     ----------------     ----------------   |\n   |   | Domain 1       |   |\
    \ Domain 2       |   | Domain 3       |  |\n   |   |                |   |    \
    \            |   |                |  |\n   |   |        -----   |   |        -----\
    \   |   |        -----   |  |\n   |   |       |PCE 1|  |   |       |PCE 2|  |\
    \   |       |PCE 3|  |  |\n   |   |        -----   |   |        -----   |   |\
    \        -----   |  |\n   |   |                |   |                |   |    \
    \            |  |\n   |   |            ----|   |----        ----|   |----    \
    \        |  |\n   |   |           |BN11+---+BN21|      |BN23+---+BN31|       \
    \    |  |\n   |   |   -        ----|   |----        ----|   |----        -   |\
    \  |\n   |   |  |S|           |   |                |   |           |D|  |  |\n\
    \   |   |   -        ----|   |----        ----|   |----        -   |  |\n   |\
    \   |           |BN12+---+BN22|      |BN24+---+BN32|           |  |\n   |   |\
    \            ----|   |----        ----|   |----            |  |\n   |   |    \
    \            |   |                |   |                |  |\n   |   |        \
    \ ----   |   |                |   |   ----         |  |\n   |   |        |BN13|\
    \  |   |                |   |  |BN33|        |  |\n   |    -----------+----  \
    \   ----------------     ----+-----------   |\n   |                \\        \
    \                        /               |\n   |                 \\       ----------------\
    \       /                |\n   |                  \\     |                |  \
    \   /                 |\n   |                   \\    |----        ----|    /\
    \                  |\n   |                    ----+BN41|      |BN42+----     \
    \              |\n   |                       |----        ----|              \
    \          |\n   |                       |                |                  \
    \      |\n   |                       |        -----   |                      \
    \  |\n   |                       |       |PCE 4|  |                        |\n\
    \   |                       |        -----   |                        |\n   |\
    \                       |                |                        |\n   |    \
    \                   | Domain 4       |                        |\n   |        \
    \                ----------------                         |\n   |            \
    \                                                     |\n    -----------------------------------------------------------------\n\
    \                 Figure 1: Sample Hierarchical Domain Topology\n   Figure 2 shows\
    \ the view of the domain topology as seen by the parent\n   PCE (PCE 5).  This\
    \ view is an abstracted topology; PCE 5 is aware of\n   domain connectivity but\
    \ not of the internal topology within each\n   domain.\n                     \
    \  ----------------------------\n                      | Domain 5            \
    \       |\n                      |            ----            |\n            \
    \          |           |PCE5|           |\n                      |           \
    \ ----            |\n                      |                            |\n  \
    \                    |   ----     ----     ----   |\n                      | \
    \ |    |---|    |---|    |  |\n                      |  | D1 |   | D2 |   | D3\
    \ |  |\n                      |  |    |---|    |---|    |  |\n               \
    \       |   ----     ----     ----   |\n                      |    \\       ----\
    \      /     |\n                      |     \\     |    |    /      |\n      \
    \                |       ----| D4 |----       |\n                      |     \
    \      |    |           |\n                      |            ----           \
    \ |\n                      |                            |\n                  \
    \     ----------------------------\n      Figure 2: Abstract Domain Topology as\
    \ Seen by the Parent PCE\n"
- title: 4.6.1.  Hierarchical PCE Initial Information Exchange
  contents:
  - "4.6.1.  Hierarchical PCE Initial Information Exchange\n   Based on the topology\
    \ in Figure 1, the following is an illustration\n   of the initial hierarchical\
    \ PCE information exchange.\n   1.  Child PCE 1, the PCE responsible for Domain\
    \ 1, is configured with\n       the location of its parent PCE (PCE 5).\n   2.\
    \  Child PCE 1 establishes contact with its parent PCE.  The parent\n       applies\
    \ policy to ensure that communication with PCE 1 is\n       allowed.\n   3.  Child\
    \ PCE 1 listens to the IGP in its domain and learns its\n       inter-domain connectivity.\
    \  That is, it learns about the links\n       BN11-BN21, BN12-BN22, and BN13-BN41.\n\
    \   4.  Child PCE 1 reports its neighbor domain connectivity to its\n       parent\
    \ PCE.\n   5.  Child PCE 1 reports any change in the resource availability on\n\
    \       its inter-domain links to its parent PCE.\n   Each child PCE performs\
    \ steps 1 through 5 so that the parent PCE can\n   create a domain topology view\
    \ as shown in Figure 2.\n"
- title: 4.6.2.  Hierarchical PCE End-to-End Path Computation Procedure
  contents:
  - "4.6.2.  Hierarchical PCE End-to-End Path Computation Procedure\n   The procedure\
    \ below is an example of a source PCC requesting an end-\n   to-end path in a\
    \ multi-domain environment.  The topology is\n   represented in Figure 1.  It\
    \ is assumed that the each child PCE has\n   connected to its parent PCE and exchanged\
    \ the initial information\n   required for the parent PCE to create its domain\
    \ topology view as\n   described in Section 4.6.1.\n   1.  The source PCC (the\
    \ ingress LSR in our example) sends a request\n       to the PCE responsible for\
    \ its domain (PCE 1) for a path to the\n       destination LSR (D).\n   2.  PCE\
    \ 1 determines the destination is not in domain 1.\n   3.  PCE 1 sends a computation\
    \ request to its parent PCE (PCE 5).\n   4.  The parent PCE determines that the\
    \ destination is in Domain 3.\n       (See Section 4.5.)\n   5.  PCE 5 determines\
    \ the likely domain paths according to the domain\n       interconnectivity and\
    \ TE capabilities between the domains.  For\n       example, assuming that the\
    \ link BN12-BN22 is not suitable for the\n       requested path, three domain\
    \ paths are determined:\n         S-BN11-BN21-D2-BN23-BN31-D\n         S-BN11-BN21-D2-BN24-BN32-D\n\
    \         S-BN13-BN41-D4-BN42-BN33-D\n   6.  PCE 5 sends edge-to-edge path computation\
    \ requests to PCE 2,\n       which is responsible for Domain 2 (i.e., BN21-to-BN23\
    \ and\n       BN21-to-BN24), and to PCE 4 for Domain 4 (i.e., BN41-to-BN42).\n\
    \   7.  PCE 5 sends source-to-edge path computation requests to PCE 1,\n     \
    \  which is responsible for Domain 1 (i.e., S-to-BN11 and\n       S-to-BN13).\n\
    \   8.  PCE 5 sends edge-to-egress path computation requests to PCE 3,\n     \
    \  which is responsible for Domain 3 (i.e., BN31-to-D, BN32-to-D,\n       and\
    \ BN33-to-D).\n   9.  PCE 5 correlates all the computation responses from each\
    \ child\n       PCE, adds in the information about the inter-domain links, and\n\
    \       applies any requested and locally configured policies.\n   10. PCE 5 then\
    \ selects the optimal end-to-end multi-domain path that\n       meets the policies\
    \ and objective functions, and supplies the\n       resulting path to PCE 1.\n\
    \   11. PCE 1 forwards the path to the PCC (the ingress LSR).\n   Note that there\
    \ is no requirement for steps 6, 7, and 8 to be carried\n   out in parallel or\
    \ in series.  Indeed, they could be overlapped with\n   step 5.  This is an implementation\
    \ issue.\n"
- title: 4.7.  Hierarchical PCE Error Handling
  contents:
  - "4.7.  Hierarchical PCE Error Handling\n   In the event that a child PCE in a\
    \ domain cannot find a suitable path\n   to the egress, the child PCE should return\
    \ the relevant error to\n   notify the parent PCE.  Depending on the error response,\
    \ the parent\n   PCE selects one of the following actions:\n   o  Cancel the request\
    \ and send the relevant response back to the\n      initial child PCE that requested\
    \ an end-to-end path;\n   o  Relax some of the constraints associated with the\
    \ initial path\n      request; or\n   o  Select another candidate domain and send\
    \ the path request to the\n      child PCE responsible for the domain.\n   If\
    \ the parent PCE does not receive a response from a child PCE within\n   an allotted\
    \ time period, the parent PCE can elect to:\n   o  Cancel the request and send\
    \ the relevant response back to the\n   initial child PCE that requested an end-to-end\
    \ path; o Send the path\n   request to another child PCE in the same domain, if\
    \ a secondary child\n   PCE exists; o Select another candidate domain and send\
    \ the path\n   request to the child PCE responsible for that domain.\n   The parent\
    \ PCE may also want to prune any unresponsive child PCE\n   domain paths from\
    \ the candidate set.\n"
- title: 4.8.  Requirements for Hierarchical PCEP Protocol Extensions
  contents:
  - "4.8.  Requirements for Hierarchical PCEP Protocol Extensions\n   This section\
    \ lists the high-level requirements for extensions to the\n   PCEP to support\
    \ the hierarchical PCE model.  It is provided to offer\n   guidance to PCEP protocol\
    \ developers in designing a solution suitable\n   for use in a hierarchical PCE\
    \ framework.\n"
- title: 4.8.1.  PCEP Request Qualifiers
  contents:
  - "4.8.1.  PCEP Request Qualifiers\n   Path Computation Request (PCReq) messages\
    \ are used by a PCC or a PCE\n   to make a computation request or enquiry to a\
    \ PCE.  The requests are\n   qualified so that the PCE knows what type of action\
    \ is required.\n   Support of the hierarchical PCE architecture will introduce\
    \ two new\n   qualifications as follows:\n   o  It must be possible for a child\
    \ PCE to indicate that the response\n      it receives from the parent PCE should\
    \ consist of a domain\n      sequence only (i.e., not a fully specified end-to-end\
    \ path).  This\n      allows the child PCE to initiate Per-Domain or BRPC.\n \
    \  o  A parent PCE may need to be able to ask a child PCE whether a\n      particular\
    \ node address (the destination of an end-to-end path) is\n      present in the\
    \ domain that the child PCE serves.\n   In PCEP, such request qualifications are\
    \ carried as bit flags in the\n   RP object (Request Parameter object) within\
    \ the PCReq message.\n"
- title: 4.8.2.  Indication of Hierarchical PCE Capability
  contents:
  - "4.8.2.  Indication of Hierarchical PCE Capability\n   Although parent/child PCE\
    \ relationships are likely configured, it\n   will assist network operations if\
    \ the parent PCE is able to indicate\n   to the child that it really is capable\
    \ of acting as a parent PCE.\n   This will help to trap misconfigurations.\n \
    \  In PCEP, such capabilities are carried in the Open Object within the\n   Open\
    \ message.\n"
- title: 4.8.3.  Intention to Utilize Parent PCE Capabilities
  contents:
  - "4.8.3.  Intention to Utilize Parent PCE Capabilities\n   A PCE that is capable\
    \ of acting as a parent PCE might not be\n   configured or willing to act as the\
    \ parent for a specific child PCE.\n   This fact could be determined when the\
    \ child sends a PCReq that\n   requires parental activity (such as querying other\
    \ child PCEs), and\n   could result in a negative response in a PCEP Error (PCErr)\
    \ message.\n   However, the expense of a poorly targeted PCReq can be avoided\
    \ if the\n   child PCE indicates that it might wish to use the parent-capable\
    \ PCE\n   as a parent (for example, on the Open message), and if the parent-\n\
    \   capable PCE determines at that time whether it is willing to act as a\n  \
    \ parent to this child.\n"
- title: 4.8.4.  Communication of Domain Connectivity Information
  contents:
  - "4.8.4.  Communication of Domain Connectivity Information\n   Section 4.4 describes\
    \ how the parent PCE needs a parent TED and\n   indicates that the information\
    \ might be supplied from the child PCEs\n   in each domain.  This requires a mechanism\
    \ whereby information about\n   inter-domain links can be supplied by a child\
    \ PCE to a parent PCE,\n   for example, on a PCEP Notify (PCNtf) message.\n  \
    \ The information that would be exchanged includes:\n   o  Identifier of advertising\
    \ child PCE\n   o  Identifier of PCE's domain\n   o  Identifier of the link\n\
    \   o  TE properties of the link (metrics, bandwidth)\n   o  Other properties\
    \ of the link (technology-specific)\n   o  Identifier of link endpoints\n   o\
    \  Identifier of adjacent domain\n   It may be desirable for this information\
    \ to be periodically updated,\n   for example, when available bandwidth changes.\
    \  In this case, the\n   parent PCE might be given the ability to configure thresholds\
    \ in the\n   child PCE to prevent flapping of information.\n"
- title: 4.8.5.  Domain Identifiers
  contents:
  - "4.8.5.  Domain Identifiers\n   Domain identifiers are already present in PCEP\
    \ to allow a PCE to\n   indicate which domains it serves, and to allow the representation\
    \ of\n   domains as abstract nodes in paths.  The wider use of domains in the\n\
    \   context of this work on hierarchical PCE will require that domains\n   can\
    \ be identified in more places within objects in PCEP messages.\n   This should\
    \ pose no problems.\n   However, more attention may need to be applied to the\
    \ precision of\n   domain identifier definitions to ensure that it is always possible\
    \ to\n   unambiguously identify a domain from its identifier.  This work will\n\
    \   be necessary in configuration, and also in protocol specifications\n   (for\
    \ example, an OSPF area identifier is sufficient within an\n   Autonomous System,\
    \ but becomes ambiguous in a path that crosses\n   multiple Autonomous Systems).\n"
- title: 5.  Hierarchical PCE Applicability
  contents:
  - "5.  Hierarchical PCE Applicability\n   As per [RFC4655], PCE can inherently support\
    \ inter-domain path\n   computation for any definition of a domain as set out\
    \ in Section 1.2\n   of this document.\n   Hierarchical PCE can be applied to\
    \ inter-domain environments,\n   including autonomous Systems and IGP areas. \
    \ The hierarchical PCE\n   procedures make no distinction between, autonomous\
    \ Systems and IGP\n   area applications, although it should be noted that the\
    \ TED\n   maintained by a parent PCE must be able to support the concept of\n\
    \   child domains connected by inter-domain links or directly connected\n   at\
    \ boundary nodes (see Section 3).\n   This section sets out the applicability\
    \ of hierarchical PCE to three\n   environments:\n   o  MPLS traffic engineering\
    \ across multiple Autonomous Systems\n   o  MPLS traffic engineering across multiple\
    \ IGP areas\n   o  GMPLS traffic engineering in the ASON architecture\n"
- title: 5.1.  Autonomous Systems and Areas
  contents:
  - "5.1.  Autonomous Systems and Areas\n   Networks are comprised of domains.  A\
    \ domain can be considered to be\n   a collection of network elements within an\
    \ AS or area that has a\n   common sphere of address management or path computational\n\
    \   responsibility.\n   As networks increase in size and complexity it may be\
    \ required to\n   introduce scaling methods to reduce the amount information flooded\n\
    \   within the network and make the network more manageable.  An IGP\n   hierarchy\
    \ is designed to improve IGP scalability by dividing the IGP\n   domain into areas\
    \ and limiting the flooding scope of topology\n   information to within area boundaries.\
    \  This restricts a router's\n   visibility to information about links and other\
    \ routers within the\n   single area.  If a router needs to compute a route to\
    \ destination\n   located in another area, a method is required to compute a path\n\
    \   across the area boundary.\n   When an LSR within an AS or area needs to compute\
    \ a path across an\n   area or AS boundary, it must also use an inter-AS computation\n\
    \   technique.  Hierarchical PCE is equally applicable to computing\n   inter-area\
    \ and inter-AS MPLS and GMPLS paths across domain\n   boundaries.\n"
- title: 5.2.  ASON Architecture
  contents:
  - "5.2.  ASON Architecture\n   The International Telecommunication Union (ITU) defines\
    \ the ASON\n   architecture in [G-8080].  [G-7715] defines the routing architecture\n\
    \   for ASON and introduces a hierarchical architecture.  In this\n   architecture,\
    \ the Routing Areas (RAs) have a hierarchical\n   relationship between different\
    \ routing levels, which means a parent\n   (or higher-level) RA can contain multiple\
    \ child RAs.  The\n   interconnectivity of the lower RAs is visible to the higher-level\
    \ RA.\n   Note that the RA hierarchy can be recursive.\n   In the ASON framework,\
    \ a path computation request is termed a Route\n   Query.  This query is executed\
    \ before signaling is used to establish\n   an LSP termed a Switched Connection\
    \ (SC) or a Soft Permanent\n   Connection (SPC).  [G-7715-2] defines the requirements\
    \ and\n   architecture for the functions performed by Routing Controllers (RCs)\n\
    \   during the operation of remote route queries -- an RC is synonymous\n   with\
    \ a PCE.  For an end-to-end connection, the route may be computed\n   by a single\
    \ RC or multiple RCs in a collaborative manner (i.e., RC\n   federations).  In\
    \ the case of RC federations, [G-7715-2] describes\n   three styles during remote\
    \ route query operation:\n   o  step-by-step remote path computation\n   o  hierarchical\
    \ remote path computation\n   o  a combination of the above.\n   In a hierarchical\
    \ ASON routing environment, a child RC may\n   communicate with its parent RC\
    \ (at the next higher level of the ASON\n   routing hierarchy) to request the\
    \ computation of an end-to-end path\n   across several RAs.  It does this using\
    \ a route query message (known\n   as the abstract message RI_QUERY).  The corresponding\
    \ parent RC may\n   communicate with other child RCs that belong to other child\
    \ RAs at\n   the next lower hierarchical level.  Thus, a parent RC can act as\n\
    \   either a Route Query Requester or Route Query Responder.\n   It can be seen\
    \ that the hierarchical PCE architecture fits the\n   hierarchical ASON routing\
    \ architecture well.  It can be used to\n   provide paths across subnetworks and\
    \ to determine end-to-end paths in\n   networks constructed from multiple subnetworks\
    \ or RAs.\n   When hierarchical PCE is applied to implement hierarchical remote\n\
    \   path computation in [G-7715-2], it is very important for operators to\n  \
    \ understand the different terminology and implicit consistency between\n   hierarchical\
    \ PCE and [G-7715-2].\n"
- title: 5.2.1.  Implicit Consistency between Hierarchical PCE and G.7715.2
  contents:
  - "5.2.1.  Implicit Consistency between Hierarchical PCE and G.7715.2\n   This section\
    \ highlights the correspondence between features of the\n   hierarchical PCE architecture\
    \ and the ASON routing architecture.\n   (1) RC (Routing Controller) and PCE (Path\
    \ Computation Element)\n       [G-8080] describes the Routing Controller component\
    \ as an\n       abstract entity, which is responsible for responding to requests\n\
    \       for path (route) information and topology information.  It can be\n  \
    \     implemented as a single entity, or as a distributed set of\n       entities\
    \ that make up a cooperative federation.\n       [RFC4655] describes PCE (Path\
    \ Computation Element) is an entity\n       (component, application, or network\
    \ node) that is capable of\n       computing a network path or route based on\
    \ a network graph and\n       applying computational constraints.\n       Therefore,\
    \ in the ASON architecture, a PCE can be regarded as a\n       realization of\
    \ the RC.\n   (2) Route Query Requester/Route Query Responder and PCC/PCE\n  \
    \     [G-7715-2] describes the Route Query Requester as a Connection\n       Controller\
    \ or Routing Controller that sends a route query message\n       to a Routing\
    \ Controller requesting one or more paths that satisfy\n       a set of routing\
    \ constraints.  The Route Query Responder is a\n       Routing Controller that\
    \ performs path computation upon receipt of\n       a route query message from\
    \ a Route Query Requester, sending a\n       response back at the end of the path\
    \ computation.\n       In the context of ASON, a Signaling Controller initiates\
    \ and\n       processes signaling messages and is closely coupled to a\n     \
    \  Signaling Protocol Speaker.  A Routing Controller makes routing\n       decisions\
    \ and is usually coupled to configuration entities and/or\n       a Routing Protocol\
    \ Speaker.\n       It can be seen that a PCC corresponds to a Route Query Requester,\n\
    \       and a PCE corresponds to a Route Query Responder.  A PCE/RC can\n    \
    \   also act as a Route Query Requester sending requests to another\n       Route\
    \ Query Responder.\n       The Path Computation Request (PCReq) and Path Computation\
    \ Reply\n       (PCRep) messages between PCC and PCE correspond to the RI_QUERY\n\
    \       and RI_UPDATE messages in [G-7715-2].\n   (3) Routing Area Hierarchy and\
    \ Hierarchical Domain\n       The ASON routing hierarchy model is shown in Figure\
    \ 6 of [G-7715]\n       through an example that illustrates routing area levels.\
    \  If the\n       hierarchical remote path computation mechanism of [G-7715-2]\
    \ is\n       applied in this scenario, each routing area should have at least\n\
    \       one RC to perform the route query function, and the child RCs\n      \
    \ within the area should have a parent RC.\n       According to [G-8080], the\
    \ parent RC has visibility of the\n       structure of the lower level, so it\
    \ knows the interconnectivity\n       of the RAs in the lower level.  Each child\
    \ RC can compute edge-\n       to-edge paths across its own child RA.\n      \
    \ Thus, an RA corresponds to a domain in the PCE architecture, and\n       the\
    \ hierarchical relationship between RAs corresponds to the\n       hierarchical\
    \ relationship between domains in the hierarchical PCE\n       architecture. \
    \ Furthermore, a parent PCE in a parent domain can\n       be regarded as parent\
    \ RC in a higher routing level, and a child\n       PCE in a child domain can\
    \ be regarded as child RC in a lower\n       routing level.\n"
- title: 5.2.2.  Benefits of Hierarchical PCEs in ASON
  contents:
  - "5.2.2.  Benefits of Hierarchical PCEs in ASON\n   RCs in an ASON environment\
    \ can use the hierarchical PCE model to\n   fully match the ASON hierarchical\
    \ routing model, so the hierarchical\n   PCE mechanisms can be applied to fully\
    \ satisfy the architecture and\n   requirements of [G-7715-2] without any changes.\
    \  If the hierarchical\n   PCE mechanism is applied in ASON, it can be used to\
    \ determine end-to-\n   end optimized paths across subnetworks and RAs before\
    \ initiating\n   signaling to create the connection.  It can also improve the\n\
    \   efficiency of connection setup to avoid crankback.\n"
- title: 6.  A Note on BGP-TE
  contents:
  - "6.  A Note on BGP-TE\n   The concept of exchange of TE information between Autonomous\
    \ Systems\n   (ASes) is discussed in [BGP-TE].  The information exchanged in this\n\
    \   way could be the full TE information from the AS, an aggregation of\n   that\
    \ information, or a representation of the potential connectivity\n   across the\
    \ AS.  Furthermore, that information could be updated\n   frequently (for example,\
    \ for every new LSP that is set up across the\n   AS) or only at threshold-crossing\
    \ events.\n   There are a number of discussion points associated with the use\
    \ of\n   [BGP-TE] concerning the volume of information, the rate of churn of\n\
    \   information, the confidentiality of information, the accuracy of\n   aggregated\
    \ or potential-connectivity information, and the processing\n   required to generate\
    \ aggregated information.  The PCE architecture\n   and the architecture enabled\
    \ by [BGP-TE] make different assumptions\n   about the operational objectives\
    \ of the networks, and this document\n   does not attempt to make one of the approaches\
    \ \"right\" and the other\n   \"wrong\".  Instead, this work assumes that a decision\
    \ has been made to\n   utilize the PCE architecture.\n"
- title: 6.1.  Use of BGP for TED Synchronization
  contents:
  - "6.1.  Use of BGP for TED Synchronization\n   Indeed, [BGP-TE] may have some uses\
    \ within the PCE model.  For\n   example, [BGP-TE] could be used as a \"northbound\"\
    \ TE advertisement\n   such that a PCE does not need to listen to an IGP in its\
    \ domain, but\n   has its TED populated by messages received (for example) from\
    \ a Route\n   Reflector.  Furthermore, the inter-domain connectivity and\n   capabilities\
    \ that are required information for a parent PCE could be\n   obtained as a filtered\
    \ subset of the information available in\n   [BGP-TE].  This scenario is discussed\
    \ further in [PCE-AREA-AS].\n"
- title: 7.  Management Considerations
  contents:
  - "7.  Management Considerations\n   General PCE management considerations are discussed\
    \ in [RFC4655].  In\n   the case of the hierarchical PCE architecture, there are\
    \ additional\n   management considerations.\n   The administrative entity responsible\
    \ for the management of the\n   parent PCEs must be determined.  In the case of\
    \ multi-domains (e.g.,\n   IGP areas or multiple ASes) within a single service\
    \ provider network,\n   the management responsibility for the parent PCE would\
    \ most likely be\n   handled by the service provider.  In the case of multiple\
    \ ASes within\n   different service provider networks, it may be necessary for\
    \ a third\n   party to manage the parent PCEs according to commercial and policy\n\
    \   agreements from each of the participating service providers.\n"
- title: 7.1.  Control of Function and Policy
  contents:
  - '7.1.  Control of Function and Policy

    '
- title: 7.1.1.  Child PCE
  contents:
  - "7.1.1.  Child PCE\n   Support of the hierarchical procedure will be controlled\
    \ by the\n   management organization responsible for each child PCE.  A child\
    \ PCE\n   must be configured with the address of its parent PCE in order for it\n\
    \   to interact with its parent PCE.  The child PCE must also be\n   authorized\
    \ to peer with the parent PCE.\n"
- title: 7.1.2.  Parent PCE
  contents:
  - "7.1.2.  Parent PCE\n   The parent PCE must only accept path computation requests\
    \ from\n   authorized child PCEs.  If a parent PCE receives requests from an\n\
    \   unauthorized child PCE, the request should be dropped.\n   This means that\
    \ a parent PCE must be configured with the identities\n   and security credentials\
    \ of all of its child PCEs, or there must be\n   some form of shared secret that\
    \ allows an unknown child PCE to be\n   authorized by the parent PCE.\n"
- title: 7.1.3.  Policy Control
  contents:
  - "7.1.3.  Policy Control\n   It may be necessary to maintain a policy module on\
    \ the parent PCE\n   [RFC5394].  This would allow the parent PCE to apply commercially\n\
    \   relevant constraints such as SLAs, security, peering preferences, and\n  \
    \ monetary costs.\n   It may also be necessary for the parent PCE to limit end-to-end\
    \ path\n   selection by including or excluding specific domains based on\n   commercial\
    \ relationships, security implications, and reliability.\n"
- title: 7.2.  Information and Data Models
  contents:
  - "7.2.  Information and Data Models\n   A PCEP MIB module is defined in [PCEP-MIB]\
    \ that describes managed\n   objects for modeling of PCEP communication.  An additional\
    \ PCEP MIB\n   will be required to report parent PCE and child PCE information,\n\
    \   including:\n   o  parent PCE configuration and status,\n   o  child PCE configuration\
    \ and information,\n   o  notifications to indicate session changes between parent\
    \ PCEs and\n      child PCEs, and\n   o  notification of parent PCE TED updates\
    \ and changes.\n"
- title: 7.3.  Liveness Detection and Monitoring
  contents:
  - "7.3.  Liveness Detection and Monitoring\n   The hierarchical procedure requires\
    \ interaction with multiple PCEs.\n   Once a child PCE requests an end-to-end\
    \ path, a sequence of events\n   occurs that requires interaction between the\
    \ parent PCE and each\n   child PCE.  If a child PCE is not operational, and an\
    \ alternate\n   transit domain is not available, then a failure must be reported.\n"
- title: 7.4.  Verifying Correct Operation
  contents:
  - "7.4.  Verifying Correct Operation\n   Verifying the correct operation of a parent\
    \ PCE can be performed by\n   monitoring a set of parameters.  The parent PCE\
    \ implementation should\n   provide the following parameters monitored by the\
    \ parent PCE:\n   o  number of child PCE requests,\n   o  number of successful\
    \ hierarchical PCE procedures completions on a\n      per-PCE-peer basis,\n  \
    \ o  number of hierarchical PCE procedure completion failures on a per-\n    \
    \  PCE-peer basis, and\n   o  number of hierarchical PCE procedure requests from\
    \ unauthorized\n      child PCEs.\n"
- title: 7.5.  Impact on Network Operation
  contents:
  - "7.5.  Impact on Network Operation\n   The hierarchical PCE procedure is a multiple-PCE\
    \ path computation\n   scheme.  Subsequent requests to and from the child and\
    \ parent PCEs do\n   not differ from other path computation requests and should\
    \ not have\n   any significant impact on network operations.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The hierarchical PCE procedure relies on PCEP\
    \ and inherits the\n   security requirements defined in [RFC5440].  As noted in\
    \ Section 7,\n   there is a security relationship between child and parent PCEs.\
    \  This\n   relationship, like any PCEP relationship, assumes pre-configuration\n\
    \   of identities, authority, and keys, or can operate through any key\n   distribution\
    \ mechanism outside the scope of PCEP.  As PCEP operates\n   over TCP, it may\
    \ make use of any TCP security mechanism.\n   The hierarchical PCE architecture\
    \ makes use of PCE policy [RFC5394]\n   and the security aspects of the PCE Communication\
    \ Protocol documented\n   in [RFC5440].  It is expected that the parent PCE will\
    \ require all\n   child PCEs to use full security when communicating with the\
    \ parent\n   and that security will be maintained by not supporting the discovery\n\
    \   by a parent of child PCEs.\n   PCE operation also relies on information used\
    \ to build the TED.\n   Attacks on a PCE system may be achieved by falsifying\
    \ or impeding\n   this flow of information.  The child PCE TEDs are constructed\
    \ as\n   described in [RFC4655] and are unchanged in this document: if the PCE\n\
    \   listens to the IGP for this information, then normal IGP security\n   measures\
    \ may be applied, and it should be noted that an IGP routing\n   system is generally\
    \ assumed to be a trusted domain such that router\n   subversion is not a risk.\
    \  The parent PCE TED is constructed as\n   described in this document and may\
    \ involve:\n   -  multiple parent-child relationships using PCEP (as already\n\
    \      described)\n   -  the parent PCE listening to child domain IGPs (with the\
    \ same\n      security features as a child PCE listening to its IGP)\n   -  an\
    \ external mechanism (such as [BGP-TE]), which will need to be\n      authorized\
    \ and secured.\n   Any multi-domain operation necessarily involves the exchange\
    \ of\n   information across domain boundaries.  This is bound to represent a\n\
    \   significant security and confidentiality risk especially when the\n   child\
    \ domains are controlled by different commercial concerns.  PCEP\n   allows individual\
    \ PCEs to maintain confidentiality of their domain\n   path information using\
    \ path-keys [RFC5520], and the hierarchical PCE\n   architecture is specifically\
    \ designed to enable as much isolation of\n   domain topology and capabilities\
    \ information as is possible.\n   For further considerations of the security issues\
    \ related to inter-AS\n   path computation, see [RFC5376].\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The authors would like to thank David Amzallag, Oscar\
    \ Gonzalez de\n   Dios, Franz Rambach, Ramon Casellas, Olivier Dugeon, Filippo\
    \ Cugini,\n   Dhruv Dhody, and Julien Meuric for their comments and suggestions.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC4655]     Farrel, A., Vasseur, J.-P., and\
    \ J. Ash, \"A Path\n                 Computation Element (PCE)-Based Architecture\"\
    , RFC\n                 4655, August 2006.\n   [RFC5152]     Vasseur, JP., Ed.,\
    \ Ayyangar, A., Ed., and R. Zhang, \"A\n                 Per-Domain Path Computation\
    \ Method for Establishing\n                 Inter-Domain Traffic Engineering (TE)\
    \ Label Switched\n                 Paths (LSPs)\", RFC 5152, February 2008.\n\
    \   [RFC5394]     Bryskin, I., Papadimitriou, D., Berger, L., and J. Ash,\n  \
    \               \"Policy-Enabled Path Computation Framework\", RFC 5394,\n   \
    \              December 2008.\n   [RFC5440]     Vasseur, JP., Ed., and JL. Le\
    \ Roux, Ed., \"Path\n                 Computation Element (PCE) Communication\
    \ Protocol\n                 (PCEP)\", RFC 5440, March 2009.\n   [RFC5441]   \
    \  Vasseur, JP., Ed., Zhang, R., Bitar, N., and JL. Le\n                 Roux,\
    \ \"A Backward-Recursive PCE-Based Computation\n                 (BRPC) Procedure\
    \ to Compute Shortest Constrained Inter-\n                 Domain Traffic Engineering\
    \ Label Switched Paths\", RFC\n                 5441, April 2009.\n   [RFC5520]\
    \     Bradford, R., Ed., Vasseur, JP., and A. Farrel,\n                 \"Preserving\
    \ Topology Confidentiality in Inter-Domain\n                 Path Computation\
    \ Using a Path-Key-Based Mechanism\", RFC\n                 5520, April 2009.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC4105]     Le Roux, J.-L., Ed., Vasseur,\
    \ J.-P., Ed., and J. Boyle,\n                 Ed., \"Requirements for Inter-Area\
    \ MPLS Traffic\n                 Engineering\", RFC 4105, June 2005.\n   [RFC4216]\
    \     Zhang, R., Ed., and J.-P. Vasseur, Ed., \"MPLS Inter-\n                \
    \ Autonomous System (AS) Traffic Engineering (TE)\n                 Requirements\"\
    , RFC 4216, November 2005.\n   [RFC4726]     Farrel, A., Vasseur, J.-P., and A.\
    \ Ayyangar, \"A\n                 Framework for Inter-Domain Multiprotocol Label\n\
    \                 Switching Traffic Engineering\", RFC 4726, November\n      \
    \           2006.\n   [RFC5316]     Chen, M., Zhang, R., and X. Duan, \"ISIS Extensions\
    \ in\n                 Support of Inter-Autonomous System (AS) MPLS and GMPLS\n\
    \                 Traffic Engineering\", RFC 5316, December 2008.\n   [RFC5376]\
    \     Bitar, N., Zhang, R., and K. Kumaki, \"Inter-AS\n                 Requirements\
    \ for the Path Computation Element\n                 Communication Protocol (PCECP)\"\
    , RFC 5376, November\n                 2008.\n   [RFC5392]     Chen, M., Zhang,\
    \ R., and X. Duan, \"OSPF Extensions in\n                 Support of Inter-Autonomous\
    \ System (AS) MPLS and GMPLS\n                 Traffic Engineering\", RFC 5392,\
    \ January 2009.\n   [RFC5541]     Le Roux, JL., Vasseur, JP., and Y. Lee, \"Encoding\
    \ of\n                 Objective Functions in the Path Computation Element\n \
    \                Communication Protocol (PCEP)\", RFC 5541, June 2009.\n   [G-8080]\
    \      ITU-T Recommendation G.8080/Y.1304, Architecture for\n                \
    \ the automatically switched optical network (ASON).\n   [G-7715]      ITU-T Recommendation\
    \ G.7715 (2002), Architecture and\n                 Requirements for the Automatically\
    \ Switched Optical\n                 Network (ASON).\n   [G-7715-2]    ITU-T Recommendation\
    \ G.7715.2 (2007), ASON routing\n                 architecture and requirements\
    \ for remote route query.\n   [BGP-TE]      Gredler, H., Medved, J., Previdi,\
    \ S., Farrel, A., and\n                 S. Ray, \"North-Bound Distribution of\
    \ Link-State and TE\n                 Information using BGP\", Work in Progress,\
    \ October 2012.\n   [PCE-AREA-AS] King, D., Meuric, J., Dugeon, O., Zhao, Q.,\
    \ Gonzalez de\n                 Dios, O., and F. Chico, \"Applicability of the\
    \ Path\n                 Computation Element to Inter-Area and Inter-AS MPLS and\n\
    \                 GMPLS Traffic Engineering\", Work in Progress, January\n   \
    \              2012.\n   [PCEP-MIB]    Koushik, A., Emile, S., Zhao, Q., King,\
    \ D., and J.\n                 Hardwick, \"PCE communication protocol (PCEP) Management\n\
    \                 Information Base\", Work in Progress, July 2012.\n"
- title: 11.  Contributors
  contents:
  - "11.  Contributors\n   Quintin Zhao\n   Huawei Technology\n   125 Nagog Technology\
    \ Park\n   Acton, MA  01719\n   US\n   EMail: qzhao@huawei.com\n   Fatai Zhang\n\
    \   Huawei Technologies\n   F3-5-B R&D Center, Huawei Base\n   Bantian, Longgang\
    \ District\n   Shenzhen 518129\n   P.R. China\n   EMail: zhangfatai@huawei.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Daniel King\n   Old Dog Consulting\n   UK\n   EMail: daniel@olddog.co.uk\n\
    \   Adrian Farrel\n   Old Dog Consulting\n   UK\n   EMail: adrian@olddog.co.uk\n"
