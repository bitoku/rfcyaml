- title: __initial_text__
  contents:
  - ' Discovering NAT64 IPv6 Prefixes Using the Port Control Protocol (PCP)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a new Port Control Protocol (PCP) option to\n\
    \   learn the IPv6 prefix(es) used by a PCP-controlled NAT64 device to\n   build\
    \ IPv4-converted IPv6 addresses.  This option is needed for\n   successful communications\
    \ when IPv4 addresses are used in referrals.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7225.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Requirements Language . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Problem Statement . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n     3.1.  Issues  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   3\n     3.2.  Use Cases . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   3\n       3.2.1.  AAAA Synthesis by the DNS Stub-resolver . . . . . . .\
    \   4\n       3.2.2.  Application Referrals . . . . . . . . . . . . . . . .  \
    \ 4\n   4.  PREFIX64 Option . . . . . . . . . . . . . . . . . . . . . . .   5\n\
    \     4.1.  Format  . . . . . . . . . . . . . . . . . . . . . . . . .   5\n  \
    \   4.2.  Server's Behavior . . . . . . . . . . . . . . . . . . . .   7\n    \
    \ 4.3.  Client's Behavior . . . . . . . . . . . . . . . . . . . .   9\n   5. \
    \ Flow Examples . . . . . . . . . . . . . . . . . . . . . . . .  10\n     5.1.\
    \  TCP Session Initiated from an IPv6-only Host  . . . . . .  10\n     5.2.  SIP\
    \ Flow Example  . . . . . . . . . . . . . . . . . . . .  11\n     5.3.  Mapping\
    \ of IPv4 Address Ranges to IPv6 Prefixes . . . . .  13\n   6.  IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .  14\n   7.  Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  15\n   8.  Acknowledgements  . . . .\
    \ . . . . . . . . . . . . . . . . . .  15\n   9.  References  . . . . . . . .\
    \ . . . . . . . . . . . . . . . . .  15\n     9.1.  Normative References  . .\
    \ . . . . . . . . . . . . . . . .  15\n     9.2.  Informative References  . .\
    \ . . . . . . . . . . . . . . .  16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   According to [RFC6146], NAT64 uses Pref64::/n to construct\n\
    \   IPv4-converted IPv6 addresses as defined in [RFC6052].\n   This document defines\
    \ a new Port Control Protocol (PCP) option\n   [RFC6887] to inform PCP clients\
    \ about the Pref64::/n and suffix\n   [RFC6052] used by a PCP-controlled NAT64\
    \ device [RFC6146].  It does\n   so by defining a new PREFIX64 option.\n   This\
    \ PCP option is a deterministic solution to help establish\n   communications\
    \ between IPv6-only hosts and remote IPv4-only hosts.\n   Unlike [RFC7050], this\
    \ option solves all the issues identified in\n   [RFC7051].\n   Some illustrative\
    \ examples are provided in Section 5.  Detailed\n   experiments conducted to assess\
    \ the applicability of the PREFIX64\n   option for services (e.g., accessing a\
    \ video server, establishing\n   SIP-based sessions, etc.) in NAT64 environments\
    \ are available in\n   [EXPERIMENTS].\n   The use of this PCP option for NAT64\
    \ load-balancing purposes is out\n   of scope.\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   [RFC2119].\n"
- title: 3.  Problem Statement
  contents:
  - '3.  Problem Statement

    '
- title: 3.1.  Issues
  contents:
  - "3.1.  Issues\n   This document proposes a deterministic solution to solve the\n\
    \   following issues:\n   o  Learn the Pref64::/n used by an upstream NAT64 function.\
    \  This is\n      needed to help:\n      *  distinguish between IPv4-converted\
    \ IPv6 addresses [RFC6052] and\n         native IPv6 addresses.\n      *  implement\
    \ IPv6 address synthesis for applications not relying\n         on DNS (where\
    \ DNS64 [RFC6147] would provide the synthesis).\n   o  Avoid stale Pref64::/n\
    \ values.\n   o  Discover multiple Pref64::/n values when multiple prefixes exist\n\
    \      in a network.\n   o  Use DNSSEC ([RFC4033], [RFC4034], [RFC4035]) in the\
    \ presence of\n      NAT64.\n   o  Discover the suffix used by a NAT64 function\
    \ when non-null\n      suffixes are in use (e.g., checksum neutral suffix).\n\
    \   o  Support destination-based Pref64::/n (e.g., Section 5.1 of\n      [RFC7050]).\n\
    \   o  Associate a Pref64::/n with a given NAT64 when distinct prefixes\n    \
    \  are configured for each NAT64 enabled in a network.\n   A more extensive discussion\
    \ can be found at [RFC7051].\n"
- title: 3.2.  Use Cases
  contents:
  - "3.2.  Use Cases\n   This section provides some use cases to illustrate the problem\
    \ space.\n   More details can be found at Section 4 of [RFC7051].\n"
- title: 3.2.1.  AAAA Synthesis by the DNS Stub-Resolver
  contents:
  - "3.2.1.  AAAA Synthesis by the DNS Stub-Resolver\n   The option defined in this\
    \ document can be used for hosts with DNS64\n   capability [RFC6147] added to\
    \ the host's stub-resolver.\n   The stub resolver on the host will try to obtain\
    \ (native) AAAA\n   records, and if they are not found, the DNS64 function on\
    \ the host\n   will query for A records and then synthesize AAAA records.  Using\
    \ the\n   PREFIX64 PCP extension, the host's stub-resolver can learn the prefix\n\
    \   used for IPv6/IPv4 translation and synthesize AAAA records\n   accordingly.\n\
    \   Because synthetic AAAA records cannot be successfully validated in a\n   host,\
    \ learning the Pref64::/n used to construct IPv4-converted IPv6\n   addresses\
    \ allows the use of DNSSEC.  As discussed in Section 5.5 of\n   [RFC6147], a security-aware\
    \ and validating host has to perform the\n   DNS64 function locally.\n"
- title: 3.2.2.  Application Referrals
  contents:
  - "3.2.2.  Application Referrals\n   As discussed in [REF-OBJECT], a frequently\
    \ occurring situation is\n   that one entity A connected to a network needs to\
    \ inform another\n   entity B how to reach either A itself or some third-party\
    \ entity C.\n   This is known as address referral.\n   In the particular context\
    \ of NAT64 [RFC6146], applications relying on\n   address referral will fail because\
    \ an IPv6-only client won't be able\n   to make use of an IPv4 address received\
    \ in a referral.  A non-\n   exhaustive list of such applications is provided\
    \ below:\n   o  In SIP environments [RFC3261], the SDP part ([RFC4566]) of\n \
    \     exchanged SIP messages includes information required for\n      establishing\
    \ RTP sessions (namely, IP address and port number).\n      When a NAT64 is involved\
    \ in the path, an IPv6-only SIP User Agent\n      (UA) that receives an SDP offer/answer\
    \ containing an IPv4 address\n      cannot send media streams to the remote endpoint.\n\
    \   o  An IPv6-only WebRTC (Web Real-Time Communication [WebRTC]) agent\n    \
    \  cannot make use of an IPv4 address received in referrals to\n      establish\
    \ a successful session with a remote IPv4-only WebRTC\n      agent.\n   o  BitTorrent\
    \ is a distributed file-sharing infrastructure that is\n      based on peer-to-peer\
    \ (P2P) techniques for exchanging files\n      between connected users.  To download\
    \ a given file, a BitTorrent\n      client needs to obtain the corresponding torrent\
    \ file.  Then, it\n      connects to a tracker to retrieve a list of \"leechers\"\
    \ (clients\n      that are currently downloading the file but do not yet possess\
    \ all\n      portions of the file) and \"seeders\" (clients that possess all\n\
    \      portions of the file and are uploading them to other requesting\n     \
    \ clients).  The client connects to those machines and downloads the\n      available\
    \ portions of the requested file.  In the presence of an\n      address-sharing\
    \ function (see Appendix A of [RFC6269]), some\n      encountered issues are solved\
    \ if PCP is enabled (see\n      [PCP-BITTORRENT]).  Nevertheless, an IPv6-only\
    \ client cannot\n      connect to a remote IPv4-only machine even if the base\
    \ PCP\n      protocol is used.\n      Learning the Pref64::/n solves the issues\
    \ listed above.\n"
- title: 4.  PREFIX64 Option
  contents:
  - '4.  PREFIX64 Option

    '
- title: 4.1.  Format
  contents:
  - "4.1.  Format\n      The format of the PREFIX64 option is depicted in Figure 1.\
    \  This\n      option follows the guidelines specified in Section 7.3 of\n   \
    \   [RFC6887].\n      This option allows the mapping of specific IPv4 address\
    \ ranges\n      (contained in the IPv4 Prefix List) to separate Pref64::/n\n \
    \     prefixes as discussed in [RFC6147].\n       0                   1      \
    \             2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |Option Code=129|  Reserved     |        Option Length          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \    Prefix64  Length           |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n      :                      Prefix64 (Variable)\
    \                      :\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   :                    Suffix (Variable)                          :\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       (optional)                              |\n   \
    \   :               IPv4 Prefix List (Variable)                     :\n      |\
    \                      (See Figure 2)                           |\n      |   \
    \                                                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                        Figure 1: Prefix64 PCP Option\n   The description of\
    \ the fields is as follows:\n   o  Option Code: 129\n   o  Reserved: This field\
    \ is initialized as specified in Section 7.3 of\n      [RFC6887].\n   o  Option\
    \ Length: Indicates in octets the length of the enclosed\n      data.\n   o  Prefix64\
    \ Length: Indicates in octets the length of the Pref64::/n.\n      The allowed\
    \ values are specified in [RFC6052] (i.e., 4, 5, 6, 7,\n      8, or 12).\n   o\
    \  Prefix64: This field identifies the IPv6 unicast prefix to be used\n      for\
    \ constructing an IPv4-converted IPv6 address from an IPv4\n      address as specified\
    \ in Section 2.2 of [RFC6052].  This prefix can\n      be the Well-Known Prefix\
    \ (i.e., 64:ff9b::/96) or a Network-\n      Specific Prefix.  The address synthesis\
    \ MUST follow the guidelines\n      documented in [RFC6052].\n   o  Suffix: The\
    \ length of this field is (12 - Prefix64 Length) octets.\n      This field identifies\
    \ the suffix to be used for constructing an\n      IPv4-converted IPv6 address\
    \ from an IPv4 address as specified in\n      Section 2.2 of [RFC6052].  No suffix\
    \ is included if a /96 Prefix64\n      is conveyed in the option.\n   o  IPv4\
    \ Prefix List: This is an optional field.  The format of the\n      IPv4 Prefix\
    \ List field is shown in Figure 2.  This field may be\n      included by a PCP\
    \ server to solve the destination-dependent\n      Pref64::/n discovery problem\
    \ discussed in Section 5.1 of\n      [RFC7050].\n      *  IPv4 Prefix Count: indicates\
    \ the number of IPv4 prefixes\n         included in the option.  \"IPv4 Prefix\
    \ Count\" field MUST be set\n         to 0 in a request and MUST be set to the\
    \ number of included\n         IPv4 subnets in a response.\n      *  An IPv4 prefix\
    \ is represented as \"IPv4 Address/IPv4 Prefix\n         Length\" [RFC4632]. \
    \ For example, to encode 192.0.2.0/24, \"IPv4\n         Prefix Length\" field\
    \ is set to 24 and \"IPv4 Address\" field is\n         set to 192.0.2.0.  If a\
    \ Pref64::/n is configured for all IPv4\n         addresses, a wildcard IPv4 prefix\
    \ (i.e., 0.0.0.0/0) may be\n         returned in the response together with the\
    \ configured\n         Pref64::/n.  If no IPv4 Prefix List is returned in a PREFIX64\n\
    \         option, the PCP client assumes the prefix is valid for any\n       \
    \  destination IPv4 address.  Valid IPv4 prefixes are listed in\n         Section\
    \ 3.1 of [RFC4632].\n    0                   1                   2           \
    \        3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |      IPv4 Prefix Count        |      IPv4 Prefix Length       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     IPv4 Address (32 bits)                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   .                           ....                                .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      IPv4 Prefix Length       |   IPv4 Address (32 bits)...   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  ... IPv4 Address (continued) |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 2: Format of IPv4 Prefix List field\n      Option Name:\
    \ PREFIX64\n      Value: 129\n      Purpose: Learn the prefix used by the NAT64\
    \ to build\n         IPv4-converted IPv6 addresses.  This is used by a host for\n\
    \         local address synthesis (e.g., when an IPv4 address is present\n   \
    \      in referrals).\n      Valid for Opcodes: MAP, ANNOUNCE\n      Length: Variable\n\
    \      May appear in: request, response.\n      Maximum occurrences: 1 for a request.\
    \  As many as fit within the\n         maximum PCP message size for a response.\n"
- title: 4.2.  Server's Behavior
  contents:
  - "4.2.  Server's Behavior\n   The PCP server controlling a NAT64 SHOULD be configured\
    \ to return to\n   requesting PCP clients the value of the Pref64::/n and suffix\
    \ used to\n   build IPv4-converted IPv6 addresses.  When enabled, the PREFIX64\n\
    \   option conveys the value of the Pref64::/n and configured suffix.  If\n  \
    \ no suffix is explicitly configured to the PCP server, the null suffix\n   is\
    \ used as the default value (see Section 2.2 of [RFC6052]).\n   If the PCP server\
    \ is configured to honor the PREFIX64 option but no\n   Pref64::/n is explicitly\
    \ configured, the PCP server MUST NOT include\n   any PREFIX64 option in its PCP\
    \ messages.\n   The PCP server controlling a NAT64 MAY be configured to include\
    \ a\n   PREFIX64 option in all MAP responses even if the PREFIX64 option is\n\
    \   not listed in the associated request.  The PCP server controlling a\n   NAT64\
    \ MAY be configured to include a PREFIX64 option in its ANNOUNCE\n   messages.\n\
    \   The PCP server MAY be configured with a list of destination IPv4\n   prefixes\
    \ associated with a Pref64::/n.  This list is then included by\n   the PCP server\
    \ in a PREFIX64 option sent to PCP clients.\n   The PCP server MAY be configured\
    \ to return multiple PREFIX64 options\n   in the same message to the PCP client.\
    \  In such case, the server does\n   the following:\n   o  If no destination IPv4\
    \ prefix list is configured, the PCP server\n      includes in the first PREFIX64\
    \ option, which appears in the PCP\n      message it sends to the PCP client,\
    \ the prefix and suffix to\n      perform local IPv6 address synthesis [RFC6052].\
    \  Additional\n      PREFIX64 options convey any other Pref64::/n values configured.\n\
    \      Returning these prefixes allows an end host to identify all\n      synthesized\
    \ IPv6 addresses in a network; the host can prefer IPv4\n      or another network\
    \ interface instead in order to avoid any NAT64\n      deployed in the network.\
    \  The PCP server is required to\n      disambiguate prefixes used for IPv6 address\
    \ synthesis and other\n      prefixes used to avoid any NAT64 deployed in the\
    \ network.  The PCP\n      server can be configured with a customized IPv6 prefix\
    \ list (i.e.,\n      specific to a PCP client or a group of PCP clients) or system-wide\n\
    \      IPv6 prefix list (i.e., the same list is returned for any PCP\n      client).\
    \  Note, it is NOT RECOMMENDED to include PREFIX64 options\n      in ANNOUNCE\
    \ messages if a customized IPv6 prefix list is\n      configured to the PCP server.\n\
    \   o  If IPv4 prefix lists are configured, the PCP server includes in\n     \
    \ the first PREFIX64 options the Pref64::/n and suffix that are\n      associated\
    \ with an IPv4 prefix list (i.e., each of these PREFIX64\n      options conveys\
    \ a distinct Pref64::/n together with an IPv4 prefix\n      list).  Additional\
    \ PREFIX64 options convey any other Pref64::/n\n      values configured (i.e.,\
    \ the remaining Pref64::/n values not\n      mapped to any IPv4 prefix list).\n\
    \   If a distinct Pref64::/n or suffix is configured to the PCP-\n   controlled\
    \ NAT64 device, the PCP server SHOULD issue an unsolicited\n   PCP ANNOUNCE message\
    \ to inform the PCP client about the new\n   Pref64::/n and/or suffix.\n"
- title: 4.3.  Client's Behavior
  contents:
  - "4.3.  Client's Behavior\n   The PCP client includes a PREFIX64 option in a MAP\
    \ or ANNOUNCE\n   request to learn the IPv6 prefix and suffix used by an upstream\
    \ PCP-\n   controlled NAT64 device.  When enclosed in a PCP request, the\n   Prefix64\
    \ MUST be set to ::/96.  The PREFIX64 option can be inserted\n   in a MAP request\
    \ used to learn the external IP address as detailed in\n   Section 11.6 of [RFC6887].\n\
    \   The PCP client MUST be prepared to receive multiple prefixes (e.g.,\n   if\
    \ several PCP servers are deployed and each of them is configured\n   with a distinct\
    \ Pref64::/n).  The PCP client MUST associate each\n   received Pref64::/n and\
    \ suffix with the PCP server from which the\n   Pref64::/n and suffix information\
    \ was retrieved.\n   If the PCP client fails to contact a given PCP server, the\
    \ PCP client\n   SHOULD clear the prefix(es) and suffix(es) it learned from that\
    \ PCP\n   server.  For example, a PCP client may fail to contact a PCP server\n\
    \   if the host embedding the PCP client moves to a new network or if\n   that\
    \ PCP server is out of service.  The use of these stale prefixes\n   is not recommended\
    \ to build an IPv4-converted IPv6 address because\n   failures are likely to be\
    \ encountered (see [RFC7051], Section 3,\n   Issue #4).\n   If the PCP client\
    \ receives a PREFIX64 option that includes an invalid\n   IPv4 prefix, the PCP\
    \ client ignores that IPv4 prefix.  If one or more\n   valid IPv4 prefixes and/or\
    \ IPv6 prefixes and suffixes are present,\n   the PCP client uses them.\n   Upon\
    \ receipt of the message from the PCP server, the PCP client\n   replaces any\
    \ old prefix(es)/suffix(es) received from the same PCP\n   server with the new\
    \ one(s) included in the PREFIX64 option(s).  If no\n   PREFIX64 option includes\
    \ a destination IPv4 prefix list, the host\n   embedding the PCP client uses the\
    \ prefix/suffix included in the first\n   PREFIX64 option for local address synthesis.\
    \  Other prefixes learned\n   can be used by the host to avoid any NAT64 deployed\
    \ in the network.\n   If one or multiple received PREFIX64 options contain a destination\n\
    \   IPv4 prefix list, the PCP client MUST associate the included IPv4\n   prefixes\
    \ with the Pref64::/n and the suffix indicated in the same\n   PREFIX64 option.\
    \  In such case, the host embedding the PCP client\n   MUST enforce a destination-based\
    \ prefix Pref64::/n selection for\n   local address synthesis purposes.  How the\
    \ content of the PREFIX64\n   option(s) is passed to the OS is implementation\
    \ specific.\n   Upon receipt of an unsolicited PCP ANNOUNCE message, the PCP client\n\
    \   replaces the old prefix/suffix received from the same PCP server with\n  \
    \ the new Pref64::/n and suffix included in the PREFIX64 option.\n"
- title: 5.  Flow Examples
  contents:
  - "5.  Flow Examples\n   This section provides a non-normative description of use\
    \ cases\n   relying on the PREFIX64 option.\n"
- title: 5.1.  TCP Session Initiated from an IPv6-Only Host
  contents:
  - "5.1.  TCP Session Initiated from an IPv6-Only Host\n   The usage shown in Figure\
    \ 3 depicts a typical usage of the PREFIX64\n   option when a DNS64 capability\
    \ is embedded in the host.\n   In the example shown in Figure 3, once the IPv6-only\
    \ client discovers\n   the IPv4 address of the remote IPv4-only server (e.g.,\
    \ using DNS), it\n   retrieves the Pref64::/n (i.e., 2001:db8:122:300::/56) to\
    \ be used to\n   build an IPv4-converted IPv6 address for that server.  This retrieval\n\
    \   is achieved using the PREFIX64 option (Steps (a) and (b)).  The\n   client\
    \ then uses 2001:db8:122:300::/56 to construct an IPv6 address\n   and then initiates\
    \ a TCP connection (Steps (1) to (4)).\n   +---------+              +-----+  \
    \           +---------+\n   |IPv6-only|              |NAT64|             |IPv4-only|\n\
    \   | Client  |              |     |             |  Server |\n   +---------+ \
    \             +-----+             +---------+\n       |                      \
    \ |                     |\n       | (a) PCP MAP Request   |                  \
    \   |\n       |      PREFIX64         |                     |\n       |======================>|\
    \                     |\n       | (b) PCP MAP Response  |                    \
    \ |\n       |      PREFIX64 =       |                     |\n       | 2001:db8:122:300::/56\
    \ |                     |\n       |<======================|                  \
    \   |\n       |    (1) TCP SYN        |    (2) TCP SYN      |\n       |======================>|====================>|\n\
    \       |   (4) TCP SYN/ACK     |   (3) TCP SYN/ACK   |\n       |<======================|<====================|\n\
    \       |    (5) TCP ACK        |    (6) TCP ACK      |\n       |======================>|====================>|\n\
    \       |                       |                     |\n   Note: The DNS exchange\
    \ to retrieve the IPv4 address of\n         the IPv4-only Server is not shown\
    \ in the figure.\n    Figure 3: Example of a TCP Session Initiated from an IPv6-Only\
    \ Host\n"
- title: 5.2.  SIP Flow Example
  contents:
  - "5.2.  SIP Flow Example\n   Figure 4 shows an example of the use of the option\
    \ defined in Section\n   4 in a SIP context.  In order for RTP/RTCP flows to be\
    \ exchanged\n   between an IPv6-only SIP UA and an IPv4-only UA without requiring\
    \ any\n   ALG (Application Level Gateway) at the NAT64 or any particular\n   function\
    \ at the IPv4-only SIP Proxy Server (e.g., hosted NAT\n   traversal [LATCHING]),\
    \ the PORT_SET option [PORT-SET] is used in\n   addition to the PREFIX64 option.\n\
    \   In steps (a) and (b), the IPv6-only SIP UA retrieves a pair of ports\n   to\
    \ be used for RTP/RTCP sessions, the external IPv4 address and the\n   Pref64::/n\
    \ to build IPv4-embedded IPv6 addresses.  This is achieved\n   by issuing a MAP\
    \ request that includes a PREFIX64 option and a\n   PORT_SET option.  A pair of\
    \ ports (i.e., port_X/port_X+1) and an\n   external IPv4 address (together with\
    \ a Pref64::/n, i.e.,\n   2001:db8:122::/48) are then returned by the PCP server\
    \ to the\n   requesting PCP client.\n   The returned external IPv4 address and\
    \ external port numbers are used\n   by the IPv6-only SIP UA to build its SDP\
    \ offer, which contains\n   exclusively IPv4 addresses.  (Especially in the \"\
    c=\" line, the port\n   indicated for the media port is the external port assigned\
    \ by the PCP\n   server.)  The INVITE request including the SDP offer is then\n\
    \   forwarded by the NAT64 to the Proxy Server, which will relay it to\n   the\
    \ called party, i.e., the IPv4-only SIP UA (Steps (1) to (3)).\n   The remote\
    \ IPv4-only SIP UA accepts the offer and sends back its SDP\n   answer in a \"\
    200 OK\" message that is relayed by the SIP Proxy Server\n   and NAT64 until being\
    \ delivered to the IPv6-only SIP UA (Steps (4) to\n   (6)).\n   The Pref64::/n\
    \ (2001:db8:122::/48) is used by the IPv6-only SIP UA to\n   construct a corresponding\
    \ IPv6 address of the IPv4 address enclosed\n   in the SDP answer made by the\
    \ IPv4-only SIP UA (Step (6)).\n   The IPv6-only SIP UA and IPv4-only SIP UA are\
    \ then able to exchange\n   RTP/RTCP flows without requiring any ALG at the NAT64\
    \ or any special\n   function at the IPv4-only SIP Proxy Server.\n   +---------+\
    \              +-----+       +------------+     +---------+\n   |IPv6-only|  \
    \            |NAT64|       |  IPv4 SIP  |     |IPv4-only|\n   | SIP UA  |    \
    \          |     |       |Proxy Server|     | SIP UA  |\n   +---------+      \
    \        +-----+       +------------+     +---------+\n       | (a) PCP MAP Request\
    \   |                |                 |\n       |        PORT_SET       |   \
    \             |                 |\n       |        PREFIX64       |          \
    \      |                 |\n       |======================>|                |\
    \                 |\n       | (b) PCP MAP Response  |                |       \
    \          |\n       |        PORT_SET       |                |              \
    \   |\n       |        PREFIX64:      |                |                 |\n \
    \      |     2001:db8:122::/48 |                |                 |\n       |<======================|\
    \                |                 |\n       |  (1) SIP INVITE       | (2) SIP\
    \ INVITE |  (3) SIP INVITE |\n       |======================>|===============>|================>|\n\
    \       |   (6) SIP 200 OK      | (5) SIP 200 OK |  (4) SIP 200 OK |\n       |<======================|<===============|<================|\n\
    \       |     (7) SIP ACK       |  (8) SIP ACK   |    (9) SIP ACK  |\n       |======================>|===============>|================>|\n\
    \       |                       |                |                 |\n       |src\
    \ port:     dst port:|src port:                dst port:|\n       |port_A    \
    \       port_B|port_X                      port_B|\n       |<======IPv6 RTP=======>|<============IPv4\
    \ RTP============>|\n       |<===== IPv6 RTCP======>|<============IPv4 RTCP===========>|\n\
    \       |src port:     dst port:|src port:                dst port:|\n       |port_A+1\
    \       port_B+1|port_X+1                  port_B+1|\n       |               \
    \        |                                  |\n          Figure 4: Example of\
    \ IPv6 to IPv4 SIP-Initiated Session\n   When the session is initiated from the\
    \ IPv4-only SIP UA (see Figure\n   5), the IPv6-only SIP UA retrieves a pair of\
    \ ports to be used for the\n   RTP/RTCP session, the external IPv4 address and\
    \ the Pref64::/n to\n   build IPv4-converted IPv6 addresses (Steps (a) and (b)).\
    \  These two\n   steps could instead be delayed until the INVITE message is received\n\
    \   (Step (3)).\n   The retrieved IPv4 address and port numbers are used to build\
    \ the SDP\n   answer in Step (4), while the Pref64::/n is used to construct an\
    \ IPv6\n   address corresponding to the IPv4 address enclosed in the SDP offer\n\
    \   made by the IPv4-only SIP UA (Step (3)).  RTP/RTCP flows are then\n   exchanged\
    \ between the IPv6-only SIP UA and the IPv4-only UA without\n   requiring any\
    \ ALG at the NAT64 or any special function at the\n   IPv4-only SIP Proxy Server.\n\
    \   +---------+              +-----+       +------------+     +---------+\n  \
    \ |IPv6-only|              |NAT64|       |  IPv4 SIP  |     |IPv4-only|\n   |\
    \ SIP UA  |              |     |       |Proxy Server|     | SIP UA  |\n   +---------+\
    \              +-----+       +------------+     +---------+\n       | (a) PCP\
    \ MAP Request   |                |                 |\n       |        PORT_SET\
    \       |                |                 |\n       |        PREFIX64       |\
    \                |                 |\n       |======================>|       \
    \         |                 |\n       | (b) PCP MAP Response  |              \
    \  |                 |\n       |        PORT_SET       |                |    \
    \             |\n       |        PREFIX64:      |                |           \
    \      |\n       |     2001:db8:122::/48 |                |                 |\n\
    \       |<======================|                |                 |\n       |\
    \  (3) SIP INVITE       | (2) SIP INVITE |  (1) SIP INVITE |\n       |<======================|<===============|<================|\n\
    \       |   (4) SIP 200 OK      | (5) SIP 200 OK |  (6) SIP 200 OK |\n       |======================>|===============>|================>|\n\
    \       |     (9) SIP ACK       |  (8) SIP ACK   |    (7) SIP ACK  |\n       |<======================|<===============|<================|\n\
    \       |                       |                |                 |\n       |src\
    \ port:     dst port:|src port:                dst port:|\n       |port_a    \
    \       port_b|port_Y                      port_b|\n       |<======IPv6 RTP=======>|<============IPv4\
    \ RTP============>|\n       |<===== IPv6 RTCP======>|<============IPv4 RTCP===========>|\n\
    \       |src port:     dst port:|src port:                dst port:|\n       |port_a+1\
    \       port_b+1|port_Y+1                  port_b+1|\n       |               \
    \        |                                  |\n          Figure 5: Example of\
    \ IPv4 to IPv6 SIP-Initiated Session\n"
- title: 5.3.  Mapping of IPv4 Address Ranges to IPv6 Prefixes
  contents:
  - "5.3.  Mapping of IPv4 Address Ranges to IPv6 Prefixes\n   Figure 6 shows an example\
    \ of a NAT64 configured with two Pref64::/n\n   values; each of these Pref64::/n\
    \ values is associated with a distinct\n   IPv4 address range:\n   o  192.0.2.0/24\
    \ is mapped to 2001:db8:122:300::/56.\n   o  198.51.100.0/24 is mapped to 2001:db8:122::/48.\n\
    \   Once the IPv6-only client discovers the IPv4 address of the remote\n   IPv4-only\
    \ server (i.e., 198.51.100.1), it retrieves two IPv6 prefixes\n   to be used to\
    \ build an IPv4-converted IPv6 addresses.  This retrieval\n   is achieved using\
    \ two PREFIX64 options (Step (b)).\n   Because 198.51.100.1 matches the destination\
    \ prefix 198.51.100.0/24,\n   the client uses the associated Pref64::/n (i.e.,\
    \ 2001:db8:122::/48)\n   to construct an IPv6 address for that IPv4-only server,\
    \ and then it\n   initiates a TCP connection (Steps (1) to (6)).\n   +---------+\
    \                        +-----+             +---------+\n   |IPv6-only|     \
    \                   |NAT64|             |IPv4-only|\n   | Client  |          \
    \              |     |             |  Server |\n   +---------+               \
    \         +-----+             +---------+\n       |                          \
    \        |               198.51.100.1\n       | (a) PCP MAP Request          \
    \    |                     |\n       |      PREFIX64                    |    \
    \                 |\n       |=================================>|             \
    \        |\n       | (b) PCP MAP Response             |                     |\n\
    \       |PREFIX64{                         |                     |\n       | Pref64::/n\
    \ =2001:db8:122:300::/56|                     |\n       | IPv4 Prefix=192.0.2.0/24}\
    \        |                     |\n       |PREFIX64{                         |\
    \                     |\n       | Pref64::/n =2001:db8:122::/48    |         \
    \            |\n       | IPv4 Prefix=198.51.100.0/24}     |                  \
    \   |\n       |<=================================|                     |\n   \
    \    |    (1) TCP SYN                   |    (2) TCP SYN      |\n       |=================================>|====================>|\n\
    \       |   (4) TCP SYN/ACK                |   (3) TCP SYN/ACK   |\n       |<=================================|<====================|\n\
    \       |    (5) TCP ACK                   |    (6) TCP ACK      |\n       |=================================>|====================>|\n\
    \       |                                  |                     |\n   Note: The\
    \ DNS exchange to retrieve the IPv4 address of\n         the IPv4-only Server\
    \ is not shown in the figure.\n         Figure 6: Mapping of IPv4 Address Ranges\
    \ to IPv6 Prefixes\n   A similar behavior is to be experienced if these Pref64::/n\
    \ values\n   and associated IPv4 prefix lists are configured to distinct NAT64\n\
    \   devices.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   The following PCP Option Code has been allocated\
    \ in the optional-to-\n   process range (the registry is maintained in\n   http://www.iana.org/assignments/pcp-parameters):\n\
    \      PREFIX64 set to 129 (see Section 4.1)\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   PCP-related security considerations are discussed\
    \ in [RFC6887].\n   As discussed in [RFC6147], if an attacker can manage to change\
    \ the\n   Pref64::/n used by the DNS64 function, the traffic generated by the\n\
    \   host that receives the synthetic reply will be delivered to the\n   altered\
    \ Pref64.  This can result in either a denial-of-service (DoS)\n   attack, a flooding\
    \ attack, or a man-in-the-middle (MITM) attack.\n   This attack could be achieved\
    \ either by altering PCP messages issued\n   by a legitimate PCP server or by\
    \ using a fake PCP server.\n   Means to defend against attackers who can modify\
    \ packets between the\n   PCP server and the PCP client, or who can inject spoofed\
    \ packets that\n   appear to come from a legitimate PCP server, SHOULD be enabled.\
    \  In\n   some deployments, access control lists (ACLs) can be installed on the\n\
    \   PCP client, PCP server, and the network between them, so those ACLs\n   allow\
    \ only communications from a trusted PCP server to the PCP\n   client.\n   PCP\
    \ server discovery is out of scope for this document.  It is the\n   responsibility\
    \ of documents about PCP server discovery to elaborate\n   on the security considerations\
    \ to discover a legitimate PCP server.\n   Learning a Pref64::/n via PCP allows\
    \ using DNSSEC in the presence of\n   NAT64.  As such, NAT64 with DNSSEC and PCP\
    \ is better than no DNSSEC\n   at all, but it is less safe than DNSSEC without\
    \ DNS64/NAT64 and PCP.\n   The best mitigation action against Pref64::/n discovery\
    \ attacks is\n   thus to add IPv6 support in all endpoints and hence reduce the\
    \ need\n   to perform IPv6 address synthesis.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Many thanks to S. Perreault, R. Tirumaleswar, T. Tsou,\
    \ D. Wing, J.\n   Zhao, R. Penno, I. van Beijnum, T. Savolainen, S. Savikumar,\
    \ D.\n   Thaler, T. Lemon, S. Hanna, P. Resnick, R. Sparks, S. Farrell, and W.\n\
    \   Cui for their comments and suggestions.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC4632]  Fuller, V. and T. Li, \"Classless Inter-domain Routing\n\
    \              (CIDR): The Internet Address Assignment and Aggregation\n     \
    \         Plan\", BCP 122, RFC 4632, August 2006.\n   [RFC6052]  Bao, C., Huitema,\
    \ C., Bagnulo, M., Boucadair, M., and X.\n              Li, \"IPv6 Addressing\
    \ of IPv4/IPv6 Translators\", RFC 6052,\n              October 2010.\n   [RFC6146]\
    \  Bagnulo, M., Matthews, P., and I. van Beijnum, \"Stateful\n              NAT64:\
    \ Network Address and Protocol Translation from IPv6\n              Clients to\
    \ IPv4 Servers\", RFC 6146, April 2011.\n   [RFC6147]  Bagnulo, M., Sullivan,\
    \ A., Matthews, P., and I. van\n              Beijnum, \"DNS64: DNS Extensions\
    \ for Network Address\n              Translation from IPv6 Clients to IPv4 Servers\"\
    , RFC 6147,\n              April 2011.\n   [RFC6887]  Wing, D., Cheshire, S.,\
    \ Boucadair, M., Penno, R., and P.\n              Selkirk, \"Port Control Protocol\
    \ (PCP)\", RFC 6887, April\n              2013.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [PCP-BITTORRENT]\n              Boucadair, M.,\
    \ Zheng, T., Deng, X., and J. Queiroz,\n              \"Behavior of BitTorrent\
    \ service in PCP-enabled networks\n              with Address Sharing\", Work\
    \ in Progress, May 2012.\n   [EXPERIMENTS]\n              Abdesselam, M., Boucadair,\
    \ M., Hasnaoui, A., and J.\n              Queiroz, \"PCP NAT64 Experiments\",\
    \ Work in Progress,\n              September 2012.\n   [REF-OBJECT]\n        \
    \      Carpenter, B., Jiang, S., and Z. Cao, \"Problem Statement\n           \
    \   for Referral\", Work in Progress, February 2011.\n   [LATCHING] Ivov, E.,\
    \ Kaplan, H., and D. Wing, \"Latching: Hosted NAT\n              Traversal (HNT)\
    \ for Media in Real-Time Communication\",\n              Work in Progress, May\
    \ 2014.\n   [PORT-SET] Qiong, Q., Boucadair, M., Sivakumar, S., Zhou, C., Tsou,\n\
    \              T., and S. Perreault, \"Port Control Protocol (PCP)\n         \
    \     Extension for Port Set Allocation\", Work in Progress,\n              November\
    \ 2013.\n   [WebRTC]   Alvestrand, H., \"Overview: Real Time Protocols for Brower-\n\
    \              based Applications\", Work in Progress, February 2014.\n   [RFC3261]\
    \  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,\
    \ Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:\
    \ Session Initiation Protocol\", RFC 3261,\n              June 2002.\n   [RFC4033]\
    \  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,\
    \ \"DNS Security Introduction and Requirements\", RFC\n              4033, March\
    \ 2005.\n   [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n\
    \              Rose, \"Resource Records for the DNS Security Extensions\",\n \
    \             RFC 4034, March 2005.\n   [RFC4035]  Arends, R., Austein, R., Larson,\
    \ M., Massey, D., and S.\n              Rose, \"Protocol Modifications for the\
    \ DNS Security\n              Extensions\", RFC 4035, March 2005.\n   [RFC4566]\
    \  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description\
    \ Protocol\", RFC 4566, July 2006.\n   [RFC6269]  Ford, M., Boucadair, M., Durand,\
    \ A., Levis, P., and P.\n              Roberts, \"Issues with IP Address Sharing\"\
    , RFC 6269, June\n              2011.\n   [RFC7050]  Savolainen, T., Korhonen,\
    \ J., and D. Wing, \"Discovery of\n              the IPv6 Prefix Used for IPv6\
    \ Address Synthesis\", RFC\n              7050, November 2013.\n   [RFC7051] \
    \ Korhonen, J. and T. Savolainen, \"Analysis of Solution\n              Proposals\
    \ for Hosts to Learn NAT64 Prefix\", RFC 7051,\n              November 2013.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Mohamed Boucadair\n   France Telecom\n   Rennes  35000\n\
    \   France\n   EMail: mohamed.boucadair@orange.com\n"
