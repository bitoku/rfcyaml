- title: __initial_text__
  contents:
  - "              Cabletron's VlanHello Protocol Specification\n                \
    \               Version 4\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The VlanHello protocol is part of the InterSwitch Message Protocol\n\
    \   (ISMP) which provides interswitch communication between switches\n   running\
    \ Cabletron's SecureFast VLAN (SFVLAN) product.  Switches use\n   the VlanHello\
    \ protocol to discover their neighboring switches and\n   establish the topology\
    \ of the switch fabric.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This memo is being distributed to members of the Internet\
    \ community\n   in order to solicit reactions to the proposals contained herein.\n\
    \   While the specification discussed here may not be directly relevant\n   to\
    \ the research problems of the Internet, it may be of interest to\n   researchers\
    \ and implementers.\n"
- title: 1.1 Data Conventions
  contents:
  - "1.1 Data Conventions\n   The methods used in this memo to describe and picture\
    \ data adhere to\n   the standards of Internet Protocol documentation [RFC1700],\
    \ in\n   particular:\n      The convention in the documentation of Internet Protocols\
    \ is to\n      express numbers in decimal and to picture data in \"big-endian\"\
    \n      order.  That is, fields are described left to right, with the most\n \
    \     significant octet on the left and the least significant octet on\n     \
    \ the right.\n      The order of transmission of the header and data described\
    \ in this\n      document is resolved to the octet level.  Whenever a diagram\
    \ shows\n      a group of octets, the order of transmission of those octets is\n\
    \      the normal order in which they are read in English.\n      Whenever an\
    \ octet represents a numeric quantity the left most bit\n      in the diagram\
    \ is the high order or most significant bit.  That\n      is, the bit labeled\
    \ 0 is the most significant bit.\n      Similarly, whenever a multi-octet field\
    \ represents a numeric\n      quantity the left most bit of the whole field is\
    \ the most\n      significant bit.  When a multi-octet quantity is transmitted\
    \ the\n      most significant octet is transmitted first.\n"
- title: 2. VlanHello Protocol Operational Overview
  contents:
  - "2. VlanHello Protocol Operational Overview\n   Switches use the VlanHello protocol\
    \ to detect their neighboring\n   switches and establish the topology of the switch\
    \ fabric.\n"
- title: 2.1 Neighbor Discovery
  contents:
  - "2.1 Neighbor Discovery\n   At initialization, each switch sends an Interswitch\
    \ Keepalive message\n   out all local ports except those which have been preconfigured\
    \ such\n   that they cannot be Network ports (see Section 2.2).  Then, as each\n\
    \   switch discovers its neighboring switches via incoming Interswitch\n   Keepalive\
    \ messages, it notifies its local topology services (see\n   Section 2.3), which\
    \ then build the topology tables for the switching\n   fabric.\n   Each switch\
    \ continues to send Interswitch Keepalive messages at\n   regular intervals (currently\
    \ 5 seconds).  If a switch has not heard\n   from one of its neighbors for some\
    \ predetermined interval (see\n   Section 2.4), notification is sent to all interested\
    \ services and the\n   neighboring switch is removed from the topology table.\n\
    \   Interswitch Keepalive messages are described in Section 4.\n"
- title: 2.2 Port States
  contents:
  - "2.2 Port States\n   Each port on a switch can be in one of several different\
    \ states.\n   These states are listed below.  Figure 1 shows how the port state\n\
    \   changes within the VlanHello protocol.\n   o  Unknown.  This is the default\
    \ state of all ports at\n      initialization.\n   o  Network.  A port is deemed\
    \ a Network port when the switch has\n      received an Interswitch Keepalive\
    \ message over the port from one\n      of its neighbor switches.  A transition\
    \ to this state triggers a\n      Neighbor Found event, notifying the local topology\
    \ servers that\n      the interface is functioning and a 2-way conversation has\
    \ been\n      established with the neighbor.\n      When the last switch is lost\
    \ on a Network port, the state of the\n      switch reverts to either Network\
    \ Only (see next state) or to\n      Unknown, and a Neighbor Lost event is triggered,\
    \ notifying the\n      local topology servers that the interface is no longer\n\
    \      operational.\n   o  Network Only.  Certain types of port interfaces are\
    \ incapable of\n      accessing user endstations and can only be used to access\
    \ other\n      switches.  Such ports are deemed Network Only ports.  If the last\n\
    \      switch is lost from a port that has already been deemed a Network\n   \
    \   port, the VlanHello protocol checks the condition of the port\n      interface.\
    \  If it is the type of interface that can only be used\n      to access other\
    \ switches, the state of the port is set to Network\n      Only.  Otherwise, it\
    \ reverts to Unknown.\n   o  Standby.  A port is deemed a Standby port under the\
    \ following\n      conditions:\n      o  The neighbor switch on the port has a\
    \ higher level of\n         functionality and it has determined that the local\
    \ switch is\n         incompatible with that functionality.  In this circumstance,\n\
    \         the MAC entry for the local switch in the Interswitch Keepalive\n  \
    \       message received from the neighbor contains an assigned status\n     \
    \    of Incompatible.\n      o  The list of MAC entries in the Interswitch Keepalive\
    \ message\n         received from the neighbor switch does not contain an entry\
    \ for\n         the local switch.  In this circumstance, the local switch\n  \
    \       assumes that communication with its neighbor will be one-way\n       \
    \  only.\n      The VlanHello protocol continues to listen for Interswitch\n \
    \     Keepalive messages on a Standby port, but does not transmit any\n      Interswitch\
    \ Keepalive messages over the port.  If a message is\n      received that removes\
    \ the condition under which the port state was\n      set to Standby, the state\
    \ of the port is set to Network.\n   o  Going to Access.  When any packet other\
    \ than an Interswitch\n      Keepalive message is received over an Unknown port,\
    \ the state of\n      the port is changed to Going to Access and a timer is activated.\n\
    \      If the timer expires without an Interswitch Keepalive message\n      being\
    \ received over the port, the port state changes to Access.\n   o  Access.  A\
    \ port is deemed an Access port when any packet other\n      than an Interswitch\
    \ Keepalive message has been received over the\n      port and the Going to Access\
    \ timer has expired.  A port can also\n      be administratively designated an\
    \ Access \"control\" port, meaning\n      the port is to remain an Access port,\
    \ regardless of the type of\n      messages that are received on it.  Interswitch\
    \ Keepalive messages\n      are not sent over Access control ports.\n   Three\
    \ other types of ports are recognized:  the host management port,\n   host data\
    \ port, and host control port. These ports are designated at\n   initialization\
    \ and are used to access the host CPU.  Interswitch\n   Keepalive messages are\
    \ not sent over these ports.\n                                 Packet in\n   \
    \                                  |\n                                     V\n\
    \                                +---------+\n                Packet in      \
    \ | Unknown |\n                    |           +---------+\n        G-A      \
    \   V                |\n       Timer  +----------+   no      V\n        exp  \
    \ | Going to |<------[KA msg?]           Packet in\n       <------|  Access  |\
    \           |                   |\n       |      +----------+       yes |    \
    \               V\n       V             |               V     yes      +---------+\n\
    \   +--------+        V            [1-way?]------+-->| Standby |\n   | Access\
    \ |    [KA msg?]           |          ^   +---------+\n   +--------+        |\
    \               | no       |        |\n                     |               V\
    \       no |        V\n                 yes |         [compatible?]----+    [KA\
    \ msg?]\n                     |               |                   |\n        \
    \             |               | yes               | yes\n                    \
    \ |               V                   V\n                     V          +---------+\
    \           [1-way?]\n                     +--------->| Network |<--+        \
    \  |\n                                +---------+   ^          | no\n        \
    \                             |        | yes      V\n                        \
    \   lost last |        +<----[compatible?]\n                            neighbor\
    \ |\n                                     V\n                                \
    \ [network]\n                                 [ only? ]\n                    \
    \                 |\n         +--------------+     yes    |    no      +---------+\n\
    \         | Network Only |<-----------+----------->| Unknown |\n         +--------------+\
    \                         +---------+\n                     Figure 1:  Port State\
    \ Machine\n"
- title: 2.3 Topology Events
  contents:
  - "2.3 Topology Events\n   When the VlanHello protocol discovers new information\
    \ about the\n   status of one of its network ports, it notifies its local topology\n\
    \   service center so that the service center can build or modify the\n   topology\
    \ tables for the switch fabric.  This notification takes the\n   form of a system\
    \ event, described in a structure known as a topology\n   relay structure.  These\
    \ structures are linked in a first-in/first-out\n   (FIFO) queue and processed\
    \ by the topology servers in the order in\n   which they were received.\n   A\
    \ topology relay structure typically contains information from\n   Interswitch\
    \ Keepalive messages received on the specified port, as\n   shown below.\n   \
    \    0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   00 |                             Event                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   04 |\
    \                       Delta options mask                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   08 |                      Current options mask                     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   12 |\
    \                          Port number                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   16 |                                                               |\n   \
    \   +                Port neighbor switch identifier                +\n      |\
    \                                                               |\n      +   \
    \                            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |      \
    \                         |  Port neighbor IP address ... |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   28 | ... Port neighbor IP address  |                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   Neighbor chassis MAC addr   +\n   32 |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   36 |                   Neighbor chassis IP address                 |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   40 |\
    \                    Neighbor functional level                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   44 |                         Topology agent                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   48 |\
    \                           Next event                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Event\n         This 4-octet field contains the number of the event.\n\
    \         Valid values are as follows:\n            1   A new neighbor switch\
    \ was discovered on the\n                specified port.\n            2   The\
    \ neighbor switch has gained the feature(s)\n                specified in the\
    \ Delta options mask.\n            3   The neighbor switch has lost the feature(s)\n\
    \                specified in the Delta options mask.\n            4   The neighbor\
    \ switch has timed out and is presumed\n                down.\n            5 \
    \  The specified port is down.\n            6   The neighbor switch has been previously\
    \ seen on a\n                different port.  The specified port is the\n    \
    \            previous port.\n            7   The specified port is being reassigned\
    \ to another\n                topology agent.  Event is generated by the current\n\
    \                (old) agent.\n            8   The port is looped -- that is,\
    \ the Keepalive\n                message was generated by the receiving switch.\n\
    \            9   The port is crossed -- that is, a Keepalive message\n       \
    \         was received on a port not owned by this topology\n                agent.\n\
    \            10  The neighbor switch's functional level has changed.\n       \
    \     11  The neighbor switch is running an incompatible\n                version\
    \ of the protocol.\n            12  Two-way communication with the neighbor switch\
    \ has\n                been lost.\n            13  The neighbor switch's Keepalive\
    \ message sequence\n                number has been reset, indicating the switch\n\
    \                itself has been reset.\n   Delta options mask\n      This 4-octet\
    \ field contains a bit map specifying the feature(s)\n      gained or lost by\
    \ the neighbor switch (events 2 and 3 only).\n      Valid values are as specified\
    \ for the next field, Current options\n      mask.\n   Current options mask\n\
    \      This 4-octet field contains a bit map specifying the features of\n    \
    \  the neighbor switch.  Bit assignments are as follows:\n         1       (unused)\n\
    \         2       The switch is a VLAN switch.\n         4       The switch has\
    \ link state capability.\n         8       The switch has loop-free flood path\
    \ capability.\n         16      The switch has resolve capability.\n         32\
    \      (unused)\n         64      The switch has tag-based flood capability.\n\
    \         128     The switch has tap capability.\n         256     The switch\
    \ has message connection capability.\n         512     The switch has redundant\
    \ access capability.\n         1024    The switch is an isolated switch.\n   \
    \      4096    The switch is an uplink. (SFVLAN V1.8 only)\n         8192    The\
    \ switch is an uplink to core. (SFVLAN V1.8 only)\n         16384   The port is\
    \ an uplink port. (SFVLAN V1.8 only)\n         32768   The port is an uplink flood\
    \ port. (SFVLAN V1.8 only)\n   Port number\n      This 4-octet field contains\
    \ the logical number of the local port\n      for which the event was generated.\n\
    \   Port neighbor switch identifier\n      This 10-octet field contains the internal\
    \ identifier of the\n      neighbor switch discovered on the port.  The identifier\
    \ consists\n      of the 6-octet physical (MAC) address of the neighbor switch,\n\
    \      followed by the 4-octet logical port number (local to the neighbor\n  \
    \    switch) on which the neighbor was discovered.\n   Port neighbor IP address\n\
    \      This 4-octet field contains the Internet Protocol (IP) address of\n   \
    \   the neighbor switch.\n   Neighbor chassis MAC address\n      This 6-octet\
    \ field contains the physical (MAC) address of the\n      chassis of the neighbor\
    \ switch.\n   Neighbor chassis IP address\n      This 4-octet field contains the\
    \ Internet Protocol (IP) address of\n      the chassis of the neighbor switch.\n\
    \   Neighbor functional level\n      This 4-octet field contains the functional\
    \ level of the neighbor\n      switch, as determined by the version level of the\
    \ SecureFast VLAN\n      software under which this switch is operating.  Valid\
    \ values are\n      as follows:\n      1  The switch is running a version of SFVLAN\
    \ prior to Version 1.8.\n      2  The switch is running SFVLAN Version 1.8 or\
    \ greater.\n   Topology agent\n      This 4-octet field contains a pointer to\
    \ the topology agent that\n      generated the event.  The pointer here can reference\
    \ any of the\n      topology agents that send Interswitch Keepalive messages --\
    \ that\n      is, any agent running the VlanHello protocol.\n   Next event\n \
    \     This 4-octet field contains a pointer to the next event relay\n      structure\
    \ in the list.\n"
- title: 2.4 Timers
  contents:
  - "2.4 Timers\n   The VlanHello protocol uses three timers.\n   o  Send Hello timer.\
    \  The Send Hello timer is used to control the\n      interval at which Interswitch\
    \ Keepalive messages are sent.\n   o  Aging timer.  The Aging Timer is used to\
    \ detect when communication\n      with a neighboring switch has been lost.\n\
    \   o  Going to Access timer.  The Going to Access timer is used to\n      synchronize\
    \ the transition of a port state to Access and prevent a\n      port from being\
    \ prematurely designation as an Access port during\n      network initialization.\
    \  If an Unknown port receives any packet\n      other than an Interswitch Keepalive\
    \ message, the port state is set\n      to Going To Access.  If the switch receives\
    \ an Interswitch\n      Keepalive message over that port before the timer expires,\
    \ the\n      port state is changed to Network. Otherwise, when the timer\n   \
    \   expires, the port state is changed to Access.\n"
- title: 3. InterSwitch Message Protocol
  contents:
  - "3. InterSwitch Message Protocol\n   The VlanHello protocol operates as part of\
    \ the InterSwitch Message\n   Protocol (ISMP) -- part of Cabletron's SecureFast\
    \ VLAN (SFVLAN)\n   product, as described in [IDsfvlan].  ISMP provides a consistent\n\
    \   method of encapsulating and transmitting network control messages\n   exchanged\
    \ between SFVLAN switches.\n   ISMP message packets are of variable length and\
    \ have the following\n   general structure:\n   o  Frame header\n   o  ISMP packet\
    \ header\n   o  ISMP message body\n"
- title: 3.1 Frame Header
  contents:
  - "3.1 Frame Header\n   ISMP packets are encapsulated within an IEEE 802-compliant\
    \ frame\n   using a standard header as shown below:\n       0                \
    \   1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   00 |                                                               |\n   \
    \   +      Destination address      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   04 |\
    \                               |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \        Source address         +\n   08 |                                   \
    \                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   12 |             Type              |                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n   16 |\
    \                                                               |\n      +   \
    \                                                            +\n      :      \
    \                                                         :\n   Destination address\n\
    \      This 6-octet field contains the Media Access Control (MAC) address\n  \
    \    of the multicast channel over which all switches in the fabric\n      receive\
    \ ISMP packets.  The destination address fields of all ISMP\n      packets contain\
    \ a value of 01-00-1D-00-00-00.\n   Source address\n      This 6-octet field contains\
    \ the physical (MAC) address of the\n      switch originating the ISMP packet.\n\
    \   Type\n      This 2-octet field identifies the type of data carried within\
    \ the\n      frame.  The type field of ISMP packets contains the value 0x81FD.\n"
- title: 3.2 ISMP Packet Header
  contents:
  - "3.2 ISMP Packet Header\n   The ISMP packet header consists of a variable number\
    \ of octets, as\n   shown below:\n       0                   1               \
    \    2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   00 |///////////////////////////////////////////////////////////////|\n   \
    \   ://////// Frame header /////////////////////////////////////////:\n      +////////\
    \ (14 octets)  /////////+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   12 |///////////////////////////////|\
    \         ISMP Version          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   16 |       ISMP message type       |        Sequence number        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   20 |\
    \  Code length  |                                               |\n      +-+-+-+-+-+-+-+-+\
    \                                               +\n      |                   \
    \     Authentication code                    |\n      :                      \
    \                                         :\n      |                         \
    \                                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   :                                                               :\n   Frame\
    \ header\n      This 14-octet field contains the frame header.\n   ISMP Version\n\
    \      This 2-octet field contains the version number of the InterSwitch\n   \
    \   Message Protocol to which this ISMP packet adheres.  The VlanHello\n     \
    \ protocol uses ISMP Version 3.0.\n   ISMP message type\n      This 2-octet field\
    \ contains a value indicating which type of ISMP\n      message is contained within\
    \ the message body. VlanHello\n      Interswitch Keepalive messages have a message\
    \ type of 2.\n   Sequence number\n      This 2-octet field contains an internally\
    \ generated sequence\n      number used by the various protocol handlers for internal\n\
    \      synchronization of messages.\n   Code length\n      This 1-octet field\
    \ contains the number of octets in the\n      Authentication code field of the\
    \ message.\n   Authentication code\n      This variable-length field contains\
    \ an encoded value used for\n      authentication of the ISMP message.\n"
- title: 3.3 ISMP Message Body
  contents:
  - "3.3 ISMP Message Body\n   The ISMP message body is a variable-length field containing\
    \ the\n   actual data of the ISMP message.  The length and content of this\n \
    \  field are determined by the value found in the message type field.\n   The\
    \ format of the VlanHello Interswitch Keepalive message is\n   described in the\
    \ next section.\n"
- title: 4. Interswitch Keepalive Message
  contents:
  - "4. Interswitch Keepalive Message\n   The VlanHello Interswitch Keepalive message\
    \ consists of a variable\n   number of octets, as shown below:\n        0    \
    \               1                   2                   3\n        0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    00 |                                                               |\n  \
    \     +                          Frame header /                       +\n    \
    \   :                       ISMP packet header                      :\n      \
    \ |                                                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     n |            Version            |      Switch IP address ...    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   n+4\
    \ |    ... Switch IP address      |                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   n+8 |                                  \
    \                             |\n       +                           Switch ID\
    \                           +\n       |                                      \
    \                         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  n+16 |                                                               |\n  \
    \     +      Chassis MAC address      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                               |      Chassis IP address ...   |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  n+24 |\
    \   ... Chassis IP address      |          Switch type          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  n+28 |                        Functional level                       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  n+32\
    \ |                            Options                            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \  n+36 |        Base MAC count         |                               |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n  n+40\
    \ |                                                               |\n       :\
    \                        Base MAC entries                       :\n       |  \
    \                                                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          n = 21 + length of the authentication code of the packet\n   Frame\
    \ header/ISMP packet header\n      This variable-length field contains the frame\
    \ header and the ISMP\n      packet header.\n   Version\n      This 2-octet field\
    \ contains the version number of the VlanHello\n      protocol to which this message\
    \ adheres.  This document describes\n      VlanHello Version 4.\n   Switch IP\
    \ address\n      This 4-octet field contains the Internet Protocol (IP) address\
    \ of\n      the sending switch.\n   Switch ID\n      This 10-octet field contains\
    \ the internal ISMP identifier of the\n      sending switch.  The identifier is\
    \ generated by the sending switch\n      and consists of the 6-octet physical\
    \ (MAC) address of the switch,\n      followed by a 4-octet value containing the\
    \ logical port number\n      over which the switch sent the packet.\n   Chassis\
    \ MAC\n      This 6-octet field contains the physical (MAC) address of the\n \
    \     chassis of the sending switch.\n   Chassis IP address\n      This 4-octet\
    \ field contains the Internet Protocol (IP) address of\n      the switch chassis.\n\
    \   Switch type\n      This 2-octet field contains the type of the switch. Currently,\
    \ the\n      only value recognized here is as follows:\n         2   The switch\
    \ is an SFVLAN switch.\n   Functional level\n      This 4-octet field contains\
    \ the functional level of the sending\n      switch, as determined by the version\
    \ level of the SecureFast VLAN\n      software under which this switch is operating.\
    \  Valid values are\n      as follows:\n         1  The switch is running a version\
    \ of SFVLAN prior to Version\n            1.8.\n         2  The switch is running\
    \ SFVLAN Version 1.8 or greater.\n   Options\n      This 4-octet field contains\
    \ a bit map specifying the features of\n      the switch.  Bit assignments are\
    \ as follows:\n         1       (unused)\n         2       The switch is a VLAN\
    \ switch.\n         4       The switch has link state capability.\n         8\
    \       The switch has loop-free flood path capability.\n         16      The\
    \ switch has resolve capability.\n         32      (unused)\n         64     \
    \ The switch has tag-based flood capability.\n         128     The switch has\
    \ tap capability.\n         256     The switch has message connection capability.\n\
    \         512     The switch has redundant access capability.\n         1024 \
    \   The switch is an isolated switch.\n         4096    The switch is an uplink.\
    \ (SFVLAN V1.8 only)\n         8192    The switch is an uplink to core. (SFVLAN\
    \ V1.8 only)\n         16384   The port is an uplink port. (SFVLAN V1.8 only)\n\
    \         32768   The port is an uplink flood port. (SFVLAN V1.8 only)\n   Base\
    \ MAC count\n      This 2-octet field contains the number of entries in the list\
    \ of\n      Base MAC entries.\n   Base MAC entries\n      This variable-length\
    \ field contains a list of entries for all\n      neighboring switches that the\
    \ sending switch has previously\n      discovered on the port over which the message\
    \ was sent. The number\n      of entries is found in the Base MAC count field.\n\
    \      Each MAC entry is 10 octets long, structured as follows:\n       0    \
    \               1                   2                   3\n       0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +      Switch MAC address       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                               |  Assigned neighbor state ...  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  ... Assigned neighbor state  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Switch MAC address\n      This 6-octet field contains the base MAC address\
    \ of the\n      neighboring switch.\n   Assigned neighbor state\n      This 4-octet\
    \ field contains the assigned state of the neighboring\n      switch as perceived\
    \ by the sending switch. Currently, the only\n      value valid here is 3, indicating\
    \ a state of Network\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   Security concerns are not addressed in this document.\n"
- title: 6. References
  contents:
  - "6. References\n   [RFC1700]   Reynolds, J. and  J. Postel, \"Assigned Numbers\"\
    , STD 2,\n               RFC 1700, October 1994.\n   [IDsfvlan]  Ruffen, D., Len,\
    \ T. and J. Yanacek, \"Cabletron's\n               SecureFast VLAN Operational\
    \ Model\", RFC 2643, August\n               1999.\n   [IDvlsp]    Kane, L., \"\
    Cabletron's VLS Protocol Specification\", RFC\n               2642, August 1999.\n"
- title: 7. Authors' Addresses
  contents:
  - "7. Authors' Addresses\n   Dave Hamilton\n   Cabletron Systems, Inc.\n   Post\
    \ Office Box 5005\n   Rochester, NH  03866-5005\n   Phone:(603) 332-9400\n   EMail:\
    \  daveh@ctron.com\n   Dave Ruffen\n   Cabletron Systems, Inc.\n   Post Office\
    \ Box 5005\n   Rochester, NH  03866-5005\n   Phone:(603) 332-9400\n   EMail: \
    \ ruffen@ctron.com\n"
- title: 17.  Full Copyright Statement
  contents:
  - "17.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
