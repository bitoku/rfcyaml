Camellia Counter Mode and Camellia Counter with CBC MAC Mode Algorithms Abstract
This document describes the algorithms and presents test vectors for the Camellia block cipher algorithm in Counter mode (CTR) and Counter with Cipher Block Chaining MAC mode (CCM).
The purpose of this document is to make the Camellia CTR and Camellia CCM algorithm conveniently available to the Internet Community.
This document describes the use of the Camellia block cipher algorithm in Counter (CTR) mode and Counter with CBC MAC (CCM) mode.
Camellia is a symmetric cipher with a Feistel structure.
Camellia was developed jointly by NTT and Mitsubishi Electric Corporation in 2000.
It was designed to withstand all known cryptanalytic attacks, and it has been scrutinized by worldwide cryptographic experts.
Camellia is suitable for implementation in software and hardware, offering encryption speed in software and hardware implementations that is comparable to Advanced Encryption Standard (AES) [5].
Camellia supports 128 bit block size and 128 , 192 , and 256 bit key lengths, i.e., the same interface specifications as the AES.
Therefore, it is easy to implement Camellia based algorithms by replacing the AES block of AES based algorithms with a Camellia block.
Camellia already has been adopted by the IETF and other international standardization organizations; in particular, the IETF has published specifications for the use of Camellia with IPsec [6], TLS [7], Secure/Multipurpose Internet Mail Extensions (S/MIME)
[8], and XML Securiy [9].
Camellia is one of the three ISO/IEC international standard [10] 128 bit block ciphers (Camellia, AES, and Super Effective and Efficient Delivery (SEED)).
Camellia was selected as a recommended cryptographic primitive by the EU NESSIE (
New European Schemes for Signatures, Integrity and Encryption) project [11] and was included in the list of cryptographic techniques for Japanese e Government systems that was selected by the Japanese CRYPTREC (Cryptography Research and Evaluation Committees)
Since optimized source code is provided under several open source licenses [13], Camellia has also been adopted by several open source projects (OpenSSL, FreeBSD, Linux, and Firefox).
The algorithm specification and object identifiers are described in [1].
The Camellia web site [14] contains a wealth of information about Camellia, including detailed specification, security analysis, performance figures, reference implementation, optimized implementation, test vectors (TVs), and intellectual property information.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [2].
All multi octet values in this document are encoded and represented in network byte order, i.e., most significant octet first.
All symmetric block cipher algorithms share common characteristics and variables, including mode, key size, weak keys, and block size.
The following sections contain descriptions of the relevant characteristics of Camellia.
Key Size Camellia supports three key sizes: 128 bits, 192 bits, and 256 bits.
The default key size is 128 bits, and all implementations MUST support this key size.
Implementations MAY also support key sizes of 192 bits and 256 bits.
At the time of writing this document, there are no known weak keys for Camellia.
Block Size and Padding Camellia uses a block size of 16 octets (128 bits).
Padding is required by the algorithm to maintain a 16 octet (128 bit) block size.
Padding MUST be added such that the data to be encrypted has a length that is a multiple of 16 octets.
Because of the algorithm specific padding requirement, no additional padding is required to ensure that the ciphertext terminates on a 4 octet boundary (i.e., maintaining a 16 octet block size guarantees that the Encapsulating Security Payload (ESP)
Pad Length and Next Header fields will be right aligned within a 4 octet word).
Additional padding MAY be included as long as the 16 octet block size is maintained.
Performance Performance figures for Camellia are available at [14].
The NESSIE project has reported on the performance of optimized implementations independently [11].
Modes of Operation Camellia Counter (Camellia CTR) mode and Camellia Counter with CBC  MAC (Camellia CCM) mode are based on [3][15][4].
CTR mode [3] behaves like a stream cipher, but is based on a block cipher primitive (that is, CTR mode operation of a block cipher results in a stream cipher).
CCM mode [15][4] is a generic authenticate and encrypt block cipher mode.
In this specification, CCM is used with the Camellia [1] block cipher.
This section contains nine TVs, which can be used to confirm that an implementation has correctly implemented Camellia CTR.
The first three TVs use Camellia with a 128 bit key; the next three TVs use Camellia with a 192 bit key; and the last three TVs use Camellia with a 256 bit key.
TV #1: Encrypting 16 octets using Camellia CTR with
AE 68 52 F8 12 10 67 CC 4B F7 A5 76
55 77 F3 9E Camellia CTR IV  : 00 00 00 00 00 00 00 00
D0 9D C2 9A 82 14 61 9A 20 87 7C 76 DB 1F 0B 3F TV
7E 24 06 78 17 FA E0 D7 43 D6 CE 1F
02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F : 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F Counter Block (1): 00 6C B6 DB C0 54 3B 59 DA 48 D9 0B 00 00
3B 9F 9C 1C 25 E5 CA B0 34 6D 0D F8 4F 7D FE 57 Ciphertext
DB F3 C7 8D C0 83 96 D4 DA 7C
90 77 65 BB CB 44 : 2B 8E 8E 0F 31 F0 DC A7 2C 74 17 E3 53 60 E0 48 TV
50 20 A8 AC 6E
02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F : 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F : 20 21 22 23 Counter Block (1): 00 E0 01 7B 27 77 7F 3F 4A 17 86 F0 00 00 00 01
D2 85 97 D2 Counter Block (3):
00 E0 01 7B 27 77 7F 3F 4A 17 86 F0 00 00
73 F1 4F 2D 5D 9D CE 98 89 CD :
DF 50 86 96 TV #4:
C9 F5 79 C1 75 F9 3E 3B FB 0E
ED : 86 3D 06 CC FD B7 85 15
53 69 6E 67 6C 65 20 62 6C 6F 63 6B 20 6D 73 67 Counter Block (1): 00 00
48 36 73 3C 14 7D 6D
23 79 39 9E 8A 8D 2B 2B
16 70 2F C7 8B 9E 96 96 TV #5:
7C 5C B2 40 1B 3D C3 3C 19 E7 34 08 19 E0 F6 9C :
67 8C 3D B8 E6 F6 A9 1A Camellia CTR IV  : 02 0C 6E AD C2
02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F : 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F Counter Block (1): 00 96 B0 3B 02 0C
6E AD C2 CB 50 0D 00 00
7D EE 36 F4 A1 D5 E2 12 6F 42 75 F7 A2 6A C9 52 Counter Block (2): 00 96 B0 3B 02 0C
6E AD C2 CB 50 0D 00
20 30 82 EF 47
7D EF 34 F7 A5 D0 E4 15 67 4B 7F FC AE 67
C7 5D : D0 18 B8 6F F2 30 51 E0 56 39 2A 99 F3 5A 4C ED TV
65 27 9B : F5 9B 60 A7 86 D3 E0 FE Camellia CTR IV  :
5C BD 60 27 8D CC 09 12
02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F : 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F : 20 21 22 23 Counter Block (1):
00 07 BD FD 5C BD
60 27 8D CC 09 12 00 00 00 01
27 BD A5 04 78 FD 93 40 77 Counter Block (2): 00 07
60 27 8D CC 09 12 00 00
60 27 8D CC 09 12 00 00 00 03
57 10 E5 56 E1 48 7A 20 B5 AC 0E 73 F1 9E 4E 78 : 76 F3 7F DC 91 B1 EF 4D 4D AD E8 E6 66 A6 4D 0E : D5 57 AB 57 TV #7:
1D B0 6F 4C 8A 05
42 C8 69 6F 6C :
6A 81 AF 1E EC 96 B4 D3 7F C1 D6 89 E6 C1 C1 04
60 DB 56 72 C9 7A A8 F0 B2 00 00
58 79 EF F8 86 : C6 6D D5 1A 5B 6A 99
74 4B 50 59 0C 87 A2
02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F : 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F Counter Block (1): 00 FA AC 24 C1
58 5E F1 5A 43 D8 75 00 00 00 01
35 21 29 A4 8E 90 4A Counter Block (2):
FA AC 24 C1 58 5E F1 5A 43 D8
F5 0D C6 99 08 CA 56
A8 3C 2B 22 A8 83 9E 45 :
E5 1C D4 8A 1C DF 40 6E
BC 9C C2 D3 AB 83 41 08 TV #9:
FF 7A 61 7C E6 91 48 E4 F1 72 6E 2F 43
AA 62 D9 F8 05
53 2E DF F1 EE D6 87
FB 54 15 3D Camellia CTR IV  : 51 A5 1D
70 A1 C1 11 48
0A 0B 0C 0D 0E 0F : 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F : 20 21 22 23 Counter Block (1): 00 1C C5 B7 51
A5 1D 70 A1 C1 11 48 00 00
70 A1 C1 11 48 00 00
: C1 70 B1 58 71 EC 71 88 6D D9 05
6C 39 70 Counter Block (3): 00 1C C5 B7 51
A5 1D 70 A1 C1 11 48 00 00 00
27 6F : 15 EF 0D 8D 4.2.
This section contains twenty four TVs, which can be used to confirm that an implementation has correctly implemented Camellia CCM.
In each of these TVs, the least significant sixteen bits of the counter block is used for the block counter, and the nonce is 13 octets.
Some of the TVs include an eight octet authentication value, and others include a ten octet authentication value.
[Input (8 cleartext header octets)] 00
0C 0D 0E 0F 10 11 12 13
1C 1D 1E CBC IV in:
A4 A5 00 17 CBC IV out:
D4 DB CD 92  A8 96
1D 0D BB D0  D5 7F 7E
After xor: D4 D3 CD 93
1B 0A BB D0  D5 7F 7E 1D
After CAM: BD 84 03 80  73 59 37 B7  CE F5 E4 BA
1B 18 54 DC After xor: B5 8D 09 8B
7F 54 39 B8  DE E4 F6 A9  0F 0D 42 CB
After CAM: CE 21 82 9C  F6 F2 4D A2  CB 35 D1 FD  81 27 63 EC
D6 38 98 87  EA EF 53 A2
CB 35 D1 FD  81 27 63 EC
20 11 FE E2  53 B1 A7 DB  02 77 FA 37  6D 78 EE 10 MIC tag  : 20 11 FE E2
53 B1 A7 DB CTR Start:
A0 A1 A2 A3  A4
01 CTR[0001]: B2 7A 7B 8E
82 E2 98 4C  06 44 CC 42 CTR[0002]:
97 13 45  D1 63 22 90  E7 F8 15 4A
BA 73 71 85  E7 19
31 04 92 F3 8A 5F
12 51 DA 55  FA FB C9 49  84 8A 0D FC AE CE 74 6B  3D B9 AD   Packet Vector #2
[Input (8 cleartext header octets)] 00
0C 0D 0E 0F 10 11 12 13
1C 1D 1E 1F CBC IV in: 59 00 00 00
A0 A1 A2 A3  A4
CBC IV out:07 0B 22 50  8A 24 3C DD  5B BA 54 DB
After xor: 07 03 22 51  88 27 38 D8  5D BD 54 DB
After CAM: 10 FD C2 F2
B0 4F 62 A4  A1 A9 31 1E
After xor: 18 F4 C8 F9  9C 47 91 99  A0 5E 70 B7  B5 BC 27 09
After CAM: E4 C8 82 02  89
55 5C 15  CE 7F E4 60  B1 B9 5A 08
After xor: FC D1 98 19  95 48 42 0A  CE 7F E4 60  B1 B9 5A 08
After CAM: D2 96 BA 4F  83 DE B5 DF  A2 19 08 F7  47 4E 3C 40 MIC tag  :
83 DE B5 DF CTR Start:
A0 A1 A2 A3  A4
01 CTR[0001]: 55 2C 6E B4  82 A2 EF D6  85 37 FE 12
25 64 BF  8E AF E1 D9 95 26 EC 01  6D 1B F0 42  4C FB D2 CD  62 84 8F 33 60 B2 29
5D  F2 42 83 E8   Packet Vector #3
[Input (8 cleartext header octets)] 00
0C 0D 0E 0F 10 11 12 13
1C 1D 1E 1F 20 CBC IV in: 59 00 00
04 03 02  A0 A1 A2 A3  A4 A5 00 19
out:6F 69 15 DF  A6 A0 DF
84 A7 37 88  A3 65 F9 2E
After xor: 6F 61 15 DE  A4 A3 DB 21
82 A0 37 88  A3 65 F9 2E
After CAM: 59 5D 99 48
13 93 36 C9  11 A8 09
After xor: 51 54 93 43  75 09 D4 C6
03 82 24 DA  05 BD 1F 0A
After CAM: 1A 43 D7 19  65 43 97 C1
43 6F 4F 11  A7 6C 6B
After xor: 02 5A CD 02
89 DE  63 6F 4F 11
After CAM: 30 0B 06 8A  A0 D1 4D C5
MIC tag  : 30 0B 06
8A  A0 D1 4D C5
04 03 02  A0 A1 A2 A3  A4 A5 00
01 CTR[0001]: 89 FF 69 DD
AD 97 BB 02 CTR[0002]: C4 32 A7 9C
CB 4B E9 8D  24 A8 F0 AB  C6 87 16 11 CTR[MIC ]:
05 06 07  81 F6 63 D6
78 17 F9 20 36 08  B9 82 AD 15  DC 2B BD 87
D7 56 F7 92 04 F5 51 D6  68 2F 23
[Input (12 cleartext header octets)] 00
0C 0D 0E 0F 10 11 12 13
1C 1D 1E CBC IV in:
04 03  A0 A1 A2 A3  A4 A5 00 13 CBC IV out:F5 51 CF 6C
76 F1 6B  57 F0 19 FE After xor:
F5 5D CF 6D  7E F4 D0 0E  2D 71 F9 62  5D FB 19 FE   [hdr]
: 02 2B 21 1B  EB 97 02 3B  F8 10
7D CC  62 14 E5 7C After xor: 0E 26 2F 14  FB 86
10 28  EC 05 6B DB  7A 0D FF 67
After CAM: 48 14 A4 2D
25 1C 37  19 C5 6F DD  5A
After xor: 54 09 BA 2D  31 25 1C 37  19 C5 6F DD  5A 37 81 42
80 D5 F0 09  53 2C 9D 43
4E F3 04 47 MIC tag  :
80 D5 F0 09 CTR Start:
04 03  A0 A1 A2 A3  A4 A5 00
62 00 A2 9C  6F CC 19 1F  DF 6B
6C B9 BE EE  1E A2 E9 B3  2D D6 C2 9A
E8 26 D5 C2 CTR[MIC ]
1E 82 72 11 B0 8F
70 A4 A0 8B 3A 93 3A 63  E4 97 A0   Packet Vector #5
[Input (12 cleartext header octets)] 00
0C 0D 0E 0F 10 11 12 13
1C 1D 1E 1F CBC IV in: 59 00 00 00
07 06 05 04  A0 A1 A2 A3  A4
CBC IV out:73 72 9D 76
60 3A 12 7B  EF 26 FB 80
After xor: 73 7E 9D 77  78 BE BD 87  66 3D 1A 72
After CAM: E1 B7 A6 72
E2 5C 87 75  91 21 22 A4  07 13 CD 5B
ED BA A8 7D  F2 4D 95 66  85 34 34 B3  1F 0A D7 40   [msg] After CAM: 13 2F 58 D9  5D 0F 95 B8  90 BF 6F
After xor: 0F 32 46 C6
71 24 8B 13  AF C8 C8 44  E6 0F
88 B6 MIC tag  : 47 8F 1E B0  71 24 8B 13
07 06 05 04  A0 A1 A2 A3  A4 A5 00 01 CTR[0001]
: 26 DE B4 D6  5F D4 3C 81  AA 56 98 95  64 09 39 A2 CTR[0002]:
76 97 69 3A  21 13 0C 39  2E 4E EB BF
48 7B 24 BE CTR[MIC ]:
08 09 0A 0B  2A D3 BA D9 4F C5 2E 92  BE 43 8E 82
7C 10 23 B9  6A 8A 77
25 8F A1 7B A7
F3 31 DB 09   Packet Vector
[Input (12 cleartext header octets)] 00
0C 0D 0E 0F 10 11 12 13
1C 1D 1E 1F 20 CBC IV in: 59 00 00 00
06 05  A0 A1 A2 A3  A4 A5 00 15 CBC IV out:EB 59 05 CC
3F 52 61 10  26 24 75 93  DD B9 A0 F4
20 23 7D 9A  D7 B2 A0 F4   [hdr]
After CAM: 18 A9 AE A4  3D D2 A9 11
After xor: 14 A4 A0 AB  2D C3
78 1F F3 58  58 C8 57 84
After CAM: FA C4 13 18  98 54 1B 54  93 9C 64 B8
After xor: E6 D9 0D 07
93 9C 64 B8  CB FD 5B 18
After CAM: 49 E6 E8
ED  32 FB CA 2F
55 CD AF  D0 F2 B3 05 MIC tag  :
06 05  A0 A1 A2 A3  A4 A5 00
F2 A8 46 04  B5 2E BA C0  D7 51 34 BD  D6 54 FC 64 CTR[0002]:
E6 26 A9 24  8B E6 86 CB
92 D6 FB FC  2E F2 91 98 CTR[MIC ]
FE A5 48 0B A5 3F A8 D3  C3 44
22 AA  CE 4D E6 7F
FA 3B B7 3B AB AB 36 A1
00 09  08 07 06
[Input (8 cleartext header octets)] 00
0C 0D 0E 0F 10 11 12 13
1C 1D 1E CBC IV in: 61 00 00 00
09 08 07 06  A0 A1 A2 A3  A4
A5 00 17 CBC IV out:
99 1A 15 BF  5C DC F6 C4
After xor: AC F9 5D 78
9B 19 11 BA  5A DB F6 C4
After CAM: E9 C0 AC FD  C7 E8 E7 1D
After xor: E1 C9 A6 F6  CB E5 E9 12
9C FF ED 72  09 A6 7D 2A  48 B7 29 BF  D8 BE 39 59
After xor: 84 E6 F7 69
15 BB 63 2A  48 B7 29 BF  D8 BE 39 59
After CAM: 4F 41 FA DE  B2 58 F3 32
54 0A 55 7A  80 4A A3 F5 MIC tag  : 4F 41 FA DE  B2 58 F3 32
09 08 07 06  A0 A1 A2 A3  A4 A5 00 01 CTR[0001]
: 5C 5A 2A 2D  E9 41 1F 95  9D 27 CB FF
7A 0B CF 63 CTR[0002]:
57 41 32 4F  33 1B 4A 42  B1 4A 54 63 CTR[MIC ]:
05 06 07  54 53 20 26
E5 4C 11 9A 8D 36 D9 EC  6E 1E D9 74
4B 5C 2C AC AF A3 BC CF  7A 4E BF 95
[Input (8 cleartext header octets)] 00
0C 0D 0E 0F 10 11 12 13
1C 1D 1E 1F CBC IV in: 61 00 00 00
0A 09 08 07  A0 A1 A2 A3
A4 A5 00 18 CBC IV out:
45 E7 E2 62  58 D5 DA 46  D8 2F 69 3A
After xor: AD C2 1C 1C  47 E4 E6 67
5E D2 DA 46  D8 2F 69 3A
FA DE 0E B4  3E CA C1 E9
69 BB 8C A4  7C 0D 80 8F
After xor: F2 D7 04 BF  32 C7 CF E6  79 AA 9E B7  68 18 96 98
After CAM: D2 87 35 C2  D0 E4 AE 4E  BC C2 99 FF  B3 77 F8 A1 After xor:
CA 9E 2F D9  CC F9 B0 51  BC C2 99 FF  B3 77 F8 A1
After CAM: BD F6 FB 55  9E
90 C0 E7  DF 4B 0C 37
32 A2 MIC tag  :
BD F6 FB 55  9E 90 C0 E7
0A 09 08 07  A0 A1 A2 A3
01 CTR[0001]: 82 D8 91 0B
20 47 4A DB CTR[0002]:
FB BF 26 7E  0E BB EB 6A
07 4E 29 CF  3D 12 E6 DB CTR[MIC ]: CE 7E 1F C4  A0
05 06 07  8A D1 9B 00
1A 87 D1 48 F4 D9 2B EF
5C CC  E3 A6 3C 65
12 A6 F5 75 73 88
E4 91  3E F1 47 01
[Input (8 cleartext header octets)] 00
0C 0D 0E 0F 10 11 12 13
1C 1D 1E 1F 20 CBC IV in: 61 00 00 00
0B 0A 09 08  A0 A1 A2 A3
A4 A5 00 19 CBC IV out:
D0 A9 A5 94  00
63 86 40  11 0D DB 40  CA F8 4A 9C After xor: D0 A1 A5 95  02
60 82 45  17 0A DB 40  CA F8 4A 9C   [hdr]
After CAM: 7B CA 4E 2D
79 82 0D 1E  15 22 DD E8  37 B9 B1 F0
After xor: 73 C3 44 26
75 8F 03 11  05
33 CF FB  23 AC A7 E7   [msg] After CAM:
6B 75 9F 83  C0 8F 56 64
After xor: 73 6C 85 98  DC 92 48 7B
After CAM: 7D B7 BE FF  72 F3 26 74
28  1E 5B 1A 8A MIC tag  :
7D B7 BE FF  72 F3 26 74
9E 20 CTR Start: 01
0B 0A 09 08  A0 A1 A2 A3
01 CTR[0001]: 55 B9 87 69  4C
73 60 3E  C6 1E 8E B1
D2 11 62 36 CTR[0002]: 82 D9 A4 4B  DC C9
19 51 57 87 CTR[MIC ]
05 06 07  5D B0 8D 62  40 7E 6E 31 D6 0F 9C A2  C6 04 74 21  9A C0 BE 50  C0 D4 A5 77 87 94 D6 E2  30 CD 25 C9
FE BF 87   Packet Vector #10
[Input (12 cleartext header octets)] 00
0C 0D 0E 0F 10 11 12 13
1C 1D 1E CBC IV in: 61 00 00 00
A4 A5 00 13 CBC IV out:
90 E3 CE 94  27 11 04 B9
B1 89 73 A2  1E 6C E8 04
After CAM: A6 AD EA 9C  FA 3F 76 78  4C 17 8A F3  DC 69 F0 82
After xor: AA A0 E4 93
58 02 9C E4  C4 70 EA 99
After CAM: 35 50 B7 27  78 F8 C6 BF  02 4B 65
60  05 C0 E1 ED After xor: 29 4D A9 27
After CAM: 3D B5 A6 E6  85 AF 1C 58  80 B0 32 2E  01 74 91 FC MIC tag  : 3D B5 A6 E6  85 AF 1C 58
A0 A1 A2 A3  A4
: D7 1C 82 C1  D1 A9 64 0F  93
69 CE 81  22 7E CC E8 CTR[0002]:
4C D0 36 65  A5
31 0B AB CTR[MIC ]
DB 11 8C CE C1 B8 76 1C
BB BC 5C D0 92 99 EB 11  F3 12 F2 32  37   Packet Vector
[Input (12 cleartext header octets)] 00
0C 0D 0E 0F 10 11 12 13
1C 1D 1E 1F CBC IV in: 61 00 00 00
0A  A0 A1 A2 A3
CBC IV out:45 DF B5 07
15 15 AD  21 4F B0 0E After xor
: 45 D3 B5 06  6D B8 14 EF  F7
After CAM: 17 52 F9 6D  DD BC 5B 1C  1E EB 80 FC  F6 10 AC 03
After xor: 1B 5F F7 62  CD AD 49 0F
0A FE 96 EB  EE 09 B6 18
After CAM: BE F0 A0 B9  EC 94 B6 B3
After xor: A2 ED BE
A6  EC 94 B6 B3
After CAM: 70 16 E4 F9  C4 2C
BF EC 69  34 89 91 FD MIC tag  : 70 16 E4 F9  C4 2C
30 10  84 BF CTR Start:
0A  A0 A1 A2 A3
01 CTR[0001]: 70 C5 33 82  D4 80 11 41
D2 67 B3 B0 CTR[0002]:
9D 36 6E 49  39 C5 16 76  5C 1C
: 77 8B 4B 03
7C C8 3D 8D C4 91 03 52  5B 48 3D C5
CA 7E A9 AB  81 2B 70 56 07
DA 16 CC CF  2C 4E   Packet Vector #12
[Input (12 cleartext header octets)] 00
0C 0D 0E 0F 10 11 12 13
1C 1D 1E 1F 20 CBC IV in: 61 00 00 00
CBC IV out:81 E4 EB 1E  50 A9 70
After xor: 81 E8 EB 1F  52 AA 74 CB  1E CD
42  62 32 80 2E   [hdr]
After CAM: 04 AB D9 62
34 B9 8F 32  8C 0F
08 3F  3D 87 9D 57
After xor: 08 A6 D7 6D  24 A8 9D 21
After CAM: BD A2 EA CB
After xor: A1 BF F4 D4  1A DA 6A E7  9F BB C2 2C  E6 4C 98 89
D3 EA DC 91  E0 AB 10 AD
D8 55 E7 03 MIC tag  :
D3 EA DC 91  E0 AB CTR Start:
A0 A1 A2 A3  A4
01 CTR[0001]: 20 DE 55 87  30 C3 2C 69  B7 44 A6 FE
37 DE 89 7C CTR[0002]:
D8  68 6D C2 B5
22 97 42 27  EB F9 26 5E CTR[MIC ]
05 06 07  08 09 0A 0B
88 20 D2 3E 7A  A3 51 B0 E9  2F C7 93 67
23 8B 2C C7 48 CB B9 4C
07 8C A9 3D  97 1F 96 FD
E7 20 F4 CD Nonce
00 A9 70 11  0E 19 27 B1  60 B6 A3 1C
[Input (8 cleartext header octets)]
45  07 FA E4 96  C6 B5 F3 E6  CA
23 11 AE F7 47 2B 20  3E
73 5E A5  61 AD B1 7D  56 C5 A3 CBC IV in: 59 00 A9 70  11 0E
19 27  B1 60 B6 A3
17 CBC IV out:D7 24 B0 0F  B1 87 04 C6  C1 4E 90 37  AA F2 F1 F9
After xor: D7 2C DB 70  F7 C2 03
25 D8 90 37  AA F2 F1 F9
After CAM: 9B 13 6D E3  D9 9F C3 6D  7D 0D B7 D8  A1 BF E9 BD
After xor: 5D A6 9E 05
8A 4A 9C F8  9F CC B7 18
After CAM: F8 BF 25
23 F8 D9 B5  82 E6 C9 3E  C8 9B
75 3D 7A B5  82 E6 C9 3E  C8 9B
After CAM: D9 D6 62 21  6D B2 CA FD  1F C6 FE 9D  2C
AF 5B 69 MIC tag  : D9 D6 62 21
6D B2 CA FD CTR Start: 01
00 A9 70  11 0E 19 27
1C 1C 00 01 CTR[0001]
: 62 80 24 C1  FE AE CC 8C
38 55 98  CB 8E E5 E8 CTR[0002]
: F2 30 17 2F  1B 71 55 9F  8B CE 79 E5  13 01 FC 6A CTR[MIC ]
: 9C 8E A2 0C
[Encrypted] 6B 7F 46 45  07 FA E4 96
34 8D DD 22 90 7F 7E B8  F5 FD BB 4D  93 9D A6 52
4D B4 F6 45 58 C0 2D 25
B1 27 EE   Packet Vector
07 8C A9 3D  97 1F 96 FD
[Input (8 cleartext header octets)] 98 66 05 B4  3D F1 5D E7  01 F6 CE 67
64 C5 74 48 3B B0 2E 6B
26 A2 25 72  B4 D8 0E E7 CBC IV in:
59 00 83 CD  8C E0 CB 42  B1 60 B6 A3
18 CBC IV out:A0 8A 29 78  36 23 1D 84  96 76 93 FF  0A 4C
After xor: A0 82 B1 1E
33 97 20 75  CB
91 93 FF  0A 4C 92 7A
After CAM: 8C F5 F4 23  BF 09 1C 74
CC 68 3C  F6 F7 2E AA  8D
After CAM: 69 DA 48 24  41 1E AC 8E  A9 0A CD 8B  DD 00
After xor: 4F 78 6D
56  F5 C6 A2 69  A9 0A CD 8B
After CAM: C2 03 3B 08
2C C8 5D E7  76 A1 C0 44 MIC tag  : C2 03 3B 08
CTR Start: 01 00 83 CD  8C E0 CB 42  B1 60 B6 A3
1C 1C 00 01 CTR[0001]
: 8B 16 9C 37  EB 7B BE DB
5F C2 07 46 CTR[0002]
: E9 31 BB DD  4E E6 56 9B
68 95 13 5F  AB A4 DF EF CTR[MIC ]
[Encrypted] 98 66 05 B4
3D F1 5D E7  8A E0 52 50  8F
E0 DC 0D FB  CF 93 9E AF  FA 3E 58 7C 86 7D 6E 1C  48
70 38 06   Packet Vector #15
07 8C A9 3D  97 1F 96 FD
E7 20 F4 CD Nonce
18 F2 B1  60 B6 A3 1C
[Input (8 cleartext header octets)] 48 F2 E7 E1  A7 67 1A 51  CD F1 D8 40  6F C2 E9 01
49 53 89 70  05 FB FB 8B
24 04 60 8E 08 CBC IV in: 59 00 5F 54
95 0B 18 F2  B1 60 B6 A3
out:76 74 53 37  95 23 3C F0  EB 77 CE 93  73 06 99 A8
After xor: 76 7C 1B C5  72 C2 9B 97  F1 26 CE 93
73 06 99 A8   [hdr]
After CAM: EF 79 8B 70
34 E4 D5 6B  57 3A F9 44  F0 AF D6 9A
After xor: 22 88 53 30  5B
After CAM: 63 BF 4E 10
39  B2 B4 3B 8C
After xor: C6 CD 38 E9  25 7D 58 85
39  B2 B4 3B 8C
After CAM: 39 E1 0E
FA  BD 2F 43 00  50 9E E7 EB
A4 FF 6B 8F MIC tag  : 39 E1 0E FA  BD 2F
18 F2  B1 60 B6 A3
1C 1C 00 01 CTR[0001]
0E 6D C9 F5  9C 12 3B 08 CTR[0002]
: C8 18 86 42  3C DB 35 C8
64 4D 8C 4C  58 01 47
[Encrypted] 48 F2 E7 E1  A7 67 1A 51
08 B6 7E E2  1C 8B F2 6E 47 3E
99 E9 C0 83  6D 6A F0
55 46 6C A8 08 78  A7 90 47 6D
07 8C A9 3D  97 1F 96 FD
E7 20 F4 CD Nonce
63 31 9A B1  60 B6 A3 1C
[Input (12 cleartext header octets)]
50 30 DA 4C  B0 05 DC FA 0B 59
18 14  26 A9 61 68
43 18 5B CBC IV in: 59 00 EC 60  08 63 31 9A
CBC IV out:78 EE 05 5A  88 48 E3 5B  8A
45 46 8F  35 4F 0C A2
After xor: 78 E2 DB CD
57 73 6F E6  E7 CB 16 BF  EF 03
After CAM: A9 C6 7F 15
00 1A C6 92  81 67 BD EC
After xor: 19 C3 A3 EF
0B 43 DE 86  A7 CE DC 84
After CAM: 7C A8 9C 90  46 42 4B E2  4D 96 DF CF  BA 12 FD 18
After xor: 3F B0 C7 90
42 4B E2  4D 96 DF CF  BA 12 FD 18
After CAM: 89 C7 B4 E8
52 ED 34 50  E3 53 AD F5 MIC tag  : 89 C7 B4 E8  A4 24
8C 6C CTR Start: 01
00 EC 60  08 63 31 9A  B1 60 B6 A3
1C 1C 00 01 CTR[0001]
D3 B2 57 B3  6C E8 86 CF
AC 79  4E 6F 73 3E CTR[0002]: 65 10 C8 72  39 AF 0F 52  9F D0 A4 DF
54 BF D6 EB CTR[MIC ]
[Encrypted] DE 97 DF 3B
50 30 DA 4C  63 B7 8B 49 67 B1 9E DB
B7 33 CD 11  14 F6 4E B2  26 08 93 68
95 0C C5   Packet Vector #17
07 8C A9 3D  97 1F 96 FD
[Input (12 cleartext header octets)]
21 12 98 10 5F 12
93 F7 2D 30  B2 FA CC D7 CBC IV in: 59 00
60 CF  F1 A3 1E A1  B1 60 B6 A3
38 73 06  BD 34 E2 10  1F
66 17 E8 After xor
: C3 38 CC 93  82 DC 24 D9  B8 72 8C
43 6F 37 74  AB 94 3B 41  EA AD 00
CA  C3 99 13 7B After xor:
6D 4F 16 66  33 84 64 53  77 F3 D9 91
After CAM: 2D 28 FB 62  DA 06 97 A7  4C D4 31 B8
DA 06 97 A7  4C D4 31 B8  B5 AE
91 4D B1 B6  CC 37 F0 A2  4A 5A B7 A1 MIC tag  : F3 DE 10 CD
91 4D B1 B6 CTR Start: 01 00
60 CF  F1 A3 1E A1  B1 60 B6 A3
1C 1C 00 01 CTR[0001]
: 25 E6 9A F0  30 A9 56 E6  FF C0 3F 87
87 7A 89 74 CTR[0002]:
76 A2 1E DD  F2 AC 4B
42 95 3D D3 CTR[MIC ]
0B C6 BB E2 A8 B9 09 F4
62 9E E6 DC  14 8D A4 44  10 E1 8A F4 31 47 38 32
76 F6 6A 9F   Packet Vector #18
07 8C A9 3D  97 1F 96 FD  E7 20
[Input (12 cleartext header octets)] 24 AA 1B F9  A5 CD 87 61  82 A2 50 74  26 45 94 1E 75 63 2D 34  91 AF 0F C0  C9 87 6C 3B
E4 AA 74 68 C9 CBC IV in: 59 00 0F 85
CD 99 5C 97  B1 60 B6 A3
15 CBC IV out:72 0A 46 75  0F 40 59 53  F2 3B D2 1F
After CAM: 67 73 A0 FD  D5 7E D3 5E  E8 24 06 D0  A1 8B 0E 18
After xor: 41 36 34 E3  A0 1D FE 6A  79 8B 09 10
After CAM: BB 1E D8 9F
60 29 D0 99  09
14 06 A5  E3 8B 72 7B
After xor: 5F B4 AC F7  A9 29 D0 99  09 14 06 A5  E3 8B 72 7B
After CAM: 3E 4F 40 73
02 C8 99 BC  FD AC 19 4B
: 3E 4F 40 73  D1 31
E9 B8 CTR Start: 01 00 0F 85  CD 99 5C 97  B1 60 B6 A3
1C 1C 00 01 CTR[0001]
: 04 6F 42 2C  8F 52 FB 9B  06 A3 3B 9F  B7 F0 A6 00 CTR[0002]
: 34 76 51 DB  89 10 FB E6  73 E8 56
DB 66 47 5D CTR[MIC ]
AA 1B F9  A5 CD
22 2A D6 32 FA 31 D6
AF  97 0C 34 5F
D0 DC 25 B3 40 A1 A3 D3
1F 8D 4B 44  B7
07 8C A9 3D  97 1F 96 FD
[Input (8 cleartext header octets)] 69 19 46 B9  CA 07 BE 87
07 01 35 A6  43 7C 9D B1 20 CD
61 D8  F6 C3 9C 3E  A1 25 FD 95  A0 D2 3D CBC IV in: 61 00 C2 9B
2C AA C4 CD  B1 60 B6 A3
CBC IV out:74 AD F8 04
46 97 38 D5  BA A1 27 79
After xor: 74 A5 91 1D  43 93 82 E0  F8 10 38 D5  BA A1 27 79
After CAM: BD C3 B1 41
1C 64 C8 B3  A9 DC 6A 94
After xor: BA C2 84 E7  5F
18 55 02  89 11
7D 6C 8A BF  AD
68 48 D8  C5 FB CD 1E
After xor: DC 49 77 2A  0D BA 75 D8
C5 FB CD 1E  AF F2 44 99
After CAM: 19 99 AB 92  5E 30 46 96
3D EF FB 1B  4C 87 F7 76 MIC tag  : 19 99 AB 92  5E 30 46 96
01 00 C2 9B  2C AA C4 CD  B1 60 B6 A3
1C 1C 00 01 CTR[0001]
: 02 B9 D4 1F
87 E0 60 E7  EF DE 6B 7E  D3 DE 5E D2 CTR[0002]
: 61 49 31 C5  2F 34 AA 47  A3 E4 D3 2C  0B 36 41 C6 CTR[MIC ]
[Encrypted] 69 19 46 B9  CA 07 BE
87  05 B8 E1 B9  C4 9C FD 56 CF 13 0A A6  25 1D C2 EC  C0 6C CC 50  8F E6 97 A0 06 6D 57 C8  4B EC 18 27  68
07 8C A9 3D  97 1F 96 FD
E7 20 F4 CD Nonce
95 EE 62 B1  60 B6 A3 1C
[Input (8 cleartext header octets)] D0 C5 4E CB  84 62 7D C4  C8 C0 88 0E
6C 63 6E 20 09 3D D6 59  42 17 D2 E1  88 77 DB 26  4E 71 A5 CC CBC IV in: 61 00 2C 6B
75 95 EE 62  B1 60 B6 A3
18 CBC IV out:35 A9 48 70
F9 B0 C7 85  FB 32 1A D1
After xor: 35 A1 98 B5  B7 7B 43
E7  86 F6 1A D1
After CAM: 0A 3C E3 0F
AC 09 DC 5C  00
After xor: C2 FC 6B 01
C0 6A B2 7C  09 2D 8A 30
After CAM: 61 CD 80 D0  72 E6 84 E1
After xor: E9 BA 5B F6
E5 F9 F2 AB  47 FD 7B 8D
6F 72 F4 72  74 D7 69 BB MIC tag  :
E5 F9 F2 AB  47 FD 7B 8D
72 CTR Start: 01 00 2C 6B
75 95 EE 62  B1 60 B6 A3
1C 1C 00 01 CTR[0001]
: 9C 0E 31 66  B2 81 58 31  5E 63 16 5A  9D BD CE 35 CTR[0002]: 00 3E 66 D3  E0 5F 7E
A7  EF C8 9A 5F
[Encrypted] D0 C5 4E CB
84 62 7D C4  54 CE B9 68
DE E2 36 11 57 5E C0 03  DF AA 1C D4  88 49 BD F5  AE 2E DB 6B 7F A7 75 B1
C5 A9   Packet Vector #21
07 8C A9 3D  97 1F 96 FD
E7 20 F4 CD Nonce
00 C5 3C D4  C2 AA 24 B1  60 B6 A3 1C
[Input (8 cleartext header octets)] E2 85 E0 E4  80 8C DA 3D
10 C4 E6 42 97 79 4D C2  B7 D2 A2 07
57 B1 AA 4E  44 80 02 FF AB CBC IV in: 61 00 C5 3C  D4 C2 AA 24  B1 60 B6 A3
3C 23 B2  43 F5 1C 35  F7
79 5A CB  3B 20 21 2F
2A 34 C1 37  A3 11 9C B9  2D
44 5A CB  3B 20 21 2F
After CAM: A1 7E AD 4C  EE AB 51 21
1D 2A 32 F2  D4 45 A6 D6 After xor:
56 23 07 4B  FE 6F B7 63  8A 53 7F 30  63 97 04 D1   [msg] After CAM: A9 A1 32 55  8F C6 9B 98  A9 CC 23 96
After xor: FE 10 98 1B
CB 46 99 67  02
CC 23 96  FE CA 84 EB
After CAM: 6A 5E 04 42  D1 A5 7E 17
9A 6C 8B 56  F7 19 80 C5 MIC tag  :
6A 5E 04 42  D1 A5 7E 17
9A 6C CTR Start: 01 00 C5 3C  D4 C2 AA 24  B1 60 B6 A3
1C 1C 00 01 CTR[0001]
: 46 1D EF 41  AF A2 94 52  5D 51 AE
04 49 74 CD CTR[0002]: 29 2E 62 66  1B
72 6B 77  32 A8 DC 35 CTR[MIC ]:
B8 54 06 A2  6C
E4  80 8C DA 3D
B1 40 45 46  BF 66 72 10 CA 28
E3 09  B3 9B D6 CA  7E 9F C8 28  5F E6 98 D4 3C D2 0A 02  E0
ED  20 10 D3   Packet Vector #22
07 8C A9 3D  97 1F 96 FD  E7 20
00 BE E9 26  7F BA DC B1  60 B6 A3 1C
[Input (12 cleartext header octets)] 6C AE F9 94
11 41 57 0D  7C 81 34 05  C2 38
82 2F AC 5F 98 FF  92 94 05 B0  AD 12 7A 4E
41 85 4E CBC IV in: 61 00 BE E9  26 7F BA DC  B1 60 B6 A3
1C 1C 00 13 CBC IV out:20 60 6A D1  E1 A0 84 52  2F A3 8B
88 1D D6 8B After xor:
78 AE F7 75  BC 18 D6 8B
After CAM: 71 FD FF E7  D9 C8 95 75  D3
EC 0B 7E  7B 8B BE E7 After xor:
41 78 0E CE  D6 99 C4 A9
After CAM: CA AD 93 9C  59 BA 40 AA
After xor: 8B 28 DD 9C  59 BA 40 AA  1A 0B 88
After CAM: DC 48 8F
AA  9C 75 E7 03  17 56 C2 C7  48 48 8D
1B MIC tag  : DC 48 8F AA  9C 75 E7 03  17 56 CTR Start: 01 00 BE E9  26 7F BA DC  B1 60 B6 A3
1C 1C 00 01 CTR[0001]
: 56 F0 17 B3  BD
09 02 D6  EA A5 A2 91  AD 4A 2D E5 CTR[0002]
: 20 3D 34 21  EF 5B F8 FC  7B 21 5C 76  7B A5 21 A6 CTR[MIC ]
6C AE F9 94  11 41 57 0D  7C
34 05  94 C8 95 9C 11 56 9A 29
AB  61 B8 7A 2D EA 09
07 8C A9 3D  97 1F 96 FD
24 50 07 B1  60 B6 A3 1C
[Input (12 cleartext header octets)] 36 A5 2C F1  6B 19 A2 03
7A B7 01 1E  4D BF 3E 77 4A D2 45
E5  D5 89 1F 9D
02 2C 85 D7 CBC IV in: 61 00 DF A8  B1
24 50 07  B1 60 B6 A3
CBC IV out:78 FD B6 AF  61 9E 1C 8D
After CAM: 62 2E 28
92 43 DB 82  88 79 09 1E  A7 24
16 12  D8 91 9E 67  5D F0 16 83  BB 16 F4 C9   [msg] After CAM: 95 0E 52 08  FF 16 70 8C  1E D9 BB 06  3E 1E 41 CF
After xor: 97 22 D7 DF
1E D9 BB 06  3E 1E 41 CF
After CAM: BA CD 51 FC
47 D5 7D 54  7D 46
33 4B MIC tag  : BA CD 51 FC  77 F4 02 8D
47 D5 CTR Start: 01
24 50 07  B1 60 B6 A3
1C 1C 00 01 CTR[0001]
: 15 D6 DD DD
35 75 1A 64  B8 D8 D4 F9 CTR[0002]:
[Encrypted] 36 A5 2C F1  6B 19 A2 03
7A B7 01 1E  58 69 E3 AA D2 44 7C 74
E0 FC 05 F9  A4 EA 74 57
7F 4D E8 CA 89 24 76 42  96 AD 04 11
9C E7   Packet Vector #24
07 8C A9 3D  97 1F 96 FD
E7 20 F4 CD Nonce
00 3B 8F D8  D3 A9 37 B1  60 B6 A3 1C
[Input (12 cleartext header octets)]
9D C9 ED AE 2F F5 DF 86
36 E8 C6 DE  0E
33 7D CBC IV in: 61 00 3B 8F  D8 D3 A9 37  B1 60 B6 A3
15 CBC IV out:84 E6 CF DD  6A 37 68 5D  E6 71 AD 54  B3 BE FE B9
After xor: 84 EA 6B 09
F3 C0 EC 44  94 FD B4 43  38 B2 FE B9
After CAM: C5 0F A0 62  20 18 F1 21
0E BC 3D 2E  47 B7 B8 C3 After xor: 58 C6 4D CC  0F ED 2E A7
38 54 FB F0  49 5A ED 34
After CAM: C4 6F 6D C3
FC 2D DA  7F B7 C6 60
After xor: 42 11 5E F0  6A 3C 2A 7A
FC 2D DA  7F B7 C6 60
After CAM: DF AB 2E 76
F3 79 17 71 MIC tag  :
01 00 3B 8F  D8 D3 A9 37  B1 60 B6 A3
1C 1C 00 01 CTR[0001]
: D6 D0 6C F8
16 CE D0 F1  A0 E0 AC 71  BA B9 AD 34 CTR[0002]: 76 4A FF 9A
0A  EE 37 24 28 CTR[MIC ]
[Encrypted] A4 D4 99 F7  84 19 72 8C  19 17 8B 0C
81 56 39 3B 0F 77
08 6A AF  B4 54 F8 C3
F0 34 CC A9 66 94 5F 1F
Security Considerations Camellia CTR and Camellia CCM employ CTR mode for confidentiality.
For the security of CTR mode, refer to the Security Considerations of [16].
