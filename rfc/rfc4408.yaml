- title: __initial_text__
  contents:
  - "                   Sender Policy Framework (SPF) for\n            Authorizing\
    \ Use of Domains in E-Mail, Version 1\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The following documents  (RFC 4405, RFC 4406, RFC 4407, and RFC\
    \ 4408)\n   are published simultaneously as Experimental RFCs, although there\
    \ is\n   no general technical consensus and efforts to reconcile the two\n   approaches\
    \ have failed.  As such, these documents have not received\n   full IETF review\
    \ and are published \"AS-IS\" to document the different\n   approaches as they\
    \ were considered in the MARID working group.\n   The IESG takes no position about\
    \ which approach is to be preferred\n   and cautions the reader that there are\
    \ serious open issues for each\n   approach and concerns about using them in tandem.\
    \  The IESG believes\n   that documenting the different approaches does less harm\
    \ than not\n   documenting them.\n   Note that the Sender ID experiment may use\
    \ DNS records that may have\n   been created for the current SPF experiment or\
    \ earlier versions in\n   this set of experiments.  Depending on the content of\
    \ the record,\n   this may mean that Sender-ID heuristics would be applied incorrectly\n\
    \   to a message.  Depending on the actions associated by the recipient\n   with\
    \ those heuristics, the message may not be delivered or may be\n   discarded on\
    \ receipt.\n   Participants relying on Sender ID experiment DNS records are warned\n\
    \   that they may lose valid messages in this set of circumstances.\n   aParticipants\
    \ publishing SPF experiment DNS records should consider\n   the advice given in\
    \ section 3.4 of RFC 4406 and may wish to publish\n   both v=spf1 and spf2.0 records\
    \ to avoid the conflict.\n   Participants in the Sender-ID experiment need to\
    \ be aware that the\n   way Resent-* header fields are used will result in failure\
    \ to receive\n   legitimate email when interacting with standards-compliant systems\n\
    \   (specifically automatic forwarders which comply with the standards by\n  \
    \ not adding Resent-* headers, and systems which comply with RFC 822\n   but have\
    \ not yet implemented RFC 2822 Resent-* semantics).  It would\n   be inappropriate\
    \ to advance Sender-ID on the standards track without\n   resolving this interoperability\
    \ problem.\n   The community is invited to observe the success or failure of the\
    \ two\n   approaches during the two years following publication, in order that\n\
    \   a community consensus can be reached in the future.\n"
- title: Abstract
  contents:
  - "Abstract\n   E-mail on the Internet can be forged in a number of ways.  In\n\
    \   particular, existing protocols place no restriction on what a sending\n  \
    \ host can use as the reverse-path of a message or the domain given on\n   the\
    \ SMTP HELO/EHLO commands.  This document describes version 1 of\n   the Sender\
    \ Policy Framework (SPF) protocol, whereby a domain may\n   explicitly authorize\
    \ the hosts that are allowed to use its domain\n   name, and a receiving host\
    \ may check such authorization.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Protocol Status ............................................4\n  \
    \    1.2. Terminology ................................................5\n   2.\
    \ Operation .......................................................5\n      2.1.\
    \ The HELO Identity ..........................................5\n      2.2. The\
    \ MAIL FROM Identity .....................................5\n      2.3. Publishing\
    \ Authorization ...................................6\n      2.4. Checking Authorization\
    \ .....................................6\n      2.5. Interpreting the Result ....................................7\n\
    \           2.5.1. None ................................................8\n  \
    \         2.5.2. Neutral .............................................8\n    \
    \       2.5.3. Pass ................................................8\n      \
    \     2.5.4. Fail ................................................8\n        \
    \   2.5.5. SoftFail ............................................9\n          \
    \ 2.5.6. TempError ...........................................9\n           2.5.7.\
    \ PermError ...........................................9\n   3. SPF Records .....................................................9\n\
    \      3.1. Publishing ................................................10\n  \
    \         3.1.1. DNS Resource Record Types ..........................10\n    \
    \       3.1.2. Multiple DNS Records ...............................11\n      \
    \     3.1.3. Multiple Strings in a Single DNS record ............11\n        \
    \   3.1.4. Record Size ........................................11\n          \
    \ 3.1.5. Wildcard Records ...................................11\n   4. The check_host()\
    \ Function ......................................12\n      4.1. Arguments .................................................12\n\
    \      4.2. Results ...................................................13\n  \
    \    4.3. Initial Processing ........................................13\n    \
    \  4.4. Record Lookup .............................................13\n      4.5.\
    \ Selecting Records .........................................13\n      4.6. Record\
    \ Evaluation .........................................14\n           4.6.1. Term\
    \ Evaluation ....................................14\n           4.6.2. Mechanisms\
    \ .........................................15\n           4.6.3. Modifiers ..........................................15\n\
    \      4.7. Default Result ............................................16\n  \
    \    4.8. Domain Specification ......................................16\n   5.\
    \ Mechanism Definitions ..........................................16\n      5.1.\
    \ \"all\" .....................................................17\n      5.2.\
    \ \"include\" .................................................18\n      5.3.\
    \ \"a\" .......................................................19\n      5.4.\
    \ \"mx\" ......................................................20\n      5.5.\
    \ \"ptr\" .....................................................20\n      5.6.\
    \ \"ip4\" and \"ip6\" ...........................................21\n      5.7.\
    \ \"exists\" ..................................................22\n   6. Modifier\
    \ Definitions ...........................................22\n      6.1. redirect:\
    \ Redirected Query ................................23\n      6.2. exp: Explanation\
    \ ..........................................23\n   7. The Received-SPF Header\
    \ Field ..................................25\n   8. Macros .........................................................27\n\
    \      8.1. Macro Definitions .........................................27\n  \
    \    8.2. Expansion Examples ........................................30\n   9.\
    \ Implications ...................................................31\n      9.1.\
    \ Sending Domains ...........................................31\n      9.2. Mailing\
    \ Lists .............................................32\n      9.3. Forwarding\
    \ Services and Aliases ...........................32\n      9.4. Mail Services\
    \ .............................................34\n      9.5. MTA Relays ................................................34\n\
    \   10. Security Considerations .......................................35\n  \
    \    10.1. Processing Limits ........................................35\n    \
    \  10.2. SPF-Authorized E-Mail May Contain Other False\n            Identities\
    \ ...............................................37\n      10.3. Spoofed DNS and\
    \ IP Data ..................................37\n      10.4. Cross-User Forgery\
    \ .......................................37\n      10.5. Untrusted Information\
    \ Sources ............................38\n      10.6. Privacy Exposure .........................................38\n\
    \   11. Contributors and Acknowledgements .............................38\n  \
    \ 12. IANA Considerations ...........................................39\n    \
    \  12.1. The SPF DNS Record Type ..................................39\n      12.2.\
    \ The Received-SPF Mail Header Field .......................39\n   13. References\
    \ ....................................................39\n      13.1. Normative\
    \ References .....................................39\n      13.2. Informative\
    \ References ...................................40\n   Appendix A.  Collected\
    \ ABNF .......................................42\n   Appendix B.  Extended Examples\
    \ ....................................44\n      B.1.  Simple Examples ..........................................44\n\
    \      B.2.  Multiple Domain Example ..................................45\n  \
    \    B.3.  DNSBL Style Example ......................................46\n    \
    \  B.4.  Multiple Requirements Example ............................46\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The current E-Mail infrastructure has the property that\
    \ any host\n   injecting mail into the mail system can identify itself as any\
    \ domain\n   name it wants.  Hosts can do this at a variety of levels: in\n  \
    \ particular, the session, the envelope, and the mail headers.\n   Although this\
    \ feature is desirable in some circumstances, it is a\n   major obstacle to reducing\
    \ Unsolicited Bulk E-Mail (UBE, aka spam).\n   Furthermore, many domain name holders\
    \ are understandably concerned\n   about the ease with which other entities may\
    \ make use of their domain\n   names, often with malicious intent.\n   This document\
    \ defines a protocol by which domain owners may authorize\n   hosts to use their\
    \ domain name in the \"MAIL FROM\" or \"HELO\" identity.\n   Compliant domain\
    \ holders publish Sender Policy Framework (SPF)\n   records specifying which hosts\
    \ are permitted to use their names, and\n   compliant mail receivers use the published\
    \ SPF records to test the\n   authorization of sending Mail Transfer Agents (MTAs)\
    \ using a given\n   \"HELO\" or \"MAIL FROM\" identity during a mail transaction.\n\
    \   An additional benefit to mail receivers is that after the use of an\n   identity\
    \ is verified, local policy decisions about the mail can be\n   made based on\
    \ the sender's domain, rather than the host's IP address.\n   This is advantageous\
    \ because reputation of domain names is likely to\n   be more accurate than reputation\
    \ of host IP addresses.  Furthermore,\n   if a claimed identity fails verification,\
    \ local policy can take\n   stronger action against such E-Mail, such as rejecting\
    \ it.\n"
- title: 1.1.  Protocol Status
  contents:
  - "1.1.  Protocol Status\n   SPF has been in development since the summer of 2003\
    \ and has seen\n   deployment beyond the developers beginning in December 2003.\
    \  The\n   design of SPF slowly evolved until the spring of 2004 and has since\n\
    \   stabilized.  There have been quite a number of forms of SPF, some\n   written\
    \ up as documents, some submitted as Internet Drafts, and many\n   discussed and\
    \ debated in development forums.\n   The goal of this document is to clearly document\
    \ the protocol defined\n   by earlier draft specifications of SPF as used in existing\n\
    \   implementations.  This conception of SPF is sometimes called \"SPF\n   Classic\"\
    .  It is understood that particular implementations and\n   deployments may differ\
    \ from, and build upon, this work.  It is hoped\n   that we have nonetheless captured\
    \ the common understanding of SPF\n   version 1.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n   This document is concerned with the portion of a mail message\n\
    \   commonly called \"envelope sender\", \"return path\", \"reverse path\",\n\
    \   \"bounce address\", \"2821 FROM\", or \"MAIL FROM\".  Since these terms are\n\
    \   either not well defined or often used casually, this document defines\n  \
    \ the \"MAIL FROM\" identity in Section 2.2.  Note that other terms that\n   may\
    \ superficially look like the common terms, such as \"reverse-path\",\n   are\
    \ used only with the defined meanings from normative documents.\n"
- title: 2.  Operation
  contents:
  - '2.  Operation

    '
- title: 2.1.  The HELO Identity
  contents:
  - "2.1.  The HELO Identity\n   The \"HELO\" identity derives from either the SMTP\
    \ HELO or EHLO command\n   (see [RFC2821]).  These commands supply the SMTP client\
    \ (sending\n   host) for the SMTP session.  Note that requirements for the domain\n\
    \   presented in the EHLO or HELO command are not always clear to the\n   sending\
    \ party, and SPF clients must be prepared for the \"HELO\"\n   identity to be\
    \ malformed or an IP address literal.  At the time of\n   this writing, many legitimate\
    \ E-Mails are delivered with invalid HELO\n   domains.\n   It is RECOMMENDED that\
    \ SPF clients not only check the \"MAIL FROM\"\n   identity, but also separately\
    \ check the \"HELO\" identity by applying\n   the check_host() function (Section\
    \ 4) to the \"HELO\" identity as the\n   <sender>.\n"
- title: 2.2.  The MAIL FROM Identity
  contents:
  - "2.2.  The MAIL FROM Identity\n   The \"MAIL FROM\" identity derives from the\
    \ SMTP MAIL command (see\n   [RFC2821]).  This command supplies the \"reverse-path\"\
    \ for a message,\n   which generally consists of the sender mailbox, and is the\
    \ mailbox to\n   which notification messages are to be sent if there are problems\n\
    \   delivering the message.\n   [RFC2821] allows the reverse-path to be null (see\
    \ Section 4.5.5 in\n   RFC 2821).  In this case, there is no explicit sender mailbox,\
    \ and\n   such a message can be assumed to be a notification message from the\n\
    \   mail system itself.  When the reverse-path is null, this document\n   defines\
    \ the \"MAIL FROM\" identity to be the mailbox composed of the\n   localpart \"\
    postmaster\" and the \"HELO\" identity (which may or may not\n   have been checked\
    \ separately before).\n   SPF clients MUST check the \"MAIL FROM\" identity. \
    \ SPF clients check\n   the \"MAIL FROM\" identity by applying the check_host()\
    \ function to the\n   \"MAIL FROM\" identity as the <sender>.\n"
- title: 2.3.  Publishing Authorization
  contents:
  - "2.3.  Publishing Authorization\n   An SPF-compliant domain MUST publish a valid\
    \ SPF record as described\n   in Section 3.  This record authorizes the use of\
    \ the domain name in\n   the \"HELO\" and \"MAIL FROM\" identities by the MTAs\
    \ it specifies.\n   If domain owners choose to publish SPF records, it is RECOMMENDED\n\
    \   that they end in \"-all\", or redirect to other records that do, so\n   that\
    \ a definitive determination of authorization can be made.\n   Domain holders\
    \ may publish SPF records that explicitly authorize no\n   hosts if mail should\
    \ never originate using that domain.\n   When changing SPF records, care must\
    \ be taken to ensure that there is\n   a transition period so that the old policy\
    \ remains valid until all\n   legitimate E-Mail has been checked.\n"
- title: 2.4.  Checking Authorization
  contents:
  - "2.4.  Checking Authorization\n   A mail receiver can perform a set of SPF checks\
    \ for each mail message\n   it receives.  An SPF check tests the authorization\
    \ of a client host\n   to emit mail with a given identity.  Typically, such checks\
    \ are done\n   by a receiving MTA, but can be performed elsewhere in the mail\n\
    \   processing chain so long as the required information is available and\n  \
    \ reliable.  At least the \"MAIL FROM\" identity MUST be checked, but it\n   is\
    \ RECOMMENDED that the \"HELO\" identity also be checked beforehand.\n   Without\
    \ explicit approval of the domain owner, checking other\n   identities against\
    \ SPF version 1 records is NOT RECOMMENDED because\n   there are cases that are\
    \ known to give incorrect results.  For\n   example, almost all mailing lists\
    \ rewrite the \"MAIL FROM\" identity\n   (see Section 9.2), but some do not change\
    \ any other identities in the\n   message.  The scenario described in Section\
    \ 9.3, sub-section 1.2, is\n   another example.  Documents that define other identities\
    \ should\n   define the method for explicit approval.\n   It is possible that\
    \ mail receivers will use the SPF check as part of\n   a larger set of tests on\
    \ incoming mail.  The results of other tests\n   may influence whether or not\
    \ a particular SPF check is performed.\n   For example, finding the sending host's\
    \ IP address on a local white\n   list may cause all other tests to be skipped\
    \ and all mail from that\n   host to be accepted.\n   When a mail receiver decides\
    \ to perform an SPF check, it MUST use a\n   correctly-implemented check_host()\
    \ function (Section 4) evaluated\n   with the correct parameters.  Although the\
    \ test as a whole is\n   optional, once it has been decided to perform a test\
    \ it must be\n   performed as specified so that the correct semantics are preserved\n\
    \   between publisher and receiver.\n   To make the test, the mail receiver MUST\
    \ evaluate the check_host()\n   function with the arguments set as follows:\n\
    \   <ip>     - the IP address of the SMTP client that is emitting the\n      \
    \        mail, either IPv4 or IPv6.\n   <domain> - the domain portion of the \"\
    MAIL FROM\" or \"HELO\" identity.\n   <sender> - the \"MAIL FROM\" or \"HELO\"\
    \ identity.\n   Note that the <domain> argument may not be a well-formed domain\
    \ name.\n   For example, if the reverse-path was null, then the EHLO/HELO domain\n\
    \   is used, with its associated problems (see Section 2.1).  In these\n   cases,\
    \ check_host() is defined in Section 4.3 to return a \"None\"\n   result.\n  \
    \ Although invalid, malformed, or non-existent domains cause SPF checks\n   to\
    \ return \"None\" because no SPF record can be found, it has long been\n   the\
    \ policy of many MTAs to reject E-Mail from such domains,\n   especially in the\
    \ case of invalid \"MAIL FROM\".  In order to prevent\n   the circumvention of\
    \ SPF records, rejecting E-Mail from invalid\n   domains should be considered.\n\
    \   Implementations must take care to correctly extract the <domain> from\n  \
    \ the data given with the SMTP MAIL FROM command as many MTAs will\n   still accept\
    \ such things as source routes (see [RFC2821], Appendix\n   C), the %-hack (see\
    \ [RFC1123]), and bang paths (see [RFC1983]).\n   These archaic features have\
    \ been maliciously used to bypass security\n   systems.\n"
- title: 2.5.  Interpreting the Result
  contents:
  - "2.5.  Interpreting the Result\n   This section describes how software that performs\
    \ the authorization\n   should interpret the results of the check_host() function.\
    \  The\n   authorization check SHOULD be performed during the processing of the\n\
    \   SMTP transaction that sends the mail.  This allows errors to be\n   returned\
    \ directly to the sending MTA by way of SMTP replies.\n   Performing the authorization\
    \ after the SMTP transaction has finished\n   may cause problems, such as the\
    \ following: (1) It may be difficult to\n   accurately extract the required information\
    \ from potentially\n   deceptive headers; (2) legitimate E-Mail may fail because\
    \ the\n   sender's policy may have since changed.\n   Generating non-delivery\
    \ notifications to forged identities that have\n   failed the authorization check\
    \ is generally abusive and against the\n   explicit wishes of the identity owner.\n"
- title: 2.5.1.  None
  contents:
  - "2.5.1.  None\n   A result of \"None\" means that no records were published by\
    \ the domain\n   or that no checkable sender domain could be determined from the\
    \ given\n   identity.  The checking software cannot ascertain whether or not the\n\
    \   client host is authorized.\n"
- title: 2.5.2.  Neutral
  contents:
  - "2.5.2.  Neutral\n   The domain owner has explicitly stated that he cannot or\
    \ does not\n   want to assert whether or not the IP address is authorized.  A\n\
    \   \"Neutral\" result MUST be treated exactly like the \"None\" result; the\n\
    \   distinction exists only for informational purposes.  Treating\n   \"Neutral\"\
    \ more harshly than \"None\" would discourage domain owners\n   from testing the\
    \ use of SPF records (see Section 9.1).\n"
- title: 2.5.3.  Pass
  contents:
  - "2.5.3.  Pass\n   A \"Pass\" result means that the client is authorized to inject\
    \ mail\n   with the given identity.  The domain can now, in the sense of\n   reputation,\
    \ be considered responsible for sending the message.\n   Further policy checks\
    \ can now proceed with confidence in the\n   legitimate use of the identity.\n"
- title: 2.5.4.  Fail
  contents:
  - "2.5.4.  Fail\n   A \"Fail\" result is an explicit statement that the client is\
    \ not\n   authorized to use the domain in the given identity.  The checking\n\
    \   software can choose to mark the mail based on this or to reject the\n   mail\
    \ outright.\n   If the checking software chooses to reject the mail during the\
    \ SMTP\n   transaction, then it SHOULD use an SMTP reply code of 550 (see\n  \
    \ [RFC2821]) and, if supported, the 5.7.1 Delivery Status Notification\n   (DSN)\
    \ code (see [RFC3464]), in addition to an appropriate reply text.\n   The check_host()\
    \ function may return either a default explanation\n   string or one from the\
    \ domain that published the SPF records (see\n   Section 6.2).  If the information\
    \ does not originate with the\n   checking software, it should be made clear that\
    \ the text is provided\n   by the sender's domain.  For example:\n       550-5.7.1\
    \ SPF MAIL FROM check failed:\n       550-5.7.1 The domain example.com explains:\n\
    \       550 5.7.1 Please see http://www.example.com/mailpolicy.html\n"
- title: 2.5.5.  SoftFail
  contents:
  - "2.5.5.  SoftFail\n   A \"SoftFail\" result should be treated as somewhere between\
    \ a \"Fail\"\n   and a \"Neutral\".  The domain believes the host is not authorized\
    \ but\n   is not willing to make that strong of a statement.  Receiving\n   software\
    \ SHOULD NOT reject the message based solely on this result,\n   but MAY subject\
    \ the message to closer scrutiny than normal.\n   The domain owner wants to discourage\
    \ the use of this host and thus\n   desires limited feedback when a \"SoftFail\"\
    \ result occurs.  For\n   example, the recipient's Mail User Agent (MUA) could\
    \ highlight the\n   \"SoftFail\" status, or the receiving MTA could give the sender\
    \ a\n   message using a technique called \"greylisting\" whereby the MTA can\n\
    \   issue an SMTP reply code of 451 (4.3.0 DSN code) with a note the\n   first\
    \ time the message is received, but accept it the second time.\n"
- title: 2.5.6.  TempError
  contents:
  - "2.5.6.  TempError\n   A \"TempError\" result means that the SPF client encountered\
    \ a\n   transient error while performing the check.  Checking software can\n \
    \  choose to accept or temporarily reject the message.  If the message\n   is\
    \ rejected during the SMTP transaction for this reason, the software\n   SHOULD\
    \ use an SMTP reply code of 451 and, if supported, the 4.4.3 DSN\n   code.\n"
- title: 2.5.7.  PermError
  contents:
  - "2.5.7.  PermError\n   A \"PermError\" result means that the domain's published\
    \ records could\n   not be correctly interpreted.  This signals an error condition\
    \ that\n   requires manual intervention to be resolved, as opposed to the\n  \
    \ TempError result.  Be aware that if the domain owner uses macros\n   (Section\
    \ 8), it is possible that this result is due to the checked\n   identities having\
    \ an unexpected format.\n"
- title: 3.  SPF Records
  contents:
  - "3.  SPF Records\n   An SPF record is a DNS Resource Record (RR) that declares\
    \ which hosts\n   are, and are not, authorized to use a domain name for the \"\
    HELO\" and\n   \"MAIL FROM\" identities.  Loosely, the record partitions all hosts\n\
    \   into permitted and not-permitted sets (though some hosts might fall\n   into\
    \ neither category).\n   The SPF record is a single string of text.  An example\
    \ record is the\n   following:\n      v=spf1 +mx a:colo.example.com/28 -all\n\
    \   This record has a version of \"spf1\" and three directives: \"+mx\",\n   \"\
    a:colo.example.com/28\" (the + is implied), and \"-all\".\n"
- title: 3.1.  Publishing
  contents:
  - "3.1.  Publishing\n   Domain owners wishing to be SPF compliant must publish SPF\
    \ records\n   for the hosts that are used in the \"MAIL FROM\" and \"HELO\" identities.\n\
    \   The SPF records are placed in the DNS tree at the host name it\n   pertains\
    \ to, not a subdomain under it, such as is done with SRV\n   records.  This is\
    \ the same whether the TXT or SPF RR type (see\n   Section 3.1.1) is used.\n \
    \  The example above in Section 3 might be published via these lines in\n   a\
    \ domain zone file:\n      example.com.          TXT \"v=spf1 +mx a:colo.example.com/28\
    \ -all\"\n      smtp-out.example.com. TXT \"v=spf1 a -all\"\n   When publishing\
    \ via TXT records, beware of other TXT records\n   published there for other purposes.\
    \  They may cause problems with\n   size limits (see Section 3.1.4).\n"
- title: 3.1.1.  DNS Resource Record Types
  contents:
  - "3.1.1.  DNS Resource Record Types\n   This document defines a new DNS RR of type\
    \ SPF, code 99.  The format\n   of this type is identical to the TXT RR [RFC1035].\
    \  For either type,\n   the character content of the record is encoded as [US-ASCII].\n\
    \   It is recognized that the current practice (using a TXT record) is\n   not\
    \ optimal, but it is necessary because there are a number of DNS\n   server and\
    \ resolver implementations in common use that cannot handle\n   the new RR type.\
    \  The two-record-type scheme provides a forward path\n   to the better solution\
    \ of using an RR type reserved for this purpose.\n   An SPF-compliant domain name\
    \ SHOULD have SPF records of both RR\n   types.  A compliant domain name MUST\
    \ have a record of at least one\n   type.  If a domain has records of both types,\
    \ they MUST have\n   identical content.  For example, instead of publishing just\
    \ one\n   record as in Section 3.1 above, it is better to publish:\n      example.com.\
    \ IN TXT \"v=spf1 +mx a:colo.example.com/28 -all\"\n      example.com. IN SPF\
    \ \"v=spf1 +mx a:colo.example.com/28 -all\"\n   Example RRs in this document are\
    \ shown with the TXT record type;\n   however, they could be published with the\
    \ SPF type or with both\n   types.\n"
- title: 3.1.2.  Multiple DNS Records
  contents:
  - "3.1.2.  Multiple DNS Records\n   A domain name MUST NOT have multiple records\
    \ that would cause an\n   authorization check to select more than one record.\
    \  See Section 4.5\n   for the selection rules.\n"
- title: 3.1.3.  Multiple Strings in a Single DNS record
  contents:
  - "3.1.3.  Multiple Strings in a Single DNS record\n   As defined in [RFC1035] sections\
    \ 3.3.14 and 3.3, a single text DNS\n   record (either TXT or SPF RR types) can\
    \ be composed of more than one\n   string.  If a published record contains multiple\
    \ strings, then the\n   record MUST be treated as if those strings are concatenated\
    \ together\n   without adding spaces.  For example:\n      IN TXT \"v=spf1 ....\
    \ first\" \"second string...\"\n   MUST be treated as equivalent to\n      IN\
    \ TXT \"v=spf1 .... firstsecond string...\"\n   SPF or TXT records containing\
    \ multiple strings are useful in\n   constructing records that would exceed the\
    \ 255-byte maximum length of\n   a string within a single TXT or SPF RR record.\n"
- title: 3.1.4.  Record Size
  contents:
  - "3.1.4.  Record Size\n   The published SPF record for a given domain name SHOULD\
    \ remain small\n   enough that the results of a query for it will fit within 512\
    \ octets.\n   This will keep even older DNS implementations from falling over\
    \ to\n   TCP.  Since the answer size is dependent on many things outside the\n\
    \   scope of this document, it is only possible to give this guideline:\n   If\
    \ the combined length of the DNS name and the text of all the\n   records of a\
    \ given type (TXT or SPF) is under 450 characters, then\n   DNS answers should\
    \ fit in UDP packets.  Note that when computing the\n   sizes for queries of the\
    \ TXT format, one must take into account any\n   other TXT records published at\
    \ the domain name.  Records that are too\n   long to fit in a single UDP packet\
    \ MAY be silently ignored by SPF\n   clients.\n"
- title: 3.1.5.  Wildcard Records
  contents:
  - "3.1.5.  Wildcard Records\n   Use of wildcard records for publishing is not recommended.\
    \  Care must\n   be taken if wildcard records are used.  If a domain publishes\n\
    \   wildcard MX records, it may want to publish wildcard declarations,\n   subject\
    \ to the same requirements and problems.  In particular, the\n   declaration must\
    \ be repeated for any host that has any RR records at\n   all, and for subdomains\
    \ thereof.  For example, the example given in\n   [RFC1034], Section 4.3.3, could\
    \ be extended with the following:\n       X.COM.          MX      10      A.X.COM\n\
    \       X.COM.          TXT     \"v=spf1 a:A.X.COM -all\"\n       *.X.COM.   \
    \     MX      10      A.X.COM\n       *.X.COM.        TXT     \"v=spf1 a:A.X.COM\
    \ -all\"\n       A.X.COM.        A       1.2.3.4\n       A.X.COM.        MX  \
    \    10      A.X.COM\n       A.X.COM.        TXT     \"v=spf1 a:A.X.COM -all\"\
    \n       *.A.X.COM.      MX      10      A.X.COM\n       *.A.X.COM.      TXT \
    \    \"v=spf1 a:A.X.COM -all\"\n   Notice that SPF records must be repeated twice\
    \ for every name within\n   the domain: once for the name, and once with a wildcard\
    \ to cover the\n   tree under the name.\n   Use of wildcards is discouraged in\
    \ general as they cause every name\n   under the domain to exist and queries against\
    \ arbitrary names will\n   never return RCODE 3 (Name Error).\n"
- title: 4.  The check_host() Function
  contents:
  - "4.  The check_host() Function\n   The check_host() function fetches SPF records,\
    \ parses them, and\n   interprets them to determine whether a particular host\
    \ is or is not\n   permitted to send mail with a given identity.  Mail receivers\
    \ that\n   perform this check MUST correctly evaluate the check_host() function\n\
    \   as described here.\n   Implementations MAY use a different algorithm than\
    \ the canonical\n   algorithm defined here, so long as the results are the same\
    \ in all\n   cases.\n"
- title: 4.1.  Arguments
  contents:
  - "4.1.  Arguments\n   The check_host() function takes these arguments:\n   <ip>\
    \     - the IP address of the SMTP client that is emitting the\n             \
    \ mail, either IPv4 or IPv6.\n   <domain> - the domain that provides the sought-after\
    \ authorization\n              information; initially, the domain portion of the\
    \ \"MAIL\n              FROM\" or \"HELO\" identity.\n   <sender> - the \"MAIL\
    \ FROM\" or \"HELO\" identity.\n   The domain portion of <sender> will usually\
    \ be the same as the\n   <domain> argument when check_host() is initially evaluated.\
    \  However,\n   this will generally not be true for recursive evaluations (see\n\
    \   Section 5.2 below).\n   Actual implementations of the check_host() function\
    \ may need\n   additional arguments.\n"
- title: 4.2.  Results
  contents:
  - "4.2.  Results\n   The function check_host() can return one of several results\
    \ described\n   in Section 2.5.  Based on the result, the action to be taken is\n\
    \   determined by the local policies of the receiver.\n"
- title: 4.3.  Initial Processing
  contents:
  - "4.3.  Initial Processing\n   If the <domain> is malformed (label longer than\
    \ 63 characters, zero-\n   length label not at the end, etc.) or is not a fully\
    \ qualified domain\n   name, or if the DNS lookup returns \"domain does not exist\"\
    \ (RCODE 3),\n   check_host() immediately returns the result \"None\".\n   If\
    \ the <sender> has no localpart, substitute the string \"postmaster\"\n   for\
    \ the localpart.\n"
- title: 4.4.  Record Lookup
  contents:
  - "4.4.  Record Lookup\n   In accordance with how the records are published (see\
    \ Section 3.1\n   above), a DNS query needs to be made for the <domain> name,\
    \ querying\n   for either RR type TXT, SPF, or both.  If both SPF and TXT RRs\
    \ are\n   looked up, the queries MAY be done in parallel.\n   If all DNS lookups\
    \ that are made return a server failure (RCODE 2),\n   or other error (RCODE other\
    \ than 0 or 3), or time out, then\n   check_host() exits immediately with the\
    \ result \"TempError\".\n"
- title: 4.5.  Selecting Records
  contents:
  - "4.5.  Selecting Records\n   Records begin with a version section:\n   record\
    \           = version terms *SP\n   version          = \"v=spf1\"\n   Starting\
    \ with the set of records that were returned by the lookup,\n   record selection\
    \ proceeds in two steps:\n   1. Records that do not begin with a version section\
    \ of exactly\n      \"v=spf1\" are discarded.  Note that the version section is\n\
    \      terminated either by an SP character or the end of the record.  A\n   \
    \   record with a version section of \"v=spf10\" does not match and must\n   \
    \   be discarded.\n   2. If any records of type SPF are in the set, then all records\
    \ of\n      type TXT are discarded.\n   After the above steps, there should be\
    \ exactly one record remaining\n   and evaluation can proceed.  If there are two\
    \ or more records\n   remaining, then check_host() exits immediately with the\
    \ result of\n   \"PermError\".\n   If no matching records are returned, an SPF\
    \ client MUST assume that\n   the domain makes no SPF declarations.  SPF processing\
    \ MUST stop and\n   return \"None\".\n"
- title: 4.6.  Record Evaluation
  contents:
  - "4.6.  Record Evaluation\n   After one SPF record has been selected, the check_host()\
    \ function\n   parses and interprets it to find a result for the current test.\
    \  If\n   there are any syntax errors, check_host() returns immediately with\n\
    \   the result \"PermError\".\n   Implementations MAY choose to parse the entire\
    \ record first and\n   return \"PermError\" if the record is not syntactically\
    \ well formed.\n   However, in all cases, any syntax errors anywhere in the record\
    \ MUST\n   be detected.\n"
- title: 4.6.1.  Term Evaluation
  contents:
  - "4.6.1.  Term Evaluation\n   There are two types of terms: mechanisms and modifiers.\
    \  A record\n   contains an ordered list of these as specified in the following\n\
    \   Augmented Backus-Naur Form (ABNF).\n   terms            = *( 1*SP ( directive\
    \ / modifier ) )\n   directive        = [ qualifier ] mechanism\n   qualifier\
    \        = \"+\" / \"-\" / \"?\" / \"~\"\n   mechanism        = ( all / include\n\
    \                      / A / MX / PTR / IP4 / IP6 / exists )\n   modifier    \
    \     = redirect / explanation / unknown-modifier\n   unknown-modifier = name\
    \ \"=\" macro-string\n   name             = ALPHA *( ALPHA / DIGIT / \"-\" / \"\
    _\" / \".\" )\n   Most mechanisms allow a \":\" or \"/\" character after the name.\n\
    \   Modifiers always contain an equals ('=') character immediately after\n   the\
    \ name, and before any \":\" or \"/\" characters that may be part of\n   the macro-string.\n\
    \   Terms that do not contain any of \"=\", \":\", or \"/\" are mechanisms, as\n\
    \   defined in Section 5.\n   As per the definition of the ABNF notation in [RFC4234],\
    \ mechanism\n   and modifier names are case-insensitive.\n"
- title: 4.6.2.  Mechanisms
  contents:
  - "4.6.2.  Mechanisms\n   Each mechanism is considered in turn from left to right.\
    \  If there\n   are no more mechanisms, the result is specified in Section 4.7.\n\
    \   When a mechanism is evaluated, one of three things can happen: it can\n  \
    \ match, not match, or throw an exception.\n   If it matches, processing ends\
    \ and the qualifier value is returned as\n   the result of that record.  If it\
    \ does not match, processing\n   continues with the next mechanism.  If it throws\
    \ an exception,\n   mechanism processing ends and the exception value is returned.\n\
    \   The possible qualifiers, and the results they return are as follows:\n   \
    \   \"+\" Pass\n      \"-\" Fail\n      \"~\" SoftFail\n      \"?\" Neutral\n\
    \   The qualifier is optional and defaults to \"+\".\n   When a mechanism matches\
    \ and the qualifier is \"-\", then a \"Fail\"\n   result is returned and the explanation\
    \ string is computed as\n   described in Section 6.2.\n   The specific mechanisms\
    \ are described in Section 5.\n"
- title: 4.6.3.  Modifiers
  contents:
  - "4.6.3.  Modifiers\n   Modifiers are not mechanisms: they do not return match\
    \ or not-match.\n   Instead they provide additional information.  Although modifiers\
    \ do\n   not directly affect the evaluation of the record, the \"redirect\"\n\
    \   modifier has an effect after all the mechanisms have been evaluated.\n"
- title: 4.7.  Default Result
  contents:
  - "4.7.  Default Result\n   If none of the mechanisms match and there is no \"redirect\"\
    \ modifier,\n   then the check_host() returns a result of \"Neutral\", just as\
    \ if\n   \"?all\" were specified as the last directive.  If there is a\n   \"\
    redirect\" modifier, check_host() proceeds as defined in Section 6.1.\n   Note\
    \ that records SHOULD always use either a \"redirect\" modifier or\n   an \"all\"\
    \ mechanism to explicitly terminate processing.\n   For example:\n      v=spf1\
    \ +mx -all\n   or\n      v=spf1 +mx redirect=_spf.example.com\n"
- title: 4.8.  Domain Specification
  contents:
  - "4.8.  Domain Specification\n   Several of these mechanisms and modifiers have\
    \ a <domain-spec>\n   section.  The <domain-spec> string is macro expanded (see\
    \ Section 8).\n   The resulting string is the common presentation form of a fully-\n\
    \   qualified DNS name: a series of labels separated by periods.  This\n   domain\
    \ is called the <target-name> in the rest of this document.\n   Note: The result\
    \ of the macro expansion is not subject to any further\n   escaping.  Hence, this\
    \ facility cannot produce all characters that\n   are legal in a DNS label (e.g.,\
    \ the control characters).  However,\n   this facility is powerful enough to express\
    \ legal host names and\n   common utility labels (such as \"_spf\") that are used\
    \ in DNS.\n   For several mechanisms, the <domain-spec> is optional.  If it is\
    \ not\n   provided, the <domain> is used as the <target-name>.\n"
- title: 5.  Mechanism Definitions
  contents:
  - "5.  Mechanism Definitions\n   This section defines two types of mechanisms.\n\
    \   Basic mechanisms contribute to the language framework.  They do not\n   specify\
    \ a particular type of authorization scheme.\n      all\n      include\n   Designated\
    \ sender mechanisms are used to designate a set of <ip>\n   addresses as being\
    \ permitted or not permitted to use the <domain> for\n   sending mail.\n     \
    \ a\n      mx\n      ptr\n      ip4\n      ip6\n      exists\n   The following\
    \ conventions apply to all mechanisms that perform a\n   comparison between <ip>\
    \ and an IP address at any point:\n   If no CIDR-length is given in the directive,\
    \ then <ip> and the IP\n   address are compared for equality. (Here, CIDR is Classless\
    \ Inter-\n   Domain Routing.)\n   If a CIDR-length is specified, then only the\
    \ specified number of\n   high-order bits of <ip> and the IP address are compared\
    \ for equality.\n   When any mechanism fetches host addresses to compare with\
    \ <ip>, when\n   <ip> is an IPv4 address, A records are fetched, when <ip> is\
    \ an IPv6\n   address, AAAA records are fetched.  Even if the SMTP connection\
    \ is\n   via IPv6, an IPv4-mapped IPv6 IP address (see [RFC3513], Section\n  \
    \ 2.5.5) MUST still be considered an IPv4 address.\n   Several mechanisms rely\
    \ on information fetched from DNS.  For these\n   DNS queries, except where noted,\
    \ if the DNS server returns an error\n   (RCODE other than 0 or 3) or the query\
    \ times out, the mechanism\n   throws the exception \"TempError\".  If the server\
    \ returns \"domain does\n   not exist\" (RCODE 3), then evaluation of the mechanism\
    \ continues as\n   if the server returned no error (RCODE 0) and zero answer records.\n"
- title: 5.1.  "all"
  contents:
  - "5.1.  \"all\"\n   all              = \"all\"\n   The \"all\" mechanism is a test\
    \ that always matches.  It is used as the\n   rightmost mechanism in a record\
    \ to provide an explicit default.\n   For example:\n      v=spf1 a mx -all\n \
    \  Mechanisms after \"all\" will never be tested.  Any \"redirect\" modifier\n\
    \   (Section 6.1) has no effect when there is an \"all\" mechanism.\n"
- title: 5.2.  "include"
  contents:
  - "5.2.  \"include\"\n      include          = \"include\"  \":\" domain-spec\n\
    \   The \"include\" mechanism triggers a recursive evaluation of\n   check_host().\
    \  The domain-spec is expanded as per Section 8.  Then\n   check_host() is evaluated\
    \ with the resulting string as the <domain>.\n   The <ip> and <sender> arguments\
    \ remain the same as in the current\n   evaluation of check_host().\n   In hindsight,\
    \ the name \"include\" was poorly chosen.  Only the\n   evaluated result of the\
    \ referenced SPF record is used, rather than\n   acting as if the referenced SPF\
    \ record was literally included in the\n   first.  For example, evaluating a \"\
    -all\" directive in the referenced\n   record does not terminate the overall processing\
    \ and does not\n   necessarily result in an overall \"Fail\".  (Better names for\
    \ this\n   mechanism would have been \"if-pass\", \"on-pass\", etc.)\n   The \"\
    include\" mechanism makes it possible for one domain to designate\n   multiple\
    \ administratively-independent domains.  For example, a vanity\n   domain \"example.net\"\
    \ might send mail using the servers of\n   administratively-independent domains\
    \ example.com and example.org.\n   Example.net could say\n      IN TXT \"v=spf1\
    \ include:example.com include:example.org -all\"\n   This would direct check_host()\
    \ to, in effect, check the records of\n   example.com and example.org for a \"\
    Pass\" result.  Only if the host\n   were not permitted for either of those domains\
    \ would the result be\n   \"Fail\".\n   Whether this mechanism matches, does not\
    \ match, or throws an\n   exception depends on the result of the recursive evaluation\
    \ of\n   check_host():\n   +---------------------------------+---------------------------------+\n\
    \   | A recursive check_host() result | Causes the \"include\" mechanism  |\n\
    \   | of:                             | to:                             |\n  \
    \ +---------------------------------+---------------------------------+\n   |\
    \ Pass                            | match                           |\n   |  \
    \                               |                                 |\n   | Fail\
    \                            | not match                       |\n   |       \
    \                          |                                 |\n   | SoftFail\
    \                        | not match                       |\n   |           \
    \                      |                                 |\n   | Neutral     \
    \                    | not match                       |\n   |               \
    \                  |                                 |\n   | TempError       \
    \                | throw TempError                 |\n   |                   \
    \              |                                 |\n   | PermError           \
    \            | throw PermError                 |\n   |                       \
    \          |                                 |\n   | None                    \
    \        | throw PermError                 |\n   +---------------------------------+---------------------------------+\n\
    \   The \"include\" mechanism is intended for crossing administrative\n   boundaries.\
    \  Although it is possible to use includes to consolidate\n   multiple domains\
    \ that share the same set of designated hosts, domains\n   are encouraged to use\
    \ redirects where possible, and to minimize the\n   number of includes within\
    \ a single administrative domain.  For\n   example, if example.com and example.org\
    \ were managed by the same\n   entity, and if the permitted set of hosts for both\
    \ domains was\n   \"mx:example.com\", it would be possible for example.org to\
    \ specify\n   \"include:example.com\", but it would be preferable to specify\n\
    \   \"redirect=example.com\" or even \"mx:example.com\".\n"
- title: 5.3.  "a"
  contents:
  - "5.3.  \"a\"\n   This mechanism matches if <ip> is one of the <target-name>'s\
    \ IP\n   addresses.\n   A                = \"a\"      [ \":\" domain-spec ] [\
    \ dual-cidr-length ]\n   An address lookup is done on the <target-name>.  The\
    \ <ip> is compared\n   to the returned address(es).  If any address matches, the\
    \ mechanism\n   matches.\n"
- title: 5.4.  "mx"
  contents:
  - "5.4.  \"mx\"\n   This mechanism matches if <ip> is one of the MX hosts for a\
    \ domain\n   name.\n   MX               = \"mx\"     [ \":\" domain-spec ] [ dual-cidr-length\
    \ ]\n   check_host() first performs an MX lookup on the <target-name>.  Then\n\
    \   it performs an address lookup on each MX name returned.  The <ip> is\n   compared\
    \ to each returned IP address.  To prevent Denial of Service\n   (DoS) attacks,\
    \ more than 10 MX names MUST NOT be looked up during the\n   evaluation of an\
    \ \"mx\" mechanism (see Section 10).  If any address\n   matches, the mechanism\
    \ matches.\n   Note regarding implicit MXs: If the <target-name> has no MX records,\n\
    \   check_host() MUST NOT pretend the target is its single MX, and MUST\n   NOT\
    \ default to an A lookup on the <target-name> directly.  This\n   behavior breaks\
    \ with the legacy \"implicit MX\" rule.  See [RFC2821],\n   Section 5.  If such\
    \ behavior is desired, the publisher should specify\n   an \"a\" directive.\n"
- title: 5.5.  "ptr"
  contents:
  - "5.5.  \"ptr\"\n   This mechanism tests whether the DNS reverse-mapping for <ip>\
    \ exists\n   and correctly points to a domain name within a particular domain.\n\
    \   PTR              = \"ptr\"    [ \":\" domain-spec ]\n   First, the <ip>'s\
    \ name is looked up using this procedure: perform a\n   DNS reverse-mapping for\
    \ <ip>, looking up the corresponding PTR record\n   in \"in-addr.arpa.\" if the\
    \ address is an IPv4 one and in \"ip6.arpa.\"\n   if it is an IPv6 address.  For\
    \ each record returned, validate the\n   domain name by looking up its IP address.\
    \  To prevent DoS attacks,\n   more than 10 PTR names MUST NOT be looked up during\
    \ the evaluation of\n   a \"ptr\" mechanism (see Section 10).  If <ip> is among\
    \ the returned IP\n   addresses, then that domain name is validated.  In pseudocode:\n\
    \   sending-domain_names := ptr_lookup(sending-host_IP); if more than 10\n   sending-domain_names\
    \ are found, use at most 10.  for each name in\n   (sending-domain_names) {\n\
    \     IP_addresses := a_lookup(name);\n     if the sending-domain_IP is one of\
    \ the IP_addresses {\n       validated-sending-domain_names += name;\n     } }\n\
    \   Check all validated domain names to see if they end in the\n   <target-name>\
    \ domain.  If any do, this mechanism matches.  If no\n   validated domain name\
    \ can be found, or if none of the validated\n   domain names end in the <target-name>,\
    \ this mechanism fails to match.\n   If a DNS error occurs while doing the PTR\
    \ RR lookup, then this\n   mechanism fails to match.  If a DNS error occurs while\
    \ doing an A RR\n   lookup, then that domain name is skipped and the search continues.\n\
    \   Pseudocode:\n   for each name in (validated-sending-domain_names) {\n    \
    \ if name ends in <domain-spec>, return match.\n     if name is <domain-spec>,\
    \ return match.\n   }\n   return no-match.\n   This mechanism matches if the <target-name>\
    \ is either an ancestor of\n   a validated domain name or if the <target-name>\
    \ and a validated\n   domain name are the same.  For example: \"mail.example.com\"\
    \ is within\n   the domain \"example.com\", but \"mail.bad-example.com\" is not.\n\
    \   Note: Use of this mechanism is discouraged because it is slow, it is\n   not\
    \ as reliable as other mechanisms in cases of DNS errors, and it\n   places a\
    \ large burden on the arpa name servers.  If used, proper PTR\n   records must\
    \ be in place for the domain's hosts and the \"ptr\"\n   mechanism should be one\
    \ of the last mechanisms checked.\n"
- title: 5.6.  "ip4" and "ip6"
  contents:
  - "5.6.  \"ip4\" and \"ip6\"\n   These mechanisms test whether <ip> is contained\
    \ within a given IP\n   network.\n   IP4              = \"ip4\"      \":\" ip4-network\
    \   [ ip4-cidr-length ]\n   IP6              = \"ip6\"      \":\" ip6-network\
    \   [ ip6-cidr-length ]\n   ip4-cidr-length  = \"/\" 1*DIGIT\n   ip6-cidr-length\
    \  = \"/\" 1*DIGIT\n   dual-cidr-length = [ ip4-cidr-length ] [ \"/\" ip6-cidr-length\
    \ ]\n   ip4-network      = qnum \".\" qnum \".\" qnum \".\" qnum\n   qnum    \
    \         = DIGIT                 ; 0-9\n                      / %x31-39 DIGIT\
    \       ; 10-99\n                      / \"1\" 2DIGIT          ; 100-199\n   \
    \                   / \"2\" %x30-34 DIGIT   ; 200-249\n                      /\
    \ \"25\" %x30-35        ; 250-255\n            ; as per conventional dotted quad\
    \ notation.  e.g., 192.0.2.0\n   ip6-network      = <as per [RFC 3513], section\
    \ 2.2>\n            ; e.g., 2001:DB8::CD30\n   The <ip> is compared to the given\
    \ network.  If CIDR-length high-order\n   bits match, the mechanism matches.\n\
    \   If ip4-cidr-length is omitted, it is taken to be \"/32\".  If\n   ip6-cidr-length\
    \ is omitted, it is taken to be \"/128\".  It is not\n   permitted to omit parts\
    \ of the IP address instead of using CIDR\n   notations.  That is, use 192.0.2.0/24\
    \ instead of 192.0.2.\n"
- title: 5.7.  "exists"
  contents:
  - "5.7.  \"exists\"\n   This mechanism is used to construct an arbitrary domain\
    \ name that is\n   used for a DNS A record query.  It allows for complicated schemes\n\
    \   involving arbitrary parts of the mail envelope to determine what is\n   permitted.\n\
    \   exists           = \"exists\"   \":\" domain-spec\n   The domain-spec is expanded\
    \ as per Section 8.  The resulting domain\n   name is used for a DNS A RR lookup.\
    \  If any A record is returned,\n   this mechanism matches.  The lookup type is\
    \ A even when the\n   connection type is IPv6.\n   Domains can use this mechanism\
    \ to specify arbitrarily complex\n   queries.  For example, suppose example.com\
    \ publishes the record:\n      v=spf1 exists:%{ir}.%{l1r+-}._spf.%{d} -all\n \
    \  The <target-name> might expand to\n   \"1.2.0.192.someuser._spf.example.com\"\
    .  This makes fine-grained\n   decisions possible at the level of the user and\
    \ client IP address.\n   This mechanism enables queries that mimic the style of\
    \ tests that\n   existing anti-spam DNS blacklists (DNSBL) use.\n"
- title: 6.  Modifier Definitions
  contents:
  - "6.  Modifier Definitions\n   Modifiers are name/value pairs that provide additional\
    \ information.\n   Modifiers always have an \"=\" separating the name and the\
    \ value.\n   The modifiers defined in this document (\"redirect\" and \"exp\"\
    ) MAY\n   appear anywhere in the record, but SHOULD appear at the end, after\n\
    \   all mechanisms.  Ordering of these two modifiers does not matter.\n   These\
    \ two modifiers MUST NOT appear in a record more than once each.\n   If they do,\
    \ then check_host() exits with a result of \"PermError\".\n   Unrecognized modifiers\
    \ MUST be ignored no matter where in a record,\n   or how often.  This allows\
    \ implementations of this document to\n   gracefully handle records with modifiers\
    \ that are defined in other\n   specifications.\n"
- title: '6.1.  redirect: Redirected Query'
  contents:
  - "6.1.  redirect: Redirected Query\n   If all mechanisms fail to match, and a \"\
    redirect\" modifier is\n   present, then processing proceeds as follows:\n   redirect\
    \         = \"redirect\" \"=\" domain-spec\n   The domain-spec portion of the\
    \ redirect section is expanded as per\n   the macro rules in Section 8.  Then\
    \ check_host() is evaluated with\n   the resulting string as the <domain>.  The\
    \ <ip> and <sender>\n   arguments remain the same as current evaluation of check_host().\n\
    \   The result of this new evaluation of check_host() is then considered\n   the\
    \ result of the current evaluation with the exception that if no\n   SPF record\
    \ is found, or if the target-name is malformed, the result\n   is a \"PermError\"\
    \ rather than \"None\".\n   Note that the newly-queried domain may itself specify\
    \ redirect\n   processing.\n   This facility is intended for use by organizations\
    \ that wish to apply\n   the same record to multiple domains.  For example:\n\
    \     la.example.com. TXT \"v=spf1 redirect=_spf.example.com\"\n     ny.example.com.\
    \ TXT \"v=spf1 redirect=_spf.example.com\"\n     sf.example.com. TXT \"v=spf1\
    \ redirect=_spf.example.com\"\n   _spf.example.com. TXT \"v=spf1 mx:example.com\
    \ -all\"\n   In this example, mail from any of the three domains is described\
    \ by\n   the same record.  This can be an administrative advantage.\n   Note:\
    \ In general, the domain \"A\" cannot reliably use a redirect to\n   another domain\
    \ \"B\" not under the same administrative control.  Since\n   the <sender> stays\
    \ the same, there is no guarantee that the record at\n   domain \"B\" will correctly\
    \ work for mailboxes in domain \"A\",\n   especially if domain \"B\" uses mechanisms\
    \ involving localparts.  An\n   \"include\" directive may be more appropriate.\n\
    \   For clarity, it is RECOMMENDED that any \"redirect\" modifier appear as\n\
    \   the very last term in a record.\n"
- title: '6.2.  exp: Explanation'
  contents:
  - "6.2.  exp: Explanation\n   explanation      = \"exp\" \"=\" domain-spec\n   If\
    \ check_host() results in a \"Fail\" due to a mechanism match (such as\n   \"\
    -all\"), and the \"exp\" modifier is present, then the explanation\n   string\
    \ returned is computed as described below.  If no \"exp\" modifier\n   is present,\
    \ then either a default explanation string or an empty\n   explanation string\
    \ may be returned.\n   The <domain-spec> is macro expanded (see Section 8) and\
    \ becomes the\n   <target-name>.  The DNS TXT record for the <target-name> is\
    \ fetched.\n   If <domain-spec> is empty, or there are any DNS processing errors\n\
    \   (any RCODE other than 0), or if no records are returned, or if more\n   than\
    \ one record is returned, or if there are syntax errors in the\n   explanation\
    \ string, then proceed as if no exp modifier was given.\n   The fetched TXT record's\
    \ strings are concatenated with no spaces, and\n   then treated as an <explain-string>,\
    \ which is macro-expanded.  This\n   final result is the explanation string. \
    \ Implementations MAY limit\n   the length of the resulting explanation string\
    \ to allow for other\n   protocol constraints and/or reasonable processing limits.\
    \  Since the\n   explanation string is intended for an SMTP response and [RFC2821]\n\
    \   Section 2.4 says that responses are in [US-ASCII], the explanation\n   string\
    \ is also limited to US-ASCII.\n   Software evaluating check_host() can use this\
    \ string to communicate\n   information from the publishing domain in the form\
    \ of a short message\n   or URL.  Software SHOULD make it clear that the explanation\
    \ string\n   comes from a third party.  For example, it can prepend the macro\n\
    \   string \"%{o} explains: \" to the explanation, such as shown in Section\n\
    \   2.5.4.\n   Suppose example.com has this record:\n      v=spf1 mx -all exp=explain._spf.%{d}\n\
    \   Here are some examples of possible explanation TXT records at\n   explain._spf.example.com:\n\
    \      \"Mail from example.com should only be sent by its own servers.\"\n   \
    \      -- a simple, constant message\n      \"%{i} is not one of %{d}'s designated\
    \ mail servers.\"\n         -- a message with a little more information, including\
    \ the IP\n            address that failed the check\n      \"See http://%{d}/why.html?s=%{S}&i=%{I}\"\
    \n         -- a complicated example that constructs a URL with the\n         \
    \   arguments to check_host() so that a web page can be\n            generated\
    \ with detailed, custom instructions\n   Note: During recursion into an \"include\"\
    \ mechanism, an exp= modifier\n   from the <target-name> MUST NOT be used.  In\
    \ contrast, when executing\n   a \"redirect\" modifier, an exp= modifier from\
    \ the original domain MUST\n   NOT be used.\n"
- title: 7.  The Received-SPF Header Field
  contents:
  - "7.  The Received-SPF Header Field\n   It is RECOMMENDED that SMTP receivers record\
    \ the result of SPF\n   processing in the message header.  If an SMTP receiver\
    \ chooses to do\n   so, it SHOULD use the \"Received-SPF\" header field defined\
    \ here for\n   each identity that was checked.  This information is intended for\
    \ the\n   recipient.  (Information intended for the sender is described in\n \
    \  Section 6.2, Explanation.)\n   The Received-SPF header field is a trace field\
    \ (see [RFC2822] Section\n   3.6.7) and SHOULD be prepended to the existing header,\
    \ above the\n   Received: field that is generated by the SMTP receiver.  It MUST\n\
    \   appear above all other Received-SPF fields in the message.  The\n   header\
    \ field has the following format:\n   header-field     = \"Received-SPF:\" [CFWS]\
    \ result FWS [comment FWS]\n                      [ key-value-list ] CRLF\n  \
    \ result           = \"Pass\" / \"Fail\" / \"SoftFail\" / \"Neutral\" /\n    \
    \                  \"None\" / \"TempError\" / \"PermError\"\n   key-value-list\
    \   = key-value-pair *( \";\" [CFWS] key-value-pair )\n                      [\"\
    ;\"]\n   key-value-pair   = key [CFWS] \"=\" ( dot-atom / quoted-string )\n  \
    \ key              = \"client-ip\" / \"envelope-from\" / \"helo\" /\n        \
    \              \"problem\" / \"receiver\" / \"identity\" /\n                 \
    \      mechanism / \"x-\" name / name\n   identity         = \"mailfrom\"   ;\
    \ for the \"MAIL FROM\" identity\n                      / \"helo\"     ; for the\
    \ \"HELO\" identity\n                      / name       ; other identities\n \
    \  dot-atom         = <unquoted word as per [RFC2822]>\n   quoted-string    =\
    \ <quoted string as per [RFC2822]>\n   comment          = <comment string as per\
    \ [RFC2822]>\n   CFWS             = <comment or folding white space as per [RFC2822]>\n\
    \   FWS              = <folding white space as per [RFC2822]>\n   CRLF       \
    \      = <standard end-of-line token as per [RFC2822]>\n   The header field SHOULD\
    \ include a \"(...)\" style <comment> after the\n   result, conveying supporting\
    \ information for the result, such as\n   <ip>, <sender>, and <domain>.\n   The\
    \ following key-value pairs are designed for later machine parsing.\n   SPF clients\
    \ SHOULD give enough information so that the SPF results\n   can be verified.\
    \  That is, at least \"client-ip\", \"helo\", and, if the\n   \"MAIL FROM\" identity\
    \ was checked, \"envelope-from\".\n   client-ip      the IP address of the SMTP\
    \ client\n   envelope-from  the envelope sender mailbox\n   helo           the\
    \ host name given in the HELO or EHLO command\n   mechanism      the mechanism\
    \ that matched (if no mechanisms matched,\n                  substitute the word\
    \ \"default\")\n   problem        if an error was returned, details about the\
    \ error\n   receiver       the host name of the SPF client\n   identity      \
    \ the identity that was checked; see the <identity> ABNF\n                  rule\n\
    \   Other keys may be defined by SPF clients.  Until a new key name\n   becomes\
    \ widely accepted, new key names should start with \"x-\".\n   SPF clients MUST\
    \ make sure that the Received-SPF header field does\n   not contain invalid characters,\
    \ is not excessively long, and does not\n   contain malicious data that has been\
    \ provided by the sender.\n   Examples of various header styles that could be\
    \ generated are the\n   following:\n   Received-SPF: Pass (mybox.example.org:\
    \ domain of\n    myname@example.com designates 192.0.2.1 as permitted sender)\n\
    \       receiver=mybox.example.org; client-ip=192.0.2.1;\n       envelope-from=<myname@example.com>;\
    \ helo=foo.example.com;\n   Received-SPF: Fail (mybox.example.org: domain of\n\
    \                     myname@example.com does not designate\n                \
    \     192.0.2.1 as permitted sender)\n                     identity=mailfrom;\
    \ client-ip=192.0.2.1;\n                     envelope-from=<myname@example.com>;\n"
- title: 8.  Macros
  contents:
  - '8.  Macros

    '
- title: 8.1.  Macro Definitions
  contents:
  - "8.1.  Macro Definitions\n   Many mechanisms and modifiers perform macro expansion\
    \ on part of the\n   term.\n   domain-spec      = macro-string domain-end\n  \
    \ domain-end       = ( \".\" toplabel [ \".\" ] ) / macro-expand\n   toplabel\
    \         = ( *alphanum ALPHA *alphanum ) /\n                      ( 1*alphanum\
    \ \"-\" *( alphanum / \"-\" ) alphanum )\n                      ; LDH rule plus\
    \ additional TLD restrictions\n                      ; (see [RFC3696], Section\
    \ 2)\n   alphanum         = ALPHA / DIGIT\n   explain-string   = *( macro-string\
    \ / SP )\n   macro-string     = *( macro-expand / macro-literal )\n   macro-expand\
    \     = ( \"%{\" macro-letter transformers *delimiter \"}\" )\n              \
    \        / \"%%\" / \"%_\" / \"%-\"\n   macro-literal    = %x21-24 / %x26-7E\n\
    \                      ; visible characters except \"%\"\n   macro-letter    \
    \ = \"s\" / \"l\" / \"o\" / \"d\" / \"i\" / \"p\" / \"h\" /\n                \
    \      \"c\" / \"r\" / \"t\"\n   transformers     = *DIGIT [ \"r\" ]\n   delimiter\
    \        = \".\" / \"-\" / \"+\" / \",\" / \"/\" / \"_\" / \"=\"\n   A literal\
    \ \"%\" is expressed by \"%%\".\n      \"%_\" expands to a single \" \" space.\n\
    \      \"%-\" expands to a URL-encoded space, viz., \"%20\".\n   The following\
    \ macro letters are expanded in term arguments:\n      s = <sender>\n      l =\
    \ local-part of <sender>\n      o = domain of <sender>\n      d = <domain>\n \
    \     i = <ip>\n      p = the validated domain name of <ip>\n      v = the string\
    \ \"in-addr\" if <ip> is ipv4, or \"ip6\" if <ip> is ipv6\n      h = HELO/EHLO\
    \ domain\n   The following macro letters are allowed only in \"exp\" text:\n \
    \     c = SMTP client IP (easily readable format)\n      r = domain name of host\
    \ performing the check\n      t = current timestamp\n   A '%' character not followed\
    \ by a '{', '%', '-', or '_' character is\n   a syntax error.  So\n      -exists:%(ir).sbl.spamhaus.example.org\n\
    \   is incorrect and will cause check_host() to return a \"PermError\".\n   Instead,\
    \ say\n      -exists:%{ir}.sbl.spamhaus.example.org\n   Optional transformers\
    \ are the following:\n      *DIGIT = zero or more digits\n      'r'    = reverse\
    \ value, splitting on dots by default\n   If transformers or delimiters are provided,\
    \ the replacement value for\n   a macro letter is split into parts.  After performing\
    \ any reversal\n   operation and/or removal of left-hand parts, the parts are\
    \ rejoined\n   using \".\" and not the original splitting characters.\n   By default,\
    \ strings are split on \".\" (dots).  Note that no special\n   treatment is given\
    \ to leading, trailing, or consecutive delimiters,\n   and so the list of parts\
    \ may contain empty strings.  Older\n   implementations of SPF prohibit trailing\
    \ dots in domain names, so\n   trailing dots should not be published by domain\
    \ owners, although they\n   must be accepted by implementations conforming to\
    \ this document.\n   Macros may specify delimiter characters that are used instead\
    \ of \".\".\n   The 'r' transformer indicates a reversal operation: if the client\
    \ IP\n   address were 192.0.2.1, the macro %{i} would expand to \"192.0.2.1\"\n\
    \   and the macro %{ir} would expand to \"1.2.0.192\".\n   The DIGIT transformer\
    \ indicates the number of right-hand parts to\n   use, after optional reversal.\
    \  If a DIGIT is specified, the value\n   MUST be nonzero.  If no DIGITs are specified,\
    \ or if the value\n   specifies more parts than are available, all the available\
    \ parts are\n   used.  If the DIGIT was 5, and only 3 parts were available, the\
    \ macro\n   interpreter would pretend the DIGIT was 3.  Implementations MUST\n\
    \   support at least a value of 128, as that is the maximum number of\n   labels\
    \ in a domain name.\n   The \"s\" macro expands to the <sender> argument.  It\
    \ is an E-Mail\n   address with a localpart, an \"@\" character, and a domain.\
    \  The \"l\"\n   macro expands to just the localpart.  The \"o\" macro expands\
    \ to just\n   the domain part.  Note that these values remain the same during\n\
    \   recursive and chained evaluations due to \"include\" and/or \"redirect\".\n\
    \   Note also that if the original <sender> had no localpart, the\n   localpart\
    \ was set to \"postmaster\" in initial processing (see Section\n   4.3).\n   For\
    \ IPv4 addresses, both the \"i\" and \"c\" macros expand to the\n   standard dotted-quad\
    \ format.\n   For IPv6 addresses, the \"i\" macro expands to a dot-format address;\
    \ it\n   is intended for use in %{ir}.  The \"c\" macro may expand to any of the\n\
    \   hexadecimal colon-format addresses specified in [RFC3513], Section\n   2.2.\
    \  It is intended for humans to read.\n   The \"p\" macro expands to the validated\
    \ domain name of <ip>.  The\n   procedure for finding the validated domain name\
    \ is defined in Section\n   5.5.  If the <domain> is present in the list of validated\
    \ domains, it\n   SHOULD be used.  Otherwise, if a subdomain of the <domain> is\n\
    \   present, it SHOULD be used.  Otherwise, any name from the list may be\n  \
    \ used.  If there are no validated domain names or if a DNS error\n   occurs,\
    \ the string \"unknown\" is used.\n   The \"r\" macro expands to the name of the\
    \ receiving MTA.  This SHOULD\n   be a fully qualified domain name, but if one\
    \ does not exist (as when\n   the checking is done by a MUA) or if policy restrictions\
    \ dictate\n   otherwise, the word \"unknown\" SHOULD be substituted.  The domain\
    \ name\n   may be different from the name found in the MX record that the client\n\
    \   MTA used to locate the receiving MTA.\n   The \"t\" macro expands to the decimal\
    \ representation of the\n   approximate number of seconds since the Epoch (Midnight,\
    \ January 1,\n   1970, UTC).  This is the same value as is returned by the POSIX\n\
    \   time() function in most standards-compliant libraries.\n   When the result\
    \ of macro expansion is used in a domain name query, if\n   the expanded domain\
    \ name exceeds 253 characters (the maximum length\n   of a domain name), the left\
    \ side is truncated to fit, by removing\n   successive domain labels until the\
    \ total length does not exceed 253\n   characters.\n   Uppercased macros expand\
    \ exactly as their lowercased equivalents, and\n   are then URL escaped.  URL\
    \ escaping must be performed for characters\n   not in the \"uric\" set, which\
    \ is defined in [RFC3986].\n   Note: Care must be taken so that macro expansion\
    \ for legitimate\n   E-Mail does not exceed the 63-character limit on DNS labels.\
    \  The\n   localpart of E-Mail addresses, in particular, can have more than 63\n\
    \   characters between dots.\n   Note: Domains should avoid using the \"s\", \"\
    l\", \"o\", or \"h\" macros in\n   conjunction with any mechanism directive. \
    \ Although these macros are\n   powerful and allow per-user records to be published,\
    \ they severely\n   limit the ability of implementations to cache results of check_host()\n\
    \   and they reduce the effectiveness of DNS caches.\n   Implementations should\
    \ be aware that if no directive processed during\n   the evaluation of check_host()\
    \ contains an \"s\", \"l\", \"o\", or \"h\"\n   macro, then the results of the\
    \ evaluation can be cached on the basis\n   of <domain> and <ip> alone for as\
    \ long as the shortest Time To Live\n   (TTL) of all the DNS records involved.\n"
- title: 8.2.  Expansion Examples
  contents:
  - "8.2.  Expansion Examples\n      The <sender> is strong-bad@email.example.com.\n\
    \      The IPv4 SMTP client IP is 192.0.2.3.\n      The IPv6 SMTP client IP is\
    \ 2001:DB8::CB01.\n      The PTR domain name of the client IP is mx.example.org.\n\
    \   macro                       expansion\n   -------  ----------------------------\n\
    \   %{s}     strong-bad@email.example.com\n   %{o}                email.example.com\n\
    \   %{d}                email.example.com\n   %{d4}               email.example.com\n\
    \   %{d3}               email.example.com\n   %{d2}                     example.com\n\
    \   %{d1}                             com\n   %{dr}               com.example.email\n\
    \   %{d2r}                  example.email\n   %{l}                       strong-bad\n\
    \   %{l-}                      strong.bad\n   %{lr}                      strong-bad\n\
    \   %{lr-}                     bad.strong\n   %{l1r-}                        strong\n\
    \   macro-string                                               expansion\n   --------------------------------------------------------------------\n\
    \   %{ir}.%{v}._spf.%{d2}             3.2.0.192.in-addr._spf.example.com\n   %{lr-}.lp._spf.%{d2}\
    \                  bad.strong.lp._spf.example.com\n   %{lr-}.lp.%{ir}.%{v}._spf.%{d2}\n\
    \                       bad.strong.lp.3.2.0.192.in-addr._spf.example.com\n   %{ir}.%{v}.%{l1r-}.lp._spf.%{d2}\n\
    \                           3.2.0.192.in-addr.strong.lp._spf.example.com\n   %{d2}.trusted-domains.example.net\n\
    \                                example.com.trusted-domains.example.net\n   IPv6:\n\
    \   %{ir}.%{v}._spf.%{d2}                               1.0.B.C.0.0.0.0.\n   0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.B.D.0.1.0.0.2.ip6._spf.example.com\n"
- title: 9.  Implications
  contents:
  - "9.  Implications\n   This section outlines the major implications that adoption\
    \ of this\n   document will have on various entities involved in Internet E-Mail.\n\
    \   It is intended to make clear to the reader where this document\n   knowingly\
    \ affects the operation of such entities.  This section is\n   not a \"how-to\"\
    \ manual, or a \"best practices\" document, and it is not\n   a comprehensive\
    \ list of what such entities should do in light of this\n   document.\n   This\
    \ section is non-normative.\n"
- title: 9.1.  Sending Domains
  contents:
  - "9.1.  Sending Domains\n   Domains that wish to be compliant with this specification\
    \ will need\n   to determine the list of hosts that they allow to use their domain\n\
    \   name in the \"HELO\" and \"MAIL FROM\" identities.  It is recognized that\n\
    \   forming such a list is not just a simple technical exercise, but\n   involves\
    \ policy decisions with both technical and administrative\n   considerations.\n\
    \   It can be helpful to publish records that include a \"tracking\n   exists:\"\
    \ mechanism.  By looking at the name server logs, a rough list\n   may then be\
    \ generated.  For example:\n      v=spf1 exists:_h.%{h}._l.%{l}._o.%{o}._i.%{i}._spf.%{d}\
    \ ?all\n"
- title: 9.2.  Mailing Lists
  contents:
  - "9.2.  Mailing Lists\n   Mailing lists must be aware of how they re-inject mail\
    \ that is sent\n   to the list.  Mailing lists MUST comply with the requirements\
    \ in\n   [RFC2821], Section 3.10, and [RFC1123], Section 5.3.6, that say that\n\
    \   the reverse-path MUST be changed to be the mailbox of a person or\n   other\
    \ entity who administers the list.  Whereas the reasons for\n   changing the reverse-path\
    \ are many and long-standing, SPF adds\n   enforcement to this requirement.\n\
    \   In practice, almost all mailing list software in use already complies\n  \
    \ with this requirement.  Mailing lists that do not comply may or may\n   not\
    \ encounter problems depending on how access to the list is\n   restricted.  Such\
    \ lists that are entirely internal to a domain (only\n   people in the domain\
    \ can send to or receive from the list) are not\n   affected.\n"
- title: 9.3.  Forwarding Services and Aliases
  contents:
  - "9.3.  Forwarding Services and Aliases\n   Forwarding services take mail that\
    \ is received at a mailbox and\n   direct it to some external mailbox.  At the\
    \ time of this writing, the\n   near-universal practice of such services is to\
    \ use the original \"MAIL\n   FROM\" of a message when re-injecting it for delivery\
    \ to the external\n   mailbox.  [RFC1123] and [RFC2821] describe this action as\
    \ an \"alias\"\n   rather than a \"mail list\".  This means that the external\
    \ mailbox's\n   MTA sees all such mail in a connection from a host of the forwarding\n\
    \   service, and so the \"MAIL FROM\" identity will not, in general, pass\n  \
    \ authorization.\n   There are three places that techniques can be used to ameliorate\
    \ this\n   problem.\n   1. The beginning, when E-Mail is first sent.\n       1.\
    \ \"Neutral\" results could be given for IP addresses that may be\n          forwarders,\
    \ instead of \"Fail\" results.  For example:\n             \"v=spf1 mx -exists:%{ir}.sbl.spamhaus.example.org\
    \ ?all\"\n          This would cause a lookup on an anti-spam DNS blacklist\n\
    \          (DNSBL) and cause a result of \"Fail\" only for E-Mail coming\n   \
    \       from listed sources.  All other E-Mail, including E-Mail sent\n      \
    \    through forwarders, would receive a \"Neutral\" result.  By\n          checking\
    \ the DNSBL after the known good sources, problems with\n          incorrect listing\
    \ on the DNSBL are greatly reduced.\n       2. The \"MAIL FROM\" identity could\
    \ have additional information in\n          the localpart that cryptographically\
    \ identifies the mail as\n          coming from an authorized source.  In this\
    \ case, such an SPF\n          record could be used:\n             \"v=spf1 mx\
    \ exists:%{l}._spf_verify.%{d} -all\"\n          Then, a specialized DNS server\
    \ can be set up to serve the\n          _spf_verify subdomain that validates the\
    \ localpart.  Although\n          this requires an extra DNS lookup, this happens\
    \ only when the\n          E-Mail would otherwise be rejected as not coming from\
    \ a known\n          good source.\n          Note that due to the 63-character\
    \ limit for domain labels,\n          this approach only works reliably if the\
    \ localpart signature\n          scheme is guaranteed either to only produce localparts\
    \ with a\n          maximum of 63 characters or to gracefully handle truncated\n\
    \          localparts.\n       3. Similarly, a specialized DNS server could be\
    \ set up that will\n          rate-limit the E-Mail coming from unexpected IP\
    \ addresses.\n             \"v=spf1 mx exists:%{ir}._spf_rate.%{d} -all\"\n  \
    \     4. SPF allows the creation of per-user policies for special\n          cases.\
    \  For example, the following SPF record and appropriate\n          wildcard DNS\
    \ records can be used:\n                 \"v=spf1 mx redirect=%{l1r+}._at_.%{o}._spf.%{d}\"\
    \n   2.  The middle, when E-Mail is forwarded.\n       1. Forwarding services\
    \ can solve the problem by rewriting the\n          \"MAIL FROM\" to be in their\
    \ own domain.  This means that mail\n          bounced from the external mailbox\
    \ will have to be re-bounced\n          by the forwarding service.  Various schemes\
    \ to do this exist\n          though they vary widely in complexity and resource\n\
    \          requirements on the part of the forwarding service.\n       2. Several\
    \ popular MTAs can be forced from \"alias\" semantics to\n          \"mailing\
    \ list\" semantics by configuring an additional alias\n          with \"owner-\"\
    \ prepended to the original alias name (e.g., an\n          alias of \"friends:\
    \ george@example.com, fred@example.org\" would\n          need another alias of\
    \ the form \"owner-friends:  localowner\").\n   3. The end, when E-Mail is received.\n\
    \       1. If the owner of the external mailbox wishes to trust the\n        \
    \  forwarding service, he can direct the external mailbox's MTA\n          to\
    \ skip SPF tests when the client host belongs to the\n          forwarding service.\n\
    \       2. Tests against other identities, such as the \"HELO\" identity,\n  \
    \        may be used to override a failed test against the \"MAIL FROM\"\n   \
    \       identity.\n       3. For larger domains, it may not be possible to have\
    \ a complete\n          or accurate list of forwarding services used by the owners\
    \ of\n          the domain's mailboxes.  In such cases, whitelists of\n      \
    \    generally-recognized forwarding services could be employed.\n"
- title: 9.4.  Mail Services
  contents:
  - "9.4.  Mail Services\n   Service providers that offer mail services to third-party\
    \ domains,\n   such as sending of bulk mail, may want to adjust their setup in\
    \ light\n   of the authorization check described in this document.  If the \"\
    MAIL\n   FROM\" identity used for such E-Mail uses the domain of the service\n\
    \   provider, then the provider needs only to ensure that its sending\n   host\
    \ is authorized by its own SPF record, if any.\n   If the \"MAIL FROM\" identity\
    \ does not use the mail service provider's\n   domain, then extra care must be\
    \ taken.  The SPF record format has\n   several options for the third-party domain\
    \ to authorize the service\n   provider's MTAs to send mail on its behalf.  For\
    \ mail service\n   providers, such as ISPs, that have a wide variety of customers\
    \ using\n   the same MTA, steps should be taken to prevent cross-customer forgery\n\
    \   (see Section 10.4).\n"
- title: 9.5.  MTA Relays
  contents:
  - "9.5.  MTA Relays\n   The authorization check generally precludes the use of arbitrary\
    \ MTA\n   relays between sender and receiver of an E-Mail message.\n   Within\
    \ an organization, MTA relays can be effectively deployed.\n   However, for purposes\
    \ of this document, such relays are effectively\n   transparent.  The SPF authorization\
    \ check is a check between border\n   MTAs of different domains.\n   For mail\
    \ senders, this means that published SPF records must\n   authorize any MTAs that\
    \ actually send across the Internet.  Usually,\n   these are just the border MTAs\
    \ as internal MTAs simply forward mail\n   to these MTAs for delivery.\n   Mail\
    \ receivers will generally want to perform the authorization check\n   at the\
    \ border MTAs, specifically including all secondary MXs.  This\n   allows mail\
    \ that fails to be rejected during the SMTP session rather\n   than bounced. \
    \ Internal MTAs then do not perform the authorization\n   test.  To perform the\
    \ authorization test other than at the border,\n   the host that first transferred\
    \ the message to the organization must\n   be determined, which can be difficult\
    \ to extract from the message\n   header.  Testing other than at the border is\
    \ not recommended.\n"
- title: 10.  Security Considerations
  contents:
  - '10.  Security Considerations

    '
- title: 10.1.  Processing Limits
  contents:
  - "10.1.  Processing Limits\n   As with most aspects of E-Mail, there are a number\
    \ of ways that\n   malicious parties could use the protocol as an avenue for a\n\
    \   Denial-of-Service (DoS) attack.  The processing limits outlined here\n   are\
    \ designed to prevent attacks such as the following:\n   o  A malicious party\
    \ could create an SPF record with many references\n      to a victim's domain\
    \ and send many E-Mails to different SPF\n      clients; those SPF clients would\
    \ then create a DoS attack.  In\n      effect, the SPF clients are being used\
    \ to amplify the attacker's\n      bandwidth by using fewer bytes in the SMTP\
    \ session than are used\n      by the DNS queries.  Using SPF clients also allows\
    \ the attacker to\n      hide the true source of the attack.\n   o  Whereas implementations\
    \ of check_host() are supposed to limit the\n      number of DNS lookups, malicious\
    \ domains could publish records\n      that exceed these limits in an attempt\
    \ to waste computation effort\n      at their targets when they send them mail.\
    \  Malicious domains\n      could also design SPF records that cause particular\n\
    \      implementations to use excessive memory or CPU usage, or to\n      trigger\
    \ bugs.\n   o  Malicious parties could send a large volume of mail purporting\
    \ to\n      come from the intended target to a wide variety of legitimate mail\n\
    \      hosts.  These legitimate machines would then present a DNS load on\n  \
    \    the target as they fetched the relevant records.\n   Of these, the case of\
    \ a third party referenced in the SPF record is\n   the easiest for a DoS attack\
    \ to effectively exploit.  As a result,\n   limits that may seem reasonable for\
    \ an individual mail server can\n   still allow an unreasonable amount of bandwidth\
    \ amplification.\n   Therefore, the processing limits need to be quite low.\n\
    \   SPF implementations MUST limit the number of mechanisms and modifiers\n  \
    \ that do DNS lookups to at most 10 per SPF check, including any\n   lookups caused\
    \ by the use of the \"include\" mechanism or the\n   \"redirect\" modifier.  If\
    \ this number is exceeded during a check, a\n   PermError MUST be returned.  The\
    \ \"include\", \"a\", \"mx\", \"ptr\", and\n   \"exists\" mechanisms as well as\
    \ the \"redirect\" modifier do count\n   against this limit.  The \"all\", \"\
    ip4\", and \"ip6\" mechanisms do not\n   require DNS lookups and therefore do\
    \ not count against this limit.\n   The \"exp\" modifier does not count against\
    \ this limit because the DNS\n   lookup to fetch the explanation string occurs\
    \ after the SPF record\n   has been evaluated.\n   When evaluating the \"mx\"\
    \ and \"ptr\" mechanisms, or the %{p} macro,\n   there MUST be a limit of no more\
    \ than 10 MX or PTR RRs looked up and\n   checked.\n   SPF implementations SHOULD\
    \ limit the total amount of data obtained\n   from the DNS queries.  For example,\
    \ when DNS over TCP or EDNS0 are\n   available, there may need to be an explicit\
    \ limit to how much data\n   will be accepted to prevent excessive bandwidth usage\
    \ or memory usage\n   and DoS attacks.\n   MTAs or other processors MAY also impose\
    \ a limit on the maximum\n   amount of elapsed time to evaluate check_host().\
    \  Such a limit SHOULD\n   allow at least 20 seconds.  If such a limit is exceeded,\
    \ the result\n   of authorization SHOULD be \"TempError\".\n   Domains publishing\
    \ records SHOULD try to keep the number of \"include\"\n   mechanisms and chained\
    \ \"redirect\" modifiers to a minimum.  Domains\n   SHOULD also try to minimize\
    \ the amount of other DNS information\n   needed to evaluate a record.  This can\
    \ be done by choosing directives\n   that require less DNS information and placing\
    \ lower-cost mechanisms\n   earlier in the SPF record.\n   For example, consider\
    \ a domain set up as follows:\n   example.com.      IN MX   10 mx.example.com.\n\
    \   mx.example.com.   IN A    192.0.2.1\n   a.example.com.    IN TXT  \"v=spf1\
    \ mx:example.com -all\"\n   b.example.com.    IN TXT  \"v=spf1 a:mx.example.com\
    \ -all\"\n   c.example.com.    IN TXT  \"v=spf1 ip4:192.0.2.1 -all\"\n   Evaluating\
    \ check_host() for the domain \"a.example.com\" requires the\n   MX records for\
    \ \"example.com\", and then the A records for the listed\n   hosts.  Evaluating\
    \ for \"b.example.com\" requires only the A records.\n   Evaluating for \"c.example.com\"\
    \ requires none.\n   However, there may be administrative considerations: using\
    \ \"a\" over\n   \"ip4\" allows hosts to be renumbered easily.  Using \"mx\" over\
    \ \"a\"\n   allows the set of mail hosts to be changed easily.\n"
- title: 10.2.  SPF-Authorized E-Mail May Contain Other False Identities
  contents:
  - "10.2.  SPF-Authorized E-Mail May Contain Other False Identities\n   The \"MAIL\
    \ FROM\" and \"HELO\" identity authorizations must not be\n   construed to provide\
    \ more assurance than they do.  It is entirely\n   possible for a malicious sender\
    \ to inject a message using his own\n   domain in the identities used by SPF,\
    \ to have that domain's SPF\n   record authorize the sending host, and yet the\
    \ message can easily\n   list other identities in its header.  Unless the user\
    \ or the MUA\n   takes care to note that the authorized identity does not match\
    \ the\n   other more commonly-presented identities (such as the From:  header\n\
    \   field), the user may be lulled into a false sense of security.\n"
- title: 10.3.  Spoofed DNS and IP Data
  contents:
  - "10.3.  Spoofed DNS and IP Data\n   There are two aspects of this protocol that\
    \ malicious parties could\n   exploit to undermine the validity of the check_host()\
    \ function:\n   o  The evaluation of check_host() relies heavily on DNS.  A malicious\n\
    \      attacker could attack the DNS infrastructure and cause\n      check_host()\
    \ to see spoofed DNS data, and then return incorrect\n      results.  This could\
    \ include returning \"Pass\" for an <ip> value\n      where the actual domain's\
    \ record would evaluate to \"Fail\".  See\n      [RFC3833] for a description of\
    \ DNS weaknesses.\n   o  The client IP address, <ip>, is assumed to be correct.\
    \  A\n      malicious attacker could spoof TCP sequence numbers to make mail\n\
    \      appear to come from a permitted host for a domain that the\n      attacker\
    \ is impersonating.\n"
- title: 10.4.  Cross-User Forgery
  contents:
  - "10.4.  Cross-User Forgery\n   By definition, SPF policies just map domain names\
    \ to sets of\n   authorized MTAs, not whole E-Mail addresses to sets of authorized\n\
    \   users.  Although the \"l\" macro (Section 8) provides a limited way to\n \
    \  define individual sets of authorized MTAs for specific E-Mail\n   addresses,\
    \ it is generally impossible to verify, through SPF, the use\n   of specific E-Mail\
    \ addresses by individual users of the same MTA.\n   It is up to mail services\
    \ and their MTAs to directly prevent\n   cross-user forgery: based on SMTP AUTH\
    \ ([RFC2554]), users should be\n   restricted to using only those E-Mail addresses\
    \ that are actually\n   under their control (see [RFC4409], Section 6.1).  Another\
    \ means to\n   verify the identity of individual users is message cryptography\
    \ such\n   as PGP ([RFC2440]) or S/MIME ([RFC3851]).\n"
- title: 10.5.  Untrusted Information Sources
  contents:
  - "10.5.  Untrusted Information Sources\n   SPF uses information supplied by third\
    \ parties, such as the \"HELO\"\n   domain name, the \"MAIL FROM\" address, and\
    \ SPF records.  This\n   information is then passed to the receiver in the Received-SPF:\
    \ trace\n   fields and possibly returned to the client MTA in the form of an SMTP\n\
    \   rejection message.  This information must be checked for invalid\n   characters\
    \ and excessively long lines.\n   When the authorization check fails, an explanation\
    \ string may be\n   included in the reject response.  Both the sender and the\
    \ rejecting\n   receiver need to be aware that the explanation was determined\
    \ by the\n   publisher of the SPF record checked and, in general, not the\n  \
    \ receiver.  The explanation may contain malicious URLs, or it may be\n   offensive\
    \ or misleading.\n   This is probably less of a concern than it may initially\
    \ seem since\n   such messages are returned to the sender, and the explanation\
    \ strings\n   come from the sender policy published by the domain in the identity\n\
    \   claimed by that very sender.  As long as the DSN is not redirected to\n  \
    \ someone other than the actual sender, the only people who see\n   malicious\
    \ explanation strings are people whose messages claim to be\n   from domains that\
    \ publish such strings in their SPF records.  In\n   practice, DSNs can be misdirected,\
    \ such as when an MTA accepts an\n   E-Mail and then later generates a DSN to\
    \ a forged address, or when an\n   E-Mail forwarder does not direct the DSN back\
    \ to the original sender.\n"
- title: 10.6.  Privacy Exposure
  contents:
  - "10.6.  Privacy Exposure\n   Checking SPF records causes DNS queries to be sent\
    \ to the domain\n   owner.  These DNS queries, especially if they are caused by\
    \ the\n   \"exists\" mechanism, can contain information about who is sending\n\
    \   E-Mail and likely to which MTA the E-Mail is being sent.  This can\n   introduce\
    \ some privacy concerns, which may be more or less of an\n   issue depending on\
    \ local laws and the relationship between the domain\n   owner and the person\
    \ sending the E-Mail.\n"
- title: 11.  Contributors and Acknowledgements
  contents:
  - "11.  Contributors and Acknowledgements\n   This document is largely based on\
    \ the work of Meng Weng Wong and Mark\n   Lentczner.  Although, as this section\
    \ acknowledges, many people have\n   contributed to this document, a very large\
    \ portion of the writing and\n   editing are due to Meng and Mark.\n   This design\
    \ owes a debt of parentage to [RMX] by Hadmut Danisch and\n   to [DMP] by Gordon\
    \ Fecyk.  The idea of using a DNS record to check\n   the legitimacy of an E-Mail\
    \ address traces its ancestry further back\n   through messages on the namedroppers\
    \ mailing list by Paul Vixie\n   [Vixie] (based on suggestion by Jim Miller) and\
    \ by David Green\n   [Green].\n   Philip Gladstone contributed the concept of\
    \ macros to the\n   specification, multiplying the expressiveness of the language\
    \ and\n   making per-user and per-IP lookups possible.\n   The authors would also\
    \ like to thank the literally hundreds of\n   individuals who have participated\
    \ in the development of this design.\n   They are far too numerous to name, but\
    \ they include the following:\n      The folks on the spf-discuss mailing list.\n\
    \      The folks on the SPAM-L mailing list.\n      The folks on the IRTF ASRG\
    \ mailing list.\n      The folks on the IETF MARID mailing list.\n      The folks\
    \ on #perl.\n"
- title: 12.  IANA Considerations
  contents:
  - '12.  IANA Considerations

    '
- title: 12.1.  The SPF DNS Record Type
  contents:
  - "12.1.  The SPF DNS Record Type\n   The IANA has assigned a new Resource Record\
    \ Type and Qtype from the\n   DNS Parameters Registry for the SPF RR type with\
    \ code 99.\n"
- title: 12.2.  The Received-SPF Mail Header Field
  contents:
  - "12.2.  The Received-SPF Mail Header Field\n   Per [RFC3864], the \"Received-SPF:\"\
    \ header field is added to the IANA\n   Permanent Message Header Field Registry.\
    \  The following is the\n   registration template:\n      Header field name: Received-SPF\n\
    \      Applicable protocol: mail ([RFC2822])\n      Status: Experimental\n   \
    \   Author/Change controller: IETF\n      Specification document(s): RFC 4408\n\
    \      Related information:\n      Requesting SPF Council review of any proposed\
    \ changes and\n      additions to this field are recommended.  For information\
    \ about\n      the SPF Council see http://www.openspf.org/Council\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain names -\
    \ implementation and\n              specification\", STD 13, RFC 1035, November\
    \ 1987.\n   [RFC1123]  Braden, R., \"Requirements for Internet Hosts - Application\n\
    \              and Support\", STD 3, RFC 1123, October 1989.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2821]  Klensin, J., \"Simple Mail Transfer\
    \ Protocol\", RFC 2821,\n              April 2001.\n   [RFC2822]  Resnick, P.,\
    \ \"Internet Message Format\", RFC 2822, April\n              2001.\n   [RFC3464]\
    \  Moore, K. and G. Vaudreuil, \"An Extensible Message Format\n              for\
    \ Delivery Status Notifications\", RFC 3464, January\n              2003.\n  \
    \ [RFC3513]  Hinden, R. and S. Deering, \"Internet Protocol Version 6\n      \
    \        (IPv6) Addressing Architecture\", RFC 3513, April 2003.\n   [RFC3864]\
    \  Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n              Procedures\
    \ for Message Header Fields\", BCP 90, RFC 3864,\n              September 2004.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66, RFC\n       \
    \       3986, January 2005.\n   [RFC4234]  Crocker, D. and P. Overell, \"Augmented\
    \ BNF for Syntax\n              Specifications: ABNF\", RFC 4234, October 2005.\n\
    \   [US-ASCII] American National Standards Institute (formerly United\n      \
    \        States of America Standards Institute), \"USA Code for\n            \
    \  Information Interchange, X3.4\", 1968.\n   ANSI X3.4-1968 has been replaced\
    \ by newer versions with slight\n              modifications, but the 1968 version\
    \ remains definitive for\n              the Internet.\n"
- title: 13.2  Informative References
  contents:
  - "13.2  Informative References\n   [RFC1034]  Mockapetris, P., \"Domain names -\
    \ concepts and facilities\",\n              STD 13, RFC 1034, November 1987.\n\
    \   [RFC1983]  Malkin, G., \"Internet Users' Glossary\", RFC 1983, August\n  \
    \            1996.\n   [RFC2440]  Callas, J., Donnerhacke, L., Finney, H., and\
    \ R. Thayer,\n              \"OpenPGP Message Format\", RFC 2440, November 1998.\n\
    \   [RFC2554]  Myers, J., \"SMTP Service Extension for Authentication\",\n   \
    \           RFC 2554, March 1999.\n   [RFC3696]  Klensin, J., \"Application Techniques\
    \ for Checking and\n              Transformation of Names\", RFC 3696, February\
    \ 2004.\n   [RFC3833]  Atkins, D. and R. Austein, \"Threat Analysis of the Domain\n\
    \              Name System (DNS)\", RFC 3833, August 2004.\n   [RFC3851]  Ramsdell,\
    \ B., \"Secure/Multipurpose Internet Mail\n              Extensions (S/MIME) Version\
    \ 3.1 Message Specification\",\n              RFC 3851, July 2004.\n   [RFC4409]\
    \  Gellens, R. and J. Klensin, \"Message Submission for Mail\",\n            \
    \  RFC 4409, April 2006.\n   [RMX]      Danish, H., \"The RMX DNS RR Type for\
    \ light weight sender\n              authentication\", Work In Progress\n   [DMP]\
    \      Fecyk, G., \"Designated Mailers Protocol\", Work In Progress\n   [Vixie]\
    \    Vixie, P., \"Repudiating MAIL FROM\", 2002.\n   [Green]    Green, D., \"\
    Domain-Authorized SMTP Mail\", 2002.\n"
- title: Appendix A.  Collected ABNF
  contents:
  - "Appendix A.  Collected ABNF\n   This section is normative and any discrepancies\
    \ with the ABNF\n   fragments in the preceding text are to be resolved in favor\
    \ of this\n   grammar.\n   See [RFC4234] for ABNF notation.  Please note that\
    \ as per this ABNF\n   definition, literal text strings (those in quotes) are\
    \ case-\n   insensitive.  Hence, \"mx\" matches \"mx\", \"MX\", \"mX\", and \"\
    Mx\".\n   record           = version terms *SP\n   version          = \"v=spf1\"\
    \n   terms            = *( 1*SP ( directive / modifier ) )\n   directive     \
    \   = [ qualifier ] mechanism\n   qualifier        = \"+\" / \"-\" / \"?\" / \"\
    ~\"\n   mechanism        = ( all / include\n                      / A / MX / PTR\
    \ / IP4 / IP6 / exists )\n   all              = \"all\"\n   include          =\
    \ \"include\"  \":\" domain-spec\n   A                = \"a\"      [ \":\" domain-spec\
    \ ] [ dual-cidr-length ]\n   MX               = \"mx\"     [ \":\" domain-spec\
    \ ] [ dual-cidr-length ]\n   PTR              = \"ptr\"    [ \":\" domain-spec\
    \ ]\n   IP4              = \"ip4\"      \":\" ip4-network   [ ip4-cidr-length\
    \ ]\n   IP6              = \"ip6\"      \":\" ip6-network   [ ip6-cidr-length\
    \ ]\n   exists           = \"exists\"   \":\" domain-spec\n   modifier       \
    \  = redirect / explanation / unknown-modifier\n   redirect         = \"redirect\"\
    \ \"=\" domain-spec\n   explanation      = \"exp\" \"=\" domain-spec\n   unknown-modifier\
    \ = name \"=\" macro-string\n   ip4-cidr-length  = \"/\" 1*DIGIT\n   ip6-cidr-length\
    \  = \"/\" 1*DIGIT\n   dual-cidr-length = [ ip4-cidr-length ] [ \"/\" ip6-cidr-length\
    \ ]\n   ip4-network      = qnum \".\" qnum \".\" qnum \".\" qnum\n   qnum    \
    \         = DIGIT                 ; 0-9\n                      / %x31-39 DIGIT\
    \       ; 10-99\n                      / \"1\" 2DIGIT          ; 100-199\n   \
    \                   / \"2\" %x30-34 DIGIT   ; 200-249\n                      /\
    \ \"25\" %x30-35        ; 250-255\n             ; conventional dotted quad notation.\
    \  e.g., 192.0.2.0\n   ip6-network      = <as per [RFC 3513], section 2.2>\n \
    \            ; e.g., 2001:DB8::CD30\n   domain-spec      = macro-string domain-end\n\
    \   domain-end       = ( \".\" toplabel [ \".\" ] ) / macro-expand\n   toplabel\
    \         = ( *alphanum ALPHA *alphanum ) /\n                      ( 1*alphanum\
    \ \"-\" *( alphanum / \"-\" ) alphanum )\n                      ; LDH rule plus\
    \ additional TLD restrictions\n                      ; (see [RFC3696], Section\
    \ 2)\n   alphanum         = ALPHA / DIGIT\n   explain-string   = *( macro-string\
    \ / SP )\n   macro-string     = *( macro-expand / macro-literal )\n   macro-expand\
    \     = ( \"%{\" macro-letter transformers *delimiter \"}\" )\n              \
    \        / \"%%\" / \"%_\" / \"%-\"\n   macro-literal    = %x21-24 / %x26-7E\n\
    \                      ; visible characters except \"%\"\n   macro-letter    \
    \ = \"s\" / \"l\" / \"o\" / \"d\" / \"i\" / \"p\" / \"h\" /\n                \
    \      \"c\" / \"r\" / \"t\"\n   transformers     = *DIGIT [ \"r\" ]\n   delimiter\
    \        = \".\" / \"-\" / \"+\" / \",\" / \"/\" / \"_\" / \"=\"\n   name    \
    \         = ALPHA *( ALPHA / DIGIT / \"-\" / \"_\" / \".\" )\n   header-field\
    \     = \"Received-SPF:\" [CFWS] result FWS [comment FWS]\n                  \
    \    [ key-value-list ] CRLF\n   result           = \"Pass\" / \"Fail\" / \"SoftFail\"\
    \ / \"Neutral\" /\n                      \"None\" / \"TempError\" / \"PermError\"\
    \n   key-value-list   = key-value-pair *( \";\" [CFWS] key-value-pair )\n    \
    \                  [\";\"]\n   key-value-pair   = key [CFWS] \"=\" ( dot-atom\
    \ / quoted-string )\n   key              = \"client-ip\" / \"envelope-from\" /\
    \ \"helo\" /\n                      \"problem\" / \"receiver\" / \"identity\"\
    \ /\n                       mechanism / \"x-\" name / name\n   identity      \
    \   = \"mailfrom\"   ; for the \"MAIL FROM\" identity\n                      /\
    \ \"helo\"     ; for the \"HELO\" identity\n                      / name     \
    \  ; other identities\n   dot-atom         = <unquoted word as per [RFC2822]>\n\
    \   quoted-string    = <quoted string as per [RFC2822]>\n   comment          =\
    \ <comment string as per [RFC2822]>\n   CFWS             = <comment or folding\
    \ white space as per [RFC2822]>\n   FWS              = <folding white space as\
    \ per [RFC2822]>\n   CRLF             = <standard end-of-line token as per [RFC2822]>\n"
- title: Appendix B.  Extended Examples
  contents:
  - "Appendix B.  Extended Examples\n   These examples are based on the following\
    \ DNS setup:\n   ; A domain with two mail servers, two hosts\n   ; and two servers\
    \ at the domain name\n   $ORIGIN example.com.\n   @           MX  10 mail-a\n\
    \               MX  20 mail-b\n               A   192.0.2.10\n               A\
    \   192.0.2.11\n   amy         A   192.0.2.65\n   bob         A   192.0.2.66\n\
    \   mail-a      A   192.0.2.129\n   mail-b      A   192.0.2.130\n   www      \
    \   CNAME example.com.\n   ; A related domain\n   $ORIGIN example.org.\n   @ \
    \          MX  10 mail-c\n   mail-c      A   192.0.2.140\n   ; The reverse IP\
    \ for those addresses\n   $ORIGIN 2.0.192.in-addr.arpa.\n   10          PTR example.com.\n\
    \   11          PTR example.com.\n   65          PTR amy.example.com.\n   66 \
    \         PTR bob.example.com.\n   129         PTR mail-a.example.com.\n   130\
    \         PTR mail-b.example.com.\n   140         PTR mail-c.example.org.\n  \
    \ ; A rogue reverse IP domain that claims to be\n   ; something it's not\n   $ORIGIN\
    \ 0.0.10.in-addr.arpa.\n   4           PTR bob.example.com.\n"
- title: B.1.  Simple Examples
  contents:
  - "B.1.  Simple Examples\n   These examples show various possible published records\
    \ for\n   example.com and which values if <ip> would cause check_host() to\n \
    \  return \"Pass\".  Note that <domain> is \"example.com\".\n   v=spf1 +all\n\
    \      -- any <ip> passes\n   v=spf1 a -all\n      -- hosts 192.0.2.10 and 192.0.2.11\
    \ pass\n   v=spf1 a:example.org -all\n      -- no sending hosts pass since example.org\
    \ has no A records\n   v=spf1 mx -all\n      -- sending hosts 192.0.2.129 and\
    \ 192.0.2.130 pass\n   v=spf1 mx:example.org -all\n      -- sending host 192.0.2.140\
    \ passes\n   v=spf1 mx mx:example.org -all\n      -- sending hosts 192.0.2.129,\
    \ 192.0.2.130, and 192.0.2.140 pass\n   v=spf1 mx/30 mx:example.org/30 -all\n\
    \      -- any sending host in 192.0.2.128/30 or 192.0.2.140/30 passes\n   v=spf1\
    \ ptr -all\n      -- sending host 192.0.2.65 passes (reverse DNS is valid and\
    \ is in\n         example.com)\n      -- sending host 192.0.2.140 fails (reverse\
    \ DNS is valid, but not\n         in example.com)\n      -- sending host 10.0.0.4\
    \ fails (reverse IP is not valid)\n   v=spf1 ip4:192.0.2.128/28 -all\n      --\
    \ sending host 192.0.2.65 fails\n      -- sending host 192.0.2.129 passes\n"
- title: B.2.  Multiple Domain Example
  contents:
  - "B.2.  Multiple Domain Example\n   These examples show the effect of related records:\n\
    \      example.org: \"v=spf1 include:example.com include:example.net -all\"\n\
    \   This record would be used if mail from example.org actually came\n   through\
    \ servers at example.com and example.net.  Example.org's\n   designated servers\
    \ are the union of example.com's and example.net's\n   designated servers.\n \
    \     la.example.org: \"v=spf1 redirect=example.org\"\n      ny.example.org: \"\
    v=spf1 redirect=example.org\"\n      sf.example.org: \"v=spf1 redirect=example.org\"\
    \n   These records allow a set of domains that all use the same mail\n   system\
    \ to make use of that mail system's record.  In this way, only\n   the mail system's\
    \ record needs to be updated when the mail setup\n   changes.  These domains'\
    \ records never have to change.\n"
- title: B.3.  DNSBL Style Example
  contents:
  - "B.3.  DNSBL Style Example\n   Imagine that, in addition to the domain records\
    \ listed above, there\n   are these:\n   $ORIGIN _spf.example.com.  mary.mobile-users\
    \                   A\n   127.0.0.2 fred.mobile-users                   A 127.0.0.2\n\
    \   15.15.168.192.joel.remote-users     A 127.0.0.2\n   16.15.168.192.joel.remote-users\
    \     A 127.0.0.2\n   The following records describe users at example.com who\
    \ mail from\n   arbitrary servers, or who mail from personal servers.\n   example.com:\n\
    \   v=spf1 mx\n          include:mobile-users._spf.%{d}\n          include:remote-users._spf.%{d}\n\
    \          -all\n   mobile-users._spf.example.com:\n   v=spf1 exists:%{l1r+}.%{d}\n\
    \   remote-users._spf.example.com:\n   v=spf1 exists:%{ir}.%{l1r+}.%{d}\n"
- title: B.4.  Multiple Requirements Example
  contents:
  - "B.4.  Multiple Requirements Example\n   Say that your sender policy requires\
    \ both that the IP address is\n   within a certain range and that the reverse\
    \ DNS for the IP matches.\n   This can be done several ways, including the following:\n\
    \   example.com.           SPF  ( \"v=spf1 \"\n                              \
    \   \"-include:ip4._spf.%{d} \"\n                                 \"-include:ptr._spf.%{d}\
    \ \"\n                                 \"+all\" )\n   ip4._spf.example.com.  SPF\
    \  \"v=spf1 -ip4:192.0.2.0/24 +all\"\n   ptr._spf.example.com.  SPF  \"v=spf1\
    \ -ptr +all\"\n   This example shows how the \"-include\" mechanism can be useful,\
    \ how an\n   SPF record that ends in \"+all\" can be very restrictive, and the\
    \ use\n   of De Morgan's Law.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Meng Weng Wong\n   Singapore\n   EMail: mengwong+spf@pobox.com\n\
    \   Wayne Schlitt\n   4615 Meredeth #9\n   Lincoln Nebraska, NE  68506\n   United\
    \ States of America\n   EMail: wayne@schlitt.net\n   URI:   http://www.schlitt.net/spf/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
