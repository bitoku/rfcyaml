- title: __initial_text__
  contents:
  - '   Security Threats and Risks for Open Pluggable Edge Services (OPES)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   The document investigates the security threats associated with the\n\
    \   Open Pluggable Edge Services (OPES) and discusses the effects of\n   security\
    \ threats on the underlying architecture.  The main goal of\n   this document\
    \ is threat discovery and analysis.  The document does\n   not specify or recommend\
    \ any solutions.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  OPES Data Flow Threats . . . . . . . . . . . . . . .\
    \ . . . . .  4\n       2.1.  OPES Flow Network Level Threats  . . . . . . . .\
    \ . . . .  5\n             2.1.1.  Connection-Flow Denial-of-Service (DoS). .\
    \ . . .  6\n             2.1.2.  Threats to Network Robustness. . . . . . . .\
    \ . .  6\n       2.2.  OPES Flow Application Level Threats. . . . . . . . . .\
    \ .  6\n             2.2.1.  Unauthorized OPES Entities . . . . . . . . . . .\
    \  6\n             2.2.2.  Unauthorized Actions of legitimate OPES Entities  7\n\
    \             2.2.3.  Unwanted Content Transformations . . . . . . . .  7\n  \
    \           2.2.4.  Corrupted Content  . . . . . . . . . . . . . . .  7\n    \
    \         2.2.5.  Threats to Message Structure Integrity . . . . .  8\n      \
    \       2.2.6.  Granularity of Protection  . . . . . . . . . . .  8\n        \
    \     2.2.7.  Risks of Hop-by-Hop Protection . . . . . . . . .  8\n          \
    \   2.2.8.  Threats to Integrity of Complex Data . . . . . .  8\n            \
    \ 2.2.9.  Denial of Service (DoS)  . . . . . . . . . . . .  9\n             2.2.10.\
    \ Tracing and Notification Information . . . . . .  9\n             2.2.11. Unauthenticated\
    \ Communication in OPES Flow . . .  9\n   3.  Threats to Out-of-Band Data  . .\
    \ . . . . . . . . . . . . . . .  9\n       3.1.  Threats that Endanger the OPES\
    \ Data Flow . . . . . . . . 10\n       3.2.  Inaccurate Accounting Information\
    \  . . . . . . . . . . . 10\n       3.3.  OPES Service Request Repudiation . .\
    \ . . . . . . . . . . 11\n       3.4.  Inconsistent Privacy Policy  . . . . .\
    \ . . . . . . . . . 11\n       3.5.  Exposure of Privacy Preferences  . . . .\
    \ . . . . . . . . 11\n       3.6.  Exposure of Security Settings  . . . . . .\
    \ . . . . . . . 11\n       3.7.  Improper Enforcement of Privacy and Security\
    \ Policy  . . 11\n       3.8.  DoS Attacks  . . . . . . . . . . . . . . . . .\
    \ . . . . . 12\n   4.  Security Considerations  . . . . . . . . . . . . . . .\
    \ . . . . 12\n   5.  References . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 12\n       5.1.  Normative References . . . . . . . . . . . . . . . .\
    \ . . 12\n       5.2.  Informative References . . . . . . . . . . . . . . . .\
    \ . 12\n   6.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . .\
    \ 12\n   7.  Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . 13\n\
    \   8.  Full Copyright Statement . . . . . . . . . . . . . . . . . . . 14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Open Pluggable Edge Services (OPES) [1] architecture\
    \ enables\n   cooperative application services (OPES services) between a data\n\
    \   provider, a data consumer, and zero or more OPES processors.  The\n   application\
    \ services under consideration analyze and possibly\n   transform application-level\
    \ messages exchanged between the data\n   provider and the data consumer.  The\
    \ OPES processor can distribute\n   the responsibility of service execution by\
    \ communicating and\n   collaborating with one or more remote callout servers.\
    \  The details\n   of the OPES architecture can be found in [1].\n   Security\
    \ threats with respect to OPES can be viewed from different\n   angles.  There\
    \ are security risks that affect content consumer\n   applications, and those\
    \ that affect the data provider applications.\n   These threats affect the quality\
    \ and integrity of data that the\n   applications either produce or consume. \
    \ On the other hand, the\n   security risks can also be categorized into trust\
    \ within the system\n   (i.e., OPES service providers) and protection of the system\
    \ from\n   threats imposed by outsiders such as hackers and attackers.  Insiders\n\
    \   are those parties that are part of the OPES system.  Outsiders are\n   those\
    \ entities that are not participating in the OPES system.\n   It must be noted\
    \ that not everyone in an OPES delivery path is\n   equally trusted.  Each OPES\
    \ administrative trust domain must protect\n   itself from all outsiders.  Furthermore,\
    \ it may have a limited trust\n   relationship with another OPES administrative\
    \ domain for certain\n   purposes.\n   OPES service providers must use authentication\
    \ as the basis for\n   building trust relationships between administrative domains.\n\
    \   Insiders can intentionally or unintentionally inflict harm and damage\n  \
    \ on the data consumer and data provider applications.  This can be\n   through\
    \ bad system configuration, execution of bad software or, if\n   their networks\
    \ are compromised, by inside or outside hackers.\n   Depending on the deployment\
    \ scenario, the trust within the OPES\n   system is based on a set of transitive\
    \ trust relationships between\n   the data provider application, the OPES entities,\
    \ and the data\n   consumer application.  Threats to OPES entities can be at the\
    \ OPES\n   flow level and/or at the network level.\n   In considering threats\
    \ to the OPES system, the document will follow a\n   threat analysis model that\
    \ identifies the threats from the\n   perspective of how they will affect the\
    \ data consumer and the data\n   provider applications.\n   The main goal of this\
    \ document is threat discovery and analysis.  The\n   document does not specify\
    \ or recommend any solutions.\n   It is important to mention that the OPES architecture\
    \ has many\n   similarities with other so called overlay networks, specifically\
    \ web\n   caches and content delivery networks (CDN) (see [2], [4]).  This\n \
    \  document focuses on threats that are introduced by the existence of\n   the\
    \ OPES processor and callout servers.  Security threats specific to\n   content\
    \ services that do not use the OPES architecture are considered\n   out-of-scope\
    \ of this document.  However, this document can be used as\n   input when considering\
    \ security implications for web caches and CDNs.\n   The document is organized\
    \ as follows: Section 2 discusses threats to\n   OPES data flow on the network\
    \ and application level, section 3\n   discusses threats to other parts of the\
    \ system, and section 4\n   discusses security considerations.\n"
- title: 2. OPES Data Flow Threats
  contents:
  - "2. OPES Data Flow Threats\n   Threats to the OPES data flow can affect the data\
    \ consumer and data\n   provider applications.  At the OPES flow level, threats\
    \ can occur at\n   Policy Enforcement Points, and Policy Decision Points [3],\
    \ and along\n   the OPES flow path where network elements are used to process\
    \ the\n   data.\n   A serious problem is posed by the very fact that the OPES\n\
    \   architecture is based on widely adopted protocols (HTTP is used as an\n  \
    \ example).  The architecture document specifically requires that \"the\n   presence\
    \ of an OPES processor in the data request/response flow SHALL\n   NOT interfere\
    \ with the operations of non-OPES aware clients and\n   servers\".  This greatly\
    \ facilitates OPES' deployment, but on the\n   other hand a vast majority of clients\
    \ (browsers) will not be able to\n   exploit any safeguards added as base protocol\
    \ extensions.\n   For the usual data consumer, who might have questions such as\
    \ (Where\n   does this content come from? Can I get it another way? What is the\n\
    \   difference? Is it legitimate?).  Even if there are facilities and\n   technical\
    \ expertise present to pursue these questions, such thorough\n   examination of\
    \ each result is prohibitively expensive in terms of\n   time and effort.  OPES-aware\
    \ content providers may try to protect\n   themselves by adding verification scripts\
    \ and special page\n   structures.  OPES-aware end users may use special tools.\
    \  In all\n   other cases (non-OPES aware clients and servers) protection will\
    \ rely\n   on monitoring services and investigation of occasionally discovered\n\
    \   anomalies.\n   An OPES system poses a special danger as a possible base for\n\
    \   classical man-in-the-middle attacks.  One of the reasons why such\n   attacks\
    \ are relatively rare is the difficulty in finding an\n   appropriate base: a\
    \ combination of a traffic interception point\n   controlling a large flow of\
    \ data and an application codebase running\n   on a high-performance hardware\
    \ with sufficient performance to analyze\n   and possibly modify all passing data.\
    \  An OPES processor meets this\n   definition.  This calls for special attention\
    \ to protection measures\n   at all levels of the system.\n   Any compromise of\
    \ an OPES processor or remote callout server can have\n   a ripple effect on the\
    \ integrity of the affected OPES services across\n   all service providers that\
    \ use the service.  To mitigate this threat,\n   appropriate security procedures\
    \ and tools (e.g., a firewall) should\n   be applied.\n   Specific threats can\
    \ exist at the network level and at the OPES data\n   flow level.\n"
- title: 2.1.  OPES Flow Network Level Threats
  contents:
  - "2.1.  OPES Flow Network Level Threats\n   OPES processor and callout servers\
    \ are susceptible to network level\n   attacks from outsiders or from the networks\
    \ of other OPES service\n   providers (i.e., if the network of a contracted OPES\
    \ service is\n   compromised).\n   The OPES architecture is based on common application\
    \ protocols that\n   do not provide strong guarantees of privacy, authentication,\
    \ or\n   integrity.  The IAB considerations [4] require that the IP address of\n\
    \   an OPES processor be accessible to data consumer applications at the\n   IP\
    \ addressing level.  This requirement limits the ability of service\n   providers\
    \ to position the OPES processor behind firewalls and may\n   expose the OPES\
    \ processor and remote callout servers to network level\n   attacks.  For example,\
    \ the use of TCP/IP as a network level protocol\n   makes OPES processors subject\
    \ to many known attacks, such as IP\n   spoofing and session stealing.\n   The\
    \ OPES system is also susceptible to a number of security threats\n   that are\
    \ commonly associated with network infrastructure.  These\n   threats include\
    \ snooping, denial of service, sabotage, vandalism,\n   industrial espionage,\
    \ and theft of service.\n   There are best practice solutions to mitigate network\
    \ level threats.\n   It is recommended that the security of the OPES entities\
    \ at the\n   network level be enhanced using known techniques and methods that\n\
    \   minimize the risks of IP spoofing, snooping, denial of service, and\n   session\
    \ stealing.\n   At the OPES Flow level, connection-level security between the\
    \ OPES\n   processor and callout servers is an important consideration.  For\n\
    \   example, it is possible to spoof the OPES processor or the remote\n   callout\
    \ server.  There are threats to data confidentiality between\n   the OPES processor\
    \ and the remote callout server in an OPES flow.\n   The next subsections cover\
    \ possible DoS attacks on an OPES processor,\n   remote callout server or data\
    \ consumer application, and network\n   robustness.\n"
- title: 2.1.1.  Connection-Flow Denial-of-Service (DoS)
  contents:
  - "2.1.1.  Connection-Flow Denial-of-Service (DoS)\n   OPES processors, callout\
    \ servers, and data consumer applications can\n   be vulnerable to DoS attacks.\
    \  DoS attacks can be of various types.\n   One example of a DoS attack is the\
    \ overloading of OPES processors or\n   callout servers by spurious service requests\
    \ issued by a malicious\n   node, which denies the legal data traffic the necessary\
    \ resources to\n   render service.  The resources include CPU cycles, memory,\
    \ network\n   interfaces, etc.  A Denial-of-Service attack can be selective,\n\
    \   generic, or random in terms of which communication streams are\n   affected.\n\
    \   Distributed DoS is also possible when an attacker successfully\n   directs\
    \ multiple nodes over the network to initiate spurious service\n   requests to\
    \ an OPES processor (or callout server) simultaneously.\n"
- title: 2.1.2.  Threats to Network Robustness
  contents:
  - "2.1.2.  Threats to Network Robustness\n   If OPES implementation violates end-to-end\
    \ addressing principles, it\n   could endanger the Internet infrastructure by\
    \ complicating routing\n   and connection management.  If it does not use flow-control\n\
    \   principles for managing connections, or if it interferes with end-\n   to-end\
    \ flow control of connections that it did not originate, then it\n   could cause\
    \ Internet congestion.\n   An implementation that violates the IAB requirement\
    \ of explicit IP\n   level addressing (for example, by adding OPES functional\
    \ capabilities\n   to an interception proxy) may defeat some of the protective\n\
    \   mechanisms and safeguards built into the OPES architecture.\n"
- title: 2.2.  OPES Flow Application Level Threats
  contents:
  - "2.2.  OPES Flow Application Level Threats\n   At the content level, threats to\
    \ the OPES system can come from\n   outsiders or insiders.  The threat from outsiders\
    \ is frequently\n   intentional.  Threats from insiders can be intentional or\
    \ accidental.\n   Accidents may result from programming or configuration errors\
    \ that\n   result in bad system behavior.\n   Application level problems and threats\
    \ to the OPES systems are\n   discussed below:\n"
- title: 2.2.1.  Unauthorized OPES Entities
  contents:
  - "2.2.1.  Unauthorized OPES Entities\n   Although one party authorization is mandated\
    \ by the OPES\n   architecture, such authorization occurs out-of-band.  Discovering\
    \ the\n   presence of an OPES entity and verifying authorization requires\n  \
    \ special actions and may present a problem.\n   Adding notification and authorization\
    \ information to the data\n   messages (by using base protocol extensions) may\
    \ help, especially if\n   the data consumer's software is aware of such extensions.\n"
- title: 2.2.2.  Unauthorized Actions of Legitimate OPES Entities
  contents:
  - "2.2.2.  Unauthorized Actions of Legitimate OPES Entities\n   According to the\
    \ OPES architecture, the authorization is not tightly\n   coupled with specific\
    \ rules and procedures triggered by the rules.\n   Even if a requirement to approve\
    \ each particular rule and procedure\n   was set, it looks at least impractical,\
    \ if not impossible, to request\n   such permission from the end user.  Authorization\
    \ granularity extends\n   to transformation classes, but not to individual rules\
    \ or\n   transformations.  The actual rules and triggered procedures may\n   (maliciously\
    \ or due to a programming error) perform actions that they\n   are not authorized\
    \ for.\n"
- title: 2.2.3.  Unwanted Content Transformations
  contents:
  - "2.2.3.  Unwanted Content Transformations\n   An authorized OPES service may perform\
    \ actions that do not adhere to\n   the expectations of the party that gave the\
    \ authorization for the\n   service.  Examples may include ad flooding by a local\
    \ ad insertion\n   service or use of inappropriate policy by a content filtering\n\
    \   service.\n   On the other hand, an OPES entity acting on behalf of one party\
    \ may\n   perform transformations that another party deems inappropriate.\n  \
    \ Examples may include replacing ads initially inserted by the content\n   provider\
    \ or applying filtering transformations that change the\n   meaning of the text.\n"
- title: 2.2.4.  Corrupted Content
  contents:
  - "2.2.4.  Corrupted Content\n   The OPES system may deliver outdated or otherwise\
    \ distorted\n   information due to programming problems or as a result of malicious\n\
    \   attacks.  For example, a compromised server, instead of performing an\n  \
    \ OPES service, may inject bogus content.  Such an action may be an act\n   of\
    \ cyber-vandalism (including virus injection) or intentional\n   distribution\
    \ of misleading information (such as manipulations with\n   financial data).\n\
    \   A compromised OPES server or malicious entity in the data flow may\n   introduce\
    \ changes specifically intended to cause improper actions in\n   the OPES server\
    \ or callout server.  These changes may be in the\n   message body, headers, or\
    \ both.  This type of threat is discussed in\n   more detail below.\n"
- title: 2.2.5.  Threats to Message Structure Integrity
  contents:
  - "2.2.5.  Threats to Message Structure Integrity\n   An OPES server may add, remove,\
    \ or delete certain headers in a\n   request and/or response message (for example,\
    \ to implement additional\n   privacy protection or assist in content filtering).\
    \  Such changes may\n   violate end-to-end integrity requirements or defeat services\
    \ that use\n   information provided in such headers (for example, some local\n\
    \   filtering services or reference-based services).\n"
- title: 2.2.6.  Granularity of Protection
  contents:
  - "2.2.6.  Granularity of Protection\n   OPES services have implicit permission\
    \ to modify content.  However,\n   the permissions generally apply only to portions\
    \ of the content, for\n   example, URL's between particular HTML tags, text in\
    \ headlines, or\n   URL's matching particular patterns.  In order to express such\n\
    \   policies, one must be able to refer to portions of messages and to\n   detect\
    \ modifications to message parts.\n   Because there is currently very little support\
    \ for policies that are\n   expressed in terms of message parts, it will be difficult\
    \ to\n   attribute any particular modification to a particular OPES processor,\n\
    \   or to automatically detect policy violations.\n   A fine-grained policy language\
    \ should be devised, and it could be\n   enforced using digital signatures.  This\
    \ would avoid the problems\n   inherent in hop-by-hop data integrity measures\
    \ (see next section).\n"
- title: 2.2.7.  Risks of Hop-by-Hop Protection
  contents:
  - "2.2.7.  Risks of Hop-by-Hop Protection\n   Generally, OPES services cannot be\
    \ applied to data protected with\n   end-to-end encryption methods because the\
    \ decryption key cannot be\n   shared with OPES processors without compromising\
    \ the intended\n   confidentiality of the data.  This means that if the endpoint\n\
    \   policies permit OPES services, the data must either be transmitted\n   without\
    \ confidentiality protections or an alternative model to end-\n   to-end encryption\
    \ must be developed, one in which the confidentiality\n   is guaranteed hop-by-hop.\
    \  Extending the end-to-end encryption model\n   is out of scope of this work.\n\
    \   OPES services that modify data are incompatible with end-to-end\n   integrity\
    \ protection methods, and this work will not attempt to\n   define hop-by-hop\
    \ integrity protection methods.\n"
- title: 2.2.8.  Threats to Integrity of Complex Data
  contents:
  - "2.2.8.  Threats to Integrity of Complex Data\n   The OPES system may violate\
    \ data integrity by applying inconsistent\n   transformations to interrelated\
    \ data objects or references within the\n   data object.  Problems may range from\
    \ a broken reference structure\n   (modified/missing targets, references to wrong\
    \ locations or missing\n   documents) to deliberate replacement/deletion/insertion\
    \ of links that\n   violate intentions of the content provider.\n"
- title: 2.2.9.  Denial of Service (DoS)
  contents:
  - "2.2.9.  Denial of Service (DoS)\n   The data consumer application may not be\
    \ able to access data if the\n   OPES system fails for any reason.\n   A malicious\
    \ or malfunctioning node may be able to block all traffic.\n   The data traffic\
    \ destined for the OPES processor (or callout server)\n   may not be able to use\
    \ the services of the OPES device.  The DoS may\n   be achieved by preventing\
    \ the data traffic from reaching the\n   processor or the callout server.\n"
- title: 2.2.10.  Tracing and Notification Information
  contents:
  - "2.2.10.  Tracing and Notification Information\n   Inadequate or vulnerable implementation\
    \ of the tracing and\n   notification mechanisms may defeat safeguards built into\
    \ the OPES\n   architecture.\n   Tracing and notification facilities may become\
    \ a target of malicious\n   attack.  Such an attack may create problems in discovering\
    \ and\n   stopping other attacks.\n   The absence of a standard for tracing and\
    \ notification information\n   may present an additional problem.  This information\
    \ is produced and\n   consumed by the independent entities (OPES servers/user\
    \ agents/\n   content provider facilities).  This calls for a set of standards\n\
    \   related to each base protocol in use.\n"
- title: 2.2.11.  Unauthenticated Communication in OPES Flow
  contents:
  - "2.2.11.  Unauthenticated Communication in OPES Flow\n   There are risks and threats\
    \ that could arise from unauthenticated\n   communication between the OPES server\
    \ and callout servers.  Lack of\n   use of strong authentication between OPES\
    \ processors and callout\n   servers may open security holes whereby DoS and other\
    \ types of\n   attacks (see sections [2 and 3]) can be performed.\n"
- title: 3.  Threats to Out-of-Band Data
  contents:
  - "3.  Threats to Out-of-Band Data\n   The OPES architecture separates a data flow\
    \ from a control\n   information flow (loading rulesets, trust establishment,\
    \ tracing,\n   policy propagation, etc.).  There are certain requirements set\
    \ for\n   the latter, but no specific mechanism is prescribed.  This gives more\n\
    \   flexibility for implementations, but creates more burden for\n   implementers\
    \ and potential customers to ensure that each specific\n   implementation meets\
    \ all requirements for data security, entity\n   authentication, and action authorization.\n\
    \   In addition to performing correct actions on the OPES data flow, any\n   OPES\
    \ implementation has to provide an adequate mechanism to satisfy\n   requirements\
    \ for out-of-band data and signaling information\n   integrity.\n   Whatever the\
    \ specific mechanism may be, it inevitably becomes subject\n   to multiple security\
    \ threats and possible attacks.  The way the\n   threats and attacks may be realized\
    \ depends on implementation\n   specifics but the resulting harm generally falls\
    \ into two categories:\n   threats to OPES data flow and threats to data integrity.\n\
    \   The specific threats are:\n"
- title: 3.1.  Threats that Endanger the OPES Data Flow
  contents:
  - "3.1.  Threats that Endanger the OPES Data Flow\n   Any weakness in the implementation\
    \ of a security, authentication, or\n   authorization mechanism may open the door\
    \ to the attacks described in\n   section 2.\n   An OPES system implementation\
    \ should address all these threats and\n   prove its robustness and ability to\
    \ withstand malicious attacks or\n   networking and programming problems.\n"
- title: 3.2.  Inaccurate Accounting Information
  contents:
  - "3.2.  Inaccurate Accounting Information\n   Collecting and reporting accurate\
    \ accounting data may be vital when\n   OPES servers are used to extend a business\
    \ model of a content\n   provider, service provider, or as a basis for third party\
    \ service.\n   The ability to collect and process accounting data is an important\n\
    \   part of OPES' system functionality.  This functionality may be\n   challenged\
    \ by distortion or destruction of base accounting data\n   (usually logs), processed\
    \ accounting data, accounting parameters, and\n   reporting configuration.\n \
    \  As a result a data consumer may be inappropriately charged for\n   viewing\
    \ content that was not successfully delivered, or a content\n   provider or independent\
    \ OPES services provider may not be compensated\n   for the services performed.\n\
    \   The OPES system may use accounting information to distribute\n   resources\
    \ between different consumers or limit resource usage by a\n   specific consumer.\
    \  In this case an attack on the accounting system\n   (by distortion of data\
    \ or issuing false configuration commands) may\n   result in incorrect resource\
    \ management and DoS by artificial\n   resource starvation.\n"
- title: 3.3.  OPES Service Request Repudiation
  contents:
  - "3.3.  OPES Service Request Repudiation\n   An entity (producer or consumer) might\
    \ make an authorized request and\n   later claim that it did not make that request.\
    \  As a result, an OPES\n   entity may be held liable for unauthorized changes\
    \ to the data flow,\n   or will be unable to receive compensation for a service.\n\
    \   There should be a clear request that this service is required and\n   there\
    \ should be a clear course of action on behalf of all parties.\n   This action\
    \ should have a request, an action, a non-repudiable means\n   of verifying the\
    \ request, and a means of specifying the effect of the\n   action.\n"
- title: 3.4.  Inconsistent Privacy Policy
  contents:
  - "3.4.  Inconsistent Privacy Policy\n   The OPES entities may have privacy policies\
    \ that are not consistent\n   with the data consumer application or content provider\
    \ application.\n   Privacy related problems may be further complicated if OPES\
    \ entities,\n   content providers, and end users belong to different jurisdictions\n\
    \   with different requirements and different levels of legal protection.\n  \
    \ As a result, the end user may not be aware that he or she does not\n   have\
    \ the expected legal protection.  The content provider may be\n   exposed to legal\
    \ risks due to a  failure to comply with regulations\n   of which he is not even\
    \ aware.\n"
- title: 3.5.  Exposure of Privacy Preferences
  contents:
  - "3.5.  Exposure of Privacy Preferences\n   The OPES system may inadvertently or\
    \ maliciously expose end user\n   privacy settings and requirements.\n"
- title: 3.6.  Exposure of Security Settings
  contents:
  - "3.6.  Exposure of Security Settings\n   There are risks that the OPES system\
    \ may expose end user security\n   settings when handling the request and responses.\
    \  The user data must\n   be handled as sensitive system information and protected\
    \ against\n   accidental and deliberate disclosure.\n"
- title: 3.7.  Improper Enforcement of Privacy and Security Policy
  contents:
  - "3.7.  Improper Enforcement of Privacy and Security Policy\n   OPES entities are\
    \ part of the content distribution system and as such\n   take on certain obligations\
    \ to support security and privacy policies\n   mandated by the content producer\
    \ and/or end user.  However there is a\n   danger that these policies are not\
    \ properly implemented and enforced.\n   The data consumer application may not\
    \ be aware that its protections\n   are no longer in effect.\n   There is also\
    \ the possibility of security and privacy leaks due to\n   the accidental misconfiguration\
    \ or, due to misunderstanding what\n   rules are in effect for a particular user\
    \ or request.\n   Privacy and security related parts of the systems can be targeted\
    \ by\n   malicious attacks and the ability to withstand such attacks is of\n \
    \  paramount importance.\n"
- title: 3.8.  DoS Attacks
  contents:
  - "3.8.  DoS Attacks\n   DoS attacks can be of various types.  One type of DoS attack\
    \ takes\n   effect by overloading the client.  For example, an intruder can\n\
    \   direct an OPES processor to issue numerous responses to a client.\n   There\
    \ is also additional DoS risk from a rule misconfiguration that\n   would have\
    \ the OPES processor ignore a data consumer application.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document discusses multiple security and\
    \ privacy issues related\n   to the OPES services.\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [1]  Barbir, A., Penno, R., Chen, R., Hofmann,\
    \ M., and H. Orman, \"An\n        Architecture for Open Pluggable Edge Services\
    \ (OPES)\", RFC 3835,\n        August 2004.\n   [2]  Barbir, A., Burger, E., Chen,\
    \ R., McHenry, S., Orman, H., and R.\n        Penno, \"OPES Use Cases and Deployment\
    \ Scenarios\", RFC 3752,\n        April 2004.\n   [3] Barbir, A., Batuner, O.,\
    \ Beck, A., Chan, T., and H. Orman,\n        \"Policy, Authorization, and Enforcement\
    \ Requirements of Open\n        Pluggable Edge Services (OPES)\", RFC 3838, August\
    \ 2004.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [4]  Floyd, S. and L. Daigle, \"IAB Architectural\
    \ and Policy\n        Considerations for Open Pluggable Edge Services\", RFC 3238,\n\
    \        January 2002.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   Many thanks to T. Chan (Nokia) and A. Beck (Lucent).\n"
- title: 7.  Authors' Addresses
  contents:
  - "7.  Authors' Addresses\n   Abbie Barbir\n   Nortel Networks\n   3500 Carling\
    \ Avenue\n   Nepean, Ontario  K2H 8E9\n   Canada\n   Phone: +1 613 763 5229\n\
    \   EMail: abbieb@nortelnetworks.com\n   Oskar Batuner\n   Independent consultant\n\
    \   EMail: batuner@attbi.com\n   Bindignavile Srinivas\n   Nokia\n   5 Wayside\
    \ Road\n   Burlington, MA  01803\n   USA\n   EMail: bindignavile.srinivas@nokia.com\n\
    \   Markus Hofmann\n   Bell Labs/Lucent Technologies\n   Room 4F-513\n   101 Crawfords\
    \ Corner Road\n   Holmdel, NJ  07733\n   US\n   Phone: +1 732 332 5983\n   EMail:\
    \ hofmann@bell-labs.com\n   Hilarie Orman\n   Purple Streak Development\n   EMail:\
    \ ho@alum.mit.edu\n"
- title: 8.  Full Copyright Statement
  contents:
  - "8.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004). \
    \ This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78, and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n\
    \   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
