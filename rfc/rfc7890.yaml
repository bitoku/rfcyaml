- title: __initial_text__
  contents:
  - '         Concepts and Terminology for Peer-to-Peer SIP (P2PSIP)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines concepts and terminology for using the Session\n\
    \   Initiation Protocol in a peer-to-peer environment where the\n   traditional\
    \ proxy-registrar and message-routing functions are\n   replaced by a distributed\
    \ mechanism.  These mechanisms may be\n   implemented using a Distributed Hash\
    \ Table or other distributed data\n   mechanism with similar external properties.\
    \  This document includes a\n   high-level view of the functional relationships\
    \ between the network\n   elements defined herein, a conceptual model of operations,\
    \ and an\n   outline of the related problems addressed by the P2PSIP working\n\
    \   group, the REsource LOcation And Discovery (RELOAD) protocol, and the\n  \
    \ SIP usage document defined by the working group.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7890.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Background  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  High-Level Description  . . . . . . . . . . . . . . .\
    \ . . . .   4\n     2.1.  Services  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n     2.2.  Clients . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n     2.3.  Relationship between P2PSIP and RELOAD  . . . . . . . .\
    \ .   5\n     2.4.  Relationship between P2PSIP and SIP . . . . . . . . . . .\
    \   5\n     2.5.  Relationship between P2PSIP and Other AoR-Dereferencing\n  \
    \         Approaches  . . . . . . . . . . . . . . . . . . . . . . .   6\n    \
    \ 2.6.  NAT Issues  . . . . . . . . . . . . . . . . . . . . . . .   6\n   3. \
    \ Reference Model . . . . . . . . . . . . . . . . . . . . . . .   6\n   4.  Definitions\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .   8\n   5.  Discussion  .\
    \ . . . . . . . . . . . . . . . . . . . . . . . .  12\n     5.1.  The Distributed\
    \ Database Function . . . . . . . . . . . .  12\n     5.2.  Using the Distributed\
    \ Database Function . . . . . . . . .  13\n     5.3.  NAT Traversal . . . . .\
    \ . . . . . . . . . . . . . . . . .  14\n     5.4.  Locating and Joining an Overlay\
    \ . . . . . . . . . . . . .  14\n     5.5.  Clients and Connecting Unmodified\
    \ SIP Devices . . . . . .  15\n     5.6.  Architecture  . . . . . . . . . . .\
    \ . . . . . . . . . . .  16\n   6.  Security Considerations . . . . . . . . .\
    \ . . . . . . . . . .  16\n   7.  Informative References  . . . . . . . . . .\
    \ . . . . . . . . .  16\n   Authors' Addresses  . . . . . . . . . . . . . . .\
    \ . . . . . . . .  19\n"
- title: 1.  Background
  contents:
  - "1.  Background\n   One of the fundamental problems in multimedia communication\
    \ between\n   Internet nodes is the rendezvous problem, or discovering the host\
    \ at\n   which a given user can be reached.  In the Session Initiation\n   Protocol\
    \ (SIP) [RFC3261], this problem is expressed as the problem of\n   mapping an\
    \ Address of Record (AoR) for a user into one or more\n   Contact URIs [RFC3986].\
    \  The AoR is a name for the user that is\n   independent of the host or hosts\
    \ where the user can be contacted,\n   while a Contact URI indicates the host\
    \ where the user can be\n   contacted.\n   In the common SIP-using architectures\
    \ that we refer to as\n   \"Conventional SIP\" or \"Client/Server SIP\", there\
    \ is a relatively\n   fixed hierarchy of SIP routing proxies and SIP user agents.\
    \  To\n   deliver a SIP INVITE to the host or hosts at which the user can be\n\
    \   contacted, a SIP UA follows the procedures specified in [RFC3263] to\n   determine\
    \ the IP address of a SIP proxy, and then sends the INVITE to\n   that proxy.\
    \  The proxy will then, in turn, deliver the SIP INVITE to\n   the hosts where\
    \ the user can be contacted.\n   This document gives a high-level description\
    \ of an alternative\n   solution to this problem.  In this alternative solution,\
    \ the\n   relatively fixed hierarchy of Client/Server SIP is replaced by a\n \
    \  peer-to-peer overlay network.  In this peer-to-peer overlay network,\n   the\
    \ various mappings of AoRs to Contact URIs are not centralized at\n   proxy/registrar\
    \ nodes but are instead distributed amongst the peers\n   in the overlay.\n  \
    \ The details of this alternative solution are specified by the RELOAD\n   protocol\
    \ [RFC6940], which defines a mechanism for distribution using\n   a Distributed\
    \ Hash Table (DHT) and specifies the wire protocol,\n   security, and authentication\
    \ mechanisms needed to convey this\n   information.  This DHT protocol was designed\
    \ specifically with the\n   purpose of enabling a distributed SIP registrar in\
    \ mind.  While\n   designing the protocol, other applications were considered,\
    \ and then\n   design decisions were made that allow RELOAD to be used in other\n\
    \   instances where a DHT is desirable, but only when such decisions did\n   not\
    \ add undue complexity to the RELOAD protocol.  The RELOAD SIP\n   document [P2PSIP]\
    \ specifies how RELOAD is used with the SIP protocol\n   to enable a distributed,\
    \ server-less SIP solution.\n"
- title: 2.  High-Level Description
  contents:
  - "2.  High-Level Description\n   A Peer-to-Peer SIP (P2PSIP) Overlay is a collection\
    \ of nodes\n   organized in a peer-to-peer fashion for the purpose of enabling\
    \ real-\n   time communication using the Session Initiation Protocol (SIP).\n\
    \   Collectively, the nodes in the Overlay provide a distributed\n   mechanism\
    \ for mapping names to Overlay locations.  This provides for\n   the mapping of\
    \ Addresses of Record (AoRs) to Contact URIs, thereby\n   providing the \"location\
    \ server\" function of [RFC3261].  An Overlay\n   also provides a transport function\
    \ by which SIP messages can be\n   transported between any two nodes in the Overlay.\n\
    \   A P2PSIP Overlay consists of one or more nodes called \"Peers\".  The\n  \
    \ nodes in the Overlay collectively run a distributed database\n   algorithm.\
    \  This distributed database algorithm allows data to be\n   stored on nodes and\
    \ retrieved in an efficient manner.  It may also\n   ensure that a copy of a data\
    \ item is stored on more than one node, so\n   that the loss of a node does not\
    \ result in the loss of the data item\n   to the Overlay.\n   One use of this\
    \ distributed database is to store the information\n   required to provide the\
    \ mapping between AoRs and Contact URIs for the\n   distributed location function.\
    \  This provides a location function\n   within each Overlay that is an alternative\
    \ to the location functions\n   described in [RFC3263].  However, the model of\
    \ [RFC3263] is used\n   between Overlays.\n"
- title: 2.1.  Services
  contents:
  - "2.1.  Services\n   The nature of peer-to-peer computing is that each peer offers\n\
    \   services to other peers to allow the overlay to collectively provide\n   larger\
    \ functions.  In P2PSIP, Peers offer both distributed storage\n   and distributed\
    \ message-routing services, allowing these functions to\n   be implemented across\
    \ the Overlay.  Additionally, the RELOAD protocol\n   offers a simplistic discovery\
    \ mechanism specific to the Traversal\n   Using Relays around NAT (TURN) [RFC5766]\
    \ protocol used for NAT\n   traversal.  Individual Peers may also offer other\
    \ services as an\n   enhancement to P2PSIP functionality (for example, to support\n\
    \   voicemail) or to support other applications beyond SIP.  To support\n   these\
    \ additional services, Peers may need to store additional\n   information in the\
    \ Overlay.  [RFC7374] describes the mechanism used\n   in P2PSIP for resource\
    \ discovery.\n"
- title: 2.2.  Clients
  contents:
  - "2.2.  Clients\n   An Overlay may or may not also include one or more nodes called\n\
    \   \"Clients\".  Clients are supported in the RELOAD protocol as peers\n   that\
    \ have not joined the Overlay, and therefore do not route messages\n   or store\
    \ information.  Clients access the services of the RELOAD\n   protocol by connecting\
    \ to a Peer that performs operations on the\n   behalf of the Client.  Note that\
    \ in RELOAD, there is no distinct\n   client protocol.  Instead, a Client connects\
    \ using the same protocol,\n   but never joins the Overlay as a Peer.  For more\
    \ information, see\n   [RFC6940].\n   A special Peer may also be a member of the\
    \ P2PSIP Overlay and may\n   present the functionality of one or all of a SIP\
    \ registrar, proxy, or\n   redirect server to conventional SIP devices (i.e.,\
    \ unmodified SIP\n   user agent (UA) or client).  In this way, existing, unmodified\
    \ SIP\n   clients may connect to the P2PSIP network.  Note that in the context\n\
    \   of P2PSIP, the unmodified SIP client is also sometimes referred to as\n  \
    \ a \"client\".  These unmodified SIP devices do not speak the RELOAD\n   protocol,\
    \ and this is a distinct concept from the notion of \"Client\"\n   discussed in\
    \ the previous paragraph.\n"
- title: 2.3.  Relationship between P2PSIP and RELOAD
  contents:
  - "2.3.  Relationship between P2PSIP and RELOAD\n   The RELOAD protocol defined\
    \ by the P2PSIP working group implements a\n   DHT primarily for use by server-less,\
    \ peer-to-peer SIP deployments.\n   However, the RELOAD protocol could be used\
    \ for other applications as\n   well.  As such, a \"P2PSIP\" deployment is generally\
    \ assumed to be a\n   use of RELOAD to implement distributed SIP, but it is possible\
    \ that\n   RELOAD is used as a mechanism to distribute other applications,\n \
    \  completely unrelated to SIP.\n"
- title: 2.4.  Relationship between P2PSIP and SIP
  contents:
  - "2.4.  Relationship between P2PSIP and SIP\n   Since P2PSIP is about peer-to-peer\
    \ networks for real-time\n   communication, it is expected that most Peers and\
    \ Clients will be\n   coupled with SIP entities (although RELOAD may be used for\
    \ other\n   applications than P2PSIP).  For example, one Peer might be coupled\n\
    \   with a SIP UA, another might be coupled with a SIP proxy, while a\n   third\
    \ might be coupled with a SIP-to-PSTN gateway.  For such nodes,\n   the Peer or\
    \ Client portion of the node is logically distinct from the\n   SIP entity portion.\
    \  However, there is no hard requirement that every\n   P2PSIP node (Peer or Client)\
    \ be coupled to a SIP entity.  As an\n   example, additional Peers could be placed\
    \ in the Overlay to provide\n   additional storage or redundancy for the RELOAD\
    \ Overlay, but might\n   not have any direct SIP capabilities.\n"
- title: 2.5.  Relationship between P2PSIP and Other AoR-Dereferencing Approaches
  contents:
  - "2.5.  Relationship between P2PSIP and Other AoR-Dereferencing Approaches\n  \
    \ As noted above, the fundamental task of P2PSIP is to turn an AoR into\n   a\
    \ Contact.  This task might be approached using zero configuration\n   techniques\
    \ such as multicast DNS (mDNS) and DNS Service Discovery\n   (DNS-SD) [RFC6762]\
    \ [RFC6763], Link-Local Multicast Name Resolution\n   [RFC4795], and dynamic DNS\
    \ [RFC2136].\n   These alternatives were discussed in the P2PSIP working group,\
    \ and\n   not pursued as a general solution for a number of reasons related to\n\
    \   scalability, the ability to work in a disconnected state, partition\n   recovery,\
    \ and so on.  However, there does seem to be some continuing\n   interest in the\
    \ possibility of using mDNS and DNS-SD for the\n   bootstrapping of P2PSIP overlays.\n"
- title: 2.6.  NAT Issues
  contents:
  - "2.6.  NAT Issues\n   Network Address Translators (NATs) are impediments to establishing\n\
    \   and maintaining peer-to-peer networks, since NATs hinder direct\n   communication\
    \ between nodes.  Some peer-to-peer network architectures\n   avoid this problem\
    \ by insisting that all nodes exist in the same\n   address space.  However, RELOAD\
    \ provides capabilities that allow\n   nodes to be located in multiple address\
    \ spaces interconnected by\n   NATs, to allow RELOAD messages to traverse NATs,\
    \ and to assist in\n   transmitting application-level messages (for example, SIP\
    \ messages)\n   across NATs.\n"
- title: 3.  Reference Model
  contents:
  - "3.  Reference Model\n   The following diagram shows a P2PSIP Overlay consisting\
    \ of a number\n   of Peers, one Client, and an ordinary SIP UA.  It illustrates\
    \ a\n   typical P2PSIP Overlay but does not limit other compositions or\n   variations;\
    \ for example, Proxy Peer P might also talk to an ordinary\n   SIP proxy as well.\
    \  The figure is not intended to cover all possible\n   architecture variations,\
    \ but simply to show a deployment with many\n   common P2PSIP elements.\n    \
    \                                              --->PSTN\n     +------+    N  \
    \   +------+     +---------+  /\n     |      |    A     |      |     | Gateway\
    \ |-/\n     |  UA  |####T#####|  UA  |#####|   Peer  |########\n     | Peer |\
    \    N     | Peer |     |    G    |       #   RELOAD\n     |  E   |    A     |\
    \  F   |     +---------+       #   P2PSIP\n     |      |    T     |      |   \
    \                    #   Protocol\n     +------+    N     +------+           \
    \            #    |\n        #        A                                    # \
    \   |\n      NATNATNATNAT                                    #    |\n        #\
    \                                             #    |   \\__/\n      NATNATNATNAT\
    \                              +-------+  v   /  \\\n        #        N      \
    \                        |       |#####/ UA \\\n     +------+    A       P2PSIP\
    \ Overlay         | Peer  |    /Client\\\n     |      |    T                 \
    \             |   Q   |    |___C__|\n     |  UA  |    N                      \
    \        |       |\n     | Peer |    A                              +-------+\n\
    \     |  D   |    T                                    #\n     |      |    N \
    \                                   #\n     +------+    A                    \
    \                # RELOAD\n        #        T                                \
    \    # P2PSIP\n        #        N    +-------+        +-------+      # Protocol\n\
    \        #        A    |       |        |       |      #\n        #########T####|\
    \ Proxy |########| Redir |#######\n                 N    | Peer  |        | Peer\
    \  |\n                 A    |   P   |        |   R   |\n                 T   \
    \ +-------+        +-------+\n                        |                 /\n  \
    \                      | SIP            /\n                  \\__/  /        \
    \       /\n                   /\\  / ______________/ SIP\n                  /\
    \  \\/ /\n                 / UA \\/\n                /______\\\n             \
    \   SIP UA A\n                 Figure 1: P2PSIP Overlay Reference Model\n   Here,\
    \ the large perimeter depicted by \"#\" represents a stylized view\n   of the\
    \ Overlay (the actual connections could be a mesh, a ring, or\n   some other structure).\
    \  Around the periphery of the Overlay\n   rectangle, we have a number of Peers.\
    \  Each Peer is labeled with its\n   coupled SIP entity -- for example, \"Proxy\
    \ Peer P\" means that Peer P\n   is coupled with a SIP proxy.  In some cases,\
    \ a Peer or Client might\n   be coupled with two or more SIP entities.  In this\
    \ diagram, we have a\n   Public Switched Telephone Network (PSTN) gateway coupled\
    \ with Peer\n   \"G\", three Peers (\"D\", \"E\", and \"F\") that are each coupled\
    \ with a UA,\n   a Peer \"P\" that is coupled with a SIP proxy, an ordinary Peer\
    \ \"Q\"\n   with no SIP capabilities, and one Peer \"R\" that is coupled with\
    \ a SIP\n   redirector.  Note that because these are all Peers, each is\n   responsible\
    \ for storing Resource Records and transporting messages\n   around the Overlay.\n\
    \   To the left, two of the Peers (\"D\" and \"E\") are behind network\n   address\
    \ translators (NATs).  These Peers are included in the P2PSIP\n   Overlay, and\
    \ thus participate in storing resource records and routing\n   messages, despite\
    \ being behind the NATs.\n   On the right side, we have a Client \"C\", which\
    \ uses the RELOAD\n   Protocol to communicate with Proxy Peer \"Q\".  The Client\
    \ \"C\" uses\n   RELOAD to obtain information from the Overlay, but has not inserted\n\
    \   itself into the Overlay, and therefore does not participate in\n   routing\
    \ messages or storing information.\n   Below the Overlay, we have a conventional\
    \ SIP UA \"A\" that is not part\n   of the Overlay, either directly as a Peer\
    \ or indirectly as a Client.\n   It does not speak the RELOAD P2PSIP protocol\
    \ and is not participating\n   in the Overlay as a Peer or a Client.  Instead,\
    \ it uses SIP to\n   interact with the Overlay via an adapter Peer or Peers that\n\
    \   communicate with the Overlay using RELOAD.\n   Both the SIP proxy coupled\
    \ with Peer \"P\" and the SIP redirector\n   coupled with Peer \"R\" can serve\
    \ as adapters between ordinary SIP\n   devices and the Overlay.  Each accepts\
    \ standard SIP requests and\n   resolves the next hop by using the P2PSIP protocol\
    \ to interact with\n   the routing knowledge of the Overlay, and then processes\
    \ the SIP\n   requests as appropriate (proxying or redirecting towards the next\n\
    \   hop).  Note that proxy operation is bidirectional -- the proxy may be\n  \
    \ forwarding a request from an ordinary SIP device to the Overlay, or\n   from\
    \ the P2PSIP Overlay to an ordinary SIP device.\n   The PSTN Gateway at Peer \"\
    G\" provides a similar sort of adaptation to\n   and from the PSTN.\n"
- title: 4.  Definitions
  contents:
  - "4.  Definitions\n   This section defines a number of concepts that are key to\n\
    \   understanding the P2PSIP work.\n   Overlay Network:  An overlay network is\
    \ a computer network that is\n      built on top of another network.  Nodes in\
    \ the overlay can be\n      thought of as being connected by virtual or logical\
    \ links, each of\n      which corresponds to a path, perhaps through many physical\
    \ links,\n      in the underlying network.  For example, many peer-to-peer\n \
    \     networks are overlay networks because they run on top of the\n      Internet.\
    \  Dial-up Internet is an overlay upon the telephone\n      network.\n   P2P Network:\
    \  A peer-to-peer (or P2P) computer network is a network\n      that relies primarily\
    \ on the computing power and bandwidth of the\n      participants in the network\
    \ rather than concentrating it in a\n      relatively low number of servers. \
    \ P2P networks are typically used\n      for connecting nodes via largely ad hoc\
    \ connections.  Such\n      networks are useful for many purposes.  Sharing content\
    \ files\n      containing audio, video, data, or anything in digital format is\n\
    \      very common, and real-time data, such as telephony traffic, is\n      also\
    \ exchanged using P2P technology.  A P2P Network may also be\n      called a \"\
    P2P Overlay\", a \"P2P Overlay Network\", or a \"P2P Network\n      Overlay\"\
    , since its organization is not at the physical layer, but\n      is instead \"\
    on top of\" an existing Internet Protocol network.\n   P2PSIP:  A suite of communications\
    \ protocols related to the Session\n      Initiation Protocol (SIP) [RFC3261]\
    \ that enable SIP to use peer-\n      to-peer techniques for resolving the targets\
    \ of SIP requests,\n      providing SIP message transport, and providing other\
    \ SIP-related\n      functions.  At present, these protocols include [RFC6940],\n\
    \      [RFC7363], [RFC7374], [RFC7851] and [P2PSIP].\n   User:  A human that interacts\
    \ with the Overlay through SIP UAs\n      located on Peers and Clients (and perhaps\
    \ in other ways).\n   The following terms are defined here only within the scope\
    \ of P2PSIP.\n   These terms may have conflicting definitions in other bodies\
    \ of\n   literature.  Some draft versions of this document prefixed each term\n\
    \   with \"P2PSIP\" to clarify the term's scope.  This prefixing has been\n  \
    \ eliminated from the text; however, the scoping still applies.\n   Overlay Name:\
    \  A human-friendly name that identifies a specific\n      P2PSIP Overlay.  This\
    \ is in the format of (a portion of) a URI,\n      but may or may not have a related\
    \ record in the DNS.\n   Peer:  A node participating in a P2PSIP Overlay that\
    \ provides storage\n      and transport services to other nodes in that P2PSIP\
    \ Overlay.\n      Each Peer has a unique identifier, known as a Peer-ID, within\
    \ the\n      Overlay.  Each Peer may be coupled to one or more SIP entities.\n\
    \      Within the Overlay, the Peer is capable of performing several\n      different\
    \ operations, including: joining and leaving the Overlay,\n      transporting\
    \ SIP messages within the Overlay, storing information\n      on behalf of the\
    \ Overlay, putting information into the Overlay,\n      and getting information\
    \ from the Overlay.\n   Node-ID:  Information that uniquely identifies each Node\
    \ within a\n      given Overlay.  This value is not human-friendly -- in a DHT\n\
    \      approach, this is a numeric value in the hash space.  These Node-\n   \
    \   IDs are completely independent of the identifier of any user of a\n      user\
    \ agent associated with a Peer.\n   Client:  A node that participates in a P2PSIP\
    \ Overlay but does not\n      store information or forward messages.  A Client\
    \ can also be\n      thought of as a peer that has not joined the Overlay.  Clients\
    \ can\n      store and retrieve information from the Overlay.\n   User Name: \
    \ A human-friendly name for a user.  This name must be\n      unique within the\
    \ Overlay, but may be unique in a wider scope.\n      User Names are formatted\
    \ so that they can be used within a URI\n      (likely a SIP URI), perhaps in\
    \ combination with the Overlay Name.\n   Service:  A capability contributed by\
    \ a Peer to an Overlay or to the\n      members of an Overlay.  Not all Peers\
    \ and Clients will offer the\n      same set of services, and P2PSIP provides\
    \ service discovery\n      mechanisms to locate services.\n   Service Name:  A\
    \ unique, human-friendly name for a service.\n   Resource:  Anything about which\
    \ information can be stored in the\n      Overlay.  Both Users and Services are\
    \ examples of Resources.\n   Resource-ID:  A non-human-friendly value that uniquely\
    \ identifies a\n      resource and that is used as a key for storing and retrieving\
    \ data\n      about the resource.  One way to generate a Resource-ID is by\n \
    \     applying a mapping function to some other unique name (e.g., User\n    \
    \  Name or Service Name) for the resource.  The Resource-ID is used\n      by\
    \ the distributed database algorithm to determine the Peer or\n      Peers that\
    \ are responsible for storing data for the Overlay.\n   Resource Record:  A block\
    \ of data, stored using the distributed\n      database mechanism of the Overlay,\
    \ that includes information\n      relevant to a specific resource.  We presume\
    \ that there may be\n      multiple types of resource records.  Some may hold\
    \ data about\n      Users, and others may hold data about Services, and the working\n\
    \      group may define other types.  The types, usages, and formats of\n    \
    \  the records are a question for future study.\n   Responsible Peer  The Peer\
    \ that is responsible for storing the\n      Resource Record for a Resource. \
    \ In the literature, the term \"Root\n      Peer\" is also used for this concept.\n\
    \   Peer Protocol:  The protocol spoken between P2PSIP Overlay Peers to\n    \
    \  share information and organize the P2PSIP Overlay Network.  In\n      P2PSIP,\
    \ this is implemented using the RELOAD protocol [RFC6940].\n   Client Protocol:\
    \  The protocol spoken between Clients and Peers.  In\n      P2PSIP and RELOAD,\
    \ this is syntactically the same protocol as the\n      Peer Protocol.  The only\
    \ difference is that Clients are not\n      routing messages or routing information,\
    \ and have not (or cannot)\n      insert themselves into the Overlay.\n   Peer\
    \ Protocol Connection / P2PSIP Client Protocol Connection:\n      The Transport\
    \ Layer Security (TLS), Datagram Transport Layer\n      Security (DTLS), TCP,\
    \ UDP, or other transport-layer protocol\n      connection over which the RELOAD\
    \ Peer Protocol messages are\n      transported.\n   Neighbors:  The set of P2PSIP\
    \ Peers that a Peer or Client know of\n      directly and can reach without further\
    \ lookups.\n   Joining Peer:  A node that is attempting to become a Peer in a\n\
    \      particular Overlay.\n   Bootstrap Peer:  A Peer in the Overlay that is\
    \ the first point of\n      contact for a Joining Peer.  It selects the Peer that\
    \ will serve\n      as the Admitting Peer and helps the Joining Peer contact the\n\
    \      Admitting Peer.\n   Admitting Peer:  A Peer in the Overlay that helps the\
    \ Joining Peer\n      join the Overlay.  The choice of the Admitting Peer may\
    \ depend on\n      the Joining Peer (e.g., depend on the Joining Peer's Peer-ID).\n\
    \      For example, the Admitting Peer might be chosen as the Peer which\n   \
    \   is \"closest\" in the logical structure of the Overlay to the future\n   \
    \   position of the Joining Peer.  The selection of the Admitting Peer\n     \
    \ is typically done by the Bootstrap Peer.  It is allowable for the\n      Bootstrap\
    \ Peer to select itself as the Admitting Peer.\n   Bootstrap Server:  A network\
    \ node used by Joining Peers to locate a\n      Bootstrap Peer.  A Bootstrap Server\
    \ may act as a proxy for\n      messages between the Joining Peer and the Bootstrap\
    \ Peer.  The\n      Bootstrap Server itself is typically a stable host with a\
    \ DNS name\n      that is somehow communicated (for example, through configuration,\n\
    \      specification on a web page, or using DHCP) to Peers that want to\n   \
    \   join the Overlay.  A Bootstrap Server is NOT required to be a Peer\n     \
    \ or Client, though it may be if desired.\n   Peer Admission:  The act of admitting\
    \ a node (the \"Joining Peer\")\n      into an Overlay as a Peer.  After the admission\
    \ process is over,\n      the Joining Peer is a fully functional Peer of the Overlay.\n\
    \      During the admission process, the Joining Peer may need to present\n  \
    \    credentials to prove that it has sufficient authority to join the\n     \
    \ Overlay.\n   Resource Record Insertion:  The act of inserting a P2PSIP Resource\n\
    \      Record into the distributed database.  Following insertion, the\n     \
    \ data will be stored at one or more Peers.  The data can be\n      retrieved\
    \ or updated using the Resource-ID as a key.\n"
- title: 5.  Discussion
  contents:
  - '5.  Discussion

    '
- title: 5.1.  The Distributed Database Function
  contents:
  - "5.1.  The Distributed Database Function\n   A P2PSIP Overlay functions as a distributed\
    \ database.  The database\n   serves as a way to store information about Resources.\
    \  A piece of\n   information, called a \"Resource Record\", can be stored by\
    \ and\n   retrieved from the database using a key associated with the Resource\n\
    \   Record called its \"Resource-ID\".  Each Resource must have a unique\n   Resource-ID.\
    \  In addition to uniquely identifying the Resource, the\n   Resource-ID is also\
    \ used by the distributed database algorithm to\n   determine the Peer or Peers\
    \ that store the Resource Record in the\n   Overlay.\n   Users are humans that\
    \ can use the Overlay to do things like making\n   and receiving calls.  Information\
    \ stored in the resource record\n   associated with a user can include things\
    \ like the full name of the\n   user and the location of the UAs that the user\
    \ is using (the user's\n   SIP AoR).  Full details of how this is implemented\
    \ using RELOAD are\n   provided in [P2PSIP].\n   Before information about a user\
    \ can be stored in the Overlay, a user\n   needs a User Name.  The User Name is\
    \ a human-friendly identifier that\n   uniquely identifies the user within the\
    \ Overlay.  In RELOAD, users\n   are issued certificates, which in the case of\
    \ centrally signed\n   certificates, identify the User Name as well as a certain\
    \ number of\n   Resource-IDs where the user may store their information.  For\
    \ more\n   information, see [RFC6940].\n   The P2PSIP suite of protocols also\
    \ standardizes information about how\n   to locate services.  Services represent\
    \ actions that a Peer (and\n   perhaps a Client) can do to benefit other Peers\
    \ and Clients in the\n   Overlay.  Information that might be stored in the resource\
    \ record\n   associated with a service might include the Peers (and perhaps\n\
    \   Clients) offering the service.  Service discovery for P2PSIP is\n   defined\
    \ in [RFC7374].\n   Each service has a human-friendly Service Name that uniquely\n\
    \   identifies the service.  Like User Names, the Service Name is not a\n   Resource-ID,\
    \ rather the Resource-ID is derived from the service name\n   using some function\
    \ defined by the distributed database algorithm\n   used by the Overlay.\n   A\
    \ class of algorithms known as Distributed Hash Tables (DHTs) are one\n   way\
    \ to implement the distributed database.  The RELOAD protocol is\n   extensible\
    \ and allows many different DHTs to be implemented, but\n   specifies a mandatory-to-implement\
    \ DHT in the form of a modified\n   Chord DHT.  For more information, see [Chord].\n"
- title: 5.2.  Using the Distributed Database Function
  contents:
  - "5.2.  Using the Distributed Database Function\n   While there are a number of\
    \ ways the distributed database described\n   in the previous section can be used\
    \ to establish multimedia sessions\n   using SIP, the basic mechanism defined\
    \ in the RELOAD protocol and SIP\n   usage is summarized below.  This is a very\
    \ simplistic overview.  For\n   more detailed information, please see the RELOAD\
    \ protocol [RFC6940].\n   Contact information for a user is stored in the resource\
    \ record for\n   that user.  Assume that a user is using a device, here called\
    \ \"Peer\n   A\", that serves as the contact point for this user.  The user adds\n\
    \   contact information to this resource record, as authorized by the\n   RELOAD\
    \ certificate mechanism.  The resource record itself is stored\n   with Peer Z\
    \ in the network, where Peer Z is chosen by the particular\n   distributed database\
    \ algorithm in use by the Overlay.\n   When the SIP entity coupled with Peer B\
    \ has an INVITE message\n   addressed to this user, it retrieves the resource\
    \ record from Peer Z.\n   It then extracts the contact information for the various\
    \ Peers that\n   are a contact point for the user, including Peer A, and uses\
    \ the\n   Overlay to establish a connection to Peer A, including any\n   appropriate\
    \ NAT traversal (the details of which are not shown).\n   Note that RELOAD is\
    \ used only to establish the connection.  Once the\n   connection is established,\
    \ messages between the Peers are sent using\n   ordinary SIP.\n   This exchange\
    \ is illustrated in the following figure.  The notation\n   \"Store(U@A)\" is\
    \ used to show the distributed database operation of\n   updating the resource\
    \ record for user U with the contract A, and\n   \"Fetch(U)\" illustrates the\
    \ distributed database operation of\n   retrieving the resource record for user\
    \ U.  Note that the messages\n   between the Peers A, B, and Z may actually travel\
    \ via intermediate\n   Peers (not shown) as part of the distributed lookup process\
    \ or so as\n   to traverse intervening NATs.\n         Peer B           Peer Z\
    \           Peer A\n         |                    |                   |\n    \
    \     |                    |         Store(U@A)|\n         |                 \
    \   |<------------------|\n         |                    |Store-Resp(OK)     |\n\
    \         |                    |------------------>|\n         |             \
    \       |                   |\n         |Fetch(U)            |               \
    \    |\n         |------------------->|                   |\n         |     Fetch-Resp(U@A)|\
    \                   |\n         |<-------------------|                   |\n \
    \        |                    |                   |\n          (RELOAD IS USED\
    \ TO ESTABLISH CONNECTION)\n         |                    |                  \
    \ |\n         | SIP INVITE(To:U)   |                   |\n         |--------------------------------------->|\n\
    \         |                    |                   |\n        Figure 2: SIP Exchange\
    \ Using Distributed Database Function\n"
- title: 5.3.  NAT Traversal
  contents:
  - "5.3.  NAT Traversal\n   NAT traversal in P2PSIP using RELOAD treats all Peers\
    \ as equal and\n   establishes a partial mesh of connections between them.  Messages\n\
    \   from one Peer to another are routed along the edges in the mesh of\n   connections\
    \ until they reach their destination.  To make the routing\n   efficient and to\
    \ avoid the use of standard Internet routing\n   protocols, the partial mesh is\
    \ organized in a structured manner.  If\n   the structure is based on any one\
    \ of a number of common DHT\n   algorithms, then the maximum number of hops between\
    \ any two Peers is\n   log N, where N is the number of peers in the overlay. \
    \ Existing\n   connections, along with the Interactive Connectivity Establishment\n\
    \   (ICE) NAT traversal techniques [RFC5245], are used to establish new\n   connections\
    \ between Peers, and also to allow the applications running\n   on Peers to establish\
    \ a connection to communicate with one another.\n"
- title: 5.4.  Locating and Joining an Overlay
  contents:
  - "5.4.  Locating and Joining an Overlay\n   Before a Peer can attempt to join a\
    \ P2PSIP Overlay, it must first\n   obtain a Node-ID, configuration information,\
    \ and optionally a set of\n   credentials.  The Node-ID is an identifier that\
    \ uniquely identifies\n   the Peer within the Overlay, while the credentials show\
    \ that the Peer\n   is allowed to join the Overlay.\n   The P2PSIP WG does not\
    \ impose a particular mechanism for how the\n   Peer-ID and the credentials are\
    \ obtained, but the RELOAD protocol\n   does specify the format for the configuration\
    \ information and how\n   this information may be obtained, along with credentials\
    \ and a\n   Node-ID, from an offline enrollment server.\n   Once the configuration\
    \ information is obtained, RELOAD specifies a\n   mechanism whereby a Peer may\
    \ obtain a multicast-bootstrap address in\n   the configuration file and broadcast\
    \ to this address to attempt\n   locating a Bootstrap Peer.  Additionally, the\
    \ Peer may store previous\n   Peers it has seen and attempt using these as Bootstrap\
    \ Peers, or it\n   may obtain an address for a Bootstrap Peer by some other mechanism.\n\
    \   For more information, see the RELOAD protocol.\n   The job of the Bootstrap\
    \ Peer is simple: refer the Joining Peer to a\n   Peer (called the \"Admitting\
    \ Peer\") that will help the Joining Peer\n   join the network.  The choice of\
    \ the Admitting Peer will often depend\n   on the Joining Peer -- for example,\
    \ the Admitting Peer may be a Peer\n   that will become a neighbor of the Joining\
    \ Peer in the Overlay.  It\n   is possible that the Bootstrap Peer might also\
    \ serve as the Admitting\n   Peer.\n   The Admitting Peer will help the Joining\
    \ Peer learn about other Peers\n   in the Overlay and establish connections to\
    \ them as appropriate.  The\n   Admitting Peer and/or the other Peers in the Overlay\
    \ will also do\n   whatever else is required to help the Joining Peer become a\
    \ fully\n   functional Peer.  The details of how this is done will depend on the\n\
    \   distributed database algorithm used by the Overlay.\n   At various stages\
    \ in this process, the Joining Peer may be asked to\n   present its credentials\
    \ to show that it is authorized to join the\n   Overlay.  Similarly, the various\
    \ Peers contacted may be asked to\n   present their credentials so the Joining\
    \ Peer can verify that it is\n   really joining the Overlay it wants to.\n"
- title: 5.5.  Clients and Connecting Unmodified SIP Devices
  contents:
  - "5.5.  Clients and Connecting Unmodified SIP Devices\n   As mentioned above, in\
    \ RELOAD, from the perspective of the protocol,\n   Clients are simply peers that\
    \ do not store information, do not route\n   messages, and have not inserted themselves\
    \ into the Overlay.  The\n   same protocol is used for the actual message exchanged.\
    \  Note that\n   while the protocol is the same, the Client need not implement\
    \ all the\n   capabilities of a Peer.  If, for example, it never routes messages,\n\
    \   it will not need to be capable of processing such messages or\n   understanding\
    \ a DHT.\n   For SIP devices, another way to realize this functionality is for\
    \ a\n   Peer to behave as a proxy/registrar as specified in [RFC3261].  SIP\n\
    \   devices then use standard SIP mechanisms to add, update, and remove\n   registrations\
    \ and to send SIP messages to Peers and other Clients.\n   The authors here refer\
    \ to these devices simply as a \"SIP UA\", not a\n   \"P2PSIP Client\", to distinguish\
    \ it from the concept described above.\n"
- title: 5.6.  Architecture
  contents:
  - "5.6.  Architecture\n   The architecture adopted by RELOAD to implement P2PSIP\
    \ is shown\n   below.  An application (for example, SIP or another application\
    \ using\n   RELOAD) uses RELOAD to locate other Peers and (optionally) to\n  \
    \ establish connections to those Peers, potentially across NATs.\n   Messages\
    \ may still be exchanged directly between the Peers.  The\n   overall block diagram\
    \ for the architecture is as follows:\n                       __________________________\n\
    \                      |                          |\n                      | \
    \   SIP, other apps...    |\n                      |       ___________________|\n\
    \                      |      |   RELOAD Layer    |\n                      |______|___________________|\n\
    \                      |     Transport Layer      |\n                      |__________________________|\n\
    \              Figure 3: Architecture for Implementing P2PSIP\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This specification is an overview of existing\
    \ specifications and does\n   not introduce any security considerations on its\
    \ own.  Please refer\n   to the security considerations of the respective specifications,\n\
    \   particularly the RELOAD protocol specification ([RFC6940]) for\n   further\
    \ details.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [Chord]    Stoica, I., Morris, R., Liben-Nowell,\
    \ D., Karger, D.,\n              Kaashoek, M., Dabek, F., and H. Balakrishnan,\
    \ \"Chord: A\n              scalable peer-to-peer lookup protocol for internet\n\
    \              applications\", IEEE/ACM Transactions on Networking,\n        \
    \      Volume 11, Issue 1, pp. 17-32,\n              DOI 10.1109/TNET.2002.808407,\
    \ February 2003.\n   [P2PSIP]   Jennings, C., Lowekamp, B., Rescorla, E., Baset,\
    \ S.,\n              Schulzrinne, H., and T. Schmidt, \"A SIP Usage for RELOAD\"\
    ,\n              Work in Progress, draft-ietf-p2psip-sip-21, April 2016.\n   [RFC2136]\
    \  Vixie, P., Ed., Thomson, S., Rekhter, Y., and J. Bound,\n              \"Dynamic\
    \ Updates in the Domain Name System (DNS UPDATE)\",\n              RFC 2136, DOI\
    \ 10.17487/RFC2136, April 1997,\n              <http://www.rfc-editor.org/info/rfc2136>.\n\
    \   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n    \
    \          A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,\
    \ \"SIP: Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,\
    \ June 2002,\n              <http://www.rfc-editor.org/info/rfc3261>.\n   [RFC3263]\
    \  Rosenberg, J. and H. Schulzrinne, \"Session Initiation\n              Protocol\
    \ (SIP): Locating SIP Servers\", RFC 3263,\n              DOI 10.17487/RFC3263,\
    \ June 2002,\n              <http://www.rfc-editor.org/info/rfc3263>.\n   [RFC3986]\
    \  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource\
    \ Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,\
    \ January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC4795]\
    \  Aboba, B., Thaler, D., and L. Esibov, \"Link-local\n              Multicast\
    \ Name Resolution (LLMNR)\", RFC 4795,\n              DOI 10.17487/RFC4795, January\
    \ 2007,\n              <http://www.rfc-editor.org/info/rfc4795>.\n   [RFC5245]\
    \  Rosenberg, J., \"Interactive Connectivity Establishment\n              (ICE):\
    \ A Protocol for Network Address Translator (NAT)\n              Traversal for\
    \ Offer/Answer Protocols\", RFC 5245,\n              DOI 10.17487/RFC5245, April\
    \ 2010,\n              <http://www.rfc-editor.org/info/rfc5245>.\n   [RFC5766]\
    \  Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal Using\n             \
    \ Relays around NAT (TURN): Relay Extensions to Session\n              Traversal\
    \ Utilities for NAT (STUN)\", RFC 5766,\n              DOI 10.17487/RFC5766, April\
    \ 2010,\n              <http://www.rfc-editor.org/info/rfc5766>.\n   [RFC6762]\
    \  Cheshire, S. and M. Krochmal, \"Multicast DNS\", RFC 6762,\n              DOI\
    \ 10.17487/RFC6762, February 2013,\n              <http://www.rfc-editor.org/info/rfc6762>.\n\
    \   [RFC6763]  Cheshire, S. and M. Krochmal, \"DNS-Based Service\n           \
    \   Discovery\", RFC 6763, DOI 10.17487/RFC6763, February 2013,\n            \
    \  <http://www.rfc-editor.org/info/rfc6763>.\n   [RFC6940]  Jennings, C., Lowekamp,\
    \ B., Ed., Rescorla, E., Baset, S.,\n              and H. Schulzrinne, \"REsource\
    \ LOcation And Discovery\n              (RELOAD) Base Protocol\", RFC 6940, DOI\
    \ 10.17487/RFC6940,\n              January 2014, <http://www.rfc-editor.org/info/rfc6940>.\n\
    \   [RFC7363]  Maenpaa, J. and G. Camarillo, \"Self-Tuning Distributed\n     \
    \         Hash Table (DHT) for REsource LOcation And Discovery\n             \
    \ (RELOAD)\", RFC 7363, DOI 10.17487/RFC7363, September 2014,\n              <http://www.rfc-editor.org/info/rfc7363>.\n\
    \   [RFC7374]  Maenpaa, J. and G. Camarillo, \"Service Discovery Usage for\n \
    \             REsource LOcation And Discovery (RELOAD)\", RFC 7374,\n        \
    \      DOI 10.17487/RFC7374, October 2014,\n              <http://www.rfc-editor.org/info/rfc7374>.\n\
    \   [RFC7851]  Song, H., Jiang, X., Even, R., Bryan, D., and Y. Sun,\n       \
    \       \"Peer-to-Peer (P2P) Overlay Diagnostics\", RFC 7851,\n              DOI\
    \ 10.17487/RFC7851, May 2016,\n              <http://www.rfc-editor.org/info/rfc7851>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David A. Bryan\n   Cogent Force, LLC\n   Cedar Park, Texas\n\
    \   United States\n   Email: dbryan@ethernot.org\n   Philip Matthews\n   Nokia\n\
    \   600 March Road\n   Ottawa, Ontario  K2K 2E6\n   Canada\n   Phone: +1 613 784\
    \ 3139\n   Email: philip_matthews@magma.ca\n   Eunsoo Shim\n   Samsung Electronics\
    \ Co., Ltd.\n   San 14, Nongseo-dong, Giheung-gu\n   Yongin-si, Gyeonggi-do  446-712\n\
    \   South Korea\n   Email: eunsooshim@gmail.com\n   Dean Willis\n   Softarmor\
    \ Systems\n   3100 Independence Pkwy #311-164\n   Plano, Texas  75075\n   United\
    \ States\n   Phone: +1 214 504 1987\n   Email: dean.willis@softarmor.com\n   Spencer\
    \ Dawkins\n   Huawei Technologies (USA)\n   Phone: +1 214 755 3870\n   Email:\
    \ spencerdawkins.ietf@gmail.com\n"
