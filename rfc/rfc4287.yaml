- title: __initial_text__
  contents:
  - '                      The Atom Syndication Format

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies Atom, an XML-based Web content and metadata\n\
    \   syndication format.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n           4.2.4. The \"atom:generator\" Element .......................18\n\
    \           4.2.5. The \"atom:icon\" Element ............................19\n\
    \           4.2.6. The \"atom:id\" Element ..............................19\n\
    \           4.2.7. The \"atom:link\" Element ............................21\n\
    \           4.2.8. The \"atom:logo\" Element ............................23\n\
    \           4.2.9. The \"atom:published\" Element .......................23\n\
    \           4.2.10. The \"atom:rights\" Element .........................24\n\
    \           4.2.11. The \"atom:source\" Element .........................24\n\
    \           4.2.12. The \"atom:subtitle\" Element .......................25\n\
    \           4.2.13. The \"atom:summary\" Element ........................25\n\
    \           4.2.14. The \"atom:title\" Element ..........................25\n\
    \           4.2.15. The \"atom:updated\" Element ........................25\n\
    \   5. Securing Atom Documents ........................................26\n  \
    \    5.1. Digital Signatures ........................................26\n    \
    \  5.2. Encryption ................................................27\n      5.3.\
    \ Signing and Encrypting ....................................28\n   6. Extending\
    \ Atom .................................................28\n      6.1. Extensions\
    \ from Non-Atom Vocabularies .....................28\n      6.2. Extensions to\
    \ the Atom Vocabulary .........................28\n      6.3. Processing Foreign\
    \ Markup .................................28\n      6.4. Extension Elements ........................................29\n\
    \           6.4.1. Simple Extension Elements ..........................29\n  \
    \         6.4.2. Structured Extension Elements ......................29\n   7.\
    \ IANA Considerations ............................................30\n      7.1.\
    \ Registry of Link Relations ................................31\n   8. Security\
    \ Considerations ........................................31\n      8.1. HTML and\
    \ XHTML Content ....................................31\n      8.2. URIs ......................................................31\n\
    \      8.3. IRIs ......................................................31\n  \
    \    8.4. Spoofing ..................................................31\n    \
    \  8.5. Encryption and Signing ....................................32\n   9. References\
    \ .....................................................32\n      9.1. Normative\
    \ References ......................................32\n      9.2. Informative\
    \ References ....................................34\n   Appendix A. Contributors\
    \ ..........................................35\n   Appendix B. RELAX NG Compact\
    \ Schema ...............................35\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Atom is an XML-based document format that describes lists\
    \ of related\n   information known as \"feeds\".  Feeds are composed of a number\
    \ of\n   items, known as \"entries\", each with an extensible set of attached\n\
    \   metadata.  For example, each entry has a title.\n   The primary use case that\
    \ Atom addresses is the syndication of Web\n   content such as weblogs and news\
    \ headlines to Web sites as well as\n   directly to user agents.\n"
- title: 1.1.  Examples
  contents:
  - "1.1.  Examples\n   A brief, single-entry Atom Feed Document:\n   <?xml version=\"\
    1.0\" encoding=\"utf-8\"?>\n   <feed xmlns=\"http://www.w3.org/2005/Atom\">\n\
    \     <title>Example Feed</title>\n     <link href=\"http://example.org/\"/>\n\
    \     <updated>2003-12-13T18:30:02Z</updated>\n     <author>\n       <name>John\
    \ Doe</name>\n     </author>\n     <id>urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6</id>\n\
    \     <entry>\n       <title>Atom-Powered Robots Run Amok</title>\n       <link\
    \ href=\"http://example.org/2003/12/13/atom03\"/>\n       <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>\n\
    \       <updated>2003-12-13T18:30:02Z</updated>\n       <summary>Some text.</summary>\n\
    \     </entry>\n   </feed>\n   A more extensive, single-entry Atom Feed Document:\n\
    \   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <feed xmlns=\"http://www.w3.org/2005/Atom\"\
    >\n     <title type=\"text\">dive into mark</title>\n     <subtitle type=\"html\"\
    >\n       A &lt;em&gt;lot&lt;/em&gt; of effort\n       went into making this effortless\n\
    \     </subtitle>\n     <updated>2005-07-31T12:29:29Z</updated>\n     <id>tag:example.org,2003:3</id>\n\
    \     <link rel=\"alternate\" type=\"text/html\"\n      hreflang=\"en\" href=\"\
    http://example.org/\"/>\n     <link rel=\"self\" type=\"application/atom+xml\"\
    \n      href=\"http://example.org/feed.atom\"/>\n     <rights>Copyright (c) 2003,\
    \ Mark Pilgrim</rights>\n     <generator uri=\"http://www.example.com/\" version=\"\
    1.0\">\n       Example Toolkit\n     </generator>\n     <entry>\n       <title>Atom\
    \ draft-07 snapshot</title>\n       <link rel=\"alternate\" type=\"text/html\"\
    \n        href=\"http://example.org/2005/04/02/atom\"/>\n       <link rel=\"enclosure\"\
    \ type=\"audio/mpeg\" length=\"1337\"\n        href=\"http://example.org/audio/ph34r_my_podcast.mp3\"\
    />\n       <id>tag:example.org,2003:3.2397</id>\n       <updated>2005-07-31T12:29:29Z</updated>\n\
    \       <published>2003-12-13T08:29:29-04:00</published>\n       <author>\n  \
    \       <name>Mark Pilgrim</name>\n         <uri>http://example.org/</uri>\n \
    \        <email>f8dy@example.com</email>\n       </author>\n       <contributor>\n\
    \         <name>Sam Ruby</name>\n       </contributor>\n       <contributor>\n\
    \         <name>Joe Gregorio</name>\n       </contributor>\n       <content type=\"\
    xhtml\" xml:lang=\"en\"\n        xml:base=\"http://diveintomark.org/\">\n    \
    \     <div xmlns=\"http://www.w3.org/1999/xhtml\">\n           <p><i>[Update:\
    \ The Atom draft is finished.]</i></p>\n         </div>\n       </content>\n \
    \    </entry>\n   </feed>\n"
- title: 1.2.  Namespace and Version
  contents:
  - "1.2.  Namespace and Version\n   The XML Namespaces URI [W3C.REC-xml-names-19990114]\
    \ for the XML data\n   format described in this specification is:\n   http://www.w3.org/2005/Atom\n\
    \   For convenience, this data format may be referred to as \"Atom 1.0\".\n  \
    \ This specification uses \"Atom\" internally.\n"
- title: 1.3.  Notational Conventions
  contents:
  - "1.3.  Notational Conventions\n   This specification describes conformance in\
    \ terms of two artifacts:\n   Atom Feed Documents and Atom Entry Documents.  Additionally,\
    \ it\n   places some requirements on Atom Processors.\n   This specification uses\
    \ the namespace prefix \"atom:\" for the\n   Namespace URI identified in Section\
    \ 1.2, above.  Note that the choice\n   of namespace prefix is arbitrary and not\
    \ semantically significant.\n   Atom is specified using terms from the XML Infoset\n\
    \   [W3C.REC-xml-infoset-20040204].  However, this specification uses a\n   shorthand\
    \ for two common terms: the phrase \"Information Item\" is\n   omitted when naming\
    \ Element Information Items and Attribute\n   Information Items.  Therefore, when\
    \ this specification uses the term\n   \"element,\" it is referring to an Element\
    \ Information Item in Infoset\n   terms.  Likewise, when it uses the term \"attribute,\"\
    \ it is referring\n   to an Attribute Information Item.\n   Some sections of this\
    \ specification are illustrated with fragments of\n   a non-normative RELAX NG\
    \ Compact schema [RELAX-NG].  However, the\n   text of this specification provides\
    \ the definition of conformance.  A\n   complete schema appears in Appendix B.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in BCP 14, [RFC2119], as\n\
    \   scoped to those conformance targets.\n"
- title: 2.  Atom Documents
  contents:
  - "2.  Atom Documents\n   This specification describes two kinds of Atom Documents:\
    \ Atom Feed\n   Documents and Atom Entry Documents.\n   An Atom Feed Document\
    \ is a representation of an Atom feed, including\n   metadata about the feed,\
    \ and some or all of the entries associated\n   with it.  Its root is the atom:feed\
    \ element.\n   An Atom Entry Document represents exactly one Atom entry, outside\
    \ of\n   the context of an Atom feed.  Its root is the atom:entry element.\n \
    \  namespace atom = \"http://www.w3.org/2005/Atom\"\n   start = atomFeed | atomEntry\n\
    \   Both kinds of Atom Documents are specified in terms of the XML\n   Information\
    \ Set, serialized as XML 1.0 [W3C.REC-xml-20040204] and\n   identified with the\
    \ \"application/atom+xml\" media type.  Atom\n   Documents MUST be well-formed\
    \ XML.  This specification does not\n   define a DTD for Atom Documents, and hence\
    \ does not require them to\n   be valid (in the sense used by XML).\n   Atom allows\
    \ the use of IRIs [RFC3987].  Every URI [RFC3986] is also\n   an IRI, so a URI\
    \ may be used wherever below an IRI is named.  There\n   are two special considerations:\
    \ (1) when an IRI that is not also a\n   URI is given for dereferencing, it MUST\
    \ be mapped to a URI using the\n   steps in Section 3.1 of [RFC3987] and (2) when\
    \ an IRI is serving as\n   an atom:id value, it MUST NOT be so mapped, so that\
    \ the comparison\n   works as described in Section 4.2.6.1.\n   Any element defined\
    \ by this specification MAY have an xml:base\n   attribute [W3C.REC-xmlbase-20010627].\
    \  When xml:base is used in an\n   Atom Document, it serves the function described\
    \ in section 5.1.1 of\n   [RFC3986], establishing the base URI (or IRI) for resolving\
    \ any\n   relative references found within the effective scope of the xml:base\n\
    \   attribute.\n   Any element defined by this specification MAY have an xml:lang\n\
    \   attribute, whose content indicates the natural language for the\n   element\
    \ and its descendents.  The language context is only\n   significant for elements\
    \ and attributes declared to be \"Language-\n   Sensitive\" by this specification.\
    \  Requirements regarding the content\n   and interpretation of xml:lang are specified\
    \ in XML 1.0\n   [W3C.REC-xml-20040204], Section 2.12.\n   atomCommonAttributes\
    \ =\n      attribute xml:base { atomUri }?,\n      attribute xml:lang { atomLanguageTag\
    \ }?,\n      undefinedAttribute*\n   Atom is an extensible format.  See Section\
    \ 6 of this document for a\n   full description of how Atom Documents can be extended.\n\
    \   Atom Processors MAY keep state sourced from Atom Feed Documents and\n   combine\
    \ them with other Atom Feed Documents, in order to facilitate a\n   contiguous\
    \ view of the contents of a feed.  The manner in which Atom\n   Feed Documents\
    \ are combined in order to reconstruct a feed (e.g.,\n   updating entries and\
    \ metadata, dealing with missing entries) is out\n   of the scope of this specification.\n"
- title: 3.  Common Atom Constructs
  contents:
  - "3.  Common Atom Constructs\n   Many of Atom's elements share a few common structures.\
    \  This section\n   defines those structures and their requirements for convenient\n\
    \   reference by the appropriate element definitions.\n   When an element is identified\
    \ as being a particular kind of\n   construct, it inherits the corresponding requirements\
    \ from that\n   construct's definition in this section.\n   Note that there MUST\
    \ NOT be any white space in a Date construct or in\n   any IRI.  Some XML-emitting\
    \ implementations erroneously insert white\n   space around values by default,\
    \ and such implementations will emit\n   invalid Atom Documents.\n"
- title: 3.1.  Text Constructs
  contents:
  - "3.1.  Text Constructs\n   A Text construct contains human-readable text, usually\
    \ in small\n   quantities.  The content of Text constructs is Language-Sensitive.\n\
    \   atomPlainTextConstruct =\n      atomCommonAttributes,\n      attribute type\
    \ { \"text\" | \"html\" }?,\n      text\n   atomXHTMLTextConstruct =\n      atomCommonAttributes,\n\
    \      attribute type { \"xhtml\" },\n      xhtmlDiv\n   atomTextConstruct = atomPlainTextConstruct\
    \ | atomXHTMLTextConstruct\n"
- title: 3.1.1.  The "type" Attribute
  contents:
  - "3.1.1.  The \"type\" Attribute\n   Text constructs MAY have a \"type\" attribute.\
    \  When present, the value\n   MUST be one of \"text\", \"html\", or \"xhtml\"\
    .  If the \"type\" attribute\n   is not provided, Atom Processors MUST behave\
    \ as though it were\n   present with a value of \"text\".  Unlike the atom:content\
    \ element\n   defined in Section 4.1.3, MIME media types [MIMEREG] MUST NOT be\
    \ used\n   as values for the \"type\" attribute on Text constructs.\n"
- title: 3.1.1.1.  Text
  contents:
  - "3.1.1.1.  Text\n   Example atom:title with text content:\n   ...\n   <title type=\"\
    text\">\n     Less: &lt;\n   </title>\n   ...\n   If the value is \"text\", the\
    \ content of the Text construct MUST NOT\n   contain child elements.  Such text\
    \ is intended to be presented to\n   humans in a readable fashion.  Thus, Atom\
    \ Processors MAY collapse\n   white space (including line breaks) and display\
    \ the text using\n   typographic techniques such as justification and proportional\
    \ fonts.\n"
- title: 3.1.1.2.  HTML
  contents:
  - "3.1.1.2.  HTML\n   Example atom:title with HTML content:\n   ...\n   <title type=\"\
    html\">\n     Less: &lt;em> &amp;lt; &lt;/em>\n   </title>\n   ...\n   If the\
    \ value of \"type\" is \"html\", the content of the Text construct\n   MUST NOT\
    \ contain child elements and SHOULD be suitable for handling\n   as HTML [HTML].\
    \  Any markup within MUST be escaped; for example,\n   \"<br>\" as \"&lt;br>\"\
    .  HTML markup within SHOULD be such that it could\n   validly appear directly\
    \ within an HTML <DIV> element, after\n   unescaping.  Atom Processors that display\
    \ such content MAY use that\n   markup to aid in its display.\n"
- title: 3.1.1.3.  XHTML
  contents:
  - "3.1.1.3.  XHTML\n   Example atom:title with XHTML content:\n   ...\n   <title\
    \ type=\"xhtml\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n     <xhtml:div>\n\
    \       Less: <xhtml:em> &lt; </xhtml:em>\n     </xhtml:div>\n   </title>\n  \
    \ ...\n   If the value of \"type\" is \"xhtml\", the content of the Text construct\n\
    \   MUST be a single XHTML div element [XHTML] and SHOULD be suitable for\n  \
    \ handling as XHTML.  The XHTML div element itself MUST NOT be\n   considered\
    \ part of the content.  Atom Processors that display the\n   content MAY use the\
    \ markup to aid in displaying it.  The escaped\n   versions of characters such\
    \ as \"&\" and \">\" represent those\n   characters, not markup.\n   Examples\
    \ of valid XHTML content:\n   ...\n   <summary type=\"xhtml\">\n      <div xmlns=\"\
    http://www.w3.org/1999/xhtml\">\n         This is <b>XHTML</b> content.\n    \
    \  </div>\n   </summary>\n   ...\n   <summary type=\"xhtml\">\n      <xhtml:div\
    \ xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n         This is <xhtml:b>XHTML</xhtml:b>\
    \ content.\n      </xhtml:div>\n   </summary>\n   ...\n   The following example\
    \ assumes that the XHTML namespace has been bound\n   to the \"xh\" prefix earlier\
    \ in the document:\n   ...\n   <summary type=\"xhtml\">\n      <xh:div>\n    \
    \     This is <xh:b>XHTML</xh:b> content.\n      </xh:div>\n   </summary>\n  \
    \ ...\n"
- title: 3.2.  Person Constructs
  contents:
  - "3.2.  Person Constructs\n   A Person construct is an element that describes a\
    \ person,\n   corporation, or similar entity (hereafter, 'person').\n   atomPersonConstruct\
    \ =\n      atomCommonAttributes,\n      (element atom:name { text }\n       &\
    \ element atom:uri { atomUri }?\n       & element atom:email { atomEmailAddress\
    \ }?\n       & extensionElement*)\n   This specification assigns no significance\
    \ to the order of appearance\n   of the child elements in a Person construct.\
    \  Person constructs allow\n   extension Metadata elements (see Section 6.4).\n"
- title: 3.2.1.  The "atom:name" Element
  contents:
  - "3.2.1.  The \"atom:name\" Element\n   The \"atom:name\" element's content conveys\
    \ a human-readable name for\n   the person.  The content of atom:name is Language-Sensitive.\
    \  Person\n   constructs MUST contain exactly one \"atom:name\" element.\n"
- title: 3.2.2.  The "atom:uri" Element
  contents:
  - "3.2.2.  The \"atom:uri\" Element\n   The \"atom:uri\" element's content conveys\
    \ an IRI associated with the\n   person.  Person constructs MAY contain an atom:uri\
    \ element, but MUST\n   NOT contain more than one.  The content of atom:uri in\
    \ a Person\n   construct MUST be an IRI reference [RFC3987].\n"
- title: 3.2.3.  The "atom:email" Element
  contents:
  - "3.2.3.  The \"atom:email\" Element\n   The \"atom:email\" element's content conveys\
    \ an e-mail address\n   associated with the person.  Person constructs MAY contain\
    \ an\n   atom:email element, but MUST NOT contain more than one.  Its content\n\
    \   MUST conform to the \"addr-spec\" production in [RFC2822].\n"
- title: 3.3.  Date Constructs
  contents:
  - "3.3.  Date Constructs\n   A Date construct is an element whose content MUST conform\
    \ to the\n   \"date-time\" production in [RFC3339].  In addition, an uppercase\
    \ \"T\"\n   character MUST be used to separate date and time, and an uppercase\n\
    \   \"Z\" character MUST be present in the absence of a numeric time zone\n  \
    \ offset.\n   atomDateConstruct =\n      atomCommonAttributes,\n      xsd:dateTime\n\
    \   Such date values happen to be compatible with the following\n   specifications:\
    \ [ISO.8601.1988], [W3C.NOTE-datetime-19980827], and\n   [W3C.REC-xmlschema-2-20041028].\n\
    \   Example Date constructs:\n   <updated>2003-12-13T18:30:02Z</updated>\n   <updated>2003-12-13T18:30:02.25Z</updated>\n\
    \   <updated>2003-12-13T18:30:02+01:00</updated>\n   <updated>2003-12-13T18:30:02.25+01:00</updated>\n\
    \   Date values SHOULD be as accurate as possible.  For example, it would\n  \
    \ be generally inappropriate for a publishing system to apply the same\n   timestamp\
    \ to several entries that were published during the course of\n   a single day.\n"
- title: 4.  Atom Element Definitions
  contents:
  - '4.  Atom Element Definitions

    '
- title: 4.1.  Container Elements
  contents:
  - '4.1.  Container Elements

    '
- title: 4.1.1.  The "atom:feed" Element
  contents:
  - "4.1.1.  The \"atom:feed\" Element\n   The \"atom:feed\" element is the document\
    \ (i.e., top-level) element of\n   an Atom Feed Document, acting as a container\
    \ for metadata and data\n   associated with the feed.  Its element children consist\
    \ of metadata\n   elements followed by zero or more atom:entry child elements.\n\
    \   atomFeed =\n      element atom:feed {\n         atomCommonAttributes,\n  \
    \       (atomAuthor*\n          & atomCategory*\n          & atomContributor*\n\
    \          & atomGenerator?\n          & atomIcon?\n          & atomId\n     \
    \     & atomLink*\n          & atomLogo?\n          & atomRights?\n          &\
    \ atomSubtitle?\n          & atomTitle\n          & atomUpdated\n          & extensionElement*),\n\
    \         atomEntry*\n      }\n   This specification assigns no significance to\
    \ the order of atom:entry\n   elements within the feed.\n   The following child\
    \ elements are defined by this specification (note\n   that the presence of some\
    \ of these elements is required):\n   o  atom:feed elements MUST contain one or\
    \ more atom:author elements,\n      unless all of the atom:feed element's child\
    \ atom:entry elements\n      contain at least one atom:author element.\n   o \
    \ atom:feed elements MAY contain any number of atom:category\n      elements.\n\
    \   o  atom:feed elements MAY contain any number of atom:contributor\n      elements.\n\
    \   o  atom:feed elements MUST NOT contain more than one atom:generator\n    \
    \  element.\n   o  atom:feed elements MUST NOT contain more than one atom:icon\n\
    \      element.\n   o  atom:feed elements MUST NOT contain more than one atom:logo\n\
    \      element.\n   o  atom:feed elements MUST contain exactly one atom:id element.\n\
    \   o  atom:feed elements SHOULD contain one atom:link element with a rel\n  \
    \    attribute value of \"self\".  This is the preferred URI for\n      retrieving\
    \ Atom Feed Documents representing this Atom feed.\n   o  atom:feed elements MUST\
    \ NOT contain more than one atom:link\n      element with a rel attribute value\
    \ of \"alternate\" that has the\n      same combination of type and hreflang attribute\
    \ values.\n   o  atom:feed elements MAY contain additional atom:link elements\n\
    \      beyond those described above.\n   o  atom:feed elements MUST NOT contain\
    \ more than one atom:rights\n      element.\n   o  atom:feed elements MUST NOT\
    \ contain more than one atom:subtitle\n      element.\n   o  atom:feed elements\
    \ MUST contain exactly one atom:title element.\n   o  atom:feed elements MUST\
    \ contain exactly one atom:updated element.\n   If multiple atom:entry elements\
    \ with the same atom:id value appear in\n   an Atom Feed Document, they represent\
    \ the same entry.  Their\n   atom:updated timestamps SHOULD be different.  If\
    \ an Atom Feed\n   Document contains multiple entries with the same atom:id, Atom\n\
    \   Processors MAY choose to display all of them or some subset of them.\n   One\
    \ typical behavior would be to display only the entry with the\n   latest atom:updated\
    \ timestamp.\n"
- title: 4.1.1.1.  Providing Textual Content
  contents:
  - "4.1.1.1.  Providing Textual Content\n   Experience teaches that feeds that contain\
    \ textual content are in\n   general more useful than those that do not.  Some\
    \ applications (one\n   example is full-text indexers) require a minimum amount\
    \ of text or\n   (X)HTML to function reliably and predictably.  Feed producers\
    \ should\n   be aware of these issues.  It is advisable that each atom:entry\n\
    \   element contain a non-empty atom:title element, a non-empty\n   atom:content\
    \ element when that element is present, and a non-empty\n   atom:summary element\
    \ when the entry contains no atom:content element.\n   However, the absence of\
    \ atom:summary is not an error, and Atom\n   Processors MUST NOT fail to function\
    \ correctly as a consequence of\n   such an absence.\n"
- title: 4.1.2.  The "atom:entry" Element
  contents:
  - "4.1.2.  The \"atom:entry\" Element\n   The \"atom:entry\" element represents\
    \ an individual entry, acting as a\n   container for metadata and data associated\
    \ with the entry.  This\n   element can appear as a child of the atom:feed element,\
    \ or it can\n   appear as the document (i.e., top-level) element of a stand-alone\n\
    \   Atom Entry Document.\n   atomEntry =\n      element atom:entry {\n       \
    \  atomCommonAttributes,\n         (atomAuthor*\n          & atomCategory*\n \
    \         & atomContent?\n          & atomContributor*\n          & atomId\n \
    \         & atomLink*\n          & atomPublished?\n          & atomRights?\n \
    \         & atomSource?\n          & atomSummary?\n          & atomTitle\n   \
    \       & atomUpdated\n          & extensionElement*)\n      }\n   This specification\
    \ assigns no significance to the order of appearance\n   of the child elements\
    \ of atom:entry.\n   The following child elements are defined by this specification\
    \ (note\n   that it requires the presence of some of these elements):\n   o  atom:entry\
    \ elements MUST contain one or more atom:author elements,\n      unless the atom:entry\
    \ contains an atom:source element that\n      contains an atom:author element\
    \ or, in an Atom Feed Document, the\n      atom:feed element contains an atom:author\
    \ element itself.\n   o  atom:entry elements MAY contain any number of atom:category\n\
    \      elements.\n   o  atom:entry elements MUST NOT contain more than one atom:content\n\
    \      element.\n   o  atom:entry elements MAY contain any number of atom:contributor\n\
    \      elements.\n   o  atom:entry elements MUST contain exactly one atom:id element.\n\
    \   o  atom:entry elements that contain no child atom:content element\n      MUST\
    \ contain at least one atom:link element with a rel attribute\n      value of\
    \ \"alternate\".\n   o  atom:entry elements MUST NOT contain more than one atom:link\n\
    \      element with a rel attribute value of \"alternate\" that has the\n    \
    \  same combination of type and hreflang attribute values.\n   o  atom:entry elements\
    \ MAY contain additional atom:link elements\n      beyond those described above.\n\
    \   o  atom:entry elements MUST NOT contain more than one atom:published\n   \
    \   element.\n   o  atom:entry elements MUST NOT contain more than one atom:rights\n\
    \      element.\n   o  atom:entry elements MUST NOT contain more than one atom:source\n\
    \      element.\n   o  atom:entry elements MUST contain an atom:summary element\
    \ in either\n      of the following cases:\n      *  the atom:entry contains an\
    \ atom:content that has a \"src\"\n         attribute (and is thus empty).\n \
    \     *  the atom:entry contains content that is encoded in Base64;\n        \
    \ i.e., the \"type\" attribute of atom:content is a MIME media type\n        \
    \ [MIMEREG], but is not an XML media type [RFC3023], does not\n         begin\
    \ with \"text/\", and does not end with \"/xml\" or \"+xml\".\n   o  atom:entry\
    \ elements MUST NOT contain more than one atom:summary\n      element.\n   o \
    \ atom:entry elements MUST contain exactly one atom:title element.\n   o  atom:entry\
    \ elements MUST contain exactly one atom:updated element.\n"
- title: 4.1.3.  The "atom:content" Element
  contents:
  - "4.1.3.  The \"atom:content\" Element\n   The \"atom:content\" element either\
    \ contains or links to the content of\n   the entry.  The content of atom:content\
    \ is Language-Sensitive.\n   atomInlineTextContent =\n      element atom:content\
    \ {\n         atomCommonAttributes,\n         attribute type { \"text\" | \"html\"\
    \ }?,\n         (text)*\n      }\n   atomInlineXHTMLContent =\n      element atom:content\
    \ {\n         atomCommonAttributes,\n         attribute type { \"xhtml\" },\n\
    \         xhtmlDiv\n      }\n   atomInlineOtherContent =\n      element atom:content\
    \ {\n         atomCommonAttributes,\n         attribute type { atomMediaType }?,\n\
    \         (text|anyElement)*\n      }\n   atomOutOfLineContent =\n      element\
    \ atom:content {\n         atomCommonAttributes,\n         attribute type { atomMediaType\
    \ }?,\n         attribute src { atomUri },\n         empty\n      }\n   atomContent\
    \ = atomInlineTextContent\n    | atomInlineXHTMLContent\n    | atomInlineOtherContent\n\
    \    | atomOutOfLineContent\n"
- title: 4.1.3.1.  The "type" Attribute
  contents:
  - "4.1.3.1.  The \"type\" Attribute\n   On the atom:content element, the value of\
    \ the \"type\" attribute MAY be\n   one of \"text\", \"html\", or \"xhtml\". \
    \ Failing that, it MUST conform to\n   the syntax of a MIME media type, but MUST\
    \ NOT be a composite type\n   (see Section 4.2.6 of [MIMEREG]).  If neither the\
    \ type attribute nor\n   the src attribute is provided, Atom Processors MUST behave\
    \ as though\n   the type attribute were present with a value of \"text\".\n"
- title: 4.1.3.2.  The "src" Attribute
  contents:
  - "4.1.3.2.  The \"src\" Attribute\n   atom:content MAY have a \"src\" attribute,\
    \ whose value MUST be an IRI\n   reference [RFC3987].  If the \"src\" attribute\
    \ is present, atom:content\n   MUST be empty.  Atom Processors MAY use the IRI\
    \ to retrieve the\n   content and MAY choose to ignore remote content or to present\
    \ it in a\n   different manner than local content.\n   If the \"src\" attribute\
    \ is present, the \"type\" attribute SHOULD be\n   provided and MUST be a MIME\
    \ media type [MIMEREG], rather than \"text\",\n   \"html\", or \"xhtml\".  The\
    \ value is advisory; that is to say, when the\n   corresponding URI (mapped from\
    \ an IRI, if necessary) is dereferenced,\n   if the server providing that content\
    \ also provides a media type, the\n   server-provided media type is authoritative.\n"
- title: 4.1.3.3.  Processing Model
  contents:
  - "4.1.3.3.  Processing Model\n   Atom Documents MUST conform to the following rules.\
    \  Atom Processors\n   MUST interpret atom:content according to the first applicable\
    \ rule.\n   1.  If the value of \"type\" is \"text\", the content of atom:content\n\
    \       MUST NOT contain child elements.  Such text is intended to be\n      \
    \ presented to humans in a readable fashion.  Thus, Atom Processors\n       MAY\
    \ collapse white space (including line breaks), and display the\n       text using\
    \ typographic techniques such as justification and\n       proportional fonts.\n\
    \   2.  If the value of \"type\" is \"html\", the content of atom:content\n  \
    \     MUST NOT contain child elements and SHOULD be suitable for\n       handling\
    \ as HTML [HTML].  The HTML markup MUST be escaped; for\n       example, \"<br>\"\
    \ as \"&lt;br>\".  The HTML markup SHOULD be such\n       that it could validly\
    \ appear directly within an HTML <DIV>\n       element.  Atom Processors that\
    \ display the content MAY use the\n       markup to aid in displaying it.\n  \
    \ 3.  If the value of \"type\" is \"xhtml\", the content of atom:content\n   \
    \    MUST be a single XHTML div element [XHTML] and SHOULD be suitable\n     \
    \  for handling as XHTML.  The XHTML div element itself MUST NOT be\n       considered\
    \ part of the content.  Atom Processors that display the\n       content MAY use\
    \ the markup to aid in displaying it.  The escaped\n       versions of characters\
    \ such as \"&\" and \">\" represent those\n       characters, not markup.\n  \
    \ 4.  If the value of \"type\" is an XML media type [RFC3023] or ends\n      \
    \ with \"+xml\" or \"/xml\" (case insensitive), the content of\n       atom:content\
    \ MAY include child elements and SHOULD be suitable\n       for handling as the\
    \ indicated media type.  If the \"src\" attribute\n       is not provided, this\
    \ would normally mean that the \"atom:content\"\n       element would contain\
    \ a single child element that would serve as\n       the root element of the XML\
    \ document of the indicated type.\n   5.  If the value of \"type\" begins with\
    \ \"text/\" (case insensitive),\n       the content of atom:content MUST NOT contain\
    \ child elements.\n   6.  For all other values of \"type\", the content of atom:content\
    \ MUST\n       be a valid Base64 encoding, as described in [RFC3548], section\
    \ 3.\n       When decoded, it SHOULD be suitable for handling as the indicated\n\
    \       media type.  In this case, the characters in the Base64 encoding\n   \
    \    MAY be preceded and followed in the atom:content element by white\n     \
    \  space, and lines are separated by a single newline (U+000A)\n       character.\n"
- title: 4.1.3.4.  Examples
  contents:
  - "4.1.3.4.  Examples\n   XHTML inline:\n   ...\n   <content type=\"xhtml\">\n \
    \     <div xmlns=\"http://www.w3.org/1999/xhtml\">\n         This is <b>XHTML</b>\
    \ content.\n      </div>\n   </content>\n   ...\n   <content type=\"xhtml\">\n\
    \      <xhtml:div xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n         This\
    \ is <xhtml:b>XHTML</xhtml:b> content.\n      </xhtml:div>\n   </content>\n  \
    \ ...\n   The following example assumes that the XHTML namespace has been bound\n\
    \   to the \"xh\" prefix earlier in the document:\n   ...\n   <content type=\"\
    xhtml\">\n      <xh:div>\n         This is <xh:b>XHTML</xh:b> content.\n     \
    \ </xh:div>\n   </content>\n   ...\n"
- title: 4.2.  Metadata Elements
  contents:
  - '4.2.  Metadata Elements

    '
- title: 4.2.1.  The "atom:author" Element
  contents:
  - "4.2.1.  The \"atom:author\" Element\n   The \"atom:author\" element is a Person\
    \ construct that indicates the\n   author of the entry or feed.\n   atomAuthor\
    \ = element atom:author { atomPersonConstruct }\n   If an atom:entry element does\
    \ not contain atom:author elements, then\n   the atom:author elements of the contained\
    \ atom:source element are\n   considered to apply.  In an Atom Feed Document,\
    \ the atom:author\n   elements of the containing atom:feed element are considered\
    \ to apply\n   to the entry if there are no atom:author elements in the locations\n\
    \   described above.\n"
- title: 4.2.2.  The "atom:category" Element
  contents:
  - "4.2.2.  The \"atom:category\" Element\n   The \"atom:category\" element conveys\
    \ information about a category\n   associated with an entry or feed.  This specification\
    \ assigns no\n   meaning to the content (if any) of this element.\n   atomCategory\
    \ =\n      element atom:category {\n         atomCommonAttributes,\n         attribute\
    \ term { text },\n         attribute scheme { atomUri }?,\n         attribute\
    \ label { text }?,\n         undefinedContent\n      }\n"
- title: 4.2.2.1.  The "term" Attribute
  contents:
  - "4.2.2.1.  The \"term\" Attribute\n   The \"term\" attribute is a string that\
    \ identifies the category to\n   which the entry or feed belongs.  Category elements\
    \ MUST have a\n   \"term\" attribute.\n"
- title: 4.2.2.2.  The "scheme" Attribute
  contents:
  - "4.2.2.2.  The \"scheme\" Attribute\n   The \"scheme\" attribute is an IRI that\
    \ identifies a categorization\n   scheme.  Category elements MAY have a \"scheme\"\
    \ attribute.\n"
- title: 4.2.2.3.  The "label" Attribute
  contents:
  - "4.2.2.3.  The \"label\" Attribute\n   The \"label\" attribute provides a human-readable\
    \ label for display in\n   end-user applications.  The content of the \"label\"\
    \ attribute is\n   Language-Sensitive.  Entities such as \"&amp;\" and \"&lt;\"\
    \ represent\n   their corresponding characters (\"&\" and \"<\", respectively),\
    \ not\n   markup.  Category elements MAY have a \"label\" attribute.\n"
- title: 4.2.3.  The "atom:contributor" Element
  contents:
  - "4.2.3.  The \"atom:contributor\" Element\n   The \"atom:contributor\" element\
    \ is a Person construct that indicates a\n   person or other entity who contributed\
    \ to the entry or feed.\n   atomContributor = element atom:contributor { atomPersonConstruct\
    \ }\n"
- title: 4.2.4.  The "atom:generator" Element
  contents:
  - "4.2.4.  The \"atom:generator\" Element\n   The \"atom:generator\" element's content\
    \ identifies the agent used to\n   generate a feed, for debugging and other purposes.\n\
    \   atomGenerator = element atom:generator {\n      atomCommonAttributes,\n  \
    \    attribute uri { atomUri }?,\n      attribute version { text }?,\n      text\n\
    \   }\n   The content of this element, when present, MUST be a string that is\
    \ a\n   human-readable name for the generating agent.  Entities such as\n   \"\
    &amp;\" and \"&lt;\" represent their corresponding characters (\"&\" and\n   \"\
    <\" respectively), not markup.\n   The atom:generator element MAY have a \"uri\"\
    \ attribute whose value\n   MUST be an IRI reference [RFC3987].  When dereferenced,\
    \ the resulting\n   URI (mapped from an IRI, if necessary) SHOULD produce a\n\
    \   representation that is relevant to that agent.\n   The atom:generator element\
    \ MAY have a \"version\" attribute that\n   indicates the version of the generating\
    \ agent.\n"
- title: 4.2.5.  The "atom:icon" Element
  contents:
  - "4.2.5.  The \"atom:icon\" Element\n   The \"atom:icon\" element's content is\
    \ an IRI reference [RFC3987] that\n   identifies an image that provides iconic\
    \ visual identification for a\n   feed.\n   atomIcon = element atom:icon {\n \
    \     atomCommonAttributes,\n      (atomUri)\n   }\n   The image SHOULD have an\
    \ aspect ratio of one (horizontal) to one\n   (vertical) and SHOULD be suitable\
    \ for presentation at a small size.\n"
- title: 4.2.6.  The "atom:id" Element
  contents:
  - "4.2.6.  The \"atom:id\" Element\n   The \"atom:id\" element conveys a permanent,\
    \ universally unique\n   identifier for an entry or feed.\n   atomId = element\
    \ atom:id {\n      atomCommonAttributes,\n      (atomUri)\n   }\n   Its content\
    \ MUST be an IRI, as defined by [RFC3987].  Note that the\n   definition of \"\
    IRI\" excludes relative references.  Though the IRI\n   might use a dereferencable\
    \ scheme, Atom Processors MUST NOT assume it\n   can be dereferenced.\n   When\
    \ an Atom Document is relocated, migrated, syndicated,\n   republished, exported,\
    \ or imported, the content of its atom:id\n   element MUST NOT change.  Put another\
    \ way, an atom:id element\n   pertains to all instantiations of a particular Atom\
    \ entry or feed;\n   revisions retain the same content in their atom:id elements.\
    \  It is\n   suggested that the atom:id element be stored along with the\n   associated\
    \ resource.\n   The content of an atom:id element MUST be created in a way that\n\
    \   assures uniqueness.\n   Because of the risk of confusion between IRIs that\
    \ would be\n   equivalent if they were mapped to URIs and dereferenced, the\n\
    \   following normalization strategy SHOULD be applied when generating\n   atom:id\
    \ elements:\n   o  Provide the scheme in lowercase characters.\n   o  Provide\
    \ the host, if any, in lowercase characters.\n   o  Only perform percent-encoding\
    \ where it is essential.\n   o  Use uppercase A through F characters when percent-encoding.\n\
    \   o  Prevent dot-segments from appearing in paths.\n   o  For schemes that define\
    \ a default authority, use an empty\n      authority if the default is desired.\n\
    \   o  For schemes that define an empty path to be equivalent to a path\n    \
    \  of \"/\", use \"/\".\n   o  For schemes that define a port, use an empty port\
    \ if the default\n      is desired.\n   o  Preserve empty fragment identifiers\
    \ and queries.\n   o  Ensure that all components of the IRI are appropriately\
    \ character\n      normalized, e.g., by using NFC or NFKC.\n"
- title: 4.2.6.1.  Comparing atom:id
  contents:
  - "4.2.6.1.  Comparing atom:id\n   Instances of atom:id elements can be compared\
    \ to determine whether an\n   entry or feed is the same as one seen before.  Processors\
    \ MUST\n   compare atom:id elements on a character-by-character basis (in a\n\
    \   case-sensitive fashion).  Comparison operations MUST be based solely\n   on\
    \ the IRI character strings and MUST NOT rely on dereferencing the\n   IRIs or\
    \ URIs mapped from them.\n   As a result, two IRIs that resolve to the same resource\
    \ but are not\n   character-for-character identical will be considered different\
    \ for\n   the purposes of identifier comparison.\n   For example, these are four\
    \ distinct identifiers, despite the fact\n   that they differ only in case:\n\
    \      http://www.example.org/thing\n      http://www.example.org/Thing\n    \
    \  http://www.EXAMPLE.org/thing\n      HTTP://www.example.org/thing\n   Likewise,\
    \ these are three distinct identifiers, because IRI\n   %-escaping is significant\
    \ for the purposes of comparison:\n      http://www.example.com/~bob\n      http://www.example.com/%7ebob\n\
    \      http://www.example.com/%7Ebob\n"
- title: 4.2.7.  The "atom:link" Element
  contents:
  - "4.2.7.  The \"atom:link\" Element\n   The \"atom:link\" element defines a reference\
    \ from an entry or feed to\n   a Web resource.  This specification assigns no\
    \ meaning to the content\n   (if any) of this element.\n   atomLink =\n      element\
    \ atom:link {\n         atomCommonAttributes,\n         attribute href { atomUri\
    \ },\n         attribute rel { atomNCName | atomUri }?,\n         attribute type\
    \ { atomMediaType }?,\n         attribute hreflang { atomLanguageTag }?,\n   \
    \      attribute title { text }?,\n         attribute length { text }?,\n    \
    \     undefinedContent\n      }\n"
- title: 4.2.7.1.  The "href" Attribute
  contents:
  - "4.2.7.1.  The \"href\" Attribute\n   The \"href\" attribute contains the link's\
    \ IRI. atom:link elements MUST\n   have an href attribute, whose value MUST be\
    \ a IRI reference\n   [RFC3987].\n"
- title: 4.2.7.2.  The "rel" Attribute
  contents:
  - "4.2.7.2.  The \"rel\" Attribute\n   atom:link elements MAY have a \"rel\" attribute\
    \ that indicates the link\n   relation type.  If the \"rel\" attribute is not\
    \ present, the link\n   element MUST be interpreted as if the link relation type\
    \ is\n   \"alternate\".\n   The value of \"rel\" MUST be a string that is non-empty\
    \ and matches\n   either the \"isegment-nz-nc\" or the \"IRI\" production in [RFC3987].\n\
    \   Note that use of a relative reference other than a simple name is not\n  \
    \ allowed.  If a name is given, implementations MUST consider the link\n   relation\
    \ type equivalent to the same name registered within the IANA\n   Registry of\
    \ Link Relations (Section 7), and thus to the IRI that\n   would be obtained by\
    \ appending the value of the rel attribute to the\n   string \"http://www.iana.org/assignments/relation/\"\
    .  The value of\n   \"rel\" describes the meaning of the link, but does not impose\
    \ any\n   behavioral requirements on Atom Processors.\n   This document defines\
    \ five initial values for the Registry of Link\n   Relations:\n   1.  The value\
    \ \"alternate\" signifies that the IRI in the value of the\n       href attribute\
    \ identifies an alternate version of the resource\n       described by the containing\
    \ element.\n   2.  The value \"related\" signifies that the IRI in the value of\
    \ the\n       href attribute identifies a resource related to the resource\n \
    \      described by the containing element.  For example, the feed for a\n   \
    \    site that discusses the performance of the search engine at\n       \"http://search.example.com\"\
    \ might contain, as a child of\n       atom:feed:\n       <link rel=\"related\"\
    \ href=\"http://search.example.com/\"/>\n       An identical link might appear\
    \ as a child of any atom:entry whose\n       content contains a discussion of\
    \ that same search engine.\n   3.  The value \"self\" signifies that the IRI in\
    \ the value of the href\n       attribute identifies a resource equivalent to\
    \ the containing\n       element.\n   4.  The value \"enclosure\" signifies that\
    \ the IRI in the value of the\n       href attribute identifies a related resource\
    \ that is potentially\n       large in size and might require special handling.\
    \  For atom:link\n       elements with rel=\"enclosure\", the length attribute\
    \ SHOULD be\n       provided.\n   5.  The value \"via\" signifies that the IRI\
    \ in the value of the href\n       attribute identifies a resource that is the\
    \ source of the\n       information provided in the containing element.\n"
- title: 4.2.7.3.  The "type" Attribute
  contents:
  - "4.2.7.3.  The \"type\" Attribute\n   On the link element, the \"type\" attribute's\
    \ value is an advisory\n   media type: it is a hint about the type of the representation\
    \ that is\n   expected to be returned when the value of the href attribute is\n\
    \   dereferenced.  Note that the type attribute does not override the\n   actual\
    \ media type returned with the representation.  Link elements\n   MAY have a type\
    \ attribute, whose value MUST conform to the syntax of\n   a MIME media type [MIMEREG].\n"
- title: 4.2.7.4.  The "hreflang" Attribute
  contents:
  - "4.2.7.4.  The \"hreflang\" Attribute\n   The \"hreflang\" attribute's content\
    \ describes the language of the\n   resource pointed to by the href attribute.\
    \  When used together with\n   the rel=\"alternate\", it implies a translated\
    \ version of the entry.\n   Link elements MAY have an hreflang attribute, whose\
    \ value MUST be a\n   language tag [RFC3066].\n"
- title: 4.2.7.5.  The "title" Attribute
  contents:
  - "4.2.7.5.  The \"title\" Attribute\n   The \"title\" attribute conveys human-readable\
    \ information about the\n   link.  The content of the \"title\" attribute is Language-Sensitive.\n\
    \   Entities such as \"&amp;\" and \"&lt;\" represent their corresponding\n  \
    \ characters (\"&\" and \"<\", respectively), not markup.  Link elements\n   MAY\
    \ have a title attribute.\n"
- title: 4.2.7.6.  The "length" Attribute
  contents:
  - "4.2.7.6.  The \"length\" Attribute\n   The \"length\" attribute indicates an\
    \ advisory length of the linked\n   content in octets; it is a hint about the\
    \ content length of the\n   representation returned when the IRI in the href attribute\
    \ is mapped\n   to a URI and dereferenced.  Note that the length attribute does\
    \ not\n   override the actual content length of the representation as reported\n\
    \   by the underlying protocol.  Link elements MAY have a length\n   attribute.\n"
- title: 4.2.8.  The "atom:logo" Element
  contents:
  - "4.2.8.  The \"atom:logo\" Element\n   The \"atom:logo\" element's content is\
    \ an IRI reference [RFC3987] that\n   identifies an image that provides visual\
    \ identification for a feed.\n   atomLogo = element atom:logo {\n      atomCommonAttributes,\n\
    \      (atomUri)\n   }\n   The image SHOULD have an aspect ratio of 2 (horizontal)\
    \ to 1\n   (vertical).\n"
- title: 4.2.9.  The "atom:published" Element
  contents:
  - "4.2.9.  The \"atom:published\" Element\n   The \"atom:published\" element is\
    \ a Date construct indicating an\n   instant in time associated with an event\
    \ early in the life cycle of\n   the entry.\n   atomPublished = element atom:published\
    \ { atomDateConstruct }\n   Typically, atom:published will be associated with\
    \ the initial\n   creation or first availability of the resource.\n"
- title: 4.2.10.  The "atom:rights" Element
  contents:
  - "4.2.10.  The \"atom:rights\" Element\n   The \"atom:rights\" element is a Text\
    \ construct that conveys\n   information about rights held in and over an entry\
    \ or feed.\n   atomRights = element atom:rights { atomTextConstruct }\n   The\
    \ atom:rights element SHOULD NOT be used to convey machine-readable\n   licensing\
    \ information.\n   If an atom:entry element does not contain an atom:rights element,\n\
    \   then the atom:rights element of the containing atom:feed element, if\n   present,\
    \ is considered to apply to the entry.\n"
- title: 4.2.11.  The "atom:source" Element
  contents:
  - "4.2.11.  The \"atom:source\" Element\n   If an atom:entry is copied from one\
    \ feed into another feed, then the\n   source atom:feed's metadata (all child\
    \ elements of atom:feed other\n   than the atom:entry elements) MAY be preserved\
    \ within the copied\n   entry by adding an atom:source child element, if it is\
    \ not already\n   present in the entry, and including some or all of the source\
    \ feed's\n   Metadata elements as the atom:source element's children.  Such\n\
    \   metadata SHOULD be preserved if the source atom:feed contains any of\n   the\
    \ child elements atom:author, atom:contributor, atom:rights, or\n   atom:category\
    \ and those child elements are not present in the source\n   atom:entry.\n   atomSource\
    \ =\n      element atom:source {\n         atomCommonAttributes,\n         (atomAuthor*\n\
    \          & atomCategory*\n          & atomContributor*\n          & atomGenerator?\n\
    \          & atomIcon?\n          & atomId?\n          & atomLink*\n         \
    \ & atomLogo?\n          & atomRights?\n          & atomSubtitle?\n          &\
    \ atomTitle?\n          & atomUpdated?\n          & extensionElement*)\n     \
    \ }\n   The atom:source element is designed to allow the aggregation of\n   entries\
    \ from different feeds while retaining information about an\n   entry's source\
    \ feed.  For this reason, Atom Processors that are\n   performing such aggregation\
    \ SHOULD include at least the required\n   feed-level Metadata elements (atom:id,\
    \ atom:title, and atom:updated)\n   in the atom:source element.\n"
- title: 4.2.12.  The "atom:subtitle" Element
  contents:
  - "4.2.12.  The \"atom:subtitle\" Element\n   The \"atom:subtitle\" element is a\
    \ Text construct that conveys a human-\n   readable description or subtitle for\
    \ a feed.\n   atomSubtitle = element atom:subtitle { atomTextConstruct }\n"
- title: 4.2.13.  The "atom:summary" Element
  contents:
  - "4.2.13.  The \"atom:summary\" Element\n   The \"atom:summary\" element is a Text\
    \ construct that conveys a short\n   summary, abstract, or excerpt of an entry.\n\
    \   atomSummary = element atom:summary { atomTextConstruct }\n   It is not advisable\
    \ for the atom:summary element to duplicate\n   atom:title or atom:content because\
    \ Atom Processors might assume there\n   is a useful summary when there is none.\n"
- title: 4.2.14.  The "atom:title" Element
  contents:
  - "4.2.14.  The \"atom:title\" Element\n   The \"atom:title\" element is a Text\
    \ construct that conveys a human-\n   readable title for an entry or feed.\n \
    \  atomTitle = element atom:title { atomTextConstruct }\n"
- title: 4.2.15.  The "atom:updated" Element
  contents:
  - "4.2.15.  The \"atom:updated\" Element\n   The \"atom:updated\" element is a Date\
    \ construct indicating the most\n   recent instant in time when an entry or feed\
    \ was modified in a way\n   the publisher considers significant.  Therefore, not\
    \ all\n   modifications necessarily result in a changed atom:updated value.\n\
    \   atomUpdated = element atom:updated { atomDateConstruct }\n   Publishers MAY\
    \ change the value of this element over time.\n"
- title: 5.  Securing Atom Documents
  contents:
  - "5.  Securing Atom Documents\n   Because Atom is an XML-based format, existing\
    \ XML security mechanisms\n   can be used to secure its content.\n   Producers\
    \ of feeds and/or entries, and intermediaries who aggregate\n   feeds and/or entries,\
    \ may have sound reasons for signing and/or\n   encrypting otherwise-unprotected\
    \ content.  For example, a merchant\n   might digitally sign a message that contains\
    \ a discount coupon for\n   its products.  A bank that uses Atom to deliver customer\
    \ statements\n   is very likely to want to sign and encrypt those messages to\
    \ protect\n   their customers' financial information and to assure the customer\
    \ of\n   their authenticity.  Intermediaries may want to encrypt aggregated\n\
    \   feeds so that a passive observer cannot tell what topics the\n   recipient\
    \ is interested in.  Of course, many other examples exist as\n   well.\n   The\
    \ algorithm requirements in this section pertain to the Atom\n   Processor.  They\
    \ require that a recipient, at a minimum, be able to\n   handle messages that\
    \ use the specified cryptographic algorithms.\n   These requirements do not limit\
    \ the algorithms that the sender can\n   choose.\n"
- title: 5.1.  Digital Signatures
  contents:
  - "5.1.  Digital Signatures\n   The root of an Atom Document (i.e., atom:feed in\
    \ an Atom Feed\n   Document, atom:entry in an Atom Entry Document) or any atom:entry\n\
    \   element MAY have an Enveloped Signature, as described by XML-\n   Signature\
    \ and Syntax Processing [W3C.REC-xmldsig-core-20020212].\n   Atom Processors MUST\
    \ NOT reject an Atom Document containing such a\n   signature because they are\
    \ not capable of verifying it; they MUST\n   continue processing and MAY inform\
    \ the user of their failure to\n   validate the signature.\n   In other words,\
    \ the presence of an element with the namespace URI\n   \"http://www.w3.org/2000/09/xmldsig#\"\
    \ and a local name of \"Signature\"\n   as a child of the document element MUST\
    \ NOT cause an Atom Processor\n   to fail merely because of its presence.\n  \
    \ Other elements in an Atom Document MUST NOT be signed unless their\n   definitions\
    \ explicitly specify such a capability.\n   Section 6.5.1 of [W3C.REC-xmldsig-core-20020212]\
    \ requires support for\n   Canonical XML [W3C.REC-xml-c14n-20010315].  However,\
    \ many\n   implementers do not use it because signed XML documents enclosed in\n\
    \   other XML documents have their signatures broken.  Thus, Atom\n   Processors\
    \ that verify signed Atom Documents MUST be able to\n   canonicalize with the\
    \ exclusive XML canonicalization method\n   identified by the URI \"http://www.w3.org/2001/10/xml-exc-c14n#\"\
    , as\n   specified in Exclusive XML Canonicalization\n   [W3C.REC-xml-exc-c14n-20020718].\n\
    \   Intermediaries such as aggregators may need to add an atom:source\n   element\
    \ to an entry that does not contain its own atom:source\n   element.  If such\
    \ an entry is signed, the addition will break the\n   signature.  Thus, a publisher\
    \ of individually-signed entries should\n   strongly consider adding an atom:source\
    \ element to those entries\n   before signing them.  Implementers should also\
    \ be aware of the issues\n   concerning the use of markup in the \"xml:\" namespace\
    \ as it interacts\n   with canonicalization.\n   Section 4.4.2 of [W3C.REC-xmldsig-core-20020212]\
    \ requires support for\n   DSA signatures and recommends support for RSA signatures.\
    \  However,\n   because of the much greater popularity in the market of RSA versus\n\
    \   DSA, Atom Processors that verify signed Atom Documents MUST be able\n   to\
    \ verify RSA signatures, but do not need be able to verify DSA\n   signatures.\
    \  Due to security issues that can arise if the keying\n   material for message\
    \ authentication code (MAC) authentication is not\n   handled properly, Atom Documents\
    \ SHOULD NOT use MACs for signatures.\n"
- title: 5.2.  Encryption
  contents:
  - "5.2.  Encryption\n   The root of an Atom Document (i.e., atom:feed in an Atom\
    \ Feed\n   Document, atom:entry in an Atom Entry Document) MAY be encrypted,\n\
    \   using the mechanisms described by XML Encryption Syntax and\n   Processing\
    \ [W3C.REC-xmlenc-core-20021210].\n   Section 5.1 of [W3C.REC-xmlenc-core-20021210]\
    \ requires support of\n   TripleDES, AES-128, and AES-256.  Atom Processors that\
    \ decrypt Atom\n   Documents MUST be able to decrypt with AES-128 in Cipher Block\n\
    \   Chaining (CBC) mode.\n   Encryption based on [W3C.REC-xmlenc-core-20021210]\
    \ does not ensure\n   integrity of the original document.  There are known cryptographic\n\
    \   attacks where someone who cannot decrypt a message can still change\n   bits\
    \ in a way where part or all the decrypted message makes sense but\n   has a different\
    \ meaning.  Thus, Atom Processors that decrypt Atom\n   Documents SHOULD check\
    \ the integrity of the decrypted document by\n   verifying the hash in the signature\
    \ (if any) in the document, or by\n   verifying a hash of the document within\
    \ the document (if any).\n"
- title: 5.3.  Signing and Encrypting
  contents:
  - "5.3.  Signing and Encrypting\n   When an Atom Document is to be both signed and\
    \ encrypted, it is\n   generally a good idea to first sign the document, then\
    \ encrypt the\n   signed document.  This provides integrity to the base document\
    \ while\n   encrypting all the information, including the identity of the entity\n\
    \   that signed the document.  Note that, if MACs are used for\n   authentication,\
    \ the order MUST be that the document is signed and\n   then encrypted, and not\
    \ the other way around.\n"
- title: 6.  Extending Atom
  contents:
  - '6.  Extending Atom

    '
- title: 6.1.  Extensions from Non-Atom Vocabularies
  contents:
  - "6.1.  Extensions from Non-Atom Vocabularies\n   This specification describes\
    \ Atom's XML markup vocabulary.  Markup\n   from other vocabularies (\"foreign\
    \ markup\") can be used in an Atom\n   Document.  Note that the atom:content element\
    \ is designed to support\n   the inclusion of arbitrary foreign markup.\n"
- title: 6.2.  Extensions to the Atom Vocabulary
  contents:
  - "6.2.  Extensions to the Atom Vocabulary\n   The Atom namespace is reserved for\
    \ future forward-compatible\n   revisions of Atom.  Future versions of this specification\
    \ could add\n   new elements and attributes to the Atom markup vocabulary.  Software\n\
    \   written to conform to this version of the specification will not be\n   able\
    \ to process such markup correctly and, in fact, will not be able\n   to distinguish\
    \ it from markup error.  For the purposes of this\n   discussion, unrecognized\
    \ markup from the Atom vocabulary will be\n   considered \"foreign markup\".\n"
- title: 6.3.  Processing Foreign Markup
  contents:
  - "6.3.  Processing Foreign Markup\n   Atom Processors that encounter foreign markup\
    \ in a location that is\n   legal according to this specification MUST NOT stop\
    \ processing or\n   signal an error.  It might be the case that the Atom Processor\
    \ is\n   able to process the foreign markup correctly and does so.  Otherwise,\n\
    \   such markup is termed \"unknown foreign markup\".\n   When unknown foreign\
    \ markup is encountered as a child of atom:entry,\n   atom:feed, or a Person construct,\
    \ Atom Processors MAY bypass the\n   markup and any textual content and MUST NOT\
    \ change their behavior as\n   a result of the markup's presence.\n   When unknown\
    \ foreign markup is encountered in a Text Construct or\n   atom:content element,\
    \ software SHOULD ignore the markup and process\n   any text content of foreign\
    \ elements as though the surrounding markup\n   were not present.\n"
- title: 6.4.  Extension Elements
  contents:
  - "6.4.  Extension Elements\n   Atom allows foreign markup anywhere in an Atom document,\
    \ except where\n   it is explicitly forbidden.  Child elements of atom:entry,\
    \ atom:feed,\n   atom:source, and Person constructs are considered Metadata elements\n\
    \   and are described below.  Child elements of Person constructs are\n   considered\
    \ to apply to the construct.  The role of other foreign\n   markup is undefined\
    \ by this specification.\n"
- title: 6.4.1.  Simple Extension Elements
  contents:
  - "6.4.1.  Simple Extension Elements\n   A Simple Extension element MUST NOT have\
    \ any attributes or child\n   elements.  The element MAY contain character data\
    \ or be empty.\n   Simple Extension elements are not Language-Sensitive.\n   simpleExtensionElement\
    \ =\n      element * - atom:* {\n         text\n      }\n   The element can be\
    \ interpreted as a simple property (or name/value\n   pair) of the parent element\
    \ that encloses it.  The pair consisting of\n   the namespace-URI of the element\
    \ and the local name of the element\n   can be interpreted as the name of the\
    \ property.  The character data\n   content of the element can be interpreted\
    \ as the value of the\n   property.  If the element is empty, then the property\
    \ value can be\n   interpreted as an empty string.\n"
- title: 6.4.2.  Structured Extension Elements
  contents:
  - "6.4.2.  Structured Extension Elements\n   The root element of a Structured Extension\
    \ element MUST have at least\n   one attribute or child element.  It MAY have\
    \ attributes, it MAY\n   contain well-formed XML content (including character\
    \ data), or it MAY\n   be empty.  Structured Extension elements are Language-Sensitive.\n\
    \   structuredExtensionElement =\n      element * - atom:* {\n         (attribute\
    \ * { text }+,\n            (text|anyElement)*)\n       | (attribute * { text\
    \ }*,\n          (text?, anyElement+, (text|anyElement)*))\n      }\n   The structure\
    \ of a Structured Extension element, including the order\n   of its child elements,\
    \ could be significant.\n   This specification does not provide an interpretation\
    \ of a Structured\n   Extension element.  The syntax of the XML contained in the\
    \ element\n   (and an interpretation of how the element relates to its containing\n\
    \   element) is defined by the specification of the Atom extension.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   An Atom Document, when serialized as XML 1.0, can\
    \ be identified with\n   the following media type:\n   MIME media type name: \
    \ application\n   MIME subtype name:  atom+xml\n   Mandatory parameters:  None.\n\
    \   Optional parameters:\n      \"charset\":  This parameter has semantics identical\
    \ to the charset\n         parameter of the \"application/xml\" media type as\
    \ specified in\n         [RFC3023].\n   Encoding considerations:  Identical to\
    \ those of \"application/xml\" as\n      described in [RFC3023], Section 3.2.\n\
    \   Security considerations:  As defined in this specification.\n      In addition,\
    \ as this media type uses the \"+xml\" convention, it\n      shares the same security\
    \ considerations as described in [RFC3023],\n      Section 10.\n   Interoperability\
    \ considerations:  There are no known interoperability\n      issues.\n   Published\
    \ specification:  This specification.\n   Applications that use this media type:\
    \  No known applications\n      currently use this media type.\n   Additional\
    \ information:\n   Magic number(s):  As specified for \"application/xml\" in [RFC3023],\n\
    \      Section 3.2.\n   File extension:  .atom\n   Fragment identifiers:  As specified\
    \ for \"application/xml\" in\n      [RFC3023], Section 5.\n   Base URI:  As specified\
    \ in [RFC3023], Section 6.\n   Macintosh File Type code:  TEXT\n   Person and\
    \ email address to contact for further information:  Mark\n      Nottingham <mnot@pobox.com>\n\
    \   Intended usage:  COMMON\n   Author/Change controller:  IESG\n"
- title: 7.1.  Registry of Link Relations
  contents:
  - "7.1.  Registry of Link Relations\n   This registry is maintained by IANA and\
    \ initially contains five\n   values: \"alternate\", \"related\", \"self\", \"\
    enclosure\", and \"via\".  New\n   assignments are subject to IESG Approval, as\
    \ outlined in [RFC2434].\n   Requests should be made by email to IANA, which will\
    \ then forward the\n   request to the IESG, requesting approval.  The request\
    \ should use the\n   following template:\n   o  Attribute Value: (A value for\
    \ the \"rel\" attribute that conforms to\n      the syntax rule given in Section\
    \ 4.2.7.2)\n   o  Description:\n   o  Expected display characteristics:\n   o\
    \  Security considerations:\n"
- title: 8.  Security Considerations
  contents:
  - '8.  Security Considerations

    '
- title: 8.1.  HTML and XHTML Content
  contents:
  - "8.1.  HTML and XHTML Content\n   Text constructs and atom:content allow the delivery\
    \ of HTML and\n   XHTML.  Many elements in these languages are considered 'unsafe'\
    \ in\n   that they open clients to one or more types of attack.  Implementers\n\
    \   of software that processes Atom should carefully consider their\n   handling\
    \ of every type of element when processing incoming (X)HTML in\n   Atom Documents.\
    \  See the security sections of [RFC2854] and [HTML]\n   for guidance.\n   Atom\
    \ Processors should pay particular attention to the security of\n   the IMG, SCRIPT,\
    \ EMBED, OBJECT, FRAME, FRAMESET, IFRAME, META, and\n   LINK elements, but other\
    \ elements might also have negative security\n   properties.\n   (X)HTML can either\
    \ directly contain or indirectly reference\n   executable content.\n"
- title: 8.2.  URIs
  contents:
  - "8.2.  URIs\n   Atom Processors handle URIs.  See Section 7 of [RFC3986].\n"
- title: 8.3.  IRIs
  contents:
  - "8.3.  IRIs\n   Atom Processors handle IRIs.  See Section 8 of [RFC3987].\n"
- title: 8.4.  Spoofing
  contents:
  - "8.4.  Spoofing\n   Atom Processors should be aware of the potential for spoofing\
    \ attacks\n   where the attacker publishes an atom:entry with the atom:id value\
    \ of\n   an entry from another feed, perhaps with a falsified atom:source\n  \
    \ element duplicating the atom:id of the other feed.  For example, an\n   Atom\
    \ Processor could suppress display of duplicate entries by\n   displaying only\
    \ one entry from a set of entries with identical\n   atom:id values.  In that\
    \ situation, the Atom Processor might also\n   take steps to determine whether\
    \ the entries originated from the same\n   publisher before considering them duplicates.\n"
- title: 8.5.  Encryption and Signing
  contents:
  - "8.5.  Encryption and Signing\n   Atom Documents can be encrypted and signed using\n\
    \   [W3C.REC-xmlenc-core-20021210] and [W3C.REC-xmldsig-core-20020212],\n   respectively,\
    \ and are subject to the security considerations implied\n   by their use.\n \
    \  Digital signatures provide authentication, message integrity, and\n   non-repudiation\
    \ with proof of origin.  Encryption provides data\n   confidentiality.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [HTML]     Raggett, D., Hors, A., and I. Jacobs,\
    \ \"HTML 4.01\n              Specification\", W3C REC REC-html401-19991224,\n\
    \              December 1999,\n              <http://www.w3.org/TR/1999/REC-html401-19991224>.\n\
    \   [MIMEREG]  Freed, N. and J. Klensin, \"Media Type Specifications and\n   \
    \           Registration Procedures\", BCP 13, RFC 4288, December 2005.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2822]  Resnick, P., \"Internet\
    \ Message Format\", RFC 2822,\n              April 2001.\n   [RFC2854]  Connolly,\
    \ D. and L. Masinter, \"The 'text/html' Media\n              Type\", RFC 2854,\
    \ June 2000.\n   [RFC3023]  Murata, M., St. Laurent, S., and D. Kohn, \"XML Media\n\
    \              Types\", RFC 3023, January 2001.\n   [RFC3066]  Alvestrand, H.,\
    \ \"Tags for the Identification of\n              Languages\", BCP 47, RFC 3066,\
    \ January 2001.\n   [RFC3339]  Klyne, G. and C. Newman, \"Date and Time on the\
    \ Internet:\n              Timestamps\", RFC 3339, July 2002.\n   [RFC3548]  Josefsson,\
    \ S., \"The Base16, Base32, and Base64 Data\n              Encodings\", RFC 3548,\
    \ July 2003.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"\
    Uniform\n              Resource Identifier (URI): Generic Syntax\", STD 66,\n\
    \              RFC 3986, January 2005.\n   [RFC3987]  Duerst, M. and M. Suignard,\
    \ \"Internationalized Resource\n              Identifiers (IRIs)\", RFC 3987,\
    \ January 2005.\n   [W3C.REC-xml-20040204]\n              Yergeau, F., Paoli,\
    \ J., Sperberg-McQueen, C., Bray, T.,\n              and E. Maler, \"Extensible\
    \ Markup Language (XML) 1.0 (Third\n              Edition)\", W3C REC REC-xml-20040204,\
    \ February 2004,\n              <http://www.w3.org/TR/2004/REC-xml-20040204>.\n\
    \   [W3C.REC-xml-c14n-20010315]\n              Boyer, J., \"Canonical XML Version\
    \ 1.0\", W3C REC REC-xml-\n              c14n-20010315, March 2001,\n        \
    \      <http://www.w3.org/TR/2001/REC-xml-c14n-20010315>.\n   [W3C.REC-xml-exc-c14n-20020718]\n\
    \              Eastlake, D., Boyer, J., and J. Reagle, \"Exclusive XML\n     \
    \         Canonicalization Version 1.0\", W3C REC REC-xml-exc-c14n-\n        \
    \      20020718, July 2002,\n              <http://www.w3.org/TR/2002/REC-xml-exc-c14n-20020718>.\n\
    \   [W3C.REC-xml-infoset-20040204]\n              Cowan, J. and R. Tobin, \"XML\
    \ Information Set (Second\n              Edition)\", W3C REC REC-xml-infoset-20040204,\n\
    \              February 2004,\n              <http://www.w3.org/TR/2004/REC-xml-infoset-20040204>.\n\
    \   [W3C.REC-xml-names-19990114]\n              Hollander, D., Bray, T., and A.\
    \ Layman, \"Namespaces in\n              XML\", W3C REC REC-xml-names-19990114,\
    \ January 1999,\n              <http://www.w3.org/TR/1999/REC-xml-names-19990114>.\n\
    \   [W3C.REC-xmlbase-20010627]\n              Marsh, J., \"XML Base\", W3C REC\
    \ REC-xmlbase-20010627,\n              June 2001,\n              <http://www.w3.org/TR/2001/REC-xmlbase-20010627>.\n\
    \   [W3C.REC-xmldsig-core-20020212]\n              Solo, D., Reagle, J., and D.\
    \ Eastlake, \"XML-Signature\n              Syntax and Processing\", W3C REC REC-xmldsig-core-20020212,\n\
    \              February 2002,\n              <http://www.w3.org/TR/2002/REC-xmldsig-core-20020212>.\n\
    \   [W3C.REC-xmlenc-core-20021210]\n              Reagle, J. and D. Eastlake,\
    \ \"XML Encryption Syntax and\n              Processing\", W3C REC REC-xmlenc-core-20021210,\n\
    \              December 2002,\n              <http://www.w3.org/TR/2002/REC-xmlenc-core-20021210>.\n\
    \   [XHTML]    Altheim, M., Boumphrey, F., McCarron, S., Dooley, S.,\n       \
    \       Schnitzenbaumer, S., and T. Wugofski, \"Modularization of\n          \
    \    XHTML[TM]\", W3C REC REC-xhtml-modularization-20010410,\n              April\
    \ 2001, <http://www.w3.org/TR/2001/\n              REC-xhtml-modularization-20010410>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [ISO.8601.1988]\n              International\
    \ Organization for Standardization, \"Data\n              elements and interchange\
    \ formats - Information interchange\n              - Representation of dates and\
    \ times\", ISO Standard 8601,\n              June 1988.\n   [RELAX-NG] Clark,\
    \ J., \"RELAX NG Compact Syntax\", December 2001,\n              <http://www.oasis-open.org/committees/relax-ng/\n\
    \              compact-20021121.html>.\n   [RFC2434]  Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing an\n              IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 2434,\n              October 1998.\n   [W3C.NOTE-datetime-19980827]\n\
    \              Wolf, M. and C. Wicksteed, \"Date and Time Formats\", W3C\n   \
    \           NOTE NOTE-datetime-19980827, August 1998,\n              <http://www.w3.org/TR/1998/NOTE-datetime-19980827>.\n\
    \   [W3C.REC-xmlschema-2-20041028]\n              Malhotra, A. and P. Biron, \"\
    XML Schema Part 2: Datatypes\n              Second Edition\", W3C REC REC-xmlschema-2-20041028,\n\
    \              October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n"
- title: Appendix A.  Contributors
  contents:
  - "Appendix A.  Contributors\n   The following people contributed to preliminary\
    \ versions of this\n   document: Tim Bray, Mark Pilgrim, and Sam Ruby.  Norman\
    \ Walsh\n   provided the Relax NG schema.  The content and concepts within are\
    \ a\n   product of the Atom community and the Atompub Working Group.\n   The Atompub\
    \ Working Group has dozens of very active contributors who\n   proposed ideas\
    \ and wording for this document, including:\n   Danny Ayers, James Aylett, Roger\
    \ Benningfield, Arve Bersvendsen, Tim\n   Bray, Dan Brickley, Thomas Broyer, Robin\
    \ Cover, Bill de hOra, Martin\n   Duerst, Roy Fielding, Joe Gregorio, Bjoern Hoehrmann,\
    \ Paul Hoffman,\n   Anne van Kesteren, Brett Lindsley, Dare Obasanjo, David Orchard,\n\
    \   Aristotle Pagaltzis, John Panzer, Graham Parks, Dave Pawson, Mark\n   Pilgrim,\
    \ David Powell, Julian Reschke, Phil Ringnalda, Antone Roundy,\n   Sam Ruby, Eric\
    \ Scheid, Brent Simmons, Henri Sivonen, Ray Slakinski,\n   James Snell, Henry\
    \ Story, Asbjorn Ulsberg, Walter Underwood, Norman\n   Walsh, Dave Winer, and\
    \ Bob Wyman.\n"
- title: Appendix B.  RELAX NG Compact Schema
  contents:
  - "Appendix B.  RELAX NG Compact Schema\n   This appendix is informative.\n   The\
    \ Relax NG schema explicitly excludes elements in the Atom\n   namespace that\
    \ are not defined in this revision of the specification.\n   Requirements for\
    \ Atom Processors encountering such markup are given\n   in Sections 6.2 and 6.3.\n\
    \   # -*- rnc -*-\n   # RELAX NG Compact Syntax Grammar for the\n   # Atom Format\
    \ Specification Version 11\n   namespace atom = \"http://www.w3.org/2005/Atom\"\
    \n   namespace xhtml = \"http://www.w3.org/1999/xhtml\"\n   namespace s = \"http://www.ascc.net/xml/schematron\"\
    \n   namespace local = \"\"\n   start = atomFeed | atomEntry\n   # Common attributes\n\
    \   atomCommonAttributes =\n      attribute xml:base { atomUri }?,\n      attribute\
    \ xml:lang { atomLanguageTag }?,\n      undefinedAttribute*\n   # Text Constructs\n\
    \   atomPlainTextConstruct =\n      atomCommonAttributes,\n      attribute type\
    \ { \"text\" | \"html\" }?,\n      text\n   atomXHTMLTextConstruct =\n      atomCommonAttributes,\n\
    \      attribute type { \"xhtml\" },\n      xhtmlDiv\n   atomTextConstruct = atomPlainTextConstruct\
    \ | atomXHTMLTextConstruct\n   # Person Construct\n   atomPersonConstruct =\n\
    \      atomCommonAttributes,\n      (element atom:name { text }\n       & element\
    \ atom:uri { atomUri }?\n       & element atom:email { atomEmailAddress }?\n \
    \      & extensionElement*)\n   # Date Construct\n   atomDateConstruct =\n   \
    \   atomCommonAttributes,\n      xsd:dateTime\n   # atom:feed\n   atomFeed =\n\
    \      [\n         s:rule [\n            context = \"atom:feed\"\n           \
    \ s:assert [\n               test = \"atom:author or not(atom:entry[not(atom:author)])\"\
    \n               \"An atom:feed must have an atom:author unless all \"\n     \
    \          ~ \"of its atom:entry children have an atom:author.\"\n           \
    \ ]\n         ]\n      ]\n      element atom:feed {\n         atomCommonAttributes,\n\
    \         (atomAuthor*\n          & atomCategory*\n          & atomContributor*\n\
    \          & atomGenerator?\n          & atomIcon?\n          & atomId\n     \
    \     & atomLink*\n          & atomLogo?\n          & atomRights?\n          &\
    \ atomSubtitle?\n          & atomTitle\n          & atomUpdated\n          & extensionElement*),\n\
    \         atomEntry*\n      }\n   # atom:entry\n   atomEntry =\n      [\n    \
    \     s:rule [\n            context = \"atom:entry\"\n            s:assert [\n\
    \               test = \"atom:link[@rel='alternate'] \"\n               ~ \"or\
    \ atom:link[not(@rel)] \"\n               ~ \"or atom:content\"\n            \
    \   \"An atom:entry must have at least one atom:link element \"\n            \
    \   ~ \"with a rel attribute of 'alternate' \"\n               ~ \"or an atom:content.\"\
    \n            ]\n         ]\n         s:rule [\n            context = \"atom:entry\"\
    \n            s:assert [\n               test = \"atom:author or \"\n        \
    \       ~ \"../atom:author or atom:source/atom:author\"\n               \"An atom:entry\
    \ must have an atom:author \"\n               ~ \"if its feed does not.\"\n  \
    \          ]\n         ]\n      ]\n      element atom:entry {\n         atomCommonAttributes,\n\
    \         (atomAuthor*\n          & atomCategory*\n          & atomContent?\n\
    \          & atomContributor*\n          & atomId\n          & atomLink*\n   \
    \       & atomPublished?\n          & atomRights?\n          & atomSource?\n \
    \         & atomSummary?\n          & atomTitle\n          & atomUpdated\n   \
    \       & extensionElement*)\n      }\n   # atom:content\n   atomInlineTextContent\
    \ =\n      element atom:content {\n         atomCommonAttributes,\n         attribute\
    \ type { \"text\" | \"html\" }?,\n         (text)*\n      }\n   atomInlineXHTMLContent\
    \ =\n      element atom:content {\n         atomCommonAttributes,\n         attribute\
    \ type { \"xhtml\" },\n         xhtmlDiv\n      }\n   atomInlineOtherContent =\n\
    \      element atom:content {\n         atomCommonAttributes,\n         attribute\
    \ type { atomMediaType }?,\n         (text|anyElement)*\n      }\n   atomOutOfLineContent\
    \ =\n      element atom:content {\n         atomCommonAttributes,\n         attribute\
    \ type { atomMediaType }?,\n         attribute src { atomUri },\n         empty\n\
    \      }\n   atomContent = atomInlineTextContent\n    | atomInlineXHTMLContent\n\
    \    | atomInlineOtherContent\n    | atomOutOfLineContent\n   # atom:author\n\
    \   atomAuthor = element atom:author { atomPersonConstruct }\n   # atom:category\n\
    \   atomCategory =\n      element atom:category {\n         atomCommonAttributes,\n\
    \         attribute term { text },\n         attribute scheme { atomUri }?,\n\
    \         attribute label { text }?,\n         undefinedContent\n      }\n   #\
    \ atom:contributor\n   atomContributor = element atom:contributor { atomPersonConstruct\
    \ }\n   # atom:generator\n   atomGenerator = element atom:generator {\n      atomCommonAttributes,\n\
    \      attribute uri { atomUri }?,\n      attribute version { text }?,\n     \
    \ text\n   }\n   # atom:icon\n   atomIcon = element atom:icon {\n      atomCommonAttributes,\n\
    \      (atomUri)\n   }\n   # atom:id\n   atomId = element atom:id {\n      atomCommonAttributes,\n\
    \      (atomUri)\n   }\n   # atom:logo\n   atomLogo = element atom:logo {\n  \
    \    atomCommonAttributes,\n      (atomUri)\n   }\n   # atom:link\n   atomLink\
    \ =\n      element atom:link {\n         atomCommonAttributes,\n         attribute\
    \ href { atomUri },\n         attribute rel { atomNCName | atomUri }?,\n     \
    \    attribute type { atomMediaType }?,\n         attribute hreflang { atomLanguageTag\
    \ }?,\n         attribute title { text }?,\n         attribute length { text }?,\n\
    \         undefinedContent\n      }\n   # atom:published\n   atomPublished = element\
    \ atom:published { atomDateConstruct }\n   # atom:rights\n   atomRights = element\
    \ atom:rights { atomTextConstruct }\n   # atom:source\n   atomSource =\n     \
    \ element atom:source {\n         atomCommonAttributes,\n         (atomAuthor*\n\
    \          & atomCategory*\n          & atomContributor*\n          & atomGenerator?\n\
    \          & atomIcon?\n          & atomId?\n          & atomLink*\n         \
    \ & atomLogo?\n          & atomRights?\n          & atomSubtitle?\n          &\
    \ atomTitle?\n          & atomUpdated?\n          & extensionElement*)\n     \
    \ }\n   # atom:subtitle\n   atomSubtitle = element atom:subtitle { atomTextConstruct\
    \ }\n   # atom:summary\n   atomSummary = element atom:summary { atomTextConstruct\
    \ }\n   # atom:title\n   atomTitle = element atom:title { atomTextConstruct }\n\
    \   # atom:updated\n   atomUpdated = element atom:updated { atomDateConstruct\
    \ }\n   # Low-level simple types\n   atomNCName = xsd:string { minLength = \"\
    1\" pattern = \"[^:]*\" }\n   # Whatever a media type is, it contains at least\
    \ one slash\n   atomMediaType = xsd:string { pattern = \".+/.+\" }\n   # As defined\
    \ in RFC 3066\n   atomLanguageTag = xsd:string {\n      pattern = \"[A-Za-z]{1,8}(-[A-Za-z0-9]{1,8})*\"\
    \n   }\n   # Unconstrained; it's not entirely clear how IRI fit into\n   # xsd:anyURI\
    \ so let's not try to constrain it here\n   atomUri = text\n   # Whatever an email\
    \ address is, it contains at least one @\n   atomEmailAddress = xsd:string { pattern\
    \ = \".+@.+\" }\n   # Simple Extension\n   simpleExtensionElement =\n      element\
    \ * - atom:* {\n         text\n      }\n   # Structured Extension\n   structuredExtensionElement\
    \ =\n      element * - atom:* {\n         (attribute * { text }+,\n          \
    \  (text|anyElement)*)\n       | (attribute * { text }*,\n          (text?, anyElement+,\
    \ (text|anyElement)*))\n      }\n   # Other Extensibility\n   extensionElement\
    \ =\n      simpleExtensionElement | structuredExtensionElement\n   undefinedAttribute\
    \ =\n     attribute * - (xml:base | xml:lang | local:*) { text }\n   undefinedContent\
    \ = (text|anyForeignElement)*\n   anyElement =\n      element * {\n         (attribute\
    \ * { text }\n          | text\n          | anyElement)*\n      }\n   anyForeignElement\
    \ =\n      element * - atom:* {\n         (attribute * { text }\n          | text\n\
    \          | anyElement)*\n      }\n   # XHTML\n   anyXHTML = element xhtml:*\
    \ {\n      (attribute * { text }\n       | text\n       | anyXHTML)*\n   }\n \
    \  xhtmlDiv = element xhtml:div {\n      (attribute * { text }\n       | text\n\
    \       | anyXHTML)*\n   }\n   # EOF\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark Nottingham (editor)\n   EMail: mnot@pobox.com\n \
    \  URI:   http://www.mnot.net/\n   Robert Sayre (editor)\n   EMail: rfsayre@boswijck.com\n\
    \   URI:   http://boswijck.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
