- contents:
  - '                  The Finger User Information Protocol

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This memo defines a protocol for the exchange of user
    information.\n   This RFC specifies an IAB standards track protocol for the Internet\n
    \  community, and requests discussion and suggestions for improvements.\n   Please
    refer to the current edition of the \"IAB Official Protocol\n   Standards\" for
    the standardization state and status of this protocol.\n   Distribution of this
    memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This memo describes the Finger user information protocol.  This
    is a\n   simple protocol which provides an interface to a remote user\n   information
    program.\n   Based on RFC 742, a description of the original Finger protocol,
    this\n   memo attempts to clarify the expected communication between the two\n
    \  ends of a Finger connection.  It also tries not to invalidate the\n   many
    existing implementations or add unnecessary restrictions to the\n   original protocol
    definition.\n   This edition corrects and clarifies RFC 1196.\n   Table of Contents\n
    \  1.      Introduction  ...........................................   2\n     1.1.
    \   Intent  ...............................................   2\n     1.2.    History
    \ ..............................................   3\n     1.3.    Requirements
    \ .........................................   3\n     1.4.    Updates  ..............................................
    \  3\n   2.      Use of the protocol  ....................................   4\n
    \    2.1.    Flow of events  .......................................   4\n     2.2.
    \   Data format  ..........................................   4\n     2.3.    Query
    specifications  .................................   4\n     2.4.    RUIP {Q2}
    behavior  ...................................   5\n     2.5.    Expected RUIP
    response  ...............................   6\n       2.5.1.  {C} query  ..........................................
    \  6\n       2.5.2.  {U}{C} query  .......................................   6\n
    \      2.5.3.  {U} ambiguity  ......................................   7\n       2.5.4.
    \ /W query token  .....................................   7\n       2.5.5.  Vending
    machines  ...................................   7\n   3.      Security  ...............................................
    \  7\n     3.1.    Implementation security  ..............................   7\n
    \    3.2.    RUIP security  ........................................   8\n       3.2.1.
    \ {Q2} refusal  .......................................   8\n       3.2.2.  {C}
    refusal  ........................................   8\n       3.2.3.  Atomic discharge
    \ ...................................   8\n       3.2.4.  User information files
    \ .............................   9\n       3.2.5.  Execution of user programs
    \ .........................   9\n       3.2.6.  {U} ambiguity  ......................................
    \  9\n       3.2.7.  Audit trails  .......................................   9\n
    \    3.3.    Client security  ......................................   9\n   4.
    \     Examples  ...............................................  10\n     4.1.
    \   Example with a null command line ({C})  ...............  10\n     4.2.    Example
    with name specified ({U}{C})  .................  10\n     4.3.    Example with
    ambiguous name specified ({U}{C})  .......  11\n     4.4.    Example of query
    type {Q2} ({U}{H}{H}{C})  ............  11\n   5.      Acknowledgments  ........................................
    \ 12\n   6.      Security Considerations  ................................  12\n
    \  7.      Author's Address  .......................................  12\n"
  title: Abstract
- contents:
  - '1.  Introduction

    '
  title: 1.  Introduction
- contents:
  - "1.1.  Intent\n   This memo describes the Finger user information protocol.  This
    is a\n   simple protocol which provides an interface to a remote user\n   information
    program (RUIP).\n   Based on RFC 742, a description of the original Finger protocol,
    this\n   memo attempts to clarify the expected communication between the two\n
    \  ends of a Finger connection.  It also tries not to invalidate the\n   many
    current implementations or add unnecessary restrictions to the\n   original protocol
    definition.\n   The most prevalent implementations of Finger today seem to be\n
    \  primarily derived from the BSD UNIX work at the University of\n   California,
    Berkeley.  Thus, this memo is based around the BSD\n   version's behavior.\n   However,
    the BSD version provides few options to tailor the Finger\n   RUIP for a particular
    site's security policy, or to protect the user\n   from dangerous data.  Furthermore,
    there are MANY potential security\n   holes that implementors and administrators
    need to be aware of,\n   particularly since the purpose of this protocol is to
    return\n   information about a system's users, a sensitive issue at best.\n   Therefore,
    this memo makes a number of important security comments\n   and recommendations.\n"
  title: 1.1.  Intent
- contents:
  - "1.2.  History\n   The FINGER program at SAIL, written by Les Earnest, was the\n
    \  inspiration for the NAME program on ITS.  Earl Killian at MIT and\n   Brian
    Harvey at SAIL were jointly responsible for implementing the\n   original protocol.\n
    \  Ken Harrenstien is the author of RFC 742, \"Name/Finger\", which this\n   memo
    began life as.\n"
  title: 1.2.  History
- contents:
  - "1.3.  Requirements\n   In this document, the words that are used to define the
    significance\n   of each particular requirement are capitalized.  These words
    are:\n   * \"MUST\"\n      This word or the adjective \"REQUIRED\" means that
    the item is an\n      absolute requirement of the specification.\n   * \"SHOULD\"\n
    \     This word or the adjective \"RECOMMENDED\" means that there may\n      exist
    valid reasons in particular circumstances to ignore this\n      item, but the
    full implications should be understood and the case\n      carefully weighed before
    choosing a different course.\n   * \"MAY\"\n      This word or the adjective \"OPTIONAL\"
    means that this item is\n      truly optional.  One vendor may choose to include
    the item because\n      a particular marketplace requires it or because it enhances
    the\n      product, for example; another vendor may omit the same item.\n   An
    implementation is not compliant if it fails to satisfy one or more\n   of the
    MUST requirements.  An implementation that satisfies all the\n   MUST and all
    the SHOULD requirements is said to be \"unconditionally\n   compliant\"; one that
    satisfies all the MUST requirements but not all\n   the SHOULD requirements is
    said to be \"conditionally compliant\".\n"
  title: 1.3.  Requirements
- contents:
  - "1.4.  Updates\n   The differences of note between RFC 1196 and this memo are:\n
    \     o the optional /W switch in the Finger query specification was\n        mistakenly
    placed at the end of the line.  The 4.3BSD Finger\n        specifies it at the
    beginning, where this memo now also puts\n        it.\n      o the BNF in the
    Finger query specification was not clear on the\n        treatment of blank space.
    \ This memo is more exacting by\n        including an explicit token for it.\n
    \     o The flow of events in a Finger connection is now better\n        defined
    on the topic of the close of the Finger connection.\n"
  title: 1.4.  Updates
- contents:
  - '2.  Use of the protocol

    '
  title: 2.  Use of the protocol
- contents:
  - "2.1.  Flow of events\n   Finger is based on the Transmission Control Protocol,
    using TCP port\n   79 decimal (117 octal).  The local host opens a TCP connection
    to a\n   remote host on the Finger port.  An RUIP becomes available on the\n   remote
    end of the connection to process the request.  The local host\n   sends the RUIP
    a one line query based upon the Finger query\n   specification, and waits for
    the RUIP to respond.  The RUIP receives\n   and processes the query, returns an
    answer, then initiates the close\n   of the connection.  The local host receives
    the answer and the close\n   signal, then proceeds closing its end of the connection.\n"
  title: 2.1.  Flow of events
- contents:
  - "2.2.  Data format\n   Any data transferred MUST be in ASCII format, with no parity,
    and\n   with lines ending in CRLF (ASCII 13 followed by ASCII 10).  This\n   excludes
    other character formats such as EBCDIC, etc.  This also\n   means that any characters
    between ASCII 128 and ASCII 255 should\n   truly be international data, not 7-bit
    ASCII with the parity bit set.\n"
  title: 2.2.  Data format
- contents:
  - "2.3.  Query specifications\n   An RUIP MUST accept the entire Finger query specification.\n
    \  The Finger query specification is defined:\n        {Q1}    ::= [{W}|{W}{S}{U}]{C}\n
    \       {Q2}    ::= [{W}{S}][{U}]{H}{C}\n        {U}     ::= username\n        {H}
    \    ::= @hostname | @hostname{H}\n        {W}     ::= /W\n        {S}     ::=
    <SP> | <SP>{S}\n        {C}     ::= <CRLF>\n   {H}, being recursive, means that
    there is no arbitrary limit on the\n   number of @hostname tokens in the query.
    \ In examples of the {Q2}\n   request specification, the number of @hostname tokens
    is limited to\n   two, simply for brevity.\n   Be aware that {Q1} and {Q2} do
    not refer to a user typing \"finger\n   user@host\" from an operating system prompt.
    \ It refers to the line\n   that an RUIP actually receives.  So, if a user types
    \"finger\n   user@host<CRLF>\", the RUIP on the remote host receives \"user<CRLF>\",\n
    \  which corresponds to {Q1}.\n   As with anything in the IP protocol suite, \"be
    liberal in what you\n   accept\".\n"
  title: 2.3.  Query specifications
- contents:
  - "2.4.  RUIP {Q2} behavior\n   A query of {Q2} is a request to forward a query
    to another RUIP.  An\n   RUIP MUST either provide or actively refuse this forwarding
    service\n   (see section 3.2.1).  If an RUIP provides this service, it MUST\n
    \  conform to the following behavior:\n   Given that:\n         Host <H1> opens
    a Finger connection <F1-2> to an RUIP on host\n         <H2>.\n         <H1> gives
    the <H2> RUIP a query <Q1-2> of type {Q2}\n         (e.g., FOO@HOST1@HOST2).\n
    \  It should be derived that:\n         Host <H3> is the right-most host in <Q1-2>
    (i.e., HOST2)\n         Query <Q2-3> is the remainder of <Q1-2> after removing
    the\n         right-most \"@hostname\" token in the query (i.e., FOO@HOST1)\n
    \  And so:\n         The <H2> RUIP then must itself open a Finger connection <F2-3>\n
    \        to <H3>, using <Q2-3>.\n         The <H2> RUIP must return any information
    received from <F2-3>\n         to <H1> via <F1-2>.\n         The <H2> RUIP must
    close <F1-2> in normal circumstances only\n         when the <H3> RUIP closes
    <F2-3>.\n"
  title: 2.4.  RUIP {Q2} behavior
- contents:
  - "2.5.  Expected RUIP response\n   For the most part, the output of an RUIP doesn't
    follow a strict\n   specification, since it is designed to be read by people instead
    of\n   programs.  It should mainly strive to be informative.\n   Output of ANY
    query is subject to the discussion in the security\n   section.\n"
  title: 2.5.  Expected RUIP response
- contents:
  - "2.5.1.  {C} query\n   A query of {C} is a request for a list of all online users.
    \ An RUIP\n   MUST either answer or actively refuse (see section 3.2.2).  If it\n
    \  answers, then it MUST provide at least the user's full name.  The\n   system
    administrator SHOULD be allowed to include other useful\n   information (per section
    3.2.3), such as:\n      -    terminal location\n      -    office location\n      -
    \   office phone number\n      -    job name\n      -    idle time (number of
    minutes since last typed input, or\n           since last job activity).\n"
  title: 2.5.1.  {C} query
- contents:
  - "2.5.2.  {U}{C} query\n   A query of {U}{C} is a request for in-depth status of
    a specified\n   user {U}.  If you really want to refuse this service, you probably\n
    \  don't want to be running Finger in the first place.\n   An answer MUST include
    at least the full name of the user.  If the\n   user is logged in, at least the
    same amount of information returned\n   by {C} for that user MUST also be returned
    by {U}{C}.\n   Since this is a query for information on a specific user, the system\n
    \  administrator SHOULD be allowed to choose to return additional useful\n   information
    (per section 3.2.3), such as:\n            -    office location\n            -
    \   office phone number\n            -    home phone number\n            -    status
    of login (not logged in, logout time, etc)\n            -    user information
    file\n   A user information file is a feature wherein a user may leave a short\n
    \  message that will be included in the response to Finger requests.\n   (This
    is sometimes called a \"plan\" file.)  This is easily implemented\n   by (for
    example) having the program look for a specially named text\n   file in the user's
    home directory or some common area; the exact\n   method is left to the implementor.
    \ The system administrator SHOULD\n   be allowed to specifically turn this feature
    on and off.  See section\n   3.2.4 for caveats.\n   There MAY be a way for the
    user to run a program in response to a\n   Finger query.  If this feature exists,
    the system administrator\n   SHOULD be allowed to specifically turn it on and
    off.  See section\n   3.2.5 for caveats.\n"
  title: 2.5.2.  {U}{C} query
- contents:
  - "2.5.3.  {U} ambiguity\n   Allowable \"names\" in the command line MUST include
    \"user names\" or\n   \"login names\" as defined by the system.  If a name is
    ambiguous, the\n   system administrator SHOULD be allowed to choose whether or
    not all\n   possible derivations should be returned in some fashion (per section\n
    \  3.2.6).\n"
  title: 2.5.3.  {U} ambiguity
- contents:
  - "2.5.4.  /W query token\n   The token /W in the {Q1} or {Q2} query types SHOULD
    at best be\n   interpreted at the last RUIP to signify a higher level of verbosity\n
    \  in the user information output, or at worst be ignored.\n"
  title: 2.5.4.  /W query token
- contents:
  - "2.5.5.  Vending machines\n   Vending machines SHOULD respond to a {C} request
    with a list of all\n   items currently available for purchase and possible consumption.\n
    \  Vending machines SHOULD respond to a {U}{C} request with a detailed\n   count
    or list of the particular product or product slot.  Vending\n   machines should
    NEVER NEVER EVER eat money.\n"
  title: 2.5.5.  Vending machines
- contents:
  - '3.  Security

    '
  title: 3.  Security
- contents:
  - "3.1.  Implementation security\n   Sound implementation of Finger is of the utmost
    importance.\n   Implementations should be tested against various forms of attack.
    \ In\n   particular, an RUIP SHOULD protect itself against malformed inputs.\n
    \  Vendors providing Finger with the operating system or network\n   software
    should subject their implementations to penetration testing.\n   Finger is one
    of the avenues for direct penetration, as the Morris\n   worm pointed out quite
    vividly.  Like Telnet, FTP and SMTP, Finger is\n   one of the protocols at the
    security perimeter of a host.\n   Accordingly, the soundness of the implementation
    is paramount.  The\n   implementation should receive just as much security scrutiny
    during\n   design, implementation, and testing as Telnet, FTP, or SMTP.\n"
  title: 3.1.  Implementation security
- contents:
  - "3.2.  RUIP security\n   Warning!!  Finger discloses information about users;
    moreover, such\n   information may be considered sensitive.  Security administrators\n
    \  should make explicit decisions about whether to run Finger and what\n   information
    should be provided in responses.  One existing\n   implementation provides the
    time the user last logged in, the time he\n   last read mail, whether unread mail
    was waiting for him, and who the\n   most recent unread mail was from!  This makes
    it possible to track\n   conversations in progress and see where someone's attention
    was\n   focused.  Sites that are information-security conscious should not\n   run
    Finger without an explicit understanding of how much information\n   it is giving
    away.\n"
  title: 3.2.  RUIP security
- contents:
  - "3.2.1.  {Q2} refusal\n   For individual site security concerns, the system administrator\n
    \  SHOULD be given an option to individually turn on or off RUIP\n   processing
    of {Q2}.  If RUIP processing of {Q2} is turned off, the\n   RUIP MUST return a
    service refusal message of some sort.  \"Finger\n   forwarding service denied\"
    is adequate.  The purpose of this is to\n   allow individual hosts to choose to
    not forward Finger requests, but\n   if they do choose to, to do so consistently.\n
    \  Overall, there are few cases which would warrant processing of {Q2}\n   at
    all, and they are far outweighed by the number of cases for\n   refusing to process
    {Q2}.  In particular, be aware that if a machine\n   is part of security perimeter
    (that is, it is a gateway from the\n   outside world to some set of interior machines),
    then turning {Q2} on\n   provides a path through that security perimeter.  Therefore,
    it is\n   RECOMMENDED that the default of the {Q2} processing option be to\n   refuse
    processing.  It certainly should not be enabled in gateway\n   machines without
    careful consideration of the security implications.\n"
  title: 3.2.1.  {Q2} refusal
- contents:
  - "3.2.2.  {C} refusal\n   For individual site security concerns, the system administrator\n
    \  SHOULD be given an option to individually turn on or off RUIP\n   acceptance
    of {C}.  If RUIP processing of {C} is turned off, the RUIP\n   MUST return a service
    refusal message of some sort.  \"Finger online\n   user list denied\" is adequate.
    \ The purpose of this is to allow\n   individual hosts to choose to not list the
    users currently online.\n"
  title: 3.2.2.  {C} refusal
- contents:
  - "3.2.3.  Atomic discharge\n   All implementations of Finger SHOULD allow individual
    system\n   administrators to tailor what atoms of information are returned to
    a\n   query.  For example:\n      -    Administrator A should be allowed to specifically
    choose to\n           return office location, office phone number, home phone\n
    \          number, and logged in/logout time.\n      -    Administrator B should
    be allowed to specifically choose to\n           return only office location,
    and office phone number.\n      -    Administrator C should be allowed to specifically
    choose to\n           return the minimum amount of required information, which
    is\n           the person's full name.\n"
  title: 3.2.3.  Atomic discharge
- contents:
  - "3.2.4.  User information files\n   Allowing an RUIP to return information out
    of a user-modifiable file\n   should be seen as equivalent to allowing any information
    about your\n   system to be freely distributed.  That is, it is potentially the
    same\n   as turning on all specifiable options.  This information security\n   breach
    can be done in a number of ways, some cleverly, others\n   straightforwardly.
    \ This should disturb the sleep of system\n   administrators who wish to control
    the returned information.\n"
  title: 3.2.4.  User information files
- contents:
  - "3.2.5.  Execution of user programs\n   Allowing an RUIP to run a user program
    in response to a Finger query\n   is potentially dangerous.  BE CAREFUL!! -- the
    RUIP MUST NOT allow\n   system security to be compromised by that program.  Implementing
    this\n   feature may be more trouble than it is worth, since there are always\n
    \  bugs in operating systems, which could be exploited via this type of\n   mechanism.\n"
  title: 3.2.5.  Execution of user programs
- contents:
  - "3.2.6.  {U} ambiguity\n   Be aware that a malicious user's clever and/or persistent
    use of this\n   feature can result in a list of most of the usernames on a system.\n
    \  Refusal of {U} ambiguity should be considered in the same vein as\n   refusal
    of {C} requests (see section 3.2.2).\n"
  title: 3.2.6.  {U} ambiguity
- contents:
  - "3.2.7.  Audit trails\n   Implementations SHOULD allow system administrators to
    log Finger\n   queries.\n"
  title: 3.2.7.  Audit trails
- contents:
  - "3.3.  Client security\n   It is expected that there will normally be some client
    program that\n   the user runs to query the initial RUIP.  By default, this program\n
    \  SHOULD filter any unprintable data, leaving only printable 7-bit\n   characters
    (ASCII 32 through ASCII 126), tabs (ASCII 9), and CRLFs.\n   This is to protect
    against people playing with terminal escape codes,\n   changing other peoples'
    X window names, or committing other dastardly\n   or confusing deeds.  Two separate
    user options SHOULD be considered\n   to modify this behavior, so that users may
    choose to view\n   international or control characters:\n      -    one to allow
    all characters less than ASCII 32\n      -    another to allow all characters
    greater than ASCII 126\n   For environments that live and breathe international
    data, the system\n   administrator SHOULD be given a mechanism to enable the latter
    option\n   by default for all users on a particular system.  This can be done\n
    \  via a global environment variable or similar mechanism.\n"
  title: 3.3.  Client security
- contents:
  - '4.  Examples

    '
  title: 4.  Examples
- contents:
  - '4.1.  Example with a null command line ({C})

    '
  - 'Site: elbereth.rutgers.edu

    '
  - 'Command line: <CRLF>

    '
  - 'Login       Name               TTY Idle    When            Office

    '
  - 'rinehart Mark J. Rinehart      p0  1:11 Mon 12:15  019 Hill       x3166

    '
  - 'greenfie Stephen J. Greenfiel  p1       Mon 15:46  542 Hill       x3074

    '
  - 'rapatel  Rocky - Rakesh Patel  p3    4d Thu 00:58  028 Hill       x2287

    '
  - 'pleasant Mel Pleasant          p4    3d Thu 21:32  019 Hill    908-932-

    '
  - 'dphillip Dave Phillips         p5  021: Sun 18:24  265 Hill       x3792

    '
  - 'dmk      David Katinsky        p6    2d Thu 14:11  028 Hill       x2492

    '
  - 'cherniss Cary Cherniss         p7    5  Mon 15:42  127 Psychol    x2008

    '
  - 'harnaga  Doug Harnaga          p8  2:01 Mon 10:15  055 Hill       x2351

    '
  - 'brisco   Thomas P. Brisco      pe  2:09 Mon 13:37  h055           x2351

    '
  - 'laidlaw  Angus Laidlaw         q0  1:55 Mon 11:26  E313C       648-5592

    '
  - 'cje      Chris Jarocha-Ernst   q1    8  Mon 13:43  259 Hill       x2413

    '
  title: 4.1.  Example with a null command line ({C})
- contents:
  - '4.2.  Example with name specified ({U}{C})

    '
  - 'Site: dimacs.rutgers.edu

    '
  - 'Command line: pirmann<CRLF>

    '
  - 'Login name: pirmann                     In real life: David Pirmann

    '
  - 'Office: 016 Hill, x2443                 Home phone: 989-8482

    '
  - 'Directory: /dimacs/u1/pirmann           Shell: /bin/tcsh

    '
  - 'Last login Sat Jun 23 10:47 on ttyp0 from romulus.rutgers.

    '
  - 'No unread mail

    '
  - 'Project:

    '
  - "Plan:\n                      Work Schedule, Summer 1990\n                 Rutgers
    LCSR Operations, 908-932-2443\n                        Monday       5pm - 12am\n
    \                       Tuesday      5pm - 12am\n                        Wednesday
    \   9am -  5pm\n                        Thursday     9am -  5pm\n                        Saturday
    \    9am -  5pm\n                           larf larf hoo hoo\n"
  title: 4.2.  Example with name specified ({U}{C})
- contents:
  - '4.3.  Example with ambiguous name specified ({U}{C})

    '
  - 'Site: elbereth.rutgers.edu

    '
  - 'Command line: ron<CRLF>

    '
  - 'Login name: spinner                     In real life: Ron Spinner

    '
  - 'Office: Ops Cubby,    x2443             Home phone: 463-7358

    '
  - 'Directory: /u1/spinner                  Shell: /bin/tcsh

    '
  - 'Last login Mon May  7 16:38 on ttyq7

    '
  - "Plan:\n            ught i\n          ca      n\n        m           a\n       '
    \     ...     t\n      I      .   .     i\n             !         m\n      !       !
    \      e\n       p       !pool\n        l\n         e\n          H\n"
  - 'Login name: surak                       In real life: Ron Surak

    '
  - 'Office: 000 OMB Dou,    x9256

    '
  - 'Directory: /u2/surak                    Shell: /bin/tcsh

    '
  - 'Last login Fri Jul 27 09:55 on ttyq3

    '
  - 'No Plan.

    '
  - 'Login name: etter                       In real life: Ron Etter

    '
  - 'Directory: /u2/etter                    Shell: /bin/tcsh

    '
  - 'Never logged in.

    '
  - 'No Plan.

    '
  title: 4.3.  Example with ambiguous name specified ({U}{C})
- contents:
  - '4.4.  Example of query type {Q2} ({U}{H}{H}{C})

    '
  - 'Site: dimacs.rutgers.edu

    '
  - 'Command line: hedrick@math.rutgers.edu@pilot.njin.net<CRLF>

    '
  - '[pilot.njin.net]

    '
  - '[math.rutgers.edu]

    '
  - 'Login name: hedrick                     In real life: Charles Hedrick

    '
  - 'Office: 484 Hill, x3088

    '
  - 'Directory: /math/u2/hedrick             Shell: /bin/tcsh

    '
  - 'Last login Sun Jun 24 00:08 on ttyp1 from monster-gw.rutge

    '
  - 'No unread mail

    '
  - 'No Plan.

    '
  title: 4.4.  Example of query type {Q2} ({U}{H}{H}{C})
- contents:
  - "5.  Acknowledgments\n   Thanks to everyone in the Internet Engineering Task Force
    for their\n   comments.  Special thanks to Steve Crocker for his security\n   recommendations
    and prose.\n"
  title: 5.  Acknowledgments
- contents:
  - "6.  Security Considerations\n   Security issues are discussed in Section 3.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Author's Address\n   David Paul Zimmerman\n   Center for Discrete Mathematics
    and\n   Theoretical Computer Science (DIMACS)\n   Rutgers University\n   P.O.
    Box 1179\n   Piscataway, NJ 08855-1179\n   Phone: (908)932-4592\n   EMail: dpz@dimacs.rutgers.edu\n"
  title: 7.  Author's Address
