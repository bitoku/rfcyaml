Abstract The Incident Object Description Exchange Format (IODEF) defines a data representation for security incident reports and indicators commonly exchanged by operational security teams for mitigation and watch and warning.
This document describes an updated information model for the IODEF and provides an associated data model specified with the XML schema.
This new information and data model obsoletes RFCs 5070 and 6685.
Introduction Organizations require help from other parties to mitigate malicious activity targeting their network and to gain insight into potential threats.
This coordination might entail working with an ISP to filter attack traffic, contacting a remote site to take down a botnet, or sharing watch lists of known malicious indicators in a consortium.
The Incident Object Description Exchange Format (IODEF) is a format for representing computer security information commonly exchanged between Computer Security Incident Response Teams (CSIRTs) or other operational security teams.
It provides an XML representation for conveying:  indicators to characterize a threat;  security incident reports to document attacks against an organization;  response activity taken or that could be taken in response to an incident; and  metadata so that these various classes of information can be exchanged among parties.
The purpose of the IODEF is to enhance the operational capabilities of CSIRTs.
Adoption of the IODEF will improve the ability of a CSIRT to resolve security incidents; understand threats; and coordinate response activities and proactive mitigations by simplifying collaboration and data sharing with its partners.
This structured format provided by the IODEF allows for:  machine to machine exchange of incident and indicator data;  automated processing of this data whereby allowing more rapid execution of appropriate courses of action; and  the development of an ecosystem of interoperable tools enabling security operations.
Sharing and coordinating with other organizations is not strictly a technical problem.
There are numerous procedural, cultural, legal, and trust related barriers to overcome.
The IODEF does not attempt to address them directly.
However, operational implementations of the IODEF will need to consider these challenges.
Section 1 provides the background for the IODEF.
Sections 3 and 8 specify the IODEF information and data model, respectively.
The data types used in this document are described in Section 2.
Processing considerations, extending the specification, internationalization, and security issues are covered in Sections 4, 5, 6, and 9, respectively.
Examples are listed in Section 7. 1.1.
The key words "MUST," "MUST NOT," "REQUIRED," "SHALL," "
SHALL NOT," "SHOULD," "SHOULD NOT,
" "RECOMMENDED," "MAY," and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The IODEF is specified as an Extensible Markup Language (XML)
The normative IODEF data model is found in the XML schema in Section 8.
To aid in the understanding of the data elements, Section 3 also depicts the underlying information model using Unified Modeling Language (UML).
This abstract presentation of the IODEF is not normative.
For clarity in this document, the term "XML document" will be used when referring generically to any instance of an XML document.
The term "IODEF document" will be used to refer to an XML document conforming to the IODEF specification.
The terms "schema" will be used to refer to Section 8 of this document.
The terms "data model" and "schema" will be used interchangeably.
The terms "class" and "element" will be used to reference either the corresponding data element in the UML based information or XML schema based data models, respectively.
About the IODEF Data Model
A number of considerations were made in the design of the IODEF data model.
The data model found in this document is an evolution of the one previously specified in [RFC5070].
New fields were added to represent additional information.
[RFC5070] was developed primarily to represent incident reports.
This document builds upon it by adding support for indicators and revising it to reflect the current challenges faced by CSIRTs.
An attempt was made to preserve backward compatibility, but this was not possible in all cases.
The IODEF is a transport format.
Therefore, the data model may not be the optimal archival or in memory processing format.
The IODEF is intended to be a framework to convey only commonly exchanged information.
It ensures that there are mechanisms for extensibility to support organization specific information and techniques to reference information kept outside of the data model.
Not all commonly exchanged information has a well defined format or taxonomy.
The IODEF attempts to strike a balance between enforcing sufficient structure to allow automated processing and supporting free form content that enables maximum flexibility.
The IODEF fits into a broader ecosystem of standards and conventions.
An attempt was made to harmonize the data model with this context.
5070 A detailed list of additions made to the data model in [RFC5070] are enumerated in this section.
See Section 4.4 for a list of incompatible changes.
Updated the data types (Section 2) to improve internationalization, clarify ambiguity, and ensure consistency in extensions.
Added the observable id attribute (Section 3.3.2) and IndicatorData class (Section 3.28) to represent indicators.
Added the private enum name and private enum
id attributes to the IODEF Document class (Section 3.1) to disambiguate private extensions.
Updated the Incident class (Section 3.2) to represent additional timing and workflow information.
Added the ThreatActor (Section 3.7) and Campaign (Section 3.8) classes to represent attack attribution information.
Updated the Contact class (Section 3.9) and its children to improve internationalization and represent additional information about an entity.
Updated the Method class (Section 3.11) to improve extensibility through externally referenced resources.
Added the Discovery class (Section 3.10) to describe how an incident was discovered.
Updated the Assessment class (Section 3.12) to enable more descriptive characterizations of the impact of an incident.
Updated the HistoryItem (Section 3.13.1) and Expectation (Section 3.15) classes to support a reference to a course of action.
Updated the EventData class (Section 3.14) with additional metadata added to the Incident class.
Updated the System class (Section 3.17) with additional metadata.
Updated the Counter class (Section 3.18.3) to support additional rate metrics.
Added DomainData (Section 3.19), EmailData (Section 3.21), WindowsRegistryKeysModified (Section 3.23), CertificateData (Section 3.24), and FileData (Section 3.25) classes to improve the description of an incident and support this data as indicators.
Added the SignatureData (Section 3.27) and HashData (Section 3.26) classes to represent digital signatures and hashes.
Added support for public enumerated attribute extensions using IANA registries (Section 5.1.2).
Updated numerous enumerated attributes for completeness.
The IODEF uses a number of simple and complex types.
This section describes these data types.
An integer is represented in the information model by the INTEGER data type.
Integer data MUST be encoded in Base 10.
The INTEGER data type is implemented in the data model as an "xs:integer" type per Section 3.3.13 of [W3C.SCHEMA.DTYPES].
Real Numbers A real (floating point)
number is represented in the information model by the REAL data type.
Real data MUST be encoded in Base 10.
The REAL data type is implemented in the data model as an "xs:float" type per Section 3.2.4 of [W3C.SCHEMA.DTYPES]. 2.3.
Characters and Strings A single character is represented in the information model by the CHARACTER data type.
A string is represented by the STRING data type.
Special characters MUST be encoded using entity references.
The CHARACTER and STRING data types are implemented in the data model as an "xs:string" type per Section 3.2.1 of [W3C.SCHEMA.DTYPES].
A string that needs to be represented in a human readable language different than the default encoding of the document is represented in the information model by the ML STRING data type.
The ML STRING data type is implemented in the data model as the "iodef:MLStringType" type.
This type extends the "xs:string" to include two attributes.
The content of the class is a character string of type "xs:string" whose language MAY be specified by the xml:lang attribute.
The attributes of the iodef:MLStringType type are: xml:lang Optional.
A language identifier per Section 2.12 of [W3C.XML]
whose values and format are described in [RFC5646].
The interpretation of this code is described in Section 6.
An identifier to relate other instances of this class with the same parent as translations of this text.
The scope of this identifier is limited to all of the direct, peer child classes of a given parent class.
Using this class enables representing translations of the same text in multiple languages.
Each translation is a distinct instance of this class with a common parent.
A group of classes each with a translated instance of text is related by setting a common identifier in the translation
The language of a given class is set by the xml:lang attribute.
See Section 6 for more details on representing translations of free form text.
Binary Strings Binary octets can be represented with two encodings.
A binary octet encoded with base64 is represented in the information model by the BYTE data type.
A sequence of these octets is of the BYTE[] data type.
The BYTE and BYTE[] data types are implemented in the data model as an "xs:
base64Binary" type per Section 3.2.16 of [W3C.SCHEMA.DTYPES].
A binary octet encoded as a character tuple consistent of two hexadecimal digits is represented in the information model by the HEXBIN data type.
A sequence of these octets is of the HEXBIN[] data type.
The HEXBIN and HEXBIN[] data types are implemented in the data model as an "xs:hexBinary" type per Section 3.2.15 of [W3C.SCHEMA.DTYPES].
An enumerated type is represented in the information model by the ENUM data type.
It is an ordered list of acceptable string values.
Each value has a representative keyword.
Within the data model, the enumerated type keywords are used as attribute values.
The ENUM data type is implemented in the data model as values of an "xs:NMTOKEN" type per Section 3.3.4 of [W3C.SCHEMA.DTYPES].
Date Time String A date time string that describes a particular instant in time is represented in the information model by the DATETIME data type.
The DATETIME data type is implemented in the data model as an "xs:dateTime" type per Section 3.2.7 of [W3C.SCHEMA.DTYPES].
A timezone offset from UTC is represented in the information model by the TIMEZONE data type.
(0[0 9] 1[0 4]):[0 5][0 9]".
The TIMEZONE data type is implemented in the data model as an "iodef:TimezoneType" type.
A list of network ports is represented in the information model by the PORTLIST data type.
A PORTLIST consists of a comma separated list of numbers and ranges (N M means ports N through M, inclusive).
The PORTLIST data type is implemented in the data model as an "iodef:PortlistType" type. 2.10.
A postal address is represented in the information model by the POSTAL data type.
The POSTAL data type is implemented in the data model as an "iodef:MLStringType" type. 2.11.
Telephone Number A telephone number is represented in the information model by the PHONE data type.
The format of the PHONE data type is documented in [E.164].
The PHONE data type is implemented in the data model as an "xs:string" type per Section 3.2.1 of [W3C.SCHEMA.DTYPES].
An email address is represented in the information model by the EMAIL data type.
The format of the EMAIL data type is documented in Section 3.4.1 of [RFC5322] and Section 3.3 of [RFC6531].
The EMAIL data type is implemented in the data model as an "xs:string" type per Section 3.2.1 of [W3C.SCHEMA.DTYPES]. 2.13.
Uniform Resource Locator Strings A uniform resource locator (URL) is represented in the information model by the URL data type.
The format of the URL data type is documented in [RFC3986].
The URL data type is implemented as an "xs:anyURI" type per Section 3.2.17 of [W3C.SCHEMA.DTYPES].
Software A particular version of software is represented in the information model by the SOFTWARE data type.
This software can be described by using a reference, a URL, or with free form text.
The SOFTWARE data type is implemented in the data model as the "iodef:SoftwareType" type.
The aggregate classes of the SoftwareType type are: SoftwareReference Zero or one.
Reference to a software application.
A URL to a resource describing the software.
A free form text description of the software.
At least one of these classes MUST be present.
The iodef:SoftwareType type has no attributes.
The SoftwareReference class is a reference to a particular version of software.
The element content varies according to the value of the spec name attribute.
It is defined in the data model as "xs:any" per [W3C.SCHEMA].
The attributes of the SoftwareReference class are: spec name Required.
Identifies the format and semantics of the element body of this class.
Formal standards and specifications can be referenced as well as a free form text description with a user provided data type.
These values are maintained in the "SoftwareReference spec id" IANA registry per Section 10.2 1.
The element content is free form and of the data type specified by the dtype attribute.
If this value is selected, then the dtype attribute MUST be set.
The element content describes a Common Platform Enumeration (CPE) entry per [NIST.CPE].
The element content describes a software identification (SWID) tag per [ISO19770].
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the spec name attribute.
The data type of the element content.
The permitted values for this attribute are shown below.
The default value is "string".
These values are maintained in the "SoftwareReference dtype" IANA registry per Section 10.2.
The element content is of type HEXBIN.
The element content is of type INTEGER.
The element content is of type REAL.
The element content is of type STRING.
The element content is XML.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the dtype attribute.
Extension Information not otherwise represented in the IODEF can be added using the EXTENSION data type.
This data type is a generic extension mechanism.
The EXTENSION data type is implemented in the data model as the "iodef:ExtensionType" type.
The data type of an EXTENSION is described by the dtype attribute.
For simple information, atomic data types (e.g., integers, strings) are supported.
Their semantics are further described by the meaning and formatid attributes.
Encapsulating XML documents conforming to another schema is also supported.
A detailed discussion of extending the schema can be found in Section 5.
Additional coordination may be required to ensure that a recipient of a document using this type can parse and process it.
The element content of this type is the extension being added to the data model.
This content is defined in the data model as "xs:any" per [W3C.SCHEMA].
The attributes of the iodef:
ExtensionType type are: name Optional.
A free form name of the field or data element.
The data type of the element content.
The default value is "string".
These values are maintained in the "ExtensionType dtype" IANA registry per Section 10.2.
The element content is of type BOOLEAN.
The element content is of type BYTE.
The element content is of type HEXBIN.
The element content is of type CHARACTER.
The element content is of type DATETIME.
The element content is of type INTEGER.
The element content is of type PORTLIST.
The element content is of type REAL.
The element content is of type STRING.
The element content is a base64 encoded binary file encoded as a BYTE[] type.
The element content is a file system path encoded as a STRING type.
The element content is a Layer 2 frame encoded as a HEXBIN type.
The element content is a Layer 3 packet encoded as a HEXBIN type.
The element content is an IPv4 packet encoded as a HEXBIN type.
The element content is an IPv6 packet encoded as a HEXBIN type.
The element content is of type URL.
The element content is a comma separated value (CSV) list per Section 2 of [RFC4180] encoded as a STRING type.
The element content is a Microsoft Windows registry key encoded as a STRING type.
The element content is XML.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the dtype attribute.
A free form text description of the element content.
An identifier referencing the format or semantics of the element content.
A means by which to extend the restriction attribute.
The specifics of the IODEF information model are discussed in this section.
Each class and its relationships with the other classes is described.
When necessary, clarifications are made about translating this information model to the schema in Section 8.
The IODEF Document class is the top level class in the IODEF data model.
All IODEF documents are an instance of this class.
The aggregate classes of the IODEF Document class are: Incident One or more.
The information related to a single incident.
Mechanism by which to extend the data model.
The attributes of the IODEF Document class are: version Required.
The IODEF specification version number to which this IODEF document conforms.
The value of this attribute MUST be "2.00".
A language identifier per Section 2.12 of [W3C.XML]
whose values and form are described in [RFC5646].
The interpretation of this code is described in Section 6.
A free form string to convey processing instructions to the recipient of the document.
Its semantics must be negotiated out of band.
A globally unique identifier for the CSIRT generating the document to deconflict private extensions used in the document.
The fully qualified domain name (FQDN) associated with the CSIRT MUST be used as the identifier.
An organizationally unique identifier for an extension used in the document.
If this attribute is set, the private enum name MUST also be set.
The Incident class describes commonly exchanged information when reporting or sharing derived analysis from security incidents.
The aggregate classes of the Incident class are: IncidentID One.
An incident tracking number assigned to this incident by the CSIRT that generated the IODEF document.
The incident tracking numbers used by other CSIRTs to refer to the incident described in the document.
Related activity and attribution of this activity.
The time the incident was first detected.
The time the incident started.
The time the incident ended.
The time the site recovered from the incident.
The time the incident was reported.
The time the content in this Incident class was generated.
A free form text description of the incident.
The means by which this incident was detected.
A characterization of the impact of the incident.
The techniques used by the threat actor in the incident.
Contact information for the parties involved in the incident.
Description of the events comprising the incident.
Indicators from the analysis of an incident.
A log of significant events or actions that occurred during the course of handling the incident.
Mechanism by which to extend the data model.
The attributes of the Incident class are: purpose Required.
The purpose attribute describes the rationale for documenting the information in this class.
It is closely related to the Expectation class (Section 3.15).
These values are maintained in the "Incident purpose" IANA registry per Section 10.2.
This attribute is defined as an enumerated list: 1.
The incident was sent for trace back purposes.
The incident was sent to request aid in mitigating the described activity.
The incident was sent to comply with reporting requirements.
The incident was sent to convey indicators that should be monitored.
The incident was sent for purposes specified in the Expectation class.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the purpose attribute.
The status attribute conveys the state in a workflow where the incident is currently found.
These values are maintained in the "Incident status" IANA registry per Section 10.2.
This attribute is defined as an enumerated list: 1.
The incident is newly reported, and no action has been taken.
The incident is under investigation.
The incident has been forwarded to another party for handling.
The investigation into the activity in this incident has concluded.
The described activity has not yet been detected.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the status attribute.
A language identifier per Section 2.12 of [W3C.XML]
whose values and form are described in [RFC5646].
The interpretation of this code is described in Section 6.
The default value is "private".
A means by which to extend the restriction attribute.
There are a number of recurring attributes used in the information model.
They are documented in this section.
The restriction attribute indicates the disclosure guidelines to which the sender expects the recipient to adhere for the information represented in this class and its children.
This guideline provides no security since there are no technical means to ensure that the recipient of the document handles the information as the sender requested.
The value of this attribute is logically inherited by the children of this class.
That is to say, the disclosure rules applied to this class also apply to its children.
It is possible to set a granular disclosure policy, since all of the high level classes (i.e., children of the Incident class) have a restriction attribute.
Therefore, a child can override the guidelines of a parent class, be it to restrict or relax the disclosure rules
(e.g., a child has a weaker policy than an ancestor; or an ancestor has a weak policy, and the children selectively apply more rigid controls).
The implicit value of the restriction attribute for a class that did not specify one can be found in the closest ancestor that did specify a value.
This attribute is defined as an enumerated value with a default value of "private".
Note that the default value of the restriction attribute is only defined in the context of the Incident class.
In other classes where this attribute is used, no default is specified.
These values are maintained in the "Restriction" IANA registry per Section 10.2.
The information can be freely distributed without restriction.
The information may be shared within a closed community of peers, partners, or affected parties, but cannot be openly published.
The information may be shared only within the organization with individuals that have a need to know.
The information may not be shared.
The information can be shared according to an information disclosure policy pre arranged by the communicating parties.
Same as 'need to know'.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
The observable id attribute tags information in the document as an observable so that it can be referenced later in the description of an indicator.
The value of this attribute is a unique identifier in the scope of the document.
It is used by the ObservableReference class to enumerate observables when defining an indicator with the IndicatorData class.
The IncidentID class represents a tracking number that is unique in the context of the CSIRT.
It serves as an identifier for an incident or a document identifier when sharing indicators.
This identifier would serve as an index into a CSIRT's incident handling or knowledge management system.
The combination of the name attribute and the string in the element content MUST be a globally unique identifier describing the activity.
Documents generated by a given CSIRT MUST NOT reuse the same value unless they are referencing the same incident.
The content of the class is an incident identifier of type STRING.
The attributes of the IncidentID class are: name Required.
An identifier describing the CSIRT that created the document.
In order to have a globally unique CSIRT name, the fully qualified domain name associated with the CSIRT MUST be used.
An identifier referencing a subset of the named incident.
A means by which to extend the restriction attribute.
The AlternativeID class lists the tracking numbers used by CSIRTs, other than the one generating the document, to refer to the identical activity described in the IODEF document.
A tracking number listed as an AlternativeID references the same incident detected by another CSIRT.
The tracking numbers of the CSIRT that generated the IODEF document must never be considered an AlternativeID.
The aggregate class of the AlternativeID class is: IncidentID One or more.
The tracking number of another CSIRT.
The attributes of the AlternativeID class are: restriction Optional.
A means by which to extend the restriction attribute.
The RelatedActivity class relates the information described in the rest of the document to previously observed incidents or activity and allows attribution to a specific actor or campaign.
The aggregate classes of the RelatedActivity class are: IncidentID Zero or more.
The tracking number of a related incident.
A URL to activity related to this incident.
The threat actor to whom the incident activity is attributed.
The campaign of a given threat actor to whom the described activity is attributed.
A reference to a related indicator.
An estimate of the confidence in attributing this RelatedActivity to the events described in the document.
A description of how these relationships were derived.
A mechanism by which to extend the data model.
The RelatedActivity class MUST have at least one instance of any of the following child classes: IncidentID, URL, ThreatActor, Campaign, Description, or AdditionalData.
The attributes of the RelatedActivity class are: restriction Optional.
A means by which to extend the restriction attribute.
The ThreatActor class describes a threat actor.
The aggregate classes of the ThreatActor class are: ThreatActorID Zero or more.
An identifier for the threat actor.
A URL to a reference describing the threat actor.
A description of the threat actor.
A mechanism by which to extend the data model.
The ThreatActor class MUST have at least one instance of a child class.
The attributes of the ThreatActor class are: restriction Optional.
A means by which to extend the restriction attribute.
The Campaign class describes a campaign of attacks by a threat actor.
The aggregate classes of the Campaign class are: CampaignID Zero or more.
An identifier for the campaign.
A URL to a reference describing the campaign.
A description of the campaign.
A mechanism by which to extend the data model.
The Campaign class MUST have at least one instance of a child class.
The attributes of the Campaign class are: restriction Optional.
A means by which to extend the restriction attribute.
The Contact class describes contact information for organizations and personnel involved in the incident.
This class allows for the naming of the involved party, specifying contact information for them, and identifying their role in the incident.
People and organizations are treated interchangeably as contacts; one can be associated with the other using the recursive definition of the class (the Contact class is aggregated into the Contact class).
The type attribute disambiguates the type of contact information being provided.
The recursive definition of Contact provides a way to relate information without requiring the explicit use of identifiers or duplication of data.
A complete point of contact is derived by a particular traversal from the root Contact class to the leaf Contact class.
Each child Contact class logically inherits contact information from its ancestors.
The aggregate classes of the Contact class are: ContactName Zero or more.
The name of the contact.
The contact may either be an organization or a person.
The type attribute disambiguates the semantics.
The title for the individual named in the ContactName.
A free form text description of the contact.
A handle name into the registry of the contact.
The postal address of the contact.
The email address of the contact.
The telephone number of the contact.
The timezone in which the contact resides.
A recursive definition of the Contact class.
This definition can be used to group common data pertaining to multiple points of contact and is especially useful when listing multiple contacts at the same organization.
A mechanism by which to extend the data model.
At least one of the aggregate classes MUST be present in an instance of the Contact class.
The attributes of the Contact class are: role Required.
Indicates the role the contact fulfills.
These values are maintained in the "Contact role" IANA registry per Section 10.2.
The entity that generates the document.
The entity that reported the information.
An administrative contact or business owner for an asset or organization.
An entity responsible for the day to day management of technical issues for an asset or organization.
An external hosting provider for an asset.
An end user of an asset or part of an organization.
An entity responsible for billing issues for an asset or organization.
An entity responsible for legal issues related to an asset or organization.
An entity responsible for handling security issues for an asset or organization.
An entity responsible for handling abuse originating from an asset or organization.
An entity that is to be kept informed about the events related to an asset or organization.
A CSIRT or information sharing organization coordinating activity related to an asset or organization.
A law enforcement organization supporting the investigation of activity affecting an asset or organization.
The vendor that produces an asset.
A vendor that provides services.
A victim in the incident.
A victim in the incident who has been notified.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the role attribute.
Indicates the type of contact being described.
This attribute is defined as an enumerated list.
These values are maintained in the "Contact type" IANA registry per Section 10.2.
The information for this contact references an individual.
The information for this contact references an organization.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the type attribute.
A means by which to extend the restriction attribute.
The RegistryHandle class represents a handle into an Internet registry or community specific database.
The content of the class is a handle into a registry of type STRING.
The attributes of the RegistryHandle class are: registry Required.
The database to which the handle belongs.
These values are maintained in the "RegistryHandle registry" IANA registry per Section 10.2.
The possible values are: 1.
Internet Network Information Center 2.
Asia Pacific Network Information Center 3.
American Registry for Internet Numbers 4.
Latin American and Caribbean Internet Addresses Registry 5.
African Network Information Center 7.
A database local to the CSIRT 8.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the registry attribute.
The PostalAddress class specifies a postal address and associated annotation.
The aggregate classes of the PostalAddress class are: PAddress One.
A free form text description of the address.
The attributes of the PostalAddress class are: type Optional.
Categorizes the type of address described in the PAddress class.
These values are maintained in the "PostalAddress type" IANA registry per Section 10.2.
An address describing a physical location.
An address to which correspondence should be sent.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the type attribute.
The Email class specifies an email address and associated annotation.
The aggregate classes of the Email class are: EmailTo One.
A free form text description of the email address.
The attributes of the Email class are: type Optional.
Categorizes the type of email address described in the EmailTo class.
These values are maintained in the "Email  type" IANA registry per Section 10.2.
An email address of an individual.
An email address regularly monitored for operational purposes.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the type attribute.
The Telephone class describes a telephone number and associated annotation.
The aggregate classes of the Telephone class are: TelephoneNumber One.
A free form text description of the phone number.
The attributes of the Telephone class are: type Optional.
Categorizes the type of telephone number described in the TelephoneNumber class.
These values are maintained in the "Telephone type" IANA registry per Section 10.2.
A number of a wire line (land line) phone.
A number of a mobile phone.
A number to a fax machine.
A number to a regularly monitored operational hotline.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the type attribute.
The Discovery class describes how an incident was detected.
The aggregate classes of the Discovery class are: Description Zero or more.
A free form text description of how this incident was detected.
Contact information for the party that discovered the incident.
Describes an application specific configuration that detected the incident.
The attributes of the Discovery class are: source Optional.
Categorizes the techniques used to discover the incident.
These values are partially derived from Table 3 1 of [NIST800.61rev2].
These values are maintained in the "Discovery  source" IANA registry per Section 10.2.
Network Intrusion Detection or Prevention System.
Host based Intrusion Prevention System.
Security Information and Event Management System.
Contracted third party monitoring service.
The activity was discovered while investigating an unrelated incident.
Manual investigation initiated based on notification of a new vulnerability or exploit.
A party within the organization reported the activity.
A party outside of the organization reported the activity.
A law enforcement organization notified the victim organization.
A customer or business partner reported the activity to the victim organization.
The threat actor directly or indirectly reported this activity to the victim organization.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the source attribute.
A means by which to extend the restriction attribute.
The DetectionPattern class describes a configuration or signature that can be used by an Intrusion Detection System (IDS) / Intrusion Prevention System (IPS), SIEM, antivirus, endpoint protection, network analysis, malware analysis, or host forensics tool to identify a particular phenomenon.
This class requires the identification of the target application and allows the configuration to be described in either free form or machine readable form.
The aggregate classes of the DetectionPattern class are: Application One.
The application for which the DetectionConfiguration or Description is being provided.
A free form text description of how to use the information provided in the Application or DetectionConfiguration classes.
A machine consumable configuration to find a pattern of activity.
An instance of either the Description or DetectionConfiguration class MUST be present.
The attributes of the DetectionPattern class are: restriction Optional.
A means by which to extend the restriction attribute.
The Method class describes the tactics, techniques, procedures, or weakness used by the threat actor in an incident.
This class consists of both a list of references describing the attack methods and weaknesses and a free form text description.
The aggregate classes of the Method class are: Reference Zero or more.
A reference to a vulnerability, malware sample, advisory, or analysis of an attack technique.
A free form text description of techniques, tactics, or procedures used by the threat actor.
A reference to a pattern of attack or exploitation per [RFC7203].
A reference to a vulnerability per [RFC7203].
A reference to the exploited weakness per [RFC7203].
A mechanism by which to extend the data model.
An instance of one of these children MUST be present.
The attributes of the Method class are: restriction Optional.
A means by which to extend the restriction attribute.
The Reference class is an external reference to relevant information such as a vulnerability, IDS alert, malware sample, advisory, or attack technique.
The aggregate classes of the Reference class are: enum:ReferenceName Zero or one.
A URL to a reference.
A free form text description of this reference.
At least one of these classes MUST be present.
The attribute of the Reference class is: observable id Optional.
The Assessment class describes the repercussions of the incident to the victim.
The aggregate classes of the Assessment class are: IncidentCategory Zero or more.
A free form text description categorizing the type of incident.
A technical characterization of the impact of the incident activity on the victim's enterprise.
Impact of the incident activity on the business functions of the victim organization.
A characterization of the victim organization due to the incident activity as a function of time.
The financial loss due to the incident activity.
The intended outcome to the victim sought by the threat actor.
Defined identically to the BusinessImpact defined in Section 3.12.2 but describes intent rather than the realized impact.
A counter with which to summarize the magnitude of the activity.
A description of a mitigating factor relative to the impact on the victim organization.
A description of an underlying cause of the impact.
An estimate of confidence in the impact assessment.
A mechanism by which to extend the data model.
At least one instance of the possible five impact classes (i.e., SystemImpact, BusinessImpact, TimeImpact, MonetaryImpact, or IntendedImpact) MUST be present.
The attributes of the Assessment class are: occurrence Optional.
Specifies whether the assessment is describing actual or potential outcomes.
This assessment describes activity that has occurred.
This assessment describes potential activity that might occur.
A means by which to extend the restriction attribute.
The SystemImpact class describes the technical impact of the incident to the systems on the network.
The aggregate class of the SystemImpact class is: Description Zero or more.
A free form text description of the impact to the system.
The attributes of the SystemImpact class are: severity Optional.
An estimate of the relative severity of the activity.
The permitted values are shown below.
There is no default value.
An indication whether the described activity was successful.
The permitted values are shown below.
There is no default value.
The attempted activity was not successful.
The permitted values are shown below.
The default value is "unknown".
These values are maintained in the "SystemImpact type" IANA registry per Section 10.2.
Control was taken of a given account.
Control was taken of a given service.
Control was taken of a given system.
A cyber physical system was manipulated.
A cyber physical system was damaged.
Access to particular data was degraded or denied.
Access to an account was degraded or denied.
Access to a service was degraded or denied.
Access to a system was degraded or denied.
Hardware on a system was irreparably damaged.
Data on a system was deleted.
Sensitive or proprietary information was accessed or exfiltrated.
Personally identifiable information was accessed or exfiltrated.
Credential information was accessed or exfiltrated.
System configuration or data inventory was access or exfiltrated.
Data on the system was modified.
Application or system configuration was modified.
Firmware of a hardware component was modified.
Network traffic on the system was redirected 20.
Network traffic emerging from a host or enclave was monitored.
System activity (e.g., running processes, keystrokes) were monitored.
Activity violated the system owner's acceptable use policy.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the type attribute.
The BusinessImpact class describes and characterizes the degree to which the function of the organization was impacted by the incident.
The aggregate class of the BusinessImpact class is: Description Zero or more.
A free form text description of the impact to the organization.
The attributes of the BusinessImpact class are: severity Optional.
Characterizes the severity of the incident on business functions.
The permitted values are shown below.
They were derived from Table 3 2 of [NIST800.61rev2].
The default value is "unknown".
These values are maintained in the "BusinessImpact severity" IANA registry per Section 10.2.
No effect to the organization's ability to provide all services to all users.
Minimal effect as the organization can still provide all critical services to all users but has lost efficiency.
The organization has lost the ability to provide a critical service to a subset of system users.
The organization is no longer able to provide some critical services to any users.
The impact is not known.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the severity attribute.
Characterizes the effect this incident had on the business.
The permitted values are shown below.
The default value is "unknown".
These values are maintained in the "BusinessImpact type" IANA registry per Section 10.2.
Sensitive or proprietary information was accessed or exfiltrated.
Personally identifiable information was accessed or exfiltrated.
Credential information was accessed or exfiltrated.
Sensitive or proprietary information was changed or deleted.
The reputation of the organization's brand was diminished.
A cyber physical system was damaged.
A cyber physical system was manipulated.
The incident resulted in legal or regulatory action.
The incident resulted in actors extorting the victim organization.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the type attribute.
The TimeImpact class describes the impact of the incident on an organization as a function of time.
It provides a way to convey down time and recovery time.
The content of the class is of type REAL and specifies an amount of time.
The duration attribute provides units for this content, and the metric attribute explains what this content is measuring.
The attributes of the TimeImpact class are: severity Optional.
An estimate of the relative severity of the activity.
The permitted values are shown below.
There is no default value.
Defines the meaning of the value in the element content.
These values are maintained in the "TimeImpact metric" IANA registry per Section 10.2.
Total staff time to recovery from the activity (e.g., 2 employees working 4 hours each would be 8 hours).
Elapsed time from the beginning of the recovery to its completion (i.e., wall clock time).
Duration of time for which some provided service(s) was not available.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the metric attribute.
Defines the unit of time for the value in the element content.
The default value is "hour".
These values are maintained in the "TimeImpact duration" IANA registry per Section 10.2.
The unit of the element content is seconds.
The unit of the element content is minutes.
The unit of the element content is hours.
The unit of the element content is days.
The unit of the element content is months.
The unit of the element content is quarters.
The unit of the element content is years.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the duration attribute.
The MonetaryImpact class describes the financial impact of the activity on an organization.
For example, this impact may consider losses due to the cost of the investigation or recovery, diminished productivity of the staff, or a tarnished reputation that will affect future opportunities.
The content of the class is of type REAL and specifies a quantity of money.
The currency attribute defines the currency of this value.
The attributes of the MonetaryImpact class are: severity Optional.
An estimate of the relative severity of the activity.
The permitted values are shown below.
There is no default value.
Defines the currency in which the value in the element content is expressed.
The permitted values are defined in "Codes for the representation of currencies" [ISO4217].
There is no default value.
The Confidence class represents an estimate of the validity and accuracy of data expressed in the document.
This estimate can be expressed as a category or a numeric calculation.
The content of the class is of type REAL and specifies a numerical assessment in the confidence of the data when the value of the rating attribute is "numeric".
Otherwise, this element MUST be empty.
The attributes of the Confidence class are: rating Required.
A qualitative assessment of confidence.
These values are maintained in the "Confidence rating" IANA registry per Section 10.2 1.
The element content contains a number that conveys the confidence of the data.
The semantics of this number is outside the scope of this specification.
The confidence rating value is not known.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the rating attribute.
The History class is a log of the significant events or actions performed by the involved parties during the course of handling the incident.
The level of detail maintained in this log is left up to the discretion of those handling the incident.
The aggregate classes of the History class are: HistoryItem One or more.
An entry in the history log of significant events or actions performed by the involved parties.
The attributes of the History class are: restriction Optional.
A means by which to extend the restriction attribute.
The HistoryItem class is an entry in the History (Section 3.13) log that documents a particular action or event that occurred in the course of handling the incident.
The details of the entry are a free form text description, but each can be categorized with the type attribute.
The aggregate classes of the HistoryItem class are: DateTime One.
A timestamp of this entry in the history log.
In a history log created by multiple parties, the IncidentID provides a mechanism to specify which CSIRT created a particular entry and references this organization's tracking number.
When a single organization is maintaining the log, this class can be ignored.
Provides contact information for the entity that performed the action documented in this class.
A free form text description of the action or event.
An identifier meaningful to the sender and recipient of this document that references a course of action (COA).
This class MUST be present if the action attribute is set to "defined coa".
A mechanism by which to extend the data model.
The attributes of the HistoryItem class are: action Required.
Classifies a performed action or occurrence documented in this history log entry.
As activity will likely have been instigated either through a previously conveyed expectation or through an internal investigation, this attribute is identical to the action attribute of the Expectation class.
The difference is only one of tense.
When an action is in this class, it has been completed.
A means by which to extend the action attribute.
A means by which to extend the restriction attribute.
The EventData class is a container class to organize data about events that occurred during an incident.
The aggregate classes of the EventData class are: Description Zero or more.
A free form text description of the event.
The time the event was detected.
The time the event started.
The time the event ended.
The time the site recovered from the event.
The time the event was reported.
Contact information for the parties involved in the event.
The means by which the event was detected.
The impact of the event on the victim and the actions taken.
The technique used by the threat actor in the event.
A description of the systems or networks involved.
The expected action to be performed by the recipient for the described event.
Supportive data (e.g., log files) that provides additional information about the event.
A recursive definition of the EventData class.
See Section 3.14.2 for an explanation on using this class.
An extension mechanism for data not explicitly represented in the data model.
At least one of the aggregate classes MUST be present in an instance of the EventData class.
The attributes of the EventData class are: restriction Optional.
The default value is "default".
A means by which to extend the restriction attribute.
Relating the Incident and EventData Classes
There is substantial overlap in the child classes aggregated in the Incident and EventData classes.
Nevertheless, the semantics of these classes are quite different.
The Incident class provides summary information about the entire incident, while the EventData class provides information about the individual events comprising the incident.
In the common case, the EventData class will provide more specific information for the general description provided in the Incident class.
However, in the case where the summarized information in the Incident class conflicts with the detailed information in an EventData class, the more specific EventData class MUST supersede the more generic information provided in the Incident class.
The EventData class is a container for the properties of an event in an incident.
These properties include: the hosts involved, impact of the incident activity on the hosts, forensic logs, etc.
The recursive definition of EventData allows for the grouping of related information with common properties.
This approach eliminates the need for explicit identifiers to relate information or duplicate it.
Instead, the relative depth (nesting) of a class is used to group (relate) information.
For example, consider a case where two hosts experience different impacts during an incident.
However, these two hosts have common contact information.
A depiction of how this situation would be represented can be found in Figure 30.
EventData (2) and (3) group each of the two hosts with their unique impact.
EventData (1) describes the common Contact class these two hosts share.
Recursion in the EventData Class 3.15.
The Expectation class conveys to the recipient of the IODEF document the actions the sender is requesting.
The aggregate classes of the Expectation class are: Description Zero or more.
A free form text description of the desired action(s). DefinedCOA Zero or more.
A unique identifier meaningful to the sender and recipient of this document that references a course of action.
This class MUST be present if the action attribute is set to "defined coa".
The time at which the sender would like the action performed.
A timestamp that is earlier than the ReportTime specified in the Incident class denotes that the sender would like the action performed as soon as possible.
The absence of this element indicates no expectations of when the recipient would like the action performed.
The time by which the sender expects the recipient to complete the action.
If the recipient cannot complete the action before EndTime, the recipient MUST NOT carry out the action.
Because of transit delays and clock drift, the sender MUST be prepared for the recipient to have carried out the action, even if it completes past EndTime.
The entity expected to perform the action.
The attributes of the Expectation class are: action Optional.
Classifies the type of action requested.
The default value of "other".
These values are maintained in the "Expectation action" IANA registry per Section 10.2.
Do nothing with the information.
Contact the site(s) identified as the source of the activity.
Contact the site(s) identified as the target of the activity.
Contact the originator of the document.
Block traffic from the machine(s) listed as sources in the event.
Block traffic from the network(s) lists as sources in the event.
Block the port listed as sources in the event.
Rate limit the traffic from the machine(s) listed as sources in the event.
Rate limit the traffic from the network(s) lists as sources in the event.
the port(s) listed as sources in the event.
Redirect traffic from the intended recipient for further analysis.
Redirect traffic from systems listed in the event to a honeypot for further analysis.
Upgrade or patch the software or firmware on an asset listed in the event.
Reinstall the operating system or applications on an asset listed in the event.
Change the configuration of an asset listed in the event to reduce the attack surface.
Remediate the activity in a way other than by rate limiting or blocking.
Confirm receipt and begin triaging the incident.
Notify the sender when new information is received for this incident.
Watch for the described activity or indicators, and notify the sender when seen.
Train user to identify or mitigate the described threat.
Perform a predefined course of action (COA).
The COA is named in the DefinedCOA class.
Perform a custom action described in the Description class.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the action attribute.
Indicates the desired priority of the action.
This attribute is an enumerated list with no default value, and the semantics of these relative measures are context dependent.
The default value is "default".
A means by which to extend the restriction attribute.
The Flow class describes the systems and networks involved in the incident and the relationships between them.
The aggregate class of the Flow class is: System One or More.
A host or network involved in an event.
The Flow class has no attributes.
The System class describes a system or network involved in an event.
The aggregate classes of the System class are: Node One.
A host or network involved in the incident.
The intended purpose of the system.
A network service running on the system.
The operating system running on the system.
A counter with which to summarize properties of this host or network.
An asset identifier for the System.
A free form text description of the System.
A mechanism by which to extend the data model.
The attributes of the System class are: category Optional.
the role the host or network played in the incident.
These values are maintained in the "System  category" IANA registry per Section 10.2.
The System was the source of the event.
The System was the target of the event.
The System was an intermediary in the event.
The System was a sensor monitoring the event.
The System was an infrastructure node of the IODEF document exchange.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the category attribute.
Specifies the interface on which the event(s) on this System originated.
If the Node class specifies a network rather than a host, this attribute has no meaning.
An indication of confidence in whether this System was the true target or attacking host.
The permitted values for this attribute are shown below.
The default value is "unknown".
The accuracy of the category attribute value is unknown.
The category attribute value is likely incorrect.
In the case of a source, the System is likely a decoy; with a target, the System was likely not the intended victim.
The category attribute value is believed to be correct.
Indicates whether this System is a virtual or physical device.
The default value is "unknown".
The System is a virtual device.
The System is a physical device.
It is not known if the System is virtual.
Describes the ownership of this System relative to the victim in the incident.
These values are maintained in the "System ownership" IANA registry per Section 10.2.
Personally owned by an employee or affiliate of the corporation or enterprise.
Owned by a partner of the corporation or enterprise.
Owned by a customer of the corporation or enterprise.
Owned by an entity that has no known relationship with the victim organization.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the ownership attribute.
A means by which to extend the restriction attribute.
The Node class identifies a system, asset, or network and its location.
The aggregate classes of the Node class are: DomainData Zero or more.
The domain (DNS) information associated with this node.
If an Address is not provided, at least one DomainData MUST be specified.
The hardware, network, or application address of the node.
If a DomainData is not provided, at least one Address MUST be specified.
The postal address of the node.
A free form text description of the physical location of the node.
This description may provide a more detailed description of where at the address specified by the PostalAddress class this node is found (e.g., room number, rack number, or slot number in a chassis).
A counter with which to summarize properties of this host or network.
The Node class has no attributes.
The Address class represents a hardware (Layer 2), network (Layer 3), or application (Layer 7) address.
The content of the class is an address of type STRING whose semantics are determined by the category attribute.
The attributes of the Address class are: category Required.
The type of address represented.
The default value is "ipv6 addr".
These values are maintained in the "Address category" IANA registry per Section 10.2.
Asynchronous Transfer Mode (ATM) address.
Email address, per the EMAIL data type.
IPv4 host address in dotted decimal notation (i.e., a.b.c.d).
IPv4 network address in dotted decimal notation, slash, significant bits (i.e., a.b.c.d/nn).
A sanitized IPv4 address with significant bits per "ipv4 net" but with the character 'x' replacing any digit(s) in the address or prefix.
IPv4 network address in dotted decimal notation, slash, network mask in dotted decimal notation
IPv6 host address per Section 4 of [RFC5952].
IPv6 network address, slash, prefix per Section 2.3 of [RFC4291].
A sanitized IPv6 address and prefix per "ipv6 net" but with the character 'x' replacing any hexadecimal digit(s) in the address or digit(s) in the prefix.
Media Access Control (MAC) address
A URL or URI for a resource, per the URL data type.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the category attribute.
The name of the Virtual LAN to which the address belongs.
The number of the Virtual LAN to which the address belongs.
The NodeRole class describes the function performed by or role of a particular system, asset, or network.
The aggregate class of the NodeRole class is: Description Zero or more.
A free form text description of the role of the system.
The attributes of the NodeRole class are: category Required.
Function or role of a node.
These values are maintained in the "NodeRole category" IANA registry per Section 10.2.
Client computer on the enterprise network.
Client computer on network of a partner.
Client computer remotely connected to the enterprise network.
Client computer serving as a kiosk.
Messaging server (e.g., NNTP, IRC, IM).
Voice server (e.g., SIP, H.323).
Name server (e.g., DNS, WINS).
Directory server (e.g., LDAP, finger, whois).
Credential server (e.g., domain controller, Kerberos).
Assessment server (e.g., vulnerability scanner, endpoint assessment).
Security monitoring server (e.g., IDS).
Infrastructure server (e.g., router, firewall, DHCP).
Supervisory control and data acquisition (SCADA) system.
Supervisory system for a SCADA.
Anonymization server (e.g., Tor node).
Malicious command and control server.
Server that distributes malware 47.
Server to which exfiltrated content is uploaded.
Intermediary server used to get to a victim.
A system used in a reflector attack.
Site hosting spear phishing content.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the category attribute.
The Counter class summarizes multiple occurrences of an event or conveys counts or rates of various features.
The complete semantics of this class are context dependent based on the class in which it is aggregated.
The content of the class is a value of type REAL whose meaning and units are determined by the type and duration attributes, respectively.
If the duration attribute is present, the element content is a rate.
Otherwise, it is a simple counter.
The attributes of the Counter class are: type Required.
Specifies the type of counter specified in the element content.
These values are maintained in the "Counter  type" IANA registry per Section 10.2.
The Counter class value is a counter.
The Counter class value is a peak value.
The Counter class value is an average.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the type attribute.
See Section 5.1.1. unit Required.
Specifies the units of the element content.
These values are maintained in the "Counter unit" IANA registry per Section 10.2.
Notifications generated by another system (e.g., IDS or SIEM system).
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the unit attribute.
A free form text description of the metric represented by the Counter.
If present, the Counter class represents a rate.
This attribute specifies a unit of time over which the rate whose units are specified in the unit attribute is being conveyed.
This attribute is the denominator of the rate (where the unit attribute specified the nominator).
The possible values of this attribute are defined in the duration attribute of Section 3.12.3 ext duration Optional.
A means by which to extend the duration attribute.
The DomainData class describes a domain name and metadata associated with this domain.
STRING ext domain status  <>
The aggregate classes of the DomainData class are: Name One.
The domain name of a system.
A timestamp of when the domain listed in the Name class was resolved.
A timestamp of when domain listed in the Name class was registered.
A timestamp of when the domain listed in the Name class is set to expire. RelatedDNS
Additional DNS records associated with this domain.
The nameservers identified for the domain listed in the Name class.
Contact information for the domain listed in the Name class supplied by the registrar or through a whois query.
The attributes of the DomainData class are: system status Required.
Assesses the domain's involvement in the event.
These values are maintained in the "DomainData system status" IANA registry per Section 10.2.
This domain was operated with fraudulent intentions.
This domain was compromised by a third party.
This domain was deliberately hijacked.
No categorization for this domain known.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the system status attribute.
Categorizes the registry status of the domain at the time the document was generated.
These values and their associated descriptions are derived from Section 3.2.2 of [RFC3982].
These values are maintained in the "DomainData domain status" IANA registry per Section 10.2.
The domain is permanently inactive.
The domain is in a normal state.
The domain has an assigned registration, but the delegation is inactive.
The domain is in dispute.
The domain is in the process of being purged from the database.
The domain is pending a change in authority.
The domain is on hold by the registry.
The domain has a known status, but it is not one of the redefined enumerated values.
The domain has an unknown status.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the domain status attribute.
The Nameservers class describes the nameservers associated with a given domain.
The aggregate classes of the Nameservers class are: Server One.
The domain name of the nameserver.
The address of the nameserver.
The value of the category attribute MUST be either "ipv4 addr" or "ipv6 addr".
The Nameservers class has no attributes.
The DomainContacts class describes the contact information for a given domain provided either by the registrar or through a whois query.
This contact information can be explicitly described through a Contact class, or a reference can be provided to a domain with identical contact information.
Either a single SameDomainContact or one or more Contact classes MUST be present.
The aggregate classes of the DomainContacts class are: SameDomainContact Zero or one.
A domain name already cited in this document or through previous exchange that contains the identical contact information as the domain name in question.
The domain contact information associated with this domain should be used instead of an explicit definition with the Contact class.
Contact information for the domain.
The DomainContacts class has no attributes.
The Service class describes a network service.
The service is described by a protocol, port, protocol header field, and application providing or using the service.
The aggregate classes of the Service class are: ServiceName Zero or one.
A list of port numbers.
A transport layer (Layer 4) protocol  specific code field (e.g., ICMP code field).
A transport layer (Layer 4) protocol  specific type field (e.g., ICMP type field).
A transport layer (Layer 4) protocol  specific flag field (e.g., TCP flag field).
Headers associated with an email message.
The application acting as either the client or the server for the service.
At least one of these classes MUST be present.
When a given System class with category "source" and another with category "target" are aggregated into a single Flow class, and each of these System classes has a Service and Portlist class, an implicit relationship between these Portlists exists.
If N ports are listed for a System@category "source", and M ports are listed for System@category "target", the number of ports in N must be equal to M.
Likewise, the ports MUST be listed in an identical sequence such that the n th port in the source corresponds to the n th port of the target.
If N is greater than 1, a given instance of a Flow class MUST only have a single instance of a System@category "source" and System@category "target".
The attributes of the Service class are: ip protocol Optional.
The IANA assigned IP protocol number per [IANA.Protocols].
The attribute MUST be set if a Port, Portlist, ProtoCode, ProtoType, or ProtoField class is present.
The ServiceName class identifies an application protocol.
It can be described by referencing an IANA registered protocol, by referencing a URL, or with free form text.
The aggregate classes of the ServiceName class are: IANAService Zero or one.
The name of the service per the "Service Name" field of the registry [IANA.Ports].
A URL to a resource describing the service.
A free form text description of the service.
At least one of these classes MUST be present.
The ServiceName class has no attributes.
The ApplicationHeader class describes arbitrary fields from a protocol header and its corresponding value.
The aggregate class of the ApplicationHeader class is:
A field name and value in a protocol header.
The name attribute MUST be set to the field name.
The field value MUST be set in the element content.
The ApplicationHeader class has no attributes.
The EmailData class describes headers from an email message and cryptographic hashes and signatures applied to it.
The aggregate classes of the EmailData class are: EmailTo Zero or more.
The value of the "To:" header field (Section 3.6.3 of [RFC5322]) in an email.
The value of the "From:" header field (Section 3.6.2 of [RFC5322]) in an email.
The value of the "Subject:" header field in an email.
See Section 3.6.5 of [RFC5322].
EmailX Mailer Zero or one.
The value of the "X Mailer:" header field in an email.
The header name and value of an arbitrary header field of the email message.
The name attribute MUST be set to the header name.
The header value MUST be set in the element body.
The dtype attribute MUST be set to "string".
The headers of an email message.
The body of an email message.
The headers and body of an email message.
associated with this email message.
associated with this email message.
The attribute of the EmailData class is: observable id Optional.
The Record class is a container class for log and audit data that provides supportive information about the events in an incident.
The source of this data will often be the output of monitoring tools.
These logs substantiate the activity described in the document.
The aggregate classes of the Record class are: RecordData One or more.
Log or audit data generated by a particular tool.
Separate instances of the RecordData class SHOULD be used for each type of log.
The attributes of the Record class are: restriction Optional.
A means by which to extend the restriction attribute.
The RecordData class describes or references log or audit data from a given type of tool and provides a means to annotate the output.
The aggregate classes of the RecordData class are: DateTime Zero or one.
A timestamp of the data found in the RecordItem or URL classes.
A free form text description of the data provided in the RecordItem or URL classes.
the tool used to generate the data in the RecordItem or URL classes.
A search string to precisely find the relevant data in the RecordItem or URL classes.
Log, audit, or forensic data to support the conclusions made during the course of analyzing the incident.
A URL reference to a log or audit data.
The files involved in the incident.
The registry keys that were involved in the incident.
The certificates that were involved in the incident.
An extension mechanism for data not explicitly represented in the data model.
At least one of the following classes MUST be present: RecordItem, URL, FileData, WindowsRegistryKeysModified, CertificateData, or AdditionalData.
The attributes of the RecordData class are: restriction Optional.
A means by which to extend the restriction attribute.
The RecordPattern class describes where in the log data provided or referenced in the RecordData class relevant information can be found.
It provides a way to reference subsets of information, identified by a pattern, in a large log file, audit trail, or forensic data.
The content of the class is of type STRING and specifies a search pattern.
The attributes of the RecordPattern class are: type Required.
Describes the type of pattern being specified in the element content.
These values are maintained in the "RecordPattern type" IANA registry per Section 10.2.
Regular expression as defined by POSIX Extended Regular Expressions (ERE) in Chapter 9 of [IEEE.POSIX].
Binhex encoded binary pattern, per the HEXBIN data type.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the type attribute.
Amount of units (determined by the offsetunit attribute) to seek into the RecordItem data before matching the pattern.
Describes the units of the offset attribute.
These values are maintained in the "RecordPattern offsetunit" IANA registry per Section 10.2.
Offset is a count of lines.
Offset is a count of bytes.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the offsetunit attribute.
Number of times to apply the specified pattern.
The WindowsRegistryKeysModified class describes Windows operating system registry keys and the operations that were performed on them.
This class was derived from [RFC5901].
The aggregate classes of the WindowsRegistryKeysModified class are:
The attribute of the WindowsRegistryKeysModified class is: observable id Optional.
The Key class describes a Windows operating system registry key name and value pair, as well as the operation performed on it.
The aggregate classes of the Key class are: KeyName One.
The name of a Windows operating system registry key (e.g., [HKEY LOCAL MACHINE\Software\Test\KeyName]).
The value of the registry key identified in the KeyName class encoded per the .reg file format [KB310516].
The attributes of the Key class are: registryaction Optional.
The type of action taken on the registry key.
These values are maintained in the "Key registryaction" IANA registry per Section 10.2.
Value added to a registry key.
Value deleted from a registry key.
Value modified in a registry key.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the registryaction attribute.
The CertificateData class describes X.509 certificates.
The aggregate classes of the CertificateData class are: Certificate One or more.
A description of an X.509 certificate or certificate chain.
The attributes of the CertificateData class are: restriction Optional.
A means by which to extend the restriction attribute.
The Certificate class describes a given X.509 certificate or certificate chain.
The aggregate classes of the Certificate class are:
A given X.509 certificate or chain.
See Section 4.4.4 of [W3C.XMLSIG].
A free form text description explaining the context of this certificate.
The attributes of the Certificate class are: observable id Optional.
The FileData class describes a file or set of files.
The aggregate classes of the FileData class are:
A description of a file.
The attributes of the FileData class are: restriction Optional.
A means by which to extend the restriction attribute.
The File class describes a file; its associated metadata; and cryptographic hashes and signatures applied to it.
The aggregate classes of the File class are: FileName Zero or one.
The name of the file.
The size of the file in bytes.
The type of file per the IANA "Media Types" registry [IANA.Media].
Valid values correspond to the text in the "Template" column (e.g., "application/pdf").
A URL reference to the file.
The software application or operating system to which this file belongs or by which it can be processed.
Mechanism by which to extend the data model to describe properties of the file.
The attributes of the File class are: observable id Optional.
The HashData class describes different types of hashes on a given object (e.g., file, part of a file, email).
The aggregate classes of the HashData class are: HashTargetID Zero or one.
An identifier that references a subset of the object being hashed.
The semantics of this identifier are specified by the scope attribute.
The hash of an object.
The fuzzy hash of an object.
At least one instance of either Hash or FuzzyHash MUST be present.
The attribute of the HashData class is: scope Required.
Describes on which part of the object the hash should be applied.
These values are maintained in the "HashData  scope" IANA registry per Section 10.2.
A hash computed over the entire contents of a file.
A hash computed on a given section of a Windows Portable Executable (PE) file.
If set to this value, the HashTargetID class MUST identify the section being hashed.
A section is identified by an ordinal number (starting at 1) corresponding to the order in which the given section header was defined in the Section Table of the PE file header.
A hash computed on the Import Address Table (IAT) of a PE file.
As IAT hashes are often tool dependent, if this value is set, the Application class of either the Hash or FuzzyHash classes MUST specify the tool used to generate the hash.
A hash computed on a given resource in a PE file.
If set to this value, the HashTargetID class MUST identify the resource being hashed.
A resource is identified by an ordinal number (starting at 1) corresponding to the order in which the given resource is declared in the Resource Directory of the Data Dictionary in the PE file header.
A hash computed on a given object in a Portable Document Format (PDF) file.
If set to this value, the HashTargetID class MUST identify the object being hashed.
This object is identified by its offset in the PDF file.
A hash computed over the headers and body of an email message.
A hash computed over all of the headers of an email message.
A hash computed over the body of an email message.
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the scope attribute.
The Hash class describes a cryptographic hash value; the algorithm and application used to generate it; and
the canonicalization method applied to the object being hashed.
The aggregate classes of the Hash class are: ds:DigestMethod One.
The hash algorithm used to generate the hash.
See Section 4.3.3.5 of [W3C.XMLSIG].
See Section 4.3.3.6 of [W3C.XMLSIG].
The canonicalization method used on the object being hashed.
See Section 4.3.1 of [W3C.XMLSIG].
The application used to calculate the hash.
The HashData class has no attributes.
The FuzzyHash class describes a fuzzy hash and the application used to generate it.
The aggregate classes of the FuzzyHash class are:
The computed fuzzy hash value.
The application used to calculate the hash.
Mechanism by which to extend the data model.
The FuzzyData class has no attributes.
The SignatureData class describes different types of digital signatures on an object.
The aggregate class of the SignatureData class is: Signature One or more.
See Section 4.2 of [W3C.XMLSIG].
The SignatureData class has no attributes.
The IndicatorData class describes indicators and metadata associated with them.
The aggregate class of the IndicatorData class is: Indicator One or more.
A description of an indicator.
The IndicatorData class has no attributes.
The Indicator class describes an indicator.
An indicator consists of observable features and phenomenon that aid in the forensic or proactive detection of malicious activity and associated metadata.
An indicator can be described outright by referencing or composing previously defined indicators or by referencing observables described in the incident report found in this document.
The aggregate classes of the Indicator class are: IndicatorID
An identifier for this indicator.
An alternative identifier for this indicator.
A free form text description of the indicator.
A timestamp of the start of the time period during which this indicator is valid.
A timestamp of the end of the time period during which this indicator is valid.
An estimate of the confidence in the quality of the indicator.
Contact information for this indicator.
An observable feature or phenomenon of this indicator.
A reference to an observable feature or phenomenon defined elsewhere in the document.
A reference to an indicator.
The role of the system in the attack should this indicator be matched to it.
The phase in an attack life cycle during which this indicator might be seen.
A reference to additional information relevant to this indicator.
Mechanism by which to extend the data model.
The Indicator class MUST have exactly one instance of an Observable, IndicatorExpression, ObservableReference, or IndicatorReference class.
The StartTime and EndTime classes can be used to define an interval during which the indicator is valid.
If both classes are present, the indicator is consider valid only during the described interval.
If neither class is provided, the indicator is considered valid during any time interval.
If only a StartTime is provided, the indicator is valid anytime after this timestamp.
If only an EndTime is provided, the indicator is valid anytime prior to this timestamp.
The attributes of the Indicator class are: restriction Optional.
A means by which to extend the restriction attribute.
The IndicatorID class identifies an indicator with a globally unique identifier.
The combination of the name and version attributes and the element content form this identifier.
Indicators generated by given CSIRT MUST NOT reuse the same value unless they are referencing the same indicator.
The content of the class is of type ID and specifies an identifier for an indicator.
The attributes of the IndicatorID class are: name Required.
An identifier describing the CSIRT that created the indicator.
In order to have a globally unique CSIRT name, the fully qualified domain name associated with the CSIRT MUST be used.
This format is identical to the IncidentID@name attribute in Section 3.4.
A version number of an indicator.
The AlternativeIndicatorID class lists alternative identifiers for an indicator.
The aggregate class of the AlternativeIndicatorID class is: IndicatorReference One or more.
A reference to an indicator.
The attributes of the AlternativeIndicatorID class are: restriction Optional.
A means by which to extend the restriction attribute.
The Observable class describes a feature and phenomenon that can be observed or measured for the purposes of detecting malicious behavior.
The aggregate classes of the Observable class are: System Zero or one.
A bulk list of observables.
Mechanism by which to extend the data model.
The Observable class MUST have exactly one of the possible child classes.
The attributes of the Observable class are: restriction Optional.
A means by which to extend the restriction attribute.
The BulkObservable class allows the enumeration of a single type of observable without requiring each one to be encoded individually in multiple instances of the same class.
The type attribute describes the type of observable listed in the child BulkObservableList class.
The BulkObservableFormat class optionally provides additional metadata.
The aggregate classes of the BulkObservable class are: BulkObservableFormat Zero or one.
Provides additional metadata about the observables enumerated in the BulkObservableList class.
A list of observables, one per line.
Each line is separated with either a LF character or CR and LF characters.
The type attribute specifies which observables will be listed.
Mechanism by which to extend the data model.
The attributes of the BulkObservable class are: type Optional.
The type of the observable listed in the child ObservableList class.
These values are maintained in the "BulkObservable type" IANA registry per Section 10.2.
Autonomous System Number (per the Address@category attribute).
Asynchronous Transfer Mode (ATM) address (per the Address@category attribute).
Email address (per the Address@category attribute).
IPv4 host address in dotted decimal notation, e.g., 192.0.2.1 (per the Address@category attribute).
IPv4 network address in dotted decimal notation, slash, significant bits, e.g., 192.0.2.0/24 (per the Address@category attribute).
IPv4 network address in dotted decimal notation, slash, network mask in dotted decimal notation, i.e., 192.0.2.0/255.255.255.0 (per the Address@category attribute).
IPv6 host address, e.g., 2001:DB8::3 (per the Address@category attribute).
IPv6 network address, slash, significant bits, e.g., 2001:
DB8::/32 (per the Address@category attribute).
IPv6 network address, slash, network mask (per the Address@category attribute).
Media Access Control (MAC) address, i.e., a
e:f (per the Address@category attribute).
A URL or URI for a resource (per the Address@category attribute).
A fully qualified domain name or part of a name (e.g., fqdn.example.com, example.com).
A mapping of FQDN to IPv4 address specified as a comma separated list (e.g., "fqdn.example.com, 192.0.2.1").
A mapping of FQDN to IPv6 address specified as a comma separated list (e.g., "fqdn.example.com, 2001:DB8::3").
Same as domain to ipv4 but with a timestamp (in the DATETIME format) of the resolution (e.g., "fqdn.example.com, 192.0.2.1, 2015 06
Same as domain to ipv6 but with a timestamp (in the DATETIME format) of the resolution (e.g., "fqdn.example.com, 2001:
DB8::3, 2015 06 11T00:38:31 06:00").
An IPv4 address, port, and protocol tuple (e.g., 192.0.2.1, 80, TCP).
The protocol name corresponds to the "Keyword" column in the "Assigned Internet Protocol Numbers" registry [IANA.Protocols].
An IPv6 address, port, and protocol tuple (e.g., 2001:
The protocol name corresponds to the "Keyword" column in the "Assigned Internet Protocol Numbers" registry [IANA.Protocols].
A Microsoft Windows registry key.
The format of this hash is described in the Hash class that MUST be present in a sibling BulkObservableFormat class.
An X Mailer field from an email.
A User Agent field from an HTTP request header (e.g., "Mozilla/5.0 (Windows NT 6.3;
The Request URI from an HTTP request header.
The name of a system mutex (mutual exclusion lock).
A value used to indicate that this attribute is extended and the actual value is provided using the corresponding ext   attribute.
A means by which to extend the type attribute.
BulkObservableFormat Class The ObservableFormat class specifies metadata about the format of an observable enumerated in a sibling BulkObservableList class.
The aggregate classes of the BulkObservableFormat class are: Hash Zero or one.
Describes the format of a hash.
Mechanism by which to extend the data model.
The BulkObservableFormat class has no attributes.
Either Hash or AdditionalData MUST be present.
The IndicatorExpression describes an expression composed of observed phenomenon, features, or indicators.
Elements of the expression can be described directly, reference relevant data from other parts of a given IODEF document, or reference previously defined indicators.
All child classes of a given instance of IndicatorExpression form a boolean algebraic expression where the operator between them is determined by the operator attribute.
The aggregate classes of the IndicatorExpression class are: IndicatorExpression Zero or more.
An expression composed of other observables or indicators.
A description of an observable.
A reference to an observable.
A reference to an indicator.
An estimate of the confidence in the quality of the terms expressed in the expression.
Mechanism by which to extend the data model.
The attributes of the IndicatorExpression class are: operator Optional.
The operator to be applied between the child elements.
See Section 3.29.5 for parsing guidance.
The default value is "and".
These values are maintained in the "IndicatorExpression operator" IANA registry per Section 10.2.
A means by which to extend the operator attribute.
Expressions with IndicatorExpression Boolean algebraic expressions can be used to specify relationships between observables and indicators.
These expressions are constructed through the use of the operator attribute and parent  child relationships in IndicatorExpressions.
These expressions should be parsed as follows:
The operator specified by the operator attribute is applied between each of the child elements of the immediate parent IndicatorExpression element.
If no operator attribute is specified, it should be assumed to be the conjunction operator (i.e., operator "and").
A nested IndicatorExpression element with a parent IndicatorExpression is the equivalent of a parentheses in the expression.
The following examples in Figures 66 through 70 illustrate these parsing rules:
Equivalent expression: (O1 AND O2)
Equivalent expression: (O1 OR O2)
Equivalent expression: (NOT (O1 AND O2))
Equivalent expression: ((O1) OR (O2))
Varying Confidence on Particular Observables Invalid algebraic expressions while valid XML MUST NOT be specified.
The ObservableReference describes a reference to an observable feature or phenomenon described elsewhere in the document.
The ObservableReference class has no content.
The ObservableReference Class The ObservableReference class has no content.
The attribute of the ObservableReference class is: uid ref Required.
An identifier that serves as a reference to a class in the IODEF document.
The referenced class will have this identifier set in its observable
The IndicatorReference describes a reference to an indicator.
This reference may be to an indicator described in this IODEF document or in a previously exchanged IODEF document.
The IndicatorReference class has no content.
The attributes of the IndicatorReference class are: uid ref Optional.
An identifier that references an Indicator class in the IODEF document.
The referenced Indicator class will have this identifier set in its IndicatorID class.
An identifier that references an IndicatorID not in this IODEF document.
A version number of an indicator.
Either the uid ref or the euid ref attribute MUST be set.
The AttackPhase class describes a particular phase of an attack life cycle.
The aggregate classes of the AttackPhase class are:
An identifier for the phase of the attack.
A URL to a resource describing this phase of the attack.
A free form text description of this phase of the attack.
A mechanism by which to extend the data model.
AttackPhase MUST have at least one instance of a child class.
The AttackPhase class has no attributes.
This section provides additional requirements and guidance on creating and processing IODEF documents.
Every IODEF document MUST begin with an XML declaration and MUST specify the XML version used.
The character encoding MUST also be explicitly specified.
SHOULD be used unless UTF 16 [RFC2781] is necessary.
Encodings other than UTF 8 and UTF 16 SHOULD NOT be used.
The IODEF conforms to all XML data encoding conventions and constraints.
The XML declaration with UTF 8 character encoding will read as follows: <?
xml version "1.0" encoding "UTF 8" ?
Certain characters have special meaning in XML and MUST not appear in literal form.
Per Section 2.4 of [W3C.XML], these characters MUST be escaped with a numeric character or entity reference.
The IODEF schema declares a namespace of "urn:ietf:
ns:iodef 2.0" and registers it per [W3C.XMLNS].
Each IODEF document MUST include a valid reference to the IODEF schema using the "xsi:schemaLocation" attribute.
An example of such a declaration would look as follows:
<IODEF Document version "2.00" lang "en US" xmlns:
Validation IODEF documents MUST be well formed XML.
It is RECOMMENDED that recipients validate the document against the schema described in Section 8.
However, mere conformance to this schema is not sufficient for a semantically valid IODEF document.
The text of Section 3 describes further formatting and constraints, including some that cannot be conveniently encoded in the schema.
These MUST also be considered by an IODEF implementation.
Furthermore, the enumerated values present in this document are a static list that will be incomplete over time as select attributes can be extended by a corresponding IANA registry per Section 10.2.
Therefore, IODEF implementations SHOULD periodically update their schema and MAY need to update their parsing algorithms to incorporate newly registered values.
The IODEF data model in this document makes a number of changes to [RFC5070].
These changes were largely additive   classes and enumerated values were added.
However, some incompatibilities between [RFC5070] and this new specification were introduced.
These incompatibilities are as follows:
The IODEF Document@version attribute is set to "2.0".
Attributes with enumerated values can now also be extended with IANA registries.
All iodef:MLStringType classes use xml:
IODEF Document also uses xml:lang.
The Service@ip protocol attribute was renamed to @ip protocol.
The Node/NodeName class was removed in favor of representing domain names with Node/DomainData/Name class.
The Node/DataTime class was also removed, so that the Node/DomainData/ DateDomainWasChecked class can represent the time at which the name to address resolution occurred.
NodeRole class was moved to System/NodeRole.
The Reference class is now defined by [RFC7495].
The data previously represented in the Impact class is now in the SystemImpact and IncidentCategory classes.
The Impact class has been removed.
The semantics of Counter@type are now represented in Counter@unit.
The IODEF Document@formatid attribute has been renamed to @format
The Incident/ReportTime class is no longer required.
However, the GenerationTime class is required.
The Fax class was removed and is now represented by a generic Telephone class.
The Telephone, Email, and PostalAddress classes were redefined from improved internationalization.
The "ipv6 net mask" value was removed from the category attribute of Address.
In order to support the dynamic nature of security operations, the IODEF data model will need to continue to evolve.
This section discusses how new data elements can be incorporated into the IODEF.
There is support to add additional enumerated values and new classes.
Adding additional attributes to existing classes is not supported.
These extension mechanisms are designed so that adding new data elements is possible without requiring modifications to this document.
Extensions can be implemented publicly or privately.
With proven value, well documented extensions can be incorporated into future versions of the specification.
Extending the Enumerated Values of Attributes Additional enumerated values can be added to select attributes either through the use of specially marked attributes with the "ext " prefix or through a set of corresponding IANA registries.
The former approach allows for the extension to remain private.
The latter approach is public.
Private Extension of Enumerated Values
The data model supports adding new enumerated values to an attribute without public registration.
For each attribute that supports this extension technique, there is a corresponding attribute in the same element whose name is identical but with a prefix of "ext ".
This special attribute is referred to as the extension attribute.
The attribute being extended is referred to as an extensible attribute.
For example, an extensible attribute named "foo" will have a corresponding extension attribute named "ext foo".
An element may have many extensible attributes.
In addition to a corresponding extension attribute, each extensible attribute has "ext value" as one its possible enumerated values.
Selection of this particular value in an extensible attribute signals that the extension attribute contains data.
Otherwise, this "ext value" value has no meaning.
In order to add a new enumerated value to an extensible attribute, the value of this attribute MUST be set to "ext value", and the new desired value MUST be set in the corresponding extension attribute.
For example, extending the type attribute of the SystemImpact class would look as follows:
<SystemImpact type "ext value" ext type "new attack type">
A given extension attribute MUST NOT be set unless the corresponding extensible attribute has been set to "ext value".
Public Extension of Enumerated Values
The data model also supports publicly extending select enumerated attributes.
A new entry can be added by registering a new entry in the appropriate IANA registry.
Section 10.2 provides a mapping between the extensible attributes and their corresponding registry.
Section 4.3 discusses the XML validation implications of this type of extension.
All extensible attributes that support private extensions also support public extensions.
Extending Classes Classes of the EXTENSION
(iodef:ExtensionType) type can extend the data model.
They provide the ability to have new atomic or XML  encoded data elements in all of the top level classes of the Incident class and in a few of the complex subordinate classes.
As there are multiple instances of the extensible classes in the data model, there is discretion on where to add a new data element.
It is RECOMMENDED that the extension be placed in the most closely related class to the new information.
Extensions using the atomic data types (i.e., all values of the dtype attributes other than "xml") MUST:
Set the element content to the desired value, and 2.
Set the dtype attribute to correspond to the data type of the element content.
The following guidelines exist for extensions using XML (i.e., dtype "xml"): 1.
The element content of the extensible class MUST be set to the desired value, and the dtype attribute MUST be set to "xml".
The extension schema MUST declare a separate namespace.
It is RECOMMENDED that these extensions have the prefix "iodef ".
This recommendation makes readability of the document easier by allowing the reader to infer which namespaces relate to IODEF by inspection.
It is RECOMMENDED that extension schemas follow the naming convention of the IODEF data model.
This too improves the readability of extended IODEF documents.
The names of all elements SHOULD be capitalized.
For elements with composed names, a capital letter SHOULD be used for each word.
Attribute names SHOULD be in lowercase.
Attributes with composed names SHOULD be separated by a hyphen.
Implementations that encounter an unrecognized element, attribute, or attribute value in a supported namespace SHOULD reject the document as a syntax error.
There are security and performance implications in requiring implementations to dynamically download schemas at runtime.
Therefore, implementations MUST NOT download schemas at runtime unless the appropriate precautions are taken.
Implementations also need to contend with the potential of significant network and processing issues.
Some adopters of the IODEF may have private schema definitions that are not publicly available.
Thus, implementations may encounter IODEF documents with references to private schemas that may not be resolvable.
Hence, IODEF document recipients MUST be prepared for a schema definition in an IODEF document never to resolve.
The following schema and XML document excerpt provide a template for an extension schema and its use in the IODEF document.
This example schema defines a namespace of "iodef extension1" and a single element named "newdata".
iodef 2.0" schemaLocation " urn:ietf:params:xml:schema:
> <xs:element name "newdata" type "xs:string" /
The following XML excerpt demonstrates the use of the above schema as an extension to the IODEF.
<IODEF Document version "2.00" lang "en US" xmlns "urn:ietf:params:xml:
<AdditionalData dtype "xml" meaning "xml"> <
> Field that could not be represented elsewhere </iodef extension1:
Deconflicting Private Extensions To disambiguate which private extension is used in an IODEF document, the data model provides a means to identify the source of an extension.
Two attributes in the IODEF Document class, private enum name and private enum id, are used to specify this attribution.
Only a single private extension can be identified in a given IODEF Document.
If an implementor has a single private extension, then only the private enum name attribute needs to be specified.
Multiple distinct private extensions or versioning of a single extension can be attributed by also setting the corresponding private num
The following XML excerpt demonstrates the specification of a private extension from "example.com" with an identifier of "13".
<IODEF Document version "2.00" lang "en US
" private enum name "example.com" private enum
If an unrecognized private extension is encountered in processing, the recipient MAY reject the entire document as a syntax error.
Internationalization Issues Internationalization and localization is of specific concern to the IODEF as it facilitates operational coordination with a diverse set of partners.
The IODEF implements internationalization by relying on XML constructs and through explicit design choices in the data model.
Since the IODEF is implemented as an XML schema, it supports different character encodings, such as UTF 8 and UTF 16, that are possible with XML.
Additionally, each IODEF document MUST specify the language in which its content is encoded.
The language can be specified with the attribute "xml:lang" (per Section 2.12 of [W3C.XML]) in the top level element (i.e., IODEF Document) and lets all other elements inherit that definition.
All IODEF classes with a free form text definition (i.e., all those defined with type iodef:MLStringType) can also specify a language different from the rest of the document.
The data model supports multiple translations of free form text.
) classes have a one to many cardinality to their parent.
This allows the identical text translated into different languages to be encoded in different instances of the same class with a common parent.
This design also enables the creation of a single document containing all the translations.
The IODEF implementation SHOULD extract the appropriate language relevant to the recipient.
Related instances of a given iodef:MLStringType class that are translations of each other are identified by a common identifier set in the translation
The example below shows three instances of a Description class expressed in three different languages.
The relationship between these three instances of the Description class is conveyed by the common value of "1" in the translation
IODEF Document version "2.00" xml
The IODEF balances internationalization support with the need for interoperability.
While the IODEF supports different languages, the data model also relies heavily on standardized enumerated attributes that can crudely approximate the contents of the document.
With this approach, a CSIRT should be able to make some sense of an IODEF document it receives even if the free form text data elements are written in a language unfamiliar to the recipient.
This section provides examples of IODEF documents.
These examples do not represent the full capabilities of the data model or the only way to encode particular information.
A document containing only the mandatory elements and attributes.
xml version "1.0" encoding "UTF 8"?
<IODEF Document version "2.00" xml:
ns:iodef 2.0" xmlns:xsi "http://www.w3.org/2001/XMLSchema instance" xsi:schemaLocation  "http://www.iana.org/assignments/xml registry/schema/ iodef 2.0.xsd"> <Incident purpose "reporting" restriction "private">
> <Contact type "organization" role "creator">
Add more fields to make the document useful
An example of C2 domains from a given campaign. <?
xml version "1.0" encoding "UTF 8"?
A list of C2 domains associated with a campaign
<IODEF Document version "2.00" xml:
ns:iodef 2.0" xmlns:xsi "http://www.w3.org/2001/XMLSchema instance" xsi:schemaLocation  "http://www.iana.org/assignments/xml registry/schema/ iodef 2.0.xsd"> <Incident purpose "watch" restriction "green"> <IncidentID name "
TA 12 AGGRESSIVE BUTTERFLY </ThreatActorID
> <GenerationTime>2015 10 02T11:18:00 05:00</GenerationTime
Summarizes the Indicators of Compromise for the Orange Giraffe campaign of the Aggressive Butterfly crime gang.
> <Contact type "organization" role "creator"
> <Indicator> <IndicatorID name "csirt.example.com" version "1"
>C2 domains</Description> <StartTime>2014 12 02T11:18:00 05:00</StartTime
<Observable> <BulkObservable type "fqdn"> <BulkObservableList> kj290023j09r34.example.com
The IODEF Data Model (XML Schema) <?
:enum "urn:ietf:params:xml:ns:iodef enum 1.0" xmlns:sci "urn:ietf:params:xml:ns:
" elementFormDefault "qualified" attributeFormDefault "unqualified"> <xs:
#" schemaLocation "http://www.w3.org/TR/2002/ REC xmldsig core 20020212/xmldsig core schema.xsd"/>
import namespace "urn:ietf:params:xml:ns:iodef enum 1.0" schemaLocation "http://www.iana.org/assignments/
ns:iodef sci 1.0" schemaLocation "http://www.iana.org/assignments/
documentation> Incident Object Description Exchange Format
"iodef:AdditionalData" minOccurs "0" maxOccurs "
<xs:attribute name "version" type "xs:
:attribute name "format id" type "xs:string" use "optional"/>
"private enum name" type "xs:
id" type "xs:string" use "optional"/
element ref "iodef:AlternativeID" minOccurs "
element ref "iodef:RelatedActivity" minOccurs "0
element ref "iodef:DetectTime" minOccurs "
element ref "iodef:RecoveryTime" minOccurs "
element ref "iodef:ReportTime" minOccurs "
element ref "iodef:Description" minOccurs "0
"iodef:Discovery" minOccurs "0" maxOccurs "
element ref "iodef:Assessment" minOccurs "0" maxOccurs "
element ref "iodef:Method" minOccurs "0" maxOccurs "
element ref "iodef:EventData" minOccurs "0" maxOccurs "
element ref "iodef:IndicatorData" minOccurs "
element ref "iodef:History" minOccurs "
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
<xs:attribute name "purpose" type "incident purpose type" use "required"/>
<xs:attribute name "status" type "incident status type"/
attribute name "restriction" type "iodef:restriction type" default "private" use "optional"/>
:attribute name "observable id" type "xs:ID" use "optional"/
> </xs:element> <xs:simpleType name "incident purpose type">
simpleType name "incident status type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "new"/
attribute name "name" type "xs:string" use "required"/
<xs:attribute name "instance" type "xs:string" use "optional"/>
<xs:attribute name "restriction" type "iodef:restriction type" use "
element ref "iodef:IncidentID" maxOccurs "
<xs:attribute name "restriction" type "iodef:restriction type" use "
element ref "iodef:IncidentID" minOccurs "0
element ref "iodef:URL" minOccurs "0" maxOccurs "
"iodef:ThreatActor" minOccurs "0" maxOccurs "
element ref "iodef:Campaign" minOccurs "0" maxOccurs "
"iodef:IndicatorID" minOccurs "0" maxOccurs "
element ref "iodef:Confidence" minOccurs "
element ref "iodef:Description" minOccurs "0
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
<xs:attribute name "restriction" type "iodef:restriction type" use "
" minOccurs "0" maxOccurs "
element ref "iodef:URL" maxOccurs "
element ref "iodef:Description" minOccurs "0
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
<xs:attribute name "restriction" type "iodef:restriction type" use "
:CampaignID" minOccurs "0" maxOccurs "
element ref "iodef:URL" minOccurs "0" maxOccurs "
element ref "iodef:Description" minOccurs "0
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
<xs:attribute name "restriction" type "iodef:restriction type" use "
element ref "iodef:Description" minOccurs "0
element ref "iodef:RegistryHandle" minOccurs "0
"iodef:PostalAddress" minOccurs "0" maxOccurs "
Email" minOccurs "0" maxOccurs "
"iodef:Telephone" minOccurs "0" maxOccurs "
element ref "iodef:Contact" minOccurs "0" maxOccurs "
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
:attribute name "role" type "contact role type" use "required"/>
<xs:attribute name "type" type "contact type type" use "required"/>
<xs:attribute name "restriction" type "iodef:restriction type" use "
> </xs:element> <xs:simpleType name "contact role type">
simpleType name "contact type type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "person"/
element name "ContactName" type "iodef:MLStringType"/
element name "ContactTitle" type "
extension base "xs:string"> <xs:attribute name "registry" type "registryhandle registry
complexType> </xs:element> <xs:simpleType name "registryhandle registry type">
<xs:element ref "iodef:Description" minOccurs "0
<xs:attribute name "type" type "postaladdress type type" use "optional"/>
element name "PAddress" type "
simpleType name "postaladdress type type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "street"/
element ref "iodef:Description" minOccurs "0
attribute name "type" type "telephone type type" use "optional"/>
element name "TelephoneNumber" type "xs:
simpleType name "telephone type type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "wired"/>
element ref "iodef:Description" minOccurs "0
<xs:attribute name "type" type "email type type" use "optional"/>
> </xs:element> <xs:simpleType name "email type type">
element name "RecoveryTime" type "xs:dateTime"/
element name "Timezone" type "
element ref "iodef:HistoryItem" maxOccurs "
<xs:attribute name "restriction" type "iodef:restriction type" use "
> </xs:element> <xs:element name "HistoryItem"
> <xs:element ref "iodef:IncidentID" minOccurs "
element ref "iodef:Contact" minOccurs "
element ref "iodef:Description" minOccurs "0
" minOccurs "0" maxOccurs "
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
attribute name "action" type "iodef:action type" use "required"/>
<xs:attribute name "restriction" type "iodef:restriction type" use "
:attribute name "observable id" type "xs:ID" use "optional"/
> </xs:element> <xs:element name "DefinedCOA
element ref "iodef:Description" minOccurs "0
" minOccurs "0" maxOccurs "
element ref "iodef:Contact" minOccurs "
attribute name "action" type "iodef:action type" default "other"/>
:attribute name "observable id" type "xs:ID" use "optional"/
element ref "iodef:Description" minOccurs "0
element ref "iodef:Contact" minOccurs "0" maxOccurs "
element ref "iodef:DetectionPattern" minOccurs "0
<xs:attribute name "source" type "discovery source type" use "optional" default "
<xs:attribute name "restriction" type "iodef:restriction type" use "
> </xs:element> <xs:simpleType name "discovery source type">
element ref "iodef:Description" minOccurs "0
element name "DetectionConfiguration" type "xs:string" minOccurs "0
<xs:attribute name "restriction" type "iodef:restriction type" use "
:attribute name "observable id" type "xs:ID" use "optional"/
element ref "iodef:Reference" minOccurs "0" maxOccurs "
element ref "iodef:Description" minOccurs "0
> <xs:element ref "sci:AttackPattern" minOccurs "0
> <xs:element ref "sci:Vulnerability" minOccurs "0" maxOccurs "
> <xs:element ref "sci:Weakness" minOccurs "0
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
<xs:attribute name "restriction" type "iodef:restriction type" use "
element ref "enum:ReferenceName" minOccurs "
element ref "iodef:URL" minOccurs "0" maxOccurs "
element ref "iodef:Description" minOccurs "0
<xs:attribute name "observable id" type "xs:ID" use "optional"/
element ref "iodef:IncidentCategory" minOccurs "0" maxOccurs "
> <xs:choice maxOccurs "unbounded"> <xs:
element ref "iodef:Counter" minOccurs "0" maxOccurs "
"iodef:MitigatingFactor" minOccurs "0" maxOccurs "
element ref "iodef:Confidence" minOccurs "
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
attribute name "restriction" type "iodef:restriction type" use "optional"/>
:attribute name "observable id" type "xs:ID" use "optional"/
element name "IncidentCategory" type "
element name "BusinessImpact" type "
element name "IntendedImpact" type "
element name "MitigatingFactor" type "
element name "Cause" type "
element ref "iodef:Description" minOccurs "0
attribute name "severity" type "iodef:severity type" use "optional"/>
<xs:attribute name "completion" type "iodef:systemimpact completion type" use "
<xs:attribute name "type" type "systemimpact type type" use "optional" default "
> </xs:element> <xs:simpleType name "systemimpact completion type">
element ref "iodef:Description" minOccurs "0
<xs:attribute name "severity" type "businessimpact severity type" use "optional"/>
<xs:attribute name "type" type "businessimpact type type" use "optional" default "
simpleType name "businessimpact severity type"
> <xs:simpleType name "businessimpact type type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "breach
<xs:attribute name "duration" type "iodef:duration
complexType> </xs:element> <xs:simpleType name "timeimpact metric type">
complexType> </xs:element> <xs:element name "Confidence"
attribute name "rating" type "confidence rating type" use "required"/>
> </xs:element> <xs:simpleType name "confidence rating type">
element ref "iodef:Description" minOccurs "0
element ref "iodef:DetectTime" minOccurs "
element ref "iodef:RecoveryTime" minOccurs "
element ref "iodef:ReportTime" minOccurs "
element ref "iodef:Contact" minOccurs "0" maxOccurs "
"iodef:Discovery" minOccurs "0" maxOccurs "
element ref "iodef:Assessment" minOccurs "
element ref "iodef:Method" minOccurs "0" maxOccurs "
"iodef:Flow" minOccurs "0" maxOccurs "
element ref "iodef:Expectation" minOccurs "0
element ref "iodef:Record" minOccurs "
element ref "iodef:EventData" minOccurs "0" maxOccurs "
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
<xs:attribute name "restriction" type "iodef:restriction type" use "
:attribute name "observable id" type "xs:ID" use "optional"/
element ref "iodef:System" maxOccurs "
element ref "iodef:NodeRole" minOccurs "0
element ref "iodef:Service" minOccurs "0" maxOccurs "
element ref "iodef:OperatingSystem" minOccurs "0" maxOccurs "
"iodef:Counter" minOccurs "0" maxOccurs "
"AssetID" type "xs:string" minOccurs "0" maxOccurs "
element ref "iodef:Description" minOccurs "0
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
<xs:attribute name "interface" type "xs:string"/
<xs:attribute name "spoofed" type "yes no unknown type" default "
<xs:attribute name "virtual" type "
yes no unknown type" use "optional" default "
<xs:attribute name "ownership" type "system ownership type" use "optional"/>
<xs:attribute name "ext ownership" type "
<xs:attribute name "restriction" type "iodef:restriction type" use "
:attribute name "observable id" type "xs:ID" use "optional"/
element name "OperatingSystem" type "
simpleType name "system category type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "
> <xs:simpleType name "system ownership type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "organization"/>
element ref "iodef:DomainData" minOccurs "0" maxOccurs "
element ref "iodef:Address" minOccurs "0" maxOccurs "
element ref "iodef:Location" minOccurs "0" maxOccurs "
"iodef:Counter" minOccurs "0" maxOccurs "
attribute name "category" type "address category type" default "ipv6 addr"/
<xs:attribute name "ext category" type "
<xs:attribute name "vlan name" type "xs:
<xs:attribute name "vlan num" type "xs:integer"/>
<xs:attribute name "observable id" type "xs:ID" use "optional"/
complexType> </xs:element> <xs:simpleType name "address category type">
<xs:enumeration value "ipv6 net masked"/
element name "Location" type "
element ref "iodef:Description" minOccurs "0
<xs:attribute name "category" type "noderole category type" use "required"/>
<xs:attribute name "ext category" type "
> </xs:element> <xs:simpleType name "noderole category type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "
> <xs:enumeration value "client partner"/
> <xs:enumeration value "client kiosk"/
> <xs:enumeration value "c2 server"/
element ref "iodef:ServiceName" minOccurs "
element ref "iodef:Port" minOccurs "
element ref "iodef:Portlist" minOccurs "
element ref "iodef:ProtoType" minOccurs "
element ref "iodef:ProtoCode" minOccurs "
element ref "iodef:ProtoField" minOccurs "
element ref "iodef:ApplicationHeader" minOccurs "
element ref "iodef:EmailData" minOccurs "
element ref "iodef:Application" minOccurs "
"ip protocol" type "xs:integer" use "optional"/>
:attribute name "observable id" type "xs:ID" use "optional"/
element name "Port" type "xs:integer"/>
element name "Portlist" type "
element name "ProtoType" type "xs:integer"/>
element name "ProtoCode" type "xs:
> <xs:element name "ProtoField" type "xs:integer"/>
> </xs:element> <xs:element name "ApplicationHeaderField" type "
element ref "iodef:IANAService" minOccurs "
element ref "iodef:URL" minOccurs "0" maxOccurs "
element ref "iodef:Description" minOccurs "0
> </xs:element> <xs:element name "IANAService" type "xs:
element name "Application" type "iodef:SoftwareType"/
attribute name "type" type "counter type type" use "required"/>
<xs:attribute name "unit" type "counter unit type" use "required"/>
attribute name "ext unit" type "xs:string" use "optional"/>
attribute name "meaning" type "xs:string" use "optional"/>
<xs:attribute name "duration" type "iodef:duration
complexType> </xs:element> <xs:simpleType name "counter type type">
simpleType name "counter unit type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "
element ref "iodef:EmailSubject" minOccurs "
element ref "iodef:EmailHeaderField" minOccurs "0" maxOccurs "unbounded"/
element ref "iodef:EmailBody" minOccurs "
element ref "iodef:EmailMessage" minOccurs "
element ref "iodef:HashData" minOccurs "0" maxOccurs "
> <xs:element ref "SignatureData" minOccurs "
<xs:attribute name "observable id" type "xs:ID" use "optional"/
element name "EmailTo" type "xs:
element name "EmailFrom" type "xs:
element name "EmailSubject" type "xs:
<xs:element name "EmailX Mailer" type "xs:
element name "EmailHeaderField" type "
element name "EmailHeaders" type "xs:
element name "EmailBody" type "xs:string"/
element name "EmailMessage" type "xs:
element ref "iodef:DateDomainWasChecked" minOccurs "0"/
element ref "iodef:RegistrationDate" minOccurs "
element ref "iodef:ExpirationDate" minOccurs "
" minOccurs "0" maxOccurs "
element ref "iodef:Nameservers" minOccurs "0
attribute name "system status" type "domaindata system status type"/>
"ext system status" type "xs:
<xs:attribute name "domain status" type "domaindata domain status type"/
<xs:attribute name "ext domain status" type "xs:string" use "optional"/>
:attribute name "observable id" type "xs:ID" use "optional"/
element name "Name" type "xs:
element name "RegistrationDate" type "
element name "ExpirationDate" type "xs:dateTime"/
> <xs:simpleType name "domaindata system status type"
restriction base "xs:string"> <xs:enumeration value "spoofed"/
simpleType name "domaindata domain status type"> <xs:restriction base "xs:string"> <xs:enumeration value "reservedDelegation"/
element name "RelatedDNS" type "
element ref "iodef:Address" maxOccurs "
element name "Server" type "xs:
complexType> </xs:element> <xs:element name "SameDomainContact" type "xs:
element ref "iodef:RecordData" maxOccurs "
<xs:attribute name "restriction" type "iodef:restriction type" use "
element ref "iodef:DateTime" minOccurs "
element ref "iodef:Description" minOccurs "0
element ref "iodef:Application" minOccurs "
element ref "iodef:RecordPattern" minOccurs "0
element ref "iodef:RecordItem" minOccurs "0" maxOccurs "
element ref "iodef:URL" minOccurs "0" maxOccurs "
element ref "iodef:FileData" minOccurs "0
"iodef:WindowsRegistryKeysModified" minOccurs "0" maxOccurs "
element ref "iodef:CertificateData" minOccurs "0" maxOccurs "
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
<xs:attribute name "restriction" type "iodef:restriction type" use "
:attribute name "observable id" type "xs:ID" use "optional"/
attribute name "type" type "recordpattern type type" use "required"/>
attribute name "offset" type "xs:
<xs:attribute name "offsetunit" type "recordpattern offsetunit type" use "optional" default "
<xs:attribute name "instance" type "xs:integer" use "optional"/
complexType> </xs:element> <xs:simpleType name "recordpattern type type">
> <xs:simpleType name "recordpattern offsetunit type"
element name "RecordItem" type "
element ref "iodef:Key" maxOccurs "unbounded"/
<xs:attribute name "observable id" type "xs:ID" use "optional"/
element ref "iodef:Value" minOccurs "
attribute name "registryaction" type "key registryaction
:attribute name "observable id" type "xs:ID" use "optional"/
element name "KeyName" type "xs:
<xs:element name "Value" type "xs:string"/
simpleType name "key registryaction type"
element ref "iodef:File" minOccurs "1" maxOccurs "
<xs:attribute name "restriction" type "iodef:restriction type" use "
:attribute name "observable id" type "xs:ID" use "optional"/
element ref "iodef:FileName" minOccurs "
element ref "iodef:FileSize" minOccurs "
<xs:element ref "FileType" minOccurs "
element ref "iodef:URL" minOccurs "0" maxOccurs "
element ref "iodef:HashData" minOccurs "
element ref "iodef:SignatureData" minOccurs "
element ref "iodef:AssociatedSoftware" minOccurs "
element ref "iodef:FileProperties" minOccurs "0" maxOccurs "
<xs:attribute name "observable id" type "xs:ID" use "optional"/
element name "FileName" type "xs:string"/
element name "FileSize" type "xs:
element name "FileType" type "xs:string"/
<xs:element name "AssociatedSoftware" type "iodef:SoftwareType"/
element name "FileProperties" type "
element ref "iodef:HashTargetID" minOccurs "
"iodef:Hash" minOccurs "0" maxOccurs "
element ref "iodef:FuzzyHash" minOccurs "0
attribute name "scope" type "hashdata scope type" use "required"/>
element name "HashTargetID" type "xs:string"/
simpleType name "hashdata scope type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "file contents"/
element ref "iodef:Application" minOccurs "
element ref "iodef:FuzzyHashValue" maxOccurs "
element ref "iodef:Application" minOccurs "
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
element name "FuzzyHashValue" type "iodef
element ref "ds:Signature" maxOccurs "
element ref "iodef:Certificate" maxOccurs "unbounded"/
<xs:attribute name "restriction" type "iodef:restriction type" use "
:attribute name "observable id" type "xs:ID" use "optional"/
element ref "iodef:Description" minOccurs "0
<xs:attribute name "observable id" type "xs:ID" use "optional"/
element ref "iodef:Indicator" minOccurs "1" maxOccurs "
" minOccurs "0" maxOccurs "
element ref "iodef:Description" minOccurs "0
element ref "iodef:Confidence" minOccurs "
element ref "iodef:Contact" minOccurs "0" maxOccurs "
element ref "iodef:NodeRole" minOccurs "0
element ref "iodef:AttackPhase" minOccurs "0
element ref "iodef:Reference" minOccurs "0" maxOccurs "
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
<xs:attribute name "restriction" type "iodef:restriction type" use "
<xs:attribute name "name" type "xs:string" use "required"/
<xs:attribute name "version" type "xs:string" use "required"/
complexType> </xs:element> <xs:element name "AlternativeIndicatorID">
element ref "iodef:IndicatorID" maxOccurs "
<xs:attribute name "restriction" type "iodef:restriction type" use "
element ref "iodef:System" minOccurs "
element ref "iodef:Address" minOccurs "
element ref "iodef:DomainData" minOccurs "
element ref "iodef:Service" minOccurs "
element ref "iodef:EmailData" minOccurs "
element ref "iodef:WindowsRegistryKeysModified" minOccurs "
element ref "iodef:FileData" minOccurs "
element ref "iodef:CertificateData" minOccurs "
element ref "iodef:RegistryHandle" minOccurs "
element ref "iodef:RecordData" minOccurs "
element ref "iodef:EventData" minOccurs "
element ref "iodef:Incident" minOccurs "
element ref "iodef:Expectation" minOccurs "
element ref "iodef:Reference" minOccurs "
element ref "iodef:Assessment" minOccurs "
element ref "iodef:DetectionPattern" minOccurs "
element ref "iodef:HistoryItem" minOccurs "
element ref "iodef:BulkObservable" minOccurs "
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
> <xs:attribute name "restriction" type "iodef:restriction type" use "
element ref "iodef:BulkObservableFormat" minOccurs "
<xs:attribute name "type" type "bulkobservable type type" use "required"/
> </xs:element> <xs:simpleType name "bulkobservable type type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "asn"/
> <xs:enumeration value "ipv4 addr"/
> <xs:enumeration value "domain name"/
<xs:enumeration value "domain to ipv4"/>
<xs:enumeration value "domain to ipv6"/
<xs:enumeration value "domain to ipv4 timestamp"/>
<xs:enumeration value "domain to ipv6
<xs:enumeration value "windows reg key"/
> <xs:enumeration value "http user agent"/
enumeration value "http request uri"/
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
> </xs:element> <xs:element name "BulkObservableList" type "xs:
element ref "iodef:Confidence" minOccurs "
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
<xs:attribute name "operator" type "indicatorexpression operator type" use "optional" default "and"/
> </xs:element> <xs:simpleType name "indicatorexpression operator type">
attribute name "uid ref" type "xs:IDREF" use "required"/
complexType> </xs:element> <xs:element name "IndicatorReference">
attribute name "uid ref" type "xs:
<xs:attribute name "euid ref" type "xs:string" use "optional"/>
<xs:attribute name "version" type "xs:string" use "optional"/
" minOccurs "0" maxOccurs "
element ref "iodef:URL" maxOccurs "
element ref "iodef:Description" minOccurs "0
element ref "iodef:AdditionalData" minOccurs "0" maxOccurs "
element name "AttackPhaseID" type "xs:
element name "AdditionalData" type "
element name "Description" type "
restriction base "xs:float"> <xs:minExclusive value "0"/
attribute name "translation id" type "xs:string" use "optional"/>
restriction base "xs:string"> <xs:pattern value "
restriction base "xs:string"> <xs:pattern value "Z
complexType name "ExtensionType" mixed "true"
<xs:any namespace "##any" processContents "lax" minOccurs "0" maxOccurs "unbounded"/
<xs:attribute name "name" type "xs:string" use "optional"/>
attribute name "meaning" type "xs:string" use "optional"/>
<xs:attribute name "formatid" type "xs:
<xs:attribute name "restriction" type "iodef:restriction type" use "
:attribute name "observable id" type "xs:ID" use "optional"/
element ref "iodef:SoftwareReference" minOccurs "
element ref "iodef:URL" minOccurs "0" maxOccurs "
element ref "iodef:Description" minOccurs "0
<xs:any namespace "##any" processContents "lax" minOccurs "0" maxOccurs "unbounded"/
attribute name "spec name" type "softwarereference spec name type" use "required"/>
"ext spec name" type "xs:
<xs:attribute name "dtype" type "softwarereference dtype type" use "optional"/>
<xs:attribute name "ext dtype" type "xs:string" use "optional"/
> </xs:element> <xs:simpleType name "softwarereference spec name type">
> <xs:simpleType name "softwarereference dtype type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "
yes no unknown type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "yes"/
simpleType name "restriction type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "default"/>
simpleType name "duration type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "second"/>
simpleType name "action type"> <xs:restriction base "xs:NMTOKEN"> <xs:enumeration value "nothing"/>
enumeration value "rate limit port"/
enumeration value "watch and report"/
The IODEF data model does not directly introduce security or privacy issues.
However, as the data encoded by the IODEF might be considered sensitive by the parties exchanging it or by those described by it, care needs to be taken to ensure appropriate handling during the document construction, exchange, processing, archiving, subsequent retrieval, and analysis.
The underlying messaging format and protocol used to exchange instances of the IODEF MUST provide appropriate guarantees of confidentiality, integrity, and authenticity.
The use of a standardized security protocol is encouraged.
The Real time Inter  network Defense (RID) protocol [RFC6545] and its associated transport binding
IODEF/RID over HTTP/TLS [RFC6546] provide such security.
An IODEF implementation may act on the data in the document.
These actions might be explicitly requested in the document or the result of analytical logic that triggered on data in the document.
For this reason, care must be taken by IODEF implementations to properly authenticate the sender and receiver of the document.
The sender needs confidence that sensitive information and timely requests for action are sent to the correct recipient.
The recipient may interpret the contents of the document differently based on who sent it or vary actions based on the sender.
While the sender of the document may explicitly convey confidence in the data in a granular way using the Confidence class, the recipient is free to ignore or refine this information to make its own assessment.
Ambiguous Confidence elements (where it is unclear to which of a set of other elements the Confidence element relates) in a document MUST be ignored by the recipient.
Certain classes may require out of band coordination to agree upon their semantics (e.g., Confidence@rating "low" or DefinedCOA).
This coordination MUST occur prior to operational data exchange to prevent the incorrect interpretation of these select data elements.
When parsing these data elements, implementations should validate, when possible, that they conform to the agreed upon semantics.
These semantics may need to be periodically reevaluated.
Executable content of various forms could be embedded into the IODEF document directly or through an extension.
Implementation MUST handle this content with care to prevent unintentional automated execution.
The following classes are explicitly intended to represent content that might be executable:  All classes of type iodef:ExtensionType and the RecordPattern class can represent arbitrary binary strings such as legitimate software programs or malware.
The EmailMessage and EmailBody classes can represent email attachments that can contain arbitrary content.
The DetectionPattern class could specify a machine readable configuration that directs the execution of the corresponding tool.
Per Section 4.3, IODEF implementations will need to periodically consult the IANA registries specified in Section 10.2 to discover newly registered enumerated attribute values.
These implementations MUST communicate with IANA in a way that ensures the integrity of the values and the authenticity of the source.
HTTPS over TLS [RFC2818][RFC5246] provides such security.
The IODEF contains numerous fields that are identifiers that could be linked to an individual or organization.
IODEF documents may contain sensitive information about these identified parties; repeated document exchanges about the same and related parties may enable the correlation of data about them.
Likewise, a party may report on another to a third party without their knowledge.
When creating an IODEF document, careful consideration must be given to what information is shared.
Personal identifiers and attributable sensitive information should only be shared when necessary.
When exchanging documents, transport security MUST provide document  level confidentiality.
XML element level confidentiality can also be provided by using [W3C.XMLENC].
In order to suggest data processing and handling guidelines of the encoded information, the IODEF allows a document sender to convey a privacy policy using the restriction attribute.
The various instances of this attribute allow different data elements of the document to be covered by dissimilar policies.
While flexible, it must be stressed that this approach only serves as a guideline from the sender, as the recipient is free to ignore it.
Although outside of the scope of an IODEF implementation, the contents of IODEF documents and any derived analysis should be archived with appropriate confidentiality controls.
Likewise, access to retrieve and analyze this data should be restricted to authorized users.
This document registers a namespace, an XML schema, and a number of registries that map to enumerated values defined in the data model.
It also defines an Expert Review process for IODEF related XML registry entries.
This document uses URNs to describe an XML namespace and schema conforming to a registry mechanism described in [RFC3688].
Registration for the IODEF namespace:
: See the author in the "Author's Address" section of this document.
Namespace URIs do not represent an XML specification.
Registration for the IODEF XML schema:  URI:
: See the first author of the "Author's Address" section of this document.
: See Section 8 of this document.
This document creates 34 identically structured registries to be managed by IANA:
Name of the parent registry: "Incident Object Description Exchange Format v2 (IODEF)"  URL of the registry:
A value for a given IODEF attribute.
It MUST conform to the formatting specified by the IODEF ENUM data type which is implemented as an "xs:NMTOKEN" type per Section 3.3.4 of [W3C.SCHEMA.DTYPES].
The value SHOULD conform to the convention specified in Section 5.2.
A short description of the enumerated value.
An optional list of URIs to further describe the value.
Allocation policy: Expert Review per [RFC5226].
This reviewer will ensure that the requested registry entry conforms to the prescribed formatting.
The reviewer will also ensure that the entry is an appropriate value for the attribute per the information model (Section 3).
The registries to be created are named in the "Registry Name" column of Table 1.
Each registry is initially populated with values and descriptions that come from an attribute specified in the IODEF schema
(Section 8) whose description is found in a sub section of the information model (Section 3).
The initial values for the Value and Description fields of a given registry are listed in the "IV (Value)" and "IV (Desc.)" columns, respectively.
The "IV (Value)" points to a given schema type per Section 8.
Each enumerated value in the schema gets a corresponding entry in a given registry.
The "IV (Desc.)" points to a section in the text of this document that describes each enumerated value.
The initial value of the Reference field of every registry entry described below should be this document.
IANA Enumerated Value Registries 10.3.
Expert Review of IODEF Related XML Registry Entries IODEF class extensions, per Section 5.2, could register their namespaces and schemas with the IANA XML namespace ("ns" on <http://www.iana.org/assignments/xml registry/>) and schema registries ("schema" on <http://www.iana.org/assignments/ xml registry/>) described in [RFC3688].
In addition to any reviews required by IANA, changes to the XML "schema" registry for schema names beginning with "urn:ietf:
:iodef" are subject to an additional IODEF Expert Review [RFC5226] to ensure compatibility with IODEF and other existing IODEF extensions.
The IODEF expert(s) for these reviews will be designated by the IETF Security Area Directors.
