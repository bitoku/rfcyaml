- contents:
  - '                Securing Block Storage Protocols over IP

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document discusses how to secure block storage and storage\n
    \  discovery protocols running over IP (Internet Protocol) using IPsec\n   and
    IKE (Internet Key Exchange).  Threat models and security\n   protocols are developed
    for iSCSI (Internet Protocol Small Computer\n   System Interface), iFCP (Internet
    Fibre Channel Storage Networking)\n   and FCIP (Fibre Channel over TCP/IP), as
    well as the iSNS (Internet\n   Storage Name Server) and SLPv2 (Service Location
    Protocol v2)\n   discovery protocols.  Performance issues and resource constraints
    are\n   analyzed.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction .................................................
    \ 3\n       1.1.  iSCSI Overview .........................................  3\n
    \      1.2.  iFCP Overview ..........................................  4\n       1.3.
    \ FCIP Overview ..........................................  4\n       1.4.  IPsec
    Overview .........................................  4\n       1.5.  Terminology
    ............................................  6\n       1.6.  Requirements Language
    ..................................  7\n   2.  Block Storage Protocol Security
    ..............................  7\n       2.1.  Security Requirements  .................................
    \ 7\n       2.2.  Resource Constraints ................................... 10\n
    \      2.3.  Security Protocol ...................................... 12\n       2.4.
    \ iSCSI Authentication ................................... 16\n       2.5.  SLPv2
    Security ......................................... 18\n       2.6.  iSNS Security
    .......................................... 24\n   3.  iSCSI security Inter-Operability
    Guidelines .................. 28\n       3.1.  iSCSI Security Issues ..................................
    28\n       3.2.  iSCSI and IPsec Interaction ............................ 29\n
    \      3.3.  Initiating a New iSCSI Session ......................... 30\n       3.4.
    \ Graceful iSCSI Teardown ................................ 31\n       3.5.  Non-graceful
    iSCSI Teardown ............................ 31\n       3.6.  Application Layer
    CRC .................................. 32\n   4.  iFCP and FCIP Security Issues
    ................................ 34\n       4.1.  iFCP and FCIP Authentication
    Requirements .............. 34\n       4.2.  iFCP Interaction with IPsec and IKE
    .................... 34\n       4.3.  FCIP Interaction with IPsec and IKE ....................
    35\n   5.  Security Considerations ...................................... 36\n
    \      5.1.  Transport Mode Versus Tunnel Mode ...................... 36\n       5.2.
    \ NAT Traversal .......................................... 39\n       5.3.  IKE
    Issues ............................................. 40\n       5.4.  Rekeying
    Issues ........................................ 40\n       5.5.  Transform Issues
    ....................................... 43\n       5.6.  Fragmentation Issues
    ................................... 45\n       5.7.  Security Checks ........................................
    46\n       5.8.  Authentication Issues .................................. 47\n
    \      5.9.  Use of AES in Counter Mode ............................. 51\n   6.
    \ IANA Considerations .......................................... 51\n       6.1.
    \ Definition of Terms .................................... 52\n       6.2.  Recommended
    Registration Policies ...................... 52\n   7.  Normative References .........................................
    52\n   8.  Informative References ....................................... 54\n
    \  9.  Acknowledgments .............................................. 58\n   Appendix
    A - Well Known Groups for Use with SRP  ................. 59\n   Appendix B -
    Software Performance of IPsec Transforms  ........... 61\n       B.1.  Authentication
    Transforms .............................. 61\n       B.2.  Encryption and Authentication
    Transforms ............... 64\n   Authors' Addresses ...............................................
    69\n   Full Copyright Statement ......................................... 70\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This specification discusses use of the IPsec protocol suite
    for\n   protecting block storage protocols over IP networks (including iSCSI,\n
    \  iFCP and FCIP), as well as storage discovery protocols (iSNS and\n   SLPv2).\n"
  - contents:
    - "1.1.  iSCSI Overview\n   iSCSI, described in [RFC3720], is a connection-oriented\n
      \  command/response protocol that runs over TCP, and is used to access\n   disk,
      tape and other devices.  iSCSI is a client-server protocol in\n   which clients
      (initiators) open connections to servers (targets) and\n   perform an iSCSI
      login.\n   This document uses the SCSI terms initiator and target for clarity\n
      \  and to avoid the common assumption that clients have considerably\n   less
      computational and memory resources than servers; the reverse is\n   often the
      case for SCSI, as targets are commonly dedicated devices of\n   some form.\n
      \  The iSCSI protocol has a text based negotiation mechanism as part of\n   its
      initial (login) procedure.  The mechanism is extensible in what\n   can be negotiated
      (new text keys and values can be defined) and also\n   in the number of negotiation
      rounds (e.g., to accommodate\n   functionality such as challenge-response authentication).\n
      \  After a successful login, the iSCSI initiator may issue SCSI commands\n   for
      execution by the iSCSI target, which returns a status response\n   for each
      command, over the same connection.  A single connection is\n   used for both
      command/status messages as well as transfer of data\n   and/or optional command
      parameters.  An iSCSI session may have\n   multiple connections, but a separate
      login is performed on each.  The\n   iSCSI session terminates when its last
      connection is closed.\n   iSCSI initiators and targets are application layer
      entities that are\n   independent of TCP ports and IP addresses.  Initiators
      and targets\n   have names whose syntax is defined in [RFC3721].  iSCSI sessions\n
      \  between a given initiator and target are run over one or more TCP\n   connections
      between those entities.  That is, the login process\n   establishes an association
      between an iSCSI Session and the TCP\n   connection(s) over which iSCSI PDUs
      will be carried.\n   While the iSCSI login may include mutual authentication
      of the iSCSI\n   endpoints and negotiation of session parameters, iSCSI does
      not\n   define its own per-packet authentication, integrity, confidentiality\n
      \  or replay protection mechanisms.  Rather, it relies upon the IPsec\n   protocol
      suite to provide per-packet data confidentiality and\n   integrity and authentication
      services, with IKE as the key management\n   protocol.  iSCSI uses TCP to provide
      congestion control, error\n   detection and error recovery.\n"
    title: 1.1.  iSCSI Overview
  - contents:
    - "1.2.  iFCP Overview\n   iFCP, defined in [iFCP], is a gateway-to-gateway protocol,
      which\n   provides transport services to Fibre Channel devices over a TCP/IP\n
      \  network.  iFCP allows interconnection and networking of existing\n   Fibre
      Channel devices at wire speeds over an IP network.  iFCP\n   implementations
      emulate fabric services in order to improve fault\n   tolerance and scalability
      by fully leveraging IP technology.  Each\n   TCP connection is used to support
      storage traffic between a unique\n   pair of Fibre Channel N_PORTs.\n   iFCP
      does not have a native, in-band security mechanism.  Rather, it\n   relies upon
      the IPsec protocol suite to provide data confidentiality\n   and authentication
      services, and IKE as the key management protocol.\n   iFCP uses TCP to provide
      congestion control, error detection and\n   error recovery.\n"
    title: 1.2.  iFCP Overview
  - contents:
    - "1.3.  FCIP Overview\n   FCIP, defined in [FCIP], is a pure FC encapsulation
      protocol that\n   transports FC frames.  Current specification work intends
      this for\n   interconnection of Fibre Channel switches over TCP/IP networks,
      but\n   the protocol is not inherently limited to connecting FC switches.\n
      \  FCIP differs from iFCP in that no interception or emulation of fabric\n   services
      is involved.  One or more TCP connections are bound to an\n   FCIP Link, which
      is used to realize Inter-Switch Links (ISLs) between\n   pairs of Fibre Channel
      entities.  FCIP Frame Encapsulation is\n   described in [RFC3643].\n   FCIP
      does not have a native, in-band security mechanism.  Rather, it\n   relies upon
      the IPsec protocol suite to provide data confidentiality\n   and authentication
      services, and IKE as the key management protocol.\n   FCIP uses TCP to provide
      congestion control, error detection and\n   error recovery.\n"
    title: 1.3.  FCIP Overview
  - contents:
    - "1.4.  IPsec Overview\n   IPsec is a protocol suite which is used to secure
      communication at\n   the network layer between two peers.  The IPsec protocol
      suite is\n   specified within the IP Security Architecture [RFC2401], IKE\n
      \  [RFC2409][RFC2412], IPsec Authentication Header (AH) [RFC2402] and\n   IPsec
      Encapsulating Security Payload (ESP) [RFC2406] documents.  IKE\n   is the key
      management protocol while AH and ESP are used to protect\n   IP traffic.\n   An
      IPsec SA is a one-way security association, uniquely identified by\n   the 3-tuple:
      Security Parameter Index (SPI), protocol (ESP) and\n   destination IP.  The
      parameters for an IPsec security association are\n   typically established by
      a key management protocol.  These include\n   the encapsulation mode, encapsulation
      type, session keys and SPI\n   values.\n   IKE is a two phase negotiation protocol
      based on the modular exchange\n   of messages defined by ISAKMP [RFC2408],and
      the IP Security Domain of\n   Interpretation (DOI) [RFC2407].  IKE has two phases,
      and accomplishes\n   the following functions:\n   [1]  Protected cipher suite
      and options negotiation - using keyed\n        MACs and encryption and anti-replay
      mechanisms\n   [2]  Master key generation - such as via MODP Diffie-Hellman\n
      \       calculations\n   [3]  Authentication of end-points\n   [4]  IPsec SA
      management (selector negotiation, options negotiation,\n        create, delete,
      and rekeying)\n   Items 1 through 3 are accomplished in IKE Phase 1, while item
      4 is\n   handled in IKE Phase 2.\n   An IKE Phase 2 negotiation is performed
      to establish both an inbound\n   and an outbound IPsec SA.  The traffic to be
      protected by an IPsec SA\n   is determined by a selector which has been proposed
      by the IKE\n   initiator and accepted by the IKE Responder.  In IPsec transport\n
      \  mode, the IPsec SA selector can be a \"filter\" or traffic classifier,\n
      \  defined as the 5-tuple: <Source IP address, Destination IP address,\n   transport
      protocol (UDP/SCTP/TCP), Source port, Destination port>.\n   The successful
      establishment of a IKE Phase-2 SA results in the\n   creation of two uni-directional
      IPsec SAs fully qualified by the\n   tuple <Protocol (ESP/AH), destination address,
      SPI>.\n   The session keys for each IPsec SA are derived from a master key,\n
      \  typically via a MODP Diffie-Hellman computation.  Rekeying of an\n   existing
      IPsec SA pair is accomplished by creating two new IPsec SAs,\n   making them
      active, and then optionally deleting the older IPsec SA\n   pair.  Typically
      the new outbound SA is used immediately, and the old\n   inbound SA is left
      active to receive packets for some locally defined\n   time, perhaps 30 seconds
      or 1 minute.\n"
    title: 1.4.  IPsec Overview
  - contents:
    - "1.5.  Terminology\n   Fibre Channel\n      Fibre Channel (FC) is a gigabit
      speed networking technology\n      primarily used to implement Storage Area
      Networks (SANs), although\n      it also may be used to transport other frames
      types as well,\n      including IP.  FC is standardized under American National
      Standard\n      for Information Systems of the InterNational Committee for\n
      \     Informational Technology Standards (ANSI-INCITS) in its T11\n      technical
      committee.\n   FCIP\n       Fibre Channel over IP (FCIP) is a protocol for interconnecting\n
      \     Fibre Channel islands over IP Networks so as to form a unified SAN\n      in
      a single Fibre Channel fabric.  The principal FCIP interface\n      point to
      the IP Network is the FCIP Entity.  The FCIP Link\n      represents one or more
      TCP connections that exist between a pair\n      of FCIP Entities.\n   HBA\n
      \     Host Bus Adapter (HBA) is a generic term for a SCSI interface to\n      other
      device(s); it's roughly analogous to the term Network\n      Interface Card
      (NIC) for a TCP/IP network interface, except that\n      HBAs generally have
      on-board SCSI implementations, whereas most\n      NICs do not implement TCP,
      UDP, or IP.\n   iFCP\n      iFCP is a gateway-to-gateway protocol, which provides
      Fibre\n      Channel fabric services to Fibre Channel devices over a TCP/IP\n
      \     network.\n   IP block storage protocol\n      Where used within this document,
      the term \"IP block storage\n      protocol\" applies to all block storage protocols
      running over IP,\n      including iSCSI, iFCP and FCIP.\n   iSCSI\n      iSCSI
      is a client-server protocol in which clients (initiators)\n      open connections
      to servers (targets).\n   iSNS\n      The Internet Storage Name Server (iSNS)
      protocol provides for\n      discovery and management of iSCSI and Fibre Channel
      (FCP) storage\n      devices.  iSNS applications store iSCSI and FC device attributes\n
      \     and monitor their availability and reachability, providing a\n      consolidated
      information repository for an integrated IP block\n      storage network.  iFCP
      requires iSNS for discovery and management,\n      while iSCSI may use iSNS
      for discovery, and FCIP does not use\n      iSNS.\n   initiator\n      The iSCSI
      initiator connects to the target on well-known TCP port\n      3260.  The iSCSI
      initiator then issues SCSI commands for execution\n      by the iSCSI target.\n
      \  target\n      The iSCSI target listens on a well-known TCP port for incoming\n
      \     connections, and  returns a status response for each command\n      issued
      by the iSCSI initiator, over the same connection.\n"
    title: 1.5.  Terminology
  - contents:
    - "1.6.  Requirements Language\n   In this document, the key words \"MAY\", \"MUST,
      \"MUST NOT\", \"OPTIONAL\",\n   \"RECOMMENDED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\",
      and \"SHOULD NOT\", are\n   to be interpreted as described in [RFC2119].\n   Note
      that requirements specified in this document apply only to use\n   of IPsec
      and IKE with IP block storage protocols.  Thus, these\n   requirements do not
      apply to IPsec implementations in general.\n   Implementation requirements language
      should therefore be assumed to\n   relate to the availability of features for
      use with IP block storage\n   security only.\n   Although the security requirements
      in this document are already\n   incorporated into the iSCSI [RFC3720], iFCP
      [iFCP] and FCIP [FCIP]\n   standards track documents, they are reproduced here
      for convenience.\n   In the event of a discrepancy, the individual protocol
      standards\n   track documents take precedence.\n"
    title: 1.6.  Requirements Language
  title: 1.  Introduction
- contents:
  - '2.  Block Storage Protocol Security

    '
  - contents:
    - "2.1.  Security Requirements\n   IP Block storage protocols such as iSCSI, iFCP
      and FCIP are used to\n   transmit SCSI commands over IP networks.  Therefore,
      both the control\n   and data packets of these IP block storage protocols are
      vulnerable\n   to attack.  Examples of attacks include:\n   [1]  An adversary
      may attempt to acquire confidential data and\n        identities by snooping
      data packets.\n   [2]  An adversary may attempt to modify packets containing
      data and\n        control messages.\n   [3]  An adversary may attempt to inject
      packets into an IP block\n        storage connection.\n   [4]  An adversary
      may attempt to hijack TCP connection(s)\n        corresponding to an IP block
      storage session.\n   [5]  An adversary may launch denial of service attacks
      against IP\n        block storage devices such as by sending a TCP reset.\n
      \  [6]  An adversary may attempt to disrupt security negotiation\n        process,
      in order to weaken the authentication, or gain access\n        to user passwords.
      \ This includes disruption of application-\n        layer authentication negotiations
      such as iSCSI Login.\n   [7]  An adversary may attempt to impersonate a legitimate
      IP block\n        storage entity.\n   [8]  An adversary may launch a variety
      of attacks (packet\n        modification or injection, denial of service) against
      the\n        discovery (SLPv2 [RFC2608]) or discovery and management (iSNS\n
      \       [iSNS]) process.  iSCSI can use SLPv2 or iSNS.  FCIP only uses\n        SLPv2,
      and iFCP only uses iSNS.\n   Since iFCP and FCIP devices are the last line of
      defense for a whole\n   Fibre Channel island, the above attacks, if successful,
      could\n   compromise the security of all the Fibre Channel hosts behind the\n
      \  devices.\n   To address the above threats, IP block storage security protocols\n
      \  must support confidentiality, data origin authentication, integrity,\n   and
      replay protection on a per-packet basis.  Confidentiality\n   services are important
      since IP block storage traffic may traverse\n   insecure public networks.  The
      IP block storage security protocols\n   must support perfect forward secrecy
      in the rekeying process.\n   Bi-directional authentication of the communication
      endpoints MUST be\n   provided.  There is no requirement that the identities
      used in\n   authentication be kept confidential (e.g., from a passive\n   eavesdropper).\n
      \  For a security protocol to be useful, CPU overhead and hardware\n   availability
      must not preclude implementation at 1 Gbps today.\n   Implementation feasibility
      at 10 Gbps is highly desirable, but may\n   not be demonstrable at this time.
      \ These performance levels apply to\n   aggregate throughput, and include all
      TCP connections used between IP\n   block storage endpoints.  IP block storage
      communications typically\n   involve multiple TCP connections.  Performance
      issues are discussed\n   further in Appendix B.\n   Enterprise data center networks
      are considered mission-critical\n   facilities that must be isolated and protected
      from possible security\n   threats.  Such networks are often protected by security
      gateways,\n   which at a minimum provide a shield against denial of service\n
      \  attacks.  The IP block storage security architecture should be able\n   to
      leverage the protective services of the existing security\n   infrastructure,
      including firewall protection, NAT and NAPT services,\n   and VPN services available
      on existing security gateways.\n   When iFCP or FCIP devices are deployed within
      enterprise networks, IP\n   addresses will be typically be statically assigned
      as is the case\n   with most routers and switches.  Consequently, support for
      dynamic IP\n   address assignment, as described in [RFC3456], will typically
      not be\n   required, although it cannot be ruled out.  Such facilities will
      also\n   be relevant to iSCSI hosts whose addresses are dynamically assigned.\n
      \  As a result, the IP block storage security protocols must not\n   introduce
      additional security vulnerabilities where dynamic address\n   assignment is
      supported.\n   While IP block storage security is mandatory to implement, it
      is not\n   mandatory to use.  The security services used depend on the\n   configuration
      and security policies put in place.  For example,\n   configuration will influence
      the authentication algorithm negotiated\n   within iSCSI Login, as well as the
      security services\n   (confidentiality, data origin authentication, integrity,
      replay\n   protection) and transforms negotiated when IPsec is used to protect\n
      \  IP block storage protocols such as iSCSI, iFCP and FCIP.\n   FCIP implementations
      may allow enabling and disabling security\n   mechanisms at the granularity
      of an FCIP Link.  For iFCP, the\n   granularity corresponds to an iFCP Portal.
      \ For iSCSI, the\n   granularity of control is typically that of an iSCSI session,\n
      \  although it is possible to exert control down to the granularity of\n   the
      destination IP address and TCP port.\n   Note that with IPsec, security services
      are negotiated at the\n   granularity of an IPsec SA, so that IP block storage
      connections\n   requiring a set of security services different from those negotiated\n
      \  with existing IPsec SAs will need to negotiate a new IPsec SA.\n   Separate
      IPsec SAs are also advisable where quality of service\n   considerations dictate
      different handling of IP block storage\n   connections.  Attempting to apply
      different quality of service to\n   connections handled by the same IPsec SA
      can result in reordering,\n   and falling outside the replay window.  For a
      discussion of the\n   issues, see [RFC2983].\n   IP block storage protocols
      can be expected to carry sensitive data\n   and provide access to systems and
      data that require protection\n   against security threats.  SCSI and Fibre Channel
      currently contain\n   little in the way of security mechanisms, and rely on
      physical\n   security, administrative security, and correct configuration of
      the\n   communication medium and systems/devices attached to it for their\n
      \  security properties.\n   For most IP networks, it is inappropriate to assume
      physical\n   security, administrative security, and correct configuration of
      the\n   network and all attached nodes (a physically isolated network in a\n
      \  test lab may be an exception).  Therefore, authentication SHOULD be\n   used
      by IP block storage protocols (e.g., iSCSI SHOULD use one of its\n   in-band
      authentication mechanisms or the authentication provided by\n   IKE) in order
      to provide a minimal assurance that connections have\n   initially been opened
      with the intended counterpart.\n   iSNS, described in [iSNS], is required in
      all iFCP deployments.\n   iSCSI may use iSNS for discovery, and FCIP does not
      use iSNS.  iSNS\n   applications store iSCSI and FC device attributes and monitor
      their\n   availability and reachability, providing a consolidated information\n
      \  repository for an integrated IP block storage network.  The iSNS\n   specification
      defines mechanisms to secure communication between an\n   iSNS server and its
      clients.\n"
    title: 2.1.  Security Requirements
  - contents:
    - "2.2.  Resource Constraints\n   Resource constraints and performance requirements
      for iSCSI are\n   discussed in [RFC3347] Section 3.2.  iFCP and FCIP devices
      will\n   typically be embedded systems deployed on racks in air-conditioned\n
      \  data center facilities.  Such embedded systems may include hardware\n   chipsets
      to provide data encryption, authentication, and integrity\n   processing.  Therefore,
      memory and CPU resources are generally not a\n   constraining factor.\n   iSCSI
      will be implemented on a variety of systems ranging from large\n   servers running
      general purpose operating systems to embedded host\n   bus adapters (HBAs).
      \ In general, a host bus adapter is the most\n   constrained iSCSI implementation
      environment, although an HBA may\n   draw upon the resources of the system to
      which it is attached in some\n   cases (e.g., authentication computations required
      for connection\n   setup).  More resources should be available to iSCSI implementations\n
      \  for embedded and general purpose operating systems.  The following\n   guidelines
      indicate the approximate level of resources that\n   authentication, keying,
      and rekeying functionality can reasonably\n   expect to draw upon:\n   -  Low
      power processors with small word size are generally not used,\n      as power
      is usually not a constraining factor, with the possible\n      exception of
      HBAs, which can draw upon the computational resources\n      of the system into
      which they are inserted.  Computational\n      horsepower should be available
      to perform a reasonable amount of\n      exponentiation as part of authentication
      and key derivation for\n      connection setup.  The same is true of rekeying,
      although the\n      ability to avoid exponentiation for rekeying may be desirable
      (but\n      is not an absolute requirement).\n   -  RAM and/or flash resources
      tend to be constrained in embedded\n      implementations.  8-10 MB of code
      and data for authentication,\n      keying, and rekeying is clearly excessive,
      800-1000 KB is clearly\n      larger than desirable, but tolerable if there
      is no other\n      alternative and 80-100 KB should be acceptable.  These sizes
      are\n      intended as rough order of magnitude guidance, and should not be\n
      \     taken as hard targets or limits (e.g., smaller code sizes are\n      always
      better).  Software implementations for general purpose\n      operating systems
      may have more leeway.\n   The primary resource concern for implementation of
      authentication and\n   keying mechanisms is code size, as iSCSI assumes that
      the\n   computational horsepower to do exponentiations will be available.\n
      \  There is no dominant iSCSI usage scenario - the scenarios range from\n   a
      single connection constrained only by media bandwidth to hundreds\n   of initiator
      connections to a single target or communication\n   endpoint.  SCSI sessions
      and hence the connections they use tend to\n   be relatively long lived; for
      disk storage, a host typically opens a\n   SCSI connection on boot and closes
      it on shutdown.  Tape session\n   length tends to be measured in hours or fractions
      thereof (i.e.,\n   rapid fire sharing of the same tape device among different
      initiators\n   is unusual), although tape robot control sessions can be short
      when\n   the robot is shared among tape drives.  On the other hand, tape will\n
      \  not see a large number of initiator connections to a single target or\n   communication
      endpoint, as each tape drive is dedicated to a single\n   use at a single time,
      and a dozen tape drives is a large tape device.\n"
    title: 2.2.  Resource Constraints
  - contents:
    - '2.3.  Security Protocol

      '
    - contents:
      - "2.3.1.  Transforms\n   All IP block storage security compliant implementations
        MUST support\n   IPsec ESP [RFC2406] to provide security for both control
        packets and\n   data packets, as well as the replay protection mechanisms
        of IPsec.\n   When ESP is utilized, per-packet data origin authentication,\n
        \  integrity and replay protection MUST be used.\n   To provide confidentiality
        with ESP, ESP with 3DES in CBC mode\n   [RFC2451][3DESANSI] MUST be supported,
        and AES in Counter mode, as\n   described in [RFC3686], SHOULD be supported.
        \ To provide data origin\n   authentication and integrity with ESP, HMAC-SHA1
        [RFC2404] MUST be\n   supported, and AES in CBC MAC mode with XCBC extensions
        [RFC3566]\n   SHOULD be supported.  DES in CBC mode SHOULD NOT be used due
        to its\n   inherent weakness.  ESP with NULL encryption MUST be supported
        for\n   authentication.\n"
      title: 2.3.1.  Transforms
    - contents:
      - "2.3.2.  IPsec Modes\n   Conformant IP block storage protocol implementations
        MUST support ESP\n   [RFC2406] in tunnel mode and MAY implement IPsec with
        ESP in\n   transport mode.\n"
      title: 2.3.2.  IPsec Modes
    - contents:
      - "2.3.3.  IKE\n   Conformant IP block storage security implementations MUST
        support IKE\n   [RFC2409] for peer authentication, negotiation of security\n
        \  associations, and key management, using the IPsec DOI [RFC2407].\n   Manual
        keying MUST NOT be used since it does not provide the\n   necessary rekeying
        support.  Conformant IP block storage security\n   implementations MUST support
        peer authentication using a pre-shared\n   key, and MAY support certificate-based
        peer authentication using\n   digital signatures.  Peer authentication using
        the public key\n   encryption methods outlined in IKE's sections 5.2 and 5.3
        [RFC2409]\n   SHOULD NOT be used.\n   Conformant IP block storage security
        implementations MUST support IKE\n   Main Mode and SHOULD support Aggressive
        Mode.  IKE Main Mode with\n   pre-shared key authentication SHOULD NOT be
        used when either of the\n   peers use a dynamically assigned IP address.  While
        Main Mode with\n   pre-shared key authentication offers good security in many
        cases,\n   situations where dynamically assigned addresses are used force
        use of\n   a group pre-shared key, which is vulnerable to man-in-the-middle\n
        \  attack.\n   When digital signatures are used for authentication, either
        IKE Main\n   Mode or IKE Aggressive Mode MAY be used.  In all cases, access
        to\n   locally stored secret information (pre-shared key,  or private  key\n
        \  for digital signing) must be suitably restricted, since compromise of\n
        \  the secret information nullifies the security properties of the\n   IKE/IPsec
        protocols.\n   When digital signatures are used to achieve authentication,
        an IKE\n   negotiator SHOULD use IKE Certificate Request Payload(s) to specify\n
        \  the certificate authority (or authorities) that are trusted in\n   accordance
        with its local policy.  IKE negotiators SHOULD check the\n   pertinent Certificate
        Revocation List (CRL) before accepting a PKI\n   certificate for use in IKE's
        authentication procedures.\n   The IPsec DOI [RFC2407] provides for several
        types of identification\n   data.  Within IKE Phase 1, for use within the
        IDii and IDir payloads,\n   conformant IP block storage security implementations
        MUST support the\n   ID_IPV4_ADDR, ID_IPV6_ADDR (if the protocol stack supports
        IPv6) and\n   ID_FQDN Identity Payloads.  iSCSI security implementations SHOULD\n
        \  support the ID_USER_FQDN Identity Payload; other IP block storage\n   protocols
        (iFCP, FCIP) SHOULD NOT use the ID_USER_FQDN Identity\n   Payload.  Identities
        other than ID_IPV4_ADDR and ID_IPV6_ADDR (such\n   as ID_FQDN or ID_USER_FQDN)
        SHOULD be employed in situations where\n   Aggressive mode is utilized along
        with pre-shared keys and IP\n   addresses are dynamically assigned.  The IP
        Subnet, IP Address Range,\n   ID_DER_ASN1_DN, ID_DER_ASN1_GN formats SHOULD
        NOT be used for IP\n   block storage protocol security; The ID_KEY_ID Identity
        Payload MUST\n   NOT be used.  As described in [RFC2407], within Phase 1 the
        ID port\n   and protocol fields MUST be set to zero or to UDP port 500.  Also,
        as\n   noted in [RFC2407]:\n      When an IKE exchange is authenticated using
        certificates (of any\n      format), any ID's used for input to local policy
        decisions SHOULD\n      be contained in the certificate used in the authentication
        of the\n      exchange.\n   The Phase 2 Quick Mode exchanges used by IP block
        storage protocol\n   implementations MUST explicitly carry the Identity Payload
        fields\n   (IDci and IDcr).  Each Phase 2 IDci and IDcr Payload SHOULD carry
        a\n   single IP address (ID_IPV4_ADDR, ID_IPV6_ADDR) and SHOULD NOT use the\n
        \  IP Subnet or IP Address Range formats.  Other ID payload formats MUST\n
        \  NOT be used.\n   Since IPsec acceleration hardware may only be able to
        handle a\n   limited number of active IKE Phase 2 SAs, Phase 2 delete messages
        may\n   be sent for idle SAs, as a means of keeping the number of active\n
        \  Phase 2 SAs to a minimum.  The receipt of an IKE Phase 2 delete\n   message
        MUST NOT be interpreted as a reason for tearing down an IP\n   block storage
        connection.  Rather, it is preferable to leave the\n   connection up, and
        if additional traffic is sent on it, to bring up\n   another IKE Phase 2 SA
        to protect it.  This avoids the potential for\n   continually bringing connections
        up and down.\n"
      title: 2.3.3.  IKE
    - contents:
      - "2.3.4.  Security Policy Configuration\n   One of the goals of this specification
        is to enable a high level of\n   interoperability without requiring extensive
        configuration.  This\n   section provides guidelines on setting of IKE parameters
        so as to\n   enhance the probability of a successful negotiation.  It also\n
        \  describes how information on security policy configuration can be\n   provided
        so as to further enhance the chances of success.\n   To enhance the prospects
        for interoperability, some of the actions to\n   consider include:\n   [1]
        \ Transform restriction.\n        Since support for 3DES-CBC and HMAC-SHA1
        is required of all\n        implementations, offering these transforms enhances
        the\n        probability of a successful negotiation.  If AES-CTR [RFC3686]\n
        \       with XCBC-MAC [RFC3566] is supported, this transform combination\n
        \       will typically be preferred, with 3DES-CBC/HMAC-SHA1 as a\n        secondary
        offer.\n   [2]  Group Restriction.\n        If 3DES-CBC/HMAC-SHA1 is offered,
        and DH groups are offered,\n        then it is recommended that a DH group
        of at least 1024 bits be\n        offered along with it.  If AES-CTR/XCBC-MAC
        is the preferred\n        offer, and DH groups are offered, then it is recommended
        that a\n        DH group of at least 2048 bits be offered along with it, as\n
        \       noted in [KeyLen].  If perfect forward secrecy is required in\n        Quick
        Mode, then it is recommended that the QM PFS DH group be\n        the same
        as the IKE Phase 1 DH group.  This reduces the total\n        number of combinations,
        enhancing the chances for\n        interoperability.\n   [3]  Key lifetimes.\n
        \       If a key lifetime is offered that is longer than desired, then\n        rather
        than causing the IKE negotiation to fail, it is\n        recommended that
        the Responder consider the offered lifetime as\n        a maximum, and accept
        it.  The key can then use a lesser value\n        for the lifetime, and utilize
        a Lifetime Notify in order to\n        inform the other peer of lifetime expiration.\n
        \  Even when the above advice is taken, it still may be useful to be\n   able
        to provide additional configuration information in order to\n   enhance the
        chances of success, and it is useful to be able to manage\n   security configuration
        regardless of the scale of the deployment.\n   For example, it may be desirable
        to configure the security policy of\n   an IP block storage device.  This
        can be done manually or\n   automatically via a security policy distribution
        mechanism.\n   Alternatively, it can be supplied via iSNS or SLPv2.  If an
        IP block\n   storage endpoint can obtain the required security policy by other\n
        \  means (manually, or automatically via a security policy distribution\n
        \  mechanism) then it need not request this information via iSNS or\n   SLPv2.
        \ However, if the required security policy configuration is not\n   available
        via other mechanisms, iSNS or SLPv2 can be used to obtain\n   it.\n   It may
        also be helpful to obtain information about the preferences of\n   the peer
        prior to initiating IKE.  While it is generally possible to\n   negotiate
        security parameters within IKE, there are situations in\n   which incompatible
        parameters can cause the IKE negotiation to fail.\n   The following information
        can be provided via SLPv2 or iSNS:\n   [4]  IPsec or cleartext support.\n
        \       The minimum piece of peer configuration required is whether an\n        IP
        block storage endpoint requires IPsec or cleartext.  This\n        cannot
        be determined from the IKE negotiation alone without\n        risking a long
        timeout, which is highly undesirable for a disk\n        access protocol.\n
        \  [5]  Perfect Forward Secrecy (PFS) support.\n        It is helpful to know
        whether a peer allows PFS, since an IKE\n        Phase 2 Quick Mode can fail
        if an initiator proposes PFS to a\n        Responder that does not allow it.\n
        \  [6]  Preference for tunnel mode.\n        While it is legal to propose
        both transport and tunnel mode\n        within the same offer, not all IKE
        implementations will support\n        this.  As a result, it is useful to
        know whether a peer prefers\n        tunnel mode or transport mode, so that
        it is possible to\n        negotiate the preferred mode on the first try.\n
        \  [7]  Main Mode and Aggressive Mode support.\n        Since the IKE negotiation
        can fail if a mode is proposed to a\n        peer that doesn't allow it, it
        is helpful to know which modes a\n        peer allows, so that an allowed
        mode can be negotiated on the\n        first try.\n   Since iSNS or SLPv2
        can be used to distribute IPsec security policy\n   and configuration information
        for use with IP block storage\n   protocols, these discovery protocols would
        constitute a 'weak link'\n   were they not secured at least as well as the
        protocols whose\n   security they configure.  Since the major vulnerability
        is packet\n   modification and replay, when iSNS or SLPv2 are used to distribute\n
        \  security policy or configuration information, at a minimum, per-\n   packet
        data origin authentication, integrity and replay protection\n   MUST be used
        to protect the discovery protocol.\n"
      title: 2.3.4.  Security Policy Configuration
    title: 2.3.  Security Protocol
  - contents:
    - '2.4.  iSCSI Authentication

      '
    - contents:
      - "2.4.1.  CHAP\n   Compliant iSCSI implementations MUST implement the CHAP\n
        \  authentication method [RFC1994] (according to [RFC3720], section\n   11.1.4),
        which includes support for bi-directional authentication,\n   and the target
        authentication option.\n   When CHAP is performed over non-encrypted channel,
        it is vulnerable\n   to an off-line dictionary attack.  Implementations MUST
        support\n   random CHAP secrets of up to 128 bits, including the means to\n
        \  generate such secrets and to accept them from an external generation\n
        \  source.  Implementations MUST NOT provide secret generation (or\n   expansion)
        means other than random generation.\n   If CHAP is used with secret smaller
        than 96 bits, then IPsec\n   encryption (according to the implementation requirements
        in [RFC3720]\n   section 8.3.2) MUST be used to protect the connection.  Moreover,
        in\n   this case IKE authentication with group pre-shared keys SHOULD NOT
        be\n   used.  When CHAP is used with a secret smaller then 96 bits, a\n   compliant
        implementation MUST NOT continue with the iSCSI login\n   unless it can verify
        that IPsec encryption is being used to protect\n   the connection.\n   Originators
        MUST NOT reuse the CHAP challenge sent by the Responder\n   for the other
        direction of a bidirectional authentication.\n   Responders MUST check for
        this condition and close the iSCSI TCP\n   connection if it occurs.\n   The
        same CHAP secret SHOULD NOT be configured for authentication of\n   multiple
        initiators or multiple targets, as this enables any of them\n   to impersonate
        any other one of them, and compromising one of them\n   enables the attacker
        to impersonate any of them.  It is recommended\n   that iSCSI implementations
        check for use of identical CHAP secrets by\n   different peers when this check
        is feasible, and take appropriate\n   measures to warn users and/or administrators
        when this is detected.\n   A single CHAP secret MAY be used for authentication
        of an individual\n   initiator to multiple targets.  Likewise, a single CHAP
        secret MAY be\n   used for authentication of an individual target to multiple\n
        \  initiators.\n   A Responder MUST NOT send its CHAP response if the initiator
        has not\n   successfully authenticated.  For example, the following exchange:\n
        \     I->R     CHAP_A=<A1,A2,...>\n      R->I     CHAP_A=<A1> CHAP_C=<C> CHAP_I=<I>\n
        \     I->R     CHAP_N=<N> CHAP_C=<C> CHAP_I=<I>\n   (Where N, (A1,A2), I,
        C, and R are correspondingly the Name,\n   Algorithms, Identifier, Challenge,
        and Response as defined in\n   [RFC1994])\n   MUST result in the Responder
        (target) closing the iSCSI TCP\n   connection because the initiator has failed
        to authenticate (there is\n   no CHAP_R in the third message).\n   Any CHAP
        secret used for initiator authentication MUST NOT be\n   configured for authentication
        of any target, and any CHAP secret used\n   for target authentication MUST
        NOT be configured for authentication\n   of any initiator.  If the CHAP response
        received by one end of an\n   iSCSI connection is the same as the CHAP response
        that the receiving\n   endpoint would have generated for the same CHAP challenge,
        the\n   response MUST be treated as an authentication failure and cause the\n
        \  connection to close (this ensures that the same CHAP secret is not\n   used
        for authentication in both directions).  Also, if an iSCSI\n   implementation
        can function as both initiator and target, different\n   CHAP secrets and
        identities MUST be configured for these two roles.\n   The following is an
        example of the attacks prevented by the above\n   requirements:\n   Rogue
        wants to impersonate Storage to Alice, and knows that a\n      single secret
        is used for both directions of Storage-Alice\n      authentication.\n   Rogue
        convinces Alice to open two connections to Rogue, and\n      Rogue identifies
        itself as Storage on both connections.\n   Rogue issues a CHAP challenge on
        connection 1, waits for Alice\n      to respond, and then reflects Alice's
        challenge as the initial\n      challenge to Alice on connection 2.\n      If
        Alice doesn't check for the reflection across connections,\n      Alice's
        response on connection 2 enables Rogue to impersonate\n      Storage on connection
        1, even though Rogue does not know the\n      Alice-Storage CHAP secret.\n
        \  Note that RADIUS [RFC2865] does not support bi-directional CHAP\n   authentication.
        \ Therefore, while a target acting as a RADIUS client\n   will be able to
        verify the initiator Response, it will not be able to\n   respond to an initiator
        challenge unless it has access to an\n   appropriate shared secret by some
        other means.\n"
      title: 2.4.1.  CHAP
    - contents:
      - "2.4.2.  SRP\n   iSCSI implementations MAY implement the SRP authentication
        method\n   [RFC2945] (see [RFC3720], Section 11.1.3).  The strength of SRP\n
        \  security is dependent on the characteristics of the group being used\n
        \  (i.e., the prime modulus N and generator g).  As described in\n   [RFC2945],
        N is required to be a Sophie-German prime (of the form N =\n   2q + 1, where
        q is also prime) the generator g is a primitive root of\n   GF(n) [SRPNDSS].\n
        \  SRP well-known groups are included in Appendix A and additional\n   groups
        may be registered with IANA.  iSCSI implementations MUST use\n   one of these
        well-known groups.  All the groups specified in Appendix\n   A up to 1536
        bits (i.e., SRP-768, SRP-1024, SRP-1280, SRP-1536) MUST\n   be supported by
        initiators and targets.  To guarantee\n   interoperability, targets MUST always
        offer \"SRP-1536\" as one of the\n   proposed groups.\n"
      title: 2.4.2.  SRP
    title: 2.4.  iSCSI Authentication
  - contents:
    - "2.5.  SLPv2 Security\n   Both iSCSI and FCIP protocols use SLPv2 as a way to
      discover peer\n   entities and management servers.  SLPv2 may also be used to
      provide\n   information on peer security configuration.  When SLPv2 is deployed,\n
      \  the SA advertisements as well as UA requests and/or responses are\n   subject
      to the following security threats:\n   [1]  An attacker could insert or alter
      SA advertisements or a\n        response to a UA request in order to masquerade
      as the real peer\n        or launch a denial of service attack.\n   [2]  An
      attacker could gain knowledge about an SA or a UA through\n        snooping,
      and launch an attack against the peer.  Given the\n        potential value of
      iSCSI targets and FCIP entities, leaking of\n        such information not only
      increases the possibility of an attack\n        over the network; there is also
      the risk of physical theft.\n   [3]  An attacker could spoof a DAAdvert.  This
      could cause UAs and\n        SAs to use a rogue DAs.\n   To address these threats,
      the following capabilities are required:\n   [a]  Service information, as included
      in SrvRply, AttrRply, SrvReg\n        and SrvDereg messages, needs to be kept
      confidential.\n   [b]  The UA has to be able to distinguish between legitimate
      and\n        illegitimate service information from SrvRply and AttrRply\n        messages.
      \ In the SLPv2 security model SAs are trusted to sign\n        data.\n   [c]
      \ The DA has to be able to distinguish between legitimate and\n        illegitimate
      SrvReg and SrvDereg messages.\n   [d]  The UA has to be able to distinguish
      between legitimate and\n        illegitimate  DA Advertisements.  This allows
      the UA to avoid\n        rogue DAs that will return incorrect data or no data
      at all.  In\n        the SLPv2 security model, UAs trust DAs to store, answer
      queries\n        on and forward data on services, but not necessarily to\n        originate
      it.\n   [e]  SAs may have to trust DAs, especially if 'mesh-enhanced' SLPv2\n
      \       is used.  In this case, SAs register with only one DA and trust\n        that
      this DA will forward the registration to others.\n   By itself, SLPv2 security,
      defined in [RFC2608], does not satisfy\n   these security requirements.  SLPv2
      only provides end-to-end\n   authentication, but does not support confidentiality.
      \ In SLPv2\n   authentication there is no way to authenticate \"zero result\n
      \  responses\".  This enables an attacker to mount a denial of service\n   attack
      by sending UAs a \"zero results\" SrvRply or AttrRply as if from\n   a DA with
      whose source address corresponds to a legitimate DAAdvert.\n   In all cases,
      there is a potential for denial of service attack\n   against protocol service
      providers, but such an attack is possible\n   even in the absence of SLPv2 based
      discovery mechanisms.\n"
    - contents:
      - "2.5.1.  SLPv2 Security Protocol\n   SLPv2 message types include: SrvRqst,
        SrvRply, SrvReg, SrvDereg,\n   SrvAck, AttrRqst, AttrRply, DAAdvert, SrvTypeRqst,
        SrvTypeRply,\n   SAAdvert.  SLPv2 requires that User Agents (UAs) and Service
        Agents\n   (SAs) support SrvRqst, SrvRply, and DAAdvert.  SAs must additionally\n
        \  support SrvReg, SrvAck, and SAAdvert.\n   Where no Directory Agent (DA)
        exists, the SrvRqst is multicast, but\n   the SrvRply is sent via unicast
        UDP.  DAAdverts are also multicast.\n   However, all other SLPv2 messages
        are sent via UDP unicast.\n   In order to provide the required security functionality,
        iSCSI and\n   FCIP implementations supporting SLPv2 security SHOULD protect
        SLPv2\n   messages sent via unicast using IPsec ESP with a non-null transform.\n
        \  SLPv2 authentication blocks (carrying digital signatures), described\n
        \  in [RFC2608] MAY also be used to authenticate unicast and multicast\n   messages.\n
        \  The usage of SLPv2 by iSCSI is described in [iSCSISLP].  iSCSI\n   initiators
        and targets may enable IKE mechanisms to establish\n   identity.  In addition,
        a subsequent user-level iSCSI session login\n   can protect the initiator-target
        nexus.  This will protect them from\n   any compromise of security in the
        SLPv2 discovery process.\n   The usage of SLPv2 by FCIP is described in [FCIPSLP].
        \ FCIP Entities\n   assume that once the IKE identity of a peer is established,
        the FCIP\n   Entity Name carried in FCIP Short Frame is also implicitly accepted\n
        \  as the authenticated peer.  Any such association between the IKE\n   identity
        and the FCIP Entity Name is administratively established.\n   For use in securing
        SLPv2, when digital signatures are used to\n   achieve authentication in IKE,
        an IKE negotiator SHOULD use IKE\n   Certificate Request Payload(s) to specify
        the certificate authority\n   (or authorities) that are trusted in accordance
        with its local\n   policy.  IKE negotiators SHOULD check the pertinent Certificate\n
        \  Revocation List (CRL) before accepting a PKI certificate for use in\n   IKE's
        authentication procedures.  If key management of SLPv2 DAs\n   needs to be
        coordinated with the SAs and the UAs as well as the\n   protocol service implementations,
        one may use certificate based key\n   management, with a shared root Certificate
        Authority (CA).\n   One of the reasons for utilizing IPsec for SLPv2 security
        is that is\n   more likely that certificates will be deployed for IPsec than
        for\n   SLPv2.  This both simplifies SLPv2 security and makes it more likely\n
        \  that it will be implemented interoperably and more importantly, that\n
        \  it will be used.  As a result, it is desirable that little additional\n
        \  effort be required to enable IPsec protection of SLPv2.\n   However, just
        because a certificate is trusted for use with IPsec\n   does not necessarily
        imply that the host is authorized to perform\n   SLPv2 operations.  When using
        IPsec to secure SLPv2, it may be\n   desirable to distinguish between certificates
        appropriate for use by\n   UAs, SAs, and DAs.  For example, while a UA might
        be allowed to use\n   any certificate conforming to IKE certificate policy,
        the certificate\n   used by an SA might indicate that it is a legitimate source
        of\n   service advertisements.  Similarly, a DA certificate might indicate\n
        \  that it is a valid DA.  This can be accomplished by using special CAs\n
        \  to issue certificates valid for use by SAs and DAs; alternatively, SA\n
        \  and DA authorizations can be employed.\n   Assume that the policy for issuing
        and distributing SLPv2 authorized\n   certificates to SAs and DAs limits them
        only to legitimate SAs and\n   DAs.  In this case, IPsec is used to provide
        SLPv2 security as\n   follows:\n   [a]  SLPv2 messages sent via unicast are
        IPsec protected, using ESP\n        with a non-null transform.\n   [b]  SrvRply
        and AttrRply messages from either a DA or SA are unicast\n        to UAs.
        \ Assuming that the SA used a certificate authorized for\n        SLPv2 service
        advertisement in establishing the IKE Phase 1 SA,\n        or that the DA
        used a certificate authorized for DA usage, the\n        UA can accept the
        information sent, even if it has no SLPv2\n        authentication block.\n
        \       Note that where SrvRqst messages are multicast, they are not\n        protected.
        \ An attacker may attempt to exploit this by spoofing\n        a multicast
        SrvRqst from the UA, generating a SrvRply from an SA\n        of the attacker's
        choosing.  Although the SrvRply is secured, it\n        does not correspond
        to a legitimate SrvRqst sent by the UA.  To\n        avoid this attack, where
        SrvRqst messages are multicast, the UA\n        MUST check that SrvRply messages
        represent a legitimate reply to\n        the SrvRqst that was sent.\n   [c]
        \ SrvReg and SrvDereg messages from a SA are unicast to DAs.\n        Assuming
        that the SA used a certificate authorized for SLPv2\n        service advertisement
        in establishing the IKE Phase 1 SA, the DA\n        can accept the de/registration
        even if it has no SLPv2\n        authentication block.  Typically, the SA
        will check the DA\n        authorization prior to sending the service advertisement.\n
        \  [d]  Multicast DAAdverts can be considered advisory.  The UA will\n        attempt
        to contact DAs via unicast.  Assuming that the DA used a\n        certificate
        authorized for SLPv2 DAAdverts in establishing the\n        IKE Phase 1 SA,
        the UA can accept the DAAdvert even if it has no\n        SLPv2 authentication
        block.\n   [e]  SAs can accept DAAdverts as described in [d].\n"
      title: 2.5.1.  SLPv2 Security Protocol
    - contents:
      - "2.5.2.  Confidentiality of Service Information\n   Since SLPv2 messages can
        contain information that can potentially\n   reveal the vendor of the device
        or its other associated\n   characteristics, revealing service information
        constitutes a security\n   risk.  As an example, the FCIP Entity Name may
        reveal a WWN from\n   which an attacker can learn potentially useful information
        about the\n   Entity's characteristics.\n   The SLPv2 security model assumes
        that service information is public,\n   and therefore does not provide for
        confidentiality.  However, storage\n   devices represent mission critical
        infrastructure of substantial\n   value, and so iSCSI and FCIP security implementations
        supporting\n   SLPv2 security SHOULD encrypt as well as authenticate and integrity-\n
        \  protect unicast SLPv2 messages.\n   Assuming that all unicast SLPv2 messages
        are protected by IPsec, and\n   that confidentiality is provided, then the
        risk of disclosure can be\n   limited to SLPv2 messages sent via multicast,
        namely the SrvRqst and\n   DAAdvert.\n   The information leaked in a multicast
        SrvRqst depends on the level of\n   detail in the query.  If leakage is a
        concern, then a DA can be\n   provided.  If this is not feasible, then a general
        query can be sent\n   via multicast, and then further detail can be obtained
        from the\n   replying entities via additional unicast queries, protected by
        IPsec.\n   Information leakage via a multicast DAAdvert is less of a concern\n
        \  than the authenticity of the message, since knowing that a DA is\n   present
        on the network only enables an attacker to know that SLPv2 is\n   in use,
        and possibly that a directory service is also present.  This\n   information
        is not considered very valuable.\n"
      title: 2.5.2.  Confidentiality of Service Information
    - contents:
      - "2.5.3.  SLPv2 Security Implications\n   Through the definition of security
        attributes, it is possible to use\n   SLPv2 to distribute information about
        security settings for IP block\n   storage entities.  SLPv2 distribution of
        security policy is not\n   necessary if the security settings can be determined
        by other means,\n   such as manual configuration or IPsec security policy
        distribution.\n   If an entity has already obtained its security configuration
        via\n   other mechanisms, then it MUST NOT request security policy via SLPv2.\n
        \  Where SLPv2 is used to provide security policy information for use\n   with
        IP block storage protocols, SLPv2 MUST be protected by IPsec as\n   described
        in this document.  Where SLPv2 is not used to distribute\n   security policy
        information, implementations MAY implement SLPv2\n   security as described
        in this document.\n   Where SLPv2 is used, but security is not implemented,
        IP block\n   storage protocol implementations MUST support a negative cache
        for\n   authentication failures.  This allows implementations to avoid\n   continually
        contacting discovered endpoints that fail authentication\n   within IPsec
        or at the application layer (in the case of iSCSI\n   Login).  The negative
        cache need not be  maintained within the IPsec\n   implementation, but rather
        within the IP block storage protocol\n   implementation.\n   Since this document
        proposes that hop-by-hop security be used as the\n   primary mechanism to
        protect SLPv2, UAs have to trust DAs to\n   accurately relay data from SAs.
        \ This is a change to the SLPv2\n   security model described in [RFC2608].
        \ However, SLPv2 authentication\n   as defined in [RFC2608] does not provide
        a way to authenticate \"zero\n   result responses\", leaving SLPv2 vulnerable
        to a denial of service\n   attack.  Such an attack can be carried out on a
        UA by sending it a\n   \"zero results\" SrvRply or AttrRply, sent from a source
        address\n   corresponding to a DA issuing a legitimate DAAdvert.\n   In addition,
        SLPv2 security as defined in [RFC2608] does not support\n   confidentiality.
        \ When IPsec with ESP and a non-null transform is\n   used to protect SLPv2,
        not only can unicast requests and replies be\n   authenticated, but confidentiality
        can also be provided.  This\n   includes unicast requests to DAs and SAs as
        well as replies.  It is\n   also possible to actively discover SAs using multicast
        SA discovery,\n   and then to send unicast requests to the discovered SAs.\n
        \  As a result, for use with IP block storage protocols, it is believed\n
        \  that use of IPsec for security is more appropriate than the SLPv2\n   security
        model defined in [RFC2608].\n   Using IPsec to secure SLPv2 has performance
        implications.  Security\n   associations established between:\n   -  UAs and
        SAs may be reused (the client on the UA host will use the\n      service on
        the SA host).\n   -  SAs and DAs may be reused (the SAs will reregister services)\n
        \  -  UAs and DAs will probably not be reused (many idle security\n      associations
        are likely to result, and build up on the DA).\n   When IPsec is used to protect
        SLPv2, it is not necessarily\n   appropriate for all hosts with whom an IPsec
        security association can\n   be established to be trusted to originate SLPv2
        service\n   advertisements.  This is particularly the case in environments
        where\n   it is easy to obtain certificates valid for use with IPsec (for\n
        \  example, where anyone with access to the network can obtain a machine\n
        \  certificate valid for use with IPsec).  If not all hosts are\n   authorized
        to originate service advertisements, then it is necessary\n   to distinguish
        between authorized and unauthorized hosts.\n   This can be accomplished by
        the following mechanisms:\n   [1]  Configuring SAs with the identities or
        certificate\n        characteristics of valid DAs, and configuring DAs with
        the\n        identities of SAs allowed to advertise IP block storage\n        services.
        \ The DAs are then trusted to enforce policies on\n        service registration.
        \ This approach involves manual\n        configuration, but avoids certificate
        customization for SLPv2.\n   [2]  Restricting the issuance of certificates
        valid for use in SLPv2\n        service advertisement.  While all certificates
        allowed for use\n        with IPsec will chain to a trusted root, certificates
        for hosts\n        authorized to originate service advertisements could be
        signed\n        by an SLPv2-authorized CA, or could contain explicit SLPv2\n
        \       authorizations within the certificate.  After the IPsec security\n
        \       association is set up between the SLPv2 entities, the SLPv2\n        implementations
        can then retrieve the certificates used in the\n        negotiation in order
        to determine whether the entities are\n        authorized for the operations
        that are being performed.  This\n        approach requires less configuration,
        but requires some\n        certificate customization for use with SLPv2.\n"
      title: 2.5.3.  SLPv2 Security Implications
    title: 2.5.  SLPv2 Security
  - contents:
    - "2.6.  iSNS Security\n   The iSCSI protocol may use iSNS for discovery and management\n
      \  services, while the iFCP protocol is required to use iSNS for such\n   services.
      \ In addition, iSNS can be used to store and distribute\n   security policy
      and authorization information to iSCSI and iFCP\n   devices.  When the iSNS
      protocol is deployed, the interaction between\n   iSNS server and iSNS clients
      are subject to the following additional\n   security threats:\n   [1]  An attacker
      can alter iSNS protocol messages, directing iSCSI\n        and iFCP devices
      to establish connections with rogue devices, or\n        weakening IPsec protection
      for iSCSI or iFCP traffic.\n   [2]  An attacker can masquerade as the real iSNS
      server by sending\n        false iSNS heartbeat messages.  This could deceive
      iSCSI and\n        iFCP devices into using rogue iSNS servers.\n   [3]  An attacker
      can gain knowledge about iSCSI and iFCP devices by\n        snooping iSNS protocol
      messages.  Such information could aid an\n        attacker in mounting a direct
      attack on iSCSI and iFCP devices,\n        such as a denial-of-service attack
      or outright physical theft.\n   To address these threats, the following capabilities
      are needed:\n   [a]  Unicast iSNS protocol messages may need to be authenticated.
      \ In\n        addition, to protect against threat [3] above, confidentiality\n
      \       support is desirable, and REQUIRED when certain functions of\n        iSNS
      are used.\n   [b]  Multicast iSNS protocol messages such as the iSNS heartbeat\n
      \       message need to be authenticated.  These messages need not be\n        confidential
      since they do not leak critical information.\n   There is no requirement that
      the identities of iSNS entities be kept\n   confidential.  Specifically, the
      identity and location of the iSNS\n   server need not be kept confidential.\n
      \  In order to protect against an attacker masquerading as an iSNS\n   server,
      client devices MUST support authentication of broadcast or\n   multicast messages
      such as the iSNS heartbeat.  The iSNS\n   authentication block (which is identical
      in format to the SLP\n   authentication block) MAY be used for this purpose.
      \ Note that the\n   authentication block is used only for iSNS broadcast or
      multicast\n   messages, and SHOULD NOT be used in unicast iSNS messages.\n   Since
      iSNS is used to distribute authorizations determining which\n   client devices
      can communicate, IPsec authentication and data\n   integrity MUST be supported.
      \ In addition, if iSNS is used to\n   distribute security policy for iFCP and
      iSCSI devices, then\n   authentication, data integrity, and confidentiality
      MUST be supported\n   and used.\n   Where iSNS is used without security, IP
      block storage protocol\n   implementations MUST support a negative cache for
      authentication\n   failures.  This allows implementations to avoid continually\n
      \  contacting discovered endpoints that fail authentication within IPsec\n   or
      at the application layer (in the case of iSCSI Login).  The\n   negative cache
      need not be  maintained within the IPsec\n   implementation, but rather within
      the IP block storage protocol\n   implementation.\n"
    - contents:
      - "2.6.1.  Use of iSNS to Discover Security Configuration of Peer Devices\n
        \  In practice, within a single installation, iSCSI and/or iFCP devices\n
        \  may have different security settings.  For example, some devices may\n
        \  be configured to initiate secure communication, while other devices\n   may
        be configured to respond to a request for secure communication,\n   but not
        to require security.  Still other devices, while security\n   capable, may
        neither initiate nor respond securely.\n   In practice, these variations in
        configuration can result in devices\n   being unable to communicate with each
        other.  For example, a device\n   that is configured to always initiate secure
        communication will\n   experience difficulties in communicating with a device
        that neither\n   initiates nor responds securely.\n   The iSNS protocol is
        used to transfer naming, discovery, and\n   management information between
        iSCSI devices, iFCP gateways,\n   management stations, and the iSNS server.
        \ This includes the ability\n   to enable discovery of security settings used
        for communication via\n   the iSCSI and/or iFCP protocols.\n   The iSNS server
        stores security settings for each iSCSI and iFCP\n   device interface.  These
        security settings, which can be retrieved by\n   authorized hosts, include
        use or non-use of IPsec, IKE, Main Mode,\n   Aggressive Mode, PFS, Pre-shared
        Key, and certificates.\n   For example, IKE may not be enabled for a particular
        device\n   interface.  If a peer device can learn of this in advance by\n
        \  consulting the iSNS server, it will not need to waste time and\n   resources
        attempting to initiate an IKE Phase 1 SA with that device\n   interface.\n
        \  If iSNS is used to distribute security policy, then the minimum\n   information
        that should be learned from the iSNS server is the use or\n   non-use of IKE
        and IPsec by each iFCP or iSCSI peer device interface.\n   This information
        is encoded in the Security Bitmap field of each\n   Portal of the peer device,
        and is applicable on a per-interface basis\n   for the peer device.  iSNS
        queries to acquire security configuration\n   data about peer devices MUST
        be protected by IPsec/ESP\n   authentication.\n"
      title: 2.6.1.  Use of iSNS to Discover Security Configuration of Peer Devices
    - contents:
      - "2.6.2.  Use of iSNS to Distribute iSCSI and iFCP Security Policies\n   Once
        communication between iSNS clients and the iSNS server are\n   secured through
        use of IPsec, iSNS clients have the capability to\n   discover the security
        settings required for communication via the\n   iSCSI and/or iFCP protocols.
        \ Use of iSNS for distribution of\n   security policies offers the potential
        to reduce the burden of manual\n   device configuration, and decrease the
        probability of communications\n   failures due to incompatible security policies.
        \ If iSNS is used to\n   distribute security policies, then IPsec authentication,
        data\n   integrity, and confidentiality MUST be used to protect all iSNS\n
        \  protocol messages.\n   The complete IKE/IPsec configuration of each iFCP
        and/or iSCSI device\n   can be stored in the iSNS server, including policies
        that are used\n   for IKE Phase 1 and Phase 2 negotiations between client
        devices.  The\n   IKE payload format includes a series of one or more proposals
        that\n   the iSCSI or iFCP device will use when negotiating the appropriate\n
        \  IPsec policy to use to protect iSCSI or iFCP traffic.\n   Note that iSNS
        distribution of security policy is not necessary if\n   the security settings
        can be determined by other means, such as\n   manual configuration or IPsec
        security policy distribution.  If an\n   entity has already obtained its security
        configuration via other\n   mechanisms, then it MUST NOT request security
        policy via iSNS.\n   For further details on how to store and retrieve IKE
        policy proposals\n   in the iSNS server, see [iSNS].\n"
      title: 2.6.2.  Use of iSNS to Distribute iSCSI and iFCP Security Policies
    - contents:
      - "2.6.3.  iSNS Interaction with IKE and IPsec\n   When IPsec security is enabled,
        each iSNS client that is registered\n   in the iSNS database maintains at
        least one Phase 1 and one Phase 2\n   security association with the iSNS server.
        \ All iSNS protocol\n   messages between iSNS clients and the iSNS server
        are to be protected\n   by a phase-2 security association.\n"
      title: 2.6.3.  iSNS Interaction with IKE and IPsec
    - contents:
      - "2.6.4.  iSNS Server Implementation Requirements\n   All iSNS implementations
        MUST support the replay protection\n   mechanisms of IPsec.  ESP in tunnel
        mode MUST be implemented, and\n   IPsec with ESP in transport mode MAY be
        implemented.\n   To provide data origin authentication and integrity with
        ESP, HMAC-\n   SHA1 MUST be supported, and AES in CBC MAC mode with XCBC extensions\n
        \  [RFC3566] SHOULD be supported.  When confidentiality is implemented,\n
        \  3DES in CBC mode MUST be supported, and AES in Counter mode, as\n   described
        in [RFC3686], SHOULD be supported.  DES in CBC mode SHOULD\n   NOT be used
        due to its inherent weakness.  If confidentiality is not\n   required but
        data origin authentication and integrity is enabled, ESP\n   with NULL Encryption
        MUST be used.\n   Conformant iSNS implementations MUST support IKE for authentication,\n
        \  negotiation of security associations, and key management, using the\n   IPsec
        DOI, described in [RFC2407].  IP block storage protocols can be\n   expected
        to send data in high volumes, thereby requiring rekey.\n   Since manual keying
        does not provide rekeying support, its use is\n   prohibited with IP block
        storage protocols.  Although iSNS does not\n   send a high volume of data,
        and therefore rekey is not a major\n   concern, manual keying SHOULD NOT be
        used.  This is for consistency,\n   since dynamic keying support is already
        required in IP storage\n   security implementations.\n   Conformant iSNS security
        implementations MUST support authentication\n   using a pre- shared key, and
        MAY support certificate-based peer\n   authentication using digital signatures.
        \ Peer authentication using\n   the public key encryption methods outlined
        in [RFC2409] sections 5.2\n   and 5.3 SHOULD NOT be used.\n   Conformant iSNS
        implementations MUST support IKE Main Mode and SHOULD\n   support Aggressive
        Mode.  IKE Main Mode with pre-shared key\n   authentication SHOULD NOT be
        used when either of the peers use\n   dynamically assigned IP addresses.  While
        Main Mode with pre-shared\n   key authentication offers good security in many
        cases, situations\n   where dynamically assigned addresses are used force
        use of a group\n   pre-shared key, which is vulnerable to man-in-the-middle
        attack.\n   When digital signatures are used for authentication, either IKE
        Main\n   Mode or IKE Aggressive Mode MAY be used.  In all cases, access to\n
        \  locally stored secret information (pre-shared key or private key for\n
        \  digital signing) MUST be suitably restricted, since compromise of the\n
        \  secret information nullifies the security properties of the IKE/IPsec\n
        \  protocols.\n   When digital signatures are used to achieve authentication,
        an IKE\n   negotiator SHOULD use IKE Certificate Request Payload(s) to specify\n
        \  the certificate authority (or authorities) that are trusted in\n   accordance
        with its local policy.  IKE negotiators SHOULD check the\n   pertinent Certificate
        Revocation List (CRL) before accepting a PKI\n   certificate for use in IKE's
        authentication procedures.\n"
      title: 2.6.4.  iSNS Server Implementation Requirements
    title: 2.6.  iSNS Security
  title: 2.  Block Storage Protocol Security
- contents:
  - "3.  iSCSI Security Interoperability Guidelines\n   The following guidelines are
    established to meet iSCSI security\n   requirements using IPsec in practical situations.\n"
  - contents:
    - "3.1.  iSCSI Security Issues\n   iSCSI provides for iSCSI Login, outlined in
      [RFC3720], which includes\n   support for application-layer authentication.
      \ This authentication is\n   logically between the iSCSI initiator and the iSCSI
      target (as\n   opposed to between the TCP/IP communication endpoints).  The
      intent\n   of the iSCSI design is that the initiator and target represent the\n
      \  systems (e.g., host and disk array or tape system) participating in\n   the
      communication, as opposed to network communication interfaces or\n   endpoints.\n
      \  The iSCSI protocol and iSCSI Login authentication do not meet the\n   security
      requirements for iSCSI.  iSCSI Login authentication provides\n   mutual authentication
      between the iSCSI initiator and target at\n   connection origination, but does
      not protect control and data traffic\n   on a per packet basis, leaving the
      iSCSI connection vulnerable to\n   attack.  iSCSI Login authentication can mutually
      authenticate the\n   initiator to the target, but does not by itself provide
      per-packet\n   authentication, integrity, confidentiality or replay protection.
      \ In\n   addition, iSCSI Login authentication does not provide for a protected\n
      \  ciphersuite negotiation.  Therefore, iSCSI Login provides a weak\n   security
      solution.\n"
    title: 3.1.  iSCSI Security Issues
  - contents:
    - "3.2.  iSCSI and IPsec Interaction\n   An iSCSI session [RFC3720], comprised
      of one or more TCP connections,\n   is identified by the 2-tuple of the initiator-defined
      identifier and\n   the target-defined identifier, <ISID, TSIH>.  Each connection
      within\n   a given session is assigned a unique Connection Identification, CID.\n
      \  The TCP connection is identified by the 5-tuple <Source IP address,\n   Destination
      IP address, Protocol (TCP), Source Port, Destination\n   Port>.  An IPsec Phase
      2 SA is identified by the 3-tuple <Protocol\n   (ESP),destination address, SPI>.\n
      \  The iSCSI session and connection information is carried within the\n   iSCSI
      Login Commands, transported over TCP.  Since an iSCSI initiator\n   may have
      multiple interfaces, iSCSI connections within an iSCSI\n   session may be initiated
      from different IP addresses.  Similarly,\n   multiple iSCSI targets may exist
      behind a single IP address, so that\n   there may be multiple iSCSI sessions
      between a given <source IP\n   address, destination IP address> pair.\n   When
      multiple iSCSI sessions are active between a given <initiator,\n   target> pair,
      the set of TCP connections used by a given iSCSI\n   session must be disjoint
      from those used by all other iSCSI sessions\n   between the same <initiator,
      target> pair.  Therefore a TCP\n   connection can be associated with one and
      only one iSCSI session.\n   The relationship between iSCSI sessions, TCP connections
      and IKE\n   Phase 1 and Phase 2 SAs is as follows:\n   [1]  An iSCSI initiator
      or target may have more than one interface,\n        and therefore may have
      multiple IP addresses.  Also, multiple\n        iSCSI initiators and targets
      may exist behind a single IP\n        address.  As a result, an iSCSI Session
      may correspond to\n        multiple IKE Phase 1 Security Associations, though
      typically a\n        single IKE Phase 1 security association will exist for
      an\n        <initiator IP address, target IP address> tuple.\n   [2]  Each TCP
      connection within an iSCSI Session is protected by an\n        IKE Phase 2 SA.
      \ The selectors may be specific to that TCP\n        connection or may cover
      multiple connections.  While each IKE\n        Phase 2 SA may protect multiple
      TCP connections, each TCP\n        connection is transported under only one
      IKE Phase 2 SA.\n   Given this, all the information needed for the iSCSI/IPsec
      binding is\n   contained within the iSCSI Login messages from the iSCSI initiator\n
      \  and target.  This includes the binding between an IKE Phase 1 SA and\n   the
      corresponding iSCSI sessions, as well as the binding between a\n   TCP connection,
      an IKE Phase 2 SA and the iSCSI connection ID.\n"
    title: 3.2.  iSCSI and IPsec Interaction
  - contents:
    - "3.3.  Initiating a New iSCSI Session\n   In order to create a new iSCSI Session,
      if an IKE Phase 1 SA does not\n   already exist, then it is established by an
      initiator implementing\n   iSCSI security.  Subsequent iSCSI connections established
      within the\n   iSCSI session will typically be protected by IKE Phase 2 SAs
      derived\n   from that IKE Phase 1 SA, although additional IKE Phase 1 SAs can\n
      \  also be brought up.\n   The initiator and target implementations successfully
      complete the\n   IKE Phase 1 and Phase 2 negotiations before the iSCSI initiator\n
      \  contacts the target on well-known TCP port 3260, and sends the iSCSI\n   Login
      command over the TCP connection.  IPsec implementations\n   configured with
      the correct policies (e.g., use ESP with non-null\n   transform for all traffic
      destined for the iSCSI well-known TCP port\n   3260) will handle this automatically.\n
      \  The initiator fills in the ISID field, and leaves the TSIH field set\n   to
      zero, to indicate that it is the first message of a new session\n   establishment
      exchange.  The initiator also fills in a CID value,\n   that identifies the
      TCP connection over which the Login command is\n   being exchanged.  When the
      iSCSI target replies with its Login\n   Command, both iSCSI devices will know
      the TSIH, and therefore the\n   iSCSI session identifier <ISID, TSIH>.\n   A
      single iSCSI session identifier may have multiple associated IKE\n   Phase 1
      SAs, and each IKE Phase 1 SA may correspond to multiple iSCSI\n   session identifiers.
      \ Each iSCSI connection (identified by the\n   connection identifier) corresponds
      to a single TCP connection\n   (identified by the 5-tuple).  Each IKE Phase
      2 SA is identified by\n   the <Protocol (ESP), destination address, SPI> combination.
      \ A Phase\n   2 SA may protect multiple TCP connections, and corresponds to
      a\n   single IKE Phase 1 SA.\n   Within IKE, each key refresh requires that
      a new security association\n   be established.  In practice there is a time
      interval during which an\n   old, about-to-expire SA and newly established SA
      will both be valid.\n   The IPsec implementation will choose which security
      association to\n   use based on local policy, and iSCSI concerns play no role
      in this\n   selection process.\n"
    title: 3.3.  Initiating a New iSCSI Session
  - contents:
    - "3.4.  Graceful iSCSI Teardown\n   Mechanisms within iSCSI provide for both
      graceful and non-graceful\n   teardown of iSCSI Sessions or individual TCP connections
      within a\n   given session.  The iSCSI Logout command is used to effect graceful\n
      \  teardown.  This command allows the iSCSI initiator to request that:\n   [a]
      \ the session be closed\n   [b]  a specific connection within the session be
      closed\n   [c]  a specific connection be marked for recovery\n   When the iSCSI
      implementation wishes to close a session, it uses the\n   appropriate iSCSI
      commands to accomplish this.  After exchanging the\n   appropriate iSCSI control
      messages for session closure, the iSCSI\n   security implementation will typically
      initiate a half-close of each\n   TCP connection within the iSCSI session.\n
      \  When the iSCSI security implementation wishes to close an individual\n   TCP
      connection while leaving the parent iSCSI session active, it\n   should half-close
      the TCP connection.  After the expiration of the\n   TIME_WAIT timeout, the
      TCP connection is closed.\n"
    title: 3.4.  Graceful iSCSI Teardown
  - contents:
    - "3.5.  Non-graceful iSCSI Teardown\n   If a given TCP connection unexpectedly
      fails, the associated iSCSI\n   connection is torn down.  There is no requirement
      that an IKE Phase 2\n   delete immediately follow iSCSI connection tear down
      or Phase 1\n   deletion.  Since an IKE Phase 2 SA may correspond to multiple
      TCP\n   connections, such a deletion might be inappropriate.  Similarly, if\n
      \  the IKE implementation receives a Phase 2 Delete message for a\n   security
      association corresponding to a TCP connection, this does not\n   necessarily
      imply that the TCP or iSCSI connection is to be torn\n   down.\n   If a Logout
      Command/Logout Response sequence marks a connection for\n   removal from the
      iSCSI session, then after the iSCSI peer has\n   executed an iSCSI teardown
      process for the connection, the TCP\n   connection will be closed.  The iSCSI
      connection state can then be\n   safely removed.\n   Since an IKE Phase 2 SA
      may be used by multiple TCP connections, an\n   iSCSI implementation should
      not depend on receiving the IPsec Phase 2\n   delete as confirmation that the
      iSCSI peer has executed an iSCSI\n   teardown process for the connection.\n
      \  Since IPsec acceleration hardware may only be able to handle a\n   limited
      number of active IKE Phase 2 SAs, Phase 2 delete messages may\n   be sent for
      idle SAs, as a means of keeping the number of active\n   Phase 2 SAs to a minimum.
      \ The receipt of an IKE Phase 2 delete\n   message MUST NOT be interpreted as
      a reason for tearing down the\n   corresponding iSCSI connection if no Logout
      Command/Logout Receive\n   has been executed on the connection.  Rather, it
      is preferable to\n   leave the iSCSI connection up, and if additional traffic
      is sent on\n   it, to bring up another IKE Phase 2 SA to protect it.  This avoids\n
      \  the potential for continually bringing iSCSI connections up and down.\n"
    title: 3.5.  Non-graceful iSCSI Teardown
  - contents:
    - "3.6.  Application-Layer CRC\n   iSCSI's error detection and recovery assumes
      that the TCP and IP\n   checksums provide inadequate integrity protection for
      high speed\n   communications.  As described in [CRCTCP], when operating at
      high\n   speeds, the 16-bit TCP checksum [RFC793] will not necessarily detect\n
      \  all errors, resulting in possible data corruption.  iSCSI [RFC3720]\n   therefore
      incorporates a 32-bit CRC to protect its headers and data.\n   When a CRC check
      fails (i.e., CRC computed at receiver does not match\n   the received CRC),
      the iSCSI PDU covered by that CRC is discarded.\n   Since presumably the error
      was not detected by the TCP checksum, TCP\n   retransmission will not occur
      and thus cannot assist in recovering\n   from the error.  iSCSI contains both
      data and command retry\n   mechanisms to deal with the resulting situations,
      including SNACK,\n   the ability to reissue R2T commands, and the retry (X)
      bit for\n   commands.\n   IPsec offers protection against an attacker attempting
      to modify\n   packets in transit, as well as unintentional packet modifications\n
      \  caused by network malfunctions or other errors.  In general, IPsec\n   authentication
      transforms afford stronger integrity protection than\n   both the 16-bit TCP
      checksum and the 32-bit application-layer CRC\n   specified for use with iSCSI.
      \ Since IPsec integrity protection\n   occurs below TCP, if an error is discovered,
      then the packet will be\n   discarded and TCP retransmission will occur, so
      that no recovery\n   action need be taken at the iSCSI layer.\n"
    - contents:
      - "3.6.1.  Simplification of Recovery Logic\n   Where IPsec integrity protection
        is known to be in place end-to-end\n   between iSCSI endpoints (or the portion
        that requires additional\n   integrity protection), portions of iSCSI can
        be simplified.  For\n   example, mechanisms to recover from CRC check failures
        are not\n   necessary.\n   If the iSCSI CRC is negotiated, the recovery logic
        can be simplified\n   to regard any CRC check failure as fatal (e.g., generate
        a SCSI CHECK\n   CONDITION on data error, close the corresponding TCP connection
        on\n   header error) because it will be very rare for errors undetected by\n
        \  IPsec integrity protection to be detected by the iSCSI CRC.\n"
      title: 3.6.1.  Simplification of Recovery Logic
    - contents:
      - "3.6.2.  Omission of iSCSI CRC\n   In some situations where IPsec is employed,
        the iSCSI CRC will not\n   provide additional protection and can be omitted.\n
        \  For example, where IPsec processing as well as TCP checksum and iSCSI\n
        \  CRC verification are offloaded within the NIC, each of these checks\n   will
        be verified prior to transferring data across the bus, so that\n   subsequent
        errors will not be detected by these mechanisms.  As a\n   result, where IPsec
        processing is offloaded to the NIC, the iSCSI CRC\n   is not necessary and
        the implementations may wish not to negotiate\n   it.\n   However, in other
        circumstances, the TCP checksum and iSCSI CRC will\n   provide additional
        error coverage because they are computed and\n   checked at a different point
        in the protocol stack or in devices\n   different from those that implement
        the IPsec integrity checks.  The\n   resulting coverage of additional possible
        errors may make it\n   desirable to negotiate use of the iSCSI CRC even when
        IPsec integrity\n   protection is in use.  Examples of these situations include
        where:\n   [1]  IPsec, TCP and iSCSI are implemented purely in software.  Here,\n
        \       additional failure modes may be detected by the TCP checksum\n        and/or
        iSCSI CRC.  For example, after the IPsec message\n        integrity check
        is successfully verified, the segment is copied\n        as part of TCP processing,
        and a memory error during this\n        process might cause the TCP checksum
        or iSCSI CRC verification\n        to fail.\n   [2]  The implementation is
        an iSCSI-iSCSI proxy or gateway.  Here the\n        iSCSI CRC can be propagated
        from one iSCSI connection to\n        another.  In this case, the iSCSI CRC
        is useful to protect iSCSI\n        data against memory, bus, or software
        errors within the proxy or\n        gateway, and requesting it is desirable.\n
        \  [3]  IPsec is provided by a device external to the actual iSCSI\n        device.
        \ Here the iSCSI header and data CRCs can be kept across\n        the part
        of the connection that is not protected by IPsec.  For\n        instance,
        the iSCSI connection could traverse an extra bus,\n        interface card,
        network, interface card, and bus between the\n        iSCSI device and the
        device providing IPsec.  In this case, the\n        iSCSI CRC is desirable,
        and the iSCSI implementation behind the\n        IPsec device may request
        it.\n        Note that if both ends of the connection are on the same\n        segment,
        then traffic will be effectively protected by the layer\n        2 CRC, so
        that negotiation of the iSCSI CRC is not necessary to\n        protect against
        NIC and network errors, although it may be\n        desirable for other reasons
        (e.g., [1] and [2] above).\n"
      title: 3.6.2.  Omission of iSCSI CRC
    title: 3.6.  Application-Layer CRC
  title: 3.  iSCSI Security Interoperability Guidelines
- contents:
  - '4.  iFCP and FCIP Security Issues

    '
  - contents:
    - "4.1.  iFCP and FCIP Authentication Requirements\n   iFCP and FCIP are peer-to-peer
      protocols.  iFCP and FCIP sessions may\n   be initiated by either or both peer
      gateways.  Consequently, bi-\n   directional authentication of peer gateways
      MUST be provided.\n   iFCP and FCIP are transport protocols that encapsulate
      SCSI and Fibre\n   Channel frames over IP.  Therefore, Fibre Channel, operating
      system,\n   and user identities are transparent to the iFCP and FCIP protocols.\n
      \  iFCP gateways use Discovery Domain information obtained from the iSNS\n   server
      to determine whether the initiating Fibre Channel N_PORT\n   should be allowed
      access to the target N_PORT.  N_PORT identities\n   used in the Port Login (PLOGI)
      process will be considered\n   authenticated provided that they are received
      over a connection whose\n   security complies with the local security policy.\n
      \  There is no requirement that the identities used in authentication be\n   kept
      confidential.\n"
    title: 4.1.  iFCP and FCIP Authentication Requirements
  - contents:
    - "4.2.  iFCP Interaction with IPsec and IKE\n   A conformant iFCP Portal is capable
      of establishing one or more IKE\n   Phase-1 Security Associations (SAs) to a
      peer iFCP Portal.  A Phase-1\n   SA may be established when an iFCP Portal is
      initialized, or may be\n   deferred until the first TCP connection with security
      requirements is\n   established.\n   An IKE Phase-2 SA protects one or more
      TCP connections within the\n   same iFCP Portal.  More specifically, the successful
      establishment of\n   an IKE Phase-2 SA results in the creation of two uni-directional\n
      \  IPsec SAs fully qualified by the tuple <SPI, destination IP address,\n   ESP>.
      \ These SAs protect the setup process of the underlying TCP\n   connections
      and all their subsequent TCP traffic.  Each of the TCP\n   connections protected
      by an SA is either in the unbound state, or is\n   bound to a specific iFCP
      session.\n   In summary, at any point in time:\n   [1] There exist 0..M IKE
      Phase-1 SAs between peer iFCP portals\n   [2] Each IKE Phase-1 SAs has 0..N
      IKE Phase-2 SAs\n   [3] Each IKE Phase-2 SA protects 0..Z TCP connections\n
      \  The creation of an IKE Phase-2 SA may be triggered by security policy\n   rules
      retrieved from an iSNS server.  Alternately, the creation of an\n   SA may be
      triggered by policy rules configured through a management\n   interface, reflecting
      iSNS-resident policy rules.  Likewise, the use\n   of a Key Exchange payload
      in Quick Mode for perfect forward secrecy\n   may be driven by security policy
      rules retrieved from the iSNS\n   server, or set through a management interface.\n
      \  If an iFCP implementation makes use of unbound TCP connections, and\n   such
      connections belong to an iFCP Portal with security requirements,\n   then the
      unbound connections MUST be protected by an SA at all times\n   just like bound
      connections.\n   Upon receiving an IKE Phase-2 delete message, there is no requirement\n
      \  to terminate the protected TCP connections or delete the associated\n   IKE
      Phase-1 SA.  Since an IKE Phase-2 SA may be associated with\n   multiple TCP
      connections, terminating such connections might in fact\n   be inappropriate
      and untimely.\n   To minimize the number of active Phase-2 SAs, IKE Phase-2
      delete\n   messages may be sent for Phase-2 SAs whose TCP connections have not\n
      \  handled data traffic for a while.  To minimize the use of SA\n   resources
      while the associated TCP connections are idle, creation of\n   a new SA should
      be deferred until new data are to be sent over the\n   connections.\n"
    title: 4.2.  iFCP Interaction with IPsec and IKE
  - contents:
    - "4.3.  FCIP Interaction with IPsec and IKE\n   FCIP Entities establish tunnels
      with other FCIP Entities in order to\n   transfer IP encapsulated FC frames.
      \ Each tunnel is a separate FCIP\n   Link, and can encapsulate multiple TCP
      connections.  The binding of\n   TCP connections to an FCIP Link is performed
      using the Fibre Channel\n   World Wide Names (WWNs) of the two FCIP Entities.\n
      \  FCIP Entities may have more than one interface and IP address, and it\n   is
      possible for an FCIP Link to contain multiple TCP connections\n   whose FCIP
      endpoint IP Addresses are different.  In this case, an IKE\n   Phase 1 SA is
      typically established for each FCIP endpoint IP Address\n   pair.  For the purposes
      of establishing an IKE Phase 1 SA, static IP\n   addresses are typically used
      for identification.\n   Each TCP connection within an FCIP Link corresponds
      to an IKE Phase 2\n   (Quick Mode) SA.  This is established prior to sending
      the initial\n   TCP SYN packet and applies to the life of the connection.  Phase
      2\n   negotiation is also required for rekeying, in order to protect\n   against
      replay attacks.\n   FCIP implementations MAY provide administrative management
      of\n   Confidentiality usage.  These management interfaces SHOULD be\n   provided
      in a secure manner, so as to prevent an attacker from\n   subverting the security
      process by attacking the management\n   interface.\n   FCIP Entities do not
      require any user-level authentication, since all\n   FCIP Entities participate
      in a machine-level tunnel function.  FCIP\n   uses SLP for discovery, but not
      to distribute security policies.\n"
    title: 4.3.  FCIP Interaction with IPsec and IKE
  title: 4.  iFCP and FCIP Security Issues
- contents:
  - '5.  Security Considerations

    '
  - contents:
    - "5.1.  Transport Mode Versus Tunnel Mode\n   With respect to block storage protocols,
      the major differences\n   between the IPsec tunnel mode and transport mode are
      as follows:\n   [1]  MTU considerations.\n        Tunnel mode introduces an
      additional IP header into the datagram\n        that reflects itself in a corresponding
      decrease in the path MTU\n        seen by packets traversing the tunnel.  This
      may result in a\n        decrease in the maximum segment size of TCP connections
      running\n        over the tunnel.\n   [2]  Address assignment and configuration.\n
      \       Within IPsec tunnel mode, it is necessary for inner and outer\n        source
      addresses to be configured, and for inner and outer\n        destination addresses
      to be discovered.  Within transport mode\n        it is only necessary to discover
      a single destination address\n        and configure a single source address.
      \ IPsec tunnel mode\n        address usage considerations are discussed in more
      detail below.\n   [3]  NAT traversal.\n        As noted in [RFC3715], IPsec
      tunnel mode ESP can traverse NAT in\n        limited circumstances, whereas
      transport mode ESP cannot\n        traverse NAT.  To enable NAT traversal in
      the general case, the\n        IPsec NAT traversal functionality described in
      [RFC3715],\n        [UDPIPsec] and [NATIKE] can be implemented.  More details
      are\n        provided in the next section.\n   [4]  Firewall traversal.\n        Where
      a block storage protocol is to traverse administrative\n        domains, the
      firewall administrator may desire to verify the\n        integrity and authenticity
      of each transiting packet, rather\n        than opening a hole in the firewall
      for the block storage\n        protocol.  IPsec tunnel mode lends itself to
      such verification,\n        since the firewall can terminate the tunnel mode
      connection\n        while still allowing the endpoints to communicate end-to-end.\n
      \       If desired, the endpoints can in addition utilize IPsec\n        transport
      mode for end-to-end security, so that they can also\n        verify authenticity
      and integrity of each packet for themselves.\n        In contrast, carrying
      out this verification with IPsec transport\n        mode is more complex, since
      the firewall will need to terminate\n        the IPsec transport mode connection
      and will need to act as an\n        iSCSI, iFCP or FCIP gateway or TCP proxy,
      originating a new\n        IPsec transport mode connection from the firewall
      to the\n        internal endpoint.  Such an implementation cannot provide end-\n
      \       to-end authenticity or integrity protection, and an\n        application-layer
      CRC (iSCSI) or forwarding of the Fibre Channel\n        frame CRC (iFCP and
      FCIP) is necessary to protect against errors\n        introduced by the firewall.\n
      \  [5]  IPsec-application integration.\n        Where IPsec and the application
      layer protocol are implemented\n        on the same device or host, it is possible
      to enable tight\n        integration between them.  For example, the application
      layer\n        can request and verify that connections are protected by IPsec,\n
      \       and can obtain attributes of the IPsec security association.\n        While
      in transport mode implementations the IPsec and\n        application protocol
      implementations typically reside on the\n        same host, with IPsec tunnel
      mode they may reside on different\n        hosts. Where IPsec is implemented
      on an external gateway,\n        integration between the application and IPsec
      is typically not\n        possible.  This limits the ability of the application
      to control\n        and verify IPsec behavior.\n"
    - contents:
      - "5.1.1.  IPsec Tunnel Mode Addressing Considerations\n   IPsec tunnels include
        both inner and outer source as well as\n   destination addresses.\n   When
        used with IP block storage protocols, the inner destination\n   address represents
        the address of the IP block storage protocol peer\n   (e.g., the ultimate
        destination for the packet).  The inner\n   destination address can be discovered
        using SLPv2 or iSNS, or can be\n   resolved from an FQDN via DNS, so that
        obtaining this address is\n   typically not an issue.\n   The outer destination
        address represents the address of the IPsec\n   security gateway used to reach
        the peer.  Several mechanisms have\n   been proposed for discovering the IPsec
        security gateway used to\n   reach a particular peer.  [RFC2230] discusses
        the use of KX Resource\n   Records (RRs) for IPsec gateway discovery.  However,
        while KX RRs are\n   supported by many DNS server implementations, they have
        not yet been\n   widely deployed.  Alternatively, DNS SRV [RFC2782] can be
        used for\n   this purpose.  Where DNS is used for gateway location, DNS security\n
        \  mechanisms such as DNSSEC ([RFC2535], [RFC2931]), TSIG [RFC2845], and\n
        \  Simple Secure Dynamic Update [RFC3007] are advisable.\n   When used with
        IP block storage protocols, the outer source address\n   is configured either
        statically or dynamically, using mechanisms such\n   as DHCPv4 [RFC2131],
        DHCPV6 [RFC3315], or stateless address\n   autoconfiguration [RFC2373].\n
        \  The inner source address SHOULD be included in the Quick Mode ID\n   payload
        when the peer establishes a tunnel mode SA with the IPsec\n   security gateway.
        \ This enables the IPsec security gateway to\n   properly route packets back
        to the remote peer.  The inner source\n   address can be configured via a
        variety of mechanisms, depending on\n   the scenario.  Where the IP block
        storage peers are located within\n   the same administrative domain, it is
        typically possible for the\n   inner and outer source addresses to be the
        same.  This will work\n   because the outer source address is presumably assigned
        from within a\n   prefix assigned to the administrative domain, and is therefore\n
        \  routable within the domain. Assuming that the IPsec security gateway\n
        \  is aware of the inner source address used by the connecting peer and\n
        \  plumbs a host route for it, then packets arriving at the IPsec\n   security
        gateway destined for the address can be correctly\n   encapsulated and sent
        down the correct tunnel.\n   Where IP block storage peers are located within
        different\n   administrative domains, it may be necessary for the inner source\n
        \  address to be assigned by the IPsec security gateway, effectively\n   \"joining\"
        the remote host to the LAN attached to the IPsec security\n   gateway.  For
        example, if the remote peer were to use its assigned\n   (outer) source address
        as the inner source address, then a number of\n   problems might result:\n
        \  [1]  Intrusion detection systems sniffing the LAN behind the IPsec\n        security
        gateway would notice source addresses originating\n        outside the administrative
        domain.\n   [2]  Reply packets might not reach their destination, since the
        IPsec\n        security gateway typically does not advertise the default route,\n
        \       but rather only the prefix that it allocates addresses from.\n        Since
        the remote peer's address does not originate from with a\n        prefix native
        to the administrative domain, it is likely that\n        routers within the
        domain would not have a route for it, and\n        would send the packet off
        to the router advertising the default\n        route (perhaps a border router)
        instead of to the IPsec security\n        gateway.\n   For these reasons,
        for inter-domain use, assignment of inner source\n   addresses may be needed.
        \ At present this is not a very common\n   scenario; however, if address assignment
        is provided, then DHCP-based\n   address assignment within IPsec tunnel mode
        [RFC3456] MUST be\n   supported.  Note that this mechanism is not yet widely
        deployed\n   within IPsec security gateways; existing IPsec tunnel mode servers\n
        \  typically implement this functionality via proprietary extensions to\n
        \  IKE.\n"
      title: 5.1.1.  IPsec Tunnel Mode Addressing Considerations
    title: 5.1.  Transport Mode Versus Tunnel Mode
  - contents:
    - "5.2.  NAT Traversal\n   As noted in [RFC3715], tunnel mode ESP can traverse
      NAT in a limited\n   set of circumstances.  For example, if there is only one
      protocol\n   endpoint behind a NAT, \"ANY to ANY\" selectors are negotiated,
      and the\n   receiver does not perform source address validation, then tunnel
      mode\n   ESP may successfully traverse NATs.  Since ignoring source address\n
      \  validation introduces new security vulnerabilities, and negotiation\n   of
      specific selectors is desirable so as to limit the traffic that\n   can be sent
      down the tunnel, these conditions may not necessarily\n   apply, and tunnel
      mode NAT traversal will not always be possible.\n   TCP carried within Transport
      mode ESP cannot traverse NAT, even\n   though ESP itself does not include IP
      header fields within its\n   message integrity check.  This is because the 16-bit
      TCP checksum is\n   calculated based on a \"pseudo-header\" that includes IP
      header fields,\n   and the checksum is protected by the IPsec ESP message integrity\n
      \  check.  As a result, the TCP checksum will be invalidated by a NAT\n   located
      between the two endpoints.\n   Since TCP checksum calculation and verification
      is mandatory in both\n   IPv4 and IPv6, it is not possible to omit checksum
      verification while\n   remaining standards compliant.  In order to enable traversal
      of NATs\n   existing while remaining in compliance, iSCSI, iFCP or FCIP security\n
      \  implementations can implement IPsec/IKE NAT traversal, as described\n   in
      [RFC3715], [UDPIPsec], and [NATIKE].\n   The IKE [NATIKE] and IPsec [UDPIPsec]
      NAT traversal specifications\n   enable UDP encapsulation of IPsec to be negotiated
      if a NAT is\n   detected in the path.  By determining the IP address of the
      NAT, the\n   TCP checksum can be calculated based on a pseudo-header including
      the\n   NAT-adjusted address and ports.  If this is done prior to calculating\n
      \  the IPsec message integrity check, TCP checksum verification will not\n   fail.\n"
    title: 5.2.  NAT Traversal
  - contents:
    - "5.3.  IKE Issues\n   There are situations where it is necessary for IKE to
      be implemented\n   in firmware.  In such situations, it is important to keep
      the size of\n   the IKE implementation within strict limits.  An upper bound
      on the\n   size of an IKE implementation might be considered to be 800 KB, with\n
      \  80 KB enabling implementation in a wide range of situations.\n   As noted
      in Table 5.3-1 on the next page, IKE implementations\n   currently exist which
      meet the requirements.  Therefore, while\n   removal of seldom used IKE functionality
      (such as the nonce\n   authentication methods) would reduce complexity, implementations\n
      \  typically will not require this in order to fit within the code size\n   budget.\n"
    title: 5.3.  IKE Issues
  - contents:
    - "5.4.  Rekeying Issues\n   It is expected that IP block storage implementations
      will need to\n   operate at high speed.  For example, implementations operating
      at 1\n   Gbps are currently in design, with 10 Gbps implementations to follow\n
      \  shortly thereafter.  At these speeds, a single IPsec SA could rapidly\n   cycle
      through the 32-bit IPsec sequence number space.\n   For example, a single SA
      operating at 1 Gbps line rate and sending 64\n   octet packets would exhaust
      the 32-bit sequence number space in 2200\n   seconds, or 37 minutes.  With 1518
      octet packets, exhaustion would\n   occur in 14.5 hours.  At 10 Gbps, exhaustion
      would occur in 220\n   seconds or 3.67 minutes.  With 1518 octet packets, this
      would occur\n   within 1.45 hours.\n   In the future, it may be desirable for
      implementations operating at\n   speeds of 1 Gbps or greater to implement IPsec
      sequence number\n   extension, described in [Seq].  Note that depending on the
      transform\n   in use, it is possible that rekeying will be required prior to\n
      \  exhaustion of the sequence number space.\n   In CBC-mode ciphers the ciphertext
      of one block depends on the\n   plaintext of that block as well as the ciphertext
      of the previous\n   block.  This implies that if the ciphertext of two blocks
      are\n   identical, and the plaintext of the next block is also identical,\n
      \  then the ciphertext of the next block will be identical.  Thus, if\n   identical
      ciphertext blocks can be found with matching subsequent\n   blocks, an attacker
      can determine the existence of matching\n   plaintext.\n   Such \"Birthday attacks\"
      were examined by Bellare et. al. in\n   [DESANALY].  On average, a ciphertext
      block of size n bits will be\n   expected to repeat every 2^[n/2] blocks.  Although
      a single \"birthday\n   attack\" does not provide much information to an attacker,
      multiple\n   such attacks might provide useful information.  To  make this\n
      \  unlikely, it is recommended that a rekey occur before 2^[n/2] blocks\n   have
      been sent on a given SA.  Bellare et. al. have formalized this\n   in [DESANALY],
      showing that the insecurity of CBC mode increases as\n   O(s^2/2^n), where n
      is the block size in bits, and s is the total\n   number of blocks encrypted.
      \ These conclusions do not apply to\n   counter mode.\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               | Code size   |             |\n   |Implementation |  (octets)
      \  | Release     |\n   |               |             |             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               |             | Linux       |\n   | Pluto         |  258KB
      \     | FreeSWAN    |\n   |(FreeSWAN)     |             | x86         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               |             |             |\n   | Racoon        |  400KB
      \     | NetBSD 1.5  |\n   | (KAME)        |             | x86         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               |             |             |\n   | Isakmpd       |  283KB
      \     | NetBSD 1.5  |\n   | (Erickson)    |             | x86         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               |             |             |\n   | WindRiver     |  142KB
      \     | PowerPC     |\n   |               |             |             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               |             |             |\n   | Cisco         |  222KB
      \     | PowerPC     |\n   | VPN1700       |             |             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               |             |             |\n   | Cisco         |  350K
      \      | PowerPC     |\n   | VPN3000       |             |             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               |             |             |\n   | Cisco         |  228KB
      \     | MIPS        |\n   | VPN7200       |             |             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Table 5.3-1 - Code Size for IKE implementations\n   The formula below sets
      a limit on the bytes that can be sent on a CBC\n   SA before a rekey is required:\n
      \              B = (n/8) * 2^[n/2]\n   Where:\n               B = maximum bytes
      sent on the SA\n               n = block size in bits\n   This means that cipher
      block size as well as key length needs to be\n   considered in the rekey decision.
      \ 3DES uses a block size n = 64 bits\n   (2^3 bytes); this implies that the
      SA must be rekeyed before B =\n   (64/8) * (2^32) = 2^35 bytes are sent.  At
      1 Gbps, this implies that\n   a rekey will be required every 274.9 seconds (4.6
      minutes); at 10\n   Gbps, a rekey is required every 27.5 seconds.\n   In terms
      of the sequence number space, for a 3DES encrypted message\n   of 512 = 2^9
      bytes (2^6 blocks) this implies that the key has become\n   insecure after about
      2^26 messages.\n"
    title: 5.4.  Rekeying Issues
  - contents:
    - "5.5.  Transform Issues\n   Since IP block storage implementations may operate
      at speeds of 1\n   Gbps or greater, the ability to offer IPsec security services
      at high\n   speeds is of intense concern.  Since support for multiple algorithms\n
      \  multiplies the complexity and expense of hardware design, one of the\n   goals
      of the transform selection effort is to find a minimal set of\n   confidentiality
      and authentication algorithms implementable in\n   hardware at speeds of up
      to 10 Gbps, as well as being efficient for\n   implementation in software at
      speeds of 100 Mbps or slower.\n   In this specification, we primarily concern
      ourselves with IPsec\n   transforms that have already been specified, and for
      which parts are\n   available that can run at 1 Gbps line rate.  Where existing\n
      \  algorithms do not gracefully scale to 10 Gbps, we further consider\n   algorithms
      for which transform specifications are not yet complete,\n   but for which parts
      are expected to be available for inclusion in\n   products shipping within the
      next 12 months.  As the state of the art\n   advances, the range of feasible
      algorithms will broaden and\n   additional mandatory-to-implement algorithms
      may be considered.\n   Section 5 of [RFC2406] states:\n      \"A compliant ESP
      implementation MUST support the following\n      mandatory-to-implement algorithms:\n
      \        - DES in CBC mode\n         - HMAC with MD5\n         - HMAC with SHA-1\n
      \        - NULL Authentication algorithm\n         - NULL Encryption algorithm\"\n
      \  The DES algorithm is specified in [FIPS46-3]; implementation\n   guidelines
      are found in [FIPS74], and security issues are discussed\n   in [DESDIFF],[DESINT],
      [DESCRACK].  The DES IPsec transform is\n   defined in [RFC2405] and the 3DES
      in CBC mode IPsec transform is\n   specified in [RFC2451].\n   The MD5 algorithm
      is specified in [RFC1321]; HMAC is defined in\n   [RFC2104] and security issues
      with MD5 are discussed in [MD5Attack].\n   The HMAC-MD5 IPsec transform is specified
      in [RFC2403].  The HMAC-\n   SHA1 IPsec transform is specified in [RFC2404].\n
      \  In addition to these existing algorithms, NIST is currently\n   evaluating
      the following modes [NSPUE2] of AES, defined in [FIPS197]:\n      AES in Electronic
      Codebook (ECB) confidentiality mode\n      AES in Cipher Block Chaining (CBC)
      confidentiality mode\n      AES in Cipher Feedback (CFB) confidentiality mode\n
      \     AES in Output Feedback (OFB) confidentiality mode\n      AES in Counter
      (CTR) confidentiality mode\n      AES CBC-MAC authentication mode\n   When utilizing
      AES modes, it may be necessary to use larger public\n   keys; the tradeoffs
      are described in [KeyLen].  Additional MODP\n   Diffie-Hellman groups for use
      with IKE are described in [RFC3526].\n   The Modes [NSPUE2] effort is also considering
      a number of additional\n   algorithms, including the following:\n      PMAC\n
      \  To provide authentication, integrity and replay protection, IP block\n   storage
      security implementations MUST support HMAC-SHA1 [RFC2404] for\n   authentication,
      and AES in CBC MAC mode with XCBC extensions SHOULD\n   be supported [RFC3566].\n
      \  HMAC-SHA1 [RFC2404] is to be preferred to HMAC-MD5, due to concerns\n   that
      have been raised about the security of MD5 [MD5Attack].  HMAC-\n   SHA1 parts
      are currently available that run at 1 Gbps, the algorithm\n   is implementable
      in hardware at speeds up to 10 Gbps, and an IPsec\n   transform specification
      [RFC2404] exists.  As a result, it is most\n   practical to utilize HMAC-SHA1
      as the authentication algorithm for\n   products shipping in the near future.
      \ AES in CBC-MAC authentication\n   mode with XCBC extensions was selected since
      it avoids adding\n   substantial additional code if AES is already being implemented
      for\n   encryption; an IPsec transform document is available [RFC3566].\n   Authentication
      transforms also exist that are considerably more\n   efficient to implement
      than HMAC-SHA1, or AES in CBC-MAC\n   authentication mode.  UMAC [UMAC],[UMACKR]
      is more efficient to\n   implement in software and PMAC [PMAC] is more efficient
      to implement\n   in hardware.  PMAC is currently being evaluated as part of
      the NIST\n   modes effort [NSPUE2] but an IPsec transform does not yet exist;\n
      \  neither does a UMAC transform.\n   For confidentiality, the ESP mandatory-to-implement
      algorithm (DES)\n   is unacceptable.  As noted in [DESCRACK], DES is crackable
      with\n   modest computation resources, and so is inappropriate for use in\n
      \  situations requiring high levels of security.\n   To provide confidentiality
      for iSCSI, iFCP, and FCIP, 3DES in CBC\n   mode [RFC2451] MUST be supported
      and AES in Counter Mode [RFC3686]\n   SHOULD be supported.  For use in high
      speed implementations, 3DES has\n   significant disadvantages.  However, a 3DES
      IPsec transform has been\n   specified and parts are available that can run
      at 1 Gbps, so\n   implementing 3DES in products is practical for the short term.\n
      \  As described in Appendix B, 3DES software implementations make\n   excessive
      computational demands at speeds of 100 Mbps or greater,\n   effectively ruling
      out software-only implementations.  In addition,\n   3DES implementations  require
      rekeying prior to exhaustion of the\n   current 32-bit IPsec sequence number
      space, and thus would not be\n   able to make use of sequence space extensions
      if they were available.\n   This means that 3DES will require very frequent
      rekeying at speeds of\n   10 Gbps or faster.  Thus, 3DES is inconvenient for
      use at very high\n   speeds, as well as being impractical for implementation
      in software\n   at slower speeds (100+ Mbps).\n"
    title: 5.5.  Transform Issues
  - contents:
    - "5.6.  Fragmentation Issues\n   When certificate authentication is used, IKE
      fragmentation can be\n   encountered.  This can occur when certificate chains
      are used, or\n   even when exchanging a single certificate if the key size or
      size of\n   other certificate fields (such as the distinguished name and other\n
      \  OIDs) is large enough.  Many Network Address Translators (NATs) and\n   firewalls
      do not handle fragments properly, dropping them on inbound\n   and/or outbound.\n
      \  Routers in the path will also frequently discard fragments after the\n   initial
      one, since they typically will not contain full IP headers\n   that can be compared
      against an Access List.\n   As a result, where IKE fragmentation occurs, the
      endpoints will often\n   be unable to establish an IPsec security association.
      \ The solution\n   to this problem is to install NAT, firewall or router code
      load that\n   can properly support fragments. If this cannot be done, then the\n
      \  following alternatives can be considered:\n   [1]  Obtaining certificates
      by other means.\n   [2]  Reducing the size of the certificate chain.\n   [3]
      \ Reducing  the size of fields within the certificates.  This\n        includes
      reduction in the key size, the distinguished name or\n        other fields.
      \ This should be considered only as a last resort.\n   Fragmentation can become
      a concern when prepending IPsec headers to a\n   frame.  One mechanism that
      can be used to reduce this problem is to\n   utilize path MTU discovery.  For
      example, when TCP is used as the\n   transport for iSCSI, iFCP or FCIP then
      path MTU discovery, described\n   in [RFC1191], [RFC1435], [RFC1981], can be
      used to enable the TCP\n   endpoints to discover the correct MTU, including
      effects due to IPsec\n   encapsulation.\n   However, Path MTU discovery fails
      when appropriate ICMP messages are\n   not received by the host.  This occurs
      in IPsec implementations that\n   drop unauthenticated ICMP packets.  This can
      result in blackholing in\n   naive TCP implementations, as described in [RFC2923].
      \ Appropriate\n   TCP behavior is described in section 2.1 of [RFC2923]:\n      \"TCP
      should notice that the connection is timing out.  After\n      several timeouts,
      TCP should attempt to send smaller packets,\n      perhaps turning off the DF
      flag for each packet.  If this\n      succeeds, it should continue to turn off
      PMTUD for the connection\n      for some reasonable period of time, after which
      it should probe\n      again to try to determine if the path has changed.\"\n
      \  If an ICMP PMTU is received by an IPsec implementation that processes\n   unauthenticated
      ICMP packets, this value should be stored in the SA\n   as proposed in [RFC2401],
      and IPsec should also provide notification\n   of this event to TCP so that
      the new MTU value can be correctly\n   reflected.\n"
    title: 5.6.  Fragmentation Issues
  - contents:
    - "5.7.  Security Checks\n   When a connection is opened which requires security,
      IP block storage\n   security implementations may wish to check that the connection
      is\n   protected by IPsec.  If security is desired and IPsec protection is\n
      \  removed on a connection, it is reinstated before non-protected IP\n   block
      storage packets are sent.  Since IPsec verifies that each\n   packet arrives
      on the correct SA, as long as it can be ensured that\n   IPsec protection is
      in place, then IP block storage implementations\n   can be assured that each
      received packet was sent by a trusted peer.\n   When used with IP block storage
      protocols, each TCP connection MUST\n   be protected by an IKE Phase 2 SA.  Traffic
      from one or more than one\n   TCP connection may flow within each IPsec Phase
      2 SA.  IP block\n   storage security implementations need not verify that the
      IP\n   addresses and TCP port values in the packet match the socket\n   information
      that was used to setup the connection.  This check will\n   be performed by
      IPsec, preventing malicious peers from sending\n   commands on inappropriate
      Quick Mode SAs.\n"
    title: 5.7.  Security Checks
  - contents:
    - '5.8.  Authentication Issues

      '
    - contents:
      - "5.8.1.  Machine Versus User Certificates\n   The certificate credentials
        provided by the iSCSI initiator during\n   the IKE negotiation may be those
        of the machine or of the iSCSI\n   entity.  When machine authentication is
        used, the machine certificate\n   is typically stored on the iSCSI initiator
        and target during an\n   enrollment process.  When user certificates are used,
        the user\n   certificate can be stored either on the machine or on a smartcard.\n
        \  For iFCP and FCIP, the certificate credentials provided will almost\n   always
        be those of the device and will be stored on the device.\n   Since the value
        of a machine certificate is inversely proportional to\n   the ease with which
        an attacker can obtain one under false pretenses,\n   it is advisable that
        the machine certificate enrollment process be\n   strictly controlled.  For
        example, only administrators may have the\n   ability to enroll a machine
        with a machine certificate.\n   While smartcard certificate storage lessens
        the probability of\n   compromise of the private key, smartcards are not necessarily\n
        \  desirable in all situations.  For example, some organizations\n   deploying
        machine certificates use them so as to restrict use of\n   non-approved hardware.
        \ Since user authentication can be provided\n   within iSCSI login (keeping
        in mind the weaknesses described\n   earlier), support for machine authentication
        in IPsec makes it is\n   possible to authenticate both the machine as well
        as the user.  Since\n   iFCP and FCIP have no equivalent of iSCSI Login, for
        these protocols\n   only the machine is authenticated.\n   In circumstances
        in which this dual assurance is considered valuable,\n   enabling movement
        of the machine certificate from one machine to\n   another, as would be possible
        if the machine certificate were stored\n   on a smart card, may be undesirable.\n
        \  Similarly, when user certificate are deployed, it is advisable for\n   the
        user enrollment process to be strictly controlled.  If for\n   example, a
        user password can be readily used to obtain a certificate\n   (either a temporary
        or a longer term one), then that certificate has\n   no more security value
        than the password.  To limit the ability of an\n   attacker to obtain a user
        certificate from a stolen password, the\n   enrollment period can be limited,
        after which password access will be\n   turned off.  Such a policy will prevent
        an attacker obtaining the\n   password of an unused account from obtaining
        a user certificate once\n   the enrollment period has expired.\n"
      title: 5.8.1.  Machine Versus User Certificates
    - contents:
      - "5.8.2.  Pre-Shared Keys\n   Use of pre-shared keys in IKE Main Mode is vulnerable
        to man-in-the-\n   middle attacks when used with dynamically addressed hosts
        (such as\n   with iSCSI initiators).  In Main Mode it is necessary for SKEYID_e
        to\n   be used prior to the receipt of the identification payload.\n   Therefore
        the selection of the pre-shared key may only be based on\n   information contained
        in the IP header.  However, where dynamic IP\n   address assignment is typical,
        it is often not possible to identify\n   the required pre-shared key based
        on the IP address.\n   Thus when pre-shared key authentication is used in
        Main Mode along\n   with entities whose address is dynamically assigned, the
        same pre-\n   shared key is shared by a group and is no longer able to function
        as\n   an effective shared secret.  In this situation, neither the initiator\n
        \  nor Responder identifies itself during IKE Phase 1; it is only known\n
        \  that both parties are a member of the group with knowledge of the\n   pre-shared
        key.  This permits anyone with access to the group pre-\n   shared key to
        act as a man-in-the-middle.  This vulnerability is\n   typically not of concern
        where IP addresses are typically statically\n   assigned (such as with iFCP
        and FCIP), since in this situation\n   individual pre-shared keys are possible
        within IKE Main Mode.\n   However, where IP addresses are dynamically assigned
        and Main Mode is\n   used along with pre-shared keys, the Responder is not
        authenticated\n   unless application-layer mutual authentication is performed
        (e.g.,\n   iSCSI login authentication).  This enables an attacker in possession\n
        \  of the group pre-shared key to masquerade as the Responder.  In\n   addition
        to enabling the attacker to present false data, the attacker\n   would also
        be able to mount a dictionary attack on legacy\n   authentication methods
        such as CHAP [RFC1994], potentially\n   compromising many passwords at a time.
        \ This vulnerability is widely\n   present in existing IPsec implementations.\n
        \  Group pre-shared keys are not required in Aggressive Mode since the\n   identity
        payload is sent earlier in the exchange, and therefore the\n   pre-shared
        key can be selected based on the identity.  However, when\n   Aggressive Mode
        is used the user identity is exposed and this is\n   often considered undesirable.\n
        \  Note that care needs to be taken with IKE Phase 1 Identity Payload\n   selection
        in order to enable mapping of identities to pre-shared keys\n   even with
        Aggressive Mode.  Where the ID_IPV4_ADDR or ID_IPV6_ADDR\n   Identity Payloads
        are used and addresses are dynamically assigned,\n   mapping of identities
        to keys is not possible, so that group pre-\n   shared keys are still a practical
        necessity.  As a result, identities\n   other than ID_IPV4_ADDR and ID_IPV6_ADDR
        (such as ID_FQDN or\n   ID_USER_FQDN) SHOULD be employed in situations where
        Aggressive mode\n   is utilized along with pre-shared keys and IP addresses
        are\n   dynamically assigned.\n"
      title: 5.8.2.  Pre-Shared Keys
    - contents:
      - "5.8.3.  IKE and Application-Layer Authentication\n   In addition to IKE authentication,
        iSCSI implementations utilize\n   their own authentication methods.  Currently,
        work is underway on\n   Fibre Channel security, so that a similar authentication
        process may\n   eventually also apply to iFCP and FCIP as well.\n   While
        iSCSI provides initial authentication, it does not provide\n   per-packet
        authentication, integrity or replay protection.  This\n   implies that the
        identity verified in the iSCSI Login is not\n   subsequently verified on reception
        of each packet.\n   With IPsec, when the identity asserted in IKE is authenticated,
        the\n   resulting derived keys are used to provide per-packet authentication,\n
        \  integrity and replay protection.  As a result, the identity verified\n
        \  in the IKE conversation is subsequently verified on reception of each\n
        \  packet.\n   Let us assume that the identity claimed in iSCSI Login is a
        user\n   identity, while the identity claimed within IKE is a machine\n   identity.
        \ Since only the machine identity is verified on a per-\n   packet basis,
        there is no way for the recipient to verify that only\n   the user authenticated
        via iSCSI Login is using the IPsec SA.\n   In fact, IPsec implementations
        that only support machine\n   authentication typically have no way to distinguish
        between user\n   traffic within the kernel.  As a result, where machine authentication\n
        \  is used, once an IPsec SA is opened, another user on a multi-user\n   machine
        may be able to send traffic down the IPsec SA.  This is true\n   for both
        transport mode and tunnel mode SAs.\n   To limit the potential vulnerability,
        IP block storage\n   implementations MUST do the following:\n   [1]  Ensure
        that socket access is appropriately controlled.  On a\n        multi-user
        operating system, this implies that sockets opened\n        for use by IP
        block storage protocols MUST be exclusive.\n   [2]  In the case of iSCSI,
        implementations MUST also ensure that\n        application layer login credentials
        (such as iSCSI login\n        credentials) are protected from unauthorized
        access.\n   If these directives are followed, then a rogue process will not
        be\n   able to access an IP block storage volume.\n   While the identity asserted
        within IKE is verified on a per-packet\n   basis, to avoid interference between
        users on a given machine,\n   operating system support is required.  In order
        to segregate traffic\n   between users when user authentication is supported,
        the IPsec\n   endpoints must ensure that only traffic from that particular
        user is\n   sent or received within the IPsec SA.  Enforcement of this\n   restriction
        is the responsibility of the operating system.\n   In kernel mode iSCSI drivers
        there typically is no user context to\n   perform user authentication.  In
        this case the authentication is\n   closer to machine authentication.  In
        most operating systems device\n   permissions would control the ability to
        read/write to the device\n   prior to mounting.  Once the device is mounted,
        ACLs set by the\n   filesystem control access to the device.  An administrator
        can access\n   the blocks on the device directly (for instance, by sending
        pass\n   through requests to the port driver directly such as in Windows NT).\n
        \  In the same way, an administrator can open a raw socket and send\n   IPsec
        protected packets to an iSCSI target.  The situation is\n   analogous, and
        in this respect no new vulnerability is created that\n   didn't previously
        exist.  The Operating system's ACLs need to be\n   effective to protect a
        device (whether it is a SCSI device or an\n   iSCSI device).\n"
      title: 5.8.3.  IKE and Application-Layer Authentication
    - contents:
      - "5.8.4.  IP Block Storage Authorization\n   IP block storage protocols can
        use a variety of mechanisms for\n   authorization.  Where ID_FQDN is used
        as the Identity Payload, IP\n   block storage endpoints can be configured
        with a list of authorized\n   FQDNs.  The configuration can occur manually,
        or automatically via\n   iSNS or the iSCSI MIB, defined in [AuthMIB].\n   Assuming
        that IPsec authentication is successful, this list of FQDNs\n   can be examined
        to determine authorization levels.  Where certificate\n   authentication is
        used, it is possible to configure IP block storage\n   protocol endpoints
        with trusted roots.  The trusted roots used with\n   IP block storage protocols
        might be different from the trusted roots\n   used for other purposes.  If
        this is the case, then the burden of\n   negotiating use of the proper certificates
        lies with the IPsec\n   initiator.\n   Note that because IKE does not deal
        well with certificate chains, and\n   is typically configured with a limited
        set of trusted roots, it is\n   most appropriate for intra-domain usage.\n
        \  Since iSCSI supports Login authentication, it is also possible to use\n
        \  the identities presented within the iSCSI Login for authorization\n   purposes.\n
        \  In iFCP, basic access control properties stem from the requirement\n   that
        two communicating iFCP gateways be known to one or more iSNS\n   servers before
        they can engage in iFCP exchanges.  The optional use\n   of discovery domains
        in iSNS yields access control schemas of greater\n   complexity.\n"
      title: 5.8.4.  IP Block Storage Authorization
    title: 5.8.  Authentication Issues
  - contents:
    - "5.9.  Use of AES in Counter Mode\n   When utilizing AES modes, it may be necessary
      to use larger public\n   keys; the tradeoffs are described in [KeyLen].  Additional
      MODP\n   Diffie-Hellman groups for use with IKE are described in [RFC3526].\n
      \  When AES in counter mode is used, it is important to avoid reuse of\n   the
      counter with the same key, even across all time.  Counter mode\n   creates ciphertext
      by XORing generated key stream with plaintext.  It\n   is fairly easy to recover
      the plaintext from two messages counter\n   mode encrypted under the same counter
      value, simply by XORing\n   together the two packets.  The implication of this
      is that it is an\n   error to use IPsec manual keying with counter mode, except
      when the\n   implementation takes heroic measures to maintain state across\n
      \  sessions.  In any case, manual keying MUST NOT be used since it does\n   not
      provide the necessary rekeying support.\n   Another counter mode issue is it
      makes forgery of correct packets\n   trivial.  Counter mode should therefore
      never be used without also\n   using data authentication.\n"
    title: 5.9.  Use of AES in Counter Mode
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   This section provides guidance to the Internet Assigned
    Numbers\n   Authority (IANA) regarding registration of values of the SRP_GROUP\n
    \  key parameter within iSCSI, in accordance with BCP 26, [RFC2434].\n   IANA
    considerations for the iSCSI protocol are described in\n   [RFC3720], Section
    13; for the iFCP protocol in [iFCP], Section 12;\n   and for the FCIP protocol
    in [FCIP], Appendix B.\n"
  - contents:
    - "6.1.  Definition of Terms\n   The following terms are used here with the meanings
      defined in BCP\n   26:  \"name space\", \"assigned value\", \"registration\".\n
      \  The following policies are used here with the meanings defined in BCP\n   26:
      \"Private Use\", \"First Come First Served\", \"Expert Review\",\n   \"Specification
      Required\", \"IETF Consensus\", \"Standards Action\".\n"
    title: 6.1.  Definition of Terms
  - contents:
    - "6.2.  Recommended Registration Policies\n   For registration requests where
      a Designated Expert should be\n   consulted, the responsible IESG Area Director
      should appoint the\n   Designated Expert.\n   For registration requests requiring
      Expert Review, the IPS mailing\n   list should be consulted, or if the IPS WG
      is disbanded, to a mailing\n   list designated by the IESG Area Director.\n
      \  This document defines the following SRP_GROUP keys:\n      SRP-768, SRP-1024,
      SRP-1280, SRP-1536, SRP-2048, MODP-3072, MODP-\n      4096, MODP-6144, MODP-8192\n
      \  New SRP_GROUP keys MUST conform to the iSCSI extension item-label\n   format
      described in [RFC3720] Section 13.5.4.\n   Registration of new SRP_GROUP keys
      is by Designated Expert with\n   Specification Required.  The request is posted
      to the IPS WG mailing\n   list or its successor for comment and security review,
      and MUST\n   include a non-probabalistic proof of primality for the proposed
      SRP\n   group.  After a period of one month as passed, the Designated Expert\n
      \  will either approve or deny the registration request.\n"
    title: 6.2.  Recommended Registration Policies
  title: 6.  IANA Considerations
- contents:
  - "7.  Normative References\n   [RFC793]       Postel, J., \"Transmission Control
    Protocol\", STD 7,\n                  RFC 793, September 1981.\n   [RFC1191]      Mogul,
    J. and S. Deering, \"Path MTU Discovery\", RFC\n                  1191, November
    1990.\n   [RFC1435]      Knowles, S., \"IESG Advice from Experience with Path\n
    \                 MTU Discovery\", RFC 1435, March 1993.\n   [RFC1981]      McCann,
    J., Deering, S. and J. Mogul, \"Path MTU\n                  Discovery for IP version
    6\", RFC 1981, August 1996.\n   [RFC2104]      Krawczyk, H., Bellare, M. and R.
    Canetti, \"HMAC:\n                  Keyed- Hashing for Message Authentication\",
    RFC 2104,\n                  February 1997.\n   [RFC2119]      Bradner, S., \"Key
    words for use in RFCs to Indicate\n                  Requirement Levels\", BCP
    14, RFC 2119, March 1997.\n   [RFC2131]      Droms, R., \"Dynamic Host Configuration
    Protocol\", RFC\n                  2131, March 1997.\n   [RFC2401]      Kent,
    S. and R. Atkinson, \"Security Architecture for\n                  the Internet
    Protocol\", RFC 2401, November 1998.\n   [RFC2404]      Madson, C. and R. Glenn,
    \"The Use of HMAC-SHA-1-96\n                  within ESP and AH\", RFC 2404, November
    1998.\n   [RFC2406]      Kent, S. and R. Atkinson, \"IP Encapsulating Security\n
    \                 Payload (ESP)\", RFC 2406, November 1998.\n   [RFC2407]      Piper,
    D., \"The Internet IP Security Domain of\n                  Interpretation of
    ISAKMP\", RFC 2407, November 1998.\n   [RFC2408]      Maughan, D., Schertler,
    M., Schneider, M. and J.\n                  Turner, \"Internet Security Association
    and Key\n                  Management Protocol (ISAKMP),\" RFC 2408, November\n
    \                 1998.\n   [RFC2409]      Harkins, D. and D. Carrel, \"The Internet
    Key Exchange\n                  (IKE)\", RFC 2409, November 1998.\n   [RFC2412]
    \     Orman, H., \"The OAKLEY Key Determination Protocol\",\n                  RFC
    2412, November 1998.\n   [RFC2434]      Narten, T. and H. Alvestrand, \"Guidelines
    for Writing\n                  an IANA Considerations Section in RFCs\", BCP 26,
    RFC\n                  2434, October 1998.\n   [RFC2451]      Pereira, R. and
    R. Adams, \"The ESP CBC-Mode Cipher\n                  Algorithms\", RFC 2451,
    November 1998.\n   [RFC2608]      Guttman, E., Perkins, C., Veizades, J. and M.
    Day,\n                  \"Service Location Protocol, Version 2\", RFC 2608, June\n
    \                 1999.\n   [RFC2923]      Lahey, K., \"TCP Problems with Path
    MTU Discovery\", RFC\n                  2923, September 2000.\n   [RFC2945]      Wu,
    T., \"The SRP Authentication and Key Exchange\n                  System\", RFC
    2945, September 2000.\n   [RFC3315]      Droms, R., Ed., Bound, J., Volz,, B.,
    Lemon, T.,\n                  Perkins, C. and M. Carney, \"Dynamic Host Configuration\n
    \                 Protocol for IPv6 (DHCPv6)\", RFC 3315, July 2003.\n   [RFC3456]
    \     Patel, B., Aboba, B., Kelly, S. and V. Gupta, \"Dynamic\n                  Host
    Configuration Protocol (DHCPv4) Configuration of\n                  IPsec Tunnel
    Mode\", RFC 3456, January 2003.\n   [RFC3526]      Kivinen, T. and M. Kojo, \"More
    Modular Exponential\n                  (MODP) Diffie-Hellman groups for Internet
    Key Exchange\n                  (IKE)\", RFC 3526, May 2003.\n   [RFC3566]      Frankel,
    S. and H. Herbert, \"The AES-XCBC-MAC-96\n                  Algorithm and Its
    Use with IPsec\", RFC 3566, September\n                  2003.\n   [RFC3643]      Weber,
    R., Rajagopal, M., Trovostino, F., O'Donnel.,\n                  M, Monia, C.and
    M. Mehrar, \"Fibre Channel (FC) Frame\n                  Encapsuation\", RFC 3643,
    December 2003.\n   [RFC3686]      Housley, R., \"Using Advanced Encryption Standard
    (AES)\n                  Counter Mode With IPsec Encapsulating Security Payload\n
    \                 (ESP)\", RFC 3686, January 2004.\n   [RFC3720]      Satran,
    J., Meth, K., Sapuntzakis, C. Chadalapaka, M.\n                  and E. Zeidner,
    \"Internet Small Computer Systems\n                  Interface (iSCSI)\", RFC
    3720, April 2004.\n   [3DESANSI]     American National Standard for Financial
    Services\n                  X9.52-1998, \"Triple Data Encryption Algorithm Modes
    of\n                  Operation\", American Bankers Association, Washington,\n
    \                 D.C., July 29, 1998\n   [SRPNDSS]      Wu, T., \"The Secure
    Remote Password Protocol\", in\n                  Proceedings of the 1998 Internet
    Society Symposium on\n                  Network and Distributed Systems Security,
    San Diego,\n                  CA, pp.  97-111\n"
  title: 7.  Normative References
- contents:
  - "8.  Informative References\n   [RFC1321]      Rivest, R., \"The MD5 Message-Digest
    Algorithm\", RFC\n                  1321, April 1992.\n   [RFC1994]      Simpson,
    W., \"PPP Challenge Handshake Authentication\n                  Protocol (CHAP)\",
    RFC 1994, August 1996.\n   [RFC2230]      Atkinson, R., \"Key Exchange Delegation
    Record for the\n                  DNS\", RFC 2230, November 1997.\n   [RFC2373]
    \     Hinden, R. and S. Deering, \"IP Version 6 Addressing\n                  Architecture\",
    RFC 2373, July 1998.\n   [RFC2402]      Kent, S., Atkinson, R., \"IP Authentication
    Header\",\n                  RFC 2402, November 1998.\n   [RFC2403]      Madson,
    C. and R. Glenn, \"The Use of HMAC-MD5-96\n                  within ESP and AH\",
    RFC 2403, November 1998.\n   [RFC2405]      Madson, C. and N. Doraswamy, \"The
    ESP DES-CBC Cipher\n                  Algorithm With Explicit IV\", RFC 2405,
    November 1998.\n   [RFC2535]      Eastlake, D., \"Domain Name System Security\n
    \                 Extensions\", RFC 2535, March 1999.\n   [RFC2782]      Gulbrandsen,
    A., Vixie, P. and L. Esibov, \"A DNS RR\n                  for specifying the
    location of services (DNS SRV)\",\n                  RFC 2782, February 2000.\n
    \  [RFC2845]      Vixie, P., Gudmundsson, O., Eastlake, D. and B.\n                  Wellington,
    \"Secret Key Transaction Authentication for\n                  DNS (TSIG)\", RFC
    2845, May 2000.\n   [RFC2865]      Rigney, C., Willens, S., Rubens, A. and W.
    Simpson,\n                  \"Remote Authentication Dial In User Service (RADIUS)\",\n
    \                 RFC 2865, June 2000.\n   [RFC2931]      Eastlake, D., \"DNS
    Request and Transaction Signatures\n                  (SIG(0)s )\", RFC 2931,
    September 2000.\n   [RFC2983]      Black, D. \"Differentiated Services and Tunnels\",
    RFC\n                  2983, October 2000.\n   [RFC3007]      Wellington, B.,
    \"Simple Secure Domain Name System\n                  (DNS) Dynamic Update\",
    RFC 3007, November 2000.\n   [RFC3347]      Krueger, M. and R. Haagens, \"Small
    Computer Systems\n                  Interface protocol over the Internet (iSCSI)\n
    \                 Requirements and Design Considerations\", RFC 3347,\n                  July
    2002.\n   [RFC3721]      Bakke, M., Hafner, J., Hufferd, J., Voruganti, K. and\n
    \                 M. Krueger, \"Internet Small Computer Systems Interface\n                  (iSCSI)
    Naming and Discovery\", RFC 3721, April 2004.\n   [AESPERF]      Schneier, B.,
    J. Kelsey, D. Whiting, D. Wagner, C.\n                  Hall, and N. Ferguson,
    \"Performance Comparison of the\n                  AES Submissions\", http://www.counterpane.com/aes-\n
    \                 performance.html\n   [AuthMIB]      Bakke, M., et al., \"Definitions
    of Managed Objects for\n                  iSCSI\", Work in Progress, September
    2002.\n   [CRCTCP]       Stone J., Partridge, C., \"When the CRC and TCP\n                  checksum
    disagree\", ACM Sigcomm, Sept. 2000.\n   [DESANALY]     Bellare, Desai, Jokippi,
    Rogaway, \"A Concrete\n                  Treatment of Symmetric Encryption: Analysis
    of the DES\n                  Modes of Operation\", 1997, http://www-\n                  cse.ucsd.edu/users/mihir/papers/sym-enc.html\n
    \  [DESCRACK]     Cracking DES, O'Reilly & Associates, Sebastapol, CA\n                  2000.\n
    \  [DESDIFF]      Biham, E., Shamir, A., \"Differential Cryptanalysis of\n                  DES-like
    cryptosystems\", Journal of Cryptology Vol 4,\n                  Jan 1991.\n   [DESINT]
    \      Bellovin, S., \"An Issue With DES-CBC When Used Without\n                  Strong
    Integrity\", Proceedings of the 32nd IETF,\n                  Danvers, MA, April
    1995\n   [FCIP]         Rajagopal, M., et al., \"Fibre Channel over TCP/IP\n                  (FCIP)\",
    Work in Progress, August 2002.\n   [FCIPSLP]      Petersen, D., \"Finding FCIP
    Entities Using SLPv2\",\n                  Work in Progress, September 2002.\n
    \  [FIPS46-3]     U.S. DoC/NIST, \"Data encryption standard (DES)\", FIPS\n                  46-3,
    October 25, 1999.\n   [FIPS74]       U.S. DoC/NIST, \"Guidelines for implementing
    and using\n                  the nbs data encryption standard\", FIPS 74, Apr
    1981.\n   [FIPS197]      U.S. DoC/NIST, \"Advanced Encryption Standard (AES)\",\n
    \                 FIPS 197, November 2001,\n                  http://csrc.nist.gov/CryptoToolkit/aes\n
    \  [iFCP]         Monia, C., et al., \"iFCP - A Protocol for Internet\n                  Fibre
    Channel Storage Networking\", Work in Progress,\n                  August 2002.\n
    \  [RFC3715]      Aboba, B. and W. Dixon, \"IPsec-Network Address\n                  Translation
    (NAT) Compatibility Requirements\", RFC\n                  3715, March 2004.\n
    \  [iSCSISLP]     Bakke, M., \"Finding iSCSI targets and Name Servers\n                  Using
    SLP\", Work in Progress, March 2002.\n   [iSNS]         Gibbons, K., et al., \"iSNS
    Internet Storage Name\n                  Service\", Work in Progress, August 2002.\n
    \  [KeyLen]       Orman, H., Hoffman, P., \"Determining Strengths For\n                  Public
    Keys Used For Exchanging Symmetric Keys\", Work\n                  in Progress,
    December 2001.\n   [MD5Attack]    Dobbertin, H., \"The Status of MD5 After a Recent\n
    \                 Attack\", CryptoBytes Vol.2 No.2, Summer 1996\n   [NATIKE]       Kivinen,
    T., et al., \"Negotiation of NAT-Traversal in\n                  the IKE\", Work
    in Progress, June 2002.\n   [NSPUE2]       \"Recommendation for Block Cipher Modes
    of Operation\",\n                  National Institute of Standards and Technology
    (NIST)\n                  Special Publication 800-38A, CODEN: NSPUE2, U.S.\n                  Government
    Printing Office, Washington, DC, July 2001.\n   [PENTPERF]     A. Bosselaers,
    \"Performance of Pentium\n                  implementations\",\n                  http://www.esat.kuleuven.ac.be/~bosselae/\n
    \  [PMAC]         Rogaway, P., Black, J., \"PMAC: Proposal to NIST for a\n                  parallelizable
    message authentication code\",\n                  http://csrc.nist.gov/encryption/modes/proposedmodes/\n
    \                 pmac/pmac-spec.pdf\n   [Seq]          Kent, S., \"IP Encapsulating
    Security Payload (ESP)\",\n                  Work in Progress, July 2002.\n   [SRPDIST]
    \     Wu, T., \"SRP Distribution\", http://www-cs-\n                  students.stanford.edu/~tjw/srp/download.html\n
    \  [UDPIPsec]     Huttunen, A., et. al., \"UDP Encapsulation of IPsec\n                  Packets\",
    Work in Progress, June 2002.\n   [UMAC]         Black, J., Halevi, S., Krawczyk,
    H., Krovetz, T.,\n                  Rogaway, P., \"UMAC: Fast and provably secure
    message\n                  authentication\", Advances in Cryptology - CRYPTO '99,\n
    \                 LNCS vol. 1666, pp.  216-233.  Full version available\n                  from
    http://www.cs.ucdavis.edu/~rogaway/umac\n   [UMACKR]       Krovetz, T., Black,
    J., Halevi, S., Hevia, A.,\n                  Krawczyk, H., Rogaway, P., \"UMAC:
    Message\n                  Authentication Code using Universal Hashing\", Work
    in\n                  Progress, October 2000.  Also available\n                  at:http://www.cs.ucdavis.edu/~rogaway/umac/draft-\n
    \                 krovetz-umac-01.txt\n   [UMACPERF]     Rogaway, P., \"UMAC Performance\",\n
    \                 http://www.cs.ucdavis.edu/~rogaway/umac/perf00.html\n"
  title: 8.  Informative References
- contents:
  - "9.  Acknowledgments\n   Thanks to Steve Bellovin of AT&T Research, William Dixon
    of V6\n   Security, David Black of EMC, Joseph Tardo and Uri Elzur of Broadcom,\n
    \  Julo Satran, Ted Ts'o, Ofer Biran, and Charles Kunzinger of IBM,\n   Allison
    Mankin of ISI, Mark Bakke and Steve Senum of Cisco, Erik\n   Guttman of Sun Microsystems
    and Howard Herbert of Intel for useful\n   discussions of this problem space.\n"
  title: 9.  Acknowledgments
- contents:
  - "Appendix A - Well Known Groups for Use with SRP\n   Modulus (N) and generator
    (g) values for various modulus lengths are\n   given below.  The values below
    are taken from software developed by\n   Tom Wu and Eugene Jhong for the Stanford
    SRP distribution [SRPDIST],\n   and subsequently rigorously verified to be prime.
    \ Implementations\n   supporting SRP authentication MUST support groups up to
    1536 bits,\n   with 1536 bits being the default.\n   iSCSI Key=\"SRP-768\" [768
    bits]\n   Modulus (base 16) =\n   B344C7C4F8C495031BB4E04FF8F84EE95008163940B9558276744D91F7CC9F40\n
    \  2653BE7147F00F576B93754BCDDF71B636F2099E6FFF90E79575F3D0DE694AFF\n   737D9BE9713CEF8D837ADA6380B1093E94B6A529A8C6C2BE33E0867C60C3262B\n
    \  Generator = 2\n   iSCSI Key=\"SRP-1024\" [1024 bits]\n   Modulus (base 16)
    =\n   EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576\n   D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD1\n
    \  5DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC\n   68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3\n
    \  Generator = 2\n   iSCSI Key=\"SRP-1280\" [1280 bits]\n   Modulus (base 16)
    =\n   D77946826E811914B39401D56A0A7843A8E7575D738C672A090AB1187D690DC4\n   3872FC06A7B6A43F3B95BEAEC7DF04B9D242EBDC481111283216CE816E004B78\n
    \  6C5FCE856780D41837D95AD787A50BBE90BD3A9C98AC0F5FC0DE744B1CDE1891\n   690894BC1F65E00DE15B4B2AA6D87100C9ECC2527E45EB849DEB14BB2049B163\n
    \  EA04187FD27C1BD9C7958CD40CE7067A9C024F9B7C5A0B4F5003686161F0605B\n   Generator
    = 2\n   iSCSI Key=\"SRP-1536\" [1536 bits]\n   Modulus (base 16) =\n   9DEF3CAFB939277AB1F12A8617A47BBBDBA51DF499AC4C80BEEEA9614B19CC4D\n
    \  5F4F5F556E27CBDE51C6A94BE4607A291558903BA0D0F84380B655BB9A22E8DC\n   DF028A7CEC67F0D08134B1C8B97989149B609E0BE3BAB63D47548381DBC5B1FC\n
    \  764E3F4B53DD9DA1158BFD3E2B9C8CF56EDF019539349627DB2FD53D24B7C486\n   65772E437D6C7F8CE442734AF7CCB7AE837C264AE3A9BEB87F8A2FE9B8B5292E\n
    \  5A021FFF5E91479E8CE7A28C2442C6F315180F93499A234DCF76E3FED135F9BB\n   Generator
    = 2\n   iSCSI Key=\"SRP-2048\" [2048 bits]\n   Modulus (base 16) =\n   AC6BDB41324A9A9BF166DE5E1389582FAF72B6651987EE07FC3192943DB56050\n
    \  A37329CBB4A099ED8193E0757767A13DD52312AB4B03310DCD7F48A9DA04FD50\n   E8083969EDB767B0CF6095179A163AB3661A05FBD5FAAAE82918A9962F0B93B8\n
    \  55F97993EC975EEAA80D740ADBF4FF747359D041D5C33EA71D281E446B14773B\n   CA97B43A23FB801676BD207A436C6481F1D2B9078717461A5B9D32E688F87748\n
    \  544523B524B0D57D5EA77A2775D2ECFA032CFBDBF52FB3786160279004E57AE6\n   AF874E7303CE53299CCC041C7BC308D82A5698F3A8D0C38271AE35F8E9DBFBB6\n
    \  94B5C803D89F7AE435DE236D525F54759B65E372FCD68EF20FA7111F9E4AFF73\n   Generator
    = 2\n   In addition to these groups, the following groups MAY be supported,\n
    \  each of which has also been rigorously proven to be prime:\n   [1]  iSCSI Key=\"MODP-3072\":
    the 3072-bit [RFC3526] group, generator:\n        5\n   [2]  iSCSI Key=\"MODP-4096\":
    the 4096-bit [RFC3526] group, generator:\n        5\n   [3]  iSCSI Key=\"MODP-6144\":
    the 6144-bit [RFC3526] group, generator:\n        5\n   [4]  iSCSI Key=\"MODP-8192\":
    the 8192-bit [RFC3526] group, generator:\n        19\n"
  title: Appendix A - Well Known Groups for Use with SRP
- contents:
  - "Appendix B - Software Performance of IPsec Transforms\n   This Appendix provides
    data on the performance of IPsec encryption\n   and authentication transforms
    in software.  Since the performance of\n   IPsec transforms is heavily implementation
    dependent, the data\n   presented here may not be representative of performance
    in a given\n   situation, and are presented solely for purposes of comparison.\n
    \  Other performance data is available in [AESPERF], [PENTPERF] and\n   [UMACPERF].\n"
  - contents:
    - "B.1.  Authentication Transforms\n   Table B-1 presents the cycles/byte required
      by the AES-PMAC, AES-\n   CBC-MAC, AES-UMAC, HMAC-MD5, and HMAC-SHA1 algorithms
      at various\n   packet sizes, implemented in software.\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |         |         |           |         |         |         |\n   |  Data
      \  |  AES-   | AES-CBC-  |  AES-   |  HMAC-  |  HMAC-  |\n   |  Size   |  PMAC
      \  | MAC       |  UMAC   |  MD5    |  SHA1   |\n   |         |         |           |
      \        |         |         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   64    |  31.22  |   26.02   |  19.51  |  93.66  | 109.27  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  128    |  33.82  |   28.62   |  11.06  |  57.43  |  65.04  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  192    |  34.69  |   26.02   |   8.67  |  45.09  |  48.56  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  256    |  33.82  |   27.32   |   7.15  |  41.63  |  41.63  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  320    |  33.3   |   27.06   |   6.24  |  36.42  |  37.46  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  384    |  33.82  |   26.88   |   5.42  |  34.69  |  34.69  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  448    |  33.45  |   26.76   |   5.39  |  32.71  |  31.96  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  512    |  33.82  |   26.67   |   4.88  |  31.22  |  30.57  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  576    |  33.53  |   26.59   |   4.77  |  30.64  |  29.48  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  640    |  33.3   |   26.54   |   4.42  |  29.66  |  28.62  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  768    |  33.82  |   26.88   |   4.23  |  28.18  |  27.32  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  896    |  33.45  |   27.13   |   3.9   |  27.5   |  25.64  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | 1024    |  33.5   |   26.67   |   3.82  |  26.99  |  24.71  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         |
      \        |           |         |         |         |\n   |  Data   |  AES-   |
      AES-CBC-  |  AES-   |  HMAC-  |  HMAC-  |\n   |  Size   |  PMAC   | MAC       |
      \ UMAC   |  MD5    |  SHA1   |\n   |         |         |           |         |
      \        |         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | 1152    |  33.53  |   27.17   |   3.69  |  26.3   |  23.99  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | 1280    |  33.56  |   26.8    |   3.58  |  26.28  |  23.67  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | 1408    |  33.58  |   26.96   |   3.55  |  25.54  |  23.41  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | 1500    |  33.52  |   26.86   |   3.5   |  25.09  |  22.87  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Table B-1: Cycles/byte consumed by the AES-PMAC, AES-CBC-MAC, AES-\n   UMAC,
      HMAC-MD5, and HMAC-SHA1 authentication algorithms at various\n   packet sizes.\n
      \  Source: Jesse Walker, Intel\n   Table B-2 presents the cycles/second required
      by the AES-PMAC, AES-\n   CBC-MAC, AES-UMAC, HMAC-MD5, and HMAC-SHA1 algorithms,
      implemented in\n   software, assuming a 1500 byte packet.\n"
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             | Cycles/     |  Cycles/sec | Cycles/sec  |  Cycles/sec |

      '
    - '|  Transform  |  octet      |     @       |    @        |     @       |

      '
    - '|             | (software)  |  100 Mbps   |   1 Gbps    |   10 Gbps   |

      '
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             |             |             |             |             |

      '
    - '| AES-UMAC    |     3.5     |  43,750,000 | 437,500,000 |  4.375  B   |

      '
    - '| (8 octets)  |             |             |             |             |

      '
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             |             |             |             |             |

      '
    - '| HMAC-SHA1   |    22.87    | 285,875,000 |   2.8588 B  |  28.588 B   |

      '
    - '| (20 octets) |             |             |             |             |

      '
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             |             |             |             |             |

      '
    - '| HMAC-MD5    |    25.09    | 313,625,000 |   3.1363 B  |  31.363 B   |

      '
    - '|             |             |             |             |             |

      '
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             |             |             |             |             |

      '
    - '| AES-CBC-MAC |    26.86    | 335,750,000 |   3.358 B   |  33.575 B   |

      '
    - '|             |             |             |             |             |

      '
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             |             |             |             |             |

      '
    - '| AES-PMAC    |    33.52    | 419,000,000 |   4.19  B   |  41.900 B   |

      '
    - '| (8 octets)  |             |             |             |             |

      '
    - '|             |             |             |             |             |

      '
    - "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Table
      B-2: Software performance of the HMAC-SHA1, HMAC-MD5, AES-CBC-\n   MAC and AES-PMAC
      authentication algorithms at 100 Mbps, 1 Gbps, and\n   10 Gbps line rates (1500
      byte packet).\n   Source: Jesse Walker, Intel\n   At speeds of 100 Mbps, AES-UMAC
      is implementable with only a modest\n   processor, and the other algorithms
      are implementable, assuming that\n   a single high-speed processor can be dedicated
      to the task.  At 1\n   Gbps, only AES-UMAC is implementable on a single high-speed\n
      \  processor; multiple high speed processors (1+ Ghz) will be required\n   for
      the other algorithms.  At 10 Gbps, only AES-UMAC is implementable\n   even with
      multiple high speed processors; the other algorithms will\n   require a prodigious
      number of cycles/second.  Thus at 10 Gbps,\n   hardware acceleration will be
      required for all algorithms with the\n   possible exception of AES-UMAC.\n"
    title: B.1.  Authentication Transforms
  - contents:
    - "B.2.  Encryption and Authentication Transforms\n   Table B-3 presents the cycles/byte
      required by the AES-CBC, AES-CTR\n   and 3DES-CBC encryption algorithms (no
      MAC), implemented in software,\n   for various packet sizes.\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               |             |             |             |\n   |  Data size
      \   |   AES-CBC   |   AES-CTR   |  3DES-CBC   |\n   |               |             |
      \            |             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |      64       |   31.22     |    26.02    |  156.09     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     128       |   31.22     |    28.62    |  150.89     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     192       |   31.22     |    27.75    |  150.89     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     256       |   28.62     |    27.32    |  150.89     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     320       |   29.14     |    28.1     |  150.89     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     384       |   28.62     |    27.75    |  148.29     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     448       |   28.99     |    27.5     |  149.4      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     512       |   28.62     |    27.32    |  148.29     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     576       |   28.33     |    27.75    |  147.72     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     640       |   28.62     |    27.06    |  147.77     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     768       |   28.18     |    27.32    |  147.42     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     896       |   28.25     |    27.5     |  147.55     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    1024       |   27.97     |    27.32    |  148.29     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    1152       |   28.33     |    27.46    |  147.13     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    1280       |   28.1      |    27.58    |  146.99     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    1408       |   27.91     |    27.43    |  147.34     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    1500       |   27.97     |    27.53    |  147.85     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Table B-3: Cycles/byte consumed by the AES-CBC, AES-CTR and 3DES-CBC\n   encryption
      algorithms at various packet sizes, implemented in\n   software.\n   Source:
      Jesse Walker, Intel\n   Table B-4 presents the cycles/second required by the
      AES-CBC, AES-CTR\n   and 3DES-CBC encryption algorithms (no MAC), implemented
      in software,\n   at 100 Mbps, 1 Gbps, and 10 Gbps line rates (assuming a 1500
      byte\n   packet).\n"
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             | Cycles/     |  Cycles/sec | Cycles/sec  |  Cycles/sec |

      '
    - '|   Transform |  octet      |     @       |    @        |     @       |

      '
    - '|             | (software)  |  100 Mbps   |   1 Gbps    |   10 Gbps   |

      '
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             |             |             |             |             |

      '
    - '| AES-CBC     |   27.97     | 349,625,000 |   3.4963 B  |  34.963 B   |

      '
    - '|             |             |             |             |             |

      '
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             |             |             |             |             |

      '
    - '| AES-CTR     |   27.53     | 344,125,000 |   3.4413 B  |  34.413 B   |

      '
    - '|             |             |             |             |             |

      '
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             |             |             |             |             |

      '
    - '| 3DES -CBC   |  147.85     | 1.84813 B   |  18.4813 B  | 184.813 B   |

      '
    - '|             |             |             |             |             |

      '
    - "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Table
      B-4: Software performance of the AES-CBC, AES-CTR, and 3DES\n   encryption algorithms
      at 100 Mbps, 1 Gbps, and 10 Gbps line rates\n   (1500 byte packet).\n   Source:
      Jesse Walker, Intel\n   At speeds of 100 Mbps, AES-CBC and AES-CTR mode are
      implementable\n   with a high-speed processor, while 3DES would require multiple
      high\n   speed processors.  At speeds of 1 Gbps, multiple high speed\n   processors
      are required for AES-CBC and AES-CTR mode.  At speeds of\n   1+ Gbps for 3DES,
      and 10 Gbps for all algorithms, implementation in\n   software is infeasible,
      and hardware acceleration is required.\n   Table B-5 presents the cycles/byte
      required for combined\n   encryption/authentication algorithms: AES CBC + CBCMAC,
      AES CTR +\n   CBCMAC, AES CTR + UMAC, and AES-OCB at various packet sizes,\n
      \  implemented in software.\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |               |  AES      | AES     |  AES    |         |\n   |  Data size
      \   |  CBC +    | CTR +   |  CTR +  |  AES-   |\n   |               |  CBCMAC
      \  | CBCMAC  |  UMAC   |  OCB    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |      64       |  119.67   |  52.03  |  52.03  |  57.23  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     128       |   70.24   |  57.23  |  39.02  |  44.23  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     192       |   58.97   |  55.5   |  36.42  |  41.63  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     256       |   57.23   |  55.93  |  35.12  |  40.32  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     320       |   57.23   |  55.15  |  33.3   |  38.5   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     384       |   57.23   |  55.5   |  32.95  |  37.29  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     448       |   58.72   |    55   |  32.71  |  37.17  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     512       |   58.54   |  55.28  |  32.52  |  36.42  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     576       |   57.81   |  55.5   |  31.8   |  37     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     640       |   57.75   |  55.15  |  31.74  |  36.42  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     768       |   57.67   |  55.5   |  31.65  |  35.99  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     896       |   57.61   |  55.75  |  31.22  |  35.68  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    1024       |   57.56   |  55.61  |  31.22  |  35.45  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    1152       |   57.52   |  55.21  |  31.22  |  35.55  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |               |
      \ AES      | AES     |  AES    |         |\n   |  Data size    |  CBC +    |
      CTR +   |  CTR +  |  AES-   |\n   |               |  CBCMAC   | CBCMAC  |  UMAC
      \  |  OCB    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    1280       |   57.75   |  55.15  |  31.22  |  36.16  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    1408       |   57.47   |  55.34  |  30.75  |  35.24  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    1500       |   57.72   |  55.5   |  30.86  |  35.3   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Table B-5: Cycles/byte of combined encryption/authentication\n   algorithms:
      \ AES CBC + CBCMAC, AES CTR + CBCMAC, AES CTR + UMAC, and\n   AES-OCB at various
      packet sizes, implemented in software.\n   Table B-6 presents the cycles/second
      required for the AES CBC +\n   CBCMAC, AES CTR + CBCMAC, AES CTR + UMAC, and
      AES-OCB encryption and\n   authentication algorithms operating at line rates
      of 100 Mbps, 1 Gbps\n   and 10 Gbps, assuming 1500 byte packets.\n"
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             | Cycles/     |  Cycles/sec | Cycles/sec  |  Cycles/sec |

      '
    - '|  Transform  |  octet      |      @      |    @        |     @       |

      '
    - '|             | (software)  |  100 Mbps   |   1 Gbps    |   10 Gbps   |

      '
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             |             |             |             |             |

      '
    - '|     AES     |             |             |             |             |

      '
    - '|CBC + CBCMAC |   57.72     | 721,500,000 |  7.215 B    |  72.15 B    |

      '
    - '|             |             |             |             |             |

      '
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             |             |             |             |             |

      '
    - '|     AES     |             |             |             |             |

      '
    - '|CTR + CBCMAC |   55.5      | 693,750,000 |  6.938 B    |  69.38 B    |

      '
    - '|             |             |             |             |             |

      '
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             |             |             |             |             |

      '
    - '|     AES     |             |             |             |             |

      '
    - '| CTR + UMAC  |   30.86     | 385,750,000 |  3.858 B    |  38.58 B    |

      '
    - '|             |             |             |             |             |

      '
    - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      '
    - '|             |             |             |             |             |

      '
    - '|             |             |             |             |             |

      '
    - '|   AES-OCB   |   35.3      | 441,250,000 |   4.413 B   |  44.13 B    |

      '
    - '|             |             |             |             |             |

      '
    - "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Table
      B-6: Cycles/second required for the AES CBC + CBCMAC, AES CTR +\n   CBCMAC,
      AES CTR + UMAC, and AES-OCB encryption and authentication\n   algorithms, operating
      at line rates of 100 Mbps, 1 Gbps and 10 Gbps,\n   assuming 1500 octet packets.\n
      \  Source: Jesse Walker, Intel\n   At speeds of 100 Mbps, the algorithms are
      implementable on a high\n   speed processor.  At speeds of 1 Gbps, multiple
      high speed processors\n   are required, and none of the algorithms are implementable
      in\n   software at 10 Gbps line rate.\n"
    title: B.2.  Encryption and Authentication Transforms
  title: Appendix B - Software Performance of IPsec Transforms
- contents:
  - "Authors' Addresses\n   Bernard Aboba\n   Microsoft Corporation\n   One Microsoft
    Way\n   Redmond, WA 98052\n   Phone: +1 425 706 6605\n   Fax:   +1 425 936 7329\n
    \  EMail: bernarda@microsoft.com\n   Joshua Tseng\n   McDATA Corporation\n   3850
    North First Street\n   San Jose, CA 95134-1702\n   Phone: +1 650 207 8012\n   EMail:
    joshtseng@yahoo.com\n   Jesse Walker\n   Intel Corporation\n   2211 NE 25th Avenue\n
    \  Hillboro, OR 97124\n   Phone: +1 503 712 1849\n   Fax:   +1 503 264 4843\n
    \  EMail: jesse.walker@intel.com\n   Venkat Rangan\n   Brocade Communications
    Systems Inc.\n   1745 Technology Drive,\n   San Jose, CA 95110\n   Phone: +1 408
    333 7318\n   Fax: +1 408 333 7099\n   EMail: vrangan@brocade.com\n   Franco Travostino\n
    \  Director, Content Internetworking Lab\n   Nortel Networks\n   3 Federal Street\n
    \  Billerica, MA  01821\n   Phone: +1 978 288 7708\n   EMail: travos@nortelnetworks.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This
    document is subject\n   to the rights, licenses and restrictions contained in
    BCP 78 and\n   except as set forth therein, the authors retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
