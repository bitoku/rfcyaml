- title: __initial_text__
  contents:
  - '           Textual Conventions for Internet Network Addresses

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This MIB module defines textual conventions to represent commonly\n\
    \   used Internet network layer addressing information.  The intent is\n   that\
    \ these textual conventions (TCs) will be imported and used in MIB\n   modules\
    \ that would otherwise define their own representations.\n   This document obsoletes\
    \ RFC 2851.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  The SNMP Management Framework  . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Definitions  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n   4.  Usage Hints  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 11\n   4.1 Table Indexing . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 12\n   4.2 Uniqueness of Addresses  . . . . . . . . . . . . . . . . . .\
    \ . 12\n   4.3 Multiple Addresses per Host  . . . . . . . . . . . . . . . . .\
    \ 13\n   4.4 Resolving DNS Names  . . . . . . . . . . . . . . . . . . . . . 13\n\
    \   5.  Table Indexing Example . . . . . . . . . . . . . . . . . . . . 13\n  \
    \ 6.  Security Considerations  . . . . . . . . . . . . . . . . . . . 16\n   7.\
    \  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 16\n   8.  Intellectual\
    \ Property Notice . . . . . . . . . . . . . . . . . 16\n   9.  Changes from RFC\
    \ 2851  . . . . . . . . . . . . . . . . . . . . 16\n   References . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 17\n   Authors' Addresses . . .\
    \ . . . . . . . . . . . . . . . . . . . . . 19\n   Full Copyright Statement .\
    \ . . . . . . . . . . . . . . . . . . . . 20\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Several standards-track MIB modules use the IpAddress SMIv2\
    \ base\n   type.  This limits the applicability of these MIB modules to IP\n \
    \  Version 4 (IPv4) since the IpAddress SMIv2 base type can only contain\n   4\
    \ byte IPv4 addresses.  The IpAddress SMIv2 base type has become\n   problematic\
    \ with the introduction of IP Version 6 (IPv6) addresses\n   [19].\n   This document\
    \ defines multiple textual conventions as a mechanism to\n   express generic Internet\
    \ network layer addresses within MIB module\n   specifications.  The solution\
    \ is compatible with SMIv2 (STD 58) and\n   SMIv1 (STD 16).  New MIB definitions\
    \ which need to express network\n   layer Internet addresses SHOULD use the textual\
    \ conventions defined\n   in this memo.  New MIB modules SHOULD NOT use the SMIv2\
    \ IpAddress\n   base type anymore.\n   A generic Internet address consists of\
    \ two objects, one whose syntax\n   is InetAddressType, and another whose syntax\
    \ is InetAddress.  The\n   value of the first object determines how the value\
    \ of the second\n   object is encoded.  The InetAddress textual convention represents\
    \ an\n   opaque Internet address value.  The InetAddressType enumeration is\n\
    \   used to \"cast\" the InetAddress value into a concrete textual\n   convention\
    \ for the address type.  This usage of multiple textual\n   conventions allows\
    \ expression of the display characteristics of each\n   address type and makes\
    \ the set of defined Internet address types\n   extensible.\n   The textual conventions\
    \ defined in this document can also be used to\n   represent generic Internet\
    \ subnets and Internet address ranges.  A\n   generic Internet subnet is represented\
    \ by three objects, one whose\n   syntax is InetAddressType, a second one whose\
    \ syntax is InetAddress\n   and a third one whose syntax is InetAddressPrefixLength.\
    \  The\n   InetAddressType value again determines the concrete format of the\n\
    \   InetAddress value while the InetAddressPrefixLength identifies the\n   Internet\
    \ network address prefix.\n   A generic range of consecutive Internet addresses\
    \ is represented by\n   three objects.  The first one has the syntax InetAddressType\
    \ while\n   the remaining objects have the syntax InetAddress and specify the\n\
    \   start and end of the address range.  The InetAddressType value again\n   determines\
    \ the format of the InetAddress values.\n   The textual conventions defined in\
    \ this document can be used to\n   define Internet addresses by using DNS domain\
    \ names in addition to\n   IPv4 and IPv6 addresses.  A MIB designer can write\
    \ compliance\n   statements to express that only a subset of the possible address\n\
    \   types must be supported by a compliant implementation.\n   MIB developers\
    \ who need to represent Internet addresses SHOULD use\n   these definitions whenever\
    \ applicable, as opposed to defining their\n   own constructs.  Even MIB modules\
    \ that only need to represent IPv4 or\n   IPv6 addresses SHOULD use the InetAddressType/InetAddress\
    \ textual\n   conventions defined in this memo.\n   There are many widely deployed\
    \ MIB modules that use IPv4 addresses\n   and which need to be revised to support\
    \ IPv6.  These MIBs can be\n   categorized as follows:\n   1. MIB modules which\
    \ define management information that is in\n      principle IP version neutral,\
    \ but the MIB currently uses\n      addressing constructs specific to a certain\
    \ IP version.\n   2. MIB modules which define management information that is specific\n\
    \      to particular IP version (either IPv4 or IPv6) and which is very\n    \
    \  unlikely to ever be applicable to another IP version.\n   MIB modules of the\
    \ first type SHOULD provide object definitions\n   (e.g., tables) that work with\
    \ all versions of IP.  In particular,\n   when revising a MIB module which contains\
    \ IPv4 specific tables, it is\n   suggested to define new tables using the textual\
    \ conventions defined\n   in this memo which support all versions of IP.  The\
    \ status of the new\n   tables SHOULD be \"current\" while the status of the old\
    \ IP version\n   specific tables SHOULD be changed to \"deprecated\".  The other\n\
    \   approach of having multiple similar tables for different IP versions\n   is\
    \ strongly discouraged.\n   MIB modules of the second type, which are inherently\
    \ IP version\n   specific, do not need to be redefined.  Note that even in this\
    \ case,\n   any additions to these MIB modules or new IP version specific MIB\n\
    \   modules SHOULD use the textual conventions defined in this memo.\n   MIB developers\
    \ SHOULD NOT use the textual conventions defined in this\n   document to represent\
    \ generic transport layer addresses.  Instead the\n   SMIv2 TAddress textual convention\
    \ and associated definitions should\n   be used for transport layer addresses.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"SHOULD\", \"SHOULD NOT\" and \"MAY\"\
    \ in\n   this document are to be interpreted as described in RFC 2119 [1].\n"
- title: 2. The SNMP Management Framework
  contents:
  - "2. The SNMP Management Framework\n   The SNMP Management Framework presently\
    \ consists of five major\n   components:\n   o  An overall architecture, described\
    \ in RFC 2571 [2].\n   o  Mechanisms for describing and naming objects and events\
    \ for the\n      purpose of management.  The first version of this Structure of\n\
    \      Management Information (SMI) is called SMIv1 and described in STD\n   \
    \   16, RFC 1155 [3], STD 16, RFC 1212 [4] and RFC 1215 [5].  The\n      second\
    \ version, called SMIv2, is described in STD 58, RFC 2578\n      [6], STD 58,\
    \ RFC 2579 [7] and STD 58, RFC 2580 [8].\n   o  Message protocols for transferring\
    \ management information.  The\n      first version of the SNMP message protocol\
    \ is called SNMPv1 and\n      described in STD 15, RFC 1157 [9].  A second version\
    \ of the SNMP\n      message protocol, which is not an Internet standards track\n\
    \      protocol, is called SNMPv2c and described in RFC 1901 [10] and RFC\n  \
    \    1906 [11].  The third version of the message protocol is called\n      SNMPv3\
    \ and described in RFC 1906 [11], RFC 2572 [12] and RFC 2574\n      [13].\n  \
    \ o  Protocol operations for accessing management information.  The\n      first\
    \ set of protocol operations and associated PDU formats is\n      described in\
    \ STD 15, RFC 1157 [9].  A second set of protocol\n      operations and associated\
    \ PDU formats is described in RFC 1905\n      [14].\n   o  A set of fundamental\
    \ applications described in RFC 2573 [15] and\n      the view-based access control\
    \ mechanism described in RFC 2575\n      [16].\n   A more detailed introduction\
    \ to the current SNMP Management Framework\n   can be found in RFC 2570 [17].\n\
    \   Managed objects are accessed via a virtual information store, termed\n   the\
    \ Management Information Base or MIB.  Objects in the MIB are\n   defined using\
    \ the mechanisms defined in the SMI.\n   This memo specifies a MIB module that\
    \ is compliant to the SMIv2.  A\n   MIB conforming to the SMIv1 can be produced\
    \ through the appropriate\n   translations.  The resulting translated MIB must\
    \ be semantically\n   equivalent, except where objects or events are omitted because\
    \ no\n   translation is possible (use of Counter64).  Some machine readable\n\
    \   information in SMIv2 will be converted into textual descriptions in\n   SMIv1\
    \ during the translation process.  However, this loss of machine\n   readable\
    \ information is not considered to change the semantics of the\n   MIB.\n"
- title: 3. Definitions
  contents:
  - '3. Definitions

    '
- title: INET-ADDRESS-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'INET-ADDRESS-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    MODULE-IDENTITY, mib-2, Unsigned32 FROM SNMPv2-SMI\n    TEXTUAL-CONVENTION\
    \                 FROM SNMPv2-TC;\n"
- title: inetAddressMIB MODULE-IDENTITY
  contents:
  - "inetAddressMIB MODULE-IDENTITY\n    LAST-UPDATED \"200205090000Z\"\n    ORGANIZATION\n\
    \        \"IETF Operations and Management Area\"\n    CONTACT-INFO\n        \"\
    Juergen Schoenwaelder (Editor)\n         TU Braunschweig\n         Bueltenweg\
    \ 74/75\n         38106 Braunschweig, Germany\n         Phone: +49 531 391-3289\n\
    \         EMail: schoenw@ibr.cs.tu-bs.de\n         Send comments to <mibs@ops.ietf.org>.\"\
    \n    DESCRIPTION\n        \"This MIB module defines textual conventions for\n\
    \         representing Internet addresses. An Internet\n         address can be\
    \ an IPv4 address, an IPv6 address\n         or a DNS domain name. This module\
    \ also defines\n         textual conventions for Internet port numbers,\n    \
    \     autonomous system numbers and the length of an\n         Internet address\
    \ prefix.\"\n    REVISION     \"200205090000Z\"\n    DESCRIPTION\n        \"Second\
    \ version, published as RFC 3291. This\n         revisions contains several clarifications\
    \ and it\n         introduces several new textual conventions:\n         InetAddressPrefixLength,\
    \ InetPortNumber,\n         InetAutonomousSystemNumber, InetAddressIPv4z,\n  \
    \       and InetAddressIPv6z.\"\n    REVISION     \"200006080000Z\"\n    DESCRIPTION\n\
    \        \"Initial version, published as RFC 2851.\"\n    ::= { mib-2 76 }\n"
- title: InetAddressType ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressType ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"A value that represents a type of Internet address.\n         unknown(0)\
    \  An unknown address type. This value MUST\n                     be used if the\
    \ value of the corresponding\n                     InetAddress object is a zero-length\
    \ string.\n                     It may also be used to indicate an IP address\n\
    \                     which is not in one of the formats defined\n           \
    \          below.\n         ipv4(1)     An IPv4 address as defined by the\n  \
    \                   InetAddressIPv4 textual convention.\n         ipv6(2)    \
    \ A global IPv6 address as defined by the\n                     InetAddressIPv6\
    \ textual convention.\n         ipv4z(3)    A non-global IPv4 address including\
    \ a zone\n                     index as defined by the InetAddressIPv4z\n    \
    \                 textual convention.\n         ipv6z(4)    A non-global IPv6\
    \ address including a zone\n                     index as defined by the InetAddressIPv6z\n\
    \                     textual convention.\n         dns(16)     A DNS domain name\
    \ as defined by the\n                     InetAddressDNS textual convention.\n\
    \         Each definition of a concrete InetAddressType value must be\n      \
    \   accompanied by a definition of a textual convention for use\n         with\
    \ that InetAddressType.\n         To support future extensions, the InetAddressType\
    \ textual\n         convention SHOULD NOT be sub-typed in object type definitions.\n\
    \         It MAY be sub-typed in compliance statements in order to\n         require\
    \ only a subset of these address types for a compliant\n         implementation.\n\
    \         Implementations must ensure that InetAddressType objects\n         and\
    \ any dependent objects (e.g. InetAddress objects) are\n         consistent. \
    \ An inconsistentValue error must be generated\n         if an attempt to change\
    \ an InetAddressType object would,\n         for example, lead to an undefined\
    \ InetAddress value.  In\n         particular, InetAddressType/InetAddress pairs\
    \ must be\n         changed together if the address type changes (e.g. from\n\
    \         ipv6(2) to ipv4(1)).\"\n    SYNTAX      INTEGER {\n                \
    \    unknown(0),\n                    ipv4(1),\n                    ipv6(2),\n\
    \                    ipv4z(3),\n                    ipv6z(4),\n              \
    \      dns(16)\n                }\n"
- title: InetAddress ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddress ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Denotes a generic Internet address.\n         An InetAddress value\
    \ is always interpreted within the context\n         of an InetAddressType value.\
    \ Every usage of the InetAddress\n         textual convention is required to specify\
    \ the InetAddressType\n         object which provides the context.  It is suggested\
    \ that the\n         InetAddressType object is logically registered before the\n\
    \         object(s) which use the InetAddress textual convention if\n        \
    \ they appear in the same logical row.\n         The value of an InetAddress object\
    \ must always be\n         consistent with the value of the associated InetAddressType\n\
    \         object. Attempts to set an InetAddress object to a value\n         which\
    \ is inconsistent with the associated InetAddressType\n         must fail with\
    \ an inconsistentValue error.\n         When this textual convention is used as\
    \ the syntax of an\n         index object, there may be issues with the limit\
    \ of 128\n         sub-identifiers specified in SMIv2, STD 58. In this case,\n\
    \         the object definition MUST include a 'SIZE' clause to\n         limit\
    \ the number of potential instance sub-identifiers.\"\n    SYNTAX      OCTET STRING\
    \ (SIZE (0..255))\n"
- title: InetAddressIPv4 ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressIPv4 ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"1d.1d.1d.1d\"\n  \
    \  STATUS       current\n    DESCRIPTION\n        \"Represents an IPv4 network\
    \ address:\n           octets   contents         encoding\n            1-4   \
    \  IPv4 address     network-byte order\n         The corresponding InetAddressType\
    \ value is ipv4(1).\n         This textual convention SHOULD NOT be used directly\
    \ in object\n         definitions since it restricts addresses to a specific format.\n\
    \         However, if it is used, it MAY be used either on its own or in\n   \
    \      conjunction with InetAddressType as a pair.\"\n    SYNTAX       OCTET STRING\
    \ (SIZE (4))\n"
- title: InetAddressIPv6 ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressIPv6 ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"2x:2x:2x:2x:2x:2x:2x:2x\"\
    \n    STATUS       current\n    DESCRIPTION\n        \"Represents an IPv6 network\
    \ address:\n           octets   contents         encoding\n            1-16  \
    \  IPv6 address     network-byte order\n         The corresponding InetAddressType\
    \ value is ipv6(2).\n         This textual convention SHOULD NOT be used directly\
    \ in object\n         definitions since it restricts addresses to a specific format.\n\
    \         However, if it is used, it MAY be used either on its own or in\n   \
    \      conjunction with InetAddressType as a pair.\"\n    SYNTAX       OCTET STRING\
    \ (SIZE (16))\n"
- title: InetAddressIPv4z ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressIPv4z ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"1d.1d.1d.1d%4d\"\n\
    \    STATUS       current\n    DESCRIPTION\n        \"Represents a non-global\
    \ IPv4 network address together\n         with its zone index:\n           octets\
    \   contents         encoding\n            1-4     IPv4 address     network-byte\
    \ order\n            5-8     zone index       network-byte order\n         The\
    \ corresponding InetAddressType value is ipv4z(3).\n         The zone index (bytes\
    \ 5-8) is used to disambiguate identical\n         address values on nodes which\
    \ have interfaces attached to\n         different zones of the same scope. The\
    \ zone index may contain\n         the special value 0 which refers to the default\
    \ zone for each\n         scope.\n         This textual convention SHOULD NOT\
    \ be used directly in object\n         definitions since it restricts addresses\
    \ to a specific format.\n         However, if it is used, it MAY be used either\
    \ on its own or in\n         conjunction with InetAddressType as a pair.\"\n \
    \   SYNTAX OCTET STRING (SIZE (8))\n"
- title: InetAddressIPv6z ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressIPv6z ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"2x:2x:2x:2x:2x:2x:2x:2x%4d\"\
    \n    STATUS       current\n    DESCRIPTION\n        \"Represents a non-global\
    \ IPv6 network address together\n         with its zone index:\n           octets\
    \   contents         encoding\n            1-16    IPv6 address     network-byte\
    \ order\n           17-20    zone index       network-byte order\n         The\
    \ corresponding InetAddressType value is ipv6z(4).\n         The zone index (bytes\
    \ 17-20) is used to disambiguate\n         identical address values on nodes which\
    \ have interfaces\n         attached to different zones of the same scope. The\
    \ zone index\n         may contain the special value 0 which refers to the default\n\
    \         zone for each scope.\n         This textual convention SHOULD NOT be\
    \ used directly in object\n         definitions since it restricts addresses to\
    \ a specific format.\n         However, if it is used, it MAY be used either on\
    \ its own or in\n         conjunction with InetAddressType as a pair.\"\n    SYNTAX\
    \ OCTET STRING (SIZE (20))\n"
- title: InetAddressDNS ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressDNS ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"255a\"\n    STATUS\
    \       current\n    DESCRIPTION\n        \"Represents a DNS domain name. The\
    \ name SHOULD be fully\n         qualified whenever possible.\n         The corresponding\
    \ InetAddressType is dns(16).\n         The DESCRIPTION clause of InetAddress\
    \ objects that may have\n         InetAddressDNS values must fully describe how\
    \ (and when) such\n         names are to be resolved to IP addresses.\n      \
    \   This textual convention SHOULD NOT be used directly in object\n         definitions\
    \ since it restricts addresses to a specific format.\n         However, if it\
    \ is used, it MAY be used either on its own or in\n         conjunction with InetAddressType\
    \ as a pair.\"\n    SYNTAX       OCTET STRING (SIZE (1..255))\n"
- title: InetAddressPrefixLength ::= TEXTUAL-CONVENTION
  contents:
  - "InetAddressPrefixLength ::= TEXTUAL-CONVENTION\n    STATUS      current\n   \
    \ DESCRIPTION\n        \"Denotes the length of a generic Internet network address\n\
    \         prefix. A value of n corresponds to an IP address mask\n         which\
    \ has n contiguous 1-bits from the most significant\n         bit (MSB) and all\
    \ other bits set to 0.\n         An InetAddressPrefixLength value is always interpreted\
    \ within\n         the context of an InetAddressType value. Every usage of the\n\
    \         InetAddressPrefixLength textual convention is required to\n        \
    \ specify the InetAddressType object which provides the\n         context.  It\
    \ is suggested that the InetAddressType object is\n         logically registered\
    \ before the object(s) which use the\n         InetAddressPrefixLength textual\
    \ convention if they appear in\n         the same logical row.\n         InetAddressPrefixLength\
    \ values that are larger than\n         the maximum length of an IP address for\
    \ a specific\n         InetAddressType are treated as the maximum significant\n\
    \         value applicable for the InetAddressType. The maximum\n         significant\
    \ value is 32 for the InetAddressType\n         'ipv4(1)' and 'ipv4z(3)' and 128\
    \ for the InetAddressType\n         'ipv6(2)' and 'ipv6z(4)'. The maximum significant\
    \ value\n         for the InetAddressType 'dns(16)' is 0.\n         The value\
    \ zero is object-specific and must be defined as\n         part of the description\
    \ of any object which uses this\n         syntax. Examples of the usage of zero\
    \ might include\n         situations where the Internet network address prefix\n\
    \         is unknown or does not apply.\"\n    SYNTAX      Unsigned32\n"
- title: InetPortNumber ::= TEXTUAL-CONVENTION
  contents:
  - "InetPortNumber ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Represents a 16 bit port number of an Internet transport\n        \
    \ layer protocol. Port numbers are assigned by IANA. A\n         current list\
    \ of all assignments is available from\n         <http://www.iana.org/>.\n   \
    \      The value zero is object-specific and must be defined as\n         part\
    \ of the description of any object which uses this\n         syntax. Examples\
    \ of the usage of zero might include\n         situations where a port number\
    \ is unknown, or when the\n         value zero is used as a wildcard in a filter.\"\
    \n    REFERENCE  \"STD 6 (RFC 768), STD 7 (RFC 793) and RFC 2960\"\n    SYNTAX\
    \      Unsigned32 (0..65535)\n"
- title: InetAutonomousSystemNumber ::= TEXTUAL-CONVENTION
  contents:
  - "InetAutonomousSystemNumber ::= TEXTUAL-CONVENTION\n    STATUS      current\n\
    \    DESCRIPTION\n        \"Represents an autonomous system number which identifies\
    \ an\n         Autonomous System (AS). An AS is a set of routers under a\n   \
    \      single technical administration, using an interior gateway\n         protocol\
    \ and common metrics to route packets within the AS,\n         and using an exterior\
    \ gateway protocol to route packets to\n         other ASs'. IANA maintains the\
    \ AS number space and has\n         delegated large parts to the regional registries.\n\
    \         Autonomous system numbers are currently limited to 16 bits\n       \
    \  (0..65535). There is however work in progress to enlarge the\n         autonomous\
    \ system number space to 32 bits. This textual\n         convention therefore\
    \ uses an Unsigned32 value without a\n         range restriction in order to support\
    \ a larger autonomous\n         system number space.\"\n    REFERENCE  \"RFC 1771,\
    \ RFC 1930\"\n    SYNTAX      Unsigned32\n"
- title: END
  contents:
  - 'END

    '
- title: 4. Usage Hints
  contents:
  - "4. Usage Hints\n   The InetAddressType and InetAddress textual conventions have\
    \ been\n   introduced to avoid over-constraining an object definition by the use\n\
    \   of the IpAddress SMI base type which is IPv4 specific.  An\n   InetAddressType/InetAddress\
    \ pair can represent IP addresses in\n   various formats.\n   The InetAddressType\
    \ and InetAddress objects SHOULD NOT be sub-typed\n   in object definitions. \
    \ Sub-typing binds the MIB module to specific\n   address formats, which may cause\
    \ serious problems if new address\n   formats need to be introduced.  Note that\
    \ it is possible to write\n   compliance statements in order to express that only\
    \ a subset of the\n   defined address types must be implemented to be compliant.\n\
    \   Every usage of the InetAddress or InetAddressPrefixLength textual\n   conventions\
    \ must specify which InetAddressType object provides the\n   context for the interpretation\
    \ of the InetAddress or\n   InetAddressPrefixLength textual convention.\n   It\
    \ is suggested that the InetAddressType object is logically\n   registered before\
    \ the object(s) which uses the InetAddress or\n   InetAddressPrefixLength textual\
    \ convention.  An InetAddressType\n   object is logically registered before an\
    \ InetAddress or\n   InetAddressPrefixLength object if it appears before the InetAddress\n\
    \   or InetAddressPrefixLength object in the conceptual row (which\n   includes\
    \ any index objects).  This rule allows programs such as MIB\n   compilers to\
    \ identify the InetAddressType of a given InetAddress or\n   InetAddressPrefixLength\
    \ object by searching for the InetAddressType\n   object which precedes an InetAddress\
    \ or InetAddressPrefixLength\n   object.\n"
- title: 4.1 Table Indexing
  contents:
  - "4.1 Table Indexing\n   When a generic Internet address is used as an index, both\
    \ the\n   InetAddressType and InetAddress objects MUST be used.  The\n   InetAddressType\
    \ object MUST be listed before the InetAddress object\n   in the INDEX clause.\n\
    \   The IMPLIED keyword MUST NOT be used for an object of type\n   InetAddress\
    \ in an INDEX clause.  Instance sub-identifiers are then of\n   the form T.N.O1.O2...On,\
    \ where T is the value of the InetAddressType\n   object, O1...On are the octets\
    \ in the InetAddress object, and N is\n   the number of those octets.\n   There\
    \ is a meaningful lexicographical ordering to tables indexed in\n   this fashion.\
    \  Command generator applications may lookup specific\n   addresses of known type\
    \ and value, issue GetNext requests for\n   addresses of a single type, or issue\
    \ GetNext requests for a specific\n   type and address prefix.\n"
- title: 4.2 Uniqueness of Addresses
  contents:
  - "4.2 Uniqueness of Addresses\n   IPv4 addresses were intended to be globally unique,\
    \ current usage\n   notwithstanding.  IPv6 addresses were architected to have\
    \ different\n   scopes and hence uniqueness [19].  In particular, IPv6 \"link-local\"\
    \n   and \"site-local\" addresses are not guaranteed to be unique on any\n   particular\
    \ node.  In such cases, the duplicate addresses must be\n   configured on different\
    \ interfaces.  So the combination of an IPv6\n   address and a zone index is unique\
    \ [21].\n   The InetAddressIPv6 textual convention has been defined to represent\n\
    \   global IPv6 addresses and non-global IPv6 addresses in cases where no\n  \
    \ zone index is needed (e.g., on end hosts with a single interface).\n   The InetAddressIPv6z\
    \ textual convention has been defined to represent\n   non-global IPv6 addresses\
    \ in cases where a zone index is needed\n   (e.g., a router connecting multiple\
    \ zones).  MIB designers who use\n   InetAddressType/InetAddress pairs therefore\
    \ do not need to define\n   additional objects in order to support non-global\
    \ addresses on nodes\n   that connect multiple zones.\n   The InetAddressIPv4z\
    \ is intended for use in MIBs (like the TCP-MIB)\n   which report addresses in\
    \ the address family used on the wire, but\n   where the entity instrumented obtains\
    \ such addresses from\n   applications or administrators in a form which includes\
    \ a zone index,\n   such as v4-mapped IPv6 addresses.\n   The size of the zone\
    \ index has been chosen so that it is consistent\n   with (i) the numerical zone\
    \ index defined in [21] and (ii) the\n   sin6_scope_id field of the sockaddr_in6\
    \ structure defined in RFC 2553\n   [20].\n"
- title: 4.3 Multiple Addresses per Host
  contents:
  - "4.3 Multiple Addresses per Host\n   A single host system may be configured with\
    \ multiple addresses (IPv4\n   or IPv6), and possibly with multiple DNS names.\
    \  Thus it is possible\n   for a single host system to be accessible by multiple\n\
    \   InetAddressType/InetAddress pairs.\n   If this could be an implementation\
    \ or usage issue, the DESCRIPTION\n   clause of the relevant objects must fully\
    \ describe which address is\n   reported in a given InetAddressType/InetAddress\
    \ pair.\n"
- title: 4.4 Resolving DNS Names
  contents:
  - "4.4 Resolving DNS Names\n   DNS names MUST be resolved to IP addresses when communication\
    \ with\n   the named host is required.  This raises a temporal aspect to\n   defining\
    \ MIB objects whose value is a DNS name: When is the name\n   translated to an\
    \ address?\n   For example, consider an object defined to indicate a forwarding\n\
    \   destination, and whose value is a DNS name.  When does the forwarding\n  \
    \ entity resolve the DNS name?  Each time forwarding occurs or just\n   once when\
    \ the object was instantiated?\n   The DESCRIPTION clause of such objects SHOULD\
    \ precisely define how\n   and when any required name to address resolution is\
    \ done.\n   Similarly, the DESCRIPTION clause of such objects SHOULD precisely\n\
    \   define how and when a reverse lookup is being done if an agent has\n   accessed\
    \ instrumentation that knows about an IP address and the MIB\n   module or implementation\
    \ requires it to map the IP address to a DNS\n   name.\n"
- title: 5. Table Indexing Example
  contents:
  - "5. Table Indexing Example\n   This example shows a table listing communication\
    \ peers that are\n   identified by either an IPv4 address, an IPv6 address or\
    \ a DNS name.\n   The table definition also prohibits entries with an empty address\n\
    \   (whose type would be \"unknown\").  The size of a DNS name is limited\n  \
    \ to 64 characters in order to satisfy OID length constraints.\n   peerTable OBJECT-TYPE\n\
    \       SYNTAX      SEQUENCE OF PeerEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"A list of communication\
    \ peers.\"\n       ::= { somewhere 1 }\n   peerEntry OBJECT-TYPE\n       SYNTAX\
    \      PeerEntry\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n           \"An entry containing information about a particular\
    \ peer.\"\n       INDEX       { peerAddressType, peerAddress }\n       ::= { peerTable\
    \ 1 }\n   PeerEntry ::= SEQUENCE {\n       peerAddressType     InetAddressType,\n\
    \       peerAddress         InetAddress,\n       peerStatus          INTEGER\n\
    \   }\n   peerAddressType OBJECT-TYPE\n       SYNTAX      InetAddressType\n  \
    \     MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The type of Internet address by which the peer\n            is reachable.\"\
    \n       ::= { peerEntry 1 }\n   peerAddress OBJECT-TYPE\n       SYNTAX      InetAddress\
    \ (SIZE (1..64))\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The Internet address for the peer. The type\
    \ of this\n            address is determined by the value of the peerAddressType\n\
    \            object. Note that implementations must limit themselves\n       \
    \     to a single entry in this table per reachable peer.\n            The peerAddress\
    \ may not be empty due to the SIZE\n            restriction.\n            If a\
    \ row is created administratively by an SNMP\n            operation and the address\
    \ type value is dns(16), then\n            the agent stores the DNS name internally.\
    \ A DNS name\n            lookup must be performed on the internally stored DNS\n\
    \            name whenever it is being used to contact the peer.\n           \
    \ If a row is created by the managed entity itself and\n            the address\
    \ type value is dns(16), then the agent\n            stores the IP address internally.\
    \ A DNS reverse lookup\n            must be performed on the internally stored\
    \ IP address\n            whenever the value is retrieved via SNMP.\"\n      \
    \ ::= { peerEntry 2 }\n   The following compliance statement specifies that compliant\n\
    \   implementations need only support IPv4/IPv6 addresses without a zone\n   indices.\
    \  Support for DNS names or IPv4/IPv6 addresses with zone\n   indices is not required.\n\
    \   peerCompliance MODULE-COMPLIANCE\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The compliance statement of the peer MIB.\"\n       MODULE     \
    \ -- this module\n       MANDATORY-GROUPS    { peerGroup }\n       OBJECT  peerAddressType\n\
    \       SYNTAX  InetAddressType { ipv4(1), ipv6(2) }\n       DESCRIPTION\n   \
    \        \"An implementation is only required to support IPv4\n            and\
    \ IPv6 addresses without zone indices.\"\n       ::= { somewhere 2 }\n   Note\
    \ that the SMIv2 does not permit inclusion of not-accessible\n   objects in an\
    \ object group (see section 3.1 in STD 58, RFC 2580 [8]).\n   It is therefore\
    \ not possible to formally refine the syntax of\n   auxiliary objects which are\
    \ not-accessible.  In such a case, it is\n   suggested to express the refinement\
    \ informally in the DESCRIPTION\n   clause of the MODULE-COMPLIANCE macro invocation.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   This module does not define any management objects.\
    \  Instead, it\n   defines a set of textual conventions which may be used by other\
    \ MIB\n   modules to define management objects.\n   Meaningful security considerations\
    \ can only be written in the MIB\n   modules that define management objects. \
    \ This document has therefore\n   no impact on the security of the Internet.\n"
- title: 7. Acknowledgments
  contents:
  - "7. Acknowledgments\n   This document was produced by the Operations and Management\
    \ Area\n   \"IPv6MIB\" design team.  The authors would like to thank Fred Baker,\n\
    \   Randy Bush, Richard Draves, Mark Ellison, Bill Fenner, Jun-ichiro\n   Hagino,\
    \ Mike Heard, Tim Jenkins, Glenn Mansfield, Keith McCloghrie,\n   Thomas Narten,\
    \ Erik Nordmark, Peder Chr. Norgaard, Randy Presuhn,\n   Andrew Smith, Dave Thaler,\
    \ Kenneth White, Bert Wijnen, and Brian Zill\n   for their comments and suggestions.\n"
- title: 8. Intellectual Property Notice
  contents:
  - "8. Intellectual Property Notice\n   The IETF takes no position regarding the\
    \ validity or scope of any\n   intellectual property or other rights that might\
    \ be claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; neither does it represent that it\n   has\
    \ made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP 11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n   The IETF invites\
    \ any interested party to bring to its attention any\n   copyrights, patents or\
    \ patent applications, or other proprietary\n   rights which may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n"
- title: 9. Changes from RFC 2851
  contents:
  - "9. Changes from RFC 2851\n   The following changes have been made relative to\
    \ RFC 2851:\n   o  Added new textual conventions InetAddressPrefixLength,\n  \
    \    InetPortNumber, and InetAutonomousSystemNumber.\n   o  Rewrote the introduction\
    \ to say clearly that in general, one\n      should define MIB tables that work\
    \ with all versions of IP.  The\n      other approach of multiple tables for different\
    \ IP versions is\n      strongly discouraged.\n   o  Added text to the InetAddressType\
    \ and InetAddress descriptions\n      which requires that implementations must\
    \ reject set operations\n      with an inconsistentValue error if they lead to\
    \ inconsistencies.\n   o  Removed the strict ordering constraints.  Description\
    \ clauses now\n      must explain which InetAddressType object provides the context\
    \ for\n      an InetAddress or InetAddressPrefixLength object.\n   o  Aligned\
    \ wordings with the IPv6 scoping architecture document.\n   o  Split the InetAddressIPv6\
    \ textual convention into the two textual\n      conventions (InetAddressIPv6\
    \ and InetAddressIPv6z) and introduced\n      a new textual convention InetAddressIPv4z.\
    \  Added ipv4z(3) and\n      ipv6z(4) named numbers to the InetAddressType enumeration.\n\
    \      Motivations for this change: (i) enable the introduction of a\n      textual\
    \ conventions for non-global IPv4 addresses, (ii) alignment\n      with the textual\
    \ conventions for transport addresses, (iii)\n      simpler compliance statements\
    \ in cases where support for IPv6\n      addresses with zone indices is not required,\
    \ (iv) simplify\n      implementations for host systems which will never have\
    \ to report\n      zone indices.\n"
- title: References
  contents:
  - "References\n   [1]  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n\
    \        Levels\", BCP 14, RFC 2119, March 1997.\n   [2]  Harrington, D., Presuhn,\
    \ R. and B. Wijnen, \"An Architecture for\n        Describing SNMP Management\
    \ Frameworks\", RFC 2571, April 1999.\n   [3]  Rose, M. and K. McCloghrie, \"\
    Structure and Identification of\n        Management Information for TCP/IP-based\
    \ Internets\", STD 16, RFC\n        1155, May 1990.\n   [4]  Rose, M. and K. McCloghrie,\
    \ \"Concise MIB Definitions\", STD 16,\n        RFC 1212, March 1991.\n   [5]\
    \  Rose, M., \"A Convention for Defining Traps for use with the\n        SNMP\"\
    , RFC 1215, March 1991.\n   [6]  McCloghrie, K., Perkins, D., Schoenwaelder, J.,\
    \ Case, J., Rose,\n        M. and S. Waldbusser, \"Structure of Management Information\n\
    \        Version 2 (SMIv2)\", STD 58, RFC 2578, April 1999.\n   [7]  McCloghrie,\
    \ K., Perkins, D., Schoenwaelder, J., Case, J., Rose,\n        M. and S. Waldbusser,\
    \ \"Textual Conventions for SMIv2\", STD 58,\n        RFC 2579, April 1999.\n\
    \   [8]  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose,\n   \
    \     M. and S. Waldbusser, \"Conformance Statements for SMIv2\", STD\n      \
    \  58, RFC 2580, April 1999.\n   [9]  Case, J., Fedor, M., Schoffstall, M. and\
    \ J. Davin, \"A Simple\n        Network Management Protocol (SNMP)\", STD 15,\
    \ RFC 1157, May 1990.\n   [10] Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n\
    \        \"Introduction to Community-based SNMPv2\", RFC 1901, January\n     \
    \   1996.\n   [11] Case, J., McCloghrie, K., Rose, M. and S. Waldbusser, \"Transport\n\
    \        Mappings for Version 2 of the Simple Network Management Protocol\n  \
    \      (SNMPv2)\", RFC 1906, January 1996.\n   [12] Case, J., Harrington, D.,\
    \ Presuhn, R. and B. Wijnen, \"Message\n        Processing and Dispatching for\
    \ the Simple Network Management\n        Protocol (SNMP)\", RFC 2572, April 1999.\n\
    \   [13] Blumenthal, U. and B. Wijnen, \"User-based Security Model (USM)\n   \
    \     for version 3 of the Simple Network Management Protocol\n        (SNMPv3)\"\
    , RFC 2574, April 1999.\n   [14] Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\
    \ \"Protocol\n        Operations for Version 2 of the Simple Network Management\n\
    \        Protocol (SNMPv2)\", RFC 1905, January 1996.\n   [15] Levi, D., Meyer,\
    \ P. and B. Stewart, \"SNMP Applications\", RFC\n        2573, April 1999.\n \
    \  [16] Wijnen, B., Presuhn, R. and K. McCloghrie, \"View-based Access\n     \
    \   Control Model (VACM) for the Simple Network Management Protocol\n        (SNMP)\"\
    , RFC 2575, April 1999.\n   [17] Case, J., Mundy, R., Partain, D. and B. Stewart,\
    \ \"Introduction\n        to Version 3 of the Internet-standard Network Management\n\
    \        Framework\", RFC 2570, April 1999.\n   [18] McCloghrie, K. and F. Kastenholz,\
    \ \"The Interfaces Group MIB\",\n        RFC 2863, June 2000.\n   [19] Hinden,\
    \ R. and S. Deering, \"IP Version 6 Addressing\n        Architecture\", RFC 2373,\
    \ July 1998.\n   [20] Gilligan, R., Thomson, S., Bound, J. and W. Stevens, \"\
    Basic\n        Socket Interface Extensions for IPv6\", RFC 2553, March 1999.\n\
    \   [21] Deering, S., Haberman, B., Jinmei, T., Nordmark, E., Onoe, A.\n     \
    \   and B. Zill, \"IPv6 Scoped Address Architecture\", Work in\n        Progress.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mike Daniele\n   Consultant\n   19 Pinewood Rd\n   Hudson,\
    \ NH  03051\n   USA\n   Phone: +1 603 883-6365\n   EMail: md@world.std.com\n \
    \  Brian Haberman\n   Phone: +1 919 949-4828\n   EMail: bkhabs@nc.rr.com\n   Shawn\
    \ A. Routhier\n   Wind River Systems, Inc.\n   500 Wind River Way\n   Alameda,\
    \ CA 94501\n   USA\n   Phone: +1 510 749 2095\n   EMail: sar@epilogue.com\n  \
    \ Juergen Schoenwaelder\n   TU Braunschweig\n   Bueltenweg 74/75\n   38106 Braunschweig\n\
    \   Germany\n   Phone: +49 531 391-3289\n   EMail: schoenw@ibr.cs.tu-bs.de\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
