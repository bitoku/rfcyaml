- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                   E. Haleplidis, Ed.
  contents:
  - "Internet Research Task Force (IRTF)                   E. Haleplidis, Ed.\n Software-Defined\
    \ Networking (SDN): Layers and Architecture Terminology\n"
- title: Abstract
  contents:
  - "Abstract\n   Software-Defined Networking (SDN) refers to a new approach for\n\
    \   network programmability, that is, the capacity to initialize,\n   control,\
    \ change, and manage network behavior dynamically via open\n   interfaces.  SDN\
    \ emphasizes the role of software in running networks\n   through the introduction\
    \ of an abstraction for the data forwarding\n   plane and, by doing so, separates\
    \ it from the control plane.  This\n   separation allows faster innovation cycles\
    \ at both planes as\n   experience has already shown.  However, there is increasing\
    \ confusion\n   as to what exactly SDN is, what the layer structure is in an SDN\n\
    \   architecture, and how layers interface with each other.  This\n   document,\
    \ a product of the IRTF Software-Defined Networking Research\n   Group (SDNRG),\
    \ addresses these questions and provides a concise\n   reference for the SDN research\
    \ community based on relevant peer-\n   reviewed literature, the RFC series, and\
    \ relevant documents by other\n   standards organizations.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Research Task Force\n   (IRTF).  The IRTF publishes the results\
    \ of Internet-related research\n   and development activities.  These results\
    \ might not be suitable for\n   deployment.  This RFC represents the consensus\
    \ of the Software-\n   Defined Networking Research Group of the Internet Research\
    \ Task Force\n   (IRTF).  Documents approved for publication by the IRSG are not\
    \ a\n   candidate for any level of Internet Standard; see Section 2 of RFC\n \
    \  5741.\n   Information about the current status of this document, any errata,\n\
    \   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7426.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terminology .....................................................5\n  \
    \ 3. SDN Layers and Architecture .....................................7\n    \
    \  3.1. Overview ...................................................9\n      3.2.\
    \ Network Devices ...........................................12\n      3.3. Control\
    \ Plane .............................................13\n      3.4. Management\
    \ Plane ..........................................14\n      3.5. Discussion of\
    \ Control and Management Planes ...............16\n           3.5.1. Timescale\
    \ ..........................................16\n           3.5.2. Persistence\
    \ ........................................16\n           3.5.3. Locality ...........................................16\n\
    \           3.5.4. CAP Theorem Insights ...............................17\n  \
    \    3.6. Network Services Abstraction Layer ........................18\n    \
    \  3.7. Application Plane .........................................19\n   4. SDN\
    \ Model View .................................................19\n      4.1. ForCES\
    \ ....................................................19\n      4.2. NETCONF/YANG\
    \ ..............................................20\n      4.3. OpenFlow ..................................................21\n\
    \      4.4. Interface to the Routing System ...........................21\n  \
    \    4.5. SNMP ......................................................22\n    \
    \  4.6. PCEP ......................................................23\n      4.7.\
    \ BFD .......................................................23\n   5. Summary\
    \ ........................................................24\n   6. Security Considerations\
    \ ........................................24\n   7. Informative References .........................................25\n\
    \   Acknowledgements ..................................................33\n  \
    \ Contributors ......................................................34\n   Authors'\
    \ Addresses ................................................34\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   \"Software-Defined Networking (SDN)\" is a term of the programmable\n\
    \   networks paradigm [PNSurvey99] [OF08].  In short, SDN refers to the\n   ability\
    \ of software applications to program individual network\n   devices dynamically\
    \ and therefore control the behavior of the network\n   as a whole [NV09].  Boucadair\
    \ and Jacquenet [RFC7149] point out that\n   SDN is a set of techniques used to\
    \ facilitate the design, delivery,\n   and operation of network services in a\
    \ deterministic, dynamic, and\n   scalable manner.\n   A key element in SDN is\
    \ the introduction of an abstraction between\n   the (traditional) forwarding\
    \ and control planes in order to separate\n   them and provide applications with\
    \ the means necessary to\n   programmatically control the network.  The goal is\
    \ to leverage this\n   separation, and the associated programmability, in order\
    \ to reduce\n   complexity and enable faster innovation at both planes [A4D05].\n\
    \   The historical evolution of the research and development area of\n   programmable\
    \ networks is reviewed in detail in [SDNHistory]\n   [SDNSurvey], starting with\
    \ efforts dating back to the 1980s.  As\n   documented in [SDNHistory], many of\
    \ the ideas, concepts, and concerns\n   are applicable to the latest research\
    \ and development in SDN (and SDN\n   standardization) and have been under extensive\
    \ investigation and\n   discussion in the research community for quite some time.\
    \  For\n   example, Rooney, et al. [Tempest] discuss how to allow third-party\n\
    \   access to the network without jeopardizing network integrity or how\n   to\
    \ accommodate legacy networking solutions in their (then new)\n   programmable\
    \ environment.  Further, the concept of separating the\n   control and forwarding\
    \ planes, which is prominent in SDN, has been\n   extensively discussed even prior\
    \ to 1998 [Tempest] [P1520] in SS7\n   networks [ITUSS7], Ipsilon Flow Switching\
    \ [RFC1953] [RFC2297], and\n   ATM [ITUATM].\n   SDN research often focuses on\
    \ varying aspects of programmability, and\n   we are frequently confronted with\
    \ conflicting points of view\n   regarding what exactly SDN is.  For instance,\
    \ we find that for\n   various reasons (e.g., work focusing on one domain and\
    \ therefore not\n   necessarily applicable as-is to other domains), certain well-accepted\n\
    \   definitions do not correlate well with each other.  For example, both\n  \
    \ OpenFlow [OpenFlow] and the Network Configuration Protocol (NETCONF)\n   [RFC6241]\
    \ have been characterized as SDN interfaces, but they refer\n   to control and\
    \ management, respectively.\n   This motivates us to consolidate the definitions\
    \ of SDN in the\n   literature and correlate them with earlier work at the IETF\
    \ and the\n   research community.  Of particular interest is, for example, to\n\
    \   determine which layers comprise the SDN architecture and which\n   interfaces\
    \ and their corresponding attributes are best suited to be\n   used between them.\
    \  As such, the aim of this document is not to\n   standardize any particular\
    \ layer or interface but rather to provide a\n   concise reference that reflects\
    \ current approaches regarding the SDN\n   layer architecture.  We expect that\
    \ this document would be useful to\n   upcoming work in SDNRG as well as future\
    \ discussions within the SDN\n   community as a whole.\n   This document addresses\
    \ the work item in the SDNRG charter titled\n   \"Survey of SDN approaches and\
    \ Taxonomies\", fostering better\n   understanding of prominent SDN technologies\
    \ in a technology-impartial\n   and business-agnostic manner but does not constitute\
    \ a new IETF\n   standard.  It is meant as a common base for further discussion.\
    \  As\n   such, we do not make any value statements nor discuss the\n   applicability\
    \ of any of the frameworks examined in this document for\n   any particular purpose.\
    \  Instead, we document their characteristics\n   and attributes and classify\
    \ them, thus providing a taxonomy.  This\n   document does not intend to provide\
    \ an exhaustive list of SDN\n   research issues; interested readers should consider\
    \ reviewing\n   [SLTSDN] and [SDNACS].  In particular, Jarraya, et al. [SLTSDN]\n\
    \   provide an overview of SDN-related research topics, e.g., control\n   partitioning,\
    \ which is related to the Consistency, Availability and\n   Partitioning (CAP)\
    \ theorem discussed in Section 3.5.4.\n   This document has been extensively reviewed,\
    \ discussed, and commented\n   by the vast majority of SDNRG members, a community\
    \ that certainly\n   exceeds 100 individuals.  It is the consensus of SDNRG that\
    \ this\n   document should be published in the IRTF stream of the RFC series\n\
    \   [RFC5743].\n   The remainder of this document is organized as follows.  Section\
    \ 2\n   explains the terminology used in this document.  Section 3 introduces\n\
    \   a high-level overview of current SDN architecture abstractions.\n   Finally,\
    \ Section 4 discusses how the SDN layer architecture relates\n   to prominent\
    \ SDN-enabling technologies.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document uses the following terms:\n   o  Software-Defined\
    \ Networking (SDN) - A programmable networks\n      approach that supports the\
    \ separation of control and forwarding\n      planes via standardized interfaces.\n\
    \   o  Resource - A physical or virtual component available within a\n      system.\
    \  Resources can be very simple or fine-grained (e.g., a\n      port or a queue)\
    \ or complex, comprised of multiple resources\n      (e.g., a network device).\n\
    \   o  Network Device - A device that performs one or more network\n      operations\
    \ related to packet manipulation and forwarding.  This\n      reference model\
    \ makes no distinction whether a network device is\n      physical or virtual.\
    \  A device can also be considered as a\n      container for resources and can\
    \ be a resource in itself.\n   o  Interface - A point of interaction between two\
    \ entities.  When the\n      entities are placed at different locations, the interface\
    \ is\n      usually implemented through a network protocol.  If the entities\n\
    \      are collocated in the same physical location, the interface can be\n  \
    \    implemented using a software application programming interface\n      (API),\
    \ inter-process communication (IPC), or a network protocol.\n   o  Application\
    \ (App) - An application in the context of SDN is a\n      piece of software that\
    \ utilizes underlying services to perform a\n      function.  Application operation\
    \ can be parameterized, for\n      example, by passing certain arguments at call\
    \ time, but it is\n      meant to be a standalone piece of software; an App does\
    \ not offer\n      any interfaces to other applications or services.\n   o  Service\
    \ - A piece of software that performs one or more functions\n      and provides\
    \ one or more APIs to applications or other services of\n      the same or different\
    \ layers to make use of said functions and\n      returns one or more results.\
    \  Services can be combined with other\n      services, or called in a certain\
    \ serialized manner, to create a\n      new service.\n   o  Forwarding Plane (FP)\
    \ - The collection of resources across all\n      network devices responsible\
    \ for forwarding traffic.\n   o  Operational Plane (OP) - The collection of resources\
    \ responsible\n      for managing the overall operation of individual network\
    \ devices.\n   o  Control Plane (CP) - The collection of functions responsible\
    \ for\n      controlling one or more network devices.  CP instructs network\n\
    \      devices with respect to how to process and forward packets.  The\n    \
    \  control plane interacts primarily with the forwarding plane and,\n      to\
    \ a lesser extent, with the operational plane.\n   o  Management Plane (MP) -\
    \ The collection of functions responsible\n      for monitoring, configuring,\
    \ and maintaining one or more network\n      devices or parts of network devices.\
    \  The management plane is\n      mostly related to the operational plane (it\
    \ is related less to the\n      forwarding plane).\n   o  Application Plane -\
    \ The collection of applications and services\n      that program network behavior.\n\
    \   o  Device and resource Abstraction Layer (DAL) - The device's\n      resource\
    \ abstraction layer based on one or more models.  If it is\n      a physical device,\
    \ it may be referred to as the Hardware\n      Abstraction Layer (HAL).  DAL provides\
    \ a uniform point of\n      reference for the device's forwarding- and operational-plane\n\
    \      resources.\n   o  Control Abstraction Layer (CAL) - The control plane's\
    \ abstraction\n      layer.  CAL provides access to the Control-Plane Southbound\n\
    \      Interface.\n   o  Management Abstraction Layer (MAL) - The management plane's\n\
    \      abstraction layer.  MAL provides access to the Management-Plane\n     \
    \ Southbound Interface.\n   o  Network Services Abstraction Layer (NSAL) - Provides\
    \ service\n      abstractions that can be used by applications and services.\n"
- title: 3.  SDN Layers and Architecture
  contents:
  - "3.  SDN Layers and Architecture\n   Figure 1 summarizes the SDN architecture\
    \ abstractions in the form of\n   a detailed, high-level schematic.  Note that\
    \ in a particular\n   implementation, planes can be collocated with other planes\
    \ or can be\n   physically separated, as we discuss below.\n   SDN is based on\
    \ the concept of separation between a controlled entity\n   and a controller entity.\
    \  The controller manipulates the controlled\n   entity via an interface.  Interfaces,\
    \ when local, are mostly API\n   invocations through some library or system call.\
    \  However, such\n   interfaces may be extended via some protocol definition,\
    \ which may\n   use local inter-process communication (IPC) or a protocol that\
    \ could\n   also act remotely; the protocol may be defined as an open standard\
    \ or\n   in a proprietary manner.\n   Day [PiNA] explores the use of IPC as the\
    \ mainstay for the definition\n   of recursive network architectures with varying\
    \ degrees of scope and\n   range of operation.  The Recursive InterNetwork Architecture\
    \ [RINA]\n   outlines a recursive network architecture based on IPC that\n   capitalizes\
    \ on repeating patterns and structures.  This document does\n   not propose a\
    \ new architecture -- we simply document previous work\n   through a taxonomy.\
    \  Although recursion is out of the scope of this\n   work, Figure 1 illustrates\
    \ a hierarchical model in which layers can\n   be stacked on top of each other\
    \ and employed recursively as needed.\n                   o--------------------------------o\n\
    \                   |                                |\n                   | +-------------+\
    \   +----------+ |\n                   | | Application |   |  Service | |\n  \
    \                 | +-------------+   +----------+ |\n                   |   \
    \    Application Plane        |\n                   o---------------Y----------------o\n\
    \                                   |\n     *-----------------------------Y---------------------------------*\n\
    \     |           Network Services Abstraction Layer (NSAL)           |\n    \
    \ *------Y------------------------------------------------Y-------*\n        \
    \    |                                                |\n            |       \
    \        Service Interface                |\n            |                   \
    \                             |\n     o------Y------------------o       o---------------------Y------o\n\
    \     |      |    Control Plane |       | Management Plane    |      |\n     |\
    \ +----Y----+   +-----+   |       |  +-----+       +----Y----+ |\n     | | Service\
    \ |   | App |   |       |  | App |       | Service | |\n     | +----Y----+   +--Y--+\
    \   |       |  +--Y--+       +----Y----+ |\n     |      |           |      | \
    \      |     |               |      |\n     | *----Y-----------Y----* |      \
    \ | *---Y---------------Y----* |\n     | | Control Abstraction | |       | | Management\
    \ Abstraction | |\n     | |     Layer (CAL)     | |       | |      Layer (MAL)\
    \       | |\n     | *----------Y----------* |       | *----------Y-------------*\
    \ |\n     |            |            |       |            |               |\n \
    \    o------------|------------o       o------------|---------------o\n      \
    \            |                                 |\n                  | CP     \
    \                         | MP\n                  | Southbound               \
    \       | Southbound\n                  | Interface                       | Interface\n\
    \                  |                                 |\n     *------------Y---------------------------------Y----------------*\n\
    \     |         Device and resource Abstraction Layer (DAL)           |\n    \
    \ *------------Y---------------------------------Y----------------*\n     |  \
    \          |                                 |                |\n     |    o-------Y----------o\
    \   +-----+   o--------Y----------o     |\n     |    | Forwarding Plane |   |\
    \ App |   | Operational Plane |     |\n     |    o------------------o   +-----+\
    \   o-------------------o     |\n     |                       Network Device \
    \                         |\n     +---------------------------------------------------------------+\n\
    \                     Figure 1: SDN Layer Architecture\n"
- title: 3.1.  Overview
  contents:
  - "3.1.  Overview\n   This document follows a network-device-centric approach: control\n\
    \   mostly refers to the device packet-handling capability, while\n   management\
    \ typically refers to aspects of the overall device\n   operation.  We view a\
    \ network device as a complex resource that\n   contains and is part of multiple\
    \ resources similar to [DIOPR].\n   Resources can be simple, single components\
    \ of a network device, for\n   example, a port or a queue of the device, and can\
    \ also be aggregated\n   into complex resources, for example, a network card or\
    \ a complete\n   network device.\n   The reader should keep in mind that we make\
    \ no distinction between\n   \"physical\" and \"virtual\" resources or \"hardware\"\
    \ and \"software\"\n   realizations in this document, as we do not delve into\
    \ implementation\n   or performance aspects.  In other words, a resource can be\n\
    \   implemented fully in hardware, fully in software, or any hybrid\n   combination\
    \ in between.  Further, we do not distinguish whether a\n   resource is implemented\
    \ as an overlay or as a part/component of some\n   other device.  In general,\
    \ network device software can run on so-\n   called \"bare metal\" or on a virtualized\
    \ substrate.  Finally, this\n   document does not discuss how resources are allocated,\
    \ orchestrated,\n   and released.  Indeed, orchestration is out of the scope of\
    \ this\n   document.\n   SDN spans multiple planes as illustrated in Figure 1.\
    \  Starting from\n   the bottom part of the figure and moving towards the upper\
    \ part, we\n   identify the following planes:\n   o  Forwarding Plane - Responsible\
    \ for handling packets in the data\n      path based on the instructions received\
    \ from the control plane.\n      Actions of the forwarding plane include, but\
    \ are not limited to,\n      forwarding, dropping, and changing packets.  The\
    \ forwarding plane\n      is usually the termination point for control-plane services\
    \ and\n      applications.  The forwarding plane can contain forwarding\n    \
    \  resources such as classifiers.  The forwarding plane is also\n      widely\
    \ referred to as the \"data plane\" or the \"data path\".\n   o  Operational Plane\
    \ - Responsible for managing the operational state\n      of the network device,\
    \ e.g., whether the device is active or\n      inactive, the number of ports available,\
    \ the status of each port,\n      and so on.  The operational plane is usually\
    \ the termination point\n      for management-plane services and applications.\
    \  The operational\n      plane relates to network device resources such as ports,\
    \ memory,\n      and so on.  We note that some participants of the IRTF SDNRG\
    \ have\n      a different opinion in regards to the definition of the\n      operational\
    \ plane.  That is, one can argue that the operational\n      plane does not constitute\
    \ a \"plane\" per se, but it is, in\n      practice, an amalgamation of functions\
    \ on the forwarding plane.\n      For others, however, a \"plane\" allows one\
    \ to distinguish between\n      different areas of operations; therefore, the\
    \ operational plane is\n      included as a \"plane\" in Figure 1.  We have adopted\
    \ this latter\n      view in this document.\n   o  Control Plane - Responsible\
    \ for making decisions on how packets\n      should be forwarded by one or more\
    \ network devices and pushing\n      such decisions down to the network devices\
    \ for execution.  The\n      control plane usually focuses mostly on the forwarding\
    \ plane and\n      less on the operational plane of the device.  The control plane\n\
    \      may be interested in operational-plane information, which could\n     \
    \ include, for instance, the current state of a particular port or\n      its\
    \ capabilities.  The control plane's main job is to fine-tune\n      the forwarding\
    \ tables that reside in the forwarding plane, based\n      on the network topology\
    \ or external service requests.\n   o  Management Plane - Responsible for monitoring,\
    \ configuring, and\n      maintaining network devices, e.g., making decisions\
    \ regarding the\n      state of a network device.  The management plane usually\
    \ focuses\n      mostly on the operational plane of the device and less on the\n\
    \      forwarding plane.  The management plane may be used to configure\n    \
    \  the forwarding plane, but it does so infrequently and through a\n      more\
    \ wholesale approach than the control plane.  For instance, the\n      management\
    \ plane may set up all or part of the forwarding rules at\n      once, although\
    \ such action would be expected to be taken\n      sparingly.\n   o  Application\
    \ Plane - The plane where applications and services that\n      define network\
    \ behavior reside.  Applications that directly (or\n      primarily) support the\
    \ operation of the forwarding plane (such as\n      routing processes within the\
    \ control plane) are not considered\n      part of the application plane.  Note\
    \ that applications may be\n      implemented in a modular and distributed fashion\
    \ and, therefore,\n      can often span multiple planes in Figure 1.\n   [RFC7276]\
    \ has defined the data, control, and management planes in\n   terms of Operations,\
    \ Administration, and Maintenance (OAM).  This\n   document attempts to broaden\
    \ the terms defined in [RFC7276] in order\n   to reflect all aspects of an SDN\
    \ architecture.\n   All planes mentioned above are connected via interfaces (indicated\n\
    \   with \"Y\" in Figure 1.  An interface may take multiple roles depending\n\
    \   on whether the connected planes reside on the same (physical or\n   virtual)\
    \ device.  If the respective planes are designed so that they\n   do not have\
    \ to reside in the same device, then the interface can only\n   take the form\
    \ of a protocol.  If the planes are collocated on the\n   same device, then the\
    \ interface could be implemented via an open/\n   proprietary protocol, an open/proprietary\
    \ software inter-process\n   communication API, or operating system kernel system\
    \ calls.\n   Applications, i.e., software programs that perform specific\n   computations\
    \ that consume services without providing access to other\n   applications, can\
    \ be implemented natively inside a plane or can span\n   multiple planes.  For\
    \ instance, applications or services can span\n   both the control and management\
    \ planes and thus be able to use both\n   the Control-Plane Southbound Interface\
    \ (CPSI) and Management-Plane\n   Southbound Interface (MPSI), although this is\
    \ only implicitly\n   illustrated in Figure 1.  An example of such a case would\
    \ be an\n   application that uses both [OpenFlow] and [OF-CONFIG].\n   Services,\
    \ i.e., software programs that provide APIs to other\n   applications or services,\
    \ can also be natively implemented in\n   specific planes.  Services that span\
    \ multiple planes belong to the\n   application plane as well.\n   While not shown\
    \ explicitly in Figure 1, services, applications, and\n   entire planes can be\
    \ placed in a recursive manner, thus providing\n   overlay semantics to the model.\
    \  For example, application-plane\n   services can be provided to other applications\
    \ or services through\n   NSAL.  Additional examples include virtual resources\
    \ that are\n   realized on top of a physical resources and hierarchical control-\n\
    \   plane controllers [KANDOO].\n   Note that the focus in this document is, of\
    \ course, on the north/\n   south communication between entities in different\
    \ planes.  But this,\n   clearly, does not exclude entity communication within\
    \ any one plane.\n   It must be noted, however, that in Figure 1, we present an\
    \ abstract\n   view of the various planes, which is devoid of implementation\n\
    \   details.  Many implementations in the past have opted for placing the\n  \
    \ management plane on top of the control plane.  This can be\n   interpreted as\
    \ having the control plane acting as a service to the\n   management plane.  Further,\
    \ in many networks, especially in Internet\n   routers and Ethernet switches,\
    \ the control plane has been usually\n   implemented as tightly coupled with the\
    \ network device.  When taken\n   as a whole, the control plane has been distributed\
    \ network-wide.  On\n   the other hand, the management plane has been traditionally\n\
    \   centralized and has been responsible for managing the control plane\n   and\
    \ the devices.  However, with the adoption of SDN principles, this\n   distinction\
    \ is no longer so clear-cut.\n   Additionally, this document considers four abstraction\
    \ layers:\n   o  The Device and resource Abstraction Layer (DAL) abstracts the\n\
    \      resources of the device's forwarding and operational planes to the\n  \
    \    control and management planes.  Variations of DAL may abstract\n      both\
    \ planes or either of the two and may abstract any plane of the\n      device\
    \ to either the control or management plane.\n   o  The Control Abstraction Layer\
    \ (CAL) abstracts the Control-Plane\n      Southbound Interface and the DAL from\
    \ the applications and\n      services of the control plane.\n   o  The Management\
    \ Abstraction Layer (MAL) abstracts the Management-\n      Plane Southbound Interface\
    \ and the DAL from the applications and\n      services of the management plane.\n\
    \   o  The Network Services Abstraction Layer (NSAL) provides service\n      abstractions\
    \ for use by applications and other services.\n   At the time of this writing,\
    \ SDN-related activities have begun in\n   other SDOs.  For example, at the ITU,\
    \ work on architectural [ITUSG13]\n   and signaling requirements and protocols\
    \ [ITUSG11] has commenced, but\n   the respective study groups have yet to publish\
    \ their documents, with\n   the exception of [ITUY3300].  The views presented\
    \ in [ITUY3300] as\n   well as in [ONFArch] are well aligned with this document.\n"
- title: 3.2.  Network Devices
  contents:
  - "3.2.  Network Devices\n   A network device is an entity that receives packets\
    \ on its ports and\n   performs one or more network functions on them.  For example,\
    \ the\n   network device could forward a received packet, drop it, alter the\n\
    \   packet header (or payload), forward the packet, and so on.  A network\n  \
    \ device is an aggregation of multiple resources such as ports, CPU,\n   memory,\
    \ and queues.  Resources are either simple or can be aggregated\n   to form complex\
    \ resources that can be viewed as one resource.  The\n   network device is in\
    \ itself a complex resource.  Examples of network\n   devices include switches\
    \ and routers.  Additional examples include\n   network elements that may operate\
    \ at a layer above IP (such as\n   firewalls, load balancers, and video transcoders)\
    \ or below IP (such\n   as Layer 2 switches and optical or microwave network elements).\n\
    \   Network devices can be implemented in hardware or software and can be\n  \
    \ either physical or virtual.  As has already been mentioned before,\n   this\
    \ document makes no such distinction.  Each network device has a\n   presence\
    \ in a forwarding plane and an operational plane.\n   The forwarding plane, commonly\
    \ referred to as the \"data path\", is\n   responsible for handling and forwarding\
    \ packets.  The forwarding\n   plane provides switching, routing, packet transformation,\
    \ and\n   filtering functions.  Resources of the forwarding plane include but\n\
    \   are not limited to filters, meters, markers, and classifiers.\n   The operational\
    \ plane is responsible for the operational state of the\n   network device, for\
    \ instance, with respect to status of network ports\n   and interfaces.  Operational-plane\
    \ resources include, but are not\n   limited to, memory, CPU, ports, interfaces,\
    \ and queues.\n   The forwarding and the operational planes are exposed via the\
    \ Device\n   and resource Abstraction Layer (DAL), which may be expressed by one\n\
    \   or more abstraction models.  Examples of forwarding-plane abstraction\n  \
    \ models are Forwarding and Control Element Separation (ForCES)\n   [RFC5812],\
    \ OpenFlow [OpenFlow], YANG model [RFC6020], and SNMP MIBs\n   [RFC3418].  Examples\
    \ of the operational-plane abstraction model\n   include the ForCES model [RFC5812],\
    \ the YANG model [RFC6020], and\n   SNMP MIBs [RFC3418].\n   Note that applications\
    \ can also reside in a network device.  Examples\n   of such applications include\
    \ event monitoring and handling\n   (offloading) topology discovery or ARP [RFC0826]\
    \ in the device itself\n   instead of forwarding such traffic to the control plane.\n"
- title: 3.3.  Control Plane
  contents:
  - "3.3.  Control Plane\n   The control plane is usually distributed and is responsible\
    \ mainly\n   for the configuration of the forwarding plane using a Control-Plane\n\
    \   Southbound Interface (CPSI) with DAL as a point of reference.  CP is\n   responsible\
    \ for instructing FP about how to handle network packets.\n   Communication between\
    \ control-plane entities, colloquially referred\n   to as the \"east-west\" interface,\
    \ is usually implemented through\n   gateway protocols such as BGP [RFC4271] or\
    \ other protocols such as\n   the Path Computation Element (PCE) Communication\
    \ Protocol (PCEP)\n   [RFC5440].  These corresponding protocol messages are usually\n\
    \   exchanged in-band and subsequently redirected by the forwarding plane\n  \
    \ to the control plane for further processing.  Examples in this\n   category\
    \ include [RCP], [SoftRouter], and [RouteFlow].\n   Control-plane functionalities\
    \ usually include:\n   o  Topology discovery and maintenance\n   o  Packet route\
    \ selection and instantiation\n   o  Path failover mechanisms\n   The CPSI is\
    \ usually defined with the following characteristics:\n   o  time-critical interface\
    \ that requires low latency and sometimes\n      high bandwidth in order to perform\
    \ many operations in short order\n   o  oriented towards wire efficiency and device\
    \ representation instead\n      of human readability\n   Examples include fast-\
    \ and high-frequency of flow or table updates,\n   high throughput, and robustness\
    \ for packet handling and events.\n   CPSI can be implemented using a protocol,\
    \ an API, or even inter-\n   process communication.  If the control plane and\
    \ the network device\n   are not collocated, then this interface is certainly\
    \ a protocol.\n   Examples of CPSIs are ForCES [RFC5810] and the OpenFlow protocol\n\
    \   [OpenFlow].\n   The Control Abstraction Layer (CAL) provides access to control\n\
    \   applications and services to various CPSIs.  The control plane may\n   support\
    \ more than one CPSI.\n   Control applications can use CAL to control a network\
    \ device without\n   providing any service to upper layers.  Examples include\
    \ applications\n   that perform control functions, such as OSPF, IS-IS, and BGP.\n\
    \   Control-plane service examples include a virtual private LAN service,\n  \
    \ service tunnels, topology services, etc.\n"
- title: 3.4.  Management Plane
  contents:
  - "3.4.  Management Plane\n   The management plane is usually centralized and aims\
    \ to ensure that\n   the network as a whole is running optimally by communicating\
    \ with the\n   network devices' operational plane using a Management-Plane\n \
    \  Southbound Interface (MPSI) with DAL as a point of reference.\n   Management-plane\
    \ functionalities are typically initiated, based on an\n   overall network view,\
    \ and traditionally have been human-centric.\n   However, lately, algorithms are\
    \ replacing most human intervention.\n   Management-plane functionalities [FCAPS]\
    \ typically include:\n   o  Fault and monitoring management\n   o  Configuration\
    \ management\n   In addition, management-plane functionalities may also include\n\
    \   entities such as orchestrators, Virtual Network Function Managers\n   (VNF\
    \ Managers) and Virtualised Infrastructure Managers, as described\n   in [NFVArch].\
    \  Such entities can use management interfaces to\n   operational-plane resources\
    \ to request and provision resources for\n   virtual functions as well as instruct\
    \ the instantiation of virtual\n   forwarding functions on top of physical forwarding\
    \ functions.  The\n   possibility of a common abstraction model for both SDN and\
    \ Network\n   Function Virtualization (NFV) is explored in [SDNNFV].  Note,\n\
    \   however, that these are only examples of applications and services in\n  \
    \ the management plane and not formal definitions of entities in this\n   document.\
    \  As has been noted above, orchestration and therefore the\n   definition of\
    \ any associated entities is out of the scope of this\n   document.\n   The MPSI,\
    \ in contrast to the CPSI, is usually not a time-critical\n   interface and does\
    \ not share the CPSI requirements.\n   MPSI is typically closer to human interaction\
    \ than CPSI (cf.\n   [RFC3535]); therefore, MPSI usually has the following\n \
    \  characteristics:\n   o  It is oriented more towards usability, with optimal\
    \ wire\n      performance being a secondary concern.\n   o  Messages tend to be\
    \ less frequent than in the CPSI.\n   As an example of usability versus performance,\
    \ we refer to the\n   consensus of the 2002 IAB Workshop [RFC3535]: the key requirement\
    \ for\n   a network management technology is ease of use, not performance.  As\n\
    \   per [RFC6632], textual configuration files should be able to contain\n   international\
    \ characters.  Human-readable strings should utilize\n   UTF-8, and protocol elements\
    \ should be in case-insensitive ASCII,\n   which requires more processing capabilities\
    \ to parse.\n   MPSI can range from a protocol, to an API or even inter-process\n\
    \   communication.  If the management plane is not embedded in the\n   network\
    \ device, the MPSI is certainly a protocol.  Examples of MPSIs\n   are ForCES\
    \ [RFC5810], NETCONF [RFC6241], IP Flow Information Export\n   (IPFIX) [RFC7011],\
    \ Syslog [RFC5424], Open vSwitch Database (OVSDB)\n   [RFC7047], and SNMP [RFC3411].\n\
    \   The Management Abstraction Layer (MAL) provides access to management\n   applications\
    \ and services to various MPSIs.  The management plane may\n   support more than\
    \ one MPSI.\n   Management applications can use MAL to manage the network device\n\
    \   without providing any service to upper layers.  Examples of\n   management\
    \ applications include network monitoring, fault detection,\n   and recovery applications.\n\
    \   Management-plane services provide access to other services or\n   applications\
    \ above the management plane.\n"
- title: 3.5.  Discussion of Control and Management Planes
  contents:
  - "3.5.  Discussion of Control and Management Planes\n   The definition of a clear\
    \ distinction between \"control\" and\n   \"management\" in the context of SDN\
    \ received significant community\n   attention during the preparation of this\
    \ document.  We observed that\n   the role of the management plane has been earlier\
    \ largely ignored or\n   specified as out-of-scope for the SDN ecosystem.  In\
    \ the remainder of\n   this subsection, we summarize the characteristics that\
    \ differentiate\n   the two planes in order to have a clear understanding of the\n\
    \   mechanics, capabilities, and needs of each respective interface.\n"
- title: 3.5.1.  Timescale
  contents:
  - "3.5.1.  Timescale\n   A point has been raised regarding the reference timescales\
    \ for the\n   control and management planes regarding how fast the respective\
    \ plane\n   is required to react to, or how fast it needs to manipulate, the\n\
    \   forwarding or operational plane of the device.  In general, the\n   control\
    \ plane needs to send updates \"often\", which translates roughly\n   to a range\
    \ of milliseconds; that requires high-bandwidth and low-\n   latency links.  In\
    \ contrast, the management plane reacts generally at\n   longer time frames, i.e.,\
    \ minutes, hours, or even days; thus, wire\n   efficiency is not always a critical\
    \ concern.  A good example of this\n   is the case of changing the configuration\
    \ state of the device.\n"
- title: 3.5.2.  Persistence
  contents:
  - "3.5.2.  Persistence\n   Another distinction between the control and management\
    \ planes relates\n   to state persistence.  A state is considered ephemeral if\
    \ it has a\n   very limited lifespan and is not deemed necessary to be stored\
    \ on\n   non-volatile memory.  A good example is determining routing, which is\n\
    \   usually associated with the control plane.  On the other hand, a\n   persistent\
    \ state has an extended lifespan that may range from hours\n   to days and months,\
    \ is meant to be used beyond the lifetime of the\n   process that created it,\
    \ and is thus used across device reboots.\n   Persistent state is usually associated\
    \ with the management plane.\n"
- title: 3.5.3.  Locality
  contents:
  - "3.5.3.  Locality\n   As mentioned earlier, traditionally, the control plane has\
    \ been\n   executed locally on the network device and is distributed in nature\n\
    \   whilst the management plane is usually executed in a centralized\n   manner,\
    \ remotely from the device.  However, with the advent of SDN\n   centralizing,\
    \ or \"logically centralizing\", the controller tends to\n   muddle the distinction\
    \ of the control and management plane based on\n   locality.\n"
- title: 3.5.4.  CAP Theorem Insights
  contents:
  - "3.5.4.  CAP Theorem Insights\n   The CAP theorem views a distributed computing\
    \ system as composed of\n   multiple computational resources (i.e., CPU, memory,\
    \ storage) that\n   are connected via a communications network and together perform\
    \ a\n   task.  The theorem, or conjecture by some, identifies three\n   characteristics\
    \ of distributed systems that are universally\n   desirable:\n   o  Consistency,\
    \ meaning that the system responds identically to a\n      query no matter which\
    \ node receives the request (or does not\n      respond at all).\n   o  Availability,\
    \ i.e., that the system always responds to a request\n      (although the response\
    \ may not be consistent or correct).\n   o  Partition tolerance, namely that the\
    \ system continues to function\n      even when specific nodes or the communications\
    \ network fail.\n   In 2000, Eric Brewer [CAPBR] conjectured that a distributed\
    \ system\n   can satisfy any two of these guarantees at the same time but not\
    \ all\n   three.  This conjecture was later proven by Gilbert and Lynch [CAPGL]\n\
    \   and is now usually referred to as the CAP theorem [CAPFN].\n   Forwarding\
    \ a packet through a network correctly is a computational\n   problem.  One of\
    \ the major abstractions that SDN posits is that all\n   network elements are\
    \ computational resources that perform the simple\n   computational task of inspecting\
    \ fields in an incoming packet and\n   deciding how to forward it.  Since the\
    \ task of forwarding a packet\n   from network ingress to network egress is obviously\
    \ carried out by a\n   large number of forwarding elements, the network of forwarding\n\
    \   devices is a distributed computational system.  Hence, the CAP\n   theorem\
    \ applies to forwarding of packets.\n   In the context of the CAP theorem, if\
    \ one considers partition\n   tolerance of paramount importance, traditional control-plane\n\
    \   operations are usually local and fast (available), while management-\n   plane\
    \ operations are usually centralized (consistent) and may be\n   slow.\n   The\
    \ CAP theorem also provides insights into SDN architectures.  For\n   example,\
    \ a centralized SDN controller acts as a consistent global\n   database and specific\
    \ SDN mechanisms ensure that a packet entering\n   the network is handled consistently\
    \ by all SDN switches.  The issue\n   of tolerance to loss of connectivity to\
    \ the controller is not\n   addressed by the basic SDN model.  When an SDN switch\
    \ cannot reach\n   its controller, the flow will be unavailable until the connection\
    \ is\n   restored.  The use of multiple non-collocated SDN controllers has\n \
    \  been proposed (e.g., by configuring the SDN switch with a list of\n   controllers);\
    \ this may improve partition tolerance but at the cost of\n   loss of absolute\
    \ consistency.  Panda, et al. [CAPFN] provide a first\n   exploration of how the\
    \ CAP theorem applies to SDN.\n"
- title: 3.6.  Network Services Abstraction Layer
  contents:
  - "3.6.  Network Services Abstraction Layer\n   The Network Services Abstraction\
    \ Layer (NSAL) provides access from\n   services of the control, management, and\
    \ application planes to other\n   services and applications.  We note that the\
    \ term \"SAL\" is\n   overloaded, as it is often used in several contexts ranging\
    \ from\n   system design to service-oriented architectures; therefore, we\n  \
    \ explicitly add \"Network\" to the title of this layer to emphasize that\n  \
    \ this term relates to Figure 1, and we map it accordingly in Section 4\n   to\
    \ prominent SDN approaches.\n   Service interfaces can take many forms pertaining\
    \ to their specific\n   requirements.  Examples of service interfaces include,\
    \ but are not\n   limited to, RESTful APIs, open protocols such as NETCONF, inter-\n\
    \   process communication, CORBA [CORBA] interfaces, and so on.  The two\n   leading\
    \ approaches for service interfaces are RESTful interfaces and\n   Remote Procedure\
    \ Call (RPC) interfaces.  Both follow a client-server\n   architecture and use\
    \ XML or JSON to pass messages, but each has some\n   slightly different characteristics.\n\
    \   RESTful interfaces, designed according to the representational state\n   transfer\
    \ design paradigm [REST], have the following characteristics:\n   o  Resource\
    \ identification - Individual resources are identified\n      using a resource\
    \ identifier, for example, a URI.\n   o  Manipulation of resources through representations\
    \ - Resources are\n      represented in a format like JSON, XML, or HTML.\n  \
    \ o  Self-descriptive messages - Each message has enough information to\n    \
    \  describe how the message is to be processed.\n   o  Hypermedia as the engine\
    \ of application state - A client needs no\n      prior knowledge of how to interact\
    \ with a server, as the API is\n      not fixed but dynamically provided by the\
    \ server.\n   Remote procedure calls (RPCs) [RFC5531], e.g., XML-RPC and the like,\n\
    \   have the following characteristics:\n   o  Individual procedures are identified\
    \ using an identifier.\n   o  A client needs to know the procedure name and the\
    \ associated\n      parameters.\n"
- title: 3.7.  Application Plane
  contents:
  - "3.7.  Application Plane\n   Applications and services that use services from\
    \ the control and/or\n   management plane form the application plane.\n   Additionally,\
    \ services residing in the application plane may provide\n   services to other\
    \ services and applications that reside in the\n   application plane via the service\
    \ interface.\n   Examples of applications include network topology discovery,\
    \ network\n   provisioning, path reservation, etc.\n"
- title: 4.  SDN Model View
  contents:
  - "4.  SDN Model View\n   We advocate that the SDN southbound interface should encompass\
    \ both\n   CPSI and MPSI.\n   SDN controllers such as [NOX] and [Beacon] are a\
    \ collection of\n   control-plane applications and services that implement a CPSI\
    \ ([NOX]\n   and [Beacon] both use OpenFlow) and provide a northbound interface\n\
    \   for applications.  The SDN northbound interface for controllers is\n   implemented\
    \ in the Network Services Abstraction Layer (NSAL) of\n   Figure 1.\n   The above\
    \ model can be used to describe all prominent SDN-enabling\n   technologies in\
    \ a concise manner, as we explain in the following\n   subsections.\n"
- title: 4.1.  ForCES
  contents:
  - "4.1.  ForCES\n   The IETF Forwarding and Control Element Separation (ForCES)\
    \ framework\n   [RFC3746] consists of one model and two protocols.  ForCES separates\n\
    \   the forwarding plane from the control plane via an open interface,\n   namely\
    \ the ForCES protocol [RFC5810], which operates on entities of\n   the forwarding\
    \ plane that have been modeled using the ForCES model\n   [RFC5812].\n   The ForCES\
    \ model [RFC5812] is based on the fact that a network\n   element is composed\
    \ of numerous logically separate entities that\n   cooperate to provide a given\
    \ functionality (such as routing or IP\n   switching) and yet appear as a normal\
    \ integrated network element to\n   external entities.\n   ForCES models the forwarding\
    \ plane using Logical Functional Blocks\n   (LFBs), which, when connected in a\
    \ graph, compose the Forwarding\n   Element (FE).  LFBs are described in XML,\
    \ based on an XML schema.\n   LFB definitions include base and custom-defined\
    \ datatypes; metadata\n   definitions; input and output ports; operational parameters\
    \ or\n   components; and capabilities and event definitions.\n   The ForCES model\
    \ can be used to define LFBs from fine- to coarse-\n   grained as needed, irrespective\
    \ of whether they are physical or\n   virtual.\n   The ForCES protocol is agnostic\
    \ to the model and can be used to\n   monitor, configure, and control any ForCES-modeled\
    \ element.  The\n   protocol has very simple commands: Set, Get, and Del(ete).\
    \  The\n   ForCES protocol has been designed for high throughput and fast\n  \
    \ updates.\n   With respect to Figure 1, the ForCES model [RFC5812] is suitable\
    \ for\n   the DAL, both for the operational and the forwarding plane, using\n\
    \   LFBs.  The ForCES protocol [RFC5810] has been designed and is\n   suitable\
    \ for the CPSI, although it could also be utilized for the\n   MPSI.\n"
- title: 4.2.  NETCONF/YANG
  contents:
  - "4.2.  NETCONF/YANG\n   The Network Configuration Protocol (NETCONF) [RFC6241]\
    \ is an IETF\n   network management protocol [RFC6632].  NETCONF provides mechanisms\n\
    \   to install, manipulate, and delete the configuration of network\n   devices.\n\
    \   NETCONF protocol operations are realized as remote procedure calls\n   (RPCs).\
    \  The NETCONF protocol uses XML-based data encoding for the\n   configuration\
    \ data as well as the protocol messages.  Recent studies,\n   such as [ESNet]\
    \ and [PENet], have shown that NETCONF performs better\n   than SNMP [RFC3411].\n\
    \   Additionally, the YANG data modeling language [RFC6020] has been\n   developed\
    \ for specifying NETCONF data models and protocol operations.\n   YANG is a data\
    \ modeling language used to model configuration and\n   state data manipulated\
    \ by the NETCONF protocol, NETCONF remote\n   procedure calls, and NETCONF notifications.\n\
    \   YANG models the hierarchical organization of data as a tree, in which\n  \
    \ each node has either a value or a set of child nodes.  Additionally,\n   YANG\
    \ structures data models into modules and submodules, allowing\n   reusability\
    \ and augmentation.  YANG models can describe constraints\n   to be enforced on\
    \ the data.  Additionally, YANG has a set of base\n   datatypes and allows custom-defined\
    \ datatypes as well.\n   YANG allows the definition of NETCONF RPCs, which allows\
    \ the protocol\n   to have an extensible number of commands.  For RPC definitions,\
    \ the\n   operations names, input parameters, and output parameters are defined\n\
    \   using YANG data definition statements.\n   With respect to Figure 1, the YANG\
    \ model [RFC6020] is suitable for\n   specifying DAL for the forwarding and operational\
    \ planes.  NETCONF\n   [RFC6241] is suitable for the MPSI.  NETCONF is a management\
    \ protocol\n   [RFC6632], which was not (originally) designed for fast CP updates,\n\
    \   and it might not be suitable for addressing the requirements of CPSI.\n"
- title: 4.3.  OpenFlow
  contents:
  - "4.3.  OpenFlow\n   OpenFlow is a framework originally developed at Stanford University\n\
    \   and currently under active standards development [OpenFlow] through\n   the\
    \ Open Networking Foundation (ONF).  Initially, the goal was to\n   provide a\
    \ way for researchers to run experimental protocols in a\n   production network\
    \ [OF08].  OpenFlow has undergone many revisions,\n   and additional revisions\
    \ are likely.  The following description\n   reflects version 1.4 [OpenFlow].\
    \  In short, OpenFlow defines a\n   protocol through which a logically centralized\
    \ controller can control\n   an OpenFlow switch.  Each OpenFlow-compliant switch\
    \ maintains one or\n   more flow tables, which are used to perform packet lookups.\
    \  Distinct\n   actions are to be taken regarding packet lookup and forwarding.\
    \  A\n   group table and an OpenFlow channel to external controllers are also\n\
    \   part of the switch specification.\n   With respect to Figure 1, the OpenFlow\
    \ switch specifications\n   [OpenFlow] define a DAL for the forwarding plane as\
    \ well as for CPSI.\n   The OF-CONFIG protocol [OF-CONFIG], based on the YANG\
    \ model\n   [RFC6020], provides a DAL for the forwarding and operational planes\n\
    \   of an OpenFlow switch and specifies NETCONF [RFC6241] as the MPSI.\n   OF-CONFIG\
    \ overlaps with the OpenFlow DAL, but with NETCONF [RFC6241]\n   as the transport\
    \ protocol, it shares the limitations described in the\n   previous section.\n"
- title: 4.4.  Interface to the Routing System
  contents:
  - "4.4.  Interface to the Routing System\n   Interface to the Routing System (I2RS)\
    \ provides a standard interface\n   to the routing system for real-time or event-driven\
    \ interaction\n   through a collection of protocol-based control or management\n\
    \   interfaces.  Essentially, one of the main goals of I2RS, is to make\n   the\
    \ Routing Information Base (RIB) programmable, thus enabling new\n   kinds of\
    \ network provisioning and operation.\n   I2RS did not initially intend to create\
    \ new interfaces but rather\n   leverage or extend existing ones and define informational\
    \ models for\n   the routing system.  For example, the latest I2RS problem statement\n\
    \   [I2RSProb] discusses previously defined IETF protocols such as ForCES\n  \
    \ [RFC5810], NETCONF [RFC6241], and SNMP [RFC3417].  Regarding the\n   definition\
    \ of informational and data models, the I2RS working group\n   has opted to use\
    \ the YANG [RFC6020] modeling language.\n   Currently the I2RS working group is\
    \ developing an Information Model\n   [I2RSInfo] in regards to the Network Services\
    \ Abstraction Layer for\n   the I2RS agent.\n   With respect to Figure 1, the\
    \ I2RS architecture [I2RSArch]\n   encompasses the control and application planes\
    \ and uses any CPSI and\n   DAL that is available, whether that may be ForCES\
    \ [RFC5810], OpenFlow\n   [OpenFlow], or another interface.  In addition, the\
    \ I2RS agent is a\n   control-plane service.  All services or applications on\
    \ top of that\n   belong to either the Control, Management, or Application plane.\
    \  In\n   the I2RS documents, management access to the agent may be provided by\n\
    \   management protocols like SNMP and NETCONF.  The I2RS protocol may\n   also\
    \ be mapped to the service interface as it will even provide\n   access to services\
    \ and applications other than control-plane services\n   and applications.\n"
- title: 4.5.  SNMP
  contents:
  - "4.5.  SNMP\n   The Simple Network Management Protocol (SNMP) is an IETF-standardized\n\
    \   management protocol and is currently at its third revision (SNMPv3)\n   [RFC3417]\
    \ [RFC3412] [RFC3414].  It consists of a set of standards for\n   network management,\
    \ including an application-layer protocol, a\n   database schema, and a set of\
    \ data objects.  SNMP exposes management\n   data (managed objects) in the form\
    \ of variables on the managed\n   systems, which describe the system configuration.\
    \  These variables\n   can then be queried and set by managing applications.\n\
    \   SNMP uses an extensible design for describing data, defined by\n   Management\
    \ Information Bases (MIBs).  MIBs describe the structure of\n   the management\
    \ data of a device subsystem.  MIBs use a hierarchical\n   namespace containing\
    \ object identifiers (OIDs).  Each OID identifies\n   a variable that can be read\
    \ or set via SNMP.  MIBs use the notation\n   defined by Structure of Management\
    \ Information Version 2 [RFC2578].\n   An early example of SNMP in the context\
    \ of SDN is discussed in\n   [Peregrine].\n   With respect to Figure 1, SNMP MIBs\
    \ can be used to describe DAL for\n   the forwarding and operational planes. \
    \ Similar to YANG, SNMP MIBs\n   are able to describe DAL for the forwarding plane.\
    \  SNMP, similar to\n   NETCONF, is suited for the MPSI.\n"
- title: 4.6.  PCEP
  contents:
  - "4.6.  PCEP\n   The Path Computation Element (PCE) [RFC4655] architecture defines\
    \ an\n   entity capable of computing paths for a single service or a set of\n\
    \   services.  A PCE might be a network node, network management station,\n  \
    \ or dedicated computational platform that is resource-aware and has\n   the ability\
    \ to consider multiple constraints for a variety of path\n   computation problems\
    \ and switching technologies.  The PCE\n   Communication Protocol (PCEP) [RFC5440]\
    \ is used between a Path\n   Computation Client (PCC) and a PCE, or between multiple\
    \ PCEs.\n   The PCE architecture represents a vision of networks that separates\n\
    \   path computation for services, the signaling of end-to-end\n   connections,\
    \ and actual packet forwarding.  The definition of online\n   and offline path\
    \ computation is dependent on the reachability of the\n   PCE from network and\
    \ Network Management System (NMS) nodes and the\n   type of optimization request\
    \ that may significantly impact the\n   optimization response time from the PCE\
    \ to the PCC.\n   The PCEP messaging mechanism facilitates the specification of\n\
    \   computation endpoints (source and destination node addresses),\n   objective\
    \ functions (requested algorithm and optimization criteria),\n   and the associated\
    \ constraints such as traffic parameters (e.g.,\n   requested bandwidth), the\
    \ switching capability, and encoding type.\n   With respect to Figure 1, PCE is\
    \ a control-plane service that\n   provides services for control-plane applications.\
    \  PCEP may be used\n   as an east-west interface between PCEs that may act as\
    \ domain control\n   entities (services and applications).  The PCE working group\
    \ is\n   specifying extensions [PCEActive] that allow an active PCE to\n   control,\
    \ using PCEP, MPLS or GMPLS Label Switched Paths (LSPs), thus\n   making it applicable\
    \ for the CPSI for MPLS and GMPLS switches.\n"
- title: 4.7.  BFD
  contents:
  - "4.7.  BFD\n   Bidirectional Forwarding Detection (BFD) [RFC5880] is an IETF-\n\
    \   standardized network protocol designed for detecting path failures\n   between\
    \ two forwarding elements, including physical interfaces,\n   subinterfaces, data\
    \ link(s), and, to the extent possible, the\n   forwarding engines themselves,\
    \ with potentially very low latency.\n   BFD can provide low-overhead failure\
    \ detection on any kind of path\n   between systems, including direct physical\
    \ links, virtual circuits,\n   tunnels, MPLS LSPs, multihop routed paths, and\
    \ unidirectional links\n   where there exists a return path as well.  It is often\
    \ implemented in\n   some component of the forwarding engine of a system, in cases\
    \ where\n   the forwarding and control engines are separated.\n   With respect\
    \ to Figure 1, a BFD agent can be implemented as a\n   control-plane service or\
    \ application that would use the CPSI towards\n   the forwarding plane to send/receive\
    \ BFD packets.  However, a BFD\n   agent is usually implemented as an application\
    \ on the device and uses\n   the forwarding plane to send/receive BFD packets\
    \ and update the\n   operational-plane resources accordingly.  Services and applications\n\
    \   of the control and management planes that monitor or have subscribed\n   to\
    \ changes of resources can learn about these changes through their\n   respective\
    \ interfaces and take any actions as necessary.\n"
- title: 5.  Summary
  contents:
  - "5.  Summary\n   This document has been developed after a thorough and detailed\n\
    \   analysis of related peer-reviewed literature, the RFC series, and\n   documents\
    \ produced by other relevant standards organizations.  It has\n   been reviewed\
    \ publicly by the wider SDN community, and we hope that\n   it can serve as a\
    \ handy tool for network researchers, engineers, and\n   practitioners in the\
    \ years to come.\n   We conclude this document with a brief summary of the terminology\
    \ of\n   the SDN layer architecture.  In general, we consider a network\n   element\
    \ as a composition of resources.  Each network element has a\n   forwarding plane\
    \ (FP) that is responsible for handling packets in the\n   data path and an operational\
    \ plane (OP) that is responsible for\n   managing the operational state of the\
    \ device.  Resources in the\n   network element are abstracted by the Device and\
    \ resource Abstraction\n   Layer (DAL) to be controlled and managed by services\
    \ or applications\n   that belong to the control or management plane.  The control\
    \ plane\n   (CP) is responsible for making decisions on how packets should be\n\
    \   forwarded.  The management plane (MP) is responsible for monitoring,\n   configuring,\
    \ and maintaining network devices.  Service interfaces are\n   abstracted by the\
    \ Network Services Abstraction Layer (NSAL), where\n   other network applications\
    \ or services may use them.  The taxonomy\n   introduced in this document defines\
    \ distinct SDN planes, abstraction\n   layers, and interfaces; it aims to clarify\
    \ SDN terminology and\n   establish commonly accepted reference definitions across\
    \ the SDN\n   community, irrespective of specific implementation choices.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document does not propose a new network\
    \ architecture or protocol\n   and therefore does not have any impact on the security\
    \ of the\n   Internet.  That said, security is paramount in networking; thus,\
    \ it\n   should be given full consideration when designing a network\n   architecture\
    \ or operational deployment.  Security in SDN is discussed\n   in the literature,\
    \ for example, in [SDNSecurity], [SDNSecServ], and\n   [SDNSecOF].  Security considerations\
    \ regarding specific interfaces\n   (such as, for example, ForCES, I2RS, SNMP,\
    \ or NETCONF) are addressed\n   in their respective documents as well as in [RFC7149].\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [A4D05]       Greenberg, A., Hjalmtysson, G.,\
    \ Maltz, D., Myers, A.,\n                 Rexford, J., Xie, G., Yan, H., Zhan,\
    \ J., and H. Zhang,\n                 \"A Clean Slate 4D Approach to Network Control\
    \ and\n                 Management\", ACM SIGCOMM Computer Communication Review,\n\
    \                 Volume 35, Issue 5, pp. 41-54, 2005.\n   [ALIEN]       Parniewicz,\
    \ D., Corin, R., Ogrodowczyk, L., Fard, M.,\n                 Matias, J., Gerola,\
    \ M., Fuentes, V., Toseef, U.,\n                 Zaalouk, A., Belter, B., Jacob,\
    \ E., and K. Pentikousis,\n                 \"Design and Implementation of an\
    \ OpenFlow Hardware\n                 Abstraction Layer\", In Proceedings of the\
    \ ACM SIGCOMM\n                 Workshop on Distributed Cloud Computing (DCC),\
    \ Chicago,\n                 Illinois, USA, pp. 71-76, doi 10.1145/2627566.2627577,\n\
    \                 August 2014.\n   [Beacon]      Erickson, D., \"The Beacon OpenFlow\
    \ Controller\", In\n                 Proceedings of the second ACM SIGCOMM workshop\
    \ on Hot\n                 Topics in Software Defined Networking, pp. 13-18, 2013.\n\
    \   [CAPBR]       Brewer, E., \"Towards Robust Distributed Systems\", In\n   \
    \              Proceedings of the Symposium on Principles of\n               \
    \  Distributed Computing (PODC), 2000.\n   [CAPFN]       Panda, A., Scott, C.,\
    \ Ghodsi, A., Koponen, T., and S.\n                 Shenker, \"CAP for Networks\"\
    , In Proceedings of the\n                 second ACM SIGCOMM workshop on Hot Topics\
    \ in Software\n                 Defined Networking, pp. 91-96, 2013.\n   [CAPGL]\
    \       Gilbert, S. and N. Lynch, \"Brewer's Conjecture and the\n            \
    \     Feasibility of Consistent, Available,\n                 Partition-Tolerant\
    \ Web Services\", ACM SIGACT News,\n                 Volume 33, Issue 2, pp. 51-59,\
    \ 2002.\n   [CORBA]       Object Management Group, \"CORBA Version 3.3\", November\n\
    \                 2012, <http://www.omg.org/spec/CORBA/3.3/>.\n   [DIOPR]    \
    \   Denazis, S., Miki, K., Vicente, J., and A. Campbell,\n                 \"\
    Designing Interfaces for Open Programmable Routers\",\n                 In \"\
    Active Networks\", Springer Berlin Heidelberg,\n                 pp. 13-24, 1999.\n\
    \   [ESNet]       Yu, J. and I. Al Ajarmeh, \"An Empirical Study of the\n    \
    \             NETCONF Protocol\", Sixth International Conference on\n        \
    \         Networking and Services, pp. 253-258, 2010.\n   [FCAPS]       ITU, \"\
    Management Framework For Open Systems\n                 Interconnection (OSI)\
    \ For CCITT Applications\", ITU\n                 Recommendation X.700, September\
    \ 1992,\n                 <http://www.itu.int/rec/T-REC-X.700-199209-I/en>.\n\
    \   [I2RSArch]    Atlas, A., Halpern, J., Hares, S., Ward, D., and T.\n      \
    \           Nadeau, \"An Architecture for the Interface to the\n             \
    \    Routing System\", Work in Progress,\n                 draft-ietf-i2rs-architecture-07,\
    \ December 2014.\n   [I2RSInfo]    Bahadur, N., Folkes, R., Kini, S., and J. Medved,\n\
    \                 \"Routing Information Base Info Model\", Work in\n         \
    \        Progress, draft-ietf-i2rs-rib-info-model-04, December\n             \
    \    2014.\n   [I2RSProb]    Atlas, A., Nadeau, T., and D. Ward, \"Interface to\
    \ the\n                 Routing System Problem Statement\", Work in Progress,\n\
    \                 draft-ietf-i2rs-problem-statement-05, January 2015.\n   [ITUATM]\
    \      ITU, \"B-ISDN ATM Layer Specification\", ITU\n                 Recommendation\
    \ I.361, 1990,\n                 <http://www.itu.int/rec/T-REC-I.361-199902-I/en>.\n\
    \   [ITUSG11]     ITU, \"ITU-T Study Group 11: Protocols and test\n          \
    \       specifications\", <http://www.itu.int/en/ITU-T/\n                 studygroups/2013-2016/11/Pages/default.aspx>.\n\
    \   [ITUSG13]     ITU, \"ITU-T Study Group 13: Future networks including\n   \
    \              cloud computing, mobile and next-generation networks\",\n     \
    \            <http://www.itu.int/en/ITU-T/studygroups/\n                 2013-2016/13/Pages/default.aspx>.\n\
    \   [ITUSS7]      ITU, \"Introduction to CCITT Signalling System No. 7\",\n  \
    \               ITU Recommendation Q.700, 1993,\n                 <http://www.itu.int/rec/T-REC-Q.700-199303-I/e>.\n\
    \   [ITUY3300]    ITU, \"Framework of software-defined networking\", ITU\n   \
    \              Recommendation Y.3300, June 2014,\n                 <http://www.itu.int/rec/T-REC-Y.3300-201406-I/en>.\n\
    \   [KANDOO]      Yeganeh, S. and Y. Ganjali, \"Kandoo: A Framework for\n    \
    \             Efficient and Scalable Offloading of Control\n                 Applications\"\
    , In Proceedings of the first ACM SIGCOMM\n                 workshop on Hot Topics\
    \ in Software Defined Networks,\n                 pp. 19-24, 2012.\n   [NFVArch]\
    \     ETSI, \"Network Functions Virtualisation (NFV):\n                 Architectural\
    \ Framework\", ETSI GS NFV 002, October\n                 2013, <http://www.etsi.org/deliver/etsi_gs/\n\
    \                 nfv/001_099/002/01.01.01_60/gs_nfv002v010101p.pdf>.\n   [NOX]\
    \         Gude, N., Koponen, T., Pettit, J., Pfaff, B., Casado,\n            \
    \     M., McKeown, N., and S. Shenker, \"NOX: Towards an\n                 Operating\
    \ System for Networks\", ACM SIGCOMM Computer\n                 Communication\
    \ Review, Volume 38, Issue 3, pp. 105-110,\n                 July 2008.\n   [NV09]\
    \        Chowdhury, N. and R. Boutaba, \"Network Virtualization:\n           \
    \      State of the Art and Research Challenges\",\n                 Communications\
    \ Magazine, IEEE, Volume 47, Issue 7,\n                 pp. 20-26, 2009.\n   [OF-CONFIG]\
    \   Open Networking Foundation, \"OpenFlow Management and\n                 Configuration\
    \ Protocol (OF-Config 1.1.1)\", March 2013,\n                 <https://www.opennetworking.org/images/stories/\n\
    \                 downloads/sdn-resources/onf-specifications/\n              \
    \   openflow-config/of-config-1-1-1.pdf>.\n   [OF08]        McKeown, N., Anderson,\
    \ T., Balakrishnan, H., Parulkar,\n                 G., Peterson, L., Rexford,\
    \ J., Shenker, S., and J.\n                 Turner, \"OpenFlow: Enabling Innovation\
    \ in Campus\n                 Networks\", ACM SIGCOMM Computer Communication Review,\n\
    \                 Volume 38, Issue 2, pp. 69-74, 2008.\n   [ONFArch]     Open\
    \ Networking Foundation, \"SDN Architecture, Version\n                 1\", June\
    \ 2014,\n                 <https://www.opennetworking.org/images/stories/\n  \
    \               downloads/sdn-resources/technical-reports/\n                 TR_SDN_ARCH_1.0_06062014.pdf>.\n\
    \   [OpenFlow]    Open Networking Foundation, \"The OpenFlow Switch\n        \
    \         Specification, Version 1.4.0\", October 2013,\n                 <https://www.opennetworking.org/images/stories/\n\
    \                 downloads/sdn-resources/onf-specifications/openflow/\n     \
    \            openflow-spec-v1.4.0.pdf>.\n   [P1520]       Biswas, J., Lazar, A.,\
    \ Huard, J., Lim, K., Mahjoub, S.,\n                 Pau, L., Suzuki, M., Torstensson,\
    \ S., Wang, W., and S.\n                 Weinstein, \"The IEEE P1520 standards\
    \ initiative for\n                 programmable network interfaces\", IEEE Communications\n\
    \                 Magazine, Volume 36, Issue 10, pp. 64-70, 1998.\n   [PCEActive]\
    \   Crabbe, E., Minei, I., Medved, J., and R. Varga, \"PCEP\n                \
    \ Extensions for Stateful PCE\", Work in Progress,\n                 draft-ietf-pce-stateful-pce-10,\
    \ October 2014.\n   [PENet]       Hedstrom, B., Watwe, A., and S. Sakthidharan,\
    \ \"Protocol\n                 Efficiencies of NETCONF versus SNMP for Configuration\n\
    \                 Management Functions\", Master's thesis, University of\n   \
    \              Colorado, 2011.\n   [PNSurvey99]  Campbell, A., De Meer, H., Kounavis,\
    \ M., Miki, K.,\n                 Vicente, J., and D. Villela, \"A Survey of Programmable\n\
    \                 Networks\", ACM SIGCOMM Computer Communication Review,\n   \
    \              Volume 29, Issue 2, pp. 7-23, September 1992.\n   [Peregrine] \
    \  Chiueh, D., Tu, C., Wang, Y., Wang, P., Li, K., and Y.\n                 Huang,\
    \ \"Peregrine: An All-Layer-2 Container Computer\n                 Network\",\
    \ In Proceedings of the 2012 IEEE 5th\n                 International Conference\
    \ on Cloud Computing,\n                 pp. 686-693, 2012.\n   [PiNA]        Day,\
    \ J., \"Patterns in Network Architecture: A Return to\n                 Fundamentals\"\
    , Prentice Hall, ISBN 0132252422, 2008.\n   [RCP]         Caesar, M., Caldwell,\
    \ D., Feamster, N., Rexford, J.,\n                 Shaikh, A., and J. van der\
    \ Merwe, \"Design and\n                 Implementation of a Routing Control Platform\"\
    , In\n                 Proceedings of the 2nd conference on Symposium on\n   \
    \              Networked Systems Design & Implementation Volume 2,\n         \
    \        pp. 15-28, 2005.\n   [REST]        Fielding, Roy, \"Chapter 5: Representational\
    \ State\n                 Transfer (REST)\", in Disseration \"Architectural Styles\n\
    \                 and the Design of Network-based Software\n                 Architectures\"\
    , 2000.\n   [RFC0826]     Plummer, D., \"Ethernet Address Resolution Protocol:\
    \ Or\n                 converting network protocol addresses to 48.bit\n     \
    \            Ethernet address for transmission on Ethernet\n                 hardware\"\
    , STD 37, RFC 826, November 1982,\n                 <http://www.rfc-editor.org/info/rfc826>.\n\
    \   [RFC1953]     Newman, P., Edwards, W., Hinden, R., Hoffman, E., Ching\n  \
    \               Liaw, F., Lyon, T., and G. Minshall, \"Ipsilon Flow\n        \
    \         Management Protocol Specification for IPv4 Version\n               \
    \  1.0\", RFC 1953, May 1996,\n                 <http://www.rfc-editor.org/info/rfc1953>.\n\
    \   [RFC2297]     Newman, P., Edwards, W., Hinden, R., Hoffman, E., Liaw,\n  \
    \               F., Lyon, T., and G. Minshall, \"Ipsilon's General\n         \
    \        Switch Management Protocol Specification Version 2.0\",\n           \
    \      RFC 2297, March 1998,\n                 <http://www.rfc-editor.org/info/rfc2297>.\n\
    \   [RFC2578]     McCloghrie, K., Ed., Perkins, D., Ed., and J.\n            \
    \     Schoenwaelder, Ed., \"Structure of Management\n                 Information\
    \ Version 2 (SMIv2)\", STD 58, RFC 2578, April\n                 1999, <http://www.rfc-editor.org/info/rfc2578>.\n\
    \   [RFC3411]     Harrington, D., Presuhn, R., and B. Wijnen, \"An\n         \
    \        Architecture for Describing Simple Network Management\n             \
    \    Protocol (SNMP) Management Frameworks\", STD 62, RFC\n                 3411,\
    \ December 2002,\n                 <http://www.rfc-editor.org/info/rfc3411>.\n\
    \   [RFC3412]     Case, J., Harrington, D., Presuhn, R., and B. Wijnen,\n    \
    \             \"Message Processing and Dispatching for the Simple\n          \
    \       Network Management Protocol (SNMP)\", STD 62, RFC 3412,\n            \
    \     December 2002,\n                 <http://www.rfc-editor.org/info/rfc3412>.\n\
    \   [RFC3414]     Blumenthal, U. and B. Wijnen, \"User-based Security\n      \
    \           Model (USM) for version 3 of the Simple Network\n                \
    \ Management Protocol (SNMPv3)\", STD 62, RFC 3414,\n                 December\
    \ 2002,\n                 <http://www.rfc-editor.org/info/rfc3414>.\n   [RFC3417]\
    \     Presuhn, R., \"Transport Mappings for the Simple Network\n             \
    \    Management Protocol (SNMP)\", STD 62, RFC 3417, December\n              \
    \   2002, <http://www.rfc-editor.org/info/rfc3417>.\n   [RFC3418]     Presuhn,\
    \ R., \"Management Information Base (MIB) for the\n                 Simple Network\
    \ Management Protocol (SNMP)\", STD 62, RFC\n                 3418, December 2002,\n\
    \                 <http://www.rfc-editor.org/info/rfc3418>.\n   [RFC3535]    \
    \ Schoenwaelder, J., \"Overview of the 2002 IAB Network\n                 Management\
    \ Workshop\", RFC 3535, May 2003,\n                 <http://www.rfc-editor.org/info/rfc3535>.\n\
    \   [RFC3746]     Yang, L., Dantu, R., Anderson, T., and R. Gopal,\n         \
    \        \"Forwarding and Control Element Separation (ForCES)\n              \
    \   Framework\", RFC 3746, April 2004,\n                 <http://www.rfc-editor.org/info/rfc3746>.\n\
    \   [RFC4271]     Rekhter, Y., Li, T., and S. Hares, \"A Border Gateway\n    \
    \             Protocol 4 (BGP-4)\", RFC 4271, January 2006,\n                \
    \ <http://www.rfc-editor.org/info/rfc4271>.\n   [RFC4655]     Farrel, A., Vasseur,\
    \ J., and J. Ash, \"A Path\n                 Computation Element (PCE)-Based Architecture\"\
    , RFC\n                 4655, August 2006,\n                 <http://www.rfc-editor.org/info/rfc4655>.\n\
    \   [RFC5424]     Gerhards, R., \"The Syslog Protocol\", RFC 5424, March\n   \
    \              2009, <http://www.rfc-editor.org/info/rfc5424>.\n   [RFC5440] \
    \    Vasseur, JP. and JL. Le Roux, \"Path Computation Element\n              \
    \   (PCE) Communication Protocol (PCEP)\", RFC 5440, March\n                 2009,\
    \ <http://www.rfc-editor.org/info/rfc5440>.\n   [RFC5531]     Thurlow, R., \"\
    RPC: Remote Procedure Call Protocol\n                 Specification Version 2\"\
    , RFC 5531, May 2009,\n                 <http://www.rfc-editor.org/info/rfc5531>.\n\
    \   [RFC5743]     Falk, A., \"Definition of an Internet Research Task\n      \
    \           Force (IRTF) Document Stream\", RFC 5743, December 2009,\n       \
    \          <http://www.rfc-editor.org/info/rfc5743>.\n   [RFC5810]     Doria,\
    \ A., Hadi Salim, J., Haas, R., Khosravi, H.,\n                 Wang, W., Dong,\
    \ L., Gopal, R., and J. Halpern,\n                 \"Forwarding and Control Element\
    \ Separation (ForCES)\n                 Protocol Specification\", RFC 5810, March\
    \ 2010,\n                 <http://www.rfc-editor.org/info/rfc5810>.\n   [RFC5812]\
    \     Halpern, J. and J. Hadi Salim, \"Forwarding and Control\n              \
    \   Element Separation (ForCES) Forwarding Element Model\",\n                \
    \ RFC 5812, March 2010,\n                 <http://www.rfc-editor.org/info/rfc5812>.\n\
    \   [RFC5880]     Katz, D. and D. Ward, \"Bidirectional Forwarding\n         \
    \        Detection (BFD)\", RFC 5880, June 2010,\n                 <http://www.rfc-editor.org/info/rfc5880>.\n\
    \   [RFC6020]     Bjorklund, M., \"YANG - A Data Modeling Language for the\n \
    \                Network Configuration Protocol (NETCONF)\", RFC 6020,\n     \
    \            October 2010, <http://www.rfc-editor.org/info/rfc6020>.\n   [RFC6241]\
    \     Enns, R., Bjorklund, M., Schoenwaelder, J., and A.\n                 Bierman,\
    \ \"Network Configuration Protocol (NETCONF)\",\n                 RFC 6241, June\
    \ 2011,\n                 <http://www.rfc-editor.org/info/rfc6241>.\n   [RFC6632]\
    \     Ersue, M. and B. Claise, \"An Overview of the IETF\n                 Network\
    \ Management Standards\", RFC 6632, June 2012,\n                 <http://www.rfc-editor.org/info/rfc6632>.\n\
    \   [RFC7011]     Claise, B., Trammell, B., and P. Aitken, \"Specification\n \
    \                of the IP Flow Information Export (IPFIX) Protocol for\n    \
    \             the Exchange of Flow Information\", STD 77, RFC 7011,\n        \
    \         September 2013,\n                 <http://www.rfc-editor.org/info/rfc7011>.\n\
    \   [RFC7047]     Pfaff, B. and B. Davie, \"The Open vSwitch Database\n      \
    \           Management Protocol\", RFC 7047, December 2013,\n                \
    \ <http://www.rfc-editor.org/info/rfc7047>.\n   [RFC7149]     Boucadair, M. and\
    \ C. Jacquenet, \"Software-Defined\n                 Networking: A Perspective\
    \ from within a Service\n                 Provider Environment\", RFC 7149, March\
    \ 2014,\n                 <http://www.rfc-editor.org/info/rfc7149>.\n   [RFC7276]\
    \     Mizrahi, T., Sprecher, N., Bellagamba, E., and Y.\n                 Weingarten,\
    \ \"An Overview of Operations, Administration,\n                 and Maintenance\
    \ (OAM) Tools\", RFC 7276, June 2014,\n                 <http://www.rfc-editor.org/info/rfc7276>.\n\
    \   [RINA]        Day, J., Matta, I., and K. Mattar, \"Networking is IPC:\n  \
    \               A Guiding Principle to a Better Internet\", In\n             \
    \    Proceedings of the 2008 ACM CoNEXT Conference, Article\n                \
    \ No. 67, 2008.\n   [RouteFlow]   Nascimento, M., Rothenberg, C., Salvador, M.,\
    \ Correa,\n                 C., de Lucena, S., and M. Magalhaes, \"Virtual Routers\n\
    \                 as a Service: The RouteFlow Approach Leveraging\n          \
    \       Software-Defined Networks\", In Proceedings of the 6th\n             \
    \    International Conference on Future Internet\n                 Technologies,\
    \ pp. 34-37, 2011.\n   [SDNACS]      Kreutz, D., Ramos, F., Verissimo, P., Rothenberg,\
    \ C.,\n                 Azodolmolky, S., and S. Uhlig, \"Software-Defined\n  \
    \               Networking: A Comprehensive Survey\", Networking and\n       \
    \          Internet Architecture (cs.NI), arXiv:1406.0440, 2014.\n   [SDNHistory]\
    \  Feamster, N., Rexford, J., and E. Zegura, \"The Road to\n                 SDN:\
    \ An Intellectual History of Programmable Networks\",\n                 ACM Queue,\
    \ Volume 11, Issue 12, 2013.\n   [SDNNFV]      Haleplidis, E., Hadi Salim, J.,\
    \ Denazis, S., and O.\n                 Koufopavlou, \"Towards a Network Abstraction\
    \ Model for\n                 SDN\", Journal of Network and Systems Management:\n\
    \                 Special Issue on Management of Software Defined\n          \
    \       Networks, pp. 1-19, 2014.\n   [SDNSecOF]    Kloti, R., Kotronis, V., and\
    \ P. Smith, \"OpenFlow: A\n                 Security Analysis\", 21st IEEE International\
    \ Conference\n                 on Network Protocols (ICNP) pp. 1-6, October 2013.\n\
    \   [SDNSecServ]  Scott-Hayward, S., O'Callaghan, G., and S. Sezer, \"SDN\n  \
    \               Security: A Survey\", In IEEE SDN for Future Networks\n      \
    \           and Services (SDN4FNS), pp. 1-7, 2013.\n   [SDNSecurity] Kreutz, D.,\
    \ Ramos, F., and P. Verissimo, \"Towards\n                 Secure and Dependable\
    \ Software-Defined Networks\", In\n                 Proceedings of the second\
    \ ACM SIGCOMM workshop on Hot\n                 Topics in Software Defined Networking,\
    \ pp. 55-60, 2013.\n   [SDNSurvey]   Nunes, B., Mendonca, M., Nguyen, X., Obraczka,\
    \ K., and\n                 T.  Turletti, \"A Survey of Software-Defined Networking:\n\
    \                 Past, Present, and Future of Programmable Networks\",\n    \
    \             IEEE Communications Surveys and Tutorials,\n                 DOI:10.1109/SURV.2014.012214.00180,\
    \ 2014.\n   [SLTSDN]      Jarraya, Y., Madi, T., and M. Debbabi, \"A Survey and\
    \ a\n                 Layered Taxonomy of Software-Defined Networking\", IEEE\n\
    \                 Communications Surveys and Tutorials, Volume 16, Issue\n   \
    \              4, pp. 1955-1980, 2014.\n   [SoftRouter]  Lakshman, T., Nandagopal,\
    \ T., Ramjee, R., Sabnani, K.,\n                 and T. Woo, \"The SoftRouter\
    \ Architecture\", In\n                 Proceedings of the ACM SIGCOMM Workshop\
    \ on Hot Topics\n                 in Networking, 2004.\n   [Tempest]     Rooney,\
    \ S., van der Merwe, J., Crosby, S., and I.\n                 Leslie, \"The Tempest:\
    \ A Framework for Safe, Resource\n                 Assured, Programmable Networks\"\
    , Communications\n                 Magazine, IEEE, Volume 36, Issue 10, pp. 42-53,\
    \ 1998.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to acknowledge Salvatore Loreto and\
    \ Sudhir\n   Modali for their contributions in the initial discussion on the SDNRG\n\
    \   mailing list as well as their document-specific comments; they helped\n  \
    \ put this document in a better shape.\n   Additionally, we would like to thank\
    \ (in alphabetical order)\n   Shivleela Arlimatti, Roland Bless, Scott Brim, Alan\
    \ Clark, Luis\n   Miguel Contreras Murillo, Tim Copley, Linda Dunbar, Ken Gray,\
    \ Deniz\n   Gurkan, Dave Hood, Georgios Karagiannis, Bhumip Khasnabish, Sriganesh\n\
    \   Kini, Ramki Krishnan, Dirk Kutscher, Diego Lopez, Scott Mansfield,\n   Pedro\
    \ Martinez-Julia, David E. Mcdysan, Erik Nordmark, Carlos\n   Pignataro, Robert\
    \ Raszuk, Bless Roland, Francisco Javier Ros Munoz,\n   Dimitri Staessens, Yaakov\
    \ Stein, Eve Varma, Stuart Venters, Russ\n   White, and Lee Young for their critical\
    \ comments and discussions at\n   IETF 88, IETF 89, and IETF 90 and on the SDNRG\
    \ mailing list, which we\n   took into consideration while revising this document.\n\
    \   We would also like to thank (in alphabetical order) Spencer Dawkins\n   and\
    \ Eliot Lear for their IRSG reviews, which further refined this\n   document.\n\
    \   Finally, we thank Nobo Akiya for his review of the section on BFD,\n   Julien\
    \ Meuric for his review of the section on PCE, and Adrian Farrel\n   and Benoit\
    \ Claise for their IESG reviews of this document.\n   Kostas Pentikousis is supported\
    \ by [ALIEN], a research project\n   partially funded by the European Community\
    \ under the Seventh\n   Framework Program (grant agreement no. 317880).  The views\
    \ expressed\n   here are those of the author only.  The European Commission is\
    \ not\n   liable for any use that may be made of the information in this\n   document.\n"
- title: Contributors
  contents:
  - "Contributors\n   The authors would like to acknowledge (in alphabetical order)\
    \ the\n   following persons as contributors to this document.  They all\n   provided\
    \ text, pointers, and comments that made this document more\n   complete:\n  \
    \ o  Daniel King for providing text related to PCEP.\n   o  Scott Mansfield for\
    \ information regarding current ITU work on SDN.\n   o  Yaakov Stein for providing\
    \ text related to the CAP theorem and\n      SDO-related information.\n   o  Russ\
    \ White for text suggestions on the definitions of control,\n      management,\
    \ and application.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Evangelos Haleplidis (editor)\n   University of Patras\n\
    \   Department of Electrical and Computer Engineering\n   Patras  26500\n   Greece\n\
    \   EMail: ehalep@ece.upatras.gr\n   Kostas Pentikousis (editor)\n   EICT GmbH\n\
    \   Torgauer Strasse 12-15\n   10829 Berlin\n   Germany\n   EMail: k.pentikousis@eict.de\n\
    \   Spyros Denazis\n   University of Patras\n   Department of Electrical and Computer\
    \ Engineering\n   Patras  26500\n   Greece\n   EMail: sdena@upatras.gr\n   Jamal\
    \ Hadi Salim\n   Mojatatu Networks\n   Suite 400, 303 Moodie Dr.\n   Ottawa, Ontario\
    \  K2H 9R4\n   Canada\n   EMail: hadi@mojatatu.com\n   David Meyer\n   Brocade\n\
    \   EMail: dmm@1-4-5.net\n   Odysseas Koufopavlou\n   University of Patras\n \
    \  Department of Electrical and Computer Engineering\n   Patras  26500\n   Greece\n\
    \   EMail: odysseas@ece.upatras.gr\n"
