- title: __initial_text__
  contents:
  - '    Voluntary Application Server Identification (VAPID) for Web Push

    '
- title: Abstract
  contents:
  - "Abstract\n   An application server can use the Voluntary Application Server\n\
    \   Identification (VAPID) method described in this document to\n   voluntarily\
    \ identify itself to a push service.  The \"vapid\"\n   authentication scheme\
    \ allows a client to include its identity in a\n   signed token with requests\
    \ that it makes.  The signature can be used\n   by the push service to attribute\
    \ requests that are made by the same\n   application server to a single entity.\
    \  The identification\n   information can allow the operator of a push service\
    \ to contact the\n   operator of the application server.  The signature can be\
    \ used to\n   restrict the use of a push message subscription to a single\n  \
    \ application server.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8292.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Voluntary Identification ...................................3\n  \
    \    1.2. Notational Conventions .....................................4\n   2.\
    \ Application Server Self-Identification ..........................4\n      2.1.\
    \ Application Server Contact Information .....................5\n      2.2. Additional\
    \ Claims ..........................................5\n      2.3. Cryptographic\
    \ Agility ......................................5\n      2.4. Example ....................................................5\n\
    \   3. VAPID Authentication Scheme .....................................6\n  \
    \    3.1. Token Parameter (\"t\") ......................................7\n  \
    \    3.2. Public Key Parameter (\"k\") .................................7\n  \
    \ 4. Subscription Restriction ........................................7\n    \
    \  4.1. Creating a Restricted Push Message Subscription ............8\n      4.2.\
    \ Using Restricted Subscriptions .............................9\n   5. Security\
    \ Considerations .........................................9\n   6. IANA Considerations\
    \ ............................................10\n      6.1. VAPID Authentication\
    \ Scheme Registration ..................10\n      6.2. VAPID Authentication Scheme\
    \ Parameters ....................10\n      6.3. application/webpush-options+json\
    \ Media Type Registration ..11\n   7. References .....................................................12\n\
    \      7.1. Normative References ......................................12\n  \
    \    7.2. Informative References ....................................14\n   Acknowledgements\
    \ ..................................................14\n   Authors' Addresses\
    \ ................................................14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Web Push protocol [RFC8030] describes how an application\
    \ server\n   is able to request that a push service deliver a push message to\
    \ a\n   user agent.\n   As a consequence of the expected deployment architecture,\
    \ there is no\n   basis for an application server to be known to a push service\
    \ prior\n   to requesting delivery of a push message.  Requiring that the push\n\
    \   service be able to authenticate application servers places an\n   unwanted\
    \ constraint on the interactions between user agents and\n   application servers,\
    \ who are the ultimate users of a push service.\n   That constraint would also\
    \ degrade the privacy-preserving properties\n   the protocol provides.  For these\
    \ reasons, [RFC8030] does not define\n   a mandatory system for authentication\
    \ of application servers.\n   An unfortunate consequence of the design of [RFC8030]\
    \ is that a push\n   service is exposed to a greater risk of denial-of-service\
    \ attacks.\n   While requests from application servers can be indirectly attributed\n\
    \   to user agents, this is not always efficient or even sufficient.\n   Providing\
    \ more information about the application server directly to a\n   push service\
    \ allows the push service to better distinguish between\n   legitimate and bogus\
    \ requests.\n   Additionally, the design of [RFC8030] relies on maintaining the\n\
    \   secrecy of push message subscription URIs.  Any application server in\n  \
    \ possession of a push message subscription URI is able to send\n   messages to\
    \ the user agent.  If use of a subscription could be\n   limited to a single application\
    \ server, this would reduce the impact\n   of the push message subscription URI\
    \ being learned by an unauthorized\n   party.\n"
- title: 1.1.  Voluntary Identification
  contents:
  - "1.1.  Voluntary Identification\n   This document describes a system whereby an\
    \ application server can\n   volunteer information about itself to a push service.\
    \  At a minimum,\n   this provides a stable identity for the application server,\
    \ though\n   this could also include contact information, such as an email\n \
    \  address.\n   A consistent identity can be used by a push service to establish\n\
    \   behavioral expectations for an application server.  Significant\n   deviations\
    \ from an established norm can then be used to trigger\n   exception-handling\
    \ procedures.\n   Voluntarily provided contact information can be used to contact\
    \ an\n   application server operator in the case of exceptional situations.\n\
    \   Experience with push service deployment has shown that software\n   errors\
    \ or unusual circumstances can cause large increases in push\n   message volume.\
    \  Contacting the operator of the application server\n   has proven to be valuable.\n\
    \   Even in the absence of usable contact information, an application\n   server\
    \ that has a well-established reputation might be given\n   preference over an\
    \ unidentified application server when choosing\n   whether to discard a push\
    \ message.\n"
- title: 1.2.  Notational Conventions
  contents:
  - "1.2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   The terms \"push message\", \"push service\"\
    , \"push message\n   subscription\", \"application server\", and \"user agent\"\
    \ are used as\n   defined in [RFC8030].\n"
- title: 2.  Application Server Self-Identification
  contents:
  - "2.  Application Server Self-Identification\n   Application servers that wish\
    \ to self-identify generate and maintain\n   a signing key pair.  This key pair\
    \ MUST be usable with the Elliptic\n   Curve Digital Signature Algorithm (ECDSA)\
    \ over the P-256 curve\n   [FIPS186].  Use of this key when sending push messages\
    \ establishes an\n   identity for the application server that is consistent across\n\
    \   multiple messages.\n   When requesting delivery of a push message, the application\
    \ includes\n   a JSON Web Token (JWT) [RFC7519], signed using its signing key.\
    \  The\n   token includes a number of claims as follows:\n   o  An \"aud\" (Audience)\
    \ claim in the token MUST include the Unicode\n      serialization of the origin\
    \ (Section 6.1 of [RFC6454]) of the push\n      resource URL.  This binds the\
    \ token to a specific push service and\n      ensures that the token is reusable\
    \ for all push resource URLs that\n      share the same origin.\n   o  An \"exp\"\
    \ (Expiry) claim MUST be included with the time after which\n      the token expires.\
    \  This limits the time over which a token is\n      valid.  An \"exp\" claim\
    \ MUST NOT be more than 24 hours from the\n      time of the request.  Limiting\
    \ this to 24 hours balances the need\n      for reuse against the potential cost\
    \ and likelihood of theft of a\n      valid token.\n   This JWT is included in\
    \ an Authorization header field, using an\n   authentication scheme of \"vapid\"\
    .  A push service MAY reject a\n   request with a 403 (Forbidden) status code\
    \ [RFC7231] if the JWT\n   signature or its claims are invalid.  A push service\
    \ MUST NOT use\n   information from an invalid token.\n   The JWT MUST use a JSON\
    \ Web Signature (JWS) [RFC7515].  The signature\n   MUST use ECDSA on the NIST\
    \ P-256 curve [FIPS186], which is identified\n   as \"ES256\" [RFC7518].\n"
- title: 2.1.  Application Server Contact Information
  contents:
  - "2.1.  Application Server Contact Information\n   If the application server wishes\
    \ to provide contact details, it MAY\n   include a \"sub\" (Subject) claim in\
    \ the JWT.  The \"sub\" claim SHOULD\n   include a contact URI for the application\
    \ server as either a\n   \"mailto:\" (email) [RFC6068] or an \"https:\" [RFC2818]\
    \ URI.\n"
- title: 2.2.  Additional Claims
  contents:
  - "2.2.  Additional Claims\n   An application server MAY include additional claims\
    \ using public or\n   private names (see Sections 4.2 and 4.3 of [RFC7519]). \
    \ Since the JWT\n   is in a header field, the size of additional claims SHOULD\
    \ be kept as\n   small as possible.\n"
- title: 2.3.  Cryptographic Agility
  contents:
  - "2.3.  Cryptographic Agility\n   The \"vapid\" HTTP authentication scheme (Section\
    \ 3) is used to\n   identify the specific profile of JWT defined in this document.\
    \  A\n   different authentication scheme is needed to update the signature\n \
    \  algorithm or other parameters.  This ensures that existing mechanisms\n   for\
    \ negotiating authentication schemes can be used rather than\n   defining new\
    \ parameter negotiation mechanisms.\n"
- title: 2.4.  Example
  contents:
  - "2.4.  Example\n   An application server requests the delivery of a push message\
    \ as\n   described in [RFC8030].  If the application server wishes to self-\n\
    \   identify, it includes an Authorization header field with credentials\n   that\
    \ use the \"vapid\" authentication scheme.\n   POST /p/JzLQ3raZJfFBR0aqvOMsLrt54w4rJUsV\
    \ HTTP/1.1\n   Host: push.example.net\n   TTL: 30\n   Content-Length: 136\n  \
    \ Content-Encoding: aes128gcm\n   Authorization: vapid\n      t=eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJhdWQiOiJodHRwczovL3\n\
    \        B1c2guZXhhbXBsZS5uZXQiLCJleHAiOjE0NTM1MjM3NjgsInN1YiI6Im1ha\n       \
    \ Wx0bzpwdXNoQGV4YW1wbGUuY29tIn0.i3CYb7t4xfxCDquptFOepC9GAu_H\n        LGkMlMuCGSK2rpiUfnK9ojFwDXb1JrErtmysazNjjvW2L9OkSSHzvoD1oA,\n\
    \      k=BA1Hxzyi1RUM1b5wjxsn7nGxAszw2u61m164i3MrAIxHF6YK5h4SDYic-dR\n       \
    \ uU_RCPCfA5aq9ojSwk5Y2EmClBPs\n   { encrypted push message }\n            Figure\
    \ 1: Requesting Push Message Delivery with JWT\n   Note that the example header\
    \ fields in this document include extra\n   line wrapping to meet formatting constraints.\n\
    \   The \"t\" parameter of the Authorization header field contains a JWT;\n  \
    \ the \"k\" parameter includes the base64url-encoded key that signed that\n  \
    \ token.  The JWT input values and the JSON Web Key (JWK) [RFC7517]\n   corresponding\
    \ to the signing key are shown in Figure 2 with\n   additional whitespace added\
    \ for readability purposes.  This JWT would\n   be valid until 2016-01-23T04:36:08Z.\n\
    \   JWT header = { \"typ\": \"JWT\", \"alg\": \"ES256\" }\n   JWT body = { \"\
    aud\": \"https://push.example.net\",\n                \"exp\": 1453523768,\n \
    \               \"sub\": \"mailto:push@example.com\" }\n   JWK = { \"crv\":\"\
    P-256\",\n           \"kty\":\"EC\",\n           \"x\":\"DUfHPKLVFQzVvnCPGyfucbECzPDa7rWbXriLcysAjEc\"\
    ,\n           \"y\":\"F6YK5h4SDYic-dRuU_RCPCfA5aq9ojSwk5Y2EmClBPs\" }\n      \
    \               Figure 2: Decoded Example Values\n"
- title: 3.  VAPID Authentication Scheme
  contents:
  - "3.  VAPID Authentication Scheme\n   This document defines a new HTTP authentication\
    \ scheme [RFC7235]\n   named \"vapid\".  This authentication scheme carries a\
    \ signed JWT, as\n   described in Section 2, plus the key that signed that JWT.\n\
    \   This authentication scheme is for origin-server authentication only.\n   Therefore,\
    \ this authentication scheme MUST NOT be used with the\n   Proxy-Authenticate\
    \ or Proxy-Authorization header fields.\n   The challenge for the \"vapid\" authentication\
    \ scheme contains only the\n   \"auth-scheme\" production.  No parameters are\
    \ currently defined.\n   Two parameters are defined for this authentication scheme:\
    \ \"t\" and\n   \"k\".  All unknown or unsupported parameters to \"vapid\" authentication\n\
    \   credentials MUST be ignored.  The \"realm\" parameter is ignored for\n   this\
    \ authentication scheme.\n   This authentication scheme is intended for use by\
    \ an application\n   server when using the Web Push protocol [RFC8030].\n"
- title: 3.1.  Token Parameter ("t")
  contents:
  - "3.1.  Token Parameter (\"t\")\n   The \"t\" parameter of the \"vapid\" authentication\
    \ scheme carries a JWT\n   as described in Section 2.\n"
- title: 3.2.  Public Key Parameter ("k")
  contents:
  - "3.2.  Public Key Parameter (\"k\")\n   In order for the push service to be able\
    \ to validate the JWT, it\n   needs to learn the public key of the application\
    \ server.  A \"k\"\n   parameter is defined for the \"vapid\" authentication scheme\
    \ to carry\n   this information.\n   The \"k\" parameter includes an ECDSA public\
    \ key [FIPS186] in\n   uncompressed form [X9.62] that is encoded using base64url\
    \ encoding\n   [RFC7515].\n   Note:  X9.62 encoding is used over JWK [RFC7517]\
    \ for two reasons.  A\n      JWK does not have a canonical form, so X9.62 encoding\
    \ makes it\n      easier for the push service to handle comparison of keys from\n\
    \      different sources.  Secondarily, the X9.62 encoding is also\n      considerably\
    \ smaller.\n   Some elliptic curve implementations permit the same P-256 key to\
    \ be\n   used for signing and key exchange.  An application server MUST select\n\
    \   a different private key for the key exchange [RFC8291] and signing\n   the\
    \ authentication token.  Though a push service is not obligated to\n   check either\
    \ parameter for every push message, a push service SHOULD\n   reject push messages\
    \ that have identical values for these parameters\n   with a 400 (Bad Request)\
    \ status code.\n"
- title: 4.  Subscription Restriction
  contents:
  - "4.  Subscription Restriction\n   The public key of the application server serves\
    \ as a stable\n   identifier for the server.  This key can be used to restrict\
    \ a push\n   message subscription to a specific application server.\n   Subscription\
    \ restriction reduces the reliance on endpoint secrecy by\n   requiring that an\
    \ application server provide a signed token when\n   requesting delivery of a\
    \ push message.  This provides an additional\n   level of protection against leaking\
    \ of the details of the push\n   message subscription.\n"
- title: 4.1.  Creating a Restricted Push Message Subscription
  contents:
  - "4.1.  Creating a Restricted Push Message Subscription\n   A user agent that wishes\
    \ to create a restricted subscription includes\n   the public key of the application\
    \ server when requesting the creation\n   of a push message subscription.  This\
    \ restricts use of the resulting\n   subscription to application servers that\
    \ are able to provide a valid\n   JWT signed by the corresponding private key.\n\
    \   The user agent then adds the public key to the request to create a\n   push\
    \ message subscription.  The push message subscription request is\n   extended\
    \ to include a body.  The body of the request is a JSON object\n   as described\
    \ in [RFC7159].  The user agent adds a \"vapid\" member to\n   this JSON object\
    \ that contains a public key on the P-256 curve,\n   encoded in the uncompressed\
    \ form [X9.62] and base64url encoded\n   [RFC7515].  The media type of the body\
    \ is set to \"application/\n   webpush-options+json\" (see Section 6.3 for registration\
    \ of this media\n   type).\n   A push service MUST ignore the body of a request\
    \ that uses a\n   different media type.  For the \"application/webpush-options+json\"\
    \n   media type, a push service MUST ignore any members on this object\n   that\
    \ it does not understand.\n   The example in Figure 3 shows a restriction to the\
    \ key used in\n   Figure 1.  Extra whitespace is added to meet formatting constraints.\n\
    \   POST /subscribe/ HTTP/1.1\n   Host: push.example.net\n   Content-Type: application/webpush-options+json\n\
    \   Content-Length: 104\n   { \"vapid\": \"BA1Hxzyi1RUM1b5wjxsn7nGxAszw2u61m164i3MrAIxH\n\
    \               F6YK5h4SDYic-dRuU_RCPCfA5aq9ojSwk5Y2EmClBPs\" }\n            \
    \        Figure 3: Example Subscribe Request\n   An application might use the\
    \ Push API [API] to provide the user agent\n   with a public key.\n"
- title: 4.2.  Using Restricted Subscriptions
  contents:
  - "4.2.  Using Restricted Subscriptions\n   When a push message subscription has\
    \ been restricted to an\n   application server, the request for push message delivery\
    \ MUST\n   include a JWT signed by the private key that corresponds to the\n \
    \  public key used when creating the subscription.\n   A push service MUST reject\
    \ a message sent to a restricted push\n   message subscription if that message\
    \ includes no \"vapid\"\n   authentication or invalid \"vapid\" authentication.\
    \  A 401\n   (Unauthorized) status code might be used if the authentication is\n\
    \   absent; a 403 (Forbidden) status code might be used if authentication\n  \
    \ is invalid.\n   \"vapid\" authentication is invalid if:\n   o  either the authentication\
    \ token or public key is not included in\n      the request,\n   o  the signature\
    \ on the JWT cannot be successfully verified using the\n      included public\
    \ key,\n   o  the current time is later than the time identified in the \"exp\"\
    \n      (Expiry) claim or more than 24 hours before the expiry time,\n   o  the\
    \ origin of the push resource is not included in the \"aud\"\n      (Audience)\
    \ claim, or\n   o  the public key used to sign the JWT doesn't match the one that\
    \ was\n      included in the creation of the push message subscription.\n   A\
    \ push service MUST NOT forward the JWT or public key to the user\n   agent when\
    \ delivering the push message.\n   An application server that needs to replace\
    \ its signing key needs to\n   request the creation of a new subscription by the\
    \ user agent that is\n   restricted to the updated key.  Application servers need\
    \ to remember\n   the key that was used when requesting the creation of a subscription.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This authentication scheme is vulnerable to replay\
    \ attacks if an\n   attacker can acquire a valid JWT.  Sending requests using\
    \ HTTPS as\n   required by [RFC8030] provides confidentiality.  Additionally,\n\
    \   applying narrow limits to the period over which a replayable token\n   can\
    \ be reused limits the potential value of a stolen token to an\n   attacker and\
    \ can increase the difficulty of stealing a token.\n   An application server might\
    \ offer falsified contact information.  The\n   application server asserts its\
    \ email address or contact URI without\n   any evidence to support the claim.\
    \  A push service operator cannot\n   use the presence of unvalidated contact\
    \ information as input to any\n   security-critical decision-making process.\n\
    \   Validation of a signature on the JWT requires a non-trivial amount of\n  \
    \ computation.  For something that might be used to identify legitimate\n   requests\
    \ under denial-of-service attack conditions, this is not\n   ideal.  Application\
    \ servers are therefore encouraged to reuse tokens,\n   which permits the push\
    \ service to cache the results of signature\n   validation.\n   An application\
    \ server that changes its signing key breaks linkability\n   between push messages\
    \ that it sends under different keys.  A push\n   service that relies on a consistent\
    \ identity for application servers\n   might categorize requests made with new\
    \ keys differently.  Gradual\n   migration to a new signing key reduces the chances\
    \ that requests that\n   use the new key will be categorized as abusive.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document registers a new authentication scheme,\
    \ a registry for\n   parameters of that scheme, and a media type for push options.\n"
- title: 6.1.  VAPID Authentication Scheme Registration
  contents:
  - "6.1.  VAPID Authentication Scheme Registration\n   This document registers the\
    \ \"vapid\" authentication scheme in the\n   \"Hypertext Transfer Protocol (HTTP)\
    \ Authentication Scheme Registry\"\n   established by [RFC7235].\n   Authentication\
    \ Scheme Name:  vapid\n   Pointer to specification text:  Section 3 of this document\n"
- title: 6.2.  VAPID Authentication Scheme Parameters
  contents:
  - "6.2.  VAPID Authentication Scheme Parameters\n   This document creates a \"VAPID\
    \ Authentication Scheme Parameters\"\n   registry for parameters to the \"vapid\"\
    \ authentication scheme.  These\n   parameters are defined for use in requests\
    \ (in the Authorization\n   header field) and for challenges (in the WWW-Authenticate\
    \ header\n   field).  This registry is under the \"Web Push Parameters\" grouping.\n\
    \   The registry operates on the \"Specification Required\" policy\n   [RFC8126].\n\
    \   Registrations MUST include the following information:\n   Parameter Name:\
    \  A name for the parameter, which conforms to the\n      \"token\" grammar [RFC7230]\n\
    \   Purpose (optional):  Brief text identifying the purpose of the\n      parameter\n\
    \   Header Field(s):  The header field(s) in which the parameter can be\n    \
    \  used\n   Specification:  A link to the specification that defines the format\n\
    \      and semantics of the parameter\n   This registry initially contains the\
    \ following entries:\n   +-------------+------------------+---------------+------------------+\n\
    \   | Parameter   | Purpose          | Header        | Specification    |\n  \
    \ | Name        |                  | Field(s)      |                  |\n   +-------------+------------------+---------------+------------------+\n\
    \   | t           | JWT              | Authorization | [RFC8292],       |\n  \
    \ |             | authentication   |               | Section 3.1      |\n   |\
    \             | token            |               |                  |\n   |  \
    \           |                  |               |                  |\n   | k  \
    \         | signing key      | Authorization | [RFC8292],       |\n   |      \
    \       |                  |               | Section 3.2      |\n   +-------------+------------------+---------------+------------------+\n"
- title: 6.3.  application/webpush-options+json Media Type Registration
  contents:
  - "6.3.  application/webpush-options+json Media Type Registration\n   This document\
    \ registers the \"application/webpush-options+json\" media\n   type in the \"\
    Media Types\" registry following the process described in\n   [RFC6838].\n   Type\
    \ name:  application\n   Subtype name:  webpush-options+json\n   Required parameters:\
    \  none\n   Optional parameters:  none\n   Encoding considerations:  binary (JSON\
    \ is UTF-8-encoded text)\n   Security considerations:  See [RFC7159] for security\
    \ considerations\n      specific to JSON.\n   Interoperability considerations:\
    \  See [RFC7159] for interoperability\n      considerations specific to JSON.\n\
    \   Published specification:  [RFC8292]\n   Applications that use this media type:\
    \  Web browsers, via the Web\n      Push protocol [RFC8030]\n   Fragment identifier\
    \ considerations:  none\n   Additional information:\n      Deprecated alias names\
    \ for this type:  n/a\n      Magic number(s):  n/a\n      File extension(s): \
    \ .json\n      Macintosh file type code(s):  TEXT\n   Person & email address to\
    \ contact for further information:  Martin\n      Thomson (martin.thomson@gmail.com)\n\
    \   Intended usage:  LIMITED USE\n   Restrictions on usage:  For use with the\
    \ Web Push protocol [RFC8030]\n   Author:  See \"Authors' Addresses\" section\
    \ of [RFC8292].\n   Change controller:  Internet Engineering Task Force\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [FIPS186]  National Institute of Standards and\
    \ Technology (NIST),\n              \"Digital Signature Standard (DSS)\", FIPS\
    \ PUB 186-4,\n              DOI 10.6028/NIST.FIPS.186-4, July 2013.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2818]  Rescorla,\
    \ E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818, May 2000,\n\
    \              <https://www.rfc-editor.org/info/rfc2818>.\n   [RFC6068]  Duerst,\
    \ M., Masinter, L., and J. Zawinski, \"The 'mailto'\n              URI Scheme\"\
    , RFC 6068, DOI 10.17487/RFC6068, October 2010,\n              <https://www.rfc-editor.org/info/rfc6068>.\n\
    \   [RFC6454]  Barth, A., \"The Web Origin Concept\", RFC 6454,\n            \
    \  DOI 10.17487/RFC6454, December 2011,\n              <https://www.rfc-editor.org/info/rfc6454>.\n\
    \   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n         \
    \     Specifications and Registration Procedures\", BCP 13,\n              RFC\
    \ 6838, DOI 10.17487/RFC6838, January 2013,\n              <https://www.rfc-editor.org/info/rfc6838>.\n\
    \   [RFC7159]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March\n  \
    \            2014, <https://www.rfc-editor.org/info/rfc7159>.\n   [RFC7230]  Fielding,\
    \ R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):\
    \ Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,\
    \ June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n   [RFC7231]\
    \  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n             \
    \ Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI 10.17487/RFC7231,\
    \ June 2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n   [RFC7235]\
    \  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n             \
    \ Protocol (HTTP/1.1): Authentication\", RFC 7235,\n              DOI 10.17487/RFC7235,\
    \ June 2014,\n              <https://www.rfc-editor.org/info/rfc7235>.\n   [RFC7515]\
    \  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n              Signature\
    \ (JWS)\", RFC 7515, DOI 10.17487/RFC7515, May\n              2015, <https://www.rfc-editor.org/info/rfc7515>.\n\
    \   [RFC7518]  Jones, M., \"JSON Web Algorithms (JWA)\", RFC 7518,\n         \
    \     DOI 10.17487/RFC7518, May 2015,\n              <https://www.rfc-editor.org/info/rfc7518>.\n\
    \   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n   \
    \           (JWT)\", RFC 7519, DOI 10.17487/RFC7519, May 2015,\n             \
    \ <https://www.rfc-editor.org/info/rfc7519>.\n   [RFC8030]  Thomson, M., Damaggio,\
    \ E., and B. Raymor, Ed., \"Generic\n              Event Delivery Using HTTP Push\"\
    , RFC 8030,\n              DOI 10.17487/RFC8030, December 2016,\n            \
    \  <https://www.rfc-editor.org/info/rfc8030>.\n   [RFC8126]  Cotton, M., Leiba,\
    \ B., and T. Narten, \"Guidelines for\n              Writing an IANA Considerations\
    \ Section in RFCs\", BCP 26,\n              RFC 8126, DOI 10.17487/RFC8126, June\
    \ 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8291]  Thomson, M., \"Message\
    \ Encryption for Web Push\", RFC 8291,\n              DOI 10.17487/RFC8291, November\
    \ 2017,\n              <http://www.rfc-editor.org/info/rfc8291>.\n   [X9.62] \
    \   ANSI, \"Public Key Cryptography for the Financial Services\n             \
    \ Industry: the Elliptic Curve Digital Signature Algorithm\n              (ECDSA)\"\
    , ANSI X9.62, 2005.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [API]      Beverloo, P., Thomson, M., van Ouwerkerk,\
    \ M., Sullivan,\n              B., and E. Fullea, \"Push API\", October 2017,\n\
    \              <https://www.w3.org/TR/push-api/>.\n   [RFC7517]  Jones, M., \"\
    JSON Web Key (JWK)\", RFC 7517,\n              DOI 10.17487/RFC7517, May 2015,\n\
    \              <https://www.rfc-editor.org/info/rfc7517>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document would have been much worse than it is if not\
    \ for the\n   contributions of Benjamin Bangert, JR Conlin, Chris Karlof, Costin\n\
    \   Manolache, Adam Roach, and others.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Martin Thomson\n   Mozilla\n   Email: martin.thomson@gmail.com\n\
    \   Peter Beverloo\n   Google\n   Email: beverloo@google.com\n"
